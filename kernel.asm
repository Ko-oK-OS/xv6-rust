
kernel/target/riscv64gc-unknown-none-elf/debug/kernel:     file format elf64-littleriscv


Disassembly of section .text:

0000000080000000 <_entry>:
    80000000:	00037117          	auipc	sp,0x37
    80000004:	54010113          	addi	sp,sp,1344 # 80037540 <stack0>
    80000008:	6511                	lui	a0,0x4
    8000000a:	f14025f3          	csrr	a1,mhartid
    8000000e:	0585                	addi	a1,a1,1
    80000010:	02b50533          	mul	a0,a0,a1
    80000014:	912a                	add	sp,sp,a0
    80000016:	0000c097          	auipc	ra,0xc
    8000001a:	3a0080e7          	jalr	928(ra) # 8000c3b6 <start>
    8000001e:	0001                	nop

0000000080000020 <kernelvec>:
    80000020:	7111                	addi	sp,sp,-256
    80000022:	e006                	sd	ra,0(sp)
    80000024:	e40a                	sd	sp,8(sp)
    80000026:	e80e                	sd	gp,16(sp)
    80000028:	ec12                	sd	tp,24(sp)
    8000002a:	f016                	sd	t0,32(sp)
    8000002c:	f41a                	sd	t1,40(sp)
    8000002e:	f81e                	sd	t2,48(sp)
    80000030:	fc22                	sd	s0,56(sp)
    80000032:	e0a6                	sd	s1,64(sp)
    80000034:	e4aa                	sd	a0,72(sp)
    80000036:	e8ae                	sd	a1,80(sp)
    80000038:	ecb2                	sd	a2,88(sp)
    8000003a:	f0b6                	sd	a3,96(sp)
    8000003c:	f4ba                	sd	a4,104(sp)
    8000003e:	f8be                	sd	a5,112(sp)
    80000040:	fcc2                	sd	a6,120(sp)
    80000042:	e146                	sd	a7,128(sp)
    80000044:	e54a                	sd	s2,136(sp)
    80000046:	e94e                	sd	s3,144(sp)
    80000048:	ed52                	sd	s4,152(sp)
    8000004a:	f156                	sd	s5,160(sp)
    8000004c:	f55a                	sd	s6,168(sp)
    8000004e:	f95e                	sd	s7,176(sp)
    80000050:	fd62                	sd	s8,184(sp)
    80000052:	e1e6                	sd	s9,192(sp)
    80000054:	e5ea                	sd	s10,200(sp)
    80000056:	e9ee                	sd	s11,208(sp)
    80000058:	edf2                	sd	t3,216(sp)
    8000005a:	f1f6                	sd	t4,224(sp)
    8000005c:	f5fa                	sd	t5,232(sp)
    8000005e:	f9fe                	sd	t6,240(sp)
    80000060:	00006097          	auipc	ra,0x6
    80000064:	6bc080e7          	jalr	1724(ra) # 8000671c <kernel_trap>
    80000068:	6082                	ld	ra,0(sp)
    8000006a:	6122                	ld	sp,8(sp)
    8000006c:	61c2                	ld	gp,16(sp)
    8000006e:	7282                	ld	t0,32(sp)
    80000070:	7322                	ld	t1,40(sp)
    80000072:	73c2                	ld	t2,48(sp)
    80000074:	7462                	ld	s0,56(sp)
    80000076:	6486                	ld	s1,64(sp)
    80000078:	6526                	ld	a0,72(sp)
    8000007a:	65c6                	ld	a1,80(sp)
    8000007c:	6666                	ld	a2,88(sp)
    8000007e:	7686                	ld	a3,96(sp)
    80000080:	7726                	ld	a4,104(sp)
    80000082:	77c6                	ld	a5,112(sp)
    80000084:	7866                	ld	a6,120(sp)
    80000086:	688a                	ld	a7,128(sp)
    80000088:	692a                	ld	s2,136(sp)
    8000008a:	69ca                	ld	s3,144(sp)
    8000008c:	6a6a                	ld	s4,152(sp)
    8000008e:	7a8a                	ld	s5,160(sp)
    80000090:	7b2a                	ld	s6,168(sp)
    80000092:	7bca                	ld	s7,176(sp)
    80000094:	7c6a                	ld	s8,184(sp)
    80000096:	6c8e                	ld	s9,192(sp)
    80000098:	6d2e                	ld	s10,200(sp)
    8000009a:	6dce                	ld	s11,208(sp)
    8000009c:	6e6e                	ld	t3,216(sp)
    8000009e:	7e8e                	ld	t4,224(sp)
    800000a0:	7f2e                	ld	t5,232(sp)
    800000a2:	7fce                	ld	t6,240(sp)
    800000a4:	6111                	addi	sp,sp,256
    800000a6:	10200073          	sret
    800000aa:	00000013          	nop
    800000ae:	0001                	nop

00000000800000b0 <timervec>:
    800000b0:	34051573          	csrrw	a0,mscratch,a0
    800000b4:	e10c                	sd	a1,0(a0)
    800000b6:	e510                	sd	a2,8(a0)
    800000b8:	e914                	sd	a3,16(a0)
    800000ba:	6d0c                	ld	a1,24(a0)
    800000bc:	7110                	ld	a2,32(a0)
    800000be:	6194                	ld	a3,0(a1)
    800000c0:	96b2                	add	a3,a3,a2
    800000c2:	e194                	sd	a3,0(a1)
    800000c4:	4589                	li	a1,2
    800000c6:	14459073          	csrw	sip,a1
    800000ca:	6914                	ld	a3,16(a0)
    800000cc:	6510                	ld	a2,8(a0)
    800000ce:	610c                	ld	a1,0(a0)
    800000d0:	34051573          	csrrw	a0,mscratch,a0
    800000d4:	30200073          	mret
	...

0000000080001000 <trampoline>:
    80001000:	14051573          	csrrw	a0,sscratch,a0
    80001004:	02153423          	sd	ra,40(a0) # 4028 <.Lline_table_start0+0x3b3>
    80001008:	02253823          	sd	sp,48(a0)
    8000100c:	02353c23          	sd	gp,56(a0)
    80001010:	04453023          	sd	tp,64(a0)
    80001014:	04553423          	sd	t0,72(a0)
    80001018:	04653823          	sd	t1,80(a0)
    8000101c:	04753c23          	sd	t2,88(a0)
    80001020:	f120                	sd	s0,96(a0)
    80001022:	f524                	sd	s1,104(a0)
    80001024:	fd2c                	sd	a1,120(a0)
    80001026:	e150                	sd	a2,128(a0)
    80001028:	e554                	sd	a3,136(a0)
    8000102a:	e958                	sd	a4,144(a0)
    8000102c:	ed5c                	sd	a5,152(a0)
    8000102e:	0b053023          	sd	a6,160(a0)
    80001032:	0b153423          	sd	a7,168(a0)
    80001036:	0b253823          	sd	s2,176(a0)
    8000103a:	0b353c23          	sd	s3,184(a0)
    8000103e:	0d453023          	sd	s4,192(a0)
    80001042:	0d553423          	sd	s5,200(a0)
    80001046:	0d653823          	sd	s6,208(a0)
    8000104a:	0d753c23          	sd	s7,216(a0)
    8000104e:	0f853023          	sd	s8,224(a0)
    80001052:	0f953423          	sd	s9,232(a0)
    80001056:	0fa53823          	sd	s10,240(a0)
    8000105a:	0fb53c23          	sd	s11,248(a0)
    8000105e:	11c53023          	sd	t3,256(a0)
    80001062:	11d53423          	sd	t4,264(a0)
    80001066:	11e53823          	sd	t5,272(a0)
    8000106a:	11f53c23          	sd	t6,280(a0)
    8000106e:	140022f3          	csrr	t0,sscratch
    80001072:	06553823          	sd	t0,112(a0)
    80001076:	141022f3          	csrr	t0,sepc
    8000107a:	00553c23          	sd	t0,24(a0)
    8000107e:	00853103          	ld	sp,8(a0)
    80001082:	02053203          	ld	tp,32(a0)
    80001086:	01053283          	ld	t0,16(a0)
    8000108a:	00053303          	ld	t1,0(a0)
    8000108e:	18031073          	csrw	satp,t1
    80001092:	12000073          	sfence.vma
    80001096:	8282                	jr	t0
	...

00000000800010a0 <userret>:
    800010a0:	18059073          	csrw	satp,a1
    800010a4:	12000073          	sfence.vma
    800010a8:	07053283          	ld	t0,112(a0)
    800010ac:	14029073          	csrw	sscratch,t0
    800010b0:	02853083          	ld	ra,40(a0)
    800010b4:	03053103          	ld	sp,48(a0)
    800010b8:	03853183          	ld	gp,56(a0)
    800010bc:	04053203          	ld	tp,64(a0)
    800010c0:	04853283          	ld	t0,72(a0)
    800010c4:	05053303          	ld	t1,80(a0)
    800010c8:	05853383          	ld	t2,88(a0)
    800010cc:	7120                	ld	s0,96(a0)
    800010ce:	7524                	ld	s1,104(a0)
    800010d0:	7d2c                	ld	a1,120(a0)
    800010d2:	6150                	ld	a2,128(a0)
    800010d4:	6554                	ld	a3,136(a0)
    800010d6:	6958                	ld	a4,144(a0)
    800010d8:	6d5c                	ld	a5,152(a0)
    800010da:	0a053803          	ld	a6,160(a0)
    800010de:	0a853883          	ld	a7,168(a0)
    800010e2:	0b053903          	ld	s2,176(a0)
    800010e6:	0b853983          	ld	s3,184(a0)
    800010ea:	0c053a03          	ld	s4,192(a0)
    800010ee:	0c853a83          	ld	s5,200(a0)
    800010f2:	0d053b03          	ld	s6,208(a0)
    800010f6:	0d853b83          	ld	s7,216(a0)
    800010fa:	0e053c03          	ld	s8,224(a0)
    800010fe:	0e853c83          	ld	s9,232(a0)
    80001102:	0f053d03          	ld	s10,240(a0)
    80001106:	0f853d83          	ld	s11,248(a0)
    8000110a:	10053e03          	ld	t3,256(a0)
    8000110e:	10853e83          	ld	t4,264(a0)
    80001112:	11053f03          	ld	t5,272(a0)
    80001116:	11853f83          	ld	t6,280(a0)
    8000111a:	14051573          	csrrw	a0,sscratch,a0
    8000111e:	10200073          	sret

0000000080001122 <switch>:
    80001122:	00153023          	sd	ra,0(a0)
    80001126:	00253423          	sd	sp,8(a0)
    8000112a:	e900                	sd	s0,16(a0)
    8000112c:	ed04                	sd	s1,24(a0)
    8000112e:	03253023          	sd	s2,32(a0)
    80001132:	03353423          	sd	s3,40(a0)
    80001136:	03453823          	sd	s4,48(a0)
    8000113a:	03553c23          	sd	s5,56(a0)
    8000113e:	05653023          	sd	s6,64(a0)
    80001142:	05753423          	sd	s7,72(a0)
    80001146:	05853823          	sd	s8,80(a0)
    8000114a:	05953c23          	sd	s9,88(a0)
    8000114e:	07a53023          	sd	s10,96(a0)
    80001152:	07b53423          	sd	s11,104(a0)
    80001156:	0005b083          	ld	ra,0(a1)
    8000115a:	0085b103          	ld	sp,8(a1)
    8000115e:	6980                	ld	s0,16(a1)
    80001160:	6d84                	ld	s1,24(a1)
    80001162:	0205b903          	ld	s2,32(a1)
    80001166:	0285b983          	ld	s3,40(a1)
    8000116a:	0305ba03          	ld	s4,48(a1)
    8000116e:	0385ba83          	ld	s5,56(a1)
    80001172:	0405bb03          	ld	s6,64(a1)
    80001176:	0485bb83          	ld	s7,72(a1)
    8000117a:	0505bc03          	ld	s8,80(a1)
    8000117e:	0585bc83          	ld	s9,88(a1)
    80001182:	0605bd03          	ld	s10,96(a1)
    80001186:	0685bd83          	ld	s11,104(a1)
    8000118a:	8082                	ret

Disassembly of section .text._ZN6kernel7process3elf8load_seg17h8e22665aca7680efE:

000000008000118c <_ZN6kernel7process3elf8load_seg17h8e22665aca7680efE>:
/// va must be page-aligned
/// and the pages from va to va+sz must already be mapped.
/// Returns 0 on success, -1 on failure.
#[allow(unused_variables)]
#[allow(unused_assignments)]
fn load_seg(
    8000118c:	7111                	addi	sp,sp,-256
    8000118e:	fd86                	sd	ra,248(sp)
    80001190:	e4ba                	sd	a4,72(sp)
    80001192:	e8b6                	sd	a3,80(sp)
    80001194:	ecb2                	sd	a2,88(sp)
    80001196:	f0ae                	sd	a1,96(sp)
    80001198:	85aa                	mv	a1,a0
    8000119a:	7506                	ld	a0,96(sp)
    8000119c:	f4ae                	sd	a1,104(sp)
    8000119e:	e5ae                	sd	a1,200(sp)
    800011a0:	e9aa                	sd	a0,208(sp)
    800011a2:	edb2                	sd	a2,216(sp)
    800011a4:	f1b6                	sd	a3,224(sp)
    800011a6:	f5ba                	sd	a4,232(sp)
    inode_data: &mut SleepLockGuard<InodeData>,
    offset: usize, 
    size: usize
) -> Result<(), &'static str> {
    // 生成虚拟地址
    let mut va = VirtualAddress::new(va);
    800011a8:	00010097          	auipc	ra,0x10
    800011ac:	6b8080e7          	jalr	1720(ra) # 80011860 <_ZN6kernel6memory7address14VirtualAddress3new17h716be423461f1938E>
    800011b0:	e12a                	sd	a0,128(sp)
    800011b2:	a009                	j	800011b4 <_ZN6kernel7process3elf8load_seg17h8e22665aca7680efE+0x28>
    800011b4:	0108                	addi	a0,sp,128
    if !va.is_page_aligned() {
    800011b6:	00003097          	auipc	ra,0x3
    800011ba:	6aa080e7          	jalr	1706(ra) # 80004860 <_ZN6kernel6memory7address4Addr15is_page_aligned17h21d9aa1b7bd151ebE>
    800011be:	e0aa                	sd	a0,64(sp)
    800011c0:	a009                	j	800011c2 <_ZN6kernel7process3elf8load_seg17h8e22665aca7680efE+0x36>
    800011c2:	6506                	ld	a0,64(sp)
    800011c4:	e10d                	bnez	a0,800011e6 <.LBB0_33+0x16>
    800011c6:	a009                	j	800011c8 <.LBB0_32>

00000000800011c8 <.LBB0_32>:
        panic!("load_seg(): va must be page aligned.");
    800011c8:	00024517          	auipc	a0,0x24
    800011cc:	f8850513          	addi	a0,a0,-120 # 80025150 <.L__unnamed_1>

00000000800011d0 <.LBB0_33>:
    800011d0:	00024617          	auipc	a2,0x24
    800011d4:	fb860613          	addi	a2,a2,-72 # 80025188 <.L__unnamed_2>
    800011d8:	02400593          	li	a1,36
    800011dc:	00021097          	auipc	ra,0x21
    800011e0:	09a080e7          	jalr	154(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    800011e4:	0000                	unimp
    800011e6:	7526                	ld	a0,104(sp)
    800011e8:	4581                	li	a1,0
    }

    let mut copy_size: usize = 0;
    800011ea:	e52e                	sd	a1,136(sp)
    let pagetable = unsafe { &mut *page_table };
    800011ec:	f9aa                	sd	a0,240(sp)
    while copy_size < size {
    800011ee:	a009                	j	800011f0 <.LBB0_33+0x20>
    800011f0:	65a6                	ld	a1,72(sp)
    800011f2:	652a                	ld	a0,136(sp)
    800011f4:	00b56663          	bltu	a0,a1,80001200 <.LBB0_33+0x30>
    800011f8:	a009                	j	800011fa <.LBB0_33+0x2a>
    800011fa:	4501                	li	a0,0

        copy_size += PGSIZE;
        va.add_page();
    }

    Ok(())
    800011fc:	f8aa                	sd	a0,112(sp)
}
    800011fe:	a211                	j	80001302 <.LBB0_36+0x30>
                .pgt_translate(va) {
    80001200:	7526                	ld	a0,104(sp)
    80001202:	658a                	ld	a1,128(sp)
        match pagetable
    80001204:	00016097          	auipc	ra,0x16
    80001208:	f74080e7          	jalr	-140(ra) # 80017178 <_ZN6kernel6memory7mapping10page_table9PageTable13pgt_translate17h8fe9f71b8d139103E>
    8000120c:	e92a                	sd	a0,144(sp)
    8000120e:	ed2e                	sd	a1,152(sp)
    80001210:	a009                	j	80001212 <.LBB0_33+0x42>
            Some(pa) => {
    80001212:	654a                	ld	a0,144(sp)
    80001214:	4581                	li	a1,0
    80001216:	00b50463          	beq	a0,a1,8000121e <.LBB0_34>
    8000121a:	a009                	j	8000121c <.LBB0_33+0x4c>
    8000121c:	a00d                	j	8000123e <.LBB0_35+0x18>

000000008000121e <.LBB0_34>:
                panic!("load_seg(): address should exist.");
    8000121e:	00024517          	auipc	a0,0x24
    80001222:	05250513          	addi	a0,a0,82 # 80025270 <.L__unnamed_3>

0000000080001226 <.LBB0_35>:
    80001226:	00024617          	auipc	a2,0x24
    8000122a:	07260613          	addi	a2,a2,114 # 80025298 <.L__unnamed_4>
    8000122e:	02100593          	li	a1,33
    80001232:	00021097          	auipc	ra,0x21
    80001236:	044080e7          	jalr	68(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8000123a:	0000                	unimp
        match pagetable
    8000123c:	0000                	unimp
            Some(pa) => {
    8000123e:	6526                	ld	a0,72(sp)
    80001240:	65ea                	ld	a1,152(sp)
    80001242:	f12e                	sd	a1,160(sp)
                if size - copy_size < PGSIZE {
    80001244:	65aa                	ld	a1,136(sp)
    80001246:	40b505b3          	sub	a1,a0,a1
    8000124a:	fc2e                	sd	a1,56(sp)
    8000124c:	0cb56063          	bltu	a0,a1,8000130c <.LBB0_37>
    80001250:	a009                	j	80001252 <.LBB0_35+0x2c>
    80001252:	7562                	ld	a0,56(sp)
    80001254:	8131                	srli	a0,a0,0xc
    80001256:	4581                	li	a1,0
    80001258:	00b51b63          	bne	a0,a1,8000126e <.LBB0_35+0x48>
    8000125c:	a009                	j	8000125e <.LBB0_35+0x38>
                    count = size - copy_size;
    8000125e:	6526                	ld	a0,72(sp)
    80001260:	65aa                	ld	a1,136(sp)
    80001262:	40b505b3          	sub	a1,a0,a1
    80001266:	f82e                	sd	a1,48(sp)
    80001268:	0cb56163          	bltu	a0,a1,8000132a <.LBB0_39>
    8000126c:	a021                	j	80001274 <.LBB0_35+0x4e>
    8000126e:	6505                	lui	a0,0x1
                    count = PGSIZE;
    80001270:	f52a                	sd	a0,168(sp)
                if size - copy_size < PGSIZE {
    80001272:	a021                	j	8000127a <.LBB0_35+0x54>
                    count = size - copy_size;
    80001274:	7542                	ld	a0,48(sp)
    80001276:	f52a                	sd	a0,168(sp)
                if size - copy_size < PGSIZE {
    80001278:	a009                	j	8000127a <.LBB0_35+0x54>
                if inode_data.read(
    8000127a:	6566                	ld	a0,88(sp)
    8000127c:	0001c097          	auipc	ra,0x1c
    80001280:	466080e7          	jalr	1126(ra) # 8001d6e2 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    80001284:	f42a                	sd	a0,40(sp)
    80001286:	a009                	j	80001288 <.LBB0_35+0x62>
    80001288:	1108                	addi	a0,sp,160
                    pa.as_usize(), 
    8000128a:	00010097          	auipc	ra,0x10
    8000128e:	5c4080e7          	jalr	1476(ra) # 8001184e <_ZN90_$LT$kernel..memory..address..PhysicalAddress$u20$as$u20$kernel..memory..address..Addr$GT$8as_usize17hea2eecdb80a1a2b2E>
    80001292:	f02a                	sd	a0,32(sp)
    80001294:	a009                	j	80001296 <.LBB0_35+0x70>
                    (offset + copy_size) as u32, 
    80001296:	65c6                	ld	a1,80(sp)
    80001298:	652a                	ld	a0,136(sp)
    8000129a:	952e                	add	a0,a0,a1
    8000129c:	ec2a                	sd	a0,24(sp)
    8000129e:	0ab56563          	bltu	a0,a1,80001348 <.LBB0_41>
    800012a2:	a009                	j	800012a4 <.LBB0_35+0x7e>
                    count as u32
    800012a4:	6762                	ld	a4,24(sp)
    800012a6:	7682                	ld	a3,32(sp)
    800012a8:	75a2                	ld	a1,40(sp)
    800012aa:	77aa                	ld	a5,168(sp)
    800012ac:	1908                	addi	a0,sp,176
    800012ae:	4601                	li	a2,0
                if inode_data.read(
    800012b0:	00019097          	auipc	ra,0x19
    800012b4:	016080e7          	jalr	22(ra) # 8001a2c6 <_ZN6kernel2fs5inode9InodeData4read17h2d02dc0e430e4837E>
    800012b8:	a009                	j	800012ba <.LBB0_35+0x94>
    800012ba:	1908                	addi	a0,sp,176
    800012bc:	0000c097          	auipc	ra,0xc
    800012c0:	ac0080e7          	jalr	-1344(ra) # 8000cd7c <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17he593c7735b347060E>
    800012c4:	e82a                	sd	a0,16(sp)
    800012c6:	a009                	j	800012c8 <.LBB0_35+0xa2>
    800012c8:	6542                	ld	a0,16(sp)
    800012ca:	4581                	li	a1,0
    800012cc:	00b50b63          	beq	a0,a1,800012e2 <.LBB0_36+0x10>
    800012d0:	a009                	j	800012d2 <.LBB0_36>

00000000800012d2 <.LBB0_36>:
                    return Err("load_seg: Fail to read inode")
    800012d2:	00024517          	auipc	a0,0x24
    800012d6:	f6a50513          	addi	a0,a0,-150 # 8002523c <.L__unnamed_5>
    800012da:	f8aa                	sd	a0,112(sp)
    800012dc:	4571                	li	a0,28
    800012de:	fcaa                	sd	a0,120(sp)
}
    800012e0:	a00d                	j	80001302 <.LBB0_36+0x30>
        copy_size += PGSIZE;
    800012e2:	65aa                	ld	a1,136(sp)
    800012e4:	6505                	lui	a0,0x1
    800012e6:	952e                	add	a0,a0,a1
    800012e8:	e42a                	sd	a0,8(sp)
    800012ea:	06b56d63          	bltu	a0,a1,80001364 <.LBB0_43>
    800012ee:	a009                	j	800012f0 <.LBB0_36+0x1e>
    800012f0:	6522                	ld	a0,8(sp)
    800012f2:	e52a                	sd	a0,136(sp)
    800012f4:	0108                	addi	a0,sp,128
        va.add_page();
    800012f6:	00003097          	auipc	ra,0x3
    800012fa:	73e080e7          	jalr	1854(ra) # 80004a34 <_ZN6kernel6memory7address4Addr8add_page17hda9f7615eed2e36aE>
    800012fe:	a009                	j	80001300 <.LBB0_36+0x2e>
    while copy_size < size {
    80001300:	bdc5                	j	800011f0 <.LBB0_33+0x20>
}
    80001302:	7546                	ld	a0,112(sp)
    80001304:	75e6                	ld	a1,120(sp)
    80001306:	70ee                	ld	ra,248(sp)
    80001308:	6111                	addi	sp,sp,256
    8000130a:	8082                	ret

000000008000130c <.LBB0_37>:
                if size - copy_size < PGSIZE {
    8000130c:	00024517          	auipc	a0,0x24
    80001310:	eb450513          	addi	a0,a0,-332 # 800251c0 <str.0>

0000000080001314 <.LBB0_38>:
    80001314:	00024617          	auipc	a2,0x24
    80001318:	e8c60613          	addi	a2,a2,-372 # 800251a0 <.L__unnamed_6>
    8000131c:	02100593          	li	a1,33
    80001320:	00021097          	auipc	ra,0x21
    80001324:	f56080e7          	jalr	-170(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008000132a <.LBB0_39>:
                    count = size - copy_size;
    8000132a:	00024517          	auipc	a0,0x24
    8000132e:	e9650513          	addi	a0,a0,-362 # 800251c0 <str.0>

0000000080001332 <.LBB0_40>:
    80001332:	00024617          	auipc	a2,0x24
    80001336:	eb660613          	addi	a2,a2,-330 # 800251e8 <.L__unnamed_7>
    8000133a:	02100593          	li	a1,33
    8000133e:	00021097          	auipc	ra,0x21
    80001342:	f38080e7          	jalr	-200(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080001348 <.LBB0_41>:
                    (offset + copy_size) as u32, 
    80001348:	00024517          	auipc	a0,0x24
    8000134c:	ed850513          	addi	a0,a0,-296 # 80025220 <str.1>

0000000080001350 <.LBB0_42>:
    80001350:	00024617          	auipc	a2,0x24
    80001354:	eb060613          	addi	a2,a2,-336 # 80025200 <.L__unnamed_8>
    80001358:	45f1                	li	a1,28
    8000135a:	00021097          	auipc	ra,0x21
    8000135e:	f1c080e7          	jalr	-228(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080001364 <.LBB0_43>:
        copy_size += PGSIZE;
    80001364:	00024517          	auipc	a0,0x24
    80001368:	ebc50513          	addi	a0,a0,-324 # 80025220 <str.1>

000000008000136c <.LBB0_44>:
    8000136c:	00024617          	auipc	a2,0x24
    80001370:	eec60613          	addi	a2,a2,-276 # 80025258 <.L__unnamed_9>
    80001374:	45f1                	li	a1,28
    80001376:	00021097          	auipc	ra,0x21
    8000137a:	f00080e7          	jalr	-256(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel7process3elf4exec17h6cecf459cb29fe26E:

0000000080001380 <_ZN6kernel7process3elf4exec17h6cecf459cb29fe26E>:


pub unsafe fn exec(
    80001380:	9f010113          	addi	sp,sp,-1552
    80001384:	60113423          	sd	ra,1544(sp)
    80001388:	28e13023          	sd	a4,640(sp)
    8000138c:	28d13423          	sd	a3,648(sp)
    80001390:	28c13823          	sd	a2,656(sp)
    80001394:	28b13c23          	sd	a1,664(sp)
    80001398:	2aa13023          	sd	a0,672(sp)
    8000139c:	54b13823          	sd	a1,1360(sp)
    800013a0:	54c13c23          	sd	a2,1368(sp)
    800013a4:	56d13023          	sd	a3,1376(sp)
    800013a8:	56e13423          	sd	a4,1384(sp)
    800013ac:	4501                	li	a0,0
    path: &str, 
    argv: &[*const u8]
) -> Result<usize, &'static str> {
    let elf = Box::<ElfHeader>::new_zeroed().assume_init();
    800013ae:	54a107a3          	sb	a0,1359(sp)
    800013b2:	54a10723          	sb	a0,1358(sp)
    800013b6:	0001a097          	auipc	ra,0x1a
    800013ba:	51a080e7          	jalr	1306(ra) # 8001b8d0 <_ZN5alloc5boxed12Box$LT$T$GT$10new_zeroed17he41f9c30769fb517E>
    800013be:	2aa13423          	sd	a0,680(sp)
    800013c2:	a009                	j	800013c4 <_ZN6kernel7process3elf4exec17h6cecf459cb29fe26E+0x44>
    800013c4:	2a813503          	ld	a0,680(sp)
    800013c8:	0001b097          	auipc	ra,0x1b
    800013cc:	0b6080e7          	jalr	182(ra) # 8001c47e <_ZN5alloc5boxed60Box$LT$core..mem..maybe_uninit..MaybeUninit$LT$T$GT$$C$A$GT$11assume_init17h4ed953d8735ade7eE>
    800013d0:	2aa13823          	sd	a0,688(sp)
    800013d4:	a009                	j	800013d6 <_ZN6kernel7process3elf4exec17h6cecf459cb29fe26E+0x56>
    let ph = Box::<ProgHeader>::new_zeroed().assume_init();
    800013d6:	0001a097          	auipc	ra,0x1a
    800013da:	4ca080e7          	jalr	1226(ra) # 8001b8a0 <_ZN5alloc5boxed12Box$LT$T$GT$10new_zeroed17hb9a4ac65c8961d16E>
    800013de:	26a13c23          	sd	a0,632(sp)
    800013e2:	a009                	j	800013e4 <_ZN6kernel7process3elf4exec17h6cecf459cb29fe26E+0x64>
    800013e4:	27813503          	ld	a0,632(sp)
    800013e8:	0001b097          	auipc	ra,0x1b
    800013ec:	0c0080e7          	jalr	192(ra) # 8001c4a8 <_ZN5alloc5boxed60Box$LT$core..mem..maybe_uninit..MaybeUninit$LT$T$GT$$C$A$GT$11assume_init17hef567e32e2b3ffa4E>
    800013f0:	2aa13c23          	sd	a0,696(sp)
    800013f4:	a009                	j	800013f6 <_ZN6kernel7process3elf4exec17h6cecf459cb29fe26E+0x76>
    800013f6:	4581                	li	a1,0
    // let mut page_table: *mut PageTable;
    let mut size = 0;
    800013f8:	2cb13023          	sd	a1,704(sp)
    800013fc:	0d88                	addi	a0,sp,720
    800013fe:	10000613          	li	a2,256
    let p: &mut task_struct;
    let mut sp: usize;
    let stack_base: usize;
    let mut user_stack: [usize; MAXARG] = [0;MAXARG];
    80001402:	00024097          	auipc	ra,0x24
    80001406:	d34080e7          	jalr	-716(ra) # 80025136 <memset>

000000008000140a <.LBB1_209>:
    let inode: Inode;

    LOG.begin_op();
    8000140a:	00066517          	auipc	a0,0x66
    8000140e:	5de50513          	addi	a0,a0,1502 # 800679e8 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    80001412:	00007097          	auipc	ra,0x7
    80001416:	7a0080e7          	jalr	1952(ra) # 80008bb2 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$8begin_op17he5b49a48c716e372E>
    8000141a:	a009                	j	8000141c <.LBB1_209+0x12>
    8000141c:	29013503          	ld	a0,656(sp)
    80001420:	29813583          	ld	a1,664(sp)
    80001424:	5eb13423          	sd	a1,1512(sp)
    80001428:	5ea13823          	sd	a0,1520(sp)
    #[inline(always)]
    #[allow(unused_attributes)]
    #[rustc_allow_const_fn_unstable(const_fn_transmute)]
    pub const fn as_bytes(&self) -> &[u8] {
        // SAFETY: const sound because we transmute two types with the same layout
        unsafe { mem::transmute(self) }
    8000142c:	5eb13c23          	sd	a1,1528(sp)
    80001430:	60a13023          	sd	a0,1536(sp)

    // Get current inode by path
    inode = ICACHE.namei(path.as_bytes()).ok_or("Fail to find executable file")?;
    80001434:	26b13423          	sd	a1,616(sp)
    80001438:	26a13823          	sd	a0,624(sp)
    8000143c:	a009                	j	8000143e <.LBB1_209+0x34>
    8000143e:	27013683          	ld	a3,624(sp)
    80001442:	26813603          	ld	a2,616(sp)

0000000080001446 <.LBB1_210>:
    80001446:	00066597          	auipc	a1,0x66
    8000144a:	64a58593          	addi	a1,a1,1610 # 80067a90 <_ZN6kernel2fs5inode6ICACHE17had1be8942ca79bf1E>
    8000144e:	42010513          	addi	a0,sp,1056
    80001452:	00018097          	auipc	ra,0x18
    80001456:	020080e7          	jalr	32(ra) # 80019472 <_ZN6kernel2fs5inode10InodeCache5namei17hc269c6a9eecf1991E>
    8000145a:	a009                	j	8000145c <.LBB1_211>

000000008000145c <.LBB1_211>:
    8000145c:	00024617          	auipc	a2,0x24
    80001460:	e5460613          	addi	a2,a2,-428 # 800252b0 <.L__unnamed_10>
    80001464:	40810513          	addi	a0,sp,1032
    80001468:	42010593          	addi	a1,sp,1056
    8000146c:	46f1                	li	a3,28
    8000146e:	0000d097          	auipc	ra,0xd
    80001472:	51a080e7          	jalr	1306(ra) # 8000e988 <_ZN4core6option15Option$LT$T$GT$5ok_or17hfc73591acc2890d8E>
    80001476:	a009                	j	80001478 <.LBB1_211+0x1c>
    80001478:	1f88                	addi	a0,sp,1008
    8000147a:	40810593          	addi	a1,sp,1032
    8000147e:	0000c097          	auipc	ra,0xc
    80001482:	d4e080e7          	jalr	-690(ra) # 8000d1cc <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7e17d789c0860991E>
    80001486:	a009                	j	80001488 <.LBB1_211+0x2c>
    80001488:	3f013503          	ld	a0,1008(sp)
    8000148c:	4581                	li	a1,0
    8000148e:	00b50463          	beq	a0,a1,80001496 <.LBB1_211+0x3a>
    80001492:	a009                	j	80001494 <.LBB1_211+0x38>
    80001494:	a089                	j	800014d6 <.LBB1_211+0x7a>
    80001496:	40013583          	ld	a1,1024(sp)
    8000149a:	44b13023          	sd	a1,1088(sp)
    8000149e:	3f813603          	ld	a2,1016(sp)
    800014a2:	42c13c23          	sd	a2,1080(sp)
    800014a6:	3ec13023          	sd	a2,992(sp)
    800014aa:	3eb13423          	sd	a1,1000(sp)
    800014ae:	4505                	li	a0,1
    800014b0:	54a107a3          	sb	a0,1359(sp)
    800014b4:	3cc13823          	sd	a2,976(sp)
    800014b8:	3cb13c23          	sd	a1,984(sp)

    // Get inode data by sleeplock
    let mut inode_guard = inode.lock();
    800014bc:	54a10723          	sb	a0,1358(sp)
    800014c0:	0f88                	addi	a0,sp,976
    800014c2:	0001a097          	auipc	ra,0x1a
    800014c6:	9f4080e7          	jalr	-1548(ra) # 8001aeb6 <_ZN6kernel2fs5inode5Inode4lock17he70970c593f751adE>
    800014ca:	44a13423          	sd	a0,1096(sp)
    800014ce:	44b13823          	sd	a1,1104(sp)
    800014d2:	a081                	j	80001512 <.LBB1_211+0xb6>
    inode = ICACHE.namei(path.as_bytes()).ok_or("Fail to find executable file")?;
    800014d4:	0000                	unimp
    800014d6:	3f813503          	ld	a0,1016(sp)
    800014da:	40013583          	ld	a1,1024(sp)
    800014de:	56a13823          	sd	a0,1392(sp)
    800014e2:	56b13c23          	sd	a1,1400(sp)
    800014e6:	0000a097          	auipc	ra,0xa
    800014ea:	586080e7          	jalr	1414(ra) # 8000ba6c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h6f3e3843c20d184aE>
    800014ee:	24a13c23          	sd	a0,600(sp)
    800014f2:	26b13023          	sd	a1,608(sp)
    800014f6:	a009                	j	800014f8 <.LBB1_211+0x9c>
    800014f8:	26013603          	ld	a2,608(sp)
    800014fc:	25813583          	ld	a1,600(sp)
    80001500:	2a013503          	ld	a0,672(sp)
    80001504:	0000c097          	auipc	ra,0xc
    80001508:	ba8080e7          	jalr	-1112(ra) # 8000d0ac <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h4dd43adfe00292f6E>
    8000150c:	a009                	j	8000150e <.LBB1_211+0xb2>
#![no_std]
    8000150e:	3f90006f          	j	80002106 <.LBB1_239+0xe6>
    80001512:	44810513          	addi	a0,sp,1096
           
    // Check ELF header
    if inode_guard.read(
    80001516:	0001c097          	auipc	ra,0x1c
    8000151a:	1cc080e7          	jalr	460(ra) # 8001d6e2 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    8000151e:	24a13823          	sd	a0,592(sp)
    80001522:	a009                	j	80001524 <.LBB1_211+0xc8>
        false, 
        &*elf as *const ElfHeader as usize, 
    80001524:	2b013503          	ld	a0,688(sp)
        0, 
        size_of::<ElfHeader>() as u32
    80001528:	24a13423          	sd	a0,584(sp)
    8000152c:	a009                	j	8000152e <.LBB1_211+0xd2>
    if inode_guard.read(
    8000152e:	24813683          	ld	a3,584(sp)
    80001532:	25013583          	ld	a1,592(sp)
    80001536:	45810513          	addi	a0,sp,1112
    8000153a:	4701                	li	a4,0
    8000153c:	04000793          	li	a5,64
    80001540:	863a                	mv	a2,a4
    80001542:	00019097          	auipc	ra,0x19
    80001546:	d84080e7          	jalr	-636(ra) # 8001a2c6 <_ZN6kernel2fs5inode9InodeData4read17h2d02dc0e430e4837E>
    8000154a:	a009                	j	8000154c <.LBB1_211+0xf0>
    8000154c:	45810513          	addi	a0,sp,1112
    80001550:	0000c097          	auipc	ra,0xc
    80001554:	82c080e7          	jalr	-2004(ra) # 8000cd7c <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17he593c7735b347060E>
    80001558:	24a13023          	sd	a0,576(sp)
    8000155c:	a009                	j	8000155e <.LBB1_211+0x102>
    8000155e:	24013503          	ld	a0,576(sp)
    80001562:	4581                	li	a1,0
    80001564:	00b50f63          	beq	a0,a1,80001582 <.LBB1_211+0x126>
    80001568:	a009                	j	8000156a <.LBB1_211+0x10e>
    8000156a:	4501                	li	a0,0
    ).is_err() {
        drop(inode_guard);
    8000156c:	54a10723          	sb	a0,1358(sp)
    80001570:	44813503          	ld	a0,1096(sp)
    80001574:	45013583          	ld	a1,1104(sp)
    80001578:	0001c097          	auipc	ra,0x1c
    8000157c:	af0080e7          	jalr	-1296(ra) # 8001d068 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    80001580:	a819                	j	80001596 <.LBB1_212>
        LOG.end_op();
        return Err("exec: Fail to read elf header.")
    }

    // println!("[Debug] 检查魔数");
    if elf.magic != ELF_MAGIC {
    80001582:	2b013503          	ld	a0,688(sp)
    80001586:	4108                	lw	a0,0(a0)
    80001588:	464c45b7          	lui	a1,0x464c4
    8000158c:	57f5859b          	addiw	a1,a1,1407
    80001590:	02b51963          	bne	a0,a1,800015c2 <.LBB1_213+0x16>
    80001594:	a099                	j	800015da <.LBB1_214>

0000000080001596 <.LBB1_212>:
        LOG.end_op();
    80001596:	00066517          	auipc	a0,0x66
    8000159a:	45250513          	addi	a0,a0,1106 # 800679e8 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    8000159e:	00008097          	auipc	ra,0x8
    800015a2:	bfa080e7          	jalr	-1030(ra) # 80009198 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>
    800015a6:	a009                	j	800015a8 <.LBB1_212+0x12>
        return Err("exec: Fail to read elf header.")
    800015a8:	2a013583          	ld	a1,672(sp)

00000000800015ac <.LBB1_213>:
    800015ac:	00024517          	auipc	a0,0x24
    800015b0:	d2050513          	addi	a0,a0,-736 # 800252cc <.L__unnamed_11>
    800015b4:	e588                	sd	a0,8(a1)
    800015b6:	4579                	li	a0,30
    800015b8:	e988                	sd	a0,16(a1)
    800015ba:	4505                	li	a0,1
    800015bc:	e188                	sd	a0,0(a1)
    800015be:	3330006f          	j	800020f0 <.LBB1_239+0xd0>
    800015c2:	4501                	li	a0,0
        // println!("[Debug] 魔数错误, 为0x{:x}, 应为0x{:x}", elf.magic, ELF_MAGIC);
        drop(inode_guard);
    800015c4:	54a10723          	sb	a0,1358(sp)
    800015c8:	44813503          	ld	a0,1096(sp)
    800015cc:	45013583          	ld	a1,1104(sp)
    800015d0:	0001c097          	auipc	ra,0x1c
    800015d4:	a98080e7          	jalr	-1384(ra) # 8001d068 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    800015d8:	a821                	j	800015f0 <.LBB1_215>

00000000800015da <.LBB1_214>:
        LOG.end_op();
        return Err("exec: Elf magic number is wrong.")
    }

    let my_proc = CPU_MANAGER.myproc().unwrap();
    800015da:	00072517          	auipc	a0,0x72
    800015de:	b6650513          	addi	a0,a0,-1178 # 80073140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    800015e2:	00011097          	auipc	ra,0x11
    800015e6:	81c080e7          	jalr	-2020(ra) # 80011dfe <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    800015ea:	22a13c23          	sd	a0,568(sp)
    800015ee:	a805                	j	8000161e <.LBB1_216+0x18>

00000000800015f0 <.LBB1_215>:
        LOG.end_op();
    800015f0:	00066517          	auipc	a0,0x66
    800015f4:	3f850513          	addi	a0,a0,1016 # 800679e8 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    800015f8:	00008097          	auipc	ra,0x8
    800015fc:	ba0080e7          	jalr	-1120(ra) # 80009198 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>
    80001600:	a009                	j	80001602 <.LBB1_215+0x12>
        return Err("exec: Elf magic number is wrong.")
    80001602:	2a013583          	ld	a1,672(sp)

0000000080001606 <.LBB1_216>:
    80001606:	00024517          	auipc	a0,0x24
    8000160a:	d0450513          	addi	a0,a0,-764 # 8002530a <.L__unnamed_11+0x3e>
    8000160e:	e588                	sd	a0,8(a1)
    80001610:	02000513          	li	a0,32
    80001614:	e988                	sd	a0,16(a1)
    80001616:	4505                	li	a0,1
    80001618:	e188                	sd	a0,0(a1)
    8000161a:	2d70006f          	j	800020f0 <.LBB1_239+0xd0>
    let my_proc = CPU_MANAGER.myproc().unwrap();
    8000161e:	23813503          	ld	a0,568(sp)

0000000080001622 <.LBB1_217>:
    80001622:	00024597          	auipc	a1,0x24
    80001626:	e6e58593          	addi	a1,a1,-402 # 80025490 <.L__unnamed_13>
    8000162a:	0000d097          	auipc	ra,0xd
    8000162e:	722080e7          	jalr	1826(ra) # 8000ed4c <_ZN4core6option15Option$LT$T$GT$6unwrap17h81f0c84c54a80648E>
    80001632:	85aa                	mv	a1,a0
    80001634:	22b13823          	sd	a1,560(sp)
    80001638:	58a13023          	sd	a0,1408(sp)
    8000163c:	a009                	j	8000163e <.LBB1_217+0x1c>
    let pagetable = my_proc.proc_pagetable();
    8000163e:	23013503          	ld	a0,560(sp)
    80001642:	00015097          	auipc	ra,0x15
    80001646:	a30080e7          	jalr	-1488(ra) # 80016072 <_ZN6kernel7process7process11task_struct14proc_pagetable17h014e9ba7c74d9318E>
    8000164a:	85aa                	mv	a1,a0
    8000164c:	22b13423          	sd	a1,552(sp)
    80001650:	58a13423          	sd	a0,1416(sp)
    80001654:	a009                	j	80001656 <.LBB1_217+0x34>
    let page_table = &mut *pagetable;
    80001656:	22813503          	ld	a0,552(sp)
    8000165a:	58a13823          	sd	a0,1424(sp)
            
        
        let ph_size = size_of::<ProgHeader>() as u32;
    8000165e:	a009                	j	80001660 <.LBB1_217+0x3e>
    80001660:	03800513          	li	a0,56
    80001664:	20a13823          	sd	a0,528(sp)
    80001668:	58a12c23          	sw	a0,1432(sp)
        // Load program into memeory. 
        let mut off = elf.phoff;
    8000166c:	2b013503          	ld	a0,688(sp)
    80001670:	710c                	ld	a1,32(a0)
    80001672:	46b13823          	sd	a1,1136(sp)
        for _ in 0..elf.phnum {
    80001676:	03851583          	lh	a1,56(a0)
    8000167a:	4501                	li	a0,0
    8000167c:	46a11c23          	sh	a0,1144(sp)
    80001680:	46b11d23          	sh	a1,1146(sp)
    80001684:	0000a097          	auipc	ra,0xa
    80001688:	3ca080e7          	jalr	970(ra) # 8000ba4e <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he12a3ecdd35a2d32E>
    8000168c:	20a13c23          	sd	a0,536(sp)
    80001690:	22b13023          	sd	a1,544(sp)
    80001694:	a009                	j	80001696 <.LBB1_217+0x74>
    80001696:	22013503          	ld	a0,544(sp)
    8000169a:	21813583          	ld	a1,536(sp)
    8000169e:	48b11023          	sh	a1,1152(sp)
    800016a2:	48a11123          	sh	a0,1154(sp)
    800016a6:	a009                	j	800016a8 <.LBB1_217+0x86>
    800016a8:	48010513          	addi	a0,sp,1152
    800016ac:	0000a097          	auipc	ra,0xa
    800016b0:	1b0080e7          	jalr	432(ra) # 8000b85c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h1063a80d56ceadabE>
    800016b4:	48a11423          	sh	a0,1160(sp)
    800016b8:	48b11523          	sh	a1,1162(sp)
    800016bc:	a009                	j	800016be <.LBB1_217+0x9c>
    800016be:	48815503          	lhu	a0,1160(sp)
    800016c2:	4581                	li	a1,0
    800016c4:	00b50463          	beq	a0,a1,800016cc <.LBB1_217+0xaa>
    800016c8:	a009                	j	800016ca <.LBB1_217+0xa8>
    800016ca:	a831                	j	800016e6 <.LBB1_217+0xc4>
    800016cc:	4501                	li	a0,0
            }
            off += size_of::<ProgHeader>();
        }
        // println!("[Debug] 完成加载程序");

        drop(inode_guard);
    800016ce:	54a10723          	sb	a0,1358(sp)
    800016d2:	44813503          	ld	a0,1096(sp)
    800016d6:	45013583          	ld	a1,1104(sp)
    800016da:	0001c097          	auipc	ra,0x1c
    800016de:	98e080e7          	jalr	-1650(ra) # 8001d068 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    800016e2:	ae81                	j	80001a32 <.LBB1_230>
        for _ in 0..elf.phnum {
    800016e4:	0000                	unimp
    800016e6:	48a11503          	lh	a0,1162(sp)
    800016ea:	58a11e23          	sh	a0,1436(sp)
    800016ee:	58a11f23          	sh	a0,1438(sp)
    800016f2:	44810513          	addi	a0,sp,1096
            if inode_guard.read(
    800016f6:	0001c097          	auipc	ra,0x1c
    800016fa:	fec080e7          	jalr	-20(ra) # 8001d6e2 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    800016fe:	20a13423          	sd	a0,520(sp)
    80001702:	a009                	j	80001704 <.LBB1_217+0xe2>
                &*ph as *const ProgHeader as usize, 
    80001704:	21013783          	ld	a5,528(sp)
    80001708:	20813583          	ld	a1,520(sp)
    8000170c:	2b813683          	ld	a3,696(sp)
                off as u32, 
    80001710:	47013703          	ld	a4,1136(sp)
    80001714:	49010513          	addi	a0,sp,1168
    80001718:	4601                	li	a2,0
            if inode_guard.read(
    8000171a:	00019097          	auipc	ra,0x19
    8000171e:	bac080e7          	jalr	-1108(ra) # 8001a2c6 <_ZN6kernel2fs5inode9InodeData4read17h2d02dc0e430e4837E>
    80001722:	a009                	j	80001724 <.LBB1_217+0x102>
    80001724:	49010513          	addi	a0,sp,1168
    80001728:	0000b097          	auipc	ra,0xb
    8000172c:	534080e7          	jalr	1332(ra) # 8000cc5c <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h0d49413fcec9dcc1E>
    80001730:	20a13023          	sd	a0,512(sp)
    80001734:	a009                	j	80001736 <.LBB1_217+0x114>
    80001736:	20013503          	ld	a0,512(sp)
    8000173a:	4581                	li	a1,0
    8000173c:	00b50a63          	beq	a0,a1,80001750 <.LBB1_217+0x12e>
    80001740:	a009                	j	80001742 <.LBB1_217+0x120>
                if ph.prog_type != ELF_PROG_LOAD { continue; }
    80001742:	2b813503          	ld	a0,696(sp)
    80001746:	4108                	lw	a0,0(a0)
    80001748:	4585                	li	a1,1
    8000174a:	f4b51fe3          	bne	a0,a1,800016a8 <.LBB1_217+0x86>
    8000174e:	a801                	j	8000175e <.LBB1_217+0x13c>
                drop(page_table);
    80001750:	22813503          	ld	a0,552(sp)
    80001754:	0001c097          	auipc	ra,0x1c
    80001758:	9bc080e7          	jalr	-1604(ra) # 8001d110 <_ZN4core3mem4drop17ha184dbcd1a83d607E>
    8000175c:	acb5                	j	800019d8 <.LBB1_227+0x14>
                if ph.mem_size < ph.file_size {
    8000175e:	2b813583          	ld	a1,696(sp)
    80001762:	7588                	ld	a0,40(a1)
    80001764:	718c                	ld	a1,32(a1)
    80001766:	00b57c63          	bgeu	a0,a1,8000177e <.LBB1_217+0x15c>
    8000176a:	a009                	j	8000176c <.LBB1_217+0x14a>
                    page_table.proc_free_pagetable(size);
    8000176c:	22813503          	ld	a0,552(sp)
    80001770:	2c013583          	ld	a1,704(sp)
    80001774:	00017097          	auipc	ra,0x17
    80001778:	baa080e7          	jalr	-1110(ra) # 8001831e <_ZN6kernel6memory7mapping10page_table9PageTable19proc_free_pagetable17h67102aea540089c1E>
    8000177c:	a811                	j	80001790 <.LBB1_217+0x16e>
                if ph.vaddr + ph.mem_size < ph.vaddr {
    8000177e:	2b813503          	ld	a0,696(sp)
    80001782:	690c                	ld	a1,16(a0)
    80001784:	7508                	ld	a0,40(a0)
    80001786:	952e                	add	a0,a0,a1
    80001788:	ffaa                	sd	a0,504(sp)
    8000178a:	18b563e3          	bltu	a0,a1,80002110 <.LBB1_240>
    8000178e:	a0a1                	j	800017d6 <.LBB1_219+0x18>
    80001790:	4501                	li	a0,0
                    drop(inode_guard);
    80001792:	54a10723          	sb	a0,1358(sp)
    80001796:	44813503          	ld	a0,1096(sp)
    8000179a:	45013583          	ld	a1,1104(sp)
    8000179e:	0001c097          	auipc	ra,0x1c
    800017a2:	8ca080e7          	jalr	-1846(ra) # 8001d068 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    800017a6:	a009                	j	800017a8 <.LBB1_218>

00000000800017a8 <.LBB1_218>:
                    LOG.end_op();
    800017a8:	00066517          	auipc	a0,0x66
    800017ac:	24050513          	addi	a0,a0,576 # 800679e8 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    800017b0:	00008097          	auipc	ra,0x8
    800017b4:	9e8080e7          	jalr	-1560(ra) # 80009198 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>
    800017b8:	a009                	j	800017ba <.LBB1_218+0x12>
                    return Err("exec: memory size is less than file size.")
    800017ba:	2a013583          	ld	a1,672(sp)

00000000800017be <.LBB1_219>:
    800017be:	00024517          	auipc	a0,0x24
    800017c2:	cea50513          	addi	a0,a0,-790 # 800254a8 <.L__unnamed_14>
    800017c6:	e588                	sd	a0,8(a1)
    800017c8:	02900513          	li	a0,41
    800017cc:	e988                	sd	a0,16(a1)
    800017ce:	4505                	li	a0,1
    800017d0:	e188                	sd	a0,0(a1)
    800017d2:	11f0006f          	j	800020f0 <.LBB1_239+0xd0>
                if ph.vaddr + ph.mem_size < ph.vaddr {
    800017d6:	757e                	ld	a0,504(sp)
    800017d8:	2b813583          	ld	a1,696(sp)
    800017dc:	698c                	ld	a1,16(a1)
    800017de:	00b57c63          	bgeu	a0,a1,800017f6 <.LBB1_219+0x38>
    800017e2:	a009                	j	800017e4 <.LBB1_219+0x26>
                    page_table.proc_free_pagetable(size);
    800017e4:	22813503          	ld	a0,552(sp)
    800017e8:	2c013583          	ld	a1,704(sp)
    800017ec:	00017097          	auipc	ra,0x17
    800017f0:	b32080e7          	jalr	-1230(ra) # 8001831e <_ZN6kernel6memory7mapping10page_table9PageTable19proc_free_pagetable17h67102aea540089c1E>
    800017f4:	a829                	j	8000180e <.LBB1_219+0x50>
                .uvm_alloc(size, ph.vaddr + ph.mem_size)
    800017f6:	2c013503          	ld	a0,704(sp)
    800017fa:	f7aa                	sd	a0,488(sp)
    800017fc:	2b813503          	ld	a0,696(sp)
    80001800:	690c                	ld	a1,16(a0)
    80001802:	7508                	ld	a0,40(a0)
    80001804:	952e                	add	a0,a0,a1
    80001806:	fbaa                	sd	a0,496(sp)
    80001808:	12b562e3          	bltu	a0,a1,8000212c <.LBB1_242>
    8000180c:	a099                	j	80001852 <.LBB1_221+0x16>
    8000180e:	4501                	li	a0,0
                    drop(inode_guard);
    80001810:	54a10723          	sb	a0,1358(sp)
    80001814:	44813503          	ld	a0,1096(sp)
    80001818:	45013583          	ld	a1,1104(sp)
    8000181c:	0001c097          	auipc	ra,0x1c
    80001820:	84c080e7          	jalr	-1972(ra) # 8001d068 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    80001824:	a009                	j	80001826 <.LBB1_220>

0000000080001826 <.LBB1_220>:
                    LOG.end_op();
    80001826:	00066517          	auipc	a0,0x66
    8000182a:	1c250513          	addi	a0,a0,450 # 800679e8 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    8000182e:	00008097          	auipc	ra,0x8
    80001832:	96a080e7          	jalr	-1686(ra) # 80009198 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>
    80001836:	a009                	j	80001838 <.LBB1_220+0x12>
                    return Err("exec: vaddr + mem_size < vaddr")
    80001838:	2a013583          	ld	a1,672(sp)

000000008000183c <.LBB1_221>:
    8000183c:	00024517          	auipc	a0,0x24
    80001840:	cb450513          	addi	a0,a0,-844 # 800254f0 <.L__unnamed_15>
    80001844:	e588                	sd	a0,8(a1)
    80001846:	4579                	li	a0,30
    80001848:	e988                	sd	a0,16(a1)
    8000184a:	4505                	li	a0,1
    8000184c:	e188                	sd	a0,0(a1)
    8000184e:	0a30006f          	j	800020f0 <.LBB1_239+0xd0>
                match page_table
    80001852:	765e                	ld	a2,496(sp)
    80001854:	75be                	ld	a1,488(sp)
    80001856:	22813503          	ld	a0,552(sp)
    8000185a:	00016097          	auipc	ra,0x16
    8000185e:	d48080e7          	jalr	-696(ra) # 800175a2 <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_alloc17h600a2c8e8dc8349aE>
    80001862:	4aa13c23          	sd	a0,1208(sp)
    80001866:	4cb13023          	sd	a1,1216(sp)
    8000186a:	a009                	j	8000186c <.LBB1_221+0x30>
    8000186c:	4b810513          	addi	a0,sp,1208
    80001870:	0000d097          	auipc	ra,0xd
    80001874:	e26080e7          	jalr	-474(ra) # 8000e696 <_ZN4core6option15Option$LT$T$GT$4take17h3f0477f04f3bf4c3E>
    80001878:	4aa13423          	sd	a0,1192(sp)
    8000187c:	4ab13823          	sd	a1,1200(sp)
    80001880:	a009                	j	80001882 <.LBB1_221+0x46>
                    None => {
    80001882:	4a813503          	ld	a0,1192(sp)
    80001886:	4581                	li	a1,0
    80001888:	02b50563          	beq	a0,a1,800018b2 <.LBB1_221+0x76>
    8000188c:	a009                	j	8000188e <.LBB1_221+0x52>
                    Some(new_size) => {
    8000188e:	4b013503          	ld	a0,1200(sp)
    80001892:	5aa13023          	sd	a0,1440(sp)
                        size = new_size;
    80001896:	2ca13023          	sd	a0,704(sp)
                if ph.vaddr % PGSIZE != 0 {
    8000189a:	2b813503          	ld	a0,696(sp)
    8000189e:	01055503          	lhu	a0,16(a0)
    800018a2:	6585                	lui	a1,0x1
    800018a4:	35fd                	addiw	a1,a1,-1
    800018a6:	8d6d                	and	a0,a0,a1
    800018a8:	4581                	li	a1,0
    800018aa:	06b50763          	beq	a0,a1,80001918 <.LBB1_223+0x26>
    800018ae:	a8a1                	j	80001906 <.LBB1_223+0x14>
                match page_table
    800018b0:	0000                	unimp
                        page_table.proc_free_pagetable(size);
    800018b2:	22813503          	ld	a0,552(sp)
    800018b6:	2c013583          	ld	a1,704(sp)
    800018ba:	00017097          	auipc	ra,0x17
    800018be:	a64080e7          	jalr	-1436(ra) # 8001831e <_ZN6kernel6memory7mapping10page_table9PageTable19proc_free_pagetable17h67102aea540089c1E>
    800018c2:	a009                	j	800018c4 <.LBB1_221+0x88>
    800018c4:	4501                	li	a0,0
                        drop(inode_guard);
    800018c6:	54a10723          	sb	a0,1358(sp)
    800018ca:	44813503          	ld	a0,1096(sp)
    800018ce:	45013583          	ld	a1,1104(sp)
    800018d2:	0001b097          	auipc	ra,0x1b
    800018d6:	796080e7          	jalr	1942(ra) # 8001d068 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    800018da:	a009                	j	800018dc <.LBB1_222>

00000000800018dc <.LBB1_222>:
                        LOG.end_op();
    800018dc:	00066517          	auipc	a0,0x66
    800018e0:	10c50513          	addi	a0,a0,268 # 800679e8 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    800018e4:	00008097          	auipc	ra,0x8
    800018e8:	8b4080e7          	jalr	-1868(ra) # 80009198 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>
    800018ec:	a009                	j	800018ee <.LBB1_222+0x12>
                        return Err("exec: Fail to uvmalloc.")
    800018ee:	2a013583          	ld	a1,672(sp)

00000000800018f2 <.LBB1_223>:
    800018f2:	00024517          	auipc	a0,0x24
    800018f6:	ca650513          	addi	a0,a0,-858 # 80025598 <.L__unnamed_16>
    800018fa:	e588                	sd	a0,8(a1)
    800018fc:	455d                	li	a0,23
    800018fe:	e988                	sd	a0,16(a1)
    80001900:	4505                	li	a0,1
    80001902:	e188                	sd	a0,0(a1)
    80001904:	a7f5                	j	800020f0 <.LBB1_239+0xd0>
                    page_table.proc_free_pagetable(size);
    80001906:	22813503          	ld	a0,552(sp)
    8000190a:	2c013583          	ld	a1,704(sp)
    8000190e:	00017097          	auipc	ra,0x17
    80001912:	a10080e7          	jalr	-1520(ra) # 8001831e <_ZN6kernel6memory7mapping10page_table9PageTable19proc_free_pagetable17h67102aea540089c1E>
    80001916:	a01d                	j	8000193c <.LBB1_224>
                    ph.vaddr, 
    80001918:	22813503          	ld	a0,552(sp)
    8000191c:	2b813603          	ld	a2,696(sp)
    80001920:	6a0c                	ld	a1,16(a2)
                    ph.off, 
    80001922:	6614                	ld	a3,8(a2)
                    ph.file_size
    80001924:	7218                	ld	a4,32(a2)
    80001926:	44810613          	addi	a2,sp,1096
                if load_seg(
    8000192a:	00000097          	auipc	ra,0x0
    8000192e:	862080e7          	jalr	-1950(ra) # 8000118c <_ZN6kernel7process3elf8load_seg17h8e22665aca7680efE>
    80001932:	4ca13423          	sd	a0,1224(sp)
    80001936:	4cb13823          	sd	a1,1232(sp)
    8000193a:	a03d                	j	80001968 <.LBB1_225+0x16>

000000008000193c <.LBB1_224>:
                    LOG.end_op();
    8000193c:	00066517          	auipc	a0,0x66
    80001940:	0ac50513          	addi	a0,a0,172 # 800679e8 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    80001944:	00008097          	auipc	ra,0x8
    80001948:	854080e7          	jalr	-1964(ra) # 80009198 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>
    8000194c:	a009                	j	8000194e <.LBB1_224+0x12>
                    return Err("exec: Programe Header must be integer multiple of PGSIZE. ")
    8000194e:	2a013583          	ld	a1,672(sp)

0000000080001952 <.LBB1_225>:
    80001952:	00024517          	auipc	a0,0x24
    80001956:	bd650513          	addi	a0,a0,-1066 # 80025528 <.L__unnamed_17>
    8000195a:	e588                	sd	a0,8(a1)
    8000195c:	03a00513          	li	a0,58
    80001960:	e988                	sd	a0,16(a1)
    80001962:	4505                	li	a0,1
    80001964:	e188                	sd	a0,0(a1)
    80001966:	a769                	j	800020f0 <.LBB1_239+0xd0>
    80001968:	4c810513          	addi	a0,sp,1224
                if load_seg(
    8000196c:	0000b097          	auipc	ra,0xb
    80001970:	3f2080e7          	jalr	1010(ra) # 8000cd5e <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h304118d236359d80E>
    80001974:	f3aa                	sd	a0,480(sp)
    80001976:	a009                	j	80001978 <.LBB1_225+0x26>
    80001978:	751e                	ld	a0,480(sp)
    8000197a:	4581                	li	a1,0
    8000197c:	00b50c63          	beq	a0,a1,80001994 <.LBB1_225+0x42>
    80001980:	a009                	j	80001982 <.LBB1_225+0x30>
                    page_table.proc_free_pagetable(size);
    80001982:	22813503          	ld	a0,552(sp)
    80001986:	2c013583          	ld	a1,704(sp)
    8000198a:	00017097          	auipc	ra,0x17
    8000198e:	994080e7          	jalr	-1644(ra) # 8001831e <_ZN6kernel6memory7mapping10page_table9PageTable19proc_free_pagetable17h67102aea540089c1E>
    80001992:	a011                	j	80001996 <.LBB1_225+0x44>
            off += size_of::<ProgHeader>();
    80001994:	a059                	j	80001a1a <.LBB1_229+0x14>
    80001996:	4501                	li	a0,0
                    drop(inode_guard);
    80001998:	54a10723          	sb	a0,1358(sp)
    8000199c:	44813503          	ld	a0,1096(sp)
    800019a0:	45013583          	ld	a1,1104(sp)
    800019a4:	0001b097          	auipc	ra,0x1b
    800019a8:	6c4080e7          	jalr	1732(ra) # 8001d068 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    800019ac:	a009                	j	800019ae <.LBB1_226>

00000000800019ae <.LBB1_226>:
                    LOG.end_op();
    800019ae:	00066517          	auipc	a0,0x66
    800019b2:	03a50513          	addi	a0,a0,58 # 800679e8 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    800019b6:	00007097          	auipc	ra,0x7
    800019ba:	7e2080e7          	jalr	2018(ra) # 80009198 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>
    800019be:	a009                	j	800019c0 <.LBB1_226+0x12>
                    return Err("exec: Fail to load segment. ")
    800019c0:	2a013583          	ld	a1,672(sp)

00000000800019c4 <.LBB1_227>:
    800019c4:	00024517          	auipc	a0,0x24
    800019c8:	b9e50513          	addi	a0,a0,-1122 # 80025562 <.L__unnamed_18>
    800019cc:	e588                	sd	a0,8(a1)
    800019ce:	4571                	li	a0,28
    800019d0:	e988                	sd	a0,16(a1)
    800019d2:	4505                	li	a0,1
    800019d4:	e188                	sd	a0,0(a1)
    800019d6:	af29                	j	800020f0 <.LBB1_239+0xd0>
    800019d8:	4501                	li	a0,0
                drop(inode_guard);
    800019da:	54a10723          	sb	a0,1358(sp)
    800019de:	44813503          	ld	a0,1096(sp)
    800019e2:	45013583          	ld	a1,1104(sp)
    800019e6:	0001b097          	auipc	ra,0x1b
    800019ea:	682080e7          	jalr	1666(ra) # 8001d068 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    800019ee:	a009                	j	800019f0 <.LBB1_228>

00000000800019f0 <.LBB1_228>:
                LOG.end_op();
    800019f0:	00066517          	auipc	a0,0x66
    800019f4:	ff850513          	addi	a0,a0,-8 # 800679e8 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    800019f8:	00007097          	auipc	ra,0x7
    800019fc:	7a0080e7          	jalr	1952(ra) # 80009198 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>
    80001a00:	a009                	j	80001a02 <.LBB1_228+0x12>
                return Err("exec: Fail to read from inode")
    80001a02:	2a013583          	ld	a1,672(sp)

0000000080001a06 <.LBB1_229>:
    80001a06:	00024517          	auipc	a0,0x24
    80001a0a:	ba950513          	addi	a0,a0,-1111 # 800255af <.L__unnamed_19>
    80001a0e:	e588                	sd	a0,8(a1)
    80001a10:	4575                	li	a0,29
    80001a12:	e988                	sd	a0,16(a1)
    80001a14:	4505                	li	a0,1
    80001a16:	e188                	sd	a0,0(a1)
    80001a18:	ade1                	j	800020f0 <.LBB1_239+0xd0>
            off += size_of::<ProgHeader>();
    80001a1a:	47013583          	ld	a1,1136(sp)
    80001a1e:	03858513          	addi	a0,a1,56 # 1038 <.Lline_table_start0+0x343>
    80001a22:	efaa                	sd	a0,472(sp)
    80001a24:	72b56263          	bltu	a0,a1,80002148 <.LBB1_244>
    80001a28:	a009                	j	80001a2a <.LBB1_229+0x24>
    80001a2a:	657e                	ld	a0,472(sp)
    80001a2c:	46a13823          	sd	a0,1136(sp)
        for _ in 0..elf.phnum {
    80001a30:	b9a5                	j	800016a8 <.LBB1_217+0x86>

0000000080001a32 <.LBB1_230>:
        LOG.end_op();
    80001a32:	00066517          	auipc	a0,0x66
    80001a36:	fb650513          	addi	a0,a0,-74 # 800679e8 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    80001a3a:	00007097          	auipc	ra,0x7
    80001a3e:	75e080e7          	jalr	1886(ra) # 80009198 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>
    80001a42:	a009                	j	80001a44 <.LBB1_231>

0000000080001a44 <.LBB1_231>:

        p = CPU_MANAGER.myproc().unwrap();
    80001a44:	00071517          	auipc	a0,0x71
    80001a48:	6fc50513          	addi	a0,a0,1788 # 80073140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    80001a4c:	00010097          	auipc	ra,0x10
    80001a50:	3b2080e7          	jalr	946(ra) # 80011dfe <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    80001a54:	ebaa                	sd	a0,464(sp)
    80001a56:	a009                	j	80001a58 <.LBB1_231+0x14>
    80001a58:	655e                	ld	a0,464(sp)

0000000080001a5a <.LBB1_232>:
    80001a5a:	00024597          	auipc	a1,0x24
    80001a5e:	b7658593          	addi	a1,a1,-1162 # 800255d0 <.L__unnamed_20>
    80001a62:	0000d097          	auipc	ra,0xd
    80001a66:	2ea080e7          	jalr	746(ra) # 8000ed4c <_ZN4core6option15Option$LT$T$GT$6unwrap17h81f0c84c54a80648E>
    80001a6a:	e7aa                	sd	a0,456(sp)
    80001a6c:	a009                	j	80001a6e <.LBB1_232+0x14>
    80001a6e:	653e                	ld	a0,456(sp)
    80001a70:	5aa13423          	sd	a0,1448(sp)
        let old_size = p.size;
    80001a74:	6908                	ld	a0,16(a0)
    80001a76:	ff2a                	sd	a0,440(sp)
    80001a78:	5aa13823          	sd	a0,1456(sp)

        // Allocate two pages at the next page boundary
        // Use the second as the user stack. 
        size = page_round_up(size);
    80001a7c:	2c013503          	ld	a0,704(sp)
    80001a80:	0001c097          	auipc	ra,0x1c
    80001a84:	da2080e7          	jalr	-606(ra) # 8001d822 <_ZN6kernel6memory7mapping13page_round_up17h53b8f5a3d9b0c04fE>
    80001a88:	e3aa                	sd	a0,448(sp)
    80001a8a:	a009                	j	80001a8c <.LBB1_232+0x32>
    80001a8c:	659e                	ld	a1,448(sp)
    80001a8e:	2cb13023          	sd	a1,704(sp)
        match page_table
                .uvm_alloc(size, size + 2 * PGSIZE) {
    80001a92:	852e                	mv	a0,a1
    80001a94:	f72a                	sd	a0,424(sp)
    80001a96:	6509                	lui	a0,0x2
    80001a98:	952e                	add	a0,a0,a1
    80001a9a:	fb2a                	sd	a0,432(sp)
    80001a9c:	6cb56463          	bltu	a0,a1,80002164 <.LBB1_246>
    80001aa0:	a009                	j	80001aa2 <.LBB1_232+0x48>
        match page_table
    80001aa2:	765a                	ld	a2,432(sp)
    80001aa4:	75ba                	ld	a1,424(sp)
    80001aa6:	22813503          	ld	a0,552(sp)
    80001aaa:	00016097          	auipc	ra,0x16
    80001aae:	af8080e7          	jalr	-1288(ra) # 800175a2 <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_alloc17h600a2c8e8dc8349aE>
    80001ab2:	4ca13c23          	sd	a0,1240(sp)
    80001ab6:	4eb13023          	sd	a1,1248(sp)
    80001aba:	a009                	j	80001abc <.LBB1_232+0x62>
            None => {
    80001abc:	4d813503          	ld	a0,1240(sp)
    80001ac0:	4581                	li	a1,0
    80001ac2:	02b50063          	beq	a0,a1,80001ae2 <.LBB1_232+0x88>
    80001ac6:	a009                	j	80001ac8 <.LBB1_232+0x6e>
                page_table.proc_free_pagetable(size);
                return Err("exec: Fail to uvmalloc")
            }

            Some(new_size) => {
    80001ac8:	4e013503          	ld	a0,1248(sp)
    80001acc:	5aa13c23          	sd	a0,1464(sp)
                size = new_size;
    80001ad0:	2ca13023          	sd	a0,704(sp)
    80001ad4:	75f9                	lui	a1,0xffffe
            }
        }

        page_table.uvm_clear(VirtualAddress::new(size - 2 * PGSIZE));
    80001ad6:	95aa                	add	a1,a1,a0
    80001ad8:	f32e                	sd	a1,416(sp)
    80001ada:	6ab56363          	bltu	a0,a1,80002180 <.LBB1_248>
    80001ade:	a03d                	j	80001b0c <.LBB1_233+0x14>
        match page_table
    80001ae0:	0000                	unimp
                page_table.proc_free_pagetable(size);
    80001ae2:	22813503          	ld	a0,552(sp)
    80001ae6:	2c013583          	ld	a1,704(sp)
    80001aea:	00017097          	auipc	ra,0x17
    80001aee:	834080e7          	jalr	-1996(ra) # 8001831e <_ZN6kernel6memory7mapping10page_table9PageTable19proc_free_pagetable17h67102aea540089c1E>
    80001af2:	a009                	j	80001af4 <.LBB1_232+0x9a>
                return Err("exec: Fail to uvmalloc")
    80001af4:	2a013583          	ld	a1,672(sp)

0000000080001af8 <.LBB1_233>:
    80001af8:	00024517          	auipc	a0,0x24
    80001afc:	dc050513          	addi	a0,a0,-576 # 800258b8 <.L__unnamed_21>
    80001b00:	e588                	sd	a0,8(a1)
    80001b02:	4559                	li	a0,22
    80001b04:	e988                	sd	a0,16(a1)
    80001b06:	4505                	li	a0,1
    80001b08:	e188                	sd	a0,0(a1)
    80001b0a:	a3dd                	j	800020f0 <.LBB1_239+0xd0>
        page_table.uvm_clear(VirtualAddress::new(size - 2 * PGSIZE));
    80001b0c:	751a                	ld	a0,416(sp)
    80001b0e:	00010097          	auipc	ra,0x10
    80001b12:	d52080e7          	jalr	-686(ra) # 80011860 <_ZN6kernel6memory7address14VirtualAddress3new17h716be423461f1938E>
    80001b16:	ef2a                	sd	a0,408(sp)
    80001b18:	a009                	j	80001b1a <.LBB1_233+0x22>
    80001b1a:	65fa                	ld	a1,408(sp)
    80001b1c:	22813503          	ld	a0,552(sp)
    80001b20:	00016097          	auipc	ra,0x16
    80001b24:	058080e7          	jalr	88(ra) # 80017b78 <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_clear17hb623751aee30bcf2E>
    80001b28:	a009                	j	80001b2a <.LBB1_233+0x32>
        // Get stack top address. 
        sp = size;
    80001b2a:	2c013503          	ld	a0,704(sp)
    80001b2e:	2ca13423          	sd	a0,712(sp)
        // Get stack bottom address. 
        stack_base = sp - PGSIZE;
    80001b32:	80050593          	addi	a1,a0,-2048
    80001b36:	80058593          	addi	a1,a1,-2048 # ffffffffffffd800 <end+0xffffffff7ff8a270>
    80001b3a:	eb2e                	sd	a1,400(sp)
    80001b3c:	66b56163          	bltu	a0,a1,8000219e <.LBB1_250>
    80001b40:	a009                	j	80001b42 <.LBB1_233+0x4a>
    80001b42:	655a                	ld	a0,400(sp)
    80001b44:	5ca13023          	sd	a0,1472(sp)
    80001b48:	4501                	li	a0,0

        // Push argument strings, prepare rest of stack in ustack. 
        let mut argc = 0;
    80001b4a:	4ea13423          	sd	a0,1256(sp)
        loop {
    80001b4e:	a009                	j	80001b50 <.LBB1_233+0x58>
            if argv[argc] as usize == 0x0 { break; }
    80001b50:	28013583          	ld	a1,640(sp)
    80001b54:	4e813503          	ld	a0,1256(sp)
    80001b58:	e72a                	sd	a0,392(sp)
    80001b5a:	66b57163          	bgeu	a0,a1,800021bc <.LBB1_251+0x16>
    80001b5e:	a009                	j	80001b60 <.LBB1_233+0x68>
    80001b60:	28813503          	ld	a0,648(sp)
    80001b64:	65ba                	ld	a1,392(sp)
    80001b66:	058e                	slli	a1,a1,0x3
    80001b68:	952e                	add	a0,a0,a1
    80001b6a:	6108                	ld	a0,0(a0)
    80001b6c:	4581                	li	a1,0
    80001b6e:	00b51b63          	bne	a0,a1,80001b84 <.LBB1_233+0x8c>
    80001b72:	a009                	j	80001b74 <.LBB1_233+0x7c>
                    return Err("exec: Fail to copy out.") 
                }
            user_stack[argc] = sp;
            argc += 1;
        }
    user_stack[argc] = 0;
    80001b74:	4e813503          	ld	a0,1256(sp)
    80001b78:	e32a                	sd	a0,384(sp)
    80001b7a:	02000593          	li	a1,32
    80001b7e:	20b56763          	bltu	a0,a1,80001d8c <.LBB1_236+0x3a>
    80001b82:	af35                	j	800022be <.LBB1_265+0x14>
            if argc >= MAXARG {
    80001b84:	4e813503          	ld	a0,1256(sp)
    80001b88:	02000593          	li	a1,32
    80001b8c:	00b56c63          	bltu	a0,a1,80001ba4 <.LBB1_233+0xac>
    80001b90:	a009                	j	80001b92 <.LBB1_233+0x9a>
                page_table.proc_free_pagetable(size);
    80001b92:	22813503          	ld	a0,552(sp)
    80001b96:	2c013583          	ld	a1,704(sp)
    80001b9a:	00016097          	auipc	ra,0x16
    80001b9e:	784080e7          	jalr	1924(ra) # 8001831e <_ZN6kernel6memory7mapping10page_table9PageTable19proc_free_pagetable17h67102aea540089c1E>
    80001ba2:	a809                	j	80001bb4 <.LBB1_233+0xbc>
            sp -= str_len(argv[argc]) + 1;
    80001ba4:	28013583          	ld	a1,640(sp)
    80001ba8:	4e813503          	ld	a0,1256(sp)
    80001bac:	feaa                	sd	a0,376(sp)
    80001bae:	02b56063          	bltu	a0,a1,80001bce <.LBB1_234+0x16>
    80001bb2:	a50d                	j	800021d4 <.LBB1_252+0x12>
                return Err("exec: argc is more than MAXARG. ")
    80001bb4:	2a013583          	ld	a1,672(sp)

0000000080001bb8 <.LBB1_234>:
    80001bb8:	00024517          	auipc	a0,0x24
    80001bbc:	85250513          	addi	a0,a0,-1966 # 8002540a <.L__unnamed_11+0x13e>
    80001bc0:	e588                	sd	a0,8(a1)
    80001bc2:	02000513          	li	a0,32
    80001bc6:	e988                	sd	a0,16(a1)
    80001bc8:	4505                	li	a0,1
    80001bca:	e188                	sd	a0,0(a1)
    80001bcc:	a315                	j	800020f0 <.LBB1_239+0xd0>
            sp -= str_len(argv[argc]) + 1;
    80001bce:	28813503          	ld	a0,648(sp)
    80001bd2:	75f6                	ld	a1,376(sp)
    80001bd4:	058e                	slli	a1,a1,0x3
    80001bd6:	952e                	add	a0,a0,a1
    80001bd8:	6108                	ld	a0,0(a0)
    80001bda:	00006097          	auipc	ra,0x6
    80001bde:	cc2080e7          	jalr	-830(ra) # 8000789c <_ZN6kernel4misc7str_len17h64928e428ab71413E>
    80001be2:	faaa                	sd	a0,368(sp)
    80001be4:	a009                	j	80001be6 <.LBB1_234+0x2e>
    80001be6:	75d6                	ld	a1,368(sp)
    80001be8:	00158513          	addi	a0,a1,1
    80001bec:	f6aa                	sd	a0,360(sp)
    80001bee:	5eb56f63          	bltu	a0,a1,800021ec <.LBB1_254>
    80001bf2:	a009                	j	80001bf4 <.LBB1_234+0x3c>
    80001bf4:	75b6                	ld	a1,360(sp)
    80001bf6:	2c813503          	ld	a0,712(sp)
    80001bfa:	40b505b3          	sub	a1,a0,a1
    80001bfe:	f2ae                	sd	a1,352(sp)
    80001c00:	60b56463          	bltu	a0,a1,80002208 <.LBB1_256>
    80001c04:	a009                	j	80001c06 <.LBB1_234+0x4e>
    80001c06:	7516                	ld	a0,352(sp)
    80001c08:	2ca13423          	sd	a0,712(sp)
            sp = align_sp(sp);
    80001c0c:	00000097          	auipc	ra,0x0
    80001c10:	796080e7          	jalr	1942(ra) # 800023a2 <_ZN6kernel7process3elf8align_sp17h0cb3435f5c58b65bE>
    80001c14:	eeaa                	sd	a0,344(sp)
    80001c16:	a009                	j	80001c18 <.LBB1_234+0x60>
    80001c18:	6576                	ld	a0,344(sp)
    80001c1a:	65da                	ld	a1,400(sp)
    80001c1c:	2ca13423          	sd	a0,712(sp)
            if sp < stack_base {
    80001c20:	00b57a63          	bgeu	a0,a1,80001c34 <.LBB1_234+0x7c>
    80001c24:	a009                	j	80001c26 <.LBB1_234+0x6e>
                drop(page_table);
    80001c26:	22813503          	ld	a0,552(sp)
    80001c2a:	0001b097          	auipc	ra,0x1b
    80001c2e:	4e6080e7          	jalr	1254(ra) # 8001d110 <_ZN4core3mem4drop17ha184dbcd1a83d607E>
    80001c32:	a821                	j	80001c4a <.LBB1_234+0x92>
                    sp, 
    80001c34:	28013583          	ld	a1,640(sp)
    80001c38:	2c813503          	ld	a0,712(sp)
                        argv[argc] as *mut u8, 
    80001c3c:	e6aa                	sd	a0,328(sp)
    80001c3e:	4e813503          	ld	a0,1256(sp)
    80001c42:	eaaa                	sd	a0,336(sp)
    80001c44:	00b56f63          	bltu	a0,a1,80001c62 <.LBB1_235+0x14>
    80001c48:	abf9                	j	80002226 <.LBB1_257+0x16>
                return Err("User Stack Bomb!")
    80001c4a:	2a013583          	ld	a1,672(sp)

0000000080001c4e <.LBB1_235>:
    80001c4e:	00024517          	auipc	a0,0x24
    80001c52:	aa250513          	addi	a0,a0,-1374 # 800256f0 <.L__unnamed_35+0x78>
    80001c56:	e588                	sd	a0,8(a1)
    80001c58:	4541                	li	a0,16
    80001c5a:	e988                	sd	a0,16(a1)
    80001c5c:	4505                	li	a0,1
    80001c5e:	e188                	sd	a0,0(a1)
    80001c60:	a941                	j	800020f0 <.LBB1_239+0xd0>
                        argv[argc] as *mut u8, 
    80001c62:	28013583          	ld	a1,640(sp)
    80001c66:	28813503          	ld	a0,648(sp)
    80001c6a:	6656                	ld	a2,336(sp)
    80001c6c:	060e                	slli	a2,a2,0x3
    80001c6e:	9532                	add	a0,a0,a2
    80001c70:	6108                	ld	a0,0(a0)
                        str_len(argv[argc])
    80001c72:	fe2a                	sd	a0,312(sp)
    80001c74:	4e813503          	ld	a0,1256(sp)
    80001c78:	e2aa                	sd	a0,320(sp)
    80001c7a:	5cb57263          	bgeu	a0,a1,8000223e <.LBB1_258+0x12>
    80001c7e:	a009                	j	80001c80 <.LBB1_235+0x32>
    80001c80:	28813503          	ld	a0,648(sp)
    80001c84:	6596                	ld	a1,320(sp)
    80001c86:	058e                	slli	a1,a1,0x3
    80001c88:	952e                	add	a0,a0,a1
    80001c8a:	6108                	ld	a0,0(a0)
    80001c8c:	00006097          	auipc	ra,0x6
    80001c90:	c10080e7          	jalr	-1008(ra) # 8000789c <_ZN6kernel4misc7str_len17h64928e428ab71413E>
    80001c94:	fa2a                	sd	a0,304(sp)
    80001c96:	a009                	j	80001c98 <.LBB1_235+0x4a>
                    core::slice::from_raw_parts_mut(
    80001c98:	75d2                	ld	a1,304(sp)
    80001c9a:	7572                	ld	a0,312(sp)
    80001c9c:	00003097          	auipc	ra,0x3
    80001ca0:	752080e7          	jalr	1874(ra) # 800053ee <_ZN4core5slice3raw18from_raw_parts_mut17h0bc9e5c0c3217bc8E>
    80001ca4:	f22a                	sd	a0,288(sp)
    80001ca6:	f62e                	sd	a1,296(sp)
    80001ca8:	a009                	j	80001caa <.LBB1_235+0x5c>
    80001caa:	75b2                	ld	a1,296(sp)
    80001cac:	7512                	ld	a0,288(sp)
    80001cae:	0001e097          	auipc	ra,0x1e
    80001cb2:	982080e7          	jalr	-1662(ra) # 8001f630 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hf7620495824cfb20E>
    80001cb6:	ee2a                	sd	a0,280(sp)
    80001cb8:	a009                	j	80001cba <.LBB1_235+0x6c>
                    str_len(argv[argc]) + 1,
    80001cba:	28013583          	ld	a1,640(sp)
    80001cbe:	4e813503          	ld	a0,1256(sp)
    80001cc2:	ea2a                	sd	a0,272(sp)
    80001cc4:	58b57963          	bgeu	a0,a1,80002256 <.LBB1_259+0x12>
    80001cc8:	a009                	j	80001cca <.LBB1_235+0x7c>
    80001cca:	28813503          	ld	a0,648(sp)
    80001cce:	65d2                	ld	a1,272(sp)
    80001cd0:	058e                	slli	a1,a1,0x3
    80001cd2:	952e                	add	a0,a0,a1
    80001cd4:	6108                	ld	a0,0(a0)
    80001cd6:	00006097          	auipc	ra,0x6
    80001cda:	bc6080e7          	jalr	-1082(ra) # 8000789c <_ZN6kernel4misc7str_len17h64928e428ab71413E>
    80001cde:	e62a                	sd	a0,264(sp)
    80001ce0:	a009                	j	80001ce2 <.LBB1_235+0x94>
    80001ce2:	65b2                	ld	a1,264(sp)
    80001ce4:	00158513          	addi	a0,a1,1
    80001ce8:	e22a                	sd	a0,256(sp)
    80001cea:	58b56263          	bltu	a0,a1,8000226e <.LBB1_261>
    80001cee:	a009                	j	80001cf0 <.LBB1_235+0xa2>
            if page_table
    80001cf0:	6692                	ld	a3,256(sp)
    80001cf2:	6672                	ld	a2,280(sp)
    80001cf4:	65b6                	ld	a1,328(sp)
    80001cf6:	22813503          	ld	a0,552(sp)
    80001cfa:	00016097          	auipc	ra,0x16
    80001cfe:	ece080e7          	jalr	-306(ra) # 80017bc8 <_ZN6kernel6memory7mapping10page_table9PageTable8copy_out17h55d0f27ee3680817E>
    80001d02:	4ea13823          	sd	a0,1264(sp)
    80001d06:	4eb13c23          	sd	a1,1272(sp)
    80001d0a:	a009                	j	80001d0c <.LBB1_235+0xbe>
    80001d0c:	4f010513          	addi	a0,sp,1264
    80001d10:	0000b097          	auipc	ra,0xb
    80001d14:	04e080e7          	jalr	78(ra) # 8000cd5e <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h304118d236359d80E>
    80001d18:	fdaa                	sd	a0,248(sp)
    80001d1a:	a009                	j	80001d1c <.LBB1_235+0xce>
    80001d1c:	756e                	ld	a0,248(sp)
    80001d1e:	4581                	li	a1,0
    80001d20:	00b50c63          	beq	a0,a1,80001d38 <.LBB1_235+0xea>
    80001d24:	a009                	j	80001d26 <.LBB1_235+0xd8>
                    page_table.proc_free_pagetable(size);
    80001d26:	22813503          	ld	a0,552(sp)
    80001d2a:	2c013583          	ld	a1,704(sp)
    80001d2e:	00016097          	auipc	ra,0x16
    80001d32:	5f0080e7          	jalr	1520(ra) # 8001831e <_ZN6kernel6memory7mapping10page_table9PageTable19proc_free_pagetable17h67102aea540089c1E>
    80001d36:	a821                	j	80001d4e <.LBB1_235+0x100>
            user_stack[argc] = sp;
    80001d38:	2c813503          	ld	a0,712(sp)
    80001d3c:	f5aa                	sd	a0,232(sp)
    80001d3e:	4e813503          	ld	a0,1256(sp)
    80001d42:	f9aa                	sd	a0,240(sp)
    80001d44:	02000593          	li	a1,32
    80001d48:	00b56f63          	bltu	a0,a1,80001d66 <.LBB1_236+0x14>
    80001d4c:	ab3d                	j	8000228a <.LBB1_262+0x14>
                    return Err("exec: Fail to copy out.") 
    80001d4e:	2a013583          	ld	a1,672(sp)

0000000080001d52 <.LBB1_236>:
    80001d52:	00024517          	auipc	a0,0x24
    80001d56:	a5e50513          	addi	a0,a0,-1442 # 800257b0 <.L__unnamed_24>
    80001d5a:	e588                	sd	a0,8(a1)
    80001d5c:	455d                	li	a0,23
    80001d5e:	e988                	sd	a0,16(a1)
    80001d60:	4505                	li	a0,1
    80001d62:	e188                	sd	a0,0(a1)
    80001d64:	a671                	j	800020f0 <.LBB1_239+0xd0>
            user_stack[argc] = sp;
    80001d66:	752e                	ld	a0,232(sp)
    80001d68:	75ce                	ld	a1,240(sp)
    80001d6a:	00359613          	slli	a2,a1,0x3
    80001d6e:	0d8c                	addi	a1,sp,720
    80001d70:	95b2                	add	a1,a1,a2
    80001d72:	e188                	sd	a0,0(a1)
            argc += 1;
    80001d74:	4e813583          	ld	a1,1256(sp)
    80001d78:	00158513          	addi	a0,a1,1
    80001d7c:	f1aa                	sd	a0,224(sp)
    80001d7e:	52b56263          	bltu	a0,a1,800022a2 <.LBB1_264>
    80001d82:	a009                	j	80001d84 <.LBB1_236+0x32>
    80001d84:	750e                	ld	a0,224(sp)
    80001d86:	4ea13423          	sd	a0,1256(sp)
        loop {
    80001d8a:	b3d9                	j	80001b50 <.LBB1_233+0x58>
    user_stack[argc] = 0;
    80001d8c:	651a                	ld	a0,384(sp)
    80001d8e:	00351593          	slli	a1,a0,0x3
    80001d92:	0d88                	addi	a0,sp,720
    80001d94:	95aa                	add	a1,a1,a0
    80001d96:	4501                	li	a0,0
    80001d98:	e188                	sd	a0,0(a1)

    // Push the array of argv pointers. 
    sp -= (argc + 1) * size_of::<usize>();
    80001d9a:	4e813583          	ld	a1,1256(sp)
    80001d9e:	00158513          	addi	a0,a1,1
    80001da2:	edaa                	sd	a0,216(sp)
    80001da4:	52b56963          	bltu	a0,a1,800022d6 <.LBB1_267>
    80001da8:	a009                	j	80001daa <.LBB1_236+0x58>
    80001daa:	a009                	j	80001dac <.LBB1_236+0x5a>
    80001dac:	65ee                	ld	a1,216(sp)
    80001dae:	4505                	li	a0,1
    80001db0:	1576                	slli	a0,a0,0x3d
    80001db2:	157d                	addi	a0,a0,-1
    80001db4:	8d6d                	and	a0,a0,a1
    80001db6:	00359613          	slli	a2,a1,0x3
    80001dba:	e9b2                	sd	a2,208(sp)
    80001dbc:	52b51b63          	bne	a0,a1,800022f2 <.LBB1_269>
    80001dc0:	a009                	j	80001dc2 <.LBB1_236+0x70>
    80001dc2:	65ce                	ld	a1,208(sp)
    80001dc4:	2c813503          	ld	a0,712(sp)
    80001dc8:	40b505b3          	sub	a1,a0,a1
    80001dcc:	e5ae                	sd	a1,200(sp)
    80001dce:	54b56163          	bltu	a0,a1,80002310 <.LBB1_271>
    80001dd2:	a009                	j	80001dd4 <.LBB1_236+0x82>
    80001dd4:	652e                	ld	a0,200(sp)
    80001dd6:	2ca13423          	sd	a0,712(sp)
    sp = align_sp(sp);
    80001dda:	00000097          	auipc	ra,0x0
    80001dde:	5c8080e7          	jalr	1480(ra) # 800023a2 <_ZN6kernel7process3elf8align_sp17h0cb3435f5c58b65bE>
    80001de2:	e1aa                	sd	a0,192(sp)
    80001de4:	a009                	j	80001de6 <.LBB1_236+0x94>
    80001de6:	650e                	ld	a0,192(sp)
    80001de8:	65da                	ld	a1,400(sp)
    80001dea:	2ca13423          	sd	a0,712(sp)
    if sp < stack_base {
    80001dee:	00b57c63          	bgeu	a0,a1,80001e06 <.LBB1_237+0x12>
    80001df2:	a009                	j	80001df4 <.LBB1_237>

0000000080001df4 <.LBB1_237>:
        LOG.end_op();
    80001df4:	00066517          	auipc	a0,0x66
    80001df8:	bf450513          	addi	a0,a0,-1036 # 800679e8 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    80001dfc:	00007097          	auipc	ra,0x7
    80001e00:	39c080e7          	jalr	924(ra) # 80009198 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>
    80001e04:	a011                	j	80001e08 <.LBB1_237+0x14>
    if sp < stack_base {
    80001e06:	a819                	j	80001e1c <.LBB1_237+0x28>
        page_table.proc_free_pagetable(size);
    80001e08:	22813503          	ld	a0,552(sp)
    80001e0c:	2c013583          	ld	a1,704(sp)
    80001e10:	00016097          	auipc	ra,0x16
    80001e14:	50e080e7          	jalr	1294(ra) # 8001831e <_ZN6kernel6memory7mapping10page_table9PageTable19proc_free_pagetable17h67102aea540089c1E>
    80001e18:	a009                	j	80001e1a <.LBB1_237+0x26>
    if sp < stack_base {
    80001e1a:	a009                	j	80001e1c <.LBB1_237+0x28>
    }

    if page_table
    .copy_out(
        sp, 
    80001e1c:	2c813503          	ld	a0,712(sp)
        core::slice::from_raw_parts_mut(
            user_stack.as_mut_ptr() as *mut u8, 
    80001e20:	f92a                	sd	a0,176(sp)
    80001e22:	0d88                	addi	a0,sp,720
    80001e24:	02000593          	li	a1,32
    80001e28:	0001d097          	auipc	ra,0x1d
    80001e2c:	77a080e7          	jalr	1914(ra) # 8001f5a2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17he2d11453020d912aE>
    80001e30:	fd2a                	sd	a0,184(sp)
    80001e32:	a009                	j	80001e34 <.LBB1_237+0x40>
    80001e34:	756a                	ld	a0,184(sp)
            (argc + 1)*size_of::<usize>()
    80001e36:	f12a                	sd	a0,160(sp)
    80001e38:	4e813583          	ld	a1,1256(sp)
    80001e3c:	00158513          	addi	a0,a1,1
    80001e40:	f52a                	sd	a0,168(sp)
    80001e42:	4eb56663          	bltu	a0,a1,8000232e <.LBB1_273>
    80001e46:	a009                	j	80001e48 <.LBB1_237+0x54>
    80001e48:	a009                	j	80001e4a <.LBB1_237+0x56>
    80001e4a:	75aa                	ld	a1,168(sp)
    80001e4c:	4505                	li	a0,1
    80001e4e:	1576                	slli	a0,a0,0x3d
    80001e50:	157d                	addi	a0,a0,-1
    80001e52:	8d6d                	and	a0,a0,a1
    80001e54:	00359613          	slli	a2,a1,0x3
    80001e58:	ed32                	sd	a2,152(sp)
    80001e5a:	4eb51863          	bne	a0,a1,8000234a <.LBB1_275>
    80001e5e:	a009                	j	80001e60 <.LBB1_237+0x6c>
        core::slice::from_raw_parts_mut(
    80001e60:	65ea                	ld	a1,152(sp)
    80001e62:	750a                	ld	a0,160(sp)
    80001e64:	00003097          	auipc	ra,0x3
    80001e68:	58a080e7          	jalr	1418(ra) # 800053ee <_ZN4core5slice3raw18from_raw_parts_mut17h0bc9e5c0c3217bc8E>
    80001e6c:	e52a                	sd	a0,136(sp)
    80001e6e:	e92e                	sd	a1,144(sp)
    80001e70:	a009                	j	80001e72 <.LBB1_237+0x7e>
    80001e72:	65ca                	ld	a1,144(sp)
    80001e74:	652a                	ld	a0,136(sp)
    80001e76:	0001d097          	auipc	ra,0x1d
    80001e7a:	7ba080e7          	jalr	1978(ra) # 8001f630 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hf7620495824cfb20E>
    80001e7e:	e12a                	sd	a0,128(sp)
    80001e80:	a009                	j	80001e82 <.LBB1_237+0x8e>
        ).as_ptr(),
            (argc + 1)*size_of::<usize>()
    80001e82:	4e813583          	ld	a1,1256(sp)
    80001e86:	00158513          	addi	a0,a1,1
    80001e8a:	fcaa                	sd	a0,120(sp)
    80001e8c:	4cb56e63          	bltu	a0,a1,80002368 <.LBB1_277>
    80001e90:	a009                	j	80001e92 <.LBB1_237+0x9e>
    80001e92:	a009                	j	80001e94 <.LBB1_237+0xa0>
    80001e94:	75e6                	ld	a1,120(sp)
    80001e96:	4505                	li	a0,1
    80001e98:	1576                	slli	a0,a0,0x3d
    80001e9a:	157d                	addi	a0,a0,-1
    80001e9c:	8d6d                	and	a0,a0,a1
    80001e9e:	00359613          	slli	a2,a1,0x3
    80001ea2:	f8b2                	sd	a2,112(sp)
    80001ea4:	4eb51063          	bne	a0,a1,80002384 <.LBB1_279>
    80001ea8:	a009                	j	80001eaa <.LBB1_237+0xb6>
    if page_table
    80001eaa:	76c6                	ld	a3,112(sp)
    80001eac:	660a                	ld	a2,128(sp)
    80001eae:	75ca                	ld	a1,176(sp)
    80001eb0:	22813503          	ld	a0,552(sp)
    80001eb4:	00016097          	auipc	ra,0x16
    80001eb8:	d14080e7          	jalr	-748(ra) # 80017bc8 <_ZN6kernel6memory7mapping10page_table9PageTable8copy_out17h55d0f27ee3680817E>
    80001ebc:	50a13023          	sd	a0,1280(sp)
    80001ec0:	50b13423          	sd	a1,1288(sp)
    80001ec4:	a009                	j	80001ec6 <.LBB1_237+0xd2>
    80001ec6:	50010513          	addi	a0,sp,1280
    80001eca:	0000b097          	auipc	ra,0xb
    80001ece:	e94080e7          	jalr	-364(ra) # 8000cd5e <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h304118d236359d80E>
    80001ed2:	f4aa                	sd	a0,104(sp)
    80001ed4:	a009                	j	80001ed6 <.LBB1_237+0xe2>
    80001ed6:	7526                	ld	a0,104(sp)
    80001ed8:	4581                	li	a1,0
    80001eda:	00b50c63          	beq	a0,a1,80001ef2 <.LBB1_237+0xfe>
    80001ede:	a009                	j	80001ee0 <.LBB1_237+0xec>
    ).is_err() {
        page_table.proc_free_pagetable(size);
    80001ee0:	22813503          	ld	a0,552(sp)
    80001ee4:	2c013583          	ld	a1,704(sp)
    80001ee8:	00016097          	auipc	ra,0x16
    80001eec:	436080e7          	jalr	1078(ra) # 8001831e <_ZN6kernel6memory7mapping10page_table9PageTable19proc_free_pagetable17h67102aea540089c1E>
    80001ef0:	a005                	j	80001f10 <.LBB1_237+0x11c>

    // arguments to user main(argc, argv)
    // argc is returned via the system call return
    // value, which goes in a0. 
    
    let trapframe = &mut *p.trapframe;
    80001ef2:	653e                	ld	a0,456(sp)
    80001ef4:	710c                	ld	a1,32(a0)
    80001ef6:	f0ae                	sd	a1,96(sp)
    80001ef8:	5cb13423          	sd	a1,1480(sp)
    trapframe.a1 = sp;
    80001efc:	2c813503          	ld	a0,712(sp)
    80001f00:	fda8                	sd	a0,120(a1)
    80001f02:	51010513          	addi	a0,sp,1296

    // Save program name for debugging
    // core::ptr::copy(path.as_ptr(), &mut pdata.name as *mut u8, 16);
    let mut exec_name: String = String::new();
    80001f06:	0001c097          	auipc	ra,0x1c
    80001f0a:	526080e7          	jalr	1318(ra) # 8001e42c <_ZN5alloc6string6String3new17h806e7bcacb841554E>
    80001f0e:	a829                	j	80001f28 <.LBB1_238+0x14>
        return Err("exec: Fail to copy out.")
    80001f10:	2a013583          	ld	a1,672(sp)

0000000080001f14 <.LBB1_238>:
    80001f14:	00024517          	auipc	a0,0x24
    80001f18:	89c50513          	addi	a0,a0,-1892 # 800257b0 <.L__unnamed_24>
    80001f1c:	e588                	sd	a0,8(a1)
    80001f1e:	455d                	li	a0,23
    80001f20:	e988                	sd	a0,16(a1)
    80001f22:	4505                	li	a0,1
    80001f24:	e188                	sd	a0,0(a1)
    80001f26:	a2e9                	j	800020f0 <.LBB1_239+0xd0>
    for c in path.chars() {
    80001f28:	29013583          	ld	a1,656(sp)
    80001f2c:	29813503          	ld	a0,664(sp)
    80001f30:	00016097          	auipc	ra,0x16
    80001f34:	4a2080e7          	jalr	1186(ra) # 800183d2 <_ZN4core3str21_$LT$impl$u20$str$GT$5chars17h18a0dd289a8edb0cE>
    80001f38:	e8aa                	sd	a0,80(sp)
    80001f3a:	ecae                	sd	a1,88(sp)
    80001f3c:	a009                	j	80001f3e <.LBB1_238+0x2a>
    80001f3e:	65e6                	ld	a1,88(sp)
    80001f40:	6546                	ld	a0,80(sp)
    80001f42:	0001c097          	auipc	ra,0x1c
    80001f46:	eea080e7          	jalr	-278(ra) # 8001de2c <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hdbffcc8df8ebe27dE>
    80001f4a:	e0aa                	sd	a0,64(sp)
    80001f4c:	e4ae                	sd	a1,72(sp)
    80001f4e:	a009                	j	80001f50 <.LBB1_238+0x3c>
    80001f50:	6526                	ld	a0,72(sp)
    80001f52:	6586                	ld	a1,64(sp)
    80001f54:	52b13423          	sd	a1,1320(sp)
    80001f58:	52a13823          	sd	a0,1328(sp)
    80001f5c:	a009                	j	80001f5e <.LBB1_238+0x4a>
    80001f5e:	52810513          	addi	a0,sp,1320
    80001f62:	0000b097          	auipc	ra,0xb
    80001f66:	bfe080e7          	jalr	-1026(ra) # 8000cb60 <_ZN81_$LT$core..str..iter..Chars$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h562590808242c9ccE>
    80001f6a:	1502                	slli	a0,a0,0x20
    80001f6c:	9101                	srli	a0,a0,0x20
    80001f6e:	52a12e23          	sw	a0,1340(sp)
    80001f72:	a009                	j	80001f74 <.LBB1_238+0x60>
    80001f74:	53c12503          	lw	a0,1340(sp)
    80001f78:	ffef05b7          	lui	a1,0xffef0
    80001f7c:	9d2d                	addw	a0,a0,a1
    80001f7e:	00a035b3          	snez	a1,a0
    80001f82:	4581                	li	a1,0
    80001f84:	00b50463          	beq	a0,a1,80001f8c <.LBB1_238+0x78>
    80001f88:	a009                	j	80001f8a <.LBB1_238+0x76>
    80001f8a:	a819                	j	80001fa0 <.LBB1_238+0x8c>
    80001f8c:	51010513          	addi	a0,sp,1296
        if c != '/' {
            exec_name.push(c);
        }
    }
    core::ptr::copy(exec_name.as_ptr(), &mut p.name as *mut u8, 16);
    80001f90:	0001c097          	auipc	ra,0x1c
    80001f94:	542080e7          	jalr	1346(ra) # 8001e4d2 <_ZN65_$LT$alloc..string..String$u20$as$u20$core..ops..deref..Deref$GT$5deref17hb3510aeed9e3d071E>
    80001f98:	f82a                	sd	a0,48(sp)
    80001f9a:	fc2e                	sd	a1,56(sp)
    80001f9c:	a835                	j	80001fd8 <.LBB1_238+0xc4>
    for c in path.chars() {
    80001f9e:	0000                	unimp
    80001fa0:	53c12503          	lw	a0,1340(sp)
    80001fa4:	02051593          	slli	a1,a0,0x20
    80001fa8:	9181                	srli	a1,a1,0x20
    80001faa:	f42e                	sd	a1,40(sp)
    80001fac:	5ca12a23          	sw	a0,1492(sp)
    80001fb0:	5ca12c23          	sw	a0,1496(sp)
    80001fb4:	5ca12e23          	sw	a0,1500(sp)
    80001fb8:	02f00593          	li	a1,47
        if c != '/' {
    80001fbc:	00b50b63          	beq	a0,a1,80001fd2 <.LBB1_238+0xbe>
    80001fc0:	a009                	j	80001fc2 <.LBB1_238+0xae>
            exec_name.push(c);
    80001fc2:	75a2                	ld	a1,40(sp)
    80001fc4:	51010513          	addi	a0,sp,1296
    80001fc8:	0001c097          	auipc	ra,0x1c
    80001fcc:	48a080e7          	jalr	1162(ra) # 8001e452 <_ZN5alloc6string6String4push17h2b5e883a1c1e3781E>
    80001fd0:	a011                	j	80001fd4 <.LBB1_238+0xc0>
        if c != '/' {
    80001fd2:	a011                	j	80001fd6 <.LBB1_238+0xc2>
    80001fd4:	a009                	j	80001fd6 <.LBB1_238+0xc2>
    for c in path.chars() {
    80001fd6:	b761                	j	80001f5e <.LBB1_238+0x4a>
    core::ptr::copy(exec_name.as_ptr(), &mut p.name as *mut u8, 16);
    80001fd8:	75e2                	ld	a1,56(sp)
    80001fda:	7542                	ld	a0,48(sp)
    80001fdc:	00016097          	auipc	ra,0x16
    80001fe0:	42c080e7          	jalr	1068(ra) # 80018408 <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h399b117e49285f4dE>
    80001fe4:	f02a                	sd	a0,32(sp)
    80001fe6:	a009                	j	80001fe8 <.LBB1_238+0xd4>
    80001fe8:	7582                	ld	a1,32(sp)
    80001fea:	653e                	ld	a0,456(sp)
    80001fec:	3f850513          	addi	a0,a0,1016
    80001ff0:	4641                	li	a2,16
    80001ff2:	00023097          	auipc	ra,0x23
    80001ff6:	108080e7          	jalr	264(ra) # 800250fa <memmove>
    80001ffa:	a009                	j	80001ffc <.LBB1_238+0xe8>

    // Commit to user image.
    let old_pgt = p.pagetable.as_mut().take().unwrap();
    80001ffc:	653e                	ld	a0,456(sp)
    80001ffe:	6d08                	ld	a0,24(a0)
    80002000:	0000b097          	auipc	ra,0xb
    80002004:	b90080e7          	jalr	-1136(ra) # 8000cb90 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17hfc3d5eeea9dab8e4E>
    80002008:	54a13023          	sd	a0,1344(sp)
    8000200c:	a009                	j	8000200e <.LBB1_238+0xfa>
    8000200e:	54010513          	addi	a0,sp,1344
    80002012:	0000c097          	auipc	ra,0xc
    80002016:	66a080e7          	jalr	1642(ra) # 8000e67c <_ZN4core6option15Option$LT$T$GT$4take17h2bb26f7cfbd48ae3E>
    8000201a:	ec2a                	sd	a0,24(sp)
    8000201c:	a009                	j	8000201e <.LBB1_238+0x10a>
    8000201e:	6562                	ld	a0,24(sp)

0000000080002020 <.LBB1_239>:
    80002020:	00024597          	auipc	a1,0x24
    80002024:	88058593          	addi	a1,a1,-1920 # 800258a0 <.L__unnamed_25>
    80002028:	0000d097          	auipc	ra,0xd
    8000202c:	ba8080e7          	jalr	-1112(ra) # 8000ebd0 <_ZN4core6option15Option$LT$T$GT$6unwrap17h2b22556a60663957E>
    80002030:	85aa                	mv	a1,a0
    80002032:	e82e                	sd	a1,16(sp)
    80002034:	5ea13023          	sd	a0,1504(sp)
    80002038:	a009                	j	8000203a <.LBB1_239+0x1a>
    old_pgt.proc_free_pagetable(old_size);
    8000203a:	75fa                	ld	a1,440(sp)
    8000203c:	6542                	ld	a0,16(sp)
    8000203e:	00016097          	auipc	ra,0x16
    80002042:	2e0080e7          	jalr	736(ra) # 8001831e <_ZN6kernel6memory7mapping10page_table9PageTable19proc_free_pagetable17h67102aea540089c1E>
    80002046:	a009                	j	80002048 <.LBB1_239+0x28>

    p.pagetable = pagetable;
    80002048:	2a013583          	ld	a1,672(sp)
    8000204c:	7606                	ld	a2,96(sp)
    8000204e:	66be                	ld	a3,456(sp)
    80002050:	22813503          	ld	a0,552(sp)
    80002054:	ee88                	sd	a0,24(a3)
    p.size = size;
    80002056:	2c013503          	ld	a0,704(sp)
    8000205a:	ea88                	sd	a0,16(a3)
    // initial program counter = main
    trapframe.epc = elf.entry;
    8000205c:	2b013503          	ld	a0,688(sp)
    80002060:	6d08                	ld	a0,24(a0)
    80002062:	ee08                	sd	a0,24(a2)
    // initial stack pointer
    trapframe.sp = sp;
    80002064:	2c813503          	ld	a0,712(sp)
    80002068:	fa08                	sd	a0,48(a2)

    Ok(argc)
    8000206a:	4e813503          	ld	a0,1256(sp)
    8000206e:	e588                	sd	a0,8(a1)
    80002070:	4501                	li	a0,0
    80002072:	e188                	sd	a0,0(a1)
    80002074:	51010513          	addi	a0,sp,1296
}
    80002078:	00005097          	auipc	ra,0x5
    8000207c:	ddc080e7          	jalr	-548(ra) # 80006e54 <_ZN4core3ptr42drop_in_place$LT$alloc..string..String$GT$17h586f2f4ef42593a1E>
    80002080:	a009                	j	80002082 <.LBB1_239+0x62>
    80002082:	4501                	li	a0,0
    80002084:	54a10723          	sb	a0,1358(sp)
    80002088:	0f88                	addi	a0,sp,976
    8000208a:	00005097          	auipc	ra,0x5
    8000208e:	df8080e7          	jalr	-520(ra) # 80006e82 <_ZN4core3ptr45drop_in_place$LT$kernel..fs..inode..Inode$GT$17h8786fe1a2a287832E>
    80002092:	a009                	j	80002094 <.LBB1_239+0x74>
    80002094:	4501                	li	a0,0
    80002096:	54a107a3          	sb	a0,1359(sp)
    8000209a:	1d28                	addi	a0,sp,696
    8000209c:	00005097          	auipc	ra,0x5
    800020a0:	f0a080e7          	jalr	-246(ra) # 80006fa6 <_ZN4core3ptr78drop_in_place$LT$alloc..boxed..Box$LT$kernel..process..elf..ProgHeader$GT$$GT$17h18632e5365e45018E>
    800020a4:	a009                	j	800020a6 <.LBB1_239+0x86>
    800020a6:	1d08                	addi	a0,sp,688
    800020a8:	00005097          	auipc	ra,0x5
    800020ac:	ee0080e7          	jalr	-288(ra) # 80006f88 <_ZN4core3ptr77drop_in_place$LT$alloc..boxed..Box$LT$kernel..process..elf..ElfHeader$GT$$GT$17hf970e769dc617072E>
    800020b0:	a025                	j	800020d8 <.LBB1_239+0xb8>
    800020b2:	4501                	li	a0,0
    800020b4:	54a10723          	sb	a0,1358(sp)
    800020b8:	a0b9                	j	80002106 <.LBB1_239+0xe6>
    800020ba:	4501                	li	a0,0
    800020bc:	54a107a3          	sb	a0,1359(sp)
    800020c0:	1d28                	addi	a0,sp,696
    800020c2:	00005097          	auipc	ra,0x5
    800020c6:	ee4080e7          	jalr	-284(ra) # 80006fa6 <_ZN4core3ptr78drop_in_place$LT$alloc..boxed..Box$LT$kernel..process..elf..ProgHeader$GT$$GT$17h18632e5365e45018E>
    800020ca:	a009                	j	800020cc <.LBB1_239+0xac>
    800020cc:	1d08                	addi	a0,sp,688
    800020ce:	00005097          	auipc	ra,0x5
    800020d2:	eba080e7          	jalr	-326(ra) # 80006f88 <_ZN4core3ptr77drop_in_place$LT$alloc..boxed..Box$LT$kernel..process..elf..ElfHeader$GT$$GT$17hf970e769dc617072E>
    800020d6:	a009                	j	800020d8 <.LBB1_239+0xb8>
    800020d8:	60813083          	ld	ra,1544(sp)
    800020dc:	61010113          	addi	sp,sp,1552
    800020e0:	8082                	ret
    800020e2:	44810513          	addi	a0,sp,1096
    800020e6:	00005097          	auipc	ra,0x5
    800020ea:	f86080e7          	jalr	-122(ra) # 8000706c <_ZN4core3ptr96drop_in_place$LT$kernel..lock..sleeplock..SleepLockGuard$LT$kernel..fs..inode..InodeData$GT$$GT$17h00d5c02cf687ef41E>
    800020ee:	b7d1                	j	800020b2 <.LBB1_239+0x92>
    800020f0:	54e14503          	lbu	a0,1358(sp)
    800020f4:	8905                	andi	a0,a0,1
    800020f6:	f575                	bnez	a0,800020e2 <.LBB1_239+0xc2>
    800020f8:	bf6d                	j	800020b2 <.LBB1_239+0x92>
    800020fa:	0f88                	addi	a0,sp,976
    800020fc:	00005097          	auipc	ra,0x5
    80002100:	d86080e7          	jalr	-634(ra) # 80006e82 <_ZN4core3ptr45drop_in_place$LT$kernel..fs..inode..Inode$GT$17h8786fe1a2a287832E>
    80002104:	bf5d                	j	800020ba <.LBB1_239+0x9a>
    80002106:	54f14503          	lbu	a0,1359(sp)
    8000210a:	8905                	andi	a0,a0,1
    8000210c:	f57d                	bnez	a0,800020fa <.LBB1_239+0xda>
    8000210e:	b775                	j	800020ba <.LBB1_239+0x9a>

0000000080002110 <.LBB1_240>:
                if ph.vaddr + ph.mem_size < ph.vaddr {
    80002110:	00023517          	auipc	a0,0x23
    80002114:	11050513          	addi	a0,a0,272 # 80025220 <str.1>

0000000080002118 <.LBB1_241>:
    80002118:	00023617          	auipc	a2,0x23
    8000211c:	3c060613          	addi	a2,a2,960 # 800254d8 <.L__unnamed_26>
    80002120:	45f1                	li	a1,28
    80002122:	00020097          	auipc	ra,0x20
    80002126:	154080e7          	jalr	340(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008000212c <.LBB1_242>:
                .uvm_alloc(size, ph.vaddr + ph.mem_size)
    8000212c:	00023517          	auipc	a0,0x23
    80002130:	0f450513          	addi	a0,a0,244 # 80025220 <str.1>

0000000080002134 <.LBB1_243>:
    80002134:	00023617          	auipc	a2,0x23
    80002138:	3dc60613          	addi	a2,a2,988 # 80025510 <.L__unnamed_27>
    8000213c:	45f1                	li	a1,28
    8000213e:	00020097          	auipc	ra,0x20
    80002142:	138080e7          	jalr	312(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080002148 <.LBB1_244>:
            off += size_of::<ProgHeader>();
    80002148:	00023517          	auipc	a0,0x23
    8000214c:	0d850513          	addi	a0,a0,216 # 80025220 <str.1>

0000000080002150 <.LBB1_245>:
    80002150:	00023617          	auipc	a2,0x23
    80002154:	43060613          	addi	a2,a2,1072 # 80025580 <.L__unnamed_28>
    80002158:	45f1                	li	a1,28
    8000215a:	00020097          	auipc	ra,0x20
    8000215e:	11c080e7          	jalr	284(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080002164 <.LBB1_246>:
                .uvm_alloc(size, size + 2 * PGSIZE) {
    80002164:	00023517          	auipc	a0,0x23
    80002168:	0bc50513          	addi	a0,a0,188 # 80025220 <str.1>

000000008000216c <.LBB1_247>:
    8000216c:	00023617          	auipc	a2,0x23
    80002170:	47c60613          	addi	a2,a2,1148 # 800255e8 <.L__unnamed_29>
    80002174:	45f1                	li	a1,28
    80002176:	00020097          	auipc	ra,0x20
    8000217a:	100080e7          	jalr	256(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080002180 <.LBB1_248>:
        page_table.uvm_clear(VirtualAddress::new(size - 2 * PGSIZE));
    80002180:	00023517          	auipc	a0,0x23
    80002184:	04050513          	addi	a0,a0,64 # 800251c0 <str.0>

0000000080002188 <.LBB1_249>:
    80002188:	00023617          	auipc	a2,0x23
    8000218c:	47860613          	addi	a2,a2,1144 # 80025600 <.L__unnamed_30>
    80002190:	02100593          	li	a1,33
    80002194:	00020097          	auipc	ra,0x20
    80002198:	0e2080e7          	jalr	226(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008000219e <.LBB1_250>:
        stack_base = sp - PGSIZE;
    8000219e:	00023517          	auipc	a0,0x23
    800021a2:	02250513          	addi	a0,a0,34 # 800251c0 <str.0>

00000000800021a6 <.LBB1_251>:
    800021a6:	00023617          	auipc	a2,0x23
    800021aa:	47260613          	addi	a2,a2,1138 # 80025618 <.L__unnamed_31>
    800021ae:	02100593          	li	a1,33
    800021b2:	00020097          	auipc	ra,0x20
    800021b6:	0c4080e7          	jalr	196(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    800021ba:	0000                	unimp
            if argv[argc] as usize == 0x0 { break; }
    800021bc:	28013583          	ld	a1,640(sp)
    800021c0:	653a                	ld	a0,392(sp)

00000000800021c2 <.LBB1_252>:
    800021c2:	00023617          	auipc	a2,0x23
    800021c6:	46e60613          	addi	a2,a2,1134 # 80025630 <.L__unnamed_32>
    800021ca:	00020097          	auipc	ra,0x20
    800021ce:	0d8080e7          	jalr	216(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    800021d2:	0000                	unimp
            sp -= str_len(argv[argc]) + 1;
    800021d4:	28013583          	ld	a1,640(sp)
    800021d8:	7576                	ld	a0,376(sp)

00000000800021da <.LBB1_253>:
    800021da:	00023617          	auipc	a2,0x23
    800021de:	46e60613          	addi	a2,a2,1134 # 80025648 <.L__unnamed_33>
    800021e2:	00020097          	auipc	ra,0x20
    800021e6:	0c0080e7          	jalr	192(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

00000000800021ec <.LBB1_254>:
    800021ec:	00023517          	auipc	a0,0x23
    800021f0:	03450513          	addi	a0,a0,52 # 80025220 <str.1>

00000000800021f4 <.LBB1_255>:
    800021f4:	00023617          	auipc	a2,0x23
    800021f8:	46c60613          	addi	a2,a2,1132 # 80025660 <.L__unnamed_34>
    800021fc:	45f1                	li	a1,28
    800021fe:	00020097          	auipc	ra,0x20
    80002202:	078080e7          	jalr	120(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080002208 <.LBB1_256>:
    80002208:	00023517          	auipc	a0,0x23
    8000220c:	fb850513          	addi	a0,a0,-72 # 800251c0 <str.0>

0000000080002210 <.LBB1_257>:
    80002210:	00023617          	auipc	a2,0x23
    80002214:	46860613          	addi	a2,a2,1128 # 80025678 <.L__unnamed_35>
    80002218:	02100593          	li	a1,33
    8000221c:	00020097          	auipc	ra,0x20
    80002220:	05a080e7          	jalr	90(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80002224:	0000                	unimp
                        argv[argc] as *mut u8, 
    80002226:	28013583          	ld	a1,640(sp)
    8000222a:	6556                	ld	a0,336(sp)

000000008000222c <.LBB1_258>:
    8000222c:	00023617          	auipc	a2,0x23
    80002230:	52460613          	addi	a2,a2,1316 # 80025750 <.L__unnamed_36>
    80002234:	00020097          	auipc	ra,0x20
    80002238:	06e080e7          	jalr	110(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    8000223c:	0000                	unimp
                        str_len(argv[argc])
    8000223e:	28013583          	ld	a1,640(sp)
    80002242:	6516                	ld	a0,320(sp)

0000000080002244 <.LBB1_259>:
    80002244:	00023617          	auipc	a2,0x23
    80002248:	52460613          	addi	a2,a2,1316 # 80025768 <.L__unnamed_37>
    8000224c:	00020097          	auipc	ra,0x20
    80002250:	056080e7          	jalr	86(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80002254:	0000                	unimp
                    str_len(argv[argc]) + 1,
    80002256:	28013583          	ld	a1,640(sp)
    8000225a:	6552                	ld	a0,272(sp)

000000008000225c <.LBB1_260>:
    8000225c:	00023617          	auipc	a2,0x23
    80002260:	52460613          	addi	a2,a2,1316 # 80025780 <.L__unnamed_38>
    80002264:	00020097          	auipc	ra,0x20
    80002268:	03e080e7          	jalr	62(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

000000008000226e <.LBB1_261>:
    8000226e:	00023517          	auipc	a0,0x23
    80002272:	fb250513          	addi	a0,a0,-78 # 80025220 <str.1>

0000000080002276 <.LBB1_262>:
    80002276:	00023617          	auipc	a2,0x23
    8000227a:	52260613          	addi	a2,a2,1314 # 80025798 <.L__unnamed_39>
    8000227e:	45f1                	li	a1,28
    80002280:	00020097          	auipc	ra,0x20
    80002284:	ff6080e7          	jalr	-10(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80002288:	0000                	unimp
            user_stack[argc] = sp;
    8000228a:	754e                	ld	a0,240(sp)

000000008000228c <.LBB1_263>:
    8000228c:	00023617          	auipc	a2,0x23
    80002290:	53c60613          	addi	a2,a2,1340 # 800257c8 <.L__unnamed_40>
    80002294:	02000593          	li	a1,32
    80002298:	00020097          	auipc	ra,0x20
    8000229c:	00a080e7          	jalr	10(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

00000000800022a2 <.LBB1_264>:
            argc += 1;
    800022a2:	00023517          	auipc	a0,0x23
    800022a6:	f7e50513          	addi	a0,a0,-130 # 80025220 <str.1>

00000000800022aa <.LBB1_265>:
    800022aa:	00023617          	auipc	a2,0x23
    800022ae:	53660613          	addi	a2,a2,1334 # 800257e0 <.L__unnamed_41>
    800022b2:	45f1                	li	a1,28
    800022b4:	00020097          	auipc	ra,0x20
    800022b8:	fc2080e7          	jalr	-62(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    800022bc:	0000                	unimp
    user_stack[argc] = 0;
    800022be:	651a                	ld	a0,384(sp)

00000000800022c0 <.LBB1_266>:
    800022c0:	00023617          	auipc	a2,0x23
    800022c4:	53860613          	addi	a2,a2,1336 # 800257f8 <.L__unnamed_42>
    800022c8:	02000593          	li	a1,32
    800022cc:	00020097          	auipc	ra,0x20
    800022d0:	fd6080e7          	jalr	-42(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

00000000800022d6 <.LBB1_267>:
    sp -= (argc + 1) * size_of::<usize>();
    800022d6:	00023517          	auipc	a0,0x23
    800022da:	f4a50513          	addi	a0,a0,-182 # 80025220 <str.1>

00000000800022de <.LBB1_268>:
    800022de:	00023617          	auipc	a2,0x23
    800022e2:	53260613          	addi	a2,a2,1330 # 80025810 <.L__unnamed_43>
    800022e6:	45f1                	li	a1,28
    800022e8:	00020097          	auipc	ra,0x20
    800022ec:	f8e080e7          	jalr	-114(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

00000000800022f2 <.LBB1_269>:
    800022f2:	00023517          	auipc	a0,0x23
    800022f6:	53e50513          	addi	a0,a0,1342 # 80025830 <str.2>

00000000800022fa <.LBB1_270>:
    800022fa:	00023617          	auipc	a2,0x23
    800022fe:	51660613          	addi	a2,a2,1302 # 80025810 <.L__unnamed_43>
    80002302:	02100593          	li	a1,33
    80002306:	00020097          	auipc	ra,0x20
    8000230a:	f70080e7          	jalr	-144(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080002310 <.LBB1_271>:
    80002310:	00023517          	auipc	a0,0x23
    80002314:	eb050513          	addi	a0,a0,-336 # 800251c0 <str.0>

0000000080002318 <.LBB1_272>:
    80002318:	00023617          	auipc	a2,0x23
    8000231c:	54060613          	addi	a2,a2,1344 # 80025858 <.L__unnamed_44>
    80002320:	02100593          	li	a1,33
    80002324:	00020097          	auipc	ra,0x20
    80002328:	f52080e7          	jalr	-174(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008000232e <.LBB1_273>:
            (argc + 1)*size_of::<usize>()
    8000232e:	00023517          	auipc	a0,0x23
    80002332:	ef250513          	addi	a0,a0,-270 # 80025220 <str.1>

0000000080002336 <.LBB1_274>:
    80002336:	00023617          	auipc	a2,0x23
    8000233a:	53a60613          	addi	a2,a2,1338 # 80025870 <.L__unnamed_45>
    8000233e:	45f1                	li	a1,28
    80002340:	00020097          	auipc	ra,0x20
    80002344:	f36080e7          	jalr	-202(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008000234a <.LBB1_275>:
    8000234a:	00023517          	auipc	a0,0x23
    8000234e:	4e650513          	addi	a0,a0,1254 # 80025830 <str.2>

0000000080002352 <.LBB1_276>:
    80002352:	00023617          	auipc	a2,0x23
    80002356:	51e60613          	addi	a2,a2,1310 # 80025870 <.L__unnamed_45>
    8000235a:	02100593          	li	a1,33
    8000235e:	00020097          	auipc	ra,0x20
    80002362:	f18080e7          	jalr	-232(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080002368 <.LBB1_277>:
            (argc + 1)*size_of::<usize>()
    80002368:	00023517          	auipc	a0,0x23
    8000236c:	eb850513          	addi	a0,a0,-328 # 80025220 <str.1>

0000000080002370 <.LBB1_278>:
    80002370:	00023617          	auipc	a2,0x23
    80002374:	51860613          	addi	a2,a2,1304 # 80025888 <.L__unnamed_46>
    80002378:	45f1                	li	a1,28
    8000237a:	00020097          	auipc	ra,0x20
    8000237e:	efc080e7          	jalr	-260(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080002384 <.LBB1_279>:
    80002384:	00023517          	auipc	a0,0x23
    80002388:	4ac50513          	addi	a0,a0,1196 # 80025830 <str.2>

000000008000238c <.LBB1_280>:
    8000238c:	00023617          	auipc	a2,0x23
    80002390:	4fc60613          	addi	a2,a2,1276 # 80025888 <.L__unnamed_46>
    80002394:	02100593          	li	a1,33
    80002398:	00020097          	auipc	ra,0x20
    8000239c:	ede080e7          	jalr	-290(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel7process3elf8align_sp17h0cb3435f5c58b65bE:

00000000800023a2 <_ZN6kernel7process3elf8align_sp17h0cb3435f5c58b65bE>:


#[inline]
fn align_sp(sp: usize) -> usize {
    800023a2:	1141                	addi	sp,sp,-16
    800023a4:	e42a                	sd	a0,8(sp)
    sp - (sp % 16)
    800023a6:	ff057593          	andi	a1,a0,-16
    800023aa:	e02e                	sd	a1,0(sp)
    800023ac:	00b56663          	bltu	a0,a1,800023b8 <.LBB2_3>
    800023b0:	a009                	j	800023b2 <_ZN6kernel7process3elf8align_sp17h0cb3435f5c58b65bE+0x10>
    800023b2:	6502                	ld	a0,0(sp)
    800023b4:	0141                	addi	sp,sp,16
    800023b6:	8082                	ret

00000000800023b8 <.LBB2_3>:
    sp - (sp % 16)
    800023b8:	00023517          	auipc	a0,0x23
    800023bc:	e0850513          	addi	a0,a0,-504 # 800251c0 <str.0>

00000000800023c0 <.LBB2_4>:
    800023c0:	00023617          	auipc	a2,0x23
    800023c4:	51060613          	addi	a2,a2,1296 # 800258d0 <.L__unnamed_47>
    800023c8:	02100593          	li	a1,33
    800023cc:	00020097          	auipc	ra,0x20
    800023d0:	eaa080e7          	jalr	-342(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hf28a3b70ff934ae9E:

00000000800023d6 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hf28a3b70ff934ae9E>:
#[stable(feature = "rust1", since = "1.0.0")]
impl<T, U> Into<U> for T
where
    U: From<T>,
{
    fn into(self) -> U {
    800023d6:	1101                	addi	sp,sp,-32
    800023d8:	ec06                	sd	ra,24(sp)
    800023da:	e82a                	sd	a0,16(sp)
        U::from(self)
    800023dc:	0000d097          	auipc	ra,0xd
    800023e0:	266080e7          	jalr	614(ra) # 8000f642 <_ZN98_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$mut$u20$T$GT$$GT$4from17h99a3612f25da96c9E>
    800023e4:	e42a                	sd	a0,8(sp)
    800023e6:	a009                	j	800023e8 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hf28a3b70ff934ae9E+0x12>
    }
    800023e8:	6522                	ld	a0,8(sp)
    800023ea:	60e2                	ld	ra,24(sp)
    800023ec:	6105                	addi	sp,sp,32
    800023ee:	8082                	ret

Disassembly of section .text._ZN5alloc4sync12Arc$LT$T$GT$10from_inner17ha9d20dd6b0e60056E:

00000000800023f0 <_ZN5alloc4sync12Arc$LT$T$GT$10from_inner17ha9d20dd6b0e60056E>:

#[unstable(feature = "dispatch_from_dyn", issue = "none")]
impl<T: ?Sized + Unsize<U>, U: ?Sized> DispatchFromDyn<Arc<U>> for Arc<T> {}

impl<T: ?Sized> Arc<T> {
    fn from_inner(ptr: NonNull<ArcInner<T>>) -> Self {
    800023f0:	1141                	addi	sp,sp,-16
    800023f2:	e42a                	sd	a0,8(sp)
        Self { ptr, phantom: PhantomData }
    800023f4:	e02a                	sd	a0,0(sp)
    }
    800023f6:	0141                	addi	sp,sp,16
    800023f8:	8082                	ret

Disassembly of section .text._ZN5alloc4sync12Arc$LT$T$GT$17get_mut_unchecked17hb9140ecfe8505044E:

00000000800023fa <_ZN5alloc4sync12Arc$LT$T$GT$17get_mut_unchecked17hb9140ecfe8505044E>:
    /// }
    /// assert_eq!(*x, "foo");
    /// ```
    #[inline]
    #[unstable(feature = "get_mut_unchecked", issue = "63292")]
    pub unsafe fn get_mut_unchecked(this: &mut Self) -> &mut T {
    800023fa:	1101                	addi	sp,sp,-32
    800023fc:	ec06                	sd	ra,24(sp)
    800023fe:	e82a                	sd	a0,16(sp)
        // We are careful to *not* create a reference covering the "count" fields, as
        // this would alias with concurrent access to the reference counts (e.g. by `Weak`).
        unsafe { &mut (*this.ptr.as_ptr()).data }
    80002400:	6108                	ld	a0,0(a0)
    80002402:	0000d097          	auipc	ra,0xd
    80002406:	134080e7          	jalr	308(ra) # 8000f536 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17hc25f2e50aadb25dbE>
    8000240a:	e42a                	sd	a0,8(sp)
    8000240c:	a009                	j	8000240e <_ZN5alloc4sync12Arc$LT$T$GT$17get_mut_unchecked17hb9140ecfe8505044E+0x14>
    8000240e:	6522                	ld	a0,8(sp)
    80002410:	0541                	addi	a0,a0,16
    }
    80002412:	60e2                	ld	ra,24(sp)
    80002414:	6105                	addi	sp,sp,32
    80002416:	8082                	ret

Disassembly of section .text._ZN5alloc4sync12Arc$LT$T$GT$3new17h678276cd59118dbbE:

0000000080002418 <_ZN5alloc4sync12Arc$LT$T$GT$3new17h678276cd59118dbbE>:
    pub fn new(data: T) -> Arc<T> {
    80002418:	7175                	addi	sp,sp,-144
    8000241a:	e506                	sd	ra,136(sp)
    8000241c:	ec2a                	sd	a0,24(sp)
    8000241e:	04800513          	li	a0,72
    80002422:	45a1                	li	a1,8
        let x: Box<_> = box ArcInner {
    80002424:	0000a097          	auipc	ra,0xa
    80002428:	9f0080e7          	jalr	-1552(ra) # 8000be14 <_ZN5alloc5alloc15exchange_malloc17hc8acd7fb5c1fe184E>
            strong: atomic::AtomicUsize::new(1),
    8000242c:	f02a                	sd	a0,32(sp)
    8000242e:	4505                	li	a0,1
    80002430:	00002097          	auipc	ra,0x2
    80002434:	2f4080e7          	jalr	756(ra) # 80004724 <_ZN4core4sync6atomic11AtomicUsize3new17hb5d2654a6be55e11E>
    80002438:	f8aa                	sd	a0,112(sp)
    8000243a:	f42a                	sd	a0,40(sp)
    8000243c:	a009                	j	8000243e <_ZN5alloc4sync12Arc$LT$T$GT$3new17h678276cd59118dbbE+0x26>
    8000243e:	4505                	li	a0,1
            weak: atomic::AtomicUsize::new(1),
    80002440:	00002097          	auipc	ra,0x2
    80002444:	2e4080e7          	jalr	740(ra) # 80004724 <_ZN4core4sync6atomic11AtomicUsize3new17hb5d2654a6be55e11E>
    80002448:	fcaa                	sd	a0,120(sp)
    8000244a:	f82a                	sd	a0,48(sp)
    8000244c:	a009                	j	8000244e <_ZN5alloc4sync12Arc$LT$T$GT$3new17h678276cd59118dbbE+0x36>
            data,
    8000244e:	7502                	ld	a0,32(sp)
    80002450:	65e2                	ld	a1,24(sp)
    80002452:	7990                	ld	a2,48(a1)
    80002454:	f4b2                	sd	a2,104(sp)
    80002456:	7590                	ld	a2,40(a1)
    80002458:	f0b2                	sd	a2,96(sp)
    8000245a:	7190                	ld	a2,32(a1)
    8000245c:	ecb2                	sd	a2,88(sp)
    8000245e:	6d90                	ld	a2,24(a1)
    80002460:	e8b2                	sd	a2,80(sp)
    80002462:	6990                	ld	a2,16(a1)
    80002464:	e4b2                	sd	a2,72(sp)
    80002466:	6590                	ld	a2,8(a1)
    80002468:	e0b2                	sd	a2,64(sp)
    8000246a:	618c                	ld	a1,0(a1)
    8000246c:	fc2e                	sd	a1,56(sp)
        let x: Box<_> = box ArcInner {
    8000246e:	75a2                	ld	a1,40(sp)
    80002470:	e10c                	sd	a1,0(a0)
    80002472:	75c2                	ld	a1,48(sp)
    80002474:	e50c                	sd	a1,8(a0)
    80002476:	75a6                	ld	a1,104(sp)
    80002478:	e12c                	sd	a1,64(a0)
    8000247a:	7586                	ld	a1,96(sp)
    8000247c:	fd0c                	sd	a1,56(a0)
    8000247e:	65e6                	ld	a1,88(sp)
    80002480:	f90c                	sd	a1,48(a0)
    80002482:	65c6                	ld	a1,80(sp)
    80002484:	f50c                	sd	a1,40(a0)
    80002486:	65a6                	ld	a1,72(sp)
    80002488:	f10c                	sd	a1,32(a0)
    8000248a:	6586                	ld	a1,64(sp)
    8000248c:	ed0c                	sd	a1,24(a0)
    8000248e:	75e2                	ld	a1,56(sp)
    80002490:	e90c                	sd	a1,16(a0)
    80002492:	e12a                	sd	a0,128(sp)
        Self::from_inner(Box::leak(x).into())
    80002494:	0001a097          	auipc	ra,0x1a
    80002498:	e54080e7          	jalr	-428(ra) # 8001c2e8 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17ha0a7030531762e6fE>
    8000249c:	e82a                	sd	a0,16(sp)
    8000249e:	a009                	j	800024a0 <_ZN5alloc4sync12Arc$LT$T$GT$3new17h678276cd59118dbbE+0x88>
    800024a0:	6542                	ld	a0,16(sp)
    800024a2:	00000097          	auipc	ra,0x0
    800024a6:	f34080e7          	jalr	-204(ra) # 800023d6 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hf28a3b70ff934ae9E>
    800024aa:	e42a                	sd	a0,8(sp)
    800024ac:	a009                	j	800024ae <_ZN5alloc4sync12Arc$LT$T$GT$3new17h678276cd59118dbbE+0x96>
    800024ae:	6522                	ld	a0,8(sp)
    800024b0:	00000097          	auipc	ra,0x0
    800024b4:	f40080e7          	jalr	-192(ra) # 800023f0 <_ZN5alloc4sync12Arc$LT$T$GT$10from_inner17ha9d20dd6b0e60056E>
    800024b8:	e02a                	sd	a0,0(sp)
    800024ba:	a009                	j	800024bc <_ZN5alloc4sync12Arc$LT$T$GT$3new17h678276cd59118dbbE+0xa4>
    }
    800024bc:	6502                	ld	a0,0(sp)
    800024be:	60aa                	ld	ra,136(sp)
    800024c0:	6149                	addi	sp,sp,144
    800024c2:	8082                	ret

Disassembly of section .text._ZN5alloc4sync12Arc$LT$T$GT$5inner17h9bfe4db1ecae9d98E:

00000000800024c4 <_ZN5alloc4sync12Arc$LT$T$GT$5inner17h9bfe4db1ecae9d98E>:
    fn inner(&self) -> &ArcInner<T> {
    800024c4:	1101                	addi	sp,sp,-32
    800024c6:	ec06                	sd	ra,24(sp)
    800024c8:	e82a                	sd	a0,16(sp)
        unsafe { self.ptr.as_ref() }
    800024ca:	0000d097          	auipc	ra,0xd
    800024ce:	084080e7          	jalr	132(ra) # 8000f54e <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ref17hb658835e636047c4E>
    800024d2:	e42a                	sd	a0,8(sp)
    800024d4:	a009                	j	800024d6 <_ZN5alloc4sync12Arc$LT$T$GT$5inner17h9bfe4db1ecae9d98E+0x12>
    }
    800024d6:	6522                	ld	a0,8(sp)
    800024d8:	60e2                	ld	ra,24(sp)
    800024da:	6105                	addi	sp,sp,32
    800024dc:	8082                	ret

Disassembly of section .text._ZN5alloc4sync12Arc$LT$T$GT$9drop_slow17hcb02a55d90430c0dE:

00000000800024de <_ZN5alloc4sync12Arc$LT$T$GT$9drop_slow17hcb02a55d90430c0dE>:
    unsafe fn drop_slow(&mut self) {
    800024de:	7179                	addi	sp,sp,-48
    800024e0:	f406                	sd	ra,40(sp)
    800024e2:	e42a                	sd	a0,8(sp)
    800024e4:	f02a                	sd	a0,32(sp)
        unsafe { ptr::drop_in_place(Self::get_mut_unchecked(self)) };
    800024e6:	00000097          	auipc	ra,0x0
    800024ea:	f14080e7          	jalr	-236(ra) # 800023fa <_ZN5alloc4sync12Arc$LT$T$GT$17get_mut_unchecked17hb9140ecfe8505044E>
    800024ee:	e82a                	sd	a0,16(sp)
    800024f0:	a009                	j	800024f2 <_ZN5alloc4sync12Arc$LT$T$GT$9drop_slow17hcb02a55d90430c0dE+0x14>
    800024f2:	6542                	ld	a0,16(sp)
    800024f4:	00005097          	auipc	ra,0x5
    800024f8:	976080e7          	jalr	-1674(ra) # 80006e6a <_ZN4core3ptr44drop_in_place$LT$kernel..fs..file..VFile$GT$17h7a3c9775c1583e88E>
    800024fc:	a009                	j	800024fe <_ZN5alloc4sync12Arc$LT$T$GT$9drop_slow17hcb02a55d90430c0dE+0x20>
        drop(Weak { ptr: self.ptr });
    800024fe:	6522                	ld	a0,8(sp)
    80002500:	6108                	ld	a0,0(a0)
    80002502:	ec2a                	sd	a0,24(sp)
    80002504:	0001b097          	auipc	ra,0x1b
    80002508:	b7e080e7          	jalr	-1154(ra) # 8001d082 <_ZN4core3mem4drop17h4200387821e72e60E>
    8000250c:	a009                	j	8000250e <_ZN5alloc4sync12Arc$LT$T$GT$9drop_slow17hcb02a55d90430c0dE+0x30>
    }
    8000250e:	70a2                	ld	ra,40(sp)
    80002510:	6145                	addi	sp,sp,48
    80002512:	8082                	ret

Disassembly of section .text._ZN5alloc4sync13Weak$LT$T$GT$5inner17h5044bfde36c7c45eE:

0000000080002514 <_ZN5alloc4sync13Weak$LT$T$GT$5inner17h5044bfde36c7c45eE>:
    }

    /// Returns `None` when the pointer is dangling and there is no allocated `ArcInner`,
    /// (i.e., when this `Weak` was created by `Weak::new`).
    #[inline]
    fn inner(&self) -> Option<WeakInner<'_>> {
    80002514:	711d                	addi	sp,sp,-96
    80002516:	ec86                	sd	ra,88(sp)
    80002518:	ec2a                	sd	a0,24(sp)
    8000251a:	e4aa                	sd	a0,72(sp)
        if is_dangling(self.ptr.as_ptr()) {
    8000251c:	6108                	ld	a0,0(a0)
    8000251e:	0000d097          	auipc	ra,0xd
    80002522:	018080e7          	jalr	24(ra) # 8000f536 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17hc25f2e50aadb25dbE>
    80002526:	f02a                	sd	a0,32(sp)
    80002528:	a009                	j	8000252a <_ZN5alloc4sync13Weak$LT$T$GT$5inner17h5044bfde36c7c45eE+0x16>
    8000252a:	7502                	ld	a0,32(sp)
    8000252c:	0000a097          	auipc	ra,0xa
    80002530:	720080e7          	jalr	1824(ra) # 8000cc4c <_ZN5alloc2rc11is_dangling17hdc2075289302a6eaE>
    80002534:	e82a                	sd	a0,16(sp)
    80002536:	a009                	j	80002538 <_ZN5alloc4sync13Weak$LT$T$GT$5inner17h5044bfde36c7c45eE+0x24>
    80002538:	6542                	ld	a0,16(sp)
    8000253a:	4581                	li	a1,0
    8000253c:	00b50663          	beq	a0,a1,80002548 <_ZN5alloc4sync13Weak$LT$T$GT$5inner17h5044bfde36c7c45eE+0x34>
    80002540:	a009                	j	80002542 <_ZN5alloc4sync13Weak$LT$T$GT$5inner17h5044bfde36c7c45eE+0x2e>
    80002542:	4501                	li	a0,0
            None
    80002544:	f42a                	sd	a0,40(sp)
        if is_dangling(self.ptr.as_ptr()) {
    80002546:	a01d                	j	8000256c <_ZN5alloc4sync13Weak$LT$T$GT$5inner17h5044bfde36c7c45eE+0x58>
        } else {
            // We are careful to *not* create a reference covering the "data" field, as
            // the field may be mutated concurrently (for example, if the last `Arc`
            // is dropped, the data field will be dropped in-place).
            Some(unsafe {
                let ptr = self.ptr.as_ptr();
    80002548:	6562                	ld	a0,24(sp)
    8000254a:	6108                	ld	a0,0(a0)
    8000254c:	0000d097          	auipc	ra,0xd
    80002550:	fea080e7          	jalr	-22(ra) # 8000f536 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17hc25f2e50aadb25dbE>
    80002554:	85aa                	mv	a1,a0
    80002556:	e42e                	sd	a1,8(sp)
    80002558:	e8aa                	sd	a0,80(sp)
    8000255a:	a009                	j	8000255c <_ZN5alloc4sync13Weak$LT$T$GT$5inner17h5044bfde36c7c45eE+0x48>
                WeakInner { strong: &(*ptr).strong, weak: &(*ptr).weak }
    8000255c:	6522                	ld	a0,8(sp)
    8000255e:	00850593          	addi	a1,a0,8
    80002562:	fc2e                	sd	a1,56(sp)
    80002564:	e0aa                	sd	a0,64(sp)
            Some(unsafe {
    80002566:	f42e                	sd	a1,40(sp)
    80002568:	f82a                	sd	a0,48(sp)
        if is_dangling(self.ptr.as_ptr()) {
    8000256a:	a009                	j	8000256c <_ZN5alloc4sync13Weak$LT$T$GT$5inner17h5044bfde36c7c45eE+0x58>
            })
        }
    }
    8000256c:	7522                	ld	a0,40(sp)
    8000256e:	75c2                	ld	a1,48(sp)
    80002570:	60e6                	ld	ra,88(sp)
    80002572:	6125                	addi	sp,sp,96
    80002574:	8082                	ret

Disassembly of section .text._ZN64_$LT$alloc..sync..Arc$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hd600a08a186c4518E:

0000000080002576 <_ZN64_$LT$alloc..sync..Arc$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hd600a08a186c4518E>:
    fn clone(&self) -> Arc<T> {
    80002576:	7139                	addi	sp,sp,-64
    80002578:	fc06                	sd	ra,56(sp)
    8000257a:	e82a                	sd	a0,16(sp)
    8000257c:	f42a                	sd	a0,40(sp)
        let old_size = self.inner().strong.fetch_add(1, Relaxed);
    8000257e:	00000097          	auipc	ra,0x0
    80002582:	f46080e7          	jalr	-186(ra) # 800024c4 <_ZN5alloc4sync12Arc$LT$T$GT$5inner17h9bfe4db1ecae9d98E>
    80002586:	ec2a                	sd	a0,24(sp)
    80002588:	a009                	j	8000258a <_ZN64_$LT$alloc..sync..Arc$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hd600a08a186c4518E+0x14>
    8000258a:	6562                	ld	a0,24(sp)
    8000258c:	4601                	li	a2,0
    8000258e:	02c103a3          	sb	a2,39(sp)
    80002592:	4585                	li	a1,1
    80002594:	00002097          	auipc	ra,0x2
    80002598:	1ac080e7          	jalr	428(ra) # 80004740 <_ZN4core4sync6atomic11AtomicUsize9fetch_add17h9147f412b3f815f9E>
    8000259c:	85aa                	mv	a1,a0
    8000259e:	e42e                	sd	a1,8(sp)
    800025a0:	f82a                	sd	a0,48(sp)
    800025a2:	a009                	j	800025a4 <_ZN64_$LT$alloc..sync..Arc$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hd600a08a186c4518E+0x2e>
    800025a4:	65a2                	ld	a1,8(sp)
    800025a6:	557d                	li	a0,-1
        if old_size > MAX_REFCOUNT {
    800025a8:	00b54563          	blt	a0,a1,800025b2 <_ZN64_$LT$alloc..sync..Arc$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hd600a08a186c4518E+0x3c>
    800025ac:	a009                	j	800025ae <_ZN64_$LT$alloc..sync..Arc$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hd600a08a186c4518E+0x38>
            abort();
    800025ae:	0000                	unimp
    800025b0:	0000                	unimp
        Self::from_inner(self.ptr)
    800025b2:	6542                	ld	a0,16(sp)
    800025b4:	6108                	ld	a0,0(a0)
    800025b6:	00000097          	auipc	ra,0x0
    800025ba:	e3a080e7          	jalr	-454(ra) # 800023f0 <_ZN5alloc4sync12Arc$LT$T$GT$10from_inner17ha9d20dd6b0e60056E>
    800025be:	e02a                	sd	a0,0(sp)
    800025c0:	a009                	j	800025c2 <_ZN64_$LT$alloc..sync..Arc$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hd600a08a186c4518E+0x4c>
    }
    800025c2:	6502                	ld	a0,0(sp)
    800025c4:	70e2                	ld	ra,56(sp)
    800025c6:	6121                	addi	sp,sp,64
    800025c8:	8082                	ret

Disassembly of section .text._ZN69_$LT$alloc..sync..Arc$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h7c280ba665690166E:

00000000800025ca <_ZN69_$LT$alloc..sync..Arc$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h7c280ba665690166E>:
    fn deref(&self) -> &T {
    800025ca:	1101                	addi	sp,sp,-32
    800025cc:	ec06                	sd	ra,24(sp)
    800025ce:	e82a                	sd	a0,16(sp)
        &self.inner().data
    800025d0:	00000097          	auipc	ra,0x0
    800025d4:	ef4080e7          	jalr	-268(ra) # 800024c4 <_ZN5alloc4sync12Arc$LT$T$GT$5inner17h9bfe4db1ecae9d98E>
    800025d8:	e42a                	sd	a0,8(sp)
    800025da:	a009                	j	800025dc <_ZN69_$LT$alloc..sync..Arc$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h7c280ba665690166E+0x12>
    800025dc:	6522                	ld	a0,8(sp)
    800025de:	0541                	addi	a0,a0,16
    }
    800025e0:	60e2                	ld	ra,24(sp)
    800025e2:	6105                	addi	sp,sp,32
    800025e4:	8082                	ret

Disassembly of section .text._ZN63_$LT$u8$u20$as$u20$alloc..vec..spec_from_elem..SpecFromElem$GT$9from_elem17h7bf881e84d821ad0E:

00000000800025e6 <_ZN63_$LT$u8$u20$as$u20$alloc..vec..spec_from_elem..SpecFromElem$GT$9from_elem17h7bf881e84d821ad0E>:
    }
}

impl SpecFromElem for u8 {
    #[inline]
    fn from_elem<A: Allocator>(elem: u8, n: usize, alloc: A) -> Vec<u8, A> {
    800025e6:	7159                	addi	sp,sp,-112
    800025e8:	f486                	sd	ra,104(sp)
    800025ea:	f032                	sd	a2,32(sp)
    800025ec:	f42a                	sd	a0,40(sp)
    800025ee:	0ff5f513          	andi	a0,a1,255
    800025f2:	86ae                	mv	a3,a1
    800025f4:	f836                	sd	a3,48(sp)
    800025f6:	04b10ba3          	sb	a1,87(sp)
    800025fa:	ecb2                	sd	a2,88(sp)
    800025fc:	4581                	li	a1,0
        if elem == 0 {
    800025fe:	00b51b63          	bne	a0,a1,80002614 <_ZN63_$LT$u8$u20$as$u20$alloc..vec..spec_from_elem..SpecFromElem$GT$9from_elem17h7bf881e84d821ad0E+0x2e>
    80002602:	a009                	j	80002604 <_ZN63_$LT$u8$u20$as$u20$alloc..vec..spec_from_elem..SpecFromElem$GT$9from_elem17h7bf881e84d821ad0E+0x1e>
            return Vec { buf: RawVec::with_capacity_zeroed_in(n, alloc), len: n };
    80002604:	7502                	ld	a0,32(sp)
    80002606:	00000097          	auipc	ra,0x0
    8000260a:	64e080e7          	jalr	1614(ra) # 80002c54 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$23with_capacity_zeroed_in17hc0850ff3c2415cf8E>
    8000260e:	e82a                	sd	a0,16(sp)
    80002610:	ec2e                	sd	a1,24(sp)
    80002612:	a801                	j	80002622 <_ZN63_$LT$u8$u20$as$u20$alloc..vec..spec_from_elem..SpecFromElem$GT$9from_elem17h7bf881e84d821ad0E+0x3c>
        }
        unsafe {
            let mut v = Vec::with_capacity_in(n, alloc);
    80002614:	7582                	ld	a1,32(sp)
    80002616:	1828                	addi	a0,sp,56
    80002618:	00014097          	auipc	ra,0x14
    8000261c:	5b0080e7          	jalr	1456(ra) # 80016bc8 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$16with_capacity_in17hb324b531b744c1e4E>
    80002620:	a809                	j	80002632 <_ZN63_$LT$u8$u20$as$u20$alloc..vec..spec_from_elem..SpecFromElem$GT$9from_elem17h7bf881e84d821ad0E+0x4c>
            return Vec { buf: RawVec::with_capacity_zeroed_in(n, alloc), len: n };
    80002622:	7502                	ld	a0,32(sp)
    80002624:	75a2                	ld	a1,40(sp)
    80002626:	6662                	ld	a2,24(sp)
    80002628:	66c2                	ld	a3,16(sp)
    8000262a:	e194                	sd	a3,0(a1)
    8000262c:	e590                	sd	a2,8(a1)
    8000262e:	e988                	sd	a0,16(a1)
            ptr::write_bytes(v.as_mut_ptr(), elem, n);
            v.set_len(n);
            v
        }
    }
    80002630:	a83d                	j	8000266e <_ZN63_$LT$u8$u20$as$u20$alloc..vec..spec_from_elem..SpecFromElem$GT$9from_elem17h7bf881e84d821ad0E+0x88>
    80002632:	1828                	addi	a0,sp,56
            ptr::write_bytes(v.as_mut_ptr(), elem, n);
    80002634:	00014097          	auipc	ra,0x14
    80002638:	4e0080e7          	jalr	1248(ra) # 80016b14 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$10as_mut_ptr17h2d512420264161fdE>
    8000263c:	e42a                	sd	a0,8(sp)
    8000263e:	a009                	j	80002640 <_ZN63_$LT$u8$u20$as$u20$alloc..vec..spec_from_elem..SpecFromElem$GT$9from_elem17h7bf881e84d821ad0E+0x5a>
    80002640:	7602                	ld	a2,32(sp)
    80002642:	75c2                	ld	a1,48(sp)
    80002644:	6522                	ld	a0,8(sp)
    80002646:	0001f097          	auipc	ra,0x1f
    8000264a:	4ea080e7          	jalr	1258(ra) # 80021b30 <_ZN4core10intrinsics11write_bytes17hfabd30e5bfcb1b55E>
    8000264e:	a009                	j	80002650 <_ZN63_$LT$u8$u20$as$u20$alloc..vec..spec_from_elem..SpecFromElem$GT$9from_elem17h7bf881e84d821ad0E+0x6a>
            v.set_len(n);
    80002650:	7582                	ld	a1,32(sp)
    80002652:	1828                	addi	a0,sp,56
    80002654:	00014097          	auipc	ra,0x14
    80002658:	6ac080e7          	jalr	1708(ra) # 80016d00 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$7set_len17h69219cf242af5cbaE>
    8000265c:	a009                	j	8000265e <_ZN63_$LT$u8$u20$as$u20$alloc..vec..spec_from_elem..SpecFromElem$GT$9from_elem17h7bf881e84d821ad0E+0x78>
            v
    8000265e:	75a2                	ld	a1,40(sp)
    80002660:	6526                	ld	a0,72(sp)
    80002662:	e988                	sd	a0,16(a1)
    80002664:	6506                	ld	a0,64(sp)
    80002666:	e588                	sd	a0,8(a1)
    80002668:	7562                	ld	a0,56(sp)
    8000266a:	e188                	sd	a0,0(a1)
    }
    8000266c:	a009                	j	8000266e <_ZN63_$LT$u8$u20$as$u20$alloc..vec..spec_from_elem..SpecFromElem$GT$9from_elem17h7bf881e84d821ad0E+0x88>
    8000266e:	70a6                	ld	ra,104(sp)
    80002670:	6165                	addi	sp,sp,112
    80002672:	8082                	ret

Disassembly of section .text._ZN4core9panicking13assert_failed17h118e998ec6bec25eE:

0000000080002674 <_ZN4core9panicking13assert_failed17h118e998ec6bec25eE>:

/// Internal function for `assert_eq!` and `assert_ne!` macros
#[cold]
#[track_caller]
#[doc(hidden)]
pub fn assert_failed<T, U>(
    80002674:	715d                	addi	sp,sp,-80
    80002676:	883a                	mv	a6,a4
    80002678:	e42e                	sd	a1,8(sp)
    8000267a:	e832                	sd	a2,16(sp)
    8000267c:	04a107a3          	sb	a0,79(sp)
) -> !
where
    T: fmt::Debug + ?Sized,
    U: fmt::Debug + ?Sized,
{
    assert_failed_inner(kind, &left, &right, args)
    80002680:	628c                	ld	a1,0(a3)
    80002682:	ec2e                	sd	a1,24(sp)
    80002684:	668c                	ld	a1,8(a3)
    80002686:	f02e                	sd	a1,32(sp)
    80002688:	6a8c                	ld	a1,16(a3)
    8000268a:	f42e                	sd	a1,40(sp)
    8000268c:	6e8c                	ld	a1,24(a3)
    8000268e:	f82e                	sd	a1,48(sp)
    80002690:	728c                	ld	a1,32(a3)
    80002692:	fc2e                	sd	a1,56(sp)
    80002694:	768c                	ld	a1,40(a3)
    80002696:	e0ae                	sd	a1,64(sp)

0000000080002698 <.LBB0_1>:
    80002698:	00023717          	auipc	a4,0x23
    8000269c:	25070713          	addi	a4,a4,592 # 800258e8 <.L__unnamed_1>
    800026a0:	002c                	addi	a1,sp,8
    800026a2:	0814                	addi	a3,sp,16
    800026a4:	083c                	addi	a5,sp,24
    800026a6:	863a                	mv	a2,a4
    800026a8:	00020097          	auipc	ra,0x20
    800026ac:	c62080e7          	jalr	-926(ra) # 8002230a <_ZN4core9panicking19assert_failed_inner17h4615d2e87cda8e50E>
	...

Disassembly of section .text._ZN6kernel4arch5riscv8register4mepc5write17h048707cbba437631E:

00000000800026b2 <_ZN6kernel4arch5riscv8register4mepc5write17h048707cbba437631E>:
// machine exception program counter, holds the
// instruction address to which a return from
// exception will go.
#[inline]
pub unsafe fn write(mepc: usize) {
    800026b2:	1141                	addi	sp,sp,-16
    800026b4:	e42a                	sd	a0,8(sp)
    llvm_asm!("csrw mepc, $0" :: "r"(mepc)::"volatile");
    800026b6:	34151073          	csrw	mepc,a0
    800026ba:	0141                	addi	sp,sp,16
    800026bc:	8082                	ret

Disassembly of section .text._ZN6kernel7process9trapframe9Trapframe10update_epc17h24874241e4b03020E:

00000000800026be <_ZN6kernel7process9trapframe9Trapframe10update_epc17h24874241e4b03020E>:
    /*280 */    pub t6:usize
}


impl Trapframe {
    pub fn update_epc(&mut self) {
    800026be:	1101                	addi	sp,sp,-32
    800026c0:	e42a                	sd	a0,8(sp)
    800026c2:	ec2a                	sd	a0,24(sp)
        self.epc += 4;
    800026c4:	6d0c                	ld	a1,24(a0)
    800026c6:	00458513          	addi	a0,a1,4
    800026ca:	e82a                	sd	a0,16(sp)
    800026cc:	00b56863          	bltu	a0,a1,800026dc <.LBB0_3>
    800026d0:	a009                	j	800026d2 <_ZN6kernel7process9trapframe9Trapframe10update_epc17h24874241e4b03020E+0x14>
    800026d2:	6542                	ld	a0,16(sp)
    800026d4:	65a2                	ld	a1,8(sp)
    800026d6:	ed88                	sd	a0,24(a1)
    }
    800026d8:	6105                	addi	sp,sp,32
    800026da:	8082                	ret

00000000800026dc <.LBB0_3>:
        self.epc += 4;
    800026dc:	00023517          	auipc	a0,0x23
    800026e0:	26450513          	addi	a0,a0,612 # 80025940 <str.0>

00000000800026e4 <.LBB0_4>:
    800026e4:	00023617          	auipc	a2,0x23
    800026e8:	23c60613          	addi	a2,a2,572 # 80025920 <.L__unnamed_1>
    800026ec:	45f1                	li	a1,28
    800026ee:	00020097          	auipc	ra,0x20
    800026f2:	b88080e7          	jalr	-1144(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN5alloc7raw_vec11finish_grow17h67df8fd3b618c18aE:

00000000800026f8 <_ZN5alloc7raw_vec11finish_grow17h67df8fd3b618c18aE>:
// This function is outside `RawVec` to minimize compile times. See the comment
// above `RawVec::grow_amortized` for details. (The `A` parameter isn't
// significant, because the number of different `A` types seen in practice is
// much smaller than the number of `T` types.)
#[inline(never)]
fn finish_grow<A>(
    800026f8:	7129                	addi	sp,sp,-320
    800026fa:	fe06                	sd	ra,312(sp)
    800026fc:	f83a                	sd	a4,48(sp)
    new_layout: Result<Layout, LayoutError>,
    current_memory: Option<(NonNull<u8>, Layout)>,
    800026fe:	fc36                	sd	a3,56(sp)
    80002700:	e0aa                	sd	a0,64(sp)
    80002702:	f1ae                	sd	a1,224(sp)
    80002704:	f5b2                	sd	a2,232(sp)
    80002706:	f9ba                	sd	a4,240(sp)
    80002708:	1888                	addi	a0,sp,112
) -> Result<NonNull<[u8]>, TryReserveError>
where
    A: Allocator,
{
    // Check for the error here to minimize the size of `RawVec::grow_*`.
    let new_layout = new_layout.map_err(|_| CapacityOverflow)?;
    8000270a:	0000b097          	auipc	ra,0xb
    8000270e:	862080e7          	jalr	-1950(ra) # 8000cf6c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h048c451de26fa4b9E>
    80002712:	a009                	j	80002714 <_ZN5alloc7raw_vec11finish_grow17h67df8fd3b618c18aE+0x1c>
    80002714:	08a8                	addi	a0,sp,88
    80002716:	188c                	addi	a1,sp,112
    80002718:	0000b097          	auipc	ra,0xb
    8000271c:	acc080e7          	jalr	-1332(ra) # 8000d1e4 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h81067e0558a14198E>
    80002720:	a009                	j	80002722 <_ZN5alloc7raw_vec11finish_grow17h67df8fd3b618c18aE+0x2a>
    80002722:	6566                	ld	a0,88(sp)
    80002724:	4581                	li	a1,0
    80002726:	00b50463          	beq	a0,a1,8000272e <_ZN5alloc7raw_vec11finish_grow17h67df8fd3b618c18aE+0x36>
    8000272a:	a009                	j	8000272c <_ZN5alloc7raw_vec11finish_grow17h67df8fd3b618c18aE+0x34>
    8000272c:	a839                	j	8000274a <_ZN5alloc7raw_vec11finish_grow17h67df8fd3b618c18aE+0x52>
    8000272e:	7586                	ld	a1,96(sp)
    80002730:	7526                	ld	a0,104(sp)
    80002732:	ea2e                	sd	a1,272(sp)
    80002734:	ee2a                	sd	a0,280(sp)
    80002736:	e4ae                	sd	a1,72(sp)
    80002738:	e8aa                	sd	a0,80(sp)
    8000273a:	00a8                	addi	a0,sp,72

    alloc_guard(new_layout.size())?;
    8000273c:	0001c097          	auipc	ra,0x1c
    80002740:	252080e7          	jalr	594(ra) # 8001e98e <_ZN4core5alloc6layout6Layout4size17h7f60c0168860a2ffE>
    80002744:	f42a                	sd	a0,40(sp)
    80002746:	a035                	j	80002772 <_ZN5alloc7raw_vec11finish_grow17h67df8fd3b618c18aE+0x7a>
    let new_layout = new_layout.map_err(|_| CapacityOverflow)?;
    80002748:	0000                	unimp
    8000274a:	7506                	ld	a0,96(sp)
    8000274c:	75a6                	ld	a1,104(sp)
    8000274e:	e22a                	sd	a0,256(sp)
    80002750:	e62e                	sd	a1,264(sp)
    80002752:	00013097          	auipc	ra,0x13
    80002756:	316080e7          	jalr	790(ra) # 80015a68 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h00cb4931a375be30E>
    8000275a:	ec2a                	sd	a0,24(sp)
    8000275c:	f02e                	sd	a1,32(sp)
    8000275e:	a009                	j	80002760 <_ZN5alloc7raw_vec11finish_grow17h67df8fd3b618c18aE+0x68>
    80002760:	7602                	ld	a2,32(sp)
    80002762:	65e2                	ld	a1,24(sp)
    80002764:	6506                	ld	a0,64(sp)
    80002766:	0000b097          	auipc	ra,0xb
    8000276a:	98e080e7          	jalr	-1650(ra) # 8000d0f4 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h7458ba93a206fcffE>
    8000276e:	a009                	j	80002770 <_ZN5alloc7raw_vec11finish_grow17h67df8fd3b618c18aE+0x78>
    80002770:	a8c9                	j	80002842 <_ZN5alloc7raw_vec11finish_grow17h67df8fd3b618c18aE+0x14a>
    alloc_guard(new_layout.size())?;
    80002772:	75a2                	ld	a1,40(sp)
    80002774:	1108                	addi	a0,sp,160
    80002776:	0001c097          	auipc	ra,0x1c
    8000277a:	d8c080e7          	jalr	-628(ra) # 8001e502 <_ZN5alloc7raw_vec11alloc_guard17hfed185ef1a23ae81E>
    8000277e:	a009                	j	80002780 <_ZN5alloc7raw_vec11finish_grow17h67df8fd3b618c18aE+0x88>
    80002780:	0128                	addi	a0,sp,136
    80002782:	110c                	addi	a1,sp,160
    80002784:	0000b097          	auipc	ra,0xb
    80002788:	a18080e7          	jalr	-1512(ra) # 8000d19c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h219e266dbc1ee71cE>
    8000278c:	a009                	j	8000278e <_ZN5alloc7raw_vec11finish_grow17h67df8fd3b618c18aE+0x96>
    8000278e:	652a                	ld	a0,136(sp)
    80002790:	4581                	li	a1,0
    80002792:	00b50463          	beq	a0,a1,8000279a <_ZN5alloc7raw_vec11finish_grow17h67df8fd3b618c18aE+0xa2>
    80002796:	a009                	j	80002798 <_ZN5alloc7raw_vec11finish_grow17h67df8fd3b618c18aE+0xa0>
    80002798:	a801                	j	800027a8 <_ZN5alloc7raw_vec11finish_grow17h67df8fd3b618c18aE+0xb0>

    let memory = if let Some((ptr, old_layout)) = current_memory {
    8000279a:	7562                	ld	a0,56(sp)
    8000279c:	6108                	ld	a0,0(a0)
    8000279e:	4581                	li	a1,0
    800027a0:	04b51263          	bne	a0,a1,800027e4 <_ZN5alloc7raw_vec11finish_grow17h67df8fd3b618c18aE+0xec>
    800027a4:	a035                	j	800027d0 <_ZN5alloc7raw_vec11finish_grow17h67df8fd3b618c18aE+0xd8>
    alloc_guard(new_layout.size())?;
    800027a6:	0000                	unimp
    800027a8:	654a                	ld	a0,144(sp)
    800027aa:	65ea                	ld	a1,152(sp)
    800027ac:	f22a                	sd	a0,288(sp)
    800027ae:	f62e                	sd	a1,296(sp)
    800027b0:	00013097          	auipc	ra,0x13
    800027b4:	2b8080e7          	jalr	696(ra) # 80015a68 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h00cb4931a375be30E>
    800027b8:	e42a                	sd	a0,8(sp)
    800027ba:	e82e                	sd	a1,16(sp)
    800027bc:	a009                	j	800027be <_ZN5alloc7raw_vec11finish_grow17h67df8fd3b618c18aE+0xc6>
    800027be:	6642                	ld	a2,16(sp)
    800027c0:	65a2                	ld	a1,8(sp)
    800027c2:	6506                	ld	a0,64(sp)
    800027c4:	0000b097          	auipc	ra,0xb
    800027c8:	930080e7          	jalr	-1744(ra) # 8000d0f4 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h7458ba93a206fcffE>
    800027cc:	a009                	j	800027ce <_ZN5alloc7raw_vec11finish_grow17h67df8fd3b618c18aE+0xd6>
    800027ce:	a895                	j	80002842 <_ZN5alloc7raw_vec11finish_grow17h67df8fd3b618c18aE+0x14a>
            // The allocator checks for alignment equality
            intrinsics::assume(old_layout.align() == new_layout.align());
            alloc.grow(ptr, old_layout, new_layout)
        }
    } else {
        alloc.allocate(new_layout)
    800027d0:	7542                	ld	a0,48(sp)
    800027d2:	65a6                	ld	a1,72(sp)
    800027d4:	6646                	ld	a2,80(sp)
    800027d6:	0000a097          	auipc	ra,0xa
    800027da:	b3e080e7          	jalr	-1218(ra) # 8000c314 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$8allocate17ha3ee32ed39eb82efE>
    800027de:	fd2a                	sd	a0,184(sp)
    800027e0:	e1ae                	sd	a1,192(sp)
    800027e2:	a0a1                	j	8000282a <_ZN5alloc7raw_vec11finish_grow17h67df8fd3b618c18aE+0x132>
    let memory = if let Some((ptr, old_layout)) = current_memory {
    800027e4:	7562                	ld	a0,56(sp)
    800027e6:	610c                	ld	a1,0(a0)
    800027e8:	e02e                	sd	a1,0(sp)
    800027ea:	fa2e                	sd	a1,304(sp)
    800027ec:	650c                	ld	a1,8(a0)
    800027ee:	6908                	ld	a0,16(a0)
    800027f0:	e5ae                	sd	a1,200(sp)
    800027f2:	e9aa                	sd	a0,208(sp)
    800027f4:	01a8                	addi	a0,sp,200
            intrinsics::assume(old_layout.align() == new_layout.align());
    800027f6:	0001c097          	auipc	ra,0x1c
    800027fa:	1a2080e7          	jalr	418(ra) # 8001e998 <_ZN4core5alloc6layout6Layout5align17h05712eb17caed6beE>
    800027fe:	a009                	j	80002800 <_ZN5alloc7raw_vec11finish_grow17h67df8fd3b618c18aE+0x108>
    80002800:	00a8                	addi	a0,sp,72
    80002802:	0001c097          	auipc	ra,0x1c
    80002806:	196080e7          	jalr	406(ra) # 8001e998 <_ZN4core5alloc6layout6Layout5align17h05712eb17caed6beE>
    8000280a:	a009                	j	8000280c <_ZN5alloc7raw_vec11finish_grow17h67df8fd3b618c18aE+0x114>
    8000280c:	a009                	j	8000280e <_ZN5alloc7raw_vec11finish_grow17h67df8fd3b618c18aE+0x116>
            alloc.grow(ptr, old_layout, new_layout)
    8000280e:	6582                	ld	a1,0(sp)
    80002810:	7542                	ld	a0,48(sp)
    80002812:	662e                	ld	a2,200(sp)
    80002814:	66ce                	ld	a3,208(sp)
    80002816:	6726                	ld	a4,72(sp)
    80002818:	67c6                	ld	a5,80(sp)
    8000281a:	0000a097          	auipc	ra,0xa
    8000281e:	ad0080e7          	jalr	-1328(ra) # 8000c2ea <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$4grow17h7670efcd8d0be277E>
    80002822:	fd2a                	sd	a0,184(sp)
    80002824:	e1ae                	sd	a1,192(sp)
    80002826:	a009                	j	80002828 <_ZN5alloc7raw_vec11finish_grow17h67df8fd3b618c18aE+0x130>
    let memory = if let Some((ptr, old_layout)) = current_memory {
    80002828:	a011                	j	8000282c <_ZN5alloc7raw_vec11finish_grow17h67df8fd3b618c18aE+0x134>
    8000282a:	a009                	j	8000282c <_ZN5alloc7raw_vec11finish_grow17h67df8fd3b618c18aE+0x134>
    };

    memory.map_err(|_| AllocError { layout: new_layout, non_exhaustive: () })
    8000282c:	6506                	ld	a0,64(sp)
    8000282e:	75ea                	ld	a1,184(sp)
    80002830:	660e                	ld	a2,192(sp)
    80002832:	00b4                	addi	a3,sp,72
    80002834:	edb6                	sd	a3,216(sp)
    80002836:	0000a097          	auipc	ra,0xa
    8000283a:	79e080e7          	jalr	1950(ra) # 8000cfd4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h3706629688909c32E>
    8000283e:	a009                	j	80002840 <_ZN5alloc7raw_vec11finish_grow17h67df8fd3b618c18aE+0x148>
}
    80002840:	a011                	j	80002844 <_ZN5alloc7raw_vec11finish_grow17h67df8fd3b618c18aE+0x14c>
    80002842:	a009                	j	80002844 <_ZN5alloc7raw_vec11finish_grow17h67df8fd3b618c18aE+0x14c>
    80002844:	70f2                	ld	ra,312(sp)
    80002846:	6131                	addi	sp,sp,320
    80002848:	8082                	ret

Disassembly of section .text._ZN5alloc7raw_vec11finish_grow28_$u7b$$u7b$closure$u7d$$u7d$17h4102ec07be08fbafE:

000000008000284a <_ZN5alloc7raw_vec11finish_grow28_$u7b$$u7b$closure$u7d$$u7d$17h4102ec07be08fbafE>:
    memory.map_err(|_| AllocError { layout: new_layout, non_exhaustive: () })
    8000284a:	1101                	addi	sp,sp,-32
    8000284c:	85aa                	mv	a1,a0
    8000284e:	e82e                	sd	a1,16(sp)
    80002850:	6188                	ld	a0,0(a1)
    80002852:	658c                	ld	a1,8(a1)
    80002854:	e02a                	sd	a0,0(sp)
    80002856:	e42e                	sd	a1,8(sp)
    80002858:	6105                	addi	sp,sp,32
    8000285a:	8082                	ret

Disassembly of section .text._ZN5alloc7raw_vec11finish_grow28_$u7b$$u7b$closure$u7d$$u7d$17h73415ce87cdd3564E:

000000008000285c <_ZN5alloc7raw_vec11finish_grow28_$u7b$$u7b$closure$u7d$$u7d$17h73415ce87cdd3564E>:
    let new_layout = new_layout.map_err(|_| CapacityOverflow)?;
    8000285c:	1101                	addi	sp,sp,-32
    8000285e:	4581                	li	a1,0
    80002860:	e42e                	sd	a1,8(sp)
    80002862:	6502                	ld	a0,0(sp)
    80002864:	6105                	addi	sp,sp,32
    80002866:	8082                	ret

Disassembly of section .text._ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11allocate_in17hb1a7e5211a2ca028E:

0000000080002868 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11allocate_in17hb1a7e5211a2ca028E>:
    fn allocate_in(capacity: usize, init: AllocInit, alloc: A) -> Self {
    80002868:	7151                	addi	sp,sp,-240
    8000286a:	f586                	sd	ra,232(sp)
    8000286c:	e0aa                	sd	a0,64(sp)
    8000286e:	04b107a3          	sb	a1,79(sp)
    80002872:	f92a                	sd	a0,176(sp)
        if mem::size_of::<T>() == 0 {
    80002874:	a009                	j	80002876 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11allocate_in17hb1a7e5211a2ca028E+0xe>
    80002876:	4505                	li	a0,1
    80002878:	e909                	bnez	a0,8000288a <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11allocate_in17hb1a7e5211a2ca028E+0x22>
    8000287a:	a009                	j	8000287c <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11allocate_in17hb1a7e5211a2ca028E+0x14>
            Self::new_in(alloc)
    8000287c:	00000097          	auipc	ra,0x0
    80002880:	418080e7          	jalr	1048(ra) # 80002c94 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$6new_in17hcde8bd186b8458cbE>
    80002884:	ecaa                	sd	a0,88(sp)
    80002886:	f0ae                	sd	a1,96(sp)
    80002888:	a809                	j	8000289a <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11allocate_in17hb1a7e5211a2ca028E+0x32>
            let layout = match Layout::array::<T>(capacity) {
    8000288a:	6506                	ld	a0,64(sp)
    8000288c:	00006097          	auipc	ra,0x6
    80002890:	d8e080e7          	jalr	-626(ra) # 8000861a <_ZN4core5alloc6layout6Layout5array17h33220460c7f786e0E>
    80002894:	fcaa                	sd	a0,120(sp)
    80002896:	e12e                	sd	a1,128(sp)
    80002898:	a011                	j	8000289c <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11allocate_in17hb1a7e5211a2ca028E+0x34>
        if mem::size_of::<T>() == 0 {
    8000289a:	aa11                	j	800029ae <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11allocate_in17hb1a7e5211a2ca028E+0x146>
                Ok(layout) => layout,
    8000289c:	650a                	ld	a0,128(sp)
    8000289e:	00153593          	seqz	a1,a0
    800028a2:	4581                	li	a1,0
    800028a4:	00b51963          	bne	a0,a1,800028b6 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11allocate_in17hb1a7e5211a2ca028E+0x4e>
    800028a8:	a009                	j	800028aa <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11allocate_in17hb1a7e5211a2ca028E+0x42>
                Err(_) => capacity_overflow(),
    800028aa:	0001f097          	auipc	ra,0x1f
    800028ae:	7e2080e7          	jalr	2018(ra) # 8002208c <_ZN5alloc7raw_vec17capacity_overflow17hae1c560931d103e4E>
    800028b2:	0000                	unimp
            let layout = match Layout::array::<T>(capacity) {
    800028b4:	0000                	unimp
                Ok(layout) => layout,
    800028b6:	75e6                	ld	a1,120(sp)
    800028b8:	650a                	ld	a0,128(sp)
    800028ba:	fd2e                	sd	a1,184(sp)
    800028bc:	e1aa                	sd	a0,192(sp)
    800028be:	f4ae                	sd	a1,104(sp)
    800028c0:	f8aa                	sd	a0,112(sp)
    800028c2:	10a8                	addi	a0,sp,104
            match alloc_guard(layout.size()) {
    800028c4:	0001c097          	auipc	ra,0x1c
    800028c8:	0ca080e7          	jalr	202(ra) # 8001e98e <_ZN4core5alloc6layout6Layout4size17h7f60c0168860a2ffE>
    800028cc:	fc2a                	sd	a0,56(sp)
    800028ce:	a009                	j	800028d0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11allocate_in17hb1a7e5211a2ca028E+0x68>
    800028d0:	75e2                	ld	a1,56(sp)
    800028d2:	0128                	addi	a0,sp,136
    800028d4:	0001c097          	auipc	ra,0x1c
    800028d8:	c2e080e7          	jalr	-978(ra) # 8001e502 <_ZN5alloc7raw_vec11alloc_guard17hfed185ef1a23ae81E>
    800028dc:	a009                	j	800028de <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11allocate_in17hb1a7e5211a2ca028E+0x76>
                Ok(_) => {}
    800028de:	652a                	ld	a0,136(sp)
    800028e0:	4581                	li	a1,0
    800028e2:	00b50963          	beq	a0,a1,800028f4 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11allocate_in17hb1a7e5211a2ca028E+0x8c>
    800028e6:	a009                	j	800028e8 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11allocate_in17hb1a7e5211a2ca028E+0x80>
                Err(_) => capacity_overflow(),
    800028e8:	0001f097          	auipc	ra,0x1f
    800028ec:	7a4080e7          	jalr	1956(ra) # 8002208c <_ZN5alloc7raw_vec17capacity_overflow17hae1c560931d103e4E>
    800028f0:	0000                	unimp
            match alloc_guard(layout.size()) {
    800028f2:	0000                	unimp
                AllocInit::Uninitialized => alloc.allocate(layout),
    800028f4:	04f14503          	lbu	a0,79(sp)
    800028f8:	8905                	andi	a0,a0,1
    800028fa:	4581                	li	a1,0
    800028fc:	00b50e63          	beq	a0,a1,80002918 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11allocate_in17hb1a7e5211a2ca028E+0xb0>
    80002900:	a009                	j	80002902 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11allocate_in17hb1a7e5211a2ca028E+0x9a>
                AllocInit::Zeroed => alloc.allocate_zeroed(layout),
    80002902:	75a6                	ld	a1,104(sp)
    80002904:	7646                	ld	a2,112(sp)
    80002906:	0888                	addi	a0,sp,80
    80002908:	0000a097          	auipc	ra,0xa
    8000290c:	9be080e7          	jalr	-1602(ra) # 8000c2c6 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$15allocate_zeroed17h62d497141254e70dE>
    80002910:	f12a                	sd	a0,160(sp)
    80002912:	f52e                	sd	a1,168(sp)
    80002914:	a829                	j	8000292e <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11allocate_in17hb1a7e5211a2ca028E+0xc6>
            let result = match init {
    80002916:	0000                	unimp
                AllocInit::Uninitialized => alloc.allocate(layout),
    80002918:	75a6                	ld	a1,104(sp)
    8000291a:	7646                	ld	a2,112(sp)
    8000291c:	0888                	addi	a0,sp,80
    8000291e:	0000a097          	auipc	ra,0xa
    80002922:	9f6080e7          	jalr	-1546(ra) # 8000c314 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$8allocate17ha3ee32ed39eb82efE>
    80002926:	f12a                	sd	a0,160(sp)
    80002928:	f52e                	sd	a1,168(sp)
    8000292a:	a009                	j	8000292c <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11allocate_in17hb1a7e5211a2ca028E+0xc4>
            let result = match init {
    8000292c:	a011                	j	80002930 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11allocate_in17hb1a7e5211a2ca028E+0xc8>
    8000292e:	a009                	j	80002930 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11allocate_in17hb1a7e5211a2ca028E+0xc8>
                Ok(ptr) => ptr,
    80002930:	750a                	ld	a0,160(sp)
    80002932:	00153593          	seqz	a1,a0
    80002936:	4581                	li	a1,0
    80002938:	00b51b63          	bne	a0,a1,8000294e <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11allocate_in17hb1a7e5211a2ca028E+0xe6>
    8000293c:	a009                	j	8000293e <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11allocate_in17hb1a7e5211a2ca028E+0xd6>
                Err(_) => handle_alloc_error(layout),
    8000293e:	7526                	ld	a0,104(sp)
    80002940:	75c6                	ld	a1,112(sp)
    80002942:	0001f097          	auipc	ra,0x1f
    80002946:	72e080e7          	jalr	1838(ra) # 80022070 <_ZN5alloc5alloc18handle_alloc_error17haa1b1c0a80642c5aE>
    8000294a:	0000                	unimp
            let ptr = match result {
    8000294c:	0000                	unimp
                Ok(ptr) => ptr,
    8000294e:	750a                	ld	a0,160(sp)
    80002950:	f02a                	sd	a0,32(sp)
    80002952:	75aa                	ld	a1,168(sp)
    80002954:	f42e                	sd	a1,40(sp)
    80002956:	e5aa                	sd	a0,200(sp)
    80002958:	e9ae                	sd	a1,208(sp)
    8000295a:	edaa                	sd	a0,216(sp)
    8000295c:	f1ae                	sd	a1,224(sp)
                ptr: unsafe { Unique::new_unchecked(ptr.cast().as_ptr()) },
    8000295e:	0000d097          	auipc	ra,0xd
    80002962:	b1e080e7          	jalr	-1250(ra) # 8000f47c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17he3c6d28f0e68e811E>
    80002966:	f82a                	sd	a0,48(sp)
    80002968:	a009                	j	8000296a <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11allocate_in17hb1a7e5211a2ca028E+0x102>
    8000296a:	7542                	ld	a0,48(sp)
    8000296c:	0000d097          	auipc	ra,0xd
    80002970:	b90080e7          	jalr	-1136(ra) # 8000f4fc <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h729713db2b300d39E>
    80002974:	ec2a                	sd	a0,24(sp)
    80002976:	a009                	j	80002978 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11allocate_in17hb1a7e5211a2ca028E+0x110>
    80002978:	6562                	ld	a0,24(sp)
    8000297a:	00009097          	auipc	ra,0x9
    8000297e:	194080e7          	jalr	404(ra) # 8000bb0e <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17h620617f59cddd065E>
    80002982:	e82a                	sd	a0,16(sp)
    80002984:	a009                	j	80002986 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11allocate_in17hb1a7e5211a2ca028E+0x11e>
                cap: Self::capacity_from_bytes(ptr.len()),
    80002986:	75a2                	ld	a1,40(sp)
    80002988:	7502                	ld	a0,32(sp)
    8000298a:	0000d097          	auipc	ra,0xd
    8000298e:	c8a080e7          	jalr	-886(ra) # 8000f614 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$3len17h17d848b65404492bE>
    80002992:	e42a                	sd	a0,8(sp)
    80002994:	a009                	j	80002996 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11allocate_in17hb1a7e5211a2ca028E+0x12e>
    80002996:	6522                	ld	a0,8(sp)
    80002998:	00000097          	auipc	ra,0x0
    8000299c:	28c080e7          	jalr	652(ra) # 80002c24 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$19capacity_from_bytes17hb8f80a7316d4a8fbE>
    800029a0:	e02a                	sd	a0,0(sp)
    800029a2:	a009                	j	800029a4 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11allocate_in17hb1a7e5211a2ca028E+0x13c>
            Self {
    800029a4:	6502                	ld	a0,0(sp)
    800029a6:	65c2                	ld	a1,16(sp)
    800029a8:	ecae                	sd	a1,88(sp)
    800029aa:	f0aa                	sd	a0,96(sp)
        if mem::size_of::<T>() == 0 {
    800029ac:	a009                	j	800029ae <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11allocate_in17hb1a7e5211a2ca028E+0x146>
    }
    800029ae:	6566                	ld	a0,88(sp)
    800029b0:	7586                	ld	a1,96(sp)
    800029b2:	70ae                	ld	ra,232(sp)
    800029b4:	616d                	addi	sp,sp,240
    800029b6:	8082                	ret

Disassembly of section .text._ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$13needs_to_grow17ha08818b631ce0004E:

00000000800029b8 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$13needs_to_grow17ha08818b631ce0004E>:
    fn needs_to_grow(&self, len: usize, additional: usize) -> bool {
    800029b8:	715d                	addi	sp,sp,-80
    800029ba:	e486                	sd	ra,72(sp)
    800029bc:	e432                	sd	a2,8(sp)
    800029be:	e82e                	sd	a1,16(sp)
    800029c0:	f02a                	sd	a0,32(sp)
    800029c2:	f42e                	sd	a1,40(sp)
    800029c4:	f832                	sd	a2,48(sp)
    800029c6:	e0aa                	sd	a0,64(sp)
        if mem::size_of::<T>() == 0 { usize::MAX } else { self.cap }
    800029c8:	6508                	ld	a0,8(a0)
    800029ca:	ec2a                	sd	a0,24(sp)
    800029cc:	fc2a                	sd	a0,56(sp)
        additional > self.capacity().wrapping_sub(len)
    800029ce:	a009                	j	800029d0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$13needs_to_grow17ha08818b631ce0004E+0x18>
    800029d0:	65c2                	ld	a1,16(sp)
    800029d2:	6562                	ld	a0,24(sp)
    800029d4:	0001b097          	auipc	ra,0x1b
    800029d8:	6ec080e7          	jalr	1772(ra) # 8001e0c0 <_ZN4core3num23_$LT$impl$u20$usize$GT$12wrapping_sub17h8f077bf007d122c9E>
    800029dc:	e02a                	sd	a0,0(sp)
    800029de:	a009                	j	800029e0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$13needs_to_grow17ha08818b631ce0004E+0x28>
    800029e0:	6502                	ld	a0,0(sp)
    800029e2:	65a2                	ld	a1,8(sp)
    800029e4:	00b53533          	sltu	a0,a0,a1
    }
    800029e8:	60a6                	ld	ra,72(sp)
    800029ea:	6161                	addi	sp,sp,80
    800029ec:	8082                	ret

Disassembly of section .text._ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h47d07dfc1131b1d6E:

00000000800029ee <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h47d07dfc1131b1d6E>:
    fn current_memory(&self) -> Option<(NonNull<u8>, Layout)> {
    800029ee:	7175                	addi	sp,sp,-144
    800029f0:	e506                	sd	ra,136(sp)
    800029f2:	f42e                	sd	a1,40(sp)
    800029f4:	f82a                	sd	a0,48(sp)
    800029f6:	ecae                	sd	a1,88(sp)
        if mem::size_of::<T>() == 0 || self.cap == 0 {
    800029f8:	a025                	j	80002a20 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h47d07dfc1131b1d6E+0x32>
    800029fa:	4505                	li	a0,1
    800029fc:	02a10fa3          	sb	a0,63(sp)
    80002a00:	a819                	j	80002a16 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h47d07dfc1131b1d6E+0x28>
    80002a02:	4501                	li	a0,0
    80002a04:	02a10fa3          	sb	a0,63(sp)
    80002a08:	a039                	j	80002a16 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h47d07dfc1131b1d6E+0x28>
    80002a0a:	7522                	ld	a0,40(sp)
    80002a0c:	6508                	ld	a0,8(a0)
    80002a0e:	4581                	li	a1,0
    80002a10:	feb505e3          	beq	a0,a1,800029fa <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h47d07dfc1131b1d6E+0xc>
    80002a14:	b7fd                	j	80002a02 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h47d07dfc1131b1d6E+0x14>
    80002a16:	03f14503          	lbu	a0,63(sp)
    80002a1a:	8905                	andi	a0,a0,1
    80002a1c:	e509                	bnez	a0,80002a26 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h47d07dfc1131b1d6E+0x38>
    80002a1e:	a801                	j	80002a2e <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h47d07dfc1131b1d6E+0x40>
    80002a20:	4501                	li	a0,0
    80002a22:	fd61                	bnez	a0,800029fa <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h47d07dfc1131b1d6E+0xc>
    80002a24:	b7dd                	j	80002a0a <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h47d07dfc1131b1d6E+0x1c>
    80002a26:	75c2                	ld	a1,48(sp)
    80002a28:	4501                	li	a0,0
            None
    80002a2a:	e188                	sd	a0,0(a1)
        if mem::size_of::<T>() == 0 || self.cap == 0 {
    80002a2c:	a085                	j	80002a8c <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h47d07dfc1131b1d6E+0x9e>
    80002a2e:	4505                	li	a0,1
#[inline(always)]
#[stable(feature = "rust1", since = "1.0.0")]
#[rustc_promotable]
#[rustc_const_stable(feature = "const_align_of", since = "1.24.0")]
pub const fn align_of<T>() -> usize {
    intrinsics::min_align_of::<T>()
    80002a30:	f02a                	sd	a0,32(sp)
    80002a32:	e12a                	sd	a0,128(sp)
                let align = mem::align_of::<T>();
    80002a34:	f0aa                	sd	a0,96(sp)
    80002a36:	a009                	j	80002a38 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h47d07dfc1131b1d6E+0x4a>
                let size = mem::size_of::<T>() * self.cap;
    80002a38:	a009                	j	80002a3a <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h47d07dfc1131b1d6E+0x4c>
    80002a3a:	7582                	ld	a1,32(sp)
    80002a3c:	7522                	ld	a0,40(sp)
    80002a3e:	6508                	ld	a0,8(a0)
    80002a40:	f4aa                	sd	a0,104(sp)
                let layout = Layout::from_size_align_unchecked(size, align);
    80002a42:	0001c097          	auipc	ra,0x1c
    80002a46:	f22080e7          	jalr	-222(ra) # 8001e964 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h7d187b5349095d20E>
    80002a4a:	862a                	mv	a2,a0
    80002a4c:	e832                	sd	a2,16(sp)
    80002a4e:	862e                	mv	a2,a1
    80002a50:	ec32                	sd	a2,24(sp)
    80002a52:	f8aa                	sd	a0,112(sp)
    80002a54:	fcae                	sd	a1,120(sp)
    80002a56:	a009                	j	80002a58 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h47d07dfc1131b1d6E+0x6a>
                Some((self.ptr.cast().into(), layout))
    80002a58:	7522                	ld	a0,40(sp)
    80002a5a:	6108                	ld	a0,0(a0)
    80002a5c:	00009097          	auipc	ra,0x9
    80002a60:	12a080e7          	jalr	298(ra) # 8000bb86 <_ZN4core3ptr6unique15Unique$LT$T$GT$4cast17h63879fc8651a3d59E>
    80002a64:	e42a                	sd	a0,8(sp)
    80002a66:	a009                	j	80002a68 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h47d07dfc1131b1d6E+0x7a>
    80002a68:	6522                	ld	a0,8(sp)
    80002a6a:	00009097          	auipc	ra,0x9
    80002a6e:	226080e7          	jalr	550(ra) # 8000bc90 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h6726b37a43d030b4E>
    80002a72:	e02a                	sd	a0,0(sp)
    80002a74:	a009                	j	80002a76 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h47d07dfc1131b1d6E+0x88>
    80002a76:	6502                	ld	a0,0(sp)
    80002a78:	75c2                	ld	a1,48(sp)
    80002a7a:	6642                	ld	a2,16(sp)
    80002a7c:	66e2                	ld	a3,24(sp)
    80002a7e:	e0aa                	sd	a0,64(sp)
    80002a80:	e4b2                	sd	a2,72(sp)
    80002a82:	e8b6                	sd	a3,80(sp)
    80002a84:	e994                	sd	a3,16(a1)
    80002a86:	e590                	sd	a2,8(a1)
    80002a88:	e188                	sd	a0,0(a1)
        if mem::size_of::<T>() == 0 || self.cap == 0 {
    80002a8a:	a009                	j	80002a8c <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h47d07dfc1131b1d6E+0x9e>
    }
    80002a8c:	60aa                	ld	ra,136(sp)
    80002a8e:	6149                	addi	sp,sp,144
    80002a90:	8082                	ret

Disassembly of section .text._ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6d7a8aee2de04232E:

0000000080002a92 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6d7a8aee2de04232E>:
    fn grow_amortized(&mut self, len: usize, additional: usize) -> Result<(), TryReserveError> {
    80002a92:	7125                	addi	sp,sp,-416
    80002a94:	ef06                	sd	ra,408(sp)
    80002a96:	ecb6                	sd	a3,88(sp)
    80002a98:	f0b2                	sd	a2,96(sp)
    80002a9a:	f4ae                	sd	a1,104(sp)
    80002a9c:	f8aa                	sd	a0,112(sp)
    80002a9e:	ea2e                	sd	a1,272(sp)
    80002aa0:	ee32                	sd	a2,280(sp)
    80002aa2:	f236                	sd	a3,288(sp)
        if mem::size_of::<T>() == 0 {
    80002aa4:	a009                	j	80002aa6 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6d7a8aee2de04232E+0x14>
    80002aa6:	4505                	li	a0,1
    80002aa8:	e919                	bnez	a0,80002abe <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6d7a8aee2de04232E+0x2c>
    80002aaa:	a009                	j	80002aac <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6d7a8aee2de04232E+0x1a>
    80002aac:	75c6                	ld	a1,112(sp)
    80002aae:	4501                	li	a0,0
            return Err(CapacityOverflow);
    80002ab0:	e12a                	sd	a0,128(sp)
    80002ab2:	7666                	ld	a2,120(sp)
    80002ab4:	e590                	sd	a2,8(a1)
    80002ab6:	e988                	sd	a0,16(a1)
    80002ab8:	4505                	li	a0,1
    80002aba:	e188                	sd	a0,0(a1)
    80002abc:	aa3d                	j	80002bfa <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6d7a8aee2de04232E+0x168>
        let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
    80002abe:	65e6                	ld	a1,88(sp)
    80002ac0:	7506                	ld	a0,96(sp)
    80002ac2:	0001b097          	auipc	ra,0x1b
    80002ac6:	508080e7          	jalr	1288(ra) # 8001dfca <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17he2495d381876d258E>
    80002aca:	e4aa                	sd	a0,72(sp)
    80002acc:	e8ae                	sd	a1,80(sp)
    80002ace:	a009                	j	80002ad0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6d7a8aee2de04232E+0x3e>
    80002ad0:	6646                	ld	a2,80(sp)
    80002ad2:	65a6                	ld	a1,72(sp)
    80002ad4:	4701                	li	a4,0
    80002ad6:	e1ba                	sd	a4,192(sp)
    80002ad8:	76ea                	ld	a3,184(sp)
    80002ada:	1108                	addi	a0,sp,160
    80002adc:	0000c097          	auipc	ra,0xc
    80002ae0:	d26080e7          	jalr	-730(ra) # 8000e802 <_ZN4core6option15Option$LT$T$GT$5ok_or17h7a4d5ef4770297f6E>
    80002ae4:	a009                	j	80002ae6 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6d7a8aee2de04232E+0x54>
    80002ae6:	0128                	addi	a0,sp,136
    80002ae8:	110c                	addi	a1,sp,160
    80002aea:	0000a097          	auipc	ra,0xa
    80002aee:	742080e7          	jalr	1858(ra) # 8000d22c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hda96dc8b8fa1398aE>
    80002af2:	a009                	j	80002af4 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6d7a8aee2de04232E+0x62>
    80002af4:	652a                	ld	a0,136(sp)
    80002af6:	4581                	li	a1,0
    80002af8:	00b50463          	beq	a0,a1,80002b00 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6d7a8aee2de04232E+0x6e>
    80002afc:	a009                	j	80002afe <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6d7a8aee2de04232E+0x6c>
    80002afe:	a005                	j	80002b1e <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6d7a8aee2de04232E+0x8c>
    80002b00:	7526                	ld	a0,104(sp)
    80002b02:	65ca                	ld	a1,144(sp)
    80002b04:	fe2e                	sd	a1,312(sp)
    80002b06:	e2ae                	sd	a1,320(sp)
        let cap = cmp::max(self.cap * 2, required_cap);
    80002b08:	6508                	ld	a0,8(a0)
    80002b0a:	0506                	slli	a0,a0,0x1
    80002b0c:	0001f097          	auipc	ra,0x1f
    80002b10:	3ce080e7          	jalr	974(ra) # 80021eda <_ZN4core3cmp3max17h3dc8da765fcdebd4E>
    80002b14:	85aa                	mv	a1,a0
    80002b16:	e0ae                	sd	a1,64(sp)
    80002b18:	e6aa                	sd	a0,328(sp)
    80002b1a:	a035                	j	80002b46 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6d7a8aee2de04232E+0xb4>
        let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
    80002b1c:	0000                	unimp
    80002b1e:	654a                	ld	a0,144(sp)
    80002b20:	65ea                	ld	a1,152(sp)
    80002b22:	f62a                	sd	a0,296(sp)
    80002b24:	fa2e                	sd	a1,304(sp)
    80002b26:	00013097          	auipc	ra,0x13
    80002b2a:	f42080e7          	jalr	-190(ra) # 80015a68 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h00cb4931a375be30E>
    80002b2e:	f82a                	sd	a0,48(sp)
    80002b30:	fc2e                	sd	a1,56(sp)
    80002b32:	a009                	j	80002b34 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6d7a8aee2de04232E+0xa2>
    80002b34:	7662                	ld	a2,56(sp)
    80002b36:	75c2                	ld	a1,48(sp)
    80002b38:	7546                	ld	a0,112(sp)
    80002b3a:	0000a097          	auipc	ra,0xa
    80002b3e:	596080e7          	jalr	1430(ra) # 8000d0d0 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h5998e5a20485011cE>
    80002b42:	a009                	j	80002b44 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6d7a8aee2de04232E+0xb2>
    80002b44:	a855                	j	80002bf8 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6d7a8aee2de04232E+0x166>
        let cap = cmp::max(Self::MIN_NON_ZERO_CAP, cap);
    80002b46:	6586                	ld	a1,64(sp)
    80002b48:	4521                	li	a0,8
    80002b4a:	0001f097          	auipc	ra,0x1f
    80002b4e:	390080e7          	jalr	912(ra) # 80021eda <_ZN4core3cmp3max17h3dc8da765fcdebd4E>
    80002b52:	85aa                	mv	a1,a0
    80002b54:	f42e                	sd	a1,40(sp)
    80002b56:	eaaa                	sd	a0,336(sp)
    80002b58:	a009                	j	80002b5a <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6d7a8aee2de04232E+0xc8>
        let new_layout = Layout::array::<T>(cap);
    80002b5a:	7522                	ld	a0,40(sp)
    80002b5c:	00006097          	auipc	ra,0x6
    80002b60:	abe080e7          	jalr	-1346(ra) # 8000861a <_ZN4core5alloc6layout6Layout5array17h33220460c7f786e0E>
    80002b64:	862a                	mv	a2,a0
    80002b66:	ec32                	sd	a2,24(sp)
    80002b68:	862e                	mv	a2,a1
    80002b6a:	f032                	sd	a2,32(sp)
    80002b6c:	eeaa                	sd	a0,344(sp)
    80002b6e:	f2ae                	sd	a1,352(sp)
    80002b70:	a009                	j	80002b72 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6d7a8aee2de04232E+0xe0>
        let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
    80002b72:	75a6                	ld	a1,104(sp)
    80002b74:	19a8                	addi	a0,sp,248
    80002b76:	00000097          	auipc	ra,0x0
    80002b7a:	e78080e7          	jalr	-392(ra) # 800029ee <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h47d07dfc1131b1d6E>
    80002b7e:	a009                	j	80002b80 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6d7a8aee2de04232E+0xee>
    80002b80:	7726                	ld	a4,104(sp)
    80002b82:	7602                	ld	a2,32(sp)
    80002b84:	65e2                	ld	a1,24(sp)
    80002b86:	1188                	addi	a0,sp,224
    80002b88:	19b4                	addi	a3,sp,248
    80002b8a:	00000097          	auipc	ra,0x0
    80002b8e:	b6e080e7          	jalr	-1170(ra) # 800026f8 <_ZN5alloc7raw_vec11finish_grow17h67df8fd3b618c18aE>
    80002b92:	a009                	j	80002b94 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6d7a8aee2de04232E+0x102>
    80002b94:	01a8                	addi	a0,sp,200
    80002b96:	118c                	addi	a1,sp,224
    80002b98:	0000a097          	auipc	ra,0xa
    80002b9c:	6dc080e7          	jalr	1756(ra) # 8000d274 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hf2a730b9c7ab248fE>
    80002ba0:	a009                	j	80002ba2 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6d7a8aee2de04232E+0x110>
    80002ba2:	652e                	ld	a0,200(sp)
    80002ba4:	4581                	li	a1,0
    80002ba6:	00b50463          	beq	a0,a1,80002bae <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6d7a8aee2de04232E+0x11c>
    80002baa:	a009                	j	80002bac <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6d7a8aee2de04232E+0x11a>
    80002bac:	a831                	j	80002bc8 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6d7a8aee2de04232E+0x136>
    80002bae:	7526                	ld	a0,104(sp)
    80002bb0:	65ce                	ld	a1,208(sp)
    80002bb2:	666e                	ld	a2,216(sp)
    80002bb4:	feae                	sd	a1,376(sp)
    80002bb6:	e332                	sd	a2,384(sp)
    80002bb8:	e72e                	sd	a1,392(sp)
    80002bba:	eb32                	sd	a2,400(sp)
        self.set_ptr(ptr);
    80002bbc:	00000097          	auipc	ra,0x0
    80002bc0:	164080e7          	jalr	356(ra) # 80002d20 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7set_ptr17hbcba753f42d1a54eE>
    80002bc4:	a035                	j	80002bf0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6d7a8aee2de04232E+0x15e>
        let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
    80002bc6:	0000                	unimp
    80002bc8:	654e                	ld	a0,208(sp)
    80002bca:	65ee                	ld	a1,216(sp)
    80002bcc:	f6aa                	sd	a0,360(sp)
    80002bce:	faae                	sd	a1,368(sp)
    80002bd0:	00013097          	auipc	ra,0x13
    80002bd4:	e98080e7          	jalr	-360(ra) # 80015a68 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h00cb4931a375be30E>
    80002bd8:	e42a                	sd	a0,8(sp)
    80002bda:	e82e                	sd	a1,16(sp)
    80002bdc:	a009                	j	80002bde <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6d7a8aee2de04232E+0x14c>
    80002bde:	6642                	ld	a2,16(sp)
    80002be0:	65a2                	ld	a1,8(sp)
    80002be2:	7546                	ld	a0,112(sp)
    80002be4:	0000a097          	auipc	ra,0xa
    80002be8:	4ec080e7          	jalr	1260(ra) # 8000d0d0 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h5998e5a20485011cE>
    80002bec:	a009                	j	80002bee <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6d7a8aee2de04232E+0x15c>
    80002bee:	a029                	j	80002bf8 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6d7a8aee2de04232E+0x166>
    80002bf0:	75c6                	ld	a1,112(sp)
    80002bf2:	4501                	li	a0,0
        Ok(())
    80002bf4:	e188                	sd	a0,0(a1)
    }
    80002bf6:	a011                	j	80002bfa <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6d7a8aee2de04232E+0x168>
    80002bf8:	a009                	j	80002bfa <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6d7a8aee2de04232E+0x168>
    80002bfa:	60fa                	ld	ra,408(sp)
    80002bfc:	611d                	addi	sp,sp,416
    80002bfe:	8082                	ret

Disassembly of section .text._ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$16with_capacity_in17hb06502444696164dE:

0000000080002c00 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$16with_capacity_in17hb06502444696164dE>:
    pub fn with_capacity_in(capacity: usize, alloc: A) -> Self {
    80002c00:	7179                	addi	sp,sp,-48
    80002c02:	f406                	sd	ra,40(sp)
    80002c04:	ec2a                	sd	a0,24(sp)
    80002c06:	4581                	li	a1,0
        Self::allocate_in(capacity, AllocInit::Uninitialized, alloc)
    80002c08:	00b10ba3          	sb	a1,23(sp)
    80002c0c:	00000097          	auipc	ra,0x0
    80002c10:	c5c080e7          	jalr	-932(ra) # 80002868 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11allocate_in17hb1a7e5211a2ca028E>
    80002c14:	e02a                	sd	a0,0(sp)
    80002c16:	e42e                	sd	a1,8(sp)
    80002c18:	a009                	j	80002c1a <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$16with_capacity_in17hb06502444696164dE+0x1a>
    }
    80002c1a:	65a2                	ld	a1,8(sp)
    80002c1c:	6502                	ld	a0,0(sp)
    80002c1e:	70a2                	ld	ra,40(sp)
    80002c20:	6145                	addi	sp,sp,48
    80002c22:	8082                	ret

Disassembly of section .text._ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$19capacity_from_bytes17hb8f80a7316d4a8fbE:

0000000080002c24 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$19capacity_from_bytes17hb8f80a7316d4a8fbE>:
    fn capacity_from_bytes(excess: usize) -> usize {
    80002c24:	1141                	addi	sp,sp,-16
    80002c26:	e02a                	sd	a0,0(sp)
    80002c28:	e42a                	sd	a0,8(sp)
        excess / mem::size_of::<T>()
    80002c2a:	a009                	j	80002c2c <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$19capacity_from_bytes17hb8f80a7316d4a8fbE+0x8>
    80002c2c:	4501                	li	a0,0
    80002c2e:	e509                	bnez	a0,80002c38 <.LBB8_4>
    80002c30:	a009                	j	80002c32 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$19capacity_from_bytes17hb8f80a7316d4a8fbE+0xe>
    }
    80002c32:	6502                	ld	a0,0(sp)
    80002c34:	0141                	addi	sp,sp,16
    80002c36:	8082                	ret

0000000080002c38 <.LBB8_4>:
        excess / mem::size_of::<T>()
    80002c38:	00023517          	auipc	a0,0x23
    80002c3c:	db850513          	addi	a0,a0,-584 # 800259f0 <str.0>

0000000080002c40 <.LBB8_5>:
    80002c40:	00023617          	auipc	a2,0x23
    80002c44:	d9860613          	addi	a2,a2,-616 # 800259d8 <.L__unnamed_1>
    80002c48:	45e5                	li	a1,25
    80002c4a:	0001f097          	auipc	ra,0x1f
    80002c4e:	62c080e7          	jalr	1580(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$23with_capacity_zeroed_in17hc0850ff3c2415cf8E:

0000000080002c54 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$23with_capacity_zeroed_in17hc0850ff3c2415cf8E>:
    pub fn with_capacity_zeroed_in(capacity: usize, alloc: A) -> Self {
    80002c54:	7179                	addi	sp,sp,-48
    80002c56:	f406                	sd	ra,40(sp)
    80002c58:	ec2a                	sd	a0,24(sp)
    80002c5a:	4585                	li	a1,1
        Self::allocate_in(capacity, AllocInit::Zeroed, alloc)
    80002c5c:	00b10ba3          	sb	a1,23(sp)
    80002c60:	00000097          	auipc	ra,0x0
    80002c64:	c08080e7          	jalr	-1016(ra) # 80002868 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11allocate_in17hb1a7e5211a2ca028E>
    80002c68:	e02a                	sd	a0,0(sp)
    80002c6a:	e42e                	sd	a1,8(sp)
    80002c6c:	a009                	j	80002c6e <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$23with_capacity_zeroed_in17hc0850ff3c2415cf8E+0x1a>
    }
    80002c6e:	65a2                	ld	a1,8(sp)
    80002c70:	6502                	ld	a0,0(sp)
    80002c72:	70a2                	ld	ra,40(sp)
    80002c74:	6145                	addi	sp,sp,48
    80002c76:	8082                	ret

Disassembly of section .text._ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17h887fa3437b1e26b7E:

0000000080002c78 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17h887fa3437b1e26b7E>:
    pub fn ptr(&self) -> *mut T {
    80002c78:	1101                	addi	sp,sp,-32
    80002c7a:	ec06                	sd	ra,24(sp)
    80002c7c:	e82a                	sd	a0,16(sp)
        self.ptr.as_ptr()
    80002c7e:	6108                	ld	a0,0(a0)
    80002c80:	00009097          	auipc	ra,0x9
    80002c84:	f9e080e7          	jalr	-98(ra) # 8000bc1e <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17hc428d38b809aa8c2E>
    80002c88:	e42a                	sd	a0,8(sp)
    80002c8a:	a009                	j	80002c8c <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17h887fa3437b1e26b7E+0x14>
    }
    80002c8c:	6522                	ld	a0,8(sp)
    80002c8e:	60e2                	ld	ra,24(sp)
    80002c90:	6105                	addi	sp,sp,32
    80002c92:	8082                	ret

Disassembly of section .text._ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$6new_in17hcde8bd186b8458cbE:

0000000080002c94 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$6new_in17hcde8bd186b8458cbE>:
    pub const fn new_in(alloc: A) -> Self {
    80002c94:	7179                	addi	sp,sp,-48
        Self { ptr: Unique::dangling(), cap: 0, alloc }
    80002c96:	f406                	sd	ra,40(sp)
    80002c98:	00009097          	auipc	ra,0x9
    80002c9c:	fd6080e7          	jalr	-42(ra) # 8000bc6e <_ZN4core3ptr6unique15Unique$LT$T$GT$8dangling17h9486dd80fcd97a92E>
    80002ca0:	e42a                	sd	a0,8(sp)
    80002ca2:	a009                	j	80002ca4 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$6new_in17hcde8bd186b8458cbE+0x10>
    80002ca4:	6522                	ld	a0,8(sp)
    80002ca6:	e82a                	sd	a0,16(sp)
    80002ca8:	4581                	li	a1,0
    80002caa:	ec2e                	sd	a1,24(sp)
    }
    80002cac:	70a2                	ld	ra,40(sp)
    80002cae:	6145                	addi	sp,sp,48
    80002cb0:	8082                	ret

Disassembly of section .text._ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve17hb5cb67f1b8f5bd01E:

0000000080002cb2 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve17hb5cb67f1b8f5bd01E>:
    pub fn reserve(&mut self, len: usize, additional: usize) {
    80002cb2:	715d                	addi	sp,sp,-80
    80002cb4:	e486                	sd	ra,72(sp)
    80002cb6:	e432                	sd	a2,8(sp)
    80002cb8:	e82e                	sd	a1,16(sp)
    80002cba:	ec2a                	sd	a0,24(sp)
    80002cbc:	f82a                	sd	a0,48(sp)
    80002cbe:	fc2e                	sd	a1,56(sp)
    80002cc0:	e0b2                	sd	a2,64(sp)
        if self.needs_to_grow(len, additional) {
    80002cc2:	00000097          	auipc	ra,0x0
    80002cc6:	cf6080e7          	jalr	-778(ra) # 800029b8 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$13needs_to_grow17ha08818b631ce0004E>
    80002cca:	f02a                	sd	a0,32(sp)
    80002ccc:	a009                	j	80002cce <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve17hb5cb67f1b8f5bd01E+0x1c>
    80002cce:	7502                	ld	a0,32(sp)
    80002cd0:	4581                	li	a1,0
    80002cd2:	00b50b63          	beq	a0,a1,80002ce8 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve17hb5cb67f1b8f5bd01E+0x36>
    80002cd6:	a009                	j	80002cd8 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve17hb5cb67f1b8f5bd01E+0x26>
            do_reserve_and_handle(self, len, additional);
    80002cd8:	6622                	ld	a2,8(sp)
    80002cda:	65c2                	ld	a1,16(sp)
    80002cdc:	6562                	ld	a0,24(sp)
    80002cde:	00000097          	auipc	ra,0x0
    80002ce2:	014080e7          	jalr	20(ra) # 80002cf2 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve21do_reserve_and_handle17h338385e566e859eeE>
    80002ce6:	a011                	j	80002cea <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve17hb5cb67f1b8f5bd01E+0x38>
        if self.needs_to_grow(len, additional) {
    80002ce8:	a011                	j	80002cec <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve17hb5cb67f1b8f5bd01E+0x3a>
    80002cea:	a009                	j	80002cec <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve17hb5cb67f1b8f5bd01E+0x3a>
    }
    80002cec:	60a6                	ld	ra,72(sp)
    80002cee:	6161                	addi	sp,sp,80
    80002cf0:	8082                	ret

Disassembly of section .text._ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve21do_reserve_and_handle17h338385e566e859eeE:

0000000080002cf2 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve21do_reserve_and_handle17h338385e566e859eeE>:
        fn do_reserve_and_handle<T, A: Allocator>(
    80002cf2:	7139                	addi	sp,sp,-64
    80002cf4:	fc06                	sd	ra,56(sp)
    80002cf6:	86b2                	mv	a3,a2
    80002cf8:	862e                	mv	a2,a1
    80002cfa:	85aa                	mv	a1,a0
    80002cfc:	f02e                	sd	a1,32(sp)
    80002cfe:	f432                	sd	a2,40(sp)
    80002d00:	f836                	sd	a3,48(sp)
    80002d02:	0028                	addi	a0,sp,8
            handle_reserve(slf.grow_amortized(len, additional));
    80002d04:	00000097          	auipc	ra,0x0
    80002d08:	d8e080e7          	jalr	-626(ra) # 80002a92 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6d7a8aee2de04232E>
    80002d0c:	a009                	j	80002d0e <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve21do_reserve_and_handle17h338385e566e859eeE+0x1c>
    80002d0e:	0028                	addi	a0,sp,8
    80002d10:	0001c097          	auipc	ra,0x1c
    80002d14:	81c080e7          	jalr	-2020(ra) # 8001e52c <_ZN5alloc7raw_vec14handle_reserve17h9818f7956a53f3d6E>
    80002d18:	a009                	j	80002d1a <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve21do_reserve_and_handle17h338385e566e859eeE+0x28>
        }
    80002d1a:	70e2                	ld	ra,56(sp)
    80002d1c:	6121                	addi	sp,sp,64
    80002d1e:	8082                	ret

Disassembly of section .text._ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7set_ptr17hbcba753f42d1a54eE:

0000000080002d20 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7set_ptr17hbcba753f42d1a54eE>:
    fn set_ptr(&mut self, ptr: NonNull<[u8]>) {
    80002d20:	711d                	addi	sp,sp,-96
    80002d22:	ec86                	sd	ra,88(sp)
    80002d24:	f032                	sd	a2,32(sp)
    80002d26:	862e                	mv	a2,a1
    80002d28:	7582                	ld	a1,32(sp)
    80002d2a:	f432                	sd	a2,40(sp)
    80002d2c:	862a                	mv	a2,a0
    80002d2e:	7522                	ld	a0,40(sp)
    80002d30:	f832                	sd	a2,48(sp)
    80002d32:	e0b2                	sd	a2,64(sp)
    80002d34:	e4aa                	sd	a0,72(sp)
    80002d36:	e8ae                	sd	a1,80(sp)
        self.ptr = unsafe { Unique::new_unchecked(ptr.cast().as_ptr()) };
    80002d38:	0000c097          	auipc	ra,0xc
    80002d3c:	744080e7          	jalr	1860(ra) # 8000f47c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17he3c6d28f0e68e811E>
    80002d40:	fc2a                	sd	a0,56(sp)
    80002d42:	a009                	j	80002d44 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7set_ptr17hbcba753f42d1a54eE+0x24>
    80002d44:	7562                	ld	a0,56(sp)
    80002d46:	0000c097          	auipc	ra,0xc
    80002d4a:	7b6080e7          	jalr	1974(ra) # 8000f4fc <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h729713db2b300d39E>
    80002d4e:	ec2a                	sd	a0,24(sp)
    80002d50:	a009                	j	80002d52 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7set_ptr17hbcba753f42d1a54eE+0x32>
    80002d52:	6562                	ld	a0,24(sp)
    80002d54:	00009097          	auipc	ra,0x9
    80002d58:	dba080e7          	jalr	-582(ra) # 8000bb0e <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17h620617f59cddd065E>
    80002d5c:	e82a                	sd	a0,16(sp)
    80002d5e:	a009                	j	80002d60 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7set_ptr17hbcba753f42d1a54eE+0x40>
    80002d60:	7582                	ld	a1,32(sp)
    80002d62:	7522                	ld	a0,40(sp)
    80002d64:	6642                	ld	a2,16(sp)
    80002d66:	76c2                	ld	a3,48(sp)
    80002d68:	e290                	sd	a2,0(a3)
        self.cap = Self::capacity_from_bytes(ptr.len());
    80002d6a:	0000d097          	auipc	ra,0xd
    80002d6e:	8aa080e7          	jalr	-1878(ra) # 8000f614 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$3len17h17d848b65404492bE>
    80002d72:	e42a                	sd	a0,8(sp)
    80002d74:	a009                	j	80002d76 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7set_ptr17hbcba753f42d1a54eE+0x56>
    80002d76:	6522                	ld	a0,8(sp)
    80002d78:	00000097          	auipc	ra,0x0
    80002d7c:	eac080e7          	jalr	-340(ra) # 80002c24 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$19capacity_from_bytes17hb8f80a7316d4a8fbE>
    80002d80:	e02a                	sd	a0,0(sp)
    80002d82:	a009                	j	80002d84 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7set_ptr17hbcba753f42d1a54eE+0x64>
    80002d84:	6502                	ld	a0,0(sp)
    80002d86:	75c2                	ld	a1,48(sp)
    80002d88:	e588                	sd	a0,8(a1)
    }
    80002d8a:	60e6                	ld	ra,88(sp)
    80002d8c:	6125                	addi	sp,sp,96
    80002d8e:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register5clint10read_mtime17h47cb1a320cb6e740E:

0000000080002d90 <_ZN6kernel4arch5riscv8register5clint10read_mtime17h47cb1a320cb6e740E>:
use crate::arch::riscv::qemu::layout::{CLINT_MTIME, CLINT_MTIMECMP, CLINT};

// core local interruptor (CLINT), which contains the timer.

#[inline]
unsafe fn read_mtime() -> u64 {
    80002d90:	1101                	addi	sp,sp,-32
    80002d92:	ec06                	sd	ra,24(sp)
    80002d94:	0200c537          	lui	a0,0x200c
    80002d98:	3561                	addiw	a0,a0,-8
    ptr::read_volatile(Into::<usize>::into(CLINT_MTIME) as *const u64)
    80002d9a:	00009097          	auipc	ra,0x9
    80002d9e:	ce4080e7          	jalr	-796(ra) # 8000ba7e <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hbecc82c6a2b59487E>
    80002da2:	e82a                	sd	a0,16(sp)
    80002da4:	a009                	j	80002da6 <_ZN6kernel4arch5riscv8register5clint10read_mtime17h47cb1a320cb6e740E+0x16>
    80002da6:	6542                	ld	a0,16(sp)
    80002da8:	00015097          	auipc	ra,0x15
    80002dac:	7e0080e7          	jalr	2016(ra) # 80018588 <_ZN4core3ptr13read_volatile17h53ed030574802bd4E>
    80002db0:	e42a                	sd	a0,8(sp)
    80002db2:	a009                	j	80002db4 <_ZN6kernel4arch5riscv8register5clint10read_mtime17h47cb1a320cb6e740E+0x24>
}
    80002db4:	6522                	ld	a0,8(sp)
    80002db6:	60e2                	ld	ra,24(sp)
    80002db8:	6105                	addi	sp,sp,32
    80002dba:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register5clint14write_mtimecmp17h37dad6df38dd09a3E:

0000000080002dbc <_ZN6kernel4arch5riscv8register5clint14write_mtimecmp17h37dad6df38dd09a3E>:

unsafe fn write_mtimecmp(mhartid:usize, value: u64) {
    80002dbc:	715d                	addi	sp,sp,-80
    80002dbe:	e486                	sd	ra,72(sp)
    80002dc0:	ec2e                	sd	a1,24(sp)
    80002dc2:	f02a                	sd	a0,32(sp)
    80002dc4:	f82a                	sd	a0,48(sp)
    80002dc6:	fc2e                	sd	a1,56(sp)
    80002dc8:	02004537          	lui	a0,0x2004
    let offset = Into::<usize>::into(CLINT_MTIMECMP) + 8*mhartid;
    80002dcc:	00009097          	auipc	ra,0x9
    80002dd0:	cb2080e7          	jalr	-846(ra) # 8000ba7e <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hbecc82c6a2b59487E>
    80002dd4:	f42a                	sd	a0,40(sp)
    80002dd6:	a009                	j	80002dd8 <_ZN6kernel4arch5riscv8register5clint14write_mtimecmp17h37dad6df38dd09a3E+0x1c>
    80002dd8:	7582                	ld	a1,32(sp)
    80002dda:	4505                	li	a0,1
    80002ddc:	1576                	slli	a0,a0,0x3d
    80002dde:	157d                	addi	a0,a0,-1
    80002de0:	8d6d                	and	a0,a0,a1
    80002de2:	00359613          	slli	a2,a1,0x3
    80002de6:	e832                	sd	a2,16(sp)
    80002de8:	02b51563          	bne	a0,a1,80002e12 <.LBB1_7>
    80002dec:	a009                	j	80002dee <_ZN6kernel4arch5riscv8register5clint14write_mtimecmp17h37dad6df38dd09a3E+0x32>
    80002dee:	75a2                	ld	a1,40(sp)
    80002df0:	6542                	ld	a0,16(sp)
    80002df2:	952e                	add	a0,a0,a1
    80002df4:	e42a                	sd	a0,8(sp)
    80002df6:	02b56d63          	bltu	a0,a1,80002e30 <.LBB1_9>
    80002dfa:	a009                	j	80002dfc <_ZN6kernel4arch5riscv8register5clint14write_mtimecmp17h37dad6df38dd09a3E+0x40>
    80002dfc:	65e2                	ld	a1,24(sp)
    80002dfe:	6522                	ld	a0,8(sp)
    80002e00:	e0aa                	sd	a0,64(sp)
    ptr::write_volatile(offset as *mut u64, value);
    80002e02:	00015097          	auipc	ra,0x15
    80002e06:	7a6080e7          	jalr	1958(ra) # 800185a8 <_ZN4core3ptr14write_volatile17h935b49f1a63f6714E>
    80002e0a:	a009                	j	80002e0c <_ZN6kernel4arch5riscv8register5clint14write_mtimecmp17h37dad6df38dd09a3E+0x50>
}
    80002e0c:	60a6                	ld	ra,72(sp)
    80002e0e:	6161                	addi	sp,sp,80
    80002e10:	8082                	ret

0000000080002e12 <.LBB1_7>:
    let offset = Into::<usize>::into(CLINT_MTIMECMP) + 8*mhartid;
    80002e12:	00023517          	auipc	a0,0x23
    80002e16:	c1e50513          	addi	a0,a0,-994 # 80025a30 <str.0>

0000000080002e1a <.LBB1_8>:
    80002e1a:	00023617          	auipc	a2,0x23
    80002e1e:	bf660613          	addi	a2,a2,-1034 # 80025a10 <.L__unnamed_1>
    80002e22:	02100593          	li	a1,33
    80002e26:	0001f097          	auipc	ra,0x1f
    80002e2a:	450080e7          	jalr	1104(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080002e30 <.LBB1_9>:
    80002e30:	00023517          	auipc	a0,0x23
    80002e34:	c4050513          	addi	a0,a0,-960 # 80025a70 <str.1>

0000000080002e38 <.LBB1_10>:
    80002e38:	00023617          	auipc	a2,0x23
    80002e3c:	c2060613          	addi	a2,a2,-992 # 80025a58 <.L__unnamed_2>
    80002e40:	45f1                	li	a1,28
    80002e42:	0001f097          	auipc	ra,0x1f
    80002e46:	434080e7          	jalr	1076(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel4arch5riscv8register5clint12add_mtimecmp17hca3030d0d062e6f9E:

0000000080002e4c <_ZN6kernel4arch5riscv8register5clint12add_mtimecmp17hca3030d0d062e6f9E>:

pub unsafe fn add_mtimecmp(mhartid:usize, interval:u64){
    80002e4c:	7139                	addi	sp,sp,-64
    80002e4e:	fc06                	sd	ra,56(sp)
    80002e50:	e42e                	sd	a1,8(sp)
    80002e52:	e82a                	sd	a0,16(sp)
    80002e54:	f02a                	sd	a0,32(sp)
    80002e56:	f42e                	sd	a1,40(sp)
    let value = read_mtime();
    80002e58:	00000097          	auipc	ra,0x0
    80002e5c:	f38080e7          	jalr	-200(ra) # 80002d90 <_ZN6kernel4arch5riscv8register5clint10read_mtime17h47cb1a320cb6e740E>
    80002e60:	85aa                	mv	a1,a0
    80002e62:	ec2e                	sd	a1,24(sp)
    80002e64:	f82a                	sd	a0,48(sp)
    80002e66:	a009                	j	80002e68 <_ZN6kernel4arch5riscv8register5clint12add_mtimecmp17hca3030d0d062e6f9E+0x1c>
    write_mtimecmp(mhartid, value+interval);
    80002e68:	65e2                	ld	a1,24(sp)
    80002e6a:	6522                	ld	a0,8(sp)
    80002e6c:	952e                	add	a0,a0,a1
    80002e6e:	e02a                	sd	a0,0(sp)
    80002e70:	00b56d63          	bltu	a0,a1,80002e8a <.LBB2_5>
    80002e74:	a009                	j	80002e76 <_ZN6kernel4arch5riscv8register5clint12add_mtimecmp17hca3030d0d062e6f9E+0x2a>
    80002e76:	6582                	ld	a1,0(sp)
    80002e78:	6542                	ld	a0,16(sp)
    80002e7a:	00000097          	auipc	ra,0x0
    80002e7e:	f42080e7          	jalr	-190(ra) # 80002dbc <_ZN6kernel4arch5riscv8register5clint14write_mtimecmp17h37dad6df38dd09a3E>
    80002e82:	a009                	j	80002e84 <_ZN6kernel4arch5riscv8register5clint12add_mtimecmp17hca3030d0d062e6f9E+0x38>
}
    80002e84:	70e2                	ld	ra,56(sp)
    80002e86:	6121                	addi	sp,sp,64
    80002e88:	8082                	ret

0000000080002e8a <.LBB2_5>:
    write_mtimecmp(mhartid, value+interval);
    80002e8a:	00023517          	auipc	a0,0x23
    80002e8e:	be650513          	addi	a0,a0,-1050 # 80025a70 <str.1>

0000000080002e92 <.LBB2_6>:
    80002e92:	00023617          	auipc	a2,0x23
    80002e96:	bfe60613          	addi	a2,a2,-1026 # 80025a90 <.L__unnamed_3>
    80002e9a:	45f1                	li	a1,28
    80002e9c:	0001f097          	auipc	ra,0x1f
    80002ea0:	3da080e7          	jalr	986(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel4arch5riscv8register5clint13count_mtiecmp17h29e162b64ddfbfccE:

0000000080002ea6 <_ZN6kernel4arch5riscv8register5clint13count_mtiecmp17h29e162b64ddfbfccE>:

pub fn count_mtiecmp(mhartid:usize) -> usize{
    80002ea6:	7139                	addi	sp,sp,-64
    80002ea8:	fc06                	sd	ra,56(sp)
    80002eaa:	ec2a                	sd	a0,24(sp)
    80002eac:	f42a                	sd	a0,40(sp)
    80002eae:	02000537          	lui	a0,0x2000
    let ret:usize;
    ret = Into::<usize>::into(CLINT) + 8*mhartid + 0x4000;
    80002eb2:	00009097          	auipc	ra,0x9
    80002eb6:	bcc080e7          	jalr	-1076(ra) # 8000ba7e <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hbecc82c6a2b59487E>
    80002eba:	f02a                	sd	a0,32(sp)
    80002ebc:	a009                	j	80002ebe <_ZN6kernel4arch5riscv8register5clint13count_mtiecmp17h29e162b64ddfbfccE+0x18>
    80002ebe:	65e2                	ld	a1,24(sp)
    80002ec0:	4505                	li	a0,1
    80002ec2:	1576                	slli	a0,a0,0x3d
    80002ec4:	157d                	addi	a0,a0,-1
    80002ec6:	8d6d                	and	a0,a0,a1
    80002ec8:	00359613          	slli	a2,a1,0x3
    80002ecc:	e832                	sd	a2,16(sp)
    80002ece:	02b51663          	bne	a0,a1,80002efa <.LBB3_8>
    80002ed2:	a009                	j	80002ed4 <_ZN6kernel4arch5riscv8register5clint13count_mtiecmp17h29e162b64ddfbfccE+0x2e>
    80002ed4:	7582                	ld	a1,32(sp)
    80002ed6:	6542                	ld	a0,16(sp)
    80002ed8:	952e                	add	a0,a0,a1
    80002eda:	e42a                	sd	a0,8(sp)
    80002edc:	02b56e63          	bltu	a0,a1,80002f18 <.LBB3_10>
    80002ee0:	a009                	j	80002ee2 <_ZN6kernel4arch5riscv8register5clint13count_mtiecmp17h29e162b64ddfbfccE+0x3c>
    80002ee2:	65a2                	ld	a1,8(sp)
    80002ee4:	6511                	lui	a0,0x4
    80002ee6:	952e                	add	a0,a0,a1
    80002ee8:	e02a                	sd	a0,0(sp)
    80002eea:	04b56563          	bltu	a0,a1,80002f34 <.LBB3_12>
    80002eee:	a009                	j	80002ef0 <_ZN6kernel4arch5riscv8register5clint13count_mtiecmp17h29e162b64ddfbfccE+0x4a>
    80002ef0:	6502                	ld	a0,0(sp)
    80002ef2:	f82a                	sd	a0,48(sp)
    ret
}
    80002ef4:	70e2                	ld	ra,56(sp)
    80002ef6:	6121                	addi	sp,sp,64
    80002ef8:	8082                	ret

0000000080002efa <.LBB3_8>:
    ret = Into::<usize>::into(CLINT) + 8*mhartid + 0x4000;
    80002efa:	00023517          	auipc	a0,0x23
    80002efe:	b3650513          	addi	a0,a0,-1226 # 80025a30 <str.0>

0000000080002f02 <.LBB3_9>:
    80002f02:	00023617          	auipc	a2,0x23
    80002f06:	ba660613          	addi	a2,a2,-1114 # 80025aa8 <.L__unnamed_4>
    80002f0a:	02100593          	li	a1,33
    80002f0e:	0001f097          	auipc	ra,0x1f
    80002f12:	368080e7          	jalr	872(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080002f18 <.LBB3_10>:
    80002f18:	00023517          	auipc	a0,0x23
    80002f1c:	b5850513          	addi	a0,a0,-1192 # 80025a70 <str.1>

0000000080002f20 <.LBB3_11>:
    80002f20:	00023617          	auipc	a2,0x23
    80002f24:	ba060613          	addi	a2,a2,-1120 # 80025ac0 <.L__unnamed_5>
    80002f28:	45f1                	li	a1,28
    80002f2a:	0001f097          	auipc	ra,0x1f
    80002f2e:	34c080e7          	jalr	844(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080002f34 <.LBB3_12>:
    80002f34:	00023517          	auipc	a0,0x23
    80002f38:	b3c50513          	addi	a0,a0,-1220 # 80025a70 <str.1>

0000000080002f3c <.LBB3_13>:
    80002f3c:	00023617          	auipc	a2,0x23
    80002f40:	b8460613          	addi	a2,a2,-1148 # 80025ac0 <.L__unnamed_5>
    80002f44:	45f1                	li	a1,28
    80002f46:	0001f097          	auipc	ra,0x1f
    80002f4a:	330080e7          	jalr	816(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6as_ref17he2102635824876d2E:

0000000080002f50 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6as_ref17he2102635824876d2E>:
    ///     println!("We got back the value: {}!", val_back);
    /// }
    /// ```
    #[stable(feature = "ptr_as_ref", since = "1.9.0")]
    #[inline]
    pub unsafe fn as_ref<'a>(self) -> Option<&'a T> {
    80002f50:	7179                	addi	sp,sp,-48
    80002f52:	f406                	sd	ra,40(sp)
    80002f54:	e42a                	sd	a0,8(sp)
    80002f56:	f02a                	sd	a0,32(sp)
        // SAFETY: the caller must guarantee that `self` is valid
        // for a reference if it isn't null.
        if self.is_null() { None } else { unsafe { Some(&*self) } }
    80002f58:	00000097          	auipc	ra,0x0
    80002f5c:	02a080e7          	jalr	42(ra) # 80002f82 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hb09234d1bdc9d8a1E>
    80002f60:	e82a                	sd	a0,16(sp)
    80002f62:	a009                	j	80002f64 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6as_ref17he2102635824876d2E+0x14>
    80002f64:	6542                	ld	a0,16(sp)
    80002f66:	4581                	li	a1,0
    80002f68:	00b50663          	beq	a0,a1,80002f74 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6as_ref17he2102635824876d2E+0x24>
    80002f6c:	a009                	j	80002f6e <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6as_ref17he2102635824876d2E+0x1e>
    80002f6e:	4501                	li	a0,0
    80002f70:	ec2a                	sd	a0,24(sp)
    80002f72:	a021                	j	80002f7a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6as_ref17he2102635824876d2E+0x2a>
    80002f74:	6522                	ld	a0,8(sp)
    80002f76:	ec2a                	sd	a0,24(sp)
    80002f78:	a009                	j	80002f7a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6as_ref17he2102635824876d2E+0x2a>
    }
    80002f7a:	6562                	ld	a0,24(sp)
    80002f7c:	70a2                	ld	ra,40(sp)
    80002f7e:	6145                	addi	sp,sp,48
    80002f80:	8082                	ret

Disassembly of section .text._ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hb09234d1bdc9d8a1E:

0000000080002f82 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hb09234d1bdc9d8a1E>:
    pub const fn is_null(self) -> bool {
    80002f82:	1101                	addi	sp,sp,-32
    80002f84:	ec06                	sd	ra,24(sp)
    80002f86:	e82a                	sd	a0,16(sp)
        (self as *const u8).guaranteed_eq(null())
    80002f88:	e42a                	sd	a0,8(sp)
    80002f8a:	a009                	j	80002f8c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hb09234d1bdc9d8a1E+0xa>
    80002f8c:	6522                	ld	a0,8(sp)
    80002f8e:	4581                	li	a1,0
    80002f90:	0001f097          	auipc	ra,0x1f
    80002f94:	0c6080e7          	jalr	198(ra) # 80022056 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$13guaranteed_eq17h0ce622e77376dc6cE>
    80002f98:	e02a                	sd	a0,0(sp)
    80002f9a:	a009                	j	80002f9c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hb09234d1bdc9d8a1E+0x1a>
    }
    80002f9c:	6502                	ld	a0,0(sp)
    80002f9e:	60e2                	ld	ra,24(sp)
    80002fa0:	6105                	addi	sp,sp,32
    80002fa2:	8082                	ret

Disassembly of section .text._ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE:

0000000080002fa4 <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE>:
        }
    }

    /// Init the bcache.
    /// Should only be called once when the kernel inits itself.
    pub fn binit(&self) {
    80002fa4:	7125                	addi	sp,sp,-416
    80002fa6:	ef06                	sd	ra,408(sp)
    80002fa8:	faaa                	sd	a0,368(sp)
        let mut ctrl = self.ctrl.acquire();
    80002faa:	0000d097          	auipc	ra,0xd
    80002fae:	5c4080e7          	jalr	1476(ra) # 8001056e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h4c9081acf22588feE>
    80002fb2:	f22a                	sd	a0,288(sp)
    80002fb4:	a009                	j	80002fb6 <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x12>
    80002fb6:	1208                	addi	a0,sp,288
        let len = ctrl.inner.len();
    80002fb8:	0000e097          	auipc	ra,0xe
    80002fbc:	6a0080e7          	jalr	1696(ra) # 80011658 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc8a5a3c7c4ffa947E>
    80002fc0:	ee2a                	sd	a0,280(sp)
    80002fc2:	a009                	j	80002fc4 <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x20>
    80002fc4:	6572                	ld	a0,280(sp)
    80002fc6:	45f9                	li	a1,30
    80002fc8:	00002097          	auipc	ra,0x2
    80002fcc:	6ce080e7          	jalr	1742(ra) # 80005696 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h0b5a743241a7cbfaE>
    80002fd0:	85aa                	mv	a1,a0
    80002fd2:	ea2e                	sd	a1,272(sp)
    80002fd4:	feaa                	sd	a0,376(sp)
    80002fd6:	a009                	j	80002fd8 <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x34>
    80002fd8:	1208                	addi	a0,sp,288

        // init the head and tail of the lru list
        ctrl.head = &mut ctrl.inner[0];
    80002fda:	0000e097          	auipc	ra,0xe
    80002fde:	75c080e7          	jalr	1884(ra) # 80011736 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7fbd4bc7b8273f3cE>
    80002fe2:	e62a                	sd	a0,264(sp)
    80002fe4:	a009                	j	80002fe6 <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x42>
    80002fe6:	6532                	ld	a0,264(sp)
    80002fe8:	fdaa                	sd	a0,248(sp)
    80002fea:	1208                	addi	a0,sp,288
    80002fec:	0000e097          	auipc	ra,0xe
    80002ff0:	74a080e7          	jalr	1866(ra) # 80011736 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7fbd4bc7b8273f3cE>
    80002ff4:	e22a                	sd	a0,256(sp)
    80002ff6:	a009                	j	80002ff8 <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x54>
    80002ff8:	756e                	ld	a0,248(sp)
    80002ffa:	6592                	ld	a1,256(sp)
    80002ffc:	4aa5b823          	sd	a0,1200(a1)
    80003000:	1208                	addi	a0,sp,288
        ctrl.tail = &mut ctrl.inner[len-1];
    80003002:	0000e097          	auipc	ra,0xe
    80003006:	734080e7          	jalr	1844(ra) # 80011736 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7fbd4bc7b8273f3cE>
    8000300a:	f9aa                	sd	a0,240(sp)
    8000300c:	a009                	j	8000300e <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x6a>
    8000300e:	6552                	ld	a0,272(sp)
    80003010:	fff50593          	addi	a1,a0,-1
    80003014:	f5ae                	sd	a1,232(sp)
    80003016:	28b56263          	bltu	a0,a1,8000329a <.LBB0_62>
    8000301a:	a009                	j	8000301c <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x78>
    8000301c:	75ae                	ld	a1,232(sp)
    8000301e:	4575                	li	a0,29
    80003020:	28b56c63          	bltu	a0,a1,800032b8 <.LBB0_63+0x16>
    80003024:	a009                	j	80003026 <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x82>
    80003026:	754e                	ld	a0,240(sp)
    80003028:	75ae                	ld	a1,232(sp)
    8000302a:	02800613          	li	a2,40
    8000302e:	02c585b3          	mul	a1,a1,a2
    80003032:	952e                	add	a0,a0,a1
    80003034:	edaa                	sd	a0,216(sp)
    80003036:	1208                	addi	a0,sp,288
    80003038:	0000e097          	auipc	ra,0xe
    8000303c:	6fe080e7          	jalr	1790(ra) # 80011736 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7fbd4bc7b8273f3cE>
    80003040:	f1aa                	sd	a0,224(sp)
    80003042:	a009                	j	80003044 <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0xa0>
    80003044:	656e                	ld	a0,216(sp)
    80003046:	758e                	ld	a1,224(sp)
    80003048:	4aa5bc23          	sd	a0,1208(a1)

        // init prev and next field
        ctrl.inner[0].prev = ptr::null_mut();
    8000304c:	a009                	j	8000304e <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0xaa>
    8000304e:	1208                	addi	a0,sp,288
    80003050:	0000e097          	auipc	ra,0xe
    80003054:	6e6080e7          	jalr	1766(ra) # 80011736 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7fbd4bc7b8273f3cE>
    80003058:	e9aa                	sd	a0,208(sp)
    8000305a:	a009                	j	8000305c <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0xb8>
    8000305c:	65ce                	ld	a1,208(sp)
    8000305e:	4501                	li	a0,0
    80003060:	e188                	sd	a0,0(a1)
    80003062:	1208                	addi	a0,sp,288
        ctrl.inner[0].next = &mut ctrl.inner[1];
    80003064:	0000e097          	auipc	ra,0xe
    80003068:	6d2080e7          	jalr	1746(ra) # 80011736 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7fbd4bc7b8273f3cE>
    8000306c:	e5aa                	sd	a0,200(sp)
    8000306e:	a009                	j	80003070 <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0xcc>
    80003070:	652e                	ld	a0,200(sp)
    80003072:	02850513          	addi	a0,a0,40
    80003076:	fd2a                	sd	a0,184(sp)
    80003078:	1208                	addi	a0,sp,288
    8000307a:	0000e097          	auipc	ra,0xe
    8000307e:	6bc080e7          	jalr	1724(ra) # 80011736 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7fbd4bc7b8273f3cE>
    80003082:	e1aa                	sd	a0,192(sp)
    80003084:	a009                	j	80003086 <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0xe2>
    80003086:	756a                	ld	a0,184(sp)
    80003088:	658e                	ld	a1,192(sp)
    8000308a:	e588                	sd	a0,8(a1)
    8000308c:	1208                	addi	a0,sp,288
        ctrl.inner[len-1].prev = &mut ctrl.inner[len-2];
    8000308e:	0000e097          	auipc	ra,0xe
    80003092:	6a8080e7          	jalr	1704(ra) # 80011736 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7fbd4bc7b8273f3cE>
    80003096:	f92a                	sd	a0,176(sp)
    80003098:	a009                	j	8000309a <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0xf6>
    8000309a:	6552                	ld	a0,272(sp)
    8000309c:	ffe50593          	addi	a1,a0,-2
    800030a0:	f52e                	sd	a1,168(sp)
    800030a2:	22b56663          	bltu	a0,a1,800032ce <.LBB0_65>
    800030a6:	a009                	j	800030a8 <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x104>
    800030a8:	75aa                	ld	a1,168(sp)
    800030aa:	4575                	li	a0,29
    800030ac:	24b56063          	bltu	a0,a1,800032ec <.LBB0_66+0x16>
    800030b0:	a009                	j	800030b2 <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x10e>
    800030b2:	754a                	ld	a0,176(sp)
    800030b4:	75aa                	ld	a1,168(sp)
    800030b6:	02800613          	li	a2,40
    800030ba:	02c585b3          	mul	a1,a1,a2
    800030be:	952e                	add	a0,a0,a1
    800030c0:	ed2a                	sd	a0,152(sp)
    800030c2:	1208                	addi	a0,sp,288
    800030c4:	0000e097          	auipc	ra,0xe
    800030c8:	672080e7          	jalr	1650(ra) # 80011736 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7fbd4bc7b8273f3cE>
    800030cc:	f12a                	sd	a0,160(sp)
    800030ce:	a009                	j	800030d0 <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x12c>
    800030d0:	6552                	ld	a0,272(sp)
    800030d2:	fff50593          	addi	a1,a0,-1
    800030d6:	e92e                	sd	a1,144(sp)
    800030d8:	22b56563          	bltu	a0,a1,80003302 <.LBB0_68>
    800030dc:	a009                	j	800030de <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x13a>
    800030de:	65ca                	ld	a1,144(sp)
    800030e0:	4575                	li	a0,29
    800030e2:	22b56f63          	bltu	a0,a1,80003320 <.LBB0_69+0x16>
    800030e6:	a009                	j	800030e8 <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x144>
    800030e8:	656a                	ld	a0,152(sp)
    800030ea:	758a                	ld	a1,160(sp)
    800030ec:	664a                	ld	a2,144(sp)
    800030ee:	02800693          	li	a3,40
    800030f2:	02d60633          	mul	a2,a2,a3
    800030f6:	95b2                	add	a1,a1,a2
    800030f8:	e188                	sd	a0,0(a1)
        ctrl.inner[len-1].next = ptr::null_mut();
    800030fa:	a009                	j	800030fc <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x158>
    800030fc:	1208                	addi	a0,sp,288
    800030fe:	0000e097          	auipc	ra,0xe
    80003102:	638080e7          	jalr	1592(ra) # 80011736 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7fbd4bc7b8273f3cE>
    80003106:	e52a                	sd	a0,136(sp)
    80003108:	a009                	j	8000310a <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x166>
    8000310a:	6552                	ld	a0,272(sp)
    8000310c:	fff50593          	addi	a1,a0,-1
    80003110:	e12e                	sd	a1,128(sp)
    80003112:	22b56263          	bltu	a0,a1,80003336 <.LBB0_71>
    80003116:	a009                	j	80003118 <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x174>
    80003118:	658a                	ld	a1,128(sp)
    8000311a:	4575                	li	a0,29
    8000311c:	22b56c63          	bltu	a0,a1,80003354 <.LBB0_72+0x16>
    80003120:	a009                	j	80003122 <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x17e>
    80003122:	6552                	ld	a0,272(sp)
    80003124:	65aa                	ld	a1,136(sp)
    80003126:	660a                	ld	a2,128(sp)
    80003128:	02800693          	li	a3,40
    8000312c:	02d60633          	mul	a2,a2,a3
    80003130:	962e                	add	a2,a2,a1
    80003132:	4581                	li	a1,0
    80003134:	e60c                	sd	a1,8(a2)
        for i in 1..(len-1) {
    80003136:	fff50593          	addi	a1,a0,-1
    8000313a:	fcae                	sd	a1,120(sp)
    8000313c:	22b56763          	bltu	a0,a1,8000336a <.LBB0_74>
    80003140:	a009                	j	80003142 <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x19e>
    80003142:	75e6                	ld	a1,120(sp)
    80003144:	4505                	li	a0,1
    80003146:	f62a                	sd	a0,296(sp)
    80003148:	fa2e                	sd	a1,304(sp)
    8000314a:	0001c097          	auipc	ra,0x1c
    8000314e:	7f8080e7          	jalr	2040(ra) # 8001f942 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he0a8d93712e5493bE>
    80003152:	f4aa                	sd	a0,104(sp)
    80003154:	f8ae                	sd	a1,112(sp)
    80003156:	a009                	j	80003158 <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x1b4>
    80003158:	7546                	ld	a0,112(sp)
    8000315a:	75a6                	ld	a1,104(sp)
    8000315c:	fe2e                	sd	a1,312(sp)
    8000315e:	e2aa                	sd	a0,320(sp)
    80003160:	a009                	j	80003162 <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x1be>
    80003162:	1a28                	addi	a0,sp,312
    80003164:	0001c097          	auipc	ra,0x1c
    80003168:	770080e7          	jalr	1904(ra) # 8001f8d4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE>
    8000316c:	e6aa                	sd	a0,328(sp)
    8000316e:	eaae                	sd	a1,336(sp)
    80003170:	a009                	j	80003172 <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x1ce>
    80003172:	6536                	ld	a0,328(sp)
    80003174:	4581                	li	a1,0
    80003176:	00b50463          	beq	a0,a1,8000317e <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x1da>
    8000317a:	a009                	j	8000317c <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x1d8>
    8000317c:	a809                	j	8000318e <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x1ea>
    8000317e:	1208                	addi	a0,sp,288
            ctrl.inner[i].prev = &mut ctrl.inner[i-1];
            ctrl.inner[i].next = &mut ctrl.inner[i+1];
        }
        
        // init index
        ctrl.inner.iter_mut()
    80003180:	0000e097          	auipc	ra,0xe
    80003184:	5b6080e7          	jalr	1462(ra) # 80011736 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7fbd4bc7b8273f3cE>
    80003188:	f0aa                	sd	a0,96(sp)
    8000318a:	a8c1                	j	8000325a <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x2b6>
        for i in 1..(len-1) {
    8000318c:	0000                	unimp
    8000318e:	6556                	ld	a0,336(sp)
    80003190:	e8aa                	sd	a0,80(sp)
    80003192:	e32a                	sd	a0,384(sp)
    80003194:	e72a                	sd	a0,392(sp)
    80003196:	eb2a                	sd	a0,400(sp)
    80003198:	1208                	addi	a0,sp,288
            ctrl.inner[i].prev = &mut ctrl.inner[i-1];
    8000319a:	0000e097          	auipc	ra,0xe
    8000319e:	59c080e7          	jalr	1436(ra) # 80011736 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7fbd4bc7b8273f3cE>
    800031a2:	ecaa                	sd	a0,88(sp)
    800031a4:	a009                	j	800031a6 <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x202>
    800031a6:	6546                	ld	a0,80(sp)
    800031a8:	fff50593          	addi	a1,a0,-1
    800031ac:	e4ae                	sd	a1,72(sp)
    800031ae:	1cb56d63          	bltu	a0,a1,80003388 <.LBB0_76>
    800031b2:	a009                	j	800031b4 <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x210>
    800031b4:	65a6                	ld	a1,72(sp)
    800031b6:	4575                	li	a0,29
    800031b8:	1eb56763          	bltu	a0,a1,800033a6 <.LBB0_77+0x16>
    800031bc:	a009                	j	800031be <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x21a>
    800031be:	6566                	ld	a0,88(sp)
    800031c0:	65a6                	ld	a1,72(sp)
    800031c2:	02800613          	li	a2,40
    800031c6:	02c585b3          	mul	a1,a1,a2
    800031ca:	952e                	add	a0,a0,a1
    800031cc:	fc2a                	sd	a0,56(sp)
    800031ce:	1208                	addi	a0,sp,288
    800031d0:	0000e097          	auipc	ra,0xe
    800031d4:	566080e7          	jalr	1382(ra) # 80011736 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7fbd4bc7b8273f3cE>
    800031d8:	e0aa                	sd	a0,64(sp)
    800031da:	a009                	j	800031dc <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x238>
    800031dc:	65c6                	ld	a1,80(sp)
    800031de:	4575                	li	a0,29
    800031e0:	1cb56e63          	bltu	a0,a1,800033bc <.LBB0_78+0x14>
    800031e4:	a009                	j	800031e6 <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x242>
    800031e6:	7562                	ld	a0,56(sp)
    800031e8:	6586                	ld	a1,64(sp)
    800031ea:	6646                	ld	a2,80(sp)
    800031ec:	02800693          	li	a3,40
    800031f0:	02d60633          	mul	a2,a2,a3
    800031f4:	95b2                	add	a1,a1,a2
    800031f6:	e188                	sd	a0,0(a1)
    800031f8:	1208                	addi	a0,sp,288
            ctrl.inner[i].next = &mut ctrl.inner[i+1];
    800031fa:	0000e097          	auipc	ra,0xe
    800031fe:	53c080e7          	jalr	1340(ra) # 80011736 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7fbd4bc7b8273f3cE>
    80003202:	f82a                	sd	a0,48(sp)
    80003204:	a009                	j	80003206 <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x262>
    80003206:	65c6                	ld	a1,80(sp)
    80003208:	00158513          	addi	a0,a1,1
    8000320c:	f42a                	sd	a0,40(sp)
    8000320e:	1cb56263          	bltu	a0,a1,800033d2 <.LBB0_80>
    80003212:	a009                	j	80003214 <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x270>
    80003214:	75a2                	ld	a1,40(sp)
    80003216:	4575                	li	a0,29
    80003218:	1cb56b63          	bltu	a0,a1,800033ee <.LBB0_81+0x14>
    8000321c:	a009                	j	8000321e <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x27a>
    8000321e:	7542                	ld	a0,48(sp)
    80003220:	75a2                	ld	a1,40(sp)
    80003222:	02800613          	li	a2,40
    80003226:	02c585b3          	mul	a1,a1,a2
    8000322a:	952e                	add	a0,a0,a1
    8000322c:	ec2a                	sd	a0,24(sp)
    8000322e:	1208                	addi	a0,sp,288
    80003230:	0000e097          	auipc	ra,0xe
    80003234:	506080e7          	jalr	1286(ra) # 80011736 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7fbd4bc7b8273f3cE>
    80003238:	f02a                	sd	a0,32(sp)
    8000323a:	a009                	j	8000323c <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x298>
    8000323c:	65c6                	ld	a1,80(sp)
    8000323e:	4575                	li	a0,29
    80003240:	1cb56263          	bltu	a0,a1,80003404 <.LBB0_82+0x14>
    80003244:	a009                	j	80003246 <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x2a2>
    80003246:	6562                	ld	a0,24(sp)
    80003248:	7582                	ld	a1,32(sp)
    8000324a:	6646                	ld	a2,80(sp)
    8000324c:	02800693          	li	a3,40
    80003250:	02d60633          	mul	a2,a2,a3
    80003254:	95b2                	add	a1,a1,a2
    80003256:	e588                	sd	a0,8(a1)
        for i in 1..(len-1) {
    80003258:	b729                	j	80003162 <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x1be>
        ctrl.inner.iter_mut()
    8000325a:	7506                	ld	a0,96(sp)
    8000325c:	45f9                	li	a1,30
    8000325e:	00002097          	auipc	ra,0x2
    80003262:	44c080e7          	jalr	1100(ra) # 800056aa <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h56877d4d8de3d254E>
    80003266:	e42a                	sd	a0,8(sp)
    80003268:	e82e                	sd	a1,16(sp)
    8000326a:	a009                	j	8000326c <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x2c8>
    8000326c:	6642                	ld	a2,16(sp)
    8000326e:	65a2                	ld	a1,8(sp)
    80003270:	0aa8                	addi	a0,sp,344
    80003272:	00008097          	auipc	ra,0x8
    80003276:	9d4080e7          	jalr	-1580(ra) # 8000ac46 <_ZN4core4iter6traits8iterator8Iterator9enumerate17h42a569d91d49dc41E>
    8000327a:	a009                	j	8000327c <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x2d8>
    8000327c:	0aa8                	addi	a0,sp,344
    8000327e:	0000f097          	auipc	ra,0xf
    80003282:	24e080e7          	jalr	590(ra) # 800124cc <_ZN4core4iter6traits8iterator8Iterator8for_each17hc49183b8c223967eE>
    80003286:	a009                	j	80003288 <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x2e4>
    80003288:	1208                	addi	a0,sp,288
            .enumerate()
            .for_each(|(i, b)| b.index = i);
    }
    8000328a:	00004097          	auipc	ra,0x4
    8000328e:	d66080e7          	jalr	-666(ra) # 80006ff0 <_ZN4core3ptr89drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..fs..bio..BufLru$GT$$GT$17h9c86fb58887d325bE>
    80003292:	a009                	j	80003294 <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x2f0>
    80003294:	60fa                	ld	ra,408(sp)
    80003296:	611d                	addi	sp,sp,416
    80003298:	8082                	ret

000000008000329a <.LBB0_62>:
        ctrl.tail = &mut ctrl.inner[len-1];
    8000329a:	00023517          	auipc	a0,0x23
    8000329e:	88650513          	addi	a0,a0,-1914 # 80025b20 <str.0>

00000000800032a2 <.LBB0_63>:
    800032a2:	00023617          	auipc	a2,0x23
    800032a6:	85e60613          	addi	a2,a2,-1954 # 80025b00 <.L__unnamed_1>
    800032aa:	02100593          	li	a1,33
    800032ae:	0001f097          	auipc	ra,0x1f
    800032b2:	fc8080e7          	jalr	-56(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    800032b6:	0000                	unimp
    800032b8:	752e                	ld	a0,232(sp)

00000000800032ba <.LBB0_64>:
    800032ba:	00023617          	auipc	a2,0x23
    800032be:	88e60613          	addi	a2,a2,-1906 # 80025b48 <.L__unnamed_2>
    800032c2:	45f9                	li	a1,30
    800032c4:	0001f097          	auipc	ra,0x1f
    800032c8:	fde080e7          	jalr	-34(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

00000000800032ce <.LBB0_65>:
        ctrl.inner[len-1].prev = &mut ctrl.inner[len-2];
    800032ce:	00023517          	auipc	a0,0x23
    800032d2:	85250513          	addi	a0,a0,-1966 # 80025b20 <str.0>

00000000800032d6 <.LBB0_66>:
    800032d6:	00023617          	auipc	a2,0x23
    800032da:	88a60613          	addi	a2,a2,-1910 # 80025b60 <.L__unnamed_3>
    800032de:	02100593          	li	a1,33
    800032e2:	0001f097          	auipc	ra,0x1f
    800032e6:	f94080e7          	jalr	-108(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    800032ea:	0000                	unimp
    800032ec:	752a                	ld	a0,168(sp)

00000000800032ee <.LBB0_67>:
    800032ee:	00023617          	auipc	a2,0x23
    800032f2:	88a60613          	addi	a2,a2,-1910 # 80025b78 <.L__unnamed_4>
    800032f6:	45f9                	li	a1,30
    800032f8:	0001f097          	auipc	ra,0x1f
    800032fc:	faa080e7          	jalr	-86(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

0000000080003302 <.LBB0_68>:
    80003302:	00023517          	auipc	a0,0x23
    80003306:	81e50513          	addi	a0,a0,-2018 # 80025b20 <str.0>

000000008000330a <.LBB0_69>:
    8000330a:	00023617          	auipc	a2,0x23
    8000330e:	88660613          	addi	a2,a2,-1914 # 80025b90 <.L__unnamed_5>
    80003312:	02100593          	li	a1,33
    80003316:	0001f097          	auipc	ra,0x1f
    8000331a:	f60080e7          	jalr	-160(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8000331e:	0000                	unimp
    80003320:	654a                	ld	a0,144(sp)

0000000080003322 <.LBB0_70>:
    80003322:	00023617          	auipc	a2,0x23
    80003326:	88660613          	addi	a2,a2,-1914 # 80025ba8 <.L__unnamed_6>
    8000332a:	45f9                	li	a1,30
    8000332c:	0001f097          	auipc	ra,0x1f
    80003330:	f76080e7          	jalr	-138(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

0000000080003336 <.LBB0_71>:
        ctrl.inner[len-1].next = ptr::null_mut();
    80003336:	00022517          	auipc	a0,0x22
    8000333a:	7ea50513          	addi	a0,a0,2026 # 80025b20 <str.0>

000000008000333e <.LBB0_72>:
    8000333e:	00023617          	auipc	a2,0x23
    80003342:	88260613          	addi	a2,a2,-1918 # 80025bc0 <.L__unnamed_7>
    80003346:	02100593          	li	a1,33
    8000334a:	0001f097          	auipc	ra,0x1f
    8000334e:	f2c080e7          	jalr	-212(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80003352:	0000                	unimp
    80003354:	650a                	ld	a0,128(sp)

0000000080003356 <.LBB0_73>:
    80003356:	00023617          	auipc	a2,0x23
    8000335a:	88260613          	addi	a2,a2,-1918 # 80025bd8 <.L__unnamed_8>
    8000335e:	45f9                	li	a1,30
    80003360:	0001f097          	auipc	ra,0x1f
    80003364:	f42080e7          	jalr	-190(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

000000008000336a <.LBB0_74>:
        for i in 1..(len-1) {
    8000336a:	00022517          	auipc	a0,0x22
    8000336e:	7b650513          	addi	a0,a0,1974 # 80025b20 <str.0>

0000000080003372 <.LBB0_75>:
    80003372:	00023617          	auipc	a2,0x23
    80003376:	87e60613          	addi	a2,a2,-1922 # 80025bf0 <.L__unnamed_9>
    8000337a:	02100593          	li	a1,33
    8000337e:	0001f097          	auipc	ra,0x1f
    80003382:	ef8080e7          	jalr	-264(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080003388 <.LBB0_76>:
            ctrl.inner[i].prev = &mut ctrl.inner[i-1];
    80003388:	00022517          	auipc	a0,0x22
    8000338c:	79850513          	addi	a0,a0,1944 # 80025b20 <str.0>

0000000080003390 <.LBB0_77>:
    80003390:	00023617          	auipc	a2,0x23
    80003394:	87860613          	addi	a2,a2,-1928 # 80025c08 <.L__unnamed_10>
    80003398:	02100593          	li	a1,33
    8000339c:	0001f097          	auipc	ra,0x1f
    800033a0:	eda080e7          	jalr	-294(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    800033a4:	0000                	unimp
    800033a6:	6526                	ld	a0,72(sp)

00000000800033a8 <.LBB0_78>:
    800033a8:	00023617          	auipc	a2,0x23
    800033ac:	87860613          	addi	a2,a2,-1928 # 80025c20 <.L__unnamed_11>
    800033b0:	45f9                	li	a1,30
    800033b2:	0001f097          	auipc	ra,0x1f
    800033b6:	ef0080e7          	jalr	-272(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    800033ba:	0000                	unimp
    800033bc:	6546                	ld	a0,80(sp)

00000000800033be <.LBB0_79>:
    800033be:	00023617          	auipc	a2,0x23
    800033c2:	87a60613          	addi	a2,a2,-1926 # 80025c38 <.L__unnamed_12>
    800033c6:	45f9                	li	a1,30
    800033c8:	0001f097          	auipc	ra,0x1f
    800033cc:	eda080e7          	jalr	-294(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

00000000800033d2 <.LBB0_80>:
            ctrl.inner[i].next = &mut ctrl.inner[i+1];
    800033d2:	00023517          	auipc	a0,0x23
    800033d6:	89e50513          	addi	a0,a0,-1890 # 80025c70 <str.1>

00000000800033da <.LBB0_81>:
    800033da:	00023617          	auipc	a2,0x23
    800033de:	87660613          	addi	a2,a2,-1930 # 80025c50 <.L__unnamed_13>
    800033e2:	45f1                	li	a1,28
    800033e4:	0001f097          	auipc	ra,0x1f
    800033e8:	e92080e7          	jalr	-366(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    800033ec:	0000                	unimp
    800033ee:	7522                	ld	a0,40(sp)

00000000800033f0 <.LBB0_82>:
    800033f0:	00023617          	auipc	a2,0x23
    800033f4:	8a060613          	addi	a2,a2,-1888 # 80025c90 <.L__unnamed_14>
    800033f8:	45f9                	li	a1,30
    800033fa:	0001f097          	auipc	ra,0x1f
    800033fe:	ea8080e7          	jalr	-344(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80003402:	0000                	unimp
    80003404:	6546                	ld	a0,80(sp)

0000000080003406 <.LBB0_83>:
    80003406:	00023617          	auipc	a2,0x23
    8000340a:	8a260613          	addi	a2,a2,-1886 # 80025ca8 <.L__unnamed_15>
    8000340e:	45f9                	li	a1,30
    80003410:	0001f097          	auipc	ra,0x1f
    80003414:	e92080e7          	jalr	-366(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel2fs3bio6Bcache4bget17h5f7e8a4c3a341a1bE:

000000008000341a <_ZN6kernel2fs3bio6Bcache4bget17h5f7e8a4c3a341a1bE>:

    fn bget(&self, dev: u32, blockno: u32) -> Buf<'_> {
    8000341a:	716d                	addi	sp,sp,-272
    8000341c:	e606                	sd	ra,264(sp)
    8000341e:	ecae                	sd	a1,88(sp)
    80003420:	85aa                	mv	a1,a0
    80003422:	6566                	ld	a0,88(sp)
    80003424:	f0ae                	sd	a1,96(sp)
    80003426:	85b6                	mv	a1,a3
    80003428:	f4ae                	sd	a1,104(sp)
    8000342a:	85b2                	mv	a1,a2
    8000342c:	f8ae                	sd	a1,112(sp)
    8000342e:	edaa                	sd	a0,216(sp)
    80003430:	d1b2                	sw	a2,224(sp)
    80003432:	d3b6                	sw	a3,228(sp)
        let mut ctrl = self.ctrl.acquire();
    80003434:	0000d097          	auipc	ra,0xd
    80003438:	13a080e7          	jalr	314(ra) # 8001056e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h4c9081acf22588feE>
    8000343c:	fcaa                	sd	a0,120(sp)
    8000343e:	a009                	j	80003440 <_ZN6kernel2fs3bio6Bcache4bget17h5f7e8a4c3a341a1bE+0x26>
    80003440:	18a8                	addi	a0,sp,120

        // find cached block
        match ctrl.find_cached(dev, blockno) {
    80003442:	0000e097          	auipc	ra,0xe
    80003446:	2f4080e7          	jalr	756(ra) # 80011736 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7fbd4bc7b8273f3cE>
    8000344a:	e8aa                	sd	a0,80(sp)
    8000344c:	a009                	j	8000344e <_ZN6kernel2fs3bio6Bcache4bget17h5f7e8a4c3a341a1bE+0x34>
    8000344e:	76a6                	ld	a3,104(sp)
    80003450:	7646                	ld	a2,112(sp)
    80003452:	65c6                	ld	a1,80(sp)
    80003454:	0108                	addi	a0,sp,128
    80003456:	00000097          	auipc	ra,0x0
    8000345a:	41e080e7          	jalr	1054(ra) # 80003874 <_ZN6kernel2fs3bio6BufLru11find_cached17h75fa078c96ee4834E>
    8000345e:	a009                	j	80003460 <_ZN6kernel2fs3bio6Bcache4bget17h5f7e8a4c3a341a1bE+0x46>
            Some((index, rc_ptr)) => {
    80003460:	650a                	ld	a0,128(sp)
    80003462:	4581                	li	a1,0
    80003464:	00b50463          	beq	a0,a1,8000346c <_ZN6kernel2fs3bio6Bcache4bget17h5f7e8a4c3a341a1bE+0x52>
    80003468:	a009                	j	8000346a <_ZN6kernel2fs3bio6Bcache4bget17h5f7e8a4c3a341a1bE+0x50>
    8000346a:	a809                	j	8000347c <_ZN6kernel2fs3bio6Bcache4bget17h5f7e8a4c3a341a1bE+0x62>
    8000346c:	18a8                	addi	a0,sp,120
                }
            }
            None => {
                // not cached
                // recycle the least recently used (LRU) unused buffer
                match ctrl.recycle(dev, blockno) {
    8000346e:	0000e097          	auipc	ra,0xe
    80003472:	2c8080e7          	jalr	712(ra) # 80011736 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7fbd4bc7b8273f3cE>
    80003476:	e4aa                	sd	a0,72(sp)
    80003478:	a0ad                	j	800034e2 <_ZN6kernel2fs3bio6Bcache4bget17h5f7e8a4c3a341a1bE+0xc8>
        match ctrl.find_cached(dev, blockno) {
    8000347a:	0000                	unimp
            Some((index, rc_ptr)) => {
    8000347c:	652a                	ld	a0,136(sp)
    8000347e:	fc2a                	sd	a0,56(sp)
    80003480:	f5aa                	sd	a0,232(sp)
    80003482:	654a                	ld	a0,144(sp)
    80003484:	e0aa                	sd	a0,64(sp)
    80003486:	f9aa                	sd	a0,240(sp)
                drop(ctrl);
    80003488:	7566                	ld	a0,120(sp)
    8000348a:	0001a097          	auipc	ra,0x1a
    8000348e:	c24080e7          	jalr	-988(ra) # 8001d0ae <_ZN4core3mem4drop17h82526bd482ef36a5E>
    80003492:	a009                	j	80003494 <_ZN6kernel2fs3bio6Bcache4bget17h5f7e8a4c3a341a1bE+0x7a>
    80003494:	75e2                	ld	a1,56(sp)
    80003496:	4575                	li	a0,29
                    data: Some(self.bufs[index].data.lock())
    80003498:	12b56163          	bltu	a0,a1,800035ba <.LBB1_27+0xb2>
    8000349c:	a009                	j	8000349e <_ZN6kernel2fs3bio6Bcache4bget17h5f7e8a4c3a341a1bE+0x84>
    8000349e:	6566                	ld	a0,88(sp)
    800034a0:	75e2                	ld	a1,56(sp)
    800034a2:	44000613          	li	a2,1088
    800034a6:	02c585b3          	mul	a1,a1,a2
    800034aa:	952e                	add	a0,a0,a1
    800034ac:	4e050513          	addi	a0,a0,1248
    800034b0:	0001a097          	auipc	ra,0x1a
    800034b4:	05a080e7          	jalr	90(ra) # 8001d50a <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$4lock17h852a891f9af492ecE>
    800034b8:	f42a                	sd	a0,40(sp)
    800034ba:	f82e                	sd	a1,48(sp)
    800034bc:	a009                	j	800034be <_ZN6kernel2fs3bio6Bcache4bget17h5f7e8a4c3a341a1bE+0xa4>
    800034be:	7586                	ld	a1,96(sp)
    800034c0:	6506                	ld	a0,64(sp)
    800034c2:	7626                	ld	a2,104(sp)
    800034c4:	76c6                	ld	a3,112(sp)
    800034c6:	7762                	ld	a4,56(sp)
    800034c8:	77c2                	ld	a5,48(sp)
    800034ca:	7822                	ld	a6,40(sp)
    800034cc:	ed42                	sd	a6,152(sp)
    800034ce:	f13e                	sd	a5,160(sp)
                Buf {
    800034d0:	e198                	sd	a4,0(a1)
    800034d2:	d194                	sw	a3,32(a1)
    800034d4:	d1d0                	sw	a2,36(a1)
    800034d6:	e588                	sd	a0,8(a1)
    800034d8:	666a                	ld	a2,152(sp)
    800034da:	750a                	ld	a0,160(sp)
    800034dc:	e990                	sd	a2,16(a1)
    800034de:	ed88                	sd	a0,24(a1)
                    }
                    None => panic!("no usable buffer")
                }
            }
        }
    }
    800034e0:	a8d1                	j	800035b4 <.LBB1_27+0xac>
                match ctrl.recycle(dev, blockno) {
    800034e2:	76a6                	ld	a3,104(sp)
    800034e4:	7646                	ld	a2,112(sp)
    800034e6:	65a6                	ld	a1,72(sp)
    800034e8:	1128                	addi	a0,sp,168
    800034ea:	00000097          	auipc	ra,0x0
    800034ee:	47c080e7          	jalr	1148(ra) # 80003966 <_ZN6kernel2fs3bio6BufLru7recycle17h2cc2179c79ac2f75E>
    800034f2:	a009                	j	800034f4 <_ZN6kernel2fs3bio6Bcache4bget17h5f7e8a4c3a341a1bE+0xda>
                    Some((index, rc_ptr)) => {
    800034f4:	752a                	ld	a0,168(sp)
    800034f6:	4581                	li	a1,0
    800034f8:	00b50463          	beq	a0,a1,80003500 <.LBB1_26>
    800034fc:	a009                	j	800034fe <_ZN6kernel2fs3bio6Bcache4bget17h5f7e8a4c3a341a1bE+0xe4>
    800034fe:	a005                	j	8000351e <.LBB1_27+0x16>

0000000080003500 <.LBB1_26>:
                    None => panic!("no usable buffer")
    80003500:	00022517          	auipc	a0,0x22
    80003504:	22050513          	addi	a0,a0,544 # 80025720 <.L__unnamed_35+0xa8>

0000000080003508 <.LBB1_27>:
    80003508:	00023617          	auipc	a2,0x23
    8000350c:	80060613          	addi	a2,a2,-2048 # 80025d08 <.L__unnamed_17>
    80003510:	45c1                	li	a1,16
    80003512:	0001f097          	auipc	ra,0x1f
    80003516:	d64080e7          	jalr	-668(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8000351a:	0000                	unimp
                match ctrl.recycle(dev, blockno) {
    8000351c:	0000                	unimp
                    Some((index, rc_ptr)) => {
    8000351e:	75ca                	ld	a1,176(sp)
    80003520:	ec2e                	sd	a1,24(sp)
    80003522:	fdae                	sd	a1,248(sp)
    80003524:	756a                	ld	a0,184(sp)
    80003526:	f02a                	sd	a0,32(sp)
    80003528:	e22a                	sd	a0,256(sp)
    8000352a:	4575                	li	a0,29
                        self.bufs[index].valid.store(false, Ordering::Relaxed);
    8000352c:	0ab56263          	bltu	a0,a1,800035d0 <.LBB1_28+0x14>
    80003530:	a009                	j	80003532 <.LBB1_27+0x2a>
    80003532:	6566                	ld	a0,88(sp)
    80003534:	65e2                	ld	a1,24(sp)
    80003536:	44000613          	li	a2,1088
    8000353a:	02c585b3          	mul	a1,a1,a2
    8000353e:	952e                	add	a0,a0,a1
    80003540:	48c50513          	addi	a0,a0,1164
    80003544:	48c50513          	addi	a0,a0,1164
    80003548:	4601                	li	a2,0
    8000354a:	0cc103a3          	sb	a2,199(sp)
    8000354e:	85b2                	mv	a1,a2
    80003550:	00001097          	auipc	ra,0x1
    80003554:	19c080e7          	jalr	412(ra) # 800046ec <_ZN4core4sync6atomic10AtomicBool5store17h325e21ca90edd7e7E>
    80003558:	a009                	j	8000355a <.LBB1_27+0x52>
                        drop(ctrl);
    8000355a:	7566                	ld	a0,120(sp)
    8000355c:	0001a097          	auipc	ra,0x1a
    80003560:	b52080e7          	jalr	-1198(ra) # 8001d0ae <_ZN4core3mem4drop17h82526bd482ef36a5E>
    80003564:	a009                	j	80003566 <.LBB1_27+0x5e>
    80003566:	65e2                	ld	a1,24(sp)
    80003568:	4575                	li	a0,29
                            data: Some(self.bufs[index].data.lock()),
    8000356a:	06b56e63          	bltu	a0,a1,800035e6 <.LBB1_29+0x14>
    8000356e:	a009                	j	80003570 <.LBB1_27+0x68>
    80003570:	6566                	ld	a0,88(sp)
    80003572:	65e2                	ld	a1,24(sp)
    80003574:	44000613          	li	a2,1088
    80003578:	02c585b3          	mul	a1,a1,a2
    8000357c:	952e                	add	a0,a0,a1
    8000357e:	4e050513          	addi	a0,a0,1248
    80003582:	0001a097          	auipc	ra,0x1a
    80003586:	f88080e7          	jalr	-120(ra) # 8001d50a <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$4lock17h852a891f9af492ecE>
    8000358a:	e42a                	sd	a0,8(sp)
    8000358c:	e82e                	sd	a1,16(sp)
    8000358e:	a009                	j	80003590 <.LBB1_27+0x88>
    80003590:	7586                	ld	a1,96(sp)
    80003592:	7502                	ld	a0,32(sp)
    80003594:	7626                	ld	a2,104(sp)
    80003596:	76c6                	ld	a3,112(sp)
    80003598:	6762                	ld	a4,24(sp)
    8000359a:	67c2                	ld	a5,16(sp)
    8000359c:	6822                	ld	a6,8(sp)
    8000359e:	e5c2                	sd	a6,200(sp)
    800035a0:	e9be                	sd	a5,208(sp)
                        return Buf {
    800035a2:	e198                	sd	a4,0(a1)
    800035a4:	d194                	sw	a3,32(a1)
    800035a6:	d1d0                	sw	a2,36(a1)
    800035a8:	e588                	sd	a0,8(a1)
    800035aa:	662e                	ld	a2,200(sp)
    800035ac:	654e                	ld	a0,208(sp)
    800035ae:	e990                	sd	a2,16(a1)
    800035b0:	ed88                	sd	a0,24(a1)
    }
    800035b2:	a009                	j	800035b4 <.LBB1_27+0xac>
    800035b4:	60b2                	ld	ra,264(sp)
    800035b6:	6151                	addi	sp,sp,272
    800035b8:	8082                	ret
                    data: Some(self.bufs[index].data.lock())
    800035ba:	7562                	ld	a0,56(sp)

00000000800035bc <.LBB1_28>:
    800035bc:	00022617          	auipc	a2,0x22
    800035c0:	70460613          	addi	a2,a2,1796 # 80025cc0 <.L__unnamed_18>
    800035c4:	45f9                	li	a1,30
    800035c6:	0001f097          	auipc	ra,0x1f
    800035ca:	cdc080e7          	jalr	-804(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    800035ce:	0000                	unimp
                        self.bufs[index].valid.store(false, Ordering::Relaxed);
    800035d0:	6562                	ld	a0,24(sp)

00000000800035d2 <.LBB1_29>:
    800035d2:	00022617          	auipc	a2,0x22
    800035d6:	70660613          	addi	a2,a2,1798 # 80025cd8 <.L__unnamed_19>
    800035da:	45f9                	li	a1,30
    800035dc:	0001f097          	auipc	ra,0x1f
    800035e0:	cc6080e7          	jalr	-826(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    800035e4:	0000                	unimp
                            data: Some(self.bufs[index].data.lock()),
    800035e6:	6562                	ld	a0,24(sp)

00000000800035e8 <.LBB1_30>:
    800035e8:	00022617          	auipc	a2,0x22
    800035ec:	70860613          	addi	a2,a2,1800 # 80025cf0 <.L__unnamed_20>
    800035f0:	45f9                	li	a1,30
    800035f2:	0001f097          	auipc	ra,0x1f
    800035f6:	cb0080e7          	jalr	-848(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel2fs3bio6Bcache5bread17h6ef915e4e896646bE:

00000000800035fc <_ZN6kernel2fs3bio6Bcache5bread17h6ef915e4e896646bE>:

    /// Get the buf from the cache/disk
    pub fn bread<'a>(&'a self, dev: u32, blockno: u32) -> Buf<'a> {
    800035fc:	715d                	addi	sp,sp,-80
        let mut b = self.bget(dev, blockno);
    800035fe:	e486                	sd	ra,72(sp)
    80003600:	f02e                	sd	a1,32(sp)
    80003602:	f42a                	sd	a0,40(sp)
    80003604:	fc2e                	sd	a1,56(sp)
    80003606:	c0b2                	sw	a2,64(sp)
    80003608:	c2b6                	sw	a3,68(sp)
    8000360a:	00000097          	auipc	ra,0x0
    8000360e:	e10080e7          	jalr	-496(ra) # 8000341a <_ZN6kernel2fs3bio6Bcache4bget17h5f7e8a4c3a341a1bE>
    80003612:	a009                	j	80003614 <_ZN6kernel2fs3bio6Bcache5bread17h6ef915e4e896646bE+0x18>
        if !self.bufs[b.index].valid.load(Ordering::Relaxed) {
    80003614:	7522                	ld	a0,40(sp)
    80003616:	610c                	ld	a1,0(a0)
    80003618:	ec2e                	sd	a1,24(sp)
    8000361a:	4575                	li	a0,29
    8000361c:	08b56563          	bltu	a0,a1,800036a6 <.LBB2_12+0x54>
    80003620:	a009                	j	80003622 <_ZN6kernel2fs3bio6Bcache5bread17h6ef915e4e896646bE+0x26>
    80003622:	7502                	ld	a0,32(sp)
    80003624:	65e2                	ld	a1,24(sp)
    80003626:	44000613          	li	a2,1088
    8000362a:	02c585b3          	mul	a1,a1,a2
    8000362e:	952e                	add	a0,a0,a1
    80003630:	48c50513          	addi	a0,a0,1164
    80003634:	48c50513          	addi	a0,a0,1164
    80003638:	4581                	li	a1,0
    8000363a:	02b10b23          	sb	a1,54(sp)
    8000363e:	00001097          	auipc	ra,0x1
    80003642:	030080e7          	jalr	48(ra) # 8000466e <_ZN4core4sync6atomic10AtomicBool4load17h49a663f50dd66935E>
    80003646:	e82a                	sd	a0,16(sp)
    80003648:	a009                	j	8000364a <_ZN6kernel2fs3bio6Bcache5bread17h6ef915e4e896646bE+0x4e>
    8000364a:	6542                	ld	a0,16(sp)
    8000364c:	ed09                	bnez	a0,80003666 <.LBB2_12+0x14>
    8000364e:	a009                	j	80003650 <_ZN6kernel2fs3bio6Bcache5bread17h6ef915e4e896646bE+0x54>
            DISK.rw(&mut b, false);
    80003650:	75a2                	ld	a1,40(sp)

0000000080003652 <.LBB2_12>:
    80003652:	00069517          	auipc	a0,0x69
    80003656:	9ae50513          	addi	a0,a0,-1618 # 8006c000 <_ZN6kernel6driver11virtio_disk4DISK17h9e8917083150b34aE>
    8000365a:	4601                	li	a2,0
    8000365c:	00006097          	auipc	ra,0x6
    80003660:	cf6080e7          	jalr	-778(ra) # 80009352 <_ZN6kernel6driver11virtio_disk91_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..driver..virtio_disk..Disk$GT$$GT$2rw17h4aaaa8090d764af5E>
    80003664:	a011                	j	80003668 <.LBB2_12+0x16>
        if !self.bufs[b.index].valid.load(Ordering::Relaxed) {
    80003666:	a82d                	j	800036a0 <.LBB2_12+0x4e>
            self.bufs[b.index].valid.store(true, Ordering::Relaxed);
    80003668:	7522                	ld	a0,40(sp)
    8000366a:	610c                	ld	a1,0(a0)
    8000366c:	e42e                	sd	a1,8(sp)
    8000366e:	4575                	li	a0,29
    80003670:	04b56663          	bltu	a0,a1,800036bc <.LBB2_13+0x14>
    80003674:	a009                	j	80003676 <.LBB2_12+0x24>
    80003676:	7502                	ld	a0,32(sp)
    80003678:	65a2                	ld	a1,8(sp)
    8000367a:	44000613          	li	a2,1088
    8000367e:	02c585b3          	mul	a1,a1,a2
    80003682:	952e                	add	a0,a0,a1
    80003684:	48c50513          	addi	a0,a0,1164
    80003688:	48c50513          	addi	a0,a0,1164
    8000368c:	4601                	li	a2,0
    8000368e:	02c10ba3          	sb	a2,55(sp)
    80003692:	4585                	li	a1,1
    80003694:	00001097          	auipc	ra,0x1
    80003698:	058080e7          	jalr	88(ra) # 800046ec <_ZN4core4sync6atomic10AtomicBool5store17h325e21ca90edd7e7E>
    8000369c:	a009                	j	8000369e <.LBB2_12+0x4c>
        if !self.bufs[b.index].valid.load(Ordering::Relaxed) {
    8000369e:	a009                	j	800036a0 <.LBB2_12+0x4e>
        }
        b
    }
    800036a0:	60a6                	ld	ra,72(sp)
    800036a2:	6161                	addi	sp,sp,80
    800036a4:	8082                	ret
        if !self.bufs[b.index].valid.load(Ordering::Relaxed) {
    800036a6:	6562                	ld	a0,24(sp)

00000000800036a8 <.LBB2_13>:
    800036a8:	00022617          	auipc	a2,0x22
    800036ac:	67860613          	addi	a2,a2,1656 # 80025d20 <.L__unnamed_21>
    800036b0:	45f9                	li	a1,30
    800036b2:	0001f097          	auipc	ra,0x1f
    800036b6:	bf0080e7          	jalr	-1040(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    800036ba:	0000                	unimp
            self.bufs[b.index].valid.store(true, Ordering::Relaxed);
    800036bc:	6522                	ld	a0,8(sp)

00000000800036be <.LBB2_14>:
    800036be:	00022617          	auipc	a2,0x22
    800036c2:	67a60613          	addi	a2,a2,1658 # 80025d38 <.L__unnamed_22>
    800036c6:	45f9                	li	a1,30
    800036c8:	0001f097          	auipc	ra,0x1f
    800036cc:	bda080e7          	jalr	-1062(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel2fs3bio6Bcache6brelse17hc59c97ea45d16b39E:

00000000800036d2 <_ZN6kernel2fs3bio6Bcache6brelse17hc59c97ea45d16b39E>:

    /// Move an unlocked buf to the head of the most-recently-used list.
    fn brelse(&self, index: usize) {
    800036d2:	7179                	addi	sp,sp,-48
    800036d4:	f406                	sd	ra,40(sp)
    800036d6:	e42e                	sd	a1,8(sp)
    800036d8:	ec2a                	sd	a0,24(sp)
    800036da:	f02e                	sd	a1,32(sp)
        self.ctrl.acquire().move_if_no_ref(index);
    800036dc:	0000d097          	auipc	ra,0xd
    800036e0:	e92080e7          	jalr	-366(ra) # 8001056e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h4c9081acf22588feE>
    800036e4:	e82a                	sd	a0,16(sp)
    800036e6:	a009                	j	800036e8 <_ZN6kernel2fs3bio6Bcache6brelse17hc59c97ea45d16b39E+0x16>
    800036e8:	0808                	addi	a0,sp,16
    800036ea:	0000e097          	auipc	ra,0xe
    800036ee:	04c080e7          	jalr	76(ra) # 80011736 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7fbd4bc7b8273f3cE>
    800036f2:	e02a                	sd	a0,0(sp)
    800036f4:	a009                	j	800036f6 <_ZN6kernel2fs3bio6Bcache6brelse17hc59c97ea45d16b39E+0x24>
    800036f6:	65a2                	ld	a1,8(sp)
    800036f8:	6502                	ld	a0,0(sp)
    800036fa:	00000097          	auipc	ra,0x0
    800036fe:	338080e7          	jalr	824(ra) # 80003a32 <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE>
    80003702:	a009                	j	80003704 <_ZN6kernel2fs3bio6Bcache6brelse17hc59c97ea45d16b39E+0x32>
    80003704:	0808                	addi	a0,sp,16
    80003706:	00004097          	auipc	ra,0x4
    8000370a:	8ea080e7          	jalr	-1814(ra) # 80006ff0 <_ZN4core3ptr89drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..fs..bio..BufLru$GT$$GT$17h9c86fb58887d325bE>
    8000370e:	a009                	j	80003710 <_ZN6kernel2fs3bio6Bcache6brelse17hc59c97ea45d16b39E+0x3e>
    }
    80003710:	70a2                	ld	ra,40(sp)
    80003712:	6145                	addi	sp,sp,48
    80003714:	8082                	ret

Disassembly of section .text._ZN6kernel2fs3bio3Buf12read_blockno17ha2cb61f265147e82E:

0000000080003716 <_ZN6kernel2fs3bio3Buf12read_blockno17ha2cb61f265147e82E>:
    /// Introduced to let the sleeplock guard drop before the whole struct.
    data: Option<SleepLockGuard<'a, BufData>>,
}

impl<'a> Buf<'a> {
    pub fn read_blockno(&self) -> u32 {
    80003716:	1141                	addi	sp,sp,-16
    80003718:	e42a                	sd	a0,8(sp)
        self.blockno
    }
    8000371a:	5148                	lw	a0,36(a0)
    8000371c:	0141                	addi	sp,sp,16
    8000371e:	8082                	ret

Disassembly of section .text._ZN6kernel2fs3bio3Buf6bwrite17hec751387ebedcc62E:

0000000080003720 <_ZN6kernel2fs3bio3Buf6bwrite17hec751387ebedcc62E>:

    pub fn bwrite(&mut self) {
    80003720:	1141                	addi	sp,sp,-16
    80003722:	e406                	sd	ra,8(sp)
    80003724:	85aa                	mv	a1,a0
    80003726:	e02e                	sd	a1,0(sp)

0000000080003728 <.LBB5_2>:
        DISK.rw(self, true);
    80003728:	00069517          	auipc	a0,0x69
    8000372c:	8d850513          	addi	a0,a0,-1832 # 8006c000 <_ZN6kernel6driver11virtio_disk4DISK17h9e8917083150b34aE>
    80003730:	4605                	li	a2,1
    80003732:	00006097          	auipc	ra,0x6
    80003736:	c20080e7          	jalr	-992(ra) # 80009352 <_ZN6kernel6driver11virtio_disk91_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..driver..virtio_disk..Disk$GT$$GT$2rw17h4aaaa8090d764af5E>
    8000373a:	a009                	j	8000373c <.LBB5_2+0x14>
    }
    8000373c:	60a2                	ld	ra,8(sp)
    8000373e:	0141                	addi	sp,sp,16
    80003740:	8082                	ret

Disassembly of section .text._ZN6kernel2fs3bio3Buf8raw_data17h6a896fea03f7ee91E:

0000000080003742 <_ZN6kernel2fs3bio3Buf8raw_data17h6a896fea03f7ee91E>:

    /// Gives out a raw const pointer at the buf data. 
    pub fn raw_data(&self) -> *const BufData {
    80003742:	7179                	addi	sp,sp,-48
    80003744:	f406                	sd	ra,40(sp)
    80003746:	ec2a                	sd	a0,24(sp)
        let guard = self.data.as_ref().unwrap();
    80003748:	0541                	addi	a0,a0,16
    8000374a:	0000b097          	auipc	ra,0xb
    8000374e:	34c080e7          	jalr	844(ra) # 8000ea96 <_ZN4core6option15Option$LT$T$GT$6as_ref17hb04d778bad5fcb59E>
    80003752:	e82a                	sd	a0,16(sp)
    80003754:	a009                	j	80003756 <_ZN6kernel2fs3bio3Buf8raw_data17h6a896fea03f7ee91E+0x14>
    80003756:	6542                	ld	a0,16(sp)

0000000080003758 <.LBB6_4>:
    80003758:	00022597          	auipc	a1,0x22
    8000375c:	5f858593          	addi	a1,a1,1528 # 80025d50 <.L__unnamed_23>
    80003760:	0000b097          	auipc	ra,0xb
    80003764:	512080e7          	jalr	1298(ra) # 8000ec72 <_ZN4core6option15Option$LT$T$GT$6unwrap17h5e7c29d7de25e54aE>
    80003768:	85aa                	mv	a1,a0
    8000376a:	e42e                	sd	a1,8(sp)
    8000376c:	f02a                	sd	a0,32(sp)
    8000376e:	a009                	j	80003770 <.LBB6_4+0x18>
        guard.deref()
    80003770:	6522                	ld	a0,8(sp)
    80003772:	0001a097          	auipc	ra,0x1a
    80003776:	f52080e7          	jalr	-174(ra) # 8001d6c4 <_ZN92_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17he0c0fee5a6939b40E>
    8000377a:	e02a                	sd	a0,0(sp)
    8000377c:	a009                	j	8000377e <.LBB6_4+0x26>
    }
    8000377e:	6502                	ld	a0,0(sp)
    80003780:	70a2                	ld	ra,40(sp)
    80003782:	6145                	addi	sp,sp,48
    80003784:	8082                	ret

Disassembly of section .text._ZN6kernel2fs3bio3Buf12raw_data_mut17hbae73c10d57c515dE:

0000000080003786 <_ZN6kernel2fs3bio3Buf12raw_data_mut17hbae73c10d57c515dE>:

    /// Gives out a raw mut pointer at the buf data. 
    pub fn raw_data_mut(&mut self) -> *mut BufData {
    80003786:	7179                	addi	sp,sp,-48
    80003788:	f406                	sd	ra,40(sp)
    8000378a:	ec2a                	sd	a0,24(sp)
        let guard = self.data.as_mut().unwrap();
    8000378c:	0541                	addi	a0,a0,16
    8000378e:	0000b097          	auipc	ra,0xb
    80003792:	25c080e7          	jalr	604(ra) # 8000e9ea <_ZN4core6option15Option$LT$T$GT$6as_mut17h3a38d82722b299a5E>
    80003796:	e82a                	sd	a0,16(sp)
    80003798:	a009                	j	8000379a <_ZN6kernel2fs3bio3Buf12raw_data_mut17hbae73c10d57c515dE+0x14>
    8000379a:	6542                	ld	a0,16(sp)

000000008000379c <.LBB7_4>:
    8000379c:	00022597          	auipc	a1,0x22
    800037a0:	5cc58593          	addi	a1,a1,1484 # 80025d68 <.L__unnamed_24>
    800037a4:	0000b097          	auipc	ra,0xb
    800037a8:	754080e7          	jalr	1876(ra) # 8000eef8 <_ZN4core6option15Option$LT$T$GT$6unwrap17heec1a84bcf97bc0fE>
    800037ac:	85aa                	mv	a1,a0
    800037ae:	e42e                	sd	a1,8(sp)
    800037b0:	f02a                	sd	a0,32(sp)
    800037b2:	a009                	j	800037b4 <.LBB7_4+0x18>
        guard.deref_mut()
    800037b4:	6522                	ld	a0,8(sp)
    800037b6:	0001a097          	auipc	ra,0x1a
    800037ba:	f22080e7          	jalr	-222(ra) # 8001d6d8 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h29ddb6c86f63b2e9E>
    800037be:	e02a                	sd	a0,0(sp)
    800037c0:	a009                	j	800037c2 <.LBB7_4+0x26>
    }
    800037c2:	6502                	ld	a0,0(sp)
    800037c4:	70a2                	ld	ra,40(sp)
    800037c6:	6145                	addi	sp,sp,48
    800037c8:	8082                	ret

Disassembly of section .text._ZN6kernel2fs3bio3Buf3pin17hb02a509b70e70322E:

00000000800037ca <_ZN6kernel2fs3bio3Buf3pin17hb02a509b70e70322E>:

    /// Pin the buf.
    /// SAFETY: it should be definitly safe.
    ///     Because the current refcnt >= 1, so the rc_ptr is valid.
    pub unsafe fn pin(&self) {
    800037ca:	1101                	addi	sp,sp,-32
    800037cc:	e02a                	sd	a0,0(sp)
    800037ce:	e82a                	sd	a0,16(sp)
        let rc = *self.rc_ptr;
    800037d0:	6508                	ld	a0,8(a0)
    800037d2:	610c                	ld	a1,0(a0)
    800037d4:	ec2e                	sd	a1,24(sp)
        *self.rc_ptr = rc + 1;
    800037d6:	00158513          	addi	a0,a1,1
    800037da:	e42a                	sd	a0,8(sp)
    800037dc:	00b56963          	bltu	a0,a1,800037ee <.LBB8_3>
    800037e0:	a009                	j	800037e2 <_ZN6kernel2fs3bio3Buf3pin17hb02a509b70e70322E+0x18>
    800037e2:	6522                	ld	a0,8(sp)
    800037e4:	6582                	ld	a1,0(sp)
    800037e6:	658c                	ld	a1,8(a1)
    800037e8:	e188                	sd	a0,0(a1)
    }
    800037ea:	6105                	addi	sp,sp,32
    800037ec:	8082                	ret

00000000800037ee <.LBB8_3>:
        *self.rc_ptr = rc + 1;
    800037ee:	00022517          	auipc	a0,0x22
    800037f2:	48250513          	addi	a0,a0,1154 # 80025c70 <str.1>

00000000800037f6 <.LBB8_4>:
    800037f6:	00022617          	auipc	a2,0x22
    800037fa:	58a60613          	addi	a2,a2,1418 # 80025d80 <.L__unnamed_25>
    800037fe:	45f1                	li	a1,28
    80003800:	0001f097          	auipc	ra,0x1f
    80003804:	a76080e7          	jalr	-1418(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel2fs3bio3Buf5unpin17h781e1439f4d799baE:

000000008000380a <_ZN6kernel2fs3bio3Buf5unpin17h781e1439f4d799baE>:

    /// Unpin the buf.
    /// SAFETY: it should be called matching pin.
    pub unsafe fn unpin(&self) {
    8000380a:	7179                	addi	sp,sp,-48
    8000380c:	e82a                	sd	a0,16(sp)
    8000380e:	f02a                	sd	a0,32(sp)
        let rc = *self.rc_ptr;
    80003810:	6508                	ld	a0,8(a0)
    80003812:	610c                	ld	a1,0(a0)
    80003814:	ec2e                	sd	a1,24(sp)
    80003816:	f42e                	sd	a1,40(sp)
    80003818:	4505                	li	a0,1
        if rc <= 1 {
    8000381a:	02b56163          	bltu	a0,a1,8000383c <.LBB9_6+0x14>
    8000381e:	a009                	j	80003820 <.LBB9_5>

0000000080003820 <.LBB9_5>:
            panic!("buf unpin not match");
    80003820:	00022517          	auipc	a0,0x22
    80003824:	57850513          	addi	a0,a0,1400 # 80025d98 <.L__unnamed_26>

0000000080003828 <.LBB9_6>:
    80003828:	00022617          	auipc	a2,0x22
    8000382c:	58860613          	addi	a2,a2,1416 # 80025db0 <.L__unnamed_27>
    80003830:	45cd                	li	a1,19
    80003832:	0001f097          	auipc	ra,0x1f
    80003836:	a44080e7          	jalr	-1468(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8000383a:	0000                	unimp
        }
        *self.rc_ptr = rc - 1;
    8000383c:	6562                	ld	a0,24(sp)
    8000383e:	fff50593          	addi	a1,a0,-1
    80003842:	e42e                	sd	a1,8(sp)
    80003844:	00b56963          	bltu	a0,a1,80003856 <.LBB9_7>
    80003848:	a009                	j	8000384a <.LBB9_6+0x22>
    8000384a:	6522                	ld	a0,8(sp)
    8000384c:	65c2                	ld	a1,16(sp)
    8000384e:	658c                	ld	a1,8(a1)
    80003850:	e188                	sd	a0,0(a1)
    }
    80003852:	6145                	addi	sp,sp,48
    80003854:	8082                	ret

0000000080003856 <.LBB9_7>:
        *self.rc_ptr = rc - 1;
    80003856:	00022517          	auipc	a0,0x22
    8000385a:	2ca50513          	addi	a0,a0,714 # 80025b20 <str.0>

000000008000385e <.LBB9_8>:
    8000385e:	00022617          	auipc	a2,0x22
    80003862:	56a60613          	addi	a2,a2,1386 # 80025dc8 <.L__unnamed_28>
    80003866:	02100593          	li	a1,33
    8000386a:	0001f097          	auipc	ra,0x1f
    8000386e:	a0c080e7          	jalr	-1524(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel2fs3bio6BufLru11find_cached17h75fa078c96ee4834E:

0000000080003874 <_ZN6kernel2fs3bio6BufLru11find_cached17h75fa078c96ee4834E>:
        }
    }

    /// Find if the requested block is cached.
    /// Return its index and incr the refcnt if found.
    fn find_cached(&mut self, dev: u32, blockno: u32) -> Option<(usize, *mut usize)> {
    80003874:	7119                	addi	sp,sp,-128
    80003876:	fc86                	sd	ra,120(sp)
    80003878:	f42a                	sd	a0,40(sp)
    8000387a:	8536                	mv	a0,a3
    8000387c:	f82a                	sd	a0,48(sp)
    8000387e:	8532                	mv	a0,a2
    80003880:	fc2a                	sd	a0,56(sp)
    80003882:	f0ae                	sd	a1,96(sp)
    80003884:	d4b2                	sw	a2,104(sp)
    80003886:	d6b6                	sw	a3,108(sp)
        let mut b = self.head;
    80003888:	4b05b503          	ld	a0,1200(a1)
    8000388c:	e0aa                	sd	a0,64(sp)
        while !b.is_null() {
    8000388e:	a009                	j	80003890 <_ZN6kernel2fs3bio6BufLru11find_cached17h75fa078c96ee4834E+0x1c>
    80003890:	6506                	ld	a0,64(sp)
    80003892:	00002097          	auipc	ra,0x2
    80003896:	dd8080e7          	jalr	-552(ra) # 8000566a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hee9a0b1c2395b573E>
    8000389a:	f02a                	sd	a0,32(sp)
    8000389c:	a009                	j	8000389e <_ZN6kernel2fs3bio6BufLru11find_cached17h75fa078c96ee4834E+0x2a>
    8000389e:	7502                	ld	a0,32(sp)
    800038a0:	4581                	li	a1,0
    800038a2:	00b50763          	beq	a0,a1,800038b0 <_ZN6kernel2fs3bio6BufLru11find_cached17h75fa078c96ee4834E+0x3c>
    800038a6:	a009                	j	800038a8 <_ZN6kernel2fs3bio6BufLru11find_cached17h75fa078c96ee4834E+0x34>
    800038a8:	75a2                	ld	a1,40(sp)
    800038aa:	4501                	li	a0,0
                bref.refcnt += 1;
                return Some((bref.index, &mut bref.refcnt));
            }
            b = bref.next;
        }
        None
    800038ac:	e188                	sd	a0,0(a1)
    }
    800038ae:	a859                	j	80003944 <.LBB10_16+0x84>
            let bref = unsafe { b.as_mut().unwrap() };
    800038b0:	6506                	ld	a0,64(sp)
    800038b2:	00002097          	auipc	ra,0x2
    800038b6:	d6a080e7          	jalr	-662(ra) # 8000561c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h12167601873b3d53E>
    800038ba:	ec2a                	sd	a0,24(sp)
    800038bc:	a009                	j	800038be <_ZN6kernel2fs3bio6BufLru11find_cached17h75fa078c96ee4834E+0x4a>
    800038be:	6562                	ld	a0,24(sp)

00000000800038c0 <.LBB10_16>:
    800038c0:	00022597          	auipc	a1,0x22
    800038c4:	52058593          	addi	a1,a1,1312 # 80025de0 <.L__unnamed_29>
    800038c8:	0000b097          	auipc	ra,0xb
    800038cc:	374080e7          	jalr	884(ra) # 8000ec3c <_ZN4core6option15Option$LT$T$GT$6unwrap17h34586233d4d65f4cE>
    800038d0:	e82a                	sd	a0,16(sp)
    800038d2:	a009                	j	800038d4 <.LBB10_16+0x14>
    800038d4:	75e2                	ld	a1,56(sp)
    800038d6:	6542                	ld	a0,16(sp)
    800038d8:	f8aa                	sd	a0,112(sp)
            if bref.dev == dev && bref.blockno == blockno {
    800038da:	5108                	lw	a0,32(a0)
    800038dc:	2581                	sext.w	a1,a1
    800038de:	00b50b63          	beq	a0,a1,800038f4 <.LBB10_16+0x34>
    800038e2:	a029                	j	800038ec <.LBB10_16+0x2c>
    800038e4:	4505                	li	a0,1
    800038e6:	04a107a3          	sb	a0,79(sp)
    800038ea:	a821                	j	80003902 <.LBB10_16+0x42>
    800038ec:	4501                	li	a0,0
    800038ee:	04a107a3          	sb	a0,79(sp)
    800038f2:	a801                	j	80003902 <.LBB10_16+0x42>
    800038f4:	75c2                	ld	a1,48(sp)
    800038f6:	6542                	ld	a0,16(sp)
    800038f8:	5148                	lw	a0,36(a0)
    800038fa:	2581                	sext.w	a1,a1
    800038fc:	feb504e3          	beq	a0,a1,800038e4 <.LBB10_16+0x24>
    80003900:	b7f5                	j	800038ec <.LBB10_16+0x2c>
    80003902:	04f14503          	lbu	a0,79(sp)
    80003906:	8905                	andi	a0,a0,1
    80003908:	4581                	li	a1,0
    8000390a:	00b50b63          	beq	a0,a1,80003920 <.LBB10_16+0x60>
    8000390e:	a009                	j	80003910 <.LBB10_16+0x50>
                bref.refcnt += 1;
    80003910:	6542                	ld	a0,16(sp)
    80003912:	690c                	ld	a1,16(a0)
    80003914:	00158513          	addi	a0,a1,1
    80003918:	e42a                	sd	a0,8(sp)
    8000391a:	02b56863          	bltu	a0,a1,8000394a <.LBB10_17>
    8000391e:	a029                	j	80003928 <.LBB10_16+0x68>
            b = bref.next;
    80003920:	6542                	ld	a0,16(sp)
    80003922:	6508                	ld	a0,8(a0)
    80003924:	e0aa                	sd	a0,64(sp)
        while !b.is_null() {
    80003926:	b7ad                	j	80003890 <_ZN6kernel2fs3bio6BufLru11find_cached17h75fa078c96ee4834E+0x1c>
                bref.refcnt += 1;
    80003928:	75a2                	ld	a1,40(sp)
    8000392a:	6642                	ld	a2,16(sp)
    8000392c:	66a2                	ld	a3,8(sp)
    8000392e:	01060513          	addi	a0,a2,16
    80003932:	ea14                	sd	a3,16(a2)
                return Some((bref.index, &mut bref.refcnt));
    80003934:	6e10                	ld	a2,24(a2)
    80003936:	e8b2                	sd	a2,80(sp)
    80003938:	ecaa                	sd	a0,88(sp)
    8000393a:	e590                	sd	a2,8(a1)
    8000393c:	e988                	sd	a0,16(a1)
    8000393e:	4505                	li	a0,1
    80003940:	e188                	sd	a0,0(a1)
    }
    80003942:	a009                	j	80003944 <.LBB10_16+0x84>
    80003944:	70e6                	ld	ra,120(sp)
    80003946:	6109                	addi	sp,sp,128
    80003948:	8082                	ret

000000008000394a <.LBB10_17>:
                bref.refcnt += 1;
    8000394a:	00022517          	auipc	a0,0x22
    8000394e:	32650513          	addi	a0,a0,806 # 80025c70 <str.1>

0000000080003952 <.LBB10_18>:
    80003952:	00022617          	auipc	a2,0x22
    80003956:	4a660613          	addi	a2,a2,1190 # 80025df8 <.L__unnamed_30>
    8000395a:	45f1                	li	a1,28
    8000395c:	0001f097          	auipc	ra,0x1f
    80003960:	91a080e7          	jalr	-1766(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel2fs3bio6BufLru7recycle17h2cc2179c79ac2f75E:

0000000080003966 <_ZN6kernel2fs3bio6BufLru7recycle17h2cc2179c79ac2f75E>:

    /// Recycle an unused buffer from the tail.
    /// Return its index if found.
    fn recycle(&mut self, dev: u32, blockno: u32) -> Option<(usize, *mut usize)> {
    80003966:	7159                	addi	sp,sp,-112
    80003968:	f486                	sd	ra,104(sp)
    8000396a:	f02a                	sd	a0,32(sp)
    8000396c:	8536                	mv	a0,a3
    8000396e:	f42a                	sd	a0,40(sp)
    80003970:	8532                	mv	a0,a2
    80003972:	f82a                	sd	a0,48(sp)
    80003974:	e8ae                	sd	a1,80(sp)
    80003976:	ccb2                	sw	a2,88(sp)
    80003978:	ceb6                	sw	a3,92(sp)
        let mut b = self.tail;
    8000397a:	4b85b503          	ld	a0,1208(a1)
    8000397e:	fc2a                	sd	a0,56(sp)
        while !b.is_null() {
    80003980:	a009                	j	80003982 <_ZN6kernel2fs3bio6BufLru7recycle17h2cc2179c79ac2f75E+0x1c>
    80003982:	7562                	ld	a0,56(sp)
    80003984:	00002097          	auipc	ra,0x2
    80003988:	ce6080e7          	jalr	-794(ra) # 8000566a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hee9a0b1c2395b573E>
    8000398c:	ec2a                	sd	a0,24(sp)
    8000398e:	a009                	j	80003990 <_ZN6kernel2fs3bio6BufLru7recycle17h2cc2179c79ac2f75E+0x2a>
    80003990:	6562                	ld	a0,24(sp)
    80003992:	4581                	li	a1,0
    80003994:	00b50763          	beq	a0,a1,800039a2 <_ZN6kernel2fs3bio6BufLru7recycle17h2cc2179c79ac2f75E+0x3c>
    80003998:	a009                	j	8000399a <_ZN6kernel2fs3bio6BufLru7recycle17h2cc2179c79ac2f75E+0x34>
    8000399a:	7582                	ld	a1,32(sp)
    8000399c:	4501                	li	a0,0
                bref.refcnt += 1;
                return Some((bref.index, &mut bref.refcnt));
            }
            b = bref.prev;
        }
        None
    8000399e:	e188                	sd	a0,0(a1)
    }
    800039a0:	a885                	j	80003a10 <.LBB11_12+0x5e>
            let bref = unsafe { b.as_mut().unwrap() };
    800039a2:	7562                	ld	a0,56(sp)
    800039a4:	00002097          	auipc	ra,0x2
    800039a8:	c78080e7          	jalr	-904(ra) # 8000561c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h12167601873b3d53E>
    800039ac:	e82a                	sd	a0,16(sp)
    800039ae:	a009                	j	800039b0 <_ZN6kernel2fs3bio6BufLru7recycle17h2cc2179c79ac2f75E+0x4a>
    800039b0:	6542                	ld	a0,16(sp)

00000000800039b2 <.LBB11_12>:
    800039b2:	00022597          	auipc	a1,0x22
    800039b6:	45e58593          	addi	a1,a1,1118 # 80025e10 <.L__unnamed_31>
    800039ba:	0000b097          	auipc	ra,0xb
    800039be:	282080e7          	jalr	642(ra) # 8000ec3c <_ZN4core6option15Option$LT$T$GT$6unwrap17h34586233d4d65f4cE>
    800039c2:	e42a                	sd	a0,8(sp)
    800039c4:	a009                	j	800039c6 <.LBB11_12+0x14>
    800039c6:	6522                	ld	a0,8(sp)
    800039c8:	f0aa                	sd	a0,96(sp)
            if bref.refcnt == 0 {
    800039ca:	6908                	ld	a0,16(a0)
    800039cc:	4581                	li	a1,0
    800039ce:	00b51f63          	bne	a0,a1,800039ec <.LBB11_12+0x3a>
    800039d2:	a009                	j	800039d4 <.LBB11_12+0x22>
                bref.dev = dev;
    800039d4:	6522                	ld	a0,8(sp)
    800039d6:	75a2                	ld	a1,40(sp)
    800039d8:	7642                	ld	a2,48(sp)
    800039da:	d110                	sw	a2,32(a0)
                bref.blockno = blockno;
    800039dc:	d14c                	sw	a1,36(a0)
                bref.refcnt += 1;
    800039de:	690c                	ld	a1,16(a0)
    800039e0:	00158513          	addi	a0,a1,1
    800039e4:	e02a                	sd	a0,0(sp)
    800039e6:	02b56863          	bltu	a0,a1,80003a16 <.LBB11_13>
    800039ea:	a029                	j	800039f4 <.LBB11_12+0x42>
            b = bref.prev;
    800039ec:	6522                	ld	a0,8(sp)
    800039ee:	6108                	ld	a0,0(a0)
    800039f0:	fc2a                	sd	a0,56(sp)
        while !b.is_null() {
    800039f2:	bf41                	j	80003982 <_ZN6kernel2fs3bio6BufLru7recycle17h2cc2179c79ac2f75E+0x1c>
                bref.refcnt += 1;
    800039f4:	7582                	ld	a1,32(sp)
    800039f6:	6622                	ld	a2,8(sp)
    800039f8:	6682                	ld	a3,0(sp)
    800039fa:	01060513          	addi	a0,a2,16
    800039fe:	ea14                	sd	a3,16(a2)
                return Some((bref.index, &mut bref.refcnt));
    80003a00:	6e10                	ld	a2,24(a2)
    80003a02:	e0b2                	sd	a2,64(sp)
    80003a04:	e4aa                	sd	a0,72(sp)
    80003a06:	e590                	sd	a2,8(a1)
    80003a08:	e988                	sd	a0,16(a1)
    80003a0a:	4505                	li	a0,1
    80003a0c:	e188                	sd	a0,0(a1)
    }
    80003a0e:	a009                	j	80003a10 <.LBB11_12+0x5e>
    80003a10:	70a6                	ld	ra,104(sp)
    80003a12:	6165                	addi	sp,sp,112
    80003a14:	8082                	ret

0000000080003a16 <.LBB11_13>:
                bref.refcnt += 1;
    80003a16:	00022517          	auipc	a0,0x22
    80003a1a:	25a50513          	addi	a0,a0,602 # 80025c70 <str.1>

0000000080003a1e <.LBB11_14>:
    80003a1e:	00022617          	auipc	a2,0x22
    80003a22:	40a60613          	addi	a2,a2,1034 # 80025e28 <.L__unnamed_32>
    80003a26:	45f1                	li	a1,28
    80003a28:	0001f097          	auipc	ra,0x1f
    80003a2c:	84e080e7          	jalr	-1970(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE:

0000000080003a32 <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE>:

    /// Move an entry to the head if no live ref.
    fn move_if_no_ref(&mut self, index: usize) {
    80003a32:	7175                	addi	sp,sp,-144
    80003a34:	e506                	sd	ra,136(sp)
    80003a36:	fc2e                	sd	a1,56(sp)
    80003a38:	e0aa                	sd	a0,64(sp)
    80003a3a:	fcaa                	sd	a0,120(sp)
    80003a3c:	e12e                	sd	a1,128(sp)
    80003a3e:	4575                	li	a0,29
        let b = &mut self.inner[index];
    80003a40:	14b56763          	bltu	a0,a1,80003b8e <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0x15c>
    80003a44:	a009                	j	80003a46 <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0x14>
    80003a46:	6506                	ld	a0,64(sp)
    80003a48:	75e2                	ld	a1,56(sp)
    80003a4a:	02800613          	li	a2,40
    80003a4e:	02c585b3          	mul	a1,a1,a2
    80003a52:	952e                	add	a0,a0,a1
    80003a54:	e8aa                	sd	a0,80(sp)
        b.refcnt -= 1;
    80003a56:	6908                	ld	a0,16(a0)
    80003a58:	fff50593          	addi	a1,a0,-1
    80003a5c:	f82e                	sd	a1,48(sp)
    80003a5e:	14b56363          	bltu	a0,a1,80003ba4 <.LBB12_30>
    80003a62:	a009                	j	80003a64 <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0x32>
    80003a64:	7542                	ld	a0,48(sp)
    80003a66:	65c6                	ld	a1,80(sp)
    80003a68:	e988                	sd	a0,16(a1)
        if b.refcnt == 0 && !ptr::eq(self.head, b) {
    80003a6a:	6546                	ld	a0,80(sp)
    80003a6c:	6908                	ld	a0,16(a0)
    80003a6e:	4581                	li	a1,0
    80003a70:	00b50b63          	beq	a0,a1,80003a86 <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0x54>
    80003a74:	a029                	j	80003a7e <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0x4c>
    80003a76:	4505                	li	a0,1
    80003a78:	04a10f23          	sb	a0,94(sp)
    80003a7c:	a839                	j	80003a9a <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0x68>
    80003a7e:	4501                	li	a0,0
    80003a80:	04a10f23          	sb	a0,94(sp)
    80003a84:	a819                	j	80003a9a <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0x68>
    80003a86:	6506                	ld	a0,64(sp)
    80003a88:	4b053503          	ld	a0,1200(a0)
    80003a8c:	65c6                	ld	a1,80(sp)
    80003a8e:	00015097          	auipc	ra,0x15
    80003a92:	b9e080e7          	jalr	-1122(ra) # 8001862c <_ZN4core3ptr2eq17h2ab91a60e465e9ebE>
    80003a96:	f42a                	sd	a0,40(sp)
    80003a98:	a031                	j	80003aa4 <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0x72>
    80003a9a:	05e14503          	lbu	a0,94(sp)
    80003a9e:	8905                	andi	a0,a0,1
    80003aa0:	e519                	bnez	a0,80003aae <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0x7c>
    80003aa2:	a005                	j	80003ac2 <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0x90>
    80003aa4:	7522                	ld	a0,40(sp)
    80003aa6:	4581                	li	a1,0
    80003aa8:	fcb507e3          	beq	a0,a1,80003a76 <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0x44>
    80003aac:	bfc9                	j	80003a7e <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0x4c>
            // forward the tail if b is at the tail
            // b may be the only entry in the lru list
            if ptr::eq(self.tail, b) && !b.prev.is_null() {
    80003aae:	6506                	ld	a0,64(sp)
    80003ab0:	4b853503          	ld	a0,1208(a0)
    80003ab4:	65c6                	ld	a1,80(sp)
    80003ab6:	00015097          	auipc	ra,0x15
    80003aba:	b76080e7          	jalr	-1162(ra) # 8001862c <_ZN4core3ptr2eq17h2ab91a60e465e9ebE>
    80003abe:	f02a                	sd	a0,32(sp)
    80003ac0:	a03d                	j	80003aee <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0xbc>
        if b.refcnt == 0 && !ptr::eq(self.head, b) {
    80003ac2:	a0d9                	j	80003b88 <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0x156>
    80003ac4:	4505                	li	a0,1
            if ptr::eq(self.tail, b) && !b.prev.is_null() {
    80003ac6:	04a10fa3          	sb	a0,95(sp)
    80003aca:	a829                	j	80003ae4 <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0xb2>
    80003acc:	4501                	li	a0,0
    80003ace:	04a10fa3          	sb	a0,95(sp)
    80003ad2:	a809                	j	80003ae4 <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0xb2>
    80003ad4:	6546                	ld	a0,80(sp)
    80003ad6:	6108                	ld	a0,0(a0)
    80003ad8:	00002097          	auipc	ra,0x2
    80003adc:	b92080e7          	jalr	-1134(ra) # 8000566a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hee9a0b1c2395b573E>
    80003ae0:	ec2a                	sd	a0,24(sp)
    80003ae2:	a809                	j	80003af4 <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0xc2>
    80003ae4:	05f14503          	lbu	a0,95(sp)
    80003ae8:	8905                	andi	a0,a0,1
    80003aea:	e911                	bnez	a0,80003afe <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0xcc>
    80003aec:	a839                	j	80003b0a <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0xd8>
    80003aee:	7502                	ld	a0,32(sp)
    80003af0:	f175                	bnez	a0,80003ad4 <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0xa2>
    80003af2:	bfe9                	j	80003acc <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0x9a>
    80003af4:	6562                	ld	a0,24(sp)
    80003af6:	4581                	li	a1,0
    80003af8:	fcb506e3          	beq	a0,a1,80003ac4 <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0x92>
    80003afc:	bfc1                	j	80003acc <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0x9a>
                self.tail = b.prev;
    80003afe:	6586                	ld	a1,64(sp)
    80003b00:	6546                	ld	a0,80(sp)
    80003b02:	6108                	ld	a0,0(a0)
    80003b04:	4aa5bc23          	sd	a0,1208(a1)
            if ptr::eq(self.tail, b) && !b.prev.is_null() {
    80003b08:	a011                	j	80003b0c <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0xda>
    80003b0a:	a009                	j	80003b0c <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0xda>
            }
            
            // detach b
            unsafe {
                b.next.as_mut().map(|b_next| b_next.prev = b.prev);
    80003b0c:	6546                	ld	a0,80(sp)
    80003b0e:	6508                	ld	a0,8(a0)
    80003b10:	00002097          	auipc	ra,0x2
    80003b14:	b0c080e7          	jalr	-1268(ra) # 8000561c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h12167601873b3d53E>
    80003b18:	e82a                	sd	a0,16(sp)
    80003b1a:	a009                	j	80003b1c <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0xea>
    80003b1c:	6542                	ld	a0,16(sp)
    80003b1e:	088c                	addi	a1,sp,80
    80003b20:	f0ae                	sd	a1,96(sp)
    80003b22:	0000b097          	auipc	ra,0xb
    80003b26:	9dc080e7          	jalr	-1572(ra) # 8000e4fe <_ZN4core6option15Option$LT$T$GT$3map17ha9a8f16b0aa2a3f1E>
    80003b2a:	a009                	j	80003b2c <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0xfa>
                b.prev.as_mut().map(|b_prev| b_prev.next = b.next);
    80003b2c:	6546                	ld	a0,80(sp)
    80003b2e:	6108                	ld	a0,0(a0)
    80003b30:	00002097          	auipc	ra,0x2
    80003b34:	aec080e7          	jalr	-1300(ra) # 8000561c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h12167601873b3d53E>
    80003b38:	e42a                	sd	a0,8(sp)
    80003b3a:	a009                	j	80003b3c <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0x10a>
    80003b3c:	6522                	ld	a0,8(sp)
    80003b3e:	088c                	addi	a1,sp,80
    80003b40:	f4ae                	sd	a1,104(sp)
    80003b42:	0000b097          	auipc	ra,0xb
    80003b46:	a7e080e7          	jalr	-1410(ra) # 8000e5c0 <_ZN4core6option15Option$LT$T$GT$3map17hd4472e66f8c522f7E>
    80003b4a:	a009                	j	80003b4c <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0x11a>
            }

            // attach b
            b.prev = ptr::null_mut();
    80003b4c:	a009                	j	80003b4e <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0x11c>
    80003b4e:	6506                	ld	a0,64(sp)
    80003b50:	6646                	ld	a2,80(sp)
    80003b52:	4581                	li	a1,0
    80003b54:	e20c                	sd	a1,0(a2)
            b.next = self.head;
    80003b56:	4b053583          	ld	a1,1200(a0)
    80003b5a:	6646                	ld	a2,80(sp)
    80003b5c:	e60c                	sd	a1,8(a2)
            unsafe {
                self.head.as_mut().map(|old_head| old_head.prev = b);
    80003b5e:	4b053503          	ld	a0,1200(a0)
    80003b62:	00002097          	auipc	ra,0x2
    80003b66:	aba080e7          	jalr	-1350(ra) # 8000561c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h12167601873b3d53E>
    80003b6a:	e02a                	sd	a0,0(sp)
    80003b6c:	a009                	j	80003b6e <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0x13c>
    80003b6e:	6502                	ld	a0,0(sp)
    80003b70:	088c                	addi	a1,sp,80
    80003b72:	f8ae                	sd	a1,112(sp)
    80003b74:	0000b097          	auipc	ra,0xb
    80003b78:	aaa080e7          	jalr	-1366(ra) # 8000e61e <_ZN4core6option15Option$LT$T$GT$3map17hf813a527d3b93241E>
    80003b7c:	a009                	j	80003b7e <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0x14c>
            }
            self.head = b;
    80003b7e:	6586                	ld	a1,64(sp)
    80003b80:	6546                	ld	a0,80(sp)
    80003b82:	4aa5b823          	sd	a0,1200(a1)
        if b.refcnt == 0 && !ptr::eq(self.head, b) {
    80003b86:	a009                	j	80003b88 <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0x156>
        }
    }
    80003b88:	60aa                	ld	ra,136(sp)
    80003b8a:	6149                	addi	sp,sp,144
    80003b8c:	8082                	ret
        let b = &mut self.inner[index];
    80003b8e:	7562                	ld	a0,56(sp)

0000000080003b90 <.LBB12_29>:
    80003b90:	00022617          	auipc	a2,0x22
    80003b94:	2b060613          	addi	a2,a2,688 # 80025e40 <.L__unnamed_33>
    80003b98:	45f9                	li	a1,30
    80003b9a:	0001e097          	auipc	ra,0x1e
    80003b9e:	708080e7          	jalr	1800(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

0000000080003ba4 <.LBB12_30>:
        b.refcnt -= 1;
    80003ba4:	00022517          	auipc	a0,0x22
    80003ba8:	f7c50513          	addi	a0,a0,-132 # 80025b20 <str.0>

0000000080003bac <.LBB12_31>:
    80003bac:	00022617          	auipc	a2,0x22
    80003bb0:	2ac60613          	addi	a2,a2,684 # 80025e58 <.L__unnamed_34>
    80003bb4:	02100593          	li	a1,33
    80003bb8:	0001e097          	auipc	ra,0x1e
    80003bbc:	6be080e7          	jalr	1726(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN42_$LT$u8$u20$as$u20$bit_field..BitField$GT$7get_bit17h5d59737ea892b952E:

0000000080003bc2 <_ZN42_$LT$u8$u20$as$u20$bit_field..BitField$GT$7get_bit17h5d59737ea892b952E>:
    ($($t:ty)*) => ($(
        impl BitField for $t {
            const BIT_LENGTH: usize = ::core::mem::size_of::<Self>() as usize * 8;

            #[inline]
            fn get_bit(&self, bit: usize) -> bool {
    80003bc2:	7179                	addi	sp,sp,-48
    80003bc4:	e82e                	sd	a1,16(sp)
    80003bc6:	ec2a                	sd	a0,24(sp)
    80003bc8:	f02a                	sd	a0,32(sp)
    80003bca:	f42e                	sd	a1,40(sp)
    80003bcc:	4521                	li	a0,8
                assert!(bit < Self::BIT_LENGTH);
    80003bce:	02a5e263          	bltu	a1,a0,80003bf2 <.LBB0_6+0x16>
    80003bd2:	a009                	j	80003bd4 <.LBB0_5>

0000000080003bd4 <.LBB0_5>:
    80003bd4:	00022517          	auipc	a0,0x22
    80003bd8:	29c50513          	addi	a0,a0,668 # 80025e70 <.L__unnamed_1>

0000000080003bdc <.LBB0_6>:
    80003bdc:	00022617          	auipc	a2,0x22
    80003be0:	31c60613          	addi	a2,a2,796 # 80025ef8 <.L__unnamed_2>
    80003be4:	02800593          	li	a1,40
    80003be8:	0001e097          	auipc	ra,0x1e
    80003bec:	68e080e7          	jalr	1678(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80003bf0:	0000                	unimp

                (*self & (1 << bit)) != 0
    80003bf2:	65c2                	ld	a1,16(sp)
    80003bf4:	6562                	ld	a0,24(sp)
    80003bf6:	00054503          	lbu	a0,0(a0)
    80003bfa:	e02a                	sd	a0,0(sp)
    80003bfc:	ff85f513          	andi	a0,a1,-8
    80003c00:	0075f613          	andi	a2,a1,7
    80003c04:	4585                	li	a1,1
    80003c06:	00c595b3          	sll	a1,a1,a2
    80003c0a:	e42e                	sd	a1,8(sp)
    80003c0c:	4581                	li	a1,0
    80003c0e:	00b51a63          	bne	a0,a1,80003c22 <.LBB0_7>
    80003c12:	a009                	j	80003c14 <.LBB0_6+0x38>
    80003c14:	6502                	ld	a0,0(sp)
    80003c16:	65a2                	ld	a1,8(sp)
    80003c18:	8d6d                	and	a0,a0,a1
    80003c1a:	00a03533          	snez	a0,a0
            }
    80003c1e:	6145                	addi	sp,sp,48
    80003c20:	8082                	ret

0000000080003c22 <.LBB0_7>:
                (*self & (1 << bit)) != 0
    80003c22:	00022517          	auipc	a0,0x22
    80003c26:	2ee50513          	addi	a0,a0,750 # 80025f10 <str.0>

0000000080003c2a <.LBB0_8>:
    80003c2a:	00022617          	auipc	a2,0x22
    80003c2e:	2ce60613          	addi	a2,a2,718 # 80025ef8 <.L__unnamed_2>
    80003c32:	02300593          	li	a1,35
    80003c36:	0001e097          	auipc	ra,0x1e
    80003c3a:	640080e7          	jalr	1600(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN42_$LT$u8$u20$as$u20$bit_field..BitField$GT$7set_bit17ha97cadf2a55a43d3E:

0000000080003c40 <_ZN42_$LT$u8$u20$as$u20$bit_field..BitField$GT$7set_bit17ha97cadf2a55a43d3E>:
                // shift away low bits
                bits >> range.start
            }

            #[inline]
            fn set_bit(&mut self, bit: usize, value: bool) -> &mut Self {
    80003c40:	7139                	addi	sp,sp,-64
    80003c42:	e82e                	sd	a1,16(sp)
    80003c44:	ec2a                	sd	a0,24(sp)
    80003c46:	86b2                	mv	a3,a2
    80003c48:	f036                	sd	a3,32(sp)
    80003c4a:	f42a                	sd	a0,40(sp)
    80003c4c:	f82e                	sd	a1,48(sp)
    80003c4e:	02c10fa3          	sb	a2,63(sp)
    80003c52:	4521                	li	a0,8
                assert!(bit < Self::BIT_LENGTH);
    80003c54:	02a5e263          	bltu	a1,a0,80003c78 <.LBB1_11+0x16>
    80003c58:	a009                	j	80003c5a <.LBB1_10>

0000000080003c5a <.LBB1_10>:
    80003c5a:	00022517          	auipc	a0,0x22
    80003c5e:	21650513          	addi	a0,a0,534 # 80025e70 <.L__unnamed_1>

0000000080003c62 <.LBB1_11>:
    80003c62:	00022617          	auipc	a2,0x22
    80003c66:	29660613          	addi	a2,a2,662 # 80025ef8 <.L__unnamed_2>
    80003c6a:	02800593          	li	a1,40
    80003c6e:	0001e097          	auipc	ra,0x1e
    80003c72:	608080e7          	jalr	1544(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80003c76:	0000                	unimp
    80003c78:	7502                	ld	a0,32(sp)
    80003c7a:	4581                	li	a1,0

                if value {
    80003c7c:	02b50063          	beq	a0,a1,80003c9c <.LBB1_11+0x3a>
    80003c80:	a009                	j	80003c82 <.LBB1_11+0x20>
                    *self |= 1 << bit;
    80003c82:	65c2                	ld	a1,16(sp)
    80003c84:	ff85f513          	andi	a0,a1,-8
    80003c88:	0075f613          	andi	a2,a1,7
    80003c8c:	4585                	li	a1,1
    80003c8e:	00c595b3          	sll	a1,a1,a2
    80003c92:	e42e                	sd	a1,8(sp)
    80003c94:	4581                	li	a1,0
    80003c96:	04b51563          	bne	a0,a1,80003ce0 <.LBB1_12>
    80003c9a:	a831                	j	80003cb6 <.LBB1_11+0x54>
                } else {
                    *self &= !(1 << bit);
    80003c9c:	65c2                	ld	a1,16(sp)
    80003c9e:	ff85f513          	andi	a0,a1,-8
    80003ca2:	0075f613          	andi	a2,a1,7
    80003ca6:	4585                	li	a1,1
    80003ca8:	00c595b3          	sll	a1,a1,a2
    80003cac:	e02e                	sd	a1,0(sp)
    80003cae:	4581                	li	a1,0
    80003cb0:	04b51763          	bne	a0,a1,80003cfe <.LBB1_14>
    80003cb4:	a809                	j	80003cc6 <.LBB1_11+0x64>
                    *self |= 1 << bit;
    80003cb6:	65e2                	ld	a1,24(sp)
    80003cb8:	6622                	ld	a2,8(sp)
    80003cba:	00058503          	lb	a0,0(a1)
    80003cbe:	8d51                	or	a0,a0,a2
    80003cc0:	00a58023          	sb	a0,0(a1)
                if value {
    80003cc4:	a819                	j	80003cda <.LBB1_11+0x78>
                    *self &= !(1 << bit);
    80003cc6:	65e2                	ld	a1,24(sp)
    80003cc8:	6502                	ld	a0,0(sp)
    80003cca:	fff54613          	not	a2,a0
    80003cce:	00058503          	lb	a0,0(a1)
    80003cd2:	8d71                	and	a0,a0,a2
    80003cd4:	00a58023          	sb	a0,0(a1)
                if value {
    80003cd8:	a009                	j	80003cda <.LBB1_11+0x78>
                }

                self
            }
    80003cda:	6562                	ld	a0,24(sp)
    80003cdc:	6121                	addi	sp,sp,64
    80003cde:	8082                	ret

0000000080003ce0 <.LBB1_12>:
                    *self |= 1 << bit;
    80003ce0:	00022517          	auipc	a0,0x22
    80003ce4:	23050513          	addi	a0,a0,560 # 80025f10 <str.0>

0000000080003ce8 <.LBB1_13>:
    80003ce8:	00022617          	auipc	a2,0x22
    80003cec:	21060613          	addi	a2,a2,528 # 80025ef8 <.L__unnamed_2>
    80003cf0:	02300593          	li	a1,35
    80003cf4:	0001e097          	auipc	ra,0x1e
    80003cf8:	582080e7          	jalr	1410(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080003cfe <.LBB1_14>:
                    *self &= !(1 << bit);
    80003cfe:	00022517          	auipc	a0,0x22
    80003d02:	21250513          	addi	a0,a0,530 # 80025f10 <str.0>

0000000080003d06 <.LBB1_15>:
    80003d06:	00022617          	auipc	a2,0x22
    80003d0a:	1f260613          	addi	a2,a2,498 # 80025ef8 <.L__unnamed_2>
    80003d0e:	02300593          	li	a1,35
    80003d12:	0001e097          	auipc	ra,0x1e
    80003d16:	564080e7          	jalr	1380(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN45_$LT$usize$u20$as$u20$bit_field..BitField$GT$7get_bit17ha84b909d1dae7859E:

0000000080003d1c <_ZN45_$LT$usize$u20$as$u20$bit_field..BitField$GT$7get_bit17ha84b909d1dae7859E>:
            fn get_bit(&self, bit: usize) -> bool {
    80003d1c:	7179                	addi	sp,sp,-48
    80003d1e:	e82e                	sd	a1,16(sp)
    80003d20:	ec2a                	sd	a0,24(sp)
    80003d22:	f02a                	sd	a0,32(sp)
    80003d24:	f42e                	sd	a1,40(sp)
    80003d26:	04000513          	li	a0,64
                assert!(bit < Self::BIT_LENGTH);
    80003d2a:	02a5e263          	bltu	a1,a0,80003d4e <.LBB2_6+0x16>
    80003d2e:	a009                	j	80003d30 <.LBB2_5>

0000000080003d30 <.LBB2_5>:
    80003d30:	00022517          	auipc	a0,0x22
    80003d34:	14050513          	addi	a0,a0,320 # 80025e70 <.L__unnamed_1>

0000000080003d38 <.LBB2_6>:
    80003d38:	00022617          	auipc	a2,0x22
    80003d3c:	1c060613          	addi	a2,a2,448 # 80025ef8 <.L__unnamed_2>
    80003d40:	02800593          	li	a1,40
    80003d44:	0001e097          	auipc	ra,0x1e
    80003d48:	532080e7          	jalr	1330(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80003d4c:	0000                	unimp
                (*self & (1 << bit)) != 0
    80003d4e:	6642                	ld	a2,16(sp)
    80003d50:	6562                	ld	a0,24(sp)
    80003d52:	6108                	ld	a0,0(a0)
    80003d54:	e02a                	sd	a0,0(sp)
    80003d56:	fc067513          	andi	a0,a2,-64
    80003d5a:	4585                	li	a1,1
    80003d5c:	00c595b3          	sll	a1,a1,a2
    80003d60:	e42e                	sd	a1,8(sp)
    80003d62:	4581                	li	a1,0
    80003d64:	00b51a63          	bne	a0,a1,80003d78 <.LBB2_7>
    80003d68:	a009                	j	80003d6a <.LBB2_6+0x32>
    80003d6a:	6502                	ld	a0,0(sp)
    80003d6c:	65a2                	ld	a1,8(sp)
    80003d6e:	8d6d                	and	a0,a0,a1
    80003d70:	00a03533          	snez	a0,a0
            }
    80003d74:	6145                	addi	sp,sp,48
    80003d76:	8082                	ret

0000000080003d78 <.LBB2_7>:
                (*self & (1 << bit)) != 0
    80003d78:	00022517          	auipc	a0,0x22
    80003d7c:	19850513          	addi	a0,a0,408 # 80025f10 <str.0>

0000000080003d80 <.LBB2_8>:
    80003d80:	00022617          	auipc	a2,0x22
    80003d84:	17860613          	addi	a2,a2,376 # 80025ef8 <.L__unnamed_2>
    80003d88:	02300593          	li	a1,35
    80003d8c:	0001e097          	auipc	ra,0x1e
    80003d90:	4ea080e7          	jalr	1258(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN45_$LT$usize$u20$as$u20$bit_field..BitField$GT$7set_bit17h956504fd5d951209E:

0000000080003d96 <_ZN45_$LT$usize$u20$as$u20$bit_field..BitField$GT$7set_bit17h956504fd5d951209E>:
            fn set_bit(&mut self, bit: usize, value: bool) -> &mut Self {
    80003d96:	7139                	addi	sp,sp,-64
    80003d98:	e82e                	sd	a1,16(sp)
    80003d9a:	ec2a                	sd	a0,24(sp)
    80003d9c:	86b2                	mv	a3,a2
    80003d9e:	f036                	sd	a3,32(sp)
    80003da0:	f42a                	sd	a0,40(sp)
    80003da2:	f82e                	sd	a1,48(sp)
    80003da4:	02c10fa3          	sb	a2,63(sp)
    80003da8:	04000513          	li	a0,64
                assert!(bit < Self::BIT_LENGTH);
    80003dac:	02a5e263          	bltu	a1,a0,80003dd0 <.LBB3_11+0x16>
    80003db0:	a009                	j	80003db2 <.LBB3_10>

0000000080003db2 <.LBB3_10>:
    80003db2:	00022517          	auipc	a0,0x22
    80003db6:	0be50513          	addi	a0,a0,190 # 80025e70 <.L__unnamed_1>

0000000080003dba <.LBB3_11>:
    80003dba:	00022617          	auipc	a2,0x22
    80003dbe:	13e60613          	addi	a2,a2,318 # 80025ef8 <.L__unnamed_2>
    80003dc2:	02800593          	li	a1,40
    80003dc6:	0001e097          	auipc	ra,0x1e
    80003dca:	4b0080e7          	jalr	1200(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80003dce:	0000                	unimp
    80003dd0:	7502                	ld	a0,32(sp)
    80003dd2:	4581                	li	a1,0
                if value {
    80003dd4:	00b50e63          	beq	a0,a1,80003df0 <.LBB3_11+0x36>
    80003dd8:	a009                	j	80003dda <.LBB3_11+0x20>
                    *self |= 1 << bit;
    80003dda:	6642                	ld	a2,16(sp)
    80003ddc:	fc067513          	andi	a0,a2,-64
    80003de0:	4585                	li	a1,1
    80003de2:	00c595b3          	sll	a1,a1,a2
    80003de6:	e42e                	sd	a1,8(sp)
    80003de8:	4581                	li	a1,0
    80003dea:	02b51f63          	bne	a0,a1,80003e28 <.LBB3_12>
    80003dee:	a821                	j	80003e06 <.LBB3_11+0x4c>
                    *self &= !(1 << bit);
    80003df0:	6642                	ld	a2,16(sp)
    80003df2:	fc067513          	andi	a0,a2,-64
    80003df6:	4585                	li	a1,1
    80003df8:	00c595b3          	sll	a1,a1,a2
    80003dfc:	e02e                	sd	a1,0(sp)
    80003dfe:	4581                	li	a1,0
    80003e00:	04b51363          	bne	a0,a1,80003e46 <.LBB3_14>
    80003e04:	a039                	j	80003e12 <.LBB3_11+0x58>
                    *self |= 1 << bit;
    80003e06:	65e2                	ld	a1,24(sp)
    80003e08:	6622                	ld	a2,8(sp)
    80003e0a:	6188                	ld	a0,0(a1)
    80003e0c:	8d51                	or	a0,a0,a2
    80003e0e:	e188                	sd	a0,0(a1)
                if value {
    80003e10:	a809                	j	80003e22 <.LBB3_11+0x68>
                    *self &= !(1 << bit);
    80003e12:	65e2                	ld	a1,24(sp)
    80003e14:	6502                	ld	a0,0(sp)
    80003e16:	fff54613          	not	a2,a0
    80003e1a:	6188                	ld	a0,0(a1)
    80003e1c:	8d71                	and	a0,a0,a2
    80003e1e:	e188                	sd	a0,0(a1)
                if value {
    80003e20:	a009                	j	80003e22 <.LBB3_11+0x68>
            }
    80003e22:	6562                	ld	a0,24(sp)
    80003e24:	6121                	addi	sp,sp,64
    80003e26:	8082                	ret

0000000080003e28 <.LBB3_12>:
                    *self |= 1 << bit;
    80003e28:	00022517          	auipc	a0,0x22
    80003e2c:	0e850513          	addi	a0,a0,232 # 80025f10 <str.0>

0000000080003e30 <.LBB3_13>:
    80003e30:	00022617          	auipc	a2,0x22
    80003e34:	0c860613          	addi	a2,a2,200 # 80025ef8 <.L__unnamed_2>
    80003e38:	02300593          	li	a1,35
    80003e3c:	0001e097          	auipc	ra,0x1e
    80003e40:	43a080e7          	jalr	1082(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080003e46 <.LBB3_14>:
                    *self &= !(1 << bit);
    80003e46:	00022517          	auipc	a0,0x22
    80003e4a:	0ca50513          	addi	a0,a0,202 # 80025f10 <str.0>

0000000080003e4e <.LBB3_15>:
    80003e4e:	00022617          	auipc	a2,0x22
    80003e52:	0aa60613          	addi	a2,a2,170 # 80025ef8 <.L__unnamed_2>
    80003e56:	02300593          	li	a1,35
    80003e5a:	0001e097          	auipc	ra,0x1e
    80003e5e:	41c080e7          	jalr	1052(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel6driver7console4putc17h15d6d35ca2ac864eE:

0000000080003e64 <_ZN6kernel6driver7console4putc17h15d6d35ca2ac864eE>:
        }
    }
}

/// Put a single character to console. 
pub(crate) fn putc(c: u8) {
    80003e64:	1101                	addi	sp,sp,-32
    80003e66:	ec06                	sd	ra,24(sp)
    80003e68:	85aa                	mv	a1,a0
    80003e6a:	0ff5f513          	andi	a0,a1,255
    80003e6e:	862e                	mv	a2,a1
    80003e70:	e432                	sd	a2,8(sp)
    80003e72:	00b10ba3          	sb	a1,23(sp)
    80003e76:	45a1                	li	a1,8
    if c == CTRL_BS {
    80003e78:	00b51963          	bne	a0,a1,80003e8a <_ZN6kernel6driver7console4putc17h15d6d35ca2ac864eE+0x26>
    80003e7c:	a009                	j	80003e7e <_ZN6kernel6driver7console4putc17h15d6d35ca2ac864eE+0x1a>
    80003e7e:	4521                	li	a0,8
        putc_sync(CTRL_BS);
    80003e80:	00018097          	auipc	ra,0x18
    80003e84:	866080e7          	jalr	-1946(ra) # 8001b6e6 <_ZN6kernel6driver4uart9putc_sync17h8ef1d9e0f2a8eae2E>
    80003e88:	a039                	j	80003e96 <_ZN6kernel6driver7console4putc17h15d6d35ca2ac864eE+0x32>
        putc_sync(b' ');
        putc_sync(CTRL_BS);
    } else {
        putc_sync(c);
    80003e8a:	6522                	ld	a0,8(sp)
    80003e8c:	00018097          	auipc	ra,0x18
    80003e90:	85a080e7          	jalr	-1958(ra) # 8001b6e6 <_ZN6kernel6driver4uart9putc_sync17h8ef1d9e0f2a8eae2E>
    80003e94:	a839                	j	80003eb2 <_ZN6kernel6driver7console4putc17h15d6d35ca2ac864eE+0x4e>
    80003e96:	02000513          	li	a0,32
        putc_sync(b' ');
    80003e9a:	00018097          	auipc	ra,0x18
    80003e9e:	84c080e7          	jalr	-1972(ra) # 8001b6e6 <_ZN6kernel6driver4uart9putc_sync17h8ef1d9e0f2a8eae2E>
    80003ea2:	a009                	j	80003ea4 <_ZN6kernel6driver7console4putc17h15d6d35ca2ac864eE+0x40>
    80003ea4:	4521                	li	a0,8
        putc_sync(CTRL_BS);
    80003ea6:	00018097          	auipc	ra,0x18
    80003eaa:	840080e7          	jalr	-1984(ra) # 8001b6e6 <_ZN6kernel6driver4uart9putc_sync17h8ef1d9e0f2a8eae2E>
    80003eae:	a009                	j	80003eb0 <_ZN6kernel6driver7console4putc17h15d6d35ca2ac864eE+0x4c>
    if c == CTRL_BS {
    80003eb0:	a011                	j	80003eb4 <_ZN6kernel6driver7console4putc17h15d6d35ca2ac864eE+0x50>
    80003eb2:	a009                	j	80003eb4 <_ZN6kernel6driver7console4putc17h15d6d35ca2ac864eE+0x50>
    }
}
    80003eb4:	60e2                	ld	ra,24(sp)
    80003eb6:	6105                	addi	sp,sp,32
    80003eb8:	8082                	ret

Disassembly of section .text._ZN6kernel6driver7console12console_read17hbad5452084e392ddE:

0000000080003eba <_ZN6kernel6driver7console12console_read17hbad5452084e392ddE>:

/// User read from the console go here. 
/// copy a whole input line to dst. 
/// is_user indicated whether dst is a user
/// or kernel address. 
pub(super) fn console_read(
    80003eba:	712d                	addi	sp,sp,-288
    80003ebc:	ee06                	sd	ra,280(sp)
    80003ebe:	ed32                	sd	a2,152(sp)
    80003ec0:	86aa                	mv	a3,a0
    80003ec2:	f136                	sd	a3,160(sp)
    80003ec4:	f52e                	sd	a1,168(sp)
    80003ec6:	0ea10fa3          	sb	a0,255(sp)
    80003eca:	e232                	sd	a2,256(sp)

0000000080003ecc <.LBB1_45>:
    is_user: bool, 
    mut dst: usize, 
    size: usize
) -> Option<usize> {
    let mut console = CONSOLE.acquire();
    80003ecc:	00033517          	auipc	a0,0x33
    80003ed0:	59450513          	addi	a0,a0,1428 # 80037460 <_ZN6kernel6driver7console7CONSOLE17h7fc6e38a093b4810E>
    80003ed4:	0000c097          	auipc	ra,0xc
    80003ed8:	5ba080e7          	jalr	1466(ra) # 8001048e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h431ef48b95a5e4c6E>
    80003edc:	e1aa                	sd	a0,192(sp)
    80003ede:	a009                	j	80003ee0 <.LBB1_45+0x14>

    let mut left = size;
    80003ee0:	656a                	ld	a0,152(sp)
    80003ee2:	e5aa                	sd	a0,200(sp)
    while left > 0 {
    80003ee4:	a009                	j	80003ee6 <.LBB1_45+0x1a>
    80003ee6:	652e                	ld	a0,200(sp)
    80003ee8:	4581                	li	a1,0
    80003eea:	00b51463          	bne	a0,a1,80003ef2 <.LBB1_45+0x26>
    80003eee:	a009                	j	80003ef0 <.LBB1_45+0x24>
    80003ef0:	a2f1                	j	800040bc <.LBB1_49+0x108>
    80003ef2:	0188                	addi	a0,sp,192
        // if no available data in console buf 
        // wait until the console device write some data. 
        while console.read_index == console.write_index {
    80003ef4:	0000d097          	auipc	ra,0xd
    80003ef8:	724080e7          	jalr	1828(ra) # 80011618 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8f385c8b975788d5E>
    80003efc:	e92a                	sd	a0,144(sp)
    80003efe:	a009                	j	80003f00 <.LBB1_45+0x34>
    80003f00:	654a                	ld	a0,144(sp)
    80003f02:	e12a                	sd	a0,128(sp)
    80003f04:	0188                	addi	a0,sp,192
    80003f06:	0000d097          	auipc	ra,0xd
    80003f0a:	712080e7          	jalr	1810(ra) # 80011618 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8f385c8b975788d5E>
    80003f0e:	e52a                	sd	a0,136(sp)
    80003f10:	a009                	j	80003f12 <.LBB1_45+0x46>
    80003f12:	650a                	ld	a0,128(sp)
    80003f14:	65aa                	ld	a1,136(sp)
    80003f16:	05a1                	addi	a1,a1,8
    80003f18:	0000b097          	auipc	ra,0xb
    80003f1c:	734080e7          	jalr	1844(ra) # 8000f64c <_ZN79_$LT$core..num..wrapping..Wrapping$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h94523e3cd63d6752E>
    80003f20:	fcaa                	sd	a0,120(sp)
    80003f22:	a009                	j	80003f24 <.LBB1_45+0x58>
    80003f24:	7566                	ld	a0,120(sp)
    80003f26:	e909                	bnez	a0,80003f38 <.LBB1_46>
    80003f28:	a009                	j	80003f2a <.LBB1_45+0x5e>
    80003f2a:	0188                	addi	a0,sp,192
            p.sleep(&console.read_index as *const _ as usize, console);
            console = CONSOLE.acquire();
        }

        // read
        let c = console.buf[console.read_index.0 % INPUT_BUF];
    80003f2c:	0000d097          	auipc	ra,0xd
    80003f30:	6ec080e7          	jalr	1772(ra) # 80011618 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8f385c8b975788d5E>
    80003f34:	f8aa                	sd	a0,112(sp)
    80003f36:	a861                	j	80003fce <.LBB1_49+0x1a>

0000000080003f38 <.LBB1_46>:
                CPU_MANAGER.myproc().expect("Fail to get my process")
    80003f38:	0006f517          	auipc	a0,0x6f
    80003f3c:	20850513          	addi	a0,a0,520 # 80073140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    80003f40:	0000e097          	auipc	ra,0xe
    80003f44:	ebe080e7          	jalr	-322(ra) # 80011dfe <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    80003f48:	f4aa                	sd	a0,104(sp)
    80003f4a:	a009                	j	80003f4c <.LBB1_46+0x14>
    80003f4c:	7526                	ld	a0,104(sp)

0000000080003f4e <.LBB1_47>:
    80003f4e:	00022597          	auipc	a1,0x22
    80003f52:	fec58593          	addi	a1,a1,-20 # 80025f3a <.L__unnamed_1>

0000000080003f56 <.LBB1_48>:
    80003f56:	00022697          	auipc	a3,0x22
    80003f5a:	01268693          	addi	a3,a3,18 # 80025f68 <.L__unnamed_2>
    80003f5e:	4659                	li	a2,22
    80003f60:	0000b097          	auipc	ra,0xb
    80003f64:	c00080e7          	jalr	-1024(ra) # 8000eb60 <_ZN4core6option15Option$LT$T$GT$6expect17h5cc0070b74d715b8E>
    80003f68:	f0aa                	sd	a0,96(sp)
    80003f6a:	a009                	j	80003f6c <.LBB1_48+0x16>
    80003f6c:	7506                	ld	a0,96(sp)
    80003f6e:	e62a                	sd	a0,264(sp)
            if p.killed() {
    80003f70:	00012097          	auipc	ra,0x12
    80003f74:	084080e7          	jalr	132(ra) # 80015ff4 <_ZN6kernel7process7process11task_struct6killed17h4fc8d78e83fc4243E>
    80003f78:	ecaa                	sd	a0,88(sp)
    80003f7a:	a009                	j	80003f7c <.LBB1_48+0x26>
    80003f7c:	6566                	ld	a0,88(sp)
    80003f7e:	4581                	li	a1,0
    80003f80:	00b50b63          	beq	a0,a1,80003f96 <.LBB1_48+0x40>
    80003f84:	a009                	j	80003f86 <.LBB1_48+0x30>
    80003f86:	4501                	li	a0,0
                return None
    80003f88:	f92a                	sd	a0,176(sp)
    80003f8a:	0188                	addi	a0,sp,192
        }
    }
    // 结果应该返回读取的字节数
    let ret = size - left;
    Some(ret)
}
    80003f8c:	00003097          	auipc	ra,0x3
    80003f90:	0f6080e7          	jalr	246(ra) # 80007082 <_ZN4core3ptr98drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..driver..console..Console$GT$$GT$17hbea8b3b0221deadaE>
    80003f94:	a2b9                	j	800040e2 <.LBB1_49+0x12e>
    80003f96:	0188                	addi	a0,sp,192
            p.sleep(&console.read_index as *const _ as usize, console);
    80003f98:	0000d097          	auipc	ra,0xd
    80003f9c:	680080e7          	jalr	1664(ra) # 80011618 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8f385c8b975788d5E>
    80003fa0:	e8aa                	sd	a0,80(sp)
    80003fa2:	a009                	j	80003fa4 <.LBB1_48+0x4e>
    80003fa4:	65c6                	ld	a1,80(sp)
    80003fa6:	7506                	ld	a0,96(sp)
    80003fa8:	660e                	ld	a2,192(sp)
    80003faa:	0000e097          	auipc	ra,0xe
    80003fae:	d60080e7          	jalr	-672(ra) # 80011d0a <_ZN6kernel7process7process11task_struct5sleep17hcd4817f58ebdb572E>
    80003fb2:	a009                	j	80003fb4 <.LBB1_49>

0000000080003fb4 <.LBB1_49>:
            console = CONSOLE.acquire();
    80003fb4:	00033517          	auipc	a0,0x33
    80003fb8:	4ac50513          	addi	a0,a0,1196 # 80037460 <_ZN6kernel6driver7console7CONSOLE17h7fc6e38a093b4810E>
    80003fbc:	0000c097          	auipc	ra,0xc
    80003fc0:	4d2080e7          	jalr	1234(ra) # 8001048e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h431ef48b95a5e4c6E>
    80003fc4:	e4aa                	sd	a0,72(sp)
    80003fc6:	a009                	j	80003fc8 <.LBB1_49+0x14>
    80003fc8:	6526                	ld	a0,72(sp)
    80003fca:	e1aa                	sd	a0,192(sp)
        while console.read_index == console.write_index {
    80003fcc:	b71d                	j	80003ef2 <.LBB1_45+0x26>
    80003fce:	0188                	addi	a0,sp,192
        let c = console.buf[console.read_index.0 % INPUT_BUF];
    80003fd0:	0000d097          	auipc	ra,0xd
    80003fd4:	648080e7          	jalr	1608(ra) # 80011618 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8f385c8b975788d5E>
    80003fd8:	e0aa                	sd	a0,64(sp)
    80003fda:	a009                	j	80003fdc <.LBB1_49+0x28>
    80003fdc:	6506                	ld	a0,64(sp)
    80003fde:	6108                	ld	a0,0(a0)
    80003fe0:	07f57593          	andi	a1,a0,127
    80003fe4:	fc2e                	sd	a1,56(sp)
    80003fe6:	07f00513          	li	a0,127
    80003fea:	10b56163          	bltu	a0,a1,800040ec <.LBB1_49+0x138>
    80003fee:	a009                	j	80003ff0 <.LBB1_49+0x3c>
    80003ff0:	7546                	ld	a0,112(sp)
    80003ff2:	75e2                	ld	a1,56(sp)
    80003ff4:	952e                	add	a0,a0,a1
    80003ff6:	01850503          	lb	a0,24(a0)
    80003ffa:	0ca10ba3          	sb	a0,215(sp)
    80003ffe:	0188                	addi	a0,sp,192
        console.read_index += Wrapping(1);
    80004000:	0000d097          	auipc	ra,0xd
    80004004:	6f6080e7          	jalr	1782(ra) # 800116f6 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h6db8254bcc254a19E>
    80004008:	f82a                	sd	a0,48(sp)
    8000400a:	a009                	j	8000400c <.LBB1_49+0x58>
    8000400c:	7542                	ld	a0,48(sp)
    8000400e:	4585                	li	a1,1
    80004010:	edae                	sd	a1,216(sp)
    80004012:	00003097          	auipc	ra,0x3
    80004016:	418080e7          	jalr	1048(ra) # 8000742a <_ZN90_$LT$core..num..wrapping..Wrapping$LT$usize$GT$$u20$as$u20$core..ops..arith..AddAssign$GT$10add_assign17hc731864567f3481aE>
    8000401a:	a009                	j	8000401c <.LBB1_49+0x68>
        if c == CTRL_EOT {
    8000401c:	0d714503          	lbu	a0,215(sp)
    80004020:	4591                	li	a1,4
    80004022:	00b51863          	bne	a0,a1,80004032 <.LBB1_49+0x7e>
    80004026:	a009                	j	80004028 <.LBB1_49+0x74>
            if left < size {
    80004028:	65ea                	ld	a1,152(sp)
    8000402a:	652e                	ld	a0,200(sp)
    8000402c:	00b56f63          	bltu	a0,a1,8000404a <.LBB1_49+0x96>
    80004030:	a025                	j	80004058 <.LBB1_49+0xa4>
        if copy_from_kernel(is_user, dst, &c as *const u8, 1).is_err() {
    80004032:	750a                	ld	a0,160(sp)
    80004034:	75aa                	ld	a1,168(sp)
    80004036:	0d710613          	addi	a2,sp,215
    8000403a:	4685                	li	a3,1
    8000403c:	0001a097          	auipc	ra,0x1a
    80004040:	c06080e7          	jalr	-1018(ra) # 8001dc42 <_ZN6kernel6memory16copy_from_kernel17hf0969988b3a5fbc0E>
    80004044:	f5aa                	sd	a0,232(sp)
    80004046:	f9ae                	sd	a1,240(sp)
    80004048:	a01d                	j	8000406e <.LBB1_49+0xba>
    8000404a:	0188                	addi	a0,sp,192
                console.read_index -= Wrapping(1);
    8000404c:	0000d097          	auipc	ra,0xd
    80004050:	6aa080e7          	jalr	1706(ra) # 800116f6 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h6db8254bcc254a19E>
    80004054:	f42a                	sd	a0,40(sp)
    80004056:	a011                	j	8000405a <.LBB1_49+0xa6>
            if left < size {
    80004058:	a811                	j	8000406c <.LBB1_49+0xb8>
    8000405a:	7522                	ld	a0,40(sp)
    8000405c:	4585                	li	a1,1
                console.read_index -= Wrapping(1);
    8000405e:	f1ae                	sd	a1,224(sp)
    80004060:	00003097          	auipc	ra,0x3
    80004064:	3ee080e7          	jalr	1006(ra) # 8000744e <_ZN90_$LT$core..num..wrapping..Wrapping$LT$usize$GT$$u20$as$u20$core..ops..arith..SubAssign$GT$10sub_assign17h67a53f3fa0ccb70bE>
    80004068:	a009                	j	8000406a <.LBB1_49+0xb6>
            if left < size {
    8000406a:	a009                	j	8000406c <.LBB1_49+0xb8>
    8000406c:	a881                	j	800040bc <.LBB1_49+0x108>
    8000406e:	11a8                	addi	a0,sp,232
        if copy_from_kernel(is_user, dst, &c as *const u8, 1).is_err() {
    80004070:	00009097          	auipc	ra,0x9
    80004074:	cee080e7          	jalr	-786(ra) # 8000cd5e <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h304118d236359d80E>
    80004078:	f02a                	sd	a0,32(sp)
    8000407a:	a009                	j	8000407c <.LBB1_49+0xc8>
    8000407c:	7502                	ld	a0,32(sp)
    8000407e:	4581                	li	a1,0
    80004080:	00b50463          	beq	a0,a1,80004088 <.LBB1_49+0xd4>
    80004084:	a009                	j	80004086 <.LBB1_49+0xd2>
    80004086:	a81d                	j	800040bc <.LBB1_49+0x108>
        dst += 1;
    80004088:	75aa                	ld	a1,168(sp)
    8000408a:	00158513          	addi	a0,a1,1
    8000408e:	ec2a                	sd	a0,24(sp)
    80004090:	06b56a63          	bltu	a0,a1,80004104 <.LBB1_51>
    80004094:	a009                	j	80004096 <.LBB1_49+0xe2>
    80004096:	6562                	ld	a0,24(sp)
    80004098:	f52a                	sd	a0,168(sp)
        left -= 1;
    8000409a:	652e                	ld	a0,200(sp)
    8000409c:	fff50593          	addi	a1,a0,-1
    800040a0:	e82e                	sd	a1,16(sp)
    800040a2:	06b56f63          	bltu	a0,a1,80004120 <.LBB1_53>
    800040a6:	a009                	j	800040a8 <.LBB1_49+0xf4>
    800040a8:	6542                	ld	a0,16(sp)
    800040aa:	e5aa                	sd	a0,200(sp)
        if c == CTRL_LF {
    800040ac:	0d714503          	lbu	a0,215(sp)
    800040b0:	45a9                	li	a1,10
    800040b2:	00b51463          	bne	a0,a1,800040ba <.LBB1_49+0x106>
    800040b6:	a009                	j	800040b8 <.LBB1_49+0x104>
    800040b8:	a011                	j	800040bc <.LBB1_49+0x108>
    while left > 0 {
    800040ba:	b535                	j	80003ee6 <.LBB1_45+0x1a>
    let ret = size - left;
    800040bc:	656a                	ld	a0,152(sp)
    800040be:	65ae                	ld	a1,200(sp)
    800040c0:	40b505b3          	sub	a1,a0,a1
    800040c4:	e42e                	sd	a1,8(sp)
    800040c6:	06b56c63          	bltu	a0,a1,8000413e <.LBB1_55>
    800040ca:	a009                	j	800040cc <.LBB1_49+0x118>
    800040cc:	6522                	ld	a0,8(sp)
    800040ce:	ea2a                	sd	a0,272(sp)
    Some(ret)
    800040d0:	fd2a                	sd	a0,184(sp)
    800040d2:	4505                	li	a0,1
    800040d4:	f92a                	sd	a0,176(sp)
    800040d6:	0188                	addi	a0,sp,192
}
    800040d8:	00003097          	auipc	ra,0x3
    800040dc:	faa080e7          	jalr	-86(ra) # 80007082 <_ZN4core3ptr98drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..driver..console..Console$GT$$GT$17hbea8b3b0221deadaE>
    800040e0:	a009                	j	800040e2 <.LBB1_49+0x12e>
    800040e2:	754a                	ld	a0,176(sp)
    800040e4:	75ea                	ld	a1,184(sp)
    800040e6:	60f2                	ld	ra,280(sp)
    800040e8:	6115                	addi	sp,sp,288
    800040ea:	8082                	ret
        let c = console.buf[console.read_index.0 % INPUT_BUF];
    800040ec:	7562                	ld	a0,56(sp)

00000000800040ee <.LBB1_50>:
    800040ee:	00022617          	auipc	a2,0x22
    800040f2:	e9260613          	addi	a2,a2,-366 # 80025f80 <.L__unnamed_3>
    800040f6:	08000593          	li	a1,128
    800040fa:	0001e097          	auipc	ra,0x1e
    800040fe:	1a8080e7          	jalr	424(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

0000000080004104 <.LBB1_51>:
        dst += 1;
    80004104:	00022517          	auipc	a0,0x22
    80004108:	eac50513          	addi	a0,a0,-340 # 80025fb0 <str.0>

000000008000410c <.LBB1_52>:
    8000410c:	00022617          	auipc	a2,0x22
    80004110:	e8c60613          	addi	a2,a2,-372 # 80025f98 <.L__unnamed_4>
    80004114:	45f1                	li	a1,28
    80004116:	0001e097          	auipc	ra,0x1e
    8000411a:	160080e7          	jalr	352(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080004120 <.LBB1_53>:
        left -= 1;
    80004120:	00022517          	auipc	a0,0x22
    80004124:	ed050513          	addi	a0,a0,-304 # 80025ff0 <str.1>

0000000080004128 <.LBB1_54>:
    80004128:	00022617          	auipc	a2,0x22
    8000412c:	ea860613          	addi	a2,a2,-344 # 80025fd0 <.L__unnamed_5>
    80004130:	02100593          	li	a1,33
    80004134:	0001e097          	auipc	ra,0x1e
    80004138:	142080e7          	jalr	322(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008000413e <.LBB1_55>:
    let ret = size - left;
    8000413e:	00022517          	auipc	a0,0x22
    80004142:	eb250513          	addi	a0,a0,-334 # 80025ff0 <str.1>

0000000080004146 <.LBB1_56>:
    80004146:	00022617          	auipc	a2,0x22
    8000414a:	ed260613          	addi	a2,a2,-302 # 80026018 <.L__unnamed_6>
    8000414e:	02100593          	li	a1,33
    80004152:	0001e097          	auipc	ra,0x1e
    80004156:	124080e7          	jalr	292(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel6driver7console13console_write17h0e125bdbb626dc42E:

000000008000415c <_ZN6kernel6driver7console13console_write17h0e125bdbb626dc42E>:

/// User write to the console go here. 
pub(super) fn console_write(
    8000415c:	7155                	addi	sp,sp,-208
    8000415e:	e586                	sd	ra,200(sp)
    80004160:	f032                	sd	a2,32(sp)
    80004162:	862e                	mv	a2,a1
    80004164:	7582                	ld	a1,32(sp)
    80004166:	86aa                	mv	a3,a0
    80004168:	f436                	sd	a3,40(sp)
    8000416a:	e0b2                	sd	a2,64(sp)
    8000416c:	0aa103a3          	sb	a0,167(sp)
    80004170:	f52e                	sd	a1,168(sp)
    80004172:	4501                	li	a0,0
    is_user: bool,
    mut src: usize,
    size: usize
) -> Option<usize> {
    for i in 0..size {
    80004174:	ecaa                	sd	a0,88(sp)
    80004176:	f0ae                	sd	a1,96(sp)
    80004178:	0001b097          	auipc	ra,0x1b
    8000417c:	7ca080e7          	jalr	1994(ra) # 8001f942 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he0a8d93712e5493bE>
    80004180:	f82a                	sd	a0,48(sp)
    80004182:	fc2e                	sd	a1,56(sp)
    80004184:	a009                	j	80004186 <_ZN6kernel6driver7console13console_write17h0e125bdbb626dc42E+0x2a>
    80004186:	7562                	ld	a0,56(sp)
    80004188:	75c2                	ld	a1,48(sp)
    8000418a:	f4ae                	sd	a1,104(sp)
    8000418c:	f8aa                	sd	a0,112(sp)
    8000418e:	a009                	j	80004190 <_ZN6kernel6driver7console13console_write17h0e125bdbb626dc42E+0x34>
    80004190:	10a8                	addi	a0,sp,104
    80004192:	0001b097          	auipc	ra,0x1b
    80004196:	742080e7          	jalr	1858(ra) # 8001f8d4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE>
    8000419a:	fcaa                	sd	a0,120(sp)
    8000419c:	e12e                	sd	a1,128(sp)
    8000419e:	a009                	j	800041a0 <_ZN6kernel6driver7console13console_write17h0e125bdbb626dc42E+0x44>
    800041a0:	7566                	ld	a0,120(sp)
    800041a2:	4581                	li	a1,0
    800041a4:	00b50463          	beq	a0,a1,800041ac <_ZN6kernel6driver7console13console_write17h0e125bdbb626dc42E+0x50>
    800041a8:	a009                	j	800041aa <_ZN6kernel6driver7console13console_write17h0e125bdbb626dc42E+0x4e>
    800041aa:	a039                	j	800041b8 <_ZN6kernel6driver7console13console_write17h0e125bdbb626dc42E+0x5c>
            return Some(i)
        }
        UART.putc(c);
        src += 1;
    }
    Some(size)
    800041ac:	7502                	ld	a0,32(sp)
    800041ae:	e8aa                	sd	a0,80(sp)
    800041b0:	4505                	li	a0,1
    800041b2:	e4aa                	sd	a0,72(sp)
}
    800041b4:	a8a5                	j	8000422c <.LBB2_16+0x26>
    for i in 0..size {
    800041b6:	0000                	unimp
    800041b8:	75a2                	ld	a1,40(sp)
    800041ba:	650a                	ld	a0,128(sp)
    800041bc:	ec2a                	sd	a0,24(sp)
    800041be:	f92a                	sd	a0,176(sp)
    800041c0:	fd2a                	sd	a0,184(sp)
    800041c2:	e1aa                	sd	a0,192(sp)
    800041c4:	4501                	li	a0,0
        let mut c = 0u8;
    800041c6:	08a107a3          	sb	a0,143(sp)
        if copy_to_kernel(&mut c as *mut u8, is_user, src, 1).is_err() {
    800041ca:	6606                	ld	a2,64(sp)
    800041cc:	08f10513          	addi	a0,sp,143
    800041d0:	4685                	li	a3,1
    800041d2:	0001a097          	auipc	ra,0x1a
    800041d6:	9c0080e7          	jalr	-1600(ra) # 8001db92 <_ZN6kernel6memory14copy_to_kernel17hd4730b664342d99cE>
    800041da:	e92a                	sd	a0,144(sp)
    800041dc:	ed2e                	sd	a1,152(sp)
    800041de:	a009                	j	800041e0 <_ZN6kernel6driver7console13console_write17h0e125bdbb626dc42E+0x84>
    800041e0:	0908                	addi	a0,sp,144
    800041e2:	00009097          	auipc	ra,0x9
    800041e6:	b7c080e7          	jalr	-1156(ra) # 8000cd5e <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h304118d236359d80E>
    800041ea:	e82a                	sd	a0,16(sp)
    800041ec:	a009                	j	800041ee <_ZN6kernel6driver7console13console_write17h0e125bdbb626dc42E+0x92>
    800041ee:	6542                	ld	a0,16(sp)
    800041f0:	4581                	li	a1,0
    800041f2:	00b50863          	beq	a0,a1,80004202 <_ZN6kernel6driver7console13console_write17h0e125bdbb626dc42E+0xa6>
    800041f6:	a009                	j	800041f8 <_ZN6kernel6driver7console13console_write17h0e125bdbb626dc42E+0x9c>
            return Some(i)
    800041f8:	6562                	ld	a0,24(sp)
    800041fa:	e8aa                	sd	a0,80(sp)
    800041fc:	4505                	li	a0,1
    800041fe:	e4aa                	sd	a0,72(sp)
}
    80004200:	a035                	j	8000422c <.LBB2_16+0x26>
        UART.putc(c);
    80004202:	08f10583          	lb	a1,143(sp)

0000000080004206 <.LBB2_16>:
    80004206:	00065517          	auipc	a0,0x65
    8000420a:	65a50513          	addi	a0,a0,1626 # 80069860 <_ZN6kernel6driver4uart4UART17h0708b3e179d548ddE>
    8000420e:	00006097          	auipc	ra,0x6
    80004212:	b82080e7          	jalr	-1150(ra) # 80009d90 <_ZN6kernel6driver4uart84_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..driver..uart..Uart$GT$$GT$4putc17h6cd19d349a1fe87bE>
    80004216:	a009                	j	80004218 <.LBB2_16+0x12>
        src += 1;
    80004218:	6586                	ld	a1,64(sp)
    8000421a:	00158513          	addi	a0,a1,1
    8000421e:	e42a                	sd	a0,8(sp)
    80004220:	00b56b63          	bltu	a0,a1,80004236 <.LBB2_17>
    80004224:	a009                	j	80004226 <.LBB2_16+0x20>
    80004226:	6522                	ld	a0,8(sp)
    80004228:	e0aa                	sd	a0,64(sp)
    for i in 0..size {
    8000422a:	b79d                	j	80004190 <_ZN6kernel6driver7console13console_write17h0e125bdbb626dc42E+0x34>
}
    8000422c:	6526                	ld	a0,72(sp)
    8000422e:	65c6                	ld	a1,80(sp)
    80004230:	60ae                	ld	ra,200(sp)
    80004232:	6169                	addi	sp,sp,208
    80004234:	8082                	ret

0000000080004236 <.LBB2_17>:
        src += 1;
    80004236:	00022517          	auipc	a0,0x22
    8000423a:	d7a50513          	addi	a0,a0,-646 # 80025fb0 <str.0>

000000008000423e <.LBB2_18>:
    8000423e:	00022617          	auipc	a2,0x22
    80004242:	df260613          	addi	a2,a2,-526 # 80026030 <.L__unnamed_7>
    80004246:	45f1                	li	a1,28
    80004248:	0001e097          	auipc	ra,0x1e
    8000424c:	02e080e7          	jalr	46(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel6driver7console12console_intr17hcdedd3169cb49f5fE:

0000000080004252 <_ZN6kernel6driver7console12console_intr17hcdedd3169cb49f5fE>:
/// The normal routine is: 
/// 1. user input;
/// 2. uart handler interrupt;
/// 3. console handle interrupt. 
/// 4. console echo back input or do extra controlling. 
pub(super) fn console_intr(c: u8) {
    80004252:	710d                	addi	sp,sp,-352
    80004254:	ee86                	sd	ra,344(sp)
    80004256:	85aa                	mv	a1,a0
    80004258:	e22e                	sd	a1,256(sp)
    8000425a:	14a107a3          	sb	a0,335(sp)

000000008000425e <.LBB3_73>:
    let mut console = CONSOLE.acquire();
    8000425e:	00033517          	auipc	a0,0x33
    80004262:	20250513          	addi	a0,a0,514 # 80037460 <_ZN6kernel6driver7console7CONSOLE17h7fc6e38a093b4810E>
    80004266:	0000c097          	auipc	ra,0xc
    8000426a:	228080e7          	jalr	552(ra) # 8001048e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h431ef48b95a5e4c6E>
    8000426e:	ea2a                	sd	a0,272(sp)
    80004270:	a009                	j	80004272 <.LBB3_73+0x14>

    match c {
        CTRL_PRINT_PROCESS => {
    80004272:	6512                	ld	a0,256(sp)
    80004274:	0ff57513          	andi	a0,a0,255
    80004278:	45a1                	li	a1,8
    8000427a:	12b50663          	beq	a0,a1,800043a6 <.LBB3_74+0xec>
    8000427e:	a009                	j	80004280 <.LBB3_73+0x22>
    80004280:	6512                	ld	a0,256(sp)
    80004282:	0ff57513          	andi	a0,a0,255
    80004286:	45c1                	li	a1,16
    80004288:	02b50963          	beq	a0,a1,800042ba <.LBB3_74>
    8000428c:	a009                	j	8000428e <.LBB3_73+0x30>
    8000428e:	6512                	ld	a0,256(sp)
    80004290:	0ff57513          	andi	a0,a0,255
    80004294:	45d5                	li	a1,21
    80004296:	02b50c63          	beq	a0,a1,800042ce <.LBB3_74+0x14>
    8000429a:	a009                	j	8000429c <.LBB3_73+0x3e>
    8000429c:	6512                	ld	a0,256(sp)
    8000429e:	0ff57513          	andi	a0,a0,255
    800042a2:	07f00593          	li	a1,127
    800042a6:	10b50063          	beq	a0,a1,800043a6 <.LBB3_74+0xec>
    800042aa:	a009                	j	800042ac <.LBB3_73+0x4e>
            }
        },

        _ => {
            // echo back
            if c != 0 && (console.edit_index - console.read_index).0 < INPUT_BUF {
    800042ac:	6512                	ld	a0,256(sp)
    800042ae:	0ff57513          	andi	a0,a0,255
    800042b2:	4581                	li	a1,0
    800042b4:	16b50463          	beq	a0,a1,8000441c <.LBB3_74+0x162>
    800042b8:	a2b5                	j	80004424 <.LBB3_74+0x16a>

00000000800042ba <.LBB3_74>:
                PROC_MANAGER.proc_dump();
    800042ba:	00053517          	auipc	a0,0x53
    800042be:	2e650513          	addi	a0,a0,742 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    800042c2:	0000a097          	auipc	ra,0xa
    800042c6:	f52080e7          	jalr	-174(ra) # 8000e214 <_ZN6kernel7process7manager11ProcManager9proc_dump17h983bd5c89559ec59E>
    800042ca:	a009                	j	800042cc <.LBB3_74+0x12>
    match c {
    800042cc:	ae01                	j	800045dc <.LBB3_75+0x14>
    800042ce:	0a08                	addi	a0,sp,272
            while console.edit_index != console.write_index &&
    800042d0:	0000d097          	auipc	ra,0xd
    800042d4:	348080e7          	jalr	840(ra) # 80011618 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8f385c8b975788d5E>
    800042d8:	fdaa                	sd	a0,248(sp)
    800042da:	a02d                	j	80004304 <.LBB3_74+0x4a>
    800042dc:	4505                	li	a0,1
    800042de:	10a10fa3          	sb	a0,287(sp)
    800042e2:	a821                	j	800042fa <.LBB3_74+0x40>
    800042e4:	4501                	li	a0,0
    800042e6:	10a10fa3          	sb	a0,287(sp)
    800042ea:	a801                	j	800042fa <.LBB3_74+0x40>
    800042ec:	0a08                	addi	a0,sp,272
            console.buf[(console.edit_index - Wrapping(1)).0 % INPUT_BUF] != CTRL_LF {
    800042ee:	0000d097          	auipc	ra,0xd
    800042f2:	32a080e7          	jalr	810(ra) # 80011618 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8f385c8b975788d5E>
    800042f6:	f9aa                	sd	a0,240(sp)
    800042f8:	a825                	j	80004330 <.LBB3_74+0x76>
            while console.edit_index != console.write_index &&
    800042fa:	11f14503          	lbu	a0,287(sp)
    800042fe:	8905                	andi	a0,a0,1
    80004300:	ed25                	bnez	a0,80004378 <.LBB3_74+0xbe>
    80004302:	a895                	j	80004376 <.LBB3_74+0xbc>
    80004304:	756e                	ld	a0,248(sp)
    80004306:	0541                	addi	a0,a0,16
    80004308:	f1aa                	sd	a0,224(sp)
    8000430a:	0a08                	addi	a0,sp,272
    8000430c:	0000d097          	auipc	ra,0xd
    80004310:	30c080e7          	jalr	780(ra) # 80011618 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8f385c8b975788d5E>
    80004314:	f5aa                	sd	a0,232(sp)
    80004316:	a009                	j	80004318 <.LBB3_74+0x5e>
    80004318:	750e                	ld	a0,224(sp)
    8000431a:	75ae                	ld	a1,232(sp)
    8000431c:	05a1                	addi	a1,a1,8
    8000431e:	0000b097          	auipc	ra,0xb
    80004322:	34e080e7          	jalr	846(ra) # 8000f66c <_ZN79_$LT$core..num..wrapping..Wrapping$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2ne17h2d3bd6a577efe0b1E>
    80004326:	edaa                	sd	a0,216(sp)
    80004328:	a009                	j	8000432a <.LBB3_74+0x70>
    8000432a:	656e                	ld	a0,216(sp)
    8000432c:	f161                	bnez	a0,800042ec <.LBB3_74+0x32>
    8000432e:	bf5d                	j	800042e4 <.LBB3_74+0x2a>
    80004330:	0a08                	addi	a0,sp,272
            console.buf[(console.edit_index - Wrapping(1)).0 % INPUT_BUF] != CTRL_LF {
    80004332:	0000d097          	auipc	ra,0xd
    80004336:	2e6080e7          	jalr	742(ra) # 80011618 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8f385c8b975788d5E>
    8000433a:	e9aa                	sd	a0,208(sp)
    8000433c:	a009                	j	8000433e <.LBB3_74+0x84>
    8000433e:	654e                	ld	a0,208(sp)
    80004340:	6908                	ld	a0,16(a0)
    80004342:	4585                	li	a1,1
    80004344:	f22e                	sd	a1,288(sp)
    80004346:	00003097          	auipc	ra,0x3
    8000434a:	0c6080e7          	jalr	198(ra) # 8000740c <_ZN84_$LT$core..num..wrapping..Wrapping$LT$usize$GT$$u20$as$u20$core..ops..arith..Sub$GT$3sub17h09c98f8a3aa1050aE>
    8000434e:	e5aa                	sd	a0,200(sp)
    80004350:	a009                	j	80004352 <.LBB3_74+0x98>
    80004352:	652e                	ld	a0,200(sp)
    80004354:	07f57593          	andi	a1,a0,127
    80004358:	e1ae                	sd	a1,192(sp)
    8000435a:	07f00513          	li	a0,127
    8000435e:	2ab56463          	bltu	a0,a1,80004606 <.LBB3_76+0x16>
    80004362:	a009                	j	80004364 <.LBB3_74+0xaa>
    80004364:	754e                	ld	a0,240(sp)
    80004366:	658e                	ld	a1,192(sp)
    80004368:	952e                	add	a0,a0,a1
    8000436a:	01854503          	lbu	a0,24(a0)
    8000436e:	45a9                	li	a1,10
            while console.edit_index != console.write_index &&
    80004370:	f6b516e3          	bne	a0,a1,800042dc <.LBB3_74+0x22>
    80004374:	bf85                	j	800042e4 <.LBB3_74+0x2a>
    match c {
    80004376:	a49d                	j	800045dc <.LBB3_75+0x14>
    80004378:	0a08                	addi	a0,sp,272
                console.edit_index -= Wrapping(1);
    8000437a:	0000d097          	auipc	ra,0xd
    8000437e:	37c080e7          	jalr	892(ra) # 800116f6 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h6db8254bcc254a19E>
    80004382:	fd2a                	sd	a0,184(sp)
    80004384:	a009                	j	80004386 <.LBB3_74+0xcc>
    80004386:	756a                	ld	a0,184(sp)
    80004388:	0541                	addi	a0,a0,16
    8000438a:	4585                	li	a1,1
    8000438c:	f62e                	sd	a1,296(sp)
    8000438e:	00003097          	auipc	ra,0x3
    80004392:	0c0080e7          	jalr	192(ra) # 8000744e <_ZN90_$LT$core..num..wrapping..Wrapping$LT$usize$GT$$u20$as$u20$core..ops..arith..SubAssign$GT$10sub_assign17h67a53f3fa0ccb70bE>
    80004396:	a009                	j	80004398 <.LBB3_74+0xde>
    80004398:	4521                	li	a0,8
                putc(CTRL_BS);
    8000439a:	00000097          	auipc	ra,0x0
    8000439e:	aca080e7          	jalr	-1334(ra) # 80003e64 <_ZN6kernel6driver7console4putc17h15d6d35ca2ac864eE>
    800043a2:	a009                	j	800043a4 <.LBB3_74+0xea>
            while console.edit_index != console.write_index &&
    800043a4:	b72d                	j	800042ce <.LBB3_74+0x14>
    800043a6:	0a08                	addi	a0,sp,272
            if console.edit_index != console.write_index {
    800043a8:	0000d097          	auipc	ra,0xd
    800043ac:	270080e7          	jalr	624(ra) # 80011618 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8f385c8b975788d5E>
    800043b0:	f92a                	sd	a0,176(sp)
    800043b2:	a009                	j	800043b4 <.LBB3_74+0xfa>
    800043b4:	754a                	ld	a0,176(sp)
    800043b6:	0541                	addi	a0,a0,16
    800043b8:	f12a                	sd	a0,160(sp)
    800043ba:	0a08                	addi	a0,sp,272
    800043bc:	0000d097          	auipc	ra,0xd
    800043c0:	25c080e7          	jalr	604(ra) # 80011618 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8f385c8b975788d5E>
    800043c4:	f52a                	sd	a0,168(sp)
    800043c6:	a009                	j	800043c8 <.LBB3_74+0x10e>
    800043c8:	750a                	ld	a0,160(sp)
    800043ca:	75aa                	ld	a1,168(sp)
    800043cc:	05a1                	addi	a1,a1,8
    800043ce:	0000b097          	auipc	ra,0xb
    800043d2:	29e080e7          	jalr	670(ra) # 8000f66c <_ZN79_$LT$core..num..wrapping..Wrapping$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2ne17h2d3bd6a577efe0b1E>
    800043d6:	ed2a                	sd	a0,152(sp)
    800043d8:	a009                	j	800043da <.LBB3_74+0x120>
    800043da:	656a                	ld	a0,152(sp)
    800043dc:	4581                	li	a1,0
    800043de:	00b50a63          	beq	a0,a1,800043f2 <.LBB3_74+0x138>
    800043e2:	a009                	j	800043e4 <.LBB3_74+0x12a>
    800043e4:	0a08                	addi	a0,sp,272
                console.edit_index -= Wrapping(1);
    800043e6:	0000d097          	auipc	ra,0xd
    800043ea:	310080e7          	jalr	784(ra) # 800116f6 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h6db8254bcc254a19E>
    800043ee:	e92a                	sd	a0,144(sp)
    800043f0:	a011                	j	800043f4 <.LBB3_74+0x13a>
            if console.edit_index != console.write_index {
    800043f2:	a2ed                	j	800045dc <.LBB3_75+0x14>
                console.edit_index -= Wrapping(1);
    800043f4:	654a                	ld	a0,144(sp)
    800043f6:	0541                	addi	a0,a0,16
    800043f8:	4585                	li	a1,1
    800043fa:	fa2e                	sd	a1,304(sp)
    800043fc:	00003097          	auipc	ra,0x3
    80004400:	052080e7          	jalr	82(ra) # 8000744e <_ZN90_$LT$core..num..wrapping..Wrapping$LT$usize$GT$$u20$as$u20$core..ops..arith..SubAssign$GT$10sub_assign17h67a53f3fa0ccb70bE>
    80004404:	a009                	j	80004406 <.LBB3_74+0x14c>
    80004406:	4521                	li	a0,8
                putc(CTRL_BS);
    80004408:	00000097          	auipc	ra,0x0
    8000440c:	a5c080e7          	jalr	-1444(ra) # 80003e64 <_ZN6kernel6driver7console4putc17h15d6d35ca2ac864eE>
    80004410:	a009                	j	80004412 <.LBB3_74+0x158>
            if console.edit_index != console.write_index {
    80004412:	a2e9                	j	800045dc <.LBB3_75+0x14>
    80004414:	4505                	li	a0,1
            if c != 0 && (console.edit_index - console.read_index).0 < INPUT_BUF {
    80004416:	12a10f23          	sb	a0,318(sp)
    8000441a:	a821                	j	80004432 <.LBB3_74+0x178>
    8000441c:	4501                	li	a0,0
    8000441e:	12a10f23          	sb	a0,318(sp)
    80004422:	a801                	j	80004432 <.LBB3_74+0x178>
    80004424:	0a08                	addi	a0,sp,272
    80004426:	0000d097          	auipc	ra,0xd
    8000442a:	1f2080e7          	jalr	498(ra) # 80011618 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8f385c8b975788d5E>
    8000442e:	e52a                	sd	a0,136(sp)
    80004430:	a031                	j	8000443c <.LBB3_74+0x182>
    80004432:	13e14503          	lbu	a0,318(sp)
    80004436:	8905                	andi	a0,a0,1
    80004438:	e91d                	bnez	a0,8000446e <.LBB3_74+0x1b4>
    8000443a:	a089                	j	8000447c <.LBB3_74+0x1c2>
    8000443c:	652a                	ld	a0,136(sp)
    8000443e:	6908                	ld	a0,16(a0)
    80004440:	fcaa                	sd	a0,120(sp)
    80004442:	0a08                	addi	a0,sp,272
    80004444:	0000d097          	auipc	ra,0xd
    80004448:	1d4080e7          	jalr	468(ra) # 80011618 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8f385c8b975788d5E>
    8000444c:	e12a                	sd	a0,128(sp)
    8000444e:	a009                	j	80004450 <.LBB3_74+0x196>
    80004450:	7566                	ld	a0,120(sp)
    80004452:	658a                	ld	a1,128(sp)
    80004454:	618c                	ld	a1,0(a1)
    80004456:	00003097          	auipc	ra,0x3
    8000445a:	fb6080e7          	jalr	-74(ra) # 8000740c <_ZN84_$LT$core..num..wrapping..Wrapping$LT$usize$GT$$u20$as$u20$core..ops..arith..Sub$GT$3sub17h09c98f8a3aa1050aE>
    8000445e:	f8aa                	sd	a0,112(sp)
    80004460:	a009                	j	80004462 <.LBB3_74+0x1a8>
    80004462:	7546                	ld	a0,112(sp)
    80004464:	08000593          	li	a1,128
    80004468:	fab566e3          	bltu	a0,a1,80004414 <.LBB3_74+0x15a>
    8000446c:	bf45                	j	8000441c <.LBB3_74+0x162>
                let c = if c == CTRL_CR { CTRL_LF } else { c };
    8000446e:	6512                	ld	a0,256(sp)
    80004470:	0ff57513          	andi	a0,a0,255
    80004474:	45b5                	li	a1,13
    80004476:	00b50463          	beq	a0,a1,8000447e <.LBB3_74+0x1c4>
    8000447a:	a031                	j	80004486 <.LBB3_74+0x1cc>
            if c != 0 && (console.edit_index - console.read_index).0 < INPUT_BUF {
    8000447c:	a285                	j	800045dc <.LBB3_75+0x14>
    8000447e:	4529                	li	a0,10
                let c = if c == CTRL_CR { CTRL_LF } else { c };
    80004480:	12a10fa3          	sb	a0,319(sp)
    80004484:	a029                	j	8000448e <.LBB3_74+0x1d4>
    80004486:	6512                	ld	a0,256(sp)
    80004488:	12a10fa3          	sb	a0,319(sp)
    8000448c:	a009                	j	8000448e <.LBB3_74+0x1d4>
                putc(c);
    8000448e:	13f10503          	lb	a0,319(sp)
    80004492:	00000097          	auipc	ra,0x0
    80004496:	9d2080e7          	jalr	-1582(ra) # 80003e64 <_ZN6kernel6driver7console4putc17h15d6d35ca2ac864eE>
    8000449a:	a009                	j	8000449c <.LBB3_74+0x1e2>
    8000449c:	0a08                	addi	a0,sp,272
                let edit_index = console.edit_index.0 % INPUT_BUF;
    8000449e:	0000d097          	auipc	ra,0xd
    800044a2:	17a080e7          	jalr	378(ra) # 80011618 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8f385c8b975788d5E>
    800044a6:	f4aa                	sd	a0,104(sp)
    800044a8:	a009                	j	800044aa <.LBB3_74+0x1f0>
    800044aa:	7526                	ld	a0,104(sp)
    800044ac:	6908                	ld	a0,16(a0)
    800044ae:	07f57513          	andi	a0,a0,127
    800044b2:	e8aa                	sd	a0,80(sp)
    800044b4:	eaaa                	sd	a0,336(sp)
                console.buf[edit_index] = c;
    800044b6:	13f14503          	lbu	a0,319(sp)
    800044ba:	ecaa                	sd	a0,88(sp)
    800044bc:	0a08                	addi	a0,sp,272
    800044be:	0000d097          	auipc	ra,0xd
    800044c2:	238080e7          	jalr	568(ra) # 800116f6 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h6db8254bcc254a19E>
    800044c6:	f0aa                	sd	a0,96(sp)
    800044c8:	a009                	j	800044ca <.LBB3_74+0x210>
    800044ca:	65c6                	ld	a1,80(sp)
    800044cc:	07f00513          	li	a0,127
    800044d0:	10b56f63          	bltu	a0,a1,800045ee <.LBB3_75+0x26>
    800044d4:	a009                	j	800044d6 <.LBB3_74+0x21c>
    800044d6:	6566                	ld	a0,88(sp)
    800044d8:	7586                	ld	a1,96(sp)
    800044da:	6646                	ld	a2,80(sp)
    800044dc:	95b2                	add	a1,a1,a2
    800044de:	00a58c23          	sb	a0,24(a1)
    800044e2:	0a08                	addi	a0,sp,272
                console.edit_index += Wrapping(1);
    800044e4:	0000d097          	auipc	ra,0xd
    800044e8:	212080e7          	jalr	530(ra) # 800116f6 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h6db8254bcc254a19E>
    800044ec:	e4aa                	sd	a0,72(sp)
    800044ee:	a009                	j	800044f0 <.LBB3_74+0x236>
    800044f0:	6526                	ld	a0,72(sp)
    800044f2:	0541                	addi	a0,a0,16
    800044f4:	4585                	li	a1,1
    800044f6:	e2ae                	sd	a1,320(sp)
    800044f8:	00003097          	auipc	ra,0x3
    800044fc:	f32080e7          	jalr	-206(ra) # 8000742a <_ZN90_$LT$core..num..wrapping..Wrapping$LT$usize$GT$$u20$as$u20$core..ops..arith..AddAssign$GT$10add_assign17hc731864567f3481aE>
    80004500:	a009                	j	80004502 <.LBB3_74+0x248>
                if c == CTRL_LF || c == CTRL_EOT || (console.edit_index - console.read_index).0 == INPUT_BUF {
    80004502:	13f14503          	lbu	a0,319(sp)
    80004506:	45a9                	li	a1,10
    80004508:	02b50763          	beq	a0,a1,80004536 <.LBB3_74+0x27c>
    8000450c:	a82d                	j	80004546 <.LBB3_74+0x28c>
    8000450e:	4505                	li	a0,1
    80004510:	14a106a3          	sb	a0,333(sp)
    80004514:	a821                	j	8000452c <.LBB3_74+0x272>
    80004516:	4501                	li	a0,0
    80004518:	14a106a3          	sb	a0,333(sp)
    8000451c:	a801                	j	8000452c <.LBB3_74+0x272>
    8000451e:	0a08                	addi	a0,sp,272
    80004520:	0000d097          	auipc	ra,0xd
    80004524:	0f8080e7          	jalr	248(ra) # 80011618 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8f385c8b975788d5E>
    80004528:	e0aa                	sd	a0,64(sp)
    8000452a:	a80d                	j	8000455c <.LBB3_74+0x2a2>
    8000452c:	14d14503          	lbu	a0,333(sp)
    80004530:	8905                	andi	a0,a0,1
    80004532:	ed31                	bnez	a0,8000458e <.LBB3_74+0x2d4>
    80004534:	a0a5                	j	8000459c <.LBB3_74+0x2e2>
    80004536:	4505                	li	a0,1
    80004538:	14a10723          	sb	a0,334(sp)
    8000453c:	a819                	j	80004552 <.LBB3_74+0x298>
    8000453e:	4501                	li	a0,0
    80004540:	14a10723          	sb	a0,334(sp)
    80004544:	a039                	j	80004552 <.LBB3_74+0x298>
    80004546:	13f14503          	lbu	a0,319(sp)
    8000454a:	4591                	li	a1,4
    8000454c:	feb505e3          	beq	a0,a1,80004536 <.LBB3_74+0x27c>
    80004550:	b7fd                	j	8000453e <.LBB3_74+0x284>
    80004552:	14e14503          	lbu	a0,334(sp)
    80004556:	8905                	andi	a0,a0,1
    80004558:	f95d                	bnez	a0,8000450e <.LBB3_74+0x254>
    8000455a:	b7d1                	j	8000451e <.LBB3_74+0x264>
    8000455c:	6506                	ld	a0,64(sp)
    8000455e:	6908                	ld	a0,16(a0)
    80004560:	f82a                	sd	a0,48(sp)
    80004562:	0a08                	addi	a0,sp,272
    80004564:	0000d097          	auipc	ra,0xd
    80004568:	0b4080e7          	jalr	180(ra) # 80011618 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8f385c8b975788d5E>
    8000456c:	fc2a                	sd	a0,56(sp)
    8000456e:	a009                	j	80004570 <.LBB3_74+0x2b6>
    80004570:	7542                	ld	a0,48(sp)
    80004572:	75e2                	ld	a1,56(sp)
    80004574:	618c                	ld	a1,0(a1)
    80004576:	00003097          	auipc	ra,0x3
    8000457a:	e96080e7          	jalr	-362(ra) # 8000740c <_ZN84_$LT$core..num..wrapping..Wrapping$LT$usize$GT$$u20$as$u20$core..ops..arith..Sub$GT$3sub17h09c98f8a3aa1050aE>
    8000457e:	f42a                	sd	a0,40(sp)
    80004580:	a009                	j	80004582 <.LBB3_74+0x2c8>
    80004582:	7522                	ld	a0,40(sp)
    80004584:	08000593          	li	a1,128
    80004588:	f8b503e3          	beq	a0,a1,8000450e <.LBB3_74+0x254>
    8000458c:	b769                	j	80004516 <.LBB3_74+0x25c>
    8000458e:	0a08                	addi	a0,sp,272
                    console.write_index = console.edit_index;
    80004590:	0000d097          	auipc	ra,0xd
    80004594:	088080e7          	jalr	136(ra) # 80011618 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8f385c8b975788d5E>
    80004598:	f02a                	sd	a0,32(sp)
    8000459a:	a011                	j	8000459e <.LBB3_74+0x2e4>
                if c == CTRL_LF || c == CTRL_EOT || (console.edit_index - console.read_index).0 == INPUT_BUF {
    8000459c:	a081                	j	800045dc <.LBB3_75+0x14>
                    console.write_index = console.edit_index;
    8000459e:	7502                	ld	a0,32(sp)
    800045a0:	6908                	ld	a0,16(a0)
    800045a2:	e82a                	sd	a0,16(sp)
    800045a4:	0a08                	addi	a0,sp,272
    800045a6:	0000d097          	auipc	ra,0xd
    800045aa:	150080e7          	jalr	336(ra) # 800116f6 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h6db8254bcc254a19E>
    800045ae:	ec2a                	sd	a0,24(sp)
    800045b0:	a009                	j	800045b2 <.LBB3_74+0x2f8>
    800045b2:	6542                	ld	a0,16(sp)
    800045b4:	65e2                	ld	a1,24(sp)
    800045b6:	e588                	sd	a0,8(a1)
    800045b8:	0a08                	addi	a0,sp,272
                    // 当检测到用户换行的时候，唤醒 `console_read` 进行读取
                    unsafe{
                        PROC_MANAGER.wake_up(&console.read_index as *const _ as usize)
    800045ba:	0000d097          	auipc	ra,0xd
    800045be:	05e080e7          	jalr	94(ra) # 80011618 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8f385c8b975788d5E>
    800045c2:	e42a                	sd	a0,8(sp)
    800045c4:	a009                	j	800045c6 <.LBB3_74+0x30c>
    800045c6:	65a2                	ld	a1,8(sp)

00000000800045c8 <.LBB3_75>:
    800045c8:	00053517          	auipc	a0,0x53
    800045cc:	fd850513          	addi	a0,a0,-40 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    800045d0:	00009097          	auipc	ra,0x9
    800045d4:	330080e7          	jalr	816(ra) # 8000d900 <_ZN6kernel7process7manager11ProcManager7wake_up17ha46b4d15ac07187bE>
    800045d8:	a009                	j	800045da <.LBB3_75+0x12>
                if c == CTRL_LF || c == CTRL_EOT || (console.edit_index - console.read_index).0 == INPUT_BUF {
    800045da:	a009                	j	800045dc <.LBB3_75+0x14>
    800045dc:	0a08                	addi	a0,sp,272
                    };
                }
            }
        }
    }
}
    800045de:	00003097          	auipc	ra,0x3
    800045e2:	aa4080e7          	jalr	-1372(ra) # 80007082 <_ZN4core3ptr98drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..driver..console..Console$GT$$GT$17hbea8b3b0221deadaE>
    800045e6:	a009                	j	800045e8 <.LBB3_75+0x20>
    800045e8:	60f6                	ld	ra,344(sp)
    800045ea:	6135                	addi	sp,sp,352
    800045ec:	8082                	ret
                console.buf[edit_index] = c;
    800045ee:	6546                	ld	a0,80(sp)

00000000800045f0 <.LBB3_76>:
    800045f0:	00022617          	auipc	a2,0x22
    800045f4:	a5860613          	addi	a2,a2,-1448 # 80026048 <.L__unnamed_8>
    800045f8:	08000593          	li	a1,128
    800045fc:	0001e097          	auipc	ra,0x1e
    80004600:	ca6080e7          	jalr	-858(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80004604:	0000                	unimp
            console.buf[(console.edit_index - Wrapping(1)).0 % INPUT_BUF] != CTRL_LF {
    80004606:	650e                	ld	a0,192(sp)

0000000080004608 <.LBB3_77>:
    80004608:	00022617          	auipc	a2,0x22
    8000460c:	a5860613          	addi	a2,a2,-1448 # 80026060 <.L__unnamed_9>
    80004610:	08000593          	li	a1,128
    80004614:	0001e097          	auipc	ra,0x1e
    80004618:	c8e080e7          	jalr	-882(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel6driver7console12console_init17h6fb79c78956ee465E:

000000008000461e <_ZN6kernel6driver7console12console_init17h6fb79c78956ee465E>:

use core::sync::atomic::AtomicBool;
pub(crate) static PANICKED: AtomicBool = AtomicBool::new(false);

/// must be called only once in rmain.rs:rust_main
pub unsafe fn console_init() {
    8000461e:	1141                	addi	sp,sp,-16
    use crate::fs::DEVICE_LIST;
    use crate::arch::riscv::qemu::devices::CONSOLE;
    super::uart::uart_init();
    80004620:	e406                	sd	ra,8(sp)
    80004622:	00017097          	auipc	ra,0x17
    80004626:	dd6080e7          	jalr	-554(ra) # 8001b3f8 <_ZN6kernel6driver4uart9uart_init17h01daa242cfe569c9E>
    8000462a:	a009                	j	8000462c <.LBB4_2>

000000008000462c <.LBB4_2>:
    DEVICE_LIST.table[CONSOLE].write = console_write as *const u8;
    8000462c:	00000517          	auipc	a0,0x0
    80004630:	b3050513          	addi	a0,a0,-1232 # 8000415c <_ZN6kernel6driver7console13console_write17h0e125bdbb626dc42E>

0000000080004634 <.LBB4_3>:
    80004634:	0006d597          	auipc	a1,0x6d
    80004638:	9cc58593          	addi	a1,a1,-1588 # 80071000 <_ZN6kernel2fs7devices11DEVICE_LIST17h17b7683da24e3570E>
    8000463c:	ed88                	sd	a0,24(a1)

000000008000463e <.LBB4_4>:
    DEVICE_LIST.table[CONSOLE].read = console_read as *const u8;
    8000463e:	00000517          	auipc	a0,0x0
    80004642:	87c50513          	addi	a0,a0,-1924 # 80003eba <_ZN6kernel6driver7console12console_read17hbad5452084e392ddE>
    80004646:	e988                	sd	a0,16(a1)
    80004648:	60a2                	ld	ra,8(sp)
    8000464a:	0141                	addi	sp,sp,16
    8000464c:	8082                	ret

Disassembly of section .text._ZN4core4sync6atomic10AtomicBool3new17hb0054f5394c676a1E:

000000008000464e <_ZN4core4sync6atomic10AtomicBool3new17hb0054f5394c676a1E>:
    /// let atomic_false = AtomicBool::new(false);
    /// ```
    #[inline]
    #[stable(feature = "rust1", since = "1.0.0")]
    #[rustc_const_stable(feature = "const_atomic_new", since = "1.24.0")]
    pub const fn new(v: bool) -> AtomicBool {
    8000464e:	1101                	addi	sp,sp,-32
    80004650:	ec06                	sd	ra,24(sp)
    80004652:	00a10ba3          	sb	a0,23(sp)
        AtomicBool { v: UnsafeCell::new(v as u8) }
    80004656:	0001e097          	auipc	ra,0x1e
    8000465a:	9d8080e7          	jalr	-1576(ra) # 8002202e <_ZN4core4cell19UnsafeCell$LT$T$GT$3new17h3aa2f2534c029263E>
    8000465e:	e42a                	sd	a0,8(sp)
    80004660:	a009                	j	80004662 <_ZN4core4sync6atomic10AtomicBool3new17hb0054f5394c676a1E+0x14>
    80004662:	6522                	ld	a0,8(sp)
    80004664:	00a10823          	sb	a0,16(sp)
    }
    80004668:	60e2                	ld	ra,24(sp)
    8000466a:	6105                	addi	sp,sp,32
    8000466c:	8082                	ret

Disassembly of section .text._ZN4core4sync6atomic10AtomicBool4load17h49a663f50dd66935E:

000000008000466e <_ZN4core4sync6atomic10AtomicBool4load17h49a663f50dd66935E>:
    ///
    /// assert_eq!(some_bool.load(Ordering::Relaxed), true);
    /// ```
    #[inline]
    #[stable(feature = "rust1", since = "1.0.0")]
    pub fn load(&self, order: Ordering) -> bool {
    8000466e:	7179                	addi	sp,sp,-48
    80004670:	f406                	sd	ra,40(sp)
    80004672:	862e                	mv	a2,a1
    80004674:	e432                	sd	a2,8(sp)
    80004676:	ec2a                	sd	a0,24(sp)
    80004678:	02b103a3          	sb	a1,39(sp)
        // SAFETY: any data races are prevented by atomic intrinsics and the raw
        // pointer passed in is valid because we got it from a reference.
        unsafe { atomic_load(self.v.get(), order) != 0 }
    8000467c:	0001e097          	auipc	ra,0x1e
    80004680:	9aa080e7          	jalr	-1622(ra) # 80022026 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h34ebeaa57b5c7248E>
    80004684:	e82a                	sd	a0,16(sp)
    80004686:	a009                	j	80004688 <_ZN4core4sync6atomic10AtomicBool4load17h49a663f50dd66935E+0x1a>
    80004688:	65a2                	ld	a1,8(sp)
    8000468a:	6542                	ld	a0,16(sp)
    8000468c:	0001e097          	auipc	ra,0x1e
    80004690:	8da080e7          	jalr	-1830(ra) # 80021f66 <_ZN4core4sync6atomic11atomic_load17h7c28be5fa6ab6ea0E>
    80004694:	e02a                	sd	a0,0(sp)
    80004696:	a009                	j	80004698 <_ZN4core4sync6atomic10AtomicBool4load17h49a663f50dd66935E+0x2a>
    80004698:	6502                	ld	a0,0(sp)
    8000469a:	0ff57513          	andi	a0,a0,255
    8000469e:	00a03533          	snez	a0,a0
    }
    800046a2:	70a2                	ld	ra,40(sp)
    800046a4:	6145                	addi	sp,sp,48
    800046a6:	8082                	ret

Disassembly of section .text._ZN4core4sync6atomic10AtomicBool4swap17h269e9e7e986b9c97E:

00000000800046a8 <_ZN4core4sync6atomic10AtomicBool4swap17h269e9e7e986b9c97E>:
    /// assert_eq!(some_bool.load(Ordering::Relaxed), false);
    /// ```
    #[inline]
    #[stable(feature = "rust1", since = "1.0.0")]
    #[cfg(target_has_atomic = "8")]
    pub fn swap(&self, val: bool, order: Ordering) -> bool {
    800046a8:	7139                	addi	sp,sp,-64
    800046aa:	fc06                	sd	ra,56(sp)
    800046ac:	86b2                	mv	a3,a2
    800046ae:	e836                	sd	a3,16(sp)
    800046b0:	86ae                	mv	a3,a1
    800046b2:	ec36                	sd	a3,24(sp)
    800046b4:	f42a                	sd	a0,40(sp)
    800046b6:	02b10b23          	sb	a1,54(sp)
    800046ba:	02c10ba3          	sb	a2,55(sp)
        // SAFETY: data races are prevented by atomic intrinsics.
        unsafe { atomic_swap(self.v.get(), val as u8, order) != 0 }
    800046be:	0001e097          	auipc	ra,0x1e
    800046c2:	968080e7          	jalr	-1688(ra) # 80022026 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h34ebeaa57b5c7248E>
    800046c6:	f02a                	sd	a0,32(sp)
    800046c8:	a009                	j	800046ca <_ZN4core4sync6atomic10AtomicBool4swap17h269e9e7e986b9c97E+0x22>
    800046ca:	6642                	ld	a2,16(sp)
    800046cc:	65e2                	ld	a1,24(sp)
    800046ce:	7502                	ld	a0,32(sp)
    800046d0:	0000b097          	auipc	ra,0xb
    800046d4:	7ce080e7          	jalr	1998(ra) # 8000fe9e <_ZN4core4sync6atomic11atomic_swap17hdd22e709589114eaE>
    800046d8:	e42a                	sd	a0,8(sp)
    800046da:	a009                	j	800046dc <_ZN4core4sync6atomic10AtomicBool4swap17h269e9e7e986b9c97E+0x34>
    800046dc:	6522                	ld	a0,8(sp)
    800046de:	0ff57513          	andi	a0,a0,255
    800046e2:	00a03533          	snez	a0,a0
    }
    800046e6:	70e2                	ld	ra,56(sp)
    800046e8:	6121                	addi	sp,sp,64
    800046ea:	8082                	ret

Disassembly of section .text._ZN4core4sync6atomic10AtomicBool5store17h325e21ca90edd7e7E:

00000000800046ec <_ZN4core4sync6atomic10AtomicBool5store17h325e21ca90edd7e7E>:
    pub fn store(&self, val: bool, order: Ordering) {
    800046ec:	7179                	addi	sp,sp,-48
    800046ee:	f406                	sd	ra,40(sp)
    800046f0:	86b2                	mv	a3,a2
    800046f2:	e036                	sd	a3,0(sp)
    800046f4:	86ae                	mv	a3,a1
    800046f6:	e436                	sd	a3,8(sp)
    800046f8:	ec2a                	sd	a0,24(sp)
    800046fa:	02b10323          	sb	a1,38(sp)
    800046fe:	02c103a3          	sb	a2,39(sp)
            atomic_store(self.v.get(), val as u8, order);
    80004702:	0001e097          	auipc	ra,0x1e
    80004706:	924080e7          	jalr	-1756(ra) # 80022026 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h34ebeaa57b5c7248E>
    8000470a:	e82a                	sd	a0,16(sp)
    8000470c:	a009                	j	8000470e <_ZN4core4sync6atomic10AtomicBool5store17h325e21ca90edd7e7E+0x22>
    8000470e:	6602                	ld	a2,0(sp)
    80004710:	65a2                	ld	a1,8(sp)
    80004712:	6542                	ld	a0,16(sp)
    80004714:	0000c097          	auipc	ra,0xc
    80004718:	8d6080e7          	jalr	-1834(ra) # 8000ffea <_ZN4core4sync6atomic12atomic_store17h031d76ab229dd222E>
    8000471c:	a009                	j	8000471e <_ZN4core4sync6atomic10AtomicBool5store17h325e21ca90edd7e7E+0x32>
    }
    8000471e:	70a2                	ld	ra,40(sp)
    80004720:	6145                	addi	sp,sp,48
    80004722:	8082                	ret

Disassembly of section .text._ZN4core4sync6atomic11AtomicUsize3new17hb5d2654a6be55e11E:

0000000080004724 <_ZN4core4sync6atomic11AtomicUsize3new17hb5d2654a6be55e11E>:
            #[doc = concat!("let atomic_forty_two = ", stringify!($atomic_type), "::new(42);")]
            /// ```
            #[inline]
            #[$stable]
            #[$const_stable]
            pub const fn new(v: $int_type) -> Self {
    80004724:	1101                	addi	sp,sp,-32
    80004726:	ec06                	sd	ra,24(sp)
    80004728:	e82a                	sd	a0,16(sp)
                Self {v: UnsafeCell::new(v)}
    8000472a:	00001097          	auipc	ra,0x1
    8000472e:	b58080e7          	jalr	-1192(ra) # 80005282 <_ZN4core4cell19UnsafeCell$LT$T$GT$3new17h4d1d6404457ffa31E>
    80004732:	e02a                	sd	a0,0(sp)
    80004734:	a009                	j	80004736 <_ZN4core4sync6atomic11AtomicUsize3new17hb5d2654a6be55e11E+0x12>
    80004736:	6502                	ld	a0,0(sp)
    80004738:	e42a                	sd	a0,8(sp)
            }
    8000473a:	60e2                	ld	ra,24(sp)
    8000473c:	6105                	addi	sp,sp,32
    8000473e:	8082                	ret

Disassembly of section .text._ZN4core4sync6atomic11AtomicUsize9fetch_add17h9147f412b3f815f9E:

0000000080004740 <_ZN4core4sync6atomic11AtomicUsize9fetch_add17h9147f412b3f815f9E>:
            /// assert_eq!(foo.load(Ordering::SeqCst), 10);
            /// ```
            #[inline]
            #[$stable]
            #[$cfg_cas]
            pub fn fetch_add(&self, val: $int_type, order: Ordering) -> $int_type {
    80004740:	7139                	addi	sp,sp,-64
    80004742:	fc06                	sd	ra,56(sp)
    80004744:	e42e                	sd	a1,8(sp)
    80004746:	86b2                	mv	a3,a2
    80004748:	e836                	sd	a3,16(sp)
    8000474a:	f02a                	sd	a0,32(sp)
    8000474c:	f42e                	sd	a1,40(sp)
    8000474e:	02c10ba3          	sb	a2,55(sp)
                // SAFETY: data races are prevented by atomic intrinsics.
                unsafe { atomic_add(self.v.get(), val, order) }
    80004752:	0001e097          	auipc	ra,0x1e
    80004756:	95a080e7          	jalr	-1702(ra) # 800220ac <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17hcdc438fb74b7ecc8E>
    8000475a:	ec2a                	sd	a0,24(sp)
    8000475c:	a009                	j	8000475e <_ZN4core4sync6atomic11AtomicUsize9fetch_add17h9147f412b3f815f9E+0x1e>
    8000475e:	6642                	ld	a2,16(sp)
    80004760:	65a2                	ld	a1,8(sp)
    80004762:	6562                	ld	a0,24(sp)
    80004764:	0000b097          	auipc	ra,0xb
    80004768:	63e080e7          	jalr	1598(ra) # 8000fda2 <_ZN4core4sync6atomic10atomic_add17hcefa99837e5e8934E>
    8000476c:	e02a                	sd	a0,0(sp)
    8000476e:	a009                	j	80004770 <_ZN4core4sync6atomic11AtomicUsize9fetch_add17h9147f412b3f815f9E+0x30>
            }
    80004770:	6502                	ld	a0,0(sp)
    80004772:	70e2                	ld	ra,56(sp)
    80004774:	6121                	addi	sp,sp,64
    80004776:	8082                	ret

Disassembly of section .text._ZN4core4sync6atomic11AtomicUsize9fetch_sub17h94fe355041184982E:

0000000080004778 <_ZN4core4sync6atomic11AtomicUsize9fetch_sub17h94fe355041184982E>:
            /// assert_eq!(foo.load(Ordering::SeqCst), 10);
            /// ```
            #[inline]
            #[$stable]
            #[$cfg_cas]
            pub fn fetch_sub(&self, val: $int_type, order: Ordering) -> $int_type {
    80004778:	7139                	addi	sp,sp,-64
    8000477a:	fc06                	sd	ra,56(sp)
    8000477c:	e42e                	sd	a1,8(sp)
    8000477e:	86b2                	mv	a3,a2
    80004780:	e836                	sd	a3,16(sp)
    80004782:	f02a                	sd	a0,32(sp)
    80004784:	f42e                	sd	a1,40(sp)
    80004786:	02c10ba3          	sb	a2,55(sp)
                // SAFETY: data races are prevented by atomic intrinsics.
                unsafe { atomic_sub(self.v.get(), val, order) }
    8000478a:	0001e097          	auipc	ra,0x1e
    8000478e:	922080e7          	jalr	-1758(ra) # 800220ac <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17hcdc438fb74b7ecc8E>
    80004792:	ec2a                	sd	a0,24(sp)
    80004794:	a009                	j	80004796 <_ZN4core4sync6atomic11AtomicUsize9fetch_sub17h94fe355041184982E+0x1e>
    80004796:	6642                	ld	a2,16(sp)
    80004798:	65a2                	ld	a1,8(sp)
    8000479a:	6562                	ld	a0,24(sp)
    8000479c:	0000b097          	auipc	ra,0xb
    800047a0:	67a080e7          	jalr	1658(ra) # 8000fe16 <_ZN4core4sync6atomic10atomic_sub17ha62074418a99a7bbE>
    800047a4:	e02a                	sd	a0,0(sp)
    800047a6:	a009                	j	800047a8 <_ZN4core4sync6atomic11AtomicUsize9fetch_sub17h94fe355041184982E+0x30>
            }
    800047a8:	6502                	ld	a0,0(sp)
    800047aa:	70e2                	ld	ra,56(sp)
    800047ac:	6121                	addi	sp,sp,64
    800047ae:	8082                	ret

Disassembly of section .text._ZN4core4sync6atomic5fence17hd2f91624c9f09ce8E:

00000000800047b0 <_ZN4core4sync6atomic5fence17hd2f91624c9f09ce8E>:
///     }
/// }
/// ```
#[inline]
#[stable(feature = "rust1", since = "1.0.0")]
pub fn fence(order: Ordering) {
    800047b0:	1101                	addi	sp,sp,-32
    800047b2:	00a10ba3          	sb	a0,23(sp)
    // SAFETY: using an atomic fence is safe.
    unsafe {
        match order {
            Acquire => intrinsics::atomic_fence_acq(),
    800047b6:	0ff57513          	andi	a0,a0,255
    800047ba:	e42a                	sd	a0,8(sp)
    800047bc:	6522                	ld	a0,8(sp)
    800047be:	050e                	slli	a0,a0,0x3

00000000800047c0 <.LBB7_9>:
    800047c0:	00022597          	auipc	a1,0x22
    800047c4:	8b858593          	addi	a1,a1,-1864 # 80026078 <.LJTI7_0>
    800047c8:	952e                	add	a0,a0,a1
    800047ca:	6108                	ld	a0,0(a0)
    800047cc:	8502                	jr	a0

00000000800047ce <.LBB7_10>:
            Release => intrinsics::atomic_fence_rel(),
            AcqRel => intrinsics::atomic_fence_acqrel(),
            SeqCst => intrinsics::atomic_fence(),
            Relaxed => panic!("there is no such thing as a relaxed fence"),
    800047ce:	00022517          	auipc	a0,0x22
    800047d2:	8d250513          	addi	a0,a0,-1838 # 800260a0 <.L__unnamed_1>

00000000800047d6 <.LBB7_11>:
    800047d6:	00022617          	auipc	a2,0x22
    800047da:	97260613          	addi	a2,a2,-1678 # 80026148 <.L__unnamed_2>
    800047de:	02900593          	li	a1,41
    800047e2:	0001e097          	auipc	ra,0x1e
    800047e6:	a94080e7          	jalr	-1388(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    800047ea:	0000                	unimp
	...

00000000800047ee <.LBB7_4>:
            Acquire => intrinsics::atomic_fence_acq(),
    800047ee:	0230000f          	fence	r,rw
    800047f2:	a811                	j	80004806 <.LBB7_7+0x6>

00000000800047f4 <.LBB7_5>:
            Release => intrinsics::atomic_fence_rel(),
    800047f4:	0310000f          	fence	rw,w
    800047f8:	a039                	j	80004806 <.LBB7_7+0x6>

00000000800047fa <.LBB7_6>:
            AcqRel => intrinsics::atomic_fence_acqrel(),
    800047fa:	8330000f          	fence.tso
    800047fe:	a021                	j	80004806 <.LBB7_7+0x6>

0000000080004800 <.LBB7_7>:
            SeqCst => intrinsics::atomic_fence(),
    80004800:	0330000f          	fence	rw,rw
    80004804:	a009                	j	80004806 <.LBB7_7+0x6>
        }
    }
}
    80004806:	6105                	addi	sp,sp,32
    80004808:	8082                	ret

Disassembly of section .text._ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h10470fd1e83789bbE:

000000008000480a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h10470fd1e83789bbE>:
    /// ```
    #[stable(feature = "pointer_methods", since = "1.26.0")]
    #[must_use = "returns a new pointer rather than modifying its argument"]
    #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
    #[inline]
    pub const fn wrapping_add(self, count: usize) -> Self
    8000480a:	1101                	addi	sp,sp,-32
    8000480c:	ec06                	sd	ra,24(sp)
    8000480e:	e42a                	sd	a0,8(sp)
    80004810:	e82e                	sd	a1,16(sp)
    where
        T: Sized,
    {
        self.wrapping_offset(count as isize)
    80004812:	00000097          	auipc	ra,0x0
    80004816:	014080e7          	jalr	20(ra) # 80004826 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17hf5c823f0de9373d9E>
    8000481a:	e02a                	sd	a0,0(sp)
    8000481c:	a009                	j	8000481e <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h10470fd1e83789bbE+0x14>
    }
    8000481e:	6502                	ld	a0,0(sp)
    80004820:	60e2                	ld	ra,24(sp)
    80004822:	6105                	addi	sp,sp,32
    80004824:	8082                	ret

Disassembly of section .text._ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17hf5c823f0de9373d9E:

0000000080004826 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17hf5c823f0de9373d9E>:
    pub const fn wrapping_offset(self, count: isize) -> *const T
    80004826:	1101                	addi	sp,sp,-32
    80004828:	e42a                	sd	a0,8(sp)
    8000482a:	e82e                	sd	a1,16(sp)
        unsafe { intrinsics::arith_offset(self, count) }
    8000482c:	952e                	add	a0,a0,a1
    8000482e:	e02a                	sd	a0,0(sp)
    80004830:	ec2a                	sd	a0,24(sp)
    80004832:	a009                	j	80004834 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17hf5c823f0de9373d9E+0xe>
    }
    80004834:	6502                	ld	a0,0(sp)
    80004836:	6105                	addi	sp,sp,32
    80004838:	8082                	ret

Disassembly of section .text._ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4cast17h03bc1f4ed09a4b3cE:

000000008000483a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4cast17h03bc1f4ed09a4b3cE>:
    pub const fn cast<U>(self) -> *const U {
    8000483a:	1141                	addi	sp,sp,-16
    8000483c:	e42a                	sd	a0,8(sp)
    }
    8000483e:	0141                	addi	sp,sp,16
    80004840:	8082                	ret

Disassembly of section .text._ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4cast17he44352a5ab45ee06E:

0000000080004842 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4cast17he44352a5ab45ee06E>:
    pub const fn cast<U>(self) -> *const U {
    80004842:	1141                	addi	sp,sp,-16
    80004844:	e42a                	sd	a0,8(sp)
    }
    80004846:	0141                	addi	sp,sp,16
    80004848:	8082                	ret

Disassembly of section .text._ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h936ab5e813f51efdE:

000000008000484a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h936ab5e813f51efdE>:
    pub const unsafe fn offset(self, count: isize) -> *const T
    8000484a:	1101                	addi	sp,sp,-32
    8000484c:	e42a                	sd	a0,8(sp)
    8000484e:	e82e                	sd	a1,16(sp)
        unsafe { intrinsics::offset(self, count) }
    80004850:	058a                	slli	a1,a1,0x2
    80004852:	952e                	add	a0,a0,a1
    80004854:	e02a                	sd	a0,0(sp)
    80004856:	ec2a                	sd	a0,24(sp)
    80004858:	a009                	j	8000485a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h936ab5e813f51efdE+0x10>
    }
    8000485a:	6502                	ld	a0,0(sp)
    8000485c:	6105                	addi	sp,sp,32
    8000485e:	8082                	ret

Disassembly of section .text._ZN6kernel6memory7address4Addr15is_page_aligned17h21d9aa1b7bd151ebE:

0000000080004860 <_ZN6kernel6memory7address4Addr15is_page_aligned17h21d9aa1b7bd151ebE>:
    fn data_ref(&self) -> &usize;

    fn data_mut(&mut self) -> &mut usize;

    #[inline]
    fn is_page_aligned(&self) -> bool{
    80004860:	1101                	addi	sp,sp,-32
    80004862:	ec06                	sd	ra,24(sp)
    80004864:	e82a                	sd	a0,16(sp)
        self.as_usize() % PGSIZE == 0
    80004866:	0000d097          	auipc	ra,0xd
    8000486a:	fd6080e7          	jalr	-42(ra) # 8001183c <_ZN89_$LT$kernel..memory..address..VirtualAddress$u20$as$u20$kernel..memory..address..Addr$GT$8as_usize17h7916c21610008a66E>
    8000486e:	e42a                	sd	a0,8(sp)
    80004870:	a009                	j	80004872 <_ZN6kernel6memory7address4Addr15is_page_aligned17h21d9aa1b7bd151ebE+0x12>
    80004872:	6522                	ld	a0,8(sp)
    80004874:	6585                	lui	a1,0x1
    80004876:	35fd                	addiw	a1,a1,-1
    80004878:	8d6d                	and	a0,a0,a1
    8000487a:	00153513          	seqz	a0,a0
    }
    8000487e:	60e2                	ld	ra,24(sp)
    80004880:	6105                	addi	sp,sp,32
    80004882:	8082                	ret

Disassembly of section .text._ZN6kernel6memory7address4Addr10as_mut_ptr17hfa59607f4391fdb5E:

0000000080004884 <_ZN6kernel6memory7address4Addr10as_mut_ptr17hfa59607f4391fdb5E>:
    fn as_ptr(&self) -> *const u8{
        self.as_usize() as *const u8
    }

    #[inline]
    fn as_mut_ptr(&self) -> *mut u8{
    80004884:	1101                	addi	sp,sp,-32
    80004886:	ec06                	sd	ra,24(sp)
    80004888:	e82a                	sd	a0,16(sp)
        self.as_usize() as *mut u8
    8000488a:	0000d097          	auipc	ra,0xd
    8000488e:	fc4080e7          	jalr	-60(ra) # 8001184e <_ZN90_$LT$kernel..memory..address..PhysicalAddress$u20$as$u20$kernel..memory..address..Addr$GT$8as_usize17hea2eecdb80a1a2b2E>
    80004892:	e42a                	sd	a0,8(sp)
    80004894:	a009                	j	80004896 <_ZN6kernel6memory7address4Addr10as_mut_ptr17hfa59607f4391fdb5E+0x12>
    }
    80004896:	6522                	ld	a0,8(sp)
    80004898:	60e2                	ld	ra,24(sp)
    8000489a:	6105                	addi	sp,sp,32
    8000489c:	8082                	ret

Disassembly of section .text._ZN6kernel6memory7address4Addr11pg_round_up17h43579bab3405c977E:

000000008000489e <_ZN6kernel6memory7address4Addr11pg_round_up17h43579bab3405c977E>:

    #[inline]
    fn pg_round_up(&mut self) {
    8000489e:	7139                	addi	sp,sp,-64
    800048a0:	fc06                	sd	ra,56(sp)
    800048a2:	f02a                	sd	a0,32(sp)
    800048a4:	f82a                	sd	a0,48(sp)
        *self.data_mut() = (*self.data_mut() + PGSIZE - 1) & !(PGSIZE - 1)
    800048a6:	0000d097          	auipc	ra,0xd
    800048aa:	fa0080e7          	jalr	-96(ra) # 80011846 <_ZN89_$LT$kernel..memory..address..VirtualAddress$u20$as$u20$kernel..memory..address..Addr$GT$8data_mut17h88794159bc97d31bE>
    800048ae:	f42a                	sd	a0,40(sp)
    800048b0:	a009                	j	800048b2 <_ZN6kernel6memory7address4Addr11pg_round_up17h43579bab3405c977E+0x14>
    800048b2:	7522                	ld	a0,40(sp)
    800048b4:	610c                	ld	a1,0(a0)
    800048b6:	6505                	lui	a0,0x1
    800048b8:	952e                	add	a0,a0,a1
    800048ba:	ec2a                	sd	a0,24(sp)
    800048bc:	02b56963          	bltu	a0,a1,800048ee <.LBB2_7>
    800048c0:	a009                	j	800048c2 <_ZN6kernel6memory7address4Addr11pg_round_up17h43579bab3405c977E+0x24>
    800048c2:	6562                	ld	a0,24(sp)
    800048c4:	fff50593          	addi	a1,a0,-1 # fff <.Lline_table_start0+0x30a>
    800048c8:	e82e                	sd	a1,16(sp)
    800048ca:	04b56063          	bltu	a0,a1,8000490a <.LBB2_9>
    800048ce:	a009                	j	800048d0 <_ZN6kernel6memory7address4Addr11pg_round_up17h43579bab3405c977E+0x32>
    800048d0:	7502                	ld	a0,32(sp)
    800048d2:	0000d097          	auipc	ra,0xd
    800048d6:	f74080e7          	jalr	-140(ra) # 80011846 <_ZN89_$LT$kernel..memory..address..VirtualAddress$u20$as$u20$kernel..memory..address..Addr$GT$8data_mut17h88794159bc97d31bE>
    800048da:	e42a                	sd	a0,8(sp)
    800048dc:	a009                	j	800048de <_ZN6kernel6memory7address4Addr11pg_round_up17h43579bab3405c977E+0x40>
    800048de:	65a2                	ld	a1,8(sp)
    800048e0:	6542                	ld	a0,16(sp)
    800048e2:	767d                	lui	a2,0xfffff
    800048e4:	8d71                	and	a0,a0,a2
    800048e6:	e188                	sd	a0,0(a1)
    }
    800048e8:	70e2                	ld	ra,56(sp)
    800048ea:	6121                	addi	sp,sp,64
    800048ec:	8082                	ret

00000000800048ee <.LBB2_7>:
        *self.data_mut() = (*self.data_mut() + PGSIZE - 1) & !(PGSIZE - 1)
    800048ee:	00022517          	auipc	a0,0x22
    800048f2:	8a250513          	addi	a0,a0,-1886 # 80026190 <str.0>

00000000800048f6 <.LBB2_8>:
    800048f6:	00022617          	auipc	a2,0x22
    800048fa:	88260613          	addi	a2,a2,-1918 # 80026178 <.L__unnamed_1>
    800048fe:	45f1                	li	a1,28
    80004900:	0001e097          	auipc	ra,0x1e
    80004904:	976080e7          	jalr	-1674(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008000490a <.LBB2_9>:
    8000490a:	00022517          	auipc	a0,0x22
    8000490e:	8c650513          	addi	a0,a0,-1850 # 800261d0 <str.1>

0000000080004912 <.LBB2_10>:
    80004912:	00022617          	auipc	a2,0x22
    80004916:	89e60613          	addi	a2,a2,-1890 # 800261b0 <.L__unnamed_2>
    8000491a:	02100593          	li	a1,33
    8000491e:	0001e097          	auipc	ra,0x1e
    80004922:	958080e7          	jalr	-1704(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel6memory7address4Addr11pg_round_up17h93ce0bf629830ebdE:

0000000080004928 <_ZN6kernel6memory7address4Addr11pg_round_up17h93ce0bf629830ebdE>:
    fn pg_round_up(&mut self) {
    80004928:	7139                	addi	sp,sp,-64
    8000492a:	fc06                	sd	ra,56(sp)
    8000492c:	f02a                	sd	a0,32(sp)
    8000492e:	f82a                	sd	a0,48(sp)
        *self.data_mut() = (*self.data_mut() + PGSIZE - 1) & !(PGSIZE - 1)
    80004930:	0000d097          	auipc	ra,0xd
    80004934:	f28080e7          	jalr	-216(ra) # 80011858 <_ZN90_$LT$kernel..memory..address..PhysicalAddress$u20$as$u20$kernel..memory..address..Addr$GT$8data_mut17h98a368b1f7383ca3E>
    80004938:	f42a                	sd	a0,40(sp)
    8000493a:	a009                	j	8000493c <_ZN6kernel6memory7address4Addr11pg_round_up17h93ce0bf629830ebdE+0x14>
    8000493c:	7522                	ld	a0,40(sp)
    8000493e:	610c                	ld	a1,0(a0)
    80004940:	6505                	lui	a0,0x1
    80004942:	952e                	add	a0,a0,a1
    80004944:	ec2a                	sd	a0,24(sp)
    80004946:	02b56963          	bltu	a0,a1,80004978 <.LBB3_7>
    8000494a:	a009                	j	8000494c <_ZN6kernel6memory7address4Addr11pg_round_up17h93ce0bf629830ebdE+0x24>
    8000494c:	6562                	ld	a0,24(sp)
    8000494e:	fff50593          	addi	a1,a0,-1 # fff <.Lline_table_start0+0x30a>
    80004952:	e82e                	sd	a1,16(sp)
    80004954:	04b56063          	bltu	a0,a1,80004994 <.LBB3_9>
    80004958:	a009                	j	8000495a <_ZN6kernel6memory7address4Addr11pg_round_up17h93ce0bf629830ebdE+0x32>
    8000495a:	7502                	ld	a0,32(sp)
    8000495c:	0000d097          	auipc	ra,0xd
    80004960:	efc080e7          	jalr	-260(ra) # 80011858 <_ZN90_$LT$kernel..memory..address..PhysicalAddress$u20$as$u20$kernel..memory..address..Addr$GT$8data_mut17h98a368b1f7383ca3E>
    80004964:	e42a                	sd	a0,8(sp)
    80004966:	a009                	j	80004968 <_ZN6kernel6memory7address4Addr11pg_round_up17h93ce0bf629830ebdE+0x40>
    80004968:	65a2                	ld	a1,8(sp)
    8000496a:	6542                	ld	a0,16(sp)
    8000496c:	767d                	lui	a2,0xfffff
    8000496e:	8d71                	and	a0,a0,a2
    80004970:	e188                	sd	a0,0(a1)
    }
    80004972:	70e2                	ld	ra,56(sp)
    80004974:	6121                	addi	sp,sp,64
    80004976:	8082                	ret

0000000080004978 <.LBB3_7>:
        *self.data_mut() = (*self.data_mut() + PGSIZE - 1) & !(PGSIZE - 1)
    80004978:	00022517          	auipc	a0,0x22
    8000497c:	81850513          	addi	a0,a0,-2024 # 80026190 <str.0>

0000000080004980 <.LBB3_8>:
    80004980:	00021617          	auipc	a2,0x21
    80004984:	7f860613          	addi	a2,a2,2040 # 80026178 <.L__unnamed_1>
    80004988:	45f1                	li	a1,28
    8000498a:	0001e097          	auipc	ra,0x1e
    8000498e:	8ec080e7          	jalr	-1812(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080004994 <.LBB3_9>:
    80004994:	00022517          	auipc	a0,0x22
    80004998:	83c50513          	addi	a0,a0,-1988 # 800261d0 <str.1>

000000008000499c <.LBB3_10>:
    8000499c:	00022617          	auipc	a2,0x22
    800049a0:	81460613          	addi	a2,a2,-2028 # 800261b0 <.L__unnamed_2>
    800049a4:	02100593          	li	a1,33
    800049a8:	0001e097          	auipc	ra,0x1e
    800049ac:	8ce080e7          	jalr	-1842(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel6memory7address4Addr13pg_round_down17h7ab358be9f94b06bE:

00000000800049b2 <_ZN6kernel6memory7address4Addr13pg_round_down17h7ab358be9f94b06bE>:

    #[inline]
    fn pg_round_down(&mut self) {
    800049b2:	7179                	addi	sp,sp,-48
    800049b4:	f406                	sd	ra,40(sp)
    800049b6:	e82a                	sd	a0,16(sp)
    800049b8:	f02a                	sd	a0,32(sp)
        *self.data_mut() = *self.data_mut() & !(PGSIZE - 1)
    800049ba:	0000d097          	auipc	ra,0xd
    800049be:	e8c080e7          	jalr	-372(ra) # 80011846 <_ZN89_$LT$kernel..memory..address..VirtualAddress$u20$as$u20$kernel..memory..address..Addr$GT$8data_mut17h88794159bc97d31bE>
    800049c2:	ec2a                	sd	a0,24(sp)
    800049c4:	a009                	j	800049c6 <_ZN6kernel6memory7address4Addr13pg_round_down17h7ab358be9f94b06bE+0x14>
    800049c6:	6542                	ld	a0,16(sp)
    800049c8:	65e2                	ld	a1,24(sp)
    800049ca:	618c                	ld	a1,0(a1)
    800049cc:	e02e                	sd	a1,0(sp)
    800049ce:	0000d097          	auipc	ra,0xd
    800049d2:	e78080e7          	jalr	-392(ra) # 80011846 <_ZN89_$LT$kernel..memory..address..VirtualAddress$u20$as$u20$kernel..memory..address..Addr$GT$8data_mut17h88794159bc97d31bE>
    800049d6:	e42a                	sd	a0,8(sp)
    800049d8:	a009                	j	800049da <_ZN6kernel6memory7address4Addr13pg_round_down17h7ab358be9f94b06bE+0x28>
    800049da:	65a2                	ld	a1,8(sp)
    800049dc:	6502                	ld	a0,0(sp)
    800049de:	767d                	lui	a2,0xfffff
    800049e0:	8d71                	and	a0,a0,a2
    800049e2:	e188                	sd	a0,0(a1)
    }
    800049e4:	70a2                	ld	ra,40(sp)
    800049e6:	6145                	addi	sp,sp,48
    800049e8:	8082                	ret

Disassembly of section .text._ZN6kernel6memory7address4Addr8add_page17h93c7d6ddd860f6baE:

00000000800049ea <_ZN6kernel6memory7address4Addr8add_page17h93c7d6ddd860f6baE>:

    #[inline]
    fn add_page(&mut self){
    800049ea:	1101                	addi	sp,sp,-32
    800049ec:	ec06                	sd	ra,24(sp)
    800049ee:	e82a                	sd	a0,16(sp)
        *self.data_mut() += PGSIZE;
    800049f0:	0000d097          	auipc	ra,0xd
    800049f4:	e68080e7          	jalr	-408(ra) # 80011858 <_ZN90_$LT$kernel..memory..address..PhysicalAddress$u20$as$u20$kernel..memory..address..Addr$GT$8data_mut17h98a368b1f7383ca3E>
    800049f8:	e42a                	sd	a0,8(sp)
    800049fa:	a009                	j	800049fc <_ZN6kernel6memory7address4Addr8add_page17h93c7d6ddd860f6baE+0x12>
    800049fc:	6522                	ld	a0,8(sp)
    800049fe:	610c                	ld	a1,0(a0)
    80004a00:	6505                	lui	a0,0x1
    80004a02:	952e                	add	a0,a0,a1
    80004a04:	e02a                	sd	a0,0(sp)
    80004a06:	00b56963          	bltu	a0,a1,80004a18 <.LBB5_4>
    80004a0a:	a009                	j	80004a0c <_ZN6kernel6memory7address4Addr8add_page17h93c7d6ddd860f6baE+0x22>
    80004a0c:	6502                	ld	a0,0(sp)
    80004a0e:	65a2                	ld	a1,8(sp)
    80004a10:	e188                	sd	a0,0(a1)
    }
    80004a12:	60e2                	ld	ra,24(sp)
    80004a14:	6105                	addi	sp,sp,32
    80004a16:	8082                	ret

0000000080004a18 <.LBB5_4>:
        *self.data_mut() += PGSIZE;
    80004a18:	00021517          	auipc	a0,0x21
    80004a1c:	77850513          	addi	a0,a0,1912 # 80026190 <str.0>

0000000080004a20 <.LBB5_5>:
    80004a20:	00021617          	auipc	a2,0x21
    80004a24:	7d860613          	addi	a2,a2,2008 # 800261f8 <.L__unnamed_3>
    80004a28:	45f1                	li	a1,28
    80004a2a:	0001e097          	auipc	ra,0x1e
    80004a2e:	84c080e7          	jalr	-1972(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel6memory7address4Addr8add_page17hda9f7615eed2e36aE:

0000000080004a34 <_ZN6kernel6memory7address4Addr8add_page17hda9f7615eed2e36aE>:
    fn add_page(&mut self){
    80004a34:	1101                	addi	sp,sp,-32
    80004a36:	ec06                	sd	ra,24(sp)
    80004a38:	e82a                	sd	a0,16(sp)
        *self.data_mut() += PGSIZE;
    80004a3a:	0000d097          	auipc	ra,0xd
    80004a3e:	e0c080e7          	jalr	-500(ra) # 80011846 <_ZN89_$LT$kernel..memory..address..VirtualAddress$u20$as$u20$kernel..memory..address..Addr$GT$8data_mut17h88794159bc97d31bE>
    80004a42:	e42a                	sd	a0,8(sp)
    80004a44:	a009                	j	80004a46 <_ZN6kernel6memory7address4Addr8add_page17hda9f7615eed2e36aE+0x12>
    80004a46:	6522                	ld	a0,8(sp)
    80004a48:	610c                	ld	a1,0(a0)
    80004a4a:	6505                	lui	a0,0x1
    80004a4c:	952e                	add	a0,a0,a1
    80004a4e:	e02a                	sd	a0,0(sp)
    80004a50:	00b56963          	bltu	a0,a1,80004a62 <.LBB6_4>
    80004a54:	a009                	j	80004a56 <_ZN6kernel6memory7address4Addr8add_page17hda9f7615eed2e36aE+0x22>
    80004a56:	6502                	ld	a0,0(sp)
    80004a58:	65a2                	ld	a1,8(sp)
    80004a5a:	e188                	sd	a0,0(a1)
    }
    80004a5c:	60e2                	ld	ra,24(sp)
    80004a5e:	6105                	addi	sp,sp,32
    80004a60:	8082                	ret

0000000080004a62 <.LBB6_4>:
        *self.data_mut() += PGSIZE;
    80004a62:	00021517          	auipc	a0,0x21
    80004a66:	72e50513          	addi	a0,a0,1838 # 80026190 <str.0>

0000000080004a6a <.LBB6_5>:
    80004a6a:	00021617          	auipc	a2,0x21
    80004a6e:	78e60613          	addi	a2,a2,1934 # 800261f8 <.L__unnamed_3>
    80004a72:	45f1                	li	a1,28
    80004a74:	0001e097          	auipc	ra,0x1e
    80004a78:	802080e7          	jalr	-2046(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN104_$LT$core..iter..adapters..copied..Copied$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h5c47b4a6235bae37E:

0000000080004a7e <_ZN104_$LT$core..iter..adapters..copied..Copied$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h5c47b4a6235bae37E>:
    I: Iterator<Item = &'a T>,
    T: Copy,
{
    type Item = T;

    fn next(&mut self) -> Option<T> {
    80004a7e:	7179                	addi	sp,sp,-48
    80004a80:	f406                	sd	ra,40(sp)
    80004a82:	f02a                	sd	a0,32(sp)
        self.it.next().copied()
    80004a84:	00006097          	auipc	ra,0x6
    80004a88:	6c0080e7          	jalr	1728(ra) # 8000b144 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbe39990052f1389dE>
    80004a8c:	ec2a                	sd	a0,24(sp)
    80004a8e:	a009                	j	80004a90 <_ZN104_$LT$core..iter..adapters..copied..Copied$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h5c47b4a6235bae37E+0x12>
    80004a90:	6562                	ld	a0,24(sp)
    80004a92:	0000a097          	auipc	ra,0xa
    80004a96:	5d8080e7          	jalr	1496(ra) # 8000f06a <_ZN4core6option19Option$LT$$RF$T$GT$6copied17h53fb63a9bdc6d466E>
    80004a9a:	e42a                	sd	a0,8(sp)
    80004a9c:	e82e                	sd	a1,16(sp)
    80004a9e:	a009                	j	80004aa0 <_ZN104_$LT$core..iter..adapters..copied..Copied$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h5c47b4a6235bae37E+0x22>
    }
    80004aa0:	65c2                	ld	a1,16(sp)
    80004aa2:	6522                	ld	a0,8(sp)
    80004aa4:	8905                	andi	a0,a0,1
    80004aa6:	70a2                	ld	ra,40(sp)
    80004aa8:	6145                	addi	sp,sp,48
    80004aaa:	8082                	ret

Disassembly of section .text._ZN4core4iter8adapters6copied15Copied$LT$I$GT$3new17h07d9127b76ff3571E:

0000000080004aac <_ZN4core4iter8adapters6copied15Copied$LT$I$GT$3new17h07d9127b76ff3571E>:
    pub(in crate::iter) fn new(it: I) -> Copied<I> {
    80004aac:	1101                	addi	sp,sp,-32
    80004aae:	e82a                	sd	a0,16(sp)
    80004ab0:	ec2e                	sd	a1,24(sp)
        Copied { it }
    80004ab2:	e02a                	sd	a0,0(sp)
    80004ab4:	e42e                	sd	a1,8(sp)
    }
    80004ab6:	6105                	addi	sp,sp,32
    80004ab8:	8082                	ret

Disassembly of section .text._ZN4core5alloc6global11GlobalAlloc12alloc_zeroed17h5bb5edba03a2227bE:

0000000080004aba <_ZN4core5alloc6global11GlobalAlloc12alloc_zeroed17h5bb5edba03a2227bE>:
    /// allocation error are encouraged to call the [`handle_alloc_error`] function,
    /// rather than directly invoking `panic!` or similar.
    ///
    /// [`handle_alloc_error`]: ../../alloc/alloc/fn.handle_alloc_error.html
    #[stable(feature = "global_alloc", since = "1.28.0")]
    unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {
    80004aba:	715d                	addi	sp,sp,-80
    80004abc:	e486                	sd	ra,72(sp)
    80004abe:	e82a                	sd	a0,16(sp)
    80004ac0:	f02e                	sd	a1,32(sp)
    80004ac2:	f432                	sd	a2,40(sp)
    80004ac4:	f82a                	sd	a0,48(sp)
    80004ac6:	1008                	addi	a0,sp,32
        let size = layout.size();
    80004ac8:	0001a097          	auipc	ra,0x1a
    80004acc:	ec6080e7          	jalr	-314(ra) # 8001e98e <_ZN4core5alloc6layout6Layout4size17h7f60c0168860a2ffE>
    80004ad0:	85aa                	mv	a1,a0
    80004ad2:	ec2e                	sd	a1,24(sp)
    80004ad4:	fc2a                	sd	a0,56(sp)
    80004ad6:	a009                	j	80004ad8 <_ZN4core5alloc6global11GlobalAlloc12alloc_zeroed17h5bb5edba03a2227bE+0x1e>
        // SAFETY: the safety contract for `alloc` must be upheld by the caller.
        let ptr = unsafe { self.alloc(layout) };
    80004ad8:	6542                	ld	a0,16(sp)
    80004ada:	7582                	ld	a1,32(sp)
    80004adc:	7622                	ld	a2,40(sp)
    80004ade:	00008097          	auipc	ra,0x8
    80004ae2:	d20080e7          	jalr	-736(ra) # 8000c7fe <_ZN87_$LT$kernel..memory..kalloc..KernelHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17h526e18d88530d166E>
    80004ae6:	85aa                	mv	a1,a0
    80004ae8:	e42e                	sd	a1,8(sp)
    80004aea:	e0aa                	sd	a0,64(sp)
    80004aec:	a009                	j	80004aee <_ZN4core5alloc6global11GlobalAlloc12alloc_zeroed17h5bb5edba03a2227bE+0x34>
        if !ptr.is_null() {
    80004aee:	6522                	ld	a0,8(sp)
    80004af0:	0001b097          	auipc	ra,0x1b
    80004af4:	c92080e7          	jalr	-878(ra) # 8001f782 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hba478e65ea6353f9E>
    80004af8:	e02a                	sd	a0,0(sp)
    80004afa:	a009                	j	80004afc <_ZN4core5alloc6global11GlobalAlloc12alloc_zeroed17h5bb5edba03a2227bE+0x42>
    80004afc:	6502                	ld	a0,0(sp)
    80004afe:	e911                	bnez	a0,80004b12 <_ZN4core5alloc6global11GlobalAlloc12alloc_zeroed17h5bb5edba03a2227bE+0x58>
    80004b00:	a009                	j	80004b02 <_ZN4core5alloc6global11GlobalAlloc12alloc_zeroed17h5bb5edba03a2227bE+0x48>
            // SAFETY: as allocation succeeded, the region from `ptr`
            // of size `size` is guaranteed to be valid for writes.
            unsafe { ptr::write_bytes(ptr, 0, size) };
    80004b02:	6662                	ld	a2,24(sp)
    80004b04:	6522                	ld	a0,8(sp)
    80004b06:	4581                	li	a1,0
    80004b08:	0001d097          	auipc	ra,0x1d
    80004b0c:	028080e7          	jalr	40(ra) # 80021b30 <_ZN4core10intrinsics11write_bytes17hfabd30e5bfcb1b55E>
    80004b10:	a011                	j	80004b14 <_ZN4core5alloc6global11GlobalAlloc12alloc_zeroed17h5bb5edba03a2227bE+0x5a>
        if !ptr.is_null() {
    80004b12:	a011                	j	80004b16 <_ZN4core5alloc6global11GlobalAlloc12alloc_zeroed17h5bb5edba03a2227bE+0x5c>
    80004b14:	a009                	j	80004b16 <_ZN4core5alloc6global11GlobalAlloc12alloc_zeroed17h5bb5edba03a2227bE+0x5c>
        }
        ptr
    }
    80004b16:	6522                	ld	a0,8(sp)
    80004b18:	60a6                	ld	ra,72(sp)
    80004b1a:	6161                	addi	sp,sp,80
    80004b1c:	8082                	ret

Disassembly of section .text._ZN4core5alloc6global11GlobalAlloc7realloc17h24a579bea5cb79d9E:

0000000080004b1e <_ZN4core5alloc6global11GlobalAlloc7realloc17h24a579bea5cb79d9E>:
    /// reallocation error are encouraged to call the [`handle_alloc_error`] function,
    /// rather than directly invoking `panic!` or similar.
    ///
    /// [`handle_alloc_error`]: ../../alloc/alloc/fn.handle_alloc_error.html
    #[stable(feature = "global_alloc", since = "1.28.0")]
    unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
    80004b1e:	7135                	addi	sp,sp,-160
    80004b20:	ed06                	sd	ra,152(sp)
    80004b22:	fc3a                	sd	a4,56(sp)
    80004b24:	e0ae                	sd	a1,64(sp)
    80004b26:	e4aa                	sd	a0,72(sp)
    80004b28:	ecb2                	sd	a2,88(sp)
    80004b2a:	f0b6                	sd	a3,96(sp)
    80004b2c:	f4aa                	sd	a0,104(sp)
    80004b2e:	f8ae                	sd	a1,112(sp)
    80004b30:	fcba                	sd	a4,120(sp)
    80004b32:	08a8                	addi	a0,sp,88
        // SAFETY: the caller must ensure that the `new_size` does not overflow.
        // `layout.align()` comes from a `Layout` and is thus guaranteed to be valid.
        let new_layout = unsafe { Layout::from_size_align_unchecked(new_size, layout.align()) };
    80004b34:	0001a097          	auipc	ra,0x1a
    80004b38:	e64080e7          	jalr	-412(ra) # 8001e998 <_ZN4core5alloc6layout6Layout5align17h05712eb17caed6beE>
    80004b3c:	e8aa                	sd	a0,80(sp)
    80004b3e:	a009                	j	80004b40 <_ZN4core5alloc6global11GlobalAlloc7realloc17h24a579bea5cb79d9E+0x22>
    80004b40:	65c6                	ld	a1,80(sp)
    80004b42:	7562                	ld	a0,56(sp)
    80004b44:	0001a097          	auipc	ra,0x1a
    80004b48:	e20080e7          	jalr	-480(ra) # 8001e964 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h7d187b5349095d20E>
    80004b4c:	862a                	mv	a2,a0
    80004b4e:	f432                	sd	a2,40(sp)
    80004b50:	862e                	mv	a2,a1
    80004b52:	f832                	sd	a2,48(sp)
    80004b54:	e12a                	sd	a0,128(sp)
    80004b56:	e52e                	sd	a1,136(sp)
    80004b58:	a009                	j	80004b5a <_ZN4core5alloc6global11GlobalAlloc7realloc17h24a579bea5cb79d9E+0x3c>
        // SAFETY: the caller must ensure that `new_layout` is greater than zero.
        let new_ptr = unsafe { self.alloc(new_layout) };
    80004b5a:	7642                	ld	a2,48(sp)
    80004b5c:	75a2                	ld	a1,40(sp)
    80004b5e:	6526                	ld	a0,72(sp)
    80004b60:	00008097          	auipc	ra,0x8
    80004b64:	c9e080e7          	jalr	-866(ra) # 8000c7fe <_ZN87_$LT$kernel..memory..kalloc..KernelHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17h526e18d88530d166E>
    80004b68:	85aa                	mv	a1,a0
    80004b6a:	f02e                	sd	a1,32(sp)
    80004b6c:	e92a                	sd	a0,144(sp)
    80004b6e:	a009                	j	80004b70 <_ZN4core5alloc6global11GlobalAlloc7realloc17h24a579bea5cb79d9E+0x52>
        if !new_ptr.is_null() {
    80004b70:	7502                	ld	a0,32(sp)
    80004b72:	0001b097          	auipc	ra,0x1b
    80004b76:	c10080e7          	jalr	-1008(ra) # 8001f782 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hba478e65ea6353f9E>
    80004b7a:	ec2a                	sd	a0,24(sp)
    80004b7c:	a009                	j	80004b7e <_ZN4core5alloc6global11GlobalAlloc7realloc17h24a579bea5cb79d9E+0x60>
    80004b7e:	6562                	ld	a0,24(sp)
    80004b80:	e909                	bnez	a0,80004b92 <_ZN4core5alloc6global11GlobalAlloc7realloc17h24a579bea5cb79d9E+0x74>
    80004b82:	a009                	j	80004b84 <_ZN4core5alloc6global11GlobalAlloc7realloc17h24a579bea5cb79d9E+0x66>
    80004b84:	08a8                	addi	a0,sp,88
            // SAFETY: the previously allocated block cannot overlap the newly allocated block.
            // The safety contract for `dealloc` must be upheld by the caller.
            unsafe {
                ptr::copy_nonoverlapping(ptr, new_ptr, cmp::min(layout.size(), new_size));
    80004b86:	0001a097          	auipc	ra,0x1a
    80004b8a:	e08080e7          	jalr	-504(ra) # 8001e98e <_ZN4core5alloc6layout6Layout4size17h7f60c0168860a2ffE>
    80004b8e:	e82a                	sd	a0,16(sp)
    80004b90:	a011                	j	80004b94 <_ZN4core5alloc6global11GlobalAlloc7realloc17h24a579bea5cb79d9E+0x76>
        if !new_ptr.is_null() {
    80004b92:	a815                	j	80004bc6 <_ZN4core5alloc6global11GlobalAlloc7realloc17h24a579bea5cb79d9E+0xa8>
                ptr::copy_nonoverlapping(ptr, new_ptr, cmp::min(layout.size(), new_size));
    80004b94:	75e2                	ld	a1,56(sp)
    80004b96:	6542                	ld	a0,16(sp)
    80004b98:	00018097          	auipc	ra,0x18
    80004b9c:	956080e7          	jalr	-1706(ra) # 8001c4ee <_ZN4core3cmp3min17hbc9e632873ab1838E>
    80004ba0:	e42a                	sd	a0,8(sp)
    80004ba2:	a009                	j	80004ba4 <_ZN4core5alloc6global11GlobalAlloc7realloc17h24a579bea5cb79d9E+0x86>
    80004ba4:	6586                	ld	a1,64(sp)
    80004ba6:	6622                	ld	a2,8(sp)
    80004ba8:	7502                	ld	a0,32(sp)
    80004baa:	00020097          	auipc	ra,0x20
    80004bae:	53a080e7          	jalr	1338(ra) # 800250e4 <memcpy>
    80004bb2:	6586                	ld	a1,64(sp)
                self.dealloc(ptr, layout);
    80004bb4:	6526                	ld	a0,72(sp)
    80004bb6:	6666                	ld	a2,88(sp)
    80004bb8:	7686                	ld	a3,96(sp)
    80004bba:	00008097          	auipc	ra,0x8
    80004bbe:	c92080e7          	jalr	-878(ra) # 8000c84c <_ZN87_$LT$kernel..memory..kalloc..KernelHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$7dealloc17hf9dbc9c2cc300335E>
    80004bc2:	a009                	j	80004bc4 <_ZN4core5alloc6global11GlobalAlloc7realloc17h24a579bea5cb79d9E+0xa6>
        if !new_ptr.is_null() {
    80004bc4:	a009                	j	80004bc6 <_ZN4core5alloc6global11GlobalAlloc7realloc17h24a579bea5cb79d9E+0xa8>
            }
        }
        new_ptr
    }
    80004bc6:	7502                	ld	a0,32(sp)
    80004bc8:	60ea                	ld	ra,152(sp)
    80004bca:	610d                	addi	sp,sp,160
    80004bcc:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register4sepc4read17hcaa3e2a818646c19E:

0000000080004bce <_ZN6kernel4arch5riscv8register4sepc4read17hcaa3e2a818646c19E>:
// machine exception program counter, holds the
// instruction address to which a return from
// exception will go.
#[inline]
pub unsafe fn read() -> usize {
    80004bce:	1141                	addi	sp,sp,-16
    let ret:usize;
    llvm_asm!("csrr $0, sepc":"=r"(ret):::"volatile");
    80004bd0:	14102573          	csrr	a0,sepc
    80004bd4:	e42a                	sd	a0,8(sp)
    ret
}
    80004bd6:	0141                	addi	sp,sp,16
    80004bd8:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register4sepc5write17h2074fd389defa9f2E:

0000000080004bda <_ZN6kernel4arch5riscv8register4sepc5write17h2074fd389defa9f2E>:

#[inline]
pub unsafe fn write(x:usize){
    80004bda:	1141                	addi	sp,sp,-16
    80004bdc:	e42a                	sd	a0,8(sp)
    llvm_asm!("csrw sepc, $0"::"r"(x)::"volatile");
    80004bde:	14151073          	csrw	sepc,a0
    80004be2:	0141                	addi	sp,sp,16
    80004be4:	8082                	ret

Disassembly of section .text._ZN6kernel2fs6bitmap19locate_inode_offset17h27b37f6ce6332c77E:

0000000080004be6 <_ZN6kernel2fs6bitmap19locate_inode_offset17h27b37f6ce6332c77E>:
// }

/// Given an inode number. 
/// Calculate the offset index of this inode inside the block. 
#[inline]
fn locate_inode_offset(inum: u32) -> usize {
    80004be6:	1141                	addi	sp,sp,-16
    80004be8:	c62a                	sw	a0,12(sp)
    inum as usize % IPB
    80004bea:	893d                	andi	a0,a0,15
}
    80004bec:	0141                	addi	sp,sp,16
    80004bee:	8082                	ret

Disassembly of section .text._ZN6kernel2fs6bitmap5bfree17h2d4cb92b39e2512aE:

0000000080004bf0 <_ZN6kernel2fs6bitmap5bfree17h2d4cb92b39e2512aE>:

/// Free a block in the disk by setting the relevant bit in bitmap to 0.
pub fn bfree(dev: u32, blockno: u32) {
    80004bf0:	7155                	addi	sp,sp,-208
    80004bf2:	e586                	sd	ra,200(sp)
    80004bf4:	862e                	mv	a2,a1
    80004bf6:	fc32                	sd	a2,56(sp)
    80004bf8:	862a                	mv	a2,a0
    80004bfa:	e0b2                	sd	a2,64(sp)
    80004bfc:	d12a                	sw	a0,160(sp)
    80004bfe:	d32e                	sw	a1,164(sp)

0000000080004c00 <.LBB1_12>:
    let bm_blockno = unsafe { SUPER_BLOCK.bitmap_blockno(blockno) };
    80004c00:	0006c517          	auipc	a0,0x6c
    80004c04:	4a050513          	addi	a0,a0,1184 # 800710a0 <_ZN6kernel2fs10superblock11SUPER_BLOCK17hc3889871ecbe2b54E>
    80004c08:	00003097          	auipc	ra,0x3
    80004c0c:	c2c080e7          	jalr	-980(ra) # 80007834 <_ZN6kernel2fs10superblock10SuperBlock14bitmap_blockno17h010142deb773804aE>
    80004c10:	85aa                	mv	a1,a0
    80004c12:	e4ae                	sd	a1,72(sp)
    80004c14:	d52a                	sw	a0,168(sp)
    80004c16:	a009                	j	80004c18 <.LBB1_12+0x18>
    80004c18:	66a6                	ld	a3,72(sp)
    80004c1a:	6606                	ld	a2,64(sp)
    80004c1c:	7562                	ld	a0,56(sp)
    80004c1e:	6589                	lui	a1,0x2
    80004c20:	35fd                	addiw	a1,a1,-1
    let bm_offset = blockno % BPB;
    80004c22:	8de9                	and	a1,a1,a0
    80004c24:	d72e                	sw	a1,172(sp)
    let index = (bm_offset / 8) as isize;
    80004c26:	00355593          	srli	a1,a0,0x3
    80004c2a:	3ff5f593          	andi	a1,a1,1023
    80004c2e:	f42e                	sd	a1,40(sp)
    80004c30:	f92e                	sd	a1,176(sp)
    let bit = (bm_offset % 8) as usize;
    80004c32:	891d                	andi	a0,a0,7
    80004c34:	f82a                	sd	a0,48(sp)
    80004c36:	fd2a                	sd	a0,184(sp)

0000000080004c38 <.LBB1_13>:
    let mut buf = BCACHE.bread(dev, bm_blockno);
    80004c38:	0002a597          	auipc	a1,0x2a
    80004c3c:	3c858593          	addi	a1,a1,968 # 8002f000 <_ZN6kernel2fs3bio6BCACHE17h4811aac4f8d79dc4E>
    80004c40:	0888                	addi	a0,sp,80
    80004c42:	fffff097          	auipc	ra,0xfffff
    80004c46:	9ba080e7          	jalr	-1606(ra) # 800035fc <_ZN6kernel2fs3bio6Bcache5bread17h6ef915e4e896646bE>
    80004c4a:	a009                	j	80004c4c <.LBB1_13+0x14>
    80004c4c:	0888                	addi	a0,sp,80
    
    let byte = unsafe { (buf.raw_data_mut() as *mut u8).offset(index).as_mut().unwrap() };
    80004c4e:	fffff097          	auipc	ra,0xfffff
    80004c52:	b38080e7          	jalr	-1224(ra) # 80003786 <_ZN6kernel2fs3bio3Buf12raw_data_mut17hbae73c10d57c515dE>
    80004c56:	f02a                	sd	a0,32(sp)
    80004c58:	a009                	j	80004c5a <.LBB1_13+0x22>
    80004c5a:	75a2                	ld	a1,40(sp)
    80004c5c:	7502                	ld	a0,32(sp)
    80004c5e:	0001b097          	auipc	ra,0x1b
    80004c62:	b10080e7          	jalr	-1264(ra) # 8001f76e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb5f7a0f346747657E>
    80004c66:	ec2a                	sd	a0,24(sp)
    80004c68:	a009                	j	80004c6a <.LBB1_13+0x32>
    80004c6a:	6562                	ld	a0,24(sp)
    80004c6c:	0001b097          	auipc	ra,0x1b
    80004c70:	ad0080e7          	jalr	-1328(ra) # 8001f73c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17he7a20e0a0a2f5b66E>
    80004c74:	e82a                	sd	a0,16(sp)
    80004c76:	a009                	j	80004c78 <.LBB1_13+0x40>
    80004c78:	6542                	ld	a0,16(sp)

0000000080004c7a <.LBB1_14>:
    80004c7a:	00021597          	auipc	a1,0x21
    80004c7e:	59658593          	addi	a1,a1,1430 # 80026210 <.L__unnamed_1>
    80004c82:	0001d097          	auipc	ra,0x1d
    80004c86:	a84080e7          	jalr	-1404(ra) # 80021706 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9c7c2e8ce1270a73E>
    80004c8a:	e42a                	sd	a0,8(sp)
    80004c8c:	a009                	j	80004c8e <.LBB1_14+0x14>
    80004c8e:	75c2                	ld	a1,48(sp)
    80004c90:	6522                	ld	a0,8(sp)
    80004c92:	e1aa                	sd	a0,192(sp)
    if !byte.get_bit(bit) {
    80004c94:	fffff097          	auipc	ra,0xfffff
    80004c98:	f2e080e7          	jalr	-210(ra) # 80003bc2 <_ZN42_$LT$u8$u20$as$u20$bit_field..BitField$GT$7get_bit17h5d59737ea892b952E>
    80004c9c:	e02a                	sd	a0,0(sp)
    80004c9e:	a009                	j	80004ca0 <.LBB1_14+0x26>
    80004ca0:	6502                	ld	a0,0(sp)
    80004ca2:	e105                	bnez	a0,80004cc2 <.LBB1_16+0x14>
    80004ca4:	a009                	j	80004ca6 <.LBB1_15>

0000000080004ca6 <.LBB1_15>:
        panic!("bitmap: double freeing a block");
    80004ca6:	00021517          	auipc	a0,0x21
    80004caa:	58250513          	addi	a0,a0,1410 # 80026228 <.L__unnamed_2>

0000000080004cae <.LBB1_16>:
    80004cae:	00021617          	auipc	a2,0x21
    80004cb2:	59a60613          	addi	a2,a2,1434 # 80026248 <.L__unnamed_3>
    80004cb6:	45f9                	li	a1,30
    80004cb8:	0001d097          	auipc	ra,0x1d
    80004cbc:	5be080e7          	jalr	1470(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80004cc0:	0000                	unimp
    }
    byte.set_bit(bit, false);
    80004cc2:	75c2                	ld	a1,48(sp)
    80004cc4:	6522                	ld	a0,8(sp)
    80004cc6:	4601                	li	a2,0
    80004cc8:	fffff097          	auipc	ra,0xfffff
    80004ccc:	f78080e7          	jalr	-136(ra) # 80003c40 <_ZN42_$LT$u8$u20$as$u20$bit_field..BitField$GT$7set_bit17ha97cadf2a55a43d3E>
    80004cd0:	a009                	j	80004cd2 <.LBB1_16+0x24>
    LOG.write(buf);
    80004cd2:	7546                	ld	a0,112(sp)
    80004cd4:	ed2a                	sd	a0,152(sp)
    80004cd6:	7526                	ld	a0,104(sp)
    80004cd8:	e92a                	sd	a0,144(sp)
    80004cda:	7506                	ld	a0,96(sp)
    80004cdc:	e52a                	sd	a0,136(sp)
    80004cde:	6566                	ld	a0,88(sp)
    80004ce0:	e12a                	sd	a0,128(sp)
    80004ce2:	6546                	ld	a0,80(sp)
    80004ce4:	fcaa                	sd	a0,120(sp)

0000000080004ce6 <.LBB1_17>:
    80004ce6:	00063517          	auipc	a0,0x63
    80004cea:	d0250513          	addi	a0,a0,-766 # 800679e8 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    80004cee:	18ac                	addi	a1,sp,120
    80004cf0:	00004097          	auipc	ra,0x4
    80004cf4:	0b4080e7          	jalr	180(ra) # 80008da4 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$5write17ha48e3edeecccac4fE>
    80004cf8:	a009                	j	80004cfa <.LBB1_17+0x14>
}
    80004cfa:	60ae                	ld	ra,200(sp)
    80004cfc:	6169                	addi	sp,sp,208
    80004cfe:	8082                	ret

Disassembly of section .text._ZN6kernel2fs6bitmap6balloc17hb1927bc98cc6e122E:

0000000080004d00 <_ZN6kernel2fs6bitmap6balloc17hb1927bc98cc6e122E>:


/// Allocate a zeroed disk block 
pub fn balloc(dev: u32) -> u32 {
    80004d00:	712d                	addi	sp,sp,-288
    80004d02:	ee06                	sd	ra,280(sp)
    80004d04:	85aa                	mv	a1,a0
    80004d06:	f0ae                	sd	a1,96(sp)
    80004d08:	ddaa                	sw	a0,248(sp)
    80004d0a:	4501                	li	a0,0
    let mut b = 0;
    80004d0c:	daaa                	sw	a0,116(sp)

0000000080004d0e <.LBB2_33>:
    let sb_size = unsafe{ SUPER_BLOCK.size() };
    80004d0e:	0006c517          	auipc	a0,0x6c
    80004d12:	39250513          	addi	a0,a0,914 # 800710a0 <_ZN6kernel2fs10superblock11SUPER_BLOCK17hc3889871ecbe2b54E>
    80004d16:	00003097          	auipc	ra,0x3
    80004d1a:	9fe080e7          	jalr	-1538(ra) # 80007714 <_ZN6kernel2fs10superblock10SuperBlock4size17hb3cee79658d4a223E>
    80004d1e:	85aa                	mv	a1,a0
    80004d20:	f4ae                	sd	a1,104(sp)
    80004d22:	dfaa                	sw	a0,252(sp)
    80004d24:	a009                	j	80004d26 <.LBB2_33+0x18>
    while b < sb_size {
    80004d26:	75a6                	ld	a1,104(sp)
    80004d28:	5556                	lw	a0,116(sp)
    80004d2a:	2581                	sext.w	a1,a1
    80004d2c:	02b56263          	bltu	a0,a1,80004d50 <.LBB2_35+0x16>
    80004d30:	a009                	j	80004d32 <.LBB2_34>

0000000080004d32 <.LBB2_34>:
            }
        }
        drop(buf);
        b += BPB;
    }
    panic!("balloc: out of the block ranges.")
    80004d32:	00020517          	auipc	a0,0x20
    80004d36:	67850513          	addi	a0,a0,1656 # 800253aa <.L__unnamed_11+0xde>

0000000080004d3a <.LBB2_35>:
    80004d3a:	00021617          	auipc	a2,0x21
    80004d3e:	60660613          	addi	a2,a2,1542 # 80026340 <.L__unnamed_5>
    80004d42:	02000593          	li	a1,32
    80004d46:	0001d097          	auipc	ra,0x1d
    80004d4a:	530080e7          	jalr	1328(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80004d4e:	0000                	unimp
        let bm_blockno = unsafe{ SUPER_BLOCK.bitmap_blockno(b) };
    80004d50:	55d6                	lw	a1,116(sp)

0000000080004d52 <.LBB2_36>:
    80004d52:	0006c517          	auipc	a0,0x6c
    80004d56:	34e50513          	addi	a0,a0,846 # 800710a0 <_ZN6kernel2fs10superblock11SUPER_BLOCK17hc3889871ecbe2b54E>
    80004d5a:	00003097          	auipc	ra,0x3
    80004d5e:	ada080e7          	jalr	-1318(ra) # 80007834 <_ZN6kernel2fs10superblock10SuperBlock14bitmap_blockno17h010142deb773804aE>
    80004d62:	85aa                	mv	a1,a0
    80004d64:	ecae                	sd	a1,88(sp)
    80004d66:	10a12023          	sw	a0,256(sp)
    80004d6a:	a009                	j	80004d6c <.LBB2_36+0x1a>
        let mut buf = BCACHE.bread(dev, bm_blockno);
    80004d6c:	66e6                	ld	a3,88(sp)
    80004d6e:	7606                	ld	a2,96(sp)

0000000080004d70 <.LBB2_37>:
    80004d70:	0002a597          	auipc	a1,0x2a
    80004d74:	29058593          	addi	a1,a1,656 # 8002f000 <_ZN6kernel2fs3bio6BCACHE17h4811aac4f8d79dc4E>
    80004d78:	18a8                	addi	a0,sp,120
    80004d7a:	fffff097          	auipc	ra,0xfffff
    80004d7e:	882080e7          	jalr	-1918(ra) # 800035fc <_ZN6kernel2fs3bio6Bcache5bread17h6ef915e4e896646bE>
    80004d82:	a009                	j	80004d84 <.LBB2_37+0x14>
    80004d84:	4501                	li	a0,0
        let mut bi = 0;
    80004d86:	d12a                	sw	a0,160(sp)
        while bi < BPB && b + bi < sb_size {
    80004d88:	a009                	j	80004d8a <.LBB2_37+0x1a>
    80004d8a:	0a016503          	lwu	a0,160(sp)
    80004d8e:	8135                	srli	a0,a0,0xd
    80004d90:	4581                	li	a1,0
    80004d92:	00b50b63          	beq	a0,a1,80004da8 <.LBB2_37+0x38>
    80004d96:	a029                	j	80004da0 <.LBB2_37+0x30>
    80004d98:	4505                	li	a0,1
    80004d9a:	0aa103a3          	sb	a0,167(sp)
    80004d9e:	a00d                	j	80004dc0 <.LBB2_37+0x50>
    80004da0:	4501                	li	a0,0
    80004da2:	0aa103a3          	sb	a0,167(sp)
    80004da6:	a829                	j	80004dc0 <.LBB2_37+0x50>
    80004da8:	07416503          	lwu	a0,116(sp)
    80004dac:	0a016583          	lwu	a1,160(sp)
    80004db0:	95aa                	add	a1,a1,a0
    80004db2:	e8ae                	sd	a1,80(sp)
    80004db4:	02059513          	slli	a0,a1,0x20
    80004db8:	9101                	srli	a0,a0,0x20
    80004dba:	14b51863          	bne	a0,a1,80004f0a <.LBB2_40>
    80004dbe:	a031                	j	80004dca <.LBB2_37+0x5a>
    80004dc0:	0a714503          	lbu	a0,167(sp)
    80004dc4:	8905                	andi	a0,a0,1
    80004dc6:	e90d                	bnez	a0,80004df8 <.LBB2_37+0x88>
    80004dc8:	a801                	j	80004dd8 <.LBB2_37+0x68>
    80004dca:	6546                	ld	a0,80(sp)
    80004dcc:	75a6                	ld	a1,104(sp)
    80004dce:	2581                	sext.w	a1,a1
    80004dd0:	2501                	sext.w	a0,a0
    80004dd2:	fcb563e3          	bltu	a0,a1,80004d98 <.LBB2_37+0x28>
    80004dd6:	b7e9                	j	80004da0 <.LBB2_37+0x30>
        drop(buf);
    80004dd8:	656a                	ld	a0,152(sp)
    80004dda:	f9aa                	sd	a0,240(sp)
    80004ddc:	654a                	ld	a0,144(sp)
    80004dde:	f5aa                	sd	a0,232(sp)
    80004de0:	652a                	ld	a0,136(sp)
    80004de2:	f1aa                	sd	a0,224(sp)
    80004de4:	650a                	ld	a0,128(sp)
    80004de6:	edaa                	sd	a0,216(sp)
    80004de8:	7566                	ld	a0,120(sp)
    80004dea:	e9aa                	sd	a0,208(sp)
    80004dec:	0988                	addi	a0,sp,208
    80004dee:	00018097          	auipc	ra,0x18
    80004df2:	36c080e7          	jalr	876(ra) # 8001d15a <_ZN4core3mem4drop17hda1e19029436deb9E>
    80004df6:	a8e5                	j	80004eee <.LBB2_39+0x34>
            bi += 1;
    80004df8:	0a016503          	lwu	a0,160(sp)
    80004dfc:	00150593          	addi	a1,a0,1
    80004e00:	e4ae                	sd	a1,72(sp)
    80004e02:	02059513          	slli	a0,a1,0x20
    80004e06:	9101                	srli	a0,a0,0x20
    80004e08:	10b51f63          	bne	a0,a1,80004f26 <.LBB2_42>
    80004e0c:	a009                	j	80004e0e <.LBB2_37+0x9e>
    80004e0e:	6526                	ld	a0,72(sp)
    80004e10:	d12a                	sw	a0,160(sp)
            let m = 1 << (bi % 8);
    80004e12:	00757593          	andi	a1,a0,7
    80004e16:	4505                	li	a0,1
    80004e18:	00b51533          	sll	a0,a0,a1
    80004e1c:	e0aa                	sd	a0,64(sp)
    80004e1e:	4501                	li	a0,0
    80004e20:	12051163          	bnez	a0,80004f42 <.LBB2_44>
    80004e24:	a009                	j	80004e26 <.LBB2_37+0xb6>
    80004e26:	6506                	ld	a0,64(sp)
    80004e28:	10a103a3          	sb	a0,263(sp)
    80004e2c:	18a8                	addi	a0,sp,120
            let buf_ptr = unsafe{ (buf.raw_data_mut() as *mut u8).offset((bi / 8) as isize).as_mut().unwrap() };
    80004e2e:	fffff097          	auipc	ra,0xfffff
    80004e32:	958080e7          	jalr	-1704(ra) # 80003786 <_ZN6kernel2fs3bio3Buf12raw_data_mut17hbae73c10d57c515dE>
    80004e36:	fc2a                	sd	a0,56(sp)
    80004e38:	a009                	j	80004e3a <.LBB2_37+0xca>
    80004e3a:	7562                	ld	a0,56(sp)
    80004e3c:	0a016583          	lwu	a1,160(sp)
    80004e40:	818d                	srli	a1,a1,0x3
    80004e42:	0001b097          	auipc	ra,0x1b
    80004e46:	92c080e7          	jalr	-1748(ra) # 8001f76e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb5f7a0f346747657E>
    80004e4a:	f82a                	sd	a0,48(sp)
    80004e4c:	a009                	j	80004e4e <.LBB2_37+0xde>
    80004e4e:	7542                	ld	a0,48(sp)
    80004e50:	0001b097          	auipc	ra,0x1b
    80004e54:	8ec080e7          	jalr	-1812(ra) # 8001f73c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17he7a20e0a0a2f5b66E>
    80004e58:	f42a                	sd	a0,40(sp)
    80004e5a:	a009                	j	80004e5c <.LBB2_37+0xec>
    80004e5c:	7522                	ld	a0,40(sp)

0000000080004e5e <.LBB2_38>:
    80004e5e:	00021597          	auipc	a1,0x21
    80004e62:	49a58593          	addi	a1,a1,1178 # 800262f8 <.L__unnamed_6>
    80004e66:	0001d097          	auipc	ra,0x1d
    80004e6a:	8a0080e7          	jalr	-1888(ra) # 80021706 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9c7c2e8ce1270a73E>
    80004e6e:	f02a                	sd	a0,32(sp)
    80004e70:	a009                	j	80004e72 <.LBB2_38+0x14>
    80004e72:	7502                	ld	a0,32(sp)
    80004e74:	e62a                	sd	a0,264(sp)
            let buf_val = unsafe{ ptr::read(buf_ptr) };
    80004e76:	00013097          	auipc	ra,0x13
    80004e7a:	7c6080e7          	jalr	1990(ra) # 8001863c <_ZN4core3ptr4read17h018161c0cd37b3fbE>
    80004e7e:	85aa                	mv	a1,a0
    80004e80:	ec2e                	sd	a1,24(sp)
    80004e82:	10a10ba3          	sb	a0,279(sp)
    80004e86:	a009                	j	80004e88 <.LBB2_38+0x2a>
            if buf_val == 0 { // Is block free?
    80004e88:	6562                	ld	a0,24(sp)
    80004e8a:	0ff57513          	andi	a0,a0,255
    80004e8e:	4581                	li	a1,0
    80004e90:	00b51a63          	bne	a0,a1,80004ea4 <.LBB2_38+0x46>
    80004e94:	a009                	j	80004e96 <.LBB2_38+0x38>
                unsafe{ ptr::write(buf_ptr, m) };
    80004e96:	6586                	ld	a1,64(sp)
    80004e98:	7502                	ld	a0,32(sp)
    80004e9a:	00014097          	auipc	ra,0x14
    80004e9e:	a2c080e7          	jalr	-1492(ra) # 800188c6 <_ZN4core3ptr5write17h0fb1ba83ac2984c7E>
    80004ea2:	a011                	j	80004ea6 <.LBB2_38+0x48>
        while bi < BPB && b + bi < sb_size {
    80004ea4:	b5dd                	j	80004d8a <.LBB2_37+0x1a>
                LOG.write(buf);
    80004ea6:	656a                	ld	a0,152(sp)
    80004ea8:	e5aa                	sd	a0,200(sp)
    80004eaa:	654a                	ld	a0,144(sp)
    80004eac:	e1aa                	sd	a0,192(sp)
    80004eae:	652a                	ld	a0,136(sp)
    80004eb0:	fd2a                	sd	a0,184(sp)
    80004eb2:	650a                	ld	a0,128(sp)
    80004eb4:	f92a                	sd	a0,176(sp)
    80004eb6:	7566                	ld	a0,120(sp)
    80004eb8:	f52a                	sd	a0,168(sp)

0000000080004eba <.LBB2_39>:
    80004eba:	00063517          	auipc	a0,0x63
    80004ebe:	b2e50513          	addi	a0,a0,-1234 # 800679e8 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    80004ec2:	112c                	addi	a1,sp,168
    80004ec4:	00004097          	auipc	ra,0x4
    80004ec8:	ee0080e7          	jalr	-288(ra) # 80008da4 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$5write17ha48e3edeecccac4fE>
    80004ecc:	a009                	j	80004ece <.LBB2_39+0x14>
                return b + bi
    80004ece:	07416503          	lwu	a0,116(sp)
    80004ed2:	0a016583          	lwu	a1,160(sp)
    80004ed6:	95aa                	add	a1,a1,a0
    80004ed8:	e82e                	sd	a1,16(sp)
    80004eda:	02059513          	slli	a0,a1,0x20
    80004ede:	9101                	srli	a0,a0,0x20
    80004ee0:	08b51063          	bne	a0,a1,80004f60 <.LBB2_46>
    80004ee4:	a009                	j	80004ee6 <.LBB2_39+0x2c>
}
    80004ee6:	6542                	ld	a0,16(sp)
    80004ee8:	60f2                	ld	ra,280(sp)
    80004eea:	6115                	addi	sp,sp,288
    80004eec:	8082                	ret
        b += BPB;
    80004eee:	07416503          	lwu	a0,116(sp)
    80004ef2:	6589                	lui	a1,0x2
    80004ef4:	95aa                	add	a1,a1,a0
    80004ef6:	e42e                	sd	a1,8(sp)
    80004ef8:	02059513          	slli	a0,a1,0x20
    80004efc:	9101                	srli	a0,a0,0x20
    80004efe:	06b51f63          	bne	a0,a1,80004f7c <.LBB2_48>
    80004f02:	a009                	j	80004f04 <.LBB2_39+0x4a>
    80004f04:	6522                	ld	a0,8(sp)
    80004f06:	daaa                	sw	a0,116(sp)
    while b < sb_size {
    80004f08:	bd39                	j	80004d26 <.LBB2_33+0x18>

0000000080004f0a <.LBB2_40>:
        while bi < BPB && b + bi < sb_size {
    80004f0a:	00021517          	auipc	a0,0x21
    80004f0e:	37650513          	addi	a0,a0,886 # 80026280 <str.0>

0000000080004f12 <.LBB2_41>:
    80004f12:	00021617          	auipc	a2,0x21
    80004f16:	34e60613          	addi	a2,a2,846 # 80026260 <.L__unnamed_7>
    80004f1a:	45f1                	li	a1,28
    80004f1c:	0001d097          	auipc	ra,0x1d
    80004f20:	35a080e7          	jalr	858(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080004f26 <.LBB2_42>:
            bi += 1;
    80004f26:	00021517          	auipc	a0,0x21
    80004f2a:	35a50513          	addi	a0,a0,858 # 80026280 <str.0>

0000000080004f2e <.LBB2_43>:
    80004f2e:	00021617          	auipc	a2,0x21
    80004f32:	37260613          	addi	a2,a2,882 # 800262a0 <.L__unnamed_8>
    80004f36:	45f1                	li	a1,28
    80004f38:	0001d097          	auipc	ra,0x1d
    80004f3c:	33e080e7          	jalr	830(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080004f42 <.LBB2_44>:
            let m = 1 << (bi % 8);
    80004f42:	00021517          	auipc	a0,0x21
    80004f46:	38e50513          	addi	a0,a0,910 # 800262d0 <str.1>

0000000080004f4a <.LBB2_45>:
    80004f4a:	00021617          	auipc	a2,0x21
    80004f4e:	36e60613          	addi	a2,a2,878 # 800262b8 <.L__unnamed_9>
    80004f52:	02300593          	li	a1,35
    80004f56:	0001d097          	auipc	ra,0x1d
    80004f5a:	320080e7          	jalr	800(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080004f60 <.LBB2_46>:
                return b + bi
    80004f60:	00021517          	auipc	a0,0x21
    80004f64:	32050513          	addi	a0,a0,800 # 80026280 <str.0>

0000000080004f68 <.LBB2_47>:
    80004f68:	00021617          	auipc	a2,0x21
    80004f6c:	3a860613          	addi	a2,a2,936 # 80026310 <.L__unnamed_10>
    80004f70:	45f1                	li	a1,28
    80004f72:	0001d097          	auipc	ra,0x1d
    80004f76:	304080e7          	jalr	772(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080004f7c <.LBB2_48>:
        b += BPB;
    80004f7c:	00021517          	auipc	a0,0x21
    80004f80:	30450513          	addi	a0,a0,772 # 80026280 <str.0>

0000000080004f84 <.LBB2_49>:
    80004f84:	00021617          	auipc	a2,0x21
    80004f88:	3a460613          	addi	a2,a2,932 # 80026328 <.L__unnamed_11>
    80004f8c:	45f1                	li	a1,28
    80004f8e:	0001d097          	auipc	ra,0x1d
    80004f92:	2e8080e7          	jalr	744(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel2fs6bitmap11inode_alloc17h40b1057f68a7e223E:

0000000080004f98 <_ZN6kernel2fs6bitmap11inode_alloc17h40b1057f68a7e223E>:

pub fn inode_alloc(dev: u32, itype: InodeType) -> u32 {
    80004f98:	716d                	addi	sp,sp,-272
    80004f9a:	e606                	sd	ra,264(sp)
    80004f9c:	862e                	mv	a2,a1
    80004f9e:	e4b2                	sd	a2,72(sp)
    80004fa0:	862a                	mv	a2,a0
    80004fa2:	e8b2                	sd	a2,80(sp)
    80004fa4:	cbaa                	sw	a0,212(sp)
    80004fa6:	0cb11d23          	sh	a1,218(sp)

0000000080004faa <.LBB3_20>:
    let size = unsafe { SUPER_BLOCK.ninodes() };
    80004faa:	0006c517          	auipc	a0,0x6c
    80004fae:	0f650513          	addi	a0,a0,246 # 800710a0 <_ZN6kernel2fs10superblock11SUPER_BLOCK17hc3889871ecbe2b54E>
    80004fb2:	00002097          	auipc	ra,0x2
    80004fb6:	782080e7          	jalr	1922(ra) # 80007734 <_ZN6kernel2fs10superblock10SuperBlock7ninodes17h32fa650b3c4991daE>
    80004fba:	85aa                	mv	a1,a0
    80004fbc:	ecae                	sd	a1,88(sp)
    80004fbe:	cfaa                	sw	a0,220(sp)
    80004fc0:	a009                	j	80004fc2 <.LBB3_20+0x18>
    80004fc2:	65e6                	ld	a1,88(sp)
    80004fc4:	4505                	li	a0,1
    for inum in 1..size {
    80004fc6:	d0aa                	sw	a0,96(sp)
    80004fc8:	d2ae                	sw	a1,100(sp)
    80004fca:	00007097          	auipc	ra,0x7
    80004fce:	a7a080e7          	jalr	-1414(ra) # 8000ba44 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h2819071fbc006758E>
    80004fd2:	fc2a                	sd	a0,56(sp)
    80004fd4:	e0ae                	sd	a1,64(sp)
    80004fd6:	a009                	j	80004fd8 <.LBB3_20+0x2e>
    80004fd8:	6506                	ld	a0,64(sp)
    80004fda:	75e2                	ld	a1,56(sp)
    80004fdc:	d4ae                	sw	a1,104(sp)
    80004fde:	d6aa                	sw	a0,108(sp)
    80004fe0:	a009                	j	80004fe2 <.LBB3_20+0x38>
    80004fe2:	10a8                	addi	a0,sp,104
    80004fe4:	00007097          	auipc	ra,0x7
    80004fe8:	8f2080e7          	jalr	-1806(ra) # 8000b8d6 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17he2f0092c6efc86cdE>
    80004fec:	d8aa                	sw	a0,112(sp)
    80004fee:	daae                	sw	a1,116(sp)
    80004ff0:	a009                	j	80004ff2 <.LBB3_20+0x48>
    80004ff2:	07016503          	lwu	a0,112(sp)
    80004ff6:	4581                	li	a1,0
    80004ff8:	00b50463          	beq	a0,a1,80005000 <.LBB3_21>
    80004ffc:	a009                	j	80004ffe <.LBB3_20+0x54>
    80004ffe:	a005                	j	8000501e <.LBB3_22+0x16>

0000000080005000 <.LBB3_21>:
            LOG.write(buf);
            return inum
        }
    }

    panic!("not enough inode to alloc");
    80005000:	00021517          	auipc	a0,0x21
    80005004:	35850513          	addi	a0,a0,856 # 80026358 <.L__unnamed_12>

0000000080005008 <.LBB3_22>:
    80005008:	00021617          	auipc	a2,0x21
    8000500c:	37060613          	addi	a2,a2,880 # 80026378 <.L__unnamed_13>
    80005010:	45e5                	li	a1,25
    80005012:	0001d097          	auipc	ra,0x1d
    80005016:	264080e7          	jalr	612(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8000501a:	0000                	unimp
    for inum in 1..size {
    8000501c:	0000                	unimp
    8000501e:	07416583          	lwu	a1,116(sp)
    80005022:	f42e                	sd	a1,40(sp)
    80005024:	d1ae                	sw	a1,224(sp)
    80005026:	d3ae                	sw	a1,228(sp)
    80005028:	d5ae                	sw	a1,232(sp)

000000008000502a <.LBB3_23>:
        let blockno = unsafe { SUPER_BLOCK.locate_inode(inum) };
    8000502a:	0006c517          	auipc	a0,0x6c
    8000502e:	07650513          	addi	a0,a0,118 # 800710a0 <_ZN6kernel2fs10superblock11SUPER_BLOCK17hc3889871ecbe2b54E>
    80005032:	00002097          	auipc	ra,0x2
    80005036:	71e080e7          	jalr	1822(ra) # 80007750 <_ZN6kernel2fs10superblock10SuperBlock12locate_inode17hc2dbfb20b9411e7cE>
    8000503a:	85aa                	mv	a1,a0
    8000503c:	f82e                	sd	a1,48(sp)
    8000503e:	d7aa                	sw	a0,236(sp)
    80005040:	a009                	j	80005042 <.LBB3_23+0x18>
        let offset = locate_inode_offset(inum) as isize;
    80005042:	7522                	ld	a0,40(sp)
    80005044:	00000097          	auipc	ra,0x0
    80005048:	ba2080e7          	jalr	-1118(ra) # 80004be6 <_ZN6kernel2fs6bitmap19locate_inode_offset17h27b37f6ce6332c77E>
    8000504c:	f02a                	sd	a0,32(sp)
    8000504e:	a009                	j	80005050 <.LBB3_23+0x26>
    80005050:	76c2                	ld	a3,48(sp)
    80005052:	6646                	ld	a2,80(sp)
    80005054:	7502                	ld	a0,32(sp)
    80005056:	f9aa                	sd	a0,240(sp)

0000000080005058 <.LBB3_24>:
        let mut buf = BCACHE.bread(dev, blockno);
    80005058:	0002a597          	auipc	a1,0x2a
    8000505c:	fa858593          	addi	a1,a1,-88 # 8002f000 <_ZN6kernel2fs3bio6BCACHE17h4811aac4f8d79dc4E>
    80005060:	18a8                	addi	a0,sp,120
    80005062:	ffffe097          	auipc	ra,0xffffe
    80005066:	59a080e7          	jalr	1434(ra) # 800035fc <_ZN6kernel2fs3bio6Bcache5bread17h6ef915e4e896646bE>
    8000506a:	a009                	j	8000506c <.LBB3_24+0x14>
    8000506c:	18a8                	addi	a0,sp,120
        let dinode = unsafe { (buf.raw_data_mut() as *mut DiskInode).offset(offset) };
    8000506e:	ffffe097          	auipc	ra,0xffffe
    80005072:	718080e7          	jalr	1816(ra) # 80003786 <_ZN6kernel2fs3bio3Buf12raw_data_mut17hbae73c10d57c515dE>
    80005076:	ec2a                	sd	a0,24(sp)
    80005078:	a009                	j	8000507a <.LBB3_24+0x22>
    8000507a:	7582                	ld	a1,32(sp)
    8000507c:	6562                	ld	a0,24(sp)
    8000507e:	00013097          	auipc	ra,0x13
    80005082:	3d2080e7          	jalr	978(ra) # 80018450 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hf7573a6302c08e61E>
    80005086:	85aa                	mv	a1,a0
    80005088:	e82e                	sd	a1,16(sp)
    8000508a:	fdaa                	sd	a0,248(sp)
    8000508c:	a009                	j	8000508e <.LBB3_24+0x36>
        let dinode = unsafe { &mut *dinode };
    8000508e:	65a6                	ld	a1,72(sp)
    80005090:	6542                	ld	a0,16(sp)
    80005092:	e22a                	sd	a0,256(sp)
        if dinode.try_alloc(itype).is_ok() {
    80005094:	00003097          	auipc	ra,0x3
    80005098:	1c0080e7          	jalr	448(ra) # 80008254 <_ZN6kernel2fs6dinode9DiskInode9try_alloc17h056e30475eb0a85bE>
    8000509c:	0aa103a3          	sb	a0,167(sp)
    800050a0:	a009                	j	800050a2 <.LBB3_24+0x4a>
    800050a2:	0a710513          	addi	a0,sp,167
    800050a6:	00008097          	auipc	ra,0x8
    800050aa:	bdc080e7          	jalr	-1060(ra) # 8000cc82 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h2dc3ede719915417E>
    800050ae:	e42a                	sd	a0,8(sp)
    800050b0:	a009                	j	800050b2 <.LBB3_24+0x5a>
    800050b2:	6522                	ld	a0,8(sp)
    800050b4:	4581                	li	a1,0
    800050b6:	02b50763          	beq	a0,a1,800050e4 <.LBB3_25+0x14>
    800050ba:	a009                	j	800050bc <.LBB3_24+0x64>
            LOG.write(buf);
    800050bc:	656a                	ld	a0,152(sp)
    800050be:	e5aa                	sd	a0,200(sp)
    800050c0:	654a                	ld	a0,144(sp)
    800050c2:	e1aa                	sd	a0,192(sp)
    800050c4:	652a                	ld	a0,136(sp)
    800050c6:	fd2a                	sd	a0,184(sp)
    800050c8:	650a                	ld	a0,128(sp)
    800050ca:	f92a                	sd	a0,176(sp)
    800050cc:	7566                	ld	a0,120(sp)
    800050ce:	f52a                	sd	a0,168(sp)

00000000800050d0 <.LBB3_25>:
    800050d0:	00063517          	auipc	a0,0x63
    800050d4:	91850513          	addi	a0,a0,-1768 # 800679e8 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    800050d8:	112c                	addi	a1,sp,168
    800050da:	00004097          	auipc	ra,0x4
    800050de:	cca080e7          	jalr	-822(ra) # 80008da4 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$5write17ha48e3edeecccac4fE>
    800050e2:	a039                	j	800050f0 <.LBB3_25+0x20>
    800050e4:	18a8                	addi	a0,sp,120
    }
    800050e6:	00002097          	auipc	ra,0x2
    800050ea:	d48080e7          	jalr	-696(ra) # 80006e2e <_ZN4core3ptr41drop_in_place$LT$kernel..fs..bio..Buf$GT$17hc35967244f3e9eb6E>
    800050ee:	a029                	j	800050f8 <.LBB3_25+0x28>
    800050f0:	7522                	ld	a0,40(sp)
    800050f2:	60b2                	ld	ra,264(sp)
    800050f4:	6151                	addi	sp,sp,272
    800050f6:	8082                	ret
    for inum in 1..size {
    800050f8:	b5ed                	j	80004fe2 <.LBB3_20+0x38>

Disassembly of section .text._ZN4core4cell13Cell$LT$T$GT$3get17ha10dd437ebde1b39E:

00000000800050fa <_ZN4core4cell13Cell$LT$T$GT$3get17ha10dd437ebde1b39E>:
    ///
    /// let five = c.get();
    /// ```
    #[inline]
    #[stable(feature = "rust1", since = "1.0.0")]
    pub fn get(&self) -> T {
    800050fa:	1101                	addi	sp,sp,-32
    800050fc:	ec06                	sd	ra,24(sp)
    800050fe:	e82a                	sd	a0,16(sp)
        // SAFETY: This can cause data races if called from a separate thread,
        // but `Cell` is `!Sync` so this won't happen.
        unsafe { *self.value.get() }
    80005100:	00000097          	auipc	ra,0x0
    80005104:	15a080e7          	jalr	346(ra) # 8000525a <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h9354550c008f8577E>
    80005108:	e42a                	sd	a0,8(sp)
    8000510a:	a009                	j	8000510c <_ZN4core4cell13Cell$LT$T$GT$3get17ha10dd437ebde1b39E+0x12>
    8000510c:	6522                	ld	a0,8(sp)
    8000510e:	00054503          	lbu	a0,0(a0)
    }
    80005112:	60e2                	ld	ra,24(sp)
    80005114:	6105                	addi	sp,sp,32
    80005116:	8082                	ret

Disassembly of section .text._ZN4core4cell13Cell$LT$T$GT$3get17hc0e1a98a16df48afE:

0000000080005118 <_ZN4core4cell13Cell$LT$T$GT$3get17hc0e1a98a16df48afE>:
    pub fn get(&self) -> T {
    80005118:	1101                	addi	sp,sp,-32
    8000511a:	ec06                	sd	ra,24(sp)
    8000511c:	e82a                	sd	a0,16(sp)
        unsafe { *self.value.get() }
    8000511e:	00000097          	auipc	ra,0x0
    80005122:	124080e7          	jalr	292(ra) # 80005242 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h592018459564cd3bE>
    80005126:	e42a                	sd	a0,8(sp)
    80005128:	a009                	j	8000512a <_ZN4core4cell13Cell$LT$T$GT$3get17hc0e1a98a16df48afE+0x12>
    8000512a:	6522                	ld	a0,8(sp)
    8000512c:	6108                	ld	a0,0(a0)
    }
    8000512e:	60e2                	ld	ra,24(sp)
    80005130:	6105                	addi	sp,sp,32
    80005132:	8082                	ret

Disassembly of section .text._ZN4core4cell13Cell$LT$T$GT$3new17h92764083b52e393eE:

0000000080005134 <_ZN4core4cell13Cell$LT$T$GT$3new17h92764083b52e393eE>:
    pub const fn new(value: T) -> Cell<T> {
    80005134:	1101                	addi	sp,sp,-32
    80005136:	ec06                	sd	ra,24(sp)
    80005138:	e82a                	sd	a0,16(sp)
        Cell { value: UnsafeCell::new(value) }
    8000513a:	00000097          	auipc	ra,0x0
    8000513e:	186080e7          	jalr	390(ra) # 800052c0 <_ZN4core4cell19UnsafeCell$LT$T$GT$3new17hc9ea09ea33e2099aE>
    80005142:	e02a                	sd	a0,0(sp)
    80005144:	a009                	j	80005146 <_ZN4core4cell13Cell$LT$T$GT$3new17h92764083b52e393eE+0x12>
    80005146:	6502                	ld	a0,0(sp)
    80005148:	e42a                	sd	a0,8(sp)
    }
    8000514a:	60e2                	ld	ra,24(sp)
    8000514c:	6105                	addi	sp,sp,32
    8000514e:	8082                	ret

Disassembly of section .text._ZN4core4cell13Cell$LT$T$GT$3set17h60fabb73b23781c0E:

0000000080005150 <_ZN4core4cell13Cell$LT$T$GT$3set17h60fabb73b23781c0E>:
    pub fn set(&self, val: T) {
    80005150:	1101                	addi	sp,sp,-32
    80005152:	ec06                	sd	ra,24(sp)
    80005154:	e42a                	sd	a0,8(sp)
    80005156:	00b10b23          	sb	a1,22(sp)
        let old = self.replace(val);
    8000515a:	00000097          	auipc	ra,0x0
    8000515e:	068080e7          	jalr	104(ra) # 800051c2 <_ZN4core4cell13Cell$LT$T$GT$7replace17h84abfc72a05bacf1E>
    80005162:	85aa                	mv	a1,a0
    80005164:	e02e                	sd	a1,0(sp)
    80005166:	00a10ba3          	sb	a0,23(sp)
    8000516a:	a009                	j	8000516c <_ZN4core4cell13Cell$LT$T$GT$3set17h60fabb73b23781c0E+0x1c>
        drop(old);
    8000516c:	6502                	ld	a0,0(sp)
    8000516e:	00018097          	auipc	ra,0x18
    80005172:	e8e080e7          	jalr	-370(ra) # 8001cffc <_ZN4core3mem4drop17h0a31045cd6ca0c7bE>
    80005176:	a009                	j	80005178 <_ZN4core4cell13Cell$LT$T$GT$3set17h60fabb73b23781c0E+0x28>
    }
    80005178:	60e2                	ld	ra,24(sp)
    8000517a:	6105                	addi	sp,sp,32
    8000517c:	8082                	ret

Disassembly of section .text._ZN4core4cell13Cell$LT$T$GT$3set17hb9927bf4fdcefc87E:

000000008000517e <_ZN4core4cell13Cell$LT$T$GT$3set17hb9927bf4fdcefc87E>:
    pub fn set(&self, val: T) {
    8000517e:	7179                	addi	sp,sp,-48
    80005180:	f406                	sd	ra,40(sp)
    80005182:	e82a                	sd	a0,16(sp)
    80005184:	ec2e                	sd	a1,24(sp)
        let old = self.replace(val);
    80005186:	00000097          	auipc	ra,0x0
    8000518a:	06e080e7          	jalr	110(ra) # 800051f4 <_ZN4core4cell13Cell$LT$T$GT$7replace17ha9b4881d80b5e394E>
    8000518e:	85aa                	mv	a1,a0
    80005190:	e42e                	sd	a1,8(sp)
    80005192:	f02a                	sd	a0,32(sp)
    80005194:	a009                	j	80005196 <_ZN4core4cell13Cell$LT$T$GT$3set17hb9927bf4fdcefc87E+0x18>
        drop(old);
    80005196:	6522                	ld	a0,8(sp)
    80005198:	00018097          	auipc	ra,0x18
    8000519c:	f82080e7          	jalr	-126(ra) # 8001d11a <_ZN4core3mem4drop17ha75bac042eb9b458E>
    800051a0:	a009                	j	800051a2 <_ZN4core4cell13Cell$LT$T$GT$3set17hb9927bf4fdcefc87E+0x24>
    }
    800051a2:	70a2                	ld	ra,40(sp)
    800051a4:	6145                	addi	sp,sp,48
    800051a6:	8082                	ret

Disassembly of section .text._ZN4core4cell13Cell$LT$T$GT$6as_ptr17h2323c3e07ac4531cE:

00000000800051a8 <_ZN4core4cell13Cell$LT$T$GT$6as_ptr17h2323c3e07ac4531cE>:
    /// let ptr = c.as_ptr();
    /// ```
    #[inline]
    #[stable(feature = "cell_as_ptr", since = "1.12.0")]
    #[rustc_const_stable(feature = "const_cell_as_ptr", since = "1.32.0")]
    pub const fn as_ptr(&self) -> *mut T {
    800051a8:	1101                	addi	sp,sp,-32
    800051aa:	ec06                	sd	ra,24(sp)
    800051ac:	e82a                	sd	a0,16(sp)
        self.value.get()
    800051ae:	00000097          	auipc	ra,0x0
    800051b2:	0ac080e7          	jalr	172(ra) # 8000525a <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h9354550c008f8577E>
    800051b6:	e42a                	sd	a0,8(sp)
    800051b8:	a009                	j	800051ba <_ZN4core4cell13Cell$LT$T$GT$6as_ptr17h2323c3e07ac4531cE+0x12>
    }
    800051ba:	6522                	ld	a0,8(sp)
    800051bc:	60e2                	ld	ra,24(sp)
    800051be:	6105                	addi	sp,sp,32
    800051c0:	8082                	ret

Disassembly of section .text._ZN4core4cell13Cell$LT$T$GT$7replace17h84abfc72a05bacf1E:

00000000800051c2 <_ZN4core4cell13Cell$LT$T$GT$7replace17h84abfc72a05bacf1E>:
    pub fn replace(&self, val: T) -> T {
    800051c2:	7179                	addi	sp,sp,-48
    800051c4:	f406                	sd	ra,40(sp)
    800051c6:	862e                	mv	a2,a1
    800051c8:	e432                	sd	a2,8(sp)
    800051ca:	ec2a                	sd	a0,24(sp)
    800051cc:	02b103a3          	sb	a1,39(sp)
        mem::replace(unsafe { &mut *self.value.get() }, val)
    800051d0:	00000097          	auipc	ra,0x0
    800051d4:	08a080e7          	jalr	138(ra) # 8000525a <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h9354550c008f8577E>
    800051d8:	e82a                	sd	a0,16(sp)
    800051da:	a009                	j	800051dc <_ZN4core4cell13Cell$LT$T$GT$7replace17h84abfc72a05bacf1E+0x1a>
    800051dc:	65a2                	ld	a1,8(sp)
    800051de:	6542                	ld	a0,16(sp)
    800051e0:	00018097          	auipc	ra,0x18
    800051e4:	070080e7          	jalr	112(ra) # 8001d250 <_ZN4core3mem7replace17h1967adb5d4092576E>
    800051e8:	e02a                	sd	a0,0(sp)
    800051ea:	a009                	j	800051ec <_ZN4core4cell13Cell$LT$T$GT$7replace17h84abfc72a05bacf1E+0x2a>
    }
    800051ec:	6502                	ld	a0,0(sp)
    800051ee:	70a2                	ld	ra,40(sp)
    800051f0:	6145                	addi	sp,sp,48
    800051f2:	8082                	ret

Disassembly of section .text._ZN4core4cell13Cell$LT$T$GT$7replace17ha9b4881d80b5e394E:

00000000800051f4 <_ZN4core4cell13Cell$LT$T$GT$7replace17ha9b4881d80b5e394E>:
    pub fn replace(&self, val: T) -> T {
    800051f4:	7179                	addi	sp,sp,-48
    800051f6:	f406                	sd	ra,40(sp)
    800051f8:	e42e                	sd	a1,8(sp)
    800051fa:	ec2a                	sd	a0,24(sp)
    800051fc:	f02e                	sd	a1,32(sp)
        mem::replace(unsafe { &mut *self.value.get() }, val)
    800051fe:	00000097          	auipc	ra,0x0
    80005202:	044080e7          	jalr	68(ra) # 80005242 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h592018459564cd3bE>
    80005206:	e82a                	sd	a0,16(sp)
    80005208:	a009                	j	8000520a <_ZN4core4cell13Cell$LT$T$GT$7replace17ha9b4881d80b5e394E+0x16>
    8000520a:	65a2                	ld	a1,8(sp)
    8000520c:	6542                	ld	a0,16(sp)
    8000520e:	00018097          	auipc	ra,0x18
    80005212:	0b2080e7          	jalr	178(ra) # 8001d2c0 <_ZN4core3mem7replace17ha3220c9fe59ec441E>
    80005216:	e02a                	sd	a0,0(sp)
    80005218:	a009                	j	8000521a <_ZN4core4cell13Cell$LT$T$GT$7replace17ha9b4881d80b5e394E+0x26>
    }
    8000521a:	6502                	ld	a0,0(sp)
    8000521c:	70a2                	ld	ra,40(sp)
    8000521e:	6145                	addi	sp,sp,48
    80005220:	8082                	ret

Disassembly of section .text._ZN4core4cell19UnsafeCell$LT$T$GT$3get17h05438521b5304ed4E:

0000000080005222 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h05438521b5304ed4E>:
    /// let five = uc.get();
    /// ```
    #[inline]
    #[stable(feature = "rust1", since = "1.0.0")]
    #[rustc_const_stable(feature = "const_unsafecell_get", since = "1.32.0")]
    pub const fn get(&self) -> *mut T {
    80005222:	1141                	addi	sp,sp,-16
    80005224:	e42a                	sd	a0,8(sp)
        // We can just cast the pointer from `UnsafeCell<T>` to `T` because of
        // #[repr(transparent)]. This exploits libstd's special status, there is
        // no guarantee for user code that this will work in future versions of the compiler!
        self as *const UnsafeCell<T> as *const T as *mut T
    }
    80005226:	0141                	addi	sp,sp,16
    80005228:	8082                	ret

Disassembly of section .text._ZN4core4cell19UnsafeCell$LT$T$GT$3get17h0c090ec98b6b5023E:

000000008000522a <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h0c090ec98b6b5023E>:
    pub const fn get(&self) -> *mut T {
    8000522a:	1141                	addi	sp,sp,-16
    8000522c:	e42a                	sd	a0,8(sp)
    }
    8000522e:	0141                	addi	sp,sp,16
    80005230:	8082                	ret

Disassembly of section .text._ZN4core4cell19UnsafeCell$LT$T$GT$3get17h222732a2deb54afaE:

0000000080005232 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h222732a2deb54afaE>:
    pub const fn get(&self) -> *mut T {
    80005232:	1141                	addi	sp,sp,-16
    80005234:	e42a                	sd	a0,8(sp)
    }
    80005236:	0141                	addi	sp,sp,16
    80005238:	8082                	ret

Disassembly of section .text._ZN4core4cell19UnsafeCell$LT$T$GT$3get17h4b85f27290bf8d3bE:

000000008000523a <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h4b85f27290bf8d3bE>:
    pub const fn get(&self) -> *mut T {
    8000523a:	1141                	addi	sp,sp,-16
    8000523c:	e42a                	sd	a0,8(sp)
    }
    8000523e:	0141                	addi	sp,sp,16
    80005240:	8082                	ret

Disassembly of section .text._ZN4core4cell19UnsafeCell$LT$T$GT$3get17h592018459564cd3bE:

0000000080005242 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h592018459564cd3bE>:
    pub const fn get(&self) -> *mut T {
    80005242:	1141                	addi	sp,sp,-16
    80005244:	e42a                	sd	a0,8(sp)
    }
    80005246:	0141                	addi	sp,sp,16
    80005248:	8082                	ret

Disassembly of section .text._ZN4core4cell19UnsafeCell$LT$T$GT$3get17h6b3041abf61d3f4fE:

000000008000524a <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h6b3041abf61d3f4fE>:
    pub const fn get(&self) -> *mut T {
    8000524a:	1141                	addi	sp,sp,-16
    8000524c:	e42a                	sd	a0,8(sp)
    }
    8000524e:	0141                	addi	sp,sp,16
    80005250:	8082                	ret

Disassembly of section .text._ZN4core4cell19UnsafeCell$LT$T$GT$3get17h85f42af92512c053E:

0000000080005252 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h85f42af92512c053E>:
    pub const fn get(&self) -> *mut T {
    80005252:	1141                	addi	sp,sp,-16
    80005254:	e42a                	sd	a0,8(sp)
    }
    80005256:	0141                	addi	sp,sp,16
    80005258:	8082                	ret

Disassembly of section .text._ZN4core4cell19UnsafeCell$LT$T$GT$3get17h9354550c008f8577E:

000000008000525a <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h9354550c008f8577E>:
    pub const fn get(&self) -> *mut T {
    8000525a:	1141                	addi	sp,sp,-16
    8000525c:	e42a                	sd	a0,8(sp)
    }
    8000525e:	0141                	addi	sp,sp,16
    80005260:	8082                	ret

Disassembly of section .text._ZN4core4cell19UnsafeCell$LT$T$GT$3get17hb24b2b56dfaab8d4E:

0000000080005262 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17hb24b2b56dfaab8d4E>:
    pub const fn get(&self) -> *mut T {
    80005262:	1141                	addi	sp,sp,-16
    80005264:	e42a                	sd	a0,8(sp)
    }
    80005266:	0141                	addi	sp,sp,16
    80005268:	8082                	ret

Disassembly of section .text._ZN4core4cell19UnsafeCell$LT$T$GT$3get17hbe9e1598ba1bbd42E:

000000008000526a <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17hbe9e1598ba1bbd42E>:
    pub const fn get(&self) -> *mut T {
    8000526a:	1141                	addi	sp,sp,-16
    8000526c:	e42a                	sd	a0,8(sp)
    }
    8000526e:	0141                	addi	sp,sp,16
    80005270:	8082                	ret

Disassembly of section .text._ZN4core4cell19UnsafeCell$LT$T$GT$3get17hf0694f5cd8271985E:

0000000080005272 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17hf0694f5cd8271985E>:
    pub const fn get(&self) -> *mut T {
    80005272:	1141                	addi	sp,sp,-16
    80005274:	e42a                	sd	a0,8(sp)
    }
    80005276:	0141                	addi	sp,sp,16
    80005278:	8082                	ret

Disassembly of section .text._ZN4core4cell19UnsafeCell$LT$T$GT$3get17hfcb6ad47be983bedE:

000000008000527a <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17hfcb6ad47be983bedE>:
    pub const fn get(&self) -> *mut T {
    8000527a:	1141                	addi	sp,sp,-16
    8000527c:	e42a                	sd	a0,8(sp)
    }
    8000527e:	0141                	addi	sp,sp,16
    80005280:	8082                	ret

Disassembly of section .text._ZN4core4cell19UnsafeCell$LT$T$GT$3new17h4d1d6404457ffa31E:

0000000080005282 <_ZN4core4cell19UnsafeCell$LT$T$GT$3new17h4d1d6404457ffa31E>:
    pub const fn new(value: T) -> UnsafeCell<T> {
    80005282:	1141                	addi	sp,sp,-16
    80005284:	e42a                	sd	a0,8(sp)
        UnsafeCell { value }
    80005286:	e02a                	sd	a0,0(sp)
    }
    80005288:	0141                	addi	sp,sp,16
    8000528a:	8082                	ret

Disassembly of section .text._ZN4core4cell19UnsafeCell$LT$T$GT$3new17hada9de55abb7439dE:

000000008000528c <_ZN4core4cell19UnsafeCell$LT$T$GT$3new17hada9de55abb7439dE>:
    pub const fn new(value: T) -> UnsafeCell<T> {
    8000528c:	dc010113          	addi	sp,sp,-576
        UnsafeCell { value }
    80005290:	22113c23          	sd	ra,568(sp)
    80005294:	ec2a                	sd	a0,24(sp)
    80005296:	1008                	addi	a0,sp,32
    80005298:	e42a                	sd	a0,8(sp)
    8000529a:	21800613          	li	a2,536
    8000529e:	e832                	sd	a2,16(sp)
    800052a0:	00020097          	auipc	ra,0x20
    800052a4:	e44080e7          	jalr	-444(ra) # 800250e4 <memcpy>
    800052a8:	65a2                	ld	a1,8(sp)
    800052aa:	6642                	ld	a2,16(sp)
    800052ac:	6562                	ld	a0,24(sp)
    800052ae:	00020097          	auipc	ra,0x20
    800052b2:	e36080e7          	jalr	-458(ra) # 800250e4 <memcpy>
    }
    800052b6:	23813083          	ld	ra,568(sp)
    800052ba:	24010113          	addi	sp,sp,576
    800052be:	8082                	ret

Disassembly of section .text._ZN4core4cell19UnsafeCell$LT$T$GT$3new17hc9ea09ea33e2099aE:

00000000800052c0 <_ZN4core4cell19UnsafeCell$LT$T$GT$3new17hc9ea09ea33e2099aE>:
    pub const fn new(value: T) -> UnsafeCell<T> {
    800052c0:	1141                	addi	sp,sp,-16
    800052c2:	e42a                	sd	a0,8(sp)
        UnsafeCell { value }
    800052c4:	e02a                	sd	a0,0(sp)
    }
    800052c6:	0141                	addi	sp,sp,16
    800052c8:	8082                	ret

Disassembly of section .text._ZN6kernel2fs7devices6Device4read17h5487da2141591295E:

00000000800052ca <_ZN6kernel2fs7devices6Device4read17h5487da2141591295E>:
            read: 0 as *const u8,
            write: 0 as *const u8
        }
    }

    pub fn read(&self) -> ReadFn {
    800052ca:	1101                	addi	sp,sp,-32
    800052cc:	e42a                	sd	a0,8(sp)
        let func = unsafe {
            transmute::<*const u8, ReadFn>(self.read)
    800052ce:	6108                	ld	a0,0(a0)
    800052d0:	e02a                	sd	a0,0(sp)
    800052d2:	e82a                	sd	a0,16(sp)
    800052d4:	ec2a                	sd	a0,24(sp)
    800052d6:	a009                	j	800052d8 <_ZN6kernel2fs7devices6Device4read17h5487da2141591295E+0xe>
        };
        func
    }
    800052d8:	6502                	ld	a0,0(sp)
    800052da:	6105                	addi	sp,sp,32
    800052dc:	8082                	ret

Disassembly of section .text._ZN6kernel2fs7devices6Device5write17hdacd5bd8b779c8b1E:

00000000800052de <_ZN6kernel2fs7devices6Device5write17hdacd5bd8b779c8b1E>:

    pub fn write(&self) -> WriteFn {
    800052de:	1101                	addi	sp,sp,-32
    800052e0:	e42a                	sd	a0,8(sp)
        let func = unsafe {
            transmute::<*const u8, WriteFn>(self.write)
    800052e2:	6508                	ld	a0,8(a0)
    800052e4:	e02a                	sd	a0,0(sp)
    800052e6:	e82a                	sd	a0,16(sp)
    800052e8:	ec2a                	sd	a0,24(sp)
    800052ea:	a009                	j	800052ec <_ZN6kernel2fs7devices6Device5write17hdacd5bd8b779c8b1E+0xe>
        };
        func
    }
    800052ec:	6502                	ld	a0,0(sp)
    800052ee:	6105                	addi	sp,sp,32
    800052f0:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register5stval4read17h328c9da49d53d19fE:

00000000800052f2 <_ZN6kernel4arch5riscv8register5stval4read17h328c9da49d53d19fE>:
// Supervisor Trap Value
#[inline]
pub unsafe fn read() -> usize {
    800052f2:	1141                	addi	sp,sp,-16
    let ret:usize;
    llvm_asm!("csrr $0, stval":"=r"(ret):::"volatile");
    800052f4:	14302573          	csrr	a0,stval
    800052f8:	e42a                	sd	a0,8(sp)
    ret
}
    800052fa:	0141                	addi	sp,sp,16
    800052fc:	8082                	ret

Disassembly of section .text._ZN6kernel8shutdown12system_reset17h91571bbff266ab01E:

00000000800052fe <_ZN6kernel8shutdown12system_reset17h91571bbff266ab01E>:

const TEST_FAIL:u32 = 0x3333;
const TEST_PASS:u32 = 0x5555;
const TEST_RESET:u32 = 0x7777;

pub fn system_reset(reset_type: usize, reset_reason: usize) {
    800052fe:	7179                	addi	sp,sp,-48
    80005300:	f406                	sd	ra,40(sp)
    80005302:	e02e                	sd	a1,0(sp)
    80005304:	e42a                	sd	a0,8(sp)
    80005306:	ec2a                	sd	a0,24(sp)
    80005308:	f02e                	sd	a1,32(sp)
    8000530a:	4581                	li	a1,0
    // Fail = 0x3333,
    // Pass = 0x5555,
    // Reset = 0x7777,

    let mut value = match reset_type {
        RESET_TYPE_SHUTDOWN => TEST_PASS,
    8000530c:	02b50263          	beq	a0,a1,80005330 <_ZN6kernel8shutdown12system_reset17h91571bbff266ab01E+0x32>
    80005310:	a009                	j	80005312 <_ZN6kernel8shutdown12system_reset17h91571bbff266ab01E+0x14>
    80005312:	6522                	ld	a0,8(sp)
    80005314:	4585                	li	a1,1
    80005316:	02b50263          	beq	a0,a1,8000533a <_ZN6kernel8shutdown12system_reset17h91571bbff266ab01E+0x3c>
    8000531a:	a009                	j	8000531c <_ZN6kernel8shutdown12system_reset17h91571bbff266ab01E+0x1e>
    8000531c:	6522                	ld	a0,8(sp)
    8000531e:	4589                	li	a1,2
    80005320:	02b50263          	beq	a0,a1,80005344 <_ZN6kernel8shutdown12system_reset17h91571bbff266ab01E+0x46>
    80005324:	a009                	j	80005326 <_ZN6kernel8shutdown12system_reset17h91571bbff266ab01E+0x28>
    80005326:	650d                	lui	a0,0x3
    80005328:	3335051b          	addiw	a0,a0,819
        RESET_TYPE_COLD_REBOOT => TEST_RESET,
        RESET_TYPE_WARM_REBOOT => TEST_RESET,
        _ => TEST_FAIL,
    8000532c:	ca2a                	sw	a0,20(sp)
    let mut value = match reset_type {
    8000532e:	a005                	j	8000534e <_ZN6kernel8shutdown12system_reset17h91571bbff266ab01E+0x50>
    80005330:	6515                	lui	a0,0x5
    80005332:	5555051b          	addiw	a0,a0,1365
        RESET_TYPE_SHUTDOWN => TEST_PASS,
    80005336:	ca2a                	sw	a0,20(sp)
    let mut value = match reset_type {
    80005338:	a819                	j	8000534e <_ZN6kernel8shutdown12system_reset17h91571bbff266ab01E+0x50>
    8000533a:	651d                	lui	a0,0x7
    8000533c:	7775051b          	addiw	a0,a0,1911
        RESET_TYPE_COLD_REBOOT => TEST_RESET,
    80005340:	ca2a                	sw	a0,20(sp)
    let mut value = match reset_type {
    80005342:	a031                	j	8000534e <_ZN6kernel8shutdown12system_reset17h91571bbff266ab01E+0x50>
    80005344:	651d                	lui	a0,0x7
    80005346:	7775051b          	addiw	a0,a0,1911
        RESET_TYPE_WARM_REBOOT => TEST_RESET,
    8000534a:	ca2a                	sw	a0,20(sp)
    let mut value = match reset_type {
    8000534c:	a009                	j	8000534e <_ZN6kernel8shutdown12system_reset17h91571bbff266ab01E+0x50>
    8000534e:	6502                	ld	a0,0(sp)
    80005350:	4585                	li	a1,1
    };

    if reset_reason == RESET_REASON_SYSTEM_FAILURE {
    80005352:	00b51863          	bne	a0,a1,80005362 <_ZN6kernel8shutdown12system_reset17h91571bbff266ab01E+0x64>
    80005356:	a009                	j	80005358 <_ZN6kernel8shutdown12system_reset17h91571bbff266ab01E+0x5a>
    80005358:	650d                	lui	a0,0x3
    8000535a:	3335051b          	addiw	a0,a0,819
        value = TEST_FAIL
    8000535e:	ca2a                	sw	a0,20(sp)
    if reset_reason == RESET_REASON_SYSTEM_FAILURE {
    80005360:	a011                	j	80005364 <_ZN6kernel8shutdown12system_reset17h91571bbff266ab01E+0x66>
    80005362:	a009                	j	80005364 <_ZN6kernel8shutdown12system_reset17h91571bbff266ab01E+0x66>
    }

    unsafe {
        core::ptr::write_volatile(VIRT_TEST, value);
    80005364:	45d2                	lw	a1,20(sp)
    80005366:	00100537          	lui	a0,0x100
    8000536a:	00013097          	auipc	ra,0x13
    8000536e:	230080e7          	jalr	560(ra) # 8001859a <_ZN4core3ptr14write_volatile17h1c498a4c32cde7d4E>
    80005372:	a009                	j	80005374 <.LBB0_12>

0000000080005374 <.LBB0_12>:
    }

    unreachable!();
    80005374:	00021517          	auipc	a0,0x21
    80005378:	01c50513          	addi	a0,a0,28 # 80026390 <.L__unnamed_1>

000000008000537c <.LBB0_13>:
    8000537c:	00021617          	auipc	a2,0x21
    80005380:	04c60613          	addi	a2,a2,76 # 800263c8 <.L__unnamed_2>
    80005384:	02800593          	li	a1,40
    80005388:	0001d097          	auipc	ra,0x1d
    8000538c:	eee080e7          	jalr	-274(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel8shutdown8shutdown17hf11bb5dd05ff266dE:

0000000080005392 <_ZN6kernel8shutdown8shutdown17hf11bb5dd05ff266dE>:
}

pub fn shutdown() {
    80005392:	1141                	addi	sp,sp,-16
    80005394:	e406                	sd	ra,8(sp)
    80005396:	4521                	li	a0,8
    80005398:	4681                	li	a3,0
    kernel_env_call(SHUTDOWN, 0, 0, 0);
    8000539a:	85b6                	mv	a1,a3
    8000539c:	8636                	mv	a2,a3
    8000539e:	00010097          	auipc	ra,0x10
    800053a2:	16c080e7          	jalr	364(ra) # 8001550a <_ZN6kernel7syscall15kernel_env_call17h9e1a25b47e8ef67bE>
    800053a6:	a009                	j	800053a8 <_ZN6kernel8shutdown8shutdown17hf11bb5dd05ff266dE+0x16>
}
    800053a8:	60a2                	ld	ra,8(sp)
    800053aa:	0141                	addi	sp,sp,16
    800053ac:	8082                	ret

Disassembly of section .text._ZN4core5slice3raw14from_raw_parts17h24ea7267a8aa7c05E:

00000000800053ae <_ZN4core5slice3raw14from_raw_parts17h24ea7267a8aa7c05E>:
///
/// [valid]: ptr#safety
/// [`NonNull::dangling()`]: ptr::NonNull::dangling
#[inline]
#[stable(feature = "rust1", since = "1.0.0")]
pub unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {
    800053ae:	7179                	addi	sp,sp,-48
    800053b0:	f406                	sd	ra,40(sp)
    800053b2:	ec2a                	sd	a0,24(sp)
    800053b4:	f02e                	sd	a1,32(sp)
    debug_assert!(
        mem::size_of::<T>().saturating_mul(len) <= isize::MAX as usize,
        "attempt to create slice covering at least half the address space"
    );
    // SAFETY: the caller must uphold the safety contract for `from_raw_parts`.
    unsafe { &*ptr::slice_from_raw_parts(data, len) }
    800053b6:	00013097          	auipc	ra,0x13
    800053ba:	212080e7          	jalr	530(ra) # 800185c8 <_ZN4core3ptr20slice_from_raw_parts17h19b34a977b1709d3E>
    800053be:	e42a                	sd	a0,8(sp)
    800053c0:	e82e                	sd	a1,16(sp)
    800053c2:	a009                	j	800053c4 <_ZN4core5slice3raw14from_raw_parts17h24ea7267a8aa7c05E+0x16>
}
    800053c4:	65c2                	ld	a1,16(sp)
    800053c6:	6522                	ld	a0,8(sp)
    800053c8:	70a2                	ld	ra,40(sp)
    800053ca:	6145                	addi	sp,sp,48
    800053cc:	8082                	ret

Disassembly of section .text._ZN4core5slice3raw14from_raw_parts17hf1accf0e45b69f71E:

00000000800053ce <_ZN4core5slice3raw14from_raw_parts17hf1accf0e45b69f71E>:
pub unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {
    800053ce:	7179                	addi	sp,sp,-48
    800053d0:	f406                	sd	ra,40(sp)
    800053d2:	ec2a                	sd	a0,24(sp)
    800053d4:	f02e                	sd	a1,32(sp)
    unsafe { &*ptr::slice_from_raw_parts(data, len) }
    800053d6:	00013097          	auipc	ra,0x13
    800053da:	224080e7          	jalr	548(ra) # 800185fa <_ZN4core3ptr20slice_from_raw_parts17h4c1ee3b844c20623E>
    800053de:	e42a                	sd	a0,8(sp)
    800053e0:	e82e                	sd	a1,16(sp)
    800053e2:	a009                	j	800053e4 <_ZN4core5slice3raw14from_raw_parts17hf1accf0e45b69f71E+0x16>
}
    800053e4:	65c2                	ld	a1,16(sp)
    800053e6:	6522                	ld	a0,8(sp)
    800053e8:	70a2                	ld	ra,40(sp)
    800053ea:	6145                	addi	sp,sp,48
    800053ec:	8082                	ret

Disassembly of section .text._ZN4core5slice3raw18from_raw_parts_mut17h0bc9e5c0c3217bc8E:

00000000800053ee <_ZN4core5slice3raw18from_raw_parts_mut17h0bc9e5c0c3217bc8E>:
///
/// [valid]: ptr#safety
/// [`NonNull::dangling()`]: ptr::NonNull::dangling
#[inline]
#[stable(feature = "rust1", since = "1.0.0")]
pub unsafe fn from_raw_parts_mut<'a, T>(data: *mut T, len: usize) -> &'a mut [T] {
    800053ee:	7179                	addi	sp,sp,-48
    800053f0:	f406                	sd	ra,40(sp)
    800053f2:	ec2a                	sd	a0,24(sp)
    800053f4:	f02e                	sd	a1,32(sp)
    debug_assert!(
        mem::size_of::<T>().saturating_mul(len) <= isize::MAX as usize,
        "attempt to create slice covering at least half the address space"
    );
    // SAFETY: the caller must uphold the safety contract for `from_raw_parts_mut`.
    unsafe { &mut *ptr::slice_from_raw_parts_mut(data, len) }
    800053f6:	0001c097          	auipc	ra,0x1c
    800053fa:	3b2080e7          	jalr	946(ra) # 800217a8 <_ZN4core3ptr24slice_from_raw_parts_mut17h39496eba86137ee5E>
    800053fe:	e42a                	sd	a0,8(sp)
    80005400:	e82e                	sd	a1,16(sp)
    80005402:	a009                	j	80005404 <_ZN4core5slice3raw18from_raw_parts_mut17h0bc9e5c0c3217bc8E+0x16>
}
    80005404:	65c2                	ld	a1,16(sp)
    80005406:	6522                	ld	a0,8(sp)
    80005408:	70a2                	ld	ra,40(sp)
    8000540a:	6145                	addi	sp,sp,48
    8000540c:	8082                	ret

Disassembly of section .text._ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_exec28_$u7b$$u7b$closure$u7d$$u7d$17hac210036fe7eba45E:

000000008000540e <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_exec28_$u7b$$u7b$closure$u7d$$u7d$17hac210036fe7eba45E>:
                MAXARG
            ) 
        };
        let ret = unsafe {
            exec(path, &argv).map_err(
                |_|(())
    8000540e:	1101                	addi	sp,sp,-32
    80005410:	e82a                	sd	a0,16(sp)
    80005412:	ec2e                	sd	a1,24(sp)
    80005414:	6105                	addi	sp,sp,32
    80005416:	8082                	ret

Disassembly of section .text._ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17hde552876d1bc9ef6E:

0000000080005418 <_ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17hde552876d1bc9ef6E>:
}

#[stable(feature = "rust1", since = "1.0.0")]
impl Debug for () {
    #[inline]
    fn fmt(&self, f: &mut Formatter<'_>) -> Result {
    80005418:	7179                	addi	sp,sp,-48
    8000541a:	f406                	sd	ra,40(sp)
    8000541c:	e42e                	sd	a1,8(sp)
    8000541e:	85aa                	mv	a1,a0
    80005420:	6522                	ld	a0,8(sp)
    80005422:	ec2e                	sd	a1,24(sp)
    80005424:	f02a                	sd	a0,32(sp)

0000000080005426 <.LBB0_2>:
        f.pad("()")
    80005426:	00021597          	auipc	a1,0x21
    8000542a:	fba58593          	addi	a1,a1,-70 # 800263e0 <.L__unnamed_1>
    8000542e:	4609                	li	a2,2
    80005430:	0001e097          	auipc	ra,0x1e
    80005434:	ae2080e7          	jalr	-1310(ra) # 80022f12 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE>
    80005438:	e82a                	sd	a0,16(sp)
    8000543a:	a009                	j	8000543c <.LBB0_2+0x16>
    }
    8000543c:	6542                	ld	a0,16(sp)
    8000543e:	70a2                	ld	ra,40(sp)
    80005440:	6145                	addi	sp,sp,48
    80005442:	8082                	ret

Disassembly of section .text._ZN4core3fmt9Arguments16new_v1_formatted17hf6d3ed0f8e821319E:

0000000080005444 <_ZN4core3fmt9Arguments16new_v1_formatted17hf6d3ed0f8e821319E>:
    pub fn new_v1_formatted(
    80005444:	7139                	addi	sp,sp,-64
    80005446:	e82e                	sd	a1,16(sp)
    80005448:	ec32                	sd	a2,24(sp)
    8000544a:	f036                	sd	a3,32(sp)
    8000544c:	f43a                	sd	a4,40(sp)
    8000544e:	f83e                	sd	a5,48(sp)
    80005450:	fc42                	sd	a6,56(sp)
        Arguments { pieces, fmt: Some(fmt), args }
    80005452:	e03e                	sd	a5,0(sp)
    80005454:	e442                	sd	a6,8(sp)
    80005456:	e10c                	sd	a1,0(a0)
    80005458:	e510                	sd	a2,8(a0)
    8000545a:	6602                	ld	a2,0(sp)
    8000545c:	65a2                	ld	a1,8(sp)
    8000545e:	e910                	sd	a2,16(a0)
    80005460:	ed0c                	sd	a1,24(a0)
    80005462:	f114                	sd	a3,32(a0)
    80005464:	f518                	sd	a4,40(a0)
    }
    80005466:	6121                	addi	sp,sp,64
    80005468:	8082                	ret

Disassembly of section .text._ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE:

000000008000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>:
    pub fn new_v1(pieces: &'a [&'static str], args: &'a [ArgumentV1<'a>]) -> Arguments<'a> {
    8000546a:	7179                	addi	sp,sp,-48
    8000546c:	e82e                	sd	a1,16(sp)
    8000546e:	ec32                	sd	a2,24(sp)
    80005470:	f036                	sd	a3,32(sp)
    80005472:	f43a                	sd	a4,40(sp)
    80005474:	4781                	li	a5,0
        Arguments { pieces, fmt: None, args }
    80005476:	e03e                	sd	a5,0(sp)
    80005478:	e10c                	sd	a1,0(a0)
    8000547a:	e510                	sd	a2,8(a0)
    8000547c:	6602                	ld	a2,0(sp)
    8000547e:	65a2                	ld	a1,8(sp)
    80005480:	e910                	sd	a2,16(a0)
    80005482:	ed0c                	sd	a1,24(a0)
    80005484:	f114                	sd	a3,32(a0)
    80005486:	f518                	sd	a4,40(a0)
    }
    80005488:	6145                	addi	sp,sp,48
    8000548a:	8082                	ret

Disassembly of section .text._ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E:

000000008000548c <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E>:

/// Reads the next code point out of a byte iterator (assuming a
/// UTF-8-like encoding).
#[unstable(feature = "str_internals", issue = "none")]
#[inline]
pub fn next_code_point<'a, I: Iterator<Item = &'a u8>>(bytes: &mut I) -> Option<u32> {
    8000548c:	7131                	addi	sp,sp,-192
    8000548e:	fd06                	sd	ra,184(sp)
    80005490:	f0aa                	sd	a0,96(sp)
    80005492:	e52a                	sd	a0,136(sp)
    // Decode UTF-8
    let x = *bytes.next()?;
    80005494:	00006097          	auipc	ra,0x6
    80005498:	cb0080e7          	jalr	-848(ra) # 8000b144 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbe39990052f1389dE>
    8000549c:	f4aa                	sd	a0,104(sp)
    8000549e:	a009                	j	800054a0 <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E+0x14>
    800054a0:	7526                	ld	a0,104(sp)
    800054a2:	0000a097          	auipc	ra,0xa
    800054a6:	db2080e7          	jalr	-590(ra) # 8000f254 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hce0d66149b699885E>
    800054aa:	fcaa                	sd	a0,120(sp)
    800054ac:	a009                	j	800054ae <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E+0x22>
    800054ae:	7566                	ld	a0,120(sp)
    800054b0:	00153593          	seqz	a1,a0
    800054b4:	4581                	li	a1,0
    800054b6:	00b51463          	bne	a0,a1,800054be <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E+0x32>
    800054ba:	a009                	j	800054bc <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E+0x30>
    800054bc:	a839                	j	800054da <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E+0x4e>
    800054be:	7566                	ld	a0,120(sp)
    800054c0:	ed2a                	sd	a0,152(sp)
    800054c2:	00050583          	lb	a1,0(a0)
    800054c6:	0ff5f513          	andi	a0,a1,255
    800054ca:	ecaa                	sd	a0,88(sp)
    800054cc:	0ab103a3          	sb	a1,167(sp)
    800054d0:	557d                	li	a0,-1
    if x < 128 {
    800054d2:	02b54163          	blt	a0,a1,800054f4 <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E+0x68>
    800054d6:	a025                	j	800054fe <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E+0x72>
    let x = *bytes.next()?;
    800054d8:	0000                	unimp
    800054da:	0000a097          	auipc	ra,0xa
    800054de:	bc0080e7          	jalr	-1088(ra) # 8000f09a <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h8871efd663dd0baaE>
    800054e2:	a009                	j	800054e4 <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E+0x58>
    800054e4:	0000a097          	auipc	ra,0xa
    800054e8:	d4a080e7          	jalr	-694(ra) # 8000f22e <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h35e87322ea53eeb5E>
    800054ec:	d8aa                	sw	a0,112(sp)
    800054ee:	daae                	sw	a1,116(sp)
    800054f0:	a009                	j	800054f2 <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E+0x66>
    800054f2:	a209                	j	800055f4 <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E+0x168>
        return Some(x as u32);
    800054f4:	6566                	ld	a0,88(sp)
    800054f6:	daaa                	sw	a0,116(sp)
    800054f8:	4505                	li	a0,1
    800054fa:	d8aa                	sw	a0,112(sp)
    800054fc:	a8e5                	j	800055f4 <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E+0x168>
    }

    // Multibyte case follows
    // Decode from a byte combination out of: [[[x y] z] w]
    // NOTE: Performance is sensitive to the exact formulation here
    let init = utf8_first_byte(x, 2);
    800054fe:	6566                	ld	a0,88(sp)
    80005500:	4589                	li	a1,2
    80005502:	00003097          	auipc	ra,0x3
    80005506:	494080e7          	jalr	1172(ra) # 80008996 <_ZN4core3str11validations15utf8_first_byte17h336ce196ba99428fE>
    8000550a:	85aa                	mv	a1,a0
    8000550c:	e8ae                	sd	a1,80(sp)
    8000550e:	d52a                	sw	a0,168(sp)
    80005510:	a009                	j	80005512 <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E+0x86>
    let y = unwrap_or_0(bytes.next());
    80005512:	7506                	ld	a0,96(sp)
    80005514:	00006097          	auipc	ra,0x6
    80005518:	c30080e7          	jalr	-976(ra) # 8000b144 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbe39990052f1389dE>
    8000551c:	e4aa                	sd	a0,72(sp)
    8000551e:	a009                	j	80005520 <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E+0x94>
    80005520:	6526                	ld	a0,72(sp)
    80005522:	00003097          	auipc	ra,0x3
    80005526:	440080e7          	jalr	1088(ra) # 80008962 <_ZN4core3str11validations11unwrap_or_017haab6baa99207da23E>
    8000552a:	85aa                	mv	a1,a0
    8000552c:	e0ae                	sd	a1,64(sp)
    8000552e:	0aa10723          	sb	a0,174(sp)
    80005532:	a009                	j	80005534 <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E+0xa8>
    let mut ch = utf8_acc_cont_byte(init, y);
    80005534:	6586                	ld	a1,64(sp)
    80005536:	6546                	ld	a0,80(sp)
    80005538:	00003097          	auipc	ra,0x3
    8000553c:	478080e7          	jalr	1144(ra) # 800089b0 <_ZN4core3str11validations18utf8_acc_cont_byte17h8689eb325a5b266aE>
    80005540:	c32a                	sw	a0,132(sp)
    80005542:	a009                	j	80005544 <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E+0xb8>
    80005544:	6566                	ld	a0,88(sp)
    80005546:	0e000593          	li	a1,224
    if x >= 0xE0 {
    8000554a:	00b56a63          	bltu	a0,a1,8000555e <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E+0xd2>
    8000554e:	a009                	j	80005550 <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E+0xc4>
        // [[x y z] w] case
        // 5th bit in 0xE0 .. 0xEF is always clear, so `init` is still valid
        let z = unwrap_or_0(bytes.next());
    80005550:	7506                	ld	a0,96(sp)
    80005552:	00006097          	auipc	ra,0x6
    80005556:	bf2080e7          	jalr	-1038(ra) # 8000b144 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbe39990052f1389dE>
    8000555a:	fc2a                	sd	a0,56(sp)
    8000555c:	a011                	j	80005560 <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E+0xd4>
    if x >= 0xE0 {
    8000555e:	a071                	j	800055ea <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E+0x15e>
        let z = unwrap_or_0(bytes.next());
    80005560:	7562                	ld	a0,56(sp)
    80005562:	00003097          	auipc	ra,0x3
    80005566:	400080e7          	jalr	1024(ra) # 80008962 <_ZN4core3str11validations11unwrap_or_017haab6baa99207da23E>
    8000556a:	85aa                	mv	a1,a0
    8000556c:	f82e                	sd	a1,48(sp)
    8000556e:	0aa107a3          	sb	a0,175(sp)
    80005572:	a009                	j	80005574 <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E+0xe8>
        let y_z = utf8_acc_cont_byte((y & CONT_MASK) as u32, z);
    80005574:	75c2                	ld	a1,48(sp)
    80005576:	6506                	ld	a0,64(sp)
    80005578:	03f57513          	andi	a0,a0,63
    8000557c:	00003097          	auipc	ra,0x3
    80005580:	434080e7          	jalr	1076(ra) # 800089b0 <_ZN4core3str11validations18utf8_acc_cont_byte17h8689eb325a5b266aE>
    80005584:	85aa                	mv	a1,a0
    80005586:	f42e                	sd	a1,40(sp)
    80005588:	d92a                	sw	a0,176(sp)
    8000558a:	a009                	j	8000558c <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E+0x100>
        ch = init << 12 | y_z;
    8000558c:	6566                	ld	a0,88(sp)
    8000558e:	7622                	ld	a2,40(sp)
    80005590:	65c6                	ld	a1,80(sp)
    80005592:	05b2                	slli	a1,a1,0xc
    80005594:	8dd1                	or	a1,a1,a2
    80005596:	c32e                	sw	a1,132(sp)
    80005598:	0f000593          	li	a1,240
        if x >= 0xF0 {
    8000559c:	00b56a63          	bltu	a0,a1,800055b0 <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E+0x124>
    800055a0:	a009                	j	800055a2 <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E+0x116>
            // [x y z w] case
            // use only the lower 3 bits of `init`
            let w = unwrap_or_0(bytes.next());
    800055a2:	7506                	ld	a0,96(sp)
    800055a4:	00006097          	auipc	ra,0x6
    800055a8:	ba0080e7          	jalr	-1120(ra) # 8000b144 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbe39990052f1389dE>
    800055ac:	f02a                	sd	a0,32(sp)
    800055ae:	a011                	j	800055b2 <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E+0x126>
        if x >= 0xF0 {
    800055b0:	a825                	j	800055e8 <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E+0x15c>
            let w = unwrap_or_0(bytes.next());
    800055b2:	7502                	ld	a0,32(sp)
    800055b4:	00003097          	auipc	ra,0x3
    800055b8:	3ae080e7          	jalr	942(ra) # 80008962 <_ZN4core3str11validations11unwrap_or_017haab6baa99207da23E>
    800055bc:	85aa                	mv	a1,a0
    800055be:	ec2e                	sd	a1,24(sp)
    800055c0:	0aa10ba3          	sb	a0,183(sp)
    800055c4:	a009                	j	800055c6 <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E+0x13a>
            ch = (init & 7) << 18 | utf8_acc_cont_byte(y_z, w);
    800055c6:	65e2                	ld	a1,24(sp)
    800055c8:	7522                	ld	a0,40(sp)
    800055ca:	6646                	ld	a2,80(sp)
    800055cc:	8a1d                	andi	a2,a2,7
    800055ce:	064a                	slli	a2,a2,0x12
    800055d0:	e432                	sd	a2,8(sp)
    800055d2:	00003097          	auipc	ra,0x3
    800055d6:	3de080e7          	jalr	990(ra) # 800089b0 <_ZN4core3str11validations18utf8_acc_cont_byte17h8689eb325a5b266aE>
    800055da:	e82a                	sd	a0,16(sp)
    800055dc:	a009                	j	800055de <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E+0x152>
    800055de:	6522                	ld	a0,8(sp)
    800055e0:	65c2                	ld	a1,16(sp)
    800055e2:	8d4d                	or	a0,a0,a1
    800055e4:	c32a                	sw	a0,132(sp)
        if x >= 0xF0 {
    800055e6:	a009                	j	800055e8 <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E+0x15c>
    if x >= 0xE0 {
    800055e8:	a009                	j	800055ea <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E+0x15e>
        }
    }

    Some(ch)
    800055ea:	451a                	lw	a0,132(sp)
    800055ec:	daaa                	sw	a0,116(sp)
    800055ee:	4505                	li	a0,1
    800055f0:	d8aa                	sw	a0,112(sp)
}
    800055f2:	a011                	j	800055f6 <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E+0x16a>
    800055f4:	a009                	j	800055f6 <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E+0x16a>
    800055f6:	5546                	lw	a0,112(sp)
    800055f8:	55d6                	lw	a1,116(sp)
    800055fa:	70ea                	ld	ra,184(sp)
    800055fc:	6129                	addi	sp,sp,192
    800055fe:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17hffa57d7c8ffaba34E:

0000000080005600 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17hffa57d7c8ffaba34E>:
    /// ```
    #[stable(feature = "pointer_methods", since = "1.26.0")]
    #[must_use = "returns a new pointer rather than modifying its argument"]
    #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
    #[inline]
    pub const unsafe fn add(self, count: usize) -> Self
    80005600:	1101                	addi	sp,sp,-32
    80005602:	ec06                	sd	ra,24(sp)
    80005604:	e42a                	sd	a0,8(sp)
    80005606:	e82e                	sd	a1,16(sp)
    where
        T: Sized,
    {
        // SAFETY: the caller must uphold the safety contract for `offset`.
        unsafe { self.offset(count as isize) }
    80005608:	00000097          	auipc	ra,0x0
    8000560c:	046080e7          	jalr	70(ra) # 8000564e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h6150def6e470518fE>
    80005610:	e02a                	sd	a0,0(sp)
    80005612:	a009                	j	80005614 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17hffa57d7c8ffaba34E+0x14>
    }
    80005614:	6502                	ld	a0,0(sp)
    80005616:	60e2                	ld	ra,24(sp)
    80005618:	6105                	addi	sp,sp,32
    8000561a:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h12167601873b3d53E:

000000008000561c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h12167601873b3d53E>:
    pub unsafe fn as_mut<'a>(self) -> Option<&'a mut T> {
    8000561c:	7179                	addi	sp,sp,-48
    8000561e:	f406                	sd	ra,40(sp)
    80005620:	e42a                	sd	a0,8(sp)
    80005622:	f02a                	sd	a0,32(sp)
        if self.is_null() { None } else { unsafe { Some(&mut *self) } }
    80005624:	00000097          	auipc	ra,0x0
    80005628:	046080e7          	jalr	70(ra) # 8000566a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hee9a0b1c2395b573E>
    8000562c:	e82a                	sd	a0,16(sp)
    8000562e:	a009                	j	80005630 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h12167601873b3d53E+0x14>
    80005630:	6542                	ld	a0,16(sp)
    80005632:	4581                	li	a1,0
    80005634:	00b50663          	beq	a0,a1,80005640 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h12167601873b3d53E+0x24>
    80005638:	a009                	j	8000563a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h12167601873b3d53E+0x1e>
    8000563a:	4501                	li	a0,0
    8000563c:	ec2a                	sd	a0,24(sp)
    8000563e:	a021                	j	80005646 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h12167601873b3d53E+0x2a>
    80005640:	6522                	ld	a0,8(sp)
    80005642:	ec2a                	sd	a0,24(sp)
    80005644:	a009                	j	80005646 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h12167601873b3d53E+0x2a>
    }
    80005646:	6562                	ld	a0,24(sp)
    80005648:	70a2                	ld	ra,40(sp)
    8000564a:	6145                	addi	sp,sp,48
    8000564c:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h6150def6e470518fE:

000000008000564e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h6150def6e470518fE>:
    pub const unsafe fn offset(self, count: isize) -> *mut T
    8000564e:	1101                	addi	sp,sp,-32
    80005650:	e42a                	sd	a0,8(sp)
    80005652:	e82e                	sd	a1,16(sp)
    80005654:	02800613          	li	a2,40
        unsafe { intrinsics::offset(self, count) as *mut T }
    80005658:	02c585b3          	mul	a1,a1,a2
    8000565c:	952e                	add	a0,a0,a1
    8000565e:	e02a                	sd	a0,0(sp)
    80005660:	ec2a                	sd	a0,24(sp)
    80005662:	a009                	j	80005664 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h6150def6e470518fE+0x16>
    }
    80005664:	6502                	ld	a0,0(sp)
    80005666:	6105                	addi	sp,sp,32
    80005668:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hee9a0b1c2395b573E:

000000008000566a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hee9a0b1c2395b573E>:
    pub const fn is_null(self) -> bool {
    8000566a:	1101                	addi	sp,sp,-32
    8000566c:	ec06                	sd	ra,24(sp)
    8000566e:	e82a                	sd	a0,16(sp)
        (self as *mut u8).guaranteed_eq(null_mut())
    80005670:	e42a                	sd	a0,8(sp)
    80005672:	a009                	j	80005674 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hee9a0b1c2395b573E+0xa>
    80005674:	6522                	ld	a0,8(sp)
    80005676:	4581                	li	a1,0
    80005678:	0001d097          	auipc	ra,0x1d
    8000567c:	9c4080e7          	jalr	-1596(ra) # 8002203c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$13guaranteed_eq17h32ea8c99c0b8220dE>
    80005680:	e02a                	sd	a0,0(sp)
    80005682:	a009                	j	80005684 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hee9a0b1c2395b573E+0x1a>
    }
    80005684:	6502                	ld	a0,0(sp)
    80005686:	60e2                	ld	ra,24(sp)
    80005688:	6105                	addi	sp,sp,32
    8000568a:	8082                	ret

Disassembly of section .text._ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h37e95d8a2d6ca634E:

000000008000568c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h37e95d8a2d6ca634E>:
    /// assert_eq!(x, &[3, 4, 6]);
    /// ```
    #[stable(feature = "rust1", since = "1.0.0")]
    #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
    #[inline]
    pub const fn as_mut_ptr(&mut self) -> *mut T {
    8000568c:	1141                	addi	sp,sp,-16
    8000568e:	e02a                	sd	a0,0(sp)
    80005690:	e42e                	sd	a1,8(sp)
        self as *mut [T] as *mut T
    }
    80005692:	0141                	addi	sp,sp,16
    80005694:	8082                	ret

Disassembly of section .text._ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h0b5a743241a7cbfaE:

0000000080005696 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h0b5a743241a7cbfaE>:
    pub const fn len(&self) -> usize {
    80005696:	7179                	addi	sp,sp,-48
    80005698:	e42e                	sd	a1,8(sp)
    8000569a:	85aa                	mv	a1,a0
    8000569c:	6522                	ld	a0,8(sp)
    8000569e:	f02e                	sd	a1,32(sp)
    800056a0:	f42a                	sd	a0,40(sp)
            unsafe { crate::ptr::PtrRepr { const_ptr: self }.components.metadata }
    800056a2:	e82e                	sd	a1,16(sp)
    800056a4:	ec2a                	sd	a0,24(sp)
    }
    800056a6:	6145                	addi	sp,sp,48
    800056a8:	8082                	ret

Disassembly of section .text._ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h56877d4d8de3d254E:

00000000800056aa <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h56877d4d8de3d254E>:
    /// }
    /// assert_eq!(x, &[3, 4, 6]);
    /// ```
    #[stable(feature = "rust1", since = "1.0.0")]
    #[inline]
    pub fn iter_mut(&mut self) -> IterMut<'_, T> {
    800056aa:	7179                	addi	sp,sp,-48
    800056ac:	f406                	sd	ra,40(sp)
    800056ae:	ec2a                	sd	a0,24(sp)
    800056b0:	f02e                	sd	a1,32(sp)
        IterMut::new(self)
    800056b2:	00005097          	auipc	ra,0x5
    800056b6:	75a080e7          	jalr	1882(ra) # 8000ae0c <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h018b863ac427b524E>
    800056ba:	e42a                	sd	a0,8(sp)
    800056bc:	e82e                	sd	a1,16(sp)
    800056be:	a009                	j	800056c0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h56877d4d8de3d254E+0x16>
    }
    800056c0:	65c2                	ld	a1,16(sp)
    800056c2:	6522                	ld	a0,8(sp)
    800056c4:	70a2                	ld	ra,40(sp)
    800056c6:	6145                	addi	sp,sp,48
    800056c8:	8082                	ret

Disassembly of section .text._ZN6kernel2fs3bio6Bcache5binit28_$u7b$$u7b$closure$u7d$$u7d$17h25f2c34d7a851755E:

00000000800056ca <_ZN6kernel2fs3bio6Bcache5binit28_$u7b$$u7b$closure$u7d$$u7d$17h25f2c34d7a851755E>:
            .for_each(|(i, b)| b.index = i);
    800056ca:	7179                	addi	sp,sp,-48
    800056cc:	e42a                	sd	a0,8(sp)
    800056ce:	e82e                	sd	a1,16(sp)
    800056d0:	ec32                	sd	a2,24(sp)
    800056d2:	f02e                	sd	a1,32(sp)
    800056d4:	f432                	sd	a2,40(sp)
    800056d6:	ee0c                	sd	a1,24(a2)
    800056d8:	6145                	addi	sp,sp,48
    800056da:	8082                	ret

Disassembly of section .text._ZN6kernel2fs3bio6BufLru14move_if_no_ref28_$u7b$$u7b$closure$u7d$$u7d$17h09361c1327a61982E:

00000000800056dc <_ZN6kernel2fs3bio6BufLru14move_if_no_ref28_$u7b$$u7b$closure$u7d$$u7d$17h09361c1327a61982E>:
                b.next.as_mut().map(|b_next| b_next.prev = b.prev);
    800056dc:	1141                	addi	sp,sp,-16
    800056de:	e02a                	sd	a0,0(sp)
    800056e0:	e42e                	sd	a1,8(sp)
    800056e2:	6108                	ld	a0,0(a0)
    800056e4:	6108                	ld	a0,0(a0)
    800056e6:	e188                	sd	a0,0(a1)
    800056e8:	0141                	addi	sp,sp,16
    800056ea:	8082                	ret

Disassembly of section .text._ZN6kernel2fs3bio6BufLru14move_if_no_ref28_$u7b$$u7b$closure$u7d$$u7d$17h0a4afebccbc6cf13E:

00000000800056ec <_ZN6kernel2fs3bio6BufLru14move_if_no_ref28_$u7b$$u7b$closure$u7d$$u7d$17h0a4afebccbc6cf13E>:
                b.prev.as_mut().map(|b_prev| b_prev.next = b.next);
    800056ec:	1141                	addi	sp,sp,-16
    800056ee:	e02a                	sd	a0,0(sp)
    800056f0:	e42e                	sd	a1,8(sp)
    800056f2:	6108                	ld	a0,0(a0)
    800056f4:	6508                	ld	a0,8(a0)
    800056f6:	e588                	sd	a0,8(a1)
    800056f8:	0141                	addi	sp,sp,16
    800056fa:	8082                	ret

Disassembly of section .text._ZN6kernel2fs3bio6BufLru14move_if_no_ref28_$u7b$$u7b$closure$u7d$$u7d$17h304675452a5a98dfE:

00000000800056fc <_ZN6kernel2fs3bio6BufLru14move_if_no_ref28_$u7b$$u7b$closure$u7d$$u7d$17h304675452a5a98dfE>:
                self.head.as_mut().map(|old_head| old_head.prev = b);
    800056fc:	1141                	addi	sp,sp,-16
    800056fe:	e02a                	sd	a0,0(sp)
    80005700:	e42e                	sd	a1,8(sp)
    80005702:	6108                	ld	a0,0(a0)
    80005704:	e188                	sd	a0,0(a1)
    80005706:	0141                	addi	sp,sp,16
    80005708:	8082                	ret

Disassembly of section .text._ZN6kernel2fs4file5VFile4init17h000c38ec0bf103cfE:

000000008000570a <_ZN6kernel2fs4file5VFile4init17h000c38ec0bf103cfE>:
    pub(crate) major: i16
    // inner: FileInner
}

impl VFile {
    pub(crate) const fn init() -> Self {
    8000570a:	7179                	addi	sp,sp,-48
    8000570c:	85aa                	mv	a1,a0
    8000570e:	4501                	li	a0,0
        Self{
            ftype: FileType::None,
            readable: false,
            writeable: false,
            pipe: None,
    80005710:	e42a                	sd	a0,8(sp)
            inode: None,
    80005712:	ec2a                	sd	a0,24(sp)
        Self{
    80005714:	02a59623          	sh	a0,44(a1)
    80005718:	02a59823          	sh	a0,48(a1)
    8000571c:	66a2                	ld	a3,8(sp)
    8000571e:	6642                	ld	a2,16(sp)
    80005720:	e194                	sd	a3,0(a1)
    80005722:	e590                	sd	a2,8(a1)
    80005724:	6662                	ld	a2,24(sp)
    80005726:	e990                	sd	a2,16(a1)
    80005728:	7602                	ld	a2,32(sp)
    8000572a:	ed90                	sd	a2,24(a1)
    8000572c:	7622                	ld	a2,40(sp)
    8000572e:	f190                	sd	a2,32(a1)
    80005730:	d588                	sw	a0,40(a1)
    80005732:	02a59723          	sh	a0,46(a1)
            offset: 0,
            major: 0
        }
    }
    80005736:	6145                	addi	sp,sp,48
    80005738:	8082                	ret

Disassembly of section .text._ZN6kernel2fs4file5VFile4read17h537db93950e2de6aE:

000000008000573a <_ZN6kernel2fs4file5VFile4read17h537db93950e2de6aE>:

    pub fn read(
    8000573a:	7145                	addi	sp,sp,-464
    8000573c:	e786                	sd	ra,456(sp)
    8000573e:	e136                	sd	a3,128(sp)
    80005740:	e532                	sd	a2,136(sp)
    80005742:	e92e                	sd	a1,144(sp)
    80005744:	85aa                	mv	a1,a0
    80005746:	654a                	ld	a0,144(sp)
    80005748:	ed2e                	sd	a1,152(sp)
    8000574a:	e6aa                	sd	a0,328(sp)
    8000574c:	eab2                	sd	a2,336(sp)
    8000574e:	eeb6                	sd	a3,344(sp)
    80005750:	4581                	li	a1,0
        &self, 
        addr: usize, 
        len: usize
    ) -> Result<usize, &'static str> {
        let ret;
    80005752:	14b103a3          	sb	a1,327(sp)
        if !self.readable() {
    80005756:	00000097          	auipc	ra,0x0
    8000575a:	7d8080e7          	jalr	2008(ra) # 80005f2e <_ZN6kernel2fs4file5VFile8readable17h4e596856d12086d6E>
    8000575e:	f12a                	sd	a0,160(sp)
    80005760:	a009                	j	80005762 <_ZN6kernel2fs4file5VFile4read17h537db93950e2de6aE+0x28>
    80005762:	750a                	ld	a0,160(sp)
    80005764:	e105                	bnez	a0,80005784 <.LBB1_58+0x14>
    80005766:	a009                	j	80005768 <.LBB1_57>

0000000080005768 <.LBB1_57>:
            panic!("File can't be read!")
    80005768:	00021517          	auipc	a0,0x21
    8000576c:	c7a50513          	addi	a0,a0,-902 # 800263e2 <.L__unnamed_1>

0000000080005770 <.LBB1_58>:
    80005770:	00021617          	auipc	a2,0x21
    80005774:	c9860613          	addi	a2,a2,-872 # 80026408 <.L__unnamed_2>
    80005778:	45cd                	li	a1,19
    8000577a:	0001d097          	auipc	ra,0x1d
    8000577e:	afc080e7          	jalr	-1284(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80005782:	0000                	unimp
        }

        match self.ftype {
            FileType::Pipe => {
    80005784:	654a                	ld	a0,144(sp)
    80005786:	02c55503          	lhu	a0,44(a0)
    8000578a:	fcaa                	sd	a0,120(sp)
    8000578c:	4585                	li	a1,1
    8000578e:	02b50b63          	beq	a0,a1,800057c4 <.LBB1_60+0x14>
    80005792:	a009                	j	80005794 <.LBB1_58+0x24>
    80005794:	7566                	ld	a0,120(sp)
    80005796:	4589                	li	a1,2
    80005798:	1eb50363          	beq	a0,a1,8000597e <.LBB1_65+0x68>
    8000579c:	a009                	j	8000579e <.LBB1_58+0x2e>
    8000579e:	7566                	ld	a0,120(sp)
    800057a0:	458d                	li	a1,3
    800057a2:	0ab50163          	beq	a0,a1,80005844 <.LBB1_61+0x7a>
    800057a6:	a009                	j	800057a8 <.LBB1_59>

00000000800057a8 <.LBB1_59>:
                    }
                }
            },

            _ => {
                panic!("Invalid file!")
    800057a8:	00021517          	auipc	a0,0x21
    800057ac:	c7850513          	addi	a0,a0,-904 # 80026420 <.L__unnamed_3>

00000000800057b0 <.LBB1_60>:
    800057b0:	00021617          	auipc	a2,0x21
    800057b4:	c8060613          	addi	a2,a2,-896 # 80026430 <.L__unnamed_4>
    800057b8:	45b5                	li	a1,13
    800057ba:	0001d097          	auipc	ra,0x1d
    800057be:	abc080e7          	jalr	-1348(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    800057c2:	0000                	unimp
                let pipe = unsafe{ &*self.pipe.unwrap() };
    800057c4:	65ca                	ld	a1,144(sp)
    800057c6:	6188                	ld	a0,0(a1)
    800057c8:	658c                	ld	a1,8(a1)

00000000800057ca <.LBB1_61>:
    800057ca:	00021617          	auipc	a2,0x21
    800057ce:	d1660613          	addi	a2,a2,-746 # 800264e0 <.L__unnamed_5>
    800057d2:	00009097          	auipc	ra,0x9
    800057d6:	688080e7          	jalr	1672(ra) # 8000ee5a <_ZN4core6option15Option$LT$T$GT$6unwrap17hca45abde8fc82689E>
    800057da:	f8aa                	sd	a0,112(sp)
    800057dc:	a009                	j	800057de <.LBB1_61+0x14>
    800057de:	668a                	ld	a3,128(sp)
    800057e0:	662a                	ld	a2,136(sp)
    800057e2:	75c6                	ld	a1,112(sp)
    800057e4:	f72e                	sd	a1,424(sp)
    800057e6:	01a8                	addi	a0,sp,200
                ret = pipe.read(addr, len)?;
    800057e8:	00005097          	auipc	ra,0x5
    800057ec:	914080e7          	jalr	-1772(ra) # 8000a0fc <_ZN6kernel2fs4pipe4Pipe4read17h0aa21294c9ce269eE>
    800057f0:	a009                	j	800057f2 <.LBB1_61+0x28>
    800057f2:	1908                	addi	a0,sp,176
    800057f4:	01ac                	addi	a1,sp,200
    800057f6:	00008097          	auipc	ra,0x8
    800057fa:	984080e7          	jalr	-1660(ra) # 8000d17a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h0dd4a8728df8a7c8E>
    800057fe:	a009                	j	80005800 <.LBB1_61+0x36>
    80005800:	754a                	ld	a0,176(sp)
    80005802:	4581                	li	a1,0
    80005804:	00b50463          	beq	a0,a1,8000580c <.LBB1_61+0x42>
    80005808:	a009                	j	8000580a <.LBB1_61+0x40>
    8000580a:	a811                	j	8000581e <.LBB1_61+0x54>
    8000580c:	65ea                	ld	a1,152(sp)
    8000580e:	756a                	ld	a0,184(sp)
    80005810:	e3aa                	sd	a0,448(sp)
    80005812:	f52a                	sd	a0,168(sp)
                return Ok(ret)
    80005814:	e588                	sd	a0,8(a1)
    80005816:	4501                	li	a0,0
    80005818:	e188                	sd	a0,0(a1)
    8000581a:	a481                	j	80005a5a <.LBB1_66+0xca>
                ret = pipe.read(addr, len)?;
    8000581c:	0000                	unimp
    8000581e:	756a                	ld	a0,184(sp)
    80005820:	658e                	ld	a1,192(sp)
    80005822:	fb2a                	sd	a0,432(sp)
    80005824:	ff2e                	sd	a1,440(sp)
    80005826:	00006097          	auipc	ra,0x6
    8000582a:	246080e7          	jalr	582(ra) # 8000ba6c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h6f3e3843c20d184aE>
    8000582e:	f0aa                	sd	a0,96(sp)
    80005830:	f4ae                	sd	a1,104(sp)
    80005832:	a009                	j	80005834 <.LBB1_61+0x6a>
    80005834:	7626                	ld	a2,104(sp)
    80005836:	7586                	ld	a1,96(sp)
    80005838:	656a                	ld	a0,152(sp)
    8000583a:	00008097          	auipc	ra,0x8
    8000583e:	872080e7          	jalr	-1934(ra) # 8000d0ac <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h4dd43adfe00292f6E>
    80005842:	ac21                	j	80005a5a <.LBB1_66+0xca>
                if self.major < 0 || 
    80005844:	654a                	ld	a0,144(sp)
    80005846:	02e51503          	lh	a0,46(a0)
    8000584a:	4581                	li	a1,0
    8000584c:	02b54863          	blt	a0,a1,8000587c <.LBB1_61+0xb2>
    80005850:	a835                	j	8000588c <.LBB1_61+0xc2>
    80005852:	4505                	li	a0,1
    80005854:	0ea10323          	sb	a0,230(sp)
    80005858:	a829                	j	80005872 <.LBB1_61+0xa8>
    8000585a:	4501                	li	a0,0
    8000585c:	0ea10323          	sb	a0,230(sp)
    80005860:	a809                	j	80005872 <.LBB1_61+0xa8>
                unsafe{ DEVICE_LIST.table[self.major as usize].read as usize == 0 }{
    80005862:	654a                	ld	a0,144(sp)
    80005864:	02e51503          	lh	a0,46(a0)
    80005868:	ecaa                	sd	a0,88(sp)
    8000586a:	45a9                	li	a1,10
    8000586c:	02b56c63          	bltu	a0,a1,800058a4 <.LBB1_61+0xda>
    80005870:	a419                	j	80005a76 <.LBB1_66+0xe6>
                if self.major < 0 || 
    80005872:	0e614503          	lbu	a0,230(sp)
    80005876:	8905                	andi	a0,a0,1
    80005878:	e131                	bnez	a0,800058bc <.LBB1_62+0x14>
    8000587a:	a8a9                	j	800058d4 <.LBB1_63+0x16>
    8000587c:	4505                	li	a0,1
    8000587e:	0ea103a3          	sb	a0,231(sp)
    80005882:	a821                	j	8000589a <.LBB1_61+0xd0>
    80005884:	4501                	li	a0,0
    80005886:	0ea103a3          	sb	a0,231(sp)
    8000588a:	a801                	j	8000589a <.LBB1_61+0xd0>
                self.major as usize >= NDEV || 
    8000588c:	654a                	ld	a0,144(sp)
    8000588e:	02e51583          	lh	a1,46(a0)
    80005892:	4525                	li	a0,9
                if self.major < 0 || 
    80005894:	feb564e3          	bltu	a0,a1,8000587c <.LBB1_61+0xb2>
    80005898:	b7f5                	j	80005884 <.LBB1_61+0xba>
    8000589a:	0e714503          	lbu	a0,231(sp)
    8000589e:	8905                	andi	a0,a0,1
    800058a0:	f94d                	bnez	a0,80005852 <.LBB1_61+0x88>
    800058a2:	b7c1                	j	80005862 <.LBB1_61+0x98>
                unsafe{ DEVICE_LIST.table[self.major as usize].read as usize == 0 }{
    800058a4:	6566                	ld	a0,88(sp)
    800058a6:	0512                	slli	a0,a0,0x4

00000000800058a8 <.LBB1_62>:
    800058a8:	0006b597          	auipc	a1,0x6b
    800058ac:	75858593          	addi	a1,a1,1880 # 80071000 <_ZN6kernel2fs7devices11DEVICE_LIST17h17b7683da24e3570E>
    800058b0:	952e                	add	a0,a0,a1
    800058b2:	6108                	ld	a0,0(a0)
    800058b4:	4581                	li	a1,0
                if self.major < 0 || 
    800058b6:	f8b50ee3          	beq	a0,a1,80005852 <.LBB1_61+0x88>
    800058ba:	b745                	j	8000585a <.LBB1_61+0x90>
                    return Err("[Error] vfs: Fail to read device")
    800058bc:	65ea                	ld	a1,152(sp)

00000000800058be <.LBB1_63>:
    800058be:	00020517          	auipc	a0,0x20
    800058c2:	b2c50513          	addi	a0,a0,-1236 # 800253ea <.L__unnamed_11+0x11e>
    800058c6:	e588                	sd	a0,8(a1)
    800058c8:	02000513          	li	a0,32
    800058cc:	e988                	sd	a0,16(a1)
    800058ce:	4505                	li	a0,1
    800058d0:	e188                	sd	a0,0(a1)
    800058d2:	a261                	j	80005a5a <.LBB1_66+0xca>
                    DEVICE_LIST.table[self.major as usize].read()
    800058d4:	654a                	ld	a0,144(sp)
    800058d6:	02e51583          	lh	a1,46(a0)
    800058da:	e8ae                	sd	a1,80(sp)
    800058dc:	4525                	li	a0,9
    800058de:	1ab56763          	bltu	a0,a1,80005a8c <.LBB1_67+0x14>
    800058e2:	a009                	j	800058e4 <.LBB1_63+0x26>
    800058e4:	6546                	ld	a0,80(sp)
    800058e6:	0512                	slli	a0,a0,0x4

00000000800058e8 <.LBB1_64>:
    800058e8:	0006b597          	auipc	a1,0x6b
    800058ec:	71858593          	addi	a1,a1,1816 # 80071000 <_ZN6kernel2fs7devices11DEVICE_LIST17h17b7683da24e3570E>
    800058f0:	952e                	add	a0,a0,a1
    800058f2:	00000097          	auipc	ra,0x0
    800058f6:	9d8080e7          	jalr	-1576(ra) # 800052ca <_ZN6kernel2fs7devices6Device4read17h5487da2141591295E>
    800058fa:	85aa                	mv	a1,a0
    800058fc:	e4ae                	sd	a1,72(sp)
    800058fe:	f2aa                	sd	a0,352(sp)
    80005900:	a009                	j	80005902 <.LBB1_64+0x1a>
                ret = read(true, addr, len).ok_or("Fail to read device")?;
    80005902:	66a6                	ld	a3,72(sp)
    80005904:	660a                	ld	a2,128(sp)
    80005906:	65aa                	ld	a1,136(sp)
    80005908:	4505                	li	a0,1
    8000590a:	9682                	jalr	a3
    8000590c:	fc2a                	sd	a0,56(sp)
    8000590e:	e0ae                	sd	a1,64(sp)
    80005910:	a009                	j	80005912 <.LBB1_64+0x2a>
    80005912:	6606                	ld	a2,64(sp)
    80005914:	75e2                	ld	a1,56(sp)

0000000080005916 <.LBB1_65>:
    80005916:	00021697          	auipc	a3,0x21
    8000591a:	b6268693          	addi	a3,a3,-1182 # 80026478 <.L__unnamed_7>
    8000591e:	0208                	addi	a0,sp,256
    80005920:	474d                	li	a4,19
    80005922:	00009097          	auipc	ra,0x9
    80005926:	dca080e7          	jalr	-566(ra) # 8000e6ec <_ZN4core6option15Option$LT$T$GT$5ok_or17h436768d7af37ca52E>
    8000592a:	a009                	j	8000592c <.LBB1_65+0x16>
    8000592c:	11a8                	addi	a0,sp,232
    8000592e:	020c                	addi	a1,sp,256
    80005930:	00008097          	auipc	ra,0x8
    80005934:	84a080e7          	jalr	-1974(ra) # 8000d17a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h0dd4a8728df8a7c8E>
    80005938:	a009                	j	8000593a <.LBB1_65+0x24>
    8000593a:	752e                	ld	a0,232(sp)
    8000593c:	4581                	li	a1,0
    8000593e:	00b50463          	beq	a0,a1,80005946 <.LBB1_65+0x30>
    80005942:	a009                	j	80005944 <.LBB1_65+0x2e>
    80005944:	a811                	j	80005958 <.LBB1_65+0x42>
    80005946:	65ea                	ld	a1,152(sp)
    80005948:	754e                	ld	a0,240(sp)
    8000594a:	feaa                	sd	a0,376(sp)
    8000594c:	f52a                	sd	a0,168(sp)
                return Ok(ret)
    8000594e:	e588                	sd	a0,8(a1)
    80005950:	4501                	li	a0,0
    80005952:	e188                	sd	a0,0(a1)
    80005954:	a219                	j	80005a5a <.LBB1_66+0xca>
                ret = read(true, addr, len).ok_or("Fail to read device")?;
    80005956:	0000                	unimp
    80005958:	754e                	ld	a0,240(sp)
    8000595a:	75ee                	ld	a1,248(sp)
    8000595c:	f6aa                	sd	a0,360(sp)
    8000595e:	faae                	sd	a1,368(sp)
    80005960:	00006097          	auipc	ra,0x6
    80005964:	10c080e7          	jalr	268(ra) # 8000ba6c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h6f3e3843c20d184aE>
    80005968:	f42a                	sd	a0,40(sp)
    8000596a:	f82e                	sd	a1,48(sp)
    8000596c:	a009                	j	8000596e <.LBB1_65+0x58>
    8000596e:	7642                	ld	a2,48(sp)
    80005970:	75a2                	ld	a1,40(sp)
    80005972:	656a                	ld	a0,152(sp)
    80005974:	00007097          	auipc	ra,0x7
    80005978:	738080e7          	jalr	1848(ra) # 8000d0ac <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h4dd43adfe00292f6E>
    8000597c:	a8f9                	j	80005a5a <.LBB1_66+0xca>
                let inode = self.inode.as_ref().unwrap();
    8000597e:	654a                	ld	a0,144(sp)
    80005980:	0541                	addi	a0,a0,16
    80005982:	00009097          	auipc	ra,0x9
    80005986:	0ea080e7          	jalr	234(ra) # 8000ea6c <_ZN4core6option15Option$LT$T$GT$6as_ref17h883d1380e87d3449E>
    8000598a:	f02a                	sd	a0,32(sp)
    8000598c:	a009                	j	8000598e <.LBB1_65+0x78>
    8000598e:	7502                	ld	a0,32(sp)

0000000080005990 <.LBB1_66>:
    80005990:	00021597          	auipc	a1,0x21
    80005994:	b0058593          	addi	a1,a1,-1280 # 80026490 <.L__unnamed_8>
    80005998:	00009097          	auipc	ra,0x9
    8000599c:	420080e7          	jalr	1056(ra) # 8000edb8 <_ZN4core6option15Option$LT$T$GT$6unwrap17h8e9f6f5582436d22E>
    800059a0:	85aa                	mv	a1,a0
    800059a2:	ec2e                	sd	a1,24(sp)
    800059a4:	e32a                	sd	a0,384(sp)
    800059a6:	a009                	j	800059a8 <.LBB1_66+0x18>
    800059a8:	6562                	ld	a0,24(sp)
    800059aa:	4585                	li	a1,1
                let mut inode_guard = inode.lock();
    800059ac:	14b103a3          	sb	a1,327(sp)
    800059b0:	00015097          	auipc	ra,0x15
    800059b4:	506080e7          	jalr	1286(ra) # 8001aeb6 <_ZN6kernel2fs5inode5Inode4lock17he70970c593f751adE>
    800059b8:	ee2a                	sd	a0,280(sp)
    800059ba:	f22e                	sd	a1,288(sp)
    800059bc:	a009                	j	800059be <.LBB1_66+0x2e>
    800059be:	0a28                	addi	a0,sp,280
                match inode_guard.read(true, addr, self.offset, len as u32) {
    800059c0:	00018097          	auipc	ra,0x18
    800059c4:	d22080e7          	jalr	-734(ra) # 8001d6e2 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    800059c8:	e82a                	sd	a0,16(sp)
    800059ca:	a009                	j	800059cc <.LBB1_66+0x3c>
    800059cc:	678a                	ld	a5,128(sp)
    800059ce:	66aa                	ld	a3,136(sp)
    800059d0:	65c2                	ld	a1,16(sp)
    800059d2:	654a                	ld	a0,144(sp)
    800059d4:	5518                	lw	a4,40(a0)
    800059d6:	1228                	addi	a0,sp,296
    800059d8:	4605                	li	a2,1
    800059da:	00015097          	auipc	ra,0x15
    800059de:	8ec080e7          	jalr	-1812(ra) # 8001a2c6 <_ZN6kernel2fs5inode9InodeData4read17h2d02dc0e430e4837E>
    800059e2:	a009                	j	800059e4 <.LBB1_66+0x54>
                    Ok(size) => {
    800059e4:	7532                	ld	a0,296(sp)
    800059e6:	4581                	li	a1,0
    800059e8:	00b50e63          	beq	a0,a1,80005a04 <.LBB1_66+0x74>
    800059ec:	a009                	j	800059ee <.LBB1_66+0x5e>
                    Err(err) => {
    800059ee:	65ea                	ld	a1,152(sp)
    800059f0:	7652                	ld	a2,304(sp)
    800059f2:	7572                	ld	a0,312(sp)
    800059f4:	e732                	sd	a2,392(sp)
    800059f6:	eb2a                	sd	a0,400(sp)
                        Err(err)
    800059f8:	e590                	sd	a2,8(a1)
    800059fa:	e988                	sd	a0,16(a1)
    800059fc:	4505                	li	a0,1
    800059fe:	e188                	sd	a0,0(a1)
                match inode_guard.read(true, addr, self.offset, len as u32) {
    80005a00:	a0b5                	j	80005a6c <.LBB1_66+0xdc>
    80005a02:	0000                	unimp
                    Ok(size) => {
    80005a04:	654a                	ld	a0,144(sp)
    80005a06:	75d2                	ld	a1,304(sp)
    80005a08:	ef2e                	sd	a1,408(sp)
                        ret = size;
    80005a0a:	f52e                	sd	a1,168(sp)
                        let offset = unsafe { &mut *(&self.offset as *const _ as *mut u32)};
    80005a0c:	02850613          	addi	a2,a0,40
    80005a10:	e032                	sd	a2,0(sp)
    80005a12:	f332                	sd	a2,416(sp)
                        *offset += ret as u32;
    80005a14:	1582                	slli	a1,a1,0x20
    80005a16:	9181                	srli	a1,a1,0x20
    80005a18:	02856503          	lwu	a0,40(a0)
    80005a1c:	95aa                	add	a1,a1,a0
    80005a1e:	e42e                	sd	a1,8(sp)
    80005a20:	02059513          	slli	a0,a1,0x20
    80005a24:	9101                	srli	a0,a0,0x20
    80005a26:	06b51e63          	bne	a0,a1,80005aa2 <.LBB1_69>
    80005a2a:	a009                	j	80005a2c <.LBB1_66+0x9c>
    80005a2c:	6522                	ld	a0,8(sp)
    80005a2e:	6582                	ld	a1,0(sp)
    80005a30:	c188                	sw	a0,0(a1)
    80005a32:	4501                	li	a0,0
                        drop(inode_guard);
    80005a34:	14a103a3          	sb	a0,327(sp)
    80005a38:	6572                	ld	a0,280(sp)
    80005a3a:	7592                	ld	a1,288(sp)
    80005a3c:	00017097          	auipc	ra,0x17
    80005a40:	62c080e7          	jalr	1580(ra) # 8001d068 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    80005a44:	a009                	j	80005a46 <.LBB1_66+0xb6>
                        Ok(ret)
    80005a46:	65ea                	ld	a1,152(sp)
    80005a48:	752a                	ld	a0,168(sp)
    80005a4a:	e588                	sd	a0,8(a1)
    80005a4c:	4501                	li	a0,0
    80005a4e:	e188                	sd	a0,0(a1)
                match inode_guard.read(true, addr, self.offset, len as u32) {
    80005a50:	a831                	j	80005a6c <.LBB1_66+0xdc>
    80005a52:	4501                	li	a0,0
            },
    80005a54:	14a103a3          	sb	a0,327(sp)
            },
        }
    }
    80005a58:	a009                	j	80005a5a <.LBB1_66+0xca>
    80005a5a:	60be                	ld	ra,456(sp)
    80005a5c:	6179                	addi	sp,sp,464
    80005a5e:	8082                	ret
    80005a60:	0a28                	addi	a0,sp,280
            },
    80005a62:	00001097          	auipc	ra,0x1
    80005a66:	60a080e7          	jalr	1546(ra) # 8000706c <_ZN4core3ptr96drop_in_place$LT$kernel..lock..sleeplock..SleepLockGuard$LT$kernel..fs..inode..InodeData$GT$$GT$17h00d5c02cf687ef41E>
    80005a6a:	b7e5                	j	80005a52 <.LBB1_66+0xc2>
    80005a6c:	14714503          	lbu	a0,327(sp)
    80005a70:	8905                	andi	a0,a0,1
    80005a72:	f57d                	bnez	a0,80005a60 <.LBB1_66+0xd0>
    80005a74:	bff9                	j	80005a52 <.LBB1_66+0xc2>
                unsafe{ DEVICE_LIST.table[self.major as usize].read as usize == 0 }{
    80005a76:	6566                	ld	a0,88(sp)

0000000080005a78 <.LBB1_67>:
    80005a78:	00021617          	auipc	a2,0x21
    80005a7c:	9d060613          	addi	a2,a2,-1584 # 80026448 <.L__unnamed_9>
    80005a80:	45a9                	li	a1,10
    80005a82:	0001d097          	auipc	ra,0x1d
    80005a86:	820080e7          	jalr	-2016(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80005a8a:	0000                	unimp
                    DEVICE_LIST.table[self.major as usize].read()
    80005a8c:	6546                	ld	a0,80(sp)

0000000080005a8e <.LBB1_68>:
    80005a8e:	00021617          	auipc	a2,0x21
    80005a92:	9d260613          	addi	a2,a2,-1582 # 80026460 <.L__unnamed_10>
    80005a96:	45a9                	li	a1,10
    80005a98:	0001d097          	auipc	ra,0x1d
    80005a9c:	80a080e7          	jalr	-2038(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

0000000080005aa2 <.LBB1_69>:
                        *offset += ret as u32;
    80005aa2:	00021517          	auipc	a0,0x21
    80005aa6:	a1e50513          	addi	a0,a0,-1506 # 800264c0 <str.0>

0000000080005aaa <.LBB1_70>:
    80005aaa:	00021617          	auipc	a2,0x21
    80005aae:	9fe60613          	addi	a2,a2,-1538 # 800264a8 <.L__unnamed_11>
    80005ab2:	45f1                	li	a1,28
    80005ab4:	0001c097          	auipc	ra,0x1c
    80005ab8:	7c2080e7          	jalr	1986(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel2fs4file5VFile5write17h6504f6f101707b61E:

0000000080005abe <_ZN6kernel2fs4file5VFile5write17h6504f6f101707b61E>:

    /// Write to file f. 
    /// addr is a user virtual address.
    pub fn write(
    80005abe:	de010113          	addi	sp,sp,-544
    80005ac2:	20113c23          	sd	ra,536(sp)
    80005ac6:	f536                	sd	a3,168(sp)
    80005ac8:	f932                	sd	a2,176(sp)
    80005aca:	fd2e                	sd	a1,184(sp)
    80005acc:	85aa                	mv	a1,a0
    80005ace:	756a                	ld	a0,184(sp)
    80005ad0:	e1ae                	sd	a1,192(sp)
    80005ad2:	eb2a                	sd	a0,400(sp)
    80005ad4:	ef32                	sd	a2,408(sp)
    80005ad6:	f336                	sd	a3,416(sp)
        &self, 
        addr: usize, 
        len: usize
    ) -> Result<usize, &'static str> {
        let ret; 
        if !self.writeable() {
    80005ad8:	00000097          	auipc	ra,0x0
    80005adc:	462080e7          	jalr	1122(ra) # 80005f3a <_ZN6kernel2fs4file5VFile9writeable17h876bce4459deb027E>
    80005ae0:	e5aa                	sd	a0,200(sp)
    80005ae2:	a009                	j	80005ae4 <_ZN6kernel2fs4file5VFile5write17h6504f6f101707b61E+0x26>
    80005ae4:	652e                	ld	a0,200(sp)
    80005ae6:	e105                	bnez	a0,80005b06 <.LBB2_72+0x14>
    80005ae8:	a009                	j	80005aea <.LBB2_71>

0000000080005aea <.LBB2_71>:
            panic!("file can't be written")
    80005aea:	00021517          	auipc	a0,0x21
    80005aee:	a0e50513          	addi	a0,a0,-1522 # 800264f8 <.L__unnamed_12>

0000000080005af2 <.LBB2_72>:
    80005af2:	00021617          	auipc	a2,0x21
    80005af6:	a1e60613          	addi	a2,a2,-1506 # 80026510 <.L__unnamed_13>
    80005afa:	45d5                	li	a1,21
    80005afc:	0001c097          	auipc	ra,0x1c
    80005b00:	77a080e7          	jalr	1914(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80005b04:	0000                	unimp
        }
        
        match self.ftype {
            FileType::Pipe => {
    80005b06:	756a                	ld	a0,184(sp)
    80005b08:	02c55503          	lhu	a0,44(a0)
    80005b0c:	f12a                	sd	a0,160(sp)
    80005b0e:	4585                	li	a1,1
    80005b10:	02b50b63          	beq	a0,a1,80005b46 <.LBB2_74+0x14>
    80005b14:	a009                	j	80005b16 <.LBB2_72+0x24>
    80005b16:	750a                	ld	a0,160(sp)
    80005b18:	4589                	li	a1,2
    80005b1a:	1eb50663          	beq	a0,a1,80005d06 <.LBB2_79+0x68>
    80005b1e:	a009                	j	80005b20 <.LBB2_72+0x2e>
    80005b20:	750a                	ld	a0,160(sp)
    80005b22:	458d                	li	a1,3
    80005b24:	0ab50463          	beq	a0,a1,80005bcc <.LBB2_75+0x80>
    80005b28:	a009                	j	80005b2a <.LBB2_73>

0000000080005b2a <.LBB2_73>:
                ret = count;
                Ok(ret)
            },

            _ => {
                panic!("Invalid File Type!")
    80005b2a:	00021517          	auipc	a0,0x21
    80005b2e:	9fe50513          	addi	a0,a0,-1538 # 80026528 <.L__unnamed_14>

0000000080005b32 <.LBB2_74>:
    80005b32:	00021617          	auipc	a2,0x21
    80005b36:	a0e60613          	addi	a2,a2,-1522 # 80026540 <.L__unnamed_15>
    80005b3a:	45c9                	li	a1,18
    80005b3c:	0001c097          	auipc	ra,0x1c
    80005b40:	73a080e7          	jalr	1850(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80005b44:	0000                	unimp
                let pipe = unsafe{ &*self.pipe.unwrap() };
    80005b46:	75ea                	ld	a1,184(sp)
    80005b48:	6188                	ld	a0,0(a1)
    80005b4a:	658c                	ld	a1,8(a1)

0000000080005b4c <.LBB2_75>:
    80005b4c:	00021617          	auipc	a2,0x21
    80005b50:	b0c60613          	addi	a2,a2,-1268 # 80026658 <.L__unnamed_16>
    80005b54:	00009097          	auipc	ra,0x9
    80005b58:	306080e7          	jalr	774(ra) # 8000ee5a <_ZN4core6option15Option$LT$T$GT$6unwrap17hca45abde8fc82689E>
    80005b5c:	ed2a                	sd	a0,152(sp)
    80005b5e:	a009                	j	80005b60 <.LBB2_75+0x14>
    80005b60:	76aa                	ld	a3,168(sp)
    80005b62:	764a                	ld	a2,176(sp)
    80005b64:	65ea                	ld	a1,152(sp)
    80005b66:	ffae                	sd	a1,504(sp)
    80005b68:	1988                	addi	a0,sp,240
                ret = pipe.write(addr, len)?;
    80005b6a:	00005097          	auipc	ra,0x5
    80005b6e:	8d2080e7          	jalr	-1838(ra) # 8000a43c <_ZN6kernel2fs4pipe4Pipe5write17h30d2c3404e2f657cE>
    80005b72:	a009                	j	80005b74 <.LBB2_75+0x28>
    80005b74:	09a8                	addi	a0,sp,216
    80005b76:	198c                	addi	a1,sp,240
    80005b78:	00007097          	auipc	ra,0x7
    80005b7c:	602080e7          	jalr	1538(ra) # 8000d17a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h0dd4a8728df8a7c8E>
    80005b80:	a009                	j	80005b82 <.LBB2_75+0x36>
    80005b82:	656e                	ld	a0,216(sp)
    80005b84:	4581                	li	a1,0
    80005b86:	00b50463          	beq	a0,a1,80005b8e <.LBB2_75+0x42>
    80005b8a:	a009                	j	80005b8c <.LBB2_75+0x40>
    80005b8c:	a819                	j	80005ba2 <.LBB2_75+0x56>
    80005b8e:	658e                	ld	a1,192(sp)
    80005b90:	750e                	ld	a0,224(sp)
    80005b92:	20a13823          	sd	a0,528(sp)
    80005b96:	e9aa                	sd	a0,208(sp)
                Ok(ret)
    80005b98:	e588                	sd	a0,8(a1)
    80005b9a:	4501                	li	a0,0
    80005b9c:	e188                	sd	a0,0(a1)
        match self.ftype {
    80005b9e:	a4e5                	j	80005e86 <.LBB2_82+0x4e>
                ret = pipe.write(addr, len)?;
    80005ba0:	0000                	unimp
    80005ba2:	750e                	ld	a0,224(sp)
    80005ba4:	75ae                	ld	a1,232(sp)
    80005ba6:	20a13023          	sd	a0,512(sp)
    80005baa:	20b13423          	sd	a1,520(sp)
    80005bae:	00006097          	auipc	ra,0x6
    80005bb2:	ebe080e7          	jalr	-322(ra) # 8000ba6c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h6f3e3843c20d184aE>
    80005bb6:	e52a                	sd	a0,136(sp)
    80005bb8:	e92e                	sd	a1,144(sp)
    80005bba:	a009                	j	80005bbc <.LBB2_75+0x70>
    80005bbc:	664a                	ld	a2,144(sp)
    80005bbe:	65aa                	ld	a1,136(sp)
    80005bc0:	650e                	ld	a0,192(sp)
    80005bc2:	00007097          	auipc	ra,0x7
    80005bc6:	4ea080e7          	jalr	1258(ra) # 8000d0ac <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h4dd43adfe00292f6E>
    80005bca:	ac75                	j	80005e86 <.LBB2_82+0x4e>
                if self.major < 0 || 
    80005bcc:	756a                	ld	a0,184(sp)
    80005bce:	02e51503          	lh	a0,46(a0)
    80005bd2:	4581                	li	a1,0
    80005bd4:	02b54863          	blt	a0,a1,80005c04 <.LBB2_75+0xb8>
    80005bd8:	a835                	j	80005c14 <.LBB2_75+0xc8>
    80005bda:	4505                	li	a0,1
    80005bdc:	10a10723          	sb	a0,270(sp)
    80005be0:	a829                	j	80005bfa <.LBB2_75+0xae>
    80005be2:	4501                	li	a0,0
    80005be4:	10a10723          	sb	a0,270(sp)
    80005be8:	a809                	j	80005bfa <.LBB2_75+0xae>
                unsafe{ DEVICE_LIST.table[self.major as usize].write as usize == 0 } {
    80005bea:	756a                	ld	a0,184(sp)
    80005bec:	02e51503          	lh	a0,46(a0)
    80005bf0:	e12a                	sd	a0,128(sp)
    80005bf2:	45a9                	li	a1,10
    80005bf4:	02b56c63          	bltu	a0,a1,80005c2c <.LBB2_75+0xe0>
    80005bf8:	ac61                	j	80005e90 <.LBB2_82+0x58>
                if self.major < 0 || 
    80005bfa:	10e14503          	lbu	a0,270(sp)
    80005bfe:	8905                	andi	a0,a0,1
    80005c00:	e139                	bnez	a0,80005c46 <.LBB2_76+0x14>
    80005c02:	a8a9                	j	80005c5c <.LBB2_77+0x14>
    80005c04:	4505                	li	a0,1
    80005c06:	10a107a3          	sb	a0,271(sp)
    80005c0a:	a821                	j	80005c22 <.LBB2_75+0xd6>
    80005c0c:	4501                	li	a0,0
    80005c0e:	10a107a3          	sb	a0,271(sp)
    80005c12:	a801                	j	80005c22 <.LBB2_75+0xd6>
                self.major as usize >= NDEV || 
    80005c14:	756a                	ld	a0,184(sp)
    80005c16:	02e51583          	lh	a1,46(a0)
    80005c1a:	4525                	li	a0,9
                if self.major < 0 || 
    80005c1c:	feb564e3          	bltu	a0,a1,80005c04 <.LBB2_75+0xb8>
    80005c20:	b7f5                	j	80005c0c <.LBB2_75+0xc0>
    80005c22:	10f14503          	lbu	a0,271(sp)
    80005c26:	8905                	andi	a0,a0,1
    80005c28:	f94d                	bnez	a0,80005bda <.LBB2_75+0x8e>
    80005c2a:	b7c1                	j	80005bea <.LBB2_75+0x9e>
                unsafe{ DEVICE_LIST.table[self.major as usize].write as usize == 0 } {
    80005c2c:	650a                	ld	a0,128(sp)
    80005c2e:	00451593          	slli	a1,a0,0x4

0000000080005c32 <.LBB2_76>:
    80005c32:	0006b517          	auipc	a0,0x6b
    80005c36:	3ce50513          	addi	a0,a0,974 # 80071000 <_ZN6kernel2fs7devices11DEVICE_LIST17h17b7683da24e3570E>
    80005c3a:	952e                	add	a0,a0,a1
    80005c3c:	6508                	ld	a0,8(a0)
    80005c3e:	4581                	li	a1,0
                if self.major < 0 || 
    80005c40:	f8b50de3          	beq	a0,a1,80005bda <.LBB2_75+0x8e>
    80005c44:	bf79                	j	80005be2 <.LBB2_75+0x96>
                    return Err("Fail to write to device")
    80005c46:	658e                	ld	a1,192(sp)

0000000080005c48 <.LBB2_77>:
    80005c48:	00021517          	auipc	a0,0x21
    80005c4c:	92850513          	addi	a0,a0,-1752 # 80026570 <.L__unnamed_17>
    80005c50:	e588                	sd	a0,8(a1)
    80005c52:	455d                	li	a0,23
    80005c54:	e988                	sd	a0,16(a1)
    80005c56:	4505                	li	a0,1
    80005c58:	e188                	sd	a0,0(a1)
    80005c5a:	a435                	j	80005e86 <.LBB2_82+0x4e>
                    DEVICE_LIST.table[self.major as usize].write()
    80005c5c:	756a                	ld	a0,184(sp)
    80005c5e:	02e51583          	lh	a1,46(a0)
    80005c62:	fcae                	sd	a1,120(sp)
    80005c64:	4525                	li	a0,9
    80005c66:	24b56063          	bltu	a0,a1,80005ea6 <.LBB2_83+0x14>
    80005c6a:	a009                	j	80005c6c <.LBB2_77+0x24>
    80005c6c:	7566                	ld	a0,120(sp)
    80005c6e:	0512                	slli	a0,a0,0x4

0000000080005c70 <.LBB2_78>:
    80005c70:	0006b597          	auipc	a1,0x6b
    80005c74:	39058593          	addi	a1,a1,912 # 80071000 <_ZN6kernel2fs7devices11DEVICE_LIST17h17b7683da24e3570E>
    80005c78:	952e                	add	a0,a0,a1
    80005c7a:	fffff097          	auipc	ra,0xfffff
    80005c7e:	664080e7          	jalr	1636(ra) # 800052de <_ZN6kernel2fs7devices6Device5write17hdacd5bd8b779c8b1E>
    80005c82:	85aa                	mv	a1,a0
    80005c84:	f8ae                	sd	a1,112(sp)
    80005c86:	f72a                	sd	a0,424(sp)
    80005c88:	a009                	j	80005c8a <.LBB2_78+0x1a>
                ret = write(true, addr, len).ok_or("Fail to write device")?;
    80005c8a:	76c6                	ld	a3,112(sp)
    80005c8c:	762a                	ld	a2,168(sp)
    80005c8e:	75ca                	ld	a1,176(sp)
    80005c90:	4505                	li	a0,1
    80005c92:	9682                	jalr	a3
    80005c94:	f0aa                	sd	a0,96(sp)
    80005c96:	f4ae                	sd	a1,104(sp)
    80005c98:	a009                	j	80005c9a <.LBB2_78+0x2a>
    80005c9a:	7626                	ld	a2,104(sp)
    80005c9c:	7586                	ld	a1,96(sp)

0000000080005c9e <.LBB2_79>:
    80005c9e:	00021697          	auipc	a3,0x21
    80005ca2:	90268693          	addi	a3,a3,-1790 # 800265a0 <.L__unnamed_18>
    80005ca6:	1228                	addi	a0,sp,296
    80005ca8:	4751                	li	a4,20
    80005caa:	00009097          	auipc	ra,0x9
    80005cae:	a42080e7          	jalr	-1470(ra) # 8000e6ec <_ZN4core6option15Option$LT$T$GT$5ok_or17h436768d7af37ca52E>
    80005cb2:	a009                	j	80005cb4 <.LBB2_79+0x16>
    80005cb4:	0a08                	addi	a0,sp,272
    80005cb6:	122c                	addi	a1,sp,296
    80005cb8:	00007097          	auipc	ra,0x7
    80005cbc:	4c2080e7          	jalr	1218(ra) # 8000d17a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h0dd4a8728df8a7c8E>
    80005cc0:	a009                	j	80005cc2 <.LBB2_79+0x24>
    80005cc2:	6552                	ld	a0,272(sp)
    80005cc4:	4581                	li	a1,0
    80005cc6:	00b50463          	beq	a0,a1,80005cce <.LBB2_79+0x30>
    80005cca:	a009                	j	80005ccc <.LBB2_79+0x2e>
    80005ccc:	a811                	j	80005ce0 <.LBB2_79+0x42>
    80005cce:	658e                	ld	a1,192(sp)
    80005cd0:	6572                	ld	a0,280(sp)
    80005cd2:	e3aa                	sd	a0,448(sp)
    80005cd4:	e9aa                	sd	a0,208(sp)
                Ok(ret)
    80005cd6:	e588                	sd	a0,8(a1)
    80005cd8:	4501                	li	a0,0
    80005cda:	e188                	sd	a0,0(a1)
        match self.ftype {
    80005cdc:	a26d                	j	80005e86 <.LBB2_82+0x4e>
                ret = write(true, addr, len).ok_or("Fail to write device")?;
    80005cde:	0000                	unimp
    80005ce0:	6572                	ld	a0,280(sp)
    80005ce2:	7592                	ld	a1,288(sp)
    80005ce4:	fb2a                	sd	a0,432(sp)
    80005ce6:	ff2e                	sd	a1,440(sp)
    80005ce8:	00006097          	auipc	ra,0x6
    80005cec:	d84080e7          	jalr	-636(ra) # 8000ba6c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h6f3e3843c20d184aE>
    80005cf0:	e8aa                	sd	a0,80(sp)
    80005cf2:	ecae                	sd	a1,88(sp)
    80005cf4:	a009                	j	80005cf6 <.LBB2_79+0x58>
    80005cf6:	6666                	ld	a2,88(sp)
    80005cf8:	65c6                	ld	a1,80(sp)
    80005cfa:	650e                	ld	a0,192(sp)
    80005cfc:	00007097          	auipc	ra,0x7
    80005d00:	3b0080e7          	jalr	944(ra) # 8000d0ac <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h4dd43adfe00292f6E>
    80005d04:	a249                	j	80005e86 <.LBB2_82+0x4e>
    80005d06:	6505                	lui	a0,0x1
    80005d08:	c005051b          	addiw	a0,a0,-1024
                let max = ((MAXOPBLOCKS -1 -1 -2) / 2) * BSIZE;
    80005d0c:	e7aa                	sd	a0,456(sp)
    80005d0e:	4501                	li	a0,0
                let mut count  = 0;
    80005d10:	e2aa                	sd	a0,320(sp)
                while count < len {
    80005d12:	a009                	j	80005d14 <.LBB2_79+0x76>
    80005d14:	75aa                	ld	a1,168(sp)
    80005d16:	6516                	ld	a0,320(sp)
    80005d18:	00b56a63          	bltu	a0,a1,80005d2c <.LBB2_79+0x8e>
    80005d1c:	a009                	j	80005d1e <.LBB2_79+0x80>
                ret = count;
    80005d1e:	658e                	ld	a1,192(sp)
    80005d20:	6516                	ld	a0,320(sp)
    80005d22:	e9aa                	sd	a0,208(sp)
                Ok(ret)
    80005d24:	e588                	sd	a0,8(a1)
    80005d26:	4501                	li	a0,0
    80005d28:	e188                	sd	a0,0(a1)
        match self.ftype {
    80005d2a:	aab1                	j	80005e86 <.LBB2_82+0x4e>
                    let mut write_bytes = len - count;
    80005d2c:	752a                	ld	a0,168(sp)
    80005d2e:	6596                	ld	a1,320(sp)
    80005d30:	40b505b3          	sub	a1,a0,a1
    80005d34:	e4ae                	sd	a1,72(sp)
    80005d36:	18b56363          	bltu	a0,a1,80005ebc <.LBB2_85>
    80005d3a:	a009                	j	80005d3c <.LBB2_79+0x9e>
    80005d3c:	6526                	ld	a0,72(sp)
    80005d3e:	e6aa                	sd	a0,328(sp)
    80005d40:	6585                	lui	a1,0x1
    80005d42:	c015859b          	addiw	a1,a1,-1023
                    if write_bytes > max { write_bytes = max; }
    80005d46:	00b56863          	bltu	a0,a1,80005d56 <.LBB2_79+0xb8>
    80005d4a:	a009                	j	80005d4c <.LBB2_79+0xae>
    80005d4c:	6505                	lui	a0,0x1
    80005d4e:	c005051b          	addiw	a0,a0,-1024
    80005d52:	e6aa                	sd	a0,328(sp)
    80005d54:	a011                	j	80005d58 <.LBB2_80>
    80005d56:	a009                	j	80005d58 <.LBB2_80>

0000000080005d58 <.LBB2_80>:
                    LOG.begin_op();
    80005d58:	00062517          	auipc	a0,0x62
    80005d5c:	c9050513          	addi	a0,a0,-880 # 800679e8 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    80005d60:	00003097          	auipc	ra,0x3
    80005d64:	e52080e7          	jalr	-430(ra) # 80008bb2 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$8begin_op17he5b49a48c716e372E>
    80005d68:	a009                	j	80005d6a <.LBB2_80+0x12>
                    let inode = self.inode.as_ref().unwrap();
    80005d6a:	756a                	ld	a0,184(sp)
    80005d6c:	0541                	addi	a0,a0,16
    80005d6e:	00009097          	auipc	ra,0x9
    80005d72:	cfe080e7          	jalr	-770(ra) # 8000ea6c <_ZN4core6option15Option$LT$T$GT$6as_ref17h883d1380e87d3449E>
    80005d76:	e0aa                	sd	a0,64(sp)
    80005d78:	a009                	j	80005d7a <.LBB2_80+0x22>
    80005d7a:	6506                	ld	a0,64(sp)

0000000080005d7c <.LBB2_81>:
    80005d7c:	00021597          	auipc	a1,0x21
    80005d80:	87c58593          	addi	a1,a1,-1924 # 800265f8 <.L__unnamed_19>
    80005d84:	00009097          	auipc	ra,0x9
    80005d88:	034080e7          	jalr	52(ra) # 8000edb8 <_ZN4core6option15Option$LT$T$GT$6unwrap17h8e9f6f5582436d22E>
    80005d8c:	85aa                	mv	a1,a0
    80005d8e:	fc2e                	sd	a1,56(sp)
    80005d90:	ebaa                	sd	a0,464(sp)
    80005d92:	a009                	j	80005d94 <.LBB2_81+0x18>
                    let mut inode_guard = inode.lock();
    80005d94:	7562                	ld	a0,56(sp)
    80005d96:	00015097          	auipc	ra,0x15
    80005d9a:	120080e7          	jalr	288(ra) # 8001aeb6 <_ZN6kernel2fs5inode5Inode4lock17he70970c593f751adE>
    80005d9e:	eaaa                	sd	a0,336(sp)
    80005da0:	eeae                	sd	a1,344(sp)
    80005da2:	a009                	j	80005da4 <.LBB2_81+0x28>
    80005da4:	0a88                	addi	a0,sp,336
                    inode_guard.write(
    80005da6:	00018097          	auipc	ra,0x18
    80005daa:	93c080e7          	jalr	-1732(ra) # 8001d6e2 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    80005dae:	f82a                	sd	a0,48(sp)
    80005db0:	a009                	j	80005db2 <.LBB2_81+0x36>
                        addr + count, 
    80005db2:	75ca                	ld	a1,176(sp)
    80005db4:	6516                	ld	a0,320(sp)
    80005db6:	952e                	add	a0,a0,a1
    80005db8:	f42a                	sd	a0,40(sp)
    80005dba:	12b56063          	bltu	a0,a1,80005eda <.LBB2_87>
    80005dbe:	a009                	j	80005dc0 <.LBB2_81+0x44>
                        write_bytes as u32
    80005dc0:	76a2                	ld	a3,40(sp)
    80005dc2:	75c2                	ld	a1,48(sp)
    80005dc4:	756a                	ld	a0,184(sp)
    80005dc6:	67b6                	ld	a5,328(sp)
                    inode_guard.write(
    80005dc8:	5518                	lw	a4,40(a0)
    80005dca:	1aa8                	addi	a0,sp,376
    80005dcc:	4605                	li	a2,1
    80005dce:	00015097          	auipc	ra,0x15
    80005dd2:	84a080e7          	jalr	-1974(ra) # 8001a618 <_ZN6kernel2fs5inode9InodeData5write17h219447b865f1c381E>
    80005dd6:	a009                	j	80005dd8 <.LBB2_81+0x5c>
    80005dd8:	1288                	addi	a0,sp,352
    80005dda:	1aac                	addi	a1,sp,376
    80005ddc:	00007097          	auipc	ra,0x7
    80005de0:	39e080e7          	jalr	926(ra) # 8000d17a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h0dd4a8728df8a7c8E>
    80005de4:	a009                	j	80005de6 <.LBB2_81+0x6a>
                    )?;
    80005de6:	7516                	ld	a0,352(sp)
    80005de8:	4581                	li	a1,0
    80005dea:	00b50463          	beq	a0,a1,80005df2 <.LBB2_81+0x76>
    80005dee:	a009                	j	80005df0 <.LBB2_81+0x74>
    80005df0:	a819                	j	80005e06 <.LBB2_81+0x8a>
                    inode_guard.write(
    80005df2:	7536                	ld	a0,360(sp)
    80005df4:	f7aa                	sd	a0,488(sp)
                    drop(inode_guard);
    80005df6:	6556                	ld	a0,336(sp)
    80005df8:	65f6                	ld	a1,344(sp)
    80005dfa:	00017097          	auipc	ra,0x17
    80005dfe:	26e080e7          	jalr	622(ra) # 8001d068 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    80005e02:	a81d                	j	80005e38 <.LBB2_82>
                    inode_guard.write(
    80005e04:	0000                	unimp
                    )?;
    80005e06:	7536                	ld	a0,360(sp)
    80005e08:	75d6                	ld	a1,368(sp)
    80005e0a:	efaa                	sd	a0,472(sp)
    80005e0c:	f3ae                	sd	a1,480(sp)
    80005e0e:	00006097          	auipc	ra,0x6
    80005e12:	c5e080e7          	jalr	-930(ra) # 8000ba6c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h6f3e3843c20d184aE>
    80005e16:	ec2a                	sd	a0,24(sp)
    80005e18:	f02e                	sd	a1,32(sp)
    80005e1a:	a009                	j	80005e1c <.LBB2_81+0xa0>
                    inode_guard.write(
    80005e1c:	7602                	ld	a2,32(sp)
    80005e1e:	65e2                	ld	a1,24(sp)
    80005e20:	650e                	ld	a0,192(sp)
    80005e22:	00007097          	auipc	ra,0x7
    80005e26:	28a080e7          	jalr	650(ra) # 8000d0ac <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h4dd43adfe00292f6E>
    80005e2a:	a009                	j	80005e2c <.LBB2_81+0xb0>
    80005e2c:	0a88                	addi	a0,sp,336
                }
    80005e2e:	00001097          	auipc	ra,0x1
    80005e32:	23e080e7          	jalr	574(ra) # 8000706c <_ZN4core3ptr96drop_in_place$LT$kernel..lock..sleeplock..SleepLockGuard$LT$kernel..fs..inode..InodeData$GT$$GT$17h00d5c02cf687ef41E>
    80005e36:	a881                	j	80005e86 <.LBB2_82+0x4e>

0000000080005e38 <.LBB2_82>:
                    LOG.end_op();
    80005e38:	00062517          	auipc	a0,0x62
    80005e3c:	bb050513          	addi	a0,a0,-1104 # 800679e8 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    80005e40:	00003097          	auipc	ra,0x3
    80005e44:	358080e7          	jalr	856(ra) # 80009198 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>
    80005e48:	a009                	j	80005e4a <.LBB2_82+0x12>
                    let offset = unsafe{ &mut *(&self.offset as *const _ as *mut u32) };
    80005e4a:	756a                	ld	a0,184(sp)
    80005e4c:	02850593          	addi	a1,a0,40
    80005e50:	e42e                	sd	a1,8(sp)
    80005e52:	fbae                	sd	a1,496(sp)
                    *offset += write_bytes as u32;
    80005e54:	14816583          	lwu	a1,328(sp)
    80005e58:	02856503          	lwu	a0,40(a0)
    80005e5c:	95aa                	add	a1,a1,a0
    80005e5e:	e82e                	sd	a1,16(sp)
    80005e60:	02059513          	slli	a0,a1,0x20
    80005e64:	9101                	srli	a0,a0,0x20
    80005e66:	08b51863          	bne	a0,a1,80005ef6 <.LBB2_89>
    80005e6a:	a009                	j	80005e6c <.LBB2_82+0x34>
    80005e6c:	6542                	ld	a0,16(sp)
    80005e6e:	65a2                	ld	a1,8(sp)
    80005e70:	c188                	sw	a0,0(a1)
                    count += write_bytes;
    80005e72:	6536                	ld	a0,328(sp)
    80005e74:	6596                	ld	a1,320(sp)
    80005e76:	952e                	add	a0,a0,a1
    80005e78:	e02a                	sd	a0,0(sp)
    80005e7a:	08b56c63          	bltu	a0,a1,80005f12 <.LBB2_91>
    80005e7e:	a009                	j	80005e80 <.LBB2_82+0x48>
    80005e80:	6502                	ld	a0,0(sp)
    80005e82:	e2aa                	sd	a0,320(sp)
                while count < len {
    80005e84:	bd41                	j	80005d14 <.LBB2_79+0x76>
            }
        }

    }
    80005e86:	21813083          	ld	ra,536(sp)
    80005e8a:	22010113          	addi	sp,sp,544
    80005e8e:	8082                	ret
                unsafe{ DEVICE_LIST.table[self.major as usize].write as usize == 0 } {
    80005e90:	650a                	ld	a0,128(sp)

0000000080005e92 <.LBB2_83>:
    80005e92:	00020617          	auipc	a2,0x20
    80005e96:	6c660613          	addi	a2,a2,1734 # 80026558 <.L__unnamed_20>
    80005e9a:	45a9                	li	a1,10
    80005e9c:	0001c097          	auipc	ra,0x1c
    80005ea0:	406080e7          	jalr	1030(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80005ea4:	0000                	unimp
                    DEVICE_LIST.table[self.major as usize].write()
    80005ea6:	7566                	ld	a0,120(sp)

0000000080005ea8 <.LBB2_84>:
    80005ea8:	00020617          	auipc	a2,0x20
    80005eac:	6e060613          	addi	a2,a2,1760 # 80026588 <.L__unnamed_21>
    80005eb0:	45a9                	li	a1,10
    80005eb2:	0001c097          	auipc	ra,0x1c
    80005eb6:	3f0080e7          	jalr	1008(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

0000000080005ebc <.LBB2_85>:
                    let mut write_bytes = len - count;
    80005ebc:	00020517          	auipc	a0,0x20
    80005ec0:	71450513          	addi	a0,a0,1812 # 800265d0 <str.1>

0000000080005ec4 <.LBB2_86>:
    80005ec4:	00020617          	auipc	a2,0x20
    80005ec8:	6f460613          	addi	a2,a2,1780 # 800265b8 <.L__unnamed_22>
    80005ecc:	02100593          	li	a1,33
    80005ed0:	0001c097          	auipc	ra,0x1c
    80005ed4:	3a6080e7          	jalr	934(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080005eda <.LBB2_87>:
                        addr + count, 
    80005eda:	00020517          	auipc	a0,0x20
    80005ede:	5e650513          	addi	a0,a0,1510 # 800264c0 <str.0>

0000000080005ee2 <.LBB2_88>:
    80005ee2:	00020617          	auipc	a2,0x20
    80005ee6:	72e60613          	addi	a2,a2,1838 # 80026610 <.L__unnamed_23>
    80005eea:	45f1                	li	a1,28
    80005eec:	0001c097          	auipc	ra,0x1c
    80005ef0:	38a080e7          	jalr	906(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080005ef6 <.LBB2_89>:
                    *offset += write_bytes as u32;
    80005ef6:	00020517          	auipc	a0,0x20
    80005efa:	5ca50513          	addi	a0,a0,1482 # 800264c0 <str.0>

0000000080005efe <.LBB2_90>:
    80005efe:	00020617          	auipc	a2,0x20
    80005f02:	72a60613          	addi	a2,a2,1834 # 80026628 <.L__unnamed_24>
    80005f06:	45f1                	li	a1,28
    80005f08:	0001c097          	auipc	ra,0x1c
    80005f0c:	36e080e7          	jalr	878(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080005f12 <.LBB2_91>:
                    count += write_bytes;
    80005f12:	00020517          	auipc	a0,0x20
    80005f16:	5ae50513          	addi	a0,a0,1454 # 800264c0 <str.0>

0000000080005f1a <.LBB2_92>:
    80005f1a:	00020617          	auipc	a2,0x20
    80005f1e:	72660613          	addi	a2,a2,1830 # 80026640 <.L__unnamed_25>
    80005f22:	45f1                	li	a1,28
    80005f24:	0001c097          	auipc	ra,0x1c
    80005f28:	352080e7          	jalr	850(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel2fs4file5VFile8readable17h4e596856d12086d6E:

0000000080005f2e <_ZN6kernel2fs4file5VFile8readable17h4e596856d12086d6E>:

    fn readable(&self) -> bool {
    80005f2e:	1141                	addi	sp,sp,-16
    80005f30:	e42a                	sd	a0,8(sp)
        self.readable
    80005f32:	03054503          	lbu	a0,48(a0)
    }
    80005f36:	0141                	addi	sp,sp,16
    80005f38:	8082                	ret

Disassembly of section .text._ZN6kernel2fs4file5VFile9writeable17h876bce4459deb027E:

0000000080005f3a <_ZN6kernel2fs4file5VFile9writeable17h876bce4459deb027E>:

    fn writeable(&self) -> bool {
    80005f3a:	1141                	addi	sp,sp,-16
    80005f3c:	e42a                	sd	a0,8(sp)
        self.writeable
    80005f3e:	03154503          	lbu	a0,49(a0)
    }
    80005f42:	0141                	addi	sp,sp,16
    80005f44:	8082                	ret

Disassembly of section .text._ZN6kernel2fs4file5VFile4stat17heebdb0d64a039b86E:

0000000080005f46 <_ZN6kernel2fs4file5VFile4stat17heebdb0d64a039b86E>:

    /// Get metadata about file f. 
    /// addr is a user virtual address, pointing to a struct stat. 
    pub fn stat(&self, addr: usize) -> Result<(), &'static str> {
    80005f46:	7111                	addi	sp,sp,-256
    80005f48:	fd86                	sd	ra,248(sp)
    80005f4a:	ecae                	sd	a1,88(sp)
    80005f4c:	f0aa                	sd	a0,96(sp)
    80005f4e:	fd2a                	sd	a0,184(sp)
    80005f50:	e1ae                	sd	a1,192(sp)

0000000080005f52 <.LBB5_21>:
        let p = unsafe{ CPU_MANAGER.myproc().unwrap() };
    80005f52:	0006d517          	auipc	a0,0x6d
    80005f56:	1ee50513          	addi	a0,a0,494 # 80073140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    80005f5a:	0000c097          	auipc	ra,0xc
    80005f5e:	ea4080e7          	jalr	-348(ra) # 80011dfe <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    80005f62:	f4aa                	sd	a0,104(sp)
    80005f64:	a009                	j	80005f66 <.LBB5_21+0x14>
    80005f66:	7526                	ld	a0,104(sp)

0000000080005f68 <.LBB5_22>:
    80005f68:	00020597          	auipc	a1,0x20
    80005f6c:	70858593          	addi	a1,a1,1800 # 80026670 <.L__unnamed_26>
    80005f70:	00009097          	auipc	ra,0x9
    80005f74:	ddc080e7          	jalr	-548(ra) # 8000ed4c <_ZN4core6option15Option$LT$T$GT$6unwrap17h81f0c84c54a80648E>
    80005f78:	e8aa                	sd	a0,80(sp)
    80005f7a:	a009                	j	80005f7c <.LBB5_22+0x14>
    80005f7c:	6546                	ld	a0,80(sp)
    80005f7e:	e9aa                	sd	a0,208(sp)
    80005f80:	0108                	addi	a0,sp,128
        let mut stat: Stat = Stat::new();
    80005f82:	00018097          	auipc	ra,0x18
    80005f86:	75c080e7          	jalr	1884(ra) # 8001e6de <_ZN6kernel2fs4stat4Stat3new17h349e191f39203f6dE>
    80005f8a:	a009                	j	80005f8c <.LBB5_22+0x24>
        match self.ftype {
            FileType::Device | FileType::Inode => {
    80005f8c:	7506                	ld	a0,96(sp)
    80005f8e:	02c51503          	lh	a0,44(a0)
    80005f92:	1579                	addi	a0,a0,-2
    80005f94:	65c1                	lui	a1,0x10
    80005f96:	35fd                	addiw	a1,a1,-1
    80005f98:	8d6d                	and	a0,a0,a1
    80005f9a:	4589                	li	a1,2
    80005f9c:	00b56b63          	bltu	a0,a1,80005fb2 <.LBB5_23+0x10>
    80005fa0:	a009                	j	80005fa2 <.LBB5_23>

0000000080005fa2 <.LBB5_23>:
                page_table.copy_out(addr, (&stat) as *const Stat as *const u8, size_of::<Stat>())?;
                Ok(())
            },  

            _ => {
                Err("")
    80005fa2:	00020517          	auipc	a0,0x20
    80005fa6:	6e650513          	addi	a0,a0,1766 # 80026688 <.L__unnamed_28>
    80005faa:	f8aa                	sd	a0,112(sp)
    80005fac:	4501                	li	a0,0
    80005fae:	fcaa                	sd	a0,120(sp)
        match self.ftype {
    80005fb0:	a8f1                	j	8000608c <.LBB5_24+0xc8>
                let inode = self.inode.as_ref().unwrap();
    80005fb2:	7506                	ld	a0,96(sp)
    80005fb4:	0541                	addi	a0,a0,16
    80005fb6:	00009097          	auipc	ra,0x9
    80005fba:	ab6080e7          	jalr	-1354(ra) # 8000ea6c <_ZN4core6option15Option$LT$T$GT$6as_ref17h883d1380e87d3449E>
    80005fbe:	e4aa                	sd	a0,72(sp)
    80005fc0:	a009                	j	80005fc2 <.LBB5_23+0x20>
    80005fc2:	6526                	ld	a0,72(sp)

0000000080005fc4 <.LBB5_24>:
    80005fc4:	00020597          	auipc	a1,0x20
    80005fc8:	6c458593          	addi	a1,a1,1732 # 80026688 <.L__unnamed_28>
    80005fcc:	00009097          	auipc	ra,0x9
    80005fd0:	dec080e7          	jalr	-532(ra) # 8000edb8 <_ZN4core6option15Option$LT$T$GT$6unwrap17h8e9f6f5582436d22E>
    80005fd4:	85aa                	mv	a1,a0
    80005fd6:	e0ae                	sd	a1,64(sp)
    80005fd8:	edaa                	sd	a0,216(sp)
    80005fda:	a009                	j	80005fdc <.LBB5_24+0x18>
                let inode_guard = inode.lock();
    80005fdc:	6506                	ld	a0,64(sp)
    80005fde:	00015097          	auipc	ra,0x15
    80005fe2:	ed8080e7          	jalr	-296(ra) # 8001aeb6 <_ZN6kernel2fs5inode5Inode4lock17he70970c593f751adE>
    80005fe6:	ed2a                	sd	a0,152(sp)
    80005fe8:	f12e                	sd	a1,160(sp)
    80005fea:	a009                	j	80005fec <.LBB5_24+0x28>
    80005fec:	0928                	addi	a0,sp,152
                inode_guard.stat(&mut stat);
    80005fee:	00017097          	auipc	ra,0x17
    80005ff2:	6e0080e7          	jalr	1760(ra) # 8001d6ce <_ZN92_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfc7812d7ca7ab1e1E>
    80005ff6:	fc2a                	sd	a0,56(sp)
    80005ff8:	a009                	j	80005ffa <.LBB5_24+0x36>
    80005ffa:	7562                	ld	a0,56(sp)
    80005ffc:	010c                	addi	a1,sp,128
    80005ffe:	00014097          	auipc	ra,0x14
    80006002:	d14080e7          	jalr	-748(ra) # 80019d12 <_ZN6kernel2fs5inode9InodeData4stat17h1253d1c76b7156e3E>
    80006006:	a009                	j	80006008 <.LBB5_24+0x44>
                drop(inode_guard);
    80006008:	656a                	ld	a0,152(sp)
    8000600a:	758a                	ld	a1,160(sp)
    8000600c:	00017097          	auipc	ra,0x17
    80006010:	05c080e7          	jalr	92(ra) # 8001d068 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    80006014:	a009                	j	80006016 <.LBB5_24+0x52>
                let page_table = unsafe { &mut *p.pagetable };
    80006016:	6546                	ld	a0,80(sp)
    80006018:	6d08                	ld	a0,24(a0)
    8000601a:	f42a                	sd	a0,40(sp)
    8000601c:	f1aa                	sd	a0,224(sp)
    8000601e:	0108                	addi	a0,sp,128
                page_table.copy_out(addr, (&stat) as *const Stat as *const u8, size_of::<Stat>())?;
    80006020:	f82a                	sd	a0,48(sp)
    80006022:	a009                	j	80006024 <.LBB5_24+0x60>
    80006024:	7642                	ld	a2,48(sp)
    80006026:	65e6                	ld	a1,88(sp)
    80006028:	7522                	ld	a0,40(sp)
    8000602a:	46e1                	li	a3,24
    8000602c:	00012097          	auipc	ra,0x12
    80006030:	b9c080e7          	jalr	-1124(ra) # 80017bc8 <_ZN6kernel6memory7mapping10page_table9PageTable8copy_out17h55d0f27ee3680817E>
    80006034:	ec2a                	sd	a0,24(sp)
    80006036:	f02e                	sd	a1,32(sp)
    80006038:	a009                	j	8000603a <.LBB5_24+0x76>
    8000603a:	7582                	ld	a1,32(sp)
    8000603c:	6562                	ld	a0,24(sp)
    8000603e:	00007097          	auipc	ra,0x7
    80006042:	1c8080e7          	jalr	456(ra) # 8000d206 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hb12176fc822fec8fE>
    80006046:	f52a                	sd	a0,168(sp)
    80006048:	f92e                	sd	a1,176(sp)
    8000604a:	a009                	j	8000604c <.LBB5_24+0x88>
    8000604c:	752a                	ld	a0,168(sp)
    8000604e:	00a035b3          	snez	a1,a0
    80006052:	4581                	li	a1,0
    80006054:	00b50463          	beq	a0,a1,8000605c <.LBB5_24+0x98>
    80006058:	a009                	j	8000605a <.LBB5_24+0x96>
    8000605a:	a029                	j	80006064 <.LBB5_24+0xa0>
    8000605c:	4501                	li	a0,0
                Ok(())
    8000605e:	f8aa                	sd	a0,112(sp)
        match self.ftype {
    80006060:	a035                	j	8000608c <.LBB5_24+0xc8>
                page_table.copy_out(addr, (&stat) as *const Stat as *const u8, size_of::<Stat>())?;
    80006062:	0000                	unimp
    80006064:	752a                	ld	a0,168(sp)
    80006066:	75ca                	ld	a1,176(sp)
    80006068:	f5aa                	sd	a0,232(sp)
    8000606a:	f9ae                	sd	a1,240(sp)
    8000606c:	00006097          	auipc	ra,0x6
    80006070:	a00080e7          	jalr	-1536(ra) # 8000ba6c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h6f3e3843c20d184aE>
    80006074:	e42a                	sd	a0,8(sp)
    80006076:	e82e                	sd	a1,16(sp)
    80006078:	a009                	j	8000607a <.LBB5_24+0xb6>
    8000607a:	65c2                	ld	a1,16(sp)
    8000607c:	6522                	ld	a0,8(sp)
    8000607e:	00007097          	auipc	ra,0x7
    80006082:	0a4080e7          	jalr	164(ra) # 8000d122 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h9d11a50f8e490b2eE>
    80006086:	f8aa                	sd	a0,112(sp)
    80006088:	fcae                	sd	a1,120(sp)
    8000608a:	a009                	j	8000608c <.LBB5_24+0xc8>
            }
        }
    }
    8000608c:	7546                	ld	a0,112(sp)
    8000608e:	75e6                	ld	a1,120(sp)
    80006090:	70ee                	ld	ra,248(sp)
    80006092:	6111                	addi	sp,sp,256
    80006094:	8082                	ret

Disassembly of section .text._ZN65_$LT$kernel..fs..file..FileType$u20$as$u20$core..clone..Clone$GT$5clone17h2bafaf47cccef03cE:

0000000080006096 <_ZN65_$LT$kernel..fs..file..FileType$u20$as$u20$core..clone..Clone$GT$5clone17h2bafaf47cccef03cE>:
#[derive(Clone, Copy, Debug, PartialEq)]
    80006096:	1141                	addi	sp,sp,-16
    80006098:	e42a                	sd	a0,8(sp)
    8000609a:	00051503          	lh	a0,0(a0)
    8000609e:	0141                	addi	sp,sp,16
    800060a0:	8082                	ret

Disassembly of section .text._ZN62_$LT$kernel..fs..file..VFile$u20$as$u20$core..clone..Clone$GT$5clone17hec76716ecfa94dd4E:

00000000800060a2 <_ZN62_$LT$kernel..fs..file..VFile$u20$as$u20$core..clone..Clone$GT$5clone17hec76716ecfa94dd4E>:
#[derive(Clone, Debug)]
    800060a2:	7115                	addi	sp,sp,-224
    800060a4:	ed86                	sd	ra,216(sp)
    800060a6:	fc2e                	sd	a1,56(sp)
    800060a8:	e0aa                	sd	a0,64(sp)
    800060aa:	ed2e                	sd	a1,152(sp)
    pub(crate) ftype: FileType,
    800060ac:	02c58513          	addi	a0,a1,44
    800060b0:	f12a                	sd	a0,160(sp)
    pub(crate) readable: bool,
    800060b2:	03058613          	addi	a2,a1,48
    800060b6:	e4b2                	sd	a2,72(sp)
    800060b8:	f532                	sd	a2,168(sp)
    pub(crate) writeable: bool,
    800060ba:	03158613          	addi	a2,a1,49
    800060be:	e8b2                	sd	a2,80(sp)
    800060c0:	f932                	sd	a2,176(sp)
    pub(crate) pipe: Option<*mut Pipe>,
    800060c2:	862e                	mv	a2,a1
    800060c4:	ecb2                	sd	a2,88(sp)
    800060c6:	fd2e                	sd	a1,184(sp)
    pub(crate) inode: Option<Inode>,
    800060c8:	01058613          	addi	a2,a1,16
    800060cc:	f0b2                	sd	a2,96(sp)
    800060ce:	e1b2                	sd	a2,192(sp)
    pub(crate) offset: u32,
    800060d0:	02858613          	addi	a2,a1,40
    800060d4:	f4b2                	sd	a2,104(sp)
    800060d6:	e5b2                	sd	a2,200(sp)
    pub(crate) major: i16
    800060d8:	02e58593          	addi	a1,a1,46
    800060dc:	f8ae                	sd	a1,112(sp)
    800060de:	e9ae                	sd	a1,208(sp)
    pub(crate) ftype: FileType,
    800060e0:	00000097          	auipc	ra,0x0
    800060e4:	fb6080e7          	jalr	-74(ra) # 80006096 <_ZN65_$LT$kernel..fs..file..FileType$u20$as$u20$core..clone..Clone$GT$5clone17h2bafaf47cccef03cE>
    800060e8:	65c1                	lui	a1,0x10
    800060ea:	35fd                	addiw	a1,a1,-1
    800060ec:	8d6d                	and	a0,a0,a1
    800060ee:	fcaa                	sd	a0,120(sp)
    800060f0:	a009                	j	800060f2 <_ZN62_$LT$kernel..fs..file..VFile$u20$as$u20$core..clone..Clone$GT$5clone17hec76716ecfa94dd4E+0x50>
    pub(crate) readable: bool,
    800060f2:	6526                	ld	a0,72(sp)
    800060f4:	00017097          	auipc	ra,0x17
    800060f8:	718080e7          	jalr	1816(ra) # 8001d80c <_ZN4core5clone5impls53_$LT$impl$u20$core..clone..Clone$u20$for$u20$bool$GT$5clone17hd6e1e19c635da345E>
    800060fc:	f82a                	sd	a0,48(sp)
    800060fe:	a009                	j	80006100 <_ZN62_$LT$kernel..fs..file..VFile$u20$as$u20$core..clone..Clone$GT$5clone17hec76716ecfa94dd4E+0x5e>
    pub(crate) writeable: bool,
    80006100:	6546                	ld	a0,80(sp)
    80006102:	00017097          	auipc	ra,0x17
    80006106:	70a080e7          	jalr	1802(ra) # 8001d80c <_ZN4core5clone5impls53_$LT$impl$u20$core..clone..Clone$u20$for$u20$bool$GT$5clone17hd6e1e19c635da345E>
    8000610a:	f42a                	sd	a0,40(sp)
    8000610c:	a009                	j	8000610e <_ZN62_$LT$kernel..fs..file..VFile$u20$as$u20$core..clone..Clone$GT$5clone17hec76716ecfa94dd4E+0x6c>
    pub(crate) pipe: Option<*mut Pipe>,
    8000610e:	6566                	ld	a0,88(sp)
    80006110:	00009097          	auipc	ra,0x9
    80006114:	002080e7          	jalr	2(ra) # 8000f112 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h5a88c6bc858442feE>
    80006118:	ec2a                	sd	a0,24(sp)
    8000611a:	f02e                	sd	a1,32(sp)
    8000611c:	a009                	j	8000611e <_ZN62_$LT$kernel..fs..file..VFile$u20$as$u20$core..clone..Clone$GT$5clone17hec76716ecfa94dd4E+0x7c>
    pub(crate) inode: Option<Inode>,
    8000611e:	7586                	ld	a1,96(sp)
    80006120:	0108                	addi	a0,sp,128
    80006122:	00009097          	auipc	ra,0x9
    80006126:	032080e7          	jalr	50(ra) # 8000f154 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h97a616a53917bc2aE>
    8000612a:	a009                	j	8000612c <_ZN62_$LT$kernel..fs..file..VFile$u20$as$u20$core..clone..Clone$GT$5clone17hec76716ecfa94dd4E+0x8a>
    pub(crate) offset: u32,
    8000612c:	7526                	ld	a0,104(sp)
    8000612e:	00017097          	auipc	ra,0x17
    80006132:	6d4080e7          	jalr	1748(ra) # 8001d802 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17ha1019ce9fdc4d620E>
    80006136:	e82a                	sd	a0,16(sp)
    80006138:	a009                	j	8000613a <_ZN62_$LT$kernel..fs..file..VFile$u20$as$u20$core..clone..Clone$GT$5clone17hec76716ecfa94dd4E+0x98>
    pub(crate) major: i16
    8000613a:	7546                	ld	a0,112(sp)
    8000613c:	00017097          	auipc	ra,0x17
    80006140:	6ae080e7          	jalr	1710(ra) # 8001d7ea <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$i16$GT$5clone17h91da98197f473cc1E>
    80006144:	e42a                	sd	a0,8(sp)
    80006146:	a009                	j	80006148 <_ZN62_$LT$kernel..fs..file..VFile$u20$as$u20$core..clone..Clone$GT$5clone17hec76716ecfa94dd4E+0xa6>
#[derive(Clone, Debug)]
    80006148:	6522                	ld	a0,8(sp)
    8000614a:	6586                	ld	a1,64(sp)
    8000614c:	6642                	ld	a2,16(sp)
    8000614e:	7682                	ld	a3,32(sp)
    80006150:	6762                	ld	a4,24(sp)
    80006152:	77a2                	ld	a5,40(sp)
    80006154:	7842                	ld	a6,48(sp)
    80006156:	78e6                	ld	a7,120(sp)
    80006158:	03159623          	sh	a7,44(a1) # 1002c <.Lline_table_start0+0x72a>
    8000615c:	03058823          	sb	a6,48(a1)
    80006160:	02f588a3          	sb	a5,49(a1)
    80006164:	e198                	sd	a4,0(a1)
    80006166:	e594                	sd	a3,8(a1)
    80006168:	668a                	ld	a3,128(sp)
    8000616a:	e994                	sd	a3,16(a1)
    8000616c:	66aa                	ld	a3,136(sp)
    8000616e:	ed94                	sd	a3,24(a1)
    80006170:	66ca                	ld	a3,144(sp)
    80006172:	f194                	sd	a3,32(a1)
    80006174:	d590                	sw	a2,40(a1)
    80006176:	02a59723          	sh	a0,46(a1)
    8000617a:	60ee                	ld	ra,216(sp)
    8000617c:	612d                	addi	sp,sp,224
    8000617e:	8082                	ret

Disassembly of section .text._ZN6kernel4trap14trap_init_hart17h35cf9f3a8bf40f94E:

0000000080006180 <_ZN6kernel4trap14trap_init_hart17h35cf9f3a8bf40f94E>:
use super::*;

pub static mut TICKS_LOCK:Spinlock<usize> = Spinlock::new(0, "time");

/// Set up to take exceptions and traps while in the kernel.
pub unsafe fn trap_init_hart() {
    80006180:	1141                	addi	sp,sp,-16
    extern "C" {
        fn kernelvec();
    }
    stvec::write(kernelvec as usize);
    80006182:	e406                	sd	ra,8(sp)

0000000080006184 <.LBB0_2>:
    80006184:	ffffa517          	auipc	a0,0xffffa
    80006188:	e9c50513          	addi	a0,a0,-356 # 80000020 <kernelvec>
    8000618c:	00006097          	auipc	ra,0x6
    80006190:	b6e080e7          	jalr	-1170(ra) # 8000bcfa <_ZN6kernel4arch5riscv8register5stvec5write17ha770434f21f9bf27E>
    80006194:	a009                	j	80006196 <.LBB0_2+0x12>
}
    80006196:	60a2                	ld	ra,8(sp)
    80006198:	0141                	addi	sp,sp,16
    8000619a:	8082                	ret

Disassembly of section .text.user_trap:

000000008000619c <user_trap>:


/// handle an interrupt, exception, or system call from user space.
/// called from trampoline.S
#[no_mangle]
pub unsafe fn user_trap() {
    8000619c:	7101                	addi	sp,sp,-512
    let sepc = sepc::read();
    8000619e:	ff86                	sd	ra,504(sp)
    800061a0:	fffff097          	auipc	ra,0xfffff
    800061a4:	a2e080e7          	jalr	-1490(ra) # 80004bce <_ZN6kernel4arch5riscv8register4sepc4read17hcaa3e2a818646c19E>
    800061a8:	e1aa                	sd	a0,192(sp)
    800061aa:	a009                	j	800061ac <user_trap+0x10>
    let scause = Scause::new(scause::read());
    800061ac:	00002097          	auipc	ra,0x2
    800061b0:	994080e7          	jalr	-1644(ra) # 80007b40 <_ZN6kernel4arch5riscv8register6scause4read17h6f388cd664aa7885E>
    800061b4:	fd2a                	sd	a0,184(sp)
    800061b6:	a009                	j	800061b8 <user_trap+0x1c>
    800061b8:	756a                	ld	a0,184(sp)
    800061ba:	00002097          	auipc	ra,0x2
    800061be:	a86080e7          	jalr	-1402(ra) # 80007c40 <_ZN6kernel4arch5riscv8register6scause6Scause3new17hf1aad0ee6c83efd3E>
    800061c2:	e5aa                	sd	a0,200(sp)
    800061c4:	a009                	j	800061c6 <user_trap+0x2a>

    if !sstatus::is_from_user() {
    800061c6:	00018097          	auipc	ra,0x18
    800061ca:	15e080e7          	jalr	350(ra) # 8001e324 <_ZN6kernel4arch5riscv8register7sstatus12is_from_user17hfa7a30a57661c561E>
    800061ce:	f92a                	sd	a0,176(sp)
    800061d0:	a009                	j	800061d2 <user_trap+0x36>
    800061d2:	754a                	ld	a0,176(sp)
    800061d4:	e105                	bnez	a0,800061f4 <.LBB1_67>
    800061d6:	a009                	j	800061d8 <.LBB1_65>

00000000800061d8 <.LBB1_65>:
        panic!("user_trap(): not from user mode");
    800061d8:	00020517          	auipc	a0,0x20
    800061dc:	54c50513          	addi	a0,a0,1356 # 80026724 <.L__unnamed_1>

00000000800061e0 <.LBB1_66>:
    800061e0:	00020617          	auipc	a2,0x20
    800061e4:	57060613          	addi	a2,a2,1392 # 80026750 <.L__unnamed_2>
    800061e8:	45fd                	li	a1,31
    800061ea:	0001c097          	auipc	ra,0x1c
    800061ee:	08c080e7          	jalr	140(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

00000000800061f4 <.LBB1_67>:
    // send interrupts and exceptions to kerneltrap(),
    // since we're now in the kernel.
    extern "C" {
        fn kernelvec();
    }
    stvec::write(kernelvec as usize);
    800061f4:	ffffa517          	auipc	a0,0xffffa
    800061f8:	e2c50513          	addi	a0,a0,-468 # 80000020 <kernelvec>
    800061fc:	00006097          	auipc	ra,0x6
    80006200:	afe080e7          	jalr	-1282(ra) # 8000bcfa <_ZN6kernel4arch5riscv8register5stvec5write17ha770434f21f9bf27E>
    80006204:	a009                	j	80006206 <.LBB1_68>

0000000080006206 <.LBB1_68>:

    let my_proc = CPU_MANAGER.myproc().unwrap();
    80006206:	0006d517          	auipc	a0,0x6d
    8000620a:	f3a50513          	addi	a0,a0,-198 # 80073140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    8000620e:	0000c097          	auipc	ra,0xc
    80006212:	bf0080e7          	jalr	-1040(ra) # 80011dfe <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    80006216:	f52a                	sd	a0,168(sp)
    80006218:	a009                	j	8000621a <.LBB1_68+0x14>
    8000621a:	752a                	ld	a0,168(sp)

000000008000621c <.LBB1_69>:
    8000621c:	00020597          	auipc	a1,0x20
    80006220:	54c58593          	addi	a1,a1,1356 # 80026768 <.L__unnamed_3>
    80006224:	00009097          	auipc	ra,0x9
    80006228:	b28080e7          	jalr	-1240(ra) # 8000ed4c <_ZN4core6option15Option$LT$T$GT$6unwrap17h81f0c84c54a80648E>
    8000622c:	85aa                	mv	a1,a0
    8000622e:	f12e                	sd	a1,160(sp)
    80006230:	e3aa                	sd	a0,448(sp)
    80006232:	a009                	j	80006234 <.LBB1_69+0x18>
    let tf = &mut *my_proc.trapframe;
    80006234:	750a                	ld	a0,160(sp)
    80006236:	710c                	ld	a1,32(a0)
    80006238:	ed2e                	sd	a1,152(sp)
    8000623a:	e7ae                	sd	a1,456(sp)
    tf.epc = sepc;
    8000623c:	650e                	ld	a0,192(sp)
    8000623e:	ed88                	sd	a0,24(a1)
    80006240:	01a8                	addi	a0,sp,200

    match scause.cause() {
    80006242:	00002097          	auipc	ra,0x2
    80006246:	aac080e7          	jalr	-1364(ra) # 80007cee <_ZN6kernel4arch5riscv8register6scause6Scause5cause17h87ca94701d022899E>
    8000624a:	0ca10823          	sb	a0,208(sp)
    8000624e:	0cb108a3          	sb	a1,209(sp)
    80006252:	a009                	j	80006254 <.LBB1_69+0x38>
        Trap::Exception(Exception::UserEnvCall) => {
    80006254:	0d014503          	lbu	a0,208(sp)
    80006258:	e92a                	sd	a0,144(sp)
    8000625a:	8905                	andi	a0,a0,1
    8000625c:	4581                	li	a1,0
    8000625e:	00b50863          	beq	a0,a1,8000626e <.LBB1_69+0x52>
    80006262:	a009                	j	80006264 <.LBB1_69+0x48>
    80006264:	654a                	ld	a0,144(sp)
    80006266:	4585                	li	a1,1
    80006268:	02b50963          	beq	a0,a1,8000629a <.LBB1_69+0x7e>
    8000626c:	a829                	j	80006286 <.LBB1_69+0x6a>
            sstatus::intr_on();
            handle_syscall();
        },

        // Device interrupt
        Trap::Interrupt(Interrupt::SupervisorExternal) => {
    8000626e:	0d114503          	lbu	a0,209(sp)
    80006272:	e52a                	sd	a0,136(sp)
    80006274:	4585                	li	a1,1
    80006276:	12b50a63          	beq	a0,a1,800063aa <.LBB1_74+0x22>
    8000627a:	a009                	j	8000627c <.LBB1_69+0x60>
    8000627c:	652a                	ld	a0,136(sp)
    8000627e:	4595                	li	a1,5
    80006280:	06b50a63          	beq	a0,a1,800062f4 <.LBB1_70+0x36>
    80006284:	a009                	j	80006286 <.LBB1_69+0x6a>
    80006286:	01a8                	addi	a0,sp,200
            // yield up the CPU if this is a timer interrupt
            my_proc.yielding();
        },

        _ => {
            println!("usertrap: unexpected scacuse: {:?}\n pid: {}", scause.cause(), my_proc.pid());
    80006288:	00002097          	auipc	ra,0x2
    8000628c:	a66080e7          	jalr	-1434(ra) # 80007cee <_ZN6kernel4arch5riscv8register6scause6Scause5cause17h87ca94701d022899E>
    80006290:	14a10423          	sb	a0,328(sp)
    80006294:	14b104a3          	sb	a1,329(sp)
    80006298:	aaad                	j	80006412 <.LBB1_75+0x22>
        Trap::Exception(Exception::UserEnvCall) => {
    8000629a:	0d114503          	lbu	a0,209(sp)
    8000629e:	459d                	li	a1,7
    800062a0:	feb513e3          	bne	a0,a1,80006286 <.LBB1_69+0x6a>
    800062a4:	a009                	j	800062a6 <.LBB1_69+0x8a>
            if my_proc.killed() {
    800062a6:	750a                	ld	a0,160(sp)
    800062a8:	00010097          	auipc	ra,0x10
    800062ac:	d4c080e7          	jalr	-692(ra) # 80015ff4 <_ZN6kernel7process7process11task_struct6killed17h4fc8d78e83fc4243E>
    800062b0:	e12a                	sd	a0,128(sp)
    800062b2:	a009                	j	800062b4 <.LBB1_69+0x98>
    800062b4:	650a                	ld	a0,128(sp)
    800062b6:	4581                	li	a1,0
    800062b8:	00b50d63          	beq	a0,a1,800062d2 <.LBB1_70+0x14>
    800062bc:	a009                	j	800062be <.LBB1_70>

00000000800062be <.LBB1_70>:
                PROC_MANAGER.exit(1);
    800062be:	00051517          	auipc	a0,0x51
    800062c2:	2e250513          	addi	a0,a0,738 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    800062c6:	4585                	li	a1,1
    800062c8:	00007097          	auipc	ra,0x7
    800062cc:	7c6080e7          	jalr	1990(ra) # 8000da8e <_ZN6kernel7process7manager11ProcManager4exit17hfa49a8445fc58f81E>
    800062d0:	0000                	unimp
            tf.update_epc();
    800062d2:	656a                	ld	a0,152(sp)
    800062d4:	ffffc097          	auipc	ra,0xffffc
    800062d8:	3ea080e7          	jalr	1002(ra) # 800026be <_ZN6kernel7process9trapframe9Trapframe10update_epc17h24874241e4b03020E>
    800062dc:	a009                	j	800062de <.LBB1_70+0x20>
            sstatus::intr_on();
    800062de:	00018097          	auipc	ra,0x18
    800062e2:	066080e7          	jalr	102(ra) # 8001e344 <_ZN6kernel4arch5riscv8register7sstatus7intr_on17h10d927cfe74faba7E>
    800062e6:	a009                	j	800062e8 <.LBB1_70+0x2a>
            handle_syscall();
    800062e8:	0000f097          	auipc	ra,0xf
    800062ec:	b26080e7          	jalr	-1242(ra) # 80014e0e <handle_syscall>
    800062f0:	a009                	j	800062f2 <.LBB1_70+0x34>
    match scause.cause() {
    800062f2:	a43d                	j	80006520 <.LBB1_81+0x36>
            if let Some(interrupt) = plic_claim() {
    800062f4:	00017097          	auipc	ra,0x17
    800062f8:	7d6080e7          	jalr	2006(ra) # 8001daca <_ZN6kernel6driver4plic10plic_claim17h6764dad227b44c96E>
    800062fc:	cdaa                	sw	a0,216(sp)
    800062fe:	cfae                	sw	a1,220(sp)
    80006300:	a009                	j	80006302 <.LBB1_70+0x44>
    80006302:	456e                	lw	a0,216(sp)
    80006304:	4581                	li	a1,0
    80006306:	00b51463          	bne	a0,a1,8000630e <.LBB1_70+0x50>
    8000630a:	a009                	j	8000630c <.LBB1_70+0x4e>
    8000630c:	ac11                	j	80006520 <.LBB1_81+0x36>
    8000630e:	457e                	lw	a0,220(sp)
    80006310:	02051593          	slli	a1,a0,0x20
    80006314:	9181                	srli	a1,a1,0x20
    80006316:	fcae                	sd	a1,120(sp)
    80006318:	1ea12a23          	sw	a0,500(sp)
    8000631c:	4585                	li	a1,1
                    VIRTIO0_IRQ => {
    8000631e:	02b50763          	beq	a0,a1,8000634c <.LBB1_73>
    80006322:	a009                	j	80006324 <.LBB1_70+0x66>
    80006324:	7566                	ld	a0,120(sp)
    80006326:	2501                	sext.w	a0,a0
    80006328:	45a9                	li	a1,10
    8000632a:	04b50f63          	beq	a0,a1,80006388 <.LBB1_74>
    8000632e:	a009                	j	80006330 <.LBB1_71>

0000000080006330 <.LBB1_71>:
                        panic!("Unresolved interrupt");
    80006330:	00020517          	auipc	a0,0x20
    80006334:	5b050513          	addi	a0,a0,1456 # 800268e0 <.L__unnamed_4>

0000000080006338 <.LBB1_72>:
    80006338:	00020617          	auipc	a2,0x20
    8000633c:	5c060613          	addi	a2,a2,1472 # 800268f8 <.L__unnamed_5>
    80006340:	45d1                	li	a1,20
    80006342:	0001c097          	auipc	ra,0x1c
    80006346:	f34080e7          	jalr	-204(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008000634c <.LBB1_73>:
                        DISK.acquire().intr();
    8000634c:	00066517          	auipc	a0,0x66
    80006350:	cb450513          	addi	a0,a0,-844 # 8006c000 <_ZN6kernel6driver11virtio_disk4DISK17h9e8917083150b34aE>
    80006354:	0000a097          	auipc	ra,0xa
    80006358:	3da080e7          	jalr	986(ra) # 8001072e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h922bace5232f6228E>
    8000635c:	f1aa                	sd	a0,224(sp)
    8000635e:	a009                	j	80006360 <.LBB1_73+0x14>
    80006360:	1188                	addi	a0,sp,224
    80006362:	0000b097          	auipc	ra,0xb
    80006366:	336080e7          	jalr	822(ra) # 80011698 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h362a59dae1fa4f35E>
    8000636a:	f8aa                	sd	a0,112(sp)
    8000636c:	a009                	j	8000636e <.LBB1_73+0x22>
    8000636e:	7546                	ld	a0,112(sp)
    80006370:	00019097          	auipc	ra,0x19
    80006374:	f54080e7          	jalr	-172(ra) # 8001f2c4 <_ZN6kernel6driver11virtio_disk4Disk4intr17h780fdb71fd330281E>
    80006378:	a009                	j	8000637a <.LBB1_73+0x2e>
    8000637a:	1188                	addi	a0,sp,224
    8000637c:	00001097          	auipc	ra,0x1
    80006380:	d1c080e7          	jalr	-740(ra) # 80007098 <_ZN4core3ptr99drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..driver..virtio_disk..Disk$GT$$GT$17h4fc01c278f0bfe6cE>
    80006384:	a009                	j	80006386 <.LBB1_73+0x3a>
                match interrupt {
    80006386:	a819                	j	8000639c <.LBB1_74+0x14>

0000000080006388 <.LBB1_74>:
                        UART.intr();
    80006388:	00063517          	auipc	a0,0x63
    8000638c:	4d850513          	addi	a0,a0,1240 # 80069860 <_ZN6kernel6driver4uart4UART17h0708b3e179d548ddE>
    80006390:	00004097          	auipc	ra,0x4
    80006394:	97c080e7          	jalr	-1668(ra) # 80009d0c <_ZN6kernel6driver4uart84_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..driver..uart..Uart$GT$$GT$4intr17h862db3ca167d2b66E>
    80006398:	a009                	j	8000639a <.LBB1_74+0x12>
                match interrupt {
    8000639a:	a009                	j	8000639c <.LBB1_74+0x14>
                plic_complete(interrupt);
    8000639c:	7566                	ld	a0,120(sp)
    8000639e:	00017097          	auipc	ra,0x17
    800063a2:	786080e7          	jalr	1926(ra) # 8001db24 <_ZN6kernel6driver4plic13plic_complete17hc3a23eee8594fbc3E>
    800063a6:	a009                	j	800063a8 <.LBB1_74+0x20>
            if let Some(interrupt) = plic_claim() {
    800063a8:	aaa5                	j	80006520 <.LBB1_81+0x36>
            if cpu::cpuid() == 0{
    800063aa:	0000c097          	auipc	ra,0xc
    800063ae:	9ec080e7          	jalr	-1556(ra) # 80011d96 <_ZN6kernel7process3cpu5cpuid17h605093a6a9a60164E>
    800063b2:	f4aa                	sd	a0,104(sp)
    800063b4:	a009                	j	800063b6 <.LBB1_74+0x2e>
    800063b6:	7526                	ld	a0,104(sp)
    800063b8:	4581                	li	a1,0
    800063ba:	00b51863          	bne	a0,a1,800063ca <.LBB1_74+0x42>
    800063be:	a009                	j	800063c0 <.LBB1_74+0x38>
                clock_intr();
    800063c0:	00001097          	auipc	ra,0x1
    800063c4:	922080e7          	jalr	-1758(ra) # 80006ce2 <_ZN6kernel4trap10clock_intr17h80b4decf617479a4E>
    800063c8:	a011                	j	800063cc <.LBB1_74+0x44>
            if cpu::cpuid() == 0{
    800063ca:	a011                	j	800063ce <.LBB1_74+0x46>
    800063cc:	a009                	j	800063ce <.LBB1_74+0x46>
            sip::clear_ssip();
    800063ce:	00017097          	auipc	ra,0x17
    800063d2:	510080e7          	jalr	1296(ra) # 8001d8de <_ZN6kernel4arch5riscv8register3sip10clear_ssip17h3546c4610df6574fE>
    800063d6:	a009                	j	800063d8 <.LBB1_74+0x50>
            if my_proc.killed() {
    800063d8:	750a                	ld	a0,160(sp)
    800063da:	00010097          	auipc	ra,0x10
    800063de:	c1a080e7          	jalr	-998(ra) # 80015ff4 <_ZN6kernel7process7process11task_struct6killed17h4fc8d78e83fc4243E>
    800063e2:	f0aa                	sd	a0,96(sp)
    800063e4:	a009                	j	800063e6 <.LBB1_74+0x5e>
    800063e6:	7506                	ld	a0,96(sp)
    800063e8:	4581                	li	a1,0
    800063ea:	00b50d63          	beq	a0,a1,80006404 <.LBB1_75+0x14>
    800063ee:	a009                	j	800063f0 <.LBB1_75>

00000000800063f0 <.LBB1_75>:
                PROC_MANAGER.exit(1);
    800063f0:	00051517          	auipc	a0,0x51
    800063f4:	1b050513          	addi	a0,a0,432 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    800063f8:	4585                	li	a1,1
    800063fa:	00007097          	auipc	ra,0x7
    800063fe:	694080e7          	jalr	1684(ra) # 8000da8e <_ZN6kernel7process7manager11ProcManager4exit17hfa49a8445fc58f81E>
    80006402:	0000                	unimp
            my_proc.yielding();
    80006404:	750a                	ld	a0,160(sp)
    80006406:	00010097          	auipc	ra,0x10
    8000640a:	f78080e7          	jalr	-136(ra) # 8001637e <_ZN6kernel7process7process11task_struct8yielding17hffa4922f8aee5a94E>
    8000640e:	a009                	j	80006410 <.LBB1_75+0x20>
    match scause.cause() {
    80006410:	aa01                	j	80006520 <.LBB1_81+0x36>
            println!("usertrap: unexpected scacuse: {:?}\n pid: {}", scause.cause(), my_proc.pid());
    80006412:	750a                	ld	a0,160(sp)
    80006414:	00010097          	auipc	ra,0x10
    80006418:	bec080e7          	jalr	-1044(ra) # 80016000 <_ZN6kernel7process7process11task_struct3pid17hf16723aa87a30b20E>
    8000641c:	eaaa                	sd	a0,336(sp)
    8000641e:	a009                	j	80006420 <.LBB1_75+0x30>
    80006420:	02a8                	addi	a0,sp,328
    80006422:	fe2a                	sd	a0,312(sp)
    80006424:	0a8c                	addi	a1,sp,336
    80006426:	e4ae                	sd	a1,72(sp)
    80006428:	e2ae                	sd	a1,320(sp)
    8000642a:	ebaa                	sd	a0,464(sp)
    8000642c:	efae                	sd	a1,472(sp)

000000008000642e <.LBB1_76>:
    8000642e:	00002597          	auipc	a1,0x2
    80006432:	9c058593          	addi	a1,a1,-1600 # 80007dee <_ZN80_$LT$kernel..arch..riscv..register..scause..Trap$u20$as$u20$core..fmt..Debug$GT$3fmt17haf633180146f5b80E>
    80006436:	00018097          	auipc	ra,0x18
    8000643a:	24c080e7          	jalr	588(ra) # 8001e682 <_ZN4core3fmt10ArgumentV13new17hc1ed914d10380b65E>
    8000643e:	e8aa                	sd	a0,80(sp)
    80006440:	ecae                	sd	a1,88(sp)
    80006442:	a009                	j	80006444 <.LBB1_76+0x16>
    80006444:	6526                	ld	a0,72(sp)

0000000080006446 <.LBB1_77>:
    80006446:	0001e597          	auipc	a1,0x1e
    8000644a:	4bc58593          	addi	a1,a1,1212 # 80024902 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h9c6c4af1578f7c29E>
    8000644e:	00019097          	auipc	ra,0x19
    80006452:	252080e7          	jalr	594(ra) # 8001f6a0 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    80006456:	fc2a                	sd	a0,56(sp)
    80006458:	e0ae                	sd	a1,64(sp)
    8000645a:	a009                	j	8000645c <.LBB1_77+0x16>
    8000645c:	6506                	ld	a0,64(sp)
    8000645e:	75e2                	ld	a1,56(sp)
    80006460:	6666                	ld	a2,88(sp)
    80006462:	66c6                	ld	a3,80(sp)
    80006464:	ee36                	sd	a3,280(sp)
    80006466:	f232                	sd	a2,288(sp)
    80006468:	f62e                	sd	a1,296(sp)
    8000646a:	fa2a                	sd	a0,304(sp)

000000008000646c <.LBB1_78>:
    8000646c:	00020597          	auipc	a1,0x20
    80006470:	33c58593          	addi	a1,a1,828 # 800267a8 <.L__unnamed_6>
    80006474:	11a8                	addi	a0,sp,232
    80006476:	460d                	li	a2,3
    80006478:	0a34                	addi	a3,sp,280
    8000647a:	4709                	li	a4,2
    8000647c:	fffff097          	auipc	ra,0xfffff
    80006480:	fee080e7          	jalr	-18(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80006484:	a009                	j	80006486 <.LBB1_78+0x1a>
    80006486:	11a8                	addi	a0,sp,232
    80006488:	00018097          	auipc	ra,0x18
    8000648c:	8c4080e7          	jalr	-1852(ra) # 8001dd4c <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    80006490:	a009                	j	80006492 <.LBB1_78+0x26>
            println!("sepc: 0x{:x}, stval: 0x{:x}", sepc, stval::read());
    80006492:	fffff097          	auipc	ra,0xfffff
    80006496:	e60080e7          	jalr	-416(ra) # 800052f2 <_ZN6kernel4arch5riscv8register5stval4read17h328c9da49d53d19fE>
    8000649a:	ff2a                	sd	a0,440(sp)
    8000649c:	a009                	j	8000649e <.LBB1_78+0x32>
    8000649e:	0188                	addi	a0,sp,192
    800064a0:	f72a                	sd	a0,424(sp)
    800064a2:	1b2c                	addi	a1,sp,440
    800064a4:	f02e                	sd	a1,32(sp)
    800064a6:	fb2e                	sd	a1,432(sp)
    800064a8:	f3aa                	sd	a0,480(sp)
    800064aa:	f7ae                	sd	a1,488(sp)

00000000800064ac <.LBB1_79>:
    800064ac:	0001e597          	auipc	a1,0x1e
    800064b0:	f0858593          	addi	a1,a1,-248 # 800243b4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h760b07191d46b3f2E>
    800064b4:	00019097          	auipc	ra,0x19
    800064b8:	1ec080e7          	jalr	492(ra) # 8001f6a0 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    800064bc:	f42a                	sd	a0,40(sp)
    800064be:	f82e                	sd	a1,48(sp)
    800064c0:	a009                	j	800064c2 <.LBB1_79+0x16>
    800064c2:	7502                	ld	a0,32(sp)

00000000800064c4 <.LBB1_80>:
    800064c4:	0001e597          	auipc	a1,0x1e
    800064c8:	ef058593          	addi	a1,a1,-272 # 800243b4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h760b07191d46b3f2E>
    800064cc:	00019097          	auipc	ra,0x19
    800064d0:	1d4080e7          	jalr	468(ra) # 8001f6a0 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    800064d4:	e82a                	sd	a0,16(sp)
    800064d6:	ec2e                	sd	a1,24(sp)
    800064d8:	a009                	j	800064da <.LBB1_80+0x16>
    800064da:	6562                	ld	a0,24(sp)
    800064dc:	65c2                	ld	a1,16(sp)
    800064de:	7642                	ld	a2,48(sp)
    800064e0:	76a2                	ld	a3,40(sp)
    800064e2:	e736                	sd	a3,392(sp)
    800064e4:	eb32                	sd	a2,400(sp)
    800064e6:	ef2e                	sd	a1,408(sp)
    800064e8:	f32a                	sd	a0,416(sp)

00000000800064ea <.LBB1_81>:
    800064ea:	00020597          	auipc	a1,0x20
    800064ee:	3c658593          	addi	a1,a1,966 # 800268b0 <.L__unnamed_7>
    800064f2:	0aa8                	addi	a0,sp,344
    800064f4:	460d                	li	a2,3
    800064f6:	0334                	addi	a3,sp,392
    800064f8:	4709                	li	a4,2
    800064fa:	fffff097          	auipc	ra,0xfffff
    800064fe:	f70080e7          	jalr	-144(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80006502:	a009                	j	80006504 <.LBB1_81+0x1a>
    80006504:	0aa8                	addi	a0,sp,344
    80006506:	00018097          	auipc	ra,0x18
    8000650a:	846080e7          	jalr	-1978(ra) # 8001dd4c <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8000650e:	a009                	j	80006510 <.LBB1_81+0x26>
            my_proc.modify_kill(true);
    80006510:	750a                	ld	a0,160(sp)
    80006512:	4585                	li	a1,1
    80006514:	00010097          	auipc	ra,0x10
    80006518:	b4e080e7          	jalr	-1202(ra) # 80016062 <_ZN6kernel7process7process11task_struct11modify_kill17hb12febfdeb8e8d03E>
    8000651c:	a009                	j	8000651e <.LBB1_81+0x34>
    match scause.cause() {
    8000651e:	a009                	j	80006520 <.LBB1_81+0x36>
        }

    }

    if my_proc.killed() {
    80006520:	750a                	ld	a0,160(sp)
    80006522:	00010097          	auipc	ra,0x10
    80006526:	ad2080e7          	jalr	-1326(ra) # 80015ff4 <_ZN6kernel7process7process11task_struct6killed17h4fc8d78e83fc4243E>
    8000652a:	e42a                	sd	a0,8(sp)
    8000652c:	a009                	j	8000652e <.LBB1_81+0x44>
    8000652e:	6522                	ld	a0,8(sp)
    80006530:	4581                	li	a1,0
    80006532:	00b50d63          	beq	a0,a1,8000654c <.LBB1_82+0x14>
    80006536:	a009                	j	80006538 <.LBB1_82>

0000000080006538 <.LBB1_82>:
        PROC_MANAGER.exit(1);
    80006538:	00051517          	auipc	a0,0x51
    8000653c:	06850513          	addi	a0,a0,104 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    80006540:	4585                	li	a1,1
    80006542:	00007097          	auipc	ra,0x7
    80006546:	54c080e7          	jalr	1356(ra) # 8000da8e <_ZN6kernel7process7manager11ProcManager4exit17hfa49a8445fc58f81E>
    8000654a:	0000                	unimp
    }
    
    user_trap_ret();
    8000654c:	00000097          	auipc	ra,0x0
    80006550:	00a080e7          	jalr	10(ra) # 80006556 <user_trap_ret>
	...

Disassembly of section .text.user_trap_ret:

0000000080006556 <user_trap_ret>:
}


/// return to user space
#[no_mangle]
pub unsafe fn user_trap_ret() -> ! {
    80006556:	7135                	addi	sp,sp,-160
        fn trampoline();
        fn userret();
        fn etext();
    }

    let my_proc = CPU_MANAGER.myproc().unwrap();
    80006558:	ed06                	sd	ra,152(sp)

000000008000655a <.LBB2_23>:
    8000655a:	0006d517          	auipc	a0,0x6d
    8000655e:	be650513          	addi	a0,a0,-1050 # 80073140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    80006562:	0000c097          	auipc	ra,0xc
    80006566:	89c080e7          	jalr	-1892(ra) # 80011dfe <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    8000656a:	f0aa                	sd	a0,96(sp)
    8000656c:	a009                	j	8000656e <.LBB2_23+0x14>
    8000656e:	7506                	ld	a0,96(sp)

0000000080006570 <.LBB2_24>:
    80006570:	00020597          	auipc	a1,0x20
    80006574:	3a058593          	addi	a1,a1,928 # 80026910 <.L__unnamed_8>
    80006578:	00008097          	auipc	ra,0x8
    8000657c:	7d4080e7          	jalr	2004(ra) # 8000ed4c <_ZN4core6option15Option$LT$T$GT$6unwrap17h81f0c84c54a80648E>
    80006580:	85aa                	mv	a1,a0
    80006582:	ecae                	sd	a1,88(sp)
    80006584:	f8aa                	sd	a0,112(sp)
    80006586:	a009                	j	80006588 <.LBB2_24+0x18>

    // we're about to switch the destination of traps from
    // kerneltrap() to usertrap(), so turn off interrupts until
    // we're back in user space, where usertrap() is correct.
    sstatus::intr_off();
    80006588:	00018097          	auipc	ra,0x18
    8000658c:	de2080e7          	jalr	-542(ra) # 8001e36a <_ZN6kernel4arch5riscv8register7sstatus8intr_off17hed3f5b43b53e6556E>
    80006590:	a009                	j	80006592 <.LBB2_25>

0000000080006592 <.LBB2_25>:

    // send syscalls, interrupts, and exceptions to trampoline.S
    stvec::write(TRAMPOLINE + (uservec as usize - trampoline as usize));
    80006592:	ffffb597          	auipc	a1,0xffffb
    80006596:	a6e58593          	addi	a1,a1,-1426 # 80001000 <trampoline>

000000008000659a <.LBB2_26>:
    8000659a:	ffffb517          	auipc	a0,0xffffb
    8000659e:	a6650513          	addi	a0,a0,-1434 # 80001000 <trampoline>
    800065a2:	40b505b3          	sub	a1,a0,a1
    800065a6:	e8ae                	sd	a1,80(sp)
    800065a8:	10b56063          	bltu	a0,a1,800066a8 <.LBB2_30>
    800065ac:	a009                	j	800065ae <.LBB2_26+0x14>
    800065ae:	65c6                	ld	a1,80(sp)
    800065b0:	04000537          	lui	a0,0x4000
    800065b4:	357d                	addiw	a0,a0,-1
    800065b6:	0532                	slli	a0,a0,0xc
    800065b8:	952e                	add	a0,a0,a1
    800065ba:	e4aa                	sd	a0,72(sp)
    800065bc:	10b56563          	bltu	a0,a1,800066c6 <.LBB2_32>
    800065c0:	a009                	j	800065c2 <.LBB2_26+0x28>
    800065c2:	6526                	ld	a0,72(sp)
    800065c4:	00005097          	auipc	ra,0x5
    800065c8:	736080e7          	jalr	1846(ra) # 8000bcfa <_ZN6kernel4arch5riscv8register5stvec5write17ha770434f21f9bf27E>
    800065cc:	a009                	j	800065ce <.LBB2_26+0x34>

    // set up trapframe values that uservec will need when
    // the process next re-enters the kernel.
 
    my_proc.user_init();
    800065ce:	6566                	ld	a0,88(sp)
    800065d0:	0000f097          	auipc	ra,0xf
    800065d4:	68a080e7          	jalr	1674(ra) # 80015c5a <_ZN6kernel7process7process11task_struct9user_init17hc3178b7a708271cbE>
    800065d8:	a009                	j	800065da <.LBB2_26+0x40>

    // set up the registers that trampoline.S's sret will use
    // to get to user space.
    // Set S Previous Privilege mode to User. 
    let mut sstatus = sstatus::read();
    800065da:	00018097          	auipc	ra,0x18
    800065de:	d14080e7          	jalr	-748(ra) # 8001e2ee <_ZN6kernel4arch5riscv8register7sstatus4read17h1df585a8263fd2acE>
    800065e2:	f4aa                	sd	a0,104(sp)
    800065e4:	a009                	j	800065e6 <.LBB2_26+0x4c>
    sstatus = sstatus::clear_spp(sstatus); // clear SPP to 0 for user mode
    800065e6:	7526                	ld	a0,104(sp)
    800065e8:	00018097          	auipc	ra,0x18
    800065ec:	dc6080e7          	jalr	-570(ra) # 8001e3ae <_ZN6kernel4arch5riscv8register7sstatus9clear_spp17h6421d1a1ec9c8eccE>
    800065f0:	e0aa                	sd	a0,64(sp)
    800065f2:	a009                	j	800065f4 <.LBB2_26+0x5a>
    800065f4:	6506                	ld	a0,64(sp)
    800065f6:	f4aa                	sd	a0,104(sp)
    sstatus = sstatus::user_intr_on(sstatus); // enable interrupts in user mode
    800065f8:	00018097          	auipc	ra,0x18
    800065fc:	dc2080e7          	jalr	-574(ra) # 8001e3ba <_ZN6kernel4arch5riscv8register7sstatus12user_intr_on17h1304f970b07c3896E>
    80006600:	fc2a                	sd	a0,56(sp)
    80006602:	a009                	j	80006604 <.LBB2_26+0x6a>
    80006604:	7562                	ld	a0,56(sp)
    80006606:	f4aa                	sd	a0,104(sp)
    sstatus::write(sstatus);
    80006608:	00018097          	auipc	ra,0x18
    8000660c:	cf2080e7          	jalr	-782(ra) # 8001e2fa <_ZN6kernel4arch5riscv8register7sstatus5write17h2e3a8152fe4defdaE>
    80006610:	a009                	j	80006612 <.LBB2_26+0x78>

    // set S Exception Program Counter to the saved user pc. 
    sepc::write((*my_proc.trapframe).epc);
    80006612:	6566                	ld	a0,88(sp)
    80006614:	7108                	ld	a0,32(a0)
    80006616:	6d08                	ld	a0,24(a0)
    80006618:	ffffe097          	auipc	ra,0xffffe
    8000661c:	5c2080e7          	jalr	1474(ra) # 80004bda <_ZN6kernel4arch5riscv8register4sepc5write17h2074fd389defa9f2E>
    80006620:	a009                	j	80006622 <.LBB2_26+0x88>
    
    // tell trampoline.S the user page table to switch to
    let satp = my_proc.pagetable.as_ref().unwrap().as_satp();
    80006622:	6566                	ld	a0,88(sp)
    80006624:	6d08                	ld	a0,24(a0)
    80006626:	00006097          	auipc	ra,0x6
    8000662a:	59c080e7          	jalr	1436(ra) # 8000cbc2 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_ref17h449f973acae747ffE>
    8000662e:	f82a                	sd	a0,48(sp)
    80006630:	a009                	j	80006632 <.LBB2_26+0x98>
    80006632:	7542                	ld	a0,48(sp)

0000000080006634 <.LBB2_27>:
    80006634:	00020597          	auipc	a1,0x20
    80006638:	36c58593          	addi	a1,a1,876 # 800269a0 <.L__unnamed_9>
    8000663c:	00008097          	auipc	ra,0x8
    80006640:	7b2080e7          	jalr	1970(ra) # 8000edee <_ZN4core6option15Option$LT$T$GT$6unwrap17h97667cf20f9698d4E>
    80006644:	f42a                	sd	a0,40(sp)
    80006646:	a009                	j	80006648 <.LBB2_27+0x14>
    80006648:	7522                	ld	a0,40(sp)
    8000664a:	00010097          	auipc	ra,0x10
    8000664e:	738080e7          	jalr	1848(ra) # 80016d82 <_ZN6kernel6memory7mapping10page_table9PageTable7as_satp17h97121d8f678f163eE>
    80006652:	85aa                	mv	a1,a0
    80006654:	f02e                	sd	a1,32(sp)
    80006656:	fcaa                	sd	a0,120(sp)
    80006658:	a009                	j	8000665a <.LBB2_28>

000000008000665a <.LBB2_28>:

    // jump to trampoline.S at the top of memory, which
    // switches to the user page table, restores user registers,
    // and switches to user mode with sret. 
    let userret_virt = TRAMPOLINE + (userret as usize - trampoline as usize);
    8000665a:	ffffb597          	auipc	a1,0xffffb
    8000665e:	9a658593          	addi	a1,a1,-1626 # 80001000 <trampoline>

0000000080006662 <.LBB2_29>:
    80006662:	ffffb517          	auipc	a0,0xffffb
    80006666:	a3e50513          	addi	a0,a0,-1474 # 800010a0 <userret>
    8000666a:	40b505b3          	sub	a1,a0,a1
    8000666e:	ec2e                	sd	a1,24(sp)
    80006670:	06b56963          	bltu	a0,a1,800066e2 <.LBB2_34>
    80006674:	a009                	j	80006676 <.LBB2_29+0x14>
    80006676:	65e2                	ld	a1,24(sp)
    80006678:	04000537          	lui	a0,0x4000
    8000667c:	357d                	addiw	a0,a0,-1
    8000667e:	0532                	slli	a0,a0,0xc
    80006680:	952e                	add	a0,a0,a1
    80006682:	e82a                	sd	a0,16(sp)
    80006684:	06b56e63          	bltu	a0,a1,80006700 <.LBB2_36>
    80006688:	a009                	j	8000668a <.LBB2_29+0x28>
    8000668a:	6542                	ld	a0,16(sp)
    8000668c:	e12a                	sd	a0,128(sp)
    let userret_virt: extern "C" fn(usize, usize) -> ! = 
    core::mem::transmute(userret_virt as usize);
    8000668e:	e52a                	sd	a0,136(sp)
    80006690:	85aa                	mv	a1,a0
    80006692:	e42e                	sd	a1,8(sp)
    80006694:	e92a                	sd	a0,144(sp)
    80006696:	a009                	j	80006698 <.LBB2_29+0x36>
    userret_virt(TRAPFRAME, satp);
    80006698:	6622                	ld	a2,8(sp)
    8000669a:	7582                	ld	a1,32(sp)
    8000669c:	02000537          	lui	a0,0x2000
    800066a0:	357d                	addiw	a0,a0,-1
    800066a2:	0536                	slli	a0,a0,0xd
    800066a4:	9602                	jalr	a2
	...

00000000800066a8 <.LBB2_30>:
    stvec::write(TRAMPOLINE + (uservec as usize - trampoline as usize));
    800066a8:	00020517          	auipc	a0,0x20
    800066ac:	29850513          	addi	a0,a0,664 # 80026940 <str.0>

00000000800066b0 <.LBB2_31>:
    800066b0:	00020617          	auipc	a2,0x20
    800066b4:	27860613          	addi	a2,a2,632 # 80026928 <.L__unnamed_10>
    800066b8:	02100593          	li	a1,33
    800066bc:	0001c097          	auipc	ra,0x1c
    800066c0:	bba080e7          	jalr	-1094(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

00000000800066c6 <.LBB2_32>:
    800066c6:	00020517          	auipc	a0,0x20
    800066ca:	2ba50513          	addi	a0,a0,698 # 80026980 <str.1>

00000000800066ce <.LBB2_33>:
    800066ce:	00020617          	auipc	a2,0x20
    800066d2:	29a60613          	addi	a2,a2,666 # 80026968 <.L__unnamed_11>
    800066d6:	45f1                	li	a1,28
    800066d8:	0001c097          	auipc	ra,0x1c
    800066dc:	b9e080e7          	jalr	-1122(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

00000000800066e2 <.LBB2_34>:
    let userret_virt = TRAMPOLINE + (userret as usize - trampoline as usize);
    800066e2:	00020517          	auipc	a0,0x20
    800066e6:	25e50513          	addi	a0,a0,606 # 80026940 <str.0>

00000000800066ea <.LBB2_35>:
    800066ea:	00020617          	auipc	a2,0x20
    800066ee:	2ce60613          	addi	a2,a2,718 # 800269b8 <.L__unnamed_12>
    800066f2:	02100593          	li	a1,33
    800066f6:	0001c097          	auipc	ra,0x1c
    800066fa:	b80080e7          	jalr	-1152(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080006700 <.LBB2_36>:
    80006700:	00020517          	auipc	a0,0x20
    80006704:	28050513          	addi	a0,a0,640 # 80026980 <str.1>

0000000080006708 <.LBB2_37>:
    80006708:	00020617          	auipc	a2,0x20
    8000670c:	2c860613          	addi	a2,a2,712 # 800269d0 <.L__unnamed_13>
    80006710:	45f1                	li	a1,28
    80006712:	0001c097          	auipc	ra,0x1c
    80006716:	b64080e7          	jalr	-1180(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text.kernel_trap:

000000008000671c <kernel_trap>:
}

/// interrupts and exceptions from kernel code go here via kernelvec,
/// on whatever the current kernel stack is.
#[no_mangle]
pub unsafe fn kernel_trap(
    8000671c:	c2010113          	addi	sp,sp,-992
    80006720:	3c113c23          	sd	ra,984(sp)
    80006724:	f1c6                	sd	a7,224(sp)
    80006726:	34a13423          	sd	a0,840(sp)
    8000672a:	34b13823          	sd	a1,848(sp)
    8000672e:	34c13c23          	sd	a2,856(sp)
    80006732:	36d13023          	sd	a3,864(sp)
    80006736:	36e13423          	sd	a4,872(sp)
    8000673a:	36f13823          	sd	a5,880(sp)
    8000673e:	37013c23          	sd	a6,888(sp)
    80006742:	39113023          	sd	a7,896(sp)
   _: usize, _: usize, _: usize, _: usize,
   _: usize, _: usize, _: usize, which: usize
) {
    let sepc = sepc::read();
    80006746:	ffffe097          	auipc	ra,0xffffe
    8000674a:	488080e7          	jalr	1160(ra) # 80004bce <_ZN6kernel4arch5riscv8register4sepc4read17hcaa3e2a818646c19E>
    8000674e:	f5aa                	sd	a0,232(sp)
    80006750:	a009                	j	80006752 <kernel_trap+0x36>
    let sstatus = sstatus::read();
    80006752:	00018097          	auipc	ra,0x18
    80006756:	b9c080e7          	jalr	-1124(ra) # 8001e2ee <_ZN6kernel4arch5riscv8register7sstatus4read17h1df585a8263fd2acE>
    8000675a:	85aa                	mv	a1,a0
    8000675c:	edae                	sd	a1,216(sp)
    8000675e:	38a13423          	sd	a0,904(sp)
    80006762:	a009                	j	80006764 <kernel_trap+0x48>
    let scause = scause::read();
    80006764:	00001097          	auipc	ra,0x1
    80006768:	3dc080e7          	jalr	988(ra) # 80007b40 <_ZN6kernel4arch5riscv8register6scause4read17h6f388cd664aa7885E>
    8000676c:	85aa                	mv	a1,a0
    8000676e:	e9ae                	sd	a1,208(sp)
    80006770:	38a13823          	sd	a0,912(sp)
    80006774:	a009                	j	80006776 <kernel_trap+0x5a>
    let stval = stval::read();
    80006776:	fffff097          	auipc	ra,0xfffff
    8000677a:	b7c080e7          	jalr	-1156(ra) # 800052f2 <_ZN6kernel4arch5riscv8register5stval4read17h328c9da49d53d19fE>
    8000677e:	f9aa                	sd	a0,240(sp)
    80006780:	a009                	j	80006782 <kernel_trap+0x66>

    if !sstatus::is_from_supervisor() {
    80006782:	00018097          	auipc	ra,0x18
    80006786:	b84080e7          	jalr	-1148(ra) # 8001e306 <_ZN6kernel4arch5riscv8register7sstatus18is_from_supervisor17h09ba8119c534748eE>
    8000678a:	e5aa                	sd	a0,200(sp)
    8000678c:	a009                	j	8000678e <kernel_trap+0x72>
    8000678e:	652e                	ld	a0,200(sp)
    80006790:	e105                	bnez	a0,800067b0 <.LBB3_82+0x14>
    80006792:	a009                	j	80006794 <.LBB3_81>

0000000080006794 <.LBB3_81>:
        panic!("not from supervisor mode");
    80006794:	00020517          	auipc	a0,0x20
    80006798:	25450513          	addi	a0,a0,596 # 800269e8 <.L__unnamed_14>

000000008000679c <.LBB3_82>:
    8000679c:	00020617          	auipc	a2,0x20
    800067a0:	26460613          	addi	a2,a2,612 # 80026a00 <.L__unnamed_15>
    800067a4:	45e1                	li	a1,24
    800067a6:	0001c097          	auipc	ra,0x1c
    800067aa:	ad0080e7          	jalr	-1328(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    800067ae:	0000                	unimp
    }

    if sstatus::intr_get() {
    800067b0:	00018097          	auipc	ra,0x18
    800067b4:	bde080e7          	jalr	-1058(ra) # 8001e38e <_ZN6kernel4arch5riscv8register7sstatus8intr_get17h3e12e0f19cb31fd5E>
    800067b8:	e1aa                	sd	a0,192(sp)
    800067ba:	a009                	j	800067bc <.LBB3_82+0x20>
    800067bc:	650e                	ld	a0,192(sp)
    800067be:	4581                	li	a1,0
    800067c0:	02b50263          	beq	a0,a1,800067e4 <.LBB3_84+0x16>
    800067c4:	a009                	j	800067c6 <.LBB3_83>

00000000800067c6 <.LBB3_83>:
        panic!("kerneltrap(): interrupts enabled");
    800067c6:	0001f517          	auipc	a0,0x1f
    800067ca:	b2450513          	addi	a0,a0,-1244 # 800252ea <.L__unnamed_11+0x1e>

00000000800067ce <.LBB3_84>:
    800067ce:	00020617          	auipc	a2,0x20
    800067d2:	24a60613          	addi	a2,a2,586 # 80026a18 <.L__unnamed_17>
    800067d6:	02000593          	li	a1,32
    800067da:	0001c097          	auipc	ra,0x1c
    800067de:	a9c080e7          	jalr	-1380(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    800067e2:	0000                	unimp
    }

    let mut local_spec = sepc;
    800067e4:	654e                	ld	a0,208(sp)
    800067e6:	75ae                	ld	a1,232(sp)
    800067e8:	fdae                	sd	a1,248(sp)
    // Update progrma counter
    let scause = Scause::new(scause);
    800067ea:	00001097          	auipc	ra,0x1
    800067ee:	456080e7          	jalr	1110(ra) # 80007c40 <_ZN6kernel4arch5riscv8register6scause6Scause3new17hf1aad0ee6c83efd3E>
    800067f2:	e22a                	sd	a0,256(sp)
    800067f4:	a009                	j	800067f6 <.LBB3_84+0x28>
    800067f6:	0208                	addi	a0,sp,256
    match scause.cause() {
    800067f8:	00001097          	auipc	ra,0x1
    800067fc:	4f6080e7          	jalr	1270(ra) # 80007cee <_ZN6kernel4arch5riscv8register6scause6Scause5cause17h87ca94701d022899E>
    80006800:	10a10423          	sb	a0,264(sp)
    80006804:	10b104a3          	sb	a1,265(sp)
    80006808:	a009                	j	8000680a <.LBB3_84+0x3c>
        Trap::Exception(Exception::Breakpoint) => {
    8000680a:	10814503          	lbu	a0,264(sp)
    8000680e:	fd2a                	sd	a0,184(sp)
    80006810:	8905                	andi	a0,a0,1
    80006812:	4581                	li	a1,0
    80006814:	00b50863          	beq	a0,a1,80006824 <.LBB3_84+0x56>
    80006818:	a009                	j	8000681a <.LBB3_84+0x4c>
    8000681a:	756a                	ld	a0,184(sp)
    8000681c:	4585                	li	a1,1
    8000681e:	02b50d63          	beq	a0,a1,80006858 <.LBB3_86+0x14>
    80006822:	a829                	j	8000683c <.LBB3_16>
            println!("stval: 0x{:x}", stval);
            panic!();
        },

        // Device Interruput
        Trap::Interrupt(Interrupt::SupervisorExternal) => {
    80006824:	10914503          	lbu	a0,265(sp)
    80006828:	f92a                	sd	a0,176(sp)
    8000682a:	4585                	li	a1,1
    8000682c:	42b50463          	beq	a0,a1,80006c54 <.LBB3_118+0x22>
    80006830:	a009                	j	80006832 <.LBB3_84+0x64>
    80006832:	754a                	ld	a0,176(sp)
    80006834:	4595                	li	a1,5
    80006836:	34b50f63          	beq	a0,a1,80006b94 <.LBB3_114+0x14>
    8000683a:	a009                	j	8000683c <.LBB3_16>

000000008000683c <.LBB3_16>:
            // give up the cpu. 
            CPU_MANAGER.mycpu().try_yield_proc();
        }

        _ => {       
            panic!("Unresolved Trap!");
    8000683c:	0001f517          	auipc	a0,0x1f
    80006840:	f0450513          	addi	a0,a0,-252 # 80025740 <.L__unnamed_35+0xc8>

0000000080006844 <.LBB3_86>:
    80006844:	00020617          	auipc	a2,0x20
    80006848:	47c60613          	addi	a2,a2,1148 # 80026cc0 <.L__unnamed_19>
    8000684c:	45c1                	li	a1,16
    8000684e:	0001c097          	auipc	ra,0x1c
    80006852:	a28080e7          	jalr	-1496(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80006856:	0000                	unimp
        Trap::Exception(Exception::Breakpoint) => {
    80006858:	10914503          	lbu	a0,265(sp)
    8000685c:	fff50593          	addi	a1,a0,-1
    80006860:	f52e                	sd	a1,168(sp)
    80006862:	4529                	li	a0,10
    80006864:	fcb56ce3          	bltu	a0,a1,8000683c <.LBB3_16>
    80006868:	752a                	ld	a0,168(sp)
    8000686a:	050e                	slli	a0,a0,0x3

000000008000686c <.LBB3_87>:
    8000686c:	00020597          	auipc	a1,0x20
    80006870:	e3458593          	addi	a1,a1,-460 # 800266a0 <.LJTI3_0>
    80006874:	952e                	add	a0,a0,a1
    80006876:	6108                	ld	a0,0(a0)
    80006878:	8502                	jr	a0

000000008000687a <.LBB3_19>:
            local_spec += 2;
    8000687a:	75ee                	ld	a1,248(sp)
    8000687c:	00258513          	addi	a0,a1,2
    80006880:	f12a                	sd	a0,160(sp)
    80006882:	44b56263          	bltu	a0,a1,80006cc6 <.LBB3_120>
    80006886:	a009                	j	80006888 <.LBB3_19+0xe>
    80006888:	750a                	ld	a0,160(sp)
    8000688a:	fdaa                	sd	a0,248(sp)

000000008000688c <.LBB3_88>:
            println!("BreakPoint!");
    8000688c:	00020597          	auipc	a1,0x20
    80006890:	3dc58593          	addi	a1,a1,988 # 80026c68 <.L__unnamed_20>

0000000080006894 <.LBB3_89>:
    80006894:	00020697          	auipc	a3,0x20
    80006898:	35c68693          	addi	a3,a3,860 # 80026bf0 <.L__unnamed_53>
    8000689c:	0a08                	addi	a0,sp,272
    8000689e:	4605                	li	a2,1
    800068a0:	4701                	li	a4,0
    800068a2:	fffff097          	auipc	ra,0xfffff
    800068a6:	bc8080e7          	jalr	-1080(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    800068aa:	a009                	j	800068ac <.LBB3_89+0x18>
    800068ac:	0a08                	addi	a0,sp,272
    800068ae:	00017097          	auipc	ra,0x17
    800068b2:	49e080e7          	jalr	1182(ra) # 8001dd4c <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    800068b6:	a009                	j	800068b8 <.LBB3_89+0x24>
    match scause.cause() {
    800068b8:	a6f5                	j	80006ca4 <.LBB3_119+0x22>

00000000800068ba <.LBB3_23>:
        Trap::Exception(Exception::LoadFault) => panic!("Load Fault!"),
    800068ba:	00020517          	auipc	a0,0x20
    800068be:	35e50513          	addi	a0,a0,862 # 80026c18 <.L__unnamed_22>

00000000800068c2 <.LBB3_91>:
    800068c2:	00020617          	auipc	a2,0x20
    800068c6:	36660613          	addi	a2,a2,870 # 80026c28 <.L__unnamed_23>
    800068ca:	45ad                	li	a1,11
    800068cc:	0001c097          	auipc	ra,0x1c
    800068d0:	9aa080e7          	jalr	-1622(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

00000000800068d6 <.LBB3_24>:
    800068d6:	1988                	addi	a0,sp,240
            panic!("[Panic] Load Page Fault!\n stval: 0x{:x}\n sepc: 0x{:x}\n", stval, sepc);
    800068d8:	eb2a                	sd	a0,400(sp)
    800068da:	11ac                	addi	a1,sp,232
    800068dc:	e52e                	sd	a1,136(sp)
    800068de:	ef2e                	sd	a1,408(sp)
    800068e0:	3aa13423          	sd	a0,936(sp)
    800068e4:	3ab13823          	sd	a1,944(sp)

00000000800068e8 <.LBB3_92>:
    800068e8:	0001e597          	auipc	a1,0x1e
    800068ec:	acc58593          	addi	a1,a1,-1332 # 800243b4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h760b07191d46b3f2E>
    800068f0:	00019097          	auipc	ra,0x19
    800068f4:	db0080e7          	jalr	-592(ra) # 8001f6a0 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    800068f8:	e92a                	sd	a0,144(sp)
    800068fa:	ed2e                	sd	a1,152(sp)
    800068fc:	a009                	j	800068fe <.LBB3_92+0x16>
    800068fe:	652a                	ld	a0,136(sp)

0000000080006900 <.LBB3_93>:
    80006900:	0001e597          	auipc	a1,0x1e
    80006904:	ab458593          	addi	a1,a1,-1356 # 800243b4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h760b07191d46b3f2E>
    80006908:	00019097          	auipc	ra,0x19
    8000690c:	d98080e7          	jalr	-616(ra) # 8001f6a0 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    80006910:	fcaa                	sd	a0,120(sp)
    80006912:	e12e                	sd	a1,128(sp)
    80006914:	a009                	j	80006916 <.LBB3_93+0x16>
    80006916:	650a                	ld	a0,128(sp)
    80006918:	75e6                	ld	a1,120(sp)
    8000691a:	666a                	ld	a2,152(sp)
    8000691c:	66ca                	ld	a3,144(sp)
    8000691e:	fab6                	sd	a3,368(sp)
    80006920:	feb2                	sd	a2,376(sp)
    80006922:	e32e                	sd	a1,384(sp)
    80006924:	e72a                	sd	a0,392(sp)

0000000080006926 <.LBB3_94>:
    80006926:	00020597          	auipc	a1,0x20
    8000692a:	1aa58593          	addi	a1,a1,426 # 80026ad0 <.L__unnamed_24>
    8000692e:	0288                	addi	a0,sp,320
    80006930:	460d                	li	a2,3
    80006932:	1a94                	addi	a3,sp,368
    80006934:	4709                	li	a4,2
    80006936:	fffff097          	auipc	ra,0xfffff
    8000693a:	b34080e7          	jalr	-1228(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8000693e:	a009                	j	80006940 <.LBB3_95>

0000000080006940 <.LBB3_95>:
    80006940:	00020597          	auipc	a1,0x20
    80006944:	1c058593          	addi	a1,a1,448 # 80026b00 <.L__unnamed_25>
    80006948:	0288                	addi	a0,sp,320
    8000694a:	0001c097          	auipc	ra,0x1c
    8000694e:	998080e7          	jalr	-1640(ra) # 800222e2 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
	...

0000000080006954 <.LBB3_28>:
    80006954:	1988                	addi	a0,sp,240
            panic!("[Panic] Store Page Fault!\n stval: 0x{:x}\n sepc: 0x{:x}\n", stval, sepc);
    80006956:	fbaa                	sd	a0,496(sp)
    80006958:	11ac                	addi	a1,sp,232
    8000695a:	f0ae                	sd	a1,96(sp)
    8000695c:	ffae                	sd	a1,504(sp)
    8000695e:	38a13c23          	sd	a0,920(sp)
    80006962:	3ab13023          	sd	a1,928(sp)

0000000080006966 <.LBB3_96>:
    80006966:	0001e597          	auipc	a1,0x1e
    8000696a:	a4e58593          	addi	a1,a1,-1458 # 800243b4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h760b07191d46b3f2E>
    8000696e:	00019097          	auipc	ra,0x19
    80006972:	d32080e7          	jalr	-718(ra) # 8001f6a0 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    80006976:	f4aa                	sd	a0,104(sp)
    80006978:	f8ae                	sd	a1,112(sp)
    8000697a:	a009                	j	8000697c <.LBB3_96+0x16>
    8000697c:	7506                	ld	a0,96(sp)

000000008000697e <.LBB3_97>:
    8000697e:	0001e597          	auipc	a1,0x1e
    80006982:	a3658593          	addi	a1,a1,-1482 # 800243b4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h760b07191d46b3f2E>
    80006986:	00019097          	auipc	ra,0x19
    8000698a:	d1a080e7          	jalr	-742(ra) # 8001f6a0 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    8000698e:	e8aa                	sd	a0,80(sp)
    80006990:	ecae                	sd	a1,88(sp)
    80006992:	a009                	j	80006994 <.LBB3_97+0x16>
    80006994:	6566                	ld	a0,88(sp)
    80006996:	65c6                	ld	a1,80(sp)
    80006998:	7646                	ld	a2,112(sp)
    8000699a:	76a6                	ld	a3,104(sp)
    8000699c:	ebb6                	sd	a3,464(sp)
    8000699e:	efb2                	sd	a2,472(sp)
    800069a0:	f3ae                	sd	a1,480(sp)
    800069a2:	f7aa                	sd	a0,488(sp)

00000000800069a4 <.LBB3_98>:
    800069a4:	00020597          	auipc	a1,0x20
    800069a8:	0bc58593          	addi	a1,a1,188 # 80026a60 <.L__unnamed_26>
    800069ac:	1308                	addi	a0,sp,416
    800069ae:	460d                	li	a2,3
    800069b0:	0b94                	addi	a3,sp,464
    800069b2:	4709                	li	a4,2
    800069b4:	fffff097          	auipc	ra,0xfffff
    800069b8:	ab6080e7          	jalr	-1354(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    800069bc:	a009                	j	800069be <.LBB3_99>

00000000800069be <.LBB3_99>:
    800069be:	00020597          	auipc	a1,0x20
    800069c2:	0d258593          	addi	a1,a1,210 # 80026a90 <.L__unnamed_27>
    800069c6:	1308                	addi	a0,sp,416
    800069c8:	0001c097          	auipc	ra,0x1c
    800069cc:	91a080e7          	jalr	-1766(ra) # 800222e2 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
	...

00000000800069d2 <.LBB3_32>:
    800069d2:	750e                	ld	a0,224(sp)
    800069d4:	45a1                	li	a1,8
                SHUTDOWN => {
    800069d6:	02b50663          	beq	a0,a1,80006a02 <.LBB3_102>
    800069da:	a009                	j	800069dc <.LBB3_32+0xa>
    800069dc:	750e                	ld	a0,224(sp)
    800069de:	45a5                	li	a1,9
    800069e0:	04b50f63          	beq	a0,a1,80006a3e <.LBB3_104>
    800069e4:	a009                	j	800069e6 <.LBB3_100>

00000000800069e6 <.LBB3_100>:
                    panic!("Unresolved Kernel Syscall!");
    800069e6:	00020517          	auipc	a0,0x20
    800069ea:	1aa50513          	addi	a0,a0,426 # 80026b90 <.L__unnamed_28>

00000000800069ee <.LBB3_101>:
    800069ee:	00020617          	auipc	a2,0x20
    800069f2:	1c260613          	addi	a2,a2,450 # 80026bb0 <.L__unnamed_29>
    800069f6:	45e9                	li	a1,26
    800069f8:	0001c097          	auipc	ra,0x1c
    800069fc:	87e080e7          	jalr	-1922(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080006a02 <.LBB3_102>:
                    println!("\x1b[1;31mShutdown!\x1b[0m");
    80006a02:	00020597          	auipc	a1,0x20
    80006a06:	20658593          	addi	a1,a1,518 # 80026c08 <.L__unnamed_30>

0000000080006a0a <.LBB3_103>:
    80006a0a:	00020697          	auipc	a3,0x20
    80006a0e:	1e668693          	addi	a3,a3,486 # 80026bf0 <.L__unnamed_53>
    80006a12:	0408                	addi	a0,sp,512
    80006a14:	4605                	li	a2,1
    80006a16:	4701                	li	a4,0
    80006a18:	fffff097          	auipc	ra,0xfffff
    80006a1c:	a52080e7          	jalr	-1454(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80006a20:	a009                	j	80006a22 <.LBB3_103+0x18>
    80006a22:	0408                	addi	a0,sp,512
    80006a24:	00017097          	auipc	ra,0x17
    80006a28:	328080e7          	jalr	808(ra) # 8001dd4c <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    80006a2c:	a009                	j	80006a2e <.LBB3_103+0x24>
    80006a2e:	4581                	li	a1,0
                    system_reset(
    80006a30:	852e                	mv	a0,a1
    80006a32:	fffff097          	auipc	ra,0xfffff
    80006a36:	8cc080e7          	jalr	-1844(ra) # 800052fe <_ZN6kernel8shutdown12system_reset17h91571bbff266ab01E>
    80006a3a:	a009                	j	80006a3c <.LBB3_103+0x32>
            match which  {
    80006a3c:	a4a5                	j	80006ca4 <.LBB3_119+0x22>

0000000080006a3e <.LBB3_104>:
                    println!("\x1b[1;31mReboot!\x1b[0m");
    80006a3e:	00020597          	auipc	a1,0x20
    80006a42:	1a258593          	addi	a1,a1,418 # 80026be0 <.L__unnamed_31>

0000000080006a46 <.LBB3_105>:
    80006a46:	00020697          	auipc	a3,0x20
    80006a4a:	1aa68693          	addi	a3,a3,426 # 80026bf0 <.L__unnamed_53>
    80006a4e:	1c08                	addi	a0,sp,560
    80006a50:	4605                	li	a2,1
    80006a52:	4701                	li	a4,0
    80006a54:	fffff097          	auipc	ra,0xfffff
    80006a58:	a16080e7          	jalr	-1514(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80006a5c:	a009                	j	80006a5e <.LBB3_105+0x18>
    80006a5e:	1c08                	addi	a0,sp,560
    80006a60:	00017097          	auipc	ra,0x17
    80006a64:	2ec080e7          	jalr	748(ra) # 8001dd4c <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    80006a68:	a009                	j	80006a6a <.LBB3_105+0x24>
    80006a6a:	4505                	li	a0,1
    80006a6c:	4581                	li	a1,0
                    system_reset(
    80006a6e:	fffff097          	auipc	ra,0xfffff
    80006a72:	890080e7          	jalr	-1904(ra) # 800052fe <_ZN6kernel8shutdown12system_reset17h91571bbff266ab01E>
    80006a76:	a009                	j	80006a78 <.LBB3_105+0x32>
            match which  {
    80006a78:	a435                	j	80006ca4 <.LBB3_119+0x22>

0000000080006a7a <.LBB3_43>:
    80006a7a:	11a8                	addi	a0,sp,232
        Trap::Exception(Exception::InstructionFault) => panic!("Instruction Fault, sepc: 0x{:x}", sepc),
    80006a7c:	2aa13023          	sd	a0,672(sp)
    80006a80:	3ca13423          	sd	a0,968(sp)

0000000080006a84 <.LBB3_106>:
    80006a84:	0001e597          	auipc	a1,0x1e
    80006a88:	93058593          	addi	a1,a1,-1744 # 800243b4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h760b07191d46b3f2E>
    80006a8c:	00019097          	auipc	ra,0x19
    80006a90:	c14080e7          	jalr	-1004(ra) # 8001f6a0 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    80006a94:	e0aa                	sd	a0,64(sp)
    80006a96:	e4ae                	sd	a1,72(sp)
    80006a98:	a009                	j	80006a9a <.LBB3_106+0x16>
    80006a9a:	6526                	ld	a0,72(sp)
    80006a9c:	6586                	ld	a1,64(sp)
    80006a9e:	28b13823          	sd	a1,656(sp)
    80006aa2:	28a13c23          	sd	a0,664(sp)

0000000080006aa6 <.LBB3_107>:
    80006aa6:	00020597          	auipc	a1,0x20
    80006aaa:	1f258593          	addi	a1,a1,498 # 80026c98 <.L__unnamed_32>
    80006aae:	1488                	addi	a0,sp,608
    80006ab0:	0d14                	addi	a3,sp,656
    80006ab2:	4705                	li	a4,1
    80006ab4:	863a                	mv	a2,a4
    80006ab6:	fffff097          	auipc	ra,0xfffff
    80006aba:	9b4080e7          	jalr	-1612(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80006abe:	a009                	j	80006ac0 <.LBB3_108>

0000000080006ac0 <.LBB3_108>:
    80006ac0:	00020597          	auipc	a1,0x20
    80006ac4:	1e858593          	addi	a1,a1,488 # 80026ca8 <.L__unnamed_33>
    80006ac8:	1488                	addi	a0,sp,608
    80006aca:	0001c097          	auipc	ra,0x1c
    80006ace:	818080e7          	jalr	-2024(ra) # 800222e2 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
	...

0000000080006ad4 <.LBB3_46>:
    80006ad4:	11a8                	addi	a0,sp,232
            println!("sepc: 0x{:x}", sepc);
    80006ad6:	2ea13423          	sd	a0,744(sp)
    80006ada:	3aa13c23          	sd	a0,952(sp)

0000000080006ade <.LBB3_109>:
    80006ade:	0001e597          	auipc	a1,0x1e
    80006ae2:	8d658593          	addi	a1,a1,-1834 # 800243b4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h760b07191d46b3f2E>
    80006ae6:	00019097          	auipc	ra,0x19
    80006aea:	bba080e7          	jalr	-1094(ra) # 8001f6a0 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    80006aee:	f82a                	sd	a0,48(sp)
    80006af0:	fc2e                	sd	a1,56(sp)
    80006af2:	a009                	j	80006af4 <.LBB3_109+0x16>
    80006af4:	7562                	ld	a0,56(sp)
    80006af6:	75c2                	ld	a1,48(sp)
    80006af8:	2cb13c23          	sd	a1,728(sp)
    80006afc:	2ea13023          	sd	a0,736(sp)

0000000080006b00 <.LBB3_110>:
    80006b00:	00020597          	auipc	a1,0x20
    80006b04:	01858593          	addi	a1,a1,24 # 80026b18 <.L__unnamed_34>
    80006b08:	1528                	addi	a0,sp,680
    80006b0a:	4609                	li	a2,2
    80006b0c:	0db4                	addi	a3,sp,728
    80006b0e:	4705                	li	a4,1
    80006b10:	fffff097          	auipc	ra,0xfffff
    80006b14:	95a080e7          	jalr	-1702(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80006b18:	a009                	j	80006b1a <.LBB3_110+0x1a>
    80006b1a:	1528                	addi	a0,sp,680
    80006b1c:	00017097          	auipc	ra,0x17
    80006b20:	230080e7          	jalr	560(ra) # 8001dd4c <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    80006b24:	a009                	j	80006b26 <.LBB3_110+0x26>
    80006b26:	1988                	addi	a0,sp,240
            println!("stval: 0x{:x}", stval);
    80006b28:	32a13823          	sd	a0,816(sp)
    80006b2c:	3ca13023          	sd	a0,960(sp)

0000000080006b30 <.LBB3_111>:
    80006b30:	0001e597          	auipc	a1,0x1e
    80006b34:	88458593          	addi	a1,a1,-1916 # 800243b4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h760b07191d46b3f2E>
    80006b38:	00019097          	auipc	ra,0x19
    80006b3c:	b68080e7          	jalr	-1176(ra) # 8001f6a0 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    80006b40:	f02a                	sd	a0,32(sp)
    80006b42:	f42e                	sd	a1,40(sp)
    80006b44:	a009                	j	80006b46 <.LBB3_111+0x16>
    80006b46:	7522                	ld	a0,40(sp)
    80006b48:	7582                	ld	a1,32(sp)
    80006b4a:	32b13023          	sd	a1,800(sp)
    80006b4e:	32a13423          	sd	a0,808(sp)

0000000080006b52 <.LBB3_112>:
    80006b52:	00020597          	auipc	a1,0x20
    80006b56:	ff658593          	addi	a1,a1,-10 # 80026b48 <.L__unnamed_35>
    80006b5a:	1d88                	addi	a0,sp,752
    80006b5c:	4609                	li	a2,2
    80006b5e:	1614                	addi	a3,sp,800
    80006b60:	4705                	li	a4,1
    80006b62:	fffff097          	auipc	ra,0xfffff
    80006b66:	908080e7          	jalr	-1784(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80006b6a:	a009                	j	80006b6c <.LBB3_112+0x1a>
    80006b6c:	1d88                	addi	a0,sp,752
    80006b6e:	00017097          	auipc	ra,0x17
    80006b72:	1de080e7          	jalr	478(ra) # 8001dd4c <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    80006b76:	a009                	j	80006b78 <.LBB3_113>

0000000080006b78 <.LBB3_113>:
            panic!();
    80006b78:	00020517          	auipc	a0,0x20
    80006b7c:	ff050513          	addi	a0,a0,-16 # 80026b68 <.L__unnamed_36>

0000000080006b80 <.LBB3_114>:
    80006b80:	00020617          	auipc	a2,0x20
    80006b84:	ff860613          	addi	a2,a2,-8 # 80026b78 <.L__unnamed_37>
    80006b88:	45b9                	li	a1,14
    80006b8a:	0001b097          	auipc	ra,0x1b
    80006b8e:	6ec080e7          	jalr	1772(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80006b92:	0000                	unimp
            if let Some(interrupt) = plic_claim() {
    80006b94:	00017097          	auipc	ra,0x17
    80006b98:	f36080e7          	jalr	-202(ra) # 8001daca <_ZN6kernel6driver4plic10plic_claim17h6764dad227b44c96E>
    80006b9c:	32a12c23          	sw	a0,824(sp)
    80006ba0:	32b12e23          	sw	a1,828(sp)
    80006ba4:	a009                	j	80006ba6 <.LBB3_114+0x26>
    80006ba6:	33812503          	lw	a0,824(sp)
    80006baa:	4581                	li	a1,0
    80006bac:	00b51463          	bne	a0,a1,80006bb4 <.LBB3_114+0x34>
    80006bb0:	a009                	j	80006bb2 <.LBB3_114+0x32>
    80006bb2:	a8cd                	j	80006ca4 <.LBB3_119+0x22>
    80006bb4:	33c12503          	lw	a0,828(sp)
    80006bb8:	02051593          	slli	a1,a0,0x20
    80006bbc:	9181                	srli	a1,a1,0x20
    80006bbe:	ec2e                	sd	a1,24(sp)
    80006bc0:	3ca12a23          	sw	a0,980(sp)
    80006bc4:	4585                	li	a1,1
                    VIRTIO0_IRQ => {
    80006bc6:	02b50763          	beq	a0,a1,80006bf4 <.LBB3_117>
    80006bca:	a009                	j	80006bcc <.LBB3_114+0x4c>
    80006bcc:	6562                	ld	a0,24(sp)
    80006bce:	2501                	sext.w	a0,a0
    80006bd0:	45a9                	li	a1,10
    80006bd2:	06b50063          	beq	a0,a1,80006c32 <.LBB3_118>
    80006bd6:	a009                	j	80006bd8 <.LBB3_115>

0000000080006bd8 <.LBB3_115>:
                        panic!("Unresolved interrupt");
    80006bd8:	00020517          	auipc	a0,0x20
    80006bdc:	d0850513          	addi	a0,a0,-760 # 800268e0 <.L__unnamed_4>

0000000080006be0 <.LBB3_116>:
    80006be0:	00020617          	auipc	a2,0x20
    80006be4:	0f860613          	addi	a2,a2,248 # 80026cd8 <.L__unnamed_38>
    80006be8:	45d1                	li	a1,20
    80006bea:	0001b097          	auipc	ra,0x1b
    80006bee:	68c080e7          	jalr	1676(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080006bf4 <.LBB3_117>:
                        DISK.acquire().intr();
    80006bf4:	00065517          	auipc	a0,0x65
    80006bf8:	40c50513          	addi	a0,a0,1036 # 8006c000 <_ZN6kernel6driver11virtio_disk4DISK17h9e8917083150b34aE>
    80006bfc:	0000a097          	auipc	ra,0xa
    80006c00:	b32080e7          	jalr	-1230(ra) # 8001072e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h922bace5232f6228E>
    80006c04:	34a13023          	sd	a0,832(sp)
    80006c08:	a009                	j	80006c0a <.LBB3_117+0x16>
    80006c0a:	0688                	addi	a0,sp,832
    80006c0c:	0000b097          	auipc	ra,0xb
    80006c10:	a8c080e7          	jalr	-1396(ra) # 80011698 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h362a59dae1fa4f35E>
    80006c14:	e82a                	sd	a0,16(sp)
    80006c16:	a009                	j	80006c18 <.LBB3_117+0x24>
    80006c18:	6542                	ld	a0,16(sp)
    80006c1a:	00018097          	auipc	ra,0x18
    80006c1e:	6aa080e7          	jalr	1706(ra) # 8001f2c4 <_ZN6kernel6driver11virtio_disk4Disk4intr17h780fdb71fd330281E>
    80006c22:	a009                	j	80006c24 <.LBB3_117+0x30>
    80006c24:	0688                	addi	a0,sp,832
    80006c26:	00000097          	auipc	ra,0x0
    80006c2a:	472080e7          	jalr	1138(ra) # 80007098 <_ZN4core3ptr99drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..driver..virtio_disk..Disk$GT$$GT$17h4fc01c278f0bfe6cE>
    80006c2e:	a009                	j	80006c30 <.LBB3_117+0x3c>
                match interrupt {
    80006c30:	a819                	j	80006c46 <.LBB3_118+0x14>

0000000080006c32 <.LBB3_118>:
                        UART.intr();
    80006c32:	00063517          	auipc	a0,0x63
    80006c36:	c2e50513          	addi	a0,a0,-978 # 80069860 <_ZN6kernel6driver4uart4UART17h0708b3e179d548ddE>
    80006c3a:	00003097          	auipc	ra,0x3
    80006c3e:	0d2080e7          	jalr	210(ra) # 80009d0c <_ZN6kernel6driver4uart84_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..driver..uart..Uart$GT$$GT$4intr17h862db3ca167d2b66E>
    80006c42:	a009                	j	80006c44 <.LBB3_118+0x12>
                match interrupt {
    80006c44:	a009                	j	80006c46 <.LBB3_118+0x14>
                plic_complete(interrupt);
    80006c46:	6562                	ld	a0,24(sp)
    80006c48:	00017097          	auipc	ra,0x17
    80006c4c:	edc080e7          	jalr	-292(ra) # 8001db24 <_ZN6kernel6driver4plic13plic_complete17hc3a23eee8594fbc3E>
    80006c50:	a009                	j	80006c52 <.LBB3_118+0x20>
            if let Some(interrupt) = plic_claim() {
    80006c52:	a889                	j	80006ca4 <.LBB3_119+0x22>
            if cpu::cpuid() == 0{
    80006c54:	0000b097          	auipc	ra,0xb
    80006c58:	142080e7          	jalr	322(ra) # 80011d96 <_ZN6kernel7process3cpu5cpuid17h605093a6a9a60164E>
    80006c5c:	e42a                	sd	a0,8(sp)
    80006c5e:	a009                	j	80006c60 <.LBB3_118+0x2e>
    80006c60:	6522                	ld	a0,8(sp)
    80006c62:	4581                	li	a1,0
    80006c64:	00b51863          	bne	a0,a1,80006c74 <.LBB3_118+0x42>
    80006c68:	a009                	j	80006c6a <.LBB3_118+0x38>
                clock_intr();
    80006c6a:	00000097          	auipc	ra,0x0
    80006c6e:	078080e7          	jalr	120(ra) # 80006ce2 <_ZN6kernel4trap10clock_intr17h80b4decf617479a4E>
    80006c72:	a011                	j	80006c76 <.LBB3_118+0x44>
            if cpu::cpuid() == 0{
    80006c74:	a011                	j	80006c78 <.LBB3_118+0x46>
    80006c76:	a009                	j	80006c78 <.LBB3_118+0x46>
            sip::clear_ssip();
    80006c78:	00017097          	auipc	ra,0x17
    80006c7c:	c66080e7          	jalr	-922(ra) # 8001d8de <_ZN6kernel4arch5riscv8register3sip10clear_ssip17h3546c4610df6574fE>
    80006c80:	a009                	j	80006c82 <.LBB3_119>

0000000080006c82 <.LBB3_119>:
            CPU_MANAGER.mycpu().try_yield_proc();
    80006c82:	0006c517          	auipc	a0,0x6c
    80006c86:	4be50513          	addi	a0,a0,1214 # 80073140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    80006c8a:	0000b097          	auipc	ra,0xb
    80006c8e:	128080e7          	jalr	296(ra) # 80011db2 <_ZN6kernel7process3cpu10CPUManager5mycpu17hac5ae6ce2070e7c3E>
    80006c92:	e02a                	sd	a0,0(sp)
    80006c94:	a009                	j	80006c96 <.LBB3_119+0x14>
    80006c96:	6502                	ld	a0,0(sp)
    80006c98:	0000b097          	auipc	ra,0xb
    80006c9c:	514080e7          	jalr	1300(ra) # 800121ac <_ZN6kernel7process3cpu3CPU14try_yield_proc17hdb175aaf084d8a03E>
    80006ca0:	a009                	j	80006ca2 <.LBB3_119+0x20>
    match scause.cause() {
    80006ca2:	a009                	j	80006ca4 <.LBB3_119+0x22>
        }
    }
    // store context
    sepc::write(local_spec);
    80006ca4:	756e                	ld	a0,248(sp)
    80006ca6:	ffffe097          	auipc	ra,0xffffe
    80006caa:	f34080e7          	jalr	-204(ra) # 80004bda <_ZN6kernel4arch5riscv8register4sepc5write17h2074fd389defa9f2E>
    80006cae:	a009                	j	80006cb0 <.LBB3_119+0x2e>
    sstatus::write(sstatus);
    80006cb0:	656e                	ld	a0,216(sp)
    80006cb2:	00017097          	auipc	ra,0x17
    80006cb6:	648080e7          	jalr	1608(ra) # 8001e2fa <_ZN6kernel4arch5riscv8register7sstatus5write17h2e3a8152fe4defdaE>
    80006cba:	a009                	j	80006cbc <.LBB3_119+0x3a>

}
    80006cbc:	3d813083          	ld	ra,984(sp)
    80006cc0:	3e010113          	addi	sp,sp,992
    80006cc4:	8082                	ret

0000000080006cc6 <.LBB3_120>:
            local_spec += 2;
    80006cc6:	00020517          	auipc	a0,0x20
    80006cca:	cba50513          	addi	a0,a0,-838 # 80026980 <str.1>

0000000080006cce <.LBB3_121>:
    80006cce:	00020617          	auipc	a2,0x20
    80006cd2:	f7260613          	addi	a2,a2,-142 # 80026c40 <.L__unnamed_39>
    80006cd6:	45f1                	li	a1,28
    80006cd8:	0001b097          	auipc	ra,0x1b
    80006cdc:	59e080e7          	jalr	1438(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel4trap10clock_intr17h80b4decf617479a4E:

0000000080006ce2 <_ZN6kernel4trap10clock_intr17h80b4decf617479a4E>:


pub unsafe fn clock_intr(){
    80006ce2:	7179                	addi	sp,sp,-48
    let mut ticks = TICKS_LOCK.acquire();
    80006ce4:	f406                	sd	ra,40(sp)

0000000080006ce6 <.LBB4_7>:
    80006ce6:	00031517          	auipc	a0,0x31
    80006cea:	83250513          	addi	a0,a0,-1998 # 80037518 <_ZN6kernel4trap10TICKS_LOCK17hd80a843c812fe4caE>
    80006cee:	0000a097          	auipc	ra,0xa
    80006cf2:	c00080e7          	jalr	-1024(ra) # 800108ee <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17he33ed4c8b2ffa030E>
    80006cf6:	f02a                	sd	a0,32(sp)
    80006cf8:	a009                	j	80006cfa <.LBB4_7+0x14>
    80006cfa:	1008                	addi	a0,sp,32
    *ticks = *ticks + 1;
    80006cfc:	0000b097          	auipc	ra,0xb
    80006d00:	8be080e7          	jalr	-1858(ra) # 800115ba <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h570d144f846c2ec7E>
    80006d04:	ec2a                	sd	a0,24(sp)
    80006d06:	a009                	j	80006d08 <.LBB4_7+0x22>
    80006d08:	6562                	ld	a0,24(sp)
    80006d0a:	610c                	ld	a1,0(a0)
    80006d0c:	00158513          	addi	a0,a1,1
    80006d10:	e82a                	sd	a0,16(sp)
    80006d12:	02b56663          	bltu	a0,a1,80006d3e <.LBB4_8>
    80006d16:	a009                	j	80006d18 <.LBB4_7+0x32>
    80006d18:	1008                	addi	a0,sp,32
    80006d1a:	0000b097          	auipc	ra,0xb
    80006d1e:	a3c080e7          	jalr	-1476(ra) # 80011756 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h8532990243dc594eE>
    80006d22:	e42a                	sd	a0,8(sp)
    80006d24:	a009                	j	80006d26 <.LBB4_7+0x40>
    80006d26:	6542                	ld	a0,16(sp)
    80006d28:	65a2                	ld	a1,8(sp)
    80006d2a:	e188                	sd	a0,0(a1)
    drop(ticks);
    80006d2c:	7502                	ld	a0,32(sp)
    80006d2e:	00016097          	auipc	ra,0x16
    80006d32:	2da080e7          	jalr	730(ra) # 8001d008 <_ZN4core3mem4drop17h0acc999538dd9281E>
    80006d36:	a009                	j	80006d38 <.LBB4_7+0x52>
}
    80006d38:	70a2                	ld	ra,40(sp)
    80006d3a:	6145                	addi	sp,sp,48
    80006d3c:	8082                	ret

0000000080006d3e <.LBB4_8>:
    *ticks = *ticks + 1;
    80006d3e:	00020517          	auipc	a0,0x20
    80006d42:	c4250513          	addi	a0,a0,-958 # 80026980 <str.1>

0000000080006d46 <.LBB4_9>:
    80006d46:	00020617          	auipc	a2,0x20
    80006d4a:	faa60613          	addi	a2,a2,-86 # 80026cf0 <.L__unnamed_40>
    80006d4e:	45f1                	li	a1,28
    80006d50:	0001b097          	auipc	ra,0x1b
    80006d54:	526080e7          	jalr	1318(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN4core3ops8function6FnOnce9call_once17h5aa9a10c33b479e6E:

0000000080006d5a <_ZN4core3ops8function6FnOnce9call_once17h5aa9a10c33b479e6E>:
    #[stable(feature = "fn_once_output", since = "1.12.0")]
    type Output;

    /// Performs the call operation.
    #[unstable(feature = "fn_traits", issue = "29625")]
    extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
    80006d5a:	7179                	addi	sp,sp,-48
    80006d5c:	f406                	sd	ra,40(sp)
    80006d5e:	e82a                	sd	a0,16(sp)
    80006d60:	ec2e                	sd	a1,24(sp)
    80006d62:	00015097          	auipc	ra,0x15
    80006d66:	9f6080e7          	jalr	-1546(ra) # 8001b758 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h6e23c4cf8dccfdcdE>
    80006d6a:	e42a                	sd	a0,8(sp)
    80006d6c:	a009                	j	80006d6e <_ZN4core3ops8function6FnOnce9call_once17h5aa9a10c33b479e6E+0x14>
    80006d6e:	6522                	ld	a0,8(sp)
    80006d70:	70a2                	ld	ra,40(sp)
    80006d72:	6145                	addi	sp,sp,48
    80006d74:	8082                	ret

Disassembly of section .text._ZN4core3ptr116drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$$u5b$kernel..fs..inode..InodeMeta$u3b$$u20$50$u5d$$GT$$GT$17h4e8573cf3b362114E:

0000000080006d76 <_ZN4core3ptr116drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$$u5b$kernel..fs..inode..InodeMeta$u3b$$u20$50$u5d$$GT$$GT$17h4e8573cf3b362114E>:
/// i.e., you do not usually have to worry about such issues unless you call `drop_in_place`
/// manually.
#[stable(feature = "drop_in_place", since = "1.8.0")]
#[lang = "drop_in_place"]
#[allow(unconditional_recursion)]
pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
    80006d76:	1141                	addi	sp,sp,-16
    80006d78:	e406                	sd	ra,8(sp)
    80006d7a:	e02a                	sd	a0,0(sp)
    80006d7c:	00000097          	auipc	ra,0x0
    80006d80:	520080e7          	jalr	1312(ra) # 8000729c <_ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h1d31607f4cd7f071E>
    80006d84:	a009                	j	80006d86 <_ZN4core3ptr116drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$$u5b$kernel..fs..inode..InodeMeta$u3b$$u20$50$u5d$$GT$$GT$17h4e8573cf3b362114E+0x10>
    80006d86:	60a2                	ld	ra,8(sp)
    80006d88:	0141                	addi	sp,sp,16
    80006d8a:	8082                	ret

Disassembly of section .text._ZN4core3ptr119drop_in_place$LT$$u5b$core..option..Option$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$$u3b$$u20$100$u5d$$GT$17ha293b69a65138838E:

0000000080006d8c <_ZN4core3ptr119drop_in_place$LT$$u5b$core..option..Option$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$$u3b$$u20$100$u5d$$GT$17ha293b69a65138838E>:
    80006d8c:	7179                	addi	sp,sp,-48
    80006d8e:	f406                	sd	ra,40(sp)
    80006d90:	e02a                	sd	a0,0(sp)
    80006d92:	f02a                	sd	a0,32(sp)
    80006d94:	4501                	li	a0,0
    80006d96:	e51d                	bnez	a0,80006dc4 <_ZN4core3ptr119drop_in_place$LT$$u5b$core..option..Option$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$$u3b$$u20$100$u5d$$GT$17ha293b69a65138838E+0x38>
    80006d98:	a0b9                	j	80006de6 <_ZN4core3ptr119drop_in_place$LT$$u5b$core..option..Option$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$$u3b$$u20$100$u5d$$GT$17ha293b69a65138838E+0x5a>
    80006d9a:	70a2                	ld	ra,40(sp)
    80006d9c:	6145                	addi	sp,sp,48
    80006d9e:	8082                	ret
    80006da0:	6502                	ld	a0,0(sp)
    80006da2:	65a2                	ld	a1,8(sp)
    80006da4:	00359613          	slli	a2,a1,0x3
    80006da8:	9532                	add	a0,a0,a2
    80006daa:	0585                	addi	a1,a1,1
    80006dac:	e42e                	sd	a1,8(sp)
    80006dae:	00000097          	auipc	ra,0x0
    80006db2:	29a080e7          	jalr	666(ra) # 80007048 <_ZN4core3ptr96drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$$GT$17hc79d9c89cd1d7f36E>
    80006db6:	a009                	j	80006db8 <_ZN4core3ptr119drop_in_place$LT$$u5b$core..option..Option$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$$u3b$$u20$100$u5d$$GT$17ha293b69a65138838E+0x2c>
    80006db8:	6522                	ld	a0,8(sp)
    80006dba:	06400593          	li	a1,100
    80006dbe:	fcb50ee3          	beq	a0,a1,80006d9a <_ZN4core3ptr119drop_in_place$LT$$u5b$core..option..Option$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$$u3b$$u20$100$u5d$$GT$17ha293b69a65138838E+0xe>
    80006dc2:	bff9                	j	80006da0 <_ZN4core3ptr119drop_in_place$LT$$u5b$core..option..Option$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$$u3b$$u20$100$u5d$$GT$17ha293b69a65138838E+0x14>
    80006dc4:	4501                	li	a0,0
    80006dc6:	e42a                	sd	a0,8(sp)
    80006dc8:	bfc5                	j	80006db8 <_ZN4core3ptr119drop_in_place$LT$$u5b$core..option..Option$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$$u3b$$u20$100$u5d$$GT$17ha293b69a65138838E+0x2c>
    80006dca:	6542                	ld	a0,16(sp)
    80006dcc:	00850593          	addi	a1,a0,8
    80006dd0:	e82e                	sd	a1,16(sp)
    80006dd2:	00000097          	auipc	ra,0x0
    80006dd6:	276080e7          	jalr	630(ra) # 80007048 <_ZN4core3ptr96drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$$GT$17hc79d9c89cd1d7f36E>
    80006dda:	a009                	j	80006ddc <_ZN4core3ptr119drop_in_place$LT$$u5b$core..option..Option$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$$u3b$$u20$100$u5d$$GT$17ha293b69a65138838E+0x50>
    80006ddc:	6542                	ld	a0,16(sp)
    80006dde:	65e2                	ld	a1,24(sp)
    80006de0:	fab50de3          	beq	a0,a1,80006d9a <_ZN4core3ptr119drop_in_place$LT$$u5b$core..option..Option$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$$u3b$$u20$100$u5d$$GT$17ha293b69a65138838E+0xe>
    80006de4:	b7dd                	j	80006dca <_ZN4core3ptr119drop_in_place$LT$$u5b$core..option..Option$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$$u3b$$u20$100$u5d$$GT$17ha293b69a65138838E+0x3e>
    80006de6:	6502                	ld	a0,0(sp)
    80006de8:	e82a                	sd	a0,16(sp)
    80006dea:	32050513          	addi	a0,a0,800
    80006dee:	ec2a                	sd	a0,24(sp)
    80006df0:	b7f5                	j	80006ddc <_ZN4core3ptr119drop_in_place$LT$$u5b$core..option..Option$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$$u3b$$u20$100$u5d$$GT$17ha293b69a65138838E+0x50>

Disassembly of section .text._ZN4core3ptr120drop_in_place$LT$core..option..Option$LT$kernel..lock..sleeplock..SleepLockGuard$LT$kernel..fs..bio..BufData$GT$$GT$$GT$17hc3cb66b90ce8c8e9E:

0000000080006df2 <_ZN4core3ptr120drop_in_place$LT$core..option..Option$LT$kernel..lock..sleeplock..SleepLockGuard$LT$kernel..fs..bio..BufData$GT$$GT$$GT$17hc3cb66b90ce8c8e9E>:
    80006df2:	1101                	addi	sp,sp,-32
    80006df4:	ec06                	sd	ra,24(sp)
    80006df6:	e42a                	sd	a0,8(sp)
    80006df8:	e82a                	sd	a0,16(sp)
    80006dfa:	6108                	ld	a0,0(a0)
    80006dfc:	4581                	li	a1,0
    80006dfe:	00b51663          	bne	a0,a1,80006e0a <_ZN4core3ptr120drop_in_place$LT$core..option..Option$LT$kernel..lock..sleeplock..SleepLockGuard$LT$kernel..fs..bio..BufData$GT$$GT$$GT$17hc3cb66b90ce8c8e9E+0x18>
    80006e02:	a009                	j	80006e04 <_ZN4core3ptr120drop_in_place$LT$core..option..Option$LT$kernel..lock..sleeplock..SleepLockGuard$LT$kernel..fs..bio..BufData$GT$$GT$$GT$17hc3cb66b90ce8c8e9E+0x12>
    80006e04:	60e2                	ld	ra,24(sp)
    80006e06:	6105                	addi	sp,sp,32
    80006e08:	8082                	ret
    80006e0a:	6522                	ld	a0,8(sp)
    80006e0c:	00000097          	auipc	ra,0x0
    80006e10:	1fa080e7          	jalr	506(ra) # 80007006 <_ZN4core3ptr92drop_in_place$LT$kernel..lock..sleeplock..SleepLockGuard$LT$kernel..fs..bio..BufData$GT$$GT$17h537aa9010d3295f9E>
    80006e14:	bfc5                	j	80006e04 <_ZN4core3ptr120drop_in_place$LT$core..option..Option$LT$kernel..lock..sleeplock..SleepLockGuard$LT$kernel..fs..bio..BufData$GT$$GT$$GT$17hc3cb66b90ce8c8e9E+0x12>

Disassembly of section .text._ZN4core3ptr28drop_in_place$LT$$RF$str$GT$17h2bbae85ad1a63829E:

0000000080006e16 <_ZN4core3ptr28drop_in_place$LT$$RF$str$GT$17h2bbae85ad1a63829E>:
    80006e16:	1141                	addi	sp,sp,-16
    80006e18:	e42a                	sd	a0,8(sp)
    80006e1a:	0141                	addi	sp,sp,16
    80006e1c:	8082                	ret

Disassembly of section .text._ZN4core3ptr29drop_in_place$LT$$LP$$RP$$GT$17h051aaaaafca2b588E:

0000000080006e1e <_ZN4core3ptr29drop_in_place$LT$$LP$$RP$$GT$17h051aaaaafca2b588E>:
    80006e1e:	1141                	addi	sp,sp,-16
    80006e20:	e42a                	sd	a0,8(sp)
    80006e22:	0141                	addi	sp,sp,16
    80006e24:	8082                	ret

Disassembly of section .text._ZN4core3ptr37drop_in_place$LT$core..fmt..Error$GT$17h74512b837ee77bedE:

0000000080006e26 <_ZN4core3ptr37drop_in_place$LT$core..fmt..Error$GT$17h74512b837ee77bedE>:
    80006e26:	1141                	addi	sp,sp,-16
    80006e28:	e42a                	sd	a0,8(sp)
    80006e2a:	0141                	addi	sp,sp,16
    80006e2c:	8082                	ret

Disassembly of section .text._ZN4core3ptr41drop_in_place$LT$kernel..fs..bio..Buf$GT$17hc35967244f3e9eb6E:

0000000080006e2e <_ZN4core3ptr41drop_in_place$LT$kernel..fs..bio..Buf$GT$17hc35967244f3e9eb6E>:
    80006e2e:	1101                	addi	sp,sp,-32
    80006e30:	ec06                	sd	ra,24(sp)
    80006e32:	e42a                	sd	a0,8(sp)
    80006e34:	e82a                	sd	a0,16(sp)
    80006e36:	00000097          	auipc	ra,0x0
    80006e3a:	556080e7          	jalr	1366(ra) # 8000738c <_ZN62_$LT$kernel..fs..bio..Buf$u20$as$u20$core..ops..drop..Drop$GT$4drop17hae787f8a28b7a10dE>
    80006e3e:	a021                	j	80006e46 <_ZN4core3ptr41drop_in_place$LT$kernel..fs..bio..Buf$GT$17hc35967244f3e9eb6E+0x18>
    80006e40:	60e2                	ld	ra,24(sp)
    80006e42:	6105                	addi	sp,sp,32
    80006e44:	8082                	ret
    80006e46:	6522                	ld	a0,8(sp)
    80006e48:	0541                	addi	a0,a0,16
    80006e4a:	00000097          	auipc	ra,0x0
    80006e4e:	fa8080e7          	jalr	-88(ra) # 80006df2 <_ZN4core3ptr120drop_in_place$LT$core..option..Option$LT$kernel..lock..sleeplock..SleepLockGuard$LT$kernel..fs..bio..BufData$GT$$GT$$GT$17hc3cb66b90ce8c8e9E>
    80006e52:	b7fd                	j	80006e40 <_ZN4core3ptr41drop_in_place$LT$kernel..fs..bio..Buf$GT$17hc35967244f3e9eb6E+0x12>

Disassembly of section .text._ZN4core3ptr42drop_in_place$LT$alloc..string..String$GT$17h586f2f4ef42593a1E:

0000000080006e54 <_ZN4core3ptr42drop_in_place$LT$alloc..string..String$GT$17h586f2f4ef42593a1E>:
    80006e54:	1141                	addi	sp,sp,-16
    80006e56:	e406                	sd	ra,8(sp)
    80006e58:	e02a                	sd	a0,0(sp)
    80006e5a:	00000097          	auipc	ra,0x0
    80006e5e:	03e080e7          	jalr	62(ra) # 80006e98 <_ZN4core3ptr46drop_in_place$LT$alloc..vec..Vec$LT$u8$GT$$GT$17hc049a0af331ff31cE>
    80006e62:	a009                	j	80006e64 <_ZN4core3ptr42drop_in_place$LT$alloc..string..String$GT$17h586f2f4ef42593a1E+0x10>
    80006e64:	60a2                	ld	ra,8(sp)
    80006e66:	0141                	addi	sp,sp,16
    80006e68:	8082                	ret

Disassembly of section .text._ZN4core3ptr44drop_in_place$LT$kernel..fs..file..VFile$GT$17h7a3c9775c1583e88E:

0000000080006e6a <_ZN4core3ptr44drop_in_place$LT$kernel..fs..file..VFile$GT$17h7a3c9775c1583e88E>:
    80006e6a:	1141                	addi	sp,sp,-16
    80006e6c:	e406                	sd	ra,8(sp)
    80006e6e:	e02a                	sd	a0,0(sp)
    80006e70:	0541                	addi	a0,a0,16
    80006e72:	00000097          	auipc	ra,0x0
    80006e76:	0da080e7          	jalr	218(ra) # 80006f4c <_ZN4core3ptr73drop_in_place$LT$core..option..Option$LT$kernel..fs..inode..Inode$GT$$GT$17h6a7b3b84406d6cdfE>
    80006e7a:	a009                	j	80006e7c <_ZN4core3ptr44drop_in_place$LT$kernel..fs..file..VFile$GT$17h7a3c9775c1583e88E+0x12>
    80006e7c:	60a2                	ld	ra,8(sp)
    80006e7e:	0141                	addi	sp,sp,16
    80006e80:	8082                	ret

Disassembly of section .text._ZN4core3ptr45drop_in_place$LT$kernel..fs..inode..Inode$GT$17h8786fe1a2a287832E:

0000000080006e82 <_ZN4core3ptr45drop_in_place$LT$kernel..fs..inode..Inode$GT$17h8786fe1a2a287832E>:
    80006e82:	1141                	addi	sp,sp,-16
    80006e84:	e406                	sd	ra,8(sp)
    80006e86:	e02a                	sd	a0,0(sp)
    80006e88:	00000097          	auipc	ra,0x0
    80006e8c:	546080e7          	jalr	1350(ra) # 800073ce <_ZN66_$LT$kernel..fs..inode..Inode$u20$as$u20$core..ops..drop..Drop$GT$4drop17h624968f150cac4e7E>
    80006e90:	a009                	j	80006e92 <_ZN4core3ptr45drop_in_place$LT$kernel..fs..inode..Inode$GT$17h8786fe1a2a287832E+0x10>
    80006e92:	60a2                	ld	ra,8(sp)
    80006e94:	0141                	addi	sp,sp,16
    80006e96:	8082                	ret

Disassembly of section .text._ZN4core3ptr46drop_in_place$LT$alloc..vec..Vec$LT$u8$GT$$GT$17hc049a0af331ff31cE:

0000000080006e98 <_ZN4core3ptr46drop_in_place$LT$alloc..vec..Vec$LT$u8$GT$$GT$17hc049a0af331ff31cE>:
    80006e98:	1101                	addi	sp,sp,-32
    80006e9a:	ec06                	sd	ra,24(sp)
    80006e9c:	e42a                	sd	a0,8(sp)
    80006e9e:	e82a                	sd	a0,16(sp)
    80006ea0:	00000097          	auipc	ra,0x0
    80006ea4:	35e080e7          	jalr	862(ra) # 800071fe <_ZN70_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hf7bf84e08f8deec7E>
    80006ea8:	a021                	j	80006eb0 <_ZN4core3ptr46drop_in_place$LT$alloc..vec..Vec$LT$u8$GT$$GT$17hc049a0af331ff31cE+0x18>
    80006eaa:	60e2                	ld	ra,24(sp)
    80006eac:	6105                	addi	sp,sp,32
    80006eae:	8082                	ret
    80006eb0:	6522                	ld	a0,8(sp)
    80006eb2:	00000097          	auipc	ra,0x0
    80006eb6:	012080e7          	jalr	18(ra) # 80006ec4 <_ZN4core3ptr53drop_in_place$LT$alloc..raw_vec..RawVec$LT$u8$GT$$GT$17h43989f6a80c9a285E>
    80006eba:	bfc5                	j	80006eaa <_ZN4core3ptr46drop_in_place$LT$alloc..vec..Vec$LT$u8$GT$$GT$17hc049a0af331ff31cE+0x12>

Disassembly of section .text._ZN4core3ptr48drop_in_place$LT$core..str..error..Utf8Error$GT$17h597f3c07065c4e0fE:

0000000080006ebc <_ZN4core3ptr48drop_in_place$LT$core..str..error..Utf8Error$GT$17h597f3c07065c4e0fE>:
    80006ebc:	1141                	addi	sp,sp,-16
    80006ebe:	e42a                	sd	a0,8(sp)
    80006ec0:	0141                	addi	sp,sp,16
    80006ec2:	8082                	ret

Disassembly of section .text._ZN4core3ptr53drop_in_place$LT$alloc..raw_vec..RawVec$LT$u8$GT$$GT$17h43989f6a80c9a285E:

0000000080006ec4 <_ZN4core3ptr53drop_in_place$LT$alloc..raw_vec..RawVec$LT$u8$GT$$GT$17h43989f6a80c9a285E>:
    80006ec4:	1141                	addi	sp,sp,-16
    80006ec6:	e406                	sd	ra,8(sp)
    80006ec8:	e02a                	sd	a0,0(sp)
    80006eca:	00000097          	auipc	ra,0x0
    80006ece:	360080e7          	jalr	864(ra) # 8000722a <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h07f37a6ddf49c648E>
    80006ed2:	a009                	j	80006ed4 <_ZN4core3ptr53drop_in_place$LT$alloc..raw_vec..RawVec$LT$u8$GT$$GT$17h43989f6a80c9a285E+0x10>
    80006ed4:	60a2                	ld	ra,8(sp)
    80006ed6:	0141                	addi	sp,sp,16
    80006ed8:	8082                	ret

Disassembly of section .text._ZN4core3ptr53drop_in_place$LT$core..alloc..layout..LayoutError$GT$17he06501856409b544E:

0000000080006eda <_ZN4core3ptr53drop_in_place$LT$core..alloc..layout..LayoutError$GT$17he06501856409b544E>:
    80006eda:	1141                	addi	sp,sp,-16
    80006edc:	e42a                	sd	a0,8(sp)
    80006ede:	0141                	addi	sp,sp,16
    80006ee0:	8082                	ret

Disassembly of section .text._ZN4core3ptr54drop_in_place$LT$$RF$kernel..fs..dinode..InodeType$GT$17h3ecc645503e06b03E:

0000000080006ee2 <_ZN4core3ptr54drop_in_place$LT$$RF$kernel..fs..dinode..InodeType$GT$17h3ecc645503e06b03E>:
    80006ee2:	1141                	addi	sp,sp,-16
    80006ee4:	e42a                	sd	a0,8(sp)
    80006ee6:	0141                	addi	sp,sp,16
    80006ee8:	8082                	ret

Disassembly of section .text._ZN4core3ptr54drop_in_place$LT$core..num..error..TryFromIntError$GT$17hcbff8ea1575fcb6aE:

0000000080006eea <_ZN4core3ptr54drop_in_place$LT$core..num..error..TryFromIntError$GT$17hcbff8ea1575fcb6aE>:
    80006eea:	1141                	addi	sp,sp,-16
    80006eec:	e42a                	sd	a0,8(sp)
    80006eee:	0141                	addi	sp,sp,16
    80006ef0:	8082                	ret

Disassembly of section .text._ZN4core3ptr59drop_in_place$LT$$RF$mut$u20$kernel..driver..uart..Uart$GT$17he0733011476f9c53E:

0000000080006ef2 <_ZN4core3ptr59drop_in_place$LT$$RF$mut$u20$kernel..driver..uart..Uart$GT$17he0733011476f9c53E>:
    80006ef2:	1141                	addi	sp,sp,-16
    80006ef4:	e42a                	sd	a0,8(sp)
    80006ef6:	0141                	addi	sp,sp,16
    80006ef8:	8082                	ret

Disassembly of section .text._ZN4core3ptr68drop_in_place$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$17h1ebe49ede9a118fdE:

0000000080006efa <_ZN4core3ptr68drop_in_place$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$17h1ebe49ede9a118fdE>:
    80006efa:	1141                	addi	sp,sp,-16
    80006efc:	e406                	sd	ra,8(sp)
    80006efe:	e02a                	sd	a0,0(sp)
    80006f00:	00000097          	auipc	ra,0x0
    80006f04:	1f4080e7          	jalr	500(ra) # 800070f4 <_ZN67_$LT$alloc..sync..Arc$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h228396a8880ae9ddE>
    80006f08:	a009                	j	80006f0a <_ZN4core3ptr68drop_in_place$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$17h1ebe49ede9a118fdE+0x10>
    80006f0a:	60a2                	ld	ra,8(sp)
    80006f0c:	0141                	addi	sp,sp,16
    80006f0e:	8082                	ret

Disassembly of section .text._ZN4core3ptr69drop_in_place$LT$alloc..sync..Weak$LT$kernel..fs..file..VFile$GT$$GT$17hfcb3bca0be736df8E:

0000000080006f10 <_ZN4core3ptr69drop_in_place$LT$alloc..sync..Weak$LT$kernel..fs..file..VFile$GT$$GT$17hfcb3bca0be736df8E>:
    80006f10:	1141                	addi	sp,sp,-16
    80006f12:	e406                	sd	ra,8(sp)
    80006f14:	e02a                	sd	a0,0(sp)
    80006f16:	00000097          	auipc	ra,0x0
    80006f1a:	238080e7          	jalr	568(ra) # 8000714e <_ZN68_$LT$alloc..sync..Weak$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hb23957f9542a4990E>
    80006f1e:	a009                	j	80006f20 <_ZN4core3ptr69drop_in_place$LT$alloc..sync..Weak$LT$kernel..fs..file..VFile$GT$$GT$17hfcb3bca0be736df8E+0x10>
    80006f20:	60a2                	ld	ra,8(sp)
    80006f22:	0141                	addi	sp,sp,16
    80006f24:	8082                	ret

Disassembly of section .text._ZN4core3ptr71drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$usize$GT$$GT$17h978f142a914ddf2eE:

0000000080006f26 <_ZN4core3ptr71drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$usize$GT$$GT$17h978f142a914ddf2eE>:
    80006f26:	1141                	addi	sp,sp,-16
    80006f28:	e406                	sd	ra,8(sp)
    80006f2a:	e02a                	sd	a0,0(sp)
    80006f2c:	00000097          	auipc	ra,0x0
    80006f30:	3e8080e7          	jalr	1000(ra) # 80007314 <_ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hbd0d5c90a46c79b0E>
    80006f34:	a009                	j	80006f36 <_ZN4core3ptr71drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$usize$GT$$GT$17h978f142a914ddf2eE+0x10>
    80006f36:	60a2                	ld	ra,8(sp)
    80006f38:	0141                	addi	sp,sp,16
    80006f3a:	8082                	ret

Disassembly of section .text._ZN4core3ptr73drop_in_place$LT$$RF$kernel..arch..riscv..register..scause..Exception$GT$17h18956ab47fc37e77E:

0000000080006f3c <_ZN4core3ptr73drop_in_place$LT$$RF$kernel..arch..riscv..register..scause..Exception$GT$17h18956ab47fc37e77E>:
    80006f3c:	1141                	addi	sp,sp,-16
    80006f3e:	e42a                	sd	a0,8(sp)
    80006f40:	0141                	addi	sp,sp,16
    80006f42:	8082                	ret

Disassembly of section .text._ZN4core3ptr73drop_in_place$LT$$RF$kernel..arch..riscv..register..scause..Interrupt$GT$17h9a154681bb7a8c38E:

0000000080006f44 <_ZN4core3ptr73drop_in_place$LT$$RF$kernel..arch..riscv..register..scause..Interrupt$GT$17h9a154681bb7a8c38E>:
    80006f44:	1141                	addi	sp,sp,-16
    80006f46:	e42a                	sd	a0,8(sp)
    80006f48:	0141                	addi	sp,sp,16
    80006f4a:	8082                	ret

Disassembly of section .text._ZN4core3ptr73drop_in_place$LT$core..option..Option$LT$kernel..fs..inode..Inode$GT$$GT$17h6a7b3b84406d6cdfE:

0000000080006f4c <_ZN4core3ptr73drop_in_place$LT$core..option..Option$LT$kernel..fs..inode..Inode$GT$$GT$17h6a7b3b84406d6cdfE>:
    80006f4c:	1101                	addi	sp,sp,-32
    80006f4e:	ec06                	sd	ra,24(sp)
    80006f50:	e42a                	sd	a0,8(sp)
    80006f52:	e82a                	sd	a0,16(sp)
    80006f54:	6108                	ld	a0,0(a0)
    80006f56:	4581                	li	a1,0
    80006f58:	00b51663          	bne	a0,a1,80006f64 <_ZN4core3ptr73drop_in_place$LT$core..option..Option$LT$kernel..fs..inode..Inode$GT$$GT$17h6a7b3b84406d6cdfE+0x18>
    80006f5c:	a009                	j	80006f5e <_ZN4core3ptr73drop_in_place$LT$core..option..Option$LT$kernel..fs..inode..Inode$GT$$GT$17h6a7b3b84406d6cdfE+0x12>
    80006f5e:	60e2                	ld	ra,24(sp)
    80006f60:	6105                	addi	sp,sp,32
    80006f62:	8082                	ret
    80006f64:	6522                	ld	a0,8(sp)
    80006f66:	0521                	addi	a0,a0,8
    80006f68:	00000097          	auipc	ra,0x0
    80006f6c:	f1a080e7          	jalr	-230(ra) # 80006e82 <_ZN4core3ptr45drop_in_place$LT$kernel..fs..inode..Inode$GT$17h8786fe1a2a287832E>
    80006f70:	b7fd                	j	80006f5e <_ZN4core3ptr73drop_in_place$LT$core..option..Option$LT$kernel..fs..inode..Inode$GT$$GT$17h6a7b3b84406d6cdfE+0x12>

Disassembly of section .text._ZN4core3ptr74drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$$LP$$RP$$GT$$GT$17he568be727488c8bbE:

0000000080006f72 <_ZN4core3ptr74drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$$LP$$RP$$GT$$GT$17he568be727488c8bbE>:
    80006f72:	1141                	addi	sp,sp,-16
    80006f74:	e406                	sd	ra,8(sp)
    80006f76:	e02a                	sd	a0,0(sp)
    80006f78:	00000097          	auipc	ra,0x0
    80006f7c:	36c080e7          	jalr	876(ra) # 800072e4 <_ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h821d547a3c969c60E>
    80006f80:	a009                	j	80006f82 <_ZN4core3ptr74drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$$LP$$RP$$GT$$GT$17he568be727488c8bbE+0x10>
    80006f82:	60a2                	ld	ra,8(sp)
    80006f84:	0141                	addi	sp,sp,16
    80006f86:	8082                	ret

Disassembly of section .text._ZN4core3ptr77drop_in_place$LT$alloc..boxed..Box$LT$kernel..process..elf..ElfHeader$GT$$GT$17hf970e769dc617072E:

0000000080006f88 <_ZN4core3ptr77drop_in_place$LT$alloc..boxed..Box$LT$kernel..process..elf..ElfHeader$GT$$GT$17hf970e769dc617072E>:
    80006f88:	1101                	addi	sp,sp,-32
    80006f8a:	ec06                	sd	ra,24(sp)
    80006f8c:	e42a                	sd	a0,8(sp)
    80006f8e:	e82a                	sd	a0,16(sp)
    80006f90:	a021                	j	80006f98 <_ZN4core3ptr77drop_in_place$LT$alloc..boxed..Box$LT$kernel..process..elf..ElfHeader$GT$$GT$17hf970e769dc617072E+0x10>
    80006f92:	60e2                	ld	ra,24(sp)
    80006f94:	6105                	addi	sp,sp,32
    80006f96:	8082                	ret
    80006f98:	6522                	ld	a0,8(sp)
    80006f9a:	6108                	ld	a0,0(a0)
    80006f9c:	00002097          	auipc	ra,0x2
    80006fa0:	a28080e7          	jalr	-1496(ra) # 800089c4 <_ZN5alloc5alloc8box_free17h9496fa4d23b2ebc8E>
    80006fa4:	b7fd                	j	80006f92 <_ZN4core3ptr77drop_in_place$LT$alloc..boxed..Box$LT$kernel..process..elf..ElfHeader$GT$$GT$17hf970e769dc617072E+0xa>

Disassembly of section .text._ZN4core3ptr78drop_in_place$LT$alloc..boxed..Box$LT$kernel..process..elf..ProgHeader$GT$$GT$17h18632e5365e45018E:

0000000080006fa6 <_ZN4core3ptr78drop_in_place$LT$alloc..boxed..Box$LT$kernel..process..elf..ProgHeader$GT$$GT$17h18632e5365e45018E>:
    80006fa6:	1101                	addi	sp,sp,-32
    80006fa8:	ec06                	sd	ra,24(sp)
    80006faa:	e42a                	sd	a0,8(sp)
    80006fac:	e82a                	sd	a0,16(sp)
    80006fae:	a021                	j	80006fb6 <_ZN4core3ptr78drop_in_place$LT$alloc..boxed..Box$LT$kernel..process..elf..ProgHeader$GT$$GT$17h18632e5365e45018E+0x10>
    80006fb0:	60e2                	ld	ra,24(sp)
    80006fb2:	6105                	addi	sp,sp,32
    80006fb4:	8082                	ret
    80006fb6:	6522                	ld	a0,8(sp)
    80006fb8:	6108                	ld	a0,0(a0)
    80006fba:	00002097          	auipc	ra,0x2
    80006fbe:	a8e080e7          	jalr	-1394(ra) # 80008a48 <_ZN5alloc5alloc8box_free17hc9fdd8b40dd668b4E>
    80006fc2:	b7fd                	j	80006fb0 <_ZN4core3ptr78drop_in_place$LT$alloc..boxed..Box$LT$kernel..process..elf..ProgHeader$GT$$GT$17h18632e5365e45018E+0xa>

Disassembly of section .text._ZN4core3ptr86drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..fs..log..Log$GT$$GT$17h3ff4d5b7fa89905aE:

0000000080006fc4 <_ZN4core3ptr86drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..fs..log..Log$GT$$GT$17h3ff4d5b7fa89905aE>:
    80006fc4:	1141                	addi	sp,sp,-16
    80006fc6:	e406                	sd	ra,8(sp)
    80006fc8:	e02a                	sd	a0,0(sp)
    80006fca:	00000097          	auipc	ra,0x0
    80006fce:	2ba080e7          	jalr	698(ra) # 80007284 <_ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h07564fb2c96981cdE>
    80006fd2:	a009                	j	80006fd4 <_ZN4core3ptr86drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..fs..log..Log$GT$$GT$17h3ff4d5b7fa89905aE+0x10>
    80006fd4:	60a2                	ld	ra,8(sp)
    80006fd6:	0141                	addi	sp,sp,16
    80006fd8:	8082                	ret

Disassembly of section .text._ZN4core3ptr88drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$allocator..BuddySystem$GT$$GT$17hd20388e8ca3384f9E:

0000000080006fda <_ZN4core3ptr88drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$allocator..BuddySystem$GT$$GT$17hd20388e8ca3384f9E>:
    80006fda:	1141                	addi	sp,sp,-16
    80006fdc:	e406                	sd	ra,8(sp)
    80006fde:	e02a                	sd	a0,0(sp)
    80006fe0:	00000097          	auipc	ra,0x0
    80006fe4:	2ec080e7          	jalr	748(ra) # 800072cc <_ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h5c638f5071dc4adaE>
    80006fe8:	a009                	j	80006fea <_ZN4core3ptr88drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$allocator..BuddySystem$GT$$GT$17hd20388e8ca3384f9E+0x10>
    80006fea:	60a2                	ld	ra,8(sp)
    80006fec:	0141                	addi	sp,sp,16
    80006fee:	8082                	ret

Disassembly of section .text._ZN4core3ptr89drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..fs..bio..BufLru$GT$$GT$17h9c86fb58887d325bE:

0000000080006ff0 <_ZN4core3ptr89drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..fs..bio..BufLru$GT$$GT$17h9c86fb58887d325bE>:
    80006ff0:	1141                	addi	sp,sp,-16
    80006ff2:	e406                	sd	ra,8(sp)
    80006ff4:	e02a                	sd	a0,0(sp)
    80006ff6:	00000097          	auipc	ra,0x0
    80006ffa:	336080e7          	jalr	822(ra) # 8000732c <_ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hc0ab90800bd26fd3E>
    80006ffe:	a009                	j	80007000 <_ZN4core3ptr89drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..fs..bio..BufLru$GT$$GT$17h9c86fb58887d325bE+0x10>
    80007000:	60a2                	ld	ra,8(sp)
    80007002:	0141                	addi	sp,sp,16
    80007004:	8082                	ret

Disassembly of section .text._ZN4core3ptr92drop_in_place$LT$kernel..lock..sleeplock..SleepLockGuard$LT$kernel..fs..bio..BufData$GT$$GT$17h537aa9010d3295f9E:

0000000080007006 <_ZN4core3ptr92drop_in_place$LT$kernel..lock..sleeplock..SleepLockGuard$LT$kernel..fs..bio..BufData$GT$$GT$17h537aa9010d3295f9E>:
    80007006:	1141                	addi	sp,sp,-16
    80007008:	e406                	sd	ra,8(sp)
    8000700a:	e02a                	sd	a0,0(sp)
    8000700c:	00000097          	auipc	ra,0x0
    80007010:	368080e7          	jalr	872(ra) # 80007374 <_ZN90_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hd4f2db8ec388cdc1E>
    80007014:	a009                	j	80007016 <_ZN4core3ptr92drop_in_place$LT$kernel..lock..sleeplock..SleepLockGuard$LT$kernel..fs..bio..BufData$GT$$GT$17h537aa9010d3295f9E+0x10>
    80007016:	60a2                	ld	ra,8(sp)
    80007018:	0141                	addi	sp,sp,16
    8000701a:	8082                	ret

Disassembly of section .text._ZN4core3ptr92drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..driver..uart..Uart$GT$$GT$17h4785ee23048b5bddE:

000000008000701c <_ZN4core3ptr92drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..driver..uart..Uart$GT$$GT$17h4785ee23048b5bddE>:
    8000701c:	1141                	addi	sp,sp,-16
    8000701e:	e406                	sd	ra,8(sp)
    80007020:	e02a                	sd	a0,0(sp)
    80007022:	00000097          	auipc	ra,0x0
    80007026:	322080e7          	jalr	802(ra) # 80007344 <_ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hc6fa91bad8825bc2E>
    8000702a:	a009                	j	8000702c <_ZN4core3ptr92drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..driver..uart..Uart$GT$$GT$17h4785ee23048b5bddE+0x10>
    8000702c:	60a2                	ld	ra,8(sp)
    8000702e:	0141                	addi	sp,sp,16
    80007030:	8082                	ret

Disassembly of section .text._ZN4core3ptr93drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..fs..pipe..PipeGuard$GT$$GT$17hcb390818ee10e1caE:

0000000080007032 <_ZN4core3ptr93drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..fs..pipe..PipeGuard$GT$$GT$17hcb390818ee10e1caE>:
    80007032:	1141                	addi	sp,sp,-16
    80007034:	e406                	sd	ra,8(sp)
    80007036:	e02a                	sd	a0,0(sp)
    80007038:	00000097          	auipc	ra,0x0
    8000703c:	234080e7          	jalr	564(ra) # 8000726c <_ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h02b15870f6f2ec1aE>
    80007040:	a009                	j	80007042 <_ZN4core3ptr93drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..fs..pipe..PipeGuard$GT$$GT$17hcb390818ee10e1caE+0x10>
    80007042:	60a2                	ld	ra,8(sp)
    80007044:	0141                	addi	sp,sp,16
    80007046:	8082                	ret

Disassembly of section .text._ZN4core3ptr96drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$$GT$17hc79d9c89cd1d7f36E:

0000000080007048 <_ZN4core3ptr96drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$$GT$17hc79d9c89cd1d7f36E>:
    80007048:	1101                	addi	sp,sp,-32
    8000704a:	ec06                	sd	ra,24(sp)
    8000704c:	e42a                	sd	a0,8(sp)
    8000704e:	e82a                	sd	a0,16(sp)
    80007050:	6108                	ld	a0,0(a0)
    80007052:	4581                	li	a1,0
    80007054:	00b51663          	bne	a0,a1,80007060 <_ZN4core3ptr96drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$$GT$17hc79d9c89cd1d7f36E+0x18>
    80007058:	a009                	j	8000705a <_ZN4core3ptr96drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$$GT$17hc79d9c89cd1d7f36E+0x12>
    8000705a:	60e2                	ld	ra,24(sp)
    8000705c:	6105                	addi	sp,sp,32
    8000705e:	8082                	ret
    80007060:	6522                	ld	a0,8(sp)
    80007062:	00000097          	auipc	ra,0x0
    80007066:	e98080e7          	jalr	-360(ra) # 80006efa <_ZN4core3ptr68drop_in_place$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$17h1ebe49ede9a118fdE>
    8000706a:	bfc5                	j	8000705a <_ZN4core3ptr96drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$$GT$17hc79d9c89cd1d7f36E+0x12>

Disassembly of section .text._ZN4core3ptr96drop_in_place$LT$kernel..lock..sleeplock..SleepLockGuard$LT$kernel..fs..inode..InodeData$GT$$GT$17h00d5c02cf687ef41E:

000000008000706c <_ZN4core3ptr96drop_in_place$LT$kernel..lock..sleeplock..SleepLockGuard$LT$kernel..fs..inode..InodeData$GT$$GT$17h00d5c02cf687ef41E>:
    8000706c:	1141                	addi	sp,sp,-16
    8000706e:	e406                	sd	ra,8(sp)
    80007070:	e02a                	sd	a0,0(sp)
    80007072:	00000097          	auipc	ra,0x0
    80007076:	2ea080e7          	jalr	746(ra) # 8000735c <_ZN90_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17ha2d42db7f65900b8E>
    8000707a:	a009                	j	8000707c <_ZN4core3ptr96drop_in_place$LT$kernel..lock..sleeplock..SleepLockGuard$LT$kernel..fs..inode..InodeData$GT$$GT$17h00d5c02cf687ef41E+0x10>
    8000707c:	60a2                	ld	ra,8(sp)
    8000707e:	0141                	addi	sp,sp,16
    80007080:	8082                	ret

Disassembly of section .text._ZN4core3ptr98drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..driver..console..Console$GT$$GT$17hbea8b3b0221deadaE:

0000000080007082 <_ZN4core3ptr98drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..driver..console..Console$GT$$GT$17hbea8b3b0221deadaE>:
    80007082:	1141                	addi	sp,sp,-16
    80007084:	e406                	sd	ra,8(sp)
    80007086:	e02a                	sd	a0,0(sp)
    80007088:	00000097          	auipc	ra,0x0
    8000708c:	274080e7          	jalr	628(ra) # 800072fc <_ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hb3b00b618040e227E>
    80007090:	a009                	j	80007092 <_ZN4core3ptr98drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..driver..console..Console$GT$$GT$17hbea8b3b0221deadaE+0x10>
    80007092:	60a2                	ld	ra,8(sp)
    80007094:	0141                	addi	sp,sp,16
    80007096:	8082                	ret

Disassembly of section .text._ZN4core3ptr99drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..driver..virtio_disk..Disk$GT$$GT$17h4fc01c278f0bfe6cE:

0000000080007098 <_ZN4core3ptr99drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..driver..virtio_disk..Disk$GT$$GT$17h4fc01c278f0bfe6cE>:
    80007098:	1141                	addi	sp,sp,-16
    8000709a:	e406                	sd	ra,8(sp)
    8000709c:	e02a                	sd	a0,0(sp)
    8000709e:	00000097          	auipc	ra,0x0
    800070a2:	216080e7          	jalr	534(ra) # 800072b4 <_ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h472d74790cb24d84E>
    800070a6:	a009                	j	800070a8 <_ZN4core3ptr99drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..driver..virtio_disk..Disk$GT$$GT$17h4fc01c278f0bfe6cE+0x10>
    800070a8:	60a2                	ld	ra,8(sp)
    800070aa:	0141                	addi	sp,sp,16
    800070ac:	8082                	ret

Disassembly of section .text._ZN4core5clone5Clone5clone17h31f6bbc7b19c5f8bE:

00000000800070ae <_ZN4core5clone5Clone5clone17h31f6bbc7b19c5f8bE>:
    ///
    /// assert_eq!("Hello", hello.clone());
    /// ```
    #[stable(feature = "rust1", since = "1.0.0")]
    #[must_use = "cloning is often expensive and is not expected to have side effects"]
    fn clone(&self) -> Self;
    800070ae:	7179                	addi	sp,sp,-48
    800070b0:	f406                	sd	ra,40(sp)
    800070b2:	e42e                	sd	a1,8(sp)
    800070b4:	e82a                	sd	a0,16(sp)
    800070b6:	f02e                	sd	a1,32(sp)
    800070b8:	4501                	li	a0,0
    800070ba:	ec2a                	sd	a0,24(sp)
    800070bc:	a009                	j	800070be <_ZN4core5clone5Clone5clone17h31f6bbc7b19c5f8bE+0x10>
    800070be:	6562                	ld	a0,24(sp)
    800070c0:	06400593          	li	a1,100
    800070c4:	02b50563          	beq	a0,a1,800070ee <_ZN4core5clone5Clone5clone17h31f6bbc7b19c5f8bE+0x40>
    800070c8:	a009                	j	800070ca <_ZN4core5clone5Clone5clone17h31f6bbc7b19c5f8bE+0x1c>
    800070ca:	65c2                	ld	a1,16(sp)
    800070cc:	6522                	ld	a0,8(sp)
    800070ce:	6662                	ld	a2,24(sp)
    800070d0:	060e                	slli	a2,a2,0x3
    800070d2:	9532                	add	a0,a0,a2
    800070d4:	95b2                	add	a1,a1,a2
    800070d6:	e02e                	sd	a1,0(sp)
    800070d8:	00008097          	auipc	ra,0x8
    800070dc:	0ca080e7          	jalr	202(ra) # 8000f1a2 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha5678c3a724a7a2fE>
    800070e0:	6582                	ld	a1,0(sp)
    800070e2:	e188                	sd	a0,0(a1)
    800070e4:	a009                	j	800070e6 <_ZN4core5clone5Clone5clone17h31f6bbc7b19c5f8bE+0x38>
    800070e6:	6562                	ld	a0,24(sp)
    800070e8:	0505                	addi	a0,a0,1
    800070ea:	ec2a                	sd	a0,24(sp)
    800070ec:	bfc9                	j	800070be <_ZN4core5clone5Clone5clone17h31f6bbc7b19c5f8bE+0x10>
    800070ee:	70a2                	ld	ra,40(sp)
    800070f0:	6145                	addi	sp,sp,48
    800070f2:	8082                	ret

Disassembly of section .text._ZN67_$LT$alloc..sync..Arc$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h228396a8880ae9ddE:

00000000800070f4 <_ZN67_$LT$alloc..sync..Arc$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h228396a8880ae9ddE>:
    fn drop(&mut self) {
    800070f4:	7179                	addi	sp,sp,-48
    800070f6:	f406                	sd	ra,40(sp)
    800070f8:	e42a                	sd	a0,8(sp)
    800070fa:	f02a                	sd	a0,32(sp)
        if self.inner().strong.fetch_sub(1, Release) != 1 {
    800070fc:	ffffb097          	auipc	ra,0xffffb
    80007100:	3c8080e7          	jalr	968(ra) # 800024c4 <_ZN5alloc4sync12Arc$LT$T$GT$5inner17h9bfe4db1ecae9d98E>
    80007104:	e82a                	sd	a0,16(sp)
    80007106:	a009                	j	80007108 <_ZN67_$LT$alloc..sync..Arc$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h228396a8880ae9ddE+0x14>
    80007108:	6542                	ld	a0,16(sp)
    8000710a:	4605                	li	a2,1
    8000710c:	00c10f23          	sb	a2,30(sp)
    80007110:	85b2                	mv	a1,a2
    80007112:	ffffd097          	auipc	ra,0xffffd
    80007116:	666080e7          	jalr	1638(ra) # 80004778 <_ZN4core4sync6atomic11AtomicUsize9fetch_sub17h94fe355041184982E>
    8000711a:	e02a                	sd	a0,0(sp)
    8000711c:	a009                	j	8000711e <_ZN67_$LT$alloc..sync..Arc$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h228396a8880ae9ddE+0x2a>
    8000711e:	6502                	ld	a0,0(sp)
    80007120:	4585                	li	a1,1
    80007122:	00b50463          	beq	a0,a1,8000712a <_ZN67_$LT$alloc..sync..Arc$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h228396a8880ae9ddE+0x36>
    80007126:	a009                	j	80007128 <_ZN67_$LT$alloc..sync..Arc$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h228396a8880ae9ddE+0x34>
    }
    80007128:	a005                	j	80007148 <_ZN67_$LT$alloc..sync..Arc$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h228396a8880ae9ddE+0x54>
    8000712a:	4509                	li	a0,2
        acquire!(self.inner().strong);
    8000712c:	00a10fa3          	sb	a0,31(sp)
    80007130:	ffffd097          	auipc	ra,0xffffd
    80007134:	680080e7          	jalr	1664(ra) # 800047b0 <_ZN4core4sync6atomic5fence17hd2f91624c9f09ce8E>
    80007138:	a009                	j	8000713a <_ZN67_$LT$alloc..sync..Arc$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h228396a8880ae9ddE+0x46>
            self.drop_slow();
    8000713a:	6522                	ld	a0,8(sp)
    8000713c:	ffffb097          	auipc	ra,0xffffb
    80007140:	3a2080e7          	jalr	930(ra) # 800024de <_ZN5alloc4sync12Arc$LT$T$GT$9drop_slow17hcb02a55d90430c0dE>
    80007144:	a009                	j	80007146 <_ZN67_$LT$alloc..sync..Arc$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h228396a8880ae9ddE+0x52>
    }
    80007146:	a009                	j	80007148 <_ZN67_$LT$alloc..sync..Arc$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h228396a8880ae9ddE+0x54>
    80007148:	70a2                	ld	ra,40(sp)
    8000714a:	6145                	addi	sp,sp,48
    8000714c:	8082                	ret

Disassembly of section .text._ZN68_$LT$alloc..sync..Weak$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hb23957f9542a4990E:

000000008000714e <_ZN68_$LT$alloc..sync..Weak$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hb23957f9542a4990E>:
    /// drop(weak_foo);   // Doesn't print anything
    /// drop(foo);        // Prints "dropped!"
    ///
    /// assert!(other_weak_foo.upgrade().is_none());
    /// ```
    fn drop(&mut self) {
    8000714e:	7119                	addi	sp,sp,-128
    80007150:	fc86                	sd	ra,120(sp)
    80007152:	f42a                	sd	a0,40(sp)
    80007154:	e8aa                	sd	a0,80(sp)
        //
        // It's not necessary to check for the locked state here, because the
        // weak count can only be locked if there was precisely one weak ref,
        // meaning that drop could only subsequently run ON that remaining weak
        // ref, which can only happen after the lock is released.
        let inner = if let Some(inner) = self.inner() { inner } else { return };
    80007156:	ffffb097          	auipc	ra,0xffffb
    8000715a:	3be080e7          	jalr	958(ra) # 80002514 <_ZN5alloc4sync13Weak$LT$T$GT$5inner17h5044bfde36c7c45eE>
    8000715e:	fc2a                	sd	a0,56(sp)
    80007160:	e0ae                	sd	a1,64(sp)
    80007162:	a009                	j	80007164 <_ZN68_$LT$alloc..sync..Weak$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hb23957f9542a4990E+0x16>
    80007164:	7562                	ld	a0,56(sp)
    80007166:	4581                	li	a1,0
    80007168:	00b51463          	bne	a0,a1,80007170 <_ZN68_$LT$alloc..sync..Weak$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hb23957f9542a4990E+0x22>
    8000716c:	a009                	j	8000716e <_ZN68_$LT$alloc..sync..Weak$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hb23957f9542a4990E+0x20>

        if inner.weak.fetch_sub(1, Release) == 1 {
            acquire!(inner.weak);
            unsafe { Global.deallocate(self.ptr.cast(), Layout::for_value_raw(self.ptr.as_ptr())) }
        }
    }
    8000716e:	a069                	j	800071f8 <.LBB42_14+0x16>
        let inner = if let Some(inner) = self.inner() { inner } else { return };
    80007170:	7562                	ld	a0,56(sp)
    80007172:	6586                	ld	a1,64(sp)
    80007174:	ecaa                	sd	a0,88(sp)
    80007176:	f0ae                	sd	a1,96(sp)
    80007178:	f4aa                	sd	a0,104(sp)
    8000717a:	f8ae                	sd	a1,112(sp)
    8000717c:	4605                	li	a2,1
        if inner.weak.fetch_sub(1, Release) == 1 {
    8000717e:	04c10723          	sb	a2,78(sp)
    80007182:	85b2                	mv	a1,a2
    80007184:	ffffd097          	auipc	ra,0xffffd
    80007188:	5f4080e7          	jalr	1524(ra) # 80004778 <_ZN4core4sync6atomic11AtomicUsize9fetch_sub17h94fe355041184982E>
    8000718c:	f02a                	sd	a0,32(sp)
    8000718e:	a009                	j	80007190 <_ZN68_$LT$alloc..sync..Weak$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hb23957f9542a4990E+0x42>
    80007190:	7502                	ld	a0,32(sp)
    80007192:	4585                	li	a1,1
    80007194:	00b51b63          	bne	a0,a1,800071aa <_ZN68_$LT$alloc..sync..Weak$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hb23957f9542a4990E+0x5c>
    80007198:	a009                	j	8000719a <_ZN68_$LT$alloc..sync..Weak$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hb23957f9542a4990E+0x4c>
    8000719a:	4509                	li	a0,2
            acquire!(inner.weak);
    8000719c:	04a107a3          	sb	a0,79(sp)
    800071a0:	ffffd097          	auipc	ra,0xffffd
    800071a4:	610080e7          	jalr	1552(ra) # 800047b0 <_ZN4core4sync6atomic5fence17hd2f91624c9f09ce8E>
    800071a8:	a011                	j	800071ac <_ZN68_$LT$alloc..sync..Weak$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hb23957f9542a4990E+0x5e>
        if inner.weak.fetch_sub(1, Release) == 1 {
    800071aa:	a0b1                	j	800071f6 <.LBB42_14+0x14>
            unsafe { Global.deallocate(self.ptr.cast(), Layout::for_value_raw(self.ptr.as_ptr())) }
    800071ac:	7522                	ld	a0,40(sp)
    800071ae:	6108                	ld	a0,0(a0)
    800071b0:	00008097          	auipc	ra,0x8
    800071b4:	27a080e7          	jalr	634(ra) # 8000f42a <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h7831112f0067c5f4E>
    800071b8:	ec2a                	sd	a0,24(sp)
    800071ba:	a009                	j	800071bc <_ZN68_$LT$alloc..sync..Weak$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hb23957f9542a4990E+0x6e>
    800071bc:	7522                	ld	a0,40(sp)
    800071be:	6108                	ld	a0,0(a0)
    800071c0:	00008097          	auipc	ra,0x8
    800071c4:	376080e7          	jalr	886(ra) # 8000f536 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17hc25f2e50aadb25dbE>
    800071c8:	e82a                	sd	a0,16(sp)
    800071ca:	a009                	j	800071cc <_ZN68_$LT$alloc..sync..Weak$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hb23957f9542a4990E+0x7e>
    800071cc:	6542                	ld	a0,16(sp)
    800071ce:	00001097          	auipc	ra,0x1
    800071d2:	2da080e7          	jalr	730(ra) # 800084a8 <_ZN4core5alloc6layout6Layout13for_value_raw17h9ddd239d574f5362E>
    800071d6:	e02a                	sd	a0,0(sp)
    800071d8:	e42e                	sd	a1,8(sp)
    800071da:	a009                	j	800071dc <_ZN68_$LT$alloc..sync..Weak$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hb23957f9542a4990E+0x8e>
    800071dc:	66a2                	ld	a3,8(sp)
    800071de:	6602                	ld	a2,0(sp)
    800071e0:	65e2                	ld	a1,24(sp)

00000000800071e2 <.LBB42_14>:
    800071e2:	00020517          	auipc	a0,0x20
    800071e6:	b2650513          	addi	a0,a0,-1242 # 80026d08 <.L__unnamed_16>
    800071ea:	00005097          	auipc	ra,0x5
    800071ee:	08e080e7          	jalr	142(ra) # 8000c278 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17hd299418f64a2b74eE>
    800071f2:	a009                	j	800071f4 <.LBB42_14+0x12>
        if inner.weak.fetch_sub(1, Release) == 1 {
    800071f4:	a009                	j	800071f6 <.LBB42_14+0x14>
    }
    800071f6:	a009                	j	800071f8 <.LBB42_14+0x16>
    800071f8:	70e6                	ld	ra,120(sp)
    800071fa:	6109                	addi	sp,sp,128
    800071fc:	8082                	ret

Disassembly of section .text._ZN70_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hf7bf84e08f8deec7E:

00000000800071fe <_ZN70_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hf7bf84e08f8deec7E>:
    }
}

#[stable(feature = "rust1", since = "1.0.0")]
unsafe impl<#[may_dangle] T, A: Allocator> Drop for Vec<T, A> {
    fn drop(&mut self) {
    800071fe:	1101                	addi	sp,sp,-32
    80007200:	ec06                	sd	ra,24(sp)
    80007202:	e02a                	sd	a0,0(sp)
    80007204:	e82a                	sd	a0,16(sp)
        unsafe {
            // use drop for [T]
            // use a raw slice to refer to the elements of the vector as weakest necessary type;
            // could avoid questions of validity in certain cases
            ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
    80007206:	00010097          	auipc	ra,0x10
    8000720a:	90e080e7          	jalr	-1778(ra) # 80016b14 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$10as_mut_ptr17h2d512420264161fdE>
    8000720e:	e42a                	sd	a0,8(sp)
    80007210:	a009                	j	80007212 <_ZN70_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hf7bf84e08f8deec7E+0x14>
    80007212:	6522                	ld	a0,8(sp)
    80007214:	6582                	ld	a1,0(sp)
    80007216:	698c                	ld	a1,16(a1)
    80007218:	0001a097          	auipc	ra,0x1a
    8000721c:	590080e7          	jalr	1424(ra) # 800217a8 <_ZN4core3ptr24slice_from_raw_parts_mut17h39496eba86137ee5E>
    80007220:	a009                	j	80007222 <_ZN70_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hf7bf84e08f8deec7E+0x24>
    80007222:	a009                	j	80007224 <_ZN70_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hf7bf84e08f8deec7E+0x26>
        }
        // RawVec handles deallocation
    }
    80007224:	60e2                	ld	ra,24(sp)
    80007226:	6105                	addi	sp,sp,32
    80007228:	8082                	ret

Disassembly of section .text._ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h07f37a6ddf49c648E:

000000008000722a <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h07f37a6ddf49c648E>:

unsafe impl<#[may_dangle] T, A: Allocator> Drop for RawVec<T, A> {
    /// Frees the memory owned by the `RawVec` *without* trying to drop its contents.
    fn drop(&mut self) {
    8000722a:	715d                	addi	sp,sp,-80
    8000722c:	e486                	sd	ra,72(sp)
    8000722e:	85aa                	mv	a1,a0
    80007230:	e02e                	sd	a1,0(sp)
    80007232:	f42e                	sd	a1,40(sp)
    80007234:	0808                	addi	a0,sp,16
        if let Some((ptr, layout)) = self.current_memory() {
    80007236:	ffffb097          	auipc	ra,0xffffb
    8000723a:	7b8080e7          	jalr	1976(ra) # 800029ee <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h47d07dfc1131b1d6E>
    8000723e:	a009                	j	80007240 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h07f37a6ddf49c648E+0x16>
    80007240:	6542                	ld	a0,16(sp)
    80007242:	4581                	li	a1,0
    80007244:	00b51463          	bne	a0,a1,8000724c <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h07f37a6ddf49c648E+0x22>
    80007248:	a009                	j	8000724a <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h07f37a6ddf49c648E+0x20>
    8000724a:	a831                	j	80007266 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h07f37a6ddf49c648E+0x3c>
    8000724c:	6502                	ld	a0,0(sp)
    8000724e:	65c2                	ld	a1,16(sp)
    80007250:	f82e                	sd	a1,48(sp)
    80007252:	6662                	ld	a2,24(sp)
    80007254:	7682                	ld	a3,32(sp)
    80007256:	fc32                	sd	a2,56(sp)
    80007258:	e0b6                	sd	a3,64(sp)
            unsafe { self.alloc.deallocate(ptr, layout) }
    8000725a:	00005097          	auipc	ra,0x5
    8000725e:	01e080e7          	jalr	30(ra) # 8000c278 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17hd299418f64a2b74eE>
    80007262:	a009                	j	80007264 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h07f37a6ddf49c648E+0x3a>
        if let Some((ptr, layout)) = self.current_memory() {
    80007264:	a009                	j	80007266 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h07f37a6ddf49c648E+0x3c>
        }
    }
    80007266:	60a6                	ld	ra,72(sp)
    80007268:	6161                	addi	sp,sp,80
    8000726a:	8082                	ret

Disassembly of section .text._ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h02b15870f6f2ec1aE:

000000008000726c <_ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h02b15870f6f2ec1aE>:
        }
    }
}

impl<T> Drop for SpinlockGuard<'_, T>{
    fn drop(&mut self){
    8000726c:	1141                	addi	sp,sp,-16
    8000726e:	e406                	sd	ra,8(sp)
    80007270:	e02a                	sd	a0,0(sp)
        self.spinlock.release()
    80007272:	6108                	ld	a0,0(a0)
    80007274:	0000a097          	auipc	ra,0xa
    80007278:	80c080e7          	jalr	-2036(ra) # 80010a80 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17h676e67ecb47260bdE>
    8000727c:	a009                	j	8000727e <_ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h02b15870f6f2ec1aE+0x12>
    }
    8000727e:	60a2                	ld	ra,8(sp)
    80007280:	0141                	addi	sp,sp,16
    80007282:	8082                	ret

Disassembly of section .text._ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h07564fb2c96981cdE:

0000000080007284 <_ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h07564fb2c96981cdE>:
    fn drop(&mut self){
    80007284:	1141                	addi	sp,sp,-16
    80007286:	e406                	sd	ra,8(sp)
    80007288:	e02a                	sd	a0,0(sp)
        self.spinlock.release()
    8000728a:	6108                	ld	a0,0(a0)
    8000728c:	00009097          	auipc	ra,0x9
    80007290:	742080e7          	jalr	1858(ra) # 800109ce <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17h4488adb03f65166cE>
    80007294:	a009                	j	80007296 <_ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h07564fb2c96981cdE+0x12>
    }
    80007296:	60a2                	ld	ra,8(sp)
    80007298:	0141                	addi	sp,sp,16
    8000729a:	8082                	ret

Disassembly of section .text._ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h1d31607f4cd7f071E:

000000008000729c <_ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h1d31607f4cd7f071E>:
    fn drop(&mut self){
    8000729c:	1141                	addi	sp,sp,-16
    8000729e:	e406                	sd	ra,8(sp)
    800072a0:	e02a                	sd	a0,0(sp)
        self.spinlock.release()
    800072a2:	6108                	ld	a0,0(a0)
    800072a4:	0000a097          	auipc	ra,0xa
    800072a8:	b56080e7          	jalr	-1194(ra) # 80010dfa <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17hd5c81d47b1881bbfE>
    800072ac:	a009                	j	800072ae <_ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h1d31607f4cd7f071E+0x12>
    }
    800072ae:	60a2                	ld	ra,8(sp)
    800072b0:	0141                	addi	sp,sp,16
    800072b2:	8082                	ret

Disassembly of section .text._ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h472d74790cb24d84E:

00000000800072b4 <_ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h472d74790cb24d84E>:
    fn drop(&mut self){
    800072b4:	1141                	addi	sp,sp,-16
    800072b6:	e406                	sd	ra,8(sp)
    800072b8:	e02a                	sd	a0,0(sp)
        self.spinlock.release()
    800072ba:	6108                	ld	a0,0(a0)
    800072bc:	0000a097          	auipc	ra,0xa
    800072c0:	d54080e7          	jalr	-684(ra) # 80011010 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17hfedbfd7a024c8acfE>
    800072c4:	a009                	j	800072c6 <_ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h472d74790cb24d84E+0x12>
    }
    800072c6:	60a2                	ld	ra,8(sp)
    800072c8:	0141                	addi	sp,sp,16
    800072ca:	8082                	ret

Disassembly of section .text._ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h5c638f5071dc4adaE:

00000000800072cc <_ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h5c638f5071dc4adaE>:
    fn drop(&mut self){
    800072cc:	1141                	addi	sp,sp,-16
    800072ce:	e406                	sd	ra,8(sp)
    800072d0:	e02a                	sd	a0,0(sp)
        self.spinlock.release()
    800072d2:	6108                	ld	a0,0(a0)
    800072d4:	0000a097          	auipc	ra,0xa
    800072d8:	9c2080e7          	jalr	-1598(ra) # 80010c96 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17h84d22e527c35405fE>
    800072dc:	a009                	j	800072de <_ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h5c638f5071dc4adaE+0x12>
    }
    800072de:	60a2                	ld	ra,8(sp)
    800072e0:	0141                	addi	sp,sp,16
    800072e2:	8082                	ret

Disassembly of section .text._ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h821d547a3c969c60E:

00000000800072e4 <_ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h821d547a3c969c60E>:
    fn drop(&mut self){
    800072e4:	1141                	addi	sp,sp,-16
    800072e6:	e406                	sd	ra,8(sp)
    800072e8:	e02a                	sd	a0,0(sp)
        self.spinlock.release()
    800072ea:	6108                	ld	a0,0(a0)
    800072ec:	0000a097          	auipc	ra,0xa
    800072f0:	c72080e7          	jalr	-910(ra) # 80010f5e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17hfda5e7f2f4cdedb7E>
    800072f4:	a009                	j	800072f6 <_ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h821d547a3c969c60E+0x12>
    }
    800072f6:	60a2                	ld	ra,8(sp)
    800072f8:	0141                	addi	sp,sp,16
    800072fa:	8082                	ret

Disassembly of section .text._ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hb3b00b618040e227E:

00000000800072fc <_ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hb3b00b618040e227E>:
    fn drop(&mut self){
    800072fc:	1141                	addi	sp,sp,-16
    800072fe:	e406                	sd	ra,8(sp)
    80007300:	e02a                	sd	a0,0(sp)
        self.spinlock.release()
    80007302:	6108                	ld	a0,0(a0)
    80007304:	0000a097          	auipc	ra,0xa
    80007308:	ba8080e7          	jalr	-1112(ra) # 80010eac <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17hdd8465c64dcbee95E>
    8000730c:	a009                	j	8000730e <_ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hb3b00b618040e227E+0x12>
    }
    8000730e:	60a2                	ld	ra,8(sp)
    80007310:	0141                	addi	sp,sp,16
    80007312:	8082                	ret

Disassembly of section .text._ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hbd0d5c90a46c79b0E:

0000000080007314 <_ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hbd0d5c90a46c79b0E>:
    fn drop(&mut self){
    80007314:	1141                	addi	sp,sp,-16
    80007316:	e406                	sd	ra,8(sp)
    80007318:	e02a                	sd	a0,0(sp)
        self.spinlock.release()
    8000731a:	6108                	ld	a0,0(a0)
    8000731c:	0000a097          	auipc	ra,0xa
    80007320:	a2c080e7          	jalr	-1492(ra) # 80010d48 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17hb6d563787d966a77E>
    80007324:	a009                	j	80007326 <_ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hbd0d5c90a46c79b0E+0x12>
    }
    80007326:	60a2                	ld	ra,8(sp)
    80007328:	0141                	addi	sp,sp,16
    8000732a:	8082                	ret

Disassembly of section .text._ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hc0ab90800bd26fd3E:

000000008000732c <_ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hc0ab90800bd26fd3E>:
    fn drop(&mut self){
    8000732c:	1141                	addi	sp,sp,-16
    8000732e:	e406                	sd	ra,8(sp)
    80007330:	e02a                	sd	a0,0(sp)
        self.spinlock.release()
    80007332:	6108                	ld	a0,0(a0)
    80007334:	00009097          	auipc	ra,0x9
    80007338:	7fe080e7          	jalr	2046(ra) # 80010b32 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17h7f531b2c66469855E>
    8000733c:	a009                	j	8000733e <_ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hc0ab90800bd26fd3E+0x12>
    }
    8000733e:	60a2                	ld	ra,8(sp)
    80007340:	0141                	addi	sp,sp,16
    80007342:	8082                	ret

Disassembly of section .text._ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hc6fa91bad8825bc2E:

0000000080007344 <_ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hc6fa91bad8825bc2E>:
    fn drop(&mut self){
    80007344:	1141                	addi	sp,sp,-16
    80007346:	e406                	sd	ra,8(sp)
    80007348:	e02a                	sd	a0,0(sp)
        self.spinlock.release()
    8000734a:	6108                	ld	a0,0(a0)
    8000734c:	0000a097          	auipc	ra,0xa
    80007350:	898080e7          	jalr	-1896(ra) # 80010be4 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17h8041517806e423d6E>
    80007354:	a009                	j	80007356 <_ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hc6fa91bad8825bc2E+0x12>
    }
    80007356:	60a2                	ld	ra,8(sp)
    80007358:	0141                	addi	sp,sp,16
    8000735a:	8082                	ret

Disassembly of section .text._ZN90_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17ha2d42db7f65900b8E:

000000008000735c <_ZN90_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17ha2d42db7f65900b8E>:
}

impl<'a, T: ?Sized> Drop for SleepLockGuard<'a, T> {
    /// The dropping of the SpinLockGuard will call spinlock's release_lock(),
    /// through its reference to its original spinlock.
    fn drop(&mut self) {
    8000735c:	1141                	addi	sp,sp,-16
    8000735e:	e406                	sd	ra,8(sp)
    80007360:	e02a                	sd	a0,0(sp)
        self.lock.unlock();
    80007362:	6108                	ld	a0,0(a0)
    80007364:	00016097          	auipc	ra,0x16
    80007368:	270080e7          	jalr	624(ra) # 8001d5d4 <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$6unlock17h4136b26b6a44129dE>
    8000736c:	a009                	j	8000736e <_ZN90_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17ha2d42db7f65900b8E+0x12>
    }
    8000736e:	60a2                	ld	ra,8(sp)
    80007370:	0141                	addi	sp,sp,16
    80007372:	8082                	ret

Disassembly of section .text._ZN90_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hd4f2db8ec388cdc1E:

0000000080007374 <_ZN90_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hd4f2db8ec388cdc1E>:
    fn drop(&mut self) {
    80007374:	1141                	addi	sp,sp,-16
    80007376:	e406                	sd	ra,8(sp)
    80007378:	e02a                	sd	a0,0(sp)
        self.lock.unlock();
    8000737a:	6108                	ld	a0,0(a0)
    8000737c:	00016097          	auipc	ra,0x16
    80007380:	2a0080e7          	jalr	672(ra) # 8001d61c <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$6unlock17h5d72a4d2b4e61b31E>
    80007384:	a009                	j	80007386 <_ZN90_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hd4f2db8ec388cdc1E+0x12>
    }
    80007386:	60a2                	ld	ra,8(sp)
    80007388:	0141                	addi	sp,sp,16
    8000738a:	8082                	ret

Disassembly of section .text._ZN62_$LT$kernel..fs..bio..Buf$u20$as$u20$core..ops..drop..Drop$GT$4drop17hae787f8a28b7a10dE:

000000008000738c <_ZN62_$LT$kernel..fs..bio..Buf$u20$as$u20$core..ops..drop..Drop$GT$4drop17hae787f8a28b7a10dE>:
    fn drop(&mut self) {
    8000738c:	7179                	addi	sp,sp,-48
    8000738e:	f406                	sd	ra,40(sp)
    80007390:	e42a                	sd	a0,8(sp)
    80007392:	f02a                	sd	a0,32(sp)
        drop(self.data.take());
    80007394:	0541                	addi	a0,a0,16
    80007396:	00007097          	auipc	ra,0x7
    8000739a:	31e080e7          	jalr	798(ra) # 8000e6b4 <_ZN4core6option15Option$LT$T$GT$4take17h80340c04cecd09beE>
    8000739e:	e82a                	sd	a0,16(sp)
    800073a0:	ec2e                	sd	a1,24(sp)
    800073a2:	a009                	j	800073a4 <_ZN62_$LT$kernel..fs..bio..Buf$u20$as$u20$core..ops..drop..Drop$GT$4drop17hae787f8a28b7a10dE+0x18>
    800073a4:	65e2                	ld	a1,24(sp)
    800073a6:	6542                	ld	a0,16(sp)
    800073a8:	00016097          	auipc	ra,0x16
    800073ac:	d1e080e7          	jalr	-738(ra) # 8001d0c6 <_ZN4core3mem4drop17h8377f059e38e21aaE>
    800073b0:	a009                	j	800073b2 <_ZN62_$LT$kernel..fs..bio..Buf$u20$as$u20$core..ops..drop..Drop$GT$4drop17hae787f8a28b7a10dE+0x26>
        BCACHE.brelse(self.index);        
    800073b2:	6522                	ld	a0,8(sp)
    800073b4:	610c                	ld	a1,0(a0)

00000000800073b6 <.LBB57_4>:
    800073b6:	00028517          	auipc	a0,0x28
    800073ba:	c4a50513          	addi	a0,a0,-950 # 8002f000 <_ZN6kernel2fs3bio6BCACHE17h4811aac4f8d79dc4E>
    800073be:	ffffc097          	auipc	ra,0xffffc
    800073c2:	314080e7          	jalr	788(ra) # 800036d2 <_ZN6kernel2fs3bio6Bcache6brelse17hc59c97ea45d16b39E>
    800073c6:	a009                	j	800073c8 <.LBB57_4+0x12>
    }
    800073c8:	70a2                	ld	ra,40(sp)
    800073ca:	6145                	addi	sp,sp,48
    800073cc:	8082                	ret

Disassembly of section .text._ZN66_$LT$kernel..fs..inode..Inode$u20$as$u20$core..ops..drop..Drop$GT$4drop17h624968f150cac4e7E:

00000000800073ce <_ZN66_$LT$kernel..fs..inode..Inode$u20$as$u20$core..ops..drop..Drop$GT$4drop17h624968f150cac4e7E>:

impl Drop for Inode {
    /// Done with this inode. 
    /// If this is the last reference in the inode cache, then is might be recycled. 
    /// Further, if this inode has no links anymore, free this inode in the disk. 
    fn drop(&mut self) {
    800073ce:	1141                	addi	sp,sp,-16
    800073d0:	e406                	sd	ra,8(sp)
    800073d2:	85aa                	mv	a1,a0
    800073d4:	e02e                	sd	a1,0(sp)

00000000800073d6 <.LBB58_2>:
        ICACHE.put(self)
    800073d6:	00060517          	auipc	a0,0x60
    800073da:	6ba50513          	addi	a0,a0,1722 # 80067a90 <_ZN6kernel2fs5inode6ICACHE17had1be8942ca79bf1E>
    800073de:	00011097          	auipc	ra,0x11
    800073e2:	63c080e7          	jalr	1596(ra) # 80018a1a <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE>
    800073e6:	a009                	j	800073e8 <.LBB58_2+0x12>
    }
    800073e8:	60a2                	ld	ra,8(sp)
    800073ea:	0141                	addi	sp,sp,16
    800073ec:	8082                	ret

Disassembly of section .text._ZN84_$LT$core..num..wrapping..Wrapping$LT$usize$GT$$u20$as$u20$core..ops..arith..Add$GT$3add17hc13ca841e8f8e9ddE:

00000000800073ee <_ZN84_$LT$core..num..wrapping..Wrapping$LT$usize$GT$$u20$as$u20$core..ops..arith..Add$GT$3add17hc13ca841e8f8e9ddE>:
        #[stable(feature = "rust1", since = "1.0.0")]
        impl Add for Wrapping<$t> {
            type Output = Wrapping<$t>;

            #[inline]
            fn add(self, other: Wrapping<$t>) -> Wrapping<$t> {
    800073ee:	7179                	addi	sp,sp,-48
    800073f0:	f406                	sd	ra,40(sp)
    800073f2:	ec2a                	sd	a0,24(sp)
    800073f4:	f02e                	sd	a1,32(sp)
                Wrapping(self.0.wrapping_add(other.0))
    800073f6:	00017097          	auipc	ra,0x17
    800073fa:	cbe080e7          	jalr	-834(ra) # 8001e0b4 <_ZN4core3num23_$LT$impl$u20$usize$GT$12wrapping_add17he0ea74277f4c06b1E>
    800073fe:	e42a                	sd	a0,8(sp)
    80007400:	a009                	j	80007402 <_ZN84_$LT$core..num..wrapping..Wrapping$LT$usize$GT$$u20$as$u20$core..ops..arith..Add$GT$3add17hc13ca841e8f8e9ddE+0x14>
    80007402:	6522                	ld	a0,8(sp)
    80007404:	e82a                	sd	a0,16(sp)
            }
    80007406:	70a2                	ld	ra,40(sp)
    80007408:	6145                	addi	sp,sp,48
    8000740a:	8082                	ret

Disassembly of section .text._ZN84_$LT$core..num..wrapping..Wrapping$LT$usize$GT$$u20$as$u20$core..ops..arith..Sub$GT$3sub17h09c98f8a3aa1050aE:

000000008000740c <_ZN84_$LT$core..num..wrapping..Wrapping$LT$usize$GT$$u20$as$u20$core..ops..arith..Sub$GT$3sub17h09c98f8a3aa1050aE>:
        #[stable(feature = "rust1", since = "1.0.0")]
        impl Sub for Wrapping<$t> {
            type Output = Wrapping<$t>;

            #[inline]
            fn sub(self, other: Wrapping<$t>) -> Wrapping<$t> {
    8000740c:	7179                	addi	sp,sp,-48
    8000740e:	f406                	sd	ra,40(sp)
    80007410:	ec2a                	sd	a0,24(sp)
    80007412:	f02e                	sd	a1,32(sp)
                Wrapping(self.0.wrapping_sub(other.0))
    80007414:	00017097          	auipc	ra,0x17
    80007418:	cac080e7          	jalr	-852(ra) # 8001e0c0 <_ZN4core3num23_$LT$impl$u20$usize$GT$12wrapping_sub17h8f077bf007d122c9E>
    8000741c:	e42a                	sd	a0,8(sp)
    8000741e:	a009                	j	80007420 <_ZN84_$LT$core..num..wrapping..Wrapping$LT$usize$GT$$u20$as$u20$core..ops..arith..Sub$GT$3sub17h09c98f8a3aa1050aE+0x14>
    80007420:	6522                	ld	a0,8(sp)
    80007422:	e82a                	sd	a0,16(sp)
            }
    80007424:	70a2                	ld	ra,40(sp)
    80007426:	6145                	addi	sp,sp,48
    80007428:	8082                	ret

Disassembly of section .text._ZN90_$LT$core..num..wrapping..Wrapping$LT$usize$GT$$u20$as$u20$core..ops..arith..AddAssign$GT$10add_assign17hc731864567f3481aE:

000000008000742a <_ZN90_$LT$core..num..wrapping..Wrapping$LT$usize$GT$$u20$as$u20$core..ops..arith..AddAssign$GT$10add_assign17hc731864567f3481aE>:
            fn add_assign(&mut self, other: Wrapping<$t>) {
    8000742a:	7179                	addi	sp,sp,-48
    8000742c:	f406                	sd	ra,40(sp)
    8000742e:	e42a                	sd	a0,8(sp)
    80007430:	ec2a                	sd	a0,24(sp)
    80007432:	f02e                	sd	a1,32(sp)
                *self = *self + other;
    80007434:	6108                	ld	a0,0(a0)
    80007436:	00000097          	auipc	ra,0x0
    8000743a:	fb8080e7          	jalr	-72(ra) # 800073ee <_ZN84_$LT$core..num..wrapping..Wrapping$LT$usize$GT$$u20$as$u20$core..ops..arith..Add$GT$3add17hc13ca841e8f8e9ddE>
    8000743e:	e82a                	sd	a0,16(sp)
    80007440:	a009                	j	80007442 <_ZN90_$LT$core..num..wrapping..Wrapping$LT$usize$GT$$u20$as$u20$core..ops..arith..AddAssign$GT$10add_assign17hc731864567f3481aE+0x18>
    80007442:	6542                	ld	a0,16(sp)
    80007444:	65a2                	ld	a1,8(sp)
    80007446:	e188                	sd	a0,0(a1)
            }
    80007448:	70a2                	ld	ra,40(sp)
    8000744a:	6145                	addi	sp,sp,48
    8000744c:	8082                	ret

Disassembly of section .text._ZN90_$LT$core..num..wrapping..Wrapping$LT$usize$GT$$u20$as$u20$core..ops..arith..SubAssign$GT$10sub_assign17h67a53f3fa0ccb70bE:

000000008000744e <_ZN90_$LT$core..num..wrapping..Wrapping$LT$usize$GT$$u20$as$u20$core..ops..arith..SubAssign$GT$10sub_assign17h67a53f3fa0ccb70bE>:
                #[stable(feature = "wrapping_ref", since = "1.14.0")] }

        #[stable(feature = "op_assign_traits", since = "1.8.0")]
        impl SubAssign for Wrapping<$t> {
            #[inline]
            fn sub_assign(&mut self, other: Wrapping<$t>) {
    8000744e:	7179                	addi	sp,sp,-48
    80007450:	f406                	sd	ra,40(sp)
    80007452:	e42a                	sd	a0,8(sp)
    80007454:	ec2a                	sd	a0,24(sp)
    80007456:	f02e                	sd	a1,32(sp)
                *self = *self - other;
    80007458:	6108                	ld	a0,0(a0)
    8000745a:	00000097          	auipc	ra,0x0
    8000745e:	fb2080e7          	jalr	-78(ra) # 8000740c <_ZN84_$LT$core..num..wrapping..Wrapping$LT$usize$GT$$u20$as$u20$core..ops..arith..Sub$GT$3sub17h09c98f8a3aa1050aE>
    80007462:	e82a                	sd	a0,16(sp)
    80007464:	a009                	j	80007466 <_ZN90_$LT$core..num..wrapping..Wrapping$LT$usize$GT$$u20$as$u20$core..ops..arith..SubAssign$GT$10sub_assign17h67a53f3fa0ccb70bE+0x18>
    80007466:	6542                	ld	a0,16(sp)
    80007468:	65a2                	ld	a1,8(sp)
    8000746a:	e188                	sd	a0,0(a1)
            }
    8000746c:	70a2                	ld	ra,40(sp)
    8000746e:	6145                	addi	sp,sp,48
    80007470:	8082                	ret

Disassembly of section .text._ZN6kernel4misc3min17he96917d05b11cd47E:

0000000080007472 <_ZN6kernel4misc3min17he96917d05b11cd47E>:
use core::ptr::read;
use core::cmp::Ord;
use core::ptr::{ write, write_bytes };

pub fn min<T>(a: T, b: T) -> T 
    80007472:	7179                	addi	sp,sp,-48
    80007474:	f406                	sd	ra,40(sp)
    80007476:	e82a                	sd	a0,16(sp)
    80007478:	ec2e                	sd	a1,24(sp)
    8000747a:	0808                	addi	a0,sp,16
    8000747c:	082c                	addi	a1,sp,24
    where T: Ord
{
    if a < b {
    8000747e:	00014097          	auipc	ra,0x14
    80007482:	38c080e7          	jalr	908(ra) # 8001b80a <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17ha09858e1dc8f460eE>
    80007486:	e42a                	sd	a0,8(sp)
    80007488:	a009                	j	8000748a <_ZN6kernel4misc3min17he96917d05b11cd47E+0x18>
    8000748a:	6522                	ld	a0,8(sp)
    8000748c:	4581                	li	a1,0
    8000748e:	00b50663          	beq	a0,a1,8000749a <_ZN6kernel4misc3min17he96917d05b11cd47E+0x28>
    80007492:	a009                	j	80007494 <_ZN6kernel4misc3min17he96917d05b11cd47E+0x22>
        return a
    80007494:	6542                	ld	a0,16(sp)
    80007496:	f02a                	sd	a0,32(sp)
    }
    b
}
    80007498:	a021                	j	800074a0 <_ZN6kernel4misc3min17he96917d05b11cd47E+0x2e>
    b
    8000749a:	6562                	ld	a0,24(sp)
    8000749c:	f02a                	sd	a0,32(sp)
}
    8000749e:	a009                	j	800074a0 <_ZN6kernel4misc3min17he96917d05b11cd47E+0x2e>
    800074a0:	7502                	ld	a0,32(sp)
    800074a2:	70a2                	ld	ra,40(sp)
    800074a4:	6145                	addi	sp,sp,48
    800074a6:	8082                	ret

Disassembly of section .text._ZN6kernel2fs10superblock10SuperBlock4init17hd314ea22bd8e6757E:

00000000800074a8 <_ZN6kernel2fs10superblock10SuperBlock4init17hd314ea22bd8e6757E>:
        }
    }

    /// Read and init the super block from disk into memory.
    /// SAFETY: it should only be called by the first regular process alone.
    pub unsafe fn init(&mut self, dev: u32) {
    800074a8:	7125                	addi	sp,sp,-416
    800074aa:	ef06                	sd	ra,408(sp)
    800074ac:	ecaa                	sd	a0,88(sp)
    800074ae:	862e                	mv	a2,a1
    800074b0:	f0b2                	sd	a2,96(sp)
    800074b2:	eeaa                	sd	a0,344(sp)
    800074b4:	16b12223          	sw	a1,356(sp)
    800074b8:	4521                	li	a0,8
    800074ba:	f4aa                	sd	a0,104(sp)
    800074bc:	feaa                	sd	a0,376(sp)
        debug_assert_eq!(mem::align_of::<BufData>() % mem::align_of::<RawSuperBlock>(), 0);
    800074be:	a009                	j	800074c0 <_ZN6kernel2fs10superblock10SuperBlock4init17hd314ea22bd8e6757E+0x18>
    800074c0:	4511                	li	a0,4
    800074c2:	e8aa                	sd	a0,80(sp)
    800074c4:	eb2a                	sd	a0,400(sp)
    800074c6:	a009                	j	800074c8 <_ZN6kernel2fs10superblock10SuperBlock4init17hd314ea22bd8e6757E+0x20>
    800074c8:	6546                	ld	a0,80(sp)
    800074ca:	4581                	li	a1,0
    800074cc:	18b50763          	beq	a0,a1,8000765a <.LBB0_31>
    800074d0:	a009                	j	800074d2 <_ZN6kernel2fs10superblock10SuperBlock4init17hd314ea22bd8e6757E+0x2a>
    800074d2:	7526                	ld	a0,104(sp)
    800074d4:	65c6                	ld	a1,80(sp)
    800074d6:	02b57533          	remu	a0,a0,a1
    800074da:	e52a                	sd	a0,136(sp)
    800074dc:	0130                	addi	a2,sp,136
    800074de:	e0b2                	sd	a2,64(sp)
    800074e0:	fcb2                	sd	a2,120(sp)

00000000800074e2 <.LBB0_23>:
    800074e2:	0001f597          	auipc	a1,0x1f
    800074e6:	38e58593          	addi	a1,a1,910 # 80026870 <.L__unnamed_6+0xc8>
    800074ea:	e4ae                	sd	a1,72(sp)
    800074ec:	e12e                	sd	a1,128(sp)
    800074ee:	f6b2                	sd	a2,360(sp)
    800074f0:	faae                	sd	a1,368(sp)
    800074f2:	4581                	li	a1,0
    800074f4:	02b50363          	beq	a0,a1,8000751a <.LBB0_24+0x14>
    800074f8:	a009                	j	800074fa <.LBB0_23+0x18>
    800074fa:	6626                	ld	a2,72(sp)
    800074fc:	6586                	ld	a1,64(sp)
    800074fe:	4501                	li	a0,0
    80007500:	08a10ba3          	sb	a0,151(sp)
    80007504:	ed2a                	sd	a0,152(sp)

0000000080007506 <.LBB0_24>:
    80007506:	00020717          	auipc	a4,0x20
    8000750a:	87a70713          	addi	a4,a4,-1926 # 80026d80 <.L__unnamed_2>
    8000750e:	0934                	addi	a3,sp,152
    80007510:	00018097          	auipc	ra,0x18
    80007514:	494080e7          	jalr	1172(ra) # 8001f9a4 <_ZN4core9panicking13assert_failed17h4e6d74c9d534b647E>
    80007518:	0000                	unimp
        if self.initialized.load(Ordering::Relaxed) {
    8000751a:	6566                	ld	a0,88(sp)
    8000751c:	02050513          	addi	a0,a0,32
    80007520:	4581                	li	a1,0
    80007522:	0cb107a3          	sb	a1,207(sp)
    80007526:	ffffd097          	auipc	ra,0xffffd
    8000752a:	148080e7          	jalr	328(ra) # 8000466e <_ZN4core4sync6atomic10AtomicBool4load17h49a663f50dd66935E>
    8000752e:	fc2a                	sd	a0,56(sp)
    80007530:	a009                	j	80007532 <.LBB0_24+0x2c>
    80007532:	7562                	ld	a0,56(sp)
    80007534:	4581                	li	a1,0
    80007536:	00b50463          	beq	a0,a1,8000753e <.LBB0_24+0x38>
    8000753a:	a009                	j	8000753c <.LBB0_24+0x36>
        self.initialized.store(true, Ordering::SeqCst);
        drop(buf);

        #[cfg(feature = "verbose_init_info")]
        println!("super block data: {:?}", self.data.as_ptr().as_ref().unwrap());
    }
    8000753c:	aa21                	j	80007654 <.LBB0_30+0x4e>
        let buf = BCACHE.bread(dev, 1);
    8000753e:	7606                	ld	a2,96(sp)

0000000080007540 <.LBB0_25>:
    80007540:	00028597          	auipc	a1,0x28
    80007544:	ac058593          	addi	a1,a1,-1344 # 8002f000 <_ZN6kernel2fs3bio6BCACHE17h4811aac4f8d79dc4E>
    80007548:	0988                	addi	a0,sp,208
    8000754a:	4685                	li	a3,1
    8000754c:	ffffc097          	auipc	ra,0xffffc
    80007550:	0b0080e7          	jalr	176(ra) # 800035fc <_ZN6kernel2fs3bio6Bcache5bread17h6ef915e4e896646bE>
    80007554:	a009                	j	80007556 <.LBB0_25+0x16>
    80007556:	0988                	addi	a0,sp,208
            buf.raw_data() as *const RawSuperBlock,
    80007558:	ffffc097          	auipc	ra,0xffffc
    8000755c:	1ea080e7          	jalr	490(ra) # 80003742 <_ZN6kernel2fs3bio3Buf8raw_data17h6a896fea03f7ee91E>
    80007560:	f82a                	sd	a0,48(sp)
    80007562:	a009                	j	80007564 <.LBB0_25+0x24>
    80007564:	6566                	ld	a0,88(sp)
    80007566:	75c2                	ld	a1,48(sp)
    80007568:	f02e                	sd	a1,32(sp)
    8000756a:	e72a                	sd	a0,392(sp)
            self.data.as_mut_ptr(),
    8000756c:	f42a                	sd	a0,40(sp)
    8000756e:	a009                	j	80007570 <.LBB0_25+0x30>
        ptr::copy_nonoverlapping(
    80007570:	75a2                	ld	a1,40(sp)
    80007572:	7502                	ld	a0,32(sp)
    80007574:	4d50                	lw	a2,28(a0)
    80007576:	cdd0                	sw	a2,28(a1)
    80007578:	4d10                	lw	a2,24(a0)
    8000757a:	cd90                	sw	a2,24(a1)
    8000757c:	4950                	lw	a2,20(a0)
    8000757e:	c9d0                	sw	a2,20(a1)
    80007580:	4910                	lw	a2,16(a0)
    80007582:	c990                	sw	a2,16(a1)
    80007584:	4550                	lw	a2,12(a0)
    80007586:	c5d0                	sw	a2,12(a1)
    80007588:	4510                	lw	a2,8(a0)
    8000758a:	c590                	sw	a2,8(a1)
    8000758c:	4150                	lw	a2,4(a0)
    8000758e:	c1d0                	sw	a2,4(a1)
    80007590:	4108                	lw	a0,0(a0)
    80007592:	c188                	sw	a0,0(a1)

0000000080007594 <.LBB0_26>:
        println!("check magic number");
    80007594:	00020597          	auipc	a1,0x20
    80007598:	81c58593          	addi	a1,a1,-2020 # 80026db0 <.L__unnamed_3>

000000008000759c <.LBB0_27>:
    8000759c:	00020697          	auipc	a3,0x20
    800075a0:	82468693          	addi	a3,a3,-2012 # 80026dc0 <.L__unnamed_5>
    800075a4:	19a8                	addi	a0,sp,248
    800075a6:	4605                	li	a2,1
    800075a8:	4701                	li	a4,0
    800075aa:	ffffe097          	auipc	ra,0xffffe
    800075ae:	ec0080e7          	jalr	-320(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    800075b2:	a009                	j	800075b4 <.LBB0_27+0x18>
    800075b4:	19a8                	addi	a0,sp,248
    800075b6:	00016097          	auipc	ra,0x16
    800075ba:	796080e7          	jalr	1942(ra) # 8001dd4c <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    800075be:	a009                	j	800075c0 <.LBB0_27+0x24>
    800075c0:	6566                	ld	a0,88(sp)
    800075c2:	e32a                	sd	a0,384(sp)
        if self.data.as_ptr().as_ref().unwrap().magic != FSMAGIC {
    800075c4:	ec2a                	sd	a0,24(sp)
    800075c6:	a009                	j	800075c8 <.LBB0_27+0x2c>
    800075c8:	6562                	ld	a0,24(sp)
    800075ca:	ffffc097          	auipc	ra,0xffffc
    800075ce:	986080e7          	jalr	-1658(ra) # 80002f50 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6as_ref17he2102635824876d2E>
    800075d2:	e82a                	sd	a0,16(sp)
    800075d4:	a009                	j	800075d6 <.LBB0_27+0x3a>
    800075d6:	6542                	ld	a0,16(sp)

00000000800075d8 <.LBB0_28>:
    800075d8:	0001f597          	auipc	a1,0x1f
    800075dc:	7e858593          	addi	a1,a1,2024 # 80026dc0 <.L__unnamed_5>
    800075e0:	00008097          	auipc	ra,0x8
    800075e4:	8ae080e7          	jalr	-1874(ra) # 8000ee8e <_ZN4core6option15Option$LT$T$GT$6unwrap17hcaa2b543d69df090E>
    800075e8:	e42a                	sd	a0,8(sp)
    800075ea:	a009                	j	800075ec <.LBB0_28+0x14>
    800075ec:	6522                	ld	a0,8(sp)
    800075ee:	4108                	lw	a0,0(a0)
    800075f0:	102035b7          	lui	a1,0x10203
    800075f4:	0405859b          	addiw	a1,a1,64
    800075f8:	02b50163          	beq	a0,a1,8000761a <.LBB0_30+0x14>
    800075fc:	a009                	j	800075fe <.LBB0_29>

00000000800075fe <.LBB0_29>:
            panic!("invalid file system magic num");
    800075fe:	0001f517          	auipc	a0,0x1f
    80007602:	7da50513          	addi	a0,a0,2010 # 80026dd8 <.L__unnamed_6>

0000000080007606 <.LBB0_30>:
    80007606:	0001f617          	auipc	a2,0x1f
    8000760a:	7f260613          	addi	a2,a2,2034 # 80026df8 <.L__unnamed_7>
    8000760e:	45f5                	li	a1,29
    80007610:	0001b097          	auipc	ra,0x1b
    80007614:	c66080e7          	jalr	-922(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80007618:	0000                	unimp
        self.initialized.store(true, Ordering::SeqCst);
    8000761a:	6566                	ld	a0,88(sp)
    8000761c:	02050513          	addi	a0,a0,32
    80007620:	4611                	li	a2,4
    80007622:	12c107a3          	sb	a2,303(sp)
    80007626:	4585                	li	a1,1
    80007628:	ffffd097          	auipc	ra,0xffffd
    8000762c:	0c4080e7          	jalr	196(ra) # 800046ec <_ZN4core4sync6atomic10AtomicBool5store17h325e21ca90edd7e7E>
    80007630:	a009                	j	80007632 <.LBB0_30+0x2c>
        drop(buf);
    80007632:	754e                	ld	a0,240(sp)
    80007634:	eaaa                	sd	a0,336(sp)
    80007636:	752e                	ld	a0,232(sp)
    80007638:	e6aa                	sd	a0,328(sp)
    8000763a:	750e                	ld	a0,224(sp)
    8000763c:	e2aa                	sd	a0,320(sp)
    8000763e:	656e                	ld	a0,216(sp)
    80007640:	fe2a                	sd	a0,312(sp)
    80007642:	654e                	ld	a0,208(sp)
    80007644:	fa2a                	sd	a0,304(sp)
    80007646:	1a08                	addi	a0,sp,304
    80007648:	00016097          	auipc	ra,0x16
    8000764c:	b12080e7          	jalr	-1262(ra) # 8001d15a <_ZN4core3mem4drop17hda1e19029436deb9E>
    80007650:	a009                	j	80007652 <.LBB0_30+0x4c>
    }
    80007652:	a009                	j	80007654 <.LBB0_30+0x4e>
    80007654:	60fa                	ld	ra,408(sp)
    80007656:	611d                	addi	sp,sp,416
    80007658:	8082                	ret

000000008000765a <.LBB0_31>:
        debug_assert_eq!(mem::align_of::<BufData>() % mem::align_of::<RawSuperBlock>(), 0);
    8000765a:	0001f517          	auipc	a0,0x1f
    8000765e:	6e650513          	addi	a0,a0,1766 # 80026d40 <str.0>

0000000080007662 <.LBB0_32>:
    80007662:	0001f617          	auipc	a2,0x1f
    80007666:	6be60613          	addi	a2,a2,1726 # 80026d20 <.L__unnamed_8>
    8000766a:	03900593          	li	a1,57
    8000766e:	0001b097          	auipc	ra,0x1b
    80007672:	c08080e7          	jalr	-1016(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel2fs10superblock10SuperBlock4read17h8c393935916ac41aE:

0000000080007678 <_ZN6kernel2fs10superblock10SuperBlock4read17h8c393935916ac41aE>:

    /// Read the info of super block.
    fn read(&self) -> &RawSuperBlock {
    80007678:	715d                	addi	sp,sp,-80
    8000767a:	e486                	sd	ra,72(sp)
    8000767c:	f02a                	sd	a0,32(sp)
    8000767e:	fc2a                	sd	a0,56(sp)
        debug_assert!(self.initialized.load(Ordering::Relaxed));
    80007680:	02050513          	addi	a0,a0,32
    80007684:	4581                	li	a1,0
    80007686:	02b10ba3          	sb	a1,55(sp)
    8000768a:	ffffd097          	auipc	ra,0xffffd
    8000768e:	fe4080e7          	jalr	-28(ra) # 8000466e <_ZN4core4sync6atomic10AtomicBool4load17h49a663f50dd66935E>
    80007692:	f42a                	sd	a0,40(sp)
    80007694:	a009                	j	80007696 <_ZN6kernel2fs10superblock10SuperBlock4read17h8c393935916ac41aE+0x1e>
    80007696:	7522                	ld	a0,40(sp)
    80007698:	e10d                	bnez	a0,800076ba <.LBB1_8+0x16>
    8000769a:	a009                	j	8000769c <.LBB1_7>

000000008000769c <.LBB1_7>:
    8000769c:	0001f517          	auipc	a0,0x1f
    800076a0:	77450513          	addi	a0,a0,1908 # 80026e10 <.L__unnamed_9>

00000000800076a4 <.LBB1_8>:
    800076a4:	0001f617          	auipc	a2,0x1f
    800076a8:	7ac60613          	addi	a2,a2,1964 # 80026e50 <.L__unnamed_10>
    800076ac:	03a00593          	li	a1,58
    800076b0:	0001b097          	auipc	ra,0x1b
    800076b4:	bc6080e7          	jalr	-1082(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    800076b8:	0000                	unimp
    800076ba:	7502                	ld	a0,32(sp)
    800076bc:	e0aa                	sd	a0,64(sp)
        unsafe {
            self.data.as_ptr().as_ref().unwrap()
    800076be:	ec2a                	sd	a0,24(sp)
    800076c0:	a009                	j	800076c2 <.LBB1_8+0x1e>
    800076c2:	6562                	ld	a0,24(sp)
    800076c4:	ffffc097          	auipc	ra,0xffffc
    800076c8:	88c080e7          	jalr	-1908(ra) # 80002f50 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6as_ref17he2102635824876d2E>
    800076cc:	e82a                	sd	a0,16(sp)
    800076ce:	a009                	j	800076d0 <.LBB1_8+0x2c>
    800076d0:	6542                	ld	a0,16(sp)

00000000800076d2 <.LBB1_9>:
    800076d2:	0001f597          	auipc	a1,0x1f
    800076d6:	79658593          	addi	a1,a1,1942 # 80026e68 <.L__unnamed_11>
    800076da:	00007097          	auipc	ra,0x7
    800076de:	7b4080e7          	jalr	1972(ra) # 8000ee8e <_ZN4core6option15Option$LT$T$GT$6unwrap17hcaa2b543d69df090E>
    800076e2:	e42a                	sd	a0,8(sp)
    800076e4:	a009                	j	800076e6 <.LBB1_9+0x14>
        }
    }
    800076e6:	6522                	ld	a0,8(sp)
    800076e8:	60a6                	ld	ra,72(sp)
    800076ea:	6161                	addi	sp,sp,80
    800076ec:	8082                	ret

Disassembly of section .text._ZN6kernel2fs10superblock10SuperBlock8read_log17h7cc8d407eaa9ef0fE:

00000000800076ee <_ZN6kernel2fs10superblock10SuperBlock8read_log17h7cc8d407eaa9ef0fE>:

    /// Load the log info of super block.
    /// Return starting block and usable blocks for log.
    pub fn read_log(&self) -> (u32, u32) {
    800076ee:	7179                	addi	sp,sp,-48
    800076f0:	f406                	sd	ra,40(sp)
    800076f2:	ec2a                	sd	a0,24(sp)
        let sb = self.read();
    800076f4:	00000097          	auipc	ra,0x0
    800076f8:	f84080e7          	jalr	-124(ra) # 80007678 <_ZN6kernel2fs10superblock10SuperBlock4read17h8c393935916ac41aE>
    800076fc:	85aa                	mv	a1,a0
    800076fe:	e42e                	sd	a1,8(sp)
    80007700:	f02a                	sd	a0,32(sp)
    80007702:	a009                	j	80007704 <_ZN6kernel2fs10superblock10SuperBlock8read_log17h7cc8d407eaa9ef0fE+0x16>
        (sb.logstart, sb.nlog)
    80007704:	65a2                	ld	a1,8(sp)
    80007706:	49c8                	lw	a0,20(a1)
    80007708:	498c                	lw	a1,16(a1)
    8000770a:	c82a                	sw	a0,16(sp)
    8000770c:	ca2e                	sw	a1,20(sp)
    }
    8000770e:	70a2                	ld	ra,40(sp)
    80007710:	6145                	addi	sp,sp,48
    80007712:	8082                	ret

Disassembly of section .text._ZN6kernel2fs10superblock10SuperBlock4size17hb3cee79658d4a223E:

0000000080007714 <_ZN6kernel2fs10superblock10SuperBlock4size17hb3cee79658d4a223E>:

    /// The total count of blocks in the disk.
    pub fn size(&self) -> u32 {
    80007714:	1101                	addi	sp,sp,-32
    80007716:	ec06                	sd	ra,24(sp)
    80007718:	e42a                	sd	a0,8(sp)
        let sb = self.read();
    8000771a:	00000097          	auipc	ra,0x0
    8000771e:	f5e080e7          	jalr	-162(ra) # 80007678 <_ZN6kernel2fs10superblock10SuperBlock4read17h8c393935916ac41aE>
    80007722:	85aa                	mv	a1,a0
    80007724:	e02e                	sd	a1,0(sp)
    80007726:	e82a                	sd	a0,16(sp)
    80007728:	a009                	j	8000772a <_ZN6kernel2fs10superblock10SuperBlock4size17hb3cee79658d4a223E+0x16>
        sb.size
    }
    8000772a:	6502                	ld	a0,0(sp)
    8000772c:	4148                	lw	a0,4(a0)
    8000772e:	60e2                	ld	ra,24(sp)
    80007730:	6105                	addi	sp,sp,32
    80007732:	8082                	ret

Disassembly of section .text._ZN6kernel2fs10superblock10SuperBlock7ninodes17h32fa650b3c4991daE:

0000000080007734 <_ZN6kernel2fs10superblock10SuperBlock7ninodes17h32fa650b3c4991daE>:
        let sb = self.read();
        sb.bmapstart
    }

    /// inode numbers
    pub fn ninodes(&self) -> u32 {
    80007734:	1101                	addi	sp,sp,-32
    80007736:	ec06                	sd	ra,24(sp)
    80007738:	e82a                	sd	a0,16(sp)
        self.read().ninodes
    8000773a:	00000097          	auipc	ra,0x0
    8000773e:	f3e080e7          	jalr	-194(ra) # 80007678 <_ZN6kernel2fs10superblock10SuperBlock4read17h8c393935916ac41aE>
    80007742:	e42a                	sd	a0,8(sp)
    80007744:	a009                	j	80007746 <_ZN6kernel2fs10superblock10SuperBlock7ninodes17h32fa650b3c4991daE+0x12>
    }
    80007746:	6522                	ld	a0,8(sp)
    80007748:	4548                	lw	a0,12(a0)
    8000774a:	60e2                	ld	ra,24(sp)
    8000774c:	6105                	addi	sp,sp,32
    8000774e:	8082                	ret

Disassembly of section .text._ZN6kernel2fs10superblock10SuperBlock12locate_inode17hc2dbfb20b9411e7cE:

0000000080007750 <_ZN6kernel2fs10superblock10SuperBlock12locate_inode17hc2dbfb20b9411e7cE>:

    /// Given an inode number. 
    /// Return the blockno of the block this inode resides. 
    /// Panic if the queryed inode out of range. 
    pub fn locate_inode(&self, inum: u32) -> u32 {
    80007750:	7155                	addi	sp,sp,-208
    80007752:	e586                	sd	ra,200(sp)
    80007754:	de2e                	sw	a1,60(sp)
    80007756:	f12a                	sd	a0,160(sp)
        let sb = self.read();
    80007758:	00000097          	auipc	ra,0x0
    8000775c:	f20080e7          	jalr	-224(ra) # 80007678 <_ZN6kernel2fs10superblock10SuperBlock4read17h8c393935916ac41aE>
    80007760:	85aa                	mv	a1,a0
    80007762:	f82e                	sd	a1,48(sp)
    80007764:	f52a                	sd	a0,168(sp)
    80007766:	a009                	j	80007768 <_ZN6kernel2fs10superblock10SuperBlock12locate_inode17hc2dbfb20b9411e7cE+0x18>
        if inum >= sb.ninodes {
    80007768:	75c2                	ld	a1,48(sp)
    8000776a:	5572                	lw	a0,60(sp)
    8000776c:	45cc                	lw	a1,12(a1)
    8000776e:	02b56763          	bltu	a0,a1,8000779c <.LBB5_9+0x16>
    80007772:	a009                	j	80007774 <_ZN6kernel2fs10superblock10SuperBlock12locate_inode17hc2dbfb20b9411e7cE+0x24>
            panic!("query inum {} larger than maximum inode nums {}", inum, sb.ninodes);
    80007774:	7542                	ld	a0,48(sp)
    80007776:	00c50593          	addi	a1,a0,12
    8000777a:	ec2e                	sd	a1,24(sp)
    8000777c:	1868                	addi	a0,sp,60
    8000777e:	e92a                	sd	a0,144(sp)
    80007780:	ed2e                	sd	a1,152(sp)
    80007782:	f92a                	sd	a0,176(sp)
    80007784:	fd2e                	sd	a1,184(sp)

0000000080007786 <.LBB5_9>:
    80007786:	0001d597          	auipc	a1,0x1d
    8000778a:	fc058593          	addi	a1,a1,-64 # 80024746 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17h19c6429b08a072b1E>
    8000778e:	0001b097          	auipc	ra,0x1b
    80007792:	876080e7          	jalr	-1930(ra) # 80022004 <_ZN4core3fmt10ArgumentV13new17ha67f1954b9155e6dE>
    80007796:	f02a                	sd	a0,32(sp)
    80007798:	f42e                	sd	a1,40(sp)
    8000779a:	a839                	j	800077b8 <.LBB5_9+0x32>
        }
        // println!("[Debug] inum: {}", inum);
        let blockno = (inum / (IPB as u32)) + sb.inodestart;
    8000779c:	75c2                	ld	a1,48(sp)
    8000779e:	03c16503          	lwu	a0,60(sp)
    800077a2:	8111                	srli	a0,a0,0x4
    800077a4:	0185e583          	lwu	a1,24(a1)
    800077a8:	95aa                	add	a1,a1,a0
    800077aa:	e82e                	sd	a1,16(sp)
    800077ac:	02059513          	slli	a0,a1,0x20
    800077b0:	9101                	srli	a0,a0,0x20
    800077b2:	06b51363          	bne	a0,a1,80007818 <.LBB5_13>
    800077b6:	a8a1                	j	8000780e <.LBB5_12+0x14>
            panic!("query inum {} larger than maximum inode nums {}", inum, sb.ninodes);
    800077b8:	6562                	ld	a0,24(sp)

00000000800077ba <.LBB5_10>:
    800077ba:	0001d597          	auipc	a1,0x1d
    800077be:	f8c58593          	addi	a1,a1,-116 # 80024746 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17h19c6429b08a072b1E>
    800077c2:	0001b097          	auipc	ra,0x1b
    800077c6:	842080e7          	jalr	-1982(ra) # 80022004 <_ZN4core3fmt10ArgumentV13new17ha67f1954b9155e6dE>
    800077ca:	e02a                	sd	a0,0(sp)
    800077cc:	e42e                	sd	a1,8(sp)
    800077ce:	a009                	j	800077d0 <.LBB5_10+0x16>
    800077d0:	6522                	ld	a0,8(sp)
    800077d2:	6582                	ld	a1,0(sp)
    800077d4:	7622                	ld	a2,40(sp)
    800077d6:	7682                	ld	a3,32(sp)
    800077d8:	f8b6                	sd	a3,112(sp)
    800077da:	fcb2                	sd	a2,120(sp)
    800077dc:	e12e                	sd	a1,128(sp)
    800077de:	e52a                	sd	a0,136(sp)

00000000800077e0 <.LBB5_11>:
    800077e0:	0001f597          	auipc	a1,0x1f
    800077e4:	6b058593          	addi	a1,a1,1712 # 80026e90 <.L__unnamed_12>
    800077e8:	0088                	addi	a0,sp,64
    800077ea:	1894                	addi	a3,sp,112
    800077ec:	4709                	li	a4,2
    800077ee:	863a                	mv	a2,a4
    800077f0:	ffffe097          	auipc	ra,0xffffe
    800077f4:	c7a080e7          	jalr	-902(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    800077f8:	a009                	j	800077fa <.LBB5_12>

00000000800077fa <.LBB5_12>:
    800077fa:	0001f597          	auipc	a1,0x1f
    800077fe:	6b658593          	addi	a1,a1,1718 # 80026eb0 <.L__unnamed_13>
    80007802:	0088                	addi	a0,sp,64
    80007804:	0001b097          	auipc	ra,0x1b
    80007808:	ade080e7          	jalr	-1314(ra) # 800222e2 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
    8000780c:	0000                	unimp
        let blockno = (inum / (IPB as u32)) + sb.inodestart;
    8000780e:	6542                	ld	a0,16(sp)
    80007810:	c3aa                	sw	a0,196(sp)
        // println!("[Debug] block number: {}", blockno);
        blockno
    }
    80007812:	60ae                	ld	ra,200(sp)
    80007814:	6169                	addi	sp,sp,208
    80007816:	8082                	ret

0000000080007818 <.LBB5_13>:
        let blockno = (inum / (IPB as u32)) + sb.inodestart;
    80007818:	0001f517          	auipc	a0,0x1f
    8000781c:	6c850513          	addi	a0,a0,1736 # 80026ee0 <str.1>

0000000080007820 <.LBB5_14>:
    80007820:	0001f617          	auipc	a2,0x1f
    80007824:	6a860613          	addi	a2,a2,1704 # 80026ec8 <.L__unnamed_14>
    80007828:	45f1                	li	a1,28
    8000782a:	0001b097          	auipc	ra,0x1b
    8000782e:	a4c080e7          	jalr	-1460(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel2fs10superblock10SuperBlock14bitmap_blockno17h010142deb773804aE:

0000000080007834 <_ZN6kernel2fs10superblock10SuperBlock14bitmap_blockno17h010142deb773804aE>:

    /// Given a block number in the disk. 
    /// Returns the relevant block number of the (controlling) bitmap block. 
    pub fn bitmap_blockno(&self, blockno: u32) -> u32 {
    80007834:	7139                	addi	sp,sp,-64
    80007836:	fc06                	sd	ra,56(sp)
    80007838:	862e                	mv	a2,a1
    8000783a:	e832                	sd	a2,16(sp)
    8000783c:	f02a                	sd	a0,32(sp)
    8000783e:	d62e                	sw	a1,44(sp)
        let sb = self.read();
    80007840:	00000097          	auipc	ra,0x0
    80007844:	e38080e7          	jalr	-456(ra) # 80007678 <_ZN6kernel2fs10superblock10SuperBlock4read17h8c393935916ac41aE>
    80007848:	85aa                	mv	a1,a0
    8000784a:	ec2e                	sd	a1,24(sp)
    8000784c:	f82a                	sd	a0,48(sp)
    8000784e:	a009                	j	80007850 <_ZN6kernel2fs10superblock10SuperBlock14bitmap_blockno17h010142deb773804aE+0x1c>
        (blockno / BPB as u32) + sb.bmapstart
    80007850:	65e2                	ld	a1,24(sp)
    80007852:	6542                	ld	a0,16(sp)
    80007854:	00d5551b          	srliw	a0,a0,0xd
    80007858:	01c5e583          	lwu	a1,28(a1)
    8000785c:	95aa                	add	a1,a1,a0
    8000785e:	e42e                	sd	a1,8(sp)
    80007860:	02059513          	slli	a0,a1,0x20
    80007864:	9101                	srli	a0,a0,0x20
    80007866:	00b51763          	bne	a0,a1,80007874 <.LBB6_4>
    8000786a:	a009                	j	8000786c <_ZN6kernel2fs10superblock10SuperBlock14bitmap_blockno17h010142deb773804aE+0x38>
    }
    8000786c:	6522                	ld	a0,8(sp)
    8000786e:	70e2                	ld	ra,56(sp)
    80007870:	6121                	addi	sp,sp,64
    80007872:	8082                	ret

0000000080007874 <.LBB6_4>:
        (blockno / BPB as u32) + sb.bmapstart
    80007874:	0001f517          	auipc	a0,0x1f
    80007878:	66c50513          	addi	a0,a0,1644 # 80026ee0 <str.1>

000000008000787c <.LBB6_5>:
    8000787c:	0001f617          	auipc	a2,0x1f
    80007880:	68460613          	addi	a2,a2,1668 # 80026f00 <.L__unnamed_15>
    80007884:	45f1                	li	a1,28
    80007886:	0001b097          	auipc	ra,0x1b
    8000788a:	9f0080e7          	jalr	-1552(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel4arch5riscv8register7mhartid4read17hb0a253df4f0869d8E:

0000000080007890 <_ZN6kernel4arch5riscv8register7mhartid4read17hb0a253df4f0869d8E>:
// which hart (core) is this?
#[inline]
pub unsafe fn read() -> usize{
    80007890:	1141                	addi	sp,sp,-16
    let ret:usize;
    llvm_asm!("csrr $0, mhartid":"=r"(ret):::"volatile");
    80007892:	f1402573          	csrr	a0,mhartid
    80007896:	e42a                	sd	a0,8(sp)
    ret
    80007898:	0141                	addi	sp,sp,16
    8000789a:	8082                	ret

Disassembly of section .text._ZN6kernel4misc7str_len17h64928e428ab71413E:

000000008000789c <_ZN6kernel4misc7str_len17h64928e428ab71413E>:

pub fn str_len(str: *const u8) -> usize {
    8000789c:	715d                	addi	sp,sp,-80
    8000789e:	e486                	sd	ra,72(sp)
    800078a0:	f02a                	sd	a0,32(sp)
    800078a2:	f82a                	sd	a0,48(sp)
    800078a4:	4501                	li	a0,0
    let mut i:usize = 0;
    800078a6:	f42a                	sd	a0,40(sp)
    loop {
    800078a8:	a009                	j	800078aa <_ZN6kernel4misc7str_len17h64928e428ab71413E+0xe>
       let ptr = (str as usize + i) as *const u8;
    800078aa:	7582                	ld	a1,32(sp)
    800078ac:	7522                	ld	a0,40(sp)
    800078ae:	952e                	add	a0,a0,a1
    800078b0:	ec2a                	sd	a0,24(sp)
    800078b2:	04b56363          	bltu	a0,a1,800078f8 <.LBB0_9>
    800078b6:	a009                	j	800078b8 <_ZN6kernel4misc7str_len17h64928e428ab71413E+0x1c>
    800078b8:	6562                	ld	a0,24(sp)
    800078ba:	fc2a                	sd	a0,56(sp)
       let c = unsafe {
           read(ptr)
    800078bc:	00011097          	auipc	ra,0x11
    800078c0:	d80080e7          	jalr	-640(ra) # 8001863c <_ZN4core3ptr4read17h018161c0cd37b3fbE>
    800078c4:	85aa                	mv	a1,a0
    800078c6:	e82e                	sd	a1,16(sp)
    800078c8:	04a103a3          	sb	a0,71(sp)
    800078cc:	a009                	j	800078ce <_ZN6kernel4misc7str_len17h64928e428ab71413E+0x32>
       };
       if c != 0 { i += 1; }
    800078ce:	6542                	ld	a0,16(sp)
    800078d0:	0ff57513          	andi	a0,a0,255
    800078d4:	4581                	li	a1,0
    800078d6:	00b50a63          	beq	a0,a1,800078ea <_ZN6kernel4misc7str_len17h64928e428ab71413E+0x4e>
    800078da:	a009                	j	800078dc <_ZN6kernel4misc7str_len17h64928e428ab71413E+0x40>
    800078dc:	75a2                	ld	a1,40(sp)
    800078de:	00158513          	addi	a0,a1,1
    800078e2:	e42a                	sd	a0,8(sp)
    800078e4:	02b56863          	bltu	a0,a1,80007914 <.LBB0_11>
    800078e8:	a029                	j	800078f2 <_ZN6kernel4misc7str_len17h64928e428ab71413E+0x56>
       else { break; }
    }
    i
}
    800078ea:	7522                	ld	a0,40(sp)
    800078ec:	60a6                	ld	ra,72(sp)
    800078ee:	6161                	addi	sp,sp,80
    800078f0:	8082                	ret
       if c != 0 { i += 1; }
    800078f2:	6522                	ld	a0,8(sp)
    800078f4:	f42a                	sd	a0,40(sp)
    loop {
    800078f6:	bf55                	j	800078aa <_ZN6kernel4misc7str_len17h64928e428ab71413E+0xe>

00000000800078f8 <.LBB0_9>:
       let ptr = (str as usize + i) as *const u8;
    800078f8:	0001f517          	auipc	a0,0x1f
    800078fc:	64850513          	addi	a0,a0,1608 # 80026f40 <str.0>

0000000080007900 <.LBB0_10>:
    80007900:	0001f617          	auipc	a2,0x1f
    80007904:	62860613          	addi	a2,a2,1576 # 80026f28 <.L__unnamed_1>
    80007908:	45f1                	li	a1,28
    8000790a:	0001b097          	auipc	ra,0x1b
    8000790e:	96c080e7          	jalr	-1684(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080007914 <.LBB0_11>:
       if c != 0 { i += 1; }
    80007914:	0001f517          	auipc	a0,0x1f
    80007918:	62c50513          	addi	a0,a0,1580 # 80026f40 <str.0>

000000008000791c <.LBB0_12>:
    8000791c:	0001f617          	auipc	a2,0x1f
    80007920:	64460613          	addi	a2,a2,1604 # 80026f60 <.L__unnamed_2>
    80007924:	45f1                	li	a1,28
    80007926:	0001b097          	auipc	ra,0x1b
    8000792a:	950080e7          	jalr	-1712(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel4misc8mem_copy17h5e55f1040770ffdeE:

0000000080007930 <_ZN6kernel4misc8mem_copy17h5e55f1040770ffdeE>:

/// memory copy, copy memory into other memory. 
pub fn mem_copy(dst: usize, src: usize, len: usize) {
    80007930:	7131                	addi	sp,sp,-192
    80007932:	fd06                	sd	ra,184(sp)
    80007934:	f432                	sd	a2,40(sp)
    80007936:	862e                	mv	a2,a1
    80007938:	75a2                	ld	a1,40(sp)
    8000793a:	f832                	sd	a2,48(sp)
    8000793c:	862a                	mv	a2,a0
    8000793e:	7542                	ld	a0,48(sp)
    80007940:	fc32                	sd	a2,56(sp)
    80007942:	e132                	sd	a2,128(sp)
    80007944:	e52a                	sd	a0,136(sp)
    80007946:	e92e                	sd	a1,144(sp)
    80007948:	4501                	li	a0,0
    unsafe{
        for i in 0..len {
    8000794a:	e8aa                	sd	a0,80(sp)
    8000794c:	ecae                	sd	a1,88(sp)
    8000794e:	00018097          	auipc	ra,0x18
    80007952:	ff4080e7          	jalr	-12(ra) # 8001f942 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he0a8d93712e5493bE>
    80007956:	e0aa                	sd	a0,64(sp)
    80007958:	e4ae                	sd	a1,72(sp)
    8000795a:	a009                	j	8000795c <_ZN6kernel4misc8mem_copy17h5e55f1040770ffdeE+0x2c>
    8000795c:	6526                	ld	a0,72(sp)
    8000795e:	6586                	ld	a1,64(sp)
    80007960:	f0ae                	sd	a1,96(sp)
    80007962:	f4aa                	sd	a0,104(sp)
    80007964:	a009                	j	80007966 <_ZN6kernel4misc8mem_copy17h5e55f1040770ffdeE+0x36>
    80007966:	1088                	addi	a0,sp,96
    80007968:	00018097          	auipc	ra,0x18
    8000796c:	f6c080e7          	jalr	-148(ra) # 8001f8d4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE>
    80007970:	f8aa                	sd	a0,112(sp)
    80007972:	fcae                	sd	a1,120(sp)
    80007974:	a009                	j	80007976 <_ZN6kernel4misc8mem_copy17h5e55f1040770ffdeE+0x46>
    80007976:	7546                	ld	a0,112(sp)
    80007978:	4581                	li	a1,0
    8000797a:	00b50463          	beq	a0,a1,80007982 <_ZN6kernel4misc8mem_copy17h5e55f1040770ffdeE+0x52>
    8000797e:	a009                	j	80007980 <_ZN6kernel4misc8mem_copy17h5e55f1040770ffdeE+0x50>
    80007980:	a029                	j	8000798a <_ZN6kernel4misc8mem_copy17h5e55f1040770ffdeE+0x5a>
            let val = read((src + i) as *const u8);
            write((dst + i) as *mut u8, val);
        }
    }
}
    80007982:	70ea                	ld	ra,184(sp)
    80007984:	6129                	addi	sp,sp,192
    80007986:	8082                	ret
        for i in 0..len {
    80007988:	0000                	unimp
    8000798a:	75c2                	ld	a1,48(sp)
    8000798c:	7566                	ld	a0,120(sp)
    8000798e:	ec2a                	sd	a0,24(sp)
    80007990:	ed2a                	sd	a0,152(sp)
    80007992:	f12a                	sd	a0,160(sp)
    80007994:	f52a                	sd	a0,168(sp)
            let val = read((src + i) as *const u8);
    80007996:	952e                	add	a0,a0,a1
    80007998:	f02a                	sd	a0,32(sp)
    8000799a:	02b56c63          	bltu	a0,a1,800079d2 <.LBB1_14>
    8000799e:	a009                	j	800079a0 <_ZN6kernel4misc8mem_copy17h5e55f1040770ffdeE+0x70>
    800079a0:	7502                	ld	a0,32(sp)
    800079a2:	00011097          	auipc	ra,0x11
    800079a6:	c9a080e7          	jalr	-870(ra) # 8001863c <_ZN4core3ptr4read17h018161c0cd37b3fbE>
    800079aa:	85aa                	mv	a1,a0
    800079ac:	e82e                	sd	a1,16(sp)
    800079ae:	0aa10ba3          	sb	a0,183(sp)
    800079b2:	a009                	j	800079b4 <_ZN6kernel4misc8mem_copy17h5e55f1040770ffdeE+0x84>
            write((dst + i) as *mut u8, val);
    800079b4:	75e2                	ld	a1,56(sp)
    800079b6:	6562                	ld	a0,24(sp)
    800079b8:	952e                	add	a0,a0,a1
    800079ba:	e42a                	sd	a0,8(sp)
    800079bc:	02b56963          	bltu	a0,a1,800079ee <.LBB1_16>
    800079c0:	a009                	j	800079c2 <_ZN6kernel4misc8mem_copy17h5e55f1040770ffdeE+0x92>
    800079c2:	65c2                	ld	a1,16(sp)
    800079c4:	6522                	ld	a0,8(sp)
    800079c6:	00011097          	auipc	ra,0x11
    800079ca:	f00080e7          	jalr	-256(ra) # 800188c6 <_ZN4core3ptr5write17h0fb1ba83ac2984c7E>
    800079ce:	a009                	j	800079d0 <_ZN6kernel4misc8mem_copy17h5e55f1040770ffdeE+0xa0>
        for i in 0..len {
    800079d0:	bf59                	j	80007966 <_ZN6kernel4misc8mem_copy17h5e55f1040770ffdeE+0x36>

00000000800079d2 <.LBB1_14>:
            let val = read((src + i) as *const u8);
    800079d2:	0001f517          	auipc	a0,0x1f
    800079d6:	56e50513          	addi	a0,a0,1390 # 80026f40 <str.0>

00000000800079da <.LBB1_15>:
    800079da:	0001f617          	auipc	a2,0x1f
    800079de:	59e60613          	addi	a2,a2,1438 # 80026f78 <.L__unnamed_3>
    800079e2:	45f1                	li	a1,28
    800079e4:	0001b097          	auipc	ra,0x1b
    800079e8:	892080e7          	jalr	-1902(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

00000000800079ee <.LBB1_16>:
            write((dst + i) as *mut u8, val);
    800079ee:	0001f517          	auipc	a0,0x1f
    800079f2:	55250513          	addi	a0,a0,1362 # 80026f40 <str.0>

00000000800079f6 <.LBB1_17>:
    800079f6:	0001f617          	auipc	a2,0x1f
    800079fa:	59a60613          	addi	a2,a2,1434 # 80026f90 <.L__unnamed_4>
    800079fe:	45f1                	li	a1,28
    80007a00:	0001b097          	auipc	ra,0x1b
    80007a04:	876080e7          	jalr	-1930(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel4misc7str_cmp17h91115d5ee259e480E:

0000000080007a0a <_ZN6kernel4misc7str_cmp17h91115d5ee259e480E>:
    };
    dst
}

/// Compare str
pub fn str_cmp(a: &[u8], b: &[u8], max_len: usize) -> bool {
    80007a0a:	7151                	addi	sp,sp,-240
    80007a0c:	f586                	sd	ra,232(sp)
    80007a0e:	e0ba                	sd	a4,64(sp)
    80007a10:	e4b6                	sd	a3,72(sp)
    80007a12:	e8b2                	sd	a2,80(sp)
    80007a14:	ecae                	sd	a1,88(sp)
    80007a16:	f0aa                	sd	a0,96(sp)
    80007a18:	f52a                	sd	a0,168(sp)
    80007a1a:	f92e                	sd	a1,176(sp)
    80007a1c:	fd32                	sd	a2,184(sp)
    80007a1e:	e1b6                	sd	a3,192(sp)
    80007a20:	e5ba                	sd	a4,200(sp)
    if a.len() != b.len() {
    80007a22:	00018097          	auipc	ra,0x18
    80007a26:	bb2080e7          	jalr	-1102(ra) # 8001f5d4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hb06ce83b043493f3E>
    80007a2a:	f4aa                	sd	a0,104(sp)
    80007a2c:	a009                	j	80007a2e <_ZN6kernel4misc7str_cmp17h91115d5ee259e480E+0x24>
    80007a2e:	65a6                	ld	a1,72(sp)
    80007a30:	6546                	ld	a0,80(sp)
    80007a32:	00018097          	auipc	ra,0x18
    80007a36:	ba2080e7          	jalr	-1118(ra) # 8001f5d4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hb06ce83b043493f3E>
    80007a3a:	fc2a                	sd	a0,56(sp)
    80007a3c:	a009                	j	80007a3e <_ZN6kernel4misc7str_cmp17h91115d5ee259e480E+0x34>
    80007a3e:	7526                	ld	a0,104(sp)
    80007a40:	75e2                	ld	a1,56(sp)
    80007a42:	00b50763          	beq	a0,a1,80007a50 <_ZN6kernel4misc7str_cmp17h91115d5ee259e480E+0x46>
    80007a46:	a009                	j	80007a48 <_ZN6kernel4misc7str_cmp17h91115d5ee259e480E+0x3e>
    80007a48:	4501                	li	a0,0
        return false
    80007a4a:	06a10ba3          	sb	a0,119(sp)
    80007a4e:	a875                	j	80007b0a <_ZN6kernel4misc7str_cmp17h91115d5ee259e480E+0x100>
    }

    if a.len() > max_len {
    80007a50:	65e6                	ld	a1,88(sp)
    80007a52:	7506                	ld	a0,96(sp)
    80007a54:	00018097          	auipc	ra,0x18
    80007a58:	b80080e7          	jalr	-1152(ra) # 8001f5d4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hb06ce83b043493f3E>
    80007a5c:	f82a                	sd	a0,48(sp)
    80007a5e:	a009                	j	80007a60 <_ZN6kernel4misc7str_cmp17h91115d5ee259e480E+0x56>
    80007a60:	6506                	ld	a0,64(sp)
    80007a62:	75c2                	ld	a1,48(sp)
    80007a64:	00b57763          	bgeu	a0,a1,80007a72 <_ZN6kernel4misc7str_cmp17h91115d5ee259e480E+0x68>
    80007a68:	a009                	j	80007a6a <_ZN6kernel4misc7str_cmp17h91115d5ee259e480E+0x60>
    80007a6a:	4501                	li	a0,0
        return false
    80007a6c:	06a10ba3          	sb	a0,119(sp)
    80007a70:	a869                	j	80007b0a <_ZN6kernel4misc7str_cmp17h91115d5ee259e480E+0x100>
    }

    for i in 0..a.len() {
    80007a72:	65e6                	ld	a1,88(sp)
    80007a74:	7506                	ld	a0,96(sp)
    80007a76:	00018097          	auipc	ra,0x18
    80007a7a:	b5e080e7          	jalr	-1186(ra) # 8001f5d4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hb06ce83b043493f3E>
    80007a7e:	f42a                	sd	a0,40(sp)
    80007a80:	a009                	j	80007a82 <_ZN6kernel4misc7str_cmp17h91115d5ee259e480E+0x78>
    80007a82:	75a2                	ld	a1,40(sp)
    80007a84:	4501                	li	a0,0
    80007a86:	fcaa                	sd	a0,120(sp)
    80007a88:	e12e                	sd	a1,128(sp)
    80007a8a:	00018097          	auipc	ra,0x18
    80007a8e:	eb8080e7          	jalr	-328(ra) # 8001f942 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he0a8d93712e5493bE>
    80007a92:	ec2a                	sd	a0,24(sp)
    80007a94:	f02e                	sd	a1,32(sp)
    80007a96:	a009                	j	80007a98 <_ZN6kernel4misc7str_cmp17h91115d5ee259e480E+0x8e>
    80007a98:	7502                	ld	a0,32(sp)
    80007a9a:	65e2                	ld	a1,24(sp)
    80007a9c:	e52e                	sd	a1,136(sp)
    80007a9e:	e92a                	sd	a0,144(sp)
    80007aa0:	a009                	j	80007aa2 <_ZN6kernel4misc7str_cmp17h91115d5ee259e480E+0x98>
    80007aa2:	0128                	addi	a0,sp,136
    80007aa4:	00018097          	auipc	ra,0x18
    80007aa8:	e30080e7          	jalr	-464(ra) # 8001f8d4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE>
    80007aac:	ed2a                	sd	a0,152(sp)
    80007aae:	f12e                	sd	a1,160(sp)
    80007ab0:	a009                	j	80007ab2 <_ZN6kernel4misc7str_cmp17h91115d5ee259e480E+0xa8>
    80007ab2:	656a                	ld	a0,152(sp)
    80007ab4:	4581                	li	a1,0
    80007ab6:	00b50463          	beq	a0,a1,80007abe <_ZN6kernel4misc7str_cmp17h91115d5ee259e480E+0xb4>
    80007aba:	a009                	j	80007abc <_ZN6kernel4misc7str_cmp17h91115d5ee259e480E+0xb2>
    80007abc:	a031                	j	80007ac8 <_ZN6kernel4misc7str_cmp17h91115d5ee259e480E+0xbe>
    80007abe:	4505                	li	a0,1
        if a[i] != b[i] {
            return false
        }
    }
    true
    80007ac0:	06a10ba3          	sb	a0,119(sp)
    80007ac4:	a099                	j	80007b0a <_ZN6kernel4misc7str_cmp17h91115d5ee259e480E+0x100>
    for i in 0..a.len() {
    80007ac6:	0000                	unimp
    80007ac8:	65e6                	ld	a1,88(sp)
    80007aca:	750a                	ld	a0,160(sp)
    80007acc:	e82a                	sd	a0,16(sp)
    80007ace:	e9aa                	sd	a0,208(sp)
    80007ad0:	edaa                	sd	a0,216(sp)
    80007ad2:	f1aa                	sd	a0,224(sp)
        if a[i] != b[i] {
    80007ad4:	04b57063          	bgeu	a0,a1,80007b14 <_ZN6kernel4misc7str_cmp17h91115d5ee259e480E+0x10a>
    80007ad8:	a009                	j	80007ada <_ZN6kernel4misc7str_cmp17h91115d5ee259e480E+0xd0>
    80007ada:	6542                	ld	a0,16(sp)
    80007adc:	65a6                	ld	a1,72(sp)
    80007ade:	7606                	ld	a2,96(sp)
    80007ae0:	962a                	add	a2,a2,a0
    80007ae2:	00064603          	lbu	a2,0(a2)
    80007ae6:	e432                	sd	a2,8(sp)
    80007ae8:	04b57163          	bgeu	a0,a1,80007b2a <.LBB2_23+0x12>
    80007aec:	a009                	j	80007aee <_ZN6kernel4misc7str_cmp17h91115d5ee259e480E+0xe4>
    80007aee:	6522                	ld	a0,8(sp)
    80007af0:	65c6                	ld	a1,80(sp)
    80007af2:	6642                	ld	a2,16(sp)
    80007af4:	95b2                	add	a1,a1,a2
    80007af6:	0005c583          	lbu	a1,0(a1)
    80007afa:	00b50763          	beq	a0,a1,80007b08 <_ZN6kernel4misc7str_cmp17h91115d5ee259e480E+0xfe>
    80007afe:	a009                	j	80007b00 <_ZN6kernel4misc7str_cmp17h91115d5ee259e480E+0xf6>
    80007b00:	4501                	li	a0,0
            return false
    80007b02:	06a10ba3          	sb	a0,119(sp)
    80007b06:	a011                	j	80007b0a <_ZN6kernel4misc7str_cmp17h91115d5ee259e480E+0x100>
    for i in 0..a.len() {
    80007b08:	bf69                	j	80007aa2 <_ZN6kernel4misc7str_cmp17h91115d5ee259e480E+0x98>
    80007b0a:	07714503          	lbu	a0,119(sp)
    80007b0e:	70ae                	ld	ra,232(sp)
    80007b10:	616d                	addi	sp,sp,240
    80007b12:	8082                	ret
        if a[i] != b[i] {
    80007b14:	65e6                	ld	a1,88(sp)
    80007b16:	6542                	ld	a0,16(sp)

0000000080007b18 <.LBB2_23>:
    80007b18:	0001f617          	auipc	a2,0x1f
    80007b1c:	49060613          	addi	a2,a2,1168 # 80026fa8 <.L__unnamed_5>
    80007b20:	0001a097          	auipc	ra,0x1a
    80007b24:	782080e7          	jalr	1922(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80007b28:	0000                	unimp
    80007b2a:	65a6                	ld	a1,72(sp)
    80007b2c:	6542                	ld	a0,16(sp)

0000000080007b2e <.LBB2_24>:
    80007b2e:	0001f617          	auipc	a2,0x1f
    80007b32:	49260613          	addi	a2,a2,1170 # 80026fc0 <.L__unnamed_6>
    80007b36:	0001a097          	auipc	ra,0x1a
    80007b3a:	76c080e7          	jalr	1900(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel4arch5riscv8register6scause4read17h6f388cd664aa7885E:

0000000080007b40 <_ZN6kernel4arch5riscv8register6scause4read17h6f388cd664aa7885E>:
use bit_field::BitField;
use core::mem::size_of;

// Supervisor Trap Cause
#[inline]
pub unsafe fn read() -> usize {
    80007b40:	1141                	addi	sp,sp,-16
    let ret:usize;
    llvm_asm!("csrr $0, scause":"=r"(ret):::"volatile");
    80007b42:	14202573          	csrr	a0,scause
    80007b46:	e42a                	sd	a0,8(sp)
    ret
}
    80007b48:	0141                	addi	sp,sp,16
    80007b4a:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register6scause9Interrupt4from17hfa107f1206d46befE:

0000000080007b4c <_ZN6kernel4arch5riscv8register6scause9Interrupt4from17hfa107f1206d46befE>:
    Unknown
}


impl Interrupt{
    pub fn from(nr: usize) -> Self {
    80007b4c:	1101                	addi	sp,sp,-32
    80007b4e:	85aa                	mv	a1,a0
    80007b50:	ec2e                	sd	a1,24(sp)
        match nr{
            0 => Interrupt::UserSoft,
    80007b52:	852e                	mv	a0,a1
    80007b54:	e42a                	sd	a0,8(sp)
    80007b56:	4525                	li	a0,9
    80007b58:	00b56b63          	bltu	a0,a1,80007b6e <.LBB1_2>
    80007b5c:	6522                	ld	a0,8(sp)
    80007b5e:	050e                	slli	a0,a0,0x3

0000000080007b60 <.LBB1_10>:
    80007b60:	0001f597          	auipc	a1,0x1f
    80007b64:	47858593          	addi	a1,a1,1144 # 80026fd8 <.LJTI1_0>
    80007b68:	952e                	add	a0,a0,a1
    80007b6a:	6108                	ld	a0,0(a0)
    80007b6c:	8502                	jr	a0

0000000080007b6e <.LBB1_2>:
    80007b6e:	4519                	li	a0,6
            1 => Interrupt::SupervisorSoft,
            4 => Interrupt::UserTimer,
            5 => Interrupt::SupervisorTimer,
            8 => Interrupt::UserExternal,
            9 => Interrupt::SupervisorExternal,
            _ => Interrupt::Unknown
    80007b70:	00a10ba3          	sb	a0,23(sp)
        match nr{
    80007b74:	a80d                	j	80007ba6 <.LBB1_8+0x8>

0000000080007b76 <.LBB1_3>:
    80007b76:	4501                	li	a0,0
            0 => Interrupt::UserSoft,
    80007b78:	00a10ba3          	sb	a0,23(sp)
        match nr{
    80007b7c:	a02d                	j	80007ba6 <.LBB1_8+0x8>

0000000080007b7e <.LBB1_4>:
    80007b7e:	4505                	li	a0,1
            1 => Interrupt::SupervisorSoft,
    80007b80:	00a10ba3          	sb	a0,23(sp)
        match nr{
    80007b84:	a00d                	j	80007ba6 <.LBB1_8+0x8>

0000000080007b86 <.LBB1_5>:
    80007b86:	4509                	li	a0,2
            4 => Interrupt::UserTimer,
    80007b88:	00a10ba3          	sb	a0,23(sp)
        match nr{
    80007b8c:	a829                	j	80007ba6 <.LBB1_8+0x8>

0000000080007b8e <.LBB1_6>:
    80007b8e:	450d                	li	a0,3
            5 => Interrupt::SupervisorTimer,
    80007b90:	00a10ba3          	sb	a0,23(sp)
        match nr{
    80007b94:	a809                	j	80007ba6 <.LBB1_8+0x8>

0000000080007b96 <.LBB1_7>:
    80007b96:	4511                	li	a0,4
            8 => Interrupt::UserExternal,
    80007b98:	00a10ba3          	sb	a0,23(sp)
        match nr{
    80007b9c:	a029                	j	80007ba6 <.LBB1_8+0x8>

0000000080007b9e <.LBB1_8>:
    80007b9e:	4515                	li	a0,5
            9 => Interrupt::SupervisorExternal,
    80007ba0:	00a10ba3          	sb	a0,23(sp)
        match nr{
    80007ba4:	a009                	j	80007ba6 <.LBB1_8+0x8>
        }
    }
    80007ba6:	01710503          	lb	a0,23(sp)
    80007baa:	6105                	addi	sp,sp,32
    80007bac:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register6scause9Exception4from17hf94bf9ab612e4876E:

0000000080007bae <_ZN6kernel4arch5riscv8register6scause9Exception4from17hf94bf9ab612e4876E>:
}

impl Exception{
    pub fn from(nr: usize) -> Self {
    80007bae:	1101                	addi	sp,sp,-32
    80007bb0:	85aa                	mv	a1,a0
    80007bb2:	ec2e                	sd	a1,24(sp)
        match nr {
            0 => Exception::InstructionMisaligned,
    80007bb4:	852e                	mv	a0,a1
    80007bb6:	e42a                	sd	a0,8(sp)
    80007bb8:	453d                	li	a0,15
    80007bba:	00b56b63          	bltu	a0,a1,80007bd0 <.LBB2_2>
    80007bbe:	6522                	ld	a0,8(sp)
    80007bc0:	050e                	slli	a0,a0,0x3

0000000080007bc2 <.LBB2_16>:
    80007bc2:	0001f597          	auipc	a1,0x1f
    80007bc6:	46658593          	addi	a1,a1,1126 # 80027028 <.LJTI2_0>
    80007bca:	952e                	add	a0,a0,a1
    80007bcc:	6108                	ld	a0,0(a0)
    80007bce:	8502                	jr	a0

0000000080007bd0 <.LBB2_2>:
    80007bd0:	4531                	li	a0,12
            8 => Exception::UserEnvCall,
            9 => Exception::KernelEnvCall,
            12 => Exception::InstructionPageFault,
            13 => Exception::LoadPageFault,
            15 => Exception::StorePageFault,
            _ => Exception::Unknown
    80007bd2:	00a10ba3          	sb	a0,23(sp)
        match nr {
    80007bd6:	a08d                	j	80007c38 <.LBB2_14+0x8>

0000000080007bd8 <.LBB2_3>:
    80007bd8:	4501                	li	a0,0
            0 => Exception::InstructionMisaligned,
    80007bda:	00a10ba3          	sb	a0,23(sp)
        match nr {
    80007bde:	a8a9                	j	80007c38 <.LBB2_14+0x8>

0000000080007be0 <.LBB2_4>:
    80007be0:	4505                	li	a0,1
            1 => Exception::InstructionFault,
    80007be2:	00a10ba3          	sb	a0,23(sp)
        match nr {
    80007be6:	a889                	j	80007c38 <.LBB2_14+0x8>

0000000080007be8 <.LBB2_5>:
    80007be8:	4509                	li	a0,2
            2 => Exception::IllegalInstruction,
    80007bea:	00a10ba3          	sb	a0,23(sp)
        match nr {
    80007bee:	a0a9                	j	80007c38 <.LBB2_14+0x8>

0000000080007bf0 <.LBB2_6>:
    80007bf0:	450d                	li	a0,3
            3 => Exception::Breakpoint,
    80007bf2:	00a10ba3          	sb	a0,23(sp)
        match nr {
    80007bf6:	a089                	j	80007c38 <.LBB2_14+0x8>

0000000080007bf8 <.LBB2_7>:
    80007bf8:	4511                	li	a0,4
            5 => Exception::LoadFault,
    80007bfa:	00a10ba3          	sb	a0,23(sp)
        match nr {
    80007bfe:	a82d                	j	80007c38 <.LBB2_14+0x8>

0000000080007c00 <.LBB2_8>:
    80007c00:	4515                	li	a0,5
            6 => Exception::StoreMisaligned,
    80007c02:	00a10ba3          	sb	a0,23(sp)
        match nr {
    80007c06:	a80d                	j	80007c38 <.LBB2_14+0x8>

0000000080007c08 <.LBB2_9>:
    80007c08:	4519                	li	a0,6
            7 => Exception::StoreFault,
    80007c0a:	00a10ba3          	sb	a0,23(sp)
        match nr {
    80007c0e:	a02d                	j	80007c38 <.LBB2_14+0x8>

0000000080007c10 <.LBB2_10>:
    80007c10:	451d                	li	a0,7
            8 => Exception::UserEnvCall,
    80007c12:	00a10ba3          	sb	a0,23(sp)
        match nr {
    80007c16:	a00d                	j	80007c38 <.LBB2_14+0x8>

0000000080007c18 <.LBB2_11>:
    80007c18:	4521                	li	a0,8
            9 => Exception::KernelEnvCall,
    80007c1a:	00a10ba3          	sb	a0,23(sp)
        match nr {
    80007c1e:	a829                	j	80007c38 <.LBB2_14+0x8>

0000000080007c20 <.LBB2_12>:
    80007c20:	4525                	li	a0,9
            12 => Exception::InstructionPageFault,
    80007c22:	00a10ba3          	sb	a0,23(sp)
        match nr {
    80007c26:	a809                	j	80007c38 <.LBB2_14+0x8>

0000000080007c28 <.LBB2_13>:
    80007c28:	4529                	li	a0,10
            13 => Exception::LoadPageFault,
    80007c2a:	00a10ba3          	sb	a0,23(sp)
        match nr {
    80007c2e:	a029                	j	80007c38 <.LBB2_14+0x8>

0000000080007c30 <.LBB2_14>:
    80007c30:	452d                	li	a0,11
            15 => Exception::StorePageFault,
    80007c32:	00a10ba3          	sb	a0,23(sp)
        match nr {
    80007c36:	a009                	j	80007c38 <.LBB2_14+0x8>
        }
    }
    80007c38:	01710503          	lb	a0,23(sp)
    80007c3c:	6105                	addi	sp,sp,32
    80007c3e:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register6scause6Scause3new17hf1aad0ee6c83efd3E:

0000000080007c40 <_ZN6kernel4arch5riscv8register6scause6Scause3new17hf1aad0ee6c83efd3E>:

impl Scause{

    // new a Scause Object by usize
    #[inline]
    pub fn new(scause: usize) -> Self{
    80007c40:	1141                	addi	sp,sp,-16
    80007c42:	e42a                	sd	a0,8(sp)
        Self{
    80007c44:	e02a                	sd	a0,0(sp)
            bits: scause
        }
    }
    80007c46:	0141                	addi	sp,sp,16
    80007c48:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register6scause6Scause4code17he6d8ec308b055b2eE:

0000000080007c4a <_ZN6kernel4arch5riscv8register6scause6Scause4code17he6d8ec308b055b2eE>:
    pub fn bits(&self) -> usize{
        self.bits
    }

    // Returns the code field
    pub fn code(&self) -> usize{
    80007c4a:	7179                	addi	sp,sp,-48
    80007c4c:	ec2a                	sd	a0,24(sp)
    80007c4e:	f02a                	sd	a0,32(sp)
        let bit =  1 << (size_of::<usize>() * 8 -1);
    80007c50:	a009                	j	80007c52 <_ZN6kernel4arch5riscv8register6scause6Scause4code17he6d8ec308b055b2eE+0x8>
    80007c52:	04000513          	li	a0,64
    80007c56:	e82a                	sd	a0,16(sp)
    80007c58:	4501                	li	a0,0
    80007c5a:	ed0d                	bnez	a0,80007c94 <.LBB4_8>
    80007c5c:	a009                	j	80007c5e <_ZN6kernel4arch5riscv8register6scause6Scause4code17he6d8ec308b055b2eE+0x14>
    80007c5e:	6542                	ld	a0,16(sp)
    80007c60:	fff50593          	addi	a1,a0,-1
    80007c64:	e42e                	sd	a1,8(sp)
    80007c66:	04b56663          	bltu	a0,a1,80007cb2 <.LBB4_10>
    80007c6a:	a009                	j	80007c6c <_ZN6kernel4arch5riscv8register6scause6Scause4code17he6d8ec308b055b2eE+0x22>
    80007c6c:	6622                	ld	a2,8(sp)
    80007c6e:	fc067513          	andi	a0,a2,-64
    80007c72:	4585                	li	a1,1
    80007c74:	00c595b3          	sll	a1,a1,a2
    80007c78:	e02e                	sd	a1,0(sp)
    80007c7a:	4581                	li	a1,0
    80007c7c:	04b51a63          	bne	a0,a1,80007cd0 <.LBB4_12>
    80007c80:	a009                	j	80007c82 <_ZN6kernel4arch5riscv8register6scause6Scause4code17he6d8ec308b055b2eE+0x38>
    80007c82:	6582                	ld	a1,0(sp)
    80007c84:	6562                	ld	a0,24(sp)
    80007c86:	f42e                	sd	a1,40(sp)
        self.bits & !bit
    80007c88:	6108                	ld	a0,0(a0)
    80007c8a:	fff5c593          	not	a1,a1
    80007c8e:	8d6d                	and	a0,a0,a1
    }
    80007c90:	6145                	addi	sp,sp,48
    80007c92:	8082                	ret

0000000080007c94 <.LBB4_8>:
        let bit =  1 << (size_of::<usize>() * 8 -1);
    80007c94:	0001f517          	auipc	a0,0x1f
    80007c98:	4fc50513          	addi	a0,a0,1276 # 80027190 <str.0>

0000000080007c9c <.LBB4_9>:
    80007c9c:	0001f617          	auipc	a2,0x1f
    80007ca0:	4d460613          	addi	a2,a2,1236 # 80027170 <.L__unnamed_3>
    80007ca4:	02100593          	li	a1,33
    80007ca8:	0001a097          	auipc	ra,0x1a
    80007cac:	5ce080e7          	jalr	1486(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080007cb2 <.LBB4_10>:
    80007cb2:	0001f517          	auipc	a0,0x1f
    80007cb6:	51e50513          	addi	a0,a0,1310 # 800271d0 <str.1>

0000000080007cba <.LBB4_11>:
    80007cba:	0001f617          	auipc	a2,0x1f
    80007cbe:	4fe60613          	addi	a2,a2,1278 # 800271b8 <.L__unnamed_4>
    80007cc2:	02100593          	li	a1,33
    80007cc6:	0001a097          	auipc	ra,0x1a
    80007cca:	5b0080e7          	jalr	1456(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080007cd0 <.LBB4_12>:
    80007cd0:	0001f517          	auipc	a0,0x1f
    80007cd4:	54050513          	addi	a0,a0,1344 # 80027210 <str.2>

0000000080007cd8 <.LBB4_13>:
    80007cd8:	0001f617          	auipc	a2,0x1f
    80007cdc:	52060613          	addi	a2,a2,1312 # 800271f8 <.L__unnamed_5>
    80007ce0:	02300593          	li	a1,35
    80007ce4:	0001a097          	auipc	ra,0x1a
    80007ce8:	592080e7          	jalr	1426(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel4arch5riscv8register6scause6Scause5cause17h87ca94701d022899E:

0000000080007cee <_ZN6kernel4arch5riscv8register6scause6Scause5cause17h87ca94701d022899E>:

    // Trap Cause
    #[inline]
    pub fn cause(&self) -> Trap{
    80007cee:	715d                	addi	sp,sp,-80
    80007cf0:	e486                	sd	ra,72(sp)
    80007cf2:	f42a                	sd	a0,40(sp)
    80007cf4:	e0aa                	sd	a0,64(sp)
        if self.is_interrupt() {
    80007cf6:	00000097          	auipc	ra,0x0
    80007cfa:	080080e7          	jalr	128(ra) # 80007d76 <_ZN6kernel4arch5riscv8register6scause6Scause12is_interrupt17ha1f71e688e6e4741E>
    80007cfe:	f82a                	sd	a0,48(sp)
    80007d00:	a009                	j	80007d02 <_ZN6kernel4arch5riscv8register6scause6Scause5cause17h87ca94701d022899E+0x14>
    80007d02:	7542                	ld	a0,48(sp)
    80007d04:	4581                	li	a1,0
    80007d06:	00b50a63          	beq	a0,a1,80007d1a <_ZN6kernel4arch5riscv8register6scause6Scause5cause17h87ca94701d022899E+0x2c>
    80007d0a:	a009                	j	80007d0c <_ZN6kernel4arch5riscv8register6scause6Scause5cause17h87ca94701d022899E+0x1e>
            Trap::Interrupt(Interrupt::from(self.code()))
    80007d0c:	7522                	ld	a0,40(sp)
    80007d0e:	00000097          	auipc	ra,0x0
    80007d12:	f3c080e7          	jalr	-196(ra) # 80007c4a <_ZN6kernel4arch5riscv8register6scause6Scause4code17he6d8ec308b055b2eE>
    80007d16:	f02a                	sd	a0,32(sp)
    80007d18:	a801                	j	80007d28 <_ZN6kernel4arch5riscv8register6scause6Scause5cause17h87ca94701d022899E+0x3a>
        }else{
            Trap::Exception(Exception::from(self.code()))
    80007d1a:	7522                	ld	a0,40(sp)
    80007d1c:	00000097          	auipc	ra,0x0
    80007d20:	f2e080e7          	jalr	-210(ra) # 80007c4a <_ZN6kernel4arch5riscv8register6scause6Scause4code17he6d8ec308b055b2eE>
    80007d24:	ec2a                	sd	a0,24(sp)
    80007d26:	a00d                	j	80007d48 <_ZN6kernel4arch5riscv8register6scause6Scause5cause17h87ca94701d022899E+0x5a>
            Trap::Interrupt(Interrupt::from(self.code()))
    80007d28:	7502                	ld	a0,32(sp)
    80007d2a:	00000097          	auipc	ra,0x0
    80007d2e:	e22080e7          	jalr	-478(ra) # 80007b4c <_ZN6kernel4arch5riscv8register6scause9Interrupt4from17hfa107f1206d46befE>
    80007d32:	0ff57513          	andi	a0,a0,255
    80007d36:	e82a                	sd	a0,16(sp)
    80007d38:	a009                	j	80007d3a <_ZN6kernel4arch5riscv8register6scause6Scause5cause17h87ca94701d022899E+0x4c>
    80007d3a:	6542                	ld	a0,16(sp)
    80007d3c:	02a10ca3          	sb	a0,57(sp)
    80007d40:	4501                	li	a0,0
    80007d42:	02a10c23          	sb	a0,56(sp)
        if self.is_interrupt() {
    80007d46:	a00d                	j	80007d68 <_ZN6kernel4arch5riscv8register6scause6Scause5cause17h87ca94701d022899E+0x7a>
            Trap::Exception(Exception::from(self.code()))
    80007d48:	6562                	ld	a0,24(sp)
    80007d4a:	00000097          	auipc	ra,0x0
    80007d4e:	e64080e7          	jalr	-412(ra) # 80007bae <_ZN6kernel4arch5riscv8register6scause9Exception4from17hf94bf9ab612e4876E>
    80007d52:	0ff57513          	andi	a0,a0,255
    80007d56:	e42a                	sd	a0,8(sp)
    80007d58:	a009                	j	80007d5a <_ZN6kernel4arch5riscv8register6scause6Scause5cause17h87ca94701d022899E+0x6c>
    80007d5a:	6522                	ld	a0,8(sp)
    80007d5c:	02a10ca3          	sb	a0,57(sp)
    80007d60:	4505                	li	a0,1
    80007d62:	02a10c23          	sb	a0,56(sp)
        if self.is_interrupt() {
    80007d66:	a009                	j	80007d68 <_ZN6kernel4arch5riscv8register6scause6Scause5cause17h87ca94701d022899E+0x7a>
        }
    }
    80007d68:	03814503          	lbu	a0,56(sp)
    80007d6c:	03910583          	lb	a1,57(sp)
    80007d70:	60a6                	ld	ra,72(sp)
    80007d72:	6161                	addi	sp,sp,80
    80007d74:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register6scause6Scause12is_interrupt17ha1f71e688e6e4741E:

0000000080007d76 <_ZN6kernel4arch5riscv8register6scause6Scause12is_interrupt17ha1f71e688e6e4741E>:


    // Is trap cause an interrupt
    #[inline]
    pub fn is_interrupt(&self) -> bool {
    80007d76:	7179                	addi	sp,sp,-48
    80007d78:	f406                	sd	ra,40(sp)
    80007d7a:	ec2a                	sd	a0,24(sp)
    80007d7c:	f02a                	sd	a0,32(sp)
        self.bits.get_bit(size_of::<usize>()*8 - 1)
    80007d7e:	a009                	j	80007d80 <_ZN6kernel4arch5riscv8register6scause6Scause12is_interrupt17ha1f71e688e6e4741E+0xa>
    80007d80:	04000513          	li	a0,64
    80007d84:	e82a                	sd	a0,16(sp)
    80007d86:	4501                	li	a0,0
    80007d88:	e50d                	bnez	a0,80007db2 <.LBB6_7>
    80007d8a:	a009                	j	80007d8c <_ZN6kernel4arch5riscv8register6scause6Scause12is_interrupt17ha1f71e688e6e4741E+0x16>
    80007d8c:	6542                	ld	a0,16(sp)
    80007d8e:	fff50593          	addi	a1,a0,-1
    80007d92:	e42e                	sd	a1,8(sp)
    80007d94:	02b56e63          	bltu	a0,a1,80007dd0 <.LBB6_9>
    80007d98:	a009                	j	80007d9a <_ZN6kernel4arch5riscv8register6scause6Scause12is_interrupt17ha1f71e688e6e4741E+0x24>
    80007d9a:	65a2                	ld	a1,8(sp)
    80007d9c:	6562                	ld	a0,24(sp)
    80007d9e:	ffffc097          	auipc	ra,0xffffc
    80007da2:	f7e080e7          	jalr	-130(ra) # 80003d1c <_ZN45_$LT$usize$u20$as$u20$bit_field..BitField$GT$7get_bit17ha84b909d1dae7859E>
    80007da6:	e02a                	sd	a0,0(sp)
    80007da8:	a009                	j	80007daa <_ZN6kernel4arch5riscv8register6scause6Scause12is_interrupt17ha1f71e688e6e4741E+0x34>
    }
    80007daa:	6502                	ld	a0,0(sp)
    80007dac:	70a2                	ld	ra,40(sp)
    80007dae:	6145                	addi	sp,sp,48
    80007db0:	8082                	ret

0000000080007db2 <.LBB6_7>:
        self.bits.get_bit(size_of::<usize>()*8 - 1)
    80007db2:	0001f517          	auipc	a0,0x1f
    80007db6:	3de50513          	addi	a0,a0,990 # 80027190 <str.0>

0000000080007dba <.LBB6_8>:
    80007dba:	0001f617          	auipc	a2,0x1f
    80007dbe:	47e60613          	addi	a2,a2,1150 # 80027238 <.L__unnamed_6>
    80007dc2:	02100593          	li	a1,33
    80007dc6:	0001a097          	auipc	ra,0x1a
    80007dca:	4b0080e7          	jalr	1200(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080007dd0 <.LBB6_9>:
    80007dd0:	0001f517          	auipc	a0,0x1f
    80007dd4:	40050513          	addi	a0,a0,1024 # 800271d0 <str.1>

0000000080007dd8 <.LBB6_10>:
    80007dd8:	0001f617          	auipc	a2,0x1f
    80007ddc:	46060613          	addi	a2,a2,1120 # 80027238 <.L__unnamed_6>
    80007de0:	02100593          	li	a1,33
    80007de4:	0001a097          	auipc	ra,0x1a
    80007de8:	492080e7          	jalr	1170(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN80_$LT$kernel..arch..riscv..register..scause..Trap$u20$as$u20$core..fmt..Debug$GT$3fmt17haf633180146f5b80E:

0000000080007dee <_ZN80_$LT$kernel..arch..riscv..register..scause..Trap$u20$as$u20$core..fmt..Debug$GT$3fmt17haf633180146f5b80E>:
#[derive(Copy, Clone, Debug, Eq, PartialEq)]
    80007dee:	7135                	addi	sp,sp,-160
    80007df0:	ed06                	sd	ra,152(sp)
    80007df2:	e82e                	sd	a1,16(sp)
    80007df4:	f4aa                	sd	a0,104(sp)
    80007df6:	f8ae                	sd	a1,112(sp)
    80007df8:	f02a                	sd	a0,32(sp)
    80007dfa:	00054503          	lbu	a0,0(a0)
    80007dfe:	8905                	andi	a0,a0,1
    80007e00:	4581                	li	a1,0
    80007e02:	02b50463          	beq	a0,a1,80007e2a <.LBB7_10+0x18>
    80007e06:	a009                	j	80007e08 <_ZN80_$LT$kernel..arch..riscv..register..scause..Trap$u20$as$u20$core..fmt..Debug$GT$3fmt17haf633180146f5b80E+0x1a>
    Exception(Exception),
    80007e08:	65c2                	ld	a1,16(sp)
    80007e0a:	7502                	ld	a0,32(sp)
    80007e0c:	0505                	addi	a0,a0,1
    80007e0e:	e42a                	sd	a0,8(sp)
    80007e10:	fcaa                	sd	a0,120(sp)

0000000080007e12 <.LBB7_10>:
#[derive(Copy, Clone, Debug, Eq, PartialEq)]
    80007e12:	0001f617          	auipc	a2,0x1f
    80007e16:	43e60613          	addi	a2,a2,1086 # 80027250 <.L__unnamed_7>
    80007e1a:	00a8                	addi	a0,sp,72
    80007e1c:	46a5                	li	a3,9
    80007e1e:	0001b097          	auipc	ra,0x1b
    80007e22:	3d6080e7          	jalr	982(ra) # 800231f4 <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    80007e26:	a881                	j	80007e76 <.LBB7_12+0x24>
    80007e28:	0000                	unimp
    Interrupt(Interrupt),
    80007e2a:	65c2                	ld	a1,16(sp)
    80007e2c:	7502                	ld	a0,32(sp)
    80007e2e:	0505                	addi	a0,a0,1
    80007e30:	e02a                	sd	a0,0(sp)
    80007e32:	e52a                	sd	a0,136(sp)

0000000080007e34 <.LBB7_11>:
#[derive(Copy, Clone, Debug, Eq, PartialEq)]
    80007e34:	0001f617          	auipc	a2,0x1f
    80007e38:	44c60613          	addi	a2,a2,1100 # 80027280 <.L__unnamed_8>
    80007e3c:	1028                	addi	a0,sp,40
    80007e3e:	46a5                	li	a3,9
    80007e40:	0001b097          	auipc	ra,0x1b
    80007e44:	3b4080e7          	jalr	948(ra) # 800231f4 <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    80007e48:	a009                	j	80007e4a <.LBB7_11+0x16>
    80007e4a:	6582                	ld	a1,0(sp)
    80007e4c:	1028                	addi	a0,sp,40
    80007e4e:	e92a                	sd	a0,144(sp)
    Interrupt(Interrupt),
    80007e50:	e0ae                	sd	a1,64(sp)

0000000080007e52 <.LBB7_12>:
#[derive(Copy, Clone, Debug, Eq, PartialEq)]
    80007e52:	0001f617          	auipc	a2,0x1f
    80007e56:	43e60613          	addi	a2,a2,1086 # 80027290 <.L__unnamed_2>
    80007e5a:	008c                	addi	a1,sp,64
    80007e5c:	0001b097          	auipc	ra,0x1b
    80007e60:	8d0080e7          	jalr	-1840(ra) # 8002272c <_ZN4core3fmt8builders10DebugTuple5field17h5bd338b8cb98b948E>
    80007e64:	a009                	j	80007e66 <.LBB7_12+0x14>
    80007e66:	1028                	addi	a0,sp,40
    80007e68:	0001b097          	auipc	ra,0x1b
    80007e6c:	9e4080e7          	jalr	-1564(ra) # 8002284c <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    80007e70:	00a10fa3          	sb	a0,31(sp)
    80007e74:	a03d                	j	80007ea2 <.LBB7_13+0x24>
    80007e76:	65a2                	ld	a1,8(sp)
    80007e78:	00a8                	addi	a0,sp,72
    80007e7a:	e12a                	sd	a0,128(sp)
    Exception(Exception),
    80007e7c:	f0ae                	sd	a1,96(sp)

0000000080007e7e <.LBB7_13>:
#[derive(Copy, Clone, Debug, Eq, PartialEq)]
    80007e7e:	0001f617          	auipc	a2,0x1f
    80007e82:	3e260613          	addi	a2,a2,994 # 80027260 <.L__unnamed_1>
    80007e86:	108c                	addi	a1,sp,96
    80007e88:	0001b097          	auipc	ra,0x1b
    80007e8c:	8a4080e7          	jalr	-1884(ra) # 8002272c <_ZN4core3fmt8builders10DebugTuple5field17h5bd338b8cb98b948E>
    80007e90:	a009                	j	80007e92 <.LBB7_13+0x14>
    80007e92:	00a8                	addi	a0,sp,72
    80007e94:	0001b097          	auipc	ra,0x1b
    80007e98:	9b8080e7          	jalr	-1608(ra) # 8002284c <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    80007e9c:	00a10fa3          	sb	a0,31(sp)
    80007ea0:	a009                	j	80007ea2 <.LBB7_13+0x24>
    80007ea2:	01f14503          	lbu	a0,31(sp)
    80007ea6:	60ea                	ld	ra,152(sp)
    80007ea8:	610d                	addi	sp,sp,160
    80007eaa:	8082                	ret

Disassembly of section .text._ZN85_$LT$kernel..arch..riscv..register..scause..Interrupt$u20$as$u20$core..fmt..Debug$GT$3fmt17h96992b3c4ed41ad9E:

0000000080007eac <_ZN85_$LT$kernel..arch..riscv..register..scause..Interrupt$u20$as$u20$core..fmt..Debug$GT$3fmt17h96992b3c4ed41ad9E>:
#[derive(Copy, Clone, Debug, Eq, PartialEq)]
    80007eac:	712d                	addi	sp,sp,-288
    80007eae:	ee06                	sd	ra,280(sp)
    80007eb0:	e42e                	sd	a1,8(sp)
    80007eb2:	e9aa                	sd	a0,208(sp)
    80007eb4:	edae                	sd	a1,216(sp)
    80007eb6:	f02a                	sd	a0,32(sp)
    80007eb8:	00054503          	lbu	a0,0(a0)
    80007ebc:	e82a                	sd	a0,16(sp)
    80007ebe:	6542                	ld	a0,16(sp)
    80007ec0:	050e                	slli	a0,a0,0x3

0000000080007ec2 <.LBB8_18>:
    80007ec2:	0001f597          	auipc	a1,0x1f
    80007ec6:	1e658593          	addi	a1,a1,486 # 800270a8 <.LJTI8_0>
    80007eca:	952e                	add	a0,a0,a1
    80007ecc:	6108                	ld	a0,0(a0)
    80007ece:	8502                	jr	a0

0000000080007ed0 <.LBB8_2>:
    80007ed0:	65a2                	ld	a1,8(sp)

0000000080007ed2 <.LBB8_19>:
    80007ed2:	0001f617          	auipc	a2,0x1f
    80007ed6:	3de60613          	addi	a2,a2,990 # 800272b0 <.L__unnamed_9>
    80007eda:	1928                	addi	a0,sp,184
    80007edc:	469d                	li	a3,7
    80007ede:	0001b097          	auipc	ra,0x1b
    80007ee2:	316080e7          	jalr	790(ra) # 800231f4 <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    80007ee6:	a201                	j	80007fe6 <.LBB8_25+0x28>
	...

0000000080007eea <.LBB8_4>:
    80007eea:	65a2                	ld	a1,8(sp)

0000000080007eec <.LBB8_20>:
    80007eec:	0001f617          	auipc	a2,0x1f
    80007ef0:	92c60613          	addi	a2,a2,-1748 # 80026818 <.L__unnamed_6+0x70>
    80007ef4:	1028                	addi	a0,sp,40
    80007ef6:	46a1                	li	a3,8
    80007ef8:	0001b097          	auipc	ra,0x1b
    80007efc:	2fc080e7          	jalr	764(ra) # 800231f4 <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    80007f00:	a009                	j	80007f02 <.LBB8_20+0x16>
    80007f02:	1028                	addi	a0,sp,40
    80007f04:	ea2a                	sd	a0,272(sp)
    80007f06:	0001b097          	auipc	ra,0x1b
    80007f0a:	946080e7          	jalr	-1722(ra) # 8002284c <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    80007f0e:	00a10fa3          	sb	a0,31(sp)
    80007f12:	a0dd                	j	80007ff8 <.LBB8_25+0x3a>

0000000080007f14 <.LBB8_6>:
    80007f14:	65a2                	ld	a1,8(sp)

0000000080007f16 <.LBB8_21>:
    80007f16:	0001f617          	auipc	a2,0x1f
    80007f1a:	3d760613          	addi	a2,a2,983 # 800272ed <.L__unnamed_11>
    80007f1e:	0088                	addi	a0,sp,64
    80007f20:	46b9                	li	a3,14
    80007f22:	0001b097          	auipc	ra,0x1b
    80007f26:	2d2080e7          	jalr	722(ra) # 800231f4 <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    80007f2a:	a009                	j	80007f2c <.LBB8_21+0x16>
    80007f2c:	0088                	addi	a0,sp,64
    80007f2e:	e62a                	sd	a0,264(sp)
    80007f30:	0001b097          	auipc	ra,0x1b
    80007f34:	91c080e7          	jalr	-1764(ra) # 8002284c <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    80007f38:	00a10fa3          	sb	a0,31(sp)
    80007f3c:	a875                	j	80007ff8 <.LBB8_25+0x3a>

0000000080007f3e <.LBB8_8>:
    80007f3e:	65a2                	ld	a1,8(sp)

0000000080007f40 <.LBB8_22>:
    80007f40:	0001f617          	auipc	a2,0x1f
    80007f44:	3a460613          	addi	a2,a2,932 # 800272e4 <.L__unnamed_12>
    80007f48:	08a8                	addi	a0,sp,88
    80007f4a:	46a5                	li	a3,9
    80007f4c:	0001b097          	auipc	ra,0x1b
    80007f50:	2a8080e7          	jalr	680(ra) # 800231f4 <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    80007f54:	a009                	j	80007f56 <.LBB8_22+0x16>
    80007f56:	08a8                	addi	a0,sp,88
    80007f58:	e22a                	sd	a0,256(sp)
    80007f5a:	0001b097          	auipc	ra,0x1b
    80007f5e:	8f2080e7          	jalr	-1806(ra) # 8002284c <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    80007f62:	00a10fa3          	sb	a0,31(sp)
    80007f66:	a849                	j	80007ff8 <.LBB8_25+0x3a>

0000000080007f68 <.LBB8_10>:
    80007f68:	65a2                	ld	a1,8(sp)

0000000080007f6a <.LBB8_23>:
    80007f6a:	0001f617          	auipc	a2,0x1f
    80007f6e:	36b60613          	addi	a2,a2,875 # 800272d5 <.L__unnamed_13>
    80007f72:	1888                	addi	a0,sp,112
    80007f74:	46bd                	li	a3,15
    80007f76:	0001b097          	auipc	ra,0x1b
    80007f7a:	27e080e7          	jalr	638(ra) # 800231f4 <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    80007f7e:	a009                	j	80007f80 <.LBB8_23+0x16>
    80007f80:	1888                	addi	a0,sp,112
    80007f82:	fdaa                	sd	a0,248(sp)
    80007f84:	0001b097          	auipc	ra,0x1b
    80007f88:	8c8080e7          	jalr	-1848(ra) # 8002284c <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    80007f8c:	00a10fa3          	sb	a0,31(sp)
    80007f90:	a0a5                	j	80007ff8 <.LBB8_25+0x3a>

0000000080007f92 <.LBB8_12>:
    80007f92:	65a2                	ld	a1,8(sp)

0000000080007f94 <.LBB8_24>:
    80007f94:	0001f617          	auipc	a2,0x1f
    80007f98:	33560613          	addi	a2,a2,821 # 800272c9 <.L__unnamed_14>
    80007f9c:	0128                	addi	a0,sp,136
    80007f9e:	46b1                	li	a3,12
    80007fa0:	0001b097          	auipc	ra,0x1b
    80007fa4:	254080e7          	jalr	596(ra) # 800231f4 <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    80007fa8:	a009                	j	80007faa <.LBB8_24+0x16>
    80007faa:	0128                	addi	a0,sp,136
    80007fac:	f9aa                	sd	a0,240(sp)
    80007fae:	0001b097          	auipc	ra,0x1b
    80007fb2:	89e080e7          	jalr	-1890(ra) # 8002284c <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    80007fb6:	00a10fa3          	sb	a0,31(sp)
    80007fba:	a83d                	j	80007ff8 <.LBB8_25+0x3a>

0000000080007fbc <.LBB8_14>:
    80007fbc:	65a2                	ld	a1,8(sp)

0000000080007fbe <.LBB8_25>:
    80007fbe:	0001f617          	auipc	a2,0x1f
    80007fc2:	2f960613          	addi	a2,a2,761 # 800272b7 <.L__unnamed_15>
    80007fc6:	1108                	addi	a0,sp,160
    80007fc8:	46c9                	li	a3,18
    80007fca:	0001b097          	auipc	ra,0x1b
    80007fce:	22a080e7          	jalr	554(ra) # 800231f4 <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    80007fd2:	a009                	j	80007fd4 <.LBB8_25+0x16>
    80007fd4:	1108                	addi	a0,sp,160
    80007fd6:	f5aa                	sd	a0,232(sp)
    80007fd8:	0001b097          	auipc	ra,0x1b
    80007fdc:	874080e7          	jalr	-1932(ra) # 8002284c <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    80007fe0:	00a10fa3          	sb	a0,31(sp)
    80007fe4:	a811                	j	80007ff8 <.LBB8_25+0x3a>
    80007fe6:	1928                	addi	a0,sp,184
    80007fe8:	f1aa                	sd	a0,224(sp)
    80007fea:	0001b097          	auipc	ra,0x1b
    80007fee:	862080e7          	jalr	-1950(ra) # 8002284c <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    80007ff2:	00a10fa3          	sb	a0,31(sp)
    80007ff6:	a009                	j	80007ff8 <.LBB8_25+0x3a>
    80007ff8:	01f14503          	lbu	a0,31(sp)
    80007ffc:	60f2                	ld	ra,280(sp)
    80007ffe:	6115                	addi	sp,sp,288
    80008000:	8082                	ret

Disassembly of section .text._ZN85_$LT$kernel..arch..riscv..register..scause..Exception$u20$as$u20$core..fmt..Debug$GT$3fmt17h4deffc5a3158ed01E:

0000000080008002 <_ZN85_$LT$kernel..arch..riscv..register..scause..Exception$u20$as$u20$core..fmt..Debug$GT$3fmt17h4deffc5a3158ed01E>:
#[derive(Copy, Clone, Debug, Eq, PartialEq)]
    80008002:	7105                	addi	sp,sp,-480
    80008004:	ef86                	sd	ra,472(sp)
    80008006:	e42e                	sd	a1,8(sp)
    80008008:	f2aa                	sd	a0,352(sp)
    8000800a:	f6ae                	sd	a1,360(sp)
    8000800c:	f02a                	sd	a0,32(sp)
    8000800e:	00054503          	lbu	a0,0(a0)
    80008012:	e82a                	sd	a0,16(sp)
    80008014:	6542                	ld	a0,16(sp)
    80008016:	050e                	slli	a0,a0,0x3

0000000080008018 <.LBB9_30>:
    80008018:	0001f597          	auipc	a1,0x1f
    8000801c:	0c858593          	addi	a1,a1,200 # 800270e0 <.LJTI9_0>
    80008020:	952e                	add	a0,a0,a1
    80008022:	6108                	ld	a0,0(a0)
    80008024:	8502                	jr	a0

0000000080008026 <.LBB9_2>:
    80008026:	65a2                	ld	a1,8(sp)

0000000080008028 <.LBB9_31>:
    80008028:	0001f617          	auipc	a2,0x1f
    8000802c:	28860613          	addi	a2,a2,648 # 800272b0 <.L__unnamed_9>
    80008030:	02a8                	addi	a0,sp,328
    80008032:	469d                	li	a3,7
    80008034:	0001b097          	auipc	ra,0x1b
    80008038:	1c0080e7          	jalr	448(ra) # 800231f4 <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    8000803c:	aaf5                	j	80008238 <.LBB9_43+0x28>
	...

0000000080008040 <.LBB9_4>:
    80008040:	65a2                	ld	a1,8(sp)

0000000080008042 <.LBB9_32>:
    80008042:	0001f617          	auipc	a2,0x1f
    80008046:	33e60613          	addi	a2,a2,830 # 80027380 <.L__unnamed_16>
    8000804a:	1028                	addi	a0,sp,40
    8000804c:	46d5                	li	a3,21
    8000804e:	0001b097          	auipc	ra,0x1b
    80008052:	1a6080e7          	jalr	422(ra) # 800231f4 <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    80008056:	a009                	j	80008058 <.LBB9_32+0x16>
    80008058:	1028                	addi	a0,sp,40
    8000805a:	ebaa                	sd	a0,464(sp)
    8000805c:	0001a097          	auipc	ra,0x1a
    80008060:	7f0080e7          	jalr	2032(ra) # 8002284c <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    80008064:	00a10fa3          	sb	a0,31(sp)
    80008068:	a2cd                	j	8000824a <.LBB9_43+0x3a>

000000008000806a <.LBB9_6>:
    8000806a:	65a2                	ld	a1,8(sp)

000000008000806c <.LBB9_33>:
    8000806c:	0001d617          	auipc	a2,0x1d
    80008070:	6c460613          	addi	a2,a2,1732 # 80025730 <.L__unnamed_35+0xb8>
    80008074:	0088                	addi	a0,sp,64
    80008076:	46c1                	li	a3,16
    80008078:	0001b097          	auipc	ra,0x1b
    8000807c:	17c080e7          	jalr	380(ra) # 800231f4 <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    80008080:	a009                	j	80008082 <.LBB9_33+0x16>
    80008082:	0088                	addi	a0,sp,64
    80008084:	e7aa                	sd	a0,456(sp)
    80008086:	0001a097          	auipc	ra,0x1a
    8000808a:	7c6080e7          	jalr	1990(ra) # 8002284c <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    8000808e:	00a10fa3          	sb	a0,31(sp)
    80008092:	aa65                	j	8000824a <.LBB9_43+0x3a>

0000000080008094 <.LBB9_8>:
    80008094:	65a2                	ld	a1,8(sp)

0000000080008096 <.LBB9_34>:
    80008096:	0001f617          	auipc	a2,0x1f
    8000809a:	2d860613          	addi	a2,a2,728 # 8002736e <.L__unnamed_18>
    8000809e:	08a8                	addi	a0,sp,88
    800080a0:	46c9                	li	a3,18
    800080a2:	0001b097          	auipc	ra,0x1b
    800080a6:	152080e7          	jalr	338(ra) # 800231f4 <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    800080aa:	a009                	j	800080ac <.LBB9_34+0x16>
    800080ac:	08a8                	addi	a0,sp,88
    800080ae:	e3aa                	sd	a0,448(sp)
    800080b0:	0001a097          	auipc	ra,0x1a
    800080b4:	79c080e7          	jalr	1948(ra) # 8002284c <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    800080b8:	00a10fa3          	sb	a0,31(sp)
    800080bc:	a279                	j	8000824a <.LBB9_43+0x3a>

00000000800080be <.LBB9_10>:
    800080be:	65a2                	ld	a1,8(sp)

00000000800080c0 <.LBB9_35>:
    800080c0:	0001f617          	auipc	a2,0x1f
    800080c4:	2a460613          	addi	a2,a2,676 # 80027364 <.L__unnamed_19>
    800080c8:	1888                	addi	a0,sp,112
    800080ca:	46a9                	li	a3,10
    800080cc:	0001b097          	auipc	ra,0x1b
    800080d0:	128080e7          	jalr	296(ra) # 800231f4 <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    800080d4:	a009                	j	800080d6 <.LBB9_35+0x16>
    800080d6:	1888                	addi	a0,sp,112
    800080d8:	ff2a                	sd	a0,440(sp)
    800080da:	0001a097          	auipc	ra,0x1a
    800080de:	772080e7          	jalr	1906(ra) # 8002284c <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    800080e2:	00a10fa3          	sb	a0,31(sp)
    800080e6:	a295                	j	8000824a <.LBB9_43+0x3a>

00000000800080e8 <.LBB9_12>:
    800080e8:	65a2                	ld	a1,8(sp)

00000000800080ea <.LBB9_36>:
    800080ea:	0001f617          	auipc	a2,0x1f
    800080ee:	27160613          	addi	a2,a2,625 # 8002735b <.L__unnamed_20>
    800080f2:	0128                	addi	a0,sp,136
    800080f4:	46a5                	li	a3,9
    800080f6:	0001b097          	auipc	ra,0x1b
    800080fa:	0fe080e7          	jalr	254(ra) # 800231f4 <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    800080fe:	a009                	j	80008100 <.LBB9_36+0x16>
    80008100:	0128                	addi	a0,sp,136
    80008102:	fb2a                	sd	a0,432(sp)
    80008104:	0001a097          	auipc	ra,0x1a
    80008108:	748080e7          	jalr	1864(ra) # 8002284c <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    8000810c:	00a10fa3          	sb	a0,31(sp)
    80008110:	aa2d                	j	8000824a <.LBB9_43+0x3a>

0000000080008112 <.LBB9_14>:
    80008112:	65a2                	ld	a1,8(sp)

0000000080008114 <.LBB9_37>:
    80008114:	0001f617          	auipc	a2,0x1f
    80008118:	23860613          	addi	a2,a2,568 # 8002734c <.L__unnamed_21>
    8000811c:	1108                	addi	a0,sp,160
    8000811e:	46bd                	li	a3,15
    80008120:	0001b097          	auipc	ra,0x1b
    80008124:	0d4080e7          	jalr	212(ra) # 800231f4 <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    80008128:	a009                	j	8000812a <.LBB9_37+0x16>
    8000812a:	1108                	addi	a0,sp,160
    8000812c:	f72a                	sd	a0,424(sp)
    8000812e:	0001a097          	auipc	ra,0x1a
    80008132:	71e080e7          	jalr	1822(ra) # 8002284c <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    80008136:	00a10fa3          	sb	a0,31(sp)
    8000813a:	aa01                	j	8000824a <.LBB9_43+0x3a>

000000008000813c <.LBB9_16>:
    8000813c:	65a2                	ld	a1,8(sp)

000000008000813e <.LBB9_38>:
    8000813e:	0001f617          	auipc	a2,0x1f
    80008142:	20460613          	addi	a2,a2,516 # 80027342 <.L__unnamed_22>
    80008146:	1928                	addi	a0,sp,184
    80008148:	46a9                	li	a3,10
    8000814a:	0001b097          	auipc	ra,0x1b
    8000814e:	0aa080e7          	jalr	170(ra) # 800231f4 <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    80008152:	a009                	j	80008154 <.LBB9_38+0x16>
    80008154:	1928                	addi	a0,sp,184
    80008156:	f32a                	sd	a0,416(sp)
    80008158:	0001a097          	auipc	ra,0x1a
    8000815c:	6f4080e7          	jalr	1780(ra) # 8002284c <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    80008160:	00a10fa3          	sb	a0,31(sp)
    80008164:	a0dd                	j	8000824a <.LBB9_43+0x3a>

0000000080008166 <.LBB9_18>:
    80008166:	65a2                	ld	a1,8(sp)

0000000080008168 <.LBB9_39>:
    80008168:	0001f617          	auipc	a2,0x1f
    8000816c:	1cf60613          	addi	a2,a2,463 # 80027337 <.L__unnamed_23>
    80008170:	0988                	addi	a0,sp,208
    80008172:	46ad                	li	a3,11
    80008174:	0001b097          	auipc	ra,0x1b
    80008178:	080080e7          	jalr	128(ra) # 800231f4 <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    8000817c:	a009                	j	8000817e <.LBB9_39+0x16>
    8000817e:	0988                	addi	a0,sp,208
    80008180:	ef2a                	sd	a0,408(sp)
    80008182:	0001a097          	auipc	ra,0x1a
    80008186:	6ca080e7          	jalr	1738(ra) # 8002284c <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    8000818a:	00a10fa3          	sb	a0,31(sp)
    8000818e:	a875                	j	8000824a <.LBB9_43+0x3a>

0000000080008190 <.LBB9_20>:
    80008190:	65a2                	ld	a1,8(sp)

0000000080008192 <.LBB9_40>:
    80008192:	0001f617          	auipc	a2,0x1f
    80008196:	19860613          	addi	a2,a2,408 # 8002732a <.L__unnamed_24>
    8000819a:	11a8                	addi	a0,sp,232
    8000819c:	46b5                	li	a3,13
    8000819e:	0001b097          	auipc	ra,0x1b
    800081a2:	056080e7          	jalr	86(ra) # 800231f4 <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    800081a6:	a009                	j	800081a8 <.LBB9_40+0x16>
    800081a8:	11a8                	addi	a0,sp,232
    800081aa:	eb2a                	sd	a0,400(sp)
    800081ac:	0001a097          	auipc	ra,0x1a
    800081b0:	6a0080e7          	jalr	1696(ra) # 8002284c <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    800081b4:	00a10fa3          	sb	a0,31(sp)
    800081b8:	a849                	j	8000824a <.LBB9_43+0x3a>

00000000800081ba <.LBB9_22>:
    800081ba:	65a2                	ld	a1,8(sp)

00000000800081bc <.LBB9_41>:
    800081bc:	0001f617          	auipc	a2,0x1f
    800081c0:	15a60613          	addi	a2,a2,346 # 80027316 <.L__unnamed_25>
    800081c4:	0208                	addi	a0,sp,256
    800081c6:	46d1                	li	a3,20
    800081c8:	0001b097          	auipc	ra,0x1b
    800081cc:	02c080e7          	jalr	44(ra) # 800231f4 <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    800081d0:	a009                	j	800081d2 <.LBB9_41+0x16>
    800081d2:	0208                	addi	a0,sp,256
    800081d4:	e72a                	sd	a0,392(sp)
    800081d6:	0001a097          	auipc	ra,0x1a
    800081da:	676080e7          	jalr	1654(ra) # 8002284c <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    800081de:	00a10fa3          	sb	a0,31(sp)
    800081e2:	a0a5                	j	8000824a <.LBB9_43+0x3a>

00000000800081e4 <.LBB9_24>:
    800081e4:	65a2                	ld	a1,8(sp)

00000000800081e6 <.LBB9_42>:
    800081e6:	0001f617          	auipc	a2,0x1f
    800081ea:	12360613          	addi	a2,a2,291 # 80027309 <.L__unnamed_26>
    800081ee:	0a28                	addi	a0,sp,280
    800081f0:	46b5                	li	a3,13
    800081f2:	0001b097          	auipc	ra,0x1b
    800081f6:	002080e7          	jalr	2(ra) # 800231f4 <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    800081fa:	a009                	j	800081fc <.LBB9_42+0x16>
    800081fc:	0a28                	addi	a0,sp,280
    800081fe:	e32a                	sd	a0,384(sp)
    80008200:	0001a097          	auipc	ra,0x1a
    80008204:	64c080e7          	jalr	1612(ra) # 8002284c <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    80008208:	00a10fa3          	sb	a0,31(sp)
    8000820c:	a83d                	j	8000824a <.LBB9_43+0x3a>

000000008000820e <.LBB9_26>:
    8000820e:	65a2                	ld	a1,8(sp)

0000000080008210 <.LBB9_43>:
    80008210:	0001f617          	auipc	a2,0x1f
    80008214:	0eb60613          	addi	a2,a2,235 # 800272fb <.L__unnamed_27>
    80008218:	1a08                	addi	a0,sp,304
    8000821a:	46b9                	li	a3,14
    8000821c:	0001b097          	auipc	ra,0x1b
    80008220:	fd8080e7          	jalr	-40(ra) # 800231f4 <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    80008224:	a009                	j	80008226 <.LBB9_43+0x16>
    80008226:	1a08                	addi	a0,sp,304
    80008228:	feaa                	sd	a0,376(sp)
    8000822a:	0001a097          	auipc	ra,0x1a
    8000822e:	622080e7          	jalr	1570(ra) # 8002284c <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    80008232:	00a10fa3          	sb	a0,31(sp)
    80008236:	a811                	j	8000824a <.LBB9_43+0x3a>
    80008238:	02a8                	addi	a0,sp,328
    8000823a:	faaa                	sd	a0,368(sp)
    8000823c:	0001a097          	auipc	ra,0x1a
    80008240:	610080e7          	jalr	1552(ra) # 8002284c <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    80008244:	00a10fa3          	sb	a0,31(sp)
    80008248:	a009                	j	8000824a <.LBB9_43+0x3a>
    8000824a:	01f14503          	lbu	a0,31(sp)
    8000824e:	60fe                	ld	ra,472(sp)
    80008250:	613d                	addi	sp,sp,480
    80008252:	8082                	ret

Disassembly of section .text._ZN6kernel2fs6dinode9DiskInode9try_alloc17h056e30475eb0a85bE:

0000000080008254 <_ZN6kernel2fs6dinode9DiskInode9try_alloc17h056e30475eb0a85bE>:
            size: 0,
            addrs: [0; NDIRECT+1]
        }
    }

    pub fn try_alloc(&mut self, itype: InodeType) -> Result<(), ()> {
    80008254:	7139                	addi	sp,sp,-64
    80008256:	fc06                	sd	ra,56(sp)
    80008258:	e42a                	sd	a0,8(sp)
    8000825a:	862e                	mv	a2,a1
    8000825c:	e832                	sd	a2,16(sp)
    8000825e:	f42a                	sd	a0,40(sp)
    80008260:	02b11b23          	sh	a1,54(sp)

0000000080008264 <.LBB0_6>:
        if self.itype == InodeType::Empty {
    80008264:	0001f597          	auipc	a1,0x1f
    80008268:	13258593          	addi	a1,a1,306 # 80027396 <.L__unnamed_1>
    8000826c:	00000097          	auipc	ra,0x0
    80008270:	156080e7          	jalr	342(ra) # 800083c2 <_ZN70_$LT$kernel..fs..dinode..InodeType$u20$as$u20$core..cmp..PartialEq$GT$2eq17ha4431a2c7299d33fE>
    80008274:	ec2a                	sd	a0,24(sp)
    80008276:	a009                	j	80008278 <.LBB0_6+0x14>
    80008278:	6562                	ld	a0,24(sp)
    8000827a:	4581                	li	a1,0
    8000827c:	00b50b63          	beq	a0,a1,80008292 <.LBB0_6+0x2e>
    80008280:	a009                	j	80008282 <.LBB0_6+0x1e>
            unsafe { ptr::write_bytes(self, 0, 1); }
    80008282:	6522                	ld	a0,8(sp)
    80008284:	4581                	li	a1,0
    80008286:	4605                	li	a2,1
    80008288:	00004097          	auipc	ra,0x4
    8000828c:	a7e080e7          	jalr	-1410(ra) # 8000bd06 <_ZN4core10intrinsics11write_bytes17h11bbad1db2a3ea1bE>
    80008290:	a029                	j	8000829a <.LBB0_6+0x36>
    80008292:	4505                	li	a0,1
            self.itype = itype;
            Ok(())
        } else {
            Err(())
    80008294:	02a103a3          	sb	a0,39(sp)
        if self.itype == InodeType::Empty {
    80008298:	a809                	j	800082aa <.LBB0_6+0x46>
            self.itype = itype;
    8000829a:	6542                	ld	a0,16(sp)
    8000829c:	65a2                	ld	a1,8(sp)
    8000829e:	00a59023          	sh	a0,0(a1)
    800082a2:	4501                	li	a0,0
            Ok(())
    800082a4:	02a103a3          	sb	a0,39(sp)
        if self.itype == InodeType::Empty {
    800082a8:	a009                	j	800082aa <.LBB0_6+0x46>
        }
    }
    800082aa:	02714503          	lbu	a0,39(sp)
    800082ae:	70e2                	ld	ra,56(sp)
    800082b0:	6121                	addi	sp,sp,64
    800082b2:	8082                	ret

Disassembly of section .text._ZN6kernel2fs6dinode8DirEntry3new17h74e849d4398bb7e4E:

00000000800082b4 <_ZN6kernel2fs6dinode8DirEntry3new17h74e849d4398bb7e4E>:
}

impl DirEntry {
    pub const fn new() -> Self {
    800082b4:	7179                	addi	sp,sp,-48
    800082b6:	f406                	sd	ra,40(sp)
    800082b8:	4501                	li	a0,0
        Self {
            inum: 0,
            name: [0;DIRSIZ]
    800082ba:	02a11223          	sh	a0,36(sp)
    800082be:	d02a                	sw	a0,32(sp)
    800082c0:	ec2a                	sd	a0,24(sp)
        Self {
    800082c2:	00a11423          	sh	a0,8(sp)
    800082c6:	00a10513          	addi	a0,sp,10
    800082ca:	082c                	addi	a1,sp,24
    800082cc:	4639                	li	a2,14
    800082ce:	0001d097          	auipc	ra,0x1d
    800082d2:	e16080e7          	jalr	-490(ra) # 800250e4 <memcpy>
        }
    }
    800082d6:	6522                	ld	a0,8(sp)
    800082d8:	65c2                	ld	a1,16(sp)
    800082da:	70a2                	ld	ra,40(sp)
    800082dc:	6145                	addi	sp,sp,48
    800082de:	8082                	ret

Disassembly of section .text._ZN66_$LT$kernel..fs..dinode..InodeType$u20$as$u20$core..fmt..Debug$GT$3fmt17h43e6a048c6ad07fbE:

00000000800082e0 <_ZN66_$LT$kernel..fs..dinode..InodeType$u20$as$u20$core..fmt..Debug$GT$3fmt17h43e6a048c6ad07fbE>:
#[derive(Clone, Copy, PartialEq, Eq, Debug)]
    800082e0:	7131                	addi	sp,sp,-192
    800082e2:	fd06                	sd	ra,184(sp)
    800082e4:	e42e                	sd	a1,8(sp)
    800082e6:	e52a                	sd	a0,136(sp)
    800082e8:	e92e                	sd	a1,144(sp)
    800082ea:	f02a                	sd	a0,32(sp)
    800082ec:	00055503          	lhu	a0,0(a0)
    800082f0:	e82a                	sd	a0,16(sp)
    800082f2:	4581                	li	a1,0
    800082f4:	02b50a63          	beq	a0,a1,80008328 <.LBB2_14+0x18>
    800082f8:	a009                	j	800082fa <_ZN66_$LT$kernel..fs..dinode..InodeType$u20$as$u20$core..fmt..Debug$GT$3fmt17h43e6a048c6ad07fbE+0x1a>
    800082fa:	6542                	ld	a0,16(sp)
    800082fc:	4585                	li	a1,1
    800082fe:	04b50a63          	beq	a0,a1,80008352 <.LBB2_15+0x28>
    80008302:	a009                	j	80008304 <_ZN66_$LT$kernel..fs..dinode..InodeType$u20$as$u20$core..fmt..Debug$GT$3fmt17h43e6a048c6ad07fbE+0x24>
    80008304:	6542                	ld	a0,16(sp)
    80008306:	4589                	li	a1,2
    80008308:	06b50a63          	beq	a0,a1,8000837c <.LBB2_16+0x28>
    8000830c:	a009                	j	8000830e <_ZN66_$LT$kernel..fs..dinode..InodeType$u20$as$u20$core..fmt..Debug$GT$3fmt17h43e6a048c6ad07fbE+0x2e>
    8000830e:	65a2                	ld	a1,8(sp)

0000000080008310 <.LBB2_14>:
    80008310:	0001f617          	auipc	a2,0x1f
    80008314:	08860613          	addi	a2,a2,136 # 80027398 <.L__unnamed_2>
    80008318:	1888                	addi	a0,sp,112
    8000831a:	4699                	li	a3,6
    8000831c:	0001b097          	auipc	ra,0x1b
    80008320:	ed8080e7          	jalr	-296(ra) # 800231f4 <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    80008324:	a049                	j	800083a6 <.LBB2_17+0x28>
    80008326:	0000                	unimp
    80008328:	65a2                	ld	a1,8(sp)

000000008000832a <.LBB2_15>:
    8000832a:	0001f617          	auipc	a2,0x1f
    8000832e:	07d60613          	addi	a2,a2,125 # 800273a7 <.L__unnamed_3>
    80008332:	1028                	addi	a0,sp,40
    80008334:	4695                	li	a3,5
    80008336:	0001b097          	auipc	ra,0x1b
    8000833a:	ebe080e7          	jalr	-322(ra) # 800231f4 <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    8000833e:	a009                	j	80008340 <.LBB2_15+0x16>
    80008340:	1028                	addi	a0,sp,40
    80008342:	f92a                	sd	a0,176(sp)
    80008344:	0001a097          	auipc	ra,0x1a
    80008348:	508080e7          	jalr	1288(ra) # 8002284c <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    8000834c:	00a10fa3          	sb	a0,31(sp)
    80008350:	a0a5                	j	800083b8 <.LBB2_17+0x3a>
    80008352:	65a2                	ld	a1,8(sp)

0000000080008354 <.LBB2_16>:
    80008354:	0001f617          	auipc	a2,0x1f
    80008358:	04a60613          	addi	a2,a2,74 # 8002739e <.L__unnamed_4>
    8000835c:	0088                	addi	a0,sp,64
    8000835e:	46a5                	li	a3,9
    80008360:	0001b097          	auipc	ra,0x1b
    80008364:	e94080e7          	jalr	-364(ra) # 800231f4 <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    80008368:	a009                	j	8000836a <.LBB2_16+0x16>
    8000836a:	0088                	addi	a0,sp,64
    8000836c:	f52a                	sd	a0,168(sp)
    8000836e:	0001a097          	auipc	ra,0x1a
    80008372:	4de080e7          	jalr	1246(ra) # 8002284c <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    80008376:	00a10fa3          	sb	a0,31(sp)
    8000837a:	a83d                	j	800083b8 <.LBB2_17+0x3a>
    8000837c:	65a2                	ld	a1,8(sp)

000000008000837e <.LBB2_17>:
    8000837e:	0001e617          	auipc	a2,0x1e
    80008382:	39660613          	addi	a2,a2,918 # 80026714 <.LJTI3_0+0x74>
    80008386:	08a8                	addi	a0,sp,88
    80008388:	4691                	li	a3,4
    8000838a:	0001b097          	auipc	ra,0x1b
    8000838e:	e6a080e7          	jalr	-406(ra) # 800231f4 <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    80008392:	a009                	j	80008394 <.LBB2_17+0x16>
    80008394:	08a8                	addi	a0,sp,88
    80008396:	f12a                	sd	a0,160(sp)
    80008398:	0001a097          	auipc	ra,0x1a
    8000839c:	4b4080e7          	jalr	1204(ra) # 8002284c <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    800083a0:	00a10fa3          	sb	a0,31(sp)
    800083a4:	a811                	j	800083b8 <.LBB2_17+0x3a>
    800083a6:	1888                	addi	a0,sp,112
    800083a8:	ed2a                	sd	a0,152(sp)
    800083aa:	0001a097          	auipc	ra,0x1a
    800083ae:	4a2080e7          	jalr	1186(ra) # 8002284c <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    800083b2:	00a10fa3          	sb	a0,31(sp)
    800083b6:	a009                	j	800083b8 <.LBB2_17+0x3a>
    800083b8:	01f14503          	lbu	a0,31(sp)
    800083bc:	70ea                	ld	ra,184(sp)
    800083be:	6129                	addi	sp,sp,192
    800083c0:	8082                	ret

Disassembly of section .text._ZN70_$LT$kernel..fs..dinode..InodeType$u20$as$u20$core..cmp..PartialEq$GT$2eq17ha4431a2c7299d33fE:

00000000800083c2 <_ZN70_$LT$kernel..fs..dinode..InodeType$u20$as$u20$core..cmp..PartialEq$GT$2eq17ha4431a2c7299d33fE>:
    800083c2:	1101                	addi	sp,sp,-32
    800083c4:	e42a                	sd	a0,8(sp)
    800083c6:	e82e                	sd	a1,16(sp)
    800083c8:	00055503          	lhu	a0,0(a0)
    800083cc:	00a11e23          	sh	a0,28(sp)
    800083d0:	0005d583          	lhu	a1,0(a1)
    800083d4:	00b11f23          	sh	a1,30(sp)
    800083d8:	00b51763          	bne	a0,a1,800083e6 <_ZN70_$LT$kernel..fs..dinode..InodeType$u20$as$u20$core..cmp..PartialEq$GT$2eq17ha4431a2c7299d33fE+0x24>
    800083dc:	a009                	j	800083de <_ZN70_$LT$kernel..fs..dinode..InodeType$u20$as$u20$core..cmp..PartialEq$GT$2eq17ha4431a2c7299d33fE+0x1c>
    800083de:	4505                	li	a0,1
    800083e0:	00a103a3          	sb	a0,7(sp)
    800083e4:	a029                	j	800083ee <_ZN70_$LT$kernel..fs..dinode..InodeType$u20$as$u20$core..cmp..PartialEq$GT$2eq17ha4431a2c7299d33fE+0x2c>
    800083e6:	4501                	li	a0,0
    800083e8:	00a103a3          	sb	a0,7(sp)
    800083ec:	a009                	j	800083ee <_ZN70_$LT$kernel..fs..dinode..InodeType$u20$as$u20$core..cmp..PartialEq$GT$2eq17ha4431a2c7299d33fE+0x2c>
    800083ee:	00714503          	lbu	a0,7(sp)
    800083f2:	8905                	andi	a0,a0,1
    800083f4:	4581                	li	a1,0
    800083f6:	00b50763          	beq	a0,a1,80008404 <_ZN70_$LT$kernel..fs..dinode..InodeType$u20$as$u20$core..cmp..PartialEq$GT$2eq17ha4431a2c7299d33fE+0x42>
    800083fa:	a009                	j	800083fc <_ZN70_$LT$kernel..fs..dinode..InodeType$u20$as$u20$core..cmp..PartialEq$GT$2eq17ha4431a2c7299d33fE+0x3a>
    800083fc:	4505                	li	a0,1
    800083fe:	00a10323          	sb	a0,6(sp)
    80008402:	a029                	j	8000840c <_ZN70_$LT$kernel..fs..dinode..InodeType$u20$as$u20$core..cmp..PartialEq$GT$2eq17ha4431a2c7299d33fE+0x4a>
    80008404:	4501                	li	a0,0
    80008406:	00a10323          	sb	a0,6(sp)
    8000840a:	a009                	j	8000840c <_ZN70_$LT$kernel..fs..dinode..InodeType$u20$as$u20$core..cmp..PartialEq$GT$2eq17ha4431a2c7299d33fE+0x4a>
    8000840c:	00614503          	lbu	a0,6(sp)
    80008410:	6105                	addi	sp,sp,32
    80008412:	8082                	ret

Disassembly of section .text._ZN4core5alloc6layout10size_align17h358c0d001efe79fbE:

0000000080008414 <_ZN4core5alloc6layout10size_align17h358c0d001efe79fbE>:
// could be inlined, the previous attempts to do so made rustc
// slower:
//
// * https://github.com/rust-lang/rust/pull/72189
// * https://github.com/rust-lang/rust/pull/79827
const fn size_align<T>() -> (usize, usize) {
    80008414:	1101                	addi	sp,sp,-32
    (mem::size_of::<T>(), mem::align_of::<T>())
    80008416:	a009                	j	80008418 <_ZN4core5alloc6layout10size_align17h358c0d001efe79fbE+0x4>
    80008418:	6505                	lui	a0,0x1
    8000841a:	e02a                	sd	a0,0(sp)
    8000841c:	ec2a                	sd	a0,24(sp)
    8000841e:	a009                	j	80008420 <_ZN4core5alloc6layout10size_align17h358c0d001efe79fbE+0xc>
    80008420:	6582                	ld	a1,0(sp)
    80008422:	6511                	lui	a0,0x4
    80008424:	e42a                	sd	a0,8(sp)
    80008426:	e82e                	sd	a1,16(sp)
}
    80008428:	6105                	addi	sp,sp,32
    8000842a:	8082                	ret

Disassembly of section .text._ZN4core5alloc6layout10size_align17h455ca6349ebf1183E:

000000008000842c <_ZN4core5alloc6layout10size_align17h455ca6349ebf1183E>:
const fn size_align<T>() -> (usize, usize) {
    8000842c:	1101                	addi	sp,sp,-32
    (mem::size_of::<T>(), mem::align_of::<T>())
    8000842e:	a009                	j	80008430 <_ZN4core5alloc6layout10size_align17h455ca6349ebf1183E+0x4>
    80008430:	4505                	li	a0,1
    80008432:	e02a                	sd	a0,0(sp)
    80008434:	ec2a                	sd	a0,24(sp)
    80008436:	a009                	j	80008438 <_ZN4core5alloc6layout10size_align17h455ca6349ebf1183E+0xc>
    80008438:	6582                	ld	a1,0(sp)
    8000843a:	4505                	li	a0,1
    8000843c:	e42a                	sd	a0,8(sp)
    8000843e:	e82e                	sd	a1,16(sp)
}
    80008440:	6105                	addi	sp,sp,32
    80008442:	8082                	ret

Disassembly of section .text._ZN4core5alloc6layout10size_align17h799b388dcefa2425E:

0000000080008444 <_ZN4core5alloc6layout10size_align17h799b388dcefa2425E>:
const fn size_align<T>() -> (usize, usize) {
    80008444:	1101                	addi	sp,sp,-32
    (mem::size_of::<T>(), mem::align_of::<T>())
    80008446:	a009                	j	80008448 <_ZN4core5alloc6layout10size_align17h799b388dcefa2425E+0x4>
    80008448:	4521                	li	a0,8
    8000844a:	e02a                	sd	a0,0(sp)
    8000844c:	ec2a                	sd	a0,24(sp)
    8000844e:	a009                	j	80008450 <_ZN4core5alloc6layout10size_align17h799b388dcefa2425E+0xc>
    80008450:	6582                	ld	a1,0(sp)
    80008452:	04000513          	li	a0,64
    80008456:	e42a                	sd	a0,8(sp)
    80008458:	e82e                	sd	a1,16(sp)
}
    8000845a:	6105                	addi	sp,sp,32
    8000845c:	8082                	ret

Disassembly of section .text._ZN4core5alloc6layout10size_align17h813b5ff13136f8feE:

000000008000845e <_ZN4core5alloc6layout10size_align17h813b5ff13136f8feE>:
const fn size_align<T>() -> (usize, usize) {
    8000845e:	1101                	addi	sp,sp,-32
    (mem::size_of::<T>(), mem::align_of::<T>())
    80008460:	a009                	j	80008462 <_ZN4core5alloc6layout10size_align17h813b5ff13136f8feE+0x4>
    80008462:	4521                	li	a0,8
    80008464:	e02a                	sd	a0,0(sp)
    80008466:	ec2a                	sd	a0,24(sp)
    80008468:	a009                	j	8000846a <_ZN4core5alloc6layout10size_align17h813b5ff13136f8feE+0xc>
    8000846a:	6582                	ld	a1,0(sp)
    8000846c:	03800513          	li	a0,56
    80008470:	e42a                	sd	a0,8(sp)
    80008472:	e82e                	sd	a1,16(sp)
}
    80008474:	6105                	addi	sp,sp,32
    80008476:	8082                	ret

Disassembly of section .text._ZN4core5alloc6layout10size_align17ha6efdca072762e51E:

0000000080008478 <_ZN4core5alloc6layout10size_align17ha6efdca072762e51E>:
const fn size_align<T>() -> (usize, usize) {
    80008478:	1101                	addi	sp,sp,-32
    (mem::size_of::<T>(), mem::align_of::<T>())
    8000847a:	a009                	j	8000847c <_ZN4core5alloc6layout10size_align17ha6efdca072762e51E+0x4>
    8000847c:	6505                	lui	a0,0x1
    8000847e:	e02a                	sd	a0,0(sp)
    80008480:	ec2a                	sd	a0,24(sp)
    80008482:	a009                	j	80008484 <_ZN4core5alloc6layout10size_align17ha6efdca072762e51E+0xc>
    80008484:	6582                	ld	a1,0(sp)
    80008486:	6505                	lui	a0,0x1
    80008488:	e42a                	sd	a0,8(sp)
    8000848a:	e82e                	sd	a1,16(sp)
}
    8000848c:	6105                	addi	sp,sp,32
    8000848e:	8082                	ret

Disassembly of section .text._ZN4core5alloc6layout10size_align17hfd583a9e66514f54E:

0000000080008490 <_ZN4core5alloc6layout10size_align17hfd583a9e66514f54E>:
const fn size_align<T>() -> (usize, usize) {
    80008490:	1101                	addi	sp,sp,-32
    (mem::size_of::<T>(), mem::align_of::<T>())
    80008492:	a009                	j	80008494 <_ZN4core5alloc6layout10size_align17hfd583a9e66514f54E+0x4>
    80008494:	6505                	lui	a0,0x1
    80008496:	e02a                	sd	a0,0(sp)
    80008498:	ec2a                	sd	a0,24(sp)
    8000849a:	a009                	j	8000849c <_ZN4core5alloc6layout10size_align17hfd583a9e66514f54E+0xc>
    8000849c:	6582                	ld	a1,0(sp)
    8000849e:	6505                	lui	a0,0x1
    800084a0:	e42a                	sd	a0,8(sp)
    800084a2:	e82e                	sd	a1,16(sp)
}
    800084a4:	6105                	addi	sp,sp,32
    800084a6:	8082                	ret

Disassembly of section .text._ZN4core5alloc6layout6Layout13for_value_raw17h9ddd239d574f5362E:

00000000800084a8 <_ZN4core5alloc6layout6Layout13for_value_raw17h9ddd239d574f5362E>:
    ///     - otherwise, it is conservatively not allowed to call this function.
    ///
    /// [trait object]: ../../book/ch17-02-trait-objects.html
    /// [extern type]: ../../unstable-book/language-features/extern-types.html
    #[unstable(feature = "layout_for_ptr", issue = "69835")]
    pub unsafe fn for_value_raw<T: ?Sized>(t: *const T) -> Self {
    800084a8:	711d                	addi	sp,sp,-96
    800084aa:	ec86                	sd	ra,88(sp)
    800084ac:	f02a                	sd	a0,32(sp)
    800084ae:	e0aa                	sd	a0,64(sp)
        // SAFETY: we pass along the prerequisites of these functions to the caller
        let (size, align) = unsafe { (mem::size_of_val_raw(t), mem::align_of_val_raw(t)) };
    800084b0:	00015097          	auipc	ra,0x15
    800084b4:	b26080e7          	jalr	-1242(ra) # 8001cfd6 <_ZN4core3mem15size_of_val_raw17h1bfec9c80578f181E>
    800084b8:	f42a                	sd	a0,40(sp)
    800084ba:	a009                	j	800084bc <_ZN4core5alloc6layout6Layout13for_value_raw17h9ddd239d574f5362E+0x14>
    800084bc:	7502                	ld	a0,32(sp)
    800084be:	00015097          	auipc	ra,0x15
    800084c2:	b2c080e7          	jalr	-1236(ra) # 8001cfea <_ZN4core3mem16align_of_val_raw17hadcb67548ac99edfE>
    800084c6:	ec2a                	sd	a0,24(sp)
    800084c8:	a009                	j	800084ca <_ZN4core5alloc6layout6Layout13for_value_raw17h9ddd239d574f5362E+0x22>
    800084ca:	65e2                	ld	a1,24(sp)
    800084cc:	7522                	ld	a0,40(sp)
    800084ce:	f82a                	sd	a0,48(sp)
    800084d0:	fc2e                	sd	a1,56(sp)
    800084d2:	e4aa                	sd	a0,72(sp)
    800084d4:	e8ae                	sd	a1,80(sp)
        debug_assert!(Layout::from_size_align(size, align).is_ok());
        // SAFETY: see rationale in `new` for why this is using the unsafe variant
        unsafe { Layout::from_size_align_unchecked(size, align) }
    800084d6:	00016097          	auipc	ra,0x16
    800084da:	48e080e7          	jalr	1166(ra) # 8001e964 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h7d187b5349095d20E>
    800084de:	e42a                	sd	a0,8(sp)
    800084e0:	e82e                	sd	a1,16(sp)
    800084e2:	a009                	j	800084e4 <_ZN4core5alloc6layout6Layout13for_value_raw17h9ddd239d574f5362E+0x3c>
    }
    800084e4:	65c2                	ld	a1,16(sp)
    800084e6:	6522                	ld	a0,8(sp)
    800084e8:	60e6                	ld	ra,88(sp)
    800084ea:	6125                	addi	sp,sp,96
    800084ec:	8082                	ret

Disassembly of section .text._ZN4core5alloc6layout6Layout3new17h00440f750a953d15E:

00000000800084ee <_ZN4core5alloc6layout6Layout3new17h00440f750a953d15E>:
    pub const fn new<T>() -> Self {
    800084ee:	7139                	addi	sp,sp,-64
        let (size, align) = size_align::<T>();
    800084f0:	fc06                	sd	ra,56(sp)
    800084f2:	00000097          	auipc	ra,0x0
    800084f6:	f9e080e7          	jalr	-98(ra) # 80008490 <_ZN4core5alloc6layout10size_align17hfd583a9e66514f54E>
    800084fa:	ec2a                	sd	a0,24(sp)
    800084fc:	f02e                	sd	a1,32(sp)
    800084fe:	a009                	j	80008500 <_ZN4core5alloc6layout6Layout3new17h00440f750a953d15E+0x12>
    80008500:	7582                	ld	a1,32(sp)
    80008502:	6562                	ld	a0,24(sp)
    80008504:	f42a                	sd	a0,40(sp)
    80008506:	f82e                	sd	a1,48(sp)
        unsafe { Layout::from_size_align_unchecked(size, align) }
    80008508:	00016097          	auipc	ra,0x16
    8000850c:	45c080e7          	jalr	1116(ra) # 8001e964 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h7d187b5349095d20E>
    80008510:	e42a                	sd	a0,8(sp)
    80008512:	e82e                	sd	a1,16(sp)
    80008514:	a009                	j	80008516 <_ZN4core5alloc6layout6Layout3new17h00440f750a953d15E+0x28>
    }
    80008516:	65c2                	ld	a1,16(sp)
    80008518:	6522                	ld	a0,8(sp)
    8000851a:	70e2                	ld	ra,56(sp)
    8000851c:	6121                	addi	sp,sp,64
    8000851e:	8082                	ret

Disassembly of section .text._ZN4core5alloc6layout6Layout3new17h0cabd46b2af96281E:

0000000080008520 <_ZN4core5alloc6layout6Layout3new17h0cabd46b2af96281E>:
    pub const fn new<T>() -> Self {
    80008520:	7139                	addi	sp,sp,-64
        let (size, align) = size_align::<T>();
    80008522:	fc06                	sd	ra,56(sp)
    80008524:	00000097          	auipc	ra,0x0
    80008528:	ef0080e7          	jalr	-272(ra) # 80008414 <_ZN4core5alloc6layout10size_align17h358c0d001efe79fbE>
    8000852c:	ec2a                	sd	a0,24(sp)
    8000852e:	f02e                	sd	a1,32(sp)
    80008530:	a009                	j	80008532 <_ZN4core5alloc6layout6Layout3new17h0cabd46b2af96281E+0x12>
    80008532:	7582                	ld	a1,32(sp)
    80008534:	6562                	ld	a0,24(sp)
    80008536:	f42a                	sd	a0,40(sp)
    80008538:	f82e                	sd	a1,48(sp)
        unsafe { Layout::from_size_align_unchecked(size, align) }
    8000853a:	00016097          	auipc	ra,0x16
    8000853e:	42a080e7          	jalr	1066(ra) # 8001e964 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h7d187b5349095d20E>
    80008542:	e42a                	sd	a0,8(sp)
    80008544:	e82e                	sd	a1,16(sp)
    80008546:	a009                	j	80008548 <_ZN4core5alloc6layout6Layout3new17h0cabd46b2af96281E+0x28>
    }
    80008548:	65c2                	ld	a1,16(sp)
    8000854a:	6522                	ld	a0,8(sp)
    8000854c:	70e2                	ld	ra,56(sp)
    8000854e:	6121                	addi	sp,sp,64
    80008550:	8082                	ret

Disassembly of section .text._ZN4core5alloc6layout6Layout3new17h2e48cf004fc4e008E:

0000000080008552 <_ZN4core5alloc6layout6Layout3new17h2e48cf004fc4e008E>:
    pub const fn new<T>() -> Self {
    80008552:	7139                	addi	sp,sp,-64
        let (size, align) = size_align::<T>();
    80008554:	fc06                	sd	ra,56(sp)
    80008556:	00000097          	auipc	ra,0x0
    8000855a:	ed6080e7          	jalr	-298(ra) # 8000842c <_ZN4core5alloc6layout10size_align17h455ca6349ebf1183E>
    8000855e:	ec2a                	sd	a0,24(sp)
    80008560:	f02e                	sd	a1,32(sp)
    80008562:	a009                	j	80008564 <_ZN4core5alloc6layout6Layout3new17h2e48cf004fc4e008E+0x12>
    80008564:	7582                	ld	a1,32(sp)
    80008566:	6562                	ld	a0,24(sp)
    80008568:	f42a                	sd	a0,40(sp)
    8000856a:	f82e                	sd	a1,48(sp)
        unsafe { Layout::from_size_align_unchecked(size, align) }
    8000856c:	00016097          	auipc	ra,0x16
    80008570:	3f8080e7          	jalr	1016(ra) # 8001e964 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h7d187b5349095d20E>
    80008574:	e42a                	sd	a0,8(sp)
    80008576:	e82e                	sd	a1,16(sp)
    80008578:	a009                	j	8000857a <_ZN4core5alloc6layout6Layout3new17h2e48cf004fc4e008E+0x28>
    }
    8000857a:	65c2                	ld	a1,16(sp)
    8000857c:	6522                	ld	a0,8(sp)
    8000857e:	70e2                	ld	ra,56(sp)
    80008580:	6121                	addi	sp,sp,64
    80008582:	8082                	ret

Disassembly of section .text._ZN4core5alloc6layout6Layout3new17h728acb0ef5b915afE:

0000000080008584 <_ZN4core5alloc6layout6Layout3new17h728acb0ef5b915afE>:
    pub const fn new<T>() -> Self {
    80008584:	7139                	addi	sp,sp,-64
        let (size, align) = size_align::<T>();
    80008586:	fc06                	sd	ra,56(sp)
    80008588:	00000097          	auipc	ra,0x0
    8000858c:	ef0080e7          	jalr	-272(ra) # 80008478 <_ZN4core5alloc6layout10size_align17ha6efdca072762e51E>
    80008590:	ec2a                	sd	a0,24(sp)
    80008592:	f02e                	sd	a1,32(sp)
    80008594:	a009                	j	80008596 <_ZN4core5alloc6layout6Layout3new17h728acb0ef5b915afE+0x12>
    80008596:	7582                	ld	a1,32(sp)
    80008598:	6562                	ld	a0,24(sp)
    8000859a:	f42a                	sd	a0,40(sp)
    8000859c:	f82e                	sd	a1,48(sp)
        unsafe { Layout::from_size_align_unchecked(size, align) }
    8000859e:	00016097          	auipc	ra,0x16
    800085a2:	3c6080e7          	jalr	966(ra) # 8001e964 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h7d187b5349095d20E>
    800085a6:	e42a                	sd	a0,8(sp)
    800085a8:	e82e                	sd	a1,16(sp)
    800085aa:	a009                	j	800085ac <_ZN4core5alloc6layout6Layout3new17h728acb0ef5b915afE+0x28>
    }
    800085ac:	65c2                	ld	a1,16(sp)
    800085ae:	6522                	ld	a0,8(sp)
    800085b0:	70e2                	ld	ra,56(sp)
    800085b2:	6121                	addi	sp,sp,64
    800085b4:	8082                	ret

Disassembly of section .text._ZN4core5alloc6layout6Layout3new17h9329aa50601ba1ffE:

00000000800085b6 <_ZN4core5alloc6layout6Layout3new17h9329aa50601ba1ffE>:
    pub const fn new<T>() -> Self {
    800085b6:	7139                	addi	sp,sp,-64
        let (size, align) = size_align::<T>();
    800085b8:	fc06                	sd	ra,56(sp)
    800085ba:	00000097          	auipc	ra,0x0
    800085be:	ea4080e7          	jalr	-348(ra) # 8000845e <_ZN4core5alloc6layout10size_align17h813b5ff13136f8feE>
    800085c2:	ec2a                	sd	a0,24(sp)
    800085c4:	f02e                	sd	a1,32(sp)
    800085c6:	a009                	j	800085c8 <_ZN4core5alloc6layout6Layout3new17h9329aa50601ba1ffE+0x12>
    800085c8:	7582                	ld	a1,32(sp)
    800085ca:	6562                	ld	a0,24(sp)
    800085cc:	f42a                	sd	a0,40(sp)
    800085ce:	f82e                	sd	a1,48(sp)
        unsafe { Layout::from_size_align_unchecked(size, align) }
    800085d0:	00016097          	auipc	ra,0x16
    800085d4:	394080e7          	jalr	916(ra) # 8001e964 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h7d187b5349095d20E>
    800085d8:	e42a                	sd	a0,8(sp)
    800085da:	e82e                	sd	a1,16(sp)
    800085dc:	a009                	j	800085de <_ZN4core5alloc6layout6Layout3new17h9329aa50601ba1ffE+0x28>
    }
    800085de:	65c2                	ld	a1,16(sp)
    800085e0:	6522                	ld	a0,8(sp)
    800085e2:	70e2                	ld	ra,56(sp)
    800085e4:	6121                	addi	sp,sp,64
    800085e6:	8082                	ret

Disassembly of section .text._ZN4core5alloc6layout6Layout3new17hfb4102c77959cfa1E:

00000000800085e8 <_ZN4core5alloc6layout6Layout3new17hfb4102c77959cfa1E>:
    pub const fn new<T>() -> Self {
    800085e8:	7139                	addi	sp,sp,-64
        let (size, align) = size_align::<T>();
    800085ea:	fc06                	sd	ra,56(sp)
    800085ec:	00000097          	auipc	ra,0x0
    800085f0:	e58080e7          	jalr	-424(ra) # 80008444 <_ZN4core5alloc6layout10size_align17h799b388dcefa2425E>
    800085f4:	ec2a                	sd	a0,24(sp)
    800085f6:	f02e                	sd	a1,32(sp)
    800085f8:	a009                	j	800085fa <_ZN4core5alloc6layout6Layout3new17hfb4102c77959cfa1E+0x12>
    800085fa:	7582                	ld	a1,32(sp)
    800085fc:	6562                	ld	a0,24(sp)
    800085fe:	f42a                	sd	a0,40(sp)
    80008600:	f82e                	sd	a1,48(sp)
        unsafe { Layout::from_size_align_unchecked(size, align) }
    80008602:	00016097          	auipc	ra,0x16
    80008606:	362080e7          	jalr	866(ra) # 8001e964 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h7d187b5349095d20E>
    8000860a:	e42a                	sd	a0,8(sp)
    8000860c:	e82e                	sd	a1,16(sp)
    8000860e:	a009                	j	80008610 <_ZN4core5alloc6layout6Layout3new17hfb4102c77959cfa1E+0x28>
    }
    80008610:	65c2                	ld	a1,16(sp)
    80008612:	6522                	ld	a0,8(sp)
    80008614:	70e2                	ld	ra,56(sp)
    80008616:	6121                	addi	sp,sp,64
    80008618:	8082                	ret

Disassembly of section .text._ZN4core5alloc6layout6Layout5array17h33220460c7f786e0E:

000000008000861a <_ZN4core5alloc6layout6Layout5array17h33220460c7f786e0E>:
    /// Creates a layout describing the record for a `[T; n]`.
    ///
    /// On arithmetic overflow, returns `LayoutError`.
    #[stable(feature = "alloc_layout_manipulation", since = "1.44.0")]
    #[inline]
    pub fn array<T>(n: usize) -> Result<Self, LayoutError> {
    8000861a:	7155                	addi	sp,sp,-208
    8000861c:	e586                	sd	ra,200(sp)
    8000861e:	ec2a                	sd	a0,24(sp)
    80008620:	f92a                	sd	a0,176(sp)
        let (layout, offset) = Layout::new::<T>().repeat(n)?;
    80008622:	00000097          	auipc	ra,0x0
    80008626:	f30080e7          	jalr	-208(ra) # 80008552 <_ZN4core5alloc6layout6Layout3new17h2e48cf004fc4e008E>
    8000862a:	e52a                	sd	a0,136(sp)
    8000862c:	e92e                	sd	a1,144(sp)
    8000862e:	a009                	j	80008630 <_ZN4core5alloc6layout6Layout5array17h33220460c7f786e0E+0x16>
    80008630:	6662                	ld	a2,24(sp)
    80008632:	1888                	addi	a0,sp,112
    80008634:	012c                	addi	a1,sp,136
    80008636:	00016097          	auipc	ra,0x16
    8000863a:	37e080e7          	jalr	894(ra) # 8001e9b4 <_ZN4core5alloc6layout6Layout6repeat17he5367bbab955aefbE>
    8000863e:	a009                	j	80008640 <_ZN4core5alloc6layout6Layout5array17h33220460c7f786e0E+0x26>
    80008640:	08a8                	addi	a0,sp,88
    80008642:	188c                	addi	a1,sp,112
    80008644:	00005097          	auipc	ra,0x5
    80008648:	c18080e7          	jalr	-1000(ra) # 8000d25c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17heda032b26dd469a1E>
    8000864c:	a009                	j	8000864e <_ZN4core5alloc6layout6Layout5array17h33220460c7f786e0E+0x34>
    8000864e:	7506                	ld	a0,96(sp)
    80008650:	00153593          	seqz	a1,a0
    80008654:	4581                	li	a1,0
    80008656:	00b51463          	bne	a0,a1,8000865e <_ZN4core5alloc6layout6Layout5array17h33220460c7f786e0E+0x44>
    8000865a:	a009                	j	8000865c <_ZN4core5alloc6layout6Layout5array17h33220460c7f786e0E+0x42>
    8000865c:	a035                	j	80008688 <_ZN4core5alloc6layout6Layout5array17h33220460c7f786e0E+0x6e>
    8000865e:	7526                	ld	a0,104(sp)
    80008660:	f52a                	sd	a0,168(sp)
    80008662:	7586                	ld	a1,96(sp)
    80008664:	f12e                	sd	a1,160(sp)
    80008666:	6666                	ld	a2,88(sp)
    80008668:	ed32                	sd	a2,152(sp)
    8000866a:	e0b2                	sd	a2,64(sp)
    8000866c:	e4ae                	sd	a1,72(sp)
    8000866e:	e8aa                	sd	a0,80(sp)
    80008670:	f832                	sd	a2,48(sp)
    80008672:	fc2e                	sd	a1,56(sp)
    80008674:	e1aa                	sd	a0,192(sp)
    80008676:	1808                	addi	a0,sp,48
        debug_assert_eq!(offset, mem::size_of::<T>());
        Ok(layout.pad_to_align())
    80008678:	00016097          	auipc	ra,0x16
    8000867c:	19a080e7          	jalr	410(ra) # 8001e812 <_ZN4core5alloc6layout6Layout12pad_to_align17hf134c92d73cc7687E>
    80008680:	e42a                	sd	a0,8(sp)
    80008682:	e82e                	sd	a1,16(sp)
    80008684:	a839                	j	800086a2 <_ZN4core5alloc6layout6Layout5array17h33220460c7f786e0E+0x88>
        let (layout, offset) = Layout::new::<T>().repeat(n)?;
    80008686:	0000                	unimp
    80008688:	00000097          	auipc	ra,0x0
    8000868c:	02e080e7          	jalr	46(ra) # 800086b6 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h2a9aee2c044310b7E>
    80008690:	a009                	j	80008692 <_ZN4core5alloc6layout6Layout5array17h33220460c7f786e0E+0x78>
    80008692:	00005097          	auipc	ra,0x5
    80008696:	a32080e7          	jalr	-1486(ra) # 8000d0c4 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h5591b1c718d6dce1E>
    8000869a:	f02a                	sd	a0,32(sp)
    8000869c:	f42e                	sd	a1,40(sp)
    8000869e:	a009                	j	800086a0 <_ZN4core5alloc6layout6Layout5array17h33220460c7f786e0E+0x86>
    }
    800086a0:	a031                	j	800086ac <_ZN4core5alloc6layout6Layout5array17h33220460c7f786e0E+0x92>
        Ok(layout.pad_to_align())
    800086a2:	6542                	ld	a0,16(sp)
    800086a4:	65a2                	ld	a1,8(sp)
    800086a6:	f02e                	sd	a1,32(sp)
    800086a8:	f42a                	sd	a0,40(sp)
    }
    800086aa:	a009                	j	800086ac <_ZN4core5alloc6layout6Layout5array17h33220460c7f786e0E+0x92>
    800086ac:	7502                	ld	a0,32(sp)
    800086ae:	75a2                	ld	a1,40(sp)
    800086b0:	60ae                	ld	ra,200(sp)
    800086b2:	6169                	addi	sp,sp,208
    800086b4:	8082                	ret

Disassembly of section .text._ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h2a9aee2c044310b7E:

00000000800086b6 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h2a9aee2c044310b7E>:
}

// From (and thus Into) is reflexive
#[stable(feature = "rust1", since = "1.0.0")]
impl<T> From<T> for T {
    fn from(t: T) -> T {
    800086b6:	1141                	addi	sp,sp,-16
        t
    }
    800086b8:	0141                	addi	sp,sp,16
    800086ba:	8082                	ret

Disassembly of section .text._ZN6kernel6memory7mapping16page_table_entry8PteFlags3new17h46b0ea84c5bd5a31E:

00000000800086bc <_ZN6kernel6memory7mapping16page_table_entry8PteFlags3new17h46b0ea84c5bd5a31E>:
    }

}

impl PteFlags {
    pub fn new(x: usize) -> Self {
    800086bc:	1141                	addi	sp,sp,-16
    800086be:	e42a                	sd	a0,8(sp)
        Self{
    800086c0:	e02a                	sd	a0,0(sp)
            bits: x
        }
    }
    800086c2:	0141                	addi	sp,sp,16
    800086c4:	8082                	ret

Disassembly of section .text._ZN6kernel6memory7mapping16page_table_entry14PageTableEntry8as_usize17h85d0d27e00f735b4E:

00000000800086c6 <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry8as_usize17h85d0d27e00f735b4E>:
        let addr = self.as_usize() as *mut u8;
        addr
    }

    #[inline]
    pub fn as_usize(&self) -> usize{
    800086c6:	1141                	addi	sp,sp,-16
    800086c8:	e42a                	sd	a0,8(sp)
        self.0
    800086ca:	6108                	ld	a0,0(a0)
    }
    800086cc:	0141                	addi	sp,sp,16
    800086ce:	8082                	ret

Disassembly of section .text._ZN6kernel6memory7mapping16page_table_entry14PageTableEntry8is_valid17h2b3a673d14ed09c6E:

00000000800086d0 <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry8is_valid17h2b3a673d14ed09c6E>:

    #[inline]
    pub fn is_valid(&self) -> bool{
    800086d0:	1101                	addi	sp,sp,-32
    800086d2:	ec06                	sd	ra,24(sp)
    800086d4:	e82a                	sd	a0,16(sp)
        (self.0 & (PteFlags::V.bits())) > 0
    800086d6:	6108                	ld	a0,0(a0)
    800086d8:	e02a                	sd	a0,0(sp)

00000000800086da <.LBB2_2>:
    800086da:	0001e517          	auipc	a0,0x1e
    800086de:	16e50513          	addi	a0,a0,366 # 80026848 <.L__unnamed_6+0xa0>
    800086e2:	00000097          	auipc	ra,0x0
    800086e6:	164080e7          	jalr	356(ra) # 80008846 <_ZN6kernel6memory7mapping16page_table_entry8PteFlags4bits17hec41972a30d9c1c3E>
    800086ea:	e42a                	sd	a0,8(sp)
    800086ec:	a009                	j	800086ee <.LBB2_2+0x14>
    800086ee:	6502                	ld	a0,0(sp)
    800086f0:	65a2                	ld	a1,8(sp)
    800086f2:	8d6d                	and	a0,a0,a1
    800086f4:	00a03533          	snez	a0,a0
    }
    800086f8:	60e2                	ld	ra,24(sp)
    800086fa:	6105                	addi	sp,sp,32
    800086fc:	8082                	ret

Disassembly of section .text._ZN6kernel6memory7mapping16page_table_entry14PageTableEntry7is_user17ha81b2d62b11ea775E:

00000000800086fe <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry7is_user17ha81b2d62b11ea775E>:

    #[inline]
    pub fn is_user(&self) -> bool {
    800086fe:	1101                	addi	sp,sp,-32
    80008700:	ec06                	sd	ra,24(sp)
    80008702:	e82a                	sd	a0,16(sp)
        (self.0 & (PteFlags::V.bits())) > 0
    80008704:	6108                	ld	a0,0(a0)
    80008706:	e02a                	sd	a0,0(sp)

0000000080008708 <.LBB3_2>:
    80008708:	0001e517          	auipc	a0,0x1e
    8000870c:	14050513          	addi	a0,a0,320 # 80026848 <.L__unnamed_6+0xa0>
    80008710:	00000097          	auipc	ra,0x0
    80008714:	136080e7          	jalr	310(ra) # 80008846 <_ZN6kernel6memory7mapping16page_table_entry8PteFlags4bits17hec41972a30d9c1c3E>
    80008718:	e42a                	sd	a0,8(sp)
    8000871a:	a009                	j	8000871c <.LBB3_2+0x14>
    8000871c:	6502                	ld	a0,0(sp)
    8000871e:	65a2                	ld	a1,8(sp)
    80008720:	8d6d                	and	a0,a0,a1
    80008722:	00a03533          	snez	a0,a0
    }
    80008726:	60e2                	ld	ra,24(sp)
    80008728:	6105                	addi	sp,sp,32
    8000872a:	8082                	ret

Disassembly of section .text._ZN6kernel6memory7mapping16page_table_entry14PageTableEntry7is_leaf17h30d4b7c99c6d4286E:

000000008000872c <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry7is_leaf17h30d4b7c99c6d4286E>:
    pub fn is_execute(&self) -> bool {
        (self.0 & (PteFlags::X.bits())) > 0
    }

    #[inline]
    pub fn is_leaf(&self) -> bool {
    8000872c:	7139                	addi	sp,sp,-64
    8000872e:	fc06                	sd	ra,56(sp)
    80008730:	f42a                	sd	a0,40(sp)
        let flag_bits = self.0 & (PteFlags::R | PteFlags::W | PteFlags::X).bits();
    80008732:	6108                	ld	a0,0(a0)
    80008734:	e82a                	sd	a0,16(sp)
    80008736:	4509                	li	a0,2
    80008738:	4591                	li	a1,4
    8000873a:	00000097          	auipc	ra,0x0
    8000873e:	116080e7          	jalr	278(ra) # 80008850 <_ZN93_$LT$kernel..memory..mapping..page_table_entry..PteFlags$u20$as$u20$core..ops..bit..BitOr$GT$5bitor17h95bfa721b377cbd2E>
    80008742:	ec2a                	sd	a0,24(sp)
    80008744:	a009                	j	80008746 <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry7is_leaf17h30d4b7c99c6d4286E+0x1a>
    80008746:	6562                	ld	a0,24(sp)
    80008748:	45a1                	li	a1,8
    8000874a:	00000097          	auipc	ra,0x0
    8000874e:	106080e7          	jalr	262(ra) # 80008850 <_ZN93_$LT$kernel..memory..mapping..page_table_entry..PteFlags$u20$as$u20$core..ops..bit..BitOr$GT$5bitor17h95bfa721b377cbd2E>
    80008752:	f02a                	sd	a0,32(sp)
    80008754:	a009                	j	80008756 <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry7is_leaf17h30d4b7c99c6d4286E+0x2a>
    80008756:	1008                	addi	a0,sp,32
    80008758:	00000097          	auipc	ra,0x0
    8000875c:	0ee080e7          	jalr	238(ra) # 80008846 <_ZN6kernel6memory7mapping16page_table_entry8PteFlags4bits17hec41972a30d9c1c3E>
    80008760:	e42a                	sd	a0,8(sp)
    80008762:	a009                	j	80008764 <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry7is_leaf17h30d4b7c99c6d4286E+0x38>
    80008764:	6542                	ld	a0,16(sp)
    80008766:	65a2                	ld	a1,8(sp)
    80008768:	8d6d                	and	a0,a0,a1
    8000876a:	f82a                	sd	a0,48(sp)
        !(flag_bits == 0)
    8000876c:	00a03533          	snez	a0,a0
    }
    80008770:	70e2                	ld	ra,56(sp)
    80008772:	6121                	addi	sp,sp,64
    80008774:	8082                	ret

Disassembly of section .text._ZN6kernel6memory7mapping16page_table_entry14PageTableEntry11rm_user_bit17hf6078e39c3f185baE:

0000000080008776 <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry11rm_user_bit17hf6078e39c3f185baE>:
        let pte = self.as_usize() | (PteFlags::U.bits());
        Self(pte)
    }

    #[inline]
    pub fn rm_user_bit(&mut self) {
    80008776:	1101                	addi	sp,sp,-32
    80008778:	ec06                	sd	ra,24(sp)
    8000877a:	e02a                	sd	a0,0(sp)
    8000877c:	e82a                	sd	a0,16(sp)

000000008000877e <.LBB5_2>:
        self.0 &= !(PteFlags::U.bits());
    8000877e:	0001e517          	auipc	a0,0x1e
    80008782:	0fa50513          	addi	a0,a0,250 # 80026878 <.L__unnamed_6+0xd0>
    80008786:	00000097          	auipc	ra,0x0
    8000878a:	0c0080e7          	jalr	192(ra) # 80008846 <_ZN6kernel6memory7mapping16page_table_entry8PteFlags4bits17hec41972a30d9c1c3E>
    8000878e:	e42a                	sd	a0,8(sp)
    80008790:	a009                	j	80008792 <.LBB5_2+0x14>
    80008792:	6582                	ld	a1,0(sp)
    80008794:	6522                	ld	a0,8(sp)
    80008796:	fff54613          	not	a2,a0
    8000879a:	6188                	ld	a0,0(a1)
    8000879c:	8d71                	and	a0,a0,a2
    8000879e:	e188                	sd	a0,0(a1)
    }
    800087a0:	60e2                	ld	ra,24(sp)
    800087a2:	6105                	addi	sp,sp,32
    800087a4:	8082                	ret

Disassembly of section .text._ZN6kernel6memory7mapping16page_table_entry14PageTableEntry12as_pagetable17h89cf44fefbbd4b4eE:

00000000800087a6 <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry12as_pagetable17h89cf44fefbbd4b4eE>:

    // implement PTE2PA
    #[inline]
    pub fn as_pagetable(&self) -> *mut PageTable{
    800087a6:	1101                	addi	sp,sp,-32
    800087a8:	e82a                	sd	a0,16(sp)
        let ret = ((self.0 >> 10) << 12) as *mut PageTable;
    800087aa:	6108                	ld	a0,0(a0)
    800087ac:	8129                	srli	a0,a0,0xa
    800087ae:	e42a                	sd	a0,8(sp)
    800087b0:	a009                	j	800087b2 <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry12as_pagetable17h89cf44fefbbd4b4eE+0xc>
    800087b2:	6522                	ld	a0,8(sp)
    800087b4:	0532                	slli	a0,a0,0xc
    800087b6:	e02a                	sd	a0,0(sp)
    800087b8:	a009                	j	800087ba <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry12as_pagetable17h89cf44fefbbd4b4eE+0x14>
    800087ba:	6502                	ld	a0,0(sp)
    800087bc:	ec2a                	sd	a0,24(sp)
        ret
    }
    800087be:	6105                	addi	sp,sp,32
    800087c0:	8082                	ret

Disassembly of section .text._ZN6kernel6memory7mapping16page_table_entry14PageTableEntry8as_flags17hf18e3bbee6201d61E:

00000000800087c2 <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry8as_flags17hf18e3bbee6201d61E>:
        Self((addr >> 12) << 10)
    }

    // implement PTE_FLAGES
    #[inline]
    pub fn as_flags(&self) -> usize {
    800087c2:	1101                	addi	sp,sp,-32
    800087c4:	ec06                	sd	ra,24(sp)
    800087c6:	e82a                	sd	a0,16(sp)
        self.as_usize() & 0x3FF
    800087c8:	00000097          	auipc	ra,0x0
    800087cc:	efe080e7          	jalr	-258(ra) # 800086c6 <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry8as_usize17h85d0d27e00f735b4E>
    800087d0:	e42a                	sd	a0,8(sp)
    800087d2:	a009                	j	800087d4 <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry8as_flags17hf18e3bbee6201d61E+0x12>
    800087d4:	6522                	ld	a0,8(sp)
    800087d6:	3ff57513          	andi	a0,a0,1023
    }
    800087da:	60e2                	ld	ra,24(sp)
    800087dc:	6105                	addi	sp,sp,32
    800087de:	8082                	ret

Disassembly of section .text._ZN6kernel6memory7mapping16page_table_entry14PageTableEntry10write_perm17h2feb85df16db2682E:

00000000800087e0 <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry10write_perm17h2feb85df16db2682E>:
    pub fn write_zero(&mut self){
        self.0 = 0;
    }

    #[inline]
    pub fn write_perm(&mut self, pa:PhysicalAddress, perm: PteFlags){
    800087e0:	711d                	addi	sp,sp,-96
    800087e2:	ec86                	sd	ra,88(sp)
    800087e4:	f032                	sd	a2,32(sp)
    800087e6:	f42a                	sd	a0,40(sp)
    800087e8:	fc2e                	sd	a1,56(sp)
    800087ea:	e4aa                	sd	a0,72(sp)
    800087ec:	e8b2                	sd	a2,80(sp)
    800087ee:	1828                	addi	a0,sp,56
        self.0 = ((pa.as_usize() >> 12) << 10) | (perm | PteFlags::V).bits()
    800087f0:	00009097          	auipc	ra,0x9
    800087f4:	05e080e7          	jalr	94(ra) # 8001184e <_ZN90_$LT$kernel..memory..address..PhysicalAddress$u20$as$u20$kernel..memory..address..Addr$GT$8as_usize17hea2eecdb80a1a2b2E>
    800087f8:	f82a                	sd	a0,48(sp)
    800087fa:	a009                	j	800087fc <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry10write_perm17h2feb85df16db2682E+0x1c>
    800087fc:	7542                	ld	a0,48(sp)
    800087fe:	8131                	srli	a0,a0,0xc
    80008800:	ec2a                	sd	a0,24(sp)
    80008802:	a009                	j	80008804 <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry10write_perm17h2feb85df16db2682E+0x24>
    80008804:	6562                	ld	a0,24(sp)
    80008806:	052a                	slli	a0,a0,0xa
    80008808:	e82a                	sd	a0,16(sp)
    8000880a:	a009                	j	8000880c <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry10write_perm17h2feb85df16db2682E+0x2c>
    8000880c:	7502                	ld	a0,32(sp)
    8000880e:	4585                	li	a1,1
    80008810:	00000097          	auipc	ra,0x0
    80008814:	040080e7          	jalr	64(ra) # 80008850 <_ZN93_$LT$kernel..memory..mapping..page_table_entry..PteFlags$u20$as$u20$core..ops..bit..BitOr$GT$5bitor17h95bfa721b377cbd2E>
    80008818:	e0aa                	sd	a0,64(sp)
    8000881a:	a009                	j	8000881c <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry10write_perm17h2feb85df16db2682E+0x3c>
    8000881c:	0088                	addi	a0,sp,64
    8000881e:	00000097          	auipc	ra,0x0
    80008822:	028080e7          	jalr	40(ra) # 80008846 <_ZN6kernel6memory7mapping16page_table_entry8PteFlags4bits17hec41972a30d9c1c3E>
    80008826:	e42a                	sd	a0,8(sp)
    80008828:	a009                	j	8000882a <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry10write_perm17h2feb85df16db2682E+0x4a>
    8000882a:	75a2                	ld	a1,40(sp)
    8000882c:	6542                	ld	a0,16(sp)
    8000882e:	6622                	ld	a2,8(sp)
    80008830:	8d51                	or	a0,a0,a2
    80008832:	e188                	sd	a0,0(a1)
    }
    80008834:	60e6                	ld	ra,88(sp)
    80008836:	6125                	addi	sp,sp,96
    80008838:	8082                	ret

Disassembly of section .text._ZN6kernel6memory7mapping16page_table_entry14PageTableEntry5write17h80740d4aa6720343E:

000000008000883a <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry5write17h80740d4aa6720343E>:

    #[inline]
    pub fn write(&mut self, addr: usize) {
    8000883a:	1141                	addi	sp,sp,-16
    8000883c:	e02a                	sd	a0,0(sp)
    8000883e:	e42e                	sd	a1,8(sp)
        self.0 = addr
    80008840:	e10c                	sd	a1,0(a0)
    }
    80008842:	0141                	addi	sp,sp,16
    80008844:	8082                	ret

Disassembly of section .text._ZN6kernel6memory7mapping16page_table_entry8PteFlags4bits17hec41972a30d9c1c3E:

0000000080008846 <_ZN6kernel6memory7mapping16page_table_entry8PteFlags4bits17hec41972a30d9c1c3E>:
                }
            }

            /// Returns the raw value of the flags currently stored.
            #[inline]
            pub const fn bits(&self) -> $T {
    80008846:	1141                	addi	sp,sp,-16
    80008848:	e42a                	sd	a0,8(sp)
                self.bits
    8000884a:	6108                	ld	a0,0(a0)
            }
    8000884c:	0141                	addi	sp,sp,16
    8000884e:	8082                	ret

Disassembly of section .text._ZN93_$LT$kernel..memory..mapping..page_table_entry..PteFlags$u20$as$u20$core..ops..bit..BitOr$GT$5bitor17h95bfa721b377cbd2E:

0000000080008850 <_ZN93_$LT$kernel..memory..mapping..page_table_entry..PteFlags$u20$as$u20$core..ops..bit..BitOr$GT$5bitor17h95bfa721b377cbd2E>:
        impl $crate::_core::ops::BitOr for $BitFlags {
            type Output = Self;

            /// Returns the union of the two sets of flags.
            #[inline]
            fn bitor(self, other: $BitFlags) -> Self {
    80008850:	1101                	addi	sp,sp,-32
    80008852:	e82a                	sd	a0,16(sp)
    80008854:	ec2e                	sd	a1,24(sp)
                Self { bits: self.bits | other.bits }
    80008856:	8d4d                	or	a0,a0,a1
    80008858:	e42a                	sd	a0,8(sp)
            }
    8000885a:	6105                	addi	sp,sp,32
    8000885c:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$11write_bytes17h89eca677f2a46e73E:

000000008000885e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$11write_bytes17h89eca677f2a46e73E>:
    /// See [`ptr::write_bytes`] for safety concerns and examples.
    ///
    /// [`ptr::write_bytes`]: crate::ptr::write_bytes()
    #[stable(feature = "pointer_methods", since = "1.26.0")]
    #[inline]
    pub unsafe fn write_bytes(self, val: u8, count: usize)
    8000885e:	1101                	addi	sp,sp,-32
    80008860:	ec06                	sd	ra,24(sp)
    80008862:	e02a                	sd	a0,0(sp)
    80008864:	00b107a3          	sb	a1,15(sp)
    80008868:	e832                	sd	a2,16(sp)
    where
        T: Sized,
    {
        // SAFETY: the caller must uphold the safety contract for `write_bytes`.
        unsafe { write_bytes(self, val, count) }
    8000886a:	00019097          	auipc	ra,0x19
    8000886e:	2c6080e7          	jalr	710(ra) # 80021b30 <_ZN4core10intrinsics11write_bytes17hfabd30e5bfcb1b55E>
    80008872:	a009                	j	80008874 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$11write_bytes17h89eca677f2a46e73E+0x16>
    }
    80008874:	60e2                	ld	ra,24(sp)
    80008876:	6105                	addi	sp,sp,32
    80008878:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$12wrapping_add17hef81cac2ef53321bE:

000000008000887a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$12wrapping_add17hef81cac2ef53321bE>:
    pub const fn wrapping_add(self, count: usize) -> Self
    8000887a:	1101                	addi	sp,sp,-32
    8000887c:	ec06                	sd	ra,24(sp)
    8000887e:	e42a                	sd	a0,8(sp)
    80008880:	e82e                	sd	a1,16(sp)
        self.wrapping_offset(count as isize)
    80008882:	00000097          	auipc	ra,0x0
    80008886:	048080e7          	jalr	72(ra) # 800088ca <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$15wrapping_offset17h01aa229f802838f9E>
    8000888a:	e02a                	sd	a0,0(sp)
    8000888c:	a009                	j	8000888e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$12wrapping_add17hef81cac2ef53321bE+0x14>
    }
    8000888e:	6502                	ld	a0,0(sp)
    80008890:	60e2                	ld	ra,24(sp)
    80008892:	6105                	addi	sp,sp,32
    80008894:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$13read_volatile17h74b3a7ca48b9b2b5E:

0000000080008896 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$13read_volatile17h74b3a7ca48b9b2b5E>:
    pub unsafe fn read_volatile(self) -> T
    80008896:	1101                	addi	sp,sp,-32
    80008898:	ec06                	sd	ra,24(sp)
    8000889a:	e82a                	sd	a0,16(sp)
        unsafe { read_volatile(self) }
    8000889c:	00010097          	auipc	ra,0x10
    800088a0:	cd6080e7          	jalr	-810(ra) # 80018572 <_ZN4core3ptr13read_volatile17h48a61fef837248f4E>
    800088a4:	e42a                	sd	a0,8(sp)
    800088a6:	a009                	j	800088a8 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$13read_volatile17h74b3a7ca48b9b2b5E+0x12>
    }
    800088a8:	6522                	ld	a0,8(sp)
    800088aa:	60e2                	ld	ra,24(sp)
    800088ac:	6105                	addi	sp,sp,32
    800088ae:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$14write_volatile17h3132c1bed6ef07b7E:

00000000800088b0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$14write_volatile17h3132c1bed6ef07b7E>:
    /// See [`ptr::write_volatile`] for safety concerns and examples.
    ///
    /// [`ptr::write_volatile`]: crate::ptr::write_volatile()
    #[stable(feature = "pointer_methods", since = "1.26.0")]
    #[inline]
    pub unsafe fn write_volatile(self, val: T)
    800088b0:	1101                	addi	sp,sp,-32
    800088b2:	ec06                	sd	ra,24(sp)
    800088b4:	e42a                	sd	a0,8(sp)
    800088b6:	00b10ba3          	sb	a1,23(sp)
    where
        T: Sized,
    {
        // SAFETY: the caller must uphold the safety contract for `write_volatile`.
        unsafe { write_volatile(self, val) }
    800088ba:	00010097          	auipc	ra,0x10
    800088be:	cfc080e7          	jalr	-772(ra) # 800185b6 <_ZN4core3ptr14write_volatile17ha922d8ced3e01de5E>
    800088c2:	a009                	j	800088c4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$14write_volatile17h3132c1bed6ef07b7E+0x14>
    }
    800088c4:	60e2                	ld	ra,24(sp)
    800088c6:	6105                	addi	sp,sp,32
    800088c8:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$15wrapping_offset17h01aa229f802838f9E:

00000000800088ca <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$15wrapping_offset17h01aa229f802838f9E>:
    pub const fn wrapping_offset(self, count: isize) -> *mut T
    800088ca:	1101                	addi	sp,sp,-32
    800088cc:	e42a                	sd	a0,8(sp)
    800088ce:	e82e                	sd	a1,16(sp)
        unsafe { intrinsics::arith_offset(self, count) as *mut T }
    800088d0:	952e                	add	a0,a0,a1
    800088d2:	e02a                	sd	a0,0(sp)
    800088d4:	ec2a                	sd	a0,24(sp)
    800088d6:	a009                	j	800088d8 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$15wrapping_offset17h01aa229f802838f9E+0xe>
    }
    800088d8:	6502                	ld	a0,0(sp)
    800088da:	6105                	addi	sp,sp,32
    800088dc:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1fdb3e6f0b8b1c65E:

00000000800088de <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1fdb3e6f0b8b1c65E>:
    pub const unsafe fn add(self, count: usize) -> Self
    800088de:	1101                	addi	sp,sp,-32
    800088e0:	ec06                	sd	ra,24(sp)
    800088e2:	e42a                	sd	a0,8(sp)
    800088e4:	e82e                	sd	a1,16(sp)
        unsafe { self.offset(count as isize) }
    800088e6:	00000097          	auipc	ra,0x0
    800088ea:	014080e7          	jalr	20(ra) # 800088fa <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h07753d2a365b8ea9E>
    800088ee:	e02a                	sd	a0,0(sp)
    800088f0:	a009                	j	800088f2 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1fdb3e6f0b8b1c65E+0x14>
    }
    800088f2:	6502                	ld	a0,0(sp)
    800088f4:	60e2                	ld	ra,24(sp)
    800088f6:	6105                	addi	sp,sp,32
    800088f8:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h07753d2a365b8ea9E:

00000000800088fa <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h07753d2a365b8ea9E>:
    pub const unsafe fn offset(self, count: isize) -> *mut T
    800088fa:	1101                	addi	sp,sp,-32
    800088fc:	e42a                	sd	a0,8(sp)
    800088fe:	e82e                	sd	a1,16(sp)
        unsafe { intrinsics::offset(self, count) as *mut T }
    80008900:	952e                	add	a0,a0,a1
    80008902:	e02a                	sd	a0,0(sp)
    80008904:	ec2a                	sd	a0,24(sp)
    80008906:	a009                	j	80008908 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h07753d2a365b8ea9E+0xe>
    }
    80008908:	6502                	ld	a0,0(sp)
    8000890a:	6105                	addi	sp,sp,32
    8000890c:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h9889ec684d0da599E:

000000008000890e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h9889ec684d0da599E>:
    pub const unsafe fn offset(self, count: isize) -> *mut T
    8000890e:	1101                	addi	sp,sp,-32
    80008910:	e42a                	sd	a0,8(sp)
    80008912:	e82e                	sd	a1,16(sp)
        unsafe { intrinsics::offset(self, count) as *mut T }
    80008914:	058a                	slli	a1,a1,0x2
    80008916:	952e                	add	a0,a0,a1
    80008918:	e02a                	sd	a0,0(sp)
    8000891a:	ec2a                	sd	a0,24(sp)
    8000891c:	a009                	j	8000891e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h9889ec684d0da599E+0x10>
    }
    8000891e:	6502                	ld	a0,0(sp)
    80008920:	6105                	addi	sp,sp,32
    80008922:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hc49b20e03dc897f6E:

0000000080008924 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hc49b20e03dc897f6E>:
    pub const fn is_null(self) -> bool {
    80008924:	1101                	addi	sp,sp,-32
    80008926:	ec06                	sd	ra,24(sp)
    80008928:	e42a                	sd	a0,8(sp)
    8000892a:	e82a                	sd	a0,16(sp)
        (self as *mut u8).guaranteed_eq(null_mut())
    8000892c:	a009                	j	8000892e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hc49b20e03dc897f6E+0xa>
    8000892e:	6522                	ld	a0,8(sp)
    80008930:	4581                	li	a1,0
    80008932:	00019097          	auipc	ra,0x19
    80008936:	70a080e7          	jalr	1802(ra) # 8002203c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$13guaranteed_eq17h32ea8c99c0b8220dE>
    8000893a:	e02a                	sd	a0,0(sp)
    8000893c:	a009                	j	8000893e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hc49b20e03dc897f6E+0x1a>
    }
    8000893e:	6502                	ld	a0,0(sp)
    80008940:	60e2                	ld	ra,24(sp)
    80008942:	6105                	addi	sp,sp,32
    80008944:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr41_$LT$impl$u20$$BP$mut$u20$$u5b$T$u5d$$GT$3len17hf44174276422642dE:

0000000080008946 <_ZN4core3ptr7mut_ptr41_$LT$impl$u20$$BP$mut$u20$$u5b$T$u5d$$GT$3len17hf44174276422642dE>:
    /// assert_eq!(slice.len(), 3);
    /// ```
    #[inline]
    #[unstable(feature = "slice_ptr_len", issue = "71146")]
    #[rustc_const_unstable(feature = "const_slice_ptr_len", issue = "71146")]
    pub const fn len(self) -> usize {
    80008946:	1101                	addi	sp,sp,-32
    80008948:	ec06                	sd	ra,24(sp)
    8000894a:	e42a                	sd	a0,8(sp)
    8000894c:	e82e                	sd	a1,16(sp)
            // SAFETY: this is safe because `*const [T]` and `FatPtr<T>` have the same layout.
            // Only `std` can make this guarantee.
            unsafe { Repr { rust_mut: self }.raw }.len
        }
        #[cfg(not(bootstrap))]
        metadata(self)
    8000894e:	00012097          	auipc	ra,0x12
    80008952:	790080e7          	jalr	1936(ra) # 8001b0de <_ZN4core3ptr8metadata8metadata17h8c3e19bdf44a2913E>
    80008956:	e02a                	sd	a0,0(sp)
    80008958:	a009                	j	8000895a <_ZN4core3ptr7mut_ptr41_$LT$impl$u20$$BP$mut$u20$$u5b$T$u5d$$GT$3len17hf44174276422642dE+0x14>
    }
    8000895a:	6502                	ld	a0,0(sp)
    8000895c:	60e2                	ld	ra,24(sp)
    8000895e:	6105                	addi	sp,sp,32
    80008960:	8082                	ret

Disassembly of section .text._ZN4core3str11validations11unwrap_or_017haab6baa99207da23E:

0000000080008962 <_ZN4core3str11validations11unwrap_or_017haab6baa99207da23E>:
fn unwrap_or_0(opt: Option<&u8>) -> u8 {
    80008962:	1141                	addi	sp,sp,-16
    80008964:	e02a                	sd	a0,0(sp)
        Some(&byte) => byte,
    80008966:	00a035b3          	snez	a1,a0
    8000896a:	4581                	li	a1,0
    8000896c:	00b50463          	beq	a0,a1,80008974 <_ZN4core3str11validations11unwrap_or_017haab6baa99207da23E+0x12>
    80008970:	a009                	j	80008972 <_ZN4core3str11validations11unwrap_or_017haab6baa99207da23E+0x10>
    80008972:	a031                	j	8000897e <_ZN4core3str11validations11unwrap_or_017haab6baa99207da23E+0x1c>
    80008974:	4501                	li	a0,0
        None => 0,
    80008976:	00a10723          	sb	a0,14(sp)
    match opt {
    8000897a:	a811                	j	8000898e <_ZN4core3str11validations11unwrap_or_017haab6baa99207da23E+0x2c>
    8000897c:	0000                	unimp
        Some(&byte) => byte,
    8000897e:	6502                	ld	a0,0(sp)
    80008980:	00050503          	lb	a0,0(a0)
    80008984:	00a107a3          	sb	a0,15(sp)
    80008988:	00a10723          	sb	a0,14(sp)
    match opt {
    8000898c:	a009                	j	8000898e <_ZN4core3str11validations11unwrap_or_017haab6baa99207da23E+0x2c>
}
    8000898e:	00e10503          	lb	a0,14(sp)
    80008992:	0141                	addi	sp,sp,16
    80008994:	8082                	ret

Disassembly of section .text._ZN4core3str11validations15utf8_first_byte17h336ce196ba99428fE:

0000000080008996 <_ZN4core3str11validations15utf8_first_byte17h336ce196ba99428fE>:
fn utf8_first_byte(byte: u8, width: u32) -> u32 {
    80008996:	1141                	addi	sp,sp,-16
    80008998:	00a105a3          	sb	a0,11(sp)
    8000899c:	c62e                	sw	a1,12(sp)
    (byte & (0x7F >> width)) as u32
    8000899e:	0075f613          	andi	a2,a1,7
    800089a2:	07f00593          	li	a1,127
    800089a6:	00c5d5b3          	srl	a1,a1,a2
    800089aa:	8d6d                	and	a0,a0,a1
}
    800089ac:	0141                	addi	sp,sp,16
    800089ae:	8082                	ret

Disassembly of section .text._ZN4core3str11validations18utf8_acc_cont_byte17h8689eb325a5b266aE:

00000000800089b0 <_ZN4core3str11validations18utf8_acc_cont_byte17h8689eb325a5b266aE>:
fn utf8_acc_cont_byte(ch: u32, byte: u8) -> u32 {
    800089b0:	1141                	addi	sp,sp,-16
    800089b2:	c42a                	sw	a0,8(sp)
    800089b4:	00b107a3          	sb	a1,15(sp)
    (ch << 6) | (byte & CONT_MASK) as u32
    800089b8:	051a                	slli	a0,a0,0x6
    800089ba:	03f5f593          	andi	a1,a1,63
    800089be:	8d4d                	or	a0,a0,a1
}
    800089c0:	0141                	addi	sp,sp,16
    800089c2:	8082                	ret

Disassembly of section .text._ZN5alloc5alloc8box_free17h9496fa4d23b2ebc8E:

00000000800089c4 <_ZN5alloc5alloc8box_free17h9496fa4d23b2ebc8E>:
// This signature has to be the same as `Box`, otherwise an ICE will happen.
// When an additional parameter to `Box` is added (like `A: Allocator`), this has to be added here as
// well.
// For example if `Box` is changed to  `struct Box<T: ?Sized, A: Allocator>(Unique<T>, A)`,
// this function has to be changed to `fn box_free<T: ?Sized, A: Allocator>(Unique<T>, A)` as well.
pub(crate) unsafe fn box_free<T: ?Sized, A: Allocator>(ptr: Unique<T>, alloc: A) {
    800089c4:	7119                	addi	sp,sp,-128
    800089c6:	fc86                	sd	ra,120(sp)
    800089c8:	fc2a                	sd	a0,56(sp)
    800089ca:	1828                	addi	a0,sp,56
    unsafe {
        let size = size_of_val(ptr.as_ref());
    800089cc:	00003097          	auipc	ra,0x3
    800089d0:	286080e7          	jalr	646(ra) # 8000bc52 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ref17hf6739c76b33ed63aE>
    800089d4:	a009                	j	800089d6 <_ZN5alloc5alloc8box_free17h9496fa4d23b2ebc8E+0x12>
    800089d6:	04000513          	li	a0,64
    800089da:	f82a                	sd	a0,48(sp)
    800089dc:	e4aa                	sd	a0,72(sp)
    800089de:	e8aa                	sd	a0,80(sp)
    800089e0:	a009                	j	800089e2 <_ZN5alloc5alloc8box_free17h9496fa4d23b2ebc8E+0x1e>
    800089e2:	1828                	addi	a0,sp,56
        let align = min_align_of_val(ptr.as_ref());
    800089e4:	00003097          	auipc	ra,0x3
    800089e8:	26e080e7          	jalr	622(ra) # 8000bc52 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ref17hf6739c76b33ed63aE>
    800089ec:	a009                	j	800089ee <_ZN5alloc5alloc8box_free17h9496fa4d23b2ebc8E+0x2a>
    800089ee:	4521                	li	a0,8
    800089f0:	f42a                	sd	a0,40(sp)
    800089f2:	ecaa                	sd	a0,88(sp)
    800089f4:	f0aa                	sd	a0,96(sp)
    800089f6:	a009                	j	800089f8 <_ZN5alloc5alloc8box_free17h9496fa4d23b2ebc8E+0x34>
        let layout = Layout::from_size_align_unchecked(size, align);
    800089f8:	75a2                	ld	a1,40(sp)
    800089fa:	7542                	ld	a0,48(sp)
    800089fc:	00016097          	auipc	ra,0x16
    80008a00:	f68080e7          	jalr	-152(ra) # 8001e964 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h7d187b5349095d20E>
    80008a04:	862a                	mv	a2,a0
    80008a06:	ec32                	sd	a2,24(sp)
    80008a08:	862e                	mv	a2,a1
    80008a0a:	f032                	sd	a2,32(sp)
    80008a0c:	f4aa                	sd	a0,104(sp)
    80008a0e:	f8ae                	sd	a1,112(sp)
    80008a10:	a009                	j	80008a12 <_ZN5alloc5alloc8box_free17h9496fa4d23b2ebc8E+0x4e>
        alloc.deallocate(ptr.cast().into(), layout)
    80008a12:	7562                	ld	a0,56(sp)
    80008a14:	00003097          	auipc	ra,0x3
    80008a18:	19a080e7          	jalr	410(ra) # 8000bbae <_ZN4core3ptr6unique15Unique$LT$T$GT$4cast17h6eaa84e8f5e764c2E>
    80008a1c:	e82a                	sd	a0,16(sp)
    80008a1e:	a009                	j	80008a20 <_ZN5alloc5alloc8box_free17h9496fa4d23b2ebc8E+0x5c>
    80008a20:	6542                	ld	a0,16(sp)
    80008a22:	00003097          	auipc	ra,0x3
    80008a26:	26e080e7          	jalr	622(ra) # 8000bc90 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h6726b37a43d030b4E>
    80008a2a:	e42a                	sd	a0,8(sp)
    80008a2c:	a009                	j	80008a2e <_ZN5alloc5alloc8box_free17h9496fa4d23b2ebc8E+0x6a>
    80008a2e:	7682                	ld	a3,32(sp)
    80008a30:	6662                	ld	a2,24(sp)
    80008a32:	65a2                	ld	a1,8(sp)
    80008a34:	0088                	addi	a0,sp,64
    80008a36:	00004097          	auipc	ra,0x4
    80008a3a:	842080e7          	jalr	-1982(ra) # 8000c278 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17hd299418f64a2b74eE>
    80008a3e:	a009                	j	80008a40 <_ZN5alloc5alloc8box_free17h9496fa4d23b2ebc8E+0x7c>
    }
}
    80008a40:	a009                	j	80008a42 <_ZN5alloc5alloc8box_free17h9496fa4d23b2ebc8E+0x7e>
    80008a42:	70e6                	ld	ra,120(sp)
    80008a44:	6109                	addi	sp,sp,128
    80008a46:	8082                	ret

Disassembly of section .text._ZN5alloc5alloc8box_free17hc9fdd8b40dd668b4E:

0000000080008a48 <_ZN5alloc5alloc8box_free17hc9fdd8b40dd668b4E>:
pub(crate) unsafe fn box_free<T: ?Sized, A: Allocator>(ptr: Unique<T>, alloc: A) {
    80008a48:	7119                	addi	sp,sp,-128
    80008a4a:	fc86                	sd	ra,120(sp)
    80008a4c:	fc2a                	sd	a0,56(sp)
    80008a4e:	1828                	addi	a0,sp,56
        let size = size_of_val(ptr.as_ref());
    80008a50:	00003097          	auipc	ra,0x3
    80008a54:	1e6080e7          	jalr	486(ra) # 8000bc36 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ref17hc8563a91a04f7babE>
    80008a58:	a009                	j	80008a5a <_ZN5alloc5alloc8box_free17hc9fdd8b40dd668b4E+0x12>
    80008a5a:	03800513          	li	a0,56
    80008a5e:	f82a                	sd	a0,48(sp)
    80008a60:	e4aa                	sd	a0,72(sp)
    80008a62:	e8aa                	sd	a0,80(sp)
    80008a64:	a009                	j	80008a66 <_ZN5alloc5alloc8box_free17hc9fdd8b40dd668b4E+0x1e>
    80008a66:	1828                	addi	a0,sp,56
        let align = min_align_of_val(ptr.as_ref());
    80008a68:	00003097          	auipc	ra,0x3
    80008a6c:	1ce080e7          	jalr	462(ra) # 8000bc36 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ref17hc8563a91a04f7babE>
    80008a70:	a009                	j	80008a72 <_ZN5alloc5alloc8box_free17hc9fdd8b40dd668b4E+0x2a>
    80008a72:	4521                	li	a0,8
    80008a74:	f42a                	sd	a0,40(sp)
    80008a76:	ecaa                	sd	a0,88(sp)
    80008a78:	f0aa                	sd	a0,96(sp)
    80008a7a:	a009                	j	80008a7c <_ZN5alloc5alloc8box_free17hc9fdd8b40dd668b4E+0x34>
        let layout = Layout::from_size_align_unchecked(size, align);
    80008a7c:	75a2                	ld	a1,40(sp)
    80008a7e:	7542                	ld	a0,48(sp)
    80008a80:	00016097          	auipc	ra,0x16
    80008a84:	ee4080e7          	jalr	-284(ra) # 8001e964 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h7d187b5349095d20E>
    80008a88:	862a                	mv	a2,a0
    80008a8a:	ec32                	sd	a2,24(sp)
    80008a8c:	862e                	mv	a2,a1
    80008a8e:	f032                	sd	a2,32(sp)
    80008a90:	f4aa                	sd	a0,104(sp)
    80008a92:	f8ae                	sd	a1,112(sp)
    80008a94:	a009                	j	80008a96 <_ZN5alloc5alloc8box_free17hc9fdd8b40dd668b4E+0x4e>
        alloc.deallocate(ptr.cast().into(), layout)
    80008a96:	7562                	ld	a0,56(sp)
    80008a98:	00003097          	auipc	ra,0x3
    80008a9c:	0c6080e7          	jalr	198(ra) # 8000bb5e <_ZN4core3ptr6unique15Unique$LT$T$GT$4cast17h0df13c1b672cf8a2E>
    80008aa0:	e82a                	sd	a0,16(sp)
    80008aa2:	a009                	j	80008aa4 <_ZN5alloc5alloc8box_free17hc9fdd8b40dd668b4E+0x5c>
    80008aa4:	6542                	ld	a0,16(sp)
    80008aa6:	00003097          	auipc	ra,0x3
    80008aaa:	1ea080e7          	jalr	490(ra) # 8000bc90 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h6726b37a43d030b4E>
    80008aae:	e42a                	sd	a0,8(sp)
    80008ab0:	a009                	j	80008ab2 <_ZN5alloc5alloc8box_free17hc9fdd8b40dd668b4E+0x6a>
    80008ab2:	7682                	ld	a3,32(sp)
    80008ab4:	6662                	ld	a2,24(sp)
    80008ab6:	65a2                	ld	a1,8(sp)
    80008ab8:	0088                	addi	a0,sp,64
    80008aba:	00003097          	auipc	ra,0x3
    80008abe:	7be080e7          	jalr	1982(ra) # 8000c278 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17hd299418f64a2b74eE>
    80008ac2:	a009                	j	80008ac4 <_ZN5alloc5alloc8box_free17hc9fdd8b40dd668b4E+0x7c>
}
    80008ac4:	a009                	j	80008ac6 <_ZN5alloc5alloc8box_free17hc9fdd8b40dd668b4E+0x7e>
    80008ac6:	70e6                	ld	ra,120(sp)
    80008ac8:	6109                	addi	sp,sp,128
    80008aca:	8082                	ret

Disassembly of section .text._ZN4core5clone5Clone10clone_from17h4153b3cb0b8f3e29E:

0000000080008acc <_ZN4core5clone5Clone10clone_from17h4153b3cb0b8f3e29E>:
    /// `a.clone_from(&b)` is equivalent to `a = b.clone()` in functionality,
    /// but can be overridden to reuse the resources of `a` to avoid unnecessary
    /// allocations.
    #[inline]
    #[stable(feature = "rust1", since = "1.0.0")]
    fn clone_from(&mut self, source: &Self) {
    80008acc:	715d                	addi	sp,sp,-80
    80008ace:	e486                	sd	ra,72(sp)
    80008ad0:	e02e                	sd	a1,0(sp)
    80008ad2:	85aa                	mv	a1,a0
    80008ad4:	6502                	ld	a0,0(sp)
    80008ad6:	e42e                	sd	a1,8(sp)
    80008ad8:	f02e                	sd	a1,32(sp)
    80008ada:	f42a                	sd	a0,40(sp)
        *self = source.clone()
    80008adc:	00012097          	auipc	ra,0x12
    80008ae0:	3ae080e7          	jalr	942(ra) # 8001ae8a <_ZN63_$LT$kernel..fs..inode..Inode$u20$as$u20$core..clone..Clone$GT$5clone17hdd0850fb54e2bc6cE>
    80008ae4:	f82a                	sd	a0,48(sp)
    80008ae6:	fc2e                	sd	a1,56(sp)
    80008ae8:	e82a                	sd	a0,16(sp)
    80008aea:	ec2e                	sd	a1,24(sp)
    80008aec:	a009                	j	80008aee <_ZN4core5clone5Clone10clone_from17h4153b3cb0b8f3e29E+0x22>
    80008aee:	6522                	ld	a0,8(sp)
    80008af0:	ffffe097          	auipc	ra,0xffffe
    80008af4:	392080e7          	jalr	914(ra) # 80006e82 <_ZN4core3ptr45drop_in_place$LT$kernel..fs..inode..Inode$GT$17h8786fe1a2a287832E>
    80008af8:	a009                	j	80008afa <_ZN4core5clone5Clone10clone_from17h4153b3cb0b8f3e29E+0x2e>
    80008afa:	65a2                	ld	a1,8(sp)
    80008afc:	6562                	ld	a0,24(sp)
    80008afe:	e588                	sd	a0,8(a1)
    80008b00:	6542                	ld	a0,16(sp)
    80008b02:	e188                	sd	a0,0(a1)
    }
    80008b04:	60a6                	ld	ra,72(sp)
    80008b06:	6161                	addi	sp,sp,80
    80008b08:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h1b12e5c191747deaE:

0000000080008b0a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h1b12e5c191747deaE>:
    pub unsafe fn as_mut<'a>(self) -> Option<&'a mut T> {
    80008b0a:	7179                	addi	sp,sp,-48
    80008b0c:	f406                	sd	ra,40(sp)
    80008b0e:	e42a                	sd	a0,8(sp)
    80008b10:	f02a                	sd	a0,32(sp)
        if self.is_null() { None } else { unsafe { Some(&mut *self) } }
    80008b12:	00000097          	auipc	ra,0x0
    80008b16:	05c080e7          	jalr	92(ra) # 80008b6e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17ha54fba030ecf9049E>
    80008b1a:	e82a                	sd	a0,16(sp)
    80008b1c:	a009                	j	80008b1e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h1b12e5c191747deaE+0x14>
    80008b1e:	6542                	ld	a0,16(sp)
    80008b20:	4581                	li	a1,0
    80008b22:	00b50663          	beq	a0,a1,80008b2e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h1b12e5c191747deaE+0x24>
    80008b26:	a009                	j	80008b28 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h1b12e5c191747deaE+0x1e>
    80008b28:	4501                	li	a0,0
    80008b2a:	ec2a                	sd	a0,24(sp)
    80008b2c:	a021                	j	80008b34 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h1b12e5c191747deaE+0x2a>
    80008b2e:	6522                	ld	a0,8(sp)
    80008b30:	ec2a                	sd	a0,24(sp)
    80008b32:	a009                	j	80008b34 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h1b12e5c191747deaE+0x2a>
    }
    80008b34:	6562                	ld	a0,24(sp)
    80008b36:	70a2                	ld	ra,40(sp)
    80008b38:	6145                	addi	sp,sp,48
    80008b3a:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17ha6d203c03ed13dfdE:

0000000080008b3c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17ha6d203c03ed13dfdE>:
    pub unsafe fn as_mut<'a>(self) -> Option<&'a mut T> {
    80008b3c:	7179                	addi	sp,sp,-48
    80008b3e:	f406                	sd	ra,40(sp)
    80008b40:	e42a                	sd	a0,8(sp)
    80008b42:	f02a                	sd	a0,32(sp)
        if self.is_null() { None } else { unsafe { Some(&mut *self) } }
    80008b44:	00000097          	auipc	ra,0x0
    80008b48:	04c080e7          	jalr	76(ra) # 80008b90 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hcdcddf7362d728f0E>
    80008b4c:	e82a                	sd	a0,16(sp)
    80008b4e:	a009                	j	80008b50 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17ha6d203c03ed13dfdE+0x14>
    80008b50:	6542                	ld	a0,16(sp)
    80008b52:	4581                	li	a1,0
    80008b54:	00b50663          	beq	a0,a1,80008b60 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17ha6d203c03ed13dfdE+0x24>
    80008b58:	a009                	j	80008b5a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17ha6d203c03ed13dfdE+0x1e>
    80008b5a:	4501                	li	a0,0
    80008b5c:	ec2a                	sd	a0,24(sp)
    80008b5e:	a021                	j	80008b66 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17ha6d203c03ed13dfdE+0x2a>
    80008b60:	6522                	ld	a0,8(sp)
    80008b62:	ec2a                	sd	a0,24(sp)
    80008b64:	a009                	j	80008b66 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17ha6d203c03ed13dfdE+0x2a>
    }
    80008b66:	6562                	ld	a0,24(sp)
    80008b68:	70a2                	ld	ra,40(sp)
    80008b6a:	6145                	addi	sp,sp,48
    80008b6c:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17ha54fba030ecf9049E:

0000000080008b6e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17ha54fba030ecf9049E>:
    pub const fn is_null(self) -> bool {
    80008b6e:	1101                	addi	sp,sp,-32
    80008b70:	ec06                	sd	ra,24(sp)
    80008b72:	e82a                	sd	a0,16(sp)
        (self as *mut u8).guaranteed_eq(null_mut())
    80008b74:	e42a                	sd	a0,8(sp)
    80008b76:	a009                	j	80008b78 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17ha54fba030ecf9049E+0xa>
    80008b78:	6522                	ld	a0,8(sp)
    80008b7a:	4581                	li	a1,0
    80008b7c:	00019097          	auipc	ra,0x19
    80008b80:	4c0080e7          	jalr	1216(ra) # 8002203c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$13guaranteed_eq17h32ea8c99c0b8220dE>
    80008b84:	e02a                	sd	a0,0(sp)
    80008b86:	a009                	j	80008b88 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17ha54fba030ecf9049E+0x1a>
    }
    80008b88:	6502                	ld	a0,0(sp)
    80008b8a:	60e2                	ld	ra,24(sp)
    80008b8c:	6105                	addi	sp,sp,32
    80008b8e:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hcdcddf7362d728f0E:

0000000080008b90 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hcdcddf7362d728f0E>:
    pub const fn is_null(self) -> bool {
    80008b90:	1101                	addi	sp,sp,-32
    80008b92:	ec06                	sd	ra,24(sp)
    80008b94:	e82a                	sd	a0,16(sp)
        (self as *mut u8).guaranteed_eq(null_mut())
    80008b96:	e42a                	sd	a0,8(sp)
    80008b98:	a009                	j	80008b9a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hcdcddf7362d728f0E+0xa>
    80008b9a:	6522                	ld	a0,8(sp)
    80008b9c:	4581                	li	a1,0
    80008b9e:	00019097          	auipc	ra,0x19
    80008ba2:	49e080e7          	jalr	1182(ra) # 8002203c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$13guaranteed_eq17h32ea8c99c0b8220dE>
    80008ba6:	e02a                	sd	a0,0(sp)
    80008ba8:	a009                	j	80008baa <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hcdcddf7362d728f0E+0x1a>
    }
    80008baa:	6502                	ld	a0,0(sp)
    80008bac:	60e2                	ld	ra,24(sp)
    80008bae:	6105                	addi	sp,sp,32
    80008bb0:	8082                	ret

Disassembly of section .text._ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$8begin_op17he5b49a48c716e372E:

0000000080008bb2 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$8begin_op17he5b49a48c716e372E>:
    }
}

impl Spinlock<Log> {
    /// It should be called at the start of file system call.
    pub fn begin_op(&self) {
    80008bb2:	7135                	addi	sp,sp,-160
    80008bb4:	ed06                	sd	ra,152(sp)
    80008bb6:	f8aa                	sd	a0,112(sp)
    80008bb8:	e52a                	sd	a0,136(sp)
        let mut guard  = self.acquire();
    80008bba:	00007097          	auipc	ra,0x7
    80008bbe:	7f4080e7          	jalr	2036(ra) # 800103ae <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h25a8532f298de6d8E>
    80008bc2:	fcaa                	sd	a0,120(sp)
    80008bc4:	a009                	j	80008bc6 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$8begin_op17he5b49a48c716e372E+0x14>
    80008bc6:	18a8                	addi	a0,sp,120
        loop {
            if guard.committing ||
    80008bc8:	00009097          	auipc	ra,0x9
    80008bcc:	a32080e7          	jalr	-1486(ra) # 800115fa <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h89fb3cfbc0625c4cE>
    80008bd0:	f4aa                	sd	a0,104(sp)
    80008bd2:	a02d                	j	80008bfc <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$8begin_op17he5b49a48c716e372E+0x4a>
    80008bd4:	4505                	li	a0,1
    80008bd6:	08a103a3          	sb	a0,135(sp)
    80008bda:	a821                	j	80008bf2 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$8begin_op17he5b49a48c716e372E+0x40>
    80008bdc:	4501                	li	a0,0
    80008bde:	08a103a3          	sb	a0,135(sp)
    80008be2:	a801                	j	80008bf2 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$8begin_op17he5b49a48c716e372E+0x40>
    80008be4:	18a8                	addi	a0,sp,120
                1 + guard.lh.len as usize +
    80008be6:	00009097          	auipc	ra,0x9
    80008bea:	a14080e7          	jalr	-1516(ra) # 800115fa <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h89fb3cfbc0625c4cE>
    80008bee:	f0aa                	sd	a0,96(sp)
    80008bf0:	a821                	j	80008c08 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$8begin_op17he5b49a48c716e372E+0x56>
            if guard.committing ||
    80008bf2:	08714503          	lbu	a0,135(sp)
    80008bf6:	8905                	andi	a0,a0,1
    80008bf8:	ed35                	bnez	a0,80008c74 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$8begin_op17he5b49a48c716e372E+0xc2>
    80008bfa:	a061                	j	80008c82 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$8begin_op17he5b49a48c716e372E+0xd0>
    80008bfc:	7526                	ld	a0,104(sp)
    80008bfe:	08854503          	lbu	a0,136(a0)
    80008c02:	8905                	andi	a0,a0,1
    80008c04:	f961                	bnez	a0,80008bd4 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$8begin_op17he5b49a48c716e372E+0x22>
    80008c06:	bff9                	j	80008be4 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$8begin_op17he5b49a48c716e372E+0x32>
                1 + guard.lh.len as usize +
    80008c08:	7506                	ld	a0,96(sp)
    80008c0a:	01056503          	lwu	a0,16(a0)
    80008c0e:	0505                	addi	a0,a0,1
    80008c10:	ecaa                	sd	a0,88(sp)
    80008c12:	4501                	li	a0,0
    80008c14:	10051163          	bnez	a0,80008d16 <.LBB0_30>
    80008c18:	a009                	j	80008c1a <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$8begin_op17he5b49a48c716e372E+0x68>
    80008c1a:	18a8                	addi	a0,sp,120
                (guard.outstanding+1) as usize * MAXOPBLOCKS > LOGSIZE
    80008c1c:	00009097          	auipc	ra,0x9
    80008c20:	9de080e7          	jalr	-1570(ra) # 800115fa <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h89fb3cfbc0625c4cE>
    80008c24:	e8aa                	sd	a0,80(sp)
    80008c26:	a009                	j	80008c28 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$8begin_op17he5b49a48c716e372E+0x76>
    80008c28:	6546                	ld	a0,80(sp)
    80008c2a:	00c56503          	lwu	a0,12(a0)
    80008c2e:	00150593          	addi	a1,a0,1
    80008c32:	e4ae                	sd	a1,72(sp)
    80008c34:	02059513          	slli	a0,a1,0x20
    80008c38:	9101                	srli	a0,a0,0x20
    80008c3a:	0eb51c63          	bne	a0,a1,80008d32 <.LBB0_32>
    80008c3e:	a009                	j	80008c40 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$8begin_op17he5b49a48c716e372E+0x8e>
    80008c40:	6526                	ld	a0,72(sp)
    80008c42:	1502                	slli	a0,a0,0x20
    80008c44:	9101                	srli	a0,a0,0x20
    80008c46:	45a9                	li	a1,10
    80008c48:	02b50633          	mul	a2,a0,a1
    80008c4c:	e0b2                	sd	a2,64(sp)
    80008c4e:	02b53533          	mulhu	a0,a0,a1
    80008c52:	4581                	li	a1,0
    80008c54:	0eb51d63          	bne	a0,a1,80008d4e <.LBB0_34>
    80008c58:	a009                	j	80008c5a <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$8begin_op17he5b49a48c716e372E+0xa8>
                1 + guard.lh.len as usize +
    80008c5a:	6566                	ld	a0,88(sp)
    80008c5c:	6586                	ld	a1,64(sp)
    80008c5e:	952e                	add	a0,a0,a1
    80008c60:	fc2a                	sd	a0,56(sp)
    80008c62:	4501                	li	a0,0
    80008c64:	10051463          	bnez	a0,80008d6c <.LBB0_36>
    80008c68:	a009                	j	80008c6a <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$8begin_op17he5b49a48c716e372E+0xb8>
    80008c6a:	75e2                	ld	a1,56(sp)
    80008c6c:	4579                	li	a0,30
            if guard.committing ||
    80008c6e:	f6b563e3          	bltu	a0,a1,80008bd4 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$8begin_op17he5b49a48c716e372E+0x22>
    80008c72:	b7ad                	j	80008bdc <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$8begin_op17he5b49a48c716e372E+0x2a>
    80008c74:	18a8                	addi	a0,sp,120
            {
                let channel = guard.deref() as *const Log as usize;
    80008c76:	00009097          	auipc	ra,0x9
    80008c7a:	984080e7          	jalr	-1660(ra) # 800115fa <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h89fb3cfbc0625c4cE>
    80008c7e:	f82a                	sd	a0,48(sp)
    80008c80:	a801                	j	80008c90 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$8begin_op17he5b49a48c716e372E+0xde>
    80008c82:	18a8                	addi	a0,sp,120
                unsafe { CPU_MANAGER.myproc().unwrap().sleep(channel, guard); }
                guard = self.acquire();
            } else {
                guard.outstanding += 1;
    80008c84:	00009097          	auipc	ra,0x9
    80008c88:	a54080e7          	jalr	-1452(ra) # 800116d8 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h6a09efacfb59499dE>
    80008c8c:	f42a                	sd	a0,40(sp)
    80008c8e:	a8a1                	j	80008ce6 <.LBB0_29+0x38>
                let channel = guard.deref() as *const Log as usize;
    80008c90:	7542                	ld	a0,48(sp)
    80008c92:	85aa                	mv	a1,a0
    80008c94:	ec2e                	sd	a1,24(sp)
    80008c96:	e92a                	sd	a0,144(sp)

0000000080008c98 <.LBB0_28>:
                unsafe { CPU_MANAGER.myproc().unwrap().sleep(channel, guard); }
    80008c98:	0006a517          	auipc	a0,0x6a
    80008c9c:	4a850513          	addi	a0,a0,1192 # 80073140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    80008ca0:	00009097          	auipc	ra,0x9
    80008ca4:	15e080e7          	jalr	350(ra) # 80011dfe <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    80008ca8:	f02a                	sd	a0,32(sp)
    80008caa:	a009                	j	80008cac <.LBB0_28+0x14>
    80008cac:	7502                	ld	a0,32(sp)

0000000080008cae <.LBB0_29>:
    80008cae:	0001e597          	auipc	a1,0x1e
    80008cb2:	79a58593          	addi	a1,a1,1946 # 80027448 <.L__unnamed_1>
    80008cb6:	00006097          	auipc	ra,0x6
    80008cba:	096080e7          	jalr	150(ra) # 8000ed4c <_ZN4core6option15Option$LT$T$GT$6unwrap17h81f0c84c54a80648E>
    80008cbe:	e82a                	sd	a0,16(sp)
    80008cc0:	a009                	j	80008cc2 <.LBB0_29+0x14>
    80008cc2:	65e2                	ld	a1,24(sp)
    80008cc4:	6542                	ld	a0,16(sp)
    80008cc6:	7666                	ld	a2,120(sp)
    80008cc8:	00009097          	auipc	ra,0x9
    80008ccc:	f2a080e7          	jalr	-214(ra) # 80011bf2 <_ZN6kernel7process7process11task_struct5sleep17ha12ac4247dad146bE>
    80008cd0:	a009                	j	80008cd2 <.LBB0_29+0x24>
                guard = self.acquire();
    80008cd2:	7546                	ld	a0,112(sp)
    80008cd4:	00007097          	auipc	ra,0x7
    80008cd8:	6da080e7          	jalr	1754(ra) # 800103ae <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h25a8532f298de6d8E>
    80008cdc:	e42a                	sd	a0,8(sp)
    80008cde:	a009                	j	80008ce0 <.LBB0_29+0x32>
    80008ce0:	6522                	ld	a0,8(sp)
    80008ce2:	fcaa                	sd	a0,120(sp)
        loop {
    80008ce4:	b5cd                	j	80008bc6 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$8begin_op17he5b49a48c716e372E+0x14>
                guard.outstanding += 1;
    80008ce6:	7522                	ld	a0,40(sp)
    80008ce8:	00c56503          	lwu	a0,12(a0)
    80008cec:	00150593          	addi	a1,a0,1
    80008cf0:	e02e                	sd	a1,0(sp)
    80008cf2:	02059513          	slli	a0,a1,0x20
    80008cf6:	9101                	srli	a0,a0,0x20
    80008cf8:	08b51863          	bne	a0,a1,80008d88 <.LBB0_38>
    80008cfc:	a009                	j	80008cfe <.LBB0_29+0x50>
    80008cfe:	6502                	ld	a0,0(sp)
    80008d00:	75a2                	ld	a1,40(sp)
    80008d02:	c5c8                	sw	a0,12(a1)
                drop(guard);
    80008d04:	7566                	ld	a0,120(sp)
    80008d06:	00014097          	auipc	ra,0x14
    80008d0a:	41e080e7          	jalr	1054(ra) # 8001d124 <_ZN4core3mem4drop17haa2d2dc72bd2e81bE>
    80008d0e:	a009                	j	80008d10 <.LBB0_29+0x62>
                break;
            }
        }
    }
    80008d10:	60ea                	ld	ra,152(sp)
    80008d12:	610d                	addi	sp,sp,160
    80008d14:	8082                	ret

0000000080008d16 <.LBB0_30>:
                1 + guard.lh.len as usize +
    80008d16:	0001e517          	auipc	a0,0x1e
    80008d1a:	6ca50513          	addi	a0,a0,1738 # 800273e0 <str.0>

0000000080008d1e <.LBB0_31>:
    80008d1e:	0001e617          	auipc	a2,0x1e
    80008d22:	6a260613          	addi	a2,a2,1698 # 800273c0 <.L__unnamed_2>
    80008d26:	45f1                	li	a1,28
    80008d28:	00019097          	auipc	ra,0x19
    80008d2c:	54e080e7          	jalr	1358(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080008d32 <.LBB0_32>:
                (guard.outstanding+1) as usize * MAXOPBLOCKS > LOGSIZE
    80008d32:	0001e517          	auipc	a0,0x1e
    80008d36:	6ae50513          	addi	a0,a0,1710 # 800273e0 <str.0>

0000000080008d3a <.LBB0_33>:
    80008d3a:	0001e617          	auipc	a2,0x1e
    80008d3e:	6c660613          	addi	a2,a2,1734 # 80027400 <.L__unnamed_3>
    80008d42:	45f1                	li	a1,28
    80008d44:	00019097          	auipc	ra,0x19
    80008d48:	532080e7          	jalr	1330(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080008d4e <.LBB0_34>:
    80008d4e:	0001e517          	auipc	a0,0x1e
    80008d52:	6d250513          	addi	a0,a0,1746 # 80027420 <str.1>

0000000080008d56 <.LBB0_35>:
    80008d56:	0001e617          	auipc	a2,0x1e
    80008d5a:	6aa60613          	addi	a2,a2,1706 # 80027400 <.L__unnamed_3>
    80008d5e:	02100593          	li	a1,33
    80008d62:	00019097          	auipc	ra,0x19
    80008d66:	514080e7          	jalr	1300(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080008d6c <.LBB0_36>:
                1 + guard.lh.len as usize +
    80008d6c:	0001e517          	auipc	a0,0x1e
    80008d70:	67450513          	addi	a0,a0,1652 # 800273e0 <str.0>

0000000080008d74 <.LBB0_37>:
    80008d74:	0001e617          	auipc	a2,0x1e
    80008d78:	64c60613          	addi	a2,a2,1612 # 800273c0 <.L__unnamed_2>
    80008d7c:	45f1                	li	a1,28
    80008d7e:	00019097          	auipc	ra,0x19
    80008d82:	4f8080e7          	jalr	1272(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080008d88 <.LBB0_38>:
                guard.outstanding += 1;
    80008d88:	0001e517          	auipc	a0,0x1e
    80008d8c:	65850513          	addi	a0,a0,1624 # 800273e0 <str.0>

0000000080008d90 <.LBB0_39>:
    80008d90:	0001e617          	auipc	a2,0x1e
    80008d94:	6d060613          	addi	a2,a2,1744 # 80027460 <.L__unnamed_4>
    80008d98:	45f1                	li	a1,28
    80008d9a:	00019097          	auipc	ra,0x19
    80008d9e:	4dc080e7          	jalr	1244(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$5write17ha48e3edeecccac4fE:

0000000080008da4 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$5write17ha48e3edeecccac4fE>:

    /// Accept a buffer, write it into the log and then release the buffer.
    /// This function will pin this buf in the cache until the log commits.
    pub fn write(&self, buf: Buf<'_>) {
    80008da4:	7109                	addi	sp,sp,-384
    80008da6:	fe86                	sd	ra,376(sp)
    80008da8:	e5ae                	sd	a1,200(sp)
    80008daa:	eeaa                	sd	a0,344(sp)
        let mut guard = self.acquire();
    80008dac:	00007097          	auipc	ra,0x7
    80008db0:	602080e7          	jalr	1538(ra) # 800103ae <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h25a8532f298de6d8E>
    80008db4:	edaa                	sd	a0,216(sp)
    80008db6:	a009                	j	80008db8 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$5write17ha48e3edeecccac4fE+0x14>
    80008db8:	09a8                	addi	a0,sp,216
        
        if (guard.lh.len+1) as usize >= LOGSIZE || guard.lh.len+1 >= guard.size {
    80008dba:	00009097          	auipc	ra,0x9
    80008dbe:	840080e7          	jalr	-1984(ra) # 800115fa <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h89fb3cfbc0625c4cE>
    80008dc2:	e1aa                	sd	a0,192(sp)
    80008dc4:	a02d                	j	80008dee <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$5write17ha48e3edeecccac4fE+0x4a>
    80008dc6:	4505                	li	a0,1
    80008dc8:	0ea103a3          	sb	a0,231(sp)
    80008dcc:	a821                	j	80008de4 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$5write17ha48e3edeecccac4fE+0x40>
    80008dce:	4501                	li	a0,0
    80008dd0:	0ea103a3          	sb	a0,231(sp)
    80008dd4:	a801                	j	80008de4 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$5write17ha48e3edeecccac4fE+0x40>
    80008dd6:	09a8                	addi	a0,sp,216
    80008dd8:	00009097          	auipc	ra,0x9
    80008ddc:	822080e7          	jalr	-2014(ra) # 800115fa <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h89fb3cfbc0625c4cE>
    80008de0:	fd2a                	sd	a0,184(sp)
    80008de2:	a80d                	j	80008e14 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$5write17ha48e3edeecccac4fE+0x70>
    80008de4:	0e714503          	lbu	a0,231(sp)
    80008de8:	8905                	andi	a0,a0,1
    80008dea:	ed39                	bnez	a0,80008e48 <.LBB1_59>
    80008dec:	a8ad                	j	80008e66 <.LBB1_60+0x16>
    80008dee:	650e                	ld	a0,192(sp)
    80008df0:	01056503          	lwu	a0,16(a0)
    80008df4:	00150593          	addi	a1,a0,1
    80008df8:	f92e                	sd	a1,176(sp)
    80008dfa:	02059513          	slli	a0,a1,0x20
    80008dfe:	9101                	srli	a0,a0,0x20
    80008e00:	2eb51063          	bne	a0,a1,800090e0 <.LBB1_65>
    80008e04:	a009                	j	80008e06 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$5write17ha48e3edeecccac4fE+0x62>
    80008e06:	754a                	ld	a0,176(sp)
    80008e08:	0005059b          	sext.w	a1,a0
    80008e0c:	4575                	li	a0,29
    80008e0e:	fab56ce3          	bltu	a0,a1,80008dc6 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$5write17ha48e3edeecccac4fE+0x22>
    80008e12:	b7d1                	j	80008dd6 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$5write17ha48e3edeecccac4fE+0x32>
    80008e14:	756a                	ld	a0,184(sp)
    80008e16:	01056503          	lwu	a0,16(a0)
    80008e1a:	00150593          	addi	a1,a0,1
    80008e1e:	f52e                	sd	a1,168(sp)
    80008e20:	02059513          	slli	a0,a1,0x20
    80008e24:	9101                	srli	a0,a0,0x20
    80008e26:	2cb51b63          	bne	a0,a1,800090fc <.LBB1_67>
    80008e2a:	a009                	j	80008e2c <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$5write17ha48e3edeecccac4fE+0x88>
    80008e2c:	09a8                	addi	a0,sp,216
    80008e2e:	00008097          	auipc	ra,0x8
    80008e32:	7cc080e7          	jalr	1996(ra) # 800115fa <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h89fb3cfbc0625c4cE>
    80008e36:	f12a                	sd	a0,160(sp)
    80008e38:	a009                	j	80008e3a <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$5write17ha48e3edeecccac4fE+0x96>
    80008e3a:	752a                	ld	a0,168(sp)
    80008e3c:	758a                	ld	a1,160(sp)
    80008e3e:	41cc                	lw	a1,4(a1)
    80008e40:	2501                	sext.w	a0,a0
    80008e42:	f8b572e3          	bgeu	a0,a1,80008dc6 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$5write17ha48e3edeecccac4fE+0x22>
    80008e46:	b761                	j	80008dce <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$5write17ha48e3edeecccac4fE+0x2a>

0000000080008e48 <.LBB1_59>:
            panic!("log: not enough space for ongoing transactions");
    80008e48:	0001e517          	auipc	a0,0x1e
    80008e4c:	66050513          	addi	a0,a0,1632 # 800274a8 <.L__unnamed_5>

0000000080008e50 <.LBB1_60>:
    80008e50:	0001e617          	auipc	a2,0x1e
    80008e54:	68860613          	addi	a2,a2,1672 # 800274d8 <.L__unnamed_6>
    80008e58:	02e00593          	li	a1,46
    80008e5c:	00019097          	auipc	ra,0x19
    80008e60:	41a080e7          	jalr	1050(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80008e64:	0000                	unimp
    80008e66:	09a8                	addi	a0,sp,216
        }
        if guard.outstanding < 1 {
    80008e68:	00008097          	auipc	ra,0x8
    80008e6c:	792080e7          	jalr	1938(ra) # 800115fa <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h89fb3cfbc0625c4cE>
    80008e70:	ed2a                	sd	a0,152(sp)
    80008e72:	a009                	j	80008e74 <.LBB1_60+0x24>
    80008e74:	656a                	ld	a0,152(sp)
    80008e76:	4548                	lw	a0,12(a0)
    80008e78:	4581                	li	a1,0
    80008e7a:	02b51263          	bne	a0,a1,80008e9e <.LBB1_62+0x16>
    80008e7e:	a009                	j	80008e80 <.LBB1_61>

0000000080008e80 <.LBB1_61>:
            panic!("log: this log write is out of recording");
    80008e80:	0001e517          	auipc	a0,0x1e
    80008e84:	67050513          	addi	a0,a0,1648 # 800274f0 <.L__unnamed_7>

0000000080008e88 <.LBB1_62>:
    80008e88:	0001e617          	auipc	a2,0x1e
    80008e8c:	69060613          	addi	a2,a2,1680 # 80027518 <.L__unnamed_8>
    80008e90:	02700593          	li	a1,39
    80008e94:	00019097          	auipc	ra,0x19
    80008e98:	3e2080e7          	jalr	994(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80008e9c:	0000                	unimp
    80008e9e:	09a8                	addi	a0,sp,216
        }

        // record the buf's blockno in the log header
        for i in 0..guard.lh.len {
    80008ea0:	00008097          	auipc	ra,0x8
    80008ea4:	75a080e7          	jalr	1882(ra) # 800115fa <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h89fb3cfbc0625c4cE>
    80008ea8:	e92a                	sd	a0,144(sp)
    80008eaa:	a009                	j	80008eac <.LBB1_62+0x24>
    80008eac:	654a                	ld	a0,144(sp)
    80008eae:	490c                	lw	a1,16(a0)
    80008eb0:	4501                	li	a0,0
    80008eb2:	d5aa                	sw	a0,232(sp)
    80008eb4:	d7ae                	sw	a1,236(sp)
    80008eb6:	00003097          	auipc	ra,0x3
    80008eba:	b8e080e7          	jalr	-1138(ra) # 8000ba44 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h2819071fbc006758E>
    80008ebe:	e12a                	sd	a0,128(sp)
    80008ec0:	e52e                	sd	a1,136(sp)
    80008ec2:	a009                	j	80008ec4 <.LBB1_62+0x3c>
    80008ec4:	652a                	ld	a0,136(sp)
    80008ec6:	658a                	ld	a1,128(sp)
    80008ec8:	d9ae                	sw	a1,240(sp)
    80008eca:	dbaa                	sw	a0,244(sp)
    80008ecc:	a009                	j	80008ece <.LBB1_62+0x46>
    80008ece:	1988                	addi	a0,sp,240
    80008ed0:	00003097          	auipc	ra,0x3
    80008ed4:	a06080e7          	jalr	-1530(ra) # 8000b8d6 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17he2f0092c6efc86cdE>
    80008ed8:	ddaa                	sw	a0,248(sp)
    80008eda:	dfae                	sw	a1,252(sp)
    80008edc:	a009                	j	80008ede <.LBB1_62+0x56>
    80008ede:	0f816503          	lwu	a0,248(sp)
    80008ee2:	4581                	li	a1,0
    80008ee4:	00b50463          	beq	a0,a1,80008eec <.LBB1_62+0x64>
    80008ee8:	a009                	j	80008eea <.LBB1_62+0x62>
    80008eea:	a809                	j	80008efc <.LBB1_62+0x74>
    80008eec:	09a8                	addi	a0,sp,216
                drop(guard);
                drop(buf);
                return;
            }
        }
        if (guard.lh.len+2) as usize >= LOGSIZE || guard.lh.len+2 >= guard.size {
    80008eee:	00008097          	auipc	ra,0x8
    80008ef2:	70c080e7          	jalr	1804(ra) # 800115fa <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h89fb3cfbc0625c4cE>
    80008ef6:	fcaa                	sd	a0,120(sp)
    80008ef8:	a865                	j	80008fb0 <.LBB1_62+0x128>
        for i in 0..guard.lh.len {
    80008efa:	0000                	unimp
    80008efc:	0fc16503          	lwu	a0,252(sp)
    80008f00:	f4aa                	sd	a0,104(sp)
    80008f02:	16a12223          	sw	a0,356(sp)
    80008f06:	16a12423          	sw	a0,360(sp)
    80008f0a:	16a12623          	sw	a0,364(sp)
    80008f0e:	09a8                	addi	a0,sp,216
            if guard.lh.blocknos[i as usize] == buf.read_blockno() {
    80008f10:	00008097          	auipc	ra,0x8
    80008f14:	6ea080e7          	jalr	1770(ra) # 800115fa <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h89fb3cfbc0625c4cE>
    80008f18:	f8aa                	sd	a0,112(sp)
    80008f1a:	a009                	j	80008f1c <.LBB1_62+0x94>
    80008f1c:	7526                	ld	a0,104(sp)
    80008f1e:	0005059b          	sext.w	a1,a0
    80008f22:	f0aa                	sd	a0,96(sp)
    80008f24:	4571                	li	a0,28
    80008f26:	1eb56963          	bltu	a0,a1,80009118 <.LBB1_68+0x14>
    80008f2a:	a009                	j	80008f2c <.LBB1_62+0xa4>
    80008f2c:	652e                	ld	a0,200(sp)
    80008f2e:	75c6                	ld	a1,112(sp)
    80008f30:	7606                	ld	a2,96(sp)
    80008f32:	060a                	slli	a2,a2,0x2
    80008f34:	95b2                	add	a1,a1,a2
    80008f36:	0145e583          	lwu	a1,20(a1)
    80008f3a:	e8ae                	sd	a1,80(sp)
    80008f3c:	ffffa097          	auipc	ra,0xffffa
    80008f40:	7da080e7          	jalr	2010(ra) # 80003716 <_ZN6kernel2fs3bio3Buf12read_blockno17ha2cb61f265147e82E>
    80008f44:	ecaa                	sd	a0,88(sp)
    80008f46:	a009                	j	80008f48 <.LBB1_62+0xc0>
    80008f48:	6546                	ld	a0,80(sp)
    80008f4a:	65e6                	ld	a1,88(sp)
    80008f4c:	2581                	sext.w	a1,a1
    80008f4e:	2501                	sext.w	a0,a0
    80008f50:	00b51963          	bne	a0,a1,80008f62 <.LBB1_62+0xda>
    80008f54:	a009                	j	80008f56 <.LBB1_62+0xce>
                drop(guard);
    80008f56:	656e                	ld	a0,216(sp)
    80008f58:	00014097          	auipc	ra,0x14
    80008f5c:	1cc080e7          	jalr	460(ra) # 8001d124 <_ZN4core3mem4drop17haa2d2dc72bd2e81bE>
    80008f60:	a011                	j	80008f64 <.LBB1_62+0xdc>
        for i in 0..guard.lh.len {
    80008f62:	b7b5                	j	80008ece <.LBB1_62+0x46>
                drop(buf);
    80008f64:	652e                	ld	a0,200(sp)
    80008f66:	710c                	ld	a1,32(a0)
    80008f68:	f22e                	sd	a1,288(sp)
    80008f6a:	6d0c                	ld	a1,24(a0)
    80008f6c:	ee2e                	sd	a1,280(sp)
    80008f6e:	690c                	ld	a1,16(a0)
    80008f70:	ea2e                	sd	a1,272(sp)
    80008f72:	650c                	ld	a1,8(a0)
    80008f74:	e62e                	sd	a1,264(sp)
    80008f76:	6108                	ld	a0,0(a0)
    80008f78:	e22a                	sd	a0,256(sp)
    80008f7a:	0208                	addi	a0,sp,256
    80008f7c:	00014097          	auipc	ra,0x14
    80008f80:	1de080e7          	jalr	478(ra) # 8001d15a <_ZN4core3mem4drop17hda1e19029436deb9E>
    80008f84:	a009                	j	80008f86 <.LBB1_62+0xfe>
        let len = guard.lh.len as usize;
        guard.lh.blocknos[len] = buf.read_blockno();
        guard.lh.len += 1;
        drop(guard);
        drop(buf);
    }
    80008f86:	aa91                	j	800090da <.LBB1_64+0xc8>
    80008f88:	4505                	li	a0,1
        if (guard.lh.len+2) as usize >= LOGSIZE || guard.lh.len+2 >= guard.size {
    80008f8a:	12a107a3          	sb	a0,303(sp)
    80008f8e:	a821                	j	80008fa6 <.LBB1_62+0x11e>
    80008f90:	4501                	li	a0,0
    80008f92:	12a107a3          	sb	a0,303(sp)
    80008f96:	a801                	j	80008fa6 <.LBB1_62+0x11e>
    80008f98:	09a8                	addi	a0,sp,216
    80008f9a:	00008097          	auipc	ra,0x8
    80008f9e:	660080e7          	jalr	1632(ra) # 800115fa <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h89fb3cfbc0625c4cE>
    80008fa2:	e4aa                	sd	a0,72(sp)
    80008fa4:	a80d                	j	80008fd6 <.LBB1_62+0x14e>
    80008fa6:	12f14503          	lbu	a0,303(sp)
    80008faa:	8905                	andi	a0,a0,1
    80008fac:	ed39                	bnez	a0,8000900a <.LBB1_63>
    80008fae:	a8ad                	j	80009028 <.LBB1_64+0x16>
    80008fb0:	7566                	ld	a0,120(sp)
    80008fb2:	01056503          	lwu	a0,16(a0)
    80008fb6:	00250593          	addi	a1,a0,2
    80008fba:	e0ae                	sd	a1,64(sp)
    80008fbc:	02059513          	slli	a0,a1,0x20
    80008fc0:	9101                	srli	a0,a0,0x20
    80008fc2:	16b51663          	bne	a0,a1,8000912e <.LBB1_70>
    80008fc6:	a009                	j	80008fc8 <.LBB1_62+0x140>
    80008fc8:	6506                	ld	a0,64(sp)
    80008fca:	0005059b          	sext.w	a1,a0
    80008fce:	4575                	li	a0,29
    80008fd0:	fab56ce3          	bltu	a0,a1,80008f88 <.LBB1_62+0x100>
    80008fd4:	b7d1                	j	80008f98 <.LBB1_62+0x110>
    80008fd6:	6526                	ld	a0,72(sp)
    80008fd8:	01056503          	lwu	a0,16(a0)
    80008fdc:	00250593          	addi	a1,a0,2
    80008fe0:	fc2e                	sd	a1,56(sp)
    80008fe2:	02059513          	slli	a0,a1,0x20
    80008fe6:	9101                	srli	a0,a0,0x20
    80008fe8:	16b51163          	bne	a0,a1,8000914a <.LBB1_72>
    80008fec:	a009                	j	80008fee <.LBB1_62+0x166>
    80008fee:	09a8                	addi	a0,sp,216
    80008ff0:	00008097          	auipc	ra,0x8
    80008ff4:	60a080e7          	jalr	1546(ra) # 800115fa <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h89fb3cfbc0625c4cE>
    80008ff8:	f82a                	sd	a0,48(sp)
    80008ffa:	a009                	j	80008ffc <.LBB1_62+0x174>
    80008ffc:	7562                	ld	a0,56(sp)
    80008ffe:	75c2                	ld	a1,48(sp)
    80009000:	41cc                	lw	a1,4(a1)
    80009002:	2501                	sext.w	a0,a0
    80009004:	f8b572e3          	bgeu	a0,a1,80008f88 <.LBB1_62+0x100>
    80009008:	b761                	j	80008f90 <.LBB1_62+0x108>

000000008000900a <.LBB1_63>:
            panic!("log: not enough space for this transaction");
    8000900a:	0001e517          	auipc	a0,0x1e
    8000900e:	56e50513          	addi	a0,a0,1390 # 80027578 <.L__unnamed_9>

0000000080009012 <.LBB1_64>:
    80009012:	0001e617          	auipc	a2,0x1e
    80009016:	59660613          	addi	a2,a2,1430 # 800275a8 <.L__unnamed_10>
    8000901a:	02a00593          	li	a1,42
    8000901e:	00019097          	auipc	ra,0x19
    80009022:	258080e7          	jalr	600(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80009026:	0000                	unimp
        unsafe { buf.pin(); }
    80009028:	652e                	ld	a0,200(sp)
    8000902a:	ffffa097          	auipc	ra,0xffffa
    8000902e:	7a0080e7          	jalr	1952(ra) # 800037ca <_ZN6kernel2fs3bio3Buf3pin17hb02a509b70e70322E>
    80009032:	a009                	j	80009034 <.LBB1_64+0x22>
    80009034:	09a8                	addi	a0,sp,216
        let len = guard.lh.len as usize;
    80009036:	00008097          	auipc	ra,0x8
    8000903a:	5c4080e7          	jalr	1476(ra) # 800115fa <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h89fb3cfbc0625c4cE>
    8000903e:	f42a                	sd	a0,40(sp)
    80009040:	a009                	j	80009042 <.LBB1_64+0x30>
    80009042:	652e                	ld	a0,200(sp)
    80009044:	75a2                	ld	a1,40(sp)
    80009046:	0105e583          	lwu	a1,16(a1)
    8000904a:	ec2e                	sd	a1,24(sp)
    8000904c:	faae                	sd	a1,368(sp)
        guard.lh.blocknos[len] = buf.read_blockno();
    8000904e:	ffffa097          	auipc	ra,0xffffa
    80009052:	6c8080e7          	jalr	1736(ra) # 80003716 <_ZN6kernel2fs3bio3Buf12read_blockno17ha2cb61f265147e82E>
    80009056:	f02a                	sd	a0,32(sp)
    80009058:	a009                	j	8000905a <.LBB1_64+0x48>
    8000905a:	09a8                	addi	a0,sp,216
    8000905c:	00008097          	auipc	ra,0x8
    80009060:	67c080e7          	jalr	1660(ra) # 800116d8 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h6a09efacfb59499dE>
    80009064:	e82a                	sd	a0,16(sp)
    80009066:	a009                	j	80009068 <.LBB1_64+0x56>
    80009068:	65e2                	ld	a1,24(sp)
    8000906a:	4571                	li	a0,28
    8000906c:	0eb56d63          	bltu	a0,a1,80009166 <.LBB1_73+0x14>
    80009070:	a009                	j	80009072 <.LBB1_64+0x60>
    80009072:	7502                	ld	a0,32(sp)
    80009074:	65c2                	ld	a1,16(sp)
    80009076:	6662                	ld	a2,24(sp)
    80009078:	060a                	slli	a2,a2,0x2
    8000907a:	95b2                	add	a1,a1,a2
    8000907c:	c9c8                	sw	a0,20(a1)
    8000907e:	09a8                	addi	a0,sp,216
        guard.lh.len += 1;
    80009080:	00008097          	auipc	ra,0x8
    80009084:	658080e7          	jalr	1624(ra) # 800116d8 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h6a09efacfb59499dE>
    80009088:	e42a                	sd	a0,8(sp)
    8000908a:	a009                	j	8000908c <.LBB1_64+0x7a>
    8000908c:	6522                	ld	a0,8(sp)
    8000908e:	01056503          	lwu	a0,16(a0)
    80009092:	00150593          	addi	a1,a0,1
    80009096:	e02e                	sd	a1,0(sp)
    80009098:	02059513          	slli	a0,a1,0x20
    8000909c:	9101                	srli	a0,a0,0x20
    8000909e:	0cb51f63          	bne	a0,a1,8000917c <.LBB1_75>
    800090a2:	a009                	j	800090a4 <.LBB1_64+0x92>
    800090a4:	6502                	ld	a0,0(sp)
    800090a6:	65a2                	ld	a1,8(sp)
    800090a8:	c988                	sw	a0,16(a1)
        drop(guard);
    800090aa:	656e                	ld	a0,216(sp)
    800090ac:	00014097          	auipc	ra,0x14
    800090b0:	078080e7          	jalr	120(ra) # 8001d124 <_ZN4core3mem4drop17haa2d2dc72bd2e81bE>
    800090b4:	a009                	j	800090b6 <.LBB1_64+0xa4>
        drop(buf);
    800090b6:	652e                	ld	a0,200(sp)
    800090b8:	710c                	ld	a1,32(a0)
    800090ba:	eaae                	sd	a1,336(sp)
    800090bc:	6d0c                	ld	a1,24(a0)
    800090be:	e6ae                	sd	a1,328(sp)
    800090c0:	690c                	ld	a1,16(a0)
    800090c2:	e2ae                	sd	a1,320(sp)
    800090c4:	650c                	ld	a1,8(a0)
    800090c6:	fe2e                	sd	a1,312(sp)
    800090c8:	6108                	ld	a0,0(a0)
    800090ca:	fa2a                	sd	a0,304(sp)
    800090cc:	1a08                	addi	a0,sp,304
    800090ce:	00014097          	auipc	ra,0x14
    800090d2:	08c080e7          	jalr	140(ra) # 8001d15a <_ZN4core3mem4drop17hda1e19029436deb9E>
    800090d6:	a009                	j	800090d8 <.LBB1_64+0xc6>
    }
    800090d8:	a009                	j	800090da <.LBB1_64+0xc8>
    800090da:	70f6                	ld	ra,376(sp)
    800090dc:	6119                	addi	sp,sp,384
    800090de:	8082                	ret

00000000800090e0 <.LBB1_65>:
        if (guard.lh.len+1) as usize >= LOGSIZE || guard.lh.len+1 >= guard.size {
    800090e0:	0001e517          	auipc	a0,0x1e
    800090e4:	30050513          	addi	a0,a0,768 # 800273e0 <str.0>

00000000800090e8 <.LBB1_66>:
    800090e8:	0001e617          	auipc	a2,0x1e
    800090ec:	39060613          	addi	a2,a2,912 # 80027478 <.L__unnamed_11>
    800090f0:	45f1                	li	a1,28
    800090f2:	00019097          	auipc	ra,0x19
    800090f6:	184080e7          	jalr	388(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

00000000800090fc <.LBB1_67>:
    800090fc:	0001e517          	auipc	a0,0x1e
    80009100:	2e450513          	addi	a0,a0,740 # 800273e0 <str.0>

0000000080009104 <.LBB1_68>:
    80009104:	0001e617          	auipc	a2,0x1e
    80009108:	38c60613          	addi	a2,a2,908 # 80027490 <.L__unnamed_12>
    8000910c:	45f1                	li	a1,28
    8000910e:	00019097          	auipc	ra,0x19
    80009112:	168080e7          	jalr	360(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80009116:	0000                	unimp
            if guard.lh.blocknos[i as usize] == buf.read_blockno() {
    80009118:	7506                	ld	a0,96(sp)

000000008000911a <.LBB1_69>:
    8000911a:	0001e617          	auipc	a2,0x1e
    8000911e:	41660613          	addi	a2,a2,1046 # 80027530 <.L__unnamed_13>
    80009122:	45f5                	li	a1,29
    80009124:	00019097          	auipc	ra,0x19
    80009128:	17e080e7          	jalr	382(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

000000008000912e <.LBB1_70>:
        if (guard.lh.len+2) as usize >= LOGSIZE || guard.lh.len+2 >= guard.size {
    8000912e:	0001e517          	auipc	a0,0x1e
    80009132:	2b250513          	addi	a0,a0,690 # 800273e0 <str.0>

0000000080009136 <.LBB1_71>:
    80009136:	0001e617          	auipc	a2,0x1e
    8000913a:	41260613          	addi	a2,a2,1042 # 80027548 <.L__unnamed_14>
    8000913e:	45f1                	li	a1,28
    80009140:	00019097          	auipc	ra,0x19
    80009144:	136080e7          	jalr	310(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008000914a <.LBB1_72>:
    8000914a:	0001e517          	auipc	a0,0x1e
    8000914e:	29650513          	addi	a0,a0,662 # 800273e0 <str.0>

0000000080009152 <.LBB1_73>:
    80009152:	0001e617          	auipc	a2,0x1e
    80009156:	40e60613          	addi	a2,a2,1038 # 80027560 <.L__unnamed_15>
    8000915a:	45f1                	li	a1,28
    8000915c:	00019097          	auipc	ra,0x19
    80009160:	11a080e7          	jalr	282(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80009164:	0000                	unimp
        guard.lh.blocknos[len] = buf.read_blockno();
    80009166:	6562                	ld	a0,24(sp)

0000000080009168 <.LBB1_74>:
    80009168:	0001e617          	auipc	a2,0x1e
    8000916c:	45860613          	addi	a2,a2,1112 # 800275c0 <.L__unnamed_16>
    80009170:	45f5                	li	a1,29
    80009172:	00019097          	auipc	ra,0x19
    80009176:	130080e7          	jalr	304(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

000000008000917c <.LBB1_75>:
        guard.lh.len += 1;
    8000917c:	0001e517          	auipc	a0,0x1e
    80009180:	26450513          	addi	a0,a0,612 # 800273e0 <str.0>

0000000080009184 <.LBB1_76>:
    80009184:	0001e617          	auipc	a2,0x1e
    80009188:	45460613          	addi	a2,a2,1108 # 800275d8 <.L__unnamed_17>
    8000918c:	45f1                	li	a1,28
    8000918e:	00019097          	auipc	ra,0x19
    80009192:	0e8080e7          	jalr	232(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE:

0000000080009198 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>:

    /// It should be called at the end of file system call.
    /// It will commit the log if this is the last outstanding op.
    pub fn end_op(&self) {
    80009198:	7171                	addi	sp,sp,-176
    8000919a:	f506                	sd	ra,168(sp)
    8000919c:	f4aa                	sd	a0,104(sp)
    8000919e:	e92a                	sd	a0,144(sp)
    800091a0:	4501                	li	a0,0
        let mut log_ptr: *mut Log = ptr::null_mut();
    800091a2:	fcaa                	sd	a0,120(sp)
    800091a4:	a009                	j	800091a6 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE+0xe>

        let mut guard = self.acquire();
    800091a6:	7526                	ld	a0,104(sp)
    800091a8:	00007097          	auipc	ra,0x7
    800091ac:	206080e7          	jalr	518(ra) # 800103ae <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h25a8532f298de6d8E>
    800091b0:	e12a                	sd	a0,128(sp)
    800091b2:	a009                	j	800091b4 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE+0x1c>
    800091b4:	0108                	addi	a0,sp,128
        guard.outstanding -= 1;
    800091b6:	00008097          	auipc	ra,0x8
    800091ba:	522080e7          	jalr	1314(ra) # 800116d8 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h6a09efacfb59499dE>
    800091be:	f0aa                	sd	a0,96(sp)
    800091c0:	a009                	j	800091c2 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE+0x2a>
    800091c2:	7506                	ld	a0,96(sp)
    800091c4:	00c56503          	lwu	a0,12(a0)
    800091c8:	fff50593          	addi	a1,a0,-1
    800091cc:	ecae                	sd	a1,88(sp)
    800091ce:	02059513          	slli	a0,a1,0x20
    800091d2:	9101                	srli	a0,a0,0x20
    800091d4:	16b51063          	bne	a0,a1,80009334 <.LBB2_35>
    800091d8:	a009                	j	800091da <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE+0x42>
    800091da:	6566                	ld	a0,88(sp)
    800091dc:	7586                	ld	a1,96(sp)
    800091de:	c5c8                	sw	a0,12(a1)
    800091e0:	0108                	addi	a0,sp,128
        if guard.committing {
    800091e2:	00008097          	auipc	ra,0x8
    800091e6:	418080e7          	jalr	1048(ra) # 800115fa <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h89fb3cfbc0625c4cE>
    800091ea:	e8aa                	sd	a0,80(sp)
    800091ec:	a009                	j	800091ee <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE+0x56>
    800091ee:	6546                	ld	a0,80(sp)
    800091f0:	08854503          	lbu	a0,136(a0)
    800091f4:	8905                	andi	a0,a0,1
    800091f6:	4581                	li	a1,0
    800091f8:	02b50263          	beq	a0,a1,8000921c <.LBB2_31+0x16>
    800091fc:	a009                	j	800091fe <.LBB2_30>

00000000800091fe <.LBB2_30>:
            // it is not allowed to start a fs op while the log is commiting
            panic!("log: end fs op while the log is committing");
    800091fe:	0001e517          	auipc	a0,0x1e
    80009202:	43350513          	addi	a0,a0,1075 # 80027631 <.L__unnamed_18>

0000000080009206 <.LBB2_31>:
    80009206:	0001e617          	auipc	a2,0x1e
    8000920a:	45a60613          	addi	a2,a2,1114 # 80027660 <.L__unnamed_19>
    8000920e:	02a00593          	li	a1,42
    80009212:	00019097          	auipc	ra,0x19
    80009216:	064080e7          	jalr	100(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8000921a:	0000                	unimp
    8000921c:	0108                	addi	a0,sp,128
        }
        if guard.outstanding == 0 {
    8000921e:	00008097          	auipc	ra,0x8
    80009222:	3dc080e7          	jalr	988(ra) # 800115fa <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h89fb3cfbc0625c4cE>
    80009226:	e4aa                	sd	a0,72(sp)
    80009228:	a009                	j	8000922a <.LBB2_31+0x24>
    8000922a:	6526                	ld	a0,72(sp)
    8000922c:	4548                	lw	a0,12(a0)
    8000922e:	4581                	li	a1,0
    80009230:	00b51a63          	bne	a0,a1,80009244 <.LBB2_31+0x3e>
    80009234:	a009                	j	80009236 <.LBB2_31+0x30>
    80009236:	0108                	addi	a0,sp,128
            guard.committing = true;
    80009238:	00008097          	auipc	ra,0x8
    8000923c:	4a0080e7          	jalr	1184(ra) # 800116d8 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h6a09efacfb59499dE>
    80009240:	e0aa                	sd	a0,64(sp)
    80009242:	a801                	j	80009252 <.LBB2_31+0x4c>
    80009244:	0108                	addi	a0,sp,128
            log_ptr = guard.deref_mut() as *mut Log;
        } else {
            let channel = guard.deref() as *const Log as usize;
    80009246:	00008097          	auipc	ra,0x8
    8000924a:	3b4080e7          	jalr	948(ra) # 800115fa <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h89fb3cfbc0625c4cE>
    8000924e:	fc2a                	sd	a0,56(sp)
    80009250:	a839                	j	8000926e <.LBB2_31+0x68>
    80009252:	6586                	ld	a1,64(sp)
    80009254:	4505                	li	a0,1
            guard.committing = true;
    80009256:	08a58423          	sb	a0,136(a1)
    8000925a:	0108                	addi	a0,sp,128
            log_ptr = guard.deref_mut() as *mut Log;
    8000925c:	00008097          	auipc	ra,0x8
    80009260:	47c080e7          	jalr	1148(ra) # 800116d8 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h6a09efacfb59499dE>
    80009264:	f82a                	sd	a0,48(sp)
    80009266:	a009                	j	80009268 <.LBB2_31+0x62>
    80009268:	7542                	ld	a0,48(sp)
    8000926a:	fcaa                	sd	a0,120(sp)
        if guard.outstanding == 0 {
    8000926c:	a829                	j	80009286 <.LBB2_32+0x14>
            let channel = guard.deref() as *const Log as usize;
    8000926e:	75e2                	ld	a1,56(sp)
    80009270:	ed2e                	sd	a1,152(sp)

0000000080009272 <.LBB2_32>:
            unsafe { PROC_MANAGER.wake_up(channel); }
    80009272:	0004e517          	auipc	a0,0x4e
    80009276:	32e50513          	addi	a0,a0,814 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    8000927a:	00004097          	auipc	ra,0x4
    8000927e:	686080e7          	jalr	1670(ra) # 8000d900 <_ZN6kernel7process7manager11ProcManager7wake_up17ha46b4d15ac07187bE>
    80009282:	a009                	j	80009284 <.LBB2_32+0x12>
        if guard.outstanding == 0 {
    80009284:	a009                	j	80009286 <.LBB2_32+0x14>
        }
        drop(guard);
    80009286:	650a                	ld	a0,128(sp)
    80009288:	00014097          	auipc	ra,0x14
    8000928c:	e9c080e7          	jalr	-356(ra) # 8001d124 <_ZN4core3mem4drop17haa2d2dc72bd2e81bE>
    80009290:	a009                	j	80009292 <.LBB2_32+0x20>

        if !log_ptr.is_null() {
    80009292:	7566                	ld	a0,120(sp)
    80009294:	00000097          	auipc	ra,0x0
    80009298:	8fc080e7          	jalr	-1796(ra) # 80008b90 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hcdcddf7362d728f0E>
    8000929c:	f42a                	sd	a0,40(sp)
    8000929e:	a009                	j	800092a0 <.LBB2_32+0x2e>
    800092a0:	7522                	ld	a0,40(sp)
    800092a2:	e909                	bnez	a0,800092b4 <.LBB2_32+0x42>
    800092a4:	a009                	j	800092a6 <.LBB2_32+0x34>
            // SAFETY: Call commit without holding any lock.
            //        And the committing flag protects the log op.
            unsafe { log_ptr.as_mut().unwrap().commit(); }
    800092a6:	7566                	ld	a0,120(sp)
    800092a8:	00000097          	auipc	ra,0x0
    800092ac:	894080e7          	jalr	-1900(ra) # 80008b3c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17ha6d203c03ed13dfdE>
    800092b0:	f02a                	sd	a0,32(sp)
    800092b2:	a011                	j	800092b6 <.LBB2_32+0x44>
        if !log_ptr.is_null() {
    800092b4:	a8ad                	j	8000932e <.LBB2_34+0x20>
            unsafe { log_ptr.as_mut().unwrap().commit(); }
    800092b6:	7502                	ld	a0,32(sp)

00000000800092b8 <.LBB2_33>:
    800092b8:	0001e597          	auipc	a1,0x1e
    800092bc:	3c058593          	addi	a1,a1,960 # 80027678 <.L__unnamed_20>
    800092c0:	00006097          	auipc	ra,0x6
    800092c4:	b64080e7          	jalr	-1180(ra) # 8000ee24 <_ZN4core6option15Option$LT$T$GT$6unwrap17hc367d03244a4b027E>
    800092c8:	ec2a                	sd	a0,24(sp)
    800092ca:	a009                	j	800092cc <.LBB2_33+0x14>
    800092cc:	6562                	ld	a0,24(sp)
    800092ce:	00007097          	auipc	ra,0x7
    800092d2:	8ac080e7          	jalr	-1876(ra) # 8000fb7a <_ZN6kernel2fs3log3Log6commit17hb6044c935645b581E>
    800092d6:	a009                	j	800092d8 <.LBB2_33+0x20>
            let mut guard = self.acquire();
    800092d8:	7526                	ld	a0,104(sp)
    800092da:	00007097          	auipc	ra,0x7
    800092de:	0d4080e7          	jalr	212(ra) # 800103ae <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h25a8532f298de6d8E>
    800092e2:	e52a                	sd	a0,136(sp)
    800092e4:	a009                	j	800092e6 <.LBB2_33+0x2e>
    800092e6:	0128                	addi	a0,sp,136
            guard.committing = false;
    800092e8:	00008097          	auipc	ra,0x8
    800092ec:	3f0080e7          	jalr	1008(ra) # 800116d8 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h6a09efacfb59499dE>
    800092f0:	e82a                	sd	a0,16(sp)
    800092f2:	a009                	j	800092f4 <.LBB2_33+0x3c>
    800092f4:	65c2                	ld	a1,16(sp)
    800092f6:	4501                	li	a0,0
    800092f8:	08a58423          	sb	a0,136(a1)
    800092fc:	0128                	addi	a0,sp,136
            let channel = guard.deref() as *const Log as usize;
    800092fe:	00008097          	auipc	ra,0x8
    80009302:	2fc080e7          	jalr	764(ra) # 800115fa <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h89fb3cfbc0625c4cE>
    80009306:	e42a                	sd	a0,8(sp)
    80009308:	a009                	j	8000930a <.LBB2_33+0x52>
    8000930a:	65a2                	ld	a1,8(sp)
    8000930c:	f12e                	sd	a1,160(sp)

000000008000930e <.LBB2_34>:
            unsafe { PROC_MANAGER.wake_up(channel); }
    8000930e:	0004e517          	auipc	a0,0x4e
    80009312:	29250513          	addi	a0,a0,658 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    80009316:	00004097          	auipc	ra,0x4
    8000931a:	5ea080e7          	jalr	1514(ra) # 8000d900 <_ZN6kernel7process7manager11ProcManager7wake_up17ha46b4d15ac07187bE>
    8000931e:	a009                	j	80009320 <.LBB2_34+0x12>
            drop(guard);
    80009320:	652a                	ld	a0,136(sp)
    80009322:	00014097          	auipc	ra,0x14
    80009326:	e02080e7          	jalr	-510(ra) # 8001d124 <_ZN4core3mem4drop17haa2d2dc72bd2e81bE>
    8000932a:	a009                	j	8000932c <.LBB2_34+0x1e>
        if !log_ptr.is_null() {
    8000932c:	a009                	j	8000932e <.LBB2_34+0x20>
        }
    }
    8000932e:	70aa                	ld	ra,168(sp)
    80009330:	614d                	addi	sp,sp,176
    80009332:	8082                	ret

0000000080009334 <.LBB2_35>:
        guard.outstanding -= 1;
    80009334:	0001e517          	auipc	a0,0x1e
    80009338:	2dc50513          	addi	a0,a0,732 # 80027610 <str.2>

000000008000933c <.LBB2_36>:
    8000933c:	0001e617          	auipc	a2,0x1e
    80009340:	2b460613          	addi	a2,a2,692 # 800275f0 <.L__unnamed_21>
    80009344:	02100593          	li	a1,33
    80009348:	00019097          	auipc	ra,0x19
    8000934c:	f2e080e7          	jalr	-210(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel6driver11virtio_disk91_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..driver..virtio_disk..Disk$GT$$GT$2rw17h4aaaa8090d764af5E:

0000000080009352 <_ZN6kernel6driver11virtio_disk91_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..driver..virtio_disk..Disk$GT$$GT$2rw17h4aaaa8090d764af5E>:
    }
}

impl Spinlock<Disk> {
    /// Read or write a certain Buf, which is returned after the op is done. 
    pub fn rw(&self, buf: &mut Buf<'_>, writing: bool) {
    80009352:	c8010113          	addi	sp,sp,-896
    80009356:	36113c23          	sd	ra,888(sp)
    8000935a:	26b13c23          	sd	a1,632(sp)
    8000935e:	28a13023          	sd	a0,640(sp)
    80009362:	86b2                	mv	a3,a2
    80009364:	28d13423          	sd	a3,648(sp)
    80009368:	32a13423          	sd	a0,808(sp)
    8000936c:	32b13823          	sd	a1,816(sp)
    80009370:	32c10fa3          	sb	a2,831(sp)
        let mut guard = self.acquire();
    80009374:	00007097          	auipc	ra,0x7
    80009378:	3ba080e7          	jalr	954(ra) # 8001072e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h922bace5232f6228E>
    8000937c:	28a13823          	sd	a0,656(sp)
    80009380:	a009                	j	80009382 <_ZN6kernel6driver11virtio_disk91_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..driver..virtio_disk..Disk$GT$$GT$2rw17h4aaaa8090d764af5E+0x30>
        let buf_raw_data = buf.raw_data_mut();
    80009382:	27813503          	ld	a0,632(sp)
    80009386:	ffffa097          	auipc	ra,0xffffa
    8000938a:	400080e7          	jalr	1024(ra) # 80003786 <_ZN6kernel2fs3bio3Buf12raw_data_mut17hbae73c10d57c515dE>
    8000938e:	85aa                	mv	a1,a0
    80009390:	26b13823          	sd	a1,624(sp)
    80009394:	34a13023          	sd	a0,832(sp)
    80009398:	a009                	j	8000939a <_ZN6kernel6driver11virtio_disk91_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..driver..virtio_disk..Disk$GT$$GT$2rw17h4aaaa8090d764af5E+0x48>
    8000939a:	4501                	li	a0,0

        let mut idx: [usize; 3] = [0; 3];
    8000939c:	2aa13423          	sd	a0,680(sp)
    800093a0:	2aa13023          	sd	a0,672(sp)
    800093a4:	28a13c23          	sd	a0,664(sp)
        loop {
    800093a8:	a009                	j	800093aa <_ZN6kernel6driver11virtio_disk91_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..driver..virtio_disk..Disk$GT$$GT$2rw17h4aaaa8090d764af5E+0x58>
    800093aa:	0d08                	addi	a0,sp,656
            if guard.alloc3_desc(&mut idx) {
    800093ac:	00008097          	auipc	ra,0x8
    800093b0:	2ec080e7          	jalr	748(ra) # 80011698 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h362a59dae1fa4f35E>
    800093b4:	26a13423          	sd	a0,616(sp)
    800093b8:	a009                	j	800093ba <_ZN6kernel6driver11virtio_disk91_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..driver..virtio_disk..Disk$GT$$GT$2rw17h4aaaa8090d764af5E+0x68>
    800093ba:	26813503          	ld	a0,616(sp)
    800093be:	0d2c                	addi	a1,sp,664
    800093c0:	00016097          	auipc	ra,0x16
    800093c4:	aa8080e7          	jalr	-1368(ra) # 8001ee68 <_ZN6kernel6driver11virtio_disk4Disk11alloc3_desc17h72dc3c5e71ae6e49E>
    800093c8:	26a13023          	sd	a0,608(sp)
    800093cc:	a009                	j	800093ce <_ZN6kernel6driver11virtio_disk91_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..driver..virtio_disk..Disk$GT$$GT$2rw17h4aaaa8090d764af5E+0x7c>
    800093ce:	26013503          	ld	a0,608(sp)
    800093d2:	4581                	li	a1,0
    800093d4:	00b50b63          	beq	a0,a1,800093ea <.LBB3_117>
    800093d8:	a009                	j	800093da <_ZN6kernel6driver11virtio_disk91_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..driver..virtio_disk..Disk$GT$$GT$2rw17h4aaaa8090d764af5E+0x88>
    800093da:	0d08                	addi	a0,sp,656
            }
        }

        // format descriptors
        // QEMU's virtio block device read them
        let buf0 = &mut guard.ops[idx[0]];
    800093dc:	00008097          	auipc	ra,0x8
    800093e0:	2bc080e7          	jalr	700(ra) # 80011698 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h362a59dae1fa4f35E>
    800093e4:	24a13c23          	sd	a0,600(sp)
    800093e8:	a8a5                	j	80009460 <.LBB3_118+0x5c>

00000000800093ea <.LBB3_117>:
                    CPU_MANAGER.myproc().unwrap().sleep(&guard.free[0] as *const bool as usize, guard);
    800093ea:	0006a517          	auipc	a0,0x6a
    800093ee:	d5650513          	addi	a0,a0,-682 # 80073140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    800093f2:	00009097          	auipc	ra,0x9
    800093f6:	a0c080e7          	jalr	-1524(ra) # 80011dfe <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    800093fa:	24a13823          	sd	a0,592(sp)
    800093fe:	a009                	j	80009400 <.LBB3_117+0x16>
    80009400:	25013503          	ld	a0,592(sp)

0000000080009404 <.LBB3_118>:
    80009404:	0001e597          	auipc	a1,0x1e
    80009408:	59458593          	addi	a1,a1,1428 # 80027998 <.L__unnamed_22>
    8000940c:	00006097          	auipc	ra,0x6
    80009410:	940080e7          	jalr	-1728(ra) # 8000ed4c <_ZN4core6option15Option$LT$T$GT$6unwrap17h81f0c84c54a80648E>
    80009414:	24a13423          	sd	a0,584(sp)
    80009418:	a009                	j	8000941a <.LBB3_118+0x16>
    8000941a:	0d08                	addi	a0,sp,656
    8000941c:	00008097          	auipc	ra,0x8
    80009420:	1be080e7          	jalr	446(ra) # 800115da <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h7eb0b551b3d2dabcE>
    80009424:	24a13023          	sd	a0,576(sp)
    80009428:	a009                	j	8000942a <.LBB3_118+0x26>
    8000942a:	24813503          	ld	a0,584(sp)
    8000942e:	24013583          	ld	a1,576(sp)
    80009432:	6609                	lui	a2,0x2
    80009434:	95b2                	add	a1,a1,a2
    80009436:	29013603          	ld	a2,656(sp)
    8000943a:	00008097          	auipc	ra,0x8
    8000943e:	6a0080e7          	jalr	1696(ra) # 80011ada <_ZN6kernel7process7process11task_struct5sleep17h3e20b1d3f8d47a0dE>
    80009442:	a009                	j	80009444 <.LBB3_118+0x40>
                guard = self.acquire();
    80009444:	28013503          	ld	a0,640(sp)
    80009448:	00007097          	auipc	ra,0x7
    8000944c:	2e6080e7          	jalr	742(ra) # 8001072e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h922bace5232f6228E>
    80009450:	22a13c23          	sd	a0,568(sp)
    80009454:	a009                	j	80009456 <.LBB3_118+0x52>
    80009456:	23813503          	ld	a0,568(sp)
    8000945a:	28a13823          	sd	a0,656(sp)
        loop {
    8000945e:	b7b1                	j	800093aa <_ZN6kernel6driver11virtio_disk91_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..driver..virtio_disk..Disk$GT$$GT$2rw17h4aaaa8090d764af5E+0x58>
        let buf0 = &mut guard.ops[idx[0]];
    80009460:	29813583          	ld	a1,664(sp)
    80009464:	22b13823          	sd	a1,560(sp)
    80009468:	451d                	li	a0,7
    8000946a:	68b56b63          	bltu	a0,a1,80009b00 <.LBB3_127+0x4a>
    8000946e:	a009                	j	80009470 <.LBB3_118+0x6c>
    80009470:	28813503          	ld	a0,648(sp)
    80009474:	25813583          	ld	a1,600(sp)
    80009478:	23013603          	ld	a2,560(sp)
    8000947c:	0612                	slli	a2,a2,0x4
    8000947e:	95b2                	add	a1,a1,a2
    80009480:	6609                	lui	a2,0x2
    80009482:	0d06061b          	addiw	a2,a2,208
    80009486:	95b2                	add	a1,a1,a2
    80009488:	22b13423          	sd	a1,552(sp)
    8000948c:	34b13423          	sd	a1,840(sp)
    80009490:	4581                	li	a1,0
        buf0.type_ = if writing { VIRTIO_BLK_T_OUT } else { VIRTIO_BLK_T_IN };
    80009492:	00b50763          	beq	a0,a1,800094a0 <.LBB3_118+0x9c>
    80009496:	a009                	j	80009498 <.LBB3_118+0x94>
    80009498:	4505                	li	a0,1
    8000949a:	2aa12823          	sw	a0,688(sp)
    8000949e:	a029                	j	800094a8 <.LBB3_118+0xa4>
    800094a0:	4501                	li	a0,0
    800094a2:	2aa12823          	sw	a0,688(sp)
    800094a6:	a009                	j	800094a8 <.LBB3_118+0xa4>
    800094a8:	27813503          	ld	a0,632(sp)
    800094ac:	22813603          	ld	a2,552(sp)
    800094b0:	2b012583          	lw	a1,688(sp)
    800094b4:	c20c                	sw	a1,0(a2)
    800094b6:	4581                	li	a1,0
        buf0.reserved = 0;
    800094b8:	c24c                	sw	a1,4(a2)
        buf0.sector = (buf.read_blockno() as usize * (BSIZE / 512)) as u64;
    800094ba:	ffffa097          	auipc	ra,0xffffa
    800094be:	25c080e7          	jalr	604(ra) # 80003716 <_ZN6kernel2fs3bio3Buf12read_blockno17ha2cb61f265147e82E>
    800094c2:	22a13023          	sd	a0,544(sp)
    800094c6:	a009                	j	800094c8 <.LBB3_118+0xc4>
    800094c8:	22013503          	ld	a0,544(sp)
    800094cc:	1502                	slli	a0,a0,0x20
    800094ce:	9101                	srli	a0,a0,0x20
    800094d0:	952a                	add	a0,a0,a0
    800094d2:	20a13c23          	sd	a0,536(sp)
    800094d6:	4501                	li	a0,0
    800094d8:	64051063          	bnez	a0,80009b18 <.LBB3_129>
    800094dc:	a009                	j	800094de <.LBB3_118+0xda>
    800094de:	21813503          	ld	a0,536(sp)
    800094e2:	22813583          	ld	a1,552(sp)
    800094e6:	e588                	sd	a0,8(a1)
    800094e8:	0d08                	addi	a0,sp,656

        guard.desc[idx[0]].addr = buf0 as *mut _ as u64;
    800094ea:	00008097          	auipc	ra,0x8
    800094ee:	1ae080e7          	jalr	430(ra) # 80011698 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h362a59dae1fa4f35E>
    800094f2:	20a13823          	sd	a0,528(sp)
    800094f6:	a009                	j	800094f8 <.LBB3_118+0xf4>
    800094f8:	29813583          	ld	a1,664(sp)
    800094fc:	20b13423          	sd	a1,520(sp)
    80009500:	451d                	li	a0,7
    80009502:	62b56a63          	bltu	a0,a1,80009b36 <.LBB3_130+0x16>
    80009506:	a009                	j	80009508 <.LBB3_118+0x104>
    80009508:	22813503          	ld	a0,552(sp)
    8000950c:	21013583          	ld	a1,528(sp)
    80009510:	20813603          	ld	a2,520(sp)
    80009514:	0612                	slli	a2,a2,0x4
    80009516:	95b2                	add	a1,a1,a2
    80009518:	e188                	sd	a0,0(a1)
        guard.desc[idx[0]].len = core::mem::size_of::<VirtIOBlkReq>().try_into().unwrap();
    8000951a:	a009                	j	8000951c <.LBB3_118+0x118>
    8000951c:	4541                	li	a0,16
    8000951e:	00002097          	auipc	ra,0x2
    80009522:	596080e7          	jalr	1430(ra) # 8000bab4 <_ZN53_$LT$T$u20$as$u20$core..convert..TryInto$LT$U$GT$$GT$8try_into17h168ef583366b1bfdE>
    80009526:	ffaa                	sd	a0,504(sp)
    80009528:	20b13023          	sd	a1,512(sp)
    8000952c:	a009                	j	8000952e <.LBB3_118+0x12a>
    8000952e:	20013583          	ld	a1,512(sp)
    80009532:	757e                	ld	a0,504(sp)

0000000080009534 <.LBB3_119>:
    80009534:	0001e617          	auipc	a2,0x1e
    80009538:	1c460613          	addi	a2,a2,452 # 800276f8 <.L__unnamed_23>
    8000953c:	00004097          	auipc	ra,0x4
    80009540:	8a2080e7          	jalr	-1886(ra) # 8000cdde <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h07a2a3bbe53a0b92E>
    80009544:	fbaa                	sd	a0,496(sp)
    80009546:	a009                	j	80009548 <.LBB3_119+0x14>
    80009548:	0d08                	addi	a0,sp,656
    8000954a:	00008097          	auipc	ra,0x8
    8000954e:	14e080e7          	jalr	334(ra) # 80011698 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h362a59dae1fa4f35E>
    80009552:	f7aa                	sd	a0,488(sp)
    80009554:	a009                	j	80009556 <.LBB3_119+0x22>
    80009556:	29813583          	ld	a1,664(sp)
    8000955a:	f3ae                	sd	a1,480(sp)
    8000955c:	451d                	li	a0,7
    8000955e:	5eb56863          	bltu	a0,a1,80009b4e <.LBB3_131+0x14>
    80009562:	a009                	j	80009564 <.LBB3_119+0x30>
    80009564:	755e                	ld	a0,496(sp)
    80009566:	75be                	ld	a1,488(sp)
    80009568:	761e                	ld	a2,480(sp)
    8000956a:	0612                	slli	a2,a2,0x4
    8000956c:	95b2                	add	a1,a1,a2
    8000956e:	c588                	sw	a0,8(a1)
    80009570:	0d08                	addi	a0,sp,656
        guard.desc[idx[0]].flags = VRING_DESC_F_NEXT;
    80009572:	00008097          	auipc	ra,0x8
    80009576:	126080e7          	jalr	294(ra) # 80011698 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h362a59dae1fa4f35E>
    8000957a:	efaa                	sd	a0,472(sp)
    8000957c:	a009                	j	8000957e <.LBB3_119+0x4a>
    8000957e:	29813583          	ld	a1,664(sp)
    80009582:	ebae                	sd	a1,464(sp)
    80009584:	451d                	li	a0,7
    80009586:	5cb56f63          	bltu	a0,a1,80009b64 <.LBB3_132+0x14>
    8000958a:	a009                	j	8000958c <.LBB3_119+0x58>
    8000958c:	657e                	ld	a0,472(sp)
    8000958e:	65de                	ld	a1,464(sp)
    80009590:	0592                	slli	a1,a1,0x4
    80009592:	95aa                	add	a1,a1,a0
    80009594:	4505                	li	a0,1
    80009596:	00a59623          	sh	a0,12(a1)
        guard.desc[idx[0]].next = idx[1].try_into().unwrap();
    8000959a:	2a013503          	ld	a0,672(sp)
    8000959e:	00002097          	auipc	ra,0x2
    800095a2:	534080e7          	jalr	1332(ra) # 8000bad2 <_ZN53_$LT$T$u20$as$u20$core..convert..TryInto$LT$U$GT$$GT$8try_into17h79444d549eeb58faE>
    800095a6:	e3aa                	sd	a0,448(sp)
    800095a8:	e7ae                	sd	a1,456(sp)
    800095aa:	a009                	j	800095ac <.LBB3_119+0x78>
    800095ac:	65be                	ld	a1,456(sp)
    800095ae:	651e                	ld	a0,448(sp)

00000000800095b0 <.LBB3_120>:
    800095b0:	0001e617          	auipc	a2,0x1e
    800095b4:	19060613          	addi	a2,a2,400 # 80027740 <.L__unnamed_24>
    800095b8:	00004097          	auipc	ra,0x4
    800095bc:	89e080e7          	jalr	-1890(ra) # 8000ce56 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h42e1173662da7b7dE>
    800095c0:	ff2a                	sd	a0,440(sp)
    800095c2:	a009                	j	800095c4 <.LBB3_120+0x14>
    800095c4:	0d08                	addi	a0,sp,656
    800095c6:	00008097          	auipc	ra,0x8
    800095ca:	0d2080e7          	jalr	210(ra) # 80011698 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h362a59dae1fa4f35E>
    800095ce:	fb2a                	sd	a0,432(sp)
    800095d0:	a009                	j	800095d2 <.LBB3_120+0x22>
    800095d2:	29813583          	ld	a1,664(sp)
    800095d6:	f72e                	sd	a1,424(sp)
    800095d8:	451d                	li	a0,7
    800095da:	5ab56063          	bltu	a0,a1,80009b7a <.LBB3_133+0x14>
    800095de:	a009                	j	800095e0 <.LBB3_120+0x30>
    800095e0:	757a                	ld	a0,440(sp)
    800095e2:	75da                	ld	a1,432(sp)
    800095e4:	763a                	ld	a2,424(sp)
    800095e6:	0612                	slli	a2,a2,0x4
    800095e8:	95b2                	add	a1,a1,a2
    800095ea:	00a59723          	sh	a0,14(a1)
    800095ee:	0d08                	addi	a0,sp,656

        guard.desc[idx[1]].addr = buf_raw_data as u64;
    800095f0:	00008097          	auipc	ra,0x8
    800095f4:	0a8080e7          	jalr	168(ra) # 80011698 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h362a59dae1fa4f35E>
    800095f8:	f32a                	sd	a0,416(sp)
    800095fa:	a009                	j	800095fc <.LBB3_120+0x4c>
    800095fc:	2a013583          	ld	a1,672(sp)
    80009600:	ef2e                	sd	a1,408(sp)
    80009602:	451d                	li	a0,7
    80009604:	58b56663          	bltu	a0,a1,80009b90 <.LBB3_134+0x14>
    80009608:	a009                	j	8000960a <.LBB3_120+0x5a>
    8000960a:	27013503          	ld	a0,624(sp)
    8000960e:	759a                	ld	a1,416(sp)
    80009610:	667a                	ld	a2,408(sp)
    80009612:	0612                	slli	a2,a2,0x4
    80009614:	95b2                	add	a1,a1,a2
    80009616:	e188                	sd	a0,0(a1)
    80009618:	40000513          	li	a0,1024
        guard.desc[idx[1]].len = BSIZE.try_into().unwrap();
    8000961c:	00002097          	auipc	ra,0x2
    80009620:	498080e7          	jalr	1176(ra) # 8000bab4 <_ZN53_$LT$T$u20$as$u20$core..convert..TryInto$LT$U$GT$$GT$8try_into17h168ef583366b1bfdE>
    80009624:	e72a                	sd	a0,392(sp)
    80009626:	eb2e                	sd	a1,400(sp)
    80009628:	a009                	j	8000962a <.LBB3_120+0x7a>
    8000962a:	65da                	ld	a1,400(sp)
    8000962c:	653a                	ld	a0,392(sp)

000000008000962e <.LBB3_121>:
    8000962e:	0001e617          	auipc	a2,0x1e
    80009632:	15a60613          	addi	a2,a2,346 # 80027788 <.L__unnamed_25>
    80009636:	00003097          	auipc	ra,0x3
    8000963a:	7a8080e7          	jalr	1960(ra) # 8000cdde <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h07a2a3bbe53a0b92E>
    8000963e:	e32a                	sd	a0,384(sp)
    80009640:	a009                	j	80009642 <.LBB3_121+0x14>
    80009642:	0d08                	addi	a0,sp,656
    80009644:	00008097          	auipc	ra,0x8
    80009648:	054080e7          	jalr	84(ra) # 80011698 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h362a59dae1fa4f35E>
    8000964c:	feaa                	sd	a0,376(sp)
    8000964e:	a009                	j	80009650 <.LBB3_121+0x22>
    80009650:	2a013583          	ld	a1,672(sp)
    80009654:	faae                	sd	a1,368(sp)
    80009656:	451d                	li	a0,7
    80009658:	54b56763          	bltu	a0,a1,80009ba6 <.LBB3_135+0x14>
    8000965c:	a009                	j	8000965e <.LBB3_121+0x30>
    8000965e:	28813503          	ld	a0,648(sp)
    80009662:	659a                	ld	a1,384(sp)
    80009664:	7676                	ld	a2,376(sp)
    80009666:	76d6                	ld	a3,368(sp)
    80009668:	0692                	slli	a3,a3,0x4
    8000966a:	9636                	add	a2,a2,a3
    8000966c:	c60c                	sw	a1,8(a2)
    8000966e:	4581                	li	a1,0
        guard.desc[idx[1]].flags = if writing { 0 } else { VRING_DESC_F_WRITE };
    80009670:	00b50763          	beq	a0,a1,8000967e <.LBB3_121+0x50>
    80009674:	a009                	j	80009676 <.LBB3_121+0x48>
    80009676:	4501                	li	a0,0
    80009678:	2aa11b23          	sh	a0,694(sp)
    8000967c:	a029                	j	80009686 <.LBB3_121+0x58>
    8000967e:	4509                	li	a0,2
    80009680:	2aa11b23          	sh	a0,694(sp)
    80009684:	a009                	j	80009686 <.LBB3_121+0x58>
    80009686:	0d08                	addi	a0,sp,656
    80009688:	00008097          	auipc	ra,0x8
    8000968c:	010080e7          	jalr	16(ra) # 80011698 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h362a59dae1fa4f35E>
    80009690:	f6aa                	sd	a0,360(sp)
    80009692:	a009                	j	80009694 <.LBB3_121+0x66>
    80009694:	2a013583          	ld	a1,672(sp)
    80009698:	f2ae                	sd	a1,352(sp)
    8000969a:	451d                	li	a0,7
    8000969c:	52b56063          	bltu	a0,a1,80009bbc <.LBB3_136+0x14>
    800096a0:	a009                	j	800096a2 <.LBB3_121+0x74>
    800096a2:	7536                	ld	a0,360(sp)
    800096a4:	7596                	ld	a1,352(sp)
    800096a6:	0592                	slli	a1,a1,0x4
    800096a8:	95aa                	add	a1,a1,a0
    800096aa:	2b611503          	lh	a0,694(sp)
    800096ae:	00a59623          	sh	a0,12(a1)
    800096b2:	0d08                	addi	a0,sp,656
        guard.desc[idx[1]].flags |= VRING_DESC_F_NEXT;
    800096b4:	00008097          	auipc	ra,0x8
    800096b8:	fe4080e7          	jalr	-28(ra) # 80011698 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h362a59dae1fa4f35E>
    800096bc:	eeaa                	sd	a0,344(sp)
    800096be:	a009                	j	800096c0 <.LBB3_121+0x92>
    800096c0:	2a013583          	ld	a1,672(sp)
    800096c4:	eaae                	sd	a1,336(sp)
    800096c6:	451d                	li	a0,7
    800096c8:	50b56563          	bltu	a0,a1,80009bd2 <.LBB3_137+0x14>
    800096cc:	a009                	j	800096ce <.LBB3_121+0xa0>
    800096ce:	6576                	ld	a0,344(sp)
    800096d0:	65d6                	ld	a1,336(sp)
    800096d2:	0592                	slli	a1,a1,0x4
    800096d4:	95aa                	add	a1,a1,a0
    800096d6:	00c59503          	lh	a0,12(a1)
    800096da:	00156513          	ori	a0,a0,1
    800096de:	00a59623          	sh	a0,12(a1)
        guard.desc[idx[1]].next = idx[2].try_into().unwrap();
    800096e2:	2a813503          	ld	a0,680(sp)
    800096e6:	00002097          	auipc	ra,0x2
    800096ea:	3ec080e7          	jalr	1004(ra) # 8000bad2 <_ZN53_$LT$T$u20$as$u20$core..convert..TryInto$LT$U$GT$$GT$8try_into17h79444d549eeb58faE>
    800096ee:	e2aa                	sd	a0,320(sp)
    800096f0:	e6ae                	sd	a1,328(sp)
    800096f2:	a009                	j	800096f4 <.LBB3_121+0xc6>
    800096f4:	65b6                	ld	a1,328(sp)
    800096f6:	6516                	ld	a0,320(sp)

00000000800096f8 <.LBB3_122>:
    800096f8:	0001e617          	auipc	a2,0x1e
    800096fc:	0f060613          	addi	a2,a2,240 # 800277e8 <.L__unnamed_26>
    80009700:	00003097          	auipc	ra,0x3
    80009704:	756080e7          	jalr	1878(ra) # 8000ce56 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h42e1173662da7b7dE>
    80009708:	fe2a                	sd	a0,312(sp)
    8000970a:	a009                	j	8000970c <.LBB3_122+0x14>
    8000970c:	0d08                	addi	a0,sp,656
    8000970e:	00008097          	auipc	ra,0x8
    80009712:	f8a080e7          	jalr	-118(ra) # 80011698 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h362a59dae1fa4f35E>
    80009716:	fa2a                	sd	a0,304(sp)
    80009718:	a009                	j	8000971a <.LBB3_122+0x22>
    8000971a:	2a013583          	ld	a1,672(sp)
    8000971e:	f62e                	sd	a1,296(sp)
    80009720:	451d                	li	a0,7
    80009722:	4cb56363          	bltu	a0,a1,80009be8 <.LBB3_138+0x14>
    80009726:	a009                	j	80009728 <.LBB3_122+0x30>
    80009728:	7572                	ld	a0,312(sp)
    8000972a:	75d2                	ld	a1,304(sp)
    8000972c:	7632                	ld	a2,296(sp)
    8000972e:	0612                	slli	a2,a2,0x4
    80009730:	95b2                	add	a1,a1,a2
    80009732:	00a59723          	sh	a0,14(a1)
    80009736:	0d08                	addi	a0,sp,656

        guard.info[idx[0]].status = 0xff;
    80009738:	00008097          	auipc	ra,0x8
    8000973c:	f60080e7          	jalr	-160(ra) # 80011698 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h362a59dae1fa4f35E>
    80009740:	f22a                	sd	a0,288(sp)
    80009742:	a009                	j	80009744 <.LBB3_122+0x4c>
    80009744:	29813583          	ld	a1,664(sp)
    80009748:	ee2e                	sd	a1,280(sp)
    8000974a:	451d                	li	a0,7
    8000974c:	4ab56963          	bltu	a0,a1,80009bfe <.LBB3_139+0x14>
    80009750:	a009                	j	80009752 <.LBB3_122+0x5a>
    80009752:	7512                	ld	a0,288(sp)
    80009754:	65f2                	ld	a1,280(sp)
    80009756:	4661                	li	a2,24
    80009758:	02c585b3          	mul	a1,a1,a2
    8000975c:	952e                	add	a0,a0,a1
    8000975e:	6589                	lui	a1,0x2
    80009760:	0205859b          	addiw	a1,a1,32
    80009764:	95aa                	add	a1,a1,a0
    80009766:	0ff00513          	li	a0,255
    8000976a:	00a58023          	sb	a0,0(a1) # 2000 <.Lline_table_start0+0x46f>
    8000976e:	0d08                	addi	a0,sp,656
        guard.desc[idx[2]].addr = &mut guard.info[idx[0]].status as *mut _ as u64;
    80009770:	00008097          	auipc	ra,0x8
    80009774:	f28080e7          	jalr	-216(ra) # 80011698 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h362a59dae1fa4f35E>
    80009778:	ea2a                	sd	a0,272(sp)
    8000977a:	a009                	j	8000977c <.LBB3_122+0x84>
    8000977c:	29813583          	ld	a1,664(sp)
    80009780:	e62e                	sd	a1,264(sp)
    80009782:	451d                	li	a0,7
    80009784:	48b56863          	bltu	a0,a1,80009c14 <.LBB3_140+0x14>
    80009788:	a009                	j	8000978a <.LBB3_122+0x92>
    8000978a:	6552                	ld	a0,272(sp)
    8000978c:	65b2                	ld	a1,264(sp)
    8000978e:	4661                	li	a2,24
    80009790:	02c585b3          	mul	a1,a1,a2
    80009794:	952e                	add	a0,a0,a1
    80009796:	6589                	lui	a1,0x2
    80009798:	0205859b          	addiw	a1,a1,32
    8000979c:	952e                	add	a0,a0,a1
    8000979e:	fdaa                	sd	a0,248(sp)
    800097a0:	0d08                	addi	a0,sp,656
    800097a2:	00008097          	auipc	ra,0x8
    800097a6:	ef6080e7          	jalr	-266(ra) # 80011698 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h362a59dae1fa4f35E>
    800097aa:	e22a                	sd	a0,256(sp)
    800097ac:	a009                	j	800097ae <.LBB3_122+0xb6>
    800097ae:	2a813583          	ld	a1,680(sp)
    800097b2:	f9ae                	sd	a1,240(sp)
    800097b4:	451d                	li	a0,7
    800097b6:	46b56a63          	bltu	a0,a1,80009c2a <.LBB3_141+0x14>
    800097ba:	a009                	j	800097bc <.LBB3_122+0xc4>
    800097bc:	756e                	ld	a0,248(sp)
    800097be:	6592                	ld	a1,256(sp)
    800097c0:	764e                	ld	a2,240(sp)
    800097c2:	0612                	slli	a2,a2,0x4
    800097c4:	95b2                	add	a1,a1,a2
    800097c6:	e188                	sd	a0,0(a1)
    800097c8:	0d08                	addi	a0,sp,656
        guard.desc[idx[2]].len = 1;
    800097ca:	00008097          	auipc	ra,0x8
    800097ce:	ece080e7          	jalr	-306(ra) # 80011698 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h362a59dae1fa4f35E>
    800097d2:	f5aa                	sd	a0,232(sp)
    800097d4:	a009                	j	800097d6 <.LBB3_122+0xde>
    800097d6:	2a813583          	ld	a1,680(sp)
    800097da:	f1ae                	sd	a1,224(sp)
    800097dc:	451d                	li	a0,7
    800097de:	46b56163          	bltu	a0,a1,80009c40 <.LBB3_142+0x14>
    800097e2:	a009                	j	800097e4 <.LBB3_122+0xec>
    800097e4:	752e                	ld	a0,232(sp)
    800097e6:	758e                	ld	a1,224(sp)
    800097e8:	0592                	slli	a1,a1,0x4
    800097ea:	95aa                	add	a1,a1,a0
    800097ec:	4505                	li	a0,1
    800097ee:	c588                	sw	a0,8(a1)
    800097f0:	0d08                	addi	a0,sp,656
        guard.desc[idx[2]].flags = VRING_DESC_F_WRITE;
    800097f2:	00008097          	auipc	ra,0x8
    800097f6:	ea6080e7          	jalr	-346(ra) # 80011698 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h362a59dae1fa4f35E>
    800097fa:	edaa                	sd	a0,216(sp)
    800097fc:	a009                	j	800097fe <.LBB3_122+0x106>
    800097fe:	2a813583          	ld	a1,680(sp)
    80009802:	e9ae                	sd	a1,208(sp)
    80009804:	451d                	li	a0,7
    80009806:	44b56863          	bltu	a0,a1,80009c56 <.LBB3_143+0x14>
    8000980a:	a009                	j	8000980c <.LBB3_122+0x114>
    8000980c:	656e                	ld	a0,216(sp)
    8000980e:	65ce                	ld	a1,208(sp)
    80009810:	0592                	slli	a1,a1,0x4
    80009812:	95aa                	add	a1,a1,a0
    80009814:	4509                	li	a0,2
    80009816:	00a59623          	sh	a0,12(a1) # 200c <.Lline_table_start0+0x47b>
    8000981a:	0d08                	addi	a0,sp,656
        guard.desc[idx[2]].next = 0;
    8000981c:	00008097          	auipc	ra,0x8
    80009820:	e7c080e7          	jalr	-388(ra) # 80011698 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h362a59dae1fa4f35E>
    80009824:	e5aa                	sd	a0,200(sp)
    80009826:	a009                	j	80009828 <.LBB3_122+0x130>
    80009828:	2a813583          	ld	a1,680(sp)
    8000982c:	e1ae                	sd	a1,192(sp)
    8000982e:	451d                	li	a0,7
    80009830:	42b56e63          	bltu	a0,a1,80009c6c <.LBB3_144+0x14>
    80009834:	a009                	j	80009836 <.LBB3_122+0x13e>
    80009836:	652e                	ld	a0,200(sp)
    80009838:	658e                	ld	a1,192(sp)
    8000983a:	0592                	slli	a1,a1,0x4
    8000983c:	95aa                	add	a1,a1,a0
    8000983e:	4501                	li	a0,0
    80009840:	00a59723          	sh	a0,14(a1)
    80009844:	0d08                	addi	a0,sp,656

        // record the buf
        // retrieve it back when the disk finishes with the raw buf data
        guard.info[idx[0]].disk = true;
    80009846:	00008097          	auipc	ra,0x8
    8000984a:	e52080e7          	jalr	-430(ra) # 80011698 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h362a59dae1fa4f35E>
    8000984e:	fd2a                	sd	a0,184(sp)
    80009850:	a009                	j	80009852 <.LBB3_122+0x15a>
    80009852:	29813583          	ld	a1,664(sp)
    80009856:	f92e                	sd	a1,176(sp)
    80009858:	451d                	li	a0,7
    8000985a:	42b56463          	bltu	a0,a1,80009c82 <.LBB3_145+0x14>
    8000985e:	a009                	j	80009860 <.LBB3_122+0x168>
    80009860:	27013583          	ld	a1,624(sp)
    80009864:	756a                	ld	a0,184(sp)
    80009866:	764a                	ld	a2,176(sp)
    80009868:	46e1                	li	a3,24
    8000986a:	02d60633          	mul	a2,a2,a3
    8000986e:	9532                	add	a0,a0,a2
    80009870:	6609                	lui	a2,0x2
    80009872:	0216061b          	addiw	a2,a2,33
    80009876:	962a                	add	a2,a2,a0
    80009878:	4505                	li	a0,1
    8000987a:	00a60023          	sb	a0,0(a2) # 2000 <.Lline_table_start0+0x46f>
        guard.info[idx[0]].buf_channel = Some(buf_raw_data as usize);
    8000987e:	2cb13023          	sd	a1,704(sp)
    80009882:	2aa13c23          	sd	a0,696(sp)
    80009886:	0d08                	addi	a0,sp,656
    80009888:	00008097          	auipc	ra,0x8
    8000988c:	e10080e7          	jalr	-496(ra) # 80011698 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h362a59dae1fa4f35E>
    80009890:	f52a                	sd	a0,168(sp)
    80009892:	a009                	j	80009894 <.LBB3_122+0x19c>
    80009894:	29813583          	ld	a1,664(sp)
    80009898:	f12e                	sd	a1,160(sp)
    8000989a:	451d                	li	a0,7
    8000989c:	3eb56e63          	bltu	a0,a1,80009c98 <.LBB3_146+0x14>
    800098a0:	a009                	j	800098a2 <.LBB3_122+0x1aa>
    800098a2:	752a                	ld	a0,168(sp)
    800098a4:	758a                	ld	a1,160(sp)
    800098a6:	4661                	li	a2,24
    800098a8:	02c585b3          	mul	a1,a1,a2
    800098ac:	952e                	add	a0,a0,a1
    800098ae:	6589                	lui	a1,0x2
    800098b0:	25c1                	addiw	a1,a1,16
    800098b2:	95aa                	add	a1,a1,a0
    800098b4:	2b813603          	ld	a2,696(sp)
    800098b8:	2c013503          	ld	a0,704(sp)
    800098bc:	e190                	sd	a2,0(a1)
    800098be:	e588                	sd	a0,8(a1)
    800098c0:	0d08                	addi	a0,sp,656

        {
            let i = guard.avail.idx as usize % NUM;
    800098c2:	00008097          	auipc	ra,0x8
    800098c6:	d18080e7          	jalr	-744(ra) # 800115da <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h7eb0b551b3d2dabcE>
    800098ca:	ed2a                	sd	a0,152(sp)
    800098cc:	a009                	j	800098ce <.LBB3_122+0x1d6>
    800098ce:	656a                	ld	a0,152(sp)
    800098d0:	08255503          	lhu	a0,130(a0)
    800098d4:	891d                	andi	a0,a0,7
    800098d6:	e12a                	sd	a0,128(sp)
    800098d8:	34a13823          	sd	a0,848(sp)
            guard.avail.ring[i] = idx[0].try_into().unwrap();
    800098dc:	29813503          	ld	a0,664(sp)
    800098e0:	00002097          	auipc	ra,0x2
    800098e4:	1f2080e7          	jalr	498(ra) # 8000bad2 <_ZN53_$LT$T$u20$as$u20$core..convert..TryInto$LT$U$GT$$GT$8try_into17h79444d549eeb58faE>
    800098e8:	e52a                	sd	a0,136(sp)
    800098ea:	e92e                	sd	a1,144(sp)
    800098ec:	a009                	j	800098ee <.LBB3_122+0x1f6>
    800098ee:	65ca                	ld	a1,144(sp)
    800098f0:	652a                	ld	a0,136(sp)

00000000800098f2 <.LBB3_123>:
    800098f2:	0001e617          	auipc	a2,0x1e
    800098f6:	fe660613          	addi	a2,a2,-26 # 800278d8 <.L__unnamed_27>
    800098fa:	00003097          	auipc	ra,0x3
    800098fe:	55c080e7          	jalr	1372(ra) # 8000ce56 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h42e1173662da7b7dE>
    80009902:	fcaa                	sd	a0,120(sp)
    80009904:	a009                	j	80009906 <.LBB3_123+0x14>
    80009906:	0d08                	addi	a0,sp,656
    80009908:	00008097          	auipc	ra,0x8
    8000990c:	d90080e7          	jalr	-624(ra) # 80011698 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h362a59dae1fa4f35E>
    80009910:	f8aa                	sd	a0,112(sp)
    80009912:	a009                	j	80009914 <.LBB3_123+0x22>
    80009914:	658a                	ld	a1,128(sp)
    80009916:	451d                	li	a0,7
    80009918:	38b56b63          	bltu	a0,a1,80009cae <.LBB3_147+0x14>
    8000991c:	a009                	j	8000991e <.LBB3_123+0x2c>
    8000991e:	7566                	ld	a0,120(sp)
    80009920:	75c6                	ld	a1,112(sp)
    80009922:	660a                	ld	a2,128(sp)
    80009924:	0606                	slli	a2,a2,0x1
    80009926:	95b2                	add	a1,a1,a2
    80009928:	08a59223          	sh	a0,132(a1) # 2084 <.Lline_table_start0+0x70>
    8000992c:	4511                	li	a0,4
        }

        fence(Ordering::SeqCst);
    8000992e:	2ca10723          	sb	a0,718(sp)
    80009932:	ffffb097          	auipc	ra,0xffffb
    80009936:	e7e080e7          	jalr	-386(ra) # 800047b0 <_ZN4core4sync6atomic5fence17hd2f91624c9f09ce8E>
    8000993a:	a009                	j	8000993c <.LBB3_123+0x4a>
    8000993c:	0d08                	addi	a0,sp,656

        guard.avail.idx += 1;
    8000993e:	00008097          	auipc	ra,0x8
    80009942:	d5a080e7          	jalr	-678(ra) # 80011698 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h362a59dae1fa4f35E>
    80009946:	f4aa                	sd	a0,104(sp)
    80009948:	a009                	j	8000994a <.LBB3_123+0x58>
    8000994a:	7526                	ld	a0,104(sp)
    8000994c:	08255503          	lhu	a0,130(a0)
    80009950:	00150593          	addi	a1,a0,1
    80009954:	f0ae                	sd	a1,96(sp)
    80009956:	6541                	lui	a0,0x10
    80009958:	357d                	addiw	a0,a0,-1
    8000995a:	8d6d                	and	a0,a0,a1
    8000995c:	36b51463          	bne	a0,a1,80009cc4 <.LBB3_149>
    80009960:	a009                	j	80009962 <.LBB3_123+0x70>
    80009962:	7506                	ld	a0,96(sp)
    80009964:	75a6                	ld	a1,104(sp)
    80009966:	08a59123          	sh	a0,130(a1)
    8000996a:	4511                	li	a0,4

        fence(Ordering::SeqCst);
    8000996c:	2ca107a3          	sb	a0,719(sp)
    80009970:	ffffb097          	auipc	ra,0xffffb
    80009974:	e40080e7          	jalr	-448(ra) # 800047b0 <_ZN4core4sync6atomic5fence17hd2f91624c9f09ce8E>
    80009978:	a009                	j	8000997a <.LBB3_123+0x88>
    8000997a:	05000513          	li	a0,80
    8000997e:	4581                	li	a1,0

        unsafe { write(VIRTIO_MMIO_QUEUE_NOTIFY, 0); }
    80009980:	00016097          	auipc	ra,0x16
    80009984:	bb0080e7          	jalr	-1104(ra) # 8001f530 <_ZN6kernel6driver11virtio_disk5write17hf82e2458568dd21bE>
    80009988:	a009                	j	8000998a <.LBB3_123+0x98>

        // wait for the disk to handle the buf data
        while guard.info[idx[0]].disk {
    8000998a:	a009                	j	8000998c <.LBB3_123+0x9a>
    8000998c:	0d08                	addi	a0,sp,656
    8000998e:	00008097          	auipc	ra,0x8
    80009992:	c4c080e7          	jalr	-948(ra) # 800115da <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h7eb0b551b3d2dabcE>
    80009996:	ecaa                	sd	a0,88(sp)
    80009998:	a009                	j	8000999a <.LBB3_123+0xa8>
    8000999a:	29813583          	ld	a1,664(sp)
    8000999e:	e8ae                	sd	a1,80(sp)
    800099a0:	451d                	li	a0,7
    800099a2:	32b56f63          	bltu	a0,a1,80009ce0 <.LBB3_150+0x14>
    800099a6:	a009                	j	800099a8 <.LBB3_123+0xb6>
    800099a8:	6566                	ld	a0,88(sp)
    800099aa:	65c6                	ld	a1,80(sp)
    800099ac:	4661                	li	a2,24
    800099ae:	02c585b3          	mul	a1,a1,a2
    800099b2:	952e                	add	a0,a0,a1
    800099b4:	6589                	lui	a1,0x2
    800099b6:	0215859b          	addiw	a1,a1,33
    800099ba:	952e                	add	a0,a0,a1
    800099bc:	00054503          	lbu	a0,0(a0) # 10000 <.Lline_table_start0+0x6fe>
    800099c0:	8905                	andi	a0,a0,1
    800099c2:	e909                	bnez	a0,800099d4 <.LBB3_124>
    800099c4:	a009                	j	800099c6 <.LBB3_123+0xd4>
    800099c6:	0d08                	addi	a0,sp,656
            // choose the raw buf data as channel
            unsafe { CPU_MANAGER.myproc().unwrap().sleep(buf_raw_data as usize, guard); }
            guard = self.acquire();
        }

        let buf_channel = guard.info[idx[0]].buf_channel.take();
    800099c8:	00008097          	auipc	ra,0x8
    800099cc:	cd0080e7          	jalr	-816(ra) # 80011698 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h362a59dae1fa4f35E>
    800099d0:	e4aa                	sd	a0,72(sp)
    800099d2:	a8a1                	j	80009a2a <.LBB3_125+0x40>

00000000800099d4 <.LBB3_124>:
            unsafe { CPU_MANAGER.myproc().unwrap().sleep(buf_raw_data as usize, guard); }
    800099d4:	00069517          	auipc	a0,0x69
    800099d8:	76c50513          	addi	a0,a0,1900 # 80073140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    800099dc:	00008097          	auipc	ra,0x8
    800099e0:	422080e7          	jalr	1058(ra) # 80011dfe <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    800099e4:	e0aa                	sd	a0,64(sp)
    800099e6:	a009                	j	800099e8 <.LBB3_124+0x14>
    800099e8:	6506                	ld	a0,64(sp)

00000000800099ea <.LBB3_125>:
    800099ea:	0001e597          	auipc	a1,0x1e
    800099ee:	f4e58593          	addi	a1,a1,-178 # 80027938 <.L__unnamed_28>
    800099f2:	00005097          	auipc	ra,0x5
    800099f6:	35a080e7          	jalr	858(ra) # 8000ed4c <_ZN4core6option15Option$LT$T$GT$6unwrap17h81f0c84c54a80648E>
    800099fa:	fc2a                	sd	a0,56(sp)
    800099fc:	a009                	j	800099fe <.LBB3_125+0x14>
    800099fe:	27013583          	ld	a1,624(sp)
    80009a02:	7562                	ld	a0,56(sp)
    80009a04:	29013603          	ld	a2,656(sp)
    80009a08:	00008097          	auipc	ra,0x8
    80009a0c:	0d2080e7          	jalr	210(ra) # 80011ada <_ZN6kernel7process7process11task_struct5sleep17h3e20b1d3f8d47a0dE>
    80009a10:	a009                	j	80009a12 <.LBB3_125+0x28>
            guard = self.acquire();
    80009a12:	28013503          	ld	a0,640(sp)
    80009a16:	00007097          	auipc	ra,0x7
    80009a1a:	d18080e7          	jalr	-744(ra) # 8001072e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h922bace5232f6228E>
    80009a1e:	f82a                	sd	a0,48(sp)
    80009a20:	a009                	j	80009a22 <.LBB3_125+0x38>
    80009a22:	7542                	ld	a0,48(sp)
    80009a24:	28a13823          	sd	a0,656(sp)
        while guard.info[idx[0]].disk {
    80009a28:	b795                	j	8000998c <.LBB3_123+0x9a>
        let buf_channel = guard.info[idx[0]].buf_channel.take();
    80009a2a:	29813583          	ld	a1,664(sp)
    80009a2e:	f42e                	sd	a1,40(sp)
    80009a30:	451d                	li	a0,7
    80009a32:	2cb56263          	bltu	a0,a1,80009cf6 <.LBB3_151+0x14>
    80009a36:	a009                	j	80009a38 <.LBB3_125+0x4e>
    80009a38:	6526                	ld	a0,72(sp)
    80009a3a:	75a2                	ld	a1,40(sp)
    80009a3c:	4661                	li	a2,24
    80009a3e:	02c585b3          	mul	a1,a1,a2
    80009a42:	952e                	add	a0,a0,a1
    80009a44:	6589                	lui	a1,0x2
    80009a46:	25c1                	addiw	a1,a1,16
    80009a48:	952e                	add	a0,a0,a1
    80009a4a:	00005097          	auipc	ra,0x5
    80009a4e:	c4c080e7          	jalr	-948(ra) # 8000e696 <_ZN4core6option15Option$LT$T$GT$4take17h3f0477f04f3bf4c3E>
    80009a52:	862a                	mv	a2,a0
    80009a54:	ec32                	sd	a2,24(sp)
    80009a56:	862e                	mv	a2,a1
    80009a58:	f032                	sd	a2,32(sp)
    80009a5a:	34a13c23          	sd	a0,856(sp)
    80009a5e:	36b13023          	sd	a1,864(sp)
    80009a62:	a009                	j	80009a64 <.LBB3_125+0x7a>
        debug_assert_eq!(buf_channel.unwrap(), buf_raw_data as usize);
    80009a64:	7582                	ld	a1,32(sp)
    80009a66:	6562                	ld	a0,24(sp)

0000000080009a68 <.LBB3_126>:
    80009a68:	0001e617          	auipc	a2,0x1e
    80009a6c:	f0060613          	addi	a2,a2,-256 # 80027968 <.L__unnamed_29>
    80009a70:	00005097          	auipc	ra,0x5
    80009a74:	454080e7          	jalr	1108(ra) # 8000eec4 <_ZN4core6option15Option$LT$T$GT$6unwrap17he97e68f5d459b5f2E>
    80009a78:	2ea13023          	sd	a0,736(sp)
    80009a7c:	a009                	j	80009a7e <.LBB3_126+0x16>
    80009a7e:	27013583          	ld	a1,624(sp)
    80009a82:	2eb13423          	sd	a1,744(sp)
    80009a86:	1590                	addi	a2,sp,736
    80009a88:	e432                	sd	a2,8(sp)
    80009a8a:	2cc13823          	sd	a2,720(sp)
    80009a8e:	15a8                	addi	a0,sp,744
    80009a90:	e82a                	sd	a0,16(sp)
    80009a92:	2ca13c23          	sd	a0,728(sp)
    80009a96:	36c13423          	sd	a2,872(sp)
    80009a9a:	36a13823          	sd	a0,880(sp)
    80009a9e:	2e013503          	ld	a0,736(sp)
    80009aa2:	02b50463          	beq	a0,a1,80009aca <.LBB3_127+0x14>
    80009aa6:	a009                	j	80009aa8 <.LBB3_126+0x40>
    80009aa8:	6642                	ld	a2,16(sp)
    80009aaa:	65a2                	ld	a1,8(sp)
    80009aac:	4501                	li	a0,0
    80009aae:	2ea10ba3          	sb	a0,759(sp)
    80009ab2:	2ea13c23          	sd	a0,760(sp)

0000000080009ab6 <.LBB3_127>:
    80009ab6:	0001e717          	auipc	a4,0x1e
    80009aba:	eca70713          	addi	a4,a4,-310 # 80027980 <.L__unnamed_30>
    80009abe:	1db4                	addi	a3,sp,760
    80009ac0:	00016097          	auipc	ra,0x16
    80009ac4:	ee4080e7          	jalr	-284(ra) # 8001f9a4 <_ZN4core9panicking13assert_failed17h4e6d74c9d534b647E>
    80009ac8:	0000                	unimp
    80009aca:	0d08                	addi	a0,sp,656
        guard.free_chain(idx[0]);
    80009acc:	00008097          	auipc	ra,0x8
    80009ad0:	bcc080e7          	jalr	-1076(ra) # 80011698 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h362a59dae1fa4f35E>
    80009ad4:	e02a                	sd	a0,0(sp)
    80009ad6:	a009                	j	80009ad8 <.LBB3_127+0x22>
    80009ad8:	6502                	ld	a0,0(sp)
    80009ada:	29813583          	ld	a1,664(sp)
    80009ade:	00015097          	auipc	ra,0x15
    80009ae2:	74e080e7          	jalr	1870(ra) # 8001f22c <_ZN6kernel6driver11virtio_disk4Disk10free_chain17h88621e1c7ba36f26E>
    80009ae6:	a009                	j	80009ae8 <.LBB3_127+0x32>

        drop(guard);
    80009ae8:	29013503          	ld	a0,656(sp)
    80009aec:	00013097          	auipc	ra,0x13
    80009af0:	68c080e7          	jalr	1676(ra) # 8001d178 <_ZN4core3mem4drop17hf5d8d4b62719f1bfE>
    80009af4:	a009                	j	80009af6 <.LBB3_127+0x40>
    }
    80009af6:	37813083          	ld	ra,888(sp)
    80009afa:	38010113          	addi	sp,sp,896
    80009afe:	8082                	ret
        let buf0 = &mut guard.ops[idx[0]];
    80009b00:	23013503          	ld	a0,560(sp)

0000000080009b04 <.LBB3_128>:
    80009b04:	0001e617          	auipc	a2,0x1e
    80009b08:	bac60613          	addi	a2,a2,-1108 # 800276b0 <.L__unnamed_31>
    80009b0c:	45a1                	li	a1,8
    80009b0e:	00018097          	auipc	ra,0x18
    80009b12:	794080e7          	jalr	1940(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

0000000080009b18 <.LBB3_129>:
        buf0.sector = (buf.read_blockno() as usize * (BSIZE / 512)) as u64;
    80009b18:	0001e517          	auipc	a0,0x1e
    80009b1c:	90850513          	addi	a0,a0,-1784 # 80027420 <str.1>

0000000080009b20 <.LBB3_130>:
    80009b20:	0001e617          	auipc	a2,0x1e
    80009b24:	ba860613          	addi	a2,a2,-1112 # 800276c8 <.L__unnamed_32>
    80009b28:	02100593          	li	a1,33
    80009b2c:	00018097          	auipc	ra,0x18
    80009b30:	74a080e7          	jalr	1866(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80009b34:	0000                	unimp
        guard.desc[idx[0]].addr = buf0 as *mut _ as u64;
    80009b36:	20813503          	ld	a0,520(sp)

0000000080009b3a <.LBB3_131>:
    80009b3a:	0001e617          	auipc	a2,0x1e
    80009b3e:	ba660613          	addi	a2,a2,-1114 # 800276e0 <.L__unnamed_33>
    80009b42:	45a1                	li	a1,8
    80009b44:	00018097          	auipc	ra,0x18
    80009b48:	75e080e7          	jalr	1886(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80009b4c:	0000                	unimp
        guard.desc[idx[0]].len = core::mem::size_of::<VirtIOBlkReq>().try_into().unwrap();
    80009b4e:	751e                	ld	a0,480(sp)

0000000080009b50 <.LBB3_132>:
    80009b50:	0001e617          	auipc	a2,0x1e
    80009b54:	bc060613          	addi	a2,a2,-1088 # 80027710 <.L__unnamed_34>
    80009b58:	45a1                	li	a1,8
    80009b5a:	00018097          	auipc	ra,0x18
    80009b5e:	748080e7          	jalr	1864(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80009b62:	0000                	unimp
        guard.desc[idx[0]].flags = VRING_DESC_F_NEXT;
    80009b64:	655e                	ld	a0,464(sp)

0000000080009b66 <.LBB3_133>:
    80009b66:	0001e617          	auipc	a2,0x1e
    80009b6a:	bc260613          	addi	a2,a2,-1086 # 80027728 <.L__unnamed_35>
    80009b6e:	45a1                	li	a1,8
    80009b70:	00018097          	auipc	ra,0x18
    80009b74:	732080e7          	jalr	1842(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80009b78:	0000                	unimp
        guard.desc[idx[0]].next = idx[1].try_into().unwrap();
    80009b7a:	753a                	ld	a0,424(sp)

0000000080009b7c <.LBB3_134>:
    80009b7c:	0001e617          	auipc	a2,0x1e
    80009b80:	bdc60613          	addi	a2,a2,-1060 # 80027758 <.L__unnamed_36>
    80009b84:	45a1                	li	a1,8
    80009b86:	00018097          	auipc	ra,0x18
    80009b8a:	71c080e7          	jalr	1820(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80009b8e:	0000                	unimp
        guard.desc[idx[1]].addr = buf_raw_data as u64;
    80009b90:	657a                	ld	a0,408(sp)

0000000080009b92 <.LBB3_135>:
    80009b92:	0001e617          	auipc	a2,0x1e
    80009b96:	bde60613          	addi	a2,a2,-1058 # 80027770 <.L__unnamed_37>
    80009b9a:	45a1                	li	a1,8
    80009b9c:	00018097          	auipc	ra,0x18
    80009ba0:	706080e7          	jalr	1798(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80009ba4:	0000                	unimp
        guard.desc[idx[1]].len = BSIZE.try_into().unwrap();
    80009ba6:	7556                	ld	a0,368(sp)

0000000080009ba8 <.LBB3_136>:
    80009ba8:	0001e617          	auipc	a2,0x1e
    80009bac:	bf860613          	addi	a2,a2,-1032 # 800277a0 <.L__unnamed_38>
    80009bb0:	45a1                	li	a1,8
    80009bb2:	00018097          	auipc	ra,0x18
    80009bb6:	6f0080e7          	jalr	1776(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80009bba:	0000                	unimp
        guard.desc[idx[1]].flags = if writing { 0 } else { VRING_DESC_F_WRITE };
    80009bbc:	7516                	ld	a0,352(sp)

0000000080009bbe <.LBB3_137>:
    80009bbe:	0001e617          	auipc	a2,0x1e
    80009bc2:	bfa60613          	addi	a2,a2,-1030 # 800277b8 <.L__unnamed_39>
    80009bc6:	45a1                	li	a1,8
    80009bc8:	00018097          	auipc	ra,0x18
    80009bcc:	6da080e7          	jalr	1754(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80009bd0:	0000                	unimp
        guard.desc[idx[1]].flags |= VRING_DESC_F_NEXT;
    80009bd2:	6556                	ld	a0,336(sp)

0000000080009bd4 <.LBB3_138>:
    80009bd4:	0001e617          	auipc	a2,0x1e
    80009bd8:	bfc60613          	addi	a2,a2,-1028 # 800277d0 <.L__unnamed_40>
    80009bdc:	45a1                	li	a1,8
    80009bde:	00018097          	auipc	ra,0x18
    80009be2:	6c4080e7          	jalr	1732(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80009be6:	0000                	unimp
        guard.desc[idx[1]].next = idx[2].try_into().unwrap();
    80009be8:	7532                	ld	a0,296(sp)

0000000080009bea <.LBB3_139>:
    80009bea:	0001e617          	auipc	a2,0x1e
    80009bee:	c1660613          	addi	a2,a2,-1002 # 80027800 <.L__unnamed_41>
    80009bf2:	45a1                	li	a1,8
    80009bf4:	00018097          	auipc	ra,0x18
    80009bf8:	6ae080e7          	jalr	1710(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80009bfc:	0000                	unimp
        guard.info[idx[0]].status = 0xff;
    80009bfe:	6572                	ld	a0,280(sp)

0000000080009c00 <.LBB3_140>:
    80009c00:	0001e617          	auipc	a2,0x1e
    80009c04:	c1860613          	addi	a2,a2,-1000 # 80027818 <.L__unnamed_42>
    80009c08:	45a1                	li	a1,8
    80009c0a:	00018097          	auipc	ra,0x18
    80009c0e:	698080e7          	jalr	1688(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80009c12:	0000                	unimp
        guard.desc[idx[2]].addr = &mut guard.info[idx[0]].status as *mut _ as u64;
    80009c14:	6532                	ld	a0,264(sp)

0000000080009c16 <.LBB3_141>:
    80009c16:	0001e617          	auipc	a2,0x1e
    80009c1a:	c1a60613          	addi	a2,a2,-998 # 80027830 <.L__unnamed_43>
    80009c1e:	45a1                	li	a1,8
    80009c20:	00018097          	auipc	ra,0x18
    80009c24:	682080e7          	jalr	1666(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80009c28:	0000                	unimp
    80009c2a:	754e                	ld	a0,240(sp)

0000000080009c2c <.LBB3_142>:
    80009c2c:	0001e617          	auipc	a2,0x1e
    80009c30:	c1c60613          	addi	a2,a2,-996 # 80027848 <.L__unnamed_44>
    80009c34:	45a1                	li	a1,8
    80009c36:	00018097          	auipc	ra,0x18
    80009c3a:	66c080e7          	jalr	1644(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80009c3e:	0000                	unimp
        guard.desc[idx[2]].len = 1;
    80009c40:	750e                	ld	a0,224(sp)

0000000080009c42 <.LBB3_143>:
    80009c42:	0001e617          	auipc	a2,0x1e
    80009c46:	c1e60613          	addi	a2,a2,-994 # 80027860 <.L__unnamed_45>
    80009c4a:	45a1                	li	a1,8
    80009c4c:	00018097          	auipc	ra,0x18
    80009c50:	656080e7          	jalr	1622(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80009c54:	0000                	unimp
        guard.desc[idx[2]].flags = VRING_DESC_F_WRITE;
    80009c56:	654e                	ld	a0,208(sp)

0000000080009c58 <.LBB3_144>:
    80009c58:	0001e617          	auipc	a2,0x1e
    80009c5c:	c2060613          	addi	a2,a2,-992 # 80027878 <.L__unnamed_46>
    80009c60:	45a1                	li	a1,8
    80009c62:	00018097          	auipc	ra,0x18
    80009c66:	640080e7          	jalr	1600(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80009c6a:	0000                	unimp
        guard.desc[idx[2]].next = 0;
    80009c6c:	650e                	ld	a0,192(sp)

0000000080009c6e <.LBB3_145>:
    80009c6e:	0001e617          	auipc	a2,0x1e
    80009c72:	c2260613          	addi	a2,a2,-990 # 80027890 <.L__unnamed_47>
    80009c76:	45a1                	li	a1,8
    80009c78:	00018097          	auipc	ra,0x18
    80009c7c:	62a080e7          	jalr	1578(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80009c80:	0000                	unimp
        guard.info[idx[0]].disk = true;
    80009c82:	754a                	ld	a0,176(sp)

0000000080009c84 <.LBB3_146>:
    80009c84:	0001e617          	auipc	a2,0x1e
    80009c88:	c2460613          	addi	a2,a2,-988 # 800278a8 <.L__unnamed_48>
    80009c8c:	45a1                	li	a1,8
    80009c8e:	00018097          	auipc	ra,0x18
    80009c92:	614080e7          	jalr	1556(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80009c96:	0000                	unimp
        guard.info[idx[0]].buf_channel = Some(buf_raw_data as usize);
    80009c98:	750a                	ld	a0,160(sp)

0000000080009c9a <.LBB3_147>:
    80009c9a:	0001e617          	auipc	a2,0x1e
    80009c9e:	c2660613          	addi	a2,a2,-986 # 800278c0 <.L__unnamed_49>
    80009ca2:	45a1                	li	a1,8
    80009ca4:	00018097          	auipc	ra,0x18
    80009ca8:	5fe080e7          	jalr	1534(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80009cac:	0000                	unimp
            guard.avail.ring[i] = idx[0].try_into().unwrap();
    80009cae:	650a                	ld	a0,128(sp)

0000000080009cb0 <.LBB3_148>:
    80009cb0:	0001e617          	auipc	a2,0x1e
    80009cb4:	c4060613          	addi	a2,a2,-960 # 800278f0 <.L__unnamed_50>
    80009cb8:	45a1                	li	a1,8
    80009cba:	00018097          	auipc	ra,0x18
    80009cbe:	5e8080e7          	jalr	1512(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

0000000080009cc4 <.LBB3_149>:
        guard.avail.idx += 1;
    80009cc4:	0001d517          	auipc	a0,0x1d
    80009cc8:	71c50513          	addi	a0,a0,1820 # 800273e0 <str.0>

0000000080009ccc <.LBB3_150>:
    80009ccc:	0001e617          	auipc	a2,0x1e
    80009cd0:	c3c60613          	addi	a2,a2,-964 # 80027908 <.L__unnamed_51>
    80009cd4:	45f1                	li	a1,28
    80009cd6:	00018097          	auipc	ra,0x18
    80009cda:	5a0080e7          	jalr	1440(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80009cde:	0000                	unimp
        while guard.info[idx[0]].disk {
    80009ce0:	6546                	ld	a0,80(sp)

0000000080009ce2 <.LBB3_151>:
    80009ce2:	0001e617          	auipc	a2,0x1e
    80009ce6:	c3e60613          	addi	a2,a2,-962 # 80027920 <.L__unnamed_52>
    80009cea:	45a1                	li	a1,8
    80009cec:	00018097          	auipc	ra,0x18
    80009cf0:	5b6080e7          	jalr	1462(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80009cf4:	0000                	unimp
        let buf_channel = guard.info[idx[0]].buf_channel.take();
    80009cf6:	7522                	ld	a0,40(sp)

0000000080009cf8 <.LBB3_152>:
    80009cf8:	0001e617          	auipc	a2,0x1e
    80009cfc:	c5860613          	addi	a2,a2,-936 # 80027950 <.L__unnamed_53>
    80009d00:	45a1                	li	a1,8
    80009d02:	00018097          	auipc	ra,0x18
    80009d06:	5a0080e7          	jalr	1440(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel6driver4uart84_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..driver..uart..Uart$GT$$GT$4intr17h862db3ca167d2b66E:

0000000080009d0c <_ZN6kernel6driver4uart84_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..driver..uart..Uart$GT$$GT$4intr17h862db3ca167d2b66E>:

impl Spinlock<Uart> {
    /// Handle a uart interrupt, raised because input has
    /// arrived, or the uart is ready for more output, or
    /// both, called from trap.rs
    pub fn intr(&self) {
    80009d0c:	7139                	addi	sp,sp,-64
    80009d0e:	fc06                	sd	ra,56(sp)
    80009d10:	ec2a                	sd	a0,24(sp)
    80009d12:	f42a                	sd	a0,40(sp)
    80009d14:	a009                	j	80009d16 <_ZN6kernel6driver4uart84_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..driver..uart..Uart$GT$$GT$4intr17h862db3ca167d2b66E+0xa>
    80009d16:	10000537          	lui	a0,0x10000
    80009d1a:	2515                	addiw	a0,a0,5
        loop {
            // read and process incoming characters. 
            let c: u8;
            if read_reg(UART_BASE_ADDR + LSR) & 1 > 0 {
    80009d1c:	00012097          	auipc	ra,0x12
    80009d20:	98c080e7          	jalr	-1652(ra) # 8001b6a8 <_ZN6kernel6driver4uart8read_reg17h6cf7d47ea5c47590E>
    80009d24:	e82a                	sd	a0,16(sp)
    80009d26:	a009                	j	80009d28 <_ZN6kernel6driver4uart84_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..driver..uart..Uart$GT$$GT$4intr17h862db3ca167d2b66E+0x1c>
    80009d28:	6542                	ld	a0,16(sp)
    80009d2a:	8905                	andi	a0,a0,1
    80009d2c:	4581                	li	a1,0
    80009d2e:	00b50b63          	beq	a0,a1,80009d44 <_ZN6kernel6driver4uart84_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..driver..uart..Uart$GT$$GT$4intr17h862db3ca167d2b66E+0x38>
    80009d32:	a009                	j	80009d34 <_ZN6kernel6driver4uart84_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..driver..uart..Uart$GT$$GT$4intr17h862db3ca167d2b66E+0x28>
    80009d34:	10000537          	lui	a0,0x10000
                c = read_reg(UART_BASE_ADDR + RHR)
    80009d38:	00012097          	auipc	ra,0x12
    80009d3c:	970080e7          	jalr	-1680(ra) # 8001b6a8 <_ZN6kernel6driver4uart8read_reg17h6cf7d47ea5c47590E>
    80009d40:	e42a                	sd	a0,8(sp)
    80009d42:	a801                	j	80009d52 <_ZN6kernel6driver4uart84_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..driver..uart..Uart$GT$$GT$4intr17h862db3ca167d2b66E+0x46>
                break;
            }
            console_intr(c);
        }
        // transmit
        self.acquire().transmit();
    80009d44:	6562                	ld	a0,24(sp)
    80009d46:	00006097          	auipc	ra,0x6
    80009d4a:	3c8080e7          	jalr	968(ra) # 8001010e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h007ac3682185ef97E>
    80009d4e:	f02a                	sd	a0,32(sp)
    80009d50:	a811                	j	80009d64 <_ZN6kernel6driver4uart84_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..driver..uart..Uart$GT$$GT$4intr17h862db3ca167d2b66E+0x58>
                c = read_reg(UART_BASE_ADDR + RHR)
    80009d52:	6522                	ld	a0,8(sp)
    80009d54:	02a10ba3          	sb	a0,55(sp)
            console_intr(c);
    80009d58:	ffffa097          	auipc	ra,0xffffa
    80009d5c:	4fa080e7          	jalr	1274(ra) # 80004252 <_ZN6kernel6driver7console12console_intr17hcdedd3169cb49f5fE>
    80009d60:	a009                	j	80009d62 <_ZN6kernel6driver4uart84_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..driver..uart..Uart$GT$$GT$4intr17h862db3ca167d2b66E+0x56>
        loop {
    80009d62:	bf55                	j	80009d16 <_ZN6kernel6driver4uart84_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..driver..uart..Uart$GT$$GT$4intr17h862db3ca167d2b66E+0xa>
    80009d64:	1008                	addi	a0,sp,32
        self.acquire().transmit();
    80009d66:	00008097          	auipc	ra,0x8
    80009d6a:	a30080e7          	jalr	-1488(ra) # 80011796 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hce69ac52326dbcadE>
    80009d6e:	e02a                	sd	a0,0(sp)
    80009d70:	a009                	j	80009d72 <_ZN6kernel6driver4uart84_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..driver..uart..Uart$GT$$GT$4intr17h862db3ca167d2b66E+0x66>
    80009d72:	6502                	ld	a0,0(sp)
    80009d74:	00011097          	auipc	ra,0x11
    80009d78:	7be080e7          	jalr	1982(ra) # 8001b532 <_ZN6kernel6driver4uart4Uart8transmit17h1cf1c52f0e7bc086E>
    80009d7c:	a009                	j	80009d7e <_ZN6kernel6driver4uart84_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..driver..uart..Uart$GT$$GT$4intr17h862db3ca167d2b66E+0x72>
    80009d7e:	1008                	addi	a0,sp,32
    80009d80:	ffffd097          	auipc	ra,0xffffd
    80009d84:	29c080e7          	jalr	668(ra) # 8000701c <_ZN4core3ptr92drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..driver..uart..Uart$GT$$GT$17h4785ee23048b5bddE>
    80009d88:	a009                	j	80009d8a <_ZN6kernel6driver4uart84_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..driver..uart..Uart$GT$$GT$4intr17h862db3ca167d2b66E+0x7e>
    }
    80009d8a:	70e2                	ld	ra,56(sp)
    80009d8c:	6121                	addi	sp,sp,64
    80009d8e:	8082                	ret

Disassembly of section .text._ZN6kernel6driver4uart84_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..driver..uart..Uart$GT$$GT$4putc17h6cd19d349a1fe87bE:

0000000080009d90 <_ZN6kernel6driver4uart84_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..driver..uart..Uart$GT$$GT$4putc17h6cd19d349a1fe87bE>:


    /// Put a u8 to the uart buffer(in the kernel). 
    /// It might sleep if the buffer is full. 
    pub fn putc(&self, c: u8) {
    80009d90:	7155                	addi	sp,sp,-208
    80009d92:	e586                	sd	ra,200(sp)
    80009d94:	f8aa                	sd	a0,112(sp)
    80009d96:	862e                	mv	a2,a1
    80009d98:	fcb2                	sd	a2,120(sp)
    80009d9a:	f52a                	sd	a0,168(sp)
    80009d9c:	0ab10ba3          	sb	a1,183(sp)
        let mut uart = self.acquire();
    80009da0:	00006097          	auipc	ra,0x6
    80009da4:	36e080e7          	jalr	878(ra) # 8001010e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h007ac3682185ef97E>
    80009da8:	e12a                	sd	a0,128(sp)
    80009daa:	a009                	j	80009dac <_ZN6kernel6driver4uart84_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..driver..uart..Uart$GT$$GT$4putc17h6cd19d349a1fe87bE+0x1c>
    80009dac:	4581                	li	a1,0

        if PANICKED.load(Ordering::Relaxed) {
    80009dae:	08b107a3          	sb	a1,143(sp)

0000000080009db2 <.LBB5_26>:
    80009db2:	00069517          	auipc	a0,0x69
    80009db6:	7ce50513          	addi	a0,a0,1998 # 80073580 <_ZN6kernel6driver7console8PANICKED17hbdbbad2548440929E>
    80009dba:	ffffb097          	auipc	ra,0xffffb
    80009dbe:	8b4080e7          	jalr	-1868(ra) # 8000466e <_ZN4core4sync6atomic10AtomicBool4load17h49a663f50dd66935E>
    80009dc2:	f4aa                	sd	a0,104(sp)
    80009dc4:	a009                	j	80009dc6 <.LBB5_26+0x14>
    80009dc6:	7526                	ld	a0,104(sp)
    80009dc8:	e119                	bnez	a0,80009dce <.LBB5_26+0x1c>
    80009dca:	a009                	j	80009dcc <.LBB5_26+0x1a>
            loop{}
        }

        loop {
    80009dcc:	a011                	j	80009dd0 <.LBB5_26+0x1e>
            loop{}
    80009dce:	a001                	j	80009dce <.LBB5_26+0x1c>
    80009dd0:	0108                	addi	a0,sp,128
            if uart.write_index == uart.read_index + Wrapping(UART_BUF_SIZE) {
    80009dd2:	00008097          	auipc	ra,0x8
    80009dd6:	866080e7          	jalr	-1946(ra) # 80011638 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h9affced61e721535E>
    80009dda:	f0aa                	sd	a0,96(sp)
    80009ddc:	a009                	j	80009dde <.LBB5_26+0x2c>
    80009dde:	7506                	ld	a0,96(sp)
    80009de0:	e8aa                	sd	a0,80(sp)
    80009de2:	0108                	addi	a0,sp,128
    80009de4:	00008097          	auipc	ra,0x8
    80009de8:	854080e7          	jalr	-1964(ra) # 80011638 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h9affced61e721535E>
    80009dec:	ecaa                	sd	a0,88(sp)
    80009dee:	a009                	j	80009df0 <.LBB5_26+0x3e>
    80009df0:	6566                	ld	a0,88(sp)
    80009df2:	6508                	ld	a0,8(a0)
    80009df4:	02000593          	li	a1,32
    80009df8:	ed2e                	sd	a1,152(sp)
    80009dfa:	ffffd097          	auipc	ra,0xffffd
    80009dfe:	5f4080e7          	jalr	1524(ra) # 800073ee <_ZN84_$LT$core..num..wrapping..Wrapping$LT$usize$GT$$u20$as$u20$core..ops..arith..Add$GT$3add17hc13ca841e8f8e9ddE>
    80009e02:	e92a                	sd	a0,144(sp)
    80009e04:	a009                	j	80009e06 <.LBB5_26+0x54>
    80009e06:	6546                	ld	a0,80(sp)
    80009e08:	090c                	addi	a1,sp,144
    80009e0a:	00006097          	auipc	ra,0x6
    80009e0e:	842080e7          	jalr	-1982(ra) # 8000f64c <_ZN79_$LT$core..num..wrapping..Wrapping$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h94523e3cd63d6752E>
    80009e12:	e4aa                	sd	a0,72(sp)
    80009e14:	a009                	j	80009e16 <.LBB5_26+0x64>
    80009e16:	6526                	ld	a0,72(sp)
    80009e18:	4581                	li	a1,0
    80009e1a:	00b50d63          	beq	a0,a1,80009e34 <.LBB5_27+0x14>
    80009e1e:	a009                	j	80009e20 <.LBB5_27>

0000000080009e20 <.LBB5_27>:
                let p = unsafe {
                    CPU_MANAGER.myproc().expect("Fail to get my process.")
    80009e20:	00069517          	auipc	a0,0x69
    80009e24:	32050513          	addi	a0,a0,800 # 80073140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    80009e28:	00008097          	auipc	ra,0x8
    80009e2c:	fd6080e7          	jalr	-42(ra) # 80011dfe <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    80009e30:	e0aa                	sd	a0,64(sp)
    80009e32:	a801                	j	80009e42 <.LBB5_27+0x22>
    80009e34:	0108                	addi	a0,sp,128
                };

                p.sleep(&uart.read_index as *const _ as usize, uart);
                uart = self.acquire();
            } else {
                let write_index = uart.write_index.0 % UART_BUF_SIZE;
    80009e36:	00008097          	auipc	ra,0x8
    80009e3a:	802080e7          	jalr	-2046(ra) # 80011638 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h9affced61e721535E>
    80009e3e:	fc2a                	sd	a0,56(sp)
    80009e40:	a8a9                	j	80009e9a <.LBB5_29+0x4e>
                    CPU_MANAGER.myproc().expect("Fail to get my process.")
    80009e42:	6506                	ld	a0,64(sp)

0000000080009e44 <.LBB5_28>:
    80009e44:	0001e597          	auipc	a1,0x1e
    80009e48:	b6c58593          	addi	a1,a1,-1172 # 800279b0 <.L__unnamed_54>

0000000080009e4c <.LBB5_29>:
    80009e4c:	0001e697          	auipc	a3,0x1e
    80009e50:	b9468693          	addi	a3,a3,-1132 # 800279e0 <.L__unnamed_55>
    80009e54:	465d                	li	a2,23
    80009e56:	00005097          	auipc	ra,0x5
    80009e5a:	d0a080e7          	jalr	-758(ra) # 8000eb60 <_ZN4core6option15Option$LT$T$GT$6expect17h5cc0070b74d715b8E>
    80009e5e:	f82a                	sd	a0,48(sp)
    80009e60:	a009                	j	80009e62 <.LBB5_29+0x16>
    80009e62:	7542                	ld	a0,48(sp)
    80009e64:	fd2a                	sd	a0,184(sp)
    80009e66:	0108                	addi	a0,sp,128
                p.sleep(&uart.read_index as *const _ as usize, uart);
    80009e68:	00007097          	auipc	ra,0x7
    80009e6c:	7d0080e7          	jalr	2000(ra) # 80011638 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h9affced61e721535E>
    80009e70:	f42a                	sd	a0,40(sp)
    80009e72:	a009                	j	80009e74 <.LBB5_29+0x28>
    80009e74:	7542                	ld	a0,48(sp)
    80009e76:	75a2                	ld	a1,40(sp)
    80009e78:	05a1                	addi	a1,a1,8
    80009e7a:	660a                	ld	a2,128(sp)
    80009e7c:	00008097          	auipc	ra,0x8
    80009e80:	e02080e7          	jalr	-510(ra) # 80011c7e <_ZN6kernel7process7process11task_struct5sleep17ha46e5892ef284241E>
    80009e84:	a009                	j	80009e86 <.LBB5_29+0x3a>
                uart = self.acquire();
    80009e86:	7546                	ld	a0,112(sp)
    80009e88:	00006097          	auipc	ra,0x6
    80009e8c:	286080e7          	jalr	646(ra) # 8001010e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h007ac3682185ef97E>
    80009e90:	f02a                	sd	a0,32(sp)
    80009e92:	a009                	j	80009e94 <.LBB5_29+0x48>
    80009e94:	7502                	ld	a0,32(sp)
    80009e96:	e12a                	sd	a0,128(sp)
        loop {
    80009e98:	bf25                	j	80009dd0 <.LBB5_26+0x1e>
                let write_index = uart.write_index.0 % UART_BUF_SIZE;
    80009e9a:	7562                	ld	a0,56(sp)
    80009e9c:	6108                	ld	a0,0(a0)
    80009e9e:	897d                	andi	a0,a0,31
    80009ea0:	e82a                	sd	a0,16(sp)
    80009ea2:	e1aa                	sd	a0,192(sp)
    80009ea4:	0108                	addi	a0,sp,128
                uart.buf[write_index] = c;
    80009ea6:	00008097          	auipc	ra,0x8
    80009eaa:	8f0080e7          	jalr	-1808(ra) # 80011796 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hce69ac52326dbcadE>
    80009eae:	ec2a                	sd	a0,24(sp)
    80009eb0:	a009                	j	80009eb2 <.LBB5_29+0x66>
    80009eb2:	65c2                	ld	a1,16(sp)
    80009eb4:	457d                	li	a0,31
    80009eb6:	04b56e63          	bltu	a0,a1,80009f12 <.LBB5_29+0xc6>
    80009eba:	a009                	j	80009ebc <.LBB5_29+0x70>
    80009ebc:	7566                	ld	a0,120(sp)
    80009ebe:	65e2                	ld	a1,24(sp)
    80009ec0:	6642                	ld	a2,16(sp)
    80009ec2:	95b2                	add	a1,a1,a2
    80009ec4:	00a58823          	sb	a0,16(a1)
    80009ec8:	0108                	addi	a0,sp,128
                uart.write_index += Wrapping(1);
    80009eca:	00008097          	auipc	ra,0x8
    80009ece:	8cc080e7          	jalr	-1844(ra) # 80011796 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hce69ac52326dbcadE>
    80009ed2:	e42a                	sd	a0,8(sp)
    80009ed4:	a009                	j	80009ed6 <.LBB5_29+0x8a>
    80009ed6:	6522                	ld	a0,8(sp)
    80009ed8:	4585                	li	a1,1
    80009eda:	f12e                	sd	a1,160(sp)
    80009edc:	ffffd097          	auipc	ra,0xffffd
    80009ee0:	54e080e7          	jalr	1358(ra) # 8000742a <_ZN90_$LT$core..num..wrapping..Wrapping$LT$usize$GT$$u20$as$u20$core..ops..arith..AddAssign$GT$10add_assign17hc731864567f3481aE>
    80009ee4:	a009                	j	80009ee6 <.LBB5_29+0x9a>
    80009ee6:	0108                	addi	a0,sp,128
                uart.transmit();
    80009ee8:	00008097          	auipc	ra,0x8
    80009eec:	8ae080e7          	jalr	-1874(ra) # 80011796 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hce69ac52326dbcadE>
    80009ef0:	e02a                	sd	a0,0(sp)
    80009ef2:	a009                	j	80009ef4 <.LBB5_29+0xa8>
    80009ef4:	6502                	ld	a0,0(sp)
    80009ef6:	00011097          	auipc	ra,0x11
    80009efa:	63c080e7          	jalr	1596(ra) # 8001b532 <_ZN6kernel6driver4uart4Uart8transmit17h1cf1c52f0e7bc086E>
    80009efe:	a009                	j	80009f00 <.LBB5_29+0xb4>
    80009f00:	0108                	addi	a0,sp,128
                break;
            }
        }
    }
    80009f02:	ffffd097          	auipc	ra,0xffffd
    80009f06:	11a080e7          	jalr	282(ra) # 8000701c <_ZN4core3ptr92drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..driver..uart..Uart$GT$$GT$17h4785ee23048b5bddE>
    80009f0a:	a009                	j	80009f0c <.LBB5_29+0xc0>
    80009f0c:	60ae                	ld	ra,200(sp)
    80009f0e:	6169                	addi	sp,sp,208
    80009f10:	8082                	ret
                uart.buf[write_index] = c;
    80009f12:	6542                	ld	a0,16(sp)

0000000080009f14 <.LBB5_30>:
    80009f14:	0001e617          	auipc	a2,0x1e
    80009f18:	ae460613          	addi	a2,a2,-1308 # 800279f8 <.L__unnamed_56>
    80009f1c:	02000593          	li	a1,32
    80009f20:	00018097          	auipc	ra,0x18
    80009f24:	382080e7          	jalr	898(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel6memory13PageAllocator10new_zeroed17h849e935775a724f6E:

0000000080009f2a <_ZN6kernel6memory13PageAllocator10new_zeroed17h849e935775a724f6E>:
use crate::misc::mem_copy;

use alloc::{boxed::Box, vec};

pub trait PageAllocator: Sized {
    unsafe fn new_zeroed() -> usize {
    80009f2a:	7179                	addi	sp,sp,-48
        let boxed_page = Box::<Self>::new_zeroed().assume_init();
    80009f2c:	f406                	sd	ra,40(sp)
    80009f2e:	00012097          	auipc	ra,0x12
    80009f32:	942080e7          	jalr	-1726(ra) # 8001b870 <_ZN5alloc5boxed12Box$LT$T$GT$10new_zeroed17h2dc288bcc805675fE>
    80009f36:	e82a                	sd	a0,16(sp)
    80009f38:	a009                	j	80009f3a <_ZN6kernel6memory13PageAllocator10new_zeroed17h849e935775a724f6E+0x10>
    80009f3a:	6542                	ld	a0,16(sp)
    80009f3c:	00012097          	auipc	ra,0x12
    80009f40:	518080e7          	jalr	1304(ra) # 8001c454 <_ZN5alloc5boxed60Box$LT$core..mem..maybe_uninit..MaybeUninit$LT$T$GT$$C$A$GT$11assume_init17h35c82a9a8f43ab52E>
    80009f44:	85aa                	mv	a1,a0
    80009f46:	e42e                	sd	a1,8(sp)
    80009f48:	ec2a                	sd	a0,24(sp)
    80009f4a:	a009                	j	80009f4c <_ZN6kernel6memory13PageAllocator10new_zeroed17h849e935775a724f6E+0x22>
        let ptr = Box::into_raw(boxed_page) as usize;
    80009f4c:	6522                	ld	a0,8(sp)
    80009f4e:	00012097          	auipc	ra,0x12
    80009f52:	472080e7          	jalr	1138(ra) # 8001c3c0 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$8into_raw17h4b72114c3b8b546bE>
    80009f56:	e02a                	sd	a0,0(sp)
    80009f58:	a009                	j	80009f5a <_ZN6kernel6memory13PageAllocator10new_zeroed17h849e935775a724f6E+0x30>
    80009f5a:	6502                	ld	a0,0(sp)
    80009f5c:	f02a                	sd	a0,32(sp)
        ptr
    }
    80009f5e:	70a2                	ld	ra,40(sp)
    80009f60:	6145                	addi	sp,sp,48
    80009f62:	8082                	ret

Disassembly of section .text._ZN6kernel6memory13PageAllocator10new_zeroed17hbc99bdbca8d1d931E:

0000000080009f64 <_ZN6kernel6memory13PageAllocator10new_zeroed17hbc99bdbca8d1d931E>:
    unsafe fn new_zeroed() -> usize {
    80009f64:	7179                	addi	sp,sp,-48
        let boxed_page = Box::<Self>::new_zeroed().assume_init();
    80009f66:	f406                	sd	ra,40(sp)
    80009f68:	00012097          	auipc	ra,0x12
    80009f6c:	920080e7          	jalr	-1760(ra) # 8001b888 <_ZN5alloc5boxed12Box$LT$T$GT$10new_zeroed17ha7605ec5087df013E>
    80009f70:	e82a                	sd	a0,16(sp)
    80009f72:	a009                	j	80009f74 <_ZN6kernel6memory13PageAllocator10new_zeroed17hbc99bdbca8d1d931E+0x10>
    80009f74:	6542                	ld	a0,16(sp)
    80009f76:	00012097          	auipc	ra,0x12
    80009f7a:	48a080e7          	jalr	1162(ra) # 8001c400 <_ZN5alloc5boxed60Box$LT$core..mem..maybe_uninit..MaybeUninit$LT$T$GT$$C$A$GT$11assume_init17h22cceebd78df14b7E>
    80009f7e:	85aa                	mv	a1,a0
    80009f80:	e42e                	sd	a1,8(sp)
    80009f82:	ec2a                	sd	a0,24(sp)
    80009f84:	a009                	j	80009f86 <_ZN6kernel6memory13PageAllocator10new_zeroed17hbc99bdbca8d1d931E+0x22>
        let ptr = Box::into_raw(boxed_page) as usize;
    80009f86:	6522                	ld	a0,8(sp)
    80009f88:	00012097          	auipc	ra,0x12
    80009f8c:	458080e7          	jalr	1112(ra) # 8001c3e0 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$8into_raw17hcc7ebe92239a3cf2E>
    80009f90:	e02a                	sd	a0,0(sp)
    80009f92:	a009                	j	80009f94 <_ZN6kernel6memory13PageAllocator10new_zeroed17hbc99bdbca8d1d931E+0x30>
    80009f94:	6502                	ld	a0,0(sp)
    80009f96:	f02a                	sd	a0,32(sp)
    }
    80009f98:	70a2                	ld	ra,40(sp)
    80009f9a:	6145                	addi	sp,sp,48
    80009f9c:	8082                	ret

Disassembly of section .text._ZN6kernel2fs4pipe4Pipe5alloc17h4de2fbd258847b3fE:

0000000080009f9e <_ZN6kernel2fs4pipe4Pipe5alloc17h4de2fbd258847b3fE>:
    /// write fd is still open
    write_open: bool
}

impl Pipe {
    pub fn alloc(rf: &mut &mut VFile, wf: &mut &mut VFile) -> Self {
    80009f9e:	8a010113          	addi	sp,sp,-1888
        let pipe_guard = unsafe{ *PipeGuard::alloc() }; 
        let mut pipe = Self {
    80009fa2:	74113c23          	sd	ra,1880(sp)
    80009fa6:	f032                	sd	a2,32(sp)
    80009fa8:	f42e                	sd	a1,40(sp)
    80009faa:	f82a                	sd	a0,48(sp)
    80009fac:	74b13423          	sd	a1,1864(sp)
    80009fb0:	74c13823          	sd	a2,1872(sp)
        let pipe_guard = unsafe{ *PipeGuard::alloc() }; 
    80009fb4:	00000097          	auipc	ra,0x0
    80009fb8:	79a080e7          	jalr	1946(ra) # 8000a74e <_ZN6kernel2fs4pipe9PipeGuard5alloc17h14564b7eb9e114dcE>
    80009fbc:	fc2a                	sd	a0,56(sp)
    80009fbe:	a009                	j	80009fc0 <_ZN6kernel2fs4pipe4Pipe5alloc17h4de2fbd258847b3fE+0x22>
    80009fc0:	75e2                	ld	a1,56(sp)
    80009fc2:	0088                	addi	a0,sp,64
    80009fc4:	e42a                	sd	a0,8(sp)
    80009fc6:	21800613          	li	a2,536
    80009fca:	e832                	sd	a2,16(sp)
    80009fcc:	0001b097          	auipc	ra,0x1b
    80009fd0:	118080e7          	jalr	280(ra) # 800250e4 <memcpy>
    80009fd4:	65a2                	ld	a1,8(sp)
    80009fd6:	6642                	ld	a2,16(sp)
    80009fd8:	49010513          	addi	a0,sp,1168
            guard: Spinlock::new(pipe_guard, "pipe")
    80009fdc:	ec2a                	sd	a0,24(sp)
    80009fde:	0001b097          	auipc	ra,0x1b
    80009fe2:	106080e7          	jalr	262(ra) # 800250e4 <memcpy>
    80009fe6:	65e2                	ld	a1,24(sp)

0000000080009fe8 <.LBB0_7>:
    80009fe8:	0001c617          	auipc	a2,0x1c
    80009fec:	72860613          	addi	a2,a2,1832 # 80026710 <.LJTI3_0+0x70>
    80009ff0:	0ca8                	addi	a0,sp,600
    80009ff2:	4691                	li	a3,4
    80009ff4:	00006097          	auipc	ra,0x6
    80009ff8:	08e080e7          	jalr	142(ra) # 80010082 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$3new17he179344dbdc121faE>
    80009ffc:	a009                	j	80009ffe <.LBB0_7+0x16>
        let mut pipe = Self {
    80009ffe:	7542                	ld	a0,48(sp)
    8000a000:	0cac                	addi	a1,sp,600
    8000a002:	23800613          	li	a2,568
    8000a006:	0001b097          	auipc	ra,0x1b
    8000a00a:	0de080e7          	jalr	222(ra) # 800250e4 <memcpy>
    8000a00e:	6a810513          	addi	a0,sp,1704
        };
        **rf = VFile::init();
    8000a012:	ffffb097          	auipc	ra,0xffffb
    8000a016:	6f8080e7          	jalr	1784(ra) # 8000570a <_ZN6kernel2fs4file5VFile4init17h000c38ec0bf103cfE>
    8000a01a:	a009                	j	8000a01c <.LBB0_7+0x34>
    8000a01c:	7522                	ld	a0,40(sp)
    8000a01e:	6108                	ld	a0,0(a0)
    8000a020:	ffffd097          	auipc	ra,0xffffd
    8000a024:	e4a080e7          	jalr	-438(ra) # 80006e6a <_ZN4core3ptr44drop_in_place$LT$kernel..fs..file..VFile$GT$17h7a3c9775c1583e88E>
    8000a028:	a801                	j	8000a038 <.LBB0_7+0x50>
        **wf = VFile::init();
    8000a02a:	7502                	ld	a0,32(sp)
    8000a02c:	6108                	ld	a0,0(a0)
    8000a02e:	ffffd097          	auipc	ra,0xffffd
    8000a032:	e3c080e7          	jalr	-452(ra) # 80006e6a <_ZN4core3ptr44drop_in_place$LT$kernel..fs..file..VFile$GT$17h7a3c9775c1583e88E>
    8000a036:	a83d                	j	8000a074 <.LBB0_7+0x8c>
        **rf = VFile::init();
    8000a038:	7522                	ld	a0,40(sp)
    8000a03a:	610c                	ld	a1,0(a0)
    8000a03c:	6d813503          	ld	a0,1752(sp)
    8000a040:	f988                	sd	a0,48(a1)
    8000a042:	6d013503          	ld	a0,1744(sp)
    8000a046:	f588                	sd	a0,40(a1)
    8000a048:	6c813503          	ld	a0,1736(sp)
    8000a04c:	f188                	sd	a0,32(a1)
    8000a04e:	6c013503          	ld	a0,1728(sp)
    8000a052:	ed88                	sd	a0,24(a1)
    8000a054:	6b813503          	ld	a0,1720(sp)
    8000a058:	e988                	sd	a0,16(a1)
    8000a05a:	6b013503          	ld	a0,1712(sp)
    8000a05e:	e588                	sd	a0,8(a1)
    8000a060:	6a813503          	ld	a0,1704(sp)
    8000a064:	e188                	sd	a0,0(a1)
    8000a066:	6e010513          	addi	a0,sp,1760
        **wf = VFile::init();
    8000a06a:	ffffb097          	auipc	ra,0xffffb
    8000a06e:	6a0080e7          	jalr	1696(ra) # 8000570a <_ZN6kernel2fs4file5VFile4init17h000c38ec0bf103cfE>
    8000a072:	bf65                	j	8000a02a <.LBB0_7+0x42>
    8000a074:	7542                	ld	a0,48(sp)
    8000a076:	7582                	ld	a1,32(sp)
    8000a078:	7722                	ld	a4,40(sp)
    8000a07a:	6194                	ld	a3,0(a1)
    8000a07c:	71013603          	ld	a2,1808(sp)
    8000a080:	fa90                	sd	a2,48(a3)
    8000a082:	70813603          	ld	a2,1800(sp)
    8000a086:	f690                	sd	a2,40(a3)
    8000a088:	70013603          	ld	a2,1792(sp)
    8000a08c:	f290                	sd	a2,32(a3)
    8000a08e:	6f813603          	ld	a2,1784(sp)
    8000a092:	ee90                	sd	a2,24(a3)
    8000a094:	6f013603          	ld	a2,1776(sp)
    8000a098:	ea90                	sd	a2,16(a3)
    8000a09a:	6e813603          	ld	a2,1768(sp)
    8000a09e:	e690                	sd	a2,8(a3)
    8000a0a0:	6e013603          	ld	a2,1760(sp)
    8000a0a4:	e290                	sd	a2,0(a3)
    8000a0a6:	4605                	li	a2,1
        rf.ftype = FileType::Pipe;
    8000a0a8:	70c11f23          	sh	a2,1822(sp)
    8000a0ac:	6314                	ld	a3,0(a4)
    8000a0ae:	02c69623          	sh	a2,44(a3)
        rf.readable = true;
    8000a0b2:	6314                	ld	a3,0(a4)
    8000a0b4:	02c68823          	sb	a2,48(a3)
        rf.writeable = false;
    8000a0b8:	631c                	ld	a5,0(a4)
    8000a0ba:	4681                	li	a3,0
    8000a0bc:	02d788a3          	sb	a3,49(a5)
        rf.pipe = Some(&mut pipe as *mut Pipe);
    8000a0c0:	72a13423          	sd	a0,1832(sp)
    8000a0c4:	72c13023          	sd	a2,1824(sp)
    8000a0c8:	6318                	ld	a4,0(a4)
    8000a0ca:	e310                	sd	a2,0(a4)
    8000a0cc:	e708                	sd	a0,8(a4)
        wf.ftype = FileType::Pipe;
    8000a0ce:	72c11b23          	sh	a2,1846(sp)
    8000a0d2:	6198                	ld	a4,0(a1)
    8000a0d4:	02c71623          	sh	a2,44(a4)
        wf.readable = false;
    8000a0d8:	6198                	ld	a4,0(a1)
    8000a0da:	02d70823          	sb	a3,48(a4)
        wf.writeable = true;
    8000a0de:	6194                	ld	a3,0(a1)
    8000a0e0:	02c688a3          	sb	a2,49(a3)
        wf.pipe = Some(&mut pipe as *mut Pipe);
    8000a0e4:	74a13023          	sd	a0,1856(sp)
    8000a0e8:	72c13c23          	sd	a2,1848(sp)
    8000a0ec:	618c                	ld	a1,0(a1)
    8000a0ee:	e190                	sd	a2,0(a1)
    8000a0f0:	e588                	sd	a0,8(a1)

        pipe
    }
    8000a0f2:	75813083          	ld	ra,1880(sp)
    8000a0f6:	76010113          	addi	sp,sp,1888
    8000a0fa:	8082                	ret

Disassembly of section .text._ZN6kernel2fs4pipe4Pipe4read17h0aa21294c9ce269eE:

000000008000a0fc <_ZN6kernel2fs4pipe4Pipe4read17h0aa21294c9ce269eE>:

    pub fn read(&self, addr: usize, len: usize) -> Result<usize, &'static str> {
    8000a0fc:	7141                	addi	sp,sp,-496
    8000a0fe:	f786                	sd	ra,488(sp)
    8000a100:	e9b6                	sd	a3,208(sp)
    8000a102:	edb2                	sd	a2,216(sp)
    8000a104:	f1ae                	sd	a1,224(sp)
    8000a106:	f5aa                	sd	a0,232(sp)
    8000a108:	e72e                	sd	a1,392(sp)
    8000a10a:	eb32                	sd	a2,400(sp)
    8000a10c:	ef36                	sd	a3,408(sp)

000000008000a10e <.LBB1_55>:
        let my_proc = unsafe {
            CPU_MANAGER.myproc().ok_or("Fail to get my process")?
    8000a10e:	00069517          	auipc	a0,0x69
    8000a112:	03250513          	addi	a0,a0,50 # 80073140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    8000a116:	00008097          	auipc	ra,0x8
    8000a11a:	ce8080e7          	jalr	-792(ra) # 80011dfe <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    8000a11e:	f9aa                	sd	a0,240(sp)
    8000a120:	a009                	j	8000a122 <.LBB1_55+0x14>
    8000a122:	75ce                	ld	a1,240(sp)

000000008000a124 <.LBB1_56>:
    8000a124:	0001e617          	auipc	a2,0x1e
    8000a128:	8ec60613          	addi	a2,a2,-1812 # 80027a10 <.L__unnamed_2>
    8000a12c:	0a08                	addi	a0,sp,272
    8000a12e:	46d9                	li	a3,22
    8000a130:	00004097          	auipc	ra,0x4
    8000a134:	7c2080e7          	jalr	1986(ra) # 8000e8f2 <_ZN4core6option15Option$LT$T$GT$5ok_or17hc525e8e997fb4842E>
    8000a138:	a009                	j	8000a13a <.LBB1_56+0x16>
    8000a13a:	19a8                	addi	a0,sp,248
    8000a13c:	0a0c                	addi	a1,sp,272
    8000a13e:	00003097          	auipc	ra,0x3
    8000a142:	106080e7          	jalr	262(ra) # 8000d244 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hea2de720f3c4ff28E>
    8000a146:	a009                	j	8000a148 <.LBB1_56+0x24>
    8000a148:	756e                	ld	a0,248(sp)
    8000a14a:	4581                	li	a1,0
    8000a14c:	00b50463          	beq	a0,a1,8000a154 <.LBB1_56+0x30>
    8000a150:	a009                	j	8000a152 <.LBB1_56+0x2e>
    8000a152:	a829                	j	8000a16c <.LBB1_56+0x48>
    8000a154:	750e                	ld	a0,224(sp)
    8000a156:	6592                	ld	a1,256(sp)
    8000a158:	e5ae                	sd	a1,200(sp)
    8000a15a:	fb2e                	sd	a1,432(sp)
    8000a15c:	ff2e                	sd	a1,440(sp)
        };

        let mut pipe_guard = self.guard.acquire();
    8000a15e:	00006097          	auipc	ra,0x6
    8000a162:	090080e7          	jalr	144(ra) # 800101ee <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h08fa8a4e90b26497E>
    8000a166:	f62a                	sd	a0,296(sp)
    8000a168:	a02d                	j	8000a192 <.LBB1_56+0x6e>
            CPU_MANAGER.myproc().ok_or("Fail to get my process")?
    8000a16a:	0000                	unimp
    8000a16c:	6512                	ld	a0,256(sp)
    8000a16e:	65b2                	ld	a1,264(sp)
    8000a170:	f32a                	sd	a0,416(sp)
    8000a172:	f72e                	sd	a1,424(sp)
    8000a174:	00002097          	auipc	ra,0x2
    8000a178:	8f8080e7          	jalr	-1800(ra) # 8000ba6c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h6f3e3843c20d184aE>
    8000a17c:	fd2a                	sd	a0,184(sp)
    8000a17e:	e1ae                	sd	a1,192(sp)
    8000a180:	a009                	j	8000a182 <.LBB1_56+0x5e>
    8000a182:	660e                	ld	a2,192(sp)
    8000a184:	75ea                	ld	a1,184(sp)
    8000a186:	752e                	ld	a0,232(sp)
    8000a188:	00003097          	auipc	ra,0x3
    8000a18c:	f24080e7          	jalr	-220(ra) # 8000d0ac <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h4dd43adfe00292f6E>
    8000a190:	ac99                	j	8000a3e6 <.LBB1_58+0x2a>
    8000a192:	1228                	addi	a0,sp,296
        while pipe_guard.read_number == pipe_guard.write_number && pipe_guard.write_open {
    8000a194:	00007097          	auipc	ra,0x7
    8000a198:	4e4080e7          	jalr	1252(ra) # 80011678 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hd48c400b52283491E>
    8000a19c:	f92a                	sd	a0,176(sp)
    8000a19e:	a02d                	j	8000a1c8 <.LBB1_56+0xa4>
    8000a1a0:	4505                	li	a0,1
    8000a1a2:	12a10ba3          	sb	a0,311(sp)
    8000a1a6:	a821                	j	8000a1be <.LBB1_56+0x9a>
    8000a1a8:	4501                	li	a0,0
    8000a1aa:	12a10ba3          	sb	a0,311(sp)
    8000a1ae:	a801                	j	8000a1be <.LBB1_56+0x9a>
    8000a1b0:	1228                	addi	a0,sp,296
    8000a1b2:	00007097          	auipc	ra,0x7
    8000a1b6:	4c6080e7          	jalr	1222(ra) # 80011678 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hd48c400b52283491E>
    8000a1ba:	f52a                	sd	a0,168(sp)
    8000a1bc:	a805                	j	8000a1ec <.LBB1_56+0xc8>
    8000a1be:	13714503          	lbu	a0,311(sp)
    8000a1c2:	8905                	andi	a0,a0,1
    8000a1c4:	e531                	bnez	a0,8000a210 <.LBB1_56+0xec>
    8000a1c6:	a80d                	j	8000a1f8 <.LBB1_56+0xd4>
    8000a1c8:	754a                	ld	a0,176(sp)
    8000a1ca:	20053503          	ld	a0,512(a0)
    8000a1ce:	ed2a                	sd	a0,152(sp)
    8000a1d0:	1228                	addi	a0,sp,296
    8000a1d2:	00007097          	auipc	ra,0x7
    8000a1d6:	4a6080e7          	jalr	1190(ra) # 80011678 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hd48c400b52283491E>
    8000a1da:	f12a                	sd	a0,160(sp)
    8000a1dc:	a009                	j	8000a1de <.LBB1_56+0xba>
    8000a1de:	656a                	ld	a0,152(sp)
    8000a1e0:	758a                	ld	a1,160(sp)
    8000a1e2:	2085b583          	ld	a1,520(a1)
    8000a1e6:	fcb505e3          	beq	a0,a1,8000a1b0 <.LBB1_56+0x8c>
    8000a1ea:	bf7d                	j	8000a1a8 <.LBB1_56+0x84>
    8000a1ec:	752a                	ld	a0,168(sp)
    8000a1ee:	21154503          	lbu	a0,529(a0)
    8000a1f2:	8905                	andi	a0,a0,1
    8000a1f4:	f555                	bnez	a0,8000a1a0 <.LBB1_56+0x7c>
    8000a1f6:	bf4d                	j	8000a1a8 <.LBB1_56+0x84>
    8000a1f8:	65ce                	ld	a1,208(sp)
    8000a1fa:	4501                	li	a0,0
                pipe_guard
            );
            pipe_guard = self.guard.acquire();
        }

        let mut i = 0;
    8000a1fc:	fe2a                	sd	a0,312(sp)
        for index in 0..len {
    8000a1fe:	e2aa                	sd	a0,320(sp)
    8000a200:	e6ae                	sd	a1,328(sp)
    8000a202:	00015097          	auipc	ra,0x15
    8000a206:	740080e7          	jalr	1856(ra) # 8001f942 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he0a8d93712e5493bE>
    8000a20a:	e52a                	sd	a0,136(sp)
    8000a20c:	e92e                	sd	a1,144(sp)
    8000a20e:	a895                	j	8000a282 <.LBB1_57+0x3e>
            if my_proc.killed() {
    8000a210:	652e                	ld	a0,200(sp)
    8000a212:	0000c097          	auipc	ra,0xc
    8000a216:	de2080e7          	jalr	-542(ra) # 80015ff4 <_ZN6kernel7process7process11task_struct6killed17h4fc8d78e83fc4243E>
    8000a21a:	e12a                	sd	a0,128(sp)
    8000a21c:	a009                	j	8000a21e <.LBB1_56+0xfa>
    8000a21e:	650a                	ld	a0,128(sp)
    8000a220:	4581                	li	a1,0
    8000a222:	00b50963          	beq	a0,a1,8000a234 <.LBB1_56+0x110>
    8000a226:	a009                	j	8000a228 <.LBB1_56+0x104>
                drop(pipe_guard);
    8000a228:	7532                	ld	a0,296(sp)
    8000a22a:	00013097          	auipc	ra,0x13
    8000a22e:	ece080e7          	jalr	-306(ra) # 8001d0f8 <_ZN4core3mem4drop17ha170cc24affc2e7cE>
    8000a232:	a801                	j	8000a242 <.LBB1_56+0x11e>
    8000a234:	1228                	addi	a0,sp,296
                &pipe_guard.read_number as *const _ as usize, 
    8000a236:	00007097          	auipc	ra,0x7
    8000a23a:	442080e7          	jalr	1090(ra) # 80011678 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hd48c400b52283491E>
    8000a23e:	fcaa                	sd	a0,120(sp)
    8000a240:	a829                	j	8000a25a <.LBB1_57+0x16>
                return Err("pipe read: current process has been killed")
    8000a242:	75ae                	ld	a1,232(sp)

000000008000a244 <.LBB1_57>:
    8000a244:	0001d517          	auipc	a0,0x1d
    8000a248:	7e250513          	addi	a0,a0,2018 # 80027a26 <.L__unnamed_3>
    8000a24c:	e588                	sd	a0,8(a1)
    8000a24e:	02a00513          	li	a0,42
    8000a252:	e988                	sd	a0,16(a1)
    8000a254:	4505                	li	a0,1
    8000a256:	e188                	sd	a0,0(a1)
    8000a258:	a279                	j	8000a3e6 <.LBB1_58+0x2a>
                &pipe_guard.read_number as *const _ as usize, 
    8000a25a:	652e                	ld	a0,200(sp)
    8000a25c:	75e6                	ld	a1,120(sp)
    8000a25e:	20058593          	addi	a1,a1,512
                pipe_guard
    8000a262:	7632                	ld	a2,296(sp)
            my_proc.sleep(
    8000a264:	00008097          	auipc	ra,0x8
    8000a268:	902080e7          	jalr	-1790(ra) # 80011b66 <_ZN6kernel7process7process11task_struct5sleep17h6b6884b4a9cdc973E>
    8000a26c:	a009                	j	8000a26e <.LBB1_57+0x2a>
            pipe_guard = self.guard.acquire();
    8000a26e:	750e                	ld	a0,224(sp)
    8000a270:	00006097          	auipc	ra,0x6
    8000a274:	f7e080e7          	jalr	-130(ra) # 800101ee <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h08fa8a4e90b26497E>
    8000a278:	f8aa                	sd	a0,112(sp)
    8000a27a:	a009                	j	8000a27c <.LBB1_57+0x38>
    8000a27c:	7546                	ld	a0,112(sp)
    8000a27e:	f62a                	sd	a0,296(sp)
        while pipe_guard.read_number == pipe_guard.write_number && pipe_guard.write_open {
    8000a280:	bf09                	j	8000a192 <.LBB1_56+0x6e>
        for index in 0..len {
    8000a282:	654a                	ld	a0,144(sp)
    8000a284:	65aa                	ld	a1,136(sp)
    8000a286:	eaae                	sd	a1,336(sp)
    8000a288:	eeaa                	sd	a0,344(sp)
    8000a28a:	a009                	j	8000a28c <.LBB1_57+0x48>
    8000a28c:	0a88                	addi	a0,sp,336
    8000a28e:	00015097          	auipc	ra,0x15
    8000a292:	646080e7          	jalr	1606(ra) # 8001f8d4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE>
    8000a296:	f2aa                	sd	a0,352(sp)
    8000a298:	f6ae                	sd	a1,360(sp)
    8000a29a:	a009                	j	8000a29c <.LBB1_57+0x58>
    8000a29c:	7516                	ld	a0,352(sp)
    8000a29e:	4581                	li	a1,0
    8000a2a0:	00b50463          	beq	a0,a1,8000a2a8 <.LBB1_57+0x64>
    8000a2a4:	a009                	j	8000a2a6 <.LBB1_57+0x62>
    8000a2a6:	a019                	j	8000a2ac <.LBB1_57+0x68>
    8000a2a8:	a201                	j	8000a3a8 <.LBB1_57+0x164>
    8000a2aa:	0000                	unimp
    8000a2ac:	7536                	ld	a0,360(sp)
    8000a2ae:	f0aa                	sd	a0,96(sp)
    8000a2b0:	e3aa                	sd	a0,448(sp)
    8000a2b2:	e7aa                	sd	a0,456(sp)
    8000a2b4:	ebaa                	sd	a0,464(sp)
    8000a2b6:	1228                	addi	a0,sp,296
            if pipe_guard.read_number == pipe_guard.write_number { break; }
    8000a2b8:	00007097          	auipc	ra,0x7
    8000a2bc:	3c0080e7          	jalr	960(ra) # 80011678 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hd48c400b52283491E>
    8000a2c0:	f4aa                	sd	a0,104(sp)
    8000a2c2:	a009                	j	8000a2c4 <.LBB1_57+0x80>
    8000a2c4:	7526                	ld	a0,104(sp)
    8000a2c6:	20053503          	ld	a0,512(a0)
    8000a2ca:	e8aa                	sd	a0,80(sp)
    8000a2cc:	1228                	addi	a0,sp,296
    8000a2ce:	00007097          	auipc	ra,0x7
    8000a2d2:	3aa080e7          	jalr	938(ra) # 80011678 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hd48c400b52283491E>
    8000a2d6:	ecaa                	sd	a0,88(sp)
    8000a2d8:	a009                	j	8000a2da <.LBB1_57+0x96>
    8000a2da:	6546                	ld	a0,80(sp)
    8000a2dc:	65e6                	ld	a1,88(sp)
    8000a2de:	2085b583          	ld	a1,520(a1)
    8000a2e2:	00b51463          	bne	a0,a1,8000a2ea <.LBB1_57+0xa6>
    8000a2e6:	a009                	j	8000a2e8 <.LBB1_57+0xa4>
    8000a2e8:	a0c1                	j	8000a3a8 <.LBB1_57+0x164>
    8000a2ea:	1228                	addi	a0,sp,296
            let read_cursor = pipe_guard.read_number % PIPE_SIZE;
    8000a2ec:	00007097          	auipc	ra,0x7
    8000a2f0:	38c080e7          	jalr	908(ra) # 80011678 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hd48c400b52283491E>
    8000a2f4:	e4aa                	sd	a0,72(sp)
    8000a2f6:	a009                	j	8000a2f8 <.LBB1_57+0xb4>
    8000a2f8:	6526                	ld	a0,72(sp)
    8000a2fa:	20053503          	ld	a0,512(a0)
    8000a2fe:	1ff57513          	andi	a0,a0,511
    8000a302:	fc2a                	sd	a0,56(sp)
    8000a304:	efaa                	sd	a0,472(sp)
    8000a306:	1228                	addi	a0,sp,296
            let ch = pipe_guard.data[read_cursor % PIPE_SIZE];
    8000a308:	00007097          	auipc	ra,0x7
    8000a30c:	370080e7          	jalr	880(ra) # 80011678 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hd48c400b52283491E>
    8000a310:	e0aa                	sd	a0,64(sp)
    8000a312:	a009                	j	8000a314 <.LBB1_57+0xd0>
    8000a314:	75e2                	ld	a1,56(sp)
    8000a316:	852e                	mv	a0,a1
    8000a318:	f82a                	sd	a0,48(sp)
    8000a31a:	1ff00513          	li	a0,511
    8000a31e:	0cb56763          	bltu	a0,a1,8000a3ec <.LBB1_58+0x30>
    8000a322:	a009                	j	8000a324 <.LBB1_57+0xe0>
    8000a324:	6506                	ld	a0,64(sp)
    8000a326:	75c2                	ld	a1,48(sp)
    8000a328:	952e                	add	a0,a0,a1
    8000a32a:	00050503          	lb	a0,0(a0)
    8000a32e:	16a10ba3          	sb	a0,375(sp)
    8000a332:	1228                	addi	a0,sp,296
            pipe_guard.read_number += 1;
    8000a334:	00007097          	auipc	ra,0x7
    8000a338:	442080e7          	jalr	1090(ra) # 80011776 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h890cc5a86d09cfeeE>
    8000a33c:	f42a                	sd	a0,40(sp)
    8000a33e:	a009                	j	8000a340 <.LBB1_57+0xfc>
    8000a340:	7522                	ld	a0,40(sp)
    8000a342:	20053583          	ld	a1,512(a0)
    8000a346:	00158513          	addi	a0,a1,1
    8000a34a:	f02a                	sd	a0,32(sp)
    8000a34c:	0ab56c63          	bltu	a0,a1,8000a404 <.LBB1_60>
    8000a350:	a009                	j	8000a352 <.LBB1_57+0x10e>
    8000a352:	65ee                	ld	a1,216(sp)
    8000a354:	7506                	ld	a0,96(sp)
    8000a356:	662e                	ld	a2,200(sp)
    8000a358:	7682                	ld	a3,32(sp)
    8000a35a:	7722                	ld	a4,40(sp)
    8000a35c:	20d73023          	sd	a3,512(a4)
            // let page_table = task.pagetable.as_mut().expect("Fail to get pagetable");
            let pgt = unsafe { &mut *my_proc.pagetable };
    8000a360:	6e10                	ld	a2,24(a2)
    8000a362:	e832                	sd	a2,16(sp)
    8000a364:	f3b2                	sd	a2,480(sp)
            if pgt.copy_out(addr + index, &ch as *const u8, 1).is_err() {
    8000a366:	952e                	add	a0,a0,a1
    8000a368:	ec2a                	sd	a0,24(sp)
    8000a36a:	0ab56b63          	bltu	a0,a1,8000a420 <.LBB1_62>
    8000a36e:	a009                	j	8000a370 <.LBB1_57+0x12c>
    8000a370:	65e2                	ld	a1,24(sp)
    8000a372:	6542                	ld	a0,16(sp)
    8000a374:	17710613          	addi	a2,sp,375
    8000a378:	4685                	li	a3,1
    8000a37a:	0000e097          	auipc	ra,0xe
    8000a37e:	84e080e7          	jalr	-1970(ra) # 80017bc8 <_ZN6kernel6memory7mapping10page_table9PageTable8copy_out17h55d0f27ee3680817E>
    8000a382:	feaa                	sd	a0,376(sp)
    8000a384:	e32e                	sd	a1,384(sp)
    8000a386:	a009                	j	8000a388 <.LBB1_57+0x144>
    8000a388:	1aa8                	addi	a0,sp,376
    8000a38a:	00003097          	auipc	ra,0x3
    8000a38e:	9d4080e7          	jalr	-1580(ra) # 8000cd5e <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h304118d236359d80E>
    8000a392:	e42a                	sd	a0,8(sp)
    8000a394:	a009                	j	8000a396 <.LBB1_57+0x152>
    8000a396:	6522                	ld	a0,8(sp)
    8000a398:	4581                	li	a1,0
    8000a39a:	00b50463          	beq	a0,a1,8000a3a2 <.LBB1_57+0x15e>
    8000a39e:	a009                	j	8000a3a0 <.LBB1_57+0x15c>
    8000a3a0:	a021                	j	8000a3a8 <.LBB1_57+0x164>
                break;
            }
            i = index;
    8000a3a2:	7506                	ld	a0,96(sp)
    8000a3a4:	fe2a                	sd	a0,312(sp)
        for index in 0..len {
    8000a3a6:	b5dd                	j	8000a28c <.LBB1_57+0x48>
    8000a3a8:	1228                	addi	a0,sp,296
        }

        unsafe{ PROC_MANAGER.wake_up(&pipe_guard.write_number as *const _ as usize) };
    8000a3aa:	00007097          	auipc	ra,0x7
    8000a3ae:	2ce080e7          	jalr	718(ra) # 80011678 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hd48c400b52283491E>
    8000a3b2:	e02a                	sd	a0,0(sp)
    8000a3b4:	a009                	j	8000a3b6 <.LBB1_57+0x172>
    8000a3b6:	6502                	ld	a0,0(sp)
    8000a3b8:	20850593          	addi	a1,a0,520

000000008000a3bc <.LBB1_58>:
    8000a3bc:	0004d517          	auipc	a0,0x4d
    8000a3c0:	1e450513          	addi	a0,a0,484 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    8000a3c4:	00003097          	auipc	ra,0x3
    8000a3c8:	53c080e7          	jalr	1340(ra) # 8000d900 <_ZN6kernel7process7manager11ProcManager7wake_up17ha46b4d15ac07187bE>
    8000a3cc:	a009                	j	8000a3ce <.LBB1_58+0x12>
        drop(pipe_guard);
    8000a3ce:	7532                	ld	a0,296(sp)
    8000a3d0:	00013097          	auipc	ra,0x13
    8000a3d4:	d28080e7          	jalr	-728(ra) # 8001d0f8 <_ZN4core3mem4drop17ha170cc24affc2e7cE>
    8000a3d8:	a009                	j	8000a3da <.LBB1_58+0x1e>
        Ok(i)
    8000a3da:	75ae                	ld	a1,232(sp)
    8000a3dc:	7572                	ld	a0,312(sp)
    8000a3de:	e588                	sd	a0,8(a1)
    8000a3e0:	4501                	li	a0,0
    8000a3e2:	e188                	sd	a0,0(a1)
    }
    8000a3e4:	a009                	j	8000a3e6 <.LBB1_58+0x2a>
    8000a3e6:	70be                	ld	ra,488(sp)
    8000a3e8:	617d                	addi	sp,sp,496
    8000a3ea:	8082                	ret
            let ch = pipe_guard.data[read_cursor % PIPE_SIZE];
    8000a3ec:	7542                	ld	a0,48(sp)

000000008000a3ee <.LBB1_59>:
    8000a3ee:	0001d617          	auipc	a2,0x1d
    8000a3f2:	67260613          	addi	a2,a2,1650 # 80027a60 <.L__unnamed_4>
    8000a3f6:	20000593          	li	a1,512
    8000a3fa:	00018097          	auipc	ra,0x18
    8000a3fe:	ea8080e7          	jalr	-344(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

000000008000a404 <.LBB1_60>:
            pipe_guard.read_number += 1;
    8000a404:	0001d517          	auipc	a0,0x1d
    8000a408:	68c50513          	addi	a0,a0,1676 # 80027a90 <str.0>

000000008000a40c <.LBB1_61>:
    8000a40c:	0001d617          	auipc	a2,0x1d
    8000a410:	66c60613          	addi	a2,a2,1644 # 80027a78 <.L__unnamed_5>
    8000a414:	45f1                	li	a1,28
    8000a416:	00018097          	auipc	ra,0x18
    8000a41a:	e60080e7          	jalr	-416(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008000a420 <.LBB1_62>:
            if pgt.copy_out(addr + index, &ch as *const u8, 1).is_err() {
    8000a420:	0001d517          	auipc	a0,0x1d
    8000a424:	67050513          	addi	a0,a0,1648 # 80027a90 <str.0>

000000008000a428 <.LBB1_63>:
    8000a428:	0001d617          	auipc	a2,0x1d
    8000a42c:	68860613          	addi	a2,a2,1672 # 80027ab0 <.L__unnamed_6>
    8000a430:	45f1                	li	a1,28
    8000a432:	00018097          	auipc	ra,0x18
    8000a436:	e44080e7          	jalr	-444(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel2fs4pipe4Pipe5write17h30d2c3404e2f657cE:

000000008000a43c <_ZN6kernel2fs4pipe4Pipe5write17h30d2c3404e2f657cE>:

    pub fn write(&self, addr: usize, len: usize) -> Result<usize, &'static str> {
    8000a43c:	7109                	addi	sp,sp,-384
    8000a43e:	fe86                	sd	ra,376(sp)
    8000a440:	f936                	sd	a3,176(sp)
    8000a442:	fd32                	sd	a2,184(sp)
    8000a444:	e1ae                	sd	a1,192(sp)
    8000a446:	e5aa                	sd	a0,200(sp)
    8000a448:	fa2e                	sd	a1,304(sp)
    8000a44a:	fe32                	sd	a2,312(sp)
    8000a44c:	e2b6                	sd	a3,320(sp)

000000008000a44e <.LBB2_50>:
        let my_proc = unsafe {
            CPU_MANAGER.myproc().ok_or("Fail to get current process")?
    8000a44e:	00069517          	auipc	a0,0x69
    8000a452:	cf250513          	addi	a0,a0,-782 # 80073140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    8000a456:	00008097          	auipc	ra,0x8
    8000a45a:	9a8080e7          	jalr	-1624(ra) # 80011dfe <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    8000a45e:	e9aa                	sd	a0,208(sp)
    8000a460:	a009                	j	8000a462 <.LBB2_50+0x14>
    8000a462:	65ce                	ld	a1,208(sp)

000000008000a464 <.LBB2_51>:
    8000a464:	0001d617          	auipc	a2,0x1d
    8000a468:	66460613          	addi	a2,a2,1636 # 80027ac8 <.L__unnamed_7>
    8000a46c:	1988                	addi	a0,sp,240
    8000a46e:	46ed                	li	a3,27
    8000a470:	00004097          	auipc	ra,0x4
    8000a474:	482080e7          	jalr	1154(ra) # 8000e8f2 <_ZN4core6option15Option$LT$T$GT$5ok_or17hc525e8e997fb4842E>
    8000a478:	a009                	j	8000a47a <.LBB2_51+0x16>
    8000a47a:	09a8                	addi	a0,sp,216
    8000a47c:	198c                	addi	a1,sp,240
    8000a47e:	00003097          	auipc	ra,0x3
    8000a482:	dc6080e7          	jalr	-570(ra) # 8000d244 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hea2de720f3c4ff28E>
    8000a486:	a009                	j	8000a488 <.LBB2_51+0x24>
    8000a488:	656e                	ld	a0,216(sp)
    8000a48a:	4581                	li	a1,0
    8000a48c:	00b50463          	beq	a0,a1,8000a494 <.LBB2_51+0x30>
    8000a490:	a009                	j	8000a492 <.LBB2_51+0x2e>
    8000a492:	a829                	j	8000a4ac <.LBB2_51+0x48>
    8000a494:	650e                	ld	a0,192(sp)
    8000a496:	758e                	ld	a1,224(sp)
    8000a498:	f52e                	sd	a1,168(sp)
    8000a49a:	eeae                	sd	a1,344(sp)
    8000a49c:	f2ae                	sd	a1,352(sp)
        };

        let mut pipe_guard = self.guard.acquire();
    8000a49e:	00006097          	auipc	ra,0x6
    8000a4a2:	d50080e7          	jalr	-688(ra) # 800101ee <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h08fa8a4e90b26497E>
    8000a4a6:	e62a                	sd	a0,264(sp)
    8000a4a8:	a02d                	j	8000a4d2 <.LBB2_51+0x6e>
            CPU_MANAGER.myproc().ok_or("Fail to get current process")?
    8000a4aa:	0000                	unimp
    8000a4ac:	750e                	ld	a0,224(sp)
    8000a4ae:	75ae                	ld	a1,232(sp)
    8000a4b0:	e6aa                	sd	a0,328(sp)
    8000a4b2:	eaae                	sd	a1,336(sp)
    8000a4b4:	00001097          	auipc	ra,0x1
    8000a4b8:	5b8080e7          	jalr	1464(ra) # 8000ba6c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h6f3e3843c20d184aE>
    8000a4bc:	ed2a                	sd	a0,152(sp)
    8000a4be:	f12e                	sd	a1,160(sp)
    8000a4c0:	a009                	j	8000a4c2 <.LBB2_51+0x5e>
    8000a4c2:	760a                	ld	a2,160(sp)
    8000a4c4:	65ea                	ld	a1,152(sp)
    8000a4c6:	652e                	ld	a0,200(sp)
    8000a4c8:	00003097          	auipc	ra,0x3
    8000a4cc:	be4080e7          	jalr	-1052(ra) # 8000d0ac <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h4dd43adfe00292f6E>
    8000a4d0:	a431                	j	8000a6dc <.LBB2_54+0x2a>
    8000a4d2:	4501                	li	a0,0
        let mut i = 0;
    8000a4d4:	ea2a                	sd	a0,272(sp)
        while i < len {
    8000a4d6:	a009                	j	8000a4d8 <.LBB2_51+0x74>
    8000a4d8:	75ca                	ld	a1,176(sp)
    8000a4da:	6552                	ld	a0,272(sp)
    8000a4dc:	00b56463          	bltu	a0,a1,8000a4e4 <.LBB2_51+0x80>
    8000a4e0:	a009                	j	8000a4e2 <.LBB2_51+0x7e>
    8000a4e2:	aa75                	j	8000a69e <.LBB2_53+0xda>
    8000a4e4:	0228                	addi	a0,sp,264
            if !pipe_guard.read_open || my_proc.killed() {
    8000a4e6:	00007097          	auipc	ra,0x7
    8000a4ea:	192080e7          	jalr	402(ra) # 80011678 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hd48c400b52283491E>
    8000a4ee:	e92a                	sd	a0,144(sp)
    8000a4f0:	a02d                	j	8000a51a <.LBB2_51+0xb6>
    8000a4f2:	4505                	li	a0,1
    8000a4f4:	10a10f23          	sb	a0,286(sp)
    8000a4f8:	a821                	j	8000a510 <.LBB2_51+0xac>
    8000a4fa:	4501                	li	a0,0
    8000a4fc:	10a10f23          	sb	a0,286(sp)
    8000a500:	a801                	j	8000a510 <.LBB2_51+0xac>
    8000a502:	752a                	ld	a0,168(sp)
    8000a504:	0000c097          	auipc	ra,0xc
    8000a508:	af0080e7          	jalr	-1296(ra) # 80015ff4 <_ZN6kernel7process7process11task_struct6killed17h4fc8d78e83fc4243E>
    8000a50c:	e52a                	sd	a0,136(sp)
    8000a50e:	a831                	j	8000a52a <.LBB2_51+0xc6>
    8000a510:	11e14503          	lbu	a0,286(sp)
    8000a514:	8905                	andi	a0,a0,1
    8000a516:	ed09                	bnez	a0,8000a530 <.LBB2_51+0xcc>
    8000a518:	a015                	j	8000a53c <.LBB2_51+0xd8>
    8000a51a:	654a                	ld	a0,144(sp)
    8000a51c:	21054503          	lbu	a0,528(a0)
    8000a520:	8905                	andi	a0,a0,1
    8000a522:	4581                	li	a1,0
    8000a524:	fcb507e3          	beq	a0,a1,8000a4f2 <.LBB2_51+0x8e>
    8000a528:	bfe9                	j	8000a502 <.LBB2_51+0x9e>
    8000a52a:	652a                	ld	a0,136(sp)
    8000a52c:	f179                	bnez	a0,8000a4f2 <.LBB2_51+0x8e>
    8000a52e:	b7f1                	j	8000a4fa <.LBB2_51+0x96>
                drop(pipe_guard);
    8000a530:	6532                	ld	a0,264(sp)
    8000a532:	00013097          	auipc	ra,0x13
    8000a536:	bc6080e7          	jalr	-1082(ra) # 8001d0f8 <_ZN4core3mem4drop17ha170cc24affc2e7cE>
    8000a53a:	a801                	j	8000a54a <.LBB2_51+0xe6>
    8000a53c:	0228                	addi	a0,sp,264
                return Err("pipe write: pipe read close or current process has been killed")
            }

            if pipe_guard.write_number == pipe_guard.read_number + PIPE_SIZE {
    8000a53e:	00007097          	auipc	ra,0x7
    8000a542:	13a080e7          	jalr	314(ra) # 80011678 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hd48c400b52283491E>
    8000a546:	e12a                	sd	a0,128(sp)
    8000a548:	a829                	j	8000a562 <.LBB2_52+0x16>
                return Err("pipe write: pipe read close or current process has been killed")
    8000a54a:	65ae                	ld	a1,200(sp)

000000008000a54c <.LBB2_52>:
    8000a54c:	0001d517          	auipc	a0,0x1d
    8000a550:	59750513          	addi	a0,a0,1431 # 80027ae3 <.L__unnamed_8>
    8000a554:	e588                	sd	a0,8(a1)
    8000a556:	03e00513          	li	a0,62
    8000a55a:	e988                	sd	a0,16(a1)
    8000a55c:	4505                	li	a0,1
    8000a55e:	e188                	sd	a0,0(a1)
    8000a560:	aab5                	j	8000a6dc <.LBB2_54+0x2a>
            if pipe_guard.write_number == pipe_guard.read_number + PIPE_SIZE {
    8000a562:	650a                	ld	a0,128(sp)
    8000a564:	20853503          	ld	a0,520(a0)
    8000a568:	f8aa                	sd	a0,112(sp)
    8000a56a:	0228                	addi	a0,sp,264
    8000a56c:	00007097          	auipc	ra,0x7
    8000a570:	10c080e7          	jalr	268(ra) # 80011678 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hd48c400b52283491E>
    8000a574:	fcaa                	sd	a0,120(sp)
    8000a576:	a009                	j	8000a578 <.LBB2_52+0x2c>
    8000a578:	7566                	ld	a0,120(sp)
    8000a57a:	20053583          	ld	a1,512(a0)
    8000a57e:	20058513          	addi	a0,a1,512
    8000a582:	f4aa                	sd	a0,104(sp)
    8000a584:	14b56f63          	bltu	a0,a1,8000a6e2 <.LBB2_55>
    8000a588:	a009                	j	8000a58a <.LBB2_52+0x3e>
    8000a58a:	7546                	ld	a0,112(sp)
    8000a58c:	75a6                	ld	a1,104(sp)
    8000a58e:	00b51a63          	bne	a0,a1,8000a5a2 <.LBB2_52+0x56>
    8000a592:	a009                	j	8000a594 <.LBB2_52+0x48>
    8000a594:	0228                	addi	a0,sp,264
                unsafe {
                    PROC_MANAGER.wake_up(&pipe_guard.read_number as *const _ as usize);
    8000a596:	00007097          	auipc	ra,0x7
    8000a59a:	0e2080e7          	jalr	226(ra) # 80011678 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hd48c400b52283491E>
    8000a59e:	f0aa                	sd	a0,96(sp)
    8000a5a0:	a839                	j	8000a5be <.LBB2_52+0x72>
    8000a5a2:	75ea                	ld	a1,184(sp)
    8000a5a4:	752a                	ld	a0,168(sp)
    8000a5a6:	4601                	li	a2,0
                }
                my_proc.sleep(&pipe_guard.write_number as *const _ as usize, pipe_guard);
                pipe_guard = self.guard.acquire();
            } else {
                let mut char: u8 = 0;
    8000a5a8:	10c10fa3          	sb	a2,287(sp)
                let pgt = unsafe { &mut *my_proc.pagetable };
    8000a5ac:	6d08                	ld	a0,24(a0)
    8000a5ae:	e8aa                	sd	a0,80(sp)
    8000a5b0:	f6aa                	sd	a0,360(sp)
                if pgt.copy_in(&mut char as *mut u8, addr + i, 1).is_err() {
    8000a5b2:	6552                	ld	a0,272(sp)
    8000a5b4:	952e                	add	a0,a0,a1
    8000a5b6:	ecaa                	sd	a0,88(sp)
    8000a5b8:	14b56363          	bltu	a0,a1,8000a6fe <.LBB2_57>
    8000a5bc:	a881                	j	8000a60c <.LBB2_53+0x48>
                    PROC_MANAGER.wake_up(&pipe_guard.read_number as *const _ as usize);
    8000a5be:	7506                	ld	a0,96(sp)
    8000a5c0:	20050593          	addi	a1,a0,512

000000008000a5c4 <.LBB2_53>:
    8000a5c4:	0004d517          	auipc	a0,0x4d
    8000a5c8:	fdc50513          	addi	a0,a0,-36 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    8000a5cc:	00003097          	auipc	ra,0x3
    8000a5d0:	334080e7          	jalr	820(ra) # 8000d900 <_ZN6kernel7process7manager11ProcManager7wake_up17ha46b4d15ac07187bE>
    8000a5d4:	a009                	j	8000a5d6 <.LBB2_53+0x12>
    8000a5d6:	0228                	addi	a0,sp,264
                my_proc.sleep(&pipe_guard.write_number as *const _ as usize, pipe_guard);
    8000a5d8:	00007097          	auipc	ra,0x7
    8000a5dc:	0a0080e7          	jalr	160(ra) # 80011678 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hd48c400b52283491E>
    8000a5e0:	e4aa                	sd	a0,72(sp)
    8000a5e2:	a009                	j	8000a5e4 <.LBB2_53+0x20>
    8000a5e4:	752a                	ld	a0,168(sp)
    8000a5e6:	65a6                	ld	a1,72(sp)
    8000a5e8:	20858593          	addi	a1,a1,520
    8000a5ec:	6632                	ld	a2,264(sp)
    8000a5ee:	00007097          	auipc	ra,0x7
    8000a5f2:	578080e7          	jalr	1400(ra) # 80011b66 <_ZN6kernel7process7process11task_struct5sleep17h6b6884b4a9cdc973E>
    8000a5f6:	a009                	j	8000a5f8 <.LBB2_53+0x34>
                pipe_guard = self.guard.acquire();
    8000a5f8:	650e                	ld	a0,192(sp)
    8000a5fa:	00006097          	auipc	ra,0x6
    8000a5fe:	bf4080e7          	jalr	-1036(ra) # 800101ee <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h08fa8a4e90b26497E>
    8000a602:	e0aa                	sd	a0,64(sp)
    8000a604:	a009                	j	8000a606 <.LBB2_53+0x42>
    8000a606:	6506                	ld	a0,64(sp)
    8000a608:	e62a                	sd	a0,264(sp)
            if pipe_guard.write_number == pipe_guard.read_number + PIPE_SIZE {
    8000a60a:	b5f9                	j	8000a4d8 <.LBB2_51+0x74>
                if pgt.copy_in(&mut char as *mut u8, addr + i, 1).is_err() {
    8000a60c:	6666                	ld	a2,88(sp)
    8000a60e:	6546                	ld	a0,80(sp)
    8000a610:	11f10593          	addi	a1,sp,287
    8000a614:	4685                	li	a3,1
    8000a616:	0000d097          	auipc	ra,0xd
    8000a61a:	7e2080e7          	jalr	2018(ra) # 80017df8 <_ZN6kernel6memory7mapping10page_table9PageTable7copy_in17h459a5354b5a5ab11E>
    8000a61e:	f22a                	sd	a0,288(sp)
    8000a620:	f62e                	sd	a1,296(sp)
    8000a622:	a009                	j	8000a624 <.LBB2_53+0x60>
    8000a624:	1208                	addi	a0,sp,288
    8000a626:	00002097          	auipc	ra,0x2
    8000a62a:	738080e7          	jalr	1848(ra) # 8000cd5e <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h304118d236359d80E>
    8000a62e:	fc2a                	sd	a0,56(sp)
    8000a630:	a009                	j	8000a632 <.LBB2_53+0x6e>
    8000a632:	7562                	ld	a0,56(sp)
    8000a634:	4581                	li	a1,0
    8000a636:	00b50463          	beq	a0,a1,8000a63e <.LBB2_53+0x7a>
    8000a63a:	a009                	j	8000a63c <.LBB2_53+0x78>
    8000a63c:	a08d                	j	8000a69e <.LBB2_53+0xda>
    8000a63e:	0228                	addi	a0,sp,264
                    break;
                }
                let write_cursor = pipe_guard.write_number % PIPE_SIZE;
    8000a640:	00007097          	auipc	ra,0x7
    8000a644:	038080e7          	jalr	56(ra) # 80011678 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hd48c400b52283491E>
    8000a648:	f82a                	sd	a0,48(sp)
    8000a64a:	a009                	j	8000a64c <.LBB2_53+0x88>
    8000a64c:	7542                	ld	a0,48(sp)
    8000a64e:	20853503          	ld	a0,520(a0)
    8000a652:	1ff57513          	andi	a0,a0,511
    8000a656:	ec2a                	sd	a0,24(sp)
    8000a658:	faaa                	sd	a0,368(sp)
                pipe_guard.data[write_cursor % PIPE_SIZE] = char;
    8000a65a:	11f14503          	lbu	a0,287(sp)
    8000a65e:	f02a                	sd	a0,32(sp)
    8000a660:	0228                	addi	a0,sp,264
    8000a662:	00007097          	auipc	ra,0x7
    8000a666:	114080e7          	jalr	276(ra) # 80011776 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h890cc5a86d09cfeeE>
    8000a66a:	f42a                	sd	a0,40(sp)
    8000a66c:	a009                	j	8000a66e <.LBB2_53+0xaa>
    8000a66e:	65e2                	ld	a1,24(sp)
    8000a670:	852e                	mv	a0,a1
    8000a672:	e82a                	sd	a0,16(sp)
    8000a674:	1ff00513          	li	a0,511
    8000a678:	0ab56163          	bltu	a0,a1,8000a71a <.LBB2_58+0x14>
    8000a67c:	a009                	j	8000a67e <.LBB2_53+0xba>
    8000a67e:	7502                	ld	a0,32(sp)
    8000a680:	75a2                	ld	a1,40(sp)
    8000a682:	6642                	ld	a2,16(sp)
    8000a684:	95b2                	add	a1,a1,a2
    8000a686:	00a58023          	sb	a0,0(a1)
                i += 1;
    8000a68a:	65d2                	ld	a1,272(sp)
    8000a68c:	00158513          	addi	a0,a1,1
    8000a690:	e42a                	sd	a0,8(sp)
    8000a692:	0ab56063          	bltu	a0,a1,8000a732 <.LBB2_60>
    8000a696:	a009                	j	8000a698 <.LBB2_53+0xd4>
    8000a698:	6522                	ld	a0,8(sp)
    8000a69a:	ea2a                	sd	a0,272(sp)
            if pipe_guard.write_number == pipe_guard.read_number + PIPE_SIZE {
    8000a69c:	bd35                	j	8000a4d8 <.LBB2_51+0x74>
    8000a69e:	0228                	addi	a0,sp,264
            }
        }

        unsafe {
            PROC_MANAGER.wake_up(&pipe_guard.read_number as *const _ as usize);
    8000a6a0:	00007097          	auipc	ra,0x7
    8000a6a4:	fd8080e7          	jalr	-40(ra) # 80011678 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hd48c400b52283491E>
    8000a6a8:	e02a                	sd	a0,0(sp)
    8000a6aa:	a009                	j	8000a6ac <.LBB2_53+0xe8>
    8000a6ac:	6502                	ld	a0,0(sp)
    8000a6ae:	20050593          	addi	a1,a0,512

000000008000a6b2 <.LBB2_54>:
    8000a6b2:	0004d517          	auipc	a0,0x4d
    8000a6b6:	eee50513          	addi	a0,a0,-274 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    8000a6ba:	00003097          	auipc	ra,0x3
    8000a6be:	246080e7          	jalr	582(ra) # 8000d900 <_ZN6kernel7process7manager11ProcManager7wake_up17ha46b4d15ac07187bE>
    8000a6c2:	a009                	j	8000a6c4 <.LBB2_54+0x12>
        }
        drop(pipe_guard);
    8000a6c4:	6532                	ld	a0,264(sp)
    8000a6c6:	00013097          	auipc	ra,0x13
    8000a6ca:	a32080e7          	jalr	-1486(ra) # 8001d0f8 <_ZN4core3mem4drop17ha170cc24affc2e7cE>
    8000a6ce:	a009                	j	8000a6d0 <.LBB2_54+0x1e>

        Ok(i)
    8000a6d0:	65ae                	ld	a1,200(sp)
    8000a6d2:	6552                	ld	a0,272(sp)
    8000a6d4:	e588                	sd	a0,8(a1)
    8000a6d6:	4501                	li	a0,0
    8000a6d8:	e188                	sd	a0,0(a1)
    }
    8000a6da:	a009                	j	8000a6dc <.LBB2_54+0x2a>
    8000a6dc:	70f6                	ld	ra,376(sp)
    8000a6de:	6119                	addi	sp,sp,384
    8000a6e0:	8082                	ret

000000008000a6e2 <.LBB2_55>:
            if pipe_guard.write_number == pipe_guard.read_number + PIPE_SIZE {
    8000a6e2:	0001d517          	auipc	a0,0x1d
    8000a6e6:	3ae50513          	addi	a0,a0,942 # 80027a90 <str.0>

000000008000a6ea <.LBB2_56>:
    8000a6ea:	0001d617          	auipc	a2,0x1d
    8000a6ee:	43e60613          	addi	a2,a2,1086 # 80027b28 <.L__unnamed_9>
    8000a6f2:	45f1                	li	a1,28
    8000a6f4:	00018097          	auipc	ra,0x18
    8000a6f8:	b82080e7          	jalr	-1150(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008000a6fe <.LBB2_57>:
                if pgt.copy_in(&mut char as *mut u8, addr + i, 1).is_err() {
    8000a6fe:	0001d517          	auipc	a0,0x1d
    8000a702:	39250513          	addi	a0,a0,914 # 80027a90 <str.0>

000000008000a706 <.LBB2_58>:
    8000a706:	0001d617          	auipc	a2,0x1d
    8000a70a:	43a60613          	addi	a2,a2,1082 # 80027b40 <.L__unnamed_10>
    8000a70e:	45f1                	li	a1,28
    8000a710:	00018097          	auipc	ra,0x18
    8000a714:	b66080e7          	jalr	-1178(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8000a718:	0000                	unimp
                pipe_guard.data[write_cursor % PIPE_SIZE] = char;
    8000a71a:	6542                	ld	a0,16(sp)

000000008000a71c <.LBB2_59>:
    8000a71c:	0001d617          	auipc	a2,0x1d
    8000a720:	43c60613          	addi	a2,a2,1084 # 80027b58 <.L__unnamed_11>
    8000a724:	20000593          	li	a1,512
    8000a728:	00018097          	auipc	ra,0x18
    8000a72c:	b7a080e7          	jalr	-1158(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

000000008000a732 <.LBB2_60>:
                i += 1;
    8000a732:	0001d517          	auipc	a0,0x1d
    8000a736:	35e50513          	addi	a0,a0,862 # 80027a90 <str.0>

000000008000a73a <.LBB2_61>:
    8000a73a:	0001d617          	auipc	a2,0x1d
    8000a73e:	43660613          	addi	a2,a2,1078 # 80027b70 <.L__unnamed_12>
    8000a742:	45f1                	li	a1,28
    8000a744:	00018097          	auipc	ra,0x18
    8000a748:	b32080e7          	jalr	-1230(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel2fs4pipe9PipeGuard5alloc17h14564b7eb9e114dcE:

000000008000a74e <_ZN6kernel2fs4pipe9PipeGuard5alloc17h14564b7eb9e114dcE>:
        }
    }
}

impl PipeGuard {
    fn alloc() -> *mut Self {
    8000a74e:	1101                	addi	sp,sp,-32
        let pipe = unsafe{ RawPage::new_zeroed() as *mut PipeGuard };
    8000a750:	ec06                	sd	ra,24(sp)
    8000a752:	00000097          	auipc	ra,0x0
    8000a756:	812080e7          	jalr	-2030(ra) # 80009f64 <_ZN6kernel6memory13PageAllocator10new_zeroed17hbc99bdbca8d1d931E>
    8000a75a:	e02a                	sd	a0,0(sp)
    8000a75c:	a009                	j	8000a75e <_ZN6kernel2fs4pipe9PipeGuard5alloc17h14564b7eb9e114dcE+0x10>
    8000a75e:	6502                	ld	a0,0(sp)
    8000a760:	e42a                	sd	a0,8(sp)
        let pipe = unsafe{ &mut *pipe };
    8000a762:	e82a                	sd	a0,16(sp)
    8000a764:	4581                	li	a1,0
        pipe.read_number = 0;
    8000a766:	20b53023          	sd	a1,512(a0)
        pipe.write_number = 0;
    8000a76a:	20b53423          	sd	a1,520(a0)
    8000a76e:	10100593          	li	a1,257
        pipe.read_open = true;
    8000a772:	20b51823          	sh	a1,528(a0)
        pipe.write_open = true;
        pipe as *mut Self 
    }
    8000a776:	60e2                	ld	ra,24(sp)
    8000a778:	6105                	addi	sp,sp,32
    8000a77a:	8082                	ret

Disassembly of section .text.kvm_init:

000000008000a77c <kvm_init>:
    fn trampoline();
}

/// Initialize the one kernel_pagetable
#[no_mangle]
pub unsafe fn kvm_init(){
    8000a77c:	7175                	addi	sp,sp,-144
    // check if RawPage and PageTable have the same memory layout
    assert_eq!(size_of::<RawPage>(), PGSIZE);
    8000a77e:	e506                	sd	ra,136(sp)

000000008000a780 <.LBB0_2>:
    8000a780:	0001c517          	auipc	a0,0x1c
    8000a784:	11050513          	addi	a0,a0,272 # 80026890 <.L__unnamed_6+0xe8>
    8000a788:	e02a                	sd	a0,0(sp)
    8000a78a:	e42a                	sd	a0,8(sp)
    8000a78c:	e82a                	sd	a0,16(sp)
    8000a78e:	e4aa                	sd	a0,72(sp)
    8000a790:	e8aa                	sd	a0,80(sp)
    assert_eq!(align_of::<RawPage>(), PGSIZE);
    8000a792:	ec2a                	sd	a0,24(sp)
    8000a794:	f02a                	sd	a0,32(sp)
    8000a796:	ecaa                	sd	a0,88(sp)
    8000a798:	f0aa                	sd	a0,96(sp)
    assert_eq!(size_of::<RawPage>(), size_of::<PageTable>());
    8000a79a:	f42a                	sd	a0,40(sp)
    8000a79c:	f82a                	sd	a0,48(sp)
    8000a79e:	f4aa                	sd	a0,104(sp)
    8000a7a0:	f8aa                	sd	a0,112(sp)
    assert_eq!(align_of::<RawPage>(), align_of::<PageTable>());
    8000a7a2:	fc2a                	sd	a0,56(sp)
    8000a7a4:	e0aa                	sd	a0,64(sp)
    8000a7a6:	fcaa                	sd	a0,120(sp)
    8000a7a8:	e12a                	sd	a0,128(sp)

    kernel_map();
    8000a7aa:	00000097          	auipc	ra,0x0
    8000a7ae:	044080e7          	jalr	68(ra) # 8000a7ee <_ZN6kernel6memory7mapping10kernel_map10kernel_map17hdb0b29a584d860dbE>
    8000a7b2:	a009                	j	8000a7b4 <.LBB0_2+0x34>
}
    8000a7b4:	60aa                	ld	ra,136(sp)
    8000a7b6:	6149                	addi	sp,sp,144
    8000a7b8:	8082                	ret

Disassembly of section .text._ZN6kernel6memory7mapping10kernel_map13kvm_init_hart17hca08c717b940e5bcE:

000000008000a7ba <_ZN6kernel6memory7mapping10kernel_map13kvm_init_hart17hca08c717b940e5bcE>:

/// Switch h/w page table register to the kernel's page table,
/// and enable paging.
pub unsafe fn kvm_init_hart() {
    8000a7ba:	1141                	addi	sp,sp,-16
    satp::write(KERNEL_PAGETABLE.as_satp());
    8000a7bc:	e406                	sd	ra,8(sp)

000000008000a7be <.LBB1_4>:
    8000a7be:	00068517          	auipc	a0,0x68
    8000a7c2:	84250513          	addi	a0,a0,-1982 # 80072000 <_ZN6kernel6memory7mapping10kernel_map16KERNEL_PAGETABLE17h338fe72968ecefecE>
    8000a7c6:	0000c097          	auipc	ra,0xc
    8000a7ca:	5bc080e7          	jalr	1468(ra) # 80016d82 <_ZN6kernel6memory7mapping10page_table9PageTable7as_satp17h97121d8f678f163eE>
    8000a7ce:	e02a                	sd	a0,0(sp)
    8000a7d0:	a009                	j	8000a7d2 <.LBB1_4+0x14>
    8000a7d2:	6502                	ld	a0,0(sp)
    8000a7d4:	00014097          	auipc	ra,0x14
    8000a7d8:	efe080e7          	jalr	-258(ra) # 8001e6d2 <_ZN6kernel4arch5riscv8register4satp5write17h136481b47a553b1cE>
    8000a7dc:	a009                	j	8000a7de <.LBB1_4+0x20>
    sfence_vma();
    8000a7de:	0000e097          	auipc	ra,0xe
    8000a7e2:	d1a080e7          	jalr	-742(ra) # 800184f8 <_ZN6kernel4arch5riscv8register10sfence_vma17h7533c6c75a9febaaE>
    8000a7e6:	a009                	j	8000a7e8 <.LBB1_4+0x2a>
}
    8000a7e8:	60a2                	ld	ra,8(sp)
    8000a7ea:	0141                	addi	sp,sp,16
    8000a7ec:	8082                	ret

Disassembly of section .text._ZN6kernel6memory7mapping10kernel_map10kernel_map17hdb0b29a584d860dbE:

000000008000a7ee <_ZN6kernel6memory7mapping10kernel_map10kernel_map17hdb0b29a584d860dbE>:


/// Make a direct-map page table for the kernel.
unsafe fn kernel_map() {
    8000a7ee:	7129                	addi	sp,sp,-320
    println!("kernel page map");
    8000a7f0:	fe06                	sd	ra,312(sp)

000000008000a7f2 <.LBB2_48>:
    8000a7f2:	0001d597          	auipc	a1,0x1d
    8000a7f6:	39658593          	addi	a1,a1,918 # 80027b88 <.L__unnamed_2>

000000008000a7fa <.LBB2_49>:
    8000a7fa:	0001d697          	auipc	a3,0x1d
    8000a7fe:	39e68693          	addi	a3,a3,926 # 80027b98 <.L__unnamed_4>
    8000a802:	0228                	addi	a0,sp,264
    8000a804:	4605                	li	a2,1
    8000a806:	4701                	li	a4,0
    8000a808:	ffffb097          	auipc	ra,0xffffb
    8000a80c:	c62080e7          	jalr	-926(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8000a810:	a009                	j	8000a812 <.LBB2_49+0x18>
    8000a812:	0228                	addi	a0,sp,264
    8000a814:	00013097          	auipc	ra,0x13
    8000a818:	538080e7          	jalr	1336(ra) # 8001dd4c <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8000a81c:	a009                	j	8000a81e <.LBB2_49+0x24>
    8000a81e:	00100537          	lui	a0,0x100
    // map VIRT_TEST for shutdown or reboot
    KERNEL_PAGETABLE.kernel_map(
        VirtualAddress::new(VIRT_TEST),
    8000a822:	00007097          	auipc	ra,0x7
    8000a826:	03e080e7          	jalr	62(ra) # 80011860 <_ZN6kernel6memory7address14VirtualAddress3new17h716be423461f1938E>
    8000a82a:	e22a                	sd	a0,256(sp)
    8000a82c:	a009                	j	8000a82e <.LBB2_49+0x34>
    8000a82e:	00100537          	lui	a0,0x100
        PhysicalAddress::new(VIRT_TEST),
    8000a832:	00007097          	auipc	ra,0x7
    8000a836:	0de080e7          	jalr	222(ra) # 80011910 <_ZN6kernel6memory7address15PhysicalAddress3new17hf2b76f8479ac6235E>
    8000a83a:	fdaa                	sd	a0,248(sp)
    8000a83c:	a009                	j	8000a83e <.LBB2_49+0x44>
    8000a83e:	4509                	li	a0,2
    8000a840:	4591                	li	a1,4
        PGSIZE,
        PteFlags::R | PteFlags::W
    8000a842:	ffffe097          	auipc	ra,0xffffe
    8000a846:	00e080e7          	jalr	14(ra) # 80008850 <_ZN93_$LT$kernel..memory..mapping..page_table_entry..PteFlags$u20$as$u20$core..ops..bit..BitOr$GT$5bitor17h95bfa721b377cbd2E>
    8000a84a:	f9aa                	sd	a0,240(sp)
    8000a84c:	a009                	j	8000a84e <.LBB2_49+0x54>
    KERNEL_PAGETABLE.kernel_map(
    8000a84e:	774e                	ld	a4,240(sp)
    8000a850:	766e                	ld	a2,248(sp)
    8000a852:	6592                	ld	a1,256(sp)

000000008000a854 <.LBB2_50>:
    8000a854:	00067517          	auipc	a0,0x67
    8000a858:	7ac50513          	addi	a0,a0,1964 # 80072000 <_ZN6kernel6memory7mapping10kernel_map16KERNEL_PAGETABLE17h338fe72968ecefecE>
    8000a85c:	6685                	lui	a3,0x1
    8000a85e:	0000d097          	auipc	ra,0xd
    8000a862:	bc4080e7          	jalr	-1084(ra) # 80017422 <_ZN6kernel6memory7mapping10page_table9PageTable10kernel_map17h284e6512c0cc8b52E>
    8000a866:	a009                	j	8000a868 <.LBB2_50+0x14>
    8000a868:	10000537          	lui	a0,0x10000
    );

    // uart registers
    KERNEL_PAGETABLE.kernel_map(
        VirtualAddress::new(UART0), 
    8000a86c:	00007097          	auipc	ra,0x7
    8000a870:	ff4080e7          	jalr	-12(ra) # 80011860 <_ZN6kernel6memory7address14VirtualAddress3new17h716be423461f1938E>
    8000a874:	f5aa                	sd	a0,232(sp)
    8000a876:	a009                	j	8000a878 <.LBB2_50+0x24>
    8000a878:	10000537          	lui	a0,0x10000
        PhysicalAddress::new(UART0), 
    8000a87c:	00007097          	auipc	ra,0x7
    8000a880:	094080e7          	jalr	148(ra) # 80011910 <_ZN6kernel6memory7address15PhysicalAddress3new17hf2b76f8479ac6235E>
    8000a884:	f1aa                	sd	a0,224(sp)
    8000a886:	a009                	j	8000a888 <.LBB2_50+0x34>
    8000a888:	4509                	li	a0,2
    8000a88a:	4591                	li	a1,4
        PGSIZE, 
        PteFlags::R | PteFlags::W,
    8000a88c:	ffffe097          	auipc	ra,0xffffe
    8000a890:	fc4080e7          	jalr	-60(ra) # 80008850 <_ZN93_$LT$kernel..memory..mapping..page_table_entry..PteFlags$u20$as$u20$core..ops..bit..BitOr$GT$5bitor17h95bfa721b377cbd2E>
    8000a894:	edaa                	sd	a0,216(sp)
    8000a896:	a009                	j	8000a898 <.LBB2_50+0x44>
    KERNEL_PAGETABLE.kernel_map(
    8000a898:	676e                	ld	a4,216(sp)
    8000a89a:	760e                	ld	a2,224(sp)
    8000a89c:	75ae                	ld	a1,232(sp)

000000008000a89e <.LBB2_51>:
    8000a89e:	00067517          	auipc	a0,0x67
    8000a8a2:	76250513          	addi	a0,a0,1890 # 80072000 <_ZN6kernel6memory7mapping10kernel_map16KERNEL_PAGETABLE17h338fe72968ecefecE>
    8000a8a6:	6685                	lui	a3,0x1
    8000a8a8:	0000d097          	auipc	ra,0xd
    8000a8ac:	b7a080e7          	jalr	-1158(ra) # 80017422 <_ZN6kernel6memory7mapping10page_table9PageTable10kernel_map17h284e6512c0cc8b52E>
    8000a8b0:	a009                	j	8000a8b2 <.LBB2_51+0x14>
    8000a8b2:	10001537          	lui	a0,0x10001
    );
    // virtio mmio disk interface
    KERNEL_PAGETABLE.kernel_map(
        VirtualAddress::new(VIRTIO0), 
    8000a8b6:	00007097          	auipc	ra,0x7
    8000a8ba:	faa080e7          	jalr	-86(ra) # 80011860 <_ZN6kernel6memory7address14VirtualAddress3new17h716be423461f1938E>
    8000a8be:	e9aa                	sd	a0,208(sp)
    8000a8c0:	a009                	j	8000a8c2 <.LBB2_51+0x24>
    8000a8c2:	10001537          	lui	a0,0x10001
        PhysicalAddress::new(VIRTIO0), 
    8000a8c6:	00007097          	auipc	ra,0x7
    8000a8ca:	04a080e7          	jalr	74(ra) # 80011910 <_ZN6kernel6memory7address15PhysicalAddress3new17hf2b76f8479ac6235E>
    8000a8ce:	e5aa                	sd	a0,200(sp)
    8000a8d0:	a009                	j	8000a8d2 <.LBB2_51+0x34>
    8000a8d2:	4509                	li	a0,2
    8000a8d4:	4591                	li	a1,4
        PGSIZE, 
        PteFlags::R | PteFlags::W
    8000a8d6:	ffffe097          	auipc	ra,0xffffe
    8000a8da:	f7a080e7          	jalr	-134(ra) # 80008850 <_ZN93_$LT$kernel..memory..mapping..page_table_entry..PteFlags$u20$as$u20$core..ops..bit..BitOr$GT$5bitor17h95bfa721b377cbd2E>
    8000a8de:	e1aa                	sd	a0,192(sp)
    8000a8e0:	a009                	j	8000a8e2 <.LBB2_51+0x44>
    KERNEL_PAGETABLE.kernel_map(
    8000a8e2:	670e                	ld	a4,192(sp)
    8000a8e4:	662e                	ld	a2,200(sp)
    8000a8e6:	65ce                	ld	a1,208(sp)

000000008000a8e8 <.LBB2_52>:
    8000a8e8:	00067517          	auipc	a0,0x67
    8000a8ec:	71850513          	addi	a0,a0,1816 # 80072000 <_ZN6kernel6memory7mapping10kernel_map16KERNEL_PAGETABLE17h338fe72968ecefecE>
    8000a8f0:	6685                	lui	a3,0x1
    8000a8f2:	0000d097          	auipc	ra,0xd
    8000a8f6:	b30080e7          	jalr	-1232(ra) # 80017422 <_ZN6kernel6memory7mapping10page_table9PageTable10kernel_map17h284e6512c0cc8b52E>
    8000a8fa:	a009                	j	8000a8fc <.LBB2_52+0x14>
    8000a8fc:	30000537          	lui	a0,0x30000
    );

    // PCI-E ECAM (configuration space), for pci.rs
    KERNEL_PAGETABLE.kernel_map(
        VirtualAddress::new(ECAM),
    8000a900:	00007097          	auipc	ra,0x7
    8000a904:	f60080e7          	jalr	-160(ra) # 80011860 <_ZN6kernel6memory7address14VirtualAddress3new17h716be423461f1938E>
    8000a908:	fd2a                	sd	a0,184(sp)
    8000a90a:	a009                	j	8000a90c <.LBB2_52+0x24>
    8000a90c:	30000537          	lui	a0,0x30000
        PhysicalAddress::new(ECAM),
    8000a910:	00007097          	auipc	ra,0x7
    8000a914:	000080e7          	jalr	ra # 80011910 <_ZN6kernel6memory7address15PhysicalAddress3new17hf2b76f8479ac6235E>
    8000a918:	f92a                	sd	a0,176(sp)
    8000a91a:	a009                	j	8000a91c <.LBB2_52+0x34>
    8000a91c:	4509                	li	a0,2
    8000a91e:	4591                	li	a1,4
        0x10000000,
        PteFlags::R | PteFlags::W
    8000a920:	ffffe097          	auipc	ra,0xffffe
    8000a924:	f30080e7          	jalr	-208(ra) # 80008850 <_ZN93_$LT$kernel..memory..mapping..page_table_entry..PteFlags$u20$as$u20$core..ops..bit..BitOr$GT$5bitor17h95bfa721b377cbd2E>
    8000a928:	f52a                	sd	a0,168(sp)
    8000a92a:	a009                	j	8000a92c <.LBB2_52+0x44>
    KERNEL_PAGETABLE.kernel_map(
    8000a92c:	772a                	ld	a4,168(sp)
    8000a92e:	764a                	ld	a2,176(sp)
    8000a930:	75ea                	ld	a1,184(sp)

000000008000a932 <.LBB2_53>:
    8000a932:	00067517          	auipc	a0,0x67
    8000a936:	6ce50513          	addi	a0,a0,1742 # 80072000 <_ZN6kernel6memory7mapping10kernel_map16KERNEL_PAGETABLE17h338fe72968ecefecE>
    8000a93a:	100006b7          	lui	a3,0x10000
    8000a93e:	0000d097          	auipc	ra,0xd
    8000a942:	ae4080e7          	jalr	-1308(ra) # 80017422 <_ZN6kernel6memory7mapping10page_table9PageTable10kernel_map17h284e6512c0cc8b52E>
    8000a946:	a009                	j	8000a948 <.LBB2_53+0x16>
    8000a948:	40000537          	lui	a0,0x40000
    );

    // pci maps the e1000's registers here.
    KERNEL_PAGETABLE.kernel_map(
        VirtualAddress::new(E1000_REGS),
    8000a94c:	00007097          	auipc	ra,0x7
    8000a950:	f14080e7          	jalr	-236(ra) # 80011860 <_ZN6kernel6memory7address14VirtualAddress3new17h716be423461f1938E>
    8000a954:	f12a                	sd	a0,160(sp)
    8000a956:	a009                	j	8000a958 <.LBB2_53+0x26>
    8000a958:	40000537          	lui	a0,0x40000
        PhysicalAddress::new(E1000_REGS),
    8000a95c:	00007097          	auipc	ra,0x7
    8000a960:	fb4080e7          	jalr	-76(ra) # 80011910 <_ZN6kernel6memory7address15PhysicalAddress3new17hf2b76f8479ac6235E>
    8000a964:	ed2a                	sd	a0,152(sp)
    8000a966:	a009                	j	8000a968 <.LBB2_53+0x36>
    8000a968:	4509                	li	a0,2
    8000a96a:	4591                	li	a1,4
        0x20000,
        PteFlags::R | PteFlags::W
    8000a96c:	ffffe097          	auipc	ra,0xffffe
    8000a970:	ee4080e7          	jalr	-284(ra) # 80008850 <_ZN93_$LT$kernel..memory..mapping..page_table_entry..PteFlags$u20$as$u20$core..ops..bit..BitOr$GT$5bitor17h95bfa721b377cbd2E>
    8000a974:	e92a                	sd	a0,144(sp)
    8000a976:	a009                	j	8000a978 <.LBB2_53+0x46>
    KERNEL_PAGETABLE.kernel_map(
    8000a978:	674a                	ld	a4,144(sp)
    8000a97a:	666a                	ld	a2,152(sp)
    8000a97c:	758a                	ld	a1,160(sp)

000000008000a97e <.LBB2_54>:
    8000a97e:	00067517          	auipc	a0,0x67
    8000a982:	68250513          	addi	a0,a0,1666 # 80072000 <_ZN6kernel6memory7mapping10kernel_map16KERNEL_PAGETABLE17h338fe72968ecefecE>
    8000a986:	000206b7          	lui	a3,0x20
    8000a98a:	0000d097          	auipc	ra,0xd
    8000a98e:	a98080e7          	jalr	-1384(ra) # 80017422 <_ZN6kernel6memory7mapping10page_table9PageTable10kernel_map17h284e6512c0cc8b52E>
    8000a992:	a009                	j	8000a994 <.LBB2_54+0x16>
    8000a994:	02000537          	lui	a0,0x2000
    );

    // CLINT
    KERNEL_PAGETABLE.kernel_map(
        VirtualAddress::new(CLINT),
    8000a998:	00007097          	auipc	ra,0x7
    8000a99c:	ec8080e7          	jalr	-312(ra) # 80011860 <_ZN6kernel6memory7address14VirtualAddress3new17h716be423461f1938E>
    8000a9a0:	e52a                	sd	a0,136(sp)
    8000a9a2:	a009                	j	8000a9a4 <.LBB2_54+0x26>
    8000a9a4:	02000537          	lui	a0,0x2000
        PhysicalAddress::new(CLINT),
    8000a9a8:	00007097          	auipc	ra,0x7
    8000a9ac:	f68080e7          	jalr	-152(ra) # 80011910 <_ZN6kernel6memory7address15PhysicalAddress3new17hf2b76f8479ac6235E>
    8000a9b0:	e12a                	sd	a0,128(sp)
    8000a9b2:	a009                	j	8000a9b4 <.LBB2_54+0x36>
    8000a9b4:	4509                	li	a0,2
    8000a9b6:	4591                	li	a1,4
        0x10000,
        PteFlags::R | PteFlags::W
    8000a9b8:	ffffe097          	auipc	ra,0xffffe
    8000a9bc:	e98080e7          	jalr	-360(ra) # 80008850 <_ZN93_$LT$kernel..memory..mapping..page_table_entry..PteFlags$u20$as$u20$core..ops..bit..BitOr$GT$5bitor17h95bfa721b377cbd2E>
    8000a9c0:	fcaa                	sd	a0,120(sp)
    8000a9c2:	a009                	j	8000a9c4 <.LBB2_54+0x46>
    KERNEL_PAGETABLE.kernel_map(
    8000a9c4:	7766                	ld	a4,120(sp)
    8000a9c6:	660a                	ld	a2,128(sp)
    8000a9c8:	65aa                	ld	a1,136(sp)

000000008000a9ca <.LBB2_55>:
    8000a9ca:	00067517          	auipc	a0,0x67
    8000a9ce:	63650513          	addi	a0,a0,1590 # 80072000 <_ZN6kernel6memory7mapping10kernel_map16KERNEL_PAGETABLE17h338fe72968ecefecE>
    8000a9d2:	66c1                	lui	a3,0x10
    8000a9d4:	0000d097          	auipc	ra,0xd
    8000a9d8:	a4e080e7          	jalr	-1458(ra) # 80017422 <_ZN6kernel6memory7mapping10page_table9PageTable10kernel_map17h284e6512c0cc8b52E>
    8000a9dc:	a009                	j	8000a9de <.LBB2_55+0x14>
    8000a9de:	0c000537          	lui	a0,0xc000
    );

    // PLIC
    KERNEL_PAGETABLE.kernel_map(
        VirtualAddress::new(PLIC_BASE), 
    8000a9e2:	00007097          	auipc	ra,0x7
    8000a9e6:	e7e080e7          	jalr	-386(ra) # 80011860 <_ZN6kernel6memory7address14VirtualAddress3new17h716be423461f1938E>
    8000a9ea:	f8aa                	sd	a0,112(sp)
    8000a9ec:	a009                	j	8000a9ee <.LBB2_55+0x24>
    8000a9ee:	0c000537          	lui	a0,0xc000
        PhysicalAddress::new(PLIC_BASE), 
    8000a9f2:	00007097          	auipc	ra,0x7
    8000a9f6:	f1e080e7          	jalr	-226(ra) # 80011910 <_ZN6kernel6memory7address15PhysicalAddress3new17hf2b76f8479ac6235E>
    8000a9fa:	f4aa                	sd	a0,104(sp)
    8000a9fc:	a009                	j	8000a9fe <.LBB2_55+0x34>
    8000a9fe:	4509                	li	a0,2
    8000aa00:	4591                	li	a1,4
        0x400000, 
        PteFlags::R | PteFlags::W
    8000aa02:	ffffe097          	auipc	ra,0xffffe
    8000aa06:	e4e080e7          	jalr	-434(ra) # 80008850 <_ZN93_$LT$kernel..memory..mapping..page_table_entry..PteFlags$u20$as$u20$core..ops..bit..BitOr$GT$5bitor17h95bfa721b377cbd2E>
    8000aa0a:	f0aa                	sd	a0,96(sp)
    8000aa0c:	a009                	j	8000aa0e <.LBB2_55+0x44>
    KERNEL_PAGETABLE.kernel_map(
    8000aa0e:	7706                	ld	a4,96(sp)
    8000aa10:	7626                	ld	a2,104(sp)
    8000aa12:	75c6                	ld	a1,112(sp)

000000008000aa14 <.LBB2_56>:
    8000aa14:	00067517          	auipc	a0,0x67
    8000aa18:	5ec50513          	addi	a0,a0,1516 # 80072000 <_ZN6kernel6memory7mapping10kernel_map16KERNEL_PAGETABLE17h338fe72968ecefecE>
    8000aa1c:	004006b7          	lui	a3,0x400
    8000aa20:	0000d097          	auipc	ra,0xd
    8000aa24:	a02080e7          	jalr	-1534(ra) # 80017422 <_ZN6kernel6memory7mapping10page_table9PageTable10kernel_map17h284e6512c0cc8b52E>
    8000aa28:	a009                	j	8000aa2a <.LBB2_56+0x16>
    8000aa2a:	4505                	li	a0,1
    8000aa2c:	057e                	slli	a0,a0,0x1f
    );

    // map kernel text exectuable and read-only
    KERNEL_PAGETABLE.kernel_map(
        VirtualAddress::new(KERNEL_BASE), 
    8000aa2e:	00007097          	auipc	ra,0x7
    8000aa32:	e32080e7          	jalr	-462(ra) # 80011860 <_ZN6kernel6memory7address14VirtualAddress3new17h716be423461f1938E>
    8000aa36:	ecaa                	sd	a0,88(sp)
    8000aa38:	a009                	j	8000aa3a <.LBB2_56+0x26>
    8000aa3a:	4505                	li	a0,1
    8000aa3c:	057e                	slli	a0,a0,0x1f
        PhysicalAddress::new(KERNEL_BASE), 
    8000aa3e:	00007097          	auipc	ra,0x7
    8000aa42:	ed2080e7          	jalr	-302(ra) # 80011910 <_ZN6kernel6memory7address15PhysicalAddress3new17hf2b76f8479ac6235E>
    8000aa46:	e8aa                	sd	a0,80(sp)
    8000aa48:	a009                	j	8000aa4a <.LBB2_57>

000000008000aa4a <.LBB2_57>:
        etext as usize - KERNEL_BASE, 
    8000aa4a:	00024517          	auipc	a0,0x24
    8000aa4e:	5b650513          	addi	a0,a0,1462 # 8002f000 <_ZN6kernel2fs3bio6BCACHE17h4811aac4f8d79dc4E>
    8000aa52:	800005b7          	lui	a1,0x80000
    8000aa56:	95aa                	add	a1,a1,a0
    8000aa58:	e4ae                	sd	a1,72(sp)
    8000aa5a:	10b56263          	bltu	a0,a1,8000ab5e <.LBB2_66>
    8000aa5e:	a009                	j	8000aa60 <.LBB2_57+0x16>
    8000aa60:	4509                	li	a0,2
    8000aa62:	45a1                	li	a1,8
        PteFlags::R | PteFlags::X
    8000aa64:	ffffe097          	auipc	ra,0xffffe
    8000aa68:	dec080e7          	jalr	-532(ra) # 80008850 <_ZN93_$LT$kernel..memory..mapping..page_table_entry..PteFlags$u20$as$u20$core..ops..bit..BitOr$GT$5bitor17h95bfa721b377cbd2E>
    8000aa6c:	e0aa                	sd	a0,64(sp)
    8000aa6e:	a009                	j	8000aa70 <.LBB2_57+0x26>
    KERNEL_PAGETABLE.kernel_map(
    8000aa70:	6706                	ld	a4,64(sp)
    8000aa72:	66a6                	ld	a3,72(sp)
    8000aa74:	6646                	ld	a2,80(sp)
    8000aa76:	65e6                	ld	a1,88(sp)

000000008000aa78 <.LBB2_58>:
    8000aa78:	00067517          	auipc	a0,0x67
    8000aa7c:	58850513          	addi	a0,a0,1416 # 80072000 <_ZN6kernel6memory7mapping10kernel_map16KERNEL_PAGETABLE17h338fe72968ecefecE>
    8000aa80:	0000d097          	auipc	ra,0xd
    8000aa84:	9a2080e7          	jalr	-1630(ra) # 80017422 <_ZN6kernel6memory7mapping10page_table9PageTable10kernel_map17h284e6512c0cc8b52E>
    8000aa88:	a009                	j	8000aa8a <.LBB2_59>

000000008000aa8a <.LBB2_59>:
    );

    // map kernel data and the physical RAM we'll make use of
    KERNEL_PAGETABLE.kernel_map(
        VirtualAddress::new(etext as usize), 
    8000aa8a:	00024517          	auipc	a0,0x24
    8000aa8e:	57650513          	addi	a0,a0,1398 # 8002f000 <_ZN6kernel2fs3bio6BCACHE17h4811aac4f8d79dc4E>
    8000aa92:	00007097          	auipc	ra,0x7
    8000aa96:	dce080e7          	jalr	-562(ra) # 80011860 <_ZN6kernel6memory7address14VirtualAddress3new17h716be423461f1938E>
    8000aa9a:	fc2a                	sd	a0,56(sp)
    8000aa9c:	a009                	j	8000aa9e <.LBB2_60>

000000008000aa9e <.LBB2_60>:
        PhysicalAddress::new(etext as usize), 
    8000aa9e:	00024517          	auipc	a0,0x24
    8000aaa2:	56250513          	addi	a0,a0,1378 # 8002f000 <_ZN6kernel2fs3bio6BCACHE17h4811aac4f8d79dc4E>
    8000aaa6:	00007097          	auipc	ra,0x7
    8000aaaa:	e6a080e7          	jalr	-406(ra) # 80011910 <_ZN6kernel6memory7address15PhysicalAddress3new17hf2b76f8479ac6235E>
    8000aaae:	f82a                	sd	a0,48(sp)
    8000aab0:	a009                	j	8000aab2 <.LBB2_61>

000000008000aab2 <.LBB2_61>:
        PHYSTOP - etext as usize, 
    8000aab2:	00024597          	auipc	a1,0x24
    8000aab6:	54e58593          	addi	a1,a1,1358 # 8002f000 <_ZN6kernel2fs3bio6BCACHE17h4811aac4f8d79dc4E>
    8000aaba:	4545                	li	a0,17
    8000aabc:	056e                	slli	a0,a0,0x1b
    8000aabe:	40b505b3          	sub	a1,a0,a1
    8000aac2:	f42e                	sd	a1,40(sp)
    8000aac4:	0ab56c63          	bltu	a0,a1,8000ab7c <.LBB2_68>
    8000aac8:	a009                	j	8000aaca <.LBB2_61+0x18>
    8000aaca:	4509                	li	a0,2
    8000aacc:	4591                	li	a1,4
        PteFlags::R | PteFlags::W
    8000aace:	ffffe097          	auipc	ra,0xffffe
    8000aad2:	d82080e7          	jalr	-638(ra) # 80008850 <_ZN93_$LT$kernel..memory..mapping..page_table_entry..PteFlags$u20$as$u20$core..ops..bit..BitOr$GT$5bitor17h95bfa721b377cbd2E>
    8000aad6:	f02a                	sd	a0,32(sp)
    8000aad8:	a009                	j	8000aada <.LBB2_61+0x28>
    KERNEL_PAGETABLE.kernel_map(
    8000aada:	7702                	ld	a4,32(sp)
    8000aadc:	76a2                	ld	a3,40(sp)
    8000aade:	7642                	ld	a2,48(sp)
    8000aae0:	75e2                	ld	a1,56(sp)

000000008000aae2 <.LBB2_62>:
    8000aae2:	00067517          	auipc	a0,0x67
    8000aae6:	51e50513          	addi	a0,a0,1310 # 80072000 <_ZN6kernel6memory7mapping10kernel_map16KERNEL_PAGETABLE17h338fe72968ecefecE>
    8000aaea:	0000d097          	auipc	ra,0xd
    8000aaee:	938080e7          	jalr	-1736(ra) # 80017422 <_ZN6kernel6memory7mapping10page_table9PageTable10kernel_map17h284e6512c0cc8b52E>
    8000aaf2:	a009                	j	8000aaf4 <.LBB2_62+0x12>
    8000aaf4:	04000537          	lui	a0,0x4000
    8000aaf8:	357d                	addiw	a0,a0,-1
    8000aafa:	0532                	slli	a0,a0,0xc
    );

    // map the trampoline for trap entry/exit
    // the highest virtual address in the kernel
    KERNEL_PAGETABLE.kernel_map(
        VirtualAddress::new(TRAMPOLINE), 
    8000aafc:	00007097          	auipc	ra,0x7
    8000ab00:	d64080e7          	jalr	-668(ra) # 80011860 <_ZN6kernel6memory7address14VirtualAddress3new17h716be423461f1938E>
    8000ab04:	ec2a                	sd	a0,24(sp)
    8000ab06:	a009                	j	8000ab08 <.LBB2_63>

000000008000ab08 <.LBB2_63>:
        PhysicalAddress::new(trampoline as usize), 
    8000ab08:	ffff6517          	auipc	a0,0xffff6
    8000ab0c:	4f850513          	addi	a0,a0,1272 # 80001000 <trampoline>
    8000ab10:	00007097          	auipc	ra,0x7
    8000ab14:	e00080e7          	jalr	-512(ra) # 80011910 <_ZN6kernel6memory7address15PhysicalAddress3new17hf2b76f8479ac6235E>
    8000ab18:	e82a                	sd	a0,16(sp)
    8000ab1a:	a009                	j	8000ab1c <.LBB2_63+0x14>
    8000ab1c:	4509                	li	a0,2
    8000ab1e:	45a1                	li	a1,8
        PGSIZE, 
        PteFlags::R | PteFlags::X
    8000ab20:	ffffe097          	auipc	ra,0xffffe
    8000ab24:	d30080e7          	jalr	-720(ra) # 80008850 <_ZN93_$LT$kernel..memory..mapping..page_table_entry..PteFlags$u20$as$u20$core..ops..bit..BitOr$GT$5bitor17h95bfa721b377cbd2E>
    8000ab28:	e42a                	sd	a0,8(sp)
    8000ab2a:	a009                	j	8000ab2c <.LBB2_63+0x24>
    KERNEL_PAGETABLE.kernel_map(
    8000ab2c:	6722                	ld	a4,8(sp)
    8000ab2e:	6642                	ld	a2,16(sp)
    8000ab30:	65e2                	ld	a1,24(sp)

000000008000ab32 <.LBB2_64>:
    8000ab32:	00067517          	auipc	a0,0x67
    8000ab36:	4ce50513          	addi	a0,a0,1230 # 80072000 <_ZN6kernel6memory7mapping10kernel_map16KERNEL_PAGETABLE17h338fe72968ecefecE>
    8000ab3a:	6685                	lui	a3,0x1
    8000ab3c:	0000d097          	auipc	ra,0xd
    8000ab40:	8e6080e7          	jalr	-1818(ra) # 80017422 <_ZN6kernel6memory7mapping10page_table9PageTable10kernel_map17h284e6512c0cc8b52E>
    8000ab44:	a009                	j	8000ab46 <.LBB2_65>

000000008000ab46 <.LBB2_65>:
    );

    // 映射不同进程的内核栈
    PROC_MANAGER.proc_mapstacks();
    8000ab46:	0004d517          	auipc	a0,0x4d
    8000ab4a:	a5a50513          	addi	a0,a0,-1446 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    8000ab4e:	00003097          	auipc	ra,0x3
    8000ab52:	852080e7          	jalr	-1966(ra) # 8000d3a0 <_ZN6kernel7process7manager11ProcManager14proc_mapstacks17he92f2c2a936a1699E>
    8000ab56:	a009                	j	8000ab58 <.LBB2_65+0x12>
}
    8000ab58:	70f2                	ld	ra,312(sp)
    8000ab5a:	6131                	addi	sp,sp,320
    8000ab5c:	8082                	ret

000000008000ab5e <.LBB2_66>:
        etext as usize - KERNEL_BASE, 
    8000ab5e:	0001d517          	auipc	a0,0x1d
    8000ab62:	05250513          	addi	a0,a0,82 # 80027bb0 <str.0>

000000008000ab66 <.LBB2_67>:
    8000ab66:	0001d617          	auipc	a2,0x1d
    8000ab6a:	03260613          	addi	a2,a2,50 # 80027b98 <.L__unnamed_4>
    8000ab6e:	02100593          	li	a1,33
    8000ab72:	00017097          	auipc	ra,0x17
    8000ab76:	704080e7          	jalr	1796(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008000ab7c <.LBB2_68>:
        PHYSTOP - etext as usize, 
    8000ab7c:	0001d517          	auipc	a0,0x1d
    8000ab80:	03450513          	addi	a0,a0,52 # 80027bb0 <str.0>

000000008000ab84 <.LBB2_69>:
    8000ab84:	0001d617          	auipc	a2,0x1d
    8000ab88:	05460613          	addi	a2,a2,84 # 80027bd8 <.L__unnamed_5>
    8000ab8c:	02100593          	li	a1,33
    8000ab90:	00017097          	auipc	ra,0x17
    8000ab94:	6e6080e7          	jalr	1766(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN11array_macro19__Capacity$LT$_$GT$3get17hecfc1cf2bb733562E:

000000008000ab9a <_ZN11array_macro19__Capacity$LT$_$GT$3get17hecfc1cf2bb733562E>:

#[doc(hidden)]
pub struct __Capacity<const N: usize>;

impl<const N: usize> __Capacity<N> {
    pub const fn get(&self) -> usize {
    8000ab9a:	1141                	addi	sp,sp,-16
    8000ab9c:	e42a                	sd	a0,8(sp)
    8000ab9e:	06400513          	li	a0,100
        N
    }
    8000aba2:	0141                	addi	sp,sp,16
    8000aba4:	8082                	ret

Disassembly of section .text._ZN11array_macro28__ArrayVecInner$LT$T$C$_$GT$3new17h8c73fc7516a84ce9E:

000000008000aba6 <_ZN11array_macro28__ArrayVecInner$LT$T$C$_$GT$3new17h8c73fc7516a84ce9E>:
    pub const unsafe fn new(arr: [MaybeUninit<T>; N]) -> Self {
    8000aba6:	cc010113          	addi	sp,sp,-832
            arr,
    8000abaa:	32113c23          	sd	ra,824(sp)
    8000abae:	e82a                	sd	a0,16(sp)
    8000abb0:	0828                	addi	a0,sp,24
    8000abb2:	e02a                	sd	a0,0(sp)
    8000abb4:	32000613          	li	a2,800
    8000abb8:	e432                	sd	a2,8(sp)
    8000abba:	0001a097          	auipc	ra,0x1a
    8000abbe:	52a080e7          	jalr	1322(ra) # 800250e4 <memcpy>
    8000abc2:	6582                	ld	a1,0(sp)
    8000abc4:	6622                	ld	a2,8(sp)
        Self {
    8000abc6:	6542                	ld	a0,16(sp)
    8000abc8:	0001a097          	auipc	ra,0x1a
    8000abcc:	51c080e7          	jalr	1308(ra) # 800250e4 <memcpy>
    8000abd0:	65c2                	ld	a1,16(sp)
    8000abd2:	4501                	li	a0,0
    8000abd4:	32a5b023          	sd	a0,800(a1)
    }
    8000abd8:	33813083          	ld	ra,824(sp)
    8000abdc:	34010113          	addi	sp,sp,832
    8000abe0:	8082                	ret

Disassembly of section .text._ZN4core4iter6traits8iterator8Iterator4fold17hc68e62fe16e6d649E:

000000008000abe2 <_ZN4core4iter6traits8iterator8Iterator4fold17hc68e62fe16e6d649E>:
    /// [`reduce()`]: Iterator::reduce
    #[doc(alias = "reduce")]
    #[doc(alias = "inject")]
    #[inline]
    #[stable(feature = "rust1", since = "1.0.0")]
    fn fold<B, F>(mut self, init: B, mut f: F) -> B
    8000abe2:	715d                	addi	sp,sp,-80
    8000abe4:	e486                	sd	ra,72(sp)
    8000abe6:	e42a                	sd	a0,8(sp)
    8000abe8:	e82e                	sd	a1,16(sp)
    8000abea:	ec32                	sd	a2,24(sp)
    where
        Self: Sized,
        F: FnMut(B, Self::Item) -> B,
    {
        let mut accum = init;
        while let Some(x) = self.next() {
    8000abec:	a009                	j	8000abee <_ZN4core4iter6traits8iterator8Iterator4fold17hc68e62fe16e6d649E+0xc>
    8000abee:	0028                	addi	a0,sp,8
    8000abf0:	00000097          	auipc	ra,0x0
    8000abf4:	776080e7          	jalr	1910(ra) # 8000b366 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb379e12fde7ef54dE>
    8000abf8:	f42a                	sd	a0,40(sp)
    8000abfa:	a009                	j	8000abfc <_ZN4core4iter6traits8iterator8Iterator4fold17hc68e62fe16e6d649E+0x1a>
    8000abfc:	7522                	ld	a0,40(sp)
    8000abfe:	4581                	li	a1,0
    8000ac00:	00b51463          	bne	a0,a1,8000ac08 <_ZN4core4iter6traits8iterator8Iterator4fold17hc68e62fe16e6d649E+0x26>
    8000ac04:	a009                	j	8000ac06 <_ZN4core4iter6traits8iterator8Iterator4fold17hc68e62fe16e6d649E+0x24>
            accum = f(accum, x);
        }
    8000ac06:	a819                	j	8000ac1c <_ZN4core4iter6traits8iterator8Iterator4fold17hc68e62fe16e6d649E+0x3a>
        while let Some(x) = self.next() {
    8000ac08:	75a2                	ld	a1,40(sp)
    8000ac0a:	e0ae                	sd	a1,64(sp)
            accum = f(accum, x);
    8000ac0c:	f82e                	sd	a1,48(sp)
    8000ac0e:	0828                	addi	a0,sp,24
    8000ac10:	00007097          	auipc	ra,0x7
    8000ac14:	7be080e7          	jalr	1982(ra) # 800123ce <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold9enumerate28_$u7b$$u7b$closure$u7d$$u7d$17hd0c93bb900581135E>
    8000ac18:	a009                	j	8000ac1a <_ZN4core4iter6traits8iterator8Iterator4fold17hc68e62fe16e6d649E+0x38>
        while let Some(x) = self.next() {
    8000ac1a:	bfd1                	j	8000abee <_ZN4core4iter6traits8iterator8Iterator4fold17hc68e62fe16e6d649E+0xc>
        accum
    }
    8000ac1c:	a009                	j	8000ac1e <_ZN4core4iter6traits8iterator8Iterator4fold17hc68e62fe16e6d649E+0x3c>
    8000ac1e:	a009                	j	8000ac20 <_ZN4core4iter6traits8iterator8Iterator4fold17hc68e62fe16e6d649E+0x3e>
    8000ac20:	60a6                	ld	ra,72(sp)
    8000ac22:	6161                	addi	sp,sp,80
    8000ac24:	8082                	ret

Disassembly of section .text._ZN4core4iter6traits8iterator8Iterator6copied17hc4f54d9039c4545bE:

000000008000ac26 <_ZN4core4iter6traits8iterator8Iterator6copied17hc4f54d9039c4545bE>:
    ///
    /// assert_eq!(v_copied, vec![1, 2, 3]);
    /// assert_eq!(v_map, vec![1, 2, 3]);
    /// ```
    #[stable(feature = "iter_copied", since = "1.36.0")]
    fn copied<'a, T: 'a>(self) -> Copied<Self>
    8000ac26:	7179                	addi	sp,sp,-48
    8000ac28:	f406                	sd	ra,40(sp)
    8000ac2a:	ec2a                	sd	a0,24(sp)
    8000ac2c:	f02e                	sd	a1,32(sp)
    where
        Self: Sized + Iterator<Item = &'a T>,
        T: Copy,
    {
        Copied::new(self)
    8000ac2e:	ffffa097          	auipc	ra,0xffffa
    8000ac32:	e7e080e7          	jalr	-386(ra) # 80004aac <_ZN4core4iter8adapters6copied15Copied$LT$I$GT$3new17h07d9127b76ff3571E>
    8000ac36:	e42a                	sd	a0,8(sp)
    8000ac38:	e82e                	sd	a1,16(sp)
    8000ac3a:	a009                	j	8000ac3c <_ZN4core4iter6traits8iterator8Iterator6copied17hc4f54d9039c4545bE+0x16>
    }
    8000ac3c:	65c2                	ld	a1,16(sp)
    8000ac3e:	6522                	ld	a0,8(sp)
    8000ac40:	70a2                	ld	ra,40(sp)
    8000ac42:	6145                	addi	sp,sp,48
    8000ac44:	8082                	ret

Disassembly of section .text._ZN4core4iter6traits8iterator8Iterator9enumerate17h42a569d91d49dc41E:

000000008000ac46 <_ZN4core4iter6traits8iterator8Iterator9enumerate17h42a569d91d49dc41E>:
    fn enumerate(self) -> Enumerate<Self>
    8000ac46:	1101                	addi	sp,sp,-32
    8000ac48:	ec06                	sd	ra,24(sp)
    8000ac4a:	e42e                	sd	a1,8(sp)
    8000ac4c:	e832                	sd	a2,16(sp)
        Enumerate::new(self)
    8000ac4e:	00008097          	auipc	ra,0x8
    8000ac52:	8c2080e7          	jalr	-1854(ra) # 80012510 <_ZN4core4iter8adapters9enumerate18Enumerate$LT$I$GT$3new17h6d37c7662d298f80E>
    8000ac56:	a009                	j	8000ac58 <_ZN4core4iter6traits8iterator8Iterator9enumerate17h42a569d91d49dc41E+0x12>
    }
    8000ac58:	60e2                	ld	ra,24(sp)
    8000ac5a:	6105                	addi	sp,sp,32
    8000ac5c:	8082                	ret

Disassembly of section .text._ZN4core4iter6traits8iterator8Iterator9enumerate17hf4bbd83c6ce36188E:

000000008000ac5e <_ZN4core4iter6traits8iterator8Iterator9enumerate17hf4bbd83c6ce36188E>:
    fn enumerate(self) -> Enumerate<Self>
    8000ac5e:	1101                	addi	sp,sp,-32
    8000ac60:	ec06                	sd	ra,24(sp)
    8000ac62:	e42e                	sd	a1,8(sp)
    8000ac64:	e832                	sd	a2,16(sp)
        Enumerate::new(self)
    8000ac66:	00008097          	auipc	ra,0x8
    8000ac6a:	892080e7          	jalr	-1902(ra) # 800124f8 <_ZN4core4iter8adapters9enumerate18Enumerate$LT$I$GT$3new17h36e1d93f918ce5d8E>
    8000ac6e:	a009                	j	8000ac70 <_ZN4core4iter6traits8iterator8Iterator9enumerate17hf4bbd83c6ce36188E+0x12>
    }
    8000ac70:	60e2                	ld	ra,24(sp)
    8000ac72:	6105                	addi	sp,sp,32
    8000ac74:	8082                	ret

Disassembly of section .text._ZN4core5slice4iter13Iter$LT$T$GT$3new17h255496547b3a0f33E:

000000008000ac76 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h255496547b3a0f33E>:
#[stable(feature = "rust1", since = "1.0.0")]
unsafe impl<T: Sync> Send for Iter<'_, T> {}

impl<'a, T> Iter<'a, T> {
    #[inline]
    pub(super) fn new(slice: &'a [T]) -> Self {
    8000ac76:	7119                	addi	sp,sp,-128
    8000ac78:	fc86                	sd	ra,120(sp)
    8000ac7a:	f82e                	sd	a1,48(sp)
    8000ac7c:	fc2a                	sd	a0,56(sp)
    8000ac7e:	f0aa                	sd	a0,96(sp)
    8000ac80:	f4ae                	sd	a1,104(sp)
        let ptr = slice.as_ptr();
    8000ac82:	00007097          	auipc	ra,0x7
    8000ac86:	da2080e7          	jalr	-606(ra) # 80011a24 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h435aa5d084fb4c37E>
    8000ac8a:	85aa                	mv	a1,a0
    8000ac8c:	e0ae                	sd	a1,64(sp)
    8000ac8e:	f8aa                	sd	a0,112(sp)
    8000ac90:	a009                	j	8000ac92 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h255496547b3a0f33E+0x1c>
        // SAFETY: Similar to `IterMut::new`.
        unsafe {
            assume(!ptr.is_null());
    8000ac92:	6506                	ld	a0,64(sp)
    8000ac94:	00007097          	auipc	ra,0x7
    8000ac98:	d30080e7          	jalr	-720(ra) # 800119c4 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17ha3fd0a02496fedc6E>
    8000ac9c:	a009                	j	8000ac9e <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h255496547b3a0f33E+0x28>
    8000ac9e:	a009                	j	8000aca0 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h255496547b3a0f33E+0x2a>

            let end = if mem::size_of::<T>() == 0 {
    8000aca0:	a009                	j	8000aca2 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h255496547b3a0f33E+0x2c>
    8000aca2:	4505                	li	a0,1
    8000aca4:	ed01                	bnez	a0,8000acbc <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h255496547b3a0f33E+0x46>
    8000aca6:	a009                	j	8000aca8 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h255496547b3a0f33E+0x32>
                (ptr as *const u8).wrapping_add(slice.len()) as *const T
    8000aca8:	75c2                	ld	a1,48(sp)
    8000acaa:	7562                	ld	a0,56(sp)
    8000acac:	6606                	ld	a2,64(sp)
    8000acae:	f032                	sd	a2,32(sp)
    8000acb0:	00007097          	auipc	ra,0x7
    8000acb4:	d40080e7          	jalr	-704(ra) # 800119f0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf08bc165152fefe5E>
    8000acb8:	f42a                	sd	a0,40(sp)
    8000acba:	a809                	j	8000accc <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h255496547b3a0f33E+0x56>
            } else {
                ptr.add(slice.len())
    8000acbc:	75c2                	ld	a1,48(sp)
    8000acbe:	7562                	ld	a0,56(sp)
    8000acc0:	00007097          	auipc	ra,0x7
    8000acc4:	d30080e7          	jalr	-720(ra) # 800119f0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf08bc165152fefe5E>
    8000acc8:	ec2a                	sd	a0,24(sp)
    8000acca:	a821                	j	8000ace2 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h255496547b3a0f33E+0x6c>
                (ptr as *const u8).wrapping_add(slice.len()) as *const T
    8000accc:	75a2                	ld	a1,40(sp)
    8000acce:	7502                	ld	a0,32(sp)
    8000acd0:	ffffa097          	auipc	ra,0xffffa
    8000acd4:	b3a080e7          	jalr	-1222(ra) # 8000480a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h10470fd1e83789bbE>
    8000acd8:	e82a                	sd	a0,16(sp)
    8000acda:	a009                	j	8000acdc <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h255496547b3a0f33E+0x66>
    8000acdc:	6542                	ld	a0,16(sp)
    8000acde:	ecaa                	sd	a0,88(sp)
            let end = if mem::size_of::<T>() == 0 {
    8000ace0:	a811                	j	8000acf4 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h255496547b3a0f33E+0x7e>
                ptr.add(slice.len())
    8000ace2:	65e2                	ld	a1,24(sp)
    8000ace4:	6506                	ld	a0,64(sp)
    8000ace6:	00007097          	auipc	ra,0x7
    8000acea:	ca6080e7          	jalr	-858(ra) # 8001198c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h82f80b86300e876eE>
    8000acee:	ecaa                	sd	a0,88(sp)
    8000acf0:	a009                	j	8000acf2 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h255496547b3a0f33E+0x7c>
            let end = if mem::size_of::<T>() == 0 {
    8000acf2:	a009                	j	8000acf4 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h255496547b3a0f33E+0x7e>
            };

            Self { ptr: NonNull::new_unchecked(ptr as *mut T), end, _marker: PhantomData }
    8000acf4:	6506                	ld	a0,64(sp)
    8000acf6:	00004097          	auipc	ra,0x4
    8000acfa:	616080e7          	jalr	1558(ra) # 8000f30c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17he6e2e3c661183ac0E>
    8000acfe:	e42a                	sd	a0,8(sp)
    8000ad00:	a009                	j	8000ad02 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h255496547b3a0f33E+0x8c>
    8000ad02:	6522                	ld	a0,8(sp)
    8000ad04:	65e6                	ld	a1,88(sp)
    8000ad06:	e4aa                	sd	a0,72(sp)
    8000ad08:	e8ae                	sd	a1,80(sp)
        }
    }
    8000ad0a:	70e6                	ld	ra,120(sp)
    8000ad0c:	6109                	addi	sp,sp,128
    8000ad0e:	8082                	ret

Disassembly of section .text._ZN4core5slice4iter13Iter$LT$T$GT$3new17h7dcd9c98bf37806bE:

000000008000ad10 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h7dcd9c98bf37806bE>:
    pub(super) fn new(slice: &'a [T]) -> Self {
    8000ad10:	7159                	addi	sp,sp,-112
    8000ad12:	f486                	sd	ra,104(sp)
    8000ad14:	f02e                	sd	a1,32(sp)
    8000ad16:	f42a                	sd	a0,40(sp)
    8000ad18:	e8aa                	sd	a0,80(sp)
    8000ad1a:	ecae                	sd	a1,88(sp)
        let ptr = slice.as_ptr();
    8000ad1c:	00015097          	auipc	ra,0x15
    8000ad20:	914080e7          	jalr	-1772(ra) # 8001f630 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hf7620495824cfb20E>
    8000ad24:	85aa                	mv	a1,a0
    8000ad26:	f82e                	sd	a1,48(sp)
    8000ad28:	f0aa                	sd	a0,96(sp)
    8000ad2a:	a009                	j	8000ad2c <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h7dcd9c98bf37806bE+0x1c>
            assume(!ptr.is_null());
    8000ad2c:	7542                	ld	a0,48(sp)
    8000ad2e:	00015097          	auipc	ra,0x15
    8000ad32:	b22080e7          	jalr	-1246(ra) # 8001f850 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h309eb733b6984dd5E>
    8000ad36:	a009                	j	8000ad38 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h7dcd9c98bf37806bE+0x28>
    8000ad38:	a009                	j	8000ad3a <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h7dcd9c98bf37806bE+0x2a>
            let end = if mem::size_of::<T>() == 0 {
    8000ad3a:	a009                	j	8000ad3c <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h7dcd9c98bf37806bE+0x2c>
    8000ad3c:	4505                	li	a0,1
    8000ad3e:	e911                	bnez	a0,8000ad52 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h7dcd9c98bf37806bE+0x42>
    8000ad40:	a009                	j	8000ad42 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h7dcd9c98bf37806bE+0x32>
                (ptr as *const u8).wrapping_add(slice.len()) as *const T
    8000ad42:	7582                	ld	a1,32(sp)
    8000ad44:	7522                	ld	a0,40(sp)
    8000ad46:	00015097          	auipc	ra,0x15
    8000ad4a:	88e080e7          	jalr	-1906(ra) # 8001f5d4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hb06ce83b043493f3E>
    8000ad4e:	ec2a                	sd	a0,24(sp)
    8000ad50:	a809                	j	8000ad62 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h7dcd9c98bf37806bE+0x52>
                ptr.add(slice.len())
    8000ad52:	7582                	ld	a1,32(sp)
    8000ad54:	7522                	ld	a0,40(sp)
    8000ad56:	00015097          	auipc	ra,0x15
    8000ad5a:	87e080e7          	jalr	-1922(ra) # 8001f5d4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hb06ce83b043493f3E>
    8000ad5e:	e82a                	sd	a0,16(sp)
    8000ad60:	a821                	j	8000ad78 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h7dcd9c98bf37806bE+0x68>
                (ptr as *const u8).wrapping_add(slice.len()) as *const T
    8000ad62:	65e2                	ld	a1,24(sp)
    8000ad64:	7542                	ld	a0,48(sp)
    8000ad66:	ffffa097          	auipc	ra,0xffffa
    8000ad6a:	aa4080e7          	jalr	-1372(ra) # 8000480a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h10470fd1e83789bbE>
    8000ad6e:	e42a                	sd	a0,8(sp)
    8000ad70:	a009                	j	8000ad72 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h7dcd9c98bf37806bE+0x62>
    8000ad72:	6522                	ld	a0,8(sp)
    8000ad74:	e4aa                	sd	a0,72(sp)
            let end = if mem::size_of::<T>() == 0 {
    8000ad76:	a811                	j	8000ad8a <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h7dcd9c98bf37806bE+0x7a>
                ptr.add(slice.len())
    8000ad78:	65c2                	ld	a1,16(sp)
    8000ad7a:	7542                	ld	a0,48(sp)
    8000ad7c:	00015097          	auipc	ra,0x15
    8000ad80:	a72080e7          	jalr	-1422(ra) # 8001f7ee <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h3ef2f165a29b2365E>
    8000ad84:	e4aa                	sd	a0,72(sp)
    8000ad86:	a009                	j	8000ad88 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h7dcd9c98bf37806bE+0x78>
            let end = if mem::size_of::<T>() == 0 {
    8000ad88:	a009                	j	8000ad8a <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h7dcd9c98bf37806bE+0x7a>
            Self { ptr: NonNull::new_unchecked(ptr as *mut T), end, _marker: PhantomData }
    8000ad8a:	7542                	ld	a0,48(sp)
    8000ad8c:	00004097          	auipc	ra,0x4
    8000ad90:	558080e7          	jalr	1368(ra) # 8000f2e4 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h5ed8fa4a56812246E>
    8000ad94:	e02a                	sd	a0,0(sp)
    8000ad96:	a009                	j	8000ad98 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h7dcd9c98bf37806bE+0x88>
    8000ad98:	6502                	ld	a0,0(sp)
    8000ad9a:	65a6                	ld	a1,72(sp)
    8000ad9c:	fc2a                	sd	a0,56(sp)
    8000ad9e:	e0ae                	sd	a1,64(sp)
    }
    8000ada0:	70a6                	ld	ra,104(sp)
    8000ada2:	6165                	addi	sp,sp,112
    8000ada4:	8082                	ret

Disassembly of section .text._ZN4core5slice4iter13Iter$LT$T$GT$8as_slice17hddf2d5a72581ec8fE:

000000008000ada6 <_ZN4core5slice4iter13Iter$LT$T$GT$8as_slice17hddf2d5a72581ec8fE>:
    /// iter.next();
    /// // Now `as_slice` returns "[2, 3]":
    /// println!("{:?}", iter.as_slice());
    /// ```
    #[stable(feature = "iter_to_slice", since = "1.4.0")]
    pub fn as_slice(&self) -> &'a [T] {
    8000ada6:	7119                	addi	sp,sp,-128
    8000ada8:	fc86                	sd	ra,120(sp)
    8000adaa:	e42a                	sd	a0,8(sp)
    8000adac:	fc2a                	sd	a0,56(sp)
    8000adae:	e4aa                	sd	a0,72(sp)
            #[inline(always)]
            fn make_slice(&self) -> &'a [T] {
                // SAFETY: the iterator was created from a slice with pointer
                // `self.ptr` and length `len!(self)`. This guarantees that all
                // the prerequisites for `from_raw_parts` are fulfilled.
                unsafe { from_raw_parts(self.ptr.as_ptr(), len!(self)) }
    8000adb0:	6108                	ld	a0,0(a0)
    8000adb2:	00004097          	auipc	ra,0x4
    8000adb6:	74a080e7          	jalr	1866(ra) # 8000f4fc <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h729713db2b300d39E>
    8000adba:	85aa                	mv	a1,a0
    8000adbc:	6522                	ld	a0,8(sp)
    8000adbe:	f02e                	sd	a1,32(sp)
    8000adc0:	6108                	ld	a0,0(a0)
    8000adc2:	e82a                	sd	a0,16(sp)
    8000adc4:	e8aa                	sd	a0,80(sp)
    8000adc6:	00004097          	auipc	ra,0x4
    8000adca:	736080e7          	jalr	1846(ra) # 8000f4fc <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h729713db2b300d39E>
    8000adce:	65a2                	ld	a1,8(sp)
    8000add0:	862a                	mv	a2,a0
    8000add2:	6542                	ld	a0,16(sp)
    8000add4:	f8b2                	sd	a2,112(sp)
    8000add6:	4605                	li	a2,1
    8000add8:	ecb2                	sd	a2,88(sp)
    8000adda:	658c                	ld	a1,8(a1)
    8000addc:	ec2e                	sd	a1,24(sp)
    8000adde:	00004097          	auipc	ra,0x4
    8000ade2:	71e080e7          	jalr	1822(ra) # 8000f4fc <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h729713db2b300d39E>
    8000ade6:	65e2                	ld	a1,24(sp)
    8000ade8:	862a                	mv	a2,a0
    8000adea:	7502                	ld	a0,32(sp)
    8000adec:	8d91                	sub	a1,a1,a2
    8000adee:	f0ae                	sd	a1,96(sp)
    8000adf0:	f4ae                	sd	a1,104(sp)
    8000adf2:	e0ae                	sd	a1,64(sp)
    8000adf4:	ffffa097          	auipc	ra,0xffffa
    8000adf8:	5da080e7          	jalr	1498(ra) # 800053ce <_ZN4core5slice3raw14from_raw_parts17hf1accf0e45b69f71E>
        self.make_slice()
    8000adfc:	f42a                	sd	a0,40(sp)
    8000adfe:	f82e                	sd	a1,48(sp)
    8000ae00:	a009                	j	8000ae02 <_ZN4core5slice4iter13Iter$LT$T$GT$8as_slice17hddf2d5a72581ec8fE+0x5c>
    }
    8000ae02:	75c2                	ld	a1,48(sp)
    8000ae04:	7522                	ld	a0,40(sp)
    8000ae06:	70e6                	ld	ra,120(sp)
    8000ae08:	6109                	addi	sp,sp,128
    8000ae0a:	8082                	ret

Disassembly of section .text._ZN4core5slice4iter16IterMut$LT$T$GT$3new17h018b863ac427b524E:

000000008000ae0c <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h018b863ac427b524E>:
#[stable(feature = "rust1", since = "1.0.0")]
unsafe impl<T: Send> Send for IterMut<'_, T> {}

impl<'a, T> IterMut<'a, T> {
    #[inline]
    pub(super) fn new(slice: &'a mut [T]) -> Self {
    8000ae0c:	7119                	addi	sp,sp,-128
    8000ae0e:	fc86                	sd	ra,120(sp)
    8000ae10:	f82e                	sd	a1,48(sp)
    8000ae12:	fc2a                	sd	a0,56(sp)
    8000ae14:	f0aa                	sd	a0,96(sp)
    8000ae16:	f4ae                	sd	a1,104(sp)
        let ptr = slice.as_mut_ptr();
    8000ae18:	ffffb097          	auipc	ra,0xffffb
    8000ae1c:	874080e7          	jalr	-1932(ra) # 8000568c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h37e95d8a2d6ca634E>
    8000ae20:	85aa                	mv	a1,a0
    8000ae22:	e0ae                	sd	a1,64(sp)
    8000ae24:	f8aa                	sd	a0,112(sp)
    8000ae26:	a009                	j	8000ae28 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h018b863ac427b524E+0x1c>
        // the length, to also allows for the fast `ptr == end` check.
        //
        // See the `next_unchecked!` and `is_empty!` macros as well as the
        // `post_inc_start` method for more informations.
        unsafe {
            assume(!ptr.is_null());
    8000ae28:	6506                	ld	a0,64(sp)
    8000ae2a:	ffffb097          	auipc	ra,0xffffb
    8000ae2e:	840080e7          	jalr	-1984(ra) # 8000566a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hee9a0b1c2395b573E>
    8000ae32:	a009                	j	8000ae34 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h018b863ac427b524E+0x28>
    8000ae34:	a009                	j	8000ae36 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h018b863ac427b524E+0x2a>

            let end = if mem::size_of::<T>() == 0 {
    8000ae36:	a009                	j	8000ae38 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h018b863ac427b524E+0x2c>
    8000ae38:	4505                	li	a0,1
    8000ae3a:	ed01                	bnez	a0,8000ae52 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h018b863ac427b524E+0x46>
    8000ae3c:	a009                	j	8000ae3e <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h018b863ac427b524E+0x32>
                (ptr as *mut u8).wrapping_add(slice.len()) as *mut T
    8000ae3e:	75c2                	ld	a1,48(sp)
    8000ae40:	7562                	ld	a0,56(sp)
    8000ae42:	6606                	ld	a2,64(sp)
    8000ae44:	f032                	sd	a2,32(sp)
    8000ae46:	ffffb097          	auipc	ra,0xffffb
    8000ae4a:	850080e7          	jalr	-1968(ra) # 80005696 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h0b5a743241a7cbfaE>
    8000ae4e:	f42a                	sd	a0,40(sp)
    8000ae50:	a809                	j	8000ae62 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h018b863ac427b524E+0x56>
            } else {
                ptr.add(slice.len())
    8000ae52:	75c2                	ld	a1,48(sp)
    8000ae54:	7562                	ld	a0,56(sp)
    8000ae56:	ffffb097          	auipc	ra,0xffffb
    8000ae5a:	840080e7          	jalr	-1984(ra) # 80005696 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h0b5a743241a7cbfaE>
    8000ae5e:	ec2a                	sd	a0,24(sp)
    8000ae60:	a821                	j	8000ae78 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h018b863ac427b524E+0x6c>
                (ptr as *mut u8).wrapping_add(slice.len()) as *mut T
    8000ae62:	75a2                	ld	a1,40(sp)
    8000ae64:	7502                	ld	a0,32(sp)
    8000ae66:	ffffe097          	auipc	ra,0xffffe
    8000ae6a:	a14080e7          	jalr	-1516(ra) # 8000887a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$12wrapping_add17hef81cac2ef53321bE>
    8000ae6e:	e82a                	sd	a0,16(sp)
    8000ae70:	a009                	j	8000ae72 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h018b863ac427b524E+0x66>
    8000ae72:	6542                	ld	a0,16(sp)
    8000ae74:	ecaa                	sd	a0,88(sp)
            let end = if mem::size_of::<T>() == 0 {
    8000ae76:	a811                	j	8000ae8a <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h018b863ac427b524E+0x7e>
                ptr.add(slice.len())
    8000ae78:	65e2                	ld	a1,24(sp)
    8000ae7a:	6506                	ld	a0,64(sp)
    8000ae7c:	ffffa097          	auipc	ra,0xffffa
    8000ae80:	784080e7          	jalr	1924(ra) # 80005600 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17hffa57d7c8ffaba34E>
    8000ae84:	ecaa                	sd	a0,88(sp)
    8000ae86:	a009                	j	8000ae88 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h018b863ac427b524E+0x7c>
            let end = if mem::size_of::<T>() == 0 {
    8000ae88:	a009                	j	8000ae8a <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h018b863ac427b524E+0x7e>
            };

            Self { ptr: NonNull::new_unchecked(ptr), end, _marker: PhantomData }
    8000ae8a:	6506                	ld	a0,64(sp)
    8000ae8c:	00004097          	auipc	ra,0x4
    8000ae90:	476080e7          	jalr	1142(ra) # 8000f302 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17hd62713267129dcbeE>
    8000ae94:	e42a                	sd	a0,8(sp)
    8000ae96:	a009                	j	8000ae98 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h018b863ac427b524E+0x8c>
    8000ae98:	6522                	ld	a0,8(sp)
    8000ae9a:	65e6                	ld	a1,88(sp)
    8000ae9c:	e4aa                	sd	a0,72(sp)
    8000ae9e:	e8ae                	sd	a1,80(sp)
        }
    }
    8000aea0:	70e6                	ld	ra,120(sp)
    8000aea2:	6109                	addi	sp,sp,128
    8000aea4:	8082                	ret

Disassembly of section .text._ZN4core5slice4iter16IterMut$LT$T$GT$3new17h41c69a0e1f2809d6E:

000000008000aea6 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h41c69a0e1f2809d6E>:
    pub(super) fn new(slice: &'a mut [T]) -> Self {
    8000aea6:	7119                	addi	sp,sp,-128
    8000aea8:	fc86                	sd	ra,120(sp)
    8000aeaa:	f82e                	sd	a1,48(sp)
    8000aeac:	fc2a                	sd	a0,56(sp)
    8000aeae:	f0aa                	sd	a0,96(sp)
    8000aeb0:	f4ae                	sd	a1,104(sp)
        let ptr = slice.as_mut_ptr();
    8000aeb2:	00013097          	auipc	ra,0x13
    8000aeb6:	8f0080e7          	jalr	-1808(ra) # 8001d7a2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb34fa5c829e1d9f2E>
    8000aeba:	85aa                	mv	a1,a0
    8000aebc:	e0ae                	sd	a1,64(sp)
    8000aebe:	f8aa                	sd	a0,112(sp)
    8000aec0:	a009                	j	8000aec2 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h41c69a0e1f2809d6E+0x1c>
            assume(!ptr.is_null());
    8000aec2:	6506                	ld	a0,64(sp)
    8000aec4:	00013097          	auipc	ra,0x13
    8000aec8:	8bc080e7          	jalr	-1860(ra) # 8001d780 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h1d4bdf7317c60b96E>
    8000aecc:	a009                	j	8000aece <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h41c69a0e1f2809d6E+0x28>
    8000aece:	a009                	j	8000aed0 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h41c69a0e1f2809d6E+0x2a>
            let end = if mem::size_of::<T>() == 0 {
    8000aed0:	a009                	j	8000aed2 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h41c69a0e1f2809d6E+0x2c>
    8000aed2:	4505                	li	a0,1
    8000aed4:	ed01                	bnez	a0,8000aeec <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h41c69a0e1f2809d6E+0x46>
    8000aed6:	a009                	j	8000aed8 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h41c69a0e1f2809d6E+0x32>
                (ptr as *mut u8).wrapping_add(slice.len()) as *mut T
    8000aed8:	75c2                	ld	a1,48(sp)
    8000aeda:	7562                	ld	a0,56(sp)
    8000aedc:	6606                	ld	a2,64(sp)
    8000aede:	f032                	sd	a2,32(sp)
    8000aee0:	00013097          	auipc	ra,0x13
    8000aee4:	8cc080e7          	jalr	-1844(ra) # 8001d7ac <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h5af32af5d380fccdE>
    8000aee8:	f42a                	sd	a0,40(sp)
    8000aeea:	a809                	j	8000aefc <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h41c69a0e1f2809d6E+0x56>
                ptr.add(slice.len())
    8000aeec:	75c2                	ld	a1,48(sp)
    8000aeee:	7562                	ld	a0,56(sp)
    8000aef0:	00013097          	auipc	ra,0x13
    8000aef4:	8bc080e7          	jalr	-1860(ra) # 8001d7ac <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h5af32af5d380fccdE>
    8000aef8:	ec2a                	sd	a0,24(sp)
    8000aefa:	a821                	j	8000af12 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h41c69a0e1f2809d6E+0x6c>
                (ptr as *mut u8).wrapping_add(slice.len()) as *mut T
    8000aefc:	75a2                	ld	a1,40(sp)
    8000aefe:	7502                	ld	a0,32(sp)
    8000af00:	ffffe097          	auipc	ra,0xffffe
    8000af04:	97a080e7          	jalr	-1670(ra) # 8000887a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$12wrapping_add17hef81cac2ef53321bE>
    8000af08:	e82a                	sd	a0,16(sp)
    8000af0a:	a009                	j	8000af0c <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h41c69a0e1f2809d6E+0x66>
    8000af0c:	6542                	ld	a0,16(sp)
    8000af0e:	ecaa                	sd	a0,88(sp)
            let end = if mem::size_of::<T>() == 0 {
    8000af10:	a811                	j	8000af24 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h41c69a0e1f2809d6E+0x7e>
                ptr.add(slice.len())
    8000af12:	65e2                	ld	a1,24(sp)
    8000af14:	6506                	ld	a0,64(sp)
    8000af16:	00013097          	auipc	ra,0x13
    8000af1a:	832080e7          	jalr	-1998(ra) # 8001d748 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h3a39754d1b9c54a7E>
    8000af1e:	ecaa                	sd	a0,88(sp)
    8000af20:	a009                	j	8000af22 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h41c69a0e1f2809d6E+0x7c>
            let end = if mem::size_of::<T>() == 0 {
    8000af22:	a009                	j	8000af24 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h41c69a0e1f2809d6E+0x7e>
            Self { ptr: NonNull::new_unchecked(ptr), end, _marker: PhantomData }
    8000af24:	6506                	ld	a0,64(sp)
    8000af26:	00004097          	auipc	ra,0x4
    8000af2a:	3fa080e7          	jalr	1018(ra) # 8000f320 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17hf41e3912db402547E>
    8000af2e:	e42a                	sd	a0,8(sp)
    8000af30:	a009                	j	8000af32 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h41c69a0e1f2809d6E+0x8c>
    8000af32:	6522                	ld	a0,8(sp)
    8000af34:	65e6                	ld	a1,88(sp)
    8000af36:	e4aa                	sd	a0,72(sp)
    8000af38:	e8ae                	sd	a1,80(sp)
    }
    8000af3a:	70e6                	ld	ra,120(sp)
    8000af3c:	6109                	addi	sp,sp,128
    8000af3e:	8082                	ret

Disassembly of section .text._ZN4core5slice4iter16IterMut$LT$T$GT$3new17h8130085cf5731c78E:

000000008000af40 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h8130085cf5731c78E>:
    pub(super) fn new(slice: &'a mut [T]) -> Self {
    8000af40:	7159                	addi	sp,sp,-112
    8000af42:	f486                	sd	ra,104(sp)
    8000af44:	f02e                	sd	a1,32(sp)
    8000af46:	f42a                	sd	a0,40(sp)
    8000af48:	e8aa                	sd	a0,80(sp)
    8000af4a:	ecae                	sd	a1,88(sp)
        let ptr = slice.as_mut_ptr();
    8000af4c:	00014097          	auipc	ra,0x14
    8000af50:	64c080e7          	jalr	1612(ra) # 8001f598 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h752c0d8417c49952E>
    8000af54:	85aa                	mv	a1,a0
    8000af56:	f82e                	sd	a1,48(sp)
    8000af58:	f0aa                	sd	a0,96(sp)
    8000af5a:	a009                	j	8000af5c <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h8130085cf5731c78E+0x1c>
            assume(!ptr.is_null());
    8000af5c:	7542                	ld	a0,48(sp)
    8000af5e:	ffffe097          	auipc	ra,0xffffe
    8000af62:	9c6080e7          	jalr	-1594(ra) # 80008924 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hc49b20e03dc897f6E>
    8000af66:	a009                	j	8000af68 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h8130085cf5731c78E+0x28>
    8000af68:	a009                	j	8000af6a <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h8130085cf5731c78E+0x2a>
            let end = if mem::size_of::<T>() == 0 {
    8000af6a:	a009                	j	8000af6c <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h8130085cf5731c78E+0x2c>
    8000af6c:	4505                	li	a0,1
    8000af6e:	e911                	bnez	a0,8000af82 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h8130085cf5731c78E+0x42>
    8000af70:	a009                	j	8000af72 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h8130085cf5731c78E+0x32>
                (ptr as *mut u8).wrapping_add(slice.len()) as *mut T
    8000af72:	7582                	ld	a1,32(sp)
    8000af74:	7522                	ld	a0,40(sp)
    8000af76:	00014097          	auipc	ra,0x14
    8000af7a:	636080e7          	jalr	1590(ra) # 8001f5ac <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h040db97216f8ec10E>
    8000af7e:	ec2a                	sd	a0,24(sp)
    8000af80:	a809                	j	8000af92 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h8130085cf5731c78E+0x52>
                ptr.add(slice.len())
    8000af82:	7582                	ld	a1,32(sp)
    8000af84:	7522                	ld	a0,40(sp)
    8000af86:	00014097          	auipc	ra,0x14
    8000af8a:	626080e7          	jalr	1574(ra) # 8001f5ac <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h040db97216f8ec10E>
    8000af8e:	e82a                	sd	a0,16(sp)
    8000af90:	a821                	j	8000afa8 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h8130085cf5731c78E+0x68>
                (ptr as *mut u8).wrapping_add(slice.len()) as *mut T
    8000af92:	65e2                	ld	a1,24(sp)
    8000af94:	7542                	ld	a0,48(sp)
    8000af96:	ffffe097          	auipc	ra,0xffffe
    8000af9a:	8e4080e7          	jalr	-1820(ra) # 8000887a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$12wrapping_add17hef81cac2ef53321bE>
    8000af9e:	e42a                	sd	a0,8(sp)
    8000afa0:	a009                	j	8000afa2 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h8130085cf5731c78E+0x62>
    8000afa2:	6522                	ld	a0,8(sp)
    8000afa4:	e4aa                	sd	a0,72(sp)
            let end = if mem::size_of::<T>() == 0 {
    8000afa6:	a811                	j	8000afba <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h8130085cf5731c78E+0x7a>
                ptr.add(slice.len())
    8000afa8:	65c2                	ld	a1,16(sp)
    8000afaa:	7542                	ld	a0,48(sp)
    8000afac:	ffffe097          	auipc	ra,0xffffe
    8000afb0:	932080e7          	jalr	-1742(ra) # 800088de <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1fdb3e6f0b8b1c65E>
    8000afb4:	e4aa                	sd	a0,72(sp)
    8000afb6:	a009                	j	8000afb8 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h8130085cf5731c78E+0x78>
            let end = if mem::size_of::<T>() == 0 {
    8000afb8:	a009                	j	8000afba <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h8130085cf5731c78E+0x7a>
            Self { ptr: NonNull::new_unchecked(ptr), end, _marker: PhantomData }
    8000afba:	7542                	ld	a0,48(sp)
    8000afbc:	00004097          	auipc	ra,0x4
    8000afc0:	35a080e7          	jalr	858(ra) # 8000f316 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17he8eb4f7b6f10823eE>
    8000afc4:	e02a                	sd	a0,0(sp)
    8000afc6:	a009                	j	8000afc8 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h8130085cf5731c78E+0x88>
    8000afc8:	6502                	ld	a0,0(sp)
    8000afca:	65a6                	ld	a1,72(sp)
    8000afcc:	fc2a                	sd	a0,56(sp)
    8000afce:	e0ae                	sd	a1,64(sp)
    }
    8000afd0:	70a6                	ld	ra,104(sp)
    8000afd2:	6165                	addi	sp,sp,112
    8000afd4:	8082                	ret

Disassembly of section .text._ZN4core5slice4iter16IterMut$LT$T$GT$3new17hbe8b57feddcb3b2cE:

000000008000afd6 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17hbe8b57feddcb3b2cE>:
    pub(super) fn new(slice: &'a mut [T]) -> Self {
    8000afd6:	7119                	addi	sp,sp,-128
    8000afd8:	fc86                	sd	ra,120(sp)
    8000afda:	f82e                	sd	a1,48(sp)
    8000afdc:	fc2a                	sd	a0,56(sp)
    8000afde:	f0aa                	sd	a0,96(sp)
    8000afe0:	f4ae                	sd	a1,104(sp)
        let ptr = slice.as_mut_ptr();
    8000afe2:	00007097          	auipc	ra,0x7
    8000afe6:	a04080e7          	jalr	-1532(ra) # 800119e6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb07c6377ef535791E>
    8000afea:	85aa                	mv	a1,a0
    8000afec:	e0ae                	sd	a1,64(sp)
    8000afee:	f8aa                	sd	a0,112(sp)
    8000aff0:	a009                	j	8000aff2 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17hbe8b57feddcb3b2cE+0x1c>
            assume(!ptr.is_null());
    8000aff2:	6506                	ld	a0,64(sp)
    8000aff4:	00007097          	auipc	ra,0x7
    8000aff8:	976080e7          	jalr	-1674(ra) # 8001196a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17he6d08a4a98c1735bE>
    8000affc:	a009                	j	8000affe <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17hbe8b57feddcb3b2cE+0x28>
    8000affe:	a009                	j	8000b000 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17hbe8b57feddcb3b2cE+0x2a>
            let end = if mem::size_of::<T>() == 0 {
    8000b000:	a009                	j	8000b002 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17hbe8b57feddcb3b2cE+0x2c>
    8000b002:	4505                	li	a0,1
    8000b004:	ed01                	bnez	a0,8000b01c <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17hbe8b57feddcb3b2cE+0x46>
    8000b006:	a009                	j	8000b008 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17hbe8b57feddcb3b2cE+0x32>
                (ptr as *mut u8).wrapping_add(slice.len()) as *mut T
    8000b008:	75c2                	ld	a1,48(sp)
    8000b00a:	7562                	ld	a0,56(sp)
    8000b00c:	6606                	ld	a2,64(sp)
    8000b00e:	f032                	sd	a2,32(sp)
    8000b010:	00007097          	auipc	ra,0x7
    8000b014:	9e0080e7          	jalr	-1568(ra) # 800119f0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf08bc165152fefe5E>
    8000b018:	f42a                	sd	a0,40(sp)
    8000b01a:	a809                	j	8000b02c <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17hbe8b57feddcb3b2cE+0x56>
                ptr.add(slice.len())
    8000b01c:	75c2                	ld	a1,48(sp)
    8000b01e:	7562                	ld	a0,56(sp)
    8000b020:	00007097          	auipc	ra,0x7
    8000b024:	9d0080e7          	jalr	-1584(ra) # 800119f0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf08bc165152fefe5E>
    8000b028:	ec2a                	sd	a0,24(sp)
    8000b02a:	a821                	j	8000b042 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17hbe8b57feddcb3b2cE+0x6c>
                (ptr as *mut u8).wrapping_add(slice.len()) as *mut T
    8000b02c:	75a2                	ld	a1,40(sp)
    8000b02e:	7502                	ld	a0,32(sp)
    8000b030:	ffffe097          	auipc	ra,0xffffe
    8000b034:	84a080e7          	jalr	-1974(ra) # 8000887a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$12wrapping_add17hef81cac2ef53321bE>
    8000b038:	e82a                	sd	a0,16(sp)
    8000b03a:	a009                	j	8000b03c <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17hbe8b57feddcb3b2cE+0x66>
    8000b03c:	6542                	ld	a0,16(sp)
    8000b03e:	ecaa                	sd	a0,88(sp)
            let end = if mem::size_of::<T>() == 0 {
    8000b040:	a811                	j	8000b054 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17hbe8b57feddcb3b2cE+0x7e>
                ptr.add(slice.len())
    8000b042:	65e2                	ld	a1,24(sp)
    8000b044:	6506                	ld	a0,64(sp)
    8000b046:	00007097          	auipc	ra,0x7
    8000b04a:	8ec080e7          	jalr	-1812(ra) # 80011932 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h38f66f125a87c1b1E>
    8000b04e:	ecaa                	sd	a0,88(sp)
    8000b050:	a009                	j	8000b052 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17hbe8b57feddcb3b2cE+0x7c>
            let end = if mem::size_of::<T>() == 0 {
    8000b052:	a009                	j	8000b054 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17hbe8b57feddcb3b2cE+0x7e>
            Self { ptr: NonNull::new_unchecked(ptr), end, _marker: PhantomData }
    8000b054:	6506                	ld	a0,64(sp)
    8000b056:	00004097          	auipc	ra,0x4
    8000b05a:	2b6080e7          	jalr	694(ra) # 8000f30c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17he6e2e3c661183ac0E>
    8000b05e:	e42a                	sd	a0,8(sp)
    8000b060:	a009                	j	8000b062 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17hbe8b57feddcb3b2cE+0x8c>
    8000b062:	6522                	ld	a0,8(sp)
    8000b064:	65e6                	ld	a1,88(sp)
    8000b066:	e4aa                	sd	a0,72(sp)
    8000b068:	e8ae                	sd	a1,80(sp)
    }
    8000b06a:	70e6                	ld	ra,120(sp)
    8000b06c:	6109                	addi	sp,sp,128
    8000b06e:	8082                	ret

Disassembly of section .text._ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h4af9d22df112c9d1E:

000000008000b070 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h4af9d22df112c9d1E>:
#[stable(feature = "rust1", since = "1.0.0")]
impl<I: Iterator> IntoIterator for I {
    type Item = I::Item;
    type IntoIter = I;

    fn into_iter(self) -> I {
    8000b070:	1141                	addi	sp,sp,-16
    8000b072:	e02a                	sd	a0,0(sp)
    8000b074:	e42e                	sd	a1,8(sp)
        self
    }
    8000b076:	0141                	addi	sp,sp,16
    8000b078:	8082                	ret

Disassembly of section .text._ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17ha1082b6c43007424E:

000000008000b07a <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17ha1082b6c43007424E>:
    fn into_iter(self) -> I {
    8000b07a:	1141                	addi	sp,sp,-16
    8000b07c:	e02a                	sd	a0,0(sp)
    8000b07e:	e42e                	sd	a1,8(sp)
    }
    8000b080:	0141                	addi	sp,sp,16
    8000b082:	8082                	ret

Disassembly of section .text._ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17had1f1a546667c559E:

000000008000b084 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17had1f1a546667c559E>:
    fn into_iter(self) -> I {
    8000b084:	1141                	addi	sp,sp,-16
    8000b086:	e02a                	sd	a0,0(sp)
    8000b088:	e42e                	sd	a1,8(sp)
    }
    8000b08a:	0141                	addi	sp,sp,16
    8000b08c:	8082                	ret

Disassembly of section .text._ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha83d9fbdc7b514feE:

000000008000b08e <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha83d9fbdc7b514feE>:
        #[stable(feature = "rust1", since = "1.0.0")]
        impl<'a, T> Iterator for $name<'a, T> {
            type Item = $elem;

            #[inline]
            fn next(&mut self) -> Option<$elem> {
    8000b08e:	7159                	addi	sp,sp,-112
    8000b090:	f486                	sd	ra,104(sp)
    8000b092:	f42a                	sd	a0,40(sp)
    8000b094:	e0aa                	sd	a0,64(sp)
                // SAFETY: `assume` calls are safe since a slice's start pointer
                // must be non-null, and slices over non-ZSTs must also have a
                // non-null end pointer. The call to `next_unchecked!` is safe
                // since we check if the iterator is empty first.
                unsafe {
                    assume(!self.ptr.as_ptr().is_null());
    8000b096:	6108                	ld	a0,0(a0)
    8000b098:	00004097          	auipc	ra,0x4
    8000b09c:	46c080e7          	jalr	1132(ra) # 8000f504 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h7c6e4b893f33870bE>
    8000b0a0:	f82a                	sd	a0,48(sp)
    8000b0a2:	a009                	j	8000b0a4 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha83d9fbdc7b514feE+0x16>
    8000b0a4:	7542                	ld	a0,48(sp)
    8000b0a6:	00007097          	auipc	ra,0x7
    8000b0aa:	8c4080e7          	jalr	-1852(ra) # 8001196a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17he6d08a4a98c1735bE>
    8000b0ae:	a009                	j	8000b0b0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha83d9fbdc7b514feE+0x22>
    8000b0b0:	a009                	j	8000b0b2 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha83d9fbdc7b514feE+0x24>
                    if mem::size_of::<T>() != 0 {
    8000b0b2:	a009                	j	8000b0b4 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha83d9fbdc7b514feE+0x26>
    8000b0b4:	4501                	li	a0,0
    8000b0b6:	e909                	bnez	a0,8000b0c8 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha83d9fbdc7b514feE+0x3a>
    8000b0b8:	a009                	j	8000b0ba <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha83d9fbdc7b514feE+0x2c>
                        assume(!self.end.is_null());
    8000b0ba:	7522                	ld	a0,40(sp)
    8000b0bc:	6508                	ld	a0,8(a0)
    8000b0be:	00007097          	auipc	ra,0x7
    8000b0c2:	906080e7          	jalr	-1786(ra) # 800119c4 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17ha3fd0a02496fedc6E>
    8000b0c6:	a011                	j	8000b0ca <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha83d9fbdc7b514feE+0x3c>
                    if mem::size_of::<T>() != 0 {
    8000b0c8:	a019                	j	8000b0ce <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha83d9fbdc7b514feE+0x40>
                        assume(!self.end.is_null());
    8000b0ca:	a009                	j	8000b0cc <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha83d9fbdc7b514feE+0x3e>
                    if mem::size_of::<T>() != 0 {
    8000b0cc:	a009                	j	8000b0ce <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha83d9fbdc7b514feE+0x40>
                    }
                    if is_empty!(self) {
    8000b0ce:	7522                	ld	a0,40(sp)
    8000b0d0:	6108                	ld	a0,0(a0)
    8000b0d2:	00004097          	auipc	ra,0x4
    8000b0d6:	432080e7          	jalr	1074(ra) # 8000f504 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h7c6e4b893f33870bE>
    8000b0da:	f02a                	sd	a0,32(sp)
    8000b0dc:	a009                	j	8000b0de <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha83d9fbdc7b514feE+0x50>
    8000b0de:	7502                	ld	a0,32(sp)
    8000b0e0:	75a2                	ld	a1,40(sp)
    8000b0e2:	658c                	ld	a1,8(a1)
    8000b0e4:	00b51663          	bne	a0,a1,8000b0f0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha83d9fbdc7b514feE+0x62>
    8000b0e8:	a009                	j	8000b0ea <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha83d9fbdc7b514feE+0x5c>
    8000b0ea:	4501                	li	a0,0
                        None
    8000b0ec:	fc2a                	sd	a0,56(sp)
                    if is_empty!(self) {
    8000b0ee:	a0b9                	j	8000b13c <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha83d9fbdc7b514feE+0xae>
    8000b0f0:	7522                	ld	a0,40(sp)
    8000b0f2:	e8aa                	sd	a0,80(sp)
    8000b0f4:	4585                	li	a1,1
    8000b0f6:	e42e                	sd	a1,8(sp)
    8000b0f8:	ecae                	sd	a1,88(sp)
                    let old = self.ptr.as_ptr();
    8000b0fa:	6108                	ld	a0,0(a0)
    8000b0fc:	00004097          	auipc	ra,0x4
    8000b100:	408080e7          	jalr	1032(ra) # 8000f504 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h7c6e4b893f33870bE>
    8000b104:	85aa                	mv	a1,a0
    8000b106:	7522                	ld	a0,40(sp)
    8000b108:	e82e                	sd	a1,16(sp)
    8000b10a:	f0ae                	sd	a1,96(sp)
                    self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
    8000b10c:	6108                	ld	a0,0(a0)
    8000b10e:	00004097          	auipc	ra,0x4
    8000b112:	3f6080e7          	jalr	1014(ra) # 8000f504 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h7c6e4b893f33870bE>
    8000b116:	65a2                	ld	a1,8(sp)
    8000b118:	00007097          	auipc	ra,0x7
    8000b11c:	836080e7          	jalr	-1994(ra) # 8001194e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hc564f45fb449f47eE>
    8000b120:	00004097          	auipc	ra,0x4
    8000b124:	1ec080e7          	jalr	492(ra) # 8000f30c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17he6e2e3c661183ac0E>
    8000b128:	7622                	ld	a2,40(sp)
    8000b12a:	85aa                	mv	a1,a0
    8000b12c:	6542                	ld	a0,16(sp)
    8000b12e:	e20c                	sd	a1,0(a2)
                    old
    8000b130:	e4aa                	sd	a0,72(sp)
                    } else {
                        Some(next_unchecked!(self))
    8000b132:	ec2a                	sd	a0,24(sp)
    8000b134:	a009                	j	8000b136 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha83d9fbdc7b514feE+0xa8>
    8000b136:	6562                	ld	a0,24(sp)
    8000b138:	fc2a                	sd	a0,56(sp)
                    if is_empty!(self) {
    8000b13a:	a009                	j	8000b13c <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha83d9fbdc7b514feE+0xae>
                    }
                }
            }
    8000b13c:	7562                	ld	a0,56(sp)
    8000b13e:	70a6                	ld	ra,104(sp)
    8000b140:	6165                	addi	sp,sp,112
    8000b142:	8082                	ret

Disassembly of section .text._ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbe39990052f1389dE:

000000008000b144 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbe39990052f1389dE>:
            fn next(&mut self) -> Option<$elem> {
    8000b144:	7159                	addi	sp,sp,-112
    8000b146:	f486                	sd	ra,104(sp)
    8000b148:	f42a                	sd	a0,40(sp)
    8000b14a:	e0aa                	sd	a0,64(sp)
                    assume(!self.ptr.as_ptr().is_null());
    8000b14c:	6108                	ld	a0,0(a0)
    8000b14e:	00004097          	auipc	ra,0x4
    8000b152:	3ae080e7          	jalr	942(ra) # 8000f4fc <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h729713db2b300d39E>
    8000b156:	f82a                	sd	a0,48(sp)
    8000b158:	a009                	j	8000b15a <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbe39990052f1389dE+0x16>
    8000b15a:	7542                	ld	a0,48(sp)
    8000b15c:	00014097          	auipc	ra,0x14
    8000b160:	626080e7          	jalr	1574(ra) # 8001f782 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hba478e65ea6353f9E>
    8000b164:	a009                	j	8000b166 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbe39990052f1389dE+0x22>
    8000b166:	a009                	j	8000b168 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbe39990052f1389dE+0x24>
                    if mem::size_of::<T>() != 0 {
    8000b168:	a009                	j	8000b16a <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbe39990052f1389dE+0x26>
    8000b16a:	4501                	li	a0,0
    8000b16c:	e909                	bnez	a0,8000b17e <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbe39990052f1389dE+0x3a>
    8000b16e:	a009                	j	8000b170 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbe39990052f1389dE+0x2c>
                        assume(!self.end.is_null());
    8000b170:	7522                	ld	a0,40(sp)
    8000b172:	6508                	ld	a0,8(a0)
    8000b174:	00014097          	auipc	ra,0x14
    8000b178:	6dc080e7          	jalr	1756(ra) # 8001f850 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h309eb733b6984dd5E>
    8000b17c:	a011                	j	8000b180 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbe39990052f1389dE+0x3c>
                    if mem::size_of::<T>() != 0 {
    8000b17e:	a019                	j	8000b184 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbe39990052f1389dE+0x40>
                        assume(!self.end.is_null());
    8000b180:	a009                	j	8000b182 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbe39990052f1389dE+0x3e>
                    if mem::size_of::<T>() != 0 {
    8000b182:	a009                	j	8000b184 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbe39990052f1389dE+0x40>
                    if is_empty!(self) {
    8000b184:	7522                	ld	a0,40(sp)
    8000b186:	6108                	ld	a0,0(a0)
    8000b188:	00004097          	auipc	ra,0x4
    8000b18c:	374080e7          	jalr	884(ra) # 8000f4fc <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h729713db2b300d39E>
    8000b190:	f02a                	sd	a0,32(sp)
    8000b192:	a009                	j	8000b194 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbe39990052f1389dE+0x50>
    8000b194:	7502                	ld	a0,32(sp)
    8000b196:	75a2                	ld	a1,40(sp)
    8000b198:	658c                	ld	a1,8(a1)
    8000b19a:	00b51663          	bne	a0,a1,8000b1a6 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbe39990052f1389dE+0x62>
    8000b19e:	a009                	j	8000b1a0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbe39990052f1389dE+0x5c>
    8000b1a0:	4501                	li	a0,0
                        None
    8000b1a2:	fc2a                	sd	a0,56(sp)
                    if is_empty!(self) {
    8000b1a4:	a0b9                	j	8000b1f2 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbe39990052f1389dE+0xae>
    8000b1a6:	7522                	ld	a0,40(sp)
    8000b1a8:	e8aa                	sd	a0,80(sp)
    8000b1aa:	4585                	li	a1,1
    8000b1ac:	e42e                	sd	a1,8(sp)
    8000b1ae:	ecae                	sd	a1,88(sp)
                    let old = self.ptr.as_ptr();
    8000b1b0:	6108                	ld	a0,0(a0)
    8000b1b2:	00004097          	auipc	ra,0x4
    8000b1b6:	34a080e7          	jalr	842(ra) # 8000f4fc <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h729713db2b300d39E>
    8000b1ba:	85aa                	mv	a1,a0
    8000b1bc:	7522                	ld	a0,40(sp)
    8000b1be:	e82e                	sd	a1,16(sp)
    8000b1c0:	f0ae                	sd	a1,96(sp)
                    self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
    8000b1c2:	6108                	ld	a0,0(a0)
    8000b1c4:	00004097          	auipc	ra,0x4
    8000b1c8:	338080e7          	jalr	824(ra) # 8000f4fc <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h729713db2b300d39E>
    8000b1cc:	65a2                	ld	a1,8(sp)
    8000b1ce:	00014097          	auipc	ra,0x14
    8000b1d2:	5a0080e7          	jalr	1440(ra) # 8001f76e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb5f7a0f346747657E>
    8000b1d6:	00004097          	auipc	ra,0x4
    8000b1da:	10e080e7          	jalr	270(ra) # 8000f2e4 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h5ed8fa4a56812246E>
    8000b1de:	7622                	ld	a2,40(sp)
    8000b1e0:	85aa                	mv	a1,a0
    8000b1e2:	6542                	ld	a0,16(sp)
    8000b1e4:	e20c                	sd	a1,0(a2)
                    old
    8000b1e6:	e4aa                	sd	a0,72(sp)
                        Some(next_unchecked!(self))
    8000b1e8:	ec2a                	sd	a0,24(sp)
    8000b1ea:	a009                	j	8000b1ec <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbe39990052f1389dE+0xa8>
    8000b1ec:	6562                	ld	a0,24(sp)
    8000b1ee:	fc2a                	sd	a0,56(sp)
                    if is_empty!(self) {
    8000b1f0:	a009                	j	8000b1f2 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbe39990052f1389dE+0xae>
            }
    8000b1f2:	7562                	ld	a0,56(sp)
    8000b1f4:	70a6                	ld	ra,104(sp)
    8000b1f6:	6165                	addi	sp,sp,112
    8000b1f8:	8082                	ret

Disassembly of section .text._ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1ffaf15da7599f33E:

000000008000b1fa <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1ffaf15da7599f33E>:
            fn next(&mut self) -> Option<$elem> {
    8000b1fa:	7159                	addi	sp,sp,-112
    8000b1fc:	f486                	sd	ra,104(sp)
    8000b1fe:	f42a                	sd	a0,40(sp)
    8000b200:	e0aa                	sd	a0,64(sp)
                    assume(!self.ptr.as_ptr().is_null());
    8000b202:	6108                	ld	a0,0(a0)
    8000b204:	00004097          	auipc	ra,0x4
    8000b208:	342080e7          	jalr	834(ra) # 8000f546 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17hfb12dd33ea904ed8E>
    8000b20c:	f82a                	sd	a0,48(sp)
    8000b20e:	a009                	j	8000b210 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1ffaf15da7599f33E+0x16>
    8000b210:	7542                	ld	a0,48(sp)
    8000b212:	ffffd097          	auipc	ra,0xffffd
    8000b216:	712080e7          	jalr	1810(ra) # 80008924 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hc49b20e03dc897f6E>
    8000b21a:	a009                	j	8000b21c <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1ffaf15da7599f33E+0x22>
    8000b21c:	a009                	j	8000b21e <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1ffaf15da7599f33E+0x24>
                    if mem::size_of::<T>() != 0 {
    8000b21e:	a009                	j	8000b220 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1ffaf15da7599f33E+0x26>
    8000b220:	4501                	li	a0,0
    8000b222:	e909                	bnez	a0,8000b234 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1ffaf15da7599f33E+0x3a>
    8000b224:	a009                	j	8000b226 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1ffaf15da7599f33E+0x2c>
                        assume(!self.end.is_null());
    8000b226:	7522                	ld	a0,40(sp)
    8000b228:	6508                	ld	a0,8(a0)
    8000b22a:	ffffd097          	auipc	ra,0xffffd
    8000b22e:	6fa080e7          	jalr	1786(ra) # 80008924 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hc49b20e03dc897f6E>
    8000b232:	a011                	j	8000b236 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1ffaf15da7599f33E+0x3c>
                    if mem::size_of::<T>() != 0 {
    8000b234:	a019                	j	8000b23a <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1ffaf15da7599f33E+0x40>
                        assume(!self.end.is_null());
    8000b236:	a009                	j	8000b238 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1ffaf15da7599f33E+0x3e>
                    if mem::size_of::<T>() != 0 {
    8000b238:	a009                	j	8000b23a <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1ffaf15da7599f33E+0x40>
                    if is_empty!(self) {
    8000b23a:	7522                	ld	a0,40(sp)
    8000b23c:	6108                	ld	a0,0(a0)
    8000b23e:	00004097          	auipc	ra,0x4
    8000b242:	308080e7          	jalr	776(ra) # 8000f546 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17hfb12dd33ea904ed8E>
    8000b246:	f02a                	sd	a0,32(sp)
    8000b248:	a009                	j	8000b24a <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1ffaf15da7599f33E+0x50>
    8000b24a:	7502                	ld	a0,32(sp)
    8000b24c:	75a2                	ld	a1,40(sp)
    8000b24e:	658c                	ld	a1,8(a1)
    8000b250:	00b51663          	bne	a0,a1,8000b25c <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1ffaf15da7599f33E+0x62>
    8000b254:	a009                	j	8000b256 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1ffaf15da7599f33E+0x5c>
    8000b256:	4501                	li	a0,0
                        None
    8000b258:	fc2a                	sd	a0,56(sp)
                    if is_empty!(self) {
    8000b25a:	a0b9                	j	8000b2a8 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1ffaf15da7599f33E+0xae>
    8000b25c:	7522                	ld	a0,40(sp)
    8000b25e:	e8aa                	sd	a0,80(sp)
    8000b260:	4585                	li	a1,1
    8000b262:	e42e                	sd	a1,8(sp)
    8000b264:	ecae                	sd	a1,88(sp)
                    let old = self.ptr.as_ptr();
    8000b266:	6108                	ld	a0,0(a0)
    8000b268:	00004097          	auipc	ra,0x4
    8000b26c:	2de080e7          	jalr	734(ra) # 8000f546 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17hfb12dd33ea904ed8E>
    8000b270:	85aa                	mv	a1,a0
    8000b272:	7522                	ld	a0,40(sp)
    8000b274:	e82e                	sd	a1,16(sp)
    8000b276:	f0ae                	sd	a1,96(sp)
                    self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
    8000b278:	6108                	ld	a0,0(a0)
    8000b27a:	00004097          	auipc	ra,0x4
    8000b27e:	2cc080e7          	jalr	716(ra) # 8000f546 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17hfb12dd33ea904ed8E>
    8000b282:	65a2                	ld	a1,8(sp)
    8000b284:	ffffd097          	auipc	ra,0xffffd
    8000b288:	676080e7          	jalr	1654(ra) # 800088fa <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h07753d2a365b8ea9E>
    8000b28c:	00004097          	auipc	ra,0x4
    8000b290:	08a080e7          	jalr	138(ra) # 8000f316 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17he8eb4f7b6f10823eE>
    8000b294:	7622                	ld	a2,40(sp)
    8000b296:	85aa                	mv	a1,a0
    8000b298:	6542                	ld	a0,16(sp)
    8000b29a:	e20c                	sd	a1,0(a2)
                    old
    8000b29c:	e4aa                	sd	a0,72(sp)
                        Some(next_unchecked!(self))
    8000b29e:	ec2a                	sd	a0,24(sp)
    8000b2a0:	a009                	j	8000b2a2 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1ffaf15da7599f33E+0xa8>
    8000b2a2:	6562                	ld	a0,24(sp)
    8000b2a4:	fc2a                	sd	a0,56(sp)
                    if is_empty!(self) {
    8000b2a6:	a009                	j	8000b2a8 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1ffaf15da7599f33E+0xae>
            }
    8000b2a8:	7562                	ld	a0,56(sp)
    8000b2aa:	70a6                	ld	ra,104(sp)
    8000b2ac:	6165                	addi	sp,sp,112
    8000b2ae:	8082                	ret

Disassembly of section .text._ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17habdea9e62d8c6ddfE:

000000008000b2b0 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17habdea9e62d8c6ddfE>:
            fn next(&mut self) -> Option<$elem> {
    8000b2b0:	7159                	addi	sp,sp,-112
    8000b2b2:	f486                	sd	ra,104(sp)
    8000b2b4:	f42a                	sd	a0,40(sp)
    8000b2b6:	e0aa                	sd	a0,64(sp)
                    assume(!self.ptr.as_ptr().is_null());
    8000b2b8:	6108                	ld	a0,0(a0)
    8000b2ba:	00004097          	auipc	ra,0x4
    8000b2be:	24a080e7          	jalr	586(ra) # 8000f504 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h7c6e4b893f33870bE>
    8000b2c2:	f82a                	sd	a0,48(sp)
    8000b2c4:	a009                	j	8000b2c6 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17habdea9e62d8c6ddfE+0x16>
    8000b2c6:	7542                	ld	a0,48(sp)
    8000b2c8:	00006097          	auipc	ra,0x6
    8000b2cc:	6a2080e7          	jalr	1698(ra) # 8001196a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17he6d08a4a98c1735bE>
    8000b2d0:	a009                	j	8000b2d2 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17habdea9e62d8c6ddfE+0x22>
    8000b2d2:	a009                	j	8000b2d4 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17habdea9e62d8c6ddfE+0x24>
                    if mem::size_of::<T>() != 0 {
    8000b2d4:	a009                	j	8000b2d6 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17habdea9e62d8c6ddfE+0x26>
    8000b2d6:	4501                	li	a0,0
    8000b2d8:	e909                	bnez	a0,8000b2ea <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17habdea9e62d8c6ddfE+0x3a>
    8000b2da:	a009                	j	8000b2dc <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17habdea9e62d8c6ddfE+0x2c>
                        assume(!self.end.is_null());
    8000b2dc:	7522                	ld	a0,40(sp)
    8000b2de:	6508                	ld	a0,8(a0)
    8000b2e0:	00006097          	auipc	ra,0x6
    8000b2e4:	68a080e7          	jalr	1674(ra) # 8001196a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17he6d08a4a98c1735bE>
    8000b2e8:	a011                	j	8000b2ec <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17habdea9e62d8c6ddfE+0x3c>
                    if mem::size_of::<T>() != 0 {
    8000b2ea:	a019                	j	8000b2f0 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17habdea9e62d8c6ddfE+0x40>
                        assume(!self.end.is_null());
    8000b2ec:	a009                	j	8000b2ee <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17habdea9e62d8c6ddfE+0x3e>
                    if mem::size_of::<T>() != 0 {
    8000b2ee:	a009                	j	8000b2f0 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17habdea9e62d8c6ddfE+0x40>
                    if is_empty!(self) {
    8000b2f0:	7522                	ld	a0,40(sp)
    8000b2f2:	6108                	ld	a0,0(a0)
    8000b2f4:	00004097          	auipc	ra,0x4
    8000b2f8:	210080e7          	jalr	528(ra) # 8000f504 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h7c6e4b893f33870bE>
    8000b2fc:	f02a                	sd	a0,32(sp)
    8000b2fe:	a009                	j	8000b300 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17habdea9e62d8c6ddfE+0x50>
    8000b300:	7502                	ld	a0,32(sp)
    8000b302:	75a2                	ld	a1,40(sp)
    8000b304:	658c                	ld	a1,8(a1)
    8000b306:	00b51663          	bne	a0,a1,8000b312 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17habdea9e62d8c6ddfE+0x62>
    8000b30a:	a009                	j	8000b30c <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17habdea9e62d8c6ddfE+0x5c>
    8000b30c:	4501                	li	a0,0
                        None
    8000b30e:	fc2a                	sd	a0,56(sp)
                    if is_empty!(self) {
    8000b310:	a0b9                	j	8000b35e <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17habdea9e62d8c6ddfE+0xae>
    8000b312:	7522                	ld	a0,40(sp)
    8000b314:	e8aa                	sd	a0,80(sp)
    8000b316:	4585                	li	a1,1
    8000b318:	e42e                	sd	a1,8(sp)
    8000b31a:	ecae                	sd	a1,88(sp)
                    let old = self.ptr.as_ptr();
    8000b31c:	6108                	ld	a0,0(a0)
    8000b31e:	00004097          	auipc	ra,0x4
    8000b322:	1e6080e7          	jalr	486(ra) # 8000f504 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h7c6e4b893f33870bE>
    8000b326:	85aa                	mv	a1,a0
    8000b328:	7522                	ld	a0,40(sp)
    8000b32a:	e82e                	sd	a1,16(sp)
    8000b32c:	f0ae                	sd	a1,96(sp)
                    self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
    8000b32e:	6108                	ld	a0,0(a0)
    8000b330:	00004097          	auipc	ra,0x4
    8000b334:	1d4080e7          	jalr	468(ra) # 8000f504 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h7c6e4b893f33870bE>
    8000b338:	65a2                	ld	a1,8(sp)
    8000b33a:	00006097          	auipc	ra,0x6
    8000b33e:	614080e7          	jalr	1556(ra) # 8001194e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hc564f45fb449f47eE>
    8000b342:	00004097          	auipc	ra,0x4
    8000b346:	fca080e7          	jalr	-54(ra) # 8000f30c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17he6e2e3c661183ac0E>
    8000b34a:	7622                	ld	a2,40(sp)
    8000b34c:	85aa                	mv	a1,a0
    8000b34e:	6542                	ld	a0,16(sp)
    8000b350:	e20c                	sd	a1,0(a2)
                    old
    8000b352:	e4aa                	sd	a0,72(sp)
                        Some(next_unchecked!(self))
    8000b354:	ec2a                	sd	a0,24(sp)
    8000b356:	a009                	j	8000b358 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17habdea9e62d8c6ddfE+0xa8>
    8000b358:	6562                	ld	a0,24(sp)
    8000b35a:	fc2a                	sd	a0,56(sp)
                    if is_empty!(self) {
    8000b35c:	a009                	j	8000b35e <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17habdea9e62d8c6ddfE+0xae>
            }
    8000b35e:	7562                	ld	a0,56(sp)
    8000b360:	70a6                	ld	ra,104(sp)
    8000b362:	6165                	addi	sp,sp,112
    8000b364:	8082                	ret

Disassembly of section .text._ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb379e12fde7ef54dE:

000000008000b366 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb379e12fde7ef54dE>:
            fn next(&mut self) -> Option<$elem> {
    8000b366:	7159                	addi	sp,sp,-112
    8000b368:	f486                	sd	ra,104(sp)
    8000b36a:	f42a                	sd	a0,40(sp)
    8000b36c:	e0aa                	sd	a0,64(sp)
                    assume(!self.ptr.as_ptr().is_null());
    8000b36e:	6108                	ld	a0,0(a0)
    8000b370:	00004097          	auipc	ra,0x4
    8000b374:	1a6080e7          	jalr	422(ra) # 8000f516 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h911cddd192dc1ebbE>
    8000b378:	f82a                	sd	a0,48(sp)
    8000b37a:	a009                	j	8000b37c <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb379e12fde7ef54dE+0x16>
    8000b37c:	7542                	ld	a0,48(sp)
    8000b37e:	ffffa097          	auipc	ra,0xffffa
    8000b382:	2ec080e7          	jalr	748(ra) # 8000566a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hee9a0b1c2395b573E>
    8000b386:	a009                	j	8000b388 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb379e12fde7ef54dE+0x22>
    8000b388:	a009                	j	8000b38a <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb379e12fde7ef54dE+0x24>
                    if mem::size_of::<T>() != 0 {
    8000b38a:	a009                	j	8000b38c <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb379e12fde7ef54dE+0x26>
    8000b38c:	4501                	li	a0,0
    8000b38e:	e909                	bnez	a0,8000b3a0 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb379e12fde7ef54dE+0x3a>
    8000b390:	a009                	j	8000b392 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb379e12fde7ef54dE+0x2c>
                        assume(!self.end.is_null());
    8000b392:	7522                	ld	a0,40(sp)
    8000b394:	6508                	ld	a0,8(a0)
    8000b396:	ffffa097          	auipc	ra,0xffffa
    8000b39a:	2d4080e7          	jalr	724(ra) # 8000566a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hee9a0b1c2395b573E>
    8000b39e:	a011                	j	8000b3a2 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb379e12fde7ef54dE+0x3c>
                    if mem::size_of::<T>() != 0 {
    8000b3a0:	a019                	j	8000b3a6 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb379e12fde7ef54dE+0x40>
                        assume(!self.end.is_null());
    8000b3a2:	a009                	j	8000b3a4 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb379e12fde7ef54dE+0x3e>
                    if mem::size_of::<T>() != 0 {
    8000b3a4:	a009                	j	8000b3a6 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb379e12fde7ef54dE+0x40>
                    if is_empty!(self) {
    8000b3a6:	7522                	ld	a0,40(sp)
    8000b3a8:	6108                	ld	a0,0(a0)
    8000b3aa:	00004097          	auipc	ra,0x4
    8000b3ae:	16c080e7          	jalr	364(ra) # 8000f516 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h911cddd192dc1ebbE>
    8000b3b2:	f02a                	sd	a0,32(sp)
    8000b3b4:	a009                	j	8000b3b6 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb379e12fde7ef54dE+0x50>
    8000b3b6:	7502                	ld	a0,32(sp)
    8000b3b8:	75a2                	ld	a1,40(sp)
    8000b3ba:	658c                	ld	a1,8(a1)
    8000b3bc:	00b51663          	bne	a0,a1,8000b3c8 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb379e12fde7ef54dE+0x62>
    8000b3c0:	a009                	j	8000b3c2 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb379e12fde7ef54dE+0x5c>
    8000b3c2:	4501                	li	a0,0
                        None
    8000b3c4:	fc2a                	sd	a0,56(sp)
                    if is_empty!(self) {
    8000b3c6:	a0b9                	j	8000b414 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb379e12fde7ef54dE+0xae>
    8000b3c8:	7522                	ld	a0,40(sp)
    8000b3ca:	e8aa                	sd	a0,80(sp)
    8000b3cc:	4585                	li	a1,1
    8000b3ce:	e42e                	sd	a1,8(sp)
    8000b3d0:	ecae                	sd	a1,88(sp)
                    let old = self.ptr.as_ptr();
    8000b3d2:	6108                	ld	a0,0(a0)
    8000b3d4:	00004097          	auipc	ra,0x4
    8000b3d8:	142080e7          	jalr	322(ra) # 8000f516 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h911cddd192dc1ebbE>
    8000b3dc:	85aa                	mv	a1,a0
    8000b3de:	7522                	ld	a0,40(sp)
    8000b3e0:	e82e                	sd	a1,16(sp)
    8000b3e2:	f0ae                	sd	a1,96(sp)
                    self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
    8000b3e4:	6108                	ld	a0,0(a0)
    8000b3e6:	00004097          	auipc	ra,0x4
    8000b3ea:	130080e7          	jalr	304(ra) # 8000f516 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h911cddd192dc1ebbE>
    8000b3ee:	65a2                	ld	a1,8(sp)
    8000b3f0:	ffffa097          	auipc	ra,0xffffa
    8000b3f4:	25e080e7          	jalr	606(ra) # 8000564e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h6150def6e470518fE>
    8000b3f8:	00004097          	auipc	ra,0x4
    8000b3fc:	f0a080e7          	jalr	-246(ra) # 8000f302 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17hd62713267129dcbeE>
    8000b400:	7622                	ld	a2,40(sp)
    8000b402:	85aa                	mv	a1,a0
    8000b404:	6542                	ld	a0,16(sp)
    8000b406:	e20c                	sd	a1,0(a2)
                    old
    8000b408:	e4aa                	sd	a0,72(sp)
                        Some(next_unchecked!(self))
    8000b40a:	ec2a                	sd	a0,24(sp)
    8000b40c:	a009                	j	8000b40e <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb379e12fde7ef54dE+0xa8>
    8000b40e:	6562                	ld	a0,24(sp)
    8000b410:	fc2a                	sd	a0,56(sp)
                    if is_empty!(self) {
    8000b412:	a009                	j	8000b414 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb379e12fde7ef54dE+0xae>
            }
    8000b414:	7562                	ld	a0,56(sp)
    8000b416:	70a6                	ld	ra,104(sp)
    8000b418:	6165                	addi	sp,sp,112
    8000b41a:	8082                	ret

Disassembly of section .text._ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he7c6aa33b7e64d1cE:

000000008000b41c <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he7c6aa33b7e64d1cE>:
            fn next(&mut self) -> Option<$elem> {
    8000b41c:	7159                	addi	sp,sp,-112
    8000b41e:	f486                	sd	ra,104(sp)
    8000b420:	f42a                	sd	a0,40(sp)
    8000b422:	e0aa                	sd	a0,64(sp)
                    assume(!self.ptr.as_ptr().is_null());
    8000b424:	6108                	ld	a0,0(a0)
    8000b426:	00004097          	auipc	ra,0x4
    8000b42a:	0f8080e7          	jalr	248(ra) # 8000f51e <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h9b02cb35a46880f1E>
    8000b42e:	f82a                	sd	a0,48(sp)
    8000b430:	a009                	j	8000b432 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he7c6aa33b7e64d1cE+0x16>
    8000b432:	7542                	ld	a0,48(sp)
    8000b434:	00012097          	auipc	ra,0x12
    8000b438:	34c080e7          	jalr	844(ra) # 8001d780 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h1d4bdf7317c60b96E>
    8000b43c:	a009                	j	8000b43e <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he7c6aa33b7e64d1cE+0x22>
    8000b43e:	a009                	j	8000b440 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he7c6aa33b7e64d1cE+0x24>
                    if mem::size_of::<T>() != 0 {
    8000b440:	a009                	j	8000b442 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he7c6aa33b7e64d1cE+0x26>
    8000b442:	4501                	li	a0,0
    8000b444:	e909                	bnez	a0,8000b456 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he7c6aa33b7e64d1cE+0x3a>
    8000b446:	a009                	j	8000b448 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he7c6aa33b7e64d1cE+0x2c>
                        assume(!self.end.is_null());
    8000b448:	7522                	ld	a0,40(sp)
    8000b44a:	6508                	ld	a0,8(a0)
    8000b44c:	00012097          	auipc	ra,0x12
    8000b450:	334080e7          	jalr	820(ra) # 8001d780 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h1d4bdf7317c60b96E>
    8000b454:	a011                	j	8000b458 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he7c6aa33b7e64d1cE+0x3c>
                    if mem::size_of::<T>() != 0 {
    8000b456:	a019                	j	8000b45c <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he7c6aa33b7e64d1cE+0x40>
                        assume(!self.end.is_null());
    8000b458:	a009                	j	8000b45a <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he7c6aa33b7e64d1cE+0x3e>
                    if mem::size_of::<T>() != 0 {
    8000b45a:	a009                	j	8000b45c <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he7c6aa33b7e64d1cE+0x40>
                    if is_empty!(self) {
    8000b45c:	7522                	ld	a0,40(sp)
    8000b45e:	6108                	ld	a0,0(a0)
    8000b460:	00004097          	auipc	ra,0x4
    8000b464:	0be080e7          	jalr	190(ra) # 8000f51e <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h9b02cb35a46880f1E>
    8000b468:	f02a                	sd	a0,32(sp)
    8000b46a:	a009                	j	8000b46c <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he7c6aa33b7e64d1cE+0x50>
    8000b46c:	7502                	ld	a0,32(sp)
    8000b46e:	75a2                	ld	a1,40(sp)
    8000b470:	658c                	ld	a1,8(a1)
    8000b472:	00b51663          	bne	a0,a1,8000b47e <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he7c6aa33b7e64d1cE+0x62>
    8000b476:	a009                	j	8000b478 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he7c6aa33b7e64d1cE+0x5c>
    8000b478:	4501                	li	a0,0
                        None
    8000b47a:	fc2a                	sd	a0,56(sp)
                    if is_empty!(self) {
    8000b47c:	a0b9                	j	8000b4ca <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he7c6aa33b7e64d1cE+0xae>
    8000b47e:	7522                	ld	a0,40(sp)
    8000b480:	e8aa                	sd	a0,80(sp)
    8000b482:	4585                	li	a1,1
    8000b484:	e42e                	sd	a1,8(sp)
    8000b486:	ecae                	sd	a1,88(sp)
                    let old = self.ptr.as_ptr();
    8000b488:	6108                	ld	a0,0(a0)
    8000b48a:	00004097          	auipc	ra,0x4
    8000b48e:	094080e7          	jalr	148(ra) # 8000f51e <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h9b02cb35a46880f1E>
    8000b492:	85aa                	mv	a1,a0
    8000b494:	7522                	ld	a0,40(sp)
    8000b496:	e82e                	sd	a1,16(sp)
    8000b498:	f0ae                	sd	a1,96(sp)
                    self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
    8000b49a:	6108                	ld	a0,0(a0)
    8000b49c:	00004097          	auipc	ra,0x4
    8000b4a0:	082080e7          	jalr	130(ra) # 8000f51e <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h9b02cb35a46880f1E>
    8000b4a4:	65a2                	ld	a1,8(sp)
    8000b4a6:	00012097          	auipc	ra,0x12
    8000b4aa:	2be080e7          	jalr	702(ra) # 8001d764 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17he4f714b54e872ab3E>
    8000b4ae:	00004097          	auipc	ra,0x4
    8000b4b2:	e72080e7          	jalr	-398(ra) # 8000f320 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17hf41e3912db402547E>
    8000b4b6:	7622                	ld	a2,40(sp)
    8000b4b8:	85aa                	mv	a1,a0
    8000b4ba:	6542                	ld	a0,16(sp)
    8000b4bc:	e20c                	sd	a1,0(a2)
                    old
    8000b4be:	e4aa                	sd	a0,72(sp)
                        Some(next_unchecked!(self))
    8000b4c0:	ec2a                	sd	a0,24(sp)
    8000b4c2:	a009                	j	8000b4c4 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he7c6aa33b7e64d1cE+0xa8>
    8000b4c4:	6562                	ld	a0,24(sp)
    8000b4c6:	fc2a                	sd	a0,56(sp)
                    if is_empty!(self) {
    8000b4c8:	a009                	j	8000b4ca <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he7c6aa33b7e64d1cE+0xae>
            }
    8000b4ca:	7562                	ld	a0,56(sp)
    8000b4cc:	70a6                	ld	ra,104(sp)
    8000b4ce:	6165                	addi	sp,sp,112
    8000b4d0:	8082                	ret

Disassembly of section .text._ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8for_each17hd302585b5e4cac20E:

000000008000b4d2 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8for_each17hd302585b5e4cac20E>:

            // We override the default implementation, which uses `try_fold`,
            // because this simple implementation generates less LLVM IR and is
            // faster to compile.
            #[inline]
            fn for_each<F>(mut self, mut f: F)
    8000b4d2:	7139                	addi	sp,sp,-64
    8000b4d4:	fc06                	sd	ra,56(sp)
    8000b4d6:	e42a                	sd	a0,8(sp)
    8000b4d8:	e82e                	sd	a1,16(sp)
    8000b4da:	a009                	j	8000b4dc <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8for_each17hd302585b5e4cac20E+0xa>
    8000b4dc:	0028                	addi	a0,sp,8
            where
                Self: Sized,
                F: FnMut(Self::Item),
            {
                while let Some(x) = self.next() {
    8000b4de:	00000097          	auipc	ra,0x0
    8000b4e2:	d1c080e7          	jalr	-740(ra) # 8000b1fa <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1ffaf15da7599f33E>
    8000b4e6:	f02a                	sd	a0,32(sp)
    8000b4e8:	a009                	j	8000b4ea <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8for_each17hd302585b5e4cac20E+0x18>
    8000b4ea:	7502                	ld	a0,32(sp)
    8000b4ec:	4581                	li	a1,0
    8000b4ee:	00b51463          	bne	a0,a1,8000b4f6 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8for_each17hd302585b5e4cac20E+0x24>
    8000b4f2:	a009                	j	8000b4f4 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8for_each17hd302585b5e4cac20E+0x22>
                    f(x);
                }
            }
    8000b4f4:	a819                	j	8000b50a <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8for_each17hd302585b5e4cac20E+0x38>
                while let Some(x) = self.next() {
    8000b4f6:	7582                	ld	a1,32(sp)
    8000b4f8:	f82e                	sd	a1,48(sp)
                    f(x);
    8000b4fa:	f42e                	sd	a1,40(sp)
    8000b4fc:	0828                	addi	a0,sp,24
    8000b4fe:	00001097          	auipc	ra,0x1
    8000b502:	62c080e7          	jalr	1580(ra) # 8000cb2a <_ZN6kernel6driver11virtio_disk4Disk4init28_$u7b$$u7b$closure$u7d$$u7d$17h8a5adb868ad71917E>
    8000b506:	a009                	j	8000b508 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8for_each17hd302585b5e4cac20E+0x36>
                while let Some(x) = self.next() {
    8000b508:	bfd1                	j	8000b4dc <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8for_each17hd302585b5e4cac20E+0xa>
            }
    8000b50a:	70e2                	ld	ra,56(sp)
    8000b50c:	6121                	addi	sp,sp,64
    8000b50e:	8082                	ret

Disassembly of section .text._ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h375e002d3a518d66E:

000000008000b510 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h375e002d3a518d66E>:
        // so the call to `add` is safe.
        unsafe { ptr::slice_from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start) }
    }

    #[inline]
    unsafe fn get_unchecked_mut(self, slice: *mut [T]) -> *mut [T] {
    8000b510:	7159                	addi	sp,sp,-112
    8000b512:	f486                	sd	ra,104(sp)
    8000b514:	f036                	sd	a3,32(sp)
    8000b516:	f832                	sd	a2,48(sp)
    8000b518:	862e                	mv	a2,a1
    8000b51a:	7582                	ld	a1,32(sp)
    8000b51c:	f432                	sd	a2,40(sp)
    8000b51e:	86aa                	mv	a3,a0
    8000b520:	7542                	ld	a0,48(sp)
    8000b522:	fc36                	sd	a3,56(sp)
    8000b524:	e4b6                	sd	a3,72(sp)
    8000b526:	e8b2                	sd	a2,80(sp)
    8000b528:	ecaa                	sd	a0,88(sp)
    8000b52a:	f0ae                	sd	a1,96(sp)
        // SAFETY: see comments for `get_unchecked` above.
        unsafe {
            ptr::slice_from_raw_parts_mut(slice.as_mut_ptr().add(self.start), self.end - self.start)
    8000b52c:	00014097          	auipc	ra,0x14
    8000b530:	278080e7          	jalr	632(ra) # 8001f7a4 <_ZN4core3ptr7mut_ptr41_$LT$impl$u20$$BP$mut$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h80398cc0098c8b0fE>
    8000b534:	e0aa                	sd	a0,64(sp)
    8000b536:	a009                	j	8000b538 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h375e002d3a518d66E+0x28>
    8000b538:	75e2                	ld	a1,56(sp)
    8000b53a:	6506                	ld	a0,64(sp)
    8000b53c:	00014097          	auipc	ra,0x14
    8000b540:	1c2080e7          	jalr	450(ra) # 8001f6fe <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1d203f00cca684c1E>
    8000b544:	ec2a                	sd	a0,24(sp)
    8000b546:	a009                	j	8000b548 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h375e002d3a518d66E+0x38>
    8000b548:	6562                	ld	a0,24(sp)
    8000b54a:	75a2                	ld	a1,40(sp)
    8000b54c:	7662                	ld	a2,56(sp)
    8000b54e:	8d91                	sub	a1,a1,a2
    8000b550:	00016097          	auipc	ra,0x16
    8000b554:	258080e7          	jalr	600(ra) # 800217a8 <_ZN4core3ptr24slice_from_raw_parts_mut17h39496eba86137ee5E>
    8000b558:	e42a                	sd	a0,8(sp)
    8000b55a:	e82e                	sd	a1,16(sp)
    8000b55c:	a009                	j	8000b55e <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h375e002d3a518d66E+0x4e>
        }
    }
    8000b55e:	65c2                	ld	a1,16(sp)
    8000b560:	6522                	ld	a0,8(sp)
    8000b562:	70a6                	ld	ra,104(sp)
    8000b564:	6165                	addi	sp,sp,112
    8000b566:	8082                	ret

Disassembly of section .text._ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hbf20116633f62746E:

000000008000b568 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hbf20116633f62746E>:
        // SAFETY: `self` is checked to be valid and in bounds above.
        unsafe { &*self.get_unchecked(slice) }
    }

    #[inline]
    fn index_mut(self, slice: &mut [T]) -> &mut [T] {
    8000b568:	7159                	addi	sp,sp,-112
    8000b56a:	f486                	sd	ra,104(sp)
    8000b56c:	f03a                	sd	a4,32(sp)
    8000b56e:	f436                	sd	a3,40(sp)
    8000b570:	f832                	sd	a2,48(sp)
    8000b572:	fc2e                	sd	a1,56(sp)
    8000b574:	e0aa                	sd	a0,64(sp)
    8000b576:	e4aa                	sd	a0,72(sp)
    8000b578:	e8ae                	sd	a1,80(sp)
    8000b57a:	ecb2                	sd	a2,88(sp)
    8000b57c:	f0b6                	sd	a3,96(sp)
        if self.start > self.end {
    8000b57e:	00a5fb63          	bgeu	a1,a0,8000b594 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hbf20116633f62746E+0x2c>
    8000b582:	a009                	j	8000b584 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hbf20116633f62746E+0x1c>
            slice_index_order_fail(self.start, self.end);
    8000b584:	7602                	ld	a2,32(sp)
    8000b586:	75e2                	ld	a1,56(sp)
    8000b588:	6506                	ld	a0,64(sp)
    8000b58a:	00018097          	auipc	ra,0x18
    8000b58e:	4fa080e7          	jalr	1274(ra) # 80023a84 <_ZN4core5slice5index22slice_index_order_fail17h8c18576576dbf4e3E>
    8000b592:	0000                	unimp
        } else if self.end > slice.len() {
    8000b594:	75a2                	ld	a1,40(sp)
    8000b596:	7542                	ld	a0,48(sp)
    8000b598:	00014097          	auipc	ra,0x14
    8000b59c:	03c080e7          	jalr	60(ra) # 8001f5d4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hb06ce83b043493f3E>
    8000b5a0:	ec2a                	sd	a0,24(sp)
    8000b5a2:	a009                	j	8000b5a4 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hbf20116633f62746E+0x3c>
    8000b5a4:	6562                	ld	a0,24(sp)
    8000b5a6:	75e2                	ld	a1,56(sp)
    8000b5a8:	00b57b63          	bgeu	a0,a1,8000b5be <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hbf20116633f62746E+0x56>
    8000b5ac:	a009                	j	8000b5ae <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hbf20116633f62746E+0x46>
            slice_end_index_len_fail(self.end, slice.len());
    8000b5ae:	75a2                	ld	a1,40(sp)
    8000b5b0:	7542                	ld	a0,48(sp)
    8000b5b2:	00014097          	auipc	ra,0x14
    8000b5b6:	022080e7          	jalr	34(ra) # 8001f5d4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hb06ce83b043493f3E>
    8000b5ba:	e82a                	sd	a0,16(sp)
    8000b5bc:	a821                	j	8000b5d4 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hbf20116633f62746E+0x6c>
        }
        // SAFETY: `self` is checked to be valid and in bounds above.
        unsafe { &mut *self.get_unchecked_mut(slice) }
    8000b5be:	76a2                	ld	a3,40(sp)
    8000b5c0:	7642                	ld	a2,48(sp)
    8000b5c2:	75e2                	ld	a1,56(sp)
    8000b5c4:	6506                	ld	a0,64(sp)
    8000b5c6:	00000097          	auipc	ra,0x0
    8000b5ca:	f4a080e7          	jalr	-182(ra) # 8000b510 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h375e002d3a518d66E>
    8000b5ce:	e02a                	sd	a0,0(sp)
    8000b5d0:	e42e                	sd	a1,8(sp)
    8000b5d2:	a809                	j	8000b5e4 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hbf20116633f62746E+0x7c>
            slice_end_index_len_fail(self.end, slice.len());
    8000b5d4:	7602                	ld	a2,32(sp)
    8000b5d6:	65c2                	ld	a1,16(sp)
    8000b5d8:	7562                	ld	a0,56(sp)
    8000b5da:	00018097          	auipc	ra,0x18
    8000b5de:	46a080e7          	jalr	1130(ra) # 80023a44 <_ZN4core5slice5index24slice_end_index_len_fail17hbdcbb59c061b5014E>
    8000b5e2:	0000                	unimp
    }
    8000b5e4:	65a2                	ld	a1,8(sp)
    8000b5e6:	6502                	ld	a0,0(sp)
    8000b5e8:	70a6                	ld	ra,104(sp)
    8000b5ea:	6165                	addi	sp,sp,112
    8000b5ec:	8082                	ret

Disassembly of section .text._ZN108_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h6e1483f88545dbc6E:

000000008000b5ee <_ZN108_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h6e1483f88545dbc6E>:
    fn index(self, slice: &[T]) -> &[T] {
        (0..self.end).index(slice)
    }

    #[inline]
    fn index_mut(self, slice: &mut [T]) -> &mut [T] {
    8000b5ee:	7139                	addi	sp,sp,-64
    8000b5f0:	fc06                	sd	ra,56(sp)
    8000b5f2:	8736                	mv	a4,a3
    8000b5f4:	86b2                	mv	a3,a2
    8000b5f6:	862e                	mv	a2,a1
    8000b5f8:	85aa                	mv	a1,a0
    8000b5fa:	f02e                	sd	a1,32(sp)
    8000b5fc:	f432                	sd	a2,40(sp)
    8000b5fe:	f836                	sd	a3,48(sp)
    8000b600:	4501                	li	a0,0
        (0..self.end).index_mut(slice)
    8000b602:	e82a                	sd	a0,16(sp)
    8000b604:	ec2e                	sd	a1,24(sp)
    8000b606:	00000097          	auipc	ra,0x0
    8000b60a:	f62080e7          	jalr	-158(ra) # 8000b568 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hbf20116633f62746E>
    8000b60e:	e02a                	sd	a0,0(sp)
    8000b610:	e42e                	sd	a1,8(sp)
    8000b612:	a009                	j	8000b614 <_ZN108_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h6e1483f88545dbc6E+0x26>
    }
    8000b614:	65a2                	ld	a1,8(sp)
    8000b616:	6502                	ld	a0,0(sp)
    8000b618:	70e2                	ld	ra,56(sp)
    8000b61a:	6121                	addi	sp,sp,64
    8000b61c:	8082                	ret

Disassembly of section .text._ZN4core3ops5range25RangeInclusive$LT$Idx$GT$3new17h55e0942ec6ff79cbE:

000000008000b61e <_ZN4core3ops5range25RangeInclusive$LT$Idx$GT$3new17h55e0942ec6ff79cbE>:
    #[lang = "range_inclusive_new"]
    #[stable(feature = "inclusive_range_methods", since = "1.27.0")]
    #[inline]
    #[rustc_promotable]
    #[rustc_const_stable(feature = "const_range_new", since = "1.32.0")]
    pub const fn new(start: Idx, end: Idx) -> Self {
    8000b61e:	1101                	addi	sp,sp,-32
    8000b620:	e42e                	sd	a1,8(sp)
    8000b622:	85aa                	mv	a1,a0
    8000b624:	6522                	ld	a0,8(sp)
    8000b626:	e82a                	sd	a0,16(sp)
    8000b628:	ec32                	sd	a2,24(sp)
        Self { start, end, exhausted: false }
    8000b62a:	e188                	sd	a0,0(a1)
    8000b62c:	e590                	sd	a2,8(a1)
    8000b62e:	4501                	li	a0,0
    8000b630:	00a58823          	sb	a0,16(a1)
    }
    8000b634:	6105                	addi	sp,sp,32
    8000b636:	8082                	ret

Disassembly of section .text._ZN4core3ops5range25RangeInclusive$LT$Idx$GT$8is_empty17h217535e9c22b3affE:

000000008000b638 <_ZN4core3ops5range25RangeInclusive$LT$Idx$GT$8is_empty17h217535e9c22b3affE>:
    /// // Precise field values are unspecified here
    /// assert!(r.is_empty());
    /// ```
    #[stable(feature = "range_is_empty", since = "1.47.0")]
    #[inline]
    pub fn is_empty(&self) -> bool {
    8000b638:	7179                	addi	sp,sp,-48
    8000b63a:	f406                	sd	ra,40(sp)
    8000b63c:	e82a                	sd	a0,16(sp)
    8000b63e:	f02a                	sd	a0,32(sp)
        self.exhausted || !(self.start <= self.end)
    8000b640:	01054503          	lbu	a0,16(a0)
    8000b644:	8905                	andi	a0,a0,1
    8000b646:	4581                	li	a1,0
    8000b648:	00b50b63          	beq	a0,a1,8000b65e <_ZN4core3ops5range25RangeInclusive$LT$Idx$GT$8is_empty17h217535e9c22b3affE+0x26>
    8000b64c:	a009                	j	8000b64e <_ZN4core3ops5range25RangeInclusive$LT$Idx$GT$8is_empty17h217535e9c22b3affE+0x16>
    8000b64e:	4505                	li	a0,1
    8000b650:	00a10fa3          	sb	a0,31(sp)
    8000b654:	a831                	j	8000b670 <_ZN4core3ops5range25RangeInclusive$LT$Idx$GT$8is_empty17h217535e9c22b3affE+0x38>
    8000b656:	4501                	li	a0,0
    8000b658:	00a10fa3          	sb	a0,31(sp)
    8000b65c:	a811                	j	8000b670 <_ZN4core3ops5range25RangeInclusive$LT$Idx$GT$8is_empty17h217535e9c22b3affE+0x38>
    8000b65e:	6542                	ld	a0,16(sp)
    8000b660:	00850593          	addi	a1,a0,8
    8000b664:	00010097          	auipc	ra,0x10
    8000b668:	18a080e7          	jalr	394(ra) # 8001b7ee <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2le17hf6519ff85d133637E>
    8000b66c:	e42a                	sd	a0,8(sp)
    8000b66e:	a031                	j	8000b67a <_ZN4core3ops5range25RangeInclusive$LT$Idx$GT$8is_empty17h217535e9c22b3affE+0x42>
    }
    8000b670:	01f14503          	lbu	a0,31(sp)
    8000b674:	70a2                	ld	ra,40(sp)
    8000b676:	6145                	addi	sp,sp,48
    8000b678:	8082                	ret
    8000b67a:	6522                	ld	a0,8(sp)
    8000b67c:	4581                	li	a1,0
        self.exhausted || !(self.start <= self.end)
    8000b67e:	fcb508e3          	beq	a0,a1,8000b64e <_ZN4core3ops5range25RangeInclusive$LT$Idx$GT$8is_empty17h217535e9c22b3affE+0x16>
    8000b682:	bfd1                	j	8000b656 <_ZN4core3ops5range25RangeInclusive$LT$Idx$GT$8is_empty17h217535e9c22b3affE+0x1e>

Disassembly of section .text._ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h1068366d302d8741E:

000000008000b684 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h1068366d302d8741E>:
            (0, Some(0))
        }
    }

    #[inline]
    fn nth(&mut self, n: usize) -> Option<A> {
    8000b684:	7119                	addi	sp,sp,-128
    8000b686:	fc86                	sd	ra,120(sp)
    8000b688:	f02e                	sd	a1,32(sp)
    8000b68a:	f42a                	sd	a0,40(sp)
    8000b68c:	f4aa                	sd	a0,104(sp)
    8000b68e:	f8ae                	sd	a1,112(sp)
    8000b690:	4581                	li	a1,0
        if let Some(plus_n) = Step::forward_checked(self.start.clone(), n) {
    8000b692:	06b103a3          	sb	a1,103(sp)
    8000b696:	00012097          	auipc	ra,0x12
    8000b69a:	182080e7          	jalr	386(ra) # 8001d818 <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$usize$GT$5clone17h35e6cace0a4ed712E>
    8000b69e:	f82a                	sd	a0,48(sp)
    8000b6a0:	a009                	j	8000b6a2 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h1068366d302d8741E+0x1e>
    8000b6a2:	7582                	ld	a1,32(sp)
    8000b6a4:	7542                	ld	a0,48(sp)
    8000b6a6:	4605                	li	a2,1
    8000b6a8:	06c103a3          	sb	a2,103(sp)
    8000b6ac:	00013097          	auipc	ra,0x13
    8000b6b0:	bd0080e7          	jalr	-1072(ra) # 8001e27c <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$15forward_checked17h89a22c0b5326f750E>
    8000b6b4:	e4aa                	sd	a0,72(sp)
    8000b6b6:	e8ae                	sd	a1,80(sp)
    8000b6b8:	a009                	j	8000b6ba <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h1068366d302d8741E+0x36>
    8000b6ba:	6526                	ld	a0,72(sp)
    8000b6bc:	4581                	li	a1,0
    8000b6be:	00b51463          	bne	a0,a1,8000b6c6 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h1068366d302d8741E+0x42>
    8000b6c2:	a009                	j	8000b6c4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h1068366d302d8741E+0x40>
    8000b6c4:	a859                	j	8000b75a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h1068366d302d8741E+0xd6>
    8000b6c6:	7522                	ld	a0,40(sp)
    8000b6c8:	4581                	li	a1,0
    8000b6ca:	06b103a3          	sb	a1,103(sp)
    8000b6ce:	65c6                	ld	a1,80(sp)
    8000b6d0:	ecae                	sd	a1,88(sp)
            if plus_n < self.end {
    8000b6d2:	00850593          	addi	a1,a0,8
    8000b6d6:	08a8                	addi	a0,sp,88
    8000b6d8:	00010097          	auipc	ra,0x10
    8000b6dc:	132080e7          	jalr	306(ra) # 8001b80a <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17ha09858e1dc8f460eE>
    8000b6e0:	ec2a                	sd	a0,24(sp)
    8000b6e2:	a009                	j	8000b6e4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h1068366d302d8741E+0x60>
    8000b6e4:	6562                	ld	a0,24(sp)
    8000b6e6:	4581                	li	a1,0
    8000b6e8:	00b50a63          	beq	a0,a1,8000b6fc <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h1068366d302d8741E+0x78>
    8000b6ec:	a009                	j	8000b6ee <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h1068366d302d8741E+0x6a>
    8000b6ee:	08a8                	addi	a0,sp,88
                // SAFETY: just checked precondition
                self.start = unsafe { Step::forward_unchecked(plus_n.clone(), 1) };
    8000b6f0:	00012097          	auipc	ra,0x12
    8000b6f4:	128080e7          	jalr	296(ra) # 8001d818 <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$usize$GT$5clone17h35e6cace0a4ed712E>
    8000b6f8:	e82a                	sd	a0,16(sp)
    8000b6fa:	a011                	j	8000b6fe <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h1068366d302d8741E+0x7a>
                return Some(plus_n);
            }
        }
    8000b6fc:	a811                	j	8000b710 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h1068366d302d8741E+0x8c>
                self.start = unsafe { Step::forward_unchecked(plus_n.clone(), 1) };
    8000b6fe:	6542                	ld	a0,16(sp)
    8000b700:	4585                	li	a1,1
    8000b702:	00013097          	auipc	ra,0x13
    8000b706:	bb4080e7          	jalr	-1100(ra) # 8001e2b6 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17h4b00136ef7a8c813E>
    8000b70a:	e42a                	sd	a0,8(sp)
    8000b70c:	a009                	j	8000b70e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h1068366d302d8741E+0x8a>
    8000b70e:	a801                	j	8000b71e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h1068366d302d8741E+0x9a>
        if let Some(plus_n) = Step::forward_checked(self.start.clone(), n) {
    8000b710:	a0a9                	j	8000b75a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h1068366d302d8741E+0xd6>

        self.start = self.end.clone();
    8000b712:	a889                	j	8000b764 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h1068366d302d8741E+0xe0>
        None
    }
    8000b714:	7562                	ld	a0,56(sp)
    8000b716:	6586                	ld	a1,64(sp)
    8000b718:	70e6                	ld	ra,120(sp)
    8000b71a:	6109                	addi	sp,sp,128
    8000b71c:	8082                	ret
                self.start = unsafe { Step::forward_unchecked(plus_n.clone(), 1) };
    8000b71e:	6522                	ld	a0,8(sp)
    8000b720:	75a2                	ld	a1,40(sp)
    8000b722:	e188                	sd	a0,0(a1)
                return Some(plus_n);
    8000b724:	6566                	ld	a0,88(sp)
    8000b726:	e0aa                	sd	a0,64(sp)
    8000b728:	4505                	li	a0,1
    8000b72a:	fc2a                	sd	a0,56(sp)
    8000b72c:	4501                	li	a0,0
        }
    8000b72e:	06a103a3          	sb	a0,103(sp)
    }
    8000b732:	b7cd                	j	8000b714 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h1068366d302d8741E+0x90>
    8000b734:	7522                	ld	a0,40(sp)
    8000b736:	4581                	li	a1,0
        }
    8000b738:	06b103a3          	sb	a1,103(sp)
        self.start = self.end.clone();
    8000b73c:	0521                	addi	a0,a0,8
    8000b73e:	00012097          	auipc	ra,0x12
    8000b742:	0da080e7          	jalr	218(ra) # 8001d818 <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$usize$GT$5clone17h35e6cace0a4ed712E>
    8000b746:	e02a                	sd	a0,0(sp)
    8000b748:	b7e9                	j	8000b712 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h1068366d302d8741E+0x8e>
        }
    8000b74a:	06714503          	lbu	a0,103(sp)
    8000b74e:	8905                	andi	a0,a0,1
    8000b750:	4581                	li	a1,0
    8000b752:	feb501e3          	beq	a0,a1,8000b734 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h1068366d302d8741E+0xb0>
    8000b756:	a009                	j	8000b758 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h1068366d302d8741E+0xd4>
    8000b758:	bff1                	j	8000b734 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h1068366d302d8741E+0xb0>
    8000b75a:	6526                	ld	a0,72(sp)
    8000b75c:	4581                	li	a1,0
    8000b75e:	feb516e3          	bne	a0,a1,8000b74a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h1068366d302d8741E+0xc6>
    8000b762:	bfc9                	j	8000b734 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h1068366d302d8741E+0xb0>
        self.start = self.end.clone();
    8000b764:	6502                	ld	a0,0(sp)
    8000b766:	75a2                	ld	a1,40(sp)
    8000b768:	e188                	sd	a0,0(a1)
    8000b76a:	4501                	li	a0,0
        None
    8000b76c:	fc2a                	sd	a0,56(sp)
    }
    8000b76e:	b75d                	j	8000b714 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h1068366d302d8741E+0x90>

Disassembly of section .text._ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h3de1e189a1a61c83E:

000000008000b770 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h3de1e189a1a61c83E>:
    fn nth(&mut self, n: usize) -> Option<A> {
    8000b770:	7159                	addi	sp,sp,-112
    8000b772:	f486                	sd	ra,104(sp)
    8000b774:	f42e                	sd	a1,40(sp)
    8000b776:	f82a                	sd	a0,48(sp)
    8000b778:	ecaa                	sd	a0,88(sp)
    8000b77a:	f0ae                	sd	a1,96(sp)
    8000b77c:	4581                	li	a1,0
        if let Some(plus_n) = Step::forward_checked(self.start.clone(), n) {
    8000b77e:	04b10ba3          	sb	a1,87(sp)
    8000b782:	00012097          	auipc	ra,0x12
    8000b786:	080080e7          	jalr	128(ra) # 8001d802 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17ha1019ce9fdc4d620E>
    8000b78a:	fc2a                	sd	a0,56(sp)
    8000b78c:	a009                	j	8000b78e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h3de1e189a1a61c83E+0x1e>
    8000b78e:	75a2                	ld	a1,40(sp)
    8000b790:	7562                	ld	a0,56(sp)
    8000b792:	4605                	li	a2,1
    8000b794:	04c10ba3          	sb	a2,87(sp)
    8000b798:	00013097          	auipc	ra,0x13
    8000b79c:	a74080e7          	jalr	-1420(ra) # 8001e20c <_ZN47_$LT$u32$u20$as$u20$core..iter..range..Step$GT$15forward_checked17h56207e7d47bfb4e6E>
    8000b7a0:	c4aa                	sw	a0,72(sp)
    8000b7a2:	c6ae                	sw	a1,76(sp)
    8000b7a4:	a009                	j	8000b7a6 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h3de1e189a1a61c83E+0x36>
    8000b7a6:	4526                	lw	a0,72(sp)
    8000b7a8:	4581                	li	a1,0
    8000b7aa:	00b51463          	bne	a0,a1,8000b7b2 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h3de1e189a1a61c83E+0x42>
    8000b7ae:	a009                	j	8000b7b0 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h3de1e189a1a61c83E+0x40>
    8000b7b0:	a859                	j	8000b846 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h3de1e189a1a61c83E+0xd6>
    8000b7b2:	7542                	ld	a0,48(sp)
    8000b7b4:	4581                	li	a1,0
    8000b7b6:	04b10ba3          	sb	a1,87(sp)
    8000b7ba:	45b6                	lw	a1,76(sp)
    8000b7bc:	c8ae                	sw	a1,80(sp)
            if plus_n < self.end {
    8000b7be:	00450593          	addi	a1,a0,4
    8000b7c2:	0888                	addi	a0,sp,80
    8000b7c4:	00010097          	auipc	ra,0x10
    8000b7c8:	ff0080e7          	jalr	-16(ra) # 8001b7b4 <_ZN4core3cmp5impls55_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u32$GT$2lt17h9cf9ff1045241cdfE>
    8000b7cc:	f02a                	sd	a0,32(sp)
    8000b7ce:	a009                	j	8000b7d0 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h3de1e189a1a61c83E+0x60>
    8000b7d0:	7502                	ld	a0,32(sp)
    8000b7d2:	4581                	li	a1,0
    8000b7d4:	00b50a63          	beq	a0,a1,8000b7e8 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h3de1e189a1a61c83E+0x78>
    8000b7d8:	a009                	j	8000b7da <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h3de1e189a1a61c83E+0x6a>
    8000b7da:	0888                	addi	a0,sp,80
                self.start = unsafe { Step::forward_unchecked(plus_n.clone(), 1) };
    8000b7dc:	00012097          	auipc	ra,0x12
    8000b7e0:	026080e7          	jalr	38(ra) # 8001d802 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17ha1019ce9fdc4d620E>
    8000b7e4:	ec2a                	sd	a0,24(sp)
    8000b7e6:	a011                	j	8000b7ea <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h3de1e189a1a61c83E+0x7a>
        }
    8000b7e8:	a811                	j	8000b7fc <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h3de1e189a1a61c83E+0x8c>
                self.start = unsafe { Step::forward_unchecked(plus_n.clone(), 1) };
    8000b7ea:	6562                	ld	a0,24(sp)
    8000b7ec:	4585                	li	a1,1
    8000b7ee:	00013097          	auipc	ra,0x13
    8000b7f2:	a72080e7          	jalr	-1422(ra) # 8001e260 <_ZN47_$LT$u32$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17hd82fe8ce42e2d29dE>
    8000b7f6:	e82a                	sd	a0,16(sp)
    8000b7f8:	a009                	j	8000b7fa <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h3de1e189a1a61c83E+0x8a>
    8000b7fa:	a801                	j	8000b80a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h3de1e189a1a61c83E+0x9a>
        if let Some(plus_n) = Step::forward_checked(self.start.clone(), n) {
    8000b7fc:	a0a9                	j	8000b846 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h3de1e189a1a61c83E+0xd6>
        self.start = self.end.clone();
    8000b7fe:	a889                	j	8000b850 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h3de1e189a1a61c83E+0xe0>
    }
    8000b800:	4506                	lw	a0,64(sp)
    8000b802:	4596                	lw	a1,68(sp)
    8000b804:	70a6                	ld	ra,104(sp)
    8000b806:	6165                	addi	sp,sp,112
    8000b808:	8082                	ret
                self.start = unsafe { Step::forward_unchecked(plus_n.clone(), 1) };
    8000b80a:	6542                	ld	a0,16(sp)
    8000b80c:	75c2                	ld	a1,48(sp)
    8000b80e:	c188                	sw	a0,0(a1)
                return Some(plus_n);
    8000b810:	4546                	lw	a0,80(sp)
    8000b812:	c2aa                	sw	a0,68(sp)
    8000b814:	4505                	li	a0,1
    8000b816:	c0aa                	sw	a0,64(sp)
    8000b818:	4501                	li	a0,0
        }
    8000b81a:	04a10ba3          	sb	a0,87(sp)
    }
    8000b81e:	b7cd                	j	8000b800 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h3de1e189a1a61c83E+0x90>
    8000b820:	7542                	ld	a0,48(sp)
    8000b822:	4581                	li	a1,0
        }
    8000b824:	04b10ba3          	sb	a1,87(sp)
        self.start = self.end.clone();
    8000b828:	0511                	addi	a0,a0,4
    8000b82a:	00012097          	auipc	ra,0x12
    8000b82e:	fd8080e7          	jalr	-40(ra) # 8001d802 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17ha1019ce9fdc4d620E>
    8000b832:	e42a                	sd	a0,8(sp)
    8000b834:	b7e9                	j	8000b7fe <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h3de1e189a1a61c83E+0x8e>
        }
    8000b836:	05714503          	lbu	a0,87(sp)
    8000b83a:	8905                	andi	a0,a0,1
    8000b83c:	4581                	li	a1,0
    8000b83e:	feb501e3          	beq	a0,a1,8000b820 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h3de1e189a1a61c83E+0xb0>
    8000b842:	a009                	j	8000b844 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h3de1e189a1a61c83E+0xd4>
    8000b844:	bff1                	j	8000b820 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h3de1e189a1a61c83E+0xb0>
    8000b846:	4526                	lw	a0,72(sp)
    8000b848:	4581                	li	a1,0
    8000b84a:	feb516e3          	bne	a0,a1,8000b836 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h3de1e189a1a61c83E+0xc6>
    8000b84e:	bfc9                	j	8000b820 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h3de1e189a1a61c83E+0xb0>
        self.start = self.end.clone();
    8000b850:	6522                	ld	a0,8(sp)
    8000b852:	75c2                	ld	a1,48(sp)
    8000b854:	c188                	sw	a0,0(a1)
    8000b856:	4501                	li	a0,0
        None
    8000b858:	c0aa                	sw	a0,64(sp)
    }
    8000b85a:	b75d                	j	8000b800 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h3de1e189a1a61c83E+0x90>

Disassembly of section .text._ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h1063a80d56ceadabE:

000000008000b85c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h1063a80d56ceadabE>:
    fn next(&mut self) -> Option<A> {
    8000b85c:	715d                	addi	sp,sp,-80
    8000b85e:	e486                	sd	ra,72(sp)
    8000b860:	f02a                	sd	a0,32(sp)
    8000b862:	fc2a                	sd	a0,56(sp)
        if self.start < self.end {
    8000b864:	00250593          	addi	a1,a0,2
    8000b868:	00010097          	auipc	ra,0x10
    8000b86c:	f36080e7          	jalr	-202(ra) # 8001b79e <_ZN4core3cmp5impls55_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u16$GT$2lt17h2ba0f37fe46e7bafE>
    8000b870:	f42a                	sd	a0,40(sp)
    8000b872:	a009                	j	8000b874 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h1063a80d56ceadabE+0x18>
    8000b874:	7522                	ld	a0,40(sp)
    8000b876:	4581                	li	a1,0
    8000b878:	00b50a63          	beq	a0,a1,8000b88c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h1063a80d56ceadabE+0x30>
    8000b87c:	a009                	j	8000b87e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h1063a80d56ceadabE+0x22>
            let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };
    8000b87e:	7502                	ld	a0,32(sp)
    8000b880:	00012097          	auipc	ra,0x12
    8000b884:	f76080e7          	jalr	-138(ra) # 8001d7f6 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u16$GT$5clone17h7947cab6b7dc7abbE>
    8000b888:	ec2a                	sd	a0,24(sp)
    8000b88a:	a029                	j	8000b894 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h1063a80d56ceadabE+0x38>
    8000b88c:	4501                	li	a0,0
            None
    8000b88e:	02a11823          	sh	a0,48(sp)
        if self.start < self.end {
    8000b892:	a81d                	j	8000b8c8 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h1063a80d56ceadabE+0x6c>
            let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };
    8000b894:	6562                	ld	a0,24(sp)
    8000b896:	4585                	li	a1,1
    8000b898:	00013097          	auipc	ra,0x13
    8000b89c:	956080e7          	jalr	-1706(ra) # 8001e1ee <_ZN47_$LT$u16$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17h3535906832610659E>
    8000b8a0:	85aa                	mv	a1,a0
    8000b8a2:	e82e                	sd	a1,16(sp)
    8000b8a4:	04a11323          	sh	a0,70(sp)
    8000b8a8:	a009                	j	8000b8aa <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h1063a80d56ceadabE+0x4e>
            Some(mem::replace(&mut self.start, n))
    8000b8aa:	65c2                	ld	a1,16(sp)
    8000b8ac:	7502                	ld	a0,32(sp)
    8000b8ae:	00012097          	auipc	ra,0x12
    8000b8b2:	9da080e7          	jalr	-1574(ra) # 8001d288 <_ZN4core3mem7replace17h57a15db6942c9267E>
    8000b8b6:	e42a                	sd	a0,8(sp)
    8000b8b8:	a009                	j	8000b8ba <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h1063a80d56ceadabE+0x5e>
    8000b8ba:	6522                	ld	a0,8(sp)
    8000b8bc:	02a11923          	sh	a0,50(sp)
    8000b8c0:	4505                	li	a0,1
    8000b8c2:	02a11823          	sh	a0,48(sp)
        if self.start < self.end {
    8000b8c6:	a009                	j	8000b8c8 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h1063a80d56ceadabE+0x6c>
    }
    8000b8c8:	03011503          	lh	a0,48(sp)
    8000b8cc:	03211583          	lh	a1,50(sp)
    8000b8d0:	60a6                	ld	ra,72(sp)
    8000b8d2:	6161                	addi	sp,sp,80
    8000b8d4:	8082                	ret

Disassembly of section .text._ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17he2f0092c6efc86cdE:

000000008000b8d6 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17he2f0092c6efc86cdE>:
    fn next(&mut self) -> Option<A> {
    8000b8d6:	715d                	addi	sp,sp,-80
    8000b8d8:	e486                	sd	ra,72(sp)
    8000b8da:	f02a                	sd	a0,32(sp)
    8000b8dc:	fc2a                	sd	a0,56(sp)
        if self.start < self.end {
    8000b8de:	00450593          	addi	a1,a0,4
    8000b8e2:	00010097          	auipc	ra,0x10
    8000b8e6:	ed2080e7          	jalr	-302(ra) # 8001b7b4 <_ZN4core3cmp5impls55_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u32$GT$2lt17h9cf9ff1045241cdfE>
    8000b8ea:	f42a                	sd	a0,40(sp)
    8000b8ec:	a009                	j	8000b8ee <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17he2f0092c6efc86cdE+0x18>
    8000b8ee:	7522                	ld	a0,40(sp)
    8000b8f0:	4581                	li	a1,0
    8000b8f2:	00b50a63          	beq	a0,a1,8000b906 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17he2f0092c6efc86cdE+0x30>
    8000b8f6:	a009                	j	8000b8f8 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17he2f0092c6efc86cdE+0x22>
            let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };
    8000b8f8:	7502                	ld	a0,32(sp)
    8000b8fa:	00012097          	auipc	ra,0x12
    8000b8fe:	f08080e7          	jalr	-248(ra) # 8001d802 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17ha1019ce9fdc4d620E>
    8000b902:	ec2a                	sd	a0,24(sp)
    8000b904:	a021                	j	8000b90c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17he2f0092c6efc86cdE+0x36>
    8000b906:	4501                	li	a0,0
            None
    8000b908:	d82a                	sw	a0,48(sp)
        if self.start < self.end {
    8000b90a:	a805                	j	8000b93a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17he2f0092c6efc86cdE+0x64>
            let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };
    8000b90c:	6562                	ld	a0,24(sp)
    8000b90e:	4585                	li	a1,1
    8000b910:	00013097          	auipc	ra,0x13
    8000b914:	950080e7          	jalr	-1712(ra) # 8001e260 <_ZN47_$LT$u32$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17hd82fe8ce42e2d29dE>
    8000b918:	85aa                	mv	a1,a0
    8000b91a:	e82e                	sd	a1,16(sp)
    8000b91c:	c2aa                	sw	a0,68(sp)
    8000b91e:	a009                	j	8000b920 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17he2f0092c6efc86cdE+0x4a>
            Some(mem::replace(&mut self.start, n))
    8000b920:	65c2                	ld	a1,16(sp)
    8000b922:	7502                	ld	a0,32(sp)
    8000b924:	00012097          	auipc	ra,0x12
    8000b928:	ab6080e7          	jalr	-1354(ra) # 8001d3da <_ZN4core3mem7replace17hcd75ca48f5a8a8f5E>
    8000b92c:	e42a                	sd	a0,8(sp)
    8000b92e:	a009                	j	8000b930 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17he2f0092c6efc86cdE+0x5a>
    8000b930:	6522                	ld	a0,8(sp)
    8000b932:	da2a                	sw	a0,52(sp)
    8000b934:	4505                	li	a0,1
    8000b936:	d82a                	sw	a0,48(sp)
        if self.start < self.end {
    8000b938:	a009                	j	8000b93a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17he2f0092c6efc86cdE+0x64>
    }
    8000b93a:	5542                	lw	a0,48(sp)
    8000b93c:	55d2                	lw	a1,52(sp)
    8000b93e:	60a6                	ld	ra,72(sp)
    8000b940:	6161                	addi	sp,sp,80
    8000b942:	8082                	ret

Disassembly of section .text._ZN4core4iter5range125_$LT$impl$u20$core..iter..traits..double_ended..DoubleEndedIterator$u20$for$u20$core..ops..range..RangeInclusive$LT$A$GT$$GT$9next_back17h6e80df4b43a95866E:

000000008000b944 <_ZN4core4iter5range125_$LT$impl$u20$core..iter..traits..double_ended..DoubleEndedIterator$u20$for$u20$core..ops..range..RangeInclusive$LT$A$GT$$GT$9next_back17h6e80df4b43a95866E>:
}

#[stable(feature = "inclusive_range", since = "1.26.0")]
impl<A: Step> DoubleEndedIterator for ops::RangeInclusive<A> {
    #[inline]
    fn next_back(&mut self) -> Option<A> {
    8000b944:	711d                	addi	sp,sp,-96
    8000b946:	ec86                	sd	ra,88(sp)
    8000b948:	ec2a                	sd	a0,24(sp)
    8000b94a:	e0aa                	sd	a0,64(sp)
        if self.is_empty() {
    8000b94c:	00000097          	auipc	ra,0x0
    8000b950:	cec080e7          	jalr	-788(ra) # 8000b638 <_ZN4core3ops5range25RangeInclusive$LT$Idx$GT$8is_empty17h217535e9c22b3affE>
    8000b954:	f02a                	sd	a0,32(sp)
    8000b956:	a009                	j	8000b958 <_ZN4core4iter5range125_$LT$impl$u20$core..iter..traits..double_ended..DoubleEndedIterator$u20$for$u20$core..ops..range..RangeInclusive$LT$A$GT$$GT$9next_back17h6e80df4b43a95866E+0x14>
    8000b958:	7502                	ld	a0,32(sp)
    8000b95a:	4581                	li	a1,0
    8000b95c:	00b50663          	beq	a0,a1,8000b968 <_ZN4core4iter5range125_$LT$impl$u20$core..iter..traits..double_ended..DoubleEndedIterator$u20$for$u20$core..ops..range..RangeInclusive$LT$A$GT$$GT$9next_back17h6e80df4b43a95866E+0x24>
    8000b960:	a009                	j	8000b962 <_ZN4core4iter5range125_$LT$impl$u20$core..iter..traits..double_ended..DoubleEndedIterator$u20$for$u20$core..ops..range..RangeInclusive$LT$A$GT$$GT$9next_back17h6e80df4b43a95866E+0x1e>
    8000b962:	4501                	li	a0,0
            return None;
    8000b964:	f42a                	sd	a0,40(sp)
            mem::replace(&mut self.end, n)
        } else {
            self.exhausted = true;
            self.end.clone()
        })
    }
    8000b966:	a8bd                	j	8000b9e4 <_ZN4core4iter5range125_$LT$impl$u20$core..iter..traits..double_ended..DoubleEndedIterator$u20$for$u20$core..ops..range..RangeInclusive$LT$A$GT$$GT$9next_back17h6e80df4b43a95866E+0xa0>
        let is_iterating = self.start < self.end;
    8000b968:	6562                	ld	a0,24(sp)
    8000b96a:	00850593          	addi	a1,a0,8
    8000b96e:	00010097          	auipc	ra,0x10
    8000b972:	e9c080e7          	jalr	-356(ra) # 8001b80a <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17ha09858e1dc8f460eE>
    8000b976:	85aa                	mv	a1,a0
    8000b978:	e82e                	sd	a1,16(sp)
    8000b97a:	04a107a3          	sb	a0,79(sp)
    8000b97e:	a009                	j	8000b980 <_ZN4core4iter5range125_$LT$impl$u20$core..iter..traits..double_ended..DoubleEndedIterator$u20$for$u20$core..ops..range..RangeInclusive$LT$A$GT$$GT$9next_back17h6e80df4b43a95866E+0x3c>
    8000b980:	6542                	ld	a0,16(sp)
    8000b982:	4581                	li	a1,0
        Some(if is_iterating {
    8000b984:	00b50b63          	beq	a0,a1,8000b99a <_ZN4core4iter5range125_$LT$impl$u20$core..iter..traits..double_ended..DoubleEndedIterator$u20$for$u20$core..ops..range..RangeInclusive$LT$A$GT$$GT$9next_back17h6e80df4b43a95866E+0x56>
    8000b988:	a009                	j	8000b98a <_ZN4core4iter5range125_$LT$impl$u20$core..iter..traits..double_ended..DoubleEndedIterator$u20$for$u20$core..ops..range..RangeInclusive$LT$A$GT$$GT$9next_back17h6e80df4b43a95866E+0x46>
            let n = unsafe { Step::backward_unchecked(self.end.clone(), 1) };
    8000b98a:	6562                	ld	a0,24(sp)
    8000b98c:	0521                	addi	a0,a0,8
    8000b98e:	00012097          	auipc	ra,0x12
    8000b992:	e8a080e7          	jalr	-374(ra) # 8001d818 <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$usize$GT$5clone17h35e6cace0a4ed712E>
    8000b996:	e42a                	sd	a0,8(sp)
    8000b998:	a821                	j	8000b9b0 <_ZN4core4iter5range125_$LT$impl$u20$core..iter..traits..double_ended..DoubleEndedIterator$u20$for$u20$core..ops..range..RangeInclusive$LT$A$GT$$GT$9next_back17h6e80df4b43a95866E+0x6c>
    8000b99a:	6562                	ld	a0,24(sp)
    8000b99c:	4585                	li	a1,1
            self.exhausted = true;
    8000b99e:	00b50823          	sb	a1,16(a0)
            self.end.clone()
    8000b9a2:	0521                	addi	a0,a0,8
    8000b9a4:	00012097          	auipc	ra,0x12
    8000b9a8:	e74080e7          	jalr	-396(ra) # 8001d818 <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$usize$GT$5clone17h35e6cace0a4ed712E>
    8000b9ac:	fc2a                	sd	a0,56(sp)
    8000b9ae:	a02d                	j	8000b9d8 <_ZN4core4iter5range125_$LT$impl$u20$core..iter..traits..double_ended..DoubleEndedIterator$u20$for$u20$core..ops..range..RangeInclusive$LT$A$GT$$GT$9next_back17h6e80df4b43a95866E+0x94>
            let n = unsafe { Step::backward_unchecked(self.end.clone(), 1) };
    8000b9b0:	6522                	ld	a0,8(sp)
    8000b9b2:	4585                	li	a1,1
    8000b9b4:	00013097          	auipc	ra,0x13
    8000b9b8:	91e080e7          	jalr	-1762(ra) # 8001e2d2 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$18backward_unchecked17h149195b805b2849bE>
    8000b9bc:	85aa                	mv	a1,a0
    8000b9be:	e02e                	sd	a1,0(sp)
    8000b9c0:	e8aa                	sd	a0,80(sp)
    8000b9c2:	a009                	j	8000b9c4 <_ZN4core4iter5range125_$LT$impl$u20$core..iter..traits..double_ended..DoubleEndedIterator$u20$for$u20$core..ops..range..RangeInclusive$LT$A$GT$$GT$9next_back17h6e80df4b43a95866E+0x80>
            mem::replace(&mut self.end, n)
    8000b9c4:	6582                	ld	a1,0(sp)
    8000b9c6:	6562                	ld	a0,24(sp)
    8000b9c8:	0521                	addi	a0,a0,8
    8000b9ca:	00014097          	auipc	ra,0x14
    8000b9ce:	ed8080e7          	jalr	-296(ra) # 8001f8a2 <_ZN4core3mem7replace17h718d2b5d4e2666b3E>
    8000b9d2:	fc2a                	sd	a0,56(sp)
    8000b9d4:	a009                	j	8000b9d6 <_ZN4core4iter5range125_$LT$impl$u20$core..iter..traits..double_ended..DoubleEndedIterator$u20$for$u20$core..ops..range..RangeInclusive$LT$A$GT$$GT$9next_back17h6e80df4b43a95866E+0x92>
        Some(if is_iterating {
    8000b9d6:	a011                	j	8000b9da <_ZN4core4iter5range125_$LT$impl$u20$core..iter..traits..double_ended..DoubleEndedIterator$u20$for$u20$core..ops..range..RangeInclusive$LT$A$GT$$GT$9next_back17h6e80df4b43a95866E+0x96>
    8000b9d8:	a009                	j	8000b9da <_ZN4core4iter5range125_$LT$impl$u20$core..iter..traits..double_ended..DoubleEndedIterator$u20$for$u20$core..ops..range..RangeInclusive$LT$A$GT$$GT$9next_back17h6e80df4b43a95866E+0x96>
    8000b9da:	7562                	ld	a0,56(sp)
    8000b9dc:	f82a                	sd	a0,48(sp)
    8000b9de:	4505                	li	a0,1
    8000b9e0:	f42a                	sd	a0,40(sp)
    }
    8000b9e2:	a009                	j	8000b9e4 <_ZN4core4iter5range125_$LT$impl$u20$core..iter..traits..double_ended..DoubleEndedIterator$u20$for$u20$core..ops..range..RangeInclusive$LT$A$GT$$GT$9next_back17h6e80df4b43a95866E+0xa0>
    8000b9e4:	7522                	ld	a0,40(sp)
    8000b9e6:	75c2                	ld	a1,48(sp)
    8000b9e8:	60e6                	ld	ra,88(sp)
    8000b9ea:	6125                	addi	sp,sp,96
    8000b9ec:	8082                	ret

Disassembly of section .text._ZN4core4iter6traits8iterator8Iterator3rev17h6d9067942ad94ebeE:

000000008000b9ee <_ZN4core4iter6traits8iterator8Iterator3rev17h6d9067942ad94ebeE>:
    fn rev(self) -> Rev<Self>
    8000b9ee:	1101                	addi	sp,sp,-32
        Rev::new(self)
    8000b9f0:	ec06                	sd	ra,24(sp)
    8000b9f2:	6990                	ld	a2,16(a1)
    8000b9f4:	e832                	sd	a2,16(sp)
    8000b9f6:	6590                	ld	a2,8(a1)
    8000b9f8:	e432                	sd	a2,8(sp)
    8000b9fa:	618c                	ld	a1,0(a1)
    8000b9fc:	e02e                	sd	a1,0(sp)
    8000b9fe:	858a                	mv	a1,sp
    8000ba00:	00010097          	auipc	ra,0x10
    8000ba04:	e1c080e7          	jalr	-484(ra) # 8001b81c <_ZN4core4iter8adapters3rev12Rev$LT$T$GT$3new17h2d10195152fc735dE>
    8000ba08:	a009                	j	8000ba0a <_ZN4core4iter6traits8iterator8Iterator3rev17h6d9067942ad94ebeE+0x1c>
    }
    8000ba0a:	60e2                	ld	ra,24(sp)
    8000ba0c:	6105                	addi	sp,sp,32
    8000ba0e:	8082                	ret

Disassembly of section .text._ZN4core4iter6traits8iterator8Iterator7step_by17ha7dfda23787d2a26E:

000000008000ba10 <_ZN4core4iter6traits8iterator8Iterator7step_by17ha7dfda23787d2a26E>:
    fn step_by(self, step: usize) -> StepBy<Self>
    8000ba10:	1101                	addi	sp,sp,-32
    8000ba12:	ec06                	sd	ra,24(sp)
    8000ba14:	c42e                	sw	a1,8(sp)
    8000ba16:	c632                	sw	a2,12(sp)
    8000ba18:	e836                	sd	a3,16(sp)
        StepBy::new(self, step)
    8000ba1a:	00011097          	auipc	ra,0x11
    8000ba1e:	524080e7          	jalr	1316(ra) # 8001cf3e <_ZN4core4iter8adapters7step_by15StepBy$LT$I$GT$3new17h6692f5ddcbcdc828E>
    8000ba22:	a009                	j	8000ba24 <_ZN4core4iter6traits8iterator8Iterator7step_by17ha7dfda23787d2a26E+0x14>
    }
    8000ba24:	60e2                	ld	ra,24(sp)
    8000ba26:	6105                	addi	sp,sp,32
    8000ba28:	8082                	ret

Disassembly of section .text._ZN4core4iter6traits8iterator8Iterator7step_by17hcae6c74a630fccd6E:

000000008000ba2a <_ZN4core4iter6traits8iterator8Iterator7step_by17hcae6c74a630fccd6E>:
    fn step_by(self, step: usize) -> StepBy<Self>
    8000ba2a:	1101                	addi	sp,sp,-32
    8000ba2c:	ec06                	sd	ra,24(sp)
    8000ba2e:	e02e                	sd	a1,0(sp)
    8000ba30:	e432                	sd	a2,8(sp)
    8000ba32:	e836                	sd	a3,16(sp)
        StepBy::new(self, step)
    8000ba34:	00011097          	auipc	ra,0x11
    8000ba38:	4bc080e7          	jalr	1212(ra) # 8001cef0 <_ZN4core4iter8adapters7step_by15StepBy$LT$I$GT$3new17h4faa8304472101dfE>
    8000ba3c:	a009                	j	8000ba3e <_ZN4core4iter6traits8iterator8Iterator7step_by17hcae6c74a630fccd6E+0x14>
    }
    8000ba3e:	60e2                	ld	ra,24(sp)
    8000ba40:	6105                	addi	sp,sp,32
    8000ba42:	8082                	ret

Disassembly of section .text._ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h2819071fbc006758E:

000000008000ba44 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h2819071fbc006758E>:
    fn into_iter(self) -> I {
    8000ba44:	1141                	addi	sp,sp,-16
    8000ba46:	c42a                	sw	a0,8(sp)
    8000ba48:	c62e                	sw	a1,12(sp)
    }
    8000ba4a:	0141                	addi	sp,sp,16
    8000ba4c:	8082                	ret

Disassembly of section .text._ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he12a3ecdd35a2d32E:

000000008000ba4e <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he12a3ecdd35a2d32E>:
    fn into_iter(self) -> I {
    8000ba4e:	1141                	addi	sp,sp,-16
    8000ba50:	00a11423          	sh	a0,8(sp)
    8000ba54:	00b11523          	sh	a1,10(sp)
    }
    8000ba58:	0141                	addi	sp,sp,16
    8000ba5a:	8082                	ret

Disassembly of section .text._ZN97_$LT$core..ops..range..RangeFull$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hf4f8ccbc08517323E:

000000008000ba5c <_ZN97_$LT$core..ops..range..RangeFull$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hf4f8ccbc08517323E>:
    fn index(self, slice: &[T]) -> &[T] {
        slice
    }

    #[inline]
    fn index_mut(self, slice: &mut [T]) -> &mut [T] {
    8000ba5c:	1101                	addi	sp,sp,-32
    8000ba5e:	e82a                	sd	a0,16(sp)
    8000ba60:	ec2e                	sd	a1,24(sp)
        slice
    }
    8000ba62:	6105                	addi	sp,sp,32
    8000ba64:	8082                	ret

Disassembly of section .text._ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h2e645b443ebf2dc7E:

000000008000ba66 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h2e645b443ebf2dc7E>:
    fn from(t: T) -> T {
    8000ba66:	1141                	addi	sp,sp,-16
    }
    8000ba68:	0141                	addi	sp,sp,16
    8000ba6a:	8082                	ret

Disassembly of section .text._ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h6f3e3843c20d184aE:

000000008000ba6c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h6f3e3843c20d184aE>:
    fn from(t: T) -> T {
    8000ba6c:	1141                	addi	sp,sp,-16
    8000ba6e:	e02a                	sd	a0,0(sp)
    8000ba70:	e42e                	sd	a1,8(sp)
    }
    8000ba72:	0141                	addi	sp,sp,16
    8000ba74:	8082                	ret

Disassembly of section .text._ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h78163b68f4cb081dE:

000000008000ba76 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h78163b68f4cb081dE>:
    fn from(t: T) -> T {
    8000ba76:	1141                	addi	sp,sp,-16
    8000ba78:	e42a                	sd	a0,8(sp)
    }
    8000ba7a:	0141                	addi	sp,sp,16
    8000ba7c:	8082                	ret

Disassembly of section .text._ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hbecc82c6a2b59487E:

000000008000ba7e <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hbecc82c6a2b59487E>:
    fn into(self) -> U {
    8000ba7e:	1101                	addi	sp,sp,-32
    8000ba80:	ec06                	sd	ra,24(sp)
    8000ba82:	e82a                	sd	a0,16(sp)
        U::from(self)
    8000ba84:	00000097          	auipc	ra,0x0
    8000ba88:	ff2080e7          	jalr	-14(ra) # 8000ba76 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h78163b68f4cb081dE>
    8000ba8c:	e42a                	sd	a0,8(sp)
    8000ba8e:	a009                	j	8000ba90 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hbecc82c6a2b59487E+0x12>
    }
    8000ba90:	6522                	ld	a0,8(sp)
    8000ba92:	60e2                	ld	ra,24(sp)
    8000ba94:	6105                	addi	sp,sp,32
    8000ba96:	8082                	ret

Disassembly of section .text._ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17heab1f3c6250d8edbE:

000000008000ba98 <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17heab1f3c6250d8edbE>:
where
    U: Into<T>,
{
    type Error = Infallible;

    fn try_from(value: U) -> Result<Self, Self::Error> {
    8000ba98:	1101                	addi	sp,sp,-32
    8000ba9a:	ec06                	sd	ra,24(sp)
    8000ba9c:	e82a                	sd	a0,16(sp)
        Ok(U::into(value))
    8000ba9e:	00000097          	auipc	ra,0x0
    8000baa2:	fe0080e7          	jalr	-32(ra) # 8000ba7e <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hbecc82c6a2b59487E>
    8000baa6:	e02a                	sd	a0,0(sp)
    8000baa8:	a009                	j	8000baaa <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17heab1f3c6250d8edbE+0x12>
    8000baaa:	6502                	ld	a0,0(sp)
    8000baac:	e42a                	sd	a0,8(sp)
    }
    8000baae:	60e2                	ld	ra,24(sp)
    8000bab0:	6105                	addi	sp,sp,32
    8000bab2:	8082                	ret

Disassembly of section .text._ZN53_$LT$T$u20$as$u20$core..convert..TryInto$LT$U$GT$$GT$8try_into17h168ef583366b1bfdE:

000000008000bab4 <_ZN53_$LT$T$u20$as$u20$core..convert..TryInto$LT$U$GT$$GT$8try_into17h168ef583366b1bfdE>:
    fn try_into(self) -> Result<U, U::Error> {
    8000bab4:	1101                	addi	sp,sp,-32
    8000bab6:	ec06                	sd	ra,24(sp)
    8000bab8:	e82a                	sd	a0,16(sp)
        U::try_from(self)
    8000baba:	00013097          	auipc	ra,0x13
    8000babe:	94a080e7          	jalr	-1718(ra) # 8001e404 <_ZN4core7convert3num18ptr_try_from_impls69_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u32$GT$8try_from17hf11680289e05cb5fE>
    8000bac2:	e02a                	sd	a0,0(sp)
    8000bac4:	e42e                	sd	a1,8(sp)
    8000bac6:	a009                	j	8000bac8 <_ZN53_$LT$T$u20$as$u20$core..convert..TryInto$LT$U$GT$$GT$8try_into17h168ef583366b1bfdE+0x14>
    }
    8000bac8:	65a2                	ld	a1,8(sp)
    8000baca:	6502                	ld	a0,0(sp)
    8000bacc:	60e2                	ld	ra,24(sp)
    8000bace:	6105                	addi	sp,sp,32
    8000bad0:	8082                	ret

Disassembly of section .text._ZN53_$LT$T$u20$as$u20$core..convert..TryInto$LT$U$GT$$GT$8try_into17h79444d549eeb58faE:

000000008000bad2 <_ZN53_$LT$T$u20$as$u20$core..convert..TryInto$LT$U$GT$$GT$8try_into17h79444d549eeb58faE>:
    fn try_into(self) -> Result<U, U::Error> {
    8000bad2:	1101                	addi	sp,sp,-32
    8000bad4:	ec06                	sd	ra,24(sp)
    8000bad6:	e82a                	sd	a0,16(sp)
        U::try_from(self)
    8000bad8:	00013097          	auipc	ra,0x13
    8000badc:	8fa080e7          	jalr	-1798(ra) # 8001e3d2 <_ZN4core7convert3num18ptr_try_from_impls69_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u16$GT$8try_from17h9165284bf6d163adE>
    8000bae0:	e02a                	sd	a0,0(sp)
    8000bae2:	e42e                	sd	a1,8(sp)
    8000bae4:	a009                	j	8000bae6 <_ZN53_$LT$T$u20$as$u20$core..convert..TryInto$LT$U$GT$$GT$8try_into17h79444d549eeb58faE+0x14>
    }
    8000bae6:	65a2                	ld	a1,8(sp)
    8000bae8:	6502                	ld	a0,0(sp)
    8000baea:	60e2                	ld	ra,24(sp)
    8000baec:	6105                	addi	sp,sp,32
    8000baee:	8082                	ret

Disassembly of section .text._ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17h0d12a57a76d0850fE:

000000008000baf0 <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17h0d12a57a76d0850fE>:
    ///
    /// # Safety
    ///
    /// `ptr` must be non-null.
    #[inline]
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
    8000baf0:	1141                	addi	sp,sp,-16
    8000baf2:	e42a                	sd	a0,8(sp)
        // SAFETY: the caller must guarantee that `ptr` is non-null.
        unsafe { Unique { pointer: ptr as _, _marker: PhantomData } }
    8000baf4:	e02a                	sd	a0,0(sp)
    }
    8000baf6:	0141                	addi	sp,sp,16
    8000baf8:	8082                	ret

Disassembly of section .text._ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17h20d3eb97294874feE:

000000008000bafa <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17h20d3eb97294874feE>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
    8000bafa:	1141                	addi	sp,sp,-16
    8000bafc:	e42a                	sd	a0,8(sp)
        unsafe { Unique { pointer: ptr as _, _marker: PhantomData } }
    8000bafe:	e02a                	sd	a0,0(sp)
    }
    8000bb00:	0141                	addi	sp,sp,16
    8000bb02:	8082                	ret

Disassembly of section .text._ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17h21d50a45a5a242bbE:

000000008000bb04 <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17h21d50a45a5a242bbE>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
    8000bb04:	1141                	addi	sp,sp,-16
    8000bb06:	e42a                	sd	a0,8(sp)
        unsafe { Unique { pointer: ptr as _, _marker: PhantomData } }
    8000bb08:	e02a                	sd	a0,0(sp)
    }
    8000bb0a:	0141                	addi	sp,sp,16
    8000bb0c:	8082                	ret

Disassembly of section .text._ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17h620617f59cddd065E:

000000008000bb0e <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17h620617f59cddd065E>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
    8000bb0e:	1141                	addi	sp,sp,-16
    8000bb10:	e42a                	sd	a0,8(sp)
        unsafe { Unique { pointer: ptr as _, _marker: PhantomData } }
    8000bb12:	e02a                	sd	a0,0(sp)
    }
    8000bb14:	0141                	addi	sp,sp,16
    8000bb16:	8082                	ret

Disassembly of section .text._ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17h802ec2c42c5b54adE:

000000008000bb18 <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17h802ec2c42c5b54adE>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
    8000bb18:	1141                	addi	sp,sp,-16
    8000bb1a:	e42a                	sd	a0,8(sp)
        unsafe { Unique { pointer: ptr as _, _marker: PhantomData } }
    8000bb1c:	e02a                	sd	a0,0(sp)
    }
    8000bb1e:	0141                	addi	sp,sp,16
    8000bb20:	8082                	ret

Disassembly of section .text._ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17ha8b21015e9411210E:

000000008000bb22 <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17ha8b21015e9411210E>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
    8000bb22:	1141                	addi	sp,sp,-16
    8000bb24:	e42a                	sd	a0,8(sp)
        unsafe { Unique { pointer: ptr as _, _marker: PhantomData } }
    8000bb26:	e02a                	sd	a0,0(sp)
    }
    8000bb28:	0141                	addi	sp,sp,16
    8000bb2a:	8082                	ret

Disassembly of section .text._ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17hb5a9e5725254bb89E:

000000008000bb2c <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17hb5a9e5725254bb89E>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
    8000bb2c:	1141                	addi	sp,sp,-16
    8000bb2e:	e42a                	sd	a0,8(sp)
        unsafe { Unique { pointer: ptr as _, _marker: PhantomData } }
    8000bb30:	e02a                	sd	a0,0(sp)
    }
    8000bb32:	0141                	addi	sp,sp,16
    8000bb34:	8082                	ret

Disassembly of section .text._ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17hcb5e8bc8059451d1E:

000000008000bb36 <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17hcb5e8bc8059451d1E>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
    8000bb36:	1141                	addi	sp,sp,-16
    8000bb38:	e42a                	sd	a0,8(sp)
        unsafe { Unique { pointer: ptr as _, _marker: PhantomData } }
    8000bb3a:	e02a                	sd	a0,0(sp)
    }
    8000bb3c:	0141                	addi	sp,sp,16
    8000bb3e:	8082                	ret

Disassembly of section .text._ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17he1ff65b054541f9aE:

000000008000bb40 <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17he1ff65b054541f9aE>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
    8000bb40:	1141                	addi	sp,sp,-16
    8000bb42:	e42a                	sd	a0,8(sp)
        unsafe { Unique { pointer: ptr as _, _marker: PhantomData } }
    8000bb44:	e02a                	sd	a0,0(sp)
    }
    8000bb46:	0141                	addi	sp,sp,16
    8000bb48:	8082                	ret

Disassembly of section .text._ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17he38725f417943878E:

000000008000bb4a <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17he38725f417943878E>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
    8000bb4a:	1141                	addi	sp,sp,-16
    8000bb4c:	e42a                	sd	a0,8(sp)
        unsafe { Unique { pointer: ptr as _, _marker: PhantomData } }
    8000bb4e:	e02a                	sd	a0,0(sp)
    }
    8000bb50:	0141                	addi	sp,sp,16
    8000bb52:	8082                	ret

Disassembly of section .text._ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17hffcbfd9b9a15cee1E:

000000008000bb54 <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17hffcbfd9b9a15cee1E>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
    8000bb54:	1141                	addi	sp,sp,-16
    8000bb56:	e42a                	sd	a0,8(sp)
        unsafe { Unique { pointer: ptr as _, _marker: PhantomData } }
    8000bb58:	e02a                	sd	a0,0(sp)
    }
    8000bb5a:	0141                	addi	sp,sp,16
    8000bb5c:	8082                	ret

Disassembly of section .text._ZN4core3ptr6unique15Unique$LT$T$GT$4cast17h0df13c1b672cf8a2E:

000000008000bb5e <_ZN4core3ptr6unique15Unique$LT$T$GT$4cast17h0df13c1b672cf8a2E>:
        unsafe { &mut *self.as_ptr() }
    }

    /// Casts to a pointer of another type.
    #[inline]
    pub const fn cast<U>(self) -> Unique<U> {
    8000bb5e:	1101                	addi	sp,sp,-32
    8000bb60:	ec06                	sd	ra,24(sp)
    8000bb62:	e82a                	sd	a0,16(sp)
        // SAFETY: Unique::new_unchecked() creates a new unique and needs
        // the given pointer to not be null.
        // Since we are passing self as a pointer, it cannot be null.
        unsafe { Unique::new_unchecked(self.as_ptr() as *mut U) }
    8000bb64:	00000097          	auipc	ra,0x0
    8000bb68:	09a080e7          	jalr	154(ra) # 8000bbfe <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h98e034e84104bb8fE>
    8000bb6c:	e42a                	sd	a0,8(sp)
    8000bb6e:	a009                	j	8000bb70 <_ZN4core3ptr6unique15Unique$LT$T$GT$4cast17h0df13c1b672cf8a2E+0x12>
    8000bb70:	6522                	ld	a0,8(sp)
    8000bb72:	00000097          	auipc	ra,0x0
    8000bb76:	f9c080e7          	jalr	-100(ra) # 8000bb0e <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17h620617f59cddd065E>
    8000bb7a:	e02a                	sd	a0,0(sp)
    8000bb7c:	a009                	j	8000bb7e <_ZN4core3ptr6unique15Unique$LT$T$GT$4cast17h0df13c1b672cf8a2E+0x20>
    }
    8000bb7e:	6502                	ld	a0,0(sp)
    8000bb80:	60e2                	ld	ra,24(sp)
    8000bb82:	6105                	addi	sp,sp,32
    8000bb84:	8082                	ret

Disassembly of section .text._ZN4core3ptr6unique15Unique$LT$T$GT$4cast17h63879fc8651a3d59E:

000000008000bb86 <_ZN4core3ptr6unique15Unique$LT$T$GT$4cast17h63879fc8651a3d59E>:
    pub const fn cast<U>(self) -> Unique<U> {
    8000bb86:	1101                	addi	sp,sp,-32
    8000bb88:	ec06                	sd	ra,24(sp)
    8000bb8a:	e82a                	sd	a0,16(sp)
        unsafe { Unique::new_unchecked(self.as_ptr() as *mut U) }
    8000bb8c:	00000097          	auipc	ra,0x0
    8000bb90:	092080e7          	jalr	146(ra) # 8000bc1e <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17hc428d38b809aa8c2E>
    8000bb94:	e42a                	sd	a0,8(sp)
    8000bb96:	a009                	j	8000bb98 <_ZN4core3ptr6unique15Unique$LT$T$GT$4cast17h63879fc8651a3d59E+0x12>
    8000bb98:	6522                	ld	a0,8(sp)
    8000bb9a:	00000097          	auipc	ra,0x0
    8000bb9e:	f74080e7          	jalr	-140(ra) # 8000bb0e <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17h620617f59cddd065E>
    8000bba2:	e02a                	sd	a0,0(sp)
    8000bba4:	a009                	j	8000bba6 <_ZN4core3ptr6unique15Unique$LT$T$GT$4cast17h63879fc8651a3d59E+0x20>
    }
    8000bba6:	6502                	ld	a0,0(sp)
    8000bba8:	60e2                	ld	ra,24(sp)
    8000bbaa:	6105                	addi	sp,sp,32
    8000bbac:	8082                	ret

Disassembly of section .text._ZN4core3ptr6unique15Unique$LT$T$GT$4cast17h6eaa84e8f5e764c2E:

000000008000bbae <_ZN4core3ptr6unique15Unique$LT$T$GT$4cast17h6eaa84e8f5e764c2E>:
    pub const fn cast<U>(self) -> Unique<U> {
    8000bbae:	1101                	addi	sp,sp,-32
    8000bbb0:	ec06                	sd	ra,24(sp)
    8000bbb2:	e82a                	sd	a0,16(sp)
        unsafe { Unique::new_unchecked(self.as_ptr() as *mut U) }
    8000bbb4:	00000097          	auipc	ra,0x0
    8000bbb8:	052080e7          	jalr	82(ra) # 8000bc06 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17hb36dfd1ef749fd26E>
    8000bbbc:	e42a                	sd	a0,8(sp)
    8000bbbe:	a009                	j	8000bbc0 <_ZN4core3ptr6unique15Unique$LT$T$GT$4cast17h6eaa84e8f5e764c2E+0x12>
    8000bbc0:	6522                	ld	a0,8(sp)
    8000bbc2:	00000097          	auipc	ra,0x0
    8000bbc6:	f4c080e7          	jalr	-180(ra) # 8000bb0e <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17h620617f59cddd065E>
    8000bbca:	e02a                	sd	a0,0(sp)
    8000bbcc:	a009                	j	8000bbce <_ZN4core3ptr6unique15Unique$LT$T$GT$4cast17h6eaa84e8f5e764c2E+0x20>
    }
    8000bbce:	6502                	ld	a0,0(sp)
    8000bbd0:	60e2                	ld	ra,24(sp)
    8000bbd2:	6105                	addi	sp,sp,32
    8000bbd4:	8082                	ret

Disassembly of section .text._ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h3d727d33388c5225E:

000000008000bbd6 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h3d727d33388c5225E>:
    pub const fn as_ptr(self) -> *mut T {
    8000bbd6:	1141                	addi	sp,sp,-16
    8000bbd8:	e42a                	sd	a0,8(sp)
    }
    8000bbda:	0141                	addi	sp,sp,16
    8000bbdc:	8082                	ret

Disassembly of section .text._ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h43259d2d16140eb2E:

000000008000bbde <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h43259d2d16140eb2E>:
    pub const fn as_ptr(self) -> *mut T {
    8000bbde:	1141                	addi	sp,sp,-16
    8000bbe0:	e42a                	sd	a0,8(sp)
    }
    8000bbe2:	0141                	addi	sp,sp,16
    8000bbe4:	8082                	ret

Disassembly of section .text._ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h54727a4650ef71dfE:

000000008000bbe6 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h54727a4650ef71dfE>:
    pub const fn as_ptr(self) -> *mut T {
    8000bbe6:	1141                	addi	sp,sp,-16
    8000bbe8:	e42a                	sd	a0,8(sp)
    }
    8000bbea:	0141                	addi	sp,sp,16
    8000bbec:	8082                	ret

Disassembly of section .text._ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h7e93959e8a601ed4E:

000000008000bbee <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h7e93959e8a601ed4E>:
    pub const fn as_ptr(self) -> *mut T {
    8000bbee:	1141                	addi	sp,sp,-16
    8000bbf0:	e42a                	sd	a0,8(sp)
    }
    8000bbf2:	0141                	addi	sp,sp,16
    8000bbf4:	8082                	ret

Disassembly of section .text._ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h9702a6a3d13a07b5E:

000000008000bbf6 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h9702a6a3d13a07b5E>:
    pub const fn as_ptr(self) -> *mut T {
    8000bbf6:	1141                	addi	sp,sp,-16
    8000bbf8:	e42a                	sd	a0,8(sp)
    }
    8000bbfa:	0141                	addi	sp,sp,16
    8000bbfc:	8082                	ret

Disassembly of section .text._ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h98e034e84104bb8fE:

000000008000bbfe <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h98e034e84104bb8fE>:
    pub const fn as_ptr(self) -> *mut T {
    8000bbfe:	1141                	addi	sp,sp,-16
    8000bc00:	e42a                	sd	a0,8(sp)
    }
    8000bc02:	0141                	addi	sp,sp,16
    8000bc04:	8082                	ret

Disassembly of section .text._ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17hb36dfd1ef749fd26E:

000000008000bc06 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17hb36dfd1ef749fd26E>:
    pub const fn as_ptr(self) -> *mut T {
    8000bc06:	1141                	addi	sp,sp,-16
    8000bc08:	e42a                	sd	a0,8(sp)
    }
    8000bc0a:	0141                	addi	sp,sp,16
    8000bc0c:	8082                	ret

Disassembly of section .text._ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17hb43ff2a43bd415faE:

000000008000bc0e <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17hb43ff2a43bd415faE>:
    pub const fn as_ptr(self) -> *mut T {
    8000bc0e:	1141                	addi	sp,sp,-16
    8000bc10:	e42a                	sd	a0,8(sp)
    }
    8000bc12:	0141                	addi	sp,sp,16
    8000bc14:	8082                	ret

Disassembly of section .text._ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17hb57b3bcaa3bdd3f9E:

000000008000bc16 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17hb57b3bcaa3bdd3f9E>:
    pub const fn as_ptr(self) -> *mut T {
    8000bc16:	1141                	addi	sp,sp,-16
    8000bc18:	e42a                	sd	a0,8(sp)
    }
    8000bc1a:	0141                	addi	sp,sp,16
    8000bc1c:	8082                	ret

Disassembly of section .text._ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17hc428d38b809aa8c2E:

000000008000bc1e <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17hc428d38b809aa8c2E>:
    pub const fn as_ptr(self) -> *mut T {
    8000bc1e:	1141                	addi	sp,sp,-16
    8000bc20:	e42a                	sd	a0,8(sp)
    }
    8000bc22:	0141                	addi	sp,sp,16
    8000bc24:	8082                	ret

Disassembly of section .text._ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17hd1144efb36e37b5fE:

000000008000bc26 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17hd1144efb36e37b5fE>:
    pub const fn as_ptr(self) -> *mut T {
    8000bc26:	1141                	addi	sp,sp,-16
    8000bc28:	e42a                	sd	a0,8(sp)
    }
    8000bc2a:	0141                	addi	sp,sp,16
    8000bc2c:	8082                	ret

Disassembly of section .text._ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17hf99ed61581dd6ee2E:

000000008000bc2e <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17hf99ed61581dd6ee2E>:
    pub const fn as_ptr(self) -> *mut T {
    8000bc2e:	1141                	addi	sp,sp,-16
    8000bc30:	e42a                	sd	a0,8(sp)
    }
    8000bc32:	0141                	addi	sp,sp,16
    8000bc34:	8082                	ret

Disassembly of section .text._ZN4core3ptr6unique15Unique$LT$T$GT$6as_ref17hc8563a91a04f7babE:

000000008000bc36 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ref17hc8563a91a04f7babE>:
    pub unsafe fn as_ref(&self) -> &T {
    8000bc36:	1101                	addi	sp,sp,-32
    8000bc38:	ec06                	sd	ra,24(sp)
    8000bc3a:	e82a                	sd	a0,16(sp)
        unsafe { &*self.as_ptr() }
    8000bc3c:	6108                	ld	a0,0(a0)
    8000bc3e:	00000097          	auipc	ra,0x0
    8000bc42:	fc0080e7          	jalr	-64(ra) # 8000bbfe <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h98e034e84104bb8fE>
    8000bc46:	e42a                	sd	a0,8(sp)
    8000bc48:	a009                	j	8000bc4a <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ref17hc8563a91a04f7babE+0x14>
    }
    8000bc4a:	6522                	ld	a0,8(sp)
    8000bc4c:	60e2                	ld	ra,24(sp)
    8000bc4e:	6105                	addi	sp,sp,32
    8000bc50:	8082                	ret

Disassembly of section .text._ZN4core3ptr6unique15Unique$LT$T$GT$6as_ref17hf6739c76b33ed63aE:

000000008000bc52 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ref17hf6739c76b33ed63aE>:
    pub unsafe fn as_ref(&self) -> &T {
    8000bc52:	1101                	addi	sp,sp,-32
    8000bc54:	ec06                	sd	ra,24(sp)
    8000bc56:	e82a                	sd	a0,16(sp)
        unsafe { &*self.as_ptr() }
    8000bc58:	6108                	ld	a0,0(a0)
    8000bc5a:	00000097          	auipc	ra,0x0
    8000bc5e:	fac080e7          	jalr	-84(ra) # 8000bc06 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17hb36dfd1ef749fd26E>
    8000bc62:	e42a                	sd	a0,8(sp)
    8000bc64:	a009                	j	8000bc66 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ref17hf6739c76b33ed63aE+0x14>
    }
    8000bc66:	6522                	ld	a0,8(sp)
    8000bc68:	60e2                	ld	ra,24(sp)
    8000bc6a:	6105                	addi	sp,sp,32
    8000bc6c:	8082                	ret

Disassembly of section .text._ZN4core3ptr6unique15Unique$LT$T$GT$8dangling17h9486dd80fcd97a92E:

000000008000bc6e <_ZN4core3ptr6unique15Unique$LT$T$GT$8dangling17h9486dd80fcd97a92E>:
    pub const fn dangling() -> Self {
    8000bc6e:	1101                	addi	sp,sp,-32
    8000bc70:	ec06                	sd	ra,24(sp)
    8000bc72:	4505                	li	a0,1
    8000bc74:	e42a                	sd	a0,8(sp)
    8000bc76:	e82a                	sd	a0,16(sp)
        unsafe { Unique::new_unchecked(mem::align_of::<T>() as *mut T) }
    8000bc78:	a009                	j	8000bc7a <_ZN4core3ptr6unique15Unique$LT$T$GT$8dangling17h9486dd80fcd97a92E+0xc>
    8000bc7a:	6522                	ld	a0,8(sp)
    8000bc7c:	00000097          	auipc	ra,0x0
    8000bc80:	e92080e7          	jalr	-366(ra) # 8000bb0e <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17h620617f59cddd065E>
    8000bc84:	e02a                	sd	a0,0(sp)
    8000bc86:	a009                	j	8000bc88 <_ZN4core3ptr6unique15Unique$LT$T$GT$8dangling17h9486dd80fcd97a92E+0x1a>
    }
    8000bc88:	6502                	ld	a0,0(sp)
    8000bc8a:	60e2                	ld	ra,24(sp)
    8000bc8c:	6105                	addi	sp,sp,32
    8000bc8e:	8082                	ret

Disassembly of section .text._ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h6726b37a43d030b4E:

000000008000bc90 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h6726b37a43d030b4E>:
    fn into(self) -> U {
    8000bc90:	1101                	addi	sp,sp,-32
    8000bc92:	ec06                	sd	ra,24(sp)
    8000bc94:	e82a                	sd	a0,16(sp)
        U::from(self)
    8000bc96:	00003097          	auipc	ra,0x3
    8000bc9a:	604080e7          	jalr	1540(ra) # 8000f29a <_ZN119_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$core..ptr..unique..Unique$LT$T$GT$$GT$$GT$4from17h163e90b2907f9865E>
    8000bc9e:	e42a                	sd	a0,8(sp)
    8000bca0:	a009                	j	8000bca2 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h6726b37a43d030b4E+0x12>
    }
    8000bca2:	6522                	ld	a0,8(sp)
    8000bca4:	60e2                	ld	ra,24(sp)
    8000bca6:	6105                	addi	sp,sp,32
    8000bca8:	8082                	ret

Disassembly of section .text._ZN95_$LT$core..ptr..unique..Unique$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$mut$u20$T$GT$$GT$4from17h45361f1294fceae9E:

000000008000bcaa <_ZN95_$LT$core..ptr..unique..Unique$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$mut$u20$T$GT$$GT$4from17h45361f1294fceae9E>:
}

#[unstable(feature = "ptr_internals", issue = "none")]
impl<T: ?Sized> From<&mut T> for Unique<T> {
    #[inline]
    fn from(reference: &mut T) -> Self {
    8000bcaa:	1141                	addi	sp,sp,-16
    8000bcac:	e42a                	sd	a0,8(sp)
        // SAFETY: A mutable reference cannot be null
        unsafe { Unique { pointer: reference as *mut T, _marker: PhantomData } }
    8000bcae:	e02a                	sd	a0,0(sp)
    }
    8000bcb0:	0141                	addi	sp,sp,16
    8000bcb2:	8082                	ret

Disassembly of section .text._ZN95_$LT$core..ptr..unique..Unique$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$mut$u20$T$GT$$GT$4from17h7ca19f4bf209b680E:

000000008000bcb4 <_ZN95_$LT$core..ptr..unique..Unique$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$mut$u20$T$GT$$GT$4from17h7ca19f4bf209b680E>:
    fn from(reference: &mut T) -> Self {
    8000bcb4:	1141                	addi	sp,sp,-16
    8000bcb6:	e42a                	sd	a0,8(sp)
        unsafe { Unique { pointer: reference as *mut T, _marker: PhantomData } }
    8000bcb8:	e02a                	sd	a0,0(sp)
    }
    8000bcba:	0141                	addi	sp,sp,16
    8000bcbc:	8082                	ret

Disassembly of section .text._ZN95_$LT$core..ptr..unique..Unique$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$mut$u20$T$GT$$GT$4from17h938709fab973920cE:

000000008000bcbe <_ZN95_$LT$core..ptr..unique..Unique$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$mut$u20$T$GT$$GT$4from17h938709fab973920cE>:
    fn from(reference: &mut T) -> Self {
    8000bcbe:	1141                	addi	sp,sp,-16
    8000bcc0:	e42a                	sd	a0,8(sp)
        unsafe { Unique { pointer: reference as *mut T, _marker: PhantomData } }
    8000bcc2:	e02a                	sd	a0,0(sp)
    }
    8000bcc4:	0141                	addi	sp,sp,16
    8000bcc6:	8082                	ret

Disassembly of section .text._ZN95_$LT$core..ptr..unique..Unique$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$mut$u20$T$GT$$GT$4from17h961fb5f3bbf04d92E:

000000008000bcc8 <_ZN95_$LT$core..ptr..unique..Unique$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$mut$u20$T$GT$$GT$4from17h961fb5f3bbf04d92E>:
    fn from(reference: &mut T) -> Self {
    8000bcc8:	1141                	addi	sp,sp,-16
    8000bcca:	e42a                	sd	a0,8(sp)
        unsafe { Unique { pointer: reference as *mut T, _marker: PhantomData } }
    8000bccc:	e02a                	sd	a0,0(sp)
    }
    8000bcce:	0141                	addi	sp,sp,16
    8000bcd0:	8082                	ret

Disassembly of section .text._ZN95_$LT$core..ptr..unique..Unique$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$mut$u20$T$GT$$GT$4from17haf9e918ffbbde4a1E:

000000008000bcd2 <_ZN95_$LT$core..ptr..unique..Unique$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$mut$u20$T$GT$$GT$4from17haf9e918ffbbde4a1E>:
    fn from(reference: &mut T) -> Self {
    8000bcd2:	1141                	addi	sp,sp,-16
    8000bcd4:	e42a                	sd	a0,8(sp)
        unsafe { Unique { pointer: reference as *mut T, _marker: PhantomData } }
    8000bcd6:	e02a                	sd	a0,0(sp)
    }
    8000bcd8:	0141                	addi	sp,sp,16
    8000bcda:	8082                	ret

Disassembly of section .text._ZN95_$LT$core..ptr..unique..Unique$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$mut$u20$T$GT$$GT$4from17hbd7fdd10f6dec294E:

000000008000bcdc <_ZN95_$LT$core..ptr..unique..Unique$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$mut$u20$T$GT$$GT$4from17hbd7fdd10f6dec294E>:
    fn from(reference: &mut T) -> Self {
    8000bcdc:	1141                	addi	sp,sp,-16
    8000bcde:	e42a                	sd	a0,8(sp)
        unsafe { Unique { pointer: reference as *mut T, _marker: PhantomData } }
    8000bce0:	e02a                	sd	a0,0(sp)
    }
    8000bce2:	0141                	addi	sp,sp,16
    8000bce4:	8082                	ret

Disassembly of section .text._ZN95_$LT$core..ptr..unique..Unique$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$mut$u20$T$GT$$GT$4from17hd2fb1fd1ad0aa985E:

000000008000bce6 <_ZN95_$LT$core..ptr..unique..Unique$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$mut$u20$T$GT$$GT$4from17hd2fb1fd1ad0aa985E>:
    fn from(reference: &mut T) -> Self {
    8000bce6:	1141                	addi	sp,sp,-16
    8000bce8:	e42a                	sd	a0,8(sp)
        unsafe { Unique { pointer: reference as *mut T, _marker: PhantomData } }
    8000bcea:	e02a                	sd	a0,0(sp)
    }
    8000bcec:	0141                	addi	sp,sp,16
    8000bcee:	8082                	ret

Disassembly of section .text._ZN95_$LT$core..ptr..unique..Unique$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$mut$u20$T$GT$$GT$4from17hdb52ac7756946cf1E:

000000008000bcf0 <_ZN95_$LT$core..ptr..unique..Unique$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$mut$u20$T$GT$$GT$4from17hdb52ac7756946cf1E>:
    fn from(reference: &mut T) -> Self {
    8000bcf0:	1141                	addi	sp,sp,-16
    8000bcf2:	e42a                	sd	a0,8(sp)
        unsafe { Unique { pointer: reference as *mut T, _marker: PhantomData } }
    8000bcf4:	e02a                	sd	a0,0(sp)
    }
    8000bcf6:	0141                	addi	sp,sp,16
    8000bcf8:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register5stvec5write17ha770434f21f9bf27E:

000000008000bcfa <_ZN6kernel4arch5riscv8register5stvec5write17ha770434f21f9bf27E>:
    llvm_asm!("csrr $0, stvec":"=r"(ret):::"volatile");
    ret
}

#[inline]
pub unsafe fn write(x:usize){
    8000bcfa:	1141                	addi	sp,sp,-16
    8000bcfc:	e42a                	sd	a0,8(sp)
    llvm_asm!("csrw stvec, $0"::"r"(x)::"volatile");
    8000bcfe:	10551073          	csrw	stvec,a0
    8000bd02:	0141                	addi	sp,sp,16
    8000bd04:	8082                	ret

Disassembly of section .text._ZN4core10intrinsics11write_bytes17h11bbad1db2a3ea1bE:

000000008000bd06 <_ZN4core10intrinsics11write_bytes17h11bbad1db2a3ea1bE>:
/// // Now the box is fine
/// assert_eq!(*v, 42);
/// ```
#[stable(feature = "rust1", since = "1.0.0")]
#[inline]
pub unsafe fn write_bytes<T>(dst: *mut T, val: u8, count: usize) {
    8000bd06:	1101                	addi	sp,sp,-32
    8000bd08:	ec06                	sd	ra,24(sp)
    8000bd0a:	e02a                	sd	a0,0(sp)
    8000bd0c:	00b107a3          	sb	a1,15(sp)
    8000bd10:	e832                	sd	a2,16(sp)
    }

    debug_assert!(is_aligned_and_not_null(dst), "attempt to write to unaligned or null pointer");

    // SAFETY: the safety contract for `write_bytes` must be upheld by the caller.
    unsafe { write_bytes(dst, val, count) }
    8000bd12:	061a                	slli	a2,a2,0x6
    8000bd14:	00019097          	auipc	ra,0x19
    8000bd18:	422080e7          	jalr	1058(ra) # 80025136 <memset>
    8000bd1c:	a009                	j	8000bd1e <_ZN4core10intrinsics11write_bytes17h11bbad1db2a3ea1bE+0x18>
}
    8000bd1e:	60e2                	ld	ra,24(sp)
    8000bd20:	6105                	addi	sp,sp,32
    8000bd22:	8082                	ret

Disassembly of section .text._ZN6kernel2fs4init17h0544bbe6b6556f7eE:

000000008000bd24 <_ZN6kernel2fs4init17h0544bbe6b6556f7eE>:
use crate::lock::sleeplock::SleepLockGuard;

/// Init fs.
/// Read super block info.
/// Init log info and recover if necessary.
pub unsafe fn init(dev: u32) {
    8000bd24:	7159                	addi	sp,sp,-112
    8000bd26:	f486                	sd	ra,104(sp)
    8000bd28:	85aa                	mv	a1,a0
    8000bd2a:	852e                	mv	a0,a1
    8000bd2c:	ec2a                	sd	a0,24(sp)
    8000bd2e:	ceae                	sw	a1,92(sp)

000000008000bd30 <.LBB0_10>:
    SUPER_BLOCK.init(dev);
    8000bd30:	00065517          	auipc	a0,0x65
    8000bd34:	37050513          	addi	a0,a0,880 # 800710a0 <_ZN6kernel2fs10superblock11SUPER_BLOCK17hc3889871ecbe2b54E>
    8000bd38:	ffffb097          	auipc	ra,0xffffb
    8000bd3c:	770080e7          	jalr	1904(ra) # 800074a8 <_ZN6kernel2fs10superblock10SuperBlock4init17hd314ea22bd8e6757E>
    8000bd40:	a009                	j	8000bd42 <.LBB0_11>

000000008000bd42 <.LBB0_11>:
    let log_ptr = LOG.acquire().deref_mut() as *mut Log;
    8000bd42:	0005c517          	auipc	a0,0x5c
    8000bd46:	ca650513          	addi	a0,a0,-858 # 800679e8 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    8000bd4a:	00004097          	auipc	ra,0x4
    8000bd4e:	664080e7          	jalr	1636(ra) # 800103ae <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h25a8532f298de6d8E>
    8000bd52:	f02a                	sd	a0,32(sp)
    8000bd54:	a009                	j	8000bd56 <.LBB0_11+0x14>
    8000bd56:	1008                	addi	a0,sp,32
    8000bd58:	00006097          	auipc	ra,0x6
    8000bd5c:	980080e7          	jalr	-1664(ra) # 800116d8 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h6a09efacfb59499dE>
    8000bd60:	e82a                	sd	a0,16(sp)
    8000bd62:	a009                	j	8000bd64 <.LBB0_11+0x22>
    8000bd64:	6542                	ld	a0,16(sp)
    8000bd66:	f0aa                	sd	a0,96(sp)
    8000bd68:	1008                	addi	a0,sp,32
    8000bd6a:	ffffb097          	auipc	ra,0xffffb
    8000bd6e:	25a080e7          	jalr	602(ra) # 80006fc4 <_ZN4core3ptr86drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..fs..log..Log$GT$$GT$17h3ff4d5b7fa89905aE>
    8000bd72:	a009                	j	8000bd74 <.LBB0_11+0x32>
    log_ptr.as_mut().unwrap().init(dev);
    8000bd74:	6542                	ld	a0,16(sp)
    8000bd76:	ffffd097          	auipc	ra,0xffffd
    8000bd7a:	dc6080e7          	jalr	-570(ra) # 80008b3c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17ha6d203c03ed13dfdE>
    8000bd7e:	e42a                	sd	a0,8(sp)
    8000bd80:	a009                	j	8000bd82 <.LBB0_11+0x40>
    8000bd82:	6522                	ld	a0,8(sp)

000000008000bd84 <.LBB0_12>:
    8000bd84:	0001c597          	auipc	a1,0x1c
    8000bd88:	e7c58593          	addi	a1,a1,-388 # 80027c00 <.L__unnamed_1>
    8000bd8c:	00003097          	auipc	ra,0x3
    8000bd90:	098080e7          	jalr	152(ra) # 8000ee24 <_ZN4core6option15Option$LT$T$GT$6unwrap17hc367d03244a4b027E>
    8000bd94:	e02a                	sd	a0,0(sp)
    8000bd96:	a009                	j	8000bd98 <.LBB0_12+0x14>
    8000bd98:	65e2                	ld	a1,24(sp)
    8000bd9a:	6502                	ld	a0,0(sp)
    8000bd9c:	00004097          	auipc	ra,0x4
    8000bda0:	8f2080e7          	jalr	-1806(ra) # 8000f68e <_ZN6kernel2fs3log3Log4init17h739bf7c5bf880a35E>
    8000bda4:	a009                	j	8000bda6 <.LBB0_13>

000000008000bda6 <.LBB0_13>:
    println!("file system: setup done");
    8000bda6:	0001c597          	auipc	a1,0x1c
    8000bdaa:	e8a58593          	addi	a1,a1,-374 # 80027c30 <.L__unnamed_2>

000000008000bdae <.LBB0_14>:
    8000bdae:	0001c697          	auipc	a3,0x1c
    8000bdb2:	e9268693          	addi	a3,a3,-366 # 80027c40 <.L__unnamed_9>
    8000bdb6:	1028                	addi	a0,sp,40
    8000bdb8:	4605                	li	a2,1
    8000bdba:	4701                	li	a4,0
    8000bdbc:	ffff9097          	auipc	ra,0xffff9
    8000bdc0:	6ae080e7          	jalr	1710(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8000bdc4:	a009                	j	8000bdc6 <.LBB0_14+0x18>
    8000bdc6:	1028                	addi	a0,sp,40
    8000bdc8:	00012097          	auipc	ra,0x12
    8000bdcc:	f84080e7          	jalr	-124(ra) # 8001dd4c <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8000bdd0:	a009                	j	8000bdd2 <.LBB0_14+0x24>
}
    8000bdd2:	70a6                	ld	ra,104(sp)
    8000bdd4:	6165                	addi	sp,sp,112
    8000bdd6:	8082                	ret

Disassembly of section .text._ZN5alloc5alloc12alloc_zeroed17h1e07741da5ebd770E:

000000008000bdd8 <_ZN5alloc5alloc12alloc_zeroed17h1e07741da5ebd770E>:
pub unsafe fn alloc_zeroed(layout: Layout) -> *mut u8 {
    8000bdd8:	7179                	addi	sp,sp,-48
    8000bdda:	f406                	sd	ra,40(sp)
    8000bddc:	ec2a                	sd	a0,24(sp)
    8000bdde:	f02e                	sd	a1,32(sp)
    8000bde0:	0828                	addi	a0,sp,24
    unsafe { __rust_alloc_zeroed(layout.size(), layout.align()) }
    8000bde2:	00013097          	auipc	ra,0x13
    8000bde6:	bac080e7          	jalr	-1108(ra) # 8001e98e <_ZN4core5alloc6layout6Layout4size17h7f60c0168860a2ffE>
    8000bdea:	e82a                	sd	a0,16(sp)
    8000bdec:	a009                	j	8000bdee <_ZN5alloc5alloc12alloc_zeroed17h1e07741da5ebd770E+0x16>
    8000bdee:	0828                	addi	a0,sp,24
    8000bdf0:	00013097          	auipc	ra,0x13
    8000bdf4:	ba8080e7          	jalr	-1112(ra) # 8001e998 <_ZN4core5alloc6layout6Layout5align17h05712eb17caed6beE>
    8000bdf8:	e42a                	sd	a0,8(sp)
    8000bdfa:	a009                	j	8000bdfc <_ZN5alloc5alloc12alloc_zeroed17h1e07741da5ebd770E+0x24>
    8000bdfc:	65a2                	ld	a1,8(sp)
    8000bdfe:	6542                	ld	a0,16(sp)
    8000be00:	00014097          	auipc	ra,0x14
    8000be04:	872080e7          	jalr	-1934(ra) # 8001f672 <__rust_alloc_zeroed>
    8000be08:	e02a                	sd	a0,0(sp)
    8000be0a:	a009                	j	8000be0c <_ZN5alloc5alloc12alloc_zeroed17h1e07741da5ebd770E+0x34>
}
    8000be0c:	6502                	ld	a0,0(sp)
    8000be0e:	70a2                	ld	ra,40(sp)
    8000be10:	6145                	addi	sp,sp,48
    8000be12:	8082                	ret

Disassembly of section .text._ZN5alloc5alloc15exchange_malloc17hc8acd7fb5c1fe184E:

000000008000be14 <_ZN5alloc5alloc15exchange_malloc17hc8acd7fb5c1fe184E>:
unsafe fn exchange_malloc(size: usize, align: usize) -> *mut u8 {
    8000be14:	711d                	addi	sp,sp,-96
    8000be16:	ec86                	sd	ra,88(sp)
    8000be18:	f42a                	sd	a0,40(sp)
    8000be1a:	f82e                	sd	a1,48(sp)
    let layout = unsafe { Layout::from_size_align_unchecked(size, align) };
    8000be1c:	00013097          	auipc	ra,0x13
    8000be20:	b48080e7          	jalr	-1208(ra) # 8001e964 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h7d187b5349095d20E>
    8000be24:	862a                	mv	a2,a0
    8000be26:	e432                	sd	a2,8(sp)
    8000be28:	862e                	mv	a2,a1
    8000be2a:	e832                	sd	a2,16(sp)
    8000be2c:	fc2a                	sd	a0,56(sp)
    8000be2e:	e0ae                	sd	a1,64(sp)
    8000be30:	a009                	j	8000be32 <_ZN5alloc5alloc15exchange_malloc17hc8acd7fb5c1fe184E+0x1e>
    match Global.allocate(layout) {
    8000be32:	6642                	ld	a2,16(sp)
    8000be34:	65a2                	ld	a1,8(sp)

000000008000be36 <.LBB1_8>:
    8000be36:	0001c517          	auipc	a0,0x1c
    8000be3a:	e0a50513          	addi	a0,a0,-502 # 80027c40 <.L__unnamed_9>
    8000be3e:	00000097          	auipc	ra,0x0
    8000be42:	4d6080e7          	jalr	1238(ra) # 8000c314 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$8allocate17ha3ee32ed39eb82efE>
    8000be46:	ec2a                	sd	a0,24(sp)
    8000be48:	f02e                	sd	a1,32(sp)
    8000be4a:	a009                	j	8000be4c <.LBB1_8+0x16>
        Ok(ptr) => ptr.as_mut_ptr(),
    8000be4c:	6562                	ld	a0,24(sp)
    8000be4e:	00153593          	seqz	a1,a0
    8000be52:	4581                	li	a1,0
    8000be54:	00b51b63          	bne	a0,a1,8000be6a <.LBB1_8+0x34>
    8000be58:	a009                	j	8000be5a <.LBB1_8+0x24>
        Err(_) => handle_alloc_error(layout),
    8000be5a:	65c2                	ld	a1,16(sp)
    8000be5c:	6522                	ld	a0,8(sp)
    8000be5e:	00016097          	auipc	ra,0x16
    8000be62:	212080e7          	jalr	530(ra) # 80022070 <_ZN5alloc5alloc18handle_alloc_error17haa1b1c0a80642c5aE>
    8000be66:	0000                	unimp
    match Global.allocate(layout) {
    8000be68:	0000                	unimp
        Ok(ptr) => ptr.as_mut_ptr(),
    8000be6a:	6562                	ld	a0,24(sp)
    8000be6c:	7582                	ld	a1,32(sp)
    8000be6e:	e4aa                	sd	a0,72(sp)
    8000be70:	e8ae                	sd	a1,80(sp)
    8000be72:	00003097          	auipc	ra,0x3
    8000be76:	6f8080e7          	jalr	1784(ra) # 8000f56a <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$10as_mut_ptr17h1a3f7b42026c1de6E>
    8000be7a:	e02a                	sd	a0,0(sp)
    8000be7c:	a009                	j	8000be7e <.LBB1_8+0x48>
}
    8000be7e:	6502                	ld	a0,0(sp)
    8000be80:	60e6                	ld	ra,88(sp)
    8000be82:	6125                	addi	sp,sp,96
    8000be84:	8082                	ret

Disassembly of section .text._ZN5alloc5alloc5alloc17hd4c58b08d1932008E:

000000008000be86 <_ZN5alloc5alloc5alloc17hd4c58b08d1932008E>:
pub unsafe fn alloc(layout: Layout) -> *mut u8 {
    8000be86:	7179                	addi	sp,sp,-48
    8000be88:	f406                	sd	ra,40(sp)
    8000be8a:	ec2a                	sd	a0,24(sp)
    8000be8c:	f02e                	sd	a1,32(sp)
    8000be8e:	0828                	addi	a0,sp,24
    unsafe { __rust_alloc(layout.size(), layout.align()) }
    8000be90:	00013097          	auipc	ra,0x13
    8000be94:	afe080e7          	jalr	-1282(ra) # 8001e98e <_ZN4core5alloc6layout6Layout4size17h7f60c0168860a2ffE>
    8000be98:	e82a                	sd	a0,16(sp)
    8000be9a:	a009                	j	8000be9c <_ZN5alloc5alloc5alloc17hd4c58b08d1932008E+0x16>
    8000be9c:	0828                	addi	a0,sp,24
    8000be9e:	00013097          	auipc	ra,0x13
    8000bea2:	afa080e7          	jalr	-1286(ra) # 8001e998 <_ZN4core5alloc6layout6Layout5align17h05712eb17caed6beE>
    8000bea6:	e42a                	sd	a0,8(sp)
    8000bea8:	a009                	j	8000beaa <_ZN5alloc5alloc5alloc17hd4c58b08d1932008E+0x24>
    8000beaa:	65a2                	ld	a1,8(sp)
    8000beac:	6542                	ld	a0,16(sp)
    8000beae:	00013097          	auipc	ra,0x13
    8000beb2:	7ac080e7          	jalr	1964(ra) # 8001f65a <__rust_alloc>
    8000beb6:	e02a                	sd	a0,0(sp)
    8000beb8:	a009                	j	8000beba <_ZN5alloc5alloc5alloc17hd4c58b08d1932008E+0x34>
}
    8000beba:	6502                	ld	a0,0(sp)
    8000bebc:	70a2                	ld	ra,40(sp)
    8000bebe:	6145                	addi	sp,sp,48
    8000bec0:	8082                	ret

Disassembly of section .text._ZN5alloc5alloc6Global10alloc_impl17h58679304960bb1eaE:

000000008000bec2 <_ZN5alloc5alloc6Global10alloc_impl17h58679304960bb1eaE>:
    fn alloc_impl(&self, layout: Layout, zeroed: bool) -> Result<NonNull<[u8]>, AllocError> {
    8000bec2:	7171                	addi	sp,sp,-176
    8000bec4:	f506                	sd	ra,168(sp)
    8000bec6:	8736                	mv	a4,a3
    8000bec8:	fc3a                	sd	a4,56(sp)
    8000beca:	e4ae                	sd	a1,72(sp)
    8000becc:	e8b2                	sd	a2,80(sp)
    8000bece:	fcaa                	sd	a0,120(sp)
    8000bed0:	08d103a3          	sb	a3,135(sp)
    8000bed4:	00a8                	addi	a0,sp,72
        match layout.size() {
    8000bed6:	00013097          	auipc	ra,0x13
    8000beda:	ab8080e7          	jalr	-1352(ra) # 8001e98e <_ZN4core5alloc6layout6Layout4size17h7f60c0168860a2ffE>
    8000bede:	e0aa                	sd	a0,64(sp)
    8000bee0:	a009                	j	8000bee2 <_ZN5alloc5alloc6Global10alloc_impl17h58679304960bb1eaE+0x20>
    8000bee2:	6506                	ld	a0,64(sp)
    8000bee4:	4581                	li	a1,0
            0 => Ok(NonNull::slice_from_raw_parts(layout.dangling(), 0)),
    8000bee6:	00b50863          	beq	a0,a1,8000bef6 <_ZN5alloc5alloc6Global10alloc_impl17h58679304960bb1eaE+0x34>
    8000beea:	a009                	j	8000beec <_ZN5alloc5alloc6Global10alloc_impl17h58679304960bb1eaE+0x2a>
            size => unsafe {
    8000beec:	7562                	ld	a0,56(sp)
    8000beee:	6586                	ld	a1,64(sp)
    8000bef0:	e92e                	sd	a1,144(sp)
                let raw_ptr = if zeroed { alloc_zeroed(layout) } else { alloc(layout) };
    8000bef2:	e51d                	bnez	a0,8000bf20 <_ZN5alloc5alloc6Global10alloc_impl17h58679304960bb1eaE+0x5e>
    8000bef4:	a835                	j	8000bf30 <_ZN5alloc5alloc6Global10alloc_impl17h58679304960bb1eaE+0x6e>
    8000bef6:	00a8                	addi	a0,sp,72
            0 => Ok(NonNull::slice_from_raw_parts(layout.dangling(), 0)),
    8000bef8:	00013097          	auipc	ra,0x13
    8000befc:	ba0080e7          	jalr	-1120(ra) # 8001ea98 <_ZN4core5alloc6layout6Layout8dangling17h635528e7b5a013bbE>
    8000bf00:	f82a                	sd	a0,48(sp)
    8000bf02:	a009                	j	8000bf04 <_ZN5alloc5alloc6Global10alloc_impl17h58679304960bb1eaE+0x42>
    8000bf04:	7542                	ld	a0,48(sp)
    8000bf06:	4581                	li	a1,0
    8000bf08:	00003097          	auipc	ra,0x3
    8000bf0c:	6c8080e7          	jalr	1736(ra) # 8000f5d0 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$20slice_from_raw_parts17h7a0aec34eacd5d12E>
    8000bf10:	f02a                	sd	a0,32(sp)
    8000bf12:	f42e                	sd	a1,40(sp)
    8000bf14:	a009                	j	8000bf16 <_ZN5alloc5alloc6Global10alloc_impl17h58679304960bb1eaE+0x54>
    8000bf16:	7522                	ld	a0,40(sp)
    8000bf18:	7582                	ld	a1,32(sp)
    8000bf1a:	ecae                	sd	a1,88(sp)
    8000bf1c:	f0aa                	sd	a0,96(sp)
        match layout.size() {
    8000bf1e:	a871                	j	8000bfba <_ZN5alloc5alloc6Global10alloc_impl17h58679304960bb1eaE+0xf8>
                let raw_ptr = if zeroed { alloc_zeroed(layout) } else { alloc(layout) };
    8000bf20:	6526                	ld	a0,72(sp)
    8000bf22:	65c6                	ld	a1,80(sp)
    8000bf24:	00000097          	auipc	ra,0x0
    8000bf28:	eb4080e7          	jalr	-332(ra) # 8000bdd8 <_ZN5alloc5alloc12alloc_zeroed17h1e07741da5ebd770E>
    8000bf2c:	f4aa                	sd	a0,104(sp)
    8000bf2e:	a809                	j	8000bf40 <_ZN5alloc5alloc6Global10alloc_impl17h58679304960bb1eaE+0x7e>
    8000bf30:	6526                	ld	a0,72(sp)
    8000bf32:	65c6                	ld	a1,80(sp)
    8000bf34:	00000097          	auipc	ra,0x0
    8000bf38:	f52080e7          	jalr	-174(ra) # 8000be86 <_ZN5alloc5alloc5alloc17hd4c58b08d1932008E>
    8000bf3c:	f4aa                	sd	a0,104(sp)
    8000bf3e:	a011                	j	8000bf42 <_ZN5alloc5alloc6Global10alloc_impl17h58679304960bb1eaE+0x80>
    8000bf40:	a011                	j	8000bf44 <_ZN5alloc5alloc6Global10alloc_impl17h58679304960bb1eaE+0x82>
    8000bf42:	a009                	j	8000bf44 <_ZN5alloc5alloc6Global10alloc_impl17h58679304960bb1eaE+0x82>
                let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
    8000bf44:	7526                	ld	a0,104(sp)
    8000bf46:	00003097          	auipc	ra,0x3
    8000bf4a:	42a080e7          	jalr	1066(ra) # 8000f370 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h3fba838d6c025de4E>
    8000bf4e:	ec2a                	sd	a0,24(sp)
    8000bf50:	a009                	j	8000bf52 <_ZN5alloc5alloc6Global10alloc_impl17h58679304960bb1eaE+0x90>
    8000bf52:	6562                	ld	a0,24(sp)
    8000bf54:	00003097          	auipc	ra,0x3
    8000bf58:	904080e7          	jalr	-1788(ra) # 8000e858 <_ZN4core6option15Option$LT$T$GT$5ok_or17h8c89aa4278cdb5d9E>
    8000bf5c:	e82a                	sd	a0,16(sp)
    8000bf5e:	a009                	j	8000bf60 <_ZN5alloc5alloc6Global10alloc_impl17h58679304960bb1eaE+0x9e>
    8000bf60:	6542                	ld	a0,16(sp)
    8000bf62:	00001097          	auipc	ra,0x1
    8000bf66:	210080e7          	jalr	528(ra) # 8000d172 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h01dd6c02021cf1cdE>
    8000bf6a:	f8aa                	sd	a0,112(sp)
    8000bf6c:	a009                	j	8000bf6e <_ZN5alloc5alloc6Global10alloc_impl17h58679304960bb1eaE+0xac>
    8000bf6e:	7546                	ld	a0,112(sp)
    8000bf70:	00153593          	seqz	a1,a0
    8000bf74:	4581                	li	a1,0
    8000bf76:	00b51463          	bne	a0,a1,8000bf7e <_ZN5alloc5alloc6Global10alloc_impl17h58679304960bb1eaE+0xbc>
    8000bf7a:	a009                	j	8000bf7c <_ZN5alloc5alloc6Global10alloc_impl17h58679304960bb1eaE+0xba>
    8000bf7c:	a829                	j	8000bf96 <_ZN5alloc5alloc6Global10alloc_impl17h58679304960bb1eaE+0xd4>
    8000bf7e:	6586                	ld	a1,64(sp)
    8000bf80:	7546                	ld	a0,112(sp)
    8000bf82:	ed2a                	sd	a0,152(sp)
    8000bf84:	f12a                	sd	a0,160(sp)
                Ok(NonNull::slice_from_raw_parts(ptr, size))
    8000bf86:	00003097          	auipc	ra,0x3
    8000bf8a:	64a080e7          	jalr	1610(ra) # 8000f5d0 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$20slice_from_raw_parts17h7a0aec34eacd5d12E>
    8000bf8e:	e02a                	sd	a0,0(sp)
    8000bf90:	e42e                	sd	a1,8(sp)
    8000bf92:	a839                	j	8000bfb0 <_ZN5alloc5alloc6Global10alloc_impl17h58679304960bb1eaE+0xee>
                let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
    8000bf94:	0000                	unimp
    8000bf96:	00001097          	auipc	ra,0x1
    8000bf9a:	ba4080e7          	jalr	-1116(ra) # 8000cb3a <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h37d2ccc52635f8a7E>
    8000bf9e:	a009                	j	8000bfa0 <_ZN5alloc5alloc6Global10alloc_impl17h58679304960bb1eaE+0xde>
    8000bfa0:	00001097          	auipc	ra,0x1
    8000bfa4:	190080e7          	jalr	400(ra) # 8000d130 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha082cd91ce3eeff8E>
    8000bfa8:	ecaa                	sd	a0,88(sp)
    8000bfaa:	f0ae                	sd	a1,96(sp)
    8000bfac:	a009                	j	8000bfae <_ZN5alloc5alloc6Global10alloc_impl17h58679304960bb1eaE+0xec>
    }
    8000bfae:	a039                	j	8000bfbc <_ZN5alloc5alloc6Global10alloc_impl17h58679304960bb1eaE+0xfa>
                Ok(NonNull::slice_from_raw_parts(ptr, size))
    8000bfb0:	6522                	ld	a0,8(sp)
    8000bfb2:	6582                	ld	a1,0(sp)
    8000bfb4:	ecae                	sd	a1,88(sp)
    8000bfb6:	f0aa                	sd	a0,96(sp)
        match layout.size() {
    8000bfb8:	a009                	j	8000bfba <_ZN5alloc5alloc6Global10alloc_impl17h58679304960bb1eaE+0xf8>
    }
    8000bfba:	a009                	j	8000bfbc <_ZN5alloc5alloc6Global10alloc_impl17h58679304960bb1eaE+0xfa>
    8000bfbc:	6566                	ld	a0,88(sp)
    8000bfbe:	7586                	ld	a1,96(sp)
    8000bfc0:	70aa                	ld	ra,168(sp)
    8000bfc2:	614d                	addi	sp,sp,176
    8000bfc4:	8082                	ret

Disassembly of section .text._ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE:

000000008000bfc6 <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE>:
    unsafe fn grow_impl(
    8000bfc6:	7165                	addi	sp,sp,-400
    8000bfc8:	e706                	sd	ra,392(sp)
    8000bfca:	f12e                	sd	a1,160(sp)
    8000bfcc:	f52a                	sd	a0,168(sp)
    8000bfce:	88c2                	mv	a7,a6
    8000bfd0:	f946                	sd	a7,176(sp)
    8000bfd2:	fd32                	sd	a2,184(sp)
    8000bfd4:	e1b6                	sd	a3,192(sp)
    8000bfd6:	e5ba                	sd	a4,200(sp)
    8000bfd8:	e9be                	sd	a5,208(sp)
    8000bfda:	e62a                	sd	a0,264(sp)
    8000bfdc:	ea2e                	sd	a1,272(sp)
    8000bfde:	11010fa3          	sb	a6,287(sp)
    8000bfe2:	1928                	addi	a0,sp,184
        match old_layout.size() {
    8000bfe4:	00013097          	auipc	ra,0x13
    8000bfe8:	9aa080e7          	jalr	-1622(ra) # 8001e98e <_ZN4core5alloc6layout6Layout4size17h7f60c0168860a2ffE>
    8000bfec:	f5aa                	sd	a0,232(sp)
    8000bfee:	a009                	j	8000bff0 <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x2a>
            0 => self.alloc_impl(new_layout, zeroed),
    8000bff0:	752e                	ld	a0,232(sp)
    8000bff2:	4581                	li	a1,0
    8000bff4:	00b51f63          	bne	a0,a1,8000c012 <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x4c>
    8000bff8:	a009                	j	8000bffa <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x34>
    8000bffa:	76ca                	ld	a3,176(sp)
    8000bffc:	752a                	ld	a0,168(sp)
    8000bffe:	65ae                	ld	a1,200(sp)
    8000c000:	664e                	ld	a2,208(sp)
    8000c002:	00000097          	auipc	ra,0x0
    8000c006:	ec0080e7          	jalr	-320(ra) # 8000bec2 <_ZN5alloc5alloc6Global10alloc_impl17h58679304960bb1eaE>
    8000c00a:	edaa                	sd	a0,216(sp)
    8000c00c:	f1ae                	sd	a1,224(sp)
    8000c00e:	a009                	j	8000c010 <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x4a>
        match old_layout.size() {
    8000c010:	aad1                	j	8000c1e4 <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x21e>
    8000c012:	11a8                	addi	a0,sp,232
            old_size if old_layout.align() == new_layout.align() => unsafe {
    8000c014:	fa2a                	sd	a0,304(sp)
    8000c016:	1928                	addi	a0,sp,184
    8000c018:	00013097          	auipc	ra,0x13
    8000c01c:	980080e7          	jalr	-1664(ra) # 8001e998 <_ZN4core5alloc6layout6Layout5align17h05712eb17caed6beE>
    8000c020:	ed2a                	sd	a0,152(sp)
    8000c022:	a009                	j	8000c024 <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x5e>
    8000c024:	01a8                	addi	a0,sp,200
    8000c026:	00013097          	auipc	ra,0x13
    8000c02a:	972080e7          	jalr	-1678(ra) # 8001e998 <_ZN4core5alloc6layout6Layout5align17h05712eb17caed6beE>
    8000c02e:	e92a                	sd	a0,144(sp)
    8000c030:	a009                	j	8000c032 <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x6c>
    8000c032:	656a                	ld	a0,152(sp)
    8000c034:	65ca                	ld	a1,144(sp)
    8000c036:	00b51f63          	bne	a0,a1,8000c054 <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x8e>
    8000c03a:	a009                	j	8000c03c <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x76>
    8000c03c:	752e                	ld	a0,232(sp)
    8000c03e:	e12a                	sd	a0,128(sp)
    8000c040:	fe2a                	sd	a0,312(sp)
    8000c042:	01a8                	addi	a0,sp,200
                let new_size = new_layout.size();
    8000c044:	00013097          	auipc	ra,0x13
    8000c048:	94a080e7          	jalr	-1718(ra) # 8001e98e <_ZN4core5alloc6layout6Layout4size17h7f60c0168860a2ffE>
    8000c04c:	85aa                	mv	a1,a0
    8000c04e:	e52e                	sd	a1,136(sp)
    8000c050:	e2aa                	sd	a0,320(sp)
    8000c052:	a839                	j	8000c070 <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0xaa>
            old_size => unsafe {
    8000c054:	76ca                	ld	a3,176(sp)
    8000c056:	752a                	ld	a0,168(sp)
    8000c058:	75ae                	ld	a1,232(sp)
    8000c05a:	f4ae                	sd	a1,104(sp)
    8000c05c:	f2ae                	sd	a1,352(sp)
                let new_ptr = self.alloc_impl(new_layout, zeroed)?;
    8000c05e:	65ae                	ld	a1,200(sp)
    8000c060:	664e                	ld	a2,208(sp)
    8000c062:	00000097          	auipc	ra,0x0
    8000c066:	e60080e7          	jalr	-416(ra) # 8000bec2 <_ZN5alloc5alloc6Global10alloc_impl17h58679304960bb1eaE>
    8000c06a:	f8aa                	sd	a0,112(sp)
    8000c06c:	fcae                	sd	a1,120(sp)
    8000c06e:	a0c5                	j	8000c14e <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x188>
    8000c070:	1928                	addi	a0,sp,184
                intrinsics::assume(new_size >= old_layout.size());
    8000c072:	00013097          	auipc	ra,0x13
    8000c076:	91c080e7          	jalr	-1764(ra) # 8001e98e <_ZN4core5alloc6layout6Layout4size17h7f60c0168860a2ffE>
    8000c07a:	a009                	j	8000c07c <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0xb6>
    8000c07c:	a009                	j	8000c07e <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0xb8>
                let raw_ptr = realloc(ptr.as_ptr(), old_layout, new_size);
    8000c07e:	750a                	ld	a0,160(sp)
    8000c080:	00003097          	auipc	ra,0x3
    8000c084:	47c080e7          	jalr	1148(ra) # 8000f4fc <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h729713db2b300d39E>
    8000c088:	f0aa                	sd	a0,96(sp)
    8000c08a:	a009                	j	8000c08c <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0xc6>
    8000c08c:	66aa                	ld	a3,136(sp)
    8000c08e:	7506                	ld	a0,96(sp)
    8000c090:	75ea                	ld	a1,184(sp)
    8000c092:	660e                	ld	a2,192(sp)
    8000c094:	00000097          	auipc	ra,0x0
    8000c098:	19c080e7          	jalr	412(ra) # 8000c230 <_ZN5alloc5alloc7realloc17hcf6ed4b0bd028c82E>
    8000c09c:	85aa                	mv	a1,a0
    8000c09e:	ecae                	sd	a1,88(sp)
    8000c0a0:	e6aa                	sd	a0,328(sp)
    8000c0a2:	a009                	j	8000c0a4 <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0xde>
                let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
    8000c0a4:	6566                	ld	a0,88(sp)
    8000c0a6:	00003097          	auipc	ra,0x3
    8000c0aa:	2ca080e7          	jalr	714(ra) # 8000f370 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h3fba838d6c025de4E>
    8000c0ae:	e8aa                	sd	a0,80(sp)
    8000c0b0:	a009                	j	8000c0b2 <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0xec>
    8000c0b2:	6546                	ld	a0,80(sp)
    8000c0b4:	00002097          	auipc	ra,0x2
    8000c0b8:	7a4080e7          	jalr	1956(ra) # 8000e858 <_ZN4core6option15Option$LT$T$GT$5ok_or17h8c89aa4278cdb5d9E>
    8000c0bc:	e4aa                	sd	a0,72(sp)
    8000c0be:	a009                	j	8000c0c0 <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0xfa>
    8000c0c0:	6526                	ld	a0,72(sp)
    8000c0c2:	00001097          	auipc	ra,0x1
    8000c0c6:	0b0080e7          	jalr	176(ra) # 8000d172 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h01dd6c02021cf1cdE>
    8000c0ca:	f9aa                	sd	a0,240(sp)
    8000c0cc:	a009                	j	8000c0ce <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x108>
    8000c0ce:	754e                	ld	a0,240(sp)
    8000c0d0:	00153593          	seqz	a1,a0
    8000c0d4:	4581                	li	a1,0
    8000c0d6:	00b51463          	bne	a0,a1,8000c0de <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x118>
    8000c0da:	a009                	j	8000c0dc <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x116>
    8000c0dc:	a809                	j	8000c0ee <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x128>
    8000c0de:	754a                	ld	a0,176(sp)
    8000c0e0:	75ce                	ld	a1,240(sp)
    8000c0e2:	e0ae                	sd	a1,64(sp)
    8000c0e4:	eaae                	sd	a1,336(sp)
    8000c0e6:	eeae                	sd	a1,344(sp)
                if zeroed {
    8000c0e8:	e105                	bnez	a0,8000c108 <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x142>
    8000c0ea:	a03d                	j	8000c118 <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x152>
                let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
    8000c0ec:	0000                	unimp
    8000c0ee:	00001097          	auipc	ra,0x1
    8000c0f2:	a4c080e7          	jalr	-1460(ra) # 8000cb3a <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h37d2ccc52635f8a7E>
    8000c0f6:	a009                	j	8000c0f8 <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x132>
    8000c0f8:	00001097          	auipc	ra,0x1
    8000c0fc:	038080e7          	jalr	56(ra) # 8000d130 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha082cd91ce3eeff8E>
    8000c100:	edaa                	sd	a0,216(sp)
    8000c102:	f1ae                	sd	a1,224(sp)
    8000c104:	a009                	j	8000c106 <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x140>
    8000c106:	a0c5                	j	8000c1e6 <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x220>
                    raw_ptr.add(old_size).write_bytes(0, new_size - old_size);
    8000c108:	658a                	ld	a1,128(sp)
    8000c10a:	6566                	ld	a0,88(sp)
    8000c10c:	00013097          	auipc	ra,0x13
    8000c110:	5f2080e7          	jalr	1522(ra) # 8001f6fe <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1d203f00cca684c1E>
    8000c114:	fc2a                	sd	a0,56(sp)
    8000c116:	a011                	j	8000c11a <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x154>
                if zeroed {
    8000c118:	a829                	j	8000c132 <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x16c>
                    raw_ptr.add(old_size).write_bytes(0, new_size - old_size);
    8000c11a:	7562                	ld	a0,56(sp)
    8000c11c:	65aa                	ld	a1,136(sp)
    8000c11e:	660a                	ld	a2,128(sp)
    8000c120:	40c58633          	sub	a2,a1,a2
    8000c124:	4581                	li	a1,0
    8000c126:	ffffc097          	auipc	ra,0xffffc
    8000c12a:	738080e7          	jalr	1848(ra) # 8000885e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$11write_bytes17h89eca677f2a46e73E>
    8000c12e:	a009                	j	8000c130 <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x16a>
                if zeroed {
    8000c130:	a009                	j	8000c132 <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x16c>
                Ok(NonNull::slice_from_raw_parts(ptr, new_size))
    8000c132:	65aa                	ld	a1,136(sp)
    8000c134:	6506                	ld	a0,64(sp)
    8000c136:	00003097          	auipc	ra,0x3
    8000c13a:	49a080e7          	jalr	1178(ra) # 8000f5d0 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$20slice_from_raw_parts17h7a0aec34eacd5d12E>
    8000c13e:	f42a                	sd	a0,40(sp)
    8000c140:	f82e                	sd	a1,48(sp)
    8000c142:	a009                	j	8000c144 <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x17e>
    8000c144:	7542                	ld	a0,48(sp)
    8000c146:	75a2                	ld	a1,40(sp)
    8000c148:	edae                	sd	a1,216(sp)
    8000c14a:	f1aa                	sd	a0,224(sp)
        match old_layout.size() {
    8000c14c:	a861                	j	8000c1e4 <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x21e>
                let new_ptr = self.alloc_impl(new_layout, zeroed)?;
    8000c14e:	75e6                	ld	a1,120(sp)
    8000c150:	7546                	ld	a0,112(sp)
    8000c152:	00001097          	auipc	ra,0x1
    8000c156:	040080e7          	jalr	64(ra) # 8000d192 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h1c9f3c35158f4b17E>
    8000c15a:	fdaa                	sd	a0,248(sp)
    8000c15c:	e22e                	sd	a1,256(sp)
    8000c15e:	a009                	j	8000c160 <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x19a>
    8000c160:	756e                	ld	a0,248(sp)
    8000c162:	00153593          	seqz	a1,a0
    8000c166:	4581                	li	a1,0
    8000c168:	00b51463          	bne	a0,a1,8000c170 <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x1aa>
    8000c16c:	a009                	j	8000c16e <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x1a8>
    8000c16e:	a00d                	j	8000c190 <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x1ca>
    8000c170:	750a                	ld	a0,160(sp)
    8000c172:	766e                	ld	a2,248(sp)
    8000c174:	e832                	sd	a2,16(sp)
    8000c176:	6592                	ld	a1,256(sp)
    8000c178:	ec2e                	sd	a1,24(sp)
    8000c17a:	f6b2                	sd	a2,360(sp)
    8000c17c:	faae                	sd	a1,368(sp)
    8000c17e:	feb2                	sd	a2,376(sp)
    8000c180:	e32e                	sd	a1,384(sp)
                ptr::copy_nonoverlapping(ptr.as_ptr(), new_ptr.as_mut_ptr(), old_size);
    8000c182:	00003097          	auipc	ra,0x3
    8000c186:	37a080e7          	jalr	890(ra) # 8000f4fc <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h729713db2b300d39E>
    8000c18a:	f02a                	sd	a0,32(sp)
    8000c18c:	a839                	j	8000c1aa <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x1e4>
                let new_ptr = self.alloc_impl(new_layout, zeroed)?;
    8000c18e:	0000                	unimp
    8000c190:	00001097          	auipc	ra,0x1
    8000c194:	9aa080e7          	jalr	-1622(ra) # 8000cb3a <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h37d2ccc52635f8a7E>
    8000c198:	a009                	j	8000c19a <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x1d4>
    8000c19a:	00001097          	auipc	ra,0x1
    8000c19e:	f96080e7          	jalr	-106(ra) # 8000d130 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha082cd91ce3eeff8E>
    8000c1a2:	edaa                	sd	a0,216(sp)
    8000c1a4:	f1ae                	sd	a1,224(sp)
    8000c1a6:	a009                	j	8000c1a8 <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x1e2>
    8000c1a8:	a83d                	j	8000c1e6 <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x220>
                ptr::copy_nonoverlapping(ptr.as_ptr(), new_ptr.as_mut_ptr(), old_size);
    8000c1aa:	65e2                	ld	a1,24(sp)
    8000c1ac:	6542                	ld	a0,16(sp)
    8000c1ae:	00003097          	auipc	ra,0x3
    8000c1b2:	3bc080e7          	jalr	956(ra) # 8000f56a <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$10as_mut_ptr17h1a3f7b42026c1de6E>
    8000c1b6:	e42a                	sd	a0,8(sp)
    8000c1b8:	a009                	j	8000c1ba <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x1f4>
    8000c1ba:	7626                	ld	a2,104(sp)
    8000c1bc:	7582                	ld	a1,32(sp)
    8000c1be:	6522                	ld	a0,8(sp)
    8000c1c0:	00019097          	auipc	ra,0x19
    8000c1c4:	f24080e7          	jalr	-220(ra) # 800250e4 <memcpy>
    8000c1c8:	758a                	ld	a1,160(sp)
                self.deallocate(ptr, old_layout);
    8000c1ca:	752a                	ld	a0,168(sp)
    8000c1cc:	766a                	ld	a2,184(sp)
    8000c1ce:	668e                	ld	a3,192(sp)
    8000c1d0:	00000097          	auipc	ra,0x0
    8000c1d4:	0a8080e7          	jalr	168(ra) # 8000c278 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17hd299418f64a2b74eE>
    8000c1d8:	a009                	j	8000c1da <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x214>
                Ok(new_ptr)
    8000c1da:	6562                	ld	a0,24(sp)
    8000c1dc:	65c2                	ld	a1,16(sp)
    8000c1de:	edae                	sd	a1,216(sp)
    8000c1e0:	f1aa                	sd	a0,224(sp)
        match old_layout.size() {
    8000c1e2:	a009                	j	8000c1e4 <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x21e>
    }
    8000c1e4:	a011                	j	8000c1e8 <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x222>
    8000c1e6:	a009                	j	8000c1e8 <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x222>
    8000c1e8:	656e                	ld	a0,216(sp)
    8000c1ea:	758e                	ld	a1,224(sp)
    8000c1ec:	60ba                	ld	ra,392(sp)
    8000c1ee:	6159                	addi	sp,sp,400
    8000c1f0:	8082                	ret

Disassembly of section .text._ZN5alloc5alloc7dealloc17ha462d27313510349E:

000000008000c1f2 <_ZN5alloc5alloc7dealloc17ha462d27313510349E>:
pub unsafe fn dealloc(ptr: *mut u8, layout: Layout) {
    8000c1f2:	7139                	addi	sp,sp,-64
    8000c1f4:	fc06                	sd	ra,56(sp)
    8000c1f6:	e82a                	sd	a0,16(sp)
    8000c1f8:	f02e                	sd	a1,32(sp)
    8000c1fa:	f432                	sd	a2,40(sp)
    8000c1fc:	f82a                	sd	a0,48(sp)
    8000c1fe:	1008                	addi	a0,sp,32
    unsafe { __rust_dealloc(ptr, layout.size(), layout.align()) }
    8000c200:	00012097          	auipc	ra,0x12
    8000c204:	78e080e7          	jalr	1934(ra) # 8001e98e <_ZN4core5alloc6layout6Layout4size17h7f60c0168860a2ffE>
    8000c208:	ec2a                	sd	a0,24(sp)
    8000c20a:	a009                	j	8000c20c <_ZN5alloc5alloc7dealloc17ha462d27313510349E+0x1a>
    8000c20c:	1008                	addi	a0,sp,32
    8000c20e:	00012097          	auipc	ra,0x12
    8000c212:	78a080e7          	jalr	1930(ra) # 8001e998 <_ZN4core5alloc6layout6Layout5align17h05712eb17caed6beE>
    8000c216:	e42a                	sd	a0,8(sp)
    8000c218:	a009                	j	8000c21a <_ZN5alloc5alloc7dealloc17ha462d27313510349E+0x28>
    8000c21a:	6622                	ld	a2,8(sp)
    8000c21c:	65e2                	ld	a1,24(sp)
    8000c21e:	6542                	ld	a0,16(sp)
    8000c220:	00013097          	auipc	ra,0x13
    8000c224:	442080e7          	jalr	1090(ra) # 8001f662 <__rust_dealloc>
    8000c228:	a009                	j	8000c22a <_ZN5alloc5alloc7dealloc17ha462d27313510349E+0x38>
}
    8000c22a:	70e2                	ld	ra,56(sp)
    8000c22c:	6121                	addi	sp,sp,64
    8000c22e:	8082                	ret

Disassembly of section .text._ZN5alloc5alloc7realloc17hcf6ed4b0bd028c82E:

000000008000c230 <_ZN5alloc5alloc7realloc17hcf6ed4b0bd028c82E>:
pub unsafe fn realloc(ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
    8000c230:	715d                	addi	sp,sp,-80
    8000c232:	e486                	sd	ra,72(sp)
    8000c234:	e836                	sd	a3,16(sp)
    8000c236:	ec2a                	sd	a0,24(sp)
    8000c238:	f42e                	sd	a1,40(sp)
    8000c23a:	f832                	sd	a2,48(sp)
    8000c23c:	fc2a                	sd	a0,56(sp)
    8000c23e:	e0b6                	sd	a3,64(sp)
    8000c240:	1028                	addi	a0,sp,40
    unsafe { __rust_realloc(ptr, layout.size(), layout.align(), new_size) }
    8000c242:	00012097          	auipc	ra,0x12
    8000c246:	74c080e7          	jalr	1868(ra) # 8001e98e <_ZN4core5alloc6layout6Layout4size17h7f60c0168860a2ffE>
    8000c24a:	f02a                	sd	a0,32(sp)
    8000c24c:	a009                	j	8000c24e <_ZN5alloc5alloc7realloc17hcf6ed4b0bd028c82E+0x1e>
    8000c24e:	1028                	addi	a0,sp,40
    8000c250:	00012097          	auipc	ra,0x12
    8000c254:	748080e7          	jalr	1864(ra) # 8001e998 <_ZN4core5alloc6layout6Layout5align17h05712eb17caed6beE>
    8000c258:	e42a                	sd	a0,8(sp)
    8000c25a:	a009                	j	8000c25c <_ZN5alloc5alloc7realloc17hcf6ed4b0bd028c82E+0x2c>
    8000c25c:	66c2                	ld	a3,16(sp)
    8000c25e:	6622                	ld	a2,8(sp)
    8000c260:	7582                	ld	a1,32(sp)
    8000c262:	6562                	ld	a0,24(sp)
    8000c264:	00013097          	auipc	ra,0x13
    8000c268:	406080e7          	jalr	1030(ra) # 8001f66a <__rust_realloc>
    8000c26c:	e02a                	sd	a0,0(sp)
    8000c26e:	a009                	j	8000c270 <_ZN5alloc5alloc7realloc17hcf6ed4b0bd028c82E+0x40>
}
    8000c270:	6502                	ld	a0,0(sp)
    8000c272:	60a6                	ld	ra,72(sp)
    8000c274:	6161                	addi	sp,sp,80
    8000c276:	8082                	ret

Disassembly of section .text._ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17hd299418f64a2b74eE:

000000008000c278 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17hd299418f64a2b74eE>:
    unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout) {
    8000c278:	715d                	addi	sp,sp,-80
    8000c27a:	e486                	sd	ra,72(sp)
    8000c27c:	e82e                	sd	a1,16(sp)
    8000c27e:	f032                	sd	a2,32(sp)
    8000c280:	f436                	sd	a3,40(sp)
    8000c282:	fc2a                	sd	a0,56(sp)
    8000c284:	e0ae                	sd	a1,64(sp)
    8000c286:	1008                	addi	a0,sp,32
        if layout.size() != 0 {
    8000c288:	00012097          	auipc	ra,0x12
    8000c28c:	706080e7          	jalr	1798(ra) # 8001e98e <_ZN4core5alloc6layout6Layout4size17h7f60c0168860a2ffE>
    8000c290:	ec2a                	sd	a0,24(sp)
    8000c292:	a009                	j	8000c294 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17hd299418f64a2b74eE+0x1c>
    8000c294:	6562                	ld	a0,24(sp)
    8000c296:	4581                	li	a1,0
    8000c298:	00b50a63          	beq	a0,a1,8000c2ac <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17hd299418f64a2b74eE+0x34>
    8000c29c:	a009                	j	8000c29e <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17hd299418f64a2b74eE+0x26>
            unsafe { dealloc(ptr.as_ptr(), layout) }
    8000c29e:	6542                	ld	a0,16(sp)
    8000c2a0:	00003097          	auipc	ra,0x3
    8000c2a4:	25c080e7          	jalr	604(ra) # 8000f4fc <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h729713db2b300d39E>
    8000c2a8:	e42a                	sd	a0,8(sp)
    8000c2aa:	a011                	j	8000c2ae <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17hd299418f64a2b74eE+0x36>
        if layout.size() != 0 {
    8000c2ac:	a811                	j	8000c2c0 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17hd299418f64a2b74eE+0x48>
            unsafe { dealloc(ptr.as_ptr(), layout) }
    8000c2ae:	6522                	ld	a0,8(sp)
    8000c2b0:	7582                	ld	a1,32(sp)
    8000c2b2:	7622                	ld	a2,40(sp)
    8000c2b4:	00000097          	auipc	ra,0x0
    8000c2b8:	f3e080e7          	jalr	-194(ra) # 8000c1f2 <_ZN5alloc5alloc7dealloc17ha462d27313510349E>
    8000c2bc:	a009                	j	8000c2be <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17hd299418f64a2b74eE+0x46>
        if layout.size() != 0 {
    8000c2be:	a009                	j	8000c2c0 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17hd299418f64a2b74eE+0x48>
    }
    8000c2c0:	60a6                	ld	ra,72(sp)
    8000c2c2:	6161                	addi	sp,sp,80
    8000c2c4:	8082                	ret

Disassembly of section .text._ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$15allocate_zeroed17h62d497141254e70dE:

000000008000c2c6 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$15allocate_zeroed17h62d497141254e70dE>:
    fn allocate_zeroed(&self, layout: Layout) -> Result<NonNull<[u8]>, AllocError> {
    8000c2c6:	7179                	addi	sp,sp,-48
    8000c2c8:	f406                	sd	ra,40(sp)
    8000c2ca:	e82a                	sd	a0,16(sp)
    8000c2cc:	ec2e                	sd	a1,24(sp)
    8000c2ce:	f032                	sd	a2,32(sp)
    8000c2d0:	4685                	li	a3,1
        self.alloc_impl(layout, true)
    8000c2d2:	00000097          	auipc	ra,0x0
    8000c2d6:	bf0080e7          	jalr	-1040(ra) # 8000bec2 <_ZN5alloc5alloc6Global10alloc_impl17h58679304960bb1eaE>
    8000c2da:	e02a                	sd	a0,0(sp)
    8000c2dc:	e42e                	sd	a1,8(sp)
    8000c2de:	a009                	j	8000c2e0 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$15allocate_zeroed17h62d497141254e70dE+0x1a>
    }
    8000c2e0:	65a2                	ld	a1,8(sp)
    8000c2e2:	6502                	ld	a0,0(sp)
    8000c2e4:	70a2                	ld	ra,40(sp)
    8000c2e6:	6145                	addi	sp,sp,48
    8000c2e8:	8082                	ret

Disassembly of section .text._ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$4grow17h7670efcd8d0be277E:

000000008000c2ea <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$4grow17h7670efcd8d0be277E>:
    unsafe fn grow(
    8000c2ea:	715d                	addi	sp,sp,-80
    8000c2ec:	e486                	sd	ra,72(sp)
    8000c2ee:	ec2a                	sd	a0,24(sp)
    8000c2f0:	f02e                	sd	a1,32(sp)
    8000c2f2:	f432                	sd	a2,40(sp)
    8000c2f4:	f836                	sd	a3,48(sp)
    8000c2f6:	fc3a                	sd	a4,56(sp)
    8000c2f8:	e0be                	sd	a5,64(sp)
    8000c2fa:	4801                	li	a6,0
        unsafe { self.grow_impl(ptr, old_layout, new_layout, false) }
    8000c2fc:	00000097          	auipc	ra,0x0
    8000c300:	cca080e7          	jalr	-822(ra) # 8000bfc6 <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE>
    8000c304:	e42a                	sd	a0,8(sp)
    8000c306:	e82e                	sd	a1,16(sp)
    8000c308:	a009                	j	8000c30a <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$4grow17h7670efcd8d0be277E+0x20>
    }
    8000c30a:	65c2                	ld	a1,16(sp)
    8000c30c:	6522                	ld	a0,8(sp)
    8000c30e:	60a6                	ld	ra,72(sp)
    8000c310:	6161                	addi	sp,sp,80
    8000c312:	8082                	ret

Disassembly of section .text._ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$8allocate17ha3ee32ed39eb82efE:

000000008000c314 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$8allocate17ha3ee32ed39eb82efE>:
    fn allocate(&self, layout: Layout) -> Result<NonNull<[u8]>, AllocError> {
    8000c314:	7179                	addi	sp,sp,-48
    8000c316:	f406                	sd	ra,40(sp)
    8000c318:	e82a                	sd	a0,16(sp)
    8000c31a:	ec2e                	sd	a1,24(sp)
    8000c31c:	f032                	sd	a2,32(sp)
    8000c31e:	4681                	li	a3,0
        self.alloc_impl(layout, false)
    8000c320:	00000097          	auipc	ra,0x0
    8000c324:	ba2080e7          	jalr	-1118(ra) # 8000bec2 <_ZN5alloc5alloc6Global10alloc_impl17h58679304960bb1eaE>
    8000c328:	e02a                	sd	a0,0(sp)
    8000c32a:	e42e                	sd	a1,8(sp)
    8000c32c:	a009                	j	8000c32e <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$8allocate17ha3ee32ed39eb82efE+0x1a>
    }
    8000c32e:	65a2                	ld	a1,8(sp)
    8000c330:	6502                	ld	a0,0(sp)
    8000c332:	70a2                	ld	ra,40(sp)
    8000c334:	6145                	addi	sp,sp,48
    8000c336:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register7mstatus4read17h128130238af49ec4E:

000000008000c338 <_ZN6kernel4arch5riscv8register7mstatus4read17h128130238af49ec4E>:
use bit_field::BitField;


// read register from M mode
#[inline]
unsafe fn read() -> usize {
    8000c338:	1141                	addi	sp,sp,-16
    let ret:usize;
    llvm_asm!("csrr $0, mstatus":"=r"(ret):::"volatile");
    8000c33a:	30002573          	csrr	a0,mstatus
    8000c33e:	e42a                	sd	a0,8(sp)
    ret
}
    8000c340:	0141                	addi	sp,sp,16
    8000c342:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register7mstatus5write17h42ac5b0466add1d5E:

000000008000c344 <_ZN6kernel4arch5riscv8register7mstatus5write17h42ac5b0466add1d5E>:

// Write into register in M mode
#[inline]
unsafe fn write(x: usize) {
    8000c344:	1141                	addi	sp,sp,-16
    8000c346:	e42a                	sd	a0,8(sp)
    llvm_asm!("csrw mstatus, $0"::"r"(x)::"volatile");
    8000c348:	30051073          	csrw	mstatus,a0
}
    8000c34c:	0141                	addi	sp,sp,16
    8000c34e:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register7mstatus7set_mpp17h9778cbd7fe9ad41aE:

000000008000c350 <_ZN6kernel4arch5riscv8register7mstatus7set_mpp17h9778cbd7fe9ad41aE>:

// set M Previous Privilege mode to Supervisor, for mret.
pub unsafe fn set_mpp(){
    8000c350:	1141                	addi	sp,sp,-16
    let mut x = read();
    8000c352:	e406                	sd	ra,8(sp)
    8000c354:	00000097          	auipc	ra,0x0
    8000c358:	fe4080e7          	jalr	-28(ra) # 8000c338 <_ZN6kernel4arch5riscv8register7mstatus4read17h128130238af49ec4E>
    8000c35c:	e02a                	sd	a0,0(sp)
    8000c35e:	a009                	j	8000c360 <_ZN6kernel4arch5riscv8register7mstatus7set_mpp17h9778cbd7fe9ad41aE+0x10>
    x &= !MSTATUS_MPP_MASK;
    8000c360:	6502                	ld	a0,0(sp)
    8000c362:	75f9                	lui	a1,0xffffe
    8000c364:	7ff5859b          	addiw	a1,a1,2047
    8000c368:	8d6d                	and	a0,a0,a1
    8000c36a:	6585                	lui	a1,0x1
    8000c36c:	8005859b          	addiw	a1,a1,-2048
    x |= MSTATUS_MPP_S;
    8000c370:	8d4d                	or	a0,a0,a1
    8000c372:	e02a                	sd	a0,0(sp)
    write(x);
    8000c374:	00000097          	auipc	ra,0x0
    8000c378:	fd0080e7          	jalr	-48(ra) # 8000c344 <_ZN6kernel4arch5riscv8register7mstatus5write17h42ac5b0466add1d5E>
    8000c37c:	a009                	j	8000c37e <_ZN6kernel4arch5riscv8register7mstatus7set_mpp17h9778cbd7fe9ad41aE+0x2e>
}
    8000c37e:	60a2                	ld	ra,8(sp)
    8000c380:	0141                	addi	sp,sp,16
    8000c382:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register7mstatus16enable_interrupt17hf0a2d533b14eb99bE:

000000008000c384 <_ZN6kernel4arch5riscv8register7mstatus16enable_interrupt17hf0a2d533b14eb99bE>:

// enable machine-mode interrupts.
pub unsafe fn enable_interrupt(){
    8000c384:	1141                	addi	sp,sp,-16
    let mut mstatus = read();
    8000c386:	e406                	sd	ra,8(sp)
    8000c388:	00000097          	auipc	ra,0x0
    8000c38c:	fb0080e7          	jalr	-80(ra) # 8000c338 <_ZN6kernel4arch5riscv8register7mstatus4read17h128130238af49ec4E>
    8000c390:	e02a                	sd	a0,0(sp)
    8000c392:	a009                	j	8000c394 <_ZN6kernel4arch5riscv8register7mstatus16enable_interrupt17hf0a2d533b14eb99bE+0x10>
    8000c394:	850a                	mv	a0,sp
    8000c396:	458d                	li	a1,3
    8000c398:	4605                	li	a2,1
    mstatus.set_bit(3, true);
    8000c39a:	ffff8097          	auipc	ra,0xffff8
    8000c39e:	9fc080e7          	jalr	-1540(ra) # 80003d96 <_ZN45_$LT$usize$u20$as$u20$bit_field..BitField$GT$7set_bit17h956504fd5d951209E>
    8000c3a2:	a009                	j	8000c3a4 <_ZN6kernel4arch5riscv8register7mstatus16enable_interrupt17hf0a2d533b14eb99bE+0x20>
    write(mstatus);
    8000c3a4:	6502                	ld	a0,0(sp)
    8000c3a6:	00000097          	auipc	ra,0x0
    8000c3aa:	f9e080e7          	jalr	-98(ra) # 8000c344 <_ZN6kernel4arch5riscv8register7mstatus5write17h42ac5b0466add1d5E>
    8000c3ae:	a009                	j	8000c3b0 <_ZN6kernel4arch5riscv8register7mstatus16enable_interrupt17hf0a2d533b14eb99bE+0x2c>
}
    8000c3b0:	60a2                	ld	ra,8(sp)
    8000c3b2:	0141                	addi	sp,sp,16
    8000c3b4:	8082                	ret

Disassembly of section .text.start:

000000008000c3b6 <start>:
static mut TIMER_SCRATCH:[[u64; 5]; NCPU] = [[0u64; 5]; NCPU];
static STARTED:AtomicBool = AtomicBool::new(false);

/// 引导启动程序,进行寄存器的初始化操作
#[no_mangle]
pub unsafe fn start() -> !{
    8000c3b6:	1101                	addi	sp,sp,-32
    // Set M Previlege mode to Supervisor, for mret
    mstatus::set_mpp();
    8000c3b8:	ec06                	sd	ra,24(sp)
    8000c3ba:	00000097          	auipc	ra,0x0
    8000c3be:	f96080e7          	jalr	-106(ra) # 8000c350 <_ZN6kernel4arch5riscv8register7mstatus7set_mpp17h9778cbd7fe9ad41aE>
    8000c3c2:	a009                	j	8000c3c4 <.LBB0_11>

000000008000c3c4 <.LBB0_11>:

    // set M Exception Program Counter to main, for mret.
    // requires gcc -mcmodel=medany
    mepc::write(rust_main as usize);
    8000c3c4:	00000517          	auipc	a0,0x0
    8000c3c8:	1a850513          	addi	a0,a0,424 # 8000c56c <rust_main>
    8000c3cc:	ffff6097          	auipc	ra,0xffff6
    8000c3d0:	2e6080e7          	jalr	742(ra) # 800026b2 <_ZN6kernel4arch5riscv8register4mepc5write17h048707cbba437631E>
    8000c3d4:	a009                	j	8000c3d6 <.LBB0_11+0x12>
    8000c3d6:	4501                	li	a0,0

    // disable paging for now.
    satp::write(0);
    8000c3d8:	00012097          	auipc	ra,0x12
    8000c3dc:	2fa080e7          	jalr	762(ra) # 8001e6d2 <_ZN6kernel4arch5riscv8register4satp5write17h136481b47a553b1cE>
    8000c3e0:	a009                	j	8000c3e2 <.LBB0_11+0x1e>
    8000c3e2:	6541                	lui	a0,0x10
    8000c3e4:	357d                	addiw	a0,a0,-1

    // delegate all interrupts and exceptions to supervisor mode.
    medeleg::write(0xffff);
    8000c3e6:	00012097          	auipc	ra,0x12
    8000c3ea:	a78080e7          	jalr	-1416(ra) # 8001de5e <_ZN6kernel4arch5riscv8register7medeleg5write17h087038b3215eaf8cE>
    8000c3ee:	a009                	j	8000c3f0 <.LBB0_11+0x2c>
    8000c3f0:	6541                	lui	a0,0x10
    8000c3f2:	357d                	addiw	a0,a0,-1
    mideleg::write(0xffff);
    8000c3f4:	00012097          	auipc	ra,0x12
    8000c3f8:	a2c080e7          	jalr	-1492(ra) # 8001de20 <_ZN6kernel4arch5riscv8register7mideleg5write17hf36c8c211297ea03E>
    8000c3fc:	a009                	j	8000c3fe <.LBB0_11+0x3a>
    sie::intr_on();
    8000c3fe:	00011097          	auipc	ra,0x11
    8000c402:	4a0080e7          	jalr	1184(ra) # 8001d89e <_ZN6kernel4arch5riscv8register3sie7intr_on17ha44057f13b8cbd2fE>
    8000c406:	a009                	j	8000c408 <.LBB0_11+0x44>

    // ask for clock interrupts.
    timer_init();
    8000c408:	00000097          	auipc	ra,0x0
    8000c40c:	02e080e7          	jalr	46(ra) # 8000c436 <_ZN6kernel10timer_init17h23308923add8e035E>
    8000c410:	a009                	j	8000c412 <.LBB0_11+0x4e>

    // keep each CPU's hartid in its tp register, for cpuid().
    let id:usize = mhartid::read(); 
    8000c412:	ffffb097          	auipc	ra,0xffffb
    8000c416:	47e080e7          	jalr	1150(ra) # 80007890 <_ZN6kernel4arch5riscv8register7mhartid4read17hb0a253df4f0869d8E>
    8000c41a:	85aa                	mv	a1,a0
    8000c41c:	e42e                	sd	a1,8(sp)
    8000c41e:	e82a                	sd	a0,16(sp)
    8000c420:	a009                	j	8000c422 <.LBB0_11+0x5e>
    tp::write(id);
    8000c422:	6522                	ld	a0,8(sp)
    8000c424:	00012097          	auipc	ra,0x12
    8000c428:	3c2080e7          	jalr	962(ra) # 8001e7e6 <_ZN6kernel4arch5riscv8register2tp5write17hac520d82928ad2ddE>
    8000c42c:	a009                	j	8000c42e <.LBB0_11+0x6a>

    // switch to supervisor mode and jump to main().
    llvm_asm!("mret"::::"volatile");
    8000c42e:	30200073          	mret

    loop{}
    8000c432:	a009                	j	8000c434 <.LBB0_11+0x70>
    8000c434:	a001                	j	8000c434 <.LBB0_11+0x70>

Disassembly of section .text._ZN6kernel10timer_init17h23308923add8e035E:

000000008000c436 <_ZN6kernel10timer_init17h23308923add8e035E>:
/// set up to receive timer interrupts in machine mode,
/// which arrive at timervec in kernelvec.S,
/// which turns them into software interrupts for
/// devintr() in trap.rs.
/// 启动时钟中断
unsafe fn timer_init(){
    8000c436:	7139                	addi	sp,sp,-64
    // each CPU has a separate source of timer interrupts.
    let id = mhartid::read();
    8000c438:	fc06                	sd	ra,56(sp)
    8000c43a:	ffffb097          	auipc	ra,0xffffb
    8000c43e:	456080e7          	jalr	1110(ra) # 80007890 <_ZN6kernel4arch5riscv8register7mhartid4read17hb0a253df4f0869d8E>
    8000c442:	85aa                	mv	a1,a0
    8000c444:	f02e                	sd	a1,32(sp)
    8000c446:	f42a                	sd	a0,40(sp)
    8000c448:	a009                	j	8000c44a <_ZN6kernel10timer_init17h23308923add8e035E+0x14>
    8000c44a:	7502                	ld	a0,32(sp)
    8000c44c:	000f45b7          	lui	a1,0xf4
    8000c450:	2405859b          	addiw	a1,a1,576

    // ask the CLINT for a timer interrupt.
    let interval = 1000000;// cycles; about 1/10th second in qemu.
    8000c454:	f82e                	sd	a1,48(sp)
    clint::add_mtimecmp(id, interval);
    8000c456:	ffff7097          	auipc	ra,0xffff7
    8000c45a:	9f6080e7          	jalr	-1546(ra) # 80002e4c <_ZN6kernel4arch5riscv8register5clint12add_mtimecmp17hca3030d0d062e6f9E>
    8000c45e:	a009                	j	8000c460 <_ZN6kernel10timer_init17h23308923add8e035E+0x2a>

    // prepare information in scratch[] for timervec.
    // scratch[0..2] : space for timervec to save registers.
    // scratch[3] : address of CLINT MTIMECMP register.
    // scratch[4] : desired interval (in cycles) between timer interrupts.
    TIMER_SCRATCH[id][3] = clint::count_mtiecmp(id) as u64;
    8000c460:	7502                	ld	a0,32(sp)
    8000c462:	ffff7097          	auipc	ra,0xffff7
    8000c466:	a44080e7          	jalr	-1468(ra) # 80002ea6 <_ZN6kernel4arch5riscv8register5clint13count_mtiecmp17h29e162b64ddfbfccE>
    8000c46a:	ec2a                	sd	a0,24(sp)
    8000c46c:	a009                	j	8000c46e <_ZN6kernel10timer_init17h23308923add8e035E+0x38>
    8000c46e:	7582                	ld	a1,32(sp)
    8000c470:	451d                	li	a0,7
    8000c472:	0ab56c63          	bltu	a0,a1,8000c52a <.LBB1_19+0x3e>
    8000c476:	a009                	j	8000c478 <_ZN6kernel10timer_init17h23308923add8e035E+0x42>
    8000c478:	7582                	ld	a1,32(sp)
    8000c47a:	6562                	ld	a0,24(sp)
    8000c47c:	02800613          	li	a2,40
    8000c480:	02c586b3          	mul	a3,a1,a2

000000008000c484 <.LBB1_16>:
    8000c484:	00067617          	auipc	a2,0x67
    8000c488:	b7c60613          	addi	a2,a2,-1156 # 80073000 <_ZN6kernel13TIMER_SCRATCH17hc054732b4283b1caE>
    8000c48c:	9636                	add	a2,a2,a3
    8000c48e:	ee08                	sd	a0,24(a2)
    8000c490:	451d                	li	a0,7
    TIMER_SCRATCH[id][4] = interval;
    8000c492:	0ab56763          	bltu	a0,a1,8000c540 <.LBB1_20+0x14>
    8000c496:	a009                	j	8000c498 <.LBB1_16+0x14>
    8000c498:	7582                	ld	a1,32(sp)
    8000c49a:	02800513          	li	a0,40
    8000c49e:	02a58633          	mul	a2,a1,a0

000000008000c4a2 <.LBB1_17>:
    8000c4a2:	00067517          	auipc	a0,0x67
    8000c4a6:	b5e50513          	addi	a0,a0,-1186 # 80073000 <_ZN6kernel13TIMER_SCRATCH17hc054732b4283b1caE>
    8000c4aa:	962a                	add	a2,a2,a0
    8000c4ac:	000f4537          	lui	a0,0xf4
    8000c4b0:	2405051b          	addiw	a0,a0,576
    8000c4b4:	f208                	sd	a0,32(a2)
    8000c4b6:	451d                	li	a0,7
    mscratch::write(TIMER_SCRATCH[id].as_ptr() as usize);
    8000c4b8:	08b56f63          	bltu	a0,a1,8000c556 <.LBB1_21+0x14>
    8000c4bc:	a009                	j	8000c4be <.LBB1_17+0x1c>
    8000c4be:	7502                	ld	a0,32(sp)
    8000c4c0:	02800593          	li	a1,40
    8000c4c4:	02b50533          	mul	a0,a0,a1

000000008000c4c8 <.LBB1_18>:
    8000c4c8:	00067597          	auipc	a1,0x67
    8000c4cc:	b3858593          	addi	a1,a1,-1224 # 80073000 <_ZN6kernel13TIMER_SCRATCH17hc054732b4283b1caE>
    8000c4d0:	952e                	add	a0,a0,a1
    8000c4d2:	4595                	li	a1,5
    8000c4d4:	00013097          	auipc	ra,0x13
    8000c4d8:	148080e7          	jalr	328(ra) # 8001f61c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h1ea05a5f45312d57E>
    8000c4dc:	e82a                	sd	a0,16(sp)
    8000c4de:	a009                	j	8000c4e0 <.LBB1_18+0x18>
    8000c4e0:	6542                	ld	a0,16(sp)
    8000c4e2:	00012097          	auipc	ra,0x12
    8000c4e6:	ee4080e7          	jalr	-284(ra) # 8001e3c6 <_ZN6kernel4arch5riscv8register8mscratch5write17h9d6c8373498c8305E>
    8000c4ea:	a009                	j	8000c4ec <.LBB1_19>

000000008000c4ec <.LBB1_19>:
    // set the machine-mode trap handler.
    extern "C" {
        fn timervec();
    }

    mtvec::write(timervec as usize);
    8000c4ec:	ffff4517          	auipc	a0,0xffff4
    8000c4f0:	bc450513          	addi	a0,a0,-1084 # 800000b0 <timervec>
    8000c4f4:	0000b097          	auipc	ra,0xb
    8000c4f8:	864080e7          	jalr	-1948(ra) # 80016d58 <_ZN6kernel4arch5riscv8register5mtvec5write17h0d760c5cb091ccffE>
    8000c4fc:	a009                	j	8000c4fe <.LBB1_19+0x12>

    // enable machine-mode interrupts.
    mstatus::enable_interrupt();
    8000c4fe:	00000097          	auipc	ra,0x0
    8000c502:	e86080e7          	jalr	-378(ra) # 8000c384 <_ZN6kernel4arch5riscv8register7mstatus16enable_interrupt17hf0a2d533b14eb99bE>
    8000c506:	a009                	j	8000c508 <.LBB1_19+0x1c>

    // enable machine-mode timer interrupts.
    mie::write(mie::read() | mie::MIE::MTIE as usize);
    8000c508:	00000097          	auipc	ra,0x0
    8000c50c:	72c080e7          	jalr	1836(ra) # 8000cc34 <_ZN6kernel4arch5riscv8register3mie4read17h69b673b504f0a30eE>
    8000c510:	e42a                	sd	a0,8(sp)
    8000c512:	a009                	j	8000c514 <.LBB1_19+0x28>
    8000c514:	6522                	ld	a0,8(sp)
    8000c516:	08056513          	ori	a0,a0,128
    8000c51a:	00000097          	auipc	ra,0x0
    8000c51e:	726080e7          	jalr	1830(ra) # 8000cc40 <_ZN6kernel4arch5riscv8register3mie5write17hd754beffbe0101f6E>
    8000c522:	a009                	j	8000c524 <.LBB1_19+0x38>

}
    8000c524:	70e2                	ld	ra,56(sp)
    8000c526:	6121                	addi	sp,sp,64
    8000c528:	8082                	ret
    TIMER_SCRATCH[id][3] = clint::count_mtiecmp(id) as u64;
    8000c52a:	7502                	ld	a0,32(sp)

000000008000c52c <.LBB1_20>:
    8000c52c:	0001b617          	auipc	a2,0x1b
    8000c530:	72460613          	addi	a2,a2,1828 # 80027c50 <.L__unnamed_1>
    8000c534:	45a1                	li	a1,8
    8000c536:	00016097          	auipc	ra,0x16
    8000c53a:	d6c080e7          	jalr	-660(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    8000c53e:	0000                	unimp
    TIMER_SCRATCH[id][4] = interval;
    8000c540:	7502                	ld	a0,32(sp)

000000008000c542 <.LBB1_21>:
    8000c542:	0001b617          	auipc	a2,0x1b
    8000c546:	72660613          	addi	a2,a2,1830 # 80027c68 <.L__unnamed_2>
    8000c54a:	45a1                	li	a1,8
    8000c54c:	00016097          	auipc	ra,0x16
    8000c550:	d56080e7          	jalr	-682(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    8000c554:	0000                	unimp
    mscratch::write(TIMER_SCRATCH[id].as_ptr() as usize);
    8000c556:	7502                	ld	a0,32(sp)

000000008000c558 <.LBB1_22>:
    8000c558:	0001b617          	auipc	a2,0x1b
    8000c55c:	72860613          	addi	a2,a2,1832 # 80027c80 <.L__unnamed_3>
    8000c560:	45a1                	li	a1,8
    8000c562:	00016097          	auipc	ra,0x16
    8000c566:	d40080e7          	jalr	-704(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text.rust_main:

000000008000c56c <rust_main>:

/// 进入内核初始化
#[no_mangle]
pub unsafe extern "C" fn rust_main() {
    8000c56c:	7169                	addi	sp,sp,-304
    if cpu::cpuid() == 0 {
    8000c56e:	f606                	sd	ra,296(sp)
    8000c570:	00006097          	auipc	ra,0x6
    8000c574:	826080e7          	jalr	-2010(ra) # 80011d96 <_ZN6kernel7process3cpu5cpuid17h605093a6a9a60164E>
    8000c578:	fc2a                	sd	a0,56(sp)
    8000c57a:	a009                	j	8000c57c <rust_main+0x10>
    8000c57c:	7562                	ld	a0,56(sp)
    8000c57e:	4581                	li	a1,0
    8000c580:	16b51363          	bne	a0,a1,8000c6e6 <.LBB2_48+0x20>
    8000c584:	a009                	j	8000c586 <rust_main+0x1a>
        console_init();
    8000c586:	ffff8097          	auipc	ra,0xffff8
    8000c58a:	098080e7          	jalr	152(ra) # 8000461e <_ZN6kernel6driver7console12console_init17h6fb79c78956ee465E>
    8000c58e:	a009                	j	8000c590 <.LBB2_38>

000000008000c590 <.LBB2_38>:
        println!("{}",LOGO); 
    8000c590:	0001c517          	auipc	a0,0x1c
    8000c594:	86050513          	addi	a0,a0,-1952 # 80027df0 <.L__unnamed_4>
    8000c598:	e12a                	sd	a0,128(sp)
    8000c59a:	f22a                	sd	a0,288(sp)

000000008000c59c <.LBB2_39>:
    8000c59c:	00012597          	auipc	a1,0x12
    8000c5a0:	01858593          	addi	a1,a1,24 # 8001e5b4 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E>
    8000c5a4:	00012097          	auipc	ra,0x12
    8000c5a8:	056080e7          	jalr	86(ra) # 8001e5fa <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>
    8000c5ac:	f42a                	sd	a0,40(sp)
    8000c5ae:	f82e                	sd	a1,48(sp)
    8000c5b0:	a009                	j	8000c5b2 <.LBB2_39+0x16>
    8000c5b2:	7542                	ld	a0,48(sp)
    8000c5b4:	75a2                	ld	a1,40(sp)
    8000c5b6:	f8ae                	sd	a1,112(sp)
    8000c5b8:	fcaa                	sd	a0,120(sp)

000000008000c5ba <.LBB2_40>:
    8000c5ba:	0001b597          	auipc	a1,0x1b
    8000c5be:	71658593          	addi	a1,a1,1814 # 80027cd0 <.L__unnamed_5>
    8000c5c2:	0088                	addi	a0,sp,64
    8000c5c4:	4609                	li	a2,2
    8000c5c6:	1894                	addi	a3,sp,112
    8000c5c8:	4705                	li	a4,1
    8000c5ca:	ffff9097          	auipc	ra,0xffff9
    8000c5ce:	ea0080e7          	jalr	-352(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8000c5d2:	a009                	j	8000c5d4 <.LBB2_40+0x1a>
    8000c5d4:	0088                	addi	a0,sp,64
    8000c5d6:	00011097          	auipc	ra,0x11
    8000c5da:	776080e7          	jalr	1910(ra) # 8001dd4c <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8000c5de:	a009                	j	8000c5e0 <.LBB2_41>

000000008000c5e0 <.LBB2_41>:
        println!("xv6-rust kernel is booting!");
    8000c5e0:	0001c597          	auipc	a1,0x1c
    8000c5e4:	84058593          	addi	a1,a1,-1984 # 80027e20 <.L__unnamed_6>

000000008000c5e8 <.LBB2_42>:
    8000c5e8:	0001b697          	auipc	a3,0x1b
    8000c5ec:	6e068693          	addi	a3,a3,1760 # 80027cc8 <.L__unnamed_12>
    8000c5f0:	0128                	addi	a0,sp,136
    8000c5f2:	4605                	li	a2,1
    8000c5f4:	4701                	li	a4,0
    8000c5f6:	ffff9097          	auipc	ra,0xffff9
    8000c5fa:	e74080e7          	jalr	-396(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8000c5fe:	a009                	j	8000c600 <.LBB2_42+0x18>
    8000c600:	0128                	addi	a0,sp,136
    8000c602:	00011097          	auipc	ra,0x11
    8000c606:	74a080e7          	jalr	1866(ra) # 8001dd4c <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8000c60a:	a009                	j	8000c60c <.LBB2_43>

000000008000c60c <.LBB2_43>:
        KERNEL_HEAP.kinit(); // physical page allocator
    8000c60c:	0004b517          	auipc	a0,0x4b
    8000c610:	f3450513          	addi	a0,a0,-204 # 80057540 <_ZN6kernel6memory6kalloc11KERNEL_HEAP17hee4af7794785bdacE>
    8000c614:	00000097          	auipc	ra,0x0
    8000c618:	36c080e7          	jalr	876(ra) # 8000c980 <_ZN6kernel6memory6kalloc10KernelHeap5kinit17hadc76a3ae98e4bd9E>
    8000c61c:	a009                	j	8000c61e <.LBB2_43+0x12>
        kvm_init(); // create kernel page table
    8000c61e:	ffffe097          	auipc	ra,0xffffe
    8000c622:	15e080e7          	jalr	350(ra) # 8000a77c <kvm_init>
    8000c626:	a009                	j	8000c628 <.LBB2_43+0x1c>
        kvm_init_hart(); // turn on paging
    8000c628:	ffffe097          	auipc	ra,0xffffe
    8000c62c:	192080e7          	jalr	402(ra) # 8000a7ba <_ZN6kernel6memory7mapping10kernel_map13kvm_init_hart17hca08c717b940e5bcE>
    8000c630:	a009                	j	8000c632 <.LBB2_44>

000000008000c632 <.LBB2_44>:
        PROC_MANAGER.init(); // process table
    8000c632:	0004b517          	auipc	a0,0x4b
    8000c636:	f6e50513          	addi	a0,a0,-146 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    8000c63a:	00001097          	auipc	ra,0x1
    8000c63e:	c9c080e7          	jalr	-868(ra) # 8000d2d6 <_ZN6kernel7process7manager11ProcManager4init17h6f55d4e0f14b932aE>
    8000c642:	a009                	j	8000c644 <.LBB2_44+0x12>
        trap_init_hart(); // trap vectors
    8000c644:	ffffa097          	auipc	ra,0xffffa
    8000c648:	b3c080e7          	jalr	-1220(ra) # 80006180 <_ZN6kernel4trap14trap_init_hart17h35cf9f3a8bf40f94E>
    8000c64c:	a009                	j	8000c64e <.LBB2_44+0x1c>
        plic_init(); // set up interrupt controller
    8000c64e:	00011097          	auipc	ra,0x11
    8000c652:	3f8080e7          	jalr	1016(ra) # 8001da46 <_ZN6kernel6driver4plic9plic_init17he281b1081f5a24ddE>
    8000c656:	a009                	j	8000c658 <.LBB2_44+0x26>
        plic_init_hart(); // ask PLIC for device interrupts
    8000c658:	00011097          	auipc	ra,0x11
    8000c65c:	41e080e7          	jalr	1054(ra) # 8001da76 <_ZN6kernel6driver4plic14plic_init_hart17he37af6da421066b1E>
    8000c660:	a009                	j	8000c662 <.LBB2_45>

000000008000c662 <.LBB2_45>:
        BCACHE.binit(); // buffer cache
    8000c662:	00023517          	auipc	a0,0x23
    8000c666:	99e50513          	addi	a0,a0,-1634 # 8002f000 <_ZN6kernel2fs3bio6BCACHE17h4811aac4f8d79dc4E>
    8000c66a:	ffff7097          	auipc	ra,0xffff7
    8000c66e:	93a080e7          	jalr	-1734(ra) # 80002fa4 <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE>
    8000c672:	a009                	j	8000c674 <.LBB2_46>

000000008000c674 <.LBB2_46>:
        DISK.acquire().init(); // emulated hard disk
    8000c674:	00060517          	auipc	a0,0x60
    8000c678:	98c50513          	addi	a0,a0,-1652 # 8006c000 <_ZN6kernel6driver11virtio_disk4DISK17h9e8917083150b34aE>
    8000c67c:	00004097          	auipc	ra,0x4
    8000c680:	0b2080e7          	jalr	178(ra) # 8001072e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h922bace5232f6228E>
    8000c684:	fd2a                	sd	a0,184(sp)
    8000c686:	a009                	j	8000c688 <.LBB2_46+0x14>
    8000c688:	1928                	addi	a0,sp,184
    8000c68a:	00005097          	auipc	ra,0x5
    8000c68e:	00e080e7          	jalr	14(ra) # 80011698 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h362a59dae1fa4f35E>
    8000c692:	f02a                	sd	a0,32(sp)
    8000c694:	a009                	j	8000c696 <.LBB2_46+0x22>
    8000c696:	7502                	ld	a0,32(sp)
    8000c698:	00012097          	auipc	ra,0x12
    8000c69c:	428080e7          	jalr	1064(ra) # 8001eac0 <_ZN6kernel6driver11virtio_disk4Disk4init17h491380cac5f59b4bE>
    8000c6a0:	a009                	j	8000c6a2 <.LBB2_46+0x2e>
    8000c6a2:	1928                	addi	a0,sp,184
    8000c6a4:	ffffb097          	auipc	ra,0xffffb
    8000c6a8:	9f4080e7          	jalr	-1548(ra) # 80007098 <_ZN4core3ptr99drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..driver..virtio_disk..Disk$GT$$GT$17h4fc01c278f0bfe6cE>
    8000c6ac:	a009                	j	8000c6ae <.LBB2_47>

000000008000c6ae <.LBB2_47>:
        PROC_MANAGER.user_init(); // first user process
    8000c6ae:	0004b517          	auipc	a0,0x4b
    8000c6b2:	ef250513          	addi	a0,a0,-270 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    8000c6b6:	00001097          	auipc	ra,0x1
    8000c6ba:	dd0080e7          	jalr	-560(ra) # 8000d486 <_ZN6kernel7process7manager11ProcManager9user_init17h45a7031cbcd11d0fE>
    8000c6be:	a009                	j	8000c6c0 <.LBB2_47+0x12>
    8000c6c0:	4611                	li	a2,4
        STARTED.store(true, Ordering::SeqCst);
    8000c6c2:	0cc10323          	sb	a2,198(sp)

000000008000c6c6 <.LBB2_48>:
    8000c6c6:	00067517          	auipc	a0,0x67
    8000c6ca:	ebb50513          	addi	a0,a0,-325 # 80073581 <_ZN6kernel7STARTED17h3a2948c645b636c9E>
    8000c6ce:	4585                	li	a1,1
    8000c6d0:	ffff8097          	auipc	ra,0xffff8
    8000c6d4:	01c080e7          	jalr	28(ra) # 800046ec <_ZN4core4sync6atomic10AtomicBool5store17h325e21ca90edd7e7E>
    8000c6d8:	a009                	j	8000c6da <.LBB2_48+0x14>
        sstatus::intr_on();
    8000c6da:	00012097          	auipc	ra,0x12
    8000c6de:	c6a080e7          	jalr	-918(ra) # 8001e344 <_ZN6kernel4arch5riscv8register7sstatus7intr_on17h10d927cfe74faba7E>
    8000c6e2:	a009                	j	8000c6e4 <.LBB2_48+0x1e>
    if cpu::cpuid() == 0 {
    8000c6e4:	a065                	j	8000c78c <.LBB2_52>
    8000c6e6:	4591                	li	a1,4
    } else {
        while !STARTED.load(Ordering::SeqCst){}
    8000c6e8:	0cb103a3          	sb	a1,199(sp)

000000008000c6ec <.LBB2_49>:
    8000c6ec:	00067517          	auipc	a0,0x67
    8000c6f0:	e9550513          	addi	a0,a0,-363 # 80073581 <_ZN6kernel7STARTED17h3a2948c645b636c9E>
    8000c6f4:	ffff8097          	auipc	ra,0xffff8
    8000c6f8:	f7a080e7          	jalr	-134(ra) # 8000466e <_ZN4core4sync6atomic10AtomicBool4load17h49a663f50dd66935E>
    8000c6fc:	ec2a                	sd	a0,24(sp)
    8000c6fe:	a009                	j	8000c700 <.LBB2_49+0x14>
    8000c700:	6562                	ld	a0,24(sp)
    8000c702:	4581                	li	a1,0
    8000c704:	00b50963          	beq	a0,a1,8000c716 <.LBB2_49+0x2a>
    8000c708:	a009                	j	8000c70a <.LBB2_49+0x1e>
        println!("hart {} starting\n", cpu::cpuid());
    8000c70a:	00005097          	auipc	ra,0x5
    8000c70e:	68c080e7          	jalr	1676(ra) # 80011d96 <_ZN6kernel7process3cpu5cpuid17h605093a6a9a60164E>
    8000c712:	ea2a                	sd	a0,272(sp)
    8000c714:	a011                	j	8000c718 <.LBB2_49+0x2c>
        while !STARTED.load(Ordering::SeqCst){}
    8000c716:	bfc1                	j	8000c6e6 <.LBB2_48+0x20>
    8000c718:	0a08                	addi	a0,sp,272
        println!("hart {} starting\n", cpu::cpuid());
    8000c71a:	e62a                	sd	a0,264(sp)
    8000c71c:	ee2a                	sd	a0,280(sp)

000000008000c71e <.LBB2_50>:
    8000c71e:	00018597          	auipc	a1,0x18
    8000c722:	1e458593          	addi	a1,a1,484 # 80024902 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h9c6c4af1578f7c29E>
    8000c726:	00013097          	auipc	ra,0x13
    8000c72a:	f7a080e7          	jalr	-134(ra) # 8001f6a0 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    8000c72e:	e42a                	sd	a0,8(sp)
    8000c730:	e82e                	sd	a1,16(sp)
    8000c732:	a009                	j	8000c734 <.LBB2_50+0x16>
    8000c734:	6542                	ld	a0,16(sp)
    8000c736:	65a2                	ld	a1,8(sp)
    8000c738:	fdae                	sd	a1,248(sp)
    8000c73a:	e22a                	sd	a0,256(sp)

000000008000c73c <.LBB2_51>:
    8000c73c:	0001b597          	auipc	a1,0x1b
    8000c740:	56c58593          	addi	a1,a1,1388 # 80027ca8 <.L__unnamed_8>
    8000c744:	01a8                	addi	a0,sp,200
    8000c746:	4609                	li	a2,2
    8000c748:	19b4                	addi	a3,sp,248
    8000c74a:	4705                	li	a4,1
    8000c74c:	ffff9097          	auipc	ra,0xffff9
    8000c750:	d1e080e7          	jalr	-738(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8000c754:	a009                	j	8000c756 <.LBB2_51+0x1a>
    8000c756:	01a8                	addi	a0,sp,200
    8000c758:	00011097          	auipc	ra,0x11
    8000c75c:	5f4080e7          	jalr	1524(ra) # 8001dd4c <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8000c760:	a009                	j	8000c762 <.LBB2_51+0x26>
        kvm_init_hart(); // turn on paging
    8000c762:	ffffe097          	auipc	ra,0xffffe
    8000c766:	058080e7          	jalr	88(ra) # 8000a7ba <_ZN6kernel6memory7mapping10kernel_map13kvm_init_hart17hca08c717b940e5bcE>
    8000c76a:	a009                	j	8000c76c <.LBB2_51+0x30>
        trap_init_hart(); // install kernel trap vector
    8000c76c:	ffffa097          	auipc	ra,0xffffa
    8000c770:	a14080e7          	jalr	-1516(ra) # 80006180 <_ZN6kernel4trap14trap_init_hart17h35cf9f3a8bf40f94E>
    8000c774:	a009                	j	8000c776 <.LBB2_51+0x3a>
        plic_init(); // set up interrupt controller
    8000c776:	00011097          	auipc	ra,0x11
    8000c77a:	2d0080e7          	jalr	720(ra) # 8001da46 <_ZN6kernel6driver4plic9plic_init17he281b1081f5a24ddE>
    8000c77e:	a009                	j	8000c780 <.LBB2_51+0x44>
        plic_init_hart(); // ask PLIC for device interrupts
    8000c780:	00011097          	auipc	ra,0x11
    8000c784:	2f6080e7          	jalr	758(ra) # 8001da76 <_ZN6kernel6driver4plic14plic_init_hart17he37af6da421066b1E>
    8000c788:	a009                	j	8000c78a <.LBB2_51+0x4e>
    if cpu::cpuid() == 0 {
    8000c78a:	a009                	j	8000c78c <.LBB2_52>

000000008000c78c <.LBB2_52>:
    }
    CPU_MANAGER.scheduler();
    8000c78c:	00067517          	auipc	a0,0x67
    8000c790:	9b450513          	addi	a0,a0,-1612 # 80073140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    8000c794:	00005097          	auipc	ra,0x5
    8000c798:	6d0080e7          	jalr	1744(ra) # 80011e64 <_ZN6kernel7process3cpu10CPUManager9scheduler17hecedd2e89c301e93E>
    8000c79c:	a009                	j	8000c79e <.LBB2_52+0x12>
    
}
    8000c79e:	70b2                	ld	ra,296(sp)
    8000c7a0:	6155                	addi	sp,sp,304
    8000c7a2:	8082                	ret

Disassembly of section .text.rust_oom:

000000008000c7a4 <rust_oom>:

#[global_allocator]
pub static KERNEL_HEAP: KernelHeap = KernelHeap::uninit();

#[alloc_error_handler]
fn alloc_error_handler(layout: Layout) -> ! {
    8000c7a4:	7119                	addi	sp,sp,-128
    8000c7a6:	fc86                	sd	ra,120(sp)
    8000c7a8:	ec2a                	sd	a0,24(sp)
    8000c7aa:	f02e                	sd	a1,32(sp)
    8000c7ac:	0828                	addi	a0,sp,24
    panic!("alloc error: {:?}", layout);
    8000c7ae:	f4aa                	sd	a0,104(sp)
    8000c7b0:	f8aa                	sd	a0,112(sp)

000000008000c7b2 <.LBB0_3>:
    8000c7b2:	00018597          	auipc	a1,0x18
    8000c7b6:	7ea58593          	addi	a1,a1,2026 # 80024f9c <_ZN64_$LT$core..alloc..layout..Layout$u20$as$u20$core..fmt..Debug$GT$3fmt17h791c624323e1e5daE>
    8000c7ba:	00013097          	auipc	ra,0x13
    8000c7be:	f08080e7          	jalr	-248(ra) # 8001f6c2 <_ZN4core3fmt10ArgumentV13new17hc2eeb6f5565b6dd2E>
    8000c7c2:	e42a                	sd	a0,8(sp)
    8000c7c4:	e82e                	sd	a1,16(sp)
    8000c7c6:	a009                	j	8000c7c8 <.LBB0_3+0x16>
    8000c7c8:	6542                	ld	a0,16(sp)
    8000c7ca:	65a2                	ld	a1,8(sp)
    8000c7cc:	ecae                	sd	a1,88(sp)
    8000c7ce:	f0aa                	sd	a0,96(sp)

000000008000c7d0 <.LBB0_4>:
    8000c7d0:	0001b597          	auipc	a1,0x1b
    8000c7d4:	67058593          	addi	a1,a1,1648 # 80027e40 <.L__unnamed_1>
    8000c7d8:	1028                	addi	a0,sp,40
    8000c7da:	08b4                	addi	a3,sp,88
    8000c7dc:	4705                	li	a4,1
    8000c7de:	863a                	mv	a2,a4
    8000c7e0:	ffff9097          	auipc	ra,0xffff9
    8000c7e4:	c8a080e7          	jalr	-886(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8000c7e8:	a009                	j	8000c7ea <.LBB0_5>

000000008000c7ea <.LBB0_5>:
    8000c7ea:	0001b597          	auipc	a1,0x1b
    8000c7ee:	67e58593          	addi	a1,a1,1662 # 80027e68 <.L__unnamed_2>
    8000c7f2:	1028                	addi	a0,sp,40
    8000c7f4:	00016097          	auipc	ra,0x16
    8000c7f8:	aee080e7          	jalr	-1298(ra) # 800222e2 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
	...

Disassembly of section .text._ZN87_$LT$kernel..memory..kalloc..KernelHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17h526e18d88530d166E:

000000008000c7fe <_ZN87_$LT$kernel..memory..kalloc..KernelHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17h526e18d88530d166E>:

// kernel heap
pub struct KernelHeap(Spinlock<BuddySystem>);

unsafe impl GlobalAlloc for KernelHeap {
    unsafe fn alloc(&self, layout: Layout) -> *mut u8 {
    8000c7fe:	715d                	addi	sp,sp,-80
    8000c800:	e486                	sd	ra,72(sp)
    8000c802:	ec32                	sd	a2,24(sp)
    8000c804:	f02e                	sd	a1,32(sp)
    8000c806:	f82a                	sd	a0,48(sp)
    8000c808:	fc2e                	sd	a1,56(sp)
    8000c80a:	e0b2                	sd	a2,64(sp)
        self.0.acquire().alloc(layout)
    8000c80c:	00004097          	auipc	ra,0x4
    8000c810:	ac2080e7          	jalr	-1342(ra) # 800102ce <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h107253eaf5028ed4E>
    8000c814:	f42a                	sd	a0,40(sp)
    8000c816:	a009                	j	8000c818 <_ZN87_$LT$kernel..memory..kalloc..KernelHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17h526e18d88530d166E+0x1a>
    8000c818:	1028                	addi	a0,sp,40
    8000c81a:	00005097          	auipc	ra,0x5
    8000c81e:	e9e080e7          	jalr	-354(ra) # 800116b8 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h5eeb9448b47ad682E>
    8000c822:	e82a                	sd	a0,16(sp)
    8000c824:	a009                	j	8000c826 <_ZN87_$LT$kernel..memory..kalloc..KernelHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17h526e18d88530d166E+0x28>
    8000c826:	6662                	ld	a2,24(sp)
    8000c828:	7582                	ld	a1,32(sp)
    8000c82a:	6542                	ld	a0,16(sp)
    8000c82c:	00013097          	auipc	ra,0x13
    8000c830:	7a8080e7          	jalr	1960(ra) # 8001ffd4 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E>
    8000c834:	e42a                	sd	a0,8(sp)
    8000c836:	a009                	j	8000c838 <_ZN87_$LT$kernel..memory..kalloc..KernelHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17h526e18d88530d166E+0x3a>
    8000c838:	1028                	addi	a0,sp,40
    }
    8000c83a:	ffffa097          	auipc	ra,0xffffa
    8000c83e:	7a0080e7          	jalr	1952(ra) # 80006fda <_ZN4core3ptr88drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$allocator..BuddySystem$GT$$GT$17hd20388e8ca3384f9E>
    8000c842:	a009                	j	8000c844 <_ZN87_$LT$kernel..memory..kalloc..KernelHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17h526e18d88530d166E+0x46>
    8000c844:	6522                	ld	a0,8(sp)
    8000c846:	60a6                	ld	ra,72(sp)
    8000c848:	6161                	addi	sp,sp,80
    8000c84a:	8082                	ret

Disassembly of section .text._ZN87_$LT$kernel..memory..kalloc..KernelHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$7dealloc17hf9dbc9c2cc300335E:

000000008000c84c <_ZN87_$LT$kernel..memory..kalloc..KernelHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$7dealloc17hf9dbc9c2cc300335E>:

    unsafe fn dealloc(&self, ptr: *mut u8, layout: Layout) {
    8000c84c:	715d                	addi	sp,sp,-80
    8000c84e:	e486                	sd	ra,72(sp)
    8000c850:	e436                	sd	a3,8(sp)
    8000c852:	e832                	sd	a2,16(sp)
    8000c854:	ec2e                	sd	a1,24(sp)
    8000c856:	f42a                	sd	a0,40(sp)
    8000c858:	f82e                	sd	a1,48(sp)
    8000c85a:	fc32                	sd	a2,56(sp)
    8000c85c:	e0b6                	sd	a3,64(sp)
        self.0.acquire().dealloc(ptr, layout)
    8000c85e:	00004097          	auipc	ra,0x4
    8000c862:	a70080e7          	jalr	-1424(ra) # 800102ce <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h107253eaf5028ed4E>
    8000c866:	f02a                	sd	a0,32(sp)
    8000c868:	a009                	j	8000c86a <_ZN87_$LT$kernel..memory..kalloc..KernelHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$7dealloc17hf9dbc9c2cc300335E+0x1e>
    8000c86a:	1008                	addi	a0,sp,32
    8000c86c:	00005097          	auipc	ra,0x5
    8000c870:	e4c080e7          	jalr	-436(ra) # 800116b8 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h5eeb9448b47ad682E>
    8000c874:	e02a                	sd	a0,0(sp)
    8000c876:	a009                	j	8000c878 <_ZN87_$LT$kernel..memory..kalloc..KernelHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$7dealloc17hf9dbc9c2cc300335E+0x2c>
    8000c878:	66a2                	ld	a3,8(sp)
    8000c87a:	6642                	ld	a2,16(sp)
    8000c87c:	65e2                	ld	a1,24(sp)
    8000c87e:	6502                	ld	a0,0(sp)
    8000c880:	00014097          	auipc	ra,0x14
    8000c884:	aa0080e7          	jalr	-1376(ra) # 80020320 <_ZN9allocator11BuddySystem7dealloc17hfe9c60ecf0af29ebE>
    8000c888:	a009                	j	8000c88a <_ZN87_$LT$kernel..memory..kalloc..KernelHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$7dealloc17hf9dbc9c2cc300335E+0x3e>
    8000c88a:	1008                	addi	a0,sp,32
    }
    8000c88c:	ffffa097          	auipc	ra,0xffffa
    8000c890:	74e080e7          	jalr	1870(ra) # 80006fda <_ZN4core3ptr88drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$allocator..BuddySystem$GT$$GT$17hd20388e8ca3384f9E>
    8000c894:	a009                	j	8000c896 <_ZN87_$LT$kernel..memory..kalloc..KernelHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$7dealloc17hf9dbc9c2cc300335E+0x4a>
    8000c896:	60a6                	ld	ra,72(sp)
    8000c898:	6161                	addi	sp,sp,80
    8000c89a:	8082                	ret

Disassembly of section .text._ZN6kernel6memory6kalloc10KernelHeap4init17he7fa11863b607d55E:

000000008000c89c <_ZN6kernel6memory6kalloc10KernelHeap4init17he7fa11863b607d55E>:
impl KernelHeap {
    const fn uninit() -> Self {
        Self(Spinlock::new(BuddySystem::uninit(), "kernel heap"))
    }

    unsafe fn init(&self, start: usize, end: usize) {
    8000c89c:	7111                	addi	sp,sp,-256
    8000c89e:	fd86                	sd	ra,248(sp)
    8000c8a0:	f032                	sd	a2,32(sp)
    8000c8a2:	f42e                	sd	a1,40(sp)
    8000c8a4:	edaa                	sd	a0,216(sp)
    8000c8a6:	f1ae                	sd	a1,224(sp)
    8000c8a8:	f5b2                	sd	a2,232(sp)
        let res = self.0.acquire().init(start, end, LEAF_SIZE, MAX_ALIGNMENT);
    8000c8aa:	00004097          	auipc	ra,0x4
    8000c8ae:	a24080e7          	jalr	-1500(ra) # 800102ce <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h107253eaf5028ed4E>
    8000c8b2:	e4aa                	sd	a0,72(sp)
    8000c8b4:	a009                	j	8000c8b6 <_ZN6kernel6memory6kalloc10KernelHeap4init17he7fa11863b607d55E+0x1a>
    8000c8b6:	00a8                	addi	a0,sp,72
    8000c8b8:	00005097          	auipc	ra,0x5
    8000c8bc:	e00080e7          	jalr	-512(ra) # 800116b8 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h5eeb9448b47ad682E>
    8000c8c0:	ec2a                	sd	a0,24(sp)
    8000c8c2:	a009                	j	8000c8c4 <_ZN6kernel6memory6kalloc10KernelHeap4init17he7fa11863b607d55E+0x28>
    8000c8c4:	7602                	ld	a2,32(sp)
    8000c8c6:	75a2                	ld	a1,40(sp)
    8000c8c8:	6562                	ld	a0,24(sp)
    8000c8ca:	46c1                	li	a3,16
    8000c8cc:	6705                	lui	a4,0x1
    8000c8ce:	00013097          	auipc	ra,0x13
    8000c8d2:	1be080e7          	jalr	446(ra) # 8001fa8c <_ZN9allocator11BuddySystem4init17h0838f8d4c4026c43E>
    8000c8d6:	fc2a                	sd	a0,56(sp)
    8000c8d8:	e0ae                	sd	a1,64(sp)
    8000c8da:	a009                	j	8000c8dc <_ZN6kernel6memory6kalloc10KernelHeap4init17he7fa11863b607d55E+0x40>
    8000c8dc:	00a8                	addi	a0,sp,72
    8000c8de:	ffffa097          	auipc	ra,0xffffa
    8000c8e2:	6fc080e7          	jalr	1788(ra) # 80006fda <_ZN4core3ptr88drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$allocator..BuddySystem$GT$$GT$17hd20388e8ca3384f9E>
    8000c8e6:	a009                	j	8000c8e8 <_ZN6kernel6memory6kalloc10KernelHeap4init17he7fa11863b607d55E+0x4c>
        match res {
            Ok(()) => {
    8000c8e8:	7562                	ld	a0,56(sp)
    8000c8ea:	00a035b3          	snez	a1,a0
    8000c8ee:	4581                	li	a1,0
    8000c8f0:	02b50663          	beq	a0,a1,8000c91c <.LBB3_16>
    8000c8f4:	a009                	j	8000c8f6 <_ZN6kernel6memory6kalloc10KernelHeap4init17he7fa11863b607d55E+0x5a>
                println!("KernelHeap: success to init.");
            },

            Err(err) => {
    8000c8f6:	75e2                	ld	a1,56(sp)
    8000c8f8:	6506                	ld	a0,64(sp)
    8000c8fa:	e12e                	sd	a1,128(sp)
    8000c8fc:	e52a                	sd	a0,136(sp)
    8000c8fe:	0108                	addi	a0,sp,128
                println!("KernelHeap: init error: {}.", err);
    8000c900:	e9aa                	sd	a0,208(sp)
    8000c902:	f9aa                	sd	a0,240(sp)

000000008000c904 <.LBB3_15>:
    8000c904:	00012597          	auipc	a1,0x12
    8000c908:	cb058593          	addi	a1,a1,-848 # 8001e5b4 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E>
    8000c90c:	00012097          	auipc	ra,0x12
    8000c910:	cee080e7          	jalr	-786(ra) # 8001e5fa <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>
    8000c914:	e42a                	sd	a0,8(sp)
    8000c916:	e82e                	sd	a1,16(sp)
    8000c918:	a80d                	j	8000c94a <.LBB3_17+0x26>
	...

000000008000c91c <.LBB3_16>:
                println!("KernelHeap: success to init.");
    8000c91c:	0001b597          	auipc	a1,0x1b
    8000c920:	5c458593          	addi	a1,a1,1476 # 80027ee0 <.L__unnamed_3>

000000008000c924 <.LBB3_17>:
    8000c924:	0001b697          	auipc	a3,0x1b
    8000c928:	5cc68693          	addi	a3,a3,1484 # 80027ef0 <.L__unnamed_14>
    8000c92c:	0888                	addi	a0,sp,80
    8000c92e:	4605                	li	a2,1
    8000c930:	4701                	li	a4,0
    8000c932:	ffff9097          	auipc	ra,0xffff9
    8000c936:	b38080e7          	jalr	-1224(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8000c93a:	a009                	j	8000c93c <.LBB3_17+0x18>
    8000c93c:	0888                	addi	a0,sp,80
    8000c93e:	00011097          	auipc	ra,0x11
    8000c942:	40e080e7          	jalr	1038(ra) # 8001dd4c <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8000c946:	a009                	j	8000c948 <.LBB3_17+0x24>
        match res {
    8000c948:	a80d                	j	8000c97a <.LBB3_18+0x28>
                println!("KernelHeap: init error: {}.", err);
    8000c94a:	6542                	ld	a0,16(sp)
    8000c94c:	65a2                	ld	a1,8(sp)
    8000c94e:	e1ae                	sd	a1,192(sp)
    8000c950:	e5aa                	sd	a0,200(sp)

000000008000c952 <.LBB3_18>:
    8000c952:	0001b597          	auipc	a1,0x1b
    8000c956:	54e58593          	addi	a1,a1,1358 # 80027ea0 <.L__unnamed_5>
    8000c95a:	0908                	addi	a0,sp,144
    8000c95c:	4609                	li	a2,2
    8000c95e:	0194                	addi	a3,sp,192
    8000c960:	4705                	li	a4,1
    8000c962:	ffff9097          	auipc	ra,0xffff9
    8000c966:	b08080e7          	jalr	-1272(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8000c96a:	a009                	j	8000c96c <.LBB3_18+0x1a>
    8000c96c:	0908                	addi	a0,sp,144
    8000c96e:	00011097          	auipc	ra,0x11
    8000c972:	3de080e7          	jalr	990(ra) # 8001dd4c <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8000c976:	a009                	j	8000c978 <.LBB3_18+0x26>
        match res {
    8000c978:	a009                	j	8000c97a <.LBB3_18+0x28>
            }
        }
    }
    8000c97a:	70ee                	ld	ra,248(sp)
    8000c97c:	6111                	addi	sp,sp,256
    8000c97e:	8082                	ret

Disassembly of section .text._ZN6kernel6memory6kalloc10KernelHeap5kinit17hadc76a3ae98e4bd9E:

000000008000c980 <_ZN6kernel6memory6kalloc10KernelHeap5kinit17hadc76a3ae98e4bd9E>:

    pub unsafe fn kinit(&self) {
    8000c980:	7131                	addi	sp,sp,-192
    8000c982:	fd06                	sd	ra,184(sp)
    8000c984:	ec2a                	sd	a0,24(sp)
    8000c986:	f12a                	sd	a0,160(sp)

000000008000c988 <.LBB4_6>:
        extern "C" {
            fn end();
        }
        let end = end as usize;
    8000c988:	00067517          	auipc	a0,0x67
    8000c98c:	c0850513          	addi	a0,a0,-1016 # 80073590 <end>
    8000c990:	fc2a                	sd	a0,56(sp)
    8000c992:	1828                	addi	a0,sp,56
        println!("KernelHeap: available memory: [{:#x}, {:#x})", end, PHYSTOP);
    8000c994:	e92a                	sd	a0,144(sp)

000000008000c996 <.LBB4_7>:
    8000c996:	0001a597          	auipc	a1,0x1a
    8000c99a:	eba58593          	addi	a1,a1,-326 # 80026850 <.L__unnamed_6+0xa8>
    8000c99e:	f02e                	sd	a1,32(sp)
    8000c9a0:	ed2e                	sd	a1,152(sp)
    8000c9a2:	f52a                	sd	a0,168(sp)
    8000c9a4:	f92e                	sd	a1,176(sp)

000000008000c9a6 <.LBB4_8>:
    8000c9a6:	00018597          	auipc	a1,0x18
    8000c9aa:	a0e58593          	addi	a1,a1,-1522 # 800243b4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h760b07191d46b3f2E>
    8000c9ae:	00013097          	auipc	ra,0x13
    8000c9b2:	cf2080e7          	jalr	-782(ra) # 8001f6a0 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    8000c9b6:	f42a                	sd	a0,40(sp)
    8000c9b8:	f82e                	sd	a1,48(sp)
    8000c9ba:	a009                	j	8000c9bc <.LBB4_8+0x16>
    8000c9bc:	7502                	ld	a0,32(sp)

000000008000c9be <.LBB4_9>:
    8000c9be:	00018597          	auipc	a1,0x18
    8000c9c2:	9f658593          	addi	a1,a1,-1546 # 800243b4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h760b07191d46b3f2E>
    8000c9c6:	00013097          	auipc	ra,0x13
    8000c9ca:	cda080e7          	jalr	-806(ra) # 8001f6a0 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    8000c9ce:	e42a                	sd	a0,8(sp)
    8000c9d0:	e82e                	sd	a1,16(sp)
    8000c9d2:	a009                	j	8000c9d4 <.LBB4_9+0x16>
    8000c9d4:	6542                	ld	a0,16(sp)
    8000c9d6:	65a2                	ld	a1,8(sp)
    8000c9d8:	7642                	ld	a2,48(sp)
    8000c9da:	76a2                	ld	a3,40(sp)
    8000c9dc:	f8b6                	sd	a3,112(sp)
    8000c9de:	fcb2                	sd	a2,120(sp)
    8000c9e0:	e12e                	sd	a1,128(sp)
    8000c9e2:	e52a                	sd	a0,136(sp)

000000008000c9e4 <.LBB4_10>:
    8000c9e4:	0001b597          	auipc	a1,0x1b
    8000c9e8:	53458593          	addi	a1,a1,1332 # 80027f18 <.L__unnamed_7>

000000008000c9ec <.LBB4_11>:
    8000c9ec:	0001b797          	auipc	a5,0x1b
    8000c9f0:	55c78793          	addi	a5,a5,1372 # 80027f48 <.L__unnamed_8>
    8000c9f4:	0088                	addi	a0,sp,64
    8000c9f6:	460d                	li	a2,3
    8000c9f8:	1894                	addi	a3,sp,112
    8000c9fa:	4809                	li	a6,2
    8000c9fc:	8742                	mv	a4,a6
    8000c9fe:	ffff9097          	auipc	ra,0xffff9
    8000ca02:	a46080e7          	jalr	-1466(ra) # 80005444 <_ZN4core3fmt9Arguments16new_v1_formatted17hf6d3ed0f8e821319E>
    8000ca06:	a009                	j	8000ca08 <.LBB4_11+0x1c>
    8000ca08:	0088                	addi	a0,sp,64
    8000ca0a:	00011097          	auipc	ra,0x11
    8000ca0e:	342080e7          	jalr	834(ra) # 8001dd4c <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8000ca12:	a009                	j	8000ca14 <.LBB4_11+0x28>
        self.init(end, PHYSTOP);
    8000ca14:	6562                	ld	a0,24(sp)
    8000ca16:	75e2                	ld	a1,56(sp)
    8000ca18:	4645                	li	a2,17
    8000ca1a:	066e                	slli	a2,a2,0x1b
    8000ca1c:	00000097          	auipc	ra,0x0
    8000ca20:	e80080e7          	jalr	-384(ra) # 8000c89c <_ZN6kernel6memory6kalloc10KernelHeap4init17he7fa11863b607d55E>
    8000ca24:	a009                	j	8000ca26 <.LBB4_11+0x3a>
    }
    8000ca26:	70ea                	ld	ra,184(sp)
    8000ca28:	6129                	addi	sp,sp,192
    8000ca2a:	8082                	ret

Disassembly of section .text.__rg_alloc:

000000008000ca2c <__rg_alloc>:
pub static KERNEL_HEAP: KernelHeap = KernelHeap::uninit();
    8000ca2c:	7179                	addi	sp,sp,-48
    8000ca2e:	f406                	sd	ra,40(sp)
    8000ca30:	ec2a                	sd	a0,24(sp)
    8000ca32:	f02e                	sd	a1,32(sp)
    8000ca34:	00012097          	auipc	ra,0x12
    8000ca38:	f30080e7          	jalr	-208(ra) # 8001e964 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h7d187b5349095d20E>
    8000ca3c:	e42a                	sd	a0,8(sp)
    8000ca3e:	e82e                	sd	a1,16(sp)
    8000ca40:	a009                	j	8000ca42 <__rg_alloc+0x16>
    8000ca42:	6642                	ld	a2,16(sp)
    8000ca44:	65a2                	ld	a1,8(sp)

000000008000ca46 <.LBB5_3>:
    8000ca46:	0004b517          	auipc	a0,0x4b
    8000ca4a:	afa50513          	addi	a0,a0,-1286 # 80057540 <_ZN6kernel6memory6kalloc11KERNEL_HEAP17hee4af7794785bdacE>
    8000ca4e:	00000097          	auipc	ra,0x0
    8000ca52:	db0080e7          	jalr	-592(ra) # 8000c7fe <_ZN87_$LT$kernel..memory..kalloc..KernelHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17h526e18d88530d166E>
    8000ca56:	e02a                	sd	a0,0(sp)
    8000ca58:	a009                	j	8000ca5a <.LBB5_3+0x14>
    8000ca5a:	6502                	ld	a0,0(sp)
    8000ca5c:	70a2                	ld	ra,40(sp)
    8000ca5e:	6145                	addi	sp,sp,48
    8000ca60:	8082                	ret

Disassembly of section .text.__rg_dealloc:

000000008000ca62 <__rg_dealloc>:
    8000ca62:	715d                	addi	sp,sp,-80
    8000ca64:	e486                	sd	ra,72(sp)
    8000ca66:	e432                	sd	a2,8(sp)
    8000ca68:	862e                	mv	a2,a1
    8000ca6a:	65a2                	ld	a1,8(sp)
    8000ca6c:	e832                	sd	a2,16(sp)
    8000ca6e:	862a                	mv	a2,a0
    8000ca70:	6542                	ld	a0,16(sp)
    8000ca72:	ec32                	sd	a2,24(sp)
    8000ca74:	f832                	sd	a2,48(sp)
    8000ca76:	fc2a                	sd	a0,56(sp)
    8000ca78:	e0ae                	sd	a1,64(sp)
    8000ca7a:	00012097          	auipc	ra,0x12
    8000ca7e:	eea080e7          	jalr	-278(ra) # 8001e964 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h7d187b5349095d20E>
    8000ca82:	f02a                	sd	a0,32(sp)
    8000ca84:	f42e                	sd	a1,40(sp)
    8000ca86:	a009                	j	8000ca88 <__rg_dealloc+0x26>
    8000ca88:	76a2                	ld	a3,40(sp)
    8000ca8a:	7602                	ld	a2,32(sp)
    8000ca8c:	65e2                	ld	a1,24(sp)

000000008000ca8e <.LBB6_3>:
    8000ca8e:	0004b517          	auipc	a0,0x4b
    8000ca92:	ab250513          	addi	a0,a0,-1358 # 80057540 <_ZN6kernel6memory6kalloc11KERNEL_HEAP17hee4af7794785bdacE>
    8000ca96:	00000097          	auipc	ra,0x0
    8000ca9a:	db6080e7          	jalr	-586(ra) # 8000c84c <_ZN87_$LT$kernel..memory..kalloc..KernelHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$7dealloc17hf9dbc9c2cc300335E>
    8000ca9e:	a009                	j	8000caa0 <.LBB6_3+0x12>
    8000caa0:	60a6                	ld	ra,72(sp)
    8000caa2:	6161                	addi	sp,sp,80
    8000caa4:	8082                	ret

Disassembly of section .text.__rg_realloc:

000000008000caa6 <__rg_realloc>:
    8000caa6:	711d                	addi	sp,sp,-96
    8000caa8:	ec86                	sd	ra,88(sp)
    8000caaa:	e436                	sd	a3,8(sp)
    8000caac:	e832                	sd	a2,16(sp)
    8000caae:	862e                	mv	a2,a1
    8000cab0:	65c2                	ld	a1,16(sp)
    8000cab2:	ec32                	sd	a2,24(sp)
    8000cab4:	862a                	mv	a2,a0
    8000cab6:	6562                	ld	a0,24(sp)
    8000cab8:	f032                	sd	a2,32(sp)
    8000caba:	fc32                	sd	a2,56(sp)
    8000cabc:	e0aa                	sd	a0,64(sp)
    8000cabe:	e4ae                	sd	a1,72(sp)
    8000cac0:	e8b6                	sd	a3,80(sp)
    8000cac2:	00012097          	auipc	ra,0x12
    8000cac6:	ea2080e7          	jalr	-350(ra) # 8001e964 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h7d187b5349095d20E>
    8000caca:	f42a                	sd	a0,40(sp)
    8000cacc:	f82e                	sd	a1,48(sp)
    8000cace:	a009                	j	8000cad0 <__rg_realloc+0x2a>
    8000cad0:	6722                	ld	a4,8(sp)
    8000cad2:	76c2                	ld	a3,48(sp)
    8000cad4:	7622                	ld	a2,40(sp)
    8000cad6:	7582                	ld	a1,32(sp)

000000008000cad8 <.LBB7_3>:
    8000cad8:	0004b517          	auipc	a0,0x4b
    8000cadc:	a6850513          	addi	a0,a0,-1432 # 80057540 <_ZN6kernel6memory6kalloc11KERNEL_HEAP17hee4af7794785bdacE>
    8000cae0:	ffff8097          	auipc	ra,0xffff8
    8000cae4:	03e080e7          	jalr	62(ra) # 80004b1e <_ZN4core5alloc6global11GlobalAlloc7realloc17h24a579bea5cb79d9E>
    8000cae8:	e02a                	sd	a0,0(sp)
    8000caea:	a009                	j	8000caec <.LBB7_3+0x14>
    8000caec:	6502                	ld	a0,0(sp)
    8000caee:	60e6                	ld	ra,88(sp)
    8000caf0:	6125                	addi	sp,sp,96
    8000caf2:	8082                	ret

Disassembly of section .text.__rg_alloc_zeroed:

000000008000caf4 <__rg_alloc_zeroed>:
    8000caf4:	7179                	addi	sp,sp,-48
    8000caf6:	f406                	sd	ra,40(sp)
    8000caf8:	ec2a                	sd	a0,24(sp)
    8000cafa:	f02e                	sd	a1,32(sp)
    8000cafc:	00012097          	auipc	ra,0x12
    8000cb00:	e68080e7          	jalr	-408(ra) # 8001e964 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h7d187b5349095d20E>
    8000cb04:	e42a                	sd	a0,8(sp)
    8000cb06:	e82e                	sd	a1,16(sp)
    8000cb08:	a009                	j	8000cb0a <__rg_alloc_zeroed+0x16>
    8000cb0a:	6642                	ld	a2,16(sp)
    8000cb0c:	65a2                	ld	a1,8(sp)

000000008000cb0e <.LBB8_3>:
    8000cb0e:	0004b517          	auipc	a0,0x4b
    8000cb12:	a3250513          	addi	a0,a0,-1486 # 80057540 <_ZN6kernel6memory6kalloc11KERNEL_HEAP17hee4af7794785bdacE>
    8000cb16:	ffff8097          	auipc	ra,0xffff8
    8000cb1a:	fa4080e7          	jalr	-92(ra) # 80004aba <_ZN4core5alloc6global11GlobalAlloc12alloc_zeroed17h5bb5edba03a2227bE>
    8000cb1e:	e02a                	sd	a0,0(sp)
    8000cb20:	a009                	j	8000cb22 <.LBB8_3+0x14>
    8000cb22:	6502                	ld	a0,0(sp)
    8000cb24:	70a2                	ld	ra,40(sp)
    8000cb26:	6145                	addi	sp,sp,48
    8000cb28:	8082                	ret

Disassembly of section .text._ZN6kernel6driver11virtio_disk4Disk4init28_$u7b$$u7b$closure$u7d$$u7d$17h8a5adb868ad71917E:

000000008000cb2a <_ZN6kernel6driver11virtio_disk4Disk4init28_$u7b$$u7b$closure$u7d$$u7d$17h8a5adb868ad71917E>:
        self.free.iter_mut().for_each(|f| *f = true);
    8000cb2a:	1141                	addi	sp,sp,-16
    8000cb2c:	e02a                	sd	a0,0(sp)
    8000cb2e:	e42e                	sd	a1,8(sp)
    8000cb30:	4505                	li	a0,1
    8000cb32:	00a58023          	sb	a0,0(a1)
    8000cb36:	0141                	addi	sp,sp,16
    8000cb38:	8082                	ret

Disassembly of section .text._ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h37d2ccc52635f8a7E:

000000008000cb3a <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h37d2ccc52635f8a7E>:
    fn from(t: T) -> T {
    8000cb3a:	1141                	addi	sp,sp,-16
    }
    8000cb3c:	0141                	addi	sp,sp,16
    8000cb3e:	8082                	ret

Disassembly of section .text._ZN81_$LT$core..str..iter..Bytes$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h47cb47c87defe3efE:

000000008000cb40 <_ZN81_$LT$core..str..iter..Bytes$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h47cb47c87defe3efE>:
#[stable(feature = "rust1", since = "1.0.0")]
impl Iterator for Bytes<'_> {
    type Item = u8;

    #[inline]
    fn next(&mut self) -> Option<u8> {
    8000cb40:	1101                	addi	sp,sp,-32
    8000cb42:	ec06                	sd	ra,24(sp)
    8000cb44:	e82a                	sd	a0,16(sp)
        self.0.next()
    8000cb46:	ffff8097          	auipc	ra,0xffff8
    8000cb4a:	f38080e7          	jalr	-200(ra) # 80004a7e <_ZN104_$LT$core..iter..adapters..copied..Copied$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h5c47b4a6235bae37E>
    8000cb4e:	e02a                	sd	a0,0(sp)
    8000cb50:	e42e                	sd	a1,8(sp)
    8000cb52:	a009                	j	8000cb54 <_ZN81_$LT$core..str..iter..Bytes$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h47cb47c87defe3efE+0x14>
    }
    8000cb54:	65a2                	ld	a1,8(sp)
    8000cb56:	6502                	ld	a0,0(sp)
    8000cb58:	8905                	andi	a0,a0,1
    8000cb5a:	60e2                	ld	ra,24(sp)
    8000cb5c:	6105                	addi	sp,sp,32
    8000cb5e:	8082                	ret

Disassembly of section .text._ZN81_$LT$core..str..iter..Chars$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h562590808242c9ccE:

000000008000cb60 <_ZN81_$LT$core..str..iter..Chars$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h562590808242c9ccE>:
    fn next(&mut self) -> Option<char> {
    8000cb60:	7179                	addi	sp,sp,-48
    8000cb62:	f406                	sd	ra,40(sp)
    8000cb64:	f02a                	sd	a0,32(sp)
        next_code_point(&mut self.iter).map(|ch| {
    8000cb66:	ffff9097          	auipc	ra,0xffff9
    8000cb6a:	926080e7          	jalr	-1754(ra) # 8000548c <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E>
    8000cb6e:	e82a                	sd	a0,16(sp)
    8000cb70:	ec2e                	sd	a1,24(sp)
    8000cb72:	a009                	j	8000cb74 <_ZN81_$LT$core..str..iter..Chars$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h562590808242c9ccE+0x14>
    8000cb74:	65e2                	ld	a1,24(sp)
    8000cb76:	6542                	ld	a0,16(sp)
    8000cb78:	00002097          	auipc	ra,0x2
    8000cb7c:	92a080e7          	jalr	-1750(ra) # 8000e4a2 <_ZN4core6option15Option$LT$T$GT$3map17h2838ee6761cb3f47E>
    8000cb80:	1502                	slli	a0,a0,0x20
    8000cb82:	9101                	srli	a0,a0,0x20
    8000cb84:	e42a                	sd	a0,8(sp)
    8000cb86:	a009                	j	8000cb88 <_ZN81_$LT$core..str..iter..Chars$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h562590808242c9ccE+0x28>
    }
    8000cb88:	6522                	ld	a0,8(sp)
    8000cb8a:	70a2                	ld	ra,40(sp)
    8000cb8c:	6145                	addi	sp,sp,48
    8000cb8e:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17hfc3d5eeea9dab8e4E:

000000008000cb90 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17hfc3d5eeea9dab8e4E>:
    pub unsafe fn as_mut<'a>(self) -> Option<&'a mut T> {
    8000cb90:	7179                	addi	sp,sp,-48
    8000cb92:	f406                	sd	ra,40(sp)
    8000cb94:	e42a                	sd	a0,8(sp)
    8000cb96:	f02a                	sd	a0,32(sp)
        if self.is_null() { None } else { unsafe { Some(&mut *self) } }
    8000cb98:	00000097          	auipc	ra,0x0
    8000cb9c:	05c080e7          	jalr	92(ra) # 8000cbf4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hc6fd4c72115f82d3E>
    8000cba0:	e82a                	sd	a0,16(sp)
    8000cba2:	a009                	j	8000cba4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17hfc3d5eeea9dab8e4E+0x14>
    8000cba4:	6542                	ld	a0,16(sp)
    8000cba6:	4581                	li	a1,0
    8000cba8:	00b50663          	beq	a0,a1,8000cbb4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17hfc3d5eeea9dab8e4E+0x24>
    8000cbac:	a009                	j	8000cbae <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17hfc3d5eeea9dab8e4E+0x1e>
    8000cbae:	4501                	li	a0,0
    8000cbb0:	ec2a                	sd	a0,24(sp)
    8000cbb2:	a021                	j	8000cbba <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17hfc3d5eeea9dab8e4E+0x2a>
    8000cbb4:	6522                	ld	a0,8(sp)
    8000cbb6:	ec2a                	sd	a0,24(sp)
    8000cbb8:	a009                	j	8000cbba <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17hfc3d5eeea9dab8e4E+0x2a>
    }
    8000cbba:	6562                	ld	a0,24(sp)
    8000cbbc:	70a2                	ld	ra,40(sp)
    8000cbbe:	6145                	addi	sp,sp,48
    8000cbc0:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_ref17h449f973acae747ffE:

000000008000cbc2 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_ref17h449f973acae747ffE>:
    pub unsafe fn as_ref<'a>(self) -> Option<&'a T> {
    8000cbc2:	7179                	addi	sp,sp,-48
    8000cbc4:	f406                	sd	ra,40(sp)
    8000cbc6:	e42a                	sd	a0,8(sp)
    8000cbc8:	f02a                	sd	a0,32(sp)
        if self.is_null() { None } else { unsafe { Some(&*self) } }
    8000cbca:	00000097          	auipc	ra,0x0
    8000cbce:	02a080e7          	jalr	42(ra) # 8000cbf4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hc6fd4c72115f82d3E>
    8000cbd2:	e82a                	sd	a0,16(sp)
    8000cbd4:	a009                	j	8000cbd6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_ref17h449f973acae747ffE+0x14>
    8000cbd6:	6542                	ld	a0,16(sp)
    8000cbd8:	4581                	li	a1,0
    8000cbda:	00b50663          	beq	a0,a1,8000cbe6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_ref17h449f973acae747ffE+0x24>
    8000cbde:	a009                	j	8000cbe0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_ref17h449f973acae747ffE+0x1e>
    8000cbe0:	4501                	li	a0,0
    8000cbe2:	ec2a                	sd	a0,24(sp)
    8000cbe4:	a021                	j	8000cbec <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_ref17h449f973acae747ffE+0x2a>
    8000cbe6:	6522                	ld	a0,8(sp)
    8000cbe8:	ec2a                	sd	a0,24(sp)
    8000cbea:	a009                	j	8000cbec <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_ref17h449f973acae747ffE+0x2a>
    }
    8000cbec:	6562                	ld	a0,24(sp)
    8000cbee:	70a2                	ld	ra,40(sp)
    8000cbf0:	6145                	addi	sp,sp,48
    8000cbf2:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hc6fd4c72115f82d3E:

000000008000cbf4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hc6fd4c72115f82d3E>:
    pub const fn is_null(self) -> bool {
    8000cbf4:	1101                	addi	sp,sp,-32
    8000cbf6:	ec06                	sd	ra,24(sp)
    8000cbf8:	e82a                	sd	a0,16(sp)
        (self as *mut u8).guaranteed_eq(null_mut())
    8000cbfa:	e42a                	sd	a0,8(sp)
    8000cbfc:	a009                	j	8000cbfe <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hc6fd4c72115f82d3E+0xa>
    8000cbfe:	6522                	ld	a0,8(sp)
    8000cc00:	4581                	li	a1,0
    8000cc02:	00015097          	auipc	ra,0x15
    8000cc06:	43a080e7          	jalr	1082(ra) # 8002203c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$13guaranteed_eq17h32ea8c99c0b8220dE>
    8000cc0a:	e02a                	sd	a0,0(sp)
    8000cc0c:	a009                	j	8000cc0e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hc6fd4c72115f82d3E+0x1a>
    }
    8000cc0e:	6502                	ld	a0,0(sp)
    8000cc10:	60e2                	ld	ra,24(sp)
    8000cc12:	6105                	addi	sp,sp,32
    8000cc14:	8082                	ret

Disassembly of section .text._ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h0a4be43e8f3bcf0dE:

000000008000cc16 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h0a4be43e8f3bcf0dE>:
            fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
    8000cc16:	1101                	addi	sp,sp,-32
    8000cc18:	ec06                	sd	ra,24(sp)
    8000cc1a:	e42a                	sd	a0,8(sp)
    8000cc1c:	e82e                	sd	a1,16(sp)
    8000cc1e:	6108                	ld	a0,0(a0)
    8000cc20:	00015097          	auipc	ra,0x15
    8000cc24:	554080e7          	jalr	1364(ra) # 80022174 <_ZN61_$LT$core..panic..PanicInfo$u20$as$u20$core..fmt..Display$GT$3fmt17h17913560c4fcc8feE>
    8000cc28:	e02a                	sd	a0,0(sp)
    8000cc2a:	a009                	j	8000cc2c <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h0a4be43e8f3bcf0dE+0x16>
    8000cc2c:	6502                	ld	a0,0(sp)
    8000cc2e:	60e2                	ld	ra,24(sp)
    8000cc30:	6105                	addi	sp,sp,32
    8000cc32:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register3mie4read17h69b673b504f0a30eE:

000000008000cc34 <_ZN6kernel4arch5riscv8register3mie4read17h69b673b504f0a30eE>:
    MTIE = 1 << 7,  // timer
    MSIE = 1 << 3  // software
}

#[inline]
pub unsafe fn read() -> usize {
    8000cc34:	1141                	addi	sp,sp,-16
    let ret:usize;
    llvm_asm!("csrr $0, mie":"=r"(ret):::"volatile");
    8000cc36:	30402573          	csrr	a0,mie
    8000cc3a:	e42a                	sd	a0,8(sp)
    ret
}
    8000cc3c:	0141                	addi	sp,sp,16
    8000cc3e:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register3mie5write17hd754beffbe0101f6E:

000000008000cc40 <_ZN6kernel4arch5riscv8register3mie5write17hd754beffbe0101f6E>:

#[inline]
pub unsafe fn write(x:usize){
    8000cc40:	1141                	addi	sp,sp,-16
    8000cc42:	e42a                	sd	a0,8(sp)
    llvm_asm!("csrw mie, $0"::"r"(x)::"volatile");
    8000cc44:	30451073          	csrw	mie,a0
    8000cc48:	0141                	addi	sp,sp,16
    8000cc4a:	8082                	ret

Disassembly of section .text._ZN5alloc2rc11is_dangling17hdc2075289302a6eaE:

000000008000cc4c <_ZN5alloc2rc11is_dangling17hdc2075289302a6eaE>:
    pub fn new() -> Weak<T> {
        Weak { ptr: NonNull::new(usize::MAX as *mut RcBox<T>).expect("MAX is not 0") }
    }
}

pub(crate) fn is_dangling<T: ?Sized>(ptr: *mut T) -> bool {
    8000cc4c:	1141                	addi	sp,sp,-16
    8000cc4e:	e02a                	sd	a0,0(sp)
    let address = ptr as *mut () as usize;
    8000cc50:	e42a                	sd	a0,8(sp)
    address == usize::MAX
    8000cc52:	0505                	addi	a0,a0,1
    8000cc54:	00153513          	seqz	a0,a0
}
    8000cc58:	0141                	addi	sp,sp,16
    8000cc5a:	8082                	ret

Disassembly of section .text._ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h0d49413fcec9dcc1E:

000000008000cc5c <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h0d49413fcec9dcc1E>:
    /// ```
    #[must_use = "if you intended to assert that this is ok, consider `.unwrap()` instead"]
    #[rustc_const_stable(feature = "const_result", since = "1.48.0")]
    #[inline]
    #[stable(feature = "rust1", since = "1.0.0")]
    pub const fn is_ok(&self) -> bool {
    8000cc5c:	1141                	addi	sp,sp,-16
    8000cc5e:	e42a                	sd	a0,8(sp)
        matches!(*self, Ok(_))
    8000cc60:	6108                	ld	a0,0(a0)
    8000cc62:	4581                	li	a1,0
    8000cc64:	00b50763          	beq	a0,a1,8000cc72 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h0d49413fcec9dcc1E+0x16>
    8000cc68:	a009                	j	8000cc6a <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h0d49413fcec9dcc1E+0xe>
    8000cc6a:	4501                	li	a0,0
    8000cc6c:	00a103a3          	sb	a0,7(sp)
    8000cc70:	a029                	j	8000cc7a <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h0d49413fcec9dcc1E+0x1e>
    8000cc72:	4505                	li	a0,1
    8000cc74:	00a103a3          	sb	a0,7(sp)
    8000cc78:	a009                	j	8000cc7a <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h0d49413fcec9dcc1E+0x1e>
    }
    8000cc7a:	00714503          	lbu	a0,7(sp)
    8000cc7e:	0141                	addi	sp,sp,16
    8000cc80:	8082                	ret

Disassembly of section .text._ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h2dc3ede719915417E:

000000008000cc82 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h2dc3ede719915417E>:
    pub const fn is_ok(&self) -> bool {
    8000cc82:	1141                	addi	sp,sp,-16
    8000cc84:	e42a                	sd	a0,8(sp)
        matches!(*self, Ok(_))
    8000cc86:	00054503          	lbu	a0,0(a0)
    8000cc8a:	8905                	andi	a0,a0,1
    8000cc8c:	4581                	li	a1,0
    8000cc8e:	00b50763          	beq	a0,a1,8000cc9c <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h2dc3ede719915417E+0x1a>
    8000cc92:	a009                	j	8000cc94 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h2dc3ede719915417E+0x12>
    8000cc94:	4501                	li	a0,0
    8000cc96:	00a103a3          	sb	a0,7(sp)
    8000cc9a:	a029                	j	8000cca4 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h2dc3ede719915417E+0x22>
    8000cc9c:	4505                	li	a0,1
    8000cc9e:	00a103a3          	sb	a0,7(sp)
    8000cca2:	a009                	j	8000cca4 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h2dc3ede719915417E+0x22>
    }
    8000cca4:	00714503          	lbu	a0,7(sp)
    8000cca8:	0141                	addi	sp,sp,16
    8000ccaa:	8082                	ret

Disassembly of section .text._ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h5bbc2715c9ad6c41E:

000000008000ccac <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h5bbc2715c9ad6c41E>:
    pub const fn is_ok(&self) -> bool {
    8000ccac:	1141                	addi	sp,sp,-16
    8000ccae:	e42a                	sd	a0,8(sp)
        matches!(*self, Ok(_))
    8000ccb0:	6108                	ld	a0,0(a0)
    8000ccb2:	4581                	li	a1,0
    8000ccb4:	00b50763          	beq	a0,a1,8000ccc2 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h5bbc2715c9ad6c41E+0x16>
    8000ccb8:	a009                	j	8000ccba <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h5bbc2715c9ad6c41E+0xe>
    8000ccba:	4501                	li	a0,0
    8000ccbc:	00a103a3          	sb	a0,7(sp)
    8000ccc0:	a029                	j	8000ccca <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h5bbc2715c9ad6c41E+0x1e>
    8000ccc2:	4505                	li	a0,1
    8000ccc4:	00a103a3          	sb	a0,7(sp)
    8000ccc8:	a009                	j	8000ccca <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h5bbc2715c9ad6c41E+0x1e>
    }
    8000ccca:	00714503          	lbu	a0,7(sp)
    8000ccce:	0141                	addi	sp,sp,16
    8000ccd0:	8082                	ret

Disassembly of section .text._ZN4core6result19Result$LT$T$C$E$GT$6expect17h7db20d4970bed50aE:

000000008000ccd2 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h7db20d4970bed50aE>:
    /// x.expect("Testing expect"); // panics with `Testing expect: emergency failure`
    /// ```
    #[inline]
    #[track_caller]
    #[stable(feature = "result_expect", since = "1.4.0")]
    pub fn expect(self, msg: &str) -> T {
    8000ccd2:	715d                	addi	sp,sp,-80
    8000ccd4:	e03a                	sd	a4,0(sp)
    8000ccd6:	e436                	sd	a3,8(sp)
    8000ccd8:	e832                	sd	a2,16(sp)
    8000ccda:	ec2a                	sd	a0,24(sp)
    8000ccdc:	f02e                	sd	a1,32(sp)
    8000ccde:	e0b2                	sd	a2,64(sp)
    8000cce0:	e4b6                	sd	a3,72(sp)
        match self {
            Ok(t) => t,
    8000cce2:	00a035b3          	snez	a1,a0
    8000cce6:	4581                	li	a1,0
    8000cce8:	02b50563          	beq	a0,a1,8000cd12 <.LBB3_5+0x16>
    8000ccec:	a009                	j	8000ccee <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h7db20d4970bed50aE+0x1c>
            Err(e) => unwrap_failed(msg, &e),
    8000ccee:	6702                	ld	a4,0(sp)
    8000ccf0:	65a2                	ld	a1,8(sp)
    8000ccf2:	6542                	ld	a0,16(sp)
    8000ccf4:	66e2                	ld	a3,24(sp)
    8000ccf6:	7602                	ld	a2,32(sp)
    8000ccf8:	f436                	sd	a3,40(sp)
    8000ccfa:	f832                	sd	a2,48(sp)

000000008000ccfc <.LBB3_5>:
    8000ccfc:	0001b697          	auipc	a3,0x1b
    8000cd00:	2cc68693          	addi	a3,a3,716 # 80027fc8 <.L__unnamed_1>
    8000cd04:	1030                	addi	a2,sp,40
    8000cd06:	00015097          	auipc	ra,0x15
    8000cd0a:	6f0080e7          	jalr	1776(ra) # 800223f6 <_ZN4core6result13unwrap_failed17h07d3c4e2b4f310f6E>
    8000cd0e:	0000                	unimp
        match self {
    8000cd10:	0000                	unimp
        }
    }
    8000cd12:	6161                	addi	sp,sp,80
    8000cd14:	8082                	ret

Disassembly of section .text._ZN4core6result19Result$LT$T$C$E$GT$6expect17he26db02725b9ae65E:

000000008000cd16 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17he26db02725b9ae65E>:
    pub fn expect(self, msg: &str) -> T {
    8000cd16:	715d                	addi	sp,sp,-80
    8000cd18:	e436                	sd	a3,8(sp)
    8000cd1a:	e832                	sd	a2,16(sp)
    8000cd1c:	ec2e                	sd	a1,24(sp)
    8000cd1e:	f02a                	sd	a0,32(sp)
    8000cd20:	fc2e                	sd	a1,56(sp)
    8000cd22:	e0b2                	sd	a2,64(sp)
            Ok(t) => t,
    8000cd24:	6108                	ld	a0,0(a0)
    8000cd26:	4581                	li	a1,0
    8000cd28:	02b50663          	beq	a0,a1,8000cd54 <.LBB4_5+0x16>
    8000cd2c:	a009                	j	8000cd2e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17he26db02725b9ae65E+0x18>
            Err(e) => unwrap_failed(msg, &e),
    8000cd2e:	6722                	ld	a4,8(sp)
    8000cd30:	65c2                	ld	a1,16(sp)
    8000cd32:	6562                	ld	a0,24(sp)
    8000cd34:	7602                	ld	a2,32(sp)
    8000cd36:	6614                	ld	a3,8(a2)
    8000cd38:	6a10                	ld	a2,16(a2)
    8000cd3a:	f436                	sd	a3,40(sp)
    8000cd3c:	f832                	sd	a2,48(sp)

000000008000cd3e <.LBB4_5>:
    8000cd3e:	0001b697          	auipc	a3,0x1b
    8000cd42:	28a68693          	addi	a3,a3,650 # 80027fc8 <.L__unnamed_1>
    8000cd46:	1030                	addi	a2,sp,40
    8000cd48:	00015097          	auipc	ra,0x15
    8000cd4c:	6ae080e7          	jalr	1710(ra) # 800223f6 <_ZN4core6result13unwrap_failed17h07d3c4e2b4f310f6E>
    8000cd50:	0000                	unimp
        match self {
    8000cd52:	0000                	unimp
            Ok(t) => t,
    8000cd54:	7502                	ld	a0,32(sp)
    8000cd56:	6508                	ld	a0,8(a0)
    8000cd58:	e4aa                	sd	a0,72(sp)
    }
    8000cd5a:	6161                	addi	sp,sp,80
    8000cd5c:	8082                	ret

Disassembly of section .text._ZN4core6result19Result$LT$T$C$E$GT$6is_err17h304118d236359d80E:

000000008000cd5e <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h304118d236359d80E>:
    pub const fn is_err(&self) -> bool {
    8000cd5e:	1101                	addi	sp,sp,-32
    8000cd60:	ec06                	sd	ra,24(sp)
    8000cd62:	e82a                	sd	a0,16(sp)
        !self.is_ok()
    8000cd64:	00000097          	auipc	ra,0x0
    8000cd68:	f48080e7          	jalr	-184(ra) # 8000ccac <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h5bbc2715c9ad6c41E>
    8000cd6c:	e42a                	sd	a0,8(sp)
    8000cd6e:	a009                	j	8000cd70 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h304118d236359d80E+0x12>
    8000cd70:	6522                	ld	a0,8(sp)
    8000cd72:	00154513          	xori	a0,a0,1
    }
    8000cd76:	60e2                	ld	ra,24(sp)
    8000cd78:	6105                	addi	sp,sp,32
    8000cd7a:	8082                	ret

Disassembly of section .text._ZN4core6result19Result$LT$T$C$E$GT$6is_err17he593c7735b347060E:

000000008000cd7c <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17he593c7735b347060E>:
    pub const fn is_err(&self) -> bool {
    8000cd7c:	1101                	addi	sp,sp,-32
    8000cd7e:	ec06                	sd	ra,24(sp)
    8000cd80:	e82a                	sd	a0,16(sp)
        !self.is_ok()
    8000cd82:	00000097          	auipc	ra,0x0
    8000cd86:	eda080e7          	jalr	-294(ra) # 8000cc5c <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h0d49413fcec9dcc1E>
    8000cd8a:	e42a                	sd	a0,8(sp)
    8000cd8c:	a009                	j	8000cd8e <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17he593c7735b347060E+0x12>
    8000cd8e:	6522                	ld	a0,8(sp)
    8000cd90:	00154513          	xori	a0,a0,1
    }
    8000cd94:	60e2                	ld	ra,24(sp)
    8000cd96:	6105                	addi	sp,sp,32
    8000cd98:	8082                	ret

Disassembly of section .text._ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h01f79eb8d5b769f4E:

000000008000cd9a <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h01f79eb8d5b769f4E>:
    /// x.unwrap(); // panics with `emergency failure`
    /// ```
    #[inline]
    #[track_caller]
    #[stable(feature = "rust1", since = "1.0.0")]
    pub fn unwrap(self) -> T {
    8000cd9a:	7179                	addi	sp,sp,-48
    8000cd9c:	e032                	sd	a2,0(sp)
    8000cd9e:	e42a                	sd	a0,8(sp)
    8000cda0:	e82e                	sd	a1,16(sp)
        match self {
            Ok(t) => t,
    8000cda2:	0015b513          	seqz	a0,a1
    8000cda6:	4501                	li	a0,0
    8000cda8:	02a59563          	bne	a1,a0,8000cdd2 <.LBB7_6+0x1a>
    8000cdac:	a009                	j	8000cdae <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h01f79eb8d5b769f4E+0x14>
            Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
    8000cdae:	6702                	ld	a4,0(sp)

000000008000cdb0 <.LBB7_5>:
    8000cdb0:	0001b517          	auipc	a0,0x1b
    8000cdb4:	23850513          	addi	a0,a0,568 # 80027fe8 <.L__unnamed_7>

000000008000cdb8 <.LBB7_6>:
    8000cdb8:	0001b697          	auipc	a3,0x1b
    8000cdbc:	26068693          	addi	a3,a3,608 # 80028018 <.L__unnamed_2>
    8000cdc0:	02b00593          	li	a1,43
    8000cdc4:	0830                	addi	a2,sp,24
    8000cdc6:	00015097          	auipc	ra,0x15
    8000cdca:	630080e7          	jalr	1584(ra) # 800223f6 <_ZN4core6result13unwrap_failed17h07d3c4e2b4f310f6E>
    8000cdce:	0000                	unimp
        match self {
    8000cdd0:	0000                	unimp
            Ok(t) => t,
    8000cdd2:	6522                	ld	a0,8(sp)
    8000cdd4:	65c2                	ld	a1,16(sp)
    8000cdd6:	f02a                	sd	a0,32(sp)
    8000cdd8:	f42e                	sd	a1,40(sp)
        }
    }
    8000cdda:	6145                	addi	sp,sp,48
    8000cddc:	8082                	ret

Disassembly of section .text._ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h07a2a3bbe53a0b92E:

000000008000cdde <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h07a2a3bbe53a0b92E>:
    pub fn unwrap(self) -> T {
    8000cdde:	1101                	addi	sp,sp,-32
    8000cde0:	e432                	sd	a2,8(sp)
    8000cde2:	c82a                	sw	a0,16(sp)
    8000cde4:	ca2e                	sw	a1,20(sp)
            Ok(t) => t,
    8000cde6:	1502                	slli	a0,a0,0x20
    8000cde8:	9101                	srli	a0,a0,0x20
    8000cdea:	4581                	li	a1,0
    8000cdec:	02b50563          	beq	a0,a1,8000ce16 <.LBB8_6+0x1a>
    8000cdf0:	a009                	j	8000cdf2 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h07a2a3bbe53a0b92E+0x14>
            Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
    8000cdf2:	6722                	ld	a4,8(sp)

000000008000cdf4 <.LBB8_5>:
    8000cdf4:	0001b517          	auipc	a0,0x1b
    8000cdf8:	1f450513          	addi	a0,a0,500 # 80027fe8 <.L__unnamed_7>

000000008000cdfc <.LBB8_6>:
    8000cdfc:	0001b697          	auipc	a3,0x1b
    8000ce00:	23c68693          	addi	a3,a3,572 # 80028038 <.L__unnamed_3>
    8000ce04:	02b00593          	li	a1,43
    8000ce08:	0830                	addi	a2,sp,24
    8000ce0a:	00015097          	auipc	ra,0x15
    8000ce0e:	5ec080e7          	jalr	1516(ra) # 800223f6 <_ZN4core6result13unwrap_failed17h07d3c4e2b4f310f6E>
    8000ce12:	0000                	unimp
        match self {
    8000ce14:	0000                	unimp
            Ok(t) => t,
    8000ce16:	4552                	lw	a0,20(sp)
    8000ce18:	ce2a                	sw	a0,28(sp)
    }
    8000ce1a:	6105                	addi	sp,sp,32
    8000ce1c:	8082                	ret

Disassembly of section .text._ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h0d39573adfd86ec0E:

000000008000ce1e <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h0d39573adfd86ec0E>:
    pub fn unwrap(self) -> T {
    8000ce1e:	1101                	addi	sp,sp,-32
    8000ce20:	e02e                	sd	a1,0(sp)
    8000ce22:	00a107a3          	sb	a0,15(sp)
    8000ce26:	4581                	li	a1,0
            Ok(t) => t,
    8000ce28:	02b50563          	beq	a0,a1,8000ce52 <.LBB9_6+0x1a>
    8000ce2c:	a009                	j	8000ce2e <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h0d39573adfd86ec0E+0x10>
            Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
    8000ce2e:	6702                	ld	a4,0(sp)

000000008000ce30 <.LBB9_5>:
    8000ce30:	0001b517          	auipc	a0,0x1b
    8000ce34:	1b850513          	addi	a0,a0,440 # 80027fe8 <.L__unnamed_7>

000000008000ce38 <.LBB9_6>:
    8000ce38:	0001b697          	auipc	a3,0x1b
    8000ce3c:	22068693          	addi	a3,a3,544 # 80028058 <.L__unnamed_4>
    8000ce40:	02b00593          	li	a1,43
    8000ce44:	0810                	addi	a2,sp,16
    8000ce46:	00015097          	auipc	ra,0x15
    8000ce4a:	5b0080e7          	jalr	1456(ra) # 800223f6 <_ZN4core6result13unwrap_failed17h07d3c4e2b4f310f6E>
    8000ce4e:	0000                	unimp
        match self {
    8000ce50:	0000                	unimp
    }
    8000ce52:	6105                	addi	sp,sp,32
    8000ce54:	8082                	ret

Disassembly of section .text._ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h42e1173662da7b7dE:

000000008000ce56 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h42e1173662da7b7dE>:
    pub fn unwrap(self) -> T {
    8000ce56:	1101                	addi	sp,sp,-32
    8000ce58:	e432                	sd	a2,8(sp)
    8000ce5a:	00a11823          	sh	a0,16(sp)
    8000ce5e:	00b11923          	sh	a1,18(sp)
    8000ce62:	65c1                	lui	a1,0x10
    8000ce64:	35fd                	addiw	a1,a1,-1
            Ok(t) => t,
    8000ce66:	8d6d                	and	a0,a0,a1
    8000ce68:	4581                	li	a1,0
    8000ce6a:	02b50563          	beq	a0,a1,8000ce94 <.LBB10_6+0x1a>
    8000ce6e:	a009                	j	8000ce70 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h42e1173662da7b7dE+0x1a>
            Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
    8000ce70:	6722                	ld	a4,8(sp)

000000008000ce72 <.LBB10_5>:
    8000ce72:	0001b517          	auipc	a0,0x1b
    8000ce76:	17650513          	addi	a0,a0,374 # 80027fe8 <.L__unnamed_7>

000000008000ce7a <.LBB10_6>:
    8000ce7a:	0001b697          	auipc	a3,0x1b
    8000ce7e:	1be68693          	addi	a3,a3,446 # 80028038 <.L__unnamed_3>
    8000ce82:	02b00593          	li	a1,43
    8000ce86:	0830                	addi	a2,sp,24
    8000ce88:	00015097          	auipc	ra,0x15
    8000ce8c:	56e080e7          	jalr	1390(ra) # 800223f6 <_ZN4core6result13unwrap_failed17h07d3c4e2b4f310f6E>
    8000ce90:	0000                	unimp
        match self {
    8000ce92:	0000                	unimp
            Ok(t) => t,
    8000ce94:	01211503          	lh	a0,18(sp)
    8000ce98:	00a11f23          	sh	a0,30(sp)
    }
    8000ce9c:	6105                	addi	sp,sp,32
    8000ce9e:	8082                	ret

Disassembly of section .text._ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h6115c21749654733E:

000000008000cea0 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h6115c21749654733E>:
    pub fn unwrap(self) -> T {
    8000cea0:	7179                	addi	sp,sp,-48
    8000cea2:	e42e                	sd	a1,8(sp)
    8000cea4:	e82a                	sd	a0,16(sp)
            Ok(t) => t,
    8000cea6:	6108                	ld	a0,0(a0)
    8000cea8:	4581                	li	a1,0
    8000ceaa:	02b50a63          	beq	a0,a1,8000cede <.LBB11_6+0x1a>
    8000ceae:	a009                	j	8000ceb0 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h6115c21749654733E+0x10>
            Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
    8000ceb0:	6722                	ld	a4,8(sp)
    8000ceb2:	6542                	ld	a0,16(sp)
    8000ceb4:	650c                	ld	a1,8(a0)
    8000ceb6:	6908                	ld	a0,16(a0)
    8000ceb8:	ec2e                	sd	a1,24(sp)
    8000ceba:	f02a                	sd	a0,32(sp)

000000008000cebc <.LBB11_5>:
    8000cebc:	0001b517          	auipc	a0,0x1b
    8000cec0:	12c50513          	addi	a0,a0,300 # 80027fe8 <.L__unnamed_7>

000000008000cec4 <.LBB11_6>:
    8000cec4:	0001b697          	auipc	a3,0x1b
    8000cec8:	10468693          	addi	a3,a3,260 # 80027fc8 <.L__unnamed_1>
    8000cecc:	02b00593          	li	a1,43
    8000ced0:	0830                	addi	a2,sp,24
    8000ced2:	00015097          	auipc	ra,0x15
    8000ced6:	524080e7          	jalr	1316(ra) # 800223f6 <_ZN4core6result13unwrap_failed17h07d3c4e2b4f310f6E>
    8000ceda:	0000                	unimp
        match self {
    8000cedc:	0000                	unimp
            Ok(t) => t,
    8000cede:	6542                	ld	a0,16(sp)
    8000cee0:	6508                	ld	a0,8(a0)
    8000cee2:	f42a                	sd	a0,40(sp)
    }
    8000cee4:	6145                	addi	sp,sp,48
    8000cee6:	8082                	ret

Disassembly of section .text._ZN4core6result19Result$LT$T$C$E$GT$6unwrap17he7e280ca90d46427E:

000000008000cee8 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17he7e280ca90d46427E>:
    pub fn unwrap(self) -> T {
    8000cee8:	7179                	addi	sp,sp,-48
    8000ceea:	e02e                	sd	a1,0(sp)
    8000ceec:	e42a                	sd	a0,8(sp)
            Ok(t) => t,
    8000ceee:	6108                	ld	a0,0(a0)
    8000cef0:	4581                	li	a1,0
    8000cef2:	02b50a63          	beq	a0,a1,8000cf26 <.LBB12_6+0x1a>
    8000cef6:	a009                	j	8000cef8 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17he7e280ca90d46427E+0x10>
            Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
    8000cef8:	6702                	ld	a4,0(sp)
    8000cefa:	6522                	ld	a0,8(sp)
    8000cefc:	690c                	ld	a1,16(a0)
    8000cefe:	ec2e                	sd	a1,24(sp)
    8000cf00:	6508                	ld	a0,8(a0)
    8000cf02:	e82a                	sd	a0,16(sp)

000000008000cf04 <.LBB12_5>:
    8000cf04:	0001b517          	auipc	a0,0x1b
    8000cf08:	0e450513          	addi	a0,a0,228 # 80027fe8 <.L__unnamed_7>

000000008000cf0c <.LBB12_6>:
    8000cf0c:	0001b697          	auipc	a3,0x1b
    8000cf10:	16c68693          	addi	a3,a3,364 # 80028078 <.L__unnamed_5>
    8000cf14:	02b00593          	li	a1,43
    8000cf18:	0810                	addi	a2,sp,16
    8000cf1a:	00015097          	auipc	ra,0x15
    8000cf1e:	4dc080e7          	jalr	1244(ra) # 800223f6 <_ZN4core6result13unwrap_failed17h07d3c4e2b4f310f6E>
    8000cf22:	0000                	unimp
        match self {
    8000cf24:	0000                	unimp
            Ok(t) => t,
    8000cf26:	65a2                	ld	a1,8(sp)
    8000cf28:	6588                	ld	a0,8(a1)
    8000cf2a:	698c                	ld	a1,16(a1)
    8000cf2c:	f02a                	sd	a0,32(sp)
    8000cf2e:	f42e                	sd	a1,40(sp)
    }
    8000cf30:	6145                	addi	sp,sp,48
    8000cf32:	8082                	ret

Disassembly of section .text._ZN4core6result19Result$LT$T$C$E$GT$6unwrap17hea14d8d7b2208f82E:

000000008000cf34 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17hea14d8d7b2208f82E>:
    pub fn unwrap(self) -> T {
    8000cf34:	1101                	addi	sp,sp,-32
    8000cf36:	e02e                	sd	a1,0(sp)
    8000cf38:	00a107a3          	sb	a0,15(sp)
    8000cf3c:	4581                	li	a1,0
            Ok(t) => t,
    8000cf3e:	02b50563          	beq	a0,a1,8000cf68 <.LBB13_6+0x1a>
    8000cf42:	a009                	j	8000cf44 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17hea14d8d7b2208f82E+0x10>
            Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
    8000cf44:	6702                	ld	a4,0(sp)

000000008000cf46 <.LBB13_5>:
    8000cf46:	0001b517          	auipc	a0,0x1b
    8000cf4a:	0a250513          	addi	a0,a0,162 # 80027fe8 <.L__unnamed_7>

000000008000cf4e <.LBB13_6>:
    8000cf4e:	0001b697          	auipc	a3,0x1b
    8000cf52:	14a68693          	addi	a3,a3,330 # 80028098 <.L__unnamed_6>
    8000cf56:	02b00593          	li	a1,43
    8000cf5a:	0810                	addi	a2,sp,16
    8000cf5c:	00015097          	auipc	ra,0x15
    8000cf60:	49a080e7          	jalr	1178(ra) # 800223f6 <_ZN4core6result13unwrap_failed17h07d3c4e2b4f310f6E>
    8000cf64:	0000                	unimp
        match self {
    8000cf66:	0000                	unimp
    }
    8000cf68:	6105                	addi	sp,sp,32
    8000cf6a:	8082                	ret

Disassembly of section .text._ZN4core6result19Result$LT$T$C$E$GT$7map_err17h048c451de26fa4b9E:

000000008000cf6c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h048c451de26fa4b9E>:
    pub fn map_err<F, O: FnOnce(E) -> F>(self, op: O) -> Result<T, F> {
    8000cf6c:	711d                	addi	sp,sp,-96
    8000cf6e:	ec86                	sd	ra,88(sp)
    8000cf70:	ec2a                	sd	a0,24(sp)
    8000cf72:	f02e                	sd	a1,32(sp)
    8000cf74:	f432                	sd	a2,40(sp)
    8000cf76:	4505                	li	a0,1
            Ok(t) => Ok(t),
    8000cf78:	02a10ba3          	sb	a0,55(sp)
    8000cf7c:	00163513          	seqz	a0,a2
    8000cf80:	4501                	li	a0,0
    8000cf82:	00a61e63          	bne	a2,a0,8000cf9e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h048c451de26fa4b9E+0x32>
    8000cf86:	a009                	j	8000cf88 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h048c451de26fa4b9E+0x1c>
    8000cf88:	4501                	li	a0,0
            Err(e) => Err(op(e)),
    8000cf8a:	02a10ba3          	sb	a0,55(sp)
    8000cf8e:	ffff6097          	auipc	ra,0xffff6
    8000cf92:	8ce080e7          	jalr	-1842(ra) # 8000285c <_ZN5alloc7raw_vec11finish_grow28_$u7b$$u7b$closure$u7d$$u7d$17h73415ce87cdd3564E>
    8000cf96:	e42a                	sd	a0,8(sp)
    8000cf98:	e82e                	sd	a1,16(sp)
    8000cf9a:	a821                	j	8000cfb2 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h048c451de26fa4b9E+0x46>
        match self {
    8000cf9c:	0000                	unimp
            Ok(t) => Ok(t),
    8000cf9e:	65e2                	ld	a1,24(sp)
    8000cfa0:	7602                	ld	a2,32(sp)
    8000cfa2:	7522                	ld	a0,40(sp)
    8000cfa4:	e4b2                	sd	a2,72(sp)
    8000cfa6:	e8aa                	sd	a0,80(sp)
    8000cfa8:	e590                	sd	a2,8(a1)
    8000cfaa:	e988                	sd	a0,16(a1)
    8000cfac:	4501                	li	a0,0
    8000cfae:	e188                	sd	a0,0(a1)
        match self {
    8000cfb0:	a809                	j	8000cfc2 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h048c451de26fa4b9E+0x56>
            Err(e) => Err(op(e)),
    8000cfb2:	65e2                	ld	a1,24(sp)
    8000cfb4:	6542                	ld	a0,16(sp)
    8000cfb6:	6622                	ld	a2,8(sp)
    8000cfb8:	e590                	sd	a2,8(a1)
    8000cfba:	e988                	sd	a0,16(a1)
    8000cfbc:	4505                	li	a0,1
    8000cfbe:	e188                	sd	a0,0(a1)
        match self {
    8000cfc0:	a009                	j	8000cfc2 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h048c451de26fa4b9E+0x56>
    }
    8000cfc2:	03714503          	lbu	a0,55(sp)
    8000cfc6:	8905                	andi	a0,a0,1
    8000cfc8:	e509                	bnez	a0,8000cfd2 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h048c451de26fa4b9E+0x66>
    8000cfca:	a009                	j	8000cfcc <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h048c451de26fa4b9E+0x60>
    8000cfcc:	60e6                	ld	ra,88(sp)
    8000cfce:	6125                	addi	sp,sp,96
    8000cfd0:	8082                	ret
    8000cfd2:	bfed                	j	8000cfcc <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h048c451de26fa4b9E+0x60>

Disassembly of section .text._ZN4core6result19Result$LT$T$C$E$GT$7map_err17h3706629688909c32E:

000000008000cfd4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h3706629688909c32E>:
    pub fn map_err<F, O: FnOnce(E) -> F>(self, op: O) -> Result<T, F> {
    8000cfd4:	711d                	addi	sp,sp,-96
    8000cfd6:	ec86                	sd	ra,88(sp)
    8000cfd8:	e836                	sd	a3,16(sp)
    8000cfda:	ec2a                	sd	a0,24(sp)
    8000cfdc:	f02e                	sd	a1,32(sp)
    8000cfde:	f432                	sd	a2,40(sp)
    8000cfe0:	fc36                	sd	a3,56(sp)
    8000cfe2:	4505                	li	a0,1
            Ok(t) => Ok(t),
    8000cfe4:	02a10ba3          	sb	a0,55(sp)
    8000cfe8:	0015b513          	seqz	a0,a1
    8000cfec:	4501                	li	a0,0
    8000cfee:	00a59f63          	bne	a1,a0,8000d00c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h3706629688909c32E+0x38>
    8000cff2:	a009                	j	8000cff4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h3706629688909c32E+0x20>
    8000cff4:	6542                	ld	a0,16(sp)
    8000cff6:	4581                	li	a1,0
            Err(e) => Err(op(e)),
    8000cff8:	02b10ba3          	sb	a1,55(sp)
    8000cffc:	ffff6097          	auipc	ra,0xffff6
    8000d000:	84e080e7          	jalr	-1970(ra) # 8000284a <_ZN5alloc7raw_vec11finish_grow28_$u7b$$u7b$closure$u7d$$u7d$17h4102ec07be08fbafE>
    8000d004:	e02a                	sd	a0,0(sp)
    8000d006:	e42e                	sd	a1,8(sp)
    8000d008:	a821                	j	8000d020 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h3706629688909c32E+0x4c>
        match self {
    8000d00a:	0000                	unimp
            Ok(t) => Ok(t),
    8000d00c:	65e2                	ld	a1,24(sp)
    8000d00e:	7602                	ld	a2,32(sp)
    8000d010:	7522                	ld	a0,40(sp)
    8000d012:	e4b2                	sd	a2,72(sp)
    8000d014:	e8aa                	sd	a0,80(sp)
    8000d016:	e590                	sd	a2,8(a1)
    8000d018:	e988                	sd	a0,16(a1)
    8000d01a:	4501                	li	a0,0
    8000d01c:	e188                	sd	a0,0(a1)
        match self {
    8000d01e:	a809                	j	8000d030 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h3706629688909c32E+0x5c>
            Err(e) => Err(op(e)),
    8000d020:	65e2                	ld	a1,24(sp)
    8000d022:	6522                	ld	a0,8(sp)
    8000d024:	6602                	ld	a2,0(sp)
    8000d026:	e590                	sd	a2,8(a1)
    8000d028:	e988                	sd	a0,16(a1)
    8000d02a:	4505                	li	a0,1
    8000d02c:	e188                	sd	a0,0(a1)
        match self {
    8000d02e:	a009                	j	8000d030 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h3706629688909c32E+0x5c>
    }
    8000d030:	03714503          	lbu	a0,55(sp)
    8000d034:	8905                	andi	a0,a0,1
    8000d036:	e509                	bnez	a0,8000d040 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h3706629688909c32E+0x6c>
    8000d038:	a009                	j	8000d03a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h3706629688909c32E+0x66>
    8000d03a:	60e6                	ld	ra,88(sp)
    8000d03c:	6125                	addi	sp,sp,96
    8000d03e:	8082                	ret
    8000d040:	bfed                	j	8000d03a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h3706629688909c32E+0x66>

Disassembly of section .text._ZN4core6result19Result$LT$T$C$E$GT$7map_err17hacf552840fbd34a9E:

000000008000d042 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17hacf552840fbd34a9E>:
    pub fn map_err<F, O: FnOnce(E) -> F>(self, op: O) -> Result<T, F> {
    8000d042:	711d                	addi	sp,sp,-96
    8000d044:	ec86                	sd	ra,88(sp)
    8000d046:	e42a                	sd	a0,8(sp)
    8000d048:	4585                	li	a1,1
            Ok(t) => Ok(t),
    8000d04a:	02b10ba3          	sb	a1,55(sp)
    8000d04e:	6108                	ld	a0,0(a0)
    8000d050:	4581                	li	a1,0
    8000d052:	02b50363          	beq	a0,a1,8000d078 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17hacf552840fbd34a9E+0x36>
    8000d056:	a009                	j	8000d058 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17hacf552840fbd34a9E+0x16>
            Err(e) => Err(op(e)),
    8000d058:	65a2                	ld	a1,8(sp)
    8000d05a:	6588                	ld	a0,8(a1)
    8000d05c:	698c                	ld	a1,16(a1)
    8000d05e:	e0aa                	sd	a0,64(sp)
    8000d060:	e4ae                	sd	a1,72(sp)
    8000d062:	4601                	li	a2,0
    8000d064:	02c10ba3          	sb	a2,55(sp)
    8000d068:	f02a                	sd	a0,32(sp)
    8000d06a:	f42e                	sd	a1,40(sp)
    8000d06c:	ffff8097          	auipc	ra,0xffff8
    8000d070:	3a2080e7          	jalr	930(ra) # 8000540e <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_exec28_$u7b$$u7b$closure$u7d$$u7d$17hac210036fe7eba45E>
    8000d074:	a809                	j	8000d086 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17hacf552840fbd34a9E+0x44>
        match self {
    8000d076:	0000                	unimp
            Ok(t) => Ok(t),
    8000d078:	6522                	ld	a0,8(sp)
    8000d07a:	6508                	ld	a0,8(a0)
    8000d07c:	e8aa                	sd	a0,80(sp)
    8000d07e:	ec2a                	sd	a0,24(sp)
    8000d080:	4501                	li	a0,0
    8000d082:	e82a                	sd	a0,16(sp)
        match self {
    8000d084:	a021                	j	8000d08c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17hacf552840fbd34a9E+0x4a>
    8000d086:	4505                	li	a0,1
            Err(e) => Err(op(e)),
    8000d088:	e82a                	sd	a0,16(sp)
        match self {
    8000d08a:	a009                	j	8000d08c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17hacf552840fbd34a9E+0x4a>
    }
    8000d08c:	03714503          	lbu	a0,55(sp)
    8000d090:	8905                	andi	a0,a0,1
    8000d092:	e519                	bnez	a0,8000d0a0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17hacf552840fbd34a9E+0x5e>
    8000d094:	a009                	j	8000d096 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17hacf552840fbd34a9E+0x54>
    8000d096:	6542                	ld	a0,16(sp)
    8000d098:	65e2                	ld	a1,24(sp)
    8000d09a:	60e6                	ld	ra,88(sp)
    8000d09c:	6125                	addi	sp,sp,96
    8000d09e:	8082                	ret
    8000d0a0:	bfdd                	j	8000d096 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17hacf552840fbd34a9E+0x54>

Disassembly of section .text._ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h2a54492b2826375dE:

000000008000d0a2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h2a54492b2826375dE>:
    fn from_ok(v: T) -> Self {
        Ok(v)
    }

    #[inline]
    fn from_error(v: E) -> Self {
    8000d0a2:	1141                	addi	sp,sp,-16
    8000d0a4:	4501                	li	a0,0
        Err(v)
    8000d0a6:	e02a                	sd	a0,0(sp)
    }
    8000d0a8:	0141                	addi	sp,sp,16
    8000d0aa:	8082                	ret

Disassembly of section .text._ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h4dd43adfe00292f6E:

000000008000d0ac <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h4dd43adfe00292f6E>:
    fn from_error(v: E) -> Self {
    8000d0ac:	1101                	addi	sp,sp,-32
    8000d0ae:	e42e                	sd	a1,8(sp)
    8000d0b0:	85aa                	mv	a1,a0
    8000d0b2:	6522                	ld	a0,8(sp)
    8000d0b4:	e82a                	sd	a0,16(sp)
    8000d0b6:	ec32                	sd	a2,24(sp)
        Err(v)
    8000d0b8:	e588                	sd	a0,8(a1)
    8000d0ba:	e990                	sd	a2,16(a1)
    8000d0bc:	4505                	li	a0,1
    8000d0be:	e188                	sd	a0,0(a1)
    }
    8000d0c0:	6105                	addi	sp,sp,32
    8000d0c2:	8082                	ret

Disassembly of section .text._ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h5591b1c718d6dce1E:

000000008000d0c4 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h5591b1c718d6dce1E>:
    fn from_error(v: E) -> Self {
    8000d0c4:	1101                	addi	sp,sp,-32
    8000d0c6:	4581                	li	a1,0
        Err(v)
    8000d0c8:	e82e                	sd	a1,16(sp)
    }
    8000d0ca:	6522                	ld	a0,8(sp)
    8000d0cc:	6105                	addi	sp,sp,32
    8000d0ce:	8082                	ret

Disassembly of section .text._ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h5998e5a20485011cE:

000000008000d0d0 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h5998e5a20485011cE>:
    fn from_error(v: E) -> Self {
    8000d0d0:	1101                	addi	sp,sp,-32
    8000d0d2:	e42e                	sd	a1,8(sp)
    8000d0d4:	85aa                	mv	a1,a0
    8000d0d6:	6522                	ld	a0,8(sp)
    8000d0d8:	e82a                	sd	a0,16(sp)
    8000d0da:	ec32                	sd	a2,24(sp)
        Err(v)
    8000d0dc:	e588                	sd	a0,8(a1)
    8000d0de:	e990                	sd	a2,16(a1)
    8000d0e0:	4505                	li	a0,1
    8000d0e2:	e188                	sd	a0,0(a1)
    }
    8000d0e4:	6105                	addi	sp,sp,32
    8000d0e6:	8082                	ret

Disassembly of section .text._ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h74072cf57097ff24E:

000000008000d0e8 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h74072cf57097ff24E>:
    fn from_error(v: E) -> Self {
    8000d0e8:	1101                	addi	sp,sp,-32
    8000d0ea:	4505                	li	a0,1
        Err(v)
    8000d0ec:	e42a                	sd	a0,8(sp)
    }
    8000d0ee:	65c2                	ld	a1,16(sp)
    8000d0f0:	6105                	addi	sp,sp,32
    8000d0f2:	8082                	ret

Disassembly of section .text._ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h7458ba93a206fcffE:

000000008000d0f4 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h7458ba93a206fcffE>:
    fn from_error(v: E) -> Self {
    8000d0f4:	1101                	addi	sp,sp,-32
    8000d0f6:	e42e                	sd	a1,8(sp)
    8000d0f8:	85aa                	mv	a1,a0
    8000d0fa:	6522                	ld	a0,8(sp)
    8000d0fc:	e82a                	sd	a0,16(sp)
    8000d0fe:	ec32                	sd	a2,24(sp)
        Err(v)
    8000d100:	e588                	sd	a0,8(a1)
    8000d102:	e990                	sd	a2,16(a1)
    8000d104:	4505                	li	a0,1
    8000d106:	e188                	sd	a0,0(a1)
    }
    8000d108:	6105                	addi	sp,sp,32
    8000d10a:	8082                	ret

Disassembly of section .text._ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h826a3a4a12863e91E:

000000008000d10c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h826a3a4a12863e91E>:
    fn from_error(v: E) -> Self {
    8000d10c:	1141                	addi	sp,sp,-16
    8000d10e:	85aa                	mv	a1,a0
    8000d110:	4501                	li	a0,0
        Err(v)
    8000d112:	e588                	sd	a0,8(a1)
    }
    8000d114:	0141                	addi	sp,sp,16
    8000d116:	8082                	ret

Disassembly of section .text._ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h849eab7baac337bbE:

000000008000d118 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h849eab7baac337bbE>:
    fn from_error(v: E) -> Self {
    8000d118:	1141                	addi	sp,sp,-16
    8000d11a:	4501                	li	a0,0
        Err(v)
    8000d11c:	e02a                	sd	a0,0(sp)
    }
    8000d11e:	0141                	addi	sp,sp,16
    8000d120:	8082                	ret

Disassembly of section .text._ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h9d11a50f8e490b2eE:

000000008000d122 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h9d11a50f8e490b2eE>:
    fn from_error(v: E) -> Self {
    8000d122:	1101                	addi	sp,sp,-32
    8000d124:	e82a                	sd	a0,16(sp)
    8000d126:	ec2e                	sd	a1,24(sp)
        Err(v)
    8000d128:	e02a                	sd	a0,0(sp)
    8000d12a:	e42e                	sd	a1,8(sp)
    }
    8000d12c:	6105                	addi	sp,sp,32
    8000d12e:	8082                	ret

Disassembly of section .text._ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha082cd91ce3eeff8E:

000000008000d130 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha082cd91ce3eeff8E>:
    fn from_error(v: E) -> Self {
    8000d130:	1101                	addi	sp,sp,-32
    8000d132:	4501                	li	a0,0
        Err(v)
    8000d134:	e42a                	sd	a0,8(sp)
    }
    8000d136:	65c2                	ld	a1,16(sp)
    8000d138:	6105                	addi	sp,sp,32
    8000d13a:	8082                	ret

Disassembly of section .text._ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17haeaec5be2c31cee9E:

000000008000d13c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17haeaec5be2c31cee9E>:
    fn from_error(v: E) -> Self {
    8000d13c:	1101                	addi	sp,sp,-32
    8000d13e:	e42e                	sd	a1,8(sp)
    8000d140:	85aa                	mv	a1,a0
    8000d142:	6522                	ld	a0,8(sp)
    8000d144:	e82a                	sd	a0,16(sp)
    8000d146:	ec32                	sd	a2,24(sp)
        Err(v)
    8000d148:	e588                	sd	a0,8(a1)
    8000d14a:	e990                	sd	a2,16(a1)
    8000d14c:	4505                	li	a0,1
    8000d14e:	e188                	sd	a0,0(a1)
    }
    8000d150:	6105                	addi	sp,sp,32
    8000d152:	8082                	ret

Disassembly of section .text._ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17hc42702708db6cea4E:

000000008000d154 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17hc42702708db6cea4E>:
    fn from_error(v: E) -> Self {
    8000d154:	1141                	addi	sp,sp,-16
    8000d156:	4501                	li	a0,0
        Err(v)
    8000d158:	e02a                	sd	a0,0(sp)
    }
    8000d15a:	0141                	addi	sp,sp,16
    8000d15c:	8082                	ret

Disassembly of section .text._ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17hc5c17464a72e6965E:

000000008000d15e <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17hc5c17464a72e6965E>:
    fn from_error(v: E) -> Self {
    8000d15e:	1141                	addi	sp,sp,-16
    8000d160:	4501                	li	a0,0
        Err(v)
    8000d162:	e02a                	sd	a0,0(sp)
    }
    8000d164:	0141                	addi	sp,sp,16
    8000d166:	8082                	ret

Disassembly of section .text._ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17hfad957fd5ededc3fE:

000000008000d168 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17hfad957fd5ededc3fE>:
    fn from_error(v: E) -> Self {
    8000d168:	1141                	addi	sp,sp,-16
    8000d16a:	4501                	li	a0,0
        Err(v)
    8000d16c:	e02a                	sd	a0,0(sp)
    }
    8000d16e:	0141                	addi	sp,sp,16
    8000d170:	8082                	ret

Disassembly of section .text._ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h01dd6c02021cf1cdE:

000000008000d172 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h01dd6c02021cf1cdE>:
    fn into_result(self) -> Self {
    8000d172:	1141                	addi	sp,sp,-16
    8000d174:	e42a                	sd	a0,8(sp)
    }
    8000d176:	0141                	addi	sp,sp,16
    8000d178:	8082                	ret

Disassembly of section .text._ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h0dd4a8728df8a7c8E:

000000008000d17a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h0dd4a8728df8a7c8E>:
    fn into_result(self) -> Self {
    8000d17a:	1141                	addi	sp,sp,-16
    8000d17c:	e42e                	sd	a1,8(sp)
    8000d17e:	85aa                	mv	a1,a0
        self
    8000d180:	6522                	ld	a0,8(sp)
    8000d182:	6910                	ld	a2,16(a0)
    8000d184:	e990                	sd	a2,16(a1)
    8000d186:	6510                	ld	a2,8(a0)
    8000d188:	e590                	sd	a2,8(a1)
    8000d18a:	6108                	ld	a0,0(a0)
    8000d18c:	e188                	sd	a0,0(a1)
    }
    8000d18e:	0141                	addi	sp,sp,16
    8000d190:	8082                	ret

Disassembly of section .text._ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h1c9f3c35158f4b17E:

000000008000d192 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h1c9f3c35158f4b17E>:
    fn into_result(self) -> Self {
    8000d192:	1141                	addi	sp,sp,-16
    8000d194:	e02a                	sd	a0,0(sp)
    8000d196:	e42e                	sd	a1,8(sp)
    }
    8000d198:	0141                	addi	sp,sp,16
    8000d19a:	8082                	ret

Disassembly of section .text._ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h219e266dbc1ee71cE:

000000008000d19c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h219e266dbc1ee71cE>:
    fn into_result(self) -> Self {
    8000d19c:	1141                	addi	sp,sp,-16
    8000d19e:	e42e                	sd	a1,8(sp)
    8000d1a0:	85aa                	mv	a1,a0
        self
    8000d1a2:	6522                	ld	a0,8(sp)
    8000d1a4:	6910                	ld	a2,16(a0)
    8000d1a6:	e990                	sd	a2,16(a1)
    8000d1a8:	6510                	ld	a2,8(a0)
    8000d1aa:	e590                	sd	a2,8(a1)
    8000d1ac:	6108                	ld	a0,0(a0)
    8000d1ae:	e188                	sd	a0,0(a1)
    }
    8000d1b0:	0141                	addi	sp,sp,16
    8000d1b2:	8082                	ret

Disassembly of section .text._ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h3002ccf5391f70d3E:

000000008000d1b4 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h3002ccf5391f70d3E>:
    fn into_result(self) -> Self {
    8000d1b4:	1141                	addi	sp,sp,-16
    8000d1b6:	e42e                	sd	a1,8(sp)
    8000d1b8:	85aa                	mv	a1,a0
        self
    8000d1ba:	6522                	ld	a0,8(sp)
    8000d1bc:	6910                	ld	a2,16(a0)
    8000d1be:	e990                	sd	a2,16(a1)
    8000d1c0:	6510                	ld	a2,8(a0)
    8000d1c2:	e590                	sd	a2,8(a1)
    8000d1c4:	6108                	ld	a0,0(a0)
    8000d1c6:	e188                	sd	a0,0(a1)
    }
    8000d1c8:	0141                	addi	sp,sp,16
    8000d1ca:	8082                	ret

Disassembly of section .text._ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7e17d789c0860991E:

000000008000d1cc <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7e17d789c0860991E>:
    fn into_result(self) -> Self {
    8000d1cc:	1141                	addi	sp,sp,-16
    8000d1ce:	e42e                	sd	a1,8(sp)
    8000d1d0:	85aa                	mv	a1,a0
        self
    8000d1d2:	6522                	ld	a0,8(sp)
    8000d1d4:	6910                	ld	a2,16(a0)
    8000d1d6:	e990                	sd	a2,16(a1)
    8000d1d8:	6510                	ld	a2,8(a0)
    8000d1da:	e590                	sd	a2,8(a1)
    8000d1dc:	6108                	ld	a0,0(a0)
    8000d1de:	e188                	sd	a0,0(a1)
    }
    8000d1e0:	0141                	addi	sp,sp,16
    8000d1e2:	8082                	ret

Disassembly of section .text._ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h81067e0558a14198E:

000000008000d1e4 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h81067e0558a14198E>:
    fn into_result(self) -> Self {
    8000d1e4:	1141                	addi	sp,sp,-16
    8000d1e6:	e42e                	sd	a1,8(sp)
    8000d1e8:	85aa                	mv	a1,a0
        self
    8000d1ea:	6522                	ld	a0,8(sp)
    8000d1ec:	6910                	ld	a2,16(a0)
    8000d1ee:	e990                	sd	a2,16(a1)
    8000d1f0:	6510                	ld	a2,8(a0)
    8000d1f2:	e590                	sd	a2,8(a1)
    8000d1f4:	6108                	ld	a0,0(a0)
    8000d1f6:	e188                	sd	a0,0(a1)
    }
    8000d1f8:	0141                	addi	sp,sp,16
    8000d1fa:	8082                	ret

Disassembly of section .text._ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h9e3ff03fe8989dd2E:

000000008000d1fc <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h9e3ff03fe8989dd2E>:
    fn into_result(self) -> Self {
    8000d1fc:	1141                	addi	sp,sp,-16
    8000d1fe:	00a107a3          	sb	a0,15(sp)
    }
    8000d202:	0141                	addi	sp,sp,16
    8000d204:	8082                	ret

Disassembly of section .text._ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hb12176fc822fec8fE:

000000008000d206 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hb12176fc822fec8fE>:
    fn into_result(self) -> Self {
    8000d206:	1141                	addi	sp,sp,-16
    8000d208:	e02a                	sd	a0,0(sp)
    8000d20a:	e42e                	sd	a1,8(sp)
    }
    8000d20c:	0141                	addi	sp,sp,16
    8000d20e:	8082                	ret

Disassembly of section .text._ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hb8d2d18a4141e592E:

000000008000d210 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hb8d2d18a4141e592E>:
    fn into_result(self) -> Self {
    8000d210:	1141                	addi	sp,sp,-16
    8000d212:	e02a                	sd	a0,0(sp)
    8000d214:	e42e                	sd	a1,8(sp)
    }
    8000d216:	0141                	addi	sp,sp,16
    8000d218:	8082                	ret

Disassembly of section .text._ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hcbbb135f4988ea23E:

000000008000d21a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hcbbb135f4988ea23E>:
    fn into_result(self) -> Self {
    8000d21a:	1141                	addi	sp,sp,-16
    8000d21c:	e42a                	sd	a0,8(sp)
    }
    8000d21e:	0141                	addi	sp,sp,16
    8000d220:	8082                	ret

Disassembly of section .text._ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hd9845beb6e8da5c7E:

000000008000d222 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hd9845beb6e8da5c7E>:
    fn into_result(self) -> Self {
    8000d222:	1141                	addi	sp,sp,-16
    8000d224:	e02a                	sd	a0,0(sp)
    8000d226:	e42e                	sd	a1,8(sp)
    }
    8000d228:	0141                	addi	sp,sp,16
    8000d22a:	8082                	ret

Disassembly of section .text._ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hda96dc8b8fa1398aE:

000000008000d22c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hda96dc8b8fa1398aE>:
    fn into_result(self) -> Self {
    8000d22c:	1141                	addi	sp,sp,-16
    8000d22e:	e42e                	sd	a1,8(sp)
    8000d230:	85aa                	mv	a1,a0
        self
    8000d232:	6522                	ld	a0,8(sp)
    8000d234:	6910                	ld	a2,16(a0)
    8000d236:	e990                	sd	a2,16(a1)
    8000d238:	6510                	ld	a2,8(a0)
    8000d23a:	e590                	sd	a2,8(a1)
    8000d23c:	6108                	ld	a0,0(a0)
    8000d23e:	e188                	sd	a0,0(a1)
    }
    8000d240:	0141                	addi	sp,sp,16
    8000d242:	8082                	ret

Disassembly of section .text._ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hea2de720f3c4ff28E:

000000008000d244 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hea2de720f3c4ff28E>:
    fn into_result(self) -> Self {
    8000d244:	1141                	addi	sp,sp,-16
    8000d246:	e42e                	sd	a1,8(sp)
    8000d248:	85aa                	mv	a1,a0
        self
    8000d24a:	6522                	ld	a0,8(sp)
    8000d24c:	6910                	ld	a2,16(a0)
    8000d24e:	e990                	sd	a2,16(a1)
    8000d250:	6510                	ld	a2,8(a0)
    8000d252:	e590                	sd	a2,8(a1)
    8000d254:	6108                	ld	a0,0(a0)
    8000d256:	e188                	sd	a0,0(a1)
    }
    8000d258:	0141                	addi	sp,sp,16
    8000d25a:	8082                	ret

Disassembly of section .text._ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17heda032b26dd469a1E:

000000008000d25c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17heda032b26dd469a1E>:
    fn into_result(self) -> Self {
    8000d25c:	1141                	addi	sp,sp,-16
    8000d25e:	e42e                	sd	a1,8(sp)
    8000d260:	85aa                	mv	a1,a0
        self
    8000d262:	6522                	ld	a0,8(sp)
    8000d264:	6910                	ld	a2,16(a0)
    8000d266:	e990                	sd	a2,16(a1)
    8000d268:	6510                	ld	a2,8(a0)
    8000d26a:	e590                	sd	a2,8(a1)
    8000d26c:	6108                	ld	a0,0(a0)
    8000d26e:	e188                	sd	a0,0(a1)
    }
    8000d270:	0141                	addi	sp,sp,16
    8000d272:	8082                	ret

Disassembly of section .text._ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hf2a730b9c7ab248fE:

000000008000d274 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hf2a730b9c7ab248fE>:
    fn into_result(self) -> Self {
    8000d274:	1141                	addi	sp,sp,-16
    8000d276:	e42e                	sd	a1,8(sp)
    8000d278:	85aa                	mv	a1,a0
        self
    8000d27a:	6522                	ld	a0,8(sp)
    8000d27c:	6910                	ld	a2,16(a0)
    8000d27e:	e990                	sd	a2,16(a1)
    8000d280:	6510                	ld	a2,8(a0)
    8000d282:	e590                	sd	a2,8(a1)
    8000d284:	6108                	ld	a0,0(a0)
    8000d286:	e188                	sd	a0,0(a1)
    }
    8000d288:	0141                	addi	sp,sp,16
    8000d28a:	8082                	ret

Disassembly of section .text._ZN6kernel7process7manager11ProcManager9alloc_pid17hc71dad597dc5708aE:

000000008000d28c <_ZN6kernel7process7manager11ProcManager9alloc_pid17hc71dad597dc5708aE>:
    
    // pub fn get_table_mut(&mut self) -> &mut [task_struct; NTASK] {
    //     &mut self.tasks
    // }

    pub fn alloc_pid() -> usize {
    8000d28c:	1101                	addi	sp,sp,-32

000000008000d28e <.LBB0_3>:
        unsafe {
            let ret = nextpid;
    8000d28e:	00066517          	auipc	a0,0x66
    8000d292:	2fa50513          	addi	a0,a0,762 # 80073588 <_ZN6kernel7process7manager7nextpid17h9a7cdc0385d7d3caE>
    8000d296:	610c                	ld	a1,0(a0)
    8000d298:	e42e                	sd	a1,8(sp)
    8000d29a:	ec2e                	sd	a1,24(sp)
            nextpid += 1;
    8000d29c:	00158513          	addi	a0,a1,1 # 10001 <.Lline_table_start0+0x6ff>
    8000d2a0:	e82a                	sd	a0,16(sp)
    8000d2a2:	00b56c63          	bltu	a0,a1,8000d2ba <.LBB0_5>
    8000d2a6:	a009                	j	8000d2a8 <.LBB0_3+0x1a>
    8000d2a8:	6522                	ld	a0,8(sp)
    8000d2aa:	65c2                	ld	a1,16(sp)

000000008000d2ac <.LBB0_4>:
    8000d2ac:	00066617          	auipc	a2,0x66
    8000d2b0:	2dc60613          	addi	a2,a2,732 # 80073588 <_ZN6kernel7process7manager7nextpid17h9a7cdc0385d7d3caE>
    8000d2b4:	e20c                	sd	a1,0(a2)
            ret
        }
    }
    8000d2b6:	6105                	addi	sp,sp,32
    8000d2b8:	8082                	ret

000000008000d2ba <.LBB0_5>:
            nextpid += 1;
    8000d2ba:	0001b517          	auipc	a0,0x1b
    8000d2be:	e4650513          	addi	a0,a0,-442 # 80028100 <str.0>

000000008000d2c2 <.LBB0_6>:
    8000d2c2:	0001b617          	auipc	a2,0x1b
    8000d2c6:	e2660613          	addi	a2,a2,-474 # 800280e8 <.L__unnamed_1>
    8000d2ca:	45f1                	li	a1,28
    8000d2cc:	00015097          	auipc	ra,0x15
    8000d2d0:	faa080e7          	jalr	-86(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel7process7manager11ProcManager4init17h6f55d4e0f14b932aE:

000000008000d2d6 <_ZN6kernel7process7manager11ProcManager4init17h6f55d4e0f14b932aE>:

    /// initialize the proc table at boot time.
    /// Only used in boot.
    pub unsafe fn init(&mut self){
    8000d2d6:	7151                	addi	sp,sp,-240
    8000d2d8:	f586                	sd	ra,232(sp)
    8000d2da:	f02a                	sd	a0,32(sp)
    8000d2dc:	f92a                	sd	a0,176(sp)

000000008000d2de <.LBB1_14>:
        println!("process init......");
    8000d2de:	0001b597          	auipc	a1,0x1b
    8000d2e2:	e5258593          	addi	a1,a1,-430 # 80028130 <.L__unnamed_2>

000000008000d2e6 <.LBB1_15>:
    8000d2e6:	0001b697          	auipc	a3,0x1b
    8000d2ea:	e5a68693          	addi	a3,a3,-422 # 80028140 <.L__unnamed_41>
    8000d2ee:	1028                	addi	a0,sp,40
    8000d2f0:	4605                	li	a2,1
    8000d2f2:	4701                	li	a4,0
    8000d2f4:	ffff8097          	auipc	ra,0xffff8
    8000d2f8:	176080e7          	jalr	374(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8000d2fc:	a009                	j	8000d2fe <.LBB1_15+0x18>
    8000d2fe:	1028                	addi	a0,sp,40
    8000d300:	00011097          	auipc	ra,0x11
    8000d304:	a4c080e7          	jalr	-1460(ra) # 8001dd4c <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8000d308:	a009                	j	8000d30a <.LBB1_15+0x24>
        for (pos, proc) in self.tasks.iter_mut().enumerate() {
    8000d30a:	7502                	ld	a0,32(sp)
    8000d30c:	04000593          	li	a1,64
    8000d310:	00004097          	auipc	ra,0x4
    8000d314:	71e080e7          	jalr	1822(ra) # 80011a2e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h5a59168d2366923eE>
    8000d318:	e82a                	sd	a0,16(sp)
    8000d31a:	ec2e                	sd	a1,24(sp)
    8000d31c:	a009                	j	8000d31e <.LBB1_15+0x38>
    8000d31e:	6662                	ld	a2,24(sp)
    8000d320:	65c2                	ld	a1,16(sp)
    8000d322:	1888                	addi	a0,sp,112
    8000d324:	ffffe097          	auipc	ra,0xffffe
    8000d328:	93a080e7          	jalr	-1734(ra) # 8000ac5e <_ZN4core4iter6traits8iterator8Iterator9enumerate17hf4bbd83c6ce36188E>
    8000d32c:	a009                	j	8000d32e <.LBB1_15+0x48>
    8000d32e:	08a8                	addi	a0,sp,88
    8000d330:	188c                	addi	a1,sp,112
    8000d332:	00005097          	auipc	ra,0x5
    8000d336:	1f6080e7          	jalr	502(ra) # 80012528 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h928d6ed65fce619dE>
    8000d33a:	a009                	j	8000d33c <.LBB1_15+0x56>
    8000d33c:	7526                	ld	a0,104(sp)
    8000d33e:	ed2a                	sd	a0,152(sp)
    8000d340:	7506                	ld	a0,96(sp)
    8000d342:	e92a                	sd	a0,144(sp)
    8000d344:	6566                	ld	a0,88(sp)
    8000d346:	e52a                	sd	a0,136(sp)
    8000d348:	a009                	j	8000d34a <.LBB1_15+0x64>
    8000d34a:	0128                	addi	a0,sp,136
    8000d34c:	00005097          	auipc	ra,0x5
    8000d350:	0da080e7          	jalr	218(ra) # 80012426 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2c3e0997dfaaf459E>
    8000d354:	f12a                	sd	a0,160(sp)
    8000d356:	f52e                	sd	a1,168(sp)
    8000d358:	a009                	j	8000d35a <.LBB1_15+0x74>
    8000d35a:	752a                	ld	a0,168(sp)
    8000d35c:	00a035b3          	snez	a1,a0
    8000d360:	4581                	li	a1,0
    8000d362:	00b50463          	beq	a0,a1,8000d36a <.LBB1_15+0x84>
    8000d366:	a009                	j	8000d368 <.LBB1_15+0x82>
    8000d368:	a029                	j	8000d372 <.LBB1_15+0x8c>
            proc.init(kernel_stack(pos));
        }
    }
    8000d36a:	70ae                	ld	ra,232(sp)
    8000d36c:	616d                	addi	sp,sp,240
    8000d36e:	8082                	ret
        for (pos, proc) in self.tasks.iter_mut().enumerate() {
    8000d370:	0000                	unimp
    8000d372:	750a                	ld	a0,160(sp)
    8000d374:	75aa                	ld	a1,168(sp)
    8000d376:	e02e                	sd	a1,0(sp)
    8000d378:	fd2a                	sd	a0,184(sp)
    8000d37a:	e1ae                	sd	a1,192(sp)
    8000d37c:	e5aa                	sd	a0,200(sp)
    8000d37e:	e9ae                	sd	a1,208(sp)
    8000d380:	edaa                	sd	a0,216(sp)
    8000d382:	f1ae                	sd	a1,224(sp)
            proc.init(kernel_stack(pos));
    8000d384:	00001097          	auipc	ra,0x1
    8000d388:	ff4080e7          	jalr	-12(ra) # 8000e378 <_ZN6kernel7process7manager12kernel_stack17h27945807ba9b8a49E>
    8000d38c:	e42a                	sd	a0,8(sp)
    8000d38e:	a009                	j	8000d390 <.LBB1_15+0xaa>
    8000d390:	65a2                	ld	a1,8(sp)
    8000d392:	6502                	ld	a0,0(sp)
    8000d394:	00009097          	auipc	ra,0x9
    8000d398:	93a080e7          	jalr	-1734(ra) # 80015cce <_ZN6kernel7process7process11task_struct4init17h302d3726f13c442bE>
    8000d39c:	a009                	j	8000d39e <.LBB1_15+0xb8>
        for (pos, proc) in self.tasks.iter_mut().enumerate() {
    8000d39e:	b775                	j	8000d34a <.LBB1_15+0x64>

Disassembly of section .text._ZN6kernel7process7manager11ProcManager14proc_mapstacks17he92f2c2a936a1699E:

000000008000d3a0 <_ZN6kernel7process7manager11ProcManager14proc_mapstacks17he92f2c2a936a1699E>:

    /// Allocate 4 page for each process's kernel stack.
    /// Map it high in memory, followed by an invalid 
    /// group page
    pub unsafe fn proc_mapstacks(&mut self) {
    8000d3a0:	7115                	addi	sp,sp,-224
    8000d3a2:	ed86                	sd	ra,216(sp)
    8000d3a4:	ed2a                	sd	a0,152(sp)
    8000d3a6:	04000593          	li	a1,64
        for (pos, _) in self.tasks.iter_mut().enumerate() {
    8000d3aa:	00004097          	auipc	ra,0x4
    8000d3ae:	684080e7          	jalr	1668(ra) # 80011a2e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h5a59168d2366923eE>
    8000d3b2:	f82a                	sd	a0,48(sp)
    8000d3b4:	fc2e                	sd	a1,56(sp)
    8000d3b6:	a009                	j	8000d3b8 <_ZN6kernel7process7manager11ProcManager14proc_mapstacks17he92f2c2a936a1699E+0x18>
    8000d3b8:	7662                	ld	a2,56(sp)
    8000d3ba:	75c2                	ld	a1,48(sp)
    8000d3bc:	08a8                	addi	a0,sp,88
    8000d3be:	ffffe097          	auipc	ra,0xffffe
    8000d3c2:	8a0080e7          	jalr	-1888(ra) # 8000ac5e <_ZN4core4iter6traits8iterator8Iterator9enumerate17hf4bbd83c6ce36188E>
    8000d3c6:	a009                	j	8000d3c8 <_ZN6kernel7process7manager11ProcManager14proc_mapstacks17he92f2c2a936a1699E+0x28>
    8000d3c8:	0088                	addi	a0,sp,64
    8000d3ca:	08ac                	addi	a1,sp,88
    8000d3cc:	00005097          	auipc	ra,0x5
    8000d3d0:	15c080e7          	jalr	348(ra) # 80012528 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h928d6ed65fce619dE>
    8000d3d4:	a009                	j	8000d3d6 <_ZN6kernel7process7manager11ProcManager14proc_mapstacks17he92f2c2a936a1699E+0x36>
    8000d3d6:	6546                	ld	a0,80(sp)
    8000d3d8:	e12a                	sd	a0,128(sp)
    8000d3da:	6526                	ld	a0,72(sp)
    8000d3dc:	fcaa                	sd	a0,120(sp)
    8000d3de:	6506                	ld	a0,64(sp)
    8000d3e0:	f8aa                	sd	a0,112(sp)
    8000d3e2:	a009                	j	8000d3e4 <_ZN6kernel7process7manager11ProcManager14proc_mapstacks17he92f2c2a936a1699E+0x44>
    8000d3e4:	1888                	addi	a0,sp,112
    8000d3e6:	00005097          	auipc	ra,0x5
    8000d3ea:	040080e7          	jalr	64(ra) # 80012426 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2c3e0997dfaaf459E>
    8000d3ee:	e52a                	sd	a0,136(sp)
    8000d3f0:	e92e                	sd	a1,144(sp)
    8000d3f2:	a009                	j	8000d3f4 <_ZN6kernel7process7manager11ProcManager14proc_mapstacks17he92f2c2a936a1699E+0x54>
    8000d3f4:	654a                	ld	a0,144(sp)
    8000d3f6:	00a035b3          	snez	a1,a0
    8000d3fa:	4581                	li	a1,0
    8000d3fc:	00b50463          	beq	a0,a1,8000d404 <_ZN6kernel7process7manager11ProcManager14proc_mapstacks17he92f2c2a936a1699E+0x64>
    8000d400:	a009                	j	8000d402 <_ZN6kernel7process7manager11ProcManager14proc_mapstacks17he92f2c2a936a1699E+0x62>
    8000d402:	a029                	j	8000d40c <_ZN6kernel7process7manager11ProcManager14proc_mapstacks17he92f2c2a936a1699E+0x6c>
                PGSIZE * 4,
                PteFlags::R | PteFlags::W
            );
            
        }
    }
    8000d404:	60ee                	ld	ra,216(sp)
    8000d406:	612d                	addi	sp,sp,224
    8000d408:	8082                	ret
        for (pos, _) in self.tasks.iter_mut().enumerate() {
    8000d40a:	0000                	unimp
    8000d40c:	652a                	ld	a0,136(sp)
    8000d40e:	f02a                	sd	a0,32(sp)
    8000d410:	65ca                	ld	a1,144(sp)
    8000d412:	f12a                	sd	a0,160(sp)
    8000d414:	f52e                	sd	a1,168(sp)
    8000d416:	f92a                	sd	a0,176(sp)
    8000d418:	fd2e                	sd	a1,184(sp)
    8000d41a:	e1aa                	sd	a0,192(sp)
            let pa = Stack::new_zeroed();
    8000d41c:	ffffd097          	auipc	ra,0xffffd
    8000d420:	b0e080e7          	jalr	-1266(ra) # 80009f2a <_ZN6kernel6memory13PageAllocator10new_zeroed17h849e935775a724f6E>
    8000d424:	85aa                	mv	a1,a0
    8000d426:	f42e                	sd	a1,40(sp)
    8000d428:	e5aa                	sd	a0,200(sp)
    8000d42a:	a009                	j	8000d42c <_ZN6kernel7process7manager11ProcManager14proc_mapstacks17he92f2c2a936a1699E+0x8c>
            let va = kernel_stack(pos);
    8000d42c:	7502                	ld	a0,32(sp)
    8000d42e:	00001097          	auipc	ra,0x1
    8000d432:	f4a080e7          	jalr	-182(ra) # 8000e378 <_ZN6kernel7process7manager12kernel_stack17h27945807ba9b8a49E>
    8000d436:	85aa                	mv	a1,a0
    8000d438:	ec2e                	sd	a1,24(sp)
    8000d43a:	e9aa                	sd	a0,208(sp)
    8000d43c:	a009                	j	8000d43e <_ZN6kernel7process7manager11ProcManager14proc_mapstacks17he92f2c2a936a1699E+0x9e>
                VirtualAddress::new(va),
    8000d43e:	6562                	ld	a0,24(sp)
    8000d440:	00004097          	auipc	ra,0x4
    8000d444:	420080e7          	jalr	1056(ra) # 80011860 <_ZN6kernel6memory7address14VirtualAddress3new17h716be423461f1938E>
    8000d448:	e82a                	sd	a0,16(sp)
    8000d44a:	a009                	j	8000d44c <_ZN6kernel7process7manager11ProcManager14proc_mapstacks17he92f2c2a936a1699E+0xac>
                PhysicalAddress::new(pa),
    8000d44c:	7522                	ld	a0,40(sp)
    8000d44e:	00004097          	auipc	ra,0x4
    8000d452:	4c2080e7          	jalr	1218(ra) # 80011910 <_ZN6kernel6memory7address15PhysicalAddress3new17hf2b76f8479ac6235E>
    8000d456:	e42a                	sd	a0,8(sp)
    8000d458:	a009                	j	8000d45a <_ZN6kernel7process7manager11ProcManager14proc_mapstacks17he92f2c2a936a1699E+0xba>
    8000d45a:	4509                	li	a0,2
    8000d45c:	4591                	li	a1,4
                PteFlags::R | PteFlags::W
    8000d45e:	ffffb097          	auipc	ra,0xffffb
    8000d462:	3f2080e7          	jalr	1010(ra) # 80008850 <_ZN93_$LT$kernel..memory..mapping..page_table_entry..PteFlags$u20$as$u20$core..ops..bit..BitOr$GT$5bitor17h95bfa721b377cbd2E>
    8000d466:	e02a                	sd	a0,0(sp)
    8000d468:	a009                	j	8000d46a <_ZN6kernel7process7manager11ProcManager14proc_mapstacks17he92f2c2a936a1699E+0xca>
            KERNEL_PAGETABLE.kernel_map(
    8000d46a:	6702                	ld	a4,0(sp)
    8000d46c:	6622                	ld	a2,8(sp)
    8000d46e:	65c2                	ld	a1,16(sp)

000000008000d470 <.LBB2_16>:
    8000d470:	00065517          	auipc	a0,0x65
    8000d474:	b9050513          	addi	a0,a0,-1136 # 80072000 <_ZN6kernel6memory7mapping10kernel_map16KERNEL_PAGETABLE17h338fe72968ecefecE>
    8000d478:	6691                	lui	a3,0x4
    8000d47a:	0000a097          	auipc	ra,0xa
    8000d47e:	fa8080e7          	jalr	-88(ra) # 80017422 <_ZN6kernel6memory7mapping10page_table9PageTable10kernel_map17h284e6512c0cc8b52E>
    8000d482:	a009                	j	8000d484 <.LBB2_16+0x14>
        for (pos, _) in self.tasks.iter_mut().enumerate() {
    8000d484:	b785                	j	8000d3e4 <_ZN6kernel7process7manager11ProcManager14proc_mapstacks17he92f2c2a936a1699E+0x44>

Disassembly of section .text._ZN6kernel7process7manager11ProcManager9user_init17h45a7031cbcd11d0fE:

000000008000d486 <_ZN6kernel7process7manager11ProcManager9user_init17h45a7031cbcd11d0fE>:

    /// Set up first user programe
    pub unsafe fn user_init(&mut self) {
    8000d486:	7151                	addi	sp,sp,-240
    8000d488:	f586                	sd	ra,232(sp)
    8000d48a:	f42a                	sd	a0,40(sp)
    8000d48c:	f92a                	sd	a0,176(sp)

000000008000d48e <.LBB3_15>:
        println!("first user process init......");
    8000d48e:	0001b597          	auipc	a1,0x1b
    8000d492:	cd258593          	addi	a1,a1,-814 # 80028160 <.L__unnamed_4>

000000008000d496 <.LBB3_16>:
    8000d496:	0001b697          	auipc	a3,0x1b
    8000d49a:	caa68693          	addi	a3,a3,-854 # 80028140 <.L__unnamed_41>
    8000d49e:	1808                	addi	a0,sp,48
    8000d4a0:	4605                	li	a2,1
    8000d4a2:	4701                	li	a4,0
    8000d4a4:	ffff8097          	auipc	ra,0xffff8
    8000d4a8:	fc6080e7          	jalr	-58(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8000d4ac:	a009                	j	8000d4ae <.LBB3_16+0x18>
    8000d4ae:	1808                	addi	a0,sp,48
    8000d4b0:	00011097          	auipc	ra,0x11
    8000d4b4:	89c080e7          	jalr	-1892(ra) # 8001dd4c <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8000d4b8:	a009                	j	8000d4ba <.LBB3_16+0x24>
        let task = ProcManager::alloc_proc().expect("Fail to get unused process");
    8000d4ba:	00000097          	auipc	ra,0x0
    8000d4be:	15a080e7          	jalr	346(ra) # 8000d614 <_ZN6kernel7process7manager11ProcManager10alloc_proc17h18aef4c1178ef690E>
    8000d4c2:	f02a                	sd	a0,32(sp)
    8000d4c4:	a009                	j	8000d4c6 <.LBB3_16+0x30>
    8000d4c6:	7502                	ld	a0,32(sp)

000000008000d4c8 <.LBB3_17>:
    8000d4c8:	0001b597          	auipc	a1,0x1b
    8000d4cc:	ca858593          	addi	a1,a1,-856 # 80028170 <.L__unnamed_5>

000000008000d4d0 <.LBB3_18>:
    8000d4d0:	0001b697          	auipc	a3,0x1b
    8000d4d4:	cc068693          	addi	a3,a3,-832 # 80028190 <.L__unnamed_6>
    8000d4d8:	4669                	li	a2,26
    8000d4da:	00001097          	auipc	ra,0x1
    8000d4de:	686080e7          	jalr	1670(ra) # 8000eb60 <_ZN4core6option15Option$LT$T$GT$6expect17h5cc0070b74d715b8E>
    8000d4e2:	85aa                	mv	a1,a0
    8000d4e4:	ec2e                	sd	a1,24(sp)
    8000d4e6:	fd2a                	sd	a0,184(sp)
    8000d4e8:	a009                	j	8000d4ea <.LBB3_18+0x1a>

        // allocate one user page and copy init's instructions
        // and data into it.
        task.pagetable.as_mut().unwrap().uvm_init(
    8000d4ea:	6562                	ld	a0,24(sp)
    8000d4ec:	6d08                	ld	a0,24(a0)
    8000d4ee:	fffff097          	auipc	ra,0xfffff
    8000d4f2:	6a2080e7          	jalr	1698(ra) # 8000cb90 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17hfc3d5eeea9dab8e4E>
    8000d4f6:	e82a                	sd	a0,16(sp)
    8000d4f8:	a009                	j	8000d4fa <.LBB3_18+0x2a>
    8000d4fa:	6542                	ld	a0,16(sp)

000000008000d4fc <.LBB3_19>:
    8000d4fc:	0001b597          	auipc	a1,0x1b
    8000d500:	cac58593          	addi	a1,a1,-852 # 800281a8 <.L__unnamed_7>
    8000d504:	00001097          	auipc	ra,0x1
    8000d508:	6cc080e7          	jalr	1740(ra) # 8000ebd0 <_ZN4core6option15Option$LT$T$GT$6unwrap17h2b22556a60663957E>
    8000d50c:	e42a                	sd	a0,8(sp)
    8000d50e:	a009                	j	8000d510 <.LBB3_19+0x14>
    8000d510:	6522                	ld	a0,8(sp)

000000008000d512 <.LBB3_20>:
    8000d512:	0001e597          	auipc	a1,0x1e
    8000d516:	fb658593          	addi	a1,a1,-74 # 8002b4c8 <_ZN6kernel7process8INITCODE17hdd0694ed5e43946eE>
    8000d51a:	03300613          	li	a2,51
    8000d51e:	0000a097          	auipc	ra,0xa
    8000d522:	f82080e7          	jalr	-126(ra) # 800174a0 <_ZN6kernel6memory7mapping10page_table9PageTable8uvm_init17h1e8988bec17c91edE>
    8000d526:	a009                	j	8000d528 <.LBB3_20+0x16>
    8000d528:	6562                	ld	a0,24(sp)
    8000d52a:	6585                	lui	a1,0x1
            &INITCODE,
        );

        task.size = PGSIZE;
    8000d52c:	e90c                	sd	a1,16(a0)

        // prepare for the very first "return" from kernel to user. 
        let tf = &mut *task.trapframe;
    8000d52e:	7110                	ld	a2,32(a0)
    8000d530:	e1b2                	sd	a2,192(sp)
    8000d532:	4581                	li	a1,0
        tf.epc = 0; // user program counter
    8000d534:	ee0c                	sd	a1,24(a2)

000000008000d536 <.LBB3_21>:
        tf.sp = 4 * PGSIZE; // user stack pointer
    8000d536:	00018597          	auipc	a1,0x18
    8000d53a:	15a58593          	addi	a1,a1,346 # 80025690 <.L__unnamed_35+0x18>
    8000d53e:	618c                	ld	a1,0(a1)
    8000d540:	fa0c                	sd	a1,48(a2)

000000008000d542 <.LBB3_22>:

        let init_name = b"initname\0";
    8000d542:	0001b597          	auipc	a1,0x1b
    8000d546:	c7e58593          	addi	a1,a1,-898 # 800281c0 <.L__unnamed_9>
    8000d54a:	e5ae                	sd	a1,200(sp)
    8000d54c:	4625                	li	a2,9
        task.set_name(init_name);
    8000d54e:	00008097          	auipc	ra,0x8
    8000d552:	52e080e7          	jalr	1326(ra) # 80015a7c <_ZN6kernel7process7process11task_struct8set_name17h97383af55b55362eE>
    8000d556:	a009                	j	8000d558 <.LBB3_23>

000000008000d558 <.LBB3_23>:
        // Set init process's directory
        task.cwd = Some(ICACHE.namei(&ROOTIPATH).expect("cannot find root inode"));
    8000d558:	0005a597          	auipc	a1,0x5a
    8000d55c:	53858593          	addi	a1,a1,1336 # 80067a90 <_ZN6kernel2fs5inode6ICACHE17had1be8942ca79bf1E>

000000008000d560 <.LBB3_24>:
    8000d560:	0001b617          	auipc	a2,0x1b
    8000d564:	c6960613          	addi	a2,a2,-919 # 800281c9 <.L__unnamed_10>
    8000d568:	0128                	addi	a0,sp,136
    8000d56a:	4689                	li	a3,2
    8000d56c:	0000c097          	auipc	ra,0xc
    8000d570:	f06080e7          	jalr	-250(ra) # 80019472 <_ZN6kernel2fs5inode10InodeCache5namei17hc269c6a9eecf1991E>
    8000d574:	a009                	j	8000d576 <.LBB3_25>

000000008000d576 <.LBB3_25>:
    8000d576:	0001b597          	auipc	a1,0x1b
    8000d57a:	c5558593          	addi	a1,a1,-939 # 800281cb <.L__unnamed_11>

000000008000d57e <.LBB3_26>:
    8000d57e:	0001b697          	auipc	a3,0x1b
    8000d582:	c6a68693          	addi	a3,a3,-918 # 800281e8 <.L__unnamed_12>
    8000d586:	0128                	addi	a0,sp,136
    8000d588:	4659                	li	a2,22
    8000d58a:	00001097          	auipc	ra,0x1
    8000d58e:	60c080e7          	jalr	1548(ra) # 8000eb96 <_ZN4core6option15Option$LT$T$GT$6expect17h91dc8b235b72ffe4E>
    8000d592:	e9aa                	sd	a0,208(sp)
    8000d594:	edae                	sd	a1,216(sp)
    8000d596:	fcaa                	sd	a0,120(sp)
    8000d598:	e12e                	sd	a1,128(sp)
    8000d59a:	a009                	j	8000d59c <.LBB3_26+0x1e>
    8000d59c:	6562                	ld	a0,24(sp)
    8000d59e:	658a                	ld	a1,128(sp)
    8000d5a0:	f8ae                	sd	a1,112(sp)
    8000d5a2:	75e6                	ld	a1,120(sp)
    8000d5a4:	f4ae                	sd	a1,104(sp)
    8000d5a6:	4585                	li	a1,1
    8000d5a8:	f0ae                	sd	a1,96(sp)
    8000d5aa:	3c850513          	addi	a0,a0,968
    8000d5ae:	ffffa097          	auipc	ra,0xffffa
    8000d5b2:	99e080e7          	jalr	-1634(ra) # 80006f4c <_ZN4core3ptr73drop_in_place$LT$core..option..Option$LT$kernel..fs..inode..Inode$GT$$GT$17h6a7b3b84406d6cdfE>
    8000d5b6:	a815                	j	8000d5ea <.LBB3_26+0x6c>
    8000d5b8:	6562                	ld	a0,24(sp)
    8000d5ba:	458d                	li	a1,3
        
        let guard = self.tasks_lock.acquire();
        task.set_state(ProcState::RUNNABLE);
    8000d5bc:	0ab107a3          	sb	a1,175(sp)
    8000d5c0:	00009097          	auipc	ra,0x9
    8000d5c4:	a4c080e7          	jalr	-1460(ra) # 8001600c <_ZN6kernel7process7process11task_struct9set_state17h31b362f9ace47b8fE>
    8000d5c8:	a009                	j	8000d5ca <.LBB3_26+0x4c>
        drop(guard);
    8000d5ca:	750a                	ld	a0,160(sp)
    8000d5cc:	00010097          	auipc	ra,0x10
    8000d5d0:	a54080e7          	jalr	-1452(ra) # 8001d020 <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    8000d5d4:	a009                	j	8000d5d6 <.LBB3_26+0x58>
    8000d5d6:	6562                	ld	a0,24(sp)
    8000d5d8:	75a2                	ld	a1,40(sp)
    8000d5da:	6641                	lui	a2,0x10
    8000d5dc:	4006061b          	addiw	a2,a2,1024

        // Set init process
        self.init_proc = task as *mut task_struct;
    8000d5e0:	95b2                	add	a1,a1,a2
    8000d5e2:	e188                	sd	a0,0(a1)
    }
    8000d5e4:	70ae                	ld	ra,232(sp)
    8000d5e6:	616d                	addi	sp,sp,240
    8000d5e8:	8082                	ret
        task.cwd = Some(ICACHE.namei(&ROOTIPATH).expect("cannot find root inode"));
    8000d5ea:	7522                	ld	a0,40(sp)
    8000d5ec:	6662                	ld	a2,24(sp)
    8000d5ee:	75c6                	ld	a1,112(sp)
    8000d5f0:	3cb63c23          	sd	a1,984(a2) # 103d8 <.Lline_table_start0+0xad6>
    8000d5f4:	75a6                	ld	a1,104(sp)
    8000d5f6:	3cb63823          	sd	a1,976(a2)
    8000d5fa:	7586                	ld	a1,96(sp)
    8000d5fc:	3cb63423          	sd	a1,968(a2)
    8000d600:	65c1                	lui	a1,0x10
    8000d602:	4085859b          	addiw	a1,a1,1032
        let guard = self.tasks_lock.acquire();
    8000d606:	952e                	add	a0,a0,a1
    8000d608:	00003097          	auipc	ra,0x3
    8000d60c:	206080e7          	jalr	518(ra) # 8001080e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    8000d610:	f12a                	sd	a0,160(sp)
    8000d612:	b75d                	j	8000d5b8 <.LBB3_26+0x3a>

Disassembly of section .text._ZN6kernel7process7manager11ProcManager10alloc_proc17h18aef4c1178ef690E:

000000008000d614 <_ZN6kernel7process7manager11ProcManager10alloc_proc17h18aef4c1178ef690E>:
    /// If found, initialize state required to run in the kernel,
    /// and return p.acquire() held.
    /// If there are a free procs, or a memory allocation fails, return 0. 

    /// WARNING: possible error occurs here.
    pub fn alloc_proc() -> Option<&'static mut task_struct> {
    8000d614:	7135                	addi	sp,sp,-160
    8000d616:	ed06                	sd	ra,152(sp)
    8000d618:	6541                	lui	a0,0x10
    8000d61a:	4085059b          	addiw	a1,a0,1032

000000008000d61e <.LBB4_21>:
    8000d61e:	0004a517          	auipc	a0,0x4a
    8000d622:	f8250513          	addi	a0,a0,-126 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    8000d626:	952e                	add	a0,a0,a1

        let guard = unsafe { PROC_MANAGER.tasks_lock.acquire() };
    8000d628:	00003097          	auipc	ra,0x3
    8000d62c:	1e6080e7          	jalr	486(ra) # 8001080e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    8000d630:	85aa                	mv	a1,a0
    8000d632:	e0ae                	sd	a1,64(sp)
    8000d634:	f8aa                	sd	a0,112(sp)
    8000d636:	a009                	j	8000d638 <.LBB4_22>

000000008000d638 <.LBB4_22>:

        // let alloc_pid = self.alloc_pid();
   
        for task in unsafe { PROC_MANAGER.tasks.iter_mut() } {
    8000d638:	0004a517          	auipc	a0,0x4a
    8000d63c:	f6850513          	addi	a0,a0,-152 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    8000d640:	04000593          	li	a1,64
    8000d644:	00004097          	auipc	ra,0x4
    8000d648:	3ea080e7          	jalr	1002(ra) # 80011a2e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h5a59168d2366923eE>
    8000d64c:	f82a                	sd	a0,48(sp)
    8000d64e:	fc2e                	sd	a1,56(sp)
    8000d650:	a009                	j	8000d652 <.LBB4_22+0x1a>
    8000d652:	75e2                	ld	a1,56(sp)
    8000d654:	7542                	ld	a0,48(sp)
    8000d656:	ffffe097          	auipc	ra,0xffffe
    8000d65a:	a24080e7          	jalr	-1500(ra) # 8000b07a <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17ha1082b6c43007424E>
    8000d65e:	f02a                	sd	a0,32(sp)
    8000d660:	f42e                	sd	a1,40(sp)
    8000d662:	a009                	j	8000d664 <.LBB4_22+0x2c>
    8000d664:	7522                	ld	a0,40(sp)
    8000d666:	7582                	ld	a1,32(sp)
    8000d668:	e8ae                	sd	a1,80(sp)
    8000d66a:	ecaa                	sd	a0,88(sp)
    8000d66c:	a009                	j	8000d66e <.LBB4_22+0x36>
    8000d66e:	0888                	addi	a0,sp,80
    8000d670:	ffffe097          	auipc	ra,0xffffe
    8000d674:	c40080e7          	jalr	-960(ra) # 8000b2b0 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17habdea9e62d8c6ddfE>
    8000d678:	f0aa                	sd	a0,96(sp)
    8000d67a:	a009                	j	8000d67c <.LBB4_22+0x44>
    8000d67c:	7506                	ld	a0,96(sp)
    8000d67e:	00a035b3          	snez	a1,a0
    8000d682:	4581                	li	a1,0
    8000d684:	00b50463          	beq	a0,a1,8000d68c <.LBB4_22+0x54>
    8000d688:	a009                	j	8000d68a <.LBB4_22+0x52>
    8000d68a:	a801                	j	8000d69a <.LBB4_22+0x62>
                    return Some(task)
                }
                _ => {}
            }
        }
        drop(guard);
    8000d68c:	6506                	ld	a0,64(sp)
    8000d68e:	00010097          	auipc	ra,0x10
    8000d692:	992080e7          	jalr	-1646(ra) # 8001d020 <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    8000d696:	a071                	j	8000d722 <.LBB4_22+0xea>
        for task in unsafe { PROC_MANAGER.tasks.iter_mut() } {
    8000d698:	0000                	unimp
    8000d69a:	7506                	ld	a0,96(sp)
    8000d69c:	ec2a                	sd	a0,24(sp)
    8000d69e:	fcaa                	sd	a0,120(sp)
    8000d6a0:	e12a                	sd	a0,128(sp)
    8000d6a2:	e52a                	sd	a0,136(sp)
                ProcState::UNUSED => {
    8000d6a4:	40854503          	lbu	a0,1032(a0)
    8000d6a8:	4581                	li	a1,0
    8000d6aa:	00b50463          	beq	a0,a1,8000d6b2 <.LBB4_22+0x7a>
    8000d6ae:	a009                	j	8000d6b0 <.LBB4_22+0x78>
        for task in unsafe { PROC_MANAGER.tasks.iter_mut() } {
    8000d6b0:	bf7d                	j	8000d66e <.LBB4_22+0x36>
                    task.pid = ProcManager::alloc_pid();
    8000d6b2:	00000097          	auipc	ra,0x0
    8000d6b6:	bda080e7          	jalr	-1062(ra) # 8000d28c <_ZN6kernel7process7manager11ProcManager9alloc_pid17hc71dad597dc5708aE>
    8000d6ba:	e82a                	sd	a0,16(sp)
    8000d6bc:	a009                	j	8000d6be <.LBB4_22+0x86>
    8000d6be:	6562                	ld	a0,24(sp)
    8000d6c0:	65c2                	ld	a1,16(sp)
    8000d6c2:	3eb53823          	sd	a1,1008(a0)
    8000d6c6:	4599                	li	a1,6
                    task.set_state(ProcState::ALLOCATED);
    8000d6c8:	06b107a3          	sb	a1,111(sp)
    8000d6cc:	00009097          	auipc	ra,0x9
    8000d6d0:	940080e7          	jalr	-1728(ra) # 8001600c <_ZN6kernel7process7process11task_struct9set_state17h31b362f9ace47b8fE>
    8000d6d4:	a009                	j	8000d6d6 <.LBB4_22+0x9e>
                    drop(guard);
    8000d6d6:	6506                	ld	a0,64(sp)
    8000d6d8:	00010097          	auipc	ra,0x10
    8000d6dc:	948080e7          	jalr	-1720(ra) # 8001d020 <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    8000d6e0:	a009                	j	8000d6e2 <.LBB4_22+0xaa>
                    let trapframe = unsafe{ RawPage::new_zeroed() as *mut u8 };
    8000d6e2:	ffffd097          	auipc	ra,0xffffd
    8000d6e6:	882080e7          	jalr	-1918(ra) # 80009f64 <_ZN6kernel6memory13PageAllocator10new_zeroed17hbc99bdbca8d1d931E>
    8000d6ea:	e42a                	sd	a0,8(sp)
    8000d6ec:	a009                	j	8000d6ee <.LBB4_22+0xb6>
    8000d6ee:	65a2                	ld	a1,8(sp)
    8000d6f0:	6562                	ld	a0,24(sp)
    8000d6f2:	e92e                	sd	a1,144(sp)
                    task.set_trapframe(trapframe as *mut Trapframe);
    8000d6f4:	00008097          	auipc	ra,0x8
    8000d6f8:	400080e7          	jalr	1024(ra) # 80015af4 <_ZN6kernel7process7process11task_struct13set_trapframe17he9793e67a5624ae0E>
    8000d6fc:	a009                	j	8000d6fe <.LBB4_22+0xc6>
                    task.pagetable = task.proc_pagetable();
    8000d6fe:	6562                	ld	a0,24(sp)
    8000d700:	00009097          	auipc	ra,0x9
    8000d704:	972080e7          	jalr	-1678(ra) # 80016072 <_ZN6kernel7process7process11task_struct14proc_pagetable17h014e9ba7c74d9318E>
    8000d708:	e02a                	sd	a0,0(sp)
    8000d70a:	a009                	j	8000d70c <.LBB4_22+0xd4>
    8000d70c:	6562                	ld	a0,24(sp)
    8000d70e:	6582                	ld	a1,0(sp)
    8000d710:	ed0c                	sd	a1,24(a0)
                    task.init_context();
    8000d712:	00008097          	auipc	ra,0x8
    8000d716:	3fa080e7          	jalr	1018(ra) # 80015b0c <_ZN6kernel7process7process11task_struct12init_context17hb9b4e203886f153dE>
    8000d71a:	a009                	j	8000d71c <.LBB4_22+0xe4>
                    return Some(task)
    8000d71c:	6562                	ld	a0,24(sp)
    8000d71e:	e4aa                	sd	a0,72(sp)
        None
    }
    8000d720:	a021                	j	8000d728 <.LBB4_22+0xf0>
    8000d722:	4501                	li	a0,0
        None
    8000d724:	e4aa                	sd	a0,72(sp)
    }
    8000d726:	a009                	j	8000d728 <.LBB4_22+0xf0>
    8000d728:	6526                	ld	a0,72(sp)
    8000d72a:	60ea                	ld	ra,152(sp)
    8000d72c:	610d                	addi	sp,sp,160
    8000d72e:	8082                	ret

Disassembly of section .text._ZN6kernel7process7manager11ProcManager12alloc_thread17hfa981750c8094e17E:

000000008000d730 <_ZN6kernel7process7manager11ProcManager12alloc_thread17hfa981750c8094e17E>:

    pub fn alloc_thread() -> Option<&'static mut task_struct> {
    8000d730:	7135                	addi	sp,sp,-160
    8000d732:	ed06                	sd	ra,152(sp)
    8000d734:	6541                	lui	a0,0x10
    8000d736:	4085059b          	addiw	a1,a0,1032

000000008000d73a <.LBB5_20>:
    8000d73a:	0004a517          	auipc	a0,0x4a
    8000d73e:	e6650513          	addi	a0,a0,-410 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    8000d742:	952e                	add	a0,a0,a1

        let guard = unsafe { PROC_MANAGER.tasks_lock.acquire() };
    8000d744:	00003097          	auipc	ra,0x3
    8000d748:	0ca080e7          	jalr	202(ra) # 8001080e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    8000d74c:	85aa                	mv	a1,a0
    8000d74e:	e0ae                	sd	a1,64(sp)
    8000d750:	f8aa                	sd	a0,112(sp)
    8000d752:	a009                	j	8000d754 <.LBB5_21>

000000008000d754 <.LBB5_21>:

        // let alloc_pid = self.alloc_pid();
   
        for task in unsafe { PROC_MANAGER.tasks.iter_mut() } {
    8000d754:	0004a517          	auipc	a0,0x4a
    8000d758:	e4c50513          	addi	a0,a0,-436 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    8000d75c:	04000593          	li	a1,64
    8000d760:	00004097          	auipc	ra,0x4
    8000d764:	2ce080e7          	jalr	718(ra) # 80011a2e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h5a59168d2366923eE>
    8000d768:	f82a                	sd	a0,48(sp)
    8000d76a:	fc2e                	sd	a1,56(sp)
    8000d76c:	a009                	j	8000d76e <.LBB5_21+0x1a>
    8000d76e:	75e2                	ld	a1,56(sp)
    8000d770:	7542                	ld	a0,48(sp)
    8000d772:	ffffe097          	auipc	ra,0xffffe
    8000d776:	908080e7          	jalr	-1784(ra) # 8000b07a <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17ha1082b6c43007424E>
    8000d77a:	f02a                	sd	a0,32(sp)
    8000d77c:	f42e                	sd	a1,40(sp)
    8000d77e:	a009                	j	8000d780 <.LBB5_21+0x2c>
    8000d780:	7522                	ld	a0,40(sp)
    8000d782:	7582                	ld	a1,32(sp)
    8000d784:	e8ae                	sd	a1,80(sp)
    8000d786:	ecaa                	sd	a0,88(sp)
    8000d788:	a009                	j	8000d78a <.LBB5_21+0x36>
    8000d78a:	0888                	addi	a0,sp,80
    8000d78c:	ffffe097          	auipc	ra,0xffffe
    8000d790:	b24080e7          	jalr	-1244(ra) # 8000b2b0 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17habdea9e62d8c6ddfE>
    8000d794:	f0aa                	sd	a0,96(sp)
    8000d796:	a009                	j	8000d798 <.LBB5_21+0x44>
    8000d798:	7506                	ld	a0,96(sp)
    8000d79a:	00a035b3          	snez	a1,a0
    8000d79e:	4581                	li	a1,0
    8000d7a0:	00b50463          	beq	a0,a1,8000d7a8 <.LBB5_21+0x54>
    8000d7a4:	a009                	j	8000d7a6 <.LBB5_21+0x52>
    8000d7a6:	a801                	j	8000d7b6 <.LBB5_21+0x62>
                    return Some(task)
                }
                _ => {}
            }
        }
        drop(guard);
    8000d7a8:	6506                	ld	a0,64(sp)
    8000d7aa:	00010097          	auipc	ra,0x10
    8000d7ae:	876080e7          	jalr	-1930(ra) # 8001d020 <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    8000d7b2:	a8ad                	j	8000d82c <.LBB5_21+0xd8>
        for task in unsafe { PROC_MANAGER.tasks.iter_mut() } {
    8000d7b4:	0000                	unimp
    8000d7b6:	7506                	ld	a0,96(sp)
    8000d7b8:	ec2a                	sd	a0,24(sp)
    8000d7ba:	fcaa                	sd	a0,120(sp)
    8000d7bc:	e12a                	sd	a0,128(sp)
    8000d7be:	e52a                	sd	a0,136(sp)
                ProcState::UNUSED => {
    8000d7c0:	40854503          	lbu	a0,1032(a0)
    8000d7c4:	4581                	li	a1,0
    8000d7c6:	00b50463          	beq	a0,a1,8000d7ce <.LBB5_21+0x7a>
    8000d7ca:	a009                	j	8000d7cc <.LBB5_21+0x78>
        for task in unsafe { PROC_MANAGER.tasks.iter_mut() } {
    8000d7cc:	bf7d                	j	8000d78a <.LBB5_21+0x36>
                    task.pid = ProcManager::alloc_pid();
    8000d7ce:	00000097          	auipc	ra,0x0
    8000d7d2:	abe080e7          	jalr	-1346(ra) # 8000d28c <_ZN6kernel7process7manager11ProcManager9alloc_pid17hc71dad597dc5708aE>
    8000d7d6:	e82a                	sd	a0,16(sp)
    8000d7d8:	a009                	j	8000d7da <.LBB5_21+0x86>
    8000d7da:	6562                	ld	a0,24(sp)
    8000d7dc:	65c2                	ld	a1,16(sp)
    8000d7de:	3eb53823          	sd	a1,1008(a0)
    8000d7e2:	4599                	li	a1,6
                    task.set_state(ProcState::ALLOCATED);
    8000d7e4:	06b107a3          	sb	a1,111(sp)
    8000d7e8:	00009097          	auipc	ra,0x9
    8000d7ec:	824080e7          	jalr	-2012(ra) # 8001600c <_ZN6kernel7process7process11task_struct9set_state17h31b362f9ace47b8fE>
    8000d7f0:	a009                	j	8000d7f2 <.LBB5_21+0x9e>
                    drop(guard);
    8000d7f2:	6506                	ld	a0,64(sp)
    8000d7f4:	00010097          	auipc	ra,0x10
    8000d7f8:	82c080e7          	jalr	-2004(ra) # 8001d020 <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    8000d7fc:	a009                	j	8000d7fe <.LBB5_21+0xaa>
                    let trapframe = unsafe{ RawPage::new_zeroed() as *mut u8 };
    8000d7fe:	ffffc097          	auipc	ra,0xffffc
    8000d802:	766080e7          	jalr	1894(ra) # 80009f64 <_ZN6kernel6memory13PageAllocator10new_zeroed17hbc99bdbca8d1d931E>
    8000d806:	e42a                	sd	a0,8(sp)
    8000d808:	a009                	j	8000d80a <.LBB5_21+0xb6>
    8000d80a:	65a2                	ld	a1,8(sp)
    8000d80c:	6562                	ld	a0,24(sp)
    8000d80e:	e92e                	sd	a1,144(sp)
                    task.set_trapframe(trapframe as *mut Trapframe);
    8000d810:	00008097          	auipc	ra,0x8
    8000d814:	2e4080e7          	jalr	740(ra) # 80015af4 <_ZN6kernel7process7process11task_struct13set_trapframe17he9793e67a5624ae0E>
    8000d818:	a009                	j	8000d81a <.LBB5_21+0xc6>
                    task.init_context();
    8000d81a:	6562                	ld	a0,24(sp)
    8000d81c:	00008097          	auipc	ra,0x8
    8000d820:	2f0080e7          	jalr	752(ra) # 80015b0c <_ZN6kernel7process7process11task_struct12init_context17hb9b4e203886f153dE>
    8000d824:	a009                	j	8000d826 <.LBB5_21+0xd2>
                    return Some(task)
    8000d826:	6562                	ld	a0,24(sp)
    8000d828:	e4aa                	sd	a0,72(sp)
        None
    }
    8000d82a:	a021                	j	8000d832 <.LBB5_21+0xde>
    8000d82c:	4501                	li	a0,0
        None
    8000d82e:	e4aa                	sd	a0,72(sp)
    }
    8000d830:	a009                	j	8000d832 <.LBB5_21+0xde>
    8000d832:	6526                	ld	a0,72(sp)
    8000d834:	60ea                	ld	ra,152(sp)
    8000d836:	610d                	addi	sp,sp,160
    8000d838:	8082                	ret

Disassembly of section .text._ZN6kernel7process7manager11ProcManager7wakeup117hddcdae2e398d5cf3E:

000000008000d83a <_ZN6kernel7process7manager11ProcManager7wakeup117hddcdae2e398d5cf3E>:


    pub fn wakeup1(channel: usize){
    8000d83a:	7119                	addi	sp,sp,-128
    8000d83c:	fc86                	sd	ra,120(sp)
    8000d83e:	f02a                	sd	a0,32(sp)
    8000d840:	ecaa                	sd	a0,88(sp)

000000008000d842 <.LBB6_17>:
        for task in unsafe { PROC_MANAGER.tasks.iter_mut() }{
    8000d842:	0004a517          	auipc	a0,0x4a
    8000d846:	d5e50513          	addi	a0,a0,-674 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    8000d84a:	04000593          	li	a1,64
    8000d84e:	00004097          	auipc	ra,0x4
    8000d852:	1e0080e7          	jalr	480(ra) # 80011a2e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h5a59168d2366923eE>
    8000d856:	f42a                	sd	a0,40(sp)
    8000d858:	f82e                	sd	a1,48(sp)
    8000d85a:	a009                	j	8000d85c <.LBB6_17+0x1a>
    8000d85c:	75c2                	ld	a1,48(sp)
    8000d85e:	7522                	ld	a0,40(sp)
    8000d860:	ffffe097          	auipc	ra,0xffffe
    8000d864:	81a080e7          	jalr	-2022(ra) # 8000b07a <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17ha1082b6c43007424E>
    8000d868:	e82a                	sd	a0,16(sp)
    8000d86a:	ec2e                	sd	a1,24(sp)
    8000d86c:	a009                	j	8000d86e <.LBB6_17+0x2c>
    8000d86e:	6562                	ld	a0,24(sp)
    8000d870:	65c2                	ld	a1,16(sp)
    8000d872:	fc2e                	sd	a1,56(sp)
    8000d874:	e0aa                	sd	a0,64(sp)
    8000d876:	a009                	j	8000d878 <.LBB6_17+0x36>
    8000d878:	1828                	addi	a0,sp,56
    8000d87a:	ffffe097          	auipc	ra,0xffffe
    8000d87e:	a36080e7          	jalr	-1482(ra) # 8000b2b0 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17habdea9e62d8c6ddfE>
    8000d882:	e4aa                	sd	a0,72(sp)
    8000d884:	a009                	j	8000d886 <.LBB6_17+0x44>
    8000d886:	6526                	ld	a0,72(sp)
    8000d888:	00a035b3          	snez	a1,a0
    8000d88c:	4581                	li	a1,0
    8000d88e:	00b50463          	beq	a0,a1,8000d896 <.LBB6_17+0x54>
    8000d892:	a009                	j	8000d894 <.LBB6_17+0x52>
    8000d894:	a029                	j	8000d89e <.LBB6_17+0x5c>
            if task.state == ProcState::SLEEPING && task.channel == channel {
                task.state = ProcState::RUNNABLE;
            }
        }
    }
    8000d896:	70e6                	ld	ra,120(sp)
    8000d898:	6109                	addi	sp,sp,128
    8000d89a:	8082                	ret
        for task in unsafe { PROC_MANAGER.tasks.iter_mut() }{
    8000d89c:	0000                	unimp
    8000d89e:	6526                	ld	a0,72(sp)
    8000d8a0:	e02a                	sd	a0,0(sp)
    8000d8a2:	f0aa                	sd	a0,96(sp)
    8000d8a4:	f4aa                	sd	a0,104(sp)
    8000d8a6:	f8aa                	sd	a0,112(sp)
            if task.state == ProcState::SLEEPING && task.channel == channel {
    8000d8a8:	40850513          	addi	a0,a0,1032

000000008000d8ac <.LBB6_18>:
    8000d8ac:	0001b597          	auipc	a1,0x1b
    8000d8b0:	95458593          	addi	a1,a1,-1708 # 80028200 <.L__unnamed_13>
    8000d8b4:	00009097          	auipc	ra,0x9
    8000d8b8:	1c0080e7          	jalr	448(ra) # 80016a74 <_ZN76_$LT$kernel..process..process..ProcState$u20$as$u20$core..cmp..PartialEq$GT$2eq17hc7c8c767a75b25feE>
    8000d8bc:	e42a                	sd	a0,8(sp)
    8000d8be:	a02d                	j	8000d8e8 <.LBB6_18+0x3c>
    8000d8c0:	4505                	li	a0,1
    8000d8c2:	04a10b23          	sb	a0,86(sp)
    8000d8c6:	a821                	j	8000d8de <.LBB6_18+0x32>
    8000d8c8:	4501                	li	a0,0
    8000d8ca:	04a10b23          	sb	a0,86(sp)
    8000d8ce:	a801                	j	8000d8de <.LBB6_18+0x32>
    8000d8d0:	7582                	ld	a1,32(sp)
    8000d8d2:	6502                	ld	a0,0(sp)
    8000d8d4:	3e053503          	ld	a0,992(a0)
    8000d8d8:	feb504e3          	beq	a0,a1,8000d8c0 <.LBB6_18+0x14>
    8000d8dc:	b7f5                	j	8000d8c8 <.LBB6_18+0x1c>
    8000d8de:	05614503          	lbu	a0,86(sp)
    8000d8e2:	8905                	andi	a0,a0,1
    8000d8e4:	e509                	bnez	a0,8000d8ee <.LBB6_18+0x42>
    8000d8e6:	a819                	j	8000d8fc <.LBB6_18+0x50>
    8000d8e8:	6522                	ld	a0,8(sp)
    8000d8ea:	f17d                	bnez	a0,8000d8d0 <.LBB6_18+0x24>
    8000d8ec:	bff1                	j	8000d8c8 <.LBB6_18+0x1c>
    8000d8ee:	6582                	ld	a1,0(sp)
    8000d8f0:	450d                	li	a0,3
                task.state = ProcState::RUNNABLE;
    8000d8f2:	04a10ba3          	sb	a0,87(sp)
    8000d8f6:	40a58423          	sb	a0,1032(a1)
            if task.state == ProcState::SLEEPING && task.channel == channel {
    8000d8fa:	a011                	j	8000d8fe <.LBB6_18+0x52>
    8000d8fc:	a009                	j	8000d8fe <.LBB6_18+0x52>
        for task in unsafe { PROC_MANAGER.tasks.iter_mut() }{
    8000d8fe:	bfad                	j	8000d878 <.LBB6_17+0x36>

Disassembly of section .text._ZN6kernel7process7manager11ProcManager7wake_up17ha46b4d15ac07187bE:

000000008000d900 <_ZN6kernel7process7manager11ProcManager7wake_up17ha46b4d15ac07187bE>:

    /// Wake up all processes sleeping on chan.
    /// Must be called without any p->lock.

    pub fn wake_up(&mut self, channel: usize) {
    8000d900:	7179                	addi	sp,sp,-48
    8000d902:	f406                	sd	ra,40(sp)
    8000d904:	e02e                	sd	a1,0(sp)
    8000d906:	e82a                	sd	a0,16(sp)
    8000d908:	ec2e                	sd	a1,24(sp)
    8000d90a:	65c1                	lui	a1,0x10
    8000d90c:	4085859b          	addiw	a1,a1,1032
        let guard = self.tasks_lock.acquire();
    8000d910:	952e                	add	a0,a0,a1
    8000d912:	00003097          	auipc	ra,0x3
    8000d916:	efc080e7          	jalr	-260(ra) # 8001080e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    8000d91a:	85aa                	mv	a1,a0
    8000d91c:	e42e                	sd	a1,8(sp)
    8000d91e:	f02a                	sd	a0,32(sp)
    8000d920:	a009                	j	8000d922 <_ZN6kernel7process7manager11ProcManager7wake_up17ha46b4d15ac07187bE+0x22>
        ProcManager::wakeup1(channel);
    8000d922:	6502                	ld	a0,0(sp)
    8000d924:	00000097          	auipc	ra,0x0
    8000d928:	f16080e7          	jalr	-234(ra) # 8000d83a <_ZN6kernel7process7manager11ProcManager7wakeup117hddcdae2e398d5cf3E>
    8000d92c:	a009                	j	8000d92e <_ZN6kernel7process7manager11ProcManager7wake_up17ha46b4d15ac07187bE+0x2e>
        drop(guard);
    8000d92e:	6522                	ld	a0,8(sp)
    8000d930:	0000f097          	auipc	ra,0xf
    8000d934:	6f0080e7          	jalr	1776(ra) # 8001d020 <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    8000d938:	a009                	j	8000d93a <_ZN6kernel7process7manager11ProcManager7wake_up17ha46b4d15ac07187bE+0x3a>
    }
    8000d93a:	70a2                	ld	ra,40(sp)
    8000d93c:	6145                	addi	sp,sp,48
    8000d93e:	8082                	ret

Disassembly of section .text._ZN6kernel7process7manager11ProcManager13seek_runnable17h4972a46c3e17c2c4E:

000000008000d940 <_ZN6kernel7process7manager11ProcManager13seek_runnable17h4972a46c3e17c2c4E>:

    /// Find a runnable and set status to allocated
    /// should in lock
    pub fn seek_runnable(&mut self) -> Option<&mut task_struct> {
    8000d940:	7119                	addi	sp,sp,-128
    8000d942:	fc86                	sd	ra,120(sp)
    8000d944:	ecaa                	sd	a0,88(sp)
    8000d946:	04000593          	li	a1,64
        // let guard = self.tasks_lock.acquire();
        for task in self.tasks.iter_mut() {
    8000d94a:	00004097          	auipc	ra,0x4
    8000d94e:	0e4080e7          	jalr	228(ra) # 80011a2e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h5a59168d2366923eE>
    8000d952:	f42a                	sd	a0,40(sp)
    8000d954:	f82e                	sd	a1,48(sp)
    8000d956:	a009                	j	8000d958 <_ZN6kernel7process7manager11ProcManager13seek_runnable17h4972a46c3e17c2c4E+0x18>
    8000d958:	75c2                	ld	a1,48(sp)
    8000d95a:	7522                	ld	a0,40(sp)
    8000d95c:	ffffd097          	auipc	ra,0xffffd
    8000d960:	71e080e7          	jalr	1822(ra) # 8000b07a <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17ha1082b6c43007424E>
    8000d964:	ec2a                	sd	a0,24(sp)
    8000d966:	f02e                	sd	a1,32(sp)
    8000d968:	a009                	j	8000d96a <_ZN6kernel7process7manager11ProcManager13seek_runnable17h4972a46c3e17c2c4E+0x2a>
    8000d96a:	7502                	ld	a0,32(sp)
    8000d96c:	65e2                	ld	a1,24(sp)
    8000d96e:	e0ae                	sd	a1,64(sp)
    8000d970:	e4aa                	sd	a0,72(sp)
    8000d972:	a009                	j	8000d974 <_ZN6kernel7process7manager11ProcManager13seek_runnable17h4972a46c3e17c2c4E+0x34>
    8000d974:	0088                	addi	a0,sp,64
    8000d976:	ffffe097          	auipc	ra,0xffffe
    8000d97a:	93a080e7          	jalr	-1734(ra) # 8000b2b0 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17habdea9e62d8c6ddfE>
    8000d97e:	e8aa                	sd	a0,80(sp)
    8000d980:	a009                	j	8000d982 <_ZN6kernel7process7manager11ProcManager13seek_runnable17h4972a46c3e17c2c4E+0x42>
    8000d982:	6546                	ld	a0,80(sp)
    8000d984:	00a035b3          	snez	a1,a0
    8000d988:	4581                	li	a1,0
    8000d98a:	00b50463          	beq	a0,a1,8000d992 <_ZN6kernel7process7manager11ProcManager13seek_runnable17h4972a46c3e17c2c4E+0x52>
    8000d98e:	a009                	j	8000d990 <_ZN6kernel7process7manager11ProcManager13seek_runnable17h4972a46c3e17c2c4E+0x50>
    8000d990:	a029                	j	8000d99a <_ZN6kernel7process7manager11ProcManager13seek_runnable17h4972a46c3e17c2c4E+0x5a>
    8000d992:	4501                	li	a0,0
            // }
            if task.state == ProcState::RUNNABLE {
                return Some(task)
            }
        }
        None
    8000d994:	fc2a                	sd	a0,56(sp)
    }
    8000d996:	a825                	j	8000d9ce <.LBB8_13+0x26>
        for task in self.tasks.iter_mut() {
    8000d998:	0000                	unimp
    8000d99a:	6546                	ld	a0,80(sp)
    8000d99c:	e42a                	sd	a0,8(sp)
    8000d99e:	f0aa                	sd	a0,96(sp)
    8000d9a0:	f4aa                	sd	a0,104(sp)
    8000d9a2:	f8aa                	sd	a0,112(sp)
            if task.state == ProcState::RUNNABLE {
    8000d9a4:	40850513          	addi	a0,a0,1032

000000008000d9a8 <.LBB8_13>:
    8000d9a8:	0001b597          	auipc	a1,0x1b
    8000d9ac:	85958593          	addi	a1,a1,-1959 # 80028201 <.L__unnamed_14>
    8000d9b0:	00009097          	auipc	ra,0x9
    8000d9b4:	0c4080e7          	jalr	196(ra) # 80016a74 <_ZN76_$LT$kernel..process..process..ProcState$u20$as$u20$core..cmp..PartialEq$GT$2eq17hc7c8c767a75b25feE>
    8000d9b8:	e82a                	sd	a0,16(sp)
    8000d9ba:	a009                	j	8000d9bc <.LBB8_13+0x14>
    8000d9bc:	6542                	ld	a0,16(sp)
    8000d9be:	4581                	li	a1,0
    8000d9c0:	00b50663          	beq	a0,a1,8000d9cc <.LBB8_13+0x24>
    8000d9c4:	a009                	j	8000d9c6 <.LBB8_13+0x1e>
                return Some(task)
    8000d9c6:	6522                	ld	a0,8(sp)
    8000d9c8:	fc2a                	sd	a0,56(sp)
    }
    8000d9ca:	a011                	j	8000d9ce <.LBB8_13+0x26>
        for task in self.tasks.iter_mut() {
    8000d9cc:	b765                	j	8000d974 <_ZN6kernel7process7manager11ProcManager13seek_runnable17h4972a46c3e17c2c4E+0x34>
    }
    8000d9ce:	7562                	ld	a0,56(sp)
    8000d9d0:	70e6                	ld	ra,120(sp)
    8000d9d2:	6109                	addi	sp,sp,128
    8000d9d4:	8082                	ret

Disassembly of section .text._ZN6kernel7process7manager11ProcManager8reparent17hc41daea1f75613cfE:

000000008000d9d6 <_ZN6kernel7process7manager11ProcManager8reparent17hc41daea1f75613cfE>:

    /// Pass p's abandonded children to init. 
    /// Caller must hold wait lock.  tasks_lock
    pub fn reparent(proc: &mut task_struct) {
    8000d9d6:	7175                	addi	sp,sp,-144
    8000d9d8:	e506                	sd	ra,136(sp)
    8000d9da:	f02a                	sd	a0,32(sp)
    8000d9dc:	f0aa                	sd	a0,96(sp)

000000008000d9de <.LBB9_15>:
        //                 pdata.parent = Some(self.init_proc);
        //                 self.wake_up(self.init_proc as usize);
        //             }
        //         }
        // }
        for task in unsafe { PROC_MANAGER.tasks.iter_mut() } {
    8000d9de:	0004a517          	auipc	a0,0x4a
    8000d9e2:	bc250513          	addi	a0,a0,-1086 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    8000d9e6:	04000593          	li	a1,64
    8000d9ea:	00004097          	auipc	ra,0x4
    8000d9ee:	044080e7          	jalr	68(ra) # 80011a2e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h5a59168d2366923eE>
    8000d9f2:	f42a                	sd	a0,40(sp)
    8000d9f4:	f82e                	sd	a1,48(sp)
    8000d9f6:	a009                	j	8000d9f8 <.LBB9_15+0x1a>
    8000d9f8:	75c2                	ld	a1,48(sp)
    8000d9fa:	7522                	ld	a0,40(sp)
    8000d9fc:	ffffd097          	auipc	ra,0xffffd
    8000da00:	67e080e7          	jalr	1662(ra) # 8000b07a <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17ha1082b6c43007424E>
    8000da04:	e82a                	sd	a0,16(sp)
    8000da06:	ec2e                	sd	a1,24(sp)
    8000da08:	a009                	j	8000da0a <.LBB9_15+0x2c>
    8000da0a:	6562                	ld	a0,24(sp)
    8000da0c:	65c2                	ld	a1,16(sp)
    8000da0e:	fc2e                	sd	a1,56(sp)
    8000da10:	e0aa                	sd	a0,64(sp)
    8000da12:	a009                	j	8000da14 <.LBB9_15+0x36>
    8000da14:	1828                	addi	a0,sp,56
    8000da16:	ffffe097          	auipc	ra,0xffffe
    8000da1a:	89a080e7          	jalr	-1894(ra) # 8000b2b0 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17habdea9e62d8c6ddfE>
    8000da1e:	e4aa                	sd	a0,72(sp)
    8000da20:	a009                	j	8000da22 <.LBB9_15+0x44>
    8000da22:	6526                	ld	a0,72(sp)
    8000da24:	00a035b3          	snez	a1,a0
    8000da28:	4581                	li	a1,0
    8000da2a:	00b50463          	beq	a0,a1,8000da32 <.LBB9_15+0x54>
    8000da2e:	a009                	j	8000da30 <.LBB9_15+0x52>
    8000da30:	a029                	j	8000da3a <.LBB9_15+0x5c>
                    // if task.state == ProcState::ZOMBIE     !!!!!!!!TODO
                    ProcManager::wakeup1(unsafe { PROC_MANAGER.init_proc as usize });
                } 
            }
        }
    }
    8000da32:	60aa                	ld	ra,136(sp)
    8000da34:	6149                	addi	sp,sp,144
    8000da36:	8082                	ret
        for task in unsafe { PROC_MANAGER.tasks.iter_mut() } {
    8000da38:	0000                	unimp
    8000da3a:	6526                	ld	a0,72(sp)
    8000da3c:	e42a                	sd	a0,8(sp)
    8000da3e:	f4aa                	sd	a0,104(sp)
    8000da40:	f8aa                	sd	a0,112(sp)
    8000da42:	fcaa                	sd	a0,120(sp)
            if let Some(parent) = task.parent {
    8000da44:	6d48                	ld	a0,152(a0)
    8000da46:	4581                	li	a1,0
    8000da48:	00b51463          	bne	a0,a1,8000da50 <.LBB9_15+0x72>
    8000da4c:	a009                	j	8000da4e <.LBB9_15+0x70>
    8000da4e:	a83d                	j	8000da8c <.LBB9_16+0x26>
    8000da50:	7582                	ld	a1,32(sp)
    8000da52:	6522                	ld	a0,8(sp)
    8000da54:	7148                	ld	a0,160(a0)
    8000da56:	e12a                	sd	a0,128(sp)
                if parent as *const _ == proc as *const _ {
    8000da58:	02b51863          	bne	a0,a1,8000da88 <.LBB9_16+0x22>
    8000da5c:	a009                	j	8000da5e <.LBB9_15+0x80>
    8000da5e:	6622                	ld	a2,8(sp)
    8000da60:	6541                	lui	a0,0x10
    8000da62:	4005059b          	addiw	a1,a0,1024

000000008000da66 <.LBB9_16>:
    8000da66:	0004a517          	auipc	a0,0x4a
    8000da6a:	b3a50513          	addi	a0,a0,-1222 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    8000da6e:	952e                	add	a0,a0,a1
                    task.parent = unsafe { Some(PROC_MANAGER.init_proc) };
    8000da70:	610c                	ld	a1,0(a0)
    8000da72:	ecae                	sd	a1,88(sp)
    8000da74:	4685                	li	a3,1
    8000da76:	e8b6                	sd	a3,80(sp)
    8000da78:	ee54                	sd	a3,152(a2)
    8000da7a:	f24c                	sd	a1,160(a2)
                    ProcManager::wakeup1(unsafe { PROC_MANAGER.init_proc as usize });
    8000da7c:	6108                	ld	a0,0(a0)
    8000da7e:	00000097          	auipc	ra,0x0
    8000da82:	dbc080e7          	jalr	-580(ra) # 8000d83a <_ZN6kernel7process7manager11ProcManager7wakeup117hddcdae2e398d5cf3E>
    8000da86:	a011                	j	8000da8a <.LBB9_16+0x24>
                if parent as *const _ == proc as *const _ {
    8000da88:	a011                	j	8000da8c <.LBB9_16+0x26>
    8000da8a:	a009                	j	8000da8c <.LBB9_16+0x26>
        for task in unsafe { PROC_MANAGER.tasks.iter_mut() } {
    8000da8c:	b761                	j	8000da14 <.LBB9_15+0x36>

Disassembly of section .text._ZN6kernel7process7manager11ProcManager4exit17hfa49a8445fc58f81E:

000000008000da8e <_ZN6kernel7process7manager11ProcManager4exit17hfa49a8445fc58f81E>:
    
    /// Exit the current process. Does not return. 
    /// An exited process remains in the zombie state 
    /// until its parent calls wait. 
    pub fn exit(&mut self, status : usize) -> ! {
    8000da8e:	712d                	addi	sp,sp,-288
    8000da90:	ee06                	sd	ra,280(sp)
    8000da92:	ecae                	sd	a1,88(sp)
    8000da94:	f0aa                	sd	a0,96(sp)
    8000da96:	e5aa                	sd	a0,200(sp)
    8000da98:	e9ae                	sd	a1,208(sp)

000000008000da9a <.LBB10_33>:
        let curtask = unsafe {
            CPU_MANAGER.myproc().expect("Current cpu's process is none.")
    8000da9a:	00065517          	auipc	a0,0x65
    8000da9e:	6a650513          	addi	a0,a0,1702 # 80073140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    8000daa2:	00004097          	auipc	ra,0x4
    8000daa6:	35c080e7          	jalr	860(ra) # 80011dfe <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    8000daaa:	f4aa                	sd	a0,104(sp)
    8000daac:	a009                	j	8000daae <.LBB10_33+0x14>
    8000daae:	7526                	ld	a0,104(sp)

000000008000dab0 <.LBB10_34>:
    8000dab0:	0001a597          	auipc	a1,0x1a
    8000dab4:	75258593          	addi	a1,a1,1874 # 80028202 <.L__unnamed_15>

000000008000dab8 <.LBB10_35>:
    8000dab8:	0001a697          	auipc	a3,0x1a
    8000dabc:	76868693          	addi	a3,a3,1896 # 80028220 <.L__unnamed_16>
    8000dac0:	4679                	li	a2,30
    8000dac2:	00001097          	auipc	ra,0x1
    8000dac6:	09e080e7          	jalr	158(ra) # 8000eb60 <_ZN4core6option15Option$LT$T$GT$6expect17h5cc0070b74d715b8E>
    8000daca:	e8aa                	sd	a0,80(sp)
    8000dacc:	a009                	j	8000dace <.LBB10_35+0x16>
    8000dace:	6546                	ld	a0,80(sp)
    8000dad0:	edaa                	sd	a0,216(sp)
        };
        // close all open files. 
        
        let open_files = &mut curtask.open_files;
    8000dad2:	0a850513          	addi	a0,a0,168
    8000dad6:	e0aa                	sd	a0,64(sp)
    8000dad8:	f1aa                	sd	a0,224(sp)
    8000dada:	06400593          	li	a1,100
        // 遍历该进程打开的文件，夺取所有权，即将引用计数减一
        for index in 0..open_files.len() {
    8000dade:	00001097          	auipc	ra,0x1
    8000dae2:	9b0080e7          	jalr	-1616(ra) # 8000e48e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h659c29622d59b861E>
    8000dae6:	e4aa                	sd	a0,72(sp)
    8000dae8:	a009                	j	8000daea <.LBB10_35+0x32>
    8000daea:	65a6                	ld	a1,72(sp)
    8000daec:	4501                	li	a0,0
    8000daee:	f8aa                	sd	a0,112(sp)
    8000daf0:	fcae                	sd	a1,120(sp)
    8000daf2:	00012097          	auipc	ra,0x12
    8000daf6:	e50080e7          	jalr	-432(ra) # 8001f942 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he0a8d93712e5493bE>
    8000dafa:	f82a                	sd	a0,48(sp)
    8000dafc:	fc2e                	sd	a1,56(sp)
    8000dafe:	a009                	j	8000db00 <.LBB10_35+0x48>
    8000db00:	7562                	ld	a0,56(sp)
    8000db02:	75c2                	ld	a1,48(sp)
    8000db04:	e12e                	sd	a1,128(sp)
    8000db06:	e52a                	sd	a0,136(sp)
    8000db08:	a009                	j	8000db0a <.LBB10_35+0x52>
    8000db0a:	0108                	addi	a0,sp,128
    8000db0c:	00012097          	auipc	ra,0x12
    8000db10:	dc8080e7          	jalr	-568(ra) # 8001f8d4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE>
    8000db14:	e92a                	sd	a0,144(sp)
    8000db16:	ed2e                	sd	a1,152(sp)
    8000db18:	a009                	j	8000db1a <.LBB10_35+0x62>
    8000db1a:	654a                	ld	a0,144(sp)
    8000db1c:	4581                	li	a1,0
    8000db1e:	00b50463          	beq	a0,a1,8000db26 <.LBB10_36>
    8000db22:	a009                	j	8000db24 <.LBB10_35+0x6c>
    8000db24:	a819                	j	8000db3a <.LBB10_36+0x14>

000000008000db26 <.LBB10_36>:
            if open_files[index].is_some() {
                open_files[index].take();
            }
        }

        LOG.begin_op();
    8000db26:	0005a517          	auipc	a0,0x5a
    8000db2a:	ec250513          	addi	a0,a0,-318 # 800679e8 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    8000db2e:	ffffb097          	auipc	ra,0xffffb
    8000db32:	084080e7          	jalr	132(ra) # 80008bb2 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$8begin_op17he5b49a48c716e372E>
    8000db36:	a0a5                	j	8000db9e <.LBB10_36+0x78>
        for index in 0..open_files.len() {
    8000db38:	0000                	unimp
    8000db3a:	65ea                	ld	a1,152(sp)
    8000db3c:	f42e                	sd	a1,40(sp)
    8000db3e:	f5ae                	sd	a1,232(sp)
    8000db40:	f9ae                	sd	a1,240(sp)
    8000db42:	fdae                	sd	a1,248(sp)
    8000db44:	06300513          	li	a0,99
            if open_files[index].is_some() {
    8000db48:	16b56a63          	bltu	a0,a1,8000dcbc <.LBB10_44+0x3e>
    8000db4c:	a009                	j	8000db4e <.LBB10_36+0x28>
    8000db4e:	6506                	ld	a0,64(sp)
    8000db50:	75a2                	ld	a1,40(sp)
    8000db52:	058e                	slli	a1,a1,0x3
    8000db54:	952e                	add	a0,a0,a1
    8000db56:	00001097          	auipc	ra,0x1
    8000db5a:	4a4080e7          	jalr	1188(ra) # 8000effa <_ZN4core6option15Option$LT$T$GT$7is_some17hd48c331b6466f73fE>
    8000db5e:	f02a                	sd	a0,32(sp)
    8000db60:	a009                	j	8000db62 <.LBB10_36+0x3c>
    8000db62:	7502                	ld	a0,32(sp)
    8000db64:	4581                	li	a1,0
    8000db66:	00b50963          	beq	a0,a1,8000db78 <.LBB10_36+0x52>
    8000db6a:	a009                	j	8000db6c <.LBB10_36+0x46>
    8000db6c:	7522                	ld	a0,40(sp)
    8000db6e:	06400593          	li	a1,100
                open_files[index].take();
    8000db72:	00b56463          	bltu	a0,a1,8000db7a <.LBB10_36+0x54>
    8000db76:	aab9                	j	8000dcd4 <.LBB10_45+0x16>
            if open_files[index].is_some() {
    8000db78:	a015                	j	8000db9c <.LBB10_36+0x76>
                open_files[index].take();
    8000db7a:	6506                	ld	a0,64(sp)
    8000db7c:	75a2                	ld	a1,40(sp)
    8000db7e:	058e                	slli	a1,a1,0x3
    8000db80:	952e                	add	a0,a0,a1
    8000db82:	00001097          	auipc	ra,0x1
    8000db86:	b50080e7          	jalr	-1200(ra) # 8000e6d2 <_ZN4core6option15Option$LT$T$GT$4take17h80e6997975665939E>
    8000db8a:	f12a                	sd	a0,160(sp)
    8000db8c:	a009                	j	8000db8e <.LBB10_36+0x68>
    8000db8e:	1108                	addi	a0,sp,160
    8000db90:	ffff9097          	auipc	ra,0xffff9
    8000db94:	4b8080e7          	jalr	1208(ra) # 80007048 <_ZN4core3ptr96drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$$GT$17hc79d9c89cd1d7f36E>
    8000db98:	a009                	j	8000db9a <.LBB10_36+0x74>
            if open_files[index].is_some() {
    8000db9a:	a009                	j	8000db9c <.LBB10_36+0x76>
        for index in 0..open_files.len() {
    8000db9c:	b7bd                	j	8000db0a <.LBB10_35+0x52>
        let cwd = curtask.cwd.as_mut().expect("Fail to get inode");
    8000db9e:	6546                	ld	a0,80(sp)
    8000dba0:	3c850513          	addi	a0,a0,968
    8000dba4:	00001097          	auipc	ra,0x1
    8000dba8:	e72080e7          	jalr	-398(ra) # 8000ea16 <_ZN4core6option15Option$LT$T$GT$6as_mut17he7f8c9f3d27cdb5eE>
    8000dbac:	ec2a                	sd	a0,24(sp)
    8000dbae:	a009                	j	8000dbb0 <.LBB10_36+0x8a>
    8000dbb0:	6562                	ld	a0,24(sp)

000000008000dbb2 <.LBB10_37>:
    8000dbb2:	0001a597          	auipc	a1,0x1a
    8000dbb6:	6b658593          	addi	a1,a1,1718 # 80028268 <.L__unnamed_17>

000000008000dbba <.LBB10_38>:
    8000dbba:	0001a697          	auipc	a3,0x1a
    8000dbbe:	6c668693          	addi	a3,a3,1734 # 80028280 <.L__unnamed_18>
    8000dbc2:	4645                	li	a2,17
    8000dbc4:	00001097          	auipc	ra,0x1
    8000dbc8:	f66080e7          	jalr	-154(ra) # 8000eb2a <_ZN4core6option15Option$LT$T$GT$6expect17h3c07e85986db6eddE>
    8000dbcc:	85aa                	mv	a1,a0
    8000dbce:	e82e                	sd	a1,16(sp)
    8000dbd0:	e22a                	sd	a0,256(sp)
    8000dbd2:	a009                	j	8000dbd4 <.LBB10_38+0x1a>
        drop(cwd);
    8000dbd4:	6542                	ld	a0,16(sp)
    8000dbd6:	0000f097          	auipc	ra,0xf
    8000dbda:	598080e7          	jalr	1432(ra) # 8001d16e <_ZN4core3mem4drop17he1c2696149894a05E>
    8000dbde:	a009                	j	8000dbe0 <.LBB10_39>

000000008000dbe0 <.LBB10_39>:
        LOG.end_op();
    8000dbe0:	0005a517          	auipc	a0,0x5a
    8000dbe4:	e0850513          	addi	a0,a0,-504 # 800679e8 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    8000dbe8:	ffffb097          	auipc	ra,0xffffb
    8000dbec:	5b0080e7          	jalr	1456(ra) # 80009198 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>
    8000dbf0:	a009                	j	8000dbf2 <.LBB10_39+0x12>
    8000dbf2:	6546                	ld	a0,80(sp)
    8000dbf4:	4581                	li	a1,0


        curtask.cwd = None;
    8000dbf6:	f52e                	sd	a1,168(sp)
    8000dbf8:	3c850513          	addi	a0,a0,968
    8000dbfc:	ffff9097          	auipc	ra,0xffff9
    8000dc00:	350080e7          	jalr	848(ra) # 80006f4c <_ZN4core3ptr73drop_in_place$LT$core..option..Option$LT$kernel..fs..inode..Inode$GT$$GT$17h6a7b3b84406d6cdfE>
    8000dc04:	a079                	j	8000dc92 <.LBB10_44+0x14>


        let guard = self.tasks_lock.acquire();
        // Parent might be sleeping in wait. 
        // 唤醒父进程
        ProcManager::wakeup1(curtask.parent.expect("Fail to find parent process") as usize);
    8000dc06:	65c6                	ld	a1,80(sp)
    8000dc08:	6dc8                	ld	a0,152(a1)
    8000dc0a:	71cc                	ld	a1,160(a1)

000000008000dc0c <.LBB10_40>:
    8000dc0c:	0001a617          	auipc	a2,0x1a
    8000dc10:	68c60613          	addi	a2,a2,1676 # 80028298 <.L__unnamed_19>

000000008000dc14 <.LBB10_41>:
    8000dc14:	0001a717          	auipc	a4,0x1a
    8000dc18:	6a470713          	addi	a4,a4,1700 # 800282b8 <.L__unnamed_20>
    8000dc1c:	46ed                	li	a3,27
    8000dc1e:	00001097          	auipc	ra,0x1
    8000dc22:	ea4080e7          	jalr	-348(ra) # 8000eac2 <_ZN4core6option15Option$LT$T$GT$6expect17h038f65ec579fa12bE>
    8000dc26:	e42a                	sd	a0,8(sp)
    8000dc28:	a009                	j	8000dc2a <.LBB10_41+0x16>
    8000dc2a:	6522                	ld	a0,8(sp)
    8000dc2c:	00000097          	auipc	ra,0x0
    8000dc30:	c0e080e7          	jalr	-1010(ra) # 8000d83a <_ZN6kernel7process7manager11ProcManager7wakeup117hddcdae2e398d5cf3E>
    8000dc34:	a009                	j	8000dc36 <.LBB10_41+0x22>

        // Give any children to init. 
        ProcManager::reparent(curtask);
    8000dc36:	6546                	ld	a0,80(sp)
    8000dc38:	00000097          	auipc	ra,0x0
    8000dc3c:	d9e080e7          	jalr	-610(ra) # 8000d9d6 <_ZN6kernel7process7manager11ProcManager8reparent17hc41daea1f75613cfE>
    8000dc40:	a009                	j	8000dc42 <.LBB10_41+0x2e>
        // 设置退出状态
        curtask.xstate = status;
    8000dc42:	65c6                	ld	a1,80(sp)
    8000dc44:	6566                	ld	a0,88(sp)
    8000dc46:	3ea5b423          	sd	a0,1000(a1)
    8000dc4a:	4515                	li	a0,5
        // 设置运行状态
        curtask.state = ProcState::ZOMBIE;
    8000dc4c:	0ca103a3          	sb	a0,199(sp)
    8000dc50:	40a58423          	sb	a0,1032(a1)

000000008000dc54 <.LBB10_42>:

        let my_cpu = unsafe {
            CPU_MANAGER.mycpu()
    8000dc54:	00065517          	auipc	a0,0x65
    8000dc58:	4ec50513          	addi	a0,a0,1260 # 80073140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    8000dc5c:	00004097          	auipc	ra,0x4
    8000dc60:	156080e7          	jalr	342(ra) # 80011db2 <_ZN6kernel7process3cpu10CPUManager5mycpu17hac5ae6ce2070e7c3E>
    8000dc64:	e02a                	sd	a0,0(sp)
    8000dc66:	a009                	j	8000dc68 <.LBB10_42+0x14>
    8000dc68:	6502                	ld	a0,0(sp)
    8000dc6a:	ea2a                	sd	a0,272(sp)
        };
        unsafe {
            my_cpu.sched();
    8000dc6c:	00004097          	auipc	ra,0x4
    8000dc70:	3b8080e7          	jalr	952(ra) # 80012024 <_ZN6kernel7process3cpu3CPU5sched17h6aec64bf33990cbcE>
    8000dc74:	a009                	j	8000dc76 <.LBB10_43>

000000008000dc76 <.LBB10_43>:
        }

        panic!("zombie exit!");
    8000dc76:	0001a517          	auipc	a0,0x1a
    8000dc7a:	65a50513          	addi	a0,a0,1626 # 800282d0 <.L__unnamed_21>

000000008000dc7e <.LBB10_44>:
    8000dc7e:	0001a617          	auipc	a2,0x1a
    8000dc82:	66260613          	addi	a2,a2,1634 # 800282e0 <.L__unnamed_22>
    8000dc86:	45b1                	li	a1,12
    8000dc88:	00014097          	auipc	ra,0x14
    8000dc8c:	5ee080e7          	jalr	1518(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8000dc90:	0000                	unimp
        curtask.cwd = None;
    8000dc92:	7506                	ld	a0,96(sp)
    8000dc94:	6646                	ld	a2,80(sp)
    8000dc96:	75ea                	ld	a1,184(sp)
    8000dc98:	3cb63c23          	sd	a1,984(a2)
    8000dc9c:	75ca                	ld	a1,176(sp)
    8000dc9e:	3cb63823          	sd	a1,976(a2)
    8000dca2:	75aa                	ld	a1,168(sp)
    8000dca4:	3cb63423          	sd	a1,968(a2)
    8000dca8:	65c1                	lui	a1,0x10
    8000dcaa:	4085859b          	addiw	a1,a1,1032
        let guard = self.tasks_lock.acquire();
    8000dcae:	952e                	add	a0,a0,a1
    8000dcb0:	00003097          	auipc	ra,0x3
    8000dcb4:	b5e080e7          	jalr	-1186(ra) # 8001080e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    8000dcb8:	e62a                	sd	a0,264(sp)
    8000dcba:	b7b1                	j	8000dc06 <.LBB10_39+0x26>
            if open_files[index].is_some() {
    8000dcbc:	7522                	ld	a0,40(sp)

000000008000dcbe <.LBB10_45>:
    8000dcbe:	0001a617          	auipc	a2,0x1a
    8000dcc2:	57a60613          	addi	a2,a2,1402 # 80028238 <.L__unnamed_23>
    8000dcc6:	06400593          	li	a1,100
    8000dcca:	00014097          	auipc	ra,0x14
    8000dcce:	5d8080e7          	jalr	1496(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    8000dcd2:	0000                	unimp
                open_files[index].take();
    8000dcd4:	7522                	ld	a0,40(sp)

000000008000dcd6 <.LBB10_46>:
    8000dcd6:	0001a617          	auipc	a2,0x1a
    8000dcda:	57a60613          	addi	a2,a2,1402 # 80028250 <.L__unnamed_24>
    8000dcde:	06400593          	li	a1,100
    8000dce2:	00014097          	auipc	ra,0x14
    8000dce6:	5c0080e7          	jalr	1472(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel7process7manager11ProcManager4wait17h7c4c80095cf78f04E:

000000008000dcec <_ZN6kernel7process7manager11ProcManager4wait17h7c4c80095cf78f04E>:
    }

    /// Wait for a child process to exit and return its pid. 
    /// 等待子进程退出并返回 pid
    pub fn wait(&mut self, addr: usize) -> Option<usize> {
    8000dcec:	710d                	addi	sp,sp,-352
    8000dcee:	ee86                	sd	ra,344(sp)
    8000dcf0:	fcae                	sd	a1,120(sp)
    8000dcf2:	e12a                	sd	a0,128(sp)
    8000dcf4:	e22a                	sd	a0,256(sp)
    8000dcf6:	e62e                	sd	a1,264(sp)

000000008000dcf8 <.LBB11_47>:
        let pid;
        let curtask = unsafe {
            CPU_MANAGER.myproc().expect("Fail to get my process")
    8000dcf8:	00065517          	auipc	a0,0x65
    8000dcfc:	44850513          	addi	a0,a0,1096 # 80073140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    8000dd00:	00004097          	auipc	ra,0x4
    8000dd04:	0fe080e7          	jalr	254(ra) # 80011dfe <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    8000dd08:	e52a                	sd	a0,136(sp)
    8000dd0a:	a009                	j	8000dd0c <.LBB11_47+0x14>
    8000dd0c:	652a                	ld	a0,136(sp)

000000008000dd0e <.LBB11_48>:
    8000dd0e:	0001a597          	auipc	a1,0x1a
    8000dd12:	5ea58593          	addi	a1,a1,1514 # 800282f8 <.L__unnamed_25>

000000008000dd16 <.LBB11_49>:
    8000dd16:	0001a697          	auipc	a3,0x1a
    8000dd1a:	5fa68693          	addi	a3,a3,1530 # 80028310 <.L__unnamed_26>
    8000dd1e:	4659                	li	a2,22
    8000dd20:	00001097          	auipc	ra,0x1
    8000dd24:	e40080e7          	jalr	-448(ra) # 8000eb60 <_ZN4core6option15Option$LT$T$GT$6expect17h5cc0070b74d715b8E>
    8000dd28:	f8aa                	sd	a0,112(sp)
    8000dd2a:	a009                	j	8000dd2c <.LBB11_49+0x16>
    8000dd2c:	7546                	ld	a0,112(sp)
    8000dd2e:	ea2a                	sd	a0,272(sp)
        };
        
        // let wait_guard = self.wait_lock.acquire();
        
        loop {
    8000dd30:	a009                	j	8000dd32 <.LBB11_49+0x1c>
    8000dd32:	650a                	ld	a0,128(sp)
    8000dd34:	65c1                	lui	a1,0x10
    8000dd36:	4085859b          	addiw	a1,a1,1032
            let tasks_guard = self.tasks_lock.acquire();
    8000dd3a:	952e                	add	a0,a0,a1
    8000dd3c:	00003097          	auipc	ra,0x3
    8000dd40:	ad2080e7          	jalr	-1326(ra) # 8001080e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    8000dd44:	85aa                	mv	a1,a0
    8000dd46:	f4ae                	sd	a1,104(sp)
    8000dd48:	ee2a                	sd	a0,280(sp)
    8000dd4a:	a009                	j	8000dd4c <.LBB11_49+0x36>
    8000dd4c:	650a                	ld	a0,128(sp)
    8000dd4e:	4581                	li	a1,0
            

            let mut have_kids = false;
    8000dd50:	0ab103a3          	sb	a1,167(sp)
    8000dd54:	04000593          	li	a1,64
            // Scan through table looking for exited children. 
            // 遍历所有进程是否为其他进程的子进程
            for index in 0..self.tasks.len() {
    8000dd58:	00004097          	auipc	ra,0x4
    8000dd5c:	c98080e7          	jalr	-872(ra) # 800119f0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf08bc165152fefe5E>
    8000dd60:	f0aa                	sd	a0,96(sp)
    8000dd62:	a009                	j	8000dd64 <.LBB11_49+0x4e>
    8000dd64:	7586                	ld	a1,96(sp)
    8000dd66:	4501                	li	a0,0
    8000dd68:	f52a                	sd	a0,168(sp)
    8000dd6a:	f92e                	sd	a1,176(sp)
    8000dd6c:	00012097          	auipc	ra,0x12
    8000dd70:	bd6080e7          	jalr	-1066(ra) # 8001f942 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he0a8d93712e5493bE>
    8000dd74:	e8aa                	sd	a0,80(sp)
    8000dd76:	ecae                	sd	a1,88(sp)
    8000dd78:	a009                	j	8000dd7a <.LBB11_49+0x64>
    8000dd7a:	6566                	ld	a0,88(sp)
    8000dd7c:	65c6                	ld	a1,80(sp)
    8000dd7e:	fd2e                	sd	a1,184(sp)
    8000dd80:	e1aa                	sd	a0,192(sp)
    8000dd82:	a009                	j	8000dd84 <.LBB11_49+0x6e>
    8000dd84:	1928                	addi	a0,sp,184
    8000dd86:	00012097          	auipc	ra,0x12
    8000dd8a:	b4e080e7          	jalr	-1202(ra) # 8001f8d4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE>
    8000dd8e:	e5aa                	sd	a0,200(sp)
    8000dd90:	e9ae                	sd	a1,208(sp)
    8000dd92:	a009                	j	8000dd94 <.LBB11_49+0x7e>
    8000dd94:	652e                	ld	a0,200(sp)
    8000dd96:	4581                	li	a1,0
    8000dd98:	00b50463          	beq	a0,a1,8000dda0 <.LBB11_49+0x8a>
    8000dd9c:	a009                	j	8000dd9e <.LBB11_49+0x88>
    8000dd9e:	a809                	j	8000ddb0 <.LBB11_49+0x9a>
                    }
                }
            }
            
            // No point waiting if we don't have any children. 
            if !have_kids || curtask.killed {
    8000dda0:	0a714503          	lbu	a0,167(sp)
    8000dda4:	8905                	andi	a0,a0,1
    8000dda6:	4581                	li	a1,0
    8000dda8:	12b50163          	beq	a0,a1,8000deca <.LBB11_50+0xce>
    8000ddac:	a23d                	j	8000deda <.LBB11_50+0xde>
            for index in 0..self.tasks.len() {
    8000ddae:	0000                	unimp
    8000ddb0:	65ce                	ld	a1,208(sp)
    8000ddb2:	e4ae                	sd	a1,72(sp)
    8000ddb4:	f22e                	sd	a1,288(sp)
    8000ddb6:	f62e                	sd	a1,296(sp)
    8000ddb8:	fa2e                	sd	a1,304(sp)
    8000ddba:	03f00513          	li	a0,63
                let task = &mut self.tasks[index];
    8000ddbe:	1ab56863          	bltu	a0,a1,8000df6e <.LBB11_51+0x56>
    8000ddc2:	a009                	j	8000ddc4 <.LBB11_49+0xae>
    8000ddc4:	650a                	ld	a0,128(sp)
    8000ddc6:	65a6                	ld	a1,72(sp)
    8000ddc8:	41000613          	li	a2,1040
    8000ddcc:	02c585b3          	mul	a1,a1,a2
    8000ddd0:	952e                	add	a0,a0,a1
    8000ddd2:	e0aa                	sd	a0,64(sp)
    8000ddd4:	fe2a                	sd	a0,312(sp)
                if let Some(parent) = task.parent {
    8000ddd6:	6d48                	ld	a0,152(a0)
    8000ddd8:	4581                	li	a1,0
    8000ddda:	00b51463          	bne	a0,a1,8000dde2 <.LBB11_49+0xcc>
    8000ddde:	a009                	j	8000dde0 <.LBB11_49+0xca>
    8000dde0:	a0e5                	j	8000dec8 <.LBB11_50+0xcc>
    8000dde2:	75c6                	ld	a1,112(sp)
    8000dde4:	6506                	ld	a0,64(sp)
    8000dde6:	7148                	ld	a0,160(a0)
    8000dde8:	e2aa                	sd	a0,320(sp)
                    if parent as *const _ == curtask as *const _ {
    8000ddea:	02b51363          	bne	a0,a1,8000de10 <.LBB11_50+0x14>
    8000ddee:	a009                	j	8000ddf0 <.LBB11_49+0xda>
    8000ddf0:	6506                	ld	a0,64(sp)
    8000ddf2:	4585                	li	a1,1
                        have_kids = true;
    8000ddf4:	0ab103a3          	sb	a1,167(sp)
                        if task.state == ProcState::ZOMBIE {
    8000ddf8:	40850513          	addi	a0,a0,1032

000000008000ddfc <.LBB11_50>:
    8000ddfc:	0001a597          	auipc	a1,0x1a
    8000de00:	54458593          	addi	a1,a1,1348 # 80028340 <.L__unnamed_27>
    8000de04:	00009097          	auipc	ra,0x9
    8000de08:	c70080e7          	jalr	-912(ra) # 80016a74 <_ZN76_$LT$kernel..process..process..ProcState$u20$as$u20$core..cmp..PartialEq$GT$2eq17hc7c8c767a75b25feE>
    8000de0c:	fc2a                	sd	a0,56(sp)
    8000de0e:	a011                	j	8000de12 <.LBB11_50+0x16>
                    if parent as *const _ == curtask as *const _ {
    8000de10:	a865                	j	8000dec8 <.LBB11_50+0xcc>
    8000de12:	7562                	ld	a0,56(sp)
    8000de14:	4581                	li	a1,0
                        if task.state == ProcState::ZOMBIE {
    8000de16:	02b50063          	beq	a0,a1,8000de36 <.LBB11_50+0x3a>
    8000de1a:	a009                	j	8000de1c <.LBB11_50+0x20>
                            pid = task.pid;
    8000de1c:	7566                	ld	a0,120(sp)
    8000de1e:	6586                	ld	a1,64(sp)
    8000de20:	3f05b603          	ld	a2,1008(a1)
    8000de24:	f432                	sd	a2,40(sp)
    8000de26:	e6b2                	sd	a2,328(sp)
                            let page_table = unsafe { &mut *task.pagetable };
    8000de28:	6d8c                	ld	a1,24(a1)
    8000de2a:	f82e                	sd	a1,48(sp)
    8000de2c:	eaae                	sd	a1,336(sp)
    8000de2e:	4581                	li	a1,0
                            if addr != 0 && page_table.copy_out(addr, task.xstate as *const u8, size_of_val(&task.xstate)).is_err() {
    8000de30:	00b50863          	beq	a0,a1,8000de40 <.LBB11_50+0x44>
    8000de34:	a811                	j	8000de48 <.LBB11_50+0x4c>
                    if parent as *const _ == curtask as *const _ {
    8000de36:	a849                	j	8000dec8 <.LBB11_50+0xcc>
    8000de38:	4505                	li	a0,1
                            if addr != 0 && page_table.copy_out(addr, task.xstate as *const u8, size_of_val(&task.xstate)).is_err() {
    8000de3a:	0ca10fa3          	sb	a0,223(sp)
    8000de3e:	a00d                	j	8000de60 <.LBB11_50+0x64>
    8000de40:	4501                	li	a0,0
    8000de42:	0ca10fa3          	sb	a0,223(sp)
    8000de46:	a829                	j	8000de60 <.LBB11_50+0x64>
    8000de48:	6586                	ld	a1,64(sp)
    8000de4a:	3e858513          	addi	a0,a1,1000
    8000de4e:	3e85b583          	ld	a1,1000(a1)
    8000de52:	ec2e                	sd	a1,24(sp)
    8000de54:	0000f097          	auipc	ra,0xf
    8000de58:	170080e7          	jalr	368(ra) # 8001cfc4 <_ZN4core3mem11size_of_val17hb8db3e1f6e8e8424E>
    8000de5c:	f02a                	sd	a0,32(sp)
    8000de5e:	a031                	j	8000de6a <.LBB11_50+0x6e>
    8000de60:	0df14503          	lbu	a0,223(sp)
    8000de64:	8905                	andi	a0,a0,1
    8000de66:	e51d                	bnez	a0,8000de94 <.LBB11_50+0x98>
    8000de68:	a825                	j	8000dea0 <.LBB11_50+0xa4>
    8000de6a:	7682                	ld	a3,32(sp)
    8000de6c:	6662                	ld	a2,24(sp)
    8000de6e:	75e6                	ld	a1,120(sp)
    8000de70:	7542                	ld	a0,48(sp)
    8000de72:	0000a097          	auipc	ra,0xa
    8000de76:	d56080e7          	jalr	-682(ra) # 80017bc8 <_ZN6kernel6memory7mapping10page_table9PageTable8copy_out17h55d0f27ee3680817E>
    8000de7a:	f1aa                	sd	a0,224(sp)
    8000de7c:	f5ae                	sd	a1,232(sp)
    8000de7e:	a009                	j	8000de80 <.LBB11_50+0x84>
    8000de80:	1188                	addi	a0,sp,224
    8000de82:	fffff097          	auipc	ra,0xfffff
    8000de86:	edc080e7          	jalr	-292(ra) # 8000cd5e <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h304118d236359d80E>
    8000de8a:	e82a                	sd	a0,16(sp)
    8000de8c:	a009                	j	8000de8e <.LBB11_50+0x92>
    8000de8e:	6542                	ld	a0,16(sp)
    8000de90:	f545                	bnez	a0,8000de38 <.LBB11_50+0x3c>
    8000de92:	b77d                	j	8000de40 <.LBB11_50+0x44>
                                drop(tasks_guard);
    8000de94:	7526                	ld	a0,104(sp)
    8000de96:	0000f097          	auipc	ra,0xf
    8000de9a:	18a080e7          	jalr	394(ra) # 8001d020 <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    8000de9e:	a039                	j	8000deac <.LBB11_50+0xb0>
                            task.free_proc();
    8000dea0:	6506                	ld	a0,64(sp)
    8000dea2:	00008097          	auipc	ra,0x8
    8000dea6:	2f8080e7          	jalr	760(ra) # 8001619a <_ZN6kernel7process7process11task_struct9free_proc17h164acbc3102fa45eE>
    8000deaa:	a021                	j	8000deb2 <.LBB11_50+0xb6>
    8000deac:	4501                	li	a0,0
                                return None
    8000deae:	e92a                	sd	a0,144(sp)
#![no_std]
    8000deb0:	a855                	j	8000df64 <.LBB11_51+0x4c>
                            drop(tasks_guard);
    8000deb2:	7526                	ld	a0,104(sp)
    8000deb4:	0000f097          	auipc	ra,0xf
    8000deb8:	16c080e7          	jalr	364(ra) # 8001d020 <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    8000debc:	a009                	j	8000debe <.LBB11_50+0xc2>
                            return Some(pid)
    8000debe:	7522                	ld	a0,40(sp)
    8000dec0:	ed2a                	sd	a0,152(sp)
    8000dec2:	4505                	li	a0,1
    8000dec4:	e92a                	sd	a0,144(sp)
    8000dec6:	a879                	j	8000df64 <.LBB11_51+0x4c>
            for index in 0..self.tasks.len() {
    8000dec8:	bd75                	j	8000dd84 <.LBB11_49+0x6e>
    8000deca:	4505                	li	a0,1
            if !have_kids || curtask.killed {
    8000decc:	0ea10ba3          	sb	a0,247(sp)
    8000ded0:	a819                	j	8000dee6 <.LBB11_50+0xea>
    8000ded2:	4501                	li	a0,0
    8000ded4:	0ea10ba3          	sb	a0,247(sp)
    8000ded8:	a039                	j	8000dee6 <.LBB11_50+0xea>
    8000deda:	7546                	ld	a0,112(sp)
    8000dedc:	40954503          	lbu	a0,1033(a0)
    8000dee0:	8905                	andi	a0,a0,1
    8000dee2:	f565                	bnez	a0,8000deca <.LBB11_50+0xce>
    8000dee4:	b7fd                	j	8000ded2 <.LBB11_50+0xd6>
    8000dee6:	0f714503          	lbu	a0,247(sp)
    8000deea:	8905                	andi	a0,a0,1
    8000deec:	4581                	li	a1,0
    8000deee:	00b50963          	beq	a0,a1,8000df00 <.LBB11_50+0x104>
    8000def2:	a009                	j	8000def4 <.LBB11_50+0xf8>
                drop(tasks_guard);
    8000def4:	7526                	ld	a0,104(sp)
    8000def6:	0000f097          	auipc	ra,0xf
    8000defa:	12a080e7          	jalr	298(ra) # 8001d020 <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    8000defe:	a039                	j	8000df0c <.LBB11_50+0x110>
                // drop(wait_guard);
                return None
            }


            drop(tasks_guard);
    8000df00:	7526                	ld	a0,104(sp)
    8000df02:	0000f097          	auipc	ra,0xf
    8000df06:	11e080e7          	jalr	286(ra) # 8001d020 <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    8000df0a:	a021                	j	8000df12 <.LBB11_50+0x116>
    8000df0c:	4501                	li	a0,0
                return None
    8000df0e:	e92a                	sd	a0,144(sp)
    8000df10:	a891                	j	8000df64 <.LBB11_51+0x4c>
    8000df12:	6541                	lui	a0,0x10
    8000df14:	4285059b          	addiw	a1,a0,1064

000000008000df18 <.LBB11_51>:
    8000df18:	00049517          	auipc	a0,0x49
    8000df1c:	68850513          	addi	a0,a0,1672 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    8000df20:	952e                	add	a0,a0,a1
            // Wait for a child to exit.
            let mut wait_guard = unsafe { PROC_MANAGER.wait_lock.acquire() };
    8000df22:	00003097          	auipc	ra,0x3
    8000df26:	8ec080e7          	jalr	-1812(ra) # 8001080e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    8000df2a:	fdaa                	sd	a0,248(sp)
    8000df2c:	a009                	j	8000df2e <.LBB11_51+0x16>
            curtask.sleep(
                curtask as *const _ as usize, 
                wait_guard
    8000df2e:	75c6                	ld	a1,112(sp)
    8000df30:	766e                	ld	a2,248(sp)
            curtask.sleep(
    8000df32:	852e                	mv	a0,a1
    8000df34:	00004097          	auipc	ra,0x4
    8000df38:	b1a080e7          	jalr	-1254(ra) # 80011a4e <_ZN6kernel7process7process11task_struct5sleep17h3865ab03b1bff75fE>
    8000df3c:	a009                	j	8000df3e <.LBB11_51+0x26>
    8000df3e:	650a                	ld	a0,128(sp)
    8000df40:	65c1                	lui	a1,0x10
    8000df42:	4285859b          	addiw	a1,a1,1064
            );
            wait_guard = self.wait_lock.acquire();
    8000df46:	952e                	add	a0,a0,a1
    8000df48:	00003097          	auipc	ra,0x3
    8000df4c:	8c6080e7          	jalr	-1850(ra) # 8001080e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    8000df50:	e42a                	sd	a0,8(sp)
    8000df52:	a009                	j	8000df54 <.LBB11_51+0x3c>
    8000df54:	6522                	ld	a0,8(sp)
    8000df56:	fdaa                	sd	a0,248(sp)
    8000df58:	19a8                	addi	a0,sp,248
        }
    8000df5a:	ffff9097          	auipc	ra,0xffff9
    8000df5e:	018080e7          	jalr	24(ra) # 80006f72 <_ZN4core3ptr74drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$$LP$$RP$$GT$$GT$17he568be727488c8bbE>
    8000df62:	bbc1                	j	8000dd32 <.LBB11_49+0x1c>
    }
    8000df64:	654a                	ld	a0,144(sp)
    8000df66:	65ea                	ld	a1,152(sp)
    8000df68:	60f6                	ld	ra,344(sp)
    8000df6a:	6135                	addi	sp,sp,352
    8000df6c:	8082                	ret
                let task = &mut self.tasks[index];
    8000df6e:	6526                	ld	a0,72(sp)

000000008000df70 <.LBB11_52>:
    8000df70:	0001a617          	auipc	a2,0x1a
    8000df74:	3b860613          	addi	a2,a2,952 # 80028328 <.L__unnamed_28>
    8000df78:	04000593          	li	a1,64
    8000df7c:	00014097          	auipc	ra,0x14
    8000df80:	326080e7          	jalr	806(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel7process7manager11ProcManager4join17h0acabc4ce5dd65bdE:

000000008000df86 <_ZN6kernel7process7manager11ProcManager4join17h0acabc4ce5dd65bdE>:

    pub fn join(&mut self, stack: usize) -> Option<usize> {
    8000df86:	7109                	addi	sp,sp,-384
    8000df88:	fe86                	sd	ra,376(sp)
    8000df8a:	f8ae                	sd	a1,112(sp)
    8000df8c:	fcaa                	sd	a0,120(sp)
    8000df8e:	f22a                	sd	a0,288(sp)
    8000df90:	f62e                	sd	a1,296(sp)

000000008000df92 <.LBB12_45>:
        let pid;
        let my_proc = unsafe {
            CPU_MANAGER.myproc().expect("Fail to get my process")
    8000df92:	00065517          	auipc	a0,0x65
    8000df96:	1ae50513          	addi	a0,a0,430 # 80073140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    8000df9a:	00004097          	auipc	ra,0x4
    8000df9e:	e64080e7          	jalr	-412(ra) # 80011dfe <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    8000dfa2:	e12a                	sd	a0,128(sp)
    8000dfa4:	a009                	j	8000dfa6 <.LBB12_45+0x14>
    8000dfa6:	650a                	ld	a0,128(sp)

000000008000dfa8 <.LBB12_46>:
    8000dfa8:	0001a597          	auipc	a1,0x1a
    8000dfac:	35058593          	addi	a1,a1,848 # 800282f8 <.L__unnamed_25>

000000008000dfb0 <.LBB12_47>:
    8000dfb0:	0001a697          	auipc	a3,0x1a
    8000dfb4:	39868693          	addi	a3,a3,920 # 80028348 <.L__unnamed_29>
    8000dfb8:	4659                	li	a2,22
    8000dfba:	00001097          	auipc	ra,0x1
    8000dfbe:	ba6080e7          	jalr	-1114(ra) # 8000eb60 <_ZN4core6option15Option$LT$T$GT$6expect17h5cc0070b74d715b8E>
    8000dfc2:	f4aa                	sd	a0,104(sp)
    8000dfc4:	a009                	j	8000dfc6 <.LBB12_47+0x16>
    8000dfc6:	7526                	ld	a0,104(sp)
    8000dfc8:	fa2a                	sd	a0,304(sp)
        };
        
        loop {
    8000dfca:	a009                	j	8000dfcc <.LBB12_47+0x1c>
    8000dfcc:	7566                	ld	a0,120(sp)
    8000dfce:	65c1                	lui	a1,0x10
    8000dfd0:	4085859b          	addiw	a1,a1,1032
            let mut guard = self.tasks_lock.acquire();
    8000dfd4:	952e                	add	a0,a0,a1
    8000dfd6:	00003097          	auipc	ra,0x3
    8000dfda:	838080e7          	jalr	-1992(ra) # 8001080e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    8000dfde:	85aa                	mv	a1,a0
    8000dfe0:	f0ae                	sd	a1,96(sp)
    8000dfe2:	fe2a                	sd	a0,312(sp)
    8000dfe4:	a009                	j	8000dfe6 <.LBB12_47+0x36>
    8000dfe6:	7566                	ld	a0,120(sp)
    8000dfe8:	4581                	li	a1,0
            let mut have_kids = false;
    8000dfea:	08b10fa3          	sb	a1,159(sp)
    8000dfee:	04000593          	li	a1,64
            // Scan through table looking for exited children. 
            // 遍历所有进程是否为其他进程的子进程
            for index in 0..self.tasks.len() {
    8000dff2:	00004097          	auipc	ra,0x4
    8000dff6:	9fe080e7          	jalr	-1538(ra) # 800119f0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf08bc165152fefe5E>
    8000dffa:	ecaa                	sd	a0,88(sp)
    8000dffc:	a009                	j	8000dffe <.LBB12_47+0x4e>
    8000dffe:	65e6                	ld	a1,88(sp)
    8000e000:	4501                	li	a0,0
    8000e002:	f12a                	sd	a0,160(sp)
    8000e004:	f52e                	sd	a1,168(sp)
    8000e006:	00012097          	auipc	ra,0x12
    8000e00a:	93c080e7          	jalr	-1732(ra) # 8001f942 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he0a8d93712e5493bE>
    8000e00e:	e4aa                	sd	a0,72(sp)
    8000e010:	e8ae                	sd	a1,80(sp)
    8000e012:	a009                	j	8000e014 <.LBB12_47+0x64>
    8000e014:	6546                	ld	a0,80(sp)
    8000e016:	65a6                	ld	a1,72(sp)
    8000e018:	f92e                	sd	a1,176(sp)
    8000e01a:	fd2a                	sd	a0,184(sp)
    8000e01c:	a009                	j	8000e01e <.LBB12_47+0x6e>
    8000e01e:	1908                	addi	a0,sp,176
    8000e020:	00012097          	auipc	ra,0x12
    8000e024:	8b4080e7          	jalr	-1868(ra) # 8001f8d4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE>
    8000e028:	e1aa                	sd	a0,192(sp)
    8000e02a:	e5ae                	sd	a1,200(sp)
    8000e02c:	a009                	j	8000e02e <.LBB12_47+0x7e>
    8000e02e:	650e                	ld	a0,192(sp)
    8000e030:	4581                	li	a1,0
    8000e032:	00b50463          	beq	a0,a1,8000e03a <.LBB12_47+0x8a>
    8000e036:	a009                	j	8000e038 <.LBB12_47+0x88>
    8000e038:	a809                	j	8000e04a <.LBB12_47+0x9a>
                        }
                    }
                }
            }
            // No point waiting if we don't have any children. 
            if !have_kids || my_proc.killed {
    8000e03a:	09f14503          	lbu	a0,159(sp)
    8000e03e:	8905                	andi	a0,a0,1
    8000e040:	4581                	li	a1,0
    8000e042:	10b50e63          	beq	a0,a1,8000e15e <.LBB12_50+0x4e>
    8000e046:	a225                	j	8000e16e <.LBB12_50+0x5e>
            for index in 0..self.tasks.len() {
    8000e048:	0000                	unimp
    8000e04a:	65ae                	ld	a1,200(sp)
    8000e04c:	e0ae                	sd	a1,64(sp)
    8000e04e:	e2ae                	sd	a1,320(sp)
    8000e050:	e6ae                	sd	a1,328(sp)
    8000e052:	eaae                	sd	a1,336(sp)
    8000e054:	03f00513          	li	a0,63
                let p = &mut self.tasks[index];
    8000e058:	1ab56263          	bltu	a0,a1,8000e1fc <.LBB12_50+0xec>
    8000e05c:	a009                	j	8000e05e <.LBB12_47+0xae>
    8000e05e:	7566                	ld	a0,120(sp)
    8000e060:	6586                	ld	a1,64(sp)
    8000e062:	41000613          	li	a2,1040
    8000e066:	02c585b3          	mul	a1,a1,a2
    8000e06a:	952e                	add	a0,a0,a1
    8000e06c:	fc2a                	sd	a0,56(sp)
    8000e06e:	eeaa                	sd	a0,344(sp)
                if let Some(parent) = p.parent {
    8000e070:	6d48                	ld	a0,152(a0)
    8000e072:	4581                	li	a1,0
    8000e074:	00b51463          	bne	a0,a1,8000e07c <.LBB12_47+0xcc>
    8000e078:	a009                	j	8000e07a <.LBB12_47+0xca>
    8000e07a:	a0cd                	j	8000e15c <.LBB12_50+0x4c>
    8000e07c:	75a6                	ld	a1,104(sp)
    8000e07e:	7562                	ld	a0,56(sp)
    8000e080:	7148                	ld	a0,160(a0)
    8000e082:	f2aa                	sd	a0,352(sp)
                    if parent as *const _ == my_proc as *const _ {
    8000e084:	02b51363          	bne	a0,a1,8000e0aa <.LBB12_48+0x14>
    8000e088:	a009                	j	8000e08a <.LBB12_47+0xda>
    8000e08a:	7562                	ld	a0,56(sp)
    8000e08c:	4585                	li	a1,1
                        have_kids = true;
    8000e08e:	08b10fa3          	sb	a1,159(sp)
                        if p.state == ProcState::ZOMBIE {
    8000e092:	40850513          	addi	a0,a0,1032

000000008000e096 <.LBB12_48>:
    8000e096:	0001a597          	auipc	a1,0x1a
    8000e09a:	2aa58593          	addi	a1,a1,682 # 80028340 <.L__unnamed_27>
    8000e09e:	00009097          	auipc	ra,0x9
    8000e0a2:	9d6080e7          	jalr	-1578(ra) # 80016a74 <_ZN76_$LT$kernel..process..process..ProcState$u20$as$u20$core..cmp..PartialEq$GT$2eq17hc7c8c767a75b25feE>
    8000e0a6:	f82a                	sd	a0,48(sp)
    8000e0a8:	a011                	j	8000e0ac <.LBB12_48+0x16>
                    if parent as *const _ == my_proc as *const _ {
    8000e0aa:	a84d                	j	8000e15c <.LBB12_50+0x4c>
    8000e0ac:	7542                	ld	a0,48(sp)
    8000e0ae:	4581                	li	a1,0
                        if p.state == ProcState::ZOMBIE {
    8000e0b0:	00b50e63          	beq	a0,a1,8000e0cc <.LBB12_48+0x36>
    8000e0b4:	a009                	j	8000e0b6 <.LBB12_48+0x20>
                            pid = p.pid;
    8000e0b6:	7562                	ld	a0,56(sp)
    8000e0b8:	3f053583          	ld	a1,1008(a0)
    8000e0bc:	ec2e                	sd	a1,24(sp)
    8000e0be:	f6ae                	sd	a1,360(sp)
                            let page_table = unsafe { &mut *p.pagetable };
    8000e0c0:	6d0c                	ld	a1,24(a0)
    8000e0c2:	f02e                	sd	a1,32(sp)
    8000e0c4:	faae                	sd	a1,368(sp)
                            if page_table.copy_out(stack, p.thread_ustack as *const u8, size_of::<usize>()).is_err() {
    8000e0c6:	6508                	ld	a0,8(a0)
    8000e0c8:	f42a                	sd	a0,40(sp)
    8000e0ca:	a011                	j	8000e0ce <.LBB12_48+0x38>
                    if parent as *const _ == my_proc as *const _ {
    8000e0cc:	a841                	j	8000e15c <.LBB12_50+0x4c>
                            if page_table.copy_out(stack, p.thread_ustack as *const u8, size_of::<usize>()).is_err() {
    8000e0ce:	7622                	ld	a2,40(sp)
    8000e0d0:	75c6                	ld	a1,112(sp)
    8000e0d2:	7502                	ld	a0,32(sp)
    8000e0d4:	46a1                	li	a3,8
    8000e0d6:	0000a097          	auipc	ra,0xa
    8000e0da:	af2080e7          	jalr	-1294(ra) # 80017bc8 <_ZN6kernel6memory7mapping10page_table9PageTable8copy_out17h55d0f27ee3680817E>
    8000e0de:	e9aa                	sd	a0,208(sp)
    8000e0e0:	edae                	sd	a1,216(sp)
    8000e0e2:	a009                	j	8000e0e4 <.LBB12_48+0x4e>
    8000e0e4:	0988                	addi	a0,sp,208
    8000e0e6:	fffff097          	auipc	ra,0xfffff
    8000e0ea:	c78080e7          	jalr	-904(ra) # 8000cd5e <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h304118d236359d80E>
    8000e0ee:	e82a                	sd	a0,16(sp)
    8000e0f0:	a009                	j	8000e0f2 <.LBB12_48+0x5c>
    8000e0f2:	6542                	ld	a0,16(sp)
    8000e0f4:	4581                	li	a1,0
    8000e0f6:	00b50963          	beq	a0,a1,8000e108 <.LBB12_49>
    8000e0fa:	a009                	j	8000e0fc <.LBB12_48+0x66>
                                drop(guard);
    8000e0fc:	7506                	ld	a0,96(sp)
    8000e0fe:	0000f097          	auipc	ra,0xf
    8000e102:	f22080e7          	jalr	-222(ra) # 8001d020 <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    8000e106:	a00d                	j	8000e128 <.LBB12_50+0x18>

000000008000e108 <.LBB12_49>:
                            println!("(FIND");
    8000e108:	0001a597          	auipc	a1,0x1a
    8000e10c:	27858593          	addi	a1,a1,632 # 80028380 <.L__unnamed_30>

000000008000e110 <.LBB12_50>:
    8000e110:	0001a697          	auipc	a3,0x1a
    8000e114:	03068693          	addi	a3,a3,48 # 80028140 <.L__unnamed_41>
    8000e118:	1188                	addi	a0,sp,224
    8000e11a:	4605                	li	a2,1
    8000e11c:	4701                	li	a4,0
    8000e11e:	ffff7097          	auipc	ra,0xffff7
    8000e122:	34c080e7          	jalr	844(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8000e126:	a021                	j	8000e12e <.LBB12_50+0x1e>
    8000e128:	4501                	li	a0,0
                                return None
    8000e12a:	e52a                	sd	a0,136(sp)
    8000e12c:	a0d9                	j	8000e1f2 <.LBB12_50+0xe2>
    8000e12e:	1188                	addi	a0,sp,224
                            println!("(FIND");
    8000e130:	00010097          	auipc	ra,0x10
    8000e134:	c1c080e7          	jalr	-996(ra) # 8001dd4c <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8000e138:	a009                	j	8000e13a <.LBB12_50+0x2a>
                            p.free_thread();
    8000e13a:	7562                	ld	a0,56(sp)
    8000e13c:	00008097          	auipc	ra,0x8
    8000e140:	0ce080e7          	jalr	206(ra) # 8001620a <_ZN6kernel7process7process11task_struct11free_thread17ha65c5f78ade6bf2bE>
    8000e144:	a009                	j	8000e146 <.LBB12_50+0x36>
                            drop(guard);
    8000e146:	7506                	ld	a0,96(sp)
    8000e148:	0000f097          	auipc	ra,0xf
    8000e14c:	ed8080e7          	jalr	-296(ra) # 8001d020 <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    8000e150:	a009                	j	8000e152 <.LBB12_50+0x42>
                            return Some(pid);
    8000e152:	6562                	ld	a0,24(sp)
    8000e154:	e92a                	sd	a0,144(sp)
    8000e156:	4505                	li	a0,1
    8000e158:	e52a                	sd	a0,136(sp)
    8000e15a:	a861                	j	8000e1f2 <.LBB12_50+0xe2>
            for index in 0..self.tasks.len() {
    8000e15c:	b5c9                	j	8000e01e <.LBB12_47+0x6e>
    8000e15e:	4505                	li	a0,1
            if !have_kids || my_proc.killed {
    8000e160:	10a10ba3          	sb	a0,279(sp)
    8000e164:	a819                	j	8000e17a <.LBB12_50+0x6a>
    8000e166:	4501                	li	a0,0
    8000e168:	10a10ba3          	sb	a0,279(sp)
    8000e16c:	a039                	j	8000e17a <.LBB12_50+0x6a>
    8000e16e:	7526                	ld	a0,104(sp)
    8000e170:	40954503          	lbu	a0,1033(a0)
    8000e174:	8905                	andi	a0,a0,1
    8000e176:	f565                	bnez	a0,8000e15e <.LBB12_50+0x4e>
    8000e178:	b7fd                	j	8000e166 <.LBB12_50+0x56>
    8000e17a:	11714503          	lbu	a0,279(sp)
    8000e17e:	8905                	andi	a0,a0,1
    8000e180:	4581                	li	a1,0
    8000e182:	00b50963          	beq	a0,a1,8000e194 <.LBB12_50+0x84>
    8000e186:	a009                	j	8000e188 <.LBB12_50+0x78>
                drop(guard);
    8000e188:	7506                	ld	a0,96(sp)
    8000e18a:	0000f097          	auipc	ra,0xf
    8000e18e:	e96080e7          	jalr	-362(ra) # 8001d020 <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    8000e192:	a039                	j	8000e1a0 <.LBB12_50+0x90>
                return None
            }
            // 释放锁，否则会死锁
            drop(guard);
    8000e194:	7506                	ld	a0,96(sp)
    8000e196:	0000f097          	auipc	ra,0xf
    8000e19a:	e8a080e7          	jalr	-374(ra) # 8001d020 <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    8000e19e:	a021                	j	8000e1a6 <.LBB12_50+0x96>
    8000e1a0:	4501                	li	a0,0
                return None
    8000e1a2:	e52a                	sd	a0,136(sp)
    8000e1a4:	a0b9                	j	8000e1f2 <.LBB12_50+0xe2>
    8000e1a6:	7566                	ld	a0,120(sp)
    8000e1a8:	65c1                	lui	a1,0x10
    8000e1aa:	4285859b          	addiw	a1,a1,1064
            let mut wait_guard = self.wait_lock.acquire();
    8000e1ae:	952e                	add	a0,a0,a1
    8000e1b0:	00002097          	auipc	ra,0x2
    8000e1b4:	65e080e7          	jalr	1630(ra) # 8001080e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    8000e1b8:	ee2a                	sd	a0,280(sp)
    8000e1ba:	a009                	j	8000e1bc <.LBB12_50+0xac>
            // Wait for a child to exit.
            my_proc.sleep(
                my_proc as *const _ as usize, 
                wait_guard
    8000e1bc:	75a6                	ld	a1,104(sp)
    8000e1be:	6672                	ld	a2,280(sp)
            my_proc.sleep(
    8000e1c0:	852e                	mv	a0,a1
    8000e1c2:	00004097          	auipc	ra,0x4
    8000e1c6:	88c080e7          	jalr	-1908(ra) # 80011a4e <_ZN6kernel7process7process11task_struct5sleep17h3865ab03b1bff75fE>
    8000e1ca:	a009                	j	8000e1cc <.LBB12_50+0xbc>
    8000e1cc:	7566                	ld	a0,120(sp)
    8000e1ce:	65c1                	lui	a1,0x10
    8000e1d0:	4285859b          	addiw	a1,a1,1064
            );
            wait_guard = self.wait_lock.acquire();
    8000e1d4:	952e                	add	a0,a0,a1
    8000e1d6:	00002097          	auipc	ra,0x2
    8000e1da:	638080e7          	jalr	1592(ra) # 8001080e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    8000e1de:	e42a                	sd	a0,8(sp)
    8000e1e0:	a009                	j	8000e1e2 <.LBB12_50+0xd2>
    8000e1e2:	6522                	ld	a0,8(sp)
    8000e1e4:	ee2a                	sd	a0,280(sp)
    8000e1e6:	0a28                	addi	a0,sp,280
        }
    8000e1e8:	ffff9097          	auipc	ra,0xffff9
    8000e1ec:	d8a080e7          	jalr	-630(ra) # 80006f72 <_ZN4core3ptr74drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$$LP$$RP$$GT$$GT$17he568be727488c8bbE>
    8000e1f0:	bbf1                	j	8000dfcc <.LBB12_47+0x1c>
    }
    8000e1f2:	652a                	ld	a0,136(sp)
    8000e1f4:	65ca                	ld	a1,144(sp)
    8000e1f6:	70f6                	ld	ra,376(sp)
    8000e1f8:	6119                	addi	sp,sp,384
    8000e1fa:	8082                	ret
                let p = &mut self.tasks[index];
    8000e1fc:	6506                	ld	a0,64(sp)

000000008000e1fe <.LBB12_51>:
    8000e1fe:	0001a617          	auipc	a2,0x1a
    8000e202:	16260613          	addi	a2,a2,354 # 80028360 <.L__unnamed_31>
    8000e206:	04000593          	li	a1,64
    8000e20a:	00014097          	auipc	ra,0x14
    8000e20e:	098080e7          	jalr	152(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel7process7manager11ProcManager9proc_dump17h983bd5c89559ec59E:

000000008000e214 <_ZN6kernel7process7manager11ProcManager9proc_dump17h983bd5c89559ec59E>:
    }

    /// Print a process listing to console. For debugging. 
    /// Runs when user type ^P on console. 
    /// No lock to avoid wedging a stuck machine further
    pub fn proc_dump(&self) {
    8000e214:	7149                	addi	sp,sp,-368
    8000e216:	f686                	sd	ra,360(sp)
    8000e218:	fa2a                	sd	a0,304(sp)
    8000e21a:	04000593          	li	a1,64
        for proc in self.tasks.iter() {
    8000e21e:	00003097          	auipc	ra,0x3
    8000e222:	7e6080e7          	jalr	2022(ra) # 80011a04 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17hf352d95d7dd299d1E>
    8000e226:	f4aa                	sd	a0,104(sp)
    8000e228:	f8ae                	sd	a1,112(sp)
    8000e22a:	a009                	j	8000e22c <_ZN6kernel7process7manager11ProcManager9proc_dump17h983bd5c89559ec59E+0x18>
    8000e22c:	75c6                	ld	a1,112(sp)
    8000e22e:	7526                	ld	a0,104(sp)
    8000e230:	ffffd097          	auipc	ra,0xffffd
    8000e234:	e40080e7          	jalr	-448(ra) # 8000b070 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h4af9d22df112c9d1E>
    8000e238:	ecaa                	sd	a0,88(sp)
    8000e23a:	f0ae                	sd	a1,96(sp)
    8000e23c:	a009                	j	8000e23e <_ZN6kernel7process7manager11ProcManager9proc_dump17h983bd5c89559ec59E+0x2a>
    8000e23e:	7506                	ld	a0,96(sp)
    8000e240:	65e6                	ld	a1,88(sp)
    8000e242:	fcae                	sd	a1,120(sp)
    8000e244:	e12a                	sd	a0,128(sp)
    8000e246:	a009                	j	8000e248 <_ZN6kernel7process7manager11ProcManager9proc_dump17h983bd5c89559ec59E+0x34>
    8000e248:	18a8                	addi	a0,sp,120
    8000e24a:	ffffd097          	auipc	ra,0xffffd
    8000e24e:	e44080e7          	jalr	-444(ra) # 8000b08e <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha83d9fbdc7b514feE>
    8000e252:	e52a                	sd	a0,136(sp)
    8000e254:	a009                	j	8000e256 <_ZN6kernel7process7manager11ProcManager9proc_dump17h983bd5c89559ec59E+0x42>
    8000e256:	652a                	ld	a0,136(sp)
    8000e258:	00a035b3          	snez	a1,a0
    8000e25c:	4581                	li	a1,0
    8000e25e:	00b50463          	beq	a0,a1,8000e266 <_ZN6kernel7process7manager11ProcManager9proc_dump17h983bd5c89559ec59E+0x52>
    8000e262:	a009                	j	8000e264 <_ZN6kernel7process7manager11ProcManager9proc_dump17h983bd5c89559ec59E+0x50>
    8000e264:	a029                	j	8000e26e <_ZN6kernel7process7manager11ProcManager9proc_dump17h983bd5c89559ec59E+0x5a>
            if proc.state() == ProcState::UNUSED { continue; }
            else {
                println!("pid: {} state: {:?} name: {}", proc.pid(), proc.state(), proc.name());
            }
        }
    }
    8000e266:	70b6                	ld	ra,360(sp)
    8000e268:	6175                	addi	sp,sp,368
    8000e26a:	8082                	ret
        for proc in self.tasks.iter() {
    8000e26c:	0000                	unimp
    8000e26e:	652a                	ld	a0,136(sp)
    8000e270:	e8aa                	sd	a0,80(sp)
    8000e272:	fe2a                	sd	a0,312(sp)
    8000e274:	e2aa                	sd	a0,320(sp)
    8000e276:	e6aa                	sd	a0,328(sp)
            if proc.state() == ProcState::UNUSED { continue; }
    8000e278:	00008097          	auipc	ra,0x8
    8000e27c:	da4080e7          	jalr	-604(ra) # 8001601c <_ZN6kernel7process7process11task_struct5state17h188201629a7bcaa5E>
    8000e280:	0ff57513          	andi	a0,a0,255
    8000e284:	08a10ba3          	sb	a0,151(sp)
    8000e288:	a009                	j	8000e28a <.LBB13_20>

000000008000e28a <.LBB13_20>:
    8000e28a:	0001a597          	auipc	a1,0x1a
    8000e28e:	10658593          	addi	a1,a1,262 # 80028390 <.L__unnamed_32>
    8000e292:	09710513          	addi	a0,sp,151
    8000e296:	00008097          	auipc	ra,0x8
    8000e29a:	7de080e7          	jalr	2014(ra) # 80016a74 <_ZN76_$LT$kernel..process..process..ProcState$u20$as$u20$core..cmp..PartialEq$GT$2eq17hc7c8c767a75b25feE>
    8000e29e:	e4aa                	sd	a0,72(sp)
    8000e2a0:	a009                	j	8000e2a2 <.LBB13_20+0x18>
    8000e2a2:	6526                	ld	a0,72(sp)
    8000e2a4:	f155                	bnez	a0,8000e248 <_ZN6kernel7process7manager11ProcManager9proc_dump17h983bd5c89559ec59E+0x34>
    8000e2a6:	a009                	j	8000e2a8 <.LBB13_20+0x1e>
                println!("pid: {} state: {:?} name: {}", proc.pid(), proc.state(), proc.name());
    8000e2a8:	6546                	ld	a0,80(sp)
    8000e2aa:	00008097          	auipc	ra,0x8
    8000e2ae:	d56080e7          	jalr	-682(ra) # 80016000 <_ZN6kernel7process7process11task_struct3pid17hf16723aa87a30b20E>
    8000e2b2:	ea2a                	sd	a0,272(sp)
    8000e2b4:	a009                	j	8000e2b6 <.LBB13_20+0x2c>
    8000e2b6:	6546                	ld	a0,80(sp)
    8000e2b8:	00008097          	auipc	ra,0x8
    8000e2bc:	d64080e7          	jalr	-668(ra) # 8001601c <_ZN6kernel7process7process11task_struct5state17h188201629a7bcaa5E>
    8000e2c0:	0ff57513          	andi	a0,a0,255
    8000e2c4:	10a10fa3          	sb	a0,287(sp)
    8000e2c8:	a009                	j	8000e2ca <.LBB13_20+0x40>
    8000e2ca:	6546                	ld	a0,80(sp)
    8000e2cc:	00008097          	auipc	ra,0x8
    8000e2d0:	d5c080e7          	jalr	-676(ra) # 80016028 <_ZN6kernel7process7process11task_struct4name17he8a035723af8acadE>
    8000e2d4:	f22a                	sd	a0,288(sp)
    8000e2d6:	f62e                	sd	a1,296(sp)
    8000e2d8:	a009                	j	8000e2da <.LBB13_20+0x50>
    8000e2da:	0a08                	addi	a0,sp,272
    8000e2dc:	fdaa                	sd	a0,248(sp)
    8000e2de:	11f10613          	addi	a2,sp,287
    8000e2e2:	f432                	sd	a2,40(sp)
    8000e2e4:	e232                	sd	a2,256(sp)
    8000e2e6:	120c                	addi	a1,sp,288
    8000e2e8:	f82e                	sd	a1,48(sp)
    8000e2ea:	e62e                	sd	a1,264(sp)
    8000e2ec:	eaaa                	sd	a0,336(sp)
    8000e2ee:	eeb2                	sd	a2,344(sp)
    8000e2f0:	f2ae                	sd	a1,352(sp)

000000008000e2f2 <.LBB13_21>:
    8000e2f2:	00016597          	auipc	a1,0x16
    8000e2f6:	61058593          	addi	a1,a1,1552 # 80024902 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h9c6c4af1578f7c29E>
    8000e2fa:	00011097          	auipc	ra,0x11
    8000e2fe:	3a6080e7          	jalr	934(ra) # 8001f6a0 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    8000e302:	fc2a                	sd	a0,56(sp)
    8000e304:	e0ae                	sd	a1,64(sp)
    8000e306:	a009                	j	8000e308 <.LBB13_21+0x16>
    8000e308:	7522                	ld	a0,40(sp)

000000008000e30a <.LBB13_22>:
    8000e30a:	00008597          	auipc	a1,0x8
    8000e30e:	61458593          	addi	a1,a1,1556 # 8001691e <_ZN72_$LT$kernel..process..process..ProcState$u20$as$u20$core..fmt..Debug$GT$3fmt17hf525681892d4cccaE>
    8000e312:	00010097          	auipc	ra,0x10
    8000e316:	34e080e7          	jalr	846(ra) # 8001e660 <_ZN4core3fmt10ArgumentV13new17h8dd13dffa5e435d0E>
    8000e31a:	ec2a                	sd	a0,24(sp)
    8000e31c:	f02e                	sd	a1,32(sp)
    8000e31e:	a009                	j	8000e320 <.LBB13_22+0x16>
    8000e320:	7542                	ld	a0,48(sp)

000000008000e322 <.LBB13_23>:
    8000e322:	00010597          	auipc	a1,0x10
    8000e326:	29258593          	addi	a1,a1,658 # 8001e5b4 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E>
    8000e32a:	00010097          	auipc	ra,0x10
    8000e32e:	2d0080e7          	jalr	720(ra) # 8001e5fa <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>
    8000e332:	e42a                	sd	a0,8(sp)
    8000e334:	e82e                	sd	a1,16(sp)
    8000e336:	a009                	j	8000e338 <.LBB13_23+0x16>
    8000e338:	6542                	ld	a0,16(sp)
    8000e33a:	65a2                	ld	a1,8(sp)
    8000e33c:	7602                	ld	a2,32(sp)
    8000e33e:	66e2                	ld	a3,24(sp)
    8000e340:	6706                	ld	a4,64(sp)
    8000e342:	77e2                	ld	a5,56(sp)
    8000e344:	e5be                	sd	a5,200(sp)
    8000e346:	e9ba                	sd	a4,208(sp)
    8000e348:	edb6                	sd	a3,216(sp)
    8000e34a:	f1b2                	sd	a2,224(sp)
    8000e34c:	f5ae                	sd	a1,232(sp)
    8000e34e:	f9aa                	sd	a0,240(sp)

000000008000e350 <.LBB13_24>:
    8000e350:	0001a597          	auipc	a1,0x1a
    8000e354:	05058593          	addi	a1,a1,80 # 800283a0 <.L__unnamed_33>
    8000e358:	0928                	addi	a0,sp,152
    8000e35a:	4611                	li	a2,4
    8000e35c:	01b4                	addi	a3,sp,200
    8000e35e:	470d                	li	a4,3
    8000e360:	ffff7097          	auipc	ra,0xffff7
    8000e364:	10a080e7          	jalr	266(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8000e368:	a009                	j	8000e36a <.LBB13_24+0x1a>
    8000e36a:	0928                	addi	a0,sp,152
    8000e36c:	00010097          	auipc	ra,0x10
    8000e370:	9e0080e7          	jalr	-1568(ra) # 8001dd4c <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8000e374:	a009                	j	8000e376 <.LBB13_24+0x26>
        for proc in self.tasks.iter() {
    8000e376:	bdc9                	j	8000e248 <_ZN6kernel7process7manager11ProcManager9proc_dump17h983bd5c89559ec59E+0x34>

Disassembly of section .text._ZN6kernel7process7manager12kernel_stack17h27945807ba9b8a49E:

000000008000e378 <_ZN6kernel7process7manager12kernel_stack17h27945807ba9b8a49E>:
}

#[inline]
fn kernel_stack(pos: usize) -> usize {
    8000e378:	7179                	addi	sp,sp,-48
    8000e37a:	85aa                	mv	a1,a0
    8000e37c:	f42e                	sd	a1,40(sp)
    TRAMPOLINE - (pos + 1) * 5 * PGSIZE
    8000e37e:	00158513          	addi	a0,a1,1
    8000e382:	f02a                	sd	a0,32(sp)
    8000e384:	04b56863          	bltu	a0,a1,8000e3d4 <.LBB14_9>
    8000e388:	a009                	j	8000e38a <_ZN6kernel7process7manager12kernel_stack17h27945807ba9b8a49E+0x12>
    8000e38a:	7502                	ld	a0,32(sp)
    8000e38c:	00251593          	slli	a1,a0,0x2
    8000e390:	95aa                	add	a1,a1,a0
    8000e392:	ec2e                	sd	a1,24(sp)
    8000e394:	4595                	li	a1,5
    8000e396:	02b53533          	mulhu	a0,a0,a1
    8000e39a:	4581                	li	a1,0
    8000e39c:	04b51a63          	bne	a0,a1,8000e3f0 <.LBB14_11>
    8000e3a0:	a009                	j	8000e3a2 <_ZN6kernel7process7manager12kernel_stack17h27945807ba9b8a49E+0x2a>
    8000e3a2:	65e2                	ld	a1,24(sp)
    8000e3a4:	4505                	li	a0,1
    8000e3a6:	1552                	slli	a0,a0,0x34
    8000e3a8:	157d                	addi	a0,a0,-1
    8000e3aa:	8d6d                	and	a0,a0,a1
    8000e3ac:	00c59613          	slli	a2,a1,0xc
    8000e3b0:	e832                	sd	a2,16(sp)
    8000e3b2:	04b51e63          	bne	a0,a1,8000e40e <.LBB14_13>
    8000e3b6:	a009                	j	8000e3b8 <_ZN6kernel7process7manager12kernel_stack17h27945807ba9b8a49E+0x40>
    8000e3b8:	65c2                	ld	a1,16(sp)
    8000e3ba:	04000537          	lui	a0,0x4000
    8000e3be:	357d                	addiw	a0,a0,-1
    8000e3c0:	0532                	slli	a0,a0,0xc
    8000e3c2:	40b505b3          	sub	a1,a0,a1
    8000e3c6:	e42e                	sd	a1,8(sp)
    8000e3c8:	06b56263          	bltu	a0,a1,8000e42c <.LBB14_15>
    8000e3cc:	a009                	j	8000e3ce <_ZN6kernel7process7manager12kernel_stack17h27945807ba9b8a49E+0x56>
    8000e3ce:	6522                	ld	a0,8(sp)
    8000e3d0:	6145                	addi	sp,sp,48
    8000e3d2:	8082                	ret

000000008000e3d4 <.LBB14_9>:
    TRAMPOLINE - (pos + 1) * 5 * PGSIZE
    8000e3d4:	0001a517          	auipc	a0,0x1a
    8000e3d8:	d2c50513          	addi	a0,a0,-724 # 80028100 <str.0>

000000008000e3dc <.LBB14_10>:
    8000e3dc:	0001a617          	auipc	a2,0x1a
    8000e3e0:	00460613          	addi	a2,a2,4 # 800283e0 <.L__unnamed_34>
    8000e3e4:	45f1                	li	a1,28
    8000e3e6:	00014097          	auipc	ra,0x14
    8000e3ea:	e90080e7          	jalr	-368(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008000e3f0 <.LBB14_11>:
    8000e3f0:	0001a517          	auipc	a0,0x1a
    8000e3f4:	01050513          	addi	a0,a0,16 # 80028400 <str.1>

000000008000e3f8 <.LBB14_12>:
    8000e3f8:	0001a617          	auipc	a2,0x1a
    8000e3fc:	fe860613          	addi	a2,a2,-24 # 800283e0 <.L__unnamed_34>
    8000e400:	02100593          	li	a1,33
    8000e404:	00014097          	auipc	ra,0x14
    8000e408:	e72080e7          	jalr	-398(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008000e40e <.LBB14_13>:
    8000e40e:	0001a517          	auipc	a0,0x1a
    8000e412:	ff250513          	addi	a0,a0,-14 # 80028400 <str.1>

000000008000e416 <.LBB14_14>:
    8000e416:	0001a617          	auipc	a2,0x1a
    8000e41a:	fca60613          	addi	a2,a2,-54 # 800283e0 <.L__unnamed_34>
    8000e41e:	02100593          	li	a1,33
    8000e422:	00014097          	auipc	ra,0x14
    8000e426:	e54080e7          	jalr	-428(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008000e42c <.LBB14_15>:
    8000e42c:	0001a517          	auipc	a0,0x1a
    8000e430:	01450513          	addi	a0,a0,20 # 80028440 <str.2>

000000008000e434 <.LBB14_16>:
    8000e434:	0001a617          	auipc	a2,0x1a
    8000e438:	ff460613          	addi	a2,a2,-12 # 80028428 <.L__unnamed_35>
    8000e43c:	02100593          	li	a1,33
    8000e440:	00014097          	auipc	ra,0x14
    8000e444:	e36080e7          	jalr	-458(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN4core5clone5Clone10clone_from17h2b52fdc155b58fc3E:

000000008000e44a <_ZN4core5clone5Clone10clone_from17h2b52fdc155b58fc3E>:
    fn clone_from(&mut self, source: &Self) {
    8000e44a:	cc010113          	addi	sp,sp,-832
    8000e44e:	32113c23          	sd	ra,824(sp)
    8000e452:	e02a                	sd	a0,0(sp)
    8000e454:	32a13423          	sd	a0,808(sp)
    8000e458:	32b13823          	sd	a1,816(sp)
    8000e45c:	0028                	addi	a0,sp,8
        *self = source.clone()
    8000e45e:	ffff9097          	auipc	ra,0xffff9
    8000e462:	c50080e7          	jalr	-944(ra) # 800070ae <_ZN4core5clone5Clone5clone17h31f6bbc7b19c5f8bE>
    8000e466:	a009                	j	8000e468 <_ZN4core5clone5Clone10clone_from17h2b52fdc155b58fc3E+0x1e>
    8000e468:	6502                	ld	a0,0(sp)
    8000e46a:	ffff9097          	auipc	ra,0xffff9
    8000e46e:	922080e7          	jalr	-1758(ra) # 80006d8c <_ZN4core3ptr119drop_in_place$LT$$u5b$core..option..Option$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$$u3b$$u20$100$u5d$$GT$17ha293b69a65138838E>
    8000e472:	a009                	j	8000e474 <_ZN4core5clone5Clone10clone_from17h2b52fdc155b58fc3E+0x2a>
    8000e474:	6502                	ld	a0,0(sp)
    8000e476:	002c                	addi	a1,sp,8
    8000e478:	32000613          	li	a2,800
    8000e47c:	00017097          	auipc	ra,0x17
    8000e480:	c68080e7          	jalr	-920(ra) # 800250e4 <memcpy>
    }
    8000e484:	33813083          	ld	ra,824(sp)
    8000e488:	34010113          	addi	sp,sp,832
    8000e48c:	8082                	ret

Disassembly of section .text._ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h659c29622d59b861E:

000000008000e48e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h659c29622d59b861E>:
    pub const fn len(&self) -> usize {
    8000e48e:	7179                	addi	sp,sp,-48
    8000e490:	e42e                	sd	a1,8(sp)
    8000e492:	85aa                	mv	a1,a0
    8000e494:	6522                	ld	a0,8(sp)
    8000e496:	f02e                	sd	a1,32(sp)
    8000e498:	f42a                	sd	a0,40(sp)
            unsafe { crate::ptr::PtrRepr { const_ptr: self }.components.metadata }
    8000e49a:	e82e                	sd	a1,16(sp)
    8000e49c:	ec2a                	sd	a0,24(sp)
    }
    8000e49e:	6145                	addi	sp,sp,48
    8000e4a0:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$3map17h2838ee6761cb3f47E:

000000008000e4a2 <_ZN4core6option15Option$LT$T$GT$3map17h2838ee6761cb3f47E>:
    ///
    /// assert_eq!(maybe_some_len, Some(13));
    /// ```
    #[inline]
    #[stable(feature = "rust1", since = "1.0.0")]
    pub fn map<U, F: FnOnce(T) -> U>(self, f: F) -> Option<U> {
    8000e4a2:	7179                	addi	sp,sp,-48
    8000e4a4:	f406                	sd	ra,40(sp)
    8000e4a6:	c42a                	sw	a0,8(sp)
    8000e4a8:	c62e                	sw	a1,12(sp)
    8000e4aa:	4585                	li	a1,1
        match self {
            Some(x) => Some(f(x)),
    8000e4ac:	00b10fa3          	sb	a1,31(sp)
    8000e4b0:	1502                	slli	a0,a0,0x20
    8000e4b2:	9101                	srli	a0,a0,0x20
    8000e4b4:	4581                	li	a1,0
    8000e4b6:	00b50463          	beq	a0,a1,8000e4be <_ZN4core6option15Option$LT$T$GT$3map17h2838ee6761cb3f47E+0x1c>
    8000e4ba:	a009                	j	8000e4bc <_ZN4core6option15Option$LT$T$GT$3map17h2838ee6761cb3f47E+0x1a>
    8000e4bc:	a031                	j	8000e4c8 <_ZN4core6option15Option$LT$T$GT$3map17h2838ee6761cb3f47E+0x26>
    8000e4be:	00110537          	lui	a0,0x110
            None => None,
    8000e4c2:	ca2a                	sw	a0,20(sp)
        match self {
    8000e4c4:	a805                	j	8000e4f4 <_ZN4core6option15Option$LT$T$GT$3map17h2838ee6761cb3f47E+0x52>
    8000e4c6:	0000                	unimp
            Some(x) => Some(f(x)),
    8000e4c8:	4532                	lw	a0,12(sp)
    8000e4ca:	d22a                	sw	a0,36(sp)
    8000e4cc:	4581                	li	a1,0
    8000e4ce:	00b10fa3          	sb	a1,31(sp)
    8000e4d2:	cc2a                	sw	a0,24(sp)
    8000e4d4:	00010097          	auipc	ra,0x10
    8000e4d8:	96c080e7          	jalr	-1684(ra) # 8001de40 <_ZN81_$LT$core..str..iter..Chars$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17ha7c7da80d3c0bdbeE>
    8000e4dc:	1502                	slli	a0,a0,0x20
    8000e4de:	9101                	srli	a0,a0,0x20
    8000e4e0:	e02a                	sd	a0,0(sp)
    8000e4e2:	a009                	j	8000e4e4 <_ZN4core6option15Option$LT$T$GT$3map17h2838ee6761cb3f47E+0x42>
    8000e4e4:	6502                	ld	a0,0(sp)
    8000e4e6:	ca2a                	sw	a0,20(sp)
        }
    }
    8000e4e8:	a031                	j	8000e4f4 <_ZN4core6option15Option$LT$T$GT$3map17h2838ee6761cb3f47E+0x52>
    8000e4ea:	4552                	lw	a0,20(sp)
    8000e4ec:	70a2                	ld	ra,40(sp)
    8000e4ee:	6145                	addi	sp,sp,48
    8000e4f0:	8082                	ret
    8000e4f2:	bfe5                	j	8000e4ea <_ZN4core6option15Option$LT$T$GT$3map17h2838ee6761cb3f47E+0x48>
    8000e4f4:	01f14503          	lbu	a0,31(sp)
    8000e4f8:	8905                	andi	a0,a0,1
    8000e4fa:	fd65                	bnez	a0,8000e4f2 <_ZN4core6option15Option$LT$T$GT$3map17h2838ee6761cb3f47E+0x50>
    8000e4fc:	b7fd                	j	8000e4ea <_ZN4core6option15Option$LT$T$GT$3map17h2838ee6761cb3f47E+0x48>

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$3map17ha9a8f16b0aa2a3f1E:

000000008000e4fe <_ZN4core6option15Option$LT$T$GT$3map17ha9a8f16b0aa2a3f1E>:
    pub fn map<U, F: FnOnce(T) -> U>(self, f: F) -> Option<U> {
    8000e4fe:	7139                	addi	sp,sp,-64
    8000e500:	fc06                	sd	ra,56(sp)
    8000e502:	e02e                	sd	a1,0(sp)
    8000e504:	e42a                	sd	a0,8(sp)
    8000e506:	f42e                	sd	a1,40(sp)
    8000e508:	4585                	li	a1,1
            Some(x) => Some(f(x)),
    8000e50a:	02b103a3          	sb	a1,39(sp)
    8000e50e:	00a035b3          	snez	a1,a0
    8000e512:	4581                	li	a1,0
    8000e514:	00b50463          	beq	a0,a1,8000e51c <_ZN4core6option15Option$LT$T$GT$3map17ha9a8f16b0aa2a3f1E+0x1e>
    8000e518:	a009                	j	8000e51a <_ZN4core6option15Option$LT$T$GT$3map17ha9a8f16b0aa2a3f1E+0x1c>
    8000e51a:	a031                	j	8000e526 <_ZN4core6option15Option$LT$T$GT$3map17ha9a8f16b0aa2a3f1E+0x28>
    8000e51c:	4501                	li	a0,0
            None => None,
    8000e51e:	00a10ba3          	sb	a0,23(sp)
        match self {
    8000e522:	a805                	j	8000e552 <_ZN4core6option15Option$LT$T$GT$3map17ha9a8f16b0aa2a3f1E+0x54>
    8000e524:	0000                	unimp
            Some(x) => Some(f(x)),
    8000e526:	6502                	ld	a0,0(sp)
    8000e528:	65a2                	ld	a1,8(sp)
    8000e52a:	f82e                	sd	a1,48(sp)
    8000e52c:	4601                	li	a2,0
    8000e52e:	02c103a3          	sb	a2,39(sp)
    8000e532:	ec2e                	sd	a1,24(sp)
    8000e534:	ffff7097          	auipc	ra,0xffff7
    8000e538:	1a8080e7          	jalr	424(ra) # 800056dc <_ZN6kernel2fs3bio6BufLru14move_if_no_ref28_$u7b$$u7b$closure$u7d$$u7d$17h09361c1327a61982E>
    8000e53c:	a009                	j	8000e53e <_ZN4core6option15Option$LT$T$GT$3map17ha9a8f16b0aa2a3f1E+0x40>
    8000e53e:	4505                	li	a0,1
    8000e540:	00a10ba3          	sb	a0,23(sp)
    }
    8000e544:	a039                	j	8000e552 <_ZN4core6option15Option$LT$T$GT$3map17ha9a8f16b0aa2a3f1E+0x54>
    8000e546:	01714503          	lbu	a0,23(sp)
    8000e54a:	70e2                	ld	ra,56(sp)
    8000e54c:	6121                	addi	sp,sp,64
    8000e54e:	8082                	ret
    8000e550:	bfdd                	j	8000e546 <_ZN4core6option15Option$LT$T$GT$3map17ha9a8f16b0aa2a3f1E+0x48>
    8000e552:	02714503          	lbu	a0,39(sp)
    8000e556:	8905                	andi	a0,a0,1
    8000e558:	fd65                	bnez	a0,8000e550 <_ZN4core6option15Option$LT$T$GT$3map17ha9a8f16b0aa2a3f1E+0x52>
    8000e55a:	b7f5                	j	8000e546 <_ZN4core6option15Option$LT$T$GT$3map17ha9a8f16b0aa2a3f1E+0x48>

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$3map17ha9dd9632468a120eE:

000000008000e55c <_ZN4core6option15Option$LT$T$GT$3map17ha9dd9632468a120eE>:
    pub fn map<U, F: FnOnce(T) -> U>(self, f: F) -> Option<U> {
    8000e55c:	7139                	addi	sp,sp,-64
    8000e55e:	fc06                	sd	ra,56(sp)
    8000e560:	e42a                	sd	a0,8(sp)
    8000e562:	4585                	li	a1,1
            Some(x) => Some(f(x)),
    8000e564:	02b103a3          	sb	a1,39(sp)
    8000e568:	00a035b3          	snez	a1,a0
    8000e56c:	4581                	li	a1,0
    8000e56e:	00b50463          	beq	a0,a1,8000e576 <_ZN4core6option15Option$LT$T$GT$3map17ha9dd9632468a120eE+0x1a>
    8000e572:	a009                	j	8000e574 <_ZN4core6option15Option$LT$T$GT$3map17ha9dd9632468a120eE+0x18>
    8000e574:	a031                	j	8000e580 <_ZN4core6option15Option$LT$T$GT$3map17ha9dd9632468a120eE+0x24>
    8000e576:	4501                	li	a0,0
            None => None,
    8000e578:	00a10823          	sb	a0,16(sp)
        match self {
    8000e57c:	a82d                	j	8000e5b6 <_ZN4core6option15Option$LT$T$GT$3map17ha9dd9632468a120eE+0x5a>
    8000e57e:	0000                	unimp
            Some(x) => Some(f(x)),
    8000e580:	6522                	ld	a0,8(sp)
    8000e582:	f82a                	sd	a0,48(sp)
    8000e584:	4581                	li	a1,0
    8000e586:	02b103a3          	sb	a1,39(sp)
    8000e58a:	ec2a                	sd	a0,24(sp)
    8000e58c:	00001097          	auipc	ra,0x1
    8000e590:	afe080e7          	jalr	-1282(ra) # 8000f08a <_ZN4core6option19Option$LT$$RF$T$GT$6copied28_$u7b$$u7b$closure$u7d$$u7d$17ha236d2efbe19b7e0E>
    8000e594:	e02a                	sd	a0,0(sp)
    8000e596:	a009                	j	8000e598 <_ZN4core6option15Option$LT$T$GT$3map17ha9dd9632468a120eE+0x3c>
    8000e598:	6502                	ld	a0,0(sp)
    8000e59a:	00a108a3          	sb	a0,17(sp)
    8000e59e:	4505                	li	a0,1
    8000e5a0:	00a10823          	sb	a0,16(sp)
    }
    8000e5a4:	a809                	j	8000e5b6 <_ZN4core6option15Option$LT$T$GT$3map17ha9dd9632468a120eE+0x5a>
    8000e5a6:	01014503          	lbu	a0,16(sp)
    8000e5aa:	01110583          	lb	a1,17(sp)
    8000e5ae:	70e2                	ld	ra,56(sp)
    8000e5b0:	6121                	addi	sp,sp,64
    8000e5b2:	8082                	ret
    8000e5b4:	bfcd                	j	8000e5a6 <_ZN4core6option15Option$LT$T$GT$3map17ha9dd9632468a120eE+0x4a>
    8000e5b6:	02714503          	lbu	a0,39(sp)
    8000e5ba:	8905                	andi	a0,a0,1
    8000e5bc:	fd65                	bnez	a0,8000e5b4 <_ZN4core6option15Option$LT$T$GT$3map17ha9dd9632468a120eE+0x58>
    8000e5be:	b7e5                	j	8000e5a6 <_ZN4core6option15Option$LT$T$GT$3map17ha9dd9632468a120eE+0x4a>

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$3map17hd4472e66f8c522f7E:

000000008000e5c0 <_ZN4core6option15Option$LT$T$GT$3map17hd4472e66f8c522f7E>:
    pub fn map<U, F: FnOnce(T) -> U>(self, f: F) -> Option<U> {
    8000e5c0:	7139                	addi	sp,sp,-64
    8000e5c2:	fc06                	sd	ra,56(sp)
    8000e5c4:	e02e                	sd	a1,0(sp)
    8000e5c6:	e42a                	sd	a0,8(sp)
    8000e5c8:	f42e                	sd	a1,40(sp)
    8000e5ca:	4585                	li	a1,1
            Some(x) => Some(f(x)),
    8000e5cc:	02b103a3          	sb	a1,39(sp)
    8000e5d0:	00a035b3          	snez	a1,a0
    8000e5d4:	4581                	li	a1,0
    8000e5d6:	00b50463          	beq	a0,a1,8000e5de <_ZN4core6option15Option$LT$T$GT$3map17hd4472e66f8c522f7E+0x1e>
    8000e5da:	a009                	j	8000e5dc <_ZN4core6option15Option$LT$T$GT$3map17hd4472e66f8c522f7E+0x1c>
    8000e5dc:	a031                	j	8000e5e8 <_ZN4core6option15Option$LT$T$GT$3map17hd4472e66f8c522f7E+0x28>
    8000e5de:	4501                	li	a0,0
            None => None,
    8000e5e0:	00a10ba3          	sb	a0,23(sp)
        match self {
    8000e5e4:	a805                	j	8000e614 <_ZN4core6option15Option$LT$T$GT$3map17hd4472e66f8c522f7E+0x54>
    8000e5e6:	0000                	unimp
            Some(x) => Some(f(x)),
    8000e5e8:	6502                	ld	a0,0(sp)
    8000e5ea:	65a2                	ld	a1,8(sp)
    8000e5ec:	f82e                	sd	a1,48(sp)
    8000e5ee:	4601                	li	a2,0
    8000e5f0:	02c103a3          	sb	a2,39(sp)
    8000e5f4:	ec2e                	sd	a1,24(sp)
    8000e5f6:	ffff7097          	auipc	ra,0xffff7
    8000e5fa:	0f6080e7          	jalr	246(ra) # 800056ec <_ZN6kernel2fs3bio6BufLru14move_if_no_ref28_$u7b$$u7b$closure$u7d$$u7d$17h0a4afebccbc6cf13E>
    8000e5fe:	a009                	j	8000e600 <_ZN4core6option15Option$LT$T$GT$3map17hd4472e66f8c522f7E+0x40>
    8000e600:	4505                	li	a0,1
    8000e602:	00a10ba3          	sb	a0,23(sp)
    }
    8000e606:	a039                	j	8000e614 <_ZN4core6option15Option$LT$T$GT$3map17hd4472e66f8c522f7E+0x54>
    8000e608:	01714503          	lbu	a0,23(sp)
    8000e60c:	70e2                	ld	ra,56(sp)
    8000e60e:	6121                	addi	sp,sp,64
    8000e610:	8082                	ret
    8000e612:	bfdd                	j	8000e608 <_ZN4core6option15Option$LT$T$GT$3map17hd4472e66f8c522f7E+0x48>
    8000e614:	02714503          	lbu	a0,39(sp)
    8000e618:	8905                	andi	a0,a0,1
    8000e61a:	fd65                	bnez	a0,8000e612 <_ZN4core6option15Option$LT$T$GT$3map17hd4472e66f8c522f7E+0x52>
    8000e61c:	b7f5                	j	8000e608 <_ZN4core6option15Option$LT$T$GT$3map17hd4472e66f8c522f7E+0x48>

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$3map17hf813a527d3b93241E:

000000008000e61e <_ZN4core6option15Option$LT$T$GT$3map17hf813a527d3b93241E>:
    pub fn map<U, F: FnOnce(T) -> U>(self, f: F) -> Option<U> {
    8000e61e:	7139                	addi	sp,sp,-64
    8000e620:	fc06                	sd	ra,56(sp)
    8000e622:	e02e                	sd	a1,0(sp)
    8000e624:	e42a                	sd	a0,8(sp)
    8000e626:	f42e                	sd	a1,40(sp)
    8000e628:	4585                	li	a1,1
            Some(x) => Some(f(x)),
    8000e62a:	02b103a3          	sb	a1,39(sp)
    8000e62e:	00a035b3          	snez	a1,a0
    8000e632:	4581                	li	a1,0
    8000e634:	00b50463          	beq	a0,a1,8000e63c <_ZN4core6option15Option$LT$T$GT$3map17hf813a527d3b93241E+0x1e>
    8000e638:	a009                	j	8000e63a <_ZN4core6option15Option$LT$T$GT$3map17hf813a527d3b93241E+0x1c>
    8000e63a:	a031                	j	8000e646 <_ZN4core6option15Option$LT$T$GT$3map17hf813a527d3b93241E+0x28>
    8000e63c:	4501                	li	a0,0
            None => None,
    8000e63e:	00a10ba3          	sb	a0,23(sp)
        match self {
    8000e642:	a805                	j	8000e672 <_ZN4core6option15Option$LT$T$GT$3map17hf813a527d3b93241E+0x54>
    8000e644:	0000                	unimp
            Some(x) => Some(f(x)),
    8000e646:	6502                	ld	a0,0(sp)
    8000e648:	65a2                	ld	a1,8(sp)
    8000e64a:	f82e                	sd	a1,48(sp)
    8000e64c:	4601                	li	a2,0
    8000e64e:	02c103a3          	sb	a2,39(sp)
    8000e652:	ec2e                	sd	a1,24(sp)
    8000e654:	ffff7097          	auipc	ra,0xffff7
    8000e658:	0a8080e7          	jalr	168(ra) # 800056fc <_ZN6kernel2fs3bio6BufLru14move_if_no_ref28_$u7b$$u7b$closure$u7d$$u7d$17h304675452a5a98dfE>
    8000e65c:	a009                	j	8000e65e <_ZN4core6option15Option$LT$T$GT$3map17hf813a527d3b93241E+0x40>
    8000e65e:	4505                	li	a0,1
    8000e660:	00a10ba3          	sb	a0,23(sp)
    }
    8000e664:	a039                	j	8000e672 <_ZN4core6option15Option$LT$T$GT$3map17hf813a527d3b93241E+0x54>
    8000e666:	01714503          	lbu	a0,23(sp)
    8000e66a:	70e2                	ld	ra,56(sp)
    8000e66c:	6121                	addi	sp,sp,64
    8000e66e:	8082                	ret
    8000e670:	bfdd                	j	8000e666 <_ZN4core6option15Option$LT$T$GT$3map17hf813a527d3b93241E+0x48>
    8000e672:	02714503          	lbu	a0,39(sp)
    8000e676:	8905                	andi	a0,a0,1
    8000e678:	fd65                	bnez	a0,8000e670 <_ZN4core6option15Option$LT$T$GT$3map17hf813a527d3b93241E+0x52>
    8000e67a:	b7f5                	j	8000e666 <_ZN4core6option15Option$LT$T$GT$3map17hf813a527d3b93241E+0x48>

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$4take17h2bb26f7cfbd48ae3E:

000000008000e67c <_ZN4core6option15Option$LT$T$GT$4take17h2bb26f7cfbd48ae3E>:
    /// assert_eq!(x, None);
    /// assert_eq!(y, None);
    /// ```
    #[inline]
    #[stable(feature = "rust1", since = "1.0.0")]
    pub fn take(&mut self) -> Option<T> {
    8000e67c:	1101                	addi	sp,sp,-32
    8000e67e:	ec06                	sd	ra,24(sp)
    8000e680:	e82a                	sd	a0,16(sp)
        mem::take(self)
    8000e682:	0000f097          	auipc	ra,0xf
    8000e686:	b0e080e7          	jalr	-1266(ra) # 8001d190 <_ZN4core3mem4take17h5215bf07db4a9cdbE>
    8000e68a:	e42a                	sd	a0,8(sp)
    8000e68c:	a009                	j	8000e68e <_ZN4core6option15Option$LT$T$GT$4take17h2bb26f7cfbd48ae3E+0x12>
    }
    8000e68e:	6522                	ld	a0,8(sp)
    8000e690:	60e2                	ld	ra,24(sp)
    8000e692:	6105                	addi	sp,sp,32
    8000e694:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$4take17h3f0477f04f3bf4c3E:

000000008000e696 <_ZN4core6option15Option$LT$T$GT$4take17h3f0477f04f3bf4c3E>:
    pub fn take(&mut self) -> Option<T> {
    8000e696:	1101                	addi	sp,sp,-32
    8000e698:	ec06                	sd	ra,24(sp)
    8000e69a:	e82a                	sd	a0,16(sp)
        mem::take(self)
    8000e69c:	0000f097          	auipc	ra,0xf
    8000e6a0:	b80080e7          	jalr	-1152(ra) # 8001d21c <_ZN4core3mem4take17ha8b178c6c6bab41fE>
    8000e6a4:	e02a                	sd	a0,0(sp)
    8000e6a6:	e42e                	sd	a1,8(sp)
    8000e6a8:	a009                	j	8000e6aa <_ZN4core6option15Option$LT$T$GT$4take17h3f0477f04f3bf4c3E+0x14>
    }
    8000e6aa:	65a2                	ld	a1,8(sp)
    8000e6ac:	6502                	ld	a0,0(sp)
    8000e6ae:	60e2                	ld	ra,24(sp)
    8000e6b0:	6105                	addi	sp,sp,32
    8000e6b2:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$4take17h80340c04cecd09beE:

000000008000e6b4 <_ZN4core6option15Option$LT$T$GT$4take17h80340c04cecd09beE>:
    pub fn take(&mut self) -> Option<T> {
    8000e6b4:	1101                	addi	sp,sp,-32
    8000e6b6:	ec06                	sd	ra,24(sp)
    8000e6b8:	e82a                	sd	a0,16(sp)
        mem::take(self)
    8000e6ba:	0000f097          	auipc	ra,0xf
    8000e6be:	b2e080e7          	jalr	-1234(ra) # 8001d1e8 <_ZN4core3mem4take17ha20fa5de2e41ca09E>
    8000e6c2:	e02a                	sd	a0,0(sp)
    8000e6c4:	e42e                	sd	a1,8(sp)
    8000e6c6:	a009                	j	8000e6c8 <_ZN4core6option15Option$LT$T$GT$4take17h80340c04cecd09beE+0x14>
    }
    8000e6c8:	65a2                	ld	a1,8(sp)
    8000e6ca:	6502                	ld	a0,0(sp)
    8000e6cc:	60e2                	ld	ra,24(sp)
    8000e6ce:	6105                	addi	sp,sp,32
    8000e6d0:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$4take17h80e6997975665939E:

000000008000e6d2 <_ZN4core6option15Option$LT$T$GT$4take17h80e6997975665939E>:
    pub fn take(&mut self) -> Option<T> {
    8000e6d2:	1101                	addi	sp,sp,-32
    8000e6d4:	ec06                	sd	ra,24(sp)
    8000e6d6:	e82a                	sd	a0,16(sp)
        mem::take(self)
    8000e6d8:	0000f097          	auipc	ra,0xf
    8000e6dc:	ae4080e7          	jalr	-1308(ra) # 8001d1bc <_ZN4core3mem4take17h9920b9ae1a5c3368E>
    8000e6e0:	e42a                	sd	a0,8(sp)
    8000e6e2:	a009                	j	8000e6e4 <_ZN4core6option15Option$LT$T$GT$4take17h80e6997975665939E+0x12>
    }
    8000e6e4:	6522                	ld	a0,8(sp)
    8000e6e6:	60e2                	ld	ra,24(sp)
    8000e6e8:	6105                	addi	sp,sp,32
    8000e6ea:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$5ok_or17h436768d7af37ca52E:

000000008000e6ec <_ZN4core6option15Option$LT$T$GT$5ok_or17h436768d7af37ca52E>:
    pub fn ok_or<E>(self, err: E) -> Result<T, E> {
    8000e6ec:	715d                	addi	sp,sp,-80
    8000e6ee:	e43a                	sd	a4,8(sp)
    8000e6f0:	e836                	sd	a3,16(sp)
    8000e6f2:	ec2a                	sd	a0,24(sp)
    8000e6f4:	f02e                	sd	a1,32(sp)
    8000e6f6:	f432                	sd	a2,40(sp)
    8000e6f8:	fc36                	sd	a3,56(sp)
    8000e6fa:	e0ba                	sd	a4,64(sp)
    8000e6fc:	4505                	li	a0,1
            Some(v) => Ok(v),
    8000e6fe:	02a10ba3          	sb	a0,55(sp)
    8000e702:	4501                	li	a0,0
    8000e704:	00a58463          	beq	a1,a0,8000e70c <_ZN4core6option15Option$LT$T$GT$5ok_or17h436768d7af37ca52E+0x20>
    8000e708:	a009                	j	8000e70a <_ZN4core6option15Option$LT$T$GT$5ok_or17h436768d7af37ca52E+0x1e>
    8000e70a:	a829                	j	8000e724 <_ZN4core6option15Option$LT$T$GT$5ok_or17h436768d7af37ca52E+0x38>
    8000e70c:	65e2                	ld	a1,24(sp)
    8000e70e:	6522                	ld	a0,8(sp)
    8000e710:	6642                	ld	a2,16(sp)
    8000e712:	4681                	li	a3,0
            None => Err(err),
    8000e714:	02d10ba3          	sb	a3,55(sp)
    8000e718:	e590                	sd	a2,8(a1)
    8000e71a:	e988                	sd	a0,16(a1)
    8000e71c:	4505                	li	a0,1
    8000e71e:	e188                	sd	a0,0(a1)
        match self {
    8000e720:	a809                	j	8000e732 <_ZN4core6option15Option$LT$T$GT$5ok_or17h436768d7af37ca52E+0x46>
    8000e722:	0000                	unimp
            Some(v) => Ok(v),
    8000e724:	65e2                	ld	a1,24(sp)
    8000e726:	7522                	ld	a0,40(sp)
    8000e728:	e4aa                	sd	a0,72(sp)
    8000e72a:	e588                	sd	a0,8(a1)
    8000e72c:	4501                	li	a0,0
    8000e72e:	e188                	sd	a0,0(a1)
        match self {
    8000e730:	a009                	j	8000e732 <_ZN4core6option15Option$LT$T$GT$5ok_or17h436768d7af37ca52E+0x46>
    }
    8000e732:	03714503          	lbu	a0,55(sp)
    8000e736:	8905                	andi	a0,a0,1
    8000e738:	e501                	bnez	a0,8000e740 <_ZN4core6option15Option$LT$T$GT$5ok_or17h436768d7af37ca52E+0x54>
    8000e73a:	a009                	j	8000e73c <_ZN4core6option15Option$LT$T$GT$5ok_or17h436768d7af37ca52E+0x50>
    8000e73c:	6161                	addi	sp,sp,80
    8000e73e:	8082                	ret
    8000e740:	bff5                	j	8000e73c <_ZN4core6option15Option$LT$T$GT$5ok_or17h436768d7af37ca52E+0x50>

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$5ok_or17h53f933033be30818E:

000000008000e742 <_ZN4core6option15Option$LT$T$GT$5ok_or17h53f933033be30818E>:
    pub fn ok_or<E>(self, err: E) -> Result<T, E> {
    8000e742:	7179                	addi	sp,sp,-48
    8000e744:	e42a                	sd	a0,8(sp)
    8000e746:	4585                	li	a1,1
            Some(v) => Ok(v),
    8000e748:	00b10fa3          	sb	a1,31(sp)
    8000e74c:	00a035b3          	snez	a1,a0
    8000e750:	4581                	li	a1,0
    8000e752:	00b50463          	beq	a0,a1,8000e75a <_ZN4core6option15Option$LT$T$GT$5ok_or17h53f933033be30818E+0x18>
    8000e756:	a009                	j	8000e758 <_ZN4core6option15Option$LT$T$GT$5ok_or17h53f933033be30818E+0x16>
    8000e758:	a039                	j	8000e766 <_ZN4core6option15Option$LT$T$GT$5ok_or17h53f933033be30818E+0x24>
    8000e75a:	4501                	li	a0,0
            None => Err(err),
    8000e75c:	00a10fa3          	sb	a0,31(sp)
    8000e760:	e82a                	sd	a0,16(sp)
        match self {
    8000e762:	a031                	j	8000e76e <_ZN4core6option15Option$LT$T$GT$5ok_or17h53f933033be30818E+0x2c>
    8000e764:	0000                	unimp
            Some(v) => Ok(v),
    8000e766:	6522                	ld	a0,8(sp)
    8000e768:	f42a                	sd	a0,40(sp)
    8000e76a:	e82a                	sd	a0,16(sp)
        match self {
    8000e76c:	a009                	j	8000e76e <_ZN4core6option15Option$LT$T$GT$5ok_or17h53f933033be30818E+0x2c>
    }
    8000e76e:	01f14503          	lbu	a0,31(sp)
    8000e772:	8905                	andi	a0,a0,1
    8000e774:	e509                	bnez	a0,8000e77e <_ZN4core6option15Option$LT$T$GT$5ok_or17h53f933033be30818E+0x3c>
    8000e776:	a009                	j	8000e778 <_ZN4core6option15Option$LT$T$GT$5ok_or17h53f933033be30818E+0x36>
    8000e778:	6542                	ld	a0,16(sp)
    8000e77a:	6145                	addi	sp,sp,48
    8000e77c:	8082                	ret
    8000e77e:	bfed                	j	8000e778 <_ZN4core6option15Option$LT$T$GT$5ok_or17h53f933033be30818E+0x36>

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$5ok_or17h630e1a004ee31f6cE:

000000008000e780 <_ZN4core6option15Option$LT$T$GT$5ok_or17h630e1a004ee31f6cE>:
    pub fn ok_or<E>(self, err: E) -> Result<T, E> {
    8000e780:	7139                	addi	sp,sp,-64
    8000e782:	e42a                	sd	a0,8(sp)
    8000e784:	e82e                	sd	a1,16(sp)
    8000e786:	4585                	li	a1,1
            Some(v) => Ok(v),
    8000e788:	02b107a3          	sb	a1,47(sp)
    8000e78c:	4581                	li	a1,0
    8000e78e:	00b50463          	beq	a0,a1,8000e796 <_ZN4core6option15Option$LT$T$GT$5ok_or17h630e1a004ee31f6cE+0x16>
    8000e792:	a009                	j	8000e794 <_ZN4core6option15Option$LT$T$GT$5ok_or17h630e1a004ee31f6cE+0x14>
    8000e794:	a801                	j	8000e7a4 <_ZN4core6option15Option$LT$T$GT$5ok_or17h630e1a004ee31f6cE+0x24>
    8000e796:	4501                	li	a0,0
            None => Err(err),
    8000e798:	02a107a3          	sb	a0,47(sp)
    8000e79c:	4505                	li	a0,1
    8000e79e:	ec2a                	sd	a0,24(sp)
        match self {
    8000e7a0:	a801                	j	8000e7b0 <_ZN4core6option15Option$LT$T$GT$5ok_or17h630e1a004ee31f6cE+0x30>
    8000e7a2:	0000                	unimp
            Some(v) => Ok(v),
    8000e7a4:	6542                	ld	a0,16(sp)
    8000e7a6:	fc2a                	sd	a0,56(sp)
    8000e7a8:	f02a                	sd	a0,32(sp)
    8000e7aa:	4501                	li	a0,0
    8000e7ac:	ec2a                	sd	a0,24(sp)
        match self {
    8000e7ae:	a009                	j	8000e7b0 <_ZN4core6option15Option$LT$T$GT$5ok_or17h630e1a004ee31f6cE+0x30>
    }
    8000e7b0:	02f14503          	lbu	a0,47(sp)
    8000e7b4:	8905                	andi	a0,a0,1
    8000e7b6:	e511                	bnez	a0,8000e7c2 <_ZN4core6option15Option$LT$T$GT$5ok_or17h630e1a004ee31f6cE+0x42>
    8000e7b8:	a009                	j	8000e7ba <_ZN4core6option15Option$LT$T$GT$5ok_or17h630e1a004ee31f6cE+0x3a>
    8000e7ba:	6562                	ld	a0,24(sp)
    8000e7bc:	7582                	ld	a1,32(sp)
    8000e7be:	6121                	addi	sp,sp,64
    8000e7c0:	8082                	ret
    8000e7c2:	bfe5                	j	8000e7ba <_ZN4core6option15Option$LT$T$GT$5ok_or17h630e1a004ee31f6cE+0x3a>

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$5ok_or17h693a281cfb0e5e0dE:

000000008000e7c4 <_ZN4core6option15Option$LT$T$GT$5ok_or17h693a281cfb0e5e0dE>:
    pub fn ok_or<E>(self, err: E) -> Result<T, E> {
    8000e7c4:	7179                	addi	sp,sp,-48
    8000e7c6:	e42a                	sd	a0,8(sp)
    8000e7c8:	4585                	li	a1,1
            Some(v) => Ok(v),
    8000e7ca:	00b10fa3          	sb	a1,31(sp)
    8000e7ce:	00a035b3          	snez	a1,a0
    8000e7d2:	4581                	li	a1,0
    8000e7d4:	00b50463          	beq	a0,a1,8000e7dc <_ZN4core6option15Option$LT$T$GT$5ok_or17h693a281cfb0e5e0dE+0x18>
    8000e7d8:	a009                	j	8000e7da <_ZN4core6option15Option$LT$T$GT$5ok_or17h693a281cfb0e5e0dE+0x16>
    8000e7da:	a039                	j	8000e7e8 <_ZN4core6option15Option$LT$T$GT$5ok_or17h693a281cfb0e5e0dE+0x24>
    8000e7dc:	4501                	li	a0,0
            None => Err(err),
    8000e7de:	00a10fa3          	sb	a0,31(sp)
    8000e7e2:	e82a                	sd	a0,16(sp)
        match self {
    8000e7e4:	a031                	j	8000e7f0 <_ZN4core6option15Option$LT$T$GT$5ok_or17h693a281cfb0e5e0dE+0x2c>
    8000e7e6:	0000                	unimp
            Some(v) => Ok(v),
    8000e7e8:	6522                	ld	a0,8(sp)
    8000e7ea:	f42a                	sd	a0,40(sp)
    8000e7ec:	e82a                	sd	a0,16(sp)
        match self {
    8000e7ee:	a009                	j	8000e7f0 <_ZN4core6option15Option$LT$T$GT$5ok_or17h693a281cfb0e5e0dE+0x2c>
    }
    8000e7f0:	01f14503          	lbu	a0,31(sp)
    8000e7f4:	8905                	andi	a0,a0,1
    8000e7f6:	e509                	bnez	a0,8000e800 <_ZN4core6option15Option$LT$T$GT$5ok_or17h693a281cfb0e5e0dE+0x3c>
    8000e7f8:	a009                	j	8000e7fa <_ZN4core6option15Option$LT$T$GT$5ok_or17h693a281cfb0e5e0dE+0x36>
    8000e7fa:	6542                	ld	a0,16(sp)
    8000e7fc:	6145                	addi	sp,sp,48
    8000e7fe:	8082                	ret
    8000e800:	bfed                	j	8000e7fa <_ZN4core6option15Option$LT$T$GT$5ok_or17h693a281cfb0e5e0dE+0x36>

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$5ok_or17h7a4d5ef4770297f6E:

000000008000e802 <_ZN4core6option15Option$LT$T$GT$5ok_or17h7a4d5ef4770297f6E>:
    pub fn ok_or<E>(self, err: E) -> Result<T, E> {
    8000e802:	715d                	addi	sp,sp,-80
    8000e804:	e43a                	sd	a4,8(sp)
    8000e806:	e836                	sd	a3,16(sp)
    8000e808:	ec2a                	sd	a0,24(sp)
    8000e80a:	f02e                	sd	a1,32(sp)
    8000e80c:	f432                	sd	a2,40(sp)
    8000e80e:	fc36                	sd	a3,56(sp)
    8000e810:	e0ba                	sd	a4,64(sp)
    8000e812:	4505                	li	a0,1
            Some(v) => Ok(v),
    8000e814:	02a10ba3          	sb	a0,55(sp)
    8000e818:	4501                	li	a0,0
    8000e81a:	00a58463          	beq	a1,a0,8000e822 <_ZN4core6option15Option$LT$T$GT$5ok_or17h7a4d5ef4770297f6E+0x20>
    8000e81e:	a009                	j	8000e820 <_ZN4core6option15Option$LT$T$GT$5ok_or17h7a4d5ef4770297f6E+0x1e>
    8000e820:	a829                	j	8000e83a <_ZN4core6option15Option$LT$T$GT$5ok_or17h7a4d5ef4770297f6E+0x38>
    8000e822:	65e2                	ld	a1,24(sp)
    8000e824:	6522                	ld	a0,8(sp)
    8000e826:	6642                	ld	a2,16(sp)
    8000e828:	4681                	li	a3,0
            None => Err(err),
    8000e82a:	02d10ba3          	sb	a3,55(sp)
    8000e82e:	e590                	sd	a2,8(a1)
    8000e830:	e988                	sd	a0,16(a1)
    8000e832:	4505                	li	a0,1
    8000e834:	e188                	sd	a0,0(a1)
        match self {
    8000e836:	a809                	j	8000e848 <_ZN4core6option15Option$LT$T$GT$5ok_or17h7a4d5ef4770297f6E+0x46>
    8000e838:	0000                	unimp
            Some(v) => Ok(v),
    8000e83a:	65e2                	ld	a1,24(sp)
    8000e83c:	7522                	ld	a0,40(sp)
    8000e83e:	e4aa                	sd	a0,72(sp)
    8000e840:	e588                	sd	a0,8(a1)
    8000e842:	4501                	li	a0,0
    8000e844:	e188                	sd	a0,0(a1)
        match self {
    8000e846:	a009                	j	8000e848 <_ZN4core6option15Option$LT$T$GT$5ok_or17h7a4d5ef4770297f6E+0x46>
    }
    8000e848:	03714503          	lbu	a0,55(sp)
    8000e84c:	8905                	andi	a0,a0,1
    8000e84e:	e501                	bnez	a0,8000e856 <_ZN4core6option15Option$LT$T$GT$5ok_or17h7a4d5ef4770297f6E+0x54>
    8000e850:	a009                	j	8000e852 <_ZN4core6option15Option$LT$T$GT$5ok_or17h7a4d5ef4770297f6E+0x50>
    8000e852:	6161                	addi	sp,sp,80
    8000e854:	8082                	ret
    8000e856:	bff5                	j	8000e852 <_ZN4core6option15Option$LT$T$GT$5ok_or17h7a4d5ef4770297f6E+0x50>

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$5ok_or17h8c89aa4278cdb5d9E:

000000008000e858 <_ZN4core6option15Option$LT$T$GT$5ok_or17h8c89aa4278cdb5d9E>:
    pub fn ok_or<E>(self, err: E) -> Result<T, E> {
    8000e858:	7179                	addi	sp,sp,-48
    8000e85a:	e42a                	sd	a0,8(sp)
    8000e85c:	4585                	li	a1,1
            Some(v) => Ok(v),
    8000e85e:	00b10fa3          	sb	a1,31(sp)
    8000e862:	00a035b3          	snez	a1,a0
    8000e866:	4581                	li	a1,0
    8000e868:	00b50463          	beq	a0,a1,8000e870 <_ZN4core6option15Option$LT$T$GT$5ok_or17h8c89aa4278cdb5d9E+0x18>
    8000e86c:	a009                	j	8000e86e <_ZN4core6option15Option$LT$T$GT$5ok_or17h8c89aa4278cdb5d9E+0x16>
    8000e86e:	a039                	j	8000e87c <_ZN4core6option15Option$LT$T$GT$5ok_or17h8c89aa4278cdb5d9E+0x24>
    8000e870:	4501                	li	a0,0
            None => Err(err),
    8000e872:	00a10fa3          	sb	a0,31(sp)
    8000e876:	e82a                	sd	a0,16(sp)
        match self {
    8000e878:	a031                	j	8000e884 <_ZN4core6option15Option$LT$T$GT$5ok_or17h8c89aa4278cdb5d9E+0x2c>
    8000e87a:	0000                	unimp
            Some(v) => Ok(v),
    8000e87c:	6522                	ld	a0,8(sp)
    8000e87e:	f42a                	sd	a0,40(sp)
    8000e880:	e82a                	sd	a0,16(sp)
        match self {
    8000e882:	a009                	j	8000e884 <_ZN4core6option15Option$LT$T$GT$5ok_or17h8c89aa4278cdb5d9E+0x2c>
    }
    8000e884:	01f14503          	lbu	a0,31(sp)
    8000e888:	8905                	andi	a0,a0,1
    8000e88a:	e509                	bnez	a0,8000e894 <_ZN4core6option15Option$LT$T$GT$5ok_or17h8c89aa4278cdb5d9E+0x3c>
    8000e88c:	a009                	j	8000e88e <_ZN4core6option15Option$LT$T$GT$5ok_or17h8c89aa4278cdb5d9E+0x36>
    8000e88e:	6542                	ld	a0,16(sp)
    8000e890:	6145                	addi	sp,sp,48
    8000e892:	8082                	ret
    8000e894:	bfed                	j	8000e88e <_ZN4core6option15Option$LT$T$GT$5ok_or17h8c89aa4278cdb5d9E+0x36>

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$5ok_or17hac03a53b0754fc14E:

000000008000e896 <_ZN4core6option15Option$LT$T$GT$5ok_or17hac03a53b0754fc14E>:
    pub fn ok_or<E>(self, err: E) -> Result<T, E> {
    8000e896:	7139                	addi	sp,sp,-64
    8000e898:	e03a                	sd	a4,0(sp)
    8000e89a:	e436                	sd	a3,8(sp)
    8000e89c:	e82a                	sd	a0,16(sp)
    8000e89e:	cc2e                	sw	a1,24(sp)
    8000e8a0:	ce32                	sw	a2,28(sp)
    8000e8a2:	f436                	sd	a3,40(sp)
    8000e8a4:	f83a                	sd	a4,48(sp)
    8000e8a6:	4505                	li	a0,1
            Some(v) => Ok(v),
    8000e8a8:	02a103a3          	sb	a0,39(sp)
    8000e8ac:	02059513          	slli	a0,a1,0x20
    8000e8b0:	9101                	srli	a0,a0,0x20
    8000e8b2:	4581                	li	a1,0
    8000e8b4:	00b50463          	beq	a0,a1,8000e8bc <_ZN4core6option15Option$LT$T$GT$5ok_or17hac03a53b0754fc14E+0x26>
    8000e8b8:	a009                	j	8000e8ba <_ZN4core6option15Option$LT$T$GT$5ok_or17hac03a53b0754fc14E+0x24>
    8000e8ba:	a829                	j	8000e8d4 <_ZN4core6option15Option$LT$T$GT$5ok_or17hac03a53b0754fc14E+0x3e>
    8000e8bc:	65c2                	ld	a1,16(sp)
    8000e8be:	6502                	ld	a0,0(sp)
    8000e8c0:	6622                	ld	a2,8(sp)
    8000e8c2:	4681                	li	a3,0
            None => Err(err),
    8000e8c4:	02d103a3          	sb	a3,39(sp)
    8000e8c8:	e590                	sd	a2,8(a1)
    8000e8ca:	e988                	sd	a0,16(a1)
    8000e8cc:	4505                	li	a0,1
    8000e8ce:	c188                	sw	a0,0(a1)
        match self {
    8000e8d0:	a809                	j	8000e8e2 <_ZN4core6option15Option$LT$T$GT$5ok_or17hac03a53b0754fc14E+0x4c>
    8000e8d2:	0000                	unimp
            Some(v) => Ok(v),
    8000e8d4:	65c2                	ld	a1,16(sp)
    8000e8d6:	4572                	lw	a0,28(sp)
    8000e8d8:	de2a                	sw	a0,60(sp)
    8000e8da:	c1c8                	sw	a0,4(a1)
    8000e8dc:	4501                	li	a0,0
    8000e8de:	c188                	sw	a0,0(a1)
        match self {
    8000e8e0:	a009                	j	8000e8e2 <_ZN4core6option15Option$LT$T$GT$5ok_or17hac03a53b0754fc14E+0x4c>
    }
    8000e8e2:	02714503          	lbu	a0,39(sp)
    8000e8e6:	8905                	andi	a0,a0,1
    8000e8e8:	e501                	bnez	a0,8000e8f0 <_ZN4core6option15Option$LT$T$GT$5ok_or17hac03a53b0754fc14E+0x5a>
    8000e8ea:	a009                	j	8000e8ec <_ZN4core6option15Option$LT$T$GT$5ok_or17hac03a53b0754fc14E+0x56>
    8000e8ec:	6121                	addi	sp,sp,64
    8000e8ee:	8082                	ret
    8000e8f0:	bff5                	j	8000e8ec <_ZN4core6option15Option$LT$T$GT$5ok_or17hac03a53b0754fc14E+0x56>

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$5ok_or17hc525e8e997fb4842E:

000000008000e8f2 <_ZN4core6option15Option$LT$T$GT$5ok_or17hc525e8e997fb4842E>:
    pub fn ok_or<E>(self, err: E) -> Result<T, E> {
    8000e8f2:	7139                	addi	sp,sp,-64
    8000e8f4:	e036                	sd	a3,0(sp)
    8000e8f6:	e432                	sd	a2,8(sp)
    8000e8f8:	e82a                	sd	a0,16(sp)
    8000e8fa:	ec2e                	sd	a1,24(sp)
    8000e8fc:	f432                	sd	a2,40(sp)
    8000e8fe:	f836                	sd	a3,48(sp)
    8000e900:	4505                	li	a0,1
            Some(v) => Ok(v),
    8000e902:	02a103a3          	sb	a0,39(sp)
    8000e906:	00b03533          	snez	a0,a1
    8000e90a:	4501                	li	a0,0
    8000e90c:	00a58463          	beq	a1,a0,8000e914 <_ZN4core6option15Option$LT$T$GT$5ok_or17hc525e8e997fb4842E+0x22>
    8000e910:	a009                	j	8000e912 <_ZN4core6option15Option$LT$T$GT$5ok_or17hc525e8e997fb4842E+0x20>
    8000e912:	a829                	j	8000e92c <_ZN4core6option15Option$LT$T$GT$5ok_or17hc525e8e997fb4842E+0x3a>
    8000e914:	65c2                	ld	a1,16(sp)
    8000e916:	6502                	ld	a0,0(sp)
    8000e918:	6622                	ld	a2,8(sp)
    8000e91a:	4681                	li	a3,0
            None => Err(err),
    8000e91c:	02d103a3          	sb	a3,39(sp)
    8000e920:	e590                	sd	a2,8(a1)
    8000e922:	e988                	sd	a0,16(a1)
    8000e924:	4505                	li	a0,1
    8000e926:	e188                	sd	a0,0(a1)
        match self {
    8000e928:	a809                	j	8000e93a <_ZN4core6option15Option$LT$T$GT$5ok_or17hc525e8e997fb4842E+0x48>
    8000e92a:	0000                	unimp
            Some(v) => Ok(v),
    8000e92c:	65c2                	ld	a1,16(sp)
    8000e92e:	6562                	ld	a0,24(sp)
    8000e930:	fc2a                	sd	a0,56(sp)
    8000e932:	e588                	sd	a0,8(a1)
    8000e934:	4501                	li	a0,0
    8000e936:	e188                	sd	a0,0(a1)
        match self {
    8000e938:	a009                	j	8000e93a <_ZN4core6option15Option$LT$T$GT$5ok_or17hc525e8e997fb4842E+0x48>
    }
    8000e93a:	02714503          	lbu	a0,39(sp)
    8000e93e:	8905                	andi	a0,a0,1
    8000e940:	e501                	bnez	a0,8000e948 <_ZN4core6option15Option$LT$T$GT$5ok_or17hc525e8e997fb4842E+0x56>
    8000e942:	a009                	j	8000e944 <_ZN4core6option15Option$LT$T$GT$5ok_or17hc525e8e997fb4842E+0x52>
    8000e944:	6121                	addi	sp,sp,64
    8000e946:	8082                	ret
    8000e948:	bff5                	j	8000e944 <_ZN4core6option15Option$LT$T$GT$5ok_or17hc525e8e997fb4842E+0x52>

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$5ok_or17hfa0f5f38e365ca74E:

000000008000e94a <_ZN4core6option15Option$LT$T$GT$5ok_or17hfa0f5f38e365ca74E>:
    pub fn ok_or<E>(self, err: E) -> Result<T, E> {
    8000e94a:	7179                	addi	sp,sp,-48
    8000e94c:	e42a                	sd	a0,8(sp)
    8000e94e:	4585                	li	a1,1
            Some(v) => Ok(v),
    8000e950:	00b10fa3          	sb	a1,31(sp)
    8000e954:	00a035b3          	snez	a1,a0
    8000e958:	4581                	li	a1,0
    8000e95a:	00b50463          	beq	a0,a1,8000e962 <_ZN4core6option15Option$LT$T$GT$5ok_or17hfa0f5f38e365ca74E+0x18>
    8000e95e:	a009                	j	8000e960 <_ZN4core6option15Option$LT$T$GT$5ok_or17hfa0f5f38e365ca74E+0x16>
    8000e960:	a039                	j	8000e96e <_ZN4core6option15Option$LT$T$GT$5ok_or17hfa0f5f38e365ca74E+0x24>
    8000e962:	4501                	li	a0,0
            None => Err(err),
    8000e964:	00a10fa3          	sb	a0,31(sp)
    8000e968:	e82a                	sd	a0,16(sp)
        match self {
    8000e96a:	a031                	j	8000e976 <_ZN4core6option15Option$LT$T$GT$5ok_or17hfa0f5f38e365ca74E+0x2c>
    8000e96c:	0000                	unimp
            Some(v) => Ok(v),
    8000e96e:	6522                	ld	a0,8(sp)
    8000e970:	f42a                	sd	a0,40(sp)
    8000e972:	e82a                	sd	a0,16(sp)
        match self {
    8000e974:	a009                	j	8000e976 <_ZN4core6option15Option$LT$T$GT$5ok_or17hfa0f5f38e365ca74E+0x2c>
    }
    8000e976:	01f14503          	lbu	a0,31(sp)
    8000e97a:	8905                	andi	a0,a0,1
    8000e97c:	e509                	bnez	a0,8000e986 <_ZN4core6option15Option$LT$T$GT$5ok_or17hfa0f5f38e365ca74E+0x3c>
    8000e97e:	a009                	j	8000e980 <_ZN4core6option15Option$LT$T$GT$5ok_or17hfa0f5f38e365ca74E+0x36>
    8000e980:	6542                	ld	a0,16(sp)
    8000e982:	6145                	addi	sp,sp,48
    8000e984:	8082                	ret
    8000e986:	bfed                	j	8000e980 <_ZN4core6option15Option$LT$T$GT$5ok_or17hfa0f5f38e365ca74E+0x36>

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$5ok_or17hfc73591acc2890d8E:

000000008000e988 <_ZN4core6option15Option$LT$T$GT$5ok_or17hfc73591acc2890d8E>:
    pub fn ok_or<E>(self, err: E) -> Result<T, E> {
    8000e988:	711d                	addi	sp,sp,-96
    8000e98a:	e436                	sd	a3,8(sp)
    8000e98c:	e832                	sd	a2,16(sp)
    8000e98e:	ec2e                	sd	a1,24(sp)
    8000e990:	f02a                	sd	a0,32(sp)
    8000e992:	e8b2                	sd	a2,80(sp)
    8000e994:	ecb6                	sd	a3,88(sp)
    8000e996:	4505                	li	a0,1
            Some(v) => Ok(v),
    8000e998:	04a107a3          	sb	a0,79(sp)
    8000e99c:	6188                	ld	a0,0(a1)
    8000e99e:	4581                	li	a1,0
    8000e9a0:	00b50463          	beq	a0,a1,8000e9a8 <_ZN4core6option15Option$LT$T$GT$5ok_or17hfc73591acc2890d8E+0x20>
    8000e9a4:	a009                	j	8000e9a6 <_ZN4core6option15Option$LT$T$GT$5ok_or17hfc73591acc2890d8E+0x1e>
    8000e9a6:	a829                	j	8000e9c0 <_ZN4core6option15Option$LT$T$GT$5ok_or17hfc73591acc2890d8E+0x38>
    8000e9a8:	7582                	ld	a1,32(sp)
    8000e9aa:	6522                	ld	a0,8(sp)
    8000e9ac:	6642                	ld	a2,16(sp)
    8000e9ae:	4681                	li	a3,0
            None => Err(err),
    8000e9b0:	04d107a3          	sb	a3,79(sp)
    8000e9b4:	e590                	sd	a2,8(a1)
    8000e9b6:	e988                	sd	a0,16(a1)
    8000e9b8:	4505                	li	a0,1
    8000e9ba:	e188                	sd	a0,0(a1)
        match self {
    8000e9bc:	a839                	j	8000e9da <_ZN4core6option15Option$LT$T$GT$5ok_or17hfc73591acc2890d8E+0x52>
    8000e9be:	0000                	unimp
            Some(v) => Ok(v),
    8000e9c0:	7582                	ld	a1,32(sp)
    8000e9c2:	6662                	ld	a2,24(sp)
    8000e9c4:	6608                	ld	a0,8(a2)
    8000e9c6:	f42a                	sd	a0,40(sp)
    8000e9c8:	6a10                	ld	a2,16(a2)
    8000e9ca:	f832                	sd	a2,48(sp)
    8000e9cc:	e0b2                	sd	a2,64(sp)
    8000e9ce:	fc2a                	sd	a0,56(sp)
    8000e9d0:	e990                	sd	a2,16(a1)
    8000e9d2:	e588                	sd	a0,8(a1)
    8000e9d4:	4501                	li	a0,0
    8000e9d6:	e188                	sd	a0,0(a1)
        match self {
    8000e9d8:	a009                	j	8000e9da <_ZN4core6option15Option$LT$T$GT$5ok_or17hfc73591acc2890d8E+0x52>
    }
    8000e9da:	04f14503          	lbu	a0,79(sp)
    8000e9de:	8905                	andi	a0,a0,1
    8000e9e0:	e501                	bnez	a0,8000e9e8 <_ZN4core6option15Option$LT$T$GT$5ok_or17hfc73591acc2890d8E+0x60>
    8000e9e2:	a009                	j	8000e9e4 <_ZN4core6option15Option$LT$T$GT$5ok_or17hfc73591acc2890d8E+0x5c>
    8000e9e4:	6125                	addi	sp,sp,96
    8000e9e6:	8082                	ret
    8000e9e8:	bff5                	j	8000e9e4 <_ZN4core6option15Option$LT$T$GT$5ok_or17hfc73591acc2890d8E+0x5c>

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$6as_mut17h3a38d82722b299a5E:

000000008000e9ea <_ZN4core6option15Option$LT$T$GT$6as_mut17h3a38d82722b299a5E>:
    pub fn as_mut(&mut self) -> Option<&mut T> {
    8000e9ea:	1101                	addi	sp,sp,-32
    8000e9ec:	e02a                	sd	a0,0(sp)
    8000e9ee:	e82a                	sd	a0,16(sp)
            Some(ref mut x) => Some(x),
    8000e9f0:	6108                	ld	a0,0(a0)
    8000e9f2:	00a035b3          	snez	a1,a0
    8000e9f6:	4581                	li	a1,0
    8000e9f8:	00b50463          	beq	a0,a1,8000ea00 <_ZN4core6option15Option$LT$T$GT$6as_mut17h3a38d82722b299a5E+0x16>
    8000e9fc:	a009                	j	8000e9fe <_ZN4core6option15Option$LT$T$GT$6as_mut17h3a38d82722b299a5E+0x14>
    8000e9fe:	a029                	j	8000ea08 <_ZN4core6option15Option$LT$T$GT$6as_mut17h3a38d82722b299a5E+0x1e>
    8000ea00:	4501                	li	a0,0
            None => None,
    8000ea02:	e42a                	sd	a0,8(sp)
        match *self {
    8000ea04:	a031                	j	8000ea10 <_ZN4core6option15Option$LT$T$GT$6as_mut17h3a38d82722b299a5E+0x26>
    8000ea06:	0000                	unimp
            Some(ref mut x) => Some(x),
    8000ea08:	6502                	ld	a0,0(sp)
    8000ea0a:	ec2a                	sd	a0,24(sp)
    8000ea0c:	e42a                	sd	a0,8(sp)
        match *self {
    8000ea0e:	a009                	j	8000ea10 <_ZN4core6option15Option$LT$T$GT$6as_mut17h3a38d82722b299a5E+0x26>
    }
    8000ea10:	6522                	ld	a0,8(sp)
    8000ea12:	6105                	addi	sp,sp,32
    8000ea14:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$6as_mut17he7f8c9f3d27cdb5eE:

000000008000ea16 <_ZN4core6option15Option$LT$T$GT$6as_mut17he7f8c9f3d27cdb5eE>:
    pub fn as_mut(&mut self) -> Option<&mut T> {
    8000ea16:	1101                	addi	sp,sp,-32
    8000ea18:	e02a                	sd	a0,0(sp)
    8000ea1a:	e82a                	sd	a0,16(sp)
            Some(ref mut x) => Some(x),
    8000ea1c:	6108                	ld	a0,0(a0)
    8000ea1e:	4581                	li	a1,0
    8000ea20:	00b50463          	beq	a0,a1,8000ea28 <_ZN4core6option15Option$LT$T$GT$6as_mut17he7f8c9f3d27cdb5eE+0x12>
    8000ea24:	a009                	j	8000ea26 <_ZN4core6option15Option$LT$T$GT$6as_mut17he7f8c9f3d27cdb5eE+0x10>
    8000ea26:	a029                	j	8000ea30 <_ZN4core6option15Option$LT$T$GT$6as_mut17he7f8c9f3d27cdb5eE+0x1a>
    8000ea28:	4501                	li	a0,0
            None => None,
    8000ea2a:	e42a                	sd	a0,8(sp)
        match *self {
    8000ea2c:	a039                	j	8000ea3a <_ZN4core6option15Option$LT$T$GT$6as_mut17he7f8c9f3d27cdb5eE+0x24>
    8000ea2e:	0000                	unimp
            Some(ref mut x) => Some(x),
    8000ea30:	6502                	ld	a0,0(sp)
    8000ea32:	0521                	addi	a0,a0,8
    8000ea34:	ec2a                	sd	a0,24(sp)
    8000ea36:	e42a                	sd	a0,8(sp)
        match *self {
    8000ea38:	a009                	j	8000ea3a <_ZN4core6option15Option$LT$T$GT$6as_mut17he7f8c9f3d27cdb5eE+0x24>
    }
    8000ea3a:	6522                	ld	a0,8(sp)
    8000ea3c:	6105                	addi	sp,sp,32
    8000ea3e:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$6as_ref17h0cd8921964ab0966E:

000000008000ea40 <_ZN4core6option15Option$LT$T$GT$6as_ref17h0cd8921964ab0966E>:
    pub const fn as_ref(&self) -> Option<&T> {
    8000ea40:	1101                	addi	sp,sp,-32
    8000ea42:	e02a                	sd	a0,0(sp)
    8000ea44:	e82a                	sd	a0,16(sp)
            Some(ref x) => Some(x),
    8000ea46:	6108                	ld	a0,0(a0)
    8000ea48:	00a035b3          	snez	a1,a0
    8000ea4c:	4581                	li	a1,0
    8000ea4e:	00b50463          	beq	a0,a1,8000ea56 <_ZN4core6option15Option$LT$T$GT$6as_ref17h0cd8921964ab0966E+0x16>
    8000ea52:	a009                	j	8000ea54 <_ZN4core6option15Option$LT$T$GT$6as_ref17h0cd8921964ab0966E+0x14>
    8000ea54:	a029                	j	8000ea5e <_ZN4core6option15Option$LT$T$GT$6as_ref17h0cd8921964ab0966E+0x1e>
    8000ea56:	4501                	li	a0,0
            None => None,
    8000ea58:	e42a                	sd	a0,8(sp)
        match *self {
    8000ea5a:	a031                	j	8000ea66 <_ZN4core6option15Option$LT$T$GT$6as_ref17h0cd8921964ab0966E+0x26>
    8000ea5c:	0000                	unimp
            Some(ref x) => Some(x),
    8000ea5e:	6502                	ld	a0,0(sp)
    8000ea60:	ec2a                	sd	a0,24(sp)
    8000ea62:	e42a                	sd	a0,8(sp)
        match *self {
    8000ea64:	a009                	j	8000ea66 <_ZN4core6option15Option$LT$T$GT$6as_ref17h0cd8921964ab0966E+0x26>
    }
    8000ea66:	6522                	ld	a0,8(sp)
    8000ea68:	6105                	addi	sp,sp,32
    8000ea6a:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$6as_ref17h883d1380e87d3449E:

000000008000ea6c <_ZN4core6option15Option$LT$T$GT$6as_ref17h883d1380e87d3449E>:
    pub const fn as_ref(&self) -> Option<&T> {
    8000ea6c:	1101                	addi	sp,sp,-32
    8000ea6e:	e02a                	sd	a0,0(sp)
    8000ea70:	e82a                	sd	a0,16(sp)
            Some(ref x) => Some(x),
    8000ea72:	6108                	ld	a0,0(a0)
    8000ea74:	4581                	li	a1,0
    8000ea76:	00b50463          	beq	a0,a1,8000ea7e <_ZN4core6option15Option$LT$T$GT$6as_ref17h883d1380e87d3449E+0x12>
    8000ea7a:	a009                	j	8000ea7c <_ZN4core6option15Option$LT$T$GT$6as_ref17h883d1380e87d3449E+0x10>
    8000ea7c:	a029                	j	8000ea86 <_ZN4core6option15Option$LT$T$GT$6as_ref17h883d1380e87d3449E+0x1a>
    8000ea7e:	4501                	li	a0,0
            None => None,
    8000ea80:	e42a                	sd	a0,8(sp)
        match *self {
    8000ea82:	a039                	j	8000ea90 <_ZN4core6option15Option$LT$T$GT$6as_ref17h883d1380e87d3449E+0x24>
    8000ea84:	0000                	unimp
            Some(ref x) => Some(x),
    8000ea86:	6502                	ld	a0,0(sp)
    8000ea88:	0521                	addi	a0,a0,8
    8000ea8a:	ec2a                	sd	a0,24(sp)
    8000ea8c:	e42a                	sd	a0,8(sp)
        match *self {
    8000ea8e:	a009                	j	8000ea90 <_ZN4core6option15Option$LT$T$GT$6as_ref17h883d1380e87d3449E+0x24>
    }
    8000ea90:	6522                	ld	a0,8(sp)
    8000ea92:	6105                	addi	sp,sp,32
    8000ea94:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$6as_ref17hb04d778bad5fcb59E:

000000008000ea96 <_ZN4core6option15Option$LT$T$GT$6as_ref17hb04d778bad5fcb59E>:
    pub const fn as_ref(&self) -> Option<&T> {
    8000ea96:	1101                	addi	sp,sp,-32
    8000ea98:	e02a                	sd	a0,0(sp)
    8000ea9a:	e82a                	sd	a0,16(sp)
            Some(ref x) => Some(x),
    8000ea9c:	6108                	ld	a0,0(a0)
    8000ea9e:	00a035b3          	snez	a1,a0
    8000eaa2:	4581                	li	a1,0
    8000eaa4:	00b50463          	beq	a0,a1,8000eaac <_ZN4core6option15Option$LT$T$GT$6as_ref17hb04d778bad5fcb59E+0x16>
    8000eaa8:	a009                	j	8000eaaa <_ZN4core6option15Option$LT$T$GT$6as_ref17hb04d778bad5fcb59E+0x14>
    8000eaaa:	a029                	j	8000eab4 <_ZN4core6option15Option$LT$T$GT$6as_ref17hb04d778bad5fcb59E+0x1e>
    8000eaac:	4501                	li	a0,0
            None => None,
    8000eaae:	e42a                	sd	a0,8(sp)
        match *self {
    8000eab0:	a031                	j	8000eabc <_ZN4core6option15Option$LT$T$GT$6as_ref17hb04d778bad5fcb59E+0x26>
    8000eab2:	0000                	unimp
            Some(ref x) => Some(x),
    8000eab4:	6502                	ld	a0,0(sp)
    8000eab6:	ec2a                	sd	a0,24(sp)
    8000eab8:	e42a                	sd	a0,8(sp)
        match *self {
    8000eaba:	a009                	j	8000eabc <_ZN4core6option15Option$LT$T$GT$6as_ref17hb04d778bad5fcb59E+0x26>
    }
    8000eabc:	6522                	ld	a0,8(sp)
    8000eabe:	6105                	addi	sp,sp,32
    8000eac0:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$6expect17h038f65ec579fa12bE:

000000008000eac2 <_ZN4core6option15Option$LT$T$GT$6expect17h038f65ec579fa12bE>:
    pub fn expect(self, msg: &str) -> T {
    8000eac2:	7139                	addi	sp,sp,-64
    8000eac4:	e03a                	sd	a4,0(sp)
    8000eac6:	e436                	sd	a3,8(sp)
    8000eac8:	e832                	sd	a2,16(sp)
    8000eaca:	ec2a                	sd	a0,24(sp)
    8000eacc:	f02e                	sd	a1,32(sp)
    8000eace:	f432                	sd	a2,40(sp)
    8000ead0:	f836                	sd	a3,48(sp)
    8000ead2:	4581                	li	a1,0
            Some(val) => val,
    8000ead4:	00b50463          	beq	a0,a1,8000eadc <_ZN4core6option15Option$LT$T$GT$6expect17h038f65ec579fa12bE+0x1a>
    8000ead8:	a009                	j	8000eada <_ZN4core6option15Option$LT$T$GT$6expect17h038f65ec579fa12bE+0x18>
    8000eada:	a811                	j	8000eaee <_ZN4core6option15Option$LT$T$GT$6expect17h038f65ec579fa12bE+0x2c>
            None => expect_failed(msg),
    8000eadc:	6602                	ld	a2,0(sp)
    8000eade:	65a2                	ld	a1,8(sp)
    8000eae0:	6542                	ld	a0,16(sp)
    8000eae2:	00013097          	auipc	ra,0x13
    8000eae6:	658080e7          	jalr	1624(ra) # 8002213a <_ZN4core6option13expect_failed17h0edd1e4bb5304a50E>
    8000eaea:	0000                	unimp
        match self {
    8000eaec:	0000                	unimp
            Some(val) => val,
    8000eaee:	7502                	ld	a0,32(sp)
    8000eaf0:	fc2a                	sd	a0,56(sp)
    }
    8000eaf2:	6121                	addi	sp,sp,64
    8000eaf4:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$6expect17h263816fde9da1c25E:

000000008000eaf6 <_ZN4core6option15Option$LT$T$GT$6expect17h263816fde9da1c25E>:
    pub fn expect(self, msg: &str) -> T {
    8000eaf6:	7139                	addi	sp,sp,-64
    8000eaf8:	e03a                	sd	a4,0(sp)
    8000eafa:	e436                	sd	a3,8(sp)
    8000eafc:	e832                	sd	a2,16(sp)
    8000eafe:	ec2a                	sd	a0,24(sp)
    8000eb00:	f02e                	sd	a1,32(sp)
    8000eb02:	f432                	sd	a2,40(sp)
    8000eb04:	f836                	sd	a3,48(sp)
    8000eb06:	4581                	li	a1,0
            Some(val) => val,
    8000eb08:	00b50463          	beq	a0,a1,8000eb10 <_ZN4core6option15Option$LT$T$GT$6expect17h263816fde9da1c25E+0x1a>
    8000eb0c:	a009                	j	8000eb0e <_ZN4core6option15Option$LT$T$GT$6expect17h263816fde9da1c25E+0x18>
    8000eb0e:	a811                	j	8000eb22 <_ZN4core6option15Option$LT$T$GT$6expect17h263816fde9da1c25E+0x2c>
            None => expect_failed(msg),
    8000eb10:	6602                	ld	a2,0(sp)
    8000eb12:	65a2                	ld	a1,8(sp)
    8000eb14:	6542                	ld	a0,16(sp)
    8000eb16:	00013097          	auipc	ra,0x13
    8000eb1a:	624080e7          	jalr	1572(ra) # 8002213a <_ZN4core6option13expect_failed17h0edd1e4bb5304a50E>
    8000eb1e:	0000                	unimp
        match self {
    8000eb20:	0000                	unimp
            Some(val) => val,
    8000eb22:	7502                	ld	a0,32(sp)
    8000eb24:	fc2a                	sd	a0,56(sp)
    }
    8000eb26:	6121                	addi	sp,sp,64
    8000eb28:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$6expect17h3c07e85986db6eddE:

000000008000eb2a <_ZN4core6option15Option$LT$T$GT$6expect17h3c07e85986db6eddE>:
    pub fn expect(self, msg: &str) -> T {
    8000eb2a:	7139                	addi	sp,sp,-64
    8000eb2c:	e436                	sd	a3,8(sp)
    8000eb2e:	e832                	sd	a2,16(sp)
    8000eb30:	ec2e                	sd	a1,24(sp)
    8000eb32:	f02a                	sd	a0,32(sp)
    8000eb34:	f42e                	sd	a1,40(sp)
    8000eb36:	f832                	sd	a2,48(sp)
            Some(val) => val,
    8000eb38:	00a035b3          	snez	a1,a0
    8000eb3c:	4581                	li	a1,0
    8000eb3e:	00b50463          	beq	a0,a1,8000eb46 <_ZN4core6option15Option$LT$T$GT$6expect17h3c07e85986db6eddE+0x1c>
    8000eb42:	a009                	j	8000eb44 <_ZN4core6option15Option$LT$T$GT$6expect17h3c07e85986db6eddE+0x1a>
    8000eb44:	a811                	j	8000eb58 <_ZN4core6option15Option$LT$T$GT$6expect17h3c07e85986db6eddE+0x2e>
            None => expect_failed(msg),
    8000eb46:	6622                	ld	a2,8(sp)
    8000eb48:	65c2                	ld	a1,16(sp)
    8000eb4a:	6562                	ld	a0,24(sp)
    8000eb4c:	00013097          	auipc	ra,0x13
    8000eb50:	5ee080e7          	jalr	1518(ra) # 8002213a <_ZN4core6option13expect_failed17h0edd1e4bb5304a50E>
    8000eb54:	0000                	unimp
        match self {
    8000eb56:	0000                	unimp
            Some(val) => val,
    8000eb58:	7502                	ld	a0,32(sp)
    8000eb5a:	fc2a                	sd	a0,56(sp)
    }
    8000eb5c:	6121                	addi	sp,sp,64
    8000eb5e:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$6expect17h5cc0070b74d715b8E:

000000008000eb60 <_ZN4core6option15Option$LT$T$GT$6expect17h5cc0070b74d715b8E>:
    pub fn expect(self, msg: &str) -> T {
    8000eb60:	7139                	addi	sp,sp,-64
    8000eb62:	e436                	sd	a3,8(sp)
    8000eb64:	e832                	sd	a2,16(sp)
    8000eb66:	ec2e                	sd	a1,24(sp)
    8000eb68:	f02a                	sd	a0,32(sp)
    8000eb6a:	f42e                	sd	a1,40(sp)
    8000eb6c:	f832                	sd	a2,48(sp)
            Some(val) => val,
    8000eb6e:	00a035b3          	snez	a1,a0
    8000eb72:	4581                	li	a1,0
    8000eb74:	00b50463          	beq	a0,a1,8000eb7c <_ZN4core6option15Option$LT$T$GT$6expect17h5cc0070b74d715b8E+0x1c>
    8000eb78:	a009                	j	8000eb7a <_ZN4core6option15Option$LT$T$GT$6expect17h5cc0070b74d715b8E+0x1a>
    8000eb7a:	a811                	j	8000eb8e <_ZN4core6option15Option$LT$T$GT$6expect17h5cc0070b74d715b8E+0x2e>
            None => expect_failed(msg),
    8000eb7c:	6622                	ld	a2,8(sp)
    8000eb7e:	65c2                	ld	a1,16(sp)
    8000eb80:	6562                	ld	a0,24(sp)
    8000eb82:	00013097          	auipc	ra,0x13
    8000eb86:	5b8080e7          	jalr	1464(ra) # 8002213a <_ZN4core6option13expect_failed17h0edd1e4bb5304a50E>
    8000eb8a:	0000                	unimp
        match self {
    8000eb8c:	0000                	unimp
            Some(val) => val,
    8000eb8e:	7502                	ld	a0,32(sp)
    8000eb90:	fc2a                	sd	a0,56(sp)
    }
    8000eb92:	6121                	addi	sp,sp,64
    8000eb94:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$6expect17h91dc8b235b72ffe4E:

000000008000eb96 <_ZN4core6option15Option$LT$T$GT$6expect17h91dc8b235b72ffe4E>:
    pub fn expect(self, msg: &str) -> T {
    8000eb96:	7139                	addi	sp,sp,-64
    8000eb98:	e036                	sd	a3,0(sp)
    8000eb9a:	e432                	sd	a2,8(sp)
    8000eb9c:	e82e                	sd	a1,16(sp)
    8000eb9e:	ec2a                	sd	a0,24(sp)
    8000eba0:	f82e                	sd	a1,48(sp)
    8000eba2:	fc32                	sd	a2,56(sp)
            Some(val) => val,
    8000eba4:	6108                	ld	a0,0(a0)
    8000eba6:	4581                	li	a1,0
    8000eba8:	00b50463          	beq	a0,a1,8000ebb0 <_ZN4core6option15Option$LT$T$GT$6expect17h91dc8b235b72ffe4E+0x1a>
    8000ebac:	a009                	j	8000ebae <_ZN4core6option15Option$LT$T$GT$6expect17h91dc8b235b72ffe4E+0x18>
    8000ebae:	a811                	j	8000ebc2 <_ZN4core6option15Option$LT$T$GT$6expect17h91dc8b235b72ffe4E+0x2c>
            None => expect_failed(msg),
    8000ebb0:	6602                	ld	a2,0(sp)
    8000ebb2:	65a2                	ld	a1,8(sp)
    8000ebb4:	6542                	ld	a0,16(sp)
    8000ebb6:	00013097          	auipc	ra,0x13
    8000ebba:	584080e7          	jalr	1412(ra) # 8002213a <_ZN4core6option13expect_failed17h0edd1e4bb5304a50E>
    8000ebbe:	0000                	unimp
        match self {
    8000ebc0:	0000                	unimp
            Some(val) => val,
    8000ebc2:	6562                	ld	a0,24(sp)
    8000ebc4:	690c                	ld	a1,16(a0)
    8000ebc6:	f42e                	sd	a1,40(sp)
    8000ebc8:	6508                	ld	a0,8(a0)
    8000ebca:	f02a                	sd	a0,32(sp)
    }
    8000ebcc:	6121                	addi	sp,sp,64
    8000ebce:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$6unwrap17h2b22556a60663957E:

000000008000ebd0 <_ZN4core6option15Option$LT$T$GT$6unwrap17h2b22556a60663957E>:
    pub const fn unwrap(self) -> T {
    8000ebd0:	1101                	addi	sp,sp,-32
    8000ebd2:	e42e                	sd	a1,8(sp)
    8000ebd4:	e82a                	sd	a0,16(sp)
            Some(val) => val,
    8000ebd6:	00a035b3          	snez	a1,a0
    8000ebda:	4581                	li	a1,0
    8000ebdc:	00b50463          	beq	a0,a1,8000ebe4 <_ZN4core6option15Option$LT$T$GT$6unwrap17h2b22556a60663957E+0x14>
    8000ebe0:	a009                	j	8000ebe2 <_ZN4core6option15Option$LT$T$GT$6unwrap17h2b22556a60663957E+0x12>
    8000ebe2:	a831                	j	8000ebfe <.LBB31_5+0x18>
            None => panic!("called `Option::unwrap()` on a `None` value"),
    8000ebe4:	6622                	ld	a2,8(sp)

000000008000ebe6 <.LBB31_5>:
    8000ebe6:	0001a517          	auipc	a0,0x1a
    8000ebea:	87b50513          	addi	a0,a0,-1925 # 80028461 <.L__unnamed_1>
    8000ebee:	02b00593          	li	a1,43
    8000ebf2:	00013097          	auipc	ra,0x13
    8000ebf6:	684080e7          	jalr	1668(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8000ebfa:	0000                	unimp
        match self {
    8000ebfc:	0000                	unimp
            Some(val) => val,
    8000ebfe:	6542                	ld	a0,16(sp)
    8000ec00:	ec2a                	sd	a0,24(sp)
    }
    8000ec02:	6105                	addi	sp,sp,32
    8000ec04:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$6unwrap17h2ef2c85febc29d20E:

000000008000ec06 <_ZN4core6option15Option$LT$T$GT$6unwrap17h2ef2c85febc29d20E>:
    pub const fn unwrap(self) -> T {
    8000ec06:	1101                	addi	sp,sp,-32
    8000ec08:	e42e                	sd	a1,8(sp)
    8000ec0a:	e82a                	sd	a0,16(sp)
            Some(val) => val,
    8000ec0c:	00a035b3          	snez	a1,a0
    8000ec10:	4581                	li	a1,0
    8000ec12:	00b50463          	beq	a0,a1,8000ec1a <_ZN4core6option15Option$LT$T$GT$6unwrap17h2ef2c85febc29d20E+0x14>
    8000ec16:	a009                	j	8000ec18 <_ZN4core6option15Option$LT$T$GT$6unwrap17h2ef2c85febc29d20E+0x12>
    8000ec18:	a831                	j	8000ec34 <.LBB32_5+0x18>
            None => panic!("called `Option::unwrap()` on a `None` value"),
    8000ec1a:	6622                	ld	a2,8(sp)

000000008000ec1c <.LBB32_5>:
    8000ec1c:	0001a517          	auipc	a0,0x1a
    8000ec20:	84550513          	addi	a0,a0,-1979 # 80028461 <.L__unnamed_1>
    8000ec24:	02b00593          	li	a1,43
    8000ec28:	00013097          	auipc	ra,0x13
    8000ec2c:	64e080e7          	jalr	1614(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8000ec30:	0000                	unimp
        match self {
    8000ec32:	0000                	unimp
            Some(val) => val,
    8000ec34:	6542                	ld	a0,16(sp)
    8000ec36:	ec2a                	sd	a0,24(sp)
    }
    8000ec38:	6105                	addi	sp,sp,32
    8000ec3a:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$6unwrap17h34586233d4d65f4cE:

000000008000ec3c <_ZN4core6option15Option$LT$T$GT$6unwrap17h34586233d4d65f4cE>:
    pub const fn unwrap(self) -> T {
    8000ec3c:	1101                	addi	sp,sp,-32
    8000ec3e:	e42e                	sd	a1,8(sp)
    8000ec40:	e82a                	sd	a0,16(sp)
            Some(val) => val,
    8000ec42:	00a035b3          	snez	a1,a0
    8000ec46:	4581                	li	a1,0
    8000ec48:	00b50463          	beq	a0,a1,8000ec50 <_ZN4core6option15Option$LT$T$GT$6unwrap17h34586233d4d65f4cE+0x14>
    8000ec4c:	a009                	j	8000ec4e <_ZN4core6option15Option$LT$T$GT$6unwrap17h34586233d4d65f4cE+0x12>
    8000ec4e:	a831                	j	8000ec6a <.LBB33_5+0x18>
            None => panic!("called `Option::unwrap()` on a `None` value"),
    8000ec50:	6622                	ld	a2,8(sp)

000000008000ec52 <.LBB33_5>:
    8000ec52:	0001a517          	auipc	a0,0x1a
    8000ec56:	80f50513          	addi	a0,a0,-2033 # 80028461 <.L__unnamed_1>
    8000ec5a:	02b00593          	li	a1,43
    8000ec5e:	00013097          	auipc	ra,0x13
    8000ec62:	618080e7          	jalr	1560(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8000ec66:	0000                	unimp
        match self {
    8000ec68:	0000                	unimp
            Some(val) => val,
    8000ec6a:	6542                	ld	a0,16(sp)
    8000ec6c:	ec2a                	sd	a0,24(sp)
    }
    8000ec6e:	6105                	addi	sp,sp,32
    8000ec70:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$6unwrap17h5e7c29d7de25e54aE:

000000008000ec72 <_ZN4core6option15Option$LT$T$GT$6unwrap17h5e7c29d7de25e54aE>:
    pub const fn unwrap(self) -> T {
    8000ec72:	1101                	addi	sp,sp,-32
    8000ec74:	e42e                	sd	a1,8(sp)
    8000ec76:	e82a                	sd	a0,16(sp)
            Some(val) => val,
    8000ec78:	00a035b3          	snez	a1,a0
    8000ec7c:	4581                	li	a1,0
    8000ec7e:	00b50463          	beq	a0,a1,8000ec86 <_ZN4core6option15Option$LT$T$GT$6unwrap17h5e7c29d7de25e54aE+0x14>
    8000ec82:	a009                	j	8000ec84 <_ZN4core6option15Option$LT$T$GT$6unwrap17h5e7c29d7de25e54aE+0x12>
    8000ec84:	a831                	j	8000eca0 <.LBB34_5+0x18>
            None => panic!("called `Option::unwrap()` on a `None` value"),
    8000ec86:	6622                	ld	a2,8(sp)

000000008000ec88 <.LBB34_5>:
    8000ec88:	00019517          	auipc	a0,0x19
    8000ec8c:	7d950513          	addi	a0,a0,2009 # 80028461 <.L__unnamed_1>
    8000ec90:	02b00593          	li	a1,43
    8000ec94:	00013097          	auipc	ra,0x13
    8000ec98:	5e2080e7          	jalr	1506(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8000ec9c:	0000                	unimp
        match self {
    8000ec9e:	0000                	unimp
            Some(val) => val,
    8000eca0:	6542                	ld	a0,16(sp)
    8000eca2:	ec2a                	sd	a0,24(sp)
    }
    8000eca4:	6105                	addi	sp,sp,32
    8000eca6:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$6unwrap17h5fcd4b8dbd5a2f47E:

000000008000eca8 <_ZN4core6option15Option$LT$T$GT$6unwrap17h5fcd4b8dbd5a2f47E>:
    pub const fn unwrap(self) -> T {
    8000eca8:	1101                	addi	sp,sp,-32
    8000ecaa:	e02e                	sd	a1,0(sp)
    8000ecac:	e42a                	sd	a0,8(sp)
            Some(val) => val,
    8000ecae:	6108                	ld	a0,0(a0)
    8000ecb0:	4581                	li	a1,0
    8000ecb2:	00b50463          	beq	a0,a1,8000ecba <_ZN4core6option15Option$LT$T$GT$6unwrap17h5fcd4b8dbd5a2f47E+0x12>
    8000ecb6:	a009                	j	8000ecb8 <_ZN4core6option15Option$LT$T$GT$6unwrap17h5fcd4b8dbd5a2f47E+0x10>
    8000ecb8:	a831                	j	8000ecd4 <.LBB35_5+0x18>
            None => panic!("called `Option::unwrap()` on a `None` value"),
    8000ecba:	6602                	ld	a2,0(sp)

000000008000ecbc <.LBB35_5>:
    8000ecbc:	00019517          	auipc	a0,0x19
    8000ecc0:	7a550513          	addi	a0,a0,1957 # 80028461 <.L__unnamed_1>
    8000ecc4:	02b00593          	li	a1,43
    8000ecc8:	00013097          	auipc	ra,0x13
    8000eccc:	5ae080e7          	jalr	1454(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8000ecd0:	0000                	unimp
        match self {
    8000ecd2:	0000                	unimp
            Some(val) => val,
    8000ecd4:	6522                	ld	a0,8(sp)
    8000ecd6:	690c                	ld	a1,16(a0)
    8000ecd8:	ec2e                	sd	a1,24(sp)
    8000ecda:	6508                	ld	a0,8(a0)
    8000ecdc:	e82a                	sd	a0,16(sp)
    }
    8000ecde:	6105                	addi	sp,sp,32
    8000ece0:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$6unwrap17h70b9b96f373d4183E:

000000008000ece2 <_ZN4core6option15Option$LT$T$GT$6unwrap17h70b9b96f373d4183E>:
    pub const fn unwrap(self) -> T {
    8000ece2:	1101                	addi	sp,sp,-32
    8000ece4:	e032                	sd	a2,0(sp)
    8000ece6:	e42a                	sd	a0,8(sp)
    8000ece8:	e82e                	sd	a1,16(sp)
    8000ecea:	4581                	li	a1,0
            Some(val) => val,
    8000ecec:	00b50463          	beq	a0,a1,8000ecf4 <_ZN4core6option15Option$LT$T$GT$6unwrap17h70b9b96f373d4183E+0x12>
    8000ecf0:	a009                	j	8000ecf2 <_ZN4core6option15Option$LT$T$GT$6unwrap17h70b9b96f373d4183E+0x10>
    8000ecf2:	a831                	j	8000ed0e <.LBB36_5+0x18>
            None => panic!("called `Option::unwrap()` on a `None` value"),
    8000ecf4:	6602                	ld	a2,0(sp)

000000008000ecf6 <.LBB36_5>:
    8000ecf6:	00019517          	auipc	a0,0x19
    8000ecfa:	76b50513          	addi	a0,a0,1899 # 80028461 <.L__unnamed_1>
    8000ecfe:	02b00593          	li	a1,43
    8000ed02:	00013097          	auipc	ra,0x13
    8000ed06:	574080e7          	jalr	1396(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8000ed0a:	0000                	unimp
        match self {
    8000ed0c:	0000                	unimp
            Some(val) => val,
    8000ed0e:	6542                	ld	a0,16(sp)
    8000ed10:	ec2a                	sd	a0,24(sp)
    }
    8000ed12:	6105                	addi	sp,sp,32
    8000ed14:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$6unwrap17h715ab0e996921161E:

000000008000ed16 <_ZN4core6option15Option$LT$T$GT$6unwrap17h715ab0e996921161E>:
    pub const fn unwrap(self) -> T {
    8000ed16:	1101                	addi	sp,sp,-32
    8000ed18:	e42e                	sd	a1,8(sp)
    8000ed1a:	e82a                	sd	a0,16(sp)
            Some(val) => val,
    8000ed1c:	00a035b3          	snez	a1,a0
    8000ed20:	4581                	li	a1,0
    8000ed22:	00b50463          	beq	a0,a1,8000ed2a <_ZN4core6option15Option$LT$T$GT$6unwrap17h715ab0e996921161E+0x14>
    8000ed26:	a009                	j	8000ed28 <_ZN4core6option15Option$LT$T$GT$6unwrap17h715ab0e996921161E+0x12>
    8000ed28:	a831                	j	8000ed44 <.LBB37_5+0x18>
            None => panic!("called `Option::unwrap()` on a `None` value"),
    8000ed2a:	6622                	ld	a2,8(sp)

000000008000ed2c <.LBB37_5>:
    8000ed2c:	00019517          	auipc	a0,0x19
    8000ed30:	73550513          	addi	a0,a0,1845 # 80028461 <.L__unnamed_1>
    8000ed34:	02b00593          	li	a1,43
    8000ed38:	00013097          	auipc	ra,0x13
    8000ed3c:	53e080e7          	jalr	1342(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8000ed40:	0000                	unimp
        match self {
    8000ed42:	0000                	unimp
            Some(val) => val,
    8000ed44:	6542                	ld	a0,16(sp)
    8000ed46:	ec2a                	sd	a0,24(sp)
    }
    8000ed48:	6105                	addi	sp,sp,32
    8000ed4a:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$6unwrap17h81f0c84c54a80648E:

000000008000ed4c <_ZN4core6option15Option$LT$T$GT$6unwrap17h81f0c84c54a80648E>:
    pub const fn unwrap(self) -> T {
    8000ed4c:	1101                	addi	sp,sp,-32
    8000ed4e:	e42e                	sd	a1,8(sp)
    8000ed50:	e82a                	sd	a0,16(sp)
            Some(val) => val,
    8000ed52:	00a035b3          	snez	a1,a0
    8000ed56:	4581                	li	a1,0
    8000ed58:	00b50463          	beq	a0,a1,8000ed60 <_ZN4core6option15Option$LT$T$GT$6unwrap17h81f0c84c54a80648E+0x14>
    8000ed5c:	a009                	j	8000ed5e <_ZN4core6option15Option$LT$T$GT$6unwrap17h81f0c84c54a80648E+0x12>
    8000ed5e:	a831                	j	8000ed7a <.LBB38_5+0x18>
            None => panic!("called `Option::unwrap()` on a `None` value"),
    8000ed60:	6622                	ld	a2,8(sp)

000000008000ed62 <.LBB38_5>:
    8000ed62:	00019517          	auipc	a0,0x19
    8000ed66:	6ff50513          	addi	a0,a0,1791 # 80028461 <.L__unnamed_1>
    8000ed6a:	02b00593          	li	a1,43
    8000ed6e:	00013097          	auipc	ra,0x13
    8000ed72:	508080e7          	jalr	1288(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8000ed76:	0000                	unimp
        match self {
    8000ed78:	0000                	unimp
            Some(val) => val,
    8000ed7a:	6542                	ld	a0,16(sp)
    8000ed7c:	ec2a                	sd	a0,24(sp)
    }
    8000ed7e:	6105                	addi	sp,sp,32
    8000ed80:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$6unwrap17h84dba6f31c77e511E:

000000008000ed82 <_ZN4core6option15Option$LT$T$GT$6unwrap17h84dba6f31c77e511E>:
    pub const fn unwrap(self) -> T {
    8000ed82:	1101                	addi	sp,sp,-32
    8000ed84:	e42e                	sd	a1,8(sp)
    8000ed86:	e82a                	sd	a0,16(sp)
            Some(val) => val,
    8000ed88:	00a035b3          	snez	a1,a0
    8000ed8c:	4581                	li	a1,0
    8000ed8e:	00b50463          	beq	a0,a1,8000ed96 <_ZN4core6option15Option$LT$T$GT$6unwrap17h84dba6f31c77e511E+0x14>
    8000ed92:	a009                	j	8000ed94 <_ZN4core6option15Option$LT$T$GT$6unwrap17h84dba6f31c77e511E+0x12>
    8000ed94:	a831                	j	8000edb0 <.LBB39_5+0x18>
            None => panic!("called `Option::unwrap()` on a `None` value"),
    8000ed96:	6622                	ld	a2,8(sp)

000000008000ed98 <.LBB39_5>:
    8000ed98:	00019517          	auipc	a0,0x19
    8000ed9c:	6c950513          	addi	a0,a0,1737 # 80028461 <.L__unnamed_1>
    8000eda0:	02b00593          	li	a1,43
    8000eda4:	00013097          	auipc	ra,0x13
    8000eda8:	4d2080e7          	jalr	1234(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8000edac:	0000                	unimp
        match self {
    8000edae:	0000                	unimp
            Some(val) => val,
    8000edb0:	6542                	ld	a0,16(sp)
    8000edb2:	ec2a                	sd	a0,24(sp)
    }
    8000edb4:	6105                	addi	sp,sp,32
    8000edb6:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$6unwrap17h8e9f6f5582436d22E:

000000008000edb8 <_ZN4core6option15Option$LT$T$GT$6unwrap17h8e9f6f5582436d22E>:
    pub const fn unwrap(self) -> T {
    8000edb8:	1101                	addi	sp,sp,-32
    8000edba:	e42e                	sd	a1,8(sp)
    8000edbc:	e82a                	sd	a0,16(sp)
            Some(val) => val,
    8000edbe:	00a035b3          	snez	a1,a0
    8000edc2:	4581                	li	a1,0
    8000edc4:	00b50463          	beq	a0,a1,8000edcc <_ZN4core6option15Option$LT$T$GT$6unwrap17h8e9f6f5582436d22E+0x14>
    8000edc8:	a009                	j	8000edca <_ZN4core6option15Option$LT$T$GT$6unwrap17h8e9f6f5582436d22E+0x12>
    8000edca:	a831                	j	8000ede6 <.LBB40_5+0x18>
            None => panic!("called `Option::unwrap()` on a `None` value"),
    8000edcc:	6622                	ld	a2,8(sp)

000000008000edce <.LBB40_5>:
    8000edce:	00019517          	auipc	a0,0x19
    8000edd2:	69350513          	addi	a0,a0,1683 # 80028461 <.L__unnamed_1>
    8000edd6:	02b00593          	li	a1,43
    8000edda:	00013097          	auipc	ra,0x13
    8000edde:	49c080e7          	jalr	1180(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8000ede2:	0000                	unimp
        match self {
    8000ede4:	0000                	unimp
            Some(val) => val,
    8000ede6:	6542                	ld	a0,16(sp)
    8000ede8:	ec2a                	sd	a0,24(sp)
    }
    8000edea:	6105                	addi	sp,sp,32
    8000edec:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$6unwrap17h97667cf20f9698d4E:

000000008000edee <_ZN4core6option15Option$LT$T$GT$6unwrap17h97667cf20f9698d4E>:
    pub const fn unwrap(self) -> T {
    8000edee:	1101                	addi	sp,sp,-32
    8000edf0:	e42e                	sd	a1,8(sp)
    8000edf2:	e82a                	sd	a0,16(sp)
            Some(val) => val,
    8000edf4:	00a035b3          	snez	a1,a0
    8000edf8:	4581                	li	a1,0
    8000edfa:	00b50463          	beq	a0,a1,8000ee02 <_ZN4core6option15Option$LT$T$GT$6unwrap17h97667cf20f9698d4E+0x14>
    8000edfe:	a009                	j	8000ee00 <_ZN4core6option15Option$LT$T$GT$6unwrap17h97667cf20f9698d4E+0x12>
    8000ee00:	a831                	j	8000ee1c <.LBB41_5+0x18>
            None => panic!("called `Option::unwrap()` on a `None` value"),
    8000ee02:	6622                	ld	a2,8(sp)

000000008000ee04 <.LBB41_5>:
    8000ee04:	00019517          	auipc	a0,0x19
    8000ee08:	65d50513          	addi	a0,a0,1629 # 80028461 <.L__unnamed_1>
    8000ee0c:	02b00593          	li	a1,43
    8000ee10:	00013097          	auipc	ra,0x13
    8000ee14:	466080e7          	jalr	1126(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8000ee18:	0000                	unimp
        match self {
    8000ee1a:	0000                	unimp
            Some(val) => val,
    8000ee1c:	6542                	ld	a0,16(sp)
    8000ee1e:	ec2a                	sd	a0,24(sp)
    }
    8000ee20:	6105                	addi	sp,sp,32
    8000ee22:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$6unwrap17hc367d03244a4b027E:

000000008000ee24 <_ZN4core6option15Option$LT$T$GT$6unwrap17hc367d03244a4b027E>:
    pub const fn unwrap(self) -> T {
    8000ee24:	1101                	addi	sp,sp,-32
    8000ee26:	e42e                	sd	a1,8(sp)
    8000ee28:	e82a                	sd	a0,16(sp)
            Some(val) => val,
    8000ee2a:	00a035b3          	snez	a1,a0
    8000ee2e:	4581                	li	a1,0
    8000ee30:	00b50463          	beq	a0,a1,8000ee38 <_ZN4core6option15Option$LT$T$GT$6unwrap17hc367d03244a4b027E+0x14>
    8000ee34:	a009                	j	8000ee36 <_ZN4core6option15Option$LT$T$GT$6unwrap17hc367d03244a4b027E+0x12>
    8000ee36:	a831                	j	8000ee52 <.LBB42_5+0x18>
            None => panic!("called `Option::unwrap()` on a `None` value"),
    8000ee38:	6622                	ld	a2,8(sp)

000000008000ee3a <.LBB42_5>:
    8000ee3a:	00019517          	auipc	a0,0x19
    8000ee3e:	62750513          	addi	a0,a0,1575 # 80028461 <.L__unnamed_1>
    8000ee42:	02b00593          	li	a1,43
    8000ee46:	00013097          	auipc	ra,0x13
    8000ee4a:	430080e7          	jalr	1072(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8000ee4e:	0000                	unimp
        match self {
    8000ee50:	0000                	unimp
            Some(val) => val,
    8000ee52:	6542                	ld	a0,16(sp)
    8000ee54:	ec2a                	sd	a0,24(sp)
    }
    8000ee56:	6105                	addi	sp,sp,32
    8000ee58:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$6unwrap17hca45abde8fc82689E:

000000008000ee5a <_ZN4core6option15Option$LT$T$GT$6unwrap17hca45abde8fc82689E>:
    pub const fn unwrap(self) -> T {
    8000ee5a:	1101                	addi	sp,sp,-32
    8000ee5c:	e032                	sd	a2,0(sp)
    8000ee5e:	e42a                	sd	a0,8(sp)
    8000ee60:	e82e                	sd	a1,16(sp)
    8000ee62:	4581                	li	a1,0
            Some(val) => val,
    8000ee64:	00b50463          	beq	a0,a1,8000ee6c <_ZN4core6option15Option$LT$T$GT$6unwrap17hca45abde8fc82689E+0x12>
    8000ee68:	a009                	j	8000ee6a <_ZN4core6option15Option$LT$T$GT$6unwrap17hca45abde8fc82689E+0x10>
    8000ee6a:	a831                	j	8000ee86 <.LBB43_5+0x18>
            None => panic!("called `Option::unwrap()` on a `None` value"),
    8000ee6c:	6602                	ld	a2,0(sp)

000000008000ee6e <.LBB43_5>:
    8000ee6e:	00019517          	auipc	a0,0x19
    8000ee72:	5f350513          	addi	a0,a0,1523 # 80028461 <.L__unnamed_1>
    8000ee76:	02b00593          	li	a1,43
    8000ee7a:	00013097          	auipc	ra,0x13
    8000ee7e:	3fc080e7          	jalr	1020(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8000ee82:	0000                	unimp
        match self {
    8000ee84:	0000                	unimp
            Some(val) => val,
    8000ee86:	6542                	ld	a0,16(sp)
    8000ee88:	ec2a                	sd	a0,24(sp)
    }
    8000ee8a:	6105                	addi	sp,sp,32
    8000ee8c:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$6unwrap17hcaa2b543d69df090E:

000000008000ee8e <_ZN4core6option15Option$LT$T$GT$6unwrap17hcaa2b543d69df090E>:
    pub const fn unwrap(self) -> T {
    8000ee8e:	1101                	addi	sp,sp,-32
    8000ee90:	e42e                	sd	a1,8(sp)
    8000ee92:	e82a                	sd	a0,16(sp)
            Some(val) => val,
    8000ee94:	00a035b3          	snez	a1,a0
    8000ee98:	4581                	li	a1,0
    8000ee9a:	00b50463          	beq	a0,a1,8000eea2 <_ZN4core6option15Option$LT$T$GT$6unwrap17hcaa2b543d69df090E+0x14>
    8000ee9e:	a009                	j	8000eea0 <_ZN4core6option15Option$LT$T$GT$6unwrap17hcaa2b543d69df090E+0x12>
    8000eea0:	a831                	j	8000eebc <.LBB44_5+0x18>
            None => panic!("called `Option::unwrap()` on a `None` value"),
    8000eea2:	6622                	ld	a2,8(sp)

000000008000eea4 <.LBB44_5>:
    8000eea4:	00019517          	auipc	a0,0x19
    8000eea8:	5bd50513          	addi	a0,a0,1469 # 80028461 <.L__unnamed_1>
    8000eeac:	02b00593          	li	a1,43
    8000eeb0:	00013097          	auipc	ra,0x13
    8000eeb4:	3c6080e7          	jalr	966(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8000eeb8:	0000                	unimp
        match self {
    8000eeba:	0000                	unimp
            Some(val) => val,
    8000eebc:	6542                	ld	a0,16(sp)
    8000eebe:	ec2a                	sd	a0,24(sp)
    }
    8000eec0:	6105                	addi	sp,sp,32
    8000eec2:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$6unwrap17he97e68f5d459b5f2E:

000000008000eec4 <_ZN4core6option15Option$LT$T$GT$6unwrap17he97e68f5d459b5f2E>:
    pub const fn unwrap(self) -> T {
    8000eec4:	1101                	addi	sp,sp,-32
    8000eec6:	e032                	sd	a2,0(sp)
    8000eec8:	e42a                	sd	a0,8(sp)
    8000eeca:	e82e                	sd	a1,16(sp)
    8000eecc:	4581                	li	a1,0
            Some(val) => val,
    8000eece:	00b50463          	beq	a0,a1,8000eed6 <_ZN4core6option15Option$LT$T$GT$6unwrap17he97e68f5d459b5f2E+0x12>
    8000eed2:	a009                	j	8000eed4 <_ZN4core6option15Option$LT$T$GT$6unwrap17he97e68f5d459b5f2E+0x10>
    8000eed4:	a831                	j	8000eef0 <.LBB45_5+0x18>
            None => panic!("called `Option::unwrap()` on a `None` value"),
    8000eed6:	6602                	ld	a2,0(sp)

000000008000eed8 <.LBB45_5>:
    8000eed8:	00019517          	auipc	a0,0x19
    8000eedc:	58950513          	addi	a0,a0,1417 # 80028461 <.L__unnamed_1>
    8000eee0:	02b00593          	li	a1,43
    8000eee4:	00013097          	auipc	ra,0x13
    8000eee8:	392080e7          	jalr	914(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8000eeec:	0000                	unimp
        match self {
    8000eeee:	0000                	unimp
            Some(val) => val,
    8000eef0:	6542                	ld	a0,16(sp)
    8000eef2:	ec2a                	sd	a0,24(sp)
    }
    8000eef4:	6105                	addi	sp,sp,32
    8000eef6:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$6unwrap17heec1a84bcf97bc0fE:

000000008000eef8 <_ZN4core6option15Option$LT$T$GT$6unwrap17heec1a84bcf97bc0fE>:
    pub const fn unwrap(self) -> T {
    8000eef8:	1101                	addi	sp,sp,-32
    8000eefa:	e42e                	sd	a1,8(sp)
    8000eefc:	e82a                	sd	a0,16(sp)
            Some(val) => val,
    8000eefe:	00a035b3          	snez	a1,a0
    8000ef02:	4581                	li	a1,0
    8000ef04:	00b50463          	beq	a0,a1,8000ef0c <_ZN4core6option15Option$LT$T$GT$6unwrap17heec1a84bcf97bc0fE+0x14>
    8000ef08:	a009                	j	8000ef0a <_ZN4core6option15Option$LT$T$GT$6unwrap17heec1a84bcf97bc0fE+0x12>
    8000ef0a:	a831                	j	8000ef26 <.LBB46_5+0x18>
            None => panic!("called `Option::unwrap()` on a `None` value"),
    8000ef0c:	6622                	ld	a2,8(sp)

000000008000ef0e <.LBB46_5>:
    8000ef0e:	00019517          	auipc	a0,0x19
    8000ef12:	55350513          	addi	a0,a0,1363 # 80028461 <.L__unnamed_1>
    8000ef16:	02b00593          	li	a1,43
    8000ef1a:	00013097          	auipc	ra,0x13
    8000ef1e:	35c080e7          	jalr	860(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8000ef22:	0000                	unimp
        match self {
    8000ef24:	0000                	unimp
            Some(val) => val,
    8000ef26:	6542                	ld	a0,16(sp)
    8000ef28:	ec2a                	sd	a0,24(sp)
    }
    8000ef2a:	6105                	addi	sp,sp,32
    8000ef2c:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$7is_none17h62fa14fb8476dac2E:

000000008000ef2e <_ZN4core6option15Option$LT$T$GT$7is_none17h62fa14fb8476dac2E>:
    pub const fn is_none(&self) -> bool {
    8000ef2e:	1101                	addi	sp,sp,-32
    8000ef30:	ec06                	sd	ra,24(sp)
    8000ef32:	e82a                	sd	a0,16(sp)
        !self.is_some()
    8000ef34:	00000097          	auipc	ra,0x0
    8000ef38:	054080e7          	jalr	84(ra) # 8000ef88 <_ZN4core6option15Option$LT$T$GT$7is_some17h8c78d3bc0733b234E>
    8000ef3c:	e42a                	sd	a0,8(sp)
    8000ef3e:	a009                	j	8000ef40 <_ZN4core6option15Option$LT$T$GT$7is_none17h62fa14fb8476dac2E+0x12>
    8000ef40:	6522                	ld	a0,8(sp)
    8000ef42:	00154513          	xori	a0,a0,1
    }
    8000ef46:	60e2                	ld	ra,24(sp)
    8000ef48:	6105                	addi	sp,sp,32
    8000ef4a:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$7is_none17h8590a3c5c2d3d42aE:

000000008000ef4c <_ZN4core6option15Option$LT$T$GT$7is_none17h8590a3c5c2d3d42aE>:
    pub const fn is_none(&self) -> bool {
    8000ef4c:	1101                	addi	sp,sp,-32
    8000ef4e:	ec06                	sd	ra,24(sp)
    8000ef50:	e82a                	sd	a0,16(sp)
        !self.is_some()
    8000ef52:	00000097          	auipc	ra,0x0
    8000ef56:	0a8080e7          	jalr	168(ra) # 8000effa <_ZN4core6option15Option$LT$T$GT$7is_some17hd48c331b6466f73fE>
    8000ef5a:	e42a                	sd	a0,8(sp)
    8000ef5c:	a009                	j	8000ef5e <_ZN4core6option15Option$LT$T$GT$7is_none17h8590a3c5c2d3d42aE+0x12>
    8000ef5e:	6522                	ld	a0,8(sp)
    8000ef60:	00154513          	xori	a0,a0,1
    }
    8000ef64:	60e2                	ld	ra,24(sp)
    8000ef66:	6105                	addi	sp,sp,32
    8000ef68:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$7is_none17hbfc07de6cbdc4f1cE:

000000008000ef6a <_ZN4core6option15Option$LT$T$GT$7is_none17hbfc07de6cbdc4f1cE>:
    pub const fn is_none(&self) -> bool {
    8000ef6a:	1101                	addi	sp,sp,-32
    8000ef6c:	ec06                	sd	ra,24(sp)
    8000ef6e:	e82a                	sd	a0,16(sp)
        !self.is_some()
    8000ef70:	00000097          	auipc	ra,0x0
    8000ef74:	064080e7          	jalr	100(ra) # 8000efd4 <_ZN4core6option15Option$LT$T$GT$7is_some17hac194dcf43ce65a0E>
    8000ef78:	e42a                	sd	a0,8(sp)
    8000ef7a:	a009                	j	8000ef7c <_ZN4core6option15Option$LT$T$GT$7is_none17hbfc07de6cbdc4f1cE+0x12>
    8000ef7c:	6522                	ld	a0,8(sp)
    8000ef7e:	00154513          	xori	a0,a0,1
    }
    8000ef82:	60e2                	ld	ra,24(sp)
    8000ef84:	6105                	addi	sp,sp,32
    8000ef86:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$7is_some17h8c78d3bc0733b234E:

000000008000ef88 <_ZN4core6option15Option$LT$T$GT$7is_some17h8c78d3bc0733b234E>:
    pub const fn is_some(&self) -> bool {
    8000ef88:	1141                	addi	sp,sp,-16
    8000ef8a:	e42a                	sd	a0,8(sp)
        matches!(*self, Some(_))
    8000ef8c:	6108                	ld	a0,0(a0)
    8000ef8e:	4581                	li	a1,0
    8000ef90:	00b51763          	bne	a0,a1,8000ef9e <_ZN4core6option15Option$LT$T$GT$7is_some17h8c78d3bc0733b234E+0x16>
    8000ef94:	a009                	j	8000ef96 <_ZN4core6option15Option$LT$T$GT$7is_some17h8c78d3bc0733b234E+0xe>
    8000ef96:	4501                	li	a0,0
    8000ef98:	00a103a3          	sb	a0,7(sp)
    8000ef9c:	a029                	j	8000efa6 <_ZN4core6option15Option$LT$T$GT$7is_some17h8c78d3bc0733b234E+0x1e>
    8000ef9e:	4505                	li	a0,1
    8000efa0:	00a103a3          	sb	a0,7(sp)
    8000efa4:	a009                	j	8000efa6 <_ZN4core6option15Option$LT$T$GT$7is_some17h8c78d3bc0733b234E+0x1e>
    }
    8000efa6:	00714503          	lbu	a0,7(sp)
    8000efaa:	0141                	addi	sp,sp,16
    8000efac:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$7is_some17h901b9974d3eea8b8E:

000000008000efae <_ZN4core6option15Option$LT$T$GT$7is_some17h901b9974d3eea8b8E>:
    pub const fn is_some(&self) -> bool {
    8000efae:	1141                	addi	sp,sp,-16
    8000efb0:	e42a                	sd	a0,8(sp)
        matches!(*self, Some(_))
    8000efb2:	6108                	ld	a0,0(a0)
    8000efb4:	4581                	li	a1,0
    8000efb6:	00b51763          	bne	a0,a1,8000efc4 <_ZN4core6option15Option$LT$T$GT$7is_some17h901b9974d3eea8b8E+0x16>
    8000efba:	a009                	j	8000efbc <_ZN4core6option15Option$LT$T$GT$7is_some17h901b9974d3eea8b8E+0xe>
    8000efbc:	4501                	li	a0,0
    8000efbe:	00a103a3          	sb	a0,7(sp)
    8000efc2:	a029                	j	8000efcc <_ZN4core6option15Option$LT$T$GT$7is_some17h901b9974d3eea8b8E+0x1e>
    8000efc4:	4505                	li	a0,1
    8000efc6:	00a103a3          	sb	a0,7(sp)
    8000efca:	a009                	j	8000efcc <_ZN4core6option15Option$LT$T$GT$7is_some17h901b9974d3eea8b8E+0x1e>
    }
    8000efcc:	00714503          	lbu	a0,7(sp)
    8000efd0:	0141                	addi	sp,sp,16
    8000efd2:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$7is_some17hac194dcf43ce65a0E:

000000008000efd4 <_ZN4core6option15Option$LT$T$GT$7is_some17hac194dcf43ce65a0E>:
    pub const fn is_some(&self) -> bool {
    8000efd4:	1141                	addi	sp,sp,-16
    8000efd6:	e42a                	sd	a0,8(sp)
        matches!(*self, Some(_))
    8000efd8:	6108                	ld	a0,0(a0)
    8000efda:	4581                	li	a1,0
    8000efdc:	00b51763          	bne	a0,a1,8000efea <_ZN4core6option15Option$LT$T$GT$7is_some17hac194dcf43ce65a0E+0x16>
    8000efe0:	a009                	j	8000efe2 <_ZN4core6option15Option$LT$T$GT$7is_some17hac194dcf43ce65a0E+0xe>
    8000efe2:	4501                	li	a0,0
    8000efe4:	00a103a3          	sb	a0,7(sp)
    8000efe8:	a029                	j	8000eff2 <_ZN4core6option15Option$LT$T$GT$7is_some17hac194dcf43ce65a0E+0x1e>
    8000efea:	4505                	li	a0,1
    8000efec:	00a103a3          	sb	a0,7(sp)
    8000eff0:	a009                	j	8000eff2 <_ZN4core6option15Option$LT$T$GT$7is_some17hac194dcf43ce65a0E+0x1e>
    }
    8000eff2:	00714503          	lbu	a0,7(sp)
    8000eff6:	0141                	addi	sp,sp,16
    8000eff8:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$7is_some17hd48c331b6466f73fE:

000000008000effa <_ZN4core6option15Option$LT$T$GT$7is_some17hd48c331b6466f73fE>:
    pub const fn is_some(&self) -> bool {
    8000effa:	1141                	addi	sp,sp,-16
    8000effc:	e42a                	sd	a0,8(sp)
        matches!(*self, Some(_))
    8000effe:	6108                	ld	a0,0(a0)
    8000f000:	4581                	li	a1,0
    8000f002:	00b51763          	bne	a0,a1,8000f010 <_ZN4core6option15Option$LT$T$GT$7is_some17hd48c331b6466f73fE+0x16>
    8000f006:	a009                	j	8000f008 <_ZN4core6option15Option$LT$T$GT$7is_some17hd48c331b6466f73fE+0xe>
    8000f008:	4501                	li	a0,0
    8000f00a:	00a103a3          	sb	a0,7(sp)
    8000f00e:	a029                	j	8000f018 <_ZN4core6option15Option$LT$T$GT$7is_some17hd48c331b6466f73fE+0x1e>
    8000f010:	4505                	li	a0,1
    8000f012:	00a103a3          	sb	a0,7(sp)
    8000f016:	a009                	j	8000f018 <_ZN4core6option15Option$LT$T$GT$7is_some17hd48c331b6466f73fE+0x1e>
    }
    8000f018:	00714503          	lbu	a0,7(sp)
    8000f01c:	0141                	addi	sp,sp,16
    8000f01e:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$7replace17h3b8bd4435d2ae84bE:

000000008000f020 <_ZN4core6option15Option$LT$T$GT$7replace17h3b8bd4435d2ae84bE>:
    /// assert_eq!(x, Some(3));
    /// assert_eq!(old, None);
    /// ```
    #[inline]
    #[stable(feature = "option_replace", since = "1.31.0")]
    pub fn replace(&mut self, value: T) -> Option<T> {
    8000f020:	711d                	addi	sp,sp,-96
    8000f022:	ec86                	sd	ra,88(sp)
    8000f024:	e832                	sd	a2,16(sp)
    8000f026:	ec36                	sd	a3,24(sp)
    8000f028:	e032                	sd	a2,0(sp)
    8000f02a:	e436                	sd	a3,8(sp)
    8000f02c:	e8ae                	sd	a1,80(sp)
        mem::replace(self, Some(value))
    8000f02e:	e0b2                	sd	a2,64(sp)
    8000f030:	e4b6                	sd	a3,72(sp)
    8000f032:	f832                	sd	a2,48(sp)
    8000f034:	fc36                	sd	a3,56(sp)
    8000f036:	4605                	li	a2,1
    8000f038:	f432                	sd	a2,40(sp)
    8000f03a:	1030                	addi	a2,sp,40
    8000f03c:	0000e097          	auipc	ra,0xe
    8000f040:	2f6080e7          	jalr	758(ra) # 8001d332 <_ZN4core3mem7replace17hbc5a7f4d236ddb3dE>
    8000f044:	a009                	j	8000f046 <_ZN4core6option15Option$LT$T$GT$7replace17h3b8bd4435d2ae84bE+0x26>
    }
    8000f046:	60e6                	ld	ra,88(sp)
    8000f048:	6125                	addi	sp,sp,96
    8000f04a:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$7replace17hf852e6bb4a32ec9aE:

000000008000f04c <_ZN4core6option15Option$LT$T$GT$7replace17hf852e6bb4a32ec9aE>:
    pub fn replace(&mut self, value: T) -> Option<T> {
    8000f04c:	7179                	addi	sp,sp,-48
    8000f04e:	f406                	sd	ra,40(sp)
    8000f050:	ec2a                	sd	a0,24(sp)
    8000f052:	f02e                	sd	a1,32(sp)
        mem::replace(self, Some(value))
    8000f054:	e82e                	sd	a1,16(sp)
    8000f056:	0000e097          	auipc	ra,0xe
    8000f05a:	3b8080e7          	jalr	952(ra) # 8001d40e <_ZN4core3mem7replace17hfd1d9a060b66fcb5E>
    8000f05e:	e42a                	sd	a0,8(sp)
    8000f060:	a009                	j	8000f062 <_ZN4core6option15Option$LT$T$GT$7replace17hf852e6bb4a32ec9aE+0x16>
    }
    8000f062:	6522                	ld	a0,8(sp)
    8000f064:	70a2                	ld	ra,40(sp)
    8000f066:	6145                	addi	sp,sp,48
    8000f068:	8082                	ret

Disassembly of section .text._ZN4core6option19Option$LT$$RF$T$GT$6copied17h53fb63a9bdc6d466E:

000000008000f06a <_ZN4core6option19Option$LT$$RF$T$GT$6copied17h53fb63a9bdc6d466E>:
    /// assert_eq!(opt_x, Some(&12));
    /// let copied = opt_x.copied();
    /// assert_eq!(copied, Some(12));
    /// ```
    #[stable(feature = "copied", since = "1.35.0")]
    pub fn copied(self) -> Option<T> {
    8000f06a:	1101                	addi	sp,sp,-32
    8000f06c:	ec06                	sd	ra,24(sp)
    8000f06e:	e82a                	sd	a0,16(sp)
        self.map(|&t| t)
    8000f070:	fffff097          	auipc	ra,0xfffff
    8000f074:	4ec080e7          	jalr	1260(ra) # 8000e55c <_ZN4core6option15Option$LT$T$GT$3map17ha9dd9632468a120eE>
    8000f078:	e02a                	sd	a0,0(sp)
    8000f07a:	e42e                	sd	a1,8(sp)
    8000f07c:	a009                	j	8000f07e <_ZN4core6option19Option$LT$$RF$T$GT$6copied17h53fb63a9bdc6d466E+0x14>
    }
    8000f07e:	65a2                	ld	a1,8(sp)
    8000f080:	6502                	ld	a0,0(sp)
    8000f082:	8905                	andi	a0,a0,1
    8000f084:	60e2                	ld	ra,24(sp)
    8000f086:	6105                	addi	sp,sp,32
    8000f088:	8082                	ret

Disassembly of section .text._ZN4core6option19Option$LT$$RF$T$GT$6copied28_$u7b$$u7b$closure$u7d$$u7d$17ha236d2efbe19b7e0E:

000000008000f08a <_ZN4core6option19Option$LT$$RF$T$GT$6copied28_$u7b$$u7b$closure$u7d$$u7d$17ha236d2efbe19b7e0E>:
        self.map(|&t| t)
    8000f08a:	1101                	addi	sp,sp,-32
    8000f08c:	e82a                	sd	a0,16(sp)
    8000f08e:	00050503          	lb	a0,0(a0)
    8000f092:	00a10fa3          	sb	a0,31(sp)
    8000f096:	6105                	addi	sp,sp,32
    8000f098:	8082                	ret

Disassembly of section .text._ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h8871efd663dd0baaE:

000000008000f09a <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h8871efd663dd0baaE>:
    fn from(t: T) -> T {
    8000f09a:	1141                	addi	sp,sp,-16
    }
    8000f09c:	0141                	addi	sp,sp,16
    8000f09e:	8082                	ret

Disassembly of section .text._ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$10clone_from17hf5f00fe6cb298a0dE:

000000008000f0a0 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$10clone_from17hf5f00fe6cb298a0dE>:
            None => None,
        }
    }

    #[inline]
    fn clone_from(&mut self, source: &Self) {
    8000f0a0:	7159                	addi	sp,sp,-112
    8000f0a2:	f486                	sd	ra,104(sp)
    8000f0a4:	fc2a                	sd	a0,56(sp)
    8000f0a6:	e0ae                	sd	a1,64(sp)
        match (self, source) {
    8000f0a8:	e82a                	sd	a0,16(sp)
    8000f0aa:	ec2e                	sd	a1,24(sp)
            (Some(to), Some(from)) => to.clone_from(from),
    8000f0ac:	6108                	ld	a0,0(a0)
    8000f0ae:	4581                	li	a1,0
    8000f0b0:	00b51e63          	bne	a0,a1,8000f0cc <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$10clone_from17hf5f00fe6cb298a0dE+0x2c>
    8000f0b4:	a009                	j	8000f0b6 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$10clone_from17hf5f00fe6cb298a0dE+0x16>
            (to, from) => *to = from.clone(),
    8000f0b6:	6542                	ld	a0,16(sp)
    8000f0b8:	e02a                	sd	a0,0(sp)
    8000f0ba:	e4aa                	sd	a0,72(sp)
    8000f0bc:	65e2                	ld	a1,24(sp)
    8000f0be:	e8ae                	sd	a1,80(sp)
    8000f0c0:	1008                	addi	a0,sp,32
    8000f0c2:	00000097          	auipc	ra,0x0
    8000f0c6:	092080e7          	jalr	146(ra) # 8000f154 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h97a616a53917bc2aE>
    8000f0ca:	a01d                	j	8000f0f0 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$10clone_from17hf5f00fe6cb298a0dE+0x50>
            (Some(to), Some(from)) => to.clone_from(from),
    8000f0cc:	6562                	ld	a0,24(sp)
    8000f0ce:	6108                	ld	a0,0(a0)
    8000f0d0:	4581                	li	a1,0
    8000f0d2:	feb502e3          	beq	a0,a1,8000f0b6 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$10clone_from17hf5f00fe6cb298a0dE+0x16>
    8000f0d6:	a009                	j	8000f0d8 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$10clone_from17hf5f00fe6cb298a0dE+0x38>
    8000f0d8:	6542                	ld	a0,16(sp)
    8000f0da:	0521                	addi	a0,a0,8
    8000f0dc:	ecaa                	sd	a0,88(sp)
    8000f0de:	65e2                	ld	a1,24(sp)
    8000f0e0:	05a1                	addi	a1,a1,8
    8000f0e2:	f0ae                	sd	a1,96(sp)
    8000f0e4:	ffffa097          	auipc	ra,0xffffa
    8000f0e8:	9e8080e7          	jalr	-1560(ra) # 80008acc <_ZN4core5clone5Clone10clone_from17h4153b3cb0b8f3e29E>
    8000f0ec:	a009                	j	8000f0ee <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$10clone_from17hf5f00fe6cb298a0dE+0x4e>
        match (self, source) {
    8000f0ee:	a039                	j	8000f0fc <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$10clone_from17hf5f00fe6cb298a0dE+0x5c>
            (to, from) => *to = from.clone(),
    8000f0f0:	6502                	ld	a0,0(sp)
    8000f0f2:	ffff8097          	auipc	ra,0xffff8
    8000f0f6:	e5a080e7          	jalr	-422(ra) # 80006f4c <_ZN4core3ptr73drop_in_place$LT$core..option..Option$LT$kernel..fs..inode..Inode$GT$$GT$17h6a7b3b84406d6cdfE>
    8000f0fa:	a021                	j	8000f102 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$10clone_from17hf5f00fe6cb298a0dE+0x62>
        }
    }
    8000f0fc:	70a6                	ld	ra,104(sp)
    8000f0fe:	6165                	addi	sp,sp,112
    8000f100:	8082                	ret
            (to, from) => *to = from.clone(),
    8000f102:	6582                	ld	a1,0(sp)
    8000f104:	7542                	ld	a0,48(sp)
    8000f106:	e988                	sd	a0,16(a1)
    8000f108:	7522                	ld	a0,40(sp)
    8000f10a:	e588                	sd	a0,8(a1)
    8000f10c:	7502                	ld	a0,32(sp)
    8000f10e:	e188                	sd	a0,0(a1)
        match (self, source) {
    8000f110:	b7f5                	j	8000f0fc <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$10clone_from17hf5f00fe6cb298a0dE+0x5c>

Disassembly of section .text._ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h5a88c6bc858442feE:

000000008000f112 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h5a88c6bc858442feE>:
    fn clone(&self) -> Self {
    8000f112:	7139                	addi	sp,sp,-64
    8000f114:	fc06                	sd	ra,56(sp)
    8000f116:	e82a                	sd	a0,16(sp)
    8000f118:	f42a                	sd	a0,40(sp)
            Some(x) => Some(x.clone()),
    8000f11a:	6108                	ld	a0,0(a0)
    8000f11c:	4581                	li	a1,0
    8000f11e:	00b50463          	beq	a0,a1,8000f126 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h5a88c6bc858442feE+0x14>
    8000f122:	a009                	j	8000f124 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h5a88c6bc858442feE+0x12>
    8000f124:	a029                	j	8000f12e <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h5a88c6bc858442feE+0x1c>
    8000f126:	4501                	li	a0,0
            None => None,
    8000f128:	ec2a                	sd	a0,24(sp)
        match self {
    8000f12a:	a005                	j	8000f14a <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h5a88c6bc858442feE+0x38>
    8000f12c:	0000                	unimp
            Some(x) => Some(x.clone()),
    8000f12e:	6542                	ld	a0,16(sp)
    8000f130:	0521                	addi	a0,a0,8
    8000f132:	f82a                	sd	a0,48(sp)
    8000f134:	0000e097          	auipc	ra,0xe
    8000f138:	6ac080e7          	jalr	1708(ra) # 8001d7e0 <_ZN4core5clone5impls62_$LT$impl$u20$core..clone..Clone$u20$for$u20$$BP$mut$u20$T$GT$5clone17hfb2ece9f6678fcc6E>
    8000f13c:	e42a                	sd	a0,8(sp)
    8000f13e:	a009                	j	8000f140 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h5a88c6bc858442feE+0x2e>
    8000f140:	6522                	ld	a0,8(sp)
    8000f142:	f02a                	sd	a0,32(sp)
    8000f144:	4505                	li	a0,1
    8000f146:	ec2a                	sd	a0,24(sp)
        match self {
    8000f148:	a009                	j	8000f14a <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h5a88c6bc858442feE+0x38>
    }
    8000f14a:	6562                	ld	a0,24(sp)
    8000f14c:	7582                	ld	a1,32(sp)
    8000f14e:	70e2                	ld	ra,56(sp)
    8000f150:	6121                	addi	sp,sp,64
    8000f152:	8082                	ret

Disassembly of section .text._ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h97a616a53917bc2aE:

000000008000f154 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h97a616a53917bc2aE>:
    fn clone(&self) -> Self {
    8000f154:	715d                	addi	sp,sp,-80
    8000f156:	e486                	sd	ra,72(sp)
    8000f158:	e02e                	sd	a1,0(sp)
    8000f15a:	e42a                	sd	a0,8(sp)
    8000f15c:	f02e                	sd	a1,32(sp)
            Some(x) => Some(x.clone()),
    8000f15e:	6188                	ld	a0,0(a1)
    8000f160:	4581                	li	a1,0
    8000f162:	00b50463          	beq	a0,a1,8000f16a <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h97a616a53917bc2aE+0x16>
    8000f166:	a009                	j	8000f168 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h97a616a53917bc2aE+0x14>
    8000f168:	a031                	j	8000f174 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h97a616a53917bc2aE+0x20>
    8000f16a:	65a2                	ld	a1,8(sp)
    8000f16c:	4501                	li	a0,0
            None => None,
    8000f16e:	e188                	sd	a0,0(a1)
        match self {
    8000f170:	a035                	j	8000f19c <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h97a616a53917bc2aE+0x48>
    8000f172:	0000                	unimp
            Some(x) => Some(x.clone()),
    8000f174:	6502                	ld	a0,0(sp)
    8000f176:	0521                	addi	a0,a0,8
    8000f178:	f42a                	sd	a0,40(sp)
    8000f17a:	0000c097          	auipc	ra,0xc
    8000f17e:	d10080e7          	jalr	-752(ra) # 8001ae8a <_ZN63_$LT$kernel..fs..inode..Inode$u20$as$u20$core..clone..Clone$GT$5clone17hdd0850fb54e2bc6cE>
    8000f182:	f82a                	sd	a0,48(sp)
    8000f184:	fc2e                	sd	a1,56(sp)
    8000f186:	e82a                	sd	a0,16(sp)
    8000f188:	ec2e                	sd	a1,24(sp)
    8000f18a:	a009                	j	8000f18c <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h97a616a53917bc2aE+0x38>
    8000f18c:	65a2                	ld	a1,8(sp)
    8000f18e:	6562                	ld	a0,24(sp)
    8000f190:	e988                	sd	a0,16(a1)
    8000f192:	6542                	ld	a0,16(sp)
    8000f194:	e588                	sd	a0,8(a1)
    8000f196:	4505                	li	a0,1
    8000f198:	e188                	sd	a0,0(a1)
        match self {
    8000f19a:	a009                	j	8000f19c <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h97a616a53917bc2aE+0x48>
    }
    8000f19c:	60a6                	ld	ra,72(sp)
    8000f19e:	6161                	addi	sp,sp,80
    8000f1a0:	8082                	ret

Disassembly of section .text._ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha5678c3a724a7a2fE:

000000008000f1a2 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha5678c3a724a7a2fE>:
    fn clone(&self) -> Self {
    8000f1a2:	7179                	addi	sp,sp,-48
    8000f1a4:	f406                	sd	ra,40(sp)
    8000f1a6:	e42a                	sd	a0,8(sp)
    8000f1a8:	ec2a                	sd	a0,24(sp)
            Some(x) => Some(x.clone()),
    8000f1aa:	6108                	ld	a0,0(a0)
    8000f1ac:	00a035b3          	snez	a1,a0
    8000f1b0:	4581                	li	a1,0
    8000f1b2:	00b50463          	beq	a0,a1,8000f1ba <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha5678c3a724a7a2fE+0x18>
    8000f1b6:	a009                	j	8000f1b8 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha5678c3a724a7a2fE+0x16>
    8000f1b8:	a029                	j	8000f1c2 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha5678c3a724a7a2fE+0x20>
    8000f1ba:	4501                	li	a0,0
            None => None,
    8000f1bc:	e82a                	sd	a0,16(sp)
        match self {
    8000f1be:	a829                	j	8000f1d8 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha5678c3a724a7a2fE+0x36>
    8000f1c0:	0000                	unimp
            Some(x) => Some(x.clone()),
    8000f1c2:	6522                	ld	a0,8(sp)
    8000f1c4:	f02a                	sd	a0,32(sp)
    8000f1c6:	ffff3097          	auipc	ra,0xffff3
    8000f1ca:	3b0080e7          	jalr	944(ra) # 80002576 <_ZN64_$LT$alloc..sync..Arc$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hd600a08a186c4518E>
    8000f1ce:	e02a                	sd	a0,0(sp)
    8000f1d0:	a009                	j	8000f1d2 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha5678c3a724a7a2fE+0x30>
    8000f1d2:	6502                	ld	a0,0(sp)
    8000f1d4:	e82a                	sd	a0,16(sp)
        match self {
    8000f1d6:	a009                	j	8000f1d8 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha5678c3a724a7a2fE+0x36>
    }
    8000f1d8:	6542                	ld	a0,16(sp)
    8000f1da:	70a2                	ld	ra,40(sp)
    8000f1dc:	6145                	addi	sp,sp,48
    8000f1de:	8082                	ret

Disassembly of section .text._ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17he939c90bc3d2b0caE:

000000008000f1e0 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17he939c90bc3d2b0caE>:
    fn clone(&self) -> Self {
    8000f1e0:	7139                	addi	sp,sp,-64
    8000f1e2:	fc06                	sd	ra,56(sp)
    8000f1e4:	e82a                	sd	a0,16(sp)
    8000f1e6:	f42a                	sd	a0,40(sp)
            Some(x) => Some(x.clone()),
    8000f1e8:	6108                	ld	a0,0(a0)
    8000f1ea:	4581                	li	a1,0
    8000f1ec:	00b50463          	beq	a0,a1,8000f1f4 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17he939c90bc3d2b0caE+0x14>
    8000f1f0:	a009                	j	8000f1f2 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17he939c90bc3d2b0caE+0x12>
    8000f1f2:	a029                	j	8000f1fc <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17he939c90bc3d2b0caE+0x1c>
    8000f1f4:	4501                	li	a0,0
            None => None,
    8000f1f6:	ec2a                	sd	a0,24(sp)
        match self {
    8000f1f8:	a005                	j	8000f218 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17he939c90bc3d2b0caE+0x38>
    8000f1fa:	0000                	unimp
            Some(x) => Some(x.clone()),
    8000f1fc:	6542                	ld	a0,16(sp)
    8000f1fe:	0521                	addi	a0,a0,8
    8000f200:	f82a                	sd	a0,48(sp)
    8000f202:	0000e097          	auipc	ra,0xe
    8000f206:	616080e7          	jalr	1558(ra) # 8001d818 <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$usize$GT$5clone17h35e6cace0a4ed712E>
    8000f20a:	e42a                	sd	a0,8(sp)
    8000f20c:	a009                	j	8000f20e <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17he939c90bc3d2b0caE+0x2e>
    8000f20e:	6522                	ld	a0,8(sp)
    8000f210:	f02a                	sd	a0,32(sp)
    8000f212:	4505                	li	a0,1
    8000f214:	ec2a                	sd	a0,24(sp)
        match self {
    8000f216:	a009                	j	8000f218 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17he939c90bc3d2b0caE+0x38>
    }
    8000f218:	6562                	ld	a0,24(sp)
    8000f21a:	7582                	ld	a1,32(sp)
    8000f21c:	70e2                	ld	ra,56(sp)
    8000f21e:	6121                	addi	sp,sp,64
    8000f220:	8082                	ret

Disassembly of section .text._ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h22f2f1fa04d4de26E:

000000008000f222 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h22f2f1fa04d4de26E>:
    fn from_ok(v: T) -> Self {
        Some(v)
    }

    #[inline]
    fn from_error(_: NoneError) -> Self {
    8000f222:	1101                	addi	sp,sp,-32
    8000f224:	4581                	li	a1,0
        None
    8000f226:	e82e                	sd	a1,16(sp)
    }
    8000f228:	6522                	ld	a0,8(sp)
    8000f22a:	6105                	addi	sp,sp,32
    8000f22c:	8082                	ret

Disassembly of section .text._ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h35e87322ea53eeb5E:

000000008000f22e <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h35e87322ea53eeb5E>:
    fn from_error(_: NoneError) -> Self {
    8000f22e:	1141                	addi	sp,sp,-16
    8000f230:	4501                	li	a0,0
        None
    8000f232:	c02a                	sw	a0,0(sp)
    }
    8000f234:	4592                	lw	a1,4(sp)
    8000f236:	0141                	addi	sp,sp,16
    8000f238:	8082                	ret

Disassembly of section .text._ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h90575ee4c84cb448E:

000000008000f23a <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h90575ee4c84cb448E>:
    fn into_result(self) -> Result<T, NoneError> {
    8000f23a:	1101                	addi	sp,sp,-32
    8000f23c:	ec06                	sd	ra,24(sp)
    8000f23e:	e82a                	sd	a0,16(sp)
        self.ok_or(NoneError)
    8000f240:	fffff097          	auipc	ra,0xfffff
    8000f244:	502080e7          	jalr	1282(ra) # 8000e742 <_ZN4core6option15Option$LT$T$GT$5ok_or17h53f933033be30818E>
    8000f248:	e42a                	sd	a0,8(sp)
    8000f24a:	a009                	j	8000f24c <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h90575ee4c84cb448E+0x12>
    }
    8000f24c:	6522                	ld	a0,8(sp)
    8000f24e:	60e2                	ld	ra,24(sp)
    8000f250:	6105                	addi	sp,sp,32
    8000f252:	8082                	ret

Disassembly of section .text._ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hce0d66149b699885E:

000000008000f254 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hce0d66149b699885E>:
    fn into_result(self) -> Result<T, NoneError> {
    8000f254:	1101                	addi	sp,sp,-32
    8000f256:	ec06                	sd	ra,24(sp)
    8000f258:	e82a                	sd	a0,16(sp)
        self.ok_or(NoneError)
    8000f25a:	fffff097          	auipc	ra,0xfffff
    8000f25e:	6f0080e7          	jalr	1776(ra) # 8000e94a <_ZN4core6option15Option$LT$T$GT$5ok_or17hfa0f5f38e365ca74E>
    8000f262:	e42a                	sd	a0,8(sp)
    8000f264:	a009                	j	8000f266 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hce0d66149b699885E+0x12>
    }
    8000f266:	6522                	ld	a0,8(sp)
    8000f268:	60e2                	ld	ra,24(sp)
    8000f26a:	6105                	addi	sp,sp,32
    8000f26c:	8082                	ret

Disassembly of section .text._ZN72_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..default..Default$GT$7default17h216c24bc3f109328E:

000000008000f26e <_ZN72_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..default..Default$GT$7default17h216c24bc3f109328E>:
    fn default() -> Option<T> {
    8000f26e:	1141                	addi	sp,sp,-16
    8000f270:	4501                	li	a0,0
        None
    8000f272:	e02a                	sd	a0,0(sp)
    }
    8000f274:	65a2                	ld	a1,8(sp)
    8000f276:	0141                	addi	sp,sp,16
    8000f278:	8082                	ret

Disassembly of section .text._ZN72_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..default..Default$GT$7default17h459b0dfcf4f19fffE:

000000008000f27a <_ZN72_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..default..Default$GT$7default17h459b0dfcf4f19fffE>:
    fn default() -> Option<T> {
    8000f27a:	1141                	addi	sp,sp,-16
    8000f27c:	4501                	li	a0,0
        None
    8000f27e:	e42a                	sd	a0,8(sp)
    }
    8000f280:	0141                	addi	sp,sp,16
    8000f282:	8082                	ret

Disassembly of section .text._ZN72_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..default..Default$GT$7default17h9e7fcea49a91f0edE:

000000008000f284 <_ZN72_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..default..Default$GT$7default17h9e7fcea49a91f0edE>:
    fn default() -> Option<T> {
    8000f284:	1141                	addi	sp,sp,-16
    8000f286:	4501                	li	a0,0
        None
    8000f288:	e02a                	sd	a0,0(sp)
    }
    8000f28a:	65a2                	ld	a1,8(sp)
    8000f28c:	0141                	addi	sp,sp,16
    8000f28e:	8082                	ret

Disassembly of section .text._ZN72_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..default..Default$GT$7default17hbc90300349db98aaE:

000000008000f290 <_ZN72_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..default..Default$GT$7default17hbc90300349db98aaE>:
    fn default() -> Option<T> {
    8000f290:	1141                	addi	sp,sp,-16
    8000f292:	4501                	li	a0,0
        None
    8000f294:	e42a                	sd	a0,8(sp)
    }
    8000f296:	0141                	addi	sp,sp,16
    8000f298:	8082                	ret

Disassembly of section .text._ZN119_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$core..ptr..unique..Unique$LT$T$GT$$GT$$GT$4from17h163e90b2907f9865E:

000000008000f29a <_ZN119_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$core..ptr..unique..Unique$LT$T$GT$$GT$$GT$4from17h163e90b2907f9865E>:
}

#[unstable(feature = "ptr_internals", issue = "none")]
impl<T: ?Sized> From<Unique<T>> for NonNull<T> {
    #[inline]
    fn from(unique: Unique<T>) -> Self {
    8000f29a:	1101                	addi	sp,sp,-32
    8000f29c:	ec06                	sd	ra,24(sp)
    8000f29e:	e82a                	sd	a0,16(sp)
        // SAFETY: A Unique pointer cannot be null, so the conditions for
        // new_unchecked() are respected.
        unsafe { NonNull::new_unchecked(unique.as_ptr()) }
    8000f2a0:	ffffd097          	auipc	ra,0xffffd
    8000f2a4:	97e080e7          	jalr	-1666(ra) # 8000bc1e <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17hc428d38b809aa8c2E>
    8000f2a8:	e42a                	sd	a0,8(sp)
    8000f2aa:	a009                	j	8000f2ac <_ZN119_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$core..ptr..unique..Unique$LT$T$GT$$GT$$GT$4from17h163e90b2907f9865E+0x12>
    8000f2ac:	6522                	ld	a0,8(sp)
    8000f2ae:	00000097          	auipc	ra,0x0
    8000f2b2:	036080e7          	jalr	54(ra) # 8000f2e4 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h5ed8fa4a56812246E>
    8000f2b6:	e02a                	sd	a0,0(sp)
    8000f2b8:	a009                	j	8000f2ba <_ZN119_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$core..ptr..unique..Unique$LT$T$GT$$GT$$GT$4from17h163e90b2907f9865E+0x20>
    }
    8000f2ba:	6502                	ld	a0,0(sp)
    8000f2bc:	60e2                	ld	ra,24(sp)
    8000f2be:	6105                	addi	sp,sp,32
    8000f2c0:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h0fdb76b0b758b1a8E:

000000008000f2c2 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h0fdb76b0b758b1a8E>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
    8000f2c2:	1141                	addi	sp,sp,-16
    8000f2c4:	e42a                	sd	a0,8(sp)
        unsafe { NonNull { pointer: ptr as _ } }
    8000f2c6:	e02a                	sd	a0,0(sp)
    }
    8000f2c8:	0141                	addi	sp,sp,16
    8000f2ca:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h39caf58a5e84bcebE:

000000008000f2cc <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h39caf58a5e84bcebE>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
    8000f2cc:	1141                	addi	sp,sp,-16
    8000f2ce:	e42a                	sd	a0,8(sp)
        unsafe { NonNull { pointer: ptr as _ } }
    8000f2d0:	e02a                	sd	a0,0(sp)
    }
    8000f2d2:	0141                	addi	sp,sp,16
    8000f2d4:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h590958fa24c9c418E:

000000008000f2d6 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h590958fa24c9c418E>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
    8000f2d6:	1101                	addi	sp,sp,-32
    8000f2d8:	e82a                	sd	a0,16(sp)
    8000f2da:	ec2e                	sd	a1,24(sp)
        unsafe { NonNull { pointer: ptr as _ } }
    8000f2dc:	e02a                	sd	a0,0(sp)
    8000f2de:	e42e                	sd	a1,8(sp)
    }
    8000f2e0:	6105                	addi	sp,sp,32
    8000f2e2:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h5ed8fa4a56812246E:

000000008000f2e4 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h5ed8fa4a56812246E>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
    8000f2e4:	1141                	addi	sp,sp,-16
    8000f2e6:	e42a                	sd	a0,8(sp)
        unsafe { NonNull { pointer: ptr as _ } }
    8000f2e8:	e02a                	sd	a0,0(sp)
    }
    8000f2ea:	0141                	addi	sp,sp,16
    8000f2ec:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h8c61f83afe42e5a2E:

000000008000f2ee <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h8c61f83afe42e5a2E>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
    8000f2ee:	1141                	addi	sp,sp,-16
    8000f2f0:	e42a                	sd	a0,8(sp)
        unsafe { NonNull { pointer: ptr as _ } }
    8000f2f2:	e02a                	sd	a0,0(sp)
    }
    8000f2f4:	0141                	addi	sp,sp,16
    8000f2f6:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17hb7c70ed4b69f095cE:

000000008000f2f8 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17hb7c70ed4b69f095cE>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
    8000f2f8:	1141                	addi	sp,sp,-16
    8000f2fa:	e42a                	sd	a0,8(sp)
        unsafe { NonNull { pointer: ptr as _ } }
    8000f2fc:	e02a                	sd	a0,0(sp)
    }
    8000f2fe:	0141                	addi	sp,sp,16
    8000f300:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17hd62713267129dcbeE:

000000008000f302 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17hd62713267129dcbeE>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
    8000f302:	1141                	addi	sp,sp,-16
    8000f304:	e42a                	sd	a0,8(sp)
        unsafe { NonNull { pointer: ptr as _ } }
    8000f306:	e02a                	sd	a0,0(sp)
    }
    8000f308:	0141                	addi	sp,sp,16
    8000f30a:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17he6e2e3c661183ac0E:

000000008000f30c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17he6e2e3c661183ac0E>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
    8000f30c:	1141                	addi	sp,sp,-16
    8000f30e:	e42a                	sd	a0,8(sp)
        unsafe { NonNull { pointer: ptr as _ } }
    8000f310:	e02a                	sd	a0,0(sp)
    }
    8000f312:	0141                	addi	sp,sp,16
    8000f314:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17he8eb4f7b6f10823eE:

000000008000f316 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17he8eb4f7b6f10823eE>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
    8000f316:	1141                	addi	sp,sp,-16
    8000f318:	e42a                	sd	a0,8(sp)
        unsafe { NonNull { pointer: ptr as _ } }
    8000f31a:	e02a                	sd	a0,0(sp)
    }
    8000f31c:	0141                	addi	sp,sp,16
    8000f31e:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17hf41e3912db402547E:

000000008000f320 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17hf41e3912db402547E>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
    8000f320:	1141                	addi	sp,sp,-16
    8000f322:	e42a                	sd	a0,8(sp)
        unsafe { NonNull { pointer: ptr as _ } }
    8000f324:	e02a                	sd	a0,0(sp)
    }
    8000f326:	0141                	addi	sp,sp,16
    8000f328:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17hfa67d7222a1c22a5E:

000000008000f32a <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17hfa67d7222a1c22a5E>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
    8000f32a:	1141                	addi	sp,sp,-16
    8000f32c:	e42a                	sd	a0,8(sp)
        unsafe { NonNull { pointer: ptr as _ } }
    8000f32e:	e02a                	sd	a0,0(sp)
    }
    8000f330:	0141                	addi	sp,sp,16
    8000f332:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h190cd254f5945591E:

000000008000f334 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h190cd254f5945591E>:
    pub fn new(ptr: *mut T) -> Option<Self> {
    8000f334:	7179                	addi	sp,sp,-48
    8000f336:	f406                	sd	ra,40(sp)
    8000f338:	e42a                	sd	a0,8(sp)
    8000f33a:	f02a                	sd	a0,32(sp)
        if !ptr.is_null() {
    8000f33c:	00002097          	auipc	ra,0x2
    8000f340:	62e080e7          	jalr	1582(ra) # 8001196a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17he6d08a4a98c1735bE>
    8000f344:	e82a                	sd	a0,16(sp)
    8000f346:	a009                	j	8000f348 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h190cd254f5945591E+0x14>
    8000f348:	6542                	ld	a0,16(sp)
    8000f34a:	e909                	bnez	a0,8000f35c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h190cd254f5945591E+0x28>
    8000f34c:	a009                	j	8000f34e <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h190cd254f5945591E+0x1a>
            Some(unsafe { Self::new_unchecked(ptr) })
    8000f34e:	6522                	ld	a0,8(sp)
    8000f350:	00000097          	auipc	ra,0x0
    8000f354:	fbc080e7          	jalr	-68(ra) # 8000f30c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17he6e2e3c661183ac0E>
    8000f358:	e02a                	sd	a0,0(sp)
    8000f35a:	a021                	j	8000f362 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h190cd254f5945591E+0x2e>
    8000f35c:	4501                	li	a0,0
            None
    8000f35e:	ec2a                	sd	a0,24(sp)
        if !ptr.is_null() {
    8000f360:	a021                	j	8000f368 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h190cd254f5945591E+0x34>
            Some(unsafe { Self::new_unchecked(ptr) })
    8000f362:	6502                	ld	a0,0(sp)
    8000f364:	ec2a                	sd	a0,24(sp)
        if !ptr.is_null() {
    8000f366:	a009                	j	8000f368 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h190cd254f5945591E+0x34>
    }
    8000f368:	6562                	ld	a0,24(sp)
    8000f36a:	70a2                	ld	ra,40(sp)
    8000f36c:	6145                	addi	sp,sp,48
    8000f36e:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h3fba838d6c025de4E:

000000008000f370 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h3fba838d6c025de4E>:
    pub fn new(ptr: *mut T) -> Option<Self> {
    8000f370:	7179                	addi	sp,sp,-48
    8000f372:	f406                	sd	ra,40(sp)
    8000f374:	e42a                	sd	a0,8(sp)
    8000f376:	f02a                	sd	a0,32(sp)
        if !ptr.is_null() {
    8000f378:	00010097          	auipc	ra,0x10
    8000f37c:	40a080e7          	jalr	1034(ra) # 8001f782 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hba478e65ea6353f9E>
    8000f380:	e82a                	sd	a0,16(sp)
    8000f382:	a009                	j	8000f384 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h3fba838d6c025de4E+0x14>
    8000f384:	6542                	ld	a0,16(sp)
    8000f386:	e909                	bnez	a0,8000f398 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h3fba838d6c025de4E+0x28>
    8000f388:	a009                	j	8000f38a <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h3fba838d6c025de4E+0x1a>
            Some(unsafe { Self::new_unchecked(ptr) })
    8000f38a:	6522                	ld	a0,8(sp)
    8000f38c:	00000097          	auipc	ra,0x0
    8000f390:	f58080e7          	jalr	-168(ra) # 8000f2e4 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h5ed8fa4a56812246E>
    8000f394:	e02a                	sd	a0,0(sp)
    8000f396:	a021                	j	8000f39e <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h3fba838d6c025de4E+0x2e>
    8000f398:	4501                	li	a0,0
            None
    8000f39a:	ec2a                	sd	a0,24(sp)
        if !ptr.is_null() {
    8000f39c:	a021                	j	8000f3a4 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h3fba838d6c025de4E+0x34>
            Some(unsafe { Self::new_unchecked(ptr) })
    8000f39e:	6502                	ld	a0,0(sp)
    8000f3a0:	ec2a                	sd	a0,24(sp)
        if !ptr.is_null() {
    8000f3a2:	a009                	j	8000f3a4 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h3fba838d6c025de4E+0x34>
    }
    8000f3a4:	6562                	ld	a0,24(sp)
    8000f3a6:	70a2                	ld	ra,40(sp)
    8000f3a8:	6145                	addi	sp,sp,48
    8000f3aa:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h280b1a52f32358efE:

000000008000f3ac <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h280b1a52f32358efE>:
    pub const fn cast<U>(self) -> NonNull<U> {
    8000f3ac:	7179                	addi	sp,sp,-48
    8000f3ae:	f406                	sd	ra,40(sp)
    8000f3b0:	ec2a                	sd	a0,24(sp)
    8000f3b2:	f02e                	sd	a1,32(sp)
        unsafe { NonNull::new_unchecked(self.as_ptr() as *mut U) }
    8000f3b4:	00000097          	auipc	ra,0x0
    8000f3b8:	158080e7          	jalr	344(ra) # 8000f50c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h8eef1d8fb3aa5851E>
    8000f3bc:	e82a                	sd	a0,16(sp)
    8000f3be:	a009                	j	8000f3c0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h280b1a52f32358efE+0x14>
    8000f3c0:	6542                	ld	a0,16(sp)
    8000f3c2:	00000097          	auipc	ra,0x0
    8000f3c6:	f2c080e7          	jalr	-212(ra) # 8000f2ee <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h8c61f83afe42e5a2E>
    8000f3ca:	e42a                	sd	a0,8(sp)
    8000f3cc:	a009                	j	8000f3ce <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h280b1a52f32358efE+0x22>
    }
    8000f3ce:	6522                	ld	a0,8(sp)
    8000f3d0:	70a2                	ld	ra,40(sp)
    8000f3d2:	6145                	addi	sp,sp,48
    8000f3d4:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h4354690cb24a4e56E:

000000008000f3d6 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h4354690cb24a4e56E>:
    pub const fn cast<U>(self) -> NonNull<U> {
    8000f3d6:	7179                	addi	sp,sp,-48
    8000f3d8:	f406                	sd	ra,40(sp)
    8000f3da:	ec2a                	sd	a0,24(sp)
    8000f3dc:	f02e                	sd	a1,32(sp)
        unsafe { NonNull::new_unchecked(self.as_ptr() as *mut U) }
    8000f3de:	00000097          	auipc	ra,0x0
    8000f3e2:	12e080e7          	jalr	302(ra) # 8000f50c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h8eef1d8fb3aa5851E>
    8000f3e6:	e82a                	sd	a0,16(sp)
    8000f3e8:	a009                	j	8000f3ea <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h4354690cb24a4e56E+0x14>
    8000f3ea:	6542                	ld	a0,16(sp)
    8000f3ec:	00000097          	auipc	ra,0x0
    8000f3f0:	ed6080e7          	jalr	-298(ra) # 8000f2c2 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h0fdb76b0b758b1a8E>
    8000f3f4:	e42a                	sd	a0,8(sp)
    8000f3f6:	a009                	j	8000f3f8 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h4354690cb24a4e56E+0x22>
    }
    8000f3f8:	6522                	ld	a0,8(sp)
    8000f3fa:	70a2                	ld	ra,40(sp)
    8000f3fc:	6145                	addi	sp,sp,48
    8000f3fe:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h535f2787d46a2a35E:

000000008000f400 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h535f2787d46a2a35E>:
    pub const fn cast<U>(self) -> NonNull<U> {
    8000f400:	7179                	addi	sp,sp,-48
    8000f402:	f406                	sd	ra,40(sp)
    8000f404:	ec2a                	sd	a0,24(sp)
    8000f406:	f02e                	sd	a1,32(sp)
        unsafe { NonNull::new_unchecked(self.as_ptr() as *mut U) }
    8000f408:	00000097          	auipc	ra,0x0
    8000f40c:	104080e7          	jalr	260(ra) # 8000f50c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h8eef1d8fb3aa5851E>
    8000f410:	e82a                	sd	a0,16(sp)
    8000f412:	a009                	j	8000f414 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h535f2787d46a2a35E+0x14>
    8000f414:	6542                	ld	a0,16(sp)
    8000f416:	00000097          	auipc	ra,0x0
    8000f41a:	eb6080e7          	jalr	-330(ra) # 8000f2cc <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h39caf58a5e84bcebE>
    8000f41e:	e42a                	sd	a0,8(sp)
    8000f420:	a009                	j	8000f422 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h535f2787d46a2a35E+0x22>
    }
    8000f422:	6522                	ld	a0,8(sp)
    8000f424:	70a2                	ld	ra,40(sp)
    8000f426:	6145                	addi	sp,sp,48
    8000f428:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h7831112f0067c5f4E:

000000008000f42a <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h7831112f0067c5f4E>:
    pub const fn cast<U>(self) -> NonNull<U> {
    8000f42a:	1101                	addi	sp,sp,-32
    8000f42c:	ec06                	sd	ra,24(sp)
    8000f42e:	e82a                	sd	a0,16(sp)
        unsafe { NonNull::new_unchecked(self.as_ptr() as *mut U) }
    8000f430:	00000097          	auipc	ra,0x0
    8000f434:	106080e7          	jalr	262(ra) # 8000f536 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17hc25f2e50aadb25dbE>
    8000f438:	e42a                	sd	a0,8(sp)
    8000f43a:	a009                	j	8000f43c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h7831112f0067c5f4E+0x12>
    8000f43c:	6522                	ld	a0,8(sp)
    8000f43e:	00000097          	auipc	ra,0x0
    8000f442:	ea6080e7          	jalr	-346(ra) # 8000f2e4 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h5ed8fa4a56812246E>
    8000f446:	e02a                	sd	a0,0(sp)
    8000f448:	a009                	j	8000f44a <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h7831112f0067c5f4E+0x20>
    }
    8000f44a:	6502                	ld	a0,0(sp)
    8000f44c:	60e2                	ld	ra,24(sp)
    8000f44e:	6105                	addi	sp,sp,32
    8000f450:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h85615dabbcfe0ebdE:

000000008000f452 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h85615dabbcfe0ebdE>:
    pub const fn cast<U>(self) -> NonNull<U> {
    8000f452:	7179                	addi	sp,sp,-48
    8000f454:	f406                	sd	ra,40(sp)
    8000f456:	ec2a                	sd	a0,24(sp)
    8000f458:	f02e                	sd	a1,32(sp)
        unsafe { NonNull::new_unchecked(self.as_ptr() as *mut U) }
    8000f45a:	00000097          	auipc	ra,0x0
    8000f45e:	0b2080e7          	jalr	178(ra) # 8000f50c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h8eef1d8fb3aa5851E>
    8000f462:	e82a                	sd	a0,16(sp)
    8000f464:	a009                	j	8000f466 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h85615dabbcfe0ebdE+0x14>
    8000f466:	6542                	ld	a0,16(sp)
    8000f468:	00000097          	auipc	ra,0x0
    8000f46c:	ec2080e7          	jalr	-318(ra) # 8000f32a <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17hfa67d7222a1c22a5E>
    8000f470:	e42a                	sd	a0,8(sp)
    8000f472:	a009                	j	8000f474 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h85615dabbcfe0ebdE+0x22>
    }
    8000f474:	6522                	ld	a0,8(sp)
    8000f476:	70a2                	ld	ra,40(sp)
    8000f478:	6145                	addi	sp,sp,48
    8000f47a:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17he3c6d28f0e68e811E:

000000008000f47c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17he3c6d28f0e68e811E>:
    pub const fn cast<U>(self) -> NonNull<U> {
    8000f47c:	7179                	addi	sp,sp,-48
    8000f47e:	f406                	sd	ra,40(sp)
    8000f480:	ec2a                	sd	a0,24(sp)
    8000f482:	f02e                	sd	a1,32(sp)
        unsafe { NonNull::new_unchecked(self.as_ptr() as *mut U) }
    8000f484:	00000097          	auipc	ra,0x0
    8000f488:	088080e7          	jalr	136(ra) # 8000f50c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h8eef1d8fb3aa5851E>
    8000f48c:	e82a                	sd	a0,16(sp)
    8000f48e:	a009                	j	8000f490 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17he3c6d28f0e68e811E+0x14>
    8000f490:	6542                	ld	a0,16(sp)
    8000f492:	00000097          	auipc	ra,0x0
    8000f496:	e52080e7          	jalr	-430(ra) # 8000f2e4 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h5ed8fa4a56812246E>
    8000f49a:	e42a                	sd	a0,8(sp)
    8000f49c:	a009                	j	8000f49e <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17he3c6d28f0e68e811E+0x22>
    }
    8000f49e:	6522                	ld	a0,8(sp)
    8000f4a0:	70a2                	ld	ra,40(sp)
    8000f4a2:	6145                	addi	sp,sp,48
    8000f4a4:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17hf78234e23d9835f1E:

000000008000f4a6 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17hf78234e23d9835f1E>:
    pub const fn cast<U>(self) -> NonNull<U> {
    8000f4a6:	7179                	addi	sp,sp,-48
    8000f4a8:	f406                	sd	ra,40(sp)
    8000f4aa:	ec2a                	sd	a0,24(sp)
    8000f4ac:	f02e                	sd	a1,32(sp)
        unsafe { NonNull::new_unchecked(self.as_ptr() as *mut U) }
    8000f4ae:	00000097          	auipc	ra,0x0
    8000f4b2:	05e080e7          	jalr	94(ra) # 8000f50c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h8eef1d8fb3aa5851E>
    8000f4b6:	e82a                	sd	a0,16(sp)
    8000f4b8:	a009                	j	8000f4ba <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17hf78234e23d9835f1E+0x14>
    8000f4ba:	6542                	ld	a0,16(sp)
    8000f4bc:	00000097          	auipc	ra,0x0
    8000f4c0:	e3c080e7          	jalr	-452(ra) # 8000f2f8 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17hb7c70ed4b69f095cE>
    8000f4c4:	e42a                	sd	a0,8(sp)
    8000f4c6:	a009                	j	8000f4c8 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17hf78234e23d9835f1E+0x22>
    }
    8000f4c8:	6522                	ld	a0,8(sp)
    8000f4ca:	70a2                	ld	ra,40(sp)
    8000f4cc:	6145                	addi	sp,sp,48
    8000f4ce:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_mut17h0bb096450dabbbf6E:

000000008000f4d0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_mut17h0bb096450dabbbf6E>:
    pub unsafe fn as_mut<'a>(&mut self) -> &'a mut T {
    8000f4d0:	1101                	addi	sp,sp,-32
    8000f4d2:	ec06                	sd	ra,24(sp)
    8000f4d4:	e82a                	sd	a0,16(sp)
        unsafe { &mut *self.as_ptr() }
    8000f4d6:	6108                	ld	a0,0(a0)
    8000f4d8:	00000097          	auipc	ra,0x0
    8000f4dc:	02c080e7          	jalr	44(ra) # 8000f504 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h7c6e4b893f33870bE>
    8000f4e0:	e42a                	sd	a0,8(sp)
    8000f4e2:	a009                	j	8000f4e4 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_mut17h0bb096450dabbbf6E+0x14>
    }
    8000f4e4:	6522                	ld	a0,8(sp)
    8000f4e6:	60e2                	ld	ra,24(sp)
    8000f4e8:	6105                	addi	sp,sp,32
    8000f4ea:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h4054fe6794409e65E:

000000008000f4ec <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h4054fe6794409e65E>:
    pub const fn as_ptr(self) -> *mut T {
    8000f4ec:	1141                	addi	sp,sp,-16
    8000f4ee:	e42a                	sd	a0,8(sp)
    }
    8000f4f0:	0141                	addi	sp,sp,16
    8000f4f2:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h593c20a0c1123d02E:

000000008000f4f4 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h593c20a0c1123d02E>:
    pub const fn as_ptr(self) -> *mut T {
    8000f4f4:	1141                	addi	sp,sp,-16
    8000f4f6:	e42a                	sd	a0,8(sp)
    }
    8000f4f8:	0141                	addi	sp,sp,16
    8000f4fa:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h729713db2b300d39E:

000000008000f4fc <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h729713db2b300d39E>:
    pub const fn as_ptr(self) -> *mut T {
    8000f4fc:	1141                	addi	sp,sp,-16
    8000f4fe:	e42a                	sd	a0,8(sp)
    }
    8000f500:	0141                	addi	sp,sp,16
    8000f502:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h7c6e4b893f33870bE:

000000008000f504 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h7c6e4b893f33870bE>:
    pub const fn as_ptr(self) -> *mut T {
    8000f504:	1141                	addi	sp,sp,-16
    8000f506:	e42a                	sd	a0,8(sp)
    }
    8000f508:	0141                	addi	sp,sp,16
    8000f50a:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h8eef1d8fb3aa5851E:

000000008000f50c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h8eef1d8fb3aa5851E>:
    pub const fn as_ptr(self) -> *mut T {
    8000f50c:	1141                	addi	sp,sp,-16
    8000f50e:	e02a                	sd	a0,0(sp)
    8000f510:	e42e                	sd	a1,8(sp)
    }
    8000f512:	0141                	addi	sp,sp,16
    8000f514:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h911cddd192dc1ebbE:

000000008000f516 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h911cddd192dc1ebbE>:
    pub const fn as_ptr(self) -> *mut T {
    8000f516:	1141                	addi	sp,sp,-16
    8000f518:	e42a                	sd	a0,8(sp)
    }
    8000f51a:	0141                	addi	sp,sp,16
    8000f51c:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h9b02cb35a46880f1E:

000000008000f51e <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h9b02cb35a46880f1E>:
    pub const fn as_ptr(self) -> *mut T {
    8000f51e:	1141                	addi	sp,sp,-16
    8000f520:	e42a                	sd	a0,8(sp)
    }
    8000f522:	0141                	addi	sp,sp,16
    8000f524:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17habcb33ad0b4dc302E:

000000008000f526 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17habcb33ad0b4dc302E>:
    pub const fn as_ptr(self) -> *mut T {
    8000f526:	1141                	addi	sp,sp,-16
    8000f528:	e42a                	sd	a0,8(sp)
    }
    8000f52a:	0141                	addi	sp,sp,16
    8000f52c:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haf282fdd0407a8a4E:

000000008000f52e <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haf282fdd0407a8a4E>:
    pub const fn as_ptr(self) -> *mut T {
    8000f52e:	1141                	addi	sp,sp,-16
    8000f530:	e42a                	sd	a0,8(sp)
    }
    8000f532:	0141                	addi	sp,sp,16
    8000f534:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17hc25f2e50aadb25dbE:

000000008000f536 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17hc25f2e50aadb25dbE>:
    pub const fn as_ptr(self) -> *mut T {
    8000f536:	1141                	addi	sp,sp,-16
    8000f538:	e42a                	sd	a0,8(sp)
    }
    8000f53a:	0141                	addi	sp,sp,16
    8000f53c:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17hd337d3c0c1677ef4E:

000000008000f53e <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17hd337d3c0c1677ef4E>:
    pub const fn as_ptr(self) -> *mut T {
    8000f53e:	1141                	addi	sp,sp,-16
    8000f540:	e42a                	sd	a0,8(sp)
    }
    8000f542:	0141                	addi	sp,sp,16
    8000f544:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17hfb12dd33ea904ed8E:

000000008000f546 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17hfb12dd33ea904ed8E>:
    pub const fn as_ptr(self) -> *mut T {
    8000f546:	1141                	addi	sp,sp,-16
    8000f548:	e42a                	sd	a0,8(sp)
    }
    8000f54a:	0141                	addi	sp,sp,16
    8000f54c:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ref17hb658835e636047c4E:

000000008000f54e <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ref17hb658835e636047c4E>:
    pub unsafe fn as_ref<'a>(&self) -> &'a T {
    8000f54e:	1101                	addi	sp,sp,-32
    8000f550:	ec06                	sd	ra,24(sp)
    8000f552:	e82a                	sd	a0,16(sp)
        unsafe { &*self.as_ptr() }
    8000f554:	6108                	ld	a0,0(a0)
    8000f556:	00000097          	auipc	ra,0x0
    8000f55a:	fe0080e7          	jalr	-32(ra) # 8000f536 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17hc25f2e50aadb25dbE>
    8000f55e:	e42a                	sd	a0,8(sp)
    8000f560:	a009                	j	8000f562 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ref17hb658835e636047c4E+0x14>
    }
    8000f562:	6522                	ld	a0,8(sp)
    8000f564:	60e2                	ld	ra,24(sp)
    8000f566:	6105                	addi	sp,sp,32
    8000f568:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$10as_mut_ptr17h1a3f7b42026c1de6E:

000000008000f56a <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$10as_mut_ptr17h1a3f7b42026c1de6E>:
    pub const fn as_mut_ptr(self) -> *mut T {
    8000f56a:	7179                	addi	sp,sp,-48
    8000f56c:	f406                	sd	ra,40(sp)
    8000f56e:	ec2a                	sd	a0,24(sp)
    8000f570:	f02e                	sd	a1,32(sp)
        self.as_non_null_ptr().as_ptr()
    8000f572:	00000097          	auipc	ra,0x0
    8000f576:	022080e7          	jalr	34(ra) # 8000f594 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$15as_non_null_ptr17h8962585bd18d4862E>
    8000f57a:	e82a                	sd	a0,16(sp)
    8000f57c:	a009                	j	8000f57e <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$10as_mut_ptr17h1a3f7b42026c1de6E+0x14>
    8000f57e:	6542                	ld	a0,16(sp)
    8000f580:	00000097          	auipc	ra,0x0
    8000f584:	f7c080e7          	jalr	-132(ra) # 8000f4fc <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h729713db2b300d39E>
    8000f588:	e42a                	sd	a0,8(sp)
    8000f58a:	a009                	j	8000f58c <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$10as_mut_ptr17h1a3f7b42026c1de6E+0x22>
    }
    8000f58c:	6522                	ld	a0,8(sp)
    8000f58e:	70a2                	ld	ra,40(sp)
    8000f590:	6145                	addi	sp,sp,48
    8000f592:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$15as_non_null_ptr17h8962585bd18d4862E:

000000008000f594 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$15as_non_null_ptr17h8962585bd18d4862E>:
    pub const fn as_non_null_ptr(self) -> NonNull<T> {
    8000f594:	7139                	addi	sp,sp,-64
    8000f596:	fc06                	sd	ra,56(sp)
    8000f598:	f42a                	sd	a0,40(sp)
    8000f59a:	f82e                	sd	a1,48(sp)
        unsafe { NonNull::new_unchecked(self.as_ptr().as_mut_ptr()) }
    8000f59c:	00000097          	auipc	ra,0x0
    8000f5a0:	f70080e7          	jalr	-144(ra) # 8000f50c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h8eef1d8fb3aa5851E>
    8000f5a4:	ec2a                	sd	a0,24(sp)
    8000f5a6:	f02e                	sd	a1,32(sp)
    8000f5a8:	a009                	j	8000f5aa <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$15as_non_null_ptr17h8962585bd18d4862E+0x16>
    8000f5aa:	7582                	ld	a1,32(sp)
    8000f5ac:	6562                	ld	a0,24(sp)
    8000f5ae:	00010097          	auipc	ra,0x10
    8000f5b2:	1f6080e7          	jalr	502(ra) # 8001f7a4 <_ZN4core3ptr7mut_ptr41_$LT$impl$u20$$BP$mut$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h80398cc0098c8b0fE>
    8000f5b6:	e82a                	sd	a0,16(sp)
    8000f5b8:	a009                	j	8000f5ba <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$15as_non_null_ptr17h8962585bd18d4862E+0x26>
    8000f5ba:	6542                	ld	a0,16(sp)
    8000f5bc:	00000097          	auipc	ra,0x0
    8000f5c0:	d28080e7          	jalr	-728(ra) # 8000f2e4 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h5ed8fa4a56812246E>
    8000f5c4:	e42a                	sd	a0,8(sp)
    8000f5c6:	a009                	j	8000f5c8 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$15as_non_null_ptr17h8962585bd18d4862E+0x34>
    }
    8000f5c8:	6522                	ld	a0,8(sp)
    8000f5ca:	70e2                	ld	ra,56(sp)
    8000f5cc:	6121                	addi	sp,sp,64
    8000f5ce:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$20slice_from_raw_parts17h7a0aec34eacd5d12E:

000000008000f5d0 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$20slice_from_raw_parts17h7a0aec34eacd5d12E>:
    pub const fn slice_from_raw_parts(data: NonNull<T>, len: usize) -> Self {
    8000f5d0:	715d                	addi	sp,sp,-80
    8000f5d2:	e486                	sd	ra,72(sp)
    8000f5d4:	f42e                	sd	a1,40(sp)
    8000f5d6:	fc2a                	sd	a0,56(sp)
    8000f5d8:	e0ae                	sd	a1,64(sp)
        unsafe { Self::new_unchecked(super::slice_from_raw_parts_mut(data.as_ptr(), len)) }
    8000f5da:	00000097          	auipc	ra,0x0
    8000f5de:	f22080e7          	jalr	-222(ra) # 8000f4fc <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h729713db2b300d39E>
    8000f5e2:	f82a                	sd	a0,48(sp)
    8000f5e4:	a009                	j	8000f5e6 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$20slice_from_raw_parts17h7a0aec34eacd5d12E+0x16>
    8000f5e6:	75a2                	ld	a1,40(sp)
    8000f5e8:	7542                	ld	a0,48(sp)
    8000f5ea:	00012097          	auipc	ra,0x12
    8000f5ee:	1be080e7          	jalr	446(ra) # 800217a8 <_ZN4core3ptr24slice_from_raw_parts_mut17h39496eba86137ee5E>
    8000f5f2:	ec2a                	sd	a0,24(sp)
    8000f5f4:	f02e                	sd	a1,32(sp)
    8000f5f6:	a009                	j	8000f5f8 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$20slice_from_raw_parts17h7a0aec34eacd5d12E+0x28>
    8000f5f8:	7582                	ld	a1,32(sp)
    8000f5fa:	6562                	ld	a0,24(sp)
    8000f5fc:	00000097          	auipc	ra,0x0
    8000f600:	cda080e7          	jalr	-806(ra) # 8000f2d6 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h590958fa24c9c418E>
    8000f604:	e42a                	sd	a0,8(sp)
    8000f606:	e82e                	sd	a1,16(sp)
    8000f608:	a009                	j	8000f60a <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$20slice_from_raw_parts17h7a0aec34eacd5d12E+0x3a>
    }
    8000f60a:	65c2                	ld	a1,16(sp)
    8000f60c:	6522                	ld	a0,8(sp)
    8000f60e:	60a6                	ld	ra,72(sp)
    8000f610:	6161                	addi	sp,sp,80
    8000f612:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$3len17h17d848b65404492bE:

000000008000f614 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$3len17h17d848b65404492bE>:
    pub const fn len(self) -> usize {
    8000f614:	7179                	addi	sp,sp,-48
    8000f616:	f406                	sd	ra,40(sp)
    8000f618:	ec2a                	sd	a0,24(sp)
    8000f61a:	f02e                	sd	a1,32(sp)
        self.as_ptr().len()
    8000f61c:	00000097          	auipc	ra,0x0
    8000f620:	ef0080e7          	jalr	-272(ra) # 8000f50c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h8eef1d8fb3aa5851E>
    8000f624:	e42a                	sd	a0,8(sp)
    8000f626:	e82e                	sd	a1,16(sp)
    8000f628:	a009                	j	8000f62a <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$3len17h17d848b65404492bE+0x16>
    8000f62a:	65c2                	ld	a1,16(sp)
    8000f62c:	6522                	ld	a0,8(sp)
    8000f62e:	ffff9097          	auipc	ra,0xffff9
    8000f632:	318080e7          	jalr	792(ra) # 80008946 <_ZN4core3ptr7mut_ptr41_$LT$impl$u20$$BP$mut$u20$$u5b$T$u5d$$GT$3len17hf44174276422642dE>
    8000f636:	e02a                	sd	a0,0(sp)
    8000f638:	a009                	j	8000f63a <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$3len17h17d848b65404492bE+0x26>
    }
    8000f63a:	6502                	ld	a0,0(sp)
    8000f63c:	70a2                	ld	ra,40(sp)
    8000f63e:	6145                	addi	sp,sp,48
    8000f640:	8082                	ret

Disassembly of section .text._ZN98_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$mut$u20$T$GT$$GT$4from17h99a3612f25da96c9E:

000000008000f642 <_ZN98_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$mut$u20$T$GT$$GT$4from17h99a3612f25da96c9E>:
}

#[stable(feature = "nonnull", since = "1.25.0")]
impl<T: ?Sized> From<&mut T> for NonNull<T> {
    #[inline]
    fn from(reference: &mut T) -> Self {
    8000f642:	1141                	addi	sp,sp,-16
    8000f644:	e42a                	sd	a0,8(sp)
        // SAFETY: A mutable reference cannot be null.
        unsafe { NonNull { pointer: reference as *mut T } }
    8000f646:	e02a                	sd	a0,0(sp)
    }
    8000f648:	0141                	addi	sp,sp,16
    8000f64a:	8082                	ret

Disassembly of section .text._ZN79_$LT$core..num..wrapping..Wrapping$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h94523e3cd63d6752E:

000000008000f64c <_ZN79_$LT$core..num..wrapping..Wrapping$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h94523e3cd63d6752E>:
#[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Copy, Default, Hash)]
    8000f64c:	7179                	addi	sp,sp,-48
    8000f64e:	f406                	sd	ra,40(sp)
    8000f650:	e42a                	sd	a0,8(sp)
    8000f652:	e82e                	sd	a1,16(sp)
pub struct Wrapping<T>(#[stable(feature = "rust1", since = "1.0.0")] pub T);
    8000f654:	ec2e                	sd	a1,24(sp)
    8000f656:	f02a                	sd	a0,32(sp)
    8000f658:	0000c097          	auipc	ra,0xc
    8000f65c:	16e080e7          	jalr	366(ra) # 8001b7c6 <_ZN4core3cmp5impls56_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$usize$GT$2eq17hb88014a76b34c88fE>
    8000f660:	e02a                	sd	a0,0(sp)
    8000f662:	a009                	j	8000f664 <_ZN79_$LT$core..num..wrapping..Wrapping$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h94523e3cd63d6752E+0x18>
#[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Copy, Default, Hash)]
    8000f664:	6502                	ld	a0,0(sp)
    8000f666:	70a2                	ld	ra,40(sp)
    8000f668:	6145                	addi	sp,sp,48
    8000f66a:	8082                	ret

Disassembly of section .text._ZN79_$LT$core..num..wrapping..Wrapping$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2ne17h2d3bd6a577efe0b1E:

000000008000f66c <_ZN79_$LT$core..num..wrapping..Wrapping$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2ne17h2d3bd6a577efe0b1E>:
    8000f66c:	7179                	addi	sp,sp,-48
    8000f66e:	f406                	sd	ra,40(sp)
    8000f670:	e42a                	sd	a0,8(sp)
    8000f672:	e82e                	sd	a1,16(sp)
pub struct Wrapping<T>(#[stable(feature = "rust1", since = "1.0.0")] pub T);
    8000f674:	ec2e                	sd	a1,24(sp)
    8000f676:	f02a                	sd	a0,32(sp)
    8000f678:	0000c097          	auipc	ra,0xc
    8000f67c:	162080e7          	jalr	354(ra) # 8001b7da <_ZN4core3cmp5impls56_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$usize$GT$2ne17h958431dd9ff1337dE>
    8000f680:	e02a                	sd	a0,0(sp)
    8000f682:	a009                	j	8000f684 <_ZN79_$LT$core..num..wrapping..Wrapping$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2ne17h2d3bd6a577efe0b1E+0x18>
#[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Copy, Default, Hash)]
    8000f684:	6502                	ld	a0,0(sp)
    8000f686:	70a2                	ld	ra,40(sp)
    8000f688:	6145                	addi	sp,sp,48
    8000f68a:	8082                	ret

Disassembly of section .text._ZN4core4hint9spin_loop17h176cebad2d7c26adE:

000000008000f68c <_ZN4core4hint9spin_loop17h176cebad2d7c26adE>:
            // SAFETY: the `cfg` attr ensures that we only execute this on arm targets
            // with support for the v6 feature.
            unsafe { crate::arch::arm::__yield() };
        }
    }
}
    8000f68c:	8082                	ret

Disassembly of section .text._ZN6kernel2fs3log3Log4init17h739bf7c5bf880a35E:

000000008000f68e <_ZN6kernel2fs3log3Log4init17h739bf7c5bf880a35E>:
    pub unsafe fn init(&mut self, dev: u32) {
    8000f68e:	7155                	addi	sp,sp,-208
    8000f690:	e586                	sd	ra,200(sp)
    8000f692:	f82a                	sd	a0,48(sp)
    8000f694:	862e                	mv	a2,a1
    8000f696:	fc32                	sd	a2,56(sp)
    8000f698:	e92a                	sd	a0,144(sp)
    8000f69a:	cf2e                	sw	a1,156(sp)
        debug_assert!(mem::size_of::<LogHeader>() < BSIZE);
    8000f69c:	a009                	j	8000f69e <_ZN6kernel2fs3log3Log4init17h739bf7c5bf880a35E+0x10>
    8000f69e:	4505                	li	a0,1
    8000f6a0:	e10d                	bnez	a0,8000f6c2 <.LBB0_13+0x16>
    8000f6a2:	a009                	j	8000f6a4 <.LBB0_12>

000000008000f6a4 <.LBB0_12>:
    8000f6a4:	00019517          	auipc	a0,0x19
    8000f6a8:	deb50513          	addi	a0,a0,-533 # 8002848f <.L__unnamed_1>

000000008000f6ac <.LBB0_13>:
    8000f6ac:	00019617          	auipc	a2,0x19
    8000f6b0:	e2c60613          	addi	a2,a2,-468 # 800284d8 <.L__unnamed_2>
    8000f6b4:	03500593          	li	a1,53
    8000f6b8:	00013097          	auipc	ra,0x13
    8000f6bc:	bbe080e7          	jalr	-1090(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8000f6c0:	0000                	unimp
    8000f6c2:	4521                	li	a0,8
    8000f6c4:	f42a                	sd	a0,40(sp)
    8000f6c6:	fd2a                	sd	a0,184(sp)
        debug_assert_eq!(mem::align_of::<BufData>() % mem::align_of::<LogHeader>(), 0);
    8000f6c8:	a009                	j	8000f6ca <.LBB0_13+0x1e>
    8000f6ca:	4511                	li	a0,4
    8000f6cc:	f02a                	sd	a0,32(sp)
    8000f6ce:	e1aa                	sd	a0,192(sp)
    8000f6d0:	a009                	j	8000f6d2 <.LBB0_13+0x26>
    8000f6d2:	7502                	ld	a0,32(sp)
    8000f6d4:	4581                	li	a1,0
    8000f6d6:	08b50363          	beq	a0,a1,8000f75c <.LBB0_17>
    8000f6da:	a009                	j	8000f6dc <.LBB0_13+0x30>
    8000f6dc:	7522                	ld	a0,40(sp)
    8000f6de:	7582                	ld	a1,32(sp)
    8000f6e0:	02b57533          	remu	a0,a0,a1
    8000f6e4:	e8aa                	sd	a0,80(sp)
    8000f6e6:	0890                	addi	a2,sp,80
    8000f6e8:	e832                	sd	a2,16(sp)
    8000f6ea:	e0b2                	sd	a2,64(sp)

000000008000f6ec <.LBB0_14>:
    8000f6ec:	00017597          	auipc	a1,0x17
    8000f6f0:	18458593          	addi	a1,a1,388 # 80026870 <.L__unnamed_6+0xc8>
    8000f6f4:	ec2e                	sd	a1,24(sp)
    8000f6f6:	e4ae                	sd	a1,72(sp)
    8000f6f8:	f132                	sd	a2,160(sp)
    8000f6fa:	f52e                	sd	a1,168(sp)
    8000f6fc:	4581                	li	a1,0
    8000f6fe:	02b50363          	beq	a0,a1,8000f724 <.LBB0_16>
    8000f702:	a009                	j	8000f704 <.LBB0_14+0x18>
    8000f704:	6662                	ld	a2,24(sp)
    8000f706:	65c2                	ld	a1,16(sp)
    8000f708:	4501                	li	a0,0
    8000f70a:	04a10fa3          	sb	a0,95(sp)
    8000f70e:	f0aa                	sd	a0,96(sp)

000000008000f710 <.LBB0_15>:
    8000f710:	00019717          	auipc	a4,0x19
    8000f714:	e4070713          	addi	a4,a4,-448 # 80028550 <.L__unnamed_4>
    8000f718:	1094                	addi	a3,sp,96
    8000f71a:	00010097          	auipc	ra,0x10
    8000f71e:	28a080e7          	jalr	650(ra) # 8001f9a4 <_ZN4core9panicking13assert_failed17h4e6d74c9d534b647E>
	...

000000008000f724 <.LBB0_16>:
        let (start, size) = SUPER_BLOCK.read_log();
    8000f724:	00062517          	auipc	a0,0x62
    8000f728:	97c50513          	addi	a0,a0,-1668 # 800710a0 <_ZN6kernel2fs10superblock11SUPER_BLOCK17hc3889871ecbe2b54E>
    8000f72c:	ffff8097          	auipc	ra,0xffff8
    8000f730:	fc2080e7          	jalr	-62(ra) # 800076ee <_ZN6kernel2fs10superblock10SuperBlock8read_log17h7cc8d407eaa9ef0fE>
    8000f734:	e02a                	sd	a0,0(sp)
    8000f736:	e42e                	sd	a1,8(sp)
    8000f738:	a009                	j	8000f73a <.LBB0_16+0x16>
    8000f73a:	7542                	ld	a0,48(sp)
    8000f73c:	75e2                	ld	a1,56(sp)
    8000f73e:	6622                	ld	a2,8(sp)
    8000f740:	6682                	ld	a3,0(sp)
    8000f742:	d936                	sw	a3,176(sp)
    8000f744:	db32                	sw	a2,180(sp)
        self.start = start;
    8000f746:	c114                	sw	a3,0(a0)
        self.size = size;
    8000f748:	c150                	sw	a2,4(a0)
        self.dev = dev;
    8000f74a:	c50c                	sw	a1,8(a0)
        self.recover();
    8000f74c:	00000097          	auipc	ra,0x0
    8000f750:	02e080e7          	jalr	46(ra) # 8000f77a <_ZN6kernel2fs3log3Log7recover17h4d88efc42f980b61E>
    8000f754:	a009                	j	8000f756 <.LBB0_16+0x32>
    }
    8000f756:	60ae                	ld	ra,200(sp)
    8000f758:	6169                	addi	sp,sp,208
    8000f75a:	8082                	ret

000000008000f75c <.LBB0_17>:
        debug_assert_eq!(mem::align_of::<BufData>() % mem::align_of::<LogHeader>(), 0);
    8000f75c:	00019517          	auipc	a0,0x19
    8000f760:	db450513          	addi	a0,a0,-588 # 80028510 <str.0>

000000008000f764 <.LBB0_18>:
    8000f764:	00019617          	auipc	a2,0x19
    8000f768:	d8c60613          	addi	a2,a2,-628 # 800284f0 <.L__unnamed_5>
    8000f76c:	03900593          	li	a1,57
    8000f770:	00013097          	auipc	ra,0x13
    8000f774:	b06080e7          	jalr	-1274(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel2fs3log3Log7recover17h4d88efc42f980b61E:

000000008000f77a <_ZN6kernel2fs3log3Log7recover17h4d88efc42f980b61E>:
    fn recover(&mut self) {
    8000f77a:	7171                	addi	sp,sp,-176
    8000f77c:	f506                	sd	ra,168(sp)
    8000f77e:	e02a                	sd	a0,0(sp)
    8000f780:	f12a                	sd	a0,160(sp)

000000008000f782 <.LBB1_13>:
        println!("file system: checking logs");
    8000f782:	00019597          	auipc	a1,0x19
    8000f786:	e0658593          	addi	a1,a1,-506 # 80028588 <.L__unnamed_6>

000000008000f78a <.LBB1_14>:
    8000f78a:	00019697          	auipc	a3,0x19
    8000f78e:	e0e68693          	addi	a3,a3,-498 # 80028598 <.L__unnamed_20>
    8000f792:	0808                	addi	a0,sp,16
    8000f794:	4605                	li	a2,1
    8000f796:	4701                	li	a4,0
    8000f798:	ffff6097          	auipc	ra,0xffff6
    8000f79c:	cd2080e7          	jalr	-814(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8000f7a0:	a009                	j	8000f7a2 <.LBB1_14+0x18>
    8000f7a2:	0808                	addi	a0,sp,16
    8000f7a4:	0000e097          	auipc	ra,0xe
    8000f7a8:	5a8080e7          	jalr	1448(ra) # 8001dd4c <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8000f7ac:	a009                	j	8000f7ae <.LBB1_14+0x24>
        self.read_head();
    8000f7ae:	6502                	ld	a0,0(sp)
    8000f7b0:	00000097          	auipc	ra,0x0
    8000f7b4:	092080e7          	jalr	146(ra) # 8000f842 <_ZN6kernel2fs3log3Log9read_head17hbc6584ed4df3a629E>
    8000f7b8:	a009                	j	8000f7ba <.LBB1_14+0x30>
        if self.lh.len > 0 {
    8000f7ba:	6502                	ld	a0,0(sp)
    8000f7bc:	4908                	lw	a0,16(a0)
    8000f7be:	4581                	li	a1,0
    8000f7c0:	02b50363          	beq	a0,a1,8000f7e6 <.LBB1_17>
    8000f7c4:	a009                	j	8000f7c6 <.LBB1_15>

000000008000f7c6 <.LBB1_15>:
            println!("file system: recovering from logs");
    8000f7c6:	00019597          	auipc	a1,0x19
    8000f7ca:	dfa58593          	addi	a1,a1,-518 # 800285c0 <.L__unnamed_8>

000000008000f7ce <.LBB1_16>:
    8000f7ce:	00019697          	auipc	a3,0x19
    8000f7d2:	dca68693          	addi	a3,a3,-566 # 80028598 <.L__unnamed_20>
    8000f7d6:	0088                	addi	a0,sp,64
    8000f7d8:	4605                	li	a2,1
    8000f7da:	4701                	li	a4,0
    8000f7dc:	ffff6097          	auipc	ra,0xffff6
    8000f7e0:	c8e080e7          	jalr	-882(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8000f7e4:	a00d                	j	8000f806 <.LBB1_18+0x18>

000000008000f7e6 <.LBB1_17>:
            println!("file system: no need to recover");
    8000f7e6:	00019597          	auipc	a1,0x19
    8000f7ea:	dea58593          	addi	a1,a1,-534 # 800285d0 <.L__unnamed_9>

000000008000f7ee <.LBB1_18>:
    8000f7ee:	00019697          	auipc	a3,0x19
    8000f7f2:	daa68693          	addi	a3,a3,-598 # 80028598 <.L__unnamed_20>
    8000f7f6:	1888                	addi	a0,sp,112
    8000f7f8:	4605                	li	a2,1
    8000f7fa:	4701                	li	a4,0
    8000f7fc:	ffff6097          	auipc	ra,0xffff6
    8000f800:	c6e080e7          	jalr	-914(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8000f804:	a02d                	j	8000f82e <.LBB1_18+0x40>
    8000f806:	0088                	addi	a0,sp,64
            println!("file system: recovering from logs");
    8000f808:	0000e097          	auipc	ra,0xe
    8000f80c:	544080e7          	jalr	1348(ra) # 8001dd4c <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8000f810:	a009                	j	8000f812 <.LBB1_18+0x24>
            self.install_trans(true);
    8000f812:	6502                	ld	a0,0(sp)
    8000f814:	4585                	li	a1,1
    8000f816:	00000097          	auipc	ra,0x0
    8000f81a:	196080e7          	jalr	406(ra) # 8000f9ac <_ZN6kernel2fs3log3Log13install_trans17h365e0e8a575b1656E>
    8000f81e:	a009                	j	8000f820 <.LBB1_18+0x32>
            self.empty_head();
    8000f820:	6502                	ld	a0,0(sp)
    8000f822:	00000097          	auipc	ra,0x0
    8000f826:	0fc080e7          	jalr	252(ra) # 8000f91e <_ZN6kernel2fs3log3Log10empty_head17hfcefa6f849cc86acE>
    8000f82a:	a009                	j	8000f82c <.LBB1_18+0x3e>
        if self.lh.len > 0 {
    8000f82c:	a801                	j	8000f83c <.LBB1_18+0x4e>
    8000f82e:	1888                	addi	a0,sp,112
            println!("file system: no need to recover");
    8000f830:	0000e097          	auipc	ra,0xe
    8000f834:	51c080e7          	jalr	1308(ra) # 8001dd4c <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8000f838:	a009                	j	8000f83a <.LBB1_18+0x4c>
        if self.lh.len > 0 {
    8000f83a:	a009                	j	8000f83c <.LBB1_18+0x4e>
    }
    8000f83c:	70aa                	ld	ra,168(sp)
    8000f83e:	614d                	addi	sp,sp,176
    8000f840:	8082                	ret

Disassembly of section .text._ZN6kernel2fs3log3Log9read_head17hbc6584ed4df3a629E:

000000008000f842 <_ZN6kernel2fs3log3Log9read_head17hbc6584ed4df3a629E>:
    fn read_head(&mut self) {
    8000f842:	7159                	addi	sp,sp,-112
    8000f844:	f486                	sd	ra,104(sp)
    8000f846:	e42a                	sd	a0,8(sp)
    8000f848:	f0aa                	sd	a0,96(sp)
        let buf = BCACHE.bread(self.dev, self.start);
    8000f84a:	4114                	lw	a3,0(a0)
    8000f84c:	4510                	lw	a2,8(a0)

000000008000f84e <.LBB2_4>:
    8000f84e:	0001f597          	auipc	a1,0x1f
    8000f852:	7b258593          	addi	a1,a1,1970 # 8002f000 <_ZN6kernel2fs3bio6BCACHE17h4811aac4f8d79dc4E>
    8000f856:	0808                	addi	a0,sp,16
    8000f858:	ffff4097          	auipc	ra,0xffff4
    8000f85c:	da4080e7          	jalr	-604(ra) # 800035fc <_ZN6kernel2fs3bio6Bcache5bread17h6ef915e4e896646bE>
    8000f860:	a009                	j	8000f862 <.LBB2_4+0x14>
    8000f862:	0808                	addi	a0,sp,16
                buf.raw_data() as *const LogHeader,
    8000f864:	ffff4097          	auipc	ra,0xffff4
    8000f868:	ede080e7          	jalr	-290(ra) # 80003742 <_ZN6kernel2fs3bio3Buf8raw_data17h6a896fea03f7ee91E>
    8000f86c:	e02a                	sd	a0,0(sp)
    8000f86e:	a009                	j	8000f870 <.LBB2_4+0x22>
                &mut self.lh,
    8000f870:	6582                	ld	a1,0(sp)
    8000f872:	6522                	ld	a0,8(sp)
    8000f874:	0541                	addi	a0,a0,16
    8000f876:	07800613          	li	a2,120
            ptr::copy_nonoverlapping(
    8000f87a:	00016097          	auipc	ra,0x16
    8000f87e:	86a080e7          	jalr	-1942(ra) # 800250e4 <memcpy>
        drop(buf);
    8000f882:	6542                	ld	a0,16(sp)
    8000f884:	fc2a                	sd	a0,56(sp)
    8000f886:	6562                	ld	a0,24(sp)
    8000f888:	e0aa                	sd	a0,64(sp)
    8000f88a:	7502                	ld	a0,32(sp)
    8000f88c:	e4aa                	sd	a0,72(sp)
    8000f88e:	7522                	ld	a0,40(sp)
    8000f890:	e8aa                	sd	a0,80(sp)
    8000f892:	7542                	ld	a0,48(sp)
    8000f894:	ecaa                	sd	a0,88(sp)
    8000f896:	1828                	addi	a0,sp,56
    8000f898:	0000e097          	auipc	ra,0xe
    8000f89c:	8c2080e7          	jalr	-1854(ra) # 8001d15a <_ZN4core3mem4drop17hda1e19029436deb9E>
    8000f8a0:	a009                	j	8000f8a2 <.LBB2_4+0x54>
    }
    8000f8a2:	70a6                	ld	ra,104(sp)
    8000f8a4:	6165                	addi	sp,sp,112
    8000f8a6:	8082                	ret

Disassembly of section .text._ZN6kernel2fs3log3Log10write_head17hcfa90aedd37d0ff2E:

000000008000f8a8 <_ZN6kernel2fs3log3Log10write_head17hcfa90aedd37d0ff2E>:
    fn write_head(&mut self) {
    8000f8a8:	7119                	addi	sp,sp,-128
    8000f8aa:	fc86                	sd	ra,120(sp)
    8000f8ac:	ec2a                	sd	a0,24(sp)
    8000f8ae:	f8aa                	sd	a0,112(sp)
        let mut buf = BCACHE.bread(self.dev, self.start);
    8000f8b0:	4114                	lw	a3,0(a0)
    8000f8b2:	4510                	lw	a2,8(a0)

000000008000f8b4 <.LBB3_5>:
    8000f8b4:	0001f597          	auipc	a1,0x1f
    8000f8b8:	74c58593          	addi	a1,a1,1868 # 8002f000 <_ZN6kernel2fs3bio6BCACHE17h4811aac4f8d79dc4E>
    8000f8bc:	1008                	addi	a0,sp,32
    8000f8be:	ffff4097          	auipc	ra,0xffff4
    8000f8c2:	d3e080e7          	jalr	-706(ra) # 800035fc <_ZN6kernel2fs3bio6Bcache5bread17h6ef915e4e896646bE>
    8000f8c6:	a009                	j	8000f8c8 <.LBB3_5+0x14>
                &self.lh,
    8000f8c8:	6562                	ld	a0,24(sp)
    8000f8ca:	0541                	addi	a0,a0,16
                buf.raw_data_mut() as *mut LogHeader,
    8000f8cc:	e42a                	sd	a0,8(sp)
    8000f8ce:	1008                	addi	a0,sp,32
    8000f8d0:	ffff4097          	auipc	ra,0xffff4
    8000f8d4:	eb6080e7          	jalr	-330(ra) # 80003786 <_ZN6kernel2fs3bio3Buf12raw_data_mut17hbae73c10d57c515dE>
    8000f8d8:	e82a                	sd	a0,16(sp)
    8000f8da:	a009                	j	8000f8dc <.LBB3_5+0x28>
            ptr::copy_nonoverlapping(
    8000f8dc:	65a2                	ld	a1,8(sp)
    8000f8de:	6542                	ld	a0,16(sp)
    8000f8e0:	07800613          	li	a2,120
    8000f8e4:	00016097          	auipc	ra,0x16
    8000f8e8:	800080e7          	jalr	-2048(ra) # 800250e4 <memcpy>
    8000f8ec:	1008                	addi	a0,sp,32
        buf.bwrite();
    8000f8ee:	ffff4097          	auipc	ra,0xffff4
    8000f8f2:	e32080e7          	jalr	-462(ra) # 80003720 <_ZN6kernel2fs3bio3Buf6bwrite17hec751387ebedcc62E>
    8000f8f6:	a009                	j	8000f8f8 <.LBB3_5+0x44>
        drop(buf);
    8000f8f8:	6506                	ld	a0,64(sp)
    8000f8fa:	f4aa                	sd	a0,104(sp)
    8000f8fc:	7562                	ld	a0,56(sp)
    8000f8fe:	f0aa                	sd	a0,96(sp)
    8000f900:	7542                	ld	a0,48(sp)
    8000f902:	ecaa                	sd	a0,88(sp)
    8000f904:	7522                	ld	a0,40(sp)
    8000f906:	e8aa                	sd	a0,80(sp)
    8000f908:	7502                	ld	a0,32(sp)
    8000f90a:	e4aa                	sd	a0,72(sp)
    8000f90c:	00a8                	addi	a0,sp,72
    8000f90e:	0000e097          	auipc	ra,0xe
    8000f912:	84c080e7          	jalr	-1972(ra) # 8001d15a <_ZN4core3mem4drop17hda1e19029436deb9E>
    8000f916:	a009                	j	8000f918 <.LBB3_5+0x64>
    }
    8000f918:	70e6                	ld	ra,120(sp)
    8000f91a:	6109                	addi	sp,sp,128
    8000f91c:	8082                	ret

Disassembly of section .text._ZN6kernel2fs3log3Log10empty_head17hfcefa6f849cc86acE:

000000008000f91e <_ZN6kernel2fs3log3Log10empty_head17hfcefa6f849cc86acE>:
    fn empty_head(&mut self) {
    8000f91e:	7119                	addi	sp,sp,-128
    8000f920:	fc86                	sd	ra,120(sp)
    8000f922:	f4aa                	sd	a0,104(sp)
    8000f924:	4581                	li	a1,0
        self.lh.len = 0;
    8000f926:	c90c                	sw	a1,16(a0)
        let mut buf = BCACHE.bread(self.dev, self.start);
    8000f928:	4114                	lw	a3,0(a0)
    8000f92a:	4510                	lw	a2,8(a0)

000000008000f92c <.LBB4_7>:
    8000f92c:	0001f597          	auipc	a1,0x1f
    8000f930:	6d458593          	addi	a1,a1,1748 # 8002f000 <_ZN6kernel2fs3bio6BCACHE17h4811aac4f8d79dc4E>
    8000f934:	0828                	addi	a0,sp,24
    8000f936:	ffff4097          	auipc	ra,0xffff4
    8000f93a:	cc6080e7          	jalr	-826(ra) # 800035fc <_ZN6kernel2fs3bio6Bcache5bread17h6ef915e4e896646bE>
    8000f93e:	a009                	j	8000f940 <.LBB4_7+0x14>
    8000f940:	0828                	addi	a0,sp,24
        let raw_lh = buf.raw_data_mut() as *mut LogHeader;
    8000f942:	ffff4097          	auipc	ra,0xffff4
    8000f946:	e44080e7          	jalr	-444(ra) # 80003786 <_ZN6kernel2fs3bio3Buf12raw_data_mut17hbae73c10d57c515dE>
    8000f94a:	e82a                	sd	a0,16(sp)
    8000f94c:	a009                	j	8000f94e <.LBB4_7+0x22>
    8000f94e:	6542                	ld	a0,16(sp)
    8000f950:	f8aa                	sd	a0,112(sp)
        unsafe { raw_lh.as_mut().unwrap().len = 0; }
    8000f952:	ffff9097          	auipc	ra,0xffff9
    8000f956:	1b8080e7          	jalr	440(ra) # 80008b0a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h1b12e5c191747deaE>
    8000f95a:	e42a                	sd	a0,8(sp)
    8000f95c:	a009                	j	8000f95e <.LBB4_7+0x32>
    8000f95e:	6522                	ld	a0,8(sp)

000000008000f960 <.LBB4_8>:
    8000f960:	00019597          	auipc	a1,0x19
    8000f964:	c8058593          	addi	a1,a1,-896 # 800285e0 <.L__unnamed_10>
    8000f968:	fffff097          	auipc	ra,0xfffff
    8000f96c:	29e080e7          	jalr	670(ra) # 8000ec06 <_ZN4core6option15Option$LT$T$GT$6unwrap17h2ef2c85febc29d20E>
    8000f970:	e02a                	sd	a0,0(sp)
    8000f972:	a009                	j	8000f974 <.LBB4_8+0x14>
    8000f974:	6582                	ld	a1,0(sp)
    8000f976:	4501                	li	a0,0
    8000f978:	c188                	sw	a0,0(a1)
    8000f97a:	0828                	addi	a0,sp,24
        buf.bwrite();
    8000f97c:	ffff4097          	auipc	ra,0xffff4
    8000f980:	da4080e7          	jalr	-604(ra) # 80003720 <_ZN6kernel2fs3bio3Buf6bwrite17hec751387ebedcc62E>
    8000f984:	a009                	j	8000f986 <.LBB4_8+0x26>
        drop(buf);
    8000f986:	7562                	ld	a0,56(sp)
    8000f988:	f0aa                	sd	a0,96(sp)
    8000f98a:	7542                	ld	a0,48(sp)
    8000f98c:	ecaa                	sd	a0,88(sp)
    8000f98e:	7522                	ld	a0,40(sp)
    8000f990:	e8aa                	sd	a0,80(sp)
    8000f992:	7502                	ld	a0,32(sp)
    8000f994:	e4aa                	sd	a0,72(sp)
    8000f996:	6562                	ld	a0,24(sp)
    8000f998:	e0aa                	sd	a0,64(sp)
    8000f99a:	0088                	addi	a0,sp,64
    8000f99c:	0000d097          	auipc	ra,0xd
    8000f9a0:	7be080e7          	jalr	1982(ra) # 8001d15a <_ZN4core3mem4drop17hda1e19029436deb9E>
    8000f9a4:	a009                	j	8000f9a6 <.LBB4_8+0x46>
    }
    8000f9a6:	70e6                	ld	ra,120(sp)
    8000f9a8:	6109                	addi	sp,sp,128
    8000f9aa:	8082                	ret

Disassembly of section .text._ZN6kernel2fs3log3Log13install_trans17h365e0e8a575b1656E:

000000008000f9ac <_ZN6kernel2fs3log3Log13install_trans17h365e0e8a575b1656E>:
    fn install_trans(&mut self, recovering: bool) {
    8000f9ac:	7129                	addi	sp,sp,-320
    8000f9ae:	fe06                	sd	ra,312(sp)
    8000f9b0:	e4aa                	sd	a0,72(sp)
    8000f9b2:	862e                	mv	a2,a1
    8000f9b4:	e8b2                	sd	a2,80(sp)
    8000f9b6:	f22a                	sd	a0,288(sp)
    8000f9b8:	12b105a3          	sb	a1,299(sp)
        for i in 0..self.lh.len {
    8000f9bc:	490c                	lw	a1,16(a0)
    8000f9be:	4501                	li	a0,0
    8000f9c0:	d4aa                	sw	a0,104(sp)
    8000f9c2:	d6ae                	sw	a1,108(sp)
    8000f9c4:	ffffc097          	auipc	ra,0xffffc
    8000f9c8:	080080e7          	jalr	128(ra) # 8000ba44 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h2819071fbc006758E>
    8000f9cc:	ecaa                	sd	a0,88(sp)
    8000f9ce:	f0ae                	sd	a1,96(sp)
    8000f9d0:	a009                	j	8000f9d2 <_ZN6kernel2fs3log3Log13install_trans17h365e0e8a575b1656E+0x26>
    8000f9d2:	7506                	ld	a0,96(sp)
    8000f9d4:	65e6                	ld	a1,88(sp)
    8000f9d6:	d8ae                	sw	a1,112(sp)
    8000f9d8:	daaa                	sw	a0,116(sp)
    8000f9da:	a009                	j	8000f9dc <_ZN6kernel2fs3log3Log13install_trans17h365e0e8a575b1656E+0x30>
    8000f9dc:	1888                	addi	a0,sp,112
    8000f9de:	ffffc097          	auipc	ra,0xffffc
    8000f9e2:	ef8080e7          	jalr	-264(ra) # 8000b8d6 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17he2f0092c6efc86cdE>
    8000f9e6:	dcaa                	sw	a0,120(sp)
    8000f9e8:	deae                	sw	a1,124(sp)
    8000f9ea:	a009                	j	8000f9ec <_ZN6kernel2fs3log3Log13install_trans17h365e0e8a575b1656E+0x40>
    8000f9ec:	07816503          	lwu	a0,120(sp)
    8000f9f0:	4581                	li	a1,0
    8000f9f2:	00b50463          	beq	a0,a1,8000f9fa <_ZN6kernel2fs3log3Log13install_trans17h365e0e8a575b1656E+0x4e>
    8000f9f6:	a009                	j	8000f9f8 <_ZN6kernel2fs3log3Log13install_trans17h365e0e8a575b1656E+0x4c>
    8000f9f8:	a029                	j	8000fa02 <_ZN6kernel2fs3log3Log13install_trans17h365e0e8a575b1656E+0x56>
    }
    8000f9fa:	70f2                	ld	ra,312(sp)
    8000f9fc:	6131                	addi	sp,sp,320
    8000f9fe:	8082                	ret
        for i in 0..self.lh.len {
    8000fa00:	0000                	unimp
    8000fa02:	6526                	ld	a0,72(sp)
    8000fa04:	07c16583          	lwu	a1,124(sp)
    8000fa08:	f82e                	sd	a1,48(sp)
    8000fa0a:	12b12623          	sw	a1,300(sp)
    8000fa0e:	12b12823          	sw	a1,304(sp)
    8000fa12:	12b12a23          	sw	a1,308(sp)
            let log_buf  = BCACHE.bread(self.dev, self.start+1+i);
    8000fa16:	00856583          	lwu	a1,8(a0)
    8000fa1a:	fc2e                	sd	a1,56(sp)
    8000fa1c:	00056503          	lwu	a0,0(a0)
    8000fa20:	00150593          	addi	a1,a0,1
    8000fa24:	e0ae                	sd	a1,64(sp)
    8000fa26:	02059513          	slli	a0,a1,0x20
    8000fa2a:	9101                	srli	a0,a0,0x20
    8000fa2c:	10b51063          	bne	a0,a1,8000fb2c <.LBB5_28>
    8000fa30:	a009                	j	8000fa32 <_ZN6kernel2fs3log3Log13install_trans17h365e0e8a575b1656E+0x86>
    8000fa32:	75c2                	ld	a1,48(sp)
    8000fa34:	6506                	ld	a0,64(sp)
    8000fa36:	1502                	slli	a0,a0,0x20
    8000fa38:	9101                	srli	a0,a0,0x20
    8000fa3a:	95aa                	add	a1,a1,a0
    8000fa3c:	f42e                	sd	a1,40(sp)
    8000fa3e:	02059513          	slli	a0,a1,0x20
    8000fa42:	9101                	srli	a0,a0,0x20
    8000fa44:	10b51263          	bne	a0,a1,8000fb48 <.LBB5_30>
    8000fa48:	a009                	j	8000fa4a <_ZN6kernel2fs3log3Log13install_trans17h365e0e8a575b1656E+0x9e>
    8000fa4a:	76a2                	ld	a3,40(sp)
    8000fa4c:	7662                	ld	a2,56(sp)

000000008000fa4e <.LBB5_26>:
    8000fa4e:	0001f597          	auipc	a1,0x1f
    8000fa52:	5b258593          	addi	a1,a1,1458 # 8002f000 <_ZN6kernel2fs3bio6BCACHE17h4811aac4f8d79dc4E>
    8000fa56:	0108                	addi	a0,sp,128
    8000fa58:	ffff4097          	auipc	ra,0xffff4
    8000fa5c:	ba4080e7          	jalr	-1116(ra) # 800035fc <_ZN6kernel2fs3bio6Bcache5bread17h6ef915e4e896646bE>
    8000fa60:	a009                	j	8000fa62 <.LBB5_26+0x14>
            let mut disk_buf = BCACHE.bread(self.dev, self.lh.blocknos[i as usize]);
    8000fa62:	7542                	ld	a0,48(sp)
    8000fa64:	65a6                	ld	a1,72(sp)
    8000fa66:	0085e583          	lwu	a1,8(a1)
    8000fa6a:	ec2e                	sd	a1,24(sp)
    8000fa6c:	0005059b          	sext.w	a1,a0
    8000fa70:	f02a                	sd	a0,32(sp)
    8000fa72:	4571                	li	a0,28
    8000fa74:	0eb56863          	bltu	a0,a1,8000fb64 <.LBB5_31+0x14>
    8000fa78:	a009                	j	8000fa7a <.LBB5_26+0x2c>
    8000fa7a:	6662                	ld	a2,24(sp)
    8000fa7c:	6526                	ld	a0,72(sp)
    8000fa7e:	7582                	ld	a1,32(sp)
    8000fa80:	058a                	slli	a1,a1,0x2
    8000fa82:	952e                	add	a0,a0,a1
    8000fa84:	4954                	lw	a3,20(a0)

000000008000fa86 <.LBB5_27>:
    8000fa86:	0001f597          	auipc	a1,0x1f
    8000fa8a:	57a58593          	addi	a1,a1,1402 # 8002f000 <_ZN6kernel2fs3bio6BCACHE17h4811aac4f8d79dc4E>
    8000fa8e:	1128                	addi	a0,sp,168
    8000fa90:	ffff4097          	auipc	ra,0xffff4
    8000fa94:	b6c080e7          	jalr	-1172(ra) # 800035fc <_ZN6kernel2fs3bio6Bcache5bread17h6ef915e4e896646bE>
    8000fa98:	a009                	j	8000fa9a <.LBB5_27+0x14>
    8000fa9a:	0108                	addi	a0,sp,128
                    log_buf.raw_data(),
    8000fa9c:	ffff4097          	auipc	ra,0xffff4
    8000faa0:	ca6080e7          	jalr	-858(ra) # 80003742 <_ZN6kernel2fs3bio3Buf8raw_data17h6a896fea03f7ee91E>
    8000faa4:	e82a                	sd	a0,16(sp)
    8000faa6:	a009                	j	8000faa8 <.LBB5_27+0x22>
    8000faa8:	1128                	addi	a0,sp,168
                    disk_buf.raw_data_mut(),
    8000faaa:	ffff4097          	auipc	ra,0xffff4
    8000faae:	cdc080e7          	jalr	-804(ra) # 80003786 <_ZN6kernel2fs3bio3Buf12raw_data_mut17hbae73c10d57c515dE>
    8000fab2:	e42a                	sd	a0,8(sp)
    8000fab4:	a009                	j	8000fab6 <.LBB5_27+0x30>
                ptr::copy(
    8000fab6:	65c2                	ld	a1,16(sp)
    8000fab8:	6522                	ld	a0,8(sp)
    8000faba:	40000613          	li	a2,1024
    8000fabe:	00015097          	auipc	ra,0x15
    8000fac2:	63c080e7          	jalr	1596(ra) # 800250fa <memmove>
    8000fac6:	a009                	j	8000fac8 <.LBB5_27+0x42>
    8000fac8:	1128                	addi	a0,sp,168
            disk_buf.bwrite();
    8000faca:	ffff4097          	auipc	ra,0xffff4
    8000face:	c56080e7          	jalr	-938(ra) # 80003720 <_ZN6kernel2fs3bio3Buf6bwrite17hec751387ebedcc62E>
    8000fad2:	a009                	j	8000fad4 <.LBB5_27+0x4e>
            if !recovering {
    8000fad4:	6546                	ld	a0,80(sp)
    8000fad6:	e901                	bnez	a0,8000fae6 <.LBB5_27+0x60>
    8000fad8:	a009                	j	8000fada <.LBB5_27+0x54>
    8000fada:	1128                	addi	a0,sp,168
                unsafe { disk_buf.unpin(); }
    8000fadc:	ffff4097          	auipc	ra,0xffff4
    8000fae0:	d2e080e7          	jalr	-722(ra) # 8000380a <_ZN6kernel2fs3bio3Buf5unpin17h781e1439f4d799baE>
    8000fae4:	a011                	j	8000fae8 <.LBB5_27+0x62>
            if !recovering {
    8000fae6:	a011                	j	8000faea <.LBB5_27+0x64>
    8000fae8:	a009                	j	8000faea <.LBB5_27+0x64>
            drop(log_buf);
    8000faea:	750a                	ld	a0,160(sp)
    8000faec:	f9aa                	sd	a0,240(sp)
    8000faee:	656a                	ld	a0,152(sp)
    8000faf0:	f5aa                	sd	a0,232(sp)
    8000faf2:	654a                	ld	a0,144(sp)
    8000faf4:	f1aa                	sd	a0,224(sp)
    8000faf6:	652a                	ld	a0,136(sp)
    8000faf8:	edaa                	sd	a0,216(sp)
    8000fafa:	650a                	ld	a0,128(sp)
    8000fafc:	e9aa                	sd	a0,208(sp)
    8000fafe:	0988                	addi	a0,sp,208
    8000fb00:	0000d097          	auipc	ra,0xd
    8000fb04:	65a080e7          	jalr	1626(ra) # 8001d15a <_ZN4core3mem4drop17hda1e19029436deb9E>
    8000fb08:	a009                	j	8000fb0a <.LBB5_27+0x84>
            drop(disk_buf);
    8000fb0a:	652e                	ld	a0,200(sp)
    8000fb0c:	ee2a                	sd	a0,280(sp)
    8000fb0e:	650e                	ld	a0,192(sp)
    8000fb10:	ea2a                	sd	a0,272(sp)
    8000fb12:	756a                	ld	a0,184(sp)
    8000fb14:	e62a                	sd	a0,264(sp)
    8000fb16:	754a                	ld	a0,176(sp)
    8000fb18:	e22a                	sd	a0,256(sp)
    8000fb1a:	752a                	ld	a0,168(sp)
    8000fb1c:	fdaa                	sd	a0,248(sp)
    8000fb1e:	19a8                	addi	a0,sp,248
    8000fb20:	0000d097          	auipc	ra,0xd
    8000fb24:	63a080e7          	jalr	1594(ra) # 8001d15a <_ZN4core3mem4drop17hda1e19029436deb9E>
    8000fb28:	a009                	j	8000fb2a <.LBB5_27+0xa4>
        for i in 0..self.lh.len {
    8000fb2a:	bd4d                	j	8000f9dc <_ZN6kernel2fs3log3Log13install_trans17h365e0e8a575b1656E+0x30>

000000008000fb2c <.LBB5_28>:
            let log_buf  = BCACHE.bread(self.dev, self.start+1+i);
    8000fb2c:	00019517          	auipc	a0,0x19
    8000fb30:	ae450513          	addi	a0,a0,-1308 # 80028610 <str.1>

000000008000fb34 <.LBB5_29>:
    8000fb34:	00019617          	auipc	a2,0x19
    8000fb38:	ac460613          	addi	a2,a2,-1340 # 800285f8 <.L__unnamed_11>
    8000fb3c:	45f1                	li	a1,28
    8000fb3e:	00012097          	auipc	ra,0x12
    8000fb42:	738080e7          	jalr	1848(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008000fb48 <.LBB5_30>:
    8000fb48:	00019517          	auipc	a0,0x19
    8000fb4c:	ac850513          	addi	a0,a0,-1336 # 80028610 <str.1>

000000008000fb50 <.LBB5_31>:
    8000fb50:	00019617          	auipc	a2,0x19
    8000fb54:	aa860613          	addi	a2,a2,-1368 # 800285f8 <.L__unnamed_11>
    8000fb58:	45f1                	li	a1,28
    8000fb5a:	00012097          	auipc	ra,0x12
    8000fb5e:	71c080e7          	jalr	1820(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8000fb62:	0000                	unimp
            let mut disk_buf = BCACHE.bread(self.dev, self.lh.blocknos[i as usize]);
    8000fb64:	7502                	ld	a0,32(sp)

000000008000fb66 <.LBB5_32>:
    8000fb66:	00019617          	auipc	a2,0x19
    8000fb6a:	aca60613          	addi	a2,a2,-1334 # 80028630 <.L__unnamed_12>
    8000fb6e:	45f5                	li	a1,29
    8000fb70:	00012097          	auipc	ra,0x12
    8000fb74:	732080e7          	jalr	1842(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel2fs3log3Log6commit17hb6044c935645b581E:

000000008000fb7a <_ZN6kernel2fs3log3Log6commit17hb6044c935645b581E>:
    pub unsafe fn commit(&mut self) {
    8000fb7a:	1101                	addi	sp,sp,-32
    8000fb7c:	ec06                	sd	ra,24(sp)
    8000fb7e:	e02a                	sd	a0,0(sp)
    8000fb80:	e82a                	sd	a0,16(sp)
        if !self.committing {
    8000fb82:	08854503          	lbu	a0,136(a0)
    8000fb86:	8905                	andi	a0,a0,1
    8000fb88:	e10d                	bnez	a0,8000fbaa <.LBB6_11+0x16>
    8000fb8a:	a009                	j	8000fb8c <.LBB6_10>

000000008000fb8c <.LBB6_10>:
            panic!("log: committing while the committing flag is not set");
    8000fb8c:	00019517          	auipc	a0,0x19
    8000fb90:	abc50513          	addi	a0,a0,-1348 # 80028648 <.L__unnamed_13>

000000008000fb94 <.LBB6_11>:
    8000fb94:	00019617          	auipc	a2,0x19
    8000fb98:	aec60613          	addi	a2,a2,-1300 # 80028680 <.L__unnamed_14>
    8000fb9c:	03400593          	li	a1,52
    8000fba0:	00012097          	auipc	ra,0x12
    8000fba4:	6d6080e7          	jalr	1750(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8000fba8:	0000                	unimp
        if self.lh.len > 0 {
    8000fbaa:	6502                	ld	a0,0(sp)
    8000fbac:	4908                	lw	a0,16(a0)
    8000fbae:	4581                	li	a1,0
    8000fbb0:	00b50963          	beq	a0,a1,8000fbc2 <.LBB6_11+0x2e>
    8000fbb4:	a009                	j	8000fbb6 <.LBB6_11+0x22>
            self.write_log();
    8000fbb6:	6502                	ld	a0,0(sp)
    8000fbb8:	00000097          	auipc	ra,0x0
    8000fbbc:	03a080e7          	jalr	58(ra) # 8000fbf2 <_ZN6kernel2fs3log3Log9write_log17hf6e116b9849c70aeE>
    8000fbc0:	a011                	j	8000fbc4 <.LBB6_11+0x30>
        if self.lh.len > 0 {
    8000fbc2:	a02d                	j	8000fbec <.LBB6_11+0x58>
            self.write_head();
    8000fbc4:	6502                	ld	a0,0(sp)
    8000fbc6:	00000097          	auipc	ra,0x0
    8000fbca:	ce2080e7          	jalr	-798(ra) # 8000f8a8 <_ZN6kernel2fs3log3Log10write_head17hcfa90aedd37d0ff2E>
    8000fbce:	a009                	j	8000fbd0 <.LBB6_11+0x3c>
            self.install_trans(false);
    8000fbd0:	6502                	ld	a0,0(sp)
    8000fbd2:	4581                	li	a1,0
    8000fbd4:	00000097          	auipc	ra,0x0
    8000fbd8:	dd8080e7          	jalr	-552(ra) # 8000f9ac <_ZN6kernel2fs3log3Log13install_trans17h365e0e8a575b1656E>
    8000fbdc:	a009                	j	8000fbde <.LBB6_11+0x4a>
            self.empty_head();
    8000fbde:	6502                	ld	a0,0(sp)
    8000fbe0:	00000097          	auipc	ra,0x0
    8000fbe4:	d3e080e7          	jalr	-706(ra) # 8000f91e <_ZN6kernel2fs3log3Log10empty_head17hfcefa6f849cc86acE>
    8000fbe8:	a009                	j	8000fbea <.LBB6_11+0x56>
        if self.lh.len > 0 {
    8000fbea:	a009                	j	8000fbec <.LBB6_11+0x58>
    }
    8000fbec:	60e2                	ld	ra,24(sp)
    8000fbee:	6105                	addi	sp,sp,32
    8000fbf0:	8082                	ret

Disassembly of section .text._ZN6kernel2fs3log3Log9write_log17hf6e116b9849c70aeE:

000000008000fbf2 <_ZN6kernel2fs3log3Log9write_log17hf6e116b9849c70aeE>:
    fn write_log(&mut self) {
    8000fbf2:	7169                	addi	sp,sp,-304
    8000fbf4:	f606                	sd	ra,296(sp)
    8000fbf6:	e0aa                	sd	a0,64(sp)
    8000fbf8:	ea2a                	sd	a0,272(sp)
        for i in 0..self.lh.len {
    8000fbfa:	490c                	lw	a1,16(a0)
    8000fbfc:	4501                	li	a0,0
    8000fbfe:	ccaa                	sw	a0,88(sp)
    8000fc00:	ceae                	sw	a1,92(sp)
    8000fc02:	ffffc097          	auipc	ra,0xffffc
    8000fc06:	e42080e7          	jalr	-446(ra) # 8000ba44 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h2819071fbc006758E>
    8000fc0a:	e4aa                	sd	a0,72(sp)
    8000fc0c:	e8ae                	sd	a1,80(sp)
    8000fc0e:	a009                	j	8000fc10 <_ZN6kernel2fs3log3Log9write_log17hf6e116b9849c70aeE+0x1e>
    8000fc10:	6546                	ld	a0,80(sp)
    8000fc12:	65a6                	ld	a1,72(sp)
    8000fc14:	d0ae                	sw	a1,96(sp)
    8000fc16:	d2aa                	sw	a0,100(sp)
    8000fc18:	a009                	j	8000fc1a <_ZN6kernel2fs3log3Log9write_log17hf6e116b9849c70aeE+0x28>
    8000fc1a:	1088                	addi	a0,sp,96
    8000fc1c:	ffffc097          	auipc	ra,0xffffc
    8000fc20:	cba080e7          	jalr	-838(ra) # 8000b8d6 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17he2f0092c6efc86cdE>
    8000fc24:	d4aa                	sw	a0,104(sp)
    8000fc26:	d6ae                	sw	a1,108(sp)
    8000fc28:	a009                	j	8000fc2a <_ZN6kernel2fs3log3Log9write_log17hf6e116b9849c70aeE+0x38>
    8000fc2a:	06816503          	lwu	a0,104(sp)
    8000fc2e:	4581                	li	a1,0
    8000fc30:	00b50463          	beq	a0,a1,8000fc38 <_ZN6kernel2fs3log3Log9write_log17hf6e116b9849c70aeE+0x46>
    8000fc34:	a009                	j	8000fc36 <_ZN6kernel2fs3log3Log9write_log17hf6e116b9849c70aeE+0x44>
    8000fc36:	a029                	j	8000fc40 <_ZN6kernel2fs3log3Log9write_log17hf6e116b9849c70aeE+0x4e>
    }
    8000fc38:	70b2                	ld	ra,296(sp)
    8000fc3a:	6155                	addi	sp,sp,304
    8000fc3c:	8082                	ret
        for i in 0..self.lh.len {
    8000fc3e:	0000                	unimp
    8000fc40:	6506                	ld	a0,64(sp)
    8000fc42:	06c16583          	lwu	a1,108(sp)
    8000fc46:	f42e                	sd	a1,40(sp)
    8000fc48:	10b12e23          	sw	a1,284(sp)
    8000fc4c:	12b12023          	sw	a1,288(sp)
    8000fc50:	12b12223          	sw	a1,292(sp)
            let mut log_buf  = BCACHE.bread(self.dev, self.start+1+i);
    8000fc54:	00856583          	lwu	a1,8(a0)
    8000fc58:	f82e                	sd	a1,48(sp)
    8000fc5a:	00056503          	lwu	a0,0(a0)
    8000fc5e:	00150593          	addi	a1,a0,1
    8000fc62:	fc2e                	sd	a1,56(sp)
    8000fc64:	02059513          	slli	a0,a1,0x20
    8000fc68:	9101                	srli	a0,a0,0x20
    8000fc6a:	0eb51563          	bne	a0,a1,8000fd54 <.LBB7_24>
    8000fc6e:	a009                	j	8000fc70 <_ZN6kernel2fs3log3Log9write_log17hf6e116b9849c70aeE+0x7e>
    8000fc70:	75a2                	ld	a1,40(sp)
    8000fc72:	7562                	ld	a0,56(sp)
    8000fc74:	1502                	slli	a0,a0,0x20
    8000fc76:	9101                	srli	a0,a0,0x20
    8000fc78:	95aa                	add	a1,a1,a0
    8000fc7a:	f02e                	sd	a1,32(sp)
    8000fc7c:	02059513          	slli	a0,a1,0x20
    8000fc80:	9101                	srli	a0,a0,0x20
    8000fc82:	0eb51763          	bne	a0,a1,8000fd70 <.LBB7_26>
    8000fc86:	a009                	j	8000fc88 <_ZN6kernel2fs3log3Log9write_log17hf6e116b9849c70aeE+0x96>
    8000fc88:	7682                	ld	a3,32(sp)
    8000fc8a:	7642                	ld	a2,48(sp)

000000008000fc8c <.LBB7_22>:
    8000fc8c:	0001f597          	auipc	a1,0x1f
    8000fc90:	37458593          	addi	a1,a1,884 # 8002f000 <_ZN6kernel2fs3bio6BCACHE17h4811aac4f8d79dc4E>
    8000fc94:	1888                	addi	a0,sp,112
    8000fc96:	ffff4097          	auipc	ra,0xffff4
    8000fc9a:	966080e7          	jalr	-1690(ra) # 800035fc <_ZN6kernel2fs3bio6Bcache5bread17h6ef915e4e896646bE>
    8000fc9e:	a009                	j	8000fca0 <.LBB7_22+0x14>
            let cache_buf = BCACHE.bread(self.dev, self.lh.blocknos[i as usize]);
    8000fca0:	7522                	ld	a0,40(sp)
    8000fca2:	6586                	ld	a1,64(sp)
    8000fca4:	0085e583          	lwu	a1,8(a1)
    8000fca8:	e82e                	sd	a1,16(sp)
    8000fcaa:	0005059b          	sext.w	a1,a0
    8000fcae:	ec2a                	sd	a0,24(sp)
    8000fcb0:	4571                	li	a0,28
    8000fcb2:	0cb56d63          	bltu	a0,a1,8000fd8c <.LBB7_27+0x14>
    8000fcb6:	a009                	j	8000fcb8 <.LBB7_22+0x2c>
    8000fcb8:	6642                	ld	a2,16(sp)
    8000fcba:	6506                	ld	a0,64(sp)
    8000fcbc:	65e2                	ld	a1,24(sp)
    8000fcbe:	058a                	slli	a1,a1,0x2
    8000fcc0:	952e                	add	a0,a0,a1
    8000fcc2:	4954                	lw	a3,20(a0)

000000008000fcc4 <.LBB7_23>:
    8000fcc4:	0001f597          	auipc	a1,0x1f
    8000fcc8:	33c58593          	addi	a1,a1,828 # 8002f000 <_ZN6kernel2fs3bio6BCACHE17h4811aac4f8d79dc4E>
    8000fccc:	0928                	addi	a0,sp,152
    8000fcce:	ffff4097          	auipc	ra,0xffff4
    8000fcd2:	92e080e7          	jalr	-1746(ra) # 800035fc <_ZN6kernel2fs3bio6Bcache5bread17h6ef915e4e896646bE>
    8000fcd6:	a009                	j	8000fcd8 <.LBB7_23+0x14>
    8000fcd8:	0928                	addi	a0,sp,152
                    cache_buf.raw_data(),
    8000fcda:	ffff4097          	auipc	ra,0xffff4
    8000fcde:	a68080e7          	jalr	-1432(ra) # 80003742 <_ZN6kernel2fs3bio3Buf8raw_data17h6a896fea03f7ee91E>
    8000fce2:	e42a                	sd	a0,8(sp)
    8000fce4:	a009                	j	8000fce6 <.LBB7_23+0x22>
    8000fce6:	1888                	addi	a0,sp,112
                    log_buf.raw_data_mut(),
    8000fce8:	ffff4097          	auipc	ra,0xffff4
    8000fcec:	a9e080e7          	jalr	-1378(ra) # 80003786 <_ZN6kernel2fs3bio3Buf12raw_data_mut17hbae73c10d57c515dE>
    8000fcf0:	e02a                	sd	a0,0(sp)
    8000fcf2:	a009                	j	8000fcf4 <.LBB7_23+0x30>
                ptr::copy(
    8000fcf4:	65a2                	ld	a1,8(sp)
    8000fcf6:	6502                	ld	a0,0(sp)
    8000fcf8:	40000613          	li	a2,1024
    8000fcfc:	00015097          	auipc	ra,0x15
    8000fd00:	3fe080e7          	jalr	1022(ra) # 800250fa <memmove>
    8000fd04:	a009                	j	8000fd06 <.LBB7_23+0x42>
    8000fd06:	1888                	addi	a0,sp,112
            log_buf.bwrite();
    8000fd08:	ffff4097          	auipc	ra,0xffff4
    8000fd0c:	a18080e7          	jalr	-1512(ra) # 80003720 <_ZN6kernel2fs3bio3Buf6bwrite17hec751387ebedcc62E>
    8000fd10:	a009                	j	8000fd12 <.LBB7_23+0x4e>
            drop(cache_buf);
    8000fd12:	756a                	ld	a0,184(sp)
    8000fd14:	f1aa                	sd	a0,224(sp)
    8000fd16:	754a                	ld	a0,176(sp)
    8000fd18:	edaa                	sd	a0,216(sp)
    8000fd1a:	752a                	ld	a0,168(sp)
    8000fd1c:	e9aa                	sd	a0,208(sp)
    8000fd1e:	750a                	ld	a0,160(sp)
    8000fd20:	e5aa                	sd	a0,200(sp)
    8000fd22:	656a                	ld	a0,152(sp)
    8000fd24:	e1aa                	sd	a0,192(sp)
    8000fd26:	0188                	addi	a0,sp,192
    8000fd28:	0000d097          	auipc	ra,0xd
    8000fd2c:	432080e7          	jalr	1074(ra) # 8001d15a <_ZN4core3mem4drop17hda1e19029436deb9E>
    8000fd30:	a009                	j	8000fd32 <.LBB7_23+0x6e>
            drop(log_buf);
    8000fd32:	654a                	ld	a0,144(sp)
    8000fd34:	e62a                	sd	a0,264(sp)
    8000fd36:	652a                	ld	a0,136(sp)
    8000fd38:	e22a                	sd	a0,256(sp)
    8000fd3a:	650a                	ld	a0,128(sp)
    8000fd3c:	fdaa                	sd	a0,248(sp)
    8000fd3e:	7566                	ld	a0,120(sp)
    8000fd40:	f9aa                	sd	a0,240(sp)
    8000fd42:	7546                	ld	a0,112(sp)
    8000fd44:	f5aa                	sd	a0,232(sp)
    8000fd46:	11a8                	addi	a0,sp,232
    8000fd48:	0000d097          	auipc	ra,0xd
    8000fd4c:	412080e7          	jalr	1042(ra) # 8001d15a <_ZN4core3mem4drop17hda1e19029436deb9E>
    8000fd50:	a009                	j	8000fd52 <.LBB7_23+0x8e>
        for i in 0..self.lh.len {
    8000fd52:	b5e1                	j	8000fc1a <_ZN6kernel2fs3log3Log9write_log17hf6e116b9849c70aeE+0x28>

000000008000fd54 <.LBB7_24>:
            let mut log_buf  = BCACHE.bread(self.dev, self.start+1+i);
    8000fd54:	00019517          	auipc	a0,0x19
    8000fd58:	8bc50513          	addi	a0,a0,-1860 # 80028610 <str.1>

000000008000fd5c <.LBB7_25>:
    8000fd5c:	00019617          	auipc	a2,0x19
    8000fd60:	93c60613          	addi	a2,a2,-1732 # 80028698 <.L__unnamed_15>
    8000fd64:	45f1                	li	a1,28
    8000fd66:	00012097          	auipc	ra,0x12
    8000fd6a:	510080e7          	jalr	1296(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008000fd70 <.LBB7_26>:
    8000fd70:	00019517          	auipc	a0,0x19
    8000fd74:	8a050513          	addi	a0,a0,-1888 # 80028610 <str.1>

000000008000fd78 <.LBB7_27>:
    8000fd78:	00019617          	auipc	a2,0x19
    8000fd7c:	92060613          	addi	a2,a2,-1760 # 80028698 <.L__unnamed_15>
    8000fd80:	45f1                	li	a1,28
    8000fd82:	00012097          	auipc	ra,0x12
    8000fd86:	4f4080e7          	jalr	1268(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8000fd8a:	0000                	unimp
            let cache_buf = BCACHE.bread(self.dev, self.lh.blocknos[i as usize]);
    8000fd8c:	6562                	ld	a0,24(sp)

000000008000fd8e <.LBB7_28>:
    8000fd8e:	00019617          	auipc	a2,0x19
    8000fd92:	92260613          	addi	a2,a2,-1758 # 800286b0 <.L__unnamed_16>
    8000fd96:	45f5                	li	a1,29
    8000fd98:	00012097          	auipc	ra,0x12
    8000fd9c:	50a080e7          	jalr	1290(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN4core4sync6atomic10atomic_add17hcefa99837e5e8934E:

000000008000fda2 <_ZN4core4sync6atomic10atomic_add17hcefa99837e5e8934E>:
unsafe fn atomic_add<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {
    8000fda2:	7139                	addi	sp,sp,-64
    8000fda4:	e42e                	sd	a1,8(sp)
    8000fda6:	e82a                	sd	a0,16(sp)
    8000fda8:	02c103a3          	sb	a2,39(sp)
    8000fdac:	f82a                	sd	a0,48(sp)
    8000fdae:	fc2e                	sd	a1,56(sp)
            Acquire => intrinsics::atomic_xadd_acq(dst, val),
    8000fdb0:	0ff67513          	andi	a0,a2,255
    8000fdb4:	ec2a                	sd	a0,24(sp)
    8000fdb6:	6562                	ld	a0,24(sp)
    8000fdb8:	050e                	slli	a0,a0,0x3

000000008000fdba <.LBB0_14>:
    8000fdba:	00019597          	auipc	a1,0x19
    8000fdbe:	90e58593          	addi	a1,a1,-1778 # 800286c8 <.LJTI0_0>
    8000fdc2:	952e                	add	a0,a0,a1
    8000fdc4:	6108                	ld	a0,0(a0)
    8000fdc6:	8502                	jr	a0

000000008000fdc8 <.LBB0_2>:
            SeqCst => intrinsics::atomic_xadd(dst, val),
    8000fdc8:	6542                	ld	a0,16(sp)
    8000fdca:	65a2                	ld	a1,8(sp)
    8000fdcc:	06b5352f          	amoadd.d.aqrl	a0,a1,(a0)
    8000fdd0:	f42a                	sd	a0,40(sp)
    8000fdd2:	a835                	j	8000fe0e <.LBB0_10+0xe>
	...

000000008000fdd6 <.LBB0_4>:
            Acquire => intrinsics::atomic_xadd_acq(dst, val),
    8000fdd6:	6542                	ld	a0,16(sp)
    8000fdd8:	65a2                	ld	a1,8(sp)
    8000fdda:	04b5352f          	amoadd.d.aq	a0,a1,(a0)
    8000fdde:	f42a                	sd	a0,40(sp)
    8000fde0:	a009                	j	8000fde2 <.LBB0_4+0xc>
        match order {
    8000fde2:	a03d                	j	8000fe10 <.LBB0_10+0x10>

000000008000fde4 <.LBB0_6>:
            Release => intrinsics::atomic_xadd_rel(dst, val),
    8000fde4:	6542                	ld	a0,16(sp)
    8000fde6:	65a2                	ld	a1,8(sp)
    8000fde8:	02b5352f          	amoadd.d.rl	a0,a1,(a0)
    8000fdec:	f42a                	sd	a0,40(sp)
    8000fdee:	a009                	j	8000fdf0 <.LBB0_6+0xc>
        match order {
    8000fdf0:	a005                	j	8000fe10 <.LBB0_10+0x10>

000000008000fdf2 <.LBB0_8>:
            AcqRel => intrinsics::atomic_xadd_acqrel(dst, val),
    8000fdf2:	6542                	ld	a0,16(sp)
    8000fdf4:	65a2                	ld	a1,8(sp)
    8000fdf6:	06b5352f          	amoadd.d.aqrl	a0,a1,(a0)
    8000fdfa:	f42a                	sd	a0,40(sp)
    8000fdfc:	a009                	j	8000fdfe <.LBB0_8+0xc>
        match order {
    8000fdfe:	a809                	j	8000fe10 <.LBB0_10+0x10>

000000008000fe00 <.LBB0_10>:
            Relaxed => intrinsics::atomic_xadd_relaxed(dst, val),
    8000fe00:	6542                	ld	a0,16(sp)
    8000fe02:	65a2                	ld	a1,8(sp)
    8000fe04:	00b5352f          	amoadd.d	a0,a1,(a0)
    8000fe08:	f42a                	sd	a0,40(sp)
    8000fe0a:	a009                	j	8000fe0c <.LBB0_10+0xc>
        match order {
    8000fe0c:	a011                	j	8000fe10 <.LBB0_10+0x10>
    8000fe0e:	a009                	j	8000fe10 <.LBB0_10+0x10>
}
    8000fe10:	7522                	ld	a0,40(sp)
    8000fe12:	6121                	addi	sp,sp,64
    8000fe14:	8082                	ret

Disassembly of section .text._ZN4core4sync6atomic10atomic_sub17ha62074418a99a7bbE:

000000008000fe16 <_ZN4core4sync6atomic10atomic_sub17ha62074418a99a7bbE>:
unsafe fn atomic_sub<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {
    8000fe16:	7139                	addi	sp,sp,-64
    8000fe18:	e42e                	sd	a1,8(sp)
    8000fe1a:	e82a                	sd	a0,16(sp)
    8000fe1c:	02c103a3          	sb	a2,39(sp)
    8000fe20:	f82a                	sd	a0,48(sp)
    8000fe22:	fc2e                	sd	a1,56(sp)
            Acquire => intrinsics::atomic_xsub_acq(dst, val),
    8000fe24:	0ff67513          	andi	a0,a2,255
    8000fe28:	ec2a                	sd	a0,24(sp)
    8000fe2a:	6562                	ld	a0,24(sp)
    8000fe2c:	050e                	slli	a0,a0,0x3

000000008000fe2e <.LBB1_14>:
    8000fe2e:	00019597          	auipc	a1,0x19
    8000fe32:	8c258593          	addi	a1,a1,-1854 # 800286f0 <.LJTI1_0>
    8000fe36:	952e                	add	a0,a0,a1
    8000fe38:	6108                	ld	a0,0(a0)
    8000fe3a:	8502                	jr	a0

000000008000fe3c <.LBB1_2>:
            SeqCst => intrinsics::atomic_xsub(dst, val),
    8000fe3c:	6542                	ld	a0,16(sp)
    8000fe3e:	65a2                	ld	a1,8(sp)
    8000fe40:	40b005b3          	neg	a1,a1
    8000fe44:	06b5352f          	amoadd.d.aqrl	a0,a1,(a0)
    8000fe48:	f42a                	sd	a0,40(sp)
    8000fe4a:	a0b1                	j	8000fe96 <.LBB1_10+0x12>
	...

000000008000fe4e <.LBB1_4>:
            Acquire => intrinsics::atomic_xsub_acq(dst, val),
    8000fe4e:	6542                	ld	a0,16(sp)
    8000fe50:	65a2                	ld	a1,8(sp)
    8000fe52:	40b005b3          	neg	a1,a1
    8000fe56:	04b5352f          	amoadd.d.aq	a0,a1,(a0)
    8000fe5a:	f42a                	sd	a0,40(sp)
    8000fe5c:	a009                	j	8000fe5e <.LBB1_4+0x10>
        match order {
    8000fe5e:	a82d                	j	8000fe98 <.LBB1_10+0x14>

000000008000fe60 <.LBB1_6>:
            Release => intrinsics::atomic_xsub_rel(dst, val),
    8000fe60:	6542                	ld	a0,16(sp)
    8000fe62:	65a2                	ld	a1,8(sp)
    8000fe64:	40b005b3          	neg	a1,a1
    8000fe68:	02b5352f          	amoadd.d.rl	a0,a1,(a0)
    8000fe6c:	f42a                	sd	a0,40(sp)
    8000fe6e:	a009                	j	8000fe70 <.LBB1_6+0x10>
        match order {
    8000fe70:	a025                	j	8000fe98 <.LBB1_10+0x14>

000000008000fe72 <.LBB1_8>:
            AcqRel => intrinsics::atomic_xsub_acqrel(dst, val),
    8000fe72:	6542                	ld	a0,16(sp)
    8000fe74:	65a2                	ld	a1,8(sp)
    8000fe76:	40b005b3          	neg	a1,a1
    8000fe7a:	06b5352f          	amoadd.d.aqrl	a0,a1,(a0)
    8000fe7e:	f42a                	sd	a0,40(sp)
    8000fe80:	a009                	j	8000fe82 <.LBB1_8+0x10>
        match order {
    8000fe82:	a819                	j	8000fe98 <.LBB1_10+0x14>

000000008000fe84 <.LBB1_10>:
            Relaxed => intrinsics::atomic_xsub_relaxed(dst, val),
    8000fe84:	6542                	ld	a0,16(sp)
    8000fe86:	65a2                	ld	a1,8(sp)
    8000fe88:	40b005b3          	neg	a1,a1
    8000fe8c:	00b5352f          	amoadd.d	a0,a1,(a0)
    8000fe90:	f42a                	sd	a0,40(sp)
    8000fe92:	a009                	j	8000fe94 <.LBB1_10+0x10>
        match order {
    8000fe94:	a011                	j	8000fe98 <.LBB1_10+0x14>
    8000fe96:	a009                	j	8000fe98 <.LBB1_10+0x14>
}
    8000fe98:	7522                	ld	a0,40(sp)
    8000fe9a:	6121                	addi	sp,sp,64
    8000fe9c:	8082                	ret

Disassembly of section .text._ZN4core4sync6atomic11atomic_swap17hdd22e709589114eaE:

000000008000fe9e <_ZN4core4sync6atomic11atomic_swap17hdd22e709589114eaE>:
unsafe fn atomic_swap<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {
    8000fe9e:	7179                	addi	sp,sp,-48
    8000fea0:	e02a                	sd	a0,0(sp)
    8000fea2:	86ae                	mv	a3,a1
    8000fea4:	e436                	sd	a3,8(sp)
    8000fea6:	00c10f23          	sb	a2,30(sp)
    8000feaa:	f02a                	sd	a0,32(sp)
    8000feac:	02b107a3          	sb	a1,47(sp)
            Acquire => intrinsics::atomic_xchg_acq(dst, val),
    8000feb0:	0ff67513          	andi	a0,a2,255
    8000feb4:	e82a                	sd	a0,16(sp)
    8000feb6:	6542                	ld	a0,16(sp)
    8000feb8:	050e                	slli	a0,a0,0x3

000000008000feba <.LBB2_14>:
    8000feba:	00019597          	auipc	a1,0x19
    8000febe:	85e58593          	addi	a1,a1,-1954 # 80028718 <.LJTI2_0>
    8000fec2:	952e                	add	a0,a0,a1
    8000fec4:	6108                	ld	a0,0(a0)
    8000fec6:	8502                	jr	a0

000000008000fec8 <.LBB2_2>:
            SeqCst => intrinsics::atomic_xchg(dst, val),
    8000fec8:	6522                	ld	a0,8(sp)
    8000feca:	6582                	ld	a1,0(sp)
    8000fecc:	ffc5f693          	andi	a3,a1,-4
    8000fed0:	058e                	slli	a1,a1,0x3
    8000fed2:	0ff00613          	li	a2,255
    8000fed6:	00b617bb          	sllw	a5,a2,a1
    8000feda:	0ff57513          	andi	a0,a0,255
    8000fede:	00b5173b          	sllw	a4,a0,a1
    8000fee2:	1606a52f          	lr.w.aqrl	a0,(a3)
    8000fee6:	863a                	mv	a2,a4
    8000fee8:	8e29                	xor	a2,a2,a0
    8000feea:	8e7d                	and	a2,a2,a5
    8000feec:	8e29                	xor	a2,a2,a0
    8000feee:	1ec6a62f          	sc.w.aqrl	a2,a2,(a3)
    8000fef2:	fa65                	bnez	a2,8000fee2 <.LBB2_2+0x1a>
    8000fef4:	00b5553b          	srlw	a0,a0,a1
    8000fef8:	00a10fa3          	sb	a0,31(sp)
    8000fefc:	a0d5                	j	8000ffe0 <.LBB2_10+0x38>
	...

000000008000ff00 <.LBB2_4>:
            Acquire => intrinsics::atomic_xchg_acq(dst, val),
    8000ff00:	6522                	ld	a0,8(sp)
    8000ff02:	6582                	ld	a1,0(sp)
    8000ff04:	ffc5f693          	andi	a3,a1,-4
    8000ff08:	058e                	slli	a1,a1,0x3
    8000ff0a:	0ff00613          	li	a2,255
    8000ff0e:	00b617bb          	sllw	a5,a2,a1
    8000ff12:	0ff57513          	andi	a0,a0,255
    8000ff16:	00b5173b          	sllw	a4,a0,a1
    8000ff1a:	1406a52f          	lr.w.aq	a0,(a3)
    8000ff1e:	863a                	mv	a2,a4
    8000ff20:	8e29                	xor	a2,a2,a0
    8000ff22:	8e7d                	and	a2,a2,a5
    8000ff24:	8e29                	xor	a2,a2,a0
    8000ff26:	18c6a62f          	sc.w	a2,a2,(a3)
    8000ff2a:	fa65                	bnez	a2,8000ff1a <.LBB2_4+0x1a>
    8000ff2c:	00b5553b          	srlw	a0,a0,a1
    8000ff30:	00a10fa3          	sb	a0,31(sp)
    8000ff34:	a009                	j	8000ff36 <.LBB2_4+0x36>
        match order {
    8000ff36:	a075                	j	8000ffe2 <.LBB2_10+0x3a>

000000008000ff38 <.LBB2_6>:
            Release => intrinsics::atomic_xchg_rel(dst, val),
    8000ff38:	6522                	ld	a0,8(sp)
    8000ff3a:	6582                	ld	a1,0(sp)
    8000ff3c:	ffc5f693          	andi	a3,a1,-4
    8000ff40:	058e                	slli	a1,a1,0x3
    8000ff42:	0ff00613          	li	a2,255
    8000ff46:	00b617bb          	sllw	a5,a2,a1
    8000ff4a:	0ff57513          	andi	a0,a0,255
    8000ff4e:	00b5173b          	sllw	a4,a0,a1
    8000ff52:	1006a52f          	lr.w	a0,(a3)
    8000ff56:	863a                	mv	a2,a4
    8000ff58:	8e29                	xor	a2,a2,a0
    8000ff5a:	8e7d                	and	a2,a2,a5
    8000ff5c:	8e29                	xor	a2,a2,a0
    8000ff5e:	1ac6a62f          	sc.w.rl	a2,a2,(a3)
    8000ff62:	fa65                	bnez	a2,8000ff52 <.LBB2_6+0x1a>
    8000ff64:	00b5553b          	srlw	a0,a0,a1
    8000ff68:	00a10fa3          	sb	a0,31(sp)
    8000ff6c:	a009                	j	8000ff6e <.LBB2_6+0x36>
        match order {
    8000ff6e:	a895                	j	8000ffe2 <.LBB2_10+0x3a>

000000008000ff70 <.LBB2_8>:
            AcqRel => intrinsics::atomic_xchg_acqrel(dst, val),
    8000ff70:	6522                	ld	a0,8(sp)
    8000ff72:	6582                	ld	a1,0(sp)
    8000ff74:	ffc5f693          	andi	a3,a1,-4
    8000ff78:	058e                	slli	a1,a1,0x3
    8000ff7a:	0ff00613          	li	a2,255
    8000ff7e:	00b617bb          	sllw	a5,a2,a1
    8000ff82:	0ff57513          	andi	a0,a0,255
    8000ff86:	00b5173b          	sllw	a4,a0,a1
    8000ff8a:	1406a52f          	lr.w.aq	a0,(a3)
    8000ff8e:	863a                	mv	a2,a4
    8000ff90:	8e29                	xor	a2,a2,a0
    8000ff92:	8e7d                	and	a2,a2,a5
    8000ff94:	8e29                	xor	a2,a2,a0
    8000ff96:	1ac6a62f          	sc.w.rl	a2,a2,(a3)
    8000ff9a:	fa65                	bnez	a2,8000ff8a <.LBB2_8+0x1a>
    8000ff9c:	00b5553b          	srlw	a0,a0,a1
    8000ffa0:	00a10fa3          	sb	a0,31(sp)
    8000ffa4:	a009                	j	8000ffa6 <.LBB2_8+0x36>
        match order {
    8000ffa6:	a835                	j	8000ffe2 <.LBB2_10+0x3a>

000000008000ffa8 <.LBB2_10>:
            Relaxed => intrinsics::atomic_xchg_relaxed(dst, val),
    8000ffa8:	6522                	ld	a0,8(sp)
    8000ffaa:	6582                	ld	a1,0(sp)
    8000ffac:	ffc5f693          	andi	a3,a1,-4
    8000ffb0:	058e                	slli	a1,a1,0x3
    8000ffb2:	0ff00613          	li	a2,255
    8000ffb6:	00b617bb          	sllw	a5,a2,a1
    8000ffba:	0ff57513          	andi	a0,a0,255
    8000ffbe:	00b5173b          	sllw	a4,a0,a1
    8000ffc2:	1006a52f          	lr.w	a0,(a3)
    8000ffc6:	863a                	mv	a2,a4
    8000ffc8:	8e29                	xor	a2,a2,a0
    8000ffca:	8e7d                	and	a2,a2,a5
    8000ffcc:	8e29                	xor	a2,a2,a0
    8000ffce:	18c6a62f          	sc.w	a2,a2,(a3)
    8000ffd2:	fa65                	bnez	a2,8000ffc2 <.LBB2_10+0x1a>
    8000ffd4:	00b5553b          	srlw	a0,a0,a1
    8000ffd8:	00a10fa3          	sb	a0,31(sp)
    8000ffdc:	a009                	j	8000ffde <.LBB2_10+0x36>
        match order {
    8000ffde:	a011                	j	8000ffe2 <.LBB2_10+0x3a>
    8000ffe0:	a009                	j	8000ffe2 <.LBB2_10+0x3a>
}
    8000ffe2:	01f10503          	lb	a0,31(sp)
    8000ffe6:	6145                	addi	sp,sp,48
    8000ffe8:	8082                	ret

Disassembly of section .text._ZN4core4sync6atomic12atomic_store17h031d76ab229dd222E:

000000008000ffea <_ZN4core4sync6atomic12atomic_store17h031d76ab229dd222E>:
unsafe fn atomic_store<T: Copy>(dst: *mut T, val: T, order: Ordering) {
    8000ffea:	7139                	addi	sp,sp,-64
    8000ffec:	e42a                	sd	a0,8(sp)
    8000ffee:	86ae                	mv	a3,a1
    8000fff0:	e836                	sd	a3,16(sp)
    8000fff2:	02c103a3          	sb	a2,39(sp)
    8000fff6:	f82a                	sd	a0,48(sp)
    8000fff8:	02b10fa3          	sb	a1,63(sp)
            Release => intrinsics::atomic_store_rel(dst, val),
    8000fffc:	0ff67513          	andi	a0,a2,255
    80010000:	ec2a                	sd	a0,24(sp)
    80010002:	6562                	ld	a0,24(sp)
    80010004:	050e                	slli	a0,a0,0x3

0000000080010006 <.LBB3_12>:
    80010006:	00018597          	auipc	a1,0x18
    8001000a:	73a58593          	addi	a1,a1,1850 # 80028740 <.LJTI3_0>
    8001000e:	952e                	add	a0,a0,a1
    80010010:	6108                	ld	a0,0(a0)
    80010012:	8502                	jr	a0

0000000080010014 <.LBB3_13>:
            AcqRel => panic!("there is no such thing as an acquire/release store"),
    80010014:	00018517          	auipc	a0,0x18
    80010018:	75450513          	addi	a0,a0,1876 # 80028768 <.L__unnamed_1>

000000008001001c <.LBB3_14>:
    8001001c:	00018617          	auipc	a2,0x18
    80010020:	7fc60613          	addi	a2,a2,2044 # 80028818 <.L__unnamed_2>
    80010024:	03200593          	li	a1,50
    80010028:	00012097          	auipc	ra,0x12
    8001002c:	24e080e7          	jalr	590(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80010030:	0000                	unimp
	...

0000000080010034 <.LBB3_4>:
            Release => intrinsics::atomic_store_rel(dst, val),
    80010034:	6542                	ld	a0,16(sp)
    80010036:	65a2                	ld	a1,8(sp)
    80010038:	0310000f          	fence	rw,w
    8001003c:	00a58023          	sb	a0,0(a1)
    80010040:	a009                	j	80010042 <.LBB3_4+0xe>
        match order {
    80010042:	a835                	j	8001007e <.LBB3_16+0x16>

0000000080010044 <.LBB3_6>:
            Relaxed => intrinsics::atomic_store_relaxed(dst, val),
    80010044:	6542                	ld	a0,16(sp)
    80010046:	65a2                	ld	a1,8(sp)
    80010048:	00a58023          	sb	a0,0(a1)
    8001004c:	a009                	j	8001004e <.LBB3_6+0xa>
        match order {
    8001004e:	a805                	j	8001007e <.LBB3_16+0x16>

0000000080010050 <.LBB3_8>:
            SeqCst => intrinsics::atomic_store(dst, val),
    80010050:	6542                	ld	a0,16(sp)
    80010052:	65a2                	ld	a1,8(sp)
    80010054:	0310000f          	fence	rw,w
    80010058:	00a58023          	sb	a0,0(a1)
    8001005c:	a009                	j	8001005e <.LBB3_8+0xe>
        match order {
    8001005e:	a005                	j	8001007e <.LBB3_16+0x16>

0000000080010060 <.LBB3_10>:
            Acquire => panic!("there is no such thing as an acquire store"),
    80010060:	00018517          	auipc	a0,0x18
    80010064:	7d050513          	addi	a0,a0,2000 # 80028830 <.L__unnamed_3>

0000000080010068 <.LBB3_16>:
    80010068:	00018617          	auipc	a2,0x18
    8001006c:	7f860613          	addi	a2,a2,2040 # 80028860 <.L__unnamed_4>
    80010070:	02a00593          	li	a1,42
    80010074:	00012097          	auipc	ra,0x12
    80010078:	202080e7          	jalr	514(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8001007c:	0000                	unimp
}
    8001007e:	6121                	addi	sp,sp,64
    80010080:	8082                	ret

Disassembly of section .text._ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$3new17he179344dbdc121faE:

0000000080010082 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$3new17he179344dbdc121faE>:
    pub const fn new(data: T, name: &'static str) -> Self {
    80010082:	b7010113          	addi	sp,sp,-1168
        let lock = Spinlock {
    80010086:	48113423          	sd	ra,1160(sp)
    8001008a:	ec36                	sd	a3,24(sp)
    8001008c:	f032                	sd	a2,32(sp)
    pub const fn new(data: T, name: &'static str) -> Self {
    8001008e:	f42e                	sd	a1,40(sp)
        let lock = Spinlock {
    80010090:	f82a                	sd	a0,48(sp)
    80010092:	46c13823          	sd	a2,1136(sp)
    80010096:	46d13c23          	sd	a3,1144(sp)
    8001009a:	4501                	li	a0,0
            locked: AtomicBool::new(false),
    8001009c:	ffff4097          	auipc	ra,0xffff4
    800100a0:	5b2080e7          	jalr	1458(ra) # 8000464e <_ZN4core4sync6atomic10AtomicBool3new17hb0054f5394c676a1E>
    800100a4:	48a103a3          	sb	a0,1159(sp)
    800100a8:	02a10c23          	sb	a0,56(sp)
    800100ac:	a009                	j	800100ae <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$3new17he179344dbdc121faE+0x2c>
    800100ae:	557d                	li	a0,-1
            cpu_id: Cell::new(-1),
    800100b0:	ffff5097          	auipc	ra,0xffff5
    800100b4:	084080e7          	jalr	132(ra) # 80005134 <_ZN4core4cell13Cell$LT$T$GT$3new17h92764083b52e393eE>
    800100b8:	e82a                	sd	a0,16(sp)
    800100ba:	a009                	j	800100bc <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$3new17he179344dbdc121faE+0x3a>
            data: UnsafeCell::new(data)
    800100bc:	75a2                	ld	a1,40(sp)
    800100be:	0ca8                	addi	a0,sp,600
    800100c0:	e42a                	sd	a0,8(sp)
    800100c2:	21800613          	li	a2,536
    800100c6:	00015097          	auipc	ra,0x15
    800100ca:	01e080e7          	jalr	30(ra) # 800250e4 <memcpy>
    800100ce:	65a2                	ld	a1,8(sp)
    800100d0:	0088                	addi	a0,sp,64
    800100d2:	ffff5097          	auipc	ra,0xffff5
    800100d6:	1ba080e7          	jalr	442(ra) # 8000528c <_ZN4core4cell19UnsafeCell$LT$T$GT$3new17hada9de55abb7439dE>
    800100da:	a009                	j	800100dc <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$3new17he179344dbdc121faE+0x5a>
        let lock = Spinlock {
    800100dc:	7542                	ld	a0,48(sp)
    800100de:	65c2                	ld	a1,16(sp)
    800100e0:	6662                	ld	a2,24(sp)
    800100e2:	7682                	ld	a3,32(sp)
    800100e4:	03810703          	lb	a4,56(sp)
    800100e8:	00e50c23          	sb	a4,24(a0)
    800100ec:	e114                	sd	a3,0(a0)
    800100ee:	e510                	sd	a2,8(a0)
    800100f0:	e90c                	sd	a1,16(a0)
    800100f2:	02050513          	addi	a0,a0,32
    800100f6:	008c                	addi	a1,sp,64
    800100f8:	21800613          	li	a2,536
    800100fc:	00015097          	auipc	ra,0x15
    80010100:	fe8080e7          	jalr	-24(ra) # 800250e4 <memcpy>
    }
    80010104:	48813083          	ld	ra,1160(sp)
    80010108:	49010113          	addi	sp,sp,1168
    8001010c:	8082                	ret

Disassembly of section .text._ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h007ac3682185ef97E:

000000008001010e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h007ac3682185ef97E>:
    pub fn acquire(&self) -> SpinlockGuard<'_, T> {
    8001010e:	7135                	addi	sp,sp,-160
    80010110:	ed06                	sd	ra,152(sp)
    80010112:	f82a                	sd	a0,48(sp)
        push_off();
    80010114:	00002097          	auipc	ra,0x2
    80010118:	0ee080e7          	jalr	238(ra) # 80012202 <_ZN6kernel7process3cpu8push_off17h0acd4baa93104745E>
    8001011c:	a009                	j	8001011e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h007ac3682185ef97E+0x10>
        if self.holding() {
    8001011e:	7542                	ld	a0,48(sp)
    80010120:	00001097          	auipc	ra,0x1
    80010124:	116080e7          	jalr	278(ra) # 80011236 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h685eaac29cc8096eE>
    80010128:	f42a                	sd	a0,40(sp)
    8001012a:	a009                	j	8001012c <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h007ac3682185ef97E+0x1e>
    8001012c:	7522                	ld	a0,40(sp)
    8001012e:	4581                	li	a1,0
    80010130:	02b50163          	beq	a0,a1,80010152 <.LBB1_15+0x16>
    80010134:	a009                	j	80010136 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h007ac3682185ef97E+0x28>
            panic!("spinlock {} acquire", self.name);
    80010136:	7542                	ld	a0,48(sp)
    80010138:	e12a                	sd	a0,128(sp)
    8001013a:	e92a                	sd	a0,144(sp)

000000008001013c <.LBB1_15>:
    8001013c:	0000e597          	auipc	a1,0xe
    80010140:	47858593          	addi	a1,a1,1144 # 8001e5b4 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E>
    80010144:	0000e097          	auipc	ra,0xe
    80010148:	4b6080e7          	jalr	1206(ra) # 8001e5fa <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>
    8001014c:	ec2a                	sd	a0,24(sp)
    8001014e:	f02e                	sd	a1,32(sp)
    80010150:	a011                	j	80010154 <.LBB1_15+0x18>
        while self.locked.swap(true, Ordering::Acquire){
    80010152:	a825                	j	8001018a <.LBB1_17+0x14>
            panic!("spinlock {} acquire", self.name);
    80010154:	7502                	ld	a0,32(sp)
    80010156:	65e2                	ld	a1,24(sp)
    80010158:	f8ae                	sd	a1,112(sp)
    8001015a:	fcaa                	sd	a0,120(sp)

000000008001015c <.LBB1_16>:
    8001015c:	00018597          	auipc	a1,0x18
    80010160:	72c58593          	addi	a1,a1,1836 # 80028888 <.L__unnamed_1>
    80010164:	0088                	addi	a0,sp,64
    80010166:	4609                	li	a2,2
    80010168:	1894                	addi	a3,sp,112
    8001016a:	4705                	li	a4,1
    8001016c:	ffff5097          	auipc	ra,0xffff5
    80010170:	2fe080e7          	jalr	766(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80010174:	a009                	j	80010176 <.LBB1_17>

0000000080010176 <.LBB1_17>:
    80010176:	00018597          	auipc	a1,0x18
    8001017a:	74a58593          	addi	a1,a1,1866 # 800288c0 <.L__unnamed_2>
    8001017e:	0088                	addi	a0,sp,64
    80010180:	00012097          	auipc	ra,0x12
    80010184:	162080e7          	jalr	354(ra) # 800222e2 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
    80010188:	0000                	unimp
        while self.locked.swap(true, Ordering::Acquire){
    8001018a:	7542                	ld	a0,48(sp)
    8001018c:	0561                	addi	a0,a0,24
    8001018e:	4609                	li	a2,2
    80010190:	08c10723          	sb	a2,142(sp)
    80010194:	4585                	li	a1,1
    80010196:	ffff4097          	auipc	ra,0xffff4
    8001019a:	512080e7          	jalr	1298(ra) # 800046a8 <_ZN4core4sync6atomic10AtomicBool4swap17h269e9e7e986b9c97E>
    8001019e:	e82a                	sd	a0,16(sp)
    800101a0:	a009                	j	800101a2 <.LBB1_17+0x2c>
    800101a2:	6542                	ld	a0,16(sp)
    800101a4:	e911                	bnez	a0,800101b8 <.LBB1_17+0x42>
    800101a6:	a009                	j	800101a8 <.LBB1_17+0x32>
    800101a8:	4511                	li	a0,4
        fence(Ordering::SeqCst);
    800101aa:	08a107a3          	sb	a0,143(sp)
    800101ae:	ffff4097          	auipc	ra,0xffff4
    800101b2:	602080e7          	jalr	1538(ra) # 800047b0 <_ZN4core4sync6atomic5fence17hd2f91624c9f09ce8E>
    800101b6:	a039                	j	800101c4 <.LBB1_17+0x4e>
            spin_loop();
    800101b8:	fffff097          	auipc	ra,0xfffff
    800101bc:	4d4080e7          	jalr	1236(ra) # 8000f68c <_ZN4core4hint9spin_loop17h176cebad2d7c26adE>
    800101c0:	a009                	j	800101c2 <.LBB1_17+0x4c>
        while self.locked.swap(true, Ordering::Acquire){
    800101c2:	b7e1                	j	8001018a <.LBB1_17+0x14>
            self.cpu_id.set(cpuid() as isize);
    800101c4:	7542                	ld	a0,48(sp)
    800101c6:	0541                	addi	a0,a0,16
    800101c8:	e02a                	sd	a0,0(sp)
    800101ca:	00002097          	auipc	ra,0x2
    800101ce:	bcc080e7          	jalr	-1076(ra) # 80011d96 <_ZN6kernel7process3cpu5cpuid17h605093a6a9a60164E>
    800101d2:	e42a                	sd	a0,8(sp)
    800101d4:	a009                	j	800101d6 <.LBB1_17+0x60>
    800101d6:	65a2                	ld	a1,8(sp)
    800101d8:	6502                	ld	a0,0(sp)
    800101da:	ffff5097          	auipc	ra,0xffff5
    800101de:	fa4080e7          	jalr	-92(ra) # 8000517e <_ZN4core4cell13Cell$LT$T$GT$3set17hb9927bf4fdcefc87E>
    800101e2:	a009                	j	800101e4 <.LBB1_17+0x6e>
        SpinlockGuard{spinlock: &self}
    800101e4:	7542                	ld	a0,48(sp)
    800101e6:	fc2a                	sd	a0,56(sp)
    }
    800101e8:	60ea                	ld	ra,152(sp)
    800101ea:	610d                	addi	sp,sp,160
    800101ec:	8082                	ret

Disassembly of section .text._ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h08fa8a4e90b26497E:

00000000800101ee <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h08fa8a4e90b26497E>:
    pub fn acquire(&self) -> SpinlockGuard<'_, T> {
    800101ee:	7135                	addi	sp,sp,-160
    800101f0:	ed06                	sd	ra,152(sp)
    800101f2:	f82a                	sd	a0,48(sp)
        push_off();
    800101f4:	00002097          	auipc	ra,0x2
    800101f8:	00e080e7          	jalr	14(ra) # 80012202 <_ZN6kernel7process3cpu8push_off17h0acd4baa93104745E>
    800101fc:	a009                	j	800101fe <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h08fa8a4e90b26497E+0x10>
        if self.holding() {
    800101fe:	7542                	ld	a0,48(sp)
    80010200:	00001097          	auipc	ra,0x1
    80010204:	0b2080e7          	jalr	178(ra) # 800112b2 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h71dfe9d2eb747f59E>
    80010208:	f42a                	sd	a0,40(sp)
    8001020a:	a009                	j	8001020c <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h08fa8a4e90b26497E+0x1e>
    8001020c:	7522                	ld	a0,40(sp)
    8001020e:	4581                	li	a1,0
    80010210:	02b50163          	beq	a0,a1,80010232 <.LBB2_15+0x16>
    80010214:	a009                	j	80010216 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h08fa8a4e90b26497E+0x28>
            panic!("spinlock {} acquire", self.name);
    80010216:	7542                	ld	a0,48(sp)
    80010218:	e12a                	sd	a0,128(sp)
    8001021a:	e92a                	sd	a0,144(sp)

000000008001021c <.LBB2_15>:
    8001021c:	0000e597          	auipc	a1,0xe
    80010220:	39858593          	addi	a1,a1,920 # 8001e5b4 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E>
    80010224:	0000e097          	auipc	ra,0xe
    80010228:	3d6080e7          	jalr	982(ra) # 8001e5fa <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>
    8001022c:	ec2a                	sd	a0,24(sp)
    8001022e:	f02e                	sd	a1,32(sp)
    80010230:	a011                	j	80010234 <.LBB2_15+0x18>
        while self.locked.swap(true, Ordering::Acquire){
    80010232:	a825                	j	8001026a <.LBB2_17+0x14>
            panic!("spinlock {} acquire", self.name);
    80010234:	7502                	ld	a0,32(sp)
    80010236:	65e2                	ld	a1,24(sp)
    80010238:	f8ae                	sd	a1,112(sp)
    8001023a:	fcaa                	sd	a0,120(sp)

000000008001023c <.LBB2_16>:
    8001023c:	00018597          	auipc	a1,0x18
    80010240:	64c58593          	addi	a1,a1,1612 # 80028888 <.L__unnamed_1>
    80010244:	0088                	addi	a0,sp,64
    80010246:	4609                	li	a2,2
    80010248:	1894                	addi	a3,sp,112
    8001024a:	4705                	li	a4,1
    8001024c:	ffff5097          	auipc	ra,0xffff5
    80010250:	21e080e7          	jalr	542(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80010254:	a009                	j	80010256 <.LBB2_17>

0000000080010256 <.LBB2_17>:
    80010256:	00018597          	auipc	a1,0x18
    8001025a:	66a58593          	addi	a1,a1,1642 # 800288c0 <.L__unnamed_2>
    8001025e:	0088                	addi	a0,sp,64
    80010260:	00012097          	auipc	ra,0x12
    80010264:	082080e7          	jalr	130(ra) # 800222e2 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
    80010268:	0000                	unimp
        while self.locked.swap(true, Ordering::Acquire){
    8001026a:	7542                	ld	a0,48(sp)
    8001026c:	0561                	addi	a0,a0,24
    8001026e:	4609                	li	a2,2
    80010270:	08c10723          	sb	a2,142(sp)
    80010274:	4585                	li	a1,1
    80010276:	ffff4097          	auipc	ra,0xffff4
    8001027a:	432080e7          	jalr	1074(ra) # 800046a8 <_ZN4core4sync6atomic10AtomicBool4swap17h269e9e7e986b9c97E>
    8001027e:	e82a                	sd	a0,16(sp)
    80010280:	a009                	j	80010282 <.LBB2_17+0x2c>
    80010282:	6542                	ld	a0,16(sp)
    80010284:	e911                	bnez	a0,80010298 <.LBB2_17+0x42>
    80010286:	a009                	j	80010288 <.LBB2_17+0x32>
    80010288:	4511                	li	a0,4
        fence(Ordering::SeqCst);
    8001028a:	08a107a3          	sb	a0,143(sp)
    8001028e:	ffff4097          	auipc	ra,0xffff4
    80010292:	522080e7          	jalr	1314(ra) # 800047b0 <_ZN4core4sync6atomic5fence17hd2f91624c9f09ce8E>
    80010296:	a039                	j	800102a4 <.LBB2_17+0x4e>
            spin_loop();
    80010298:	fffff097          	auipc	ra,0xfffff
    8001029c:	3f4080e7          	jalr	1012(ra) # 8000f68c <_ZN4core4hint9spin_loop17h176cebad2d7c26adE>
    800102a0:	a009                	j	800102a2 <.LBB2_17+0x4c>
        while self.locked.swap(true, Ordering::Acquire){
    800102a2:	b7e1                	j	8001026a <.LBB2_17+0x14>
            self.cpu_id.set(cpuid() as isize);
    800102a4:	7542                	ld	a0,48(sp)
    800102a6:	0541                	addi	a0,a0,16
    800102a8:	e02a                	sd	a0,0(sp)
    800102aa:	00002097          	auipc	ra,0x2
    800102ae:	aec080e7          	jalr	-1300(ra) # 80011d96 <_ZN6kernel7process3cpu5cpuid17h605093a6a9a60164E>
    800102b2:	e42a                	sd	a0,8(sp)
    800102b4:	a009                	j	800102b6 <.LBB2_17+0x60>
    800102b6:	65a2                	ld	a1,8(sp)
    800102b8:	6502                	ld	a0,0(sp)
    800102ba:	ffff5097          	auipc	ra,0xffff5
    800102be:	ec4080e7          	jalr	-316(ra) # 8000517e <_ZN4core4cell13Cell$LT$T$GT$3set17hb9927bf4fdcefc87E>
    800102c2:	a009                	j	800102c4 <.LBB2_17+0x6e>
        SpinlockGuard{spinlock: &self}
    800102c4:	7542                	ld	a0,48(sp)
    800102c6:	fc2a                	sd	a0,56(sp)
    }
    800102c8:	60ea                	ld	ra,152(sp)
    800102ca:	610d                	addi	sp,sp,160
    800102cc:	8082                	ret

Disassembly of section .text._ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h107253eaf5028ed4E:

00000000800102ce <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h107253eaf5028ed4E>:
    pub fn acquire(&self) -> SpinlockGuard<'_, T> {
    800102ce:	7135                	addi	sp,sp,-160
    800102d0:	ed06                	sd	ra,152(sp)
    800102d2:	f82a                	sd	a0,48(sp)
        push_off();
    800102d4:	00002097          	auipc	ra,0x2
    800102d8:	f2e080e7          	jalr	-210(ra) # 80012202 <_ZN6kernel7process3cpu8push_off17h0acd4baa93104745E>
    800102dc:	a009                	j	800102de <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h107253eaf5028ed4E+0x10>
        if self.holding() {
    800102de:	7542                	ld	a0,48(sp)
    800102e0:	00001097          	auipc	ra,0x1
    800102e4:	23e080e7          	jalr	574(ra) # 8001151e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hfffb7f56d7315d17E>
    800102e8:	f42a                	sd	a0,40(sp)
    800102ea:	a009                	j	800102ec <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h107253eaf5028ed4E+0x1e>
    800102ec:	7522                	ld	a0,40(sp)
    800102ee:	4581                	li	a1,0
    800102f0:	02b50163          	beq	a0,a1,80010312 <.LBB3_15+0x16>
    800102f4:	a009                	j	800102f6 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h107253eaf5028ed4E+0x28>
            panic!("spinlock {} acquire", self.name);
    800102f6:	7542                	ld	a0,48(sp)
    800102f8:	e12a                	sd	a0,128(sp)
    800102fa:	e92a                	sd	a0,144(sp)

00000000800102fc <.LBB3_15>:
    800102fc:	0000e597          	auipc	a1,0xe
    80010300:	2b858593          	addi	a1,a1,696 # 8001e5b4 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E>
    80010304:	0000e097          	auipc	ra,0xe
    80010308:	2f6080e7          	jalr	758(ra) # 8001e5fa <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>
    8001030c:	ec2a                	sd	a0,24(sp)
    8001030e:	f02e                	sd	a1,32(sp)
    80010310:	a011                	j	80010314 <.LBB3_15+0x18>
        while self.locked.swap(true, Ordering::Acquire){
    80010312:	a825                	j	8001034a <.LBB3_17+0x14>
            panic!("spinlock {} acquire", self.name);
    80010314:	7502                	ld	a0,32(sp)
    80010316:	65e2                	ld	a1,24(sp)
    80010318:	f8ae                	sd	a1,112(sp)
    8001031a:	fcaa                	sd	a0,120(sp)

000000008001031c <.LBB3_16>:
    8001031c:	00018597          	auipc	a1,0x18
    80010320:	56c58593          	addi	a1,a1,1388 # 80028888 <.L__unnamed_1>
    80010324:	0088                	addi	a0,sp,64
    80010326:	4609                	li	a2,2
    80010328:	1894                	addi	a3,sp,112
    8001032a:	4705                	li	a4,1
    8001032c:	ffff5097          	auipc	ra,0xffff5
    80010330:	13e080e7          	jalr	318(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80010334:	a009                	j	80010336 <.LBB3_17>

0000000080010336 <.LBB3_17>:
    80010336:	00018597          	auipc	a1,0x18
    8001033a:	58a58593          	addi	a1,a1,1418 # 800288c0 <.L__unnamed_2>
    8001033e:	0088                	addi	a0,sp,64
    80010340:	00012097          	auipc	ra,0x12
    80010344:	fa2080e7          	jalr	-94(ra) # 800222e2 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
    80010348:	0000                	unimp
        while self.locked.swap(true, Ordering::Acquire){
    8001034a:	7542                	ld	a0,48(sp)
    8001034c:	0561                	addi	a0,a0,24
    8001034e:	4609                	li	a2,2
    80010350:	08c10723          	sb	a2,142(sp)
    80010354:	4585                	li	a1,1
    80010356:	ffff4097          	auipc	ra,0xffff4
    8001035a:	352080e7          	jalr	850(ra) # 800046a8 <_ZN4core4sync6atomic10AtomicBool4swap17h269e9e7e986b9c97E>
    8001035e:	e82a                	sd	a0,16(sp)
    80010360:	a009                	j	80010362 <.LBB3_17+0x2c>
    80010362:	6542                	ld	a0,16(sp)
    80010364:	e911                	bnez	a0,80010378 <.LBB3_17+0x42>
    80010366:	a009                	j	80010368 <.LBB3_17+0x32>
    80010368:	4511                	li	a0,4
        fence(Ordering::SeqCst);
    8001036a:	08a107a3          	sb	a0,143(sp)
    8001036e:	ffff4097          	auipc	ra,0xffff4
    80010372:	442080e7          	jalr	1090(ra) # 800047b0 <_ZN4core4sync6atomic5fence17hd2f91624c9f09ce8E>
    80010376:	a039                	j	80010384 <.LBB3_17+0x4e>
            spin_loop();
    80010378:	fffff097          	auipc	ra,0xfffff
    8001037c:	314080e7          	jalr	788(ra) # 8000f68c <_ZN4core4hint9spin_loop17h176cebad2d7c26adE>
    80010380:	a009                	j	80010382 <.LBB3_17+0x4c>
        while self.locked.swap(true, Ordering::Acquire){
    80010382:	b7e1                	j	8001034a <.LBB3_17+0x14>
            self.cpu_id.set(cpuid() as isize);
    80010384:	7542                	ld	a0,48(sp)
    80010386:	0541                	addi	a0,a0,16
    80010388:	e02a                	sd	a0,0(sp)
    8001038a:	00002097          	auipc	ra,0x2
    8001038e:	a0c080e7          	jalr	-1524(ra) # 80011d96 <_ZN6kernel7process3cpu5cpuid17h605093a6a9a60164E>
    80010392:	e42a                	sd	a0,8(sp)
    80010394:	a009                	j	80010396 <.LBB3_17+0x60>
    80010396:	65a2                	ld	a1,8(sp)
    80010398:	6502                	ld	a0,0(sp)
    8001039a:	ffff5097          	auipc	ra,0xffff5
    8001039e:	de4080e7          	jalr	-540(ra) # 8000517e <_ZN4core4cell13Cell$LT$T$GT$3set17hb9927bf4fdcefc87E>
    800103a2:	a009                	j	800103a4 <.LBB3_17+0x6e>
        SpinlockGuard{spinlock: &self}
    800103a4:	7542                	ld	a0,48(sp)
    800103a6:	fc2a                	sd	a0,56(sp)
    }
    800103a8:	60ea                	ld	ra,152(sp)
    800103aa:	610d                	addi	sp,sp,160
    800103ac:	8082                	ret

Disassembly of section .text._ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h25a8532f298de6d8E:

00000000800103ae <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h25a8532f298de6d8E>:
    pub fn acquire(&self) -> SpinlockGuard<'_, T> {
    800103ae:	7135                	addi	sp,sp,-160
    800103b0:	ed06                	sd	ra,152(sp)
    800103b2:	f82a                	sd	a0,48(sp)
        push_off();
    800103b4:	00002097          	auipc	ra,0x2
    800103b8:	e4e080e7          	jalr	-434(ra) # 80012202 <_ZN6kernel7process3cpu8push_off17h0acd4baa93104745E>
    800103bc:	a009                	j	800103be <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h25a8532f298de6d8E+0x10>
        if self.holding() {
    800103be:	7542                	ld	a0,48(sp)
    800103c0:	00001097          	auipc	ra,0x1
    800103c4:	dfa080e7          	jalr	-518(ra) # 800111ba <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h56772fc96a718090E>
    800103c8:	f42a                	sd	a0,40(sp)
    800103ca:	a009                	j	800103cc <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h25a8532f298de6d8E+0x1e>
    800103cc:	7522                	ld	a0,40(sp)
    800103ce:	4581                	li	a1,0
    800103d0:	02b50163          	beq	a0,a1,800103f2 <.LBB4_15+0x16>
    800103d4:	a009                	j	800103d6 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h25a8532f298de6d8E+0x28>
            panic!("spinlock {} acquire", self.name);
    800103d6:	7542                	ld	a0,48(sp)
    800103d8:	e12a                	sd	a0,128(sp)
    800103da:	e92a                	sd	a0,144(sp)

00000000800103dc <.LBB4_15>:
    800103dc:	0000e597          	auipc	a1,0xe
    800103e0:	1d858593          	addi	a1,a1,472 # 8001e5b4 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E>
    800103e4:	0000e097          	auipc	ra,0xe
    800103e8:	216080e7          	jalr	534(ra) # 8001e5fa <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>
    800103ec:	ec2a                	sd	a0,24(sp)
    800103ee:	f02e                	sd	a1,32(sp)
    800103f0:	a011                	j	800103f4 <.LBB4_15+0x18>
        while self.locked.swap(true, Ordering::Acquire){
    800103f2:	a825                	j	8001042a <.LBB4_17+0x14>
            panic!("spinlock {} acquire", self.name);
    800103f4:	7502                	ld	a0,32(sp)
    800103f6:	65e2                	ld	a1,24(sp)
    800103f8:	f8ae                	sd	a1,112(sp)
    800103fa:	fcaa                	sd	a0,120(sp)

00000000800103fc <.LBB4_16>:
    800103fc:	00018597          	auipc	a1,0x18
    80010400:	48c58593          	addi	a1,a1,1164 # 80028888 <.L__unnamed_1>
    80010404:	0088                	addi	a0,sp,64
    80010406:	4609                	li	a2,2
    80010408:	1894                	addi	a3,sp,112
    8001040a:	4705                	li	a4,1
    8001040c:	ffff5097          	auipc	ra,0xffff5
    80010410:	05e080e7          	jalr	94(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80010414:	a009                	j	80010416 <.LBB4_17>

0000000080010416 <.LBB4_17>:
    80010416:	00018597          	auipc	a1,0x18
    8001041a:	4aa58593          	addi	a1,a1,1194 # 800288c0 <.L__unnamed_2>
    8001041e:	0088                	addi	a0,sp,64
    80010420:	00012097          	auipc	ra,0x12
    80010424:	ec2080e7          	jalr	-318(ra) # 800222e2 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
    80010428:	0000                	unimp
        while self.locked.swap(true, Ordering::Acquire){
    8001042a:	7542                	ld	a0,48(sp)
    8001042c:	0561                	addi	a0,a0,24
    8001042e:	4609                	li	a2,2
    80010430:	08c10723          	sb	a2,142(sp)
    80010434:	4585                	li	a1,1
    80010436:	ffff4097          	auipc	ra,0xffff4
    8001043a:	272080e7          	jalr	626(ra) # 800046a8 <_ZN4core4sync6atomic10AtomicBool4swap17h269e9e7e986b9c97E>
    8001043e:	e82a                	sd	a0,16(sp)
    80010440:	a009                	j	80010442 <.LBB4_17+0x2c>
    80010442:	6542                	ld	a0,16(sp)
    80010444:	e911                	bnez	a0,80010458 <.LBB4_17+0x42>
    80010446:	a009                	j	80010448 <.LBB4_17+0x32>
    80010448:	4511                	li	a0,4
        fence(Ordering::SeqCst);
    8001044a:	08a107a3          	sb	a0,143(sp)
    8001044e:	ffff4097          	auipc	ra,0xffff4
    80010452:	362080e7          	jalr	866(ra) # 800047b0 <_ZN4core4sync6atomic5fence17hd2f91624c9f09ce8E>
    80010456:	a039                	j	80010464 <.LBB4_17+0x4e>
            spin_loop();
    80010458:	fffff097          	auipc	ra,0xfffff
    8001045c:	234080e7          	jalr	564(ra) # 8000f68c <_ZN4core4hint9spin_loop17h176cebad2d7c26adE>
    80010460:	a009                	j	80010462 <.LBB4_17+0x4c>
        while self.locked.swap(true, Ordering::Acquire){
    80010462:	b7e1                	j	8001042a <.LBB4_17+0x14>
            self.cpu_id.set(cpuid() as isize);
    80010464:	7542                	ld	a0,48(sp)
    80010466:	0541                	addi	a0,a0,16
    80010468:	e02a                	sd	a0,0(sp)
    8001046a:	00002097          	auipc	ra,0x2
    8001046e:	92c080e7          	jalr	-1748(ra) # 80011d96 <_ZN6kernel7process3cpu5cpuid17h605093a6a9a60164E>
    80010472:	e42a                	sd	a0,8(sp)
    80010474:	a009                	j	80010476 <.LBB4_17+0x60>
    80010476:	65a2                	ld	a1,8(sp)
    80010478:	6502                	ld	a0,0(sp)
    8001047a:	ffff5097          	auipc	ra,0xffff5
    8001047e:	d04080e7          	jalr	-764(ra) # 8000517e <_ZN4core4cell13Cell$LT$T$GT$3set17hb9927bf4fdcefc87E>
    80010482:	a009                	j	80010484 <.LBB4_17+0x6e>
        SpinlockGuard{spinlock: &self}
    80010484:	7542                	ld	a0,48(sp)
    80010486:	fc2a                	sd	a0,56(sp)
    }
    80010488:	60ea                	ld	ra,152(sp)
    8001048a:	610d                	addi	sp,sp,160
    8001048c:	8082                	ret

Disassembly of section .text._ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h431ef48b95a5e4c6E:

000000008001048e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h431ef48b95a5e4c6E>:
    pub fn acquire(&self) -> SpinlockGuard<'_, T> {
    8001048e:	7135                	addi	sp,sp,-160
    80010490:	ed06                	sd	ra,152(sp)
    80010492:	f82a                	sd	a0,48(sp)
        push_off();
    80010494:	00002097          	auipc	ra,0x2
    80010498:	d6e080e7          	jalr	-658(ra) # 80012202 <_ZN6kernel7process3cpu8push_off17h0acd4baa93104745E>
    8001049c:	a009                	j	8001049e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h431ef48b95a5e4c6E+0x10>
        if self.holding() {
    8001049e:	7542                	ld	a0,48(sp)
    800104a0:	00001097          	auipc	ra,0x1
    800104a4:	f86080e7          	jalr	-122(ra) # 80011426 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hca575eb433d6c072E>
    800104a8:	f42a                	sd	a0,40(sp)
    800104aa:	a009                	j	800104ac <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h431ef48b95a5e4c6E+0x1e>
    800104ac:	7522                	ld	a0,40(sp)
    800104ae:	4581                	li	a1,0
    800104b0:	02b50163          	beq	a0,a1,800104d2 <.LBB5_15+0x16>
    800104b4:	a009                	j	800104b6 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h431ef48b95a5e4c6E+0x28>
            panic!("spinlock {} acquire", self.name);
    800104b6:	7542                	ld	a0,48(sp)
    800104b8:	e12a                	sd	a0,128(sp)
    800104ba:	e92a                	sd	a0,144(sp)

00000000800104bc <.LBB5_15>:
    800104bc:	0000e597          	auipc	a1,0xe
    800104c0:	0f858593          	addi	a1,a1,248 # 8001e5b4 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E>
    800104c4:	0000e097          	auipc	ra,0xe
    800104c8:	136080e7          	jalr	310(ra) # 8001e5fa <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>
    800104cc:	ec2a                	sd	a0,24(sp)
    800104ce:	f02e                	sd	a1,32(sp)
    800104d0:	a011                	j	800104d4 <.LBB5_15+0x18>
        while self.locked.swap(true, Ordering::Acquire){
    800104d2:	a825                	j	8001050a <.LBB5_17+0x14>
            panic!("spinlock {} acquire", self.name);
    800104d4:	7502                	ld	a0,32(sp)
    800104d6:	65e2                	ld	a1,24(sp)
    800104d8:	f8ae                	sd	a1,112(sp)
    800104da:	fcaa                	sd	a0,120(sp)

00000000800104dc <.LBB5_16>:
    800104dc:	00018597          	auipc	a1,0x18
    800104e0:	3ac58593          	addi	a1,a1,940 # 80028888 <.L__unnamed_1>
    800104e4:	0088                	addi	a0,sp,64
    800104e6:	4609                	li	a2,2
    800104e8:	1894                	addi	a3,sp,112
    800104ea:	4705                	li	a4,1
    800104ec:	ffff5097          	auipc	ra,0xffff5
    800104f0:	f7e080e7          	jalr	-130(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    800104f4:	a009                	j	800104f6 <.LBB5_17>

00000000800104f6 <.LBB5_17>:
    800104f6:	00018597          	auipc	a1,0x18
    800104fa:	3ca58593          	addi	a1,a1,970 # 800288c0 <.L__unnamed_2>
    800104fe:	0088                	addi	a0,sp,64
    80010500:	00012097          	auipc	ra,0x12
    80010504:	de2080e7          	jalr	-542(ra) # 800222e2 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
    80010508:	0000                	unimp
        while self.locked.swap(true, Ordering::Acquire){
    8001050a:	7542                	ld	a0,48(sp)
    8001050c:	0561                	addi	a0,a0,24
    8001050e:	4609                	li	a2,2
    80010510:	08c10723          	sb	a2,142(sp)
    80010514:	4585                	li	a1,1
    80010516:	ffff4097          	auipc	ra,0xffff4
    8001051a:	192080e7          	jalr	402(ra) # 800046a8 <_ZN4core4sync6atomic10AtomicBool4swap17h269e9e7e986b9c97E>
    8001051e:	e82a                	sd	a0,16(sp)
    80010520:	a009                	j	80010522 <.LBB5_17+0x2c>
    80010522:	6542                	ld	a0,16(sp)
    80010524:	e911                	bnez	a0,80010538 <.LBB5_17+0x42>
    80010526:	a009                	j	80010528 <.LBB5_17+0x32>
    80010528:	4511                	li	a0,4
        fence(Ordering::SeqCst);
    8001052a:	08a107a3          	sb	a0,143(sp)
    8001052e:	ffff4097          	auipc	ra,0xffff4
    80010532:	282080e7          	jalr	642(ra) # 800047b0 <_ZN4core4sync6atomic5fence17hd2f91624c9f09ce8E>
    80010536:	a039                	j	80010544 <.LBB5_17+0x4e>
            spin_loop();
    80010538:	fffff097          	auipc	ra,0xfffff
    8001053c:	154080e7          	jalr	340(ra) # 8000f68c <_ZN4core4hint9spin_loop17h176cebad2d7c26adE>
    80010540:	a009                	j	80010542 <.LBB5_17+0x4c>
        while self.locked.swap(true, Ordering::Acquire){
    80010542:	b7e1                	j	8001050a <.LBB5_17+0x14>
            self.cpu_id.set(cpuid() as isize);
    80010544:	7542                	ld	a0,48(sp)
    80010546:	0541                	addi	a0,a0,16
    80010548:	e02a                	sd	a0,0(sp)
    8001054a:	00002097          	auipc	ra,0x2
    8001054e:	84c080e7          	jalr	-1972(ra) # 80011d96 <_ZN6kernel7process3cpu5cpuid17h605093a6a9a60164E>
    80010552:	e42a                	sd	a0,8(sp)
    80010554:	a009                	j	80010556 <.LBB5_17+0x60>
    80010556:	65a2                	ld	a1,8(sp)
    80010558:	6502                	ld	a0,0(sp)
    8001055a:	ffff5097          	auipc	ra,0xffff5
    8001055e:	c24080e7          	jalr	-988(ra) # 8000517e <_ZN4core4cell13Cell$LT$T$GT$3set17hb9927bf4fdcefc87E>
    80010562:	a009                	j	80010564 <.LBB5_17+0x6e>
        SpinlockGuard{spinlock: &self}
    80010564:	7542                	ld	a0,48(sp)
    80010566:	fc2a                	sd	a0,56(sp)
    }
    80010568:	60ea                	ld	ra,152(sp)
    8001056a:	610d                	addi	sp,sp,160
    8001056c:	8082                	ret

Disassembly of section .text._ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h4c9081acf22588feE:

000000008001056e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h4c9081acf22588feE>:
    pub fn acquire(&self) -> SpinlockGuard<'_, T> {
    8001056e:	7135                	addi	sp,sp,-160
    80010570:	ed06                	sd	ra,152(sp)
    80010572:	f82a                	sd	a0,48(sp)
        push_off();
    80010574:	00002097          	auipc	ra,0x2
    80010578:	c8e080e7          	jalr	-882(ra) # 80012202 <_ZN6kernel7process3cpu8push_off17h0acd4baa93104745E>
    8001057c:	a009                	j	8001057e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h4c9081acf22588feE+0x10>
        if self.holding() {
    8001057e:	7542                	ld	a0,48(sp)
    80010580:	00001097          	auipc	ra,0x1
    80010584:	e2a080e7          	jalr	-470(ra) # 800113aa <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17haa146bec45c9d0c2E>
    80010588:	f42a                	sd	a0,40(sp)
    8001058a:	a009                	j	8001058c <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h4c9081acf22588feE+0x1e>
    8001058c:	7522                	ld	a0,40(sp)
    8001058e:	4581                	li	a1,0
    80010590:	02b50163          	beq	a0,a1,800105b2 <.LBB6_15+0x16>
    80010594:	a009                	j	80010596 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h4c9081acf22588feE+0x28>
            panic!("spinlock {} acquire", self.name);
    80010596:	7542                	ld	a0,48(sp)
    80010598:	e12a                	sd	a0,128(sp)
    8001059a:	e92a                	sd	a0,144(sp)

000000008001059c <.LBB6_15>:
    8001059c:	0000e597          	auipc	a1,0xe
    800105a0:	01858593          	addi	a1,a1,24 # 8001e5b4 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E>
    800105a4:	0000e097          	auipc	ra,0xe
    800105a8:	056080e7          	jalr	86(ra) # 8001e5fa <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>
    800105ac:	ec2a                	sd	a0,24(sp)
    800105ae:	f02e                	sd	a1,32(sp)
    800105b0:	a011                	j	800105b4 <.LBB6_15+0x18>
        while self.locked.swap(true, Ordering::Acquire){
    800105b2:	a825                	j	800105ea <.LBB6_17+0x14>
            panic!("spinlock {} acquire", self.name);
    800105b4:	7502                	ld	a0,32(sp)
    800105b6:	65e2                	ld	a1,24(sp)
    800105b8:	f8ae                	sd	a1,112(sp)
    800105ba:	fcaa                	sd	a0,120(sp)

00000000800105bc <.LBB6_16>:
    800105bc:	00018597          	auipc	a1,0x18
    800105c0:	2cc58593          	addi	a1,a1,716 # 80028888 <.L__unnamed_1>
    800105c4:	0088                	addi	a0,sp,64
    800105c6:	4609                	li	a2,2
    800105c8:	1894                	addi	a3,sp,112
    800105ca:	4705                	li	a4,1
    800105cc:	ffff5097          	auipc	ra,0xffff5
    800105d0:	e9e080e7          	jalr	-354(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    800105d4:	a009                	j	800105d6 <.LBB6_17>

00000000800105d6 <.LBB6_17>:
    800105d6:	00018597          	auipc	a1,0x18
    800105da:	2ea58593          	addi	a1,a1,746 # 800288c0 <.L__unnamed_2>
    800105de:	0088                	addi	a0,sp,64
    800105e0:	00012097          	auipc	ra,0x12
    800105e4:	d02080e7          	jalr	-766(ra) # 800222e2 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
    800105e8:	0000                	unimp
        while self.locked.swap(true, Ordering::Acquire){
    800105ea:	7542                	ld	a0,48(sp)
    800105ec:	0561                	addi	a0,a0,24
    800105ee:	4609                	li	a2,2
    800105f0:	08c10723          	sb	a2,142(sp)
    800105f4:	4585                	li	a1,1
    800105f6:	ffff4097          	auipc	ra,0xffff4
    800105fa:	0b2080e7          	jalr	178(ra) # 800046a8 <_ZN4core4sync6atomic10AtomicBool4swap17h269e9e7e986b9c97E>
    800105fe:	e82a                	sd	a0,16(sp)
    80010600:	a009                	j	80010602 <.LBB6_17+0x2c>
    80010602:	6542                	ld	a0,16(sp)
    80010604:	e911                	bnez	a0,80010618 <.LBB6_17+0x42>
    80010606:	a009                	j	80010608 <.LBB6_17+0x32>
    80010608:	4511                	li	a0,4
        fence(Ordering::SeqCst);
    8001060a:	08a107a3          	sb	a0,143(sp)
    8001060e:	ffff4097          	auipc	ra,0xffff4
    80010612:	1a2080e7          	jalr	418(ra) # 800047b0 <_ZN4core4sync6atomic5fence17hd2f91624c9f09ce8E>
    80010616:	a039                	j	80010624 <.LBB6_17+0x4e>
            spin_loop();
    80010618:	fffff097          	auipc	ra,0xfffff
    8001061c:	074080e7          	jalr	116(ra) # 8000f68c <_ZN4core4hint9spin_loop17h176cebad2d7c26adE>
    80010620:	a009                	j	80010622 <.LBB6_17+0x4c>
        while self.locked.swap(true, Ordering::Acquire){
    80010622:	b7e1                	j	800105ea <.LBB6_17+0x14>
            self.cpu_id.set(cpuid() as isize);
    80010624:	7542                	ld	a0,48(sp)
    80010626:	0541                	addi	a0,a0,16
    80010628:	e02a                	sd	a0,0(sp)
    8001062a:	00001097          	auipc	ra,0x1
    8001062e:	76c080e7          	jalr	1900(ra) # 80011d96 <_ZN6kernel7process3cpu5cpuid17h605093a6a9a60164E>
    80010632:	e42a                	sd	a0,8(sp)
    80010634:	a009                	j	80010636 <.LBB6_17+0x60>
    80010636:	65a2                	ld	a1,8(sp)
    80010638:	6502                	ld	a0,0(sp)
    8001063a:	ffff5097          	auipc	ra,0xffff5
    8001063e:	b44080e7          	jalr	-1212(ra) # 8000517e <_ZN4core4cell13Cell$LT$T$GT$3set17hb9927bf4fdcefc87E>
    80010642:	a009                	j	80010644 <.LBB6_17+0x6e>
        SpinlockGuard{spinlock: &self}
    80010644:	7542                	ld	a0,48(sp)
    80010646:	fc2a                	sd	a0,56(sp)
    }
    80010648:	60ea                	ld	ra,152(sp)
    8001064a:	610d                	addi	sp,sp,160
    8001064c:	8082                	ret

Disassembly of section .text._ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h702266ebf2d4d383E:

000000008001064e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h702266ebf2d4d383E>:
    pub fn acquire(&self) -> SpinlockGuard<'_, T> {
    8001064e:	7135                	addi	sp,sp,-160
    80010650:	ed06                	sd	ra,152(sp)
    80010652:	f82a                	sd	a0,48(sp)
        push_off();
    80010654:	00002097          	auipc	ra,0x2
    80010658:	bae080e7          	jalr	-1106(ra) # 80012202 <_ZN6kernel7process3cpu8push_off17h0acd4baa93104745E>
    8001065c:	a009                	j	8001065e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h702266ebf2d4d383E+0x10>
        if self.holding() {
    8001065e:	7542                	ld	a0,48(sp)
    80010660:	00001097          	auipc	ra,0x1
    80010664:	cce080e7          	jalr	-818(ra) # 8001132e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h92b63d3de4da3516E>
    80010668:	f42a                	sd	a0,40(sp)
    8001066a:	a009                	j	8001066c <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h702266ebf2d4d383E+0x1e>
    8001066c:	7522                	ld	a0,40(sp)
    8001066e:	4581                	li	a1,0
    80010670:	02b50163          	beq	a0,a1,80010692 <.LBB7_15+0x16>
    80010674:	a009                	j	80010676 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h702266ebf2d4d383E+0x28>
            panic!("spinlock {} acquire", self.name);
    80010676:	7542                	ld	a0,48(sp)
    80010678:	e12a                	sd	a0,128(sp)
    8001067a:	e92a                	sd	a0,144(sp)

000000008001067c <.LBB7_15>:
    8001067c:	0000e597          	auipc	a1,0xe
    80010680:	f3858593          	addi	a1,a1,-200 # 8001e5b4 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E>
    80010684:	0000e097          	auipc	ra,0xe
    80010688:	f76080e7          	jalr	-138(ra) # 8001e5fa <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>
    8001068c:	ec2a                	sd	a0,24(sp)
    8001068e:	f02e                	sd	a1,32(sp)
    80010690:	a011                	j	80010694 <.LBB7_15+0x18>
        while self.locked.swap(true, Ordering::Acquire){
    80010692:	a825                	j	800106ca <.LBB7_17+0x14>
            panic!("spinlock {} acquire", self.name);
    80010694:	7502                	ld	a0,32(sp)
    80010696:	65e2                	ld	a1,24(sp)
    80010698:	f8ae                	sd	a1,112(sp)
    8001069a:	fcaa                	sd	a0,120(sp)

000000008001069c <.LBB7_16>:
    8001069c:	00018597          	auipc	a1,0x18
    800106a0:	1ec58593          	addi	a1,a1,492 # 80028888 <.L__unnamed_1>
    800106a4:	0088                	addi	a0,sp,64
    800106a6:	4609                	li	a2,2
    800106a8:	1894                	addi	a3,sp,112
    800106aa:	4705                	li	a4,1
    800106ac:	ffff5097          	auipc	ra,0xffff5
    800106b0:	dbe080e7          	jalr	-578(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    800106b4:	a009                	j	800106b6 <.LBB7_17>

00000000800106b6 <.LBB7_17>:
    800106b6:	00018597          	auipc	a1,0x18
    800106ba:	20a58593          	addi	a1,a1,522 # 800288c0 <.L__unnamed_2>
    800106be:	0088                	addi	a0,sp,64
    800106c0:	00012097          	auipc	ra,0x12
    800106c4:	c22080e7          	jalr	-990(ra) # 800222e2 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
    800106c8:	0000                	unimp
        while self.locked.swap(true, Ordering::Acquire){
    800106ca:	7542                	ld	a0,48(sp)
    800106cc:	0561                	addi	a0,a0,24
    800106ce:	4609                	li	a2,2
    800106d0:	08c10723          	sb	a2,142(sp)
    800106d4:	4585                	li	a1,1
    800106d6:	ffff4097          	auipc	ra,0xffff4
    800106da:	fd2080e7          	jalr	-46(ra) # 800046a8 <_ZN4core4sync6atomic10AtomicBool4swap17h269e9e7e986b9c97E>
    800106de:	e82a                	sd	a0,16(sp)
    800106e0:	a009                	j	800106e2 <.LBB7_17+0x2c>
    800106e2:	6542                	ld	a0,16(sp)
    800106e4:	e911                	bnez	a0,800106f8 <.LBB7_17+0x42>
    800106e6:	a009                	j	800106e8 <.LBB7_17+0x32>
    800106e8:	4511                	li	a0,4
        fence(Ordering::SeqCst);
    800106ea:	08a107a3          	sb	a0,143(sp)
    800106ee:	ffff4097          	auipc	ra,0xffff4
    800106f2:	0c2080e7          	jalr	194(ra) # 800047b0 <_ZN4core4sync6atomic5fence17hd2f91624c9f09ce8E>
    800106f6:	a039                	j	80010704 <.LBB7_17+0x4e>
            spin_loop();
    800106f8:	fffff097          	auipc	ra,0xfffff
    800106fc:	f94080e7          	jalr	-108(ra) # 8000f68c <_ZN4core4hint9spin_loop17h176cebad2d7c26adE>
    80010700:	a009                	j	80010702 <.LBB7_17+0x4c>
        while self.locked.swap(true, Ordering::Acquire){
    80010702:	b7e1                	j	800106ca <.LBB7_17+0x14>
            self.cpu_id.set(cpuid() as isize);
    80010704:	7542                	ld	a0,48(sp)
    80010706:	0541                	addi	a0,a0,16
    80010708:	e02a                	sd	a0,0(sp)
    8001070a:	00001097          	auipc	ra,0x1
    8001070e:	68c080e7          	jalr	1676(ra) # 80011d96 <_ZN6kernel7process3cpu5cpuid17h605093a6a9a60164E>
    80010712:	e42a                	sd	a0,8(sp)
    80010714:	a009                	j	80010716 <.LBB7_17+0x60>
    80010716:	65a2                	ld	a1,8(sp)
    80010718:	6502                	ld	a0,0(sp)
    8001071a:	ffff5097          	auipc	ra,0xffff5
    8001071e:	a64080e7          	jalr	-1436(ra) # 8000517e <_ZN4core4cell13Cell$LT$T$GT$3set17hb9927bf4fdcefc87E>
    80010722:	a009                	j	80010724 <.LBB7_17+0x6e>
        SpinlockGuard{spinlock: &self}
    80010724:	7542                	ld	a0,48(sp)
    80010726:	fc2a                	sd	a0,56(sp)
    }
    80010728:	60ea                	ld	ra,152(sp)
    8001072a:	610d                	addi	sp,sp,160
    8001072c:	8082                	ret

Disassembly of section .text._ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h922bace5232f6228E:

000000008001072e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h922bace5232f6228E>:
    pub fn acquire(&self) -> SpinlockGuard<'_, T> {
    8001072e:	7135                	addi	sp,sp,-160
    80010730:	ed06                	sd	ra,152(sp)
    80010732:	f82a                	sd	a0,48(sp)
        push_off();
    80010734:	00002097          	auipc	ra,0x2
    80010738:	ace080e7          	jalr	-1330(ra) # 80012202 <_ZN6kernel7process3cpu8push_off17h0acd4baa93104745E>
    8001073c:	a009                	j	8001073e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h922bace5232f6228E+0x10>
        if self.holding() {
    8001073e:	7542                	ld	a0,48(sp)
    80010740:	00001097          	auipc	ra,0x1
    80010744:	982080e7          	jalr	-1662(ra) # 800110c2 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h04bb873c43629d68E>
    80010748:	f42a                	sd	a0,40(sp)
    8001074a:	a009                	j	8001074c <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h922bace5232f6228E+0x1e>
    8001074c:	7522                	ld	a0,40(sp)
    8001074e:	4581                	li	a1,0
    80010750:	02b50163          	beq	a0,a1,80010772 <.LBB8_15+0x16>
    80010754:	a009                	j	80010756 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h922bace5232f6228E+0x28>
            panic!("spinlock {} acquire", self.name);
    80010756:	7542                	ld	a0,48(sp)
    80010758:	e12a                	sd	a0,128(sp)
    8001075a:	e92a                	sd	a0,144(sp)

000000008001075c <.LBB8_15>:
    8001075c:	0000e597          	auipc	a1,0xe
    80010760:	e5858593          	addi	a1,a1,-424 # 8001e5b4 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E>
    80010764:	0000e097          	auipc	ra,0xe
    80010768:	e96080e7          	jalr	-362(ra) # 8001e5fa <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>
    8001076c:	ec2a                	sd	a0,24(sp)
    8001076e:	f02e                	sd	a1,32(sp)
    80010770:	a011                	j	80010774 <.LBB8_15+0x18>
        while self.locked.swap(true, Ordering::Acquire){
    80010772:	a825                	j	800107aa <.LBB8_17+0x14>
            panic!("spinlock {} acquire", self.name);
    80010774:	7502                	ld	a0,32(sp)
    80010776:	65e2                	ld	a1,24(sp)
    80010778:	f8ae                	sd	a1,112(sp)
    8001077a:	fcaa                	sd	a0,120(sp)

000000008001077c <.LBB8_16>:
    8001077c:	00018597          	auipc	a1,0x18
    80010780:	10c58593          	addi	a1,a1,268 # 80028888 <.L__unnamed_1>
    80010784:	0088                	addi	a0,sp,64
    80010786:	4609                	li	a2,2
    80010788:	1894                	addi	a3,sp,112
    8001078a:	4705                	li	a4,1
    8001078c:	ffff5097          	auipc	ra,0xffff5
    80010790:	cde080e7          	jalr	-802(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80010794:	a009                	j	80010796 <.LBB8_17>

0000000080010796 <.LBB8_17>:
    80010796:	00018597          	auipc	a1,0x18
    8001079a:	12a58593          	addi	a1,a1,298 # 800288c0 <.L__unnamed_2>
    8001079e:	0088                	addi	a0,sp,64
    800107a0:	00012097          	auipc	ra,0x12
    800107a4:	b42080e7          	jalr	-1214(ra) # 800222e2 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
    800107a8:	0000                	unimp
        while self.locked.swap(true, Ordering::Acquire){
    800107aa:	7542                	ld	a0,48(sp)
    800107ac:	0561                	addi	a0,a0,24
    800107ae:	4609                	li	a2,2
    800107b0:	08c10723          	sb	a2,142(sp)
    800107b4:	4585                	li	a1,1
    800107b6:	ffff4097          	auipc	ra,0xffff4
    800107ba:	ef2080e7          	jalr	-270(ra) # 800046a8 <_ZN4core4sync6atomic10AtomicBool4swap17h269e9e7e986b9c97E>
    800107be:	e82a                	sd	a0,16(sp)
    800107c0:	a009                	j	800107c2 <.LBB8_17+0x2c>
    800107c2:	6542                	ld	a0,16(sp)
    800107c4:	e911                	bnez	a0,800107d8 <.LBB8_17+0x42>
    800107c6:	a009                	j	800107c8 <.LBB8_17+0x32>
    800107c8:	4511                	li	a0,4
        fence(Ordering::SeqCst);
    800107ca:	08a107a3          	sb	a0,143(sp)
    800107ce:	ffff4097          	auipc	ra,0xffff4
    800107d2:	fe2080e7          	jalr	-30(ra) # 800047b0 <_ZN4core4sync6atomic5fence17hd2f91624c9f09ce8E>
    800107d6:	a039                	j	800107e4 <.LBB8_17+0x4e>
            spin_loop();
    800107d8:	fffff097          	auipc	ra,0xfffff
    800107dc:	eb4080e7          	jalr	-332(ra) # 8000f68c <_ZN4core4hint9spin_loop17h176cebad2d7c26adE>
    800107e0:	a009                	j	800107e2 <.LBB8_17+0x4c>
        while self.locked.swap(true, Ordering::Acquire){
    800107e2:	b7e1                	j	800107aa <.LBB8_17+0x14>
            self.cpu_id.set(cpuid() as isize);
    800107e4:	7542                	ld	a0,48(sp)
    800107e6:	0541                	addi	a0,a0,16
    800107e8:	e02a                	sd	a0,0(sp)
    800107ea:	00001097          	auipc	ra,0x1
    800107ee:	5ac080e7          	jalr	1452(ra) # 80011d96 <_ZN6kernel7process3cpu5cpuid17h605093a6a9a60164E>
    800107f2:	e42a                	sd	a0,8(sp)
    800107f4:	a009                	j	800107f6 <.LBB8_17+0x60>
    800107f6:	65a2                	ld	a1,8(sp)
    800107f8:	6502                	ld	a0,0(sp)
    800107fa:	ffff5097          	auipc	ra,0xffff5
    800107fe:	984080e7          	jalr	-1660(ra) # 8000517e <_ZN4core4cell13Cell$LT$T$GT$3set17hb9927bf4fdcefc87E>
    80010802:	a009                	j	80010804 <.LBB8_17+0x6e>
        SpinlockGuard{spinlock: &self}
    80010804:	7542                	ld	a0,48(sp)
    80010806:	fc2a                	sd	a0,56(sp)
    }
    80010808:	60ea                	ld	ra,152(sp)
    8001080a:	610d                	addi	sp,sp,160
    8001080c:	8082                	ret

Disassembly of section .text._ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E:

000000008001080e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>:
    pub fn acquire(&self) -> SpinlockGuard<'_, T> {
    8001080e:	7135                	addi	sp,sp,-160
    80010810:	ed06                	sd	ra,152(sp)
    80010812:	f82a                	sd	a0,48(sp)
        push_off();
    80010814:	00002097          	auipc	ra,0x2
    80010818:	9ee080e7          	jalr	-1554(ra) # 80012202 <_ZN6kernel7process3cpu8push_off17h0acd4baa93104745E>
    8001081c:	a009                	j	8001081e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E+0x10>
        if self.holding() {
    8001081e:	7542                	ld	a0,48(sp)
    80010820:	00001097          	auipc	ra,0x1
    80010824:	91e080e7          	jalr	-1762(ra) # 8001113e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h22290a831051ae28E>
    80010828:	f42a                	sd	a0,40(sp)
    8001082a:	a009                	j	8001082c <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E+0x1e>
    8001082c:	7522                	ld	a0,40(sp)
    8001082e:	4581                	li	a1,0
    80010830:	02b50163          	beq	a0,a1,80010852 <.LBB9_15+0x16>
    80010834:	a009                	j	80010836 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E+0x28>
            panic!("spinlock {} acquire", self.name);
    80010836:	7542                	ld	a0,48(sp)
    80010838:	e12a                	sd	a0,128(sp)
    8001083a:	e92a                	sd	a0,144(sp)

000000008001083c <.LBB9_15>:
    8001083c:	0000e597          	auipc	a1,0xe
    80010840:	d7858593          	addi	a1,a1,-648 # 8001e5b4 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E>
    80010844:	0000e097          	auipc	ra,0xe
    80010848:	db6080e7          	jalr	-586(ra) # 8001e5fa <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>
    8001084c:	ec2a                	sd	a0,24(sp)
    8001084e:	f02e                	sd	a1,32(sp)
    80010850:	a011                	j	80010854 <.LBB9_15+0x18>
        while self.locked.swap(true, Ordering::Acquire){
    80010852:	a825                	j	8001088a <.LBB9_17+0x14>
            panic!("spinlock {} acquire", self.name);
    80010854:	7502                	ld	a0,32(sp)
    80010856:	65e2                	ld	a1,24(sp)
    80010858:	f8ae                	sd	a1,112(sp)
    8001085a:	fcaa                	sd	a0,120(sp)

000000008001085c <.LBB9_16>:
    8001085c:	00018597          	auipc	a1,0x18
    80010860:	02c58593          	addi	a1,a1,44 # 80028888 <.L__unnamed_1>
    80010864:	0088                	addi	a0,sp,64
    80010866:	4609                	li	a2,2
    80010868:	1894                	addi	a3,sp,112
    8001086a:	4705                	li	a4,1
    8001086c:	ffff5097          	auipc	ra,0xffff5
    80010870:	bfe080e7          	jalr	-1026(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80010874:	a009                	j	80010876 <.LBB9_17>

0000000080010876 <.LBB9_17>:
    80010876:	00018597          	auipc	a1,0x18
    8001087a:	04a58593          	addi	a1,a1,74 # 800288c0 <.L__unnamed_2>
    8001087e:	0088                	addi	a0,sp,64
    80010880:	00012097          	auipc	ra,0x12
    80010884:	a62080e7          	jalr	-1438(ra) # 800222e2 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
    80010888:	0000                	unimp
        while self.locked.swap(true, Ordering::Acquire){
    8001088a:	7542                	ld	a0,48(sp)
    8001088c:	0561                	addi	a0,a0,24
    8001088e:	4609                	li	a2,2
    80010890:	08c10723          	sb	a2,142(sp)
    80010894:	4585                	li	a1,1
    80010896:	ffff4097          	auipc	ra,0xffff4
    8001089a:	e12080e7          	jalr	-494(ra) # 800046a8 <_ZN4core4sync6atomic10AtomicBool4swap17h269e9e7e986b9c97E>
    8001089e:	e82a                	sd	a0,16(sp)
    800108a0:	a009                	j	800108a2 <.LBB9_17+0x2c>
    800108a2:	6542                	ld	a0,16(sp)
    800108a4:	e911                	bnez	a0,800108b8 <.LBB9_17+0x42>
    800108a6:	a009                	j	800108a8 <.LBB9_17+0x32>
    800108a8:	4511                	li	a0,4
        fence(Ordering::SeqCst);
    800108aa:	08a107a3          	sb	a0,143(sp)
    800108ae:	ffff4097          	auipc	ra,0xffff4
    800108b2:	f02080e7          	jalr	-254(ra) # 800047b0 <_ZN4core4sync6atomic5fence17hd2f91624c9f09ce8E>
    800108b6:	a039                	j	800108c4 <.LBB9_17+0x4e>
            spin_loop();
    800108b8:	fffff097          	auipc	ra,0xfffff
    800108bc:	dd4080e7          	jalr	-556(ra) # 8000f68c <_ZN4core4hint9spin_loop17h176cebad2d7c26adE>
    800108c0:	a009                	j	800108c2 <.LBB9_17+0x4c>
        while self.locked.swap(true, Ordering::Acquire){
    800108c2:	b7e1                	j	8001088a <.LBB9_17+0x14>
            self.cpu_id.set(cpuid() as isize);
    800108c4:	7542                	ld	a0,48(sp)
    800108c6:	0541                	addi	a0,a0,16
    800108c8:	e02a                	sd	a0,0(sp)
    800108ca:	00001097          	auipc	ra,0x1
    800108ce:	4cc080e7          	jalr	1228(ra) # 80011d96 <_ZN6kernel7process3cpu5cpuid17h605093a6a9a60164E>
    800108d2:	e42a                	sd	a0,8(sp)
    800108d4:	a009                	j	800108d6 <.LBB9_17+0x60>
    800108d6:	65a2                	ld	a1,8(sp)
    800108d8:	6502                	ld	a0,0(sp)
    800108da:	ffff5097          	auipc	ra,0xffff5
    800108de:	8a4080e7          	jalr	-1884(ra) # 8000517e <_ZN4core4cell13Cell$LT$T$GT$3set17hb9927bf4fdcefc87E>
    800108e2:	a009                	j	800108e4 <.LBB9_17+0x6e>
        SpinlockGuard{spinlock: &self}
    800108e4:	7542                	ld	a0,48(sp)
    800108e6:	fc2a                	sd	a0,56(sp)
    }
    800108e8:	60ea                	ld	ra,152(sp)
    800108ea:	610d                	addi	sp,sp,160
    800108ec:	8082                	ret

Disassembly of section .text._ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17he33ed4c8b2ffa030E:

00000000800108ee <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17he33ed4c8b2ffa030E>:
    pub fn acquire(&self) -> SpinlockGuard<'_, T> {
    800108ee:	7135                	addi	sp,sp,-160
    800108f0:	ed06                	sd	ra,152(sp)
    800108f2:	f82a                	sd	a0,48(sp)
        push_off();
    800108f4:	00002097          	auipc	ra,0x2
    800108f8:	90e080e7          	jalr	-1778(ra) # 80012202 <_ZN6kernel7process3cpu8push_off17h0acd4baa93104745E>
    800108fc:	a009                	j	800108fe <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17he33ed4c8b2ffa030E+0x10>
        if self.holding() {
    800108fe:	7542                	ld	a0,48(sp)
    80010900:	00001097          	auipc	ra,0x1
    80010904:	ba2080e7          	jalr	-1118(ra) # 800114a2 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17he647ed27b9879bf9E>
    80010908:	f42a                	sd	a0,40(sp)
    8001090a:	a009                	j	8001090c <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17he33ed4c8b2ffa030E+0x1e>
    8001090c:	7522                	ld	a0,40(sp)
    8001090e:	4581                	li	a1,0
    80010910:	02b50163          	beq	a0,a1,80010932 <.LBB10_15+0x16>
    80010914:	a009                	j	80010916 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17he33ed4c8b2ffa030E+0x28>
            panic!("spinlock {} acquire", self.name);
    80010916:	7542                	ld	a0,48(sp)
    80010918:	e12a                	sd	a0,128(sp)
    8001091a:	e92a                	sd	a0,144(sp)

000000008001091c <.LBB10_15>:
    8001091c:	0000e597          	auipc	a1,0xe
    80010920:	c9858593          	addi	a1,a1,-872 # 8001e5b4 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E>
    80010924:	0000e097          	auipc	ra,0xe
    80010928:	cd6080e7          	jalr	-810(ra) # 8001e5fa <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>
    8001092c:	ec2a                	sd	a0,24(sp)
    8001092e:	f02e                	sd	a1,32(sp)
    80010930:	a011                	j	80010934 <.LBB10_15+0x18>
        while self.locked.swap(true, Ordering::Acquire){
    80010932:	a825                	j	8001096a <.LBB10_17+0x14>
            panic!("spinlock {} acquire", self.name);
    80010934:	7502                	ld	a0,32(sp)
    80010936:	65e2                	ld	a1,24(sp)
    80010938:	f8ae                	sd	a1,112(sp)
    8001093a:	fcaa                	sd	a0,120(sp)

000000008001093c <.LBB10_16>:
    8001093c:	00018597          	auipc	a1,0x18
    80010940:	f4c58593          	addi	a1,a1,-180 # 80028888 <.L__unnamed_1>
    80010944:	0088                	addi	a0,sp,64
    80010946:	4609                	li	a2,2
    80010948:	1894                	addi	a3,sp,112
    8001094a:	4705                	li	a4,1
    8001094c:	ffff5097          	auipc	ra,0xffff5
    80010950:	b1e080e7          	jalr	-1250(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80010954:	a009                	j	80010956 <.LBB10_17>

0000000080010956 <.LBB10_17>:
    80010956:	00018597          	auipc	a1,0x18
    8001095a:	f6a58593          	addi	a1,a1,-150 # 800288c0 <.L__unnamed_2>
    8001095e:	0088                	addi	a0,sp,64
    80010960:	00012097          	auipc	ra,0x12
    80010964:	982080e7          	jalr	-1662(ra) # 800222e2 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
    80010968:	0000                	unimp
        while self.locked.swap(true, Ordering::Acquire){
    8001096a:	7542                	ld	a0,48(sp)
    8001096c:	0561                	addi	a0,a0,24
    8001096e:	4609                	li	a2,2
    80010970:	08c10723          	sb	a2,142(sp)
    80010974:	4585                	li	a1,1
    80010976:	ffff4097          	auipc	ra,0xffff4
    8001097a:	d32080e7          	jalr	-718(ra) # 800046a8 <_ZN4core4sync6atomic10AtomicBool4swap17h269e9e7e986b9c97E>
    8001097e:	e82a                	sd	a0,16(sp)
    80010980:	a009                	j	80010982 <.LBB10_17+0x2c>
    80010982:	6542                	ld	a0,16(sp)
    80010984:	e911                	bnez	a0,80010998 <.LBB10_17+0x42>
    80010986:	a009                	j	80010988 <.LBB10_17+0x32>
    80010988:	4511                	li	a0,4
        fence(Ordering::SeqCst);
    8001098a:	08a107a3          	sb	a0,143(sp)
    8001098e:	ffff4097          	auipc	ra,0xffff4
    80010992:	e22080e7          	jalr	-478(ra) # 800047b0 <_ZN4core4sync6atomic5fence17hd2f91624c9f09ce8E>
    80010996:	a039                	j	800109a4 <.LBB10_17+0x4e>
            spin_loop();
    80010998:	fffff097          	auipc	ra,0xfffff
    8001099c:	cf4080e7          	jalr	-780(ra) # 8000f68c <_ZN4core4hint9spin_loop17h176cebad2d7c26adE>
    800109a0:	a009                	j	800109a2 <.LBB10_17+0x4c>
        while self.locked.swap(true, Ordering::Acquire){
    800109a2:	b7e1                	j	8001096a <.LBB10_17+0x14>
            self.cpu_id.set(cpuid() as isize);
    800109a4:	7542                	ld	a0,48(sp)
    800109a6:	0541                	addi	a0,a0,16
    800109a8:	e02a                	sd	a0,0(sp)
    800109aa:	00001097          	auipc	ra,0x1
    800109ae:	3ec080e7          	jalr	1004(ra) # 80011d96 <_ZN6kernel7process3cpu5cpuid17h605093a6a9a60164E>
    800109b2:	e42a                	sd	a0,8(sp)
    800109b4:	a009                	j	800109b6 <.LBB10_17+0x60>
    800109b6:	65a2                	ld	a1,8(sp)
    800109b8:	6502                	ld	a0,0(sp)
    800109ba:	ffff4097          	auipc	ra,0xffff4
    800109be:	7c4080e7          	jalr	1988(ra) # 8000517e <_ZN4core4cell13Cell$LT$T$GT$3set17hb9927bf4fdcefc87E>
    800109c2:	a009                	j	800109c4 <.LBB10_17+0x6e>
        SpinlockGuard{spinlock: &self}
    800109c4:	7542                	ld	a0,48(sp)
    800109c6:	fc2a                	sd	a0,56(sp)
    }
    800109c8:	60ea                	ld	ra,152(sp)
    800109ca:	610d                	addi	sp,sp,160
    800109cc:	8082                	ret

Disassembly of section .text._ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17h4488adb03f65166cE:

00000000800109ce <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17h4488adb03f65166cE>:
    pub fn release(&self) {
    800109ce:	7175                	addi	sp,sp,-144
    800109d0:	e506                	sd	ra,136(sp)
    800109d2:	ec2a                	sd	a0,24(sp)
    800109d4:	fcaa                	sd	a0,120(sp)
        if !self.holding() {
    800109d6:	00000097          	auipc	ra,0x0
    800109da:	7e4080e7          	jalr	2020(ra) # 800111ba <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h56772fc96a718090E>
    800109de:	f02a                	sd	a0,32(sp)
    800109e0:	a009                	j	800109e2 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17h4488adb03f65166cE+0x14>
    800109e2:	7502                	ld	a0,32(sp)
    800109e4:	e105                	bnez	a0,80010a04 <.LBB11_10+0x16>
    800109e6:	a009                	j	800109e8 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17h4488adb03f65166cE+0x1a>
            panic!("spinlock {} release", self.name);
    800109e8:	6562                	ld	a0,24(sp)
    800109ea:	f4aa                	sd	a0,104(sp)
    800109ec:	e12a                	sd	a0,128(sp)

00000000800109ee <.LBB11_10>:
    800109ee:	0000e597          	auipc	a1,0xe
    800109f2:	bc658593          	addi	a1,a1,-1082 # 8001e5b4 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E>
    800109f6:	0000e097          	auipc	ra,0xe
    800109fa:	c04080e7          	jalr	-1020(ra) # 8001e5fa <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>
    800109fe:	e42a                	sd	a0,8(sp)
    80010a00:	e82e                	sd	a1,16(sp)
    80010a02:	a809                	j	80010a14 <.LBB11_10+0x26>
        self.cpu_id.set(-1);
    80010a04:	6562                	ld	a0,24(sp)
    80010a06:	0541                	addi	a0,a0,16
    80010a08:	55fd                	li	a1,-1
    80010a0a:	ffff4097          	auipc	ra,0xffff4
    80010a0e:	774080e7          	jalr	1908(ra) # 8000517e <_ZN4core4cell13Cell$LT$T$GT$3set17hb9927bf4fdcefc87E>
    80010a12:	a825                	j	80010a4a <.LBB11_12+0x14>
            panic!("spinlock {} release", self.name);
    80010a14:	6542                	ld	a0,16(sp)
    80010a16:	65a2                	ld	a1,8(sp)
    80010a18:	ecae                	sd	a1,88(sp)
    80010a1a:	f0aa                	sd	a0,96(sp)

0000000080010a1c <.LBB11_11>:
    80010a1c:	00018597          	auipc	a1,0x18
    80010a20:	ebc58593          	addi	a1,a1,-324 # 800288d8 <.L__unnamed_3>
    80010a24:	1028                	addi	a0,sp,40
    80010a26:	4609                	li	a2,2
    80010a28:	08b4                	addi	a3,sp,88
    80010a2a:	4705                	li	a4,1
    80010a2c:	ffff5097          	auipc	ra,0xffff5
    80010a30:	a3e080e7          	jalr	-1474(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80010a34:	a009                	j	80010a36 <.LBB11_12>

0000000080010a36 <.LBB11_12>:
    80010a36:	00018597          	auipc	a1,0x18
    80010a3a:	ec258593          	addi	a1,a1,-318 # 800288f8 <.L__unnamed_4>
    80010a3e:	1028                	addi	a0,sp,40
    80010a40:	00012097          	auipc	ra,0x12
    80010a44:	8a2080e7          	jalr	-1886(ra) # 800222e2 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
    80010a48:	0000                	unimp
    80010a4a:	4511                	li	a0,4
        fence(Ordering::SeqCst);
    80010a4c:	06a10b23          	sb	a0,118(sp)
    80010a50:	ffff4097          	auipc	ra,0xffff4
    80010a54:	d60080e7          	jalr	-672(ra) # 800047b0 <_ZN4core4sync6atomic5fence17hd2f91624c9f09ce8E>
    80010a58:	a009                	j	80010a5a <.LBB11_12+0x24>
        self.locked.store(false, Ordering::Release);
    80010a5a:	6562                	ld	a0,24(sp)
    80010a5c:	0561                	addi	a0,a0,24
    80010a5e:	4605                	li	a2,1
    80010a60:	06c10ba3          	sb	a2,119(sp)
    80010a64:	4581                	li	a1,0
    80010a66:	ffff4097          	auipc	ra,0xffff4
    80010a6a:	c86080e7          	jalr	-890(ra) # 800046ec <_ZN4core4sync6atomic10AtomicBool5store17h325e21ca90edd7e7E>
    80010a6e:	a009                	j	80010a70 <.LBB11_12+0x3a>
        pop_off();
    80010a70:	00002097          	auipc	ra,0x2
    80010a74:	816080e7          	jalr	-2026(ra) # 80012286 <_ZN6kernel7process3cpu7pop_off17hb8c7b834ab1c7c4cE>
    80010a78:	a009                	j	80010a7a <.LBB11_12+0x44>
    }
    80010a7a:	60aa                	ld	ra,136(sp)
    80010a7c:	6149                	addi	sp,sp,144
    80010a7e:	8082                	ret

Disassembly of section .text._ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17h676e67ecb47260bdE:

0000000080010a80 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17h676e67ecb47260bdE>:
    pub fn release(&self) {
    80010a80:	7175                	addi	sp,sp,-144
    80010a82:	e506                	sd	ra,136(sp)
    80010a84:	ec2a                	sd	a0,24(sp)
    80010a86:	fcaa                	sd	a0,120(sp)
        if !self.holding() {
    80010a88:	00001097          	auipc	ra,0x1
    80010a8c:	82a080e7          	jalr	-2006(ra) # 800112b2 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h71dfe9d2eb747f59E>
    80010a90:	f02a                	sd	a0,32(sp)
    80010a92:	a009                	j	80010a94 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17h676e67ecb47260bdE+0x14>
    80010a94:	7502                	ld	a0,32(sp)
    80010a96:	e105                	bnez	a0,80010ab6 <.LBB12_10+0x16>
    80010a98:	a009                	j	80010a9a <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17h676e67ecb47260bdE+0x1a>
            panic!("spinlock {} release", self.name);
    80010a9a:	6562                	ld	a0,24(sp)
    80010a9c:	f4aa                	sd	a0,104(sp)
    80010a9e:	e12a                	sd	a0,128(sp)

0000000080010aa0 <.LBB12_10>:
    80010aa0:	0000e597          	auipc	a1,0xe
    80010aa4:	b1458593          	addi	a1,a1,-1260 # 8001e5b4 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E>
    80010aa8:	0000e097          	auipc	ra,0xe
    80010aac:	b52080e7          	jalr	-1198(ra) # 8001e5fa <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>
    80010ab0:	e42a                	sd	a0,8(sp)
    80010ab2:	e82e                	sd	a1,16(sp)
    80010ab4:	a809                	j	80010ac6 <.LBB12_10+0x26>
        self.cpu_id.set(-1);
    80010ab6:	6562                	ld	a0,24(sp)
    80010ab8:	0541                	addi	a0,a0,16
    80010aba:	55fd                	li	a1,-1
    80010abc:	ffff4097          	auipc	ra,0xffff4
    80010ac0:	6c2080e7          	jalr	1730(ra) # 8000517e <_ZN4core4cell13Cell$LT$T$GT$3set17hb9927bf4fdcefc87E>
    80010ac4:	a825                	j	80010afc <.LBB12_12+0x14>
            panic!("spinlock {} release", self.name);
    80010ac6:	6542                	ld	a0,16(sp)
    80010ac8:	65a2                	ld	a1,8(sp)
    80010aca:	ecae                	sd	a1,88(sp)
    80010acc:	f0aa                	sd	a0,96(sp)

0000000080010ace <.LBB12_11>:
    80010ace:	00018597          	auipc	a1,0x18
    80010ad2:	e0a58593          	addi	a1,a1,-502 # 800288d8 <.L__unnamed_3>
    80010ad6:	1028                	addi	a0,sp,40
    80010ad8:	4609                	li	a2,2
    80010ada:	08b4                	addi	a3,sp,88
    80010adc:	4705                	li	a4,1
    80010ade:	ffff5097          	auipc	ra,0xffff5
    80010ae2:	98c080e7          	jalr	-1652(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80010ae6:	a009                	j	80010ae8 <.LBB12_12>

0000000080010ae8 <.LBB12_12>:
    80010ae8:	00018597          	auipc	a1,0x18
    80010aec:	e1058593          	addi	a1,a1,-496 # 800288f8 <.L__unnamed_4>
    80010af0:	1028                	addi	a0,sp,40
    80010af2:	00011097          	auipc	ra,0x11
    80010af6:	7f0080e7          	jalr	2032(ra) # 800222e2 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
    80010afa:	0000                	unimp
    80010afc:	4511                	li	a0,4
        fence(Ordering::SeqCst);
    80010afe:	06a10b23          	sb	a0,118(sp)
    80010b02:	ffff4097          	auipc	ra,0xffff4
    80010b06:	cae080e7          	jalr	-850(ra) # 800047b0 <_ZN4core4sync6atomic5fence17hd2f91624c9f09ce8E>
    80010b0a:	a009                	j	80010b0c <.LBB12_12+0x24>
        self.locked.store(false, Ordering::Release);
    80010b0c:	6562                	ld	a0,24(sp)
    80010b0e:	0561                	addi	a0,a0,24
    80010b10:	4605                	li	a2,1
    80010b12:	06c10ba3          	sb	a2,119(sp)
    80010b16:	4581                	li	a1,0
    80010b18:	ffff4097          	auipc	ra,0xffff4
    80010b1c:	bd4080e7          	jalr	-1068(ra) # 800046ec <_ZN4core4sync6atomic10AtomicBool5store17h325e21ca90edd7e7E>
    80010b20:	a009                	j	80010b22 <.LBB12_12+0x3a>
        pop_off();
    80010b22:	00001097          	auipc	ra,0x1
    80010b26:	764080e7          	jalr	1892(ra) # 80012286 <_ZN6kernel7process3cpu7pop_off17hb8c7b834ab1c7c4cE>
    80010b2a:	a009                	j	80010b2c <.LBB12_12+0x44>
    }
    80010b2c:	60aa                	ld	ra,136(sp)
    80010b2e:	6149                	addi	sp,sp,144
    80010b30:	8082                	ret

Disassembly of section .text._ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17h7f531b2c66469855E:

0000000080010b32 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17h7f531b2c66469855E>:
    pub fn release(&self) {
    80010b32:	7175                	addi	sp,sp,-144
    80010b34:	e506                	sd	ra,136(sp)
    80010b36:	ec2a                	sd	a0,24(sp)
    80010b38:	fcaa                	sd	a0,120(sp)
        if !self.holding() {
    80010b3a:	00001097          	auipc	ra,0x1
    80010b3e:	870080e7          	jalr	-1936(ra) # 800113aa <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17haa146bec45c9d0c2E>
    80010b42:	f02a                	sd	a0,32(sp)
    80010b44:	a009                	j	80010b46 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17h7f531b2c66469855E+0x14>
    80010b46:	7502                	ld	a0,32(sp)
    80010b48:	e105                	bnez	a0,80010b68 <.LBB13_10+0x16>
    80010b4a:	a009                	j	80010b4c <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17h7f531b2c66469855E+0x1a>
            panic!("spinlock {} release", self.name);
    80010b4c:	6562                	ld	a0,24(sp)
    80010b4e:	f4aa                	sd	a0,104(sp)
    80010b50:	e12a                	sd	a0,128(sp)

0000000080010b52 <.LBB13_10>:
    80010b52:	0000e597          	auipc	a1,0xe
    80010b56:	a6258593          	addi	a1,a1,-1438 # 8001e5b4 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E>
    80010b5a:	0000e097          	auipc	ra,0xe
    80010b5e:	aa0080e7          	jalr	-1376(ra) # 8001e5fa <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>
    80010b62:	e42a                	sd	a0,8(sp)
    80010b64:	e82e                	sd	a1,16(sp)
    80010b66:	a809                	j	80010b78 <.LBB13_10+0x26>
        self.cpu_id.set(-1);
    80010b68:	6562                	ld	a0,24(sp)
    80010b6a:	0541                	addi	a0,a0,16
    80010b6c:	55fd                	li	a1,-1
    80010b6e:	ffff4097          	auipc	ra,0xffff4
    80010b72:	610080e7          	jalr	1552(ra) # 8000517e <_ZN4core4cell13Cell$LT$T$GT$3set17hb9927bf4fdcefc87E>
    80010b76:	a825                	j	80010bae <.LBB13_12+0x14>
            panic!("spinlock {} release", self.name);
    80010b78:	6542                	ld	a0,16(sp)
    80010b7a:	65a2                	ld	a1,8(sp)
    80010b7c:	ecae                	sd	a1,88(sp)
    80010b7e:	f0aa                	sd	a0,96(sp)

0000000080010b80 <.LBB13_11>:
    80010b80:	00018597          	auipc	a1,0x18
    80010b84:	d5858593          	addi	a1,a1,-680 # 800288d8 <.L__unnamed_3>
    80010b88:	1028                	addi	a0,sp,40
    80010b8a:	4609                	li	a2,2
    80010b8c:	08b4                	addi	a3,sp,88
    80010b8e:	4705                	li	a4,1
    80010b90:	ffff5097          	auipc	ra,0xffff5
    80010b94:	8da080e7          	jalr	-1830(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80010b98:	a009                	j	80010b9a <.LBB13_12>

0000000080010b9a <.LBB13_12>:
    80010b9a:	00018597          	auipc	a1,0x18
    80010b9e:	d5e58593          	addi	a1,a1,-674 # 800288f8 <.L__unnamed_4>
    80010ba2:	1028                	addi	a0,sp,40
    80010ba4:	00011097          	auipc	ra,0x11
    80010ba8:	73e080e7          	jalr	1854(ra) # 800222e2 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
    80010bac:	0000                	unimp
    80010bae:	4511                	li	a0,4
        fence(Ordering::SeqCst);
    80010bb0:	06a10b23          	sb	a0,118(sp)
    80010bb4:	ffff4097          	auipc	ra,0xffff4
    80010bb8:	bfc080e7          	jalr	-1028(ra) # 800047b0 <_ZN4core4sync6atomic5fence17hd2f91624c9f09ce8E>
    80010bbc:	a009                	j	80010bbe <.LBB13_12+0x24>
        self.locked.store(false, Ordering::Release);
    80010bbe:	6562                	ld	a0,24(sp)
    80010bc0:	0561                	addi	a0,a0,24
    80010bc2:	4605                	li	a2,1
    80010bc4:	06c10ba3          	sb	a2,119(sp)
    80010bc8:	4581                	li	a1,0
    80010bca:	ffff4097          	auipc	ra,0xffff4
    80010bce:	b22080e7          	jalr	-1246(ra) # 800046ec <_ZN4core4sync6atomic10AtomicBool5store17h325e21ca90edd7e7E>
    80010bd2:	a009                	j	80010bd4 <.LBB13_12+0x3a>
        pop_off();
    80010bd4:	00001097          	auipc	ra,0x1
    80010bd8:	6b2080e7          	jalr	1714(ra) # 80012286 <_ZN6kernel7process3cpu7pop_off17hb8c7b834ab1c7c4cE>
    80010bdc:	a009                	j	80010bde <.LBB13_12+0x44>
    }
    80010bde:	60aa                	ld	ra,136(sp)
    80010be0:	6149                	addi	sp,sp,144
    80010be2:	8082                	ret

Disassembly of section .text._ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17h8041517806e423d6E:

0000000080010be4 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17h8041517806e423d6E>:
    pub fn release(&self) {
    80010be4:	7175                	addi	sp,sp,-144
    80010be6:	e506                	sd	ra,136(sp)
    80010be8:	ec2a                	sd	a0,24(sp)
    80010bea:	fcaa                	sd	a0,120(sp)
        if !self.holding() {
    80010bec:	00000097          	auipc	ra,0x0
    80010bf0:	64a080e7          	jalr	1610(ra) # 80011236 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h685eaac29cc8096eE>
    80010bf4:	f02a                	sd	a0,32(sp)
    80010bf6:	a009                	j	80010bf8 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17h8041517806e423d6E+0x14>
    80010bf8:	7502                	ld	a0,32(sp)
    80010bfa:	e105                	bnez	a0,80010c1a <.LBB14_10+0x16>
    80010bfc:	a009                	j	80010bfe <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17h8041517806e423d6E+0x1a>
            panic!("spinlock {} release", self.name);
    80010bfe:	6562                	ld	a0,24(sp)
    80010c00:	f4aa                	sd	a0,104(sp)
    80010c02:	e12a                	sd	a0,128(sp)

0000000080010c04 <.LBB14_10>:
    80010c04:	0000e597          	auipc	a1,0xe
    80010c08:	9b058593          	addi	a1,a1,-1616 # 8001e5b4 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E>
    80010c0c:	0000e097          	auipc	ra,0xe
    80010c10:	9ee080e7          	jalr	-1554(ra) # 8001e5fa <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>
    80010c14:	e42a                	sd	a0,8(sp)
    80010c16:	e82e                	sd	a1,16(sp)
    80010c18:	a809                	j	80010c2a <.LBB14_10+0x26>
        self.cpu_id.set(-1);
    80010c1a:	6562                	ld	a0,24(sp)
    80010c1c:	0541                	addi	a0,a0,16
    80010c1e:	55fd                	li	a1,-1
    80010c20:	ffff4097          	auipc	ra,0xffff4
    80010c24:	55e080e7          	jalr	1374(ra) # 8000517e <_ZN4core4cell13Cell$LT$T$GT$3set17hb9927bf4fdcefc87E>
    80010c28:	a825                	j	80010c60 <.LBB14_12+0x14>
            panic!("spinlock {} release", self.name);
    80010c2a:	6542                	ld	a0,16(sp)
    80010c2c:	65a2                	ld	a1,8(sp)
    80010c2e:	ecae                	sd	a1,88(sp)
    80010c30:	f0aa                	sd	a0,96(sp)

0000000080010c32 <.LBB14_11>:
    80010c32:	00018597          	auipc	a1,0x18
    80010c36:	ca658593          	addi	a1,a1,-858 # 800288d8 <.L__unnamed_3>
    80010c3a:	1028                	addi	a0,sp,40
    80010c3c:	4609                	li	a2,2
    80010c3e:	08b4                	addi	a3,sp,88
    80010c40:	4705                	li	a4,1
    80010c42:	ffff5097          	auipc	ra,0xffff5
    80010c46:	828080e7          	jalr	-2008(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80010c4a:	a009                	j	80010c4c <.LBB14_12>

0000000080010c4c <.LBB14_12>:
    80010c4c:	00018597          	auipc	a1,0x18
    80010c50:	cac58593          	addi	a1,a1,-852 # 800288f8 <.L__unnamed_4>
    80010c54:	1028                	addi	a0,sp,40
    80010c56:	00011097          	auipc	ra,0x11
    80010c5a:	68c080e7          	jalr	1676(ra) # 800222e2 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
    80010c5e:	0000                	unimp
    80010c60:	4511                	li	a0,4
        fence(Ordering::SeqCst);
    80010c62:	06a10b23          	sb	a0,118(sp)
    80010c66:	ffff4097          	auipc	ra,0xffff4
    80010c6a:	b4a080e7          	jalr	-1206(ra) # 800047b0 <_ZN4core4sync6atomic5fence17hd2f91624c9f09ce8E>
    80010c6e:	a009                	j	80010c70 <.LBB14_12+0x24>
        self.locked.store(false, Ordering::Release);
    80010c70:	6562                	ld	a0,24(sp)
    80010c72:	0561                	addi	a0,a0,24
    80010c74:	4605                	li	a2,1
    80010c76:	06c10ba3          	sb	a2,119(sp)
    80010c7a:	4581                	li	a1,0
    80010c7c:	ffff4097          	auipc	ra,0xffff4
    80010c80:	a70080e7          	jalr	-1424(ra) # 800046ec <_ZN4core4sync6atomic10AtomicBool5store17h325e21ca90edd7e7E>
    80010c84:	a009                	j	80010c86 <.LBB14_12+0x3a>
        pop_off();
    80010c86:	00001097          	auipc	ra,0x1
    80010c8a:	600080e7          	jalr	1536(ra) # 80012286 <_ZN6kernel7process3cpu7pop_off17hb8c7b834ab1c7c4cE>
    80010c8e:	a009                	j	80010c90 <.LBB14_12+0x44>
    }
    80010c90:	60aa                	ld	ra,136(sp)
    80010c92:	6149                	addi	sp,sp,144
    80010c94:	8082                	ret

Disassembly of section .text._ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17h84d22e527c35405fE:

0000000080010c96 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17h84d22e527c35405fE>:
    pub fn release(&self) {
    80010c96:	7175                	addi	sp,sp,-144
    80010c98:	e506                	sd	ra,136(sp)
    80010c9a:	ec2a                	sd	a0,24(sp)
    80010c9c:	fcaa                	sd	a0,120(sp)
        if !self.holding() {
    80010c9e:	00001097          	auipc	ra,0x1
    80010ca2:	880080e7          	jalr	-1920(ra) # 8001151e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hfffb7f56d7315d17E>
    80010ca6:	f02a                	sd	a0,32(sp)
    80010ca8:	a009                	j	80010caa <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17h84d22e527c35405fE+0x14>
    80010caa:	7502                	ld	a0,32(sp)
    80010cac:	e105                	bnez	a0,80010ccc <.LBB15_10+0x16>
    80010cae:	a009                	j	80010cb0 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17h84d22e527c35405fE+0x1a>
            panic!("spinlock {} release", self.name);
    80010cb0:	6562                	ld	a0,24(sp)
    80010cb2:	f4aa                	sd	a0,104(sp)
    80010cb4:	e12a                	sd	a0,128(sp)

0000000080010cb6 <.LBB15_10>:
    80010cb6:	0000e597          	auipc	a1,0xe
    80010cba:	8fe58593          	addi	a1,a1,-1794 # 8001e5b4 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E>
    80010cbe:	0000e097          	auipc	ra,0xe
    80010cc2:	93c080e7          	jalr	-1732(ra) # 8001e5fa <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>
    80010cc6:	e42a                	sd	a0,8(sp)
    80010cc8:	e82e                	sd	a1,16(sp)
    80010cca:	a809                	j	80010cdc <.LBB15_10+0x26>
        self.cpu_id.set(-1);
    80010ccc:	6562                	ld	a0,24(sp)
    80010cce:	0541                	addi	a0,a0,16
    80010cd0:	55fd                	li	a1,-1
    80010cd2:	ffff4097          	auipc	ra,0xffff4
    80010cd6:	4ac080e7          	jalr	1196(ra) # 8000517e <_ZN4core4cell13Cell$LT$T$GT$3set17hb9927bf4fdcefc87E>
    80010cda:	a825                	j	80010d12 <.LBB15_12+0x14>
            panic!("spinlock {} release", self.name);
    80010cdc:	6542                	ld	a0,16(sp)
    80010cde:	65a2                	ld	a1,8(sp)
    80010ce0:	ecae                	sd	a1,88(sp)
    80010ce2:	f0aa                	sd	a0,96(sp)

0000000080010ce4 <.LBB15_11>:
    80010ce4:	00018597          	auipc	a1,0x18
    80010ce8:	bf458593          	addi	a1,a1,-1036 # 800288d8 <.L__unnamed_3>
    80010cec:	1028                	addi	a0,sp,40
    80010cee:	4609                	li	a2,2
    80010cf0:	08b4                	addi	a3,sp,88
    80010cf2:	4705                	li	a4,1
    80010cf4:	ffff4097          	auipc	ra,0xffff4
    80010cf8:	776080e7          	jalr	1910(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80010cfc:	a009                	j	80010cfe <.LBB15_12>

0000000080010cfe <.LBB15_12>:
    80010cfe:	00018597          	auipc	a1,0x18
    80010d02:	bfa58593          	addi	a1,a1,-1030 # 800288f8 <.L__unnamed_4>
    80010d06:	1028                	addi	a0,sp,40
    80010d08:	00011097          	auipc	ra,0x11
    80010d0c:	5da080e7          	jalr	1498(ra) # 800222e2 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
    80010d10:	0000                	unimp
    80010d12:	4511                	li	a0,4
        fence(Ordering::SeqCst);
    80010d14:	06a10b23          	sb	a0,118(sp)
    80010d18:	ffff4097          	auipc	ra,0xffff4
    80010d1c:	a98080e7          	jalr	-1384(ra) # 800047b0 <_ZN4core4sync6atomic5fence17hd2f91624c9f09ce8E>
    80010d20:	a009                	j	80010d22 <.LBB15_12+0x24>
        self.locked.store(false, Ordering::Release);
    80010d22:	6562                	ld	a0,24(sp)
    80010d24:	0561                	addi	a0,a0,24
    80010d26:	4605                	li	a2,1
    80010d28:	06c10ba3          	sb	a2,119(sp)
    80010d2c:	4581                	li	a1,0
    80010d2e:	ffff4097          	auipc	ra,0xffff4
    80010d32:	9be080e7          	jalr	-1602(ra) # 800046ec <_ZN4core4sync6atomic10AtomicBool5store17h325e21ca90edd7e7E>
    80010d36:	a009                	j	80010d38 <.LBB15_12+0x3a>
        pop_off();
    80010d38:	00001097          	auipc	ra,0x1
    80010d3c:	54e080e7          	jalr	1358(ra) # 80012286 <_ZN6kernel7process3cpu7pop_off17hb8c7b834ab1c7c4cE>
    80010d40:	a009                	j	80010d42 <.LBB15_12+0x44>
    }
    80010d42:	60aa                	ld	ra,136(sp)
    80010d44:	6149                	addi	sp,sp,144
    80010d46:	8082                	ret

Disassembly of section .text._ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17hb6d563787d966a77E:

0000000080010d48 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17hb6d563787d966a77E>:
    pub fn release(&self) {
    80010d48:	7175                	addi	sp,sp,-144
    80010d4a:	e506                	sd	ra,136(sp)
    80010d4c:	ec2a                	sd	a0,24(sp)
    80010d4e:	fcaa                	sd	a0,120(sp)
        if !self.holding() {
    80010d50:	00000097          	auipc	ra,0x0
    80010d54:	752080e7          	jalr	1874(ra) # 800114a2 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17he647ed27b9879bf9E>
    80010d58:	f02a                	sd	a0,32(sp)
    80010d5a:	a009                	j	80010d5c <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17hb6d563787d966a77E+0x14>
    80010d5c:	7502                	ld	a0,32(sp)
    80010d5e:	e105                	bnez	a0,80010d7e <.LBB16_10+0x16>
    80010d60:	a009                	j	80010d62 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17hb6d563787d966a77E+0x1a>
            panic!("spinlock {} release", self.name);
    80010d62:	6562                	ld	a0,24(sp)
    80010d64:	f4aa                	sd	a0,104(sp)
    80010d66:	e12a                	sd	a0,128(sp)

0000000080010d68 <.LBB16_10>:
    80010d68:	0000e597          	auipc	a1,0xe
    80010d6c:	84c58593          	addi	a1,a1,-1972 # 8001e5b4 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E>
    80010d70:	0000e097          	auipc	ra,0xe
    80010d74:	88a080e7          	jalr	-1910(ra) # 8001e5fa <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>
    80010d78:	e42a                	sd	a0,8(sp)
    80010d7a:	e82e                	sd	a1,16(sp)
    80010d7c:	a809                	j	80010d8e <.LBB16_10+0x26>
        self.cpu_id.set(-1);
    80010d7e:	6562                	ld	a0,24(sp)
    80010d80:	0541                	addi	a0,a0,16
    80010d82:	55fd                	li	a1,-1
    80010d84:	ffff4097          	auipc	ra,0xffff4
    80010d88:	3fa080e7          	jalr	1018(ra) # 8000517e <_ZN4core4cell13Cell$LT$T$GT$3set17hb9927bf4fdcefc87E>
    80010d8c:	a825                	j	80010dc4 <.LBB16_12+0x14>
            panic!("spinlock {} release", self.name);
    80010d8e:	6542                	ld	a0,16(sp)
    80010d90:	65a2                	ld	a1,8(sp)
    80010d92:	ecae                	sd	a1,88(sp)
    80010d94:	f0aa                	sd	a0,96(sp)

0000000080010d96 <.LBB16_11>:
    80010d96:	00018597          	auipc	a1,0x18
    80010d9a:	b4258593          	addi	a1,a1,-1214 # 800288d8 <.L__unnamed_3>
    80010d9e:	1028                	addi	a0,sp,40
    80010da0:	4609                	li	a2,2
    80010da2:	08b4                	addi	a3,sp,88
    80010da4:	4705                	li	a4,1
    80010da6:	ffff4097          	auipc	ra,0xffff4
    80010daa:	6c4080e7          	jalr	1732(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80010dae:	a009                	j	80010db0 <.LBB16_12>

0000000080010db0 <.LBB16_12>:
    80010db0:	00018597          	auipc	a1,0x18
    80010db4:	b4858593          	addi	a1,a1,-1208 # 800288f8 <.L__unnamed_4>
    80010db8:	1028                	addi	a0,sp,40
    80010dba:	00011097          	auipc	ra,0x11
    80010dbe:	528080e7          	jalr	1320(ra) # 800222e2 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
    80010dc2:	0000                	unimp
    80010dc4:	4511                	li	a0,4
        fence(Ordering::SeqCst);
    80010dc6:	06a10b23          	sb	a0,118(sp)
    80010dca:	ffff4097          	auipc	ra,0xffff4
    80010dce:	9e6080e7          	jalr	-1562(ra) # 800047b0 <_ZN4core4sync6atomic5fence17hd2f91624c9f09ce8E>
    80010dd2:	a009                	j	80010dd4 <.LBB16_12+0x24>
        self.locked.store(false, Ordering::Release);
    80010dd4:	6562                	ld	a0,24(sp)
    80010dd6:	0561                	addi	a0,a0,24
    80010dd8:	4605                	li	a2,1
    80010dda:	06c10ba3          	sb	a2,119(sp)
    80010dde:	4581                	li	a1,0
    80010de0:	ffff4097          	auipc	ra,0xffff4
    80010de4:	90c080e7          	jalr	-1780(ra) # 800046ec <_ZN4core4sync6atomic10AtomicBool5store17h325e21ca90edd7e7E>
    80010de8:	a009                	j	80010dea <.LBB16_12+0x3a>
        pop_off();
    80010dea:	00001097          	auipc	ra,0x1
    80010dee:	49c080e7          	jalr	1180(ra) # 80012286 <_ZN6kernel7process3cpu7pop_off17hb8c7b834ab1c7c4cE>
    80010df2:	a009                	j	80010df4 <.LBB16_12+0x44>
    }
    80010df4:	60aa                	ld	ra,136(sp)
    80010df6:	6149                	addi	sp,sp,144
    80010df8:	8082                	ret

Disassembly of section .text._ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17hd5c81d47b1881bbfE:

0000000080010dfa <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17hd5c81d47b1881bbfE>:
    pub fn release(&self) {
    80010dfa:	7175                	addi	sp,sp,-144
    80010dfc:	e506                	sd	ra,136(sp)
    80010dfe:	ec2a                	sd	a0,24(sp)
    80010e00:	fcaa                	sd	a0,120(sp)
        if !self.holding() {
    80010e02:	00000097          	auipc	ra,0x0
    80010e06:	52c080e7          	jalr	1324(ra) # 8001132e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h92b63d3de4da3516E>
    80010e0a:	f02a                	sd	a0,32(sp)
    80010e0c:	a009                	j	80010e0e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17hd5c81d47b1881bbfE+0x14>
    80010e0e:	7502                	ld	a0,32(sp)
    80010e10:	e105                	bnez	a0,80010e30 <.LBB17_10+0x16>
    80010e12:	a009                	j	80010e14 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17hd5c81d47b1881bbfE+0x1a>
            panic!("spinlock {} release", self.name);
    80010e14:	6562                	ld	a0,24(sp)
    80010e16:	f4aa                	sd	a0,104(sp)
    80010e18:	e12a                	sd	a0,128(sp)

0000000080010e1a <.LBB17_10>:
    80010e1a:	0000d597          	auipc	a1,0xd
    80010e1e:	79a58593          	addi	a1,a1,1946 # 8001e5b4 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E>
    80010e22:	0000d097          	auipc	ra,0xd
    80010e26:	7d8080e7          	jalr	2008(ra) # 8001e5fa <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>
    80010e2a:	e42a                	sd	a0,8(sp)
    80010e2c:	e82e                	sd	a1,16(sp)
    80010e2e:	a809                	j	80010e40 <.LBB17_10+0x26>
        self.cpu_id.set(-1);
    80010e30:	6562                	ld	a0,24(sp)
    80010e32:	0541                	addi	a0,a0,16
    80010e34:	55fd                	li	a1,-1
    80010e36:	ffff4097          	auipc	ra,0xffff4
    80010e3a:	348080e7          	jalr	840(ra) # 8000517e <_ZN4core4cell13Cell$LT$T$GT$3set17hb9927bf4fdcefc87E>
    80010e3e:	a825                	j	80010e76 <.LBB17_12+0x14>
            panic!("spinlock {} release", self.name);
    80010e40:	6542                	ld	a0,16(sp)
    80010e42:	65a2                	ld	a1,8(sp)
    80010e44:	ecae                	sd	a1,88(sp)
    80010e46:	f0aa                	sd	a0,96(sp)

0000000080010e48 <.LBB17_11>:
    80010e48:	00018597          	auipc	a1,0x18
    80010e4c:	a9058593          	addi	a1,a1,-1392 # 800288d8 <.L__unnamed_3>
    80010e50:	1028                	addi	a0,sp,40
    80010e52:	4609                	li	a2,2
    80010e54:	08b4                	addi	a3,sp,88
    80010e56:	4705                	li	a4,1
    80010e58:	ffff4097          	auipc	ra,0xffff4
    80010e5c:	612080e7          	jalr	1554(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80010e60:	a009                	j	80010e62 <.LBB17_12>

0000000080010e62 <.LBB17_12>:
    80010e62:	00018597          	auipc	a1,0x18
    80010e66:	a9658593          	addi	a1,a1,-1386 # 800288f8 <.L__unnamed_4>
    80010e6a:	1028                	addi	a0,sp,40
    80010e6c:	00011097          	auipc	ra,0x11
    80010e70:	476080e7          	jalr	1142(ra) # 800222e2 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
    80010e74:	0000                	unimp
    80010e76:	4511                	li	a0,4
        fence(Ordering::SeqCst);
    80010e78:	06a10b23          	sb	a0,118(sp)
    80010e7c:	ffff4097          	auipc	ra,0xffff4
    80010e80:	934080e7          	jalr	-1740(ra) # 800047b0 <_ZN4core4sync6atomic5fence17hd2f91624c9f09ce8E>
    80010e84:	a009                	j	80010e86 <.LBB17_12+0x24>
        self.locked.store(false, Ordering::Release);
    80010e86:	6562                	ld	a0,24(sp)
    80010e88:	0561                	addi	a0,a0,24
    80010e8a:	4605                	li	a2,1
    80010e8c:	06c10ba3          	sb	a2,119(sp)
    80010e90:	4581                	li	a1,0
    80010e92:	ffff4097          	auipc	ra,0xffff4
    80010e96:	85a080e7          	jalr	-1958(ra) # 800046ec <_ZN4core4sync6atomic10AtomicBool5store17h325e21ca90edd7e7E>
    80010e9a:	a009                	j	80010e9c <.LBB17_12+0x3a>
        pop_off();
    80010e9c:	00001097          	auipc	ra,0x1
    80010ea0:	3ea080e7          	jalr	1002(ra) # 80012286 <_ZN6kernel7process3cpu7pop_off17hb8c7b834ab1c7c4cE>
    80010ea4:	a009                	j	80010ea6 <.LBB17_12+0x44>
    }
    80010ea6:	60aa                	ld	ra,136(sp)
    80010ea8:	6149                	addi	sp,sp,144
    80010eaa:	8082                	ret

Disassembly of section .text._ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17hdd8465c64dcbee95E:

0000000080010eac <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17hdd8465c64dcbee95E>:
    pub fn release(&self) {
    80010eac:	7175                	addi	sp,sp,-144
    80010eae:	e506                	sd	ra,136(sp)
    80010eb0:	ec2a                	sd	a0,24(sp)
    80010eb2:	fcaa                	sd	a0,120(sp)
        if !self.holding() {
    80010eb4:	00000097          	auipc	ra,0x0
    80010eb8:	572080e7          	jalr	1394(ra) # 80011426 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hca575eb433d6c072E>
    80010ebc:	f02a                	sd	a0,32(sp)
    80010ebe:	a009                	j	80010ec0 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17hdd8465c64dcbee95E+0x14>
    80010ec0:	7502                	ld	a0,32(sp)
    80010ec2:	e105                	bnez	a0,80010ee2 <.LBB18_10+0x16>
    80010ec4:	a009                	j	80010ec6 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17hdd8465c64dcbee95E+0x1a>
            panic!("spinlock {} release", self.name);
    80010ec6:	6562                	ld	a0,24(sp)
    80010ec8:	f4aa                	sd	a0,104(sp)
    80010eca:	e12a                	sd	a0,128(sp)

0000000080010ecc <.LBB18_10>:
    80010ecc:	0000d597          	auipc	a1,0xd
    80010ed0:	6e858593          	addi	a1,a1,1768 # 8001e5b4 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E>
    80010ed4:	0000d097          	auipc	ra,0xd
    80010ed8:	726080e7          	jalr	1830(ra) # 8001e5fa <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>
    80010edc:	e42a                	sd	a0,8(sp)
    80010ede:	e82e                	sd	a1,16(sp)
    80010ee0:	a809                	j	80010ef2 <.LBB18_10+0x26>
        self.cpu_id.set(-1);
    80010ee2:	6562                	ld	a0,24(sp)
    80010ee4:	0541                	addi	a0,a0,16
    80010ee6:	55fd                	li	a1,-1
    80010ee8:	ffff4097          	auipc	ra,0xffff4
    80010eec:	296080e7          	jalr	662(ra) # 8000517e <_ZN4core4cell13Cell$LT$T$GT$3set17hb9927bf4fdcefc87E>
    80010ef0:	a825                	j	80010f28 <.LBB18_12+0x14>
            panic!("spinlock {} release", self.name);
    80010ef2:	6542                	ld	a0,16(sp)
    80010ef4:	65a2                	ld	a1,8(sp)
    80010ef6:	ecae                	sd	a1,88(sp)
    80010ef8:	f0aa                	sd	a0,96(sp)

0000000080010efa <.LBB18_11>:
    80010efa:	00018597          	auipc	a1,0x18
    80010efe:	9de58593          	addi	a1,a1,-1570 # 800288d8 <.L__unnamed_3>
    80010f02:	1028                	addi	a0,sp,40
    80010f04:	4609                	li	a2,2
    80010f06:	08b4                	addi	a3,sp,88
    80010f08:	4705                	li	a4,1
    80010f0a:	ffff4097          	auipc	ra,0xffff4
    80010f0e:	560080e7          	jalr	1376(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80010f12:	a009                	j	80010f14 <.LBB18_12>

0000000080010f14 <.LBB18_12>:
    80010f14:	00018597          	auipc	a1,0x18
    80010f18:	9e458593          	addi	a1,a1,-1564 # 800288f8 <.L__unnamed_4>
    80010f1c:	1028                	addi	a0,sp,40
    80010f1e:	00011097          	auipc	ra,0x11
    80010f22:	3c4080e7          	jalr	964(ra) # 800222e2 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
    80010f26:	0000                	unimp
    80010f28:	4511                	li	a0,4
        fence(Ordering::SeqCst);
    80010f2a:	06a10b23          	sb	a0,118(sp)
    80010f2e:	ffff4097          	auipc	ra,0xffff4
    80010f32:	882080e7          	jalr	-1918(ra) # 800047b0 <_ZN4core4sync6atomic5fence17hd2f91624c9f09ce8E>
    80010f36:	a009                	j	80010f38 <.LBB18_12+0x24>
        self.locked.store(false, Ordering::Release);
    80010f38:	6562                	ld	a0,24(sp)
    80010f3a:	0561                	addi	a0,a0,24
    80010f3c:	4605                	li	a2,1
    80010f3e:	06c10ba3          	sb	a2,119(sp)
    80010f42:	4581                	li	a1,0
    80010f44:	ffff3097          	auipc	ra,0xffff3
    80010f48:	7a8080e7          	jalr	1960(ra) # 800046ec <_ZN4core4sync6atomic10AtomicBool5store17h325e21ca90edd7e7E>
    80010f4c:	a009                	j	80010f4e <.LBB18_12+0x3a>
        pop_off();
    80010f4e:	00001097          	auipc	ra,0x1
    80010f52:	338080e7          	jalr	824(ra) # 80012286 <_ZN6kernel7process3cpu7pop_off17hb8c7b834ab1c7c4cE>
    80010f56:	a009                	j	80010f58 <.LBB18_12+0x44>
    }
    80010f58:	60aa                	ld	ra,136(sp)
    80010f5a:	6149                	addi	sp,sp,144
    80010f5c:	8082                	ret

Disassembly of section .text._ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17hfda5e7f2f4cdedb7E:

0000000080010f5e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17hfda5e7f2f4cdedb7E>:
    pub fn release(&self) {
    80010f5e:	7175                	addi	sp,sp,-144
    80010f60:	e506                	sd	ra,136(sp)
    80010f62:	ec2a                	sd	a0,24(sp)
    80010f64:	fcaa                	sd	a0,120(sp)
        if !self.holding() {
    80010f66:	00000097          	auipc	ra,0x0
    80010f6a:	1d8080e7          	jalr	472(ra) # 8001113e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h22290a831051ae28E>
    80010f6e:	f02a                	sd	a0,32(sp)
    80010f70:	a009                	j	80010f72 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17hfda5e7f2f4cdedb7E+0x14>
    80010f72:	7502                	ld	a0,32(sp)
    80010f74:	e105                	bnez	a0,80010f94 <.LBB19_10+0x16>
    80010f76:	a009                	j	80010f78 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17hfda5e7f2f4cdedb7E+0x1a>
            panic!("spinlock {} release", self.name);
    80010f78:	6562                	ld	a0,24(sp)
    80010f7a:	f4aa                	sd	a0,104(sp)
    80010f7c:	e12a                	sd	a0,128(sp)

0000000080010f7e <.LBB19_10>:
    80010f7e:	0000d597          	auipc	a1,0xd
    80010f82:	63658593          	addi	a1,a1,1590 # 8001e5b4 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E>
    80010f86:	0000d097          	auipc	ra,0xd
    80010f8a:	674080e7          	jalr	1652(ra) # 8001e5fa <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>
    80010f8e:	e42a                	sd	a0,8(sp)
    80010f90:	e82e                	sd	a1,16(sp)
    80010f92:	a809                	j	80010fa4 <.LBB19_10+0x26>
        self.cpu_id.set(-1);
    80010f94:	6562                	ld	a0,24(sp)
    80010f96:	0541                	addi	a0,a0,16
    80010f98:	55fd                	li	a1,-1
    80010f9a:	ffff4097          	auipc	ra,0xffff4
    80010f9e:	1e4080e7          	jalr	484(ra) # 8000517e <_ZN4core4cell13Cell$LT$T$GT$3set17hb9927bf4fdcefc87E>
    80010fa2:	a825                	j	80010fda <.LBB19_12+0x14>
            panic!("spinlock {} release", self.name);
    80010fa4:	6542                	ld	a0,16(sp)
    80010fa6:	65a2                	ld	a1,8(sp)
    80010fa8:	ecae                	sd	a1,88(sp)
    80010faa:	f0aa                	sd	a0,96(sp)

0000000080010fac <.LBB19_11>:
    80010fac:	00018597          	auipc	a1,0x18
    80010fb0:	92c58593          	addi	a1,a1,-1748 # 800288d8 <.L__unnamed_3>
    80010fb4:	1028                	addi	a0,sp,40
    80010fb6:	4609                	li	a2,2
    80010fb8:	08b4                	addi	a3,sp,88
    80010fba:	4705                	li	a4,1
    80010fbc:	ffff4097          	auipc	ra,0xffff4
    80010fc0:	4ae080e7          	jalr	1198(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80010fc4:	a009                	j	80010fc6 <.LBB19_12>

0000000080010fc6 <.LBB19_12>:
    80010fc6:	00018597          	auipc	a1,0x18
    80010fca:	93258593          	addi	a1,a1,-1742 # 800288f8 <.L__unnamed_4>
    80010fce:	1028                	addi	a0,sp,40
    80010fd0:	00011097          	auipc	ra,0x11
    80010fd4:	312080e7          	jalr	786(ra) # 800222e2 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
    80010fd8:	0000                	unimp
    80010fda:	4511                	li	a0,4
        fence(Ordering::SeqCst);
    80010fdc:	06a10b23          	sb	a0,118(sp)
    80010fe0:	ffff3097          	auipc	ra,0xffff3
    80010fe4:	7d0080e7          	jalr	2000(ra) # 800047b0 <_ZN4core4sync6atomic5fence17hd2f91624c9f09ce8E>
    80010fe8:	a009                	j	80010fea <.LBB19_12+0x24>
        self.locked.store(false, Ordering::Release);
    80010fea:	6562                	ld	a0,24(sp)
    80010fec:	0561                	addi	a0,a0,24
    80010fee:	4605                	li	a2,1
    80010ff0:	06c10ba3          	sb	a2,119(sp)
    80010ff4:	4581                	li	a1,0
    80010ff6:	ffff3097          	auipc	ra,0xffff3
    80010ffa:	6f6080e7          	jalr	1782(ra) # 800046ec <_ZN4core4sync6atomic10AtomicBool5store17h325e21ca90edd7e7E>
    80010ffe:	a009                	j	80011000 <.LBB19_12+0x3a>
        pop_off();
    80011000:	00001097          	auipc	ra,0x1
    80011004:	286080e7          	jalr	646(ra) # 80012286 <_ZN6kernel7process3cpu7pop_off17hb8c7b834ab1c7c4cE>
    80011008:	a009                	j	8001100a <.LBB19_12+0x44>
    }
    8001100a:	60aa                	ld	ra,136(sp)
    8001100c:	6149                	addi	sp,sp,144
    8001100e:	8082                	ret

Disassembly of section .text._ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17hfedbfd7a024c8acfE:

0000000080011010 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17hfedbfd7a024c8acfE>:
    pub fn release(&self) {
    80011010:	7175                	addi	sp,sp,-144
    80011012:	e506                	sd	ra,136(sp)
    80011014:	ec2a                	sd	a0,24(sp)
    80011016:	fcaa                	sd	a0,120(sp)
        if !self.holding() {
    80011018:	00000097          	auipc	ra,0x0
    8001101c:	0aa080e7          	jalr	170(ra) # 800110c2 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h04bb873c43629d68E>
    80011020:	f02a                	sd	a0,32(sp)
    80011022:	a009                	j	80011024 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17hfedbfd7a024c8acfE+0x14>
    80011024:	7502                	ld	a0,32(sp)
    80011026:	e105                	bnez	a0,80011046 <.LBB20_10+0x16>
    80011028:	a009                	j	8001102a <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17hfedbfd7a024c8acfE+0x1a>
            panic!("spinlock {} release", self.name);
    8001102a:	6562                	ld	a0,24(sp)
    8001102c:	f4aa                	sd	a0,104(sp)
    8001102e:	e12a                	sd	a0,128(sp)

0000000080011030 <.LBB20_10>:
    80011030:	0000d597          	auipc	a1,0xd
    80011034:	58458593          	addi	a1,a1,1412 # 8001e5b4 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E>
    80011038:	0000d097          	auipc	ra,0xd
    8001103c:	5c2080e7          	jalr	1474(ra) # 8001e5fa <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>
    80011040:	e42a                	sd	a0,8(sp)
    80011042:	e82e                	sd	a1,16(sp)
    80011044:	a809                	j	80011056 <.LBB20_10+0x26>
        self.cpu_id.set(-1);
    80011046:	6562                	ld	a0,24(sp)
    80011048:	0541                	addi	a0,a0,16
    8001104a:	55fd                	li	a1,-1
    8001104c:	ffff4097          	auipc	ra,0xffff4
    80011050:	132080e7          	jalr	306(ra) # 8000517e <_ZN4core4cell13Cell$LT$T$GT$3set17hb9927bf4fdcefc87E>
    80011054:	a825                	j	8001108c <.LBB20_12+0x14>
            panic!("spinlock {} release", self.name);
    80011056:	6542                	ld	a0,16(sp)
    80011058:	65a2                	ld	a1,8(sp)
    8001105a:	ecae                	sd	a1,88(sp)
    8001105c:	f0aa                	sd	a0,96(sp)

000000008001105e <.LBB20_11>:
    8001105e:	00018597          	auipc	a1,0x18
    80011062:	87a58593          	addi	a1,a1,-1926 # 800288d8 <.L__unnamed_3>
    80011066:	1028                	addi	a0,sp,40
    80011068:	4609                	li	a2,2
    8001106a:	08b4                	addi	a3,sp,88
    8001106c:	4705                	li	a4,1
    8001106e:	ffff4097          	auipc	ra,0xffff4
    80011072:	3fc080e7          	jalr	1020(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80011076:	a009                	j	80011078 <.LBB20_12>

0000000080011078 <.LBB20_12>:
    80011078:	00018597          	auipc	a1,0x18
    8001107c:	88058593          	addi	a1,a1,-1920 # 800288f8 <.L__unnamed_4>
    80011080:	1028                	addi	a0,sp,40
    80011082:	00011097          	auipc	ra,0x11
    80011086:	260080e7          	jalr	608(ra) # 800222e2 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
    8001108a:	0000                	unimp
    8001108c:	4511                	li	a0,4
        fence(Ordering::SeqCst);
    8001108e:	06a10b23          	sb	a0,118(sp)
    80011092:	ffff3097          	auipc	ra,0xffff3
    80011096:	71e080e7          	jalr	1822(ra) # 800047b0 <_ZN4core4sync6atomic5fence17hd2f91624c9f09ce8E>
    8001109a:	a009                	j	8001109c <.LBB20_12+0x24>
        self.locked.store(false, Ordering::Release);
    8001109c:	6562                	ld	a0,24(sp)
    8001109e:	0561                	addi	a0,a0,24
    800110a0:	4605                	li	a2,1
    800110a2:	06c10ba3          	sb	a2,119(sp)
    800110a6:	4581                	li	a1,0
    800110a8:	ffff3097          	auipc	ra,0xffff3
    800110ac:	644080e7          	jalr	1604(ra) # 800046ec <_ZN4core4sync6atomic10AtomicBool5store17h325e21ca90edd7e7E>
    800110b0:	a009                	j	800110b2 <.LBB20_12+0x3a>
        pop_off();
    800110b2:	00001097          	auipc	ra,0x1
    800110b6:	1d4080e7          	jalr	468(ra) # 80012286 <_ZN6kernel7process3cpu7pop_off17hb8c7b834ab1c7c4cE>
    800110ba:	a009                	j	800110bc <.LBB20_12+0x44>
    }
    800110bc:	60aa                	ld	ra,136(sp)
    800110be:	6149                	addi	sp,sp,144
    800110c0:	8082                	ret

Disassembly of section .text._ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h04bb873c43629d68E:

00000000800110c2 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h04bb873c43629d68E>:
    pub fn holding(&self) -> bool{
    800110c2:	7139                	addi	sp,sp,-64
    800110c4:	fc06                	sd	ra,56(sp)
    800110c6:	ec2a                	sd	a0,24(sp)
    800110c8:	f82a                	sd	a0,48(sp)
        if self.locked.load(Ordering::Relaxed) && self.cpu_id.get() == unsafe{ cpuid() } as isize {
    800110ca:	0561                	addi	a0,a0,24
    800110cc:	4581                	li	a1,0
    800110ce:	02b107a3          	sb	a1,47(sp)
    800110d2:	ffff3097          	auipc	ra,0xffff3
    800110d6:	59c080e7          	jalr	1436(ra) # 8000466e <_ZN4core4sync6atomic10AtomicBool4load17h49a663f50dd66935E>
    800110da:	f02a                	sd	a0,32(sp)
    800110dc:	a035                	j	80011108 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h04bb873c43629d68E+0x46>
    800110de:	4505                	li	a0,1
    800110e0:	02a10723          	sb	a0,46(sp)
    800110e4:	a829                	j	800110fe <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h04bb873c43629d68E+0x3c>
    800110e6:	4501                	li	a0,0
    800110e8:	02a10723          	sb	a0,46(sp)
    800110ec:	a809                	j	800110fe <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h04bb873c43629d68E+0x3c>
    800110ee:	6562                	ld	a0,24(sp)
    800110f0:	0541                	addi	a0,a0,16
    800110f2:	ffff4097          	auipc	ra,0xffff4
    800110f6:	026080e7          	jalr	38(ra) # 80005118 <_ZN4core4cell13Cell$LT$T$GT$3get17hc0e1a98a16df48afE>
    800110fa:	e82a                	sd	a0,16(sp)
    800110fc:	a809                	j	8001110e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h04bb873c43629d68E+0x4c>
    800110fe:	02e14503          	lbu	a0,46(sp)
    80011102:	8905                	andi	a0,a0,1
    80011104:	e105                	bnez	a0,80011124 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h04bb873c43629d68E+0x62>
    80011106:	a01d                	j	8001112c <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h04bb873c43629d68E+0x6a>
    80011108:	7502                	ld	a0,32(sp)
    8001110a:	f175                	bnez	a0,800110ee <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h04bb873c43629d68E+0x2c>
    8001110c:	bfe9                	j	800110e6 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h04bb873c43629d68E+0x24>
    8001110e:	00001097          	auipc	ra,0x1
    80011112:	c88080e7          	jalr	-888(ra) # 80011d96 <_ZN6kernel7process3cpu5cpuid17h605093a6a9a60164E>
    80011116:	e42a                	sd	a0,8(sp)
    80011118:	a009                	j	8001111a <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h04bb873c43629d68E+0x58>
    8001111a:	6542                	ld	a0,16(sp)
    8001111c:	65a2                	ld	a1,8(sp)
    8001111e:	fcb500e3          	beq	a0,a1,800110de <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h04bb873c43629d68E+0x1c>
    80011122:	b7d1                	j	800110e6 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h04bb873c43629d68E+0x24>
    80011124:	4505                	li	a0,1
            return true
    80011126:	02a106a3          	sb	a0,45(sp)
    }
    8001112a:	a029                	j	80011134 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h04bb873c43629d68E+0x72>
    8001112c:	4501                	li	a0,0
        false
    8001112e:	02a106a3          	sb	a0,45(sp)
    }
    80011132:	a009                	j	80011134 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h04bb873c43629d68E+0x72>
    80011134:	02d14503          	lbu	a0,45(sp)
    80011138:	70e2                	ld	ra,56(sp)
    8001113a:	6121                	addi	sp,sp,64
    8001113c:	8082                	ret

Disassembly of section .text._ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h22290a831051ae28E:

000000008001113e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h22290a831051ae28E>:
    pub fn holding(&self) -> bool{
    8001113e:	7139                	addi	sp,sp,-64
    80011140:	fc06                	sd	ra,56(sp)
    80011142:	ec2a                	sd	a0,24(sp)
    80011144:	f82a                	sd	a0,48(sp)
        if self.locked.load(Ordering::Relaxed) && self.cpu_id.get() == unsafe{ cpuid() } as isize {
    80011146:	0561                	addi	a0,a0,24
    80011148:	4581                	li	a1,0
    8001114a:	02b107a3          	sb	a1,47(sp)
    8001114e:	ffff3097          	auipc	ra,0xffff3
    80011152:	520080e7          	jalr	1312(ra) # 8000466e <_ZN4core4sync6atomic10AtomicBool4load17h49a663f50dd66935E>
    80011156:	f02a                	sd	a0,32(sp)
    80011158:	a035                	j	80011184 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h22290a831051ae28E+0x46>
    8001115a:	4505                	li	a0,1
    8001115c:	02a10723          	sb	a0,46(sp)
    80011160:	a829                	j	8001117a <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h22290a831051ae28E+0x3c>
    80011162:	4501                	li	a0,0
    80011164:	02a10723          	sb	a0,46(sp)
    80011168:	a809                	j	8001117a <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h22290a831051ae28E+0x3c>
    8001116a:	6562                	ld	a0,24(sp)
    8001116c:	0541                	addi	a0,a0,16
    8001116e:	ffff4097          	auipc	ra,0xffff4
    80011172:	faa080e7          	jalr	-86(ra) # 80005118 <_ZN4core4cell13Cell$LT$T$GT$3get17hc0e1a98a16df48afE>
    80011176:	e82a                	sd	a0,16(sp)
    80011178:	a809                	j	8001118a <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h22290a831051ae28E+0x4c>
    8001117a:	02e14503          	lbu	a0,46(sp)
    8001117e:	8905                	andi	a0,a0,1
    80011180:	e105                	bnez	a0,800111a0 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h22290a831051ae28E+0x62>
    80011182:	a01d                	j	800111a8 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h22290a831051ae28E+0x6a>
    80011184:	7502                	ld	a0,32(sp)
    80011186:	f175                	bnez	a0,8001116a <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h22290a831051ae28E+0x2c>
    80011188:	bfe9                	j	80011162 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h22290a831051ae28E+0x24>
    8001118a:	00001097          	auipc	ra,0x1
    8001118e:	c0c080e7          	jalr	-1012(ra) # 80011d96 <_ZN6kernel7process3cpu5cpuid17h605093a6a9a60164E>
    80011192:	e42a                	sd	a0,8(sp)
    80011194:	a009                	j	80011196 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h22290a831051ae28E+0x58>
    80011196:	6542                	ld	a0,16(sp)
    80011198:	65a2                	ld	a1,8(sp)
    8001119a:	fcb500e3          	beq	a0,a1,8001115a <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h22290a831051ae28E+0x1c>
    8001119e:	b7d1                	j	80011162 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h22290a831051ae28E+0x24>
    800111a0:	4505                	li	a0,1
            return true
    800111a2:	02a106a3          	sb	a0,45(sp)
    }
    800111a6:	a029                	j	800111b0 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h22290a831051ae28E+0x72>
    800111a8:	4501                	li	a0,0
        false
    800111aa:	02a106a3          	sb	a0,45(sp)
    }
    800111ae:	a009                	j	800111b0 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h22290a831051ae28E+0x72>
    800111b0:	02d14503          	lbu	a0,45(sp)
    800111b4:	70e2                	ld	ra,56(sp)
    800111b6:	6121                	addi	sp,sp,64
    800111b8:	8082                	ret

Disassembly of section .text._ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h56772fc96a718090E:

00000000800111ba <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h56772fc96a718090E>:
    pub fn holding(&self) -> bool{
    800111ba:	7139                	addi	sp,sp,-64
    800111bc:	fc06                	sd	ra,56(sp)
    800111be:	ec2a                	sd	a0,24(sp)
    800111c0:	f82a                	sd	a0,48(sp)
        if self.locked.load(Ordering::Relaxed) && self.cpu_id.get() == unsafe{ cpuid() } as isize {
    800111c2:	0561                	addi	a0,a0,24
    800111c4:	4581                	li	a1,0
    800111c6:	02b107a3          	sb	a1,47(sp)
    800111ca:	ffff3097          	auipc	ra,0xffff3
    800111ce:	4a4080e7          	jalr	1188(ra) # 8000466e <_ZN4core4sync6atomic10AtomicBool4load17h49a663f50dd66935E>
    800111d2:	f02a                	sd	a0,32(sp)
    800111d4:	a035                	j	80011200 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h56772fc96a718090E+0x46>
    800111d6:	4505                	li	a0,1
    800111d8:	02a10723          	sb	a0,46(sp)
    800111dc:	a829                	j	800111f6 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h56772fc96a718090E+0x3c>
    800111de:	4501                	li	a0,0
    800111e0:	02a10723          	sb	a0,46(sp)
    800111e4:	a809                	j	800111f6 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h56772fc96a718090E+0x3c>
    800111e6:	6562                	ld	a0,24(sp)
    800111e8:	0541                	addi	a0,a0,16
    800111ea:	ffff4097          	auipc	ra,0xffff4
    800111ee:	f2e080e7          	jalr	-210(ra) # 80005118 <_ZN4core4cell13Cell$LT$T$GT$3get17hc0e1a98a16df48afE>
    800111f2:	e82a                	sd	a0,16(sp)
    800111f4:	a809                	j	80011206 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h56772fc96a718090E+0x4c>
    800111f6:	02e14503          	lbu	a0,46(sp)
    800111fa:	8905                	andi	a0,a0,1
    800111fc:	e105                	bnez	a0,8001121c <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h56772fc96a718090E+0x62>
    800111fe:	a01d                	j	80011224 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h56772fc96a718090E+0x6a>
    80011200:	7502                	ld	a0,32(sp)
    80011202:	f175                	bnez	a0,800111e6 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h56772fc96a718090E+0x2c>
    80011204:	bfe9                	j	800111de <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h56772fc96a718090E+0x24>
    80011206:	00001097          	auipc	ra,0x1
    8001120a:	b90080e7          	jalr	-1136(ra) # 80011d96 <_ZN6kernel7process3cpu5cpuid17h605093a6a9a60164E>
    8001120e:	e42a                	sd	a0,8(sp)
    80011210:	a009                	j	80011212 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h56772fc96a718090E+0x58>
    80011212:	6542                	ld	a0,16(sp)
    80011214:	65a2                	ld	a1,8(sp)
    80011216:	fcb500e3          	beq	a0,a1,800111d6 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h56772fc96a718090E+0x1c>
    8001121a:	b7d1                	j	800111de <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h56772fc96a718090E+0x24>
    8001121c:	4505                	li	a0,1
            return true
    8001121e:	02a106a3          	sb	a0,45(sp)
    }
    80011222:	a029                	j	8001122c <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h56772fc96a718090E+0x72>
    80011224:	4501                	li	a0,0
        false
    80011226:	02a106a3          	sb	a0,45(sp)
    }
    8001122a:	a009                	j	8001122c <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h56772fc96a718090E+0x72>
    8001122c:	02d14503          	lbu	a0,45(sp)
    80011230:	70e2                	ld	ra,56(sp)
    80011232:	6121                	addi	sp,sp,64
    80011234:	8082                	ret

Disassembly of section .text._ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h685eaac29cc8096eE:

0000000080011236 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h685eaac29cc8096eE>:
    pub fn holding(&self) -> bool{
    80011236:	7139                	addi	sp,sp,-64
    80011238:	fc06                	sd	ra,56(sp)
    8001123a:	ec2a                	sd	a0,24(sp)
    8001123c:	f82a                	sd	a0,48(sp)
        if self.locked.load(Ordering::Relaxed) && self.cpu_id.get() == unsafe{ cpuid() } as isize {
    8001123e:	0561                	addi	a0,a0,24
    80011240:	4581                	li	a1,0
    80011242:	02b107a3          	sb	a1,47(sp)
    80011246:	ffff3097          	auipc	ra,0xffff3
    8001124a:	428080e7          	jalr	1064(ra) # 8000466e <_ZN4core4sync6atomic10AtomicBool4load17h49a663f50dd66935E>
    8001124e:	f02a                	sd	a0,32(sp)
    80011250:	a035                	j	8001127c <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h685eaac29cc8096eE+0x46>
    80011252:	4505                	li	a0,1
    80011254:	02a10723          	sb	a0,46(sp)
    80011258:	a829                	j	80011272 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h685eaac29cc8096eE+0x3c>
    8001125a:	4501                	li	a0,0
    8001125c:	02a10723          	sb	a0,46(sp)
    80011260:	a809                	j	80011272 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h685eaac29cc8096eE+0x3c>
    80011262:	6562                	ld	a0,24(sp)
    80011264:	0541                	addi	a0,a0,16
    80011266:	ffff4097          	auipc	ra,0xffff4
    8001126a:	eb2080e7          	jalr	-334(ra) # 80005118 <_ZN4core4cell13Cell$LT$T$GT$3get17hc0e1a98a16df48afE>
    8001126e:	e82a                	sd	a0,16(sp)
    80011270:	a809                	j	80011282 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h685eaac29cc8096eE+0x4c>
    80011272:	02e14503          	lbu	a0,46(sp)
    80011276:	8905                	andi	a0,a0,1
    80011278:	e105                	bnez	a0,80011298 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h685eaac29cc8096eE+0x62>
    8001127a:	a01d                	j	800112a0 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h685eaac29cc8096eE+0x6a>
    8001127c:	7502                	ld	a0,32(sp)
    8001127e:	f175                	bnez	a0,80011262 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h685eaac29cc8096eE+0x2c>
    80011280:	bfe9                	j	8001125a <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h685eaac29cc8096eE+0x24>
    80011282:	00001097          	auipc	ra,0x1
    80011286:	b14080e7          	jalr	-1260(ra) # 80011d96 <_ZN6kernel7process3cpu5cpuid17h605093a6a9a60164E>
    8001128a:	e42a                	sd	a0,8(sp)
    8001128c:	a009                	j	8001128e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h685eaac29cc8096eE+0x58>
    8001128e:	6542                	ld	a0,16(sp)
    80011290:	65a2                	ld	a1,8(sp)
    80011292:	fcb500e3          	beq	a0,a1,80011252 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h685eaac29cc8096eE+0x1c>
    80011296:	b7d1                	j	8001125a <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h685eaac29cc8096eE+0x24>
    80011298:	4505                	li	a0,1
            return true
    8001129a:	02a106a3          	sb	a0,45(sp)
    }
    8001129e:	a029                	j	800112a8 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h685eaac29cc8096eE+0x72>
    800112a0:	4501                	li	a0,0
        false
    800112a2:	02a106a3          	sb	a0,45(sp)
    }
    800112a6:	a009                	j	800112a8 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h685eaac29cc8096eE+0x72>
    800112a8:	02d14503          	lbu	a0,45(sp)
    800112ac:	70e2                	ld	ra,56(sp)
    800112ae:	6121                	addi	sp,sp,64
    800112b0:	8082                	ret

Disassembly of section .text._ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h71dfe9d2eb747f59E:

00000000800112b2 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h71dfe9d2eb747f59E>:
    pub fn holding(&self) -> bool{
    800112b2:	7139                	addi	sp,sp,-64
    800112b4:	fc06                	sd	ra,56(sp)
    800112b6:	ec2a                	sd	a0,24(sp)
    800112b8:	f82a                	sd	a0,48(sp)
        if self.locked.load(Ordering::Relaxed) && self.cpu_id.get() == unsafe{ cpuid() } as isize {
    800112ba:	0561                	addi	a0,a0,24
    800112bc:	4581                	li	a1,0
    800112be:	02b107a3          	sb	a1,47(sp)
    800112c2:	ffff3097          	auipc	ra,0xffff3
    800112c6:	3ac080e7          	jalr	940(ra) # 8000466e <_ZN4core4sync6atomic10AtomicBool4load17h49a663f50dd66935E>
    800112ca:	f02a                	sd	a0,32(sp)
    800112cc:	a035                	j	800112f8 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h71dfe9d2eb747f59E+0x46>
    800112ce:	4505                	li	a0,1
    800112d0:	02a10723          	sb	a0,46(sp)
    800112d4:	a829                	j	800112ee <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h71dfe9d2eb747f59E+0x3c>
    800112d6:	4501                	li	a0,0
    800112d8:	02a10723          	sb	a0,46(sp)
    800112dc:	a809                	j	800112ee <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h71dfe9d2eb747f59E+0x3c>
    800112de:	6562                	ld	a0,24(sp)
    800112e0:	0541                	addi	a0,a0,16
    800112e2:	ffff4097          	auipc	ra,0xffff4
    800112e6:	e36080e7          	jalr	-458(ra) # 80005118 <_ZN4core4cell13Cell$LT$T$GT$3get17hc0e1a98a16df48afE>
    800112ea:	e82a                	sd	a0,16(sp)
    800112ec:	a809                	j	800112fe <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h71dfe9d2eb747f59E+0x4c>
    800112ee:	02e14503          	lbu	a0,46(sp)
    800112f2:	8905                	andi	a0,a0,1
    800112f4:	e105                	bnez	a0,80011314 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h71dfe9d2eb747f59E+0x62>
    800112f6:	a01d                	j	8001131c <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h71dfe9d2eb747f59E+0x6a>
    800112f8:	7502                	ld	a0,32(sp)
    800112fa:	f175                	bnez	a0,800112de <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h71dfe9d2eb747f59E+0x2c>
    800112fc:	bfe9                	j	800112d6 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h71dfe9d2eb747f59E+0x24>
    800112fe:	00001097          	auipc	ra,0x1
    80011302:	a98080e7          	jalr	-1384(ra) # 80011d96 <_ZN6kernel7process3cpu5cpuid17h605093a6a9a60164E>
    80011306:	e42a                	sd	a0,8(sp)
    80011308:	a009                	j	8001130a <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h71dfe9d2eb747f59E+0x58>
    8001130a:	6542                	ld	a0,16(sp)
    8001130c:	65a2                	ld	a1,8(sp)
    8001130e:	fcb500e3          	beq	a0,a1,800112ce <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h71dfe9d2eb747f59E+0x1c>
    80011312:	b7d1                	j	800112d6 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h71dfe9d2eb747f59E+0x24>
    80011314:	4505                	li	a0,1
            return true
    80011316:	02a106a3          	sb	a0,45(sp)
    }
    8001131a:	a029                	j	80011324 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h71dfe9d2eb747f59E+0x72>
    8001131c:	4501                	li	a0,0
        false
    8001131e:	02a106a3          	sb	a0,45(sp)
    }
    80011322:	a009                	j	80011324 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h71dfe9d2eb747f59E+0x72>
    80011324:	02d14503          	lbu	a0,45(sp)
    80011328:	70e2                	ld	ra,56(sp)
    8001132a:	6121                	addi	sp,sp,64
    8001132c:	8082                	ret

Disassembly of section .text._ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h92b63d3de4da3516E:

000000008001132e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h92b63d3de4da3516E>:
    pub fn holding(&self) -> bool{
    8001132e:	7139                	addi	sp,sp,-64
    80011330:	fc06                	sd	ra,56(sp)
    80011332:	ec2a                	sd	a0,24(sp)
    80011334:	f82a                	sd	a0,48(sp)
        if self.locked.load(Ordering::Relaxed) && self.cpu_id.get() == unsafe{ cpuid() } as isize {
    80011336:	0561                	addi	a0,a0,24
    80011338:	4581                	li	a1,0
    8001133a:	02b107a3          	sb	a1,47(sp)
    8001133e:	ffff3097          	auipc	ra,0xffff3
    80011342:	330080e7          	jalr	816(ra) # 8000466e <_ZN4core4sync6atomic10AtomicBool4load17h49a663f50dd66935E>
    80011346:	f02a                	sd	a0,32(sp)
    80011348:	a035                	j	80011374 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h92b63d3de4da3516E+0x46>
    8001134a:	4505                	li	a0,1
    8001134c:	02a10723          	sb	a0,46(sp)
    80011350:	a829                	j	8001136a <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h92b63d3de4da3516E+0x3c>
    80011352:	4501                	li	a0,0
    80011354:	02a10723          	sb	a0,46(sp)
    80011358:	a809                	j	8001136a <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h92b63d3de4da3516E+0x3c>
    8001135a:	6562                	ld	a0,24(sp)
    8001135c:	0541                	addi	a0,a0,16
    8001135e:	ffff4097          	auipc	ra,0xffff4
    80011362:	dba080e7          	jalr	-582(ra) # 80005118 <_ZN4core4cell13Cell$LT$T$GT$3get17hc0e1a98a16df48afE>
    80011366:	e82a                	sd	a0,16(sp)
    80011368:	a809                	j	8001137a <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h92b63d3de4da3516E+0x4c>
    8001136a:	02e14503          	lbu	a0,46(sp)
    8001136e:	8905                	andi	a0,a0,1
    80011370:	e105                	bnez	a0,80011390 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h92b63d3de4da3516E+0x62>
    80011372:	a01d                	j	80011398 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h92b63d3de4da3516E+0x6a>
    80011374:	7502                	ld	a0,32(sp)
    80011376:	f175                	bnez	a0,8001135a <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h92b63d3de4da3516E+0x2c>
    80011378:	bfe9                	j	80011352 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h92b63d3de4da3516E+0x24>
    8001137a:	00001097          	auipc	ra,0x1
    8001137e:	a1c080e7          	jalr	-1508(ra) # 80011d96 <_ZN6kernel7process3cpu5cpuid17h605093a6a9a60164E>
    80011382:	e42a                	sd	a0,8(sp)
    80011384:	a009                	j	80011386 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h92b63d3de4da3516E+0x58>
    80011386:	6542                	ld	a0,16(sp)
    80011388:	65a2                	ld	a1,8(sp)
    8001138a:	fcb500e3          	beq	a0,a1,8001134a <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h92b63d3de4da3516E+0x1c>
    8001138e:	b7d1                	j	80011352 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h92b63d3de4da3516E+0x24>
    80011390:	4505                	li	a0,1
            return true
    80011392:	02a106a3          	sb	a0,45(sp)
    }
    80011396:	a029                	j	800113a0 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h92b63d3de4da3516E+0x72>
    80011398:	4501                	li	a0,0
        false
    8001139a:	02a106a3          	sb	a0,45(sp)
    }
    8001139e:	a009                	j	800113a0 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h92b63d3de4da3516E+0x72>
    800113a0:	02d14503          	lbu	a0,45(sp)
    800113a4:	70e2                	ld	ra,56(sp)
    800113a6:	6121                	addi	sp,sp,64
    800113a8:	8082                	ret

Disassembly of section .text._ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17haa146bec45c9d0c2E:

00000000800113aa <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17haa146bec45c9d0c2E>:
    pub fn holding(&self) -> bool{
    800113aa:	7139                	addi	sp,sp,-64
    800113ac:	fc06                	sd	ra,56(sp)
    800113ae:	ec2a                	sd	a0,24(sp)
    800113b0:	f82a                	sd	a0,48(sp)
        if self.locked.load(Ordering::Relaxed) && self.cpu_id.get() == unsafe{ cpuid() } as isize {
    800113b2:	0561                	addi	a0,a0,24
    800113b4:	4581                	li	a1,0
    800113b6:	02b107a3          	sb	a1,47(sp)
    800113ba:	ffff3097          	auipc	ra,0xffff3
    800113be:	2b4080e7          	jalr	692(ra) # 8000466e <_ZN4core4sync6atomic10AtomicBool4load17h49a663f50dd66935E>
    800113c2:	f02a                	sd	a0,32(sp)
    800113c4:	a035                	j	800113f0 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17haa146bec45c9d0c2E+0x46>
    800113c6:	4505                	li	a0,1
    800113c8:	02a10723          	sb	a0,46(sp)
    800113cc:	a829                	j	800113e6 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17haa146bec45c9d0c2E+0x3c>
    800113ce:	4501                	li	a0,0
    800113d0:	02a10723          	sb	a0,46(sp)
    800113d4:	a809                	j	800113e6 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17haa146bec45c9d0c2E+0x3c>
    800113d6:	6562                	ld	a0,24(sp)
    800113d8:	0541                	addi	a0,a0,16
    800113da:	ffff4097          	auipc	ra,0xffff4
    800113de:	d3e080e7          	jalr	-706(ra) # 80005118 <_ZN4core4cell13Cell$LT$T$GT$3get17hc0e1a98a16df48afE>
    800113e2:	e82a                	sd	a0,16(sp)
    800113e4:	a809                	j	800113f6 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17haa146bec45c9d0c2E+0x4c>
    800113e6:	02e14503          	lbu	a0,46(sp)
    800113ea:	8905                	andi	a0,a0,1
    800113ec:	e105                	bnez	a0,8001140c <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17haa146bec45c9d0c2E+0x62>
    800113ee:	a01d                	j	80011414 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17haa146bec45c9d0c2E+0x6a>
    800113f0:	7502                	ld	a0,32(sp)
    800113f2:	f175                	bnez	a0,800113d6 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17haa146bec45c9d0c2E+0x2c>
    800113f4:	bfe9                	j	800113ce <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17haa146bec45c9d0c2E+0x24>
    800113f6:	00001097          	auipc	ra,0x1
    800113fa:	9a0080e7          	jalr	-1632(ra) # 80011d96 <_ZN6kernel7process3cpu5cpuid17h605093a6a9a60164E>
    800113fe:	e42a                	sd	a0,8(sp)
    80011400:	a009                	j	80011402 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17haa146bec45c9d0c2E+0x58>
    80011402:	6542                	ld	a0,16(sp)
    80011404:	65a2                	ld	a1,8(sp)
    80011406:	fcb500e3          	beq	a0,a1,800113c6 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17haa146bec45c9d0c2E+0x1c>
    8001140a:	b7d1                	j	800113ce <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17haa146bec45c9d0c2E+0x24>
    8001140c:	4505                	li	a0,1
            return true
    8001140e:	02a106a3          	sb	a0,45(sp)
    }
    80011412:	a029                	j	8001141c <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17haa146bec45c9d0c2E+0x72>
    80011414:	4501                	li	a0,0
        false
    80011416:	02a106a3          	sb	a0,45(sp)
    }
    8001141a:	a009                	j	8001141c <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17haa146bec45c9d0c2E+0x72>
    8001141c:	02d14503          	lbu	a0,45(sp)
    80011420:	70e2                	ld	ra,56(sp)
    80011422:	6121                	addi	sp,sp,64
    80011424:	8082                	ret

Disassembly of section .text._ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hca575eb433d6c072E:

0000000080011426 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hca575eb433d6c072E>:
    pub fn holding(&self) -> bool{
    80011426:	7139                	addi	sp,sp,-64
    80011428:	fc06                	sd	ra,56(sp)
    8001142a:	ec2a                	sd	a0,24(sp)
    8001142c:	f82a                	sd	a0,48(sp)
        if self.locked.load(Ordering::Relaxed) && self.cpu_id.get() == unsafe{ cpuid() } as isize {
    8001142e:	0561                	addi	a0,a0,24
    80011430:	4581                	li	a1,0
    80011432:	02b107a3          	sb	a1,47(sp)
    80011436:	ffff3097          	auipc	ra,0xffff3
    8001143a:	238080e7          	jalr	568(ra) # 8000466e <_ZN4core4sync6atomic10AtomicBool4load17h49a663f50dd66935E>
    8001143e:	f02a                	sd	a0,32(sp)
    80011440:	a035                	j	8001146c <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hca575eb433d6c072E+0x46>
    80011442:	4505                	li	a0,1
    80011444:	02a10723          	sb	a0,46(sp)
    80011448:	a829                	j	80011462 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hca575eb433d6c072E+0x3c>
    8001144a:	4501                	li	a0,0
    8001144c:	02a10723          	sb	a0,46(sp)
    80011450:	a809                	j	80011462 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hca575eb433d6c072E+0x3c>
    80011452:	6562                	ld	a0,24(sp)
    80011454:	0541                	addi	a0,a0,16
    80011456:	ffff4097          	auipc	ra,0xffff4
    8001145a:	cc2080e7          	jalr	-830(ra) # 80005118 <_ZN4core4cell13Cell$LT$T$GT$3get17hc0e1a98a16df48afE>
    8001145e:	e82a                	sd	a0,16(sp)
    80011460:	a809                	j	80011472 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hca575eb433d6c072E+0x4c>
    80011462:	02e14503          	lbu	a0,46(sp)
    80011466:	8905                	andi	a0,a0,1
    80011468:	e105                	bnez	a0,80011488 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hca575eb433d6c072E+0x62>
    8001146a:	a01d                	j	80011490 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hca575eb433d6c072E+0x6a>
    8001146c:	7502                	ld	a0,32(sp)
    8001146e:	f175                	bnez	a0,80011452 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hca575eb433d6c072E+0x2c>
    80011470:	bfe9                	j	8001144a <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hca575eb433d6c072E+0x24>
    80011472:	00001097          	auipc	ra,0x1
    80011476:	924080e7          	jalr	-1756(ra) # 80011d96 <_ZN6kernel7process3cpu5cpuid17h605093a6a9a60164E>
    8001147a:	e42a                	sd	a0,8(sp)
    8001147c:	a009                	j	8001147e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hca575eb433d6c072E+0x58>
    8001147e:	6542                	ld	a0,16(sp)
    80011480:	65a2                	ld	a1,8(sp)
    80011482:	fcb500e3          	beq	a0,a1,80011442 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hca575eb433d6c072E+0x1c>
    80011486:	b7d1                	j	8001144a <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hca575eb433d6c072E+0x24>
    80011488:	4505                	li	a0,1
            return true
    8001148a:	02a106a3          	sb	a0,45(sp)
    }
    8001148e:	a029                	j	80011498 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hca575eb433d6c072E+0x72>
    80011490:	4501                	li	a0,0
        false
    80011492:	02a106a3          	sb	a0,45(sp)
    }
    80011496:	a009                	j	80011498 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hca575eb433d6c072E+0x72>
    80011498:	02d14503          	lbu	a0,45(sp)
    8001149c:	70e2                	ld	ra,56(sp)
    8001149e:	6121                	addi	sp,sp,64
    800114a0:	8082                	ret

Disassembly of section .text._ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17he647ed27b9879bf9E:

00000000800114a2 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17he647ed27b9879bf9E>:
    pub fn holding(&self) -> bool{
    800114a2:	7139                	addi	sp,sp,-64
    800114a4:	fc06                	sd	ra,56(sp)
    800114a6:	ec2a                	sd	a0,24(sp)
    800114a8:	f82a                	sd	a0,48(sp)
        if self.locked.load(Ordering::Relaxed) && self.cpu_id.get() == unsafe{ cpuid() } as isize {
    800114aa:	0561                	addi	a0,a0,24
    800114ac:	4581                	li	a1,0
    800114ae:	02b107a3          	sb	a1,47(sp)
    800114b2:	ffff3097          	auipc	ra,0xffff3
    800114b6:	1bc080e7          	jalr	444(ra) # 8000466e <_ZN4core4sync6atomic10AtomicBool4load17h49a663f50dd66935E>
    800114ba:	f02a                	sd	a0,32(sp)
    800114bc:	a035                	j	800114e8 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17he647ed27b9879bf9E+0x46>
    800114be:	4505                	li	a0,1
    800114c0:	02a10723          	sb	a0,46(sp)
    800114c4:	a829                	j	800114de <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17he647ed27b9879bf9E+0x3c>
    800114c6:	4501                	li	a0,0
    800114c8:	02a10723          	sb	a0,46(sp)
    800114cc:	a809                	j	800114de <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17he647ed27b9879bf9E+0x3c>
    800114ce:	6562                	ld	a0,24(sp)
    800114d0:	0541                	addi	a0,a0,16
    800114d2:	ffff4097          	auipc	ra,0xffff4
    800114d6:	c46080e7          	jalr	-954(ra) # 80005118 <_ZN4core4cell13Cell$LT$T$GT$3get17hc0e1a98a16df48afE>
    800114da:	e82a                	sd	a0,16(sp)
    800114dc:	a809                	j	800114ee <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17he647ed27b9879bf9E+0x4c>
    800114de:	02e14503          	lbu	a0,46(sp)
    800114e2:	8905                	andi	a0,a0,1
    800114e4:	e105                	bnez	a0,80011504 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17he647ed27b9879bf9E+0x62>
    800114e6:	a01d                	j	8001150c <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17he647ed27b9879bf9E+0x6a>
    800114e8:	7502                	ld	a0,32(sp)
    800114ea:	f175                	bnez	a0,800114ce <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17he647ed27b9879bf9E+0x2c>
    800114ec:	bfe9                	j	800114c6 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17he647ed27b9879bf9E+0x24>
    800114ee:	00001097          	auipc	ra,0x1
    800114f2:	8a8080e7          	jalr	-1880(ra) # 80011d96 <_ZN6kernel7process3cpu5cpuid17h605093a6a9a60164E>
    800114f6:	e42a                	sd	a0,8(sp)
    800114f8:	a009                	j	800114fa <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17he647ed27b9879bf9E+0x58>
    800114fa:	6542                	ld	a0,16(sp)
    800114fc:	65a2                	ld	a1,8(sp)
    800114fe:	fcb500e3          	beq	a0,a1,800114be <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17he647ed27b9879bf9E+0x1c>
    80011502:	b7d1                	j	800114c6 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17he647ed27b9879bf9E+0x24>
    80011504:	4505                	li	a0,1
            return true
    80011506:	02a106a3          	sb	a0,45(sp)
    }
    8001150a:	a029                	j	80011514 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17he647ed27b9879bf9E+0x72>
    8001150c:	4501                	li	a0,0
        false
    8001150e:	02a106a3          	sb	a0,45(sp)
    }
    80011512:	a009                	j	80011514 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17he647ed27b9879bf9E+0x72>
    80011514:	02d14503          	lbu	a0,45(sp)
    80011518:	70e2                	ld	ra,56(sp)
    8001151a:	6121                	addi	sp,sp,64
    8001151c:	8082                	ret

Disassembly of section .text._ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hfffb7f56d7315d17E:

000000008001151e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hfffb7f56d7315d17E>:
    pub fn holding(&self) -> bool{
    8001151e:	7139                	addi	sp,sp,-64
    80011520:	fc06                	sd	ra,56(sp)
    80011522:	ec2a                	sd	a0,24(sp)
    80011524:	f82a                	sd	a0,48(sp)
        if self.locked.load(Ordering::Relaxed) && self.cpu_id.get() == unsafe{ cpuid() } as isize {
    80011526:	0561                	addi	a0,a0,24
    80011528:	4581                	li	a1,0
    8001152a:	02b107a3          	sb	a1,47(sp)
    8001152e:	ffff3097          	auipc	ra,0xffff3
    80011532:	140080e7          	jalr	320(ra) # 8000466e <_ZN4core4sync6atomic10AtomicBool4load17h49a663f50dd66935E>
    80011536:	f02a                	sd	a0,32(sp)
    80011538:	a035                	j	80011564 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hfffb7f56d7315d17E+0x46>
    8001153a:	4505                	li	a0,1
    8001153c:	02a10723          	sb	a0,46(sp)
    80011540:	a829                	j	8001155a <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hfffb7f56d7315d17E+0x3c>
    80011542:	4501                	li	a0,0
    80011544:	02a10723          	sb	a0,46(sp)
    80011548:	a809                	j	8001155a <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hfffb7f56d7315d17E+0x3c>
    8001154a:	6562                	ld	a0,24(sp)
    8001154c:	0541                	addi	a0,a0,16
    8001154e:	ffff4097          	auipc	ra,0xffff4
    80011552:	bca080e7          	jalr	-1078(ra) # 80005118 <_ZN4core4cell13Cell$LT$T$GT$3get17hc0e1a98a16df48afE>
    80011556:	e82a                	sd	a0,16(sp)
    80011558:	a809                	j	8001156a <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hfffb7f56d7315d17E+0x4c>
    8001155a:	02e14503          	lbu	a0,46(sp)
    8001155e:	8905                	andi	a0,a0,1
    80011560:	e105                	bnez	a0,80011580 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hfffb7f56d7315d17E+0x62>
    80011562:	a01d                	j	80011588 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hfffb7f56d7315d17E+0x6a>
    80011564:	7502                	ld	a0,32(sp)
    80011566:	f175                	bnez	a0,8001154a <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hfffb7f56d7315d17E+0x2c>
    80011568:	bfe9                	j	80011542 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hfffb7f56d7315d17E+0x24>
    8001156a:	00001097          	auipc	ra,0x1
    8001156e:	82c080e7          	jalr	-2004(ra) # 80011d96 <_ZN6kernel7process3cpu5cpuid17h605093a6a9a60164E>
    80011572:	e42a                	sd	a0,8(sp)
    80011574:	a009                	j	80011576 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hfffb7f56d7315d17E+0x58>
    80011576:	6542                	ld	a0,16(sp)
    80011578:	65a2                	ld	a1,8(sp)
    8001157a:	fcb500e3          	beq	a0,a1,8001153a <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hfffb7f56d7315d17E+0x1c>
    8001157e:	b7d1                	j	80011542 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hfffb7f56d7315d17E+0x24>
    80011580:	4505                	li	a0,1
            return true
    80011582:	02a106a3          	sb	a0,45(sp)
    }
    80011586:	a029                	j	80011590 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hfffb7f56d7315d17E+0x72>
    80011588:	4501                	li	a0,0
        false
    8001158a:	02a106a3          	sb	a0,45(sp)
    }
    8001158e:	a009                	j	80011590 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hfffb7f56d7315d17E+0x72>
    80011590:	02d14503          	lbu	a0,45(sp)
    80011594:	70e2                	ld	ra,56(sp)
    80011596:	6121                	addi	sp,sp,64
    80011598:	8082                	ret

Disassembly of section .text._ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h2948b75da44fd3f4E:

000000008001159a <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h2948b75da44fd3f4E>:
    fn deref(&self) -> &Self::Target {
    8001159a:	1101                	addi	sp,sp,-32
    8001159c:	ec06                	sd	ra,24(sp)
    8001159e:	e82a                	sd	a0,16(sp)
            &*self.spinlock.data.get()
    800115a0:	6108                	ld	a0,0(a0)
    800115a2:	02050513          	addi	a0,a0,32
    800115a6:	ffff4097          	auipc	ra,0xffff4
    800115aa:	c94080e7          	jalr	-876(ra) # 8000523a <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h4b85f27290bf8d3bE>
    800115ae:	e42a                	sd	a0,8(sp)
    800115b0:	a009                	j	800115b2 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h2948b75da44fd3f4E+0x18>
    }
    800115b2:	6522                	ld	a0,8(sp)
    800115b4:	60e2                	ld	ra,24(sp)
    800115b6:	6105                	addi	sp,sp,32
    800115b8:	8082                	ret

Disassembly of section .text._ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h570d144f846c2ec7E:

00000000800115ba <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h570d144f846c2ec7E>:
    fn deref(&self) -> &Self::Target {
    800115ba:	1101                	addi	sp,sp,-32
    800115bc:	ec06                	sd	ra,24(sp)
    800115be:	e82a                	sd	a0,16(sp)
            &*self.spinlock.data.get()
    800115c0:	6108                	ld	a0,0(a0)
    800115c2:	02050513          	addi	a0,a0,32
    800115c6:	00011097          	auipc	ra,0x11
    800115ca:	ae6080e7          	jalr	-1306(ra) # 800220ac <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17hcdc438fb74b7ecc8E>
    800115ce:	e42a                	sd	a0,8(sp)
    800115d0:	a009                	j	800115d2 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h570d144f846c2ec7E+0x18>
    }
    800115d2:	6522                	ld	a0,8(sp)
    800115d4:	60e2                	ld	ra,24(sp)
    800115d6:	6105                	addi	sp,sp,32
    800115d8:	8082                	ret

Disassembly of section .text._ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h7eb0b551b3d2dabcE:

00000000800115da <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h7eb0b551b3d2dabcE>:
    fn deref(&self) -> &Self::Target {
    800115da:	1101                	addi	sp,sp,-32
    800115dc:	ec06                	sd	ra,24(sp)
    800115de:	e82a                	sd	a0,16(sp)
            &*self.spinlock.data.get()
    800115e0:	6108                	ld	a0,0(a0)
    800115e2:	6585                	lui	a1,0x1
    800115e4:	952e                	add	a0,a0,a1
    800115e6:	ffff4097          	auipc	ra,0xffff4
    800115ea:	c4c080e7          	jalr	-948(ra) # 80005232 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h222732a2deb54afaE>
    800115ee:	e42a                	sd	a0,8(sp)
    800115f0:	a009                	j	800115f2 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h7eb0b551b3d2dabcE+0x18>
    }
    800115f2:	6522                	ld	a0,8(sp)
    800115f4:	60e2                	ld	ra,24(sp)
    800115f6:	6105                	addi	sp,sp,32
    800115f8:	8082                	ret

Disassembly of section .text._ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h89fb3cfbc0625c4cE:

00000000800115fa <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h89fb3cfbc0625c4cE>:
    fn deref(&self) -> &Self::Target {
    800115fa:	1101                	addi	sp,sp,-32
    800115fc:	ec06                	sd	ra,24(sp)
    800115fe:	e82a                	sd	a0,16(sp)
            &*self.spinlock.data.get()
    80011600:	6108                	ld	a0,0(a0)
    80011602:	0571                	addi	a0,a0,28
    80011604:	ffff4097          	auipc	ra,0xffff4
    80011608:	c6e080e7          	jalr	-914(ra) # 80005272 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17hf0694f5cd8271985E>
    8001160c:	e42a                	sd	a0,8(sp)
    8001160e:	a009                	j	80011610 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h89fb3cfbc0625c4cE+0x16>
    }
    80011610:	6522                	ld	a0,8(sp)
    80011612:	60e2                	ld	ra,24(sp)
    80011614:	6105                	addi	sp,sp,32
    80011616:	8082                	ret

Disassembly of section .text._ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8f385c8b975788d5E:

0000000080011618 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8f385c8b975788d5E>:
    fn deref(&self) -> &Self::Target {
    80011618:	1101                	addi	sp,sp,-32
    8001161a:	ec06                	sd	ra,24(sp)
    8001161c:	e82a                	sd	a0,16(sp)
            &*self.spinlock.data.get()
    8001161e:	6108                	ld	a0,0(a0)
    80011620:	02050513          	addi	a0,a0,32
    80011624:	ffff4097          	auipc	ra,0xffff4
    80011628:	bfe080e7          	jalr	-1026(ra) # 80005222 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h05438521b5304ed4E>
    8001162c:	e42a                	sd	a0,8(sp)
    8001162e:	a009                	j	80011630 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8f385c8b975788d5E+0x18>
    }
    80011630:	6522                	ld	a0,8(sp)
    80011632:	60e2                	ld	ra,24(sp)
    80011634:	6105                	addi	sp,sp,32
    80011636:	8082                	ret

Disassembly of section .text._ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h9affced61e721535E:

0000000080011638 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h9affced61e721535E>:
    fn deref(&self) -> &Self::Target {
    80011638:	1101                	addi	sp,sp,-32
    8001163a:	ec06                	sd	ra,24(sp)
    8001163c:	e82a                	sd	a0,16(sp)
            &*self.spinlock.data.get()
    8001163e:	6108                	ld	a0,0(a0)
    80011640:	02050513          	addi	a0,a0,32
    80011644:	ffff4097          	auipc	ra,0xffff4
    80011648:	c0e080e7          	jalr	-1010(ra) # 80005252 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h85f42af92512c053E>
    8001164c:	e42a                	sd	a0,8(sp)
    8001164e:	a009                	j	80011650 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h9affced61e721535E+0x18>
    }
    80011650:	6522                	ld	a0,8(sp)
    80011652:	60e2                	ld	ra,24(sp)
    80011654:	6105                	addi	sp,sp,32
    80011656:	8082                	ret

Disassembly of section .text._ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc8a5a3c7c4ffa947E:

0000000080011658 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc8a5a3c7c4ffa947E>:
    fn deref(&self) -> &Self::Target {
    80011658:	1101                	addi	sp,sp,-32
    8001165a:	ec06                	sd	ra,24(sp)
    8001165c:	e82a                	sd	a0,16(sp)
            &*self.spinlock.data.get()
    8001165e:	6108                	ld	a0,0(a0)
    80011660:	02050513          	addi	a0,a0,32
    80011664:	ffff4097          	auipc	ra,0xffff4
    80011668:	c06080e7          	jalr	-1018(ra) # 8000526a <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17hbe9e1598ba1bbd42E>
    8001166c:	e42a                	sd	a0,8(sp)
    8001166e:	a009                	j	80011670 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc8a5a3c7c4ffa947E+0x18>
    }
    80011670:	6522                	ld	a0,8(sp)
    80011672:	60e2                	ld	ra,24(sp)
    80011674:	6105                	addi	sp,sp,32
    80011676:	8082                	ret

Disassembly of section .text._ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hd48c400b52283491E:

0000000080011678 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hd48c400b52283491E>:
    fn deref(&self) -> &Self::Target {
    80011678:	1101                	addi	sp,sp,-32
    8001167a:	ec06                	sd	ra,24(sp)
    8001167c:	e82a                	sd	a0,16(sp)
            &*self.spinlock.data.get()
    8001167e:	6108                	ld	a0,0(a0)
    80011680:	02050513          	addi	a0,a0,32
    80011684:	ffff4097          	auipc	ra,0xffff4
    80011688:	bf6080e7          	jalr	-1034(ra) # 8000527a <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17hfcb6ad47be983bedE>
    8001168c:	e42a                	sd	a0,8(sp)
    8001168e:	a009                	j	80011690 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hd48c400b52283491E+0x18>
    }
    80011690:	6522                	ld	a0,8(sp)
    80011692:	60e2                	ld	ra,24(sp)
    80011694:	6105                	addi	sp,sp,32
    80011696:	8082                	ret

Disassembly of section .text._ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h362a59dae1fa4f35E:

0000000080011698 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h362a59dae1fa4f35E>:
    fn deref_mut(&mut self) -> &mut Self::Target{
    80011698:	1101                	addi	sp,sp,-32
    8001169a:	ec06                	sd	ra,24(sp)
    8001169c:	e82a                	sd	a0,16(sp)
            &mut *self.spinlock.data.get()
    8001169e:	6108                	ld	a0,0(a0)
    800116a0:	6585                	lui	a1,0x1
    800116a2:	952e                	add	a0,a0,a1
    800116a4:	ffff4097          	auipc	ra,0xffff4
    800116a8:	b8e080e7          	jalr	-1138(ra) # 80005232 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h222732a2deb54afaE>
    800116ac:	e42a                	sd	a0,8(sp)
    800116ae:	a009                	j	800116b0 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h362a59dae1fa4f35E+0x18>
    }
    800116b0:	6522                	ld	a0,8(sp)
    800116b2:	60e2                	ld	ra,24(sp)
    800116b4:	6105                	addi	sp,sp,32
    800116b6:	8082                	ret

Disassembly of section .text._ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h5eeb9448b47ad682E:

00000000800116b8 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h5eeb9448b47ad682E>:
    fn deref_mut(&mut self) -> &mut Self::Target{
    800116b8:	1101                	addi	sp,sp,-32
    800116ba:	ec06                	sd	ra,24(sp)
    800116bc:	e82a                	sd	a0,16(sp)
            &mut *self.spinlock.data.get()
    800116be:	6108                	ld	a0,0(a0)
    800116c0:	02050513          	addi	a0,a0,32
    800116c4:	ffff4097          	auipc	ra,0xffff4
    800116c8:	b86080e7          	jalr	-1146(ra) # 8000524a <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h6b3041abf61d3f4fE>
    800116cc:	e42a                	sd	a0,8(sp)
    800116ce:	a009                	j	800116d0 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h5eeb9448b47ad682E+0x18>
    }
    800116d0:	6522                	ld	a0,8(sp)
    800116d2:	60e2                	ld	ra,24(sp)
    800116d4:	6105                	addi	sp,sp,32
    800116d6:	8082                	ret

Disassembly of section .text._ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h6a09efacfb59499dE:

00000000800116d8 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h6a09efacfb59499dE>:
    fn deref_mut(&mut self) -> &mut Self::Target{
    800116d8:	1101                	addi	sp,sp,-32
    800116da:	ec06                	sd	ra,24(sp)
    800116dc:	e82a                	sd	a0,16(sp)
            &mut *self.spinlock.data.get()
    800116de:	6108                	ld	a0,0(a0)
    800116e0:	0571                	addi	a0,a0,28
    800116e2:	ffff4097          	auipc	ra,0xffff4
    800116e6:	b90080e7          	jalr	-1136(ra) # 80005272 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17hf0694f5cd8271985E>
    800116ea:	e42a                	sd	a0,8(sp)
    800116ec:	a009                	j	800116ee <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h6a09efacfb59499dE+0x16>
    }
    800116ee:	6522                	ld	a0,8(sp)
    800116f0:	60e2                	ld	ra,24(sp)
    800116f2:	6105                	addi	sp,sp,32
    800116f4:	8082                	ret

Disassembly of section .text._ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h6db8254bcc254a19E:

00000000800116f6 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h6db8254bcc254a19E>:
    fn deref_mut(&mut self) -> &mut Self::Target{
    800116f6:	1101                	addi	sp,sp,-32
    800116f8:	ec06                	sd	ra,24(sp)
    800116fa:	e82a                	sd	a0,16(sp)
            &mut *self.spinlock.data.get()
    800116fc:	6108                	ld	a0,0(a0)
    800116fe:	02050513          	addi	a0,a0,32
    80011702:	ffff4097          	auipc	ra,0xffff4
    80011706:	b20080e7          	jalr	-1248(ra) # 80005222 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h05438521b5304ed4E>
    8001170a:	e42a                	sd	a0,8(sp)
    8001170c:	a009                	j	8001170e <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h6db8254bcc254a19E+0x18>
    }
    8001170e:	6522                	ld	a0,8(sp)
    80011710:	60e2                	ld	ra,24(sp)
    80011712:	6105                	addi	sp,sp,32
    80011714:	8082                	ret

Disassembly of section .text._ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7113684d7590c345E:

0000000080011716 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7113684d7590c345E>:
    fn deref_mut(&mut self) -> &mut Self::Target{
    80011716:	1101                	addi	sp,sp,-32
    80011718:	ec06                	sd	ra,24(sp)
    8001171a:	e82a                	sd	a0,16(sp)
            &mut *self.spinlock.data.get()
    8001171c:	6108                	ld	a0,0(a0)
    8001171e:	02050513          	addi	a0,a0,32
    80011722:	ffff4097          	auipc	ra,0xffff4
    80011726:	b18080e7          	jalr	-1256(ra) # 8000523a <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h4b85f27290bf8d3bE>
    8001172a:	e42a                	sd	a0,8(sp)
    8001172c:	a009                	j	8001172e <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7113684d7590c345E+0x18>
    }
    8001172e:	6522                	ld	a0,8(sp)
    80011730:	60e2                	ld	ra,24(sp)
    80011732:	6105                	addi	sp,sp,32
    80011734:	8082                	ret

Disassembly of section .text._ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7fbd4bc7b8273f3cE:

0000000080011736 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7fbd4bc7b8273f3cE>:
    fn deref_mut(&mut self) -> &mut Self::Target{
    80011736:	1101                	addi	sp,sp,-32
    80011738:	ec06                	sd	ra,24(sp)
    8001173a:	e82a                	sd	a0,16(sp)
            &mut *self.spinlock.data.get()
    8001173c:	6108                	ld	a0,0(a0)
    8001173e:	02050513          	addi	a0,a0,32
    80011742:	ffff4097          	auipc	ra,0xffff4
    80011746:	b28080e7          	jalr	-1240(ra) # 8000526a <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17hbe9e1598ba1bbd42E>
    8001174a:	e42a                	sd	a0,8(sp)
    8001174c:	a009                	j	8001174e <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7fbd4bc7b8273f3cE+0x18>
    }
    8001174e:	6522                	ld	a0,8(sp)
    80011750:	60e2                	ld	ra,24(sp)
    80011752:	6105                	addi	sp,sp,32
    80011754:	8082                	ret

Disassembly of section .text._ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h8532990243dc594eE:

0000000080011756 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h8532990243dc594eE>:
    fn deref_mut(&mut self) -> &mut Self::Target{
    80011756:	1101                	addi	sp,sp,-32
    80011758:	ec06                	sd	ra,24(sp)
    8001175a:	e82a                	sd	a0,16(sp)
            &mut *self.spinlock.data.get()
    8001175c:	6108                	ld	a0,0(a0)
    8001175e:	02050513          	addi	a0,a0,32
    80011762:	00011097          	auipc	ra,0x11
    80011766:	94a080e7          	jalr	-1718(ra) # 800220ac <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17hcdc438fb74b7ecc8E>
    8001176a:	e42a                	sd	a0,8(sp)
    8001176c:	a009                	j	8001176e <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h8532990243dc594eE+0x18>
    }
    8001176e:	6522                	ld	a0,8(sp)
    80011770:	60e2                	ld	ra,24(sp)
    80011772:	6105                	addi	sp,sp,32
    80011774:	8082                	ret

Disassembly of section .text._ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h890cc5a86d09cfeeE:

0000000080011776 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h890cc5a86d09cfeeE>:
    fn deref_mut(&mut self) -> &mut Self::Target{
    80011776:	1101                	addi	sp,sp,-32
    80011778:	ec06                	sd	ra,24(sp)
    8001177a:	e82a                	sd	a0,16(sp)
            &mut *self.spinlock.data.get()
    8001177c:	6108                	ld	a0,0(a0)
    8001177e:	02050513          	addi	a0,a0,32
    80011782:	ffff4097          	auipc	ra,0xffff4
    80011786:	af8080e7          	jalr	-1288(ra) # 8000527a <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17hfcb6ad47be983bedE>
    8001178a:	e42a                	sd	a0,8(sp)
    8001178c:	a009                	j	8001178e <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h890cc5a86d09cfeeE+0x18>
    }
    8001178e:	6522                	ld	a0,8(sp)
    80011790:	60e2                	ld	ra,24(sp)
    80011792:	6105                	addi	sp,sp,32
    80011794:	8082                	ret

Disassembly of section .text._ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hce69ac52326dbcadE:

0000000080011796 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hce69ac52326dbcadE>:
    fn deref_mut(&mut self) -> &mut Self::Target{
    80011796:	1101                	addi	sp,sp,-32
    80011798:	ec06                	sd	ra,24(sp)
    8001179a:	e82a                	sd	a0,16(sp)
            &mut *self.spinlock.data.get()
    8001179c:	6108                	ld	a0,0(a0)
    8001179e:	02050513          	addi	a0,a0,32
    800117a2:	ffff4097          	auipc	ra,0xffff4
    800117a6:	ab0080e7          	jalr	-1360(ra) # 80005252 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h85f42af92512c053E>
    800117aa:	e42a                	sd	a0,8(sp)
    800117ac:	a009                	j	800117ae <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hce69ac52326dbcadE+0x18>
    }
    800117ae:	6522                	ld	a0,8(sp)
    800117b0:	60e2                	ld	ra,24(sp)
    800117b2:	6105                	addi	sp,sp,32
    800117b4:	8082                	ret

Disassembly of section .text._ZN4core5slice5index77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h6397a28cd31ac6bcE:

00000000800117b6 <_ZN4core5slice5index77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h6397a28cd31ac6bcE>:
    fn index_mut(&mut self, index: I) -> &mut I::Output {
    800117b6:	7179                	addi	sp,sp,-48
    800117b8:	f406                	sd	ra,40(sp)
    800117ba:	e82a                	sd	a0,16(sp)
    800117bc:	ec2e                	sd	a1,24(sp)
        index.index_mut(self)
    800117be:	ffffa097          	auipc	ra,0xffffa
    800117c2:	29e080e7          	jalr	670(ra) # 8000ba5c <_ZN97_$LT$core..ops..range..RangeFull$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hf4f8ccbc08517323E>
    800117c6:	e02a                	sd	a0,0(sp)
    800117c8:	e42e                	sd	a1,8(sp)
    800117ca:	a009                	j	800117cc <_ZN4core5slice5index77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h6397a28cd31ac6bcE+0x16>
    }
    800117cc:	65a2                	ld	a1,8(sp)
    800117ce:	6502                	ld	a0,0(sp)
    800117d0:	70a2                	ld	ra,40(sp)
    800117d2:	6145                	addi	sp,sp,48
    800117d4:	8082                	ret

Disassembly of section .text._ZN4core5slice5index77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hb4c5f14cfefb7eb2E:

00000000800117d6 <_ZN4core5slice5index77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hb4c5f14cfefb7eb2E>:
    fn index_mut(&mut self, index: I) -> &mut I::Output {
    800117d6:	7139                	addi	sp,sp,-64
    800117d8:	fc06                	sd	ra,56(sp)
    800117da:	e432                	sd	a2,8(sp)
    800117dc:	862e                	mv	a2,a1
    800117de:	85aa                	mv	a1,a0
    800117e0:	6522                	ld	a0,8(sp)
    800117e2:	f02e                	sd	a1,32(sp)
    800117e4:	f432                	sd	a2,40(sp)
    800117e6:	f82a                	sd	a0,48(sp)
        index.index_mut(self)
    800117e8:	ffffa097          	auipc	ra,0xffffa
    800117ec:	e06080e7          	jalr	-506(ra) # 8000b5ee <_ZN108_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h6e1483f88545dbc6E>
    800117f0:	e82a                	sd	a0,16(sp)
    800117f2:	ec2e                	sd	a1,24(sp)
    800117f4:	a009                	j	800117f6 <_ZN4core5slice5index77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hb4c5f14cfefb7eb2E+0x20>
    }
    800117f6:	65e2                	ld	a1,24(sp)
    800117f8:	6542                	ld	a0,16(sp)
    800117fa:	70e2                	ld	ra,56(sp)
    800117fc:	6121                	addi	sp,sp,64
    800117fe:	8082                	ret

Disassembly of section .text._ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1a7368dde5044597E:

0000000080011800 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1a7368dde5044597E>:
    80011800:	1101                	addi	sp,sp,-32
    80011802:	ec06                	sd	ra,24(sp)
    80011804:	e42a                	sd	a0,8(sp)
    80011806:	e82e                	sd	a1,16(sp)
    80011808:	6108                	ld	a0,0(a0)
    8001180a:	ffff6097          	auipc	ra,0xffff6
    8001180e:	6a2080e7          	jalr	1698(ra) # 80007eac <_ZN85_$LT$kernel..arch..riscv..register..scause..Interrupt$u20$as$u20$core..fmt..Debug$GT$3fmt17h96992b3c4ed41ad9E>
    80011812:	e02a                	sd	a0,0(sp)
    80011814:	a009                	j	80011816 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1a7368dde5044597E+0x16>
    80011816:	6502                	ld	a0,0(sp)
    80011818:	60e2                	ld	ra,24(sp)
    8001181a:	6105                	addi	sp,sp,32
    8001181c:	8082                	ret

Disassembly of section .text._ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h436ba031ceeed146E:

000000008001181e <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h436ba031ceeed146E>:
    8001181e:	1101                	addi	sp,sp,-32
    80011820:	ec06                	sd	ra,24(sp)
    80011822:	e42a                	sd	a0,8(sp)
    80011824:	e82e                	sd	a1,16(sp)
    80011826:	6108                	ld	a0,0(a0)
    80011828:	ffff6097          	auipc	ra,0xffff6
    8001182c:	7da080e7          	jalr	2010(ra) # 80008002 <_ZN85_$LT$kernel..arch..riscv..register..scause..Exception$u20$as$u20$core..fmt..Debug$GT$3fmt17h4deffc5a3158ed01E>
    80011830:	e02a                	sd	a0,0(sp)
    80011832:	a009                	j	80011834 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h436ba031ceeed146E+0x16>
    80011834:	6502                	ld	a0,0(sp)
    80011836:	60e2                	ld	ra,24(sp)
    80011838:	6105                	addi	sp,sp,32
    8001183a:	8082                	ret

Disassembly of section .text._ZN89_$LT$kernel..memory..address..VirtualAddress$u20$as$u20$kernel..memory..address..Addr$GT$8as_usize17h7916c21610008a66E:

000000008001183c <_ZN89_$LT$kernel..memory..address..VirtualAddress$u20$as$u20$kernel..memory..address..Addr$GT$8as_usize17h7916c21610008a66E>:
    }
}

impl Addr for VirtualAddress{
    #[inline]
    fn as_usize(&self) -> usize{
    8001183c:	1141                	addi	sp,sp,-16
    8001183e:	e42a                	sd	a0,8(sp)
        self.0
    80011840:	6108                	ld	a0,0(a0)
    }
    80011842:	0141                	addi	sp,sp,16
    80011844:	8082                	ret

Disassembly of section .text._ZN89_$LT$kernel..memory..address..VirtualAddress$u20$as$u20$kernel..memory..address..Addr$GT$8data_mut17h88794159bc97d31bE:

0000000080011846 <_ZN89_$LT$kernel..memory..address..VirtualAddress$u20$as$u20$kernel..memory..address..Addr$GT$8data_mut17h88794159bc97d31bE>:
    fn data_ref(&self) -> &usize{
        &self.0
    }

    #[inline]
    fn data_mut(&mut self) -> &mut usize{
    80011846:	1141                	addi	sp,sp,-16
    80011848:	e42a                	sd	a0,8(sp)
        &mut self.0
    }
    8001184a:	0141                	addi	sp,sp,16
    8001184c:	8082                	ret

Disassembly of section .text._ZN90_$LT$kernel..memory..address..PhysicalAddress$u20$as$u20$kernel..memory..address..Addr$GT$8as_usize17hea2eecdb80a1a2b2E:

000000008001184e <_ZN90_$LT$kernel..memory..address..PhysicalAddress$u20$as$u20$kernel..memory..address..Addr$GT$8as_usize17hea2eecdb80a1a2b2E>:

impl Addr for PhysicalAddress{


    #[inline]
    fn as_usize(&self) -> usize{
    8001184e:	1141                	addi	sp,sp,-16
    80011850:	e42a                	sd	a0,8(sp)
        self.0
    80011852:	6108                	ld	a0,0(a0)
    }
    80011854:	0141                	addi	sp,sp,16
    80011856:	8082                	ret

Disassembly of section .text._ZN90_$LT$kernel..memory..address..PhysicalAddress$u20$as$u20$kernel..memory..address..Addr$GT$8data_mut17h98a368b1f7383ca3E:

0000000080011858 <_ZN90_$LT$kernel..memory..address..PhysicalAddress$u20$as$u20$kernel..memory..address..Addr$GT$8data_mut17h98a368b1f7383ca3E>:
    fn data_ref(&self) -> &usize{
        &self.0
    }

    #[inline]
    fn data_mut(&mut self) -> &mut usize{
    80011858:	1141                	addi	sp,sp,-16
    8001185a:	e42a                	sd	a0,8(sp)
        &mut self.0
    }
    8001185c:	0141                	addi	sp,sp,16
    8001185e:	8082                	ret

Disassembly of section .text._ZN6kernel6memory7address14VirtualAddress3new17h716be423461f1938E:

0000000080011860 <_ZN6kernel6memory7address14VirtualAddress3new17h716be423461f1938E>:

}

impl VirtualAddress{
    pub fn new(addr: usize) -> Self{
    80011860:	1141                	addi	sp,sp,-16
    80011862:	e42a                	sd	a0,8(sp)
        Self(addr)
    80011864:	e02a                	sd	a0,0(sp)
    }
    80011866:	0141                	addi	sp,sp,16
    80011868:	8082                	ret

Disassembly of section .text._ZN6kernel6memory7address14VirtualAddress8page_num17h81ae42a65c302f7eE:

000000008001186a <_ZN6kernel6memory7address14VirtualAddress8page_num17h81ae42a65c302f7eE>:
    pub fn add_addr(&self, addr:usize) -> Self{
        Self(self.0+addr)
    }


    pub fn page_num(&self, level: usize) -> usize{
    8001186a:	7179                	addi	sp,sp,-48
    8001186c:	f02a                	sd	a0,32(sp)
    8001186e:	f42e                	sd	a1,40(sp)
        (self.0 >> (PGSHIFT + level * PGMASKLEN)) & PGMASK
    80011870:	6108                	ld	a0,0(a0)
    80011872:	e82a                	sd	a0,16(sp)
    80011874:	00359513          	slli	a0,a1,0x3
    80011878:	952e                	add	a0,a0,a1
    8001187a:	ec2a                	sd	a0,24(sp)
    8001187c:	4525                	li	a0,9
    8001187e:	02a5b533          	mulhu	a0,a1,a0
    80011882:	4581                	li	a1,0
    80011884:	02b51a63          	bne	a0,a1,800118b8 <.LBB5_7>
    80011888:	a009                	j	8001188a <_ZN6kernel6memory7address14VirtualAddress8page_num17h81ae42a65c302f7eE+0x20>
    8001188a:	65e2                	ld	a1,24(sp)
    8001188c:	00c58513          	addi	a0,a1,12 # 100c <.Lline_table_start0+0x317>
    80011890:	e42a                	sd	a0,8(sp)
    80011892:	04b56263          	bltu	a0,a1,800118d6 <.LBB5_9>
    80011896:	a009                	j	80011898 <_ZN6kernel6memory7address14VirtualAddress8page_num17h81ae42a65c302f7eE+0x2e>
    80011898:	65c2                	ld	a1,16(sp)
    8001189a:	6622                	ld	a2,8(sp)
    8001189c:	fc067513          	andi	a0,a2,-64
    800118a0:	00c5d5b3          	srl	a1,a1,a2
    800118a4:	e02e                	sd	a1,0(sp)
    800118a6:	4581                	li	a1,0
    800118a8:	04b51563          	bne	a0,a1,800118f2 <.LBB5_11>
    800118ac:	a009                	j	800118ae <_ZN6kernel6memory7address14VirtualAddress8page_num17h81ae42a65c302f7eE+0x44>
    800118ae:	6502                	ld	a0,0(sp)
    800118b0:	1ff57513          	andi	a0,a0,511
    }
    800118b4:	6145                	addi	sp,sp,48
    800118b6:	8082                	ret

00000000800118b8 <.LBB5_7>:
        (self.0 >> (PGSHIFT + level * PGMASKLEN)) & PGMASK
    800118b8:	00017517          	auipc	a0,0x17
    800118bc:	08850513          	addi	a0,a0,136 # 80028940 <str.0>

00000000800118c0 <.LBB5_8>:
    800118c0:	00017617          	auipc	a2,0x17
    800118c4:	06860613          	addi	a2,a2,104 # 80028928 <.L__unnamed_1>
    800118c8:	02100593          	li	a1,33
    800118cc:	00011097          	auipc	ra,0x11
    800118d0:	9aa080e7          	jalr	-1622(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

00000000800118d6 <.LBB5_9>:
    800118d6:	00017517          	auipc	a0,0x17
    800118da:	0aa50513          	addi	a0,a0,170 # 80028980 <str.1>

00000000800118de <.LBB5_10>:
    800118de:	00017617          	auipc	a2,0x17
    800118e2:	08a60613          	addi	a2,a2,138 # 80028968 <.L__unnamed_2>
    800118e6:	45f1                	li	a1,28
    800118e8:	00011097          	auipc	ra,0x11
    800118ec:	98e080e7          	jalr	-1650(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

00000000800118f2 <.LBB5_11>:
    800118f2:	00017517          	auipc	a0,0x17
    800118f6:	0ce50513          	addi	a0,a0,206 # 800289c0 <str.2>

00000000800118fa <.LBB5_12>:
    800118fa:	00017617          	auipc	a2,0x17
    800118fe:	0a660613          	addi	a2,a2,166 # 800289a0 <.L__unnamed_3>
    80011902:	02400593          	li	a1,36
    80011906:	00011097          	auipc	ra,0x11
    8001190a:	970080e7          	jalr	-1680(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel6memory7address15PhysicalAddress3new17hf2b76f8479ac6235E:

0000000080011910 <_ZN6kernel6memory7address15PhysicalAddress3new17hf2b76f8479ac6235E>:

}

impl PhysicalAddress{
    pub fn new(value:usize) -> Self{
    80011910:	1141                	addi	sp,sp,-16
    80011912:	e42a                	sd	a0,8(sp)
        Self(value)
    80011914:	e02a                	sd	a0,0(sp)
    }
    80011916:	0141                	addi	sp,sp,16
    80011918:	8082                	ret

Disassembly of section .text._ZN80_$LT$kernel..memory..address..VirtualAddress$u20$as$u20$core..cmp..PartialEq$GT$2ne17h594c009ca6e35357E:

000000008001191a <_ZN80_$LT$kernel..memory..address..VirtualAddress$u20$as$u20$core..cmp..PartialEq$GT$2ne17h594c009ca6e35357E>:
#[derive(Debug, Copy, Clone, PartialEq)]
    8001191a:	1101                	addi	sp,sp,-32
    8001191c:	e02a                	sd	a0,0(sp)
    8001191e:	e42e                	sd	a1,8(sp)
pub struct VirtualAddress(pub usize);
    80011920:	e82e                	sd	a1,16(sp)
    80011922:	ec2a                	sd	a0,24(sp)
    80011924:	6108                	ld	a0,0(a0)
    80011926:	618c                	ld	a1,0(a1)
    80011928:	8d2d                	xor	a0,a0,a1
    8001192a:	00a03533          	snez	a0,a0
#[derive(Debug, Copy, Clone, PartialEq)]
    8001192e:	6105                	addi	sp,sp,32
    80011930:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h38f66f125a87c1b1E:

0000000080011932 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h38f66f125a87c1b1E>:
    pub const unsafe fn add(self, count: usize) -> Self
    80011932:	1101                	addi	sp,sp,-32
    80011934:	ec06                	sd	ra,24(sp)
    80011936:	e42a                	sd	a0,8(sp)
    80011938:	e82e                	sd	a1,16(sp)
        unsafe { self.offset(count as isize) }
    8001193a:	00000097          	auipc	ra,0x0
    8001193e:	014080e7          	jalr	20(ra) # 8001194e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hc564f45fb449f47eE>
    80011942:	e02a                	sd	a0,0(sp)
    80011944:	a009                	j	80011946 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h38f66f125a87c1b1E+0x14>
    }
    80011946:	6502                	ld	a0,0(sp)
    80011948:	60e2                	ld	ra,24(sp)
    8001194a:	6105                	addi	sp,sp,32
    8001194c:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hc564f45fb449f47eE:

000000008001194e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hc564f45fb449f47eE>:
    pub const unsafe fn offset(self, count: isize) -> *mut T
    8001194e:	1101                	addi	sp,sp,-32
    80011950:	e42a                	sd	a0,8(sp)
    80011952:	e82e                	sd	a1,16(sp)
    80011954:	41000613          	li	a2,1040
        unsafe { intrinsics::offset(self, count) as *mut T }
    80011958:	02c585b3          	mul	a1,a1,a2
    8001195c:	952e                	add	a0,a0,a1
    8001195e:	e02a                	sd	a0,0(sp)
    80011960:	ec2a                	sd	a0,24(sp)
    80011962:	a009                	j	80011964 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hc564f45fb449f47eE+0x16>
    }
    80011964:	6502                	ld	a0,0(sp)
    80011966:	6105                	addi	sp,sp,32
    80011968:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17he6d08a4a98c1735bE:

000000008001196a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17he6d08a4a98c1735bE>:
    pub const fn is_null(self) -> bool {
    8001196a:	1101                	addi	sp,sp,-32
    8001196c:	ec06                	sd	ra,24(sp)
    8001196e:	e82a                	sd	a0,16(sp)
        (self as *mut u8).guaranteed_eq(null_mut())
    80011970:	e42a                	sd	a0,8(sp)
    80011972:	a009                	j	80011974 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17he6d08a4a98c1735bE+0xa>
    80011974:	6522                	ld	a0,8(sp)
    80011976:	4581                	li	a1,0
    80011978:	00010097          	auipc	ra,0x10
    8001197c:	6c4080e7          	jalr	1732(ra) # 8002203c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$13guaranteed_eq17h32ea8c99c0b8220dE>
    80011980:	e02a                	sd	a0,0(sp)
    80011982:	a009                	j	80011984 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17he6d08a4a98c1735bE+0x1a>
    }
    80011984:	6502                	ld	a0,0(sp)
    80011986:	60e2                	ld	ra,24(sp)
    80011988:	6105                	addi	sp,sp,32
    8001198a:	8082                	ret

Disassembly of section .text._ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h82f80b86300e876eE:

000000008001198c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h82f80b86300e876eE>:
    pub const unsafe fn add(self, count: usize) -> Self
    8001198c:	1101                	addi	sp,sp,-32
    8001198e:	ec06                	sd	ra,24(sp)
    80011990:	e42a                	sd	a0,8(sp)
    80011992:	e82e                	sd	a1,16(sp)
        unsafe { self.offset(count as isize) }
    80011994:	00000097          	auipc	ra,0x0
    80011998:	014080e7          	jalr	20(ra) # 800119a8 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h5bca7b442f3da6edE>
    8001199c:	e02a                	sd	a0,0(sp)
    8001199e:	a009                	j	800119a0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h82f80b86300e876eE+0x14>
    }
    800119a0:	6502                	ld	a0,0(sp)
    800119a2:	60e2                	ld	ra,24(sp)
    800119a4:	6105                	addi	sp,sp,32
    800119a6:	8082                	ret

Disassembly of section .text._ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h5bca7b442f3da6edE:

00000000800119a8 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h5bca7b442f3da6edE>:
    pub const unsafe fn offset(self, count: isize) -> *const T
    800119a8:	1101                	addi	sp,sp,-32
    800119aa:	e42a                	sd	a0,8(sp)
    800119ac:	e82e                	sd	a1,16(sp)
    800119ae:	41000613          	li	a2,1040
        unsafe { intrinsics::offset(self, count) }
    800119b2:	02c585b3          	mul	a1,a1,a2
    800119b6:	952e                	add	a0,a0,a1
    800119b8:	e02a                	sd	a0,0(sp)
    800119ba:	ec2a                	sd	a0,24(sp)
    800119bc:	a009                	j	800119be <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h5bca7b442f3da6edE+0x16>
    }
    800119be:	6502                	ld	a0,0(sp)
    800119c0:	6105                	addi	sp,sp,32
    800119c2:	8082                	ret

Disassembly of section .text._ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17ha3fd0a02496fedc6E:

00000000800119c4 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17ha3fd0a02496fedc6E>:
    pub const fn is_null(self) -> bool {
    800119c4:	1101                	addi	sp,sp,-32
    800119c6:	ec06                	sd	ra,24(sp)
    800119c8:	e82a                	sd	a0,16(sp)
        (self as *const u8).guaranteed_eq(null())
    800119ca:	e42a                	sd	a0,8(sp)
    800119cc:	a009                	j	800119ce <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17ha3fd0a02496fedc6E+0xa>
    800119ce:	6522                	ld	a0,8(sp)
    800119d0:	4581                	li	a1,0
    800119d2:	00010097          	auipc	ra,0x10
    800119d6:	684080e7          	jalr	1668(ra) # 80022056 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$13guaranteed_eq17h0ce622e77376dc6cE>
    800119da:	e02a                	sd	a0,0(sp)
    800119dc:	a009                	j	800119de <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17ha3fd0a02496fedc6E+0x1a>
    }
    800119de:	6502                	ld	a0,0(sp)
    800119e0:	60e2                	ld	ra,24(sp)
    800119e2:	6105                	addi	sp,sp,32
    800119e4:	8082                	ret

Disassembly of section .text._ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb07c6377ef535791E:

00000000800119e6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb07c6377ef535791E>:
    pub const fn as_mut_ptr(&mut self) -> *mut T {
    800119e6:	1141                	addi	sp,sp,-16
    800119e8:	e02a                	sd	a0,0(sp)
    800119ea:	e42e                	sd	a1,8(sp)
    }
    800119ec:	0141                	addi	sp,sp,16
    800119ee:	8082                	ret

Disassembly of section .text._ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf08bc165152fefe5E:

00000000800119f0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf08bc165152fefe5E>:
    pub const fn len(&self) -> usize {
    800119f0:	7179                	addi	sp,sp,-48
    800119f2:	e42e                	sd	a1,8(sp)
    800119f4:	85aa                	mv	a1,a0
    800119f6:	6522                	ld	a0,8(sp)
    800119f8:	f02e                	sd	a1,32(sp)
    800119fa:	f42a                	sd	a0,40(sp)
            unsafe { crate::ptr::PtrRepr { const_ptr: self }.components.metadata }
    800119fc:	e82e                	sd	a1,16(sp)
    800119fe:	ec2a                	sd	a0,24(sp)
    }
    80011a00:	6145                	addi	sp,sp,48
    80011a02:	8082                	ret

Disassembly of section .text._ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17hf352d95d7dd299d1E:

0000000080011a04 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17hf352d95d7dd299d1E>:
    pub fn iter(&self) -> Iter<'_, T> {
    80011a04:	7179                	addi	sp,sp,-48
    80011a06:	f406                	sd	ra,40(sp)
    80011a08:	ec2a                	sd	a0,24(sp)
    80011a0a:	f02e                	sd	a1,32(sp)
        Iter::new(self)
    80011a0c:	ffff9097          	auipc	ra,0xffff9
    80011a10:	26a080e7          	jalr	618(ra) # 8000ac76 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h255496547b3a0f33E>
    80011a14:	e42a                	sd	a0,8(sp)
    80011a16:	e82e                	sd	a1,16(sp)
    80011a18:	a009                	j	80011a1a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17hf352d95d7dd299d1E+0x16>
    }
    80011a1a:	65c2                	ld	a1,16(sp)
    80011a1c:	6522                	ld	a0,8(sp)
    80011a1e:	70a2                	ld	ra,40(sp)
    80011a20:	6145                	addi	sp,sp,48
    80011a22:	8082                	ret

Disassembly of section .text._ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h435aa5d084fb4c37E:

0000000080011a24 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h435aa5d084fb4c37E>:
    pub const fn as_ptr(&self) -> *const T {
    80011a24:	1141                	addi	sp,sp,-16
    80011a26:	e02a                	sd	a0,0(sp)
    80011a28:	e42e                	sd	a1,8(sp)
    }
    80011a2a:	0141                	addi	sp,sp,16
    80011a2c:	8082                	ret

Disassembly of section .text._ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h5a59168d2366923eE:

0000000080011a2e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h5a59168d2366923eE>:
    pub fn iter_mut(&mut self) -> IterMut<'_, T> {
    80011a2e:	7179                	addi	sp,sp,-48
    80011a30:	f406                	sd	ra,40(sp)
    80011a32:	ec2a                	sd	a0,24(sp)
    80011a34:	f02e                	sd	a1,32(sp)
        IterMut::new(self)
    80011a36:	ffff9097          	auipc	ra,0xffff9
    80011a3a:	5a0080e7          	jalr	1440(ra) # 8000afd6 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17hbe8b57feddcb3b2cE>
    80011a3e:	e42a                	sd	a0,8(sp)
    80011a40:	e82e                	sd	a1,16(sp)
    80011a42:	a009                	j	80011a44 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h5a59168d2366923eE+0x16>
    }
    80011a44:	65c2                	ld	a1,16(sp)
    80011a46:	6522                	ld	a0,8(sp)
    80011a48:	70a2                	ld	ra,40(sp)
    80011a4a:	6145                	addi	sp,sp,48
    80011a4c:	8082                	ret

Disassembly of section .text._ZN6kernel7process7process11task_struct5sleep17h3865ab03b1bff75fE:

0000000080011a4e <_ZN6kernel7process7process11task_struct5sleep17h3865ab03b1bff75fE>:
        drop(guard);
    }

    /// Atomically release lock and sleep on chan
    /// Reacquires lock when awakened.
    pub fn sleep<T>(&mut self, channel: usize, lock: SpinlockGuard<'_, T>) {
    80011a4e:	711d                	addi	sp,sp,-96
    80011a50:	ec86                	sd	ra,88(sp)
    80011a52:	e432                	sd	a2,8(sp)
    80011a54:	e82e                	sd	a1,16(sp)
    80011a56:	ec2a                	sd	a0,24(sp)
    80011a58:	f82a                	sd	a0,48(sp)
    80011a5a:	fc2e                	sd	a1,56(sp)
    80011a5c:	e0b2                	sd	a2,64(sp)
    80011a5e:	6541                	lui	a0,0x10
    80011a60:	4085059b          	addiw	a1,a0,1032

0000000080011a64 <.LBB11_6>:
    80011a64:	00046517          	auipc	a0,0x46
    80011a68:	b3c50513          	addi	a0,a0,-1220 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    80011a6c:	952e                	add	a0,a0,a1
        //     // Tide up
        //     guard.channel = 0;
        //     drop(guard);
        // }
        
        let tasks_guard = unsafe { PROC_MANAGER.tasks_lock.acquire() };
    80011a6e:	fffff097          	auipc	ra,0xfffff
    80011a72:	da0080e7          	jalr	-608(ra) # 8001080e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    80011a76:	85aa                	mv	a1,a0
    80011a78:	f02e                	sd	a1,32(sp)
    80011a7a:	e4aa                	sd	a0,72(sp)
    80011a7c:	a009                	j	80011a7e <.LBB11_6+0x1a>
        drop(lock);
    80011a7e:	6522                	ld	a0,8(sp)
    80011a80:	0000b097          	auipc	ra,0xb
    80011a84:	5a0080e7          	jalr	1440(ra) # 8001d020 <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    80011a88:	a009                	j	80011a8a <.LBB11_6+0x26>

        self.channel = channel;
    80011a8a:	65e2                	ld	a1,24(sp)
    80011a8c:	6542                	ld	a0,16(sp)
    80011a8e:	3ea5b023          	sd	a0,992(a1)
    80011a92:	4509                	li	a0,2
        self.state = ProcState::SLEEPING;
    80011a94:	02a107a3          	sb	a0,47(sp)
    80011a98:	40a58423          	sb	a0,1032(a1)

0000000080011a9c <.LBB11_7>:

        unsafe {
            let mycpu = CPU_MANAGER.mycpu();
    80011a9c:	00061517          	auipc	a0,0x61
    80011aa0:	6a450513          	addi	a0,a0,1700 # 80073140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    80011aa4:	00000097          	auipc	ra,0x0
    80011aa8:	30e080e7          	jalr	782(ra) # 80011db2 <_ZN6kernel7process3cpu10CPUManager5mycpu17hac5ae6ce2070e7c3E>
    80011aac:	85aa                	mv	a1,a0
    80011aae:	e02e                	sd	a1,0(sp)
    80011ab0:	e8aa                	sd	a0,80(sp)
    80011ab2:	a009                	j	80011ab4 <.LBB11_7+0x18>
            // let cur_ctx = (&mut self.context);

            mycpu.sched();
    80011ab4:	6502                	ld	a0,0(sp)
    80011ab6:	00000097          	auipc	ra,0x0
    80011aba:	56e080e7          	jalr	1390(ra) # 80012024 <_ZN6kernel7process3cpu3CPU5sched17h6aec64bf33990cbcE>
    80011abe:	a009                	j	80011ac0 <.LBB11_7+0x24>
    80011ac0:	7502                	ld	a0,32(sp)
    80011ac2:	6662                	ld	a2,24(sp)
    80011ac4:	4581                	li	a1,0
        }
        
        self.channel = 0;
    80011ac6:	3eb63023          	sd	a1,992(a2)

        drop(tasks_guard);
    80011aca:	0000b097          	auipc	ra,0xb
    80011ace:	556080e7          	jalr	1366(ra) # 8001d020 <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    80011ad2:	a009                	j	80011ad4 <.LBB11_7+0x38>
        
    }
    80011ad4:	60e6                	ld	ra,88(sp)
    80011ad6:	6125                	addi	sp,sp,96
    80011ad8:	8082                	ret

Disassembly of section .text._ZN6kernel7process7process11task_struct5sleep17h3e20b1d3f8d47a0dE:

0000000080011ada <_ZN6kernel7process7process11task_struct5sleep17h3e20b1d3f8d47a0dE>:
    pub fn sleep<T>(&mut self, channel: usize, lock: SpinlockGuard<'_, T>) {
    80011ada:	711d                	addi	sp,sp,-96
    80011adc:	ec86                	sd	ra,88(sp)
    80011ade:	e432                	sd	a2,8(sp)
    80011ae0:	e82e                	sd	a1,16(sp)
    80011ae2:	ec2a                	sd	a0,24(sp)
    80011ae4:	f82a                	sd	a0,48(sp)
    80011ae6:	fc2e                	sd	a1,56(sp)
    80011ae8:	e0b2                	sd	a2,64(sp)
    80011aea:	6541                	lui	a0,0x10
    80011aec:	4085059b          	addiw	a1,a0,1032

0000000080011af0 <.LBB12_6>:
    80011af0:	00046517          	auipc	a0,0x46
    80011af4:	ab050513          	addi	a0,a0,-1360 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    80011af8:	952e                	add	a0,a0,a1
        let tasks_guard = unsafe { PROC_MANAGER.tasks_lock.acquire() };
    80011afa:	fffff097          	auipc	ra,0xfffff
    80011afe:	d14080e7          	jalr	-748(ra) # 8001080e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    80011b02:	85aa                	mv	a1,a0
    80011b04:	f02e                	sd	a1,32(sp)
    80011b06:	e4aa                	sd	a0,72(sp)
    80011b08:	a009                	j	80011b0a <.LBB12_6+0x1a>
        drop(lock);
    80011b0a:	6522                	ld	a0,8(sp)
    80011b0c:	0000b097          	auipc	ra,0xb
    80011b10:	66c080e7          	jalr	1644(ra) # 8001d178 <_ZN4core3mem4drop17hf5d8d4b62719f1bfE>
    80011b14:	a009                	j	80011b16 <.LBB12_6+0x26>
        self.channel = channel;
    80011b16:	65e2                	ld	a1,24(sp)
    80011b18:	6542                	ld	a0,16(sp)
    80011b1a:	3ea5b023          	sd	a0,992(a1)
    80011b1e:	4509                	li	a0,2
        self.state = ProcState::SLEEPING;
    80011b20:	02a107a3          	sb	a0,47(sp)
    80011b24:	40a58423          	sb	a0,1032(a1)

0000000080011b28 <.LBB12_7>:
            let mycpu = CPU_MANAGER.mycpu();
    80011b28:	00061517          	auipc	a0,0x61
    80011b2c:	61850513          	addi	a0,a0,1560 # 80073140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    80011b30:	00000097          	auipc	ra,0x0
    80011b34:	282080e7          	jalr	642(ra) # 80011db2 <_ZN6kernel7process3cpu10CPUManager5mycpu17hac5ae6ce2070e7c3E>
    80011b38:	85aa                	mv	a1,a0
    80011b3a:	e02e                	sd	a1,0(sp)
    80011b3c:	e8aa                	sd	a0,80(sp)
    80011b3e:	a009                	j	80011b40 <.LBB12_7+0x18>
            mycpu.sched();
    80011b40:	6502                	ld	a0,0(sp)
    80011b42:	00000097          	auipc	ra,0x0
    80011b46:	4e2080e7          	jalr	1250(ra) # 80012024 <_ZN6kernel7process3cpu3CPU5sched17h6aec64bf33990cbcE>
    80011b4a:	a009                	j	80011b4c <.LBB12_7+0x24>
    80011b4c:	7502                	ld	a0,32(sp)
    80011b4e:	6662                	ld	a2,24(sp)
    80011b50:	4581                	li	a1,0
        self.channel = 0;
    80011b52:	3eb63023          	sd	a1,992(a2)
        drop(tasks_guard);
    80011b56:	0000b097          	auipc	ra,0xb
    80011b5a:	4ca080e7          	jalr	1226(ra) # 8001d020 <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    80011b5e:	a009                	j	80011b60 <.LBB12_7+0x38>
    }
    80011b60:	60e6                	ld	ra,88(sp)
    80011b62:	6125                	addi	sp,sp,96
    80011b64:	8082                	ret

Disassembly of section .text._ZN6kernel7process7process11task_struct5sleep17h6b6884b4a9cdc973E:

0000000080011b66 <_ZN6kernel7process7process11task_struct5sleep17h6b6884b4a9cdc973E>:
    pub fn sleep<T>(&mut self, channel: usize, lock: SpinlockGuard<'_, T>) {
    80011b66:	711d                	addi	sp,sp,-96
    80011b68:	ec86                	sd	ra,88(sp)
    80011b6a:	e432                	sd	a2,8(sp)
    80011b6c:	e82e                	sd	a1,16(sp)
    80011b6e:	ec2a                	sd	a0,24(sp)
    80011b70:	f82a                	sd	a0,48(sp)
    80011b72:	fc2e                	sd	a1,56(sp)
    80011b74:	e0b2                	sd	a2,64(sp)
    80011b76:	6541                	lui	a0,0x10
    80011b78:	4085059b          	addiw	a1,a0,1032

0000000080011b7c <.LBB13_6>:
    80011b7c:	00046517          	auipc	a0,0x46
    80011b80:	a2450513          	addi	a0,a0,-1500 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    80011b84:	952e                	add	a0,a0,a1
        let tasks_guard = unsafe { PROC_MANAGER.tasks_lock.acquire() };
    80011b86:	fffff097          	auipc	ra,0xfffff
    80011b8a:	c88080e7          	jalr	-888(ra) # 8001080e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    80011b8e:	85aa                	mv	a1,a0
    80011b90:	f02e                	sd	a1,32(sp)
    80011b92:	e4aa                	sd	a0,72(sp)
    80011b94:	a009                	j	80011b96 <.LBB13_6+0x1a>
        drop(lock);
    80011b96:	6522                	ld	a0,8(sp)
    80011b98:	0000b097          	auipc	ra,0xb
    80011b9c:	560080e7          	jalr	1376(ra) # 8001d0f8 <_ZN4core3mem4drop17ha170cc24affc2e7cE>
    80011ba0:	a009                	j	80011ba2 <.LBB13_6+0x26>
        self.channel = channel;
    80011ba2:	65e2                	ld	a1,24(sp)
    80011ba4:	6542                	ld	a0,16(sp)
    80011ba6:	3ea5b023          	sd	a0,992(a1)
    80011baa:	4509                	li	a0,2
        self.state = ProcState::SLEEPING;
    80011bac:	02a107a3          	sb	a0,47(sp)
    80011bb0:	40a58423          	sb	a0,1032(a1)

0000000080011bb4 <.LBB13_7>:
            let mycpu = CPU_MANAGER.mycpu();
    80011bb4:	00061517          	auipc	a0,0x61
    80011bb8:	58c50513          	addi	a0,a0,1420 # 80073140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    80011bbc:	00000097          	auipc	ra,0x0
    80011bc0:	1f6080e7          	jalr	502(ra) # 80011db2 <_ZN6kernel7process3cpu10CPUManager5mycpu17hac5ae6ce2070e7c3E>
    80011bc4:	85aa                	mv	a1,a0
    80011bc6:	e02e                	sd	a1,0(sp)
    80011bc8:	e8aa                	sd	a0,80(sp)
    80011bca:	a009                	j	80011bcc <.LBB13_7+0x18>
            mycpu.sched();
    80011bcc:	6502                	ld	a0,0(sp)
    80011bce:	00000097          	auipc	ra,0x0
    80011bd2:	456080e7          	jalr	1110(ra) # 80012024 <_ZN6kernel7process3cpu3CPU5sched17h6aec64bf33990cbcE>
    80011bd6:	a009                	j	80011bd8 <.LBB13_7+0x24>
    80011bd8:	7502                	ld	a0,32(sp)
    80011bda:	6662                	ld	a2,24(sp)
    80011bdc:	4581                	li	a1,0
        self.channel = 0;
    80011bde:	3eb63023          	sd	a1,992(a2)
        drop(tasks_guard);
    80011be2:	0000b097          	auipc	ra,0xb
    80011be6:	43e080e7          	jalr	1086(ra) # 8001d020 <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    80011bea:	a009                	j	80011bec <.LBB13_7+0x38>
    }
    80011bec:	60e6                	ld	ra,88(sp)
    80011bee:	6125                	addi	sp,sp,96
    80011bf0:	8082                	ret

Disassembly of section .text._ZN6kernel7process7process11task_struct5sleep17ha12ac4247dad146bE:

0000000080011bf2 <_ZN6kernel7process7process11task_struct5sleep17ha12ac4247dad146bE>:
    pub fn sleep<T>(&mut self, channel: usize, lock: SpinlockGuard<'_, T>) {
    80011bf2:	711d                	addi	sp,sp,-96
    80011bf4:	ec86                	sd	ra,88(sp)
    80011bf6:	e432                	sd	a2,8(sp)
    80011bf8:	e82e                	sd	a1,16(sp)
    80011bfa:	ec2a                	sd	a0,24(sp)
    80011bfc:	f82a                	sd	a0,48(sp)
    80011bfe:	fc2e                	sd	a1,56(sp)
    80011c00:	e0b2                	sd	a2,64(sp)
    80011c02:	6541                	lui	a0,0x10
    80011c04:	4085059b          	addiw	a1,a0,1032

0000000080011c08 <.LBB14_6>:
    80011c08:	00046517          	auipc	a0,0x46
    80011c0c:	99850513          	addi	a0,a0,-1640 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    80011c10:	952e                	add	a0,a0,a1
        let tasks_guard = unsafe { PROC_MANAGER.tasks_lock.acquire() };
    80011c12:	fffff097          	auipc	ra,0xfffff
    80011c16:	bfc080e7          	jalr	-1028(ra) # 8001080e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    80011c1a:	85aa                	mv	a1,a0
    80011c1c:	f02e                	sd	a1,32(sp)
    80011c1e:	e4aa                	sd	a0,72(sp)
    80011c20:	a009                	j	80011c22 <.LBB14_6+0x1a>
        drop(lock);
    80011c22:	6522                	ld	a0,8(sp)
    80011c24:	0000b097          	auipc	ra,0xb
    80011c28:	500080e7          	jalr	1280(ra) # 8001d124 <_ZN4core3mem4drop17haa2d2dc72bd2e81bE>
    80011c2c:	a009                	j	80011c2e <.LBB14_6+0x26>
        self.channel = channel;
    80011c2e:	65e2                	ld	a1,24(sp)
    80011c30:	6542                	ld	a0,16(sp)
    80011c32:	3ea5b023          	sd	a0,992(a1)
    80011c36:	4509                	li	a0,2
        self.state = ProcState::SLEEPING;
    80011c38:	02a107a3          	sb	a0,47(sp)
    80011c3c:	40a58423          	sb	a0,1032(a1)

0000000080011c40 <.LBB14_7>:
            let mycpu = CPU_MANAGER.mycpu();
    80011c40:	00061517          	auipc	a0,0x61
    80011c44:	50050513          	addi	a0,a0,1280 # 80073140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    80011c48:	00000097          	auipc	ra,0x0
    80011c4c:	16a080e7          	jalr	362(ra) # 80011db2 <_ZN6kernel7process3cpu10CPUManager5mycpu17hac5ae6ce2070e7c3E>
    80011c50:	85aa                	mv	a1,a0
    80011c52:	e02e                	sd	a1,0(sp)
    80011c54:	e8aa                	sd	a0,80(sp)
    80011c56:	a009                	j	80011c58 <.LBB14_7+0x18>
            mycpu.sched();
    80011c58:	6502                	ld	a0,0(sp)
    80011c5a:	00000097          	auipc	ra,0x0
    80011c5e:	3ca080e7          	jalr	970(ra) # 80012024 <_ZN6kernel7process3cpu3CPU5sched17h6aec64bf33990cbcE>
    80011c62:	a009                	j	80011c64 <.LBB14_7+0x24>
    80011c64:	7502                	ld	a0,32(sp)
    80011c66:	6662                	ld	a2,24(sp)
    80011c68:	4581                	li	a1,0
        self.channel = 0;
    80011c6a:	3eb63023          	sd	a1,992(a2)
        drop(tasks_guard);
    80011c6e:	0000b097          	auipc	ra,0xb
    80011c72:	3b2080e7          	jalr	946(ra) # 8001d020 <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    80011c76:	a009                	j	80011c78 <.LBB14_7+0x38>
    }
    80011c78:	60e6                	ld	ra,88(sp)
    80011c7a:	6125                	addi	sp,sp,96
    80011c7c:	8082                	ret

Disassembly of section .text._ZN6kernel7process7process11task_struct5sleep17ha46e5892ef284241E:

0000000080011c7e <_ZN6kernel7process7process11task_struct5sleep17ha46e5892ef284241E>:
    pub fn sleep<T>(&mut self, channel: usize, lock: SpinlockGuard<'_, T>) {
    80011c7e:	711d                	addi	sp,sp,-96
    80011c80:	ec86                	sd	ra,88(sp)
    80011c82:	e432                	sd	a2,8(sp)
    80011c84:	e82e                	sd	a1,16(sp)
    80011c86:	ec2a                	sd	a0,24(sp)
    80011c88:	f82a                	sd	a0,48(sp)
    80011c8a:	fc2e                	sd	a1,56(sp)
    80011c8c:	e0b2                	sd	a2,64(sp)
    80011c8e:	6541                	lui	a0,0x10
    80011c90:	4085059b          	addiw	a1,a0,1032

0000000080011c94 <.LBB15_6>:
    80011c94:	00046517          	auipc	a0,0x46
    80011c98:	90c50513          	addi	a0,a0,-1780 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    80011c9c:	952e                	add	a0,a0,a1
        let tasks_guard = unsafe { PROC_MANAGER.tasks_lock.acquire() };
    80011c9e:	fffff097          	auipc	ra,0xfffff
    80011ca2:	b70080e7          	jalr	-1168(ra) # 8001080e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    80011ca6:	85aa                	mv	a1,a0
    80011ca8:	f02e                	sd	a1,32(sp)
    80011caa:	e4aa                	sd	a0,72(sp)
    80011cac:	a009                	j	80011cae <.LBB15_6+0x1a>
        drop(lock);
    80011cae:	6522                	ld	a0,8(sp)
    80011cb0:	0000b097          	auipc	ra,0xb
    80011cb4:	430080e7          	jalr	1072(ra) # 8001d0e0 <_ZN4core3mem4drop17h96fc0e7c88170ba8E>
    80011cb8:	a009                	j	80011cba <.LBB15_6+0x26>
        self.channel = channel;
    80011cba:	65e2                	ld	a1,24(sp)
    80011cbc:	6542                	ld	a0,16(sp)
    80011cbe:	3ea5b023          	sd	a0,992(a1)
    80011cc2:	4509                	li	a0,2
        self.state = ProcState::SLEEPING;
    80011cc4:	02a107a3          	sb	a0,47(sp)
    80011cc8:	40a58423          	sb	a0,1032(a1)

0000000080011ccc <.LBB15_7>:
            let mycpu = CPU_MANAGER.mycpu();
    80011ccc:	00061517          	auipc	a0,0x61
    80011cd0:	47450513          	addi	a0,a0,1140 # 80073140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    80011cd4:	00000097          	auipc	ra,0x0
    80011cd8:	0de080e7          	jalr	222(ra) # 80011db2 <_ZN6kernel7process3cpu10CPUManager5mycpu17hac5ae6ce2070e7c3E>
    80011cdc:	85aa                	mv	a1,a0
    80011cde:	e02e                	sd	a1,0(sp)
    80011ce0:	e8aa                	sd	a0,80(sp)
    80011ce2:	a009                	j	80011ce4 <.LBB15_7+0x18>
            mycpu.sched();
    80011ce4:	6502                	ld	a0,0(sp)
    80011ce6:	00000097          	auipc	ra,0x0
    80011cea:	33e080e7          	jalr	830(ra) # 80012024 <_ZN6kernel7process3cpu3CPU5sched17h6aec64bf33990cbcE>
    80011cee:	a009                	j	80011cf0 <.LBB15_7+0x24>
    80011cf0:	7502                	ld	a0,32(sp)
    80011cf2:	6662                	ld	a2,24(sp)
    80011cf4:	4581                	li	a1,0
        self.channel = 0;
    80011cf6:	3eb63023          	sd	a1,992(a2)
        drop(tasks_guard);
    80011cfa:	0000b097          	auipc	ra,0xb
    80011cfe:	326080e7          	jalr	806(ra) # 8001d020 <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    80011d02:	a009                	j	80011d04 <.LBB15_7+0x38>
    }
    80011d04:	60e6                	ld	ra,88(sp)
    80011d06:	6125                	addi	sp,sp,96
    80011d08:	8082                	ret

Disassembly of section .text._ZN6kernel7process7process11task_struct5sleep17hcd4817f58ebdb572E:

0000000080011d0a <_ZN6kernel7process7process11task_struct5sleep17hcd4817f58ebdb572E>:
    pub fn sleep<T>(&mut self, channel: usize, lock: SpinlockGuard<'_, T>) {
    80011d0a:	711d                	addi	sp,sp,-96
    80011d0c:	ec86                	sd	ra,88(sp)
    80011d0e:	e432                	sd	a2,8(sp)
    80011d10:	e82e                	sd	a1,16(sp)
    80011d12:	ec2a                	sd	a0,24(sp)
    80011d14:	f82a                	sd	a0,48(sp)
    80011d16:	fc2e                	sd	a1,56(sp)
    80011d18:	e0b2                	sd	a2,64(sp)
    80011d1a:	6541                	lui	a0,0x10
    80011d1c:	4085059b          	addiw	a1,a0,1032

0000000080011d20 <.LBB16_6>:
    80011d20:	00046517          	auipc	a0,0x46
    80011d24:	88050513          	addi	a0,a0,-1920 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    80011d28:	952e                	add	a0,a0,a1
        let tasks_guard = unsafe { PROC_MANAGER.tasks_lock.acquire() };
    80011d2a:	fffff097          	auipc	ra,0xfffff
    80011d2e:	ae4080e7          	jalr	-1308(ra) # 8001080e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    80011d32:	85aa                	mv	a1,a0
    80011d34:	f02e                	sd	a1,32(sp)
    80011d36:	e4aa                	sd	a0,72(sp)
    80011d38:	a009                	j	80011d3a <.LBB16_6+0x1a>
        drop(lock);
    80011d3a:	6522                	ld	a0,8(sp)
    80011d3c:	0000b097          	auipc	ra,0xb
    80011d40:	314080e7          	jalr	788(ra) # 8001d050 <_ZN4core3mem4drop17h2ed300707c7d4096E>
    80011d44:	a009                	j	80011d46 <.LBB16_6+0x26>
        self.channel = channel;
    80011d46:	65e2                	ld	a1,24(sp)
    80011d48:	6542                	ld	a0,16(sp)
    80011d4a:	3ea5b023          	sd	a0,992(a1)
    80011d4e:	4509                	li	a0,2
        self.state = ProcState::SLEEPING;
    80011d50:	02a107a3          	sb	a0,47(sp)
    80011d54:	40a58423          	sb	a0,1032(a1)

0000000080011d58 <.LBB16_7>:
            let mycpu = CPU_MANAGER.mycpu();
    80011d58:	00061517          	auipc	a0,0x61
    80011d5c:	3e850513          	addi	a0,a0,1000 # 80073140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    80011d60:	00000097          	auipc	ra,0x0
    80011d64:	052080e7          	jalr	82(ra) # 80011db2 <_ZN6kernel7process3cpu10CPUManager5mycpu17hac5ae6ce2070e7c3E>
    80011d68:	85aa                	mv	a1,a0
    80011d6a:	e02e                	sd	a1,0(sp)
    80011d6c:	e8aa                	sd	a0,80(sp)
    80011d6e:	a009                	j	80011d70 <.LBB16_7+0x18>
            mycpu.sched();
    80011d70:	6502                	ld	a0,0(sp)
    80011d72:	00000097          	auipc	ra,0x0
    80011d76:	2b2080e7          	jalr	690(ra) # 80012024 <_ZN6kernel7process3cpu3CPU5sched17h6aec64bf33990cbcE>
    80011d7a:	a009                	j	80011d7c <.LBB16_7+0x24>
    80011d7c:	7502                	ld	a0,32(sp)
    80011d7e:	6662                	ld	a2,24(sp)
    80011d80:	4581                	li	a1,0
        self.channel = 0;
    80011d82:	3eb63023          	sd	a1,992(a2)
        drop(tasks_guard);
    80011d86:	0000b097          	auipc	ra,0xb
    80011d8a:	29a080e7          	jalr	666(ra) # 8001d020 <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    80011d8e:	a009                	j	80011d90 <.LBB16_7+0x38>
    }
    80011d90:	60e6                	ld	ra,88(sp)
    80011d92:	6125                	addi	sp,sp,96
    80011d94:	8082                	ret

Disassembly of section .text._ZN6kernel7process3cpu5cpuid17h605093a6a9a60164E:

0000000080011d96 <_ZN6kernel7process3cpu5cpuid17h605093a6a9a60164E>:
    cpus: [CPU; NCPU]
}

pub static mut CPU_MANAGER:CPUManager = CPUManager::new();

pub unsafe fn cpuid() -> usize {
    80011d96:	1101                	addi	sp,sp,-32
    let id = tp::read();
    80011d98:	ec06                	sd	ra,24(sp)
    80011d9a:	0000d097          	auipc	ra,0xd
    80011d9e:	a42080e7          	jalr	-1470(ra) # 8001e7dc <_ZN6kernel4arch5riscv8register2tp4read17h418649f5c8f5b927E>
    80011da2:	85aa                	mv	a1,a0
    80011da4:	e42e                	sd	a1,8(sp)
    80011da6:	e82a                	sd	a0,16(sp)
    80011da8:	a009                	j	80011daa <_ZN6kernel7process3cpu5cpuid17h605093a6a9a60164E+0x14>
    id
}
    80011daa:	6522                	ld	a0,8(sp)
    80011dac:	60e2                	ld	ra,24(sp)
    80011dae:	6105                	addi	sp,sp,32
    80011db0:	8082                	ret

Disassembly of section .text._ZN6kernel7process3cpu10CPUManager5mycpu17hac5ae6ce2070e7c3E:

0000000080011db2 <_ZN6kernel7process3cpu10CPUManager5mycpu17hac5ae6ce2070e7c3E>:
        Self{
            cpus: array![_ => CPU::new(); NCPU],
        }
    }

    pub unsafe fn mycpu(&mut self) -> &mut CPU{
    80011db2:	7179                	addi	sp,sp,-48
    80011db4:	f406                	sd	ra,40(sp)
    80011db6:	e42a                	sd	a0,8(sp)
    80011db8:	ec2a                	sd	a0,24(sp)
        let cpu_id = cpuid();
    80011dba:	00000097          	auipc	ra,0x0
    80011dbe:	fdc080e7          	jalr	-36(ra) # 80011d96 <_ZN6kernel7process3cpu5cpuid17h605093a6a9a60164E>
    80011dc2:	85aa                	mv	a1,a0
    80011dc4:	e82e                	sd	a1,16(sp)
    80011dc6:	f02a                	sd	a0,32(sp)
    80011dc8:	a009                	j	80011dca <_ZN6kernel7process3cpu10CPUManager5mycpu17hac5ae6ce2070e7c3E+0x18>
    80011dca:	65c2                	ld	a1,16(sp)
    80011dcc:	451d                	li	a0,7
        &mut self.cpus[cpu_id]
    80011dce:	00b56d63          	bltu	a0,a1,80011de8 <_ZN6kernel7process3cpu10CPUManager5mycpu17hac5ae6ce2070e7c3E+0x36>
    80011dd2:	a009                	j	80011dd4 <_ZN6kernel7process3cpu10CPUManager5mycpu17hac5ae6ce2070e7c3E+0x22>
    80011dd4:	6522                	ld	a0,8(sp)
    80011dd6:	65c2                	ld	a1,16(sp)
    80011dd8:	08800613          	li	a2,136
    80011ddc:	02c585b3          	mul	a1,a1,a2
    80011de0:	952e                	add	a0,a0,a1
    }
    80011de2:	70a2                	ld	ra,40(sp)
    80011de4:	6145                	addi	sp,sp,48
    80011de6:	8082                	ret
        &mut self.cpus[cpu_id]
    80011de8:	6542                	ld	a0,16(sp)

0000000080011dea <.LBB1_4>:
    80011dea:	00017617          	auipc	a2,0x17
    80011dee:	c0e60613          	addi	a2,a2,-1010 # 800289f8 <.L__unnamed_1>
    80011df2:	45a1                	li	a1,8
    80011df4:	00010097          	auipc	ra,0x10
    80011df8:	4ae080e7          	jalr	1198(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E:

0000000080011dfe <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>:

    pub unsafe fn myproc(&mut self) -> Option<&mut task_struct>{
    80011dfe:	7139                	addi	sp,sp,-64
    80011e00:	fc06                	sd	ra,56(sp)
    80011e02:	f02a                	sd	a0,32(sp)
        push_off();
    80011e04:	00000097          	auipc	ra,0x0
    80011e08:	3fe080e7          	jalr	1022(ra) # 80012202 <_ZN6kernel7process3cpu8push_off17h0acd4baa93104745E>
    80011e0c:	a009                	j	80011e0e <.LBB2_6>

0000000080011e0e <.LBB2_6>:
        let c = CPU_MANAGER.mycpu();
    80011e0e:	00061517          	auipc	a0,0x61
    80011e12:	33250513          	addi	a0,a0,818 # 80073140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    80011e16:	00000097          	auipc	ra,0x0
    80011e1a:	f9c080e7          	jalr	-100(ra) # 80011db2 <_ZN6kernel7process3cpu10CPUManager5mycpu17hac5ae6ce2070e7c3E>
    80011e1e:	85aa                	mv	a1,a0
    80011e20:	e82e                	sd	a1,16(sp)
    80011e22:	f42a                	sd	a0,40(sp)
    80011e24:	a009                	j	80011e26 <.LBB2_6+0x18>
        let p = &mut *c.process.unwrap().as_ptr();
    80011e26:	6542                	ld	a0,16(sp)
    80011e28:	6108                	ld	a0,0(a0)

0000000080011e2a <.LBB2_7>:
    80011e2a:	00017597          	auipc	a1,0x17
    80011e2e:	be658593          	addi	a1,a1,-1050 # 80028a10 <.L__unnamed_2>
    80011e32:	ffffd097          	auipc	ra,0xffffd
    80011e36:	ee4080e7          	jalr	-284(ra) # 8000ed16 <_ZN4core6option15Option$LT$T$GT$6unwrap17h715ab0e996921161E>
    80011e3a:	e42a                	sd	a0,8(sp)
    80011e3c:	a009                	j	80011e3e <.LBB2_7+0x14>
    80011e3e:	6522                	ld	a0,8(sp)
    80011e40:	ffffd097          	auipc	ra,0xffffd
    80011e44:	6c4080e7          	jalr	1732(ra) # 8000f504 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h7c6e4b893f33870bE>
    80011e48:	e02a                	sd	a0,0(sp)
    80011e4a:	a009                	j	80011e4c <.LBB2_7+0x22>
    80011e4c:	6502                	ld	a0,0(sp)
    80011e4e:	f82a                	sd	a0,48(sp)
        pop_off();
    80011e50:	00000097          	auipc	ra,0x0
    80011e54:	436080e7          	jalr	1078(ra) # 80012286 <_ZN6kernel7process3cpu7pop_off17hb8c7b834ab1c7c4cE>
    80011e58:	a009                	j	80011e5a <.LBB2_7+0x30>
        Some(p)
    80011e5a:	6502                	ld	a0,0(sp)
    80011e5c:	ec2a                	sd	a0,24(sp)
    }
    80011e5e:	70e2                	ld	ra,56(sp)
    80011e60:	6121                	addi	sp,sp,64
    80011e62:	8082                	ret

Disassembly of section .text._ZN6kernel7process3cpu10CPUManager9scheduler17hecedd2e89c301e93E:

0000000080011e64 <_ZN6kernel7process3cpu10CPUManager9scheduler17hecedd2e89c301e93E>:
    /// Scheduler never returns.  It loops, doing:
    ///  - choose a process to run.
    ///  - switch to start running that process.
    ///  - eventually that process transfers control
    ///    via switch back to the scheduler.
    pub unsafe fn scheduler(&mut self){
    80011e64:	7119                	addi	sp,sp,-128
    80011e66:	fc86                	sd	ra,120(sp)
    80011e68:	ecaa                	sd	a0,88(sp)
        extern "C" {
            fn switch(old: *mut Context, new: *mut Context);
        }

        let c = self.mycpu();
    80011e6a:	00000097          	auipc	ra,0x0
    80011e6e:	f48080e7          	jalr	-184(ra) # 80011db2 <_ZN6kernel7process3cpu10CPUManager5mycpu17hac5ae6ce2070e7c3E>
    80011e72:	85aa                	mv	a1,a0
    80011e74:	fc2e                	sd	a1,56(sp)
    80011e76:	f0aa                	sd	a0,96(sp)
    80011e78:	a009                	j	80011e7a <_ZN6kernel7process3cpu10CPUManager9scheduler17hecedd2e89c301e93E+0x16>
        loop {
            // Avoid deadlock by ensuring that devices can interrupt.
            sstatus::intr_on();
    80011e7a:	0000c097          	auipc	ra,0xc
    80011e7e:	4ca080e7          	jalr	1226(ra) # 8001e344 <_ZN6kernel4arch5riscv8register7sstatus7intr_on17h10d927cfe74faba7E>
    80011e82:	a009                	j	80011e84 <_ZN6kernel7process3cpu10CPUManager9scheduler17hecedd2e89c301e93E+0x20>
    80011e84:	6541                	lui	a0,0x10
    80011e86:	4085059b          	addiw	a1,a0,1032

0000000080011e8a <.LBB3_20>:
    80011e8a:	00045517          	auipc	a0,0x45
    80011e8e:	71650513          	addi	a0,a0,1814 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    80011e92:	952e                	add	a0,a0,a1

            let guard = PROC_MANAGER.tasks_lock.acquire();
    80011e94:	fffff097          	auipc	ra,0xfffff
    80011e98:	97a080e7          	jalr	-1670(ra) # 8001080e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    80011e9c:	85aa                	mv	a1,a0
    80011e9e:	f82e                	sd	a1,48(sp)
    80011ea0:	f4aa                	sd	a0,104(sp)
    80011ea2:	a009                	j	80011ea4 <.LBB3_21>

0000000080011ea4 <.LBB3_21>:
            match PROC_MANAGER.seek_runnable() {
    80011ea4:	00045517          	auipc	a0,0x45
    80011ea8:	6fc50513          	addi	a0,a0,1788 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    80011eac:	ffffc097          	auipc	ra,0xffffc
    80011eb0:	a94080e7          	jalr	-1388(ra) # 8000d940 <_ZN6kernel7process7manager11ProcManager13seek_runnable17h4972a46c3e17c2c4E>
    80011eb4:	e0aa                	sd	a0,64(sp)
    80011eb6:	a009                	j	80011eb8 <.LBB3_21+0x14>
                Some(task) => {
    80011eb8:	6506                	ld	a0,64(sp)
    80011eba:	00a035b3          	snez	a1,a0
    80011ebe:	4581                	li	a1,0
    80011ec0:	00b50463          	beq	a0,a1,80011ec8 <.LBB3_21+0x24>
    80011ec4:	a009                	j	80011ec6 <.LBB3_21+0x22>
    80011ec6:	a019                	j	80011ecc <.LBB3_21+0x28>
            match PROC_MANAGER.seek_runnable() {
    80011ec8:	a05d                	j	80011f6e <.LBB3_23+0x28>
    80011eca:	0000                	unimp
                Some(task) => {
    80011ecc:	6506                	ld	a0,64(sp)
    80011ece:	f02a                	sd	a0,32(sp)
    80011ed0:	f8aa                	sd	a0,112(sp)
                    // Switch to chosen process. It is the process's job
                    // to release it's lock and then reacquire it 
                    // before jumping back to us.
                    c.set_proc(NonNull::new(task as *mut task_struct));
    80011ed2:	ffffd097          	auipc	ra,0xffffd
    80011ed6:	462080e7          	jalr	1122(ra) # 8000f334 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h190cd254f5945591E>
    80011eda:	f42a                	sd	a0,40(sp)
    80011edc:	a009                	j	80011ede <.LBB3_21+0x3a>
    80011ede:	75a2                	ld	a1,40(sp)
    80011ee0:	7562                	ld	a0,56(sp)
    80011ee2:	00000097          	auipc	ra,0x0
    80011ee6:	12c080e7          	jalr	300(ra) # 8001200e <_ZN6kernel7process3cpu3CPU8set_proc17h4e940c763f0ffbe7E>
    80011eea:	a009                	j	80011eec <.LBB3_21+0x48>
    80011eec:	7562                	ld	a0,56(sp)
    80011eee:	7602                	ld	a2,32(sp)
    80011ef0:	4591                	li	a1,4
                    
                    task.state = ProcState::RUNNING;
    80011ef2:	04b107a3          	sb	a1,79(sp)
    80011ef6:	40b60423          	sb	a1,1032(a2)

                    switch(
                        c.get_context_mut(),
    80011efa:	00000097          	auipc	ra,0x0
    80011efe:	120080e7          	jalr	288(ra) # 8001201a <_ZN6kernel7process3cpu3CPU15get_context_mut17hcdad5fc27fe1585bE>
    80011f02:	ec2a                	sd	a0,24(sp)
    80011f04:	a009                	j	80011f06 <.LBB3_21+0x62>
                        &mut task.context as *mut Context
    80011f06:	6562                	ld	a0,24(sp)
    80011f08:	7582                	ld	a1,32(sp)
    80011f0a:	02858593          	addi	a1,a1,40
                    switch(
    80011f0e:	fffef097          	auipc	ra,0xfffef
    80011f12:	214080e7          	jalr	532(ra) # 80001122 <switch>
    80011f16:	a009                	j	80011f18 <.LBB3_21+0x74>
                    );

                    if c.get_context_mut().is_null() {
    80011f18:	7562                	ld	a0,56(sp)
    80011f1a:	00000097          	auipc	ra,0x0
    80011f1e:	100080e7          	jalr	256(ra) # 8001201a <_ZN6kernel7process3cpu3CPU15get_context_mut17hcdad5fc27fe1585bE>
    80011f22:	e82a                	sd	a0,16(sp)
    80011f24:	a009                	j	80011f26 <.LBB3_21+0x82>
    80011f26:	6542                	ld	a0,16(sp)
    80011f28:	00009097          	auipc	ra,0x9
    80011f2c:	1ca080e7          	jalr	458(ra) # 8001b0f2 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h3aa8018dbd05d49dE>
    80011f30:	e42a                	sd	a0,8(sp)
    80011f32:	a009                	j	80011f34 <.LBB3_21+0x90>
    80011f34:	6522                	ld	a0,8(sp)
    80011f36:	4581                	li	a1,0
    80011f38:	02b50263          	beq	a0,a1,80011f5c <.LBB3_23+0x16>
    80011f3c:	a009                	j	80011f3e <.LBB3_22>

0000000080011f3e <.LBB3_22>:
                        panic!("context switch back with no process reference.");
    80011f3e:	00017517          	auipc	a0,0x17
    80011f42:	aea50513          	addi	a0,a0,-1302 # 80028a28 <.L__unnamed_3>

0000000080011f46 <.LBB3_23>:
    80011f46:	00017617          	auipc	a2,0x17
    80011f4a:	b1260613          	addi	a2,a2,-1262 # 80028a58 <.L__unnamed_4>
    80011f4e:	02e00593          	li	a1,46
    80011f52:	00010097          	auipc	ra,0x10
    80011f56:	324080e7          	jalr	804(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80011f5a:	0000                	unimp
    80011f5c:	7562                	ld	a0,56(sp)
    80011f5e:	4581                	li	a1,0
                    }
                    // Process is done running for now. 
                    // It should have changed it's process state before coming back. 
                    c.set_proc(None);
    80011f60:	e8ae                	sd	a1,80(sp)
    80011f62:	00000097          	auipc	ra,0x0
    80011f66:	0ac080e7          	jalr	172(ra) # 8001200e <_ZN6kernel7process3cpu3CPU8set_proc17h4e940c763f0ffbe7E>
    80011f6a:	a009                	j	80011f6c <.LBB3_23+0x26>
            match PROC_MANAGER.seek_runnable() {
    80011f6c:	a009                	j	80011f6e <.LBB3_23+0x28>

                }

                None => {}
            }
            drop(guard);
    80011f6e:	7542                	ld	a0,48(sp)
    80011f70:	0000b097          	auipc	ra,0xb
    80011f74:	0b0080e7          	jalr	176(ra) # 8001d020 <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    80011f78:	a009                	j	80011f7a <.LBB3_23+0x34>
        loop {
    80011f7a:	b701                	j	80011e7a <_ZN6kernel7process3cpu10CPUManager9scheduler17hecedd2e89c301e93E+0x16>

Disassembly of section .text._ZN6kernel7process3cpu10CPUManager8alloc_fd17h6273585a0cf04a04E:

0000000080011f7c <_ZN6kernel7process3cpu10CPUManager8alloc_fd17h6273585a0cf04a04E>:
        }
    }

    pub fn alloc_fd(&mut self, file:&VFile) -> Result<usize, &'static str> {
    80011f7c:	7135                	addi	sp,sp,-160
    80011f7e:	ed06                	sd	ra,152(sp)
    80011f80:	ec32                	sd	a2,24(sp)
    80011f82:	f02e                	sd	a1,32(sp)
    80011f84:	85aa                	mv	a1,a0
    80011f86:	7502                	ld	a0,32(sp)
    80011f88:	f42e                	sd	a1,40(sp)
    80011f8a:	f4aa                	sd	a0,104(sp)
    80011f8c:	f8b2                	sd	a2,112(sp)
        let proc = unsafe{ self.myproc().ok_or("Fail to find current process")? };
    80011f8e:	00000097          	auipc	ra,0x0
    80011f92:	e70080e7          	jalr	-400(ra) # 80011dfe <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    80011f96:	f82a                	sd	a0,48(sp)
    80011f98:	a009                	j	80011f9a <_ZN6kernel7process3cpu10CPUManager8alloc_fd17h6273585a0cf04a04E+0x1e>
    80011f9a:	75c2                	ld	a1,48(sp)

0000000080011f9c <.LBB4_10>:
    80011f9c:	00017617          	auipc	a2,0x17
    80011fa0:	ad460613          	addi	a2,a2,-1324 # 80028a70 <.L__unnamed_5>
    80011fa4:	0888                	addi	a0,sp,80
    80011fa6:	46f1                	li	a3,28
    80011fa8:	ffffd097          	auipc	ra,0xffffd
    80011fac:	94a080e7          	jalr	-1718(ra) # 8000e8f2 <_ZN4core6option15Option$LT$T$GT$5ok_or17hc525e8e997fb4842E>
    80011fb0:	a009                	j	80011fb2 <.LBB4_10+0x16>
    80011fb2:	1828                	addi	a0,sp,56
    80011fb4:	088c                	addi	a1,sp,80
    80011fb6:	ffffb097          	auipc	ra,0xffffb
    80011fba:	28e080e7          	jalr	654(ra) # 8000d244 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hea2de720f3c4ff28E>
    80011fbe:	a009                	j	80011fc0 <.LBB4_10+0x24>
    80011fc0:	7562                	ld	a0,56(sp)
    80011fc2:	4581                	li	a1,0
    80011fc4:	00b50463          	beq	a0,a1,80011fcc <.LBB4_10+0x30>
    80011fc8:	a009                	j	80011fca <.LBB4_10+0x2e>
    80011fca:	a821                	j	80011fe2 <.LBB4_10+0x46>
    80011fcc:	6662                	ld	a2,24(sp)
    80011fce:	7522                	ld	a0,40(sp)
    80011fd0:	6586                	ld	a1,64(sp)
    80011fd2:	e52e                	sd	a1,136(sp)
    80011fd4:	e92e                	sd	a1,144(sp)
        proc.fd_alloc(file)
    80011fd6:	00004097          	auipc	ra,0x4
    80011fda:	418080e7          	jalr	1048(ra) # 800163ee <_ZN6kernel7process7process11task_struct8fd_alloc17h2f054cafd5acb7f0E>
    80011fde:	a02d                	j	80012008 <.LBB4_10+0x6c>
        let proc = unsafe{ self.myproc().ok_or("Fail to find current process")? };
    80011fe0:	0000                	unimp
    80011fe2:	6506                	ld	a0,64(sp)
    80011fe4:	65a6                	ld	a1,72(sp)
    80011fe6:	fcaa                	sd	a0,120(sp)
    80011fe8:	e12e                	sd	a1,128(sp)
    80011fea:	ffffa097          	auipc	ra,0xffffa
    80011fee:	a82080e7          	jalr	-1406(ra) # 8000ba6c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h6f3e3843c20d184aE>
    80011ff2:	e42a                	sd	a0,8(sp)
    80011ff4:	e82e                	sd	a1,16(sp)
    80011ff6:	a009                	j	80011ff8 <.LBB4_10+0x5c>
    80011ff8:	6642                	ld	a2,16(sp)
    80011ffa:	65a2                	ld	a1,8(sp)
    80011ffc:	7522                	ld	a0,40(sp)
    80011ffe:	ffffb097          	auipc	ra,0xffffb
    80012002:	0ae080e7          	jalr	174(ra) # 8000d0ac <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h4dd43adfe00292f6E>
    80012006:	a009                	j	80012008 <.LBB4_10+0x6c>
    }
    80012008:	60ea                	ld	ra,152(sp)
    8001200a:	610d                	addi	sp,sp,160
    8001200c:	8082                	ret

Disassembly of section .text._ZN6kernel7process3cpu3CPU8set_proc17h4e940c763f0ffbe7E:

000000008001200e <_ZN6kernel7process3cpu3CPU8set_proc17h4e940c763f0ffbe7E>:
            noff:0,
            intena:0
        }
    }

    pub fn set_proc(&mut self, proc:Option<NonNull<task_struct>>){
    8001200e:	1141                	addi	sp,sp,-16
    80012010:	e02a                	sd	a0,0(sp)
    80012012:	e42e                	sd	a1,8(sp)
        self.process = proc;
    80012014:	e10c                	sd	a1,0(a0)
    }
    80012016:	0141                	addi	sp,sp,16
    80012018:	8082                	ret

Disassembly of section .text._ZN6kernel7process3cpu3CPU15get_context_mut17hcdad5fc27fe1585bE:

000000008001201a <_ZN6kernel7process3cpu3CPU15get_context_mut17hcdad5fc27fe1585bE>:

    pub fn get_context_mut(&mut self) -> *mut Context{
    8001201a:	1141                	addi	sp,sp,-16
    8001201c:	e42a                	sd	a0,8(sp)
        &mut self.context as *mut Context
    8001201e:	0521                	addi	a0,a0,8
    }
    80012020:	0141                	addi	sp,sp,16
    80012022:	8082                	ret

Disassembly of section .text._ZN6kernel7process3cpu3CPU5sched17h6aec64bf33990cbcE:

0000000080012024 <_ZN6kernel7process3cpu3CPU5sched17h6aec64bf33990cbcE>:
    /// intena because intena is a property of this
    /// kernel thread, not this CPU. It should
    /// be proc->intena and proc->noff, but that would
    /// break in the few places where a lock is held but
    /// there's no process.
    pub unsafe fn sched<'a>(&mut self) 
    80012024:	7155                	addi	sp,sp,-208
    80012026:	e586                	sd	ra,200(sp)
    80012028:	e4aa                	sd	a0,72(sp)
    8001202a:	f12a                	sd	a0,160(sp)

000000008001202c <.LBB7_18>:
    {
        extern "C" {
            fn switch(old: *mut Context, new: *mut Context);
        }

        let curtask = CPU_MANAGER.myproc().unwrap();
    8001202c:	00061517          	auipc	a0,0x61
    80012030:	11450513          	addi	a0,a0,276 # 80073140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    80012034:	00000097          	auipc	ra,0x0
    80012038:	dca080e7          	jalr	-566(ra) # 80011dfe <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    8001203c:	e8aa                	sd	a0,80(sp)
    8001203e:	a009                	j	80012040 <.LBB7_18+0x14>
    80012040:	6546                	ld	a0,80(sp)

0000000080012042 <.LBB7_19>:
    80012042:	00017597          	auipc	a1,0x17
    80012046:	a4e58593          	addi	a1,a1,-1458 # 80028a90 <.L__unnamed_6>
    8001204a:	ffffd097          	auipc	ra,0xffffd
    8001204e:	d02080e7          	jalr	-766(ra) # 8000ed4c <_ZN4core6option15Option$LT$T$GT$6unwrap17h81f0c84c54a80648E>
    80012052:	85aa                	mv	a1,a0
    80012054:	e0ae                	sd	a1,64(sp)
    80012056:	f52a                	sd	a0,168(sp)
    80012058:	a009                	j	8001205a <.LBB7_19+0x18>
        let cur_ctx =  &mut curtask.context as *mut Context ;
    8001205a:	6506                	ld	a0,64(sp)
    8001205c:	02850513          	addi	a0,a0,40
    80012060:	f82a                	sd	a0,48(sp)
    80012062:	f92a                	sd	a0,176(sp)
    80012064:	6541                	lui	a0,0x10
    80012066:	4085059b          	addiw	a1,a0,1032

000000008001206a <.LBB7_20>:
    8001206a:	00045517          	auipc	a0,0x45
    8001206e:	53650513          	addi	a0,a0,1334 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    80012072:	952e                	add	a0,a0,a1

        if !PROC_MANAGER.tasks_lock.holding() {
    80012074:	fffff097          	auipc	ra,0xfffff
    80012078:	0ca080e7          	jalr	202(ra) # 8001113e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h22290a831051ae28E>
    8001207c:	fc2a                	sd	a0,56(sp)
    8001207e:	a009                	j	80012080 <.LBB7_20+0x16>
    80012080:	7562                	ld	a0,56(sp)
    80012082:	e105                	bnez	a0,800120a2 <.LBB7_22+0x14>
    80012084:	a009                	j	80012086 <.LBB7_21>

0000000080012086 <.LBB7_21>:
            panic!("sched: not holding proc's lock");
    80012086:	00017517          	auipc	a0,0x17
    8001208a:	a2250513          	addi	a0,a0,-1502 # 80028aa8 <.L__unnamed_7>

000000008001208e <.LBB7_22>:
    8001208e:	00017617          	auipc	a2,0x17
    80012092:	a3a60613          	addi	a2,a2,-1478 # 80028ac8 <.L__unnamed_8>
    80012096:	45f9                	li	a1,30
    80012098:	00010097          	auipc	ra,0x10
    8001209c:	1de080e7          	jalr	478(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    800120a0:	0000                	unimp
        }
        // only holding self.proc.lock
        if self.noff != 1 {
    800120a2:	6526                	ld	a0,72(sp)
    800120a4:	7d28                	ld	a0,120(a0)
    800120a6:	4585                	li	a1,1
    800120a8:	02b50363          	beq	a0,a1,800120ce <.LBB7_23+0x16>
    800120ac:	a009                	j	800120ae <.LBB7_22+0x20>
            println!("self noff is {}", self.noff);
    800120ae:	6526                	ld	a0,72(sp)
    800120b0:	07850513          	addi	a0,a0,120
    800120b4:	ed2a                	sd	a0,152(sp)
    800120b6:	fd2a                	sd	a0,184(sp)

00000000800120b8 <.LBB7_23>:
    800120b8:	00013597          	auipc	a1,0x13
    800120bc:	84a58593          	addi	a1,a1,-1974 # 80024902 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h9c6c4af1578f7c29E>
    800120c0:	0000d097          	auipc	ra,0xd
    800120c4:	5e0080e7          	jalr	1504(ra) # 8001f6a0 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    800120c8:	f02a                	sd	a0,32(sp)
    800120ca:	f42e                	sd	a1,40(sp)
    800120cc:	a831                	j	800120e8 <.LBB7_24+0x14>
            panic!("sched: cpu hold mutliple locks");
        }
            
        // proc is not running. 
        if curtask.state == ProcState::RUNNING {
    800120ce:	6506                	ld	a0,64(sp)
    800120d0:	40850513          	addi	a0,a0,1032

00000000800120d4 <.LBB7_24>:
    800120d4:	00017597          	auipc	a1,0x17
    800120d8:	a7458593          	addi	a1,a1,-1420 # 80028b48 <.L__unnamed_9>
    800120dc:	00005097          	auipc	ra,0x5
    800120e0:	998080e7          	jalr	-1640(ra) # 80016a74 <_ZN76_$LT$kernel..process..process..ProcState$u20$as$u20$core..cmp..PartialEq$GT$2eq17hc7c8c767a75b25feE>
    800120e4:	ec2a                	sd	a0,24(sp)
    800120e6:	a0b1                	j	80012132 <.LBB7_27+0x14>
            println!("self noff is {}", self.noff);
    800120e8:	7522                	ld	a0,40(sp)
    800120ea:	7582                	ld	a1,32(sp)
    800120ec:	e52e                	sd	a1,136(sp)
    800120ee:	e92a                	sd	a0,144(sp)

00000000800120f0 <.LBB7_25>:
    800120f0:	00017597          	auipc	a1,0x17
    800120f4:	a0058593          	addi	a1,a1,-1536 # 80028af0 <.L__unnamed_10>
    800120f8:	08a8                	addi	a0,sp,88
    800120fa:	4609                	li	a2,2
    800120fc:	0134                	addi	a3,sp,136
    800120fe:	4705                	li	a4,1
    80012100:	ffff3097          	auipc	ra,0xffff3
    80012104:	36a080e7          	jalr	874(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80012108:	a009                	j	8001210a <.LBB7_25+0x1a>
    8001210a:	08a8                	addi	a0,sp,88
    8001210c:	0000c097          	auipc	ra,0xc
    80012110:	c40080e7          	jalr	-960(ra) # 8001dd4c <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    80012114:	a009                	j	80012116 <.LBB7_26>

0000000080012116 <.LBB7_26>:
            panic!("sched: cpu hold mutliple locks");
    80012116:	00017517          	auipc	a0,0x17
    8001211a:	9fa50513          	addi	a0,a0,-1542 # 80028b10 <.L__unnamed_11>

000000008001211e <.LBB7_27>:
    8001211e:	00017617          	auipc	a2,0x17
    80012122:	a1260613          	addi	a2,a2,-1518 # 80028b30 <.L__unnamed_12>
    80012126:	45f9                	li	a1,30
    80012128:	00010097          	auipc	ra,0x10
    8001212c:	14e080e7          	jalr	334(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80012130:	0000                	unimp
    80012132:	6562                	ld	a0,24(sp)
    80012134:	4581                	li	a1,0
        if curtask.state == ProcState::RUNNING {
    80012136:	02b50163          	beq	a0,a1,80012158 <.LBB7_29+0x14>
    8001213a:	a009                	j	8001213c <.LBB7_28>

000000008001213c <.LBB7_28>:
            panic!("sched: proc is running");
    8001213c:	00017517          	auipc	a0,0x17
    80012140:	a0d50513          	addi	a0,a0,-1523 # 80028b49 <.L__unnamed_13>

0000000080012144 <.LBB7_29>:
    80012144:	00017617          	auipc	a2,0x17
    80012148:	a1c60613          	addi	a2,a2,-1508 # 80028b60 <.L__unnamed_14>
    8001214c:	45d9                	li	a1,22
    8001214e:	00010097          	auipc	ra,0x10
    80012152:	128080e7          	jalr	296(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80012156:	0000                	unimp
        }

        // should not be interruptible
        if sstatus::intr_get() {
    80012158:	0000c097          	auipc	ra,0xc
    8001215c:	236080e7          	jalr	566(ra) # 8001e38e <_ZN6kernel4arch5riscv8register7sstatus8intr_get17h3e12e0f19cb31fd5E>
    80012160:	e82a                	sd	a0,16(sp)
    80012162:	a009                	j	80012164 <.LBB7_29+0x20>
    80012164:	6542                	ld	a0,16(sp)
    80012166:	4581                	li	a1,0
    80012168:	02b50163          	beq	a0,a1,8001218a <.LBB7_31+0x14>
    8001216c:	a009                	j	8001216e <.LBB7_30>

000000008001216e <.LBB7_30>:
            panic!("sched: interruptible");
    8001216e:	00017517          	auipc	a0,0x17
    80012172:	a0a50513          	addi	a0,a0,-1526 # 80028b78 <.L__unnamed_15>

0000000080012176 <.LBB7_31>:
    80012176:	00017617          	auipc	a2,0x17
    8001217a:	a1a60613          	addi	a2,a2,-1510 # 80028b90 <.L__unnamed_16>
    8001217e:	45d1                	li	a1,20
    80012180:	00010097          	auipc	ra,0x10
    80012184:	0f6080e7          	jalr	246(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80012188:	0000                	unimp
        }

        let intena = self.intena;
    8001218a:	7542                	ld	a0,48(sp)
    8001218c:	65a6                	ld	a1,72(sp)
    8001218e:	61d0                	ld	a2,128(a1)
    80012190:	e432                	sd	a2,8(sp)
    80012192:	e1b2                	sd	a2,192(sp)
        // println!("[Kernel] switch");
        // println!("[Kernel] old_context: 0x{:x}, new_context: 0x{:x}", ctx as usize, &mut self.context as *mut Context as usize);
        switch(
            cur_ctx, 
            &mut self.context as *mut Context
    80012194:	05a1                	addi	a1,a1,8
        switch(
    80012196:	fffef097          	auipc	ra,0xfffef
    8001219a:	f8c080e7          	jalr	-116(ra) # 80001122 <switch>
    8001219e:	a009                	j	800121a0 <.LBB7_31+0x2a>
        );


        self.intena = intena; 
    800121a0:	6522                	ld	a0,8(sp)
    800121a2:	65a6                	ld	a1,72(sp)
    800121a4:	e1c8                	sd	a0,128(a1)
    }
    800121a6:	60ae                	ld	ra,200(sp)
    800121a8:	6169                	addi	sp,sp,208
    800121aa:	8082                	ret

Disassembly of section .text._ZN6kernel7process3cpu3CPU14try_yield_proc17hdb175aaf084d8a03E:

00000000800121ac <_ZN6kernel7process3cpu3CPU14try_yield_proc17hdb175aaf084d8a03E>:

    /// Yield the holding process if any and it's RUNNING.
    /// Directly return if none.
    pub fn try_yield_proc(&mut self) {
    800121ac:	7139                	addi	sp,sp,-64
    800121ae:	fc06                	sd	ra,56(sp)
    800121b0:	e82a                	sd	a0,16(sp)
    800121b2:	f82a                	sd	a0,48(sp)

        if !self.process.is_none() {
    800121b4:	ffffd097          	auipc	ra,0xffffd
    800121b8:	d7a080e7          	jalr	-646(ra) # 8000ef2e <_ZN4core6option15Option$LT$T$GT$7is_none17h62fa14fb8476dac2E>
    800121bc:	ec2a                	sd	a0,24(sp)
    800121be:	a009                	j	800121c0 <_ZN6kernel7process3cpu3CPU14try_yield_proc17hdb175aaf084d8a03E+0x14>
    800121c0:	6562                	ld	a0,24(sp)
    800121c2:	ed11                	bnez	a0,800121de <.LBB8_8+0x14>
    800121c4:	a009                	j	800121c6 <_ZN6kernel7process3cpu3CPU14try_yield_proc17hdb175aaf084d8a03E+0x1a>
            //     drop(guard);
            //     unsafe { self.process.unwrap().as_mut().yielding() }
            // } else {
            //     drop(guard);
            // }
            unsafe { self.process.unwrap().as_mut().yielding(); }
    800121c6:	6542                	ld	a0,16(sp)
    800121c8:	6108                	ld	a0,0(a0)

00000000800121ca <.LBB8_8>:
    800121ca:	00017597          	auipc	a1,0x17
    800121ce:	9de58593          	addi	a1,a1,-1570 # 80028ba8 <.L__unnamed_17>
    800121d2:	ffffd097          	auipc	ra,0xffffd
    800121d6:	b44080e7          	jalr	-1212(ra) # 8000ed16 <_ZN4core6option15Option$LT$T$GT$6unwrap17h715ab0e996921161E>
    800121da:	f42a                	sd	a0,40(sp)
    800121dc:	a011                	j	800121e0 <.LBB8_8+0x16>
        if !self.process.is_none() {
    800121de:	a839                	j	800121fc <.LBB8_8+0x32>
    800121e0:	1028                	addi	a0,sp,40
            unsafe { self.process.unwrap().as_mut().yielding(); }
    800121e2:	ffffd097          	auipc	ra,0xffffd
    800121e6:	2ee080e7          	jalr	750(ra) # 8000f4d0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_mut17h0bb096450dabbbf6E>
    800121ea:	e42a                	sd	a0,8(sp)
    800121ec:	a009                	j	800121ee <.LBB8_8+0x24>
    800121ee:	6522                	ld	a0,8(sp)
    800121f0:	00004097          	auipc	ra,0x4
    800121f4:	18e080e7          	jalr	398(ra) # 8001637e <_ZN6kernel7process7process11task_struct8yielding17hffa4922f8aee5a94E>
    800121f8:	a009                	j	800121fa <.LBB8_8+0x30>
        if !self.process.is_none() {
    800121fa:	a009                	j	800121fc <.LBB8_8+0x32>
        }
    }
    800121fc:	70e2                	ld	ra,56(sp)
    800121fe:	6121                	addi	sp,sp,64
    80012200:	8082                	ret

Disassembly of section .text._ZN6kernel7process3cpu8push_off17h0acd4baa93104745E:

0000000080012202 <_ZN6kernel7process3cpu8push_off17h0acd4baa93104745E>:

/// push_off/pop_off are like intr_off()/intr_on() except that they are matched:
/// it takes two pop_off()s to undo two push_off()s.  Also, if interrupts
/// are initially off, then push_off, pop_off leaves them off.

pub fn push_off(){
    80012202:	7179                	addi	sp,sp,-48
    let old_enable;
    unsafe{
        old_enable = sstatus::intr_get();
    80012204:	f406                	sd	ra,40(sp)
    80012206:	0000c097          	auipc	ra,0xc
    8001220a:	188080e7          	jalr	392(ra) # 8001e38e <_ZN6kernel4arch5riscv8register7sstatus8intr_get17h3e12e0f19cb31fd5E>
    8001220e:	e82a                	sd	a0,16(sp)
    80012210:	a009                	j	80012212 <_ZN6kernel7process3cpu8push_off17h0acd4baa93104745E+0x10>
    80012212:	6542                	ld	a0,16(sp)
    80012214:	00a10fa3          	sb	a0,31(sp)
        sstatus::intr_off();
    80012218:	0000c097          	auipc	ra,0xc
    8001221c:	152080e7          	jalr	338(ra) # 8001e36a <_ZN6kernel4arch5riscv8register7sstatus8intr_off17hed3f5b43b53e6556E>
    80012220:	a009                	j	80012222 <.LBB9_9>

0000000080012222 <.LBB9_9>:
    }
    let my_cpu = unsafe{ CPU_MANAGER.mycpu() };
    80012222:	00061517          	auipc	a0,0x61
    80012226:	f1e50513          	addi	a0,a0,-226 # 80073140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    8001222a:	00000097          	auipc	ra,0x0
    8001222e:	b88080e7          	jalr	-1144(ra) # 80011db2 <_ZN6kernel7process3cpu10CPUManager5mycpu17hac5ae6ce2070e7c3E>
    80012232:	e42a                	sd	a0,8(sp)
    80012234:	a009                	j	80012236 <.LBB9_9+0x14>
    80012236:	6522                	ld	a0,8(sp)
    80012238:	f02a                	sd	a0,32(sp)
    if my_cpu.noff == 0 {
    8001223a:	7d28                	ld	a0,120(a0)
    8001223c:	4581                	li	a1,0
    8001223e:	00b51763          	bne	a0,a1,8001224c <.LBB9_9+0x2a>
    80012242:	a009                	j	80012244 <.LBB9_9+0x22>
        my_cpu.intena = old_enable as usize;
    80012244:	6542                	ld	a0,16(sp)
    80012246:	65a2                	ld	a1,8(sp)
    80012248:	e1c8                	sd	a0,128(a1)
    if my_cpu.noff == 0 {
    8001224a:	a011                	j	8001224e <.LBB9_9+0x2c>
    8001224c:	a009                	j	8001224e <.LBB9_9+0x2c>
    }

    my_cpu.noff += 1;
    8001224e:	6522                	ld	a0,8(sp)
    80012250:	7d2c                	ld	a1,120(a0)
    80012252:	00158513          	addi	a0,a1,1
    80012256:	e02a                	sd	a0,0(sp)
    80012258:	00b56963          	bltu	a0,a1,8001226a <.LBB9_10>
    8001225c:	a009                	j	8001225e <.LBB9_9+0x3c>
    8001225e:	6502                	ld	a0,0(sp)
    80012260:	65a2                	ld	a1,8(sp)
    80012262:	fda8                	sd	a0,120(a1)
}
    80012264:	70a2                	ld	ra,40(sp)
    80012266:	6145                	addi	sp,sp,48
    80012268:	8082                	ret

000000008001226a <.LBB9_10>:
    my_cpu.noff += 1;
    8001226a:	00017517          	auipc	a0,0x17
    8001226e:	97650513          	addi	a0,a0,-1674 # 80028be0 <str.0>

0000000080012272 <.LBB9_11>:
    80012272:	00017617          	auipc	a2,0x17
    80012276:	94e60613          	addi	a2,a2,-1714 # 80028bc0 <.L__unnamed_18>
    8001227a:	45f1                	li	a1,28
    8001227c:	00010097          	auipc	ra,0x10
    80012280:	ffa080e7          	jalr	-6(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel7process3cpu7pop_off17hb8c7b834ab1c7c4cE:

0000000080012286 <_ZN6kernel7process3cpu7pop_off17hb8c7b834ab1c7c4cE>:


pub fn pop_off() {
    80012286:	715d                	addi	sp,sp,-80
    if unsafe{ sstatus::intr_get() } {
    80012288:	e486                	sd	ra,72(sp)
    8001228a:	0000c097          	auipc	ra,0xc
    8001228e:	104080e7          	jalr	260(ra) # 8001e38e <_ZN6kernel4arch5riscv8register7sstatus8intr_get17h3e12e0f19cb31fd5E>
    80012292:	ec2a                	sd	a0,24(sp)
    80012294:	a009                	j	80012296 <_ZN6kernel7process3cpu7pop_off17hb8c7b834ab1c7c4cE+0x10>
    80012296:	6562                	ld	a0,24(sp)
    80012298:	4581                	li	a1,0
    8001229a:	02b50163          	beq	a0,a1,800122bc <.LBB10_21>
    8001229e:	a009                	j	800122a0 <.LBB10_19>

00000000800122a0 <.LBB10_19>:
        panic!("pop_off(): interruptable");
    800122a0:	00017517          	auipc	a0,0x17
    800122a4:	95c50513          	addi	a0,a0,-1700 # 80028bfc <.L__unnamed_19>

00000000800122a8 <.LBB10_20>:
    800122a8:	00017617          	auipc	a2,0x17
    800122ac:	97060613          	addi	a2,a2,-1680 # 80028c18 <.L__unnamed_20>
    800122b0:	45e1                	li	a1,24
    800122b2:	00010097          	auipc	ra,0x10
    800122b6:	fc4080e7          	jalr	-60(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

00000000800122bc <.LBB10_21>:
    }
    let c = unsafe { CPU_MANAGER.mycpu() };
    800122bc:	00061517          	auipc	a0,0x61
    800122c0:	e8450513          	addi	a0,a0,-380 # 80073140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    800122c4:	00000097          	auipc	ra,0x0
    800122c8:	aee080e7          	jalr	-1298(ra) # 80011db2 <_ZN6kernel7process3cpu10CPUManager5mycpu17hac5ae6ce2070e7c3E>
    800122cc:	e82a                	sd	a0,16(sp)
    800122ce:	a009                	j	800122d0 <.LBB10_21+0x14>
    800122d0:	6542                	ld	a0,16(sp)
    800122d2:	e0aa                	sd	a0,64(sp)
    if c.noff.checked_sub(1).is_none() {
    800122d4:	7d28                	ld	a0,120(a0)
    800122d6:	4585                	li	a1,1
    800122d8:	0000c097          	auipc	ra,0xc
    800122dc:	d8e080e7          	jalr	-626(ra) # 8001e066 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h4d6a04d1a942bf32E>
    800122e0:	f42a                	sd	a0,40(sp)
    800122e2:	f82e                	sd	a1,48(sp)
    800122e4:	a009                	j	800122e6 <.LBB10_21+0x2a>
    800122e6:	1028                	addi	a0,sp,40
    800122e8:	ffffd097          	auipc	ra,0xffffd
    800122ec:	c82080e7          	jalr	-894(ra) # 8000ef6a <_ZN4core6option15Option$LT$T$GT$7is_none17hbfc07de6cbdc4f1cE>
    800122f0:	e42a                	sd	a0,8(sp)
    800122f2:	a009                	j	800122f4 <.LBB10_21+0x38>
    800122f4:	6522                	ld	a0,8(sp)
    800122f6:	4581                	li	a1,0
    800122f8:	02b50163          	beq	a0,a1,8001231a <.LBB10_23+0x14>
    800122fc:	a009                	j	800122fe <.LBB10_22>

00000000800122fe <.LBB10_22>:
        panic!("pop_off(): count not match");
    800122fe:	00017517          	auipc	a0,0x17
    80012302:	93250513          	addi	a0,a0,-1742 # 80028c30 <.L__unnamed_21>

0000000080012306 <.LBB10_23>:
    80012306:	00017617          	auipc	a2,0x17
    8001230a:	94a60613          	addi	a2,a2,-1718 # 80028c50 <.L__unnamed_22>
    8001230e:	45e9                	li	a1,26
    80012310:	00010097          	auipc	ra,0x10
    80012314:	f66080e7          	jalr	-154(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80012318:	0000                	unimp
    }
    c.noff -= 1;
    8001231a:	6542                	ld	a0,16(sp)
    8001231c:	7d28                	ld	a0,120(a0)
    8001231e:	fff50593          	addi	a1,a0,-1
    80012322:	e02e                	sd	a1,0(sp)
    80012324:	04b56963          	bltu	a0,a1,80012376 <.LBB10_24>
    80012328:	a009                	j	8001232a <.LBB10_23+0x24>
    8001232a:	6502                	ld	a0,0(sp)
    8001232c:	65c2                	ld	a1,16(sp)
    8001232e:	fda8                	sd	a0,120(a1)
    80012330:	4581                	li	a1,0
    if c.noff == 0 && c.intena != 0 {
    80012332:	00b50b63          	beq	a0,a1,80012348 <.LBB10_23+0x42>
    80012336:	a029                	j	80012340 <.LBB10_23+0x3a>
    80012338:	4505                	li	a0,1
    8001233a:	02a10fa3          	sb	a0,63(sp)
    8001233e:	a819                	j	80012354 <.LBB10_23+0x4e>
    80012340:	4501                	li	a0,0
    80012342:	02a10fa3          	sb	a0,63(sp)
    80012346:	a039                	j	80012354 <.LBB10_23+0x4e>
    80012348:	6542                	ld	a0,16(sp)
    8001234a:	6148                	ld	a0,128(a0)
    8001234c:	4581                	li	a1,0
    8001234e:	feb509e3          	beq	a0,a1,80012340 <.LBB10_23+0x3a>
    80012352:	b7dd                	j	80012338 <.LBB10_23+0x32>
    80012354:	03f14503          	lbu	a0,63(sp)
    80012358:	8905                	andi	a0,a0,1
    8001235a:	4581                	li	a1,0
    8001235c:	00b50863          	beq	a0,a1,8001236c <.LBB10_23+0x66>
    80012360:	a009                	j	80012362 <.LBB10_23+0x5c>
        unsafe{ sstatus::intr_on() };
    80012362:	0000c097          	auipc	ra,0xc
    80012366:	fe2080e7          	jalr	-30(ra) # 8001e344 <_ZN6kernel4arch5riscv8register7sstatus7intr_on17h10d927cfe74faba7E>
    8001236a:	a011                	j	8001236e <.LBB10_23+0x68>
    if c.noff == 0 && c.intena != 0 {
    8001236c:	a011                	j	80012370 <.LBB10_23+0x6a>
    8001236e:	a009                	j	80012370 <.LBB10_23+0x6a>
    }
}
    80012370:	60a6                	ld	ra,72(sp)
    80012372:	6161                	addi	sp,sp,80
    80012374:	8082                	ret

0000000080012376 <.LBB10_24>:
    c.noff -= 1;
    80012376:	00017517          	auipc	a0,0x17
    8001237a:	90a50513          	addi	a0,a0,-1782 # 80028c80 <str.1>

000000008001237e <.LBB10_25>:
    8001237e:	00017617          	auipc	a2,0x17
    80012382:	8ea60613          	addi	a2,a2,-1814 # 80028c68 <.L__unnamed_23>
    80012386:	02100593          	li	a1,33
    8001238a:	00010097          	auipc	ra,0x10
    8001238e:	eec080e7          	jalr	-276(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold17hc2ce6cb165c0b4a8E:

0000000080012394 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold17hc2ce6cb165c0b4a8E>:

        self.iter.try_fold(init, enumerate(&mut self.count, fold))
    }

    #[inline]
    fn fold<Acc, Fold>(self, init: Acc, fold: Fold) -> Acc
    80012394:	7179                	addi	sp,sp,-48
                count += 1;
                acc
            }
        }

        self.iter.fold(init, enumerate(self.count, fold))
    80012396:	f406                	sd	ra,40(sp)
    80012398:	610c                	ld	a1,0(a0)
    8001239a:	e02e                	sd	a1,0(sp)
    8001239c:	650c                	ld	a1,8(a0)
    8001239e:	e42e                	sd	a1,8(sp)
    800123a0:	6908                	ld	a0,16(a0)
    800123a2:	00000097          	auipc	ra,0x0
    800123a6:	022080e7          	jalr	34(ra) # 800123c4 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold9enumerate17h31eee2683e3bacc6E>
    800123aa:	e82a                	sd	a0,16(sp)
    800123ac:	a009                	j	800123ae <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold17hc2ce6cb165c0b4a8E+0x1a>
    800123ae:	6642                	ld	a2,16(sp)
    800123b0:	65a2                	ld	a1,8(sp)
    800123b2:	6502                	ld	a0,0(sp)
    800123b4:	ffff9097          	auipc	ra,0xffff9
    800123b8:	82e080e7          	jalr	-2002(ra) # 8000abe2 <_ZN4core4iter6traits8iterator8Iterator4fold17hc68e62fe16e6d649E>
    800123bc:	a009                	j	800123be <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold17hc2ce6cb165c0b4a8E+0x2a>
    }
    800123be:	70a2                	ld	ra,40(sp)
    800123c0:	6145                	addi	sp,sp,48
    800123c2:	8082                	ret

Disassembly of section .text._ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold9enumerate17h31eee2683e3bacc6E:

00000000800123c4 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold9enumerate17h31eee2683e3bacc6E>:
        fn enumerate<T, Acc>(
    800123c4:	1101                	addi	sp,sp,-32
    800123c6:	e82a                	sd	a0,16(sp)
            move |acc, item| {
    800123c8:	e42a                	sd	a0,8(sp)
        }
    800123ca:	6105                	addi	sp,sp,32
    800123cc:	8082                	ret

Disassembly of section .text._ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold9enumerate28_$u7b$$u7b$closure$u7d$$u7d$17hd0c93bb900581135E:

00000000800123ce <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold9enumerate28_$u7b$$u7b$closure$u7d$$u7d$17hd0c93bb900581135E>:
            move |acc, item| {
    800123ce:	711d                	addi	sp,sp,-96
    800123d0:	ec86                	sd	ra,88(sp)
    800123d2:	862e                	mv	a2,a1
    800123d4:	e82a                	sd	a0,16(sp)
    800123d6:	e0aa                	sd	a0,64(sp)
    800123d8:	e8b2                	sd	a2,80(sp)
                let acc = fold(acc, (count, item));
    800123da:	610c                	ld	a1,0(a0)
    800123dc:	f42e                	sd	a1,40(sp)
    800123de:	f832                	sd	a2,48(sp)
    800123e0:	ec2e                	sd	a1,24(sp)
    800123e2:	f032                	sd	a2,32(sp)
    800123e4:	0000a097          	auipc	ra,0xa
    800123e8:	1b0080e7          	jalr	432(ra) # 8001c594 <_ZN4core4iter6traits8iterator8Iterator8for_each4call28_$u7b$$u7b$closure$u7d$$u7d$17h486761cc57705d97E>
    800123ec:	a009                	j	800123ee <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold9enumerate28_$u7b$$u7b$closure$u7d$$u7d$17hd0c93bb900581135E+0x20>
                count += 1;
    800123ee:	6542                	ld	a0,16(sp)
    800123f0:	610c                	ld	a1,0(a0)
    800123f2:	00158513          	addi	a0,a1,1
    800123f6:	e42a                	sd	a0,8(sp)
    800123f8:	00b56963          	bltu	a0,a1,8001240a <.LBB2_4>
    800123fc:	a009                	j	800123fe <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold9enumerate28_$u7b$$u7b$closure$u7d$$u7d$17hd0c93bb900581135E+0x30>
    800123fe:	6522                	ld	a0,8(sp)
    80012400:	65c2                	ld	a1,16(sp)
    80012402:	e188                	sd	a0,0(a1)
            }
    80012404:	60e6                	ld	ra,88(sp)
    80012406:	6125                	addi	sp,sp,96
    80012408:	8082                	ret

000000008001240a <.LBB2_4>:
                count += 1;
    8001240a:	00017517          	auipc	a0,0x17
    8001240e:	94650513          	addi	a0,a0,-1722 # 80028d50 <str.0>

0000000080012412 <.LBB2_5>:
    80012412:	00017617          	auipc	a2,0x17
    80012416:	91e60613          	addi	a2,a2,-1762 # 80028d30 <.L__unnamed_1>
    8001241a:	45f1                	li	a1,28
    8001241c:	00010097          	auipc	ra,0x10
    80012420:	e5a080e7          	jalr	-422(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2c3e0997dfaaf459E:

0000000080012426 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2c3e0997dfaaf459E>:
    fn next(&mut self) -> Option<(usize, <I as Iterator>::Item)> {
    80012426:	7119                	addi	sp,sp,-128
    80012428:	fc86                	sd	ra,120(sp)
    8001242a:	ec2a                	sd	a0,24(sp)
    8001242c:	e8aa                	sd	a0,80(sp)
        let a = self.iter.next()?;
    8001242e:	ffff9097          	auipc	ra,0xffff9
    80012432:	e82080e7          	jalr	-382(ra) # 8000b2b0 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17habdea9e62d8c6ddfE>
    80012436:	f02a                	sd	a0,32(sp)
    80012438:	a009                	j	8001243a <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2c3e0997dfaaf459E+0x14>
    8001243a:	7502                	ld	a0,32(sp)
    8001243c:	ffffd097          	auipc	ra,0xffffd
    80012440:	dfe080e7          	jalr	-514(ra) # 8000f23a <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h90575ee4c84cb448E>
    80012444:	fc2a                	sd	a0,56(sp)
    80012446:	a009                	j	80012448 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2c3e0997dfaaf459E+0x22>
    80012448:	7562                	ld	a0,56(sp)
    8001244a:	00153593          	seqz	a1,a0
    8001244e:	4581                	li	a1,0
    80012450:	00b51463          	bne	a0,a1,80012458 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2c3e0997dfaaf459E+0x32>
    80012454:	a009                	j	80012456 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2c3e0997dfaaf459E+0x30>
    80012456:	a00d                	j	80012478 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2c3e0997dfaaf459E+0x52>
    80012458:	6562                	ld	a0,24(sp)
    8001245a:	75e2                	ld	a1,56(sp)
    8001245c:	e02e                	sd	a1,0(sp)
    8001245e:	f0ae                	sd	a1,96(sp)
    80012460:	f4ae                	sd	a1,104(sp)
        let i = self.count;
    80012462:	690c                	ld	a1,16(a0)
    80012464:	e42e                	sd	a1,8(sp)
    80012466:	f8ae                	sd	a1,112(sp)
        self.count += 1;
    80012468:	690c                	ld	a1,16(a0)
    8001246a:	00158513          	addi	a0,a1,1
    8001246e:	e82a                	sd	a0,16(sp)
    80012470:	04b56063          	bltu	a0,a1,800124b0 <.LBB3_12>
    80012474:	a839                	j	80012492 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2c3e0997dfaaf459E+0x6c>
        let a = self.iter.next()?;
    80012476:	0000                	unimp
    80012478:	ffffd097          	auipc	ra,0xffffd
    8001247c:	c22080e7          	jalr	-990(ra) # 8000f09a <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h8871efd663dd0baaE>
    80012480:	a009                	j	80012482 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2c3e0997dfaaf459E+0x5c>
    80012482:	ffffd097          	auipc	ra,0xffffd
    80012486:	da0080e7          	jalr	-608(ra) # 8000f222 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h22f2f1fa04d4de26E>
    8001248a:	f42a                	sd	a0,40(sp)
    8001248c:	f82e                	sd	a1,48(sp)
    8001248e:	a009                	j	80012490 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2c3e0997dfaaf459E+0x6a>
    }
    80012490:	a819                	j	800124a6 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2c3e0997dfaaf459E+0x80>
        self.count += 1;
    80012492:	6502                	ld	a0,0(sp)
    80012494:	65a2                	ld	a1,8(sp)
    80012496:	6642                	ld	a2,16(sp)
    80012498:	66e2                	ld	a3,24(sp)
    8001249a:	ea90                	sd	a2,16(a3)
        Some((i, a))
    8001249c:	e0ae                	sd	a1,64(sp)
    8001249e:	e4aa                	sd	a0,72(sp)
    800124a0:	f42e                	sd	a1,40(sp)
    800124a2:	f82a                	sd	a0,48(sp)
    }
    800124a4:	a009                	j	800124a6 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2c3e0997dfaaf459E+0x80>
    800124a6:	7522                	ld	a0,40(sp)
    800124a8:	75c2                	ld	a1,48(sp)
    800124aa:	70e6                	ld	ra,120(sp)
    800124ac:	6109                	addi	sp,sp,128
    800124ae:	8082                	ret

00000000800124b0 <.LBB3_12>:
        self.count += 1;
    800124b0:	00017517          	auipc	a0,0x17
    800124b4:	8a050513          	addi	a0,a0,-1888 # 80028d50 <str.0>

00000000800124b8 <.LBB3_13>:
    800124b8:	00017617          	auipc	a2,0x17
    800124bc:	8b860613          	addi	a2,a2,-1864 # 80028d70 <.L__unnamed_2>
    800124c0:	45f1                	li	a1,28
    800124c2:	00010097          	auipc	ra,0x10
    800124c6:	db4080e7          	jalr	-588(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN4core4iter6traits8iterator8Iterator8for_each17hc49183b8c223967eE:

00000000800124cc <_ZN4core4iter6traits8iterator8Iterator8for_each17hc49183b8c223967eE>:
    fn for_each<F>(self, f: F)
    800124cc:	7179                	addi	sp,sp,-48
        self.fold((), call(f));
    800124ce:	f406                	sd	ra,40(sp)
    800124d0:	690c                	ld	a1,16(a0)
    800124d2:	ec2e                	sd	a1,24(sp)
    800124d4:	650c                	ld	a1,8(a0)
    800124d6:	e82e                	sd	a1,16(sp)
    800124d8:	6108                	ld	a0,0(a0)
    800124da:	e42a                	sd	a0,8(sp)
    800124dc:	0000a097          	auipc	ra,0xa
    800124e0:	0b2080e7          	jalr	178(ra) # 8001c58e <_ZN4core4iter6traits8iterator8Iterator8for_each4call17hfc6c60365ed1f66bE>
    800124e4:	a009                	j	800124e6 <_ZN4core4iter6traits8iterator8Iterator8for_each17hc49183b8c223967eE+0x1a>
    800124e6:	0028                	addi	a0,sp,8
    800124e8:	00000097          	auipc	ra,0x0
    800124ec:	eac080e7          	jalr	-340(ra) # 80012394 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold17hc2ce6cb165c0b4a8E>
    800124f0:	a009                	j	800124f2 <_ZN4core4iter6traits8iterator8Iterator8for_each17hc49183b8c223967eE+0x26>
    }
    800124f2:	70a2                	ld	ra,40(sp)
    800124f4:	6145                	addi	sp,sp,48
    800124f6:	8082                	ret

Disassembly of section .text._ZN4core4iter8adapters9enumerate18Enumerate$LT$I$GT$3new17h36e1d93f918ce5d8E:

00000000800124f8 <_ZN4core4iter8adapters9enumerate18Enumerate$LT$I$GT$3new17h36e1d93f918ce5d8E>:
    pub(in crate::iter) fn new(iter: I) -> Enumerate<I> {
    800124f8:	1101                	addi	sp,sp,-32
    800124fa:	e42e                	sd	a1,8(sp)
    800124fc:	85aa                	mv	a1,a0
    800124fe:	6522                	ld	a0,8(sp)
    80012500:	e82a                	sd	a0,16(sp)
    80012502:	ec32                	sd	a2,24(sp)
        Enumerate { iter, count: 0 }
    80012504:	e188                	sd	a0,0(a1)
    80012506:	e590                	sd	a2,8(a1)
    80012508:	4501                	li	a0,0
    8001250a:	e988                	sd	a0,16(a1)
    }
    8001250c:	6105                	addi	sp,sp,32
    8001250e:	8082                	ret

Disassembly of section .text._ZN4core4iter8adapters9enumerate18Enumerate$LT$I$GT$3new17h6d37c7662d298f80E:

0000000080012510 <_ZN4core4iter8adapters9enumerate18Enumerate$LT$I$GT$3new17h6d37c7662d298f80E>:
    pub(in crate::iter) fn new(iter: I) -> Enumerate<I> {
    80012510:	1101                	addi	sp,sp,-32
    80012512:	e42e                	sd	a1,8(sp)
    80012514:	85aa                	mv	a1,a0
    80012516:	6522                	ld	a0,8(sp)
    80012518:	e82a                	sd	a0,16(sp)
    8001251a:	ec32                	sd	a2,24(sp)
        Enumerate { iter, count: 0 }
    8001251c:	e188                	sd	a0,0(a1)
    8001251e:	e590                	sd	a2,8(a1)
    80012520:	4501                	li	a0,0
    80012522:	e988                	sd	a0,16(a1)
    }
    80012524:	6105                	addi	sp,sp,32
    80012526:	8082                	ret

Disassembly of section .text._ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h928d6ed65fce619dE:

0000000080012528 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h928d6ed65fce619dE>:
    fn into_iter(self) -> I {
    80012528:	1141                	addi	sp,sp,-16
    8001252a:	e42e                	sd	a1,8(sp)
    8001252c:	85aa                	mv	a1,a0
        self
    8001252e:	6522                	ld	a0,8(sp)
    80012530:	6910                	ld	a2,16(a0)
    80012532:	e990                	sd	a2,16(a1)
    80012534:	6510                	ld	a2,8(a0)
    80012536:	e590                	sd	a2,8(a1)
    80012538:	6108                	ld	a0,0(a0)
    8001253a:	e188                	sd	a0,0(a1)
    }
    8001253c:	0141                	addi	sp,sp,16
    8001253e:	8082                	ret

Disassembly of section .text._ZN6kernel7process7context7Context10write_zero17hffd0e59e9c54d2c3E:

0000000080012540 <_ZN6kernel7process7context7Context10write_zero17hffd0e59e9c54d2c3E>:

    pub fn ra(&self) -> usize {
        self.ra
    }

    pub fn write_zero(&mut self) {
    80012540:	1141                	addi	sp,sp,-16
    80012542:	85aa                	mv	a1,a0
    80012544:	e42e                	sd	a1,8(sp)
    80012546:	4501                	li	a0,0
        self.ra = 0;
    80012548:	e188                	sd	a0,0(a1)
        self.sp = 0;
    8001254a:	e588                	sd	a0,8(a1)
        self.s0 = 0;
    8001254c:	e988                	sd	a0,16(a1)
        self.s1 = 0;
    8001254e:	ed88                	sd	a0,24(a1)
        self.s2 = 0;
    80012550:	f188                	sd	a0,32(a1)
        self.s3 = 0;
    80012552:	f588                	sd	a0,40(a1)
        self.s4 = 0;
    80012554:	f988                	sd	a0,48(a1)
        self.s5 = 0;
    80012556:	fd88                	sd	a0,56(a1)
        self.s6 = 0;
    80012558:	e1a8                	sd	a0,64(a1)
        self.s7 = 0;
    8001255a:	e5a8                	sd	a0,72(a1)
        self.s8 = 0;
    8001255c:	e9a8                	sd	a0,80(a1)
        self.s9 = 0;
    8001255e:	eda8                	sd	a0,88(a1)
        self.s10 = 0;
    80012560:	f1a8                	sd	a0,96(a1)
        self.s11 = 0;
    80012562:	f5a8                	sd	a0,104(a1)
    }
    80012564:	0141                	addi	sp,sp,16
    80012566:	8082                	ret

Disassembly of section .text._ZN6kernel7process7context7Context8write_ra17h453112740fa52877E:

0000000080012568 <_ZN6kernel7process7context7Context8write_ra17h453112740fa52877E>:

    pub fn write_ra(&mut self, ra: usize) {
    80012568:	1141                	addi	sp,sp,-16
    8001256a:	e02a                	sd	a0,0(sp)
    8001256c:	e42e                	sd	a1,8(sp)
        self.ra = ra;
    8001256e:	e10c                	sd	a1,0(a0)
    }
    80012570:	0141                	addi	sp,sp,16
    80012572:	8082                	ret

Disassembly of section .text._ZN6kernel7process7context7Context8write_sp17h0ed724aed1960a6aE:

0000000080012574 <_ZN6kernel7process7context7Context8write_sp17h0ed724aed1960a6aE>:

    pub fn write_sp(&mut self, sp: usize) {
    80012574:	1141                	addi	sp,sp,-16
    80012576:	e02a                	sd	a0,0(sp)
    80012578:	e42e                	sd	a1,8(sp)
        self.sp = sp;
    8001257a:	e50c                	sd	a1,8(a0)
    }
    8001257c:	0141                	addi	sp,sp,16
    8001257e:	8082                	ret

Disassembly of section .text._ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_fork17h5c4cdf045541cf30E:

0000000080012580 <_ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_fork17h5c4cdf045541cf30E>:
use crate::trap::TICKS_LOCK;
use super::*;

impl Syscall<'_> {
    pub fn sys_fork(&mut self) -> SysResult {
    80012580:	711d                	addi	sp,sp,-96
    80012582:	ec86                	sd	ra,88(sp)
    80012584:	f82a                	sd	a0,48(sp)
       
        let child_proc = self.process.fork().ok_or(())?;
    80012586:	6108                	ld	a0,0(a0)
    80012588:	00004097          	auipc	ra,0x4
    8001258c:	f44080e7          	jalr	-188(ra) # 800164cc <_ZN6kernel7process7process11task_struct4fork17h46aa3163aa049020E>
    80012590:	e82a                	sd	a0,16(sp)
    80012592:	a009                	j	80012594 <_ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_fork17h5c4cdf045541cf30E+0x14>
    80012594:	6542                	ld	a0,16(sp)
    80012596:	ffffc097          	auipc	ra,0xffffc
    8001259a:	22e080e7          	jalr	558(ra) # 8000e7c4 <_ZN4core6option15Option$LT$T$GT$5ok_or17h693a281cfb0e5e0dE>
    8001259e:	e42a                	sd	a0,8(sp)
    800125a0:	a009                	j	800125a2 <_ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_fork17h5c4cdf045541cf30E+0x22>
    800125a2:	6522                	ld	a0,8(sp)
    800125a4:	ffffb097          	auipc	ra,0xffffb
    800125a8:	c76080e7          	jalr	-906(ra) # 8000d21a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hcbbb135f4988ea23E>
    800125ac:	f42a                	sd	a0,40(sp)
    800125ae:	a009                	j	800125b0 <_ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_fork17h5c4cdf045541cf30E+0x30>
    800125b0:	7522                	ld	a0,40(sp)
    800125b2:	00153593          	seqz	a1,a0
    800125b6:	4581                	li	a1,0
    800125b8:	00b51463          	bne	a0,a1,800125c0 <_ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_fork17h5c4cdf045541cf30E+0x40>
    800125bc:	a009                	j	800125be <_ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_fork17h5c4cdf045541cf30E+0x3e>
    800125be:	a821                	j	800125d6 <_ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_fork17h5c4cdf045541cf30E+0x56>
    800125c0:	7522                	ld	a0,40(sp)
    800125c2:	e0aa                	sd	a0,64(sp)
    800125c4:	e4aa                	sd	a0,72(sp)
       
        let pid = child_proc.pid;
    800125c6:	3f053503          	ld	a0,1008(a0)
    800125ca:	e8aa                	sd	a0,80(sp)
       
        Ok(pid)
    800125cc:	f02a                	sd	a0,32(sp)
    800125ce:	4501                	li	a0,0
    800125d0:	ec2a                	sd	a0,24(sp)
    }
    800125d2:	a831                	j	800125ee <_ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_fork17h5c4cdf045541cf30E+0x6e>
        let child_proc = self.process.fork().ok_or(())?;
    800125d4:	0000                	unimp
    800125d6:	ffff9097          	auipc	ra,0xffff9
    800125da:	490080e7          	jalr	1168(ra) # 8000ba66 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h2e645b443ebf2dc7E>
    800125de:	a009                	j	800125e0 <_ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_fork17h5c4cdf045541cf30E+0x60>
    800125e0:	ffffb097          	auipc	ra,0xffffb
    800125e4:	b08080e7          	jalr	-1272(ra) # 8000d0e8 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h74072cf57097ff24E>
    800125e8:	ec2a                	sd	a0,24(sp)
    800125ea:	f02e                	sd	a1,32(sp)
    800125ec:	a009                	j	800125ee <_ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_fork17h5c4cdf045541cf30E+0x6e>
    }
    800125ee:	6562                	ld	a0,24(sp)
    800125f0:	7582                	ld	a1,32(sp)
    800125f2:	60e6                	ld	ra,88(sp)
    800125f4:	6125                	addi	sp,sp,96
    800125f6:	8082                	ret

Disassembly of section .text._ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$9sys_clone17h33021d255812765cE:

00000000800125f8 <_ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$9sys_clone17h33021d255812765cE>:

    pub fn sys_clone(&mut self) -> SysResult {
    800125f8:	711d                	addi	sp,sp,-96
    800125fa:	ec86                	sd	ra,88(sp)
    800125fc:	ec2a                	sd	a0,24(sp)
    800125fe:	fc2a                	sd	a0,56(sp)
    80012600:	4581                	li	a1,0
        let func = self.arg(0);
    80012602:	00003097          	auipc	ra,0x3
    80012606:	ba8080e7          	jalr	-1112(ra) # 800151aa <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    8001260a:	85aa                	mv	a1,a0
    8001260c:	f02e                	sd	a1,32(sp)
    8001260e:	e0aa                	sd	a0,64(sp)
    80012610:	a009                	j	80012612 <_ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$9sys_clone17h33021d255812765cE+0x1a>
       
        let ustack = self.arg(1);
    80012612:	6562                	ld	a0,24(sp)
    80012614:	4585                	li	a1,1
    80012616:	00003097          	auipc	ra,0x3
    8001261a:	b94080e7          	jalr	-1132(ra) # 800151aa <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    8001261e:	85aa                	mv	a1,a0
    80012620:	e82e                	sd	a1,16(sp)
    80012622:	e4aa                	sd	a0,72(sp)
    80012624:	a009                	j	80012626 <_ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$9sys_clone17h33021d255812765cE+0x2e>

        let ret = self.process.threadclone(func, ustack);
    80012626:	6642                	ld	a2,16(sp)
    80012628:	7582                	ld	a1,32(sp)
    8001262a:	6562                	ld	a0,24(sp)
    8001262c:	6108                	ld	a0,0(a0)
    8001262e:	00004097          	auipc	ra,0x4
    80012632:	0c0080e7          	jalr	192(ra) # 800166ee <_ZN6kernel7process6thread55_$LT$impl$u20$kernel..process..process..task_struct$GT$11threadclone17h0da9ae13d0d85d5bE>
    80012636:	85aa                	mv	a1,a0
    80012638:	e42e                	sd	a1,8(sp)
    8001263a:	e8aa                	sd	a0,80(sp)
    8001263c:	a009                	j	8001263e <_ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$9sys_clone17h33021d255812765cE+0x46>

        Ok(ret)
    8001263e:	65a2                	ld	a1,8(sp)
    80012640:	f82e                	sd	a1,48(sp)
    80012642:	4501                	li	a0,0
    80012644:	f42a                	sd	a0,40(sp)
    }
    80012646:	60e6                	ld	ra,88(sp)
    80012648:	6125                	addi	sp,sp,96
    8001264a:	8082                	ret

Disassembly of section .text._ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_exit17hae1a7a01ef6f0180E:

000000008001264c <_ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_exit17hae1a7a01ef6f0180E>:

    pub fn sys_exit(&self) -> SysResult {
    8001264c:	1101                	addi	sp,sp,-32
    8001264e:	ec06                	sd	ra,24(sp)
    80012650:	e42a                	sd	a0,8(sp)
    80012652:	4581                	li	a1,0
        let status = self.arg(0);
    80012654:	00003097          	auipc	ra,0x3
    80012658:	b56080e7          	jalr	-1194(ra) # 800151aa <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    8001265c:	85aa                	mv	a1,a0
    8001265e:	e02e                	sd	a1,0(sp)
    80012660:	e82a                	sd	a0,16(sp)
    80012662:	a009                	j	80012664 <_ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_exit17hae1a7a01ef6f0180E+0x18>
        unsafe {
            PROC_MANAGER.exit(status)
    80012664:	6582                	ld	a1,0(sp)

0000000080012666 <.LBB2_2>:
    80012666:	00045517          	auipc	a0,0x45
    8001266a:	f3a50513          	addi	a0,a0,-198 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    8001266e:	ffffb097          	auipc	ra,0xffffb
    80012672:	420080e7          	jalr	1056(ra) # 8000da8e <_ZN6kernel7process7manager11ProcManager4exit17hfa49a8445fc58f81E>
	...

Disassembly of section .text._ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_wait17h7b4815682cca4a8dE:

0000000080012678 <_ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_wait17h7b4815682cca4a8dE>:
        }
    }

    pub fn sys_wait(&self) -> SysResult {
    80012678:	715d                	addi	sp,sp,-80
    8001267a:	e486                	sd	ra,72(sp)
    8001267c:	f82a                	sd	a0,48(sp)
    8001267e:	4581                	li	a1,0
        let addr = self.arg(0);
    80012680:	00003097          	auipc	ra,0x3
    80012684:	b2a080e7          	jalr	-1238(ra) # 800151aa <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    80012688:	85aa                	mv	a1,a0
    8001268a:	e42e                	sd	a1,8(sp)
    8001268c:	fc2a                	sd	a0,56(sp)
    8001268e:	a009                	j	80012690 <_ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_wait17h7b4815682cca4a8dE+0x18>
        match unsafe {
            PROC_MANAGER.wait(addr)
    80012690:	65a2                	ld	a1,8(sp)

0000000080012692 <.LBB3_8>:
    80012692:	00045517          	auipc	a0,0x45
    80012696:	f0e50513          	addi	a0,a0,-242 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    8001269a:	ffffb097          	auipc	ra,0xffffb
    8001269e:	652080e7          	jalr	1618(ra) # 8000dcec <_ZN6kernel7process7manager11ProcManager4wait17h7c4c80095cf78f04E>
    800126a2:	f02a                	sd	a0,32(sp)
    800126a4:	f42e                	sd	a1,40(sp)
    800126a6:	a009                	j	800126a8 <.LBB3_8+0x16>
        } {
            Some(pid) => {
    800126a8:	7502                	ld	a0,32(sp)
    800126aa:	4581                	li	a1,0
    800126ac:	00b50463          	beq	a0,a1,800126b4 <.LBB3_8+0x22>
    800126b0:	a009                	j	800126b2 <.LBB3_8+0x20>
    800126b2:	a029                	j	800126bc <.LBB3_8+0x2a>
    800126b4:	4505                	li	a0,1
                Ok(pid)
            },
    
            None => {
                Err(())
    800126b6:	e82a                	sd	a0,16(sp)
        match unsafe {
    800126b8:	a801                	j	800126c8 <.LBB3_8+0x36>
    800126ba:	0000                	unimp
            Some(pid) => {
    800126bc:	7522                	ld	a0,40(sp)
    800126be:	e0aa                	sd	a0,64(sp)
                Ok(pid)
    800126c0:	ec2a                	sd	a0,24(sp)
    800126c2:	4501                	li	a0,0
    800126c4:	e82a                	sd	a0,16(sp)
        match unsafe {
    800126c6:	a009                	j	800126c8 <.LBB3_8+0x36>
            }
        }
    }
    800126c8:	6542                	ld	a0,16(sp)
    800126ca:	65e2                	ld	a1,24(sp)
    800126cc:	60a6                	ld	ra,72(sp)
    800126ce:	6161                	addi	sp,sp,80
    800126d0:	8082                	ret

Disassembly of section .text._ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_join17hcdda9ca2f2e537bbE:

00000000800126d2 <_ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_join17hcdda9ca2f2e537bbE>:

    pub fn sys_join(&self) -> SysResult {
    800126d2:	715d                	addi	sp,sp,-80
    800126d4:	e486                	sd	ra,72(sp)
    800126d6:	f82a                	sd	a0,48(sp)
    800126d8:	4581                	li	a1,0
        let ustack_addr = self.arg(0);
    800126da:	00003097          	auipc	ra,0x3
    800126de:	ad0080e7          	jalr	-1328(ra) # 800151aa <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    800126e2:	85aa                	mv	a1,a0
    800126e4:	e42e                	sd	a1,8(sp)
    800126e6:	fc2a                	sd	a0,56(sp)
    800126e8:	a009                	j	800126ea <_ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_join17hcdda9ca2f2e537bbE+0x18>
        match unsafe {
            PROC_MANAGER.join(ustack_addr)
    800126ea:	65a2                	ld	a1,8(sp)

00000000800126ec <.LBB4_8>:
    800126ec:	00045517          	auipc	a0,0x45
    800126f0:	eb450513          	addi	a0,a0,-332 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    800126f4:	ffffc097          	auipc	ra,0xffffc
    800126f8:	892080e7          	jalr	-1902(ra) # 8000df86 <_ZN6kernel7process7manager11ProcManager4join17h0acabc4ce5dd65bdE>
    800126fc:	f02a                	sd	a0,32(sp)
    800126fe:	f42e                	sd	a1,40(sp)
    80012700:	a009                	j	80012702 <.LBB4_8+0x16>
        } {
            Some(ret) => {
    80012702:	7502                	ld	a0,32(sp)
    80012704:	4581                	li	a1,0
    80012706:	00b50463          	beq	a0,a1,8001270e <.LBB4_8+0x22>
    8001270a:	a009                	j	8001270c <.LBB4_8+0x20>
    8001270c:	a029                	j	80012716 <.LBB4_8+0x2a>
    8001270e:	4505                	li	a0,1
                Ok(ret)
            },
    
            None => {
                Err(())
    80012710:	e82a                	sd	a0,16(sp)
        match unsafe {
    80012712:	a801                	j	80012722 <.LBB4_8+0x36>
    80012714:	0000                	unimp
            Some(ret) => {
    80012716:	7522                	ld	a0,40(sp)
    80012718:	e0aa                	sd	a0,64(sp)
                Ok(ret)
    8001271a:	ec2a                	sd	a0,24(sp)
    8001271c:	4501                	li	a0,0
    8001271e:	e82a                	sd	a0,16(sp)
        match unsafe {
    80012720:	a009                	j	80012722 <.LBB4_8+0x36>
            }
        }
    }
    80012722:	6542                	ld	a0,16(sp)
    80012724:	65e2                	ld	a1,24(sp)
    80012726:	60a6                	ld	ra,72(sp)
    80012728:	6161                	addi	sp,sp,80
    8001272a:	8082                	ret

Disassembly of section .text._ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_sbrk17h620cfc1119b978cdE:

000000008001272c <_ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_sbrk17h620cfc1119b978cdE>:

        Ok(pid)
    }
    
    
    pub fn sys_sbrk(&mut self) -> SysResult {
    8001272c:	7155                	addi	sp,sp,-208
    8001272e:	e586                	sd	ra,200(sp)
    80012730:	ec2a                	sd	a0,24(sp)
    80012732:	f12a                	sd	a0,160(sp)
    80012734:	4581                	li	a1,0
        let size = self.arg(0);
    80012736:	00003097          	auipc	ra,0x3
    8001273a:	a74080e7          	jalr	-1420(ra) # 800151aa <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    8001273e:	85aa                	mv	a1,a0
    80012740:	f02e                	sd	a1,32(sp)
    80012742:	f52a                	sd	a0,168(sp)
    80012744:	a009                	j	80012746 <_ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_sbrk17h620cfc1119b978cdE+0x1a>

        let task = unsafe{ &*self.process };
    80012746:	7582                	ld	a1,32(sp)
    80012748:	6562                	ld	a0,24(sp)
    8001274a:	6110                	ld	a2,0(a0)
    8001274c:	f932                	sd	a2,176(sp)
        let addr = task.size;
    8001274e:	6a10                	ld	a2,16(a2)
    80012750:	e832                	sd	a2,16(sp)
    80012752:	fd32                	sd	a2,184(sp)
     
        match self.process.grow_proc(size as isize) {
    80012754:	6108                	ld	a0,0(a0)
    80012756:	00004097          	auipc	ra,0x4
    8001275a:	b32080e7          	jalr	-1230(ra) # 80016288 <_ZN6kernel7process7process11task_struct9grow_proc17h401c24eda5b4fae0E>
    8001275e:	fc2a                	sd	a0,56(sp)
    80012760:	e0ae                	sd	a1,64(sp)
    80012762:	a009                	j	80012764 <_ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_sbrk17h620cfc1119b978cdE+0x38>
            Ok(()) => {
    80012764:	7562                	ld	a0,56(sp)
    80012766:	00a035b3          	snez	a1,a0
    8001276a:	4581                	li	a1,0
    8001276c:	02b50663          	beq	a0,a1,80012798 <.LBB5_9+0x18>
    80012770:	a009                	j	80012772 <_ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_sbrk17h620cfc1119b978cdE+0x46>
                return Ok(addr)
            }
    
            Err(err) => {
    80012772:	75e2                	ld	a1,56(sp)
    80012774:	6506                	ld	a0,64(sp)
    80012776:	e4ae                	sd	a1,72(sp)
    80012778:	e8aa                	sd	a0,80(sp)
    8001277a:	00a8                	addi	a0,sp,72
                panic!("err: {:?}", err);
    8001277c:	ed2a                	sd	a0,152(sp)
    8001277e:	e1aa                	sd	a0,192(sp)

0000000080012780 <.LBB5_9>:
    80012780:	0000c597          	auipc	a1,0xc
    80012784:	df258593          	addi	a1,a1,-526 # 8001e572 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8e05789f6aa15028E>
    80012788:	0000c097          	auipc	ra,0xc
    8001278c:	e72080e7          	jalr	-398(ra) # 8001e5fa <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>
    80012790:	e02a                	sd	a0,0(sp)
    80012792:	e42e                	sd	a1,8(sp)
    80012794:	a809                	j	800127a6 <.LBB5_9+0x26>
        match self.process.grow_proc(size as isize) {
    80012796:	0000                	unimp
                return Ok(addr)
    80012798:	65c2                	ld	a1,16(sp)
    8001279a:	f82e                	sd	a1,48(sp)
    8001279c:	4501                	li	a0,0
    8001279e:	f42a                	sd	a0,40(sp)
            }
        }
    }
    800127a0:	60ae                	ld	ra,200(sp)
    800127a2:	6169                	addi	sp,sp,208
    800127a4:	8082                	ret
                panic!("err: {:?}", err);
    800127a6:	6522                	ld	a0,8(sp)
    800127a8:	6582                	ld	a1,0(sp)
    800127aa:	e52e                	sd	a1,136(sp)
    800127ac:	e92a                	sd	a0,144(sp)

00000000800127ae <.LBB5_10>:
    800127ae:	00017597          	auipc	a1,0x17
    800127b2:	9f258593          	addi	a1,a1,-1550 # 800291a0 <.L__unnamed_1>
    800127b6:	08a8                	addi	a0,sp,88
    800127b8:	0134                	addi	a3,sp,136
    800127ba:	4705                	li	a4,1
    800127bc:	863a                	mv	a2,a4
    800127be:	ffff3097          	auipc	ra,0xffff3
    800127c2:	cac080e7          	jalr	-852(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    800127c6:	a009                	j	800127c8 <.LBB5_11>

00000000800127c8 <.LBB5_11>:
    800127c8:	00017597          	auipc	a1,0x17
    800127cc:	a0058593          	addi	a1,a1,-1536 # 800291c8 <.L__unnamed_2>
    800127d0:	08a8                	addi	a0,sp,88
    800127d2:	00010097          	auipc	ra,0x10
    800127d6:	b10080e7          	jalr	-1264(ra) # 800222e2 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
	...

Disassembly of section .text._ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$7sys_dup17h638e7e7819355743E:

00000000800127dc <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$7sys_dup17h638e7e7819355743E>:
    pub fn sys_dup(&self) -> SysResult {
    800127dc:	7135                	addi	sp,sp,-160
    800127de:	ed06                	sd	ra,152(sp)
    800127e0:	f8aa                	sd	a0,112(sp)
    800127e2:	4581                	li	a1,0
        let old_fd = self.arg(0);
    800127e4:	00003097          	auipc	ra,0x3
    800127e8:	9c6080e7          	jalr	-1594(ra) # 800151aa <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    800127ec:	85aa                	mv	a1,a0
    800127ee:	f82e                	sd	a1,48(sp)
    800127f0:	fcaa                	sd	a0,120(sp)
    800127f2:	a009                	j	800127f4 <.LBB6_16>

00000000800127f4 <.LBB6_16>:
        let curtask = unsafe { CPU_MANAGER.myproc().unwrap() };
    800127f4:	00061517          	auipc	a0,0x61
    800127f8:	94c50513          	addi	a0,a0,-1716 # 80073140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    800127fc:	fffff097          	auipc	ra,0xfffff
    80012800:	602080e7          	jalr	1538(ra) # 80011dfe <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    80012804:	f42a                	sd	a0,40(sp)
    80012806:	a009                	j	80012808 <.LBB6_16+0x14>
    80012808:	7522                	ld	a0,40(sp)

000000008001280a <.LBB6_17>:
    8001280a:	00017597          	auipc	a1,0x17
    8001280e:	9ee58593          	addi	a1,a1,-1554 # 800291f8 <.L__unnamed_3>
    80012812:	ffffc097          	auipc	ra,0xffffc
    80012816:	53a080e7          	jalr	1338(ra) # 8000ed4c <_ZN4core6option15Option$LT$T$GT$6unwrap17h81f0c84c54a80648E>
    8001281a:	f02a                	sd	a0,32(sp)
    8001281c:	a009                	j	8001281e <.LBB6_17+0x14>
    8001281e:	75c2                	ld	a1,48(sp)
    80012820:	7502                	ld	a0,32(sp)
    80012822:	e12a                	sd	a0,128(sp)
    80012824:	06300513          	li	a0,99
        let file = curtask.open_files[old_fd].as_ref().unwrap();
    80012828:	0cb56263          	bltu	a0,a1,800128ec <.LBB6_20+0x6c>
    8001282c:	a009                	j	8001282e <.LBB6_17+0x24>
    8001282e:	7502                	ld	a0,32(sp)
    80012830:	75c2                	ld	a1,48(sp)
    80012832:	058e                	slli	a1,a1,0x3
    80012834:	952e                	add	a0,a0,a1
    80012836:	0a850513          	addi	a0,a0,168
    8001283a:	ffffc097          	auipc	ra,0xffffc
    8001283e:	206080e7          	jalr	518(ra) # 8000ea40 <_ZN4core6option15Option$LT$T$GT$6as_ref17h0cd8921964ab0966E>
    80012842:	ec2a                	sd	a0,24(sp)
    80012844:	a009                	j	80012846 <.LBB6_17+0x3c>
    80012846:	6562                	ld	a0,24(sp)

0000000080012848 <.LBB6_18>:
    80012848:	00017597          	auipc	a1,0x17
    8001284c:	9e058593          	addi	a1,a1,-1568 # 80029228 <.L__unnamed_4>
    80012850:	ffffc097          	auipc	ra,0xffffc
    80012854:	532080e7          	jalr	1330(ra) # 8000ed82 <_ZN4core6option15Option$LT$T$GT$6unwrap17h84dba6f31c77e511E>
    80012858:	e4aa                	sd	a0,72(sp)
    8001285a:	a009                	j	8001285c <.LBB6_18+0x14>
        let new_fd = unsafe{ CPU_MANAGER.alloc_fd(&file) }.unwrap();
    8001285c:	6526                	ld	a0,72(sp)
    8001285e:	ffff0097          	auipc	ra,0xffff0
    80012862:	d6c080e7          	jalr	-660(ra) # 800025ca <_ZN69_$LT$alloc..sync..Arc$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h7c280ba665690166E>
    80012866:	e82a                	sd	a0,16(sp)
    80012868:	a009                	j	8001286a <.LBB6_18+0x22>
    8001286a:	6642                	ld	a2,16(sp)

000000008001286c <.LBB6_19>:
    8001286c:	00061597          	auipc	a1,0x61
    80012870:	8d458593          	addi	a1,a1,-1836 # 80073140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    80012874:	0888                	addi	a0,sp,80
    80012876:	fffff097          	auipc	ra,0xfffff
    8001287a:	706080e7          	jalr	1798(ra) # 80011f7c <_ZN6kernel7process3cpu10CPUManager8alloc_fd17h6273585a0cf04a04E>
    8001287e:	a009                	j	80012880 <.LBB6_20>

0000000080012880 <.LBB6_20>:
    80012880:	00017597          	auipc	a1,0x17
    80012884:	9c058593          	addi	a1,a1,-1600 # 80029240 <.L__unnamed_5>
    80012888:	0888                	addi	a0,sp,80
    8001288a:	ffffa097          	auipc	ra,0xffffa
    8001288e:	616080e7          	jalr	1558(ra) # 8000cea0 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h6115c21749654733E>
    80012892:	85aa                	mv	a1,a0
    80012894:	e42e                	sd	a1,8(sp)
    80012896:	e52a                	sd	a0,136(sp)
    80012898:	a009                	j	8001289a <.LBB6_20+0x1a>
        let new_file = Arc::clone(&file);
    8001289a:	6526                	ld	a0,72(sp)
    8001289c:	ffff0097          	auipc	ra,0xffff0
    800128a0:	cda080e7          	jalr	-806(ra) # 80002576 <_ZN64_$LT$alloc..sync..Arc$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hd600a08a186c4518E>
    800128a4:	85aa                	mv	a1,a0
    800128a6:	e02e                	sd	a1,0(sp)
    800128a8:	e92a                	sd	a0,144(sp)
    800128aa:	a009                	j	800128ac <.LBB6_20+0x2c>
    800128ac:	65a2                	ld	a1,8(sp)
    800128ae:	06300513          	li	a0,99
        curtask.open_files[new_fd].replace(new_file);
    800128b2:	04b56963          	bltu	a0,a1,80012904 <.LBB6_21+0x16>
    800128b6:	a009                	j	800128b8 <.LBB6_20+0x38>
    800128b8:	6582                	ld	a1,0(sp)
    800128ba:	7502                	ld	a0,32(sp)
    800128bc:	6622                	ld	a2,8(sp)
    800128be:	060e                	slli	a2,a2,0x3
    800128c0:	9532                	add	a0,a0,a2
    800128c2:	0a850513          	addi	a0,a0,168
    800128c6:	ffffc097          	auipc	ra,0xffffc
    800128ca:	786080e7          	jalr	1926(ra) # 8000f04c <_ZN4core6option15Option$LT$T$GT$7replace17hf852e6bb4a32ec9aE>
    800128ce:	f4aa                	sd	a0,104(sp)
    800128d0:	a009                	j	800128d2 <.LBB6_20+0x52>
    800128d2:	10a8                	addi	a0,sp,104
    800128d4:	ffff4097          	auipc	ra,0xffff4
    800128d8:	774080e7          	jalr	1908(ra) # 80007048 <_ZN4core3ptr96drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$$GT$17hc79d9c89cd1d7f36E>
    800128dc:	a009                	j	800128de <.LBB6_20+0x5e>
        Ok(new_fd)
    800128de:	65a2                	ld	a1,8(sp)
    800128e0:	e0ae                	sd	a1,64(sp)
    800128e2:	4501                	li	a0,0
    800128e4:	fc2a                	sd	a0,56(sp)
    }
    800128e6:	60ea                	ld	ra,152(sp)
    800128e8:	610d                	addi	sp,sp,160
    800128ea:	8082                	ret
        let file = curtask.open_files[old_fd].as_ref().unwrap();
    800128ec:	7542                	ld	a0,48(sp)

00000000800128ee <.LBB6_21>:
    800128ee:	00017617          	auipc	a2,0x17
    800128f2:	92260613          	addi	a2,a2,-1758 # 80029210 <.L__unnamed_6>
    800128f6:	06400593          	li	a1,100
    800128fa:	00010097          	auipc	ra,0x10
    800128fe:	9a8080e7          	jalr	-1624(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80012902:	0000                	unimp
        curtask.open_files[new_fd].replace(new_file);
    80012904:	6522                	ld	a0,8(sp)

0000000080012906 <.LBB6_22>:
    80012906:	00017617          	auipc	a2,0x17
    8001290a:	95260613          	addi	a2,a2,-1710 # 80029258 <.L__unnamed_7>
    8001290e:	06400593          	li	a1,100
    80012912:	00010097          	auipc	ra,0x10
    80012916:	990080e7          	jalr	-1648(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_read17hd83bd4f92523a35cE:

000000008001291c <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_read17hd83bd4f92523a35cE>:
    pub fn sys_read(&self) -> SysResult {
    8001291c:	7169                	addi	sp,sp,-304
    8001291e:	f606                	sd	ra,296(sp)
    80012920:	e8aa                	sd	a0,80(sp)
    80012922:	f1aa                	sd	a0,224(sp)
    80012924:	4581                	li	a1,0
        let fd = self.arg(0);
    80012926:	00003097          	auipc	ra,0x3
    8001292a:	884080e7          	jalr	-1916(ra) # 800151aa <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    8001292e:	85aa                	mv	a1,a0
    80012930:	ecae                	sd	a1,88(sp)
    80012932:	f5aa                	sd	a0,232(sp)
    80012934:	a009                	j	80012936 <.LBB7_20>

0000000080012936 <.LBB7_20>:
        let task = unsafe { CPU_MANAGER.myproc().unwrap() };
    80012936:	00061517          	auipc	a0,0x61
    8001293a:	80a50513          	addi	a0,a0,-2038 # 80073140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    8001293e:	fffff097          	auipc	ra,0xfffff
    80012942:	4c0080e7          	jalr	1216(ra) # 80011dfe <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    80012946:	e4aa                	sd	a0,72(sp)
    80012948:	a009                	j	8001294a <.LBB7_20+0x14>
    8001294a:	6526                	ld	a0,72(sp)

000000008001294c <.LBB7_21>:
    8001294c:	00017597          	auipc	a1,0x17
    80012950:	92458593          	addi	a1,a1,-1756 # 80029270 <.L__unnamed_8>
    80012954:	ffffc097          	auipc	ra,0xffffc
    80012958:	3f8080e7          	jalr	1016(ra) # 8000ed4c <_ZN4core6option15Option$LT$T$GT$6unwrap17h81f0c84c54a80648E>
    8001295c:	e0aa                	sd	a0,64(sp)
    8001295e:	a009                	j	80012960 <.LBB7_21+0x14>
    80012960:	65e6                	ld	a1,88(sp)
    80012962:	6506                	ld	a0,64(sp)
    80012964:	f9aa                	sd	a0,240(sp)
    80012966:	06300513          	li	a0,99
        let file = task.open_files[fd].as_ref().unwrap();
    8001296a:	0eb56e63          	bltu	a0,a1,80012a66 <.LBB7_24+0x36>
    8001296e:	a009                	j	80012970 <.LBB7_21+0x24>
    80012970:	6506                	ld	a0,64(sp)
    80012972:	65e6                	ld	a1,88(sp)
    80012974:	058e                	slli	a1,a1,0x3
    80012976:	952e                	add	a0,a0,a1
    80012978:	0a850513          	addi	a0,a0,168
    8001297c:	ffffc097          	auipc	ra,0xffffc
    80012980:	0c4080e7          	jalr	196(ra) # 8000ea40 <_ZN4core6option15Option$LT$T$GT$6as_ref17h0cd8921964ab0966E>
    80012984:	fc2a                	sd	a0,56(sp)
    80012986:	a009                	j	80012988 <.LBB7_21+0x3c>
    80012988:	7562                	ld	a0,56(sp)

000000008001298a <.LBB7_22>:
    8001298a:	00017597          	auipc	a1,0x17
    8001298e:	91658593          	addi	a1,a1,-1770 # 800292a0 <.L__unnamed_9>
    80012992:	ffffc097          	auipc	ra,0xffffc
    80012996:	3f0080e7          	jalr	1008(ra) # 8000ed82 <_ZN4core6option15Option$LT$T$GT$6unwrap17h84dba6f31c77e511E>
    8001299a:	85aa                	mv	a1,a0
    8001299c:	f82e                	sd	a1,48(sp)
    8001299e:	fdaa                	sd	a0,248(sp)
    800129a0:	a009                	j	800129a2 <.LBB7_22+0x18>
        let ptr = self.arg(1);
    800129a2:	6546                	ld	a0,80(sp)
    800129a4:	4585                	li	a1,1
    800129a6:	00003097          	auipc	ra,0x3
    800129aa:	804080e7          	jalr	-2044(ra) # 800151aa <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    800129ae:	85aa                	mv	a1,a0
    800129b0:	f42e                	sd	a1,40(sp)
    800129b2:	e22a                	sd	a0,256(sp)
    800129b4:	a009                	j	800129b6 <.LBB7_22+0x2c>
        let len = self.arg(2);
    800129b6:	6546                	ld	a0,80(sp)
    800129b8:	4589                	li	a1,2
    800129ba:	00002097          	auipc	ra,0x2
    800129be:	7f0080e7          	jalr	2032(ra) # 800151aa <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    800129c2:	85aa                	mv	a1,a0
    800129c4:	f02e                	sd	a1,32(sp)
    800129c6:	e62a                	sd	a0,264(sp)
    800129c8:	a009                	j	800129ca <.LBB7_22+0x40>
        match file.read(ptr, len) {
    800129ca:	7542                	ld	a0,48(sp)
    800129cc:	ffff0097          	auipc	ra,0xffff0
    800129d0:	bfe080e7          	jalr	-1026(ra) # 800025ca <_ZN69_$LT$alloc..sync..Arc$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h7c280ba665690166E>
    800129d4:	ec2a                	sd	a0,24(sp)
    800129d6:	a009                	j	800129d8 <.LBB7_22+0x4e>
    800129d8:	7682                	ld	a3,32(sp)
    800129da:	7622                	ld	a2,40(sp)
    800129dc:	65e2                	ld	a1,24(sp)
    800129de:	1888                	addi	a0,sp,112
    800129e0:	ffff3097          	auipc	ra,0xffff3
    800129e4:	d5a080e7          	jalr	-678(ra) # 8000573a <_ZN6kernel2fs4file5VFile4read17h537db93950e2de6aE>
    800129e8:	a009                	j	800129ea <.LBB7_22+0x60>
            Ok(cur_size) => {
    800129ea:	7546                	ld	a0,112(sp)
    800129ec:	4581                	li	a1,0
    800129ee:	02b50663          	beq	a0,a1,80012a1a <.LBB7_23+0x18>
    800129f2:	a009                	j	800129f4 <.LBB7_22+0x6a>
            Err(err) => {
    800129f4:	75e6                	ld	a1,120(sp)
    800129f6:	650a                	ld	a0,128(sp)
    800129f8:	e52e                	sd	a1,136(sp)
    800129fa:	e92a                	sd	a0,144(sp)
    800129fc:	0128                	addi	a0,sp,136
                println!("[kernel] sys_read: err: {}", err);
    800129fe:	edaa                	sd	a0,216(sp)
    80012a00:	ea2a                	sd	a0,272(sp)

0000000080012a02 <.LBB7_23>:
    80012a02:	0000c597          	auipc	a1,0xc
    80012a06:	bb258593          	addi	a1,a1,-1102 # 8001e5b4 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E>
    80012a0a:	0000c097          	auipc	ra,0xc
    80012a0e:	bf0080e7          	jalr	-1040(ra) # 8001e5fa <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>
    80012a12:	e42a                	sd	a0,8(sp)
    80012a14:	e82e                	sd	a1,16(sp)
    80012a16:	a809                	j	80012a28 <.LBB7_23+0x26>
        match file.read(ptr, len) {
    80012a18:	0000                	unimp
            Ok(cur_size) => {
    80012a1a:	7566                	ld	a0,120(sp)
    80012a1c:	ee2a                	sd	a0,280(sp)
                size = cur_size;
    80012a1e:	f22a                	sd	a0,288(sp)
        Ok(size)
    80012a20:	f4aa                	sd	a0,104(sp)
    80012a22:	4501                	li	a0,0
    80012a24:	f0aa                	sd	a0,96(sp)
    }
    80012a26:	a81d                	j	80012a5c <.LBB7_24+0x2c>
                println!("[kernel] sys_read: err: {}", err);
    80012a28:	6542                	ld	a0,16(sp)
    80012a2a:	65a2                	ld	a1,8(sp)
    80012a2c:	e5ae                	sd	a1,200(sp)
    80012a2e:	e9aa                	sd	a0,208(sp)

0000000080012a30 <.LBB7_24>:
    80012a30:	00017597          	auipc	a1,0x17
    80012a34:	8a858593          	addi	a1,a1,-1880 # 800292d8 <.L__unnamed_10>
    80012a38:	0928                	addi	a0,sp,152
    80012a3a:	4609                	li	a2,2
    80012a3c:	01b4                	addi	a3,sp,200
    80012a3e:	4705                	li	a4,1
    80012a40:	ffff3097          	auipc	ra,0xffff3
    80012a44:	a2a080e7          	jalr	-1494(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80012a48:	a009                	j	80012a4a <.LBB7_24+0x1a>
    80012a4a:	0928                	addi	a0,sp,152
    80012a4c:	0000b097          	auipc	ra,0xb
    80012a50:	300080e7          	jalr	768(ra) # 8001dd4c <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    80012a54:	a009                	j	80012a56 <.LBB7_24+0x26>
    80012a56:	4505                	li	a0,1
                return Err(())
    80012a58:	f0aa                	sd	a0,96(sp)
    }
    80012a5a:	a009                	j	80012a5c <.LBB7_24+0x2c>
    80012a5c:	7506                	ld	a0,96(sp)
    80012a5e:	75a6                	ld	a1,104(sp)
    80012a60:	70b2                	ld	ra,296(sp)
    80012a62:	6155                	addi	sp,sp,304
    80012a64:	8082                	ret
        let file = task.open_files[fd].as_ref().unwrap();
    80012a66:	6566                	ld	a0,88(sp)

0000000080012a68 <.LBB7_25>:
    80012a68:	00017617          	auipc	a2,0x17
    80012a6c:	82060613          	addi	a2,a2,-2016 # 80029288 <.L__unnamed_11>
    80012a70:	06400593          	li	a1,100
    80012a74:	00010097          	auipc	ra,0x10
    80012a78:	82e080e7          	jalr	-2002(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$9sys_write17hc5a72fe3cb6d9324E:

0000000080012a7e <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$9sys_write17hc5a72fe3cb6d9324E>:
    pub fn sys_write(&self) -> SysResult {
    80012a7e:	7169                	addi	sp,sp,-304
    80012a80:	f606                	sd	ra,296(sp)
    80012a82:	e8aa                	sd	a0,80(sp)
    80012a84:	f1aa                	sd	a0,224(sp)
    80012a86:	4581                	li	a1,0
        let fd = self.arg(0);
    80012a88:	00002097          	auipc	ra,0x2
    80012a8c:	722080e7          	jalr	1826(ra) # 800151aa <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    80012a90:	85aa                	mv	a1,a0
    80012a92:	ecae                	sd	a1,88(sp)
    80012a94:	f5aa                	sd	a0,232(sp)
    80012a96:	a009                	j	80012a98 <.LBB8_20>

0000000080012a98 <.LBB8_20>:
        let task = unsafe { CPU_MANAGER.myproc().unwrap() };
    80012a98:	00060517          	auipc	a0,0x60
    80012a9c:	6a850513          	addi	a0,a0,1704 # 80073140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    80012aa0:	fffff097          	auipc	ra,0xfffff
    80012aa4:	35e080e7          	jalr	862(ra) # 80011dfe <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    80012aa8:	e4aa                	sd	a0,72(sp)
    80012aaa:	a009                	j	80012aac <.LBB8_20+0x14>
    80012aac:	6526                	ld	a0,72(sp)

0000000080012aae <.LBB8_21>:
    80012aae:	00017597          	auipc	a1,0x17
    80012ab2:	84a58593          	addi	a1,a1,-1974 # 800292f8 <.L__unnamed_12>
    80012ab6:	ffffc097          	auipc	ra,0xffffc
    80012aba:	296080e7          	jalr	662(ra) # 8000ed4c <_ZN4core6option15Option$LT$T$GT$6unwrap17h81f0c84c54a80648E>
    80012abe:	e0aa                	sd	a0,64(sp)
    80012ac0:	a009                	j	80012ac2 <.LBB8_21+0x14>
    80012ac2:	65e6                	ld	a1,88(sp)
    80012ac4:	6506                	ld	a0,64(sp)
    80012ac6:	f9aa                	sd	a0,240(sp)
    80012ac8:	06300513          	li	a0,99
        let file = task.open_files[fd].as_ref().unwrap();
    80012acc:	0eb56e63          	bltu	a0,a1,80012bc8 <.LBB8_24+0x36>
    80012ad0:	a009                	j	80012ad2 <.LBB8_21+0x24>
    80012ad2:	6506                	ld	a0,64(sp)
    80012ad4:	65e6                	ld	a1,88(sp)
    80012ad6:	058e                	slli	a1,a1,0x3
    80012ad8:	952e                	add	a0,a0,a1
    80012ada:	0a850513          	addi	a0,a0,168
    80012ade:	ffffc097          	auipc	ra,0xffffc
    80012ae2:	f62080e7          	jalr	-158(ra) # 8000ea40 <_ZN4core6option15Option$LT$T$GT$6as_ref17h0cd8921964ab0966E>
    80012ae6:	fc2a                	sd	a0,56(sp)
    80012ae8:	a009                	j	80012aea <.LBB8_21+0x3c>
    80012aea:	7562                	ld	a0,56(sp)

0000000080012aec <.LBB8_22>:
    80012aec:	00017597          	auipc	a1,0x17
    80012af0:	83c58593          	addi	a1,a1,-1988 # 80029328 <.L__unnamed_13>
    80012af4:	ffffc097          	auipc	ra,0xffffc
    80012af8:	28e080e7          	jalr	654(ra) # 8000ed82 <_ZN4core6option15Option$LT$T$GT$6unwrap17h84dba6f31c77e511E>
    80012afc:	85aa                	mv	a1,a0
    80012afe:	f82e                	sd	a1,48(sp)
    80012b00:	fdaa                	sd	a0,248(sp)
    80012b02:	a009                	j	80012b04 <.LBB8_22+0x18>
        let ptr = self.arg(1);
    80012b04:	6546                	ld	a0,80(sp)
    80012b06:	4585                	li	a1,1
    80012b08:	00002097          	auipc	ra,0x2
    80012b0c:	6a2080e7          	jalr	1698(ra) # 800151aa <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    80012b10:	85aa                	mv	a1,a0
    80012b12:	f42e                	sd	a1,40(sp)
    80012b14:	e22a                	sd	a0,256(sp)
    80012b16:	a009                	j	80012b18 <.LBB8_22+0x2c>
        let len = self.arg(2);
    80012b18:	6546                	ld	a0,80(sp)
    80012b1a:	4589                	li	a1,2
    80012b1c:	00002097          	auipc	ra,0x2
    80012b20:	68e080e7          	jalr	1678(ra) # 800151aa <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    80012b24:	85aa                	mv	a1,a0
    80012b26:	f02e                	sd	a1,32(sp)
    80012b28:	e62a                	sd	a0,264(sp)
    80012b2a:	a009                	j	80012b2c <.LBB8_22+0x40>
        match file.write(ptr, len) {
    80012b2c:	7542                	ld	a0,48(sp)
    80012b2e:	ffff0097          	auipc	ra,0xffff0
    80012b32:	a9c080e7          	jalr	-1380(ra) # 800025ca <_ZN69_$LT$alloc..sync..Arc$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h7c280ba665690166E>
    80012b36:	ec2a                	sd	a0,24(sp)
    80012b38:	a009                	j	80012b3a <.LBB8_22+0x4e>
    80012b3a:	7682                	ld	a3,32(sp)
    80012b3c:	7622                	ld	a2,40(sp)
    80012b3e:	65e2                	ld	a1,24(sp)
    80012b40:	1888                	addi	a0,sp,112
    80012b42:	ffff3097          	auipc	ra,0xffff3
    80012b46:	f7c080e7          	jalr	-132(ra) # 80005abe <_ZN6kernel2fs4file5VFile5write17h6504f6f101707b61E>
    80012b4a:	a009                	j	80012b4c <.LBB8_22+0x60>
            Ok(cur_size) => {
    80012b4c:	7546                	ld	a0,112(sp)
    80012b4e:	4581                	li	a1,0
    80012b50:	02b50663          	beq	a0,a1,80012b7c <.LBB8_23+0x18>
    80012b54:	a009                	j	80012b56 <.LBB8_22+0x6a>
            Err(err) => {
    80012b56:	75e6                	ld	a1,120(sp)
    80012b58:	650a                	ld	a0,128(sp)
    80012b5a:	e52e                	sd	a1,136(sp)
    80012b5c:	e92a                	sd	a0,144(sp)
    80012b5e:	0128                	addi	a0,sp,136
                println!("[Kernel] sys_write: err: {}", err);
    80012b60:	edaa                	sd	a0,216(sp)
    80012b62:	ea2a                	sd	a0,272(sp)

0000000080012b64 <.LBB8_23>:
    80012b64:	0000c597          	auipc	a1,0xc
    80012b68:	a5058593          	addi	a1,a1,-1456 # 8001e5b4 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E>
    80012b6c:	0000c097          	auipc	ra,0xc
    80012b70:	a8e080e7          	jalr	-1394(ra) # 8001e5fa <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>
    80012b74:	e42a                	sd	a0,8(sp)
    80012b76:	e82e                	sd	a1,16(sp)
    80012b78:	a809                	j	80012b8a <.LBB8_23+0x26>
        match file.write(ptr, len) {
    80012b7a:	0000                	unimp
            Ok(cur_size) => {
    80012b7c:	7566                	ld	a0,120(sp)
    80012b7e:	ee2a                	sd	a0,280(sp)
                size = cur_size;
    80012b80:	f22a                	sd	a0,288(sp)
        Ok(size)
    80012b82:	f4aa                	sd	a0,104(sp)
    80012b84:	4501                	li	a0,0
    80012b86:	f0aa                	sd	a0,96(sp)
    }
    80012b88:	a81d                	j	80012bbe <.LBB8_24+0x2c>
                println!("[Kernel] sys_write: err: {}", err);
    80012b8a:	6542                	ld	a0,16(sp)
    80012b8c:	65a2                	ld	a1,8(sp)
    80012b8e:	e5ae                	sd	a1,200(sp)
    80012b90:	e9aa                	sd	a0,208(sp)

0000000080012b92 <.LBB8_24>:
    80012b92:	00016597          	auipc	a1,0x16
    80012b96:	7ce58593          	addi	a1,a1,1998 # 80029360 <.L__unnamed_14>
    80012b9a:	0928                	addi	a0,sp,152
    80012b9c:	4609                	li	a2,2
    80012b9e:	01b4                	addi	a3,sp,200
    80012ba0:	4705                	li	a4,1
    80012ba2:	ffff3097          	auipc	ra,0xffff3
    80012ba6:	8c8080e7          	jalr	-1848(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80012baa:	a009                	j	80012bac <.LBB8_24+0x1a>
    80012bac:	0928                	addi	a0,sp,152
    80012bae:	0000b097          	auipc	ra,0xb
    80012bb2:	19e080e7          	jalr	414(ra) # 8001dd4c <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    80012bb6:	a009                	j	80012bb8 <.LBB8_24+0x26>
    80012bb8:	4505                	li	a0,1
                return Err(())
    80012bba:	f0aa                	sd	a0,96(sp)
    }
    80012bbc:	a009                	j	80012bbe <.LBB8_24+0x2c>
    80012bbe:	7506                	ld	a0,96(sp)
    80012bc0:	75a6                	ld	a1,104(sp)
    80012bc2:	70b2                	ld	ra,296(sp)
    80012bc4:	6155                	addi	sp,sp,304
    80012bc6:	8082                	ret
        let file = task.open_files[fd].as_ref().unwrap();
    80012bc8:	6566                	ld	a0,88(sp)

0000000080012bca <.LBB8_25>:
    80012bca:	00016617          	auipc	a2,0x16
    80012bce:	74660613          	addi	a2,a2,1862 # 80029310 <.L__unnamed_15>
    80012bd2:	06400593          	li	a1,100
    80012bd6:	0000f097          	auipc	ra,0xf
    80012bda:	6cc080e7          	jalr	1740(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_open17h5b5b1f6af7439fbcE:

0000000080012be0 <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_open17h5b5b1f6af7439fbcE>:
    pub fn sys_open(&self) -> SysResult {
    80012be0:	c5010113          	addi	sp,sp,-944
    80012be4:	3a113423          	sd	ra,936(sp)
    80012be8:	f52a                	sd	a0,168(sp)
    80012bea:	36a13c23          	sd	a0,888(sp)
    80012bee:	4581                	li	a1,0
        let mut path = [0;MAXPATH];
    80012bf0:	f12e                	sd	a1,160(sp)
    80012bf2:	36b10ba3          	sb	a1,887(sp)
    80012bf6:	36b10b23          	sb	a1,886(sp)
    80012bfa:	01a8                	addi	a0,sp,200
    80012bfc:	08000613          	li	a2,128
    80012c00:	00012097          	auipc	ra,0x12
    80012c04:	536080e7          	jalr	1334(ra) # 80025136 <memset>
    80012c08:	758a                	ld	a1,160(sp)
        let addr = self.arg(0);
    80012c0a:	752a                	ld	a0,168(sp)
    80012c0c:	00002097          	auipc	ra,0x2
    80012c10:	59e080e7          	jalr	1438(ra) # 800151aa <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    80012c14:	85aa                	mv	a1,a0
    80012c16:	f92e                	sd	a1,176(sp)
    80012c18:	38a13023          	sd	a0,896(sp)
    80012c1c:	a009                	j	80012c1e <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_open17h5b5b1f6af7439fbcE+0x3e>
        self.copy_from_str(addr, &mut path, MAXPATH).unwrap();
    80012c1e:	75ca                	ld	a1,176(sp)
    80012c20:	752a                	ld	a0,168(sp)
    80012c22:	01b0                	addi	a2,sp,200
    80012c24:	08000713          	li	a4,128
    80012c28:	86ba                	mv	a3,a4
    80012c2a:	00002097          	auipc	ra,0x2
    80012c2e:	630080e7          	jalr	1584(ra) # 8001525a <_ZN6kernel7syscall7Syscall13copy_from_str17h5c83be6e0d4b822aE>
    80012c32:	ed2a                	sd	a0,152(sp)
    80012c34:	a009                	j	80012c36 <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_open17h5b5b1f6af7439fbcE+0x56>
    80012c36:	656a                	ld	a0,152(sp)

0000000080012c38 <.LBB9_78>:
    80012c38:	00016597          	auipc	a1,0x16
    80012c3c:	74858593          	addi	a1,a1,1864 # 80029380 <.L__unnamed_16>
    80012c40:	ffffa097          	auipc	ra,0xffffa
    80012c44:	2f4080e7          	jalr	756(ra) # 8000cf34 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17hea14d8d7b2208f82E>
    80012c48:	a009                	j	80012c4a <.LBB9_78+0x12>
        let open_mode = self.arg(1);
    80012c4a:	752a                	ld	a0,168(sp)
    80012c4c:	4585                	li	a1,1
    80012c4e:	00002097          	auipc	ra,0x2
    80012c52:	55c080e7          	jalr	1372(ra) # 800151aa <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    80012c56:	f32a                	sd	a0,416(sp)
    80012c58:	a009                	j	80012c5a <.LBB9_79>

0000000080012c5a <.LBB9_79>:
        LOG.begin_op();
    80012c5a:	00055517          	auipc	a0,0x55
    80012c5e:	d8e50513          	addi	a0,a0,-626 # 800679e8 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    80012c62:	ffff6097          	auipc	ra,0xffff6
    80012c66:	f50080e7          	jalr	-176(ra) # 80008bb2 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$8begin_op17he5b49a48c716e372E>
    80012c6a:	a009                	j	80012c6c <.LBB9_79+0x12>
        match OpenMode::mode(open_mode) {
    80012c6c:	751a                	ld	a0,416(sp)
    80012c6e:	00006097          	auipc	ra,0x6
    80012c72:	820080e7          	jalr	-2016(ra) # 8001848e <_ZN6kernel4arch5riscv4qemu2fs8OpenMode4mode17h15bbb1ea8002b902E>
    80012c76:	f72a                	sd	a0,424(sp)
    80012c78:	a009                	j	80012c7a <.LBB9_79+0x20>
            OpenMode::CREATE => {
    80012c7a:	753a                	ld	a0,424(sp)
    80012c7c:	20000593          	li	a1,512
    80012c80:	02b50063          	beq	a0,a1,80012ca0 <.LBB9_80+0x1a>
    80012c84:	a009                	j	80012c86 <.LBB9_80>

0000000080012c86 <.LBB9_80>:
                match ICACHE.namei(&path) {
    80012c86:	00055597          	auipc	a1,0x55
    80012c8a:	e0a58593          	addi	a1,a1,-502 # 80067a90 <_ZN6kernel2fs5inode6ICACHE17had1be8942ca79bf1E>
    80012c8e:	04a8                	addi	a0,sp,584
    80012c90:	01b0                	addi	a2,sp,200
    80012c92:	08000693          	li	a3,128
    80012c96:	00006097          	auipc	ra,0x6
    80012c9a:	7dc080e7          	jalr	2012(ra) # 80019472 <_ZN6kernel2fs5inode10InodeCache5namei17hc269c6a9eecf1991E>
    80012c9e:	a8d1                	j	80012d72 <.LBB9_84+0x2c>
    80012ca0:	4709                	li	a4,2
                match ICACHE.create(&path, crate::fs::InodeType::File, 0, 0) {
    80012ca2:	1ce11723          	sh	a4,462(sp)

0000000080012ca6 <.LBB9_81>:
    80012ca6:	00055597          	auipc	a1,0x55
    80012caa:	dea58593          	addi	a1,a1,-534 # 80067a90 <_ZN6kernel2fs5inode6ICACHE17had1be8942ca79bf1E>
    80012cae:	1b08                	addi	a0,sp,432
    80012cb0:	01b0                	addi	a2,sp,200
    80012cb2:	08000693          	li	a3,128
    80012cb6:	4801                	li	a6,0
    80012cb8:	87c2                	mv	a5,a6
    80012cba:	00006097          	auipc	ra,0x6
    80012cbe:	7fc080e7          	jalr	2044(ra) # 800194b6 <_ZN6kernel2fs5inode10InodeCache6create17h24595de16ee7205aE>
    80012cc2:	a009                	j	80012cc4 <.LBB9_81+0x1e>
                    Ok(cur_inode) => {
    80012cc4:	755a                	ld	a0,432(sp)
    80012cc6:	4581                	li	a1,0
    80012cc8:	02b50163          	beq	a0,a1,80012cea <.LBB9_82+0x14>
    80012ccc:	a009                	j	80012cce <.LBB9_81+0x28>
                    Err(err) => {
    80012cce:	75fa                	ld	a1,440(sp)
    80012cd0:	651e                	ld	a0,448(sp)
    80012cd2:	fbae                	sd	a1,496(sp)
    80012cd4:	ffaa                	sd	a0,504(sp)

0000000080012cd6 <.LBB9_82>:
                        LOG.end_op();
    80012cd6:	00055517          	auipc	a0,0x55
    80012cda:	d1250513          	addi	a0,a0,-750 # 800679e8 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    80012cde:	ffff6097          	auipc	ra,0xffff6
    80012ce2:	4ba080e7          	jalr	1210(ra) # 80009198 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>
    80012ce6:	a815                	j	80012d1a <.LBB9_82+0x44>
                match ICACHE.create(&path, crate::fs::InodeType::File, 0, 0) {
    80012ce8:	0000                	unimp
                    Ok(cur_inode) => {
    80012cea:	651e                	ld	a0,448(sp)
    80012cec:	efaa                	sd	a0,472(sp)
    80012cee:	75fa                	ld	a1,440(sp)
    80012cf0:	ebae                	sd	a1,464(sp)
                        inode = cur_inode;
    80012cf2:	f3ae                	sd	a1,480(sp)
    80012cf4:	f7aa                	sd	a0,488(sp)
    80012cf6:	4605                	li	a2,1
    80012cf8:	36c10ba3          	sb	a2,887(sp)
    80012cfc:	e6ae                	sd	a1,328(sp)
    80012cfe:	eaaa                	sd	a0,336(sp)
    80012d00:	02a8                	addi	a0,sp,328
                        inode_guard = inode.lock();
    80012d02:	00008097          	auipc	ra,0x8
    80012d06:	1b4080e7          	jalr	436(ra) # 8001aeb6 <_ZN6kernel2fs5inode5Inode4lock17he70970c593f751adE>
    80012d0a:	e52a                	sd	a0,136(sp)
    80012d0c:	e92e                	sd	a1,144(sp)
    80012d0e:	a009                	j	80012d10 <.LBB9_82+0x3a>
    80012d10:	654a                	ld	a0,144(sp)
    80012d12:	65aa                	ld	a1,136(sp)
    80012d14:	eb2e                	sd	a1,400(sp)
    80012d16:	ef2a                	sd	a0,408(sp)
        match OpenMode::mode(open_mode) {
    80012d18:	aa15                	j	80012e4c <.LBB9_87+0x1e>
    80012d1a:	1b88                	addi	a0,sp,496
                        println!("[Kernel] syscall: sys_open: {}", err);
    80012d1c:	24a13023          	sd	a0,576(sp)
    80012d20:	38a13423          	sd	a0,904(sp)

0000000080012d24 <.LBB9_83>:
    80012d24:	0000c597          	auipc	a1,0xc
    80012d28:	89058593          	addi	a1,a1,-1904 # 8001e5b4 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E>
    80012d2c:	0000c097          	auipc	ra,0xc
    80012d30:	8ce080e7          	jalr	-1842(ra) # 8001e5fa <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>
    80012d34:	fcaa                	sd	a0,120(sp)
    80012d36:	e12e                	sd	a1,128(sp)
    80012d38:	a009                	j	80012d3a <.LBB9_83+0x16>
    80012d3a:	650a                	ld	a0,128(sp)
    80012d3c:	75e6                	ld	a1,120(sp)
    80012d3e:	22b13823          	sd	a1,560(sp)
    80012d42:	22a13c23          	sd	a0,568(sp)

0000000080012d46 <.LBB9_84>:
    80012d46:	00016597          	auipc	a1,0x16
    80012d4a:	67258593          	addi	a1,a1,1650 # 800293b8 <.L__unnamed_17>
    80012d4e:	0408                	addi	a0,sp,512
    80012d50:	4609                	li	a2,2
    80012d52:	1c14                	addi	a3,sp,560
    80012d54:	4705                	li	a4,1
    80012d56:	ffff2097          	auipc	ra,0xffff2
    80012d5a:	714080e7          	jalr	1812(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80012d5e:	a009                	j	80012d60 <.LBB9_84+0x1a>
    80012d60:	0408                	addi	a0,sp,512
    80012d62:	0000b097          	auipc	ra,0xb
    80012d66:	fea080e7          	jalr	-22(ra) # 8001dd4c <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    80012d6a:	a009                	j	80012d6c <.LBB9_84+0x26>
    80012d6c:	4505                	li	a0,1
                        return Err(())
    80012d6e:	fd2a                	sd	a0,184(sp)
    80012d70:	a631                	j	8001307c <.LBB9_92+0x38>
                    Some(cur_inode) => {
    80012d72:	24813503          	ld	a0,584(sp)
    80012d76:	4581                	li	a1,0
    80012d78:	00b50463          	beq	a0,a1,80012d80 <.LBB9_85>
    80012d7c:	a009                	j	80012d7e <.LBB9_84+0x38>
    80012d7e:	a819                	j	80012d94 <.LBB9_85+0x14>

0000000080012d80 <.LBB9_85>:
                        LOG.end_op();
    80012d80:	00055517          	auipc	a0,0x55
    80012d84:	c6850513          	addi	a0,a0,-920 # 800679e8 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    80012d88:	ffff6097          	auipc	ra,0xffff6
    80012d8c:	410080e7          	jalr	1040(ra) # 80009198 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>
    80012d90:	a85d                	j	80012e46 <.LBB9_87+0x18>
                match ICACHE.namei(&path) {
    80012d92:	0000                	unimp
                    Some(cur_inode) => {
    80012d94:	25813503          	ld	a0,600(sp)
    80012d98:	26a13423          	sd	a0,616(sp)
    80012d9c:	25013583          	ld	a1,592(sp)
    80012da0:	26b13023          	sd	a1,608(sp)
                        inode = cur_inode;
    80012da4:	26b13823          	sd	a1,624(sp)
    80012da8:	26a13c23          	sd	a0,632(sp)
    80012dac:	4605                	li	a2,1
    80012dae:	36c10ba3          	sb	a2,887(sp)
    80012db2:	e6ae                	sd	a1,328(sp)
    80012db4:	eaaa                	sd	a0,336(sp)
    80012db6:	02a8                	addi	a0,sp,328
                        inode_guard = inode.lock();
    80012db8:	00008097          	auipc	ra,0x8
    80012dbc:	0fe080e7          	jalr	254(ra) # 8001aeb6 <_ZN6kernel2fs5inode5Inode4lock17he70970c593f751adE>
    80012dc0:	f4aa                	sd	a0,104(sp)
    80012dc2:	f8ae                	sd	a1,112(sp)
    80012dc4:	a009                	j	80012dc6 <.LBB9_85+0x46>
    80012dc6:	7546                	ld	a0,112(sp)
    80012dc8:	75a6                	ld	a1,104(sp)
    80012dca:	eb2e                	sd	a1,400(sp)
    80012dcc:	ef2a                	sd	a0,408(sp)
    80012dce:	0b08                	addi	a0,sp,400
                        if inode_guard.dinode.itype == InodeType::Directory && open_mode != OpenMode::RDONLY as usize {
    80012dd0:	0000b097          	auipc	ra,0xb
    80012dd4:	8fe080e7          	jalr	-1794(ra) # 8001d6ce <_ZN92_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfc7812d7ca7ab1e1E>
    80012dd8:	f0aa                	sd	a0,96(sp)
    80012dda:	a01d                	j	80012e00 <.LBB9_85+0x80>
    80012ddc:	4505                	li	a0,1
    80012dde:	28a103a3          	sb	a0,647(sp)
    80012de2:	a811                	j	80012df6 <.LBB9_85+0x76>
    80012de4:	4501                	li	a0,0
    80012de6:	28a103a3          	sb	a0,647(sp)
    80012dea:	a031                	j	80012df6 <.LBB9_85+0x76>
    80012dec:	751a                	ld	a0,416(sp)
    80012dee:	4581                	li	a1,0
    80012df0:	feb516e3          	bne	a0,a1,80012ddc <.LBB9_85+0x5c>
    80012df4:	bfc5                	j	80012de4 <.LBB9_85+0x64>
    80012df6:	28714503          	lbu	a0,647(sp)
    80012dfa:	8905                	andi	a0,a0,1
    80012dfc:	e10d                	bnez	a0,80012e1e <.LBB9_86+0x1a>
    80012dfe:	a03d                	j	80012e2c <.LBB9_86+0x28>
    80012e00:	7506                	ld	a0,96(sp)
    80012e02:	0521                	addi	a0,a0,8

0000000080012e04 <.LBB9_86>:
    80012e04:	00016597          	auipc	a1,0x16
    80012e08:	59458593          	addi	a1,a1,1428 # 80029398 <.L__unnamed_18>
    80012e0c:	ffff5097          	auipc	ra,0xffff5
    80012e10:	5b6080e7          	jalr	1462(ra) # 800083c2 <_ZN70_$LT$kernel..fs..dinode..InodeType$u20$as$u20$core..cmp..PartialEq$GT$2eq17ha4431a2c7299d33fE>
    80012e14:	ecaa                	sd	a0,88(sp)
    80012e16:	a009                	j	80012e18 <.LBB9_86+0x14>
    80012e18:	6566                	ld	a0,88(sp)
    80012e1a:	f969                	bnez	a0,80012dec <.LBB9_85+0x6c>
    80012e1c:	b7e1                	j	80012de4 <.LBB9_85+0x64>
                            drop(inode_guard);
    80012e1e:	655a                	ld	a0,400(sp)
    80012e20:	65fa                	ld	a1,408(sp)
    80012e22:	0000a097          	auipc	ra,0xa
    80012e26:	246080e7          	jalr	582(ra) # 8001d068 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    80012e2a:	a011                	j	80012e2e <.LBB9_87>
        match OpenMode::mode(open_mode) {
    80012e2c:	a005                	j	80012e4c <.LBB9_87+0x1e>

0000000080012e2e <.LBB9_87>:
                            LOG.end_op();
    80012e2e:	00055517          	auipc	a0,0x55
    80012e32:	bba50513          	addi	a0,a0,-1094 # 800679e8 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    80012e36:	ffff6097          	auipc	ra,0xffff6
    80012e3a:	362080e7          	jalr	866(ra) # 80009198 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>
    80012e3e:	a009                	j	80012e40 <.LBB9_87+0x12>
    80012e40:	4505                	li	a0,1
                            return Err(());
    80012e42:	fd2a                	sd	a0,184(sp)
    80012e44:	a4c9                	j	80013106 <.LBB9_92+0xc2>
    80012e46:	4505                	li	a0,1
                        return Err(())
    80012e48:	fd2a                	sd	a0,184(sp)
    80012e4a:	ac75                	j	80013106 <.LBB9_92+0xc2>
    80012e4c:	0528                	addi	a0,sp,648
        file = VFile::init();
    80012e4e:	ffff3097          	auipc	ra,0xffff3
    80012e52:	8bc080e7          	jalr	-1860(ra) # 8000570a <_ZN6kernel2fs4file5VFile4init17h000c38ec0bf103cfE>
    80012e56:	a499                	j	8001309c <.LBB9_92+0x58>
            InodeType::Device => {
    80012e58:	2c013503          	ld	a0,704(sp)
    80012e5c:	00855503          	lhu	a0,8(a0)
    80012e60:	458d                	li	a1,3
    80012e62:	02b50063          	beq	a0,a1,80012e82 <.LBB9_87+0x54>
    80012e66:	a009                	j	80012e68 <.LBB9_87+0x3a>
    80012e68:	4509                	li	a0,2
                file.ftype = FileType::Inode;
    80012e6a:	2ca11623          	sh	a0,716(sp)
    80012e6e:	18a11223          	sh	a0,388(sp)
    80012e72:	4501                	li	a0,0
                file.offset = 0;
    80012e74:	18a12023          	sw	a0,384(sp)
    80012e78:	10100513          	li	a0,257
                file.readable = true;
    80012e7c:	18a11423          	sh	a0,392(sp)
        match inode_guard.dinode.itype {
    80012e80:	a03d                	j	80012eae <.LBB9_87+0x80>
    80012e82:	450d                	li	a0,3
                file.ftype = FileType::Device;
    80012e84:	2ca11523          	sh	a0,714(sp)
    80012e88:	18a11223          	sh	a0,388(sp)
    80012e8c:	0b08                	addi	a0,sp,400
                file.major = inode_guard.dinode.major;
    80012e8e:	0000b097          	auipc	ra,0xb
    80012e92:	840080e7          	jalr	-1984(ra) # 8001d6ce <_ZN92_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfc7812d7ca7ab1e1E>
    80012e96:	e8aa                	sd	a0,80(sp)
    80012e98:	a009                	j	80012e9a <.LBB9_87+0x6c>
    80012e9a:	6546                	ld	a0,80(sp)
    80012e9c:	00a51503          	lh	a0,10(a0)
    80012ea0:	18a11323          	sh	a0,390(sp)
    80012ea4:	10100513          	li	a0,257
                file.readable = true;
    80012ea8:	18a11423          	sh	a0,392(sp)
        match inode_guard.dinode.itype {
    80012eac:	a009                	j	80012eae <.LBB9_87+0x80>
    80012eae:	1308                	addi	a0,sp,416
    80012eb0:	45ad                	li	a1,11
        if open_mode.get_bit(11) && inode_guard.dinode.itype == InodeType::File {
    80012eb2:	ffff1097          	auipc	ra,0xffff1
    80012eb6:	e6a080e7          	jalr	-406(ra) # 80003d1c <_ZN45_$LT$usize$u20$as$u20$bit_field..BitField$GT$7get_bit17ha84b909d1dae7859E>
    80012eba:	e4aa                	sd	a0,72(sp)
    80012ebc:	a02d                	j	80012ee6 <.LBB9_87+0xb8>
    80012ebe:	4505                	li	a0,1
    80012ec0:	2ca107a3          	sb	a0,719(sp)
    80012ec4:	a821                	j	80012edc <.LBB9_87+0xae>
    80012ec6:	4501                	li	a0,0
    80012ec8:	2ca107a3          	sb	a0,719(sp)
    80012ecc:	a801                	j	80012edc <.LBB9_87+0xae>
    80012ece:	0b08                	addi	a0,sp,400
    80012ed0:	0000a097          	auipc	ra,0xa
    80012ed4:	7fe080e7          	jalr	2046(ra) # 8001d6ce <_ZN92_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfc7812d7ca7ab1e1E>
    80012ed8:	e0aa                	sd	a0,64(sp)
    80012eda:	a809                	j	80012eec <.LBB9_87+0xbe>
    80012edc:	2cf14503          	lbu	a0,719(sp)
    80012ee0:	8905                	andi	a0,a0,1
    80012ee2:	e505                	bnez	a0,80012f0a <.LBB9_88+0x1a>
    80012ee4:	a815                	j	80012f18 <.LBB9_88+0x28>
    80012ee6:	6526                	ld	a0,72(sp)
    80012ee8:	f17d                	bnez	a0,80012ece <.LBB9_87+0xa0>
    80012eea:	bff1                	j	80012ec6 <.LBB9_87+0x98>
    80012eec:	6506                	ld	a0,64(sp)
    80012eee:	0521                	addi	a0,a0,8

0000000080012ef0 <.LBB9_88>:
    80012ef0:	00016597          	auipc	a1,0x16
    80012ef4:	4e858593          	addi	a1,a1,1256 # 800293d8 <.L__unnamed_19>
    80012ef8:	ffff5097          	auipc	ra,0xffff5
    80012efc:	4ca080e7          	jalr	1226(ra) # 800083c2 <_ZN70_$LT$kernel..fs..dinode..InodeType$u20$as$u20$core..cmp..PartialEq$GT$2eq17ha4431a2c7299d33fE>
    80012f00:	fc2a                	sd	a0,56(sp)
    80012f02:	a009                	j	80012f04 <.LBB9_88+0x14>
    80012f04:	7562                	ld	a0,56(sp)
    80012f06:	fd45                	bnez	a0,80012ebe <.LBB9_87+0x90>
    80012f08:	bf7d                	j	80012ec6 <.LBB9_87+0x98>
    80012f0a:	0b08                	addi	a0,sp,400
            inode_guard.truncate(&inode);
    80012f0c:	0000a097          	auipc	ra,0xa
    80012f10:	7d6080e7          	jalr	2006(ra) # 8001d6e2 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    80012f14:	f82a                	sd	a0,48(sp)
    80012f16:	a011                	j	80012f1a <.LBB9_88+0x2a>
        if open_mode.get_bit(11) && inode_guard.dinode.itype == InodeType::File {
    80012f18:	a809                	j	80012f2a <.LBB9_88+0x3a>
            inode_guard.truncate(&inode);
    80012f1a:	7542                	ld	a0,48(sp)
    80012f1c:	02ac                	addi	a1,sp,328
    80012f1e:	00007097          	auipc	ra,0x7
    80012f22:	e1c080e7          	jalr	-484(ra) # 80019d3a <_ZN6kernel2fs5inode9InodeData8truncate17h7f63e14f2a03d309E>
    80012f26:	a009                	j	80012f28 <.LBB9_88+0x38>
        if open_mode.get_bit(11) && inode_guard.dinode.itype == InodeType::File {
    80012f28:	a009                	j	80012f2a <.LBB9_88+0x3a>
        drop(inode_guard);
    80012f2a:	655a                	ld	a0,400(sp)
    80012f2c:	65fa                	ld	a1,408(sp)
    80012f2e:	0000a097          	auipc	ra,0xa
    80012f32:	13a080e7          	jalr	314(ra) # 8001d068 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    80012f36:	a009                	j	80012f38 <.LBB9_89>

0000000080012f38 <.LBB9_89>:
        LOG.end_op();
    80012f38:	00055517          	auipc	a0,0x55
    80012f3c:	ab050513          	addi	a0,a0,-1360 # 800679e8 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    80012f40:	ffff6097          	auipc	ra,0xffff6
    80012f44:	258080e7          	jalr	600(ra) # 80009198 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>
    80012f48:	a009                	j	80012f4a <.LBB9_89+0x12>
    80012f4a:	4501                	li	a0,0
        file.inode = Some(inode);
    80012f4c:	36a10ba3          	sb	a0,887(sp)
    80012f50:	65b6                	ld	a1,328(sp)
    80012f52:	2eb13423          	sd	a1,744(sp)
    80012f56:	6556                	ld	a0,336(sp)
    80012f58:	2ea13823          	sd	a0,752(sp)
    80012f5c:	2cb13c23          	sd	a1,728(sp)
    80012f60:	2ea13023          	sd	a0,736(sp)
    80012f64:	4505                	li	a0,1
    80012f66:	2ca13823          	sd	a0,720(sp)
    80012f6a:	12a8                	addi	a0,sp,360
    80012f6c:	ffff4097          	auipc	ra,0xffff4
    80012f70:	fe0080e7          	jalr	-32(ra) # 80006f4c <_ZN4core3ptr73drop_in_place$LT$core..option..Option$LT$kernel..fs..inode..Inode$GT$$GT$17h6a7b3b84406d6cdfE>
    80012f74:	a2a5                	j	800130dc <.LBB9_92+0x98>
    80012f76:	1308                	addi	a0,sp,416
    80012f78:	4585                	li	a1,1
        file.writeable = open_mode.get_bit(0) | open_mode.get_bit(1);
    80012f7a:	ffff1097          	auipc	ra,0xffff1
    80012f7e:	da2080e7          	jalr	-606(ra) # 80003d1c <_ZN45_$LT$usize$u20$as$u20$bit_field..BitField$GT$7get_bit17ha84b909d1dae7859E>
    80012f82:	f42a                	sd	a0,40(sp)
    80012f84:	a009                	j	80012f86 <.LBB9_89+0x4e>
    80012f86:	75a2                	ld	a1,40(sp)
    80012f88:	2ff10503          	lb	a0,767(sp)
    80012f8c:	8d4d                	or	a0,a0,a1
    80012f8e:	8905                	andi	a0,a0,1
    80012f90:	18a104a3          	sb	a0,393(sp)
    80012f94:	1308                	addi	a0,sp,416
    80012f96:	4581                	li	a1,0
        file.readable = !open_mode.get_bit(0) | open_mode.get_bit(1);
    80012f98:	ffff1097          	auipc	ra,0xffff1
    80012f9c:	d84080e7          	jalr	-636(ra) # 80003d1c <_ZN45_$LT$usize$u20$as$u20$bit_field..BitField$GT$7get_bit17ha84b909d1dae7859E>
    80012fa0:	f02a                	sd	a0,32(sp)
    80012fa2:	a009                	j	80012fa4 <.LBB9_89+0x6c>
    80012fa4:	7502                	ld	a0,32(sp)
    80012fa6:	00154513          	xori	a0,a0,1
    80012faa:	e82a                	sd	a0,16(sp)
    80012fac:	1308                	addi	a0,sp,416
    80012fae:	4585                	li	a1,1
    80012fb0:	ffff1097          	auipc	ra,0xffff1
    80012fb4:	d6c080e7          	jalr	-660(ra) # 80003d1c <_ZN45_$LT$usize$u20$as$u20$bit_field..BitField$GT$7get_bit17ha84b909d1dae7859E>
    80012fb8:	ec2a                	sd	a0,24(sp)
    80012fba:	a009                	j	80012fbc <.LBB9_89+0x84>
    80012fbc:	6542                	ld	a0,16(sp)
    80012fbe:	65e2                	ld	a1,24(sp)
    80012fc0:	8d4d                	or	a0,a0,a1
    80012fc2:	18a10423          	sb	a0,392(sp)

0000000080012fc6 <.LBB9_90>:
        match unsafe { CPU_MANAGER.alloc_fd(&file) } {
    80012fc6:	00060597          	auipc	a1,0x60
    80012fca:	17a58593          	addi	a1,a1,378 # 80073140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    80012fce:	0608                	addi	a0,sp,768
    80012fd0:	0ab0                	addi	a2,sp,344
    80012fd2:	fffff097          	auipc	ra,0xfffff
    80012fd6:	faa080e7          	jalr	-86(ra) # 80011f7c <_ZN6kernel7process3cpu10CPUManager8alloc_fd17h6273585a0cf04a04E>
    80012fda:	a009                	j	80012fdc <.LBB9_90+0x16>
            Ok(new_fd) => {
    80012fdc:	30013503          	ld	a0,768(sp)
    80012fe0:	4581                	li	a1,0
    80012fe2:	02b50c63          	beq	a0,a1,8001301a <.LBB9_91+0x18>
    80012fe6:	a009                	j	80012fe8 <.LBB9_90+0x22>
            Err(err) => {
    80012fe8:	30813583          	ld	a1,776(sp)
    80012fec:	31013503          	ld	a0,784(sp)
    80012ff0:	30b13c23          	sd	a1,792(sp)
    80012ff4:	32a13023          	sd	a0,800(sp)
    80012ff8:	0e28                	addi	a0,sp,792
                println!("[Kernel] sys_open: err: {}", err);
    80012ffa:	36a13423          	sd	a0,872(sp)
    80012ffe:	38a13823          	sd	a0,912(sp)

0000000080013002 <.LBB9_91>:
    80013002:	0000b597          	auipc	a1,0xb
    80013006:	5b258593          	addi	a1,a1,1458 # 8001e5b4 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E>
    8001300a:	0000b097          	auipc	ra,0xb
    8001300e:	5f0080e7          	jalr	1520(ra) # 8001e5fa <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>
    80013012:	e02a                	sd	a0,0(sp)
    80013014:	e42e                	sd	a1,8(sp)
    80013016:	a00d                	j	80013038 <.LBB9_91+0x36>
        match unsafe { CPU_MANAGER.alloc_fd(&file) } {
    80013018:	0000                	unimp
            Ok(new_fd) => {
    8001301a:	30813503          	ld	a0,776(sp)
    8001301e:	38a13c23          	sd	a0,920(sp)
                fd = new_fd;
    80013022:	3aa13023          	sd	a0,928(sp)
        Ok(fd)
    80013026:	e1aa                	sd	a0,192(sp)
    80013028:	4501                	li	a0,0
    8001302a:	fd2a                	sd	a0,184(sp)
    8001302c:	0aa8                	addi	a0,sp,344
    }
    8001302e:	ffff4097          	auipc	ra,0xffff4
    80013032:	e3c080e7          	jalr	-452(ra) # 80006e6a <_ZN4core3ptr44drop_in_place$LT$kernel..fs..file..VFile$GT$17h7a3c9775c1583e88E>
    80013036:	a82d                	j	80013070 <.LBB9_92+0x2c>
                println!("[Kernel] sys_open: err: {}", err);
    80013038:	6522                	ld	a0,8(sp)
    8001303a:	6582                	ld	a1,0(sp)
    8001303c:	34b13c23          	sd	a1,856(sp)
    80013040:	36a13023          	sd	a0,864(sp)

0000000080013044 <.LBB9_92>:
    80013044:	00016597          	auipc	a1,0x16
    80013048:	3b458593          	addi	a1,a1,948 # 800293f8 <.L__unnamed_20>
    8001304c:	1628                	addi	a0,sp,808
    8001304e:	4609                	li	a2,2
    80013050:	0eb4                	addi	a3,sp,856
    80013052:	4705                	li	a4,1
    80013054:	ffff2097          	auipc	ra,0xffff2
    80013058:	416080e7          	jalr	1046(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8001305c:	a009                	j	8001305e <.LBB9_92+0x1a>
    8001305e:	1628                	addi	a0,sp,808
    80013060:	0000b097          	auipc	ra,0xb
    80013064:	cec080e7          	jalr	-788(ra) # 8001dd4c <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    80013068:	a009                	j	8001306a <.LBB9_92+0x26>
    8001306a:	4505                	li	a0,1
                return Err(())
    8001306c:	fd2a                	sd	a0,184(sp)
    8001306e:	a039                	j	8001307c <.LBB9_92+0x38>
    80013070:	4501                	li	a0,0
    }
    80013072:	36a10b23          	sb	a0,886(sp)
    80013076:	36a10ba3          	sb	a0,887(sp)
    8001307a:	a811                	j	8001308e <.LBB9_92+0x4a>
    8001307c:	37614503          	lbu	a0,886(sp)
    80013080:	8905                	andi	a0,a0,1
    80013082:	e959                	bnez	a0,80013118 <.LBB9_92+0xd4>
    80013084:	a051                	j	80013108 <.LBB9_92+0xc4>
    80013086:	4501                	li	a0,0
    80013088:	36a10ba3          	sb	a0,887(sp)
    8001308c:	a009                	j	8001308e <.LBB9_92+0x4a>
    8001308e:	756a                	ld	a0,184(sp)
    80013090:	658e                	ld	a1,192(sp)
    80013092:	3a813083          	ld	ra,936(sp)
    80013096:	3b010113          	addi	sp,sp,944
    8001309a:	8082                	ret
    8001309c:	4505                	li	a0,1
        file = VFile::init();
    8001309e:	36a10b23          	sb	a0,886(sp)
    800130a2:	28813503          	ld	a0,648(sp)
    800130a6:	eeaa                	sd	a0,344(sp)
    800130a8:	29013503          	ld	a0,656(sp)
    800130ac:	f2aa                	sd	a0,352(sp)
    800130ae:	29813503          	ld	a0,664(sp)
    800130b2:	f6aa                	sd	a0,360(sp)
    800130b4:	2a013503          	ld	a0,672(sp)
    800130b8:	faaa                	sd	a0,368(sp)
    800130ba:	2a813503          	ld	a0,680(sp)
    800130be:	feaa                	sd	a0,376(sp)
    800130c0:	2b013503          	ld	a0,688(sp)
    800130c4:	e32a                	sd	a0,384(sp)
    800130c6:	2b813503          	ld	a0,696(sp)
    800130ca:	e72a                	sd	a0,392(sp)
    800130cc:	0b08                	addi	a0,sp,400
        match inode_guard.dinode.itype {
    800130ce:	0000a097          	auipc	ra,0xa
    800130d2:	600080e7          	jalr	1536(ra) # 8001d6ce <_ZN92_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfc7812d7ca7ab1e1E>
    800130d6:	2ca13023          	sd	a0,704(sp)
    800130da:	bbbd                	j	80012e58 <.LBB9_87+0x2a>
    800130dc:	4505                	li	a0,1
        file.inode = Some(inode);
    800130de:	36a10b23          	sb	a0,886(sp)
    800130e2:	2d013503          	ld	a0,720(sp)
    800130e6:	f6aa                	sd	a0,360(sp)
    800130e8:	2d813503          	ld	a0,728(sp)
    800130ec:	faaa                	sd	a0,368(sp)
    800130ee:	2e013503          	ld	a0,736(sp)
    800130f2:	feaa                	sd	a0,376(sp)
    800130f4:	1308                	addi	a0,sp,416
    800130f6:	4581                	li	a1,0
        file.writeable = open_mode.get_bit(0) | open_mode.get_bit(1);
    800130f8:	ffff1097          	auipc	ra,0xffff1
    800130fc:	c24080e7          	jalr	-988(ra) # 80003d1c <_ZN45_$LT$usize$u20$as$u20$bit_field..BitField$GT$7get_bit17ha84b909d1dae7859E>
    80013100:	2ea10fa3          	sb	a0,767(sp)
    80013104:	bd8d                	j	80012f76 <.LBB9_89+0x3e>
    80013106:	bf9d                	j	8001307c <.LBB9_92+0x38>
    80013108:	4501                	li	a0,0
    }
    8001310a:	36a10b23          	sb	a0,886(sp)
    8001310e:	37714503          	lbu	a0,887(sp)
    80013112:	8905                	andi	a0,a0,1
    80013114:	e901                	bnez	a0,80013124 <.LBB9_92+0xe0>
    80013116:	bf85                	j	80013086 <.LBB9_92+0x42>
    80013118:	12a8                	addi	a0,sp,360
    8001311a:	ffff4097          	auipc	ra,0xffff4
    8001311e:	e32080e7          	jalr	-462(ra) # 80006f4c <_ZN4core3ptr73drop_in_place$LT$core..option..Option$LT$kernel..fs..inode..Inode$GT$$GT$17h6a7b3b84406d6cdfE>
    80013122:	b7dd                	j	80013108 <.LBB9_92+0xc4>
    80013124:	02a8                	addi	a0,sp,328
    80013126:	ffff4097          	auipc	ra,0xffff4
    8001312a:	d5c080e7          	jalr	-676(ra) # 80006e82 <_ZN4core3ptr45drop_in_place$LT$kernel..fs..inode..Inode$GT$17h8786fe1a2a287832E>
    8001312e:	bfa1                	j	80013086 <.LBB9_92+0x42>

Disassembly of section .text._ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_exec17h5f20106c7a7bbe80E:

0000000080013130 <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_exec17h5f20106c7a7bbe80E>:
    pub fn sys_exec(&self) -> SysResult {
    80013130:	bb010113          	addi	sp,sp,-1104
    80013134:	44113423          	sd	ra,1096(sp)
    80013138:	ee2a                	sd	a0,280(sp)
    8001313a:	38a13c23          	sd	a0,920(sp)
    8001313e:	0288                	addi	a0,sp,320
    80013140:	4581                	li	a1,0
    80013142:	08000613          	li	a2,128
        let mut path = [0u8;MAXPATH];
    80013146:	00012097          	auipc	ra,0x12
    8001314a:	ff0080e7          	jalr	-16(ra) # 80025136 <memset>
    8001314e:	0388                	addi	a0,sp,448
        let mut argv = [0 as *mut u8; MAXARG];
    80013150:	058c                	addi	a1,sp,704
    80013152:	f22e                	sd	a1,288(sp)
    80013154:	f62a                	sd	a0,296(sp)
    80013156:	aeed                	j	80013550 <.LBB10_86+0x3a4>
        self.copy_from_str(addr, &mut path, MAXPATH).unwrap();
    80013158:	65b2                	ld	a1,264(sp)
    8001315a:	6572                	ld	a0,280(sp)
    8001315c:	0290                	addi	a2,sp,320
    8001315e:	08000713          	li	a4,128
    80013162:	86ba                	mv	a3,a4
    80013164:	00002097          	auipc	ra,0x2
    80013168:	0f6080e7          	jalr	246(ra) # 8001525a <_ZN6kernel7syscall7Syscall13copy_from_str17h5c83be6e0d4b822aE>
    8001316c:	ea2a                	sd	a0,272(sp)
    8001316e:	a009                	j	80013170 <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_exec17h5f20106c7a7bbe80E+0x40>
    80013170:	6552                	ld	a0,272(sp)

0000000080013172 <.LBB10_85>:
    80013172:	00016597          	auipc	a1,0x16
    80013176:	2a658593          	addi	a1,a1,678 # 80029418 <.L__unnamed_21>
    8001317a:	ffffa097          	auipc	ra,0xffffa
    8001317e:	dba080e7          	jalr	-582(ra) # 8000cf34 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17hea14d8d7b2208f82E>
    80013182:	a009                	j	80013184 <.LBB10_85+0x12>
        let user_argv = self.arg(1);
    80013184:	6572                	ld	a0,280(sp)
    80013186:	4585                	li	a1,1
    80013188:	00002097          	auipc	ra,0x2
    8001318c:	022080e7          	jalr	34(ra) # 800151aa <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    80013190:	85aa                	mv	a1,a0
    80013192:	e22e                	sd	a1,256(sp)
    80013194:	3ca13823          	sd	a0,976(sp)
    80013198:	a009                	j	8001319a <.LBB10_85+0x28>
    8001319a:	0588                	addi	a0,sp,704
    8001319c:	028c                	addi	a1,sp,320
    8001319e:	08000613          	li	a2,128
        let path = from_utf8(&path).unwrap();
    800131a2:	00011097          	auipc	ra,0x11
    800131a6:	922080e7          	jalr	-1758(ra) # 80023ac4 <_ZN4core3str8converts9from_utf817h3f0a2d8686bfd9bbE>
    800131aa:	a009                	j	800131ac <.LBB10_86>

00000000800131ac <.LBB10_86>:
    800131ac:	00016597          	auipc	a1,0x16
    800131b0:	28458593          	addi	a1,a1,644 # 80029430 <.L__unnamed_22>
    800131b4:	0588                	addi	a0,sp,704
    800131b6:	ffffa097          	auipc	ra,0xffffa
    800131ba:	d32080e7          	jalr	-718(ra) # 8000cee8 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17he7e280ca90d46427E>
    800131be:	862a                	mv	a2,a0
    800131c0:	f9b2                	sd	a2,240(sp)
    800131c2:	862e                	mv	a2,a1
    800131c4:	fdb2                	sd	a2,248(sp)
    800131c6:	3ca13c23          	sd	a0,984(sp)
    800131ca:	3eb13023          	sd	a1,992(sp)
    800131ce:	a009                	j	800131d0 <.LBB10_86+0x24>
    800131d0:	4501                	li	a0,0
        let mut count = 0;
    800131d2:	2ca13c23          	sd	a0,728(sp)
        loop {
    800131d6:	a009                	j	800131d8 <.LBB10_86+0x2c>
            if count >= argv.len() {
    800131d8:	2d813503          	ld	a0,728(sp)
    800131dc:	f1aa                	sd	a0,224(sp)
    800131de:	0388                	addi	a0,sp,448
    800131e0:	02000593          	li	a1,32
    800131e4:	0000c097          	auipc	ra,0xc
    800131e8:	3dc080e7          	jalr	988(ra) # 8001f5c0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17ha6c4bb93a093d49eE>
    800131ec:	f5aa                	sd	a0,232(sp)
    800131ee:	a009                	j	800131f0 <.LBB10_86+0x44>
    800131f0:	750e                	ld	a0,224(sp)
    800131f2:	75ae                	ld	a1,232(sp)
    800131f4:	02b56163          	bltu	a0,a1,80013216 <.LBB10_86+0x6a>
    800131f8:	a009                	j	800131fa <.LBB10_86+0x4e>
    800131fa:	4501                	li	a0,0
                for i in 0..MAXARG {
    800131fc:	2ea13023          	sd	a0,736(sp)
    80013200:	02000593          	li	a1,32
    80013204:	2eb13423          	sd	a1,744(sp)
    80013208:	0000c097          	auipc	ra,0xc
    8001320c:	73a080e7          	jalr	1850(ra) # 8001f942 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he0a8d93712e5493bE>
    80013210:	e9aa                	sd	a0,208(sp)
    80013212:	edae                	sd	a1,216(sp)
    80013214:	a801                	j	80013224 <.LBB10_86+0x78>
    80013216:	4501                	li	a0,0
            let mut buf = [0u8;8];
    80013218:	30a13823          	sd	a0,784(sp)
                user_argv + count * size_of::<usize>(), 
    8001321c:	2d813503          	ld	a0,728(sp)
    80013220:	e5aa                	sd	a0,200(sp)
    80013222:	a8b5                	j	8001329e <.LBB10_86+0xf2>
                for i in 0..MAXARG {
    80013224:	656e                	ld	a0,216(sp)
    80013226:	65ce                	ld	a1,208(sp)
    80013228:	2eb13823          	sd	a1,752(sp)
    8001322c:	2ea13c23          	sd	a0,760(sp)
    80013230:	a009                	j	80013232 <.LBB10_86+0x86>
    80013232:	1d88                	addi	a0,sp,752
    80013234:	0000c097          	auipc	ra,0xc
    80013238:	6a0080e7          	jalr	1696(ra) # 8001f8d4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE>
    8001323c:	30a13023          	sd	a0,768(sp)
    80013240:	30b13423          	sd	a1,776(sp)
    80013244:	a009                	j	80013246 <.LBB10_86+0x9a>
    80013246:	30013503          	ld	a0,768(sp)
    8001324a:	4581                	li	a1,0
    8001324c:	00b50463          	beq	a0,a1,80013254 <.LBB10_86+0xa8>
    80013250:	a009                	j	80013252 <.LBB10_86+0xa6>
    80013252:	a029                	j	8001325c <.LBB10_86+0xb0>
    80013254:	4505                	li	a0,1
                return Err(());
    80013256:	fa2a                	sd	a0,304(sp)
    80013258:	a4ed                	j	80013542 <.LBB10_86+0x396>
                for i in 0..MAXARG {
    8001325a:	0000                	unimp
    8001325c:	30813583          	ld	a1,776(sp)
    80013260:	e1ae                	sd	a1,192(sp)
    80013262:	3eb13423          	sd	a1,1000(sp)
    80013266:	3eb13823          	sd	a1,1008(sp)
    8001326a:	3eb13c23          	sd	a1,1016(sp)
    8001326e:	457d                	li	a0,31
                    if argv[i] != 0 as *mut u8 {
    80013270:	30b56763          	bltu	a0,a1,8001357e <.LBB10_86+0x3d2>
    80013274:	a009                	j	80013276 <.LBB10_86+0xca>
    80013276:	650e                	ld	a0,192(sp)
    80013278:	00351593          	slli	a1,a0,0x3
    8001327c:	0388                	addi	a0,sp,448
    8001327e:	952e                	add	a0,a0,a1
    80013280:	6108                	ld	a0,0(a0)
    80013282:	4581                	li	a1,0
    80013284:	00b50963          	beq	a0,a1,80013296 <.LBB10_86+0xea>
    80013288:	a009                	j	8001328a <.LBB10_86+0xde>
    8001328a:	650e                	ld	a0,192(sp)
    8001328c:	02000593          	li	a1,32
                        unsafe{ drop_in_place(argv[i] as *mut RawPage) };
    80013290:	00b56463          	bltu	a0,a1,80013298 <.LBB10_86+0xec>
    80013294:	a609                	j	80013596 <.LBB10_87+0x16>
                    if argv[i] != 0 as *mut u8 {
    80013296:	a019                	j	8001329c <.LBB10_86+0xf0>
                        unsafe{ drop_in_place(argv[i] as *mut RawPage) };
    80013298:	a009                	j	8001329a <.LBB10_86+0xee>
                    if argv[i] != 0 as *mut u8 {
    8001329a:	a009                	j	8001329c <.LBB10_86+0xf0>
                for i in 0..MAXARG {
    8001329c:	bf59                	j	80013232 <.LBB10_86+0x86>
    8001329e:	65ae                	ld	a1,200(sp)
    800132a0:	4505                	li	a0,1
    800132a2:	1576                	slli	a0,a0,0x3d
    800132a4:	157d                	addi	a0,a0,-1
                user_argv + count * size_of::<usize>(), 
    800132a6:	8d6d                	and	a0,a0,a1
    800132a8:	00359613          	slli	a2,a1,0x3
    800132ac:	fd32                	sd	a2,184(sp)
    800132ae:	30b51063          	bne	a0,a1,800135ae <.LBB10_89>
    800132b2:	a009                	j	800132b4 <.LBB10_86+0x108>
    800132b4:	6592                	ld	a1,256(sp)
    800132b6:	756a                	ld	a0,184(sp)
    800132b8:	952e                	add	a0,a0,a1
    800132ba:	f92a                	sd	a0,176(sp)
    800132bc:	30b56863          	bltu	a0,a1,800135cc <.LBB10_91>
    800132c0:	a009                	j	800132c2 <.LBB10_86+0x116>
            self.copy_form_addr(
    800132c2:	75ca                	ld	a1,176(sp)
    800132c4:	6572                	ld	a0,280(sp)
    800132c6:	0e10                	addi	a2,sp,784
    800132c8:	4721                	li	a4,8
    800132ca:	86ba                	mv	a3,a4
    800132cc:	00002097          	auipc	ra,0x2
    800132d0:	05c080e7          	jalr	92(ra) # 80015328 <_ZN6kernel7syscall7Syscall14copy_form_addr17h37cb4654fc973487E>
    800132d4:	f52a                	sd	a0,168(sp)
    800132d6:	a009                	j	800132d8 <.LBB10_86+0x12c>
    800132d8:	752a                	ld	a0,168(sp)
    800132da:	ffffa097          	auipc	ra,0xffffa
    800132de:	f22080e7          	jalr	-222(ra) # 8000d1fc <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h9e3ff03fe8989dd2E>
    800132e2:	30a10fa3          	sb	a0,799(sp)
    800132e6:	a009                	j	800132e8 <.LBB10_86+0x13c>
            )?;
    800132e8:	31f14503          	lbu	a0,799(sp)
    800132ec:	8905                	andi	a0,a0,1
    800132ee:	4581                	li	a1,0
    800132f0:	00b50463          	beq	a0,a1,800132f8 <.LBB10_86+0x14c>
    800132f4:	a009                	j	800132f6 <.LBB10_86+0x14a>
    800132f6:	a821                	j	8001330e <.LBB10_86+0x162>
            user_arg = usize::from_le_bytes(buf);
    800132f8:	31013503          	ld	a0,784(sp)
    800132fc:	32a13023          	sd	a0,800(sp)
    80013300:	0000b097          	auipc	ra,0xb
    80013304:	dcc080e7          	jalr	-564(ra) # 8001e0cc <_ZN4core3num23_$LT$impl$u20$usize$GT$13from_le_bytes17h3bceb23301b73de9E>
    80013308:	f12a                	sd	a0,160(sp)
    8001330a:	a831                	j	80013326 <.LBB10_86+0x17a>
            self.copy_form_addr(
    8001330c:	0000                	unimp
            )?;
    8001330e:	ffff8097          	auipc	ra,0xffff8
    80013312:	758080e7          	jalr	1880(ra) # 8000ba66 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h2e645b443ebf2dc7E>
    80013316:	a009                	j	80013318 <.LBB10_86+0x16c>
            self.copy_form_addr(
    80013318:	ffffa097          	auipc	ra,0xffffa
    8001331c:	dd0080e7          	jalr	-560(ra) # 8000d0e8 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h74072cf57097ff24E>
    80013320:	fa2a                	sd	a0,304(sp)
    80013322:	fe2e                	sd	a1,312(sp)
    80013324:	ac39                	j	80013542 <.LBB10_86+0x396>
            user_arg = usize::from_le_bytes(buf);
    80013326:	750a                	ld	a0,160(sp)
    80013328:	40a13023          	sd	a0,1024(sp)
    8001332c:	4581                	li	a1,0
            if user_arg == 0 {
    8001332e:	00b51b63          	bne	a0,a1,80013344 <.LBB10_86+0x198>
    80013332:	a009                	j	80013334 <.LBB10_86+0x188>
                argv[count] = 0 as *mut u8;
    80013334:	2d813503          	ld	a0,728(sp)
    80013338:	ed2a                	sd	a0,152(sp)
    8001333a:	02000593          	li	a1,32
    8001333e:	00b56963          	bltu	a0,a1,80013350 <.LBB10_86+0x1a4>
    80013342:	ace9                	j	8001361c <.LBB10_95+0x14>
            let mem = unsafe{ RawPage::new_zeroed() as *mut u8 };
    80013344:	ffff7097          	auipc	ra,0xffff7
    80013348:	c20080e7          	jalr	-992(ra) # 80009f64 <_ZN6kernel6memory13PageAllocator10new_zeroed17hbc99bdbca8d1d931E>
    8001334c:	e92a                	sd	a0,144(sp)
    8001334e:	a00d                	j	80013370 <.LBB10_86+0x1c4>
                argv[count] = 0 as *mut u8;
    80013350:	656a                	ld	a0,152(sp)
    80013352:	00351593          	slli	a1,a0,0x3
    80013356:	0388                	addi	a0,sp,448
    80013358:	00b50633          	add	a2,a0,a1
    8001335c:	4581                	li	a1,0
    8001335e:	e20c                	sd	a1,0(a2)
    80013360:	02000593          	li	a1,32
                argv.as_ptr() as *const *const u8, 
    80013364:	0000c097          	auipc	ra,0xc
    80013368:	2c2080e7          	jalr	706(ra) # 8001f626 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hc3575ad36de0bb27E>
    8001336c:	e52a                	sd	a0,136(sp)
    8001336e:	a065                	j	80013416 <.LBB10_86+0x26a>
            let mem = unsafe{ RawPage::new_zeroed() as *mut u8 };
    80013370:	654a                	ld	a0,144(sp)
    80013372:	85aa                	mv	a1,a0
    80013374:	fcae                	sd	a1,120(sp)
    80013376:	40a13423          	sd	a0,1032(sp)
            argv[count] = mem;
    8001337a:	2d813583          	ld	a1,728(sp)
    8001337e:	e12e                	sd	a1,128(sp)
    80013380:	457d                	li	a0,31
    80013382:	26b56363          	bltu	a0,a1,800135e8 <.LBB10_92+0x14>
    80013386:	a009                	j	80013388 <.LBB10_86+0x1dc>
    80013388:	7566                	ld	a0,120(sp)
    8001338a:	658a                	ld	a1,128(sp)
    8001338c:	00359613          	slli	a2,a1,0x3
    80013390:	038c                	addi	a1,sp,448
    80013392:	95b2                	add	a1,a1,a2
    80013394:	e188                	sd	a0,0(a1)
    80013396:	6585                	lui	a1,0x1
            let buf = unsafe { from_raw_parts_mut(mem, PGSIZE) };
    80013398:	ffff2097          	auipc	ra,0xffff2
    8001339c:	056080e7          	jalr	86(ra) # 800053ee <_ZN4core5slice3raw18from_raw_parts_mut17h0bc9e5c0c3217bc8E>
    800133a0:	f4aa                	sd	a0,104(sp)
    800133a2:	f8ae                	sd	a1,112(sp)
    800133a4:	a009                	j	800133a6 <.LBB10_86+0x1fa>
    800133a6:	76c6                	ld	a3,112(sp)
    800133a8:	7626                	ld	a2,104(sp)
    800133aa:	758a                	ld	a1,160(sp)
    800133ac:	6572                	ld	a0,280(sp)
    800133ae:	40c13823          	sd	a2,1040(sp)
    800133b2:	40d13c23          	sd	a3,1048(sp)
    800133b6:	6705                	lui	a4,0x1
            self.copy_from_str(
    800133b8:	00002097          	auipc	ra,0x2
    800133bc:	ea2080e7          	jalr	-350(ra) # 8001525a <_ZN6kernel7syscall7Syscall13copy_from_str17h5c83be6e0d4b822aE>
    800133c0:	f0aa                	sd	a0,96(sp)
    800133c2:	a009                	j	800133c4 <.LBB10_86+0x218>
    800133c4:	7506                	ld	a0,96(sp)
    800133c6:	ffffa097          	auipc	ra,0xffffa
    800133ca:	e36080e7          	jalr	-458(ra) # 8000d1fc <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h9e3ff03fe8989dd2E>
    800133ce:	32a107a3          	sb	a0,815(sp)
    800133d2:	a009                	j	800133d4 <.LBB10_86+0x228>
            )?;   
    800133d4:	32f14503          	lbu	a0,815(sp)
    800133d8:	8905                	andi	a0,a0,1
    800133da:	4581                	li	a1,0
    800133dc:	00b50463          	beq	a0,a1,800133e4 <.LBB10_86+0x238>
    800133e0:	a009                	j	800133e2 <.LBB10_86+0x236>
    800133e2:	a811                	j	800133f6 <.LBB10_86+0x24a>
            count += 1;
    800133e4:	2d813583          	ld	a1,728(sp)
    800133e8:	00158513          	addi	a0,a1,1 # 1001 <.Lline_table_start0+0x30c>
    800133ec:	ecaa                	sd	a0,88(sp)
    800133ee:	20b56963          	bltu	a0,a1,80013600 <.LBB10_94>
    800133f2:	a831                	j	8001340e <.LBB10_86+0x262>
            self.copy_from_str(
    800133f4:	0000                	unimp
            )?;   
    800133f6:	ffff8097          	auipc	ra,0xffff8
    800133fa:	670080e7          	jalr	1648(ra) # 8000ba66 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h2e645b443ebf2dc7E>
    800133fe:	a009                	j	80013400 <.LBB10_86+0x254>
            self.copy_from_str(
    80013400:	ffffa097          	auipc	ra,0xffffa
    80013404:	ce8080e7          	jalr	-792(ra) # 8000d0e8 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h74072cf57097ff24E>
    80013408:	fa2a                	sd	a0,304(sp)
    8001340a:	fe2e                	sd	a1,312(sp)
    8001340c:	aa1d                	j	80013542 <.LBB10_86+0x396>
            count += 1;
    8001340e:	6566                	ld	a0,88(sp)
    80013410:	2ca13c23          	sd	a0,728(sp)
        loop {
    80013414:	b3d1                	j	800131d8 <.LBB10_86+0x2c>
            from_raw_parts(
    80013416:	652a                	ld	a0,136(sp)
    80013418:	02000593          	li	a1,32
    8001341c:	ffff2097          	auipc	ra,0xffff2
    80013420:	f92080e7          	jalr	-110(ra) # 800053ae <_ZN4core5slice3raw14from_raw_parts17h24ea7267a8aa7c05E>
    80013424:	32a13823          	sd	a0,816(sp)
    80013428:	32b13c23          	sd	a1,824(sp)
    8001342c:	a009                	j	8001342e <.LBB10_86+0x282>
            exec(path, &argv).map_err(
    8001342e:	766e                	ld	a2,248(sp)
    80013430:	75ce                	ld	a1,240(sp)
    80013432:	33013683          	ld	a3,816(sp)
    80013436:	33813703          	ld	a4,824(sp)
    8001343a:	0e88                	addi	a0,sp,848
    8001343c:	fffee097          	auipc	ra,0xfffee
    80013440:	f44080e7          	jalr	-188(ra) # 80001380 <_ZN6kernel7process3elf4exec17h6cecf459cb29fe26E>
    80013444:	a009                	j	80013446 <.LBB10_86+0x29a>
    80013446:	0e88                	addi	a0,sp,848
    80013448:	ffffa097          	auipc	ra,0xffffa
    8001344c:	bfa080e7          	jalr	-1030(ra) # 8000d042 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17hacf552840fbd34a9E>
    80013450:	e4aa                	sd	a0,72(sp)
    80013452:	e8ae                	sd	a1,80(sp)
    80013454:	a009                	j	80013456 <.LBB10_86+0x2aa>
    80013456:	65c6                	ld	a1,80(sp)
    80013458:	6526                	ld	a0,72(sp)
    8001345a:	ffffa097          	auipc	ra,0xffffa
    8001345e:	db6080e7          	jalr	-586(ra) # 8000d210 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hb8d2d18a4141e592E>
    80013462:	34a13023          	sd	a0,832(sp)
    80013466:	34b13423          	sd	a1,840(sp)
    8001346a:	a009                	j	8001346c <.LBB10_86+0x2c0>
            )?
    8001346c:	34013503          	ld	a0,832(sp)
    80013470:	4581                	li	a1,0
    80013472:	00b50463          	beq	a0,a1,8001347a <.LBB10_86+0x2ce>
    80013476:	a009                	j	80013478 <.LBB10_86+0x2cc>
    80013478:	a03d                	j	800134a6 <.LBB10_86+0x2fa>
            exec(path, &argv).map_err(
    8001347a:	34813503          	ld	a0,840(sp)
    8001347e:	f82a                	sd	a0,48(sp)
    80013480:	42a13023          	sd	a0,1056(sp)
    80013484:	42a13423          	sd	a0,1064(sp)
    80013488:	4501                	li	a0,0
        };
    
        for i in 0..MAXARG {
    8001348a:	36a13423          	sd	a0,872(sp)
    8001348e:	02000593          	li	a1,32
    80013492:	36b13823          	sd	a1,880(sp)
    80013496:	0000c097          	auipc	ra,0xc
    8001349a:	4ac080e7          	jalr	1196(ra) # 8001f942 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he0a8d93712e5493bE>
    8001349e:	fc2a                	sd	a0,56(sp)
    800134a0:	e0ae                	sd	a1,64(sp)
    800134a2:	a831                	j	800134be <.LBB10_86+0x312>
            exec(path, &argv).map_err(
    800134a4:	0000                	unimp
            )?
    800134a6:	ffff8097          	auipc	ra,0xffff8
    800134aa:	5c0080e7          	jalr	1472(ra) # 8000ba66 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h2e645b443ebf2dc7E>
    800134ae:	a009                	j	800134b0 <.LBB10_86+0x304>
            exec(path, &argv).map_err(
    800134b0:	ffffa097          	auipc	ra,0xffffa
    800134b4:	c38080e7          	jalr	-968(ra) # 8000d0e8 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h74072cf57097ff24E>
    800134b8:	fa2a                	sd	a0,304(sp)
    800134ba:	fe2e                	sd	a1,312(sp)
    800134bc:	a059                	j	80013542 <.LBB10_86+0x396>
        for i in 0..MAXARG {
    800134be:	6506                	ld	a0,64(sp)
    800134c0:	75e2                	ld	a1,56(sp)
    800134c2:	36b13c23          	sd	a1,888(sp)
    800134c6:	38a13023          	sd	a0,896(sp)
    800134ca:	a009                	j	800134cc <.LBB10_86+0x320>
    800134cc:	1ea8                	addi	a0,sp,888
    800134ce:	0000c097          	auipc	ra,0xc
    800134d2:	406080e7          	jalr	1030(ra) # 8001f8d4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE>
    800134d6:	38a13423          	sd	a0,904(sp)
    800134da:	38b13823          	sd	a1,912(sp)
    800134de:	a009                	j	800134e0 <.LBB10_86+0x334>
    800134e0:	38813503          	ld	a0,904(sp)
    800134e4:	4581                	li	a1,0
    800134e6:	00b50463          	beq	a0,a1,800134ee <.LBB10_86+0x342>
    800134ea:	a009                	j	800134ec <.LBB10_86+0x340>
    800134ec:	a039                	j	800134fa <.LBB10_86+0x34e>
            if argv[i] != 0 as *mut u8 {
                unsafe{ drop_in_place(argv[i] as *mut RawPage) };
            }
        }
        // println!("[Debug] sys_exec return {}", ret);
        Ok(ret)
    800134ee:	7542                	ld	a0,48(sp)
    800134f0:	fe2a                	sd	a0,312(sp)
    800134f2:	4501                	li	a0,0
    800134f4:	fa2a                	sd	a0,304(sp)
    }
    800134f6:	a0b1                	j	80013542 <.LBB10_86+0x396>
        for i in 0..MAXARG {
    800134f8:	0000                	unimp
    800134fa:	39013503          	ld	a0,912(sp)
    800134fe:	f02a                	sd	a0,32(sp)
    80013500:	42a13823          	sd	a0,1072(sp)
    80013504:	42a13c23          	sd	a0,1080(sp)
    80013508:	44a13023          	sd	a0,1088(sp)
            if argv[i] != 0 as *mut u8 {
    8001350c:	33813583          	ld	a1,824(sp)
    80013510:	f42e                	sd	a1,40(sp)
    80013512:	12b57163          	bgeu	a0,a1,80013634 <.LBB10_96+0x16>
    80013516:	a009                	j	80013518 <.LBB10_86+0x36c>
    80013518:	7582                	ld	a1,32(sp)
    8001351a:	33013503          	ld	a0,816(sp)
    8001351e:	058e                	slli	a1,a1,0x3
    80013520:	952e                	add	a0,a0,a1
    80013522:	6108                	ld	a0,0(a0)
    80013524:	4581                	li	a1,0
    80013526:	00b50a63          	beq	a0,a1,8001353a <.LBB10_86+0x38e>
    8001352a:	a009                	j	8001352c <.LBB10_86+0x380>
                unsafe{ drop_in_place(argv[i] as *mut RawPage) };
    8001352c:	7502                	ld	a0,32(sp)
    8001352e:	33813583          	ld	a1,824(sp)
    80013532:	ec2e                	sd	a1,24(sp)
    80013534:	00b56463          	bltu	a0,a1,8001353c <.LBB10_86+0x390>
    80013538:	aa09                	j	8001364a <.LBB10_97+0x12>
            if argv[i] != 0 as *mut u8 {
    8001353a:	a019                	j	80013540 <.LBB10_86+0x394>
                unsafe{ drop_in_place(argv[i] as *mut RawPage) };
    8001353c:	a009                	j	8001353e <.LBB10_86+0x392>
            if argv[i] != 0 as *mut u8 {
    8001353e:	a009                	j	80013540 <.LBB10_86+0x394>
        for i in 0..MAXARG {
    80013540:	b771                	j	800134cc <.LBB10_86+0x320>
    }
    80013542:	7552                	ld	a0,304(sp)
    80013544:	75f2                	ld	a1,312(sp)
    80013546:	44813083          	ld	ra,1096(sp)
    8001354a:	45010113          	addi	sp,sp,1104
    8001354e:	8082                	ret
    80013550:	7592                	ld	a1,288(sp)
    80013552:	7532                	ld	a0,296(sp)
    80013554:	e82a                	sd	a0,16(sp)
    80013556:	00b50963          	beq	a0,a1,80013568 <.LBB10_86+0x3bc>
    8001355a:	a009                	j	8001355c <.LBB10_86+0x3b0>
    8001355c:	6542                	ld	a0,16(sp)
    8001355e:	4581                	li	a1,0
    80013560:	e10c                	sd	a1,0(a0)
    80013562:	0521                	addi	a0,a0,8
    80013564:	f62a                	sd	a0,296(sp)
    80013566:	b7ed                	j	80013550 <.LBB10_86+0x3a4>
        let addr = self.arg(0);
    80013568:	6572                	ld	a0,280(sp)
    8001356a:	4581                	li	a1,0
    8001356c:	00002097          	auipc	ra,0x2
    80013570:	c3e080e7          	jalr	-962(ra) # 800151aa <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    80013574:	85aa                	mv	a1,a0
    80013576:	e62e                	sd	a1,264(sp)
    80013578:	3ca13423          	sd	a0,968(sp)
    8001357c:	bef1                	j	80013158 <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_exec17h5f20106c7a7bbe80E+0x28>
                    if argv[i] != 0 as *mut u8 {
    8001357e:	650e                	ld	a0,192(sp)

0000000080013580 <.LBB10_87>:
    80013580:	00016617          	auipc	a2,0x16
    80013584:	ec860613          	addi	a2,a2,-312 # 80029448 <.L__unnamed_23>
    80013588:	02000593          	li	a1,32
    8001358c:	0000f097          	auipc	ra,0xf
    80013590:	d16080e7          	jalr	-746(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80013594:	0000                	unimp
                        unsafe{ drop_in_place(argv[i] as *mut RawPage) };
    80013596:	650e                	ld	a0,192(sp)

0000000080013598 <.LBB10_88>:
    80013598:	00016617          	auipc	a2,0x16
    8001359c:	ec860613          	addi	a2,a2,-312 # 80029460 <.L__unnamed_24>
    800135a0:	02000593          	li	a1,32
    800135a4:	0000f097          	auipc	ra,0xf
    800135a8:	cfe080e7          	jalr	-770(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

00000000800135ae <.LBB10_89>:
                user_argv + count * size_of::<usize>(), 
    800135ae:	00016517          	auipc	a0,0x16
    800135b2:	ee250513          	addi	a0,a0,-286 # 80029490 <str.0>

00000000800135b6 <.LBB10_90>:
    800135b6:	00016617          	auipc	a2,0x16
    800135ba:	ec260613          	addi	a2,a2,-318 # 80029478 <.L__unnamed_25>
    800135be:	02100593          	li	a1,33
    800135c2:	0000f097          	auipc	ra,0xf
    800135c6:	cb4080e7          	jalr	-844(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

00000000800135cc <.LBB10_91>:
    800135cc:	00016517          	auipc	a0,0x16
    800135d0:	f0450513          	addi	a0,a0,-252 # 800294d0 <str.1>

00000000800135d4 <.LBB10_92>:
    800135d4:	00016617          	auipc	a2,0x16
    800135d8:	ee460613          	addi	a2,a2,-284 # 800294b8 <.L__unnamed_26>
    800135dc:	45f1                	li	a1,28
    800135de:	0000f097          	auipc	ra,0xf
    800135e2:	c98080e7          	jalr	-872(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    800135e6:	0000                	unimp
            argv[count] = mem;
    800135e8:	650a                	ld	a0,128(sp)

00000000800135ea <.LBB10_93>:
    800135ea:	00016617          	auipc	a2,0x16
    800135ee:	f0660613          	addi	a2,a2,-250 # 800294f0 <.L__unnamed_27>
    800135f2:	02000593          	li	a1,32
    800135f6:	0000f097          	auipc	ra,0xf
    800135fa:	cac080e7          	jalr	-852(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

0000000080013600 <.LBB10_94>:
            count += 1;
    80013600:	00016517          	auipc	a0,0x16
    80013604:	ed050513          	addi	a0,a0,-304 # 800294d0 <str.1>

0000000080013608 <.LBB10_95>:
    80013608:	00016617          	auipc	a2,0x16
    8001360c:	f0060613          	addi	a2,a2,-256 # 80029508 <.L__unnamed_28>
    80013610:	45f1                	li	a1,28
    80013612:	0000f097          	auipc	ra,0xf
    80013616:	c64080e7          	jalr	-924(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8001361a:	0000                	unimp
                argv[count] = 0 as *mut u8;
    8001361c:	656a                	ld	a0,152(sp)

000000008001361e <.LBB10_96>:
    8001361e:	00016617          	auipc	a2,0x16
    80013622:	f0260613          	addi	a2,a2,-254 # 80029520 <.L__unnamed_29>
    80013626:	02000593          	li	a1,32
    8001362a:	0000f097          	auipc	ra,0xf
    8001362e:	c78080e7          	jalr	-904(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80013632:	0000                	unimp
            if argv[i] != 0 as *mut u8 {
    80013634:	75a2                	ld	a1,40(sp)
    80013636:	7502                	ld	a0,32(sp)

0000000080013638 <.LBB10_97>:
    80013638:	00016617          	auipc	a2,0x16
    8001363c:	f0060613          	addi	a2,a2,-256 # 80029538 <.L__unnamed_30>
    80013640:	0000f097          	auipc	ra,0xf
    80013644:	c62080e7          	jalr	-926(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80013648:	0000                	unimp
                unsafe{ drop_in_place(argv[i] as *mut RawPage) };
    8001364a:	65e2                	ld	a1,24(sp)
    8001364c:	7502                	ld	a0,32(sp)

000000008001364e <.LBB10_98>:
    8001364e:	00016617          	auipc	a2,0x16
    80013652:	f0260613          	addi	a2,a2,-254 # 80029550 <.L__unnamed_31>
    80013656:	0000f097          	auipc	ra,0xf
    8001365a:	c4c080e7          	jalr	-948(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$9sys_mknod17h6bbc97745668998fE:

0000000080013660 <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$9sys_mknod17h6bbc97745668998fE>:

    pub fn sys_mknod(&self) -> SysResult {
    80013660:	7161                	addi	sp,sp,-432
    80013662:	f706                	sd	ra,424(sp)
    80013664:	f82a                	sd	a0,48(sp)
    80013666:	faaa                	sd	a0,368(sp)
    80013668:	05710513          	addi	a0,sp,87
    8001366c:	4581                	li	a1,0
    8001366e:	08000613          	li	a2,128
        let mut path: [u8; MAXPATH] = [0;MAXPATH];
    80013672:	00012097          	auipc	ra,0x12
    80013676:	ac4080e7          	jalr	-1340(ra) # 80025136 <memset>
        let major = self.arg(1);
    8001367a:	7542                	ld	a0,48(sp)
    8001367c:	4585                	li	a1,1
    8001367e:	00002097          	auipc	ra,0x2
    80013682:	b2c080e7          	jalr	-1236(ra) # 800151aa <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    80013686:	85aa                	mv	a1,a0
    80013688:	fc2e                	sd	a1,56(sp)
    8001368a:	e72a                	sd	a0,392(sp)
    8001368c:	a009                	j	8001368e <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$9sys_mknod17h6bbc97745668998fE+0x2e>
        let minor = self.arg(2);
    8001368e:	7542                	ld	a0,48(sp)
    80013690:	4589                	li	a1,2
    80013692:	00002097          	auipc	ra,0x2
    80013696:	b18080e7          	jalr	-1256(ra) # 800151aa <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    8001369a:	85aa                	mv	a1,a0
    8001369c:	f42e                	sd	a1,40(sp)
    8001369e:	eb2a                	sd	a0,400(sp)
    800136a0:	a009                	j	800136a2 <.LBB11_25>

00000000800136a2 <.LBB11_25>:
        LOG.begin_op();
    800136a2:	00054517          	auipc	a0,0x54
    800136a6:	34650513          	addi	a0,a0,838 # 800679e8 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    800136aa:	ffff5097          	auipc	ra,0xffff5
    800136ae:	508080e7          	jalr	1288(ra) # 80008bb2 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$8begin_op17he5b49a48c716e372E>
    800136b2:	a009                	j	800136b4 <.LBB11_25+0x12>
        // Get file path
        let addr = self.arg(0);
    800136b4:	7542                	ld	a0,48(sp)
    800136b6:	4581                	li	a1,0
    800136b8:	00002097          	auipc	ra,0x2
    800136bc:	af2080e7          	jalr	-1294(ra) # 800151aa <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    800136c0:	85aa                	mv	a1,a0
    800136c2:	f02e                	sd	a1,32(sp)
    800136c4:	ef2a                	sd	a0,408(sp)
    800136c6:	a009                	j	800136c8 <.LBB11_25+0x26>
        self.copy_from_str(addr, &mut path, MAXPATH)?;
    800136c8:	7582                	ld	a1,32(sp)
    800136ca:	7542                	ld	a0,48(sp)
    800136cc:	05710613          	addi	a2,sp,87
    800136d0:	08000713          	li	a4,128
    800136d4:	86ba                	mv	a3,a4
    800136d6:	00002097          	auipc	ra,0x2
    800136da:	b84080e7          	jalr	-1148(ra) # 8001525a <_ZN6kernel7syscall7Syscall13copy_from_str17h5c83be6e0d4b822aE>
    800136de:	ec2a                	sd	a0,24(sp)
    800136e0:	a009                	j	800136e2 <.LBB11_25+0x40>
    800136e2:	6562                	ld	a0,24(sp)
    800136e4:	ffffa097          	auipc	ra,0xffffa
    800136e8:	b18080e7          	jalr	-1256(ra) # 8000d1fc <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h9e3ff03fe8989dd2E>
    800136ec:	0ca10ba3          	sb	a0,215(sp)
    800136f0:	a009                	j	800136f2 <.LBB11_25+0x50>
    800136f2:	0d714503          	lbu	a0,215(sp)
    800136f6:	8905                	andi	a0,a0,1
    800136f8:	4581                	li	a1,0
    800136fa:	00b50463          	beq	a0,a1,80013702 <.LBB11_25+0x60>
    800136fe:	a009                	j	80013700 <.LBB11_25+0x5e>
    80013700:	a02d                	j	8001372a <.LBB11_26+0x1e>
    80013702:	7822                	ld	a6,40(sp)
    80013704:	77e2                	ld	a5,56(sp)
    80013706:	470d                	li	a4,3
        match ICACHE.create(
            &path, 
            InodeType::Device, 
    80013708:	0ee11b23          	sh	a4,246(sp)

000000008001370c <.LBB11_26>:
        match ICACHE.create(
    8001370c:	00054597          	auipc	a1,0x54
    80013710:	38458593          	addi	a1,a1,900 # 80067a90 <_ZN6kernel2fs5inode6ICACHE17had1be8942ca79bf1E>
    80013714:	09a8                	addi	a0,sp,216
    80013716:	05710613          	addi	a2,sp,87
    8001371a:	08000693          	li	a3,128
    8001371e:	00006097          	auipc	ra,0x6
    80013722:	d98080e7          	jalr	-616(ra) # 800194b6 <_ZN6kernel2fs5inode10InodeCache6create17h24595de16ee7205aE>
    80013726:	a831                	j	80013742 <.LBB11_26+0x36>
        self.copy_from_str(addr, &mut path, MAXPATH)?;
    80013728:	0000                	unimp
    8001372a:	ffff8097          	auipc	ra,0xffff8
    8001372e:	33c080e7          	jalr	828(ra) # 8000ba66 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h2e645b443ebf2dc7E>
    80013732:	a009                	j	80013734 <.LBB11_26+0x28>
    80013734:	ffffa097          	auipc	ra,0xffffa
    80013738:	9b4080e7          	jalr	-1612(ra) # 8000d0e8 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h74072cf57097ff24E>
    8001373c:	e0aa                	sd	a0,64(sp)
    8001373e:	e4ae                	sd	a1,72(sp)
    80013740:	a07d                	j	800137ee <.LBB11_30+0x1a>
            major as i16, 
            minor as i16
        ) {
            Ok(inode) => {
    80013742:	656e                	ld	a0,216(sp)
    80013744:	4581                	li	a1,0
    80013746:	02b50663          	beq	a0,a1,80013772 <.LBB11_27+0x18>
    8001374a:	a009                	j	8001374c <.LBB11_26+0x40>
                LOG.end_op();
                drop(inode);
                Ok(0)
            },
    
            Err(err) => {
    8001374c:	758e                	ld	a1,224(sp)
    8001374e:	752e                	ld	a0,232(sp)
    80013750:	ee2e                	sd	a1,280(sp)
    80013752:	f22a                	sd	a0,288(sp)
    80013754:	0a28                	addi	a0,sp,280
                println!("[Kernel] sys_mknod: err: {}", err);
    80013756:	f6aa                	sd	a0,360(sp)
    80013758:	f32a                	sd	a0,416(sp)

000000008001375a <.LBB11_27>:
    8001375a:	0000b597          	auipc	a1,0xb
    8001375e:	e5a58593          	addi	a1,a1,-422 # 8001e5b4 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E>
    80013762:	0000b097          	auipc	ra,0xb
    80013766:	e98080e7          	jalr	-360(ra) # 8001e5fa <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>
    8001376a:	e42a                	sd	a0,8(sp)
    8001376c:	e82e                	sd	a1,16(sp)
    8001376e:	a825                	j	800137a6 <.LBB11_28+0x2c>
        match ICACHE.create(
    80013770:	0000                	unimp
            Ok(inode) => {
    80013772:	752e                	ld	a0,232(sp)
    80013774:	e22a                	sd	a0,256(sp)
    80013776:	750e                	ld	a0,224(sp)
    80013778:	fdaa                	sd	a0,248(sp)

000000008001377a <.LBB11_28>:
                LOG.end_op();
    8001377a:	00054517          	auipc	a0,0x54
    8001377e:	26e50513          	addi	a0,a0,622 # 800679e8 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    80013782:	ffff6097          	auipc	ra,0xffff6
    80013786:	a16080e7          	jalr	-1514(ra) # 80009198 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>
    8001378a:	a009                	j	8001378c <.LBB11_28+0x12>
                drop(inode);
    8001378c:	6592                	ld	a1,256(sp)
    8001378e:	ea2e                	sd	a1,272(sp)
    80013790:	756e                	ld	a0,248(sp)
    80013792:	e62a                	sd	a0,264(sp)
    80013794:	0000a097          	auipc	ra,0xa
    80013798:	9a8080e7          	jalr	-1624(ra) # 8001d13c <_ZN4core3mem4drop17hb93abdfe16b94be5E>
    8001379c:	a009                	j	8001379e <.LBB11_28+0x24>
    8001379e:	4501                	li	a0,0
                Ok(0)
    800137a0:	e4aa                	sd	a0,72(sp)
    800137a2:	e0aa                	sd	a0,64(sp)
        match ICACHE.create(
    800137a4:	a0a1                	j	800137ec <.LBB11_30+0x18>
                println!("[Kernel] sys_mknod: err: {}", err);
    800137a6:	6542                	ld	a0,16(sp)
    800137a8:	65a2                	ld	a1,8(sp)
    800137aa:	eeae                	sd	a1,344(sp)
    800137ac:	f2aa                	sd	a0,352(sp)

00000000800137ae <.LBB11_29>:
    800137ae:	00016597          	auipc	a1,0x16
    800137b2:	dda58593          	addi	a1,a1,-550 # 80029588 <.L__unnamed_32>
    800137b6:	1228                	addi	a0,sp,296
    800137b8:	4609                	li	a2,2
    800137ba:	0ab4                	addi	a3,sp,344
    800137bc:	4705                	li	a4,1
    800137be:	ffff2097          	auipc	ra,0xffff2
    800137c2:	cac080e7          	jalr	-852(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    800137c6:	a009                	j	800137c8 <.LBB11_29+0x1a>
    800137c8:	1228                	addi	a0,sp,296
    800137ca:	0000a097          	auipc	ra,0xa
    800137ce:	582080e7          	jalr	1410(ra) # 8001dd4c <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    800137d2:	a009                	j	800137d4 <.LBB11_30>

00000000800137d4 <.LBB11_30>:
                LOG.end_op();
    800137d4:	00054517          	auipc	a0,0x54
    800137d8:	21450513          	addi	a0,a0,532 # 800679e8 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    800137dc:	ffff6097          	auipc	ra,0xffff6
    800137e0:	9bc080e7          	jalr	-1604(ra) # 80009198 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>
    800137e4:	a009                	j	800137e6 <.LBB11_30+0x12>
    800137e6:	4505                	li	a0,1
                Err(())
    800137e8:	e0aa                	sd	a0,64(sp)
        match ICACHE.create(
    800137ea:	a009                	j	800137ec <.LBB11_30+0x18>
            }
        }
    
    }
    800137ec:	a009                	j	800137ee <.LBB11_30+0x1a>
    800137ee:	6506                	ld	a0,64(sp)
    800137f0:	65a6                	ld	a1,72(sp)
    800137f2:	70ba                	ld	ra,424(sp)
    800137f4:	615d                	addi	sp,sp,432
    800137f6:	8082                	ret

Disassembly of section .text._ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$9sys_close17haaef41d651f2f6f7E:

00000000800137f8 <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$9sys_close17haaef41d651f2f6f7E>:

    pub fn sys_close(&self) -> SysResult {
    800137f8:	715d                	addi	sp,sp,-80
    800137fa:	e486                	sd	ra,72(sp)
    800137fc:	f82a                	sd	a0,48(sp)
    800137fe:	4581                	li	a1,0
        let fd = self.arg(0);
    80013800:	00002097          	auipc	ra,0x2
    80013804:	9aa080e7          	jalr	-1622(ra) # 800151aa <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    80013808:	85aa                	mv	a1,a0
    8001380a:	e82e                	sd	a1,16(sp)
    8001380c:	fc2a                	sd	a0,56(sp)
    8001380e:	a009                	j	80013810 <.LBB12_8>

0000000080013810 <.LBB12_8>:
        let task = unsafe { CPU_MANAGER.myproc().unwrap() };
    80013810:	00060517          	auipc	a0,0x60
    80013814:	93050513          	addi	a0,a0,-1744 # 80073140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    80013818:	ffffe097          	auipc	ra,0xffffe
    8001381c:	5e6080e7          	jalr	1510(ra) # 80011dfe <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    80013820:	e42a                	sd	a0,8(sp)
    80013822:	a009                	j	80013824 <.LBB12_8+0x14>
    80013824:	6522                	ld	a0,8(sp)

0000000080013826 <.LBB12_9>:
    80013826:	00016597          	auipc	a1,0x16
    8001382a:	d8258593          	addi	a1,a1,-638 # 800295a8 <.L__unnamed_33>
    8001382e:	ffffb097          	auipc	ra,0xffffb
    80013832:	51e080e7          	jalr	1310(ra) # 8000ed4c <_ZN4core6option15Option$LT$T$GT$6unwrap17h81f0c84c54a80648E>
    80013836:	e02a                	sd	a0,0(sp)
    80013838:	a009                	j	8001383a <.LBB12_9+0x14>
    8001383a:	65c2                	ld	a1,16(sp)
    8001383c:	6502                	ld	a0,0(sp)
    8001383e:	e0aa                	sd	a0,64(sp)
    80013840:	06300513          	li	a0,99
        // 使用 take() 夺取所有权来将引用数减 1
        task.open_files[fd].take();
    80013844:	02b56c63          	bltu	a0,a1,8001387c <.LBB12_9+0x56>
    80013848:	a009                	j	8001384a <.LBB12_9+0x24>
    8001384a:	6502                	ld	a0,0(sp)
    8001384c:	65c2                	ld	a1,16(sp)
    8001384e:	058e                	slli	a1,a1,0x3
    80013850:	952e                	add	a0,a0,a1
    80013852:	0a850513          	addi	a0,a0,168
    80013856:	ffffb097          	auipc	ra,0xffffb
    8001385a:	e7c080e7          	jalr	-388(ra) # 8000e6d2 <_ZN4core6option15Option$LT$T$GT$4take17h80e6997975665939E>
    8001385e:	f42a                	sd	a0,40(sp)
    80013860:	a009                	j	80013862 <.LBB12_9+0x3c>
    80013862:	1028                	addi	a0,sp,40
    80013864:	ffff3097          	auipc	ra,0xffff3
    80013868:	7e4080e7          	jalr	2020(ra) # 80007048 <_ZN4core3ptr96drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$$GT$17hc79d9c89cd1d7f36E>
    8001386c:	a009                	j	8001386e <.LBB12_9+0x48>
    8001386e:	4581                	li	a1,0
        Ok(0)
    80013870:	f02e                	sd	a1,32(sp)
    80013872:	ec2e                	sd	a1,24(sp)
    }
    80013874:	852e                	mv	a0,a1
    80013876:	60a6                	ld	ra,72(sp)
    80013878:	6161                	addi	sp,sp,80
    8001387a:	8082                	ret
        task.open_files[fd].take();
    8001387c:	6542                	ld	a0,16(sp)

000000008001387e <.LBB12_10>:
    8001387e:	00016617          	auipc	a2,0x16
    80013882:	d4260613          	addi	a2,a2,-702 # 800295c0 <.L__unnamed_34>
    80013886:	06400593          	li	a1,100
    8001388a:	0000f097          	auipc	ra,0xf
    8001388e:	a18080e7          	jalr	-1512(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$9sys_fstat17h0c7ad2f655d0446dE:

0000000080013894 <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$9sys_fstat17h0c7ad2f655d0446dE>:

    pub fn sys_fstat(&self) -> SysResult {
    80013894:	7111                	addi	sp,sp,-256
    80013896:	fd86                	sd	ra,248(sp)
    80013898:	e0aa                	sd	a0,64(sp)
    8001389a:	e5aa                	sd	a0,200(sp)
    8001389c:	4581                	li	a1,0
        let fd = self.arg(0);
    8001389e:	00002097          	auipc	ra,0x2
    800138a2:	90c080e7          	jalr	-1780(ra) # 800151aa <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    800138a6:	85aa                	mv	a1,a0
    800138a8:	e4ae                	sd	a1,72(sp)
    800138aa:	e9aa                	sd	a0,208(sp)
    800138ac:	a009                	j	800138ae <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$9sys_fstat17h0c7ad2f655d0446dE+0x1a>
        let stat = self.arg(1);
    800138ae:	6506                	ld	a0,64(sp)
    800138b0:	4585                	li	a1,1
    800138b2:	00002097          	auipc	ra,0x2
    800138b6:	8f8080e7          	jalr	-1800(ra) # 800151aa <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    800138ba:	85aa                	mv	a1,a0
    800138bc:	fc2e                	sd	a1,56(sp)
    800138be:	edaa                	sd	a0,216(sp)
    800138c0:	a009                	j	800138c2 <.LBB13_19>

00000000800138c2 <.LBB13_19>:

        #[cfg(feature = "kernel_debug")]
        println!("[Kernel] sys_fstat: fd: {}, stat:0x{:x}", fd, stat);

        let task = unsafe { CPU_MANAGER.myproc().unwrap() };
    800138c2:	00060517          	auipc	a0,0x60
    800138c6:	87e50513          	addi	a0,a0,-1922 # 80073140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    800138ca:	ffffe097          	auipc	ra,0xffffe
    800138ce:	534080e7          	jalr	1332(ra) # 80011dfe <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    800138d2:	f82a                	sd	a0,48(sp)
    800138d4:	a009                	j	800138d6 <.LBB13_19+0x14>
    800138d6:	7542                	ld	a0,48(sp)

00000000800138d8 <.LBB13_20>:
    800138d8:	00016597          	auipc	a1,0x16
    800138dc:	d0058593          	addi	a1,a1,-768 # 800295d8 <.L__unnamed_35>
    800138e0:	ffffb097          	auipc	ra,0xffffb
    800138e4:	46c080e7          	jalr	1132(ra) # 8000ed4c <_ZN4core6option15Option$LT$T$GT$6unwrap17h81f0c84c54a80648E>
    800138e8:	f42a                	sd	a0,40(sp)
    800138ea:	a009                	j	800138ec <.LBB13_20+0x14>
    800138ec:	65a6                	ld	a1,72(sp)
    800138ee:	7522                	ld	a0,40(sp)
    800138f0:	f1aa                	sd	a0,224(sp)
    800138f2:	06300513          	li	a0,99
        let file = task.open_files[fd].as_ref().unwrap();
    800138f6:	0cb56963          	bltu	a0,a1,800139c8 <.LBB13_23+0x36>
    800138fa:	a009                	j	800138fc <.LBB13_20+0x24>
    800138fc:	7522                	ld	a0,40(sp)
    800138fe:	65a6                	ld	a1,72(sp)
    80013900:	058e                	slli	a1,a1,0x3
    80013902:	952e                	add	a0,a0,a1
    80013904:	0a850513          	addi	a0,a0,168
    80013908:	ffffb097          	auipc	ra,0xffffb
    8001390c:	138080e7          	jalr	312(ra) # 8000ea40 <_ZN4core6option15Option$LT$T$GT$6as_ref17h0cd8921964ab0966E>
    80013910:	f02a                	sd	a0,32(sp)
    80013912:	a009                	j	80013914 <.LBB13_20+0x3c>
    80013914:	7502                	ld	a0,32(sp)

0000000080013916 <.LBB13_21>:
    80013916:	00016597          	auipc	a1,0x16
    8001391a:	cf258593          	addi	a1,a1,-782 # 80029608 <.L__unnamed_36>
    8001391e:	ffffb097          	auipc	ra,0xffffb
    80013922:	464080e7          	jalr	1124(ra) # 8000ed82 <_ZN4core6option15Option$LT$T$GT$6unwrap17h84dba6f31c77e511E>
    80013926:	85aa                	mv	a1,a0
    80013928:	ec2e                	sd	a1,24(sp)
    8001392a:	f5aa                	sd	a0,232(sp)
    8001392c:	a009                	j	8001392e <.LBB13_21+0x18>

        #[cfg(feature = "kernel_debug")]
        println!("[Kernel] sys_fstat: File Type: {:?}", file.ftype);

        match file.stat(stat) {
    8001392e:	6562                	ld	a0,24(sp)
    80013930:	fffef097          	auipc	ra,0xfffef
    80013934:	c9a080e7          	jalr	-870(ra) # 800025ca <_ZN69_$LT$alloc..sync..Arc$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h7c280ba665690166E>
    80013938:	e82a                	sd	a0,16(sp)
    8001393a:	a009                	j	8001393c <.LBB13_21+0x26>
    8001393c:	75e2                	ld	a1,56(sp)
    8001393e:	6542                	ld	a0,16(sp)
    80013940:	ffff2097          	auipc	ra,0xffff2
    80013944:	606080e7          	jalr	1542(ra) # 80005f46 <_ZN6kernel2fs4file5VFile4stat17heebdb0d64a039b86E>
    80013948:	f0aa                	sd	a0,96(sp)
    8001394a:	f4ae                	sd	a1,104(sp)
    8001394c:	a009                	j	8001394e <.LBB13_21+0x38>
            Ok(()) => {
    8001394e:	7506                	ld	a0,96(sp)
    80013950:	00a035b3          	snez	a1,a0
    80013954:	4581                	li	a1,0
    80013956:	02b50663          	beq	a0,a1,80013982 <.LBB13_22+0x18>
    8001395a:	a009                	j	8001395c <.LBB13_21+0x46>
                return Ok(0)
            },

            Err(err) => {
    8001395c:	7586                	ld	a1,96(sp)
    8001395e:	7526                	ld	a0,104(sp)
    80013960:	f8ae                	sd	a1,112(sp)
    80013962:	fcaa                	sd	a0,120(sp)
    80013964:	1888                	addi	a0,sp,112
                println!("[Kernel] sys_stat: err: {}", err);
    80013966:	e1aa                	sd	a0,192(sp)
    80013968:	f9aa                	sd	a0,240(sp)

000000008001396a <.LBB13_22>:
    8001396a:	0000b597          	auipc	a1,0xb
    8001396e:	c4a58593          	addi	a1,a1,-950 # 8001e5b4 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E>
    80013972:	0000b097          	auipc	ra,0xb
    80013976:	c88080e7          	jalr	-888(ra) # 8001e5fa <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>
    8001397a:	e02a                	sd	a0,0(sp)
    8001397c:	e42e                	sd	a1,8(sp)
    8001397e:	a031                	j	8001398a <.LBB13_22+0x20>
        match file.stat(stat) {
    80013980:	0000                	unimp
    80013982:	4501                	li	a0,0
                return Ok(0)
    80013984:	ecaa                	sd	a0,88(sp)
    80013986:	e8aa                	sd	a0,80(sp)
    80013988:	a81d                	j	800139be <.LBB13_23+0x2c>
                println!("[Kernel] sys_stat: err: {}", err);
    8001398a:	6522                	ld	a0,8(sp)
    8001398c:	6582                	ld	a1,0(sp)
    8001398e:	f92e                	sd	a1,176(sp)
    80013990:	fd2a                	sd	a0,184(sp)

0000000080013992 <.LBB13_23>:
    80013992:	00016597          	auipc	a1,0x16
    80013996:	ca658593          	addi	a1,a1,-858 # 80029638 <.L__unnamed_37>
    8001399a:	0108                	addi	a0,sp,128
    8001399c:	4609                	li	a2,2
    8001399e:	1914                	addi	a3,sp,176
    800139a0:	4705                	li	a4,1
    800139a2:	ffff2097          	auipc	ra,0xffff2
    800139a6:	ac8080e7          	jalr	-1336(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    800139aa:	a009                	j	800139ac <.LBB13_23+0x1a>
    800139ac:	0108                	addi	a0,sp,128
    800139ae:	0000a097          	auipc	ra,0xa
    800139b2:	39e080e7          	jalr	926(ra) # 8001dd4c <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    800139b6:	a009                	j	800139b8 <.LBB13_23+0x26>
    800139b8:	4505                	li	a0,1
                return Err(())
    800139ba:	e8aa                	sd	a0,80(sp)
    800139bc:	a009                	j	800139be <.LBB13_23+0x2c>
            }
        }
    }
    800139be:	6546                	ld	a0,80(sp)
    800139c0:	65e6                	ld	a1,88(sp)
    800139c2:	70ee                	ld	ra,248(sp)
    800139c4:	6111                	addi	sp,sp,256
    800139c6:	8082                	ret
        let file = task.open_files[fd].as_ref().unwrap();
    800139c8:	6526                	ld	a0,72(sp)

00000000800139ca <.LBB13_24>:
    800139ca:	00016617          	auipc	a2,0x16
    800139ce:	c2660613          	addi	a2,a2,-986 # 800295f0 <.L__unnamed_38>
    800139d2:	06400593          	li	a1,100
    800139d6:	0000f097          	auipc	ra,0xf
    800139da:	8cc080e7          	jalr	-1844(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$9sys_chdir17he6ad16137b6ff3daE:

00000000800139e0 <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$9sys_chdir17he6ad16137b6ff3daE>:

    pub fn sys_chdir(&self) -> SysResult {
    800139e0:	7109                	addi	sp,sp,-384
    800139e2:	fe86                	sd	ra,376(sp)
    800139e4:	f82a                	sd	a0,48(sp)
    800139e6:	eaaa                	sd	a0,336(sp)
    800139e8:	4581                	li	a1,0
        let mut path = [0u8; MAXPATH];
    800139ea:	14b107a3          	sb	a1,335(sp)
    800139ee:	04f10513          	addi	a0,sp,79
    800139f2:	08000613          	li	a2,128
    800139f6:	00011097          	auipc	ra,0x11
    800139fa:	740080e7          	jalr	1856(ra) # 80025136 <memset>

00000000800139fe <.LBB14_33>:
        LOG.begin_op();
    800139fe:	00054517          	auipc	a0,0x54
    80013a02:	fea50513          	addi	a0,a0,-22 # 800679e8 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    80013a06:	ffff5097          	auipc	ra,0xffff5
    80013a0a:	1ac080e7          	jalr	428(ra) # 80008bb2 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$8begin_op17he5b49a48c716e372E>
    80013a0e:	a009                	j	80013a10 <.LBB14_33+0x12>
        let addr = self.arg(0);
    80013a10:	7542                	ld	a0,48(sp)
    80013a12:	4581                	li	a1,0
    80013a14:	00001097          	auipc	ra,0x1
    80013a18:	796080e7          	jalr	1942(ra) # 800151aa <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    80013a1c:	85aa                	mv	a1,a0
    80013a1e:	f42e                	sd	a1,40(sp)
    80013a20:	f6aa                	sd	a0,360(sp)
    80013a22:	a009                	j	80013a24 <.LBB14_33+0x26>
        self.copy_from_str(addr, &mut path, MAXPATH)?;
    80013a24:	75a2                	ld	a1,40(sp)
    80013a26:	7542                	ld	a0,48(sp)
    80013a28:	04f10613          	addi	a2,sp,79
    80013a2c:	08000713          	li	a4,128
    80013a30:	86ba                	mv	a3,a4
    80013a32:	00002097          	auipc	ra,0x2
    80013a36:	828080e7          	jalr	-2008(ra) # 8001525a <_ZN6kernel7syscall7Syscall13copy_from_str17h5c83be6e0d4b822aE>
    80013a3a:	f02a                	sd	a0,32(sp)
    80013a3c:	a009                	j	80013a3e <.LBB14_33+0x40>
    80013a3e:	7502                	ld	a0,32(sp)
    80013a40:	ffff9097          	auipc	ra,0xffff9
    80013a44:	7bc080e7          	jalr	1980(ra) # 8000d1fc <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h9e3ff03fe8989dd2E>
    80013a48:	0ca107a3          	sb	a0,207(sp)
    80013a4c:	a009                	j	80013a4e <.LBB14_33+0x50>
    80013a4e:	0cf14503          	lbu	a0,207(sp)
    80013a52:	8905                	andi	a0,a0,1
    80013a54:	4581                	li	a1,0
    80013a56:	00b50463          	beq	a0,a1,80013a5e <.LBB14_34>
    80013a5a:	a009                	j	80013a5c <.LBB14_33+0x5e>
    80013a5c:	a005                	j	80013a7c <.LBB14_34+0x1e>

0000000080013a5e <.LBB14_34>:
        match ICACHE.namei(&path) {
    80013a5e:	00054597          	auipc	a1,0x54
    80013a62:	03258593          	addi	a1,a1,50 # 80067a90 <_ZN6kernel2fs5inode6ICACHE17had1be8942ca79bf1E>
    80013a66:	0988                	addi	a0,sp,208
    80013a68:	04f10613          	addi	a2,sp,79
    80013a6c:	08000693          	li	a3,128
    80013a70:	00006097          	auipc	ra,0x6
    80013a74:	a02080e7          	jalr	-1534(ra) # 80019472 <_ZN6kernel2fs5inode10InodeCache5namei17hc269c6a9eecf1991E>
    80013a78:	a831                	j	80013a94 <.LBB14_34+0x36>
        self.copy_from_str(addr, &mut path, MAXPATH)?;
    80013a7a:	0000                	unimp
    80013a7c:	ffff8097          	auipc	ra,0xffff8
    80013a80:	fea080e7          	jalr	-22(ra) # 8000ba66 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h2e645b443ebf2dc7E>
    80013a84:	a009                	j	80013a86 <.LBB14_34+0x28>
    80013a86:	ffff9097          	auipc	ra,0xffff9
    80013a8a:	662080e7          	jalr	1634(ra) # 8000d0e8 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h74072cf57097ff24E>
    80013a8e:	fc2a                	sd	a0,56(sp)
    80013a90:	e0ae                	sd	a1,64(sp)
    80013a92:	a225                	j	80013bba <.LBB14_39+0x48>
            Some(inode) => {
    80013a94:	654e                	ld	a0,208(sp)
    80013a96:	4581                	li	a1,0
    80013a98:	00b50463          	beq	a0,a1,80013aa0 <.LBB14_35>
    80013a9c:	a009                	j	80013a9e <.LBB14_34+0x40>
    80013a9e:	a819                	j	80013ab4 <.LBB14_35+0x14>

0000000080013aa0 <.LBB14_35>:
                    }
                }
            },

            None => {
                LOG.end_op();
    80013aa0:	00054517          	auipc	a0,0x54
    80013aa4:	f4850513          	addi	a0,a0,-184 # 800679e8 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    80013aa8:	ffff5097          	auipc	ra,0xffff5
    80013aac:	6f0080e7          	jalr	1776(ra) # 80009198 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>
    80013ab0:	a8c5                	j	80013ba0 <.LBB14_39+0x2e>
        match ICACHE.namei(&path) {
    80013ab2:	0000                	unimp
    80013ab4:	4505                	li	a0,1
            Some(inode) => {
    80013ab6:	14a107a3          	sb	a0,335(sp)
    80013aba:	656e                	ld	a0,216(sp)
    80013abc:	f5aa                	sd	a0,232(sp)
    80013abe:	750e                	ld	a0,224(sp)
    80013ac0:	f9aa                	sd	a0,240(sp)
    80013ac2:	11a8                	addi	a0,sp,232
                let inode_guard = inode.lock();
    80013ac4:	00007097          	auipc	ra,0x7
    80013ac8:	3f2080e7          	jalr	1010(ra) # 8001aeb6 <_ZN6kernel2fs5inode5Inode4lock17he70970c593f751adE>
    80013acc:	fdaa                	sd	a0,248(sp)
    80013ace:	e22e                	sd	a1,256(sp)
    80013ad0:	a009                	j	80013ad2 <.LBB14_35+0x32>
    80013ad2:	19a8                	addi	a0,sp,248
                match inode_guard.dinode.itype {
    80013ad4:	0000a097          	auipc	ra,0xa
    80013ad8:	bfa080e7          	jalr	-1030(ra) # 8001d6ce <_ZN92_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfc7812d7ca7ab1e1E>
    80013adc:	ec2a                	sd	a0,24(sp)
    80013ade:	a009                	j	80013ae0 <.LBB14_35+0x40>
                    InodeType::Directory => {
    80013ae0:	6562                	ld	a0,24(sp)
    80013ae2:	00855503          	lhu	a0,8(a0)
    80013ae6:	4585                	li	a1,1
    80013ae8:	00b50c63          	beq	a0,a1,80013b00 <.LBB14_36+0x12>
    80013aec:	a009                	j	80013aee <.LBB14_36>

0000000080013aee <.LBB14_36>:
                        LOG.end_op();
    80013aee:	00054517          	auipc	a0,0x54
    80013af2:	efa50513          	addi	a0,a0,-262 # 800679e8 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    80013af6:	ffff5097          	auipc	ra,0xffff5
    80013afa:	6a2080e7          	jalr	1698(ra) # 80009198 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>
    80013afe:	a079                	j	80013b8c <.LBB14_39+0x1a>
                        drop(inode_guard);
    80013b00:	756e                	ld	a0,248(sp)
    80013b02:	6592                	ld	a1,256(sp)
    80013b04:	00009097          	auipc	ra,0x9
    80013b08:	564080e7          	jalr	1380(ra) # 8001d068 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    80013b0c:	a009                	j	80013b0e <.LBB14_37>

0000000080013b0e <.LBB14_37>:
                        let task = unsafe { CPU_MANAGER.myproc().unwrap() };
    80013b0e:	0005f517          	auipc	a0,0x5f
    80013b12:	63250513          	addi	a0,a0,1586 # 80073140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    80013b16:	ffffe097          	auipc	ra,0xffffe
    80013b1a:	2e8080e7          	jalr	744(ra) # 80011dfe <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    80013b1e:	e82a                	sd	a0,16(sp)
    80013b20:	a009                	j	80013b22 <.LBB14_37+0x14>
    80013b22:	6542                	ld	a0,16(sp)

0000000080013b24 <.LBB14_38>:
    80013b24:	00016597          	auipc	a1,0x16
    80013b28:	b3458593          	addi	a1,a1,-1228 # 80029658 <.L__unnamed_39>
    80013b2c:	ffffb097          	auipc	ra,0xffffb
    80013b30:	220080e7          	jalr	544(ra) # 8000ed4c <_ZN4core6option15Option$LT$T$GT$6unwrap17h81f0c84c54a80648E>
    80013b34:	e42a                	sd	a0,8(sp)
    80013b36:	a009                	j	80013b38 <.LBB14_38+0x14>
    80013b38:	6522                	ld	a0,8(sp)
    80013b3a:	faaa                	sd	a0,368(sp)
                        let old_cwd = task.cwd.replace(inode);
    80013b3c:	3c850593          	addi	a1,a0,968
    80013b40:	4501                	li	a0,0
    80013b42:	14a107a3          	sb	a0,335(sp)
    80013b46:	76ce                	ld	a3,240(sp)
    80013b48:	f636                	sd	a3,296(sp)
    80013b4a:	762e                	ld	a2,232(sp)
    80013b4c:	f232                	sd	a2,288(sp)
    80013b4e:	0228                	addi	a0,sp,264
    80013b50:	ffffb097          	auipc	ra,0xffffb
    80013b54:	4d0080e7          	jalr	1232(ra) # 8000f020 <_ZN4core6option15Option$LT$T$GT$7replace17h3b8bd4435d2ae84bE>
    80013b58:	a009                	j	80013b5a <.LBB14_38+0x36>
                        drop(old_cwd);
    80013b5a:	6572                	ld	a0,280(sp)
    80013b5c:	e2aa                	sd	a0,320(sp)
    80013b5e:	6552                	ld	a0,272(sp)
    80013b60:	fe2a                	sd	a0,312(sp)
    80013b62:	6532                	ld	a0,264(sp)
    80013b64:	fa2a                	sd	a0,304(sp)
    80013b66:	1a08                	addi	a0,sp,304
    80013b68:	00009097          	auipc	ra,0x9
    80013b6c:	532080e7          	jalr	1330(ra) # 8001d09a <_ZN4core3mem4drop17h66bc7e80d0a41b3aE>
    80013b70:	a009                	j	80013b72 <.LBB14_39>

0000000080013b72 <.LBB14_39>:
                        LOG.end_op();
    80013b72:	00054517          	auipc	a0,0x54
    80013b76:	e7650513          	addi	a0,a0,-394 # 800679e8 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    80013b7a:	ffff5097          	auipc	ra,0xffff5
    80013b7e:	61e080e7          	jalr	1566(ra) # 80009198 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>
    80013b82:	a009                	j	80013b84 <.LBB14_39+0x12>
    80013b84:	4501                	li	a0,0
                        return Ok(0)
    80013b86:	e0aa                	sd	a0,64(sp)
    80013b88:	fc2a                	sd	a0,56(sp)
    80013b8a:	a831                	j	80013ba6 <.LBB14_39+0x34>
                        drop(inode_guard);
    80013b8c:	756e                	ld	a0,248(sp)
    80013b8e:	6592                	ld	a1,256(sp)
    80013b90:	00009097          	auipc	ra,0x9
    80013b94:	4d8080e7          	jalr	1240(ra) # 8001d068 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    80013b98:	a009                	j	80013b9a <.LBB14_39+0x28>
    80013b9a:	4505                	li	a0,1
                        return Err(())
    80013b9c:	fc2a                	sd	a0,56(sp)
    80013b9e:	a021                	j	80013ba6 <.LBB14_39+0x34>
    80013ba0:	4505                	li	a0,1
                return Err(())
    80013ba2:	fc2a                	sd	a0,56(sp)
    80013ba4:	a811                	j	80013bb8 <.LBB14_39+0x46>
            },
    80013ba6:	14f14503          	lbu	a0,335(sp)
    80013baa:	8905                	andi	a0,a0,1
    80013bac:	ed01                	bnez	a0,80013bc4 <.LBB14_39+0x52>
    80013bae:	a009                	j	80013bb0 <.LBB14_39+0x3e>
    80013bb0:	4501                	li	a0,0
    80013bb2:	14a107a3          	sb	a0,335(sp)
    80013bb6:	a009                	j	80013bb8 <.LBB14_39+0x46>
    80013bb8:	a009                	j	80013bba <.LBB14_39+0x48>
            }
        }

    }
    80013bba:	7562                	ld	a0,56(sp)
    80013bbc:	6586                	ld	a1,64(sp)
    80013bbe:	70f6                	ld	ra,376(sp)
    80013bc0:	6119                	addi	sp,sp,384
    80013bc2:	8082                	ret
    80013bc4:	11a8                	addi	a0,sp,232
            },
    80013bc6:	ffff3097          	auipc	ra,0xffff3
    80013bca:	2bc080e7          	jalr	700(ra) # 80006e82 <_ZN4core3ptr45drop_in_place$LT$kernel..fs..inode..Inode$GT$17h8786fe1a2a287832E>
    80013bce:	b7cd                	j	80013bb0 <.LBB14_39+0x3e>

Disassembly of section .text._ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_pipe17h8968716548f34df6E:

0000000080013bd0 <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_pipe17h8968716548f34df6E>:

    pub fn sys_pipe(&self) -> SysResult {
    80013bd0:	b1010113          	addi	sp,sp,-1264
    80013bd4:	4e113423          	sd	ra,1256(sp)
    80013bd8:	ed2a                	sd	a0,152(sp)
    80013bda:	48a13423          	sd	a0,1160(sp)
    80013bde:	1928                	addi	a0,sp,184
        // User use an array to represent two file. 
        // let mut fd_array: usize = 0;
        let mut rf: &mut VFile = &mut VFile::init();
    80013be0:	ffff2097          	auipc	ra,0xffff2
    80013be4:	b2a080e7          	jalr	-1238(ra) # 8000570a <_ZN6kernel2fs4file5VFile4init17h000c38ec0bf103cfE>
    80013be8:	a009                	j	80013bea <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_pipe17h8968716548f34df6E+0x1a>
    80013bea:	1928                	addi	a0,sp,184
    80013bec:	f92a                	sd	a0,176(sp)
    80013bee:	19a8                	addi	a0,sp,248
        let mut wf: &mut VFile = &mut VFile::init();
    80013bf0:	ffff2097          	auipc	ra,0xffff2
    80013bf4:	b1a080e7          	jalr	-1254(ra) # 8000570a <_ZN6kernel2fs4file5VFile4init17h000c38ec0bf103cfE>
    80013bf8:	a009                	j	80013bfa <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_pipe17h8968716548f34df6E+0x2a>
    80013bfa:	656a                	ld	a0,152(sp)
    80013bfc:	19ac                	addi	a1,sp,248
    80013bfe:	f9ae                	sd	a1,240(sp)
    80013c00:	4581                	li	a1,0
        // arg_addr(0, &mut &mut fd_array)?;
        let fd_array = self.arg(0);
    80013c02:	00001097          	auipc	ra,0x1
    80013c06:	5a8080e7          	jalr	1448(ra) # 800151aa <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    80013c0a:	85aa                	mv	a1,a0
    80013c0c:	e92e                	sd	a1,144(sp)
    80013c0e:	48a13823          	sd	a0,1168(sp)
    80013c12:	a009                	j	80013c14 <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_pipe17h8968716548f34df6E+0x44>
    80013c14:	1a08                	addi	a0,sp,304
    80013c16:	190c                	addi	a1,sp,176
    80013c18:	1990                	addi	a2,sp,240
        Pipe::alloc(&mut rf, &mut wf);
    80013c1a:	ffff6097          	auipc	ra,0xffff6
    80013c1e:	384080e7          	jalr	900(ra) # 80009f9e <_ZN6kernel2fs4pipe4Pipe5alloc17h4de2fbd258847b3fE>
    80013c22:	a009                	j	80013c24 <.LBB15_58>

0000000080013c24 <.LBB15_58>:

        let p = unsafe {
            CPU_MANAGER.myproc().expect("Fail to get my process.")
    80013c24:	0005f517          	auipc	a0,0x5f
    80013c28:	51c50513          	addi	a0,a0,1308 # 80073140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    80013c2c:	ffffe097          	auipc	ra,0xffffe
    80013c30:	1d2080e7          	jalr	466(ra) # 80011dfe <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    80013c34:	e52a                	sd	a0,136(sp)
    80013c36:	a009                	j	80013c38 <.LBB15_58+0x14>
    80013c38:	652a                	ld	a0,136(sp)

0000000080013c3a <.LBB15_59>:
    80013c3a:	00016597          	auipc	a1,0x16
    80013c3e:	a3658593          	addi	a1,a1,-1482 # 80029670 <.L__unnamed_40>

0000000080013c42 <.LBB15_60>:
    80013c42:	00016697          	auipc	a3,0x16
    80013c46:	a4668693          	addi	a3,a3,-1466 # 80029688 <.L__unnamed_41>
    80013c4a:	465d                	li	a2,23
    80013c4c:	ffffb097          	auipc	ra,0xffffb
    80013c50:	f14080e7          	jalr	-236(ra) # 8000eb60 <_ZN4core6option15Option$LT$T$GT$6expect17h5cc0070b74d715b8E>
    80013c54:	e12a                	sd	a0,128(sp)
    80013c56:	a009                	j	80013c58 <.LBB15_60+0x16>
    80013c58:	658a                	ld	a1,128(sp)
    80013c5a:	48b13c23          	sd	a1,1176(sp)
        };

        // Allocate file descriptor for r/w file. 
        let rfd: usize;
        let wfd: usize;
        match p.fd_alloc(rf) {
    80013c5e:	764a                	ld	a2,176(sp)
    80013c60:	16a8                	addi	a0,sp,872
    80013c62:	00002097          	auipc	ra,0x2
    80013c66:	78c080e7          	jalr	1932(ra) # 800163ee <_ZN6kernel7process7process11task_struct8fd_alloc17h2f054cafd5acb7f0E>
    80013c6a:	a009                	j	80013c6c <.LBB15_60+0x2a>
            Ok(fd) => {
    80013c6c:	36813503          	ld	a0,872(sp)
    80013c70:	4581                	li	a1,0
    80013c72:	02b50c63          	beq	a0,a1,80013caa <.LBB15_61+0x18>
    80013c76:	a009                	j	80013c78 <.LBB15_60+0x36>
                rfd = fd;
            },

            Err(err) => {
    80013c78:	37013583          	ld	a1,880(sp)
    80013c7c:	37813503          	ld	a0,888(sp)
    80013c80:	38b13023          	sd	a1,896(sp)
    80013c84:	38a13423          	sd	a0,904(sp)
    80013c88:	0708                	addi	a0,sp,896
                // rf.close();
                println!("[Kernel] sys_pipe: err: {}", err);
    80013c8a:	3ca13823          	sd	a0,976(sp)
    80013c8e:	4aa13023          	sd	a0,1184(sp)

0000000080013c92 <.LBB15_61>:
    80013c92:	0000b597          	auipc	a1,0xb
    80013c96:	92258593          	addi	a1,a1,-1758 # 8001e5b4 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E>
    80013c9a:	0000b097          	auipc	ra,0xb
    80013c9e:	960080e7          	jalr	-1696(ra) # 8001e5fa <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>
    80013ca2:	f8aa                	sd	a0,112(sp)
    80013ca4:	fcae                	sd	a1,120(sp)
    80013ca6:	a00d                	j	80013cc8 <.LBB15_61+0x36>
        match p.fd_alloc(rf) {
    80013ca8:	0000                	unimp
            Ok(fd) => {
    80013caa:	658a                	ld	a1,128(sp)
    80013cac:	37013503          	ld	a0,880(sp)
    80013cb0:	f4aa                	sd	a0,104(sp)
    80013cb2:	4aa13423          	sd	a0,1192(sp)
                rfd = fd;
    80013cb6:	4aa13823          	sd	a0,1200(sp)
                return Err(())
            }
        }
        
        match p.fd_alloc(wf) {
    80013cba:	764e                	ld	a2,240(sp)
    80013cbc:	0fa8                	addi	a0,sp,984
    80013cbe:	00002097          	auipc	ra,0x2
    80013cc2:	730080e7          	jalr	1840(ra) # 800163ee <_ZN6kernel7process7process11task_struct8fd_alloc17h2f054cafd5acb7f0E>
    80013cc6:	a82d                	j	80013d00 <.LBB15_62+0x2c>
                println!("[Kernel] sys_pipe: err: {}", err);
    80013cc8:	7566                	ld	a0,120(sp)
    80013cca:	75c6                	ld	a1,112(sp)
    80013ccc:	3cb13023          	sd	a1,960(sp)
    80013cd0:	3ca13423          	sd	a0,968(sp)

0000000080013cd4 <.LBB15_62>:
    80013cd4:	00016597          	auipc	a1,0x16
    80013cd8:	9e458593          	addi	a1,a1,-1564 # 800296b8 <.L__unnamed_42>
    80013cdc:	0f08                	addi	a0,sp,912
    80013cde:	4609                	li	a2,2
    80013ce0:	0794                	addi	a3,sp,960
    80013ce2:	4705                	li	a4,1
    80013ce4:	ffff1097          	auipc	ra,0xffff1
    80013ce8:	786080e7          	jalr	1926(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80013cec:	a009                	j	80013cee <.LBB15_62+0x1a>
    80013cee:	0f08                	addi	a0,sp,912
    80013cf0:	0000a097          	auipc	ra,0xa
    80013cf4:	05c080e7          	jalr	92(ra) # 8001dd4c <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    80013cf8:	a009                	j	80013cfa <.LBB15_62+0x26>
    80013cfa:	4505                	li	a0,1
                return Err(())
    80013cfc:	f12a                	sd	a0,160(sp)
    80013cfe:	ac3d                	j	80013f3c <.LBB15_66+0x192>
            Ok(fd) => {
    80013d00:	3d813503          	ld	a0,984(sp)
    80013d04:	4581                	li	a1,0
    80013d06:	02b50c63          	beq	a0,a1,80013d3e <.LBB15_63+0x18>
    80013d0a:	a009                	j	80013d0c <.LBB15_62+0x38>
                wfd = fd;
            },

            Err(err) => {
    80013d0c:	3e013583          	ld	a1,992(sp)
    80013d10:	3e813503          	ld	a0,1000(sp)
    80013d14:	3eb13823          	sd	a1,1008(sp)
    80013d18:	3ea13c23          	sd	a0,1016(sp)
    80013d1c:	1f88                	addi	a0,sp,1008
                // rf.close();
                // wf.close();
                println!("[Kernel] sys_pipe: err: {}", err);
    80013d1e:	44a13023          	sd	a0,1088(sp)
    80013d22:	4aa13c23          	sd	a0,1208(sp)

0000000080013d26 <.LBB15_63>:
    80013d26:	0000b597          	auipc	a1,0xb
    80013d2a:	88e58593          	addi	a1,a1,-1906 # 8001e5b4 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E>
    80013d2e:	0000b097          	auipc	ra,0xb
    80013d32:	8cc080e7          	jalr	-1844(ra) # 8001e5fa <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>
    80013d36:	ecaa                	sd	a0,88(sp)
    80013d38:	f0ae                	sd	a1,96(sp)
    80013d3a:	a805                	j	80013d6a <.LBB15_64+0x14>
        match p.fd_alloc(wf) {
    80013d3c:	0000                	unimp
            Ok(fd) => {
    80013d3e:	650a                	ld	a0,128(sp)
    80013d40:	3e013583          	ld	a1,992(sp)
    80013d44:	e0ae                	sd	a1,64(sp)
    80013d46:	4cb13023          	sd	a1,1216(sp)
                wfd = fd;
    80013d4a:	4cb13423          	sd	a1,1224(sp)
                return Err(())
            }
        }

        let pgt = unsafe { &mut *p.pagetable };
    80013d4e:	6d08                	ld	a0,24(a0)
    80013d50:	e4aa                	sd	a0,72(sp)
    80013d52:	4ca13823          	sd	a0,1232(sp)

0000000080013d56 <.LBB15_64>:
        let task = unsafe { CPU_MANAGER.myproc().unwrap() };
    80013d56:	0005f517          	auipc	a0,0x5f
    80013d5a:	3ea50513          	addi	a0,a0,1002 # 80073140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    80013d5e:	ffffe097          	auipc	ra,0xffffe
    80013d62:	0a0080e7          	jalr	160(ra) # 80011dfe <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    80013d66:	e8aa                	sd	a0,80(sp)
    80013d68:	a081                	j	80013da8 <.LBB15_65+0x32>
                println!("[Kernel] sys_pipe: err: {}", err);
    80013d6a:	7506                	ld	a0,96(sp)
    80013d6c:	65e6                	ld	a1,88(sp)
    80013d6e:	42b13823          	sd	a1,1072(sp)
    80013d72:	42a13c23          	sd	a0,1080(sp)

0000000080013d76 <.LBB15_65>:
    80013d76:	00016597          	auipc	a1,0x16
    80013d7a:	94258593          	addi	a1,a1,-1726 # 800296b8 <.L__unnamed_42>
    80013d7e:	40010513          	addi	a0,sp,1024
    80013d82:	4609                	li	a2,2
    80013d84:	43010693          	addi	a3,sp,1072
    80013d88:	4705                	li	a4,1
    80013d8a:	ffff1097          	auipc	ra,0xffff1
    80013d8e:	6e0080e7          	jalr	1760(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80013d92:	a009                	j	80013d94 <.LBB15_65+0x1e>
    80013d94:	40010513          	addi	a0,sp,1024
    80013d98:	0000a097          	auipc	ra,0xa
    80013d9c:	fb4080e7          	jalr	-76(ra) # 8001dd4c <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    80013da0:	a009                	j	80013da2 <.LBB15_65+0x2c>
    80013da2:	4505                	li	a0,1
                return Err(())
    80013da4:	f12a                	sd	a0,160(sp)
    80013da6:	aa59                	j	80013f3c <.LBB15_66+0x192>
        let task = unsafe { CPU_MANAGER.myproc().unwrap() };
    80013da8:	6546                	ld	a0,80(sp)

0000000080013daa <.LBB15_66>:
    80013daa:	00016597          	auipc	a1,0x16
    80013dae:	92e58593          	addi	a1,a1,-1746 # 800296d8 <.L__unnamed_43>
    80013db2:	ffffb097          	auipc	ra,0xffffb
    80013db6:	f9a080e7          	jalr	-102(ra) # 8000ed4c <_ZN4core6option15Option$LT$T$GT$6unwrap17h81f0c84c54a80648E>
    80013dba:	fc2a                	sd	a0,56(sp)
    80013dbc:	a009                	j	80013dbe <.LBB15_66+0x14>
    80013dbe:	7562                	ld	a0,56(sp)
    80013dc0:	4ca13c23          	sd	a0,1240(sp)
        let open_files = &mut task.open_files;
    80013dc4:	0a850513          	addi	a0,a0,168
    80013dc8:	f42a                	sd	a0,40(sp)
    80013dca:	4ea13023          	sd	a0,1248(sp)
        if pgt.copy_out(fd_array, rf as *const _ as *const u8, size_of::<usize>()).is_err() {
    80013dce:	754a                	ld	a0,176(sp)
    80013dd0:	f82a                	sd	a0,48(sp)
    80013dd2:	a009                	j	80013dd4 <.LBB15_66+0x2a>
    80013dd4:	7642                	ld	a2,48(sp)
    80013dd6:	65ca                	ld	a1,144(sp)
    80013dd8:	6526                	ld	a0,72(sp)
    80013dda:	46a1                	li	a3,8
    80013ddc:	00004097          	auipc	ra,0x4
    80013de0:	dec080e7          	jalr	-532(ra) # 80017bc8 <_ZN6kernel6memory7mapping10page_table9PageTable8copy_out17h55d0f27ee3680817E>
    80013de4:	44a13423          	sd	a0,1096(sp)
    80013de8:	44b13823          	sd	a1,1104(sp)
    80013dec:	a009                	j	80013dee <.LBB15_66+0x44>
    80013dee:	44810513          	addi	a0,sp,1096
    80013df2:	ffff9097          	auipc	ra,0xffff9
    80013df6:	f6c080e7          	jalr	-148(ra) # 8000cd5e <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h304118d236359d80E>
    80013dfa:	f02a                	sd	a0,32(sp)
    80013dfc:	a009                	j	80013dfe <.LBB15_66+0x54>
    80013dfe:	7502                	ld	a0,32(sp)
    80013e00:	4581                	li	a1,0
    80013e02:	00b50963          	beq	a0,a1,80013e14 <.LBB15_66+0x6a>
    80013e06:	a009                	j	80013e08 <.LBB15_66+0x5e>
    80013e08:	7526                	ld	a0,104(sp)
    80013e0a:	06400593          	li	a1,100
            open_files[rfd].take();
    80013e0e:	00b56463          	bltu	a0,a1,80013e16 <.LBB15_66+0x6c>
    80013e12:	aa81                	j	80013f62 <.LBB15_66+0x1b8>
            // wf.close();
            return Err(())
        }

        if pgt.copy_out(
            fd_array + size_of::<usize>(), 
    80013e14:	a8b1                	j	80013e70 <.LBB15_66+0xc6>
            open_files[rfd].take();
    80013e16:	7522                	ld	a0,40(sp)
    80013e18:	75a6                	ld	a1,104(sp)
    80013e1a:	058e                	slli	a1,a1,0x3
    80013e1c:	952e                	add	a0,a0,a1
    80013e1e:	ffffb097          	auipc	ra,0xffffb
    80013e22:	8b4080e7          	jalr	-1868(ra) # 8000e6d2 <_ZN4core6option15Option$LT$T$GT$4take17h80e6997975665939E>
    80013e26:	44a13c23          	sd	a0,1112(sp)
    80013e2a:	a009                	j	80013e2c <.LBB15_66+0x82>
    80013e2c:	45810513          	addi	a0,sp,1112
    80013e30:	ffff3097          	auipc	ra,0xffff3
    80013e34:	218080e7          	jalr	536(ra) # 80007048 <_ZN4core3ptr96drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$$GT$17hc79d9c89cd1d7f36E>
    80013e38:	a009                	j	80013e3a <.LBB15_66+0x90>
    80013e3a:	6586                	ld	a1,64(sp)
    80013e3c:	06300513          	li	a0,99
            open_files[wfd].take();
    80013e40:	12b56d63          	bltu	a0,a1,80013f7a <.LBB15_67+0x16>
    80013e44:	a009                	j	80013e46 <.LBB15_66+0x9c>
    80013e46:	7522                	ld	a0,40(sp)
    80013e48:	6586                	ld	a1,64(sp)
    80013e4a:	058e                	slli	a1,a1,0x3
    80013e4c:	952e                	add	a0,a0,a1
    80013e4e:	ffffb097          	auipc	ra,0xffffb
    80013e52:	884080e7          	jalr	-1916(ra) # 8000e6d2 <_ZN4core6option15Option$LT$T$GT$4take17h80e6997975665939E>
    80013e56:	46a13023          	sd	a0,1120(sp)
    80013e5a:	a009                	j	80013e5c <.LBB15_66+0xb2>
    80013e5c:	46010513          	addi	a0,sp,1120
    80013e60:	ffff3097          	auipc	ra,0xffff3
    80013e64:	1e8080e7          	jalr	488(ra) # 80007048 <_ZN4core3ptr96drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$$GT$17hc79d9c89cd1d7f36E>
    80013e68:	a009                	j	80013e6a <.LBB15_66+0xc0>
    80013e6a:	4505                	li	a0,1
            return Err(())
    80013e6c:	f12a                	sd	a0,160(sp)
    80013e6e:	a0f9                	j	80013f3c <.LBB15_66+0x192>
            fd_array + size_of::<usize>(), 
    80013e70:	65ca                	ld	a1,144(sp)
    80013e72:	00858513          	addi	a0,a1,8
    80013e76:	ec2a                	sd	a0,24(sp)
    80013e78:	10b56d63          	bltu	a0,a1,80013f92 <.LBB15_69>
    80013e7c:	a009                	j	80013e7e <.LBB15_66+0xd4>
            wf as *const _ as *const u8, 
    80013e7e:	754e                	ld	a0,240(sp)
            size_of::<usize>()
    80013e80:	e82a                	sd	a0,16(sp)
    80013e82:	a009                	j	80013e84 <.LBB15_66+0xda>
        if pgt.copy_out(
    80013e84:	6642                	ld	a2,16(sp)
    80013e86:	65e2                	ld	a1,24(sp)
    80013e88:	6526                	ld	a0,72(sp)
    80013e8a:	46a1                	li	a3,8
    80013e8c:	00004097          	auipc	ra,0x4
    80013e90:	d3c080e7          	jalr	-708(ra) # 80017bc8 <_ZN6kernel6memory7mapping10page_table9PageTable8copy_out17h55d0f27ee3680817E>
    80013e94:	46a13423          	sd	a0,1128(sp)
    80013e98:	46b13823          	sd	a1,1136(sp)
    80013e9c:	a009                	j	80013e9e <.LBB15_66+0xf4>
    80013e9e:	46810513          	addi	a0,sp,1128
    80013ea2:	ffff9097          	auipc	ra,0xffff9
    80013ea6:	ebc080e7          	jalr	-324(ra) # 8000cd5e <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h304118d236359d80E>
    80013eaa:	e42a                	sd	a0,8(sp)
    80013eac:	a009                	j	80013eae <.LBB15_66+0x104>
    80013eae:	6522                	ld	a0,8(sp)
    80013eb0:	4581                	li	a1,0
    80013eb2:	00b50963          	beq	a0,a1,80013ec4 <.LBB15_66+0x11a>
    80013eb6:	a009                	j	80013eb8 <.LBB15_66+0x10e>
    80013eb8:	7526                	ld	a0,104(sp)
    80013eba:	06400593          	li	a1,100
        ).is_err() {
            open_files[rfd].take();
    80013ebe:	00b56c63          	bltu	a0,a1,80013ed6 <.LBB15_66+0x12c>
    80013ec2:	a0f5                	j	80013fae <.LBB15_70+0x14>
    80013ec4:	4501                	li	a0,0
            open_files[wfd].take();
            // rf.close();
            // wf.close();
            return Err(())
        }
        Ok(0)
    80013ec6:	f52a                	sd	a0,168(sp)
    80013ec8:	f12a                	sd	a0,160(sp)
    80013eca:	19a8                	addi	a0,sp,248
    }
    80013ecc:	ffff3097          	auipc	ra,0xffff3
    80013ed0:	f9e080e7          	jalr	-98(ra) # 80006e6a <_ZN4core3ptr44drop_in_place$LT$kernel..fs..file..VFile$GT$17h7a3c9775c1583e88E>
    80013ed4:	a8b1                	j	80013f30 <.LBB15_66+0x186>
            open_files[rfd].take();
    80013ed6:	7522                	ld	a0,40(sp)
    80013ed8:	75a6                	ld	a1,104(sp)
    80013eda:	058e                	slli	a1,a1,0x3
    80013edc:	952e                	add	a0,a0,a1
    80013ede:	ffffa097          	auipc	ra,0xffffa
    80013ee2:	7f4080e7          	jalr	2036(ra) # 8000e6d2 <_ZN4core6option15Option$LT$T$GT$4take17h80e6997975665939E>
    80013ee6:	46a13c23          	sd	a0,1144(sp)
    80013eea:	a009                	j	80013eec <.LBB15_66+0x142>
    80013eec:	47810513          	addi	a0,sp,1144
    80013ef0:	ffff3097          	auipc	ra,0xffff3
    80013ef4:	158080e7          	jalr	344(ra) # 80007048 <_ZN4core3ptr96drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$$GT$17hc79d9c89cd1d7f36E>
    80013ef8:	a009                	j	80013efa <.LBB15_66+0x150>
    80013efa:	6586                	ld	a1,64(sp)
    80013efc:	06300513          	li	a0,99
            open_files[wfd].take();
    80013f00:	0cb56363          	bltu	a0,a1,80013fc6 <.LBB15_71+0x16>
    80013f04:	a009                	j	80013f06 <.LBB15_66+0x15c>
    80013f06:	7522                	ld	a0,40(sp)
    80013f08:	6586                	ld	a1,64(sp)
    80013f0a:	058e                	slli	a1,a1,0x3
    80013f0c:	952e                	add	a0,a0,a1
    80013f0e:	ffffa097          	auipc	ra,0xffffa
    80013f12:	7c4080e7          	jalr	1988(ra) # 8000e6d2 <_ZN4core6option15Option$LT$T$GT$4take17h80e6997975665939E>
    80013f16:	48a13023          	sd	a0,1152(sp)
    80013f1a:	a009                	j	80013f1c <.LBB15_66+0x172>
    80013f1c:	48010513          	addi	a0,sp,1152
    80013f20:	ffff3097          	auipc	ra,0xffff3
    80013f24:	128080e7          	jalr	296(ra) # 80007048 <_ZN4core3ptr96drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$$GT$17hc79d9c89cd1d7f36E>
    80013f28:	a009                	j	80013f2a <.LBB15_66+0x180>
    80013f2a:	4505                	li	a0,1
            return Err(())
    80013f2c:	f12a                	sd	a0,160(sp)
    80013f2e:	a039                	j	80013f3c <.LBB15_66+0x192>
    80013f30:	1928                	addi	a0,sp,184
    }
    80013f32:	ffff3097          	auipc	ra,0xffff3
    80013f36:	f38080e7          	jalr	-200(ra) # 80006e6a <_ZN4core3ptr44drop_in_place$LT$kernel..fs..file..VFile$GT$17h7a3c9775c1583e88E>
    80013f3a:	a829                	j	80013f54 <.LBB15_66+0x1aa>
    80013f3c:	19a8                	addi	a0,sp,248
    80013f3e:	ffff3097          	auipc	ra,0xffff3
    80013f42:	f2c080e7          	jalr	-212(ra) # 80006e6a <_ZN4core3ptr44drop_in_place$LT$kernel..fs..file..VFile$GT$17h7a3c9775c1583e88E>
    80013f46:	a009                	j	80013f48 <.LBB15_66+0x19e>
    80013f48:	1928                	addi	a0,sp,184
    80013f4a:	ffff3097          	auipc	ra,0xffff3
    80013f4e:	f20080e7          	jalr	-224(ra) # 80006e6a <_ZN4core3ptr44drop_in_place$LT$kernel..fs..file..VFile$GT$17h7a3c9775c1583e88E>
    80013f52:	a009                	j	80013f54 <.LBB15_66+0x1aa>
    80013f54:	750a                	ld	a0,160(sp)
    80013f56:	75aa                	ld	a1,168(sp)
    80013f58:	4e813083          	ld	ra,1256(sp)
    80013f5c:	4f010113          	addi	sp,sp,1264
    80013f60:	8082                	ret
            open_files[rfd].take();
    80013f62:	7526                	ld	a0,104(sp)

0000000080013f64 <.LBB15_67>:
    80013f64:	00015617          	auipc	a2,0x15
    80013f68:	78c60613          	addi	a2,a2,1932 # 800296f0 <.L__unnamed_44>
    80013f6c:	06400593          	li	a1,100
    80013f70:	0000e097          	auipc	ra,0xe
    80013f74:	332080e7          	jalr	818(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80013f78:	0000                	unimp
            open_files[wfd].take();
    80013f7a:	6506                	ld	a0,64(sp)

0000000080013f7c <.LBB15_68>:
    80013f7c:	00015617          	auipc	a2,0x15
    80013f80:	78c60613          	addi	a2,a2,1932 # 80029708 <.L__unnamed_45>
    80013f84:	06400593          	li	a1,100
    80013f88:	0000e097          	auipc	ra,0xe
    80013f8c:	31a080e7          	jalr	794(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

0000000080013f92 <.LBB15_69>:
            fd_array + size_of::<usize>(), 
    80013f92:	00015517          	auipc	a0,0x15
    80013f96:	53e50513          	addi	a0,a0,1342 # 800294d0 <str.1>

0000000080013f9a <.LBB15_70>:
    80013f9a:	00015617          	auipc	a2,0x15
    80013f9e:	78660613          	addi	a2,a2,1926 # 80029720 <.L__unnamed_46>
    80013fa2:	45f1                	li	a1,28
    80013fa4:	0000e097          	auipc	ra,0xe
    80013fa8:	2d2080e7          	jalr	722(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80013fac:	0000                	unimp
            open_files[rfd].take();
    80013fae:	7526                	ld	a0,104(sp)

0000000080013fb0 <.LBB15_71>:
    80013fb0:	00015617          	auipc	a2,0x15
    80013fb4:	78860613          	addi	a2,a2,1928 # 80029738 <.L__unnamed_47>
    80013fb8:	06400593          	li	a1,100
    80013fbc:	0000e097          	auipc	ra,0xe
    80013fc0:	2e6080e7          	jalr	742(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80013fc4:	0000                	unimp
            open_files[wfd].take();
    80013fc6:	6506                	ld	a0,64(sp)

0000000080013fc8 <.LBB15_72>:
    80013fc8:	00015617          	auipc	a2,0x15
    80013fcc:	78860613          	addi	a2,a2,1928 # 80029750 <.L__unnamed_48>
    80013fd0:	06400593          	li	a1,100
    80013fd4:	0000e097          	auipc	ra,0xe
    80013fd8:	2ce080e7          	jalr	718(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$10sys_unlink17h041fe6edd5a3dcecE:

0000000080013fde <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$10sys_unlink17h041fe6edd5a3dcecE>:

    pub fn sys_unlink(&self) -> SysResult {
    80013fde:	d6010113          	addi	sp,sp,-672
    80013fe2:	28113c23          	sd	ra,664(sp)
    80013fe6:	e1aa                	sd	a0,192(sp)
    80013fe8:	22a13c23          	sd	a0,568(sp)
    80013fec:	4581                	li	a1,0
        let mut path = [0u8; MAXPATH];
    80013fee:	fd2e                	sd	a1,184(sp)
    80013ff0:	22b10ba3          	sb	a1,567(sp)
    80013ff4:	22b10b23          	sb	a1,566(sp)
    80013ff8:	1188                	addi	a0,sp,224
    80013ffa:	08000613          	li	a2,128
    80013ffe:	00011097          	auipc	ra,0x11
    80014002:	138080e7          	jalr	312(ra) # 80025136 <memset>
    80014006:	75ea                	ld	a1,184(sp)
        let mut name = [0u8; DIRSIZ];
    80014008:	650e                	ld	a0,192(sp)
    8001400a:	f2ae                	sd	a1,352(sp)
    8001400c:	16b12423          	sw	a1,360(sp)
    80014010:	16b11623          	sh	a1,364(sp)
        let parent: Inode;
        let inode: Inode;

        let addr = self.arg(0);
    80014014:	00001097          	auipc	ra,0x1
    80014018:	196080e7          	jalr	406(ra) # 800151aa <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    8001401c:	85aa                	mv	a1,a0
    8001401e:	e5ae                	sd	a1,200(sp)
    80014020:	24a13823          	sd	a0,592(sp)
    80014024:	a009                	j	80014026 <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$10sys_unlink17h041fe6edd5a3dcecE+0x48>
        self.copy_from_str(addr, &mut path, MAXPATH)?;
    80014026:	65ae                	ld	a1,200(sp)
    80014028:	650e                	ld	a0,192(sp)
    8001402a:	1190                	addi	a2,sp,224
    8001402c:	08000713          	li	a4,128
    80014030:	86ba                	mv	a3,a4
    80014032:	00001097          	auipc	ra,0x1
    80014036:	228080e7          	jalr	552(ra) # 8001525a <_ZN6kernel7syscall7Syscall13copy_from_str17h5c83be6e0d4b822aE>
    8001403a:	f92a                	sd	a0,176(sp)
    8001403c:	a009                	j	8001403e <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$10sys_unlink17h041fe6edd5a3dcecE+0x60>
    8001403e:	754a                	ld	a0,176(sp)
    80014040:	ffff9097          	auipc	ra,0xffff9
    80014044:	1bc080e7          	jalr	444(ra) # 8000d1fc <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h9e3ff03fe8989dd2E>
    80014048:	18a10ba3          	sb	a0,407(sp)
    8001404c:	a009                	j	8001404e <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$10sys_unlink17h041fe6edd5a3dcecE+0x70>
    8001404e:	19714503          	lbu	a0,407(sp)
    80014052:	8905                	andi	a0,a0,1
    80014054:	4581                	li	a1,0
    80014056:	00b50463          	beq	a0,a1,8001405e <.LBB16_78>
    8001405a:	a009                	j	8001405c <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$10sys_unlink17h041fe6edd5a3dcecE+0x7e>
    8001405c:	a819                	j	80014072 <.LBB16_78+0x14>

000000008001405e <.LBB16_78>:

        LOG.begin_op();
    8001405e:	00054517          	auipc	a0,0x54
    80014062:	98a50513          	addi	a0,a0,-1654 # 800679e8 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    80014066:	ffff5097          	auipc	ra,0xffff5
    8001406a:	b4c080e7          	jalr	-1204(ra) # 80008bb2 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$8begin_op17he5b49a48c716e372E>
    8001406e:	a831                	j	8001408a <.LBB16_79>
        self.copy_from_str(addr, &mut path, MAXPATH)?;
    80014070:	0000                	unimp
    80014072:	ffff8097          	auipc	ra,0xffff8
    80014076:	9f4080e7          	jalr	-1548(ra) # 8000ba66 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h2e645b443ebf2dc7E>
    8001407a:	a009                	j	8001407c <.LBB16_78+0x1e>
    8001407c:	ffff9097          	auipc	ra,0xffff9
    80014080:	06c080e7          	jalr	108(ra) # 8000d0e8 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h74072cf57097ff24E>
    80014084:	e9aa                	sd	a0,208(sp)
    80014086:	edae                	sd	a1,216(sp)
    80014088:	ae5d                	j	8001443e <.LBB16_90+0x3e>

000000008001408a <.LBB16_79>:
        match ICACHE.namei_parent(&path, &mut name) {
    8001408a:	00054597          	auipc	a1,0x54
    8001408e:	a0658593          	addi	a1,a1,-1530 # 80067a90 <_ZN6kernel2fs5inode6ICACHE17had1be8942ca79bf1E>
    80014092:	0b28                	addi	a0,sp,408
    80014094:	1190                	addi	a2,sp,224
    80014096:	08000693          	li	a3,128
    8001409a:	1298                	addi	a4,sp,352
    8001409c:	00005097          	auipc	ra,0x5
    800140a0:	3fc080e7          	jalr	1020(ra) # 80019498 <_ZN6kernel2fs5inode10InodeCache12namei_parent17h24bebf98ccd9b34eE>
    800140a4:	a009                	j	800140a6 <.LBB16_79+0x1c>
            Some(cur) => {
    800140a6:	657a                	ld	a0,408(sp)
    800140a8:	4581                	li	a1,0
    800140aa:	00b50463          	beq	a0,a1,800140b2 <.LBB16_80>
    800140ae:	a009                	j	800140b0 <.LBB16_79+0x26>
    800140b0:	a819                	j	800140c6 <.LBB16_80+0x14>

00000000800140b2 <.LBB16_80>:
                parent = cur;
            },
            None => {
                LOG.end_op();
    800140b2:	00054517          	auipc	a0,0x54
    800140b6:	93650513          	addi	a0,a0,-1738 # 800679e8 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    800140ba:	ffff5097          	auipc	ra,0xffff5
    800140be:	0de080e7          	jalr	222(ra) # 80009198 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>
    800140c2:	a02d                	j	800140ec <.LBB16_80+0x3a>
        match ICACHE.namei_parent(&path, &mut name) {
    800140c4:	0000                	unimp
            Some(cur) => {
    800140c6:	753a                	ld	a0,424(sp)
    800140c8:	ff2a                	sd	a0,440(sp)
    800140ca:	759a                	ld	a1,416(sp)
    800140cc:	fb2e                	sd	a1,432(sp)
                parent = cur;
    800140ce:	e3ae                	sd	a1,448(sp)
    800140d0:	e7aa                	sd	a0,456(sp)
    800140d2:	4605                	li	a2,1
    800140d4:	22c10ba3          	sb	a2,567(sp)
    800140d8:	faae                	sd	a1,368(sp)
    800140da:	feaa                	sd	a0,376(sp)
    800140dc:	1a88                	addi	a0,sp,368
                return Err(())
            }
        }
        let mut parent_guard = parent.lock();
    800140de:	00007097          	auipc	ra,0x7
    800140e2:	dd8080e7          	jalr	-552(ra) # 8001aeb6 <_ZN6kernel2fs5inode5Inode4lock17he70970c593f751adE>
    800140e6:	ebaa                	sd	a0,464(sp)
    800140e8:	efae                	sd	a1,472(sp)
    800140ea:	a021                	j	800140f2 <.LBB16_80+0x40>
    800140ec:	4505                	li	a0,1
                return Err(())
    800140ee:	e9aa                	sd	a0,208(sp)
    800140f0:	a6b9                	j	8001443e <.LBB16_90+0x3e>
    800140f2:	1288                	addi	a0,sp,352
    800140f4:	ed2a                	sd	a0,152(sp)

00000000800140f6 <.LBB16_81>:
    800140f6:	00015597          	auipc	a1,0x15
    800140fa:	67258593          	addi	a1,a1,1650 # 80029768 <.L__unnamed_49>
    800140fe:	f12e                	sd	a1,160(sp)
    80014100:	24b13c23          	sd	a1,600(sp)
    80014104:	4505                	li	a0,1
    80014106:	f52a                	sd	a0,168(sp)
    80014108:	26a13023          	sd	a0,608(sp)
    8001410c:	26b13423          	sd	a1,616(sp)
    80014110:	26a13823          	sd	a0,624(sp)
        if str_cmp(&name, ".".as_bytes(), DIRSIZ) &&
    80014114:	a081                	j	80014154 <.LBB16_82+0x2a>
    80014116:	4505                	li	a0,1
    80014118:	1ea103a3          	sb	a0,487(sp)
    8001411c:	a03d                	j	8001414a <.LBB16_82+0x20>
    8001411e:	4501                	li	a0,0
    80014120:	1ea103a3          	sb	a0,487(sp)
    80014124:	a01d                	j	8001414a <.LBB16_82+0x20>
    80014126:	1288                	addi	a0,sp,352
    80014128:	e12a                	sd	a0,128(sp)

000000008001412a <.LBB16_82>:
    8001412a:	00015597          	auipc	a1,0x15
    8001412e:	63f58593          	addi	a1,a1,1599 # 80029769 <.L__unnamed_50>
    80014132:	e52e                	sd	a1,136(sp)
    80014134:	26b13c23          	sd	a1,632(sp)
    80014138:	4509                	li	a0,2
    8001413a:	e92a                	sd	a0,144(sp)
    8001413c:	28a13023          	sd	a0,640(sp)
    80014140:	28b13423          	sd	a1,648(sp)
    80014144:	28a13823          	sd	a0,656(sp)
            str_cmp(&name, "..".as_bytes(), DIRSIZ) {
    80014148:	a025                	j	80014170 <.LBB16_82+0x46>
        if str_cmp(&name, ".".as_bytes(), DIRSIZ) &&
    8001414a:	1e714503          	lbu	a0,487(sp)
    8001414e:	8905                	andi	a0,a0,1
    80014150:	ed15                	bnez	a0,8001418c <.LBB16_82+0x62>
    80014152:	a0a1                	j	8001419a <.LBB16_82+0x70>
    80014154:	76aa                	ld	a3,168(sp)
    80014156:	760a                	ld	a2,160(sp)
    80014158:	656a                	ld	a0,152(sp)
    8001415a:	4739                	li	a4,14
    8001415c:	85ba                	mv	a1,a4
    8001415e:	ffff4097          	auipc	ra,0xffff4
    80014162:	8ac080e7          	jalr	-1876(ra) # 80007a0a <_ZN6kernel4misc7str_cmp17h91115d5ee259e480E>
    80014166:	fcaa                	sd	a0,120(sp)
    80014168:	a009                	j	8001416a <.LBB16_82+0x40>
    8001416a:	7566                	ld	a0,120(sp)
    8001416c:	fd4d                	bnez	a0,80014126 <.LBB16_81+0x30>
    8001416e:	bf45                	j	8001411e <.LBB16_81+0x28>
            str_cmp(&name, "..".as_bytes(), DIRSIZ) {
    80014170:	66ca                	ld	a3,144(sp)
    80014172:	662a                	ld	a2,136(sp)
    80014174:	650a                	ld	a0,128(sp)
    80014176:	4739                	li	a4,14
    80014178:	85ba                	mv	a1,a4
    8001417a:	ffff4097          	auipc	ra,0xffff4
    8001417e:	890080e7          	jalr	-1904(ra) # 80007a0a <_ZN6kernel4misc7str_cmp17h91115d5ee259e480E>
    80014182:	f8aa                	sd	a0,112(sp)
    80014184:	a009                	j	80014186 <.LBB16_82+0x5c>
        if str_cmp(&name, ".".as_bytes(), DIRSIZ) &&
    80014186:	7546                	ld	a0,112(sp)
    80014188:	f559                	bnez	a0,80014116 <.LBB16_81+0x20>
    8001418a:	bf51                	j	8001411e <.LBB16_81+0x28>
                drop(parent_guard);
    8001418c:	655e                	ld	a0,464(sp)
    8001418e:	65fe                	ld	a1,472(sp)
    80014190:	00009097          	auipc	ra,0x9
    80014194:	ed8080e7          	jalr	-296(ra) # 8001d068 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    80014198:	a801                	j	800141a8 <.LBB16_83>
    8001419a:	0b88                	addi	a0,sp,464
                LOG.end_op();
                return Err(())
        }
        match parent_guard.dir_lookup(&name) {
    8001419c:	00009097          	auipc	ra,0x9
    800141a0:	546080e7          	jalr	1350(ra) # 8001d6e2 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    800141a4:	f4aa                	sd	a0,104(sp)
    800141a6:	a829                	j	800141c0 <.LBB16_83+0x18>

00000000800141a8 <.LBB16_83>:
                LOG.end_op();
    800141a8:	00054517          	auipc	a0,0x54
    800141ac:	84050513          	addi	a0,a0,-1984 # 800679e8 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    800141b0:	ffff5097          	auipc	ra,0xffff5
    800141b4:	fe8080e7          	jalr	-24(ra) # 80009198 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>
    800141b8:	a009                	j	800141ba <.LBB16_83+0x12>
    800141ba:	4505                	li	a0,1
                return Err(())
    800141bc:	e9aa                	sd	a0,208(sp)
    800141be:	a441                	j	8001443e <.LBB16_90+0x3e>
        match parent_guard.dir_lookup(&name) {
    800141c0:	75a6                	ld	a1,104(sp)
    800141c2:	13a8                	addi	a0,sp,488
    800141c4:	1290                	addi	a2,sp,352
    800141c6:	46b9                	li	a3,14
    800141c8:	00006097          	auipc	ra,0x6
    800141cc:	704080e7          	jalr	1796(ra) # 8001a8cc <_ZN6kernel2fs5inode9InodeData10dir_lookup17h2ffc093ee3be0a35E>
    800141d0:	a009                	j	800141d2 <.LBB16_83+0x2a>
            Some(cur) => {
    800141d2:	753e                	ld	a0,488(sp)
    800141d4:	4581                	li	a1,0
    800141d6:	00b51a63          	bne	a0,a1,800141ea <.LBB16_83+0x42>
    800141da:	a009                	j	800141dc <.LBB16_83+0x34>
                inode = cur;
            },
            _ => {
                drop(parent_guard);
    800141dc:	655e                	ld	a0,464(sp)
    800141de:	65fe                	ld	a1,472(sp)
    800141e0:	00009097          	auipc	ra,0x9
    800141e4:	e88080e7          	jalr	-376(ra) # 8001d068 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    800141e8:	a815                	j	8001421c <.LBB16_84>
            Some(cur) => {
    800141ea:	757e                	ld	a0,504(sp)
    800141ec:	20a13423          	sd	a0,520(sp)
    800141f0:	75de                	ld	a1,496(sp)
    800141f2:	20b13023          	sd	a1,512(sp)
                inode = cur;
    800141f6:	20b13823          	sd	a1,528(sp)
    800141fa:	20a13c23          	sd	a0,536(sp)
    800141fe:	4605                	li	a2,1
    80014200:	22c10b23          	sb	a2,566(sp)
    80014204:	e32e                	sd	a1,384(sp)
    80014206:	e72a                	sd	a0,392(sp)
    80014208:	0308                	addi	a0,sp,384
                LOG.end_op();
                return Err(())
            }
        }

        let mut inode_guard = inode.lock();
    8001420a:	00007097          	auipc	ra,0x7
    8001420e:	cac080e7          	jalr	-852(ra) # 8001aeb6 <_ZN6kernel2fs5inode5Inode4lock17he70970c593f751adE>
    80014212:	22a13023          	sd	a0,544(sp)
    80014216:	22b13423          	sd	a1,552(sp)
    8001421a:	a015                	j	8001423e <.LBB16_84+0x22>

000000008001421c <.LBB16_84>:
                LOG.end_op();
    8001421c:	00053517          	auipc	a0,0x53
    80014220:	7cc50513          	addi	a0,a0,1996 # 800679e8 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    80014224:	ffff5097          	auipc	ra,0xffff5
    80014228:	f74080e7          	jalr	-140(ra) # 80009198 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>
    8001422c:	a009                	j	8001422e <.LBB16_84+0x12>
    8001422e:	4505                	li	a0,1
                return Err(())
    80014230:	e9aa                	sd	a0,208(sp)
    80014232:	13a8                	addi	a0,sp,488
        }
    80014234:	ffff3097          	auipc	ra,0xffff3
    80014238:	d18080e7          	jalr	-744(ra) # 80006f4c <_ZN4core3ptr73drop_in_place$LT$core..option..Option$LT$kernel..fs..inode..Inode$GT$$GT$17h6a7b3b84406d6cdfE>
    8001423c:	a409                	j	8001443e <.LBB16_90+0x3e>
    8001423e:	1408                	addi	a0,sp,544
        if inode_guard.dinode.nlink < 1 {
    80014240:	00009097          	auipc	ra,0x9
    80014244:	48e080e7          	jalr	1166(ra) # 8001d6ce <_ZN92_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfc7812d7ca7ab1e1E>
    80014248:	f0aa                	sd	a0,96(sp)
    8001424a:	a009                	j	8001424c <.LBB16_84+0x30>
    8001424c:	7506                	ld	a0,96(sp)
    8001424e:	00e51583          	lh	a1,14(a0)
    80014252:	4501                	li	a0,0
    80014254:	02b54263          	blt	a0,a1,80014278 <.LBB16_86+0x16>
    80014258:	a009                	j	8001425a <.LBB16_85>

000000008001425a <.LBB16_85>:
            panic!("sys_unlink: inods's nlink must be larger than 1.");
    8001425a:	00015517          	auipc	a0,0x15
    8001425e:	51150513          	addi	a0,a0,1297 # 8002976b <.L__unnamed_51>

0000000080014262 <.LBB16_86>:
    80014262:	00015617          	auipc	a2,0x15
    80014266:	53e60613          	addi	a2,a2,1342 # 800297a0 <.L__unnamed_52>
    8001426a:	03000593          	li	a1,48
    8001426e:	0000e097          	auipc	ra,0xe
    80014272:	008080e7          	jalr	8(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80014276:	0000                	unimp
    80014278:	1408                	addi	a0,sp,544
        }

        if inode_guard.dinode.itype == InodeType::Directory && 
    8001427a:	00009097          	auipc	ra,0x9
    8001427e:	454080e7          	jalr	1108(ra) # 8001d6ce <_ZN92_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfc7812d7ca7ab1e1E>
    80014282:	ecaa                	sd	a0,88(sp)
    80014284:	a02d                	j	800142ae <.LBB16_86+0x4c>
    80014286:	4505                	li	a0,1
    80014288:	22a10aa3          	sb	a0,565(sp)
    8001428c:	a821                	j	800142a4 <.LBB16_86+0x42>
    8001428e:	4501                	li	a0,0
    80014290:	22a10aa3          	sb	a0,565(sp)
    80014294:	a801                	j	800142a4 <.LBB16_86+0x42>
    80014296:	1408                	addi	a0,sp,544
            !inode_guard.is_dir_empty() {
    80014298:	00009097          	auipc	ra,0x9
    8001429c:	44a080e7          	jalr	1098(ra) # 8001d6e2 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    800142a0:	e8aa                	sd	a0,80(sp)
    800142a2:	a02d                	j	800142cc <.LBB16_87+0x1a>
        if inode_guard.dinode.itype == InodeType::Directory && 
    800142a4:	23514503          	lbu	a0,565(sp)
    800142a8:	8905                	andi	a0,a0,1
    800142aa:	ed0d                	bnez	a0,800142e4 <.LBB16_87+0x32>
    800142ac:	a0a9                	j	800142f6 <.LBB16_87+0x44>
    800142ae:	6566                	ld	a0,88(sp)
    800142b0:	0521                	addi	a0,a0,8

00000000800142b2 <.LBB16_87>:
    800142b2:	00015597          	auipc	a1,0x15
    800142b6:	0e658593          	addi	a1,a1,230 # 80029398 <.L__unnamed_18>
    800142ba:	ffff4097          	auipc	ra,0xffff4
    800142be:	108080e7          	jalr	264(ra) # 800083c2 <_ZN70_$LT$kernel..fs..dinode..InodeType$u20$as$u20$core..cmp..PartialEq$GT$2eq17ha4431a2c7299d33fE>
    800142c2:	e4aa                	sd	a0,72(sp)
    800142c4:	a009                	j	800142c6 <.LBB16_87+0x14>
    800142c6:	6526                	ld	a0,72(sp)
    800142c8:	f579                	bnez	a0,80014296 <.LBB16_86+0x34>
    800142ca:	b7d1                	j	8001428e <.LBB16_86+0x2c>
            !inode_guard.is_dir_empty() {
    800142cc:	6546                	ld	a0,80(sp)
    800142ce:	00007097          	auipc	ra,0x7
    800142d2:	a92080e7          	jalr	-1390(ra) # 8001ad60 <_ZN6kernel2fs5inode9InodeData12is_dir_empty17h5fc1239b2ba5dde8E>
    800142d6:	e0aa                	sd	a0,64(sp)
    800142d8:	a009                	j	800142da <.LBB16_87+0x28>
    800142da:	6506                	ld	a0,64(sp)
    800142dc:	4581                	li	a1,0
        if inode_guard.dinode.itype == InodeType::Directory && 
    800142de:	fab504e3          	beq	a0,a1,80014286 <.LBB16_86+0x24>
    800142e2:	b775                	j	8001428e <.LBB16_86+0x2c>
                drop(inode_guard);
    800142e4:	22013503          	ld	a0,544(sp)
    800142e8:	22813583          	ld	a1,552(sp)
    800142ec:	00009097          	auipc	ra,0x9
    800142f0:	d7c080e7          	jalr	-644(ra) # 8001d068 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    800142f4:	a801                	j	80014304 <.LBB16_87+0x52>
    800142f6:	1408                	addi	a0,sp,544
                drop(parent_guard);
                LOG.end_op();
                return Err(())
            }

        if inode_guard.dinode.itype == InodeType::Directory {
    800142f8:	00009097          	auipc	ra,0x9
    800142fc:	3d6080e7          	jalr	982(ra) # 8001d6ce <_ZN92_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfc7812d7ca7ab1e1E>
    80014300:	fc2a                	sd	a0,56(sp)
    80014302:	a025                	j	8001432a <.LBB16_88+0x18>
                drop(parent_guard);
    80014304:	655e                	ld	a0,464(sp)
    80014306:	65fe                	ld	a1,472(sp)
    80014308:	00009097          	auipc	ra,0x9
    8001430c:	d60080e7          	jalr	-672(ra) # 8001d068 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    80014310:	a009                	j	80014312 <.LBB16_88>

0000000080014312 <.LBB16_88>:
                LOG.end_op();
    80014312:	00053517          	auipc	a0,0x53
    80014316:	6d650513          	addi	a0,a0,1750 # 800679e8 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    8001431a:	ffff5097          	auipc	ra,0xffff5
    8001431e:	e7e080e7          	jalr	-386(ra) # 80009198 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>
    80014322:	a009                	j	80014324 <.LBB16_88+0x12>
    80014324:	4505                	li	a0,1
                return Err(())
    80014326:	e9aa                	sd	a0,208(sp)
    80014328:	aa19                	j	8001443e <.LBB16_90+0x3e>
        if inode_guard.dinode.itype == InodeType::Directory {
    8001432a:	7562                	ld	a0,56(sp)
    8001432c:	0521                	addi	a0,a0,8

000000008001432e <.LBB16_89>:
    8001432e:	00015597          	auipc	a1,0x15
    80014332:	06a58593          	addi	a1,a1,106 # 80029398 <.L__unnamed_18>
    80014336:	ffff4097          	auipc	ra,0xffff4
    8001433a:	08c080e7          	jalr	140(ra) # 800083c2 <_ZN70_$LT$kernel..fs..dinode..InodeType$u20$as$u20$core..cmp..PartialEq$GT$2eq17ha4431a2c7299d33fE>
    8001433e:	f82a                	sd	a0,48(sp)
    80014340:	a009                	j	80014342 <.LBB16_89+0x14>
    80014342:	7542                	ld	a0,48(sp)
    80014344:	4581                	li	a1,0
    80014346:	00b50a63          	beq	a0,a1,8001435a <.LBB16_89+0x2c>
    8001434a:	a009                	j	8001434c <.LBB16_89+0x1e>
    8001434c:	0b88                	addi	a0,sp,464
            parent_guard.dinode.nlink -= 1;
    8001434e:	00009097          	auipc	ra,0x9
    80014352:	394080e7          	jalr	916(ra) # 8001d6e2 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    80014356:	f42a                	sd	a0,40(sp)
    80014358:	a011                	j	8001435c <.LBB16_89+0x2e>
        if inode_guard.dinode.itype == InodeType::Directory {
    8001435a:	a83d                	j	80014398 <.LBB16_89+0x6a>
            parent_guard.dinode.nlink -= 1;
    8001435c:	7522                	ld	a0,40(sp)
    8001435e:	00e51503          	lh	a0,14(a0)
    80014362:	fff50593          	addi	a1,a0,-1
    80014366:	f02e                	sd	a1,32(sp)
    80014368:	03059513          	slli	a0,a1,0x30
    8001436c:	9541                	srai	a0,a0,0x30
    8001436e:	10b51c63          	bne	a0,a1,80014486 <.LBB16_91>
    80014372:	a009                	j	80014374 <.LBB16_89+0x46>
    80014374:	7502                	ld	a0,32(sp)
    80014376:	75a2                	ld	a1,40(sp)
    80014378:	00a59723          	sh	a0,14(a1)
    8001437c:	0b88                	addi	a0,sp,464
            parent_guard.update();
    8001437e:	00009097          	auipc	ra,0x9
    80014382:	364080e7          	jalr	868(ra) # 8001d6e2 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    80014386:	ec2a                	sd	a0,24(sp)
    80014388:	a009                	j	8001438a <.LBB16_89+0x5c>
    8001438a:	6562                	ld	a0,24(sp)
    8001438c:	00006097          	auipc	ra,0x6
    80014390:	bbe080e7          	jalr	-1090(ra) # 80019f4a <_ZN6kernel2fs5inode9InodeData6update17h81f49ab31d0ddfdcE>
    80014394:	a009                	j	80014396 <.LBB16_89+0x68>
        if inode_guard.dinode.itype == InodeType::Directory {
    80014396:	a009                	j	80014398 <.LBB16_89+0x6a>
        }
        drop(parent_guard);
    80014398:	655e                	ld	a0,464(sp)
    8001439a:	65fe                	ld	a1,472(sp)
    8001439c:	00009097          	auipc	ra,0x9
    800143a0:	ccc080e7          	jalr	-820(ra) # 8001d068 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    800143a4:	a009                	j	800143a6 <.LBB16_89+0x78>
    800143a6:	1408                	addi	a0,sp,544

        inode_guard.dinode.nlink -= 1;
    800143a8:	00009097          	auipc	ra,0x9
    800143ac:	33a080e7          	jalr	826(ra) # 8001d6e2 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    800143b0:	e82a                	sd	a0,16(sp)
    800143b2:	a009                	j	800143b4 <.LBB16_89+0x86>
    800143b4:	6542                	ld	a0,16(sp)
    800143b6:	00e51503          	lh	a0,14(a0)
    800143ba:	fff50593          	addi	a1,a0,-1
    800143be:	e42e                	sd	a1,8(sp)
    800143c0:	03059513          	slli	a0,a1,0x30
    800143c4:	9541                	srai	a0,a0,0x30
    800143c6:	0cb51f63          	bne	a0,a1,800144a4 <.LBB16_93>
    800143ca:	a009                	j	800143cc <.LBB16_89+0x9e>
    800143cc:	6522                	ld	a0,8(sp)
    800143ce:	65c2                	ld	a1,16(sp)
    800143d0:	00a59723          	sh	a0,14(a1)
    800143d4:	1408                	addi	a0,sp,544
        inode_guard.update();
    800143d6:	00009097          	auipc	ra,0x9
    800143da:	30c080e7          	jalr	780(ra) # 8001d6e2 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    800143de:	e02a                	sd	a0,0(sp)
    800143e0:	a009                	j	800143e2 <.LBB16_89+0xb4>
    800143e2:	6502                	ld	a0,0(sp)
    800143e4:	00006097          	auipc	ra,0x6
    800143e8:	b66080e7          	jalr	-1178(ra) # 80019f4a <_ZN6kernel2fs5inode9InodeData6update17h81f49ab31d0ddfdcE>
    800143ec:	a009                	j	800143ee <.LBB16_89+0xc0>
        drop(inode_guard);
    800143ee:	22013503          	ld	a0,544(sp)
    800143f2:	22813583          	ld	a1,552(sp)
    800143f6:	00009097          	auipc	ra,0x9
    800143fa:	c72080e7          	jalr	-910(ra) # 8001d068 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    800143fe:	a009                	j	80014400 <.LBB16_90>

0000000080014400 <.LBB16_90>:

        LOG.end_op();
    80014400:	00053517          	auipc	a0,0x53
    80014404:	5e850513          	addi	a0,a0,1512 # 800679e8 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    80014408:	ffff5097          	auipc	ra,0xffff5
    8001440c:	d90080e7          	jalr	-624(ra) # 80009198 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>
    80014410:	a009                	j	80014412 <.LBB16_90+0x12>
    80014412:	4501                	li	a0,0
        Ok(0)
    80014414:	edaa                	sd	a0,216(sp)
    80014416:	e9aa                	sd	a0,208(sp)
    80014418:	0308                	addi	a0,sp,384
    }
    8001441a:	ffff3097          	auipc	ra,0xffff3
    8001441e:	a68080e7          	jalr	-1432(ra) # 80006e82 <_ZN4core3ptr45drop_in_place$LT$kernel..fs..inode..Inode$GT$17h8786fe1a2a287832E>
    80014422:	a009                	j	80014424 <.LBB16_90+0x24>
    80014424:	4501                	li	a0,0
    80014426:	22a10b23          	sb	a0,566(sp)
    8001442a:	1a88                	addi	a0,sp,368
    8001442c:	ffff3097          	auipc	ra,0xffff3
    80014430:	a56080e7          	jalr	-1450(ra) # 80006e82 <_ZN4core3ptr45drop_in_place$LT$kernel..fs..inode..Inode$GT$17h8786fe1a2a287832E>
    80014434:	a009                	j	80014436 <.LBB16_90+0x36>
    80014436:	4501                	li	a0,0
    80014438:	22a10ba3          	sb	a0,567(sp)
    8001443c:	a015                	j	80014460 <.LBB16_90+0x60>
    8001443e:	23614503          	lbu	a0,566(sp)
    80014442:	8905                	andi	a0,a0,1
    80014444:	e50d                	bnez	a0,8001446e <.LBB16_90+0x6e>
    80014446:	a009                	j	80014448 <.LBB16_90+0x48>
    80014448:	4501                	li	a0,0
    8001444a:	22a10b23          	sb	a0,566(sp)
    8001444e:	23714503          	lbu	a0,567(sp)
    80014452:	8905                	andi	a0,a0,1
    80014454:	e11d                	bnez	a0,8001447a <.LBB16_90+0x7a>
    80014456:	a009                	j	80014458 <.LBB16_90+0x58>
    80014458:	4501                	li	a0,0
    8001445a:	22a10ba3          	sb	a0,567(sp)
    8001445e:	a009                	j	80014460 <.LBB16_90+0x60>
    80014460:	654e                	ld	a0,208(sp)
    80014462:	65ee                	ld	a1,216(sp)
    80014464:	29813083          	ld	ra,664(sp)
    80014468:	2a010113          	addi	sp,sp,672
    8001446c:	8082                	ret
    8001446e:	0308                	addi	a0,sp,384
    80014470:	ffff3097          	auipc	ra,0xffff3
    80014474:	a12080e7          	jalr	-1518(ra) # 80006e82 <_ZN4core3ptr45drop_in_place$LT$kernel..fs..inode..Inode$GT$17h8786fe1a2a287832E>
    80014478:	bfc1                	j	80014448 <.LBB16_90+0x48>
    8001447a:	1a88                	addi	a0,sp,368
    8001447c:	ffff3097          	auipc	ra,0xffff3
    80014480:	a06080e7          	jalr	-1530(ra) # 80006e82 <_ZN4core3ptr45drop_in_place$LT$kernel..fs..inode..Inode$GT$17h8786fe1a2a287832E>
    80014484:	bfd1                	j	80014458 <.LBB16_90+0x58>

0000000080014486 <.LBB16_91>:
            parent_guard.dinode.nlink -= 1;
    80014486:	00015517          	auipc	a0,0x15
    8001448a:	34a50513          	addi	a0,a0,842 # 800297d0 <str.2>

000000008001448e <.LBB16_92>:
    8001448e:	00015617          	auipc	a2,0x15
    80014492:	32a60613          	addi	a2,a2,810 # 800297b8 <.L__unnamed_53>
    80014496:	02100593          	li	a1,33
    8001449a:	0000e097          	auipc	ra,0xe
    8001449e:	ddc080e7          	jalr	-548(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

00000000800144a4 <.LBB16_93>:
        inode_guard.dinode.nlink -= 1;
    800144a4:	00015517          	auipc	a0,0x15
    800144a8:	32c50513          	addi	a0,a0,812 # 800297d0 <str.2>

00000000800144ac <.LBB16_94>:
    800144ac:	00015617          	auipc	a2,0x15
    800144b0:	34c60613          	addi	a2,a2,844 # 800297f8 <.L__unnamed_54>
    800144b4:	02100593          	li	a1,33
    800144b8:	0000e097          	auipc	ra,0xe
    800144bc:	dbe080e7          	jalr	-578(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_link17ha9dece5abe92404dE:

00000000800144c2 <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_link17ha9dece5abe92404dE>:

    /// Create the path new as a link to the same inode as old.
    pub fn sys_link(&self) -> SysResult {
    800144c2:	d2010113          	addi	sp,sp,-736
    800144c6:	2c113c23          	sd	ra,728(sp)
    800144ca:	ed2a                	sd	a0,152(sp)
    800144cc:	2aa13023          	sd	a0,672(sp)
    800144d0:	4581                	li	a1,0
        let mut new_path = [0u8; MAXPATH];
    800144d2:	e92e                	sd	a1,144(sp)
    800144d4:	28b10fa3          	sb	a1,671(sp)
    800144d8:	28b10ea3          	sb	a1,669(sp)
    800144dc:	28b10f23          	sb	a1,670(sp)
    800144e0:	1928                	addi	a0,sp,184
    800144e2:	08000613          	li	a2,128
    800144e6:	e532                	sd	a2,136(sp)
    800144e8:	00011097          	auipc	ra,0x11
    800144ec:	c4e080e7          	jalr	-946(ra) # 80025136 <memset>
    800144f0:	662a                	ld	a2,136(sp)
    800144f2:	65ca                	ld	a1,144(sp)
    800144f4:	1a28                	addi	a0,sp,312
        let mut old_path = [0u8; MAXPATH];
    800144f6:	00011097          	auipc	ra,0x11
    800144fa:	c40080e7          	jalr	-960(ra) # 80025136 <memset>
    800144fe:	65ca                	ld	a1,144(sp)
        let mut name = [0u8; DIRSIZ];
    80014500:	656a                	ld	a0,152(sp)
    80014502:	ff2e                	sd	a1,440(sp)
    80014504:	1cb12023          	sw	a1,448(sp)
    80014508:	1cb11223          	sh	a1,452(sp)
        let inode: Inode;
        let parent: Inode;

        let old_path_addr = self.arg(0);
    8001450c:	00001097          	auipc	ra,0x1
    80014510:	c9e080e7          	jalr	-866(ra) # 800151aa <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    80014514:	85aa                	mv	a1,a0
    80014516:	f12e                	sd	a1,160(sp)
    80014518:	2ca13423          	sd	a0,712(sp)
    8001451c:	a009                	j	8001451e <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_link17ha9dece5abe92404dE+0x5c>
        let new_path_addr = self.arg(1);
    8001451e:	656a                	ld	a0,152(sp)
    80014520:	4585                	li	a1,1
    80014522:	00001097          	auipc	ra,0x1
    80014526:	c88080e7          	jalr	-888(ra) # 800151aa <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    8001452a:	85aa                	mv	a1,a0
    8001452c:	e12e                	sd	a1,128(sp)
    8001452e:	2ca13823          	sd	a0,720(sp)
    80014532:	a009                	j	80014534 <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_link17ha9dece5abe92404dE+0x72>
        self.copy_from_str(old_path_addr, &mut old_path, MAXPATH)?;
    80014534:	758a                	ld	a1,160(sp)
    80014536:	656a                	ld	a0,152(sp)
    80014538:	1a30                	addi	a2,sp,312
    8001453a:	08000713          	li	a4,128
    8001453e:	86ba                	mv	a3,a4
    80014540:	00001097          	auipc	ra,0x1
    80014544:	d1a080e7          	jalr	-742(ra) # 8001525a <_ZN6kernel7syscall7Syscall13copy_from_str17h5c83be6e0d4b822aE>
    80014548:	fcaa                	sd	a0,120(sp)
    8001454a:	a009                	j	8001454c <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_link17ha9dece5abe92404dE+0x8a>
    8001454c:	7566                	ld	a0,120(sp)
    8001454e:	ffff9097          	auipc	ra,0xffff9
    80014552:	cae080e7          	jalr	-850(ra) # 8000d1fc <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h9e3ff03fe8989dd2E>
    80014556:	1ea10723          	sb	a0,494(sp)
    8001455a:	a009                	j	8001455c <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_link17ha9dece5abe92404dE+0x9a>
    8001455c:	1ee14503          	lbu	a0,494(sp)
    80014560:	8905                	andi	a0,a0,1
    80014562:	4581                	li	a1,0
    80014564:	00b50463          	beq	a0,a1,8001456c <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_link17ha9dece5abe92404dE+0xaa>
    80014568:	a009                	j	8001456a <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_link17ha9dece5abe92404dE+0xa8>
    8001456a:	a831                	j	80014586 <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_link17ha9dece5abe92404dE+0xc4>
        self.copy_from_str(new_path_addr, &mut new_path, MAXPATH)?;
    8001456c:	658a                	ld	a1,128(sp)
    8001456e:	656a                	ld	a0,152(sp)
    80014570:	1930                	addi	a2,sp,184
    80014572:	08000713          	li	a4,128
    80014576:	86ba                	mv	a3,a4
    80014578:	00001097          	auipc	ra,0x1
    8001457c:	ce2080e7          	jalr	-798(ra) # 8001525a <_ZN6kernel7syscall7Syscall13copy_from_str17h5c83be6e0d4b822aE>
    80014580:	f8aa                	sd	a0,112(sp)
    80014582:	a831                	j	8001459e <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_link17ha9dece5abe92404dE+0xdc>
        self.copy_from_str(old_path_addr, &mut old_path, MAXPATH)?;
    80014584:	0000                	unimp
    80014586:	ffff7097          	auipc	ra,0xffff7
    8001458a:	4e0080e7          	jalr	1248(ra) # 8000ba66 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h2e645b443ebf2dc7E>
    8001458e:	a009                	j	80014590 <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_link17ha9dece5abe92404dE+0xce>
    80014590:	ffff9097          	auipc	ra,0xffff9
    80014594:	b58080e7          	jalr	-1192(ra) # 8000d0e8 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h74072cf57097ff24E>
    80014598:	f52a                	sd	a0,168(sp)
    8001459a:	f92e                	sd	a1,176(sp)
    8001459c:	ae81                	j	800148ec <.LBB17_81+0x22>
        self.copy_from_str(new_path_addr, &mut new_path, MAXPATH)?;
    8001459e:	7546                	ld	a0,112(sp)
    800145a0:	ffff9097          	auipc	ra,0xffff9
    800145a4:	c5c080e7          	jalr	-932(ra) # 8000d1fc <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h9e3ff03fe8989dd2E>
    800145a8:	1ea107a3          	sb	a0,495(sp)
    800145ac:	a009                	j	800145ae <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_link17ha9dece5abe92404dE+0xec>
    800145ae:	1ef14503          	lbu	a0,495(sp)
    800145b2:	8905                	andi	a0,a0,1
    800145b4:	4581                	li	a1,0
    800145b6:	00b50463          	beq	a0,a1,800145be <.LBB17_72>
    800145ba:	a009                	j	800145bc <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_link17ha9dece5abe92404dE+0xfa>
    800145bc:	a819                	j	800145d2 <.LBB17_72+0x14>

00000000800145be <.LBB17_72>:

        LOG.begin_op();
    800145be:	00053517          	auipc	a0,0x53
    800145c2:	42a50513          	addi	a0,a0,1066 # 800679e8 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    800145c6:	ffff4097          	auipc	ra,0xffff4
    800145ca:	5ec080e7          	jalr	1516(ra) # 80008bb2 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$8begin_op17he5b49a48c716e372E>
    800145ce:	a831                	j	800145ea <.LBB17_73>
        self.copy_from_str(new_path_addr, &mut new_path, MAXPATH)?;
    800145d0:	0000                	unimp
    800145d2:	ffff7097          	auipc	ra,0xffff7
    800145d6:	494080e7          	jalr	1172(ra) # 8000ba66 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h2e645b443ebf2dc7E>
    800145da:	a009                	j	800145dc <.LBB17_72+0x1e>
    800145dc:	ffff9097          	auipc	ra,0xffff9
    800145e0:	b0c080e7          	jalr	-1268(ra) # 8000d0e8 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h74072cf57097ff24E>
    800145e4:	f52a                	sd	a0,168(sp)
    800145e6:	f92e                	sd	a1,176(sp)
    800145e8:	a611                	j	800148ec <.LBB17_81+0x22>

00000000800145ea <.LBB17_73>:
        match ICACHE.namei(&old_path) {
    800145ea:	00053597          	auipc	a1,0x53
    800145ee:	4a658593          	addi	a1,a1,1190 # 80067a90 <_ZN6kernel2fs5inode6ICACHE17had1be8942ca79bf1E>
    800145f2:	1b88                	addi	a0,sp,496
    800145f4:	1a30                	addi	a2,sp,312
    800145f6:	08000693          	li	a3,128
    800145fa:	00005097          	auipc	ra,0x5
    800145fe:	e78080e7          	jalr	-392(ra) # 80019472 <_ZN6kernel2fs5inode10InodeCache5namei17hc269c6a9eecf1991E>
    80014602:	a009                	j	80014604 <.LBB17_73+0x1a>
            Some(cur) => {
    80014604:	755e                	ld	a0,496(sp)
    80014606:	4581                	li	a1,0
    80014608:	00b50463          	beq	a0,a1,80014610 <.LBB17_74>
    8001460c:	a009                	j	8001460e <.LBB17_73+0x24>
    8001460e:	a819                	j	80014624 <.LBB17_74+0x14>

0000000080014610 <.LBB17_74>:
                inode = cur;
            },

            None => {
                LOG.end_op();
    80014610:	00053517          	auipc	a0,0x53
    80014614:	3d850513          	addi	a0,a0,984 # 800679e8 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    80014618:	ffff5097          	auipc	ra,0xffff5
    8001461c:	b80080e7          	jalr	-1152(ra) # 80009198 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>
    80014620:	a825                	j	80014658 <.LBB17_74+0x48>
        match ICACHE.namei(&old_path) {
    80014622:	0000                	unimp
            Some(cur) => {
    80014624:	20013503          	ld	a0,512(sp)
    80014628:	20a13823          	sd	a0,528(sp)
    8001462c:	75fe                	ld	a1,504(sp)
    8001462e:	20b13423          	sd	a1,520(sp)
                inode = cur;
    80014632:	20b13c23          	sd	a1,536(sp)
    80014636:	22a13023          	sd	a0,544(sp)
    8001463a:	4605                	li	a2,1
    8001463c:	28c10fa3          	sb	a2,671(sp)
    80014640:	e7ae                	sd	a1,456(sp)
    80014642:	ebaa                	sd	a0,464(sp)
    80014644:	03a8                	addi	a0,sp,456
                return Err(())
            }
        }
        let mut inode_guard = inode.lock();
    80014646:	00007097          	auipc	ra,0x7
    8001464a:	870080e7          	jalr	-1936(ra) # 8001aeb6 <_ZN6kernel2fs5inode5Inode4lock17he70970c593f751adE>
    8001464e:	22a13423          	sd	a0,552(sp)
    80014652:	22b13823          	sd	a1,560(sp)
    80014656:	a021                	j	8001465e <.LBB17_74+0x4e>
    80014658:	4505                	li	a0,1
                return Err(())
    8001465a:	f52a                	sd	a0,168(sp)
    8001465c:	ac41                	j	800148ec <.LBB17_81+0x22>
    8001465e:	1428                	addi	a0,sp,552
        if inode_guard.dinode.itype == InodeType::Directory {
    80014660:	00009097          	auipc	ra,0x9
    80014664:	06e080e7          	jalr	110(ra) # 8001d6ce <_ZN92_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfc7812d7ca7ab1e1E>
    80014668:	f4aa                	sd	a0,104(sp)
    8001466a:	a009                	j	8001466c <.LBB17_74+0x5c>
    8001466c:	7526                	ld	a0,104(sp)
    8001466e:	0521                	addi	a0,a0,8

0000000080014670 <.LBB17_75>:
    80014670:	00015597          	auipc	a1,0x15
    80014674:	d2858593          	addi	a1,a1,-728 # 80029398 <.L__unnamed_18>
    80014678:	ffff4097          	auipc	ra,0xffff4
    8001467c:	d4a080e7          	jalr	-694(ra) # 800083c2 <_ZN70_$LT$kernel..fs..dinode..InodeType$u20$as$u20$core..cmp..PartialEq$GT$2eq17ha4431a2c7299d33fE>
    80014680:	f0aa                	sd	a0,96(sp)
    80014682:	a009                	j	80014684 <.LBB17_75+0x14>
    80014684:	7506                	ld	a0,96(sp)
    80014686:	4581                	li	a1,0
    80014688:	00b50c63          	beq	a0,a1,800146a0 <.LBB17_75+0x30>
    8001468c:	a009                	j	8001468e <.LBB17_75+0x1e>
            drop(inode_guard);
    8001468e:	22813503          	ld	a0,552(sp)
    80014692:	23013583          	ld	a1,560(sp)
    80014696:	00009097          	auipc	ra,0x9
    8001469a:	9d2080e7          	jalr	-1582(ra) # 8001d068 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    8001469e:	a801                	j	800146ae <.LBB17_76>
    800146a0:	1428                	addi	a0,sp,552
            LOG.end_op();
            return Err(())
        }

        inode_guard.dinode.nlink += 1;
    800146a2:	00009097          	auipc	ra,0x9
    800146a6:	040080e7          	jalr	64(ra) # 8001d6e2 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    800146aa:	ecaa                	sd	a0,88(sp)
    800146ac:	a829                	j	800146c6 <.LBB17_76+0x18>

00000000800146ae <.LBB17_76>:
            LOG.end_op();
    800146ae:	00053517          	auipc	a0,0x53
    800146b2:	33a50513          	addi	a0,a0,826 # 800679e8 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    800146b6:	ffff5097          	auipc	ra,0xffff5
    800146ba:	ae2080e7          	jalr	-1310(ra) # 80009198 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>
    800146be:	a009                	j	800146c0 <.LBB17_76+0x12>
    800146c0:	4505                	li	a0,1
            return Err(())
    800146c2:	f52a                	sd	a0,168(sp)
    800146c4:	a425                	j	800148ec <.LBB17_81+0x22>
        inode_guard.dinode.nlink += 1;
    800146c6:	6566                	ld	a0,88(sp)
    800146c8:	00e51503          	lh	a0,14(a0)
    800146cc:	00150593          	addi	a1,a0,1
    800146d0:	e8ae                	sd	a1,80(sp)
    800146d2:	03059513          	slli	a0,a1,0x30
    800146d6:	9541                	srai	a0,a0,0x30
    800146d8:	26b51863          	bne	a0,a1,80014948 <.LBB17_82>
    800146dc:	a009                	j	800146de <.LBB17_76+0x30>
    800146de:	6546                	ld	a0,80(sp)
    800146e0:	65e6                	ld	a1,88(sp)
    800146e2:	00a59723          	sh	a0,14(a1)

00000000800146e6 <.LBB17_77>:

        match ICACHE.namei_parent(&new_path, &mut name) {
    800146e6:	00053597          	auipc	a1,0x53
    800146ea:	3aa58593          	addi	a1,a1,938 # 80067a90 <_ZN6kernel2fs5inode6ICACHE17had1be8942ca79bf1E>
    800146ee:	1c28                	addi	a0,sp,568
    800146f0:	1930                	addi	a2,sp,184
    800146f2:	08000693          	li	a3,128
    800146f6:	1b38                	addi	a4,sp,440
    800146f8:	00005097          	auipc	ra,0x5
    800146fc:	da0080e7          	jalr	-608(ra) # 80019498 <_ZN6kernel2fs5inode10InodeCache12namei_parent17h24bebf98ccd9b34eE>
    80014700:	a009                	j	80014702 <.LBB17_77+0x1c>
            Some(cur) => {
    80014702:	23813503          	ld	a0,568(sp)
    80014706:	4581                	li	a1,0
    80014708:	00b51a63          	bne	a0,a1,8001471c <.LBB17_77+0x36>
    8001470c:	a009                	j	8001470e <.LBB17_77+0x28>
    8001470e:	1428                	addi	a0,sp,552
                parent = cur;
            },

            _ => {
                inode_guard.dinode.nlink -= 1;
    80014710:	00009097          	auipc	ra,0x9
    80014714:	fd2080e7          	jalr	-46(ra) # 8001d6e2 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    80014718:	e4aa                	sd	a0,72(sp)
    8001471a:	a835                	j	80014756 <.LBB17_77+0x70>
            Some(cur) => {
    8001471c:	24813583          	ld	a1,584(sp)
    80014720:	24b13c23          	sd	a1,600(sp)
    80014724:	24013603          	ld	a2,576(sp)
    80014728:	24c13823          	sd	a2,592(sp)
                parent = cur;
    8001472c:	26c13023          	sd	a2,608(sp)
    80014730:	26b13423          	sd	a1,616(sp)
    80014734:	4505                	li	a0,1
    80014736:	28a10f23          	sb	a0,670(sp)
    8001473a:	efb2                	sd	a2,472(sp)
    8001473c:	f3ae                	sd	a1,480(sp)
                drop(inode_guard);
                LOG.end_op();
                return Err(())
            }
        }
        let mut parent_guard = parent.lock();
    8001473e:	28a10ea3          	sb	a0,669(sp)
    80014742:	0ba8                	addi	a0,sp,472
    80014744:	00006097          	auipc	ra,0x6
    80014748:	772080e7          	jalr	1906(ra) # 8001aeb6 <_ZN6kernel2fs5inode5Inode4lock17he70970c593f751adE>
    8001474c:	26a13823          	sd	a0,624(sp)
    80014750:	26b13c23          	sd	a1,632(sp)
    80014754:	a899                	j	800147aa <.LBB17_78+0x22>
                inode_guard.dinode.nlink -= 1;
    80014756:	6526                	ld	a0,72(sp)
    80014758:	00e51503          	lh	a0,14(a0)
    8001475c:	fff50593          	addi	a1,a0,-1
    80014760:	e0ae                	sd	a1,64(sp)
    80014762:	03059513          	slli	a0,a1,0x30
    80014766:	9541                	srai	a0,a0,0x30
    80014768:	1eb51e63          	bne	a0,a1,80014964 <.LBB17_84>
    8001476c:	a009                	j	8001476e <.LBB17_77+0x88>
    8001476e:	6506                	ld	a0,64(sp)
    80014770:	65a6                	ld	a1,72(sp)
    80014772:	00a59723          	sh	a0,14(a1)
                drop(inode_guard);
    80014776:	22813503          	ld	a0,552(sp)
    8001477a:	23013583          	ld	a1,560(sp)
    8001477e:	00009097          	auipc	ra,0x9
    80014782:	8ea080e7          	jalr	-1814(ra) # 8001d068 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    80014786:	a009                	j	80014788 <.LBB17_78>

0000000080014788 <.LBB17_78>:
                LOG.end_op();
    80014788:	00053517          	auipc	a0,0x53
    8001478c:	26050513          	addi	a0,a0,608 # 800679e8 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    80014790:	ffff5097          	auipc	ra,0xffff5
    80014794:	a08080e7          	jalr	-1528(ra) # 80009198 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>
    80014798:	a009                	j	8001479a <.LBB17_78+0x12>
    8001479a:	4505                	li	a0,1
                return Err(())
    8001479c:	f52a                	sd	a0,168(sp)
    8001479e:	1c28                	addi	a0,sp,568
        }
    800147a0:	ffff2097          	auipc	ra,0xffff2
    800147a4:	7ac080e7          	jalr	1964(ra) # 80006f4c <_ZN4core3ptr73drop_in_place$LT$core..option..Option$LT$kernel..fs..inode..Inode$GT$$GT$17h6a7b3b84406d6cdfE>
    800147a8:	a291                	j	800148ec <.LBB17_81+0x22>
    800147aa:	1c88                	addi	a0,sp,624
        if parent_guard.dinode.itype != InodeType::Directory || 
    800147ac:	00009097          	auipc	ra,0x9
    800147b0:	f22080e7          	jalr	-222(ra) # 8001d6ce <_ZN92_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfc7812d7ca7ab1e1E>
    800147b4:	fc2a                	sd	a0,56(sp)
    800147b6:	a02d                	j	800147e0 <.LBB17_78+0x58>
    800147b8:	4505                	li	a0,1
    800147ba:	28a103a3          	sb	a0,647(sp)
    800147be:	a821                	j	800147d6 <.LBB17_78+0x4e>
    800147c0:	4501                	li	a0,0
    800147c2:	28a103a3          	sb	a0,647(sp)
    800147c6:	a801                	j	800147d6 <.LBB17_78+0x4e>
    800147c8:	1c88                	addi	a0,sp,624
            parent_guard.dir_link(&name, inode.inum).is_ok() {
    800147ca:	00009097          	auipc	ra,0x9
    800147ce:	f18080e7          	jalr	-232(ra) # 8001d6e2 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    800147d2:	f82a                	sd	a0,48(sp)
    800147d4:	a02d                	j	800147fe <.LBB17_79+0x1a>
        if parent_guard.dinode.itype != InodeType::Directory || 
    800147d6:	28714503          	lbu	a0,647(sp)
    800147da:	8905                	andi	a0,a0,1
    800147dc:	e929                	bnez	a0,8001482e <.LBB17_79+0x4a>
    800147de:	a0a5                	j	80014846 <.LBB17_79+0x62>
    800147e0:	7562                	ld	a0,56(sp)
    800147e2:	0521                	addi	a0,a0,8

00000000800147e4 <.LBB17_79>:
    800147e4:	00015597          	auipc	a1,0x15
    800147e8:	bb458593          	addi	a1,a1,-1100 # 80029398 <.L__unnamed_18>
    800147ec:	00004097          	auipc	ra,0x4
    800147f0:	c44080e7          	jalr	-956(ra) # 80018430 <_ZN4core3cmp9PartialEq2ne17h733d64bbe9421100E>
    800147f4:	f42a                	sd	a0,40(sp)
    800147f6:	a009                	j	800147f8 <.LBB17_79+0x14>
    800147f8:	7522                	ld	a0,40(sp)
    800147fa:	fd5d                	bnez	a0,800147b8 <.LBB17_78+0x30>
    800147fc:	b7f1                	j	800147c8 <.LBB17_78+0x40>
            parent_guard.dir_link(&name, inode.inum).is_ok() {
    800147fe:	7542                	ld	a0,48(sp)
    80014800:	1d412683          	lw	a3,468(sp)
    80014804:	1b2c                	addi	a1,sp,440
    80014806:	4639                	li	a2,14
    80014808:	00006097          	auipc	ra,0x6
    8001480c:	2ee080e7          	jalr	750(ra) # 8001aaf6 <_ZN6kernel2fs5inode9InodeData8dir_link17h13a19ea2d651643eE>
    80014810:	28a13423          	sd	a0,648(sp)
    80014814:	28b13823          	sd	a1,656(sp)
    80014818:	a009                	j	8001481a <.LBB17_79+0x36>
    8001481a:	0528                	addi	a0,sp,648
    8001481c:	ffff8097          	auipc	ra,0xffff8
    80014820:	490080e7          	jalr	1168(ra) # 8000ccac <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h5bbc2715c9ad6c41E>
    80014824:	f02a                	sd	a0,32(sp)
    80014826:	a009                	j	80014828 <.LBB17_79+0x44>
        if parent_guard.dinode.itype != InodeType::Directory || 
    80014828:	7502                	ld	a0,32(sp)
    8001482a:	f559                	bnez	a0,800147b8 <.LBB17_78+0x30>
    8001482c:	bf51                	j	800147c0 <.LBB17_78+0x38>
    8001482e:	4501                	li	a0,0
                drop(parent_guard);
    80014830:	28a10ea3          	sb	a0,669(sp)
    80014834:	27013503          	ld	a0,624(sp)
    80014838:	27813583          	ld	a1,632(sp)
    8001483c:	00009097          	auipc	ra,0x9
    80014840:	82c080e7          	jalr	-2004(ra) # 8001d068 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    80014844:	a801                	j	80014854 <.LBB17_79+0x70>
    80014846:	1428                	addi	a0,sp,552
                drop(inode_guard);
                LOG.end_op();
                return Err(())
            }
        
        inode_guard.update();
    80014848:	00009097          	auipc	ra,0x9
    8001484c:	e9a080e7          	jalr	-358(ra) # 8001d6e2 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    80014850:	ec2a                	sd	a0,24(sp)
    80014852:	a8a9                	j	800148ac <.LBB17_80+0x18>
    80014854:	1428                	addi	a0,sp,552
                inode_guard.dinode.nlink -= 1;
    80014856:	00009097          	auipc	ra,0x9
    8001485a:	e8c080e7          	jalr	-372(ra) # 8001d6e2 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    8001485e:	e82a                	sd	a0,16(sp)
    80014860:	a009                	j	80014862 <.LBB17_79+0x7e>
    80014862:	6542                	ld	a0,16(sp)
    80014864:	00e51503          	lh	a0,14(a0)
    80014868:	fff50593          	addi	a1,a0,-1
    8001486c:	e42e                	sd	a1,8(sp)
    8001486e:	03059513          	slli	a0,a1,0x30
    80014872:	9541                	srai	a0,a0,0x30
    80014874:	10b51763          	bne	a0,a1,80014982 <.LBB17_86>
    80014878:	a009                	j	8001487a <.LBB17_79+0x96>
    8001487a:	6522                	ld	a0,8(sp)
    8001487c:	65c2                	ld	a1,16(sp)
    8001487e:	00a59723          	sh	a0,14(a1)
                drop(inode_guard);
    80014882:	22813503          	ld	a0,552(sp)
    80014886:	23013583          	ld	a1,560(sp)
    8001488a:	00008097          	auipc	ra,0x8
    8001488e:	7de080e7          	jalr	2014(ra) # 8001d068 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    80014892:	a009                	j	80014894 <.LBB17_80>

0000000080014894 <.LBB17_80>:
                LOG.end_op();
    80014894:	00053517          	auipc	a0,0x53
    80014898:	15450513          	addi	a0,a0,340 # 800679e8 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    8001489c:	ffff5097          	auipc	ra,0xffff5
    800148a0:	8fc080e7          	jalr	-1796(ra) # 80009198 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>
    800148a4:	a009                	j	800148a6 <.LBB17_80+0x12>
    800148a6:	4505                	li	a0,1
                return Err(())
    800148a8:	f52a                	sd	a0,168(sp)
    800148aa:	a8b5                	j	80014926 <.LBB17_81+0x5c>
        inode_guard.update();
    800148ac:	6562                	ld	a0,24(sp)
    800148ae:	00005097          	auipc	ra,0x5
    800148b2:	69c080e7          	jalr	1692(ra) # 80019f4a <_ZN6kernel2fs5inode9InodeData6update17h81f49ab31d0ddfdcE>
    800148b6:	a009                	j	800148b8 <.LBB17_80+0x24>
        drop(inode_guard);
    800148b8:	22813503          	ld	a0,552(sp)
    800148bc:	23013583          	ld	a1,560(sp)
    800148c0:	00008097          	auipc	ra,0x8
    800148c4:	7a8080e7          	jalr	1960(ra) # 8001d068 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    800148c8:	a009                	j	800148ca <.LBB17_81>

00000000800148ca <.LBB17_81>:
        LOG.end_op();
    800148ca:	00053517          	auipc	a0,0x53
    800148ce:	11e50513          	addi	a0,a0,286 # 800679e8 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    800148d2:	ffff5097          	auipc	ra,0xffff5
    800148d6:	8c6080e7          	jalr	-1850(ra) # 80009198 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>
    800148da:	a009                	j	800148dc <.LBB17_81+0x12>
    800148dc:	4501                	li	a0,0
        return Ok(0)
    800148de:	f92a                	sd	a0,176(sp)
    800148e0:	f52a                	sd	a0,168(sp)
    800148e2:	a091                	j	80014926 <.LBB17_81+0x5c>
    800148e4:	4501                	li	a0,0
    }
    800148e6:	28a10ea3          	sb	a0,669(sp)
    800148ea:	a009                	j	800148ec <.LBB17_81+0x22>
    800148ec:	29e14503          	lbu	a0,670(sp)
    800148f0:	8905                	andi	a0,a0,1
    800148f2:	ed1d                	bnez	a0,80014930 <.LBB17_81+0x66>
    800148f4:	a009                	j	800148f6 <.LBB17_81+0x2c>
    800148f6:	4501                	li	a0,0
    800148f8:	28a10f23          	sb	a0,670(sp)
    800148fc:	29f14503          	lbu	a0,671(sp)
    80014900:	8905                	andi	a0,a0,1
    80014902:	ed0d                	bnez	a0,8001493c <.LBB17_81+0x72>
    80014904:	a009                	j	80014906 <.LBB17_81+0x3c>
    80014906:	4501                	li	a0,0
    80014908:	28a10fa3          	sb	a0,671(sp)
    8001490c:	752a                	ld	a0,168(sp)
    8001490e:	75ca                	ld	a1,176(sp)
    80014910:	2d813083          	ld	ra,728(sp)
    80014914:	2e010113          	addi	sp,sp,736
    80014918:	8082                	ret
    8001491a:	1c88                	addi	a0,sp,624
    8001491c:	ffff2097          	auipc	ra,0xffff2
    80014920:	750080e7          	jalr	1872(ra) # 8000706c <_ZN4core3ptr96drop_in_place$LT$kernel..lock..sleeplock..SleepLockGuard$LT$kernel..fs..inode..InodeData$GT$$GT$17h00d5c02cf687ef41E>
    80014924:	b7c1                	j	800148e4 <.LBB17_81+0x1a>
    80014926:	29d14503          	lbu	a0,669(sp)
    8001492a:	8905                	andi	a0,a0,1
    8001492c:	f57d                	bnez	a0,8001491a <.LBB17_81+0x50>
    8001492e:	bf5d                	j	800148e4 <.LBB17_81+0x1a>
    80014930:	0ba8                	addi	a0,sp,472
    80014932:	ffff2097          	auipc	ra,0xffff2
    80014936:	550080e7          	jalr	1360(ra) # 80006e82 <_ZN4core3ptr45drop_in_place$LT$kernel..fs..inode..Inode$GT$17h8786fe1a2a287832E>
    8001493a:	bf75                	j	800148f6 <.LBB17_81+0x2c>
    8001493c:	03a8                	addi	a0,sp,456
    8001493e:	ffff2097          	auipc	ra,0xffff2
    80014942:	544080e7          	jalr	1348(ra) # 80006e82 <_ZN4core3ptr45drop_in_place$LT$kernel..fs..inode..Inode$GT$17h8786fe1a2a287832E>
    80014946:	b7c1                	j	80014906 <.LBB17_81+0x3c>

0000000080014948 <.LBB17_82>:
        inode_guard.dinode.nlink += 1;
    80014948:	00015517          	auipc	a0,0x15
    8001494c:	b8850513          	addi	a0,a0,-1144 # 800294d0 <str.1>

0000000080014950 <.LBB17_83>:
    80014950:	00015617          	auipc	a2,0x15
    80014954:	ec060613          	addi	a2,a2,-320 # 80029810 <.L__unnamed_55>
    80014958:	45f1                	li	a1,28
    8001495a:	0000e097          	auipc	ra,0xe
    8001495e:	91c080e7          	jalr	-1764(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080014964 <.LBB17_84>:
                inode_guard.dinode.nlink -= 1;
    80014964:	00015517          	auipc	a0,0x15
    80014968:	e6c50513          	addi	a0,a0,-404 # 800297d0 <str.2>

000000008001496c <.LBB17_85>:
    8001496c:	00015617          	auipc	a2,0x15
    80014970:	ebc60613          	addi	a2,a2,-324 # 80029828 <.L__unnamed_56>
    80014974:	02100593          	li	a1,33
    80014978:	0000e097          	auipc	ra,0xe
    8001497c:	8fe080e7          	jalr	-1794(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080014982 <.LBB17_86>:
                inode_guard.dinode.nlink -= 1;
    80014982:	00015517          	auipc	a0,0x15
    80014986:	e4e50513          	addi	a0,a0,-434 # 800297d0 <str.2>

000000008001498a <.LBB17_87>:
    8001498a:	00015617          	auipc	a2,0x15
    8001498e:	eb660613          	addi	a2,a2,-330 # 80029840 <.L__unnamed_57>
    80014992:	02100593          	li	a1,33
    80014996:	0000e097          	auipc	ra,0xe
    8001499a:	8e0080e7          	jalr	-1824(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$9sys_mkdir17h9fc2155a1c553da1E:

00000000800149a0 <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$9sys_mkdir17h9fc2155a1c553da1E>:

    pub fn sys_mkdir(&self) -> SysResult {
    800149a0:	7165                	addi	sp,sp,-400
    800149a2:	e706                	sd	ra,392(sp)
    800149a4:	f42a                	sd	a0,40(sp)
    800149a6:	f2aa                	sd	a0,352(sp)
    800149a8:	04710513          	addi	a0,sp,71
    800149ac:	4581                	li	a1,0
    800149ae:	08000613          	li	a2,128
        let mut path = [0u8; MAXPATH];
    800149b2:	00010097          	auipc	ra,0x10
    800149b6:	784080e7          	jalr	1924(ra) # 80025136 <memset>

00000000800149ba <.LBB18_22>:
        LOG.begin_op();
    800149ba:	00053517          	auipc	a0,0x53
    800149be:	02e50513          	addi	a0,a0,46 # 800679e8 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    800149c2:	ffff4097          	auipc	ra,0xffff4
    800149c6:	1f0080e7          	jalr	496(ra) # 80008bb2 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$8begin_op17he5b49a48c716e372E>
    800149ca:	a009                	j	800149cc <.LBB18_22+0x12>
        let addr = self.arg(0);
    800149cc:	7522                	ld	a0,40(sp)
    800149ce:	4581                	li	a1,0
    800149d0:	00000097          	auipc	ra,0x0
    800149d4:	7da080e7          	jalr	2010(ra) # 800151aa <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    800149d8:	85aa                	mv	a1,a0
    800149da:	f02e                	sd	a1,32(sp)
    800149dc:	feaa                	sd	a0,376(sp)
    800149de:	a009                	j	800149e0 <.LBB18_22+0x26>
        self.copy_from_str(addr, &mut path, MAXPATH)?;
    800149e0:	7582                	ld	a1,32(sp)
    800149e2:	7522                	ld	a0,40(sp)
    800149e4:	04710613          	addi	a2,sp,71
    800149e8:	08000713          	li	a4,128
    800149ec:	86ba                	mv	a3,a4
    800149ee:	00001097          	auipc	ra,0x1
    800149f2:	86c080e7          	jalr	-1940(ra) # 8001525a <_ZN6kernel7syscall7Syscall13copy_from_str17h5c83be6e0d4b822aE>
    800149f6:	ec2a                	sd	a0,24(sp)
    800149f8:	a009                	j	800149fa <.LBB18_22+0x40>
    800149fa:	6562                	ld	a0,24(sp)
    800149fc:	ffff9097          	auipc	ra,0xffff9
    80014a00:	800080e7          	jalr	-2048(ra) # 8000d1fc <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h9e3ff03fe8989dd2E>
    80014a04:	0ca103a3          	sb	a0,199(sp)
    80014a08:	a009                	j	80014a0a <.LBB18_22+0x50>
    80014a0a:	0c714503          	lbu	a0,199(sp)
    80014a0e:	8905                	andi	a0,a0,1
    80014a10:	4581                	li	a1,0
    80014a12:	00b50463          	beq	a0,a1,80014a1a <.LBB18_22+0x60>
    80014a16:	a009                	j	80014a18 <.LBB18_22+0x5e>
    80014a18:	a02d                	j	80014a42 <.LBB18_23+0x22>
    80014a1a:	4705                	li	a4,1
        match ICACHE.create(&path, InodeType::Directory, 0, 0) {
    80014a1c:	0ee11323          	sh	a4,230(sp)

0000000080014a20 <.LBB18_23>:
    80014a20:	00053597          	auipc	a1,0x53
    80014a24:	07058593          	addi	a1,a1,112 # 80067a90 <_ZN6kernel2fs5inode6ICACHE17had1be8942ca79bf1E>
    80014a28:	01a8                	addi	a0,sp,200
    80014a2a:	04710613          	addi	a2,sp,71
    80014a2e:	08000693          	li	a3,128
    80014a32:	4801                	li	a6,0
    80014a34:	87c2                	mv	a5,a6
    80014a36:	00005097          	auipc	ra,0x5
    80014a3a:	a80080e7          	jalr	-1408(ra) # 800194b6 <_ZN6kernel2fs5inode10InodeCache6create17h24595de16ee7205aE>
    80014a3e:	a831                	j	80014a5a <.LBB18_23+0x3a>
        self.copy_from_str(addr, &mut path, MAXPATH)?;
    80014a40:	0000                	unimp
    80014a42:	ffff7097          	auipc	ra,0xffff7
    80014a46:	024080e7          	jalr	36(ra) # 8000ba66 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h2e645b443ebf2dc7E>
    80014a4a:	a009                	j	80014a4c <.LBB18_23+0x2c>
    80014a4c:	ffff8097          	auipc	ra,0xffff8
    80014a50:	69c080e7          	jalr	1692(ra) # 8000d0e8 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h74072cf57097ff24E>
    80014a54:	f82a                	sd	a0,48(sp)
    80014a56:	fc2e                	sd	a1,56(sp)
    80014a58:	a861                	j	80014af0 <.LBB18_26+0x2e>
            Ok(inode) => {
    80014a5a:	652e                	ld	a0,200(sp)
    80014a5c:	4581                	li	a1,0
    80014a5e:	02b50663          	beq	a0,a1,80014a8a <.LBB18_24+0x18>
    80014a62:	a009                	j	80014a64 <.LBB18_23+0x44>
                drop(inode);
                LOG.end_op();
                Ok(0)
            },

            Err(err) => {
    80014a64:	65ce                	ld	a1,208(sp)
    80014a66:	656e                	ld	a0,216(sp)
    80014a68:	e62e                	sd	a1,264(sp)
    80014a6a:	ea2a                	sd	a0,272(sp)
    80014a6c:	0228                	addi	a0,sp,264
                println!("[Kernel] sys_mkdir: err: {}", err);
    80014a6e:	eeaa                	sd	a0,344(sp)
    80014a70:	e32a                	sd	a0,384(sp)

0000000080014a72 <.LBB18_24>:
    80014a72:	0000a597          	auipc	a1,0xa
    80014a76:	b4258593          	addi	a1,a1,-1214 # 8001e5b4 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E>
    80014a7a:	0000a097          	auipc	ra,0xa
    80014a7e:	b80080e7          	jalr	-1152(ra) # 8001e5fa <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>
    80014a82:	e42a                	sd	a0,8(sp)
    80014a84:	e82e                	sd	a1,16(sp)
    80014a86:	a815                	j	80014aba <.LBB18_25+0x1a>
        match ICACHE.create(&path, InodeType::Directory, 0, 0) {
    80014a88:	0000                	unimp
            Ok(inode) => {
    80014a8a:	65ee                	ld	a1,216(sp)
    80014a8c:	f9ae                	sd	a1,240(sp)
    80014a8e:	654e                	ld	a0,208(sp)
    80014a90:	f5aa                	sd	a0,232(sp)
                drop(inode);
    80014a92:	e22e                	sd	a1,256(sp)
    80014a94:	fdaa                	sd	a0,248(sp)
    80014a96:	00008097          	auipc	ra,0x8
    80014a9a:	6a6080e7          	jalr	1702(ra) # 8001d13c <_ZN4core3mem4drop17hb93abdfe16b94be5E>
    80014a9e:	a009                	j	80014aa0 <.LBB18_25>

0000000080014aa0 <.LBB18_25>:
                LOG.end_op();
    80014aa0:	00053517          	auipc	a0,0x53
    80014aa4:	f4850513          	addi	a0,a0,-184 # 800679e8 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    80014aa8:	ffff4097          	auipc	ra,0xffff4
    80014aac:	6f0080e7          	jalr	1776(ra) # 80009198 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>
    80014ab0:	a009                	j	80014ab2 <.LBB18_25+0x12>
    80014ab2:	4501                	li	a0,0
                Ok(0)
    80014ab4:	fc2a                	sd	a0,56(sp)
    80014ab6:	f82a                	sd	a0,48(sp)
        match ICACHE.create(&path, InodeType::Directory, 0, 0) {
    80014ab8:	a81d                	j	80014aee <.LBB18_26+0x2c>
                println!("[Kernel] sys_mkdir: err: {}", err);
    80014aba:	6542                	ld	a0,16(sp)
    80014abc:	65a2                	ld	a1,8(sp)
    80014abe:	e6ae                	sd	a1,328(sp)
    80014ac0:	eaaa                	sd	a0,336(sp)

0000000080014ac2 <.LBB18_26>:
    80014ac2:	00015597          	auipc	a1,0x15
    80014ac6:	db658593          	addi	a1,a1,-586 # 80029878 <.L__unnamed_58>
    80014aca:	0a28                	addi	a0,sp,280
    80014acc:	4609                	li	a2,2
    80014ace:	02b4                	addi	a3,sp,328
    80014ad0:	4705                	li	a4,1
    80014ad2:	ffff1097          	auipc	ra,0xffff1
    80014ad6:	998080e7          	jalr	-1640(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80014ada:	a009                	j	80014adc <.LBB18_26+0x1a>
    80014adc:	0a28                	addi	a0,sp,280
    80014ade:	00009097          	auipc	ra,0x9
    80014ae2:	26e080e7          	jalr	622(ra) # 8001dd4c <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    80014ae6:	a009                	j	80014ae8 <.LBB18_26+0x26>
    80014ae8:	4505                	li	a0,1
                Err(())
    80014aea:	f82a                	sd	a0,48(sp)
        match ICACHE.create(&path, InodeType::Directory, 0, 0) {
    80014aec:	a009                	j	80014aee <.LBB18_26+0x2c>
            }
        }
    }
    80014aee:	a009                	j	80014af0 <.LBB18_26+0x2e>
    80014af0:	7542                	ld	a0,48(sp)
    80014af2:	75e2                	ld	a1,56(sp)
    80014af4:	60ba                	ld	ra,392(sp)
    80014af6:	6159                	addi	sp,sp,400
    80014af8:	8082                	ret

Disassembly of section .text._ZN6kernel7syscall3ipc42_$LT$impl$u20$kernel..syscall..Syscall$GT$11sys_sem_get17hb3397bd9d36c7bd4E:

0000000080014afa <_ZN6kernel7syscall3ipc42_$LT$impl$u20$kernel..syscall..Syscall$GT$11sys_sem_get17hb3397bd9d36c7bd4E>:
use super::*;

//TODO  Type!!!!

impl Syscall<'_>{
    pub fn sys_sem_get(&mut self) -> SysResult{
    80014afa:	7135                	addi	sp,sp,-160
    80014afc:	ed06                	sd	ra,152(sp)
    80014afe:	e82a                	sd	a0,16(sp)
    80014b00:	e52a                	sd	a0,136(sp)

0000000080014b02 <.LBB19_10>:
        println!("sys_sem_get in ipc.rs");
    80014b02:	00015597          	auipc	a1,0x15
    80014b06:	dae58593          	addi	a1,a1,-594 # 800298b0 <.L__unnamed_59>

0000000080014b0a <.LBB19_11>:
    80014b0a:	00015697          	auipc	a3,0x15
    80014b0e:	db668693          	addi	a3,a3,-586 # 800298c0 <.L__unnamed_124>
    80014b12:	1028                	addi	a0,sp,40
    80014b14:	4605                	li	a2,1
    80014b16:	4701                	li	a4,0
    80014b18:	ffff1097          	auipc	ra,0xffff1
    80014b1c:	952080e7          	jalr	-1710(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80014b20:	a009                	j	80014b22 <.LBB19_11+0x18>
    80014b22:	1028                	addi	a0,sp,40
    80014b24:	00009097          	auipc	ra,0x9
    80014b28:	228080e7          	jalr	552(ra) # 8001dd4c <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    80014b2c:	a009                	j	80014b2e <.LBB19_11+0x24>
        let id = self.arg(0) as i32;
    80014b2e:	6542                	ld	a0,16(sp)
    80014b30:	4581                	li	a1,0
    80014b32:	00000097          	auipc	ra,0x0
    80014b36:	678080e7          	jalr	1656(ra) # 800151aa <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    80014b3a:	e42a                	sd	a0,8(sp)
    80014b3c:	a009                	j	80014b3e <.LBB19_11+0x34>
    80014b3e:	65a2                	ld	a1,8(sp)
    80014b40:	c92e                	sw	a1,144(sp)

0000000080014b42 <.LBB19_12>:
        let res = unsafe{SEM_MANAGER.get(id)};
    80014b42:	00055517          	auipc	a0,0x55
    80014b46:	d6e50513          	addi	a0,a0,-658 # 800698b0 <_ZN6kernel3ipc9semaphore11SEM_MANAGER17hc708ed55c8325c4cE>
    80014b4a:	00008097          	auipc	ra,0x8
    80014b4e:	020080e7          	jalr	32(ra) # 8001cb6a <_ZN6kernel3ipc9semaphore8SemTable3get17h969ea55db514a2ceE>
    80014b52:	0005059b          	sext.w	a1,a0
    80014b56:	e02e                	sd	a1,0(sp)
    80014b58:	cb2a                	sw	a0,148(sp)
    80014b5a:	a009                	j	80014b5c <.LBB19_12+0x1a>
    80014b5c:	6502                	ld	a0,0(sp)
    80014b5e:	4581                	li	a1,0
        if res >= 0 {
    80014b60:	02b54363          	blt	a0,a1,80014b86 <.LBB19_14+0x18>
    80014b64:	a009                	j	80014b66 <.LBB19_13>

0000000080014b66 <.LBB19_13>:
            println!("sys_sem_get res >= 0 in ipc.rs");
    80014b66:	00015597          	auipc	a1,0x15
    80014b6a:	d7a58593          	addi	a1,a1,-646 # 800298e0 <.L__unnamed_61>

0000000080014b6e <.LBB19_14>:
    80014b6e:	00015697          	auipc	a3,0x15
    80014b72:	d5268693          	addi	a3,a3,-686 # 800298c0 <.L__unnamed_124>
    80014b76:	08a8                	addi	a0,sp,88
    80014b78:	4605                	li	a2,1
    80014b7a:	4701                	li	a4,0
    80014b7c:	ffff1097          	auipc	ra,0xffff1
    80014b80:	8ee080e7          	jalr	-1810(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80014b84:	a021                	j	80014b8c <.LBB19_14+0x1e>
    80014b86:	4505                	li	a0,1
            Ok(res as usize)
        }else{
            Err(())
    80014b88:	ec2a                	sd	a0,24(sp)
        if res >= 0 {
    80014b8a:	a821                	j	80014ba2 <.LBB19_14+0x34>
    80014b8c:	08a8                	addi	a0,sp,88
            println!("sys_sem_get res >= 0 in ipc.rs");
    80014b8e:	00009097          	auipc	ra,0x9
    80014b92:	1be080e7          	jalr	446(ra) # 8001dd4c <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    80014b96:	a009                	j	80014b98 <.LBB19_14+0x2a>
            Ok(res as usize)
    80014b98:	6502                	ld	a0,0(sp)
    80014b9a:	f02a                	sd	a0,32(sp)
    80014b9c:	4501                	li	a0,0
    80014b9e:	ec2a                	sd	a0,24(sp)
        if res >= 0 {
    80014ba0:	a009                	j	80014ba2 <.LBB19_14+0x34>
        }
        // let res = SEM_MANAGER.get(id);
        // Ok(res);
    }
    80014ba2:	6562                	ld	a0,24(sp)
    80014ba4:	7582                	ld	a1,32(sp)
    80014ba6:	60ea                	ld	ra,152(sp)
    80014ba8:	610d                	addi	sp,sp,160
    80014baa:	8082                	ret

Disassembly of section .text._ZN6kernel7syscall3ipc42_$LT$impl$u20$kernel..syscall..Syscall$GT$11sys_sem_put17h3b21147033dd4825E:

0000000080014bac <_ZN6kernel7syscall3ipc42_$LT$impl$u20$kernel..syscall..Syscall$GT$11sys_sem_put17h3b21147033dd4825E>:

    pub fn sys_sem_put(&mut self) -> SysResult{
    80014bac:	7119                	addi	sp,sp,-128
    80014bae:	fc86                	sd	ra,120(sp)
    80014bb0:	ec2a                	sd	a0,24(sp)
    80014bb2:	f0aa                	sd	a0,96(sp)

0000000080014bb4 <.LBB20_8>:
        println!("sys_sem_put in ipc.rs");
    80014bb4:	00015597          	auipc	a1,0x15
    80014bb8:	d5458593          	addi	a1,a1,-684 # 80029908 <.L__unnamed_62>

0000000080014bbc <.LBB20_9>:
    80014bbc:	00015697          	auipc	a3,0x15
    80014bc0:	d0468693          	addi	a3,a3,-764 # 800298c0 <.L__unnamed_124>
    80014bc4:	1808                	addi	a0,sp,48
    80014bc6:	4605                	li	a2,1
    80014bc8:	4701                	li	a4,0
    80014bca:	ffff1097          	auipc	ra,0xffff1
    80014bce:	8a0080e7          	jalr	-1888(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80014bd2:	a009                	j	80014bd4 <.LBB20_9+0x18>
    80014bd4:	1808                	addi	a0,sp,48
    80014bd6:	00009097          	auipc	ra,0x9
    80014bda:	176080e7          	jalr	374(ra) # 8001dd4c <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    80014bde:	a009                	j	80014be0 <.LBB20_9+0x24>
        let id = self.arg(0) as i32;
    80014be0:	6562                	ld	a0,24(sp)
    80014be2:	4581                	li	a1,0
    80014be4:	00000097          	auipc	ra,0x0
    80014be8:	5c6080e7          	jalr	1478(ra) # 800151aa <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    80014bec:	e82a                	sd	a0,16(sp)
    80014bee:	a009                	j	80014bf0 <.LBB20_9+0x34>
    80014bf0:	65c2                	ld	a1,16(sp)
    80014bf2:	d6ae                	sw	a1,108(sp)

0000000080014bf4 <.LBB20_10>:
        let res = unsafe{SEM_MANAGER.put(id) as usize};
    80014bf4:	00055517          	auipc	a0,0x55
    80014bf8:	cbc50513          	addi	a0,a0,-836 # 800698b0 <_ZN6kernel3ipc9semaphore11SEM_MANAGER17hc708ed55c8325c4cE>
    80014bfc:	00008097          	auipc	ra,0x8
    80014c00:	092080e7          	jalr	146(ra) # 8001cc8e <_ZN6kernel3ipc9semaphore8SemTable3put17hf81380ccacc98283E>
    80014c04:	e42a                	sd	a0,8(sp)
    80014c06:	a009                	j	80014c08 <.LBB20_10+0x14>
    80014c08:	6522                	ld	a0,8(sp)
    80014c0a:	2501                	sext.w	a0,a0
    80014c0c:	e02a                	sd	a0,0(sp)
    80014c0e:	f8aa                	sd	a0,112(sp)
    80014c10:	4581                	li	a1,0
        if  res == 0 {
    80014c12:	00b51863          	bne	a0,a1,80014c22 <.LBB20_10+0x2e>
    80014c16:	a009                	j	80014c18 <.LBB20_10+0x24>
            Ok(res)
    80014c18:	6502                	ld	a0,0(sp)
    80014c1a:	f42a                	sd	a0,40(sp)
    80014c1c:	4501                	li	a0,0
    80014c1e:	f02a                	sd	a0,32(sp)
        if  res == 0 {
    80014c20:	a021                	j	80014c28 <.LBB20_10+0x34>
    80014c22:	4505                	li	a0,1
        }else{
            Err(())
    80014c24:	f02a                	sd	a0,32(sp)
        if  res == 0 {
    80014c26:	a009                	j	80014c28 <.LBB20_10+0x34>
        }
    }
    80014c28:	7502                	ld	a0,32(sp)
    80014c2a:	75a2                	ld	a1,40(sp)
    80014c2c:	70e6                	ld	ra,120(sp)
    80014c2e:	6109                	addi	sp,sp,128
    80014c30:	8082                	ret

Disassembly of section .text._ZN6kernel7syscall3ipc42_$LT$impl$u20$kernel..syscall..Syscall$GT$10sys_sem_up17h66299e2e1eef50b0E:

0000000080014c32 <_ZN6kernel7syscall3ipc42_$LT$impl$u20$kernel..syscall..Syscall$GT$10sys_sem_up17h66299e2e1eef50b0E>:

    pub fn sys_sem_up(&mut self) -> SysResult{
    80014c32:	7119                	addi	sp,sp,-128
    80014c34:	fc86                	sd	ra,120(sp)
    80014c36:	e82a                	sd	a0,16(sp)
    80014c38:	f0aa                	sd	a0,96(sp)

0000000080014c3a <.LBB21_11>:
        println!("sys_sem_up in ipc.rs");
    80014c3a:	00015597          	auipc	a1,0x15
    80014c3e:	cf658593          	addi	a1,a1,-778 # 80029930 <.L__unnamed_63>

0000000080014c42 <.LBB21_12>:
    80014c42:	00015697          	auipc	a3,0x15
    80014c46:	c7e68693          	addi	a3,a3,-898 # 800298c0 <.L__unnamed_124>
    80014c4a:	1028                	addi	a0,sp,40
    80014c4c:	4605                	li	a2,1
    80014c4e:	4701                	li	a4,0
    80014c50:	ffff1097          	auipc	ra,0xffff1
    80014c54:	81a080e7          	jalr	-2022(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80014c58:	a009                	j	80014c5a <.LBB21_12+0x18>
    80014c5a:	1028                	addi	a0,sp,40
    80014c5c:	00009097          	auipc	ra,0x9
    80014c60:	0f0080e7          	jalr	240(ra) # 8001dd4c <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    80014c64:	a009                	j	80014c66 <.LBB21_12+0x24>
        let id = self.arg(0) as i32;
    80014c66:	6542                	ld	a0,16(sp)
    80014c68:	4581                	li	a1,0
    80014c6a:	00000097          	auipc	ra,0x0
    80014c6e:	540080e7          	jalr	1344(ra) # 800151aa <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    80014c72:	e42a                	sd	a0,8(sp)
    80014c74:	a009                	j	80014c76 <.LBB21_12+0x34>
    80014c76:	65a2                	ld	a1,8(sp)
    80014c78:	d6ae                	sw	a1,108(sp)

0000000080014c7a <.LBB21_13>:
        let semOption = unsafe{SEM_MANAGER.getSemById(id)};
    80014c7a:	00055517          	auipc	a0,0x55
    80014c7e:	c3650513          	addi	a0,a0,-970 # 800698b0 <_ZN6kernel3ipc9semaphore11SEM_MANAGER17hc708ed55c8325c4cE>
    80014c82:	00008097          	auipc	ra,0x8
    80014c86:	0cc080e7          	jalr	204(ra) # 8001cd4e <_ZN6kernel3ipc9semaphore8SemTable10getSemById17hc45b63cab7252ea2E>
    80014c8a:	ecaa                	sd	a0,88(sp)
    80014c8c:	a009                	j	80014c8e <.LBB21_13+0x14>
        match semOption{
            Some(sem) => {
    80014c8e:	6566                	ld	a0,88(sp)
    80014c90:	00a035b3          	snez	a1,a0
    80014c94:	4581                	li	a1,0
    80014c96:	00b50463          	beq	a0,a1,80014c9e <.LBB21_13+0x24>
    80014c9a:	a009                	j	80014c9c <.LBB21_13+0x22>
    80014c9c:	a029                	j	80014ca6 <.LBB21_13+0x2c>
    80014c9e:	4505                	li	a0,1
                sem.sem_up();
                Ok(0)
            }
            None => Err(())
    80014ca0:	ec2a                	sd	a0,24(sp)
        match semOption{
    80014ca2:	a829                	j	80014cbc <.LBB21_13+0x42>
    80014ca4:	0000                	unimp
            Some(sem) => {
    80014ca6:	6566                	ld	a0,88(sp)
    80014ca8:	f8aa                	sd	a0,112(sp)
                sem.sem_up();
    80014caa:	00008097          	auipc	ra,0x8
    80014cae:	bea080e7          	jalr	-1046(ra) # 8001c894 <_ZN6kernel3ipc9semaphore5sem_t6sem_up17hff2b195f2e6585ecE>
    80014cb2:	a009                	j	80014cb4 <.LBB21_13+0x3a>
    80014cb4:	4501                	li	a0,0
                Ok(0)
    80014cb6:	f02a                	sd	a0,32(sp)
    80014cb8:	ec2a                	sd	a0,24(sp)
        match semOption{
    80014cba:	a009                	j	80014cbc <.LBB21_13+0x42>
        }
    }
    80014cbc:	6562                	ld	a0,24(sp)
    80014cbe:	7582                	ld	a1,32(sp)
    80014cc0:	70e6                	ld	ra,120(sp)
    80014cc2:	6109                	addi	sp,sp,128
    80014cc4:	8082                	ret

Disassembly of section .text._ZN6kernel7syscall3ipc42_$LT$impl$u20$kernel..syscall..Syscall$GT$12sys_sem_down17hf3708c0cac81b44dE:

0000000080014cc6 <_ZN6kernel7syscall3ipc42_$LT$impl$u20$kernel..syscall..Syscall$GT$12sys_sem_down17hf3708c0cac81b44dE>:

    pub fn sys_sem_down(&mut self) -> SysResult{
    80014cc6:	7119                	addi	sp,sp,-128
    80014cc8:	fc86                	sd	ra,120(sp)
    80014cca:	e82a                	sd	a0,16(sp)
    80014ccc:	f0aa                	sd	a0,96(sp)

0000000080014cce <.LBB22_11>:
        println!("sys_sem_down in ipc.rs");
    80014cce:	00015597          	auipc	a1,0x15
    80014cd2:	c8a58593          	addi	a1,a1,-886 # 80029958 <.L__unnamed_64>

0000000080014cd6 <.LBB22_12>:
    80014cd6:	00015697          	auipc	a3,0x15
    80014cda:	bea68693          	addi	a3,a3,-1046 # 800298c0 <.L__unnamed_124>
    80014cde:	1028                	addi	a0,sp,40
    80014ce0:	4605                	li	a2,1
    80014ce2:	4701                	li	a4,0
    80014ce4:	ffff0097          	auipc	ra,0xffff0
    80014ce8:	786080e7          	jalr	1926(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80014cec:	a009                	j	80014cee <.LBB22_12+0x18>
    80014cee:	1028                	addi	a0,sp,40
    80014cf0:	00009097          	auipc	ra,0x9
    80014cf4:	05c080e7          	jalr	92(ra) # 8001dd4c <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    80014cf8:	a009                	j	80014cfa <.LBB22_12+0x24>
        let id = self.arg(0) as i32;
    80014cfa:	6542                	ld	a0,16(sp)
    80014cfc:	4581                	li	a1,0
    80014cfe:	00000097          	auipc	ra,0x0
    80014d02:	4ac080e7          	jalr	1196(ra) # 800151aa <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    80014d06:	e42a                	sd	a0,8(sp)
    80014d08:	a009                	j	80014d0a <.LBB22_12+0x34>
    80014d0a:	65a2                	ld	a1,8(sp)
    80014d0c:	d6ae                	sw	a1,108(sp)

0000000080014d0e <.LBB22_13>:
        let semOption = unsafe{SEM_MANAGER.getSemById(id)};
    80014d0e:	00055517          	auipc	a0,0x55
    80014d12:	ba250513          	addi	a0,a0,-1118 # 800698b0 <_ZN6kernel3ipc9semaphore11SEM_MANAGER17hc708ed55c8325c4cE>
    80014d16:	00008097          	auipc	ra,0x8
    80014d1a:	038080e7          	jalr	56(ra) # 8001cd4e <_ZN6kernel3ipc9semaphore8SemTable10getSemById17hc45b63cab7252ea2E>
    80014d1e:	ecaa                	sd	a0,88(sp)
    80014d20:	a009                	j	80014d22 <.LBB22_13+0x14>
        match semOption{
            Some(sem) => {
    80014d22:	6566                	ld	a0,88(sp)
    80014d24:	00a035b3          	snez	a1,a0
    80014d28:	4581                	li	a1,0
    80014d2a:	00b50463          	beq	a0,a1,80014d32 <.LBB22_13+0x24>
    80014d2e:	a009                	j	80014d30 <.LBB22_13+0x22>
    80014d30:	a029                	j	80014d3a <.LBB22_13+0x2c>
    80014d32:	4505                	li	a0,1
                sem.sem_down();
                Ok(0)
            }
            None => Err(())
    80014d34:	ec2a                	sd	a0,24(sp)
        match semOption{
    80014d36:	a829                	j	80014d50 <.LBB22_13+0x42>
    80014d38:	0000                	unimp
            Some(sem) => {
    80014d3a:	6566                	ld	a0,88(sp)
    80014d3c:	f8aa                	sd	a0,112(sp)
                sem.sem_down();
    80014d3e:	00008097          	auipc	ra,0x8
    80014d42:	9d0080e7          	jalr	-1584(ra) # 8001c70e <_ZN6kernel3ipc9semaphore5sem_t8sem_down17h0b823d8c0372af65E>
    80014d46:	a009                	j	80014d48 <.LBB22_13+0x3a>
    80014d48:	4501                	li	a0,0
                Ok(0)
    80014d4a:	f02a                	sd	a0,32(sp)
    80014d4c:	ec2a                	sd	a0,24(sp)
        match semOption{
    80014d4e:	a009                	j	80014d50 <.LBB22_13+0x42>
        }
    }
    80014d50:	6562                	ld	a0,24(sp)
    80014d52:	7582                	ld	a1,32(sp)
    80014d54:	70e6                	ld	ra,120(sp)
    80014d56:	6109                	addi	sp,sp,128
    80014d58:	8082                	ret

Disassembly of section .text._ZN6kernel7syscall3ipc42_$LT$impl$u20$kernel..syscall..Syscall$GT$12sys_sem_init17h9d42fffbf875ebeaE:

0000000080014d5a <_ZN6kernel7syscall3ipc42_$LT$impl$u20$kernel..syscall..Syscall$GT$12sys_sem_init17h9d42fffbf875ebeaE>:

    pub fn sys_sem_init(&mut self) -> SysResult{
    80014d5a:	7175                	addi	sp,sp,-144
    80014d5c:	e506                	sd	ra,136(sp)
    80014d5e:	f02a                	sd	a0,32(sp)
    80014d60:	f8aa                	sd	a0,112(sp)

0000000080014d62 <.LBB23_12>:
        println!("sys_sem_init in ipc.rs");
    80014d62:	00015597          	auipc	a1,0x15
    80014d66:	c1e58593          	addi	a1,a1,-994 # 80029980 <.L__unnamed_65>

0000000080014d6a <.LBB23_13>:
    80014d6a:	00015697          	auipc	a3,0x15
    80014d6e:	b5668693          	addi	a3,a3,-1194 # 800298c0 <.L__unnamed_124>
    80014d72:	1828                	addi	a0,sp,56
    80014d74:	4605                	li	a2,1
    80014d76:	4701                	li	a4,0
    80014d78:	ffff0097          	auipc	ra,0xffff0
    80014d7c:	6f2080e7          	jalr	1778(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80014d80:	a009                	j	80014d82 <.LBB23_13+0x18>
    80014d82:	1828                	addi	a0,sp,56
    80014d84:	00009097          	auipc	ra,0x9
    80014d88:	fc8080e7          	jalr	-56(ra) # 8001dd4c <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    80014d8c:	a009                	j	80014d8e <.LBB23_13+0x24>
        let id = self.arg(0) as i32;
    80014d8e:	7502                	ld	a0,32(sp)
    80014d90:	4581                	li	a1,0
    80014d92:	00000097          	auipc	ra,0x0
    80014d96:	418080e7          	jalr	1048(ra) # 800151aa <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    80014d9a:	ec2a                	sd	a0,24(sp)
    80014d9c:	a009                	j	80014d9e <.LBB23_13+0x34>
    80014d9e:	7502                	ld	a0,32(sp)
    80014da0:	65e2                	ld	a1,24(sp)
    80014da2:	862e                	mv	a2,a1
    80014da4:	e432                	sd	a2,8(sp)
    80014da6:	dcae                	sw	a1,120(sp)
    80014da8:	4585                	li	a1,1
        let cnt = self.arg(1) as i32;
    80014daa:	00000097          	auipc	ra,0x0
    80014dae:	400080e7          	jalr	1024(ra) # 800151aa <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    80014db2:	e82a                	sd	a0,16(sp)
    80014db4:	a009                	j	80014db6 <.LBB23_13+0x4c>
    80014db6:	65a2                	ld	a1,8(sp)
    80014db8:	6542                	ld	a0,16(sp)
    80014dba:	862a                	mv	a2,a0
    80014dbc:	e032                	sd	a2,0(sp)
    80014dbe:	deaa                	sw	a0,124(sp)

0000000080014dc0 <.LBB23_14>:
        let semOption = unsafe{SEM_MANAGER.getSemById(id)};
    80014dc0:	00055517          	auipc	a0,0x55
    80014dc4:	af050513          	addi	a0,a0,-1296 # 800698b0 <_ZN6kernel3ipc9semaphore11SEM_MANAGER17hc708ed55c8325c4cE>
    80014dc8:	00008097          	auipc	ra,0x8
    80014dcc:	f86080e7          	jalr	-122(ra) # 8001cd4e <_ZN6kernel3ipc9semaphore8SemTable10getSemById17hc45b63cab7252ea2E>
    80014dd0:	f4aa                	sd	a0,104(sp)
    80014dd2:	a009                	j	80014dd4 <.LBB23_14+0x14>
        match semOption{
            Some(sem) => {
    80014dd4:	7526                	ld	a0,104(sp)
    80014dd6:	00a035b3          	snez	a1,a0
    80014dda:	4581                	li	a1,0
    80014ddc:	00b50463          	beq	a0,a1,80014de4 <.LBB23_14+0x24>
    80014de0:	a009                	j	80014de2 <.LBB23_14+0x22>
    80014de2:	a029                	j	80014dec <.LBB23_14+0x2c>
    80014de4:	4505                	li	a0,1
                sem.sem_init(cnt);
                // println!("sys_sem_get in ipc.rs");
                Ok(0)
            }
            None => Err(())
    80014de6:	f42a                	sd	a0,40(sp)
        match semOption{
    80014de8:	a831                	j	80014e04 <.LBB23_14+0x44>
    80014dea:	0000                	unimp
            Some(sem) => {
    80014dec:	6582                	ld	a1,0(sp)
    80014dee:	7526                	ld	a0,104(sp)
    80014df0:	e12a                	sd	a0,128(sp)
                sem.sem_init(cnt);
    80014df2:	00008097          	auipc	ra,0x8
    80014df6:	8b6080e7          	jalr	-1866(ra) # 8001c6a8 <_ZN6kernel3ipc9semaphore5sem_t8sem_init17h922a2e9695ae8884E>
    80014dfa:	a009                	j	80014dfc <.LBB23_14+0x3c>
    80014dfc:	4501                	li	a0,0
                Ok(0)
    80014dfe:	f82a                	sd	a0,48(sp)
    80014e00:	f42a                	sd	a0,40(sp)
        match semOption{
    80014e02:	a009                	j	80014e04 <.LBB23_14+0x44>
        }
    }
    80014e04:	7522                	ld	a0,40(sp)
    80014e06:	75c2                	ld	a1,48(sp)
    80014e08:	60aa                	ld	ra,136(sp)
    80014e0a:	6149                	addi	sp,sp,144
    80014e0c:	8082                	ret

Disassembly of section .text.handle_syscall:

0000000080014e0e <handle_syscall>:
pub const SYSCALL_NUM:usize = 21;
pub const SHUTDOWN: usize = 8;
pub const REBOOT: usize = 9;

#[no_mangle]
pub unsafe fn handle_syscall() {
    80014e0e:	711d                	addi	sp,sp,-96
    let proc = CPU_MANAGER.myproc().unwrap();
    80014e10:	ec86                	sd	ra,88(sp)

0000000080014e12 <.LBB24_7>:
    80014e12:	0005e517          	auipc	a0,0x5e
    80014e16:	32e50513          	addi	a0,a0,814 # 80073140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    80014e1a:	ffffd097          	auipc	ra,0xffffd
    80014e1e:	fe4080e7          	jalr	-28(ra) # 80011dfe <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    80014e22:	e82a                	sd	a0,16(sp)
    80014e24:	a009                	j	80014e26 <.LBB24_7+0x14>
    80014e26:	6542                	ld	a0,16(sp)

0000000080014e28 <.LBB24_8>:
    80014e28:	00015597          	auipc	a1,0x15
    80014e2c:	b8058593          	addi	a1,a1,-1152 # 800299a8 <.L__unnamed_66>
    80014e30:	ffffa097          	auipc	ra,0xffffa
    80014e34:	f1c080e7          	jalr	-228(ra) # 8000ed4c <_ZN4core6option15Option$LT$T$GT$6unwrap17h81f0c84c54a80648E>
    80014e38:	85aa                	mv	a1,a0
    80014e3a:	e42e                	sd	a1,8(sp)
    80014e3c:	fc2a                	sd	a0,56(sp)
    80014e3e:	a009                	j	80014e40 <.LBB24_8+0x18>
    let mut syscall = Syscall{ process: proc };
    80014e40:	6522                	ld	a0,8(sp)
    80014e42:	f02a                	sd	a0,32(sp)
    80014e44:	1008                	addi	a0,sp,32
    if let Ok(res) = syscall.syscall() {
    80014e46:	00000097          	auipc	ra,0x0
    80014e4a:	116080e7          	jalr	278(ra) # 80014f5c <_ZN6kernel7syscall7Syscall7syscall17h26fb265f8f05ef9eE>
    80014e4e:	f42a                	sd	a0,40(sp)
    80014e50:	f82e                	sd	a1,48(sp)
    80014e52:	a009                	j	80014e54 <.LBB24_8+0x2c>
    80014e54:	7522                	ld	a0,40(sp)
    80014e56:	4581                	li	a1,0
    80014e58:	00b50963          	beq	a0,a1,80014e6a <.LBB24_8+0x42>
    80014e5c:	a009                	j	80014e5e <.LBB24_8+0x36>
     
        let tf = &mut *proc.trapframe;
        tf.a0 = res;
    }else{
        
        let tf = &mut *proc.trapframe;
    80014e5e:	6522                	ld	a0,8(sp)
    80014e60:	710c                	ld	a1,32(a0)
    80014e62:	e0ae                	sd	a1,64(sp)
    80014e64:	557d                	li	a0,-1
        tf.a0 = -1 as isize as usize
    80014e66:	f9a8                	sd	a0,112(a1)
    if let Ok(res) = syscall.syscall() {
    80014e68:	a801                	j	80014e78 <.LBB24_8+0x50>
    80014e6a:	65a2                	ld	a1,8(sp)
    80014e6c:	7542                	ld	a0,48(sp)
    80014e6e:	e4aa                	sd	a0,72(sp)
        let tf = &mut *proc.trapframe;
    80014e70:	718c                	ld	a1,32(a1)
    80014e72:	e8ae                	sd	a1,80(sp)
        tf.a0 = res;
    80014e74:	f9a8                	sd	a0,112(a1)
    if let Ok(res) = syscall.syscall() {
    80014e76:	a009                	j	80014e78 <.LBB24_8+0x50>
    }
    
}
    80014e78:	60e6                	ld	ra,88(sp)
    80014e7a:	6125                	addi	sp,sp,96
    80014e7c:	8082                	ret

Disassembly of section .text._ZN6kernel7syscall9SysCallID3new17h7d368cc81573c6c6E:

0000000080014e7e <_ZN6kernel7syscall9SysCallID3new17h7d368cc81573c6c6E>:

    Unknown
}

impl SysCallID {
    pub fn new(id: usize) -> Self {
    80014e7e:	1101                	addi	sp,sp,-32
    80014e80:	ec2a                	sd	a0,24(sp)
        match id {
            1 => { Self::SysFork },
    80014e82:	fff50593          	addi	a1,a0,-1
    80014e86:	e42e                	sd	a1,8(sp)
    80014e88:	02800513          	li	a0,40
    80014e8c:	00b56b63          	bltu	a0,a1,80014ea2 <.LBB25_2>
    80014e90:	6522                	ld	a0,8(sp)
    80014e92:	050e                	slli	a0,a0,0x3

0000000080014e94 <.LBB25_32>:
    80014e94:	00014597          	auipc	a1,0x14
    80014e98:	ef458593          	addi	a1,a1,-268 # 80028d88 <.LJTI25_0>
    80014e9c:	952e                	add	a0,a0,a1
    80014e9e:	6108                	ld	a0,0(a0)
    80014ea0:	8502                	jr	a0

0000000080014ea2 <.LBB25_2>:
    80014ea2:	02a00513          	li	a0,42
            26 => { Self::SysSemInit},

            40 => { Self::SysClone},
            41 => { Self::SysJoin},

            _ => { Self::Unknown }
    80014ea6:	e82a                	sd	a0,16(sp)
        match id {
    80014ea8:	a07d                	j	80014f56 <.LBB25_30+0x8>

0000000080014eaa <.LBB25_3>:
    80014eaa:	4505                	li	a0,1
            1 => { Self::SysFork },
    80014eac:	e82a                	sd	a0,16(sp)
        match id {
    80014eae:	a065                	j	80014f56 <.LBB25_30+0x8>

0000000080014eb0 <.LBB25_4>:
    80014eb0:	4509                	li	a0,2
            2 => { Self::SysExit },
    80014eb2:	e82a                	sd	a0,16(sp)
        match id {
    80014eb4:	a04d                	j	80014f56 <.LBB25_30+0x8>

0000000080014eb6 <.LBB25_5>:
    80014eb6:	450d                	li	a0,3
            3 => { Self::SysWait },
    80014eb8:	e82a                	sd	a0,16(sp)
        match id {
    80014eba:	a871                	j	80014f56 <.LBB25_30+0x8>

0000000080014ebc <.LBB25_6>:
    80014ebc:	4511                	li	a0,4
            4 => { Self::SysPipe },
    80014ebe:	e82a                	sd	a0,16(sp)
        match id {
    80014ec0:	a859                	j	80014f56 <.LBB25_30+0x8>

0000000080014ec2 <.LBB25_7>:
    80014ec2:	4515                	li	a0,5
            5 => { Self::SysRead },
    80014ec4:	e82a                	sd	a0,16(sp)
        match id {
    80014ec6:	a841                	j	80014f56 <.LBB25_30+0x8>

0000000080014ec8 <.LBB25_8>:
    80014ec8:	4519                	li	a0,6
            6 => { Self::SysKill },
    80014eca:	e82a                	sd	a0,16(sp)
        match id {
    80014ecc:	a069                	j	80014f56 <.LBB25_30+0x8>

0000000080014ece <.LBB25_9>:
    80014ece:	451d                	li	a0,7
            7 => { Self::SysExec },
    80014ed0:	e82a                	sd	a0,16(sp)
        match id {
    80014ed2:	a051                	j	80014f56 <.LBB25_30+0x8>

0000000080014ed4 <.LBB25_10>:
    80014ed4:	4521                	li	a0,8
            8 => { Self::SysFstat },
    80014ed6:	e82a                	sd	a0,16(sp)
        match id {
    80014ed8:	a8bd                	j	80014f56 <.LBB25_30+0x8>

0000000080014eda <.LBB25_11>:
    80014eda:	4525                	li	a0,9
            9 => { Self::SysChdir },
    80014edc:	e82a                	sd	a0,16(sp)
        match id {
    80014ede:	a8a5                	j	80014f56 <.LBB25_30+0x8>

0000000080014ee0 <.LBB25_12>:
    80014ee0:	4529                	li	a0,10
            10 => { Self::SysDup },
    80014ee2:	e82a                	sd	a0,16(sp)
        match id {
    80014ee4:	a88d                	j	80014f56 <.LBB25_30+0x8>

0000000080014ee6 <.LBB25_13>:
    80014ee6:	452d                	li	a0,11
            11 => { Self::SysGetPid },
    80014ee8:	e82a                	sd	a0,16(sp)
        match id {
    80014eea:	a0b5                	j	80014f56 <.LBB25_30+0x8>

0000000080014eec <.LBB25_14>:
    80014eec:	4531                	li	a0,12
            12 => { Self::SysSbrk },
    80014eee:	e82a                	sd	a0,16(sp)
        match id {
    80014ef0:	a09d                	j	80014f56 <.LBB25_30+0x8>

0000000080014ef2 <.LBB25_15>:
    80014ef2:	4535                	li	a0,13
            13 => { Self::SysSleep },
    80014ef4:	e82a                	sd	a0,16(sp)
        match id {
    80014ef6:	a085                	j	80014f56 <.LBB25_30+0x8>

0000000080014ef8 <.LBB25_16>:
    80014ef8:	4539                	li	a0,14
            14 => { Self::SysUptime },
    80014efa:	e82a                	sd	a0,16(sp)
        match id {
    80014efc:	a8a9                	j	80014f56 <.LBB25_30+0x8>

0000000080014efe <.LBB25_17>:
    80014efe:	453d                	li	a0,15
            15 => { Self::SysOpen },
    80014f00:	e82a                	sd	a0,16(sp)
        match id {
    80014f02:	a891                	j	80014f56 <.LBB25_30+0x8>

0000000080014f04 <.LBB25_18>:
    80014f04:	4541                	li	a0,16
            16 => { Self::SysWrite },
    80014f06:	e82a                	sd	a0,16(sp)
        match id {
    80014f08:	a0b9                	j	80014f56 <.LBB25_30+0x8>

0000000080014f0a <.LBB25_19>:
    80014f0a:	4545                	li	a0,17
            17 => { Self::SysMknod },
    80014f0c:	e82a                	sd	a0,16(sp)
        match id {
    80014f0e:	a0a1                	j	80014f56 <.LBB25_30+0x8>

0000000080014f10 <.LBB25_20>:
    80014f10:	4549                	li	a0,18
            18 => { Self::SysUnlink },
    80014f12:	e82a                	sd	a0,16(sp)
        match id {
    80014f14:	a089                	j	80014f56 <.LBB25_30+0x8>

0000000080014f16 <.LBB25_21>:
    80014f16:	454d                	li	a0,19
            19 => { Self::SysLink },
    80014f18:	e82a                	sd	a0,16(sp)
        match id {
    80014f1a:	a835                	j	80014f56 <.LBB25_30+0x8>

0000000080014f1c <.LBB25_22>:
    80014f1c:	4551                	li	a0,20
            20 => { Self::SysMkdir },
    80014f1e:	e82a                	sd	a0,16(sp)
        match id {
    80014f20:	a81d                	j	80014f56 <.LBB25_30+0x8>

0000000080014f22 <.LBB25_23>:
    80014f22:	4555                	li	a0,21
            21 => { Self::SysClose },
    80014f24:	e82a                	sd	a0,16(sp)
        match id {
    80014f26:	a805                	j	80014f56 <.LBB25_30+0x8>

0000000080014f28 <.LBB25_24>:
    80014f28:	4559                	li	a0,22
            22 => { Self::SysSemGet},
    80014f2a:	e82a                	sd	a0,16(sp)
        match id {
    80014f2c:	a02d                	j	80014f56 <.LBB25_30+0x8>

0000000080014f2e <.LBB25_25>:
    80014f2e:	455d                	li	a0,23
            23 => { Self::SysSemPut},
    80014f30:	e82a                	sd	a0,16(sp)
        match id {
    80014f32:	a015                	j	80014f56 <.LBB25_30+0x8>

0000000080014f34 <.LBB25_26>:
    80014f34:	4561                	li	a0,24
            24 => { Self::SysSemUp},
    80014f36:	e82a                	sd	a0,16(sp)
        match id {
    80014f38:	a839                	j	80014f56 <.LBB25_30+0x8>

0000000080014f3a <.LBB25_27>:
    80014f3a:	4565                	li	a0,25
            25 => { Self::SysSemDown},
    80014f3c:	e82a                	sd	a0,16(sp)
        match id {
    80014f3e:	a821                	j	80014f56 <.LBB25_30+0x8>

0000000080014f40 <.LBB25_28>:
    80014f40:	4569                	li	a0,26
            26 => { Self::SysSemInit},
    80014f42:	e82a                	sd	a0,16(sp)
        match id {
    80014f44:	a809                	j	80014f56 <.LBB25_30+0x8>

0000000080014f46 <.LBB25_29>:
    80014f46:	02800513          	li	a0,40
            40 => { Self::SysClone},
    80014f4a:	e82a                	sd	a0,16(sp)
        match id {
    80014f4c:	a029                	j	80014f56 <.LBB25_30+0x8>

0000000080014f4e <.LBB25_30>:
    80014f4e:	02900513          	li	a0,41
            41 => { Self::SysJoin},
    80014f52:	e82a                	sd	a0,16(sp)
        match id {
    80014f54:	a009                	j	80014f56 <.LBB25_30+0x8>
        }
    }
    80014f56:	6542                	ld	a0,16(sp)
    80014f58:	6105                	addi	sp,sp,32
    80014f5a:	8082                	ret

Disassembly of section .text._ZN6kernel7syscall7Syscall7syscall17h26fb265f8f05ef9eE:

0000000080014f5c <_ZN6kernel7syscall7Syscall7syscall17h26fb265f8f05ef9eE>:
pub struct Syscall<'a>{
    process: &'a mut task_struct
}

impl Syscall<'_> {
    pub fn syscall(&mut self) -> SysResult {
    80014f5c:	7131                	addi	sp,sp,-192
    80014f5e:	fd06                	sd	ra,184(sp)
    80014f60:	f42a                	sd	a0,40(sp)
    80014f62:	ed2a                	sd	a0,152(sp)

0000000080014f64 <.LBB26_34>:
        let task = unsafe { CPU_MANAGER.myproc().unwrap() };
    80014f64:	0005e517          	auipc	a0,0x5e
    80014f68:	1dc50513          	addi	a0,a0,476 # 80073140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    80014f6c:	ffffd097          	auipc	ra,0xffffd
    80014f70:	e92080e7          	jalr	-366(ra) # 80011dfe <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    80014f74:	f82a                	sd	a0,48(sp)
    80014f76:	a009                	j	80014f78 <.LBB26_34+0x14>
    80014f78:	7542                	ld	a0,48(sp)

0000000080014f7a <.LBB26_35>:
    80014f7a:	00015597          	auipc	a1,0x15
    80014f7e:	a4658593          	addi	a1,a1,-1466 # 800299c0 <.L__unnamed_67>
    80014f82:	ffffa097          	auipc	ra,0xffffa
    80014f86:	dca080e7          	jalr	-566(ra) # 8000ed4c <_ZN4core6option15Option$LT$T$GT$6unwrap17h81f0c84c54a80648E>
    80014f8a:	f02a                	sd	a0,32(sp)
    80014f8c:	a009                	j	80014f8e <.LBB26_35+0x14>
    80014f8e:	7502                	ld	a0,32(sp)
    80014f90:	f12a                	sd	a0,160(sp)
        // 获取进程的trapframe
        let tf = unsafe{ &mut *task.trapframe };
    80014f92:	7108                	ld	a0,32(a0)
    80014f94:	f52a                	sd	a0,168(sp)
        // 获取系统调用 id 号
        let sys_id = SysCallID::new(tf.a7);
    80014f96:	7548                	ld	a0,168(a0)
    80014f98:	00000097          	auipc	ra,0x0
    80014f9c:	ee6080e7          	jalr	-282(ra) # 80014e7e <_ZN6kernel7syscall9SysCallID3new17h7d368cc81573c6c6E>
    80014fa0:	e4aa                	sd	a0,72(sp)
    80014fa2:	a009                	j	80014fa4 <.LBB26_35+0x2a>
        
        match sys_id {
            SysCallID::SysFork => { self.sys_fork() },
    80014fa4:	6526                	ld	a0,72(sp)
    80014fa6:	fff50593          	addi	a1,a0,-1
    80014faa:	ec2e                	sd	a1,24(sp)
    80014fac:	02800513          	li	a0,40
    80014fb0:	00b56b63          	bltu	a0,a1,80014fc6 <.LBB26_5>
    80014fb4:	6562                	ld	a0,24(sp)
    80014fb6:	050e                	slli	a0,a0,0x3

0000000080014fb8 <.LBB26_36>:
    80014fb8:	00014597          	auipc	a1,0x14
    80014fbc:	f1858593          	addi	a1,a1,-232 # 80028ed0 <.LJTI26_0>
    80014fc0:	952e                	add	a0,a0,a1
    80014fc2:	6108                	ld	a0,0(a0)
    80014fc4:	8502                	jr	a0

0000000080014fc6 <.LBB26_5>:
    80014fc6:	00a8                	addi	a0,sp,72
            SysCallID::SysSemInit => { self.sys_sem_init() },

            SysCallID::SysClone   => { self.sys_clone() },
            SysCallID::SysJoin    => { self.sys_join() },
            
            _ => { panic!("Invalid syscall id: {:?}", sys_id) }
    80014fc8:	e92a                	sd	a0,144(sp)
    80014fca:	f92a                	sd	a0,176(sp)

0000000080014fcc <.LBB26_37>:
    80014fcc:	00000597          	auipc	a1,0x0
    80014fd0:	56458593          	addi	a1,a1,1380 # 80015530 <_ZN63_$LT$kernel..syscall..SysCallID$u20$as$u20$core..fmt..Debug$GT$3fmt17h626128a725ed00c9E>
    80014fd4:	00009097          	auipc	ra,0x9
    80014fd8:	604080e7          	jalr	1540(ra) # 8001e5d8 <_ZN4core3fmt10ArgumentV13new17h44143960ef808aafE>
    80014fdc:	e42a                	sd	a0,8(sp)
    80014fde:	e82e                	sd	a1,16(sp)
    80014fe0:	a269                	j	8001516a <.LBB26_30+0x10>

0000000080014fe2 <.LBB26_6>:
            SysCallID::SysFork => { self.sys_fork() },
    80014fe2:	7522                	ld	a0,40(sp)
    80014fe4:	ffffd097          	auipc	ra,0xffffd
    80014fe8:	59c080e7          	jalr	1436(ra) # 80012580 <_ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_fork17h5c4cdf045541cf30E>
    80014fec:	fc2a                	sd	a0,56(sp)
    80014fee:	e0ae                	sd	a1,64(sp)
    80014ff0:	aa45                	j	800151a0 <.LBB26_39+0x14>

0000000080014ff2 <.LBB26_7>:
            SysCallID::SysExit => { self.sys_exit() },
    80014ff2:	7522                	ld	a0,40(sp)
    80014ff4:	ffffd097          	auipc	ra,0xffffd
    80014ff8:	658080e7          	jalr	1624(ra) # 8001264c <_ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_exit17hae1a7a01ef6f0180E>
    80014ffc:	fc2a                	sd	a0,56(sp)
    80014ffe:	e0ae                	sd	a1,64(sp)
    80015000:	a245                	j	800151a0 <.LBB26_39+0x14>

0000000080015002 <.LBB26_8>:
            SysCallID::SysWait => { self.sys_wait() },
    80015002:	7522                	ld	a0,40(sp)
    80015004:	ffffd097          	auipc	ra,0xffffd
    80015008:	674080e7          	jalr	1652(ra) # 80012678 <_ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_wait17h7b4815682cca4a8dE>
    8001500c:	fc2a                	sd	a0,56(sp)
    8001500e:	e0ae                	sd	a1,64(sp)
    80015010:	aa41                	j	800151a0 <.LBB26_39+0x14>

0000000080015012 <.LBB26_9>:
            SysCallID::SysRead => { self.sys_read() },
    80015012:	7522                	ld	a0,40(sp)
    80015014:	ffffe097          	auipc	ra,0xffffe
    80015018:	908080e7          	jalr	-1784(ra) # 8001291c <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_read17hd83bd4f92523a35cE>
    8001501c:	fc2a                	sd	a0,56(sp)
    8001501e:	e0ae                	sd	a1,64(sp)
    80015020:	a241                	j	800151a0 <.LBB26_39+0x14>

0000000080015022 <.LBB26_10>:
            SysCallID::SysWrite => { self.sys_write() },
    80015022:	7522                	ld	a0,40(sp)
    80015024:	ffffe097          	auipc	ra,0xffffe
    80015028:	a5a080e7          	jalr	-1446(ra) # 80012a7e <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$9sys_write17hc5a72fe3cb6d9324E>
    8001502c:	fc2a                	sd	a0,56(sp)
    8001502e:	e0ae                	sd	a1,64(sp)
    80015030:	aa85                	j	800151a0 <.LBB26_39+0x14>

0000000080015032 <.LBB26_11>:
            SysCallID::SysOpen => { self.sys_open() },
    80015032:	7522                	ld	a0,40(sp)
    80015034:	ffffe097          	auipc	ra,0xffffe
    80015038:	bac080e7          	jalr	-1108(ra) # 80012be0 <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_open17h5b5b1f6af7439fbcE>
    8001503c:	fc2a                	sd	a0,56(sp)
    8001503e:	e0ae                	sd	a1,64(sp)
    80015040:	a285                	j	800151a0 <.LBB26_39+0x14>

0000000080015042 <.LBB26_12>:
            SysCallID::SysExec => { self.sys_exec() },
    80015042:	7522                	ld	a0,40(sp)
    80015044:	ffffe097          	auipc	ra,0xffffe
    80015048:	0ec080e7          	jalr	236(ra) # 80013130 <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_exec17h5f20106c7a7bbe80E>
    8001504c:	fc2a                	sd	a0,56(sp)
    8001504e:	e0ae                	sd	a1,64(sp)
    80015050:	aa81                	j	800151a0 <.LBB26_39+0x14>

0000000080015052 <.LBB26_13>:
            SysCallID::SysMknod => { self.sys_mknod() },
    80015052:	7522                	ld	a0,40(sp)
    80015054:	ffffe097          	auipc	ra,0xffffe
    80015058:	60c080e7          	jalr	1548(ra) # 80013660 <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$9sys_mknod17h6bbc97745668998fE>
    8001505c:	fc2a                	sd	a0,56(sp)
    8001505e:	e0ae                	sd	a1,64(sp)
    80015060:	a281                	j	800151a0 <.LBB26_39+0x14>

0000000080015062 <.LBB26_14>:
            SysCallID::SysClose => { self.sys_close() },
    80015062:	7522                	ld	a0,40(sp)
    80015064:	ffffe097          	auipc	ra,0xffffe
    80015068:	794080e7          	jalr	1940(ra) # 800137f8 <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$9sys_close17haaef41d651f2f6f7E>
    8001506c:	fc2a                	sd	a0,56(sp)
    8001506e:	e0ae                	sd	a1,64(sp)
    80015070:	aa05                	j	800151a0 <.LBB26_39+0x14>

0000000080015072 <.LBB26_15>:
            SysCallID::SysDup => { self.sys_dup() },
    80015072:	7522                	ld	a0,40(sp)
    80015074:	ffffd097          	auipc	ra,0xffffd
    80015078:	768080e7          	jalr	1896(ra) # 800127dc <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$7sys_dup17h638e7e7819355743E>
    8001507c:	fc2a                	sd	a0,56(sp)
    8001507e:	e0ae                	sd	a1,64(sp)
    80015080:	a205                	j	800151a0 <.LBB26_39+0x14>

0000000080015082 <.LBB26_16>:
    80015082:	4501                	li	a0,0
            SysCallID::SysUptime => { Ok(0) },
    80015084:	e0aa                	sd	a0,64(sp)
    80015086:	fc2a                	sd	a0,56(sp)
        match sys_id {
    80015088:	aa21                	j	800151a0 <.LBB26_39+0x14>

000000008001508a <.LBB26_17>:
            SysCallID::SysSbrk => { self.sys_sbrk() },
    8001508a:	7522                	ld	a0,40(sp)
    8001508c:	ffffd097          	auipc	ra,0xffffd
    80015090:	6a0080e7          	jalr	1696(ra) # 8001272c <_ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_sbrk17h620cfc1119b978cdE>
    80015094:	fc2a                	sd	a0,56(sp)
    80015096:	e0ae                	sd	a1,64(sp)
    80015098:	a221                	j	800151a0 <.LBB26_39+0x14>

000000008001509a <.LBB26_18>:
            SysCallID::SysFstat => { self.sys_fstat() },
    8001509a:	7522                	ld	a0,40(sp)
    8001509c:	ffffe097          	auipc	ra,0xffffe
    800150a0:	7f8080e7          	jalr	2040(ra) # 80013894 <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$9sys_fstat17h0c7ad2f655d0446dE>
    800150a4:	fc2a                	sd	a0,56(sp)
    800150a6:	e0ae                	sd	a1,64(sp)
    800150a8:	a8e5                	j	800151a0 <.LBB26_39+0x14>

00000000800150aa <.LBB26_19>:
            SysCallID::SysChdir => { self.sys_chdir()},
    800150aa:	7522                	ld	a0,40(sp)
    800150ac:	fffff097          	auipc	ra,0xfffff
    800150b0:	934080e7          	jalr	-1740(ra) # 800139e0 <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$9sys_chdir17he6ad16137b6ff3daE>
    800150b4:	fc2a                	sd	a0,56(sp)
    800150b6:	e0ae                	sd	a1,64(sp)
    800150b8:	a0e5                	j	800151a0 <.LBB26_39+0x14>

00000000800150ba <.LBB26_20>:
            SysCallID::SysPipe => { self.sys_pipe() },
    800150ba:	7522                	ld	a0,40(sp)
    800150bc:	fffff097          	auipc	ra,0xfffff
    800150c0:	b14080e7          	jalr	-1260(ra) # 80013bd0 <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_pipe17h8968716548f34df6E>
    800150c4:	fc2a                	sd	a0,56(sp)
    800150c6:	e0ae                	sd	a1,64(sp)
    800150c8:	a8e1                	j	800151a0 <.LBB26_39+0x14>

00000000800150ca <.LBB26_21>:
            SysCallID::SysUnlink => { self.sys_unlink() },
    800150ca:	7522                	ld	a0,40(sp)
    800150cc:	fffff097          	auipc	ra,0xfffff
    800150d0:	f12080e7          	jalr	-238(ra) # 80013fde <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$10sys_unlink17h041fe6edd5a3dcecE>
    800150d4:	fc2a                	sd	a0,56(sp)
    800150d6:	e0ae                	sd	a1,64(sp)
    800150d8:	a0e1                	j	800151a0 <.LBB26_39+0x14>

00000000800150da <.LBB26_22>:
            SysCallID::SysLink => { self.sys_link() },
    800150da:	7522                	ld	a0,40(sp)
    800150dc:	fffff097          	auipc	ra,0xfffff
    800150e0:	3e6080e7          	jalr	998(ra) # 800144c2 <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_link17ha9dece5abe92404dE>
    800150e4:	fc2a                	sd	a0,56(sp)
    800150e6:	e0ae                	sd	a1,64(sp)
    800150e8:	a865                	j	800151a0 <.LBB26_39+0x14>

00000000800150ea <.LBB26_23>:
            SysCallID::SysMkdir => { self.sys_mkdir() },
    800150ea:	7522                	ld	a0,40(sp)
    800150ec:	00000097          	auipc	ra,0x0
    800150f0:	8b4080e7          	jalr	-1868(ra) # 800149a0 <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$9sys_mkdir17h9fc2155a1c553da1E>
    800150f4:	fc2a                	sd	a0,56(sp)
    800150f6:	e0ae                	sd	a1,64(sp)
    800150f8:	a065                	j	800151a0 <.LBB26_39+0x14>

00000000800150fa <.LBB26_24>:
            SysCallID::SysSemGet => { self.sys_sem_get() },
    800150fa:	7522                	ld	a0,40(sp)
    800150fc:	00000097          	auipc	ra,0x0
    80015100:	9fe080e7          	jalr	-1538(ra) # 80014afa <_ZN6kernel7syscall3ipc42_$LT$impl$u20$kernel..syscall..Syscall$GT$11sys_sem_get17hb3397bd9d36c7bd4E>
    80015104:	fc2a                	sd	a0,56(sp)
    80015106:	e0ae                	sd	a1,64(sp)
    80015108:	a861                	j	800151a0 <.LBB26_39+0x14>

000000008001510a <.LBB26_25>:
            SysCallID::SysSemPut => { self.sys_sem_put() },
    8001510a:	7522                	ld	a0,40(sp)
    8001510c:	00000097          	auipc	ra,0x0
    80015110:	aa0080e7          	jalr	-1376(ra) # 80014bac <_ZN6kernel7syscall3ipc42_$LT$impl$u20$kernel..syscall..Syscall$GT$11sys_sem_put17h3b21147033dd4825E>
    80015114:	fc2a                	sd	a0,56(sp)
    80015116:	e0ae                	sd	a1,64(sp)
    80015118:	a061                	j	800151a0 <.LBB26_39+0x14>

000000008001511a <.LBB26_26>:
            SysCallID::SysSemUp => { self.sys_sem_up() },
    8001511a:	7522                	ld	a0,40(sp)
    8001511c:	00000097          	auipc	ra,0x0
    80015120:	b16080e7          	jalr	-1258(ra) # 80014c32 <_ZN6kernel7syscall3ipc42_$LT$impl$u20$kernel..syscall..Syscall$GT$10sys_sem_up17h66299e2e1eef50b0E>
    80015124:	fc2a                	sd	a0,56(sp)
    80015126:	e0ae                	sd	a1,64(sp)
    80015128:	a8a5                	j	800151a0 <.LBB26_39+0x14>

000000008001512a <.LBB26_27>:
            SysCallID::SysSemDown => { self.sys_sem_down() },
    8001512a:	7522                	ld	a0,40(sp)
    8001512c:	00000097          	auipc	ra,0x0
    80015130:	b9a080e7          	jalr	-1126(ra) # 80014cc6 <_ZN6kernel7syscall3ipc42_$LT$impl$u20$kernel..syscall..Syscall$GT$12sys_sem_down17hf3708c0cac81b44dE>
    80015134:	fc2a                	sd	a0,56(sp)
    80015136:	e0ae                	sd	a1,64(sp)
    80015138:	a0a5                	j	800151a0 <.LBB26_39+0x14>

000000008001513a <.LBB26_28>:
            SysCallID::SysSemInit => { self.sys_sem_init() },
    8001513a:	7522                	ld	a0,40(sp)
    8001513c:	00000097          	auipc	ra,0x0
    80015140:	c1e080e7          	jalr	-994(ra) # 80014d5a <_ZN6kernel7syscall3ipc42_$LT$impl$u20$kernel..syscall..Syscall$GT$12sys_sem_init17h9d42fffbf875ebeaE>
    80015144:	fc2a                	sd	a0,56(sp)
    80015146:	e0ae                	sd	a1,64(sp)
    80015148:	a8a1                	j	800151a0 <.LBB26_39+0x14>

000000008001514a <.LBB26_29>:
            SysCallID::SysClone   => { self.sys_clone() },
    8001514a:	7522                	ld	a0,40(sp)
    8001514c:	ffffd097          	auipc	ra,0xffffd
    80015150:	4ac080e7          	jalr	1196(ra) # 800125f8 <_ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$9sys_clone17h33021d255812765cE>
    80015154:	fc2a                	sd	a0,56(sp)
    80015156:	e0ae                	sd	a1,64(sp)
    80015158:	a0a1                	j	800151a0 <.LBB26_39+0x14>

000000008001515a <.LBB26_30>:
            SysCallID::SysJoin    => { self.sys_join() },
    8001515a:	7522                	ld	a0,40(sp)
    8001515c:	ffffd097          	auipc	ra,0xffffd
    80015160:	576080e7          	jalr	1398(ra) # 800126d2 <_ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_join17hcdda9ca2f2e537bbE>
    80015164:	fc2a                	sd	a0,56(sp)
    80015166:	e0ae                	sd	a1,64(sp)
    80015168:	a825                	j	800151a0 <.LBB26_39+0x14>
            _ => { panic!("Invalid syscall id: {:?}", sys_id) }
    8001516a:	6542                	ld	a0,16(sp)
    8001516c:	65a2                	ld	a1,8(sp)
    8001516e:	e12e                	sd	a1,128(sp)
    80015170:	e52a                	sd	a0,136(sp)

0000000080015172 <.LBB26_38>:
    80015172:	00015597          	auipc	a1,0x15
    80015176:	87e58593          	addi	a1,a1,-1922 # 800299f0 <.L__unnamed_68>
    8001517a:	0888                	addi	a0,sp,80
    8001517c:	0114                	addi	a3,sp,128
    8001517e:	4705                	li	a4,1
    80015180:	863a                	mv	a2,a4
    80015182:	ffff0097          	auipc	ra,0xffff0
    80015186:	2e8080e7          	jalr	744(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8001518a:	a009                	j	8001518c <.LBB26_39>

000000008001518c <.LBB26_39>:
    8001518c:	00015597          	auipc	a1,0x15
    80015190:	87458593          	addi	a1,a1,-1932 # 80029a00 <.L__unnamed_69>
    80015194:	0888                	addi	a0,sp,80
    80015196:	0000d097          	auipc	ra,0xd
    8001519a:	14c080e7          	jalr	332(ra) # 800222e2 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
    8001519e:	0000                	unimp
        }
    }
    800151a0:	7562                	ld	a0,56(sp)
    800151a2:	6586                	ld	a1,64(sp)
    800151a4:	70ea                	ld	ra,184(sp)
    800151a6:	6129                	addi	sp,sp,192
    800151a8:	8082                	ret

Disassembly of section .text._ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E:

00000000800151aa <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>:

    /// 获取第n个位置的参数
    pub fn arg(&self, id: usize) -> usize {
    800151aa:	711d                	addi	sp,sp,-96
    800151ac:	ec86                	sd	ra,88(sp)
    800151ae:	f02e                	sd	a1,32(sp)
    800151b0:	fc2a                	sd	a0,56(sp)
    800151b2:	e0ae                	sd	a1,64(sp)

00000000800151b4 <.LBB27_12>:
        let task = unsafe { CPU_MANAGER.myproc().unwrap() };
    800151b4:	0005e517          	auipc	a0,0x5e
    800151b8:	f8c50513          	addi	a0,a0,-116 # 80073140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    800151bc:	ffffd097          	auipc	ra,0xffffd
    800151c0:	c42080e7          	jalr	-958(ra) # 80011dfe <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    800151c4:	f42a                	sd	a0,40(sp)
    800151c6:	a009                	j	800151c8 <.LBB27_12+0x14>
    800151c8:	7522                	ld	a0,40(sp)

00000000800151ca <.LBB27_13>:
    800151ca:	00015597          	auipc	a1,0x15
    800151ce:	84e58593          	addi	a1,a1,-1970 # 80029a18 <.L__unnamed_70>
    800151d2:	ffffa097          	auipc	ra,0xffffa
    800151d6:	b7a080e7          	jalr	-1158(ra) # 8000ed4c <_ZN4core6option15Option$LT$T$GT$6unwrap17h81f0c84c54a80648E>
    800151da:	ec2a                	sd	a0,24(sp)
    800151dc:	a009                	j	800151de <.LBB27_13+0x14>
    800151de:	7582                	ld	a1,32(sp)
    800151e0:	6562                	ld	a0,24(sp)
    800151e2:	e4aa                	sd	a0,72(sp)
        let tf = unsafe{ &*task.trapframe };
    800151e4:	7108                	ld	a0,32(a0)
    800151e6:	e42a                	sd	a0,8(sp)
    800151e8:	e8aa                	sd	a0,80(sp)
        match id {
            0 => tf.a0,
    800151ea:	852e                	mv	a0,a1
    800151ec:	e82a                	sd	a0,16(sp)
    800151ee:	4515                	li	a0,5
    800151f0:	00b56b63          	bltu	a0,a1,80015206 <.LBB27_15>
    800151f4:	6542                	ld	a0,16(sp)
    800151f6:	050e                	slli	a0,a0,0x3

00000000800151f8 <.LBB27_14>:
    800151f8:	00014597          	auipc	a1,0x14
    800151fc:	e2058593          	addi	a1,a1,-480 # 80029018 <.LJTI27_0>
    80015200:	952e                	add	a0,a0,a1
    80015202:	6108                	ld	a0,0(a0)
    80015204:	8502                	jr	a0

0000000080015206 <.LBB27_15>:
            1 => tf.a1,
            2 => tf.a2,
            3 => tf.a3,
            4 => tf.a4,
            5 => tf.a5,
            _ => panic!("不能获取参数")
    80015206:	00015517          	auipc	a0,0x15
    8001520a:	82a50513          	addi	a0,a0,-2006 # 80029a30 <.L__unnamed_71>

000000008001520e <.LBB27_16>:
    8001520e:	00015617          	auipc	a2,0x15
    80015212:	83a60613          	addi	a2,a2,-1990 # 80029a48 <.L__unnamed_72>
    80015216:	45c9                	li	a1,18
    80015218:	0000d097          	auipc	ra,0xd
    8001521c:	05e080e7          	jalr	94(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080015222 <.LBB27_5>:
            0 => tf.a0,
    80015222:	6522                	ld	a0,8(sp)
    80015224:	7928                	ld	a0,112(a0)
    80015226:	f82a                	sd	a0,48(sp)
        match id {
    80015228:	a02d                	j	80015252 <.LBB27_10+0x8>

000000008001522a <.LBB27_6>:
            1 => tf.a1,
    8001522a:	6522                	ld	a0,8(sp)
    8001522c:	7d28                	ld	a0,120(a0)
    8001522e:	f82a                	sd	a0,48(sp)
        match id {
    80015230:	a00d                	j	80015252 <.LBB27_10+0x8>

0000000080015232 <.LBB27_7>:
            2 => tf.a2,
    80015232:	6522                	ld	a0,8(sp)
    80015234:	6148                	ld	a0,128(a0)
    80015236:	f82a                	sd	a0,48(sp)
        match id {
    80015238:	a829                	j	80015252 <.LBB27_10+0x8>

000000008001523a <.LBB27_8>:
            3 => tf.a3,
    8001523a:	6522                	ld	a0,8(sp)
    8001523c:	6548                	ld	a0,136(a0)
    8001523e:	f82a                	sd	a0,48(sp)
        match id {
    80015240:	a809                	j	80015252 <.LBB27_10+0x8>

0000000080015242 <.LBB27_9>:
            4 => tf.a4,
    80015242:	6522                	ld	a0,8(sp)
    80015244:	6948                	ld	a0,144(a0)
    80015246:	f82a                	sd	a0,48(sp)
        match id {
    80015248:	a029                	j	80015252 <.LBB27_10+0x8>

000000008001524a <.LBB27_10>:
            5 => tf.a5,
    8001524a:	6522                	ld	a0,8(sp)
    8001524c:	6d48                	ld	a0,152(a0)
    8001524e:	f82a                	sd	a0,48(sp)
        match id {
    80015250:	a009                	j	80015252 <.LBB27_10+0x8>
        }
    }
    80015252:	7542                	ld	a0,48(sp)
    80015254:	60e6                	ld	ra,88(sp)
    80015256:	6125                	addi	sp,sp,96
    80015258:	8082                	ret

Disassembly of section .text._ZN6kernel7syscall7Syscall13copy_from_str17h5c83be6e0d4b822aE:

000000008001525a <_ZN6kernel7syscall7Syscall13copy_from_str17h5c83be6e0d4b822aE>:

    /// 通过地址获取str并将其填入到缓冲区中
    pub fn copy_from_str(&self, addr: usize, buf: &mut [u8], max_len: usize) -> Result<(), ()> {
    8001525a:	7155                	addi	sp,sp,-208
    8001525c:	e586                	sd	ra,200(sp)
    8001525e:	f03a                	sd	a4,32(sp)
    80015260:	f436                	sd	a3,40(sp)
    80015262:	f832                	sd	a2,48(sp)
    80015264:	fc2e                	sd	a1,56(sp)
    80015266:	e92a                	sd	a0,144(sp)
    80015268:	ed2e                	sd	a1,152(sp)
    8001526a:	f132                	sd	a2,160(sp)
    8001526c:	f536                	sd	a3,168(sp)
    8001526e:	f93a                	sd	a4,176(sp)

0000000080015270 <.LBB28_11>:
        let task = unsafe { CPU_MANAGER.myproc().unwrap() };
    80015270:	0005e517          	auipc	a0,0x5e
    80015274:	ed050513          	addi	a0,a0,-304 # 80073140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    80015278:	ffffd097          	auipc	ra,0xffffd
    8001527c:	b86080e7          	jalr	-1146(ra) # 80011dfe <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    80015280:	e0aa                	sd	a0,64(sp)
    80015282:	a009                	j	80015284 <.LBB28_11+0x14>
    80015284:	6506                	ld	a0,64(sp)

0000000080015286 <.LBB28_12>:
    80015286:	00014597          	auipc	a1,0x14
    8001528a:	7da58593          	addi	a1,a1,2010 # 80029a60 <.L__unnamed_73>
    8001528e:	ffffa097          	auipc	ra,0xffffa
    80015292:	abe080e7          	jalr	-1346(ra) # 8000ed4c <_ZN4core6option15Option$LT$T$GT$6unwrap17h81f0c84c54a80648E>
    80015296:	ec2a                	sd	a0,24(sp)
    80015298:	a009                	j	8001529a <.LBB28_12+0x14>
    8001529a:	75a2                	ld	a1,40(sp)
    8001529c:	7542                	ld	a0,48(sp)
    8001529e:	6662                	ld	a2,24(sp)
    800152a0:	fd32                	sd	a2,184(sp)
        let pgt = unsafe { &mut *task.pagetable };
    800152a2:	6e10                	ld	a2,24(a2)
    800152a4:	e432                	sd	a2,8(sp)
    800152a6:	e1b2                	sd	a2,192(sp)
        if pgt.copy_in_str(buf.as_mut_ptr(), addr, max_len).is_err() {
    800152a8:	0000a097          	auipc	ra,0xa
    800152ac:	2e6080e7          	jalr	742(ra) # 8001f58e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h69a6648c691317bcE>
    800152b0:	e82a                	sd	a0,16(sp)
    800152b2:	a009                	j	800152b4 <.LBB28_12+0x2e>
    800152b4:	7682                	ld	a3,32(sp)
    800152b6:	7662                	ld	a2,56(sp)
    800152b8:	65c2                	ld	a1,16(sp)
    800152ba:	6522                	ld	a0,8(sp)
    800152bc:	00003097          	auipc	ra,0x3
    800152c0:	d7a080e7          	jalr	-646(ra) # 80018036 <_ZN6kernel6memory7mapping10page_table9PageTable11copy_in_str17hce5a6c8720f87e9cE>
    800152c4:	e8aa                	sd	a0,80(sp)
    800152c6:	ecae                	sd	a1,88(sp)
    800152c8:	a009                	j	800152ca <.LBB28_12+0x44>
    800152ca:	0888                	addi	a0,sp,80
    800152cc:	ffff8097          	auipc	ra,0xffff8
    800152d0:	a92080e7          	jalr	-1390(ra) # 8000cd5e <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h304118d236359d80E>
    800152d4:	e02a                	sd	a0,0(sp)
    800152d6:	a009                	j	800152d8 <.LBB28_12+0x52>
    800152d8:	6502                	ld	a0,0(sp)
    800152da:	4581                	li	a1,0
    800152dc:	02b50363          	beq	a0,a1,80015302 <.LBB28_14+0x18>
    800152e0:	a009                	j	800152e2 <.LBB28_13>

00000000800152e2 <.LBB28_13>:
            println!("Fail to copy in str");
    800152e2:	00014597          	auipc	a1,0x14
    800152e6:	7ae58593          	addi	a1,a1,1966 # 80029a90 <.L__unnamed_74>

00000000800152ea <.LBB28_14>:
    800152ea:	00014697          	auipc	a3,0x14
    800152ee:	5d668693          	addi	a3,a3,1494 # 800298c0 <.L__unnamed_124>
    800152f2:	1088                	addi	a0,sp,96
    800152f4:	4605                	li	a2,1
    800152f6:	4701                	li	a4,0
    800152f8:	ffff0097          	auipc	ra,0xffff0
    800152fc:	172080e7          	jalr	370(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80015300:	a029                	j	8001530a <.LBB28_14+0x20>
    80015302:	4501                	li	a0,0
            return Err(())
        }
        Ok(())
    80015304:	04a107a3          	sb	a0,79(sp)
    }
    80015308:	a819                	j	8001531e <.LBB28_14+0x34>
    8001530a:	1088                	addi	a0,sp,96
            println!("Fail to copy in str");
    8001530c:	00009097          	auipc	ra,0x9
    80015310:	a40080e7          	jalr	-1472(ra) # 8001dd4c <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    80015314:	a009                	j	80015316 <.LBB28_14+0x2c>
    80015316:	4505                	li	a0,1
            return Err(())
    80015318:	04a107a3          	sb	a0,79(sp)
    }
    8001531c:	a009                	j	8001531e <.LBB28_14+0x34>
    8001531e:	04f14503          	lbu	a0,79(sp)
    80015322:	60ae                	ld	ra,200(sp)
    80015324:	6169                	addi	sp,sp,208
    80015326:	8082                	ret

Disassembly of section .text._ZN6kernel7syscall7Syscall14copy_form_addr17h37cb4654fc973487E:

0000000080015328 <_ZN6kernel7syscall7Syscall14copy_form_addr17h37cb4654fc973487E>:

    pub fn copy_form_addr(&self, addr: usize, buf: &mut [u8], len: usize) -> Result<(), ()> {
    80015328:	7125                	addi	sp,sp,-416
    8001532a:	ef06                	sd	ra,408(sp)
    8001532c:	ecba                	sd	a4,88(sp)
    8001532e:	f0b6                	sd	a3,96(sp)
    80015330:	f4b2                	sd	a2,104(sp)
    80015332:	fcae                	sd	a1,120(sp)
    80015334:	eeaa                	sd	a0,344(sp)
    80015336:	f2b2                	sd	a2,352(sp)
    80015338:	f6b6                	sd	a3,360(sp)
    8001533a:	faba                	sd	a4,368(sp)

000000008001533c <.LBB29_26>:
        let task = unsafe { CPU_MANAGER.myproc().unwrap() };
    8001533c:	0005e517          	auipc	a0,0x5e
    80015340:	e0450513          	addi	a0,a0,-508 # 80073140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    80015344:	ffffd097          	auipc	ra,0xffffd
    80015348:	aba080e7          	jalr	-1350(ra) # 80011dfe <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    8001534c:	f8aa                	sd	a0,112(sp)
    8001534e:	a009                	j	80015350 <.LBB29_26+0x14>
    80015350:	7546                	ld	a0,112(sp)

0000000080015352 <.LBB29_27>:
    80015352:	00014597          	auipc	a1,0x14
    80015356:	74e58593          	addi	a1,a1,1870 # 80029aa0 <.L__unnamed_75>
    8001535a:	ffffa097          	auipc	ra,0xffffa
    8001535e:	9f2080e7          	jalr	-1550(ra) # 8000ed4c <_ZN4core6option15Option$LT$T$GT$6unwrap17h81f0c84c54a80648E>
    80015362:	e8aa                	sd	a0,80(sp)
    80015364:	a009                	j	80015366 <.LBB29_27+0x14>
    80015366:	6546                	ld	a0,80(sp)
    80015368:	feaa                	sd	a0,376(sp)
    
        if addr > task.size || addr + size_of::<usize>() > task.size {
    8001536a:	75e6                	ld	a1,120(sp)
    8001536c:	6908                	ld	a0,16(a0)
    8001536e:	00b57b63          	bgeu	a0,a1,80015384 <.LBB29_27+0x32>
    80015372:	a009                	j	80015374 <.LBB29_27+0x22>
    80015374:	4505                	li	a0,1
    80015376:	08a103a3          	sb	a0,135(sp)
    8001537a:	a801                	j	8001538a <.LBB29_27+0x38>
    8001537c:	4501                	li	a0,0
    8001537e:	08a103a3          	sb	a0,135(sp)
    80015382:	a021                	j	8001538a <.LBB29_27+0x38>
    80015384:	7566                	ld	a0,120(sp)
    80015386:	e4aa                	sd	a0,72(sp)
    80015388:	a031                	j	80015394 <.LBB29_27+0x42>
    8001538a:	08714503          	lbu	a0,135(sp)
    8001538e:	8905                	andi	a0,a0,1
    80015390:	ed19                	bnez	a0,800153ae <.LBB29_27+0x5c>
    80015392:	a825                	j	800153ca <.LBB29_28+0x16>
    80015394:	65a6                	ld	a1,72(sp)
    80015396:	00858513          	addi	a0,a1,8
    8001539a:	e0aa                	sd	a0,64(sp)
    8001539c:	14b56963          	bltu	a0,a1,800154ee <.LBB29_36>
    800153a0:	a009                	j	800153a2 <.LBB29_27+0x50>
    800153a2:	6586                	ld	a1,64(sp)
    800153a4:	6546                	ld	a0,80(sp)
    800153a6:	6908                	ld	a0,16(a0)
    800153a8:	fcb566e3          	bltu	a0,a1,80015374 <.LBB29_27+0x22>
    800153ac:	bfc1                	j	8001537c <.LBB29_27+0x2a>
    800153ae:	18a8                	addi	a0,sp,120
            println!("[Debug] addr: 0x{:x}", addr);
    800153b0:	e5aa                	sd	a0,200(sp)
    800153b2:	e32a                	sd	a0,384(sp)

00000000800153b4 <.LBB29_28>:
    800153b4:	0000f597          	auipc	a1,0xf
    800153b8:	00058593          	mv	a1,a1
    800153bc:	0000a097          	auipc	ra,0xa
    800153c0:	2e4080e7          	jalr	740(ra) # 8001f6a0 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    800153c4:	f82a                	sd	a0,48(sp)
    800153c6:	fc2e                	sd	a1,56(sp)
    800153c8:	a829                	j	800153e2 <.LBB29_28+0x2e>
            println!("[Debug] task size: 0x{:x}", task.size);
            panic!("拷贝的地址值超出了进程")
        }
    
        let pgt = unsafe { &mut *task.pagetable };
    800153ca:	7586                	ld	a1,96(sp)
    800153cc:	7526                	ld	a0,104(sp)
    800153ce:	6646                	ld	a2,80(sp)
    800153d0:	6e10                	ld	a2,24(a2)
    800153d2:	f032                	sd	a2,32(sp)
    800153d4:	eb32                	sd	a2,400(sp)
        if pgt.copy_in(buf.as_mut_ptr(), addr, len).is_err() {
    800153d6:	0000a097          	auipc	ra,0xa
    800153da:	1b8080e7          	jalr	440(ra) # 8001f58e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h69a6648c691317bcE>
    800153de:	f42a                	sd	a0,40(sp)
    800153e0:	a869                	j	8001547a <.LBB29_33+0x16>
            println!("[Debug] addr: 0x{:x}", addr);
    800153e2:	7562                	ld	a0,56(sp)
    800153e4:	75c2                	ld	a1,48(sp)
    800153e6:	fd2e                	sd	a1,184(sp)
    800153e8:	e1aa                	sd	a0,192(sp)

00000000800153ea <.LBB29_29>:
    800153ea:	00014597          	auipc	a1,0x14
    800153ee:	6e658593          	addi	a1,a1,1766 # 80029ad0 <.L__unnamed_76>
    800153f2:	0128                	addi	a0,sp,136
    800153f4:	4609                	li	a2,2
    800153f6:	1934                	addi	a3,sp,184
    800153f8:	4705                	li	a4,1
    800153fa:	ffff0097          	auipc	ra,0xffff0
    800153fe:	070080e7          	jalr	112(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80015402:	a009                	j	80015404 <.LBB29_29+0x1a>
    80015404:	0128                	addi	a0,sp,136
    80015406:	00009097          	auipc	ra,0x9
    8001540a:	946080e7          	jalr	-1722(ra) # 8001dd4c <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8001540e:	a009                	j	80015410 <.LBB29_29+0x26>
            println!("[Debug] task size: 0x{:x}", task.size);
    80015410:	6546                	ld	a0,80(sp)
    80015412:	0541                	addi	a0,a0,16
    80015414:	ea2a                	sd	a0,272(sp)
    80015416:	e72a                	sd	a0,392(sp)

0000000080015418 <.LBB29_30>:
    80015418:	0000f597          	auipc	a1,0xf
    8001541c:	f9c58593          	addi	a1,a1,-100 # 800243b4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h760b07191d46b3f2E>
    80015420:	0000a097          	auipc	ra,0xa
    80015424:	280080e7          	jalr	640(ra) # 8001f6a0 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    80015428:	e82a                	sd	a0,16(sp)
    8001542a:	ec2e                	sd	a1,24(sp)
    8001542c:	a009                	j	8001542e <.LBB29_30+0x16>
    8001542e:	6562                	ld	a0,24(sp)
    80015430:	65c2                	ld	a1,16(sp)
    80015432:	e22e                	sd	a1,256(sp)
    80015434:	e62a                	sd	a0,264(sp)

0000000080015436 <.LBB29_31>:
    80015436:	00014597          	auipc	a1,0x14
    8001543a:	6d258593          	addi	a1,a1,1746 # 80029b08 <.L__unnamed_77>
    8001543e:	0988                	addi	a0,sp,208
    80015440:	4609                	li	a2,2
    80015442:	0214                	addi	a3,sp,256
    80015444:	4705                	li	a4,1
    80015446:	ffff0097          	auipc	ra,0xffff0
    8001544a:	024080e7          	jalr	36(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8001544e:	a009                	j	80015450 <.LBB29_31+0x1a>
    80015450:	0988                	addi	a0,sp,208
    80015452:	00009097          	auipc	ra,0x9
    80015456:	8fa080e7          	jalr	-1798(ra) # 8001dd4c <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8001545a:	a009                	j	8001545c <.LBB29_32>

000000008001545c <.LBB29_32>:
            panic!("拷贝的地址值超出了进程")
    8001545c:	00014517          	auipc	a0,0x14
    80015460:	6cc50513          	addi	a0,a0,1740 # 80029b28 <.L__unnamed_78>

0000000080015464 <.LBB29_33>:
    80015464:	00014617          	auipc	a2,0x14
    80015468:	6ec60613          	addi	a2,a2,1772 # 80029b50 <.L__unnamed_79>
    8001546c:	02100593          	li	a1,33
    80015470:	0000d097          	auipc	ra,0xd
    80015474:	e06080e7          	jalr	-506(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80015478:	0000                	unimp
        if pgt.copy_in(buf.as_mut_ptr(), addr, len).is_err() {
    8001547a:	66e6                	ld	a3,88(sp)
    8001547c:	75a2                	ld	a1,40(sp)
    8001547e:	7502                	ld	a0,32(sp)
    80015480:	7666                	ld	a2,120(sp)
    80015482:	00003097          	auipc	ra,0x3
    80015486:	976080e7          	jalr	-1674(ra) # 80017df8 <_ZN6kernel6memory7mapping10page_table9PageTable7copy_in17h459a5354b5a5ab11E>
    8001548a:	ee2a                	sd	a0,280(sp)
    8001548c:	f22e                	sd	a1,288(sp)
    8001548e:	a009                	j	80015490 <.LBB29_33+0x2c>
    80015490:	0a28                	addi	a0,sp,280
    80015492:	ffff8097          	auipc	ra,0xffff8
    80015496:	8cc080e7          	jalr	-1844(ra) # 8000cd5e <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h304118d236359d80E>
    8001549a:	e42a                	sd	a0,8(sp)
    8001549c:	a009                	j	8001549e <.LBB29_33+0x3a>
    8001549e:	6522                	ld	a0,8(sp)
    800154a0:	4581                	li	a1,0
    800154a2:	02b50363          	beq	a0,a1,800154c8 <.LBB29_35+0x18>
    800154a6:	a009                	j	800154a8 <.LBB29_34>

00000000800154a8 <.LBB29_34>:
            println!("Fail copy data from pagetable!");
    800154a8:	00014597          	auipc	a1,0x14
    800154ac:	6e058593          	addi	a1,a1,1760 # 80029b88 <.L__unnamed_80>

00000000800154b0 <.LBB29_35>:
    800154b0:	00014697          	auipc	a3,0x14
    800154b4:	41068693          	addi	a3,a3,1040 # 800298c0 <.L__unnamed_124>
    800154b8:	1228                	addi	a0,sp,296
    800154ba:	4605                	li	a2,1
    800154bc:	4701                	li	a4,0
    800154be:	ffff0097          	auipc	ra,0xffff0
    800154c2:	fac080e7          	jalr	-84(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    800154c6:	a029                	j	800154d0 <.LBB29_35+0x20>
    800154c8:	4501                	li	a0,0
            return Err(())
        }
        
        
        Ok(())
    800154ca:	08a10323          	sb	a0,134(sp)
    }
    800154ce:	a819                	j	800154e4 <.LBB29_35+0x34>
    800154d0:	1228                	addi	a0,sp,296
            println!("Fail copy data from pagetable!");
    800154d2:	00009097          	auipc	ra,0x9
    800154d6:	87a080e7          	jalr	-1926(ra) # 8001dd4c <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    800154da:	a009                	j	800154dc <.LBB29_35+0x2c>
    800154dc:	4505                	li	a0,1
            return Err(())
    800154de:	08a10323          	sb	a0,134(sp)
    }
    800154e2:	a009                	j	800154e4 <.LBB29_35+0x34>
    800154e4:	08614503          	lbu	a0,134(sp)
    800154e8:	60fa                	ld	ra,408(sp)
    800154ea:	611d                	addi	sp,sp,416
    800154ec:	8082                	ret

00000000800154ee <.LBB29_36>:
        if addr > task.size || addr + size_of::<usize>() > task.size {
    800154ee:	00014517          	auipc	a0,0x14
    800154f2:	fe250513          	addi	a0,a0,-30 # 800294d0 <str.1>

00000000800154f6 <.LBB29_37>:
    800154f6:	00014617          	auipc	a2,0x14
    800154fa:	5c260613          	addi	a2,a2,1474 # 80029ab8 <.L__unnamed_81>
    800154fe:	45f1                	li	a1,28
    80015500:	0000d097          	auipc	ra,0xd
    80015504:	d76080e7          	jalr	-650(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel7syscall15kernel_env_call17h9e1a25b47e8ef67bE:

000000008001550a <_ZN6kernel7syscall15kernel_env_call17h9e1a25b47e8ef67bE>:
}

#[inline]
pub fn kernel_env_call(
    8001550a:	7139                	addi	sp,sp,-64
    8001550c:	e036                	sd	a3,0(sp)
    8001550e:	86b2                	mv	a3,a2
    80015510:	6602                	ld	a2,0(sp)
    80015512:	e436                	sd	a3,8(sp)
    80015514:	86ae                	mv	a3,a1
    80015516:	65a2                	ld	a1,8(sp)
    80015518:	e836                	sd	a3,16(sp)
    8001551a:	88aa                	mv	a7,a0
    8001551c:	6542                	ld	a0,16(sp)
    8001551e:	f046                	sd	a7,32(sp)
    80015520:	f42a                	sd	a0,40(sp)
    80015522:	f82e                	sd	a1,48(sp)
    80015524:	fc32                	sd	a2,56(sp)
    arg1: usize,
    arg2: usize,   
) -> usize {
    let mut ret;
    unsafe {
        llvm_asm!("ecall"
    80015526:	00000073          	ecall
    8001552a:	ec2a                	sd	a0,24(sp)
            : "memory"
            : "volatile"
        );
    }
    ret
}
    8001552c:	6121                	addi	sp,sp,64
    8001552e:	8082                	ret

Disassembly of section .text._ZN63_$LT$kernel..syscall..SysCallID$u20$as$u20$core..fmt..Debug$GT$3fmt17h626128a725ed00c9E:

0000000080015530 <_ZN63_$LT$kernel..syscall..SysCallID$u20$as$u20$core..fmt..Debug$GT$3fmt17h626128a725ed00c9E>:
#[derive(Debug)]
    80015530:	c2010113          	addi	sp,sp,-992
    80015534:	3c113c23          	sd	ra,984(sp)
    80015538:	e42e                	sd	a1,8(sp)
    8001553a:	2ea13023          	sd	a0,736(sp)
    8001553e:	2eb13423          	sd	a1,744(sp)
    80015542:	f02a                	sd	a0,32(sp)
    80015544:	6108                	ld	a0,0(a0)
    80015546:	157d                	addi	a0,a0,-1
    80015548:	e82a                	sd	a0,16(sp)
    8001554a:	6542                	ld	a0,16(sp)
    8001554c:	050e                	slli	a0,a0,0x3

000000008001554e <.LBB31_62>:
    8001554e:	00014597          	auipc	a1,0x14
    80015552:	afa58593          	addi	a1,a1,-1286 # 80029048 <.LJTI31_0>
    80015556:	952e                	add	a0,a0,a1
    80015558:	6108                	ld	a0,0(a0)
    8001555a:	8502                	jr	a0

000000008001555c <.LBB31_2>:
    8001555c:	65a2                	ld	a1,8(sp)

000000008001555e <.LBB31_63>:
    8001555e:	00014617          	auipc	a2,0x14
    80015562:	63a60613          	addi	a2,a2,1594 # 80029b98 <.L__unnamed_82>
    80015566:	05a8                	addi	a0,sp,712
    80015568:	469d                	li	a3,7
    8001556a:	0000e097          	auipc	ra,0xe
    8001556e:	c8a080e7          	jalr	-886(ra) # 800231f4 <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    80015572:	a9d1                	j	80015a46 <.LBB31_91+0x2a>

0000000080015574 <.LBB31_3>:
	...

0000000080015576 <.LBB31_4>:
    80015576:	65a2                	ld	a1,8(sp)

0000000080015578 <.LBB31_64>:
    80015578:	00014617          	auipc	a2,0x14
    8001557c:	6b460613          	addi	a2,a2,1716 # 80029c2c <.L__unnamed_83>
    80015580:	1028                	addi	a0,sp,40
    80015582:	469d                	li	a3,7
    80015584:	0000e097          	auipc	ra,0xe
    80015588:	c70080e7          	jalr	-912(ra) # 800231f4 <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    8001558c:	a009                	j	8001558e <.LBB31_64+0x16>
    8001558e:	1028                	addi	a0,sp,40
    80015590:	3ca13823          	sd	a0,976(sp)
    80015594:	0000d097          	auipc	ra,0xd
    80015598:	2b8080e7          	jalr	696(ra) # 8002284c <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    8001559c:	00a10fa3          	sb	a0,31(sp)
    800155a0:	a96d                	j	80015a5a <.LBB31_91+0x3e>

00000000800155a2 <.LBB31_6>:
    800155a2:	65a2                	ld	a1,8(sp)

00000000800155a4 <.LBB31_65>:
    800155a4:	00014617          	auipc	a2,0x14
    800155a8:	68160613          	addi	a2,a2,1665 # 80029c25 <.L__unnamed_84>
    800155ac:	0088                	addi	a0,sp,64
    800155ae:	469d                	li	a3,7
    800155b0:	0000e097          	auipc	ra,0xe
    800155b4:	c44080e7          	jalr	-956(ra) # 800231f4 <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    800155b8:	a009                	j	800155ba <.LBB31_65+0x16>
    800155ba:	0088                	addi	a0,sp,64
    800155bc:	3ca13423          	sd	a0,968(sp)
    800155c0:	0000d097          	auipc	ra,0xd
    800155c4:	28c080e7          	jalr	652(ra) # 8002284c <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    800155c8:	00a10fa3          	sb	a0,31(sp)
    800155cc:	a179                	j	80015a5a <.LBB31_91+0x3e>

00000000800155ce <.LBB31_8>:
    800155ce:	65a2                	ld	a1,8(sp)

00000000800155d0 <.LBB31_66>:
    800155d0:	00014617          	auipc	a2,0x14
    800155d4:	64e60613          	addi	a2,a2,1614 # 80029c1e <.L__unnamed_85>
    800155d8:	08a8                	addi	a0,sp,88
    800155da:	469d                	li	a3,7
    800155dc:	0000e097          	auipc	ra,0xe
    800155e0:	c18080e7          	jalr	-1000(ra) # 800231f4 <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    800155e4:	a009                	j	800155e6 <.LBB31_66+0x16>
    800155e6:	08a8                	addi	a0,sp,88
    800155e8:	3ca13023          	sd	a0,960(sp)
    800155ec:	0000d097          	auipc	ra,0xd
    800155f0:	260080e7          	jalr	608(ra) # 8002284c <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    800155f4:	00a10fa3          	sb	a0,31(sp)
    800155f8:	a18d                	j	80015a5a <.LBB31_91+0x3e>

00000000800155fa <.LBB31_10>:
    800155fa:	65a2                	ld	a1,8(sp)

00000000800155fc <.LBB31_67>:
    800155fc:	00014617          	auipc	a2,0x14
    80015600:	61b60613          	addi	a2,a2,1563 # 80029c17 <.L__unnamed_86>
    80015604:	1888                	addi	a0,sp,112
    80015606:	469d                	li	a3,7
    80015608:	0000e097          	auipc	ra,0xe
    8001560c:	bec080e7          	jalr	-1044(ra) # 800231f4 <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    80015610:	a009                	j	80015612 <.LBB31_67+0x16>
    80015612:	1888                	addi	a0,sp,112
    80015614:	3aa13c23          	sd	a0,952(sp)
    80015618:	0000d097          	auipc	ra,0xd
    8001561c:	234080e7          	jalr	564(ra) # 8002284c <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    80015620:	00a10fa3          	sb	a0,31(sp)
    80015624:	a91d                	j	80015a5a <.LBB31_91+0x3e>

0000000080015626 <.LBB31_12>:
    80015626:	65a2                	ld	a1,8(sp)

0000000080015628 <.LBB31_68>:
    80015628:	00014617          	auipc	a2,0x14
    8001562c:	5e860613          	addi	a2,a2,1512 # 80029c10 <.L__unnamed_87>
    80015630:	0128                	addi	a0,sp,136
    80015632:	469d                	li	a3,7
    80015634:	0000e097          	auipc	ra,0xe
    80015638:	bc0080e7          	jalr	-1088(ra) # 800231f4 <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    8001563c:	a009                	j	8001563e <.LBB31_68+0x16>
    8001563e:	0128                	addi	a0,sp,136
    80015640:	3aa13823          	sd	a0,944(sp)
    80015644:	0000d097          	auipc	ra,0xd
    80015648:	208080e7          	jalr	520(ra) # 8002284c <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    8001564c:	00a10fa3          	sb	a0,31(sp)
    80015650:	a129                	j	80015a5a <.LBB31_91+0x3e>

0000000080015652 <.LBB31_14>:
    80015652:	65a2                	ld	a1,8(sp)

0000000080015654 <.LBB31_69>:
    80015654:	00014617          	auipc	a2,0x14
    80015658:	5b560613          	addi	a2,a2,1461 # 80029c09 <.L__unnamed_88>
    8001565c:	1108                	addi	a0,sp,160
    8001565e:	469d                	li	a3,7
    80015660:	0000e097          	auipc	ra,0xe
    80015664:	b94080e7          	jalr	-1132(ra) # 800231f4 <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    80015668:	a009                	j	8001566a <.LBB31_69+0x16>
    8001566a:	1108                	addi	a0,sp,160
    8001566c:	3aa13423          	sd	a0,936(sp)
    80015670:	0000d097          	auipc	ra,0xd
    80015674:	1dc080e7          	jalr	476(ra) # 8002284c <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    80015678:	00a10fa3          	sb	a0,31(sp)
    8001567c:	aef9                	j	80015a5a <.LBB31_91+0x3e>

000000008001567e <.LBB31_16>:
    8001567e:	65a2                	ld	a1,8(sp)

0000000080015680 <.LBB31_70>:
    80015680:	00014617          	auipc	a2,0x14
    80015684:	58260613          	addi	a2,a2,1410 # 80029c02 <.L__unnamed_89>
    80015688:	1928                	addi	a0,sp,184
    8001568a:	469d                	li	a3,7
    8001568c:	0000e097          	auipc	ra,0xe
    80015690:	b68080e7          	jalr	-1176(ra) # 800231f4 <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    80015694:	a009                	j	80015696 <.LBB31_70+0x16>
    80015696:	1928                	addi	a0,sp,184
    80015698:	3aa13023          	sd	a0,928(sp)
    8001569c:	0000d097          	auipc	ra,0xd
    800156a0:	1b0080e7          	jalr	432(ra) # 8002284c <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    800156a4:	00a10fa3          	sb	a0,31(sp)
    800156a8:	ae4d                	j	80015a5a <.LBB31_91+0x3e>

00000000800156aa <.LBB31_18>:
    800156aa:	65a2                	ld	a1,8(sp)

00000000800156ac <.LBB31_71>:
    800156ac:	00011617          	auipc	a2,0x11
    800156b0:	16460613          	addi	a2,a2,356 # 80026810 <.L__unnamed_6+0x68>
    800156b4:	0988                	addi	a0,sp,208
    800156b6:	46a1                	li	a3,8
    800156b8:	0000e097          	auipc	ra,0xe
    800156bc:	b3c080e7          	jalr	-1220(ra) # 800231f4 <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    800156c0:	a009                	j	800156c2 <.LBB31_71+0x16>
    800156c2:	0988                	addi	a0,sp,208
    800156c4:	38a13c23          	sd	a0,920(sp)
    800156c8:	0000d097          	auipc	ra,0xd
    800156cc:	184080e7          	jalr	388(ra) # 8002284c <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    800156d0:	00a10fa3          	sb	a0,31(sp)
    800156d4:	a659                	j	80015a5a <.LBB31_91+0x3e>

00000000800156d6 <.LBB31_20>:
    800156d6:	65a2                	ld	a1,8(sp)

00000000800156d8 <.LBB31_72>:
    800156d8:	00011617          	auipc	a2,0x11
    800156dc:	11860613          	addi	a2,a2,280 # 800267f0 <.L__unnamed_6+0x48>
    800156e0:	11a8                	addi	a0,sp,232
    800156e2:	46a1                	li	a3,8
    800156e4:	0000e097          	auipc	ra,0xe
    800156e8:	b10080e7          	jalr	-1264(ra) # 800231f4 <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    800156ec:	a009                	j	800156ee <.LBB31_72+0x16>
    800156ee:	11a8                	addi	a0,sp,232
    800156f0:	38a13823          	sd	a0,912(sp)
    800156f4:	0000d097          	auipc	ra,0xd
    800156f8:	158080e7          	jalr	344(ra) # 8002284c <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    800156fc:	00a10fa3          	sb	a0,31(sp)
    80015700:	aea9                	j	80015a5a <.LBB31_91+0x3e>

0000000080015702 <.LBB31_22>:
    80015702:	65a2                	ld	a1,8(sp)

0000000080015704 <.LBB31_73>:
    80015704:	00014617          	auipc	a2,0x14
    80015708:	4f860613          	addi	a2,a2,1272 # 80029bfc <.L__unnamed_92>
    8001570c:	0208                	addi	a0,sp,256
    8001570e:	4699                	li	a3,6
    80015710:	0000e097          	auipc	ra,0xe
    80015714:	ae4080e7          	jalr	-1308(ra) # 800231f4 <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    80015718:	a009                	j	8001571a <.LBB31_73+0x16>
    8001571a:	0208                	addi	a0,sp,256
    8001571c:	38a13423          	sd	a0,904(sp)
    80015720:	0000d097          	auipc	ra,0xd
    80015724:	12c080e7          	jalr	300(ra) # 8002284c <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    80015728:	00a10fa3          	sb	a0,31(sp)
    8001572c:	a63d                	j	80015a5a <.LBB31_91+0x3e>

000000008001572e <.LBB31_24>:
    8001572e:	65a2                	ld	a1,8(sp)

0000000080015730 <.LBB31_74>:
    80015730:	00014617          	auipc	a2,0x14
    80015734:	4c360613          	addi	a2,a2,1219 # 80029bf3 <.L__unnamed_93>
    80015738:	0a28                	addi	a0,sp,280
    8001573a:	46a5                	li	a3,9
    8001573c:	0000e097          	auipc	ra,0xe
    80015740:	ab8080e7          	jalr	-1352(ra) # 800231f4 <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    80015744:	a009                	j	80015746 <.LBB31_74+0x16>
    80015746:	0a28                	addi	a0,sp,280
    80015748:	38a13023          	sd	a0,896(sp)
    8001574c:	0000d097          	auipc	ra,0xd
    80015750:	100080e7          	jalr	256(ra) # 8002284c <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    80015754:	00a10fa3          	sb	a0,31(sp)
    80015758:	a609                	j	80015a5a <.LBB31_91+0x3e>

000000008001575a <.LBB31_26>:
    8001575a:	65a2                	ld	a1,8(sp)

000000008001575c <.LBB31_75>:
    8001575c:	00014617          	auipc	a2,0x14
    80015760:	49060613          	addi	a2,a2,1168 # 80029bec <.L__unnamed_94>
    80015764:	1a08                	addi	a0,sp,304
    80015766:	469d                	li	a3,7
    80015768:	0000e097          	auipc	ra,0xe
    8001576c:	a8c080e7          	jalr	-1396(ra) # 800231f4 <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    80015770:	a009                	j	80015772 <.LBB31_75+0x16>
    80015772:	1a08                	addi	a0,sp,304
    80015774:	36a13c23          	sd	a0,888(sp)
    80015778:	0000d097          	auipc	ra,0xd
    8001577c:	0d4080e7          	jalr	212(ra) # 8002284c <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    80015780:	00a10fa3          	sb	a0,31(sp)
    80015784:	acd9                	j	80015a5a <.LBB31_91+0x3e>

0000000080015786 <.LBB31_28>:
    80015786:	65a2                	ld	a1,8(sp)

0000000080015788 <.LBB31_76>:
    80015788:	00011617          	auipc	a2,0x11
    8001578c:	0d060613          	addi	a2,a2,208 # 80026858 <.L__unnamed_6+0xb0>
    80015790:	02a8                	addi	a0,sp,328
    80015792:	46a1                	li	a3,8
    80015794:	0000e097          	auipc	ra,0xe
    80015798:	a60080e7          	jalr	-1440(ra) # 800231f4 <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    8001579c:	a009                	j	8001579e <.LBB31_76+0x16>
    8001579e:	02a8                	addi	a0,sp,328
    800157a0:	36a13823          	sd	a0,880(sp)
    800157a4:	0000d097          	auipc	ra,0xd
    800157a8:	0a8080e7          	jalr	168(ra) # 8002284c <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    800157ac:	00a10fa3          	sb	a0,31(sp)
    800157b0:	a46d                	j	80015a5a <.LBB31_91+0x3e>

00000000800157b2 <.LBB31_30>:
    800157b2:	65a2                	ld	a1,8(sp)

00000000800157b4 <.LBB31_77>:
    800157b4:	00014617          	auipc	a2,0x14
    800157b8:	42f60613          	addi	a2,a2,1071 # 80029be3 <.L__unnamed_96>
    800157bc:	1288                	addi	a0,sp,352
    800157be:	46a5                	li	a3,9
    800157c0:	0000e097          	auipc	ra,0xe
    800157c4:	a34080e7          	jalr	-1484(ra) # 800231f4 <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    800157c8:	a009                	j	800157ca <.LBB31_77+0x16>
    800157ca:	1288                	addi	a0,sp,352
    800157cc:	36a13423          	sd	a0,872(sp)
    800157d0:	0000d097          	auipc	ra,0xd
    800157d4:	07c080e7          	jalr	124(ra) # 8002284c <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    800157d8:	00a10fa3          	sb	a0,31(sp)
    800157dc:	acbd                	j	80015a5a <.LBB31_91+0x3e>

00000000800157de <.LBB31_32>:
    800157de:	65a2                	ld	a1,8(sp)

00000000800157e0 <.LBB31_78>:
    800157e0:	00014617          	auipc	a2,0x14
    800157e4:	3fc60613          	addi	a2,a2,1020 # 80029bdc <.L__unnamed_97>
    800157e8:	1aa8                	addi	a0,sp,376
    800157ea:	469d                	li	a3,7
    800157ec:	0000e097          	auipc	ra,0xe
    800157f0:	a08080e7          	jalr	-1528(ra) # 800231f4 <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    800157f4:	a009                	j	800157f6 <.LBB31_78+0x16>
    800157f6:	1aa8                	addi	a0,sp,376
    800157f8:	36a13023          	sd	a0,864(sp)
    800157fc:	0000d097          	auipc	ra,0xd
    80015800:	050080e7          	jalr	80(ra) # 8002284c <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    80015804:	00a10fa3          	sb	a0,31(sp)
    80015808:	ac89                	j	80015a5a <.LBB31_91+0x3e>

000000008001580a <.LBB31_34>:
    8001580a:	65a2                	ld	a1,8(sp)

000000008001580c <.LBB31_79>:
    8001580c:	00011617          	auipc	a2,0x11
    80015810:	03460613          	addi	a2,a2,52 # 80026840 <.L__unnamed_6+0x98>
    80015814:	0b08                	addi	a0,sp,400
    80015816:	46a1                	li	a3,8
    80015818:	0000e097          	auipc	ra,0xe
    8001581c:	9dc080e7          	jalr	-1572(ra) # 800231f4 <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    80015820:	a009                	j	80015822 <.LBB31_79+0x16>
    80015822:	0b08                	addi	a0,sp,400
    80015824:	34a13c23          	sd	a0,856(sp)
    80015828:	0000d097          	auipc	ra,0xd
    8001582c:	024080e7          	jalr	36(ra) # 8002284c <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    80015830:	00a10fa3          	sb	a0,31(sp)
    80015834:	a41d                	j	80015a5a <.LBB31_91+0x3e>

0000000080015836 <.LBB31_36>:
    80015836:	65a2                	ld	a1,8(sp)

0000000080015838 <.LBB31_80>:
    80015838:	00011617          	auipc	a2,0x11
    8001583c:	fa860613          	addi	a2,a2,-88 # 800267e0 <.L__unnamed_6+0x38>
    80015840:	1328                	addi	a0,sp,424
    80015842:	46a1                	li	a3,8
    80015844:	0000e097          	auipc	ra,0xe
    80015848:	9b0080e7          	jalr	-1616(ra) # 800231f4 <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    8001584c:	a009                	j	8001584e <.LBB31_80+0x16>
    8001584e:	1328                	addi	a0,sp,424
    80015850:	34a13823          	sd	a0,848(sp)
    80015854:	0000d097          	auipc	ra,0xd
    80015858:	ff8080e7          	jalr	-8(ra) # 8002284c <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    8001585c:	00a10fa3          	sb	a0,31(sp)
    80015860:	aaed                	j	80015a5a <.LBB31_91+0x3e>

0000000080015862 <.LBB31_38>:
    80015862:	65a2                	ld	a1,8(sp)

0000000080015864 <.LBB31_81>:
    80015864:	00014617          	auipc	a2,0x14
    80015868:	36f60613          	addi	a2,a2,879 # 80029bd3 <.L__unnamed_100>
    8001586c:	0388                	addi	a0,sp,448
    8001586e:	46a5                	li	a3,9
    80015870:	0000e097          	auipc	ra,0xe
    80015874:	984080e7          	jalr	-1660(ra) # 800231f4 <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    80015878:	a009                	j	8001587a <.LBB31_81+0x16>
    8001587a:	0388                	addi	a0,sp,448
    8001587c:	34a13423          	sd	a0,840(sp)
    80015880:	0000d097          	auipc	ra,0xd
    80015884:	fcc080e7          	jalr	-52(ra) # 8002284c <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    80015888:	00a10fa3          	sb	a0,31(sp)
    8001588c:	a2f9                	j	80015a5a <.LBB31_91+0x3e>

000000008001588e <.LBB31_40>:
    8001588e:	65a2                	ld	a1,8(sp)

0000000080015890 <.LBB31_82>:
    80015890:	00014617          	auipc	a2,0x14
    80015894:	33c60613          	addi	a2,a2,828 # 80029bcc <.L__unnamed_101>
    80015898:	0ba8                	addi	a0,sp,472
    8001589a:	469d                	li	a3,7
    8001589c:	0000e097          	auipc	ra,0xe
    800158a0:	958080e7          	jalr	-1704(ra) # 800231f4 <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    800158a4:	a009                	j	800158a6 <.LBB31_82+0x16>
    800158a6:	0ba8                	addi	a0,sp,472
    800158a8:	34a13023          	sd	a0,832(sp)
    800158ac:	0000d097          	auipc	ra,0xd
    800158b0:	fa0080e7          	jalr	-96(ra) # 8002284c <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    800158b4:	00a10fa3          	sb	a0,31(sp)
    800158b8:	a24d                	j	80015a5a <.LBB31_91+0x3e>

00000000800158ba <.LBB31_42>:
    800158ba:	65a2                	ld	a1,8(sp)

00000000800158bc <.LBB31_83>:
    800158bc:	00011617          	auipc	a2,0x11
    800158c0:	f1c60613          	addi	a2,a2,-228 # 800267d8 <.L__unnamed_6+0x30>
    800158c4:	1b88                	addi	a0,sp,496
    800158c6:	46a1                	li	a3,8
    800158c8:	0000e097          	auipc	ra,0xe
    800158cc:	92c080e7          	jalr	-1748(ra) # 800231f4 <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    800158d0:	a009                	j	800158d2 <.LBB31_83+0x16>
    800158d2:	1b88                	addi	a0,sp,496
    800158d4:	32a13c23          	sd	a0,824(sp)
    800158d8:	0000d097          	auipc	ra,0xd
    800158dc:	f74080e7          	jalr	-140(ra) # 8002284c <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    800158e0:	00a10fa3          	sb	a0,31(sp)
    800158e4:	aa9d                	j	80015a5a <.LBB31_91+0x3e>

00000000800158e6 <.LBB31_44>:
    800158e6:	65a2                	ld	a1,8(sp)

00000000800158e8 <.LBB31_84>:
    800158e8:	00011617          	auipc	a2,0x11
    800158ec:	f2060613          	addi	a2,a2,-224 # 80026808 <.L__unnamed_6+0x60>
    800158f0:	0428                	addi	a0,sp,520
    800158f2:	46a1                	li	a3,8
    800158f4:	0000e097          	auipc	ra,0xe
    800158f8:	900080e7          	jalr	-1792(ra) # 800231f4 <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    800158fc:	a009                	j	800158fe <.LBB31_84+0x16>
    800158fe:	0428                	addi	a0,sp,520
    80015900:	32a13823          	sd	a0,816(sp)
    80015904:	0000d097          	auipc	ra,0xd
    80015908:	f48080e7          	jalr	-184(ra) # 8002284c <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    8001590c:	00a10fa3          	sb	a0,31(sp)
    80015910:	a2a9                	j	80015a5a <.LBB31_91+0x3e>

0000000080015912 <.LBB31_46>:
    80015912:	65a2                	ld	a1,8(sp)

0000000080015914 <.LBB31_85>:
    80015914:	00014617          	auipc	a2,0x14
    80015918:	2af60613          	addi	a2,a2,687 # 80029bc3 <.L__unnamed_104>
    8001591c:	1408                	addi	a0,sp,544
    8001591e:	46a5                	li	a3,9
    80015920:	0000e097          	auipc	ra,0xe
    80015924:	8d4080e7          	jalr	-1836(ra) # 800231f4 <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    80015928:	a009                	j	8001592a <.LBB31_85+0x16>
    8001592a:	1408                	addi	a0,sp,544
    8001592c:	32a13423          	sd	a0,808(sp)
    80015930:	0000d097          	auipc	ra,0xd
    80015934:	f1c080e7          	jalr	-228(ra) # 8002284c <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    80015938:	00a10fa3          	sb	a0,31(sp)
    8001593c:	aa39                	j	80015a5a <.LBB31_91+0x3e>

000000008001593e <.LBB31_48>:
    8001593e:	65a2                	ld	a1,8(sp)

0000000080015940 <.LBB31_86>:
    80015940:	00014617          	auipc	a2,0x14
    80015944:	27a60613          	addi	a2,a2,634 # 80029bba <.L__unnamed_105>
    80015948:	1c28                	addi	a0,sp,568
    8001594a:	46a5                	li	a3,9
    8001594c:	0000e097          	auipc	ra,0xe
    80015950:	8a8080e7          	jalr	-1880(ra) # 800231f4 <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    80015954:	a009                	j	80015956 <.LBB31_86+0x16>
    80015956:	1c28                	addi	a0,sp,568
    80015958:	32a13023          	sd	a0,800(sp)
    8001595c:	0000d097          	auipc	ra,0xd
    80015960:	ef0080e7          	jalr	-272(ra) # 8002284c <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    80015964:	00a10fa3          	sb	a0,31(sp)
    80015968:	a8cd                	j	80015a5a <.LBB31_91+0x3e>

000000008001596a <.LBB31_50>:
    8001596a:	65a2                	ld	a1,8(sp)

000000008001596c <.LBB31_87>:
    8001596c:	00011617          	auipc	a2,0x11
    80015970:	ecc60613          	addi	a2,a2,-308 # 80026838 <.L__unnamed_6+0x90>
    80015974:	0c88                	addi	a0,sp,592
    80015976:	46a1                	li	a3,8
    80015978:	0000e097          	auipc	ra,0xe
    8001597c:	87c080e7          	jalr	-1924(ra) # 800231f4 <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    80015980:	a009                	j	80015982 <.LBB31_87+0x16>
    80015982:	0c88                	addi	a0,sp,592
    80015984:	30a13c23          	sd	a0,792(sp)
    80015988:	0000d097          	auipc	ra,0xd
    8001598c:	ec4080e7          	jalr	-316(ra) # 8002284c <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    80015990:	00a10fa3          	sb	a0,31(sp)
    80015994:	a0d9                	j	80015a5a <.LBB31_91+0x3e>

0000000080015996 <.LBB31_52>:
    80015996:	65a2                	ld	a1,8(sp)

0000000080015998 <.LBB31_88>:
    80015998:	00014617          	auipc	a2,0x14
    8001599c:	21860613          	addi	a2,a2,536 # 80029bb0 <.L__unnamed_107>
    800159a0:	14a8                	addi	a0,sp,616
    800159a2:	46a9                	li	a3,10
    800159a4:	0000e097          	auipc	ra,0xe
    800159a8:	850080e7          	jalr	-1968(ra) # 800231f4 <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    800159ac:	a009                	j	800159ae <.LBB31_88+0x16>
    800159ae:	14a8                	addi	a0,sp,616
    800159b0:	30a13823          	sd	a0,784(sp)
    800159b4:	0000d097          	auipc	ra,0xd
    800159b8:	e98080e7          	jalr	-360(ra) # 8002284c <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    800159bc:	00a10fa3          	sb	a0,31(sp)
    800159c0:	a869                	j	80015a5a <.LBB31_91+0x3e>

00000000800159c2 <.LBB31_54>:
    800159c2:	65a2                	ld	a1,8(sp)

00000000800159c4 <.LBB31_89>:
    800159c4:	00014617          	auipc	a2,0x14
    800159c8:	1e260613          	addi	a2,a2,482 # 80029ba6 <.L__unnamed_108>
    800159cc:	0508                	addi	a0,sp,640
    800159ce:	46a9                	li	a3,10
    800159d0:	0000e097          	auipc	ra,0xe
    800159d4:	824080e7          	jalr	-2012(ra) # 800231f4 <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    800159d8:	a009                	j	800159da <.LBB31_89+0x16>
    800159da:	0508                	addi	a0,sp,640
    800159dc:	30a13423          	sd	a0,776(sp)
    800159e0:	0000d097          	auipc	ra,0xd
    800159e4:	e6c080e7          	jalr	-404(ra) # 8002284c <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    800159e8:	00a10fa3          	sb	a0,31(sp)
    800159ec:	a0bd                	j	80015a5a <.LBB31_91+0x3e>

00000000800159ee <.LBB31_56>:
    800159ee:	65a2                	ld	a1,8(sp)

00000000800159f0 <.LBB31_90>:
    800159f0:	00011617          	auipc	a2,0x11
    800159f4:	e9060613          	addi	a2,a2,-368 # 80026880 <.L__unnamed_6+0xd8>
    800159f8:	0d28                	addi	a0,sp,664
    800159fa:	46a1                	li	a3,8
    800159fc:	0000d097          	auipc	ra,0xd
    80015a00:	7f8080e7          	jalr	2040(ra) # 800231f4 <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    80015a04:	a009                	j	80015a06 <.LBB31_90+0x16>
    80015a06:	0d28                	addi	a0,sp,664
    80015a08:	30a13023          	sd	a0,768(sp)
    80015a0c:	0000d097          	auipc	ra,0xd
    80015a10:	e40080e7          	jalr	-448(ra) # 8002284c <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    80015a14:	00a10fa3          	sb	a0,31(sp)
    80015a18:	a089                	j	80015a5a <.LBB31_91+0x3e>

0000000080015a1a <.LBB31_58>:
    80015a1a:	65a2                	ld	a1,8(sp)

0000000080015a1c <.LBB31_91>:
    80015a1c:	00014617          	auipc	a2,0x14
    80015a20:	18360613          	addi	a2,a2,387 # 80029b9f <.L__unnamed_110>
    80015a24:	1d08                	addi	a0,sp,688
    80015a26:	469d                	li	a3,7
    80015a28:	0000d097          	auipc	ra,0xd
    80015a2c:	7cc080e7          	jalr	1996(ra) # 800231f4 <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    80015a30:	a009                	j	80015a32 <.LBB31_91+0x16>
    80015a32:	1d08                	addi	a0,sp,688
    80015a34:	2ea13c23          	sd	a0,760(sp)
    80015a38:	0000d097          	auipc	ra,0xd
    80015a3c:	e14080e7          	jalr	-492(ra) # 8002284c <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    80015a40:	00a10fa3          	sb	a0,31(sp)
    80015a44:	a819                	j	80015a5a <.LBB31_91+0x3e>
    80015a46:	05a8                	addi	a0,sp,712
    80015a48:	2ea13823          	sd	a0,752(sp)
    80015a4c:	0000d097          	auipc	ra,0xd
    80015a50:	e00080e7          	jalr	-512(ra) # 8002284c <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    80015a54:	00a10fa3          	sb	a0,31(sp)
    80015a58:	a009                	j	80015a5a <.LBB31_91+0x3e>
    80015a5a:	01f14503          	lbu	a0,31(sp)
    80015a5e:	3d813083          	ld	ra,984(sp)
    80015a62:	3e010113          	addi	sp,sp,992
    80015a66:	8082                	ret

Disassembly of section .text._ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h00cb4931a375be30E:

0000000080015a68 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h00cb4931a375be30E>:
    fn from(t: T) -> T {
    80015a68:	1141                	addi	sp,sp,-16
    80015a6a:	e02a                	sd	a0,0(sp)
    80015a6c:	e42e                	sd	a1,8(sp)
    }
    80015a6e:	0141                	addi	sp,sp,16
    80015a70:	8082                	ret

Disassembly of section .text._ZN6kernel7process7process11task_struct13get_trapframe17h4f5c89f7bc6c38b6E:

0000000080015a72 <_ZN6kernel7process7process11task_struct13get_trapframe17h4f5c89f7bc6c38b6E>:
    pub fn get_trapframe(&self) -> *mut Trapframe {
    80015a72:	1141                	addi	sp,sp,-16
    80015a74:	e42a                	sd	a0,8(sp)
        self.trapframe
    80015a76:	7108                	ld	a0,32(a0)
    }
    80015a78:	0141                	addi	sp,sp,16
    80015a7a:	8082                	ret

Disassembly of section .text._ZN6kernel7process7process11task_struct8set_name17h97383af55b55362eE:

0000000080015a7c <_ZN6kernel7process7process11task_struct8set_name17h97383af55b55362eE>:
    pub fn set_name(&mut self, name: &[u8]) {
    80015a7c:	715d                	addi	sp,sp,-80
    80015a7e:	e486                	sd	ra,72(sp)
    80015a80:	e832                	sd	a2,16(sp)
    80015a82:	862e                	mv	a2,a1
    80015a84:	65c2                	ld	a1,16(sp)
    80015a86:	ec32                	sd	a2,24(sp)
    80015a88:	862a                	mv	a2,a0
    80015a8a:	6562                	ld	a0,24(sp)
    80015a8c:	f032                	sd	a2,32(sp)
    80015a8e:	f832                	sd	a2,48(sp)
    80015a90:	fc2a                	sd	a0,56(sp)
    80015a92:	e0ae                	sd	a1,64(sp)
                name.as_ptr(), 
    80015a94:	0000a097          	auipc	ra,0xa
    80015a98:	b9c080e7          	jalr	-1124(ra) # 8001f630 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hf7620495824cfb20E>
    80015a9c:	f42a                	sd	a0,40(sp)
    80015a9e:	a009                	j	80015aa0 <_ZN6kernel7process7process11task_struct8set_name17h97383af55b55362eE+0x24>
                self.name.as_mut_ptr(),
    80015aa0:	7502                	ld	a0,32(sp)
    80015aa2:	3f850513          	addi	a0,a0,1016
    80015aa6:	45c1                	li	a1,16
    80015aa8:	0000a097          	auipc	ra,0xa
    80015aac:	ae6080e7          	jalr	-1306(ra) # 8001f58e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h69a6648c691317bcE>
    80015ab0:	e42a                	sd	a0,8(sp)
    80015ab2:	a009                	j	80015ab4 <_ZN6kernel7process7process11task_struct8set_name17h97383af55b55362eE+0x38>
                name.len()
    80015ab4:	65c2                	ld	a1,16(sp)
    80015ab6:	6562                	ld	a0,24(sp)
    80015ab8:	0000a097          	auipc	ra,0xa
    80015abc:	b1c080e7          	jalr	-1252(ra) # 8001f5d4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hb06ce83b043493f3E>
    80015ac0:	e02a                	sd	a0,0(sp)
    80015ac2:	a009                	j	80015ac4 <_ZN6kernel7process7process11task_struct8set_name17h97383af55b55362eE+0x48>
            copy_nonoverlapping(
    80015ac4:	6602                	ld	a2,0(sp)
    80015ac6:	75a2                	ld	a1,40(sp)
    80015ac8:	6522                	ld	a0,8(sp)
    80015aca:	0000f097          	auipc	ra,0xf
    80015ace:	61a080e7          	jalr	1562(ra) # 800250e4 <memcpy>
    }
    80015ad2:	60a6                	ld	ra,72(sp)
    80015ad4:	6161                	addi	sp,sp,80
    80015ad6:	8082                	ret

Disassembly of section .text._ZN6kernel7process7process11task_struct10set_parent17h7c6b213c4b558281E:

0000000080015ad8 <_ZN6kernel7process7process11task_struct10set_parent17h7c6b213c4b558281E>:
    pub fn set_parent(&mut self, parent: Option<*mut task_struct>) {
    80015ad8:	1101                	addi	sp,sp,-32
    80015ada:	e42a                	sd	a0,8(sp)
    80015adc:	e82e                	sd	a1,16(sp)
    80015ade:	ec32                	sd	a2,24(sp)
        self.parent = parent;
    80015ae0:	ed4c                	sd	a1,152(a0)
    80015ae2:	f150                	sd	a2,160(a0)
    }
    80015ae4:	6105                	addi	sp,sp,32
    80015ae6:	8082                	ret

Disassembly of section .text._ZN6kernel7process7process11task_struct10set_kstack17h1eb46020e3181b64E:

0000000080015ae8 <_ZN6kernel7process7process11task_struct10set_kstack17h1eb46020e3181b64E>:
    pub fn set_kstack(&mut self, ksatck: usize) {
    80015ae8:	1141                	addi	sp,sp,-16
    80015aea:	e02a                	sd	a0,0(sp)
    80015aec:	e42e                	sd	a1,8(sp)
        self.kstack = ksatck;
    80015aee:	e10c                	sd	a1,0(a0)
    }
    80015af0:	0141                	addi	sp,sp,16
    80015af2:	8082                	ret

Disassembly of section .text._ZN6kernel7process7process11task_struct13set_trapframe17he9793e67a5624ae0E:

0000000080015af4 <_ZN6kernel7process7process11task_struct13set_trapframe17he9793e67a5624ae0E>:
    pub fn set_trapframe(&mut self, trapframe: *mut Trapframe) {
    80015af4:	1141                	addi	sp,sp,-16
    80015af6:	e02a                	sd	a0,0(sp)
    80015af8:	e42e                	sd	a1,8(sp)
        self.trapframe = trapframe;
    80015afa:	f10c                	sd	a1,32(a0)
    }
    80015afc:	0141                	addi	sp,sp,16
    80015afe:	8082                	ret

Disassembly of section .text._ZN6kernel7process7process11task_struct13set_pagetable17h12660694e7e3e9cdE:

0000000080015b00 <_ZN6kernel7process7process11task_struct13set_pagetable17h12660694e7e3e9cdE>:
    pub fn set_pagetable(&mut self, pagetable: *mut PageTable) {
    80015b00:	1141                	addi	sp,sp,-16
    80015b02:	e02a                	sd	a0,0(sp)
    80015b04:	e42e                	sd	a1,8(sp)
        self.pagetable = pagetable
    80015b06:	ed0c                	sd	a1,24(a0)
    }
    80015b08:	0141                	addi	sp,sp,16
    80015b0a:	8082                	ret

Disassembly of section .text._ZN6kernel7process7process11task_struct12init_context17hb9b4e203886f153dE:

0000000080015b0c <_ZN6kernel7process7process11task_struct12init_context17hb9b4e203886f153dE>:
    pub fn init_context(&mut self) {
    80015b0c:	7139                	addi	sp,sp,-64
    80015b0e:	fc06                	sd	ra,56(sp)
    80015b10:	ec2a                	sd	a0,24(sp)
    80015b12:	f42a                	sd	a0,40(sp)
        let kstack = self.kstack;
    80015b14:	610c                	ld	a1,0(a0)
    80015b16:	f02e                	sd	a1,32(sp)
    80015b18:	f82e                	sd	a1,48(sp)
        self.context.write_zero();
    80015b1a:	02850513          	addi	a0,a0,40
    80015b1e:	ffffd097          	auipc	ra,0xffffd
    80015b22:	a22080e7          	jalr	-1502(ra) # 80012540 <_ZN6kernel7process7context7Context10write_zero17hffd0e59e9c54d2c3E>
    80015b26:	a009                	j	80015b28 <_ZN6kernel7process7process11task_struct12init_context17hb9b4e203886f153dE+0x1c>
        self.context.write_ra(fork_ret as usize);
    80015b28:	6562                	ld	a0,24(sp)
    80015b2a:	02850513          	addi	a0,a0,40

0000000080015b2e <.LBB6_6>:
    80015b2e:	00008597          	auipc	a1,0x8
    80015b32:	bbe58593          	addi	a1,a1,-1090 # 8001d6ec <_ZN6kernel7process8fork_ret17hc655e7da156c9445E>
    80015b36:	ffffd097          	auipc	ra,0xffffd
    80015b3a:	a32080e7          	jalr	-1486(ra) # 80012568 <_ZN6kernel7process7context7Context8write_ra17h453112740fa52877E>
    80015b3e:	a009                	j	80015b40 <.LBB6_6+0x12>
        self.context.write_sp(kstack + PGSIZE);
    80015b40:	7582                	ld	a1,32(sp)
    80015b42:	6562                	ld	a0,24(sp)
    80015b44:	02850513          	addi	a0,a0,40
    80015b48:	e42a                	sd	a0,8(sp)
    80015b4a:	6505                	lui	a0,0x1
    80015b4c:	952e                	add	a0,a0,a1
    80015b4e:	e82a                	sd	a0,16(sp)
    80015b50:	00b56d63          	bltu	a0,a1,80015b6a <.LBB6_7>
    80015b54:	a009                	j	80015b56 <.LBB6_6+0x28>
    80015b56:	65c2                	ld	a1,16(sp)
    80015b58:	6522                	ld	a0,8(sp)
    80015b5a:	ffffd097          	auipc	ra,0xffffd
    80015b5e:	a1a080e7          	jalr	-1510(ra) # 80012574 <_ZN6kernel7process7context7Context8write_sp17h0ed724aed1960a6aE>
    80015b62:	a009                	j	80015b64 <.LBB6_6+0x36>
    }
    80015b64:	70e2                	ld	ra,56(sp)
    80015b66:	6121                	addi	sp,sp,64
    80015b68:	8082                	ret

0000000080015b6a <.LBB6_7>:
        self.context.write_sp(kstack + PGSIZE);
    80015b6a:	00014517          	auipc	a0,0x14
    80015b6e:	13650513          	addi	a0,a0,310 # 80029ca0 <str.0>

0000000080015b72 <.LBB6_8>:
    80015b72:	00014617          	auipc	a2,0x14
    80015b76:	11660613          	addi	a2,a2,278 # 80029c88 <.L__unnamed_1>
    80015b7a:	45f1                	li	a1,28
    80015b7c:	0000c097          	auipc	ra,0xc
    80015b80:	6fa080e7          	jalr	1786(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel7process7process11task_struct19find_unallocated_fd17h9a4fcee1b88c6c86E:

0000000080015b86 <_ZN6kernel7process7process11task_struct19find_unallocated_fd17h9a4fcee1b88c6c86E>:
    pub fn find_unallocated_fd(&self) -> Result<usize, &'static str> {
    80015b86:	7175                	addi	sp,sp,-144
    80015b88:	e506                	sd	ra,136(sp)
    80015b8a:	f02e                	sd	a1,32(sp)
    80015b8c:	f42a                	sd	a0,40(sp)
    80015b8e:	f4ae                	sd	a1,104(sp)
        for fd in 0..self.open_files.len() {
    80015b90:	0a858513          	addi	a0,a1,168
    80015b94:	06400593          	li	a1,100
    80015b98:	ffff9097          	auipc	ra,0xffff9
    80015b9c:	8f6080e7          	jalr	-1802(ra) # 8000e48e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h659c29622d59b861E>
    80015ba0:	f82a                	sd	a0,48(sp)
    80015ba2:	a009                	j	80015ba4 <_ZN6kernel7process7process11task_struct19find_unallocated_fd17h9a4fcee1b88c6c86E+0x1e>
    80015ba4:	75c2                	ld	a1,48(sp)
    80015ba6:	4501                	li	a0,0
    80015ba8:	fc2a                	sd	a0,56(sp)
    80015baa:	e0ae                	sd	a1,64(sp)
    80015bac:	0000a097          	auipc	ra,0xa
    80015bb0:	d96080e7          	jalr	-618(ra) # 8001f942 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he0a8d93712e5493bE>
    80015bb4:	e82a                	sd	a0,16(sp)
    80015bb6:	ec2e                	sd	a1,24(sp)
    80015bb8:	a009                	j	80015bba <_ZN6kernel7process7process11task_struct19find_unallocated_fd17h9a4fcee1b88c6c86E+0x34>
    80015bba:	6562                	ld	a0,24(sp)
    80015bbc:	65c2                	ld	a1,16(sp)
    80015bbe:	e4ae                	sd	a1,72(sp)
    80015bc0:	e8aa                	sd	a0,80(sp)
    80015bc2:	a009                	j	80015bc4 <_ZN6kernel7process7process11task_struct19find_unallocated_fd17h9a4fcee1b88c6c86E+0x3e>
    80015bc4:	00a8                	addi	a0,sp,72
    80015bc6:	0000a097          	auipc	ra,0xa
    80015bca:	d0e080e7          	jalr	-754(ra) # 8001f8d4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE>
    80015bce:	ecaa                	sd	a0,88(sp)
    80015bd0:	f0ae                	sd	a1,96(sp)
    80015bd2:	a009                	j	80015bd4 <_ZN6kernel7process7process11task_struct19find_unallocated_fd17h9a4fcee1b88c6c86E+0x4e>
    80015bd4:	6566                	ld	a0,88(sp)
    80015bd6:	4581                	li	a1,0
    80015bd8:	00b50463          	beq	a0,a1,80015be0 <_ZN6kernel7process7process11task_struct19find_unallocated_fd17h9a4fcee1b88c6c86E+0x5a>
    80015bdc:	a009                	j	80015bde <_ZN6kernel7process7process11task_struct19find_unallocated_fd17h9a4fcee1b88c6c86E+0x58>
    80015bde:	a829                	j	80015bf8 <.LBB7_15+0x16>
        Err("Fail to find unallocted fd")
    80015be0:	75a2                	ld	a1,40(sp)

0000000080015be2 <.LBB7_15>:
    80015be2:	00014517          	auipc	a0,0x14
    80015be6:	0f650513          	addi	a0,a0,246 # 80029cd8 <.L__unnamed_2>
    80015bea:	e588                	sd	a0,8(a1)
    80015bec:	4569                	li	a0,26
    80015bee:	e988                	sd	a0,16(a1)
    80015bf0:	4505                	li	a0,1
    80015bf2:	e188                	sd	a0,0(a1)
    }
    80015bf4:	a0a1                	j	80015c3c <.LBB7_15+0x5a>
        for fd in 0..self.open_files.len() {
    80015bf6:	0000                	unimp
    80015bf8:	7586                	ld	a1,96(sp)
    80015bfa:	e42e                	sd	a1,8(sp)
    80015bfc:	f8ae                	sd	a1,112(sp)
    80015bfe:	fcae                	sd	a1,120(sp)
    80015c00:	e12e                	sd	a1,128(sp)
    80015c02:	06300513          	li	a0,99
            if self.open_files[fd].is_none() {
    80015c06:	02b56e63          	bltu	a0,a1,80015c42 <.LBB7_15+0x60>
    80015c0a:	a009                	j	80015c0c <.LBB7_15+0x2a>
    80015c0c:	7502                	ld	a0,32(sp)
    80015c0e:	65a2                	ld	a1,8(sp)
    80015c10:	058e                	slli	a1,a1,0x3
    80015c12:	952e                	add	a0,a0,a1
    80015c14:	0a850513          	addi	a0,a0,168
    80015c18:	ffff9097          	auipc	ra,0xffff9
    80015c1c:	334080e7          	jalr	820(ra) # 8000ef4c <_ZN4core6option15Option$LT$T$GT$7is_none17h8590a3c5c2d3d42aE>
    80015c20:	e02a                	sd	a0,0(sp)
    80015c22:	a009                	j	80015c24 <.LBB7_15+0x42>
    80015c24:	6502                	ld	a0,0(sp)
    80015c26:	4581                	li	a1,0
    80015c28:	00b50963          	beq	a0,a1,80015c3a <.LBB7_15+0x58>
    80015c2c:	a009                	j	80015c2e <.LBB7_15+0x4c>
                return Ok(fd)
    80015c2e:	75a2                	ld	a1,40(sp)
    80015c30:	6522                	ld	a0,8(sp)
    80015c32:	e588                	sd	a0,8(a1)
    80015c34:	4501                	li	a0,0
    80015c36:	e188                	sd	a0,0(a1)
    }
    80015c38:	a011                	j	80015c3c <.LBB7_15+0x5a>
        for fd in 0..self.open_files.len() {
    80015c3a:	b769                	j	80015bc4 <_ZN6kernel7process7process11task_struct19find_unallocated_fd17h9a4fcee1b88c6c86E+0x3e>
    }
    80015c3c:	60aa                	ld	ra,136(sp)
    80015c3e:	6149                	addi	sp,sp,144
    80015c40:	8082                	ret
            if self.open_files[fd].is_none() {
    80015c42:	6522                	ld	a0,8(sp)

0000000080015c44 <.LBB7_16>:
    80015c44:	00014617          	auipc	a2,0x14
    80015c48:	07c60613          	addi	a2,a2,124 # 80029cc0 <.L__unnamed_3>
    80015c4c:	06400593          	li	a1,100
    80015c50:	0000c097          	auipc	ra,0xc
    80015c54:	652080e7          	jalr	1618(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel7process7process11task_struct9user_init17hc3178b7a708271cbE:

0000000080015c5a <_ZN6kernel7process7process11task_struct9user_init17hc3178b7a708271cbE>:
    pub fn user_init(&mut self) {
    80015c5a:	7139                	addi	sp,sp,-64
    80015c5c:	fc06                	sd	ra,56(sp)
    80015c5e:	e82a                	sd	a0,16(sp)
    80015c60:	f42a                	sd	a0,40(sp)
        let tf = unsafe{ &mut *self.trapframe };
    80015c62:	7108                	ld	a0,32(a0)
    80015c64:	ec2a                	sd	a0,24(sp)
    80015c66:	f82a                	sd	a0,48(sp)
        tf.kernel_satp = unsafe{ satp::read() };
    80015c68:	00009097          	auipc	ra,0x9
    80015c6c:	a5e080e7          	jalr	-1442(ra) # 8001e6c6 <_ZN6kernel4arch5riscv8register4satp4read17h0624a35f6368d5a6E>
    80015c70:	f02a                	sd	a0,32(sp)
    80015c72:	a009                	j	80015c74 <_ZN6kernel7process7process11task_struct9user_init17hc3178b7a708271cbE+0x1a>
    80015c74:	6542                	ld	a0,16(sp)
    80015c76:	7582                	ld	a1,32(sp)
    80015c78:	6662                	ld	a2,24(sp)
    80015c7a:	e20c                	sd	a1,0(a2)
        tf.kernel_sp = self.kstack + PGSIZE * 4;
    80015c7c:	610c                	ld	a1,0(a0)
    80015c7e:	6511                	lui	a0,0x4
    80015c80:	952e                	add	a0,a0,a1
    80015c82:	e42a                	sd	a0,8(sp)
    80015c84:	02b56763          	bltu	a0,a1,80015cb2 <.LBB8_6>
    80015c88:	a009                	j	80015c8a <_ZN6kernel7process7process11task_struct9user_init17hc3178b7a708271cbE+0x30>
    80015c8a:	65e2                	ld	a1,24(sp)
    80015c8c:	6522                	ld	a0,8(sp)
    80015c8e:	e588                	sd	a0,8(a1)

0000000080015c90 <.LBB8_5>:
        tf.kernel_trap = user_trap as usize;
    80015c90:	ffff0517          	auipc	a0,0xffff0
    80015c94:	50c50513          	addi	a0,a0,1292 # 8000619c <user_trap>
    80015c98:	e988                	sd	a0,16(a1)
            cpu::cpuid()
    80015c9a:	ffffc097          	auipc	ra,0xffffc
    80015c9e:	0fc080e7          	jalr	252(ra) # 80011d96 <_ZN6kernel7process3cpu5cpuid17h605093a6a9a60164E>
    80015ca2:	e02a                	sd	a0,0(sp)
    80015ca4:	a009                	j	80015ca6 <.LBB8_5+0x16>
        tf.kernel_hartid = unsafe {
    80015ca6:	6502                	ld	a0,0(sp)
    80015ca8:	65e2                	ld	a1,24(sp)
    80015caa:	f188                	sd	a0,32(a1)
    }
    80015cac:	70e2                	ld	ra,56(sp)
    80015cae:	6121                	addi	sp,sp,64
    80015cb0:	8082                	ret

0000000080015cb2 <.LBB8_6>:
        tf.kernel_sp = self.kstack + PGSIZE * 4;
    80015cb2:	00014517          	auipc	a0,0x14
    80015cb6:	fee50513          	addi	a0,a0,-18 # 80029ca0 <str.0>

0000000080015cba <.LBB8_7>:
    80015cba:	00014617          	auipc	a2,0x14
    80015cbe:	03e60613          	addi	a2,a2,62 # 80029cf8 <.L__unnamed_4>
    80015cc2:	45f1                	li	a1,28
    80015cc4:	0000c097          	auipc	ra,0xc
    80015cc8:	5b2080e7          	jalr	1458(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel7process7process11task_struct4init17h302d3726f13c442bE:

0000000080015cce <_ZN6kernel7process7process11task_struct4init17h302d3726f13c442bE>:
    pub fn init(&mut self, kstack: usize) {
    80015cce:	81010113          	addi	sp,sp,-2032
    80015cd2:	7e113423          	sd	ra,2024(sp)
    80015cd6:	660d                	lui	a2,0x3
    80015cd8:	7e06061b          	addiw	a2,a2,2016
    80015cdc:	40c10133          	sub	sp,sp,a2
    80015ce0:	fd2e                	sd	a1,184(sp)
    80015ce2:	e1aa                	sd	a0,192(sp)
    80015ce4:	660d                	lui	a2,0x3
    80015ce6:	6206061b          	addiw	a2,a2,1568
    80015cea:	960a                	add	a2,a2,sp
    80015cec:	e208                	sd	a0,0(a2)
    80015cee:	650d                	lui	a0,0x3
    80015cf0:	6285051b          	addiw	a0,a0,1576
    80015cf4:	950a                	add	a0,a0,sp
    80015cf6:	e10c                	sd	a1,0(a0)
        self.open_files = array![_ => None; NFILE];
    80015cf8:	a009                	j	80015cfa <_ZN6kernel7process7process11task_struct4init17h302d3726f13c442bE+0x2c>
    80015cfa:	650d                	lui	a0,0x3
    80015cfc:	6405051b          	addiw	a0,a0,1600
    80015d00:	950a                	add	a0,a0,sp
    80015d02:	852a                	mv	a0,a0
    80015d04:	f52a                	sd	a0,168(sp)
    80015d06:	6585                	lui	a1,0x1
    80015d08:	6b85859b          	addiw	a1,a1,1720
    80015d0c:	958a                	add	a1,a1,sp
    80015d0e:	85ae                	mv	a1,a1
    80015d10:	32000613          	li	a2,800
    #[must_use = "if you don't need the wrapper, you can use `mem::forget` instead"]
    #[stable(feature = "manually_drop", since = "1.20.0")]
    #[rustc_const_stable(feature = "const_manually_drop", since = "1.36.0")]
    #[inline(always)]
    pub const fn new(value: T) -> ManuallyDrop<T> {
        ManuallyDrop { value }
    80015d14:	f932                	sd	a2,176(sp)
    80015d16:	0000f097          	auipc	ra,0xf
    80015d1a:	3ce080e7          	jalr	974(ra) # 800250e4 <memcpy>
    80015d1e:	75aa                	ld	a1,168(sp)
    80015d20:	764a                	ld	a2,176(sp)
    80015d22:	6505                	lui	a0,0x1
    80015d24:	3985051b          	addiw	a0,a0,920
    80015d28:	950a                	add	a0,a0,sp
    80015d2a:	852a                	mv	a0,a0
    80015d2c:	0000f097          	auipc	ra,0xf
    80015d30:	3b8080e7          	jalr	952(ra) # 800250e4 <memcpy>
    80015d34:	a009                	j	80015d36 <_ZN6kernel7process7process11task_struct4init17h302d3726f13c442bE+0x68>
    80015d36:	6505                	lui	a0,0x1
    80015d38:	0785051b          	addiw	a0,a0,120
    80015d3c:	950a                	add	a0,a0,sp
    80015d3e:	852a                	mv	a0,a0
    80015d40:	e92a                	sd	a0,144(sp)
    80015d42:	6585                	lui	a1,0x1
    80015d44:	3985859b          	addiw	a1,a1,920
    80015d48:	958a                	add	a1,a1,sp
    80015d4a:	85ae                	mv	a1,a1
    80015d4c:	32000613          	li	a2,800
    80015d50:	f132                	sd	a2,160(sp)
    80015d52:	0000f097          	auipc	ra,0xf
    80015d56:	392080e7          	jalr	914(ra) # 800250e4 <memcpy>
    80015d5a:	65ca                	ld	a1,144(sp)
    80015d5c:	760a                	ld	a2,160(sp)
    80015d5e:	6505                	lui	a0,0x1
    80015d60:	d585051b          	addiw	a0,a0,-680
    80015d64:	950a                	add	a0,a0,sp
    80015d66:	852a                	mv	a0,a0
    80015d68:	ed2a                	sd	a0,152(sp)
    80015d6a:	0000f097          	auipc	ra,0xf
    80015d6e:	37a080e7          	jalr	890(ra) # 800250e4 <memcpy>
    80015d72:	65ea                	ld	a1,152(sp)
    80015d74:	760a                	ld	a2,160(sp)
    80015d76:	6505                	lui	a0,0x1
    80015d78:	a385051b          	addiw	a0,a0,-1480
    80015d7c:	950a                	add	a0,a0,sp
    80015d7e:	852a                	mv	a0,a0
    /// ```
    #[stable(feature = "manually_drop", since = "1.20.0")]
    #[rustc_const_stable(feature = "const_manually_drop", since = "1.36.0")]
    #[inline(always)]
    pub const fn into_inner(slot: ManuallyDrop<T>) -> T {
        slot.value
    80015d80:	0000f097          	auipc	ra,0xf
    80015d84:	364080e7          	jalr	868(ra) # 800250e4 <memcpy>
    80015d88:	a009                	j	80015d8a <_ZN6kernel7process7process11task_struct4init17h302d3726f13c442bE+0xbc>
    80015d8a:	71010513          	addi	a0,sp,1808
    80015d8e:	6585                	lui	a1,0x1
    80015d90:	a385859b          	addiw	a1,a1,-1480
    80015d94:	958a                	add	a1,a1,sp
    80015d96:	85ae                	mv	a1,a1
    80015d98:	ffff5097          	auipc	ra,0xffff5
    80015d9c:	e0e080e7          	jalr	-498(ra) # 8000aba6 <_ZN11array_macro28__ArrayVecInner$LT$T$C$_$GT$3new17h8c73fc7516a84ce9E>
    80015da0:	a009                	j	80015da2 <_ZN6kernel7process7process11task_struct4init17h302d3726f13c442bE+0xd4>
    80015da2:	17a8                	addi	a0,sp,1000
    80015da4:	71010593          	addi	a1,sp,1808
    80015da8:	32800613          	li	a2,808
    80015dac:	0000f097          	auipc	ra,0xf
    80015db0:	338080e7          	jalr	824(ra) # 800250e4 <memcpy>
    80015db4:	a009                	j	80015db6 <_ZN6kernel7process7process11task_struct4init17h302d3726f13c442bE+0xe8>
    80015db6:	70813503          	ld	a0,1800(sp)
    80015dba:	e12a                	sd	a0,128(sp)
    80015dbc:	17a8                	addi	a0,sp,1000
    80015dbe:	ffff5097          	auipc	ra,0xffff5
    80015dc2:	ddc080e7          	jalr	-548(ra) # 8000ab9a <_ZN11array_macro19__Capacity$LT$_$GT$3get17hecfc1cf2bb733562E>
    80015dc6:	e52a                	sd	a0,136(sp)
    80015dc8:	a009                	j	80015dca <_ZN6kernel7process7process11task_struct4init17h302d3726f13c442bE+0xfc>
    80015dca:	650a                	ld	a0,128(sp)
    80015dcc:	65aa                	ld	a1,136(sp)
    80015dce:	04b56963          	bltu	a0,a1,80015e20 <_ZN6kernel7process7process11task_struct4init17h302d3726f13c442bE+0x152>
    80015dd2:	a009                	j	80015dd4 <_ZN6kernel7process7process11task_struct4init17h302d3726f13c442bE+0x106>
    80015dd4:	6509                	lui	a0,0x2
    80015dd6:	6785051b          	addiw	a0,a0,1656
    80015dda:	950a                	add	a0,a0,sp
    80015ddc:	852a                	mv	a0,a0
    80015dde:	f4aa                	sd	a0,104(sp)
    80015de0:	17ac                	addi	a1,sp,1000
    80015de2:	32800613          	li	a2,808
    80015de6:	fcb2                	sd	a2,120(sp)
    80015de8:	0000f097          	auipc	ra,0xf
    80015dec:	2fc080e7          	jalr	764(ra) # 800250e4 <memcpy>
    80015df0:	75a6                	ld	a1,104(sp)
    80015df2:	7666                	ld	a2,120(sp)
    80015df4:	6511                	lui	a0,0x4
    80015df6:	ca05051b          	addiw	a0,a0,-864
    80015dfa:	950a                	add	a0,a0,sp
    80015dfc:	852a                	mv	a0,a0
        ManuallyDrop { value }
    80015dfe:	f8aa                	sd	a0,112(sp)
    80015e00:	0000f097          	auipc	ra,0xf
    80015e04:	2e4080e7          	jalr	740(ra) # 800250e4 <memcpy>
    80015e08:	75c6                	ld	a1,112(sp)
    80015e0a:	7666                	ld	a2,120(sp)
    80015e0c:	6509                	lui	a0,0x2
    80015e0e:	3505051b          	addiw	a0,a0,848
    80015e12:	950a                	add	a0,a0,sp
    80015e14:	852a                	mv	a0,a0
    80015e16:	0000f097          	auipc	ra,0xf
    80015e1a:	2ce080e7          	jalr	718(ra) # 800250e4 <memcpy>
    80015e1e:	a0bd                	j	80015e8c <_ZN6kernel7process7process11task_struct4init17h302d3726f13c442bE+0x1be>
    80015e20:	4501                	li	a0,0
    80015e22:	658d                	lui	a1,0x3
    80015e24:	6385859b          	addiw	a1,a1,1592
    80015e28:	958a                	add	a1,a1,sp
    80015e2a:	e188                	sd	a0,0(a1)
    80015e2c:	6591                	lui	a1,0x4
    80015e2e:	c885859b          	addiw	a1,a1,-888
    80015e32:	958a                	add	a1,a1,sp
    80015e34:	e188                	sd	a0,0(a1)
    80015e36:	6591                	lui	a1,0x4
    80015e38:	c985859b          	addiw	a1,a1,-872
    80015e3c:	958a                	add	a1,a1,sp
    80015e3e:	e188                	sd	a0,0(a1)
    80015e40:	6591                	lui	a1,0x4
    80015e42:	c905859b          	addiw	a1,a1,-880
    80015e46:	958a                	add	a1,a1,sp
    80015e48:	e188                	sd	a0,0(a1)
    /// [`assume_init`]: MaybeUninit::assume_init
    #[stable(feature = "maybe_uninit", since = "1.36.0")]
    #[rustc_const_stable(feature = "const_maybe_uninit", since = "1.36.0")]
    #[inline(always)]
    pub const fn new(val: T) -> MaybeUninit<T> {
        MaybeUninit { value: ManuallyDrop::new(val) }
    80015e4a:	6591                	lui	a1,0x4
    80015e4c:	c805859b          	addiw	a1,a1,-896
    80015e50:	958a                	add	a1,a1,sp
    80015e52:	e188                	sd	a0,0(a1)
    80015e54:	a009                	j	80015e56 <_ZN6kernel7process7process11task_struct4init17h302d3726f13c442bE+0x188>
    80015e56:	70813583          	ld	a1,1800(sp)
    80015e5a:	f0ae                	sd	a1,96(sp)
    80015e5c:	06300513          	li	a0,99
    80015e60:	16b56063          	bltu	a0,a1,80015fc0 <_ZN6kernel7process7process11task_struct4init17h302d3726f13c442bE+0x2f2>
    80015e64:	a009                	j	80015e66 <_ZN6kernel7process7process11task_struct4init17h302d3726f13c442bE+0x198>
    80015e66:	7506                	ld	a0,96(sp)
    80015e68:	00351593          	slli	a1,a0,0x3
    80015e6c:	17a8                	addi	a0,sp,1000
    80015e6e:	95aa                	add	a1,a1,a0
    80015e70:	4501                	li	a0,0
    80015e72:	e188                	sd	a0,0(a1)
    80015e74:	70813583          	ld	a1,1800(sp)
    80015e78:	00158513          	addi	a0,a1,1 # 4001 <.Lline_table_start0+0x38c>
    80015e7c:	ecaa                	sd	a0,88(sp)
    80015e7e:	14b56d63          	bltu	a0,a1,80015fd8 <.LBB9_21>
    80015e82:	a009                	j	80015e84 <_ZN6kernel7process7process11task_struct4init17h302d3726f13c442bE+0x1b6>
    80015e84:	6566                	ld	a0,88(sp)
    80015e86:	70a13423          	sd	a0,1800(sp)
    80015e8a:	b735                	j	80015db6 <_ZN6kernel7process7process11task_struct4init17h302d3726f13c442bE+0xe8>
    80015e8c:	6509                	lui	a0,0x2
    80015e8e:	0285051b          	addiw	a0,a0,40
    80015e92:	950a                	add	a0,a0,sp
    80015e94:	852a                	mv	a0,a0
    80015e96:	e0aa                	sd	a0,64(sp)
    80015e98:	6589                	lui	a1,0x2
    80015e9a:	3505859b          	addiw	a1,a1,848
    80015e9e:	958a                	add	a1,a1,sp
    80015ea0:	85ae                	mv	a1,a1
    80015ea2:	32800613          	li	a2,808
    80015ea6:	e8b2                	sd	a2,80(sp)
    80015ea8:	0000f097          	auipc	ra,0xf
    80015eac:	23c080e7          	jalr	572(ra) # 800250e4 <memcpy>
    80015eb0:	6586                	ld	a1,64(sp)
    80015eb2:	6646                	ld	a2,80(sp)
    80015eb4:	6509                	lui	a0,0x2
    80015eb6:	d005051b          	addiw	a0,a0,-768
    80015eba:	950a                	add	a0,a0,sp
    80015ebc:	852a                	mv	a0,a0
    80015ebe:	e4aa                	sd	a0,72(sp)
    80015ec0:	0000f097          	auipc	ra,0xf
    80015ec4:	224080e7          	jalr	548(ra) # 800250e4 <memcpy>
    80015ec8:	65a6                	ld	a1,72(sp)
    80015eca:	6646                	ld	a2,80(sp)
    80015ecc:	6509                	lui	a0,0x2
    80015ece:	9d85051b          	addiw	a0,a0,-1576
    80015ed2:	950a                	add	a0,a0,sp
    80015ed4:	852a                	mv	a0,a0
        slot.value
    80015ed6:	0000f097          	auipc	ra,0xf
    80015eda:	20e080e7          	jalr	526(ra) # 800250e4 <memcpy>
    80015ede:	a009                	j	80015ee0 <_ZN6kernel7process7process11task_struct4init17h302d3726f13c442bE+0x212>
    80015ee0:	650d                	lui	a0,0x3
    80015ee2:	3005051b          	addiw	a0,a0,768
    80015ee6:	950a                	add	a0,a0,sp
    80015ee8:	852a                	mv	a0,a0
    80015eea:	f42a                	sd	a0,40(sp)
    80015eec:	6589                	lui	a1,0x2
    80015eee:	9d85859b          	addiw	a1,a1,-1576
    80015ef2:	958a                	add	a1,a1,sp
    80015ef4:	85ae                	mv	a1,a1
    80015ef6:	32000613          	li	a2,800
    80015efa:	fc32                	sd	a2,56(sp)
    80015efc:	0000f097          	auipc	ra,0xf
    80015f00:	1e8080e7          	jalr	488(ra) # 800250e4 <memcpy>
    80015f04:	75a2                	ld	a1,40(sp)
    80015f06:	7662                	ld	a2,56(sp)
    80015f08:	6511                	lui	a0,0x4
    80015f0a:	9605051b          	addiw	a0,a0,-1696
    80015f0e:	950a                	add	a0,a0,sp
    80015f10:	852a                	mv	a0,a0
        ManuallyDrop { value }
    80015f12:	f82a                	sd	a0,48(sp)
    80015f14:	0000f097          	auipc	ra,0xf
    80015f18:	1d0080e7          	jalr	464(ra) # 800250e4 <memcpy>
    80015f1c:	75c2                	ld	a1,48(sp)
    80015f1e:	7662                	ld	a2,56(sp)
    80015f20:	650d                	lui	a0,0x3
    80015f22:	3501                	addiw	a0,a0,-32
    80015f24:	950a                	add	a0,a0,sp
    80015f26:	852a                	mv	a0,a0
    80015f28:	0000f097          	auipc	ra,0xf
    80015f2c:	1bc080e7          	jalr	444(ra) # 800250e4 <memcpy>
    80015f30:	a009                	j	80015f32 <_ZN6kernel7process7process11task_struct4init17h302d3726f13c442bE+0x264>
    80015f32:	650d                	lui	a0,0x3
    80015f34:	cc05051b          	addiw	a0,a0,-832
    80015f38:	950a                	add	a0,a0,sp
    80015f3a:	852a                	mv	a0,a0
    80015f3c:	e82a                	sd	a0,16(sp)
    80015f3e:	658d                	lui	a1,0x3
    80015f40:	3581                	addiw	a1,a1,-32
    80015f42:	958a                	add	a1,a1,sp
    80015f44:	85ae                	mv	a1,a1
    80015f46:	32000613          	li	a2,800
    80015f4a:	f032                	sd	a2,32(sp)
    80015f4c:	0000f097          	auipc	ra,0xf
    80015f50:	198080e7          	jalr	408(ra) # 800250e4 <memcpy>
    80015f54:	65c2                	ld	a1,16(sp)
    80015f56:	7602                	ld	a2,32(sp)
    80015f58:	650d                	lui	a0,0x3
    80015f5a:	9a05051b          	addiw	a0,a0,-1632
    80015f5e:	950a                	add	a0,a0,sp
    80015f60:	852a                	mv	a0,a0
    80015f62:	ec2a                	sd	a0,24(sp)
    80015f64:	0000f097          	auipc	ra,0xf
    80015f68:	180080e7          	jalr	384(ra) # 800250e4 <memcpy>
    80015f6c:	65e2                	ld	a1,24(sp)
    80015f6e:	7602                	ld	a2,32(sp)
    80015f70:	01a8                	addi	a0,sp,200
        slot.value
    80015f72:	0000f097          	auipc	ra,0xf
    80015f76:	172080e7          	jalr	370(ra) # 800250e4 <memcpy>
    80015f7a:	a009                	j	80015f7c <_ZN6kernel7process7process11task_struct4init17h302d3726f13c442bE+0x2ae>
    80015f7c:	650e                	ld	a0,192(sp)
    80015f7e:	0a850513          	addi	a0,a0,168 # 30a8 <.Lline_table_start0+0x126>
    80015f82:	ffff1097          	auipc	ra,0xffff1
    80015f86:	e0a080e7          	jalr	-502(ra) # 80006d8c <_ZN4core3ptr119drop_in_place$LT$$u5b$core..option..Option$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$$u3b$$u20$100$u5d$$GT$17ha293b69a65138838E>
    80015f8a:	a811                	j	80015f9e <_ZN6kernel7process7process11task_struct4init17h302d3726f13c442bE+0x2d0>
    }
    80015f8c:	650d                	lui	a0,0x3
    80015f8e:	7e05051b          	addiw	a0,a0,2016
    80015f92:	912a                	add	sp,sp,a0
    80015f94:	7e813083          	ld	ra,2024(sp)
    80015f98:	7f010113          	addi	sp,sp,2032
    80015f9c:	8082                	ret
        self.open_files = array![_ => None; NFILE];
    80015f9e:	650e                	ld	a0,192(sp)
    80015fa0:	0a850513          	addi	a0,a0,168 # 30a8 <.Lline_table_start0+0x126>
    80015fa4:	01ac                	addi	a1,sp,200
    80015fa6:	32000613          	li	a2,800
    80015faa:	0000f097          	auipc	ra,0xf
    80015fae:	13a080e7          	jalr	314(ra) # 800250e4 <memcpy>
    80015fb2:	75ea                	ld	a1,184(sp)
        self.set_kstack(kstack);
    80015fb4:	650e                	ld	a0,192(sp)
    80015fb6:	00000097          	auipc	ra,0x0
    80015fba:	b32080e7          	jalr	-1230(ra) # 80015ae8 <_ZN6kernel7process7process11task_struct10set_kstack17h1eb46020e3181b64E>
    80015fbe:	b7f9                	j	80015f8c <_ZN6kernel7process7process11task_struct4init17h302d3726f13c442bE+0x2be>
        self.open_files = array![_ => None; NFILE];
    80015fc0:	7506                	ld	a0,96(sp)

0000000080015fc2 <.LBB9_20>:
    80015fc2:	00014617          	auipc	a2,0x14
    80015fc6:	d4e60613          	addi	a2,a2,-690 # 80029d10 <.L__unnamed_5>
    80015fca:	06400593          	li	a1,100
    80015fce:	0000c097          	auipc	ra,0xc
    80015fd2:	2d4080e7          	jalr	724(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

0000000080015fd8 <.LBB9_21>:
    80015fd8:	00014517          	auipc	a0,0x14
    80015fdc:	cc850513          	addi	a0,a0,-824 # 80029ca0 <str.0>

0000000080015fe0 <.LBB9_22>:
    80015fe0:	00014617          	auipc	a2,0x14
    80015fe4:	d3060613          	addi	a2,a2,-720 # 80029d10 <.L__unnamed_5>
    80015fe8:	45f1                	li	a1,28
    80015fea:	0000c097          	auipc	ra,0xc
    80015fee:	28c080e7          	jalr	652(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel7process7process11task_struct6killed17h4fc8d78e83fc4243E:

0000000080015ff4 <_ZN6kernel7process7process11task_struct6killed17h4fc8d78e83fc4243E>:
    pub fn killed(&self) -> bool {
    80015ff4:	1141                	addi	sp,sp,-16
    80015ff6:	e42a                	sd	a0,8(sp)
        self.killed
    80015ff8:	40954503          	lbu	a0,1033(a0)
    }
    80015ffc:	0141                	addi	sp,sp,16
    80015ffe:	8082                	ret

Disassembly of section .text._ZN6kernel7process7process11task_struct3pid17hf16723aa87a30b20E:

0000000080016000 <_ZN6kernel7process7process11task_struct3pid17hf16723aa87a30b20E>:
    pub fn pid(&self) -> usize {
    80016000:	1141                	addi	sp,sp,-16
    80016002:	e42a                	sd	a0,8(sp)
        self.pid
    80016004:	3f053503          	ld	a0,1008(a0)
    }
    80016008:	0141                	addi	sp,sp,16
    8001600a:	8082                	ret

Disassembly of section .text._ZN6kernel7process7process11task_struct9set_state17h31b362f9ace47b8fE:

000000008001600c <_ZN6kernel7process7process11task_struct9set_state17h31b362f9ace47b8fE>:
    pub fn set_state(&mut self, state: ProcState) {
    8001600c:	1141                	addi	sp,sp,-16
    8001600e:	e02a                	sd	a0,0(sp)
    80016010:	00b107a3          	sb	a1,15(sp)
        self.state = state;
    80016014:	40b50423          	sb	a1,1032(a0)
    }
    80016018:	0141                	addi	sp,sp,16
    8001601a:	8082                	ret

Disassembly of section .text._ZN6kernel7process7process11task_struct5state17h188201629a7bcaa5E:

000000008001601c <_ZN6kernel7process7process11task_struct5state17h188201629a7bcaa5E>:
    pub fn state(&self) -> ProcState {
    8001601c:	1141                	addi	sp,sp,-16
    8001601e:	e42a                	sd	a0,8(sp)
    }
    80016020:	40850503          	lb	a0,1032(a0)
    80016024:	0141                	addi	sp,sp,16
    80016026:	8082                	ret

Disassembly of section .text._ZN6kernel7process7process11task_struct4name17he8a035723af8acadE:

0000000080016028 <_ZN6kernel7process7process11task_struct4name17he8a035723af8acadE>:
    pub fn name(&self) -> &str {
    80016028:	7139                	addi	sp,sp,-64
    8001602a:	fc06                	sd	ra,56(sp)
    8001602c:	f82a                	sd	a0,48(sp)
        from_utf8(&self.name).unwrap()
    8001602e:	3f850593          	addi	a1,a0,1016
    80016032:	0828                	addi	a0,sp,24
    80016034:	4641                	li	a2,16
    80016036:	0000e097          	auipc	ra,0xe
    8001603a:	a8e080e7          	jalr	-1394(ra) # 80023ac4 <_ZN4core3str8converts9from_utf817h3f0a2d8686bfd9bbE>
    8001603e:	a009                	j	80016040 <.LBB14_3>

0000000080016040 <.LBB14_3>:
    80016040:	00014597          	auipc	a1,0x14
    80016044:	ce858593          	addi	a1,a1,-792 # 80029d28 <.L__unnamed_6>
    80016048:	0828                	addi	a0,sp,24
    8001604a:	ffff7097          	auipc	ra,0xffff7
    8001604e:	e9e080e7          	jalr	-354(ra) # 8000cee8 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17he7e280ca90d46427E>
    80016052:	e42a                	sd	a0,8(sp)
    80016054:	e82e                	sd	a1,16(sp)
    80016056:	a009                	j	80016058 <.LBB14_3+0x18>
    }
    80016058:	65c2                	ld	a1,16(sp)
    8001605a:	6522                	ld	a0,8(sp)
    8001605c:	70e2                	ld	ra,56(sp)
    8001605e:	6121                	addi	sp,sp,64
    80016060:	8082                	ret

Disassembly of section .text._ZN6kernel7process7process11task_struct11modify_kill17hb12febfdeb8e8d03E:

0000000080016062 <_ZN6kernel7process7process11task_struct11modify_kill17hb12febfdeb8e8d03E>:
    pub fn modify_kill(&mut self, killed: bool) {
    80016062:	1141                	addi	sp,sp,-16
    80016064:	e02a                	sd	a0,0(sp)
    80016066:	00b107a3          	sb	a1,15(sp)
        self.killed = killed;
    8001606a:	40b504a3          	sb	a1,1033(a0)
    }
    8001606e:	0141                	addi	sp,sp,16
    80016070:	8082                	ret

Disassembly of section .text._ZN6kernel7process7process11task_struct14proc_pagetable17h014e9ba7c74d9318E:

0000000080016072 <_ZN6kernel7process7process11task_struct14proc_pagetable17h014e9ba7c74d9318E>:
    pub fn proc_pagetable(&self) -> *mut PageTable {
    80016072:	7175                	addi	sp,sp,-144
    80016074:	e506                	sd	ra,136(sp)
    80016076:	ecaa                	sd	a0,88(sp)
    80016078:	f8aa                	sd	a0,112(sp)
        let mut page_table = unsafe{ PageTable::uvmcreate() };
    8001607a:	00001097          	auipc	ra,0x1
    8001607e:	3ea080e7          	jalr	1002(ra) # 80017464 <_ZN6kernel6memory7mapping10page_table9PageTable9uvmcreate17hc2bd2b6aed1ce488E>
    80016082:	85aa                	mv	a1,a0
    80016084:	f0ae                	sd	a1,96(sp)
    80016086:	fcaa                	sd	a0,120(sp)
    80016088:	a009                	j	8001608a <_ZN6kernel7process7process11task_struct14proc_pagetable17h014e9ba7c74d9318E+0x18>
        let pagetable = unsafe { &mut *page_table };
    8001608a:	7506                	ld	a0,96(sp)
    8001608c:	e12a                	sd	a0,128(sp)
    8001608e:	04000537          	lui	a0,0x4000
    80016092:	357d                	addiw	a0,a0,-1
    80016094:	0532                	slli	a0,a0,0xc
            VirtualAddress::new(TRAMPOLINE), 
    80016096:	ffffb097          	auipc	ra,0xffffb
    8001609a:	7ca080e7          	jalr	1994(ra) # 80011860 <_ZN6kernel6memory7address14VirtualAddress3new17h716be423461f1938E>
    8001609e:	e8aa                	sd	a0,80(sp)
    800160a0:	a009                	j	800160a2 <.LBB16_20>

00000000800160a2 <.LBB16_20>:
            PhysicalAddress::new(trampoline as usize),
    800160a2:	fffeb517          	auipc	a0,0xfffeb
    800160a6:	f5e50513          	addi	a0,a0,-162 # 80001000 <trampoline>
    800160aa:	ffffc097          	auipc	ra,0xffffc
    800160ae:	866080e7          	jalr	-1946(ra) # 80011910 <_ZN6kernel6memory7address15PhysicalAddress3new17hf2b76f8479ac6235E>
    800160b2:	e4aa                	sd	a0,72(sp)
    800160b4:	a009                	j	800160b6 <.LBB16_20+0x14>
    800160b6:	4509                	li	a0,2
    800160b8:	45a1                	li	a1,8
             PteFlags::R | PteFlags::X
    800160ba:	ffff2097          	auipc	ra,0xffff2
    800160be:	796080e7          	jalr	1942(ra) # 80008850 <_ZN93_$LT$kernel..memory..mapping..page_table_entry..PteFlags$u20$as$u20$core..ops..bit..BitOr$GT$5bitor17h95bfa721b377cbd2E>
    800160c2:	e0aa                	sd	a0,64(sp)
    800160c4:	a009                	j	800160c6 <.LBB16_20+0x24>
            if !pagetable.map(
    800160c6:	6706                	ld	a4,64(sp)
    800160c8:	6626                	ld	a2,72(sp)
    800160ca:	65c6                	ld	a1,80(sp)
    800160cc:	7506                	ld	a0,96(sp)
    800160ce:	6685                	lui	a3,0x1
    800160d0:	00001097          	auipc	ra,0x1
    800160d4:	16a080e7          	jalr	362(ra) # 8001723a <_ZN6kernel6memory7mapping10page_table9PageTable3map17h08dc54e6ac3f590cE>
    800160d8:	fc2a                	sd	a0,56(sp)
    800160da:	a009                	j	800160dc <.LBB16_20+0x3a>
    800160dc:	7562                	ld	a0,56(sp)
    800160de:	e909                	bnez	a0,800160f0 <.LBB16_20+0x4e>
    800160e0:	a009                	j	800160e2 <.LBB16_20+0x40>
                pagetable.uvm_free(0);
    800160e2:	7506                	ld	a0,96(sp)
    800160e4:	4581                	li	a1,0
    800160e6:	00001097          	auipc	ra,0x1
    800160ea:	5fe080e7          	jalr	1534(ra) # 800176e4 <_ZN6kernel6memory7mapping10page_table9PageTable8uvm_free17h541177c5e75f280dE>
    800160ee:	a819                	j	80016104 <.LBB16_20+0x62>
    800160f0:	02000537          	lui	a0,0x2000
    800160f4:	357d                	addiw	a0,a0,-1
    800160f6:	0536                	slli	a0,a0,0xd
                VirtualAddress::new(TRAPFRAME), 
    800160f8:	ffffb097          	auipc	ra,0xffffb
    800160fc:	768080e7          	jalr	1896(ra) # 80011860 <_ZN6kernel6memory7address14VirtualAddress3new17h716be423461f1938E>
    80016100:	f82a                	sd	a0,48(sp)
    80016102:	a021                	j	8001610a <.LBB16_20+0x68>
    80016104:	4501                	li	a0,0
                return null_mut();
    80016106:	f4aa                	sd	a0,104(sp)
    80016108:	a069                	j	80016192 <.LBB16_20+0xf0>
                PhysicalAddress::new(self.get_trapframe() as usize), 
    8001610a:	6566                	ld	a0,88(sp)
    8001610c:	00000097          	auipc	ra,0x0
    80016110:	966080e7          	jalr	-1690(ra) # 80015a72 <_ZN6kernel7process7process11task_struct13get_trapframe17h4f5c89f7bc6c38b6E>
    80016114:	f42a                	sd	a0,40(sp)
    80016116:	a009                	j	80016118 <.LBB16_20+0x76>
    80016118:	7522                	ld	a0,40(sp)
    8001611a:	ffffb097          	auipc	ra,0xffffb
    8001611e:	7f6080e7          	jalr	2038(ra) # 80011910 <_ZN6kernel6memory7address15PhysicalAddress3new17hf2b76f8479ac6235E>
    80016122:	f02a                	sd	a0,32(sp)
    80016124:	a009                	j	80016126 <.LBB16_20+0x84>
    80016126:	4509                	li	a0,2
    80016128:	4591                	li	a1,4
                PteFlags::R | PteFlags::W
    8001612a:	ffff2097          	auipc	ra,0xffff2
    8001612e:	726080e7          	jalr	1830(ra) # 80008850 <_ZN93_$LT$kernel..memory..mapping..page_table_entry..PteFlags$u20$as$u20$core..ops..bit..BitOr$GT$5bitor17h95bfa721b377cbd2E>
    80016132:	ec2a                	sd	a0,24(sp)
    80016134:	a009                	j	80016136 <.LBB16_20+0x94>
            if !pagetable.map(
    80016136:	6762                	ld	a4,24(sp)
    80016138:	7602                	ld	a2,32(sp)
    8001613a:	75c2                	ld	a1,48(sp)
    8001613c:	7506                	ld	a0,96(sp)
    8001613e:	6685                	lui	a3,0x1
    80016140:	00001097          	auipc	ra,0x1
    80016144:	0fa080e7          	jalr	250(ra) # 8001723a <_ZN6kernel6memory7mapping10page_table9PageTable3map17h08dc54e6ac3f590cE>
    80016148:	e82a                	sd	a0,16(sp)
    8001614a:	a009                	j	8001614c <.LBB16_20+0xaa>
    8001614c:	6542                	ld	a0,16(sp)
    8001614e:	ed01                	bnez	a0,80016166 <.LBB16_20+0xc4>
    80016150:	a009                	j	80016152 <.LBB16_20+0xb0>
    80016152:	02000537          	lui	a0,0x2000
    80016156:	357d                	addiw	a0,a0,-1
    80016158:	0536                	slli	a0,a0,0xd
                    VirtualAddress::new(TRAPFRAME), 
    8001615a:	ffffb097          	auipc	ra,0xffffb
    8001615e:	706080e7          	jalr	1798(ra) # 80011860 <_ZN6kernel6memory7address14VirtualAddress3new17h716be423461f1938E>
    80016162:	e42a                	sd	a0,8(sp)
    80016164:	a021                	j	8001616c <.LBB16_20+0xca>
        page_table
    80016166:	7506                	ld	a0,96(sp)
    80016168:	f4aa                	sd	a0,104(sp)
    }
    8001616a:	a025                	j	80016192 <.LBB16_20+0xf0>
                pagetable.uvm_unmap(
    8001616c:	65a2                	ld	a1,8(sp)
    8001616e:	7506                	ld	a0,96(sp)
    80016170:	4605                	li	a2,1
    80016172:	4681                	li	a3,0
    80016174:	00001097          	auipc	ra,0x1
    80016178:	6b2080e7          	jalr	1714(ra) # 80017826 <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_unmap17hab395d2793038c03E>
    8001617c:	a009                	j	8001617e <.LBB16_20+0xdc>
                pagetable.uvm_free(0);
    8001617e:	7506                	ld	a0,96(sp)
    80016180:	4581                	li	a1,0
    80016182:	00001097          	auipc	ra,0x1
    80016186:	562080e7          	jalr	1378(ra) # 800176e4 <_ZN6kernel6memory7mapping10page_table9PageTable8uvm_free17h541177c5e75f280dE>
    8001618a:	a009                	j	8001618c <.LBB16_20+0xea>
    8001618c:	4501                	li	a0,0
                return null_mut();
    8001618e:	f4aa                	sd	a0,104(sp)
    80016190:	a009                	j	80016192 <.LBB16_20+0xf0>
    }
    80016192:	7526                	ld	a0,104(sp)
    80016194:	60aa                	ld	ra,136(sp)
    80016196:	6149                	addi	sp,sp,144
    80016198:	8082                	ret

Disassembly of section .text._ZN6kernel7process7process11task_struct9free_proc17h164acbc3102fa45eE:

000000008001619a <_ZN6kernel7process7process11task_struct9free_proc17h164acbc3102fa45eE>:
    pub fn free_proc(&mut self) {
    8001619a:	715d                	addi	sp,sp,-80
    8001619c:	e486                	sd	ra,72(sp)
    8001619e:	e42a                	sd	a0,8(sp)
    800161a0:	fc2a                	sd	a0,56(sp)
        if !self.trapframe.is_null() {
    800161a2:	7108                	ld	a0,32(a0)
    800161a4:	00008097          	auipc	ra,0x8
    800161a8:	b86080e7          	jalr	-1146(ra) # 8001dd2a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h188cc5d34f3b14d9E>
    800161ac:	e82a                	sd	a0,16(sp)
    800161ae:	a009                	j	800161b0 <_ZN6kernel7process7process11task_struct9free_proc17h164acbc3102fa45eE+0x16>
    800161b0:	6542                	ld	a0,16(sp)
    800161b2:	e119                	bnez	a0,800161b8 <_ZN6kernel7process7process11task_struct9free_proc17h164acbc3102fa45eE+0x1e>
    800161b4:	a009                	j	800161b6 <_ZN6kernel7process7process11task_struct9free_proc17h164acbc3102fa45eE+0x1c>
            unsafe { drop_in_place(self.trapframe as *mut RawPage) };
    800161b6:	a011                	j	800161ba <_ZN6kernel7process7process11task_struct9free_proc17h164acbc3102fa45eE+0x20>
        if !self.trapframe.is_null() {
    800161b8:	a0b1                	j	80016204 <_ZN6kernel7process7process11task_struct9free_proc17h164acbc3102fa45eE+0x6a>
            self.set_trapframe(0 as *mut Trapframe);
    800161ba:	6522                	ld	a0,8(sp)
    800161bc:	4581                	li	a1,0
    800161be:	00000097          	auipc	ra,0x0
    800161c2:	936080e7          	jalr	-1738(ra) # 80015af4 <_ZN6kernel7process7process11task_struct13set_trapframe17he9793e67a5624ae0E>
    800161c6:	a009                	j	800161c8 <_ZN6kernel7process7process11task_struct9free_proc17h164acbc3102fa45eE+0x2e>
            let pagetable = unsafe { &mut *self.pagetable };
    800161c8:	6522                	ld	a0,8(sp)
    800161ca:	6d0c                	ld	a1,24(a0)
    800161cc:	e0ae                	sd	a1,64(sp)
    800161ce:	4581                	li	a1,0
            self.set_parent(None);
    800161d0:	f02e                	sd	a1,32(sp)
    800161d2:	7622                	ld	a2,40(sp)
    800161d4:	00000097          	auipc	ra,0x0
    800161d8:	904080e7          	jalr	-1788(ra) # 80015ad8 <_ZN6kernel7process7process11task_struct10set_parent17h7c6b213c4b558281E>
    800161dc:	a009                	j	800161de <_ZN6kernel7process7process11task_struct9free_proc17h164acbc3102fa45eE+0x44>
    800161de:	6522                	ld	a0,8(sp)
    800161e0:	4581                	li	a1,0
            self.size = 0;
    800161e2:	e90c                	sd	a1,16(a0)
            self.pid = 0;
    800161e4:	3eb53823          	sd	a1,1008(a0) # 20003f0 <.Lline_table_start0+0x1fc98ee>
            self.channel = 0;
    800161e8:	3eb53023          	sd	a1,992(a0)
            self.killed = false;
    800161ec:	40b504a3          	sb	a1,1033(a0)
            self.xstate = 0;
    800161f0:	3eb53423          	sd	a1,1000(a0)
            self.set_state(ProcState::UNUSED);
    800161f4:	02b10ba3          	sb	a1,55(sp)
    800161f8:	00000097          	auipc	ra,0x0
    800161fc:	e14080e7          	jalr	-492(ra) # 8001600c <_ZN6kernel7process7process11task_struct9set_state17h31b362f9ace47b8fE>
    80016200:	a009                	j	80016202 <_ZN6kernel7process7process11task_struct9free_proc17h164acbc3102fa45eE+0x68>
        if !self.trapframe.is_null() {
    80016202:	a009                	j	80016204 <_ZN6kernel7process7process11task_struct9free_proc17h164acbc3102fa45eE+0x6a>
    }
    80016204:	60a6                	ld	ra,72(sp)
    80016206:	6161                	addi	sp,sp,80
    80016208:	8082                	ret

Disassembly of section .text._ZN6kernel7process7process11task_struct11free_thread17ha65c5f78ade6bf2bE:

000000008001620a <_ZN6kernel7process7process11task_struct11free_thread17ha65c5f78ade6bf2bE>:
    pub fn free_thread(&mut self) {
    8001620a:	715d                	addi	sp,sp,-80
    8001620c:	e486                	sd	ra,72(sp)
    8001620e:	e82a                	sd	a0,16(sp)
    80016210:	e0aa                	sd	a0,64(sp)
        if !self.trapframe.is_null() {
    80016212:	7108                	ld	a0,32(a0)
    80016214:	00008097          	auipc	ra,0x8
    80016218:	b16080e7          	jalr	-1258(ra) # 8001dd2a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h188cc5d34f3b14d9E>
    8001621c:	ec2a                	sd	a0,24(sp)
    8001621e:	a009                	j	80016220 <_ZN6kernel7process7process11task_struct11free_thread17ha65c5f78ade6bf2bE+0x16>
    80016220:	6562                	ld	a0,24(sp)
    80016222:	e119                	bnez	a0,80016228 <_ZN6kernel7process7process11task_struct11free_thread17ha65c5f78ade6bf2bE+0x1e>
    80016224:	a009                	j	80016226 <_ZN6kernel7process7process11task_struct11free_thread17ha65c5f78ade6bf2bE+0x1c>
            unsafe { drop_in_place(self.trapframe as *mut RawPage); }
    80016226:	a011                	j	8001622a <_ZN6kernel7process7process11task_struct11free_thread17ha65c5f78ade6bf2bE+0x20>
        if !self.trapframe.is_null() {
    80016228:	a8a9                	j	80016282 <_ZN6kernel7process7process11task_struct11free_thread17ha65c5f78ade6bf2bE+0x78>
            self.set_trapframe(0 as *mut Trapframe);
    8001622a:	6542                	ld	a0,16(sp)
    8001622c:	4581                	li	a1,0
    8001622e:	00000097          	auipc	ra,0x0
    80016232:	8c6080e7          	jalr	-1850(ra) # 80015af4 <_ZN6kernel7process7process11task_struct13set_trapframe17he9793e67a5624ae0E>
    80016236:	a009                	j	80016238 <_ZN6kernel7process7process11task_struct11free_thread17ha65c5f78ade6bf2bE+0x2e>
            self.set_pagetable(0 as *mut PageTable);
    80016238:	6542                	ld	a0,16(sp)
    8001623a:	4581                	li	a1,0
    8001623c:	00000097          	auipc	ra,0x0
    80016240:	8c4080e7          	jalr	-1852(ra) # 80015b00 <_ZN6kernel7process7process11task_struct13set_pagetable17h12660694e7e3e9cdE>
    80016244:	a009                	j	80016246 <_ZN6kernel7process7process11task_struct11free_thread17ha65c5f78ade6bf2bE+0x3c>
    80016246:	6542                	ld	a0,16(sp)
    80016248:	4581                	li	a1,0
            self.set_parent(None);
    8001624a:	f42e                	sd	a1,40(sp)
    8001624c:	7642                	ld	a2,48(sp)
    8001624e:	00000097          	auipc	ra,0x0
    80016252:	88a080e7          	jalr	-1910(ra) # 80015ad8 <_ZN6kernel7process7process11task_struct10set_parent17h7c6b213c4b558281E>
    80016256:	a009                	j	80016258 <_ZN6kernel7process7process11task_struct11free_thread17ha65c5f78ade6bf2bE+0x4e>
    80016258:	6542                	ld	a0,16(sp)
    8001625a:	4581                	li	a1,0
            self.size = 0;
    8001625c:	e42e                	sd	a1,8(sp)
    8001625e:	e90c                	sd	a1,16(a0)
            self.thread_ustack = 0;
    80016260:	e50c                	sd	a1,8(a0)
            self.pid = 0;
    80016262:	3eb53823          	sd	a1,1008(a0)
            self.channel = 0;
    80016266:	3eb53023          	sd	a1,992(a0)
            self.killed = false;
    8001626a:	40b504a3          	sb	a1,1033(a0)
            self.xstate = 0;
    8001626e:	3eb53423          	sd	a1,1000(a0)
            self.set_state(ProcState::UNUSED);
    80016272:	02b10fa3          	sb	a1,63(sp)
    80016276:	00000097          	auipc	ra,0x0
    8001627a:	d96080e7          	jalr	-618(ra) # 8001600c <_ZN6kernel7process7process11task_struct9set_state17h31b362f9ace47b8fE>
    8001627e:	a009                	j	80016280 <_ZN6kernel7process7process11task_struct11free_thread17ha65c5f78ade6bf2bE+0x76>
        if !self.trapframe.is_null() {
    80016280:	a009                	j	80016282 <_ZN6kernel7process7process11task_struct11free_thread17ha65c5f78ade6bf2bE+0x78>
    }
    80016282:	60a6                	ld	ra,72(sp)
    80016284:	6161                	addi	sp,sp,80
    80016286:	8082                	ret

Disassembly of section .text._ZN6kernel7process7process11task_struct9grow_proc17h401c24eda5b4fae0E:

0000000080016288 <_ZN6kernel7process7process11task_struct9grow_proc17h401c24eda5b4fae0E>:
    pub fn grow_proc(&mut self, count: isize) -> Result<(), &'static str> {
    80016288:	7175                	addi	sp,sp,-144
    8001628a:	e506                	sd	ra,136(sp)
    8001628c:	f02e                	sd	a1,32(sp)
    8001628e:	f42a                	sd	a0,40(sp)
    80016290:	f0aa                	sd	a0,96(sp)
    80016292:	f4ae                	sd	a1,104(sp)
        let mut size = self.size; 
    80016294:	6910                	ld	a2,16(a0)
    80016296:	e4b2                	sd	a2,72(sp)
        let page_table = unsafe { &mut *self.pagetable };
    80016298:	6d08                	ld	a0,24(a0)
    8001629a:	f82a                	sd	a0,48(sp)
    8001629c:	f8aa                	sd	a0,112(sp)
    8001629e:	4505                	li	a0,1
        if count > 0 {
    800162a0:	00a5cb63          	blt	a1,a0,800162b6 <_ZN6kernel7process7process11task_struct9grow_proc17h401c24eda5b4fae0E+0x2e>
    800162a4:	a009                	j	800162a6 <_ZN6kernel7process7process11task_struct9grow_proc17h401c24eda5b4fae0E+0x1e>
            match unsafe { page_table.uvm_alloc(size, size + count as usize) } {
    800162a6:	7502                	ld	a0,32(sp)
    800162a8:	65a6                	ld	a1,72(sp)
    800162aa:	e82e                	sd	a1,16(sp)
    800162ac:	952e                	add	a0,a0,a1
    800162ae:	ec2a                	sd	a0,24(sp)
    800162b0:	08b56b63          	bltu	a0,a1,80016346 <.LBB19_18>
    800162b4:	a031                	j	800162c0 <_ZN6kernel7process7process11task_struct9grow_proc17h401c24eda5b4fae0E+0x38>
    800162b6:	7502                	ld	a0,32(sp)
    800162b8:	4581                	li	a1,0
        } else if count < 0 {
    800162ba:	04b54163          	blt	a0,a1,800162fc <.LBB19_17+0x1c>
    800162be:	a899                	j	80016314 <.LBB19_17+0x34>
            match unsafe { page_table.uvm_alloc(size, size + count as usize) } {
    800162c0:	6662                	ld	a2,24(sp)
    800162c2:	65c2                	ld	a1,16(sp)
    800162c4:	7542                	ld	a0,48(sp)
    800162c6:	00001097          	auipc	ra,0x1
    800162ca:	2dc080e7          	jalr	732(ra) # 800175a2 <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_alloc17h600a2c8e8dc8349aE>
    800162ce:	e8aa                	sd	a0,80(sp)
    800162d0:	ecae                	sd	a1,88(sp)
    800162d2:	a009                	j	800162d4 <_ZN6kernel7process7process11task_struct9grow_proc17h401c24eda5b4fae0E+0x4c>
                Some(new_size) => {
    800162d4:	6546                	ld	a0,80(sp)
    800162d6:	4581                	li	a1,0
    800162d8:	00b50463          	beq	a0,a1,800162e0 <.LBB19_17>
    800162dc:	a009                	j	800162de <_ZN6kernel7process7process11task_struct9grow_proc17h401c24eda5b4fae0E+0x56>
    800162de:	a819                	j	800162f4 <.LBB19_17+0x14>

00000000800162e0 <.LBB19_17>:
                    return Err("Fail to allocate virtual memory for user")
    800162e0:	00014517          	auipc	a0,0x14
    800162e4:	a7850513          	addi	a0,a0,-1416 # 80029d58 <.L__unnamed_7>
    800162e8:	fc2a                	sd	a0,56(sp)
    800162ea:	02800513          	li	a0,40
    800162ee:	e0aa                	sd	a0,64(sp)
    }
    800162f0:	a0b1                	j	8001633c <.LBB19_17+0x5c>
            match unsafe { page_table.uvm_alloc(size, size + count as usize) } {
    800162f2:	0000                	unimp
                Some(new_size) => {
    800162f4:	6566                	ld	a0,88(sp)
    800162f6:	fcaa                	sd	a0,120(sp)
                    size = new_size;
    800162f8:	e4aa                	sd	a0,72(sp)
        if count > 0 {
    800162fa:	a81d                	j	80016330 <.LBB19_17+0x50>
            let new_size = (size as isize + count) as usize;
    800162fc:	7502                	ld	a0,32(sp)
    800162fe:	6626                	ld	a2,72(sp)
    80016300:	00a605b3          	add	a1,a2,a0
    80016304:	e42e                	sd	a1,8(sp)
    80016306:	00c5a5b3          	slt	a1,a1,a2
    8001630a:	00052513          	slti	a0,a0,0
    8001630e:	8d2d                	xor	a0,a0,a1
    80016310:	e929                	bnez	a0,80016362 <.LBB19_20>
    80016312:	a011                	j	80016316 <.LBB19_17+0x36>
        } else if count < 0 {
    80016314:	a831                	j	80016330 <.LBB19_17+0x50>
            let new_size = (size as isize + count) as usize;
    80016316:	6622                	ld	a2,8(sp)
    80016318:	7542                	ld	a0,48(sp)
    8001631a:	e132                	sd	a2,128(sp)
            size = page_table.uvm_dealloc(size, new_size);
    8001631c:	65a6                	ld	a1,72(sp)
    8001631e:	00001097          	auipc	ra,0x1
    80016322:	434080e7          	jalr	1076(ra) # 80017752 <_ZN6kernel6memory7mapping10page_table9PageTable11uvm_dealloc17hf5596dd69dc9e626E>
    80016326:	e02a                	sd	a0,0(sp)
    80016328:	a009                	j	8001632a <.LBB19_17+0x4a>
    8001632a:	6502                	ld	a0,0(sp)
    8001632c:	e4aa                	sd	a0,72(sp)
        } else if count < 0 {
    8001632e:	a009                	j	80016330 <.LBB19_17+0x50>
        self.size = size;
    80016330:	75a2                	ld	a1,40(sp)
    80016332:	6526                	ld	a0,72(sp)
    80016334:	e988                	sd	a0,16(a1)
    80016336:	4501                	li	a0,0
        Ok(())
    80016338:	fc2a                	sd	a0,56(sp)
    }
    8001633a:	a009                	j	8001633c <.LBB19_17+0x5c>
    8001633c:	7562                	ld	a0,56(sp)
    8001633e:	6586                	ld	a1,64(sp)
    80016340:	60aa                	ld	ra,136(sp)
    80016342:	6149                	addi	sp,sp,144
    80016344:	8082                	ret

0000000080016346 <.LBB19_18>:
            match unsafe { page_table.uvm_alloc(size, size + count as usize) } {
    80016346:	00014517          	auipc	a0,0x14
    8001634a:	95a50513          	addi	a0,a0,-1702 # 80029ca0 <str.0>

000000008001634e <.LBB19_19>:
    8001634e:	00014617          	auipc	a2,0x14
    80016352:	9f260613          	addi	a2,a2,-1550 # 80029d40 <.L__unnamed_8>
    80016356:	45f1                	li	a1,28
    80016358:	0000c097          	auipc	ra,0xc
    8001635c:	f1e080e7          	jalr	-226(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080016362 <.LBB19_20>:
            let new_size = (size as isize + count) as usize;
    80016362:	00014517          	auipc	a0,0x14
    80016366:	93e50513          	addi	a0,a0,-1730 # 80029ca0 <str.0>

000000008001636a <.LBB19_21>:
    8001636a:	00014617          	auipc	a2,0x14
    8001636e:	a1660613          	addi	a2,a2,-1514 # 80029d80 <.L__unnamed_9>
    80016372:	45f1                	li	a1,28
    80016374:	0000c097          	auipc	ra,0xc
    80016378:	f02080e7          	jalr	-254(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel7process7process11task_struct8yielding17hffa4922f8aee5a94E:

000000008001637e <_ZN6kernel7process7process11task_struct8yielding17hffa4922f8aee5a94E>:
    pub fn yielding(&mut self) {
    8001637e:	7139                	addi	sp,sp,-64
    80016380:	fc06                	sd	ra,56(sp)
    80016382:	e42a                	sd	a0,8(sp)
    80016384:	f02a                	sd	a0,32(sp)
    80016386:	6541                	lui	a0,0x10
    80016388:	4085059b          	addiw	a1,a0,1032

000000008001638c <.LBB20_6>:
    8001638c:	00041517          	auipc	a0,0x41
    80016390:	21450513          	addi	a0,a0,532 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    80016394:	952e                	add	a0,a0,a1
        let guard = unsafe { PROC_MANAGER.tasks_lock.acquire() };
    80016396:	ffffa097          	auipc	ra,0xffffa
    8001639a:	478080e7          	jalr	1144(ra) # 8001080e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    8001639e:	85aa                	mv	a1,a0
    800163a0:	e82e                	sd	a1,16(sp)
    800163a2:	f42a                	sd	a0,40(sp)
    800163a4:	a009                	j	800163a6 <.LBB20_6+0x1a>
    800163a6:	6522                	ld	a0,8(sp)
    800163a8:	458d                	li	a1,3
        self.set_state(ProcState::RUNNABLE);
    800163aa:	00b10fa3          	sb	a1,31(sp)
    800163ae:	00000097          	auipc	ra,0x0
    800163b2:	c5e080e7          	jalr	-930(ra) # 8001600c <_ZN6kernel7process7process11task_struct9set_state17h31b362f9ace47b8fE>
    800163b6:	a009                	j	800163b8 <.LBB20_7>

00000000800163b8 <.LBB20_7>:
            let my_cpu = CPU_MANAGER.mycpu();
    800163b8:	0005d517          	auipc	a0,0x5d
    800163bc:	d8850513          	addi	a0,a0,-632 # 80073140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    800163c0:	ffffc097          	auipc	ra,0xffffc
    800163c4:	9f2080e7          	jalr	-1550(ra) # 80011db2 <_ZN6kernel7process3cpu10CPUManager5mycpu17hac5ae6ce2070e7c3E>
    800163c8:	85aa                	mv	a1,a0
    800163ca:	e02e                	sd	a1,0(sp)
    800163cc:	f82a                	sd	a0,48(sp)
    800163ce:	a009                	j	800163d0 <.LBB20_7+0x18>
            my_cpu.sched();
    800163d0:	6502                	ld	a0,0(sp)
    800163d2:	ffffc097          	auipc	ra,0xffffc
    800163d6:	c52080e7          	jalr	-942(ra) # 80012024 <_ZN6kernel7process3cpu3CPU5sched17h6aec64bf33990cbcE>
    800163da:	a009                	j	800163dc <.LBB20_7+0x24>
        drop(guard);
    800163dc:	6542                	ld	a0,16(sp)
    800163de:	00007097          	auipc	ra,0x7
    800163e2:	c42080e7          	jalr	-958(ra) # 8001d020 <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    800163e6:	a009                	j	800163e8 <.LBB20_7+0x30>
    }
    800163e8:	70e2                	ld	ra,56(sp)
    800163ea:	6121                	addi	sp,sp,64
    800163ec:	8082                	ret

Disassembly of section .text._ZN6kernel7process7process11task_struct8fd_alloc17h2f054cafd5acb7f0E:

00000000800163ee <_ZN6kernel7process7process11task_struct8fd_alloc17h2f054cafd5acb7f0E>:

    /// Find a unallocated fd
    pub fn fd_alloc(&mut self, file: &VFile) -> Result<usize, &'static str>{
    800163ee:	7151                	addi	sp,sp,-240
    800163f0:	f586                	sd	ra,232(sp)
    800163f2:	f832                	sd	a2,48(sp)
    800163f4:	fc2e                	sd	a1,56(sp)
    800163f6:	e0aa                	sd	a0,64(sp)
    800163f8:	fd2e                	sd	a1,184(sp)
    800163fa:	e1b2                	sd	a2,192(sp)
    800163fc:	1088                	addi	a0,sp,96
        
        let fd = self.find_unallocated_fd()?;
    800163fe:	fffff097          	auipc	ra,0xfffff
    80016402:	788080e7          	jalr	1928(ra) # 80015b86 <_ZN6kernel7process7process11task_struct19find_unallocated_fd17h9a4fcee1b88c6c86E>
    80016406:	a009                	j	80016408 <_ZN6kernel7process7process11task_struct8fd_alloc17h2f054cafd5acb7f0E+0x1a>
    80016408:	00a8                	addi	a0,sp,72
    8001640a:	108c                	addi	a1,sp,96
    8001640c:	ffff7097          	auipc	ra,0xffff7
    80016410:	d6e080e7          	jalr	-658(ra) # 8000d17a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h0dd4a8728df8a7c8E>
    80016414:	a009                	j	80016416 <_ZN6kernel7process7process11task_struct8fd_alloc17h2f054cafd5acb7f0E+0x28>
    80016416:	6526                	ld	a0,72(sp)
    80016418:	4581                	li	a1,0
    8001641a:	00b50463          	beq	a0,a1,80016422 <_ZN6kernel7process7process11task_struct8fd_alloc17h2f054cafd5acb7f0E+0x34>
    8001641e:	a009                	j	80016420 <_ZN6kernel7process7process11task_struct8fd_alloc17h2f054cafd5acb7f0E+0x32>
    80016420:	a819                	j	80016436 <_ZN6kernel7process7process11task_struct8fd_alloc17h2f054cafd5acb7f0E+0x48>
    80016422:	6546                	ld	a0,80(sp)
    80016424:	f42a                	sd	a0,40(sp)
    80016426:	edaa                	sd	a0,216(sp)
    80016428:	f1aa                	sd	a0,224(sp)
    8001642a:	06400593          	li	a1,100
        self.open_files[fd].replace(Arc::new(file.clone()));
    8001642e:	02b56763          	bltu	a0,a1,8001645c <_ZN6kernel7process7process11task_struct8fd_alloc17h2f054cafd5acb7f0E+0x6e>
    80016432:	a049                	j	800164b4 <_ZN6kernel7process7process11task_struct8fd_alloc17h2f054cafd5acb7f0E+0xc6>
        let fd = self.find_unallocated_fd()?;
    80016434:	0000                	unimp
    80016436:	6546                	ld	a0,80(sp)
    80016438:	65e6                	ld	a1,88(sp)
    8001643a:	e5aa                	sd	a0,200(sp)
    8001643c:	e9ae                	sd	a1,208(sp)
    8001643e:	ffff5097          	auipc	ra,0xffff5
    80016442:	62e080e7          	jalr	1582(ra) # 8000ba6c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h6f3e3843c20d184aE>
    80016446:	ec2a                	sd	a0,24(sp)
    80016448:	f02e                	sd	a1,32(sp)
    8001644a:	a009                	j	8001644c <_ZN6kernel7process7process11task_struct8fd_alloc17h2f054cafd5acb7f0E+0x5e>
    8001644c:	7602                	ld	a2,32(sp)
    8001644e:	65e2                	ld	a1,24(sp)
    80016450:	6506                	ld	a0,64(sp)
    80016452:	ffff7097          	auipc	ra,0xffff7
    80016456:	c5a080e7          	jalr	-934(ra) # 8000d0ac <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h4dd43adfe00292f6E>
    8001645a:	a891                	j	800164ae <_ZN6kernel7process7process11task_struct8fd_alloc17h2f054cafd5acb7f0E+0xc0>
        self.open_files[fd].replace(Arc::new(file.clone()));
    8001645c:	75c2                	ld	a1,48(sp)
    8001645e:	7562                	ld	a0,56(sp)
    80016460:	7622                	ld	a2,40(sp)
    80016462:	060e                	slli	a2,a2,0x3
    80016464:	9532                	add	a0,a0,a2
    80016466:	0a850513          	addi	a0,a0,168
    8001646a:	e82a                	sd	a0,16(sp)
    8001646c:	0108                	addi	a0,sp,128
    8001646e:	ffff0097          	auipc	ra,0xffff0
    80016472:	c34080e7          	jalr	-972(ra) # 800060a2 <_ZN62_$LT$kernel..fs..file..VFile$u20$as$u20$core..clone..Clone$GT$5clone17hec76716ecfa94dd4E>
    80016476:	a009                	j	80016478 <_ZN6kernel7process7process11task_struct8fd_alloc17h2f054cafd5acb7f0E+0x8a>
    80016478:	0108                	addi	a0,sp,128
    8001647a:	fffec097          	auipc	ra,0xfffec
    8001647e:	f9e080e7          	jalr	-98(ra) # 80002418 <_ZN5alloc4sync12Arc$LT$T$GT$3new17h678276cd59118dbbE>
    80016482:	e42a                	sd	a0,8(sp)
    80016484:	a009                	j	80016486 <_ZN6kernel7process7process11task_struct8fd_alloc17h2f054cafd5acb7f0E+0x98>
    80016486:	65a2                	ld	a1,8(sp)
    80016488:	6542                	ld	a0,16(sp)
    8001648a:	ffff9097          	auipc	ra,0xffff9
    8001648e:	bc2080e7          	jalr	-1086(ra) # 8000f04c <_ZN4core6option15Option$LT$T$GT$7replace17hf852e6bb4a32ec9aE>
    80016492:	fcaa                	sd	a0,120(sp)
    80016494:	a009                	j	80016496 <_ZN6kernel7process7process11task_struct8fd_alloc17h2f054cafd5acb7f0E+0xa8>
    80016496:	18a8                	addi	a0,sp,120
    80016498:	ffff1097          	auipc	ra,0xffff1
    8001649c:	bb0080e7          	jalr	-1104(ra) # 80007048 <_ZN4core3ptr96drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$$GT$17hc79d9c89cd1d7f36E>
    800164a0:	a009                	j	800164a2 <_ZN6kernel7process7process11task_struct8fd_alloc17h2f054cafd5acb7f0E+0xb4>
        Ok(fd)       
    800164a2:	6586                	ld	a1,64(sp)
    800164a4:	7522                	ld	a0,40(sp)
    800164a6:	e588                	sd	a0,8(a1)
    800164a8:	4501                	li	a0,0
    800164aa:	e188                	sd	a0,0(a1)
    } 
    800164ac:	a009                	j	800164ae <_ZN6kernel7process7process11task_struct8fd_alloc17h2f054cafd5acb7f0E+0xc0>
    800164ae:	70ae                	ld	ra,232(sp)
    800164b0:	616d                	addi	sp,sp,240
    800164b2:	8082                	ret
        self.open_files[fd].replace(Arc::new(file.clone()));
    800164b4:	7522                	ld	a0,40(sp)

00000000800164b6 <.LBB21_15>:
    800164b6:	00014617          	auipc	a2,0x14
    800164ba:	8e260613          	addi	a2,a2,-1822 # 80029d98 <.L__unnamed_10>
    800164be:	06400593          	li	a1,100
    800164c2:	0000c097          	auipc	ra,0xc
    800164c6:	de0080e7          	jalr	-544(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel7process7process11task_struct4fork17h46aa3163aa049020E:

00000000800164cc <_ZN6kernel7process7process11task_struct4fork17h46aa3163aa049020E>:

    pub fn fork(&mut self) -> Option<&mut Self> {
    800164cc:	7151                	addi	sp,sp,-240
    800164ce:	f586                	sd	ra,232(sp)
    800164d0:	e0aa                	sd	a0,64(sp)
    800164d2:	e1aa                	sd	a0,192(sp)
        // 从表中获取未被分配的子进程
        if let Some(child_proc) = ProcManager::alloc_proc()  {
    800164d4:	ffff7097          	auipc	ra,0xffff7
    800164d8:	140080e7          	jalr	320(ra) # 8000d614 <_ZN6kernel7process7manager11ProcManager10alloc_proc17h18aef4c1178ef690E>
    800164dc:	e8aa                	sd	a0,80(sp)
    800164de:	a009                	j	800164e0 <_ZN6kernel7process7process11task_struct4fork17h46aa3163aa049020E+0x14>
    800164e0:	6546                	ld	a0,80(sp)
    800164e2:	4581                	li	a1,0
    800164e4:	02b51363          	bne	a0,a1,8001650a <.LBB22_20+0x18>
    800164e8:	a009                	j	800164ea <.LBB22_19>

00000000800164ea <.LBB22_19>:
            drop(guard);

            
            Some(child_proc)
        }else {
            println!("[Kernel] fork: None");
    800164ea:	00014597          	auipc	a1,0x14
    800164ee:	8de58593          	addi	a1,a1,-1826 # 80029dc8 <.L__unnamed_11>

00000000800164f2 <.LBB22_20>:
    800164f2:	00014697          	auipc	a3,0x14
    800164f6:	8e668693          	addi	a3,a3,-1818 # 80029dd8 <.L__unnamed_13>
    800164fa:	0908                	addi	a0,sp,144
    800164fc:	4605                	li	a2,1
    800164fe:	4701                	li	a4,0
    80016500:	fffef097          	auipc	ra,0xfffef
    80016504:	f6a080e7          	jalr	-150(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80016508:	a2f1                	j	800166d4 <.LBB22_25+0x38>
        if let Some(child_proc) = ProcManager::alloc_proc()  {
    8001650a:	6506                	ld	a0,64(sp)
    8001650c:	65c6                	ld	a1,80(sp)
    8001650e:	f82e                	sd	a1,48(sp)
    80016510:	e5ae                	sd	a1,200(sp)
            if unsafe{ self.pagetable.as_mut().unwrap().uvm_copy(
    80016512:	6d08                	ld	a0,24(a0)
    80016514:	ffff6097          	auipc	ra,0xffff6
    80016518:	67c080e7          	jalr	1660(ra) # 8000cb90 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17hfc3d5eeea9dab8e4E>
    8001651c:	fc2a                	sd	a0,56(sp)
    8001651e:	a009                	j	80016520 <.LBB22_20+0x2e>
    80016520:	7562                	ld	a0,56(sp)

0000000080016522 <.LBB22_21>:
    80016522:	00014597          	auipc	a1,0x14
    80016526:	8b658593          	addi	a1,a1,-1866 # 80029dd8 <.L__unnamed_13>
    8001652a:	ffff8097          	auipc	ra,0xffff8
    8001652e:	6a6080e7          	jalr	1702(ra) # 8000ebd0 <_ZN4core6option15Option$LT$T$GT$6unwrap17h2b22556a60663957E>
    80016532:	f42a                	sd	a0,40(sp)
    80016534:	a009                	j	80016536 <.LBB22_21+0x14>
                child_proc.pagetable.as_mut().unwrap(), 
    80016536:	7542                	ld	a0,48(sp)
    80016538:	6d08                	ld	a0,24(a0)
    8001653a:	ffff6097          	auipc	ra,0xffff6
    8001653e:	656080e7          	jalr	1622(ra) # 8000cb90 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17hfc3d5eeea9dab8e4E>
    80016542:	f02a                	sd	a0,32(sp)
    80016544:	a009                	j	80016546 <.LBB22_21+0x24>
    80016546:	7502                	ld	a0,32(sp)

0000000080016548 <.LBB22_22>:
    80016548:	00014597          	auipc	a1,0x14
    8001654c:	8a858593          	addi	a1,a1,-1880 # 80029df0 <.L__unnamed_14>
    80016550:	ffff8097          	auipc	ra,0xffff8
    80016554:	680080e7          	jalr	1664(ra) # 8000ebd0 <_ZN4core6option15Option$LT$T$GT$6unwrap17h2b22556a60663957E>
    80016558:	ec2a                	sd	a0,24(sp)
    8001655a:	a009                	j	8001655c <.LBB22_22+0x14>
                self.size
    8001655c:	65e2                	ld	a1,24(sp)
    8001655e:	7522                	ld	a0,40(sp)
    80016560:	6606                	ld	a2,64(sp)
    80016562:	6a10                	ld	a2,16(a2)
            if unsafe{ self.pagetable.as_mut().unwrap().uvm_copy(
    80016564:	00001097          	auipc	ra,0x1
    80016568:	46e080e7          	jalr	1134(ra) # 800179d2 <_ZN6kernel6memory7mapping10page_table9PageTable8uvm_copy17h09757305193d69e4E>
    8001656c:	ecaa                	sd	a0,88(sp)
    8001656e:	f0ae                	sd	a1,96(sp)
    80016570:	a009                	j	80016572 <.LBB22_22+0x2a>
    80016572:	08a8                	addi	a0,sp,88
    80016574:	ffff6097          	auipc	ra,0xffff6
    80016578:	7ea080e7          	jalr	2026(ra) # 8000cd5e <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h304118d236359d80E>
    8001657c:	e82a                	sd	a0,16(sp)
    8001657e:	a009                	j	80016580 <.LBB22_22+0x38>
    80016580:	6542                	ld	a0,16(sp)
    80016582:	4581                	li	a1,0
    80016584:	02b50263          	beq	a0,a1,800165a8 <.LBB22_24+0x16>
    80016588:	a009                	j	8001658a <.LBB22_23>

000000008001658a <.LBB22_23>:
                panic!("fork: Fail to copy data from parent process.")
    8001658a:	00014517          	auipc	a0,0x14
    8001658e:	87e50513          	addi	a0,a0,-1922 # 80029e08 <.L__unnamed_15>

0000000080016592 <.LBB22_24>:
    80016592:	00014617          	auipc	a2,0x14
    80016596:	8a660613          	addi	a2,a2,-1882 # 80029e38 <.L__unnamed_16>
    8001659a:	02c00593          	li	a1,44
    8001659e:	0000c097          	auipc	ra,0xc
    800165a2:	cd8080e7          	jalr	-808(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    800165a6:	0000                	unimp
            let ptf = self.trapframe as *const Trapframe;
    800165a8:	6586                	ld	a1,64(sp)
    800165aa:	7542                	ld	a0,48(sp)
    800165ac:	718c                	ld	a1,32(a1)
    800165ae:	e9ae                	sd	a1,208(sp)
            let child_tf = unsafe{ &mut *child_proc.trapframe };
    800165b0:	7108                	ld	a0,32(a0)
    800165b2:	e42a                	sd	a0,8(sp)
    800165b4:	edaa                	sd	a0,216(sp)
    800165b6:	12000613          	li	a2,288
            unsafe{ copy_nonoverlapping(ptf, child_tf, 1); }
    800165ba:	0000f097          	auipc	ra,0xf
    800165be:	b2a080e7          	jalr	-1238(ra) # 800250e4 <memcpy>
    800165c2:	66a2                	ld	a3,8(sp)
    800165c4:	6586                	ld	a1,64(sp)
    800165c6:	7542                	ld	a0,48(sp)
    800165c8:	4601                	li	a2,0
            child_tf.a0 = 0;
    800165ca:	fab0                	sd	a2,112(a3)
            child_proc.open_files.clone_from(&self.open_files);
    800165cc:	0a850513          	addi	a0,a0,168
    800165d0:	0a858593          	addi	a1,a1,168
    800165d4:	ffff8097          	auipc	ra,0xffff8
    800165d8:	e76080e7          	jalr	-394(ra) # 8000e44a <_ZN4core5clone5Clone10clone_from17h2b52fdc155b58fc3E>
    800165dc:	a009                	j	800165de <.LBB22_24+0x4c>
            child_proc.cwd.clone_from(&self.cwd);
    800165de:	6586                	ld	a1,64(sp)
    800165e0:	7542                	ld	a0,48(sp)
    800165e2:	3c850513          	addi	a0,a0,968
    800165e6:	3c858593          	addi	a1,a1,968
    800165ea:	ffff9097          	auipc	ra,0xffff9
    800165ee:	ab6080e7          	jalr	-1354(ra) # 8000f0a0 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$10clone_from17hf5f00fe6cb298a0dE>
    800165f2:	a009                	j	800165f4 <.LBB22_24+0x62>
            child_proc.name = self.name;
    800165f4:	6586                	ld	a1,64(sp)
    800165f6:	7542                	ld	a0,48(sp)
    800165f8:	4005c683          	lbu	a3,1024(a1)
    800165fc:	4015c603          	lbu	a2,1025(a1)
    80016600:	0622                	slli	a2,a2,0x8
    80016602:	8ed1                	or	a3,a3,a2
    80016604:	4025c703          	lbu	a4,1026(a1)
    80016608:	4035c603          	lbu	a2,1027(a1)
    8001660c:	0622                	slli	a2,a2,0x8
    8001660e:	8e59                	or	a2,a2,a4
    80016610:	0642                	slli	a2,a2,0x10
    80016612:	8ed1                	or	a3,a3,a2
    80016614:	4045c703          	lbu	a4,1028(a1)
    80016618:	4055c603          	lbu	a2,1029(a1)
    8001661c:	0622                	slli	a2,a2,0x8
    8001661e:	8f51                	or	a4,a4,a2
    80016620:	4065c783          	lbu	a5,1030(a1)
    80016624:	4075c603          	lbu	a2,1031(a1)
    80016628:	0622                	slli	a2,a2,0x8
    8001662a:	8e5d                	or	a2,a2,a5
    8001662c:	0642                	slli	a2,a2,0x10
    8001662e:	8e59                	or	a2,a2,a4
    80016630:	1602                	slli	a2,a2,0x20
    80016632:	8e55                	or	a2,a2,a3
    80016634:	f8b2                	sd	a2,112(sp)
    80016636:	3f85c683          	lbu	a3,1016(a1)
    8001663a:	3f95c603          	lbu	a2,1017(a1)
    8001663e:	0622                	slli	a2,a2,0x8
    80016640:	8ed1                	or	a3,a3,a2
    80016642:	3fa5c703          	lbu	a4,1018(a1)
    80016646:	3fb5c603          	lbu	a2,1019(a1)
    8001664a:	0622                	slli	a2,a2,0x8
    8001664c:	8e59                	or	a2,a2,a4
    8001664e:	0642                	slli	a2,a2,0x10
    80016650:	8e55                	or	a2,a2,a3
    80016652:	3fc5c703          	lbu	a4,1020(a1)
    80016656:	3fd5c683          	lbu	a3,1021(a1)
    8001665a:	06a2                	slli	a3,a3,0x8
    8001665c:	8ed9                	or	a3,a3,a4
    8001665e:	3fe5c703          	lbu	a4,1022(a1)
    80016662:	3ff5c583          	lbu	a1,1023(a1)
    80016666:	05a2                	slli	a1,a1,0x8
    80016668:	8dd9                	or	a1,a1,a4
    8001666a:	05c2                	slli	a1,a1,0x10
    8001666c:	8dd5                	or	a1,a1,a3
    8001666e:	1582                	slli	a1,a1,0x20
    80016670:	8dd1                	or	a1,a1,a2
    80016672:	f4ae                	sd	a1,104(sp)
    80016674:	3f850513          	addi	a0,a0,1016
    80016678:	10ac                	addi	a1,sp,104
    8001667a:	4641                	li	a2,16
    8001667c:	0000f097          	auipc	ra,0xf
    80016680:	a68080e7          	jalr	-1432(ra) # 800250e4 <memcpy>
    80016684:	75c2                	ld	a1,48(sp)
            child_proc.size = self.size;
    80016686:	6506                	ld	a0,64(sp)
    80016688:	6910                	ld	a2,16(a0)
    8001668a:	e990                	sd	a2,16(a1)
            child_proc.parent = Some(self as *mut task_struct);
    8001668c:	e12a                	sd	a0,128(sp)
    8001668e:	4605                	li	a2,1
    80016690:	fcb2                	sd	a2,120(sp)
    80016692:	edd0                	sd	a2,152(a1)
    80016694:	f1c8                	sd	a0,160(a1)
    80016696:	6541                	lui	a0,0x10
    80016698:	4085059b          	addiw	a1,a0,1032

000000008001669c <.LBB22_25>:
    8001669c:	00041517          	auipc	a0,0x41
    800166a0:	f0450513          	addi	a0,a0,-252 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    800166a4:	952e                	add	a0,a0,a1
            let guard = unsafe { PROC_MANAGER.tasks_lock.acquire() };
    800166a6:	ffffa097          	auipc	ra,0xffffa
    800166aa:	168080e7          	jalr	360(ra) # 8001080e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    800166ae:	85aa                	mv	a1,a0
    800166b0:	e02e                	sd	a1,0(sp)
    800166b2:	f1aa                	sd	a0,224(sp)
    800166b4:	a009                	j	800166b6 <.LBB22_25+0x1a>
    800166b6:	6502                	ld	a0,0(sp)
    800166b8:	7642                	ld	a2,48(sp)
    800166ba:	458d                	li	a1,3
            child_proc.state = ProcState::RUNNABLE;
    800166bc:	08b107a3          	sb	a1,143(sp)
    800166c0:	40b60423          	sb	a1,1032(a2)
            drop(guard);
    800166c4:	00007097          	auipc	ra,0x7
    800166c8:	95c080e7          	jalr	-1700(ra) # 8001d020 <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    800166cc:	a009                	j	800166ce <.LBB22_25+0x32>
            Some(child_proc)
    800166ce:	7542                	ld	a0,48(sp)
    800166d0:	e4aa                	sd	a0,72(sp)
        if let Some(child_proc) = ProcManager::alloc_proc()  {
    800166d2:	a811                	j	800166e6 <.LBB22_25+0x4a>
    800166d4:	0908                	addi	a0,sp,144
            println!("[Kernel] fork: None");
    800166d6:	00007097          	auipc	ra,0x7
    800166da:	676080e7          	jalr	1654(ra) # 8001dd4c <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    800166de:	a009                	j	800166e0 <.LBB22_25+0x44>
    800166e0:	4501                	li	a0,0
            None
    800166e2:	e4aa                	sd	a0,72(sp)
        if let Some(child_proc) = ProcManager::alloc_proc()  {
    800166e4:	a009                	j	800166e6 <.LBB22_25+0x4a>
        }
    }
    800166e6:	6526                	ld	a0,72(sp)
    800166e8:	70ae                	ld	ra,232(sp)
    800166ea:	616d                	addi	sp,sp,240
    800166ec:	8082                	ret

Disassembly of section .text._ZN6kernel7process6thread55_$LT$impl$u20$kernel..process..process..task_struct$GT$11threadclone17h0da9ae13d0d85d5bE:

00000000800166ee <_ZN6kernel7process6thread55_$LT$impl$u20$kernel..process..process..task_struct$GT$11threadclone17h0da9ae13d0d85d5bE>:
use crate::{process::*, arch::riscv::layout::PGSIZE};

impl task_struct {
    pub fn threadclone(&mut self, func: usize, ustack: usize) -> usize {
    800166ee:	7149                	addi	sp,sp,-368
    800166f0:	f686                	sd	ra,360(sp)
    800166f2:	e4b2                	sd	a2,72(sp)
    800166f4:	e8ae                	sd	a1,80(sp)
    800166f6:	ecaa                	sd	a0,88(sp)
    800166f8:	f22a                	sd	a0,288(sp)
    800166fa:	f62e                	sd	a1,296(sp)
    800166fc:	fa32                	sd	a2,304(sp)

        let thread = ProcManager::alloc_thread().unwrap();
    800166fe:	ffff7097          	auipc	ra,0xffff7
    80016702:	032080e7          	jalr	50(ra) # 8000d730 <_ZN6kernel7process7manager11ProcManager12alloc_thread17hfa981750c8094e17E>
    80016706:	f0aa                	sd	a0,96(sp)
    80016708:	a009                	j	8001670a <_ZN6kernel7process6thread55_$LT$impl$u20$kernel..process..process..task_struct$GT$11threadclone17h0da9ae13d0d85d5bE+0x1c>
    8001670a:	7506                	ld	a0,96(sp)

000000008001670c <.LBB23_15>:
    8001670c:	00013597          	auipc	a1,0x13
    80016710:	75c58593          	addi	a1,a1,1884 # 80029e68 <.L__unnamed_17>
    80016714:	ffff8097          	auipc	ra,0xffff8
    80016718:	638080e7          	jalr	1592(ra) # 8000ed4c <_ZN4core6option15Option$LT$T$GT$6unwrap17h81f0c84c54a80648E>
    8001671c:	85aa                	mv	a1,a0
    8001671e:	e0ae                	sd	a1,64(sp)
    80016720:	fe2a                	sd	a0,312(sp)
    80016722:	a009                	j	80016724 <.LBB23_15+0x18>
        thread.parent = Some(self as *mut task_struct);
    80016724:	65e6                	ld	a1,88(sp)
    80016726:	6506                	ld	a0,64(sp)
    80016728:	f8ae                	sd	a1,112(sp)
    8001672a:	4605                	li	a2,1
    8001672c:	f4b2                	sd	a2,104(sp)
    8001672e:	ed50                	sd	a2,152(a0)
    80016730:	f14c                	sd	a1,160(a0)
        
        // let pgt_p = self.pagetable.as_mut().unwrap();
        // let pgt_t = thread.pagetable.as_mut().unwrap();

        // pgt_p.copy_pagetable(pgt_t);
        thread.pagetable = self.pagetable;
    80016732:	6d90                	ld	a2,24(a1)
    80016734:	ed10                	sd	a2,24(a0)

        thread.open_files.clone_from(&self.open_files);
    80016736:	0a850513          	addi	a0,a0,168
    8001673a:	0a858593          	addi	a1,a1,168
    8001673e:	ffff8097          	auipc	ra,0xffff8
    80016742:	d0c080e7          	jalr	-756(ra) # 8000e44a <_ZN4core5clone5Clone10clone_from17h2b52fdc155b58fc3E>
    80016746:	a009                	j	80016748 <.LBB23_15+0x3c>
        thread.cwd.clone_from(&self.cwd);
    80016748:	65e6                	ld	a1,88(sp)
    8001674a:	6506                	ld	a0,64(sp)
    8001674c:	3c850513          	addi	a0,a0,968
    80016750:	3c858593          	addi	a1,a1,968
    80016754:	ffff9097          	auipc	ra,0xffff9
    80016758:	94c080e7          	jalr	-1716(ra) # 8000f0a0 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$10clone_from17hf5f00fe6cb298a0dE>
    8001675c:	a009                	j	8001675e <.LBB23_15+0x52>
        // println!("++++++++++++++++++++++");
        // while (true){

        // }
     
        thread.size = self.size;
    8001675e:	6506                	ld	a0,64(sp)
    80016760:	65e6                	ld	a1,88(sp)
    80016762:	6990                	ld	a2,16(a1)
    80016764:	e910                	sd	a2,16(a0)
        thread.name = self.name;    //to do
    80016766:	4005c683          	lbu	a3,1024(a1)
    8001676a:	4015c603          	lbu	a2,1025(a1)
    8001676e:	0622                	slli	a2,a2,0x8
    80016770:	8ed1                	or	a3,a3,a2
    80016772:	4025c703          	lbu	a4,1026(a1)
    80016776:	4035c603          	lbu	a2,1027(a1)
    8001677a:	0622                	slli	a2,a2,0x8
    8001677c:	8e59                	or	a2,a2,a4
    8001677e:	0642                	slli	a2,a2,0x10
    80016780:	8ed1                	or	a3,a3,a2
    80016782:	4045c703          	lbu	a4,1028(a1)
    80016786:	4055c603          	lbu	a2,1029(a1)
    8001678a:	0622                	slli	a2,a2,0x8
    8001678c:	8f51                	or	a4,a4,a2
    8001678e:	4065c783          	lbu	a5,1030(a1)
    80016792:	4075c603          	lbu	a2,1031(a1)
    80016796:	0622                	slli	a2,a2,0x8
    80016798:	8e5d                	or	a2,a2,a5
    8001679a:	0642                	slli	a2,a2,0x10
    8001679c:	8e59                	or	a2,a2,a4
    8001679e:	1602                	slli	a2,a2,0x20
    800167a0:	8e55                	or	a2,a2,a3
    800167a2:	e132                	sd	a2,128(sp)
    800167a4:	3f85c683          	lbu	a3,1016(a1)
    800167a8:	3f95c603          	lbu	a2,1017(a1)
    800167ac:	0622                	slli	a2,a2,0x8
    800167ae:	8ed1                	or	a3,a3,a2
    800167b0:	3fa5c703          	lbu	a4,1018(a1)
    800167b4:	3fb5c603          	lbu	a2,1019(a1)
    800167b8:	0622                	slli	a2,a2,0x8
    800167ba:	8e59                	or	a2,a2,a4
    800167bc:	0642                	slli	a2,a2,0x10
    800167be:	8e55                	or	a2,a2,a3
    800167c0:	3fc5c703          	lbu	a4,1020(a1)
    800167c4:	3fd5c683          	lbu	a3,1021(a1)
    800167c8:	06a2                	slli	a3,a3,0x8
    800167ca:	8ed9                	or	a3,a3,a4
    800167cc:	3fe5c703          	lbu	a4,1022(a1)
    800167d0:	3ff5c583          	lbu	a1,1023(a1)
    800167d4:	05a2                	slli	a1,a1,0x8
    800167d6:	8dd9                	or	a1,a1,a4
    800167d8:	05c2                	slli	a1,a1,0x10
    800167da:	8dd5                	or	a1,a1,a3
    800167dc:	1582                	slli	a1,a1,0x20
    800167de:	8dd1                	or	a1,a1,a2
    800167e0:	fcae                	sd	a1,120(sp)
    800167e2:	3f850513          	addi	a0,a0,1016
    800167e6:	18ac                	addi	a1,sp,120
    800167e8:	4641                	li	a2,16
    800167ea:	0000f097          	auipc	ra,0xf
    800167ee:	8fa080e7          	jalr	-1798(ra) # 800250e4 <memcpy>
    800167f2:	6626                	ld	a2,72(sp)
    800167f4:	65e6                	ld	a1,88(sp)
        thread.thread_ustack = ustack;
    800167f6:	6506                	ld	a0,64(sp)
    800167f8:	e510                	sd	a2,8(a0)
        
        let ptf = self.trapframe as *const Trapframe;
    800167fa:	718c                	ld	a1,32(a1)
    800167fc:	e2ae                	sd	a1,320(sp)
        let ttf = unsafe{ &mut *thread.trapframe };
    800167fe:	7108                	ld	a0,32(a0)
    80016800:	f42a                	sd	a0,40(sp)
    80016802:	e6aa                	sd	a0,328(sp)
    80016804:	12000613          	li	a2,288
        unsafe{ copy_nonoverlapping(ptf, ttf, 1); }
    80016808:	0000f097          	auipc	ra,0xf
    8001680c:	8dc080e7          	jalr	-1828(ra) # 800250e4 <memcpy>
        // ttf.a0 = 0;
        println!("HHHHHHHH {}", ttf.epc);
    80016810:	7522                	ld	a0,40(sp)
    80016812:	0561                	addi	a0,a0,24
    80016814:	e5aa                	sd	a0,200(sp)
    80016816:	eaaa                	sd	a0,336(sp)

0000000080016818 <.LBB23_16>:
    80016818:	0000e597          	auipc	a1,0xe
    8001681c:	0ea58593          	addi	a1,a1,234 # 80024902 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h9c6c4af1578f7c29E>
    80016820:	00009097          	auipc	ra,0x9
    80016824:	e80080e7          	jalr	-384(ra) # 8001f6a0 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    80016828:	f82a                	sd	a0,48(sp)
    8001682a:	fc2e                	sd	a1,56(sp)
    8001682c:	a009                	j	8001682e <.LBB23_16+0x16>
    8001682e:	7562                	ld	a0,56(sp)
    80016830:	75c2                	ld	a1,48(sp)
    80016832:	fd2e                	sd	a1,184(sp)
    80016834:	e1aa                	sd	a0,192(sp)

0000000080016836 <.LBB23_17>:
    80016836:	00013597          	auipc	a1,0x13
    8001683a:	65a58593          	addi	a1,a1,1626 # 80029e90 <.L__unnamed_18>
    8001683e:	0128                	addi	a0,sp,136
    80016840:	4609                	li	a2,2
    80016842:	1934                	addi	a3,sp,184
    80016844:	4705                	li	a4,1
    80016846:	fffef097          	auipc	ra,0xfffef
    8001684a:	c24080e7          	jalr	-988(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8001684e:	a009                	j	80016850 <.LBB23_17+0x1a>
    80016850:	0128                	addi	a0,sp,136
    80016852:	00007097          	auipc	ra,0x7
    80016856:	4fa080e7          	jalr	1274(ra) # 8001dd4c <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8001685a:	a009                	j	8001685c <.LBB23_17+0x26>
        ttf.epc = func;
    8001685c:	65c6                	ld	a1,80(sp)
    8001685e:	7622                	ld	a2,40(sp)
    80016860:	01860513          	addi	a0,a2,24
    80016864:	ee0c                	sd	a1,24(a2)
        println!("AAAAAAAA {}", ttf.epc);
    80016866:	ea2a                	sd	a0,272(sp)
    80016868:	eeaa                	sd	a0,344(sp)

000000008001686a <.LBB23_18>:
    8001686a:	0000e597          	auipc	a1,0xe
    8001686e:	09858593          	addi	a1,a1,152 # 80024902 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h9c6c4af1578f7c29E>
    80016872:	00009097          	auipc	ra,0x9
    80016876:	e2e080e7          	jalr	-466(ra) # 8001f6a0 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    8001687a:	ec2a                	sd	a0,24(sp)
    8001687c:	f02e                	sd	a1,32(sp)
    8001687e:	a009                	j	80016880 <.LBB23_18+0x16>
    80016880:	7502                	ld	a0,32(sp)
    80016882:	65e2                	ld	a1,24(sp)
    80016884:	e22e                	sd	a1,256(sp)
    80016886:	e62a                	sd	a0,264(sp)

0000000080016888 <.LBB23_19>:
    80016888:	00013597          	auipc	a1,0x13
    8001688c:	63858593          	addi	a1,a1,1592 # 80029ec0 <.L__unnamed_19>
    80016890:	0988                	addi	a0,sp,208
    80016892:	4609                	li	a2,2
    80016894:	0214                	addi	a3,sp,256
    80016896:	4705                	li	a4,1
    80016898:	fffef097          	auipc	ra,0xfffef
    8001689c:	bd2080e7          	jalr	-1070(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    800168a0:	a009                	j	800168a2 <.LBB23_19+0x1a>
    800168a2:	0988                	addi	a0,sp,208
    800168a4:	00007097          	auipc	ra,0x7
    800168a8:	4a8080e7          	jalr	1192(ra) # 8001dd4c <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    800168ac:	a009                	j	800168ae <.LBB23_19+0x26>
    800168ae:	65a6                	ld	a1,72(sp)
    800168b0:	6505                	lui	a0,0x1
        ttf.sp = ustack + PGSIZE;
    800168b2:	952e                	add	a0,a0,a1
    800168b4:	e82a                	sd	a0,16(sp)
    800168b6:	04b56663          	bltu	a0,a1,80016902 <.LBB23_21>
    800168ba:	a009                	j	800168bc <.LBB23_19+0x34>
    800168bc:	6542                	ld	a0,16(sp)
    800168be:	75a2                	ld	a1,40(sp)
    800168c0:	f988                	sd	a0,48(a1)
    800168c2:	6541                	lui	a0,0x10
    800168c4:	4085059b          	addiw	a1,a0,1032

00000000800168c8 <.LBB23_20>:
    800168c8:	00041517          	auipc	a0,0x41
    800168cc:	cd850513          	addi	a0,a0,-808 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    800168d0:	952e                	add	a0,a0,a1
        // ttf.s0 = ttf.sp;
        //file  

        let guard = unsafe { PROC_MANAGER.tasks_lock.acquire() };
    800168d2:	ffffa097          	auipc	ra,0xffffa
    800168d6:	f3c080e7          	jalr	-196(ra) # 8001080e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    800168da:	85aa                	mv	a1,a0
    800168dc:	e42e                	sd	a1,8(sp)
    800168de:	f2aa                	sd	a0,352(sp)
    800168e0:	a009                	j	800168e2 <.LBB23_20+0x1a>
    800168e2:	6522                	ld	a0,8(sp)
    800168e4:	6606                	ld	a2,64(sp)
    800168e6:	458d                	li	a1,3
        thread.state = ProcState::RUNNABLE;
    800168e8:	10b10fa3          	sb	a1,287(sp)
    800168ec:	40b60423          	sb	a1,1032(a2)
        drop(guard);
    800168f0:	00006097          	auipc	ra,0x6
    800168f4:	730080e7          	jalr	1840(ra) # 8001d020 <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    800168f8:	a009                	j	800168fa <.LBB23_20+0x32>
    800168fa:	4525                	li	a0,9

       
        
      
        9
    }
    800168fc:	70b6                	ld	ra,360(sp)
    800168fe:	6175                	addi	sp,sp,368
    80016900:	8082                	ret

0000000080016902 <.LBB23_21>:
        ttf.sp = ustack + PGSIZE;
    80016902:	00013517          	auipc	a0,0x13
    80016906:	39e50513          	addi	a0,a0,926 # 80029ca0 <str.0>

000000008001690a <.LBB23_22>:
    8001690a:	00013617          	auipc	a2,0x13
    8001690e:	5d660613          	addi	a2,a2,1494 # 80029ee0 <.L__unnamed_20>
    80016912:	45f1                	li	a1,28
    80016914:	0000c097          	auipc	ra,0xc
    80016918:	962080e7          	jalr	-1694(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN72_$LT$kernel..process..process..ProcState$u20$as$u20$core..fmt..Debug$GT$3fmt17hf525681892d4cccaE:

000000008001691e <_ZN72_$LT$kernel..process..process..ProcState$u20$as$u20$core..fmt..Debug$GT$3fmt17hf525681892d4cccaE>:
#[derive(PartialEq, Copy, Clone, Debug)]
    8001691e:	712d                	addi	sp,sp,-288
    80016920:	ee06                	sd	ra,280(sp)
    80016922:	e42e                	sd	a1,8(sp)
    80016924:	e9aa                	sd	a0,208(sp)
    80016926:	edae                	sd	a1,216(sp)
    80016928:	f02a                	sd	a0,32(sp)
    8001692a:	00054503          	lbu	a0,0(a0)
    8001692e:	e82a                	sd	a0,16(sp)
    80016930:	6542                	ld	a0,16(sp)
    80016932:	050e                	slli	a0,a0,0x3

0000000080016934 <.LBB24_18>:
    80016934:	00013597          	auipc	a1,0x13
    80016938:	30458593          	addi	a1,a1,772 # 80029c38 <.LJTI24_0>
    8001693c:	952e                	add	a0,a0,a1
    8001693e:	6108                	ld	a0,0(a0)
    80016940:	8502                	jr	a0

0000000080016942 <.LBB24_2>:
    80016942:	65a2                	ld	a1,8(sp)

0000000080016944 <.LBB24_19>:
    80016944:	00013617          	auipc	a2,0x13
    80016948:	5b460613          	addi	a2,a2,1460 # 80029ef8 <.L__unnamed_21>
    8001694c:	1928                	addi	a0,sp,184
    8001694e:	46a5                	li	a3,9
    80016950:	0000d097          	auipc	ra,0xd
    80016954:	8a4080e7          	jalr	-1884(ra) # 800231f4 <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    80016958:	a201                	j	80016a58 <.LBB24_25+0x28>
	...

000000008001695c <.LBB24_4>:
    8001695c:	65a2                	ld	a1,8(sp)

000000008001695e <.LBB24_20>:
    8001695e:	00013617          	auipc	a2,0x13
    80016962:	5b060613          	addi	a2,a2,1456 # 80029f0e <.L__unnamed_22>
    80016966:	1028                	addi	a0,sp,40
    80016968:	4699                	li	a3,6
    8001696a:	0000d097          	auipc	ra,0xd
    8001696e:	88a080e7          	jalr	-1910(ra) # 800231f4 <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    80016972:	a009                	j	80016974 <.LBB24_20+0x16>
    80016974:	1028                	addi	a0,sp,40
    80016976:	ea2a                	sd	a0,272(sp)
    80016978:	0000c097          	auipc	ra,0xc
    8001697c:	ed4080e7          	jalr	-300(ra) # 8002284c <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    80016980:	00a10fa3          	sb	a0,31(sp)
    80016984:	a0dd                	j	80016a6a <.LBB24_25+0x3a>

0000000080016986 <.LBB24_6>:
    80016986:	65a2                	ld	a1,8(sp)

0000000080016988 <.LBB24_21>:
    80016988:	00010617          	auipc	a2,0x10
    8001698c:	d9460613          	addi	a2,a2,-620 # 8002671c <.LJTI3_0+0x7c>
    80016990:	0088                	addi	a0,sp,64
    80016992:	4691                	li	a3,4
    80016994:	0000d097          	auipc	ra,0xd
    80016998:	860080e7          	jalr	-1952(ra) # 800231f4 <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    8001699c:	a009                	j	8001699e <.LBB24_21+0x16>
    8001699e:	0088                	addi	a0,sp,64
    800169a0:	e62a                	sd	a0,264(sp)
    800169a2:	0000c097          	auipc	ra,0xc
    800169a6:	eaa080e7          	jalr	-342(ra) # 8002284c <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    800169aa:	00a10fa3          	sb	a0,31(sp)
    800169ae:	a875                	j	80016a6a <.LBB24_25+0x3a>

00000000800169b0 <.LBB24_8>:
    800169b0:	65a2                	ld	a1,8(sp)

00000000800169b2 <.LBB24_22>:
    800169b2:	00010617          	auipc	a2,0x10
    800169b6:	eae60613          	addi	a2,a2,-338 # 80026860 <.L__unnamed_6+0xb8>
    800169ba:	08a8                	addi	a0,sp,88
    800169bc:	46a1                	li	a3,8
    800169be:	0000d097          	auipc	ra,0xd
    800169c2:	836080e7          	jalr	-1994(ra) # 800231f4 <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    800169c6:	a009                	j	800169c8 <.LBB24_22+0x16>
    800169c8:	08a8                	addi	a0,sp,88
    800169ca:	e22a                	sd	a0,256(sp)
    800169cc:	0000c097          	auipc	ra,0xc
    800169d0:	e80080e7          	jalr	-384(ra) # 8002284c <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    800169d4:	00a10fa3          	sb	a0,31(sp)
    800169d8:	a849                	j	80016a6a <.LBB24_25+0x3a>

00000000800169da <.LBB24_10>:
    800169da:	65a2                	ld	a1,8(sp)

00000000800169dc <.LBB24_23>:
    800169dc:	00010617          	auipc	a2,0x10
    800169e0:	eac60613          	addi	a2,a2,-340 # 80026888 <.L__unnamed_6+0xe0>
    800169e4:	1888                	addi	a0,sp,112
    800169e6:	46a1                	li	a3,8
    800169e8:	0000d097          	auipc	ra,0xd
    800169ec:	80c080e7          	jalr	-2036(ra) # 800231f4 <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    800169f0:	a009                	j	800169f2 <.LBB24_23+0x16>
    800169f2:	1888                	addi	a0,sp,112
    800169f4:	fdaa                	sd	a0,248(sp)
    800169f6:	0000c097          	auipc	ra,0xc
    800169fa:	e56080e7          	jalr	-426(ra) # 8002284c <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    800169fe:	00a10fa3          	sb	a0,31(sp)
    80016a02:	a0a5                	j	80016a6a <.LBB24_25+0x3a>

0000000080016a04 <.LBB24_12>:
    80016a04:	65a2                	ld	a1,8(sp)

0000000080016a06 <.LBB24_24>:
    80016a06:	00013617          	auipc	a2,0x13
    80016a0a:	50160613          	addi	a2,a2,1281 # 80029f07 <.L__unnamed_26>
    80016a0e:	0128                	addi	a0,sp,136
    80016a10:	469d                	li	a3,7
    80016a12:	0000c097          	auipc	ra,0xc
    80016a16:	7e2080e7          	jalr	2018(ra) # 800231f4 <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    80016a1a:	a009                	j	80016a1c <.LBB24_24+0x16>
    80016a1c:	0128                	addi	a0,sp,136
    80016a1e:	f9aa                	sd	a0,240(sp)
    80016a20:	0000c097          	auipc	ra,0xc
    80016a24:	e2c080e7          	jalr	-468(ra) # 8002284c <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    80016a28:	00a10fa3          	sb	a0,31(sp)
    80016a2c:	a83d                	j	80016a6a <.LBB24_25+0x3a>

0000000080016a2e <.LBB24_14>:
    80016a2e:	65a2                	ld	a1,8(sp)

0000000080016a30 <.LBB24_25>:
    80016a30:	00013617          	auipc	a2,0x13
    80016a34:	4d160613          	addi	a2,a2,1233 # 80029f01 <.L__unnamed_27>
    80016a38:	1108                	addi	a0,sp,160
    80016a3a:	4699                	li	a3,6
    80016a3c:	0000c097          	auipc	ra,0xc
    80016a40:	7b8080e7          	jalr	1976(ra) # 800231f4 <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    80016a44:	a009                	j	80016a46 <.LBB24_25+0x16>
    80016a46:	1108                	addi	a0,sp,160
    80016a48:	f5aa                	sd	a0,232(sp)
    80016a4a:	0000c097          	auipc	ra,0xc
    80016a4e:	e02080e7          	jalr	-510(ra) # 8002284c <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    80016a52:	00a10fa3          	sb	a0,31(sp)
    80016a56:	a811                	j	80016a6a <.LBB24_25+0x3a>
    80016a58:	1928                	addi	a0,sp,184
    80016a5a:	f1aa                	sd	a0,224(sp)
    80016a5c:	0000c097          	auipc	ra,0xc
    80016a60:	df0080e7          	jalr	-528(ra) # 8002284c <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    80016a64:	00a10fa3          	sb	a0,31(sp)
    80016a68:	a009                	j	80016a6a <.LBB24_25+0x3a>
    80016a6a:	01f14503          	lbu	a0,31(sp)
    80016a6e:	60f2                	ld	ra,280(sp)
    80016a70:	6115                	addi	sp,sp,288
    80016a72:	8082                	ret

Disassembly of section .text._ZN76_$LT$kernel..process..process..ProcState$u20$as$u20$core..cmp..PartialEq$GT$2eq17hc7c8c767a75b25feE:

0000000080016a74 <_ZN76_$LT$kernel..process..process..ProcState$u20$as$u20$core..cmp..PartialEq$GT$2eq17hc7c8c767a75b25feE>:
    80016a74:	7179                	addi	sp,sp,-48
    80016a76:	e82a                	sd	a0,16(sp)
    80016a78:	ec2e                	sd	a1,24(sp)
    80016a7a:	00054503          	lbu	a0,0(a0)
    80016a7e:	f02a                	sd	a0,32(sp)
    80016a80:	0005c583          	lbu	a1,0(a1)
    80016a84:	f42e                	sd	a1,40(sp)
    80016a86:	00b51763          	bne	a0,a1,80016a94 <_ZN76_$LT$kernel..process..process..ProcState$u20$as$u20$core..cmp..PartialEq$GT$2eq17hc7c8c767a75b25feE+0x20>
    80016a8a:	a009                	j	80016a8c <_ZN76_$LT$kernel..process..process..ProcState$u20$as$u20$core..cmp..PartialEq$GT$2eq17hc7c8c767a75b25feE+0x18>
    80016a8c:	4505                	li	a0,1
    80016a8e:	00a107a3          	sb	a0,15(sp)
    80016a92:	a029                	j	80016a9c <_ZN76_$LT$kernel..process..process..ProcState$u20$as$u20$core..cmp..PartialEq$GT$2eq17hc7c8c767a75b25feE+0x28>
    80016a94:	4501                	li	a0,0
    80016a96:	00a107a3          	sb	a0,15(sp)
    80016a9a:	a009                	j	80016a9c <_ZN76_$LT$kernel..process..process..ProcState$u20$as$u20$core..cmp..PartialEq$GT$2eq17hc7c8c767a75b25feE+0x28>
    80016a9c:	00f14503          	lbu	a0,15(sp)
    80016aa0:	8905                	andi	a0,a0,1
    80016aa2:	4581                	li	a1,0
    80016aa4:	00b50763          	beq	a0,a1,80016ab2 <_ZN76_$LT$kernel..process..process..ProcState$u20$as$u20$core..cmp..PartialEq$GT$2eq17hc7c8c767a75b25feE+0x3e>
    80016aa8:	a009                	j	80016aaa <_ZN76_$LT$kernel..process..process..ProcState$u20$as$u20$core..cmp..PartialEq$GT$2eq17hc7c8c767a75b25feE+0x36>
    80016aaa:	4505                	li	a0,1
    80016aac:	00a10723          	sb	a0,14(sp)
    80016ab0:	a029                	j	80016aba <_ZN76_$LT$kernel..process..process..ProcState$u20$as$u20$core..cmp..PartialEq$GT$2eq17hc7c8c767a75b25feE+0x46>
    80016ab2:	4501                	li	a0,0
    80016ab4:	00a10723          	sb	a0,14(sp)
    80016ab8:	a009                	j	80016aba <_ZN76_$LT$kernel..process..process..ProcState$u20$as$u20$core..cmp..PartialEq$GT$2eq17hc7c8c767a75b25feE+0x46>
    80016aba:	00e14503          	lbu	a0,14(sp)
    80016abe:	6145                	addi	sp,sp,48
    80016ac0:	8082                	ret

Disassembly of section .text._ZN132_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$alloc..vec..spec_extend..SpecExtend$LT$$RF$T$C$core..slice..iter..Iter$LT$T$GT$$GT$$GT$11spec_extend17hbbfc32722f2025bdE:

0000000080016ac2 <_ZN132_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$alloc..vec..spec_extend..SpecExtend$LT$$RF$T$C$core..slice..iter..Iter$LT$T$GT$$GT$$GT$11spec_extend17hbbfc32722f2025bdE>:

impl<'a, T: 'a, A: Allocator + 'a> SpecExtend<&'a T, slice::Iter<'a, T>> for Vec<T, A>
where
    T: Copy,
{
    fn spec_extend(&mut self, iterator: slice::Iter<'a, T>) {
    80016ac2:	715d                	addi	sp,sp,-80
    80016ac4:	e486                	sd	ra,72(sp)
    80016ac6:	e42a                	sd	a0,8(sp)
    80016ac8:	f02e                	sd	a1,32(sp)
    80016aca:	f432                	sd	a2,40(sp)
    80016acc:	f82a                	sd	a0,48(sp)
    80016ace:	1008                	addi	a0,sp,32
        let slice = iterator.as_slice();
    80016ad0:	ffff4097          	auipc	ra,0xffff4
    80016ad4:	2d6080e7          	jalr	726(ra) # 8000ada6 <_ZN4core5slice4iter13Iter$LT$T$GT$8as_slice17hddf2d5a72581ec8fE>
    80016ad8:	862a                	mv	a2,a0
    80016ada:	e832                	sd	a2,16(sp)
    80016adc:	862e                	mv	a2,a1
    80016ade:	ec32                	sd	a2,24(sp)
    80016ae0:	fc2a                	sd	a0,56(sp)
    80016ae2:	e0ae                	sd	a1,64(sp)
    80016ae4:	a009                	j	80016ae6 <_ZN132_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$alloc..vec..spec_extend..SpecExtend$LT$$RF$T$C$core..slice..iter..Iter$LT$T$GT$$GT$$GT$11spec_extend17hbbfc32722f2025bdE+0x24>
        unsafe { self.append_elements(slice) };
    80016ae6:	6662                	ld	a2,24(sp)
    80016ae8:	65c2                	ld	a1,16(sp)
    80016aea:	6522                	ld	a0,8(sp)
    80016aec:	00000097          	auipc	ra,0x0
    80016af0:	054080e7          	jalr	84(ra) # 80016b40 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$15append_elements17h8b8f278f0e0e7850E>
    80016af4:	a009                	j	80016af6 <_ZN132_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$alloc..vec..spec_extend..SpecExtend$LT$$RF$T$C$core..slice..iter..Iter$LT$T$GT$$GT$$GT$11spec_extend17hbbfc32722f2025bdE+0x34>
    }
    80016af6:	60a6                	ld	ra,72(sp)
    80016af8:	6161                	addi	sp,sp,80
    80016afa:	8082                	ret

Disassembly of section .text._ZN5alloc3vec12Vec$LT$T$GT$3new17hfad72d6537ee9e7bE:

0000000080016afc <_ZN5alloc3vec12Vec$LT$T$GT$3new17hfad72d6537ee9e7bE>:
    pub const fn new() -> Self {
    80016afc:	85aa                	mv	a1,a0

0000000080016afe <.LBB1_1>:
    80016afe:	0000f517          	auipc	a0,0xf
    80016b02:	bc250513          	addi	a0,a0,-1086 # 800256c0 <.L__unnamed_35+0x48>
        Vec { buf: RawVec::NEW, len: 0 }
    80016b06:	6110                	ld	a2,0(a0)
    80016b08:	6508                	ld	a0,8(a0)
    80016b0a:	e190                	sd	a2,0(a1)
    80016b0c:	e588                	sd	a0,8(a1)
    80016b0e:	4501                	li	a0,0
    80016b10:	e988                	sd	a0,16(a1)
    }
    80016b12:	8082                	ret

Disassembly of section .text._ZN5alloc3vec16Vec$LT$T$C$A$GT$10as_mut_ptr17h2d512420264161fdE:

0000000080016b14 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$10as_mut_ptr17h2d512420264161fdE>:
    pub fn as_mut_ptr(&mut self) -> *mut T {
    80016b14:	1101                	addi	sp,sp,-32
    80016b16:	ec06                	sd	ra,24(sp)
    80016b18:	e42a                	sd	a0,8(sp)
        let ptr = self.buf.ptr();
    80016b1a:	fffec097          	auipc	ra,0xfffec
    80016b1e:	15e080e7          	jalr	350(ra) # 80002c78 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17h887fa3437b1e26b7E>
    80016b22:	85aa                	mv	a1,a0
    80016b24:	e02e                	sd	a1,0(sp)
    80016b26:	e82a                	sd	a0,16(sp)
    80016b28:	a009                	j	80016b2a <_ZN5alloc3vec16Vec$LT$T$C$A$GT$10as_mut_ptr17h2d512420264161fdE+0x16>
            assume(!ptr.is_null());
    80016b2a:	6502                	ld	a0,0(sp)
    80016b2c:	00009097          	auipc	ra,0x9
    80016b30:	c56080e7          	jalr	-938(ra) # 8001f782 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hba478e65ea6353f9E>
    80016b34:	a009                	j	80016b36 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$10as_mut_ptr17h2d512420264161fdE+0x22>
    80016b36:	a009                	j	80016b38 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$10as_mut_ptr17h2d512420264161fdE+0x24>
    }
    80016b38:	6502                	ld	a0,0(sp)
    80016b3a:	60e2                	ld	ra,24(sp)
    80016b3c:	6105                	addi	sp,sp,32
    80016b3e:	8082                	ret

Disassembly of section .text._ZN5alloc3vec16Vec$LT$T$C$A$GT$15append_elements17h8b8f278f0e0e7850E:

0000000080016b40 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$15append_elements17h8b8f278f0e0e7850E>:
    unsafe fn append_elements(&mut self, other: *const [T]) {
    80016b40:	7159                	addi	sp,sp,-112
    80016b42:	f486                	sd	ra,104(sp)
    80016b44:	f032                	sd	a2,32(sp)
    80016b46:	862e                	mv	a2,a1
    80016b48:	7582                	ld	a1,32(sp)
    80016b4a:	f432                	sd	a2,40(sp)
    80016b4c:	862a                	mv	a2,a0
    80016b4e:	7522                	ld	a0,40(sp)
    80016b50:	f832                	sd	a2,48(sp)
    80016b52:	e0b2                	sd	a2,64(sp)
    80016b54:	e4aa                	sd	a0,72(sp)
    80016b56:	e8ae                	sd	a1,80(sp)
        let count = unsafe { (*other).len() };
    80016b58:	00009097          	auipc	ra,0x9
    80016b5c:	a7c080e7          	jalr	-1412(ra) # 8001f5d4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hb06ce83b043493f3E>
    80016b60:	85aa                	mv	a1,a0
    80016b62:	fc2e                	sd	a1,56(sp)
    80016b64:	ecaa                	sd	a0,88(sp)
    80016b66:	a009                	j	80016b68 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$15append_elements17h8b8f278f0e0e7850E+0x28>
        self.reserve(count);
    80016b68:	75e2                	ld	a1,56(sp)
    80016b6a:	7542                	ld	a0,48(sp)
    80016b6c:	00000097          	auipc	ra,0x0
    80016b70:	178080e7          	jalr	376(ra) # 80016ce4 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$7reserve17h4180bbdadc64f26bE>
    80016b74:	a009                	j	80016b76 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$15append_elements17h8b8f278f0e0e7850E+0x36>
        let len = self.len();
    80016b76:	7542                	ld	a0,48(sp)
    80016b78:	00000097          	auipc	ra,0x0
    80016b7c:	0bc080e7          	jalr	188(ra) # 80016c34 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$3len17h0f145fd3397d7265E>
    80016b80:	85aa                	mv	a1,a0
    80016b82:	ec2e                	sd	a1,24(sp)
    80016b84:	f0aa                	sd	a0,96(sp)
    80016b86:	a009                	j	80016b88 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$15append_elements17h8b8f278f0e0e7850E+0x48>
        unsafe { ptr::copy_nonoverlapping(other as *const T, self.as_mut_ptr().add(len), count) };
    80016b88:	7542                	ld	a0,48(sp)
    80016b8a:	75a2                	ld	a1,40(sp)
    80016b8c:	e42e                	sd	a1,8(sp)
    80016b8e:	00000097          	auipc	ra,0x0
    80016b92:	f86080e7          	jalr	-122(ra) # 80016b14 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$10as_mut_ptr17h2d512420264161fdE>
    80016b96:	e82a                	sd	a0,16(sp)
    80016b98:	a009                	j	80016b9a <_ZN5alloc3vec16Vec$LT$T$C$A$GT$15append_elements17h8b8f278f0e0e7850E+0x5a>
    80016b9a:	65e2                	ld	a1,24(sp)
    80016b9c:	6542                	ld	a0,16(sp)
    80016b9e:	00009097          	auipc	ra,0x9
    80016ba2:	b60080e7          	jalr	-1184(ra) # 8001f6fe <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1d203f00cca684c1E>
    80016ba6:	e02a                	sd	a0,0(sp)
    80016ba8:	a009                	j	80016baa <_ZN5alloc3vec16Vec$LT$T$C$A$GT$15append_elements17h8b8f278f0e0e7850E+0x6a>
    80016baa:	7662                	ld	a2,56(sp)
    80016bac:	65a2                	ld	a1,8(sp)
    80016bae:	6502                	ld	a0,0(sp)
    80016bb0:	0000e097          	auipc	ra,0xe
    80016bb4:	534080e7          	jalr	1332(ra) # 800250e4 <memcpy>
    80016bb8:	7662                	ld	a2,56(sp)
    80016bba:	75c2                	ld	a1,48(sp)
        self.len += count;
    80016bbc:	6988                	ld	a0,16(a1)
    80016bbe:	9532                	add	a0,a0,a2
    80016bc0:	e988                	sd	a0,16(a1)
    }
    80016bc2:	70a6                	ld	ra,104(sp)
    80016bc4:	6165                	addi	sp,sp,112
    80016bc6:	8082                	ret

Disassembly of section .text._ZN5alloc3vec16Vec$LT$T$C$A$GT$16with_capacity_in17hb324b531b744c1e4E:

0000000080016bc8 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$16with_capacity_in17hb324b531b744c1e4E>:
    pub fn with_capacity_in(capacity: usize, alloc: A) -> Self {
    80016bc8:	7139                	addi	sp,sp,-64
    80016bca:	fc06                	sd	ra,56(sp)
    80016bcc:	e42e                	sd	a1,8(sp)
    80016bce:	85aa                	mv	a1,a0
    80016bd0:	6522                	ld	a0,8(sp)
    80016bd2:	e82e                	sd	a1,16(sp)
    80016bd4:	f42a                	sd	a0,40(sp)
        Vec { buf: RawVec::with_capacity_in(capacity, alloc), len: 0 }
    80016bd6:	fffec097          	auipc	ra,0xfffec
    80016bda:	02a080e7          	jalr	42(ra) # 80002c00 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$16with_capacity_in17hb06502444696164dE>
    80016bde:	ec2a                	sd	a0,24(sp)
    80016be0:	f02e                	sd	a1,32(sp)
    80016be2:	a009                	j	80016be4 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$16with_capacity_in17hb324b531b744c1e4E+0x1c>
    80016be4:	65c2                	ld	a1,16(sp)
    80016be6:	7502                	ld	a0,32(sp)
    80016be8:	6662                	ld	a2,24(sp)
    80016bea:	e190                	sd	a2,0(a1)
    80016bec:	e588                	sd	a0,8(a1)
    80016bee:	4501                	li	a0,0
    80016bf0:	e988                	sd	a0,16(a1)
    }
    80016bf2:	70e2                	ld	ra,56(sp)
    80016bf4:	6121                	addi	sp,sp,64
    80016bf6:	8082                	ret

Disassembly of section .text._ZN5alloc3vec16Vec$LT$T$C$A$GT$17extend_from_slice17hce4d1786c1c715b0E:

0000000080016bf8 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$17extend_from_slice17hce4d1786c1c715b0E>:
    pub fn extend_from_slice(&mut self, other: &[T]) {
    80016bf8:	715d                	addi	sp,sp,-80
    80016bfa:	e486                	sd	ra,72(sp)
    80016bfc:	e432                	sd	a2,8(sp)
    80016bfe:	862e                	mv	a2,a1
    80016c00:	65a2                	ld	a1,8(sp)
    80016c02:	e832                	sd	a2,16(sp)
    80016c04:	862a                	mv	a2,a0
    80016c06:	6542                	ld	a0,16(sp)
    80016c08:	ec32                	sd	a2,24(sp)
    80016c0a:	f832                	sd	a2,48(sp)
    80016c0c:	fc2a                	sd	a0,56(sp)
    80016c0e:	e0ae                	sd	a1,64(sp)
        self.spec_extend(other.iter())
    80016c10:	00009097          	auipc	ra,0x9
    80016c14:	9ec080e7          	jalr	-1556(ra) # 8001f5fc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h8f308ca2182773f1E>
    80016c18:	f02a                	sd	a0,32(sp)
    80016c1a:	f42e                	sd	a1,40(sp)
    80016c1c:	a009                	j	80016c1e <_ZN5alloc3vec16Vec$LT$T$C$A$GT$17extend_from_slice17hce4d1786c1c715b0E+0x26>
    80016c1e:	7622                	ld	a2,40(sp)
    80016c20:	7582                	ld	a1,32(sp)
    80016c22:	6562                	ld	a0,24(sp)
    80016c24:	00000097          	auipc	ra,0x0
    80016c28:	e9e080e7          	jalr	-354(ra) # 80016ac2 <_ZN132_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$alloc..vec..spec_extend..SpecExtend$LT$$RF$T$C$core..slice..iter..Iter$LT$T$GT$$GT$$GT$11spec_extend17hbbfc32722f2025bdE>
    80016c2c:	a009                	j	80016c2e <_ZN5alloc3vec16Vec$LT$T$C$A$GT$17extend_from_slice17hce4d1786c1c715b0E+0x36>
    }
    80016c2e:	60a6                	ld	ra,72(sp)
    80016c30:	6161                	addi	sp,sp,80
    80016c32:	8082                	ret

Disassembly of section .text._ZN5alloc3vec16Vec$LT$T$C$A$GT$3len17h0f145fd3397d7265E:

0000000080016c34 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$3len17h0f145fd3397d7265E>:
    pub fn len(&self) -> usize {
    80016c34:	1141                	addi	sp,sp,-16
    80016c36:	e42a                	sd	a0,8(sp)
        self.len
    80016c38:	6908                	ld	a0,16(a0)
    }
    80016c3a:	0141                	addi	sp,sp,16
    80016c3c:	8082                	ret

Disassembly of section .text._ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h5c7a5a6a9c3b7171E:

0000000080016c3e <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h5c7a5a6a9c3b7171E>:
    pub fn push(&mut self, value: T) {
    80016c3e:	711d                	addi	sp,sp,-96
    80016c40:	ec86                	sd	ra,88(sp)
    80016c42:	e82a                	sd	a0,16(sp)
    80016c44:	862e                	mv	a2,a1
    80016c46:	ec32                	sd	a2,24(sp)
    80016c48:	f82a                	sd	a0,48(sp)
    80016c4a:	02b10fa3          	sb	a1,63(sp)
        if self.len == self.buf.capacity() {
    80016c4e:	690c                	ld	a1,16(a0)
    80016c50:	f02e                	sd	a1,32(sp)
    80016c52:	e8aa                	sd	a0,80(sp)
        if mem::size_of::<T>() == 0 { usize::MAX } else { self.cap }
    80016c54:	6508                	ld	a0,8(a0)
    80016c56:	f42a                	sd	a0,40(sp)
    80016c58:	e4aa                	sd	a0,72(sp)
    80016c5a:	a009                	j	80016c5c <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h5c7a5a6a9c3b7171E+0x1e>
    80016c5c:	7502                	ld	a0,32(sp)
    80016c5e:	75a2                	ld	a1,40(sp)
    80016c60:	00b51a63          	bne	a0,a1,80016c74 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h5c7a5a6a9c3b7171E+0x36>
    80016c64:	a009                	j	80016c66 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h5c7a5a6a9c3b7171E+0x28>
            self.reserve(1);
    80016c66:	6542                	ld	a0,16(sp)
    80016c68:	4585                	li	a1,1
    80016c6a:	00000097          	auipc	ra,0x0
    80016c6e:	07a080e7          	jalr	122(ra) # 80016ce4 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$7reserve17h4180bbdadc64f26bE>
    80016c72:	a011                	j	80016c76 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h5c7a5a6a9c3b7171E+0x38>
        if self.len == self.buf.capacity() {
    80016c74:	a011                	j	80016c78 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h5c7a5a6a9c3b7171E+0x3a>
    80016c76:	a009                	j	80016c78 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h5c7a5a6a9c3b7171E+0x3a>
            let end = self.as_mut_ptr().add(self.len);
    80016c78:	6542                	ld	a0,16(sp)
    80016c7a:	00000097          	auipc	ra,0x0
    80016c7e:	e9a080e7          	jalr	-358(ra) # 80016b14 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$10as_mut_ptr17h2d512420264161fdE>
    80016c82:	e42a                	sd	a0,8(sp)
    80016c84:	a009                	j	80016c86 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h5c7a5a6a9c3b7171E+0x48>
    80016c86:	6522                	ld	a0,8(sp)
    80016c88:	65c2                	ld	a1,16(sp)
    80016c8a:	698c                	ld	a1,16(a1)
    80016c8c:	00009097          	auipc	ra,0x9
    80016c90:	a72080e7          	jalr	-1422(ra) # 8001f6fe <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1d203f00cca684c1E>
    80016c94:	85aa                	mv	a1,a0
    80016c96:	e02e                	sd	a1,0(sp)
    80016c98:	e0aa                	sd	a0,64(sp)
    80016c9a:	a009                	j	80016c9c <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h5c7a5a6a9c3b7171E+0x5e>
            ptr::write(end, value);
    80016c9c:	65e2                	ld	a1,24(sp)
    80016c9e:	6502                	ld	a0,0(sp)
    80016ca0:	00002097          	auipc	ra,0x2
    80016ca4:	c26080e7          	jalr	-986(ra) # 800188c6 <_ZN4core3ptr5write17h0fb1ba83ac2984c7E>
    80016ca8:	a009                	j	80016caa <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h5c7a5a6a9c3b7171E+0x6c>
            self.len += 1;
    80016caa:	65c2                	ld	a1,16(sp)
    80016cac:	6988                	ld	a0,16(a1)
    80016cae:	0505                	addi	a0,a0,1
    80016cb0:	e988                	sd	a0,16(a1)
    }
    80016cb2:	60e6                	ld	ra,88(sp)
    80016cb4:	6125                	addi	sp,sp,96
    80016cb6:	8082                	ret

Disassembly of section .text._ZN5alloc3vec16Vec$LT$T$C$A$GT$6as_ptr17h07b3ea85571460a0E:

0000000080016cb8 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$6as_ptr17h07b3ea85571460a0E>:
    pub fn as_ptr(&self) -> *const T {
    80016cb8:	1101                	addi	sp,sp,-32
    80016cba:	ec06                	sd	ra,24(sp)
    80016cbc:	e42a                	sd	a0,8(sp)
        let ptr = self.buf.ptr();
    80016cbe:	fffec097          	auipc	ra,0xfffec
    80016cc2:	fba080e7          	jalr	-70(ra) # 80002c78 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17h887fa3437b1e26b7E>
    80016cc6:	85aa                	mv	a1,a0
    80016cc8:	e02e                	sd	a1,0(sp)
    80016cca:	e82a                	sd	a0,16(sp)
    80016ccc:	a009                	j	80016cce <_ZN5alloc3vec16Vec$LT$T$C$A$GT$6as_ptr17h07b3ea85571460a0E+0x16>
            assume(!ptr.is_null());
    80016cce:	6502                	ld	a0,0(sp)
    80016cd0:	00009097          	auipc	ra,0x9
    80016cd4:	ab2080e7          	jalr	-1358(ra) # 8001f782 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hba478e65ea6353f9E>
    80016cd8:	a009                	j	80016cda <_ZN5alloc3vec16Vec$LT$T$C$A$GT$6as_ptr17h07b3ea85571460a0E+0x22>
    80016cda:	a009                	j	80016cdc <_ZN5alloc3vec16Vec$LT$T$C$A$GT$6as_ptr17h07b3ea85571460a0E+0x24>
    }
    80016cdc:	6502                	ld	a0,0(sp)
    80016cde:	60e2                	ld	ra,24(sp)
    80016ce0:	6105                	addi	sp,sp,32
    80016ce2:	8082                	ret

Disassembly of section .text._ZN5alloc3vec16Vec$LT$T$C$A$GT$7reserve17h4180bbdadc64f26bE:

0000000080016ce4 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$7reserve17h4180bbdadc64f26bE>:
    pub fn reserve(&mut self, additional: usize) {
    80016ce4:	1101                	addi	sp,sp,-32
    80016ce6:	ec06                	sd	ra,24(sp)
    80016ce8:	862e                	mv	a2,a1
    80016cea:	e42a                	sd	a0,8(sp)
    80016cec:	e832                	sd	a2,16(sp)
        self.buf.reserve(self.len, additional);
    80016cee:	690c                	ld	a1,16(a0)
    80016cf0:	fffec097          	auipc	ra,0xfffec
    80016cf4:	fc2080e7          	jalr	-62(ra) # 80002cb2 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve17hb5cb67f1b8f5bd01E>
    80016cf8:	a009                	j	80016cfa <_ZN5alloc3vec16Vec$LT$T$C$A$GT$7reserve17h4180bbdadc64f26bE+0x16>
    }
    80016cfa:	60e2                	ld	ra,24(sp)
    80016cfc:	6105                	addi	sp,sp,32
    80016cfe:	8082                	ret

Disassembly of section .text._ZN5alloc3vec16Vec$LT$T$C$A$GT$7set_len17h69219cf242af5cbaE:

0000000080016d00 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$7set_len17h69219cf242af5cbaE>:
    pub unsafe fn set_len(&mut self, new_len: usize) {
    80016d00:	1141                	addi	sp,sp,-16
    80016d02:	e02a                	sd	a0,0(sp)
    80016d04:	e42e                	sd	a1,8(sp)
        self.len = new_len;
    80016d06:	e90c                	sd	a1,16(a0)
    }
    80016d08:	0141                	addi	sp,sp,16
    80016d0a:	8082                	ret

Disassembly of section .text._ZN5alloc3vec9from_elem17h254506728307fd13E:

0000000080016d0c <_ZN5alloc3vec9from_elem17h254506728307fd13E>:
pub fn from_elem<T: Clone>(elem: T, n: usize) -> Vec<T> {
    80016d0c:	1101                	addi	sp,sp,-32
    80016d0e:	ec06                	sd	ra,24(sp)
    80016d10:	00b107a3          	sb	a1,15(sp)
    80016d14:	e832                	sd	a2,16(sp)
    <T as SpecFromElem>::from_elem(elem, n, Global)
    80016d16:	fffec097          	auipc	ra,0xfffec
    80016d1a:	8d0080e7          	jalr	-1840(ra) # 800025e6 <_ZN63_$LT$u8$u20$as$u20$alloc..vec..spec_from_elem..SpecFromElem$GT$9from_elem17h7bf881e84d821ad0E>
    80016d1e:	a009                	j	80016d20 <_ZN5alloc3vec9from_elem17h254506728307fd13E+0x14>
}
    80016d20:	60e2                	ld	ra,24(sp)
    80016d22:	6105                	addi	sp,sp,32
    80016d24:	8082                	ret

Disassembly of section .text._ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h57bbbed72157e211E:

0000000080016d26 <_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h57bbbed72157e211E>:
    fn deref(&self) -> &[T] {
    80016d26:	7179                	addi	sp,sp,-48
    80016d28:	f406                	sd	ra,40(sp)
    80016d2a:	e82a                	sd	a0,16(sp)
    80016d2c:	f02a                	sd	a0,32(sp)
        unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }
    80016d2e:	00000097          	auipc	ra,0x0
    80016d32:	f8a080e7          	jalr	-118(ra) # 80016cb8 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$6as_ptr17h07b3ea85571460a0E>
    80016d36:	ec2a                	sd	a0,24(sp)
    80016d38:	a009                	j	80016d3a <_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h57bbbed72157e211E+0x14>
    80016d3a:	6562                	ld	a0,24(sp)
    80016d3c:	65c2                	ld	a1,16(sp)
    80016d3e:	698c                	ld	a1,16(a1)
    80016d40:	fffee097          	auipc	ra,0xfffee
    80016d44:	68e080e7          	jalr	1678(ra) # 800053ce <_ZN4core5slice3raw14from_raw_parts17hf1accf0e45b69f71E>
    80016d48:	e02a                	sd	a0,0(sp)
    80016d4a:	e42e                	sd	a1,8(sp)
    80016d4c:	a009                	j	80016d4e <_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h57bbbed72157e211E+0x28>
    }
    80016d4e:	65a2                	ld	a1,8(sp)
    80016d50:	6502                	ld	a0,0(sp)
    80016d52:	70a2                	ld	ra,40(sp)
    80016d54:	6145                	addi	sp,sp,48
    80016d56:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register5mtvec5write17h0d760c5cb091ccffE:

0000000080016d58 <_ZN6kernel4arch5riscv8register5mtvec5write17h0d760c5cb091ccffE>:
    llvm_asm!("csrr $0, mtvec":"=r"(ret):::"volatile");
    ret
}

#[inline]
pub unsafe fn write(x:usize){
    80016d58:	1141                	addi	sp,sp,-16
    80016d5a:	e42a                	sd	a0,8(sp)
    llvm_asm!("csrw mtvec, $0"::"r"(x)::"volatile");
    80016d5c:	30551073          	csrw	mtvec,a0
    80016d60:	0141                	addi	sp,sp,16
    80016d62:	8082                	ret

Disassembly of section .text._ZN6kernel6memory7mapping10page_table9PageTable7as_addr17hcce185773f2c85f7E:

0000000080016d64 <_ZN6kernel6memory7mapping10page_table9PageTable7as_addr17hcce185773f2c85f7E>:

static mut KERNEL_PAGETABLE:PageTable = PageTable::empty();


impl PageTable{
    pub fn as_addr(&self) -> usize{
    80016d64:	1101                	addi	sp,sp,-32
    80016d66:	ec06                	sd	ra,24(sp)
    80016d68:	e82a                	sd	a0,16(sp)
    80016d6a:	20000593          	li	a1,512
        self.entries.as_ptr() as usize
    80016d6e:	00006097          	auipc	ra,0x6
    80016d72:	0da080e7          	jalr	218(ra) # 8001ce48 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hc0b1197304dd53e6E>
    80016d76:	e42a                	sd	a0,8(sp)
    80016d78:	a009                	j	80016d7a <_ZN6kernel6memory7mapping10page_table9PageTable7as_addr17hcce185773f2c85f7E+0x16>
    }
    80016d7a:	6522                	ld	a0,8(sp)
    80016d7c:	60e2                	ld	ra,24(sp)
    80016d7e:	6105                	addi	sp,sp,32
    80016d80:	8082                	ret

Disassembly of section .text._ZN6kernel6memory7mapping10page_table9PageTable7as_satp17h97121d8f678f163eE:

0000000080016d82 <_ZN6kernel6memory7mapping10page_table9PageTable7as_satp17h97121d8f678f163eE>:
        }
    }

    /// Convert the page table to be the usize
    /// that can be written in satp register
    pub fn as_satp(&self) -> usize {
    80016d82:	1101                	addi	sp,sp,-32
    80016d84:	ec06                	sd	ra,24(sp)
    80016d86:	e82a                	sd	a0,16(sp)
    80016d88:	20000593          	li	a1,512
        satp::SATP_SV39 | ((self.entries.as_ptr() as usize) >> PGSHIFT)
    80016d8c:	00006097          	auipc	ra,0x6
    80016d90:	0bc080e7          	jalr	188(ra) # 8001ce48 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hc0b1197304dd53e6E>
    80016d94:	e42a                	sd	a0,8(sp)
    80016d96:	a009                	j	80016d98 <_ZN6kernel6memory7mapping10page_table9PageTable7as_satp17h97121d8f678f163eE+0x16>
    80016d98:	6522                	ld	a0,8(sp)
    80016d9a:	8131                	srli	a0,a0,0xc
    80016d9c:	e02a                	sd	a0,0(sp)
    80016d9e:	a009                	j	80016da0 <_ZN6kernel6memory7mapping10page_table9PageTable7as_satp17h97121d8f678f163eE+0x1e>
    80016da0:	6502                	ld	a0,0(sp)
    80016da2:	55fd                	li	a1,-1
    80016da4:	15fe                	slli	a1,a1,0x3f
    80016da6:	8d4d                	or	a0,a0,a1
    }
    80016da8:	60e2                	ld	ra,24(sp)
    80016daa:	6105                	addi	sp,sp,32
    80016dac:	8082                	ret

Disassembly of section .text._ZN6kernel6memory7mapping10page_table9PageTable5write17h1197b2bc60e8313aE:

0000000080016dae <_ZN6kernel6memory7mapping10page_table9PageTable5write17h1197b2bc60e8313aE>:
        for pte in self.entries.iter_mut(){
            pte.write_zero();
        }
    }

    pub fn write(&mut self, page_table: &PageTable) {
    80016dae:	7135                	addi	sp,sp,-160
    80016db0:	ed06                	sd	ra,152(sp)
    80016db2:	f02e                	sd	a1,32(sp)
    80016db4:	f42a                	sd	a0,40(sp)
    80016db6:	f8aa                	sd	a0,112(sp)
    80016db8:	fcae                	sd	a1,120(sp)
    80016dba:	4501                	li	a0,0
        for i in 0..512 {
    80016dbc:	e0aa                	sd	a0,64(sp)
    80016dbe:	20000593          	li	a1,512
    80016dc2:	e4ae                	sd	a1,72(sp)
    80016dc4:	00009097          	auipc	ra,0x9
    80016dc8:	b7e080e7          	jalr	-1154(ra) # 8001f942 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he0a8d93712e5493bE>
    80016dcc:	f82a                	sd	a0,48(sp)
    80016dce:	fc2e                	sd	a1,56(sp)
    80016dd0:	a009                	j	80016dd2 <_ZN6kernel6memory7mapping10page_table9PageTable5write17h1197b2bc60e8313aE+0x24>
    80016dd2:	7562                	ld	a0,56(sp)
    80016dd4:	75c2                	ld	a1,48(sp)
    80016dd6:	e8ae                	sd	a1,80(sp)
    80016dd8:	ecaa                	sd	a0,88(sp)
    80016dda:	a009                	j	80016ddc <_ZN6kernel6memory7mapping10page_table9PageTable5write17h1197b2bc60e8313aE+0x2e>
    80016ddc:	0888                	addi	a0,sp,80
    80016dde:	00009097          	auipc	ra,0x9
    80016de2:	af6080e7          	jalr	-1290(ra) # 8001f8d4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE>
    80016de6:	f0aa                	sd	a0,96(sp)
    80016de8:	f4ae                	sd	a1,104(sp)
    80016dea:	a009                	j	80016dec <_ZN6kernel6memory7mapping10page_table9PageTable5write17h1197b2bc60e8313aE+0x3e>
    80016dec:	7506                	ld	a0,96(sp)
    80016dee:	4581                	li	a1,0
    80016df0:	00b50463          	beq	a0,a1,80016df8 <_ZN6kernel6memory7mapping10page_table9PageTable5write17h1197b2bc60e8313aE+0x4a>
    80016df4:	a009                	j	80016df6 <_ZN6kernel6memory7mapping10page_table9PageTable5write17h1197b2bc60e8313aE+0x48>
    80016df6:	a029                	j	80016e00 <_ZN6kernel6memory7mapping10page_table9PageTable5write17h1197b2bc60e8313aE+0x52>
            self.entries[i].write(page_table.entries[i].as_usize());
        }
    }
    80016df8:	60ea                	ld	ra,152(sp)
    80016dfa:	610d                	addi	sp,sp,160
    80016dfc:	8082                	ret
        for i in 0..512 {
    80016dfe:	0000                	unimp
    80016e00:	75a6                	ld	a1,104(sp)
    80016e02:	ec2e                	sd	a1,24(sp)
    80016e04:	e12e                	sd	a1,128(sp)
    80016e06:	e52e                	sd	a1,136(sp)
    80016e08:	e92e                	sd	a1,144(sp)
    80016e0a:	1ff00513          	li	a0,511
            self.entries[i].write(page_table.entries[i].as_usize());
    80016e0e:	04b56063          	bltu	a0,a1,80016e4e <_ZN6kernel6memory7mapping10page_table9PageTable5write17h1197b2bc60e8313aE+0xa0>
    80016e12:	a009                	j	80016e14 <_ZN6kernel6memory7mapping10page_table9PageTable5write17h1197b2bc60e8313aE+0x66>
    80016e14:	65e2                	ld	a1,24(sp)
    80016e16:	7522                	ld	a0,40(sp)
    80016e18:	00359613          	slli	a2,a1,0x3
    80016e1c:	9532                	add	a0,a0,a2
    80016e1e:	e82a                	sd	a0,16(sp)
    80016e20:	1ff00513          	li	a0,511
    80016e24:	04b56163          	bltu	a0,a1,80016e66 <.LBB2_14+0x16>
    80016e28:	a009                	j	80016e2a <_ZN6kernel6memory7mapping10page_table9PageTable5write17h1197b2bc60e8313aE+0x7c>
    80016e2a:	7502                	ld	a0,32(sp)
    80016e2c:	65e2                	ld	a1,24(sp)
    80016e2e:	058e                	slli	a1,a1,0x3
    80016e30:	952e                	add	a0,a0,a1
    80016e32:	ffff2097          	auipc	ra,0xffff2
    80016e36:	894080e7          	jalr	-1900(ra) # 800086c6 <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry8as_usize17h85d0d27e00f735b4E>
    80016e3a:	e42a                	sd	a0,8(sp)
    80016e3c:	a009                	j	80016e3e <_ZN6kernel6memory7mapping10page_table9PageTable5write17h1197b2bc60e8313aE+0x90>
    80016e3e:	65a2                	ld	a1,8(sp)
    80016e40:	6542                	ld	a0,16(sp)
    80016e42:	ffff2097          	auipc	ra,0xffff2
    80016e46:	9f8080e7          	jalr	-1544(ra) # 8000883a <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry5write17h80740d4aa6720343E>
    80016e4a:	a009                	j	80016e4c <_ZN6kernel6memory7mapping10page_table9PageTable5write17h1197b2bc60e8313aE+0x9e>
        for i in 0..512 {
    80016e4c:	bf41                	j	80016ddc <_ZN6kernel6memory7mapping10page_table9PageTable5write17h1197b2bc60e8313aE+0x2e>
            self.entries[i].write(page_table.entries[i].as_usize());
    80016e4e:	6562                	ld	a0,24(sp)

0000000080016e50 <.LBB2_14>:
    80016e50:	00013617          	auipc	a2,0x13
    80016e54:	0c860613          	addi	a2,a2,200 # 80029f18 <.L__unnamed_1>
    80016e58:	20000593          	li	a1,512
    80016e5c:	0000b097          	auipc	ra,0xb
    80016e60:	446080e7          	jalr	1094(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80016e64:	0000                	unimp
    80016e66:	6562                	ld	a0,24(sp)

0000000080016e68 <.LBB2_15>:
    80016e68:	00013617          	auipc	a2,0x13
    80016e6c:	0c860613          	addi	a2,a2,200 # 80029f30 <.L__unnamed_2>
    80016e70:	20000593          	li	a1,512
    80016e74:	0000b097          	auipc	ra,0xb
    80016e78:	42e080e7          	jalr	1070(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel6memory7mapping10page_table9PageTable9translate17h0a84bb7f836f6989E:

0000000080016e7e <_ZN6kernel6memory7mapping10page_table9PageTable9translate17h0a84bb7f836f6989E>:
    /// 
    /// Look up a virtual address, return the physical address,
    /// or 0 if not mapped.
    /// Can only be used to look up user pages.
    /// 将虚拟地址翻译成物理地址，返回页表项
    fn translate(
    80016e7e:	7111                	addi	sp,sp,-256
    80016e80:	fd86                	sd	ra,248(sp)
    80016e82:	f82a                	sd	a0,48(sp)
    80016e84:	e0ae                	sd	a1,64(sp)
    80016e86:	e5aa                	sd	a0,200(sp)
    80016e88:	0088                	addi	a0,sp,64
        &mut self,
        va: VirtualAddress
    ) -> Option<&mut PageTableEntry> {
        if va.as_usize() > MAXVA {
    80016e8a:	ffffb097          	auipc	ra,0xffffb
    80016e8e:	9b2080e7          	jalr	-1614(ra) # 8001183c <_ZN89_$LT$kernel..memory..address..VirtualAddress$u20$as$u20$kernel..memory..address..Addr$GT$8as_usize17h7916c21610008a66E>
    80016e92:	fc2a                	sd	a0,56(sp)
    80016e94:	a009                	j	80016e96 <_ZN6kernel6memory7mapping10page_table9PageTable9translate17h0a84bb7f836f6989E+0x18>
    80016e96:	7562                	ld	a0,56(sp)
    80016e98:	4585                	li	a1,1
    80016e9a:	159a                	slli	a1,a1,0x26
    80016e9c:	0585                	addi	a1,a1,1
    80016e9e:	00b56663          	bltu	a0,a1,80016eaa <_ZN6kernel6memory7mapping10page_table9PageTable9translate17h0a84bb7f836f6989E+0x2c>
    80016ea2:	a009                	j	80016ea4 <_ZN6kernel6memory7mapping10page_table9PageTable9translate17h0a84bb7f836f6989E+0x26>
    80016ea4:	4501                	li	a0,0
            return None
    80016ea6:	e4aa                	sd	a0,72(sp)
    80016ea8:	a0dd                	j	80016f8e <_ZN6kernel6memory7mapping10page_table9PageTable9translate17h0a84bb7f836f6989E+0x110>
        }
        let mut page_table = self as *mut PageTable;
    80016eaa:	7542                	ld	a0,48(sp)
    80016eac:	e8aa                	sd	a0,80(sp)
    80016eae:	0128                	addi	a0,sp,136
    80016eb0:	4585                	li	a1,1
    80016eb2:	4609                	li	a2,2
        for level in (1..=2).rev() {
    80016eb4:	ffff4097          	auipc	ra,0xffff4
    80016eb8:	76a080e7          	jalr	1898(ra) # 8000b61e <_ZN4core3ops5range25RangeInclusive$LT$Idx$GT$3new17h55e0942ec6ff79cbE>
    80016ebc:	a009                	j	80016ebe <_ZN6kernel6memory7mapping10page_table9PageTable9translate17h0a84bb7f836f6989E+0x40>
    80016ebe:	1888                	addi	a0,sp,112
    80016ec0:	012c                	addi	a1,sp,136
    80016ec2:	ffff5097          	auipc	ra,0xffff5
    80016ec6:	b2c080e7          	jalr	-1236(ra) # 8000b9ee <_ZN4core4iter6traits8iterator8Iterator3rev17h6d9067942ad94ebeE>
    80016eca:	a009                	j	80016ecc <_ZN6kernel6memory7mapping10page_table9PageTable9translate17h0a84bb7f836f6989E+0x4e>
    80016ecc:	08a8                	addi	a0,sp,88
    80016ece:	188c                	addi	a1,sp,112
    80016ed0:	00005097          	auipc	ra,0x5
    80016ed4:	96a080e7          	jalr	-1686(ra) # 8001b83a <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h07513ad1b93938d8E>
    80016ed8:	a009                	j	80016eda <_ZN6kernel6memory7mapping10page_table9PageTable9translate17h0a84bb7f836f6989E+0x5c>
    80016eda:	7526                	ld	a0,104(sp)
    80016edc:	f92a                	sd	a0,176(sp)
    80016ede:	7506                	ld	a0,96(sp)
    80016ee0:	f52a                	sd	a0,168(sp)
    80016ee2:	6566                	ld	a0,88(sp)
    80016ee4:	f12a                	sd	a0,160(sp)
    80016ee6:	a009                	j	80016ee8 <_ZN6kernel6memory7mapping10page_table9PageTable9translate17h0a84bb7f836f6989E+0x6a>
    80016ee8:	1108                	addi	a0,sp,160
    80016eea:	00005097          	auipc	ra,0x5
    80016eee:	968080e7          	jalr	-1688(ra) # 8001b852 <_ZN98_$LT$core..iter..adapters..rev..Rev$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfb8b31ee37e3cf8fE>
    80016ef2:	fd2a                	sd	a0,184(sp)
    80016ef4:	e1ae                	sd	a1,192(sp)
    80016ef6:	a009                	j	80016ef8 <_ZN6kernel6memory7mapping10page_table9PageTable9translate17h0a84bb7f836f6989E+0x7a>
    80016ef8:	756a                	ld	a0,184(sp)
    80016efa:	4581                	li	a1,0
    80016efc:	00b50463          	beq	a0,a1,80016f04 <_ZN6kernel6memory7mapping10page_table9PageTable9translate17h0a84bb7f836f6989E+0x86>
    80016f00:	a009                	j	80016f02 <_ZN6kernel6memory7mapping10page_table9PageTable9translate17h0a84bb7f836f6989E+0x84>
    80016f02:	a811                	j	80016f16 <_ZN6kernel6memory7mapping10page_table9PageTable9translate17h0a84bb7f836f6989E+0x98>
    80016f04:	0088                	addi	a0,sp,64
    80016f06:	4581                	li	a1,0
    
            }else{
               return None
            }            
        }
        let pte = unsafe{&mut (*page_table).entries[va.page_num(0)]};
    80016f08:	ffffb097          	auipc	ra,0xffffb
    80016f0c:	962080e7          	jalr	-1694(ra) # 8001186a <_ZN6kernel6memory7address14VirtualAddress8page_num17h81ae42a65c302f7eE>
    80016f10:	f42a                	sd	a0,40(sp)
    80016f12:	a08d                	j	80016f74 <_ZN6kernel6memory7mapping10page_table9PageTable9translate17h0a84bb7f836f6989E+0xf6>
        for level in (1..=2).rev() {
    80016f14:	0000                	unimp
    80016f16:	658e                	ld	a1,192(sp)
    80016f18:	e9ae                	sd	a1,208(sp)
    80016f1a:	edae                	sd	a1,216(sp)
    80016f1c:	f1ae                	sd	a1,224(sp)
    80016f1e:	0088                	addi	a0,sp,64
            let pte = unsafe{ &mut (*page_table).entries[va.page_num(level)] };
    80016f20:	ffffb097          	auipc	ra,0xffffb
    80016f24:	94a080e7          	jalr	-1718(ra) # 8001186a <_ZN6kernel6memory7address14VirtualAddress8page_num17h81ae42a65c302f7eE>
    80016f28:	f02a                	sd	a0,32(sp)
    80016f2a:	a009                	j	80016f2c <_ZN6kernel6memory7mapping10page_table9PageTable9translate17h0a84bb7f836f6989E+0xae>
    80016f2c:	7582                	ld	a1,32(sp)
    80016f2e:	1ff00513          	li	a0,511
    80016f32:	06b56263          	bltu	a0,a1,80016f96 <_ZN6kernel6memory7mapping10page_table9PageTable9translate17h0a84bb7f836f6989E+0x118>
    80016f36:	a009                	j	80016f38 <_ZN6kernel6memory7mapping10page_table9PageTable9translate17h0a84bb7f836f6989E+0xba>
    80016f38:	7582                	ld	a1,32(sp)
    80016f3a:	6546                	ld	a0,80(sp)
    80016f3c:	058e                	slli	a1,a1,0x3
    80016f3e:	952e                	add	a0,a0,a1
    80016f40:	e82a                	sd	a0,16(sp)
    80016f42:	f5aa                	sd	a0,232(sp)
            if pte.is_valid() {
    80016f44:	ffff1097          	auipc	ra,0xffff1
    80016f48:	78c080e7          	jalr	1932(ra) # 800086d0 <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry8is_valid17h2b3a673d14ed09c6E>
    80016f4c:	ec2a                	sd	a0,24(sp)
    80016f4e:	a009                	j	80016f50 <_ZN6kernel6memory7mapping10page_table9PageTable9translate17h0a84bb7f836f6989E+0xd2>
    80016f50:	6562                	ld	a0,24(sp)
    80016f52:	4581                	li	a1,0
    80016f54:	00b50a63          	beq	a0,a1,80016f68 <_ZN6kernel6memory7mapping10page_table9PageTable9translate17h0a84bb7f836f6989E+0xea>
    80016f58:	a009                	j	80016f5a <_ZN6kernel6memory7mapping10page_table9PageTable9translate17h0a84bb7f836f6989E+0xdc>
                page_table = pte.as_pagetable();
    80016f5a:	6542                	ld	a0,16(sp)
    80016f5c:	ffff2097          	auipc	ra,0xffff2
    80016f60:	84a080e7          	jalr	-1974(ra) # 800087a6 <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry12as_pagetable17h89cf44fefbbd4b4eE>
    80016f64:	e42a                	sd	a0,8(sp)
    80016f66:	a021                	j	80016f6e <_ZN6kernel6memory7mapping10page_table9PageTable9translate17h0a84bb7f836f6989E+0xf0>
    80016f68:	4501                	li	a0,0
               return None
    80016f6a:	e4aa                	sd	a0,72(sp)
    80016f6c:	a00d                	j	80016f8e <_ZN6kernel6memory7mapping10page_table9PageTable9translate17h0a84bb7f836f6989E+0x110>
                page_table = pte.as_pagetable();
    80016f6e:	6522                	ld	a0,8(sp)
    80016f70:	e8aa                	sd	a0,80(sp)
        for level in (1..=2).rev() {
    80016f72:	bf9d                	j	80016ee8 <_ZN6kernel6memory7mapping10page_table9PageTable9translate17h0a84bb7f836f6989E+0x6a>
    80016f74:	75a2                	ld	a1,40(sp)
    80016f76:	1ff00513          	li	a0,511
        let pte = unsafe{&mut (*page_table).entries[va.page_num(0)]};
    80016f7a:	02b56a63          	bltu	a0,a1,80016fae <.LBB3_24+0x16>
    80016f7e:	a009                	j	80016f80 <_ZN6kernel6memory7mapping10page_table9PageTable9translate17h0a84bb7f836f6989E+0x102>
    80016f80:	75a2                	ld	a1,40(sp)
    80016f82:	6546                	ld	a0,80(sp)
    80016f84:	058e                	slli	a1,a1,0x3
    80016f86:	952e                	add	a0,a0,a1
    80016f88:	f9aa                	sd	a0,240(sp)
        Some(pte)
    80016f8a:	e4aa                	sd	a0,72(sp)
    }
    80016f8c:	a009                	j	80016f8e <_ZN6kernel6memory7mapping10page_table9PageTable9translate17h0a84bb7f836f6989E+0x110>
    80016f8e:	6526                	ld	a0,72(sp)
    80016f90:	70ee                	ld	ra,248(sp)
    80016f92:	6111                	addi	sp,sp,256
    80016f94:	8082                	ret
            let pte = unsafe{ &mut (*page_table).entries[va.page_num(level)] };
    80016f96:	7502                	ld	a0,32(sp)

0000000080016f98 <.LBB3_24>:
    80016f98:	00013617          	auipc	a2,0x13
    80016f9c:	fb060613          	addi	a2,a2,-80 # 80029f48 <.L__unnamed_3>
    80016fa0:	20000593          	li	a1,512
    80016fa4:	0000b097          	auipc	ra,0xb
    80016fa8:	2fe080e7          	jalr	766(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80016fac:	0000                	unimp
        let pte = unsafe{&mut (*page_table).entries[va.page_num(0)]};
    80016fae:	7522                	ld	a0,40(sp)

0000000080016fb0 <.LBB3_25>:
    80016fb0:	00013617          	auipc	a2,0x13
    80016fb4:	fb060613          	addi	a2,a2,-80 # 80029f60 <.L__unnamed_4>
    80016fb8:	20000593          	li	a1,512
    80016fbc:	0000b097          	auipc	ra,0xb
    80016fc0:	2e6080e7          	jalr	742(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel6memory7mapping10page_table9PageTable18translate_or_alloc17ha9e02f6e0feabdb7E:

0000000080016fc6 <_ZN6kernel6memory7mapping10page_table9PageTable18translate_or_alloc17ha9e02f6e0feabdb7E>:

    /// 将虚拟地址翻译成物理地址或者直接映射
    fn translate_or_alloc(
    80016fc6:	7169                	addi	sp,sp,-304
    80016fc8:	f606                	sd	ra,296(sp)
    80016fca:	f4ae                	sd	a1,104(sp)
    80016fcc:	f9aa                	sd	a0,240(sp)
        &mut self,
        va: VirtualAddress
    ) -> Option<&mut PageTableEntry> {
        let mut pagetable = self as *mut PageTable;
    80016fce:	fcaa                	sd	a0,120(sp)
    80016fd0:	10a8                	addi	a0,sp,104
        let real_addr:usize = va.as_usize();
    80016fd2:	ffffb097          	auipc	ra,0xffffb
    80016fd6:	86a080e7          	jalr	-1942(ra) # 8001183c <_ZN89_$LT$kernel..memory..address..VirtualAddress$u20$as$u20$kernel..memory..address..Addr$GT$8as_usize17h7916c21610008a66E>
    80016fda:	85aa                	mv	a1,a0
    80016fdc:	f0ae                	sd	a1,96(sp)
    80016fde:	fdaa                	sd	a0,248(sp)
    80016fe0:	a009                	j	80016fe2 <_ZN6kernel6memory7mapping10page_table9PageTable18translate_or_alloc17ha9e02f6e0feabdb7E+0x1c>
    80016fe2:	7506                	ld	a0,96(sp)
    80016fe4:	4585                	li	a1,1
    80016fe6:	159a                	slli	a1,a1,0x26
    80016fe8:	0585                	addi	a1,a1,1
        if real_addr > MAXVA {
    80016fea:	02b56163          	bltu	a0,a1,8001700c <.LBB4_31+0x14>
    80016fee:	a009                	j	80016ff0 <.LBB4_30>

0000000080016ff0 <.LBB4_30>:
            panic!("walk");
    80016ff0:	0000f517          	auipc	a0,0xf
    80016ff4:	71c50513          	addi	a0,a0,1820 # 8002670c <.LJTI3_0+0x6c>

0000000080016ff8 <.LBB4_31>:
    80016ff8:	00013617          	auipc	a2,0x13
    80016ffc:	f8060613          	addi	a2,a2,-128 # 80029f78 <.L__unnamed_6>
    80017000:	4591                	li	a1,4
    80017002:	0000b097          	auipc	ra,0xb
    80017006:	274080e7          	jalr	628(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8001700a:	0000                	unimp
    8001700c:	1908                	addi	a0,sp,176
    8001700e:	4585                	li	a1,1
    80017010:	4609                	li	a2,2
        }
        for level in (1..=2).rev() {
    80017012:	ffff4097          	auipc	ra,0xffff4
    80017016:	60c080e7          	jalr	1548(ra) # 8000b61e <_ZN4core3ops5range25RangeInclusive$LT$Idx$GT$3new17h55e0942ec6ff79cbE>
    8001701a:	a009                	j	8001701c <.LBB4_31+0x24>
    8001701c:	0928                	addi	a0,sp,152
    8001701e:	190c                	addi	a1,sp,176
    80017020:	ffff5097          	auipc	ra,0xffff5
    80017024:	9ce080e7          	jalr	-1586(ra) # 8000b9ee <_ZN4core4iter6traits8iterator8Iterator3rev17h6d9067942ad94ebeE>
    80017028:	a009                	j	8001702a <.LBB4_31+0x32>
    8001702a:	0108                	addi	a0,sp,128
    8001702c:	092c                	addi	a1,sp,152
    8001702e:	00005097          	auipc	ra,0x5
    80017032:	80c080e7          	jalr	-2036(ra) # 8001b83a <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h07513ad1b93938d8E>
    80017036:	a009                	j	80017038 <.LBB4_31+0x40>
    80017038:	654a                	ld	a0,144(sp)
    8001703a:	edaa                	sd	a0,216(sp)
    8001703c:	652a                	ld	a0,136(sp)
    8001703e:	e9aa                	sd	a0,208(sp)
    80017040:	650a                	ld	a0,128(sp)
    80017042:	e5aa                	sd	a0,200(sp)
    80017044:	a009                	j	80017046 <.LBB4_31+0x4e>
    80017046:	01a8                	addi	a0,sp,200
    80017048:	00005097          	auipc	ra,0x5
    8001704c:	80a080e7          	jalr	-2038(ra) # 8001b852 <_ZN98_$LT$core..iter..adapters..rev..Rev$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfb8b31ee37e3cf8fE>
    80017050:	f1aa                	sd	a0,224(sp)
    80017052:	f5ae                	sd	a1,232(sp)
    80017054:	a009                	j	80017056 <.LBB4_31+0x5e>
    80017056:	750e                	ld	a0,224(sp)
    80017058:	4581                	li	a1,0
    8001705a:	00b50463          	beq	a0,a1,80017062 <.LBB4_31+0x6a>
    8001705e:	a009                	j	80017060 <.LBB4_31+0x68>
    80017060:	a811                	j	80017074 <.LBB4_31+0x7c>
    80017062:	10a8                	addi	a0,sp,104
    80017064:	4581                	li	a1,0
                };
                pagetable = Box::into_raw(zeroed_pgt);
                pte.0 = (((pagetable as usize) >> 12) << 10) | (PteFlags::V.bits());
            }
        }
        Some(unsafe{&mut (*pagetable).entries[va.page_num(0)]})
    80017066:	ffffb097          	auipc	ra,0xffffb
    8001706a:	804080e7          	jalr	-2044(ra) # 8001186a <_ZN6kernel6memory7address14VirtualAddress8page_num17h81ae42a65c302f7eE>
    8001706e:	ecaa                	sd	a0,88(sp)
    80017070:	a875                	j	8001712c <.LBB4_32+0x22>
        for level in (1..=2).rev() {
    80017072:	0000                	unimp
    80017074:	75ae                	ld	a1,232(sp)
    80017076:	e22e                	sd	a1,256(sp)
    80017078:	e62e                	sd	a1,264(sp)
    8001707a:	ea2e                	sd	a1,272(sp)
    8001707c:	10a8                	addi	a0,sp,104
            let pte = unsafe{ &mut (*pagetable).entries[va.page_num(level)] };
    8001707e:	ffffa097          	auipc	ra,0xffffa
    80017082:	7ec080e7          	jalr	2028(ra) # 8001186a <_ZN6kernel6memory7address14VirtualAddress8page_num17h81ae42a65c302f7eE>
    80017086:	e8aa                	sd	a0,80(sp)
    80017088:	a009                	j	8001708a <.LBB4_31+0x92>
    8001708a:	65c6                	ld	a1,80(sp)
    8001708c:	1ff00513          	li	a0,511
    80017090:	0ab56c63          	bltu	a0,a1,80017148 <.LBB4_32+0x3e>
    80017094:	a009                	j	80017096 <.LBB4_31+0x9e>
    80017096:	65c6                	ld	a1,80(sp)
    80017098:	7566                	ld	a0,120(sp)
    8001709a:	058e                	slli	a1,a1,0x3
    8001709c:	952e                	add	a0,a0,a1
    8001709e:	e0aa                	sd	a0,64(sp)
    800170a0:	ee2a                	sd	a0,280(sp)
            if pte.is_valid() {
    800170a2:	ffff1097          	auipc	ra,0xffff1
    800170a6:	62e080e7          	jalr	1582(ra) # 800086d0 <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry8is_valid17h2b3a673d14ed09c6E>
    800170aa:	e4aa                	sd	a0,72(sp)
    800170ac:	a009                	j	800170ae <.LBB4_31+0xb6>
    800170ae:	6526                	ld	a0,72(sp)
    800170b0:	4581                	li	a1,0
    800170b2:	00b50a63          	beq	a0,a1,800170c6 <.LBB4_31+0xce>
    800170b6:	a009                	j	800170b8 <.LBB4_31+0xc0>
                pagetable = pte.as_pagetable();
    800170b8:	6506                	ld	a0,64(sp)
    800170ba:	ffff1097          	auipc	ra,0xffff1
    800170be:	6ec080e7          	jalr	1772(ra) # 800087a6 <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry12as_pagetable17h89cf44fefbbd4b4eE>
    800170c2:	fc2a                	sd	a0,56(sp)
    800170c4:	a039                	j	800170d2 <.LBB4_31+0xda>
                    Box::new_zeroed().assume_init()
    800170c6:	00004097          	auipc	ra,0x4
    800170ca:	7f2080e7          	jalr	2034(ra) # 8001b8b8 <_ZN5alloc5boxed12Box$LT$T$GT$10new_zeroed17he11e171c2ca6c076E>
    800170ce:	f82a                	sd	a0,48(sp)
    800170d0:	a021                	j	800170d8 <.LBB4_31+0xe0>
                pagetable = pte.as_pagetable();
    800170d2:	7562                	ld	a0,56(sp)
    800170d4:	fcaa                	sd	a0,120(sp)
            if pte.is_valid() {
    800170d6:	a891                	j	8001712a <.LBB4_32+0x20>
                    Box::new_zeroed().assume_init()
    800170d8:	7542                	ld	a0,48(sp)
    800170da:	00005097          	auipc	ra,0x5
    800170de:	350080e7          	jalr	848(ra) # 8001c42a <_ZN5alloc5boxed60Box$LT$core..mem..maybe_uninit..MaybeUninit$LT$T$GT$$C$A$GT$11assume_init17h2fe4f6739411edd0E>
    800170e2:	85aa                	mv	a1,a0
    800170e4:	f42e                	sd	a1,40(sp)
    800170e6:	f22a                	sd	a0,288(sp)
    800170e8:	a009                	j	800170ea <.LBB4_31+0xf2>
                pagetable = Box::into_raw(zeroed_pgt);
    800170ea:	7522                	ld	a0,40(sp)
    800170ec:	00005097          	auipc	ra,0x5
    800170f0:	2b4080e7          	jalr	692(ra) # 8001c3a0 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$8into_raw17h11a22cb7d9ea1552E>
    800170f4:	f02a                	sd	a0,32(sp)
    800170f6:	a009                	j	800170f8 <.LBB4_31+0x100>
    800170f8:	7502                	ld	a0,32(sp)
    800170fa:	fcaa                	sd	a0,120(sp)
                pte.0 = (((pagetable as usize) >> 12) << 10) | (PteFlags::V.bits());
    800170fc:	8131                	srli	a0,a0,0xc
    800170fe:	ec2a                	sd	a0,24(sp)
    80017100:	a009                	j	80017102 <.LBB4_31+0x10a>
    80017102:	6562                	ld	a0,24(sp)
    80017104:	052a                	slli	a0,a0,0xa
    80017106:	e82a                	sd	a0,16(sp)
    80017108:	a009                	j	8001710a <.LBB4_32>

000000008001710a <.LBB4_32>:
    8001710a:	0000f517          	auipc	a0,0xf
    8001710e:	73e50513          	addi	a0,a0,1854 # 80026848 <.L__unnamed_6+0xa0>
    80017112:	ffff1097          	auipc	ra,0xffff1
    80017116:	734080e7          	jalr	1844(ra) # 80008846 <_ZN6kernel6memory7mapping16page_table_entry8PteFlags4bits17hec41972a30d9c1c3E>
    8001711a:	e42a                	sd	a0,8(sp)
    8001711c:	a009                	j	8001711e <.LBB4_32+0x14>
    8001711e:	6586                	ld	a1,64(sp)
    80017120:	6542                	ld	a0,16(sp)
    80017122:	6622                	ld	a2,8(sp)
    80017124:	8d51                	or	a0,a0,a2
    80017126:	e188                	sd	a0,0(a1)
            if pte.is_valid() {
    80017128:	a009                	j	8001712a <.LBB4_32+0x20>
        for level in (1..=2).rev() {
    8001712a:	bf31                	j	80017046 <.LBB4_31+0x4e>
    8001712c:	65e6                	ld	a1,88(sp)
    8001712e:	1ff00513          	li	a0,511
        Some(unsafe{&mut (*pagetable).entries[va.page_num(0)]})
    80017132:	02b56763          	bltu	a0,a1,80017160 <.LBB4_33+0x16>
    80017136:	a009                	j	80017138 <.LBB4_32+0x2e>
    80017138:	65e6                	ld	a1,88(sp)
    8001713a:	7566                	ld	a0,120(sp)
    8001713c:	058e                	slli	a1,a1,0x3
    8001713e:	952e                	add	a0,a0,a1
    80017140:	f8aa                	sd	a0,112(sp)
    }
    80017142:	70b2                	ld	ra,296(sp)
    80017144:	6155                	addi	sp,sp,304
    80017146:	8082                	ret
            let pte = unsafe{ &mut (*pagetable).entries[va.page_num(level)] };
    80017148:	6546                	ld	a0,80(sp)

000000008001714a <.LBB4_33>:
    8001714a:	00013617          	auipc	a2,0x13
    8001714e:	e4660613          	addi	a2,a2,-442 # 80029f90 <.L__unnamed_8>
    80017152:	20000593          	li	a1,512
    80017156:	0000b097          	auipc	ra,0xb
    8001715a:	14c080e7          	jalr	332(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    8001715e:	0000                	unimp
        Some(unsafe{&mut (*pagetable).entries[va.page_num(0)]})
    80017160:	6566                	ld	a0,88(sp)

0000000080017162 <.LBB4_34>:
    80017162:	00013617          	auipc	a2,0x13
    80017166:	e4660613          	addi	a2,a2,-442 # 80029fa8 <.L__unnamed_9>
    8001716a:	20000593          	li	a1,512
    8001716e:	0000b097          	auipc	ra,0xb
    80017172:	134080e7          	jalr	308(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel6memory7mapping10page_table9PageTable13pgt_translate17h8fe9f71b8d139103E:

0000000080017178 <_ZN6kernel6memory7mapping10page_table9PageTable13pgt_translate17h8fe9f71b8d139103E>:

    /// Look up a virtual address, return the physical address,
    /// or 0 if not mapped.
    /// Can only be used to look up user pages.
    /// 通过给定的页表，将对应的虚拟地址转换成物理地址
    pub fn pgt_translate(
    80017178:	7119                	addi	sp,sp,-128
    8001717a:	fc86                	sd	ra,120(sp)
    8001717c:	f42a                	sd	a0,40(sp)
    8001717e:	fc2e                	sd	a1,56(sp)
    80017180:	ecaa                	sd	a0,88(sp)
    80017182:	1828                	addi	a0,sp,56
        &mut self, 
        va: VirtualAddress
    ) -> Option<PhysicalAddress> {
        let addr = va.as_usize();
    80017184:	ffffa097          	auipc	ra,0xffffa
    80017188:	6b8080e7          	jalr	1720(ra) # 8001183c <_ZN89_$LT$kernel..memory..address..VirtualAddress$u20$as$u20$kernel..memory..address..Addr$GT$8as_usize17h7916c21610008a66E>
    8001718c:	85aa                	mv	a1,a0
    8001718e:	f82e                	sd	a1,48(sp)
    80017190:	f0aa                	sd	a0,96(sp)
    80017192:	a009                	j	80017194 <_ZN6kernel6memory7mapping10page_table9PageTable13pgt_translate17h8fe9f71b8d139103E+0x1c>
    80017194:	7542                	ld	a0,48(sp)
    80017196:	4585                	li	a1,1
    80017198:	159a                	slli	a1,a1,0x26
    8001719a:	0585                	addi	a1,a1,1
        if addr > MAXVA {
    8001719c:	00b56663          	bltu	a0,a1,800171a8 <_ZN6kernel6memory7mapping10page_table9PageTable13pgt_translate17h8fe9f71b8d139103E+0x30>
    800171a0:	a009                	j	800171a2 <_ZN6kernel6memory7mapping10page_table9PageTable13pgt_translate17h8fe9f71b8d139103E+0x2a>
    800171a2:	4501                	li	a0,0
            return None
    800171a4:	e0aa                	sd	a0,64(sp)
    800171a6:	a069                	j	80017230 <_ZN6kernel6memory7mapping10page_table9PageTable13pgt_translate17h8fe9f71b8d139103E+0xb8>
        }
        match self.translate(va){
    800171a8:	7522                	ld	a0,40(sp)
    800171aa:	75e2                	ld	a1,56(sp)
    800171ac:	00000097          	auipc	ra,0x0
    800171b0:	cd2080e7          	jalr	-814(ra) # 80016e7e <_ZN6kernel6memory7mapping10page_table9PageTable9translate17h0a84bb7f836f6989E>
    800171b4:	e8aa                	sd	a0,80(sp)
    800171b6:	a009                	j	800171b8 <_ZN6kernel6memory7mapping10page_table9PageTable13pgt_translate17h8fe9f71b8d139103E+0x40>
            Some(pte) => {
    800171b8:	6546                	ld	a0,80(sp)
    800171ba:	00a035b3          	snez	a1,a0
    800171be:	4581                	li	a1,0
    800171c0:	00b50463          	beq	a0,a1,800171c8 <_ZN6kernel6memory7mapping10page_table9PageTable13pgt_translate17h8fe9f71b8d139103E+0x50>
    800171c4:	a009                	j	800171c6 <_ZN6kernel6memory7mapping10page_table9PageTable13pgt_translate17h8fe9f71b8d139103E+0x4e>
    800171c6:	a029                	j	800171d0 <_ZN6kernel6memory7mapping10page_table9PageTable13pgt_translate17h8fe9f71b8d139103E+0x58>
    800171c8:	4501                	li	a0,0

                let pagetable_addr = pte.as_pagetable() as usize;
                Some(PhysicalAddress::new(pagetable_addr))
            }

            None => { None }
    800171ca:	e0aa                	sd	a0,64(sp)
        match self.translate(va){
    800171cc:	a095                	j	80017230 <_ZN6kernel6memory7mapping10page_table9PageTable13pgt_translate17h8fe9f71b8d139103E+0xb8>
    800171ce:	0000                	unimp
            Some(pte) => {
    800171d0:	6546                	ld	a0,80(sp)
    800171d2:	ec2a                	sd	a0,24(sp)
    800171d4:	f4aa                	sd	a0,104(sp)
                if !pte.is_valid(){
    800171d6:	ffff1097          	auipc	ra,0xffff1
    800171da:	4fa080e7          	jalr	1274(ra) # 800086d0 <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry8is_valid17h2b3a673d14ed09c6E>
    800171de:	f02a                	sd	a0,32(sp)
    800171e0:	a009                	j	800171e2 <_ZN6kernel6memory7mapping10page_table9PageTable13pgt_translate17h8fe9f71b8d139103E+0x6a>
    800171e2:	7502                	ld	a0,32(sp)
    800171e4:	e509                	bnez	a0,800171ee <_ZN6kernel6memory7mapping10page_table9PageTable13pgt_translate17h8fe9f71b8d139103E+0x76>
    800171e6:	a009                	j	800171e8 <_ZN6kernel6memory7mapping10page_table9PageTable13pgt_translate17h8fe9f71b8d139103E+0x70>
    800171e8:	4501                	li	a0,0
                    return None
    800171ea:	e0aa                	sd	a0,64(sp)
    800171ec:	a091                	j	80017230 <_ZN6kernel6memory7mapping10page_table9PageTable13pgt_translate17h8fe9f71b8d139103E+0xb8>
                if !pte.is_user(){
    800171ee:	6562                	ld	a0,24(sp)
    800171f0:	ffff1097          	auipc	ra,0xffff1
    800171f4:	50e080e7          	jalr	1294(ra) # 800086fe <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry7is_user17ha81b2d62b11ea775E>
    800171f8:	e82a                	sd	a0,16(sp)
    800171fa:	a009                	j	800171fc <_ZN6kernel6memory7mapping10page_table9PageTable13pgt_translate17h8fe9f71b8d139103E+0x84>
    800171fc:	6542                	ld	a0,16(sp)
    800171fe:	e509                	bnez	a0,80017208 <_ZN6kernel6memory7mapping10page_table9PageTable13pgt_translate17h8fe9f71b8d139103E+0x90>
    80017200:	a009                	j	80017202 <_ZN6kernel6memory7mapping10page_table9PageTable13pgt_translate17h8fe9f71b8d139103E+0x8a>
    80017202:	4501                	li	a0,0
                    return None
    80017204:	e0aa                	sd	a0,64(sp)
    80017206:	a02d                	j	80017230 <_ZN6kernel6memory7mapping10page_table9PageTable13pgt_translate17h8fe9f71b8d139103E+0xb8>
                let pagetable_addr = pte.as_pagetable() as usize;
    80017208:	6562                	ld	a0,24(sp)
    8001720a:	ffff1097          	auipc	ra,0xffff1
    8001720e:	59c080e7          	jalr	1436(ra) # 800087a6 <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry12as_pagetable17h89cf44fefbbd4b4eE>
    80017212:	e42a                	sd	a0,8(sp)
    80017214:	a009                	j	80017216 <_ZN6kernel6memory7mapping10page_table9PageTable13pgt_translate17h8fe9f71b8d139103E+0x9e>
    80017216:	6522                	ld	a0,8(sp)
    80017218:	f8aa                	sd	a0,112(sp)
                Some(PhysicalAddress::new(pagetable_addr))
    8001721a:	ffffa097          	auipc	ra,0xffffa
    8001721e:	6f6080e7          	jalr	1782(ra) # 80011910 <_ZN6kernel6memory7address15PhysicalAddress3new17hf2b76f8479ac6235E>
    80017222:	e02a                	sd	a0,0(sp)
    80017224:	a009                	j	80017226 <_ZN6kernel6memory7mapping10page_table9PageTable13pgt_translate17h8fe9f71b8d139103E+0xae>
    80017226:	6502                	ld	a0,0(sp)
    80017228:	e4aa                	sd	a0,72(sp)
    8001722a:	4505                	li	a0,1
    8001722c:	e0aa                	sd	a0,64(sp)
        match self.translate(va){
    8001722e:	a009                	j	80017230 <_ZN6kernel6memory7mapping10page_table9PageTable13pgt_translate17h8fe9f71b8d139103E+0xb8>
        }
    }
    80017230:	6506                	ld	a0,64(sp)
    80017232:	65a6                	ld	a1,72(sp)
    80017234:	70e6                	ld	ra,120(sp)
    80017236:	6109                	addi	sp,sp,128
    80017238:	8082                	ret

Disassembly of section .text._ZN6kernel6memory7mapping10page_table9PageTable3map17h08dc54e6ac3f590cE:

000000008001723a <_ZN6kernel6memory7mapping10page_table9PageTable3map17h08dc54e6ac3f590cE>:
    /// Create PTEs for virtual addresses starting at va that refer to
    /// physical addresses starting at pa. va and size might not
    /// be page-aligned. Returns 0 on success, -1 if walk() couldn't
    /// allocate a needed page-table page.
    /// 将虚拟地址与物理地址建立映射，并写入MMU中
    pub unsafe fn map(
    8001723a:	7149                	addi	sp,sp,-368
    8001723c:	f686                	sd	ra,360(sp)
    8001723e:	f0ba                	sd	a4,96(sp)
    80017240:	f4b6                	sd	a3,104(sp)
    80017242:	f8aa                	sd	a0,112(sp)
    80017244:	e12e                	sd	a1,128(sp)
    80017246:	e532                	sd	a2,136(sp)
    80017248:	fa2a                	sd	a0,304(sp)
    8001724a:	fe36                	sd	a3,312(sp)
    8001724c:	e2ba                	sd	a4,320(sp)
    8001724e:	0108                	addi	a0,sp,128
        mut va: VirtualAddress, 
        mut pa: PhysicalAddress, 
        size:usize, 
        perm:PteFlags
    ) -> bool {
        let mut last = VirtualAddress::new(va.as_usize() + size);
    80017250:	ffffa097          	auipc	ra,0xffffa
    80017254:	5ec080e7          	jalr	1516(ra) # 8001183c <_ZN89_$LT$kernel..memory..address..VirtualAddress$u20$as$u20$kernel..memory..address..Addr$GT$8as_usize17h7916c21610008a66E>
    80017258:	fcaa                	sd	a0,120(sp)
    8001725a:	a009                	j	8001725c <_ZN6kernel6memory7mapping10page_table9PageTable3map17h08dc54e6ac3f590cE+0x22>
    8001725c:	75e6                	ld	a1,120(sp)
    8001725e:	7526                	ld	a0,104(sp)
    80017260:	952e                	add	a0,a0,a1
    80017262:	ecaa                	sd	a0,88(sp)
    80017264:	1ab56163          	bltu	a0,a1,80017406 <.LBB6_36>
    80017268:	a009                	j	8001726a <_ZN6kernel6memory7mapping10page_table9PageTable3map17h08dc54e6ac3f590cE+0x30>
    8001726a:	6566                	ld	a0,88(sp)
    8001726c:	ffffa097          	auipc	ra,0xffffa
    80017270:	5f4080e7          	jalr	1524(ra) # 80011860 <_ZN6kernel6memory7address14VirtualAddress3new17h716be423461f1938E>
    80017274:	ed2a                	sd	a0,152(sp)
    80017276:	a009                	j	80017278 <_ZN6kernel6memory7mapping10page_table9PageTable3map17h08dc54e6ac3f590cE+0x3e>
    80017278:	0108                	addi	a0,sp,128
        va.pg_round_down();
    8001727a:	fffed097          	auipc	ra,0xfffed
    8001727e:	738080e7          	jalr	1848(ra) # 800049b2 <_ZN6kernel6memory7address4Addr13pg_round_down17h7ab358be9f94b06bE>
    80017282:	a009                	j	80017284 <_ZN6kernel6memory7mapping10page_table9PageTable3map17h08dc54e6ac3f590cE+0x4a>
    80017284:	0928                	addi	a0,sp,152
        last.pg_round_up();
    80017286:	fffed097          	auipc	ra,0xfffed
    8001728a:	618080e7          	jalr	1560(ra) # 8000489e <_ZN6kernel6memory7address4Addr11pg_round_up17h43579bab3405c977E>
    8001728e:	a009                	j	80017290 <_ZN6kernel6memory7mapping10page_table9PageTable3map17h08dc54e6ac3f590cE+0x56>
    80017290:	0108                	addi	a0,sp,128
    80017292:	092c                	addi	a1,sp,152
        while va != last{
    80017294:	ffffa097          	auipc	ra,0xffffa
    80017298:	686080e7          	jalr	1670(ra) # 8001191a <_ZN80_$LT$kernel..memory..address..VirtualAddress$u20$as$u20$core..cmp..PartialEq$GT$2ne17h594c009ca6e35357E>
    8001729c:	e8aa                	sd	a0,80(sp)
    8001729e:	a009                	j	800172a0 <_ZN6kernel6memory7mapping10page_table9PageTable3map17h08dc54e6ac3f590cE+0x66>
    800172a0:	6546                	ld	a0,80(sp)
    800172a2:	e511                	bnez	a0,800172ae <_ZN6kernel6memory7mapping10page_table9PageTable3map17h08dc54e6ac3f590cE+0x74>
    800172a4:	a009                	j	800172a6 <_ZN6kernel6memory7mapping10page_table9PageTable3map17h08dc54e6ac3f590cE+0x6c>
    800172a6:	4505                	li	a0,1

                }
                None => return false
             }
        }
        true
    800172a8:	08a10ba3          	sb	a0,151(sp)
    }
    800172ac:	aa81                	j	800173fc <.LBB6_35+0x2e>
            match self.translate_or_alloc(va){
    800172ae:	7546                	ld	a0,112(sp)
    800172b0:	658a                	ld	a1,128(sp)
    800172b2:	00000097          	auipc	ra,0x0
    800172b6:	d14080e7          	jalr	-748(ra) # 80016fc6 <_ZN6kernel6memory7mapping10page_table9PageTable18translate_or_alloc17ha9e02f6e0feabdb7E>
    800172ba:	f12a                	sd	a0,160(sp)
    800172bc:	a009                	j	800172be <_ZN6kernel6memory7mapping10page_table9PageTable3map17h08dc54e6ac3f590cE+0x84>
                Some(pte) => {
    800172be:	750a                	ld	a0,160(sp)
    800172c0:	00a035b3          	snez	a1,a0
    800172c4:	4581                	li	a1,0
    800172c6:	00b50463          	beq	a0,a1,800172ce <_ZN6kernel6memory7mapping10page_table9PageTable3map17h08dc54e6ac3f590cE+0x94>
    800172ca:	a009                	j	800172cc <_ZN6kernel6memory7mapping10page_table9PageTable3map17h08dc54e6ac3f590cE+0x92>
    800172cc:	a031                	j	800172d8 <_ZN6kernel6memory7mapping10page_table9PageTable3map17h08dc54e6ac3f590cE+0x9e>
    800172ce:	4501                	li	a0,0
                None => return false
    800172d0:	08a10ba3          	sb	a0,151(sp)
    }
    800172d4:	a225                	j	800173fc <.LBB6_35+0x2e>
            match self.translate_or_alloc(va){
    800172d6:	0000                	unimp
                Some(pte) => {
    800172d8:	750a                	ld	a0,160(sp)
    800172da:	e0aa                	sd	a0,64(sp)
    800172dc:	e6aa                	sd	a0,328(sp)
                if pte.is_valid() {
    800172de:	ffff1097          	auipc	ra,0xffff1
    800172e2:	3f2080e7          	jalr	1010(ra) # 800086d0 <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry8is_valid17h2b3a673d14ed09c6E>
    800172e6:	e4aa                	sd	a0,72(sp)
    800172e8:	a009                	j	800172ea <_ZN6kernel6memory7mapping10page_table9PageTable3map17h08dc54e6ac3f590cE+0xb0>
    800172ea:	6526                	ld	a0,72(sp)
    800172ec:	4581                	li	a1,0
    800172ee:	00b50a63          	beq	a0,a1,80017302 <_ZN6kernel6memory7mapping10page_table9PageTable3map17h08dc54e6ac3f590cE+0xc8>
    800172f2:	a009                	j	800172f4 <_ZN6kernel6memory7mapping10page_table9PageTable3map17h08dc54e6ac3f590cE+0xba>
    800172f4:	0108                	addi	a0,sp,128
                        va.as_usize(),
    800172f6:	ffffa097          	auipc	ra,0xffffa
    800172fa:	546080e7          	jalr	1350(ra) # 8001183c <_ZN89_$LT$kernel..memory..address..VirtualAddress$u20$as$u20$kernel..memory..address..Addr$GT$8as_usize17h7916c21610008a66E>
    800172fe:	f22a                	sd	a0,288(sp)
    80017300:	a809                	j	80017312 <_ZN6kernel6memory7mapping10page_table9PageTable3map17h08dc54e6ac3f590cE+0xd8>
                pte.write_perm(pa, perm);
    80017302:	7606                	ld	a2,96(sp)
    80017304:	6506                	ld	a0,64(sp)
    80017306:	65aa                	ld	a1,136(sp)
    80017308:	ffff1097          	auipc	ra,0xffff1
    8001730c:	4d8080e7          	jalr	1240(ra) # 800087e0 <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry10write_perm17h2feb85df16db2682E>
    80017310:	a8c9                	j	800173e2 <.LBB6_35+0x14>
    80017312:	0128                	addi	a0,sp,136
                        pa.as_usize(),
    80017314:	ffffa097          	auipc	ra,0xffffa
    80017318:	53a080e7          	jalr	1338(ra) # 8001184e <_ZN90_$LT$kernel..memory..address..PhysicalAddress$u20$as$u20$kernel..memory..address..Addr$GT$8as_usize17hea2eecdb80a1a2b2E>
    8001731c:	f62a                	sd	a0,296(sp)
    8001731e:	a009                	j	80017320 <_ZN6kernel6memory7mapping10page_table9PageTable3map17h08dc54e6ac3f590cE+0xe6>
    80017320:	6586                	ld	a1,64(sp)
    80017322:	1208                	addi	a0,sp,288
                    println!(
    80017324:	e62a                	sd	a0,264(sp)
    80017326:	1230                	addi	a2,sp,296
    80017328:	f032                	sd	a2,32(sp)
    8001732a:	ea32                	sd	a2,272(sp)
    8001732c:	ee2e                	sd	a1,280(sp)
    8001732e:	eaaa                	sd	a0,336(sp)
    80017330:	eeb2                	sd	a2,344(sp)
    80017332:	862e                	mv	a2,a1
    80017334:	f432                	sd	a2,40(sp)
    80017336:	f2ae                	sd	a1,352(sp)

0000000080017338 <.LBB6_29>:
    80017338:	0000d597          	auipc	a1,0xd
    8001733c:	07c58593          	addi	a1,a1,124 # 800243b4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h760b07191d46b3f2E>
    80017340:	00008097          	auipc	ra,0x8
    80017344:	360080e7          	jalr	864(ra) # 8001f6a0 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    80017348:	f82a                	sd	a0,48(sp)
    8001734a:	fc2e                	sd	a1,56(sp)
    8001734c:	a009                	j	8001734e <.LBB6_29+0x16>
    8001734e:	7502                	ld	a0,32(sp)

0000000080017350 <.LBB6_30>:
    80017350:	0000d597          	auipc	a1,0xd
    80017354:	06458593          	addi	a1,a1,100 # 800243b4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h760b07191d46b3f2E>
    80017358:	00008097          	auipc	ra,0x8
    8001735c:	348080e7          	jalr	840(ra) # 8001f6a0 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    80017360:	e82a                	sd	a0,16(sp)
    80017362:	ec2e                	sd	a1,24(sp)
    80017364:	a009                	j	80017366 <.LBB6_30+0x16>
    80017366:	7522                	ld	a0,40(sp)

0000000080017368 <.LBB6_31>:
    80017368:	0000d597          	auipc	a1,0xd
    8001736c:	04c58593          	addi	a1,a1,76 # 800243b4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h760b07191d46b3f2E>
    80017370:	00008097          	auipc	ra,0x8
    80017374:	330080e7          	jalr	816(ra) # 8001f6a0 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    80017378:	e02a                	sd	a0,0(sp)
    8001737a:	e42e                	sd	a1,8(sp)
    8001737c:	a009                	j	8001737e <.LBB6_31+0x16>
    8001737e:	6522                	ld	a0,8(sp)
    80017380:	6582                	ld	a1,0(sp)
    80017382:	6662                	ld	a2,24(sp)
    80017384:	66c2                	ld	a3,16(sp)
    80017386:	7762                	ld	a4,56(sp)
    80017388:	77c2                	ld	a5,48(sp)
    8001738a:	edbe                	sd	a5,216(sp)
    8001738c:	f1ba                	sd	a4,224(sp)
    8001738e:	f5b6                	sd	a3,232(sp)
    80017390:	f9b2                	sd	a2,240(sp)
    80017392:	fdae                	sd	a1,248(sp)
    80017394:	e22a                	sd	a0,256(sp)

0000000080017396 <.LBB6_32>:
    80017396:	00013597          	auipc	a1,0x13
    8001739a:	c7a58593          	addi	a1,a1,-902 # 8002a010 <.L__unnamed_10>

000000008001739e <.LBB6_33>:
    8001739e:	00013797          	auipc	a5,0x13
    800173a2:	cb278793          	addi	a5,a5,-846 # 8002a050 <.L__unnamed_11>
    800173a6:	1128                	addi	a0,sp,168
    800173a8:	4611                	li	a2,4
    800173aa:	09b4                	addi	a3,sp,216
    800173ac:	480d                	li	a6,3
    800173ae:	8742                	mv	a4,a6
    800173b0:	fffee097          	auipc	ra,0xfffee
    800173b4:	094080e7          	jalr	148(ra) # 80005444 <_ZN4core3fmt9Arguments16new_v1_formatted17hf6d3ed0f8e821319E>
    800173b8:	a009                	j	800173ba <.LBB6_33+0x1c>
    800173ba:	1128                	addi	a0,sp,168
    800173bc:	00007097          	auipc	ra,0x7
    800173c0:	990080e7          	jalr	-1648(ra) # 8001dd4c <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    800173c4:	a009                	j	800173c6 <.LBB6_34>

00000000800173c6 <.LBB6_34>:
                    panic!("remap");
    800173c6:	00013517          	auipc	a0,0x13
    800173ca:	d3250513          	addi	a0,a0,-718 # 8002a0f8 <.L__unnamed_12>

00000000800173ce <.LBB6_35>:
    800173ce:	00013617          	auipc	a2,0x13
    800173d2:	d3260613          	addi	a2,a2,-718 # 8002a100 <.L__unnamed_13>
    800173d6:	4595                	li	a1,5
    800173d8:	0000b097          	auipc	ra,0xb
    800173dc:	e9e080e7          	jalr	-354(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    800173e0:	0000                	unimp
    800173e2:	0108                	addi	a0,sp,128
                va.add_page();
    800173e4:	fffed097          	auipc	ra,0xfffed
    800173e8:	650080e7          	jalr	1616(ra) # 80004a34 <_ZN6kernel6memory7address4Addr8add_page17hda9f7615eed2e36aE>
    800173ec:	a009                	j	800173ee <.LBB6_35+0x20>
    800173ee:	0128                	addi	a0,sp,136
                pa.add_page();
    800173f0:	fffed097          	auipc	ra,0xfffed
    800173f4:	5fa080e7          	jalr	1530(ra) # 800049ea <_ZN6kernel6memory7address4Addr8add_page17h93c7d6ddd860f6baE>
    800173f8:	a009                	j	800173fa <.LBB6_35+0x2c>
        while va != last{
    800173fa:	bd59                	j	80017290 <_ZN6kernel6memory7mapping10page_table9PageTable3map17h08dc54e6ac3f590cE+0x56>
    }
    800173fc:	09714503          	lbu	a0,151(sp)
    80017400:	70b6                	ld	ra,360(sp)
    80017402:	6175                	addi	sp,sp,368
    80017404:	8082                	ret

0000000080017406 <.LBB6_36>:
        let mut last = VirtualAddress::new(va.as_usize() + size);
    80017406:	00013517          	auipc	a0,0x13
    8001740a:	bda50513          	addi	a0,a0,-1062 # 80029fe0 <str.0>

000000008001740e <.LBB6_37>:
    8001740e:	00013617          	auipc	a2,0x13
    80017412:	bb260613          	addi	a2,a2,-1102 # 80029fc0 <.L__unnamed_14>
    80017416:	45f1                	li	a1,28
    80017418:	0000b097          	auipc	ra,0xb
    8001741c:	e5e080e7          	jalr	-418(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel6memory7mapping10page_table9PageTable10kernel_map17h284e6512c0cc8b52E:

0000000080017422 <_ZN6kernel6memory7mapping10page_table9PageTable10kernel_map17h284e6512c0cc8b52E>:

    /// add a mapping to the kernel page table.
    /// only used when booting
    /// does not flush TLB or enable paging   
    pub unsafe fn kernel_map(
    80017422:	7139                	addi	sp,sp,-64
    80017424:	fc06                	sd	ra,56(sp)
    80017426:	e82a                	sd	a0,16(sp)
    80017428:	ec2e                	sd	a1,24(sp)
    8001742a:	f032                	sd	a2,32(sp)
    8001742c:	f436                	sd	a3,40(sp)
    8001742e:	f83a                	sd	a4,48(sp)
        //     "kvm_map: va={:#x}, pa={:#x}, size={:#x}",
        //     va.as_usize(),
        //     pa.as_usize(),
        //     size
        // );
        if !self.map(va, pa, size, perm){
    80017430:	00000097          	auipc	ra,0x0
    80017434:	e0a080e7          	jalr	-502(ra) # 8001723a <_ZN6kernel6memory7mapping10page_table9PageTable3map17h08dc54e6ac3f590cE>
    80017438:	e42a                	sd	a0,8(sp)
    8001743a:	a009                	j	8001743c <_ZN6kernel6memory7mapping10page_table9PageTable10kernel_map17h284e6512c0cc8b52E+0x1a>
    8001743c:	6522                	ld	a0,8(sp)
    8001743e:	e105                	bnez	a0,8001745e <.LBB7_5+0x14>
    80017440:	a009                	j	80017442 <.LBB7_4>

0000000080017442 <.LBB7_4>:
            panic!("内核虚拟地址映射失败");
    80017442:	00013517          	auipc	a0,0x13
    80017446:	cd650513          	addi	a0,a0,-810 # 8002a118 <.L__unnamed_15>

000000008001744a <.LBB7_5>:
    8001744a:	00013617          	auipc	a2,0x13
    8001744e:	cee60613          	addi	a2,a2,-786 # 8002a138 <.L__unnamed_16>
    80017452:	45f9                	li	a1,30
    80017454:	0000b097          	auipc	ra,0xb
    80017458:	e22080e7          	jalr	-478(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8001745c:	0000                	unimp
        }
    }
    8001745e:	70e2                	ld	ra,56(sp)
    80017460:	6121                	addi	sp,sp,64
    80017462:	8082                	ret

Disassembly of section .text._ZN6kernel6memory7mapping10page_table9PageTable9uvmcreate17hc2bd2b6aed1ce488E:

0000000080017464 <_ZN6kernel6memory7mapping10page_table9PageTable9uvmcreate17hc2bd2b6aed1ce488E>:


    /// Create an empty user page table.
    /// return None if out of memory
    pub unsafe fn uvmcreate() -> *mut PageTable{
    80017464:	7179                	addi	sp,sp,-48
        let pagetable: Box<PageTable> = Box::new_zeroed().assume_init();
    80017466:	f406                	sd	ra,40(sp)
    80017468:	00004097          	auipc	ra,0x4
    8001746c:	450080e7          	jalr	1104(ra) # 8001b8b8 <_ZN5alloc5boxed12Box$LT$T$GT$10new_zeroed17he11e171c2ca6c076E>
    80017470:	e82a                	sd	a0,16(sp)
    80017472:	a009                	j	80017474 <_ZN6kernel6memory7mapping10page_table9PageTable9uvmcreate17hc2bd2b6aed1ce488E+0x10>
    80017474:	6542                	ld	a0,16(sp)
    80017476:	00005097          	auipc	ra,0x5
    8001747a:	fb4080e7          	jalr	-76(ra) # 8001c42a <_ZN5alloc5boxed60Box$LT$core..mem..maybe_uninit..MaybeUninit$LT$T$GT$$C$A$GT$11assume_init17h2fe4f6739411edd0E>
    8001747e:	85aa                	mv	a1,a0
    80017480:	e42e                	sd	a1,8(sp)
    80017482:	ec2a                	sd	a0,24(sp)
    80017484:	a009                	j	80017486 <_ZN6kernel6memory7mapping10page_table9PageTable9uvmcreate17hc2bd2b6aed1ce488E+0x22>
        let ptr = Box::into_raw(pagetable);
    80017486:	6522                	ld	a0,8(sp)
    80017488:	00005097          	auipc	ra,0x5
    8001748c:	f18080e7          	jalr	-232(ra) # 8001c3a0 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$8into_raw17h11a22cb7d9ea1552E>
    80017490:	85aa                	mv	a1,a0
    80017492:	e02e                	sd	a1,0(sp)
    80017494:	f02a                	sd	a0,32(sp)
    80017496:	a009                	j	80017498 <_ZN6kernel6memory7mapping10page_table9PageTable9uvmcreate17hc2bd2b6aed1ce488E+0x34>
        ptr
    }
    80017498:	6502                	ld	a0,0(sp)
    8001749a:	70a2                	ld	ra,40(sp)
    8001749c:	6145                	addi	sp,sp,48
    8001749e:	8082                	ret

Disassembly of section .text._ZN6kernel6memory7mapping10page_table9PageTable8uvm_init17h1e8988bec17c91edE:

00000000800174a0 <_ZN6kernel6memory7mapping10page_table9PageTable8uvm_init17h1e8988bec17c91edE>:

    /// Load the user initcode into address 0 of pagetable
    /// for the very first process
    /// size must be less than a page
    pub unsafe fn uvm_init(&mut self, src: &[u8]){
    800174a0:	7175                	addi	sp,sp,-144
    800174a2:	e506                	sd	ra,136(sp)
    800174a4:	e4b2                	sd	a2,72(sp)
    800174a6:	862e                	mv	a2,a1
    800174a8:	65a6                	ld	a1,72(sp)
    800174aa:	e8b2                	sd	a2,80(sp)
    800174ac:	862a                	mv	a2,a0
    800174ae:	6546                	ld	a0,80(sp)
    800174b0:	ecb2                	sd	a2,88(sp)
    800174b2:	f4b2                	sd	a2,104(sp)
    800174b4:	f8aa                	sd	a0,112(sp)
    800174b6:	fcae                	sd	a1,120(sp)
        if src.len() >= PGSIZE{
    800174b8:	00008097          	auipc	ra,0x8
    800174bc:	11c080e7          	jalr	284(ra) # 8001f5d4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hb06ce83b043493f3E>
    800174c0:	f0aa                	sd	a0,96(sp)
    800174c2:	a009                	j	800174c4 <_ZN6kernel6memory7mapping10page_table9PageTable8uvm_init17h1e8988bec17c91edE+0x24>
    800174c4:	7506                	ld	a0,96(sp)
    800174c6:	8131                	srli	a0,a0,0xc
    800174c8:	4581                	li	a1,0
    800174ca:	02b50163          	beq	a0,a1,800174ec <.LBB9_15+0x14>
    800174ce:	a009                	j	800174d0 <.LBB9_14>

00000000800174d0 <.LBB9_14>:
            panic!("inituvm: more than a page");
    800174d0:	00013517          	auipc	a0,0x13
    800174d4:	c8050513          	addi	a0,a0,-896 # 8002a150 <.L__unnamed_17>

00000000800174d8 <.LBB9_15>:
    800174d8:	00013617          	auipc	a2,0x13
    800174dc:	c9860613          	addi	a2,a2,-872 # 8002a170 <.L__unnamed_18>
    800174e0:	45e5                	li	a1,25
    800174e2:	0000b097          	auipc	ra,0xb
    800174e6:	d94080e7          	jalr	-620(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    800174ea:	0000                	unimp
        }

        let mem = RawPage::new_zeroed() as *mut u8;
    800174ec:	ffff3097          	auipc	ra,0xffff3
    800174f0:	a78080e7          	jalr	-1416(ra) # 80009f64 <_ZN6kernel6memory13PageAllocator10new_zeroed17hbc99bdbca8d1d931E>
    800174f4:	e0aa                	sd	a0,64(sp)
    800174f6:	a009                	j	800174f8 <.LBB9_15+0x20>
    800174f8:	6506                	ld	a0,64(sp)
    800174fa:	85aa                	mv	a1,a0
    800174fc:	fc2e                	sd	a1,56(sp)
    800174fe:	e12a                	sd	a0,128(sp)
    80017500:	4581                	li	a1,0
    80017502:	6605                	lui	a2,0x1
        write_bytes(mem, 0, PGSIZE);
    80017504:	0000a097          	auipc	ra,0xa
    80017508:	62c080e7          	jalr	1580(ra) # 80021b30 <_ZN4core10intrinsics11write_bytes17hfabd30e5bfcb1b55E>
    8001750c:	a009                	j	8001750e <.LBB9_15+0x36>
    8001750e:	4501                	li	a0,0

        self.map(
            VirtualAddress::new(0), 
    80017510:	ffffa097          	auipc	ra,0xffffa
    80017514:	350080e7          	jalr	848(ra) # 80011860 <_ZN6kernel6memory7address14VirtualAddress3new17h716be423461f1938E>
    80017518:	f82a                	sd	a0,48(sp)
    8001751a:	a009                	j	8001751c <.LBB9_15+0x44>
            PhysicalAddress::new(mem as usize), 
    8001751c:	7562                	ld	a0,56(sp)
    8001751e:	ffffa097          	auipc	ra,0xffffa
    80017522:	3f2080e7          	jalr	1010(ra) # 80011910 <_ZN6kernel6memory7address15PhysicalAddress3new17hf2b76f8479ac6235E>
    80017526:	f42a                	sd	a0,40(sp)
    80017528:	a009                	j	8001752a <.LBB9_15+0x52>
    8001752a:	4511                	li	a0,4
    8001752c:	4589                	li	a1,2
            PGSIZE, 
            PteFlags::W | PteFlags::R | PteFlags::X | PteFlags::U
    8001752e:	ffff1097          	auipc	ra,0xffff1
    80017532:	322080e7          	jalr	802(ra) # 80008850 <_ZN93_$LT$kernel..memory..mapping..page_table_entry..PteFlags$u20$as$u20$core..ops..bit..BitOr$GT$5bitor17h95bfa721b377cbd2E>
    80017536:	f02a                	sd	a0,32(sp)
    80017538:	a009                	j	8001753a <.LBB9_15+0x62>
    8001753a:	7502                	ld	a0,32(sp)
    8001753c:	45a1                	li	a1,8
    8001753e:	ffff1097          	auipc	ra,0xffff1
    80017542:	312080e7          	jalr	786(ra) # 80008850 <_ZN93_$LT$kernel..memory..mapping..page_table_entry..PteFlags$u20$as$u20$core..ops..bit..BitOr$GT$5bitor17h95bfa721b377cbd2E>
    80017546:	ec2a                	sd	a0,24(sp)
    80017548:	a009                	j	8001754a <.LBB9_15+0x72>
    8001754a:	6562                	ld	a0,24(sp)
    8001754c:	45c1                	li	a1,16
    8001754e:	ffff1097          	auipc	ra,0xffff1
    80017552:	302080e7          	jalr	770(ra) # 80008850 <_ZN93_$LT$kernel..memory..mapping..page_table_entry..PteFlags$u20$as$u20$core..ops..bit..BitOr$GT$5bitor17h95bfa721b377cbd2E>
    80017556:	e82a                	sd	a0,16(sp)
    80017558:	a009                	j	8001755a <.LBB9_15+0x82>
        self.map(
    8001755a:	6742                	ld	a4,16(sp)
    8001755c:	7622                	ld	a2,40(sp)
    8001755e:	75c2                	ld	a1,48(sp)
    80017560:	6566                	ld	a0,88(sp)
    80017562:	6685                	lui	a3,0x1
    80017564:	00000097          	auipc	ra,0x0
    80017568:	cd6080e7          	jalr	-810(ra) # 8001723a <_ZN6kernel6memory7mapping10page_table9PageTable3map17h08dc54e6ac3f590cE>
    8001756c:	a009                	j	8001756e <.LBB9_15+0x96>
        );

        copy_nonoverlapping(src.as_ptr(), mem, src.len());
    8001756e:	65a6                	ld	a1,72(sp)
    80017570:	6546                	ld	a0,80(sp)
    80017572:	00008097          	auipc	ra,0x8
    80017576:	0be080e7          	jalr	190(ra) # 8001f630 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hf7620495824cfb20E>
    8001757a:	e42a                	sd	a0,8(sp)
    8001757c:	a009                	j	8001757e <.LBB9_15+0xa6>
    8001757e:	65a6                	ld	a1,72(sp)
    80017580:	6546                	ld	a0,80(sp)
    80017582:	00008097          	auipc	ra,0x8
    80017586:	052080e7          	jalr	82(ra) # 8001f5d4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hb06ce83b043493f3E>
    8001758a:	e02a                	sd	a0,0(sp)
    8001758c:	a009                	j	8001758e <.LBB9_15+0xb6>
    8001758e:	6602                	ld	a2,0(sp)
    80017590:	65a2                	ld	a1,8(sp)
    80017592:	7562                	ld	a0,56(sp)
    80017594:	0000e097          	auipc	ra,0xe
    80017598:	b50080e7          	jalr	-1200(ra) # 800250e4 <memcpy>
    }
    8001759c:	60aa                	ld	ra,136(sp)
    8001759e:	6149                	addi	sp,sp,144
    800175a0:	8082                	ret

Disassembly of section .text._ZN6kernel6memory7mapping10page_table9PageTable9uvm_alloc17h600a2c8e8dc8349aE:

00000000800175a2 <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_alloc17h600a2c8e8dc8349aE>:


    /// Allocate PTEs and physical memory to grow process from old_size to
    /// new_size, which need not be page aligned.  Returns new size or 0 on error.
    pub unsafe fn uvm_alloc(
    800175a2:	7169                	addi	sp,sp,-304
    800175a4:	f606                	sd	ra,296(sp)
    800175a6:	e8b2                	sd	a2,80(sp)
    800175a8:	ecaa                	sd	a0,88(sp)
    800175aa:	f0ae                	sd	a1,96(sp)
    800175ac:	fdaa                	sd	a0,248(sp)
    800175ae:	e232                	sd	a2,256(sp)
        &mut self, 
        mut old_size: usize, 
        new_size: usize
    ) -> Option<usize> {
        if new_size < old_size {
    800175b0:	00b67863          	bgeu	a2,a1,800175c0 <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_alloc17h600a2c8e8dc8349aE+0x1e>
    800175b4:	a009                	j	800175b6 <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_alloc17h600a2c8e8dc8349aE+0x14>
            return Some(old_size)
    800175b6:	7506                	ld	a0,96(sp)
    800175b8:	f8aa                	sd	a0,112(sp)
    800175ba:	4505                	li	a0,1
    800175bc:	f4aa                	sd	a0,104(sp)
    800175be:	aa31                	j	800176da <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_alloc17h600a2c8e8dc8349aE+0x138>
        }

        old_size = page_round_up(old_size);
    800175c0:	7506                	ld	a0,96(sp)
    800175c2:	00006097          	auipc	ra,0x6
    800175c6:	260080e7          	jalr	608(ra) # 8001d822 <_ZN6kernel6memory7mapping13page_round_up17h53b8f5a3d9b0c04fE>
    800175ca:	e4aa                	sd	a0,72(sp)
    800175cc:	a009                	j	800175ce <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_alloc17h600a2c8e8dc8349aE+0x2c>
    800175ce:	6646                	ld	a2,80(sp)
    800175d0:	65a6                	ld	a1,72(sp)
    800175d2:	f0ae                	sd	a1,96(sp)

        for cur_size in (old_size..new_size).step_by(PGSIZE) {
    800175d4:	fd2e                	sd	a1,184(sp)
    800175d6:	e1b2                	sd	a2,192(sp)
    800175d8:	0928                	addi	a0,sp,152
    800175da:	6685                	lui	a3,0x1
    800175dc:	ffff4097          	auipc	ra,0xffff4
    800175e0:	44e080e7          	jalr	1102(ra) # 8000ba2a <_ZN4core4iter6traits8iterator8Iterator7step_by17hcae6c74a630fccd6E>
    800175e4:	a009                	j	800175e6 <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_alloc17h600a2c8e8dc8349aE+0x44>
    800175e6:	18a8                	addi	a0,sp,120
    800175e8:	092c                	addi	a1,sp,152
    800175ea:	00006097          	auipc	ra,0x6
    800175ee:	9be080e7          	jalr	-1602(ra) # 8001cfa8 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h119fa1ab69bc712dE>
    800175f2:	a009                	j	800175f4 <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_alloc17h600a2c8e8dc8349aE+0x52>
    800175f4:	654a                	ld	a0,144(sp)
    800175f6:	f1aa                	sd	a0,224(sp)
    800175f8:	652a                	ld	a0,136(sp)
    800175fa:	edaa                	sd	a0,216(sp)
    800175fc:	650a                	ld	a0,128(sp)
    800175fe:	e9aa                	sd	a0,208(sp)
    80017600:	7566                	ld	a0,120(sp)
    80017602:	e5aa                	sd	a0,200(sp)
    80017604:	a009                	j	80017606 <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_alloc17h600a2c8e8dc8349aE+0x64>
    80017606:	01a8                	addi	a0,sp,200
    80017608:	00006097          	auipc	ra,0x6
    8001760c:	89c080e7          	jalr	-1892(ra) # 8001cea4 <_ZN105_$LT$core..iter..adapters..step_by..StepBy$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h75ab964dca744767E>
    80017610:	f5aa                	sd	a0,232(sp)
    80017612:	f9ae                	sd	a1,240(sp)
    80017614:	a009                	j	80017616 <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_alloc17h600a2c8e8dc8349aE+0x74>
    80017616:	752e                	ld	a0,232(sp)
    80017618:	4581                	li	a1,0
    8001761a:	00b50463          	beq	a0,a1,80017622 <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_alloc17h600a2c8e8dc8349aE+0x80>
    8001761e:	a009                	j	80017620 <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_alloc17h600a2c8e8dc8349aE+0x7e>
    80017620:	a039                	j	8001762e <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_alloc17h600a2c8e8dc8349aE+0x8c>
                self.uvm_dealloc(cur_size, old_size);
                return None
            }
        }

        Some(new_size)
    80017622:	6546                	ld	a0,80(sp)
    80017624:	f8aa                	sd	a0,112(sp)
    80017626:	4505                	li	a0,1
    80017628:	f4aa                	sd	a0,104(sp)
    }
    8001762a:	a845                	j	800176da <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_alloc17h600a2c8e8dc8349aE+0x138>
        for cur_size in (old_size..new_size).step_by(PGSIZE) {
    8001762c:	0000                	unimp
    8001762e:	754e                	ld	a0,240(sp)
    80017630:	fc2a                	sd	a0,56(sp)
    80017632:	e62a                	sd	a0,264(sp)
    80017634:	ea2a                	sd	a0,272(sp)
    80017636:	ee2a                	sd	a0,280(sp)
            let memory = RawPage::new_zeroed();
    80017638:	ffff3097          	auipc	ra,0xffff3
    8001763c:	92c080e7          	jalr	-1748(ra) # 80009f64 <_ZN6kernel6memory13PageAllocator10new_zeroed17hbc99bdbca8d1d931E>
    80017640:	85aa                	mv	a1,a0
    80017642:	e0ae                	sd	a1,64(sp)
    80017644:	f22a                	sd	a0,288(sp)
    80017646:	a009                	j	80017648 <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_alloc17h600a2c8e8dc8349aE+0xa6>
            write_bytes(memory as *mut u8, 0, PGSIZE);
    80017648:	6506                	ld	a0,64(sp)
    8001764a:	4581                	li	a1,0
    8001764c:	6605                	lui	a2,0x1
    8001764e:	0000a097          	auipc	ra,0xa
    80017652:	4e2080e7          	jalr	1250(ra) # 80021b30 <_ZN4core10intrinsics11write_bytes17hfabd30e5bfcb1b55E>
    80017656:	a009                	j	80017658 <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_alloc17h600a2c8e8dc8349aE+0xb6>
                VirtualAddress::new(cur_size), 
    80017658:	7562                	ld	a0,56(sp)
    8001765a:	ffffa097          	auipc	ra,0xffffa
    8001765e:	206080e7          	jalr	518(ra) # 80011860 <_ZN6kernel6memory7address14VirtualAddress3new17h716be423461f1938E>
    80017662:	f82a                	sd	a0,48(sp)
    80017664:	a009                	j	80017666 <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_alloc17h600a2c8e8dc8349aE+0xc4>
                PhysicalAddress::new(memory), 
    80017666:	6506                	ld	a0,64(sp)
    80017668:	ffffa097          	auipc	ra,0xffffa
    8001766c:	2a8080e7          	jalr	680(ra) # 80011910 <_ZN6kernel6memory7address15PhysicalAddress3new17hf2b76f8479ac6235E>
    80017670:	f42a                	sd	a0,40(sp)
    80017672:	a009                	j	80017674 <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_alloc17h600a2c8e8dc8349aE+0xd2>
    80017674:	4511                	li	a0,4
    80017676:	4589                	li	a1,2
                PteFlags::W | PteFlags::R | PteFlags::X | PteFlags::U
    80017678:	ffff1097          	auipc	ra,0xffff1
    8001767c:	1d8080e7          	jalr	472(ra) # 80008850 <_ZN93_$LT$kernel..memory..mapping..page_table_entry..PteFlags$u20$as$u20$core..ops..bit..BitOr$GT$5bitor17h95bfa721b377cbd2E>
    80017680:	f02a                	sd	a0,32(sp)
    80017682:	a009                	j	80017684 <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_alloc17h600a2c8e8dc8349aE+0xe2>
    80017684:	7502                	ld	a0,32(sp)
    80017686:	45a1                	li	a1,8
    80017688:	ffff1097          	auipc	ra,0xffff1
    8001768c:	1c8080e7          	jalr	456(ra) # 80008850 <_ZN93_$LT$kernel..memory..mapping..page_table_entry..PteFlags$u20$as$u20$core..ops..bit..BitOr$GT$5bitor17h95bfa721b377cbd2E>
    80017690:	ec2a                	sd	a0,24(sp)
    80017692:	a009                	j	80017694 <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_alloc17h600a2c8e8dc8349aE+0xf2>
    80017694:	6562                	ld	a0,24(sp)
    80017696:	45c1                	li	a1,16
    80017698:	ffff1097          	auipc	ra,0xffff1
    8001769c:	1b8080e7          	jalr	440(ra) # 80008850 <_ZN93_$LT$kernel..memory..mapping..page_table_entry..PteFlags$u20$as$u20$core..ops..bit..BitOr$GT$5bitor17h95bfa721b377cbd2E>
    800176a0:	e82a                	sd	a0,16(sp)
    800176a2:	a009                	j	800176a4 <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_alloc17h600a2c8e8dc8349aE+0x102>
            if !self.map(
    800176a4:	6742                	ld	a4,16(sp)
    800176a6:	7622                	ld	a2,40(sp)
    800176a8:	75c2                	ld	a1,48(sp)
    800176aa:	6566                	ld	a0,88(sp)
    800176ac:	6685                	lui	a3,0x1
    800176ae:	00000097          	auipc	ra,0x0
    800176b2:	b8c080e7          	jalr	-1140(ra) # 8001723a <_ZN6kernel6memory7mapping10page_table9PageTable3map17h08dc54e6ac3f590cE>
    800176b6:	e42a                	sd	a0,8(sp)
    800176b8:	a009                	j	800176ba <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_alloc17h600a2c8e8dc8349aE+0x118>
    800176ba:	6522                	ld	a0,8(sp)
    800176bc:	e119                	bnez	a0,800176c2 <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_alloc17h600a2c8e8dc8349aE+0x120>
    800176be:	a009                	j	800176c0 <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_alloc17h600a2c8e8dc8349aE+0x11e>
                drop_in_place(memory as *mut RawPage);
    800176c0:	a011                	j	800176c4 <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_alloc17h600a2c8e8dc8349aE+0x122>
        for cur_size in (old_size..new_size).step_by(PGSIZE) {
    800176c2:	b791                	j	80017606 <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_alloc17h600a2c8e8dc8349aE+0x64>
                self.uvm_dealloc(cur_size, old_size);
    800176c4:	75e2                	ld	a1,56(sp)
    800176c6:	6566                	ld	a0,88(sp)
    800176c8:	7606                	ld	a2,96(sp)
    800176ca:	00000097          	auipc	ra,0x0
    800176ce:	088080e7          	jalr	136(ra) # 80017752 <_ZN6kernel6memory7mapping10page_table9PageTable11uvm_dealloc17hf5596dd69dc9e626E>
    800176d2:	a009                	j	800176d4 <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_alloc17h600a2c8e8dc8349aE+0x132>
    800176d4:	4501                	li	a0,0
                return None
    800176d6:	f4aa                	sd	a0,104(sp)
    800176d8:	a009                	j	800176da <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_alloc17h600a2c8e8dc8349aE+0x138>
    }
    800176da:	7526                	ld	a0,104(sp)
    800176dc:	75c6                	ld	a1,112(sp)
    800176de:	70b2                	ld	ra,296(sp)
    800176e0:	6155                	addi	sp,sp,304
    800176e2:	8082                	ret

Disassembly of section .text._ZN6kernel6memory7mapping10page_table9PageTable8uvm_free17h541177c5e75f280dE:

00000000800176e4 <_ZN6kernel6memory7mapping10page_table9PageTable8uvm_free17h541177c5e75f280dE>:

    /// Free user memory pages,
    /// then free page-table pages
    pub fn uvm_free(&mut self, size: usize) {
    800176e4:	711d                	addi	sp,sp,-96
    800176e6:	ec86                	sd	ra,88(sp)
    800176e8:	f02e                	sd	a1,32(sp)
    800176ea:	f42a                	sd	a0,40(sp)
    800176ec:	e0aa                	sd	a0,64(sp)
    800176ee:	e4ae                	sd	a1,72(sp)
    800176f0:	4501                	li	a0,0
        if size > 0 {
    800176f2:	00a58a63          	beq	a1,a0,80017706 <_ZN6kernel6memory7mapping10page_table9PageTable8uvm_free17h541177c5e75f280dE+0x22>
    800176f6:	a009                	j	800176f8 <_ZN6kernel6memory7mapping10page_table9PageTable8uvm_free17h541177c5e75f280dE+0x14>
            let mut pa = PhysicalAddress::new(size);
    800176f8:	7502                	ld	a0,32(sp)
    800176fa:	ffffa097          	auipc	ra,0xffffa
    800176fe:	216080e7          	jalr	534(ra) # 80011910 <_ZN6kernel6memory7address15PhysicalAddress3new17hf2b76f8479ac6235E>
    80017702:	fc2a                	sd	a0,56(sp)
    80017704:	a011                	j	80017708 <_ZN6kernel6memory7mapping10page_table9PageTable8uvm_free17h541177c5e75f280dE+0x24>
        if size > 0 {
    80017706:	a099                	j	8001774c <_ZN6kernel6memory7mapping10page_table9PageTable8uvm_free17h541177c5e75f280dE+0x68>
    80017708:	1828                	addi	a0,sp,56
            pa.pg_round_up();
    8001770a:	fffed097          	auipc	ra,0xfffed
    8001770e:	21e080e7          	jalr	542(ra) # 80004928 <_ZN6kernel6memory7address4Addr11pg_round_up17h93ce0bf629830ebdE>
    80017712:	a009                	j	80017714 <_ZN6kernel6memory7mapping10page_table9PageTable8uvm_free17h541177c5e75f280dE+0x30>
    80017714:	1828                	addi	a0,sp,56
            let ppn = pa.as_usize() / PGSIZE;
    80017716:	ffffa097          	auipc	ra,0xffffa
    8001771a:	138080e7          	jalr	312(ra) # 8001184e <_ZN90_$LT$kernel..memory..address..PhysicalAddress$u20$as$u20$kernel..memory..address..Addr$GT$8as_usize17hea2eecdb80a1a2b2E>
    8001771e:	ec2a                	sd	a0,24(sp)
    80017720:	a009                	j	80017722 <_ZN6kernel6memory7mapping10page_table9PageTable8uvm_free17h541177c5e75f280dE+0x3e>
    80017722:	6562                	ld	a0,24(sp)
    80017724:	8131                	srli	a0,a0,0xc
    80017726:	e42a                	sd	a0,8(sp)
    80017728:	e8aa                	sd	a0,80(sp)
    8001772a:	4501                	li	a0,0
            self.uvm_unmap(
                VirtualAddress::new(0),
    8001772c:	ffffa097          	auipc	ra,0xffffa
    80017730:	134080e7          	jalr	308(ra) # 80011860 <_ZN6kernel6memory7address14VirtualAddress3new17h716be423461f1938E>
    80017734:	e82a                	sd	a0,16(sp)
    80017736:	a009                	j	80017738 <_ZN6kernel6memory7mapping10page_table9PageTable8uvm_free17h541177c5e75f280dE+0x54>
            self.uvm_unmap(
    80017738:	6622                	ld	a2,8(sp)
    8001773a:	65c2                	ld	a1,16(sp)
    8001773c:	7522                	ld	a0,40(sp)
    8001773e:	4685                	li	a3,1
    80017740:	00000097          	auipc	ra,0x0
    80017744:	0e6080e7          	jalr	230(ra) # 80017826 <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_unmap17hab395d2793038c03E>
    80017748:	a009                	j	8001774a <_ZN6kernel6memory7mapping10page_table9PageTable8uvm_free17h541177c5e75f280dE+0x66>
        if size > 0 {
    8001774a:	a009                	j	8001774c <_ZN6kernel6memory7mapping10page_table9PageTable8uvm_free17h541177c5e75f280dE+0x68>
                ppn,
                true
            );
        }
        // drop(self);
    }
    8001774c:	60e6                	ld	ra,88(sp)
    8001774e:	6125                	addi	sp,sp,96
    80017750:	8082                	ret

Disassembly of section .text._ZN6kernel6memory7mapping10page_table9PageTable11uvm_dealloc17hf5596dd69dc9e626E:

0000000080017752 <_ZN6kernel6memory7mapping10page_table9PageTable11uvm_dealloc17hf5596dd69dc9e626E>:

    /// Deallocate user pages to bring the process size from old_size to
    /// new_size.  old_size and new_size need not be page-aligned, nor does new_size
    /// need to be less than old_size.  old_size can be larger than the actual
    /// process size.  Returns the new process size.
    pub fn uvm_dealloc(
    80017752:	7175                	addi	sp,sp,-144
    80017754:	e506                	sd	ra,136(sp)
    80017756:	e4b2                	sd	a2,72(sp)
    80017758:	e8ae                	sd	a1,80(sp)
    8001775a:	ecaa                	sd	a0,88(sp)
    8001775c:	f4aa                	sd	a0,104(sp)
    8001775e:	f8ae                	sd	a1,112(sp)
    80017760:	fcb2                	sd	a2,120(sp)
        &mut self, 
        old_size:usize, 
        new_size:usize
    ) -> usize {
        if new_size >= old_size { 
    80017762:	00b66663          	bltu	a2,a1,8001776e <_ZN6kernel6memory7mapping10page_table9PageTable11uvm_dealloc17hf5596dd69dc9e626E+0x1c>
    80017766:	a009                	j	80017768 <_ZN6kernel6memory7mapping10page_table9PageTable11uvm_dealloc17hf5596dd69dc9e626E+0x16>
            return old_size
    80017768:	6546                	ld	a0,80(sp)
    8001776a:	f0aa                	sd	a0,96(sp)
            );
        }

        new_size

    }
    8001776c:	a851                	j	80017800 <_ZN6kernel6memory7mapping10page_table9PageTable11uvm_dealloc17hf5596dd69dc9e626E+0xae>
        if page_round_up(new_size) < page_round_up(old_size) {
    8001776e:	6526                	ld	a0,72(sp)
    80017770:	00006097          	auipc	ra,0x6
    80017774:	0b2080e7          	jalr	178(ra) # 8001d822 <_ZN6kernel6memory7mapping13page_round_up17h53b8f5a3d9b0c04fE>
    80017778:	e0aa                	sd	a0,64(sp)
    8001777a:	a009                	j	8001777c <_ZN6kernel6memory7mapping10page_table9PageTable11uvm_dealloc17hf5596dd69dc9e626E+0x2a>
    8001777c:	6546                	ld	a0,80(sp)
    8001777e:	00006097          	auipc	ra,0x6
    80017782:	0a4080e7          	jalr	164(ra) # 8001d822 <_ZN6kernel6memory7mapping13page_round_up17h53b8f5a3d9b0c04fE>
    80017786:	fc2a                	sd	a0,56(sp)
    80017788:	a009                	j	8001778a <_ZN6kernel6memory7mapping10page_table9PageTable11uvm_dealloc17hf5596dd69dc9e626E+0x38>
    8001778a:	6506                	ld	a0,64(sp)
    8001778c:	75e2                	ld	a1,56(sp)
    8001778e:	00b57a63          	bgeu	a0,a1,800177a2 <_ZN6kernel6memory7mapping10page_table9PageTable11uvm_dealloc17hf5596dd69dc9e626E+0x50>
    80017792:	a009                	j	80017794 <_ZN6kernel6memory7mapping10page_table9PageTable11uvm_dealloc17hf5596dd69dc9e626E+0x42>
            let pages_num = (page_round_up(old_size) - page_round_up(new_size)) / PGSIZE;
    80017794:	6546                	ld	a0,80(sp)
    80017796:	00006097          	auipc	ra,0x6
    8001779a:	08c080e7          	jalr	140(ra) # 8001d822 <_ZN6kernel6memory7mapping13page_round_up17h53b8f5a3d9b0c04fE>
    8001779e:	f82a                	sd	a0,48(sp)
    800177a0:	a011                	j	800177a4 <_ZN6kernel6memory7mapping10page_table9PageTable11uvm_dealloc17hf5596dd69dc9e626E+0x52>
        if page_round_up(new_size) < page_round_up(old_size) {
    800177a2:	a8a1                	j	800177fa <_ZN6kernel6memory7mapping10page_table9PageTable11uvm_dealloc17hf5596dd69dc9e626E+0xa8>
            let pages_num = (page_round_up(old_size) - page_round_up(new_size)) / PGSIZE;
    800177a4:	6526                	ld	a0,72(sp)
    800177a6:	00006097          	auipc	ra,0x6
    800177aa:	07c080e7          	jalr	124(ra) # 8001d822 <_ZN6kernel6memory7mapping13page_round_up17h53b8f5a3d9b0c04fE>
    800177ae:	f42a                	sd	a0,40(sp)
    800177b0:	a009                	j	800177b2 <_ZN6kernel6memory7mapping10page_table9PageTable11uvm_dealloc17hf5596dd69dc9e626E+0x60>
    800177b2:	7542                	ld	a0,48(sp)
    800177b4:	75a2                	ld	a1,40(sp)
    800177b6:	40b505b3          	sub	a1,a0,a1
    800177ba:	f02e                	sd	a1,32(sp)
    800177bc:	04b56663          	bltu	a0,a1,80017808 <.LBB12_16>
    800177c0:	a009                	j	800177c2 <_ZN6kernel6memory7mapping10page_table9PageTable11uvm_dealloc17hf5596dd69dc9e626E+0x70>
    800177c2:	6526                	ld	a0,72(sp)
    800177c4:	7582                	ld	a1,32(sp)
    800177c6:	81b1                	srli	a1,a1,0xc
    800177c8:	e82e                	sd	a1,16(sp)
    800177ca:	e12e                	sd	a1,128(sp)
                VirtualAddress::new(page_round_up(new_size)), 
    800177cc:	00006097          	auipc	ra,0x6
    800177d0:	056080e7          	jalr	86(ra) # 8001d822 <_ZN6kernel6memory7mapping13page_round_up17h53b8f5a3d9b0c04fE>
    800177d4:	ec2a                	sd	a0,24(sp)
    800177d6:	a009                	j	800177d8 <_ZN6kernel6memory7mapping10page_table9PageTable11uvm_dealloc17hf5596dd69dc9e626E+0x86>
    800177d8:	6562                	ld	a0,24(sp)
    800177da:	ffffa097          	auipc	ra,0xffffa
    800177de:	086080e7          	jalr	134(ra) # 80011860 <_ZN6kernel6memory7address14VirtualAddress3new17h716be423461f1938E>
    800177e2:	e42a                	sd	a0,8(sp)
    800177e4:	a009                	j	800177e6 <_ZN6kernel6memory7mapping10page_table9PageTable11uvm_dealloc17hf5596dd69dc9e626E+0x94>
            self.uvm_unmap(
    800177e6:	6642                	ld	a2,16(sp)
    800177e8:	65a2                	ld	a1,8(sp)
    800177ea:	6566                	ld	a0,88(sp)
    800177ec:	4685                	li	a3,1
    800177ee:	00000097          	auipc	ra,0x0
    800177f2:	038080e7          	jalr	56(ra) # 80017826 <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_unmap17hab395d2793038c03E>
    800177f6:	a009                	j	800177f8 <_ZN6kernel6memory7mapping10page_table9PageTable11uvm_dealloc17hf5596dd69dc9e626E+0xa6>
        if page_round_up(new_size) < page_round_up(old_size) {
    800177f8:	a009                	j	800177fa <_ZN6kernel6memory7mapping10page_table9PageTable11uvm_dealloc17hf5596dd69dc9e626E+0xa8>
        new_size
    800177fa:	6526                	ld	a0,72(sp)
    800177fc:	f0aa                	sd	a0,96(sp)
    }
    800177fe:	a009                	j	80017800 <_ZN6kernel6memory7mapping10page_table9PageTable11uvm_dealloc17hf5596dd69dc9e626E+0xae>
    80017800:	7506                	ld	a0,96(sp)
    80017802:	60aa                	ld	ra,136(sp)
    80017804:	6149                	addi	sp,sp,144
    80017806:	8082                	ret

0000000080017808 <.LBB12_16>:
            let pages_num = (page_round_up(old_size) - page_round_up(new_size)) / PGSIZE;
    80017808:	00013517          	auipc	a0,0x13
    8001780c:	99850513          	addi	a0,a0,-1640 # 8002a1a0 <str.1>

0000000080017810 <.LBB12_17>:
    80017810:	00013617          	auipc	a2,0x13
    80017814:	97860613          	addi	a2,a2,-1672 # 8002a188 <.L__unnamed_19>
    80017818:	02100593          	li	a1,33
    8001781c:	0000b097          	auipc	ra,0xb
    80017820:	a5a080e7          	jalr	-1446(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel6memory7mapping10page_table9PageTable9uvm_unmap17hab395d2793038c03E:

0000000080017826 <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_unmap17hab395d2793038c03E>:


    /// Remove npages of mappings starting from va. va must be
    /// page-aligned. The mappings must exist.
    /// Optionally free the physical memory.
    pub fn uvm_unmap(
    80017826:	7115                	addi	sp,sp,-224
    80017828:	ed86                	sd	ra,216(sp)
    8001782a:	e0b2                	sd	a2,64(sp)
    8001782c:	e4aa                	sd	a0,72(sp)
    8001782e:	8736                	mv	a4,a3
    80017830:	e8ba                	sd	a4,80(sp)
    80017832:	f0ae                	sd	a1,96(sp)
    80017834:	f12a                	sd	a0,160(sp)
    80017836:	f532                	sd	a2,168(sp)
    80017838:	0ad10ba3          	sb	a3,183(sp)
    8001783c:	1088                	addi	a0,sp,96
        &mut self, 
        mut va: VirtualAddress, 
        npages: usize, 
        free: bool
    ){
        if !va.is_page_aligned() {
    8001783e:	fffed097          	auipc	ra,0xfffed
    80017842:	022080e7          	jalr	34(ra) # 80004860 <_ZN6kernel6memory7address4Addr15is_page_aligned17h21d9aa1b7bd151ebE>
    80017846:	ecaa                	sd	a0,88(sp)
    80017848:	a009                	j	8001784a <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_unmap17hab395d2793038c03E+0x24>
    8001784a:	6566                	ld	a0,88(sp)
    8001784c:	e105                	bnez	a0,8001786c <.LBB13_33+0x14>
    8001784e:	a009                	j	80017850 <.LBB13_32>

0000000080017850 <.LBB13_32>:
            panic!("uvm_unmap: not aligned");
    80017850:	00013517          	auipc	a0,0x13
    80017854:	97150513          	addi	a0,a0,-1679 # 8002a1c1 <.L__unnamed_20>

0000000080017858 <.LBB13_33>:
    80017858:	00013617          	auipc	a2,0x13
    8001785c:	98060613          	addi	a2,a2,-1664 # 8002a1d8 <.L__unnamed_21>
    80017860:	45d9                	li	a1,22
    80017862:	0000b097          	auipc	ra,0xb
    80017866:	a14080e7          	jalr	-1516(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8001786a:	0000                	unimp
    8001786c:	6586                	ld	a1,64(sp)
    8001786e:	4501                	li	a0,0
        }
        
        for _ in 0..npages {
    80017870:	f4aa                	sd	a0,104(sp)
    80017872:	f8ae                	sd	a1,112(sp)
    80017874:	00008097          	auipc	ra,0x8
    80017878:	0ce080e7          	jalr	206(ra) # 8001f942 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he0a8d93712e5493bE>
    8001787c:	f82a                	sd	a0,48(sp)
    8001787e:	fc2e                	sd	a1,56(sp)
    80017880:	a009                	j	80017882 <.LBB13_33+0x2a>
    80017882:	7562                	ld	a0,56(sp)
    80017884:	75c2                	ld	a1,48(sp)
    80017886:	fcae                	sd	a1,120(sp)
    80017888:	e12a                	sd	a0,128(sp)
    8001788a:	a009                	j	8001788c <.LBB13_33+0x34>
    8001788c:	18a8                	addi	a0,sp,120
    8001788e:	00008097          	auipc	ra,0x8
    80017892:	046080e7          	jalr	70(ra) # 8001f8d4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE>
    80017896:	e52a                	sd	a0,136(sp)
    80017898:	e92e                	sd	a1,144(sp)
    8001789a:	a009                	j	8001789c <.LBB13_33+0x44>
    8001789c:	652a                	ld	a0,136(sp)
    8001789e:	4581                	li	a1,0
    800178a0:	00b50463          	beq	a0,a1,800178a8 <.LBB13_33+0x50>
    800178a4:	a009                	j	800178a6 <.LBB13_33+0x4e>
    800178a6:	a029                	j	800178b0 <.LBB13_33+0x58>
                    panic!("uvm_unmap");
                }
            }
            va.add_page();
        }
    }
    800178a8:	60ee                	ld	ra,216(sp)
    800178aa:	612d                	addi	sp,sp,224
    800178ac:	8082                	ret
        for _ in 0..npages {
    800178ae:	0000                	unimp
    800178b0:	6526                	ld	a0,72(sp)
    800178b2:	65ca                	ld	a1,144(sp)
    800178b4:	fd2e                	sd	a1,184(sp)
    800178b6:	e1ae                	sd	a1,192(sp)
            match self.translate(va) {
    800178b8:	7586                	ld	a1,96(sp)
    800178ba:	fffff097          	auipc	ra,0xfffff
    800178be:	5c4080e7          	jalr	1476(ra) # 80016e7e <_ZN6kernel6memory7mapping10page_table9PageTable9translate17h0a84bb7f836f6989E>
    800178c2:	ed2a                	sd	a0,152(sp)
    800178c4:	a009                	j	800178c6 <.LBB13_33+0x6e>
                Some(pte) => {
    800178c6:	656a                	ld	a0,152(sp)
    800178c8:	00a035b3          	snez	a1,a0
    800178cc:	4581                	li	a1,0
    800178ce:	00b50463          	beq	a0,a1,800178d6 <.LBB13_34>
    800178d2:	a009                	j	800178d4 <.LBB13_33+0x7c>
    800178d4:	a005                	j	800178f4 <.LBB13_35+0x16>

00000000800178d6 <.LBB13_34>:
                    panic!("uvm_unmap");
    800178d6:	00013517          	auipc	a0,0x13
    800178da:	9a250513          	addi	a0,a0,-1630 # 8002a278 <.L__unnamed_22>

00000000800178de <.LBB13_35>:
    800178de:	00013617          	auipc	a2,0x13
    800178e2:	9aa60613          	addi	a2,a2,-1622 # 8002a288 <.L__unnamed_23>
    800178e6:	45a5                	li	a1,9
    800178e8:	0000b097          	auipc	ra,0xb
    800178ec:	98e080e7          	jalr	-1650(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    800178f0:	0000                	unimp
            match self.translate(va) {
    800178f2:	0000                	unimp
                Some(pte) => {
    800178f4:	656a                	ld	a0,152(sp)
    800178f6:	f02a                	sd	a0,32(sp)
    800178f8:	e5aa                	sd	a0,200(sp)
                    if !pte.is_valid() {
    800178fa:	ffff1097          	auipc	ra,0xffff1
    800178fe:	dd6080e7          	jalr	-554(ra) # 800086d0 <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry8is_valid17h2b3a673d14ed09c6E>
    80017902:	f42a                	sd	a0,40(sp)
    80017904:	a009                	j	80017906 <.LBB13_35+0x28>
    80017906:	7522                	ld	a0,40(sp)
    80017908:	e105                	bnez	a0,80017928 <.LBB13_37+0x14>
    8001790a:	a009                	j	8001790c <.LBB13_36>

000000008001790c <.LBB13_36>:
                        panic!("uvm_unmap: not mapped");
    8001790c:	00013517          	auipc	a0,0x13
    80017910:	8e450513          	addi	a0,a0,-1820 # 8002a1f0 <.L__unnamed_24>

0000000080017914 <.LBB13_37>:
    80017914:	00013617          	auipc	a2,0x13
    80017918:	8f460613          	addi	a2,a2,-1804 # 8002a208 <.L__unnamed_25>
    8001791c:	45d5                	li	a1,21
    8001791e:	0000b097          	auipc	ra,0xb
    80017922:	958080e7          	jalr	-1704(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80017926:	0000                	unimp
                    if !pte.is_leaf() {
    80017928:	7502                	ld	a0,32(sp)
    8001792a:	ffff1097          	auipc	ra,0xffff1
    8001792e:	e02080e7          	jalr	-510(ra) # 8000872c <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry7is_leaf17h30d4b7c99c6d4286E>
    80017932:	ec2a                	sd	a0,24(sp)
    80017934:	a009                	j	80017936 <.LBB13_37+0x22>
    80017936:	6562                	ld	a0,24(sp)
    80017938:	e105                	bnez	a0,80017958 <.LBB13_39+0x14>
    8001793a:	a009                	j	8001793c <.LBB13_38>

000000008001793c <.LBB13_38>:
                        panic!("IS NOT LEAF");
    8001793c:	00013517          	auipc	a0,0x13
    80017940:	8e450513          	addi	a0,a0,-1820 # 8002a220 <.L__unnamed_26>

0000000080017944 <.LBB13_39>:
    80017944:	00013617          	auipc	a2,0x13
    80017948:	8ec60613          	addi	a2,a2,-1812 # 8002a230 <.L__unnamed_27>
    8001794c:	45ad                	li	a1,11
    8001794e:	0000b097          	auipc	ra,0xb
    80017952:	928080e7          	jalr	-1752(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80017956:	0000                	unimp
                    if pte.as_flags() == PteFlags::V.bits() {
    80017958:	7502                	ld	a0,32(sp)
    8001795a:	ffff1097          	auipc	ra,0xffff1
    8001795e:	e68080e7          	jalr	-408(ra) # 800087c2 <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry8as_flags17hf18e3bbee6201d61E>
    80017962:	e82a                	sd	a0,16(sp)
    80017964:	a009                	j	80017966 <.LBB13_40>

0000000080017966 <.LBB13_40>:
    80017966:	0000f517          	auipc	a0,0xf
    8001796a:	ee250513          	addi	a0,a0,-286 # 80026848 <.L__unnamed_6+0xa0>
    8001796e:	ffff1097          	auipc	ra,0xffff1
    80017972:	ed8080e7          	jalr	-296(ra) # 80008846 <_ZN6kernel6memory7mapping16page_table_entry8PteFlags4bits17hec41972a30d9c1c3E>
    80017976:	e42a                	sd	a0,8(sp)
    80017978:	a009                	j	8001797a <.LBB13_40+0x14>
    8001797a:	6542                	ld	a0,16(sp)
    8001797c:	65a2                	ld	a1,8(sp)
    8001797e:	02b51163          	bne	a0,a1,800179a0 <.LBB13_42+0x14>
    80017982:	a009                	j	80017984 <.LBB13_41>

0000000080017984 <.LBB13_41>:
                        panic!("uvm_unmap: not a leaf");
    80017984:	00013517          	auipc	a0,0x13
    80017988:	8c450513          	addi	a0,a0,-1852 # 8002a248 <.L__unnamed_28>

000000008001798c <.LBB13_42>:
    8001798c:	00013617          	auipc	a2,0x13
    80017990:	8d460613          	addi	a2,a2,-1836 # 8002a260 <.L__unnamed_29>
    80017994:	45d5                	li	a1,21
    80017996:	0000b097          	auipc	ra,0xb
    8001799a:	8e0080e7          	jalr	-1824(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8001799e:	0000                	unimp
    800179a0:	6546                	ld	a0,80(sp)
    800179a2:	4581                	li	a1,0
                    if free {
    800179a4:	00b50a63          	beq	a0,a1,800179b8 <.LBB13_42+0x2c>
    800179a8:	a009                	j	800179aa <.LBB13_42+0x1e>
                        let pa = pte.as_pagetable();
    800179aa:	7502                	ld	a0,32(sp)
    800179ac:	ffff1097          	auipc	ra,0xffff1
    800179b0:	dfa080e7          	jalr	-518(ra) # 800087a6 <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry12as_pagetable17h89cf44fefbbd4b4eE>
    800179b4:	e9aa                	sd	a0,208(sp)
    800179b6:	a011                	j	800179ba <.LBB13_42+0x2e>
                    if free {
    800179b8:	a031                	j	800179c4 <.LBB13_42+0x38>
                        unsafe{ drop_in_place(pa) };
    800179ba:	a009                	j	800179bc <.LBB13_42+0x30>
    800179bc:	7582                	ld	a1,32(sp)
    800179be:	4501                	li	a0,0
                        pte.0 = 0;
    800179c0:	e188                	sd	a0,0(a1)
                    if free {
    800179c2:	a009                	j	800179c4 <.LBB13_42+0x38>
    800179c4:	1088                	addi	a0,sp,96
            va.add_page();
    800179c6:	fffed097          	auipc	ra,0xfffed
    800179ca:	06e080e7          	jalr	110(ra) # 80004a34 <_ZN6kernel6memory7address4Addr8add_page17hda9f7615eed2e36aE>
    800179ce:	a009                	j	800179d0 <.LBB13_42+0x44>
        for _ in 0..npages {
    800179d0:	bd75                	j	8001788c <.LBB13_33+0x34>

Disassembly of section .text._ZN6kernel6memory7mapping10page_table9PageTable8uvm_copy17h09757305193d69e4E:

00000000800179d2 <_ZN6kernel6memory7mapping10page_table9PageTable8uvm_copy17h09757305193d69e4E>:
    /// its memory into a child's page table.
    /// Copies both the page table and the
    /// physical memory.
    /// returns 0 on success, -1 on failure.
    /// frees any allocated pages on failure.
    pub unsafe fn uvm_copy(
    800179d2:	7151                	addi	sp,sp,-240
    800179d4:	f586                	sd	ra,232(sp)
    800179d6:	f8b2                	sd	a2,112(sp)
    800179d8:	fcae                	sd	a1,120(sp)
    800179da:	e12a                	sd	a0,128(sp)
    800179dc:	f52a                	sd	a0,168(sp)
    800179de:	f92e                	sd	a1,176(sp)
    800179e0:	fd32                	sd	a2,184(sp)
    800179e2:	4501                	li	a0,0
        &mut self, 
        child_pgt: &mut Self, 
        size: usize
    ) -> Result<(), &'static str> {
        let mut va = VirtualAddress::new(0);
    800179e4:	ffffa097          	auipc	ra,0xffffa
    800179e8:	e7c080e7          	jalr	-388(ra) # 80011860 <_ZN6kernel6memory7address14VirtualAddress3new17h716be423461f1938E>
    800179ec:	ed2a                	sd	a0,152(sp)
    800179ee:	a009                	j	800179f0 <_ZN6kernel6memory7mapping10page_table9PageTable8uvm_copy17h09757305193d69e4E+0x1e>
    800179f0:	0928                	addi	a0,sp,152
        while va.as_usize() != size {
    800179f2:	ffffa097          	auipc	ra,0xffffa
    800179f6:	e4a080e7          	jalr	-438(ra) # 8001183c <_ZN89_$LT$kernel..memory..address..VirtualAddress$u20$as$u20$kernel..memory..address..Addr$GT$8as_usize17h7916c21610008a66E>
    800179fa:	f4aa                	sd	a0,104(sp)
    800179fc:	a009                	j	800179fe <_ZN6kernel6memory7mapping10page_table9PageTable8uvm_copy17h09757305193d69e4E+0x2c>
    800179fe:	7526                	ld	a0,104(sp)
    80017a00:	75c6                	ld	a1,112(sp)
    80017a02:	00b51663          	bne	a0,a1,80017a0e <_ZN6kernel6memory7mapping10page_table9PageTable8uvm_copy17h09757305193d69e4E+0x3c>
    80017a06:	a009                	j	80017a08 <_ZN6kernel6memory7mapping10page_table9PageTable8uvm_copy17h09757305193d69e4E+0x36>
    80017a08:	4501                	li	a0,0
                }
            }
            va.add_page();
        }

        Ok(())
    80017a0a:	e52a                	sd	a0,136(sp)
    }
    80017a0c:	a28d                	j	80017b6e <.LBB14_33+0x12>
            match self.translate(va) {
    80017a0e:	650a                	ld	a0,128(sp)
    80017a10:	65ea                	ld	a1,152(sp)
    80017a12:	fffff097          	auipc	ra,0xfffff
    80017a16:	46c080e7          	jalr	1132(ra) # 80016e7e <_ZN6kernel6memory7mapping10page_table9PageTable9translate17h0a84bb7f836f6989E>
    80017a1a:	f12a                	sd	a0,160(sp)
    80017a1c:	a009                	j	80017a1e <_ZN6kernel6memory7mapping10page_table9PageTable8uvm_copy17h09757305193d69e4E+0x4c>
                Some(pte) => {
    80017a1e:	750a                	ld	a0,160(sp)
    80017a20:	00a035b3          	snez	a1,a0
    80017a24:	4581                	li	a1,0
    80017a26:	00b50463          	beq	a0,a1,80017a2e <.LBB14_29>
    80017a2a:	a009                	j	80017a2c <_ZN6kernel6memory7mapping10page_table9PageTable8uvm_copy17h09757305193d69e4E+0x5a>
    80017a2c:	a00d                	j	80017a4e <.LBB14_30+0x18>

0000000080017a2e <.LBB14_29>:
                    panic!("uvmcopy: No exist pte(pte should exist)");
    80017a2e:	00013517          	auipc	a0,0x13
    80017a32:	8b850513          	addi	a0,a0,-1864 # 8002a2e6 <.L__unnamed_30>

0000000080017a36 <.LBB14_30>:
    80017a36:	00013617          	auipc	a2,0x13
    80017a3a:	8da60613          	addi	a2,a2,-1830 # 8002a310 <.L__unnamed_31>
    80017a3e:	02700593          	li	a1,39
    80017a42:	0000b097          	auipc	ra,0xb
    80017a46:	834080e7          	jalr	-1996(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80017a4a:	0000                	unimp
            match self.translate(va) {
    80017a4c:	0000                	unimp
                Some(pte) => {
    80017a4e:	750a                	ld	a0,160(sp)
    80017a50:	ecaa                	sd	a0,88(sp)
    80017a52:	e1aa                	sd	a0,192(sp)
                    if !pte.is_valid() {
    80017a54:	ffff1097          	auipc	ra,0xffff1
    80017a58:	c7c080e7          	jalr	-900(ra) # 800086d0 <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry8is_valid17h2b3a673d14ed09c6E>
    80017a5c:	f0aa                	sd	a0,96(sp)
    80017a5e:	a009                	j	80017a60 <.LBB14_30+0x2a>
    80017a60:	7506                	ld	a0,96(sp)
    80017a62:	e105                	bnez	a0,80017a82 <.LBB14_32+0x14>
    80017a64:	a009                	j	80017a66 <.LBB14_31>

0000000080017a66 <.LBB14_31>:
                        panic!("uvmcopy(): page not present");
    80017a66:	00013517          	auipc	a0,0x13
    80017a6a:	83a50513          	addi	a0,a0,-1990 # 8002a2a0 <.L__unnamed_32>

0000000080017a6e <.LBB14_32>:
    80017a6e:	00013617          	auipc	a2,0x13
    80017a72:	85260613          	addi	a2,a2,-1966 # 8002a2c0 <.L__unnamed_33>
    80017a76:	45ed                	li	a1,27
    80017a78:	0000a097          	auipc	ra,0xa
    80017a7c:	7fe080e7          	jalr	2046(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80017a80:	0000                	unimp
                    let page_table = pte.as_pagetable();
    80017a82:	6566                	ld	a0,88(sp)
    80017a84:	ffff1097          	auipc	ra,0xffff1
    80017a88:	d22080e7          	jalr	-734(ra) # 800087a6 <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry12as_pagetable17h89cf44fefbbd4b4eE>
    80017a8c:	85aa                	mv	a1,a0
    80017a8e:	e8ae                	sd	a1,80(sp)
    80017a90:	e5aa                	sd	a0,200(sp)
    80017a92:	a009                	j	80017a94 <.LBB14_32+0x26>
                    let flags = pte.as_flags();
    80017a94:	6566                	ld	a0,88(sp)
    80017a96:	ffff1097          	auipc	ra,0xffff1
    80017a9a:	d2c080e7          	jalr	-724(ra) # 800087c2 <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry8as_flags17hf18e3bbee6201d61E>
    80017a9e:	85aa                	mv	a1,a0
    80017aa0:	e4ae                	sd	a1,72(sp)
    80017aa2:	e9aa                	sd	a0,208(sp)
    80017aa4:	a009                	j	80017aa6 <.LBB14_32+0x38>
                    let flags = PteFlags::new(flags);
    80017aa6:	6526                	ld	a0,72(sp)
    80017aa8:	ffff1097          	auipc	ra,0xffff1
    80017aac:	c14080e7          	jalr	-1004(ra) # 800086bc <_ZN6kernel6memory7mapping16page_table_entry8PteFlags3new17h46b0ea84c5bd5a31E>
    80017ab0:	85aa                	mv	a1,a0
    80017ab2:	e0ae                	sd	a1,64(sp)
    80017ab4:	edaa                	sd	a0,216(sp)
    80017ab6:	a009                	j	80017ab8 <.LBB14_32+0x4a>
                    let allocated_pgt = &mut *(RawPage::new_zeroed() as *mut PageTable);
    80017ab8:	ffff2097          	auipc	ra,0xffff2
    80017abc:	4ac080e7          	jalr	1196(ra) # 80009f64 <_ZN6kernel6memory13PageAllocator10new_zeroed17hbc99bdbca8d1d931E>
    80017ac0:	fc2a                	sd	a0,56(sp)
    80017ac2:	a009                	j	80017ac4 <.LBB14_32+0x56>
    80017ac4:	65c6                	ld	a1,80(sp)
    80017ac6:	7562                	ld	a0,56(sp)
    80017ac8:	862a                	mv	a2,a0
    80017aca:	f832                	sd	a2,48(sp)
    80017acc:	f1aa                	sd	a0,224(sp)
                    allocated_pgt.write(& *page_table);
    80017ace:	fffff097          	auipc	ra,0xfffff
    80017ad2:	2e0080e7          	jalr	736(ra) # 80016dae <_ZN6kernel6memory7mapping10page_table9PageTable5write17h1197b2bc60e8313aE>
    80017ad6:	a009                	j	80017ad8 <.LBB14_32+0x6a>
                        va,
    80017ad8:	7542                	ld	a0,48(sp)
    80017ada:	65ea                	ld	a1,152(sp)
                        PhysicalAddress::new(allocated_pgt.as_addr()),
    80017adc:	f02e                	sd	a1,32(sp)
    80017ade:	fffff097          	auipc	ra,0xfffff
    80017ae2:	286080e7          	jalr	646(ra) # 80016d64 <_ZN6kernel6memory7mapping10page_table9PageTable7as_addr17hcce185773f2c85f7E>
    80017ae6:	f42a                	sd	a0,40(sp)
    80017ae8:	a009                	j	80017aea <.LBB14_32+0x7c>
    80017aea:	7522                	ld	a0,40(sp)
    80017aec:	ffffa097          	auipc	ra,0xffffa
    80017af0:	e24080e7          	jalr	-476(ra) # 80011910 <_ZN6kernel6memory7address15PhysicalAddress3new17hf2b76f8479ac6235E>
    80017af4:	ec2a                	sd	a0,24(sp)
    80017af6:	a009                	j	80017af8 <.LBB14_32+0x8a>
                    if !child_pgt.map(
    80017af8:	6706                	ld	a4,64(sp)
    80017afa:	6662                	ld	a2,24(sp)
    80017afc:	7582                	ld	a1,32(sp)
    80017afe:	7566                	ld	a0,120(sp)
    80017b00:	6685                	lui	a3,0x1
    80017b02:	fffff097          	auipc	ra,0xfffff
    80017b06:	738080e7          	jalr	1848(ra) # 8001723a <_ZN6kernel6memory7mapping10page_table9PageTable3map17h08dc54e6ac3f590cE>
    80017b0a:	e82a                	sd	a0,16(sp)
    80017b0c:	a009                	j	80017b0e <.LBB14_32+0xa0>
    80017b0e:	6542                	ld	a0,16(sp)
    80017b10:	e901                	bnez	a0,80017b20 <.LBB14_32+0xb2>
    80017b12:	a009                	j	80017b14 <.LBB14_32+0xa6>
                        drop(allocated_pgt);
    80017b14:	7542                	ld	a0,48(sp)
    80017b16:	00005097          	auipc	ra,0x5
    80017b1a:	5fa080e7          	jalr	1530(ra) # 8001d110 <_ZN4core3mem4drop17ha184dbcd1a83d607E>
    80017b1e:	a039                	j	80017b2c <.LBB14_32+0xbe>
    80017b20:	0928                	addi	a0,sp,152
            va.add_page();
    80017b22:	fffed097          	auipc	ra,0xfffed
    80017b26:	f12080e7          	jalr	-238(ra) # 80004a34 <_ZN6kernel6memory7address4Addr8add_page17hda9f7615eed2e36aE>
    80017b2a:	a089                	j	80017b6c <.LBB14_33+0x10>
    80017b2c:	4501                	li	a0,0
                            VirtualAddress::new(0), 
    80017b2e:	ffffa097          	auipc	ra,0xffffa
    80017b32:	d32080e7          	jalr	-718(ra) # 80011860 <_ZN6kernel6memory7address14VirtualAddress3new17h716be423461f1938E>
    80017b36:	e42a                	sd	a0,8(sp)
    80017b38:	a009                	j	80017b3a <.LBB14_32+0xcc>
    80017b3a:	0928                	addi	a0,sp,152
                            va.as_usize() / PGSIZE, 
    80017b3c:	ffffa097          	auipc	ra,0xffffa
    80017b40:	d00080e7          	jalr	-768(ra) # 8001183c <_ZN89_$LT$kernel..memory..address..VirtualAddress$u20$as$u20$kernel..memory..address..Addr$GT$8as_usize17h7916c21610008a66E>
    80017b44:	e02a                	sd	a0,0(sp)
    80017b46:	a009                	j	80017b48 <.LBB14_32+0xda>
    80017b48:	65a2                	ld	a1,8(sp)
    80017b4a:	7566                	ld	a0,120(sp)
    80017b4c:	6602                	ld	a2,0(sp)
    80017b4e:	8231                	srli	a2,a2,0xc
    80017b50:	4685                	li	a3,1
                        child_pgt.uvm_unmap(
    80017b52:	00000097          	auipc	ra,0x0
    80017b56:	cd4080e7          	jalr	-812(ra) # 80017826 <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_unmap17hab395d2793038c03E>
    80017b5a:	a009                	j	80017b5c <.LBB14_33>

0000000080017b5c <.LBB14_33>:
                        return Err("uvmcopy: Fail.")
    80017b5c:	00012517          	auipc	a0,0x12
    80017b60:	77c50513          	addi	a0,a0,1916 # 8002a2d8 <.L__unnamed_34>
    80017b64:	e52a                	sd	a0,136(sp)
    80017b66:	4539                	li	a0,14
    80017b68:	e92a                	sd	a0,144(sp)
    }
    80017b6a:	a011                	j	80017b6e <.LBB14_33+0x12>
        while va.as_usize() != size {
    80017b6c:	b551                	j	800179f0 <_ZN6kernel6memory7mapping10page_table9PageTable8uvm_copy17h09757305193d69e4E+0x1e>
    }
    80017b6e:	652a                	ld	a0,136(sp)
    80017b70:	65ca                	ld	a1,144(sp)
    80017b72:	70ae                	ld	ra,232(sp)
    80017b74:	616d                	addi	sp,sp,240
    80017b76:	8082                	ret

Disassembly of section .text._ZN6kernel6memory7mapping10page_table9PageTable9uvm_clear17hb623751aee30bcf2E:

0000000080017b78 <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_clear17hb623751aee30bcf2E>:

    

    /// mark a PTE invalid for user access.
    /// used by exec for the user stack guard page.
    pub fn uvm_clear(&mut self, va: VirtualAddress) {
    80017b78:	7179                	addi	sp,sp,-48
    80017b7a:	f406                	sd	ra,40(sp)
    80017b7c:	e82a                	sd	a0,16(sp)
    80017b7e:	ec2e                	sd	a1,24(sp)
        if let Some(pte) = self.translate(va) {
    80017b80:	fffff097          	auipc	ra,0xfffff
    80017b84:	2fe080e7          	jalr	766(ra) # 80016e7e <_ZN6kernel6memory7mapping10page_table9PageTable9translate17h0a84bb7f836f6989E>
    80017b88:	e42a                	sd	a0,8(sp)
    80017b8a:	a009                	j	80017b8c <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_clear17hb623751aee30bcf2E+0x14>
    80017b8c:	6522                	ld	a0,8(sp)
    80017b8e:	4581                	li	a1,0
    80017b90:	02b51263          	bne	a0,a1,80017bb4 <.LBB15_6+0x16>
    80017b94:	a009                	j	80017b96 <.LBB15_5>

0000000080017b96 <.LBB15_5>:
            pte.rm_user_bit();
        }else {
            panic!("uvmclear(): Not found valid pte for virtualaddress");
    80017b96:	00012517          	auipc	a0,0x12
    80017b9a:	79250513          	addi	a0,a0,1938 # 8002a328 <.L__unnamed_35>

0000000080017b9e <.LBB15_6>:
    80017b9e:	00012617          	auipc	a2,0x12
    80017ba2:	7c260613          	addi	a2,a2,1986 # 8002a360 <.L__unnamed_36>
    80017ba6:	03200593          	li	a1,50
    80017baa:	0000a097          	auipc	ra,0xa
    80017bae:	6cc080e7          	jalr	1740(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80017bb2:	0000                	unimp
        if let Some(pte) = self.translate(va) {
    80017bb4:	6522                	ld	a0,8(sp)
    80017bb6:	f02a                	sd	a0,32(sp)
            pte.rm_user_bit();
    80017bb8:	ffff1097          	auipc	ra,0xffff1
    80017bbc:	bbe080e7          	jalr	-1090(ra) # 80008776 <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry11rm_user_bit17hf6078e39c3f185baE>
    80017bc0:	a009                	j	80017bc2 <.LBB15_6+0x24>
        }
    }
    80017bc2:	70a2                	ld	ra,40(sp)
    80017bc4:	6145                	addi	sp,sp,48
    80017bc6:	8082                	ret

Disassembly of section .text._ZN6kernel6memory7mapping10page_table9PageTable8copy_out17h55d0f27ee3680817E:

0000000080017bc8 <_ZN6kernel6memory7mapping10page_table9PageTable8copy_out17h55d0f27ee3680817E>:

    /// Copy from kernel to user.
    /// Copy len bytes from src to virtual address dstva in a given page table.
    /// Return Result<(), Err>. 
    pub fn copy_out(
    80017bc8:	7111                	addi	sp,sp,-256
    80017bca:	fd86                	sd	ra,248(sp)
    80017bcc:	e532                	sd	a2,136(sp)
    80017bce:	e92e                	sd	a1,144(sp)
    80017bd0:	85aa                	mv	a1,a0
    80017bd2:	654a                	ld	a0,144(sp)
    80017bd4:	ed2e                	sd	a1,152(sp)
    80017bd6:	f136                	sd	a3,160(sp)
    80017bd8:	f1ae                	sd	a1,224(sp)
    80017bda:	f5aa                	sd	a0,232(sp)
    80017bdc:	f9b2                	sd	a2,240(sp)
        mut len: usize 
    ) -> Result<(), &'static str> {
        // 从内核空间向用户空间拷贝数据
        // 拷贝的起始地址为 dst, 拷贝的结束地址为 dst + len
        // 首先将目标地址转成虚拟地址并进行页对齐
        let mut va = VirtualAddress::new(dst);
    80017bde:	ffffa097          	auipc	ra,0xffffa
    80017be2:	c82080e7          	jalr	-894(ra) # 80011860 <_ZN6kernel6memory7address14VirtualAddress3new17h716be423461f1938E>
    80017be6:	fd2a                	sd	a0,184(sp)
    80017be8:	a009                	j	80017bea <_ZN6kernel6memory7mapping10page_table9PageTable8copy_out17h55d0f27ee3680817E+0x22>
    80017bea:	1928                	addi	a0,sp,184
        va.pg_round_down();
    80017bec:	fffed097          	auipc	ra,0xfffed
    80017bf0:	dc6080e7          	jalr	-570(ra) # 800049b2 <_ZN6kernel6memory7address4Addr13pg_round_down17h7ab358be9f94b06bE>
    80017bf4:	a009                	j	80017bf6 <_ZN6kernel6memory7mapping10page_table9PageTable8copy_out17h55d0f27ee3680817E+0x2e>
    80017bf6:	1928                	addi	a0,sp,184

        // println!("[Debug] va: 0x{:x}, dst: 0x{:x}", va.as_usize(), dst);
        // 计算第一次需要拷贝的字节数，需要进行页对齐
        let mut count = PGSIZE - (dst - va.as_usize());
    80017bf8:	ffffa097          	auipc	ra,0xffffa
    80017bfc:	c44080e7          	jalr	-956(ra) # 8001183c <_ZN89_$LT$kernel..memory..address..VirtualAddress$u20$as$u20$kernel..memory..address..Addr$GT$8as_usize17h7916c21610008a66E>
    80017c00:	e12a                	sd	a0,128(sp)
    80017c02:	a009                	j	80017c04 <_ZN6kernel6memory7mapping10page_table9PageTable8copy_out17h55d0f27ee3680817E+0x3c>
    80017c04:	654a                	ld	a0,144(sp)
    80017c06:	658a                	ld	a1,128(sp)
    80017c08:	40b505b3          	sub	a1,a0,a1
    80017c0c:	fcae                	sd	a1,120(sp)
    80017c0e:	14b56b63          	bltu	a0,a1,80017d64 <.LBB16_31>
    80017c12:	a009                	j	80017c14 <_ZN6kernel6memory7mapping10page_table9PageTable8copy_out17h55d0f27ee3680817E+0x4c>
    80017c14:	75e6                	ld	a1,120(sp)
    80017c16:	6505                	lui	a0,0x1
    80017c18:	40b505b3          	sub	a1,a0,a1
    80017c1c:	f8ae                	sd	a1,112(sp)
    80017c1e:	16b56263          	bltu	a0,a1,80017d82 <.LBB16_33>
    80017c22:	a009                	j	80017c24 <_ZN6kernel6memory7mapping10page_table9PageTable8copy_out17h55d0f27ee3680817E+0x5c>
    80017c24:	656a                	ld	a0,152(sp)
    80017c26:	75c6                	ld	a1,112(sp)
    80017c28:	e1ae                	sd	a1,192(sp)
    80017c2a:	4581                	li	a1,0
        // 拷贝地址的偏移量，即已经拷贝了多少字节
        let mut offset = 0;
    80017c2c:	e5ae                	sd	a1,200(sp)
        // 将目标地址的虚拟地址翻译成物理地址
        let mut pa = self.pgt_translate(va).unwrap();
    80017c2e:	75ea                	ld	a1,184(sp)
    80017c30:	fffff097          	auipc	ra,0xfffff
    80017c34:	548080e7          	jalr	1352(ra) # 80017178 <_ZN6kernel6memory7mapping10page_table9PageTable13pgt_translate17h8fe9f71b8d139103E>
    80017c38:	f0aa                	sd	a0,96(sp)
    80017c3a:	f4ae                	sd	a1,104(sp)
    80017c3c:	a009                	j	80017c3e <_ZN6kernel6memory7mapping10page_table9PageTable8copy_out17h55d0f27ee3680817E+0x76>
    80017c3e:	75a6                	ld	a1,104(sp)
    80017c40:	7506                	ld	a0,96(sp)

0000000080017c42 <.LBB16_29>:
    80017c42:	00012617          	auipc	a2,0x12
    80017c46:	76660613          	addi	a2,a2,1894 # 8002a3a8 <.L__unnamed_37>
    80017c4a:	ffff7097          	auipc	ra,0xffff7
    80017c4e:	098080e7          	jalr	152(ra) # 8000ece2 <_ZN4core6option15Option$LT$T$GT$6unwrap17h70b9b96f373d4183E>
    80017c52:	e9aa                	sd	a0,208(sp)
    80017c54:	a009                	j	80017c56 <.LBB16_29+0x14>
    80017c56:	0988                	addi	a0,sp,208
        // 计算需要拷贝的虚拟地址的位置
        let mut dst_ptr = unsafe{
            pa.as_mut_ptr().offset((dst - va.as_usize()) as isize)
    80017c58:	fffed097          	auipc	ra,0xfffed
    80017c5c:	c2c080e7          	jalr	-980(ra) # 80004884 <_ZN6kernel6memory7address4Addr10as_mut_ptr17hfa59607f4391fdb5E>
    80017c60:	ecaa                	sd	a0,88(sp)
    80017c62:	a009                	j	80017c64 <.LBB16_29+0x22>
    80017c64:	1928                	addi	a0,sp,184
    80017c66:	ffffa097          	auipc	ra,0xffffa
    80017c6a:	bd6080e7          	jalr	-1066(ra) # 8001183c <_ZN89_$LT$kernel..memory..address..VirtualAddress$u20$as$u20$kernel..memory..address..Addr$GT$8as_usize17h7916c21610008a66E>
    80017c6e:	e8aa                	sd	a0,80(sp)
    80017c70:	a009                	j	80017c72 <.LBB16_29+0x30>
    80017c72:	654a                	ld	a0,144(sp)
    80017c74:	65c6                	ld	a1,80(sp)
    80017c76:	40b505b3          	sub	a1,a0,a1
    80017c7a:	e4ae                	sd	a1,72(sp)
    80017c7c:	12b56263          	bltu	a0,a1,80017da0 <.LBB16_35>
    80017c80:	a009                	j	80017c82 <.LBB16_29+0x40>
    80017c82:	65a6                	ld	a1,72(sp)
    80017c84:	6566                	ld	a0,88(sp)
    80017c86:	00008097          	auipc	ra,0x8
    80017c8a:	ae8080e7          	jalr	-1304(ra) # 8001f76e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb5f7a0f346747657E>
    80017c8e:	edaa                	sd	a0,216(sp)
    80017c90:	a009                	j	80017c92 <.LBB16_29+0x50>
            // 由于在 syscall 的时候将用户页表切换成了内核页表，
            // 因此在拷贝的时候需要将用户态的虚拟地址转换成物理地址，
            // 由于在内核中数据区是直接映射，因此在访问物理地址的时候
            // 经过 MMU 不会报错
            // println!("[Debug] count: {}, len: {}", count, len);
            if count > len {
    80017c92:	658e                	ld	a1,192(sp)
    80017c94:	750a                	ld	a0,160(sp)
    80017c96:	00b57d63          	bgeu	a0,a1,80017cb0 <.LBB16_29+0x6e>
    80017c9a:	a009                	j	80017c9c <.LBB16_29+0x5a>
                // 如果页内剩余的容量大于生于要拷贝的容量，则将count替换成len
                count = len;
    80017c9c:	652a                	ld	a0,136(sp)
    80017c9e:	758a                	ld	a1,160(sp)
    80017ca0:	e1ae                	sd	a1,192(sp)
                unsafe{
                    copy(
                        src.offset(offset as isize), 
    80017ca2:	65ae                	ld	a1,200(sp)
    80017ca4:	00008097          	auipc	ra,0x8
    80017ca8:	b98080e7          	jalr	-1128(ra) # 8001f83c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d562998c5c34b1bE>
    80017cac:	e0aa                	sd	a0,64(sp)
    80017cae:	a809                	j	80017cc0 <.LBB16_29+0x7e>
                }
                return Ok(())
            }else {
                unsafe{
                    copy(
                        src.offset(offset as isize), 
    80017cb0:	652a                	ld	a0,136(sp)
    80017cb2:	65ae                	ld	a1,200(sp)
    80017cb4:	00008097          	auipc	ra,0x8
    80017cb8:	b88080e7          	jalr	-1144(ra) # 8001f83c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d562998c5c34b1bE>
    80017cbc:	fc2a                	sd	a0,56(sp)
    80017cbe:	a839                	j	80017cdc <.LBB16_29+0x9a>
                        dst_ptr, 
    80017cc0:	6586                	ld	a1,64(sp)
    80017cc2:	656e                	ld	a0,216(sp)
                        count
    80017cc4:	660e                	ld	a2,192(sp)
                    copy(
    80017cc6:	0000d097          	auipc	ra,0xd
    80017cca:	434080e7          	jalr	1076(ra) # 800250fa <memmove>
    80017cce:	a009                	j	80017cd0 <.LBB16_29+0x8e>
    80017cd0:	4501                	li	a0,0
                return Ok(())
    80017cd2:	f52a                	sd	a0,168(sp)
                pa = self.pgt_translate(va).unwrap();
                count = PGSIZE;
                dst_ptr = pa.as_mut_ptr();
            }
        }
    }   
    80017cd4:	75ca                	ld	a1,176(sp)
    80017cd6:	70ee                	ld	ra,248(sp)
    80017cd8:	6111                	addi	sp,sp,256
    80017cda:	8082                	ret
                        dst_ptr, 
    80017cdc:	75e2                	ld	a1,56(sp)
    80017cde:	656e                	ld	a0,216(sp)
                        count
    80017ce0:	660e                	ld	a2,192(sp)
                    copy(
    80017ce2:	0000d097          	auipc	ra,0xd
    80017ce6:	418080e7          	jalr	1048(ra) # 800250fa <memmove>
    80017cea:	a009                	j	80017cec <.LBB16_29+0xaa>
                len -= count;
    80017cec:	658e                	ld	a1,192(sp)
    80017cee:	750a                	ld	a0,160(sp)
    80017cf0:	40b505b3          	sub	a1,a0,a1
    80017cf4:	f82e                	sd	a1,48(sp)
    80017cf6:	0cb56463          	bltu	a0,a1,80017dbe <.LBB16_37>
    80017cfa:	a009                	j	80017cfc <.LBB16_29+0xba>
    80017cfc:	7542                	ld	a0,48(sp)
    80017cfe:	f12a                	sd	a0,160(sp)
                offset += count;
    80017d00:	650e                	ld	a0,192(sp)
    80017d02:	65ae                	ld	a1,200(sp)
    80017d04:	952e                	add	a0,a0,a1
    80017d06:	f42a                	sd	a0,40(sp)
    80017d08:	0cb56a63          	bltu	a0,a1,80017ddc <.LBB16_39>
    80017d0c:	a009                	j	80017d0e <.LBB16_29+0xcc>
    80017d0e:	7522                	ld	a0,40(sp)
    80017d10:	e5aa                	sd	a0,200(sp)
    80017d12:	1928                	addi	a0,sp,184
                va.add_page();
    80017d14:	fffed097          	auipc	ra,0xfffed
    80017d18:	d20080e7          	jalr	-736(ra) # 80004a34 <_ZN6kernel6memory7address4Addr8add_page17hda9f7615eed2e36aE>
    80017d1c:	a009                	j	80017d1e <.LBB16_29+0xdc>
                pa = self.pgt_translate(va).unwrap();
    80017d1e:	656a                	ld	a0,152(sp)
    80017d20:	75ea                	ld	a1,184(sp)
    80017d22:	fffff097          	auipc	ra,0xfffff
    80017d26:	456080e7          	jalr	1110(ra) # 80017178 <_ZN6kernel6memory7mapping10page_table9PageTable13pgt_translate17h8fe9f71b8d139103E>
    80017d2a:	ec2a                	sd	a0,24(sp)
    80017d2c:	f02e                	sd	a1,32(sp)
    80017d2e:	a009                	j	80017d30 <.LBB16_29+0xee>
    80017d30:	7582                	ld	a1,32(sp)
    80017d32:	6562                	ld	a0,24(sp)

0000000080017d34 <.LBB16_30>:
    80017d34:	00012617          	auipc	a2,0x12
    80017d38:	6d460613          	addi	a2,a2,1748 # 8002a408 <.L__unnamed_38>
    80017d3c:	ffff7097          	auipc	ra,0xffff7
    80017d40:	fa6080e7          	jalr	-90(ra) # 8000ece2 <_ZN4core6option15Option$LT$T$GT$6unwrap17h70b9b96f373d4183E>
    80017d44:	e82a                	sd	a0,16(sp)
    80017d46:	a009                	j	80017d48 <.LBB16_30+0x14>
    80017d48:	6542                	ld	a0,16(sp)
    80017d4a:	e9aa                	sd	a0,208(sp)
    80017d4c:	6505                	lui	a0,0x1
                count = PGSIZE;
    80017d4e:	e1aa                	sd	a0,192(sp)
    80017d50:	0988                	addi	a0,sp,208
                dst_ptr = pa.as_mut_ptr();
    80017d52:	fffed097          	auipc	ra,0xfffed
    80017d56:	b32080e7          	jalr	-1230(ra) # 80004884 <_ZN6kernel6memory7address4Addr10as_mut_ptr17hfa59607f4391fdb5E>
    80017d5a:	e42a                	sd	a0,8(sp)
    80017d5c:	a009                	j	80017d5e <.LBB16_30+0x2a>
    80017d5e:	6522                	ld	a0,8(sp)
    80017d60:	edaa                	sd	a0,216(sp)
        loop {
    80017d62:	bf05                	j	80017c92 <.LBB16_29+0x50>

0000000080017d64 <.LBB16_31>:
        let mut count = PGSIZE - (dst - va.as_usize());
    80017d64:	00012517          	auipc	a0,0x12
    80017d68:	43c50513          	addi	a0,a0,1084 # 8002a1a0 <str.1>

0000000080017d6c <.LBB16_32>:
    80017d6c:	00012617          	auipc	a2,0x12
    80017d70:	60c60613          	addi	a2,a2,1548 # 8002a378 <.L__unnamed_39>
    80017d74:	02100593          	li	a1,33
    80017d78:	0000a097          	auipc	ra,0xa
    80017d7c:	4fe080e7          	jalr	1278(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080017d82 <.LBB16_33>:
    80017d82:	00012517          	auipc	a0,0x12
    80017d86:	41e50513          	addi	a0,a0,1054 # 8002a1a0 <str.1>

0000000080017d8a <.LBB16_34>:
    80017d8a:	00012617          	auipc	a2,0x12
    80017d8e:	60660613          	addi	a2,a2,1542 # 8002a390 <.L__unnamed_40>
    80017d92:	02100593          	li	a1,33
    80017d96:	0000a097          	auipc	ra,0xa
    80017d9a:	4e0080e7          	jalr	1248(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080017da0 <.LBB16_35>:
            pa.as_mut_ptr().offset((dst - va.as_usize()) as isize)
    80017da0:	00012517          	auipc	a0,0x12
    80017da4:	40050513          	addi	a0,a0,1024 # 8002a1a0 <str.1>

0000000080017da8 <.LBB16_36>:
    80017da8:	00012617          	auipc	a2,0x12
    80017dac:	61860613          	addi	a2,a2,1560 # 8002a3c0 <.L__unnamed_41>
    80017db0:	02100593          	li	a1,33
    80017db4:	0000a097          	auipc	ra,0xa
    80017db8:	4c2080e7          	jalr	1218(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080017dbe <.LBB16_37>:
                len -= count;
    80017dbe:	00012517          	auipc	a0,0x12
    80017dc2:	3e250513          	addi	a0,a0,994 # 8002a1a0 <str.1>

0000000080017dc6 <.LBB16_38>:
    80017dc6:	00012617          	auipc	a2,0x12
    80017dca:	61260613          	addi	a2,a2,1554 # 8002a3d8 <.L__unnamed_42>
    80017dce:	02100593          	li	a1,33
    80017dd2:	0000a097          	auipc	ra,0xa
    80017dd6:	4a4080e7          	jalr	1188(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080017ddc <.LBB16_39>:
                offset += count;
    80017ddc:	00012517          	auipc	a0,0x12
    80017de0:	20450513          	addi	a0,a0,516 # 80029fe0 <str.0>

0000000080017de4 <.LBB16_40>:
    80017de4:	00012617          	auipc	a2,0x12
    80017de8:	60c60613          	addi	a2,a2,1548 # 8002a3f0 <.L__unnamed_43>
    80017dec:	45f1                	li	a1,28
    80017dee:	0000a097          	auipc	ra,0xa
    80017df2:	488080e7          	jalr	1160(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel6memory7mapping10page_table9PageTable7copy_in17h459a5354b5a5ab11E:

0000000080017df8 <_ZN6kernel6memory7mapping10page_table9PageTable7copy_in17h459a5354b5a5ab11E>:


    /// Copy from user to kernel.
    /// Copy len bytes to dst from virtual address srcva in a given page table.
    /// Return Result<(), Err>
    pub fn copy_in(
    80017df8:	7151                	addi	sp,sp,-240
    80017dfa:	f586                	sd	ra,232(sp)
    80017dfc:	e932                	sd	a2,144(sp)
    80017dfe:	862e                	mv	a2,a1
    80017e00:	85aa                	mv	a1,a0
    80017e02:	654a                	ld	a0,144(sp)
    80017e04:	ed2e                	sd	a1,152(sp)
    80017e06:	f132                	sd	a2,160(sp)
    80017e08:	f536                	sd	a3,168(sp)
    80017e0a:	e9ae                	sd	a1,208(sp)
    80017e0c:	edaa                	sd	a0,216(sp)
        &mut self, 
        mut dst: *mut u8, 
        src: usize, 
        mut len: usize
    ) -> Result<(), &'static str> {
        let mut va = VirtualAddress::new(src);
    80017e0e:	ffffa097          	auipc	ra,0xffffa
    80017e12:	a52080e7          	jalr	-1454(ra) # 80011860 <_ZN6kernel6memory7address14VirtualAddress3new17h716be423461f1938E>
    80017e16:	e1aa                	sd	a0,192(sp)
    80017e18:	a009                	j	80017e1a <_ZN6kernel6memory7mapping10page_table9PageTable7copy_in17h459a5354b5a5ab11E+0x22>
    80017e1a:	0188                	addi	a0,sp,192
        va.pg_round_down();
    80017e1c:	fffed097          	auipc	ra,0xfffed
    80017e20:	b96080e7          	jalr	-1130(ra) # 800049b2 <_ZN6kernel6memory7address4Addr13pg_round_down17h7ab358be9f94b06bE>
    80017e24:	a009                	j	80017e26 <_ZN6kernel6memory7mapping10page_table9PageTable7copy_in17h459a5354b5a5ab11E+0x2e>
        loop {
            // Get physical address by virtual address
            let pa = self.pgt_translate(va).unwrap();
    80017e26:	656a                	ld	a0,152(sp)
    80017e28:	658e                	ld	a1,192(sp)
    80017e2a:	fffff097          	auipc	ra,0xfffff
    80017e2e:	34e080e7          	jalr	846(ra) # 80017178 <_ZN6kernel6memory7mapping10page_table9PageTable13pgt_translate17h8fe9f71b8d139103E>
    80017e32:	e12a                	sd	a0,128(sp)
    80017e34:	e52e                	sd	a1,136(sp)
    80017e36:	a009                	j	80017e38 <_ZN6kernel6memory7mapping10page_table9PageTable7copy_in17h459a5354b5a5ab11E+0x40>
    80017e38:	65aa                	ld	a1,136(sp)
    80017e3a:	650a                	ld	a0,128(sp)

0000000080017e3c <.LBB17_30>:
    80017e3c:	00012617          	auipc	a2,0x12
    80017e40:	5e460613          	addi	a2,a2,1508 # 8002a420 <.L__unnamed_44>
    80017e44:	ffff7097          	auipc	ra,0xffff7
    80017e48:	e9e080e7          	jalr	-354(ra) # 8000ece2 <_ZN4core6option15Option$LT$T$GT$6unwrap17h70b9b96f373d4183E>
    80017e4c:	e5aa                	sd	a0,200(sp)
    80017e4e:	a009                	j	80017e50 <.LBB17_30+0x14>
    80017e50:	0188                	addi	a0,sp,192
            // Get copy bytes of current page.
            let count = PGSIZE - (src - va.as_usize());
    80017e52:	ffffa097          	auipc	ra,0xffffa
    80017e56:	9ea080e7          	jalr	-1558(ra) # 8001183c <_ZN89_$LT$kernel..memory..address..VirtualAddress$u20$as$u20$kernel..memory..address..Addr$GT$8as_usize17h7916c21610008a66E>
    80017e5a:	fcaa                	sd	a0,120(sp)
    80017e5c:	a009                	j	80017e5e <.LBB17_30+0x22>
    80017e5e:	654a                	ld	a0,144(sp)
    80017e60:	75e6                	ld	a1,120(sp)
    80017e62:	40b505b3          	sub	a1,a0,a1
    80017e66:	f8ae                	sd	a1,112(sp)
    80017e68:	10b56063          	bltu	a0,a1,80017f68 <.LBB17_31>
    80017e6c:	a009                	j	80017e6e <.LBB17_30+0x32>
    80017e6e:	75c6                	ld	a1,112(sp)
    80017e70:	6505                	lui	a0,0x1
    80017e72:	40b505b3          	sub	a1,a0,a1
    80017e76:	f4ae                	sd	a1,104(sp)
    80017e78:	10b56763          	bltu	a0,a1,80017f86 <.LBB17_33>
    80017e7c:	a009                	j	80017e7e <.LBB17_30+0x42>
    80017e7e:	75a6                	ld	a1,104(sp)
    80017e80:	f1ae                	sd	a1,224(sp)
            if len < count {
    80017e82:	752a                	ld	a0,168(sp)
    80017e84:	00b57c63          	bgeu	a0,a1,80017e9c <.LBB17_30+0x60>
    80017e88:	a009                	j	80017e8a <.LBB17_30+0x4e>
                mem_copy(
                    dst as usize, 
    80017e8a:	750a                	ld	a0,160(sp)
                    pa.as_usize() + ( src - va.as_usize() ), 
    80017e8c:	ecaa                	sd	a0,88(sp)
    80017e8e:	01a8                	addi	a0,sp,200
    80017e90:	ffffa097          	auipc	ra,0xffffa
    80017e94:	9be080e7          	jalr	-1602(ra) # 8001184e <_ZN90_$LT$kernel..memory..address..PhysicalAddress$u20$as$u20$kernel..memory..address..Addr$GT$8as_usize17hea2eecdb80a1a2b2E>
    80017e98:	f0aa                	sd	a0,96(sp)
    80017e9a:	a811                	j	80017eae <.LBB17_30+0x72>
                    len
                );
                return Ok(())
            }
            mem_copy(
                dst as usize,
    80017e9c:	750a                	ld	a0,160(sp)
                pa.as_usize() + ( src - va.as_usize() ),
    80017e9e:	e4aa                	sd	a0,72(sp)
    80017ea0:	01a8                	addi	a0,sp,200
    80017ea2:	ffffa097          	auipc	ra,0xffffa
    80017ea6:	9ac080e7          	jalr	-1620(ra) # 8001184e <_ZN90_$LT$kernel..memory..address..PhysicalAddress$u20$as$u20$kernel..memory..address..Addr$GT$8as_usize17hea2eecdb80a1a2b2E>
    80017eaa:	e8aa                	sd	a0,80(sp)
    80017eac:	a0a9                	j	80017ef6 <.LBB17_30+0xba>
    80017eae:	0188                	addi	a0,sp,192
                    pa.as_usize() + ( src - va.as_usize() ), 
    80017eb0:	ffffa097          	auipc	ra,0xffffa
    80017eb4:	98c080e7          	jalr	-1652(ra) # 8001183c <_ZN89_$LT$kernel..memory..address..VirtualAddress$u20$as$u20$kernel..memory..address..Addr$GT$8as_usize17h7916c21610008a66E>
    80017eb8:	e0aa                	sd	a0,64(sp)
    80017eba:	a009                	j	80017ebc <.LBB17_30+0x80>
    80017ebc:	654a                	ld	a0,144(sp)
    80017ebe:	6586                	ld	a1,64(sp)
    80017ec0:	40b505b3          	sub	a1,a0,a1
    80017ec4:	fc2e                	sd	a1,56(sp)
    80017ec6:	0cb56f63          	bltu	a0,a1,80017fa4 <.LBB17_35>
    80017eca:	a009                	j	80017ecc <.LBB17_30+0x90>
    80017ecc:	7586                	ld	a1,96(sp)
    80017ece:	7562                	ld	a0,56(sp)
    80017ed0:	952e                	add	a0,a0,a1
    80017ed2:	f82a                	sd	a0,48(sp)
    80017ed4:	0eb56763          	bltu	a0,a1,80017fc2 <.LBB17_37>
    80017ed8:	a009                	j	80017eda <.LBB17_30+0x9e>
                    len
    80017eda:	75c2                	ld	a1,48(sp)
    80017edc:	6566                	ld	a0,88(sp)
    80017ede:	762a                	ld	a2,168(sp)
                mem_copy(
    80017ee0:	ffff0097          	auipc	ra,0xffff0
    80017ee4:	a50080e7          	jalr	-1456(ra) # 80007930 <_ZN6kernel4misc8mem_copy17h5e55f1040770ffdeE>
    80017ee8:	a009                	j	80017eea <.LBB17_30+0xae>
    80017eea:	4501                	li	a0,0
                return Ok(())
    80017eec:	f92a                	sd	a0,176(sp)

            len -= count;
            dst = unsafe{ dst.offset(count as isize) };
            va.add_page();
        }
    }
    80017eee:	75ea                	ld	a1,184(sp)
    80017ef0:	70ae                	ld	ra,232(sp)
    80017ef2:	616d                	addi	sp,sp,240
    80017ef4:	8082                	ret
    80017ef6:	0188                	addi	a0,sp,192
                pa.as_usize() + ( src - va.as_usize() ),
    80017ef8:	ffffa097          	auipc	ra,0xffffa
    80017efc:	944080e7          	jalr	-1724(ra) # 8001183c <_ZN89_$LT$kernel..memory..address..VirtualAddress$u20$as$u20$kernel..memory..address..Addr$GT$8as_usize17h7916c21610008a66E>
    80017f00:	f42a                	sd	a0,40(sp)
    80017f02:	a009                	j	80017f04 <.LBB17_30+0xc8>
    80017f04:	654a                	ld	a0,144(sp)
    80017f06:	75a2                	ld	a1,40(sp)
    80017f08:	40b505b3          	sub	a1,a0,a1
    80017f0c:	f02e                	sd	a1,32(sp)
    80017f0e:	0cb56863          	bltu	a0,a1,80017fde <.LBB17_39>
    80017f12:	a009                	j	80017f14 <.LBB17_30+0xd8>
    80017f14:	65c6                	ld	a1,80(sp)
    80017f16:	7502                	ld	a0,32(sp)
    80017f18:	952e                	add	a0,a0,a1
    80017f1a:	ec2a                	sd	a0,24(sp)
    80017f1c:	0eb56063          	bltu	a0,a1,80017ffc <.LBB17_41>
    80017f20:	a009                	j	80017f22 <.LBB17_30+0xe6>
            mem_copy(
    80017f22:	7626                	ld	a2,104(sp)
    80017f24:	65e2                	ld	a1,24(sp)
    80017f26:	6526                	ld	a0,72(sp)
    80017f28:	ffff0097          	auipc	ra,0xffff0
    80017f2c:	a08080e7          	jalr	-1528(ra) # 80007930 <_ZN6kernel4misc8mem_copy17h5e55f1040770ffdeE>
    80017f30:	a009                	j	80017f32 <.LBB17_30+0xf6>
            len -= count;
    80017f32:	75a6                	ld	a1,104(sp)
    80017f34:	752a                	ld	a0,168(sp)
    80017f36:	40b505b3          	sub	a1,a0,a1
    80017f3a:	e82e                	sd	a1,16(sp)
    80017f3c:	0cb56e63          	bltu	a0,a1,80018018 <.LBB17_43>
    80017f40:	a009                	j	80017f42 <.LBB17_30+0x106>
    80017f42:	75a6                	ld	a1,104(sp)
    80017f44:	6542                	ld	a0,16(sp)
    80017f46:	f52a                	sd	a0,168(sp)
            dst = unsafe{ dst.offset(count as isize) };
    80017f48:	750a                	ld	a0,160(sp)
    80017f4a:	00008097          	auipc	ra,0x8
    80017f4e:	824080e7          	jalr	-2012(ra) # 8001f76e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb5f7a0f346747657E>
    80017f52:	e42a                	sd	a0,8(sp)
    80017f54:	a009                	j	80017f56 <.LBB17_30+0x11a>
    80017f56:	6522                	ld	a0,8(sp)
    80017f58:	f12a                	sd	a0,160(sp)
    80017f5a:	0188                	addi	a0,sp,192
            va.add_page();
    80017f5c:	fffed097          	auipc	ra,0xfffed
    80017f60:	ad8080e7          	jalr	-1320(ra) # 80004a34 <_ZN6kernel6memory7address4Addr8add_page17hda9f7615eed2e36aE>
    80017f64:	a009                	j	80017f66 <.LBB17_30+0x12a>
        loop {
    80017f66:	b5c1                	j	80017e26 <_ZN6kernel6memory7mapping10page_table9PageTable7copy_in17h459a5354b5a5ab11E+0x2e>

0000000080017f68 <.LBB17_31>:
            let count = PGSIZE - (src - va.as_usize());
    80017f68:	00012517          	auipc	a0,0x12
    80017f6c:	23850513          	addi	a0,a0,568 # 8002a1a0 <str.1>

0000000080017f70 <.LBB17_32>:
    80017f70:	00012617          	auipc	a2,0x12
    80017f74:	4c860613          	addi	a2,a2,1224 # 8002a438 <.L__unnamed_45>
    80017f78:	02100593          	li	a1,33
    80017f7c:	0000a097          	auipc	ra,0xa
    80017f80:	2fa080e7          	jalr	762(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080017f86 <.LBB17_33>:
    80017f86:	00012517          	auipc	a0,0x12
    80017f8a:	21a50513          	addi	a0,a0,538 # 8002a1a0 <str.1>

0000000080017f8e <.LBB17_34>:
    80017f8e:	00012617          	auipc	a2,0x12
    80017f92:	4c260613          	addi	a2,a2,1218 # 8002a450 <.L__unnamed_46>
    80017f96:	02100593          	li	a1,33
    80017f9a:	0000a097          	auipc	ra,0xa
    80017f9e:	2dc080e7          	jalr	732(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080017fa4 <.LBB17_35>:
                    pa.as_usize() + ( src - va.as_usize() ), 
    80017fa4:	00012517          	auipc	a0,0x12
    80017fa8:	1fc50513          	addi	a0,a0,508 # 8002a1a0 <str.1>

0000000080017fac <.LBB17_36>:
    80017fac:	00012617          	auipc	a2,0x12
    80017fb0:	4bc60613          	addi	a2,a2,1212 # 8002a468 <.L__unnamed_47>
    80017fb4:	02100593          	li	a1,33
    80017fb8:	0000a097          	auipc	ra,0xa
    80017fbc:	2be080e7          	jalr	702(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080017fc2 <.LBB17_37>:
    80017fc2:	00012517          	auipc	a0,0x12
    80017fc6:	01e50513          	addi	a0,a0,30 # 80029fe0 <str.0>

0000000080017fca <.LBB17_38>:
    80017fca:	00012617          	auipc	a2,0x12
    80017fce:	4b660613          	addi	a2,a2,1206 # 8002a480 <.L__unnamed_48>
    80017fd2:	45f1                	li	a1,28
    80017fd4:	0000a097          	auipc	ra,0xa
    80017fd8:	2a2080e7          	jalr	674(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080017fde <.LBB17_39>:
                pa.as_usize() + ( src - va.as_usize() ),
    80017fde:	00012517          	auipc	a0,0x12
    80017fe2:	1c250513          	addi	a0,a0,450 # 8002a1a0 <str.1>

0000000080017fe6 <.LBB17_40>:
    80017fe6:	00012617          	auipc	a2,0x12
    80017fea:	4b260613          	addi	a2,a2,1202 # 8002a498 <.L__unnamed_49>
    80017fee:	02100593          	li	a1,33
    80017ff2:	0000a097          	auipc	ra,0xa
    80017ff6:	284080e7          	jalr	644(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080017ffc <.LBB17_41>:
    80017ffc:	00012517          	auipc	a0,0x12
    80018000:	fe450513          	addi	a0,a0,-28 # 80029fe0 <str.0>

0000000080018004 <.LBB17_42>:
    80018004:	00012617          	auipc	a2,0x12
    80018008:	4ac60613          	addi	a2,a2,1196 # 8002a4b0 <.L__unnamed_50>
    8001800c:	45f1                	li	a1,28
    8001800e:	0000a097          	auipc	ra,0xa
    80018012:	268080e7          	jalr	616(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080018018 <.LBB17_43>:
            len -= count;
    80018018:	00012517          	auipc	a0,0x12
    8001801c:	18850513          	addi	a0,a0,392 # 8002a1a0 <str.1>

0000000080018020 <.LBB17_44>:
    80018020:	00012617          	auipc	a2,0x12
    80018024:	4a860613          	addi	a2,a2,1192 # 8002a4c8 <.L__unnamed_51>
    80018028:	02100593          	li	a1,33
    8001802c:	0000a097          	auipc	ra,0xa
    80018030:	24a080e7          	jalr	586(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel6memory7mapping10page_table9PageTable11copy_in_str17hce5a6c8720f87e9cE:

0000000080018036 <_ZN6kernel6memory7mapping10page_table9PageTable11copy_in_str17hce5a6c8720f87e9cE>:

    /// Copy a null-trrminated string from user to kernel. 
    /// Copy bytes to dst from virtual address src in a given table. 
    /// until a '\0', or max. 
    /// Return Result. 
    pub fn copy_in_str(
    80018036:	7141                	addi	sp,sp,-496
    80018038:	f786                	sd	ra,488(sp)
    8001803a:	e5b2                	sd	a2,200(sp)
    8001803c:	e1ae                	sd	a1,192(sp)
    8001803e:	862a                	mv	a2,a0
    80018040:	652e                	ld	a0,200(sp)
    80018042:	e9b2                	sd	a2,208(sp)
    80018044:	edb6                	sd	a3,216(sp)
    80018046:	f2b2                	sd	a2,352(sp)
    80018048:	f6ae                	sd	a1,360(sp)
    8001804a:	faaa                	sd	a0,368(sp)
        dst: *mut u8,
        src: usize,
        mut max: usize
    ) -> Result<(),&'static str> {
        // 将 src 作为虚拟地址
        let mut va = VirtualAddress::new(src as usize);
    8001804c:	ffffa097          	auipc	ra,0xffffa
    80018050:	814080e7          	jalr	-2028(ra) # 80011860 <_ZN6kernel6memory7address14VirtualAddress3new17h716be423461f1938E>
    80018054:	f9aa                	sd	a0,240(sp)
    80018056:	a009                	j	80018058 <_ZN6kernel6memory7mapping10page_table9PageTable11copy_in_str17hce5a6c8720f87e9cE+0x22>
    80018058:	1988                	addi	a0,sp,240
        // 将虚拟地址进行页对齐
        va.pg_round_down();
    8001805a:	fffed097          	auipc	ra,0xfffed
    8001805e:	958080e7          	jalr	-1704(ra) # 800049b2 <_ZN6kernel6memory7address4Addr13pg_round_down17h7ab358be9f94b06bE>
    80018062:	a009                	j	80018064 <_ZN6kernel6memory7mapping10page_table9PageTable11copy_in_str17hce5a6c8720f87e9cE+0x2e>
        loop {
            // 将用户态的虚拟地址转成物理地址
            let pa = self.pgt_translate(va).unwrap();
    80018064:	654e                	ld	a0,208(sp)
    80018066:	75ce                	ld	a1,240(sp)
    80018068:	fffff097          	auipc	ra,0xfffff
    8001806c:	110080e7          	jalr	272(ra) # 80017178 <_ZN6kernel6memory7mapping10page_table9PageTable13pgt_translate17h8fe9f71b8d139103E>
    80018070:	f92a                	sd	a0,176(sp)
    80018072:	fd2e                	sd	a1,184(sp)
    80018074:	a009                	j	80018076 <_ZN6kernel6memory7mapping10page_table9PageTable11copy_in_str17hce5a6c8720f87e9cE+0x40>
    80018076:	75ea                	ld	a1,184(sp)
    80018078:	754a                	ld	a0,176(sp)

000000008001807a <.LBB18_48>:
    8001807a:	00012617          	auipc	a2,0x12
    8001807e:	46660613          	addi	a2,a2,1126 # 8002a4e0 <.L__unnamed_52>
    80018082:	ffff7097          	auipc	ra,0xffff7
    80018086:	c60080e7          	jalr	-928(ra) # 8000ece2 <_ZN4core6option15Option$LT$T$GT$6unwrap17h70b9b96f373d4183E>
    8001808a:	fdaa                	sd	a0,248(sp)
    8001808c:	a009                	j	8001808e <.LBB18_48+0x14>
    8001808e:	1988                	addi	a0,sp,240
            // 计算该页所要读取的字节数
            let count = PGSIZE - (src - va.as_usize());
    80018090:	ffff9097          	auipc	ra,0xffff9
    80018094:	7ac080e7          	jalr	1964(ra) # 8001183c <_ZN89_$LT$kernel..memory..address..VirtualAddress$u20$as$u20$kernel..memory..address..Addr$GT$8as_usize17h7916c21610008a66E>
    80018098:	f52a                	sd	a0,168(sp)
    8001809a:	a009                	j	8001809c <.LBB18_48+0x22>
    8001809c:	652e                	ld	a0,200(sp)
    8001809e:	75aa                	ld	a1,168(sp)
    800180a0:	40b505b3          	sub	a1,a0,a1
    800180a4:	f12e                	sd	a1,160(sp)
    800180a6:	1eb56263          	bltu	a0,a1,8001828a <.LBB18_49>
    800180aa:	a009                	j	800180ac <.LBB18_48+0x32>
    800180ac:	758a                	ld	a1,160(sp)
    800180ae:	6505                	lui	a0,0x1
    800180b0:	40b505b3          	sub	a1,a0,a1
    800180b4:	ed2e                	sd	a1,152(sp)
    800180b6:	1eb56963          	bltu	a0,a1,800182a8 <.LBB18_51>
    800180ba:	a009                	j	800180bc <.LBB18_48+0x42>
    800180bc:	656a                	ld	a0,152(sp)
    800180be:	feaa                	sd	a0,376(sp)
    800180c0:	19a8                	addi	a0,sp,248
            let s = (pa.as_usize() + (src - va.as_usize())) as *const u8;
    800180c2:	ffff9097          	auipc	ra,0xffff9
    800180c6:	78c080e7          	jalr	1932(ra) # 8001184e <_ZN90_$LT$kernel..memory..address..PhysicalAddress$u20$as$u20$kernel..memory..address..Addr$GT$8as_usize17hea2eecdb80a1a2b2E>
    800180ca:	e92a                	sd	a0,144(sp)
    800180cc:	a009                	j	800180ce <.LBB18_48+0x54>
    800180ce:	1988                	addi	a0,sp,240
    800180d0:	ffff9097          	auipc	ra,0xffff9
    800180d4:	76c080e7          	jalr	1900(ra) # 8001183c <_ZN89_$LT$kernel..memory..address..VirtualAddress$u20$as$u20$kernel..memory..address..Addr$GT$8as_usize17h7916c21610008a66E>
    800180d8:	e52a                	sd	a0,136(sp)
    800180da:	a009                	j	800180dc <.LBB18_48+0x62>
    800180dc:	652e                	ld	a0,200(sp)
    800180de:	65aa                	ld	a1,136(sp)
    800180e0:	40b505b3          	sub	a1,a0,a1
    800180e4:	e12e                	sd	a1,128(sp)
    800180e6:	1eb56063          	bltu	a0,a1,800182c6 <.LBB18_53>
    800180ea:	a009                	j	800180ec <.LBB18_48+0x72>
    800180ec:	65ca                	ld	a1,144(sp)
    800180ee:	650a                	ld	a0,128(sp)
    800180f0:	952e                	add	a0,a0,a1
    800180f2:	fcaa                	sd	a0,120(sp)
    800180f4:	1eb56863          	bltu	a0,a1,800182e4 <.LBB18_55>
    800180f8:	a009                	j	800180fa <.LBB18_48+0x80>
    800180fa:	65ea                	ld	a1,152(sp)
    800180fc:	7566                	ld	a0,120(sp)
    800180fe:	862a                	mv	a2,a0
    80018100:	f8b2                	sd	a2,112(sp)
    80018102:	e32a                	sd	a0,384(sp)
            if max < count {
    80018104:	656e                	ld	a0,216(sp)
    80018106:	00b57e63          	bgeu	a0,a1,80018122 <.LBB18_48+0xa8>
    8001810a:	a009                	j	8001810c <.LBB18_48+0x92>
                // 所能读取的最大的字符数小于该页剩余字节
                for i in 0..max {
    8001810c:	65ee                	ld	a1,216(sp)
    8001810e:	4501                	li	a0,0
    80018110:	e22a                	sd	a0,256(sp)
    80018112:	e62e                	sd	a1,264(sp)
    80018114:	00008097          	auipc	ra,0x8
    80018118:	82e080e7          	jalr	-2002(ra) # 8001f942 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he0a8d93712e5493bE>
    8001811c:	f0aa                	sd	a0,96(sp)
    8001811e:	f4ae                	sd	a1,104(sp)
    80018120:	a821                	j	80018138 <.LBB18_48+0xbe>
    80018122:	65ea                	ld	a1,152(sp)
    80018124:	4501                	li	a0,0
                    }
                }
                return Ok(())
            }

            for i in 0..count {
    80018126:	fa2a                	sd	a0,304(sp)
    80018128:	fe2e                	sd	a1,312(sp)
    8001812a:	00008097          	auipc	ra,0x8
    8001812e:	818080e7          	jalr	-2024(ra) # 8001f942 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he0a8d93712e5493bE>
    80018132:	e8aa                	sd	a0,80(sp)
    80018134:	ecae                	sd	a1,88(sp)
    80018136:	a861                	j	800181ce <.LBB18_48+0x154>
                for i in 0..max {
    80018138:	7526                	ld	a0,104(sp)
    8001813a:	7586                	ld	a1,96(sp)
    8001813c:	ea2e                	sd	a1,272(sp)
    8001813e:	ee2a                	sd	a0,280(sp)
    80018140:	a009                	j	80018142 <.LBB18_48+0xc8>
    80018142:	0a08                	addi	a0,sp,272
    80018144:	00007097          	auipc	ra,0x7
    80018148:	790080e7          	jalr	1936(ra) # 8001f8d4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE>
    8001814c:	f22a                	sd	a0,288(sp)
    8001814e:	f62e                	sd	a1,296(sp)
    80018150:	a009                	j	80018152 <.LBB18_48+0xd8>
    80018152:	7512                	ld	a0,288(sp)
    80018154:	4581                	li	a1,0
    80018156:	00b50463          	beq	a0,a1,8001815e <.LBB18_48+0xe4>
    8001815a:	a009                	j	8001815c <.LBB18_48+0xe2>
    8001815c:	a029                	j	80018166 <.LBB18_48+0xec>
    8001815e:	4501                	li	a0,0
                return Ok(())
    80018160:	f1aa                	sd	a0,224(sp)
    80018162:	aa39                	j	80018280 <.LBB18_48+0x206>
                for i in 0..max {
    80018164:	0000                	unimp
    80018166:	7546                	ld	a0,112(sp)
    80018168:	75b2                	ld	a1,296(sp)
    8001816a:	e0ae                	sd	a1,64(sp)
    8001816c:	e72e                	sd	a1,392(sp)
    8001816e:	eb2e                	sd	a1,400(sp)
    80018170:	ef2e                	sd	a1,408(sp)
                        let src_ptr = s.offset(i as isize);
    80018172:	00007097          	auipc	ra,0x7
    80018176:	6ca080e7          	jalr	1738(ra) # 8001f83c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d562998c5c34b1bE>
    8001817a:	85aa                	mv	a1,a0
    8001817c:	e4ae                	sd	a1,72(sp)
    8001817e:	f32a                	sd	a0,416(sp)
    80018180:	a009                	j	80018182 <.LBB18_48+0x108>
                        let val = read(src_ptr); 
    80018182:	6526                	ld	a0,72(sp)
    80018184:	00000097          	auipc	ra,0x0
    80018188:	4b8080e7          	jalr	1208(ra) # 8001863c <_ZN4core3ptr4read17h018161c0cd37b3fbE>
    8001818c:	85aa                	mv	a1,a0
    8001818e:	fc2e                	sd	a1,56(sp)
    80018190:	1aa107a3          	sb	a0,431(sp)
    80018194:	a009                	j	80018196 <.LBB18_48+0x11c>
                        if val == 0 { return Ok(()) }
    80018196:	7562                	ld	a0,56(sp)
    80018198:	0ff57513          	andi	a0,a0,255
    8001819c:	4581                	li	a1,0
    8001819e:	00b51663          	bne	a0,a1,800181aa <.LBB18_48+0x130>
    800181a2:	a009                	j	800181a4 <.LBB18_48+0x12a>
    800181a4:	4501                	li	a0,0
    800181a6:	f1aa                	sd	a0,224(sp)
    800181a8:	a8e1                	j	80018280 <.LBB18_48+0x206>
                        let dst_ptr = dst.offset(i as isize);
    800181aa:	6586                	ld	a1,64(sp)
    800181ac:	650e                	ld	a0,192(sp)
    800181ae:	00007097          	auipc	ra,0x7
    800181b2:	5c0080e7          	jalr	1472(ra) # 8001f76e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb5f7a0f346747657E>
    800181b6:	85aa                	mv	a1,a0
    800181b8:	f82e                	sd	a1,48(sp)
    800181ba:	fb2a                	sd	a0,432(sp)
    800181bc:	a009                	j	800181be <.LBB18_48+0x144>
                        write(dst_ptr, val);
    800181be:	75e2                	ld	a1,56(sp)
    800181c0:	7542                	ld	a0,48(sp)
    800181c2:	00000097          	auipc	ra,0x0
    800181c6:	704080e7          	jalr	1796(ra) # 800188c6 <_ZN4core3ptr5write17h0fb1ba83ac2984c7E>
    800181ca:	a009                	j	800181cc <.LBB18_48+0x152>
                for i in 0..max {
    800181cc:	bf9d                	j	80018142 <.LBB18_48+0xc8>
            for i in 0..count {
    800181ce:	6566                	ld	a0,88(sp)
    800181d0:	65c6                	ld	a1,80(sp)
    800181d2:	e2ae                	sd	a1,320(sp)
    800181d4:	e6aa                	sd	a0,328(sp)
    800181d6:	a009                	j	800181d8 <.LBB18_48+0x15e>
    800181d8:	0288                	addi	a0,sp,320
    800181da:	00007097          	auipc	ra,0x7
    800181de:	6fa080e7          	jalr	1786(ra) # 8001f8d4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE>
    800181e2:	eaaa                	sd	a0,336(sp)
    800181e4:	eeae                	sd	a1,344(sp)
    800181e6:	a009                	j	800181e8 <.LBB18_48+0x16e>
    800181e8:	6556                	ld	a0,336(sp)
    800181ea:	4581                	li	a1,0
    800181ec:	00b50463          	beq	a0,a1,800181f4 <.LBB18_48+0x17a>
    800181f0:	a009                	j	800181f2 <.LBB18_48+0x178>
    800181f2:	a811                	j	80018206 <.LBB18_48+0x18c>
                    if src_val == 0 { return Ok(()) }
                    let dst_ptr = dst.offset(i as isize);
                    write(dst_ptr, src_val);
                }
            }
            max -= count;
    800181f4:	65ea                	ld	a1,152(sp)
    800181f6:	656e                	ld	a0,216(sp)
    800181f8:	40b505b3          	sub	a1,a0,a1
    800181fc:	f42e                	sd	a1,40(sp)
    800181fe:	10b56163          	bltu	a0,a1,80018300 <.LBB18_57>
    80018202:	a0b5                	j	8001826e <.LBB18_48+0x1f4>
            for i in 0..count {
    80018204:	0000                	unimp
    80018206:	7546                	ld	a0,112(sp)
    80018208:	65f6                	ld	a1,344(sp)
    8001820a:	ec2e                	sd	a1,24(sp)
    8001820c:	ff2e                	sd	a1,440(sp)
    8001820e:	e3ae                	sd	a1,448(sp)
    80018210:	e7ae                	sd	a1,456(sp)
                    let src_ptr = s.offset(i as isize);
    80018212:	00007097          	auipc	ra,0x7
    80018216:	62a080e7          	jalr	1578(ra) # 8001f83c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d562998c5c34b1bE>
    8001821a:	85aa                	mv	a1,a0
    8001821c:	f02e                	sd	a1,32(sp)
    8001821e:	ebaa                	sd	a0,464(sp)
    80018220:	a009                	j	80018222 <.LBB18_48+0x1a8>
                    let src_val = read(src_ptr); 
    80018222:	7502                	ld	a0,32(sp)
    80018224:	00000097          	auipc	ra,0x0
    80018228:	418080e7          	jalr	1048(ra) # 8001863c <_ZN4core3ptr4read17h018161c0cd37b3fbE>
    8001822c:	85aa                	mv	a1,a0
    8001822e:	e82e                	sd	a1,16(sp)
    80018230:	1ca10fa3          	sb	a0,479(sp)
    80018234:	a009                	j	80018236 <.LBB18_48+0x1bc>
                    if src_val == 0 { return Ok(()) }
    80018236:	6542                	ld	a0,16(sp)
    80018238:	0ff57513          	andi	a0,a0,255
    8001823c:	4581                	li	a1,0
    8001823e:	00b51663          	bne	a0,a1,8001824a <.LBB18_48+0x1d0>
    80018242:	a009                	j	80018244 <.LBB18_48+0x1ca>
    80018244:	4501                	li	a0,0
    80018246:	f1aa                	sd	a0,224(sp)
    80018248:	a825                	j	80018280 <.LBB18_48+0x206>
                    let dst_ptr = dst.offset(i as isize);
    8001824a:	65e2                	ld	a1,24(sp)
    8001824c:	650e                	ld	a0,192(sp)
    8001824e:	00007097          	auipc	ra,0x7
    80018252:	520080e7          	jalr	1312(ra) # 8001f76e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb5f7a0f346747657E>
    80018256:	85aa                	mv	a1,a0
    80018258:	e42e                	sd	a1,8(sp)
    8001825a:	f3aa                	sd	a0,480(sp)
    8001825c:	a009                	j	8001825e <.LBB18_48+0x1e4>
                    write(dst_ptr, src_val);
    8001825e:	65c2                	ld	a1,16(sp)
    80018260:	6522                	ld	a0,8(sp)
    80018262:	00000097          	auipc	ra,0x0
    80018266:	664080e7          	jalr	1636(ra) # 800188c6 <_ZN4core3ptr5write17h0fb1ba83ac2984c7E>
    8001826a:	a009                	j	8001826c <.LBB18_48+0x1f2>
            for i in 0..count {
    8001826c:	b7b5                	j	800181d8 <.LBB18_48+0x15e>
            max -= count;
    8001826e:	7522                	ld	a0,40(sp)
    80018270:	edaa                	sd	a0,216(sp)
    80018272:	1988                	addi	a0,sp,240
            va.add_page();
    80018274:	fffec097          	auipc	ra,0xfffec
    80018278:	7c0080e7          	jalr	1984(ra) # 80004a34 <_ZN6kernel6memory7address4Addr8add_page17hda9f7615eed2e36aE>
    8001827c:	a009                	j	8001827e <.LBB18_48+0x204>
        loop {
    8001827e:	b3dd                	j	80018064 <_ZN6kernel6memory7mapping10page_table9PageTable11copy_in_str17hce5a6c8720f87e9cE+0x2e>
        }
    }
    80018280:	750e                	ld	a0,224(sp)
    80018282:	75ae                	ld	a1,232(sp)
    80018284:	70be                	ld	ra,488(sp)
    80018286:	617d                	addi	sp,sp,496
    80018288:	8082                	ret

000000008001828a <.LBB18_49>:
            let count = PGSIZE - (src - va.as_usize());
    8001828a:	00012517          	auipc	a0,0x12
    8001828e:	f1650513          	addi	a0,a0,-234 # 8002a1a0 <str.1>

0000000080018292 <.LBB18_50>:
    80018292:	00012617          	auipc	a2,0x12
    80018296:	26660613          	addi	a2,a2,614 # 8002a4f8 <.L__unnamed_53>
    8001829a:	02100593          	li	a1,33
    8001829e:	0000a097          	auipc	ra,0xa
    800182a2:	fd8080e7          	jalr	-40(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

00000000800182a8 <.LBB18_51>:
    800182a8:	00012517          	auipc	a0,0x12
    800182ac:	ef850513          	addi	a0,a0,-264 # 8002a1a0 <str.1>

00000000800182b0 <.LBB18_52>:
    800182b0:	00012617          	auipc	a2,0x12
    800182b4:	26060613          	addi	a2,a2,608 # 8002a510 <.L__unnamed_54>
    800182b8:	02100593          	li	a1,33
    800182bc:	0000a097          	auipc	ra,0xa
    800182c0:	fba080e7          	jalr	-70(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

00000000800182c6 <.LBB18_53>:
            let s = (pa.as_usize() + (src - va.as_usize())) as *const u8;
    800182c6:	00012517          	auipc	a0,0x12
    800182ca:	eda50513          	addi	a0,a0,-294 # 8002a1a0 <str.1>

00000000800182ce <.LBB18_54>:
    800182ce:	00012617          	auipc	a2,0x12
    800182d2:	25a60613          	addi	a2,a2,602 # 8002a528 <.L__unnamed_55>
    800182d6:	02100593          	li	a1,33
    800182da:	0000a097          	auipc	ra,0xa
    800182de:	f9c080e7          	jalr	-100(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

00000000800182e4 <.LBB18_55>:
    800182e4:	00012517          	auipc	a0,0x12
    800182e8:	cfc50513          	addi	a0,a0,-772 # 80029fe0 <str.0>

00000000800182ec <.LBB18_56>:
    800182ec:	00012617          	auipc	a2,0x12
    800182f0:	25460613          	addi	a2,a2,596 # 8002a540 <.L__unnamed_56>
    800182f4:	45f1                	li	a1,28
    800182f6:	0000a097          	auipc	ra,0xa
    800182fa:	f80080e7          	jalr	-128(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080018300 <.LBB18_57>:
            max -= count;
    80018300:	00012517          	auipc	a0,0x12
    80018304:	ea050513          	addi	a0,a0,-352 # 8002a1a0 <str.1>

0000000080018308 <.LBB18_58>:
    80018308:	00012617          	auipc	a2,0x12
    8001830c:	25060613          	addi	a2,a2,592 # 8002a558 <.L__unnamed_57>
    80018310:	02100593          	li	a1,33
    80018314:	0000a097          	auipc	ra,0xa
    80018318:	f62080e7          	jalr	-158(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel6memory7mapping10page_table9PageTable19proc_free_pagetable17h67102aea540089c1E:

000000008001831e <_ZN6kernel6memory7mapping10page_table9PageTable19proc_free_pagetable17h67102aea540089c1E>:


    /// Free a process's page table, and free the
    /// physical memory it refers to.
    pub fn proc_free_pagetable(&mut self, size: usize) {
    8001831e:	7139                	addi	sp,sp,-64
    80018320:	fc06                	sd	ra,56(sp)
    80018322:	e82e                	sd	a1,16(sp)
    80018324:	ec2a                	sd	a0,24(sp)
    80018326:	f42a                	sd	a0,40(sp)
    80018328:	f82e                	sd	a1,48(sp)
    8001832a:	04000537          	lui	a0,0x4000
    8001832e:	357d                	addiw	a0,a0,-1
    80018330:	0532                	slli	a0,a0,0xc
        self.uvm_unmap(
            VirtualAddress::new(TRAMPOLINE ), 
    80018332:	ffff9097          	auipc	ra,0xffff9
    80018336:	52e080e7          	jalr	1326(ra) # 80011860 <_ZN6kernel6memory7address14VirtualAddress3new17h716be423461f1938E>
    8001833a:	f02a                	sd	a0,32(sp)
    8001833c:	a009                	j	8001833e <_ZN6kernel6memory7mapping10page_table9PageTable19proc_free_pagetable17h67102aea540089c1E+0x20>
        self.uvm_unmap(
    8001833e:	7582                	ld	a1,32(sp)
    80018340:	6562                	ld	a0,24(sp)
    80018342:	4605                	li	a2,1
    80018344:	4681                	li	a3,0
    80018346:	fffff097          	auipc	ra,0xfffff
    8001834a:	4e0080e7          	jalr	1248(ra) # 80017826 <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_unmap17hab395d2793038c03E>
    8001834e:	a009                	j	80018350 <_ZN6kernel6memory7mapping10page_table9PageTable19proc_free_pagetable17h67102aea540089c1E+0x32>
    80018350:	02000537          	lui	a0,0x2000
    80018354:	357d                	addiw	a0,a0,-1
    80018356:	0536                	slli	a0,a0,0xd
            1, 
            false
        );

        self.uvm_unmap(
            VirtualAddress::new(TRAPFRAME),
    80018358:	ffff9097          	auipc	ra,0xffff9
    8001835c:	508080e7          	jalr	1288(ra) # 80011860 <_ZN6kernel6memory7address14VirtualAddress3new17h716be423461f1938E>
    80018360:	e42a                	sd	a0,8(sp)
    80018362:	a009                	j	80018364 <_ZN6kernel6memory7mapping10page_table9PageTable19proc_free_pagetable17h67102aea540089c1E+0x46>
        self.uvm_unmap(
    80018364:	65a2                	ld	a1,8(sp)
    80018366:	6562                	ld	a0,24(sp)
    80018368:	4605                	li	a2,1
    8001836a:	4681                	li	a3,0
    8001836c:	fffff097          	auipc	ra,0xfffff
    80018370:	4ba080e7          	jalr	1210(ra) # 80017826 <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_unmap17hab395d2793038c03E>
    80018374:	a009                	j	80018376 <_ZN6kernel6memory7mapping10page_table9PageTable19proc_free_pagetable17h67102aea540089c1E+0x58>
            1,
            false
        );

        self.uvm_free(size);
    80018376:	65c2                	ld	a1,16(sp)
    80018378:	6562                	ld	a0,24(sp)
    8001837a:	fffff097          	auipc	ra,0xfffff
    8001837e:	36a080e7          	jalr	874(ra) # 800176e4 <_ZN6kernel6memory7mapping10page_table9PageTable8uvm_free17h541177c5e75f280dE>
    80018382:	a009                	j	80018384 <_ZN6kernel6memory7mapping10page_table9PageTable19proc_free_pagetable17h67102aea540089c1E+0x66>
        // self.free();
    }
    80018384:	70e2                	ld	ra,56(sp)
    80018386:	6121                	addi	sp,sp,64
    80018388:	8082                	ret

Disassembly of section .text._ZN4core3str21_$LT$impl$u20$str$GT$5bytes17h8801f19f835ac923E:

000000008001838a <_ZN4core3str21_$LT$impl$u20$str$GT$5bytes17h8801f19f835ac923E>:
    ///
    /// assert_eq!(None, bytes.next());
    /// ```
    #[stable(feature = "rust1", since = "1.0.0")]
    #[inline]
    pub fn bytes(&self) -> Bytes<'_> {
    8001838a:	7119                	addi	sp,sp,-128
    8001838c:	fc86                	sd	ra,120(sp)
    8001838e:	e4aa                	sd	a0,72(sp)
    80018390:	e8ae                	sd	a1,80(sp)
    80018392:	ecaa                	sd	a0,88(sp)
    80018394:	f0ae                	sd	a1,96(sp)
        unsafe { mem::transmute(self) }
    80018396:	f4aa                	sd	a0,104(sp)
    80018398:	f8ae                	sd	a1,112(sp)
        Bytes(self.as_bytes().iter().copied())
    8001839a:	f42a                	sd	a0,40(sp)
    8001839c:	f82e                	sd	a1,48(sp)
    8001839e:	a009                	j	800183a0 <_ZN4core3str21_$LT$impl$u20$str$GT$5bytes17h8801f19f835ac923E+0x16>
    800183a0:	75c2                	ld	a1,48(sp)
    800183a2:	7522                	ld	a0,40(sp)
    800183a4:	00007097          	auipc	ra,0x7
    800183a8:	258080e7          	jalr	600(ra) # 8001f5fc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h8f308ca2182773f1E>
    800183ac:	ec2a                	sd	a0,24(sp)
    800183ae:	f02e                	sd	a1,32(sp)
    800183b0:	a009                	j	800183b2 <_ZN4core3str21_$LT$impl$u20$str$GT$5bytes17h8801f19f835ac923E+0x28>
    800183b2:	7582                	ld	a1,32(sp)
    800183b4:	6562                	ld	a0,24(sp)
    800183b6:	ffff3097          	auipc	ra,0xffff3
    800183ba:	870080e7          	jalr	-1936(ra) # 8000ac26 <_ZN4core4iter6traits8iterator8Iterator6copied17hc4f54d9039c4545bE>
    800183be:	e42a                	sd	a0,8(sp)
    800183c0:	e82e                	sd	a1,16(sp)
    800183c2:	a009                	j	800183c4 <_ZN4core3str21_$LT$impl$u20$str$GT$5bytes17h8801f19f835ac923E+0x3a>
    800183c4:	65c2                	ld	a1,16(sp)
    800183c6:	6522                	ld	a0,8(sp)
    800183c8:	fc2a                	sd	a0,56(sp)
    800183ca:	e0ae                	sd	a1,64(sp)
    }
    800183cc:	70e6                	ld	ra,120(sp)
    800183ce:	6109                	addi	sp,sp,128
    800183d0:	8082                	ret

Disassembly of section .text._ZN4core3str21_$LT$impl$u20$str$GT$5chars17h18a0dd289a8edb0cE:

00000000800183d2 <_ZN4core3str21_$LT$impl$u20$str$GT$5chars17h18a0dd289a8edb0cE>:
    pub fn chars(&self) -> Chars<'_> {
    800183d2:	7159                	addi	sp,sp,-112
    800183d4:	f486                	sd	ra,104(sp)
    800183d6:	fc2a                	sd	a0,56(sp)
    800183d8:	e0ae                	sd	a1,64(sp)
    800183da:	e4aa                	sd	a0,72(sp)
    800183dc:	e8ae                	sd	a1,80(sp)
        unsafe { mem::transmute(self) }
    800183de:	ecaa                	sd	a0,88(sp)
    800183e0:	f0ae                	sd	a1,96(sp)
        Chars { iter: self.as_bytes().iter() }
    800183e2:	ec2a                	sd	a0,24(sp)
    800183e4:	f02e                	sd	a1,32(sp)
    800183e6:	a009                	j	800183e8 <_ZN4core3str21_$LT$impl$u20$str$GT$5chars17h18a0dd289a8edb0cE+0x16>
    800183e8:	7582                	ld	a1,32(sp)
    800183ea:	6562                	ld	a0,24(sp)
    800183ec:	00007097          	auipc	ra,0x7
    800183f0:	210080e7          	jalr	528(ra) # 8001f5fc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h8f308ca2182773f1E>
    800183f4:	e42a                	sd	a0,8(sp)
    800183f6:	e82e                	sd	a1,16(sp)
    800183f8:	a009                	j	800183fa <_ZN4core3str21_$LT$impl$u20$str$GT$5chars17h18a0dd289a8edb0cE+0x28>
    800183fa:	65c2                	ld	a1,16(sp)
    800183fc:	6522                	ld	a0,8(sp)
    800183fe:	f42a                	sd	a0,40(sp)
    80018400:	f82e                	sd	a1,48(sp)
    }
    80018402:	70a6                	ld	ra,104(sp)
    80018404:	6165                	addi	sp,sp,112
    80018406:	8082                	ret

Disassembly of section .text._ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h399b117e49285f4dE:

0000000080018408 <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h399b117e49285f4dE>:
    pub const fn as_ptr(&self) -> *const u8 {
    80018408:	1141                	addi	sp,sp,-16
    8001840a:	e02a                	sd	a0,0(sp)
    8001840c:	e42e                	sd	a1,8(sp)
    }
    8001840e:	0141                	addi	sp,sp,16
    80018410:	8082                	ret

Disassembly of section .text._ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h0c893863451e03beE:

0000000080018412 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h0c893863451e03beE>:
    80018412:	1101                	addi	sp,sp,-32
    80018414:	ec06                	sd	ra,24(sp)
    80018416:	e42a                	sd	a0,8(sp)
    80018418:	e82e                	sd	a1,16(sp)
    8001841a:	6108                	ld	a0,0(a0)
    8001841c:	ffff0097          	auipc	ra,0xffff0
    80018420:	ec4080e7          	jalr	-316(ra) # 800082e0 <_ZN66_$LT$kernel..fs..dinode..InodeType$u20$as$u20$core..fmt..Debug$GT$3fmt17h43e6a048c6ad07fbE>
    80018424:	e02a                	sd	a0,0(sp)
    80018426:	a009                	j	80018428 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h0c893863451e03beE+0x16>
    80018428:	6502                	ld	a0,0(sp)
    8001842a:	60e2                	ld	ra,24(sp)
    8001842c:	6105                	addi	sp,sp,32
    8001842e:	8082                	ret

Disassembly of section .text._ZN4core3cmp9PartialEq2ne17h733d64bbe9421100E:

0000000080018430 <_ZN4core3cmp9PartialEq2ne17h733d64bbe9421100E>:

    /// This method tests for `!=`.
    #[inline]
    #[must_use]
    #[stable(feature = "rust1", since = "1.0.0")]
    fn ne(&self, other: &Rhs) -> bool {
    80018430:	1101                	addi	sp,sp,-32
    80018432:	ec06                	sd	ra,24(sp)
    80018434:	e42a                	sd	a0,8(sp)
    80018436:	e82e                	sd	a1,16(sp)
        !self.eq(other)
    80018438:	ffff0097          	auipc	ra,0xffff0
    8001843c:	f8a080e7          	jalr	-118(ra) # 800083c2 <_ZN70_$LT$kernel..fs..dinode..InodeType$u20$as$u20$core..cmp..PartialEq$GT$2eq17ha4431a2c7299d33fE>
    80018440:	e02a                	sd	a0,0(sp)
    80018442:	a009                	j	80018444 <_ZN4core3cmp9PartialEq2ne17h733d64bbe9421100E+0x14>
    80018444:	6502                	ld	a0,0(sp)
    80018446:	00154513          	xori	a0,a0,1
    }
    8001844a:	60e2                	ld	ra,24(sp)
    8001844c:	6105                	addi	sp,sp,32
    8001844e:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hf7573a6302c08e61E:

0000000080018450 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hf7573a6302c08e61E>:
    pub const unsafe fn offset(self, count: isize) -> *mut T
    80018450:	1101                	addi	sp,sp,-32
    80018452:	e42a                	sd	a0,8(sp)
    80018454:	e82e                	sd	a1,16(sp)
        unsafe { intrinsics::offset(self, count) as *mut T }
    80018456:	059a                	slli	a1,a1,0x6
    80018458:	952e                	add	a0,a0,a1
    8001845a:	e02a                	sd	a0,0(sp)
    8001845c:	ec2a                	sd	a0,24(sp)
    8001845e:	a009                	j	80018460 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hf7573a6302c08e61E+0x10>
    }
    80018460:	6502                	ld	a0,0(sp)
    80018462:	6105                	addi	sp,sp,32
    80018464:	8082                	ret

Disassembly of section .text._ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hb9f56331d13383c1E:

0000000080018466 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hb9f56331d13383c1E>:
    pub const unsafe fn offset(self, count: isize) -> *const T
    80018466:	1101                	addi	sp,sp,-32
    80018468:	e42a                	sd	a0,8(sp)
    8001846a:	e82e                	sd	a1,16(sp)
        unsafe { intrinsics::offset(self, count) }
    8001846c:	059a                	slli	a1,a1,0x6
    8001846e:	952e                	add	a0,a0,a1
    80018470:	e02a                	sd	a0,0(sp)
    80018472:	ec2a                	sd	a0,24(sp)
    80018474:	a009                	j	80018476 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hb9f56331d13383c1E+0x10>
    }
    80018476:	6502                	ld	a0,0(sp)
    80018478:	6105                	addi	sp,sp,32
    8001847a:	8082                	ret

Disassembly of section .text._ZN4core3num7nonzero12NonZeroUsize13new_unchecked17h04f2481c8bf8ee85E:

000000008001847c <_ZN4core3num7nonzero12NonZeroUsize13new_unchecked17h04f2481c8bf8ee85E>:
                ///
                /// The value must not be zero.
                #[$stability]
                #[rustc_const_stable(feature = "nonzero", since = "1.34.0")]
                #[inline]
                pub const unsafe fn new_unchecked(n: $Int) -> Self {
    8001847c:	1141                	addi	sp,sp,-16
    8001847e:	e42a                	sd	a0,8(sp)
                    // SAFETY: this is guaranteed to be safe by the caller.
                    unsafe { Self(n) }
    80018480:	e02a                	sd	a0,0(sp)
                }
    80018482:	0141                	addi	sp,sp,16
    80018484:	8082                	ret

Disassembly of section .text._ZN4core3num7nonzero12NonZeroUsize3get17h9c9882678da2bc98E:

0000000080018486 <_ZN4core3num7nonzero12NonZeroUsize3get17h9c9882678da2bc98E>:

                /// Returns the value as a primitive type.
                #[$stability]
                #[inline]
                #[rustc_const_stable(feature = "nonzero", since = "1.34.0")]
                pub const fn get(self) -> $Int {
    80018486:	1141                	addi	sp,sp,-16
    80018488:	e42a                	sd	a0,8(sp)
                    self.0
                }
    8001848a:	0141                	addi	sp,sp,16
    8001848c:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv4qemu2fs8OpenMode4mode17h15bbb1ea8002b902E:

000000008001848e <_ZN6kernel4arch5riscv4qemu2fs8OpenMode4mode17h15bbb1ea8002b902E>:
   TRUNC = 0x400,
   INVALID
}

impl OpenMode {
    pub fn mode(item: usize) -> Self {
    8001848e:	1101                	addi	sp,sp,-32
    80018490:	e42a                	sd	a0,8(sp)
    80018492:	ec2a                	sd	a0,24(sp)
    80018494:	4581                	li	a1,0
        match item {
            0x000 => { Self::RDONLY },
    80018496:	02b50d63          	beq	a0,a1,800184d0 <_ZN6kernel4arch5riscv4qemu2fs8OpenMode4mode17h15bbb1ea8002b902E+0x42>
    8001849a:	a009                	j	8001849c <_ZN6kernel4arch5riscv4qemu2fs8OpenMode4mode17h15bbb1ea8002b902E+0xe>
    8001849c:	6522                	ld	a0,8(sp)
    8001849e:	4585                	li	a1,1
    800184a0:	02b50b63          	beq	a0,a1,800184d6 <_ZN6kernel4arch5riscv4qemu2fs8OpenMode4mode17h15bbb1ea8002b902E+0x48>
    800184a4:	a009                	j	800184a6 <_ZN6kernel4arch5riscv4qemu2fs8OpenMode4mode17h15bbb1ea8002b902E+0x18>
    800184a6:	6522                	ld	a0,8(sp)
    800184a8:	4589                	li	a1,2
    800184aa:	02b50963          	beq	a0,a1,800184dc <_ZN6kernel4arch5riscv4qemu2fs8OpenMode4mode17h15bbb1ea8002b902E+0x4e>
    800184ae:	a009                	j	800184b0 <_ZN6kernel4arch5riscv4qemu2fs8OpenMode4mode17h15bbb1ea8002b902E+0x22>
    800184b0:	6522                	ld	a0,8(sp)
    800184b2:	20000593          	li	a1,512
    800184b6:	02b50663          	beq	a0,a1,800184e2 <_ZN6kernel4arch5riscv4qemu2fs8OpenMode4mode17h15bbb1ea8002b902E+0x54>
    800184ba:	a009                	j	800184bc <_ZN6kernel4arch5riscv4qemu2fs8OpenMode4mode17h15bbb1ea8002b902E+0x2e>
    800184bc:	6522                	ld	a0,8(sp)
    800184be:	40000593          	li	a1,1024
    800184c2:	02b50463          	beq	a0,a1,800184ea <_ZN6kernel4arch5riscv4qemu2fs8OpenMode4mode17h15bbb1ea8002b902E+0x5c>
    800184c6:	a009                	j	800184c8 <_ZN6kernel4arch5riscv4qemu2fs8OpenMode4mode17h15bbb1ea8002b902E+0x3a>
    800184c8:	40100513          	li	a0,1025
            0x001 => { Self::WRONLY },
            0x002 => { Self::RDWR },
            0x200 => { Self::CREATE },
            0x400 => { Self::TRUNC },
            _ => {Self::INVALID}
    800184cc:	e82a                	sd	a0,16(sp)
        match item {
    800184ce:	a015                	j	800184f2 <_ZN6kernel4arch5riscv4qemu2fs8OpenMode4mode17h15bbb1ea8002b902E+0x64>
    800184d0:	4501                	li	a0,0
            0x000 => { Self::RDONLY },
    800184d2:	e82a                	sd	a0,16(sp)
        match item {
    800184d4:	a839                	j	800184f2 <_ZN6kernel4arch5riscv4qemu2fs8OpenMode4mode17h15bbb1ea8002b902E+0x64>
    800184d6:	4505                	li	a0,1
            0x001 => { Self::WRONLY },
    800184d8:	e82a                	sd	a0,16(sp)
        match item {
    800184da:	a821                	j	800184f2 <_ZN6kernel4arch5riscv4qemu2fs8OpenMode4mode17h15bbb1ea8002b902E+0x64>
    800184dc:	4509                	li	a0,2
            0x002 => { Self::RDWR },
    800184de:	e82a                	sd	a0,16(sp)
        match item {
    800184e0:	a809                	j	800184f2 <_ZN6kernel4arch5riscv4qemu2fs8OpenMode4mode17h15bbb1ea8002b902E+0x64>
    800184e2:	20000513          	li	a0,512
            0x200 => { Self::CREATE },
    800184e6:	e82a                	sd	a0,16(sp)
        match item {
    800184e8:	a029                	j	800184f2 <_ZN6kernel4arch5riscv4qemu2fs8OpenMode4mode17h15bbb1ea8002b902E+0x64>
    800184ea:	40000513          	li	a0,1024
            0x400 => { Self::TRUNC },
    800184ee:	e82a                	sd	a0,16(sp)
        match item {
    800184f0:	a009                	j	800184f2 <_ZN6kernel4arch5riscv4qemu2fs8OpenMode4mode17h15bbb1ea8002b902E+0x64>
        }
    }
    800184f2:	6542                	ld	a0,16(sp)
    800184f4:	6105                	addi	sp,sp,32
    800184f6:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register10sfence_vma17h7533c6c75a9febaaE:

00000000800184f8 <_ZN6kernel4arch5riscv8register10sfence_vma17h7533c6c75a9febaaE>:
pub mod clint;


#[inline]
// flush the TLB.
pub unsafe fn sfence_vma(){
    800184f8:	7159                	addi	sp,sp,-112
    println!("flush the TLB");
    800184fa:	f486                	sd	ra,104(sp)

00000000800184fc <.LBB0_5>:
    800184fc:	00012597          	auipc	a1,0x12
    80018500:	08458593          	addi	a1,a1,132 # 8002a580 <.L__unnamed_1>

0000000080018504 <.LBB0_6>:
    80018504:	00012697          	auipc	a3,0x12
    80018508:	08c68693          	addi	a3,a3,140 # 8002a590 <.L__unnamed_5>
    8001850c:	0028                	addi	a0,sp,8
    8001850e:	4605                	li	a2,1
    80018510:	4701                	li	a4,0
    80018512:	fffed097          	auipc	ra,0xfffed
    80018516:	f58080e7          	jalr	-168(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8001851a:	a009                	j	8001851c <.LBB0_6+0x18>
    8001851c:	0028                	addi	a0,sp,8
    8001851e:	00006097          	auipc	ra,0x6
    80018522:	82e080e7          	jalr	-2002(ra) # 8001dd4c <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    80018526:	a009                	j	80018528 <.LBB0_6+0x24>
    llvm_asm!("sfence.vma zero, zero"::::"volatile");
    80018528:	12000073          	sfence.vma

000000008001852c <.LBB0_7>:
    println!("finish sfence vma");
    8001852c:	00012597          	auipc	a1,0x12
    80018530:	07c58593          	addi	a1,a1,124 # 8002a5a8 <.L__unnamed_3>

0000000080018534 <.LBB0_8>:
    80018534:	00012697          	auipc	a3,0x12
    80018538:	05c68693          	addi	a3,a3,92 # 8002a590 <.L__unnamed_5>
    8001853c:	1828                	addi	a0,sp,56
    8001853e:	4605                	li	a2,1
    80018540:	4701                	li	a4,0
    80018542:	fffed097          	auipc	ra,0xfffed
    80018546:	f28080e7          	jalr	-216(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8001854a:	a009                	j	8001854c <.LBB0_8+0x18>
    8001854c:	1828                	addi	a0,sp,56
    8001854e:	00005097          	auipc	ra,0x5
    80018552:	7fe080e7          	jalr	2046(ra) # 8001dd4c <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    80018556:	a009                	j	80018558 <.LBB0_8+0x24>
    80018558:	70a6                	ld	ra,104(sp)
    8001855a:	6165                	addi	sp,sp,112
    8001855c:	8082                	ret

Disassembly of section .text._ZN4core3ptr13read_volatile17h0ae297fe3f24e4caE:

000000008001855e <_ZN4core3ptr13read_volatile17h0ae297fe3f24e4caE>:
///     assert_eq!(std::ptr::read_volatile(y), 12);
/// }
/// ```
#[inline]
#[stable(feature = "volatile", since = "1.9.0")]
pub unsafe fn read_volatile<T>(src: *const T) -> T {
    8001855e:	1101                	addi	sp,sp,-32
    80018560:	e82a                	sd	a0,16(sp)
    if cfg!(debug_assertions) && !is_aligned_and_not_null(src) {
        // Not panicking to keep codegen impact smaller.
        abort();
    }
    // SAFETY: the caller must uphold the safety contract for `volatile_load`.
    unsafe { intrinsics::volatile_load(src) }
    80018562:	00056503          	lwu	a0,0(a0) # 2000000 <.Lline_table_start0+0x1fc94fe>
    80018566:	e42a                	sd	a0,8(sp)
    80018568:	ce2a                	sw	a0,28(sp)
    8001856a:	a009                	j	8001856c <_ZN4core3ptr13read_volatile17h0ae297fe3f24e4caE+0xe>
}
    8001856c:	6522                	ld	a0,8(sp)
    8001856e:	6105                	addi	sp,sp,32
    80018570:	8082                	ret

Disassembly of section .text._ZN4core3ptr13read_volatile17h48a61fef837248f4E:

0000000080018572 <_ZN4core3ptr13read_volatile17h48a61fef837248f4E>:
pub unsafe fn read_volatile<T>(src: *const T) -> T {
    80018572:	1101                	addi	sp,sp,-32
    80018574:	e82a                	sd	a0,16(sp)
    unsafe { intrinsics::volatile_load(src) }
    80018576:	00054503          	lbu	a0,0(a0)
    8001857a:	e42a                	sd	a0,8(sp)
    8001857c:	00a10fa3          	sb	a0,31(sp)
    80018580:	a009                	j	80018582 <_ZN4core3ptr13read_volatile17h48a61fef837248f4E+0x10>
}
    80018582:	6522                	ld	a0,8(sp)
    80018584:	6105                	addi	sp,sp,32
    80018586:	8082                	ret

Disassembly of section .text._ZN4core3ptr13read_volatile17h53ed030574802bd4E:

0000000080018588 <_ZN4core3ptr13read_volatile17h53ed030574802bd4E>:
pub unsafe fn read_volatile<T>(src: *const T) -> T {
    80018588:	1101                	addi	sp,sp,-32
    8001858a:	e82a                	sd	a0,16(sp)
    unsafe { intrinsics::volatile_load(src) }
    8001858c:	6108                	ld	a0,0(a0)
    8001858e:	e42a                	sd	a0,8(sp)
    80018590:	ec2a                	sd	a0,24(sp)
    80018592:	a009                	j	80018594 <_ZN4core3ptr13read_volatile17h53ed030574802bd4E+0xc>
}
    80018594:	6522                	ld	a0,8(sp)
    80018596:	6105                	addi	sp,sp,32
    80018598:	8082                	ret

Disassembly of section .text._ZN4core3ptr14write_volatile17h1c498a4c32cde7d4E:

000000008001859a <_ZN4core3ptr14write_volatile17h1c498a4c32cde7d4E>:
///     assert_eq!(std::ptr::read_volatile(y), 12);
/// }
/// ```
#[inline]
#[stable(feature = "volatile", since = "1.9.0")]
pub unsafe fn write_volatile<T>(dst: *mut T, src: T) {
    8001859a:	1141                	addi	sp,sp,-16
    8001859c:	e02a                	sd	a0,0(sp)
    8001859e:	c62e                	sw	a1,12(sp)
        // Not panicking to keep codegen impact smaller.
        abort();
    }
    // SAFETY: the caller must uphold the safety contract for `volatile_store`.
    unsafe {
        intrinsics::volatile_store(dst, src);
    800185a0:	c10c                	sw	a1,0(a0)
    800185a2:	a009                	j	800185a4 <_ZN4core3ptr14write_volatile17h1c498a4c32cde7d4E+0xa>
    }
}
    800185a4:	0141                	addi	sp,sp,16
    800185a6:	8082                	ret

Disassembly of section .text._ZN4core3ptr14write_volatile17h935b49f1a63f6714E:

00000000800185a8 <_ZN4core3ptr14write_volatile17h935b49f1a63f6714E>:
pub unsafe fn write_volatile<T>(dst: *mut T, src: T) {
    800185a8:	1141                	addi	sp,sp,-16
    800185aa:	e02a                	sd	a0,0(sp)
    800185ac:	e42e                	sd	a1,8(sp)
        intrinsics::volatile_store(dst, src);
    800185ae:	e10c                	sd	a1,0(a0)
    800185b0:	a009                	j	800185b2 <_ZN4core3ptr14write_volatile17h935b49f1a63f6714E+0xa>
}
    800185b2:	0141                	addi	sp,sp,16
    800185b4:	8082                	ret

Disassembly of section .text._ZN4core3ptr14write_volatile17ha922d8ced3e01de5E:

00000000800185b6 <_ZN4core3ptr14write_volatile17ha922d8ced3e01de5E>:
pub unsafe fn write_volatile<T>(dst: *mut T, src: T) {
    800185b6:	1141                	addi	sp,sp,-16
    800185b8:	e02a                	sd	a0,0(sp)
    800185ba:	00b107a3          	sb	a1,15(sp)
        intrinsics::volatile_store(dst, src);
    800185be:	00b50023          	sb	a1,0(a0)
    800185c2:	a009                	j	800185c4 <_ZN4core3ptr14write_volatile17ha922d8ced3e01de5E+0xe>
}
    800185c4:	0141                	addi	sp,sp,16
    800185c6:	8082                	ret

Disassembly of section .text._ZN4core3ptr20slice_from_raw_parts17h19b34a977b1709d3E:

00000000800185c8 <_ZN4core3ptr20slice_from_raw_parts17h19b34a977b1709d3E>:
pub const fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {
    800185c8:	7139                	addi	sp,sp,-64
    800185ca:	fc06                	sd	ra,56(sp)
    800185cc:	ec2e                	sd	a1,24(sp)
    800185ce:	f42a                	sd	a0,40(sp)
    800185d0:	f82e                	sd	a1,48(sp)
    from_raw_parts(data.cast(), len)
    800185d2:	fffec097          	auipc	ra,0xfffec
    800185d6:	270080e7          	jalr	624(ra) # 80004842 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4cast17he44352a5ab45ee06E>
    800185da:	f02a                	sd	a0,32(sp)
    800185dc:	a009                	j	800185de <_ZN4core3ptr20slice_from_raw_parts17h19b34a977b1709d3E+0x16>
    800185de:	65e2                	ld	a1,24(sp)
    800185e0:	7502                	ld	a0,32(sp)
    800185e2:	00003097          	auipc	ra,0x3
    800185e6:	ad8080e7          	jalr	-1320(ra) # 8001b0ba <_ZN4core3ptr8metadata14from_raw_parts17hb35c9d87c96e1656E>
    800185ea:	e42a                	sd	a0,8(sp)
    800185ec:	e82e                	sd	a1,16(sp)
    800185ee:	a009                	j	800185f0 <_ZN4core3ptr20slice_from_raw_parts17h19b34a977b1709d3E+0x28>
}
    800185f0:	65c2                	ld	a1,16(sp)
    800185f2:	6522                	ld	a0,8(sp)
    800185f4:	70e2                	ld	ra,56(sp)
    800185f6:	6121                	addi	sp,sp,64
    800185f8:	8082                	ret

Disassembly of section .text._ZN4core3ptr20slice_from_raw_parts17h4c1ee3b844c20623E:

00000000800185fa <_ZN4core3ptr20slice_from_raw_parts17h4c1ee3b844c20623E>:
pub const fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {
    800185fa:	7139                	addi	sp,sp,-64
    800185fc:	fc06                	sd	ra,56(sp)
    800185fe:	ec2e                	sd	a1,24(sp)
    80018600:	f42a                	sd	a0,40(sp)
    80018602:	f82e                	sd	a1,48(sp)
    from_raw_parts(data.cast(), len)
    80018604:	fffec097          	auipc	ra,0xfffec
    80018608:	236080e7          	jalr	566(ra) # 8000483a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4cast17h03bc1f4ed09a4b3cE>
    8001860c:	f02a                	sd	a0,32(sp)
    8001860e:	a009                	j	80018610 <_ZN4core3ptr20slice_from_raw_parts17h4c1ee3b844c20623E+0x16>
    80018610:	65e2                	ld	a1,24(sp)
    80018612:	7502                	ld	a0,32(sp)
    80018614:	00003097          	auipc	ra,0x3
    80018618:	ab8080e7          	jalr	-1352(ra) # 8001b0cc <_ZN4core3ptr8metadata14from_raw_parts17hd9330322b61d2f92E>
    8001861c:	e42a                	sd	a0,8(sp)
    8001861e:	e82e                	sd	a1,16(sp)
    80018620:	a009                	j	80018622 <_ZN4core3ptr20slice_from_raw_parts17h4c1ee3b844c20623E+0x28>
}
    80018622:	65c2                	ld	a1,16(sp)
    80018624:	6522                	ld	a0,8(sp)
    80018626:	70e2                	ld	ra,56(sp)
    80018628:	6121                	addi	sp,sp,64
    8001862a:	8082                	ret

Disassembly of section .text._ZN4core3ptr2eq17h2ab91a60e465e9ebE:

000000008001862c <_ZN4core3ptr2eq17h2ab91a60e465e9ebE>:
///     &wrapper.member as &dyn Trait as *const dyn Trait as *const u8,
/// ));
/// ```
#[stable(feature = "ptr_eq", since = "1.17.0")]
#[inline]
pub fn eq<T: ?Sized>(a: *const T, b: *const T) -> bool {
    8001862c:	1141                	addi	sp,sp,-16
    8001862e:	e02a                	sd	a0,0(sp)
    80018630:	e42e                	sd	a1,8(sp)
    a == b
    80018632:	8d2d                	xor	a0,a0,a1
    80018634:	00153513          	seqz	a0,a0
}
    80018638:	0141                	addi	sp,sp,16
    8001863a:	8082                	ret

Disassembly of section .text._ZN4core3ptr4read17h018161c0cd37b3fbE:

000000008001863c <_ZN4core3ptr4read17h018161c0cd37b3fbE>:
pub const unsafe fn read<T>(src: *const T) -> T {
    8001863c:	7179                	addi	sp,sp,-48
    8001863e:	e42a                	sd	a0,8(sp)
    80018640:	ec2a                	sd	a0,24(sp)
    #[rustc_const_stable(feature = "const_maybe_uninit", since = "1.36.0")]
    #[inline(always)]
    #[rustc_diagnostic_item = "maybe_uninit_uninit"]
    pub const fn uninit() -> MaybeUninit<T> {
        MaybeUninit { uninit: () }
    }
    80018642:	02510503          	lb	a0,37(sp)
    let mut tmp = MaybeUninit::<T>::uninit();
    80018646:	00a10ba3          	sb	a0,23(sp)
    8001864a:	a009                	j	8001864c <_ZN4core3ptr4read17h018161c0cd37b3fbE+0x10>
    8001864c:	01710513          	addi	a0,sp,23
    80018650:	f42a                	sd	a0,40(sp)
        copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
    80018652:	a009                	j	80018654 <_ZN4core3ptr4read17h018161c0cd37b3fbE+0x18>
    80018654:	6522                	ld	a0,8(sp)
    80018656:	00054503          	lbu	a0,0(a0)
    8001865a:	e02a                	sd	a0,0(sp)
    8001865c:	00a10ba3          	sb	a0,23(sp)
    80018660:	02a10323          	sb	a0,38(sp)
    80018664:	02a103a3          	sb	a0,39(sp)
        tmp.assume_init()
    80018668:	a009                	j	8001866a <_ZN4core3ptr4read17h018161c0cd37b3fbE+0x2e>
}
    8001866a:	6502                	ld	a0,0(sp)
    8001866c:	6145                	addi	sp,sp,48
    8001866e:	8082                	ret

Disassembly of section .text._ZN4core3ptr4read17h260501ac2ae68563E:

0000000080018670 <_ZN4core3ptr4read17h260501ac2ae68563E>:
pub const unsafe fn read<T>(src: *const T) -> T {
    80018670:	7159                	addi	sp,sp,-112
    80018672:	e42e                	sd	a1,8(sp)
    80018674:	e82a                	sd	a0,16(sp)
    80018676:	e4ae                	sd	a1,72(sp)
    let mut tmp = MaybeUninit::<T>::uninit();
    80018678:	a009                	j	8001867a <_ZN4core3ptr4read17h260501ac2ae68563E+0xa>
    8001867a:	0828                	addi	a0,sp,24
    8001867c:	e02a                	sd	a0,0(sp)
    8001867e:	f4aa                	sd	a0,104(sp)
        copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
    80018680:	a009                	j	80018682 <_ZN4core3ptr4read17h260501ac2ae68563E+0x12>
    80018682:	65c2                	ld	a1,16(sp)
    80018684:	6602                	ld	a2,0(sp)
    80018686:	6522                	ld	a0,8(sp)
    80018688:	6914                	ld	a3,16(a0)
    8001868a:	ea14                	sd	a3,16(a2)
    8001868c:	6514                	ld	a3,8(a0)
    8001868e:	e614                	sd	a3,8(a2)
    80018690:	6108                	ld	a0,0(a0)
    80018692:	e208                	sd	a0,0(a2)
        tmp.assume_init()
    80018694:	76a2                	ld	a3,40(sp)
    80018696:	e0b6                	sd	a3,64(sp)
    80018698:	7602                	ld	a2,32(sp)
    8001869a:	fc32                	sd	a2,56(sp)
    8001869c:	6562                	ld	a0,24(sp)
    8001869e:	f82a                	sd	a0,48(sp)
    pub const unsafe fn assume_init(self) -> T {
        // SAFETY: the caller must guarantee that `self` is initialized.
        // This also means that `self` must be a `value` variant.
        unsafe {
            intrinsics::assert_inhabited::<T>();
            ManuallyDrop::into_inner(self.value)
    800186a0:	e8aa                	sd	a0,80(sp)
    800186a2:	ecb2                	sd	a2,88(sp)
    800186a4:	f0b6                	sd	a3,96(sp)
    800186a6:	e994                	sd	a3,16(a1)
    800186a8:	e590                	sd	a2,8(a1)
    800186aa:	e188                	sd	a0,0(a1)
    800186ac:	a009                	j	800186ae <_ZN4core3ptr4read17h260501ac2ae68563E+0x3e>
}
    800186ae:	6165                	addi	sp,sp,112
    800186b0:	8082                	ret

Disassembly of section .text._ZN4core3ptr4read17h49d73875721fb0a9E:

00000000800186b2 <_ZN4core3ptr4read17h49d73875721fb0a9E>:
pub const unsafe fn read<T>(src: *const T) -> T {
    800186b2:	7179                	addi	sp,sp,-48
    800186b4:	e42a                	sd	a0,8(sp)
    800186b6:	ec2a                	sd	a0,24(sp)
    }
    800186b8:	02211503          	lh	a0,34(sp)
    let mut tmp = MaybeUninit::<T>::uninit();
    800186bc:	00a11b23          	sh	a0,22(sp)
    800186c0:	a009                	j	800186c2 <_ZN4core3ptr4read17h49d73875721fb0a9E+0x10>
    800186c2:	01610513          	addi	a0,sp,22
    800186c6:	f42a                	sd	a0,40(sp)
        copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
    800186c8:	a009                	j	800186ca <_ZN4core3ptr4read17h49d73875721fb0a9E+0x18>
    800186ca:	6522                	ld	a0,8(sp)
    800186cc:	00055503          	lhu	a0,0(a0)
    800186d0:	e02a                	sd	a0,0(sp)
    800186d2:	00a11b23          	sh	a0,22(sp)
    800186d6:	02a11223          	sh	a0,36(sp)
    800186da:	02a11323          	sh	a0,38(sp)
        tmp.assume_init()
    800186de:	a009                	j	800186e0 <_ZN4core3ptr4read17h49d73875721fb0a9E+0x2e>
}
    800186e0:	6502                	ld	a0,0(sp)
    800186e2:	6145                	addi	sp,sp,48
    800186e4:	8082                	ret

Disassembly of section .text._ZN4core3ptr4read17h97f5e0e151e0fdc4E:

00000000800186e6 <_ZN4core3ptr4read17h97f5e0e151e0fdc4E>:
pub const unsafe fn read<T>(src: *const T) -> T {
    800186e6:	7139                	addi	sp,sp,-64
    800186e8:	e82a                	sd	a0,16(sp)
    800186ea:	f02a                	sd	a0,32(sp)
    800186ec:	5532                	lw	a0,44(sp)
    let mut tmp = MaybeUninit::<T>::uninit();
    800186ee:	ce2a                	sw	a0,28(sp)
    800186f0:	a009                	j	800186f2 <_ZN4core3ptr4read17h97f5e0e151e0fdc4E+0xc>
    800186f2:	0868                	addi	a0,sp,28
    800186f4:	fc2a                	sd	a0,56(sp)
        copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
    800186f6:	a009                	j	800186f8 <_ZN4core3ptr4read17h97f5e0e151e0fdc4E+0x12>
    800186f8:	6542                	ld	a0,16(sp)
    800186fa:	00056503          	lwu	a0,0(a0)
    800186fe:	e42a                	sd	a0,8(sp)
    80018700:	ce2a                	sw	a0,28(sp)
    80018702:	d82a                	sw	a0,48(sp)
    80018704:	da2a                	sw	a0,52(sp)
        tmp.assume_init()
    80018706:	a009                	j	80018708 <_ZN4core3ptr4read17h97f5e0e151e0fdc4E+0x22>
}
    80018708:	6522                	ld	a0,8(sp)
    8001870a:	6121                	addi	sp,sp,64
    8001870c:	8082                	ret

Disassembly of section .text._ZN4core3ptr4read17hb68b0b8aaefcfe70E:

000000008001870e <_ZN4core3ptr4read17hb68b0b8aaefcfe70E>:
pub const unsafe fn read<T>(src: *const T) -> T {
    8001870e:	1101                	addi	sp,sp,-32
    80018710:	e42a                	sd	a0,8(sp)
    let mut tmp = MaybeUninit::<T>::uninit();
    80018712:	a009                	j	80018714 <_ZN4core3ptr4read17hb68b0b8aaefcfe70E+0x6>
    80018714:	850a                	mv	a0,sp
    80018716:	ec2a                	sd	a0,24(sp)
        copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
    80018718:	a009                	j	8001871a <_ZN4core3ptr4read17hb68b0b8aaefcfe70E+0xc>
        tmp.assume_init()
    8001871a:	a009                	j	8001871c <_ZN4core3ptr4read17hb68b0b8aaefcfe70E+0xe>
}
    8001871c:	6105                	addi	sp,sp,32
    8001871e:	8082                	ret

Disassembly of section .text._ZN4core3ptr4read17hbe38e0f78fffdc49E:

0000000080018720 <_ZN4core3ptr4read17hbe38e0f78fffdc49E>:
pub const unsafe fn read<T>(src: *const T) -> T {
    80018720:	715d                	addi	sp,sp,-80
    80018722:	ec2a                	sd	a0,24(sp)
    80018724:	f42a                	sd	a0,40(sp)
    80018726:	7542                	ld	a0,48(sp)
    let mut tmp = MaybeUninit::<T>::uninit();
    80018728:	f02a                	sd	a0,32(sp)
    8001872a:	a009                	j	8001872c <_ZN4core3ptr4read17hbe38e0f78fffdc49E+0xc>
    8001872c:	1008                	addi	a0,sp,32
    8001872e:	e82a                	sd	a0,16(sp)
    80018730:	e4aa                	sd	a0,72(sp)
        copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
    80018732:	a009                	j	80018734 <_ZN4core3ptr4read17hbe38e0f78fffdc49E+0x14>
    80018734:	65c2                	ld	a1,16(sp)
    80018736:	6562                	ld	a0,24(sp)
    80018738:	6108                	ld	a0,0(a0)
    8001873a:	e188                	sd	a0,0(a1)
        tmp.assume_init()
    8001873c:	7502                	ld	a0,32(sp)
    8001873e:	e42a                	sd	a0,8(sp)
    80018740:	fc2a                	sd	a0,56(sp)
    80018742:	e0aa                	sd	a0,64(sp)
    80018744:	a009                	j	80018746 <_ZN4core3ptr4read17hbe38e0f78fffdc49E+0x26>
}
    80018746:	6522                	ld	a0,8(sp)
    80018748:	6161                	addi	sp,sp,80
    8001874a:	8082                	ret

Disassembly of section .text._ZN4core3ptr4read17hca9a7d22776635f1E:

000000008001874c <_ZN4core3ptr4read17hca9a7d22776635f1E>:
pub const unsafe fn read<T>(src: *const T) -> T {
    8001874c:	7139                	addi	sp,sp,-64
    8001874e:	e42a                	sd	a0,8(sp)
    80018750:	ec2a                	sd	a0,24(sp)
    80018752:	7502                	ld	a0,32(sp)
    let mut tmp = MaybeUninit::<T>::uninit();
    80018754:	e82a                	sd	a0,16(sp)
    80018756:	a009                	j	80018758 <_ZN4core3ptr4read17hca9a7d22776635f1E+0xc>
    80018758:	0808                	addi	a0,sp,16
    8001875a:	fc2a                	sd	a0,56(sp)
        copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
    8001875c:	a009                	j	8001875e <_ZN4core3ptr4read17hca9a7d22776635f1E+0x12>
    8001875e:	6522                	ld	a0,8(sp)
    80018760:	6108                	ld	a0,0(a0)
    80018762:	e02a                	sd	a0,0(sp)
    80018764:	e82a                	sd	a0,16(sp)
    80018766:	f42a                	sd	a0,40(sp)
    80018768:	f82a                	sd	a0,48(sp)
        tmp.assume_init()
    8001876a:	a009                	j	8001876c <_ZN4core3ptr4read17hca9a7d22776635f1E+0x20>
}
    8001876c:	6502                	ld	a0,0(sp)
    8001876e:	6121                	addi	sp,sp,64
    80018770:	8082                	ret

Disassembly of section .text._ZN4core3ptr4read17hcc58f40f4c4c7a01E:

0000000080018772 <_ZN4core3ptr4read17hcc58f40f4c4c7a01E>:
pub const unsafe fn read<T>(src: *const T) -> T {
    80018772:	7159                	addi	sp,sp,-112
    80018774:	ec2a                	sd	a0,24(sp)
    80018776:	f82a                	sd	a0,48(sp)
    80018778:	75e2                	ld	a1,56(sp)
    8001877a:	6506                	ld	a0,64(sp)
    let mut tmp = MaybeUninit::<T>::uninit();
    8001877c:	f02e                	sd	a1,32(sp)
    8001877e:	f42a                	sd	a0,40(sp)
    80018780:	a009                	j	80018782 <_ZN4core3ptr4read17hcc58f40f4c4c7a01E+0x10>
    80018782:	1008                	addi	a0,sp,32
    80018784:	e82a                	sd	a0,16(sp)
    80018786:	f4aa                	sd	a0,104(sp)
        copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
    80018788:	a009                	j	8001878a <_ZN4core3ptr4read17hcc58f40f4c4c7a01E+0x18>
    8001878a:	65c2                	ld	a1,16(sp)
    8001878c:	6562                	ld	a0,24(sp)
    8001878e:	6510                	ld	a2,8(a0)
    80018790:	e590                	sd	a2,8(a1)
    80018792:	6108                	ld	a0,0(a0)
    80018794:	e188                	sd	a0,0(a1)
        tmp.assume_init()
    80018796:	7582                	ld	a1,32(sp)
    80018798:	e02e                	sd	a1,0(sp)
    8001879a:	7522                	ld	a0,40(sp)
    8001879c:	e42a                	sd	a0,8(sp)
    8001879e:	e4ae                	sd	a1,72(sp)
    800187a0:	e8aa                	sd	a0,80(sp)
    800187a2:	ecae                	sd	a1,88(sp)
    800187a4:	f0aa                	sd	a0,96(sp)
    800187a6:	a009                	j	800187a8 <_ZN4core3ptr4read17hcc58f40f4c4c7a01E+0x36>
}
    800187a8:	65a2                	ld	a1,8(sp)
    800187aa:	6502                	ld	a0,0(sp)
    800187ac:	6165                	addi	sp,sp,112
    800187ae:	8082                	ret

Disassembly of section .text._ZN4core3ptr4read17hd0dbd64c70caff03E:

00000000800187b0 <_ZN4core3ptr4read17hd0dbd64c70caff03E>:
pub const unsafe fn read<T>(src: *const T) -> T {
    800187b0:	715d                	addi	sp,sp,-80
    800187b2:	ec2a                	sd	a0,24(sp)
    800187b4:	f42a                	sd	a0,40(sp)
    800187b6:	7542                	ld	a0,48(sp)
    let mut tmp = MaybeUninit::<T>::uninit();
    800187b8:	f02a                	sd	a0,32(sp)
    800187ba:	a009                	j	800187bc <_ZN4core3ptr4read17hd0dbd64c70caff03E+0xc>
    800187bc:	1008                	addi	a0,sp,32
    800187be:	e82a                	sd	a0,16(sp)
    800187c0:	e4aa                	sd	a0,72(sp)
        copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
    800187c2:	a009                	j	800187c4 <_ZN4core3ptr4read17hd0dbd64c70caff03E+0x14>
    800187c4:	65c2                	ld	a1,16(sp)
    800187c6:	6562                	ld	a0,24(sp)
    800187c8:	6108                	ld	a0,0(a0)
    800187ca:	e188                	sd	a0,0(a1)
        tmp.assume_init()
    800187cc:	7502                	ld	a0,32(sp)
    800187ce:	e42a                	sd	a0,8(sp)
    800187d0:	fc2a                	sd	a0,56(sp)
    800187d2:	e0aa                	sd	a0,64(sp)
    800187d4:	a009                	j	800187d6 <_ZN4core3ptr4read17hd0dbd64c70caff03E+0x26>
}
    800187d6:	6522                	ld	a0,8(sp)
    800187d8:	6161                	addi	sp,sp,80
    800187da:	8082                	ret

Disassembly of section .text._ZN4core3ptr4read17hd38a26e0d5db892cE:

00000000800187dc <_ZN4core3ptr4read17hd38a26e0d5db892cE>:
pub const unsafe fn read<T>(src: *const T) -> T {
    800187dc:	7111                	addi	sp,sp,-256
    800187de:	fd86                	sd	ra,248(sp)
    800187e0:	ec2e                	sd	a1,24(sp)
    800187e2:	f02a                	sd	a0,32(sp)
    800187e4:	f52e                	sd	a1,168(sp)
    let mut tmp = MaybeUninit::<T>::uninit();
    800187e6:	a009                	j	800187e8 <_ZN4core3ptr4read17hd38a26e0d5db892cE+0xc>
    800187e8:	1028                	addi	a0,sp,40
    800187ea:	e82a                	sd	a0,16(sp)
    800187ec:	f9aa                	sd	a0,240(sp)
        copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
    800187ee:	a009                	j	800187f0 <_ZN4core3ptr4read17hd38a26e0d5db892cE+0x14>
    800187f0:	65e2                	ld	a1,24(sp)
    800187f2:	6542                	ld	a0,16(sp)
    800187f4:	04000613          	li	a2,64
    800187f8:	e432                	sd	a2,8(sp)
    800187fa:	0000d097          	auipc	ra,0xd
    800187fe:	8ea080e7          	jalr	-1814(ra) # 800250e4 <memcpy>
    80018802:	6622                	ld	a2,8(sp)
        tmp.assume_init()
    80018804:	7502                	ld	a0,32(sp)
    80018806:	7322                	ld	t1,40(sp)
    80018808:	f49a                	sd	t1,104(sp)
    8001880a:	72c2                	ld	t0,48(sp)
    8001880c:	f896                	sd	t0,112(sp)
    8001880e:	78e2                	ld	a7,56(sp)
    80018810:	fcc6                	sd	a7,120(sp)
    80018812:	6806                	ld	a6,64(sp)
    80018814:	e142                	sd	a6,128(sp)
    80018816:	67a6                	ld	a5,72(sp)
    80018818:	e53e                	sd	a5,136(sp)
    8001881a:	6746                	ld	a4,80(sp)
    8001881c:	e93a                	sd	a4,144(sp)
    8001881e:	66e6                	ld	a3,88(sp)
    80018820:	ed36                	sd	a3,152(sp)
    80018822:	7586                	ld	a1,96(sp)
    80018824:	f12e                	sd	a1,160(sp)
            ManuallyDrop::into_inner(self.value)
    80018826:	f91a                	sd	t1,176(sp)
    80018828:	fd16                	sd	t0,184(sp)
    8001882a:	e1c6                	sd	a7,192(sp)
    8001882c:	e5c2                	sd	a6,200(sp)
    8001882e:	e9be                	sd	a5,208(sp)
    80018830:	edba                	sd	a4,216(sp)
    80018832:	f1b6                	sd	a3,224(sp)
    80018834:	f5ae                	sd	a1,232(sp)
    80018836:	190c                	addi	a1,sp,176
    80018838:	0000d097          	auipc	ra,0xd
    8001883c:	8ac080e7          	jalr	-1876(ra) # 800250e4 <memcpy>
    80018840:	a009                	j	80018842 <_ZN4core3ptr4read17hd38a26e0d5db892cE+0x66>
}
    80018842:	70ee                	ld	ra,248(sp)
    80018844:	6111                	addi	sp,sp,256
    80018846:	8082                	ret

Disassembly of section .text._ZN4core3ptr4read17he855cc26728788dfE:

0000000080018848 <_ZN4core3ptr4read17he855cc26728788dfE>:
pub const unsafe fn read<T>(src: *const T) -> T {
    80018848:	7179                	addi	sp,sp,-48
    8001884a:	e42a                	sd	a0,8(sp)
    8001884c:	ec2a                	sd	a0,24(sp)
    }
    8001884e:	02510503          	lb	a0,37(sp)
    let mut tmp = MaybeUninit::<T>::uninit();
    80018852:	00a10ba3          	sb	a0,23(sp)
    80018856:	a009                	j	80018858 <_ZN4core3ptr4read17he855cc26728788dfE+0x10>
    80018858:	01710513          	addi	a0,sp,23
    8001885c:	f42a                	sd	a0,40(sp)
        copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
    8001885e:	a009                	j	80018860 <_ZN4core3ptr4read17he855cc26728788dfE+0x18>
    80018860:	6522                	ld	a0,8(sp)
    80018862:	00054503          	lbu	a0,0(a0)
    80018866:	e02a                	sd	a0,0(sp)
    80018868:	00a10ba3          	sb	a0,23(sp)
    8001886c:	02a10323          	sb	a0,38(sp)
    80018870:	8905                	andi	a0,a0,1
    80018872:	02a103a3          	sb	a0,39(sp)
        tmp.assume_init()
    80018876:	a009                	j	80018878 <_ZN4core3ptr4read17he855cc26728788dfE+0x30>
}
    80018878:	6502                	ld	a0,0(sp)
    8001887a:	8905                	andi	a0,a0,1
    8001887c:	6145                	addi	sp,sp,48
    8001887e:	8082                	ret

Disassembly of section .text._ZN4core3ptr4read17hf667e6f53e42adf1E:

0000000080018880 <_ZN4core3ptr4read17hf667e6f53e42adf1E>:
pub const unsafe fn read<T>(src: *const T) -> T {
    80018880:	7159                	addi	sp,sp,-112
    80018882:	ec2a                	sd	a0,24(sp)
    80018884:	f82a                	sd	a0,48(sp)
    80018886:	75e2                	ld	a1,56(sp)
    80018888:	6506                	ld	a0,64(sp)
    let mut tmp = MaybeUninit::<T>::uninit();
    8001888a:	f02e                	sd	a1,32(sp)
    8001888c:	f42a                	sd	a0,40(sp)
    8001888e:	a009                	j	80018890 <_ZN4core3ptr4read17hf667e6f53e42adf1E+0x10>
    80018890:	1008                	addi	a0,sp,32
    80018892:	f4aa                	sd	a0,104(sp)
        copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
    80018894:	a009                	j	80018896 <_ZN4core3ptr4read17hf667e6f53e42adf1E+0x16>
    80018896:	65e2                	ld	a1,24(sp)
    80018898:	6588                	ld	a0,8(a1)
    8001889a:	e42a                	sd	a0,8(sp)
    8001889c:	f42a                	sd	a0,40(sp)
    8001889e:	618c                	ld	a1,0(a1)
    800188a0:	e82e                	sd	a1,16(sp)
    800188a2:	f02e                	sd	a1,32(sp)
    800188a4:	e4ae                	sd	a1,72(sp)
    800188a6:	e8aa                	sd	a0,80(sp)
    800188a8:	ecae                	sd	a1,88(sp)
    800188aa:	f0aa                	sd	a0,96(sp)
        tmp.assume_init()
    800188ac:	a009                	j	800188ae <_ZN4core3ptr4read17hf667e6f53e42adf1E+0x2e>
}
    800188ae:	65a2                	ld	a1,8(sp)
    800188b0:	6542                	ld	a0,16(sp)
    800188b2:	6165                	addi	sp,sp,112
    800188b4:	8082                	ret

Disassembly of section .text._ZN4core3ptr5write17h0b5f65d949594758E:

00000000800188b6 <_ZN4core3ptr5write17h0b5f65d949594758E>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
    800188b6:	1101                	addi	sp,sp,-32
    800188b8:	e42e                	sd	a1,8(sp)
    800188ba:	e832                	sd	a2,16(sp)
    800188bc:	ec2a                	sd	a0,24(sp)
        copy_nonoverlapping(&src as *const T, dst, 1);
    800188be:	e510                	sd	a2,8(a0)
    800188c0:	e10c                	sd	a1,0(a0)
}
    800188c2:	6105                	addi	sp,sp,32
    800188c4:	8082                	ret

Disassembly of section .text._ZN4core3ptr5write17h0fb1ba83ac2984c7E:

00000000800188c6 <_ZN4core3ptr5write17h0fb1ba83ac2984c7E>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
    800188c6:	1141                	addi	sp,sp,-16
    800188c8:	00b103a3          	sb	a1,7(sp)
    800188cc:	e42a                	sd	a0,8(sp)
        copy_nonoverlapping(&src as *const T, dst, 1);
    800188ce:	00b50023          	sb	a1,0(a0)
}
    800188d2:	0141                	addi	sp,sp,16
    800188d4:	8082                	ret

Disassembly of section .text._ZN4core3ptr5write17h10d6d8799e54bf75E:

00000000800188d6 <_ZN4core3ptr5write17h10d6d8799e54bf75E>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
    800188d6:	1141                	addi	sp,sp,-16
    800188d8:	c22e                	sw	a1,4(sp)
    800188da:	e42a                	sd	a0,8(sp)
        copy_nonoverlapping(&src as *const T, dst, 1);
    800188dc:	c10c                	sw	a1,0(a0)
}
    800188de:	0141                	addi	sp,sp,16
    800188e0:	8082                	ret

Disassembly of section .text._ZN4core3ptr5write17h24d2ac6ea724fbc0E:

00000000800188e2 <_ZN4core3ptr5write17h24d2ac6ea724fbc0E>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
    800188e2:	1141                	addi	sp,sp,-16
    800188e4:	e406                	sd	ra,8(sp)
    800188e6:	e02a                	sd	a0,0(sp)
    800188e8:	04000613          	li	a2,64
        copy_nonoverlapping(&src as *const T, dst, 1);
    800188ec:	0000c097          	auipc	ra,0xc
    800188f0:	7f8080e7          	jalr	2040(ra) # 800250e4 <memcpy>
}
    800188f4:	60a2                	ld	ra,8(sp)
    800188f6:	0141                	addi	sp,sp,16
    800188f8:	8082                	ret

Disassembly of section .text._ZN4core3ptr5write17h25ba6e811e5fd451E:

00000000800188fa <_ZN4core3ptr5write17h25ba6e811e5fd451E>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
    800188fa:	1141                	addi	sp,sp,-16
    800188fc:	00b103a3          	sb	a1,7(sp)
    80018900:	e42a                	sd	a0,8(sp)
        copy_nonoverlapping(&src as *const T, dst, 1);
    80018902:	00b50023          	sb	a1,0(a0)
}
    80018906:	0141                	addi	sp,sp,16
    80018908:	8082                	ret

Disassembly of section .text._ZN4core3ptr5write17h4a1d74f50ec6a35fE:

000000008001890a <_ZN4core3ptr5write17h4a1d74f50ec6a35fE>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
    8001890a:	1141                	addi	sp,sp,-16
    8001890c:	e02e                	sd	a1,0(sp)
    8001890e:	e42a                	sd	a0,8(sp)
        copy_nonoverlapping(&src as *const T, dst, 1);
    80018910:	e10c                	sd	a1,0(a0)
}
    80018912:	0141                	addi	sp,sp,16
    80018914:	8082                	ret

Disassembly of section .text._ZN4core3ptr5write17h60f767b6e6d7c45aE:

0000000080018916 <_ZN4core3ptr5write17h60f767b6e6d7c45aE>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
    80018916:	1101                	addi	sp,sp,-32
    80018918:	e42e                	sd	a1,8(sp)
    8001891a:	e832                	sd	a2,16(sp)
    8001891c:	ec2a                	sd	a0,24(sp)
        copy_nonoverlapping(&src as *const T, dst, 1);
    8001891e:	e510                	sd	a2,8(a0)
    80018920:	e10c                	sd	a1,0(a0)
}
    80018922:	6105                	addi	sp,sp,32
    80018924:	8082                	ret

Disassembly of section .text._ZN4core3ptr5write17h6d43807bf71c562eE:

0000000080018926 <_ZN4core3ptr5write17h6d43807bf71c562eE>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
    80018926:	1141                	addi	sp,sp,-16
    80018928:	00b11323          	sh	a1,6(sp)
    8001892c:	e42a                	sd	a0,8(sp)
        copy_nonoverlapping(&src as *const T, dst, 1);
    8001892e:	00b51023          	sh	a1,0(a0)
}
    80018932:	0141                	addi	sp,sp,16
    80018934:	8082                	ret

Disassembly of section .text._ZN4core3ptr5write17h9fb8ab42ff75ed2cE:

0000000080018936 <_ZN4core3ptr5write17h9fb8ab42ff75ed2cE>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
    80018936:	1141                	addi	sp,sp,-16
    80018938:	e02e                	sd	a1,0(sp)
    8001893a:	e42a                	sd	a0,8(sp)
        copy_nonoverlapping(&src as *const T, dst, 1);
    8001893c:	e10c                	sd	a1,0(a0)
}
    8001893e:	0141                	addi	sp,sp,16
    80018940:	8082                	ret

Disassembly of section .text._ZN4core3ptr5write17hbb8dbff750359a8eE:

0000000080018942 <_ZN4core3ptr5write17hbb8dbff750359a8eE>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
    80018942:	1141                	addi	sp,sp,-16
    80018944:	e02e                	sd	a1,0(sp)
    80018946:	e42a                	sd	a0,8(sp)
        copy_nonoverlapping(&src as *const T, dst, 1);
    80018948:	e10c                	sd	a1,0(a0)
}
    8001894a:	0141                	addi	sp,sp,16
    8001894c:	8082                	ret

Disassembly of section .text._ZN4core3ptr5write17hf7c587ba45e12a81E:

000000008001894e <_ZN4core3ptr5write17hf7c587ba45e12a81E>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
    8001894e:	1141                	addi	sp,sp,-16
    80018950:	e02e                	sd	a1,0(sp)
    80018952:	85aa                	mv	a1,a0
    80018954:	6502                	ld	a0,0(sp)
    80018956:	e42e                	sd	a1,8(sp)
        copy_nonoverlapping(&src as *const T, dst, 1);
    80018958:	6910                	ld	a2,16(a0)
    8001895a:	e990                	sd	a2,16(a1)
    8001895c:	6510                	ld	a2,8(a0)
    8001895e:	e590                	sd	a2,8(a1)
    80018960:	6108                	ld	a0,0(a0)
    80018962:	e188                	sd	a0,0(a1)
}
    80018964:	0141                	addi	sp,sp,16
    80018966:	8082                	ret

Disassembly of section .text._ZN6kernel2fs5inode10InodeCache3dup17h6659572d8df32b14E:

0000000080018968 <_ZN6kernel2fs5inode10InodeCache3dup17h6659572d8df32b14E>:
    fn dup(&self, inode: &Inode) -> Inode {
    80018968:	715d                	addi	sp,sp,-80
    8001896a:	e486                	sd	ra,72(sp)
    8001896c:	ec2e                	sd	a1,24(sp)
    8001896e:	fc2a                	sd	a0,56(sp)
    80018970:	e0ae                	sd	a1,64(sp)
        let mut guard = self.meta.acquire();
    80018972:	ffff8097          	auipc	ra,0xffff8
    80018976:	cdc080e7          	jalr	-804(ra) # 8001064e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h702266ebf2d4d383E>
    8001897a:	f82a                	sd	a0,48(sp)
    8001897c:	a009                	j	8001897e <_ZN6kernel2fs5inode10InodeCache3dup17h6659572d8df32b14E+0x16>
    8001897e:	1808                	addi	a0,sp,48
        guard[inode.index].refs += 1;
    80018980:	ffff9097          	auipc	ra,0xffff9
    80018984:	d96080e7          	jalr	-618(ra) # 80011716 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7113684d7590c345E>
    80018988:	e82a                	sd	a0,16(sp)
    8001898a:	a009                	j	8001898c <_ZN6kernel2fs5inode10InodeCache3dup17h6659572d8df32b14E+0x24>
    8001898c:	6562                	ld	a0,24(sp)
    8001898e:	610c                	ld	a1,0(a0)
    80018990:	e42e                	sd	a1,8(sp)
    80018992:	03100513          	li	a0,49
    80018996:	04b56863          	bltu	a0,a1,800189e6 <_ZN6kernel2fs5inode10InodeCache3dup17h6659572d8df32b14E+0x7e>
    8001899a:	a009                	j	8001899c <_ZN6kernel2fs5inode10InodeCache3dup17h6659572d8df32b14E+0x34>
    8001899c:	6542                	ld	a0,16(sp)
    8001899e:	65a2                	ld	a1,8(sp)
    800189a0:	4661                	li	a2,24
    800189a2:	02c585b3          	mul	a1,a1,a2
    800189a6:	952e                	add	a0,a0,a1
    800189a8:	610c                	ld	a1,0(a0)
    800189aa:	00158513          	addi	a0,a1,1
    800189ae:	e02a                	sd	a0,0(sp)
    800189b0:	04b56763          	bltu	a0,a1,800189fe <.LBB0_9>
    800189b4:	a009                	j	800189b6 <_ZN6kernel2fs5inode10InodeCache3dup17h6659572d8df32b14E+0x4e>
    800189b6:	6562                	ld	a0,24(sp)
    800189b8:	6582                	ld	a1,0(sp)
    800189ba:	6642                	ld	a2,16(sp)
    800189bc:	66a2                	ld	a3,8(sp)
    800189be:	4761                	li	a4,24
    800189c0:	02e686b3          	mul	a3,a3,a4
    800189c4:	9636                	add	a2,a2,a3
    800189c6:	e20c                	sd	a1,0(a2)
            dev: inode.dev,
    800189c8:	650c                	ld	a1,8(a0)
            index: inode.index
    800189ca:	6108                	ld	a0,0(a0)
        Inode {
    800189cc:	f42e                	sd	a1,40(sp)
    800189ce:	f02a                	sd	a0,32(sp)
    800189d0:	1808                	addi	a0,sp,48
    }
    800189d2:	fffee097          	auipc	ra,0xfffee
    800189d6:	3a4080e7          	jalr	932(ra) # 80006d76 <_ZN4core3ptr116drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$$u5b$kernel..fs..inode..InodeMeta$u3b$$u20$50$u5d$$GT$$GT$17h4e8573cf3b362114E>
    800189da:	a009                	j	800189dc <_ZN6kernel2fs5inode10InodeCache3dup17h6659572d8df32b14E+0x74>
    800189dc:	7502                	ld	a0,32(sp)
    800189de:	75a2                	ld	a1,40(sp)
    800189e0:	60a6                	ld	ra,72(sp)
    800189e2:	6161                	addi	sp,sp,80
    800189e4:	8082                	ret
        guard[inode.index].refs += 1;
    800189e6:	6522                	ld	a0,8(sp)

00000000800189e8 <.LBB0_8>:
    800189e8:	00012617          	auipc	a2,0x12
    800189ec:	c0060613          	addi	a2,a2,-1024 # 8002a5e8 <.L__unnamed_1>
    800189f0:	03200593          	li	a1,50
    800189f4:	0000a097          	auipc	ra,0xa
    800189f8:	8ae080e7          	jalr	-1874(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

00000000800189fe <.LBB0_9>:
    800189fe:	00012517          	auipc	a0,0x12
    80018a02:	c0250513          	addi	a0,a0,-1022 # 8002a600 <str.0>

0000000080018a06 <.LBB0_10>:
    80018a06:	00012617          	auipc	a2,0x12
    80018a0a:	be260613          	addi	a2,a2,-1054 # 8002a5e8 <.L__unnamed_1>
    80018a0e:	45f1                	li	a1,28
    80018a10:	0000a097          	auipc	ra,0xa
    80018a14:	866080e7          	jalr	-1946(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE:

0000000080018a1a <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE>:
    fn put(&self, inode: &mut Inode) {
    80018a1a:	7129                	addi	sp,sp,-320
    80018a1c:	fe06                	sd	ra,312(sp)
    80018a1e:	e12e                	sd	a1,128(sp)
    80018a20:	e52a                	sd	a0,136(sp)
    80018a22:	e62a                	sd	a0,264(sp)
    80018a24:	ea2e                	sd	a1,272(sp)
        let mut guard = self.meta.acquire();
    80018a26:	ffff8097          	auipc	ra,0xffff8
    80018a2a:	c28080e7          	jalr	-984(ra) # 8001064e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h702266ebf2d4d383E>
    80018a2e:	ed2a                	sd	a0,152(sp)
    80018a30:	a009                	j	80018a32 <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0x18>
        let i = inode.index;
    80018a32:	650a                	ld	a0,128(sp)
    80018a34:	6108                	ld	a0,0(a0)
    80018a36:	f8aa                	sd	a0,112(sp)
    80018a38:	ee2a                	sd	a0,280(sp)
    80018a3a:	0928                	addi	a0,sp,152
        let imeta = &mut guard[i];
    80018a3c:	ffff9097          	auipc	ra,0xffff9
    80018a40:	cda080e7          	jalr	-806(ra) # 80011716 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7113684d7590c345E>
    80018a44:	fcaa                	sd	a0,120(sp)
    80018a46:	a009                	j	80018a48 <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0x2e>
    80018a48:	75c6                	ld	a1,112(sp)
    80018a4a:	03100513          	li	a0,49
    80018a4e:	22b56d63          	bltu	a0,a1,80018c88 <.LBB1_46+0x3c>
    80018a52:	a009                	j	80018a54 <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0x3a>
    80018a54:	7566                	ld	a0,120(sp)
    80018a56:	75c6                	ld	a1,112(sp)
    80018a58:	4661                	li	a2,24
    80018a5a:	02c585b3          	mul	a1,a1,a2
    80018a5e:	952e                	add	a0,a0,a1
    80018a60:	f4aa                	sd	a0,104(sp)
    80018a62:	f22a                	sd	a0,288(sp)
        if imeta.refs == 1 {
    80018a64:	6108                	ld	a0,0(a0)
    80018a66:	4585                	li	a1,1
    80018a68:	00b51963          	bne	a0,a1,80018a7a <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0x60>
    80018a6c:	a009                	j	80018a6e <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0x54>
    80018a6e:	7546                	ld	a0,112(sp)
    80018a70:	03200593          	li	a1,50
            let mut idata = self.data[i].lock();
    80018a74:	00b56b63          	bltu	a0,a1,80018a8a <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0x70>
    80018a78:	a499                	j	80018cbe <.LBB1_49+0x16>
            imeta.refs -= 1;
    80018a7a:	7526                	ld	a0,104(sp)
    80018a7c:	6108                	ld	a0,0(a0)
    80018a7e:	fff50593          	addi	a1,a0,-1
    80018a82:	f0ae                	sd	a1,96(sp)
    80018a84:	20b56e63          	bltu	a0,a1,80018ca0 <.LBB1_48>
    80018a88:	a2dd                	j	80018c6e <.LBB1_46+0x22>
            let mut idata = self.data[i].lock();
    80018a8a:	652a                	ld	a0,136(sp)
    80018a8c:	75c6                	ld	a1,112(sp)
    80018a8e:	059e                	slli	a1,a1,0x7
    80018a90:	952e                	add	a0,a0,a1
    80018a92:	4d050513          	addi	a0,a0,1232
    80018a96:	00005097          	auipc	ra,0x5
    80018a9a:	9aa080e7          	jalr	-1622(ra) # 8001d440 <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$4lock17h5e4056570307628eE>
    80018a9e:	f12a                	sd	a0,160(sp)
    80018aa0:	f52e                	sd	a1,168(sp)
    80018aa2:	a009                	j	80018aa4 <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0x8a>
    80018aa4:	1108                	addi	a0,sp,160
            if !idata.valid || idata.dinode.nlink > 0 {
    80018aa6:	00005097          	auipc	ra,0x5
    80018aaa:	c28080e7          	jalr	-984(ra) # 8001d6ce <_ZN92_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfc7812d7ca7ab1e1E>
    80018aae:	ecaa                	sd	a0,88(sp)
    80018ab0:	a02d                	j	80018ada <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0xc0>
    80018ab2:	4505                	li	a0,1
    80018ab4:	0aa10aa3          	sb	a0,181(sp)
    80018ab8:	a821                	j	80018ad0 <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0xb6>
    80018aba:	4501                	li	a0,0
    80018abc:	0aa10aa3          	sb	a0,181(sp)
    80018ac0:	a801                	j	80018ad0 <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0xb6>
    80018ac2:	1108                	addi	a0,sp,160
    80018ac4:	00005097          	auipc	ra,0x5
    80018ac8:	c0a080e7          	jalr	-1014(ra) # 8001d6ce <_ZN92_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfc7812d7ca7ab1e1E>
    80018acc:	e8aa                	sd	a0,80(sp)
    80018ace:	a831                	j	80018aea <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0xd0>
    80018ad0:	0b514503          	lbu	a0,181(sp)
    80018ad4:	8905                	andi	a0,a0,1
    80018ad6:	e10d                	bnez	a0,80018af8 <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0xde>
    80018ad8:	a03d                	j	80018b06 <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0xec>
    80018ada:	6566                	ld	a0,88(sp)
    80018adc:	04854503          	lbu	a0,72(a0)
    80018ae0:	8905                	andi	a0,a0,1
    80018ae2:	4581                	li	a1,0
    80018ae4:	fcb507e3          	beq	a0,a1,80018ab2 <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0x98>
    80018ae8:	bfe9                	j	80018ac2 <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0xa8>
    80018aea:	6546                	ld	a0,80(sp)
    80018aec:	00e51583          	lh	a1,14(a0)
    80018af0:	4501                	li	a0,0
    80018af2:	fcb540e3          	blt	a0,a1,80018ab2 <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0x98>
    80018af6:	b7d1                	j	80018aba <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0xa0>
    80018af8:	1108                	addi	a0,sp,160
                idata.valid = false;
    80018afa:	00005097          	auipc	ra,0x5
    80018afe:	be8080e7          	jalr	-1048(ra) # 8001d6e2 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    80018b02:	e4aa                	sd	a0,72(sp)
    80018b04:	a039                	j	80018b12 <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0xf8>
                drop(guard);
    80018b06:	656a                	ld	a0,152(sp)
    80018b08:	00004097          	auipc	ra,0x4
    80018b0c:	530080e7          	jalr	1328(ra) # 8001d038 <_ZN4core3mem4drop17h2d4fb87a733eb04aE>
    80018b10:	a835                	j	80018b4c <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0x132>
    80018b12:	65a6                	ld	a1,72(sp)
    80018b14:	4501                	li	a0,0
                idata.valid = false;
    80018b16:	04a58423          	sb	a0,72(a1)
                drop(idata);
    80018b1a:	750a                	ld	a0,160(sp)
    80018b1c:	75aa                	ld	a1,168(sp)
    80018b1e:	00004097          	auipc	ra,0x4
    80018b22:	54a080e7          	jalr	1354(ra) # 8001d068 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    80018b26:	a009                	j	80018b28 <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0x10e>
                imeta.refs -= 1;
    80018b28:	7526                	ld	a0,104(sp)
    80018b2a:	6108                	ld	a0,0(a0)
    80018b2c:	fff50593          	addi	a1,a0,-1
    80018b30:	e0ae                	sd	a1,64(sp)
    80018b32:	1ab56263          	bltu	a0,a1,80018cd6 <.LBB1_51>
    80018b36:	a009                	j	80018b38 <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0x11e>
    80018b38:	6506                	ld	a0,64(sp)
    80018b3a:	75a6                	ld	a1,104(sp)
    80018b3c:	e188                	sd	a0,0(a1)
                drop(guard);
    80018b3e:	656a                	ld	a0,152(sp)
    80018b40:	00004097          	auipc	ra,0x4
    80018b44:	4f8080e7          	jalr	1272(ra) # 8001d038 <_ZN4core3mem4drop17h2d4fb87a733eb04aE>
    80018b48:	a009                	j	80018b4a <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0x130>
            if !idata.valid || idata.dinode.nlink > 0 {
    80018b4a:	aa25                	j	80018c82 <.LBB1_46+0x36>
    80018b4c:	4501                	li	a0,0
                idata.dinode.itype = InodeType::Empty;
    80018b4e:	0aa11b23          	sh	a0,182(sp)
    80018b52:	1108                	addi	a0,sp,160
    80018b54:	00005097          	auipc	ra,0x5
    80018b58:	b8e080e7          	jalr	-1138(ra) # 8001d6e2 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    80018b5c:	fc2a                	sd	a0,56(sp)
    80018b5e:	a009                	j	80018b60 <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0x146>
    80018b60:	75e2                	ld	a1,56(sp)
    80018b62:	0b611503          	lh	a0,182(sp)
    80018b66:	00a59423          	sh	a0,8(a1)
    80018b6a:	1108                	addi	a0,sp,160
                idata.truncate(inode);
    80018b6c:	00005097          	auipc	ra,0x5
    80018b70:	b76080e7          	jalr	-1162(ra) # 8001d6e2 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    80018b74:	f82a                	sd	a0,48(sp)
    80018b76:	a009                	j	80018b78 <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0x15e>
    80018b78:	658a                	ld	a1,128(sp)
    80018b7a:	7542                	ld	a0,48(sp)
    80018b7c:	00001097          	auipc	ra,0x1
    80018b80:	1be080e7          	jalr	446(ra) # 80019d3a <_ZN6kernel2fs5inode9InodeData8truncate17h7f63e14f2a03d309E>
    80018b84:	a009                	j	80018b86 <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0x16c>
    80018b86:	1108                	addi	a0,sp,160
                idata.valid = false;
    80018b88:	00005097          	auipc	ra,0x5
    80018b8c:	b5a080e7          	jalr	-1190(ra) # 8001d6e2 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    80018b90:	f42a                	sd	a0,40(sp)
    80018b92:	a009                	j	80018b94 <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0x17a>
    80018b94:	75a2                	ld	a1,40(sp)
    80018b96:	4501                	li	a0,0
    80018b98:	04a58423          	sb	a0,72(a1)
                drop(idata);
    80018b9c:	750a                	ld	a0,160(sp)
    80018b9e:	75aa                	ld	a1,168(sp)
    80018ba0:	00004097          	auipc	ra,0x4
    80018ba4:	4c8080e7          	jalr	1224(ra) # 8001d068 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    80018ba8:	a009                	j	80018baa <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0x190>
                let mut guard = self.meta.acquire();
    80018baa:	652a                	ld	a0,136(sp)
    80018bac:	ffff8097          	auipc	ra,0xffff8
    80018bb0:	aa2080e7          	jalr	-1374(ra) # 8001064e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h702266ebf2d4d383E>
    80018bb4:	fd2a                	sd	a0,184(sp)
    80018bb6:	a009                	j	80018bb8 <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0x19e>
    80018bb8:	1928                	addi	a0,sp,184
                guard[i].refs -= 1;
    80018bba:	ffff9097          	auipc	ra,0xffff9
    80018bbe:	b5c080e7          	jalr	-1188(ra) # 80011716 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7113684d7590c345E>
    80018bc2:	f02a                	sd	a0,32(sp)
    80018bc4:	a009                	j	80018bc6 <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0x1ac>
    80018bc6:	75c6                	ld	a1,112(sp)
    80018bc8:	03100513          	li	a0,49
    80018bcc:	12b56463          	bltu	a0,a1,80018cf4 <.LBB1_52+0x16>
    80018bd0:	a009                	j	80018bd2 <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0x1b8>
    80018bd2:	7502                	ld	a0,32(sp)
    80018bd4:	75c6                	ld	a1,112(sp)
    80018bd6:	4661                	li	a2,24
    80018bd8:	02c585b3          	mul	a1,a1,a2
    80018bdc:	952e                	add	a0,a0,a1
    80018bde:	6108                	ld	a0,0(a0)
    80018be0:	fff50593          	addi	a1,a0,-1
    80018be4:	ec2e                	sd	a1,24(sp)
    80018be6:	12b56363          	bltu	a0,a1,80018d0c <.LBB1_54>
    80018bea:	a009                	j	80018bec <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0x1d2>
    80018bec:	6562                	ld	a0,24(sp)
    80018bee:	7582                	ld	a1,32(sp)
    80018bf0:	7646                	ld	a2,112(sp)
    80018bf2:	46e1                	li	a3,24
    80018bf4:	02d60633          	mul	a2,a2,a3
    80018bf8:	95b2                	add	a1,a1,a2
    80018bfa:	e188                	sd	a0,0(a1)
    80018bfc:	1928                	addi	a0,sp,184
                debug_assert_eq!(guard[i].refs, 0);
    80018bfe:	ffff9097          	auipc	ra,0xffff9
    80018c02:	99c080e7          	jalr	-1636(ra) # 8001159a <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h2948b75da44fd3f4E>
    80018c06:	e82a                	sd	a0,16(sp)
    80018c08:	a009                	j	80018c0a <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0x1f0>
    80018c0a:	75c6                	ld	a1,112(sp)
    80018c0c:	03100513          	li	a0,49
    80018c10:	10b56d63          	bltu	a0,a1,80018d2a <.LBB1_55+0x16>
    80018c14:	a009                	j	80018c16 <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0x1fc>
    80018c16:	6542                	ld	a0,16(sp)
    80018c18:	75c6                	ld	a1,112(sp)
    80018c1a:	4661                	li	a2,24
    80018c1c:	02c585b3          	mul	a1,a1,a2
    80018c20:	952e                	add	a0,a0,a1
    80018c22:	e02a                	sd	a0,0(sp)
    80018c24:	e1aa                	sd	a0,192(sp)

0000000080018c26 <.LBB1_45>:
    80018c26:	0000e597          	auipc	a1,0xe
    80018c2a:	c4a58593          	addi	a1,a1,-950 # 80026870 <.L__unnamed_6+0xc8>
    80018c2e:	e42e                	sd	a1,8(sp)
    80018c30:	e5ae                	sd	a1,200(sp)
    80018c32:	f62a                	sd	a0,296(sp)
    80018c34:	fa2e                	sd	a1,304(sp)
    80018c36:	6108                	ld	a0,0(a0)
    80018c38:	4581                	li	a1,0
    80018c3a:	02b50363          	beq	a0,a1,80018c60 <.LBB1_46+0x14>
    80018c3e:	a009                	j	80018c40 <.LBB1_45+0x1a>
    80018c40:	6622                	ld	a2,8(sp)
    80018c42:	6582                	ld	a1,0(sp)
    80018c44:	4501                	li	a0,0
    80018c46:	0ca10ba3          	sb	a0,215(sp)
    80018c4a:	edaa                	sd	a0,216(sp)

0000000080018c4c <.LBB1_46>:
    80018c4c:	00012717          	auipc	a4,0x12
    80018c50:	a8c70713          	addi	a4,a4,-1396 # 8002a6d8 <.L__unnamed_3>
    80018c54:	09b4                	addi	a3,sp,216
    80018c56:	00007097          	auipc	ra,0x7
    80018c5a:	d4e080e7          	jalr	-690(ra) # 8001f9a4 <_ZN4core9panicking13assert_failed17h4e6d74c9d534b647E>
    80018c5e:	0000                	unimp
                drop(guard);
    80018c60:	756a                	ld	a0,184(sp)
    80018c62:	00004097          	auipc	ra,0x4
    80018c66:	3d6080e7          	jalr	982(ra) # 8001d038 <_ZN4core3mem4drop17h2d4fb87a733eb04aE>
    80018c6a:	a009                	j	80018c6c <.LBB1_46+0x20>
            if !idata.valid || idata.dinode.nlink > 0 {
    80018c6c:	a819                	j	80018c82 <.LBB1_46+0x36>
            imeta.refs -= 1;
    80018c6e:	7506                	ld	a0,96(sp)
    80018c70:	75a6                	ld	a1,104(sp)
    80018c72:	e188                	sd	a0,0(a1)
            drop(guard);
    80018c74:	656a                	ld	a0,152(sp)
    80018c76:	00004097          	auipc	ra,0x4
    80018c7a:	3c2080e7          	jalr	962(ra) # 8001d038 <_ZN4core3mem4drop17h2d4fb87a733eb04aE>
    80018c7e:	a009                	j	80018c80 <.LBB1_46+0x34>
        if imeta.refs == 1 {
    80018c80:	a009                	j	80018c82 <.LBB1_46+0x36>
    }
    80018c82:	70f2                	ld	ra,312(sp)
    80018c84:	6131                	addi	sp,sp,320
    80018c86:	8082                	ret
        let imeta = &mut guard[i];
    80018c88:	7546                	ld	a0,112(sp)

0000000080018c8a <.LBB1_47>:
    80018c8a:	00012617          	auipc	a2,0x12
    80018c8e:	99660613          	addi	a2,a2,-1642 # 8002a620 <.L__unnamed_4>
    80018c92:	03200593          	li	a1,50
    80018c96:	00009097          	auipc	ra,0x9
    80018c9a:	60c080e7          	jalr	1548(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

0000000080018ca0 <.LBB1_48>:
            imeta.refs -= 1;
    80018ca0:	00012517          	auipc	a0,0x12
    80018ca4:	9b050513          	addi	a0,a0,-1616 # 8002a650 <str.1>

0000000080018ca8 <.LBB1_49>:
    80018ca8:	00012617          	auipc	a2,0x12
    80018cac:	99060613          	addi	a2,a2,-1648 # 8002a638 <.L__unnamed_5>
    80018cb0:	02100593          	li	a1,33
    80018cb4:	00009097          	auipc	ra,0x9
    80018cb8:	5c2080e7          	jalr	1474(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80018cbc:	0000                	unimp
            let mut idata = self.data[i].lock();
    80018cbe:	7546                	ld	a0,112(sp)

0000000080018cc0 <.LBB1_50>:
    80018cc0:	00012617          	auipc	a2,0x12
    80018cc4:	9b860613          	addi	a2,a2,-1608 # 8002a678 <.L__unnamed_6>
    80018cc8:	03200593          	li	a1,50
    80018ccc:	00009097          	auipc	ra,0x9
    80018cd0:	5d6080e7          	jalr	1494(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

0000000080018cd6 <.LBB1_51>:
                imeta.refs -= 1;
    80018cd6:	00012517          	auipc	a0,0x12
    80018cda:	97a50513          	addi	a0,a0,-1670 # 8002a650 <str.1>

0000000080018cde <.LBB1_52>:
    80018cde:	00012617          	auipc	a2,0x12
    80018ce2:	9b260613          	addi	a2,a2,-1614 # 8002a690 <.L__unnamed_7>
    80018ce6:	02100593          	li	a1,33
    80018cea:	00009097          	auipc	ra,0x9
    80018cee:	58c080e7          	jalr	1420(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80018cf2:	0000                	unimp
                guard[i].refs -= 1;
    80018cf4:	7546                	ld	a0,112(sp)

0000000080018cf6 <.LBB1_53>:
    80018cf6:	00012617          	auipc	a2,0x12
    80018cfa:	9b260613          	addi	a2,a2,-1614 # 8002a6a8 <.L__unnamed_8>
    80018cfe:	03200593          	li	a1,50
    80018d02:	00009097          	auipc	ra,0x9
    80018d06:	5a0080e7          	jalr	1440(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

0000000080018d0c <.LBB1_54>:
    80018d0c:	00012517          	auipc	a0,0x12
    80018d10:	94450513          	addi	a0,a0,-1724 # 8002a650 <str.1>

0000000080018d14 <.LBB1_55>:
    80018d14:	00012617          	auipc	a2,0x12
    80018d18:	99460613          	addi	a2,a2,-1644 # 8002a6a8 <.L__unnamed_8>
    80018d1c:	02100593          	li	a1,33
    80018d20:	00009097          	auipc	ra,0x9
    80018d24:	556080e7          	jalr	1366(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80018d28:	0000                	unimp
                debug_assert_eq!(guard[i].refs, 0);
    80018d2a:	7546                	ld	a0,112(sp)

0000000080018d2c <.LBB1_56>:
    80018d2c:	00012617          	auipc	a2,0x12
    80018d30:	99460613          	addi	a2,a2,-1644 # 8002a6c0 <.L__unnamed_9>
    80018d34:	03200593          	li	a1,50
    80018d38:	00009097          	auipc	ra,0x9
    80018d3c:	56a080e7          	jalr	1386(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E:

0000000080018d42 <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E>:
    fn get(&self, dev: u32, inum: u32) -> Inode {
    80018d42:	714d                	addi	sp,sp,-336
    80018d44:	e686                	sd	ra,328(sp)
    80018d46:	fcaa                	sd	a0,120(sp)
    80018d48:	86b2                	mv	a3,a2
    80018d4a:	e136                	sd	a3,128(sp)
    80018d4c:	86ae                	mv	a3,a1
    80018d4e:	e536                	sd	a3,136(sp)
    80018d50:	ea2a                	sd	a0,272(sp)
    80018d52:	10b12c23          	sw	a1,280(sp)
    80018d56:	10c12e23          	sw	a2,284(sp)
        let mut guard = self.meta.acquire();
    80018d5a:	ffff8097          	auipc	ra,0xffff8
    80018d5e:	8f4080e7          	jalr	-1804(ra) # 8001064e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h702266ebf2d4d383E>
    80018d62:	f12a                	sd	a0,160(sp)
    80018d64:	a009                	j	80018d66 <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x24>
    80018d66:	4501                	li	a0,0
        let mut empty_i: Option<usize> = None;
    80018d68:	f52a                	sd	a0,168(sp)
        for i in 0..NINODE {
    80018d6a:	fd2a                	sd	a0,184(sp)
    80018d6c:	03200593          	li	a1,50
    80018d70:	e1ae                	sd	a1,192(sp)
    80018d72:	00007097          	auipc	ra,0x7
    80018d76:	bd0080e7          	jalr	-1072(ra) # 8001f942 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he0a8d93712e5493bE>
    80018d7a:	f4aa                	sd	a0,104(sp)
    80018d7c:	f8ae                	sd	a1,112(sp)
    80018d7e:	a009                	j	80018d80 <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x3e>
    80018d80:	7546                	ld	a0,112(sp)
    80018d82:	75a6                	ld	a1,104(sp)
    80018d84:	e5ae                	sd	a1,200(sp)
    80018d86:	e9aa                	sd	a0,208(sp)
    80018d88:	a009                	j	80018d8a <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x48>
    80018d8a:	01a8                	addi	a0,sp,200
    80018d8c:	00007097          	auipc	ra,0x7
    80018d90:	b48080e7          	jalr	-1208(ra) # 8001f8d4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE>
    80018d94:	edaa                	sd	a0,216(sp)
    80018d96:	f1ae                	sd	a1,224(sp)
    80018d98:	a009                	j	80018d9a <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x58>
    80018d9a:	656e                	ld	a0,216(sp)
    80018d9c:	4581                	li	a1,0
    80018d9e:	00b50463          	beq	a0,a1,80018da6 <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x64>
    80018da2:	a009                	j	80018da4 <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x62>
    80018da4:	a801                	j	80018db4 <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x72>
            Some(i) => i,
    80018da6:	752a                	ld	a0,168(sp)
    80018da8:	4581                	li	a1,0
    80018daa:	1ab50363          	beq	a0,a1,80018f50 <.LBB2_65>
    80018dae:	a009                	j	80018db0 <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x6e>
    80018db0:	aa7d                	j	80018f6e <.LBB2_66+0x16>
        for i in 0..NINODE {
    80018db2:	0000                	unimp
    80018db4:	750e                	ld	a0,224(sp)
    80018db6:	ecaa                	sd	a0,88(sp)
    80018db8:	f22a                	sd	a0,288(sp)
    80018dba:	f62a                	sd	a0,296(sp)
    80018dbc:	fa2a                	sd	a0,304(sp)
    80018dbe:	1108                	addi	a0,sp,160
            if guard[i].inum == inum && guard[i].refs > 0 && guard[i].dev == dev {
    80018dc0:	ffff8097          	auipc	ra,0xffff8
    80018dc4:	7da080e7          	jalr	2010(ra) # 8001159a <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h2948b75da44fd3f4E>
    80018dc8:	f0aa                	sd	a0,96(sp)
    80018dca:	a889                	j	80018e1c <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0xda>
    80018dcc:	4505                	li	a0,1
    80018dce:	0ea106a3          	sb	a0,237(sp)
    80018dd2:	a821                	j	80018dea <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0xa8>
    80018dd4:	4501                	li	a0,0
    80018dd6:	0ea106a3          	sb	a0,237(sp)
    80018dda:	a801                	j	80018dea <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0xa8>
    80018ddc:	1108                	addi	a0,sp,160
    80018dde:	ffff8097          	auipc	ra,0xffff8
    80018de2:	7bc080e7          	jalr	1980(ra) # 8001159a <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h2948b75da44fd3f4E>
    80018de6:	e8aa                	sd	a0,80(sp)
    80018de8:	a8ad                	j	80018e62 <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x120>
    80018dea:	0ed14503          	lbu	a0,237(sp)
    80018dee:	8905                	andi	a0,a0,1
    80018df0:	e959                	bnez	a0,80018e86 <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x144>
    80018df2:	a04d                	j	80018e94 <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x152>
    80018df4:	4505                	li	a0,1
    80018df6:	0ea10723          	sb	a0,238(sp)
    80018dfa:	a821                	j	80018e12 <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0xd0>
    80018dfc:	4501                	li	a0,0
    80018dfe:	0ea10723          	sb	a0,238(sp)
    80018e02:	a801                	j	80018e12 <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0xd0>
    80018e04:	1108                	addi	a0,sp,160
    80018e06:	ffff8097          	auipc	ra,0xffff8
    80018e0a:	794080e7          	jalr	1940(ra) # 8001159a <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h2948b75da44fd3f4E>
    80018e0e:	e4aa                	sd	a0,72(sp)
    80018e10:	a805                	j	80018e40 <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0xfe>
    80018e12:	0ee14503          	lbu	a0,238(sp)
    80018e16:	8905                	andi	a0,a0,1
    80018e18:	f171                	bnez	a0,80018ddc <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x9a>
    80018e1a:	bf6d                	j	80018dd4 <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x92>
    80018e1c:	65e6                	ld	a1,88(sp)
    80018e1e:	03100513          	li	a0,49
    80018e22:	24b56f63          	bltu	a0,a1,80019080 <.LBB2_68+0x42>
    80018e26:	a009                	j	80018e28 <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0xe6>
    80018e28:	658a                	ld	a1,128(sp)
    80018e2a:	7506                	ld	a0,96(sp)
    80018e2c:	6666                	ld	a2,88(sp)
    80018e2e:	46e1                	li	a3,24
    80018e30:	02d60633          	mul	a2,a2,a3
    80018e34:	9532                	add	a0,a0,a2
    80018e36:	4908                	lw	a0,16(a0)
    80018e38:	2581                	sext.w	a1,a1
    80018e3a:	fcb505e3          	beq	a0,a1,80018e04 <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0xc2>
    80018e3e:	bf7d                	j	80018dfc <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0xba>
    80018e40:	65e6                	ld	a1,88(sp)
    80018e42:	03100513          	li	a0,49
    80018e46:	24b56963          	bltu	a0,a1,80019098 <.LBB2_69+0x16>
    80018e4a:	a009                	j	80018e4c <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x10a>
    80018e4c:	6526                	ld	a0,72(sp)
    80018e4e:	65e6                	ld	a1,88(sp)
    80018e50:	4661                	li	a2,24
    80018e52:	02c585b3          	mul	a1,a1,a2
    80018e56:	952e                	add	a0,a0,a1
    80018e58:	6108                	ld	a0,0(a0)
    80018e5a:	4581                	li	a1,0
    80018e5c:	f8b51ce3          	bne	a0,a1,80018df4 <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0xb2>
    80018e60:	bf71                	j	80018dfc <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0xba>
    80018e62:	65e6                	ld	a1,88(sp)
    80018e64:	03100513          	li	a0,49
    80018e68:	24b56463          	bltu	a0,a1,800190b0 <.LBB2_70+0x16>
    80018e6c:	a009                	j	80018e6e <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x12c>
    80018e6e:	65aa                	ld	a1,136(sp)
    80018e70:	6546                	ld	a0,80(sp)
    80018e72:	6666                	ld	a2,88(sp)
    80018e74:	46e1                	li	a3,24
    80018e76:	02d60633          	mul	a2,a2,a3
    80018e7a:	9532                	add	a0,a0,a2
    80018e7c:	4508                	lw	a0,8(a0)
    80018e7e:	2581                	sext.w	a1,a1
    80018e80:	f4b506e3          	beq	a0,a1,80018dcc <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x8a>
    80018e84:	bf81                	j	80018dd4 <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x92>
    80018e86:	1108                	addi	a0,sp,160
                guard[i].refs += 1;
    80018e88:	ffff9097          	auipc	ra,0xffff9
    80018e8c:	88e080e7          	jalr	-1906(ra) # 80011716 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7113684d7590c345E>
    80018e90:	e0aa                	sd	a0,64(sp)
    80018e92:	a801                	j	80018ea2 <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x160>
    80018e94:	1128                	addi	a0,sp,168
            if empty_i.is_none() && guard[i].refs == 0 {
    80018e96:	ffff6097          	auipc	ra,0xffff6
    80018e9a:	0d4080e7          	jalr	212(ra) # 8000ef6a <_ZN4core6option15Option$LT$T$GT$7is_none17hbfc07de6cbdc4f1cE>
    80018e9e:	fc2a                	sd	a0,56(sp)
    80018ea0:	a89d                	j	80018f16 <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x1d4>
    80018ea2:	65e6                	ld	a1,88(sp)
    80018ea4:	03100513          	li	a0,49
                guard[i].refs += 1;
    80018ea8:	22b56063          	bltu	a0,a1,800190c8 <.LBB2_71+0x16>
    80018eac:	a009                	j	80018eae <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x16c>
    80018eae:	6506                	ld	a0,64(sp)
    80018eb0:	65e6                	ld	a1,88(sp)
    80018eb2:	4661                	li	a2,24
    80018eb4:	02c585b3          	mul	a1,a1,a2
    80018eb8:	952e                	add	a0,a0,a1
    80018eba:	610c                	ld	a1,0(a0)
    80018ebc:	00158513          	addi	a0,a1,1
    80018ec0:	f82a                	sd	a0,48(sp)
    80018ec2:	20b56f63          	bltu	a0,a1,800190e0 <.LBB2_73>
    80018ec6:	a009                	j	80018ec8 <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x186>
    80018ec8:	6566                	ld	a0,88(sp)
    80018eca:	658a                	ld	a1,128(sp)
    80018ecc:	662a                	ld	a2,136(sp)
    80018ece:	76c2                	ld	a3,48(sp)
    80018ed0:	6706                	ld	a4,64(sp)
    80018ed2:	47e1                	li	a5,24
    80018ed4:	02f507b3          	mul	a5,a0,a5
    80018ed8:	973e                	add	a4,a4,a5
    80018eda:	e314                	sd	a3,0(a4)
                return Inode {
    80018edc:	cd32                	sw	a2,152(sp)
    80018ede:	cf2e                	sw	a1,156(sp)
    80018ee0:	e92a                	sd	a0,144(sp)
    80018ee2:	1108                	addi	a0,sp,160
    }
    80018ee4:	fffee097          	auipc	ra,0xfffee
    80018ee8:	e92080e7          	jalr	-366(ra) # 80006d76 <_ZN4core3ptr116drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$$u5b$kernel..fs..inode..InodeMeta$u3b$$u20$50$u5d$$GT$$GT$17h4e8573cf3b362114E>
    80018eec:	a269                	j	80019076 <.LBB2_68+0x38>
    80018eee:	4505                	li	a0,1
            if empty_i.is_none() && guard[i].refs == 0 {
    80018ef0:	0ea107a3          	sb	a0,239(sp)
    80018ef4:	a821                	j	80018f0c <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x1ca>
    80018ef6:	4501                	li	a0,0
    80018ef8:	0ea107a3          	sb	a0,239(sp)
    80018efc:	a801                	j	80018f0c <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x1ca>
    80018efe:	1108                	addi	a0,sp,160
    80018f00:	ffff8097          	auipc	ra,0xffff8
    80018f04:	69a080e7          	jalr	1690(ra) # 8001159a <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h2948b75da44fd3f4E>
    80018f08:	f42a                	sd	a0,40(sp)
    80018f0a:	a809                	j	80018f1c <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x1da>
    80018f0c:	0ef14503          	lbu	a0,239(sp)
    80018f10:	8905                	andi	a0,a0,1
    80018f12:	e515                	bnez	a0,80018f3e <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x1fc>
    80018f14:	a825                	j	80018f4c <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x20a>
    80018f16:	7562                	ld	a0,56(sp)
    80018f18:	f17d                	bnez	a0,80018efe <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x1bc>
    80018f1a:	bff1                	j	80018ef6 <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x1b4>
    80018f1c:	65e6                	ld	a1,88(sp)
    80018f1e:	03100513          	li	a0,49
    80018f22:	1cb56d63          	bltu	a0,a1,800190fc <.LBB2_74+0x14>
    80018f26:	a009                	j	80018f28 <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x1e6>
    80018f28:	7522                	ld	a0,40(sp)
    80018f2a:	65e6                	ld	a1,88(sp)
    80018f2c:	4661                	li	a2,24
    80018f2e:	02c585b3          	mul	a1,a1,a2
    80018f32:	952e                	add	a0,a0,a1
    80018f34:	6108                	ld	a0,0(a0)
    80018f36:	4581                	li	a1,0
    80018f38:	fab50be3          	beq	a0,a1,80018eee <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x1ac>
    80018f3c:	bf6d                	j	80018ef6 <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x1b4>
                empty_i = Some(i);
    80018f3e:	6566                	ld	a0,88(sp)
    80018f40:	fdaa                	sd	a0,248(sp)
    80018f42:	4585                	li	a1,1
    80018f44:	f9ae                	sd	a1,240(sp)
    80018f46:	f52e                	sd	a1,168(sp)
    80018f48:	f92a                	sd	a0,176(sp)
            if empty_i.is_none() && guard[i].refs == 0 {
    80018f4a:	a011                	j	80018f4e <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x20c>
    80018f4c:	a009                	j	80018f4e <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x20c>
        for i in 0..NINODE {
    80018f4e:	bd35                	j	80018d8a <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x48>

0000000080018f50 <.LBB2_65>:
            None => panic!("inode: not enough"),
    80018f50:	00012517          	auipc	a0,0x12
    80018f54:	8b050513          	addi	a0,a0,-1872 # 8002a800 <.L__unnamed_10>

0000000080018f58 <.LBB2_66>:
    80018f58:	00012617          	auipc	a2,0x12
    80018f5c:	8c060613          	addi	a2,a2,-1856 # 8002a818 <.L__unnamed_11>
    80018f60:	45c5                	li	a1,17
    80018f62:	00009097          	auipc	ra,0x9
    80018f66:	314080e7          	jalr	788(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80018f6a:	0000                	unimp
        let empty_i = match empty_i {
    80018f6c:	0000                	unimp
            Some(i) => i,
    80018f6e:	754a                	ld	a0,176(sp)
    80018f70:	ec2a                	sd	a0,24(sp)
    80018f72:	fe2a                	sd	a0,312(sp)
    80018f74:	e2aa                	sd	a0,320(sp)
    80018f76:	1108                	addi	a0,sp,160
        guard[empty_i].dev = dev;
    80018f78:	ffff8097          	auipc	ra,0xffff8
    80018f7c:	79e080e7          	jalr	1950(ra) # 80011716 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7113684d7590c345E>
    80018f80:	f02a                	sd	a0,32(sp)
    80018f82:	a009                	j	80018f84 <.LBB2_66+0x2c>
    80018f84:	65e2                	ld	a1,24(sp)
    80018f86:	03100513          	li	a0,49
    80018f8a:	18b56563          	bltu	a0,a1,80019114 <.LBB2_75+0x16>
    80018f8e:	a009                	j	80018f90 <.LBB2_66+0x38>
    80018f90:	652a                	ld	a0,136(sp)
    80018f92:	7582                	ld	a1,32(sp)
    80018f94:	6662                	ld	a2,24(sp)
    80018f96:	46e1                	li	a3,24
    80018f98:	02d60633          	mul	a2,a2,a3
    80018f9c:	95b2                	add	a1,a1,a2
    80018f9e:	c588                	sw	a0,8(a1)
    80018fa0:	1108                	addi	a0,sp,160
        guard[empty_i].inum = inum;
    80018fa2:	ffff8097          	auipc	ra,0xffff8
    80018fa6:	774080e7          	jalr	1908(ra) # 80011716 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7113684d7590c345E>
    80018faa:	e82a                	sd	a0,16(sp)
    80018fac:	a009                	j	80018fae <.LBB2_66+0x56>
    80018fae:	65e2                	ld	a1,24(sp)
    80018fb0:	03100513          	li	a0,49
    80018fb4:	16b56c63          	bltu	a0,a1,8001912c <.LBB2_76+0x16>
    80018fb8:	a009                	j	80018fba <.LBB2_66+0x62>
    80018fba:	650a                	ld	a0,128(sp)
    80018fbc:	65c2                	ld	a1,16(sp)
    80018fbe:	6662                	ld	a2,24(sp)
    80018fc0:	46e1                	li	a3,24
    80018fc2:	02d60633          	mul	a2,a2,a3
    80018fc6:	95b2                	add	a1,a1,a2
    80018fc8:	c988                	sw	a0,16(a1)
    80018fca:	1108                	addi	a0,sp,160
        guard[empty_i].refs = 1;
    80018fcc:	ffff8097          	auipc	ra,0xffff8
    80018fd0:	74a080e7          	jalr	1866(ra) # 80011716 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7113684d7590c345E>
    80018fd4:	e42a                	sd	a0,8(sp)
    80018fd6:	a009                	j	80018fd8 <.LBB2_66+0x80>
    80018fd8:	65e2                	ld	a1,24(sp)
    80018fda:	03100513          	li	a0,49
    80018fde:	16b56363          	bltu	a0,a1,80019144 <.LBB2_77+0x16>
    80018fe2:	a009                	j	80018fe4 <.LBB2_66+0x8c>
    80018fe4:	65e2                	ld	a1,24(sp)
    80018fe6:	6522                	ld	a0,8(sp)
    80018fe8:	4661                	li	a2,24
    80018fea:	02c58633          	mul	a2,a1,a2
    80018fee:	962a                	add	a2,a2,a0
    80018ff0:	4505                	li	a0,1
    80018ff2:	e208                	sd	a0,0(a2)
    80018ff4:	03100513          	li	a0,49
        let idata = self.data[empty_i].lock();
    80018ff8:	16b56263          	bltu	a0,a1,8001915c <.LBB2_78+0x16>
    80018ffc:	a009                	j	80018ffe <.LBB2_66+0xa6>
    80018ffe:	7566                	ld	a0,120(sp)
    80019000:	65e2                	ld	a1,24(sp)
    80019002:	059e                	slli	a1,a1,0x7
    80019004:	952e                	add	a0,a0,a1
    80019006:	4d050513          	addi	a0,a0,1232
    8001900a:	00004097          	auipc	ra,0x4
    8001900e:	436080e7          	jalr	1078(ra) # 8001d440 <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$4lock17h5e4056570307628eE>
    80019012:	e22a                	sd	a0,256(sp)
    80019014:	e62e                	sd	a1,264(sp)
    80019016:	a009                	j	80019018 <.LBB2_66+0xc0>
    80019018:	0208                	addi	a0,sp,256
        assert!(idata.valid == false, "此时 idata 应当无效");
    8001901a:	00004097          	auipc	ra,0x4
    8001901e:	6b4080e7          	jalr	1716(ra) # 8001d6ce <_ZN92_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfc7812d7ca7ab1e1E>
    80019022:	e02a                	sd	a0,0(sp)
    80019024:	a009                	j	80019026 <.LBB2_66+0xce>
    80019026:	6502                	ld	a0,0(sp)
    80019028:	04854503          	lbu	a0,72(a0)
    8001902c:	8905                	andi	a0,a0,1
    8001902e:	4581                	li	a1,0
    80019030:	02b50163          	beq	a0,a1,80019052 <.LBB2_68+0x14>
    80019034:	a009                	j	80019036 <.LBB2_67>

0000000080019036 <.LBB2_67>:
    80019036:	00011517          	auipc	a0,0x11
    8001903a:	79250513          	addi	a0,a0,1938 # 8002a7c8 <.L__unnamed_12>

000000008001903e <.LBB2_68>:
    8001903e:	00011617          	auipc	a2,0x11
    80019042:	7aa60613          	addi	a2,a2,1962 # 8002a7e8 <.L__unnamed_13>
    80019046:	45e5                	li	a1,25
    80019048:	00009097          	auipc	ra,0x9
    8001904c:	22e080e7          	jalr	558(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80019050:	0000                	unimp
        Inode {
    80019052:	6562                	ld	a0,24(sp)
    80019054:	658a                	ld	a1,128(sp)
    80019056:	662a                	ld	a2,136(sp)
    80019058:	cd32                	sw	a2,152(sp)
    8001905a:	cf2e                	sw	a1,156(sp)
    8001905c:	e92a                	sd	a0,144(sp)
    8001905e:	0208                	addi	a0,sp,256
    }
    80019060:	fffee097          	auipc	ra,0xfffee
    80019064:	00c080e7          	jalr	12(ra) # 8000706c <_ZN4core3ptr96drop_in_place$LT$kernel..lock..sleeplock..SleepLockGuard$LT$kernel..fs..inode..InodeData$GT$$GT$17h00d5c02cf687ef41E>
    80019068:	a009                	j	8001906a <.LBB2_68+0x2c>
    8001906a:	1108                	addi	a0,sp,160
    8001906c:	fffee097          	auipc	ra,0xfffee
    80019070:	d0a080e7          	jalr	-758(ra) # 80006d76 <_ZN4core3ptr116drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$$u5b$kernel..fs..inode..InodeMeta$u3b$$u20$50$u5d$$GT$$GT$17h4e8573cf3b362114E>
    80019074:	a009                	j	80019076 <.LBB2_68+0x38>
    80019076:	654a                	ld	a0,144(sp)
    80019078:	65ea                	ld	a1,152(sp)
    8001907a:	60b6                	ld	ra,328(sp)
    8001907c:	6171                	addi	sp,sp,336
    8001907e:	8082                	ret
            if guard[i].inum == inum && guard[i].refs > 0 && guard[i].dev == dev {
    80019080:	6566                	ld	a0,88(sp)

0000000080019082 <.LBB2_69>:
    80019082:	00011617          	auipc	a2,0x11
    80019086:	66e60613          	addi	a2,a2,1646 # 8002a6f0 <.L__unnamed_14>
    8001908a:	03200593          	li	a1,50
    8001908e:	00009097          	auipc	ra,0x9
    80019092:	214080e7          	jalr	532(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80019096:	0000                	unimp
    80019098:	6566                	ld	a0,88(sp)

000000008001909a <.LBB2_70>:
    8001909a:	00011617          	auipc	a2,0x11
    8001909e:	66e60613          	addi	a2,a2,1646 # 8002a708 <.L__unnamed_15>
    800190a2:	03200593          	li	a1,50
    800190a6:	00009097          	auipc	ra,0x9
    800190aa:	1fc080e7          	jalr	508(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    800190ae:	0000                	unimp
    800190b0:	6566                	ld	a0,88(sp)

00000000800190b2 <.LBB2_71>:
    800190b2:	00011617          	auipc	a2,0x11
    800190b6:	66e60613          	addi	a2,a2,1646 # 8002a720 <.L__unnamed_16>
    800190ba:	03200593          	li	a1,50
    800190be:	00009097          	auipc	ra,0x9
    800190c2:	1e4080e7          	jalr	484(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    800190c6:	0000                	unimp
                guard[i].refs += 1;
    800190c8:	6566                	ld	a0,88(sp)

00000000800190ca <.LBB2_72>:
    800190ca:	00011617          	auipc	a2,0x11
    800190ce:	66e60613          	addi	a2,a2,1646 # 8002a738 <.L__unnamed_17>
    800190d2:	03200593          	li	a1,50
    800190d6:	00009097          	auipc	ra,0x9
    800190da:	1cc080e7          	jalr	460(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

00000000800190e0 <.LBB2_73>:
    800190e0:	00011517          	auipc	a0,0x11
    800190e4:	52050513          	addi	a0,a0,1312 # 8002a600 <str.0>

00000000800190e8 <.LBB2_74>:
    800190e8:	00011617          	auipc	a2,0x11
    800190ec:	65060613          	addi	a2,a2,1616 # 8002a738 <.L__unnamed_17>
    800190f0:	45f1                	li	a1,28
    800190f2:	00009097          	auipc	ra,0x9
    800190f6:	184080e7          	jalr	388(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    800190fa:	0000                	unimp
            if empty_i.is_none() && guard[i].refs == 0 {
    800190fc:	6566                	ld	a0,88(sp)

00000000800190fe <.LBB2_75>:
    800190fe:	00011617          	auipc	a2,0x11
    80019102:	65260613          	addi	a2,a2,1618 # 8002a750 <.L__unnamed_18>
    80019106:	03200593          	li	a1,50
    8001910a:	00009097          	auipc	ra,0x9
    8001910e:	198080e7          	jalr	408(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80019112:	0000                	unimp
        guard[empty_i].dev = dev;
    80019114:	6562                	ld	a0,24(sp)

0000000080019116 <.LBB2_76>:
    80019116:	00011617          	auipc	a2,0x11
    8001911a:	65260613          	addi	a2,a2,1618 # 8002a768 <.L__unnamed_19>
    8001911e:	03200593          	li	a1,50
    80019122:	00009097          	auipc	ra,0x9
    80019126:	180080e7          	jalr	384(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    8001912a:	0000                	unimp
        guard[empty_i].inum = inum;
    8001912c:	6562                	ld	a0,24(sp)

000000008001912e <.LBB2_77>:
    8001912e:	00011617          	auipc	a2,0x11
    80019132:	65260613          	addi	a2,a2,1618 # 8002a780 <.L__unnamed_20>
    80019136:	03200593          	li	a1,50
    8001913a:	00009097          	auipc	ra,0x9
    8001913e:	168080e7          	jalr	360(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80019142:	0000                	unimp
        guard[empty_i].refs = 1;
    80019144:	6562                	ld	a0,24(sp)

0000000080019146 <.LBB2_78>:
    80019146:	00011617          	auipc	a2,0x11
    8001914a:	65260613          	addi	a2,a2,1618 # 8002a798 <.L__unnamed_21>
    8001914e:	03200593          	li	a1,50
    80019152:	00009097          	auipc	ra,0x9
    80019156:	150080e7          	jalr	336(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    8001915a:	0000                	unimp
        let idata = self.data[empty_i].lock();
    8001915c:	6562                	ld	a0,24(sp)

000000008001915e <.LBB2_79>:
    8001915e:	00011617          	auipc	a2,0x11
    80019162:	65260613          	addi	a2,a2,1618 # 8002a7b0 <.L__unnamed_22>
    80019166:	03200593          	li	a1,50
    8001916a:	00009097          	auipc	ra,0x9
    8001916e:	138080e7          	jalr	312(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel2fs5inode10InodeCache5namex17h346d00a9a4ac3352E:

0000000080019174 <_ZN6kernel2fs5inode10InodeCache5namex17h346d00a9a4ac3352E>:
    fn namex(
    80019174:	7121                	addi	sp,sp,-448
    80019176:	ff06                	sd	ra,440(sp)
    80019178:	e8ba                	sd	a4,80(sp)
    8001917a:	ecb6                	sd	a3,88(sp)
    8001917c:	f0b2                	sd	a2,96(sp)
    8001917e:	f4ae                	sd	a1,104(sp)
    80019180:	f8aa                	sd	a0,112(sp)
    80019182:	853e                	mv	a0,a5
    80019184:	fcaa                	sd	a0,120(sp)
    80019186:	f2ae                	sd	a1,352(sp)
    80019188:	f6b2                	sd	a2,360(sp)
    8001918a:	fab6                	sd	a3,368(sp)
    8001918c:	feba                	sd	a4,376(sp)
    8001918e:	18f103a3          	sb	a5,391(sp)
    80019192:	4501                	li	a0,0
        let mut inode: Inode;
    80019194:	14a10fa3          	sb	a0,351(sp)
        if path[0] == b'/' {
    80019198:	2aa68763          	beq	a3,a0,80019446 <.LBB3_56+0x98>
    8001919c:	a009                	j	8001919e <_ZN6kernel2fs5inode10InodeCache5namex17h346d00a9a4ac3352E+0x2a>
    8001919e:	7506                	ld	a0,96(sp)
    800191a0:	00054503          	lbu	a0,0(a0)
    800191a4:	02f00593          	li	a1,47
    800191a8:	00b51f63          	bne	a0,a1,800191c6 <.LBB3_51>
    800191ac:	a009                	j	800191ae <_ZN6kernel2fs5inode10InodeCache5namex17h346d00a9a4ac3352E+0x3a>
            inode = self.get(ROOTDEV, ROOTINUM);
    800191ae:	7526                	ld	a0,104(sp)
    800191b0:	4605                	li	a2,1
    800191b2:	85b2                	mv	a1,a2
    800191b4:	00000097          	auipc	ra,0x0
    800191b8:	b8e080e7          	jalr	-1138(ra) # 80018d42 <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E>
    800191bc:	f32a                	sd	a0,416(sp)
    800191be:	f72e                	sd	a1,424(sp)
    800191c0:	e92a                	sd	a0,144(sp)
    800191c2:	ed2e                	sd	a1,152(sp)
    800191c4:	a819                	j	800191da <.LBB3_51+0x14>

00000000800191c6 <.LBB3_51>:
            let p = unsafe { CPU_MANAGER.myproc().unwrap() };
    800191c6:	0005a517          	auipc	a0,0x5a
    800191ca:	f7a50513          	addi	a0,a0,-134 # 80073140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    800191ce:	ffff9097          	auipc	ra,0xffff9
    800191d2:	c30080e7          	jalr	-976(ra) # 80011dfe <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    800191d6:	e4aa                	sd	a0,72(sp)
    800191d8:	a809                	j	800191ea <.LBB3_51+0x24>
    800191da:	4505                	li	a0,1
            inode = self.get(ROOTDEV, ROOTINUM);
    800191dc:	14a10fa3          	sb	a0,351(sp)
    800191e0:	654a                	ld	a0,144(sp)
    800191e2:	e12a                	sd	a0,128(sp)
    800191e4:	656a                	ld	a0,152(sp)
    800191e6:	e52a                	sd	a0,136(sp)
        if path[0] == b'/' {
    800191e8:	a0a5                	j	80019250 <.LBB3_53+0x3a>
            let p = unsafe { CPU_MANAGER.myproc().unwrap() };
    800191ea:	6526                	ld	a0,72(sp)

00000000800191ec <.LBB3_52>:
    800191ec:	00011597          	auipc	a1,0x11
    800191f0:	65c58593          	addi	a1,a1,1628 # 8002a848 <.L__unnamed_23>
    800191f4:	ffff6097          	auipc	ra,0xffff6
    800191f8:	b58080e7          	jalr	-1192(ra) # 8000ed4c <_ZN4core6option15Option$LT$T$GT$6unwrap17h81f0c84c54a80648E>
    800191fc:	e0aa                	sd	a0,64(sp)
    800191fe:	a009                	j	80019200 <.LBB3_52+0x14>
    80019200:	6506                	ld	a0,64(sp)
    80019202:	e72a                	sd	a0,392(sp)
            inode = self.dup(p.cwd.as_ref().unwrap());
    80019204:	3c850513          	addi	a0,a0,968
    80019208:	ffff6097          	auipc	ra,0xffff6
    8001920c:	864080e7          	jalr	-1948(ra) # 8000ea6c <_ZN4core6option15Option$LT$T$GT$6as_ref17h883d1380e87d3449E>
    80019210:	fc2a                	sd	a0,56(sp)
    80019212:	a009                	j	80019214 <.LBB3_52+0x28>
    80019214:	7562                	ld	a0,56(sp)

0000000080019216 <.LBB3_53>:
    80019216:	00011597          	auipc	a1,0x11
    8001921a:	64a58593          	addi	a1,a1,1610 # 8002a860 <.L__unnamed_24>
    8001921e:	ffff6097          	auipc	ra,0xffff6
    80019222:	b9a080e7          	jalr	-1126(ra) # 8000edb8 <_ZN4core6option15Option$LT$T$GT$6unwrap17h8e9f6f5582436d22E>
    80019226:	f82a                	sd	a0,48(sp)
    80019228:	a009                	j	8001922a <.LBB3_53+0x14>
    8001922a:	75c2                	ld	a1,48(sp)
    8001922c:	7526                	ld	a0,104(sp)
    8001922e:	fffff097          	auipc	ra,0xfffff
    80019232:	73a080e7          	jalr	1850(ra) # 80018968 <_ZN6kernel2fs5inode10InodeCache3dup17h6659572d8df32b14E>
    80019236:	eb2a                	sd	a0,400(sp)
    80019238:	ef2e                	sd	a1,408(sp)
    8001923a:	f12a                	sd	a0,160(sp)
    8001923c:	f52e                	sd	a1,168(sp)
    8001923e:	a009                	j	80019240 <.LBB3_53+0x2a>
    80019240:	4505                	li	a0,1
    80019242:	14a10fa3          	sb	a0,351(sp)
    80019246:	750a                	ld	a0,160(sp)
    80019248:	e12a                	sd	a0,128(sp)
    8001924a:	752a                	ld	a0,168(sp)
    8001924c:	e52a                	sd	a0,136(sp)
        if path[0] == b'/' {
    8001924e:	a009                	j	80019250 <.LBB3_53+0x3a>
    80019250:	4501                	li	a0,0
        let mut cur: usize = 0;
    80019252:	f92a                	sd	a0,176(sp)
        loop {
    80019254:	a009                	j	80019256 <.LBB3_53+0x40>
            cur = skip_path(path, cur, name);
    80019256:	66c6                	ld	a3,80(sp)
    80019258:	65e6                	ld	a1,88(sp)
    8001925a:	7506                	ld	a0,96(sp)
    8001925c:	764a                	ld	a2,176(sp)
    8001925e:	00000097          	auipc	ra,0x0
    80019262:	7fa080e7          	jalr	2042(ra) # 80019a58 <_ZN6kernel2fs5inode9skip_path17h45b5cf4cf2eb7faeE>
    80019266:	f42a                	sd	a0,40(sp)
    80019268:	a009                	j	8001926a <.LBB3_53+0x54>
    8001926a:	7522                	ld	a0,40(sp)
    8001926c:	f92a                	sd	a0,176(sp)
    8001926e:	4581                	li	a1,0
            if cur == 0 { break; }
    80019270:	00b51763          	bne	a0,a1,8001927e <.LBB3_53+0x68>
    80019274:	a009                	j	80019276 <.LBB3_53+0x60>
        if is_parent {
    80019276:	7566                	ld	a0,120(sp)
    80019278:	12051763          	bnez	a0,800193a6 <.LBB3_55>
    8001927c:	a2a9                	j	800193c6 <.LBB3_56+0x18>
    8001927e:	0108                	addi	a0,sp,128
            let mut data_guard = inode.lock();
    80019280:	00002097          	auipc	ra,0x2
    80019284:	c36080e7          	jalr	-970(ra) # 8001aeb6 <_ZN6kernel2fs5inode5Inode4lock17he70970c593f751adE>
    80019288:	fd2a                	sd	a0,184(sp)
    8001928a:	e1ae                	sd	a1,192(sp)
    8001928c:	a009                	j	8001928e <.LBB3_53+0x78>
    8001928e:	1928                	addi	a0,sp,184
            if data_guard.dinode.itype != InodeType::Directory {
    80019290:	00004097          	auipc	ra,0x4
    80019294:	43e080e7          	jalr	1086(ra) # 8001d6ce <_ZN92_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfc7812d7ca7ab1e1E>
    80019298:	f02a                	sd	a0,32(sp)
    8001929a:	a009                	j	8001929c <.LBB3_53+0x86>
    8001929c:	7502                	ld	a0,32(sp)
    8001929e:	0521                	addi	a0,a0,8

00000000800192a0 <.LBB3_54>:
    800192a0:	00011597          	auipc	a1,0x11
    800192a4:	5d858593          	addi	a1,a1,1496 # 8002a878 <.L__unnamed_25>
    800192a8:	fffff097          	auipc	ra,0xfffff
    800192ac:	188080e7          	jalr	392(ra) # 80018430 <_ZN4core3cmp9PartialEq2ne17h733d64bbe9421100E>
    800192b0:	ec2a                	sd	a0,24(sp)
    800192b2:	a009                	j	800192b4 <.LBB3_54+0x14>
    800192b4:	6562                	ld	a0,24(sp)
    800192b6:	4581                	li	a1,0
    800192b8:	00b50a63          	beq	a0,a1,800192cc <.LBB3_54+0x2c>
    800192bc:	a009                	j	800192be <.LBB3_54+0x1e>
                drop(data_guard);
    800192be:	756a                	ld	a0,184(sp)
    800192c0:	658e                	ld	a1,192(sp)
    800192c2:	00004097          	auipc	ra,0x4
    800192c6:	da6080e7          	jalr	-602(ra) # 8001d068 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    800192ca:	a021                	j	800192d2 <.LBB3_54+0x32>
            if is_parent && path[cur] == 0 {
    800192cc:	7566                	ld	a0,120(sp)
    800192ce:	ed11                	bnez	a0,800192ea <.LBB3_54+0x4a>
    800192d0:	a809                	j	800192e2 <.LBB3_54+0x42>
    800192d2:	75c6                	ld	a1,112(sp)
    800192d4:	4501                	li	a0,0
                return None
    800192d6:	e188                	sd	a0,0(a1)
    800192d8:	a23d                	j	80019406 <.LBB3_56+0x58>
    800192da:	4505                	li	a0,1
            if is_parent && path[cur] == 0 {
    800192dc:	0ca107a3          	sb	a0,207(sp)
    800192e0:	a819                	j	800192f6 <.LBB3_54+0x56>
    800192e2:	4501                	li	a0,0
    800192e4:	0ca107a3          	sb	a0,207(sp)
    800192e8:	a039                	j	800192f6 <.LBB3_54+0x56>
    800192ea:	65e6                	ld	a1,88(sp)
    800192ec:	754a                	ld	a0,176(sp)
    800192ee:	e82a                	sd	a0,16(sp)
    800192f0:	00b56863          	bltu	a0,a1,80019300 <.LBB3_54+0x60>
    800192f4:	a2a5                	j	8001945c <.LBB3_57+0x14>
    800192f6:	0cf14503          	lbu	a0,207(sp)
    800192fa:	8905                	andi	a0,a0,1
    800192fc:	e919                	bnez	a0,80019312 <.LBB3_54+0x72>
    800192fe:	a00d                	j	80019320 <.LBB3_54+0x80>
    80019300:	7506                	ld	a0,96(sp)
    80019302:	65c2                	ld	a1,16(sp)
    80019304:	952e                	add	a0,a0,a1
    80019306:	00054503          	lbu	a0,0(a0)
    8001930a:	4581                	li	a1,0
    8001930c:	fcb507e3          	beq	a0,a1,800192da <.LBB3_54+0x3a>
    80019310:	bfc9                	j	800192e2 <.LBB3_54+0x42>
                drop(data_guard);
    80019312:	756a                	ld	a0,184(sp)
    80019314:	658e                	ld	a1,192(sp)
    80019316:	00004097          	auipc	ra,0x4
    8001931a:	d52080e7          	jalr	-686(ra) # 8001d068 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    8001931e:	a801                	j	8001932e <.LBB3_54+0x8e>
    80019320:	1928                	addi	a0,sp,184
            match data_guard.dir_lookup(name) {
    80019322:	00004097          	auipc	ra,0x4
    80019326:	3c0080e7          	jalr	960(ra) # 8001d6e2 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    8001932a:	e42a                	sd	a0,8(sp)
    8001932c:	a831                	j	80019348 <.LBB3_54+0xa8>
    8001932e:	75c6                	ld	a1,112(sp)
    80019330:	4501                	li	a0,0
                return Some(inode)
    80019332:	14a10fa3          	sb	a0,351(sp)
    80019336:	662a                	ld	a2,136(sp)
    80019338:	edb2                	sd	a2,216(sp)
    8001933a:	650a                	ld	a0,128(sp)
    8001933c:	e9aa                	sd	a0,208(sp)
    8001933e:	e990                	sd	a2,16(a1)
    80019340:	e588                	sd	a0,8(a1)
    80019342:	4505                	li	a0,1
    80019344:	e188                	sd	a0,0(a1)
        }
    80019346:	a0c1                	j	80019406 <.LBB3_56+0x58>
            match data_guard.dir_lookup(name) {
    80019348:	6646                	ld	a2,80(sp)
    8001934a:	65a2                	ld	a1,8(sp)
    8001934c:	1188                	addi	a0,sp,224
    8001934e:	46b9                	li	a3,14
    80019350:	00001097          	auipc	ra,0x1
    80019354:	57c080e7          	jalr	1404(ra) # 8001a8cc <_ZN6kernel2fs5inode9InodeData10dir_lookup17h2ffc093ee3be0a35E>
    80019358:	a009                	j	8001935a <.LBB3_54+0xba>
                None => {
    8001935a:	750e                	ld	a0,224(sp)
    8001935c:	4581                	li	a1,0
    8001935e:	00b50f63          	beq	a0,a1,8001937c <.LBB3_54+0xdc>
    80019362:	a009                	j	80019364 <.LBB3_54+0xc4>
                Some(last_inode) => {
    80019364:	754e                	ld	a0,240(sp)
    80019366:	e22a                	sd	a0,256(sp)
    80019368:	752e                	ld	a0,232(sp)
    8001936a:	fdaa                	sd	a0,248(sp)
                    drop(data_guard);
    8001936c:	756a                	ld	a0,184(sp)
    8001936e:	658e                	ld	a1,192(sp)
    80019370:	00004097          	auipc	ra,0x4
    80019374:	cf8080e7          	jalr	-776(ra) # 8001d068 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    80019378:	a829                	j	80019392 <.LBB3_54+0xf2>
            match data_guard.dir_lookup(name) {
    8001937a:	0000                	unimp
                    drop(data_guard);
    8001937c:	756a                	ld	a0,184(sp)
    8001937e:	658e                	ld	a1,192(sp)
    80019380:	00004097          	auipc	ra,0x4
    80019384:	ce8080e7          	jalr	-792(ra) # 8001d068 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    80019388:	a009                	j	8001938a <.LBB3_54+0xea>
    8001938a:	75c6                	ld	a1,112(sp)
    8001938c:	4501                	li	a0,0
                    return None
    8001938e:	e188                	sd	a0,0(a1)
    80019390:	a89d                	j	80019406 <.LBB3_56+0x58>
                    inode = last_inode;
    80019392:	6512                	ld	a0,256(sp)
    80019394:	ea2a                	sd	a0,272(sp)
    80019396:	756e                	ld	a0,248(sp)
    80019398:	e62a                	sd	a0,264(sp)
    8001939a:	0108                	addi	a0,sp,128
    8001939c:	fffee097          	auipc	ra,0xfffee
    800193a0:	ae6080e7          	jalr	-1306(ra) # 80006e82 <_ZN4core3ptr45drop_in_place$LT$kernel..fs..inode..Inode$GT$17h8786fe1a2a287832E>
    800193a4:	a8ad                	j	8001941e <.LBB3_56+0x70>

00000000800193a6 <.LBB3_55>:
            println!("[Kernel] Warning: namex querying root inode's parent");
    800193a6:	00011597          	auipc	a1,0x11
    800193aa:	52a58593          	addi	a1,a1,1322 # 8002a8d0 <.L__unnamed_26>

00000000800193ae <.LBB3_56>:
    800193ae:	00011697          	auipc	a3,0x11
    800193b2:	53268693          	addi	a3,a3,1330 # 8002a8e0 <.L__unnamed_30>
    800193b6:	0a28                	addi	a0,sp,280
    800193b8:	4605                	li	a2,1
    800193ba:	4701                	li	a4,0
    800193bc:	fffec097          	auipc	ra,0xfffec
    800193c0:	0ae080e7          	jalr	174(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    800193c4:	a831                	j	800193e0 <.LBB3_56+0x32>
    800193c6:	75c6                	ld	a1,112(sp)
    800193c8:	4501                	li	a0,0
            Some(inode)
    800193ca:	14a10fa3          	sb	a0,351(sp)
    800193ce:	662a                	ld	a2,136(sp)
    800193d0:	eab2                	sd	a2,336(sp)
    800193d2:	650a                	ld	a0,128(sp)
    800193d4:	e6aa                	sd	a0,328(sp)
    800193d6:	e990                	sd	a2,16(a1)
    800193d8:	e588                	sd	a0,8(a1)
    800193da:	4505                	li	a0,1
    800193dc:	e188                	sd	a0,0(a1)
        if is_parent {
    800193de:	a819                	j	800193f4 <.LBB3_56+0x46>
    800193e0:	0a28                	addi	a0,sp,280
            println!("[Kernel] Warning: namex querying root inode's parent");
    800193e2:	00005097          	auipc	ra,0x5
    800193e6:	96a080e7          	jalr	-1686(ra) # 8001dd4c <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    800193ea:	a009                	j	800193ec <.LBB3_56+0x3e>
    800193ec:	75c6                	ld	a1,112(sp)
    800193ee:	4501                	li	a0,0
            None 
    800193f0:	e188                	sd	a0,0(a1)
        if is_parent {
    800193f2:	a009                	j	800193f4 <.LBB3_56+0x46>
    }
    800193f4:	15f14503          	lbu	a0,351(sp)
    800193f8:	8905                	andi	a0,a0,1
    800193fa:	e915                	bnez	a0,8001942e <.LBB3_56+0x80>
    800193fc:	a009                	j	800193fe <.LBB3_56+0x50>
    800193fe:	4501                	li	a0,0
    80019400:	14a10fa3          	sb	a0,351(sp)
    80019404:	a811                	j	80019418 <.LBB3_56+0x6a>
    80019406:	15f14503          	lbu	a0,351(sp)
    8001940a:	8905                	andi	a0,a0,1
    8001940c:	e51d                	bnez	a0,8001943a <.LBB3_56+0x8c>
    8001940e:	a009                	j	80019410 <.LBB3_56+0x62>
    80019410:	4501                	li	a0,0
    80019412:	14a10fa3          	sb	a0,351(sp)
    80019416:	a009                	j	80019418 <.LBB3_56+0x6a>
    80019418:	70fa                	ld	ra,440(sp)
    8001941a:	6139                	addi	sp,sp,448
    8001941c:	8082                	ret
    8001941e:	4505                	li	a0,1
                    inode = last_inode;
    80019420:	14a10fa3          	sb	a0,351(sp)
    80019424:	6532                	ld	a0,264(sp)
    80019426:	e12a                	sd	a0,128(sp)
    80019428:	6552                	ld	a0,272(sp)
    8001942a:	e52a                	sd	a0,136(sp)
        loop {
    8001942c:	b52d                	j	80019256 <.LBB3_53+0x40>
    8001942e:	0108                	addi	a0,sp,128
    }
    80019430:	fffee097          	auipc	ra,0xfffee
    80019434:	a52080e7          	jalr	-1454(ra) # 80006e82 <_ZN4core3ptr45drop_in_place$LT$kernel..fs..inode..Inode$GT$17h8786fe1a2a287832E>
    80019438:	b7d9                	j	800193fe <.LBB3_56+0x50>
    8001943a:	0108                	addi	a0,sp,128
    8001943c:	fffee097          	auipc	ra,0xfffee
    80019440:	a46080e7          	jalr	-1466(ra) # 80006e82 <_ZN4core3ptr45drop_in_place$LT$kernel..fs..inode..Inode$GT$17h8786fe1a2a287832E>
    80019444:	b7f1                	j	80019410 <.LBB3_56+0x62>
        if path[0] == b'/' {
    80019446:	65e6                	ld	a1,88(sp)

0000000080019448 <.LBB3_57>:
    80019448:	00011617          	auipc	a2,0x11
    8001944c:	3e860613          	addi	a2,a2,1000 # 8002a830 <.L__unnamed_28>
    80019450:	4501                	li	a0,0
    80019452:	00009097          	auipc	ra,0x9
    80019456:	e50080e7          	jalr	-432(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    8001945a:	0000                	unimp
            if is_parent && path[cur] == 0 {
    8001945c:	65e6                	ld	a1,88(sp)
    8001945e:	6542                	ld	a0,16(sp)

0000000080019460 <.LBB3_58>:
    80019460:	00011617          	auipc	a2,0x11
    80019464:	42060613          	addi	a2,a2,1056 # 8002a880 <.L__unnamed_29>
    80019468:	00009097          	auipc	ra,0x9
    8001946c:	e3a080e7          	jalr	-454(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel2fs5inode10InodeCache5namei17hc269c6a9eecf1991E:

0000000080019472 <_ZN6kernel2fs5inode10InodeCache5namei17hc269c6a9eecf1991E>:
    pub fn namei(&self, path: &[u8]) -> Option<Inode> {
    80019472:	7179                	addi	sp,sp,-48
    80019474:	f406                	sd	ra,40(sp)
    80019476:	e82e                	sd	a1,16(sp)
    80019478:	ec32                	sd	a2,24(sp)
    8001947a:	f036                	sd	a3,32(sp)
    8001947c:	4781                	li	a5,0
        let mut name: [u8;DIRSIZ] = [0;DIRSIZ];
    8001947e:	e03e                	sd	a5,0(sp)
    80019480:	c43e                	sw	a5,8(sp)
    80019482:	00f11623          	sh	a5,12(sp)
    80019486:	870a                	mv	a4,sp
        self.namex(path, &mut name, false)
    80019488:	00000097          	auipc	ra,0x0
    8001948c:	cec080e7          	jalr	-788(ra) # 80019174 <_ZN6kernel2fs5inode10InodeCache5namex17h346d00a9a4ac3352E>
    80019490:	a009                	j	80019492 <_ZN6kernel2fs5inode10InodeCache5namei17hc269c6a9eecf1991E+0x20>
    }
    80019492:	70a2                	ld	ra,40(sp)
    80019494:	6145                	addi	sp,sp,48
    80019496:	8082                	ret

Disassembly of section .text._ZN6kernel2fs5inode10InodeCache12namei_parent17h24bebf98ccd9b34eE:

0000000080019498 <_ZN6kernel2fs5inode10InodeCache12namei_parent17h24bebf98ccd9b34eE>:
    pub fn namei_parent(&self, path: &[u8], name: &mut [u8;DIRSIZ]) -> Option<Inode> {
    80019498:	7179                	addi	sp,sp,-48
    8001949a:	f406                	sd	ra,40(sp)
    8001949c:	e42e                	sd	a1,8(sp)
    8001949e:	e832                	sd	a2,16(sp)
    800194a0:	ec36                	sd	a3,24(sp)
    800194a2:	f03a                	sd	a4,32(sp)
    800194a4:	4785                	li	a5,1
        self.namex(path, name, true)
    800194a6:	00000097          	auipc	ra,0x0
    800194aa:	cce080e7          	jalr	-818(ra) # 80019174 <_ZN6kernel2fs5inode10InodeCache5namex17h346d00a9a4ac3352E>
    800194ae:	a009                	j	800194b0 <_ZN6kernel2fs5inode10InodeCache12namei_parent17h24bebf98ccd9b34eE+0x18>
    }
    800194b0:	70a2                	ld	ra,40(sp)
    800194b2:	6145                	addi	sp,sp,48
    800194b4:	8082                	ret

Disassembly of section .text._ZN6kernel2fs5inode10InodeCache6create17h24595de16ee7205aE:

00000000800194b6 <_ZN6kernel2fs5inode10InodeCache6create17h24595de16ee7205aE>:
    pub fn create(
    800194b6:	c9010113          	addi	sp,sp,-880
    800194ba:	36113423          	sd	ra,872(sp)
    800194be:	fe2e                	sd	a1,312(sp)
    800194c0:	e2aa                	sd	a0,320(sp)
    800194c2:	8542                	mv	a0,a6
    800194c4:	e6aa                	sd	a0,328(sp)
    800194c6:	853e                	mv	a0,a5
    800194c8:	eaaa                	sd	a0,336(sp)
    800194ca:	14e11f23          	sh	a4,350(sp)
    800194ce:	28b13823          	sd	a1,656(sp)
    800194d2:	28c13c23          	sd	a2,664(sp)
    800194d6:	2ad13023          	sd	a3,672(sp)
    800194da:	2af11623          	sh	a5,684(sp)
    800194de:	2b011723          	sh	a6,686(sp)
    800194e2:	4501                	li	a0,0
        let mut name: [u8; DIRSIZ] = [0; DIRSIZ];
    800194e4:	28a10723          	sb	a0,654(sp)
    800194e8:	28a107a3          	sb	a0,655(sp)
    800194ec:	28a106a3          	sb	a0,653(sp)
    800194f0:	f2aa                	sd	a0,352(sp)
    800194f2:	16a12423          	sw	a0,360(sp)
    800194f6:	16a11623          	sh	a0,364(sp)
    800194fa:	0308                	addi	a0,sp,384
    800194fc:	1298                	addi	a4,sp,352
        let dirinode = self.namei_parent(path, &mut name).unwrap();
    800194fe:	00000097          	auipc	ra,0x0
    80019502:	f9a080e7          	jalr	-102(ra) # 80019498 <_ZN6kernel2fs5inode10InodeCache12namei_parent17h24bebf98ccd9b34eE>
    80019506:	a009                	j	80019508 <.LBB6_77>

0000000080019508 <.LBB6_77>:
    80019508:	00011597          	auipc	a1,0x11
    8001950c:	3d858593          	addi	a1,a1,984 # 8002a8e0 <.L__unnamed_30>
    80019510:	0308                	addi	a0,sp,384
    80019512:	ffff5097          	auipc	ra,0xffff5
    80019516:	796080e7          	jalr	1942(ra) # 8000eca8 <_ZN4core6option15Option$LT$T$GT$6unwrap17h5fcd4b8dbd5a2f47E>
    8001951a:	2ca13023          	sd	a0,704(sp)
    8001951e:	2cb13423          	sd	a1,712(sp)
    80019522:	faaa                	sd	a0,368(sp)
    80019524:	feae                	sd	a1,376(sp)
    80019526:	a009                	j	80019528 <.LBB6_77+0x20>
    80019528:	4505                	li	a0,1
        let mut dirinode_guard = dirinode.lock();
    8001952a:	28a107a3          	sb	a0,655(sp)
    8001952e:	1a88                	addi	a0,sp,368
    80019530:	00002097          	auipc	ra,0x2
    80019534:	986080e7          	jalr	-1658(ra) # 8001aeb6 <_ZN6kernel2fs5inode5Inode4lock17he70970c593f751adE>
    80019538:	ef2a                	sd	a0,408(sp)
    8001953a:	f32e                	sd	a1,416(sp)
    8001953c:	a009                	j	8001953e <.LBB6_77+0x36>
    8001953e:	0b28                	addi	a0,sp,408
        match dirinode_guard.dir_lookup(&name) {
    80019540:	00004097          	auipc	ra,0x4
    80019544:	1a2080e7          	jalr	418(ra) # 8001d6e2 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    80019548:	fa2a                	sd	a0,304(sp)
    8001954a:	a009                	j	8001954c <.LBB6_77+0x44>
    8001954c:	75d2                	ld	a1,304(sp)
    8001954e:	1328                	addi	a0,sp,424
    80019550:	1290                	addi	a2,sp,352
    80019552:	46b9                	li	a3,14
    80019554:	00001097          	auipc	ra,0x1
    80019558:	378080e7          	jalr	888(ra) # 8001a8cc <_ZN6kernel2fs5inode9InodeData10dir_lookup17h2ffc093ee3be0a35E>
    8001955c:	a009                	j	8001955e <.LBB6_77+0x56>
            Some(inode) => {
    8001955e:	753a                	ld	a0,424(sp)
    80019560:	4581                	li	a1,0
    80019562:	00b50463          	beq	a0,a1,8001956a <.LBB6_77+0x62>
    80019566:	a009                	j	80019568 <.LBB6_77+0x60>
    80019568:	a809                	j	8001957a <.LBB6_77+0x72>
    8001956a:	0b28                	addi	a0,sp,408
        let dev = dirinode_guard.dev;
    8001956c:	00004097          	auipc	ra,0x4
    80019570:	162080e7          	jalr	354(ra) # 8001d6ce <_ZN92_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfc7812d7ca7ab1e1E>
    80019574:	f62a                	sd	a0,296(sp)
    80019576:	a8e9                	j	80019650 <.LBB6_80+0x2c>
        match dirinode_guard.dir_lookup(&name) {
    80019578:	0000                	unimp
    8001957a:	4505                	li	a0,1
            Some(inode) => {
    8001957c:	28a10723          	sb	a0,654(sp)
    80019580:	755a                	ld	a0,432(sp)
    80019582:	e3aa                	sd	a0,448(sp)
    80019584:	757a                	ld	a0,440(sp)
    80019586:	e7aa                	sd	a0,456(sp)
    80019588:	4501                	li	a0,0
                drop(dirinode_guard);
    8001958a:	28a107a3          	sb	a0,655(sp)
    8001958e:	657a                	ld	a0,408(sp)
    80019590:	759a                	ld	a1,416(sp)
    80019592:	00004097          	auipc	ra,0x4
    80019596:	ad6080e7          	jalr	-1322(ra) # 8001d068 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    8001959a:	a009                	j	8001959c <.LBB6_77+0x94>
    8001959c:	4505                	li	a0,1
                let inode_guard = inode.lock();
    8001959e:	28a106a3          	sb	a0,653(sp)
    800195a2:	0388                	addi	a0,sp,448
    800195a4:	00002097          	auipc	ra,0x2
    800195a8:	912080e7          	jalr	-1774(ra) # 8001aeb6 <_ZN6kernel2fs5inode5Inode4lock17he70970c593f751adE>
    800195ac:	ebaa                	sd	a0,464(sp)
    800195ae:	efae                	sd	a1,472(sp)
    800195b0:	a009                	j	800195b2 <.LBB6_77+0xaa>
    800195b2:	0b88                	addi	a0,sp,464
                match inode_guard.dinode.itype {
    800195b4:	00004097          	auipc	ra,0x4
    800195b8:	11a080e7          	jalr	282(ra) # 8001d6ce <_ZN92_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfc7812d7ca7ab1e1E>
    800195bc:	f22a                	sd	a0,288(sp)
    800195be:	a009                	j	800195c0 <.LBB6_77+0xb8>
                    InodeType::Device | InodeType::File => {
    800195c0:	7512                	ld	a0,288(sp)
    800195c2:	00851503          	lh	a0,8(a0)
    800195c6:	1579                	addi	a0,a0,-2
    800195c8:	65c1                	lui	a1,0x10
    800195ca:	35fd                	addiw	a1,a1,-1
    800195cc:	8d6d                	and	a0,a0,a1
    800195ce:	4589                	li	a1,2
    800195d0:	00b56e63          	bltu	a0,a1,800195ec <.LBB6_79>
    800195d4:	a009                	j	800195d6 <.LBB6_77+0xce>
                        return Err("create: unmatched type.")
    800195d6:	6596                	ld	a1,320(sp)

00000000800195d8 <.LBB6_78>:
    800195d8:	00011517          	auipc	a0,0x11
    800195dc:	32050513          	addi	a0,a0,800 # 8002a8f8 <.L__unnamed_31>
    800195e0:	e588                	sd	a0,8(a1)
    800195e2:	455d                	li	a0,23
    800195e4:	e988                	sd	a0,16(a1)
    800195e6:	4505                	li	a0,1
    800195e8:	e188                	sd	a0,0(a1)
    800195ea:	a11d                	j	80019a10 <.LBB6_86+0xb8>

00000000800195ec <.LBB6_79>:
                        if itype == InodeType::File {
    800195ec:	00011597          	auipc	a1,0x11
    800195f0:	32458593          	addi	a1,a1,804 # 8002a910 <.L__unnamed_32>
    800195f4:	15e10513          	addi	a0,sp,350
    800195f8:	fffef097          	auipc	ra,0xfffef
    800195fc:	dca080e7          	jalr	-566(ra) # 800083c2 <_ZN70_$LT$kernel..fs..dinode..InodeType$u20$as$u20$core..cmp..PartialEq$GT$2eq17ha4431a2c7299d33fE>
    80019600:	ee2a                	sd	a0,280(sp)
    80019602:	a009                	j	80019604 <.LBB6_79+0x18>
    80019604:	6572                	ld	a0,280(sp)
    80019606:	4581                	li	a1,0
    80019608:	00b50d63          	beq	a0,a1,80019622 <.LBB6_79+0x36>
    8001960c:	a009                	j	8001960e <.LBB6_79+0x22>
    8001960e:	4501                	li	a0,0
                            drop(inode_guard);
    80019610:	28a106a3          	sb	a0,653(sp)
    80019614:	655e                	ld	a0,464(sp)
    80019616:	65fe                	ld	a1,472(sp)
    80019618:	00004097          	auipc	ra,0x4
    8001961c:	a50080e7          	jalr	-1456(ra) # 8001d068 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    80019620:	a821                	j	80019638 <.LBB6_80+0x14>
                        return Err("create: unmatched type.");
    80019622:	6596                	ld	a1,320(sp)

0000000080019624 <.LBB6_80>:
    80019624:	00011517          	auipc	a0,0x11
    80019628:	2d450513          	addi	a0,a0,724 # 8002a8f8 <.L__unnamed_31>
    8001962c:	e588                	sd	a0,8(a1)
    8001962e:	455d                	li	a0,23
    80019630:	e988                	sd	a0,16(a1)
    80019632:	4505                	li	a0,1
    80019634:	e188                	sd	a0,0(a1)
    80019636:	aee9                	j	80019a10 <.LBB6_86+0xb8>
    80019638:	6596                	ld	a1,320(sp)
    8001963a:	4501                	li	a0,0
                            return Ok(inode)
    8001963c:	28a10723          	sb	a0,654(sp)
    80019640:	66be                	ld	a3,456(sp)
    80019642:	f7b6                	sd	a3,488(sp)
    80019644:	661e                	ld	a2,448(sp)
    80019646:	f3b2                	sd	a2,480(sp)
    80019648:	e994                	sd	a3,16(a1)
    8001964a:	e590                	sd	a2,8(a1)
    8001964c:	e188                	sd	a0,0(a1)
            },
    8001964e:	a6c9                	j	80019a10 <.LBB6_86+0xb8>
        let dev = dirinode_guard.dev;
    80019650:	7532                	ld	a0,296(sp)
    80019652:	00056503          	lwu	a0,0(a0)
    80019656:	e62a                	sd	a0,264(sp)
    80019658:	2ca12c23          	sw	a0,728(sp)
        let inum = inode_alloc(dev, itype);
    8001965c:	15e11583          	lh	a1,350(sp)
    80019660:	fffec097          	auipc	ra,0xfffec
    80019664:	938080e7          	jalr	-1736(ra) # 80004f98 <_ZN6kernel2fs6bitmap11inode_alloc17h40b1057f68a7e223E>
    80019668:	85aa                	mv	a1,a0
    8001966a:	ea2e                	sd	a1,272(sp)
    8001966c:	2ca12e23          	sw	a0,732(sp)
    80019670:	a009                	j	80019672 <.LBB6_80+0x4e>
        let inode = self.get(dev, inum);
    80019672:	6652                	ld	a2,272(sp)
    80019674:	65b2                	ld	a1,264(sp)
    80019676:	7572                	ld	a0,312(sp)
    80019678:	fffff097          	auipc	ra,0xfffff
    8001967c:	6ca080e7          	jalr	1738(ra) # 80018d42 <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E>
    80019680:	2ea13023          	sd	a0,736(sp)
    80019684:	2eb13423          	sd	a1,744(sp)
    80019688:	fbaa                	sd	a0,496(sp)
    8001968a:	ffae                	sd	a1,504(sp)
    8001968c:	a009                	j	8001968e <.LBB6_80+0x6a>
    8001968e:	1b88                	addi	a0,sp,496
        let mut inode_guard = inode.lock();
    80019690:	00002097          	auipc	ra,0x2
    80019694:	826080e7          	jalr	-2010(ra) # 8001aeb6 <_ZN6kernel2fs5inode5Inode4lock17he70970c593f751adE>
    80019698:	20a13023          	sd	a0,512(sp)
    8001969c:	20b13423          	sd	a1,520(sp)
    800196a0:	a009                	j	800196a2 <.LBB6_80+0x7e>
    800196a2:	0408                	addi	a0,sp,512
        inode_guard.dinode.major = major;
    800196a4:	00004097          	auipc	ra,0x4
    800196a8:	03e080e7          	jalr	62(ra) # 8001d6e2 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    800196ac:	e22a                	sd	a0,256(sp)
    800196ae:	a009                	j	800196b0 <.LBB6_80+0x8c>
    800196b0:	6556                	ld	a0,336(sp)
    800196b2:	6592                	ld	a1,256(sp)
    800196b4:	00a59523          	sh	a0,10(a1)
    800196b8:	0408                	addi	a0,sp,512
        inode_guard.dinode.minor = minor;
    800196ba:	00004097          	auipc	ra,0x4
    800196be:	028080e7          	jalr	40(ra) # 8001d6e2 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    800196c2:	fdaa                	sd	a0,248(sp)
    800196c4:	a009                	j	800196c6 <.LBB6_80+0xa2>
    800196c6:	6536                	ld	a0,328(sp)
    800196c8:	75ee                	ld	a1,248(sp)
    800196ca:	00a59623          	sh	a0,12(a1)
    800196ce:	0408                	addi	a0,sp,512
        inode_guard.dinode.nlink = 1;
    800196d0:	00004097          	auipc	ra,0x4
    800196d4:	012080e7          	jalr	18(ra) # 8001d6e2 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    800196d8:	f9aa                	sd	a0,240(sp)
    800196da:	a009                	j	800196dc <.LBB6_80+0xb8>
    800196dc:	75ce                	ld	a1,240(sp)
    800196de:	4505                	li	a0,1
    800196e0:	00a59723          	sh	a0,14(a1)
    800196e4:	0408                	addi	a0,sp,512
        inode_guard.update();
    800196e6:	00004097          	auipc	ra,0x4
    800196ea:	ffc080e7          	jalr	-4(ra) # 8001d6e2 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    800196ee:	f5aa                	sd	a0,232(sp)
    800196f0:	a009                	j	800196f2 <.LBB6_80+0xce>
    800196f2:	752e                	ld	a0,232(sp)
    800196f4:	00001097          	auipc	ra,0x1
    800196f8:	856080e7          	jalr	-1962(ra) # 80019f4a <_ZN6kernel2fs5inode9InodeData6update17h81f49ab31d0ddfdcE>
    800196fc:	a009                	j	800196fe <.LBB6_80+0xda>
    800196fe:	0408                	addi	a0,sp,512
        debug_assert_eq!(inode_guard.dinode.itype, itype);
    80019700:	00004097          	auipc	ra,0x4
    80019704:	fce080e7          	jalr	-50(ra) # 8001d6ce <_ZN92_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfc7812d7ca7ab1e1E>
    80019708:	f1aa                	sd	a0,224(sp)
    8001970a:	a009                	j	8001970c <.LBB6_80+0xe8>
    8001970c:	750e                	ld	a0,224(sp)
    8001970e:	0521                	addi	a0,a0,8
    80019710:	e5aa                	sd	a0,200(sp)
    80019712:	20a13823          	sd	a0,528(sp)
    80019716:	15e10593          	addi	a1,sp,350
    8001971a:	e9ae                	sd	a1,208(sp)
    8001971c:	20b13c23          	sd	a1,536(sp)
    80019720:	2ea13c23          	sd	a0,760(sp)
    80019724:	30b13023          	sd	a1,768(sp)
    80019728:	fffef097          	auipc	ra,0xfffef
    8001972c:	c9a080e7          	jalr	-870(ra) # 800083c2 <_ZN70_$LT$kernel..fs..dinode..InodeType$u20$as$u20$core..cmp..PartialEq$GT$2eq17ha4431a2c7299d33fE>
    80019730:	edaa                	sd	a0,216(sp)
    80019732:	a009                	j	80019734 <.LBB6_80+0x110>
    80019734:	656e                	ld	a0,216(sp)
    80019736:	e11d                	bnez	a0,8001975c <.LBB6_82>
    80019738:	a009                	j	8001973a <.LBB6_80+0x116>
    8001973a:	664e                	ld	a2,208(sp)
    8001973c:	65ae                	ld	a1,200(sp)
    8001973e:	4501                	li	a0,0
    80019740:	22a103a3          	sb	a0,551(sp)
    80019744:	22a13423          	sd	a0,552(sp)

0000000080019748 <.LBB6_81>:
    80019748:	00011717          	auipc	a4,0x11
    8001974c:	1d070713          	addi	a4,a4,464 # 8002a918 <.L__unnamed_33>
    80019750:	1434                	addi	a3,sp,552
    80019752:	fffe9097          	auipc	ra,0xfffe9
    80019756:	f22080e7          	jalr	-222(ra) # 80002674 <_ZN4core9panicking13assert_failed17h118e998ec6bec25eE>
	...

000000008001975c <.LBB6_82>:
        if itype == InodeType::Directory {
    8001975c:	00011597          	auipc	a1,0x11
    80019760:	11c58593          	addi	a1,a1,284 # 8002a878 <.L__unnamed_25>
    80019764:	15e10513          	addi	a0,sp,350
    80019768:	fffef097          	auipc	ra,0xfffef
    8001976c:	c5a080e7          	jalr	-934(ra) # 800083c2 <_ZN70_$LT$kernel..fs..dinode..InodeType$u20$as$u20$core..cmp..PartialEq$GT$2eq17ha4431a2c7299d33fE>
    80019770:	e1aa                	sd	a0,192(sp)
    80019772:	a009                	j	80019774 <.LBB6_82+0x18>
    80019774:	650e                	ld	a0,192(sp)
    80019776:	4581                	li	a1,0
    80019778:	00b50a63          	beq	a0,a1,8001978c <.LBB6_82+0x30>
    8001977c:	a009                	j	8001977e <.LBB6_82+0x22>
    8001977e:	0408                	addi	a0,sp,512
            inode_guard.dinode.nlink += 1;
    80019780:	00004097          	auipc	ra,0x4
    80019784:	f62080e7          	jalr	-158(ra) # 8001d6e2 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    80019788:	fd2a                	sd	a0,184(sp)
    8001978a:	a011                	j	8001978e <.LBB6_82+0x32>
        if itype == InodeType::Directory {
    8001978c:	a261                	j	80019914 <.LBB6_84+0xa0>
            inode_guard.dinode.nlink += 1;
    8001978e:	756a                	ld	a0,184(sp)
    80019790:	00e51503          	lh	a0,14(a0)
    80019794:	00150593          	addi	a1,a0,1
    80019798:	f92e                	sd	a1,176(sp)
    8001979a:	03059513          	slli	a0,a1,0x30
    8001979e:	9541                	srai	a0,a0,0x30
    800197a0:	28b51e63          	bne	a0,a1,80019a3c <.LBB6_87>
    800197a4:	a009                	j	800197a6 <.LBB6_82+0x4a>
    800197a6:	754a                	ld	a0,176(sp)
    800197a8:	75ea                	ld	a1,184(sp)
    800197aa:	00a59723          	sh	a0,14(a1)
    800197ae:	0408                	addi	a0,sp,512
            inode_guard.update();
    800197b0:	00004097          	auipc	ra,0x4
    800197b4:	f32080e7          	jalr	-206(ra) # 8001d6e2 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    800197b8:	f52a                	sd	a0,168(sp)
    800197ba:	a009                	j	800197bc <.LBB6_82+0x60>
    800197bc:	752a                	ld	a0,168(sp)
    800197be:	00000097          	auipc	ra,0x0
    800197c2:	78c080e7          	jalr	1932(ra) # 80019f4a <_ZN6kernel2fs5inode9InodeData6update17h81f49ab31d0ddfdcE>
    800197c6:	a009                	j	800197c8 <.LBB6_82+0x6c>
    800197c8:	0408                	addi	a0,sp,512
            inode_guard.dir_link(".".as_bytes(), inode.inum)?;
    800197ca:	00004097          	auipc	ra,0x4
    800197ce:	f18080e7          	jalr	-232(ra) # 8001d6e2 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    800197d2:	f12a                	sd	a0,160(sp)
    800197d4:	a009                	j	800197d6 <.LBB6_83>

00000000800197d6 <.LBB6_83>:
    800197d6:	00011597          	auipc	a1,0x11
    800197da:	17258593          	addi	a1,a1,370 # 8002a948 <.L__unnamed_34>
    800197de:	e92e                	sd	a1,144(sp)
    800197e0:	32b13423          	sd	a1,808(sp)
    800197e4:	4505                	li	a0,1
    800197e6:	ed2a                	sd	a0,152(sp)
    800197e8:	32a13823          	sd	a0,816(sp)
        unsafe { mem::transmute(self) }
    800197ec:	32b13c23          	sd	a1,824(sp)
    800197f0:	34a13023          	sd	a0,832(sp)
    800197f4:	a009                	j	800197f6 <.LBB6_83+0x20>
    800197f6:	666a                	ld	a2,152(sp)
    800197f8:	65ca                	ld	a1,144(sp)
    800197fa:	750a                	ld	a0,160(sp)
    800197fc:	1fc12683          	lw	a3,508(sp)
    80019800:	00001097          	auipc	ra,0x1
    80019804:	2f6080e7          	jalr	758(ra) # 8001aaf6 <_ZN6kernel2fs5inode9InodeData8dir_link17h13a19ea2d651643eE>
    80019808:	e12a                	sd	a0,128(sp)
    8001980a:	e52e                	sd	a1,136(sp)
    8001980c:	a009                	j	8001980e <.LBB6_83+0x38>
    8001980e:	65aa                	ld	a1,136(sp)
    80019810:	650a                	ld	a0,128(sp)
    80019812:	ffff4097          	auipc	ra,0xffff4
    80019816:	9f4080e7          	jalr	-1548(ra) # 8000d206 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hb12176fc822fec8fE>
    8001981a:	24a13c23          	sd	a0,600(sp)
    8001981e:	26b13023          	sd	a1,608(sp)
    80019822:	a009                	j	80019824 <.LBB6_83+0x4e>
    80019824:	25813503          	ld	a0,600(sp)
    80019828:	00a035b3          	snez	a1,a0
    8001982c:	4581                	li	a1,0
    8001982e:	00b50463          	beq	a0,a1,80019836 <.LBB6_83+0x60>
    80019832:	a009                	j	80019834 <.LBB6_83+0x5e>
    80019834:	a809                	j	80019846 <.LBB6_83+0x70>
    80019836:	0408                	addi	a0,sp,512
            inode_guard.dir_link("..".as_bytes(), dirinode_guard.inum)?;
    80019838:	00004097          	auipc	ra,0x4
    8001983c:	eaa080e7          	jalr	-342(ra) # 8001d6e2 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    80019840:	fcaa                	sd	a0,120(sp)
    80019842:	a80d                	j	80019874 <.LBB6_84>
            inode_guard.dir_link(".".as_bytes(), inode.inum)?;
    80019844:	0000                	unimp
    80019846:	25813503          	ld	a0,600(sp)
    8001984a:	26013583          	ld	a1,608(sp)
    8001984e:	30a13423          	sd	a0,776(sp)
    80019852:	30b13823          	sd	a1,784(sp)
    80019856:	ffff2097          	auipc	ra,0xffff2
    8001985a:	216080e7          	jalr	534(ra) # 8000ba6c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h6f3e3843c20d184aE>
    8001985e:	f4aa                	sd	a0,104(sp)
    80019860:	f8ae                	sd	a1,112(sp)
    80019862:	a009                	j	80019864 <.LBB6_83+0x8e>
    80019864:	7646                	ld	a2,112(sp)
    80019866:	75a6                	ld	a1,104(sp)
    80019868:	6516                	ld	a0,320(sp)
    8001986a:	ffff4097          	auipc	ra,0xffff4
    8001986e:	8d2080e7          	jalr	-1838(ra) # 8000d13c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17haeaec5be2c31cee9E>
    80019872:	a299                	j	800199b8 <.LBB6_86+0x60>

0000000080019874 <.LBB6_84>:
    80019874:	00011597          	auipc	a1,0x11
    80019878:	0d558593          	addi	a1,a1,213 # 8002a949 <.L__unnamed_35>
    8001987c:	ecae                	sd	a1,88(sp)
    8001987e:	34b13423          	sd	a1,840(sp)
    80019882:	4509                	li	a0,2
    80019884:	f0aa                	sd	a0,96(sp)
    80019886:	34a13823          	sd	a0,848(sp)
    8001988a:	34b13c23          	sd	a1,856(sp)
    8001988e:	36a13023          	sd	a0,864(sp)
            inode_guard.dir_link("..".as_bytes(), dirinode_guard.inum)?;
    80019892:	a009                	j	80019894 <.LBB6_84+0x20>
    80019894:	0b28                	addi	a0,sp,408
    80019896:	00004097          	auipc	ra,0x4
    8001989a:	e38080e7          	jalr	-456(ra) # 8001d6ce <_ZN92_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfc7812d7ca7ab1e1E>
    8001989e:	e8aa                	sd	a0,80(sp)
    800198a0:	a009                	j	800198a2 <.LBB6_84+0x2e>
    800198a2:	7606                	ld	a2,96(sp)
    800198a4:	65e6                	ld	a1,88(sp)
    800198a6:	7566                	ld	a0,120(sp)
    800198a8:	66c6                	ld	a3,80(sp)
    800198aa:	42d4                	lw	a3,4(a3)
    800198ac:	00001097          	auipc	ra,0x1
    800198b0:	24a080e7          	jalr	586(ra) # 8001aaf6 <_ZN6kernel2fs5inode9InodeData8dir_link17h13a19ea2d651643eE>
    800198b4:	e0aa                	sd	a0,64(sp)
    800198b6:	e4ae                	sd	a1,72(sp)
    800198b8:	a009                	j	800198ba <.LBB6_84+0x46>
    800198ba:	65a6                	ld	a1,72(sp)
    800198bc:	6506                	ld	a0,64(sp)
    800198be:	ffff4097          	auipc	ra,0xffff4
    800198c2:	948080e7          	jalr	-1720(ra) # 8000d206 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hb12176fc822fec8fE>
    800198c6:	26a13423          	sd	a0,616(sp)
    800198ca:	26b13823          	sd	a1,624(sp)
    800198ce:	a009                	j	800198d0 <.LBB6_84+0x5c>
    800198d0:	26813503          	ld	a0,616(sp)
    800198d4:	00a035b3          	snez	a1,a0
    800198d8:	4581                	li	a1,0
    800198da:	00b50463          	beq	a0,a1,800198e2 <.LBB6_84+0x6e>
    800198de:	a009                	j	800198e0 <.LBB6_84+0x6c>
    800198e0:	a019                	j	800198e6 <.LBB6_84+0x72>
        if itype == InodeType::Directory {
    800198e2:	a80d                	j	80019914 <.LBB6_84+0xa0>
            inode_guard.dir_link("..".as_bytes(), dirinode_guard.inum)?;
    800198e4:	0000                	unimp
    800198e6:	26813503          	ld	a0,616(sp)
    800198ea:	27013583          	ld	a1,624(sp)
    800198ee:	30a13c23          	sd	a0,792(sp)
    800198f2:	32b13023          	sd	a1,800(sp)
    800198f6:	ffff2097          	auipc	ra,0xffff2
    800198fa:	176080e7          	jalr	374(ra) # 8000ba6c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h6f3e3843c20d184aE>
    800198fe:	f82a                	sd	a0,48(sp)
    80019900:	fc2e                	sd	a1,56(sp)
    80019902:	a009                	j	80019904 <.LBB6_84+0x90>
    80019904:	7662                	ld	a2,56(sp)
    80019906:	75c2                	ld	a1,48(sp)
    80019908:	6516                	ld	a0,320(sp)
    8001990a:	ffff4097          	auipc	ra,0xffff4
    8001990e:	832080e7          	jalr	-1998(ra) # 8000d13c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17haeaec5be2c31cee9E>
    80019912:	a05d                	j	800199b8 <.LBB6_86+0x60>
    80019914:	0b28                	addi	a0,sp,408
        dirinode_guard
    80019916:	00004097          	auipc	ra,0x4
    8001991a:	dcc080e7          	jalr	-564(ra) # 8001d6e2 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    8001991e:	f42a                	sd	a0,40(sp)
    80019920:	a009                	j	80019922 <.LBB6_84+0xae>
    80019922:	1288                	addi	a0,sp,352
            .dir_link(&name, inode_guard.inum)
    80019924:	ec2a                	sd	a0,24(sp)
    80019926:	0408                	addi	a0,sp,512
    80019928:	00004097          	auipc	ra,0x4
    8001992c:	da6080e7          	jalr	-602(ra) # 8001d6ce <_ZN92_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfc7812d7ca7ab1e1E>
    80019930:	f02a                	sd	a0,32(sp)
    80019932:	a009                	j	80019934 <.LBB6_84+0xc0>
        dirinode_guard
    80019934:	65e2                	ld	a1,24(sp)
    80019936:	7522                	ld	a0,40(sp)
    80019938:	7602                	ld	a2,32(sp)
    8001993a:	4254                	lw	a3,4(a2)
    8001993c:	4639                	li	a2,14
    8001993e:	00001097          	auipc	ra,0x1
    80019942:	1b8080e7          	jalr	440(ra) # 8001aaf6 <_ZN6kernel2fs5inode9InodeData8dir_link17h13a19ea2d651643eE>
    80019946:	e42a                	sd	a0,8(sp)
    80019948:	e82e                	sd	a1,16(sp)
    8001994a:	a009                	j	8001994c <.LBB6_84+0xd8>
    8001994c:	65c2                	ld	a1,16(sp)
    8001994e:	6522                	ld	a0,8(sp)

0000000080019950 <.LBB6_85>:
    80019950:	00011617          	auipc	a2,0x11
    80019954:	ffb60613          	addi	a2,a2,-5 # 8002a94b <.L__unnamed_36>

0000000080019958 <.LBB6_86>:
    80019958:	00011717          	auipc	a4,0x11
    8001995c:	01070713          	addi	a4,a4,16 # 8002a968 <.L__unnamed_37>
    80019960:	46e5                	li	a3,25
    80019962:	ffff3097          	auipc	ra,0xffff3
    80019966:	370080e7          	jalr	880(ra) # 8000ccd2 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h7db20d4970bed50aE>
    8001996a:	a009                	j	8001996c <.LBB6_86+0x14>
        drop(inode_guard);
    8001996c:	20013503          	ld	a0,512(sp)
    80019970:	20813583          	ld	a1,520(sp)
    80019974:	00003097          	auipc	ra,0x3
    80019978:	6f4080e7          	jalr	1780(ra) # 8001d068 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    8001997c:	a009                	j	8001997e <.LBB6_86+0x26>
    8001997e:	4501                	li	a0,0
        drop(dirinode_guard);
    80019980:	28a107a3          	sb	a0,655(sp)
    80019984:	657a                	ld	a0,408(sp)
    80019986:	759a                	ld	a1,416(sp)
    80019988:	00003097          	auipc	ra,0x3
    8001998c:	6e0080e7          	jalr	1760(ra) # 8001d068 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    80019990:	a009                	j	80019992 <.LBB6_86+0x3a>
        Ok(inode)
    80019992:	6596                	ld	a1,320(sp)
    80019994:	767e                	ld	a2,504(sp)
    80019996:	28c13023          	sd	a2,640(sp)
    8001999a:	755e                	ld	a0,496(sp)
    8001999c:	26a13c23          	sd	a0,632(sp)
    800199a0:	e990                	sd	a2,16(a1)
    800199a2:	e588                	sd	a0,8(a1)
    800199a4:	4501                	li	a0,0
    800199a6:	e188                	sd	a0,0(a1)
    }
    800199a8:	28a107a3          	sb	a0,655(sp)
    800199ac:	1a88                	addi	a0,sp,368
    800199ae:	fffed097          	auipc	ra,0xfffed
    800199b2:	4d4080e7          	jalr	1236(ra) # 80006e82 <_ZN4core3ptr45drop_in_place$LT$kernel..fs..inode..Inode$GT$17h8786fe1a2a287832E>
    800199b6:	a091                	j	800199fa <.LBB6_86+0xa2>
    800199b8:	0408                	addi	a0,sp,512
    800199ba:	fffed097          	auipc	ra,0xfffed
    800199be:	6b2080e7          	jalr	1714(ra) # 8000706c <_ZN4core3ptr96drop_in_place$LT$kernel..lock..sleeplock..SleepLockGuard$LT$kernel..fs..inode..InodeData$GT$$GT$17h00d5c02cf687ef41E>
    800199c2:	a009                	j	800199c4 <.LBB6_86+0x6c>
    800199c4:	1b88                	addi	a0,sp,496
    800199c6:	fffed097          	auipc	ra,0xfffed
    800199ca:	4bc080e7          	jalr	1212(ra) # 80006e82 <_ZN4core3ptr45drop_in_place$LT$kernel..fs..inode..Inode$GT$17h8786fe1a2a287832E>
    800199ce:	a095                	j	80019a32 <.LBB6_86+0xda>
    800199d0:	4501                	li	a0,0
            },
    800199d2:	28a106a3          	sb	a0,653(sp)
    800199d6:	28e14503          	lbu	a0,654(sp)
    800199da:	8905                	andi	a0,a0,1
    800199dc:	ed1d                	bnez	a0,80019a1a <.LBB6_86+0xc2>
    800199de:	a009                	j	800199e0 <.LBB6_86+0x88>
    800199e0:	4501                	li	a0,0
    800199e2:	28a10723          	sb	a0,654(sp)
    800199e6:	a0b1                	j	80019a32 <.LBB6_86+0xda>
    800199e8:	4501                	li	a0,0
    }
    800199ea:	28a107a3          	sb	a0,655(sp)
    800199ee:	1a88                	addi	a0,sp,368
    800199f0:	fffed097          	auipc	ra,0xfffed
    800199f4:	492080e7          	jalr	1170(ra) # 80006e82 <_ZN4core3ptr45drop_in_place$LT$kernel..fs..inode..Inode$GT$17h8786fe1a2a287832E>
    800199f8:	a009                	j	800199fa <.LBB6_86+0xa2>
    800199fa:	36813083          	ld	ra,872(sp)
    800199fe:	37010113          	addi	sp,sp,880
    80019a02:	8082                	ret
    80019a04:	0b88                	addi	a0,sp,464
            },
    80019a06:	fffed097          	auipc	ra,0xfffed
    80019a0a:	666080e7          	jalr	1638(ra) # 8000706c <_ZN4core3ptr96drop_in_place$LT$kernel..lock..sleeplock..SleepLockGuard$LT$kernel..fs..inode..InodeData$GT$$GT$17h00d5c02cf687ef41E>
    80019a0e:	b7c9                	j	800199d0 <.LBB6_86+0x78>
    80019a10:	28d14503          	lbu	a0,653(sp)
    80019a14:	8905                	andi	a0,a0,1
    80019a16:	f57d                	bnez	a0,80019a04 <.LBB6_86+0xac>
    80019a18:	bf65                	j	800199d0 <.LBB6_86+0x78>
    80019a1a:	0388                	addi	a0,sp,448
    80019a1c:	fffed097          	auipc	ra,0xfffed
    80019a20:	466080e7          	jalr	1126(ra) # 80006e82 <_ZN4core3ptr45drop_in_place$LT$kernel..fs..inode..Inode$GT$17h8786fe1a2a287832E>
    80019a24:	bf75                	j	800199e0 <.LBB6_86+0x88>
    80019a26:	0b28                	addi	a0,sp,408
    }
    80019a28:	fffed097          	auipc	ra,0xfffed
    80019a2c:	644080e7          	jalr	1604(ra) # 8000706c <_ZN4core3ptr96drop_in_place$LT$kernel..lock..sleeplock..SleepLockGuard$LT$kernel..fs..inode..InodeData$GT$$GT$17h00d5c02cf687ef41E>
    80019a30:	bf65                	j	800199e8 <.LBB6_86+0x90>
    80019a32:	28f14503          	lbu	a0,655(sp)
    80019a36:	8905                	andi	a0,a0,1
    80019a38:	f57d                	bnez	a0,80019a26 <.LBB6_86+0xce>
    80019a3a:	b77d                	j	800199e8 <.LBB6_86+0x90>

0000000080019a3c <.LBB6_87>:
            inode_guard.dinode.nlink += 1;
    80019a3c:	00011517          	auipc	a0,0x11
    80019a40:	bc450513          	addi	a0,a0,-1084 # 8002a600 <str.0>

0000000080019a44 <.LBB6_88>:
    80019a44:	00011617          	auipc	a2,0x11
    80019a48:	eec60613          	addi	a2,a2,-276 # 8002a930 <.L__unnamed_38>
    80019a4c:	45f1                	li	a1,28
    80019a4e:	00009097          	auipc	ra,0x9
    80019a52:	828080e7          	jalr	-2008(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel2fs5inode9skip_path17h45b5cf4cf2eb7faeE:

0000000080019a58 <_ZN6kernel2fs5inode9skip_path17h45b5cf4cf2eb7faeE>:
fn skip_path(
    80019a58:	7155                	addi	sp,sp,-208
    80019a5a:	e586                	sd	ra,200(sp)
    80019a5c:	f8b6                	sd	a3,112(sp)
    80019a5e:	fcae                	sd	a1,120(sp)
    80019a60:	e12a                	sd	a0,128(sp)
    80019a62:	e532                	sd	a2,136(sp)
    80019a64:	f12a                	sd	a0,160(sp)
    80019a66:	f52e                	sd	a1,168(sp)
    80019a68:	f936                	sd	a3,176(sp)
    80019a6a:	a009                	j	80019a6c <_ZN6kernel2fs5inode9skip_path17h45b5cf4cf2eb7faeE+0x14>
    while path[cur] == b'/' {
    80019a6c:	75e6                	ld	a1,120(sp)
    80019a6e:	652a                	ld	a0,136(sp)
    80019a70:	f4aa                	sd	a0,104(sp)
    80019a72:	1ab57563          	bgeu	a0,a1,80019c1c <.LBB7_45+0xae>
    80019a76:	a009                	j	80019a78 <_ZN6kernel2fs5inode9skip_path17h45b5cf4cf2eb7faeE+0x20>
    80019a78:	650a                	ld	a0,128(sp)
    80019a7a:	75a6                	ld	a1,104(sp)
    80019a7c:	952e                	add	a0,a0,a1
    80019a7e:	00054503          	lbu	a0,0(a0)
    80019a82:	02f00593          	li	a1,47
    80019a86:	00b50963          	beq	a0,a1,80019a98 <_ZN6kernel2fs5inode9skip_path17h45b5cf4cf2eb7faeE+0x40>
    80019a8a:	a009                	j	80019a8c <_ZN6kernel2fs5inode9skip_path17h45b5cf4cf2eb7faeE+0x34>
    if path[cur] == 0 {
    80019a8c:	75e6                	ld	a1,120(sp)
    80019a8e:	652a                	ld	a0,136(sp)
    80019a90:	f0aa                	sd	a0,96(sp)
    80019a92:	00b56d63          	bltu	a0,a1,80019aac <_ZN6kernel2fs5inode9skip_path17h45b5cf4cf2eb7faeE+0x54>
    80019a96:	aa71                	j	80019c32 <.LBB7_46+0x12>
        cur += 1;
    80019a98:	65aa                	ld	a1,136(sp)
    80019a9a:	00158513          	addi	a0,a1,1
    80019a9e:	ecaa                	sd	a0,88(sp)
    80019aa0:	24b56b63          	bltu	a0,a1,80019cf6 <.LBB7_58>
    80019aa4:	a009                	j	80019aa6 <_ZN6kernel2fs5inode9skip_path17h45b5cf4cf2eb7faeE+0x4e>
    80019aa6:	6566                	ld	a0,88(sp)
    80019aa8:	e52a                	sd	a0,136(sp)
    while path[cur] == b'/' {
    80019aaa:	b7c9                	j	80019a6c <_ZN6kernel2fs5inode9skip_path17h45b5cf4cf2eb7faeE+0x14>
    if path[cur] == 0 {
    80019aac:	650a                	ld	a0,128(sp)
    80019aae:	7586                	ld	a1,96(sp)
    80019ab0:	952e                	add	a0,a0,a1
    80019ab2:	00054503          	lbu	a0,0(a0)
    80019ab6:	4581                	li	a1,0
    80019ab8:	00b51663          	bne	a0,a1,80019ac4 <_ZN6kernel2fs5inode9skip_path17h45b5cf4cf2eb7faeE+0x6c>
    80019abc:	a009                	j	80019abe <_ZN6kernel2fs5inode9skip_path17h45b5cf4cf2eb7faeE+0x66>
    80019abe:	4501                	li	a0,0
        return 0
    80019ac0:	e92a                	sd	a0,144(sp)
}
    80019ac2:	aa89                	j	80019c14 <.LBB7_45+0xa6>
    let start = cur;
    80019ac4:	652a                	ld	a0,136(sp)
    80019ac6:	e8aa                	sd	a0,80(sp)
    80019ac8:	fd2a                	sd	a0,184(sp)
    while path[cur] != b'/' && path[cur] != 0 {
    80019aca:	a009                	j	80019acc <_ZN6kernel2fs5inode9skip_path17h45b5cf4cf2eb7faeE+0x74>
    80019acc:	75e6                	ld	a1,120(sp)
    80019ace:	652a                	ld	a0,136(sp)
    80019ad0:	e4aa                	sd	a0,72(sp)
    80019ad2:	02b56663          	bltu	a0,a1,80019afe <_ZN6kernel2fs5inode9skip_path17h45b5cf4cf2eb7faeE+0xa6>
    80019ad6:	aa8d                	j	80019c48 <.LBB7_47+0x12>
    80019ad8:	4505                	li	a0,1
    80019ada:	08a10fa3          	sb	a0,159(sp)
    80019ade:	a819                	j	80019af4 <_ZN6kernel2fs5inode9skip_path17h45b5cf4cf2eb7faeE+0x9c>
    80019ae0:	4501                	li	a0,0
    80019ae2:	08a10fa3          	sb	a0,159(sp)
    80019ae6:	a039                	j	80019af4 <_ZN6kernel2fs5inode9skip_path17h45b5cf4cf2eb7faeE+0x9c>
    80019ae8:	75e6                	ld	a1,120(sp)
    80019aea:	652a                	ld	a0,136(sp)
    80019aec:	e0aa                	sd	a0,64(sp)
    80019aee:	02b56263          	bltu	a0,a1,80019b12 <_ZN6kernel2fs5inode9skip_path17h45b5cf4cf2eb7faeE+0xba>
    80019af2:	a2b5                	j	80019c5e <.LBB7_48+0x12>
    80019af4:	09f14503          	lbu	a0,159(sp)
    80019af8:	8905                	andi	a0,a0,1
    80019afa:	ed0d                	bnez	a0,80019b34 <_ZN6kernel2fs5inode9skip_path17h45b5cf4cf2eb7faeE+0xdc>
    80019afc:	a025                	j	80019b24 <_ZN6kernel2fs5inode9skip_path17h45b5cf4cf2eb7faeE+0xcc>
    80019afe:	650a                	ld	a0,128(sp)
    80019b00:	65a6                	ld	a1,72(sp)
    80019b02:	952e                	add	a0,a0,a1
    80019b04:	00054503          	lbu	a0,0(a0)
    80019b08:	02f00593          	li	a1,47
    80019b0c:	fcb50ae3          	beq	a0,a1,80019ae0 <_ZN6kernel2fs5inode9skip_path17h45b5cf4cf2eb7faeE+0x88>
    80019b10:	bfe1                	j	80019ae8 <_ZN6kernel2fs5inode9skip_path17h45b5cf4cf2eb7faeE+0x90>
    80019b12:	650a                	ld	a0,128(sp)
    80019b14:	6586                	ld	a1,64(sp)
    80019b16:	952e                	add	a0,a0,a1
    80019b18:	00054503          	lbu	a0,0(a0)
    80019b1c:	4581                	li	a1,0
    80019b1e:	fcb501e3          	beq	a0,a1,80019ae0 <_ZN6kernel2fs5inode9skip_path17h45b5cf4cf2eb7faeE+0x88>
    80019b22:	bf5d                	j	80019ad8 <_ZN6kernel2fs5inode9skip_path17h45b5cf4cf2eb7faeE+0x80>
    let mut count = cur - start; 
    80019b24:	65c6                	ld	a1,80(sp)
    80019b26:	652a                	ld	a0,136(sp)
    80019b28:	40b505b3          	sub	a1,a0,a1
    80019b2c:	fc2e                	sd	a1,56(sp)
    80019b2e:	16b56163          	bltu	a0,a1,80019c90 <.LBB7_52>
    80019b32:	a819                	j	80019b48 <_ZN6kernel2fs5inode9skip_path17h45b5cf4cf2eb7faeE+0xf0>
        cur += 1;
    80019b34:	65aa                	ld	a1,136(sp)
    80019b36:	00158513          	addi	a0,a1,1
    80019b3a:	f82a                	sd	a0,48(sp)
    80019b3c:	12b56c63          	bltu	a0,a1,80019c74 <.LBB7_50>
    80019b40:	a009                	j	80019b42 <_ZN6kernel2fs5inode9skip_path17h45b5cf4cf2eb7faeE+0xea>
    80019b42:	7542                	ld	a0,48(sp)
    80019b44:	e52a                	sd	a0,136(sp)
    while path[cur] != b'/' && path[cur] != 0 {
    80019b46:	b759                	j	80019acc <_ZN6kernel2fs5inode9skip_path17h45b5cf4cf2eb7faeE+0x74>
    let mut count = cur - start; 
    80019b48:	7546                	ld	a0,112(sp)
    80019b4a:	75e2                	ld	a1,56(sp)
    80019b4c:	e1ae                	sd	a1,192(sp)
    80019b4e:	45b9                	li	a1,14
    if count >= name.len() {
    80019b50:	00006097          	auipc	ra,0x6
    80019b54:	a84080e7          	jalr	-1404(ra) # 8001f5d4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hb06ce83b043493f3E>
    80019b58:	f42a                	sd	a0,40(sp)
    80019b5a:	a009                	j	80019b5c <_ZN6kernel2fs5inode9skip_path17h45b5cf4cf2eb7faeE+0x104>
    80019b5c:	7562                	ld	a0,56(sp)
    80019b5e:	75a2                	ld	a1,40(sp)
    80019b60:	02b56163          	bltu	a0,a1,80019b82 <.LBB7_45+0x14>
    80019b64:	a009                	j	80019b66 <.LBB7_44>

0000000080019b66 <.LBB7_44>:
        debug_assert!(false);
    80019b66:	00011517          	auipc	a0,0x11
    80019b6a:	eaa50513          	addi	a0,a0,-342 # 8002aa10 <.L__unnamed_39>

0000000080019b6e <.LBB7_45>:
    80019b6e:	00011617          	auipc	a2,0x11
    80019b72:	eba60613          	addi	a2,a2,-326 # 8002aa28 <.L__unnamed_40>
    80019b76:	45dd                	li	a1,23
    80019b78:	00008097          	auipc	ra,0x8
    80019b7c:	6fe080e7          	jalr	1790(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80019b80:	0000                	unimp
        ptr::copy(path.as_ptr().offset(start as isize), name.as_mut_ptr(), count);
    80019b82:	75e6                	ld	a1,120(sp)
    80019b84:	650a                	ld	a0,128(sp)
    80019b86:	00006097          	auipc	ra,0x6
    80019b8a:	aaa080e7          	jalr	-1366(ra) # 8001f630 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hf7620495824cfb20E>
    80019b8e:	f02a                	sd	a0,32(sp)
    80019b90:	a009                	j	80019b92 <.LBB7_45+0x24>
    80019b92:	65c6                	ld	a1,80(sp)
    80019b94:	7502                	ld	a0,32(sp)
    80019b96:	00006097          	auipc	ra,0x6
    80019b9a:	ca6080e7          	jalr	-858(ra) # 8001f83c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d562998c5c34b1bE>
    80019b9e:	ec2a                	sd	a0,24(sp)
    80019ba0:	a009                	j	80019ba2 <.LBB7_45+0x34>
    80019ba2:	7546                	ld	a0,112(sp)
    80019ba4:	45b9                	li	a1,14
    80019ba6:	00006097          	auipc	ra,0x6
    80019baa:	9e8080e7          	jalr	-1560(ra) # 8001f58e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h69a6648c691317bcE>
    80019bae:	e82a                	sd	a0,16(sp)
    80019bb0:	a009                	j	80019bb2 <.LBB7_45+0x44>
    80019bb2:	7662                	ld	a2,56(sp)
    80019bb4:	65e2                	ld	a1,24(sp)
    80019bb6:	6542                	ld	a0,16(sp)
    80019bb8:	0000b097          	auipc	ra,0xb
    80019bbc:	542080e7          	jalr	1346(ra) # 800250fa <memmove>
    80019bc0:	a009                	j	80019bc2 <.LBB7_45+0x54>
    80019bc2:	75e2                	ld	a1,56(sp)
    80019bc4:	4535                	li	a0,13
    name[count] = 0;
    80019bc6:	0eb56463          	bltu	a0,a1,80019cae <.LBB7_53+0x16>
    80019bca:	a009                	j	80019bcc <.LBB7_45+0x5e>
    80019bcc:	7546                	ld	a0,112(sp)
    80019bce:	75e2                	ld	a1,56(sp)
    80019bd0:	95aa                	add	a1,a1,a0
    80019bd2:	4501                	li	a0,0
    80019bd4:	00a58023          	sb	a0,0(a1)
    while path[cur] == b'/' {
    80019bd8:	a009                	j	80019bda <.LBB7_45+0x6c>
    80019bda:	75e6                	ld	a1,120(sp)
    80019bdc:	652a                	ld	a0,136(sp)
    80019bde:	e42a                	sd	a0,8(sp)
    80019be0:	0eb57263          	bgeu	a0,a1,80019cc4 <.LBB7_54+0x14>
    80019be4:	a009                	j	80019be6 <.LBB7_45+0x78>
    80019be6:	650a                	ld	a0,128(sp)
    80019be8:	65a2                	ld	a1,8(sp)
    80019bea:	952e                	add	a0,a0,a1
    80019bec:	00054503          	lbu	a0,0(a0)
    80019bf0:	02f00593          	li	a1,47
    80019bf4:	00b50663          	beq	a0,a1,80019c00 <.LBB7_45+0x92>
    80019bf8:	a009                	j	80019bfa <.LBB7_45+0x8c>
    cur
    80019bfa:	652a                	ld	a0,136(sp)
    80019bfc:	e92a                	sd	a0,144(sp)
}
    80019bfe:	a819                	j	80019c14 <.LBB7_45+0xa6>
        cur += 1;
    80019c00:	65aa                	ld	a1,136(sp)
    80019c02:	00158513          	addi	a0,a1,1
    80019c06:	e02a                	sd	a0,0(sp)
    80019c08:	0cb56963          	bltu	a0,a1,80019cda <.LBB7_56>
    80019c0c:	a009                	j	80019c0e <.LBB7_45+0xa0>
    80019c0e:	6502                	ld	a0,0(sp)
    80019c10:	e52a                	sd	a0,136(sp)
    while path[cur] == b'/' {
    80019c12:	b7e1                	j	80019bda <.LBB7_45+0x6c>
}
    80019c14:	654a                	ld	a0,144(sp)
    80019c16:	60ae                	ld	ra,200(sp)
    80019c18:	6169                	addi	sp,sp,208
    80019c1a:	8082                	ret
    while path[cur] == b'/' {
    80019c1c:	75e6                	ld	a1,120(sp)
    80019c1e:	7526                	ld	a0,104(sp)

0000000080019c20 <.LBB7_46>:
    80019c20:	00011617          	auipc	a2,0x11
    80019c24:	d6060613          	addi	a2,a2,-672 # 8002a980 <.L__unnamed_41>
    80019c28:	00008097          	auipc	ra,0x8
    80019c2c:	67a080e7          	jalr	1658(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80019c30:	0000                	unimp
    if path[cur] == 0 {
    80019c32:	75e6                	ld	a1,120(sp)
    80019c34:	7506                	ld	a0,96(sp)

0000000080019c36 <.LBB7_47>:
    80019c36:	00011617          	auipc	a2,0x11
    80019c3a:	d6260613          	addi	a2,a2,-670 # 8002a998 <.L__unnamed_42>
    80019c3e:	00008097          	auipc	ra,0x8
    80019c42:	664080e7          	jalr	1636(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80019c46:	0000                	unimp
    while path[cur] != b'/' && path[cur] != 0 {
    80019c48:	75e6                	ld	a1,120(sp)
    80019c4a:	6526                	ld	a0,72(sp)

0000000080019c4c <.LBB7_48>:
    80019c4c:	00011617          	auipc	a2,0x11
    80019c50:	d6460613          	addi	a2,a2,-668 # 8002a9b0 <.L__unnamed_43>
    80019c54:	00008097          	auipc	ra,0x8
    80019c58:	64e080e7          	jalr	1614(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80019c5c:	0000                	unimp
    80019c5e:	75e6                	ld	a1,120(sp)
    80019c60:	6506                	ld	a0,64(sp)

0000000080019c62 <.LBB7_49>:
    80019c62:	00011617          	auipc	a2,0x11
    80019c66:	d6660613          	addi	a2,a2,-666 # 8002a9c8 <.L__unnamed_44>
    80019c6a:	00008097          	auipc	ra,0x8
    80019c6e:	638080e7          	jalr	1592(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

0000000080019c74 <.LBB7_50>:
        cur += 1;
    80019c74:	00011517          	auipc	a0,0x11
    80019c78:	98c50513          	addi	a0,a0,-1652 # 8002a600 <str.0>

0000000080019c7c <.LBB7_51>:
    80019c7c:	00011617          	auipc	a2,0x11
    80019c80:	d6460613          	addi	a2,a2,-668 # 8002a9e0 <.L__unnamed_45>
    80019c84:	45f1                	li	a1,28
    80019c86:	00008097          	auipc	ra,0x8
    80019c8a:	5f0080e7          	jalr	1520(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080019c90 <.LBB7_52>:
    let mut count = cur - start; 
    80019c90:	00011517          	auipc	a0,0x11
    80019c94:	9c050513          	addi	a0,a0,-1600 # 8002a650 <str.1>

0000000080019c98 <.LBB7_53>:
    80019c98:	00011617          	auipc	a2,0x11
    80019c9c:	d6060613          	addi	a2,a2,-672 # 8002a9f8 <.L__unnamed_46>
    80019ca0:	02100593          	li	a1,33
    80019ca4:	00008097          	auipc	ra,0x8
    80019ca8:	5d2080e7          	jalr	1490(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80019cac:	0000                	unimp
    name[count] = 0;
    80019cae:	7562                	ld	a0,56(sp)

0000000080019cb0 <.LBB7_54>:
    80019cb0:	00011617          	auipc	a2,0x11
    80019cb4:	d9060613          	addi	a2,a2,-624 # 8002aa40 <.L__unnamed_47>
    80019cb8:	45b9                	li	a1,14
    80019cba:	00008097          	auipc	ra,0x8
    80019cbe:	5e8080e7          	jalr	1512(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80019cc2:	0000                	unimp
    while path[cur] == b'/' {
    80019cc4:	75e6                	ld	a1,120(sp)
    80019cc6:	6522                	ld	a0,8(sp)

0000000080019cc8 <.LBB7_55>:
    80019cc8:	00011617          	auipc	a2,0x11
    80019ccc:	d9060613          	addi	a2,a2,-624 # 8002aa58 <.L__unnamed_48>
    80019cd0:	00008097          	auipc	ra,0x8
    80019cd4:	5d2080e7          	jalr	1490(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

0000000080019cda <.LBB7_56>:
        cur += 1;
    80019cda:	00011517          	auipc	a0,0x11
    80019cde:	92650513          	addi	a0,a0,-1754 # 8002a600 <str.0>

0000000080019ce2 <.LBB7_57>:
    80019ce2:	00011617          	auipc	a2,0x11
    80019ce6:	d8e60613          	addi	a2,a2,-626 # 8002aa70 <.L__unnamed_49>
    80019cea:	45f1                	li	a1,28
    80019cec:	00008097          	auipc	ra,0x8
    80019cf0:	58a080e7          	jalr	1418(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080019cf6 <.LBB7_58>:
        cur += 1;
    80019cf6:	00011517          	auipc	a0,0x11
    80019cfa:	90a50513          	addi	a0,a0,-1782 # 8002a600 <str.0>

0000000080019cfe <.LBB7_59>:
    80019cfe:	00011617          	auipc	a2,0x11
    80019d02:	d8a60613          	addi	a2,a2,-630 # 8002aa88 <.L__unnamed_50>
    80019d06:	45f1                	li	a1,28
    80019d08:	00008097          	auipc	ra,0x8
    80019d0c:	56e080e7          	jalr	1390(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel2fs5inode9InodeData4stat17h1253d1c76b7156e3E:

0000000080019d12 <_ZN6kernel2fs5inode9InodeData4stat17h1253d1c76b7156e3E>:
    pub fn stat(&self, stat: &mut Stat) {
    80019d12:	1141                	addi	sp,sp,-16
    80019d14:	e02a                	sd	a0,0(sp)
    80019d16:	e42e                	sd	a1,8(sp)
        stat.dev = self.dev;
    80019d18:	4110                	lw	a2,0(a0)
    80019d1a:	c190                	sw	a2,0(a1)
        stat.inum = self.inum;
    80019d1c:	4150                	lw	a2,4(a0)
    80019d1e:	c1d0                	sw	a2,4(a1)
        stat.itype = self.dinode.itype;
    80019d20:	00851603          	lh	a2,8(a0)
    80019d24:	00c59423          	sh	a2,8(a1)
        stat.nlink = self.dinode.nlink;
    80019d28:	00e51603          	lh	a2,14(a0)
    80019d2c:	00c59523          	sh	a2,10(a1)
        stat.size = self.dinode.size as usize;
    80019d30:	01056503          	lwu	a0,16(a0)
    80019d34:	e988                	sd	a0,16(a1)
    }
    80019d36:	0141                	addi	sp,sp,16
    80019d38:	8082                	ret

Disassembly of section .text._ZN6kernel2fs5inode9InodeData8truncate17h7f63e14f2a03d309E:

0000000080019d3a <_ZN6kernel2fs5inode9InodeData8truncate17h7f63e14f2a03d309E>:
    pub fn truncate(&mut self, inode: &Inode) {
    80019d3a:	7149                	addi	sp,sp,-368
    80019d3c:	f686                	sd	ra,360(sp)
    80019d3e:	e4ae                	sd	a1,72(sp)
    80019d40:	e8aa                	sd	a0,80(sp)
    80019d42:	ee2a                	sd	a0,280(sp)
    80019d44:	f22e                	sd	a1,288(sp)
    80019d46:	4501                	li	a0,0
        for i in 0..NDIRECT {
    80019d48:	f4aa                	sd	a0,104(sp)
    80019d4a:	45b1                	li	a1,12
    80019d4c:	f8ae                	sd	a1,112(sp)
    80019d4e:	00006097          	auipc	ra,0x6
    80019d52:	bf4080e7          	jalr	-1036(ra) # 8001f942 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he0a8d93712e5493bE>
    80019d56:	ecaa                	sd	a0,88(sp)
    80019d58:	f0ae                	sd	a1,96(sp)
    80019d5a:	a009                	j	80019d5c <_ZN6kernel2fs5inode9InodeData8truncate17h7f63e14f2a03d309E+0x22>
    80019d5c:	7506                	ld	a0,96(sp)
    80019d5e:	65e6                	ld	a1,88(sp)
    80019d60:	fcae                	sd	a1,120(sp)
    80019d62:	e12a                	sd	a0,128(sp)
    80019d64:	a009                	j	80019d66 <_ZN6kernel2fs5inode9InodeData8truncate17h7f63e14f2a03d309E+0x2c>
    80019d66:	18a8                	addi	a0,sp,120
    80019d68:	00006097          	auipc	ra,0x6
    80019d6c:	b6c080e7          	jalr	-1172(ra) # 8001f8d4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE>
    80019d70:	e52a                	sd	a0,136(sp)
    80019d72:	e92e                	sd	a1,144(sp)
    80019d74:	a009                	j	80019d76 <_ZN6kernel2fs5inode9InodeData8truncate17h7f63e14f2a03d309E+0x3c>
    80019d76:	652a                	ld	a0,136(sp)
    80019d78:	4581                	li	a1,0
    80019d7a:	00b50463          	beq	a0,a1,80019d82 <_ZN6kernel2fs5inode9InodeData8truncate17h7f63e14f2a03d309E+0x48>
    80019d7e:	a009                	j	80019d80 <_ZN6kernel2fs5inode9InodeData8truncate17h7f63e14f2a03d309E+0x46>
    80019d80:	a801                	j	80019d90 <_ZN6kernel2fs5inode9InodeData8truncate17h7f63e14f2a03d309E+0x56>
        if self.dinode.addrs[NDIRECT] > 0 {
    80019d82:	6546                	ld	a0,80(sp)
    80019d84:	4168                	lw	a0,68(a0)
    80019d86:	4581                	li	a1,0
    80019d88:	06b51863          	bne	a0,a1,80019df8 <_ZN6kernel2fs5inode9InodeData8truncate17h7f63e14f2a03d309E+0xbe>
    80019d8c:	a061                	j	80019e14 <.LBB9_39+0x14>
        for i in 0..NDIRECT {
    80019d8e:	0000                	unimp
    80019d90:	65ca                	ld	a1,144(sp)
    80019d92:	e0ae                	sd	a1,64(sp)
    80019d94:	f62e                	sd	a1,296(sp)
    80019d96:	fa2e                	sd	a1,304(sp)
    80019d98:	fe2e                	sd	a1,312(sp)
    80019d9a:	4531                	li	a0,12
            if self.dinode.addrs[i] > 0 {
    80019d9c:	16b56663          	bltu	a0,a1,80019f08 <.LBB9_39+0x108>
    80019da0:	a009                	j	80019da2 <_ZN6kernel2fs5inode9InodeData8truncate17h7f63e14f2a03d309E+0x68>
    80019da2:	6546                	ld	a0,80(sp)
    80019da4:	6586                	ld	a1,64(sp)
    80019da6:	058a                	slli	a1,a1,0x2
    80019da8:	952e                	add	a0,a0,a1
    80019daa:	4948                	lw	a0,20(a0)
    80019dac:	4581                	li	a1,0
    80019dae:	00b50c63          	beq	a0,a1,80019dc6 <_ZN6kernel2fs5inode9InodeData8truncate17h7f63e14f2a03d309E+0x8c>
    80019db2:	a009                	j	80019db4 <_ZN6kernel2fs5inode9InodeData8truncate17h7f63e14f2a03d309E+0x7a>
                bfree(inode.dev, self.dinode.addrs[i]);
    80019db4:	6506                	ld	a0,64(sp)
    80019db6:	65a6                	ld	a1,72(sp)
    80019db8:	0085e583          	lwu	a1,8(a1)
    80019dbc:	fc2e                	sd	a1,56(sp)
    80019dbe:	45b5                	li	a1,13
    80019dc0:	00b56463          	bltu	a0,a1,80019dc8 <_ZN6kernel2fs5inode9InodeData8truncate17h7f63e14f2a03d309E+0x8e>
    80019dc4:	aaa9                	j	80019f1e <.LBB9_40+0x14>
            if self.dinode.addrs[i] > 0 {
    80019dc6:	a805                	j	80019df6 <_ZN6kernel2fs5inode9InodeData8truncate17h7f63e14f2a03d309E+0xbc>
                bfree(inode.dev, self.dinode.addrs[i]);
    80019dc8:	7562                	ld	a0,56(sp)
    80019dca:	65c6                	ld	a1,80(sp)
    80019dcc:	6606                	ld	a2,64(sp)
    80019dce:	060a                	slli	a2,a2,0x2
    80019dd0:	95b2                	add	a1,a1,a2
    80019dd2:	49cc                	lw	a1,20(a1)
    80019dd4:	fffeb097          	auipc	ra,0xfffeb
    80019dd8:	e1c080e7          	jalr	-484(ra) # 80004bf0 <_ZN6kernel2fs6bitmap5bfree17h2d4cb92b39e2512aE>
    80019ddc:	a009                	j	80019dde <_ZN6kernel2fs5inode9InodeData8truncate17h7f63e14f2a03d309E+0xa4>
    80019dde:	6586                	ld	a1,64(sp)
    80019de0:	4531                	li	a0,12
                self.dinode.addrs[i] = 0;
    80019de2:	14b56963          	bltu	a0,a1,80019f34 <.LBB9_41+0x14>
    80019de6:	a009                	j	80019de8 <_ZN6kernel2fs5inode9InodeData8truncate17h7f63e14f2a03d309E+0xae>
    80019de8:	6546                	ld	a0,80(sp)
    80019dea:	6586                	ld	a1,64(sp)
    80019dec:	058a                	slli	a1,a1,0x2
    80019dee:	95aa                	add	a1,a1,a0
    80019df0:	4501                	li	a0,0
    80019df2:	c9c8                	sw	a0,20(a1)
            if self.dinode.addrs[i] > 0 {
    80019df4:	a009                	j	80019df6 <_ZN6kernel2fs5inode9InodeData8truncate17h7f63e14f2a03d309E+0xbc>
        for i in 0..NDIRECT {
    80019df6:	bf85                	j	80019d66 <_ZN6kernel2fs5inode9InodeData8truncate17h7f63e14f2a03d309E+0x2c>
            let buf = BCACHE.bread(inode.dev, self.dinode.addrs[NDIRECT]);
    80019df8:	6526                	ld	a0,72(sp)
    80019dfa:	65c6                	ld	a1,80(sp)
    80019dfc:	41f4                	lw	a3,68(a1)
    80019dfe:	4510                	lw	a2,8(a0)

0000000080019e00 <.LBB9_39>:
    80019e00:	00015597          	auipc	a1,0x15
    80019e04:	20058593          	addi	a1,a1,512 # 8002f000 <_ZN6kernel2fs3bio6BCACHE17h4811aac4f8d79dc4E>
    80019e08:	0928                	addi	a0,sp,152
    80019e0a:	fffe9097          	auipc	ra,0xfffe9
    80019e0e:	7f2080e7          	jalr	2034(ra) # 800035fc <_ZN6kernel2fs3bio6Bcache5bread17h6ef915e4e896646bE>
    80019e12:	a011                	j	80019e16 <.LBB9_39+0x16>
        if self.dinode.addrs[NDIRECT] > 0 {
    80019e14:	a8f9                	j	80019ef2 <.LBB9_39+0xf2>
    80019e16:	0928                	addi	a0,sp,152
            let buf_ptr = buf.raw_data() as *const BlockNo;
    80019e18:	fffea097          	auipc	ra,0xfffea
    80019e1c:	92a080e7          	jalr	-1750(ra) # 80003742 <_ZN6kernel2fs3bio3Buf8raw_data17h6a896fea03f7ee91E>
    80019e20:	f82a                	sd	a0,48(sp)
    80019e22:	a009                	j	80019e24 <.LBB9_39+0x24>
    80019e24:	7542                	ld	a0,48(sp)
    80019e26:	85aa                	mv	a1,a0
    80019e28:	ec2e                	sd	a1,24(sp)
    80019e2a:	e2aa                	sd	a0,320(sp)
    80019e2c:	4501                	li	a0,0
            for i in 0..NINDIRECT {
    80019e2e:	e1aa                	sd	a0,192(sp)
    80019e30:	08000593          	li	a1,128
    80019e34:	e5ae                	sd	a1,200(sp)
    80019e36:	00006097          	auipc	ra,0x6
    80019e3a:	b0c080e7          	jalr	-1268(ra) # 8001f942 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he0a8d93712e5493bE>
    80019e3e:	f02a                	sd	a0,32(sp)
    80019e40:	f42e                	sd	a1,40(sp)
    80019e42:	a009                	j	80019e44 <.LBB9_39+0x44>
    80019e44:	7522                	ld	a0,40(sp)
    80019e46:	7582                	ld	a1,32(sp)
    80019e48:	e9ae                	sd	a1,208(sp)
    80019e4a:	edaa                	sd	a0,216(sp)
    80019e4c:	a009                	j	80019e4e <.LBB9_39+0x4e>
    80019e4e:	0988                	addi	a0,sp,208
    80019e50:	00006097          	auipc	ra,0x6
    80019e54:	a84080e7          	jalr	-1404(ra) # 8001f8d4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE>
    80019e58:	f1aa                	sd	a0,224(sp)
    80019e5a:	f5ae                	sd	a1,232(sp)
    80019e5c:	a009                	j	80019e5e <.LBB9_39+0x5e>
    80019e5e:	750e                	ld	a0,224(sp)
    80019e60:	4581                	li	a1,0
    80019e62:	00b50463          	beq	a0,a1,80019e6a <.LBB9_39+0x6a>
    80019e66:	a009                	j	80019e68 <.LBB9_39+0x68>
    80019e68:	a015                	j	80019e8c <.LBB9_39+0x8c>
            drop(buf);
    80019e6a:	756a                	ld	a0,184(sp)
    80019e6c:	ea2a                	sd	a0,272(sp)
    80019e6e:	754a                	ld	a0,176(sp)
    80019e70:	e62a                	sd	a0,264(sp)
    80019e72:	752a                	ld	a0,168(sp)
    80019e74:	e22a                	sd	a0,256(sp)
    80019e76:	750a                	ld	a0,160(sp)
    80019e78:	fdaa                	sd	a0,248(sp)
    80019e7a:	656a                	ld	a0,152(sp)
    80019e7c:	f9aa                	sd	a0,240(sp)
    80019e7e:	1988                	addi	a0,sp,240
    80019e80:	00003097          	auipc	ra,0x3
    80019e84:	2da080e7          	jalr	730(ra) # 8001d15a <_ZN4core3mem4drop17hda1e19029436deb9E>
    80019e88:	a881                	j	80019ed8 <.LBB9_39+0xd8>
            for i in 0..NINDIRECT {
    80019e8a:	0000                	unimp
    80019e8c:	6562                	ld	a0,24(sp)
    80019e8e:	75ae                	ld	a1,232(sp)
    80019e90:	e6ae                	sd	a1,328(sp)
    80019e92:	eaae                	sd	a1,336(sp)
    80019e94:	eeae                	sd	a1,344(sp)
                let bn = unsafe{ read(buf_ptr.offset(i as isize)) };
    80019e96:	fffeb097          	auipc	ra,0xfffeb
    80019e9a:	9b4080e7          	jalr	-1612(ra) # 8000484a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h936ab5e813f51efdE>
    80019e9e:	e82a                	sd	a0,16(sp)
    80019ea0:	a009                	j	80019ea2 <.LBB9_39+0xa2>
    80019ea2:	6542                	ld	a0,16(sp)
    80019ea4:	fffff097          	auipc	ra,0xfffff
    80019ea8:	842080e7          	jalr	-1982(ra) # 800186e6 <_ZN4core3ptr4read17h97f5e0e151e0fdc4E>
    80019eac:	85aa                	mv	a1,a0
    80019eae:	e42e                	sd	a1,8(sp)
    80019eb0:	16a12223          	sw	a0,356(sp)
    80019eb4:	a009                	j	80019eb6 <.LBB9_39+0xb6>
                if bn > 0 {
    80019eb6:	6522                	ld	a0,8(sp)
    80019eb8:	2501                	sext.w	a0,a0
    80019eba:	4581                	li	a1,0
    80019ebc:	00b50b63          	beq	a0,a1,80019ed2 <.LBB9_39+0xd2>
    80019ec0:	a009                	j	80019ec2 <.LBB9_39+0xc2>
                    bfree(inode.dev, bn);
    80019ec2:	65a2                	ld	a1,8(sp)
    80019ec4:	6526                	ld	a0,72(sp)
    80019ec6:	4508                	lw	a0,8(a0)
    80019ec8:	fffeb097          	auipc	ra,0xfffeb
    80019ecc:	d28080e7          	jalr	-728(ra) # 80004bf0 <_ZN6kernel2fs6bitmap5bfree17h2d4cb92b39e2512aE>
    80019ed0:	a011                	j	80019ed4 <.LBB9_39+0xd4>
                if bn > 0 {
    80019ed2:	a011                	j	80019ed6 <.LBB9_39+0xd6>
    80019ed4:	a009                	j	80019ed6 <.LBB9_39+0xd6>
            for i in 0..NINDIRECT {
    80019ed6:	bfa5                	j	80019e4e <.LBB9_39+0x4e>
            bfree(inode.dev, self.dinode.addrs[NDIRECT]);
    80019ed8:	6526                	ld	a0,72(sp)
    80019eda:	65c6                	ld	a1,80(sp)
    80019edc:	41ec                	lw	a1,68(a1)
    80019ede:	4508                	lw	a0,8(a0)
    80019ee0:	fffeb097          	auipc	ra,0xfffeb
    80019ee4:	d10080e7          	jalr	-752(ra) # 80004bf0 <_ZN6kernel2fs6bitmap5bfree17h2d4cb92b39e2512aE>
    80019ee8:	a009                	j	80019eea <.LBB9_39+0xea>
    80019eea:	65c6                	ld	a1,80(sp)
    80019eec:	4501                	li	a0,0
            self.dinode.addrs[NDIRECT] = 0;
    80019eee:	c1e8                	sw	a0,68(a1)
        if self.dinode.addrs[NDIRECT] > 0 {
    80019ef0:	a009                	j	80019ef2 <.LBB9_39+0xf2>
    80019ef2:	6546                	ld	a0,80(sp)
    80019ef4:	4581                	li	a1,0
        self.dinode.size = 0;
    80019ef6:	c90c                	sw	a1,16(a0)
        self.update();
    80019ef8:	00000097          	auipc	ra,0x0
    80019efc:	052080e7          	jalr	82(ra) # 80019f4a <_ZN6kernel2fs5inode9InodeData6update17h81f49ab31d0ddfdcE>
    80019f00:	a009                	j	80019f02 <.LBB9_39+0x102>
    }
    80019f02:	70b6                	ld	ra,360(sp)
    80019f04:	6175                	addi	sp,sp,368
    80019f06:	8082                	ret
            if self.dinode.addrs[i] > 0 {
    80019f08:	6506                	ld	a0,64(sp)

0000000080019f0a <.LBB9_40>:
    80019f0a:	00011617          	auipc	a2,0x11
    80019f0e:	b9660613          	addi	a2,a2,-1130 # 8002aaa0 <.L__unnamed_51>
    80019f12:	45b5                	li	a1,13
    80019f14:	00008097          	auipc	ra,0x8
    80019f18:	38e080e7          	jalr	910(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80019f1c:	0000                	unimp
                bfree(inode.dev, self.dinode.addrs[i]);
    80019f1e:	6506                	ld	a0,64(sp)

0000000080019f20 <.LBB9_41>:
    80019f20:	00011617          	auipc	a2,0x11
    80019f24:	b9860613          	addi	a2,a2,-1128 # 8002aab8 <.L__unnamed_52>
    80019f28:	45b5                	li	a1,13
    80019f2a:	00008097          	auipc	ra,0x8
    80019f2e:	378080e7          	jalr	888(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80019f32:	0000                	unimp
                self.dinode.addrs[i] = 0;
    80019f34:	6506                	ld	a0,64(sp)

0000000080019f36 <.LBB9_42>:
    80019f36:	00011617          	auipc	a2,0x11
    80019f3a:	b9a60613          	addi	a2,a2,-1126 # 8002aad0 <.L__unnamed_53>
    80019f3e:	45b5                	li	a1,13
    80019f40:	00008097          	auipc	ra,0x8
    80019f44:	362080e7          	jalr	866(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel2fs5inode9InodeData6update17h81f49ab31d0ddfdcE:

0000000080019f4a <_ZN6kernel2fs5inode9InodeData6update17h81f49ab31d0ddfdcE>:
    pub fn update(&mut self) {
    80019f4a:	7115                	addi	sp,sp,-224
    80019f4c:	ed86                	sd	ra,216(sp)
    80019f4e:	ec2a                	sd	a0,24(sp)
    80019f50:	e1aa                	sd	a0,192(sp)
            self.dev, 
    80019f52:	00056583          	lwu	a1,0(a0)
            unsafe { SUPER_BLOCK.locate_inode(self.inum)}
    80019f56:	f02e                	sd	a1,32(sp)
    80019f58:	414c                	lw	a1,4(a0)

0000000080019f5a <.LBB10_8>:
    80019f5a:	00057517          	auipc	a0,0x57
    80019f5e:	14650513          	addi	a0,a0,326 # 800710a0 <_ZN6kernel2fs10superblock11SUPER_BLOCK17hc3889871ecbe2b54E>
    80019f62:	fffed097          	auipc	ra,0xfffed
    80019f66:	7ee080e7          	jalr	2030(ra) # 80007750 <_ZN6kernel2fs10superblock10SuperBlock12locate_inode17hc2dbfb20b9411e7cE>
    80019f6a:	f42a                	sd	a0,40(sp)
    80019f6c:	a009                	j	80019f6e <.LBB10_8+0x14>
        let mut buf = BCACHE.bread(
    80019f6e:	76a2                	ld	a3,40(sp)
    80019f70:	7602                	ld	a2,32(sp)

0000000080019f72 <.LBB10_9>:
    80019f72:	00015597          	auipc	a1,0x15
    80019f76:	08e58593          	addi	a1,a1,142 # 8002f000 <_ZN6kernel2fs3bio6BCACHE17h4811aac4f8d79dc4E>
    80019f7a:	1808                	addi	a0,sp,48
    80019f7c:	fffe9097          	auipc	ra,0xfffe9
    80019f80:	680080e7          	jalr	1664(ra) # 800035fc <_ZN6kernel2fs3bio6Bcache5bread17h6ef915e4e896646bE>
    80019f84:	a009                	j	80019f86 <.LBB10_9+0x14>
        let offset = locate_inode_offset(self.inum) as isize;
    80019f86:	6562                	ld	a0,24(sp)
    80019f88:	4148                	lw	a0,4(a0)
    80019f8a:	00001097          	auipc	ra,0x1
    80019f8e:	126080e7          	jalr	294(ra) # 8001b0b0 <_ZN6kernel2fs5inode19locate_inode_offset17h88c1ade407c59915E>
    80019f92:	e82a                	sd	a0,16(sp)
    80019f94:	a009                	j	80019f96 <.LBB10_9+0x24>
    80019f96:	6542                	ld	a0,16(sp)
    80019f98:	e5aa                	sd	a0,200(sp)
    80019f9a:	1808                	addi	a0,sp,48
        let dinode = unsafe{ (buf.raw_data_mut() as *mut DiskInode).offset(offset) };
    80019f9c:	fffe9097          	auipc	ra,0xfffe9
    80019fa0:	7ea080e7          	jalr	2026(ra) # 80003786 <_ZN6kernel2fs3bio3Buf12raw_data_mut17hbae73c10d57c515dE>
    80019fa4:	e42a                	sd	a0,8(sp)
    80019fa6:	a009                	j	80019fa8 <.LBB10_9+0x36>
    80019fa8:	65c2                	ld	a1,16(sp)
    80019faa:	6522                	ld	a0,8(sp)
    80019fac:	ffffe097          	auipc	ra,0xffffe
    80019fb0:	4a4080e7          	jalr	1188(ra) # 80018450 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hf7573a6302c08e61E>
    80019fb4:	85aa                	mv	a1,a0
    80019fb6:	e02e                	sd	a1,0(sp)
    80019fb8:	e9aa                	sd	a0,208(sp)
    80019fba:	a009                	j	80019fbc <.LBB10_9+0x4a>
        unsafe{ write(dinode, self.dinode) };
    80019fbc:	6502                	ld	a0,0(sp)
    80019fbe:	65e2                	ld	a1,24(sp)
    80019fc0:	0405e683          	lwu	a3,64(a1)
    80019fc4:	0445e603          	lwu	a2,68(a1)
    80019fc8:	1602                	slli	a2,a2,0x20
    80019fca:	8e55                	or	a2,a2,a3
    80019fcc:	e932                	sd	a2,144(sp)
    80019fce:	0385e683          	lwu	a3,56(a1)
    80019fd2:	03c5e603          	lwu	a2,60(a1)
    80019fd6:	1602                	slli	a2,a2,0x20
    80019fd8:	8e55                	or	a2,a2,a3
    80019fda:	e532                	sd	a2,136(sp)
    80019fdc:	0305e683          	lwu	a3,48(a1)
    80019fe0:	0345e603          	lwu	a2,52(a1)
    80019fe4:	1602                	slli	a2,a2,0x20
    80019fe6:	8e55                	or	a2,a2,a3
    80019fe8:	e132                	sd	a2,128(sp)
    80019fea:	0285e683          	lwu	a3,40(a1)
    80019fee:	02c5e603          	lwu	a2,44(a1)
    80019ff2:	1602                	slli	a2,a2,0x20
    80019ff4:	8e55                	or	a2,a2,a3
    80019ff6:	fcb2                	sd	a2,120(sp)
    80019ff8:	0205e683          	lwu	a3,32(a1)
    80019ffc:	0245e603          	lwu	a2,36(a1)
    8001a000:	1602                	slli	a2,a2,0x20
    8001a002:	8e55                	or	a2,a2,a3
    8001a004:	f8b2                	sd	a2,112(sp)
    8001a006:	0185e683          	lwu	a3,24(a1)
    8001a00a:	01c5e603          	lwu	a2,28(a1)
    8001a00e:	1602                	slli	a2,a2,0x20
    8001a010:	8e55                	or	a2,a2,a3
    8001a012:	f4b2                	sd	a2,104(sp)
    8001a014:	0105e683          	lwu	a3,16(a1)
    8001a018:	0145e603          	lwu	a2,20(a1)
    8001a01c:	1602                	slli	a2,a2,0x20
    8001a01e:	8e55                	or	a2,a2,a3
    8001a020:	f0b2                	sd	a2,96(sp)
    8001a022:	0085e603          	lwu	a2,8(a1)
    8001a026:	00c5e583          	lwu	a1,12(a1)
    8001a02a:	1582                	slli	a1,a1,0x20
    8001a02c:	8dd1                	or	a1,a1,a2
    8001a02e:	ecae                	sd	a1,88(sp)
    8001a030:	08ac                	addi	a1,sp,88
    8001a032:	fffff097          	auipc	ra,0xfffff
    8001a036:	8b0080e7          	jalr	-1872(ra) # 800188e2 <_ZN4core3ptr5write17h24d2ac6ea724fbc0E>
    8001a03a:	a009                	j	8001a03c <.LBB10_9+0xca>
        LOG.write(buf);
    8001a03c:	6546                	ld	a0,80(sp)
    8001a03e:	fd2a                	sd	a0,184(sp)
    8001a040:	6526                	ld	a0,72(sp)
    8001a042:	f92a                	sd	a0,176(sp)
    8001a044:	6506                	ld	a0,64(sp)
    8001a046:	f52a                	sd	a0,168(sp)
    8001a048:	7562                	ld	a0,56(sp)
    8001a04a:	f12a                	sd	a0,160(sp)
    8001a04c:	7542                	ld	a0,48(sp)
    8001a04e:	ed2a                	sd	a0,152(sp)

000000008001a050 <.LBB10_10>:
    8001a050:	0004e517          	auipc	a0,0x4e
    8001a054:	99850513          	addi	a0,a0,-1640 # 800679e8 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    8001a058:	092c                	addi	a1,sp,152
    8001a05a:	fffef097          	auipc	ra,0xfffef
    8001a05e:	d4a080e7          	jalr	-694(ra) # 80008da4 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$5write17ha48e3edeecccac4fE>
    8001a062:	a009                	j	8001a064 <.LBB10_10+0x14>
    }
    8001a064:	60ee                	ld	ra,216(sp)
    8001a066:	612d                	addi	sp,sp,224
    8001a068:	8082                	ret

Disassembly of section .text._ZN6kernel2fs5inode9InodeData4bmap17hd73981f79cf26766E:

000000008001a06a <_ZN6kernel2fs5inode9InodeData4bmap17hd73981f79cf26766E>:
    pub fn bmap(&mut self, offset_bn: u32) -> Result<u32, &'static str> {
    8001a06a:	7111                	addi	sp,sp,-256
    8001a06c:	fd86                	sd	ra,248(sp)
    8001a06e:	ecae                	sd	a1,88(sp)
    8001a070:	85aa                	mv	a1,a0
    8001a072:	6566                	ld	a0,88(sp)
    8001a074:	f0ae                	sd	a1,96(sp)
    8001a076:	0006059b          	sext.w	a1,a2
    8001a07a:	e9aa                	sd	a0,208(sp)
    8001a07c:	cfb2                	sw	a2,220(sp)
    8001a07e:	4501                	li	a0,0
        let mut addr;
    8001a080:	0ca107a3          	sb	a0,207(sp)
        let offset_bn = offset_bn as usize;
    8001a084:	02061513          	slli	a0,a2,0x20
    8001a088:	9101                	srli	a0,a0,0x20
    8001a08a:	f4aa                	sd	a0,104(sp)
    8001a08c:	f1aa                	sd	a0,224(sp)
    8001a08e:	452d                	li	a0,11
        if offset_bn < NDIRECT {
    8001a090:	00b56863          	bltu	a0,a1,8001a0a0 <_ZN6kernel2fs5inode9InodeData4bmap17hd73981f79cf26766E+0x36>
    8001a094:	a009                	j	8001a096 <_ZN6kernel2fs5inode9InodeData4bmap17hd73981f79cf26766E+0x2c>
    8001a096:	7526                	ld	a0,104(sp)
    8001a098:	45b5                	li	a1,13
            if self.dinode.addrs[offset_bn] == 0 {
    8001a09a:	00b56963          	bltu	a0,a1,8001a0ac <_ZN6kernel2fs5inode9InodeData4bmap17hd73981f79cf26766E+0x42>
    8001a09e:	a2e1                	j	8001a266 <.LBB11_37+0x44>
    8001a0a0:	7526                	ld	a0,104(sp)
    8001a0a2:	08c00593          	li	a1,140
        if offset_bn < NINDIRECT + NDIRECT {
    8001a0a6:	06b56963          	bltu	a0,a1,8001a118 <_ZN6kernel2fs5inode9InodeData4bmap17hd73981f79cf26766E+0xae>
    8001a0aa:	a8b5                	j	8001a126 <.LBB11_34>
            if self.dinode.addrs[offset_bn] == 0 {
    8001a0ac:	6566                	ld	a0,88(sp)
    8001a0ae:	75a6                	ld	a1,104(sp)
    8001a0b0:	058a                	slli	a1,a1,0x2
    8001a0b2:	952e                	add	a0,a0,a1
    8001a0b4:	4948                	lw	a0,20(a0)
    8001a0b6:	4581                	li	a1,0
    8001a0b8:	00b51b63          	bne	a0,a1,8001a0ce <_ZN6kernel2fs5inode9InodeData4bmap17hd73981f79cf26766E+0x64>
    8001a0bc:	a009                	j	8001a0be <_ZN6kernel2fs5inode9InodeData4bmap17hd73981f79cf26766E+0x54>
                addr = balloc(self.dev);
    8001a0be:	6566                	ld	a0,88(sp)
    8001a0c0:	4108                	lw	a0,0(a0)
    8001a0c2:	fffeb097          	auipc	ra,0xfffeb
    8001a0c6:	c3e080e7          	jalr	-962(ra) # 80004d00 <_ZN6kernel2fs6bitmap6balloc17hb1927bc98cc6e122E>
    8001a0ca:	e8aa                	sd	a0,80(sp)
    8001a0cc:	a031                	j	8001a0d8 <_ZN6kernel2fs5inode9InodeData4bmap17hd73981f79cf26766E+0x6e>
    8001a0ce:	7526                	ld	a0,104(sp)
    8001a0d0:	45b5                	li	a1,13
                return Ok(self.dinode.addrs[offset_bn])
    8001a0d2:	02b56963          	bltu	a0,a1,8001a104 <_ZN6kernel2fs5inode9InodeData4bmap17hd73981f79cf26766E+0x9a>
    8001a0d6:	a25d                	j	8001a27c <.LBB11_38+0x14>
                addr = balloc(self.dev);
    8001a0d8:	75a6                	ld	a1,104(sp)
    8001a0da:	6546                	ld	a0,80(sp)
    8001a0dc:	daaa                	sw	a0,116(sp)
                self.dinode.addrs[offset_bn] = addr;
    8001a0de:	1502                	slli	a0,a0,0x20
    8001a0e0:	9101                	srli	a0,a0,0x20
    8001a0e2:	e4aa                	sd	a0,72(sp)
    8001a0e4:	4531                	li	a0,12
    8001a0e6:	1ab56663          	bltu	a0,a1,8001a292 <.LBB11_39+0x14>
    8001a0ea:	a009                	j	8001a0ec <_ZN6kernel2fs5inode9InodeData4bmap17hd73981f79cf26766E+0x82>
    8001a0ec:	7586                	ld	a1,96(sp)
    8001a0ee:	6526                	ld	a0,72(sp)
    8001a0f0:	6666                	ld	a2,88(sp)
    8001a0f2:	76a6                	ld	a3,104(sp)
    8001a0f4:	068a                	slli	a3,a3,0x2
    8001a0f6:	9636                	add	a2,a2,a3
    8001a0f8:	ca48                	sw	a0,20(a2)
                return Ok(addr)
    8001a0fa:	5556                	lw	a0,116(sp)
    8001a0fc:	c1c8                	sw	a0,4(a1)
    8001a0fe:	4501                	li	a0,0
    8001a100:	c188                	sw	a0,0(a1)
    8001a102:	aa89                	j	8001a254 <.LBB11_37+0x32>
                return Ok(self.dinode.addrs[offset_bn])
    8001a104:	7586                	ld	a1,96(sp)
    8001a106:	6566                	ld	a0,88(sp)
    8001a108:	7626                	ld	a2,104(sp)
    8001a10a:	060a                	slli	a2,a2,0x2
    8001a10c:	9532                	add	a0,a0,a2
    8001a10e:	4948                	lw	a0,20(a0)
    8001a110:	c1c8                	sw	a0,4(a1)
    8001a112:	4501                	li	a0,0
    8001a114:	c188                	sw	a0,0(a1)
    8001a116:	aa3d                	j	8001a254 <.LBB11_37+0x32>
            let count = offset_bn - NDIRECT;
    8001a118:	7526                	ld	a0,104(sp)
    8001a11a:	ff450593          	addi	a1,a0,-12
    8001a11e:	e0ae                	sd	a1,64(sp)
    8001a120:	18b56463          	bltu	a0,a1,8001a2a8 <.LBB11_41>
    8001a124:	a839                	j	8001a142 <.LBB11_35+0x14>

000000008001a126 <.LBB11_34>:
        panic!("inode bmap: out of range.");
    8001a126:	00011517          	auipc	a0,0x11
    8001a12a:	a2250513          	addi	a0,a0,-1502 # 8002ab48 <.L__unnamed_54>

000000008001a12e <.LBB11_35>:
    8001a12e:	00011617          	auipc	a2,0x11
    8001a132:	a3a60613          	addi	a2,a2,-1478 # 8002ab68 <.L__unnamed_55>
    8001a136:	45e5                	li	a1,25
    8001a138:	00008097          	auipc	ra,0x8
    8001a13c:	13e080e7          	jalr	318(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8001a140:	0000                	unimp
            let count = offset_bn - NDIRECT;
    8001a142:	6566                	ld	a0,88(sp)
    8001a144:	6586                	ld	a1,64(sp)
    8001a146:	f5ae                	sd	a1,232(sp)
            if self.dinode.addrs[NDIRECT] == 0 {
    8001a148:	4168                	lw	a0,68(a0)
    8001a14a:	4581                	li	a1,0
    8001a14c:	00b51b63          	bne	a0,a1,8001a162 <.LBB11_35+0x34>
    8001a150:	a009                	j	8001a152 <.LBB11_35+0x24>
                addr = balloc(self.dev);
    8001a152:	6566                	ld	a0,88(sp)
    8001a154:	4108                	lw	a0,0(a0)
    8001a156:	fffeb097          	auipc	ra,0xfffeb
    8001a15a:	baa080e7          	jalr	-1110(ra) # 80004d00 <_ZN6kernel2fs6bitmap6balloc17hb1927bc98cc6e122E>
    8001a15e:	fc2a                	sd	a0,56(sp)
    8001a160:	a029                	j	8001a16a <.LBB11_35+0x3c>
                addr = self.dinode.addrs[NDIRECT]
    8001a162:	6566                	ld	a0,88(sp)
    8001a164:	4168                	lw	a0,68(a0)
    8001a166:	daaa                	sw	a0,116(sp)
            if self.dinode.addrs[NDIRECT] == 0 {
    8001a168:	a031                	j	8001a174 <.LBB11_35+0x46>
                addr = balloc(self.dev);
    8001a16a:	7562                	ld	a0,56(sp)
    8001a16c:	65e6                	ld	a1,88(sp)
    8001a16e:	daaa                	sw	a0,116(sp)
                self.dinode.addrs[NDIRECT] = addr;
    8001a170:	c1e8                	sw	a0,68(a1)
            if self.dinode.addrs[NDIRECT] == 0 {
    8001a172:	a009                	j	8001a174 <.LBB11_35+0x46>
            let buf = BCACHE.bread(self.dev, addr);
    8001a174:	6566                	ld	a0,88(sp)
    8001a176:	4110                	lw	a2,0(a0)
    8001a178:	4505                	li	a0,1
    8001a17a:	0ca107a3          	sb	a0,207(sp)
    8001a17e:	56d6                	lw	a3,116(sp)

000000008001a180 <.LBB11_36>:
    8001a180:	00015597          	auipc	a1,0x15
    8001a184:	e8058593          	addi	a1,a1,-384 # 8002f000 <_ZN6kernel2fs3bio6BCACHE17h4811aac4f8d79dc4E>
    8001a188:	18a8                	addi	a0,sp,120
    8001a18a:	fffe9097          	auipc	ra,0xfffe9
    8001a18e:	472080e7          	jalr	1138(ra) # 800035fc <_ZN6kernel2fs3bio6Bcache5bread17h6ef915e4e896646bE>
    8001a192:	a009                	j	8001a194 <.LBB11_36+0x14>
    8001a194:	18a8                	addi	a0,sp,120
            let buf_data = buf.raw_data() as *mut u32;
    8001a196:	fffe9097          	auipc	ra,0xfffe9
    8001a19a:	5ac080e7          	jalr	1452(ra) # 80003742 <_ZN6kernel2fs3bio3Buf8raw_data17h6a896fea03f7ee91E>
    8001a19e:	f82a                	sd	a0,48(sp)
    8001a1a0:	a009                	j	8001a1a2 <.LBB11_36+0x22>
    8001a1a2:	6586                	ld	a1,64(sp)
    8001a1a4:	7542                	ld	a0,48(sp)
    8001a1a6:	862a                	mv	a2,a0
    8001a1a8:	f032                	sd	a2,32(sp)
    8001a1aa:	f9aa                	sd	a0,240(sp)
            addr = unsafe{ read(buf_data.offset(count as isize)) };
    8001a1ac:	fffee097          	auipc	ra,0xfffee
    8001a1b0:	762080e7          	jalr	1890(ra) # 8000890e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h9889ec684d0da599E>
    8001a1b4:	f42a                	sd	a0,40(sp)
    8001a1b6:	a009                	j	8001a1b8 <.LBB11_36+0x38>
    8001a1b8:	7522                	ld	a0,40(sp)
    8001a1ba:	ffffe097          	auipc	ra,0xffffe
    8001a1be:	52c080e7          	jalr	1324(ra) # 800186e6 <_ZN4core3ptr4read17h97f5e0e151e0fdc4E>
    8001a1c2:	ec2a                	sd	a0,24(sp)
    8001a1c4:	a009                	j	8001a1c6 <.LBB11_36+0x46>
    8001a1c6:	6562                	ld	a0,24(sp)
    8001a1c8:	daaa                	sw	a0,116(sp)
    8001a1ca:	2501                	sext.w	a0,a0
    8001a1cc:	4581                	li	a1,0
            if addr == 0 {
    8001a1ce:	00b51b63          	bne	a0,a1,8001a1e4 <.LBB11_36+0x64>
    8001a1d2:	a009                	j	8001a1d4 <.LBB11_36+0x54>
                    addr = balloc(self.dev);
    8001a1d4:	6566                	ld	a0,88(sp)
    8001a1d6:	4108                	lw	a0,0(a0)
    8001a1d8:	fffeb097          	auipc	ra,0xfffeb
    8001a1dc:	b28080e7          	jalr	-1240(ra) # 80004d00 <_ZN6kernel2fs6bitmap6balloc17hb1927bc98cc6e122E>
    8001a1e0:	e82a                	sd	a0,16(sp)
    8001a1e2:	a011                	j	8001a1e6 <.LBB11_36+0x66>
            if addr == 0 {
    8001a1e4:	a891                	j	8001a238 <.LBB11_37+0x16>
                    addr = balloc(self.dev);
    8001a1e6:	6586                	ld	a1,64(sp)
    8001a1e8:	7502                	ld	a0,32(sp)
    8001a1ea:	6642                	ld	a2,16(sp)
    8001a1ec:	dab2                	sw	a2,116(sp)
                    write(buf_data.offset(count as isize), addr);
    8001a1ee:	fffee097          	auipc	ra,0xfffee
    8001a1f2:	720080e7          	jalr	1824(ra) # 8000890e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h9889ec684d0da599E>
    8001a1f6:	e42a                	sd	a0,8(sp)
    8001a1f8:	a009                	j	8001a1fa <.LBB11_36+0x7a>
    8001a1fa:	6522                	ld	a0,8(sp)
    8001a1fc:	55d6                	lw	a1,116(sp)
    8001a1fe:	ffffe097          	auipc	ra,0xffffe
    8001a202:	6d8080e7          	jalr	1752(ra) # 800188d6 <_ZN4core3ptr5write17h10d6d8799e54bf75E>
    8001a206:	a009                	j	8001a208 <.LBB11_36+0x88>
    8001a208:	4501                	li	a0,0
                LOG.write(buf);
    8001a20a:	0ca107a3          	sb	a0,207(sp)
    8001a20e:	7566                	ld	a0,120(sp)
    8001a210:	f12a                	sd	a0,160(sp)
    8001a212:	650a                	ld	a0,128(sp)
    8001a214:	f52a                	sd	a0,168(sp)
    8001a216:	652a                	ld	a0,136(sp)
    8001a218:	f92a                	sd	a0,176(sp)
    8001a21a:	654a                	ld	a0,144(sp)
    8001a21c:	fd2a                	sd	a0,184(sp)
    8001a21e:	656a                	ld	a0,152(sp)
    8001a220:	e1aa                	sd	a0,192(sp)

000000008001a222 <.LBB11_37>:
    8001a222:	0004d517          	auipc	a0,0x4d
    8001a226:	7c650513          	addi	a0,a0,1990 # 800679e8 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    8001a22a:	110c                	addi	a1,sp,160
    8001a22c:	fffef097          	auipc	ra,0xfffef
    8001a230:	b78080e7          	jalr	-1160(ra) # 80008da4 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$5write17ha48e3edeecccac4fE>
    8001a234:	a009                	j	8001a236 <.LBB11_37+0x14>
            if addr == 0 {
    8001a236:	a009                	j	8001a238 <.LBB11_37+0x16>
            return Ok(addr)
    8001a238:	7586                	ld	a1,96(sp)
    8001a23a:	5556                	lw	a0,116(sp)
    8001a23c:	c1c8                	sw	a0,4(a1)
    8001a23e:	4501                	li	a0,0
    8001a240:	c188                	sw	a0,0(a1)
        }
    8001a242:	0cf14503          	lbu	a0,207(sp)
    8001a246:	8905                	andi	a0,a0,1
    8001a248:	e909                	bnez	a0,8001a25a <.LBB11_37+0x38>
    8001a24a:	a009                	j	8001a24c <.LBB11_37+0x2a>
    8001a24c:	4501                	li	a0,0
    8001a24e:	0ca107a3          	sb	a0,207(sp)
    8001a252:	a009                	j	8001a254 <.LBB11_37+0x32>
    }
    8001a254:	70ee                	ld	ra,248(sp)
    8001a256:	6111                	addi	sp,sp,256
    8001a258:	8082                	ret
    8001a25a:	18a8                	addi	a0,sp,120
        }
    8001a25c:	fffed097          	auipc	ra,0xfffed
    8001a260:	bd2080e7          	jalr	-1070(ra) # 80006e2e <_ZN4core3ptr41drop_in_place$LT$kernel..fs..bio..Buf$GT$17hc35967244f3e9eb6E>
    8001a264:	b7e5                	j	8001a24c <.LBB11_37+0x2a>
            if self.dinode.addrs[offset_bn] == 0 {
    8001a266:	7526                	ld	a0,104(sp)

000000008001a268 <.LBB11_38>:
    8001a268:	00011617          	auipc	a2,0x11
    8001a26c:	88060613          	addi	a2,a2,-1920 # 8002aae8 <.L__unnamed_56>
    8001a270:	45b5                	li	a1,13
    8001a272:	00008097          	auipc	ra,0x8
    8001a276:	030080e7          	jalr	48(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    8001a27a:	0000                	unimp
                return Ok(self.dinode.addrs[offset_bn])
    8001a27c:	7526                	ld	a0,104(sp)

000000008001a27e <.LBB11_39>:
    8001a27e:	00011617          	auipc	a2,0x11
    8001a282:	88260613          	addi	a2,a2,-1918 # 8002ab00 <.L__unnamed_57>
    8001a286:	45b5                	li	a1,13
    8001a288:	00008097          	auipc	ra,0x8
    8001a28c:	01a080e7          	jalr	26(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    8001a290:	0000                	unimp
                self.dinode.addrs[offset_bn] = addr;
    8001a292:	7526                	ld	a0,104(sp)

000000008001a294 <.LBB11_40>:
    8001a294:	00011617          	auipc	a2,0x11
    8001a298:	88460613          	addi	a2,a2,-1916 # 8002ab18 <.L__unnamed_58>
    8001a29c:	45b5                	li	a1,13
    8001a29e:	00008097          	auipc	ra,0x8
    8001a2a2:	004080e7          	jalr	4(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

000000008001a2a8 <.LBB11_41>:
            let count = offset_bn - NDIRECT;
    8001a2a8:	00010517          	auipc	a0,0x10
    8001a2ac:	3a850513          	addi	a0,a0,936 # 8002a650 <str.1>

000000008001a2b0 <.LBB11_42>:
    8001a2b0:	00011617          	auipc	a2,0x11
    8001a2b4:	88060613          	addi	a2,a2,-1920 # 8002ab30 <.L__unnamed_59>
    8001a2b8:	02100593          	li	a1,33
    8001a2bc:	00008097          	auipc	ra,0x8
    8001a2c0:	fba080e7          	jalr	-70(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel2fs5inode9InodeData4read17h2d02dc0e430e4837E:

000000008001a2c6 <_ZN6kernel2fs5inode9InodeData4read17h2d02dc0e430e4837E>:
    pub fn read(
    8001a2c6:	dc010113          	addi	sp,sp,-576
    8001a2ca:	22113c23          	sd	ra,568(sp)
    8001a2ce:	e13e                	sd	a5,128(sp)
    8001a2d0:	e93a                	sd	a4,144(sp)
    8001a2d2:	8736                	mv	a4,a3
    8001a2d4:	86ae                	mv	a3,a1
    8001a2d6:	658a                	ld	a1,128(sp)
    8001a2d8:	e536                	sd	a3,136(sp)
    8001a2da:	87aa                	mv	a5,a0
    8001a2dc:	654a                	ld	a0,144(sp)
    8001a2de:	ed3e                	sd	a5,152(sp)
    8001a2e0:	87ae                	mv	a5,a1
    8001a2e2:	f13e                	sd	a5,160(sp)
    8001a2e4:	87aa                	mv	a5,a0
    8001a2e6:	f53e                	sd	a5,168(sp)
    8001a2e8:	87b2                	mv	a5,a2
    8001a2ea:	f93e                	sd	a5,176(sp)
    8001a2ec:	e5ba                	sd	a4,200(sp)
    8001a2ee:	efb6                	sd	a3,472(sp)
    8001a2f0:	1ec103a3          	sb	a2,487(sp)
    8001a2f4:	1ea12423          	sw	a0,488(sp)
    8001a2f8:	1eb12623          	sw	a1,492(sp)
        let end = offset.checked_add(count).ok_or("Fail to add count.")?;
    8001a2fc:	00004097          	auipc	ra,0x4
    8001a300:	b8e080e7          	jalr	-1138(ra) # 8001de8a <_ZN4core3num21_$LT$impl$u20$u32$GT$11checked_add17h28c8b802ca50f266E>
    8001a304:	fd2a                	sd	a0,184(sp)
    8001a306:	e1ae                	sd	a1,192(sp)
    8001a308:	a009                	j	8001a30a <_ZN6kernel2fs5inode9InodeData4read17h2d02dc0e430e4837E+0x44>
    8001a30a:	660e                	ld	a2,192(sp)
    8001a30c:	75ea                	ld	a1,184(sp)

000000008001a30e <.LBB12_42>:
    8001a30e:	00011697          	auipc	a3,0x11
    8001a312:	87268693          	addi	a3,a3,-1934 # 8002ab80 <.L__unnamed_60>
    8001a316:	11a8                	addi	a0,sp,232
    8001a318:	4749                	li	a4,18
    8001a31a:	ffff4097          	auipc	ra,0xffff4
    8001a31e:	57c080e7          	jalr	1404(ra) # 8000e896 <_ZN4core6option15Option$LT$T$GT$5ok_or17hac03a53b0754fc14E>
    8001a322:	a009                	j	8001a324 <.LBB12_42+0x16>
    8001a324:	0988                	addi	a0,sp,208
    8001a326:	11ac                	addi	a1,sp,232
    8001a328:	ffff3097          	auipc	ra,0xffff3
    8001a32c:	e8c080e7          	jalr	-372(ra) # 8000d1b4 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h3002ccf5391f70d3E>
    8001a330:	a009                	j	8001a332 <.LBB12_42+0x24>
    8001a332:	0d016503          	lwu	a0,208(sp)
    8001a336:	4581                	li	a1,0
    8001a338:	00b50463          	beq	a0,a1,8001a340 <.LBB12_42+0x32>
    8001a33c:	a009                	j	8001a33e <.LBB12_42+0x30>
    8001a33e:	a821                	j	8001a356 <.LBB12_42+0x48>
    8001a340:	652a                	ld	a0,136(sp)
    8001a342:	45de                	lw	a1,212(sp)
    8001a344:	20b12023          	sw	a1,512(sp)
    8001a348:	20b12223          	sw	a1,516(sp)
        if end > self.dinode.size {
    8001a34c:	4908                	lw	a0,16(a0)
    8001a34e:	02b56763          	bltu	a0,a1,8001a37c <.LBB12_42+0x6e>
    8001a352:	a089                	j	8001a394 <.LBB12_43+0x16>
        let end = offset.checked_add(count).ok_or("Fail to add count.")?;
    8001a354:	0000                	unimp
    8001a356:	656e                	ld	a0,216(sp)
    8001a358:	758e                	ld	a1,224(sp)
    8001a35a:	fbaa                	sd	a0,496(sp)
    8001a35c:	ffae                	sd	a1,504(sp)
    8001a35e:	ffff1097          	auipc	ra,0xffff1
    8001a362:	70e080e7          	jalr	1806(ra) # 8000ba6c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h6f3e3843c20d184aE>
    8001a366:	f8aa                	sd	a0,112(sp)
    8001a368:	fcae                	sd	a1,120(sp)
    8001a36a:	a009                	j	8001a36c <.LBB12_42+0x5e>
    8001a36c:	7666                	ld	a2,120(sp)
    8001a36e:	75c6                	ld	a1,112(sp)
    8001a370:	656a                	ld	a0,152(sp)
    8001a372:	ffff3097          	auipc	ra,0xffff3
    8001a376:	d3a080e7          	jalr	-710(ra) # 8000d0ac <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h4dd43adfe00292f6E>
    8001a37a:	a411                	j	8001a57e <.LBB12_45+0x5c>
            return Err("inode read: end is more than diskinode's size.")
    8001a37c:	65ea                	ld	a1,152(sp)

000000008001a37e <.LBB12_43>:
    8001a37e:	00011517          	auipc	a0,0x11
    8001a382:	81450513          	addi	a0,a0,-2028 # 8002ab92 <.L__unnamed_61>
    8001a386:	e588                	sd	a0,8(a1)
    8001a388:	02e00513          	li	a0,46
    8001a38c:	e988                	sd	a0,16(a1)
    8001a38e:	4505                	li	a0,1
    8001a390:	e188                	sd	a0,0(a1)
    8001a392:	a2f5                	j	8001a57e <.LBB12_45+0x5c>
    8001a394:	752a                	ld	a0,168(sp)
    8001a396:	758a                	ld	a1,160(sp)
    8001a398:	4601                	li	a2,0
        let mut total: usize = 0;
    8001a39a:	e232                	sd	a2,256(sp)
        let mut offset = offset as usize;
    8001a39c:	02051613          	slli	a2,a0,0x20
    8001a3a0:	9201                	srli	a2,a2,0x20
    8001a3a2:	e632                	sd	a2,264(sp)
        let count = count as usize;
    8001a3a4:	1582                	slli	a1,a1,0x20
    8001a3a6:	9181                	srli	a1,a1,0x20
    8001a3a8:	f4ae                	sd	a1,104(sp)
    8001a3aa:	20b13423          	sd	a1,520(sp)
        let mut block_basic = offset / BSIZE;
    8001a3ae:	00a5559b          	srliw	a1,a0,0xa
    8001a3b2:	ea2e                	sd	a1,272(sp)
        let mut block_offset = offset % BSIZE;
    8001a3b4:	3ff57513          	andi	a0,a0,1023
    8001a3b8:	ee2a                	sd	a0,280(sp)
        while total < count as usize {
    8001a3ba:	a009                	j	8001a3bc <.LBB12_43+0x3e>
    8001a3bc:	75a6                	ld	a1,104(sp)
    8001a3be:	6512                	ld	a0,256(sp)
    8001a3c0:	00b56963          	bltu	a0,a1,8001a3d2 <.LBB12_43+0x54>
    8001a3c4:	a009                	j	8001a3c6 <.LBB12_43+0x48>
        Ok(total)
    8001a3c6:	65ea                	ld	a1,152(sp)
    8001a3c8:	6512                	ld	a0,256(sp)
    8001a3ca:	e588                	sd	a0,8(a1)
    8001a3cc:	4501                	li	a0,0
    8001a3ce:	e188                	sd	a0,0(a1)
    }
    8001a3d0:	a27d                	j	8001a57e <.LBB12_45+0x5c>
            let surplus_len = count - total;
    8001a3d2:	7526                	ld	a0,104(sp)
    8001a3d4:	6592                	ld	a1,256(sp)
    8001a3d6:	40b505b3          	sub	a1,a0,a1
    8001a3da:	f0ae                	sd	a1,96(sp)
    8001a3dc:	1ab56663          	bltu	a0,a1,8001a588 <.LBB12_46>
    8001a3e0:	a009                	j	8001a3e2 <.LBB12_43+0x64>
    8001a3e2:	65aa                	ld	a1,136(sp)
    8001a3e4:	7506                	ld	a0,96(sp)
    8001a3e6:	20a13823          	sd	a0,528(sp)
            let block_no = self.bmap(block_basic as u32)?;
    8001a3ea:	6652                	ld	a2,272(sp)
    8001a3ec:	1a28                	addi	a0,sp,312
    8001a3ee:	00000097          	auipc	ra,0x0
    8001a3f2:	c7c080e7          	jalr	-900(ra) # 8001a06a <_ZN6kernel2fs5inode9InodeData4bmap17hd73981f79cf26766E>
    8001a3f6:	a009                	j	8001a3f8 <.LBB12_43+0x7a>
    8001a3f8:	1208                	addi	a0,sp,288
    8001a3fa:	1a2c                	addi	a1,sp,312
    8001a3fc:	ffff3097          	auipc	ra,0xffff3
    8001a400:	db8080e7          	jalr	-584(ra) # 8000d1b4 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h3002ccf5391f70d3E>
    8001a404:	a009                	j	8001a406 <.LBB12_43+0x88>
    8001a406:	12016503          	lwu	a0,288(sp)
    8001a40a:	4581                	li	a1,0
    8001a40c:	00b50463          	beq	a0,a1,8001a414 <.LBB12_43+0x96>
    8001a410:	a009                	j	8001a412 <.LBB12_43+0x94>
    8001a412:	a025                	j	8001a43a <.LBB12_44+0x16>
    8001a414:	652a                	ld	a0,136(sp)
    8001a416:	12412683          	lw	a3,292(sp)
    8001a41a:	22d12423          	sw	a3,552(sp)
    8001a41e:	22d12623          	sw	a3,556(sp)
            let buf = BCACHE.bread(self.dev, block_no);
    8001a422:	4110                	lw	a2,0(a0)

000000008001a424 <.LBB12_44>:
    8001a424:	00015597          	auipc	a1,0x15
    8001a428:	bdc58593          	addi	a1,a1,-1060 # 8002f000 <_ZN6kernel2fs3bio6BCACHE17h4811aac4f8d79dc4E>
    8001a42c:	0a88                	addi	a0,sp,336
    8001a42e:	fffe9097          	auipc	ra,0xfffe9
    8001a432:	1ce080e7          	jalr	462(ra) # 800035fc <_ZN6kernel2fs3bio6Bcache5bread17h6ef915e4e896646bE>
    8001a436:	a03d                	j	8001a464 <.LBB12_44+0x40>
            let block_no = self.bmap(block_basic as u32)?;
    8001a438:	0000                	unimp
    8001a43a:	7532                	ld	a0,296(sp)
    8001a43c:	75d2                	ld	a1,304(sp)
    8001a43e:	20a13c23          	sd	a0,536(sp)
    8001a442:	22b13023          	sd	a1,544(sp)
    8001a446:	ffff1097          	auipc	ra,0xffff1
    8001a44a:	626080e7          	jalr	1574(ra) # 8000ba6c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h6f3e3843c20d184aE>
    8001a44e:	e8aa                	sd	a0,80(sp)
    8001a450:	ecae                	sd	a1,88(sp)
    8001a452:	a009                	j	8001a454 <.LBB12_44+0x30>
    8001a454:	6666                	ld	a2,88(sp)
    8001a456:	65c6                	ld	a1,80(sp)
    8001a458:	656a                	ld	a0,152(sp)
    8001a45a:	ffff3097          	auipc	ra,0xffff3
    8001a45e:	c52080e7          	jalr	-942(ra) # 8000d0ac <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h4dd43adfe00292f6E>
    8001a462:	aa31                	j	8001a57e <.LBB12_45+0x5c>
            let write_len = min(surplus_len, BSIZE - block_offset);
    8001a464:	65f2                	ld	a1,280(sp)
    8001a466:	40000513          	li	a0,1024
    8001a46a:	40b505b3          	sub	a1,a0,a1
    8001a46e:	e4ae                	sd	a1,72(sp)
    8001a470:	12b56b63          	bltu	a0,a1,8001a5a6 <.LBB12_48>
    8001a474:	a009                	j	8001a476 <.LBB12_44+0x52>
    8001a476:	65a6                	ld	a1,72(sp)
    8001a478:	7506                	ld	a0,96(sp)
    8001a47a:	fffed097          	auipc	ra,0xfffed
    8001a47e:	ff8080e7          	jalr	-8(ra) # 80007472 <_ZN6kernel4misc3min17he96917d05b11cd47E>
    8001a482:	85aa                	mv	a1,a0
    8001a484:	e0ae                	sd	a1,64(sp)
    8001a486:	22a13823          	sd	a0,560(sp)
    8001a48a:	a009                	j	8001a48c <.LBB12_44+0x68>
                dst, 
    8001a48c:	652e                	ld	a0,200(sp)
                unsafe{ (buf.raw_data() as *mut u8).offset((offset % BSIZE) as isize) },
    8001a48e:	f82a                	sd	a0,48(sp)
    8001a490:	0a88                	addi	a0,sp,336
    8001a492:	fffe9097          	auipc	ra,0xfffe9
    8001a496:	2b0080e7          	jalr	688(ra) # 80003742 <_ZN6kernel2fs3bio3Buf8raw_data17h6a896fea03f7ee91E>
    8001a49a:	fc2a                	sd	a0,56(sp)
    8001a49c:	a009                	j	8001a49e <.LBB12_44+0x7a>
    8001a49e:	7562                	ld	a0,56(sp)
    8001a4a0:	65b2                	ld	a1,264(sp)
    8001a4a2:	3ff5f593          	andi	a1,a1,1023
    8001a4a6:	00005097          	auipc	ra,0x5
    8001a4aa:	2c8080e7          	jalr	712(ra) # 8001f76e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb5f7a0f346747657E>
    8001a4ae:	f42a                	sd	a0,40(sp)
    8001a4b0:	a009                	j	8001a4b2 <.LBB12_44+0x8e>
            if copy_from_kernel(
    8001a4b2:	6686                	ld	a3,64(sp)
    8001a4b4:	7622                	ld	a2,40(sp)
    8001a4b6:	75c2                	ld	a1,48(sp)
    8001a4b8:	754a                	ld	a0,176(sp)
    8001a4ba:	00003097          	auipc	ra,0x3
    8001a4be:	788080e7          	jalr	1928(ra) # 8001dc42 <_ZN6kernel6memory16copy_from_kernel17hf0969988b3a5fbc0E>
    8001a4c2:	feaa                	sd	a0,376(sp)
    8001a4c4:	e32e                	sd	a1,384(sp)
    8001a4c6:	a009                	j	8001a4c8 <.LBB12_44+0xa4>
    8001a4c8:	1aa8                	addi	a0,sp,376
    8001a4ca:	ffff3097          	auipc	ra,0xffff3
    8001a4ce:	894080e7          	jalr	-1900(ra) # 8000cd5e <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h304118d236359d80E>
    8001a4d2:	f02a                	sd	a0,32(sp)
    8001a4d4:	a009                	j	8001a4d6 <.LBB12_44+0xb2>
    8001a4d6:	7502                	ld	a0,32(sp)
    8001a4d8:	4581                	li	a1,0
    8001a4da:	02b50363          	beq	a0,a1,8001a500 <.LBB12_44+0xdc>
    8001a4de:	a009                	j	8001a4e0 <.LBB12_44+0xbc>
                drop(buf);
    8001a4e0:	7556                	ld	a0,368(sp)
    8001a4e2:	f72a                	sd	a0,424(sp)
    8001a4e4:	7536                	ld	a0,360(sp)
    8001a4e6:	f32a                	sd	a0,416(sp)
    8001a4e8:	7516                	ld	a0,352(sp)
    8001a4ea:	ef2a                	sd	a0,408(sp)
    8001a4ec:	6576                	ld	a0,344(sp)
    8001a4ee:	eb2a                	sd	a0,400(sp)
    8001a4f0:	6556                	ld	a0,336(sp)
    8001a4f2:	e72a                	sd	a0,392(sp)
    8001a4f4:	0328                	addi	a0,sp,392
    8001a4f6:	00003097          	auipc	ra,0x3
    8001a4fa:	c64080e7          	jalr	-924(ra) # 8001d15a <_ZN4core3mem4drop17hda1e19029436deb9E>
    8001a4fe:	a00d                	j	8001a520 <.LBB12_44+0xfc>
            drop(buf);
    8001a500:	7556                	ld	a0,368(sp)
    8001a502:	ebaa                	sd	a0,464(sp)
    8001a504:	7536                	ld	a0,360(sp)
    8001a506:	e7aa                	sd	a0,456(sp)
    8001a508:	7516                	ld	a0,352(sp)
    8001a50a:	e3aa                	sd	a0,448(sp)
    8001a50c:	6576                	ld	a0,344(sp)
    8001a50e:	ff2a                	sd	a0,440(sp)
    8001a510:	6556                	ld	a0,336(sp)
    8001a512:	fb2a                	sd	a0,432(sp)
    8001a514:	1b08                	addi	a0,sp,432
    8001a516:	00003097          	auipc	ra,0x3
    8001a51a:	c44080e7          	jalr	-956(ra) # 8001d15a <_ZN4core3mem4drop17hda1e19029436deb9E>
    8001a51e:	a829                	j	8001a538 <.LBB12_45+0x16>
                return Err("inode read: Fail to either copy out.")
    8001a520:	65ea                	ld	a1,152(sp)

000000008001a522 <.LBB12_45>:
    8001a522:	00010517          	auipc	a0,0x10
    8001a526:	6ce50513          	addi	a0,a0,1742 # 8002abf0 <.L__unnamed_62>
    8001a52a:	e588                	sd	a0,8(a1)
    8001a52c:	02400513          	li	a0,36
    8001a530:	e988                	sd	a0,16(a1)
    8001a532:	4505                	li	a0,1
    8001a534:	e188                	sd	a0,0(a1)
    8001a536:	a0a1                	j	8001a57e <.LBB12_45+0x5c>
            total += write_len as usize;
    8001a538:	6506                	ld	a0,64(sp)
    8001a53a:	6592                	ld	a1,256(sp)
    8001a53c:	952e                	add	a0,a0,a1
    8001a53e:	ec2a                	sd	a0,24(sp)
    8001a540:	08b56263          	bltu	a0,a1,8001a5c4 <.LBB12_50>
    8001a544:	a009                	j	8001a546 <.LBB12_45+0x24>
    8001a546:	6506                	ld	a0,64(sp)
    8001a548:	65e2                	ld	a1,24(sp)
    8001a54a:	e22e                	sd	a1,256(sp)
            offset += write_len as usize;
    8001a54c:	65b2                	ld	a1,264(sp)
    8001a54e:	952e                	add	a0,a0,a1
    8001a550:	e82a                	sd	a0,16(sp)
    8001a552:	08b56763          	bltu	a0,a1,8001a5e0 <.LBB12_52>
    8001a556:	a009                	j	8001a558 <.LBB12_45+0x36>
    8001a558:	6506                	ld	a0,64(sp)
    8001a55a:	65c2                	ld	a1,16(sp)
    8001a55c:	e62e                	sd	a1,264(sp)
            dst += write_len as usize;
    8001a55e:	65ae                	ld	a1,200(sp)
    8001a560:	952e                	add	a0,a0,a1
    8001a562:	e42a                	sd	a0,8(sp)
    8001a564:	08b56c63          	bltu	a0,a1,8001a5fc <.LBB12_54>
    8001a568:	a009                	j	8001a56a <.LBB12_45+0x48>
    8001a56a:	6522                	ld	a0,8(sp)
    8001a56c:	e5aa                	sd	a0,200(sp)
            block_basic = offset / BSIZE;
    8001a56e:	6532                	ld	a0,264(sp)
    8001a570:	00a55593          	srli	a1,a0,0xa
    8001a574:	ea2e                	sd	a1,272(sp)
            block_offset = offset % BSIZE;
    8001a576:	3ff57513          	andi	a0,a0,1023
    8001a57a:	ee2a                	sd	a0,280(sp)
        while total < count as usize {
    8001a57c:	b581                	j	8001a3bc <.LBB12_43+0x3e>
    }
    8001a57e:	23813083          	ld	ra,568(sp)
    8001a582:	24010113          	addi	sp,sp,576
    8001a586:	8082                	ret

000000008001a588 <.LBB12_46>:
            let surplus_len = count - total;
    8001a588:	00010517          	auipc	a0,0x10
    8001a58c:	0c850513          	addi	a0,a0,200 # 8002a650 <str.1>

000000008001a590 <.LBB12_47>:
    8001a590:	00010617          	auipc	a2,0x10
    8001a594:	63060613          	addi	a2,a2,1584 # 8002abc0 <.L__unnamed_63>
    8001a598:	02100593          	li	a1,33
    8001a59c:	00008097          	auipc	ra,0x8
    8001a5a0:	cda080e7          	jalr	-806(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008001a5a6 <.LBB12_48>:
            let write_len = min(surplus_len, BSIZE - block_offset);
    8001a5a6:	00010517          	auipc	a0,0x10
    8001a5aa:	0aa50513          	addi	a0,a0,170 # 8002a650 <str.1>

000000008001a5ae <.LBB12_49>:
    8001a5ae:	00010617          	auipc	a2,0x10
    8001a5b2:	62a60613          	addi	a2,a2,1578 # 8002abd8 <.L__unnamed_64>
    8001a5b6:	02100593          	li	a1,33
    8001a5ba:	00008097          	auipc	ra,0x8
    8001a5be:	cbc080e7          	jalr	-836(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008001a5c4 <.LBB12_50>:
            total += write_len as usize;
    8001a5c4:	00010517          	auipc	a0,0x10
    8001a5c8:	03c50513          	addi	a0,a0,60 # 8002a600 <str.0>

000000008001a5cc <.LBB12_51>:
    8001a5cc:	00010617          	auipc	a2,0x10
    8001a5d0:	64c60613          	addi	a2,a2,1612 # 8002ac18 <.L__unnamed_65>
    8001a5d4:	45f1                	li	a1,28
    8001a5d6:	00008097          	auipc	ra,0x8
    8001a5da:	ca0080e7          	jalr	-864(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008001a5e0 <.LBB12_52>:
            offset += write_len as usize;
    8001a5e0:	00010517          	auipc	a0,0x10
    8001a5e4:	02050513          	addi	a0,a0,32 # 8002a600 <str.0>

000000008001a5e8 <.LBB12_53>:
    8001a5e8:	00010617          	auipc	a2,0x10
    8001a5ec:	64860613          	addi	a2,a2,1608 # 8002ac30 <.L__unnamed_66>
    8001a5f0:	45f1                	li	a1,28
    8001a5f2:	00008097          	auipc	ra,0x8
    8001a5f6:	c84080e7          	jalr	-892(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008001a5fc <.LBB12_54>:
            dst += write_len as usize;
    8001a5fc:	00010517          	auipc	a0,0x10
    8001a600:	00450513          	addi	a0,a0,4 # 8002a600 <str.0>

000000008001a604 <.LBB12_55>:
    8001a604:	00010617          	auipc	a2,0x10
    8001a608:	64460613          	addi	a2,a2,1604 # 8002ac48 <.L__unnamed_67>
    8001a60c:	45f1                	li	a1,28
    8001a60e:	00008097          	auipc	ra,0x8
    8001a612:	c68080e7          	jalr	-920(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel2fs5inode9InodeData5write17h219447b865f1c381E:

000000008001a618 <_ZN6kernel2fs5inode9InodeData5write17h219447b865f1c381E>:
    pub fn write(
    8001a618:	7161                	addi	sp,sp,-432
    8001a61a:	f706                	sd	ra,424(sp)
    8001a61c:	f0ae                	sd	a1,96(sp)
    8001a61e:	f4aa                	sd	a0,104(sp)
    8001a620:	8532                	mv	a0,a2
    8001a622:	f8aa                	sd	a0,112(sp)
    8001a624:	e136                	sd	a3,128(sp)
    8001a626:	f2ae                	sd	a1,352(sp)
    8001a628:	16c107a3          	sb	a2,367(sp)
    8001a62c:	16e12823          	sw	a4,368(sp)
    8001a630:	16f12a23          	sw	a5,372(sp)
        let mut offset = offset as usize;
    8001a634:	02071513          	slli	a0,a4,0x20
    8001a638:	9101                	srli	a0,a0,0x20
    8001a63a:	e52a                	sd	a0,136(sp)
        let count = count as usize;
    8001a63c:	02079513          	slli	a0,a5,0x20
    8001a640:	9101                	srli	a0,a0,0x20
    8001a642:	fcaa                	sd	a0,120(sp)
    8001a644:	feaa                	sd	a0,376(sp)
    8001a646:	4501                	li	a0,0
        let mut total = 0;
    8001a648:	e92a                	sd	a0,144(sp)
        let mut block_basic = offset / BSIZE;
    8001a64a:	00a7551b          	srliw	a0,a4,0xa
    8001a64e:	ed2a                	sd	a0,152(sp)
        let mut block_offset = offset % BSIZE;
    8001a650:	3ff77513          	andi	a0,a4,1023
    8001a654:	f12a                	sd	a0,160(sp)
        while total < count {
    8001a656:	a009                	j	8001a658 <_ZN6kernel2fs5inode9InodeData5write17h219447b865f1c381E+0x40>
    8001a658:	75e6                	ld	a1,120(sp)
    8001a65a:	654a                	ld	a0,144(sp)
    8001a65c:	00b56963          	bltu	a0,a1,8001a66e <_ZN6kernel2fs5inode9InodeData5write17h219447b865f1c381E+0x56>
    8001a660:	a009                	j	8001a662 <_ZN6kernel2fs5inode9InodeData5write17h219447b865f1c381E+0x4a>
        if self.dinode.size < offset as u32 {
    8001a662:	7506                	ld	a0,96(sp)
    8001a664:	4908                	lw	a0,16(a0)
    8001a666:	45aa                	lw	a1,136(sp)
    8001a668:	1ab56663          	bltu	a0,a1,8001a814 <.LBB13_38+0x16>
    8001a66c:	aa45                	j	8001a81c <.LBB13_38+0x1e>
            let surplus_len = count - total;
    8001a66e:	7566                	ld	a0,120(sp)
    8001a670:	65ca                	ld	a1,144(sp)
    8001a672:	40b505b3          	sub	a1,a0,a1
    8001a676:	ecae                	sd	a1,88(sp)
    8001a678:	1cb56263          	bltu	a0,a1,8001a83c <.LBB13_39>
    8001a67c:	a009                	j	8001a67e <_ZN6kernel2fs5inode9InodeData5write17h219447b865f1c381E+0x66>
    8001a67e:	7586                	ld	a1,96(sp)
    8001a680:	6566                	ld	a0,88(sp)
    8001a682:	e32a                	sd	a0,384(sp)
            let block_no = self.bmap(block_basic as u32)?;
    8001a684:	666a                	ld	a2,152(sp)
    8001a686:	0188                	addi	a0,sp,192
    8001a688:	00000097          	auipc	ra,0x0
    8001a68c:	9e2080e7          	jalr	-1566(ra) # 8001a06a <_ZN6kernel2fs5inode9InodeData4bmap17hd73981f79cf26766E>
    8001a690:	a009                	j	8001a692 <_ZN6kernel2fs5inode9InodeData5write17h219447b865f1c381E+0x7a>
    8001a692:	1128                	addi	a0,sp,168
    8001a694:	018c                	addi	a1,sp,192
    8001a696:	ffff3097          	auipc	ra,0xffff3
    8001a69a:	b1e080e7          	jalr	-1250(ra) # 8000d1b4 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h3002ccf5391f70d3E>
    8001a69e:	a009                	j	8001a6a0 <_ZN6kernel2fs5inode9InodeData5write17h219447b865f1c381E+0x88>
    8001a6a0:	0a816503          	lwu	a0,168(sp)
    8001a6a4:	4581                	li	a1,0
    8001a6a6:	00b50463          	beq	a0,a1,8001a6ae <_ZN6kernel2fs5inode9InodeData5write17h219447b865f1c381E+0x96>
    8001a6aa:	a009                	j	8001a6ac <_ZN6kernel2fs5inode9InodeData5write17h219447b865f1c381E+0x94>
    8001a6ac:	a01d                	j	8001a6d2 <.LBB13_36+0x16>
    8001a6ae:	7506                	ld	a0,96(sp)
    8001a6b0:	56ba                	lw	a3,172(sp)
    8001a6b2:	18d12c23          	sw	a3,408(sp)
    8001a6b6:	18d12e23          	sw	a3,412(sp)
            let mut buf = BCACHE.bread(self.dev, block_no);
    8001a6ba:	4110                	lw	a2,0(a0)

000000008001a6bc <.LBB13_36>:
    8001a6bc:	00015597          	auipc	a1,0x15
    8001a6c0:	94458593          	addi	a1,a1,-1724 # 8002f000 <_ZN6kernel2fs3bio6BCACHE17h4811aac4f8d79dc4E>
    8001a6c4:	09a8                	addi	a0,sp,216
    8001a6c6:	fffe9097          	auipc	ra,0xfffe9
    8001a6ca:	f36080e7          	jalr	-202(ra) # 800035fc <_ZN6kernel2fs3bio6Bcache5bread17h6ef915e4e896646bE>
    8001a6ce:	a02d                	j	8001a6f8 <.LBB13_36+0x3c>
            let block_no = self.bmap(block_basic as u32)?;
    8001a6d0:	0000                	unimp
    8001a6d2:	754a                	ld	a0,176(sp)
    8001a6d4:	75ea                	ld	a1,184(sp)
    8001a6d6:	e72a                	sd	a0,392(sp)
    8001a6d8:	eb2e                	sd	a1,400(sp)
    8001a6da:	ffff1097          	auipc	ra,0xffff1
    8001a6de:	392080e7          	jalr	914(ra) # 8000ba6c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h6f3e3843c20d184aE>
    8001a6e2:	e4aa                	sd	a0,72(sp)
    8001a6e4:	e8ae                	sd	a1,80(sp)
    8001a6e6:	a009                	j	8001a6e8 <.LBB13_36+0x2c>
    8001a6e8:	6646                	ld	a2,80(sp)
    8001a6ea:	65a6                	ld	a1,72(sp)
    8001a6ec:	7526                	ld	a0,104(sp)
    8001a6ee:	ffff3097          	auipc	ra,0xffff3
    8001a6f2:	9be080e7          	jalr	-1602(ra) # 8000d0ac <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h4dd43adfe00292f6E>
    8001a6f6:	a281                	j	8001a836 <.LBB13_38+0x38>
            let write_len = min(surplus_len, BSIZE - block_offset);
    8001a6f8:	758a                	ld	a1,160(sp)
    8001a6fa:	40000513          	li	a0,1024
    8001a6fe:	40b505b3          	sub	a1,a0,a1
    8001a702:	e0ae                	sd	a1,64(sp)
    8001a704:	14b56b63          	bltu	a0,a1,8001a85a <.LBB13_41>
    8001a708:	a009                	j	8001a70a <.LBB13_36+0x4e>
    8001a70a:	6586                	ld	a1,64(sp)
    8001a70c:	6566                	ld	a0,88(sp)
    8001a70e:	fffed097          	auipc	ra,0xfffed
    8001a712:	d64080e7          	jalr	-668(ra) # 80007472 <_ZN6kernel4misc3min17he96917d05b11cd47E>
    8001a716:	85aa                	mv	a1,a0
    8001a718:	fc2e                	sd	a1,56(sp)
    8001a71a:	f32a                	sd	a0,416(sp)
    8001a71c:	a009                	j	8001a71e <.LBB13_36+0x62>
    8001a71e:	09a8                	addi	a0,sp,216
                unsafe{ (buf.raw_data_mut() as *mut u8).offset((offset % BSIZE) as isize ) }, 
    8001a720:	fffe9097          	auipc	ra,0xfffe9
    8001a724:	066080e7          	jalr	102(ra) # 80003786 <_ZN6kernel2fs3bio3Buf12raw_data_mut17hbae73c10d57c515dE>
    8001a728:	f82a                	sd	a0,48(sp)
    8001a72a:	a009                	j	8001a72c <.LBB13_36+0x70>
    8001a72c:	7542                	ld	a0,48(sp)
    8001a72e:	65aa                	ld	a1,136(sp)
    8001a730:	3ff5f593          	andi	a1,a1,1023
    8001a734:	00005097          	auipc	ra,0x5
    8001a738:	03a080e7          	jalr	58(ra) # 8001f76e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb5f7a0f346747657E>
    8001a73c:	f42a                	sd	a0,40(sp)
    8001a73e:	a009                	j	8001a740 <.LBB13_36+0x84>
                src, 
    8001a740:	76e2                	ld	a3,56(sp)
    8001a742:	75c6                	ld	a1,112(sp)
    8001a744:	7522                	ld	a0,40(sp)
    8001a746:	660a                	ld	a2,128(sp)
            if copy_to_kernel(
    8001a748:	00003097          	auipc	ra,0x3
    8001a74c:	44a080e7          	jalr	1098(ra) # 8001db92 <_ZN6kernel6memory14copy_to_kernel17hd4730b664342d99cE>
    8001a750:	e22a                	sd	a0,256(sp)
    8001a752:	e62e                	sd	a1,264(sp)
    8001a754:	a009                	j	8001a756 <.LBB13_36+0x9a>
    8001a756:	0208                	addi	a0,sp,256
    8001a758:	ffff2097          	auipc	ra,0xffff2
    8001a75c:	606080e7          	jalr	1542(ra) # 8000cd5e <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h304118d236359d80E>
    8001a760:	f02a                	sd	a0,32(sp)
    8001a762:	a009                	j	8001a764 <.LBB13_36+0xa8>
    8001a764:	7502                	ld	a0,32(sp)
    8001a766:	4581                	li	a1,0
    8001a768:	02b50363          	beq	a0,a1,8001a78e <.LBB13_36+0xd2>
    8001a76c:	a009                	j	8001a76e <.LBB13_36+0xb2>
                drop(buf);
    8001a76e:	756e                	ld	a0,248(sp)
    8001a770:	fa2a                	sd	a0,304(sp)
    8001a772:	754e                	ld	a0,240(sp)
    8001a774:	f62a                	sd	a0,296(sp)
    8001a776:	752e                	ld	a0,232(sp)
    8001a778:	f22a                	sd	a0,288(sp)
    8001a77a:	750e                	ld	a0,224(sp)
    8001a77c:	ee2a                	sd	a0,280(sp)
    8001a77e:	656e                	ld	a0,216(sp)
    8001a780:	ea2a                	sd	a0,272(sp)
    8001a782:	0a08                	addi	a0,sp,272
    8001a784:	00003097          	auipc	ra,0x3
    8001a788:	9d6080e7          	jalr	-1578(ra) # 8001d15a <_ZN4core3mem4drop17hda1e19029436deb9E>
    8001a78c:	a801                	j	8001a79c <.LBB13_36+0xe0>
            offset += write_len;
    8001a78e:	7562                	ld	a0,56(sp)
    8001a790:	65aa                	ld	a1,136(sp)
    8001a792:	952e                	add	a0,a0,a1
    8001a794:	ec2a                	sd	a0,24(sp)
    8001a796:	0eb56163          	bltu	a0,a1,8001a878 <.LBB13_43>
    8001a79a:	a829                	j	8001a7b4 <.LBB13_37+0x16>
                return Err("inode write: Fail to either copy in")
    8001a79c:	75a6                	ld	a1,104(sp)

000000008001a79e <.LBB13_37>:
    8001a79e:	00010517          	auipc	a0,0x10
    8001a7a2:	4f250513          	addi	a0,a0,1266 # 8002ac90 <.L__unnamed_68>
    8001a7a6:	e588                	sd	a0,8(a1)
    8001a7a8:	02300513          	li	a0,35
    8001a7ac:	e988                	sd	a0,16(a1)
    8001a7ae:	4505                	li	a0,1
    8001a7b0:	e188                	sd	a0,0(a1)
    8001a7b2:	a051                	j	8001a836 <.LBB13_38+0x38>
            offset += write_len;
    8001a7b4:	7562                	ld	a0,56(sp)
    8001a7b6:	65e2                	ld	a1,24(sp)
    8001a7b8:	e52e                	sd	a1,136(sp)
            src += write_len;
    8001a7ba:	658a                	ld	a1,128(sp)
    8001a7bc:	952e                	add	a0,a0,a1
    8001a7be:	e82a                	sd	a0,16(sp)
    8001a7c0:	0cb56a63          	bltu	a0,a1,8001a894 <.LBB13_45>
    8001a7c4:	a009                	j	8001a7c6 <.LBB13_37+0x28>
    8001a7c6:	7562                	ld	a0,56(sp)
    8001a7c8:	65c2                	ld	a1,16(sp)
    8001a7ca:	e12e                	sd	a1,128(sp)
            total += write_len;
    8001a7cc:	65ca                	ld	a1,144(sp)
    8001a7ce:	952e                	add	a0,a0,a1
    8001a7d0:	e42a                	sd	a0,8(sp)
    8001a7d2:	0cb56f63          	bltu	a0,a1,8001a8b0 <.LBB13_47>
    8001a7d6:	a009                	j	8001a7d8 <.LBB13_37+0x3a>
    8001a7d8:	6522                	ld	a0,8(sp)
    8001a7da:	e92a                	sd	a0,144(sp)
            block_basic = offset / BSIZE;
    8001a7dc:	652a                	ld	a0,136(sp)
    8001a7de:	00a55593          	srli	a1,a0,0xa
    8001a7e2:	ed2e                	sd	a1,152(sp)
            block_offset = offset % BSIZE;
    8001a7e4:	3ff57513          	andi	a0,a0,1023
    8001a7e8:	f12a                	sd	a0,160(sp)
            LOG.write(buf);
    8001a7ea:	656e                	ld	a0,216(sp)
    8001a7ec:	fe2a                	sd	a0,312(sp)
    8001a7ee:	750e                	ld	a0,224(sp)
    8001a7f0:	e2aa                	sd	a0,320(sp)
    8001a7f2:	752e                	ld	a0,232(sp)
    8001a7f4:	e6aa                	sd	a0,328(sp)
    8001a7f6:	754e                	ld	a0,240(sp)
    8001a7f8:	eaaa                	sd	a0,336(sp)
    8001a7fa:	756e                	ld	a0,248(sp)
    8001a7fc:	eeaa                	sd	a0,344(sp)

000000008001a7fe <.LBB13_38>:
    8001a7fe:	0004d517          	auipc	a0,0x4d
    8001a802:	1ea50513          	addi	a0,a0,490 # 800679e8 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    8001a806:	1a2c                	addi	a1,sp,312
    8001a808:	fffee097          	auipc	ra,0xfffee
    8001a80c:	59c080e7          	jalr	1436(ra) # 80008da4 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$5write17ha48e3edeecccac4fE>
    8001a810:	a009                	j	8001a812 <.LBB13_38+0x14>
        while total < count {
    8001a812:	b599                	j	8001a658 <_ZN6kernel2fs5inode9InodeData5write17h219447b865f1c381E+0x40>
            self.dinode.size = offset as u32;
    8001a814:	7586                	ld	a1,96(sp)
    8001a816:	652a                	ld	a0,136(sp)
    8001a818:	c988                	sw	a0,16(a1)
        if self.dinode.size < offset as u32 {
    8001a81a:	a011                	j	8001a81e <.LBB13_38+0x20>
    8001a81c:	a009                	j	8001a81e <.LBB13_38+0x20>
        self.update();
    8001a81e:	7506                	ld	a0,96(sp)
    8001a820:	fffff097          	auipc	ra,0xfffff
    8001a824:	72a080e7          	jalr	1834(ra) # 80019f4a <_ZN6kernel2fs5inode9InodeData6update17h81f49ab31d0ddfdcE>
    8001a828:	a009                	j	8001a82a <.LBB13_38+0x2c>
        Ok(total)
    8001a82a:	75a6                	ld	a1,104(sp)
    8001a82c:	654a                	ld	a0,144(sp)
    8001a82e:	e588                	sd	a0,8(a1)
    8001a830:	4501                	li	a0,0
    8001a832:	e188                	sd	a0,0(a1)
    }
    8001a834:	a009                	j	8001a836 <.LBB13_38+0x38>
    8001a836:	70ba                	ld	ra,424(sp)
    8001a838:	615d                	addi	sp,sp,432
    8001a83a:	8082                	ret

000000008001a83c <.LBB13_39>:
            let surplus_len = count - total;
    8001a83c:	00010517          	auipc	a0,0x10
    8001a840:	e1450513          	addi	a0,a0,-492 # 8002a650 <str.1>

000000008001a844 <.LBB13_40>:
    8001a844:	00010617          	auipc	a2,0x10
    8001a848:	41c60613          	addi	a2,a2,1052 # 8002ac60 <.L__unnamed_69>
    8001a84c:	02100593          	li	a1,33
    8001a850:	00008097          	auipc	ra,0x8
    8001a854:	a26080e7          	jalr	-1498(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008001a85a <.LBB13_41>:
            let write_len = min(surplus_len, BSIZE - block_offset);
    8001a85a:	00010517          	auipc	a0,0x10
    8001a85e:	df650513          	addi	a0,a0,-522 # 8002a650 <str.1>

000000008001a862 <.LBB13_42>:
    8001a862:	00010617          	auipc	a2,0x10
    8001a866:	41660613          	addi	a2,a2,1046 # 8002ac78 <.L__unnamed_70>
    8001a86a:	02100593          	li	a1,33
    8001a86e:	00008097          	auipc	ra,0x8
    8001a872:	a08080e7          	jalr	-1528(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008001a878 <.LBB13_43>:
            offset += write_len;
    8001a878:	00010517          	auipc	a0,0x10
    8001a87c:	d8850513          	addi	a0,a0,-632 # 8002a600 <str.0>

000000008001a880 <.LBB13_44>:
    8001a880:	00010617          	auipc	a2,0x10
    8001a884:	43860613          	addi	a2,a2,1080 # 8002acb8 <.L__unnamed_71>
    8001a888:	45f1                	li	a1,28
    8001a88a:	00008097          	auipc	ra,0x8
    8001a88e:	9ec080e7          	jalr	-1556(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008001a894 <.LBB13_45>:
            src += write_len;
    8001a894:	00010517          	auipc	a0,0x10
    8001a898:	d6c50513          	addi	a0,a0,-660 # 8002a600 <str.0>

000000008001a89c <.LBB13_46>:
    8001a89c:	00010617          	auipc	a2,0x10
    8001a8a0:	43460613          	addi	a2,a2,1076 # 8002acd0 <.L__unnamed_72>
    8001a8a4:	45f1                	li	a1,28
    8001a8a6:	00008097          	auipc	ra,0x8
    8001a8aa:	9d0080e7          	jalr	-1584(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008001a8b0 <.LBB13_47>:
            total += write_len;
    8001a8b0:	00010517          	auipc	a0,0x10
    8001a8b4:	d5050513          	addi	a0,a0,-688 # 8002a600 <str.0>

000000008001a8b8 <.LBB13_48>:
    8001a8b8:	00010617          	auipc	a2,0x10
    8001a8bc:	43060613          	addi	a2,a2,1072 # 8002ace8 <.L__unnamed_73>
    8001a8c0:	45f1                	li	a1,28
    8001a8c2:	00008097          	auipc	ra,0x8
    8001a8c6:	9b4080e7          	jalr	-1612(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel2fs5inode9InodeData10dir_lookup17h2ffc093ee3be0a35E:

000000008001a8cc <_ZN6kernel2fs5inode9InodeData10dir_lookup17h2ffc093ee3be0a35E>:
    pub fn dir_lookup(&mut self, name: &[u8]) -> Option<Inode> {
    8001a8cc:	7165                	addi	sp,sp,-400
    8001a8ce:	e706                	sd	ra,392(sp)
    8001a8d0:	f436                	sd	a3,40(sp)
    8001a8d2:	f832                	sd	a2,48(sp)
    8001a8d4:	fc2e                	sd	a1,56(sp)
    8001a8d6:	e0aa                	sd	a0,64(sp)
    8001a8d8:	ea2e                	sd	a1,272(sp)
    8001a8da:	ee32                	sd	a2,280(sp)
    8001a8dc:	f236                	sd	a3,288(sp)
        if self.dinode.itype != InodeType::Directory {
    8001a8de:	00858513          	addi	a0,a1,8

000000008001a8e2 <.LBB14_37>:
    8001a8e2:	00010597          	auipc	a1,0x10
    8001a8e6:	f9658593          	addi	a1,a1,-106 # 8002a878 <.L__unnamed_25>
    8001a8ea:	ffffe097          	auipc	ra,0xffffe
    8001a8ee:	b46080e7          	jalr	-1210(ra) # 80018430 <_ZN4core3cmp9PartialEq2ne17h733d64bbe9421100E>
    8001a8f2:	e4aa                	sd	a0,72(sp)
    8001a8f4:	a009                	j	8001a8f6 <.LBB14_37+0x14>
    8001a8f6:	6526                	ld	a0,72(sp)
    8001a8f8:	4581                	li	a1,0
    8001a8fa:	02b50163          	beq	a0,a1,8001a91c <.LBB14_39+0x14>
    8001a8fe:	a009                	j	8001a900 <.LBB14_38>

000000008001a900 <.LBB14_38>:
            panic!("inode type is not directory");
    8001a900:	00010517          	auipc	a0,0x10
    8001a904:	40050513          	addi	a0,a0,1024 # 8002ad00 <.L__unnamed_74>

000000008001a908 <.LBB14_39>:
    8001a908:	00010617          	auipc	a2,0x10
    8001a90c:	41860613          	addi	a2,a2,1048 # 8002ad20 <.L__unnamed_75>
    8001a910:	45ed                	li	a1,27
    8001a912:	00008097          	auipc	ra,0x8
    8001a916:	964080e7          	jalr	-1692(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8001a91a:	0000                	unimp
    8001a91c:	4541                	li	a0,16
        let de_size = size_of::<DirEntry>();
    8001a91e:	f62a                	sd	a0,296(sp)
    8001a920:	a009                	j	8001a922 <.LBB14_39+0x1a>
        let mut dir_entry = DirEntry::new();
    8001a922:	fffee097          	auipc	ra,0xfffee
    8001a926:	992080e7          	jalr	-1646(ra) # 800082b4 <_ZN6kernel2fs6dinode8DirEntry3new17h74e849d4398bb7e4E>
    8001a92a:	fa2a                	sd	a0,304(sp)
    8001a92c:	fe2e                	sd	a1,312(sp)
    8001a92e:	e8aa                	sd	a0,80(sp)
    8001a930:	ecae                	sd	a1,88(sp)
    8001a932:	a009                	j	8001a934 <.LBB14_39+0x2c>
    8001a934:	7562                	ld	a0,56(sp)
    8001a936:	088c                	addi	a1,sp,80
        let dir_entry_ptr = &mut dir_entry as *mut _ as *mut u8;
    8001a938:	f02e                	sd	a1,32(sp)
    8001a93a:	e2ae                	sd	a1,320(sp)
        for offset in (0..self.dinode.size).step_by(de_size) {
    8001a93c:	4910                	lw	a2,16(a0)
    8001a93e:	4581                	li	a1,0
    8001a940:	c92e                	sw	a1,144(sp)
    8001a942:	cb32                	sw	a2,148(sp)
    8001a944:	18a8                	addi	a0,sp,120
    8001a946:	46c1                	li	a3,16
    8001a948:	ffff1097          	auipc	ra,0xffff1
    8001a94c:	0c8080e7          	jalr	200(ra) # 8000ba10 <_ZN4core4iter6traits8iterator8Iterator7step_by17ha7dfda23787d2a26E>
    8001a950:	a009                	j	8001a952 <.LBB14_39+0x4a>
    8001a952:	1088                	addi	a0,sp,96
    8001a954:	18ac                	addi	a1,sp,120
    8001a956:	00002097          	auipc	ra,0x2
    8001a95a:	63a080e7          	jalr	1594(ra) # 8001cf90 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h09fa161dbb9bcdd3E>
    8001a95e:	a009                	j	8001a960 <.LBB14_39+0x58>
    8001a960:	7546                	ld	a0,112(sp)
    8001a962:	f52a                	sd	a0,168(sp)
    8001a964:	7526                	ld	a0,104(sp)
    8001a966:	f12a                	sd	a0,160(sp)
    8001a968:	7506                	ld	a0,96(sp)
    8001a96a:	ed2a                	sd	a0,152(sp)
    8001a96c:	a009                	j	8001a96e <.LBB14_39+0x66>
    8001a96e:	0928                	addi	a0,sp,152
    8001a970:	00002097          	auipc	ra,0x2
    8001a974:	4e2080e7          	jalr	1250(ra) # 8001ce52 <_ZN105_$LT$core..iter..adapters..step_by..StepBy$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h04f2168711040ee1E>
    8001a978:	d92a                	sw	a0,176(sp)
    8001a97a:	db2e                	sw	a1,180(sp)
    8001a97c:	a009                	j	8001a97e <.LBB14_39+0x76>
    8001a97e:	0b016503          	lwu	a0,176(sp)
    8001a982:	4581                	li	a1,0
    8001a984:	00b50463          	beq	a0,a1,8001a98c <.LBB14_39+0x84>
    8001a988:	a009                	j	8001a98a <.LBB14_39+0x82>
    8001a98a:	a031                	j	8001a996 <.LBB14_39+0x8e>
    8001a98c:	6586                	ld	a1,64(sp)
    8001a98e:	4501                	li	a0,0
        None
    8001a990:	e188                	sd	a0,0(a1)
    }
    8001a992:	aa31                	j	8001aaae <.LBB14_42+0x2e>
        for offset in (0..self.dinode.size).step_by(de_size) {
    8001a994:	0000                	unimp
    8001a996:	7682                	ld	a3,32(sp)
    8001a998:	75e2                	ld	a1,56(sp)
    8001a99a:	575a                	lw	a4,180(sp)
    8001a99c:	14e12623          	sw	a4,332(sp)
    8001a9a0:	14e12823          	sw	a4,336(sp)
    8001a9a4:	14e12a23          	sw	a4,340(sp)
    8001a9a8:	1928                	addi	a0,sp,184
    8001a9aa:	4601                	li	a2,0
    8001a9ac:	47c1                	li	a5,16
            self.read(
    8001a9ae:	00000097          	auipc	ra,0x0
    8001a9b2:	918080e7          	jalr	-1768(ra) # 8001a2c6 <_ZN6kernel2fs5inode9InodeData4read17h2d02dc0e430e4837E>
    8001a9b6:	a009                	j	8001a9b8 <.LBB14_40>

000000008001a9b8 <.LBB14_40>:
    8001a9b8:	00010597          	auipc	a1,0x10
    8001a9bc:	38058593          	addi	a1,a1,896 # 8002ad38 <.L__unnamed_76>

000000008001a9c0 <.LBB14_41>:
    8001a9c0:	00010697          	auipc	a3,0x10
    8001a9c4:	39868693          	addi	a3,a3,920 # 8002ad58 <.L__unnamed_77>
    8001a9c8:	1928                	addi	a0,sp,184
    8001a9ca:	4675                	li	a2,29
    8001a9cc:	ffff2097          	auipc	ra,0xffff2
    8001a9d0:	34a080e7          	jalr	842(ra) # 8000cd16 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17he26db02725b9ae65E>
    8001a9d4:	a009                	j	8001a9d6 <.LBB14_41+0x16>
            if dir_entry.inum == 0 {
    8001a9d6:	05015503          	lhu	a0,80(sp)
    8001a9da:	4581                	li	a1,0
    8001a9dc:	f8b509e3          	beq	a0,a1,8001a96e <.LBB14_39+0x66>
    8001a9e0:	a009                	j	8001a9e2 <.LBB14_41+0x22>
    8001a9e2:	4501                	li	a0,0
            for i in 0..DIRSIZ {
    8001a9e4:	e9aa                	sd	a0,208(sp)
    8001a9e6:	45b9                	li	a1,14
    8001a9e8:	edae                	sd	a1,216(sp)
    8001a9ea:	00005097          	auipc	ra,0x5
    8001a9ee:	f58080e7          	jalr	-168(ra) # 8001f942 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he0a8d93712e5493bE>
    8001a9f2:	e82a                	sd	a0,16(sp)
    8001a9f4:	ec2e                	sd	a1,24(sp)
    8001a9f6:	a009                	j	8001a9f8 <.LBB14_41+0x38>
    8001a9f8:	6562                	ld	a0,24(sp)
    8001a9fa:	65c2                	ld	a1,16(sp)
    8001a9fc:	f1ae                	sd	a1,224(sp)
    8001a9fe:	f5aa                	sd	a0,232(sp)
    8001aa00:	a009                	j	8001aa02 <.LBB14_41+0x42>
    8001aa02:	1188                	addi	a0,sp,224
    8001aa04:	00005097          	auipc	ra,0x5
    8001aa08:	ed0080e7          	jalr	-304(ra) # 8001f8d4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE>
    8001aa0c:	f9aa                	sd	a0,240(sp)
    8001aa0e:	fdae                	sd	a1,248(sp)
    8001aa10:	a009                	j	8001aa12 <.LBB14_41+0x52>
    8001aa12:	754e                	ld	a0,240(sp)
    8001aa14:	4581                	li	a1,0
    8001aa16:	00b50463          	beq	a0,a1,8001aa1e <.LBB14_41+0x5e>
    8001aa1a:	a009                	j	8001aa1c <.LBB14_41+0x5c>
    8001aa1c:	a019                	j	8001aa22 <.LBB14_41+0x62>
    8001aa1e:	a079                	j	8001aaac <.LBB14_42+0x2c>
    8001aa20:	0000                	unimp
    8001aa22:	75ee                	ld	a1,248(sp)
    8001aa24:	e42e                	sd	a1,8(sp)
    8001aa26:	eeae                	sd	a1,344(sp)
    8001aa28:	f2ae                	sd	a1,352(sp)
    8001aa2a:	f6ae                	sd	a1,360(sp)
    8001aa2c:	4535                	li	a0,13
                if dir_entry.name[i] != name[i] {
    8001aa2e:	08b56363          	bltu	a0,a1,8001aab4 <.LBB14_42+0x34>
    8001aa32:	a009                	j	8001aa34 <.LBB14_41+0x74>
    8001aa34:	6522                	ld	a0,8(sp)
    8001aa36:	75a2                	ld	a1,40(sp)
    8001aa38:	0890                	addi	a2,sp,80
    8001aa3a:	962a                	add	a2,a2,a0
    8001aa3c:	00264603          	lbu	a2,2(a2)
    8001aa40:	e032                	sd	a2,0(sp)
    8001aa42:	08b57463          	bgeu	a0,a1,8001aaca <.LBB14_43+0x14>
    8001aa46:	a009                	j	8001aa48 <.LBB14_41+0x88>
    8001aa48:	6502                	ld	a0,0(sp)
    8001aa4a:	75c2                	ld	a1,48(sp)
    8001aa4c:	6622                	ld	a2,8(sp)
    8001aa4e:	95b2                	add	a1,a1,a2
    8001aa50:	0005c583          	lbu	a1,0(a1)
    8001aa54:	00b50463          	beq	a0,a1,8001aa5c <.LBB14_41+0x9c>
    8001aa58:	a009                	j	8001aa5a <.LBB14_41+0x9a>
    8001aa5a:	a889                	j	8001aaac <.LBB14_42+0x2c>
    8001aa5c:	65a2                	ld	a1,8(sp)
    8001aa5e:	4535                	li	a0,13
                if dir_entry.name[i] == 0 {
    8001aa60:	08b56063          	bltu	a0,a1,8001aae0 <.LBB14_44+0x12>
    8001aa64:	a009                	j	8001aa66 <.LBB14_41+0xa6>
    8001aa66:	65a2                	ld	a1,8(sp)
    8001aa68:	0888                	addi	a0,sp,80
    8001aa6a:	952e                	add	a0,a0,a1
    8001aa6c:	00254503          	lbu	a0,2(a0)
    8001aa70:	4581                	li	a1,0
    8001aa72:	02b51463          	bne	a0,a1,8001aa9a <.LBB14_42+0x1a>
    8001aa76:	a009                	j	8001aa78 <.LBB14_41+0xb8>
                    return Some(ICACHE.get(self.dev, dir_entry.inum as u32))
    8001aa78:	7562                	ld	a0,56(sp)
    8001aa7a:	05015603          	lhu	a2,80(sp)
    8001aa7e:	410c                	lw	a1,0(a0)

000000008001aa80 <.LBB14_42>:
    8001aa80:	0004d517          	auipc	a0,0x4d
    8001aa84:	01050513          	addi	a0,a0,16 # 80067a90 <_ZN6kernel2fs5inode6ICACHE17had1be8942ca79bf1E>
    8001aa88:	ffffe097          	auipc	ra,0xffffe
    8001aa8c:	2ba080e7          	jalr	698(ra) # 80018d42 <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E>
    8001aa90:	faaa                	sd	a0,368(sp)
    8001aa92:	feae                	sd	a1,376(sp)
    8001aa94:	e22a                	sd	a0,256(sp)
    8001aa96:	e62e                	sd	a1,264(sp)
    8001aa98:	a011                	j	8001aa9c <.LBB14_42+0x1c>
            for i in 0..DIRSIZ {
    8001aa9a:	b7a5                	j	8001aa02 <.LBB14_41+0x42>
                    return Some(ICACHE.get(self.dev, dir_entry.inum as u32))
    8001aa9c:	6586                	ld	a1,64(sp)
    8001aa9e:	6532                	ld	a0,264(sp)
    8001aaa0:	e988                	sd	a0,16(a1)
    8001aaa2:	6512                	ld	a0,256(sp)
    8001aaa4:	e588                	sd	a0,8(a1)
    8001aaa6:	4505                	li	a0,1
    8001aaa8:	e188                	sd	a0,0(a1)
    }
    8001aaaa:	a011                	j	8001aaae <.LBB14_42+0x2e>
        for offset in (0..self.dinode.size).step_by(de_size) {
    8001aaac:	b5c9                	j	8001a96e <.LBB14_39+0x66>
    }
    8001aaae:	60ba                	ld	ra,392(sp)
    8001aab0:	6159                	addi	sp,sp,400
    8001aab2:	8082                	ret
                if dir_entry.name[i] != name[i] {
    8001aab4:	6522                	ld	a0,8(sp)

000000008001aab6 <.LBB14_43>:
    8001aab6:	00010617          	auipc	a2,0x10
    8001aaba:	2ba60613          	addi	a2,a2,698 # 8002ad70 <.L__unnamed_78>
    8001aabe:	45b9                	li	a1,14
    8001aac0:	00007097          	auipc	ra,0x7
    8001aac4:	7e2080e7          	jalr	2018(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    8001aac8:	0000                	unimp
    8001aaca:	75a2                	ld	a1,40(sp)
    8001aacc:	6522                	ld	a0,8(sp)

000000008001aace <.LBB14_44>:
    8001aace:	00010617          	auipc	a2,0x10
    8001aad2:	2ba60613          	addi	a2,a2,698 # 8002ad88 <.L__unnamed_79>
    8001aad6:	00007097          	auipc	ra,0x7
    8001aada:	7cc080e7          	jalr	1996(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    8001aade:	0000                	unimp
                if dir_entry.name[i] == 0 {
    8001aae0:	6522                	ld	a0,8(sp)

000000008001aae2 <.LBB14_45>:
    8001aae2:	00010617          	auipc	a2,0x10
    8001aae6:	2be60613          	addi	a2,a2,702 # 8002ada0 <.L__unnamed_80>
    8001aaea:	45b9                	li	a1,14
    8001aaec:	00007097          	auipc	ra,0x7
    8001aaf0:	7b6080e7          	jalr	1974(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel2fs5inode9InodeData8dir_link17h13a19ea2d651643eE:

000000008001aaf6 <_ZN6kernel2fs5inode9InodeData8dir_link17h13a19ea2d651643eE>:
    pub fn dir_link(&mut self, name: &[u8], inum: u32) -> Result<(), &'static str>{
    8001aaf6:	df010113          	addi	sp,sp,-528
    8001aafa:	20113423          	sd	ra,520(sp)
    8001aafe:	e136                	sd	a3,128(sp)
    8001ab00:	86b2                	mv	a3,a2
    8001ab02:	f8b6                	sd	a3,112(sp)
    8001ab04:	862e                	mv	a2,a1
    8001ab06:	fcb2                	sd	a2,120(sp)
    8001ab08:	85aa                	mv	a1,a0
    8001ab0a:	650a                	ld	a0,128(sp)
    8001ab0c:	e52e                	sd	a1,136(sp)
    8001ab0e:	872a                	mv	a4,a0
    8001ab10:	e93a                	sd	a4,144(sp)
    8001ab12:	eb2e                	sd	a1,400(sp)
    8001ab14:	ef32                	sd	a2,408(sp)
    8001ab16:	f336                	sd	a3,416(sp)
    8001ab18:	1aa12623          	sw	a0,428(sp)
    8001ab1c:	1128                	addi	a0,sp,168
        if self.dir_lookup(name).is_some() {
    8001ab1e:	00000097          	auipc	ra,0x0
    8001ab22:	dae080e7          	jalr	-594(ra) # 8001a8cc <_ZN6kernel2fs5inode9InodeData10dir_lookup17h2ffc093ee3be0a35E>
    8001ab26:	a009                	j	8001ab28 <_ZN6kernel2fs5inode9InodeData8dir_link17h13a19ea2d651643eE+0x32>
    8001ab28:	1128                	addi	a0,sp,168
    8001ab2a:	ffff4097          	auipc	ra,0xffff4
    8001ab2e:	484080e7          	jalr	1156(ra) # 8000efae <_ZN4core6option15Option$LT$T$GT$7is_some17h901b9974d3eea8b8E>
    8001ab32:	f4aa                	sd	a0,104(sp)
    8001ab34:	a009                	j	8001ab36 <_ZN6kernel2fs5inode9InodeData8dir_link17h13a19ea2d651643eE+0x40>
    8001ab36:	1128                	addi	a0,sp,168
    8001ab38:	fffec097          	auipc	ra,0xfffec
    8001ab3c:	414080e7          	jalr	1044(ra) # 80006f4c <_ZN4core3ptr73drop_in_place$LT$core..option..Option$LT$kernel..fs..inode..Inode$GT$$GT$17h6a7b3b84406d6cdfE>
    8001ab40:	a009                	j	8001ab42 <_ZN6kernel2fs5inode9InodeData8dir_link17h13a19ea2d651643eE+0x4c>
    8001ab42:	7526                	ld	a0,104(sp)
    8001ab44:	4581                	li	a1,0
    8001ab46:	00b50c63          	beq	a0,a1,8001ab5e <.LBB15_43+0x12>
    8001ab4a:	a009                	j	8001ab4c <.LBB15_43>

000000008001ab4c <.LBB15_43>:
            return Err("It's incorrect to find entry in disk")
    8001ab4c:	00010517          	auipc	a0,0x10
    8001ab50:	26c50513          	addi	a0,a0,620 # 8002adb8 <.L__unnamed_81>
    8001ab54:	ed2a                	sd	a0,152(sp)
    8001ab56:	02400513          	li	a0,36
    8001ab5a:	f12a                	sd	a0,160(sp)
    8001ab5c:	aae9                	j	8001ad36 <.LBB15_43+0x1ea>
        let mut dir_entry = DirEntry::new();
    8001ab5e:	fffed097          	auipc	ra,0xfffed
    8001ab62:	756080e7          	jalr	1878(ra) # 800082b4 <_ZN6kernel2fs6dinode8DirEntry3new17h74e849d4398bb7e4E>
    8001ab66:	fb2a                	sd	a0,432(sp)
    8001ab68:	ff2e                	sd	a1,440(sp)
    8001ab6a:	e1aa                	sd	a0,192(sp)
    8001ab6c:	e5ae                	sd	a1,200(sp)
    8001ab6e:	a009                	j	8001ab70 <.LBB15_43+0x24>
    8001ab70:	652a                	ld	a0,136(sp)
    8001ab72:	4581                	li	a1,0
        let mut entry_offset = 0;
    8001ab74:	cbae                	sw	a1,212(sp)
        for offset in (0..self.dinode.size).step_by(size_of::<DirEntry>()) {
    8001ab76:	4908                	lw	a0,16(a0)
    8001ab78:	10b12423          	sw	a1,264(sp)
    8001ab7c:	10a12623          	sw	a0,268(sp)
    8001ab80:	a009                	j	8001ab82 <.LBB15_43+0x36>
    8001ab82:	10c12603          	lw	a2,268(sp)
    8001ab86:	10812583          	lw	a1,264(sp)
    8001ab8a:	1988                	addi	a0,sp,240
    8001ab8c:	46c1                	li	a3,16
    8001ab8e:	ffff1097          	auipc	ra,0xffff1
    8001ab92:	e82080e7          	jalr	-382(ra) # 8000ba10 <_ZN4core4iter6traits8iterator8Iterator7step_by17ha7dfda23787d2a26E>
    8001ab96:	a009                	j	8001ab98 <.LBB15_43+0x4c>
    8001ab98:	09a8                	addi	a0,sp,216
    8001ab9a:	198c                	addi	a1,sp,240
    8001ab9c:	00002097          	auipc	ra,0x2
    8001aba0:	3f4080e7          	jalr	1012(ra) # 8001cf90 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h09fa161dbb9bcdd3E>
    8001aba4:	a009                	j	8001aba6 <.LBB15_43+0x5a>
    8001aba6:	752e                	ld	a0,232(sp)
    8001aba8:	f22a                	sd	a0,288(sp)
    8001abaa:	750e                	ld	a0,224(sp)
    8001abac:	ee2a                	sd	a0,280(sp)
    8001abae:	656e                	ld	a0,216(sp)
    8001abb0:	ea2a                	sd	a0,272(sp)
    8001abb2:	a009                	j	8001abb4 <.LBB15_43+0x68>
    8001abb4:	0a08                	addi	a0,sp,272
    8001abb6:	00002097          	auipc	ra,0x2
    8001abba:	29c080e7          	jalr	668(ra) # 8001ce52 <_ZN105_$LT$core..iter..adapters..step_by..StepBy$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h04f2168711040ee1E>
    8001abbe:	12a12423          	sw	a0,296(sp)
    8001abc2:	12b12623          	sw	a1,300(sp)
    8001abc6:	a009                	j	8001abc8 <.LBB15_43+0x7c>
    8001abc8:	12816503          	lwu	a0,296(sp)
    8001abcc:	4581                	li	a1,0
    8001abce:	00b50463          	beq	a0,a1,8001abd6 <.LBB15_43+0x8a>
    8001abd2:	a009                	j	8001abd4 <.LBB15_43+0x88>
    8001abd4:	a019                	j	8001abda <.LBB15_43+0x8e>
    8001abd6:	a05d                	j	8001ac7c <.LBB15_43+0x130>
    8001abd8:	0000                	unimp
    8001abda:	12c16503          	lwu	a0,300(sp)
    8001abde:	ecaa                	sd	a0,88(sp)
    8001abe0:	1ca12623          	sw	a0,460(sp)
    8001abe4:	1ca12823          	sw	a0,464(sp)
    8001abe8:	1ca12a23          	sw	a0,468(sp)
    8001abec:	0188                	addi	a0,sp,192
                size_of::<DirEntry>() as u32
    8001abee:	f0aa                	sd	a0,96(sp)
    8001abf0:	a009                	j	8001abf2 <.LBB15_43+0xa6>
            self.read(
    8001abf2:	6766                	ld	a4,88(sp)
    8001abf4:	7686                	ld	a3,96(sp)
    8001abf6:	65aa                	ld	a1,136(sp)
    8001abf8:	02a8                	addi	a0,sp,328
    8001abfa:	4601                	li	a2,0
    8001abfc:	47c1                	li	a5,16
    8001abfe:	fffff097          	auipc	ra,0xfffff
    8001ac02:	6c8080e7          	jalr	1736(ra) # 8001a2c6 <_ZN6kernel2fs5inode9InodeData4read17h2d02dc0e430e4837E>
    8001ac06:	a009                	j	8001ac08 <.LBB15_43+0xbc>
    8001ac08:	1a08                	addi	a0,sp,304
    8001ac0a:	02ac                	addi	a1,sp,328
    8001ac0c:	ffff2097          	auipc	ra,0xffff2
    8001ac10:	56e080e7          	jalr	1390(ra) # 8000d17a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h0dd4a8728df8a7c8E>
    8001ac14:	a009                	j	8001ac16 <.LBB15_43+0xca>
            )?;
    8001ac16:	7552                	ld	a0,304(sp)
    8001ac18:	4581                	li	a1,0
    8001ac1a:	00b50463          	beq	a0,a1,8001ac22 <.LBB15_43+0xd6>
    8001ac1e:	a009                	j	8001ac20 <.LBB15_43+0xd4>
    8001ac20:	a029                	j	8001ac2a <.LBB15_43+0xde>
            self.read(
    8001ac22:	7572                	ld	a0,312(sp)
    8001ac24:	f7aa                	sd	a0,488(sp)
            entry_offset += size_of::<DirEntry>() as u32;
    8001ac26:	a035                	j	8001ac52 <.LBB15_43+0x106>
            self.read(
    8001ac28:	0000                	unimp
            )?;
    8001ac2a:	7572                	ld	a0,312(sp)
    8001ac2c:	6596                	ld	a1,320(sp)
    8001ac2e:	efaa                	sd	a0,472(sp)
    8001ac30:	f3ae                	sd	a1,480(sp)
    8001ac32:	ffff1097          	auipc	ra,0xffff1
    8001ac36:	e3a080e7          	jalr	-454(ra) # 8000ba6c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h6f3e3843c20d184aE>
    8001ac3a:	e4aa                	sd	a0,72(sp)
    8001ac3c:	e8ae                	sd	a1,80(sp)
    8001ac3e:	a009                	j	8001ac40 <.LBB15_43+0xf4>
            self.read(
    8001ac40:	65c6                	ld	a1,80(sp)
    8001ac42:	6526                	ld	a0,72(sp)
    8001ac44:	ffff2097          	auipc	ra,0xffff2
    8001ac48:	4de080e7          	jalr	1246(ra) # 8000d122 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h9d11a50f8e490b2eE>
    8001ac4c:	ed2a                	sd	a0,152(sp)
    8001ac4e:	f12e                	sd	a1,160(sp)
    8001ac50:	a0dd                	j	8001ad36 <.LBB15_43+0x1ea>
            entry_offset += size_of::<DirEntry>() as u32;
    8001ac52:	0d416503          	lwu	a0,212(sp)
    8001ac56:	01050593          	addi	a1,a0,16
    8001ac5a:	e0ae                	sd	a1,64(sp)
    8001ac5c:	02059513          	slli	a0,a1,0x20
    8001ac60:	9101                	srli	a0,a0,0x20
    8001ac62:	0eb51163          	bne	a0,a1,8001ad44 <.LBB15_44>
    8001ac66:	a009                	j	8001ac68 <.LBB15_43+0x11c>
    8001ac68:	6506                	ld	a0,64(sp)
    8001ac6a:	cbaa                	sw	a0,212(sp)
            if dir_entry.inum == 0 {
    8001ac6c:	0c015503          	lhu	a0,192(sp)
    8001ac70:	4581                	li	a1,0
    8001ac72:	00b51463          	bne	a0,a1,8001ac7a <.LBB15_43+0x12e>
    8001ac76:	a009                	j	8001ac78 <.LBB15_43+0x12c>
    8001ac78:	a011                	j	8001ac7c <.LBB15_43+0x130>
        for offset in (0..self.dinode.size).step_by(size_of::<DirEntry>()) {
    8001ac7a:	bf2d                	j	8001abb4 <.LBB15_43+0x68>
            ptr::copy(name.as_ptr(), dir_entry.name.as_mut_ptr(), name.len());
    8001ac7c:	75c6                	ld	a1,112(sp)
    8001ac7e:	7566                	ld	a0,120(sp)
    8001ac80:	00005097          	auipc	ra,0x5
    8001ac84:	9b0080e7          	jalr	-1616(ra) # 8001f630 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hf7620495824cfb20E>
    8001ac88:	fc2a                	sd	a0,56(sp)
    8001ac8a:	a009                	j	8001ac8c <.LBB15_43+0x140>
    8001ac8c:	0c210513          	addi	a0,sp,194
    8001ac90:	45b9                	li	a1,14
    8001ac92:	00005097          	auipc	ra,0x5
    8001ac96:	8fc080e7          	jalr	-1796(ra) # 8001f58e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h69a6648c691317bcE>
    8001ac9a:	f82a                	sd	a0,48(sp)
    8001ac9c:	a009                	j	8001ac9e <.LBB15_43+0x152>
    8001ac9e:	75c6                	ld	a1,112(sp)
    8001aca0:	7566                	ld	a0,120(sp)
    8001aca2:	00005097          	auipc	ra,0x5
    8001aca6:	932080e7          	jalr	-1742(ra) # 8001f5d4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hb06ce83b043493f3E>
    8001acaa:	f42a                	sd	a0,40(sp)
    8001acac:	a009                	j	8001acae <.LBB15_43+0x162>
    8001acae:	7622                	ld	a2,40(sp)
    8001acb0:	75e2                	ld	a1,56(sp)
    8001acb2:	7542                	ld	a0,48(sp)
    8001acb4:	0000a097          	auipc	ra,0xa
    8001acb8:	446080e7          	jalr	1094(ra) # 800250fa <memmove>
    8001acbc:	a009                	j	8001acbe <.LBB15_43+0x172>
        dir_entry.inum = inum as u16;
    8001acbe:	654a                	ld	a0,144(sp)
    8001acc0:	0ca11023          	sh	a0,192(sp)
    8001acc4:	0188                	addi	a0,sp,192
            entry_offset, 
    8001acc6:	ec2a                	sd	a0,24(sp)
    8001acc8:	0d416503          	lwu	a0,212(sp)
            size_of::<DirEntry>() as u32
    8001accc:	f02a                	sd	a0,32(sp)
    8001acce:	a009                	j	8001acd0 <.LBB15_43+0x184>
        self.write(
    8001acd0:	7702                	ld	a4,32(sp)
    8001acd2:	66e2                	ld	a3,24(sp)
    8001acd4:	65aa                	ld	a1,136(sp)
    8001acd6:	1aa8                	addi	a0,sp,376
    8001acd8:	4601                	li	a2,0
    8001acda:	47c1                	li	a5,16
    8001acdc:	00000097          	auipc	ra,0x0
    8001ace0:	93c080e7          	jalr	-1732(ra) # 8001a618 <_ZN6kernel2fs5inode9InodeData5write17h219447b865f1c381E>
    8001ace4:	a009                	j	8001ace6 <.LBB15_43+0x19a>
    8001ace6:	1288                	addi	a0,sp,352
    8001ace8:	1aac                	addi	a1,sp,376
    8001acea:	ffff2097          	auipc	ra,0xffff2
    8001acee:	490080e7          	jalr	1168(ra) # 8000d17a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h0dd4a8728df8a7c8E>
    8001acf2:	a009                	j	8001acf4 <.LBB15_43+0x1a8>
        )?;
    8001acf4:	7516                	ld	a0,352(sp)
    8001acf6:	4581                	li	a1,0
    8001acf8:	00b50463          	beq	a0,a1,8001ad00 <.LBB15_43+0x1b4>
    8001acfc:	a009                	j	8001acfe <.LBB15_43+0x1b2>
    8001acfe:	a801                	j	8001ad0e <.LBB15_43+0x1c2>
        self.write(
    8001ad00:	7536                	ld	a0,360(sp)
    8001ad02:	20a13023          	sd	a0,512(sp)
    8001ad06:	4501                	li	a0,0
        Ok(())
    8001ad08:	ed2a                	sd	a0,152(sp)
    }
    8001ad0a:	a035                	j	8001ad36 <.LBB15_43+0x1ea>
        self.write(
    8001ad0c:	0000                	unimp
        )?;
    8001ad0e:	7536                	ld	a0,360(sp)
    8001ad10:	75d6                	ld	a1,368(sp)
    8001ad12:	fbaa                	sd	a0,496(sp)
    8001ad14:	ffae                	sd	a1,504(sp)
    8001ad16:	ffff1097          	auipc	ra,0xffff1
    8001ad1a:	d56080e7          	jalr	-682(ra) # 8000ba6c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h6f3e3843c20d184aE>
    8001ad1e:	e42a                	sd	a0,8(sp)
    8001ad20:	e82e                	sd	a1,16(sp)
    8001ad22:	a009                	j	8001ad24 <.LBB15_43+0x1d8>
        self.write(
    8001ad24:	65c2                	ld	a1,16(sp)
    8001ad26:	6522                	ld	a0,8(sp)
    8001ad28:	ffff2097          	auipc	ra,0xffff2
    8001ad2c:	3fa080e7          	jalr	1018(ra) # 8000d122 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h9d11a50f8e490b2eE>
    8001ad30:	ed2a                	sd	a0,152(sp)
    8001ad32:	f12e                	sd	a1,160(sp)
    8001ad34:	a009                	j	8001ad36 <.LBB15_43+0x1ea>
    }
    8001ad36:	656a                	ld	a0,152(sp)
    8001ad38:	758a                	ld	a1,160(sp)
    8001ad3a:	20813083          	ld	ra,520(sp)
    8001ad3e:	21010113          	addi	sp,sp,528
    8001ad42:	8082                	ret

000000008001ad44 <.LBB15_44>:
            entry_offset += size_of::<DirEntry>() as u32;
    8001ad44:	00010517          	auipc	a0,0x10
    8001ad48:	8bc50513          	addi	a0,a0,-1860 # 8002a600 <str.0>

000000008001ad4c <.LBB15_45>:
    8001ad4c:	00010617          	auipc	a2,0x10
    8001ad50:	09460613          	addi	a2,a2,148 # 8002ade0 <.L__unnamed_82>
    8001ad54:	45f1                	li	a1,28
    8001ad56:	00007097          	auipc	ra,0x7
    8001ad5a:	520080e7          	jalr	1312(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel2fs5inode9InodeData12is_dir_empty17h5fc1239b2ba5dde8E:

000000008001ad60 <_ZN6kernel2fs5inode9InodeData12is_dir_empty17h5fc1239b2ba5dde8E>:
    pub fn is_dir_empty(&mut self) -> bool {
    8001ad60:	7151                	addi	sp,sp,-240
    8001ad62:	f586                	sd	ra,232(sp)
    8001ad64:	f42a                	sd	a0,40(sp)
    8001ad66:	fd2a                	sd	a0,184(sp)
        let mut dir_entry = DirEntry::new();
    8001ad68:	fffed097          	auipc	ra,0xfffed
    8001ad6c:	54c080e7          	jalr	1356(ra) # 800082b4 <_ZN6kernel2fs6dinode8DirEntry3new17h74e849d4398bb7e4E>
    8001ad70:	e1aa                	sd	a0,192(sp)
    8001ad72:	e5ae                	sd	a1,200(sp)
    8001ad74:	fc2a                	sd	a0,56(sp)
    8001ad76:	e0ae                	sd	a1,64(sp)
    8001ad78:	a009                	j	8001ad7a <_ZN6kernel2fs5inode9InodeData12is_dir_empty17h5fc1239b2ba5dde8E+0x1a>
        let init_size = 2 * size_of::<DirEntry>() as u32;
    8001ad7a:	a009                	j	8001ad7c <_ZN6kernel2fs5inode9InodeData12is_dir_empty17h5fc1239b2ba5dde8E+0x1c>
    8001ad7c:	02000513          	li	a0,32
    8001ad80:	f02a                	sd	a0,32(sp)
    8001ad82:	4501                	li	a0,0
    8001ad84:	e565                	bnez	a0,8001ae6c <.LBB16_24>
    8001ad86:	a009                	j	8001ad88 <_ZN6kernel2fs5inode9InodeData12is_dir_empty17h5fc1239b2ba5dde8E+0x28>
    8001ad88:	7582                	ld	a1,32(sp)
    8001ad8a:	7522                	ld	a0,40(sp)
    8001ad8c:	cbae                	sw	a1,212(sp)
        let final_size = self.dinode.size;
    8001ad8e:	4908                	lw	a0,16(a0)
    8001ad90:	cdaa                	sw	a0,216(sp)
        for offset in (init_size..final_size).step_by(size_of::<DirEntry>()) {
    8001ad92:	dcae                	sw	a1,120(sp)
    8001ad94:	deaa                	sw	a0,124(sp)
    8001ad96:	a009                	j	8001ad98 <_ZN6kernel2fs5inode9InodeData12is_dir_empty17h5fc1239b2ba5dde8E+0x38>
    8001ad98:	5676                	lw	a2,124(sp)
    8001ad9a:	55e6                	lw	a1,120(sp)
    8001ad9c:	1088                	addi	a0,sp,96
    8001ad9e:	46c1                	li	a3,16
    8001ada0:	ffff1097          	auipc	ra,0xffff1
    8001ada4:	c70080e7          	jalr	-912(ra) # 8000ba10 <_ZN4core4iter6traits8iterator8Iterator7step_by17ha7dfda23787d2a26E>
    8001ada8:	a009                	j	8001adaa <_ZN6kernel2fs5inode9InodeData12is_dir_empty17h5fc1239b2ba5dde8E+0x4a>
    8001adaa:	00a8                	addi	a0,sp,72
    8001adac:	108c                	addi	a1,sp,96
    8001adae:	00002097          	auipc	ra,0x2
    8001adb2:	1e2080e7          	jalr	482(ra) # 8001cf90 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h09fa161dbb9bcdd3E>
    8001adb6:	a009                	j	8001adb8 <_ZN6kernel2fs5inode9InodeData12is_dir_empty17h5fc1239b2ba5dde8E+0x58>
    8001adb8:	6566                	ld	a0,88(sp)
    8001adba:	e92a                	sd	a0,144(sp)
    8001adbc:	6546                	ld	a0,80(sp)
    8001adbe:	e52a                	sd	a0,136(sp)
    8001adc0:	6526                	ld	a0,72(sp)
    8001adc2:	e12a                	sd	a0,128(sp)
    8001adc4:	a009                	j	8001adc6 <_ZN6kernel2fs5inode9InodeData12is_dir_empty17h5fc1239b2ba5dde8E+0x66>
    8001adc6:	0108                	addi	a0,sp,128
    8001adc8:	00002097          	auipc	ra,0x2
    8001adcc:	08a080e7          	jalr	138(ra) # 8001ce52 <_ZN105_$LT$core..iter..adapters..step_by..StepBy$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h04f2168711040ee1E>
    8001add0:	cd2a                	sw	a0,152(sp)
    8001add2:	cf2e                	sw	a1,156(sp)
    8001add4:	a009                	j	8001add6 <_ZN6kernel2fs5inode9InodeData12is_dir_empty17h5fc1239b2ba5dde8E+0x76>
    8001add6:	09816503          	lwu	a0,152(sp)
    8001adda:	4581                	li	a1,0
    8001addc:	00b50463          	beq	a0,a1,8001ade4 <_ZN6kernel2fs5inode9InodeData12is_dir_empty17h5fc1239b2ba5dde8E+0x84>
    8001ade0:	a009                	j	8001ade2 <_ZN6kernel2fs5inode9InodeData12is_dir_empty17h5fc1239b2ba5dde8E+0x82>
    8001ade2:	a031                	j	8001adee <_ZN6kernel2fs5inode9InodeData12is_dir_empty17h5fc1239b2ba5dde8E+0x8e>
    8001ade4:	4501                	li	a0,0
        false
    8001ade6:	02a10ba3          	sb	a0,55(sp)
    }
    8001adea:	a8a5                	j	8001ae62 <.LBB16_23+0x2c>
        for offset in (init_size..final_size).step_by(size_of::<DirEntry>()) {
    8001adec:	0000                	unimp
    8001adee:	09c16503          	lwu	a0,156(sp)
    8001adf2:	e82a                	sd	a0,16(sp)
    8001adf4:	cfaa                	sw	a0,220(sp)
    8001adf6:	d1aa                	sw	a0,224(sp)
    8001adf8:	d3aa                	sw	a0,228(sp)
    8001adfa:	1828                	addi	a0,sp,56
                size_of::<DirEntry>() as u32
    8001adfc:	ec2a                	sd	a0,24(sp)
    8001adfe:	a009                	j	8001ae00 <_ZN6kernel2fs5inode9InodeData12is_dir_empty17h5fc1239b2ba5dde8E+0xa0>
            if self.read(
    8001ae00:	6742                	ld	a4,16(sp)
    8001ae02:	66e2                	ld	a3,24(sp)
    8001ae04:	75a2                	ld	a1,40(sp)
    8001ae06:	1108                	addi	a0,sp,160
    8001ae08:	4601                	li	a2,0
    8001ae0a:	47c1                	li	a5,16
    8001ae0c:	fffff097          	auipc	ra,0xfffff
    8001ae10:	4ba080e7          	jalr	1210(ra) # 8001a2c6 <_ZN6kernel2fs5inode9InodeData4read17h2d02dc0e430e4837E>
    8001ae14:	a009                	j	8001ae16 <_ZN6kernel2fs5inode9InodeData12is_dir_empty17h5fc1239b2ba5dde8E+0xb6>
    8001ae16:	1108                	addi	a0,sp,160
    8001ae18:	ffff2097          	auipc	ra,0xffff2
    8001ae1c:	f64080e7          	jalr	-156(ra) # 8000cd7c <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17he593c7735b347060E>
    8001ae20:	e42a                	sd	a0,8(sp)
    8001ae22:	a009                	j	8001ae24 <_ZN6kernel2fs5inode9InodeData12is_dir_empty17h5fc1239b2ba5dde8E+0xc4>
    8001ae24:	6522                	ld	a0,8(sp)
    8001ae26:	4581                	li	a1,0
    8001ae28:	02b50263          	beq	a0,a1,8001ae4c <.LBB16_23+0x16>
    8001ae2c:	a009                	j	8001ae2e <.LBB16_22>

000000008001ae2e <.LBB16_22>:
                panic!("is_dir_empty(): Fail to read dir content");
    8001ae2e:	00010517          	auipc	a0,0x10
    8001ae32:	00350513          	addi	a0,a0,3 # 8002ae31 <.L__unnamed_83>

000000008001ae36 <.LBB16_23>:
    8001ae36:	00010617          	auipc	a2,0x10
    8001ae3a:	02a60613          	addi	a2,a2,42 # 8002ae60 <.L__unnamed_84>
    8001ae3e:	02800593          	li	a1,40
    8001ae42:	00007097          	auipc	ra,0x7
    8001ae46:	434080e7          	jalr	1076(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8001ae4a:	0000                	unimp
            if dir_entry.inum != 0 {
    8001ae4c:	03815503          	lhu	a0,56(sp)
    8001ae50:	4581                	li	a1,0
    8001ae52:	00b50763          	beq	a0,a1,8001ae60 <.LBB16_23+0x2a>
    8001ae56:	a009                	j	8001ae58 <.LBB16_23+0x22>
    8001ae58:	4505                	li	a0,1
                return true
    8001ae5a:	02a10ba3          	sb	a0,55(sp)
    }
    8001ae5e:	a011                	j	8001ae62 <.LBB16_23+0x2c>
        for offset in (init_size..final_size).step_by(size_of::<DirEntry>()) {
    8001ae60:	b79d                	j	8001adc6 <_ZN6kernel2fs5inode9InodeData12is_dir_empty17h5fc1239b2ba5dde8E+0x66>
    }
    8001ae62:	03714503          	lbu	a0,55(sp)
    8001ae66:	70ae                	ld	ra,232(sp)
    8001ae68:	616d                	addi	sp,sp,240
    8001ae6a:	8082                	ret

000000008001ae6c <.LBB16_24>:
        let init_size = 2 * size_of::<DirEntry>() as u32;
    8001ae6c:	00010517          	auipc	a0,0x10
    8001ae70:	fa450513          	addi	a0,a0,-92 # 8002ae10 <str.2>

000000008001ae74 <.LBB16_25>:
    8001ae74:	00010617          	auipc	a2,0x10
    8001ae78:	f8460613          	addi	a2,a2,-124 # 8002adf8 <.L__unnamed_85>
    8001ae7c:	02100593          	li	a1,33
    8001ae80:	00007097          	auipc	ra,0x7
    8001ae84:	3f6080e7          	jalr	1014(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN63_$LT$kernel..fs..inode..Inode$u20$as$u20$core..clone..Clone$GT$5clone17hdd0850fb54e2bc6cE:

000000008001ae8a <_ZN63_$LT$kernel..fs..inode..Inode$u20$as$u20$core..clone..Clone$GT$5clone17hdd0850fb54e2bc6cE>:
    fn clone(&self) -> Self {
    8001ae8a:	7139                	addi	sp,sp,-64
    8001ae8c:	fc06                	sd	ra,56(sp)
    8001ae8e:	85aa                	mv	a1,a0
    8001ae90:	ec2e                	sd	a1,24(sp)

000000008001ae92 <.LBB17_2>:
        ICACHE.dup(self)
    8001ae92:	0004d517          	auipc	a0,0x4d
    8001ae96:	bfe50513          	addi	a0,a0,-1026 # 80067a90 <_ZN6kernel2fs5inode6ICACHE17had1be8942ca79bf1E>
    8001ae9a:	ffffe097          	auipc	ra,0xffffe
    8001ae9e:	ace080e7          	jalr	-1330(ra) # 80018968 <_ZN6kernel2fs5inode10InodeCache3dup17h6659572d8df32b14E>
    8001aea2:	f02a                	sd	a0,32(sp)
    8001aea4:	f42e                	sd	a1,40(sp)
    8001aea6:	e42a                	sd	a0,8(sp)
    8001aea8:	e82e                	sd	a1,16(sp)
    8001aeaa:	a009                	j	8001aeac <.LBB17_2+0x1a>
    }
    8001aeac:	6522                	ld	a0,8(sp)
    8001aeae:	65c2                	ld	a1,16(sp)
    8001aeb0:	70e2                	ld	ra,56(sp)
    8001aeb2:	6121                	addi	sp,sp,64
    8001aeb4:	8082                	ret

Disassembly of section .text._ZN6kernel2fs5inode5Inode4lock17he70970c593f751adE:

000000008001aeb6 <_ZN6kernel2fs5inode5Inode4lock17he70970c593f751adE>:
    pub fn lock<'a>(&'a self) -> SleepLockGuard<'a, InodeData> {
    8001aeb6:	7129                	addi	sp,sp,-320
    8001aeb8:	fe06                	sd	ra,312(sp)
    8001aeba:	f8aa                	sd	a0,112(sp)
    8001aebc:	ee2a                	sd	a0,280(sp)
        assert!(self.index < NINODE, "index must less than NINODE");
    8001aebe:	6108                	ld	a0,0(a0)
    8001aec0:	03200593          	li	a1,50
    8001aec4:	02b56163          	bltu	a0,a1,8001aee6 <.LBB18_26+0x14>
    8001aec8:	a009                	j	8001aeca <.LBB18_25>

000000008001aeca <.LBB18_25>:
    8001aeca:	00010517          	auipc	a0,0x10
    8001aece:	fae50513          	addi	a0,a0,-82 # 8002ae78 <.L__unnamed_86>

000000008001aed2 <.LBB18_26>:
    8001aed2:	00010617          	auipc	a2,0x10
    8001aed6:	fc660613          	addi	a2,a2,-58 # 8002ae98 <.L__unnamed_87>
    8001aeda:	45ed                	li	a1,27
    8001aedc:	00007097          	auipc	ra,0x7
    8001aee0:	39a080e7          	jalr	922(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8001aee4:	0000                	unimp
        let mut guard = ICACHE.data[self.index].lock();
    8001aee6:	7546                	ld	a0,112(sp)
    8001aee8:	610c                	ld	a1,0(a0)
    8001aeea:	f4ae                	sd	a1,104(sp)
    8001aeec:	03100513          	li	a0,49
    8001aef0:	1ab56463          	bltu	a0,a1,8001b098 <.LBB18_32+0x22>
    8001aef4:	a009                	j	8001aef6 <.LBB18_26+0x24>
    8001aef6:	7526                	ld	a0,104(sp)
    8001aef8:	00751593          	slli	a1,a0,0x7

000000008001aefc <.LBB18_27>:
    8001aefc:	0004d517          	auipc	a0,0x4d
    8001af00:	b9450513          	addi	a0,a0,-1132 # 80067a90 <_ZN6kernel2fs5inode6ICACHE17had1be8942ca79bf1E>
    8001af04:	952e                	add	a0,a0,a1
    8001af06:	4d050513          	addi	a0,a0,1232
    8001af0a:	00002097          	auipc	ra,0x2
    8001af0e:	536080e7          	jalr	1334(ra) # 8001d440 <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$4lock17h5e4056570307628eE>
    8001af12:	fcaa                	sd	a0,120(sp)
    8001af14:	e12e                	sd	a1,128(sp)
    8001af16:	a009                	j	8001af18 <.LBB18_27+0x1c>
    8001af18:	18a8                	addi	a0,sp,120
        if !guard.valid {
    8001af1a:	00002097          	auipc	ra,0x2
    8001af1e:	7b4080e7          	jalr	1972(ra) # 8001d6ce <_ZN92_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfc7812d7ca7ab1e1E>
    8001af22:	f0aa                	sd	a0,96(sp)
    8001af24:	a009                	j	8001af26 <.LBB18_27+0x2a>
    8001af26:	7506                	ld	a0,96(sp)
    8001af28:	04854503          	lbu	a0,72(a0)
    8001af2c:	8905                	andi	a0,a0,1
    8001af2e:	e10d                	bnez	a0,8001af50 <.LBB18_28+0x1a>
    8001af30:	a009                	j	8001af32 <.LBB18_27+0x36>
            let blockno = unsafe{ SUPER_BLOCK.locate_inode(self.inum) };
    8001af32:	7546                	ld	a0,112(sp)
    8001af34:	454c                	lw	a1,12(a0)

000000008001af36 <.LBB18_28>:
    8001af36:	00056517          	auipc	a0,0x56
    8001af3a:	16a50513          	addi	a0,a0,362 # 800710a0 <_ZN6kernel2fs10superblock11SUPER_BLOCK17hc3889871ecbe2b54E>
    8001af3e:	fffed097          	auipc	ra,0xfffed
    8001af42:	812080e7          	jalr	-2030(ra) # 80007750 <_ZN6kernel2fs10superblock10SuperBlock12locate_inode17hc2dbfb20b9411e7cE>
    8001af46:	85aa                	mv	a1,a0
    8001af48:	ecae                	sd	a1,88(sp)
    8001af4a:	12a12223          	sw	a0,292(sp)
    8001af4e:	a011                	j	8001af52 <.LBB18_28+0x1c>
        if !guard.valid {
    8001af50:	aa3d                	j	8001b08e <.LBB18_32+0x18>
            let buf = BCACHE.bread(self.dev, blockno);
    8001af52:	66e6                	ld	a3,88(sp)
    8001af54:	7546                	ld	a0,112(sp)
    8001af56:	4510                	lw	a2,8(a0)

000000008001af58 <.LBB18_29>:
    8001af58:	00014597          	auipc	a1,0x14
    8001af5c:	0a858593          	addi	a1,a1,168 # 8002f000 <_ZN6kernel2fs3bio6BCACHE17h4811aac4f8d79dc4E>
    8001af60:	0128                	addi	a0,sp,136
    8001af62:	fffe8097          	auipc	ra,0xfffe8
    8001af66:	69a080e7          	jalr	1690(ra) # 800035fc <_ZN6kernel2fs3bio6Bcache5bread17h6ef915e4e896646bE>
    8001af6a:	a009                	j	8001af6c <.LBB18_29+0x14>
            let offset = locate_inode_offset(self.inum) as isize;
    8001af6c:	7546                	ld	a0,112(sp)
    8001af6e:	4548                	lw	a0,12(a0)
    8001af70:	00000097          	auipc	ra,0x0
    8001af74:	140080e7          	jalr	320(ra) # 8001b0b0 <_ZN6kernel2fs5inode19locate_inode_offset17h88c1ade407c59915E>
    8001af78:	e8aa                	sd	a0,80(sp)
    8001af7a:	a009                	j	8001af7c <.LBB18_29+0x24>
    8001af7c:	6546                	ld	a0,80(sp)
    8001af7e:	f62a                	sd	a0,296(sp)
    8001af80:	0128                	addi	a0,sp,136
            let dinode = unsafe{ (buf.raw_data() as *const DiskInode).offset(offset) };
    8001af82:	fffe8097          	auipc	ra,0xfffe8
    8001af86:	7c0080e7          	jalr	1984(ra) # 80003742 <_ZN6kernel2fs3bio3Buf8raw_data17h6a896fea03f7ee91E>
    8001af8a:	e4aa                	sd	a0,72(sp)
    8001af8c:	a009                	j	8001af8e <.LBB18_29+0x36>
    8001af8e:	65c6                	ld	a1,80(sp)
    8001af90:	6526                	ld	a0,72(sp)
    8001af92:	ffffd097          	auipc	ra,0xffffd
    8001af96:	4d4080e7          	jalr	1236(ra) # 80018466 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hb9f56331d13383c1E>
    8001af9a:	85aa                	mv	a1,a0
    8001af9c:	e0ae                	sd	a1,64(sp)
    8001af9e:	fa2a                	sd	a0,304(sp)
    8001afa0:	a009                	j	8001afa2 <.LBB18_29+0x4a>
            guard.dinode = unsafe{ core::ptr::read(dinode) };
    8001afa2:	6586                	ld	a1,64(sp)
    8001afa4:	1908                	addi	a0,sp,176
    8001afa6:	ffffe097          	auipc	ra,0xffffe
    8001afaa:	836080e7          	jalr	-1994(ra) # 800187dc <_ZN4core3ptr4read17hd38a26e0d5db892cE>
    8001afae:	a009                	j	8001afb0 <.LBB18_29+0x58>
    8001afb0:	18a8                	addi	a0,sp,120
    8001afb2:	00002097          	auipc	ra,0x2
    8001afb6:	730080e7          	jalr	1840(ra) # 8001d6e2 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    8001afba:	fc2a                	sd	a0,56(sp)
    8001afbc:	a009                	j	8001afbe <.LBB18_29+0x66>
    8001afbe:	7562                	ld	a0,56(sp)
    8001afc0:	0521                	addi	a0,a0,8
    8001afc2:	190c                	addi	a1,sp,176
    8001afc4:	04000613          	li	a2,64
    8001afc8:	0000a097          	auipc	ra,0xa
    8001afcc:	11c080e7          	jalr	284(ra) # 800250e4 <memcpy>
            drop(buf);
    8001afd0:	652a                	ld	a0,136(sp)
    8001afd2:	f9aa                	sd	a0,240(sp)
    8001afd4:	654a                	ld	a0,144(sp)
    8001afd6:	fdaa                	sd	a0,248(sp)
    8001afd8:	656a                	ld	a0,152(sp)
    8001afda:	e22a                	sd	a0,256(sp)
    8001afdc:	750a                	ld	a0,160(sp)
    8001afde:	e62a                	sd	a0,264(sp)
    8001afe0:	752a                	ld	a0,168(sp)
    8001afe2:	ea2a                	sd	a0,272(sp)
    8001afe4:	1988                	addi	a0,sp,240
    8001afe6:	00002097          	auipc	ra,0x2
    8001afea:	174080e7          	jalr	372(ra) # 8001d15a <_ZN4core3mem4drop17hda1e19029436deb9E>
    8001afee:	a009                	j	8001aff0 <.LBB18_29+0x98>
    8001aff0:	18a8                	addi	a0,sp,120
            guard.valid = true;
    8001aff2:	00002097          	auipc	ra,0x2
    8001aff6:	6f0080e7          	jalr	1776(ra) # 8001d6e2 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    8001affa:	f82a                	sd	a0,48(sp)
    8001affc:	a009                	j	8001affe <.LBB18_29+0xa6>
    8001affe:	7546                	ld	a0,112(sp)
    8001b000:	7642                	ld	a2,48(sp)
    8001b002:	4585                	li	a1,1
    8001b004:	04b60423          	sb	a1,72(a2)
            guard.dev = self.dev;
    8001b008:	00856503          	lwu	a0,8(a0)
    8001b00c:	f02a                	sd	a0,32(sp)
    8001b00e:	18a8                	addi	a0,sp,120
    8001b010:	00002097          	auipc	ra,0x2
    8001b014:	6d2080e7          	jalr	1746(ra) # 8001d6e2 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    8001b018:	f42a                	sd	a0,40(sp)
    8001b01a:	a009                	j	8001b01c <.LBB18_29+0xc4>
    8001b01c:	7546                	ld	a0,112(sp)
    8001b01e:	7582                	ld	a1,32(sp)
    8001b020:	7622                	ld	a2,40(sp)
    8001b022:	c20c                	sw	a1,0(a2)
            guard.inum = self.inum;
    8001b024:	00c56503          	lwu	a0,12(a0)
    8001b028:	e82a                	sd	a0,16(sp)
    8001b02a:	18a8                	addi	a0,sp,120
    8001b02c:	00002097          	auipc	ra,0x2
    8001b030:	6b6080e7          	jalr	1718(ra) # 8001d6e2 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    8001b034:	ec2a                	sd	a0,24(sp)
    8001b036:	a009                	j	8001b038 <.LBB18_29+0xe0>
    8001b038:	6542                	ld	a0,16(sp)
    8001b03a:	65e2                	ld	a1,24(sp)
    8001b03c:	c1c8                	sw	a0,4(a1)
    8001b03e:	18a8                	addi	a0,sp,120
            if guard.dinode.itype == InodeType::Empty {
    8001b040:	00002097          	auipc	ra,0x2
    8001b044:	68e080e7          	jalr	1678(ra) # 8001d6ce <_ZN92_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfc7812d7ca7ab1e1E>
    8001b048:	e42a                	sd	a0,8(sp)
    8001b04a:	a009                	j	8001b04c <.LBB18_29+0xf4>
    8001b04c:	6522                	ld	a0,8(sp)
    8001b04e:	0521                	addi	a0,a0,8

000000008001b050 <.LBB18_30>:
    8001b050:	00010597          	auipc	a1,0x10
    8001b054:	e7858593          	addi	a1,a1,-392 # 8002aec8 <.L__unnamed_88>
    8001b058:	fffed097          	auipc	ra,0xfffed
    8001b05c:	36a080e7          	jalr	874(ra) # 800083c2 <_ZN70_$LT$kernel..fs..dinode..InodeType$u20$as$u20$core..cmp..PartialEq$GT$2eq17ha4431a2c7299d33fE>
    8001b060:	e02a                	sd	a0,0(sp)
    8001b062:	a009                	j	8001b064 <.LBB18_30+0x14>
    8001b064:	6502                	ld	a0,0(sp)
    8001b066:	4581                	li	a1,0
    8001b068:	02b50263          	beq	a0,a1,8001b08c <.LBB18_32+0x16>
    8001b06c:	a009                	j	8001b06e <.LBB18_31>

000000008001b06e <.LBB18_31>:
                panic!("inode lock: trying to lock an inode whose type is empty.")
    8001b06e:	00010517          	auipc	a0,0x10
    8001b072:	e5c50513          	addi	a0,a0,-420 # 8002aeca <.L__unnamed_89>

000000008001b076 <.LBB18_32>:
    8001b076:	00010617          	auipc	a2,0x10
    8001b07a:	e9260613          	addi	a2,a2,-366 # 8002af08 <.L__unnamed_90>
    8001b07e:	03800593          	li	a1,56
    8001b082:	00007097          	auipc	ra,0x7
    8001b086:	1f4080e7          	jalr	500(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8001b08a:	0000                	unimp
        if !guard.valid {
    8001b08c:	a009                	j	8001b08e <.LBB18_32+0x18>
    }
    8001b08e:	7566                	ld	a0,120(sp)
    8001b090:	658a                	ld	a1,128(sp)
    8001b092:	70f2                	ld	ra,312(sp)
    8001b094:	6131                	addi	sp,sp,320
    8001b096:	8082                	ret
        let mut guard = ICACHE.data[self.index].lock();
    8001b098:	7526                	ld	a0,104(sp)

000000008001b09a <.LBB18_33>:
    8001b09a:	00010617          	auipc	a2,0x10
    8001b09e:	e1660613          	addi	a2,a2,-490 # 8002aeb0 <.L__unnamed_91>
    8001b0a2:	03200593          	li	a1,50
    8001b0a6:	00007097          	auipc	ra,0x7
    8001b0aa:	1fc080e7          	jalr	508(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel2fs5inode19locate_inode_offset17h88c1ade407c59915E:

000000008001b0b0 <_ZN6kernel2fs5inode19locate_inode_offset17h88c1ade407c59915E>:


/// Given an inode number. 
/// Calculate the offset index of this inode inside the block. 
#[inline]
fn locate_inode_offset(inum: u32) -> usize {
    8001b0b0:	1141                	addi	sp,sp,-16
    8001b0b2:	c62a                	sw	a0,12(sp)
    inum as usize % IPB
    8001b0b4:	893d                	andi	a0,a0,15
}
    8001b0b6:	0141                	addi	sp,sp,16
    8001b0b8:	8082                	ret

Disassembly of section .text._ZN4core3ptr8metadata14from_raw_parts17hb35c9d87c96e1656E:

000000008001b0ba <_ZN4core3ptr8metadata14from_raw_parts17hb35c9d87c96e1656E>:
///
/// [`slice::from_raw_parts`]: crate::slice::from_raw_parts
#[unstable(feature = "ptr_metadata", issue = "81513")]
#[rustc_const_unstable(feature = "ptr_metadata", issue = "81513")]
#[inline]
pub const fn from_raw_parts<T: ?Sized>(
    8001b0ba:	7179                	addi	sp,sp,-48
    8001b0bc:	f02a                	sd	a0,32(sp)
    8001b0be:	f42e                	sd	a1,40(sp)
    metadata: <T as Pointee>::Metadata,
) -> *const T {
    // SAFETY: Accessing the value from the `PtrRepr` union is safe since *const T
    // and PtrComponents<T> have the same memory layouts. Only std can make this
    // guarantee.
    unsafe { PtrRepr { components: PtrComponents { data_address, metadata } }.const_ptr }
    8001b0c0:	e82a                	sd	a0,16(sp)
    8001b0c2:	ec2e                	sd	a1,24(sp)
    8001b0c4:	e02a                	sd	a0,0(sp)
    8001b0c6:	e42e                	sd	a1,8(sp)
}
    8001b0c8:	6145                	addi	sp,sp,48
    8001b0ca:	8082                	ret

Disassembly of section .text._ZN4core3ptr8metadata14from_raw_parts17hd9330322b61d2f92E:

000000008001b0cc <_ZN4core3ptr8metadata14from_raw_parts17hd9330322b61d2f92E>:
pub const fn from_raw_parts<T: ?Sized>(
    8001b0cc:	7179                	addi	sp,sp,-48
    8001b0ce:	f02a                	sd	a0,32(sp)
    8001b0d0:	f42e                	sd	a1,40(sp)
    unsafe { PtrRepr { components: PtrComponents { data_address, metadata } }.const_ptr }
    8001b0d2:	e82a                	sd	a0,16(sp)
    8001b0d4:	ec2e                	sd	a1,24(sp)
    8001b0d6:	e02a                	sd	a0,0(sp)
    8001b0d8:	e42e                	sd	a1,8(sp)
}
    8001b0da:	6145                	addi	sp,sp,48
    8001b0dc:	8082                	ret

Disassembly of section .text._ZN4core3ptr8metadata8metadata17h8c3e19bdf44a2913E:

000000008001b0de <_ZN4core3ptr8metadata8metadata17h8c3e19bdf44a2913E>:
pub const fn metadata<T: ?Sized>(ptr: *const T) -> <T as Pointee>::Metadata {
    8001b0de:	7179                	addi	sp,sp,-48
    8001b0e0:	e42e                	sd	a1,8(sp)
    8001b0e2:	85aa                	mv	a1,a0
    8001b0e4:	6522                	ld	a0,8(sp)
    8001b0e6:	f02e                	sd	a1,32(sp)
    8001b0e8:	f42a                	sd	a0,40(sp)
    unsafe { PtrRepr { const_ptr: ptr }.components.metadata }
    8001b0ea:	e82e                	sd	a1,16(sp)
    8001b0ec:	ec2a                	sd	a0,24(sp)
}
    8001b0ee:	6145                	addi	sp,sp,48
    8001b0f0:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h3aa8018dbd05d49dE:

000000008001b0f2 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h3aa8018dbd05d49dE>:
    pub const fn is_null(self) -> bool {
    8001b0f2:	1101                	addi	sp,sp,-32
    8001b0f4:	ec06                	sd	ra,24(sp)
    8001b0f6:	e82a                	sd	a0,16(sp)
        (self as *mut u8).guaranteed_eq(null_mut())
    8001b0f8:	e42a                	sd	a0,8(sp)
    8001b0fa:	a009                	j	8001b0fc <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h3aa8018dbd05d49dE+0xa>
    8001b0fc:	6522                	ld	a0,8(sp)
    8001b0fe:	4581                	li	a1,0
    8001b100:	00007097          	auipc	ra,0x7
    8001b104:	f3c080e7          	jalr	-196(ra) # 8002203c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$13guaranteed_eq17h32ea8c99c0b8220dE>
    8001b108:	e02a                	sd	a0,0(sp)
    8001b10a:	a009                	j	8001b10c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h3aa8018dbd05d49dE+0x1a>
    }
    8001b10c:	6502                	ld	a0,0(sp)
    8001b10e:	60e2                	ld	ra,24(sp)
    8001b110:	6105                	addi	sp,sp,32
    8001b112:	8082                	ret

Disassembly of section .text._ZN4core4char7methods15encode_utf8_raw17h793a073b272121f7E:

000000008001b114 <_ZN4core4char7methods15encode_utf8_raw17h793a073b272121f7E>:
/// Panics if the buffer is not large enough.
/// A buffer of length four is large enough to encode any `char`.
#[unstable(feature = "char_internals", reason = "exposed only for libstd", issue = "none")]
#[doc(hidden)]
#[inline]
pub fn encode_utf8_raw(code: u32, dst: &mut [u8]) -> &mut [u8] {
    8001b114:	7121                	addi	sp,sp,-448
    8001b116:	ff06                	sd	ra,440(sp)
    8001b118:	e132                	sd	a2,128(sp)
    8001b11a:	e52e                	sd	a1,136(sp)
    8001b11c:	cb2a                	sw	a0,148(sp)
    8001b11e:	e2ae                	sd	a1,320(sp)
    8001b120:	e6b2                	sd	a2,328(sp)
    let len = len_utf8(code);
    8001b122:	00000097          	auipc	ra,0x0
    8001b126:	280080e7          	jalr	640(ra) # 8001b3a2 <_ZN4core4char7methods8len_utf817hc045ab91f009a8ffE>
    8001b12a:	ed2a                	sd	a0,152(sp)
    8001b12c:	a009                	j	8001b12e <_ZN4core4char7methods15encode_utf8_raw17h793a073b272121f7E+0x1a>
    match (len, &mut dst[..]) {
    8001b12e:	658a                	ld	a1,128(sp)
    8001b130:	652a                	ld	a0,136(sp)
    8001b132:	666a                	ld	a2,152(sp)
    8001b134:	f4b2                	sd	a2,104(sp)

000000008001b136 <.LBB0_22>:
    8001b136:	00010617          	auipc	a2,0x10
    8001b13a:	e6a60613          	addi	a2,a2,-406 # 8002afa0 <.L__unnamed_1>
    8001b13e:	ffff6097          	auipc	ra,0xffff6
    8001b142:	678080e7          	jalr	1656(ra) # 800117b6 <_ZN4core5slice5index77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h6397a28cd31ac6bcE>
    8001b146:	f8aa                	sd	a0,112(sp)
    8001b148:	fcae                	sd	a1,120(sp)
    8001b14a:	a009                	j	8001b14c <.LBB0_22+0x16>
    8001b14c:	7526                	ld	a0,104(sp)
    8001b14e:	75e6                	ld	a1,120(sp)
    8001b150:	7646                	ld	a2,112(sp)
    8001b152:	f12a                	sd	a0,160(sp)
    8001b154:	f532                	sd	a2,168(sp)
    8001b156:	f92e                	sd	a1,176(sp)
        (1, [a, ..]) => {
    8001b158:	85aa                	mv	a1,a0
    8001b15a:	f0ae                	sd	a1,96(sp)
    8001b15c:	4585                	li	a1,1
    8001b15e:	02b50263          	beq	a0,a1,8001b182 <.LBB0_22+0x4c>
    8001b162:	a009                	j	8001b164 <.LBB0_22+0x2e>
    8001b164:	7506                	ld	a0,96(sp)
    8001b166:	4589                	li	a1,2
    8001b168:	02b50a63          	beq	a0,a1,8001b19c <.LBB0_22+0x66>
    8001b16c:	a009                	j	8001b16e <.LBB0_22+0x38>
    8001b16e:	7506                	ld	a0,96(sp)
    8001b170:	458d                	li	a1,3
    8001b172:	02b50a63          	beq	a0,a1,8001b1a6 <.LBB0_22+0x70>
    8001b176:	a009                	j	8001b178 <.LBB0_22+0x42>
    8001b178:	7506                	ld	a0,96(sp)
    8001b17a:	4591                	li	a1,4
    8001b17c:	02b50a63          	beq	a0,a1,8001b1b0 <.LBB0_22+0x7a>
    8001b180:	a031                	j	8001b18c <.LBB0_22+0x56>
    8001b182:	754a                	ld	a0,176(sp)
    8001b184:	4581                	li	a1,0
    8001b186:	02b51a63          	bne	a0,a1,8001b1ba <.LBB0_22+0x84>
    8001b18a:	a009                	j	8001b18c <.LBB0_22+0x56>
        }
        _ => panic!(
            "encode_utf8: need {} bytes to encode U+{:X}, but the buffer has {}",
            len,
            code,
            dst.len(),
    8001b18c:	658a                	ld	a1,128(sp)
    8001b18e:	652a                	ld	a0,136(sp)
    8001b190:	00004097          	auipc	ra,0x4
    8001b194:	444080e7          	jalr	1092(ra) # 8001f5d4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hb06ce83b043493f3E>
    8001b198:	fa2a                	sd	a0,304(sp)
    8001b19a:	a8c5                	j	8001b28a <.LBB0_22+0x154>
        (2, [a, b, ..]) => {
    8001b19c:	75ca                	ld	a1,176(sp)
    8001b19e:	4505                	li	a0,1
    8001b1a0:	02b56463          	bltu	a0,a1,8001b1c8 <.LBB0_22+0x92>
    8001b1a4:	b7e5                	j	8001b18c <.LBB0_22+0x56>
        (3, [a, b, c, ..]) => {
    8001b1a6:	75ca                	ld	a1,176(sp)
    8001b1a8:	4509                	li	a0,2
    8001b1aa:	04b56463          	bltu	a0,a1,8001b1f2 <.LBB0_22+0xbc>
    8001b1ae:	bff9                	j	8001b18c <.LBB0_22+0x56>
        (4, [a, b, c, d, ..]) => {
    8001b1b0:	75ca                	ld	a1,176(sp)
    8001b1b2:	450d                	li	a0,3
    8001b1b4:	06b56f63          	bltu	a0,a1,8001b232 <.LBB0_22+0xfc>
    8001b1b8:	bfd1                	j	8001b18c <.LBB0_22+0x56>
        (1, [a, ..]) => {
    8001b1ba:	75aa                	ld	a1,168(sp)
    8001b1bc:	ef2e                	sd	a1,408(sp)
            *a = code as u8;
    8001b1be:	09410503          	lb	a0,148(sp)
    8001b1c2:	00a58023          	sb	a0,0(a1)
    match (len, &mut dst[..]) {
    8001b1c6:	a29d                	j	8001b32c <.LBB0_27+0x14>
        (2, [a, b, ..]) => {
    8001b1c8:	75aa                	ld	a1,168(sp)
    8001b1ca:	e72e                	sd	a1,392(sp)
    8001b1cc:	00158513          	addi	a0,a1,1
    8001b1d0:	eb2a                	sd	a0,400(sp)
            *a = (code >> 6 & 0x1F) as u8 | TAG_TWO_B;
    8001b1d2:	455a                	lw	a0,148(sp)
    8001b1d4:	8119                	srli	a0,a0,0x6
    8001b1d6:	897d                	andi	a0,a0,31
    8001b1d8:	0c056513          	ori	a0,a0,192
    8001b1dc:	00a58023          	sb	a0,0(a1)
            *b = (code & 0x3F) as u8 | TAG_CONT;
    8001b1e0:	09414503          	lbu	a0,148(sp)
    8001b1e4:	03f57513          	andi	a0,a0,63
    8001b1e8:	08056513          	ori	a0,a0,128
    8001b1ec:	00a580a3          	sb	a0,1(a1)
    match (len, &mut dst[..]) {
    8001b1f0:	aa35                	j	8001b32c <.LBB0_27+0x14>
        (3, [a, b, c, ..]) => {
    8001b1f2:	75aa                	ld	a1,168(sp)
    8001b1f4:	faae                	sd	a1,368(sp)
    8001b1f6:	00158513          	addi	a0,a1,1
    8001b1fa:	feaa                	sd	a0,376(sp)
    8001b1fc:	00258513          	addi	a0,a1,2
    8001b200:	e32a                	sd	a0,384(sp)
            *a = (code >> 12 & 0x0F) as u8 | TAG_THREE_B;
    8001b202:	455a                	lw	a0,148(sp)
    8001b204:	8131                	srli	a0,a0,0xc
    8001b206:	893d                	andi	a0,a0,15
    8001b208:	0e056513          	ori	a0,a0,224
    8001b20c:	00a58023          	sb	a0,0(a1)
            *b = (code >> 6 & 0x3F) as u8 | TAG_CONT;
    8001b210:	455a                	lw	a0,148(sp)
    8001b212:	8119                	srli	a0,a0,0x6
    8001b214:	03f57513          	andi	a0,a0,63
    8001b218:	08056513          	ori	a0,a0,128
    8001b21c:	00a580a3          	sb	a0,1(a1)
            *c = (code & 0x3F) as u8 | TAG_CONT;
    8001b220:	09414503          	lbu	a0,148(sp)
    8001b224:	03f57513          	andi	a0,a0,63
    8001b228:	08056513          	ori	a0,a0,128
    8001b22c:	00a58123          	sb	a0,2(a1)
    match (len, &mut dst[..]) {
    8001b230:	a8f5                	j	8001b32c <.LBB0_27+0x14>
        (4, [a, b, c, d, ..]) => {
    8001b232:	75aa                	ld	a1,168(sp)
    8001b234:	ecae                	sd	a1,88(sp)
    8001b236:	eaae                	sd	a1,336(sp)
    8001b238:	00158513          	addi	a0,a1,1
    8001b23c:	eeaa                	sd	a0,344(sp)
    8001b23e:	00258513          	addi	a0,a1,2
    8001b242:	f2aa                	sd	a0,352(sp)
    8001b244:	00358513          	addi	a0,a1,3
    8001b248:	f6aa                	sd	a0,360(sp)
            *a = (code >> 18 & 0x07) as u8 | TAG_FOUR_B;
    8001b24a:	455a                	lw	a0,148(sp)
    8001b24c:	8149                	srli	a0,a0,0x12
    8001b24e:	891d                	andi	a0,a0,7
    8001b250:	0f056513          	ori	a0,a0,240
    8001b254:	00a58023          	sb	a0,0(a1)
            *b = (code >> 12 & 0x3F) as u8 | TAG_CONT;
    8001b258:	455a                	lw	a0,148(sp)
    8001b25a:	8131                	srli	a0,a0,0xc
    8001b25c:	03f57513          	andi	a0,a0,63
    8001b260:	08056513          	ori	a0,a0,128
    8001b264:	00a580a3          	sb	a0,1(a1)
            *c = (code >> 6 & 0x3F) as u8 | TAG_CONT;
    8001b268:	455a                	lw	a0,148(sp)
    8001b26a:	8119                	srli	a0,a0,0x6
    8001b26c:	03f57513          	andi	a0,a0,63
    8001b270:	08056513          	ori	a0,a0,128
    8001b274:	00a58123          	sb	a0,2(a1)
            *d = (code & 0x3F) as u8 | TAG_CONT;
    8001b278:	09414503          	lbu	a0,148(sp)
    8001b27c:	03f57513          	andi	a0,a0,63
    8001b280:	08056513          	ori	a0,a0,128
    8001b284:	00a581a3          	sb	a0,3(a1)
    match (len, &mut dst[..]) {
    8001b288:	a055                	j	8001b32c <.LBB0_27+0x14>
    8001b28a:	0928                	addi	a0,sp,152
        _ => panic!(
    8001b28c:	ee2a                	sd	a0,280(sp)
    8001b28e:	0950                	addi	a2,sp,148
    8001b290:	fc32                	sd	a2,56(sp)
    8001b292:	f232                	sd	a2,288(sp)
    8001b294:	1a0c                	addi	a1,sp,304
    8001b296:	e0ae                	sd	a1,64(sp)
    8001b298:	f62e                	sd	a1,296(sp)
    8001b29a:	f32a                	sd	a0,416(sp)
    8001b29c:	f732                	sd	a2,424(sp)
    8001b29e:	fb2e                	sd	a1,432(sp)

000000008001b2a0 <.LBB0_23>:
    8001b2a0:	00009597          	auipc	a1,0x9
    8001b2a4:	66258593          	addi	a1,a1,1634 # 80024902 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h9c6c4af1578f7c29E>
    8001b2a8:	00004097          	auipc	ra,0x4
    8001b2ac:	3f8080e7          	jalr	1016(ra) # 8001f6a0 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    8001b2b0:	e4aa                	sd	a0,72(sp)
    8001b2b2:	e8ae                	sd	a1,80(sp)
    8001b2b4:	a009                	j	8001b2b6 <.LBB0_23+0x16>
    8001b2b6:	7562                	ld	a0,56(sp)

000000008001b2b8 <.LBB0_24>:
    8001b2b8:	00009597          	auipc	a1,0x9
    8001b2bc:	07658593          	addi	a1,a1,118 # 8002432e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hf71897f85e3edf35E>
    8001b2c0:	00007097          	auipc	ra,0x7
    8001b2c4:	d44080e7          	jalr	-700(ra) # 80022004 <_ZN4core3fmt10ArgumentV13new17ha67f1954b9155e6dE>
    8001b2c8:	f42a                	sd	a0,40(sp)
    8001b2ca:	f82e                	sd	a1,48(sp)
    8001b2cc:	a009                	j	8001b2ce <.LBB0_24+0x16>
    8001b2ce:	6506                	ld	a0,64(sp)

000000008001b2d0 <.LBB0_25>:
    8001b2d0:	00009597          	auipc	a1,0x9
    8001b2d4:	63258593          	addi	a1,a1,1586 # 80024902 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h9c6c4af1578f7c29E>
    8001b2d8:	00004097          	auipc	ra,0x4
    8001b2dc:	3c8080e7          	jalr	968(ra) # 8001f6a0 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    8001b2e0:	ec2a                	sd	a0,24(sp)
    8001b2e2:	f02e                	sd	a1,32(sp)
    8001b2e4:	a009                	j	8001b2e6 <.LBB0_25+0x16>
    8001b2e6:	7502                	ld	a0,32(sp)
    8001b2e8:	65e2                	ld	a1,24(sp)
    8001b2ea:	7642                	ld	a2,48(sp)
    8001b2ec:	76a2                	ld	a3,40(sp)
    8001b2ee:	6746                	ld	a4,80(sp)
    8001b2f0:	67a6                	ld	a5,72(sp)
    8001b2f2:	f5be                	sd	a5,232(sp)
    8001b2f4:	f9ba                	sd	a4,240(sp)
    8001b2f6:	fdb6                	sd	a3,248(sp)
    8001b2f8:	e232                	sd	a2,256(sp)
    8001b2fa:	e62e                	sd	a1,264(sp)
    8001b2fc:	ea2a                	sd	a0,272(sp)

000000008001b2fe <.LBB0_26>:
    8001b2fe:	00010597          	auipc	a1,0x10
    8001b302:	d1258593          	addi	a1,a1,-750 # 8002b010 <.L__unnamed_2>
    8001b306:	1928                	addi	a0,sp,184
    8001b308:	11b4                	addi	a3,sp,232
    8001b30a:	470d                	li	a4,3
    8001b30c:	863a                	mv	a2,a4
    8001b30e:	fffea097          	auipc	ra,0xfffea
    8001b312:	15c080e7          	jalr	348(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8001b316:	a009                	j	8001b318 <.LBB0_27>

000000008001b318 <.LBB0_27>:
    8001b318:	00010597          	auipc	a1,0x10
    8001b31c:	d2858593          	addi	a1,a1,-728 # 8002b040 <.L__unnamed_3>
    8001b320:	1928                	addi	a0,sp,184
    8001b322:	00007097          	auipc	ra,0x7
    8001b326:	fc0080e7          	jalr	-64(ra) # 800222e2 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
    8001b32a:	0000                	unimp
        ),
    };
    &mut dst[..len]
    8001b32c:	658a                	ld	a1,128(sp)
    8001b32e:	652a                	ld	a0,136(sp)
    8001b330:	666a                	ld	a2,152(sp)
    8001b332:	fe32                	sd	a2,312(sp)

000000008001b334 <.LBB0_28>:
    8001b334:	00010697          	auipc	a3,0x10
    8001b338:	c8468693          	addi	a3,a3,-892 # 8002afb8 <.L__unnamed_4>
    8001b33c:	ffff6097          	auipc	ra,0xffff6
    8001b340:	49a080e7          	jalr	1178(ra) # 800117d6 <_ZN4core5slice5index77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hb4c5f14cfefb7eb2E>
    8001b344:	e42a                	sd	a0,8(sp)
    8001b346:	e82e                	sd	a1,16(sp)
    8001b348:	a009                	j	8001b34a <.LBB0_28+0x16>
}
    8001b34a:	65c2                	ld	a1,16(sp)
    8001b34c:	6522                	ld	a0,8(sp)
    8001b34e:	70fa                	ld	ra,440(sp)
    8001b350:	6139                	addi	sp,sp,448
    8001b352:	8082                	ret

Disassembly of section .text._ZN4core4char7methods22_$LT$impl$u20$char$GT$11encode_utf817h7239bcb774eea5aaE:

000000008001b354 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$11encode_utf817h7239bcb774eea5aaE>:
    pub fn encode_utf8(self, dst: &mut [u8]) -> &mut str {
    8001b354:	7139                	addi	sp,sp,-64
    8001b356:	fc06                	sd	ra,56(sp)
    8001b358:	d22a                	sw	a0,36(sp)
    8001b35a:	f42e                	sd	a1,40(sp)
    8001b35c:	f832                	sd	a2,48(sp)
        unsafe { from_utf8_unchecked_mut(encode_utf8_raw(self as u32, dst)) }
    8001b35e:	00000097          	auipc	ra,0x0
    8001b362:	db6080e7          	jalr	-586(ra) # 8001b114 <_ZN4core4char7methods15encode_utf8_raw17h793a073b272121f7E>
    8001b366:	e82a                	sd	a0,16(sp)
    8001b368:	ec2e                	sd	a1,24(sp)
    8001b36a:	a009                	j	8001b36c <_ZN4core4char7methods22_$LT$impl$u20$char$GT$11encode_utf817h7239bcb774eea5aaE+0x18>
    8001b36c:	65e2                	ld	a1,24(sp)
    8001b36e:	6542                	ld	a0,16(sp)
    8001b370:	00003097          	auipc	ra,0x3
    8001b374:	498080e7          	jalr	1176(ra) # 8001e808 <_ZN4core3str8converts23from_utf8_unchecked_mut17h690302c73d561c56E>
    8001b378:	e02a                	sd	a0,0(sp)
    8001b37a:	e42e                	sd	a1,8(sp)
    8001b37c:	a009                	j	8001b37e <_ZN4core4char7methods22_$LT$impl$u20$char$GT$11encode_utf817h7239bcb774eea5aaE+0x2a>
    }
    8001b37e:	65a2                	ld	a1,8(sp)
    8001b380:	6502                	ld	a0,0(sp)
    8001b382:	70e2                	ld	ra,56(sp)
    8001b384:	6121                	addi	sp,sp,64
    8001b386:	8082                	ret

Disassembly of section .text._ZN4core4char7methods22_$LT$impl$u20$char$GT$8len_utf817h6b8693741ddbecceE:

000000008001b388 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$8len_utf817h6b8693741ddbecceE>:
    pub const fn len_utf8(self) -> usize {
    8001b388:	1101                	addi	sp,sp,-32
    8001b38a:	ec06                	sd	ra,24(sp)
    8001b38c:	ca2a                	sw	a0,20(sp)
        len_utf8(self as u32)
    8001b38e:	00000097          	auipc	ra,0x0
    8001b392:	014080e7          	jalr	20(ra) # 8001b3a2 <_ZN4core4char7methods8len_utf817hc045ab91f009a8ffE>
    8001b396:	e42a                	sd	a0,8(sp)
    8001b398:	a009                	j	8001b39a <_ZN4core4char7methods22_$LT$impl$u20$char$GT$8len_utf817h6b8693741ddbecceE+0x12>
    }
    8001b39a:	6522                	ld	a0,8(sp)
    8001b39c:	60e2                	ld	ra,24(sp)
    8001b39e:	6105                	addi	sp,sp,32
    8001b3a0:	8082                	ret

Disassembly of section .text._ZN4core4char7methods8len_utf817hc045ab91f009a8ffE:

000000008001b3a2 <_ZN4core4char7methods8len_utf817hc045ab91f009a8ffE>:
const fn len_utf8(code: u32) -> usize {
    8001b3a2:	1101                	addi	sp,sp,-32
    8001b3a4:	0005059b          	sext.w	a1,a0
    8001b3a8:	862a                	mv	a2,a0
    8001b3aa:	e432                	sd	a2,8(sp)
    8001b3ac:	ce2a                	sw	a0,28(sp)
    8001b3ae:	07f00513          	li	a0,127
    if code < MAX_ONE_B {
    8001b3b2:	00b56663          	bltu	a0,a1,8001b3be <_ZN4core4char7methods8len_utf817hc045ab91f009a8ffE+0x1c>
    8001b3b6:	a009                	j	8001b3b8 <_ZN4core4char7methods8len_utf817hc045ab91f009a8ffE+0x16>
    8001b3b8:	4505                	li	a0,1
        1
    8001b3ba:	e82a                	sd	a0,16(sp)
    if code < MAX_ONE_B {
    8001b3bc:	a81d                	j	8001b3f2 <_ZN4core4char7methods8len_utf817hc045ab91f009a8ffE+0x50>
    } else if code < MAX_TWO_B {
    8001b3be:	6522                	ld	a0,8(sp)
    8001b3c0:	0005059b          	sext.w	a1,a0
    8001b3c4:	7ff00513          	li	a0,2047
    8001b3c8:	00b56663          	bltu	a0,a1,8001b3d4 <_ZN4core4char7methods8len_utf817hc045ab91f009a8ffE+0x32>
    8001b3cc:	a009                	j	8001b3ce <_ZN4core4char7methods8len_utf817hc045ab91f009a8ffE+0x2c>
    8001b3ce:	4509                	li	a0,2
        2
    8001b3d0:	e82a                	sd	a0,16(sp)
    } else if code < MAX_TWO_B {
    8001b3d2:	a839                	j	8001b3f0 <_ZN4core4char7methods8len_utf817hc045ab91f009a8ffE+0x4e>
    } else if code < MAX_THREE_B {
    8001b3d4:	6522                	ld	a0,8(sp)
    8001b3d6:	0105551b          	srliw	a0,a0,0x10
    8001b3da:	4581                	li	a1,0
    8001b3dc:	00b51663          	bne	a0,a1,8001b3e8 <_ZN4core4char7methods8len_utf817hc045ab91f009a8ffE+0x46>
    8001b3e0:	a009                	j	8001b3e2 <_ZN4core4char7methods8len_utf817hc045ab91f009a8ffE+0x40>
    8001b3e2:	450d                	li	a0,3
        3
    8001b3e4:	e82a                	sd	a0,16(sp)
    } else if code < MAX_THREE_B {
    8001b3e6:	a021                	j	8001b3ee <_ZN4core4char7methods8len_utf817hc045ab91f009a8ffE+0x4c>
    8001b3e8:	4511                	li	a0,4
        4
    8001b3ea:	e82a                	sd	a0,16(sp)
    } else if code < MAX_THREE_B {
    8001b3ec:	a009                	j	8001b3ee <_ZN4core4char7methods8len_utf817hc045ab91f009a8ffE+0x4c>
    } else if code < MAX_TWO_B {
    8001b3ee:	a009                	j	8001b3f0 <_ZN4core4char7methods8len_utf817hc045ab91f009a8ffE+0x4e>
    if code < MAX_ONE_B {
    8001b3f0:	a009                	j	8001b3f2 <_ZN4core4char7methods8len_utf817hc045ab91f009a8ffE+0x50>
}
    8001b3f2:	6542                	ld	a0,16(sp)
    8001b3f4:	6105                	addi	sp,sp,32
    8001b3f6:	8082                	ret

Disassembly of section .text._ZN6kernel6driver4uart9uart_init17h01daa242cfe569c9E:

000000008001b3f8 <_ZN6kernel6driver4uart9uart_init17h01daa242cfe569c9E>:
pub unsafe fn uart_init() {
    8001b3f8:	1101                	addi	sp,sp,-32
    let mut uart = UART.acquire();
    8001b3fa:	ec06                	sd	ra,24(sp)

000000008001b3fc <.LBB0_5>:
    8001b3fc:	0004e517          	auipc	a0,0x4e
    8001b400:	46450513          	addi	a0,a0,1124 # 80069860 <_ZN6kernel6driver4uart4UART17h0708b3e179d548ddE>
    8001b404:	ffff5097          	auipc	ra,0xffff5
    8001b408:	d0a080e7          	jalr	-758(ra) # 8001010e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h007ac3682185ef97E>
    8001b40c:	e82a                	sd	a0,16(sp)
    8001b40e:	a009                	j	8001b410 <.LBB0_5+0x14>
    8001b410:	0808                	addi	a0,sp,16
    uart.init();
    8001b412:	ffff6097          	auipc	ra,0xffff6
    8001b416:	384080e7          	jalr	900(ra) # 80011796 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hce69ac52326dbcadE>
    8001b41a:	e42a                	sd	a0,8(sp)
    8001b41c:	a009                	j	8001b41e <.LBB0_5+0x22>
    8001b41e:	6522                	ld	a0,8(sp)
    8001b420:	00000097          	auipc	ra,0x0
    8001b424:	01c080e7          	jalr	28(ra) # 8001b43c <_ZN6kernel6driver4uart4Uart4init17h72a59b83aa9e24abE>
    8001b428:	a009                	j	8001b42a <.LBB0_5+0x2e>
    drop(uart);
    8001b42a:	6542                	ld	a0,16(sp)
    8001b42c:	00002097          	auipc	ra,0x2
    8001b430:	cb4080e7          	jalr	-844(ra) # 8001d0e0 <_ZN4core3mem4drop17h96fc0e7c88170ba8E>
    8001b434:	a009                	j	8001b436 <.LBB0_5+0x3a>
}
    8001b436:	60e2                	ld	ra,24(sp)
    8001b438:	6105                	addi	sp,sp,32
    8001b43a:	8082                	ret

Disassembly of section .text._ZN6kernel6driver4uart4Uart4init17h72a59b83aa9e24abE:

000000008001b43c <_ZN6kernel6driver4uart4Uart4init17h72a59b83aa9e24abE>:
    pub fn init(&mut self) {
    8001b43c:	1141                	addi	sp,sp,-16
    8001b43e:	e406                	sd	ra,8(sp)
    8001b440:	e02a                	sd	a0,0(sp)
    8001b442:	10000537          	lui	a0,0x10000
    8001b446:	2505                	addiw	a0,a0,1
    8001b448:	4581                	li	a1,0
        write_reg(UART_BASE_ADDR + IER, 0x00);
    8001b44a:	00000097          	auipc	ra,0x0
    8001b44e:	244080e7          	jalr	580(ra) # 8001b68e <_ZN6kernel6driver4uart9write_reg17h2ea1b62b21a10486E>
    8001b452:	a009                	j	8001b454 <_ZN6kernel6driver4uart4Uart4init17h72a59b83aa9e24abE+0x18>
    8001b454:	10000537          	lui	a0,0x10000
    8001b458:	250d                	addiw	a0,a0,3
    8001b45a:	08000593          	li	a1,128
        write_reg(UART_BASE_ADDR + LCR, LCR_BAUD_LATCH as u8);
    8001b45e:	00000097          	auipc	ra,0x0
    8001b462:	230080e7          	jalr	560(ra) # 8001b68e <_ZN6kernel6driver4uart9write_reg17h2ea1b62b21a10486E>
    8001b466:	a009                	j	8001b468 <_ZN6kernel6driver4uart4Uart4init17h72a59b83aa9e24abE+0x2c>
    8001b468:	10000537          	lui	a0,0x10000
    8001b46c:	458d                	li	a1,3
        write_reg(UART_BASE_ADDR, 0x03);
    8001b46e:	00000097          	auipc	ra,0x0
    8001b472:	220080e7          	jalr	544(ra) # 8001b68e <_ZN6kernel6driver4uart9write_reg17h2ea1b62b21a10486E>
    8001b476:	a009                	j	8001b478 <_ZN6kernel6driver4uart4Uart4init17h72a59b83aa9e24abE+0x3c>
    8001b478:	10000537          	lui	a0,0x10000
    8001b47c:	2505                	addiw	a0,a0,1
    8001b47e:	4581                	li	a1,0
        write_reg(UART_BASE_ADDR + 1, 0x00);
    8001b480:	00000097          	auipc	ra,0x0
    8001b484:	20e080e7          	jalr	526(ra) # 8001b68e <_ZN6kernel6driver4uart9write_reg17h2ea1b62b21a10486E>
    8001b488:	a009                	j	8001b48a <_ZN6kernel6driver4uart4Uart4init17h72a59b83aa9e24abE+0x4e>
    8001b48a:	10000537          	lui	a0,0x10000
    8001b48e:	250d                	addiw	a0,a0,3
    8001b490:	458d                	li	a1,3
        write_reg(UART_BASE_ADDR + LCR, LCR_EIGHT_BITS as u8);
    8001b492:	00000097          	auipc	ra,0x0
    8001b496:	1fc080e7          	jalr	508(ra) # 8001b68e <_ZN6kernel6driver4uart9write_reg17h2ea1b62b21a10486E>
    8001b49a:	a009                	j	8001b49c <_ZN6kernel6driver4uart4Uart4init17h72a59b83aa9e24abE+0x60>
    8001b49c:	10000537          	lui	a0,0x10000
    8001b4a0:	2509                	addiw	a0,a0,2
    8001b4a2:	459d                	li	a1,7
        write_reg(UART_BASE_ADDR + FCR, FCR_FIFO_ENABLE as u8 | FCR_FIFO_CLEAR as u8);
    8001b4a4:	00000097          	auipc	ra,0x0
    8001b4a8:	1ea080e7          	jalr	490(ra) # 8001b68e <_ZN6kernel6driver4uart9write_reg17h2ea1b62b21a10486E>
    8001b4ac:	a009                	j	8001b4ae <_ZN6kernel6driver4uart4Uart4init17h72a59b83aa9e24abE+0x72>
    8001b4ae:	10000537          	lui	a0,0x10000
    8001b4b2:	2505                	addiw	a0,a0,1
    8001b4b4:	458d                	li	a1,3
        write_reg(UART_BASE_ADDR + IER, IER_TX_ENABLE as u8 | IER_RX_ENABLE as u8);
    8001b4b6:	00000097          	auipc	ra,0x0
    8001b4ba:	1d8080e7          	jalr	472(ra) # 8001b68e <_ZN6kernel6driver4uart9write_reg17h2ea1b62b21a10486E>
    8001b4be:	a009                	j	8001b4c0 <_ZN6kernel6driver4uart4Uart4init17h72a59b83aa9e24abE+0x84>
    }
    8001b4c0:	60a2                	ld	ra,8(sp)
    8001b4c2:	0141                	addi	sp,sp,16
    8001b4c4:	8082                	ret

Disassembly of section .text._ZN6kernel6driver4uart4Uart3put17h70c8696f08854618E:

000000008001b4c6 <_ZN6kernel6driver4uart4Uart3put17h70c8696f08854618E>:
    pub fn put(&mut self, c: u8) {
    8001b4c6:	7139                	addi	sp,sp,-64
    8001b4c8:	fc06                	sd	ra,56(sp)
    8001b4ca:	862e                	mv	a2,a1
    8001b4cc:	ec32                	sd	a2,24(sp)
    8001b4ce:	f02a                	sd	a0,32(sp)
    8001b4d0:	02b107a3          	sb	a1,47(sp)
    8001b4d4:	10000537          	lui	a0,0x10000
        let ptr = UART_BASE_ADDR as *mut u8;
    8001b4d8:	f82a                	sd	a0,48(sp)
        loop {
    8001b4da:	a009                	j	8001b4dc <_ZN6kernel6driver4uart4Uart3put17h70c8696f08854618E+0x16>
    8001b4dc:	10000537          	lui	a0,0x10000
    8001b4e0:	4595                	li	a1,5
            if unsafe{ ptr.add(5).read_volatile() } & (1 << 5) != 0 {
    8001b4e2:	00004097          	auipc	ra,0x4
    8001b4e6:	21c080e7          	jalr	540(ra) # 8001f6fe <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1d203f00cca684c1E>
    8001b4ea:	e82a                	sd	a0,16(sp)
    8001b4ec:	a009                	j	8001b4ee <_ZN6kernel6driver4uart4Uart3put17h70c8696f08854618E+0x28>
    8001b4ee:	6542                	ld	a0,16(sp)
    8001b4f0:	fffed097          	auipc	ra,0xfffed
    8001b4f4:	3a6080e7          	jalr	934(ra) # 80008896 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$13read_volatile17h74b3a7ca48b9b2b5E>
    8001b4f8:	e42a                	sd	a0,8(sp)
    8001b4fa:	a009                	j	8001b4fc <_ZN6kernel6driver4uart4Uart3put17h70c8696f08854618E+0x36>
    8001b4fc:	6522                	ld	a0,8(sp)
    8001b4fe:	02057513          	andi	a0,a0,32
    8001b502:	4581                	li	a1,0
    8001b504:	00b50c63          	beq	a0,a1,8001b51c <_ZN6kernel6driver4uart4Uart3put17h70c8696f08854618E+0x56>
    8001b508:	a009                	j	8001b50a <_ZN6kernel6driver4uart4Uart3put17h70c8696f08854618E+0x44>
    8001b50a:	10000537          	lui	a0,0x10000
    8001b50e:	4581                	li	a1,0
            ptr.add(0).write_volatile(c);
    8001b510:	00004097          	auipc	ra,0x4
    8001b514:	1ee080e7          	jalr	494(ra) # 8001f6fe <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1d203f00cca684c1E>
    8001b518:	e02a                	sd	a0,0(sp)
    8001b51a:	a011                	j	8001b51e <_ZN6kernel6driver4uart4Uart3put17h70c8696f08854618E+0x58>
        loop {
    8001b51c:	b7c1                	j	8001b4dc <_ZN6kernel6driver4uart4Uart3put17h70c8696f08854618E+0x16>
            ptr.add(0).write_volatile(c);
    8001b51e:	65e2                	ld	a1,24(sp)
    8001b520:	6502                	ld	a0,0(sp)
    8001b522:	fffed097          	auipc	ra,0xfffed
    8001b526:	38e080e7          	jalr	910(ra) # 800088b0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$14write_volatile17h3132c1bed6ef07b7E>
    8001b52a:	a009                	j	8001b52c <_ZN6kernel6driver4uart4Uart3put17h70c8696f08854618E+0x66>
    }
    8001b52c:	70e2                	ld	ra,56(sp)
    8001b52e:	6121                	addi	sp,sp,64
    8001b530:	8082                	ret

Disassembly of section .text._ZN6kernel6driver4uart4Uart8transmit17h1cf1c52f0e7bc086E:

000000008001b532 <_ZN6kernel6driver4uart4Uart8transmit17h1cf1c52f0e7bc086E>:
    fn transmit(&mut self) {
    8001b532:	711d                	addi	sp,sp,-96
    8001b534:	ec86                	sd	ra,88(sp)
    8001b536:	f42a                	sd	a0,40(sp)
    8001b538:	e0aa                	sd	a0,64(sp)
    8001b53a:	a009                	j	8001b53c <_ZN6kernel6driver4uart4Uart8transmit17h1cf1c52f0e7bc086E+0xa>
        while self.write_index != self.read_index && idle() {
    8001b53c:	7522                	ld	a0,40(sp)
    8001b53e:	00850593          	addi	a1,a0,8 # 10000008 <.Lline_table_start0+0xffc9506>
    8001b542:	ffff4097          	auipc	ra,0xffff4
    8001b546:	12a080e7          	jalr	298(ra) # 8000f66c <_ZN79_$LT$core..num..wrapping..Wrapping$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2ne17h2d3bd6a577efe0b1E>
    8001b54a:	f02a                	sd	a0,32(sp)
    8001b54c:	a025                	j	8001b574 <_ZN6kernel6driver4uart4Uart8transmit17h1cf1c52f0e7bc086E+0x42>
    8001b54e:	4505                	li	a0,1
    8001b550:	02a10ba3          	sb	a0,55(sp)
    8001b554:	a819                	j	8001b56a <_ZN6kernel6driver4uart4Uart8transmit17h1cf1c52f0e7bc086E+0x38>
    8001b556:	4501                	li	a0,0
    8001b558:	02a10ba3          	sb	a0,55(sp)
    8001b55c:	a039                	j	8001b56a <_ZN6kernel6driver4uart4Uart8transmit17h1cf1c52f0e7bc086E+0x38>
    8001b55e:	00000097          	auipc	ra,0x0
    8001b562:	164080e7          	jalr	356(ra) # 8001b6c2 <_ZN6kernel6driver4uart4idle17h08982e96c6f33f38E>
    8001b566:	ec2a                	sd	a0,24(sp)
    8001b568:	a809                	j	8001b57a <_ZN6kernel6driver4uart4Uart8transmit17h1cf1c52f0e7bc086E+0x48>
    8001b56a:	03714503          	lbu	a0,55(sp)
    8001b56e:	8905                	andi	a0,a0,1
    8001b570:	e919                	bnez	a0,8001b586 <_ZN6kernel6driver4uart4Uart8transmit17h1cf1c52f0e7bc086E+0x54>
    8001b572:	a039                	j	8001b580 <_ZN6kernel6driver4uart4Uart8transmit17h1cf1c52f0e7bc086E+0x4e>
    8001b574:	7502                	ld	a0,32(sp)
    8001b576:	f565                	bnez	a0,8001b55e <_ZN6kernel6driver4uart4Uart8transmit17h1cf1c52f0e7bc086E+0x2c>
    8001b578:	bff9                	j	8001b556 <_ZN6kernel6driver4uart4Uart8transmit17h1cf1c52f0e7bc086E+0x24>
    8001b57a:	6562                	ld	a0,24(sp)
    8001b57c:	f969                	bnez	a0,8001b54e <_ZN6kernel6driver4uart4Uart8transmit17h1cf1c52f0e7bc086E+0x1c>
    8001b57e:	bfe1                	j	8001b556 <_ZN6kernel6driver4uart4Uart8transmit17h1cf1c52f0e7bc086E+0x24>
    }
    8001b580:	60e6                	ld	ra,88(sp)
    8001b582:	6125                	addi	sp,sp,96
    8001b584:	8082                	ret
            let read_index = self.read_index.0 % UART_BUF_SIZE;
    8001b586:	7522                	ld	a0,40(sp)
    8001b588:	6508                	ld	a0,8(a0)
    8001b58a:	01f57593          	andi	a1,a0,31
    8001b58e:	e82e                	sd	a1,16(sp)
    8001b590:	e4ae                	sd	a1,72(sp)
    8001b592:	457d                	li	a0,31
            let c = self.buf[read_index];
    8001b594:	04b56863          	bltu	a0,a1,8001b5e4 <.LBB3_15+0x24>
    8001b598:	a009                	j	8001b59a <_ZN6kernel6driver4uart4Uart8transmit17h1cf1c52f0e7bc086E+0x68>
    8001b59a:	7522                	ld	a0,40(sp)
    8001b59c:	65c2                	ld	a1,16(sp)
    8001b59e:	95aa                	add	a1,a1,a0
    8001b5a0:	0105c583          	lbu	a1,16(a1)
    8001b5a4:	e42e                	sd	a1,8(sp)
    8001b5a6:	04b10ba3          	sb	a1,87(sp)
            self.read_index += Wrapping(1);
    8001b5aa:	0521                	addi	a0,a0,8
    8001b5ac:	4585                	li	a1,1
    8001b5ae:	fc2e                	sd	a1,56(sp)
    8001b5b0:	fffec097          	auipc	ra,0xfffec
    8001b5b4:	e7a080e7          	jalr	-390(ra) # 8000742a <_ZN90_$LT$core..num..wrapping..Wrapping$LT$usize$GT$$u20$as$u20$core..ops..arith..AddAssign$GT$10add_assign17hc731864567f3481aE>
    8001b5b8:	a009                	j	8001b5ba <_ZN6kernel6driver4uart4Uart8transmit17h1cf1c52f0e7bc086E+0x88>
                PROC_MANAGER.wake_up(&self.read_index as *const Wrapping<_> as usize);
    8001b5ba:	7522                	ld	a0,40(sp)
    8001b5bc:	00850593          	addi	a1,a0,8

000000008001b5c0 <.LBB3_15>:
    8001b5c0:	0003c517          	auipc	a0,0x3c
    8001b5c4:	fe050513          	addi	a0,a0,-32 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    8001b5c8:	ffff2097          	auipc	ra,0xffff2
    8001b5cc:	338080e7          	jalr	824(ra) # 8000d900 <_ZN6kernel7process7manager11ProcManager7wake_up17ha46b4d15ac07187bE>
    8001b5d0:	a009                	j	8001b5d2 <.LBB3_15+0x12>
            write_reg(UART_BASE_ADDR + THR, c);
    8001b5d2:	65a2                	ld	a1,8(sp)
    8001b5d4:	10000537          	lui	a0,0x10000
    8001b5d8:	00000097          	auipc	ra,0x0
    8001b5dc:	0b6080e7          	jalr	182(ra) # 8001b68e <_ZN6kernel6driver4uart9write_reg17h2ea1b62b21a10486E>
    8001b5e0:	a009                	j	8001b5e2 <.LBB3_15+0x22>
        while self.write_index != self.read_index && idle() {
    8001b5e2:	bfa9                	j	8001b53c <_ZN6kernel6driver4uart4Uart8transmit17h1cf1c52f0e7bc086E+0xa>
            let c = self.buf[read_index];
    8001b5e4:	6542                	ld	a0,16(sp)

000000008001b5e6 <.LBB3_16>:
    8001b5e6:	00010617          	auipc	a2,0x10
    8001b5ea:	a8a60613          	addi	a2,a2,-1398 # 8002b070 <.L__unnamed_1>
    8001b5ee:	02000593          	li	a1,32
    8001b5f2:	00007097          	auipc	ra,0x7
    8001b5f6:	cb0080e7          	jalr	-848(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN63_$LT$kernel..driver..uart..Uart$u20$as$u20$core..fmt..Write$GT$9write_str17ha964a515ad10903aE:

000000008001b5fc <_ZN63_$LT$kernel..driver..uart..Uart$u20$as$u20$core..fmt..Write$GT$9write_str17ha964a515ad10903aE>:
    fn write_str(&mut self, out: &str) -> Result<(), Error> {
    8001b5fc:	7119                	addi	sp,sp,-128
    8001b5fe:	fc86                	sd	ra,120(sp)
    8001b600:	e832                	sd	a2,16(sp)
    8001b602:	862e                	mv	a2,a1
    8001b604:	65c2                	ld	a1,16(sp)
    8001b606:	ec32                	sd	a2,24(sp)
    8001b608:	862a                	mv	a2,a0
    8001b60a:	6562                	ld	a0,24(sp)
    8001b60c:	f032                	sd	a2,32(sp)
    8001b60e:	ecb2                	sd	a2,88(sp)
    8001b610:	f0aa                	sd	a0,96(sp)
    8001b612:	f4ae                	sd	a1,104(sp)
        for c in out.bytes() {
    8001b614:	ffffd097          	auipc	ra,0xffffd
    8001b618:	d76080e7          	jalr	-650(ra) # 8001838a <_ZN4core3str21_$LT$impl$u20$str$GT$5bytes17h8801f19f835ac923E>
    8001b61c:	f42a                	sd	a0,40(sp)
    8001b61e:	f82e                	sd	a1,48(sp)
    8001b620:	a009                	j	8001b622 <_ZN63_$LT$kernel..driver..uart..Uart$u20$as$u20$core..fmt..Write$GT$9write_str17ha964a515ad10903aE+0x26>
    8001b622:	75c2                	ld	a1,48(sp)
    8001b624:	7522                	ld	a0,40(sp)
    8001b626:	00003097          	auipc	ra,0x3
    8001b62a:	810080e7          	jalr	-2032(ra) # 8001de36 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he31f6e5d3eec2be9E>
    8001b62e:	e02a                	sd	a0,0(sp)
    8001b630:	e42e                	sd	a1,8(sp)
    8001b632:	a009                	j	8001b634 <_ZN63_$LT$kernel..driver..uart..Uart$u20$as$u20$core..fmt..Write$GT$9write_str17ha964a515ad10903aE+0x38>
    8001b634:	6522                	ld	a0,8(sp)
    8001b636:	6582                	ld	a1,0(sp)
    8001b638:	e0ae                	sd	a1,64(sp)
    8001b63a:	e4aa                	sd	a0,72(sp)
    8001b63c:	a009                	j	8001b63e <_ZN63_$LT$kernel..driver..uart..Uart$u20$as$u20$core..fmt..Write$GT$9write_str17ha964a515ad10903aE+0x42>
    8001b63e:	0088                	addi	a0,sp,64
    8001b640:	ffff1097          	auipc	ra,0xffff1
    8001b644:	500080e7          	jalr	1280(ra) # 8000cb40 <_ZN81_$LT$core..str..iter..Bytes$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h47cb47c87defe3efE>
    8001b648:	04a10823          	sb	a0,80(sp)
    8001b64c:	04b108a3          	sb	a1,81(sp)
    8001b650:	a009                	j	8001b652 <_ZN63_$LT$kernel..driver..uart..Uart$u20$as$u20$core..fmt..Write$GT$9write_str17ha964a515ad10903aE+0x56>
    8001b652:	05014503          	lbu	a0,80(sp)
    8001b656:	8905                	andi	a0,a0,1
    8001b658:	4581                	li	a1,0
    8001b65a:	00b50463          	beq	a0,a1,8001b662 <_ZN63_$LT$kernel..driver..uart..Uart$u20$as$u20$core..fmt..Write$GT$9write_str17ha964a515ad10903aE+0x66>
    8001b65e:	a009                	j	8001b660 <_ZN63_$LT$kernel..driver..uart..Uart$u20$as$u20$core..fmt..Write$GT$9write_str17ha964a515ad10903aE+0x64>
    8001b660:	a801                	j	8001b670 <_ZN63_$LT$kernel..driver..uart..Uart$u20$as$u20$core..fmt..Write$GT$9write_str17ha964a515ad10903aE+0x74>
    8001b662:	4501                	li	a0,0
        Ok(())
    8001b664:	02a10fa3          	sb	a0,63(sp)
    }
    8001b668:	70e6                	ld	ra,120(sp)
    8001b66a:	6109                	addi	sp,sp,128
    8001b66c:	8082                	ret
        for c in out.bytes() {
    8001b66e:	0000                	unimp
    8001b670:	7502                	ld	a0,32(sp)
    8001b672:	05110583          	lb	a1,81(sp)
    8001b676:	06b10aa3          	sb	a1,117(sp)
    8001b67a:	06b10b23          	sb	a1,118(sp)
    8001b67e:	06b10ba3          	sb	a1,119(sp)
            self.put(c);
    8001b682:	00000097          	auipc	ra,0x0
    8001b686:	e44080e7          	jalr	-444(ra) # 8001b4c6 <_ZN6kernel6driver4uart4Uart3put17h70c8696f08854618E>
    8001b68a:	a009                	j	8001b68c <_ZN63_$LT$kernel..driver..uart..Uart$u20$as$u20$core..fmt..Write$GT$9write_str17ha964a515ad10903aE+0x90>
        for c in out.bytes() {
    8001b68c:	bf4d                	j	8001b63e <_ZN63_$LT$kernel..driver..uart..Uart$u20$as$u20$core..fmt..Write$GT$9write_str17ha964a515ad10903aE+0x42>

Disassembly of section .text._ZN6kernel6driver4uart9write_reg17h2ea1b62b21a10486E:

000000008001b68e <_ZN6kernel6driver4uart9write_reg17h2ea1b62b21a10486E>:
            }
        }
    }
}

fn write_reg(addr: usize, val: u8) {
    8001b68e:	1101                	addi	sp,sp,-32
    8001b690:	ec06                	sd	ra,24(sp)
    8001b692:	e42a                	sd	a0,8(sp)
    8001b694:	00b10ba3          	sb	a1,23(sp)
    unsafe{
        ptr::write(addr as *mut u8, val);
    8001b698:	ffffd097          	auipc	ra,0xffffd
    8001b69c:	22e080e7          	jalr	558(ra) # 800188c6 <_ZN4core3ptr5write17h0fb1ba83ac2984c7E>
    8001b6a0:	a009                	j	8001b6a2 <_ZN6kernel6driver4uart9write_reg17h2ea1b62b21a10486E+0x14>
    }
}
    8001b6a2:	60e2                	ld	ra,24(sp)
    8001b6a4:	6105                	addi	sp,sp,32
    8001b6a6:	8082                	ret

Disassembly of section .text._ZN6kernel6driver4uart8read_reg17h6cf7d47ea5c47590E:

000000008001b6a8 <_ZN6kernel6driver4uart8read_reg17h6cf7d47ea5c47590E>:

fn read_reg(addr: usize) -> u8 {
    8001b6a8:	1101                	addi	sp,sp,-32
    8001b6aa:	ec06                	sd	ra,24(sp)
    8001b6ac:	e82a                	sd	a0,16(sp)
    unsafe {
        ptr::read(addr as *const u8)
    8001b6ae:	ffffd097          	auipc	ra,0xffffd
    8001b6b2:	f8e080e7          	jalr	-114(ra) # 8001863c <_ZN4core3ptr4read17h018161c0cd37b3fbE>
    8001b6b6:	e42a                	sd	a0,8(sp)
    8001b6b8:	a009                	j	8001b6ba <_ZN6kernel6driver4uart8read_reg17h6cf7d47ea5c47590E+0x12>
    }
}
    8001b6ba:	6522                	ld	a0,8(sp)
    8001b6bc:	60e2                	ld	ra,24(sp)
    8001b6be:	6105                	addi	sp,sp,32
    8001b6c0:	8082                	ret

Disassembly of section .text._ZN6kernel6driver4uart4idle17h08982e96c6f33f38E:

000000008001b6c2 <_ZN6kernel6driver4uart4idle17h08982e96c6f33f38E>:

/// Read the LSR to see if it is able to transmit data. 
fn idle() -> bool {
    8001b6c2:	1141                	addi	sp,sp,-16
    8001b6c4:	e406                	sd	ra,8(sp)
    8001b6c6:	10000537          	lui	a0,0x10000
    8001b6ca:	2515                	addiw	a0,a0,5
    read_reg(UART_BASE_ADDR + LSR) & (1 << 5) > 0
    8001b6cc:	00000097          	auipc	ra,0x0
    8001b6d0:	fdc080e7          	jalr	-36(ra) # 8001b6a8 <_ZN6kernel6driver4uart8read_reg17h6cf7d47ea5c47590E>
    8001b6d4:	e02a                	sd	a0,0(sp)
    8001b6d6:	a009                	j	8001b6d8 <_ZN6kernel6driver4uart4idle17h08982e96c6f33f38E+0x16>
    8001b6d8:	6502                	ld	a0,0(sp)
    8001b6da:	02057513          	andi	a0,a0,32
    8001b6de:	8115                	srli	a0,a0,0x5
}
    8001b6e0:	60a2                	ld	ra,8(sp)
    8001b6e2:	0141                	addi	sp,sp,16
    8001b6e4:	8082                	ret

Disassembly of section .text._ZN6kernel6driver4uart9putc_sync17h8ef1d9e0f2a8eae2E:

000000008001b6e6 <_ZN6kernel6driver4uart9putc_sync17h8ef1d9e0f2a8eae2E>:

/// Non-blocking write to uart device. 
pub(super) fn putc_sync(c: u8) {
    8001b6e6:	7179                	addi	sp,sp,-48
    8001b6e8:	f406                	sd	ra,40(sp)
    8001b6ea:	85aa                	mv	a1,a0
    8001b6ec:	ec2e                	sd	a1,24(sp)
    8001b6ee:	02a103a3          	sb	a0,39(sp)
    push_off();
    8001b6f2:	ffff7097          	auipc	ra,0xffff7
    8001b6f6:	b10080e7          	jalr	-1264(ra) # 80012202 <_ZN6kernel7process3cpu8push_off17h0acd4baa93104745E>
    8001b6fa:	a009                	j	8001b6fc <_ZN6kernel6driver4uart9putc_sync17h8ef1d9e0f2a8eae2E+0x16>
    8001b6fc:	4581                	li	a1,0
    if PANICKED.load(Ordering::Relaxed) {
    8001b6fe:	02b10323          	sb	a1,38(sp)

000000008001b702 <.LBB8_11>:
    8001b702:	00058517          	auipc	a0,0x58
    8001b706:	e7e50513          	addi	a0,a0,-386 # 80073580 <_ZN6kernel6driver7console8PANICKED17hbdbbad2548440929E>
    8001b70a:	fffe9097          	auipc	ra,0xfffe9
    8001b70e:	f64080e7          	jalr	-156(ra) # 8000466e <_ZN4core4sync6atomic10AtomicBool4load17h49a663f50dd66935E>
    8001b712:	e82a                	sd	a0,16(sp)
    8001b714:	a009                	j	8001b716 <.LBB8_11+0x14>
    8001b716:	6542                	ld	a0,16(sp)
    8001b718:	e119                	bnez	a0,8001b71e <.LBB8_11+0x1c>
    8001b71a:	a009                	j	8001b71c <.LBB8_11+0x1a>
        loop{}
    }
    while !idle() {}
    8001b71c:	a011                	j	8001b720 <.LBB8_11+0x1e>
        loop{}
    8001b71e:	a001                	j	8001b71e <.LBB8_11+0x1c>
    while !idle() {}
    8001b720:	00000097          	auipc	ra,0x0
    8001b724:	fa2080e7          	jalr	-94(ra) # 8001b6c2 <_ZN6kernel6driver4uart4idle17h08982e96c6f33f38E>
    8001b728:	e42a                	sd	a0,8(sp)
    8001b72a:	a009                	j	8001b72c <.LBB8_11+0x2a>
    8001b72c:	6522                	ld	a0,8(sp)
    8001b72e:	4581                	li	a1,0
    8001b730:	00b50b63          	beq	a0,a1,8001b746 <.LBB8_11+0x44>
    8001b734:	a009                	j	8001b736 <.LBB8_11+0x34>
    write_reg(UART_BASE_ADDR + THR, c);
    8001b736:	65e2                	ld	a1,24(sp)
    8001b738:	10000537          	lui	a0,0x10000
    8001b73c:	00000097          	auipc	ra,0x0
    8001b740:	f52080e7          	jalr	-174(ra) # 8001b68e <_ZN6kernel6driver4uart9write_reg17h2ea1b62b21a10486E>
    8001b744:	a011                	j	8001b748 <.LBB8_11+0x46>
    while !idle() {}
    8001b746:	bfe9                	j	8001b720 <.LBB8_11+0x1e>
    pop_off();
    8001b748:	ffff7097          	auipc	ra,0xffff7
    8001b74c:	b3e080e7          	jalr	-1218(ra) # 80012286 <_ZN6kernel7process3cpu7pop_off17hb8c7b834ab1c7c4cE>
    8001b750:	a009                	j	8001b752 <.LBB8_11+0x50>
}
    8001b752:	70a2                	ld	ra,40(sp)
    8001b754:	6145                	addi	sp,sp,48
    8001b756:	8082                	ret

Disassembly of section .text._ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h6e23c4cf8dccfdcdE:

000000008001b758 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h6e23c4cf8dccfdcdE>:
            }

            #[stable(feature = "rust1", since = "1.0.0")]
            impl Ord for $t {
                #[inline]
                fn cmp(&self, other: &$t) -> Ordering {
    8001b758:	7179                	addi	sp,sp,-48
    8001b75a:	e42e                	sd	a1,8(sp)
    8001b75c:	e82a                	sd	a0,16(sp)
    8001b75e:	f02a                	sd	a0,32(sp)
    8001b760:	f42e                	sd	a1,40(sp)
                    // The order here is important to generate more optimal assembly.
                    // See <https://github.com/rust-lang/rust/issues/63758> for more info.
                    if *self < *other { Less }
    8001b762:	6108                	ld	a0,0(a0)
    8001b764:	618c                	ld	a1,0(a1)
    8001b766:	00b57863          	bgeu	a0,a1,8001b776 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h6e23c4cf8dccfdcdE+0x1e>
    8001b76a:	a009                	j	8001b76c <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h6e23c4cf8dccfdcdE+0x14>
    8001b76c:	0ff00513          	li	a0,255
    8001b770:	00a10fa3          	sb	a0,31(sp)
    8001b774:	a00d                	j	8001b796 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h6e23c4cf8dccfdcdE+0x3e>
                    else if *self == *other { Equal }
    8001b776:	65a2                	ld	a1,8(sp)
    8001b778:	6542                	ld	a0,16(sp)
    8001b77a:	6108                	ld	a0,0(a0)
    8001b77c:	618c                	ld	a1,0(a1)
    8001b77e:	00b51763          	bne	a0,a1,8001b78c <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h6e23c4cf8dccfdcdE+0x34>
    8001b782:	a009                	j	8001b784 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h6e23c4cf8dccfdcdE+0x2c>
    8001b784:	4501                	li	a0,0
    8001b786:	00a10fa3          	sb	a0,31(sp)
    8001b78a:	a029                	j	8001b794 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h6e23c4cf8dccfdcdE+0x3c>
    8001b78c:	4505                	li	a0,1
                    else { Greater }
    8001b78e:	00a10fa3          	sb	a0,31(sp)
                    else if *self == *other { Equal }
    8001b792:	a009                	j	8001b794 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h6e23c4cf8dccfdcdE+0x3c>
                    if *self < *other { Less }
    8001b794:	a009                	j	8001b796 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h6e23c4cf8dccfdcdE+0x3e>
                }
    8001b796:	01f10503          	lb	a0,31(sp)
    8001b79a:	6145                	addi	sp,sp,48
    8001b79c:	8082                	ret

Disassembly of section .text._ZN4core3cmp5impls55_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u16$GT$2lt17h2ba0f37fe46e7bafE:

000000008001b79e <_ZN4core3cmp5impls55_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u16$GT$2lt17h2ba0f37fe46e7bafE>:
                fn lt(&self, other: &$t) -> bool { (*self) < (*other) }
    8001b79e:	1141                	addi	sp,sp,-16
    8001b7a0:	e02a                	sd	a0,0(sp)
    8001b7a2:	e42e                	sd	a1,8(sp)
    8001b7a4:	00055503          	lhu	a0,0(a0) # 10000000 <.Lline_table_start0+0xffc94fe>
    8001b7a8:	0005d583          	lhu	a1,0(a1)
    8001b7ac:	00b53533          	sltu	a0,a0,a1
    8001b7b0:	0141                	addi	sp,sp,16
    8001b7b2:	8082                	ret

Disassembly of section .text._ZN4core3cmp5impls55_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u32$GT$2lt17h9cf9ff1045241cdfE:

000000008001b7b4 <_ZN4core3cmp5impls55_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u32$GT$2lt17h9cf9ff1045241cdfE>:
    8001b7b4:	1141                	addi	sp,sp,-16
    8001b7b6:	e02a                	sd	a0,0(sp)
    8001b7b8:	e42e                	sd	a1,8(sp)
    8001b7ba:	4108                	lw	a0,0(a0)
    8001b7bc:	418c                	lw	a1,0(a1)
    8001b7be:	00b53533          	sltu	a0,a0,a1
    8001b7c2:	0141                	addi	sp,sp,16
    8001b7c4:	8082                	ret

Disassembly of section .text._ZN4core3cmp5impls56_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$usize$GT$2eq17hb88014a76b34c88fE:

000000008001b7c6 <_ZN4core3cmp5impls56_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$usize$GT$2eq17hb88014a76b34c88fE>:
                fn eq(&self, other: &$t) -> bool { (*self) == (*other) }
    8001b7c6:	1141                	addi	sp,sp,-16
    8001b7c8:	e02a                	sd	a0,0(sp)
    8001b7ca:	e42e                	sd	a1,8(sp)
    8001b7cc:	6108                	ld	a0,0(a0)
    8001b7ce:	618c                	ld	a1,0(a1)
    8001b7d0:	8d2d                	xor	a0,a0,a1
    8001b7d2:	00153513          	seqz	a0,a0
    8001b7d6:	0141                	addi	sp,sp,16
    8001b7d8:	8082                	ret

Disassembly of section .text._ZN4core3cmp5impls56_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$usize$GT$2ne17h958431dd9ff1337dE:

000000008001b7da <_ZN4core3cmp5impls56_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$usize$GT$2ne17h958431dd9ff1337dE>:
                fn ne(&self, other: &$t) -> bool { (*self) != (*other) }
    8001b7da:	1141                	addi	sp,sp,-16
    8001b7dc:	e02a                	sd	a0,0(sp)
    8001b7de:	e42e                	sd	a1,8(sp)
    8001b7e0:	6108                	ld	a0,0(a0)
    8001b7e2:	618c                	ld	a1,0(a1)
    8001b7e4:	8d2d                	xor	a0,a0,a1
    8001b7e6:	00a03533          	snez	a0,a0
    8001b7ea:	0141                	addi	sp,sp,16
    8001b7ec:	8082                	ret

Disassembly of section .text._ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2le17hf6519ff85d133637E:

000000008001b7ee <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2le17hf6519ff85d133637E>:
                fn le(&self, other: &$t) -> bool { (*self) <= (*other) }
    8001b7ee:	1101                	addi	sp,sp,-32
    8001b7f0:	e42e                	sd	a1,8(sp)
    8001b7f2:	85aa                	mv	a1,a0
    8001b7f4:	6522                	ld	a0,8(sp)
    8001b7f6:	e82e                	sd	a1,16(sp)
    8001b7f8:	ec2a                	sd	a0,24(sp)
    8001b7fa:	618c                	ld	a1,0(a1)
    8001b7fc:	6108                	ld	a0,0(a0)
    8001b7fe:	00b53533          	sltu	a0,a0,a1
    8001b802:	00154513          	xori	a0,a0,1
    8001b806:	6105                	addi	sp,sp,32
    8001b808:	8082                	ret

Disassembly of section .text._ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17ha09858e1dc8f460eE:

000000008001b80a <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17ha09858e1dc8f460eE>:
                fn lt(&self, other: &$t) -> bool { (*self) < (*other) }
    8001b80a:	1141                	addi	sp,sp,-16
    8001b80c:	e02a                	sd	a0,0(sp)
    8001b80e:	e42e                	sd	a1,8(sp)
    8001b810:	6108                	ld	a0,0(a0)
    8001b812:	618c                	ld	a1,0(a1)
    8001b814:	00b53533          	sltu	a0,a0,a1
    8001b818:	0141                	addi	sp,sp,16
    8001b81a:	8082                	ret

Disassembly of section .text._ZN4core4iter8adapters3rev12Rev$LT$T$GT$3new17h2d10195152fc735dE:

000000008001b81c <_ZN4core4iter8adapters3rev12Rev$LT$T$GT$3new17h2d10195152fc735dE>:
pub struct Rev<T> {
    iter: T,
}

impl<T> Rev<T> {
    pub(in crate::iter) fn new(iter: T) -> Rev<T> {
    8001b81c:	1101                	addi	sp,sp,-32
    8001b81e:	e02e                	sd	a1,0(sp)
    8001b820:	85aa                	mv	a1,a0
        Rev { iter }
    8001b822:	6502                	ld	a0,0(sp)
    8001b824:	6914                	ld	a3,16(a0)
    8001b826:	ec36                	sd	a3,24(sp)
    8001b828:	6510                	ld	a2,8(a0)
    8001b82a:	e832                	sd	a2,16(sp)
    8001b82c:	6108                	ld	a0,0(a0)
    8001b82e:	e42a                	sd	a0,8(sp)
    8001b830:	e994                	sd	a3,16(a1)
    8001b832:	e590                	sd	a2,8(a1)
    8001b834:	e188                	sd	a0,0(a1)
    }
    8001b836:	6105                	addi	sp,sp,32
    8001b838:	8082                	ret

Disassembly of section .text._ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h07513ad1b93938d8E:

000000008001b83a <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h07513ad1b93938d8E>:
    fn into_iter(self) -> I {
    8001b83a:	1141                	addi	sp,sp,-16
    8001b83c:	e42e                	sd	a1,8(sp)
    8001b83e:	85aa                	mv	a1,a0
        self
    8001b840:	6522                	ld	a0,8(sp)
    8001b842:	6910                	ld	a2,16(a0)
    8001b844:	e990                	sd	a2,16(a1)
    8001b846:	6510                	ld	a2,8(a0)
    8001b848:	e590                	sd	a2,8(a1)
    8001b84a:	6108                	ld	a0,0(a0)
    8001b84c:	e188                	sd	a0,0(a1)
    }
    8001b84e:	0141                	addi	sp,sp,16
    8001b850:	8082                	ret

Disassembly of section .text._ZN98_$LT$core..iter..adapters..rev..Rev$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfb8b31ee37e3cf8fE:

000000008001b852 <_ZN98_$LT$core..iter..adapters..rev..Rev$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfb8b31ee37e3cf8fE>:
    I: DoubleEndedIterator,
{
    type Item = <I as Iterator>::Item;

    #[inline]
    fn next(&mut self) -> Option<<I as Iterator>::Item> {
    8001b852:	1101                	addi	sp,sp,-32
    8001b854:	ec06                	sd	ra,24(sp)
    8001b856:	e82a                	sd	a0,16(sp)
        self.iter.next_back()
    8001b858:	ffff0097          	auipc	ra,0xffff0
    8001b85c:	0ec080e7          	jalr	236(ra) # 8000b944 <_ZN4core4iter5range125_$LT$impl$u20$core..iter..traits..double_ended..DoubleEndedIterator$u20$for$u20$core..ops..range..RangeInclusive$LT$A$GT$$GT$9next_back17h6e80df4b43a95866E>
    8001b860:	e02a                	sd	a0,0(sp)
    8001b862:	e42e                	sd	a1,8(sp)
    8001b864:	a009                	j	8001b866 <_ZN98_$LT$core..iter..adapters..rev..Rev$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfb8b31ee37e3cf8fE+0x14>
    }
    8001b866:	65a2                	ld	a1,8(sp)
    8001b868:	6502                	ld	a0,0(sp)
    8001b86a:	60e2                	ld	ra,24(sp)
    8001b86c:	6105                	addi	sp,sp,32
    8001b86e:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed12Box$LT$T$GT$10new_zeroed17h2dc288bcc805675fE:

000000008001b870 <_ZN5alloc5boxed12Box$LT$T$GT$10new_zeroed17h2dc288bcc805675fE>:
    ///
    /// [zeroed]: mem::MaybeUninit::zeroed
    #[inline]
    #[doc(alias = "calloc")]
    #[unstable(feature = "new_uninit", issue = "63291")]
    pub fn new_zeroed() -> Box<mem::MaybeUninit<T>> {
    8001b870:	1141                	addi	sp,sp,-16
        Self::new_zeroed_in(Global)
    8001b872:	e406                	sd	ra,8(sp)
    8001b874:	00000097          	auipc	ra,0x0
    8001b878:	484080e7          	jalr	1156(ra) # 8001bcf8 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17heb1bde8fe889e8ecE>
    8001b87c:	e02a                	sd	a0,0(sp)
    8001b87e:	a009                	j	8001b880 <_ZN5alloc5boxed12Box$LT$T$GT$10new_zeroed17h2dc288bcc805675fE+0x10>
    }
    8001b880:	6502                	ld	a0,0(sp)
    8001b882:	60a2                	ld	ra,8(sp)
    8001b884:	0141                	addi	sp,sp,16
    8001b886:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed12Box$LT$T$GT$10new_zeroed17ha7605ec5087df013E:

000000008001b888 <_ZN5alloc5boxed12Box$LT$T$GT$10new_zeroed17ha7605ec5087df013E>:
    pub fn new_zeroed() -> Box<mem::MaybeUninit<T>> {
    8001b888:	1141                	addi	sp,sp,-16
        Self::new_zeroed_in(Global)
    8001b88a:	e406                	sd	ra,8(sp)
    8001b88c:	00000097          	auipc	ra,0x0
    8001b890:	3d0080e7          	jalr	976(ra) # 8001bc5c <_ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17h916b48f2a809df2aE>
    8001b894:	e02a                	sd	a0,0(sp)
    8001b896:	a009                	j	8001b898 <_ZN5alloc5boxed12Box$LT$T$GT$10new_zeroed17ha7605ec5087df013E+0x10>
    }
    8001b898:	6502                	ld	a0,0(sp)
    8001b89a:	60a2                	ld	ra,8(sp)
    8001b89c:	0141                	addi	sp,sp,16
    8001b89e:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed12Box$LT$T$GT$10new_zeroed17hb9a4ac65c8961d16E:

000000008001b8a0 <_ZN5alloc5boxed12Box$LT$T$GT$10new_zeroed17hb9a4ac65c8961d16E>:
    pub fn new_zeroed() -> Box<mem::MaybeUninit<T>> {
    8001b8a0:	1141                	addi	sp,sp,-16
        Self::new_zeroed_in(Global)
    8001b8a2:	e406                	sd	ra,8(sp)
    8001b8a4:	00000097          	auipc	ra,0x0
    8001b8a8:	31c080e7          	jalr	796(ra) # 8001bbc0 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17h2f03b5aa500af675E>
    8001b8ac:	e02a                	sd	a0,0(sp)
    8001b8ae:	a009                	j	8001b8b0 <_ZN5alloc5boxed12Box$LT$T$GT$10new_zeroed17hb9a4ac65c8961d16E+0x10>
    }
    8001b8b0:	6502                	ld	a0,0(sp)
    8001b8b2:	60a2                	ld	ra,8(sp)
    8001b8b4:	0141                	addi	sp,sp,16
    8001b8b6:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed12Box$LT$T$GT$10new_zeroed17he11e171c2ca6c076E:

000000008001b8b8 <_ZN5alloc5boxed12Box$LT$T$GT$10new_zeroed17he11e171c2ca6c076E>:
    pub fn new_zeroed() -> Box<mem::MaybeUninit<T>> {
    8001b8b8:	1141                	addi	sp,sp,-16
        Self::new_zeroed_in(Global)
    8001b8ba:	e406                	sd	ra,8(sp)
    8001b8bc:	00000097          	auipc	ra,0x0
    8001b8c0:	352080e7          	jalr	850(ra) # 8001bc0e <_ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17h875f12dc3dac5fbaE>
    8001b8c4:	e02a                	sd	a0,0(sp)
    8001b8c6:	a009                	j	8001b8c8 <_ZN5alloc5boxed12Box$LT$T$GT$10new_zeroed17he11e171c2ca6c076E+0x10>
    }
    8001b8c8:	6502                	ld	a0,0(sp)
    8001b8ca:	60a2                	ld	ra,8(sp)
    8001b8cc:	0141                	addi	sp,sp,16
    8001b8ce:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed12Box$LT$T$GT$10new_zeroed17he41f9c30769fb517E:

000000008001b8d0 <_ZN5alloc5boxed12Box$LT$T$GT$10new_zeroed17he41f9c30769fb517E>:
    pub fn new_zeroed() -> Box<mem::MaybeUninit<T>> {
    8001b8d0:	1141                	addi	sp,sp,-16
        Self::new_zeroed_in(Global)
    8001b8d2:	e406                	sd	ra,8(sp)
    8001b8d4:	00000097          	auipc	ra,0x0
    8001b8d8:	3d6080e7          	jalr	982(ra) # 8001bcaa <_ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17hb74d8ce04ba2f3c1E>
    8001b8dc:	e02a                	sd	a0,0(sp)
    8001b8de:	a009                	j	8001b8e0 <_ZN5alloc5boxed12Box$LT$T$GT$10new_zeroed17he41f9c30769fb517E+0x10>
    }
    8001b8e0:	6502                	ld	a0,0(sp)
    8001b8e2:	60a2                	ld	ra,8(sp)
    8001b8e4:	0141                	addi	sp,sp,16
    8001b8e6:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17h15afec5304658230E:

000000008001b8e8 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17h15afec5304658230E>:
    ///
    /// [memory layout]: self#memory-layout
    /// [`Layout`]: crate::Layout
    #[unstable(feature = "allocator_api", issue = "32838")]
    #[inline]
    pub unsafe fn from_raw_in(raw: *mut T, alloc: A) -> Self {
    8001b8e8:	7179                	addi	sp,sp,-48
    8001b8ea:	f406                	sd	ra,40(sp)
    8001b8ec:	ec2a                	sd	a0,24(sp)
        Box(unsafe { Unique::new_unchecked(raw) }, alloc)
    8001b8ee:	ffff0097          	auipc	ra,0xffff0
    8001b8f2:	23e080e7          	jalr	574(ra) # 8000bb2c <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17hb5a9e5725254bb89E>
    8001b8f6:	e42a                	sd	a0,8(sp)
    8001b8f8:	a009                	j	8001b8fa <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17h15afec5304658230E+0x12>
    8001b8fa:	6522                	ld	a0,8(sp)
    8001b8fc:	e82a                	sd	a0,16(sp)
    }
    8001b8fe:	70a2                	ld	ra,40(sp)
    8001b900:	6145                	addi	sp,sp,48
    8001b902:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17h187980a64cbbe532E:

000000008001b904 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17h187980a64cbbe532E>:
    pub unsafe fn from_raw_in(raw: *mut T, alloc: A) -> Self {
    8001b904:	7179                	addi	sp,sp,-48
    8001b906:	f406                	sd	ra,40(sp)
    8001b908:	ec2a                	sd	a0,24(sp)
        Box(unsafe { Unique::new_unchecked(raw) }, alloc)
    8001b90a:	ffff0097          	auipc	ra,0xffff0
    8001b90e:	24a080e7          	jalr	586(ra) # 8000bb54 <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17hffcbfd9b9a15cee1E>
    8001b912:	e42a                	sd	a0,8(sp)
    8001b914:	a009                	j	8001b916 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17h187980a64cbbe532E+0x12>
    8001b916:	6522                	ld	a0,8(sp)
    8001b918:	e82a                	sd	a0,16(sp)
    }
    8001b91a:	70a2                	ld	ra,40(sp)
    8001b91c:	6145                	addi	sp,sp,48
    8001b91e:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17h468e1ef7cafa8023E:

000000008001b920 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17h468e1ef7cafa8023E>:
    pub unsafe fn from_raw_in(raw: *mut T, alloc: A) -> Self {
    8001b920:	7179                	addi	sp,sp,-48
    8001b922:	f406                	sd	ra,40(sp)
    8001b924:	ec2a                	sd	a0,24(sp)
        Box(unsafe { Unique::new_unchecked(raw) }, alloc)
    8001b926:	ffff0097          	auipc	ra,0xffff0
    8001b92a:	21a080e7          	jalr	538(ra) # 8000bb40 <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17he1ff65b054541f9aE>
    8001b92e:	e42a                	sd	a0,8(sp)
    8001b930:	a009                	j	8001b932 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17h468e1ef7cafa8023E+0x12>
    8001b932:	6522                	ld	a0,8(sp)
    8001b934:	e82a                	sd	a0,16(sp)
    }
    8001b936:	70a2                	ld	ra,40(sp)
    8001b938:	6145                	addi	sp,sp,48
    8001b93a:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17h49971518b172ecd3E:

000000008001b93c <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17h49971518b172ecd3E>:
    pub unsafe fn from_raw_in(raw: *mut T, alloc: A) -> Self {
    8001b93c:	7179                	addi	sp,sp,-48
    8001b93e:	f406                	sd	ra,40(sp)
    8001b940:	ec2a                	sd	a0,24(sp)
        Box(unsafe { Unique::new_unchecked(raw) }, alloc)
    8001b942:	ffff0097          	auipc	ra,0xffff0
    8001b946:	208080e7          	jalr	520(ra) # 8000bb4a <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17he38725f417943878E>
    8001b94a:	e42a                	sd	a0,8(sp)
    8001b94c:	a009                	j	8001b94e <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17h49971518b172ecd3E+0x12>
    8001b94e:	6522                	ld	a0,8(sp)
    8001b950:	e82a                	sd	a0,16(sp)
    }
    8001b952:	70a2                	ld	ra,40(sp)
    8001b954:	6145                	addi	sp,sp,48
    8001b956:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17h68eabecb8cd08a3aE:

000000008001b958 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17h68eabecb8cd08a3aE>:
    pub unsafe fn from_raw_in(raw: *mut T, alloc: A) -> Self {
    8001b958:	7179                	addi	sp,sp,-48
    8001b95a:	f406                	sd	ra,40(sp)
    8001b95c:	ec2a                	sd	a0,24(sp)
        Box(unsafe { Unique::new_unchecked(raw) }, alloc)
    8001b95e:	ffff0097          	auipc	ra,0xffff0
    8001b962:	1a6080e7          	jalr	422(ra) # 8000bb04 <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17h21d50a45a5a242bbE>
    8001b966:	e42a                	sd	a0,8(sp)
    8001b968:	a009                	j	8001b96a <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17h68eabecb8cd08a3aE+0x12>
    8001b96a:	6522                	ld	a0,8(sp)
    8001b96c:	e82a                	sd	a0,16(sp)
    }
    8001b96e:	70a2                	ld	ra,40(sp)
    8001b970:	6145                	addi	sp,sp,48
    8001b972:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17h91226147761dfc23E:

000000008001b974 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17h91226147761dfc23E>:
    pub unsafe fn from_raw_in(raw: *mut T, alloc: A) -> Self {
    8001b974:	7179                	addi	sp,sp,-48
    8001b976:	f406                	sd	ra,40(sp)
    8001b978:	ec2a                	sd	a0,24(sp)
        Box(unsafe { Unique::new_unchecked(raw) }, alloc)
    8001b97a:	ffff0097          	auipc	ra,0xffff0
    8001b97e:	19e080e7          	jalr	414(ra) # 8000bb18 <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17h802ec2c42c5b54adE>
    8001b982:	e42a                	sd	a0,8(sp)
    8001b984:	a009                	j	8001b986 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17h91226147761dfc23E+0x12>
    8001b986:	6522                	ld	a0,8(sp)
    8001b988:	e82a                	sd	a0,16(sp)
    }
    8001b98a:	70a2                	ld	ra,40(sp)
    8001b98c:	6145                	addi	sp,sp,48
    8001b98e:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17h9f1ea1f840330d88E:

000000008001b990 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17h9f1ea1f840330d88E>:
    pub unsafe fn from_raw_in(raw: *mut T, alloc: A) -> Self {
    8001b990:	7179                	addi	sp,sp,-48
    8001b992:	f406                	sd	ra,40(sp)
    8001b994:	ec2a                	sd	a0,24(sp)
        Box(unsafe { Unique::new_unchecked(raw) }, alloc)
    8001b996:	ffff0097          	auipc	ra,0xffff0
    8001b99a:	15a080e7          	jalr	346(ra) # 8000baf0 <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17h0d12a57a76d0850fE>
    8001b99e:	e42a                	sd	a0,8(sp)
    8001b9a0:	a009                	j	8001b9a2 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17h9f1ea1f840330d88E+0x12>
    8001b9a2:	6522                	ld	a0,8(sp)
    8001b9a4:	e82a                	sd	a0,16(sp)
    }
    8001b9a6:	70a2                	ld	ra,40(sp)
    8001b9a8:	6145                	addi	sp,sp,48
    8001b9aa:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17haf8eaf51394a2521E:

000000008001b9ac <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17haf8eaf51394a2521E>:
    pub unsafe fn from_raw_in(raw: *mut T, alloc: A) -> Self {
    8001b9ac:	7179                	addi	sp,sp,-48
    8001b9ae:	f406                	sd	ra,40(sp)
    8001b9b0:	ec2a                	sd	a0,24(sp)
        Box(unsafe { Unique::new_unchecked(raw) }, alloc)
    8001b9b2:	ffff0097          	auipc	ra,0xffff0
    8001b9b6:	184080e7          	jalr	388(ra) # 8000bb36 <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17hcb5e8bc8059451d1E>
    8001b9ba:	e42a                	sd	a0,8(sp)
    8001b9bc:	a009                	j	8001b9be <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17haf8eaf51394a2521E+0x12>
    8001b9be:	6522                	ld	a0,8(sp)
    8001b9c0:	e82a                	sd	a0,16(sp)
    }
    8001b9c2:	70a2                	ld	ra,40(sp)
    8001b9c4:	6145                	addi	sp,sp,48
    8001b9c6:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17hbb480293fc4c0d0bE:

000000008001b9c8 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17hbb480293fc4c0d0bE>:
    pub unsafe fn from_raw_in(raw: *mut T, alloc: A) -> Self {
    8001b9c8:	7179                	addi	sp,sp,-48
    8001b9ca:	f406                	sd	ra,40(sp)
    8001b9cc:	ec2a                	sd	a0,24(sp)
        Box(unsafe { Unique::new_unchecked(raw) }, alloc)
    8001b9ce:	ffff0097          	auipc	ra,0xffff0
    8001b9d2:	12c080e7          	jalr	300(ra) # 8000bafa <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17h20d3eb97294874feE>
    8001b9d6:	e42a                	sd	a0,8(sp)
    8001b9d8:	a009                	j	8001b9da <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17hbb480293fc4c0d0bE+0x12>
    8001b9da:	6522                	ld	a0,8(sp)
    8001b9dc:	e82a                	sd	a0,16(sp)
    }
    8001b9de:	70a2                	ld	ra,40(sp)
    8001b9e0:	6145                	addi	sp,sp,48
    8001b9e2:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17he38318e450c3c542E:

000000008001b9e4 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17he38318e450c3c542E>:
    pub unsafe fn from_raw_in(raw: *mut T, alloc: A) -> Self {
    8001b9e4:	7179                	addi	sp,sp,-48
    8001b9e6:	f406                	sd	ra,40(sp)
    8001b9e8:	ec2a                	sd	a0,24(sp)
        Box(unsafe { Unique::new_unchecked(raw) }, alloc)
    8001b9ea:	ffff0097          	auipc	ra,0xffff0
    8001b9ee:	138080e7          	jalr	312(ra) # 8000bb22 <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17ha8b21015e9411210E>
    8001b9f2:	e42a                	sd	a0,8(sp)
    8001b9f4:	a009                	j	8001b9f6 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17he38318e450c3c542E+0x12>
    8001b9f6:	6522                	ld	a0,8(sp)
    8001b9f8:	e82a                	sd	a0,16(sp)
    }
    8001b9fa:	70a2                	ld	ra,40(sp)
    8001b9fc:	6145                	addi	sp,sp,48
    8001b9fe:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17h48e22d69c2444c2aE:

000000008001ba00 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17h48e22d69c2444c2aE>:
        issue = "none",
        reason = "use `Box::leak(b).into()` or `Unique::from(Box::leak(b))` instead"
    )]
    #[inline]
    #[doc(hidden)]
    pub fn into_unique(b: Self) -> (Unique<T>, A) {
    8001ba00:	7179                	addi	sp,sp,-48
    8001ba02:	f406                	sd	ra,40(sp)
    8001ba04:	e82a                	sd	a0,16(sp)
    8001ba06:	0808                	addi	a0,sp,16
        // Box is recognized as a "unique pointer" by Stacked Borrows, but internally it is a
        // raw pointer for the type system. Turning it directly into a raw pointer would not be
        // recognized as "releasing" the unique pointer to permit aliased raw accesses,
        // so all raw pointer methods have to go through `Box::leak`. Turning *that* to a raw pointer
        // behaves correctly.
        let alloc = unsafe { ptr::read(&b.1) };
    8001ba08:	ffffd097          	auipc	ra,0xffffd
    8001ba0c:	d06080e7          	jalr	-762(ra) # 8001870e <_ZN4core3ptr4read17hb68b0b8aaefcfe70E>
    8001ba10:	a009                	j	8001ba12 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17h48e22d69c2444c2aE+0x12>
        (Unique::from(Box::leak(b)), alloc)
    8001ba12:	6542                	ld	a0,16(sp)
    8001ba14:	00001097          	auipc	ra,0x1
    8001ba18:	84a080e7          	jalr	-1974(ra) # 8001c25e <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h77f658a9b95a64a2E>
    8001ba1c:	e42a                	sd	a0,8(sp)
    8001ba1e:	a009                	j	8001ba20 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17h48e22d69c2444c2aE+0x20>
    8001ba20:	6522                	ld	a0,8(sp)
    8001ba22:	ffff0097          	auipc	ra,0xffff0
    8001ba26:	288080e7          	jalr	648(ra) # 8000bcaa <_ZN95_$LT$core..ptr..unique..Unique$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$mut$u20$T$GT$$GT$4from17h45361f1294fceae9E>
    8001ba2a:	e02a                	sd	a0,0(sp)
    8001ba2c:	a009                	j	8001ba2e <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17h48e22d69c2444c2aE+0x2e>
    8001ba2e:	6502                	ld	a0,0(sp)
    8001ba30:	ec2a                	sd	a0,24(sp)
    }
    8001ba32:	70a2                	ld	ra,40(sp)
    8001ba34:	6145                	addi	sp,sp,48
    8001ba36:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17h77bf5089d70199a1E:

000000008001ba38 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17h77bf5089d70199a1E>:
    pub fn into_unique(b: Self) -> (Unique<T>, A) {
    8001ba38:	7179                	addi	sp,sp,-48
    8001ba3a:	f406                	sd	ra,40(sp)
    8001ba3c:	e82a                	sd	a0,16(sp)
    8001ba3e:	0808                	addi	a0,sp,16
        let alloc = unsafe { ptr::read(&b.1) };
    8001ba40:	ffffd097          	auipc	ra,0xffffd
    8001ba44:	cce080e7          	jalr	-818(ra) # 8001870e <_ZN4core3ptr4read17hb68b0b8aaefcfe70E>
    8001ba48:	a009                	j	8001ba4a <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17h77bf5089d70199a1E+0x12>
        (Unique::from(Box::leak(b)), alloc)
    8001ba4a:	6542                	ld	a0,16(sp)
    8001ba4c:	00001097          	auipc	ra,0x1
    8001ba50:	926080e7          	jalr	-1754(ra) # 8001c372 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17he4f1cfe07554e5a5E>
    8001ba54:	e42a                	sd	a0,8(sp)
    8001ba56:	a009                	j	8001ba58 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17h77bf5089d70199a1E+0x20>
    8001ba58:	6522                	ld	a0,8(sp)
    8001ba5a:	ffff0097          	auipc	ra,0xffff0
    8001ba5e:	282080e7          	jalr	642(ra) # 8000bcdc <_ZN95_$LT$core..ptr..unique..Unique$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$mut$u20$T$GT$$GT$4from17hbd7fdd10f6dec294E>
    8001ba62:	e02a                	sd	a0,0(sp)
    8001ba64:	a009                	j	8001ba66 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17h77bf5089d70199a1E+0x2e>
    8001ba66:	6502                	ld	a0,0(sp)
    8001ba68:	ec2a                	sd	a0,24(sp)
    }
    8001ba6a:	70a2                	ld	ra,40(sp)
    8001ba6c:	6145                	addi	sp,sp,48
    8001ba6e:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17h80646c1775168f03E:

000000008001ba70 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17h80646c1775168f03E>:
    pub fn into_unique(b: Self) -> (Unique<T>, A) {
    8001ba70:	7179                	addi	sp,sp,-48
    8001ba72:	f406                	sd	ra,40(sp)
    8001ba74:	e82a                	sd	a0,16(sp)
    8001ba76:	0808                	addi	a0,sp,16
        let alloc = unsafe { ptr::read(&b.1) };
    8001ba78:	ffffd097          	auipc	ra,0xffffd
    8001ba7c:	c96080e7          	jalr	-874(ra) # 8001870e <_ZN4core3ptr4read17hb68b0b8aaefcfe70E>
    8001ba80:	a009                	j	8001ba82 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17h80646c1775168f03E+0x12>
        (Unique::from(Box::leak(b)), alloc)
    8001ba82:	6542                	ld	a0,16(sp)
    8001ba84:	00001097          	auipc	ra,0x1
    8001ba88:	836080e7          	jalr	-1994(ra) # 8001c2ba <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h94cb03dd08e899b7E>
    8001ba8c:	e42a                	sd	a0,8(sp)
    8001ba8e:	a009                	j	8001ba90 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17h80646c1775168f03E+0x20>
    8001ba90:	6522                	ld	a0,8(sp)
    8001ba92:	ffff0097          	auipc	ra,0xffff0
    8001ba96:	22c080e7          	jalr	556(ra) # 8000bcbe <_ZN95_$LT$core..ptr..unique..Unique$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$mut$u20$T$GT$$GT$4from17h938709fab973920cE>
    8001ba9a:	e02a                	sd	a0,0(sp)
    8001ba9c:	a009                	j	8001ba9e <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17h80646c1775168f03E+0x2e>
    8001ba9e:	6502                	ld	a0,0(sp)
    8001baa0:	ec2a                	sd	a0,24(sp)
    }
    8001baa2:	70a2                	ld	ra,40(sp)
    8001baa4:	6145                	addi	sp,sp,48
    8001baa6:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17h93f491d0366dd1a9E:

000000008001baa8 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17h93f491d0366dd1a9E>:
    pub fn into_unique(b: Self) -> (Unique<T>, A) {
    8001baa8:	7179                	addi	sp,sp,-48
    8001baaa:	f406                	sd	ra,40(sp)
    8001baac:	e82a                	sd	a0,16(sp)
    8001baae:	0808                	addi	a0,sp,16
        let alloc = unsafe { ptr::read(&b.1) };
    8001bab0:	ffffd097          	auipc	ra,0xffffd
    8001bab4:	c5e080e7          	jalr	-930(ra) # 8001870e <_ZN4core3ptr4read17hb68b0b8aaefcfe70E>
    8001bab8:	a009                	j	8001baba <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17h93f491d0366dd1a9E+0x12>
        (Unique::from(Box::leak(b)), alloc)
    8001baba:	6542                	ld	a0,16(sp)
    8001babc:	00000097          	auipc	ra,0x0
    8001bac0:	746080e7          	jalr	1862(ra) # 8001c202 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h3b2c40161bf6c180E>
    8001bac4:	e42a                	sd	a0,8(sp)
    8001bac6:	a009                	j	8001bac8 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17h93f491d0366dd1a9E+0x20>
    8001bac8:	6522                	ld	a0,8(sp)
    8001baca:	ffff0097          	auipc	ra,0xffff0
    8001bace:	21c080e7          	jalr	540(ra) # 8000bce6 <_ZN95_$LT$core..ptr..unique..Unique$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$mut$u20$T$GT$$GT$4from17hd2fb1fd1ad0aa985E>
    8001bad2:	e02a                	sd	a0,0(sp)
    8001bad4:	a009                	j	8001bad6 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17h93f491d0366dd1a9E+0x2e>
    8001bad6:	6502                	ld	a0,0(sp)
    8001bad8:	ec2a                	sd	a0,24(sp)
    }
    8001bada:	70a2                	ld	ra,40(sp)
    8001badc:	6145                	addi	sp,sp,48
    8001bade:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17h9813befe69e55ae1E:

000000008001bae0 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17h9813befe69e55ae1E>:
    pub fn into_unique(b: Self) -> (Unique<T>, A) {
    8001bae0:	7179                	addi	sp,sp,-48
    8001bae2:	f406                	sd	ra,40(sp)
    8001bae4:	e82a                	sd	a0,16(sp)
    8001bae6:	0808                	addi	a0,sp,16
        let alloc = unsafe { ptr::read(&b.1) };
    8001bae8:	ffffd097          	auipc	ra,0xffffd
    8001baec:	c26080e7          	jalr	-986(ra) # 8001870e <_ZN4core3ptr4read17hb68b0b8aaefcfe70E>
    8001baf0:	a009                	j	8001baf2 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17h9813befe69e55ae1E+0x12>
        (Unique::from(Box::leak(b)), alloc)
    8001baf2:	6542                	ld	a0,16(sp)
    8001baf4:	00000097          	auipc	ra,0x0
    8001baf8:	73c080e7          	jalr	1852(ra) # 8001c230 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h4b4e76265837c5ceE>
    8001bafc:	e42a                	sd	a0,8(sp)
    8001bafe:	a009                	j	8001bb00 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17h9813befe69e55ae1E+0x20>
    8001bb00:	6522                	ld	a0,8(sp)
    8001bb02:	ffff0097          	auipc	ra,0xffff0
    8001bb06:	1d0080e7          	jalr	464(ra) # 8000bcd2 <_ZN95_$LT$core..ptr..unique..Unique$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$mut$u20$T$GT$$GT$4from17haf9e918ffbbde4a1E>
    8001bb0a:	e02a                	sd	a0,0(sp)
    8001bb0c:	a009                	j	8001bb0e <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17h9813befe69e55ae1E+0x2e>
    8001bb0e:	6502                	ld	a0,0(sp)
    8001bb10:	ec2a                	sd	a0,24(sp)
    }
    8001bb12:	70a2                	ld	ra,40(sp)
    8001bb14:	6145                	addi	sp,sp,48
    8001bb16:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17hb4dd27b4659222a3E:

000000008001bb18 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17hb4dd27b4659222a3E>:
    pub fn into_unique(b: Self) -> (Unique<T>, A) {
    8001bb18:	7179                	addi	sp,sp,-48
    8001bb1a:	f406                	sd	ra,40(sp)
    8001bb1c:	e82a                	sd	a0,16(sp)
    8001bb1e:	0808                	addi	a0,sp,16
        let alloc = unsafe { ptr::read(&b.1) };
    8001bb20:	ffffd097          	auipc	ra,0xffffd
    8001bb24:	bee080e7          	jalr	-1042(ra) # 8001870e <_ZN4core3ptr4read17hb68b0b8aaefcfe70E>
    8001bb28:	a009                	j	8001bb2a <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17hb4dd27b4659222a3E+0x12>
        (Unique::from(Box::leak(b)), alloc)
    8001bb2a:	6542                	ld	a0,16(sp)
    8001bb2c:	00001097          	auipc	ra,0x1
    8001bb30:	818080e7          	jalr	-2024(ra) # 8001c344 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17hcf7bcb368f276750E>
    8001bb34:	e42a                	sd	a0,8(sp)
    8001bb36:	a009                	j	8001bb38 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17hb4dd27b4659222a3E+0x20>
    8001bb38:	6522                	ld	a0,8(sp)
    8001bb3a:	ffff0097          	auipc	ra,0xffff0
    8001bb3e:	17a080e7          	jalr	378(ra) # 8000bcb4 <_ZN95_$LT$core..ptr..unique..Unique$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$mut$u20$T$GT$$GT$4from17h7ca19f4bf209b680E>
    8001bb42:	e02a                	sd	a0,0(sp)
    8001bb44:	a009                	j	8001bb46 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17hb4dd27b4659222a3E+0x2e>
    8001bb46:	6502                	ld	a0,0(sp)
    8001bb48:	ec2a                	sd	a0,24(sp)
    }
    8001bb4a:	70a2                	ld	ra,40(sp)
    8001bb4c:	6145                	addi	sp,sp,48
    8001bb4e:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17hd08884b913096851E:

000000008001bb50 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17hd08884b913096851E>:
    pub fn into_unique(b: Self) -> (Unique<T>, A) {
    8001bb50:	7179                	addi	sp,sp,-48
    8001bb52:	f406                	sd	ra,40(sp)
    8001bb54:	e82a                	sd	a0,16(sp)
    8001bb56:	0808                	addi	a0,sp,16
        let alloc = unsafe { ptr::read(&b.1) };
    8001bb58:	ffffd097          	auipc	ra,0xffffd
    8001bb5c:	bb6080e7          	jalr	-1098(ra) # 8001870e <_ZN4core3ptr4read17hb68b0b8aaefcfe70E>
    8001bb60:	a009                	j	8001bb62 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17hd08884b913096851E+0x12>
        (Unique::from(Box::leak(b)), alloc)
    8001bb62:	6542                	ld	a0,16(sp)
    8001bb64:	00000097          	auipc	ra,0x0
    8001bb68:	728080e7          	jalr	1832(ra) # 8001c28c <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h925dcada2cd56bb2E>
    8001bb6c:	e42a                	sd	a0,8(sp)
    8001bb6e:	a009                	j	8001bb70 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17hd08884b913096851E+0x20>
    8001bb70:	6522                	ld	a0,8(sp)
    8001bb72:	ffff0097          	auipc	ra,0xffff0
    8001bb76:	156080e7          	jalr	342(ra) # 8000bcc8 <_ZN95_$LT$core..ptr..unique..Unique$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$mut$u20$T$GT$$GT$4from17h961fb5f3bbf04d92E>
    8001bb7a:	e02a                	sd	a0,0(sp)
    8001bb7c:	a009                	j	8001bb7e <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17hd08884b913096851E+0x2e>
    8001bb7e:	6502                	ld	a0,0(sp)
    8001bb80:	ec2a                	sd	a0,24(sp)
    }
    8001bb82:	70a2                	ld	ra,40(sp)
    8001bb84:	6145                	addi	sp,sp,48
    8001bb86:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17hd4115af6111f1ecaE:

000000008001bb88 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17hd4115af6111f1ecaE>:
    pub fn into_unique(b: Self) -> (Unique<T>, A) {
    8001bb88:	7179                	addi	sp,sp,-48
    8001bb8a:	f406                	sd	ra,40(sp)
    8001bb8c:	e82a                	sd	a0,16(sp)
    8001bb8e:	0808                	addi	a0,sp,16
        let alloc = unsafe { ptr::read(&b.1) };
    8001bb90:	ffffd097          	auipc	ra,0xffffd
    8001bb94:	b7e080e7          	jalr	-1154(ra) # 8001870e <_ZN4core3ptr4read17hb68b0b8aaefcfe70E>
    8001bb98:	a009                	j	8001bb9a <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17hd4115af6111f1ecaE+0x12>
        (Unique::from(Box::leak(b)), alloc)
    8001bb9a:	6542                	ld	a0,16(sp)
    8001bb9c:	00000097          	auipc	ra,0x0
    8001bba0:	77a080e7          	jalr	1914(ra) # 8001c316 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17hb50450963f97575cE>
    8001bba4:	e42a                	sd	a0,8(sp)
    8001bba6:	a009                	j	8001bba8 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17hd4115af6111f1ecaE+0x20>
    8001bba8:	6522                	ld	a0,8(sp)
    8001bbaa:	ffff0097          	auipc	ra,0xffff0
    8001bbae:	146080e7          	jalr	326(ra) # 8000bcf0 <_ZN95_$LT$core..ptr..unique..Unique$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$mut$u20$T$GT$$GT$4from17hdb52ac7756946cf1E>
    8001bbb2:	e02a                	sd	a0,0(sp)
    8001bbb4:	a009                	j	8001bbb6 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17hd4115af6111f1ecaE+0x2e>
    8001bbb6:	6502                	ld	a0,0(sp)
    8001bbb8:	ec2a                	sd	a0,24(sp)
    }
    8001bbba:	70a2                	ld	ra,40(sp)
    8001bbbc:	6145                	addi	sp,sp,48
    8001bbbe:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17h2f03b5aa500af675E:

000000008001bbc0 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17h2f03b5aa500af675E>:
    pub fn new_zeroed_in(alloc: A) -> Box<mem::MaybeUninit<T>, A> {
    8001bbc0:	7139                	addi	sp,sp,-64
        let layout = Layout::new::<mem::MaybeUninit<T>>();
    8001bbc2:	fc06                	sd	ra,56(sp)
    8001bbc4:	fffed097          	auipc	ra,0xfffed
    8001bbc8:	9f2080e7          	jalr	-1550(ra) # 800085b6 <_ZN4core5alloc6layout6Layout3new17h9329aa50601ba1ffE>
    8001bbcc:	862a                	mv	a2,a0
    8001bbce:	e032                	sd	a2,0(sp)
    8001bbd0:	862e                	mv	a2,a1
    8001bbd2:	e432                	sd	a2,8(sp)
    8001bbd4:	f02a                	sd	a0,32(sp)
    8001bbd6:	f42e                	sd	a1,40(sp)
    8001bbd8:	a009                	j	8001bbda <_ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17h2f03b5aa500af675E+0x1a>
        match Box::try_new_zeroed_in(alloc) {
    8001bbda:	00000097          	auipc	ra,0x0
    8001bbde:	2c4080e7          	jalr	708(ra) # 8001be9e <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h90782e32d4ec13edE>
    8001bbe2:	e82a                	sd	a0,16(sp)
    8001bbe4:	a009                	j	8001bbe6 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17h2f03b5aa500af675E+0x26>
            Ok(m) => m,
    8001bbe6:	6542                	ld	a0,16(sp)
    8001bbe8:	00153593          	seqz	a1,a0
    8001bbec:	4581                	li	a1,0
    8001bbee:	00b51b63          	bne	a0,a1,8001bc04 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17h2f03b5aa500af675E+0x44>
    8001bbf2:	a009                	j	8001bbf4 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17h2f03b5aa500af675E+0x34>
            Err(_) => handle_alloc_error(layout),
    8001bbf4:	65a2                	ld	a1,8(sp)
    8001bbf6:	6502                	ld	a0,0(sp)
    8001bbf8:	00006097          	auipc	ra,0x6
    8001bbfc:	478080e7          	jalr	1144(ra) # 80022070 <_ZN5alloc5alloc18handle_alloc_error17haa1b1c0a80642c5aE>
    8001bc00:	0000                	unimp
        match Box::try_new_zeroed_in(alloc) {
    8001bc02:	0000                	unimp
            Ok(m) => m,
    8001bc04:	6542                	ld	a0,16(sp)
    8001bc06:	f82a                	sd	a0,48(sp)
    }
    8001bc08:	70e2                	ld	ra,56(sp)
    8001bc0a:	6121                	addi	sp,sp,64
    8001bc0c:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17h875f12dc3dac5fbaE:

000000008001bc0e <_ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17h875f12dc3dac5fbaE>:
    pub fn new_zeroed_in(alloc: A) -> Box<mem::MaybeUninit<T>, A> {
    8001bc0e:	7139                	addi	sp,sp,-64
        let layout = Layout::new::<mem::MaybeUninit<T>>();
    8001bc10:	fc06                	sd	ra,56(sp)
    8001bc12:	fffed097          	auipc	ra,0xfffed
    8001bc16:	8dc080e7          	jalr	-1828(ra) # 800084ee <_ZN4core5alloc6layout6Layout3new17h00440f750a953d15E>
    8001bc1a:	862a                	mv	a2,a0
    8001bc1c:	e032                	sd	a2,0(sp)
    8001bc1e:	862e                	mv	a2,a1
    8001bc20:	e432                	sd	a2,8(sp)
    8001bc22:	f02a                	sd	a0,32(sp)
    8001bc24:	f42e                	sd	a1,40(sp)
    8001bc26:	a009                	j	8001bc28 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17h875f12dc3dac5fbaE+0x1a>
        match Box::try_new_zeroed_in(alloc) {
    8001bc28:	00000097          	auipc	ra,0x0
    8001bc2c:	3ce080e7          	jalr	974(ra) # 8001bff6 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17hea8ededefef3bf78E>
    8001bc30:	e82a                	sd	a0,16(sp)
    8001bc32:	a009                	j	8001bc34 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17h875f12dc3dac5fbaE+0x26>
            Ok(m) => m,
    8001bc34:	6542                	ld	a0,16(sp)
    8001bc36:	00153593          	seqz	a1,a0
    8001bc3a:	4581                	li	a1,0
    8001bc3c:	00b51b63          	bne	a0,a1,8001bc52 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17h875f12dc3dac5fbaE+0x44>
    8001bc40:	a009                	j	8001bc42 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17h875f12dc3dac5fbaE+0x34>
            Err(_) => handle_alloc_error(layout),
    8001bc42:	65a2                	ld	a1,8(sp)
    8001bc44:	6502                	ld	a0,0(sp)
    8001bc46:	00006097          	auipc	ra,0x6
    8001bc4a:	42a080e7          	jalr	1066(ra) # 80022070 <_ZN5alloc5alloc18handle_alloc_error17haa1b1c0a80642c5aE>
    8001bc4e:	0000                	unimp
        match Box::try_new_zeroed_in(alloc) {
    8001bc50:	0000                	unimp
            Ok(m) => m,
    8001bc52:	6542                	ld	a0,16(sp)
    8001bc54:	f82a                	sd	a0,48(sp)
    }
    8001bc56:	70e2                	ld	ra,56(sp)
    8001bc58:	6121                	addi	sp,sp,64
    8001bc5a:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17h916b48f2a809df2aE:

000000008001bc5c <_ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17h916b48f2a809df2aE>:
    pub fn new_zeroed_in(alloc: A) -> Box<mem::MaybeUninit<T>, A> {
    8001bc5c:	7139                	addi	sp,sp,-64
        let layout = Layout::new::<mem::MaybeUninit<T>>();
    8001bc5e:	fc06                	sd	ra,56(sp)
    8001bc60:	fffed097          	auipc	ra,0xfffed
    8001bc64:	924080e7          	jalr	-1756(ra) # 80008584 <_ZN4core5alloc6layout6Layout3new17h728acb0ef5b915afE>
    8001bc68:	862a                	mv	a2,a0
    8001bc6a:	e032                	sd	a2,0(sp)
    8001bc6c:	862e                	mv	a2,a1
    8001bc6e:	e432                	sd	a2,8(sp)
    8001bc70:	f02a                	sd	a0,32(sp)
    8001bc72:	f42e                	sd	a1,40(sp)
    8001bc74:	a009                	j	8001bc76 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17h916b48f2a809df2aE+0x1a>
        match Box::try_new_zeroed_in(alloc) {
    8001bc76:	00000097          	auipc	ra,0x0
    8001bc7a:	17c080e7          	jalr	380(ra) # 8001bdf2 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h32b802f331a4867eE>
    8001bc7e:	e82a                	sd	a0,16(sp)
    8001bc80:	a009                	j	8001bc82 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17h916b48f2a809df2aE+0x26>
            Ok(m) => m,
    8001bc82:	6542                	ld	a0,16(sp)
    8001bc84:	00153593          	seqz	a1,a0
    8001bc88:	4581                	li	a1,0
    8001bc8a:	00b51b63          	bne	a0,a1,8001bca0 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17h916b48f2a809df2aE+0x44>
    8001bc8e:	a009                	j	8001bc90 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17h916b48f2a809df2aE+0x34>
            Err(_) => handle_alloc_error(layout),
    8001bc90:	65a2                	ld	a1,8(sp)
    8001bc92:	6502                	ld	a0,0(sp)
    8001bc94:	00006097          	auipc	ra,0x6
    8001bc98:	3dc080e7          	jalr	988(ra) # 80022070 <_ZN5alloc5alloc18handle_alloc_error17haa1b1c0a80642c5aE>
    8001bc9c:	0000                	unimp
        match Box::try_new_zeroed_in(alloc) {
    8001bc9e:	0000                	unimp
            Ok(m) => m,
    8001bca0:	6542                	ld	a0,16(sp)
    8001bca2:	f82a                	sd	a0,48(sp)
    }
    8001bca4:	70e2                	ld	ra,56(sp)
    8001bca6:	6121                	addi	sp,sp,64
    8001bca8:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17hb74d8ce04ba2f3c1E:

000000008001bcaa <_ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17hb74d8ce04ba2f3c1E>:
    pub fn new_zeroed_in(alloc: A) -> Box<mem::MaybeUninit<T>, A> {
    8001bcaa:	7139                	addi	sp,sp,-64
        let layout = Layout::new::<mem::MaybeUninit<T>>();
    8001bcac:	fc06                	sd	ra,56(sp)
    8001bcae:	fffed097          	auipc	ra,0xfffed
    8001bcb2:	93a080e7          	jalr	-1734(ra) # 800085e8 <_ZN4core5alloc6layout6Layout3new17hfb4102c77959cfa1E>
    8001bcb6:	862a                	mv	a2,a0
    8001bcb8:	e032                	sd	a2,0(sp)
    8001bcba:	862e                	mv	a2,a1
    8001bcbc:	e432                	sd	a2,8(sp)
    8001bcbe:	f02a                	sd	a0,32(sp)
    8001bcc0:	f42e                	sd	a1,40(sp)
    8001bcc2:	a009                	j	8001bcc4 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17hb74d8ce04ba2f3c1E+0x1a>
        match Box::try_new_zeroed_in(alloc) {
    8001bcc4:	00000097          	auipc	ra,0x0
    8001bcc8:	286080e7          	jalr	646(ra) # 8001bf4a <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h9571c749e8c8e6e8E>
    8001bccc:	e82a                	sd	a0,16(sp)
    8001bcce:	a009                	j	8001bcd0 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17hb74d8ce04ba2f3c1E+0x26>
            Ok(m) => m,
    8001bcd0:	6542                	ld	a0,16(sp)
    8001bcd2:	00153593          	seqz	a1,a0
    8001bcd6:	4581                	li	a1,0
    8001bcd8:	00b51b63          	bne	a0,a1,8001bcee <_ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17hb74d8ce04ba2f3c1E+0x44>
    8001bcdc:	a009                	j	8001bcde <_ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17hb74d8ce04ba2f3c1E+0x34>
            Err(_) => handle_alloc_error(layout),
    8001bcde:	65a2                	ld	a1,8(sp)
    8001bce0:	6502                	ld	a0,0(sp)
    8001bce2:	00006097          	auipc	ra,0x6
    8001bce6:	38e080e7          	jalr	910(ra) # 80022070 <_ZN5alloc5alloc18handle_alloc_error17haa1b1c0a80642c5aE>
    8001bcea:	0000                	unimp
        match Box::try_new_zeroed_in(alloc) {
    8001bcec:	0000                	unimp
            Ok(m) => m,
    8001bcee:	6542                	ld	a0,16(sp)
    8001bcf0:	f82a                	sd	a0,48(sp)
    }
    8001bcf2:	70e2                	ld	ra,56(sp)
    8001bcf4:	6121                	addi	sp,sp,64
    8001bcf6:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17heb1bde8fe889e8ecE:

000000008001bcf8 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17heb1bde8fe889e8ecE>:
    pub fn new_zeroed_in(alloc: A) -> Box<mem::MaybeUninit<T>, A> {
    8001bcf8:	7139                	addi	sp,sp,-64
        let layout = Layout::new::<mem::MaybeUninit<T>>();
    8001bcfa:	fc06                	sd	ra,56(sp)
    8001bcfc:	fffed097          	auipc	ra,0xfffed
    8001bd00:	824080e7          	jalr	-2012(ra) # 80008520 <_ZN4core5alloc6layout6Layout3new17h0cabd46b2af96281E>
    8001bd04:	862a                	mv	a2,a0
    8001bd06:	e032                	sd	a2,0(sp)
    8001bd08:	862e                	mv	a2,a1
    8001bd0a:	e432                	sd	a2,8(sp)
    8001bd0c:	f02a                	sd	a0,32(sp)
    8001bd0e:	f42e                	sd	a1,40(sp)
    8001bd10:	a009                	j	8001bd12 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17heb1bde8fe889e8ecE+0x1a>
        match Box::try_new_zeroed_in(alloc) {
    8001bd12:	00000097          	auipc	ra,0x0
    8001bd16:	034080e7          	jalr	52(ra) # 8001bd46 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h29f0c45ca59c2dc8E>
    8001bd1a:	e82a                	sd	a0,16(sp)
    8001bd1c:	a009                	j	8001bd1e <_ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17heb1bde8fe889e8ecE+0x26>
            Ok(m) => m,
    8001bd1e:	6542                	ld	a0,16(sp)
    8001bd20:	00153593          	seqz	a1,a0
    8001bd24:	4581                	li	a1,0
    8001bd26:	00b51b63          	bne	a0,a1,8001bd3c <_ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17heb1bde8fe889e8ecE+0x44>
    8001bd2a:	a009                	j	8001bd2c <_ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17heb1bde8fe889e8ecE+0x34>
            Err(_) => handle_alloc_error(layout),
    8001bd2c:	65a2                	ld	a1,8(sp)
    8001bd2e:	6502                	ld	a0,0(sp)
    8001bd30:	00006097          	auipc	ra,0x6
    8001bd34:	340080e7          	jalr	832(ra) # 80022070 <_ZN5alloc5alloc18handle_alloc_error17haa1b1c0a80642c5aE>
    8001bd38:	0000                	unimp
        match Box::try_new_zeroed_in(alloc) {
    8001bd3a:	0000                	unimp
            Ok(m) => m,
    8001bd3c:	6542                	ld	a0,16(sp)
    8001bd3e:	f82a                	sd	a0,48(sp)
    }
    8001bd40:	70e2                	ld	ra,56(sp)
    8001bd42:	6121                	addi	sp,sp,64
    8001bd44:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h29f0c45ca59c2dc8E:

000000008001bd46 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h29f0c45ca59c2dc8E>:
    pub fn try_new_zeroed_in(alloc: A) -> Result<Box<mem::MaybeUninit<T>, A>, AllocError> {
    8001bd46:	7175                	addi	sp,sp,-144
        let layout = Layout::new::<mem::MaybeUninit<T>>();
    8001bd48:	e506                	sd	ra,136(sp)
    8001bd4a:	fffec097          	auipc	ra,0xfffec
    8001bd4e:	7d6080e7          	jalr	2006(ra) # 80008520 <_ZN4core5alloc6layout6Layout3new17h0cabd46b2af96281E>
    8001bd52:	862a                	mv	a2,a0
    8001bd54:	f432                	sd	a2,40(sp)
    8001bd56:	862e                	mv	a2,a1
    8001bd58:	f832                	sd	a2,48(sp)
    8001bd5a:	f0aa                	sd	a0,96(sp)
    8001bd5c:	f4ae                	sd	a1,104(sp)
    8001bd5e:	a009                	j	8001bd60 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h29f0c45ca59c2dc8E+0x1a>
        let ptr = alloc.allocate_zeroed(layout)?.cast();
    8001bd60:	7642                	ld	a2,48(sp)
    8001bd62:	75a2                	ld	a1,40(sp)
    8001bd64:	1828                	addi	a0,sp,56
    8001bd66:	ffff0097          	auipc	ra,0xffff0
    8001bd6a:	560080e7          	jalr	1376(ra) # 8000c2c6 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$15allocate_zeroed17h62d497141254e70dE>
    8001bd6e:	ec2a                	sd	a0,24(sp)
    8001bd70:	f02e                	sd	a1,32(sp)
    8001bd72:	a009                	j	8001bd74 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h29f0c45ca59c2dc8E+0x2e>
    8001bd74:	7582                	ld	a1,32(sp)
    8001bd76:	6562                	ld	a0,24(sp)
    8001bd78:	ffff1097          	auipc	ra,0xffff1
    8001bd7c:	41a080e7          	jalr	1050(ra) # 8000d192 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h1c9f3c35158f4b17E>
    8001bd80:	e4aa                	sd	a0,72(sp)
    8001bd82:	e8ae                	sd	a1,80(sp)
    8001bd84:	a009                	j	8001bd86 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h29f0c45ca59c2dc8E+0x40>
    8001bd86:	6526                	ld	a0,72(sp)
    8001bd88:	00153593          	seqz	a1,a0
    8001bd8c:	4581                	li	a1,0
    8001bd8e:	00b51463          	bne	a0,a1,8001bd96 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h29f0c45ca59c2dc8E+0x50>
    8001bd92:	a009                	j	8001bd94 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h29f0c45ca59c2dc8E+0x4e>
    8001bd94:	a831                	j	8001bdb0 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h29f0c45ca59c2dc8E+0x6a>
    8001bd96:	6526                	ld	a0,72(sp)
    8001bd98:	65c6                	ld	a1,80(sp)
    8001bd9a:	f8aa                	sd	a0,112(sp)
    8001bd9c:	fcae                	sd	a1,120(sp)
    8001bd9e:	ffff3097          	auipc	ra,0xffff3
    8001bda2:	6b4080e7          	jalr	1716(ra) # 8000f452 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h85615dabbcfe0ebdE>
    8001bda6:	85aa                	mv	a1,a0
    8001bda8:	e82e                	sd	a1,16(sp)
    8001bdaa:	e12a                	sd	a0,128(sp)
    8001bdac:	a831                	j	8001bdc8 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h29f0c45ca59c2dc8E+0x82>
    8001bdae:	0000                	unimp
    8001bdb0:	ffff1097          	auipc	ra,0xffff1
    8001bdb4:	d8a080e7          	jalr	-630(ra) # 8000cb3a <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h37d2ccc52635f8a7E>
    8001bdb8:	a009                	j	8001bdba <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h29f0c45ca59c2dc8E+0x74>
    8001bdba:	ffff1097          	auipc	ra,0xffff1
    8001bdbe:	3a4080e7          	jalr	932(ra) # 8000d15e <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17hc5c17464a72e6965E>
    8001bdc2:	e0aa                	sd	a0,64(sp)
    8001bdc4:	a009                	j	8001bdc6 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h29f0c45ca59c2dc8E+0x80>
    }
    8001bdc6:	a015                	j	8001bdea <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h29f0c45ca59c2dc8E+0xa4>
        unsafe { Ok(Box::from_raw_in(ptr.as_ptr(), alloc)) }
    8001bdc8:	6542                	ld	a0,16(sp)
    8001bdca:	ffff3097          	auipc	ra,0xffff3
    8001bdce:	722080e7          	jalr	1826(ra) # 8000f4ec <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h4054fe6794409e65E>
    8001bdd2:	e42a                	sd	a0,8(sp)
    8001bdd4:	a009                	j	8001bdd6 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h29f0c45ca59c2dc8E+0x90>
    8001bdd6:	6522                	ld	a0,8(sp)
    8001bdd8:	00000097          	auipc	ra,0x0
    8001bddc:	b10080e7          	jalr	-1264(ra) # 8001b8e8 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17h15afec5304658230E>
    8001bde0:	e02a                	sd	a0,0(sp)
    8001bde2:	a009                	j	8001bde4 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h29f0c45ca59c2dc8E+0x9e>
    8001bde4:	6502                	ld	a0,0(sp)
    8001bde6:	e0aa                	sd	a0,64(sp)
    }
    8001bde8:	a009                	j	8001bdea <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h29f0c45ca59c2dc8E+0xa4>
    8001bdea:	6506                	ld	a0,64(sp)
    8001bdec:	60aa                	ld	ra,136(sp)
    8001bdee:	6149                	addi	sp,sp,144
    8001bdf0:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h32b802f331a4867eE:

000000008001bdf2 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h32b802f331a4867eE>:
    pub fn try_new_zeroed_in(alloc: A) -> Result<Box<mem::MaybeUninit<T>, A>, AllocError> {
    8001bdf2:	7175                	addi	sp,sp,-144
        let layout = Layout::new::<mem::MaybeUninit<T>>();
    8001bdf4:	e506                	sd	ra,136(sp)
    8001bdf6:	fffec097          	auipc	ra,0xfffec
    8001bdfa:	78e080e7          	jalr	1934(ra) # 80008584 <_ZN4core5alloc6layout6Layout3new17h728acb0ef5b915afE>
    8001bdfe:	862a                	mv	a2,a0
    8001be00:	f432                	sd	a2,40(sp)
    8001be02:	862e                	mv	a2,a1
    8001be04:	f832                	sd	a2,48(sp)
    8001be06:	f0aa                	sd	a0,96(sp)
    8001be08:	f4ae                	sd	a1,104(sp)
    8001be0a:	a009                	j	8001be0c <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h32b802f331a4867eE+0x1a>
        let ptr = alloc.allocate_zeroed(layout)?.cast();
    8001be0c:	7642                	ld	a2,48(sp)
    8001be0e:	75a2                	ld	a1,40(sp)
    8001be10:	1828                	addi	a0,sp,56
    8001be12:	ffff0097          	auipc	ra,0xffff0
    8001be16:	4b4080e7          	jalr	1204(ra) # 8000c2c6 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$15allocate_zeroed17h62d497141254e70dE>
    8001be1a:	ec2a                	sd	a0,24(sp)
    8001be1c:	f02e                	sd	a1,32(sp)
    8001be1e:	a009                	j	8001be20 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h32b802f331a4867eE+0x2e>
    8001be20:	7582                	ld	a1,32(sp)
    8001be22:	6562                	ld	a0,24(sp)
    8001be24:	ffff1097          	auipc	ra,0xffff1
    8001be28:	36e080e7          	jalr	878(ra) # 8000d192 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h1c9f3c35158f4b17E>
    8001be2c:	e4aa                	sd	a0,72(sp)
    8001be2e:	e8ae                	sd	a1,80(sp)
    8001be30:	a009                	j	8001be32 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h32b802f331a4867eE+0x40>
    8001be32:	6526                	ld	a0,72(sp)
    8001be34:	00153593          	seqz	a1,a0
    8001be38:	4581                	li	a1,0
    8001be3a:	00b51463          	bne	a0,a1,8001be42 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h32b802f331a4867eE+0x50>
    8001be3e:	a009                	j	8001be40 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h32b802f331a4867eE+0x4e>
    8001be40:	a831                	j	8001be5c <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h32b802f331a4867eE+0x6a>
    8001be42:	6526                	ld	a0,72(sp)
    8001be44:	65c6                	ld	a1,80(sp)
    8001be46:	f8aa                	sd	a0,112(sp)
    8001be48:	fcae                	sd	a1,120(sp)
    8001be4a:	ffff3097          	auipc	ra,0xffff3
    8001be4e:	65c080e7          	jalr	1628(ra) # 8000f4a6 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17hf78234e23d9835f1E>
    8001be52:	85aa                	mv	a1,a0
    8001be54:	e82e                	sd	a1,16(sp)
    8001be56:	e12a                	sd	a0,128(sp)
    8001be58:	a831                	j	8001be74 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h32b802f331a4867eE+0x82>
    8001be5a:	0000                	unimp
    8001be5c:	ffff1097          	auipc	ra,0xffff1
    8001be60:	cde080e7          	jalr	-802(ra) # 8000cb3a <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h37d2ccc52635f8a7E>
    8001be64:	a009                	j	8001be66 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h32b802f331a4867eE+0x74>
    8001be66:	ffff1097          	auipc	ra,0xffff1
    8001be6a:	2b2080e7          	jalr	690(ra) # 8000d118 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h849eab7baac337bbE>
    8001be6e:	e0aa                	sd	a0,64(sp)
    8001be70:	a009                	j	8001be72 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h32b802f331a4867eE+0x80>
    }
    8001be72:	a015                	j	8001be96 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h32b802f331a4867eE+0xa4>
        unsafe { Ok(Box::from_raw_in(ptr.as_ptr(), alloc)) }
    8001be74:	6542                	ld	a0,16(sp)
    8001be76:	ffff3097          	auipc	ra,0xffff3
    8001be7a:	6b0080e7          	jalr	1712(ra) # 8000f526 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17habcb33ad0b4dc302E>
    8001be7e:	e42a                	sd	a0,8(sp)
    8001be80:	a009                	j	8001be82 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h32b802f331a4867eE+0x90>
    8001be82:	6522                	ld	a0,8(sp)
    8001be84:	00000097          	auipc	ra,0x0
    8001be88:	a80080e7          	jalr	-1408(ra) # 8001b904 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17h187980a64cbbe532E>
    8001be8c:	e02a                	sd	a0,0(sp)
    8001be8e:	a009                	j	8001be90 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h32b802f331a4867eE+0x9e>
    8001be90:	6502                	ld	a0,0(sp)
    8001be92:	e0aa                	sd	a0,64(sp)
    }
    8001be94:	a009                	j	8001be96 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h32b802f331a4867eE+0xa4>
    8001be96:	6506                	ld	a0,64(sp)
    8001be98:	60aa                	ld	ra,136(sp)
    8001be9a:	6149                	addi	sp,sp,144
    8001be9c:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h90782e32d4ec13edE:

000000008001be9e <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h90782e32d4ec13edE>:
    pub fn try_new_zeroed_in(alloc: A) -> Result<Box<mem::MaybeUninit<T>, A>, AllocError> {
    8001be9e:	7175                	addi	sp,sp,-144
        let layout = Layout::new::<mem::MaybeUninit<T>>();
    8001bea0:	e506                	sd	ra,136(sp)
    8001bea2:	fffec097          	auipc	ra,0xfffec
    8001bea6:	714080e7          	jalr	1812(ra) # 800085b6 <_ZN4core5alloc6layout6Layout3new17h9329aa50601ba1ffE>
    8001beaa:	862a                	mv	a2,a0
    8001beac:	f432                	sd	a2,40(sp)
    8001beae:	862e                	mv	a2,a1
    8001beb0:	f832                	sd	a2,48(sp)
    8001beb2:	f0aa                	sd	a0,96(sp)
    8001beb4:	f4ae                	sd	a1,104(sp)
    8001beb6:	a009                	j	8001beb8 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h90782e32d4ec13edE+0x1a>
        let ptr = alloc.allocate_zeroed(layout)?.cast();
    8001beb8:	7642                	ld	a2,48(sp)
    8001beba:	75a2                	ld	a1,40(sp)
    8001bebc:	1828                	addi	a0,sp,56
    8001bebe:	ffff0097          	auipc	ra,0xffff0
    8001bec2:	408080e7          	jalr	1032(ra) # 8000c2c6 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$15allocate_zeroed17h62d497141254e70dE>
    8001bec6:	ec2a                	sd	a0,24(sp)
    8001bec8:	f02e                	sd	a1,32(sp)
    8001beca:	a009                	j	8001becc <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h90782e32d4ec13edE+0x2e>
    8001becc:	7582                	ld	a1,32(sp)
    8001bece:	6562                	ld	a0,24(sp)
    8001bed0:	ffff1097          	auipc	ra,0xffff1
    8001bed4:	2c2080e7          	jalr	706(ra) # 8000d192 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h1c9f3c35158f4b17E>
    8001bed8:	e4aa                	sd	a0,72(sp)
    8001beda:	e8ae                	sd	a1,80(sp)
    8001bedc:	a009                	j	8001bede <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h90782e32d4ec13edE+0x40>
    8001bede:	6526                	ld	a0,72(sp)
    8001bee0:	00153593          	seqz	a1,a0
    8001bee4:	4581                	li	a1,0
    8001bee6:	00b51463          	bne	a0,a1,8001beee <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h90782e32d4ec13edE+0x50>
    8001beea:	a009                	j	8001beec <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h90782e32d4ec13edE+0x4e>
    8001beec:	a831                	j	8001bf08 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h90782e32d4ec13edE+0x6a>
    8001beee:	6526                	ld	a0,72(sp)
    8001bef0:	65c6                	ld	a1,80(sp)
    8001bef2:	f8aa                	sd	a0,112(sp)
    8001bef4:	fcae                	sd	a1,120(sp)
    8001bef6:	ffff3097          	auipc	ra,0xffff3
    8001befa:	4b6080e7          	jalr	1206(ra) # 8000f3ac <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h280b1a52f32358efE>
    8001befe:	85aa                	mv	a1,a0
    8001bf00:	e82e                	sd	a1,16(sp)
    8001bf02:	e12a                	sd	a0,128(sp)
    8001bf04:	a831                	j	8001bf20 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h90782e32d4ec13edE+0x82>
    8001bf06:	0000                	unimp
    8001bf08:	ffff1097          	auipc	ra,0xffff1
    8001bf0c:	c32080e7          	jalr	-974(ra) # 8000cb3a <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h37d2ccc52635f8a7E>
    8001bf10:	a009                	j	8001bf12 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h90782e32d4ec13edE+0x74>
    8001bf12:	ffff1097          	auipc	ra,0xffff1
    8001bf16:	190080e7          	jalr	400(ra) # 8000d0a2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h2a54492b2826375dE>
    8001bf1a:	e0aa                	sd	a0,64(sp)
    8001bf1c:	a009                	j	8001bf1e <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h90782e32d4ec13edE+0x80>
    }
    8001bf1e:	a015                	j	8001bf42 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h90782e32d4ec13edE+0xa4>
        unsafe { Ok(Box::from_raw_in(ptr.as_ptr(), alloc)) }
    8001bf20:	6542                	ld	a0,16(sp)
    8001bf22:	ffff3097          	auipc	ra,0xffff3
    8001bf26:	5d2080e7          	jalr	1490(ra) # 8000f4f4 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h593c20a0c1123d02E>
    8001bf2a:	e42a                	sd	a0,8(sp)
    8001bf2c:	a009                	j	8001bf2e <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h90782e32d4ec13edE+0x90>
    8001bf2e:	6522                	ld	a0,8(sp)
    8001bf30:	00000097          	auipc	ra,0x0
    8001bf34:	9f0080e7          	jalr	-1552(ra) # 8001b920 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17h468e1ef7cafa8023E>
    8001bf38:	e02a                	sd	a0,0(sp)
    8001bf3a:	a009                	j	8001bf3c <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h90782e32d4ec13edE+0x9e>
    8001bf3c:	6502                	ld	a0,0(sp)
    8001bf3e:	e0aa                	sd	a0,64(sp)
    }
    8001bf40:	a009                	j	8001bf42 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h90782e32d4ec13edE+0xa4>
    8001bf42:	6506                	ld	a0,64(sp)
    8001bf44:	60aa                	ld	ra,136(sp)
    8001bf46:	6149                	addi	sp,sp,144
    8001bf48:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h9571c749e8c8e6e8E:

000000008001bf4a <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h9571c749e8c8e6e8E>:
    pub fn try_new_zeroed_in(alloc: A) -> Result<Box<mem::MaybeUninit<T>, A>, AllocError> {
    8001bf4a:	7175                	addi	sp,sp,-144
        let layout = Layout::new::<mem::MaybeUninit<T>>();
    8001bf4c:	e506                	sd	ra,136(sp)
    8001bf4e:	fffec097          	auipc	ra,0xfffec
    8001bf52:	69a080e7          	jalr	1690(ra) # 800085e8 <_ZN4core5alloc6layout6Layout3new17hfb4102c77959cfa1E>
    8001bf56:	862a                	mv	a2,a0
    8001bf58:	f432                	sd	a2,40(sp)
    8001bf5a:	862e                	mv	a2,a1
    8001bf5c:	f832                	sd	a2,48(sp)
    8001bf5e:	f0aa                	sd	a0,96(sp)
    8001bf60:	f4ae                	sd	a1,104(sp)
    8001bf62:	a009                	j	8001bf64 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h9571c749e8c8e6e8E+0x1a>
        let ptr = alloc.allocate_zeroed(layout)?.cast();
    8001bf64:	7642                	ld	a2,48(sp)
    8001bf66:	75a2                	ld	a1,40(sp)
    8001bf68:	1828                	addi	a0,sp,56
    8001bf6a:	ffff0097          	auipc	ra,0xffff0
    8001bf6e:	35c080e7          	jalr	860(ra) # 8000c2c6 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$15allocate_zeroed17h62d497141254e70dE>
    8001bf72:	ec2a                	sd	a0,24(sp)
    8001bf74:	f02e                	sd	a1,32(sp)
    8001bf76:	a009                	j	8001bf78 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h9571c749e8c8e6e8E+0x2e>
    8001bf78:	7582                	ld	a1,32(sp)
    8001bf7a:	6562                	ld	a0,24(sp)
    8001bf7c:	ffff1097          	auipc	ra,0xffff1
    8001bf80:	216080e7          	jalr	534(ra) # 8000d192 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h1c9f3c35158f4b17E>
    8001bf84:	e4aa                	sd	a0,72(sp)
    8001bf86:	e8ae                	sd	a1,80(sp)
    8001bf88:	a009                	j	8001bf8a <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h9571c749e8c8e6e8E+0x40>
    8001bf8a:	6526                	ld	a0,72(sp)
    8001bf8c:	00153593          	seqz	a1,a0
    8001bf90:	4581                	li	a1,0
    8001bf92:	00b51463          	bne	a0,a1,8001bf9a <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h9571c749e8c8e6e8E+0x50>
    8001bf96:	a009                	j	8001bf98 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h9571c749e8c8e6e8E+0x4e>
    8001bf98:	a831                	j	8001bfb4 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h9571c749e8c8e6e8E+0x6a>
    8001bf9a:	6526                	ld	a0,72(sp)
    8001bf9c:	65c6                	ld	a1,80(sp)
    8001bf9e:	f8aa                	sd	a0,112(sp)
    8001bfa0:	fcae                	sd	a1,120(sp)
    8001bfa2:	ffff3097          	auipc	ra,0xffff3
    8001bfa6:	45e080e7          	jalr	1118(ra) # 8000f400 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h535f2787d46a2a35E>
    8001bfaa:	85aa                	mv	a1,a0
    8001bfac:	e82e                	sd	a1,16(sp)
    8001bfae:	e12a                	sd	a0,128(sp)
    8001bfb0:	a831                	j	8001bfcc <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h9571c749e8c8e6e8E+0x82>
    8001bfb2:	0000                	unimp
    8001bfb4:	ffff1097          	auipc	ra,0xffff1
    8001bfb8:	b86080e7          	jalr	-1146(ra) # 8000cb3a <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h37d2ccc52635f8a7E>
    8001bfbc:	a009                	j	8001bfbe <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h9571c749e8c8e6e8E+0x74>
    8001bfbe:	ffff1097          	auipc	ra,0xffff1
    8001bfc2:	1aa080e7          	jalr	426(ra) # 8000d168 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17hfad957fd5ededc3fE>
    8001bfc6:	e0aa                	sd	a0,64(sp)
    8001bfc8:	a009                	j	8001bfca <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h9571c749e8c8e6e8E+0x80>
    }
    8001bfca:	a015                	j	8001bfee <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h9571c749e8c8e6e8E+0xa4>
        unsafe { Ok(Box::from_raw_in(ptr.as_ptr(), alloc)) }
    8001bfcc:	6542                	ld	a0,16(sp)
    8001bfce:	ffff3097          	auipc	ra,0xffff3
    8001bfd2:	570080e7          	jalr	1392(ra) # 8000f53e <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17hd337d3c0c1677ef4E>
    8001bfd6:	e42a                	sd	a0,8(sp)
    8001bfd8:	a009                	j	8001bfda <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h9571c749e8c8e6e8E+0x90>
    8001bfda:	6522                	ld	a0,8(sp)
    8001bfdc:	00000097          	auipc	ra,0x0
    8001bfe0:	960080e7          	jalr	-1696(ra) # 8001b93c <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17h49971518b172ecd3E>
    8001bfe4:	e02a                	sd	a0,0(sp)
    8001bfe6:	a009                	j	8001bfe8 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h9571c749e8c8e6e8E+0x9e>
    8001bfe8:	6502                	ld	a0,0(sp)
    8001bfea:	e0aa                	sd	a0,64(sp)
    }
    8001bfec:	a009                	j	8001bfee <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h9571c749e8c8e6e8E+0xa4>
    8001bfee:	6506                	ld	a0,64(sp)
    8001bff0:	60aa                	ld	ra,136(sp)
    8001bff2:	6149                	addi	sp,sp,144
    8001bff4:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17hea8ededefef3bf78E:

000000008001bff6 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17hea8ededefef3bf78E>:
    pub fn try_new_zeroed_in(alloc: A) -> Result<Box<mem::MaybeUninit<T>, A>, AllocError> {
    8001bff6:	7175                	addi	sp,sp,-144
        let layout = Layout::new::<mem::MaybeUninit<T>>();
    8001bff8:	e506                	sd	ra,136(sp)
    8001bffa:	fffec097          	auipc	ra,0xfffec
    8001bffe:	4f4080e7          	jalr	1268(ra) # 800084ee <_ZN4core5alloc6layout6Layout3new17h00440f750a953d15E>
    8001c002:	862a                	mv	a2,a0
    8001c004:	f432                	sd	a2,40(sp)
    8001c006:	862e                	mv	a2,a1
    8001c008:	f832                	sd	a2,48(sp)
    8001c00a:	f0aa                	sd	a0,96(sp)
    8001c00c:	f4ae                	sd	a1,104(sp)
    8001c00e:	a009                	j	8001c010 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17hea8ededefef3bf78E+0x1a>
        let ptr = alloc.allocate_zeroed(layout)?.cast();
    8001c010:	7642                	ld	a2,48(sp)
    8001c012:	75a2                	ld	a1,40(sp)
    8001c014:	1828                	addi	a0,sp,56
    8001c016:	ffff0097          	auipc	ra,0xffff0
    8001c01a:	2b0080e7          	jalr	688(ra) # 8000c2c6 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$15allocate_zeroed17h62d497141254e70dE>
    8001c01e:	ec2a                	sd	a0,24(sp)
    8001c020:	f02e                	sd	a1,32(sp)
    8001c022:	a009                	j	8001c024 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17hea8ededefef3bf78E+0x2e>
    8001c024:	7582                	ld	a1,32(sp)
    8001c026:	6562                	ld	a0,24(sp)
    8001c028:	ffff1097          	auipc	ra,0xffff1
    8001c02c:	16a080e7          	jalr	362(ra) # 8000d192 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h1c9f3c35158f4b17E>
    8001c030:	e4aa                	sd	a0,72(sp)
    8001c032:	e8ae                	sd	a1,80(sp)
    8001c034:	a009                	j	8001c036 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17hea8ededefef3bf78E+0x40>
    8001c036:	6526                	ld	a0,72(sp)
    8001c038:	00153593          	seqz	a1,a0
    8001c03c:	4581                	li	a1,0
    8001c03e:	00b51463          	bne	a0,a1,8001c046 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17hea8ededefef3bf78E+0x50>
    8001c042:	a009                	j	8001c044 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17hea8ededefef3bf78E+0x4e>
    8001c044:	a831                	j	8001c060 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17hea8ededefef3bf78E+0x6a>
    8001c046:	6526                	ld	a0,72(sp)
    8001c048:	65c6                	ld	a1,80(sp)
    8001c04a:	f8aa                	sd	a0,112(sp)
    8001c04c:	fcae                	sd	a1,120(sp)
    8001c04e:	ffff3097          	auipc	ra,0xffff3
    8001c052:	388080e7          	jalr	904(ra) # 8000f3d6 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h4354690cb24a4e56E>
    8001c056:	85aa                	mv	a1,a0
    8001c058:	e82e                	sd	a1,16(sp)
    8001c05a:	e12a                	sd	a0,128(sp)
    8001c05c:	a831                	j	8001c078 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17hea8ededefef3bf78E+0x82>
    8001c05e:	0000                	unimp
    8001c060:	ffff1097          	auipc	ra,0xffff1
    8001c064:	ada080e7          	jalr	-1318(ra) # 8000cb3a <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h37d2ccc52635f8a7E>
    8001c068:	a009                	j	8001c06a <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17hea8ededefef3bf78E+0x74>
    8001c06a:	ffff1097          	auipc	ra,0xffff1
    8001c06e:	0ea080e7          	jalr	234(ra) # 8000d154 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17hc42702708db6cea4E>
    8001c072:	e0aa                	sd	a0,64(sp)
    8001c074:	a009                	j	8001c076 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17hea8ededefef3bf78E+0x80>
    }
    8001c076:	a015                	j	8001c09a <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17hea8ededefef3bf78E+0xa4>
        unsafe { Ok(Box::from_raw_in(ptr.as_ptr(), alloc)) }
    8001c078:	6542                	ld	a0,16(sp)
    8001c07a:	ffff3097          	auipc	ra,0xffff3
    8001c07e:	4b4080e7          	jalr	1204(ra) # 8000f52e <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haf282fdd0407a8a4E>
    8001c082:	e42a                	sd	a0,8(sp)
    8001c084:	a009                	j	8001c086 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17hea8ededefef3bf78E+0x90>
    8001c086:	6522                	ld	a0,8(sp)
    8001c088:	00000097          	auipc	ra,0x0
    8001c08c:	8ec080e7          	jalr	-1812(ra) # 8001b974 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17h91226147761dfc23E>
    8001c090:	e02a                	sd	a0,0(sp)
    8001c092:	a009                	j	8001c094 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17hea8ededefef3bf78E+0x9e>
    8001c094:	6502                	ld	a0,0(sp)
    8001c096:	e0aa                	sd	a0,64(sp)
    }
    8001c098:	a009                	j	8001c09a <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17hea8ededefef3bf78E+0xa4>
    8001c09a:	6506                	ld	a0,64(sp)
    8001c09c:	60aa                	ld	ra,136(sp)
    8001c09e:	6149                	addi	sp,sp,144
    8001c0a0:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h01d9da470f10fcdcE:

000000008001c0a2 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h01d9da470f10fcdcE>:
    pub fn into_raw_with_allocator(b: Self) -> (*mut T, A) {
    8001c0a2:	7139                	addi	sp,sp,-64
    8001c0a4:	fc06                	sd	ra,56(sp)
    8001c0a6:	f02a                	sd	a0,32(sp)
        let (leaked, alloc) = Box::into_unique(b);
    8001c0a8:	00000097          	auipc	ra,0x0
    8001c0ac:	9c8080e7          	jalr	-1592(ra) # 8001ba70 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17h80646c1775168f03E>
    8001c0b0:	e82a                	sd	a0,16(sp)
    8001c0b2:	a009                	j	8001c0b4 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h01d9da470f10fcdcE+0x12>
    8001c0b4:	6542                	ld	a0,16(sp)
    8001c0b6:	f82a                	sd	a0,48(sp)
        (leaked.as_ptr(), alloc)
    8001c0b8:	ffff0097          	auipc	ra,0xffff0
    8001c0bc:	b3e080e7          	jalr	-1218(ra) # 8000bbf6 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h9702a6a3d13a07b5E>
    8001c0c0:	e42a                	sd	a0,8(sp)
    8001c0c2:	a009                	j	8001c0c4 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h01d9da470f10fcdcE+0x22>
    8001c0c4:	6522                	ld	a0,8(sp)
    8001c0c6:	ec2a                	sd	a0,24(sp)
    }
    8001c0c8:	70e2                	ld	ra,56(sp)
    8001c0ca:	6121                	addi	sp,sp,64
    8001c0cc:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h255317eb94c396a6E:

000000008001c0ce <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h255317eb94c396a6E>:
    pub fn into_raw_with_allocator(b: Self) -> (*mut T, A) {
    8001c0ce:	7139                	addi	sp,sp,-64
    8001c0d0:	fc06                	sd	ra,56(sp)
    8001c0d2:	f02a                	sd	a0,32(sp)
        let (leaked, alloc) = Box::into_unique(b);
    8001c0d4:	00000097          	auipc	ra,0x0
    8001c0d8:	a7c080e7          	jalr	-1412(ra) # 8001bb50 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17hd08884b913096851E>
    8001c0dc:	e82a                	sd	a0,16(sp)
    8001c0de:	a009                	j	8001c0e0 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h255317eb94c396a6E+0x12>
    8001c0e0:	6542                	ld	a0,16(sp)
    8001c0e2:	f82a                	sd	a0,48(sp)
        (leaked.as_ptr(), alloc)
    8001c0e4:	ffff0097          	auipc	ra,0xffff0
    8001c0e8:	b32080e7          	jalr	-1230(ra) # 8000bc16 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17hb57b3bcaa3bdd3f9E>
    8001c0ec:	e42a                	sd	a0,8(sp)
    8001c0ee:	a009                	j	8001c0f0 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h255317eb94c396a6E+0x22>
    8001c0f0:	6522                	ld	a0,8(sp)
    8001c0f2:	ec2a                	sd	a0,24(sp)
    }
    8001c0f4:	70e2                	ld	ra,56(sp)
    8001c0f6:	6121                	addi	sp,sp,64
    8001c0f8:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h3a774aee57a2b865E:

000000008001c0fa <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h3a774aee57a2b865E>:
    pub fn into_raw_with_allocator(b: Self) -> (*mut T, A) {
    8001c0fa:	7139                	addi	sp,sp,-64
    8001c0fc:	fc06                	sd	ra,56(sp)
    8001c0fe:	f02a                	sd	a0,32(sp)
        let (leaked, alloc) = Box::into_unique(b);
    8001c100:	00000097          	auipc	ra,0x0
    8001c104:	900080e7          	jalr	-1792(ra) # 8001ba00 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17h48e22d69c2444c2aE>
    8001c108:	e82a                	sd	a0,16(sp)
    8001c10a:	a009                	j	8001c10c <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h3a774aee57a2b865E+0x12>
    8001c10c:	6542                	ld	a0,16(sp)
    8001c10e:	f82a                	sd	a0,48(sp)
        (leaked.as_ptr(), alloc)
    8001c110:	ffff0097          	auipc	ra,0xffff0
    8001c114:	ac6080e7          	jalr	-1338(ra) # 8000bbd6 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h3d727d33388c5225E>
    8001c118:	e42a                	sd	a0,8(sp)
    8001c11a:	a009                	j	8001c11c <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h3a774aee57a2b865E+0x22>
    8001c11c:	6522                	ld	a0,8(sp)
    8001c11e:	ec2a                	sd	a0,24(sp)
    }
    8001c120:	70e2                	ld	ra,56(sp)
    8001c122:	6121                	addi	sp,sp,64
    8001c124:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h3e9247aef62521b2E:

000000008001c126 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h3e9247aef62521b2E>:
    pub fn into_raw_with_allocator(b: Self) -> (*mut T, A) {
    8001c126:	7139                	addi	sp,sp,-64
    8001c128:	fc06                	sd	ra,56(sp)
    8001c12a:	f02a                	sd	a0,32(sp)
        let (leaked, alloc) = Box::into_unique(b);
    8001c12c:	00000097          	auipc	ra,0x0
    8001c130:	9b4080e7          	jalr	-1612(ra) # 8001bae0 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17h9813befe69e55ae1E>
    8001c134:	e82a                	sd	a0,16(sp)
    8001c136:	a009                	j	8001c138 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h3e9247aef62521b2E+0x12>
    8001c138:	6542                	ld	a0,16(sp)
    8001c13a:	f82a                	sd	a0,48(sp)
        (leaked.as_ptr(), alloc)
    8001c13c:	ffff0097          	auipc	ra,0xffff0
    8001c140:	aea080e7          	jalr	-1302(ra) # 8000bc26 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17hd1144efb36e37b5fE>
    8001c144:	e42a                	sd	a0,8(sp)
    8001c146:	a009                	j	8001c148 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h3e9247aef62521b2E+0x22>
    8001c148:	6522                	ld	a0,8(sp)
    8001c14a:	ec2a                	sd	a0,24(sp)
    }
    8001c14c:	70e2                	ld	ra,56(sp)
    8001c14e:	6121                	addi	sp,sp,64
    8001c150:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h3eebe938f1ba1056E:

000000008001c152 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h3eebe938f1ba1056E>:
    pub fn into_raw_with_allocator(b: Self) -> (*mut T, A) {
    8001c152:	7139                	addi	sp,sp,-64
    8001c154:	fc06                	sd	ra,56(sp)
    8001c156:	f02a                	sd	a0,32(sp)
        let (leaked, alloc) = Box::into_unique(b);
    8001c158:	00000097          	auipc	ra,0x0
    8001c15c:	9c0080e7          	jalr	-1600(ra) # 8001bb18 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17hb4dd27b4659222a3E>
    8001c160:	e82a                	sd	a0,16(sp)
    8001c162:	a009                	j	8001c164 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h3eebe938f1ba1056E+0x12>
    8001c164:	6542                	ld	a0,16(sp)
    8001c166:	f82a                	sd	a0,48(sp)
        (leaked.as_ptr(), alloc)
    8001c168:	ffff0097          	auipc	ra,0xffff0
    8001c16c:	aa6080e7          	jalr	-1370(ra) # 8000bc0e <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17hb43ff2a43bd415faE>
    8001c170:	e42a                	sd	a0,8(sp)
    8001c172:	a009                	j	8001c174 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h3eebe938f1ba1056E+0x22>
    8001c174:	6522                	ld	a0,8(sp)
    8001c176:	ec2a                	sd	a0,24(sp)
    }
    8001c178:	70e2                	ld	ra,56(sp)
    8001c17a:	6121                	addi	sp,sp,64
    8001c17c:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h56417e202ce6f498E:

000000008001c17e <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h56417e202ce6f498E>:
    pub fn into_raw_with_allocator(b: Self) -> (*mut T, A) {
    8001c17e:	7139                	addi	sp,sp,-64
    8001c180:	fc06                	sd	ra,56(sp)
    8001c182:	f02a                	sd	a0,32(sp)
        let (leaked, alloc) = Box::into_unique(b);
    8001c184:	00000097          	auipc	ra,0x0
    8001c188:	a04080e7          	jalr	-1532(ra) # 8001bb88 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17hd4115af6111f1ecaE>
    8001c18c:	e82a                	sd	a0,16(sp)
    8001c18e:	a009                	j	8001c190 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h56417e202ce6f498E+0x12>
    8001c190:	6542                	ld	a0,16(sp)
    8001c192:	f82a                	sd	a0,48(sp)
        (leaked.as_ptr(), alloc)
    8001c194:	ffff0097          	auipc	ra,0xffff0
    8001c198:	a9a080e7          	jalr	-1382(ra) # 8000bc2e <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17hf99ed61581dd6ee2E>
    8001c19c:	e42a                	sd	a0,8(sp)
    8001c19e:	a009                	j	8001c1a0 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h56417e202ce6f498E+0x22>
    8001c1a0:	6522                	ld	a0,8(sp)
    8001c1a2:	ec2a                	sd	a0,24(sp)
    }
    8001c1a4:	70e2                	ld	ra,56(sp)
    8001c1a6:	6121                	addi	sp,sp,64
    8001c1a8:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h8cff8d68311da958E:

000000008001c1aa <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h8cff8d68311da958E>:
    pub fn into_raw_with_allocator(b: Self) -> (*mut T, A) {
    8001c1aa:	7139                	addi	sp,sp,-64
    8001c1ac:	fc06                	sd	ra,56(sp)
    8001c1ae:	f02a                	sd	a0,32(sp)
        let (leaked, alloc) = Box::into_unique(b);
    8001c1b0:	00000097          	auipc	ra,0x0
    8001c1b4:	888080e7          	jalr	-1912(ra) # 8001ba38 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17h77bf5089d70199a1E>
    8001c1b8:	e82a                	sd	a0,16(sp)
    8001c1ba:	a009                	j	8001c1bc <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h8cff8d68311da958E+0x12>
    8001c1bc:	6542                	ld	a0,16(sp)
    8001c1be:	f82a                	sd	a0,48(sp)
        (leaked.as_ptr(), alloc)
    8001c1c0:	ffff0097          	auipc	ra,0xffff0
    8001c1c4:	a1e080e7          	jalr	-1506(ra) # 8000bbde <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h43259d2d16140eb2E>
    8001c1c8:	e42a                	sd	a0,8(sp)
    8001c1ca:	a009                	j	8001c1cc <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h8cff8d68311da958E+0x22>
    8001c1cc:	6522                	ld	a0,8(sp)
    8001c1ce:	ec2a                	sd	a0,24(sp)
    }
    8001c1d0:	70e2                	ld	ra,56(sp)
    8001c1d2:	6121                	addi	sp,sp,64
    8001c1d4:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17he0e1487eb5c18a3bE:

000000008001c1d6 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17he0e1487eb5c18a3bE>:
    pub fn into_raw_with_allocator(b: Self) -> (*mut T, A) {
    8001c1d6:	7139                	addi	sp,sp,-64
    8001c1d8:	fc06                	sd	ra,56(sp)
    8001c1da:	f02a                	sd	a0,32(sp)
        let (leaked, alloc) = Box::into_unique(b);
    8001c1dc:	00000097          	auipc	ra,0x0
    8001c1e0:	8cc080e7          	jalr	-1844(ra) # 8001baa8 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17h93f491d0366dd1a9E>
    8001c1e4:	e82a                	sd	a0,16(sp)
    8001c1e6:	a009                	j	8001c1e8 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17he0e1487eb5c18a3bE+0x12>
    8001c1e8:	6542                	ld	a0,16(sp)
    8001c1ea:	f82a                	sd	a0,48(sp)
        (leaked.as_ptr(), alloc)
    8001c1ec:	ffff0097          	auipc	ra,0xffff0
    8001c1f0:	a02080e7          	jalr	-1534(ra) # 8000bbee <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h7e93959e8a601ed4E>
    8001c1f4:	e42a                	sd	a0,8(sp)
    8001c1f6:	a009                	j	8001c1f8 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17he0e1487eb5c18a3bE+0x22>
    8001c1f8:	6522                	ld	a0,8(sp)
    8001c1fa:	ec2a                	sd	a0,24(sp)
    }
    8001c1fc:	70e2                	ld	ra,56(sp)
    8001c1fe:	6121                	addi	sp,sp,64
    8001c200:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h3b2c40161bf6c180E:

000000008001c202 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h3b2c40161bf6c180E>:
    /// static_ref[0] = 4;
    /// assert_eq!(*static_ref, [4, 2, 3]);
    /// ```
    #[stable(feature = "box_leak", since = "1.26.0")]
    #[inline]
    pub fn leak<'a>(b: Self) -> &'a mut T
    8001c202:	7139                	addi	sp,sp,-64
    8001c204:	fc06                	sd	ra,56(sp)
    8001c206:	ec2a                	sd	a0,24(sp)
    8001c208:	f42a                	sd	a0,40(sp)
        ManuallyDrop { value }
    8001c20a:	f02a                	sd	a0,32(sp)
    where
        A: 'a,
    {
        unsafe { &mut *mem::ManuallyDrop::new(b).0.as_ptr() }
    8001c20c:	e82a                	sd	a0,16(sp)
    8001c20e:	a009                	j	8001c210 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h3b2c40161bf6c180E+0xe>
    8001c210:	0808                	addi	a0,sp,16
    8001c212:	e42a                	sd	a0,8(sp)
    8001c214:	f82a                	sd	a0,48(sp)
    8001c216:	a009                	j	8001c218 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h3b2c40161bf6c180E+0x16>
    8001c218:	6522                	ld	a0,8(sp)
    8001c21a:	6108                	ld	a0,0(a0)
    8001c21c:	ffff0097          	auipc	ra,0xffff0
    8001c220:	9d2080e7          	jalr	-1582(ra) # 8000bbee <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h7e93959e8a601ed4E>
    8001c224:	e02a                	sd	a0,0(sp)
    8001c226:	a009                	j	8001c228 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h3b2c40161bf6c180E+0x26>
    }
    8001c228:	6502                	ld	a0,0(sp)
    8001c22a:	70e2                	ld	ra,56(sp)
    8001c22c:	6121                	addi	sp,sp,64
    8001c22e:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h4b4e76265837c5ceE:

000000008001c230 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h4b4e76265837c5ceE>:
    pub fn leak<'a>(b: Self) -> &'a mut T
    8001c230:	7139                	addi	sp,sp,-64
    8001c232:	fc06                	sd	ra,56(sp)
    8001c234:	ec2a                	sd	a0,24(sp)
    8001c236:	f42a                	sd	a0,40(sp)
    8001c238:	f02a                	sd	a0,32(sp)
        unsafe { &mut *mem::ManuallyDrop::new(b).0.as_ptr() }
    8001c23a:	e82a                	sd	a0,16(sp)
    8001c23c:	a009                	j	8001c23e <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h4b4e76265837c5ceE+0xe>
    8001c23e:	0808                	addi	a0,sp,16
    8001c240:	e42a                	sd	a0,8(sp)
    8001c242:	f82a                	sd	a0,48(sp)
    8001c244:	a009                	j	8001c246 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h4b4e76265837c5ceE+0x16>
    8001c246:	6522                	ld	a0,8(sp)
    8001c248:	6108                	ld	a0,0(a0)
    8001c24a:	ffff0097          	auipc	ra,0xffff0
    8001c24e:	9dc080e7          	jalr	-1572(ra) # 8000bc26 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17hd1144efb36e37b5fE>
    8001c252:	e02a                	sd	a0,0(sp)
    8001c254:	a009                	j	8001c256 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h4b4e76265837c5ceE+0x26>
    }
    8001c256:	6502                	ld	a0,0(sp)
    8001c258:	70e2                	ld	ra,56(sp)
    8001c25a:	6121                	addi	sp,sp,64
    8001c25c:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h77f658a9b95a64a2E:

000000008001c25e <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h77f658a9b95a64a2E>:
    pub fn leak<'a>(b: Self) -> &'a mut T
    8001c25e:	7139                	addi	sp,sp,-64
    8001c260:	fc06                	sd	ra,56(sp)
    8001c262:	ec2a                	sd	a0,24(sp)
    8001c264:	f42a                	sd	a0,40(sp)
    8001c266:	f02a                	sd	a0,32(sp)
        unsafe { &mut *mem::ManuallyDrop::new(b).0.as_ptr() }
    8001c268:	e82a                	sd	a0,16(sp)
    8001c26a:	a009                	j	8001c26c <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h77f658a9b95a64a2E+0xe>
    8001c26c:	0808                	addi	a0,sp,16
    8001c26e:	e42a                	sd	a0,8(sp)
    8001c270:	f82a                	sd	a0,48(sp)
    8001c272:	a009                	j	8001c274 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h77f658a9b95a64a2E+0x16>
    8001c274:	6522                	ld	a0,8(sp)
    8001c276:	6108                	ld	a0,0(a0)
    8001c278:	ffff0097          	auipc	ra,0xffff0
    8001c27c:	95e080e7          	jalr	-1698(ra) # 8000bbd6 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h3d727d33388c5225E>
    8001c280:	e02a                	sd	a0,0(sp)
    8001c282:	a009                	j	8001c284 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h77f658a9b95a64a2E+0x26>
    }
    8001c284:	6502                	ld	a0,0(sp)
    8001c286:	70e2                	ld	ra,56(sp)
    8001c288:	6121                	addi	sp,sp,64
    8001c28a:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h925dcada2cd56bb2E:

000000008001c28c <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h925dcada2cd56bb2E>:
    pub fn leak<'a>(b: Self) -> &'a mut T
    8001c28c:	7139                	addi	sp,sp,-64
    8001c28e:	fc06                	sd	ra,56(sp)
    8001c290:	ec2a                	sd	a0,24(sp)
    8001c292:	f42a                	sd	a0,40(sp)
    8001c294:	f02a                	sd	a0,32(sp)
        unsafe { &mut *mem::ManuallyDrop::new(b).0.as_ptr() }
    8001c296:	e82a                	sd	a0,16(sp)
    8001c298:	a009                	j	8001c29a <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h925dcada2cd56bb2E+0xe>
    8001c29a:	0808                	addi	a0,sp,16
    8001c29c:	e42a                	sd	a0,8(sp)
    8001c29e:	f82a                	sd	a0,48(sp)
    8001c2a0:	a009                	j	8001c2a2 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h925dcada2cd56bb2E+0x16>
    8001c2a2:	6522                	ld	a0,8(sp)
    8001c2a4:	6108                	ld	a0,0(a0)
    8001c2a6:	ffff0097          	auipc	ra,0xffff0
    8001c2aa:	970080e7          	jalr	-1680(ra) # 8000bc16 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17hb57b3bcaa3bdd3f9E>
    8001c2ae:	e02a                	sd	a0,0(sp)
    8001c2b0:	a009                	j	8001c2b2 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h925dcada2cd56bb2E+0x26>
    }
    8001c2b2:	6502                	ld	a0,0(sp)
    8001c2b4:	70e2                	ld	ra,56(sp)
    8001c2b6:	6121                	addi	sp,sp,64
    8001c2b8:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h94cb03dd08e899b7E:

000000008001c2ba <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h94cb03dd08e899b7E>:
    pub fn leak<'a>(b: Self) -> &'a mut T
    8001c2ba:	7139                	addi	sp,sp,-64
    8001c2bc:	fc06                	sd	ra,56(sp)
    8001c2be:	ec2a                	sd	a0,24(sp)
    8001c2c0:	f42a                	sd	a0,40(sp)
    8001c2c2:	f02a                	sd	a0,32(sp)
        unsafe { &mut *mem::ManuallyDrop::new(b).0.as_ptr() }
    8001c2c4:	e82a                	sd	a0,16(sp)
    8001c2c6:	a009                	j	8001c2c8 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h94cb03dd08e899b7E+0xe>
    8001c2c8:	0808                	addi	a0,sp,16
    8001c2ca:	e42a                	sd	a0,8(sp)
    8001c2cc:	f82a                	sd	a0,48(sp)
    8001c2ce:	a009                	j	8001c2d0 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h94cb03dd08e899b7E+0x16>
    8001c2d0:	6522                	ld	a0,8(sp)
    8001c2d2:	6108                	ld	a0,0(a0)
    8001c2d4:	ffff0097          	auipc	ra,0xffff0
    8001c2d8:	922080e7          	jalr	-1758(ra) # 8000bbf6 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h9702a6a3d13a07b5E>
    8001c2dc:	e02a                	sd	a0,0(sp)
    8001c2de:	a009                	j	8001c2e0 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h94cb03dd08e899b7E+0x26>
    }
    8001c2e0:	6502                	ld	a0,0(sp)
    8001c2e2:	70e2                	ld	ra,56(sp)
    8001c2e4:	6121                	addi	sp,sp,64
    8001c2e6:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17ha0a7030531762e6fE:

000000008001c2e8 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17ha0a7030531762e6fE>:
    pub fn leak<'a>(b: Self) -> &'a mut T
    8001c2e8:	7139                	addi	sp,sp,-64
    8001c2ea:	fc06                	sd	ra,56(sp)
    8001c2ec:	ec2a                	sd	a0,24(sp)
    8001c2ee:	f42a                	sd	a0,40(sp)
    8001c2f0:	f02a                	sd	a0,32(sp)
        unsafe { &mut *mem::ManuallyDrop::new(b).0.as_ptr() }
    8001c2f2:	e82a                	sd	a0,16(sp)
    8001c2f4:	a009                	j	8001c2f6 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17ha0a7030531762e6fE+0xe>
    8001c2f6:	0808                	addi	a0,sp,16
    8001c2f8:	e42a                	sd	a0,8(sp)
    8001c2fa:	f82a                	sd	a0,48(sp)
    8001c2fc:	a009                	j	8001c2fe <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17ha0a7030531762e6fE+0x16>
    8001c2fe:	6522                	ld	a0,8(sp)
    8001c300:	6108                	ld	a0,0(a0)
    8001c302:	ffff0097          	auipc	ra,0xffff0
    8001c306:	8e4080e7          	jalr	-1820(ra) # 8000bbe6 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h54727a4650ef71dfE>
    8001c30a:	e02a                	sd	a0,0(sp)
    8001c30c:	a009                	j	8001c30e <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17ha0a7030531762e6fE+0x26>
    }
    8001c30e:	6502                	ld	a0,0(sp)
    8001c310:	70e2                	ld	ra,56(sp)
    8001c312:	6121                	addi	sp,sp,64
    8001c314:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17hb50450963f97575cE:

000000008001c316 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17hb50450963f97575cE>:
    pub fn leak<'a>(b: Self) -> &'a mut T
    8001c316:	7139                	addi	sp,sp,-64
    8001c318:	fc06                	sd	ra,56(sp)
    8001c31a:	ec2a                	sd	a0,24(sp)
    8001c31c:	f42a                	sd	a0,40(sp)
    8001c31e:	f02a                	sd	a0,32(sp)
        unsafe { &mut *mem::ManuallyDrop::new(b).0.as_ptr() }
    8001c320:	e82a                	sd	a0,16(sp)
    8001c322:	a009                	j	8001c324 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17hb50450963f97575cE+0xe>
    8001c324:	0808                	addi	a0,sp,16
    8001c326:	e42a                	sd	a0,8(sp)
    8001c328:	f82a                	sd	a0,48(sp)
    8001c32a:	a009                	j	8001c32c <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17hb50450963f97575cE+0x16>
    8001c32c:	6522                	ld	a0,8(sp)
    8001c32e:	6108                	ld	a0,0(a0)
    8001c330:	ffff0097          	auipc	ra,0xffff0
    8001c334:	8fe080e7          	jalr	-1794(ra) # 8000bc2e <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17hf99ed61581dd6ee2E>
    8001c338:	e02a                	sd	a0,0(sp)
    8001c33a:	a009                	j	8001c33c <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17hb50450963f97575cE+0x26>
    }
    8001c33c:	6502                	ld	a0,0(sp)
    8001c33e:	70e2                	ld	ra,56(sp)
    8001c340:	6121                	addi	sp,sp,64
    8001c342:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17hcf7bcb368f276750E:

000000008001c344 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17hcf7bcb368f276750E>:
    pub fn leak<'a>(b: Self) -> &'a mut T
    8001c344:	7139                	addi	sp,sp,-64
    8001c346:	fc06                	sd	ra,56(sp)
    8001c348:	ec2a                	sd	a0,24(sp)
    8001c34a:	f42a                	sd	a0,40(sp)
    8001c34c:	f02a                	sd	a0,32(sp)
        unsafe { &mut *mem::ManuallyDrop::new(b).0.as_ptr() }
    8001c34e:	e82a                	sd	a0,16(sp)
    8001c350:	a009                	j	8001c352 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17hcf7bcb368f276750E+0xe>
    8001c352:	0808                	addi	a0,sp,16
    8001c354:	e42a                	sd	a0,8(sp)
    8001c356:	f82a                	sd	a0,48(sp)
    8001c358:	a009                	j	8001c35a <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17hcf7bcb368f276750E+0x16>
    8001c35a:	6522                	ld	a0,8(sp)
    8001c35c:	6108                	ld	a0,0(a0)
    8001c35e:	ffff0097          	auipc	ra,0xffff0
    8001c362:	8b0080e7          	jalr	-1872(ra) # 8000bc0e <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17hb43ff2a43bd415faE>
    8001c366:	e02a                	sd	a0,0(sp)
    8001c368:	a009                	j	8001c36a <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17hcf7bcb368f276750E+0x26>
    }
    8001c36a:	6502                	ld	a0,0(sp)
    8001c36c:	70e2                	ld	ra,56(sp)
    8001c36e:	6121                	addi	sp,sp,64
    8001c370:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17he4f1cfe07554e5a5E:

000000008001c372 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17he4f1cfe07554e5a5E>:
    pub fn leak<'a>(b: Self) -> &'a mut T
    8001c372:	7139                	addi	sp,sp,-64
    8001c374:	fc06                	sd	ra,56(sp)
    8001c376:	ec2a                	sd	a0,24(sp)
    8001c378:	f42a                	sd	a0,40(sp)
    8001c37a:	f02a                	sd	a0,32(sp)
        unsafe { &mut *mem::ManuallyDrop::new(b).0.as_ptr() }
    8001c37c:	e82a                	sd	a0,16(sp)
    8001c37e:	a009                	j	8001c380 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17he4f1cfe07554e5a5E+0xe>
    8001c380:	0808                	addi	a0,sp,16
    8001c382:	e42a                	sd	a0,8(sp)
    8001c384:	f82a                	sd	a0,48(sp)
    8001c386:	a009                	j	8001c388 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17he4f1cfe07554e5a5E+0x16>
    8001c388:	6522                	ld	a0,8(sp)
    8001c38a:	6108                	ld	a0,0(a0)
    8001c38c:	ffff0097          	auipc	ra,0xffff0
    8001c390:	852080e7          	jalr	-1966(ra) # 8000bbde <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h43259d2d16140eb2E>
    8001c394:	e02a                	sd	a0,0(sp)
    8001c396:	a009                	j	8001c398 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17he4f1cfe07554e5a5E+0x26>
    }
    8001c398:	6502                	ld	a0,0(sp)
    8001c39a:	70e2                	ld	ra,56(sp)
    8001c39c:	6121                	addi	sp,sp,64
    8001c39e:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$8into_raw17h11a22cb7d9ea1552E:

000000008001c3a0 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$8into_raw17h11a22cb7d9ea1552E>:
    pub fn into_raw(b: Self) -> *mut T {
    8001c3a0:	1101                	addi	sp,sp,-32
    8001c3a2:	ec06                	sd	ra,24(sp)
    8001c3a4:	e82a                	sd	a0,16(sp)
        Self::into_raw_with_allocator(b).0
    8001c3a6:	00000097          	auipc	ra,0x0
    8001c3aa:	dac080e7          	jalr	-596(ra) # 8001c152 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h3eebe938f1ba1056E>
    8001c3ae:	e42a                	sd	a0,8(sp)
    8001c3b0:	a009                	j	8001c3b2 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$8into_raw17h11a22cb7d9ea1552E+0x12>
    8001c3b2:	6522                	ld	a0,8(sp)
    }
    8001c3b4:	e02a                	sd	a0,0(sp)
    8001c3b6:	a009                	j	8001c3b8 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$8into_raw17h11a22cb7d9ea1552E+0x18>
    8001c3b8:	6502                	ld	a0,0(sp)
    8001c3ba:	60e2                	ld	ra,24(sp)
    8001c3bc:	6105                	addi	sp,sp,32
    8001c3be:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$8into_raw17h4b72114c3b8b546bE:

000000008001c3c0 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$8into_raw17h4b72114c3b8b546bE>:
    pub fn into_raw(b: Self) -> *mut T {
    8001c3c0:	1101                	addi	sp,sp,-32
    8001c3c2:	ec06                	sd	ra,24(sp)
    8001c3c4:	e82a                	sd	a0,16(sp)
        Self::into_raw_with_allocator(b).0
    8001c3c6:	00000097          	auipc	ra,0x0
    8001c3ca:	d60080e7          	jalr	-672(ra) # 8001c126 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h3e9247aef62521b2E>
    8001c3ce:	e42a                	sd	a0,8(sp)
    8001c3d0:	a009                	j	8001c3d2 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$8into_raw17h4b72114c3b8b546bE+0x12>
    8001c3d2:	6522                	ld	a0,8(sp)
    }
    8001c3d4:	e02a                	sd	a0,0(sp)
    8001c3d6:	a009                	j	8001c3d8 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$8into_raw17h4b72114c3b8b546bE+0x18>
    8001c3d8:	6502                	ld	a0,0(sp)
    8001c3da:	60e2                	ld	ra,24(sp)
    8001c3dc:	6105                	addi	sp,sp,32
    8001c3de:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$8into_raw17hcc7ebe92239a3cf2E:

000000008001c3e0 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$8into_raw17hcc7ebe92239a3cf2E>:
    pub fn into_raw(b: Self) -> *mut T {
    8001c3e0:	1101                	addi	sp,sp,-32
    8001c3e2:	ec06                	sd	ra,24(sp)
    8001c3e4:	e82a                	sd	a0,16(sp)
        Self::into_raw_with_allocator(b).0
    8001c3e6:	00000097          	auipc	ra,0x0
    8001c3ea:	df0080e7          	jalr	-528(ra) # 8001c1d6 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17he0e1487eb5c18a3bE>
    8001c3ee:	e42a                	sd	a0,8(sp)
    8001c3f0:	a009                	j	8001c3f2 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$8into_raw17hcc7ebe92239a3cf2E+0x12>
    8001c3f2:	6522                	ld	a0,8(sp)
    }
    8001c3f4:	e02a                	sd	a0,0(sp)
    8001c3f6:	a009                	j	8001c3f8 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$8into_raw17hcc7ebe92239a3cf2E+0x18>
    8001c3f8:	6502                	ld	a0,0(sp)
    8001c3fa:	60e2                	ld	ra,24(sp)
    8001c3fc:	6105                	addi	sp,sp,32
    8001c3fe:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed60Box$LT$core..mem..maybe_uninit..MaybeUninit$LT$T$GT$$C$A$GT$11assume_init17h22cceebd78df14b7E:

000000008001c400 <_ZN5alloc5boxed60Box$LT$core..mem..maybe_uninit..MaybeUninit$LT$T$GT$$C$A$GT$11assume_init17h22cceebd78df14b7E>:
    pub unsafe fn assume_init(self) -> Box<T, A> {
    8001c400:	7179                	addi	sp,sp,-48
    8001c402:	f406                	sd	ra,40(sp)
    8001c404:	e82a                	sd	a0,16(sp)
        let (raw, alloc) = Box::into_raw_with_allocator(self);
    8001c406:	00000097          	auipc	ra,0x0
    8001c40a:	cf4080e7          	jalr	-780(ra) # 8001c0fa <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h3a774aee57a2b865E>
    8001c40e:	e42a                	sd	a0,8(sp)
    8001c410:	a009                	j	8001c412 <_ZN5alloc5boxed60Box$LT$core..mem..maybe_uninit..MaybeUninit$LT$T$GT$$C$A$GT$11assume_init17h22cceebd78df14b7E+0x12>
    8001c412:	6522                	ld	a0,8(sp)
    8001c414:	f02a                	sd	a0,32(sp)
        unsafe { Box::from_raw_in(raw as *mut T, alloc) }
    8001c416:	fffff097          	auipc	ra,0xfffff
    8001c41a:	542080e7          	jalr	1346(ra) # 8001b958 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17h68eabecb8cd08a3aE>
    8001c41e:	e02a                	sd	a0,0(sp)
    8001c420:	a009                	j	8001c422 <_ZN5alloc5boxed60Box$LT$core..mem..maybe_uninit..MaybeUninit$LT$T$GT$$C$A$GT$11assume_init17h22cceebd78df14b7E+0x22>
    }
    8001c422:	6502                	ld	a0,0(sp)
    8001c424:	70a2                	ld	ra,40(sp)
    8001c426:	6145                	addi	sp,sp,48
    8001c428:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed60Box$LT$core..mem..maybe_uninit..MaybeUninit$LT$T$GT$$C$A$GT$11assume_init17h2fe4f6739411edd0E:

000000008001c42a <_ZN5alloc5boxed60Box$LT$core..mem..maybe_uninit..MaybeUninit$LT$T$GT$$C$A$GT$11assume_init17h2fe4f6739411edd0E>:
    pub unsafe fn assume_init(self) -> Box<T, A> {
    8001c42a:	7179                	addi	sp,sp,-48
    8001c42c:	f406                	sd	ra,40(sp)
    8001c42e:	e82a                	sd	a0,16(sp)
        let (raw, alloc) = Box::into_raw_with_allocator(self);
    8001c430:	00000097          	auipc	ra,0x0
    8001c434:	c72080e7          	jalr	-910(ra) # 8001c0a2 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h01d9da470f10fcdcE>
    8001c438:	e42a                	sd	a0,8(sp)
    8001c43a:	a009                	j	8001c43c <_ZN5alloc5boxed60Box$LT$core..mem..maybe_uninit..MaybeUninit$LT$T$GT$$C$A$GT$11assume_init17h2fe4f6739411edd0E+0x12>
    8001c43c:	6522                	ld	a0,8(sp)
    8001c43e:	f02a                	sd	a0,32(sp)
        unsafe { Box::from_raw_in(raw as *mut T, alloc) }
    8001c440:	fffff097          	auipc	ra,0xfffff
    8001c444:	5a4080e7          	jalr	1444(ra) # 8001b9e4 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17he38318e450c3c542E>
    8001c448:	e02a                	sd	a0,0(sp)
    8001c44a:	a009                	j	8001c44c <_ZN5alloc5boxed60Box$LT$core..mem..maybe_uninit..MaybeUninit$LT$T$GT$$C$A$GT$11assume_init17h2fe4f6739411edd0E+0x22>
    }
    8001c44c:	6502                	ld	a0,0(sp)
    8001c44e:	70a2                	ld	ra,40(sp)
    8001c450:	6145                	addi	sp,sp,48
    8001c452:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed60Box$LT$core..mem..maybe_uninit..MaybeUninit$LT$T$GT$$C$A$GT$11assume_init17h35c82a9a8f43ab52E:

000000008001c454 <_ZN5alloc5boxed60Box$LT$core..mem..maybe_uninit..MaybeUninit$LT$T$GT$$C$A$GT$11assume_init17h35c82a9a8f43ab52E>:
    pub unsafe fn assume_init(self) -> Box<T, A> {
    8001c454:	7179                	addi	sp,sp,-48
    8001c456:	f406                	sd	ra,40(sp)
    8001c458:	e82a                	sd	a0,16(sp)
        let (raw, alloc) = Box::into_raw_with_allocator(self);
    8001c45a:	00000097          	auipc	ra,0x0
    8001c45e:	d50080e7          	jalr	-688(ra) # 8001c1aa <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h8cff8d68311da958E>
    8001c462:	e42a                	sd	a0,8(sp)
    8001c464:	a009                	j	8001c466 <_ZN5alloc5boxed60Box$LT$core..mem..maybe_uninit..MaybeUninit$LT$T$GT$$C$A$GT$11assume_init17h35c82a9a8f43ab52E+0x12>
    8001c466:	6522                	ld	a0,8(sp)
    8001c468:	f02a                	sd	a0,32(sp)
        unsafe { Box::from_raw_in(raw as *mut T, alloc) }
    8001c46a:	fffff097          	auipc	ra,0xfffff
    8001c46e:	55e080e7          	jalr	1374(ra) # 8001b9c8 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17hbb480293fc4c0d0bE>
    8001c472:	e02a                	sd	a0,0(sp)
    8001c474:	a009                	j	8001c476 <_ZN5alloc5boxed60Box$LT$core..mem..maybe_uninit..MaybeUninit$LT$T$GT$$C$A$GT$11assume_init17h35c82a9a8f43ab52E+0x22>
    }
    8001c476:	6502                	ld	a0,0(sp)
    8001c478:	70a2                	ld	ra,40(sp)
    8001c47a:	6145                	addi	sp,sp,48
    8001c47c:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed60Box$LT$core..mem..maybe_uninit..MaybeUninit$LT$T$GT$$C$A$GT$11assume_init17h4ed953d8735ade7eE:

000000008001c47e <_ZN5alloc5boxed60Box$LT$core..mem..maybe_uninit..MaybeUninit$LT$T$GT$$C$A$GT$11assume_init17h4ed953d8735ade7eE>:
    pub unsafe fn assume_init(self) -> Box<T, A> {
    8001c47e:	7179                	addi	sp,sp,-48
    8001c480:	f406                	sd	ra,40(sp)
    8001c482:	e82a                	sd	a0,16(sp)
        let (raw, alloc) = Box::into_raw_with_allocator(self);
    8001c484:	00000097          	auipc	ra,0x0
    8001c488:	c4a080e7          	jalr	-950(ra) # 8001c0ce <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h255317eb94c396a6E>
    8001c48c:	e42a                	sd	a0,8(sp)
    8001c48e:	a009                	j	8001c490 <_ZN5alloc5boxed60Box$LT$core..mem..maybe_uninit..MaybeUninit$LT$T$GT$$C$A$GT$11assume_init17h4ed953d8735ade7eE+0x12>
    8001c490:	6522                	ld	a0,8(sp)
    8001c492:	f02a                	sd	a0,32(sp)
        unsafe { Box::from_raw_in(raw as *mut T, alloc) }
    8001c494:	fffff097          	auipc	ra,0xfffff
    8001c498:	4fc080e7          	jalr	1276(ra) # 8001b990 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17h9f1ea1f840330d88E>
    8001c49c:	e02a                	sd	a0,0(sp)
    8001c49e:	a009                	j	8001c4a0 <_ZN5alloc5boxed60Box$LT$core..mem..maybe_uninit..MaybeUninit$LT$T$GT$$C$A$GT$11assume_init17h4ed953d8735ade7eE+0x22>
    }
    8001c4a0:	6502                	ld	a0,0(sp)
    8001c4a2:	70a2                	ld	ra,40(sp)
    8001c4a4:	6145                	addi	sp,sp,48
    8001c4a6:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed60Box$LT$core..mem..maybe_uninit..MaybeUninit$LT$T$GT$$C$A$GT$11assume_init17hef567e32e2b3ffa4E:

000000008001c4a8 <_ZN5alloc5boxed60Box$LT$core..mem..maybe_uninit..MaybeUninit$LT$T$GT$$C$A$GT$11assume_init17hef567e32e2b3ffa4E>:
    pub unsafe fn assume_init(self) -> Box<T, A> {
    8001c4a8:	7179                	addi	sp,sp,-48
    8001c4aa:	f406                	sd	ra,40(sp)
    8001c4ac:	e82a                	sd	a0,16(sp)
        let (raw, alloc) = Box::into_raw_with_allocator(self);
    8001c4ae:	00000097          	auipc	ra,0x0
    8001c4b2:	cd0080e7          	jalr	-816(ra) # 8001c17e <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h56417e202ce6f498E>
    8001c4b6:	e42a                	sd	a0,8(sp)
    8001c4b8:	a009                	j	8001c4ba <_ZN5alloc5boxed60Box$LT$core..mem..maybe_uninit..MaybeUninit$LT$T$GT$$C$A$GT$11assume_init17hef567e32e2b3ffa4E+0x12>
    8001c4ba:	6522                	ld	a0,8(sp)
    8001c4bc:	f02a                	sd	a0,32(sp)
        unsafe { Box::from_raw_in(raw as *mut T, alloc) }
    8001c4be:	fffff097          	auipc	ra,0xfffff
    8001c4c2:	4ee080e7          	jalr	1262(ra) # 8001b9ac <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17haf8eaf51394a2521E>
    8001c4c6:	e02a                	sd	a0,0(sp)
    8001c4c8:	a009                	j	8001c4ca <_ZN5alloc5boxed60Box$LT$core..mem..maybe_uninit..MaybeUninit$LT$T$GT$$C$A$GT$11assume_init17hef567e32e2b3ffa4E+0x22>
    }
    8001c4ca:	6502                	ld	a0,0(sp)
    8001c4cc:	70a2                	ld	ra,40(sp)
    8001c4ce:	6145                	addi	sp,sp,48
    8001c4d0:	8082                	ret

Disassembly of section .text._ZN4core3cmp3Ord3min17h470a5bbd78ca29f2E:

000000008001c4d2 <_ZN4core3cmp3Ord3min17h470a5bbd78ca29f2E>:
    fn min(self, other: Self) -> Self
    8001c4d2:	1101                	addi	sp,sp,-32
    8001c4d4:	ec06                	sd	ra,24(sp)
    8001c4d6:	e42a                	sd	a0,8(sp)
    8001c4d8:	e82e                	sd	a1,16(sp)
        min_by(self, other, Ord::cmp)
    8001c4da:	00000097          	auipc	ra,0x0
    8001c4de:	030080e7          	jalr	48(ra) # 8001c50a <_ZN4core3cmp6min_by17he5979745ae7a7f64E>
    8001c4e2:	e02a                	sd	a0,0(sp)
    8001c4e4:	a009                	j	8001c4e6 <_ZN4core3cmp3Ord3min17h470a5bbd78ca29f2E+0x14>
    }
    8001c4e6:	6502                	ld	a0,0(sp)
    8001c4e8:	60e2                	ld	ra,24(sp)
    8001c4ea:	6105                	addi	sp,sp,32
    8001c4ec:	8082                	ret

Disassembly of section .text._ZN4core3cmp3min17hbc9e632873ab1838E:

000000008001c4ee <_ZN4core3cmp3min17hbc9e632873ab1838E>:
pub fn min<T: Ord>(v1: T, v2: T) -> T {
    8001c4ee:	1101                	addi	sp,sp,-32
    8001c4f0:	ec06                	sd	ra,24(sp)
    8001c4f2:	e42a                	sd	a0,8(sp)
    8001c4f4:	e82e                	sd	a1,16(sp)
    v1.min(v2)
    8001c4f6:	00000097          	auipc	ra,0x0
    8001c4fa:	fdc080e7          	jalr	-36(ra) # 8001c4d2 <_ZN4core3cmp3Ord3min17h470a5bbd78ca29f2E>
    8001c4fe:	e02a                	sd	a0,0(sp)
    8001c500:	a009                	j	8001c502 <_ZN4core3cmp3min17hbc9e632873ab1838E+0x14>
}
    8001c502:	6502                	ld	a0,0(sp)
    8001c504:	60e2                	ld	ra,24(sp)
    8001c506:	6105                	addi	sp,sp,32
    8001c508:	8082                	ret

Disassembly of section .text._ZN4core3cmp6min_by17he5979745ae7a7f64E:

000000008001c50a <_ZN4core3cmp6min_by17he5979745ae7a7f64E>:
pub fn min_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
    8001c50a:	715d                	addi	sp,sp,-80
    8001c50c:	e486                	sd	ra,72(sp)
    8001c50e:	e42a                	sd	a0,8(sp)
    8001c510:	e82e                	sd	a1,16(sp)
    8001c512:	4505                	li	a0,1
    match compare(&v1, &v2) {
    8001c514:	02a10fa3          	sb	a0,63(sp)
    8001c518:	02a10f23          	sb	a0,62(sp)
    8001c51c:	0028                	addi	a0,sp,8
    8001c51e:	f42a                	sd	a0,40(sp)
    8001c520:	080c                	addi	a1,sp,16
    8001c522:	f82e                	sd	a1,48(sp)
    8001c524:	fffeb097          	auipc	ra,0xfffeb
    8001c528:	836080e7          	jalr	-1994(ra) # 80006d5a <_ZN4core3ops8function6FnOnce9call_once17h5aa9a10c33b479e6E>
    8001c52c:	02a103a3          	sb	a0,39(sp)
    8001c530:	a009                	j	8001c532 <_ZN4core3cmp6min_by17he5979745ae7a7f64E+0x28>
        Ordering::Less | Ordering::Equal => v1,
    8001c532:	02710503          	lb	a0,39(sp)
    8001c536:	0505                	addi	a0,a0,1
    8001c538:	4589                	li	a1,2
    8001c53a:	00b56a63          	bltu	a0,a1,8001c54e <_ZN4core3cmp6min_by17he5979745ae7a7f64E+0x44>
    8001c53e:	a009                	j	8001c540 <_ZN4core3cmp6min_by17he5979745ae7a7f64E+0x36>
    8001c540:	4501                	li	a0,0
        Ordering::Greater => v2,
    8001c542:	02a10f23          	sb	a0,62(sp)
    8001c546:	6542                	ld	a0,16(sp)
    8001c548:	ec2a                	sd	a0,24(sp)
    match compare(&v1, &v2) {
    8001c54a:	a801                	j	8001c55a <_ZN4core3cmp6min_by17he5979745ae7a7f64E+0x50>
    8001c54c:	0000                	unimp
    8001c54e:	4501                	li	a0,0
        Ordering::Less | Ordering::Equal => v1,
    8001c550:	02a10fa3          	sb	a0,63(sp)
    8001c554:	6522                	ld	a0,8(sp)
    8001c556:	ec2a                	sd	a0,24(sp)
    match compare(&v1, &v2) {
    8001c558:	a009                	j	8001c55a <_ZN4core3cmp6min_by17he5979745ae7a7f64E+0x50>
}
    8001c55a:	03e14503          	lbu	a0,62(sp)
    8001c55e:	8905                	andi	a0,a0,1
    8001c560:	e919                	bnez	a0,8001c576 <_ZN4core3cmp6min_by17he5979745ae7a7f64E+0x6c>
    8001c562:	a009                	j	8001c564 <_ZN4core3cmp6min_by17he5979745ae7a7f64E+0x5a>
    8001c564:	03f14503          	lbu	a0,63(sp)
    8001c568:	8905                	andi	a0,a0,1
    8001c56a:	e519                	bnez	a0,8001c578 <_ZN4core3cmp6min_by17he5979745ae7a7f64E+0x6e>
    8001c56c:	a009                	j	8001c56e <_ZN4core3cmp6min_by17he5979745ae7a7f64E+0x64>
    8001c56e:	6562                	ld	a0,24(sp)
    8001c570:	60a6                	ld	ra,72(sp)
    8001c572:	6161                	addi	sp,sp,80
    8001c574:	8082                	ret
    8001c576:	b7fd                	j	8001c564 <_ZN4core3cmp6min_by17he5979745ae7a7f64E+0x5a>
    8001c578:	bfdd                	j	8001c56e <_ZN4core3cmp6min_by17he5979745ae7a7f64E+0x64>

Disassembly of section .text._ZN4core4char7convert18from_u32_unchecked17hac286a657ee2c904E:

000000008001c57a <_ZN4core4char7convert18from_u32_unchecked17hac286a657ee2c904E>:
///
/// assert_eq!('❤', c);
/// ```
#[inline]
#[stable(feature = "char_from_unchecked", since = "1.5.0")]
pub unsafe fn from_u32_unchecked(i: u32) -> char {
    8001c57a:	1141                	addi	sp,sp,-16
    8001c57c:	c42a                	sw	a0,8(sp)
    // SAFETY: the caller must guarantee that `i` is a valid char value.
    if cfg!(debug_assertions) { char::from_u32(i).unwrap() } else { unsafe { transmute(i) } }
    8001c57e:	c62a                	sw	a0,12(sp)
    8001c580:	1502                	slli	a0,a0,0x20
    8001c582:	9101                	srli	a0,a0,0x20
    8001c584:	e02a                	sd	a0,0(sp)
    8001c586:	a009                	j	8001c588 <_ZN4core4char7convert18from_u32_unchecked17hac286a657ee2c904E+0xe>
}
    8001c588:	6502                	ld	a0,0(sp)
    8001c58a:	0141                	addi	sp,sp,16
    8001c58c:	8082                	ret

Disassembly of section .text._ZN4core4iter6traits8iterator8Iterator8for_each4call17hfc6c60365ed1f66bE:

000000008001c58e <_ZN4core4iter6traits8iterator8Iterator8for_each4call17hfc6c60365ed1f66bE>:
        fn call<T>(mut f: impl FnMut(T)) -> impl FnMut((), T) {
    8001c58e:	1141                	addi	sp,sp,-16
        }
    8001c590:	0141                	addi	sp,sp,16
    8001c592:	8082                	ret

Disassembly of section .text._ZN4core4iter6traits8iterator8Iterator8for_each4call28_$u7b$$u7b$closure$u7d$$u7d$17h486761cc57705d97E:

000000008001c594 <_ZN4core4iter6traits8iterator8Iterator8for_each4call28_$u7b$$u7b$closure$u7d$$u7d$17h486761cc57705d97E>:
            move |(), item| f(item)
    8001c594:	7139                	addi	sp,sp,-64
    8001c596:	fc06                	sd	ra,56(sp)
    8001c598:	ec2a                	sd	a0,24(sp)
    8001c59a:	f42e                	sd	a1,40(sp)
    8001c59c:	f832                	sd	a2,48(sp)
    8001c59e:	e42e                	sd	a1,8(sp)
    8001c5a0:	e832                	sd	a2,16(sp)
    8001c5a2:	fffe9097          	auipc	ra,0xfffe9
    8001c5a6:	128080e7          	jalr	296(ra) # 800056ca <_ZN6kernel2fs3bio6Bcache5binit28_$u7b$$u7b$closure$u7d$$u7d$17h25f2c34d7a851755E>
    8001c5aa:	a009                	j	8001c5ac <_ZN4core4iter6traits8iterator8Iterator8for_each4call28_$u7b$$u7b$closure$u7d$$u7d$17h486761cc57705d97E+0x18>
    8001c5ac:	70e2                	ld	ra,56(sp)
    8001c5ae:	6121                	addi	sp,sp,64
    8001c5b0:	8082                	ret

Disassembly of section .text._ZN6kernel3ipc9semaphore9semaphore14semaphore_down17hfc37af6ce552d8edE:

000000008001c5b2 <_ZN6kernel3ipc9semaphore9semaphore14semaphore_down17hfc37af6ce552d8edE>:
        Self{
            cnt: value,
            sem_lock: Spinlock::new((), "sem_lock"),
        }
    }
    pub fn semaphore_down(&mut self){
    8001c5b2:	711d                	addi	sp,sp,-96
    8001c5b4:	ec86                	sd	ra,88(sp)
    8001c5b6:	e82a                	sd	a0,16(sp)
    8001c5b8:	e4aa                	sd	a0,72(sp)

000000008001c5ba <.LBB0_7>:
        println!("semaphore down");
    8001c5ba:	0000f597          	auipc	a1,0xf
    8001c5be:	ade58593          	addi	a1,a1,-1314 # 8002b098 <.L__unnamed_1>

000000008001c5c2 <.LBB0_8>:
    8001c5c2:	0000f697          	auipc	a3,0xf
    8001c5c6:	ae668693          	addi	a3,a3,-1306 # 8002b0a8 <.L__unnamed_20>
    8001c5ca:	0828                	addi	a0,sp,24
    8001c5cc:	4605                	li	a2,1
    8001c5ce:	4701                	li	a4,0
    8001c5d0:	fffe9097          	auipc	ra,0xfffe9
    8001c5d4:	e9a080e7          	jalr	-358(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8001c5d8:	a009                	j	8001c5da <.LBB0_8+0x18>
    8001c5da:	0828                	addi	a0,sp,24
    8001c5dc:	00001097          	auipc	ra,0x1
    8001c5e0:	770080e7          	jalr	1904(ra) # 8001dd4c <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8001c5e4:	a009                	j	8001c5e6 <.LBB0_8+0x24>
        let guard = self.sem_lock.acquire();
    8001c5e6:	6542                	ld	a0,16(sp)
    8001c5e8:	ffff4097          	auipc	ra,0xffff4
    8001c5ec:	226080e7          	jalr	550(ra) # 8001080e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    8001c5f0:	85aa                	mv	a1,a0
    8001c5f2:	e42e                	sd	a1,8(sp)
    8001c5f4:	e8aa                	sd	a0,80(sp)
    8001c5f6:	a009                	j	8001c5f8 <.LBB0_8+0x36>
        self.cnt -= 1;
    8001c5f8:	6542                	ld	a0,16(sp)
    8001c5fa:	5108                	lw	a0,32(a0)
    8001c5fc:	fff50593          	addi	a1,a0,-1
    8001c600:	e02e                	sd	a1,0(sp)
    8001c602:	357d                	addiw	a0,a0,-1
    8001c604:	00b51f63          	bne	a0,a1,8001c622 <.LBB0_9>
    8001c608:	a009                	j	8001c60a <.LBB0_8+0x48>
    8001c60a:	6522                	ld	a0,8(sp)
    8001c60c:	6582                	ld	a1,0(sp)
    8001c60e:	6642                	ld	a2,16(sp)
    8001c610:	d20c                	sw	a1,32(a2)
        drop(guard);
    8001c612:	00001097          	auipc	ra,0x1
    8001c616:	a0e080e7          	jalr	-1522(ra) # 8001d020 <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    8001c61a:	a009                	j	8001c61c <.LBB0_8+0x5a>
    }
    8001c61c:	60e6                	ld	ra,88(sp)
    8001c61e:	6125                	addi	sp,sp,96
    8001c620:	8082                	ret

000000008001c622 <.LBB0_9>:
        self.cnt -= 1;
    8001c622:	0000f517          	auipc	a0,0xf
    8001c626:	abe50513          	addi	a0,a0,-1346 # 8002b0e0 <str.0>

000000008001c62a <.LBB0_10>:
    8001c62a:	0000f617          	auipc	a2,0xf
    8001c62e:	a9660613          	addi	a2,a2,-1386 # 8002b0c0 <.L__unnamed_3>
    8001c632:	02100593          	li	a1,33
    8001c636:	00006097          	auipc	ra,0x6
    8001c63a:	c40080e7          	jalr	-960(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel3ipc9semaphore9semaphore12semaphore_up17h776c4e5603b34918E:

000000008001c640 <_ZN6kernel3ipc9semaphore9semaphore12semaphore_up17h776c4e5603b34918E>:
    pub fn semaphore_up(&mut self){
    8001c640:	7179                	addi	sp,sp,-48
    8001c642:	f406                	sd	ra,40(sp)
    8001c644:	e42a                	sd	a0,8(sp)
    8001c646:	ec2a                	sd	a0,24(sp)
        let guard = self.sem_lock.acquire();
    8001c648:	ffff4097          	auipc	ra,0xffff4
    8001c64c:	1c6080e7          	jalr	454(ra) # 8001080e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    8001c650:	85aa                	mv	a1,a0
    8001c652:	e82e                	sd	a1,16(sp)
    8001c654:	f02a                	sd	a0,32(sp)
    8001c656:	a009                	j	8001c658 <_ZN6kernel3ipc9semaphore9semaphore12semaphore_up17h776c4e5603b34918E+0x18>
        self.cnt += 1;
    8001c658:	6522                	ld	a0,8(sp)
    8001c65a:	5108                	lw	a0,32(a0)
    8001c65c:	00150593          	addi	a1,a0,1
    8001c660:	e02e                	sd	a1,0(sp)
    8001c662:	2505                	addiw	a0,a0,1
    8001c664:	00b51f63          	bne	a0,a1,8001c682 <.LBB1_5>
    8001c668:	a009                	j	8001c66a <_ZN6kernel3ipc9semaphore9semaphore12semaphore_up17h776c4e5603b34918E+0x2a>
    8001c66a:	6542                	ld	a0,16(sp)
    8001c66c:	6582                	ld	a1,0(sp)
    8001c66e:	6622                	ld	a2,8(sp)
    8001c670:	d20c                	sw	a1,32(a2)
        drop(guard);
    8001c672:	00001097          	auipc	ra,0x1
    8001c676:	9ae080e7          	jalr	-1618(ra) # 8001d020 <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    8001c67a:	a009                	j	8001c67c <_ZN6kernel3ipc9semaphore9semaphore12semaphore_up17h776c4e5603b34918E+0x3c>
    }
    8001c67c:	70a2                	ld	ra,40(sp)
    8001c67e:	6145                	addi	sp,sp,48
    8001c680:	8082                	ret

000000008001c682 <.LBB1_5>:
        self.cnt += 1;
    8001c682:	0000f517          	auipc	a0,0xf
    8001c686:	a9e50513          	addi	a0,a0,-1378 # 8002b120 <str.1>

000000008001c68a <.LBB1_6>:
    8001c68a:	0000f617          	auipc	a2,0xf
    8001c68e:	a7e60613          	addi	a2,a2,-1410 # 8002b108 <.L__unnamed_4>
    8001c692:	45f1                	li	a1,28
    8001c694:	00006097          	auipc	ra,0x6
    8001c698:	be2080e7          	jalr	-1054(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel3ipc9semaphore9semaphore9get_value17ha36354007f7a90a5E:

000000008001c69e <_ZN6kernel3ipc9semaphore9semaphore9get_value17ha36354007f7a90a5E>:

    pub fn get_value(&self) -> i32{
    8001c69e:	1141                	addi	sp,sp,-16
    8001c6a0:	e42a                	sd	a0,8(sp)
        self.cnt
    }
    8001c6a2:	5108                	lw	a0,32(a0)
    8001c6a4:	0141                	addi	sp,sp,16
    8001c6a6:	8082                	ret

Disassembly of section .text._ZN6kernel3ipc9semaphore5sem_t8sem_init17h922a2e9695ae8884E:

000000008001c6a8 <_ZN6kernel3ipc9semaphore5sem_t8sem_init17h922a2e9695ae8884E>:
            id: -1,
            // sem_lock: Spinlock::new(0, "Nope"),
        }
    }

    pub fn sem_init(&mut self, cnt: i32) -> i32{
    8001c6a8:	7159                	addi	sp,sp,-112
    8001c6aa:	f486                	sd	ra,104(sp)
    8001c6ac:	e82a                	sd	a0,16(sp)
    8001c6ae:	862e                	mv	a2,a1
    8001c6b0:	ec32                	sd	a2,24(sp)
    8001c6b2:	e8aa                	sd	a0,80(sp)
    8001c6b4:	ceae                	sw	a1,92(sp)

000000008001c6b6 <.LBB3_5>:
        println!("sem_init in semaphore.rs");
    8001c6b6:	0000f597          	auipc	a1,0xf
    8001c6ba:	aa258593          	addi	a1,a1,-1374 # 8002b158 <.L__unnamed_5>

000000008001c6be <.LBB3_6>:
    8001c6be:	0000f697          	auipc	a3,0xf
    8001c6c2:	9ea68693          	addi	a3,a3,-1558 # 8002b0a8 <.L__unnamed_20>
    8001c6c6:	1008                	addi	a0,sp,32
    8001c6c8:	4605                	li	a2,1
    8001c6ca:	4701                	li	a4,0
    8001c6cc:	fffe9097          	auipc	ra,0xfffe9
    8001c6d0:	d9e080e7          	jalr	-610(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8001c6d4:	a009                	j	8001c6d6 <.LBB3_6+0x18>
    8001c6d6:	1008                	addi	a0,sp,32
    8001c6d8:	00001097          	auipc	ra,0x1
    8001c6dc:	674080e7          	jalr	1652(ra) # 8001dd4c <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8001c6e0:	a009                	j	8001c6e2 <.LBB3_6+0x24>
        let sem_guard = self.sem.sem_lock.acquire();
    8001c6e2:	6542                	ld	a0,16(sp)
    8001c6e4:	ffff4097          	auipc	ra,0xffff4
    8001c6e8:	12a080e7          	jalr	298(ra) # 8001080e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    8001c6ec:	85aa                	mv	a1,a0
    8001c6ee:	e42e                	sd	a1,8(sp)
    8001c6f0:	f0aa                	sd	a0,96(sp)
    8001c6f2:	a009                	j	8001c6f4 <.LBB3_6+0x36>
        self.sem.cnt = cnt;
    8001c6f4:	6522                	ld	a0,8(sp)
    8001c6f6:	65e2                	ld	a1,24(sp)
    8001c6f8:	6642                	ld	a2,16(sp)
    8001c6fa:	d20c                	sw	a1,32(a2)
        drop(sem_guard);
    8001c6fc:	00001097          	auipc	ra,0x1
    8001c700:	924080e7          	jalr	-1756(ra) # 8001d020 <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    8001c704:	a009                	j	8001c706 <.LBB3_6+0x48>
    8001c706:	4501                	li	a0,0
        0
    }
    8001c708:	70a6                	ld	ra,104(sp)
    8001c70a:	6165                	addi	sp,sp,112
    8001c70c:	8082                	ret

Disassembly of section .text._ZN6kernel3ipc9semaphore5sem_t8sem_down17h0b823d8c0372af65E:

000000008001c70e <_ZN6kernel3ipc9semaphore5sem_t8sem_down17h0b823d8c0372af65E>:

    pub fn sem_down(&mut self){
    8001c70e:	7125                	addi	sp,sp,-416
    8001c710:	ef06                	sd	ra,408(sp)
    8001c712:	fcaa                	sd	a0,120(sp)
    8001c714:	f6aa                	sd	a0,360(sp)
    8001c716:	a009                	j	8001c718 <_ZN6kernel3ipc9semaphore5sem_t8sem_down17h0b823d8c0372af65E+0xa>
        while self.sem.get_value() <= 0{
    8001c718:	7566                	ld	a0,120(sp)
    8001c71a:	00000097          	auipc	ra,0x0
    8001c71e:	f84080e7          	jalr	-124(ra) # 8001c69e <_ZN6kernel3ipc9semaphore9semaphore9get_value17ha36354007f7a90a5E>
    8001c722:	2501                	sext.w	a0,a0
    8001c724:	f8aa                	sd	a0,112(sp)
    8001c726:	a009                	j	8001c728 <_ZN6kernel3ipc9semaphore5sem_t8sem_down17h0b823d8c0372af65E+0x1a>
    8001c728:	7546                	ld	a0,112(sp)
    8001c72a:	4585                	li	a1,1
    8001c72c:	02b54363          	blt	a0,a1,8001c752 <.LBB4_20>
    8001c730:	a009                	j	8001c732 <.LBB4_18>

000000008001c732 <.LBB4_18>:
            my_proc.sleep(
                &self.sem as *const _ as usize, 
                sem_guard
            );
        }
        println!("sem down");
    8001c732:	0000f597          	auipc	a1,0xf
    8001c736:	ac658593          	addi	a1,a1,-1338 # 8002b1f8 <.L__unnamed_6>

000000008001c73a <.LBB4_19>:
    8001c73a:	0000f697          	auipc	a3,0xf
    8001c73e:	96e68693          	addi	a3,a3,-1682 # 8002b0a8 <.L__unnamed_20>
    8001c742:	1a28                	addi	a0,sp,312
    8001c744:	4605                	li	a2,1
    8001c746:	4701                	li	a4,0
    8001c748:	fffe9097          	auipc	ra,0xfffe9
    8001c74c:	d22080e7          	jalr	-734(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8001c750:	a21d                	j	8001c876 <.LBB4_26+0x38>

000000008001c752 <.LBB4_20>:
            let my_proc = unsafe { CPU_MANAGER.myproc().unwrap() };
    8001c752:	00057517          	auipc	a0,0x57
    8001c756:	9ee50513          	addi	a0,a0,-1554 # 80073140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    8001c75a:	ffff5097          	auipc	ra,0xffff5
    8001c75e:	6a4080e7          	jalr	1700(ra) # 80011dfe <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    8001c762:	f4aa                	sd	a0,104(sp)
    8001c764:	a009                	j	8001c766 <.LBB4_20+0x14>
    8001c766:	7526                	ld	a0,104(sp)

000000008001c768 <.LBB4_21>:
    8001c768:	0000f597          	auipc	a1,0xf
    8001c76c:	a0058593          	addi	a1,a1,-1536 # 8002b168 <.L__unnamed_7>
    8001c770:	ffff2097          	auipc	ra,0xffff2
    8001c774:	5dc080e7          	jalr	1500(ra) # 8000ed4c <_ZN4core6option15Option$LT$T$GT$6unwrap17h81f0c84c54a80648E>
    8001c778:	f0aa                	sd	a0,96(sp)
    8001c77a:	a009                	j	8001c77c <.LBB4_21+0x14>
    8001c77c:	7566                	ld	a0,120(sp)
    8001c77e:	7586                	ld	a1,96(sp)
    8001c780:	faae                	sd	a1,368(sp)
            let sem_guard = self.sem.sem_lock.acquire();
    8001c782:	ffff4097          	auipc	ra,0xffff4
    8001c786:	08c080e7          	jalr	140(ra) # 8001080e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    8001c78a:	e12a                	sd	a0,128(sp)
    8001c78c:	a009                	j	8001c78e <.LBB4_21+0x26>
            println!("ready to sleep {} {} {} {}", &self.id, &self.sem.cnt, &self.sem as *const _ as usize, &sem_guard as *const _ as usize);
    8001c78e:	7566                	ld	a0,120(sp)
    8001c790:	02850593          	addi	a1,a0,40
    8001c794:	ee2e                	sd	a1,280(sp)
    8001c796:	02050593          	addi	a1,a0,32
    8001c79a:	f22e                	sd	a1,288(sp)
    8001c79c:	f62a                	sd	a0,296(sp)
    8001c79e:	0108                	addi	a0,sp,128
    8001c7a0:	fa2a                	sd	a0,304(sp)
    8001c7a2:	0a28                	addi	a0,sp,280
    8001c7a4:	fdaa                	sd	a0,248(sp)
    8001c7a6:	1214                	addi	a3,sp,288
    8001c7a8:	fc36                	sd	a3,56(sp)
    8001c7aa:	e236                	sd	a3,256(sp)
    8001c7ac:	1230                	addi	a2,sp,296
    8001c7ae:	e0b2                	sd	a2,64(sp)
    8001c7b0:	e632                	sd	a2,264(sp)
    8001c7b2:	1a0c                	addi	a1,sp,304
    8001c7b4:	e4ae                	sd	a1,72(sp)
    8001c7b6:	ea2e                	sd	a1,272(sp)
    8001c7b8:	feaa                	sd	a0,376(sp)
    8001c7ba:	e336                	sd	a3,384(sp)
    8001c7bc:	e732                	sd	a2,392(sp)
    8001c7be:	eb2e                	sd	a1,400(sp)

000000008001c7c0 <.LBB4_22>:
    8001c7c0:	00002597          	auipc	a1,0x2
    8001c7c4:	dd658593          	addi	a1,a1,-554 # 8001e596 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h3baa88b0b8ed59b0E>
    8001c7c8:	00002097          	auipc	ra,0x2
    8001c7cc:	e54080e7          	jalr	-428(ra) # 8001e61c <_ZN4core3fmt10ArgumentV13new17h4cc7035953f043f8E>
    8001c7d0:	e8aa                	sd	a0,80(sp)
    8001c7d2:	ecae                	sd	a1,88(sp)
    8001c7d4:	a009                	j	8001c7d6 <.LBB4_22+0x16>
    8001c7d6:	7562                	ld	a0,56(sp)

000000008001c7d8 <.LBB4_23>:
    8001c7d8:	00002597          	auipc	a1,0x2
    8001c7dc:	dbe58593          	addi	a1,a1,-578 # 8001e596 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h3baa88b0b8ed59b0E>
    8001c7e0:	00002097          	auipc	ra,0x2
    8001c7e4:	e3c080e7          	jalr	-452(ra) # 8001e61c <_ZN4core3fmt10ArgumentV13new17h4cc7035953f043f8E>
    8001c7e8:	f42a                	sd	a0,40(sp)
    8001c7ea:	f82e                	sd	a1,48(sp)
    8001c7ec:	a009                	j	8001c7ee <.LBB4_23+0x16>
    8001c7ee:	6506                	ld	a0,64(sp)

000000008001c7f0 <.LBB4_24>:
    8001c7f0:	00008597          	auipc	a1,0x8
    8001c7f4:	11258593          	addi	a1,a1,274 # 80024902 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h9c6c4af1578f7c29E>
    8001c7f8:	00003097          	auipc	ra,0x3
    8001c7fc:	ea8080e7          	jalr	-344(ra) # 8001f6a0 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    8001c800:	ec2a                	sd	a0,24(sp)
    8001c802:	f02e                	sd	a1,32(sp)
    8001c804:	a009                	j	8001c806 <.LBB4_24+0x16>
    8001c806:	6526                	ld	a0,72(sp)

000000008001c808 <.LBB4_25>:
    8001c808:	00008597          	auipc	a1,0x8
    8001c80c:	0fa58593          	addi	a1,a1,250 # 80024902 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h9c6c4af1578f7c29E>
    8001c810:	00003097          	auipc	ra,0x3
    8001c814:	e90080e7          	jalr	-368(ra) # 8001f6a0 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    8001c818:	e42a                	sd	a0,8(sp)
    8001c81a:	e82e                	sd	a1,16(sp)
    8001c81c:	a009                	j	8001c81e <.LBB4_25+0x16>
    8001c81e:	6542                	ld	a0,16(sp)
    8001c820:	65a2                	ld	a1,8(sp)
    8001c822:	7602                	ld	a2,32(sp)
    8001c824:	66e2                	ld	a3,24(sp)
    8001c826:	7742                	ld	a4,48(sp)
    8001c828:	77a2                	ld	a5,40(sp)
    8001c82a:	6866                	ld	a6,88(sp)
    8001c82c:	68c6                	ld	a7,80(sp)
    8001c82e:	fd46                	sd	a7,184(sp)
    8001c830:	e1c2                	sd	a6,192(sp)
    8001c832:	e5be                	sd	a5,200(sp)
    8001c834:	e9ba                	sd	a4,208(sp)
    8001c836:	edb6                	sd	a3,216(sp)
    8001c838:	f1b2                	sd	a2,224(sp)
    8001c83a:	f5ae                	sd	a1,232(sp)
    8001c83c:	f9aa                	sd	a0,240(sp)

000000008001c83e <.LBB4_26>:
    8001c83e:	0000f597          	auipc	a1,0xf
    8001c842:	95a58593          	addi	a1,a1,-1702 # 8002b198 <.L__unnamed_8>
    8001c846:	0128                	addi	a0,sp,136
    8001c848:	4615                	li	a2,5
    8001c84a:	1934                	addi	a3,sp,184
    8001c84c:	4711                	li	a4,4
    8001c84e:	fffe9097          	auipc	ra,0xfffe9
    8001c852:	c1c080e7          	jalr	-996(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8001c856:	a009                	j	8001c858 <.LBB4_26+0x1a>
    8001c858:	0128                	addi	a0,sp,136
    8001c85a:	00001097          	auipc	ra,0x1
    8001c85e:	4f2080e7          	jalr	1266(ra) # 8001dd4c <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8001c862:	a009                	j	8001c864 <.LBB4_26+0x26>
                sem_guard
    8001c864:	75e6                	ld	a1,120(sp)
    8001c866:	7506                	ld	a0,96(sp)
    8001c868:	660a                	ld	a2,128(sp)
            my_proc.sleep(
    8001c86a:	ffff5097          	auipc	ra,0xffff5
    8001c86e:	1e4080e7          	jalr	484(ra) # 80011a4e <_ZN6kernel7process7process11task_struct5sleep17h3865ab03b1bff75fE>
    8001c872:	a009                	j	8001c874 <.LBB4_26+0x36>
        while self.sem.get_value() <= 0{
    8001c874:	b555                	j	8001c718 <_ZN6kernel3ipc9semaphore5sem_t8sem_down17h0b823d8c0372af65E+0xa>
    8001c876:	1a28                	addi	a0,sp,312
        println!("sem down");
    8001c878:	00001097          	auipc	ra,0x1
    8001c87c:	4d4080e7          	jalr	1236(ra) # 8001dd4c <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8001c880:	a009                	j	8001c882 <.LBB4_26+0x44>
        self.sem.semaphore_down();
    8001c882:	7566                	ld	a0,120(sp)
    8001c884:	00000097          	auipc	ra,0x0
    8001c888:	d2e080e7          	jalr	-722(ra) # 8001c5b2 <_ZN6kernel3ipc9semaphore9semaphore14semaphore_down17hfc37af6ce552d8edE>
    8001c88c:	a009                	j	8001c88e <.LBB4_26+0x50>
    }
    8001c88e:	60fa                	ld	ra,408(sp)
    8001c890:	611d                	addi	sp,sp,416
    8001c892:	8082                	ret

Disassembly of section .text._ZN6kernel3ipc9semaphore5sem_t6sem_up17hff2b195f2e6585ecE:

000000008001c894 <_ZN6kernel3ipc9semaphore5sem_t6sem_up17hff2b195f2e6585ecE>:

    pub fn sem_up(&mut self){
    8001c894:	7165                	addi	sp,sp,-400
    8001c896:	e706                	sd	ra,392(sp)
    8001c898:	f4aa                	sd	a0,104(sp)
    8001c89a:	f2aa                	sd	a0,352(sp)

000000008001c89c <.LBB5_16>:
        println!("sem up");
    8001c89c:	0000f597          	auipc	a1,0xf
    8001c8a0:	97458593          	addi	a1,a1,-1676 # 8002b210 <.L__unnamed_9>

000000008001c8a4 <.LBB5_17>:
    8001c8a4:	0000f697          	auipc	a3,0xf
    8001c8a8:	80468693          	addi	a3,a3,-2044 # 8002b0a8 <.L__unnamed_20>
    8001c8ac:	18a8                	addi	a0,sp,120
    8001c8ae:	4605                	li	a2,1
    8001c8b0:	4701                	li	a4,0
    8001c8b2:	fffe9097          	auipc	ra,0xfffe9
    8001c8b6:	bb8080e7          	jalr	-1096(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8001c8ba:	a009                	j	8001c8bc <.LBB5_17+0x18>
    8001c8bc:	18a8                	addi	a0,sp,120
    8001c8be:	00001097          	auipc	ra,0x1
    8001c8c2:	48e080e7          	jalr	1166(ra) # 8001dd4c <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8001c8c6:	a009                	j	8001c8c8 <.LBB5_17+0x24>
        self.sem.semaphore_up();
    8001c8c8:	7526                	ld	a0,104(sp)
    8001c8ca:	00000097          	auipc	ra,0x0
    8001c8ce:	d76080e7          	jalr	-650(ra) # 8001c640 <_ZN6kernel3ipc9semaphore9semaphore12semaphore_up17h776c4e5603b34918E>
    8001c8d2:	a009                	j	8001c8d4 <.LBB5_17+0x30>
        if self.sem.get_value() > 0{
    8001c8d4:	7526                	ld	a0,104(sp)
    8001c8d6:	00000097          	auipc	ra,0x0
    8001c8da:	dc8080e7          	jalr	-568(ra) # 8001c69e <_ZN6kernel3ipc9semaphore9semaphore9get_value17ha36354007f7a90a5E>
    8001c8de:	2501                	sext.w	a0,a0
    8001c8e0:	f0aa                	sd	a0,96(sp)
    8001c8e2:	a009                	j	8001c8e4 <.LBB5_17+0x40>
    8001c8e4:	7506                	ld	a0,96(sp)
    8001c8e6:	4585                	li	a1,1
    8001c8e8:	00b54a63          	blt	a0,a1,8001c8fc <.LBB5_17+0x58>
    8001c8ec:	a009                	j	8001c8ee <.LBB5_17+0x4a>
            let sem_guard = self.sem.sem_lock.acquire();
    8001c8ee:	7526                	ld	a0,104(sp)
    8001c8f0:	ffff4097          	auipc	ra,0xffff4
    8001c8f4:	f1e080e7          	jalr	-226(ra) # 8001080e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    8001c8f8:	f52a                	sd	a0,168(sp)
    8001c8fa:	a011                	j	8001c8fe <.LBB5_17+0x5a>
        if self.sem.get_value() > 0{
    8001c8fc:	a8e5                	j	8001c9f4 <.LBB5_23+0x32>
            unsafe {
                PROC_MANAGER.wake_up(&self.sem as *const _ as usize);
    8001c8fe:	75a6                	ld	a1,104(sp)

000000008001c900 <.LBB5_18>:
    8001c900:	0003b517          	auipc	a0,0x3b
    8001c904:	ca050513          	addi	a0,a0,-864 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    8001c908:	ffff1097          	auipc	ra,0xffff1
    8001c90c:	ff8080e7          	jalr	-8(ra) # 8000d900 <_ZN6kernel7process7manager11ProcManager7wake_up17ha46b4d15ac07187bE>
    8001c910:	a009                	j	8001c912 <.LBB5_18+0x12>
            }
            println!("wake up in semaphore.rs {} {} {} {}", &self.id, &self.sem.cnt, &self.sem as *const _ as usize, &sem_guard as *const _ as usize);
    8001c912:	7526                	ld	a0,104(sp)
    8001c914:	02850593          	addi	a1,a0,40
    8001c918:	e2ae                	sd	a1,320(sp)
    8001c91a:	02050593          	addi	a1,a0,32
    8001c91e:	e6ae                	sd	a1,328(sp)
    8001c920:	eaaa                	sd	a0,336(sp)
    8001c922:	1128                	addi	a0,sp,168
    8001c924:	eeaa                	sd	a0,344(sp)
    8001c926:	0288                	addi	a0,sp,320
    8001c928:	f22a                	sd	a0,288(sp)
    8001c92a:	02b4                	addi	a3,sp,328
    8001c92c:	fc36                	sd	a3,56(sp)
    8001c92e:	f636                	sd	a3,296(sp)
    8001c930:	0a90                	addi	a2,sp,336
    8001c932:	e0b2                	sd	a2,64(sp)
    8001c934:	fa32                	sd	a2,304(sp)
    8001c936:	0aac                	addi	a1,sp,344
    8001c938:	e4ae                	sd	a1,72(sp)
    8001c93a:	fe2e                	sd	a1,312(sp)
    8001c93c:	f6aa                	sd	a0,360(sp)
    8001c93e:	fab6                	sd	a3,368(sp)
    8001c940:	feb2                	sd	a2,376(sp)
    8001c942:	e32e                	sd	a1,384(sp)

000000008001c944 <.LBB5_19>:
    8001c944:	00002597          	auipc	a1,0x2
    8001c948:	c5258593          	addi	a1,a1,-942 # 8001e596 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h3baa88b0b8ed59b0E>
    8001c94c:	00002097          	auipc	ra,0x2
    8001c950:	cd0080e7          	jalr	-816(ra) # 8001e61c <_ZN4core3fmt10ArgumentV13new17h4cc7035953f043f8E>
    8001c954:	e8aa                	sd	a0,80(sp)
    8001c956:	ecae                	sd	a1,88(sp)
    8001c958:	a009                	j	8001c95a <.LBB5_19+0x16>
    8001c95a:	7562                	ld	a0,56(sp)

000000008001c95c <.LBB5_20>:
    8001c95c:	00002597          	auipc	a1,0x2
    8001c960:	c3a58593          	addi	a1,a1,-966 # 8001e596 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h3baa88b0b8ed59b0E>
    8001c964:	00002097          	auipc	ra,0x2
    8001c968:	cb8080e7          	jalr	-840(ra) # 8001e61c <_ZN4core3fmt10ArgumentV13new17h4cc7035953f043f8E>
    8001c96c:	f42a                	sd	a0,40(sp)
    8001c96e:	f82e                	sd	a1,48(sp)
    8001c970:	a009                	j	8001c972 <.LBB5_20+0x16>
    8001c972:	6506                	ld	a0,64(sp)

000000008001c974 <.LBB5_21>:
    8001c974:	00008597          	auipc	a1,0x8
    8001c978:	f8e58593          	addi	a1,a1,-114 # 80024902 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h9c6c4af1578f7c29E>
    8001c97c:	00003097          	auipc	ra,0x3
    8001c980:	d24080e7          	jalr	-732(ra) # 8001f6a0 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    8001c984:	ec2a                	sd	a0,24(sp)
    8001c986:	f02e                	sd	a1,32(sp)
    8001c988:	a009                	j	8001c98a <.LBB5_21+0x16>
    8001c98a:	6526                	ld	a0,72(sp)

000000008001c98c <.LBB5_22>:
    8001c98c:	00008597          	auipc	a1,0x8
    8001c990:	f7658593          	addi	a1,a1,-138 # 80024902 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h9c6c4af1578f7c29E>
    8001c994:	00003097          	auipc	ra,0x3
    8001c998:	d0c080e7          	jalr	-756(ra) # 8001f6a0 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    8001c99c:	e42a                	sd	a0,8(sp)
    8001c99e:	e82e                	sd	a1,16(sp)
    8001c9a0:	a009                	j	8001c9a2 <.LBB5_22+0x16>
    8001c9a2:	6542                	ld	a0,16(sp)
    8001c9a4:	65a2                	ld	a1,8(sp)
    8001c9a6:	7602                	ld	a2,32(sp)
    8001c9a8:	66e2                	ld	a3,24(sp)
    8001c9aa:	7742                	ld	a4,48(sp)
    8001c9ac:	77a2                	ld	a5,40(sp)
    8001c9ae:	6866                	ld	a6,88(sp)
    8001c9b0:	68c6                	ld	a7,80(sp)
    8001c9b2:	f1c6                	sd	a7,224(sp)
    8001c9b4:	f5c2                	sd	a6,232(sp)
    8001c9b6:	f9be                	sd	a5,240(sp)
    8001c9b8:	fdba                	sd	a4,248(sp)
    8001c9ba:	e236                	sd	a3,256(sp)
    8001c9bc:	e632                	sd	a2,264(sp)
    8001c9be:	ea2e                	sd	a1,272(sp)
    8001c9c0:	ee2a                	sd	a0,280(sp)

000000008001c9c2 <.LBB5_23>:
    8001c9c2:	0000f597          	auipc	a1,0xf
    8001c9c6:	87658593          	addi	a1,a1,-1930 # 8002b238 <.L__unnamed_10>
    8001c9ca:	1908                	addi	a0,sp,176
    8001c9cc:	4615                	li	a2,5
    8001c9ce:	1194                	addi	a3,sp,224
    8001c9d0:	4711                	li	a4,4
    8001c9d2:	fffe9097          	auipc	ra,0xfffe9
    8001c9d6:	a98080e7          	jalr	-1384(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8001c9da:	a009                	j	8001c9dc <.LBB5_23+0x1a>
    8001c9dc:	1908                	addi	a0,sp,176
    8001c9de:	00001097          	auipc	ra,0x1
    8001c9e2:	36e080e7          	jalr	878(ra) # 8001dd4c <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8001c9e6:	a009                	j	8001c9e8 <.LBB5_23+0x26>
    8001c9e8:	1128                	addi	a0,sp,168
            // println!("SEM_MANAGER in sem_down {}",unsafe{&SEM_MANAGER.sems as *const _ as usize});
        }
    8001c9ea:	fffea097          	auipc	ra,0xfffea
    8001c9ee:	588080e7          	jalr	1416(ra) # 80006f72 <_ZN4core3ptr74drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$$LP$$RP$$GT$$GT$17he568be727488c8bbE>
    8001c9f2:	a009                	j	8001c9f4 <.LBB5_23+0x32>
    }
    8001c9f4:	60ba                	ld	ra,392(sp)
    8001c9f6:	6159                	addi	sp,sp,400
    8001c9f8:	8082                	ret

Disassembly of section .text._ZN6kernel3ipc9semaphore8SemTable5alloc17he7093796e56d9652E:

000000008001c9fa <_ZN6kernel3ipc9semaphore8SemTable5alloc17he7093796e56d9652E>:
        // Self{
        //     sems: semsTmp,
        //     st_lock: Spinlock::new((), "st_lock")
        // }
    }
    pub fn alloc(&mut self) -> i32{
    8001c9fa:	712d                	addi	sp,sp,-288
    8001c9fc:	ee06                	sd	ra,280(sp)
    8001c9fe:	e4aa                	sd	a0,72(sp)
    8001ca00:	f5aa                	sd	a0,232(sp)

000000008001ca02 <.LBB6_21>:
        println!("sem alloc");
    8001ca02:	0000f597          	auipc	a1,0xf
    8001ca06:	89e58593          	addi	a1,a1,-1890 # 8002b2a0 <.L__unnamed_11>

000000008001ca0a <.LBB6_22>:
    8001ca0a:	0000e697          	auipc	a3,0xe
    8001ca0e:	69e68693          	addi	a3,a3,1694 # 8002b0a8 <.L__unnamed_20>
    8001ca12:	08a8                	addi	a0,sp,88
    8001ca14:	4605                	li	a2,1
    8001ca16:	4701                	li	a4,0
    8001ca18:	fffe9097          	auipc	ra,0xfffe9
    8001ca1c:	a52080e7          	jalr	-1454(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8001ca20:	a009                	j	8001ca22 <.LBB6_22+0x18>
    8001ca22:	08a8                	addi	a0,sp,88
    8001ca24:	00001097          	auipc	ra,0x1
    8001ca28:	328080e7          	jalr	808(ra) # 8001dd4c <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8001ca2c:	a009                	j	8001ca2e <.LBB6_22+0x24>
    8001ca2e:	6526                	ld	a0,72(sp)
    8001ca30:	6589                	lui	a1,0x2
    8001ca32:	8005859b          	addiw	a1,a1,-2048
        let st_guard = self.st_lock.acquire();
    8001ca36:	952e                	add	a0,a0,a1
    8001ca38:	ffff4097          	auipc	ra,0xffff4
    8001ca3c:	dd6080e7          	jalr	-554(ra) # 8001080e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    8001ca40:	85aa                	mv	a1,a0
    8001ca42:	e0ae                	sd	a1,64(sp)
    8001ca44:	f9aa                	sd	a0,240(sp)
    8001ca46:	a009                	j	8001ca48 <.LBB6_22+0x3e>
    8001ca48:	6526                	ld	a0,72(sp)
    8001ca4a:	4581                	li	a1,0
        let mut resId = 0;
    8001ca4c:	caae                	sw	a1,84(sp)
    8001ca4e:	08000593          	li	a1,128
        for sem in self.sems.iter_mut(){
    8001ca52:	00001097          	auipc	ra,0x1
    8001ca56:	d6e080e7          	jalr	-658(ra) # 8001d7c0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17hdf73a8173be099ebE>
    8001ca5a:	f82a                	sd	a0,48(sp)
    8001ca5c:	fc2e                	sd	a1,56(sp)
    8001ca5e:	a009                	j	8001ca60 <.LBB6_22+0x56>
    8001ca60:	75e2                	ld	a1,56(sp)
    8001ca62:	7542                	ld	a0,48(sp)
    8001ca64:	fffee097          	auipc	ra,0xfffee
    8001ca68:	620080e7          	jalr	1568(ra) # 8000b084 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17had1f1a546667c559E>
    8001ca6c:	f02a                	sd	a0,32(sp)
    8001ca6e:	f42e                	sd	a1,40(sp)
    8001ca70:	a009                	j	8001ca72 <.LBB6_22+0x68>
    8001ca72:	7522                	ld	a0,40(sp)
    8001ca74:	7582                	ld	a1,32(sp)
    8001ca76:	e52e                	sd	a1,136(sp)
    8001ca78:	e92a                	sd	a0,144(sp)
    8001ca7a:	a009                	j	8001ca7c <.LBB6_22+0x72>
    8001ca7c:	0128                	addi	a0,sp,136
    8001ca7e:	fffef097          	auipc	ra,0xfffef
    8001ca82:	99e080e7          	jalr	-1634(ra) # 8000b41c <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he7c6aa33b7e64d1cE>
    8001ca86:	ed2a                	sd	a0,152(sp)
    8001ca88:	a009                	j	8001ca8a <.LBB6_22+0x80>
    8001ca8a:	656a                	ld	a0,152(sp)
    8001ca8c:	00a035b3          	snez	a1,a0
    8001ca90:	4581                	li	a1,0
    8001ca92:	00b50463          	beq	a0,a1,8001ca9a <.LBB6_22+0x90>
    8001ca96:	a009                	j	8001ca98 <.LBB6_22+0x8e>
    8001ca98:	a019                	j	8001ca9e <.LBB6_22+0x94>
    8001ca9a:	a045                	j	8001cb3a <.LBB6_24+0x28>
    8001ca9c:	0000                	unimp
    8001ca9e:	656a                	ld	a0,152(sp)
    8001caa0:	ec2a                	sd	a0,24(sp)
    8001caa2:	fdaa                	sd	a0,248(sp)
    8001caa4:	e22a                	sd	a0,256(sp)
    8001caa6:	e62a                	sd	a0,264(sp)
            if sem.used == false{
    8001caa8:	02c54503          	lbu	a0,44(a0)
    8001caac:	8905                	andi	a0,a0,1
    8001caae:	e115                	bnez	a0,8001cad2 <.LBB6_22+0xc8>
    8001cab0:	a009                	j	8001cab2 <.LBB6_22+0xa8>
    8001cab2:	6662                	ld	a2,24(sp)
    8001cab4:	6526                	ld	a0,72(sp)
    8001cab6:	6589                	lui	a1,0x2
    8001cab8:	8205859b          	addiw	a1,a1,-2016
                sem.id = self.semID;
    8001cabc:	952e                	add	a0,a0,a1
    8001cabe:	410c                	lw	a1,0(a0)
    8001cac0:	d60c                	sw	a1,40(a2)
                self.semID += 1;
    8001cac2:	4108                	lw	a0,0(a0)
    8001cac4:	00150593          	addi	a1,a0,1
    8001cac8:	e82e                	sd	a1,16(sp)
    8001caca:	2505                	addiw	a0,a0,1
    8001cacc:	08b51163          	bne	a0,a1,8001cb4e <.LBB6_25>
    8001cad0:	a011                	j	8001cad4 <.LBB6_22+0xca>
        for sem in self.sems.iter_mut(){
    8001cad2:	b76d                	j	8001ca7c <.LBB6_22+0x72>
    8001cad4:	65e2                	ld	a1,24(sp)
    8001cad6:	6542                	ld	a0,16(sp)
    8001cad8:	6626                	ld	a2,72(sp)
    8001cada:	6689                	lui	a3,0x2
    8001cadc:	8206869b          	addiw	a3,a3,-2016
                self.semID += 1;
    8001cae0:	9636                	add	a2,a2,a3
    8001cae2:	c208                	sw	a0,0(a2)
                resId = sem.id;
    8001cae4:	5588                	lw	a0,40(a1)
    8001cae6:	caaa                	sw	a0,84(sp)
    8001cae8:	4505                	li	a0,1
                sem.used = true;
    8001caea:	02a58623          	sb	a0,44(a1) # 202c <.Lline_table_start0+0x18>
    8001caee:	08c8                	addi	a0,sp,84

                println!("alloc in semaphore.rs, find one unused {}", resId);
    8001caf0:	f1aa                	sd	a0,224(sp)
    8001caf2:	ea2a                	sd	a0,272(sp)

000000008001caf4 <.LBB6_23>:
    8001caf4:	00008597          	auipc	a1,0x8
    8001caf8:	a7658593          	addi	a1,a1,-1418 # 8002456a <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17h1b385cecfac82c6bE>
    8001cafc:	00002097          	auipc	ra,0x2
    8001cb00:	b42080e7          	jalr	-1214(ra) # 8001e63e <_ZN4core3fmt10ArgumentV13new17h64cb168c9af0caf2E>
    8001cb04:	e02a                	sd	a0,0(sp)
    8001cb06:	e42e                	sd	a1,8(sp)
    8001cb08:	a009                	j	8001cb0a <.LBB6_23+0x16>
    8001cb0a:	6522                	ld	a0,8(sp)
    8001cb0c:	6582                	ld	a1,0(sp)
    8001cb0e:	e9ae                	sd	a1,208(sp)
    8001cb10:	edaa                	sd	a0,216(sp)

000000008001cb12 <.LBB6_24>:
    8001cb12:	0000e597          	auipc	a1,0xe
    8001cb16:	7de58593          	addi	a1,a1,2014 # 8002b2f0 <.L__unnamed_12>
    8001cb1a:	1108                	addi	a0,sp,160
    8001cb1c:	4609                	li	a2,2
    8001cb1e:	0994                	addi	a3,sp,208
    8001cb20:	4705                	li	a4,1
    8001cb22:	fffe9097          	auipc	ra,0xfffe9
    8001cb26:	948080e7          	jalr	-1720(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8001cb2a:	a009                	j	8001cb2c <.LBB6_24+0x1a>
    8001cb2c:	1108                	addi	a0,sp,160
    8001cb2e:	00001097          	auipc	ra,0x1
    8001cb32:	21e080e7          	jalr	542(ra) # 8001dd4c <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8001cb36:	a009                	j	8001cb38 <.LBB6_24+0x26>
    8001cb38:	a009                	j	8001cb3a <.LBB6_24+0x28>
                break;
            }
        }
        drop(st_guard);
    8001cb3a:	6506                	ld	a0,64(sp)
    8001cb3c:	00000097          	auipc	ra,0x0
    8001cb40:	4e4080e7          	jalr	1252(ra) # 8001d020 <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    8001cb44:	a009                	j	8001cb46 <.LBB6_24+0x34>
        resId
    }
    8001cb46:	4556                	lw	a0,84(sp)
    8001cb48:	60f2                	ld	ra,280(sp)
    8001cb4a:	6115                	addi	sp,sp,288
    8001cb4c:	8082                	ret

000000008001cb4e <.LBB6_25>:
                self.semID += 1;
    8001cb4e:	0000e517          	auipc	a0,0xe
    8001cb52:	5d250513          	addi	a0,a0,1490 # 8002b120 <str.1>

000000008001cb56 <.LBB6_26>:
    8001cb56:	0000e617          	auipc	a2,0xe
    8001cb5a:	75a60613          	addi	a2,a2,1882 # 8002b2b0 <.L__unnamed_13>
    8001cb5e:	45f1                	li	a1,28
    8001cb60:	00005097          	auipc	ra,0x5
    8001cb64:	716080e7          	jalr	1814(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel3ipc9semaphore8SemTable3get17h969ea55db514a2ceE:

000000008001cb6a <_ZN6kernel3ipc9semaphore8SemTable3get17h969ea55db514a2ceE>:

    pub fn get(&mut self, id: i32) -> i32{
    8001cb6a:	712d                	addi	sp,sp,-288
    8001cb6c:	ee06                	sd	ra,280(sp)
    8001cb6e:	862a                	mv	a2,a0
    8001cb70:	fc32                	sd	a2,56(sp)
    8001cb72:	0005851b          	sext.w	a0,a1
    8001cb76:	86ae                	mv	a3,a1
    8001cb78:	e0b6                	sd	a3,64(sp)
    8001cb7a:	f5b2                	sd	a2,232(sp)
    8001cb7c:	dbae                	sw	a1,244(sp)
    8001cb7e:	55fd                	li	a1,-1
        
        if id == -1{
    8001cb80:	02b51363          	bne	a0,a1,8001cba6 <.LBB7_21+0x18>
    8001cb84:	a009                	j	8001cb86 <.LBB7_20>

000000008001cb86 <.LBB7_20>:
            println!("sem alloc in semaphore.rs");
    8001cb86:	0000e597          	auipc	a1,0xe
    8001cb8a:	7e258593          	addi	a1,a1,2018 # 8002b368 <.L__unnamed_14>

000000008001cb8e <.LBB7_21>:
    8001cb8e:	0000e697          	auipc	a3,0xe
    8001cb92:	51a68693          	addi	a3,a3,1306 # 8002b0a8 <.L__unnamed_20>
    8001cb96:	0888                	addi	a0,sp,80
    8001cb98:	4605                	li	a2,1
    8001cb9a:	4701                	li	a4,0
    8001cb9c:	fffe9097          	auipc	ra,0xfffe9
    8001cba0:	8ce080e7          	jalr	-1842(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8001cba4:	a839                	j	8001cbc2 <.LBB7_21+0x34>
    8001cba6:	7562                	ld	a0,56(sp)
    8001cba8:	4585                	li	a1,1
    8001cbaa:	1582                	slli	a1,a1,0x20
    8001cbac:	15fd                	addi	a1,a1,-1
            self.alloc()
        }else{
            let mut res = -1;
    8001cbae:	c32e                	sw	a1,132(sp)
    8001cbb0:	08000593          	li	a1,128
            for sem in self.sems.iter_mut(){
    8001cbb4:	00001097          	auipc	ra,0x1
    8001cbb8:	c0c080e7          	jalr	-1012(ra) # 8001d7c0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17hdf73a8173be099ebE>
    8001cbbc:	f42a                	sd	a0,40(sp)
    8001cbbe:	f82e                	sd	a1,48(sp)
    8001cbc0:	a831                	j	8001cbdc <.LBB7_21+0x4e>
    8001cbc2:	0888                	addi	a0,sp,80
            println!("sem alloc in semaphore.rs");
    8001cbc4:	00001097          	auipc	ra,0x1
    8001cbc8:	188080e7          	jalr	392(ra) # 8001dd4c <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8001cbcc:	a009                	j	8001cbce <.LBB7_21+0x40>
            self.alloc()
    8001cbce:	7562                	ld	a0,56(sp)
    8001cbd0:	00000097          	auipc	ra,0x0
    8001cbd4:	e2a080e7          	jalr	-470(ra) # 8001c9fa <_ZN6kernel3ipc9semaphore8SemTable5alloc17he7093796e56d9652E>
    8001cbd8:	c6aa                	sw	a0,76(sp)
    8001cbda:	a075                	j	8001cc86 <.LBB7_23+0x2c>
            for sem in self.sems.iter_mut(){
    8001cbdc:	75c2                	ld	a1,48(sp)
    8001cbde:	7522                	ld	a0,40(sp)
    8001cbe0:	fffee097          	auipc	ra,0xfffee
    8001cbe4:	4a4080e7          	jalr	1188(ra) # 8000b084 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17had1f1a546667c559E>
    8001cbe8:	ec2a                	sd	a0,24(sp)
    8001cbea:	f02e                	sd	a1,32(sp)
    8001cbec:	a009                	j	8001cbee <.LBB7_21+0x60>
    8001cbee:	7502                	ld	a0,32(sp)
    8001cbf0:	65e2                	ld	a1,24(sp)
    8001cbf2:	e52e                	sd	a1,136(sp)
    8001cbf4:	e92a                	sd	a0,144(sp)
    8001cbf6:	a009                	j	8001cbf8 <.LBB7_21+0x6a>
    8001cbf8:	0128                	addi	a0,sp,136
    8001cbfa:	fffef097          	auipc	ra,0xfffef
    8001cbfe:	822080e7          	jalr	-2014(ra) # 8000b41c <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he7c6aa33b7e64d1cE>
    8001cc02:	ed2a                	sd	a0,152(sp)
    8001cc04:	a009                	j	8001cc06 <.LBB7_21+0x78>
    8001cc06:	656a                	ld	a0,152(sp)
    8001cc08:	00a035b3          	snez	a1,a0
    8001cc0c:	4581                	li	a1,0
    8001cc0e:	00b50463          	beq	a0,a1,8001cc16 <.LBB7_21+0x88>
    8001cc12:	a009                	j	8001cc14 <.LBB7_21+0x86>
    8001cc14:	a005                	j	8001cc34 <.LBB7_22+0x18>
    8001cc16:	0148                	addi	a0,sp,132
                if sem.id == id{
                    res = id;
                }
            }
            println!("sem get in semaphore.rs {}", res);
    8001cc18:	f1aa                	sd	a0,224(sp)
    8001cc1a:	ea2a                	sd	a0,272(sp)

000000008001cc1c <.LBB7_22>:
    8001cc1c:	00008597          	auipc	a1,0x8
    8001cc20:	94e58593          	addi	a1,a1,-1714 # 8002456a <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17h1b385cecfac82c6bE>
    8001cc24:	00002097          	auipc	ra,0x2
    8001cc28:	a1a080e7          	jalr	-1510(ra) # 8001e63e <_ZN4core3fmt10ArgumentV13new17h64cb168c9af0caf2E>
    8001cc2c:	e42a                	sd	a0,8(sp)
    8001cc2e:	e82e                	sd	a1,16(sp)
    8001cc30:	a00d                	j	8001cc52 <.LBB7_22+0x36>
            for sem in self.sems.iter_mut(){
    8001cc32:	0000                	unimp
    8001cc34:	6586                	ld	a1,64(sp)
    8001cc36:	656a                	ld	a0,152(sp)
    8001cc38:	fdaa                	sd	a0,248(sp)
    8001cc3a:	e22a                	sd	a0,256(sp)
    8001cc3c:	e62a                	sd	a0,264(sp)
                if sem.id == id{
    8001cc3e:	5508                	lw	a0,40(a0)
    8001cc40:	2581                	sext.w	a1,a1
    8001cc42:	00b51663          	bne	a0,a1,8001cc4e <.LBB7_22+0x32>
    8001cc46:	a009                	j	8001cc48 <.LBB7_22+0x2c>
                    res = id;
    8001cc48:	6506                	ld	a0,64(sp)
    8001cc4a:	c32a                	sw	a0,132(sp)
                if sem.id == id{
    8001cc4c:	a011                	j	8001cc50 <.LBB7_22+0x34>
    8001cc4e:	a009                	j	8001cc50 <.LBB7_22+0x34>
            for sem in self.sems.iter_mut(){
    8001cc50:	b765                	j	8001cbf8 <.LBB7_21+0x6a>
            println!("sem get in semaphore.rs {}", res);
    8001cc52:	6542                	ld	a0,16(sp)
    8001cc54:	65a2                	ld	a1,8(sp)
    8001cc56:	e9ae                	sd	a1,208(sp)
    8001cc58:	edaa                	sd	a0,216(sp)

000000008001cc5a <.LBB7_23>:
    8001cc5a:	0000e597          	auipc	a1,0xe
    8001cc5e:	6ce58593          	addi	a1,a1,1742 # 8002b328 <.L__unnamed_15>
    8001cc62:	1108                	addi	a0,sp,160
    8001cc64:	4609                	li	a2,2
    8001cc66:	0994                	addi	a3,sp,208
    8001cc68:	4705                	li	a4,1
    8001cc6a:	fffe9097          	auipc	ra,0xfffe9
    8001cc6e:	800080e7          	jalr	-2048(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8001cc72:	a009                	j	8001cc74 <.LBB7_23+0x1a>
    8001cc74:	1108                	addi	a0,sp,160
    8001cc76:	00001097          	auipc	ra,0x1
    8001cc7a:	0d6080e7          	jalr	214(ra) # 8001dd4c <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8001cc7e:	a009                	j	8001cc80 <.LBB7_23+0x26>
            res
    8001cc80:	451a                	lw	a0,132(sp)
    8001cc82:	c6aa                	sw	a0,76(sp)
        if id == -1{
    8001cc84:	a009                	j	8001cc86 <.LBB7_23+0x2c>
        }
    }
    8001cc86:	4536                	lw	a0,76(sp)
    8001cc88:	60f2                	ld	ra,280(sp)
    8001cc8a:	6115                	addi	sp,sp,288
    8001cc8c:	8082                	ret

Disassembly of section .text._ZN6kernel3ipc9semaphore8SemTable3put17hf81380ccacc98283E:

000000008001cc8e <_ZN6kernel3ipc9semaphore8SemTable3put17hf81380ccacc98283E>:

    pub fn put(&mut self, id: i32) -> i32{
    8001cc8e:	7131                	addi	sp,sp,-192
    8001cc90:	fd06                	sd	ra,184(sp)
    8001cc92:	f82a                	sd	a0,48(sp)
    8001cc94:	862e                	mv	a2,a1
    8001cc96:	fc32                	sd	a2,56(sp)
    8001cc98:	e92a                	sd	a0,144(sp)
    8001cc9a:	cf2e                	sw	a1,156(sp)

000000008001cc9c <.LBB8_14>:
        println!("sem put");
    8001cc9c:	0000e597          	auipc	a1,0xe
    8001cca0:	6dc58593          	addi	a1,a1,1756 # 8002b378 <.L__unnamed_16>

000000008001cca4 <.LBB8_15>:
    8001cca4:	0000e697          	auipc	a3,0xe
    8001cca8:	40468693          	addi	a3,a3,1028 # 8002b0a8 <.L__unnamed_20>
    8001ccac:	00a8                	addi	a0,sp,72
    8001ccae:	4605                	li	a2,1
    8001ccb0:	4701                	li	a4,0
    8001ccb2:	fffe8097          	auipc	ra,0xfffe8
    8001ccb6:	7b8080e7          	jalr	1976(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8001ccba:	a009                	j	8001ccbc <.LBB8_15+0x18>
    8001ccbc:	00a8                	addi	a0,sp,72
    8001ccbe:	00001097          	auipc	ra,0x1
    8001ccc2:	08e080e7          	jalr	142(ra) # 8001dd4c <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8001ccc6:	a009                	j	8001ccc8 <.LBB8_15+0x24>
    8001ccc8:	7542                	ld	a0,48(sp)
    8001ccca:	4585                	li	a1,1
    8001cccc:	1582                	slli	a1,a1,0x20
    8001ccce:	15fd                	addi	a1,a1,-1
        let mut res = -1;
    8001ccd0:	c2ae                	sw	a1,68(sp)
    8001ccd2:	08000593          	li	a1,128
        for sem in self.sems.iter_mut(){
    8001ccd6:	00001097          	auipc	ra,0x1
    8001ccda:	aea080e7          	jalr	-1302(ra) # 8001d7c0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17hdf73a8173be099ebE>
    8001ccde:	f02a                	sd	a0,32(sp)
    8001cce0:	f42e                	sd	a1,40(sp)
    8001cce2:	a009                	j	8001cce4 <.LBB8_15+0x40>
    8001cce4:	75a2                	ld	a1,40(sp)
    8001cce6:	7502                	ld	a0,32(sp)
    8001cce8:	fffee097          	auipc	ra,0xfffee
    8001ccec:	39c080e7          	jalr	924(ra) # 8000b084 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17had1f1a546667c559E>
    8001ccf0:	e82a                	sd	a0,16(sp)
    8001ccf2:	ec2e                	sd	a1,24(sp)
    8001ccf4:	a009                	j	8001ccf6 <.LBB8_15+0x52>
    8001ccf6:	6562                	ld	a0,24(sp)
    8001ccf8:	65c2                	ld	a1,16(sp)
    8001ccfa:	fcae                	sd	a1,120(sp)
    8001ccfc:	e12a                	sd	a0,128(sp)
    8001ccfe:	a009                	j	8001cd00 <.LBB8_15+0x5c>
    8001cd00:	18a8                	addi	a0,sp,120
    8001cd02:	fffee097          	auipc	ra,0xfffee
    8001cd06:	71a080e7          	jalr	1818(ra) # 8000b41c <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he7c6aa33b7e64d1cE>
    8001cd0a:	e52a                	sd	a0,136(sp)
    8001cd0c:	a009                	j	8001cd0e <.LBB8_15+0x6a>
    8001cd0e:	652a                	ld	a0,136(sp)
    8001cd10:	00a035b3          	snez	a1,a0
    8001cd14:	4581                	li	a1,0
    8001cd16:	00b50463          	beq	a0,a1,8001cd1e <.LBB8_15+0x7a>
    8001cd1a:	a009                	j	8001cd1c <.LBB8_15+0x78>
    8001cd1c:	a031                	j	8001cd28 <.LBB8_15+0x84>
                sem.used = false;
                res = 0;
            }
        }
        res
    }
    8001cd1e:	4516                	lw	a0,68(sp)
    8001cd20:	70ea                	ld	ra,184(sp)
    8001cd22:	6129                	addi	sp,sp,192
    8001cd24:	8082                	ret
        for sem in self.sems.iter_mut(){
    8001cd26:	0000                	unimp
    8001cd28:	75e2                	ld	a1,56(sp)
    8001cd2a:	652a                	ld	a0,136(sp)
    8001cd2c:	e42a                	sd	a0,8(sp)
    8001cd2e:	f12a                	sd	a0,160(sp)
    8001cd30:	f52a                	sd	a0,168(sp)
    8001cd32:	f92a                	sd	a0,176(sp)
            if sem.id == id{
    8001cd34:	5508                	lw	a0,40(a0)
    8001cd36:	2581                	sext.w	a1,a1
    8001cd38:	00b51963          	bne	a0,a1,8001cd4a <.LBB8_15+0xa6>
    8001cd3c:	a009                	j	8001cd3e <.LBB8_15+0x9a>
    8001cd3e:	65a2                	ld	a1,8(sp)
    8001cd40:	4501                	li	a0,0
                sem.used = false;
    8001cd42:	02a58623          	sb	a0,44(a1)
                res = 0;
    8001cd46:	c2aa                	sw	a0,68(sp)
            if sem.id == id{
    8001cd48:	a011                	j	8001cd4c <.LBB8_15+0xa8>
    8001cd4a:	a009                	j	8001cd4c <.LBB8_15+0xa8>
        for sem in self.sems.iter_mut(){
    8001cd4c:	bf55                	j	8001cd00 <.LBB8_15+0x5c>

Disassembly of section .text._ZN6kernel3ipc9semaphore8SemTable10getSemById17hc45b63cab7252ea2E:

000000008001cd4e <_ZN6kernel3ipc9semaphore8SemTable10getSemById17hc45b63cab7252ea2E>:

    pub fn getSemById(&mut self, id: i32) -> Option<&mut sem_t>{
    8001cd4e:	716d                	addi	sp,sp,-272
    8001cd50:	e606                	sd	ra,264(sp)
    8001cd52:	fc2a                	sd	a0,56(sp)
    8001cd54:	c2ae                	sw	a1,68(sp)
    8001cd56:	f1aa                	sd	a0,224(sp)

000000008001cd58 <.LBB9_17>:
        println!("sem find");
    8001cd58:	0000e597          	auipc	a1,0xe
    8001cd5c:	64058593          	addi	a1,a1,1600 # 8002b398 <.L__unnamed_17>

000000008001cd60 <.LBB9_18>:
    8001cd60:	0000e697          	auipc	a3,0xe
    8001cd64:	34868693          	addi	a3,a3,840 # 8002b0a8 <.L__unnamed_20>
    8001cd68:	0888                	addi	a0,sp,80
    8001cd6a:	4605                	li	a2,1
    8001cd6c:	4701                	li	a4,0
    8001cd6e:	fffe8097          	auipc	ra,0xfffe8
    8001cd72:	6fc080e7          	jalr	1788(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8001cd76:	a009                	j	8001cd78 <.LBB9_18+0x18>
    8001cd78:	0888                	addi	a0,sp,80
    8001cd7a:	00001097          	auipc	ra,0x1
    8001cd7e:	fd2080e7          	jalr	-46(ra) # 8001dd4c <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8001cd82:	a009                	j	8001cd84 <.LBB9_18+0x24>
        // let mut semRes: &mut sem_t;
        for sem in self.sems.iter_mut(){
    8001cd84:	7562                	ld	a0,56(sp)
    8001cd86:	08000593          	li	a1,128
    8001cd8a:	00001097          	auipc	ra,0x1
    8001cd8e:	a36080e7          	jalr	-1482(ra) # 8001d7c0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17hdf73a8173be099ebE>
    8001cd92:	f42a                	sd	a0,40(sp)
    8001cd94:	f82e                	sd	a1,48(sp)
    8001cd96:	a009                	j	8001cd98 <.LBB9_18+0x38>
    8001cd98:	75c2                	ld	a1,48(sp)
    8001cd9a:	7522                	ld	a0,40(sp)
    8001cd9c:	fffee097          	auipc	ra,0xfffee
    8001cda0:	2e8080e7          	jalr	744(ra) # 8000b084 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17had1f1a546667c559E>
    8001cda4:	ec2a                	sd	a0,24(sp)
    8001cda6:	f02e                	sd	a1,32(sp)
    8001cda8:	a009                	j	8001cdaa <.LBB9_18+0x4a>
    8001cdaa:	7502                	ld	a0,32(sp)
    8001cdac:	65e2                	ld	a1,24(sp)
    8001cdae:	e12e                	sd	a1,128(sp)
    8001cdb0:	e52a                	sd	a0,136(sp)
    8001cdb2:	a009                	j	8001cdb4 <.LBB9_18+0x54>
    8001cdb4:	0108                	addi	a0,sp,128
    8001cdb6:	fffee097          	auipc	ra,0xfffee
    8001cdba:	666080e7          	jalr	1638(ra) # 8000b41c <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he7c6aa33b7e64d1cE>
    8001cdbe:	e92a                	sd	a0,144(sp)
    8001cdc0:	a009                	j	8001cdc2 <.LBB9_18+0x62>
    8001cdc2:	654a                	ld	a0,144(sp)
    8001cdc4:	00a035b3          	snez	a1,a0
    8001cdc8:	4581                	li	a1,0
    8001cdca:	00b50463          	beq	a0,a1,8001cdd2 <.LBB9_18+0x72>
    8001cdce:	a009                	j	8001cdd0 <.LBB9_18+0x70>
    8001cdd0:	a029                	j	8001cdda <.LBB9_18+0x7a>
    8001cdd2:	4501                	li	a0,0
            if sem.id == id{
                println!("sem find !!!!{}", id);
                return Some(sem)
            }
        }
        None
    8001cdd4:	e4aa                	sd	a0,72(sp)
    }
    8001cdd6:	a0ad                	j	8001ce40 <.LBB9_20+0x2c>
        for sem in self.sems.iter_mut(){
    8001cdd8:	0000                	unimp
    8001cdda:	654a                	ld	a0,144(sp)
    8001cddc:	e82a                	sd	a0,16(sp)
    8001cdde:	f5aa                	sd	a0,232(sp)
    8001cde0:	f9aa                	sd	a0,240(sp)
    8001cde2:	fdaa                	sd	a0,248(sp)
            if sem.id == id{
    8001cde4:	5508                	lw	a0,40(a0)
    8001cde6:	4596                	lw	a1,68(sp)
    8001cde8:	02b51163          	bne	a0,a1,8001ce0a <.LBB9_19+0x16>
    8001cdec:	a009                	j	8001cdee <.LBB9_18+0x8e>
    8001cdee:	00c8                	addi	a0,sp,68
                println!("sem find !!!!{}", id);
    8001cdf0:	edaa                	sd	a0,216(sp)
    8001cdf2:	e22a                	sd	a0,256(sp)

000000008001cdf4 <.LBB9_19>:
    8001cdf4:	00007597          	auipc	a1,0x7
    8001cdf8:	77658593          	addi	a1,a1,1910 # 8002456a <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17h1b385cecfac82c6bE>
    8001cdfc:	00002097          	auipc	ra,0x2
    8001ce00:	842080e7          	jalr	-1982(ra) # 8001e63e <_ZN4core3fmt10ArgumentV13new17h64cb168c9af0caf2E>
    8001ce04:	e02a                	sd	a0,0(sp)
    8001ce06:	e42e                	sd	a1,8(sp)
    8001ce08:	a011                	j	8001ce0c <.LBB9_19+0x18>
        for sem in self.sems.iter_mut(){
    8001ce0a:	b76d                	j	8001cdb4 <.LBB9_18+0x54>
                println!("sem find !!!!{}", id);
    8001ce0c:	6522                	ld	a0,8(sp)
    8001ce0e:	6582                	ld	a1,0(sp)
    8001ce10:	e5ae                	sd	a1,200(sp)
    8001ce12:	e9aa                	sd	a0,208(sp)

000000008001ce14 <.LBB9_20>:
    8001ce14:	0000e597          	auipc	a1,0xe
    8001ce18:	5a458593          	addi	a1,a1,1444 # 8002b3b8 <.L__unnamed_18>
    8001ce1c:	0928                	addi	a0,sp,152
    8001ce1e:	4609                	li	a2,2
    8001ce20:	01b4                	addi	a3,sp,200
    8001ce22:	4705                	li	a4,1
    8001ce24:	fffe8097          	auipc	ra,0xfffe8
    8001ce28:	646080e7          	jalr	1606(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8001ce2c:	a009                	j	8001ce2e <.LBB9_20+0x1a>
    8001ce2e:	0928                	addi	a0,sp,152
    8001ce30:	00001097          	auipc	ra,0x1
    8001ce34:	f1c080e7          	jalr	-228(ra) # 8001dd4c <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8001ce38:	a009                	j	8001ce3a <.LBB9_20+0x26>
                return Some(sem)
    8001ce3a:	6542                	ld	a0,16(sp)
    8001ce3c:	e4aa                	sd	a0,72(sp)
    }
    8001ce3e:	a009                	j	8001ce40 <.LBB9_20+0x2c>
    8001ce40:	6526                	ld	a0,72(sp)
    8001ce42:	60b2                	ld	ra,264(sp)
    8001ce44:	6151                	addi	sp,sp,272
    8001ce46:	8082                	ret

Disassembly of section .text._ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hc0b1197304dd53e6E:

000000008001ce48 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hc0b1197304dd53e6E>:
    pub const fn as_ptr(&self) -> *const T {
    8001ce48:	1141                	addi	sp,sp,-16
    8001ce4a:	e02a                	sd	a0,0(sp)
    8001ce4c:	e42e                	sd	a1,8(sp)
    }
    8001ce4e:	0141                	addi	sp,sp,16
    8001ce50:	8082                	ret

Disassembly of section .text._ZN105_$LT$core..iter..adapters..step_by..StepBy$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h04f2168711040ee1E:

000000008001ce52 <_ZN105_$LT$core..iter..adapters..step_by..StepBy$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h04f2168711040ee1E>:
    I: Iterator,
{
    type Item = I::Item;

    #[inline]
    fn next(&mut self) -> Option<Self::Item> {
    8001ce52:	1101                	addi	sp,sp,-32
    8001ce54:	ec06                	sd	ra,24(sp)
    8001ce56:	e02a                	sd	a0,0(sp)
    8001ce58:	e82a                	sd	a0,16(sp)
        if self.first_take {
    8001ce5a:	01054503          	lbu	a0,16(a0)
    8001ce5e:	8905                	andi	a0,a0,1
    8001ce60:	4581                	li	a1,0
    8001ce62:	00b50f63          	beq	a0,a1,8001ce80 <_ZN105_$LT$core..iter..adapters..step_by..StepBy$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h04f2168711040ee1E+0x2e>
    8001ce66:	a009                	j	8001ce68 <_ZN105_$LT$core..iter..adapters..step_by..StepBy$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h04f2168711040ee1E+0x16>
    8001ce68:	6502                	ld	a0,0(sp)
    8001ce6a:	4581                	li	a1,0
            self.first_take = false;
    8001ce6c:	00b50823          	sb	a1,16(a0)
            self.iter.next()
    8001ce70:	0521                	addi	a0,a0,8
    8001ce72:	fffef097          	auipc	ra,0xfffef
    8001ce76:	a64080e7          	jalr	-1436(ra) # 8000b8d6 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17he2f0092c6efc86cdE>
    8001ce7a:	c42a                	sw	a0,8(sp)
    8001ce7c:	c62e                	sw	a1,12(sp)
    8001ce7e:	a821                	j	8001ce96 <_ZN105_$LT$core..iter..adapters..step_by..StepBy$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h04f2168711040ee1E+0x44>
        } else {
            self.iter.nth(self.step)
    8001ce80:	6582                	ld	a1,0(sp)
    8001ce82:	00858513          	addi	a0,a1,8
    8001ce86:	618c                	ld	a1,0(a1)
    8001ce88:	fffef097          	auipc	ra,0xfffef
    8001ce8c:	8e8080e7          	jalr	-1816(ra) # 8000b770 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h3de1e189a1a61c83E>
    8001ce90:	c42a                	sw	a0,8(sp)
    8001ce92:	c62e                	sw	a1,12(sp)
    8001ce94:	a011                	j	8001ce98 <_ZN105_$LT$core..iter..adapters..step_by..StepBy$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h04f2168711040ee1E+0x46>
        if self.first_take {
    8001ce96:	a011                	j	8001ce9a <_ZN105_$LT$core..iter..adapters..step_by..StepBy$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h04f2168711040ee1E+0x48>
    8001ce98:	a009                	j	8001ce9a <_ZN105_$LT$core..iter..adapters..step_by..StepBy$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h04f2168711040ee1E+0x48>
        }
    }
    8001ce9a:	4522                	lw	a0,8(sp)
    8001ce9c:	45b2                	lw	a1,12(sp)
    8001ce9e:	60e2                	ld	ra,24(sp)
    8001cea0:	6105                	addi	sp,sp,32
    8001cea2:	8082                	ret

Disassembly of section .text._ZN105_$LT$core..iter..adapters..step_by..StepBy$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h75ab964dca744767E:

000000008001cea4 <_ZN105_$LT$core..iter..adapters..step_by..StepBy$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h75ab964dca744767E>:
    fn next(&mut self) -> Option<Self::Item> {
    8001cea4:	7179                	addi	sp,sp,-48
    8001cea6:	f406                	sd	ra,40(sp)
    8001cea8:	e42a                	sd	a0,8(sp)
    8001ceaa:	f02a                	sd	a0,32(sp)
        if self.first_take {
    8001ceac:	01854503          	lbu	a0,24(a0)
    8001ceb0:	8905                	andi	a0,a0,1
    8001ceb2:	4581                	li	a1,0
    8001ceb4:	00b50e63          	beq	a0,a1,8001ced0 <_ZN105_$LT$core..iter..adapters..step_by..StepBy$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h75ab964dca744767E+0x2c>
    8001ceb8:	a009                	j	8001ceba <_ZN105_$LT$core..iter..adapters..step_by..StepBy$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h75ab964dca744767E+0x16>
    8001ceba:	6522                	ld	a0,8(sp)
    8001cebc:	4581                	li	a1,0
            self.first_take = false;
    8001cebe:	00b50c23          	sb	a1,24(a0)
            self.iter.next()
    8001cec2:	00003097          	auipc	ra,0x3
    8001cec6:	a12080e7          	jalr	-1518(ra) # 8001f8d4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE>
    8001ceca:	e82a                	sd	a0,16(sp)
    8001cecc:	ec2e                	sd	a1,24(sp)
    8001cece:	a811                	j	8001cee2 <_ZN105_$LT$core..iter..adapters..step_by..StepBy$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h75ab964dca744767E+0x3e>
            self.iter.nth(self.step)
    8001ced0:	6522                	ld	a0,8(sp)
    8001ced2:	690c                	ld	a1,16(a0)
    8001ced4:	fffee097          	auipc	ra,0xfffee
    8001ced8:	7b0080e7          	jalr	1968(ra) # 8000b684 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h1068366d302d8741E>
    8001cedc:	e82a                	sd	a0,16(sp)
    8001cede:	ec2e                	sd	a1,24(sp)
    8001cee0:	a011                	j	8001cee4 <_ZN105_$LT$core..iter..adapters..step_by..StepBy$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h75ab964dca744767E+0x40>
        if self.first_take {
    8001cee2:	a011                	j	8001cee6 <_ZN105_$LT$core..iter..adapters..step_by..StepBy$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h75ab964dca744767E+0x42>
    8001cee4:	a009                	j	8001cee6 <_ZN105_$LT$core..iter..adapters..step_by..StepBy$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h75ab964dca744767E+0x42>
    }
    8001cee6:	6542                	ld	a0,16(sp)
    8001cee8:	65e2                	ld	a1,24(sp)
    8001ceea:	70a2                	ld	ra,40(sp)
    8001ceec:	6145                	addi	sp,sp,48
    8001ceee:	8082                	ret

Disassembly of section .text._ZN4core4iter8adapters7step_by15StepBy$LT$I$GT$3new17h4faa8304472101dfE:

000000008001cef0 <_ZN4core4iter8adapters7step_by15StepBy$LT$I$GT$3new17h4faa8304472101dfE>:
    pub(in crate::iter) fn new(iter: I, step: usize) -> StepBy<I> {
    8001cef0:	7139                	addi	sp,sp,-64
    8001cef2:	e436                	sd	a3,8(sp)
    8001cef4:	e832                	sd	a2,16(sp)
    8001cef6:	ec2e                	sd	a1,24(sp)
    8001cef8:	f02a                	sd	a0,32(sp)
    8001cefa:	f42e                	sd	a1,40(sp)
    8001cefc:	f832                	sd	a2,48(sp)
    8001cefe:	fc36                	sd	a3,56(sp)
    8001cf00:	4501                	li	a0,0
        assert!(step != 0);
    8001cf02:	02a69163          	bne	a3,a0,8001cf24 <.LBB2_4+0x14>
    8001cf06:	a009                	j	8001cf08 <.LBB2_3>

000000008001cf08 <.LBB2_3>:
    8001cf08:	0000e517          	auipc	a0,0xe
    8001cf0c:	4d050513          	addi	a0,a0,1232 # 8002b3d8 <.L__unnamed_1>

000000008001cf10 <.LBB2_4>:
    8001cf10:	0000e617          	auipc	a2,0xe
    8001cf14:	57060613          	addi	a2,a2,1392 # 8002b480 <.L__unnamed_2>
    8001cf18:	45ed                	li	a1,27
    8001cf1a:	00005097          	auipc	ra,0x5
    8001cf1e:	35c080e7          	jalr	860(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8001cf22:	0000                	unimp
        StepBy { iter, step: step - 1, first_take: true }
    8001cf24:	7582                	ld	a1,32(sp)
    8001cf26:	6642                	ld	a2,16(sp)
    8001cf28:	66e2                	ld	a3,24(sp)
    8001cf2a:	6522                	ld	a0,8(sp)
    8001cf2c:	157d                	addi	a0,a0,-1
    8001cf2e:	e194                	sd	a3,0(a1)
    8001cf30:	e590                	sd	a2,8(a1)
    8001cf32:	e988                	sd	a0,16(a1)
    8001cf34:	4505                	li	a0,1
    8001cf36:	00a58c23          	sb	a0,24(a1)
    }
    8001cf3a:	6121                	addi	sp,sp,64
    8001cf3c:	8082                	ret

Disassembly of section .text._ZN4core4iter8adapters7step_by15StepBy$LT$I$GT$3new17h6692f5ddcbcdc828E:

000000008001cf3e <_ZN4core4iter8adapters7step_by15StepBy$LT$I$GT$3new17h6692f5ddcbcdc828E>:
    pub(in crate::iter) fn new(iter: I, step: usize) -> StepBy<I> {
    8001cf3e:	7179                	addi	sp,sp,-48
    8001cf40:	e036                	sd	a3,0(sp)
    8001cf42:	e42a                	sd	a0,8(sp)
    8001cf44:	8532                	mv	a0,a2
    8001cf46:	e82a                	sd	a0,16(sp)
    8001cf48:	852e                	mv	a0,a1
    8001cf4a:	ec2a                	sd	a0,24(sp)
    8001cf4c:	d02e                	sw	a1,32(sp)
    8001cf4e:	d232                	sw	a2,36(sp)
    8001cf50:	f436                	sd	a3,40(sp)
    8001cf52:	4501                	li	a0,0
        assert!(step != 0);
    8001cf54:	02a69163          	bne	a3,a0,8001cf76 <.LBB3_4+0x14>
    8001cf58:	a009                	j	8001cf5a <.LBB3_3>

000000008001cf5a <.LBB3_3>:
    8001cf5a:	0000e517          	auipc	a0,0xe
    8001cf5e:	47e50513          	addi	a0,a0,1150 # 8002b3d8 <.L__unnamed_1>

000000008001cf62 <.LBB3_4>:
    8001cf62:	0000e617          	auipc	a2,0xe
    8001cf66:	51e60613          	addi	a2,a2,1310 # 8002b480 <.L__unnamed_2>
    8001cf6a:	45ed                	li	a1,27
    8001cf6c:	00005097          	auipc	ra,0x5
    8001cf70:	30a080e7          	jalr	778(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8001cf74:	0000                	unimp
        StepBy { iter, step: step - 1, first_take: true }
    8001cf76:	65a2                	ld	a1,8(sp)
    8001cf78:	6642                	ld	a2,16(sp)
    8001cf7a:	66e2                	ld	a3,24(sp)
    8001cf7c:	6502                	ld	a0,0(sp)
    8001cf7e:	157d                	addi	a0,a0,-1
    8001cf80:	c594                	sw	a3,8(a1)
    8001cf82:	c5d0                	sw	a2,12(a1)
    8001cf84:	e188                	sd	a0,0(a1)
    8001cf86:	4505                	li	a0,1
    8001cf88:	00a58823          	sb	a0,16(a1)
    }
    8001cf8c:	6145                	addi	sp,sp,48
    8001cf8e:	8082                	ret

Disassembly of section .text._ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h09fa161dbb9bcdd3E:

000000008001cf90 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h09fa161dbb9bcdd3E>:
    fn into_iter(self) -> I {
    8001cf90:	1141                	addi	sp,sp,-16
    8001cf92:	e42e                	sd	a1,8(sp)
    8001cf94:	85aa                	mv	a1,a0
        self
    8001cf96:	6522                	ld	a0,8(sp)
    8001cf98:	6910                	ld	a2,16(a0)
    8001cf9a:	e990                	sd	a2,16(a1)
    8001cf9c:	6510                	ld	a2,8(a0)
    8001cf9e:	e590                	sd	a2,8(a1)
    8001cfa0:	6108                	ld	a0,0(a0)
    8001cfa2:	e188                	sd	a0,0(a1)
    }
    8001cfa4:	0141                	addi	sp,sp,16
    8001cfa6:	8082                	ret

Disassembly of section .text._ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h119fa1ab69bc712dE:

000000008001cfa8 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h119fa1ab69bc712dE>:
    fn into_iter(self) -> I {
    8001cfa8:	1141                	addi	sp,sp,-16
    8001cfaa:	e42e                	sd	a1,8(sp)
    8001cfac:	85aa                	mv	a1,a0
        self
    8001cfae:	6522                	ld	a0,8(sp)
    8001cfb0:	6d10                	ld	a2,24(a0)
    8001cfb2:	ed90                	sd	a2,24(a1)
    8001cfb4:	6910                	ld	a2,16(a0)
    8001cfb6:	e990                	sd	a2,16(a1)
    8001cfb8:	6510                	ld	a2,8(a0)
    8001cfba:	e590                	sd	a2,8(a1)
    8001cfbc:	6108                	ld	a0,0(a0)
    8001cfbe:	e188                	sd	a0,0(a1)
    }
    8001cfc0:	0141                	addi	sp,sp,16
    8001cfc2:	8082                	ret

Disassembly of section .text._ZN4core3mem11size_of_val17hb8db3e1f6e8e8424E:

000000008001cfc4 <_ZN4core3mem11size_of_val17hb8db3e1f6e8e8424E>:
pub const fn size_of_val<T: ?Sized>(val: &T) -> usize {
    8001cfc4:	1101                	addi	sp,sp,-32
    8001cfc6:	e82a                	sd	a0,16(sp)
    8001cfc8:	4521                	li	a0,8
    unsafe { intrinsics::size_of_val(val) }
    8001cfca:	e42a                	sd	a0,8(sp)
    8001cfcc:	ec2a                	sd	a0,24(sp)
    8001cfce:	a009                	j	8001cfd0 <_ZN4core3mem11size_of_val17hb8db3e1f6e8e8424E+0xc>
}
    8001cfd0:	6522                	ld	a0,8(sp)
    8001cfd2:	6105                	addi	sp,sp,32
    8001cfd4:	8082                	ret

Disassembly of section .text._ZN4core3mem15size_of_val_raw17h1bfec9c80578f181E:

000000008001cfd6 <_ZN4core3mem15size_of_val_raw17h1bfec9c80578f181E>:
pub const unsafe fn size_of_val_raw<T: ?Sized>(val: *const T) -> usize {
    8001cfd6:	1101                	addi	sp,sp,-32
    8001cfd8:	e82a                	sd	a0,16(sp)
    8001cfda:	04800513          	li	a0,72
    unsafe { intrinsics::size_of_val(val) }
    8001cfde:	e42a                	sd	a0,8(sp)
    8001cfe0:	ec2a                	sd	a0,24(sp)
    8001cfe2:	a009                	j	8001cfe4 <_ZN4core3mem15size_of_val_raw17h1bfec9c80578f181E+0xe>
}
    8001cfe4:	6522                	ld	a0,8(sp)
    8001cfe6:	6105                	addi	sp,sp,32
    8001cfe8:	8082                	ret

Disassembly of section .text._ZN4core3mem16align_of_val_raw17hadcb67548ac99edfE:

000000008001cfea <_ZN4core3mem16align_of_val_raw17hadcb67548ac99edfE>:
/// assert_eq!(4, unsafe { mem::align_of_val_raw(&5i32) });
/// ```
#[inline]
#[unstable(feature = "layout_for_ptr", issue = "69835")]
#[rustc_const_unstable(feature = "const_align_of_val_raw", issue = "46571")]
pub const unsafe fn align_of_val_raw<T: ?Sized>(val: *const T) -> usize {
    8001cfea:	1101                	addi	sp,sp,-32
    8001cfec:	e82a                	sd	a0,16(sp)
    8001cfee:	4521                	li	a0,8
    // SAFETY: the caller must provide a valid raw pointer
    unsafe { intrinsics::min_align_of_val(val) }
    8001cff0:	e42a                	sd	a0,8(sp)
    8001cff2:	ec2a                	sd	a0,24(sp)
    8001cff4:	a009                	j	8001cff6 <_ZN4core3mem16align_of_val_raw17hadcb67548ac99edfE+0xc>
}
    8001cff6:	6522                	ld	a0,8(sp)
    8001cff8:	6105                	addi	sp,sp,32
    8001cffa:	8082                	ret

Disassembly of section .text._ZN4core3mem4drop17h0a31045cd6ca0c7bE:

000000008001cffc <_ZN4core3mem4drop17h0a31045cd6ca0c7bE>:
///
/// [`RefCell`]: crate::cell::RefCell
#[doc(alias = "delete")]
#[inline]
#[stable(feature = "rust1", since = "1.0.0")]
pub fn drop<T>(_x: T) {}
    8001cffc:	1141                	addi	sp,sp,-16
    8001cffe:	00a107a3          	sb	a0,15(sp)
    8001d002:	a009                	j	8001d004 <_ZN4core3mem4drop17h0a31045cd6ca0c7bE+0x8>
    8001d004:	0141                	addi	sp,sp,16
    8001d006:	8082                	ret

Disassembly of section .text._ZN4core3mem4drop17h0acc999538dd9281E:

000000008001d008 <_ZN4core3mem4drop17h0acc999538dd9281E>:
    8001d008:	1141                	addi	sp,sp,-16
    8001d00a:	e406                	sd	ra,8(sp)
    8001d00c:	e02a                	sd	a0,0(sp)
    8001d00e:	850a                	mv	a0,sp
    8001d010:	fffea097          	auipc	ra,0xfffea
    8001d014:	f16080e7          	jalr	-234(ra) # 80006f26 <_ZN4core3ptr71drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$usize$GT$$GT$17h978f142a914ddf2eE>
    8001d018:	a009                	j	8001d01a <_ZN4core3mem4drop17h0acc999538dd9281E+0x12>
    8001d01a:	60a2                	ld	ra,8(sp)
    8001d01c:	0141                	addi	sp,sp,16
    8001d01e:	8082                	ret

Disassembly of section .text._ZN4core3mem4drop17h10f52240d03cf3b6E:

000000008001d020 <_ZN4core3mem4drop17h10f52240d03cf3b6E>:
    8001d020:	1141                	addi	sp,sp,-16
    8001d022:	e406                	sd	ra,8(sp)
    8001d024:	e02a                	sd	a0,0(sp)
    8001d026:	850a                	mv	a0,sp
    8001d028:	fffea097          	auipc	ra,0xfffea
    8001d02c:	f4a080e7          	jalr	-182(ra) # 80006f72 <_ZN4core3ptr74drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$$LP$$RP$$GT$$GT$17he568be727488c8bbE>
    8001d030:	a009                	j	8001d032 <_ZN4core3mem4drop17h10f52240d03cf3b6E+0x12>
    8001d032:	60a2                	ld	ra,8(sp)
    8001d034:	0141                	addi	sp,sp,16
    8001d036:	8082                	ret

Disassembly of section .text._ZN4core3mem4drop17h2d4fb87a733eb04aE:

000000008001d038 <_ZN4core3mem4drop17h2d4fb87a733eb04aE>:
    8001d038:	1141                	addi	sp,sp,-16
    8001d03a:	e406                	sd	ra,8(sp)
    8001d03c:	e02a                	sd	a0,0(sp)
    8001d03e:	850a                	mv	a0,sp
    8001d040:	fffea097          	auipc	ra,0xfffea
    8001d044:	d36080e7          	jalr	-714(ra) # 80006d76 <_ZN4core3ptr116drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$$u5b$kernel..fs..inode..InodeMeta$u3b$$u20$50$u5d$$GT$$GT$17h4e8573cf3b362114E>
    8001d048:	a009                	j	8001d04a <_ZN4core3mem4drop17h2d4fb87a733eb04aE+0x12>
    8001d04a:	60a2                	ld	ra,8(sp)
    8001d04c:	0141                	addi	sp,sp,16
    8001d04e:	8082                	ret

Disassembly of section .text._ZN4core3mem4drop17h2ed300707c7d4096E:

000000008001d050 <_ZN4core3mem4drop17h2ed300707c7d4096E>:
    8001d050:	1141                	addi	sp,sp,-16
    8001d052:	e406                	sd	ra,8(sp)
    8001d054:	e02a                	sd	a0,0(sp)
    8001d056:	850a                	mv	a0,sp
    8001d058:	fffea097          	auipc	ra,0xfffea
    8001d05c:	02a080e7          	jalr	42(ra) # 80007082 <_ZN4core3ptr98drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..driver..console..Console$GT$$GT$17hbea8b3b0221deadaE>
    8001d060:	a009                	j	8001d062 <_ZN4core3mem4drop17h2ed300707c7d4096E+0x12>
    8001d062:	60a2                	ld	ra,8(sp)
    8001d064:	0141                	addi	sp,sp,16
    8001d066:	8082                	ret

Disassembly of section .text._ZN4core3mem4drop17h3f96085e4daee3c2E:

000000008001d068 <_ZN4core3mem4drop17h3f96085e4daee3c2E>:
    8001d068:	1101                	addi	sp,sp,-32
    8001d06a:	ec06                	sd	ra,24(sp)
    8001d06c:	e42a                	sd	a0,8(sp)
    8001d06e:	e82e                	sd	a1,16(sp)
    8001d070:	0028                	addi	a0,sp,8
    8001d072:	fffea097          	auipc	ra,0xfffea
    8001d076:	ffa080e7          	jalr	-6(ra) # 8000706c <_ZN4core3ptr96drop_in_place$LT$kernel..lock..sleeplock..SleepLockGuard$LT$kernel..fs..inode..InodeData$GT$$GT$17h00d5c02cf687ef41E>
    8001d07a:	a009                	j	8001d07c <_ZN4core3mem4drop17h3f96085e4daee3c2E+0x14>
    8001d07c:	60e2                	ld	ra,24(sp)
    8001d07e:	6105                	addi	sp,sp,32
    8001d080:	8082                	ret

Disassembly of section .text._ZN4core3mem4drop17h4200387821e72e60E:

000000008001d082 <_ZN4core3mem4drop17h4200387821e72e60E>:
    8001d082:	1141                	addi	sp,sp,-16
    8001d084:	e406                	sd	ra,8(sp)
    8001d086:	e02a                	sd	a0,0(sp)
    8001d088:	850a                	mv	a0,sp
    8001d08a:	fffea097          	auipc	ra,0xfffea
    8001d08e:	e86080e7          	jalr	-378(ra) # 80006f10 <_ZN4core3ptr69drop_in_place$LT$alloc..sync..Weak$LT$kernel..fs..file..VFile$GT$$GT$17hfcb3bca0be736df8E>
    8001d092:	a009                	j	8001d094 <_ZN4core3mem4drop17h4200387821e72e60E+0x12>
    8001d094:	60a2                	ld	ra,8(sp)
    8001d096:	0141                	addi	sp,sp,16
    8001d098:	8082                	ret

Disassembly of section .text._ZN4core3mem4drop17h66bc7e80d0a41b3aE:

000000008001d09a <_ZN4core3mem4drop17h66bc7e80d0a41b3aE>:
    8001d09a:	1141                	addi	sp,sp,-16
    8001d09c:	e406                	sd	ra,8(sp)
    8001d09e:	fffea097          	auipc	ra,0xfffea
    8001d0a2:	eae080e7          	jalr	-338(ra) # 80006f4c <_ZN4core3ptr73drop_in_place$LT$core..option..Option$LT$kernel..fs..inode..Inode$GT$$GT$17h6a7b3b84406d6cdfE>
    8001d0a6:	a009                	j	8001d0a8 <_ZN4core3mem4drop17h66bc7e80d0a41b3aE+0xe>
    8001d0a8:	60a2                	ld	ra,8(sp)
    8001d0aa:	0141                	addi	sp,sp,16
    8001d0ac:	8082                	ret

Disassembly of section .text._ZN4core3mem4drop17h82526bd482ef36a5E:

000000008001d0ae <_ZN4core3mem4drop17h82526bd482ef36a5E>:
    8001d0ae:	1141                	addi	sp,sp,-16
    8001d0b0:	e406                	sd	ra,8(sp)
    8001d0b2:	e02a                	sd	a0,0(sp)
    8001d0b4:	850a                	mv	a0,sp
    8001d0b6:	fffea097          	auipc	ra,0xfffea
    8001d0ba:	f3a080e7          	jalr	-198(ra) # 80006ff0 <_ZN4core3ptr89drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..fs..bio..BufLru$GT$$GT$17h9c86fb58887d325bE>
    8001d0be:	a009                	j	8001d0c0 <_ZN4core3mem4drop17h82526bd482ef36a5E+0x12>
    8001d0c0:	60a2                	ld	ra,8(sp)
    8001d0c2:	0141                	addi	sp,sp,16
    8001d0c4:	8082                	ret

Disassembly of section .text._ZN4core3mem4drop17h8377f059e38e21aaE:

000000008001d0c6 <_ZN4core3mem4drop17h8377f059e38e21aaE>:
    8001d0c6:	1101                	addi	sp,sp,-32
    8001d0c8:	ec06                	sd	ra,24(sp)
    8001d0ca:	e42a                	sd	a0,8(sp)
    8001d0cc:	e82e                	sd	a1,16(sp)
    8001d0ce:	0028                	addi	a0,sp,8
    8001d0d0:	fffea097          	auipc	ra,0xfffea
    8001d0d4:	d22080e7          	jalr	-734(ra) # 80006df2 <_ZN4core3ptr120drop_in_place$LT$core..option..Option$LT$kernel..lock..sleeplock..SleepLockGuard$LT$kernel..fs..bio..BufData$GT$$GT$$GT$17hc3cb66b90ce8c8e9E>
    8001d0d8:	a009                	j	8001d0da <_ZN4core3mem4drop17h8377f059e38e21aaE+0x14>
    8001d0da:	60e2                	ld	ra,24(sp)
    8001d0dc:	6105                	addi	sp,sp,32
    8001d0de:	8082                	ret

Disassembly of section .text._ZN4core3mem4drop17h96fc0e7c88170ba8E:

000000008001d0e0 <_ZN4core3mem4drop17h96fc0e7c88170ba8E>:
    8001d0e0:	1141                	addi	sp,sp,-16
    8001d0e2:	e406                	sd	ra,8(sp)
    8001d0e4:	e02a                	sd	a0,0(sp)
    8001d0e6:	850a                	mv	a0,sp
    8001d0e8:	fffea097          	auipc	ra,0xfffea
    8001d0ec:	f34080e7          	jalr	-204(ra) # 8000701c <_ZN4core3ptr92drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..driver..uart..Uart$GT$$GT$17h4785ee23048b5bddE>
    8001d0f0:	a009                	j	8001d0f2 <_ZN4core3mem4drop17h96fc0e7c88170ba8E+0x12>
    8001d0f2:	60a2                	ld	ra,8(sp)
    8001d0f4:	0141                	addi	sp,sp,16
    8001d0f6:	8082                	ret

Disassembly of section .text._ZN4core3mem4drop17ha170cc24affc2e7cE:

000000008001d0f8 <_ZN4core3mem4drop17ha170cc24affc2e7cE>:
    8001d0f8:	1141                	addi	sp,sp,-16
    8001d0fa:	e406                	sd	ra,8(sp)
    8001d0fc:	e02a                	sd	a0,0(sp)
    8001d0fe:	850a                	mv	a0,sp
    8001d100:	fffea097          	auipc	ra,0xfffea
    8001d104:	f32080e7          	jalr	-206(ra) # 80007032 <_ZN4core3ptr93drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..fs..pipe..PipeGuard$GT$$GT$17hcb390818ee10e1caE>
    8001d108:	a009                	j	8001d10a <_ZN4core3mem4drop17ha170cc24affc2e7cE+0x12>
    8001d10a:	60a2                	ld	ra,8(sp)
    8001d10c:	0141                	addi	sp,sp,16
    8001d10e:	8082                	ret

Disassembly of section .text._ZN4core3mem4drop17ha184dbcd1a83d607E:

000000008001d110 <_ZN4core3mem4drop17ha184dbcd1a83d607E>:
    8001d110:	1141                	addi	sp,sp,-16
    8001d112:	e42a                	sd	a0,8(sp)
    8001d114:	a009                	j	8001d116 <_ZN4core3mem4drop17ha184dbcd1a83d607E+0x6>
    8001d116:	0141                	addi	sp,sp,16
    8001d118:	8082                	ret

Disassembly of section .text._ZN4core3mem4drop17ha75bac042eb9b458E:

000000008001d11a <_ZN4core3mem4drop17ha75bac042eb9b458E>:
    8001d11a:	1141                	addi	sp,sp,-16
    8001d11c:	e42a                	sd	a0,8(sp)
    8001d11e:	a009                	j	8001d120 <_ZN4core3mem4drop17ha75bac042eb9b458E+0x6>
    8001d120:	0141                	addi	sp,sp,16
    8001d122:	8082                	ret

Disassembly of section .text._ZN4core3mem4drop17haa2d2dc72bd2e81bE:

000000008001d124 <_ZN4core3mem4drop17haa2d2dc72bd2e81bE>:
    8001d124:	1141                	addi	sp,sp,-16
    8001d126:	e406                	sd	ra,8(sp)
    8001d128:	e02a                	sd	a0,0(sp)
    8001d12a:	850a                	mv	a0,sp
    8001d12c:	fffea097          	auipc	ra,0xfffea
    8001d130:	e98080e7          	jalr	-360(ra) # 80006fc4 <_ZN4core3ptr86drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..fs..log..Log$GT$$GT$17h3ff4d5b7fa89905aE>
    8001d134:	a009                	j	8001d136 <_ZN4core3mem4drop17haa2d2dc72bd2e81bE+0x12>
    8001d136:	60a2                	ld	ra,8(sp)
    8001d138:	0141                	addi	sp,sp,16
    8001d13a:	8082                	ret

Disassembly of section .text._ZN4core3mem4drop17hb93abdfe16b94be5E:

000000008001d13c <_ZN4core3mem4drop17hb93abdfe16b94be5E>:
    8001d13c:	7179                	addi	sp,sp,-48
    8001d13e:	f406                	sd	ra,40(sp)
    8001d140:	e82a                	sd	a0,16(sp)
    8001d142:	ec2e                	sd	a1,24(sp)
    8001d144:	e02a                	sd	a0,0(sp)
    8001d146:	e42e                	sd	a1,8(sp)
    8001d148:	850a                	mv	a0,sp
    8001d14a:	fffea097          	auipc	ra,0xfffea
    8001d14e:	d38080e7          	jalr	-712(ra) # 80006e82 <_ZN4core3ptr45drop_in_place$LT$kernel..fs..inode..Inode$GT$17h8786fe1a2a287832E>
    8001d152:	a009                	j	8001d154 <_ZN4core3mem4drop17hb93abdfe16b94be5E+0x18>
    8001d154:	70a2                	ld	ra,40(sp)
    8001d156:	6145                	addi	sp,sp,48
    8001d158:	8082                	ret

Disassembly of section .text._ZN4core3mem4drop17hda1e19029436deb9E:

000000008001d15a <_ZN4core3mem4drop17hda1e19029436deb9E>:
    8001d15a:	1141                	addi	sp,sp,-16
    8001d15c:	e406                	sd	ra,8(sp)
    8001d15e:	fffea097          	auipc	ra,0xfffea
    8001d162:	cd0080e7          	jalr	-816(ra) # 80006e2e <_ZN4core3ptr41drop_in_place$LT$kernel..fs..bio..Buf$GT$17hc35967244f3e9eb6E>
    8001d166:	a009                	j	8001d168 <_ZN4core3mem4drop17hda1e19029436deb9E+0xe>
    8001d168:	60a2                	ld	ra,8(sp)
    8001d16a:	0141                	addi	sp,sp,16
    8001d16c:	8082                	ret

Disassembly of section .text._ZN4core3mem4drop17he1c2696149894a05E:

000000008001d16e <_ZN4core3mem4drop17he1c2696149894a05E>:
    8001d16e:	1141                	addi	sp,sp,-16
    8001d170:	e42a                	sd	a0,8(sp)
    8001d172:	a009                	j	8001d174 <_ZN4core3mem4drop17he1c2696149894a05E+0x6>
    8001d174:	0141                	addi	sp,sp,16
    8001d176:	8082                	ret

Disassembly of section .text._ZN4core3mem4drop17hf5d8d4b62719f1bfE:

000000008001d178 <_ZN4core3mem4drop17hf5d8d4b62719f1bfE>:
    8001d178:	1141                	addi	sp,sp,-16
    8001d17a:	e406                	sd	ra,8(sp)
    8001d17c:	e02a                	sd	a0,0(sp)
    8001d17e:	850a                	mv	a0,sp
    8001d180:	fffea097          	auipc	ra,0xfffea
    8001d184:	f18080e7          	jalr	-232(ra) # 80007098 <_ZN4core3ptr99drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..driver..virtio_disk..Disk$GT$$GT$17h4fc01c278f0bfe6cE>
    8001d188:	a009                	j	8001d18a <_ZN4core3mem4drop17hf5d8d4b62719f1bfE+0x12>
    8001d18a:	60a2                	ld	ra,8(sp)
    8001d18c:	0141                	addi	sp,sp,16
    8001d18e:	8082                	ret

Disassembly of section .text._ZN4core3mem4take17h5215bf07db4a9cdbE:

000000008001d190 <_ZN4core3mem4take17h5215bf07db4a9cdbE>:
pub fn take<T: Default>(dest: &mut T) -> T {
    8001d190:	7179                	addi	sp,sp,-48
    8001d192:	f406                	sd	ra,40(sp)
    8001d194:	e82a                	sd	a0,16(sp)
    8001d196:	f02a                	sd	a0,32(sp)
    replace(dest, T::default())
    8001d198:	ffff2097          	auipc	ra,0xffff2
    8001d19c:	0e2080e7          	jalr	226(ra) # 8000f27a <_ZN72_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..default..Default$GT$7default17h459b0dfcf4f19fffE>
    8001d1a0:	ec2a                	sd	a0,24(sp)
    8001d1a2:	a009                	j	8001d1a4 <_ZN4core3mem4take17h5215bf07db4a9cdbE+0x14>
    8001d1a4:	65e2                	ld	a1,24(sp)
    8001d1a6:	6542                	ld	a0,16(sp)
    8001d1a8:	00000097          	auipc	ra,0x0
    8001d1ac:	200080e7          	jalr	512(ra) # 8001d3a8 <_ZN4core3mem7replace17hca19b537819175cbE>
    8001d1b0:	e42a                	sd	a0,8(sp)
    8001d1b2:	a009                	j	8001d1b4 <_ZN4core3mem4take17h5215bf07db4a9cdbE+0x24>
}
    8001d1b4:	6522                	ld	a0,8(sp)
    8001d1b6:	70a2                	ld	ra,40(sp)
    8001d1b8:	6145                	addi	sp,sp,48
    8001d1ba:	8082                	ret

Disassembly of section .text._ZN4core3mem4take17h9920b9ae1a5c3368E:

000000008001d1bc <_ZN4core3mem4take17h9920b9ae1a5c3368E>:
pub fn take<T: Default>(dest: &mut T) -> T {
    8001d1bc:	7179                	addi	sp,sp,-48
    8001d1be:	f406                	sd	ra,40(sp)
    8001d1c0:	e82a                	sd	a0,16(sp)
    8001d1c2:	f02a                	sd	a0,32(sp)
    replace(dest, T::default())
    8001d1c4:	ffff2097          	auipc	ra,0xffff2
    8001d1c8:	0cc080e7          	jalr	204(ra) # 8000f290 <_ZN72_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..default..Default$GT$7default17hbc90300349db98aaE>
    8001d1cc:	ec2a                	sd	a0,24(sp)
    8001d1ce:	a009                	j	8001d1d0 <_ZN4core3mem4take17h9920b9ae1a5c3368E+0x14>
    8001d1d0:	65e2                	ld	a1,24(sp)
    8001d1d2:	6542                	ld	a0,16(sp)
    8001d1d4:	00000097          	auipc	ra,0x0
    8001d1d8:	23a080e7          	jalr	570(ra) # 8001d40e <_ZN4core3mem7replace17hfd1d9a060b66fcb5E>
    8001d1dc:	e42a                	sd	a0,8(sp)
    8001d1de:	a009                	j	8001d1e0 <_ZN4core3mem4take17h9920b9ae1a5c3368E+0x24>
}
    8001d1e0:	6522                	ld	a0,8(sp)
    8001d1e2:	70a2                	ld	ra,40(sp)
    8001d1e4:	6145                	addi	sp,sp,48
    8001d1e6:	8082                	ret

Disassembly of section .text._ZN4core3mem4take17ha20fa5de2e41ca09E:

000000008001d1e8 <_ZN4core3mem4take17ha20fa5de2e41ca09E>:
pub fn take<T: Default>(dest: &mut T) -> T {
    8001d1e8:	7139                	addi	sp,sp,-64
    8001d1ea:	fc06                	sd	ra,56(sp)
    8001d1ec:	ec2a                	sd	a0,24(sp)
    8001d1ee:	f82a                	sd	a0,48(sp)
    replace(dest, T::default())
    8001d1f0:	ffff2097          	auipc	ra,0xffff2
    8001d1f4:	07e080e7          	jalr	126(ra) # 8000f26e <_ZN72_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..default..Default$GT$7default17h216c24bc3f109328E>
    8001d1f8:	f02a                	sd	a0,32(sp)
    8001d1fa:	f42e                	sd	a1,40(sp)
    8001d1fc:	a009                	j	8001d1fe <_ZN4core3mem4take17ha20fa5de2e41ca09E+0x16>
    8001d1fe:	7622                	ld	a2,40(sp)
    8001d200:	7582                	ld	a1,32(sp)
    8001d202:	6562                	ld	a0,24(sp)
    8001d204:	00000097          	auipc	ra,0x0
    8001d208:	0ee080e7          	jalr	238(ra) # 8001d2f2 <_ZN4core3mem7replace17hb9aa9fb859d8f738E>
    8001d20c:	e42a                	sd	a0,8(sp)
    8001d20e:	e82e                	sd	a1,16(sp)
    8001d210:	a009                	j	8001d212 <_ZN4core3mem4take17ha20fa5de2e41ca09E+0x2a>
}
    8001d212:	65c2                	ld	a1,16(sp)
    8001d214:	6522                	ld	a0,8(sp)
    8001d216:	70e2                	ld	ra,56(sp)
    8001d218:	6121                	addi	sp,sp,64
    8001d21a:	8082                	ret

Disassembly of section .text._ZN4core3mem4take17ha8b178c6c6bab41fE:

000000008001d21c <_ZN4core3mem4take17ha8b178c6c6bab41fE>:
pub fn take<T: Default>(dest: &mut T) -> T {
    8001d21c:	7139                	addi	sp,sp,-64
    8001d21e:	fc06                	sd	ra,56(sp)
    8001d220:	ec2a                	sd	a0,24(sp)
    8001d222:	f82a                	sd	a0,48(sp)
    replace(dest, T::default())
    8001d224:	ffff2097          	auipc	ra,0xffff2
    8001d228:	060080e7          	jalr	96(ra) # 8000f284 <_ZN72_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..default..Default$GT$7default17h9e7fcea49a91f0edE>
    8001d22c:	f02a                	sd	a0,32(sp)
    8001d22e:	f42e                	sd	a1,40(sp)
    8001d230:	a009                	j	8001d232 <_ZN4core3mem4take17ha8b178c6c6bab41fE+0x16>
    8001d232:	7622                	ld	a2,40(sp)
    8001d234:	7582                	ld	a1,32(sp)
    8001d236:	6562                	ld	a0,24(sp)
    8001d238:	00000097          	auipc	ra,0x0
    8001d23c:	130080e7          	jalr	304(ra) # 8001d368 <_ZN4core3mem7replace17hbfb2af9a98f5ad51E>
    8001d240:	e42a                	sd	a0,8(sp)
    8001d242:	e82e                	sd	a1,16(sp)
    8001d244:	a009                	j	8001d246 <_ZN4core3mem4take17ha8b178c6c6bab41fE+0x2a>
}
    8001d246:	65c2                	ld	a1,16(sp)
    8001d248:	6522                	ld	a0,8(sp)
    8001d24a:	70e2                	ld	ra,56(sp)
    8001d24c:	6121                	addi	sp,sp,64
    8001d24e:	8082                	ret

Disassembly of section .text._ZN4core3mem7replace17h1967adb5d4092576E:

000000008001d250 <_ZN4core3mem7replace17h1967adb5d4092576E>:
pub const fn replace<T>(dest: &mut T, src: T) -> T {
    8001d250:	7179                	addi	sp,sp,-48
    8001d252:	f406                	sd	ra,40(sp)
    8001d254:	e02a                	sd	a0,0(sp)
    8001d256:	862e                	mv	a2,a1
    8001d258:	e432                	sd	a2,8(sp)
    8001d25a:	ec2a                	sd	a0,24(sp)
    8001d25c:	02b10323          	sb	a1,38(sp)
        let result = ptr::read(dest);
    8001d260:	ffffb097          	auipc	ra,0xffffb
    8001d264:	5e8080e7          	jalr	1512(ra) # 80018848 <_ZN4core3ptr4read17he855cc26728788dfE>
    8001d268:	85aa                	mv	a1,a0
    8001d26a:	e82e                	sd	a1,16(sp)
    8001d26c:	02a103a3          	sb	a0,39(sp)
    8001d270:	a009                	j	8001d272 <_ZN4core3mem7replace17h1967adb5d4092576E+0x22>
        ptr::write(dest, src);
    8001d272:	65a2                	ld	a1,8(sp)
    8001d274:	6502                	ld	a0,0(sp)
    8001d276:	ffffb097          	auipc	ra,0xffffb
    8001d27a:	684080e7          	jalr	1668(ra) # 800188fa <_ZN4core3ptr5write17h25ba6e811e5fd451E>
    8001d27e:	a009                	j	8001d280 <_ZN4core3mem7replace17h1967adb5d4092576E+0x30>
}
    8001d280:	6542                	ld	a0,16(sp)
    8001d282:	70a2                	ld	ra,40(sp)
    8001d284:	6145                	addi	sp,sp,48
    8001d286:	8082                	ret

Disassembly of section .text._ZN4core3mem7replace17h57a15db6942c9267E:

000000008001d288 <_ZN4core3mem7replace17h57a15db6942c9267E>:
pub const fn replace<T>(dest: &mut T, src: T) -> T {
    8001d288:	7179                	addi	sp,sp,-48
    8001d28a:	f406                	sd	ra,40(sp)
    8001d28c:	e02a                	sd	a0,0(sp)
    8001d28e:	862e                	mv	a2,a1
    8001d290:	e432                	sd	a2,8(sp)
    8001d292:	ec2a                	sd	a0,24(sp)
    8001d294:	02b11223          	sh	a1,36(sp)
        let result = ptr::read(dest);
    8001d298:	ffffb097          	auipc	ra,0xffffb
    8001d29c:	41a080e7          	jalr	1050(ra) # 800186b2 <_ZN4core3ptr4read17h49d73875721fb0a9E>
    8001d2a0:	85aa                	mv	a1,a0
    8001d2a2:	e82e                	sd	a1,16(sp)
    8001d2a4:	02a11323          	sh	a0,38(sp)
    8001d2a8:	a009                	j	8001d2aa <_ZN4core3mem7replace17h57a15db6942c9267E+0x22>
        ptr::write(dest, src);
    8001d2aa:	65a2                	ld	a1,8(sp)
    8001d2ac:	6502                	ld	a0,0(sp)
    8001d2ae:	ffffb097          	auipc	ra,0xffffb
    8001d2b2:	678080e7          	jalr	1656(ra) # 80018926 <_ZN4core3ptr5write17h6d43807bf71c562eE>
    8001d2b6:	a009                	j	8001d2b8 <_ZN4core3mem7replace17h57a15db6942c9267E+0x30>
}
    8001d2b8:	6542                	ld	a0,16(sp)
    8001d2ba:	70a2                	ld	ra,40(sp)
    8001d2bc:	6145                	addi	sp,sp,48
    8001d2be:	8082                	ret

Disassembly of section .text._ZN4core3mem7replace17ha3220c9fe59ec441E:

000000008001d2c0 <_ZN4core3mem7replace17ha3220c9fe59ec441E>:
pub const fn replace<T>(dest: &mut T, src: T) -> T {
    8001d2c0:	7139                	addi	sp,sp,-64
    8001d2c2:	fc06                	sd	ra,56(sp)
    8001d2c4:	e42e                	sd	a1,8(sp)
    8001d2c6:	e82a                	sd	a0,16(sp)
    8001d2c8:	f02a                	sd	a0,32(sp)
    8001d2ca:	f42e                	sd	a1,40(sp)
        let result = ptr::read(dest);
    8001d2cc:	ffffb097          	auipc	ra,0xffffb
    8001d2d0:	480080e7          	jalr	1152(ra) # 8001874c <_ZN4core3ptr4read17hca9a7d22776635f1E>
    8001d2d4:	85aa                	mv	a1,a0
    8001d2d6:	ec2e                	sd	a1,24(sp)
    8001d2d8:	f82a                	sd	a0,48(sp)
    8001d2da:	a009                	j	8001d2dc <_ZN4core3mem7replace17ha3220c9fe59ec441E+0x1c>
        ptr::write(dest, src);
    8001d2dc:	65a2                	ld	a1,8(sp)
    8001d2de:	6542                	ld	a0,16(sp)
    8001d2e0:	ffffb097          	auipc	ra,0xffffb
    8001d2e4:	62a080e7          	jalr	1578(ra) # 8001890a <_ZN4core3ptr5write17h4a1d74f50ec6a35fE>
    8001d2e8:	a009                	j	8001d2ea <_ZN4core3mem7replace17ha3220c9fe59ec441E+0x2a>
}
    8001d2ea:	6562                	ld	a0,24(sp)
    8001d2ec:	70e2                	ld	ra,56(sp)
    8001d2ee:	6121                	addi	sp,sp,64
    8001d2f0:	8082                	ret

Disassembly of section .text._ZN4core3mem7replace17hb9aa9fb859d8f738E:

000000008001d2f2 <_ZN4core3mem7replace17hb9aa9fb859d8f738E>:
pub const fn replace<T>(dest: &mut T, src: T) -> T {
    8001d2f2:	711d                	addi	sp,sp,-96
    8001d2f4:	ec86                	sd	ra,88(sp)
    8001d2f6:	e432                	sd	a2,8(sp)
    8001d2f8:	e82e                	sd	a1,16(sp)
    8001d2fa:	ec2a                	sd	a0,24(sp)
    8001d2fc:	f82a                	sd	a0,48(sp)
    8001d2fe:	fc2e                	sd	a1,56(sp)
    8001d300:	e0b2                	sd	a2,64(sp)
        let result = ptr::read(dest);
    8001d302:	ffffb097          	auipc	ra,0xffffb
    8001d306:	470080e7          	jalr	1136(ra) # 80018772 <_ZN4core3ptr4read17hcc58f40f4c4c7a01E>
    8001d30a:	862a                	mv	a2,a0
    8001d30c:	f032                	sd	a2,32(sp)
    8001d30e:	862e                	mv	a2,a1
    8001d310:	f432                	sd	a2,40(sp)
    8001d312:	e4aa                	sd	a0,72(sp)
    8001d314:	e8ae                	sd	a1,80(sp)
    8001d316:	a009                	j	8001d318 <_ZN4core3mem7replace17hb9aa9fb859d8f738E+0x26>
        ptr::write(dest, src);
    8001d318:	6622                	ld	a2,8(sp)
    8001d31a:	65c2                	ld	a1,16(sp)
    8001d31c:	6562                	ld	a0,24(sp)
    8001d31e:	ffffb097          	auipc	ra,0xffffb
    8001d322:	5f8080e7          	jalr	1528(ra) # 80018916 <_ZN4core3ptr5write17h60f767b6e6d7c45aE>
    8001d326:	a009                	j	8001d328 <_ZN4core3mem7replace17hb9aa9fb859d8f738E+0x36>
}
    8001d328:	75a2                	ld	a1,40(sp)
    8001d32a:	7502                	ld	a0,32(sp)
    8001d32c:	60e6                	ld	ra,88(sp)
    8001d32e:	6125                	addi	sp,sp,96
    8001d330:	8082                	ret

Disassembly of section .text._ZN4core3mem7replace17hbc5a7f4d236ddb3dE:

000000008001d332 <_ZN4core3mem7replace17hbc5a7f4d236ddb3dE>:
pub const fn replace<T>(dest: &mut T, src: T) -> T {
    8001d332:	7139                	addi	sp,sp,-64
        let result = ptr::read(dest);
    8001d334:	fc06                	sd	ra,56(sp)
pub const fn replace<T>(dest: &mut T, src: T) -> T {
    8001d336:	e432                	sd	a2,8(sp)
    8001d338:	e82e                	sd	a1,16(sp)
    8001d33a:	f82e                	sd	a1,48(sp)
        let result = ptr::read(dest);
    8001d33c:	ffffb097          	auipc	ra,0xffffb
    8001d340:	334080e7          	jalr	820(ra) # 80018670 <_ZN4core3ptr4read17h260501ac2ae68563E>
    8001d344:	a009                	j	8001d346 <_ZN4core3mem7replace17hbc5a7f4d236ddb3dE+0x14>
        ptr::write(dest, src);
    8001d346:	6542                	ld	a0,16(sp)
    8001d348:	65a2                	ld	a1,8(sp)
    8001d34a:	6990                	ld	a2,16(a1)
    8001d34c:	f432                	sd	a2,40(sp)
    8001d34e:	6590                	ld	a2,8(a1)
    8001d350:	f032                	sd	a2,32(sp)
    8001d352:	618c                	ld	a1,0(a1)
    8001d354:	ec2e                	sd	a1,24(sp)
    8001d356:	082c                	addi	a1,sp,24
    8001d358:	ffffb097          	auipc	ra,0xffffb
    8001d35c:	5f6080e7          	jalr	1526(ra) # 8001894e <_ZN4core3ptr5write17hf7c587ba45e12a81E>
    8001d360:	a009                	j	8001d362 <_ZN4core3mem7replace17hbc5a7f4d236ddb3dE+0x30>
}
    8001d362:	70e2                	ld	ra,56(sp)
    8001d364:	6121                	addi	sp,sp,64
    8001d366:	8082                	ret

Disassembly of section .text._ZN4core3mem7replace17hbfb2af9a98f5ad51E:

000000008001d368 <_ZN4core3mem7replace17hbfb2af9a98f5ad51E>:
pub const fn replace<T>(dest: &mut T, src: T) -> T {
    8001d368:	711d                	addi	sp,sp,-96
    8001d36a:	ec86                	sd	ra,88(sp)
    8001d36c:	e432                	sd	a2,8(sp)
    8001d36e:	e82e                	sd	a1,16(sp)
    8001d370:	ec2a                	sd	a0,24(sp)
    8001d372:	f82a                	sd	a0,48(sp)
    8001d374:	fc2e                	sd	a1,56(sp)
    8001d376:	e0b2                	sd	a2,64(sp)
        let result = ptr::read(dest);
    8001d378:	ffffb097          	auipc	ra,0xffffb
    8001d37c:	508080e7          	jalr	1288(ra) # 80018880 <_ZN4core3ptr4read17hf667e6f53e42adf1E>
    8001d380:	862a                	mv	a2,a0
    8001d382:	f032                	sd	a2,32(sp)
    8001d384:	862e                	mv	a2,a1
    8001d386:	f432                	sd	a2,40(sp)
    8001d388:	e4aa                	sd	a0,72(sp)
    8001d38a:	e8ae                	sd	a1,80(sp)
    8001d38c:	a009                	j	8001d38e <_ZN4core3mem7replace17hbfb2af9a98f5ad51E+0x26>
        ptr::write(dest, src);
    8001d38e:	6622                	ld	a2,8(sp)
    8001d390:	65c2                	ld	a1,16(sp)
    8001d392:	6562                	ld	a0,24(sp)
    8001d394:	ffffb097          	auipc	ra,0xffffb
    8001d398:	522080e7          	jalr	1314(ra) # 800188b6 <_ZN4core3ptr5write17h0b5f65d949594758E>
    8001d39c:	a009                	j	8001d39e <_ZN4core3mem7replace17hbfb2af9a98f5ad51E+0x36>
}
    8001d39e:	75a2                	ld	a1,40(sp)
    8001d3a0:	7502                	ld	a0,32(sp)
    8001d3a2:	60e6                	ld	ra,88(sp)
    8001d3a4:	6125                	addi	sp,sp,96
    8001d3a6:	8082                	ret

Disassembly of section .text._ZN4core3mem7replace17hca19b537819175cbE:

000000008001d3a8 <_ZN4core3mem7replace17hca19b537819175cbE>:
pub const fn replace<T>(dest: &mut T, src: T) -> T {
    8001d3a8:	7139                	addi	sp,sp,-64
    8001d3aa:	fc06                	sd	ra,56(sp)
    8001d3ac:	e42e                	sd	a1,8(sp)
    8001d3ae:	e82a                	sd	a0,16(sp)
    8001d3b0:	f02a                	sd	a0,32(sp)
    8001d3b2:	f42e                	sd	a1,40(sp)
        let result = ptr::read(dest);
    8001d3b4:	ffffb097          	auipc	ra,0xffffb
    8001d3b8:	36c080e7          	jalr	876(ra) # 80018720 <_ZN4core3ptr4read17hbe38e0f78fffdc49E>
    8001d3bc:	85aa                	mv	a1,a0
    8001d3be:	ec2e                	sd	a1,24(sp)
    8001d3c0:	f82a                	sd	a0,48(sp)
    8001d3c2:	a009                	j	8001d3c4 <_ZN4core3mem7replace17hca19b537819175cbE+0x1c>
        ptr::write(dest, src);
    8001d3c4:	65a2                	ld	a1,8(sp)
    8001d3c6:	6542                	ld	a0,16(sp)
    8001d3c8:	ffffb097          	auipc	ra,0xffffb
    8001d3cc:	56e080e7          	jalr	1390(ra) # 80018936 <_ZN4core3ptr5write17h9fb8ab42ff75ed2cE>
    8001d3d0:	a009                	j	8001d3d2 <_ZN4core3mem7replace17hca19b537819175cbE+0x2a>
}
    8001d3d2:	6562                	ld	a0,24(sp)
    8001d3d4:	70e2                	ld	ra,56(sp)
    8001d3d6:	6121                	addi	sp,sp,64
    8001d3d8:	8082                	ret

Disassembly of section .text._ZN4core3mem7replace17hcd75ca48f5a8a8f5E:

000000008001d3da <_ZN4core3mem7replace17hcd75ca48f5a8a8f5E>:
pub const fn replace<T>(dest: &mut T, src: T) -> T {
    8001d3da:	7179                	addi	sp,sp,-48
    8001d3dc:	f406                	sd	ra,40(sp)
    8001d3de:	e02a                	sd	a0,0(sp)
    8001d3e0:	862e                	mv	a2,a1
    8001d3e2:	e432                	sd	a2,8(sp)
    8001d3e4:	ec2a                	sd	a0,24(sp)
    8001d3e6:	d02e                	sw	a1,32(sp)
        let result = ptr::read(dest);
    8001d3e8:	ffffb097          	auipc	ra,0xffffb
    8001d3ec:	2fe080e7          	jalr	766(ra) # 800186e6 <_ZN4core3ptr4read17h97f5e0e151e0fdc4E>
    8001d3f0:	85aa                	mv	a1,a0
    8001d3f2:	e82e                	sd	a1,16(sp)
    8001d3f4:	d22a                	sw	a0,36(sp)
    8001d3f6:	a009                	j	8001d3f8 <_ZN4core3mem7replace17hcd75ca48f5a8a8f5E+0x1e>
        ptr::write(dest, src);
    8001d3f8:	65a2                	ld	a1,8(sp)
    8001d3fa:	6502                	ld	a0,0(sp)
    8001d3fc:	ffffb097          	auipc	ra,0xffffb
    8001d400:	4da080e7          	jalr	1242(ra) # 800188d6 <_ZN4core3ptr5write17h10d6d8799e54bf75E>
    8001d404:	a009                	j	8001d406 <_ZN4core3mem7replace17hcd75ca48f5a8a8f5E+0x2c>
}
    8001d406:	6542                	ld	a0,16(sp)
    8001d408:	70a2                	ld	ra,40(sp)
    8001d40a:	6145                	addi	sp,sp,48
    8001d40c:	8082                	ret

Disassembly of section .text._ZN4core3mem7replace17hfd1d9a060b66fcb5E:

000000008001d40e <_ZN4core3mem7replace17hfd1d9a060b66fcb5E>:
pub const fn replace<T>(dest: &mut T, src: T) -> T {
    8001d40e:	7139                	addi	sp,sp,-64
    8001d410:	fc06                	sd	ra,56(sp)
    8001d412:	e42e                	sd	a1,8(sp)
    8001d414:	e82a                	sd	a0,16(sp)
    8001d416:	f02a                	sd	a0,32(sp)
    8001d418:	f42e                	sd	a1,40(sp)
        let result = ptr::read(dest);
    8001d41a:	ffffb097          	auipc	ra,0xffffb
    8001d41e:	396080e7          	jalr	918(ra) # 800187b0 <_ZN4core3ptr4read17hd0dbd64c70caff03E>
    8001d422:	85aa                	mv	a1,a0
    8001d424:	ec2e                	sd	a1,24(sp)
    8001d426:	f82a                	sd	a0,48(sp)
    8001d428:	a009                	j	8001d42a <_ZN4core3mem7replace17hfd1d9a060b66fcb5E+0x1c>
        ptr::write(dest, src);
    8001d42a:	65a2                	ld	a1,8(sp)
    8001d42c:	6542                	ld	a0,16(sp)
    8001d42e:	ffffb097          	auipc	ra,0xffffb
    8001d432:	514080e7          	jalr	1300(ra) # 80018942 <_ZN4core3ptr5write17hbb8dbff750359a8eE>
    8001d436:	a009                	j	8001d438 <_ZN4core3mem7replace17hfd1d9a060b66fcb5E+0x2a>
}
    8001d438:	6562                	ld	a0,24(sp)
    8001d43a:	70e2                	ld	ra,56(sp)
    8001d43c:	6121                	addi	sp,sp,64
    8001d43e:	8082                	ret

Disassembly of section .text._ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$4lock17h5e4056570307628eE:

000000008001d440 <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$4lock17h5e4056570307628eE>:
    pub fn lock(&self) -> SleepLockGuard<T> {
    8001d440:	711d                	addi	sp,sp,-96
    8001d442:	ec86                	sd	ra,88(sp)
    8001d444:	fc2a                	sd	a0,56(sp)
        let mut guard = self.lock.acquire();
    8001d446:	ffff3097          	auipc	ra,0xffff3
    8001d44a:	3c8080e7          	jalr	968(ra) # 8001080e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    8001d44e:	e8aa                	sd	a0,80(sp)
    8001d450:	a009                	j	8001d452 <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$4lock17h5e4056570307628eE+0x12>
        while self.locked.get() {
    8001d452:	7562                	ld	a0,56(sp)
    8001d454:	03050513          	addi	a0,a0,48
    8001d458:	fffe8097          	auipc	ra,0xfffe8
    8001d45c:	ca2080e7          	jalr	-862(ra) # 800050fa <_ZN4core4cell13Cell$LT$T$GT$3get17ha10dd437ebde1b39E>
    8001d460:	f82a                	sd	a0,48(sp)
    8001d462:	a009                	j	8001d464 <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$4lock17h5e4056570307628eE+0x24>
    8001d464:	7542                	ld	a0,48(sp)
    8001d466:	e919                	bnez	a0,8001d47c <.LBB0_13>
    8001d468:	a009                	j	8001d46a <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$4lock17h5e4056570307628eE+0x2a>
        self.locked.set(true);
    8001d46a:	7562                	ld	a0,56(sp)
    8001d46c:	03050513          	addi	a0,a0,48
    8001d470:	4585                	li	a1,1
    8001d472:	fffe8097          	auipc	ra,0xfffe8
    8001d476:	cde080e7          	jalr	-802(ra) # 80005150 <_ZN4core4cell13Cell$LT$T$GT$3set17h60fabb73b23781c0E>
    8001d47a:	a08d                	j	8001d4dc <.LBB0_14+0x4a>

000000008001d47c <.LBB0_13>:
                CPU_MANAGER.myproc().unwrap().sleep(self.locked.as_ptr() as usize, guard);
    8001d47c:	00056517          	auipc	a0,0x56
    8001d480:	cc450513          	addi	a0,a0,-828 # 80073140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    8001d484:	ffff5097          	auipc	ra,0xffff5
    8001d488:	97a080e7          	jalr	-1670(ra) # 80011dfe <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    8001d48c:	f42a                	sd	a0,40(sp)
    8001d48e:	a009                	j	8001d490 <.LBB0_13+0x14>
    8001d490:	7522                	ld	a0,40(sp)

000000008001d492 <.LBB0_14>:
    8001d492:	0000e597          	auipc	a1,0xe
    8001d496:	01e58593          	addi	a1,a1,30 # 8002b4b0 <.L__unnamed_1>
    8001d49a:	ffff2097          	auipc	ra,0xffff2
    8001d49e:	8b2080e7          	jalr	-1870(ra) # 8000ed4c <_ZN4core6option15Option$LT$T$GT$6unwrap17h81f0c84c54a80648E>
    8001d4a2:	f02a                	sd	a0,32(sp)
    8001d4a4:	a009                	j	8001d4a6 <.LBB0_14+0x14>
    8001d4a6:	7562                	ld	a0,56(sp)
    8001d4a8:	03050513          	addi	a0,a0,48
    8001d4ac:	fffe8097          	auipc	ra,0xfffe8
    8001d4b0:	cfc080e7          	jalr	-772(ra) # 800051a8 <_ZN4core4cell13Cell$LT$T$GT$6as_ptr17h2323c3e07ac4531cE>
    8001d4b4:	ec2a                	sd	a0,24(sp)
    8001d4b6:	a009                	j	8001d4b8 <.LBB0_14+0x26>
    8001d4b8:	65e2                	ld	a1,24(sp)
    8001d4ba:	7502                	ld	a0,32(sp)
    8001d4bc:	6646                	ld	a2,80(sp)
    8001d4be:	ffff4097          	auipc	ra,0xffff4
    8001d4c2:	590080e7          	jalr	1424(ra) # 80011a4e <_ZN6kernel7process7process11task_struct5sleep17h3865ab03b1bff75fE>
    8001d4c6:	a009                	j	8001d4c8 <.LBB0_14+0x36>
            guard = self.lock.acquire();
    8001d4c8:	7562                	ld	a0,56(sp)
    8001d4ca:	ffff3097          	auipc	ra,0xffff3
    8001d4ce:	344080e7          	jalr	836(ra) # 8001080e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    8001d4d2:	e82a                	sd	a0,16(sp)
    8001d4d4:	a009                	j	8001d4d6 <.LBB0_14+0x44>
    8001d4d6:	6542                	ld	a0,16(sp)
    8001d4d8:	e8aa                	sd	a0,80(sp)
        while self.locked.get() {
    8001d4da:	bfa5                	j	8001d452 <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$4lock17h5e4056570307628eE+0x12>
        drop(guard);
    8001d4dc:	6546                	ld	a0,80(sp)
    8001d4de:	00000097          	auipc	ra,0x0
    8001d4e2:	b42080e7          	jalr	-1214(ra) # 8001d020 <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    8001d4e6:	a009                	j	8001d4e8 <.LBB0_14+0x56>
            lock: &self,
    8001d4e8:	7562                	ld	a0,56(sp)
            data: unsafe { &mut *self.data.get() }
    8001d4ea:	e02a                	sd	a0,0(sp)
    8001d4ec:	03450513          	addi	a0,a0,52
    8001d4f0:	fffe8097          	auipc	ra,0xfffe8
    8001d4f4:	d3a080e7          	jalr	-710(ra) # 8000522a <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h0c090ec98b6b5023E>
    8001d4f8:	e42a                	sd	a0,8(sp)
    8001d4fa:	a009                	j	8001d4fc <.LBB0_14+0x6a>
        SleepLockGuard {
    8001d4fc:	65a2                	ld	a1,8(sp)
    8001d4fe:	6502                	ld	a0,0(sp)
    8001d500:	e0aa                	sd	a0,64(sp)
    8001d502:	e4ae                	sd	a1,72(sp)
    }
    8001d504:	60e6                	ld	ra,88(sp)
    8001d506:	6125                	addi	sp,sp,96
    8001d508:	8082                	ret

Disassembly of section .text._ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$4lock17h852a891f9af492ecE:

000000008001d50a <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$4lock17h852a891f9af492ecE>:
    pub fn lock(&self) -> SleepLockGuard<T> {
    8001d50a:	711d                	addi	sp,sp,-96
    8001d50c:	ec86                	sd	ra,88(sp)
    8001d50e:	fc2a                	sd	a0,56(sp)
        let mut guard = self.lock.acquire();
    8001d510:	ffff3097          	auipc	ra,0xffff3
    8001d514:	2fe080e7          	jalr	766(ra) # 8001080e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    8001d518:	e8aa                	sd	a0,80(sp)
    8001d51a:	a009                	j	8001d51c <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$4lock17h852a891f9af492ecE+0x12>
        while self.locked.get() {
    8001d51c:	7562                	ld	a0,56(sp)
    8001d51e:	03050513          	addi	a0,a0,48
    8001d522:	fffe8097          	auipc	ra,0xfffe8
    8001d526:	bd8080e7          	jalr	-1064(ra) # 800050fa <_ZN4core4cell13Cell$LT$T$GT$3get17ha10dd437ebde1b39E>
    8001d52a:	f82a                	sd	a0,48(sp)
    8001d52c:	a009                	j	8001d52e <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$4lock17h852a891f9af492ecE+0x24>
    8001d52e:	7542                	ld	a0,48(sp)
    8001d530:	e919                	bnez	a0,8001d546 <.LBB1_13>
    8001d532:	a009                	j	8001d534 <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$4lock17h852a891f9af492ecE+0x2a>
        self.locked.set(true);
    8001d534:	7562                	ld	a0,56(sp)
    8001d536:	03050513          	addi	a0,a0,48
    8001d53a:	4585                	li	a1,1
    8001d53c:	fffe8097          	auipc	ra,0xfffe8
    8001d540:	c14080e7          	jalr	-1004(ra) # 80005150 <_ZN4core4cell13Cell$LT$T$GT$3set17h60fabb73b23781c0E>
    8001d544:	a08d                	j	8001d5a6 <.LBB1_14+0x4a>

000000008001d546 <.LBB1_13>:
                CPU_MANAGER.myproc().unwrap().sleep(self.locked.as_ptr() as usize, guard);
    8001d546:	00056517          	auipc	a0,0x56
    8001d54a:	bfa50513          	addi	a0,a0,-1030 # 80073140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    8001d54e:	ffff5097          	auipc	ra,0xffff5
    8001d552:	8b0080e7          	jalr	-1872(ra) # 80011dfe <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    8001d556:	f42a                	sd	a0,40(sp)
    8001d558:	a009                	j	8001d55a <.LBB1_13+0x14>
    8001d55a:	7522                	ld	a0,40(sp)

000000008001d55c <.LBB1_14>:
    8001d55c:	0000e597          	auipc	a1,0xe
    8001d560:	f5458593          	addi	a1,a1,-172 # 8002b4b0 <.L__unnamed_1>
    8001d564:	ffff1097          	auipc	ra,0xffff1
    8001d568:	7e8080e7          	jalr	2024(ra) # 8000ed4c <_ZN4core6option15Option$LT$T$GT$6unwrap17h81f0c84c54a80648E>
    8001d56c:	f02a                	sd	a0,32(sp)
    8001d56e:	a009                	j	8001d570 <.LBB1_14+0x14>
    8001d570:	7562                	ld	a0,56(sp)
    8001d572:	03050513          	addi	a0,a0,48
    8001d576:	fffe8097          	auipc	ra,0xfffe8
    8001d57a:	c32080e7          	jalr	-974(ra) # 800051a8 <_ZN4core4cell13Cell$LT$T$GT$6as_ptr17h2323c3e07ac4531cE>
    8001d57e:	ec2a                	sd	a0,24(sp)
    8001d580:	a009                	j	8001d582 <.LBB1_14+0x26>
    8001d582:	65e2                	ld	a1,24(sp)
    8001d584:	7502                	ld	a0,32(sp)
    8001d586:	6646                	ld	a2,80(sp)
    8001d588:	ffff4097          	auipc	ra,0xffff4
    8001d58c:	4c6080e7          	jalr	1222(ra) # 80011a4e <_ZN6kernel7process7process11task_struct5sleep17h3865ab03b1bff75fE>
    8001d590:	a009                	j	8001d592 <.LBB1_14+0x36>
            guard = self.lock.acquire();
    8001d592:	7562                	ld	a0,56(sp)
    8001d594:	ffff3097          	auipc	ra,0xffff3
    8001d598:	27a080e7          	jalr	634(ra) # 8001080e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    8001d59c:	e82a                	sd	a0,16(sp)
    8001d59e:	a009                	j	8001d5a0 <.LBB1_14+0x44>
    8001d5a0:	6542                	ld	a0,16(sp)
    8001d5a2:	e8aa                	sd	a0,80(sp)
        while self.locked.get() {
    8001d5a4:	bfa5                	j	8001d51c <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$4lock17h852a891f9af492ecE+0x12>
        drop(guard);
    8001d5a6:	6546                	ld	a0,80(sp)
    8001d5a8:	00000097          	auipc	ra,0x0
    8001d5ac:	a78080e7          	jalr	-1416(ra) # 8001d020 <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    8001d5b0:	a009                	j	8001d5b2 <.LBB1_14+0x56>
            lock: &self,
    8001d5b2:	7562                	ld	a0,56(sp)
            data: unsafe { &mut *self.data.get() }
    8001d5b4:	e02a                	sd	a0,0(sp)
    8001d5b6:	03850513          	addi	a0,a0,56
    8001d5ba:	fffe8097          	auipc	ra,0xfffe8
    8001d5be:	ca8080e7          	jalr	-856(ra) # 80005262 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17hb24b2b56dfaab8d4E>
    8001d5c2:	e42a                	sd	a0,8(sp)
    8001d5c4:	a009                	j	8001d5c6 <.LBB1_14+0x6a>
        SleepLockGuard {
    8001d5c6:	65a2                	ld	a1,8(sp)
    8001d5c8:	6502                	ld	a0,0(sp)
    8001d5ca:	e0aa                	sd	a0,64(sp)
    8001d5cc:	e4ae                	sd	a1,72(sp)
    }
    8001d5ce:	60e6                	ld	ra,88(sp)
    8001d5d0:	6125                	addi	sp,sp,96
    8001d5d2:	8082                	ret

Disassembly of section .text._ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$6unlock17h4136b26b6a44129dE:

000000008001d5d4 <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$6unlock17h4136b26b6a44129dE>:
    pub fn unlock(&self) {
    8001d5d4:	7179                	addi	sp,sp,-48
    8001d5d6:	f406                	sd	ra,40(sp)
    8001d5d8:	e42a                	sd	a0,8(sp)
    8001d5da:	ec2a                	sd	a0,24(sp)
        let guard = self.lock.acquire();
    8001d5dc:	ffff3097          	auipc	ra,0xffff3
    8001d5e0:	232080e7          	jalr	562(ra) # 8001080e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    8001d5e4:	85aa                	mv	a1,a0
    8001d5e6:	e82e                	sd	a1,16(sp)
    8001d5e8:	f02a                	sd	a0,32(sp)
    8001d5ea:	a009                	j	8001d5ec <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$6unlock17h4136b26b6a44129dE+0x18>
        self.locked.set(false);
    8001d5ec:	6522                	ld	a0,8(sp)
    8001d5ee:	03050513          	addi	a0,a0,48
    8001d5f2:	4581                	li	a1,0
    8001d5f4:	fffe8097          	auipc	ra,0xfffe8
    8001d5f8:	b5c080e7          	jalr	-1188(ra) # 80005150 <_ZN4core4cell13Cell$LT$T$GT$3set17h60fabb73b23781c0E>
    8001d5fc:	a009                	j	8001d5fe <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$6unlock17h4136b26b6a44129dE+0x2a>
        self.wake_up();
    8001d5fe:	6522                	ld	a0,8(sp)
    8001d600:	00000097          	auipc	ra,0x0
    8001d604:	064080e7          	jalr	100(ra) # 8001d664 <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$7wake_up17h37728224df905678E>
    8001d608:	a009                	j	8001d60a <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$6unlock17h4136b26b6a44129dE+0x36>
        drop(guard);
    8001d60a:	6542                	ld	a0,16(sp)
    8001d60c:	00000097          	auipc	ra,0x0
    8001d610:	a14080e7          	jalr	-1516(ra) # 8001d020 <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    8001d614:	a009                	j	8001d616 <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$6unlock17h4136b26b6a44129dE+0x42>
    }
    8001d616:	70a2                	ld	ra,40(sp)
    8001d618:	6145                	addi	sp,sp,48
    8001d61a:	8082                	ret

Disassembly of section .text._ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$6unlock17h5d72a4d2b4e61b31E:

000000008001d61c <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$6unlock17h5d72a4d2b4e61b31E>:
    pub fn unlock(&self) {
    8001d61c:	7179                	addi	sp,sp,-48
    8001d61e:	f406                	sd	ra,40(sp)
    8001d620:	e42a                	sd	a0,8(sp)
    8001d622:	ec2a                	sd	a0,24(sp)
        let guard = self.lock.acquire();
    8001d624:	ffff3097          	auipc	ra,0xffff3
    8001d628:	1ea080e7          	jalr	490(ra) # 8001080e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    8001d62c:	85aa                	mv	a1,a0
    8001d62e:	e82e                	sd	a1,16(sp)
    8001d630:	f02a                	sd	a0,32(sp)
    8001d632:	a009                	j	8001d634 <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$6unlock17h5d72a4d2b4e61b31E+0x18>
        self.locked.set(false);
    8001d634:	6522                	ld	a0,8(sp)
    8001d636:	03050513          	addi	a0,a0,48
    8001d63a:	4581                	li	a1,0
    8001d63c:	fffe8097          	auipc	ra,0xfffe8
    8001d640:	b14080e7          	jalr	-1260(ra) # 80005150 <_ZN4core4cell13Cell$LT$T$GT$3set17h60fabb73b23781c0E>
    8001d644:	a009                	j	8001d646 <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$6unlock17h5d72a4d2b4e61b31E+0x2a>
        self.wake_up();
    8001d646:	6522                	ld	a0,8(sp)
    8001d648:	00000097          	auipc	ra,0x0
    8001d64c:	04c080e7          	jalr	76(ra) # 8001d694 <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$7wake_up17hd47f70df8bbd0f23E>
    8001d650:	a009                	j	8001d652 <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$6unlock17h5d72a4d2b4e61b31E+0x36>
        drop(guard);
    8001d652:	6542                	ld	a0,16(sp)
    8001d654:	00000097          	auipc	ra,0x0
    8001d658:	9cc080e7          	jalr	-1588(ra) # 8001d020 <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    8001d65c:	a009                	j	8001d65e <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$6unlock17h5d72a4d2b4e61b31E+0x42>
    }
    8001d65e:	70a2                	ld	ra,40(sp)
    8001d660:	6145                	addi	sp,sp,48
    8001d662:	8082                	ret

Disassembly of section .text._ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$7wake_up17h37728224df905678E:

000000008001d664 <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$7wake_up17h37728224df905678E>:
    fn wake_up(&self) {
    8001d664:	1101                	addi	sp,sp,-32
    8001d666:	ec06                	sd	ra,24(sp)
    8001d668:	e82a                	sd	a0,16(sp)
            PROC_MANAGER.wake_up(self.locked.as_ptr() as usize);
    8001d66a:	03050513          	addi	a0,a0,48
    8001d66e:	fffe8097          	auipc	ra,0xfffe8
    8001d672:	b3a080e7          	jalr	-1222(ra) # 800051a8 <_ZN4core4cell13Cell$LT$T$GT$6as_ptr17h2323c3e07ac4531cE>
    8001d676:	e42a                	sd	a0,8(sp)
    8001d678:	a009                	j	8001d67a <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$7wake_up17h37728224df905678E+0x16>
    8001d67a:	65a2                	ld	a1,8(sp)

000000008001d67c <.LBB4_3>:
    8001d67c:	0003a517          	auipc	a0,0x3a
    8001d680:	f2450513          	addi	a0,a0,-220 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    8001d684:	ffff0097          	auipc	ra,0xffff0
    8001d688:	27c080e7          	jalr	636(ra) # 8000d900 <_ZN6kernel7process7manager11ProcManager7wake_up17ha46b4d15ac07187bE>
    8001d68c:	a009                	j	8001d68e <.LBB4_3+0x12>
    }
    8001d68e:	60e2                	ld	ra,24(sp)
    8001d690:	6105                	addi	sp,sp,32
    8001d692:	8082                	ret

Disassembly of section .text._ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$7wake_up17hd47f70df8bbd0f23E:

000000008001d694 <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$7wake_up17hd47f70df8bbd0f23E>:
    fn wake_up(&self) {
    8001d694:	1101                	addi	sp,sp,-32
    8001d696:	ec06                	sd	ra,24(sp)
    8001d698:	e82a                	sd	a0,16(sp)
            PROC_MANAGER.wake_up(self.locked.as_ptr() as usize);
    8001d69a:	03050513          	addi	a0,a0,48
    8001d69e:	fffe8097          	auipc	ra,0xfffe8
    8001d6a2:	b0a080e7          	jalr	-1270(ra) # 800051a8 <_ZN4core4cell13Cell$LT$T$GT$6as_ptr17h2323c3e07ac4531cE>
    8001d6a6:	e42a                	sd	a0,8(sp)
    8001d6a8:	a009                	j	8001d6aa <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$7wake_up17hd47f70df8bbd0f23E+0x16>
    8001d6aa:	65a2                	ld	a1,8(sp)

000000008001d6ac <.LBB5_3>:
    8001d6ac:	0003a517          	auipc	a0,0x3a
    8001d6b0:	ef450513          	addi	a0,a0,-268 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    8001d6b4:	ffff0097          	auipc	ra,0xffff0
    8001d6b8:	24c080e7          	jalr	588(ra) # 8000d900 <_ZN6kernel7process7manager11ProcManager7wake_up17ha46b4d15ac07187bE>
    8001d6bc:	a009                	j	8001d6be <.LBB5_3+0x12>
    }
    8001d6be:	60e2                	ld	ra,24(sp)
    8001d6c0:	6105                	addi	sp,sp,32
    8001d6c2:	8082                	ret

Disassembly of section .text._ZN92_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17he0c0fee5a6939b40E:

000000008001d6c4 <_ZN92_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17he0c0fee5a6939b40E>:
    fn deref(&self) -> &T {
    8001d6c4:	1141                	addi	sp,sp,-16
    8001d6c6:	e42a                	sd	a0,8(sp)
        &*self.data
    8001d6c8:	6508                	ld	a0,8(a0)
    }
    8001d6ca:	0141                	addi	sp,sp,16
    8001d6cc:	8082                	ret

Disassembly of section .text._ZN92_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfc7812d7ca7ab1e1E:

000000008001d6ce <_ZN92_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfc7812d7ca7ab1e1E>:
    fn deref(&self) -> &T {
    8001d6ce:	1141                	addi	sp,sp,-16
    8001d6d0:	e42a                	sd	a0,8(sp)
        &*self.data
    8001d6d2:	6508                	ld	a0,8(a0)
    }
    8001d6d4:	0141                	addi	sp,sp,16
    8001d6d6:	8082                	ret

Disassembly of section .text._ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h29ddb6c86f63b2e9E:

000000008001d6d8 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h29ddb6c86f63b2e9E>:
    fn deref_mut(&mut self) -> &mut T {
    8001d6d8:	1141                	addi	sp,sp,-16
    8001d6da:	e42a                	sd	a0,8(sp)
        &mut *self.data
    8001d6dc:	6508                	ld	a0,8(a0)
    }
    8001d6de:	0141                	addi	sp,sp,16
    8001d6e0:	8082                	ret

Disassembly of section .text._ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E:

000000008001d6e2 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>:
    fn deref_mut(&mut self) -> &mut T {
    8001d6e2:	1141                	addi	sp,sp,-16
    8001d6e4:	e42a                	sd	a0,8(sp)
        &mut *self.data
    8001d6e6:	6508                	ld	a0,8(a0)
    }
    8001d6e8:	0141                	addi	sp,sp,16
    8001d6ea:	8082                	ret

Disassembly of section .text._ZN6kernel7process8fork_ret17hc655e7da156c9445E:

000000008001d6ec <_ZN6kernel7process8fork_ret17hc655e7da156c9445E>:

/// A fork child's very first scheduling by scheduler()
/// will switch to forkret.
/// 
/// Need to be handled carefully, because CPU use ra to jump here
unsafe fn fork_ret() -> ! {
    8001d6ec:	1141                	addi	sp,sp,-16
    8001d6ee:	e406                	sd	ra,8(sp)
    8001d6f0:	6541                	lui	a0,0x10
    8001d6f2:	4085059b          	addiw	a1,a0,1032

000000008001d6f6 <.LBB0_6>:
    8001d6f6:	0003a517          	auipc	a0,0x3a
    8001d6fa:	eaa50513          	addi	a0,a0,-342 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    8001d6fe:	952e                	add	a0,a0,a1
    static mut FIRST: bool = true;
    
    // Still holding p->lock from scheduler
    PROC_MANAGER.tasks_lock.release();
    8001d700:	ffff4097          	auipc	ra,0xffff4
    8001d704:	85e080e7          	jalr	-1954(ra) # 80010f5e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17hfda5e7f2f4cdedb7E>
    8001d708:	a009                	j	8001d70a <.LBB0_7>

000000008001d70a <.LBB0_7>:
    
    if FIRST {
    8001d70a:	00053517          	auipc	a0,0x53
    8001d70e:	8f650513          	addi	a0,a0,-1802 # 80070000 <_ZN6kernel7process8fork_ret5FIRST17h9d39a034a1560a70E>
    8001d712:	00054503          	lbu	a0,0(a0)
    8001d716:	8905                	andi	a0,a0,1
    8001d718:	4581                	li	a1,0
    8001d71a:	02b50063          	beq	a0,a1,8001d73a <.LBB0_8+0x1a>
    8001d71e:	a009                	j	8001d720 <.LBB0_8>

000000008001d720 <.LBB0_8>:
        // File system initialization
        FIRST = false;
    8001d720:	00053597          	auipc	a1,0x53
    8001d724:	8e058593          	addi	a1,a1,-1824 # 80070000 <_ZN6kernel7process8fork_ret5FIRST17h9d39a034a1560a70E>
    8001d728:	4501                	li	a0,0
    8001d72a:	00a58023          	sb	a0,0(a1)
    8001d72e:	4505                	li	a0,1
        init(ROOTDEV);
    8001d730:	fffee097          	auipc	ra,0xfffee
    8001d734:	5f4080e7          	jalr	1524(ra) # 8000bd24 <_ZN6kernel2fs4init17h0544bbe6b6556f7eE>
    8001d738:	a011                	j	8001d73c <.LBB0_8+0x1c>
    if FIRST {
    8001d73a:	a011                	j	8001d73e <.LBB0_8+0x1e>
    8001d73c:	a009                	j	8001d73e <.LBB0_8+0x1e>
    }
    // println!("user trap return");
    user_trap_ret();
    8001d73e:	fffe9097          	auipc	ra,0xfffe9
    8001d742:	e18080e7          	jalr	-488(ra) # 80006556 <user_trap_ret>
	...

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h3a39754d1b9c54a7E:

000000008001d748 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h3a39754d1b9c54a7E>:
    pub const unsafe fn add(self, count: usize) -> Self
    8001d748:	1101                	addi	sp,sp,-32
    8001d74a:	ec06                	sd	ra,24(sp)
    8001d74c:	e42a                	sd	a0,8(sp)
    8001d74e:	e82e                	sd	a1,16(sp)
        unsafe { self.offset(count as isize) }
    8001d750:	00000097          	auipc	ra,0x0
    8001d754:	014080e7          	jalr	20(ra) # 8001d764 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17he4f714b54e872ab3E>
    8001d758:	e02a                	sd	a0,0(sp)
    8001d75a:	a009                	j	8001d75c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h3a39754d1b9c54a7E+0x14>
    }
    8001d75c:	6502                	ld	a0,0(sp)
    8001d75e:	60e2                	ld	ra,24(sp)
    8001d760:	6105                	addi	sp,sp,32
    8001d762:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17he4f714b54e872ab3E:

000000008001d764 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17he4f714b54e872ab3E>:
    pub const unsafe fn offset(self, count: isize) -> *mut T
    8001d764:	1101                	addi	sp,sp,-32
    8001d766:	e42a                	sd	a0,8(sp)
    8001d768:	e82e                	sd	a1,16(sp)
    8001d76a:	03000613          	li	a2,48
        unsafe { intrinsics::offset(self, count) as *mut T }
    8001d76e:	02c585b3          	mul	a1,a1,a2
    8001d772:	952e                	add	a0,a0,a1
    8001d774:	e02a                	sd	a0,0(sp)
    8001d776:	ec2a                	sd	a0,24(sp)
    8001d778:	a009                	j	8001d77a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17he4f714b54e872ab3E+0x16>
    }
    8001d77a:	6502                	ld	a0,0(sp)
    8001d77c:	6105                	addi	sp,sp,32
    8001d77e:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h1d4bdf7317c60b96E:

000000008001d780 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h1d4bdf7317c60b96E>:
    pub const fn is_null(self) -> bool {
    8001d780:	1101                	addi	sp,sp,-32
    8001d782:	ec06                	sd	ra,24(sp)
    8001d784:	e82a                	sd	a0,16(sp)
        (self as *mut u8).guaranteed_eq(null_mut())
    8001d786:	e42a                	sd	a0,8(sp)
    8001d788:	a009                	j	8001d78a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h1d4bdf7317c60b96E+0xa>
    8001d78a:	6522                	ld	a0,8(sp)
    8001d78c:	4581                	li	a1,0
    8001d78e:	00005097          	auipc	ra,0x5
    8001d792:	8ae080e7          	jalr	-1874(ra) # 8002203c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$13guaranteed_eq17h32ea8c99c0b8220dE>
    8001d796:	e02a                	sd	a0,0(sp)
    8001d798:	a009                	j	8001d79a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h1d4bdf7317c60b96E+0x1a>
    }
    8001d79a:	6502                	ld	a0,0(sp)
    8001d79c:	60e2                	ld	ra,24(sp)
    8001d79e:	6105                	addi	sp,sp,32
    8001d7a0:	8082                	ret

Disassembly of section .text._ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb34fa5c829e1d9f2E:

000000008001d7a2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb34fa5c829e1d9f2E>:
    pub const fn as_mut_ptr(&mut self) -> *mut T {
    8001d7a2:	1141                	addi	sp,sp,-16
    8001d7a4:	e02a                	sd	a0,0(sp)
    8001d7a6:	e42e                	sd	a1,8(sp)
    }
    8001d7a8:	0141                	addi	sp,sp,16
    8001d7aa:	8082                	ret

Disassembly of section .text._ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h5af32af5d380fccdE:

000000008001d7ac <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h5af32af5d380fccdE>:
    pub const fn len(&self) -> usize {
    8001d7ac:	7179                	addi	sp,sp,-48
    8001d7ae:	e42e                	sd	a1,8(sp)
    8001d7b0:	85aa                	mv	a1,a0
    8001d7b2:	6522                	ld	a0,8(sp)
    8001d7b4:	f02e                	sd	a1,32(sp)
    8001d7b6:	f42a                	sd	a0,40(sp)
            unsafe { crate::ptr::PtrRepr { const_ptr: self }.components.metadata }
    8001d7b8:	e82e                	sd	a1,16(sp)
    8001d7ba:	ec2a                	sd	a0,24(sp)
    }
    8001d7bc:	6145                	addi	sp,sp,48
    8001d7be:	8082                	ret

Disassembly of section .text._ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17hdf73a8173be099ebE:

000000008001d7c0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17hdf73a8173be099ebE>:
    pub fn iter_mut(&mut self) -> IterMut<'_, T> {
    8001d7c0:	7179                	addi	sp,sp,-48
    8001d7c2:	f406                	sd	ra,40(sp)
    8001d7c4:	ec2a                	sd	a0,24(sp)
    8001d7c6:	f02e                	sd	a1,32(sp)
        IterMut::new(self)
    8001d7c8:	fffed097          	auipc	ra,0xfffed
    8001d7cc:	6de080e7          	jalr	1758(ra) # 8000aea6 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h41c69a0e1f2809d6E>
    8001d7d0:	e42a                	sd	a0,8(sp)
    8001d7d2:	e82e                	sd	a1,16(sp)
    8001d7d4:	a009                	j	8001d7d6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17hdf73a8173be099ebE+0x16>
    }
    8001d7d6:	65c2                	ld	a1,16(sp)
    8001d7d8:	6522                	ld	a0,8(sp)
    8001d7da:	70a2                	ld	ra,40(sp)
    8001d7dc:	6145                	addi	sp,sp,48
    8001d7de:	8082                	ret

Disassembly of section .text._ZN4core5clone5impls62_$LT$impl$u20$core..clone..Clone$u20$for$u20$$BP$mut$u20$T$GT$5clone17hfb2ece9f6678fcc6E:

000000008001d7e0 <_ZN4core5clone5impls62_$LT$impl$u20$core..clone..Clone$u20$for$u20$$BP$mut$u20$T$GT$5clone17hfb2ece9f6678fcc6E>:
    }

    #[stable(feature = "rust1", since = "1.0.0")]
    impl<T: ?Sized> Clone for *mut T {
        #[inline]
        fn clone(&self) -> Self {
    8001d7e0:	1141                	addi	sp,sp,-16
    8001d7e2:	e42a                	sd	a0,8(sp)
            *self
    8001d7e4:	6108                	ld	a0,0(a0)
        }
    8001d7e6:	0141                	addi	sp,sp,16
    8001d7e8:	8082                	ret

Disassembly of section .text._ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$i16$GT$5clone17h91da98197f473cc1E:

000000008001d7ea <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$i16$GT$5clone17h91da98197f473cc1E>:
                    fn clone(&self) -> Self {
    8001d7ea:	1141                	addi	sp,sp,-16
    8001d7ec:	e42a                	sd	a0,8(sp)
                    }
    8001d7ee:	00051503          	lh	a0,0(a0)
    8001d7f2:	0141                	addi	sp,sp,16
    8001d7f4:	8082                	ret

Disassembly of section .text._ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u16$GT$5clone17h7947cab6b7dc7abbE:

000000008001d7f6 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u16$GT$5clone17h7947cab6b7dc7abbE>:
                    fn clone(&self) -> Self {
    8001d7f6:	1141                	addi	sp,sp,-16
    8001d7f8:	e42a                	sd	a0,8(sp)
                    }
    8001d7fa:	00051503          	lh	a0,0(a0)
    8001d7fe:	0141                	addi	sp,sp,16
    8001d800:	8082                	ret

Disassembly of section .text._ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17ha1019ce9fdc4d620E:

000000008001d802 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17ha1019ce9fdc4d620E>:
                    fn clone(&self) -> Self {
    8001d802:	1141                	addi	sp,sp,-16
    8001d804:	e42a                	sd	a0,8(sp)
                    }
    8001d806:	4108                	lw	a0,0(a0)
    8001d808:	0141                	addi	sp,sp,16
    8001d80a:	8082                	ret

Disassembly of section .text._ZN4core5clone5impls53_$LT$impl$u20$core..clone..Clone$u20$for$u20$bool$GT$5clone17hd6e1e19c635da345E:

000000008001d80c <_ZN4core5clone5impls53_$LT$impl$u20$core..clone..Clone$u20$for$u20$bool$GT$5clone17hd6e1e19c635da345E>:
                    fn clone(&self) -> Self {
    8001d80c:	1141                	addi	sp,sp,-16
    8001d80e:	e42a                	sd	a0,8(sp)
                        *self
    8001d810:	00054503          	lbu	a0,0(a0)
                    }
    8001d814:	0141                	addi	sp,sp,16
    8001d816:	8082                	ret

Disassembly of section .text._ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$usize$GT$5clone17h35e6cace0a4ed712E:

000000008001d818 <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$usize$GT$5clone17h35e6cace0a4ed712E>:
                    fn clone(&self) -> Self {
    8001d818:	1141                	addi	sp,sp,-16
    8001d81a:	e42a                	sd	a0,8(sp)
                        *self
    8001d81c:	6108                	ld	a0,0(a0)
                    }
    8001d81e:	0141                	addi	sp,sp,16
    8001d820:	8082                	ret

Disassembly of section .text._ZN6kernel6memory7mapping13page_round_up17h53b8f5a3d9b0c04fE:

000000008001d822 <_ZN6kernel6memory7mapping13page_round_up17h53b8f5a3d9b0c04fE>:
pub use page_table_entry::*;
pub use kernel_map::*;

use crate::arch::riscv::qemu::layout::PGSIZE;

pub fn page_round_up(addr: usize) -> usize{
    8001d822:	1101                	addi	sp,sp,-32
    8001d824:	85aa                	mv	a1,a0
    8001d826:	ec2e                	sd	a1,24(sp)
    8001d828:	6505                	lui	a0,0x1
    (addr + PGSIZE - 1) & !(PGSIZE - 1)
    8001d82a:	952e                	add	a0,a0,a1
    8001d82c:	e82a                	sd	a0,16(sp)
    8001d82e:	00b56f63          	bltu	a0,a1,8001d84c <.LBB0_5>
    8001d832:	a009                	j	8001d834 <_ZN6kernel6memory7mapping13page_round_up17h53b8f5a3d9b0c04fE+0x12>
    8001d834:	6542                	ld	a0,16(sp)
    8001d836:	fff50593          	addi	a1,a0,-1 # fff <.Lline_table_start0+0x30a>
    8001d83a:	e42e                	sd	a1,8(sp)
    8001d83c:	02b56663          	bltu	a0,a1,8001d868 <.LBB0_7>
    8001d840:	a009                	j	8001d842 <_ZN6kernel6memory7mapping13page_round_up17h53b8f5a3d9b0c04fE+0x20>
    8001d842:	6522                	ld	a0,8(sp)
    8001d844:	75fd                	lui	a1,0xfffff
    8001d846:	8d6d                	and	a0,a0,a1
}
    8001d848:	6105                	addi	sp,sp,32
    8001d84a:	8082                	ret

000000008001d84c <.LBB0_5>:
    (addr + PGSIZE - 1) & !(PGSIZE - 1)
    8001d84c:	0000e517          	auipc	a0,0xe
    8001d850:	ce450513          	addi	a0,a0,-796 # 8002b530 <str.0>

000000008001d854 <.LBB0_6>:
    8001d854:	0000e617          	auipc	a2,0xe
    8001d858:	cc460613          	addi	a2,a2,-828 # 8002b518 <.L__unnamed_1>
    8001d85c:	45f1                	li	a1,28
    8001d85e:	00005097          	auipc	ra,0x5
    8001d862:	a18080e7          	jalr	-1512(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008001d868 <.LBB0_7>:
    8001d868:	0000e517          	auipc	a0,0xe
    8001d86c:	d0850513          	addi	a0,a0,-760 # 8002b570 <str.1>

000000008001d870 <.LBB0_8>:
    8001d870:	0000e617          	auipc	a2,0xe
    8001d874:	ce060613          	addi	a2,a2,-800 # 8002b550 <.L__unnamed_2>
    8001d878:	02100593          	li	a1,33
    8001d87c:	00005097          	auipc	ra,0x5
    8001d880:	9fa080e7          	jalr	-1542(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel4arch5riscv8register3sie4read17h0ba5d34b74a7fc92E:

000000008001d886 <_ZN6kernel4arch5riscv8register3sie4read17h0ba5d34b74a7fc92E>:
    STIE = 1 << 5, // timer
    SSIE = 1 << 1, // software
}

#[inline]
pub unsafe fn read() -> usize {
    8001d886:	1141                	addi	sp,sp,-16
    let ret:usize;
    llvm_asm!("csrr $0, sie":"=r"(ret):::"volatile");
    8001d888:	10402573          	csrr	a0,sie
    8001d88c:	e42a                	sd	a0,8(sp)
    ret
}
    8001d88e:	0141                	addi	sp,sp,16
    8001d890:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register3sie5write17h4451b4d1e5667981E:

000000008001d892 <_ZN6kernel4arch5riscv8register3sie5write17h4451b4d1e5667981E>:

#[inline]
pub unsafe fn write(x:usize) {
    8001d892:	1141                	addi	sp,sp,-16
    8001d894:	e42a                	sd	a0,8(sp)
    llvm_asm!("csrw sie, $0"::"r"(x)::"volatile");
    8001d896:	10451073          	csrw	sie,a0
}
    8001d89a:	0141                	addi	sp,sp,16
    8001d89c:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register3sie7intr_on17ha44057f13b8cbd2fE:

000000008001d89e <_ZN6kernel4arch5riscv8register3sie7intr_on17ha44057f13b8cbd2fE>:

/// enable all software interrupts
/// still need to set SIE bit in sstatus
pub unsafe fn intr_on() {
    8001d89e:	1141                	addi	sp,sp,-16
    let mut sie = read();
    8001d8a0:	e406                	sd	ra,8(sp)
    8001d8a2:	00000097          	auipc	ra,0x0
    8001d8a6:	fe4080e7          	jalr	-28(ra) # 8001d886 <_ZN6kernel4arch5riscv8register3sie4read17h0ba5d34b74a7fc92E>
    8001d8aa:	e02a                	sd	a0,0(sp)
    8001d8ac:	a009                	j	8001d8ae <_ZN6kernel4arch5riscv8register3sie7intr_on17ha44057f13b8cbd2fE+0x10>
    sie |= SIE::SSIE as usize | SIE::STIE as usize | SIE::SEIE as usize;
    8001d8ae:	6502                	ld	a0,0(sp)
    8001d8b0:	22256513          	ori	a0,a0,546
    8001d8b4:	e02a                	sd	a0,0(sp)
    write(sie);
    8001d8b6:	00000097          	auipc	ra,0x0
    8001d8ba:	fdc080e7          	jalr	-36(ra) # 8001d892 <_ZN6kernel4arch5riscv8register3sie5write17h4451b4d1e5667981E>
    8001d8be:	a009                	j	8001d8c0 <_ZN6kernel4arch5riscv8register3sie7intr_on17ha44057f13b8cbd2fE+0x22>
    8001d8c0:	60a2                	ld	ra,8(sp)
    8001d8c2:	0141                	addi	sp,sp,16
    8001d8c4:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register3sip4read17h3bdc92cfb299a0b6E:

000000008001d8c6 <_ZN6kernel4arch5riscv8register3sip4read17h3bdc92cfb299a0b6E>:
// Supervisor Interrupt Pending

const SSIP: usize = 1 << 1;

#[inline]
pub unsafe fn read() -> usize {
    8001d8c6:	1141                	addi	sp,sp,-16
    let sip: usize;
    llvm_asm!("csrr $0, sip":"=r"(sip):::"volatile");
    8001d8c8:	14402573          	csrr	a0,sip
    8001d8cc:	e42a                	sd	a0,8(sp)
    sip
}
    8001d8ce:	0141                	addi	sp,sp,16
    8001d8d0:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register3sip5write17hc1eecfa799475477E:

000000008001d8d2 <_ZN6kernel4arch5riscv8register3sip5write17hc1eecfa799475477E>:

#[inline]
pub unsafe fn write(sip: usize){
    8001d8d2:	1141                	addi	sp,sp,-16
    8001d8d4:	e42a                	sd	a0,8(sp)
    llvm_asm!("csrw sip, $0"::"r"(sip)::"volatile");
    8001d8d6:	14451073          	csrw	sip,a0
}
    8001d8da:	0141                	addi	sp,sp,16
    8001d8dc:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register3sip10clear_ssip17h3546c4610df6574fE:

000000008001d8de <_ZN6kernel4arch5riscv8register3sip10clear_ssip17h3546c4610df6574fE>:

pub fn clear_ssip() {
    8001d8de:	1141                	addi	sp,sp,-16
    unsafe {
        write(read() & !SSIP);
    8001d8e0:	e406                	sd	ra,8(sp)
    8001d8e2:	00000097          	auipc	ra,0x0
    8001d8e6:	fe4080e7          	jalr	-28(ra) # 8001d8c6 <_ZN6kernel4arch5riscv8register3sip4read17h3bdc92cfb299a0b6E>
    8001d8ea:	e02a                	sd	a0,0(sp)
    8001d8ec:	a009                	j	8001d8ee <_ZN6kernel4arch5riscv8register3sip10clear_ssip17h3546c4610df6574fE+0x10>
    8001d8ee:	6502                	ld	a0,0(sp)
    8001d8f0:	9975                	andi	a0,a0,-3
    8001d8f2:	00000097          	auipc	ra,0x0
    8001d8f6:	fe0080e7          	jalr	-32(ra) # 8001d8d2 <_ZN6kernel4arch5riscv8register3sip5write17hc1eecfa799475477E>
    8001d8fa:	a009                	j	8001d8fc <_ZN6kernel4arch5riscv8register3sip10clear_ssip17h3546c4610df6574fE+0x1e>
    }
    8001d8fc:	60a2                	ld	ra,8(sp)
    8001d8fe:	0141                	addi	sp,sp,16
    8001d900:	8082                	ret

Disassembly of section .text._ZN6kernel6driver4plic12PLIC_SENABLE17h7b6da31aa84dc734E:

000000008001d902 <_ZN6kernel6driver4plic12PLIC_SENABLE17h7b6da31aa84dc734E>:

fn PLIC_MENABLE(hart_id: usize) -> usize {
    PLIC_BASE + 0x2000 + hart_id * 0x100
}

fn PLIC_SENABLE(hart_id: usize) -> usize {
    8001d902:	1101                	addi	sp,sp,-32
    8001d904:	85aa                	mv	a1,a0
    8001d906:	ec2e                	sd	a1,24(sp)
    8001d908:	4505                	li	a0,1
    8001d90a:	1562                	slli	a0,a0,0x38
    8001d90c:	157d                	addi	a0,a0,-1
    PLIC_BASE + 0x2080 + hart_id * 0x100
    8001d90e:	8d6d                	and	a0,a0,a1
    8001d910:	00859613          	slli	a2,a1,0x8
    8001d914:	e832                	sd	a2,16(sp)
    8001d916:	02b51063          	bne	a0,a1,8001d936 <.LBB0_5>
    8001d91a:	a009                	j	8001d91c <_ZN6kernel6driver4plic12PLIC_SENABLE17h7b6da31aa84dc734E+0x1a>
    8001d91c:	65c2                	ld	a1,16(sp)
    8001d91e:	0c002537          	lui	a0,0xc002
    8001d922:	0805051b          	addiw	a0,a0,128
    8001d926:	952e                	add	a0,a0,a1
    8001d928:	e42a                	sd	a0,8(sp)
    8001d92a:	02b56563          	bltu	a0,a1,8001d954 <.LBB0_7>
    8001d92e:	a009                	j	8001d930 <_ZN6kernel6driver4plic12PLIC_SENABLE17h7b6da31aa84dc734E+0x2e>
}
    8001d930:	6522                	ld	a0,8(sp)
    8001d932:	6105                	addi	sp,sp,32
    8001d934:	8082                	ret

000000008001d936 <.LBB0_5>:
    PLIC_BASE + 0x2080 + hart_id * 0x100
    8001d936:	0000e517          	auipc	a0,0xe
    8001d93a:	c8a50513          	addi	a0,a0,-886 # 8002b5c0 <str.0>

000000008001d93e <.LBB0_6>:
    8001d93e:	0000e617          	auipc	a2,0xe
    8001d942:	c6a60613          	addi	a2,a2,-918 # 8002b5a8 <.L__unnamed_1>
    8001d946:	02100593          	li	a1,33
    8001d94a:	00005097          	auipc	ra,0x5
    8001d94e:	92c080e7          	jalr	-1748(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008001d954 <.LBB0_7>:
    8001d954:	0000e517          	auipc	a0,0xe
    8001d958:	cac50513          	addi	a0,a0,-852 # 8002b600 <str.1>

000000008001d95c <.LBB0_8>:
    8001d95c:	0000e617          	auipc	a2,0xe
    8001d960:	c8c60613          	addi	a2,a2,-884 # 8002b5e8 <.L__unnamed_2>
    8001d964:	45f1                	li	a1,28
    8001d966:	00005097          	auipc	ra,0x5
    8001d96a:	910080e7          	jalr	-1776(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel6driver4plic14PLIC_SPRIORITY17h6633467d20099d1cE:

000000008001d970 <_ZN6kernel6driver4plic14PLIC_SPRIORITY17h6633467d20099d1cE>:

fn PLIC_MPRIORITY(hart_id: usize) -> usize {
    PLIC_BASE + 0x200000 + hart_id * 0x2000
}

fn PLIC_SPRIORITY(hart_id: usize) -> usize {
    8001d970:	1101                	addi	sp,sp,-32
    8001d972:	85aa                	mv	a1,a0
    8001d974:	ec2e                	sd	a1,24(sp)
    8001d976:	4505                	li	a0,1
    8001d978:	154e                	slli	a0,a0,0x33
    8001d97a:	157d                	addi	a0,a0,-1
    PLIC_BASE + 0x201000 + hart_id * 0x2000
    8001d97c:	8d6d                	and	a0,a0,a1
    8001d97e:	00d59613          	slli	a2,a1,0xd
    8001d982:	e832                	sd	a2,16(sp)
    8001d984:	00b51e63          	bne	a0,a1,8001d9a0 <.LBB1_5>
    8001d988:	a009                	j	8001d98a <_ZN6kernel6driver4plic14PLIC_SPRIORITY17h6633467d20099d1cE+0x1a>
    8001d98a:	65c2                	ld	a1,16(sp)
    8001d98c:	0c201537          	lui	a0,0xc201
    8001d990:	952e                	add	a0,a0,a1
    8001d992:	e42a                	sd	a0,8(sp)
    8001d994:	02b56563          	bltu	a0,a1,8001d9be <.LBB1_7>
    8001d998:	a009                	j	8001d99a <_ZN6kernel6driver4plic14PLIC_SPRIORITY17h6633467d20099d1cE+0x2a>
}
    8001d99a:	6522                	ld	a0,8(sp)
    8001d99c:	6105                	addi	sp,sp,32
    8001d99e:	8082                	ret

000000008001d9a0 <.LBB1_5>:
    PLIC_BASE + 0x201000 + hart_id * 0x2000
    8001d9a0:	0000e517          	auipc	a0,0xe
    8001d9a4:	c2050513          	addi	a0,a0,-992 # 8002b5c0 <str.0>

000000008001d9a8 <.LBB1_6>:
    8001d9a8:	0000e617          	auipc	a2,0xe
    8001d9ac:	c7860613          	addi	a2,a2,-904 # 8002b620 <.L__unnamed_3>
    8001d9b0:	02100593          	li	a1,33
    8001d9b4:	00005097          	auipc	ra,0x5
    8001d9b8:	8c2080e7          	jalr	-1854(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008001d9be <.LBB1_7>:
    8001d9be:	0000e517          	auipc	a0,0xe
    8001d9c2:	c4250513          	addi	a0,a0,-958 # 8002b600 <str.1>

000000008001d9c6 <.LBB1_8>:
    8001d9c6:	0000e617          	auipc	a2,0xe
    8001d9ca:	c7260613          	addi	a2,a2,-910 # 8002b638 <.L__unnamed_4>
    8001d9ce:	45f1                	li	a1,28
    8001d9d0:	00005097          	auipc	ra,0x5
    8001d9d4:	8a6080e7          	jalr	-1882(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel6driver4plic11PLIC_SCLAIM17h917e90647b3a6232E:

000000008001d9da <_ZN6kernel6driver4plic11PLIC_SCLAIM17h917e90647b3a6232E>:

fn PLIC_MCLAIM(hart_id: usize) -> usize {
    PLIC_BASE + 0x200004 + hart_id * 0x2000
}

fn PLIC_SCLAIM(hart_id: usize) -> usize {
    8001d9da:	1101                	addi	sp,sp,-32
    8001d9dc:	85aa                	mv	a1,a0
    8001d9de:	ec2e                	sd	a1,24(sp)
    8001d9e0:	4505                	li	a0,1
    8001d9e2:	154e                	slli	a0,a0,0x33
    8001d9e4:	157d                	addi	a0,a0,-1
    PLIC_BASE + 0x201004 + hart_id * 0x2000
    8001d9e6:	8d6d                	and	a0,a0,a1
    8001d9e8:	00d59613          	slli	a2,a1,0xd
    8001d9ec:	e832                	sd	a2,16(sp)
    8001d9ee:	00b51f63          	bne	a0,a1,8001da0c <.LBB2_5>
    8001d9f2:	a009                	j	8001d9f4 <_ZN6kernel6driver4plic11PLIC_SCLAIM17h917e90647b3a6232E+0x1a>
    8001d9f4:	65c2                	ld	a1,16(sp)
    8001d9f6:	0c201537          	lui	a0,0xc201
    8001d9fa:	2511                	addiw	a0,a0,4
    8001d9fc:	952e                	add	a0,a0,a1
    8001d9fe:	e42a                	sd	a0,8(sp)
    8001da00:	02b56563          	bltu	a0,a1,8001da2a <.LBB2_7>
    8001da04:	a009                	j	8001da06 <_ZN6kernel6driver4plic11PLIC_SCLAIM17h917e90647b3a6232E+0x2c>
}
    8001da06:	6522                	ld	a0,8(sp)
    8001da08:	6105                	addi	sp,sp,32
    8001da0a:	8082                	ret

000000008001da0c <.LBB2_5>:
    PLIC_BASE + 0x201004 + hart_id * 0x2000
    8001da0c:	0000e517          	auipc	a0,0xe
    8001da10:	bb450513          	addi	a0,a0,-1100 # 8002b5c0 <str.0>

000000008001da14 <.LBB2_6>:
    8001da14:	0000e617          	auipc	a2,0xe
    8001da18:	c3c60613          	addi	a2,a2,-964 # 8002b650 <.L__unnamed_5>
    8001da1c:	02100593          	li	a1,33
    8001da20:	00005097          	auipc	ra,0x5
    8001da24:	856080e7          	jalr	-1962(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008001da2a <.LBB2_7>:
    8001da2a:	0000e517          	auipc	a0,0xe
    8001da2e:	bd650513          	addi	a0,a0,-1066 # 8002b600 <str.1>

000000008001da32 <.LBB2_8>:
    8001da32:	0000e617          	auipc	a2,0xe
    8001da36:	c3660613          	addi	a2,a2,-970 # 8002b668 <.L__unnamed_6>
    8001da3a:	45f1                	li	a1,28
    8001da3c:	00005097          	auipc	ra,0x5
    8001da40:	83a080e7          	jalr	-1990(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel6driver4plic9plic_init17he281b1081f5a24ddE:

000000008001da46 <_ZN6kernel6driver4plic9plic_init17he281b1081f5a24ddE>:

pub fn plic_init() {
    8001da46:	1141                	addi	sp,sp,-16
    8001da48:	e406                	sd	ra,8(sp)
    8001da4a:	0c000537          	lui	a0,0xc000
    8001da4e:	0285051b          	addiw	a0,a0,40
    8001da52:	4585                	li	a1,1
    // set desired IRQ priorities non-zero (otherwise disable)
    write(PLIC_BASE + (UART0_IRQ * 4) as usize, 1);
    8001da54:	00000097          	auipc	ra,0x0
    8001da58:	10c080e7          	jalr	268(ra) # 8001db60 <_ZN6kernel6driver4plic5write17h05d815ac827a7212E>
    8001da5c:	a009                	j	8001da5e <_ZN6kernel6driver4plic9plic_init17he281b1081f5a24ddE+0x18>
    8001da5e:	0c000537          	lui	a0,0xc000
    8001da62:	2511                	addiw	a0,a0,4
    8001da64:	4585                	li	a1,1
    write(PLIC_BASE + (VIRTIO0_IRQ * 4) as usize, 1);
    8001da66:	00000097          	auipc	ra,0x0
    8001da6a:	0fa080e7          	jalr	250(ra) # 8001db60 <_ZN6kernel6driver4plic5write17h05d815ac827a7212E>
    8001da6e:	a009                	j	8001da70 <_ZN6kernel6driver4plic9plic_init17he281b1081f5a24ddE+0x2a>
}
    8001da70:	60a2                	ld	ra,8(sp)
    8001da72:	0141                	addi	sp,sp,16
    8001da74:	8082                	ret

Disassembly of section .text._ZN6kernel6driver4plic14plic_init_hart17he37af6da421066b1E:

000000008001da76 <_ZN6kernel6driver4plic14plic_init_hart17he37af6da421066b1E>:

pub fn plic_init_hart() {
    8001da76:	7179                	addi	sp,sp,-48
    let hart_id = unsafe{ cpuid() };
    8001da78:	f406                	sd	ra,40(sp)
    8001da7a:	ffff4097          	auipc	ra,0xffff4
    8001da7e:	31c080e7          	jalr	796(ra) # 80011d96 <_ZN6kernel7process3cpu5cpuid17h605093a6a9a60164E>
    8001da82:	85aa                	mv	a1,a0
    8001da84:	ec2e                	sd	a1,24(sp)
    8001da86:	f02a                	sd	a0,32(sp)
    8001da88:	a009                	j	8001da8a <_ZN6kernel6driver4plic14plic_init_hart17he37af6da421066b1E+0x14>

    // Set UART's enable bit for this hart's S-mode. 
    write(PLIC_SENABLE(hart_id), (1 << UART0_IRQ) | (1 << VIRTIO0_IRQ));
    8001da8a:	6562                	ld	a0,24(sp)
    8001da8c:	00000097          	auipc	ra,0x0
    8001da90:	e76080e7          	jalr	-394(ra) # 8001d902 <_ZN6kernel6driver4plic12PLIC_SENABLE17h7b6da31aa84dc734E>
    8001da94:	e82a                	sd	a0,16(sp)
    8001da96:	a009                	j	8001da98 <_ZN6kernel6driver4plic14plic_init_hart17he37af6da421066b1E+0x22>
    8001da98:	6542                	ld	a0,16(sp)
    8001da9a:	40200593          	li	a1,1026
    8001da9e:	00000097          	auipc	ra,0x0
    8001daa2:	0c2080e7          	jalr	194(ra) # 8001db60 <_ZN6kernel6driver4plic5write17h05d815ac827a7212E>
    8001daa6:	a009                	j	8001daa8 <_ZN6kernel6driver4plic14plic_init_hart17he37af6da421066b1E+0x32>

    // Set this hart's S-mode pirority threshold to 0. 
    write(PLIC_SPRIORITY(hart_id), 0);
    8001daa8:	6562                	ld	a0,24(sp)
    8001daaa:	00000097          	auipc	ra,0x0
    8001daae:	ec6080e7          	jalr	-314(ra) # 8001d970 <_ZN6kernel6driver4plic14PLIC_SPRIORITY17h6633467d20099d1cE>
    8001dab2:	e42a                	sd	a0,8(sp)
    8001dab4:	a009                	j	8001dab6 <_ZN6kernel6driver4plic14plic_init_hart17he37af6da421066b1E+0x40>
    8001dab6:	6522                	ld	a0,8(sp)
    8001dab8:	4581                	li	a1,0
    8001daba:	00000097          	auipc	ra,0x0
    8001dabe:	0a6080e7          	jalr	166(ra) # 8001db60 <_ZN6kernel6driver4plic5write17h05d815ac827a7212E>
    8001dac2:	a009                	j	8001dac4 <_ZN6kernel6driver4plic14plic_init_hart17he37af6da421066b1E+0x4e>
}
    8001dac4:	70a2                	ld	ra,40(sp)
    8001dac6:	6145                	addi	sp,sp,48
    8001dac8:	8082                	ret

Disassembly of section .text._ZN6kernel6driver4plic10plic_claim17h6764dad227b44c96E:

000000008001daca <_ZN6kernel6driver4plic10plic_claim17h6764dad227b44c96E>:

/// Ask the PLIC what interrupt we should serve. 
pub fn plic_claim() -> Option<u32> {
    8001daca:	7139                	addi	sp,sp,-64
    let hart_id = unsafe {
        cpuid()
    8001dacc:	fc06                	sd	ra,56(sp)
    8001dace:	ffff4097          	auipc	ra,0xffff4
    8001dad2:	2c8080e7          	jalr	712(ra) # 80011d96 <_ZN6kernel7process3cpu5cpuid17h605093a6a9a60164E>
    8001dad6:	85aa                	mv	a1,a0
    8001dad8:	ec2e                	sd	a1,24(sp)
    8001dada:	f42a                	sd	a0,40(sp)
    8001dadc:	a009                	j	8001dade <_ZN6kernel6driver4plic10plic_claim17h6764dad227b44c96E+0x14>
    };
    let interrupt = read(PLIC_SCLAIM(hart_id));
    8001dade:	6562                	ld	a0,24(sp)
    8001dae0:	00000097          	auipc	ra,0x0
    8001dae4:	efa080e7          	jalr	-262(ra) # 8001d9da <_ZN6kernel6driver4plic11PLIC_SCLAIM17h917e90647b3a6232E>
    8001dae8:	e82a                	sd	a0,16(sp)
    8001daea:	a009                	j	8001daec <_ZN6kernel6driver4plic10plic_claim17h6764dad227b44c96E+0x22>
    8001daec:	6542                	ld	a0,16(sp)
    8001daee:	00000097          	auipc	ra,0x0
    8001daf2:	08a080e7          	jalr	138(ra) # 8001db78 <_ZN6kernel6driver4plic4read17h33375bd18868bbd4E>
    8001daf6:	85aa                	mv	a1,a0
    8001daf8:	e42e                	sd	a1,8(sp)
    8001dafa:	da2a                	sw	a0,52(sp)
    8001dafc:	a009                	j	8001dafe <_ZN6kernel6driver4plic10plic_claim17h6764dad227b44c96E+0x34>
    if interrupt == 0 {
    8001dafe:	6522                	ld	a0,8(sp)
    8001db00:	2501                	sext.w	a0,a0
    8001db02:	4581                	li	a1,0
    8001db04:	00b51663          	bne	a0,a1,8001db10 <_ZN6kernel6driver4plic10plic_claim17h6764dad227b44c96E+0x46>
    8001db08:	a009                	j	8001db0a <_ZN6kernel6driver4plic10plic_claim17h6764dad227b44c96E+0x40>
    8001db0a:	4501                	li	a0,0
        None
    8001db0c:	d02a                	sw	a0,32(sp)
    if interrupt == 0 {
    8001db0e:	a031                	j	8001db1a <_ZN6kernel6driver4plic10plic_claim17h6764dad227b44c96E+0x50>
    } else {
        Some(interrupt)
    8001db10:	6522                	ld	a0,8(sp)
    8001db12:	d22a                	sw	a0,36(sp)
    8001db14:	4505                	li	a0,1
    8001db16:	d02a                	sw	a0,32(sp)
    if interrupt == 0 {
    8001db18:	a009                	j	8001db1a <_ZN6kernel6driver4plic10plic_claim17h6764dad227b44c96E+0x50>
    }
}
    8001db1a:	5502                	lw	a0,32(sp)
    8001db1c:	5592                	lw	a1,36(sp)
    8001db1e:	70e2                	ld	ra,56(sp)
    8001db20:	6121                	addi	sp,sp,64
    8001db22:	8082                	ret

Disassembly of section .text._ZN6kernel6driver4plic13plic_complete17hc3a23eee8594fbc3E:

000000008001db24 <_ZN6kernel6driver4plic13plic_complete17hc3a23eee8594fbc3E>:

/// Tell the PLIC we've served the IRQ
pub fn plic_complete(interrupt: u32) {
    8001db24:	7179                	addi	sp,sp,-48
    8001db26:	f406                	sd	ra,40(sp)
    8001db28:	85aa                	mv	a1,a0
    8001db2a:	e42e                	sd	a1,8(sp)
    8001db2c:	ce2a                	sw	a0,28(sp)
    let hart_id = unsafe {
        cpuid()
    8001db2e:	ffff4097          	auipc	ra,0xffff4
    8001db32:	268080e7          	jalr	616(ra) # 80011d96 <_ZN6kernel7process3cpu5cpuid17h605093a6a9a60164E>
    8001db36:	85aa                	mv	a1,a0
    8001db38:	e82e                	sd	a1,16(sp)
    8001db3a:	f02a                	sd	a0,32(sp)
    8001db3c:	a009                	j	8001db3e <_ZN6kernel6driver4plic13plic_complete17hc3a23eee8594fbc3E+0x1a>
    };
    write(PLIC_SCLAIM(hart_id), interrupt);
    8001db3e:	6542                	ld	a0,16(sp)
    8001db40:	00000097          	auipc	ra,0x0
    8001db44:	e9a080e7          	jalr	-358(ra) # 8001d9da <_ZN6kernel6driver4plic11PLIC_SCLAIM17h917e90647b3a6232E>
    8001db48:	e02a                	sd	a0,0(sp)
    8001db4a:	a009                	j	8001db4c <_ZN6kernel6driver4plic13plic_complete17hc3a23eee8594fbc3E+0x28>
    8001db4c:	65a2                	ld	a1,8(sp)
    8001db4e:	6502                	ld	a0,0(sp)
    8001db50:	00000097          	auipc	ra,0x0
    8001db54:	010080e7          	jalr	16(ra) # 8001db60 <_ZN6kernel6driver4plic5write17h05d815ac827a7212E>
    8001db58:	a009                	j	8001db5a <_ZN6kernel6driver4plic13plic_complete17hc3a23eee8594fbc3E+0x36>
}
    8001db5a:	70a2                	ld	ra,40(sp)
    8001db5c:	6145                	addi	sp,sp,48
    8001db5e:	8082                	ret

Disassembly of section .text._ZN6kernel6driver4plic5write17h05d815ac827a7212E:

000000008001db60 <_ZN6kernel6driver4plic5write17h05d815ac827a7212E>:


fn write(addr: usize, val: u32) {
    8001db60:	1101                	addi	sp,sp,-32
    8001db62:	ec06                	sd	ra,24(sp)
    8001db64:	e42a                	sd	a0,8(sp)
    8001db66:	ca2e                	sw	a1,20(sp)
    unsafe {
        ptr::write(addr as *mut u32, val);
    8001db68:	ffffb097          	auipc	ra,0xffffb
    8001db6c:	d6e080e7          	jalr	-658(ra) # 800188d6 <_ZN4core3ptr5write17h10d6d8799e54bf75E>
    8001db70:	a009                	j	8001db72 <_ZN6kernel6driver4plic5write17h05d815ac827a7212E+0x12>
    }
}
    8001db72:	60e2                	ld	ra,24(sp)
    8001db74:	6105                	addi	sp,sp,32
    8001db76:	8082                	ret

Disassembly of section .text._ZN6kernel6driver4plic4read17h33375bd18868bbd4E:

000000008001db78 <_ZN6kernel6driver4plic4read17h33375bd18868bbd4E>:

fn read(addr: usize) -> u32 {
    8001db78:	1101                	addi	sp,sp,-32
    8001db7a:	ec06                	sd	ra,24(sp)
    8001db7c:	e82a                	sd	a0,16(sp)
    unsafe {
        ptr::read(addr as *const u32)
    8001db7e:	ffffb097          	auipc	ra,0xffffb
    8001db82:	b68080e7          	jalr	-1176(ra) # 800186e6 <_ZN4core3ptr4read17h97f5e0e151e0fdc4E>
    8001db86:	e42a                	sd	a0,8(sp)
    8001db88:	a009                	j	8001db8a <_ZN6kernel6driver4plic4read17h33375bd18868bbd4E+0x12>
    }
    8001db8a:	6522                	ld	a0,8(sp)
    8001db8c:	60e2                	ld	ra,24(sp)
    8001db8e:	6105                	addi	sp,sp,32
    8001db90:	8082                	ret

Disassembly of section .text._ZN6kernel6memory14copy_to_kernel17hd4730b664342d99cE:

000000008001db92 <_ZN6kernel6memory14copy_to_kernel17hd4730b664342d99cE>:

/// Copy from either a user address, or kernel address,
/// depending on is_user. 
/// Returns Result<(), &'static str>
/// 从用户或者内核地址拷贝到内核中
pub fn copy_to_kernel(
    8001db92:	7175                	addi	sp,sp,-144
    8001db94:	e506                	sd	ra,136(sp)
    8001db96:	f036                	sd	a3,32(sp)
    8001db98:	f432                	sd	a2,40(sp)
    8001db9a:	f82a                	sd	a0,48(sp)
    8001db9c:	872e                	mv	a4,a1
    8001db9e:	fc3a                	sd	a4,56(sp)
    8001dba0:	ecaa                	sd	a0,88(sp)
    8001dba2:	06b103a3          	sb	a1,103(sp)
    8001dba6:	f4b2                	sd	a2,104(sp)
    8001dba8:	f8b6                	sd	a3,112(sp)

000000008001dbaa <.LBB0_9>:
    is_user: bool, 
    src: usize, 
    len: usize
) -> Result<(), &'static str>{
    unsafe {
        let my_proc =  CPU_MANAGER.myproc().unwrap();
    8001dbaa:	00055517          	auipc	a0,0x55
    8001dbae:	59650513          	addi	a0,a0,1430 # 80073140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    8001dbb2:	ffff4097          	auipc	ra,0xffff4
    8001dbb6:	24c080e7          	jalr	588(ra) # 80011dfe <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    8001dbba:	e0aa                	sd	a0,64(sp)
    8001dbbc:	a009                	j	8001dbbe <.LBB0_9+0x14>
    8001dbbe:	6506                	ld	a0,64(sp)

000000008001dbc0 <.LBB0_10>:
    8001dbc0:	0000e597          	auipc	a1,0xe
    8001dbc4:	ad858593          	addi	a1,a1,-1320 # 8002b698 <.L__unnamed_1>
    8001dbc8:	ffff1097          	auipc	ra,0xffff1
    8001dbcc:	184080e7          	jalr	388(ra) # 8000ed4c <_ZN4core6option15Option$LT$T$GT$6unwrap17h81f0c84c54a80648E>
    8001dbd0:	85aa                	mv	a1,a0
    8001dbd2:	ec2e                	sd	a1,24(sp)
    8001dbd4:	fcaa                	sd	a0,120(sp)
    8001dbd6:	a009                	j	8001dbd8 <.LBB0_10+0x18>
    8001dbd8:	7562                	ld	a0,56(sp)
    8001dbda:	4581                	li	a1,0
        
        if is_user {
    8001dbdc:	00b50b63          	beq	a0,a1,8001dbf2 <.LBB0_10+0x32>
    8001dbe0:	a009                	j	8001dbe2 <.LBB0_10+0x22>
            let page_table = my_proc.pagetable.as_mut().unwrap();
    8001dbe2:	6562                	ld	a0,24(sp)
    8001dbe4:	6d08                	ld	a0,24(a0)
    8001dbe6:	fffef097          	auipc	ra,0xfffef
    8001dbea:	faa080e7          	jalr	-86(ra) # 8000cb90 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17hfc3d5eeea9dab8e4E>
    8001dbee:	e82a                	sd	a0,16(sp)
    8001dbf0:	a809                	j	8001dc02 <.LBB0_10+0x42>
                dst,
                src,
                len
            )
        } else {
            ptr::copy(
    8001dbf2:	7602                	ld	a2,32(sp)
    8001dbf4:	75a2                	ld	a1,40(sp)
    8001dbf6:	7542                	ld	a0,48(sp)
    8001dbf8:	00007097          	auipc	ra,0x7
    8001dbfc:	502080e7          	jalr	1282(ra) # 800250fa <memmove>
    8001dc00:	a80d                	j	8001dc32 <.LBB0_11+0x2e>
            let page_table = my_proc.pagetable.as_mut().unwrap();
    8001dc02:	6542                	ld	a0,16(sp)

000000008001dc04 <.LBB0_11>:
    8001dc04:	0000e597          	auipc	a1,0xe
    8001dc08:	aac58593          	addi	a1,a1,-1364 # 8002b6b0 <.L__unnamed_2>
    8001dc0c:	ffff1097          	auipc	ra,0xffff1
    8001dc10:	fc4080e7          	jalr	-60(ra) # 8000ebd0 <_ZN4core6option15Option$LT$T$GT$6unwrap17h2b22556a60663957E>
    8001dc14:	85aa                	mv	a1,a0
    8001dc16:	e42e                	sd	a1,8(sp)
    8001dc18:	e12a                	sd	a0,128(sp)
    8001dc1a:	a009                	j	8001dc1c <.LBB0_11+0x18>
            page_table.copy_in(
    8001dc1c:	7682                	ld	a3,32(sp)
    8001dc1e:	7622                	ld	a2,40(sp)
    8001dc20:	75c2                	ld	a1,48(sp)
    8001dc22:	6522                	ld	a0,8(sp)
    8001dc24:	ffffa097          	auipc	ra,0xffffa
    8001dc28:	1d4080e7          	jalr	468(ra) # 80017df8 <_ZN6kernel6memory7mapping10page_table9PageTable7copy_in17h459a5354b5a5ab11E>
    8001dc2c:	e4aa                	sd	a0,72(sp)
    8001dc2e:	e8ae                	sd	a1,80(sp)
    8001dc30:	a021                	j	8001dc38 <.LBB0_11+0x34>
    8001dc32:	4501                	li	a0,0
                src as *const u8, 
                dst as *mut u8, 
                len
            );
            Ok(())
    8001dc34:	e4aa                	sd	a0,72(sp)
        if is_user {
    8001dc36:	a009                	j	8001dc38 <.LBB0_11+0x34>
        }
    }
}
    8001dc38:	6526                	ld	a0,72(sp)
    8001dc3a:	65c6                	ld	a1,80(sp)
    8001dc3c:	60aa                	ld	ra,136(sp)
    8001dc3e:	6149                	addi	sp,sp,144
    8001dc40:	8082                	ret

Disassembly of section .text._ZN6kernel6memory16copy_from_kernel17hf0969988b3a5fbc0E:

000000008001dc42 <_ZN6kernel6memory16copy_from_kernel17hf0969988b3a5fbc0E>:

/// Copy to either a user address, or kernel address,
/// depending on usr_dst. 
/// Returns 0 on success, -1 on error. 
/// 如果is_user是true的话，表明dst是用户的虚拟地址，否则是内核的虚拟地址
pub fn copy_from_kernel(
    8001dc42:	7171                	addi	sp,sp,-176
    8001dc44:	f506                	sd	ra,168(sp)
    8001dc46:	f436                	sd	a3,40(sp)
    8001dc48:	f832                	sd	a2,48(sp)
    8001dc4a:	fc2e                	sd	a1,56(sp)
    8001dc4c:	872a                	mv	a4,a0
    8001dc4e:	e0ba                	sd	a4,64(sp)
    8001dc50:	06a10fa3          	sb	a0,127(sp)
    8001dc54:	e12e                	sd	a1,128(sp)
    8001dc56:	e532                	sd	a2,136(sp)
    8001dc58:	e936                	sd	a3,144(sp)

000000008001dc5a <.LBB1_12>:
    dst: usize,
    src: *const u8,
    len: usize
) -> Result<(), &'static str> {
    unsafe{
        let p = CPU_MANAGER.myproc().unwrap();
    8001dc5a:	00055517          	auipc	a0,0x55
    8001dc5e:	4e650513          	addi	a0,a0,1254 # 80073140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    8001dc62:	ffff4097          	auipc	ra,0xffff4
    8001dc66:	19c080e7          	jalr	412(ra) # 80011dfe <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    8001dc6a:	e4aa                	sd	a0,72(sp)
    8001dc6c:	a009                	j	8001dc6e <.LBB1_12+0x14>
    8001dc6e:	6526                	ld	a0,72(sp)

000000008001dc70 <.LBB1_13>:
    8001dc70:	0000e597          	auipc	a1,0xe
    8001dc74:	a5858593          	addi	a1,a1,-1448 # 8002b6c8 <.L__unnamed_3>
    8001dc78:	ffff1097          	auipc	ra,0xffff1
    8001dc7c:	0d4080e7          	jalr	212(ra) # 8000ed4c <_ZN4core6option15Option$LT$T$GT$6unwrap17h81f0c84c54a80648E>
    8001dc80:	85aa                	mv	a1,a0
    8001dc82:	f02e                	sd	a1,32(sp)
    8001dc84:	ed2a                	sd	a0,152(sp)
    8001dc86:	a009                	j	8001dc88 <.LBB1_13+0x18>
    8001dc88:	6506                	ld	a0,64(sp)
    8001dc8a:	4581                	li	a1,0
        if is_user {
    8001dc8c:	00b50b63          	beq	a0,a1,8001dca2 <.LBB1_13+0x32>
    8001dc90:	a009                	j	8001dc92 <.LBB1_13+0x22>
            let page_table = p.pagetable.as_mut().unwrap();
    8001dc92:	7502                	ld	a0,32(sp)
    8001dc94:	6d08                	ld	a0,24(a0)
    8001dc96:	fffef097          	auipc	ra,0xfffef
    8001dc9a:	efa080e7          	jalr	-262(ra) # 8000cb90 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17hfc3d5eeea9dab8e4E>
    8001dc9e:	ec2a                	sd	a0,24(sp)
    8001dca0:	a809                	j	8001dcb2 <.LBB1_13+0x42>
                    dst,
                    src,
                    len
                )
        } else {
            let mut buf = vec![0u8;len];
    8001dca2:	7622                	ld	a2,40(sp)
    8001dca4:	1088                	addi	a0,sp,96
    8001dca6:	4581                	li	a1,0
    8001dca8:	ffff9097          	auipc	ra,0xffff9
    8001dcac:	064080e7          	jalr	100(ra) # 80016d0c <_ZN5alloc3vec9from_elem17h254506728307fd13E>
    8001dcb0:	a80d                	j	8001dce2 <.LBB1_14+0x2e>
            let page_table = p.pagetable.as_mut().unwrap();
    8001dcb2:	6562                	ld	a0,24(sp)

000000008001dcb4 <.LBB1_14>:
    8001dcb4:	0000e597          	auipc	a1,0xe
    8001dcb8:	a2c58593          	addi	a1,a1,-1492 # 8002b6e0 <.L__unnamed_4>
    8001dcbc:	ffff1097          	auipc	ra,0xffff1
    8001dcc0:	f14080e7          	jalr	-236(ra) # 8000ebd0 <_ZN4core6option15Option$LT$T$GT$6unwrap17h2b22556a60663957E>
    8001dcc4:	85aa                	mv	a1,a0
    8001dcc6:	e82e                	sd	a1,16(sp)
    8001dcc8:	f12a                	sd	a0,160(sp)
    8001dcca:	a009                	j	8001dccc <.LBB1_14+0x18>
            page_table
    8001dccc:	76a2                	ld	a3,40(sp)
    8001dcce:	7642                	ld	a2,48(sp)
    8001dcd0:	75e2                	ld	a1,56(sp)
    8001dcd2:	6542                	ld	a0,16(sp)
    8001dcd4:	ffffa097          	auipc	ra,0xffffa
    8001dcd8:	ef4080e7          	jalr	-268(ra) # 80017bc8 <_ZN6kernel6memory7mapping10page_table9PageTable8copy_out17h55d0f27ee3680817E>
    8001dcdc:	e8aa                	sd	a0,80(sp)
    8001dcde:	ecae                	sd	a1,88(sp)
    8001dce0:	a081                	j	8001dd20 <.LBB1_14+0x6c>
    8001dce2:	1088                	addi	a0,sp,96
            ptr::copy(src as *const u8, buf.as_mut_ptr(), len);
    8001dce4:	ffff9097          	auipc	ra,0xffff9
    8001dce8:	e30080e7          	jalr	-464(ra) # 80016b14 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$10as_mut_ptr17h2d512420264161fdE>
    8001dcec:	e42a                	sd	a0,8(sp)
    8001dcee:	a009                	j	8001dcf0 <.LBB1_14+0x3c>
    8001dcf0:	7622                	ld	a2,40(sp)
    8001dcf2:	75c2                	ld	a1,48(sp)
    8001dcf4:	6522                	ld	a0,8(sp)
    8001dcf6:	00007097          	auipc	ra,0x7
    8001dcfa:	404080e7          	jalr	1028(ra) # 800250fa <memmove>
    8001dcfe:	a009                	j	8001dd00 <.LBB1_14+0x4c>
            ptr::copy(
    8001dd00:	7622                	ld	a2,40(sp)
    8001dd02:	75c2                	ld	a1,48(sp)
    8001dd04:	7562                	ld	a0,56(sp)
    8001dd06:	00007097          	auipc	ra,0x7
    8001dd0a:	3f4080e7          	jalr	1012(ra) # 800250fa <memmove>
    8001dd0e:	a009                	j	8001dd10 <.LBB1_14+0x5c>
    8001dd10:	4501                	li	a0,0
                src as *const u8, 
                dst as *mut u8, 
                len
            );
            Ok(())
    8001dd12:	e8aa                	sd	a0,80(sp)
    8001dd14:	1088                	addi	a0,sp,96
        }
    8001dd16:	fffe9097          	auipc	ra,0xfffe9
    8001dd1a:	182080e7          	jalr	386(ra) # 80006e98 <_ZN4core3ptr46drop_in_place$LT$alloc..vec..Vec$LT$u8$GT$$GT$17hc049a0af331ff31cE>
    8001dd1e:	a009                	j	8001dd20 <.LBB1_14+0x6c>
    }

    8001dd20:	6546                	ld	a0,80(sp)
    8001dd22:	65e6                	ld	a1,88(sp)
    8001dd24:	70aa                	ld	ra,168(sp)
    8001dd26:	614d                	addi	sp,sp,176
    8001dd28:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h188cc5d34f3b14d9E:

000000008001dd2a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h188cc5d34f3b14d9E>:
    pub const fn is_null(self) -> bool {
    8001dd2a:	1101                	addi	sp,sp,-32
    8001dd2c:	ec06                	sd	ra,24(sp)
    8001dd2e:	e82a                	sd	a0,16(sp)
        (self as *mut u8).guaranteed_eq(null_mut())
    8001dd30:	e42a                	sd	a0,8(sp)
    8001dd32:	a009                	j	8001dd34 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h188cc5d34f3b14d9E+0xa>
    8001dd34:	6522                	ld	a0,8(sp)
    8001dd36:	4581                	li	a1,0
    8001dd38:	00004097          	auipc	ra,0x4
    8001dd3c:	304080e7          	jalr	772(ra) # 8002203c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$13guaranteed_eq17h32ea8c99c0b8220dE>
    8001dd40:	e02a                	sd	a0,0(sp)
    8001dd42:	a009                	j	8001dd44 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h188cc5d34f3b14d9E+0x1a>
    }
    8001dd44:	6502                	ld	a0,0(sp)
    8001dd46:	60e2                	ld	ra,24(sp)
    8001dd48:	6105                	addi	sp,sp,32
    8001dd4a:	8082                	ret

Disassembly of section .text._ZN6kernel6printf6_print17hbf6f661b066aad08E:

000000008001dd4c <_ZN6kernel6printf6_print17hbf6f661b066aad08E>:

use crate::driver::uart::UART;
use crate::lock::spinlock::Spinlock;
use crate::shutdown::*;

pub fn _print(args: fmt::Arguments) {
    8001dd4c:	711d                	addi	sp,sp,-96
    8001dd4e:	ec86                	sd	ra,88(sp)
    8001dd50:	ec2a                	sd	a0,24(sp)

000000008001dd52 <.LBB0_6>:
    use fmt::Write;
    let mut uart = UART.acquire();
    8001dd52:	0004c517          	auipc	a0,0x4c
    8001dd56:	b0e50513          	addi	a0,a0,-1266 # 80069860 <_ZN6kernel6driver4uart4UART17h0708b3e179d548ddE>
    8001dd5a:	ffff2097          	auipc	ra,0xffff2
    8001dd5e:	3b4080e7          	jalr	948(ra) # 8001010e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h007ac3682185ef97E>
    8001dd62:	f02a                	sd	a0,32(sp)
    8001dd64:	a009                	j	8001dd66 <.LBB0_6+0x14>
    8001dd66:	1008                	addi	a0,sp,32
    uart.write_fmt(args).unwrap();
    8001dd68:	ffff4097          	auipc	ra,0xffff4
    8001dd6c:	a2e080e7          	jalr	-1490(ra) # 80011796 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hce69ac52326dbcadE>
    8001dd70:	e82a                	sd	a0,16(sp)
    8001dd72:	a009                	j	8001dd74 <.LBB0_6+0x22>
    8001dd74:	6542                	ld	a0,16(sp)
    8001dd76:	65e2                	ld	a1,24(sp)
    8001dd78:	7590                	ld	a2,40(a1)
    8001dd7a:	e8b2                	sd	a2,80(sp)
    8001dd7c:	7190                	ld	a2,32(a1)
    8001dd7e:	e4b2                	sd	a2,72(sp)
    8001dd80:	6d90                	ld	a2,24(a1)
    8001dd82:	e0b2                	sd	a2,64(sp)
    8001dd84:	6990                	ld	a2,16(a1)
    8001dd86:	fc32                	sd	a2,56(sp)
    8001dd88:	6590                	ld	a2,8(a1)
    8001dd8a:	f832                	sd	a2,48(sp)
    8001dd8c:	618c                	ld	a1,0(a1)
    8001dd8e:	f42e                	sd	a1,40(sp)
    8001dd90:	102c                	addi	a1,sp,40
    8001dd92:	00001097          	auipc	ra,0x1
    8001dd96:	998080e7          	jalr	-1640(ra) # 8001e72a <_ZN4core3fmt5Write9write_fmt17h7425e676f17f7351E>
    8001dd9a:	e42a                	sd	a0,8(sp)
    8001dd9c:	a009                	j	8001dd9e <.LBB0_6+0x4c>
    8001dd9e:	6522                	ld	a0,8(sp)

000000008001dda0 <.LBB0_7>:
    8001dda0:	0000e597          	auipc	a1,0xe
    8001dda4:	96858593          	addi	a1,a1,-1688 # 8002b708 <.L__unnamed_1>
    8001dda8:	fffef097          	auipc	ra,0xfffef
    8001ddac:	076080e7          	jalr	118(ra) # 8000ce1e <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h0d39573adfd86ec0E>
    8001ddb0:	a009                	j	8001ddb2 <.LBB0_7+0x12>
    drop(uart);
    8001ddb2:	7502                	ld	a0,32(sp)
    8001ddb4:	fffff097          	auipc	ra,0xfffff
    8001ddb8:	32c080e7          	jalr	812(ra) # 8001d0e0 <_ZN4core3mem4drop17h96fc0e7c88170ba8E>
    8001ddbc:	a009                	j	8001ddbe <.LBB0_7+0x1e>
}
    8001ddbe:	60e6                	ld	ra,88(sp)
    8001ddc0:	6125                	addi	sp,sp,96
    8001ddc2:	8082                	ret

Disassembly of section .text.rust_begin_unwind:

000000008001ddc4 <rust_begin_unwind>:
        $crate::printf::_print(format_args!(concat!($fmt, "\n") $(,$($arg)+)?));
    }
}

#[panic_handler]
fn panic(info: &PanicInfo<'_>) -> ! {
    8001ddc4:	7159                	addi	sp,sp,-112
    8001ddc6:	f486                	sd	ra,104(sp)
    8001ddc8:	e82a                	sd	a0,16(sp)
    8001ddca:	0808                	addi	a0,sp,16
    println!("\x1b[1;31mpanic: '{}'\x1b[0m", info);
    8001ddcc:	ecaa                	sd	a0,88(sp)
    8001ddce:	f0aa                	sd	a0,96(sp)

000000008001ddd0 <.LBB1_5>:
    8001ddd0:	fffef597          	auipc	a1,0xfffef
    8001ddd4:	e4658593          	addi	a1,a1,-442 # 8000cc16 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h0a4be43e8f3bcf0dE>
    8001ddd8:	00001097          	auipc	ra,0x1
    8001dddc:	8cc080e7          	jalr	-1844(ra) # 8001e6a4 <_ZN4core3fmt10ArgumentV13new17hff1fcd65a46300b2E>
    8001dde0:	e02a                	sd	a0,0(sp)
    8001dde2:	e42e                	sd	a1,8(sp)
    8001dde4:	a009                	j	8001dde6 <.LBB1_5+0x16>
    8001dde6:	6522                	ld	a0,8(sp)
    8001dde8:	6582                	ld	a1,0(sp)
    8001ddea:	e4ae                	sd	a1,72(sp)
    8001ddec:	e8aa                	sd	a0,80(sp)

000000008001ddee <.LBB1_6>:
    8001ddee:	0000e597          	auipc	a1,0xe
    8001ddf2:	94a58593          	addi	a1,a1,-1718 # 8002b738 <.L__unnamed_2>
    8001ddf6:	0828                	addi	a0,sp,24
    8001ddf8:	4609                	li	a2,2
    8001ddfa:	00b4                	addi	a3,sp,72
    8001ddfc:	4705                	li	a4,1
    8001ddfe:	fffe7097          	auipc	ra,0xfffe7
    8001de02:	66c080e7          	jalr	1644(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8001de06:	a009                	j	8001de08 <.LBB1_6+0x1a>
    8001de08:	0828                	addi	a0,sp,24
    8001de0a:	00000097          	auipc	ra,0x0
    8001de0e:	f42080e7          	jalr	-190(ra) # 8001dd4c <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8001de12:	a009                	j	8001de14 <.LBB1_6+0x26>
    shutdown();
    8001de14:	fffe7097          	auipc	ra,0xfffe7
    8001de18:	57e080e7          	jalr	1406(ra) # 80005392 <_ZN6kernel8shutdown8shutdown17hf11bb5dd05ff266dE>
    8001de1c:	a009                	j	8001de1e <.LBB1_6+0x30>
    loop {}
    8001de1e:	a001                	j	8001de1e <.LBB1_6+0x30>

Disassembly of section .text._ZN6kernel4arch5riscv8register7mideleg5write17hf36c8c211297ea03E:

000000008001de20 <_ZN6kernel4arch5riscv8register7mideleg5write17hf36c8c211297ea03E>:
    llvm_asm!("csrr $0, mideleg":"=r"(ret):::"volatile");
    ret
}

#[inline]
pub unsafe fn write(mideleg: usize) {
    8001de20:	1141                	addi	sp,sp,-16
    8001de22:	e42a                	sd	a0,8(sp)
    llvm_asm!("csrw mideleg, $0"::"r"(mideleg)::"volatile");
    8001de24:	30351073          	csrw	mideleg,a0
    8001de28:	0141                	addi	sp,sp,16
    8001de2a:	8082                	ret

Disassembly of section .text._ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hdbffcc8df8ebe27dE:

000000008001de2c <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hdbffcc8df8ebe27dE>:
    fn into_iter(self) -> I {
    8001de2c:	1141                	addi	sp,sp,-16
    8001de2e:	e02a                	sd	a0,0(sp)
    8001de30:	e42e                	sd	a1,8(sp)
    }
    8001de32:	0141                	addi	sp,sp,16
    8001de34:	8082                	ret

Disassembly of section .text._ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he31f6e5d3eec2be9E:

000000008001de36 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he31f6e5d3eec2be9E>:
    fn into_iter(self) -> I {
    8001de36:	1141                	addi	sp,sp,-16
    8001de38:	e02a                	sd	a0,0(sp)
    8001de3a:	e42e                	sd	a1,8(sp)
    }
    8001de3c:	0141                	addi	sp,sp,16
    8001de3e:	8082                	ret

Disassembly of section .text._ZN81_$LT$core..str..iter..Chars$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17ha7c7da80d3c0bdbeE:

000000008001de40 <_ZN81_$LT$core..str..iter..Chars$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17ha7c7da80d3c0bdbeE>:
        next_code_point(&mut self.iter).map(|ch| {
    8001de40:	1101                	addi	sp,sp,-32
    8001de42:	ec06                	sd	ra,24(sp)
    8001de44:	ca2a                	sw	a0,20(sp)
            unsafe { char::from_u32_unchecked(ch) }
    8001de46:	ffffe097          	auipc	ra,0xffffe
    8001de4a:	734080e7          	jalr	1844(ra) # 8001c57a <_ZN4core4char7convert18from_u32_unchecked17hac286a657ee2c904E>
    8001de4e:	1502                	slli	a0,a0,0x20
    8001de50:	9101                	srli	a0,a0,0x20
    8001de52:	e42a                	sd	a0,8(sp)
    8001de54:	a009                	j	8001de56 <_ZN81_$LT$core..str..iter..Chars$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17ha7c7da80d3c0bdbeE+0x16>
        })
    8001de56:	6522                	ld	a0,8(sp)
    8001de58:	60e2                	ld	ra,24(sp)
    8001de5a:	6105                	addi	sp,sp,32
    8001de5c:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register7medeleg5write17h087038b3215eaf8cE:

000000008001de5e <_ZN6kernel4arch5riscv8register7medeleg5write17h087038b3215eaf8cE>:
    llvm_asm!("csrr $0, medeleg":"=r"(ret):::"volatile");
    ret
}

#[inline]
pub unsafe fn write(medeleg: usize){
    8001de5e:	1141                	addi	sp,sp,-16
    8001de60:	e42a                	sd	a0,8(sp)
    llvm_asm!("csrw medeleg, $0"::"r"(medeleg)::"volatile");
    8001de62:	30251073          	csrw	medeleg,a0
    8001de66:	0141                	addi	sp,sp,16
    8001de68:	8082                	ret

Disassembly of section .text._ZN4core3num21_$LT$impl$u20$u16$GT$13unchecked_add17hfa49a7085d490705E:

000000008001de6a <_ZN4core3num21_$LT$impl$u20$u16$GT$13unchecked_add17hfa49a7085d490705E>:
            issue = "none",
        )]
        #[must_use = "this returns the result of the operation, \
                      without modifying the original"]
        #[inline]
        pub unsafe fn unchecked_add(self, rhs: Self) -> Self {
    8001de6a:	1141                	addi	sp,sp,-16
    8001de6c:	00a11523          	sh	a0,10(sp)
    8001de70:	00b11623          	sh	a1,12(sp)
            // SAFETY: the caller must uphold the safety contract for
            // `unchecked_add`.
            unsafe { intrinsics::unchecked_add(self, rhs) }
    8001de74:	952e                	add	a0,a0,a1
    8001de76:	00a11723          	sh	a0,14(sp)
    8001de7a:	65c1                	lui	a1,0x10
    8001de7c:	35fd                	addiw	a1,a1,-1
    8001de7e:	8d6d                	and	a0,a0,a1
    8001de80:	e02a                	sd	a0,0(sp)
    8001de82:	a009                	j	8001de84 <_ZN4core3num21_$LT$impl$u20$u16$GT$13unchecked_add17hfa49a7085d490705E+0x1a>
        }
    8001de84:	6502                	ld	a0,0(sp)
    8001de86:	0141                	addi	sp,sp,16
    8001de88:	8082                	ret

Disassembly of section .text._ZN4core3num21_$LT$impl$u20$u32$GT$11checked_add17h28c8b802ca50f266E:

000000008001de8a <_ZN4core3num21_$LT$impl$u20$u32$GT$11checked_add17h28c8b802ca50f266E>:
        pub const fn checked_add(self, rhs: Self) -> Option<Self> {
    8001de8a:	7139                	addi	sp,sp,-64
    8001de8c:	fc06                	sd	ra,56(sp)
    8001de8e:	d42a                	sw	a0,40(sp)
    8001de90:	d62e                	sw	a1,44(sp)
            let (a, b) = self.overflowing_add(rhs);
    8001de92:	00000097          	auipc	ra,0x0
    8001de96:	05e080e7          	jalr	94(ra) # 8001def0 <_ZN4core3num21_$LT$impl$u20$u32$GT$15overflowing_add17h6c31d0dcc95be001E>
    8001de9a:	e82a                	sd	a0,16(sp)
    8001de9c:	ec2e                	sd	a1,24(sp)
    8001de9e:	a009                	j	8001dea0 <_ZN4core3num21_$LT$impl$u20$u32$GT$11checked_add17h28c8b802ca50f266E+0x16>
    8001dea0:	6562                	ld	a0,24(sp)
    8001dea2:	65c2                	ld	a1,16(sp)
    8001dea4:	d82e                	sw	a1,48(sp)
    8001dea6:	8905                	andi	a0,a0,1
    8001dea8:	e42a                	sd	a0,8(sp)
    8001deaa:	02a10b23          	sb	a0,54(sp)
            if unlikely!(b) {None} else {Some(a)}
    8001deae:	02a10ba3          	sb	a0,55(sp)
    8001deb2:	a009                	j	8001deb4 <_ZN4core3num21_$LT$impl$u20$u32$GT$11checked_add17h28c8b802ca50f266E+0x2a>
    8001deb4:	6522                	ld	a0,8(sp)
    8001deb6:	4581                	li	a1,0
    8001deb8:	00b50663          	beq	a0,a1,8001dec4 <_ZN4core3num21_$LT$impl$u20$u32$GT$11checked_add17h28c8b802ca50f266E+0x3a>
    8001debc:	a009                	j	8001debe <_ZN4core3num21_$LT$impl$u20$u32$GT$11checked_add17h28c8b802ca50f266E+0x34>
    8001debe:	4501                	li	a0,0
    8001dec0:	d02a                	sw	a0,32(sp)
    8001dec2:	a031                	j	8001dece <_ZN4core3num21_$LT$impl$u20$u32$GT$11checked_add17h28c8b802ca50f266E+0x44>
    8001dec4:	6542                	ld	a0,16(sp)
    8001dec6:	d22a                	sw	a0,36(sp)
    8001dec8:	4505                	li	a0,1
    8001deca:	d02a                	sw	a0,32(sp)
    8001decc:	a009                	j	8001dece <_ZN4core3num21_$LT$impl$u20$u32$GT$11checked_add17h28c8b802ca50f266E+0x44>
        }
    8001dece:	5502                	lw	a0,32(sp)
    8001ded0:	5592                	lw	a1,36(sp)
    8001ded2:	70e2                	ld	ra,56(sp)
    8001ded4:	6121                	addi	sp,sp,64
    8001ded6:	8082                	ret

Disassembly of section .text._ZN4core3num21_$LT$impl$u20$u32$GT$13unchecked_add17hceb6a8c852a4dc08E:

000000008001ded8 <_ZN4core3num21_$LT$impl$u20$u32$GT$13unchecked_add17hceb6a8c852a4dc08E>:
        pub unsafe fn unchecked_add(self, rhs: Self) -> Self {
    8001ded8:	1101                	addi	sp,sp,-32
    8001deda:	ca2a                	sw	a0,20(sp)
    8001dedc:	cc2e                	sw	a1,24(sp)
            unsafe { intrinsics::unchecked_add(self, rhs) }
    8001dede:	952e                	add	a0,a0,a1
    8001dee0:	ce2a                	sw	a0,28(sp)
    8001dee2:	1502                	slli	a0,a0,0x20
    8001dee4:	9101                	srli	a0,a0,0x20
    8001dee6:	e42a                	sd	a0,8(sp)
    8001dee8:	a009                	j	8001deea <_ZN4core3num21_$LT$impl$u20$u32$GT$13unchecked_add17hceb6a8c852a4dc08E+0x12>
        }
    8001deea:	6522                	ld	a0,8(sp)
    8001deec:	6105                	addi	sp,sp,32
    8001deee:	8082                	ret

Disassembly of section .text._ZN4core3num21_$LT$impl$u20$u32$GT$15overflowing_add17h6c31d0dcc95be001E:

000000008001def0 <_ZN4core3num21_$LT$impl$u20$u32$GT$15overflowing_add17h6c31d0dcc95be001E>:
        #[stable(feature = "wrapping", since = "1.7.0")]
        #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        #[must_use = "this returns the result of the operation, \
                      without modifying the original"]
        #[inline]
        pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {
    8001def0:	7179                	addi	sp,sp,-48
    8001def2:	862e                	mv	a2,a1
    8001def4:	86aa                	mv	a3,a0
    8001def6:	02061513          	slli	a0,a2,0x20
    8001defa:	02055593          	srli	a1,a0,0x20
    8001defe:	02069513          	slli	a0,a3,0x20
    8001df02:	9101                	srli	a0,a0,0x20
    8001df04:	cc36                	sw	a3,24(sp)
    8001df06:	ce32                	sw	a2,28(sp)
            let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
    8001df08:	95aa                	add	a1,a1,a0
    8001df0a:	02059513          	slli	a0,a1,0x20
    8001df0e:	9101                	srli	a0,a0,0x20
    8001df10:	e02a                	sd	a0,0(sp)
    8001df12:	8d2d                	xor	a0,a0,a1
    8001df14:	00a03533          	snez	a0,a0
    8001df18:	e42a                	sd	a0,8(sp)
    8001df1a:	d02e                	sw	a1,32(sp)
    8001df1c:	02a10223          	sb	a0,36(sp)
    8001df20:	a009                	j	8001df22 <_ZN4core3num21_$LT$impl$u20$u32$GT$15overflowing_add17h6c31d0dcc95be001E+0x32>
    8001df22:	65a2                	ld	a1,8(sp)
    8001df24:	6502                	ld	a0,0(sp)
    8001df26:	d42a                	sw	a0,40(sp)
    8001df28:	02b107a3          	sb	a1,47(sp)
            (a as Self, b)
    8001df2c:	c82a                	sw	a0,16(sp)
    8001df2e:	00b10a23          	sb	a1,20(sp)
        }
    8001df32:	6145                	addi	sp,sp,48
    8001df34:	8082                	ret

Disassembly of section .text._ZN4core3num23_$LT$impl$u20$usize$GT$10count_ones17hc42f1db1f03657afE:

000000008001df36 <_ZN4core3num23_$LT$impl$u20$usize$GT$10count_ones17hc42f1db1f03657afE>:
        pub const fn count_ones(self) -> u32 {
    8001df36:	1101                	addi	sp,sp,-32
    8001df38:	e82a                	sd	a0,16(sp)
            intrinsics::ctpop(self as $ActualT) as u32
    8001df3a:	00155593          	srli	a1,a0,0x1
    8001df3e:	05555637          	lui	a2,0x5555
    8001df42:	5556061b          	addiw	a2,a2,1365
    8001df46:	0632                	slli	a2,a2,0xc
    8001df48:	55560613          	addi	a2,a2,1365 # 5555555 <.Lline_table_start0+0x551ea53>
    8001df4c:	0632                	slli	a2,a2,0xc
    8001df4e:	55560613          	addi	a2,a2,1365
    8001df52:	0632                	slli	a2,a2,0xc
    8001df54:	55560613          	addi	a2,a2,1365
    8001df58:	8df1                	and	a1,a1,a2
    8001df5a:	40b505b3          	sub	a1,a0,a1
    8001df5e:	03333537          	lui	a0,0x3333
    8001df62:	3335051b          	addiw	a0,a0,819
    8001df66:	0532                	slli	a0,a0,0xc
    8001df68:	33350513          	addi	a0,a0,819 # 3333333 <.Lline_table_start0+0x32fc831>
    8001df6c:	0532                	slli	a0,a0,0xc
    8001df6e:	33350513          	addi	a0,a0,819
    8001df72:	0532                	slli	a0,a0,0xc
    8001df74:	33350613          	addi	a2,a0,819
    8001df78:	00c5f533          	and	a0,a1,a2
    8001df7c:	8189                	srli	a1,a1,0x2
    8001df7e:	8df1                	and	a1,a1,a2
    8001df80:	952e                	add	a0,a0,a1
    8001df82:	00455593          	srli	a1,a0,0x4
    8001df86:	952e                	add	a0,a0,a1
    8001df88:	00f0f5b7          	lui	a1,0xf0f
    8001df8c:	0f15859b          	addiw	a1,a1,241
    8001df90:	05b2                	slli	a1,a1,0xc
    8001df92:	f0f58593          	addi	a1,a1,-241 # f0ef0f <.Lline_table_start0+0xed840d>
    8001df96:	05b2                	slli	a1,a1,0xc
    8001df98:	0f158593          	addi	a1,a1,241
    8001df9c:	05b2                	slli	a1,a1,0xc
    8001df9e:	f0f58593          	addi	a1,a1,-241
    8001dfa2:	8d6d                	and	a0,a0,a1
    8001dfa4:	010105b7          	lui	a1,0x1010
    8001dfa8:	1015859b          	addiw	a1,a1,257
    8001dfac:	05c2                	slli	a1,a1,0x10
    8001dfae:	10158593          	addi	a1,a1,257 # 1010101 <.Lline_table_start0+0xfd95ff>
    8001dfb2:	05c2                	slli	a1,a1,0x10
    8001dfb4:	10158593          	addi	a1,a1,257
    8001dfb8:	02b50533          	mul	a0,a0,a1
    8001dfbc:	9161                	srli	a0,a0,0x38
    8001dfbe:	e42a                	sd	a0,8(sp)
    8001dfc0:	ec2a                	sd	a0,24(sp)
    8001dfc2:	a009                	j	8001dfc4 <_ZN4core3num23_$LT$impl$u20$usize$GT$10count_ones17hc42f1db1f03657afE+0x8e>
        }
    8001dfc4:	6522                	ld	a0,8(sp)
    8001dfc6:	6105                	addi	sp,sp,32
    8001dfc8:	8082                	ret

Disassembly of section .text._ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17he2495d381876d258E:

000000008001dfca <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17he2495d381876d258E>:
        pub const fn checked_add(self, rhs: Self) -> Option<Self> {
    8001dfca:	715d                	addi	sp,sp,-80
    8001dfcc:	e486                	sd	ra,72(sp)
    8001dfce:	f42a                	sd	a0,40(sp)
    8001dfd0:	f82e                	sd	a1,48(sp)
            let (a, b) = self.overflowing_add(rhs);
    8001dfd2:	00000097          	auipc	ra,0x0
    8001dfd6:	184080e7          	jalr	388(ra) # 8001e156 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h5e362dda9fd64aadE>
    8001dfda:	e42a                	sd	a0,8(sp)
    8001dfdc:	e82e                	sd	a1,16(sp)
    8001dfde:	a009                	j	8001dfe0 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17he2495d381876d258E+0x16>
    8001dfe0:	6542                	ld	a0,16(sp)
    8001dfe2:	65a2                	ld	a1,8(sp)
    8001dfe4:	fc2e                	sd	a1,56(sp)
    8001dfe6:	8905                	andi	a0,a0,1
    8001dfe8:	e02a                	sd	a0,0(sp)
    8001dfea:	04a10323          	sb	a0,70(sp)
            if unlikely!(b) {None} else {Some(a)}
    8001dfee:	04a103a3          	sb	a0,71(sp)
    8001dff2:	a009                	j	8001dff4 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17he2495d381876d258E+0x2a>
    8001dff4:	6502                	ld	a0,0(sp)
    8001dff6:	4581                	li	a1,0
    8001dff8:	00b50663          	beq	a0,a1,8001e004 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17he2495d381876d258E+0x3a>
    8001dffc:	a009                	j	8001dffe <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17he2495d381876d258E+0x34>
    8001dffe:	4501                	li	a0,0
    8001e000:	ec2a                	sd	a0,24(sp)
    8001e002:	a031                	j	8001e00e <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17he2495d381876d258E+0x44>
    8001e004:	6522                	ld	a0,8(sp)
    8001e006:	f02a                	sd	a0,32(sp)
    8001e008:	4505                	li	a0,1
    8001e00a:	ec2a                	sd	a0,24(sp)
    8001e00c:	a009                	j	8001e00e <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17he2495d381876d258E+0x44>
        }
    8001e00e:	6562                	ld	a0,24(sp)
    8001e010:	7582                	ld	a1,32(sp)
    8001e012:	60a6                	ld	ra,72(sp)
    8001e014:	6161                	addi	sp,sp,80
    8001e016:	8082                	ret

Disassembly of section .text._ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17h38933f87a0e6dbeaE:

000000008001e018 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17h38933f87a0e6dbeaE>:
        pub const fn checked_mul(self, rhs: Self) -> Option<Self> {
    8001e018:	715d                	addi	sp,sp,-80
    8001e01a:	e486                	sd	ra,72(sp)
    8001e01c:	f42a                	sd	a0,40(sp)
    8001e01e:	f82e                	sd	a1,48(sp)
            let (a, b) = self.overflowing_mul(rhs);
    8001e020:	00000097          	auipc	ra,0x0
    8001e024:	162080e7          	jalr	354(ra) # 8001e182 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_mul17h8807e257a981f0caE>
    8001e028:	e42a                	sd	a0,8(sp)
    8001e02a:	e82e                	sd	a1,16(sp)
    8001e02c:	a009                	j	8001e02e <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17h38933f87a0e6dbeaE+0x16>
    8001e02e:	6542                	ld	a0,16(sp)
    8001e030:	65a2                	ld	a1,8(sp)
    8001e032:	fc2e                	sd	a1,56(sp)
    8001e034:	8905                	andi	a0,a0,1
    8001e036:	e02a                	sd	a0,0(sp)
    8001e038:	04a10323          	sb	a0,70(sp)
            if unlikely!(b) {None} else {Some(a)}
    8001e03c:	04a103a3          	sb	a0,71(sp)
    8001e040:	a009                	j	8001e042 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17h38933f87a0e6dbeaE+0x2a>
    8001e042:	6502                	ld	a0,0(sp)
    8001e044:	4581                	li	a1,0
    8001e046:	00b50663          	beq	a0,a1,8001e052 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17h38933f87a0e6dbeaE+0x3a>
    8001e04a:	a009                	j	8001e04c <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17h38933f87a0e6dbeaE+0x34>
    8001e04c:	4501                	li	a0,0
    8001e04e:	ec2a                	sd	a0,24(sp)
    8001e050:	a031                	j	8001e05c <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17h38933f87a0e6dbeaE+0x44>
    8001e052:	6522                	ld	a0,8(sp)
    8001e054:	f02a                	sd	a0,32(sp)
    8001e056:	4505                	li	a0,1
    8001e058:	ec2a                	sd	a0,24(sp)
    8001e05a:	a009                	j	8001e05c <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17h38933f87a0e6dbeaE+0x44>
        }
    8001e05c:	6562                	ld	a0,24(sp)
    8001e05e:	7582                	ld	a1,32(sp)
    8001e060:	60a6                	ld	ra,72(sp)
    8001e062:	6161                	addi	sp,sp,80
    8001e064:	8082                	ret

Disassembly of section .text._ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h4d6a04d1a942bf32E:

000000008001e066 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h4d6a04d1a942bf32E>:
        pub const fn checked_sub(self, rhs: Self) -> Option<Self> {
    8001e066:	715d                	addi	sp,sp,-80
    8001e068:	e486                	sd	ra,72(sp)
    8001e06a:	f42a                	sd	a0,40(sp)
    8001e06c:	f82e                	sd	a1,48(sp)
            let (a, b) = self.overflowing_sub(rhs);
    8001e06e:	00000097          	auipc	ra,0x0
    8001e072:	14a080e7          	jalr	330(ra) # 8001e1b8 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h1247a6e463c80816E>
    8001e076:	e42a                	sd	a0,8(sp)
    8001e078:	e82e                	sd	a1,16(sp)
    8001e07a:	a009                	j	8001e07c <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h4d6a04d1a942bf32E+0x16>
    8001e07c:	6542                	ld	a0,16(sp)
    8001e07e:	65a2                	ld	a1,8(sp)
    8001e080:	fc2e                	sd	a1,56(sp)
    8001e082:	8905                	andi	a0,a0,1
    8001e084:	e02a                	sd	a0,0(sp)
    8001e086:	04a10323          	sb	a0,70(sp)
            if unlikely!(b) {None} else {Some(a)}
    8001e08a:	04a103a3          	sb	a0,71(sp)
    8001e08e:	a009                	j	8001e090 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h4d6a04d1a942bf32E+0x2a>
    8001e090:	6502                	ld	a0,0(sp)
    8001e092:	4581                	li	a1,0
    8001e094:	00b50663          	beq	a0,a1,8001e0a0 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h4d6a04d1a942bf32E+0x3a>
    8001e098:	a009                	j	8001e09a <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h4d6a04d1a942bf32E+0x34>
    8001e09a:	4501                	li	a0,0
    8001e09c:	ec2a                	sd	a0,24(sp)
    8001e09e:	a031                	j	8001e0aa <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h4d6a04d1a942bf32E+0x44>
    8001e0a0:	6522                	ld	a0,8(sp)
    8001e0a2:	f02a                	sd	a0,32(sp)
    8001e0a4:	4505                	li	a0,1
    8001e0a6:	ec2a                	sd	a0,24(sp)
    8001e0a8:	a009                	j	8001e0aa <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h4d6a04d1a942bf32E+0x44>
        }
    8001e0aa:	6562                	ld	a0,24(sp)
    8001e0ac:	7582                	ld	a1,32(sp)
    8001e0ae:	60a6                	ld	ra,72(sp)
    8001e0b0:	6161                	addi	sp,sp,80
    8001e0b2:	8082                	ret

Disassembly of section .text._ZN4core3num23_$LT$impl$u20$usize$GT$12wrapping_add17he0ea74277f4c06b1E:

000000008001e0b4 <_ZN4core3num23_$LT$impl$u20$usize$GT$12wrapping_add17he0ea74277f4c06b1E>:
        pub const fn wrapping_add(self, rhs: Self) -> Self {
    8001e0b4:	1141                	addi	sp,sp,-16
    8001e0b6:	e02a                	sd	a0,0(sp)
    8001e0b8:	e42e                	sd	a1,8(sp)
            intrinsics::wrapping_add(self, rhs)
    8001e0ba:	952e                	add	a0,a0,a1
        }
    8001e0bc:	0141                	addi	sp,sp,16
    8001e0be:	8082                	ret

Disassembly of section .text._ZN4core3num23_$LT$impl$u20$usize$GT$12wrapping_sub17h8f077bf007d122c9E:

000000008001e0c0 <_ZN4core3num23_$LT$impl$u20$usize$GT$12wrapping_sub17h8f077bf007d122c9E>:
        pub const fn wrapping_sub(self, rhs: Self) -> Self {
    8001e0c0:	1141                	addi	sp,sp,-16
    8001e0c2:	e02a                	sd	a0,0(sp)
    8001e0c4:	e42e                	sd	a1,8(sp)
            intrinsics::wrapping_sub(self, rhs)
    8001e0c6:	8d0d                	sub	a0,a0,a1
        }
    8001e0c8:	0141                	addi	sp,sp,16
    8001e0ca:	8082                	ret

Disassembly of section .text._ZN4core3num23_$LT$impl$u20$usize$GT$13from_le_bytes17h3bceb23301b73de9E:

000000008001e0cc <_ZN4core3num23_$LT$impl$u20$usize$GT$13from_le_bytes17h3bceb23301b73de9E>:
        /// }
        /// ```
        #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
        #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
        #[inline]
        pub const fn from_le_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {
    8001e0cc:	7179                	addi	sp,sp,-48
    8001e0ce:	f406                	sd	ra,40(sp)
    8001e0d0:	ec2a                	sd	a0,24(sp)
    8001e0d2:	e82a                	sd	a0,16(sp)
            Self::from_le(Self::from_ne_bytes(bytes))
    8001e0d4:	f02a                	sd	a0,32(sp)
    8001e0d6:	00000097          	auipc	ra,0x0
    8001e0da:	022080e7          	jalr	34(ra) # 8001e0f8 <_ZN4core3num23_$LT$impl$u20$usize$GT$13from_ne_bytes17h8c178ff675f3bacaE>
    8001e0de:	e42a                	sd	a0,8(sp)
    8001e0e0:	a009                	j	8001e0e2 <_ZN4core3num23_$LT$impl$u20$usize$GT$13from_le_bytes17h3bceb23301b73de9E+0x16>
    8001e0e2:	6522                	ld	a0,8(sp)
    8001e0e4:	00000097          	auipc	ra,0x0
    8001e0e8:	102080e7          	jalr	258(ra) # 8001e1e6 <_ZN4core3num23_$LT$impl$u20$usize$GT$7from_le17h7016b8b5387c67e4E>
    8001e0ec:	e02a                	sd	a0,0(sp)
    8001e0ee:	a009                	j	8001e0f0 <_ZN4core3num23_$LT$impl$u20$usize$GT$13from_le_bytes17h3bceb23301b73de9E+0x24>
        }
    8001e0f0:	6502                	ld	a0,0(sp)
    8001e0f2:	70a2                	ld	ra,40(sp)
    8001e0f4:	6145                	addi	sp,sp,48
    8001e0f6:	8082                	ret

Disassembly of section .text._ZN4core3num23_$LT$impl$u20$usize$GT$13from_ne_bytes17h8c178ff675f3bacaE:

000000008001e0f8 <_ZN4core3num23_$LT$impl$u20$usize$GT$13from_ne_bytes17h8c178ff675f3bacaE>:
        #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
        // SAFETY: const sound because integers are plain old datatypes so we can always
        // transmute to them
        #[rustc_allow_const_fn_unstable(const_fn_transmute)]
        #[inline]
        pub const fn from_ne_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {
    8001e0f8:	7179                	addi	sp,sp,-48
    8001e0fa:	ec2a                	sd	a0,24(sp)
    8001e0fc:	e82a                	sd	a0,16(sp)
            // SAFETY: integers are plain old datatypes so we can always transmute to them
            unsafe { mem::transmute(bytes) }
    8001e0fe:	f02a                	sd	a0,32(sp)
    8001e100:	f42a                	sd	a0,40(sp)
    8001e102:	e42a                	sd	a0,8(sp)
    8001e104:	a009                	j	8001e106 <_ZN4core3num23_$LT$impl$u20$usize$GT$13from_ne_bytes17h8c178ff675f3bacaE+0xe>
        }
    8001e106:	6522                	ld	a0,8(sp)
    8001e108:	6145                	addi	sp,sp,48
    8001e10a:	8082                	ret

Disassembly of section .text._ZN4core3num23_$LT$impl$u20$usize$GT$13unchecked_add17hd96bc3f11f940f51E:

000000008001e10c <_ZN4core3num23_$LT$impl$u20$usize$GT$13unchecked_add17hd96bc3f11f940f51E>:
        pub unsafe fn unchecked_add(self, rhs: Self) -> Self {
    8001e10c:	1101                	addi	sp,sp,-32
    8001e10e:	e42a                	sd	a0,8(sp)
    8001e110:	e82e                	sd	a1,16(sp)
            unsafe { intrinsics::unchecked_add(self, rhs) }
    8001e112:	952e                	add	a0,a0,a1
    8001e114:	e02a                	sd	a0,0(sp)
    8001e116:	ec2a                	sd	a0,24(sp)
    8001e118:	a009                	j	8001e11a <_ZN4core3num23_$LT$impl$u20$usize$GT$13unchecked_add17hd96bc3f11f940f51E+0xe>
        }
    8001e11a:	6502                	ld	a0,0(sp)
    8001e11c:	6105                	addi	sp,sp,32
    8001e11e:	8082                	ret

Disassembly of section .text._ZN4core3num23_$LT$impl$u20$usize$GT$13unchecked_sub17hed0c10f690d6ddf4E:

000000008001e120 <_ZN4core3num23_$LT$impl$u20$usize$GT$13unchecked_sub17hed0c10f690d6ddf4E>:
        pub unsafe fn unchecked_sub(self, rhs: Self) -> Self {
    8001e120:	1101                	addi	sp,sp,-32
    8001e122:	e42a                	sd	a0,8(sp)
    8001e124:	e82e                	sd	a1,16(sp)
            unsafe { intrinsics::unchecked_sub(self, rhs) }
    8001e126:	8d0d                	sub	a0,a0,a1
    8001e128:	e02a                	sd	a0,0(sp)
    8001e12a:	ec2a                	sd	a0,24(sp)
    8001e12c:	a009                	j	8001e12e <_ZN4core3num23_$LT$impl$u20$usize$GT$13unchecked_sub17hed0c10f690d6ddf4E+0xe>
        }
    8001e12e:	6502                	ld	a0,0(sp)
    8001e130:	6105                	addi	sp,sp,32
    8001e132:	8082                	ret

Disassembly of section .text._ZN4core3num23_$LT$impl$u20$usize$GT$15is_power_of_two17h1415e23f4938ba42E:

000000008001e134 <_ZN4core3num23_$LT$impl$u20$usize$GT$15is_power_of_two17h1415e23f4938ba42E>:
        pub const fn is_power_of_two(self) -> bool {
    8001e134:	1101                	addi	sp,sp,-32
    8001e136:	ec06                	sd	ra,24(sp)
    8001e138:	e82a                	sd	a0,16(sp)
            self.count_ones() == 1
    8001e13a:	00000097          	auipc	ra,0x0
    8001e13e:	dfc080e7          	jalr	-516(ra) # 8001df36 <_ZN4core3num23_$LT$impl$u20$usize$GT$10count_ones17hc42f1db1f03657afE>
    8001e142:	e42a                	sd	a0,8(sp)
    8001e144:	a009                	j	8001e146 <_ZN4core3num23_$LT$impl$u20$usize$GT$15is_power_of_two17h1415e23f4938ba42E+0x12>
    8001e146:	6522                	ld	a0,8(sp)
    8001e148:	2501                	sext.w	a0,a0
    8001e14a:	157d                	addi	a0,a0,-1
    8001e14c:	00153513          	seqz	a0,a0
        }
    8001e150:	60e2                	ld	ra,24(sp)
    8001e152:	6105                	addi	sp,sp,32
    8001e154:	8082                	ret

Disassembly of section .text._ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h5e362dda9fd64aadE:

000000008001e156 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h5e362dda9fd64aadE>:
        pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {
    8001e156:	715d                	addi	sp,sp,-80
    8001e158:	f02a                	sd	a0,32(sp)
    8001e15a:	f42e                	sd	a1,40(sp)
            let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
    8001e15c:	95aa                	add	a1,a1,a0
    8001e15e:	e02e                	sd	a1,0(sp)
    8001e160:	00a5b533          	sltu	a0,a1,a0
    8001e164:	e42a                	sd	a0,8(sp)
    8001e166:	f82e                	sd	a1,48(sp)
    8001e168:	02a10c23          	sb	a0,56(sp)
    8001e16c:	a009                	j	8001e16e <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h5e362dda9fd64aadE+0x18>
    8001e16e:	65a2                	ld	a1,8(sp)
    8001e170:	6502                	ld	a0,0(sp)
    8001e172:	e0aa                	sd	a0,64(sp)
    8001e174:	04b107a3          	sb	a1,79(sp)
            (a as Self, b)
    8001e178:	e82a                	sd	a0,16(sp)
    8001e17a:	00b10c23          	sb	a1,24(sp)
        }
    8001e17e:	6161                	addi	sp,sp,80
    8001e180:	8082                	ret

Disassembly of section .text._ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_mul17h8807e257a981f0caE:

000000008001e182 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_mul17h8807e257a981f0caE>:
        pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {
    8001e182:	715d                	addi	sp,sp,-80
    8001e184:	862e                	mv	a2,a1
    8001e186:	85aa                	mv	a1,a0
    8001e188:	f02e                	sd	a1,32(sp)
    8001e18a:	f432                	sd	a2,40(sp)
            let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
    8001e18c:	02c5b533          	mulhu	a0,a1,a2
    8001e190:	00a03533          	snez	a0,a0
    8001e194:	e02a                	sd	a0,0(sp)
    8001e196:	02c585b3          	mul	a1,a1,a2
    8001e19a:	e42e                	sd	a1,8(sp)
    8001e19c:	f82e                	sd	a1,48(sp)
    8001e19e:	02a10c23          	sb	a0,56(sp)
    8001e1a2:	a009                	j	8001e1a4 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_mul17h8807e257a981f0caE+0x22>
    8001e1a4:	6582                	ld	a1,0(sp)
    8001e1a6:	6522                	ld	a0,8(sp)
    8001e1a8:	e0aa                	sd	a0,64(sp)
    8001e1aa:	04b107a3          	sb	a1,79(sp)
            (a as Self, b)
    8001e1ae:	e82a                	sd	a0,16(sp)
    8001e1b0:	00b10c23          	sb	a1,24(sp)
        }
    8001e1b4:	6161                	addi	sp,sp,80
    8001e1b6:	8082                	ret

Disassembly of section .text._ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h1247a6e463c80816E:

000000008001e1b8 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h1247a6e463c80816E>:
        pub const fn overflowing_sub(self, rhs: Self) -> (Self, bool) {
    8001e1b8:	715d                	addi	sp,sp,-80
    8001e1ba:	f02a                	sd	a0,32(sp)
    8001e1bc:	f42e                	sd	a1,40(sp)
            let (a, b) = intrinsics::sub_with_overflow(self as $ActualT, rhs as $ActualT);
    8001e1be:	40b505b3          	sub	a1,a0,a1
    8001e1c2:	e02e                	sd	a1,0(sp)
    8001e1c4:	00b53533          	sltu	a0,a0,a1
    8001e1c8:	e42a                	sd	a0,8(sp)
    8001e1ca:	f82e                	sd	a1,48(sp)
    8001e1cc:	02a10c23          	sb	a0,56(sp)
    8001e1d0:	a009                	j	8001e1d2 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h1247a6e463c80816E+0x1a>
    8001e1d2:	65a2                	ld	a1,8(sp)
    8001e1d4:	6502                	ld	a0,0(sp)
    8001e1d6:	e0aa                	sd	a0,64(sp)
    8001e1d8:	04b107a3          	sb	a1,79(sp)
            (a as Self, b)
    8001e1dc:	e82a                	sd	a0,16(sp)
    8001e1de:	00b10c23          	sb	a1,24(sp)
        }
    8001e1e2:	6161                	addi	sp,sp,80
    8001e1e4:	8082                	ret

Disassembly of section .text._ZN4core3num23_$LT$impl$u20$usize$GT$7from_le17h7016b8b5387c67e4E:

000000008001e1e6 <_ZN4core3num23_$LT$impl$u20$usize$GT$7from_le17h7016b8b5387c67e4E>:
        pub const fn from_le(x: Self) -> Self {
    8001e1e6:	1141                	addi	sp,sp,-16
    8001e1e8:	e42a                	sd	a0,8(sp)
        }
    8001e1ea:	0141                	addi	sp,sp,16
    8001e1ec:	8082                	ret

Disassembly of section .text._ZN47_$LT$u16$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17h3535906832610659E:

000000008001e1ee <_ZN47_$LT$u16$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17h3535906832610659E>:
        unsafe fn forward_unchecked(start: Self, n: usize) -> Self {
    8001e1ee:	1101                	addi	sp,sp,-32
    8001e1f0:	ec06                	sd	ra,24(sp)
    8001e1f2:	00a11723          	sh	a0,14(sp)
    8001e1f6:	e82e                	sd	a1,16(sp)
            unsafe { start.unchecked_add(n as Self) }
    8001e1f8:	00000097          	auipc	ra,0x0
    8001e1fc:	c72080e7          	jalr	-910(ra) # 8001de6a <_ZN4core3num21_$LT$impl$u20$u16$GT$13unchecked_add17hfa49a7085d490705E>
    8001e200:	e02a                	sd	a0,0(sp)
    8001e202:	a009                	j	8001e204 <_ZN47_$LT$u16$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17h3535906832610659E+0x16>
        }
    8001e204:	6502                	ld	a0,0(sp)
    8001e206:	60e2                	ld	ra,24(sp)
    8001e208:	6105                	addi	sp,sp,32
    8001e20a:	8082                	ret

Disassembly of section .text._ZN47_$LT$u32$u20$as$u20$core..iter..range..Step$GT$15forward_checked17h56207e7d47bfb4e6E:

000000008001e20c <_ZN47_$LT$u32$u20$as$u20$core..iter..range..Step$GT$15forward_checked17h56207e7d47bfb4e6E>:
                fn forward_checked(start: Self, n: usize) -> Option<Self> {
    8001e20c:	7139                	addi	sp,sp,-64
    8001e20e:	fc06                	sd	ra,56(sp)
    8001e210:	e02e                	sd	a1,0(sp)
    8001e212:	85aa                	mv	a1,a0
    8001e214:	6502                	ld	a0,0(sp)
    8001e216:	862e                	mv	a2,a1
    8001e218:	e432                	sd	a2,8(sp)
    8001e21a:	d22e                	sw	a1,36(sp)
    8001e21c:	f42a                	sd	a0,40(sp)
                    match Self::try_from(n) {
    8001e21e:	00000097          	auipc	ra,0x0
    8001e222:	1e6080e7          	jalr	486(ra) # 8001e404 <_ZN4core7convert3num18ptr_try_from_impls69_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u32$GT$8try_from17hf11680289e05cb5fE>
    8001e226:	cc2a                	sw	a0,24(sp)
    8001e228:	ce2e                	sw	a1,28(sp)
    8001e22a:	a009                	j	8001e22c <_ZN47_$LT$u32$u20$as$u20$core..iter..range..Step$GT$15forward_checked17h56207e7d47bfb4e6E+0x20>
                        Ok(n) => start.checked_add(n),
    8001e22c:	01816503          	lwu	a0,24(sp)
    8001e230:	4581                	li	a1,0
    8001e232:	00b50763          	beq	a0,a1,8001e240 <_ZN47_$LT$u32$u20$as$u20$core..iter..range..Step$GT$15forward_checked17h56207e7d47bfb4e6E+0x34>
    8001e236:	a009                	j	8001e238 <_ZN47_$LT$u32$u20$as$u20$core..iter..range..Step$GT$15forward_checked17h56207e7d47bfb4e6E+0x2c>
    8001e238:	4501                	li	a0,0
                        Err(_) => None, // if n is out of range, `unsigned_start + n` is too
    8001e23a:	c82a                	sw	a0,16(sp)
                    match Self::try_from(n) {
    8001e23c:	a829                	j	8001e256 <_ZN47_$LT$u32$u20$as$u20$core..iter..range..Step$GT$15forward_checked17h56207e7d47bfb4e6E+0x4a>
    8001e23e:	0000                	unimp
                        Ok(n) => start.checked_add(n),
    8001e240:	6522                	ld	a0,8(sp)
    8001e242:	45f2                	lw	a1,28(sp)
    8001e244:	da2e                	sw	a1,52(sp)
    8001e246:	00000097          	auipc	ra,0x0
    8001e24a:	c44080e7          	jalr	-956(ra) # 8001de8a <_ZN4core3num21_$LT$impl$u20$u32$GT$11checked_add17h28c8b802ca50f266E>
    8001e24e:	c82a                	sw	a0,16(sp)
    8001e250:	ca2e                	sw	a1,20(sp)
    8001e252:	a009                	j	8001e254 <_ZN47_$LT$u32$u20$as$u20$core..iter..range..Step$GT$15forward_checked17h56207e7d47bfb4e6E+0x48>
                    match Self::try_from(n) {
    8001e254:	a009                	j	8001e256 <_ZN47_$LT$u32$u20$as$u20$core..iter..range..Step$GT$15forward_checked17h56207e7d47bfb4e6E+0x4a>
                }
    8001e256:	4542                	lw	a0,16(sp)
    8001e258:	45d2                	lw	a1,20(sp)
    8001e25a:	70e2                	ld	ra,56(sp)
    8001e25c:	6121                	addi	sp,sp,64
    8001e25e:	8082                	ret

Disassembly of section .text._ZN47_$LT$u32$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17hd82fe8ce42e2d29dE:

000000008001e260 <_ZN47_$LT$u32$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17hd82fe8ce42e2d29dE>:
        unsafe fn forward_unchecked(start: Self, n: usize) -> Self {
    8001e260:	1101                	addi	sp,sp,-32
    8001e262:	ec06                	sd	ra,24(sp)
    8001e264:	c62a                	sw	a0,12(sp)
    8001e266:	e82e                	sd	a1,16(sp)
            unsafe { start.unchecked_add(n as Self) }
    8001e268:	00000097          	auipc	ra,0x0
    8001e26c:	c70080e7          	jalr	-912(ra) # 8001ded8 <_ZN4core3num21_$LT$impl$u20$u32$GT$13unchecked_add17hceb6a8c852a4dc08E>
    8001e270:	e02a                	sd	a0,0(sp)
    8001e272:	a009                	j	8001e274 <_ZN47_$LT$u32$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17hd82fe8ce42e2d29dE+0x14>
        }
    8001e274:	6502                	ld	a0,0(sp)
    8001e276:	60e2                	ld	ra,24(sp)
    8001e278:	6105                	addi	sp,sp,32
    8001e27a:	8082                	ret

Disassembly of section .text._ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$15forward_checked17h89a22c0b5326f750E:

000000008001e27c <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$15forward_checked17h89a22c0b5326f750E>:
                fn forward_checked(start: Self, n: usize) -> Option<Self> {
    8001e27c:	715d                	addi	sp,sp,-80
    8001e27e:	e486                	sd	ra,72(sp)
    8001e280:	ec2e                	sd	a1,24(sp)
    8001e282:	85aa                	mv	a1,a0
    8001e284:	6562                	ld	a0,24(sp)
    8001e286:	f02e                	sd	a1,32(sp)
    8001e288:	f82e                	sd	a1,48(sp)
    8001e28a:	fc2a                	sd	a0,56(sp)
                    match Self::try_from(n) {
    8001e28c:	fffee097          	auipc	ra,0xfffee
    8001e290:	80c080e7          	jalr	-2036(ra) # 8000ba98 <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17heab1f3c6250d8edbE>
    8001e294:	f42a                	sd	a0,40(sp)
    8001e296:	a009                	j	8001e298 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$15forward_checked17h89a22c0b5326f750E+0x1c>
                        Ok(n) => start.checked_add(n),
    8001e298:	7502                	ld	a0,32(sp)
    8001e29a:	75a2                	ld	a1,40(sp)
    8001e29c:	e0ae                	sd	a1,64(sp)
    8001e29e:	00000097          	auipc	ra,0x0
    8001e2a2:	d2c080e7          	jalr	-724(ra) # 8001dfca <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17he2495d381876d258E>
    8001e2a6:	e42a                	sd	a0,8(sp)
    8001e2a8:	e82e                	sd	a1,16(sp)
    8001e2aa:	a009                	j	8001e2ac <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$15forward_checked17h89a22c0b5326f750E+0x30>
                }
    8001e2ac:	65c2                	ld	a1,16(sp)
    8001e2ae:	6522                	ld	a0,8(sp)
    8001e2b0:	60a6                	ld	ra,72(sp)
    8001e2b2:	6161                	addi	sp,sp,80
    8001e2b4:	8082                	ret

Disassembly of section .text._ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17h4b00136ef7a8c813E:

000000008001e2b6 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17h4b00136ef7a8c813E>:
        unsafe fn forward_unchecked(start: Self, n: usize) -> Self {
    8001e2b6:	1101                	addi	sp,sp,-32
    8001e2b8:	ec06                	sd	ra,24(sp)
    8001e2ba:	e42a                	sd	a0,8(sp)
    8001e2bc:	e82e                	sd	a1,16(sp)
            unsafe { start.unchecked_add(n as Self) }
    8001e2be:	00000097          	auipc	ra,0x0
    8001e2c2:	e4e080e7          	jalr	-434(ra) # 8001e10c <_ZN4core3num23_$LT$impl$u20$usize$GT$13unchecked_add17hd96bc3f11f940f51E>
    8001e2c6:	e02a                	sd	a0,0(sp)
    8001e2c8:	a009                	j	8001e2ca <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17h4b00136ef7a8c813E+0x14>
        }
    8001e2ca:	6502                	ld	a0,0(sp)
    8001e2cc:	60e2                	ld	ra,24(sp)
    8001e2ce:	6105                	addi	sp,sp,32
    8001e2d0:	8082                	ret

Disassembly of section .text._ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$18backward_unchecked17h149195b805b2849bE:

000000008001e2d2 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$18backward_unchecked17h149195b805b2849bE>:
        unsafe fn backward_unchecked(start: Self, n: usize) -> Self {
    8001e2d2:	1101                	addi	sp,sp,-32
    8001e2d4:	ec06                	sd	ra,24(sp)
    8001e2d6:	e42a                	sd	a0,8(sp)
    8001e2d8:	e82e                	sd	a1,16(sp)
            unsafe { start.unchecked_sub(n as Self) }
    8001e2da:	00000097          	auipc	ra,0x0
    8001e2de:	e46080e7          	jalr	-442(ra) # 8001e120 <_ZN4core3num23_$LT$impl$u20$usize$GT$13unchecked_sub17hed0c10f690d6ddf4E>
    8001e2e2:	e02a                	sd	a0,0(sp)
    8001e2e4:	a009                	j	8001e2e6 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$18backward_unchecked17h149195b805b2849bE+0x14>
        }
    8001e2e6:	6502                	ld	a0,0(sp)
    8001e2e8:	60e2                	ld	ra,24(sp)
    8001e2ea:	6105                	addi	sp,sp,32
    8001e2ec:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register7sstatus4read17h1df585a8263fd2acE:

000000008001e2ee <_ZN6kernel4arch5riscv8register7sstatus4read17h1df585a8263fd2acE>:
    /// User Interrupt Enable
    UIE = 1 << 0
}

#[inline]
pub unsafe fn read() -> usize {
    8001e2ee:	1141                	addi	sp,sp,-16
    let sstatus: usize;
    llvm_asm!("csrr $0, sstatus":"=r"(sstatus):::"volatile");
    8001e2f0:	10002573          	csrr	a0,sstatus
    8001e2f4:	e42a                	sd	a0,8(sp)
    sstatus
}
    8001e2f6:	0141                	addi	sp,sp,16
    8001e2f8:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register7sstatus5write17h2e3a8152fe4defdaE:

000000008001e2fa <_ZN6kernel4arch5riscv8register7sstatus5write17h2e3a8152fe4defdaE>:

#[inline]
pub unsafe fn write(sstatus: usize) {
    8001e2fa:	1141                	addi	sp,sp,-16
    8001e2fc:	e42a                	sd	a0,8(sp)
    llvm_asm!("csrw sstatus, $0"::"r"(sstatus)::"volatile");
    8001e2fe:	10051073          	csrw	sstatus,a0
}
    8001e302:	0141                	addi	sp,sp,16
    8001e304:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register7sstatus18is_from_supervisor17h09ba8119c534748eE:

000000008001e306 <_ZN6kernel4arch5riscv8register7sstatus18is_from_supervisor17h09ba8119c534748eE>:

#[inline]
pub unsafe fn is_from_supervisor() -> bool {
    8001e306:	1141                	addi	sp,sp,-16
    (read() & SSTATUS::SPP as usize) != 0
    8001e308:	e406                	sd	ra,8(sp)
    8001e30a:	00000097          	auipc	ra,0x0
    8001e30e:	fe4080e7          	jalr	-28(ra) # 8001e2ee <_ZN6kernel4arch5riscv8register7sstatus4read17h1df585a8263fd2acE>
    8001e312:	e02a                	sd	a0,0(sp)
    8001e314:	a009                	j	8001e316 <_ZN6kernel4arch5riscv8register7sstatus18is_from_supervisor17h09ba8119c534748eE+0x10>
    8001e316:	6502                	ld	a0,0(sp)
    8001e318:	10057513          	andi	a0,a0,256
    8001e31c:	8121                	srli	a0,a0,0x8
}
    8001e31e:	60a2                	ld	ra,8(sp)
    8001e320:	0141                	addi	sp,sp,16
    8001e322:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register7sstatus12is_from_user17hfa7a30a57661c561E:

000000008001e324 <_ZN6kernel4arch5riscv8register7sstatus12is_from_user17hfa7a30a57661c561E>:

#[inline]
pub unsafe fn is_from_user() -> bool {
    8001e324:	1141                	addi	sp,sp,-16
    (read() & SSTATUS::SPP as usize) == 0
    8001e326:	e406                	sd	ra,8(sp)
    8001e328:	00000097          	auipc	ra,0x0
    8001e32c:	fc6080e7          	jalr	-58(ra) # 8001e2ee <_ZN6kernel4arch5riscv8register7sstatus4read17h1df585a8263fd2acE>
    8001e330:	e02a                	sd	a0,0(sp)
    8001e332:	a009                	j	8001e334 <_ZN6kernel4arch5riscv8register7sstatus12is_from_user17hfa7a30a57661c561E+0x10>
    8001e334:	6502                	ld	a0,0(sp)
    8001e336:	10057513          	andi	a0,a0,256
    8001e33a:	00153513          	seqz	a0,a0
}
    8001e33e:	60a2                	ld	ra,8(sp)
    8001e340:	0141                	addi	sp,sp,16
    8001e342:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register7sstatus7intr_on17h10d927cfe74faba7E:

000000008001e344 <_ZN6kernel4arch5riscv8register7sstatus7intr_on17h10d927cfe74faba7E>:

/// enable device interrupts
#[inline]
pub unsafe fn intr_on() {
    8001e344:	1141                	addi	sp,sp,-16
    write(read() | SSTATUS::SIE as usize);
    8001e346:	e406                	sd	ra,8(sp)
    8001e348:	00000097          	auipc	ra,0x0
    8001e34c:	fa6080e7          	jalr	-90(ra) # 8001e2ee <_ZN6kernel4arch5riscv8register7sstatus4read17h1df585a8263fd2acE>
    8001e350:	e02a                	sd	a0,0(sp)
    8001e352:	a009                	j	8001e354 <_ZN6kernel4arch5riscv8register7sstatus7intr_on17h10d927cfe74faba7E+0x10>
    8001e354:	6502                	ld	a0,0(sp)
    8001e356:	00256513          	ori	a0,a0,2
    8001e35a:	00000097          	auipc	ra,0x0
    8001e35e:	fa0080e7          	jalr	-96(ra) # 8001e2fa <_ZN6kernel4arch5riscv8register7sstatus5write17h2e3a8152fe4defdaE>
    8001e362:	a009                	j	8001e364 <_ZN6kernel4arch5riscv8register7sstatus7intr_on17h10d927cfe74faba7E+0x20>
}
    8001e364:	60a2                	ld	ra,8(sp)
    8001e366:	0141                	addi	sp,sp,16
    8001e368:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register7sstatus8intr_off17hed3f5b43b53e6556E:

000000008001e36a <_ZN6kernel4arch5riscv8register7sstatus8intr_off17hed3f5b43b53e6556E>:

/// disable device interrupts
#[inline]
pub unsafe fn intr_off() {
    8001e36a:	1141                	addi	sp,sp,-16
    write(read() & !(SSTATUS::SIE as usize));
    8001e36c:	e406                	sd	ra,8(sp)
    8001e36e:	00000097          	auipc	ra,0x0
    8001e372:	f80080e7          	jalr	-128(ra) # 8001e2ee <_ZN6kernel4arch5riscv8register7sstatus4read17h1df585a8263fd2acE>
    8001e376:	e02a                	sd	a0,0(sp)
    8001e378:	a009                	j	8001e37a <_ZN6kernel4arch5riscv8register7sstatus8intr_off17hed3f5b43b53e6556E+0x10>
    8001e37a:	6502                	ld	a0,0(sp)
    8001e37c:	9975                	andi	a0,a0,-3
    8001e37e:	00000097          	auipc	ra,0x0
    8001e382:	f7c080e7          	jalr	-132(ra) # 8001e2fa <_ZN6kernel4arch5riscv8register7sstatus5write17h2e3a8152fe4defdaE>
    8001e386:	a009                	j	8001e388 <_ZN6kernel4arch5riscv8register7sstatus8intr_off17hed3f5b43b53e6556E+0x1e>
}
    8001e388:	60a2                	ld	ra,8(sp)
    8001e38a:	0141                	addi	sp,sp,16
    8001e38c:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register7sstatus8intr_get17h3e12e0f19cb31fd5E:

000000008001e38e <_ZN6kernel4arch5riscv8register7sstatus8intr_get17h3e12e0f19cb31fd5E>:


/// are device interrupts enabled?
#[inline]
pub unsafe fn intr_get() -> bool {
    8001e38e:	1101                	addi	sp,sp,-32
    let x = read();
    8001e390:	ec06                	sd	ra,24(sp)
    8001e392:	00000097          	auipc	ra,0x0
    8001e396:	f5c080e7          	jalr	-164(ra) # 8001e2ee <_ZN6kernel4arch5riscv8register7sstatus4read17h1df585a8263fd2acE>
    8001e39a:	85aa                	mv	a1,a0
    8001e39c:	e42e                	sd	a1,8(sp)
    8001e39e:	e82a                	sd	a0,16(sp)
    8001e3a0:	a009                	j	8001e3a2 <_ZN6kernel4arch5riscv8register7sstatus8intr_get17h3e12e0f19cb31fd5E+0x14>
    return (x & SSTATUS::SIE as usize) != 0;
    8001e3a2:	6522                	ld	a0,8(sp)
    8001e3a4:	8909                	andi	a0,a0,2
    8001e3a6:	8105                	srli	a0,a0,0x1
}
    8001e3a8:	60e2                	ld	ra,24(sp)
    8001e3aa:	6105                	addi	sp,sp,32
    8001e3ac:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register7sstatus9clear_spp17h6421d1a1ec9c8eccE:

000000008001e3ae <_ZN6kernel4arch5riscv8register7sstatus9clear_spp17h6421d1a1ec9c8eccE>:

/// clear SPP to 0
#[inline]
pub fn clear_spp(sstatus: usize) -> usize {
    8001e3ae:	1141                	addi	sp,sp,-16
    8001e3b0:	e42a                	sd	a0,8(sp)
    sstatus & !(SSTATUS::SPP as usize)
    8001e3b2:	eff57513          	andi	a0,a0,-257
}
    8001e3b6:	0141                	addi	sp,sp,16
    8001e3b8:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register7sstatus12user_intr_on17h1304f970b07c3896E:

000000008001e3ba <_ZN6kernel4arch5riscv8register7sstatus12user_intr_on17h1304f970b07c3896E>:

/// enable interrupts in user mode
#[inline]
pub fn user_intr_on(sstatus: usize) -> usize {
    8001e3ba:	1141                	addi	sp,sp,-16
    8001e3bc:	e42a                	sd	a0,8(sp)
    sstatus | (SSTATUS::SPIE as usize)
    8001e3be:	02056513          	ori	a0,a0,32
}
    8001e3c2:	0141                	addi	sp,sp,16
    8001e3c4:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register8mscratch5write17h9d6c8373498c8305E:

000000008001e3c6 <_ZN6kernel4arch5riscv8register8mscratch5write17h9d6c8373498c8305E>:
#[inline]
pub unsafe fn write(x:usize){
    8001e3c6:	1141                	addi	sp,sp,-16
    8001e3c8:	e42a                	sd	a0,8(sp)
    llvm_asm!("csrw mscratch, $0"::"r"(x)::"volatile");
    8001e3ca:	34051073          	csrw	mscratch,a0
    8001e3ce:	0141                	addi	sp,sp,16
    8001e3d0:	8082                	ret

Disassembly of section .text._ZN4core7convert3num18ptr_try_from_impls69_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u16$GT$8try_from17h9165284bf6d163adE:

000000008001e3d2 <_ZN4core7convert3num18ptr_try_from_impls69_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u16$GT$8try_from17h9165284bf6d163adE>:

            /// Try to create the target number type from a source
            /// number type. This returns an error if the source value
            /// is outside of the range of the target type.
            #[inline]
            fn try_from(u: $source) -> Result<Self, Self::Error> {
    8001e3d2:	1101                	addi	sp,sp,-32
    8001e3d4:	e42a                	sd	a0,8(sp)
    8001e3d6:	ec2a                	sd	a0,24(sp)
                if u > (Self::MAX as $source) {
    8001e3d8:	8141                	srli	a0,a0,0x10
    8001e3da:	4581                	li	a1,0
    8001e3dc:	00b50763          	beq	a0,a1,8001e3ea <_ZN4core7convert3num18ptr_try_from_impls69_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u16$GT$8try_from17h9165284bf6d163adE+0x18>
    8001e3e0:	a009                	j	8001e3e2 <_ZN4core7convert3num18ptr_try_from_impls69_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u16$GT$8try_from17h9165284bf6d163adE+0x10>
    8001e3e2:	4505                	li	a0,1
                    Err(TryFromIntError(()))
    8001e3e4:	00a11823          	sh	a0,16(sp)
                if u > (Self::MAX as $source) {
    8001e3e8:	a801                	j	8001e3f8 <_ZN4core7convert3num18ptr_try_from_impls69_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u16$GT$8try_from17h9165284bf6d163adE+0x26>
                } else {
                    Ok(u as Self)
    8001e3ea:	6522                	ld	a0,8(sp)
    8001e3ec:	00a11923          	sh	a0,18(sp)
    8001e3f0:	4501                	li	a0,0
    8001e3f2:	00a11823          	sh	a0,16(sp)
                if u > (Self::MAX as $source) {
    8001e3f6:	a009                	j	8001e3f8 <_ZN4core7convert3num18ptr_try_from_impls69_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u16$GT$8try_from17h9165284bf6d163adE+0x26>
                }
            }
    8001e3f8:	01011503          	lh	a0,16(sp)
    8001e3fc:	01211583          	lh	a1,18(sp)
    8001e400:	6105                	addi	sp,sp,32
    8001e402:	8082                	ret

Disassembly of section .text._ZN4core7convert3num18ptr_try_from_impls69_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u32$GT$8try_from17hf11680289e05cb5fE:

000000008001e404 <_ZN4core7convert3num18ptr_try_from_impls69_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u32$GT$8try_from17hf11680289e05cb5fE>:
            fn try_from(u: $source) -> Result<Self, Self::Error> {
    8001e404:	1101                	addi	sp,sp,-32
    8001e406:	e42a                	sd	a0,8(sp)
    8001e408:	ec2a                	sd	a0,24(sp)
                if u > (Self::MAX as $source) {
    8001e40a:	9101                	srli	a0,a0,0x20
    8001e40c:	4581                	li	a1,0
    8001e40e:	00b50663          	beq	a0,a1,8001e41a <_ZN4core7convert3num18ptr_try_from_impls69_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u32$GT$8try_from17hf11680289e05cb5fE+0x16>
    8001e412:	a009                	j	8001e414 <_ZN4core7convert3num18ptr_try_from_impls69_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u32$GT$8try_from17hf11680289e05cb5fE+0x10>
    8001e414:	4505                	li	a0,1
                    Err(TryFromIntError(()))
    8001e416:	c82a                	sw	a0,16(sp)
                if u > (Self::MAX as $source) {
    8001e418:	a031                	j	8001e424 <_ZN4core7convert3num18ptr_try_from_impls69_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u32$GT$8try_from17hf11680289e05cb5fE+0x20>
                    Ok(u as Self)
    8001e41a:	6522                	ld	a0,8(sp)
    8001e41c:	ca2a                	sw	a0,20(sp)
    8001e41e:	4501                	li	a0,0
    8001e420:	c82a                	sw	a0,16(sp)
                if u > (Self::MAX as $source) {
    8001e422:	a009                	j	8001e424 <_ZN4core7convert3num18ptr_try_from_impls69_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u32$GT$8try_from17hf11680289e05cb5fE+0x20>
            }
    8001e424:	4542                	lw	a0,16(sp)
    8001e426:	45d2                	lw	a1,20(sp)
    8001e428:	6105                	addi	sp,sp,32
    8001e42a:	8082                	ret

Disassembly of section .text._ZN5alloc6string6String3new17h806e7bcacb841554E:

000000008001e42c <_ZN5alloc6string6String3new17h806e7bcacb841554E>:
    /// let s = String::new();
    /// ```
    #[inline]
    #[rustc_const_stable(feature = "const_string_new", since = "1.39.0")]
    #[stable(feature = "rust1", since = "1.0.0")]
    pub const fn new() -> String {
    8001e42c:	7179                	addi	sp,sp,-48
        String { vec: Vec::new() }
    8001e42e:	f406                	sd	ra,40(sp)
    8001e430:	e42a                	sd	a0,8(sp)
    8001e432:	0808                	addi	a0,sp,16
    8001e434:	ffff8097          	auipc	ra,0xffff8
    8001e438:	6c8080e7          	jalr	1736(ra) # 80016afc <_ZN5alloc3vec12Vec$LT$T$GT$3new17hfad72d6537ee9e7bE>
    8001e43c:	a009                	j	8001e43e <_ZN5alloc6string6String3new17h806e7bcacb841554E+0x12>
    8001e43e:	65a2                	ld	a1,8(sp)
    8001e440:	7502                	ld	a0,32(sp)
    8001e442:	e988                	sd	a0,16(a1)
    8001e444:	6562                	ld	a0,24(sp)
    8001e446:	e588                	sd	a0,8(a1)
    8001e448:	6542                	ld	a0,16(sp)
    8001e44a:	e188                	sd	a0,0(a1)
    }
    8001e44c:	70a2                	ld	ra,40(sp)
    8001e44e:	6145                	addi	sp,sp,48
    8001e450:	8082                	ret

Disassembly of section .text._ZN5alloc6string6String4push17h2b5e883a1c1e3781E:

000000008001e452 <_ZN5alloc6string6String4push17h2b5e883a1c1e3781E>:
    ///
    /// assert_eq!("abc123", s);
    /// ```
    #[inline]
    #[stable(feature = "rust1", since = "1.0.0")]
    pub fn push(&mut self, ch: char) {
    8001e452:	7175                	addi	sp,sp,-144
    8001e454:	e506                	sd	ra,136(sp)
    8001e456:	f82e                	sd	a1,48(sp)
    8001e458:	85aa                	mv	a1,a0
    8001e45a:	7542                	ld	a0,48(sp)
    8001e45c:	fc2e                	sd	a1,56(sp)
    8001e45e:	862a                	mv	a2,a0
    8001e460:	e0b2                	sd	a2,64(sp)
    8001e462:	ecae                	sd	a1,88(sp)
    8001e464:	d2aa                	sw	a0,100(sp)
        match ch.len_utf8() {
    8001e466:	ffffd097          	auipc	ra,0xffffd
    8001e46a:	f22080e7          	jalr	-222(ra) # 8001b388 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$8len_utf817h6b8693741ddbecceE>
    8001e46e:	e4aa                	sd	a0,72(sp)
    8001e470:	a009                	j	8001e472 <_ZN5alloc6string6String4push17h2b5e883a1c1e3781E+0x20>
    8001e472:	6526                	ld	a0,72(sp)
    8001e474:	4585                	li	a1,1
            1 => self.vec.push(ch as u8),
    8001e476:	02b50163          	beq	a0,a1,8001e498 <_ZN5alloc6string6String4push17h2b5e883a1c1e3781E+0x46>
    8001e47a:	a009                	j	8001e47c <_ZN5alloc6string6String4push17h2b5e883a1c1e3781E+0x2a>
            _ => self.vec.extend_from_slice(ch.encode_utf8(&mut [0; 4]).as_bytes()),
    8001e47c:	6506                	ld	a0,64(sp)
    8001e47e:	75e2                	ld	a1,56(sp)
    8001e480:	ec2e                	sd	a1,24(sp)
    8001e482:	4581                	li	a1,0
    8001e484:	caae                	sw	a1,84(sp)
    8001e486:	08cc                	addi	a1,sp,84
    8001e488:	4611                	li	a2,4
    8001e48a:	ffffd097          	auipc	ra,0xffffd
    8001e48e:	eca080e7          	jalr	-310(ra) # 8001b354 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$11encode_utf817h7239bcb774eea5aaE>
    8001e492:	f02a                	sd	a0,32(sp)
    8001e494:	f42e                	sd	a1,40(sp)
    8001e496:	a809                	j	8001e4a8 <_ZN5alloc6string6String4push17h2b5e883a1c1e3781E+0x56>
            1 => self.vec.push(ch as u8),
    8001e498:	6586                	ld	a1,64(sp)
    8001e49a:	7562                	ld	a0,56(sp)
    8001e49c:	ffff8097          	auipc	ra,0xffff8
    8001e4a0:	7a2080e7          	jalr	1954(ra) # 80016c3e <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h5c7a5a6a9c3b7171E>
    8001e4a4:	a009                	j	8001e4a6 <_ZN5alloc6string6String4push17h2b5e883a1c1e3781E+0x54>
        match ch.len_utf8() {
    8001e4a6:	a01d                	j	8001e4cc <_ZN5alloc6string6String4push17h2b5e883a1c1e3781E+0x7a>
    8001e4a8:	7522                	ld	a0,40(sp)
    8001e4aa:	7582                	ld	a1,32(sp)
    8001e4ac:	f4ae                	sd	a1,104(sp)
    8001e4ae:	f8aa                	sd	a0,112(sp)
    8001e4b0:	fcae                	sd	a1,120(sp)
    8001e4b2:	e12a                	sd	a0,128(sp)
            _ => self.vec.extend_from_slice(ch.encode_utf8(&mut [0; 4]).as_bytes()),
    8001e4b4:	e42e                	sd	a1,8(sp)
    8001e4b6:	e82a                	sd	a0,16(sp)
    8001e4b8:	a009                	j	8001e4ba <_ZN5alloc6string6String4push17h2b5e883a1c1e3781E+0x68>
    8001e4ba:	6642                	ld	a2,16(sp)
    8001e4bc:	65a2                	ld	a1,8(sp)
    8001e4be:	6562                	ld	a0,24(sp)
    8001e4c0:	ffff8097          	auipc	ra,0xffff8
    8001e4c4:	738080e7          	jalr	1848(ra) # 80016bf8 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$17extend_from_slice17hce4d1786c1c715b0E>
    8001e4c8:	a009                	j	8001e4ca <_ZN5alloc6string6String4push17h2b5e883a1c1e3781E+0x78>
        match ch.len_utf8() {
    8001e4ca:	a009                	j	8001e4cc <_ZN5alloc6string6String4push17h2b5e883a1c1e3781E+0x7a>
        }
    }
    8001e4cc:	60aa                	ld	ra,136(sp)
    8001e4ce:	6149                	addi	sp,sp,144
    8001e4d0:	8082                	ret

Disassembly of section .text._ZN65_$LT$alloc..string..String$u20$as$u20$core..ops..deref..Deref$GT$5deref17hb3510aeed9e3d071E:

000000008001e4d2 <_ZN65_$LT$alloc..string..String$u20$as$u20$core..ops..deref..Deref$GT$5deref17hb3510aeed9e3d071E>:
#[stable(feature = "rust1", since = "1.0.0")]
impl ops::Deref for String {
    type Target = str;

    #[inline]
    fn deref(&self) -> &str {
    8001e4d2:	7179                	addi	sp,sp,-48
    8001e4d4:	f406                	sd	ra,40(sp)
    8001e4d6:	f02a                	sd	a0,32(sp)
        unsafe { str::from_utf8_unchecked(&self.vec) }
    8001e4d8:	ffff9097          	auipc	ra,0xffff9
    8001e4dc:	84e080e7          	jalr	-1970(ra) # 80016d26 <_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h57bbbed72157e211E>
    8001e4e0:	e82a                	sd	a0,16(sp)
    8001e4e2:	ec2e                	sd	a1,24(sp)
    8001e4e4:	a009                	j	8001e4e6 <_ZN65_$LT$alloc..string..String$u20$as$u20$core..ops..deref..Deref$GT$5deref17hb3510aeed9e3d071E+0x14>
    8001e4e6:	65e2                	ld	a1,24(sp)
    8001e4e8:	6542                	ld	a0,16(sp)
    8001e4ea:	00000097          	auipc	ra,0x0
    8001e4ee:	306080e7          	jalr	774(ra) # 8001e7f0 <_ZN4core3str8converts19from_utf8_unchecked17hb3b621a5f279bc07E>
    8001e4f2:	e02a                	sd	a0,0(sp)
    8001e4f4:	e42e                	sd	a1,8(sp)
    8001e4f6:	a009                	j	8001e4f8 <_ZN65_$LT$alloc..string..String$u20$as$u20$core..ops..deref..Deref$GT$5deref17hb3510aeed9e3d071E+0x26>
    }
    8001e4f8:	65a2                	ld	a1,8(sp)
    8001e4fa:	6502                	ld	a0,0(sp)
    8001e4fc:	70a2                	ld	ra,40(sp)
    8001e4fe:	6145                	addi	sp,sp,48
    8001e500:	8082                	ret

Disassembly of section .text._ZN5alloc7raw_vec11alloc_guard17hfed185ef1a23ae81E:

000000008001e502 <_ZN5alloc7raw_vec11alloc_guard17hfed185ef1a23ae81E>:
// `> isize::MAX` bytes will surely fail. On 32-bit and 16-bit we need to add
// an extra guard for this in case we're running on a platform which can use
// all 4GB in user-space, e.g., PAE or x32.

#[inline]
fn alloc_guard(alloc_size: usize) -> Result<(), TryReserveError> {
    8001e502:	1101                	addi	sp,sp,-32
    8001e504:	e02a                	sd	a0,0(sp)
    8001e506:	ec2e                	sd	a1,24(sp)
    8001e508:	4505                	li	a0,1
    if usize::BITS < 64 && alloc_size > isize::MAX as usize {
    8001e50a:	e919                	bnez	a0,8001e520 <_ZN5alloc7raw_vec11alloc_guard17hfed185ef1a23ae81E+0x1e>
    8001e50c:	a009                	j	8001e50e <_ZN5alloc7raw_vec11alloc_guard17hfed185ef1a23ae81E+0xc>
    8001e50e:	6582                	ld	a1,0(sp)
    8001e510:	4501                	li	a0,0
        Err(CapacityOverflow)
    8001e512:	e82a                	sd	a0,16(sp)
    8001e514:	6622                	ld	a2,8(sp)
    8001e516:	e590                	sd	a2,8(a1)
    8001e518:	e988                	sd	a0,16(a1)
    8001e51a:	4505                	li	a0,1
    8001e51c:	e188                	sd	a0,0(a1)
    if usize::BITS < 64 && alloc_size > isize::MAX as usize {
    8001e51e:	a029                	j	8001e528 <_ZN5alloc7raw_vec11alloc_guard17hfed185ef1a23ae81E+0x26>
    8001e520:	6582                	ld	a1,0(sp)
    8001e522:	4501                	li	a0,0
    } else {
        Ok(())
    8001e524:	e188                	sd	a0,0(a1)
    if usize::BITS < 64 && alloc_size > isize::MAX as usize {
    8001e526:	a009                	j	8001e528 <_ZN5alloc7raw_vec11alloc_guard17hfed185ef1a23ae81E+0x26>
    }
}
    8001e528:	6105                	addi	sp,sp,32
    8001e52a:	8082                	ret

Disassembly of section .text._ZN5alloc7raw_vec14handle_reserve17h9818f7956a53f3d6E:

000000008001e52c <_ZN5alloc7raw_vec14handle_reserve17h9818f7956a53f3d6E>:
fn handle_reserve(result: Result<(), TryReserveError>) {
    8001e52c:	1101                	addi	sp,sp,-32
    8001e52e:	e42a                	sd	a0,8(sp)
        Err(CapacityOverflow) => capacity_overflow(),
    8001e530:	6108                	ld	a0,0(a0)
    8001e532:	4581                	li	a1,0
    8001e534:	00b50463          	beq	a0,a1,8001e53c <_ZN5alloc7raw_vec14handle_reserve17h9818f7956a53f3d6E+0x10>
    8001e538:	a009                	j	8001e53a <_ZN5alloc7raw_vec14handle_reserve17h9818f7956a53f3d6E+0xe>
    8001e53a:	a019                	j	8001e540 <_ZN5alloc7raw_vec14handle_reserve17h9818f7956a53f3d6E+0x14>
}
    8001e53c:	6105                	addi	sp,sp,32
    8001e53e:	8082                	ret
        Err(CapacityOverflow) => capacity_overflow(),
    8001e540:	6522                	ld	a0,8(sp)
    8001e542:	6908                	ld	a0,16(a0)
    8001e544:	00a035b3          	snez	a1,a0
    8001e548:	4581                	li	a1,0
    8001e54a:	00b50563          	beq	a0,a1,8001e554 <_ZN5alloc7raw_vec14handle_reserve17h9818f7956a53f3d6E+0x28>
    8001e54e:	a009                	j	8001e550 <_ZN5alloc7raw_vec14handle_reserve17h9818f7956a53f3d6E+0x24>
    8001e550:	a039                	j	8001e55e <_ZN5alloc7raw_vec14handle_reserve17h9818f7956a53f3d6E+0x32>
    match result {
    8001e552:	0000                	unimp
        Err(CapacityOverflow) => capacity_overflow(),
    8001e554:	00004097          	auipc	ra,0x4
    8001e558:	b38080e7          	jalr	-1224(ra) # 8002208c <_ZN5alloc7raw_vec17capacity_overflow17hae1c560931d103e4E>
    8001e55c:	0000                	unimp
        Err(AllocError { layout, .. }) => handle_alloc_error(layout),
    8001e55e:	65a2                	ld	a1,8(sp)
    8001e560:	6588                	ld	a0,8(a1)
    8001e562:	698c                	ld	a1,16(a1)
    8001e564:	e82a                	sd	a0,16(sp)
    8001e566:	ec2e                	sd	a1,24(sp)
    8001e568:	00004097          	auipc	ra,0x4
    8001e56c:	b08080e7          	jalr	-1272(ra) # 80022070 <_ZN5alloc5alloc18handle_alloc_error17haa1b1c0a80642c5aE>
	...

Disassembly of section .text._ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8e05789f6aa15028E:

000000008001e572 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8e05789f6aa15028E>:
    8001e572:	1101                	addi	sp,sp,-32
    8001e574:	ec06                	sd	ra,24(sp)
    8001e576:	862e                	mv	a2,a1
    8001e578:	85aa                	mv	a1,a0
    8001e57a:	e42e                	sd	a1,8(sp)
    8001e57c:	e832                	sd	a2,16(sp)
    8001e57e:	6188                	ld	a0,0(a1)
    8001e580:	658c                	ld	a1,8(a1)
    8001e582:	00005097          	auipc	ra,0x5
    8001e586:	cae080e7          	jalr	-850(ra) # 80023230 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h399f9f006bebcceeE>
    8001e58a:	e02a                	sd	a0,0(sp)
    8001e58c:	a009                	j	8001e58e <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8e05789f6aa15028E+0x1c>
    8001e58e:	6502                	ld	a0,0(sp)
    8001e590:	60e2                	ld	ra,24(sp)
    8001e592:	6105                	addi	sp,sp,32
    8001e594:	8082                	ret

Disassembly of section .text._ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h3baa88b0b8ed59b0E:

000000008001e596 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h3baa88b0b8ed59b0E>:
    8001e596:	1101                	addi	sp,sp,-32
    8001e598:	ec06                	sd	ra,24(sp)
    8001e59a:	e42a                	sd	a0,8(sp)
    8001e59c:	e82e                	sd	a1,16(sp)
    8001e59e:	6108                	ld	a0,0(a0)
    8001e5a0:	00006097          	auipc	ra,0x6
    8001e5a4:	fca080e7          	jalr	-54(ra) # 8002456a <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17h1b385cecfac82c6bE>
    8001e5a8:	e02a                	sd	a0,0(sp)
    8001e5aa:	a009                	j	8001e5ac <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h3baa88b0b8ed59b0E+0x16>
    8001e5ac:	6502                	ld	a0,0(sp)
    8001e5ae:	60e2                	ld	ra,24(sp)
    8001e5b0:	6105                	addi	sp,sp,32
    8001e5b2:	8082                	ret

Disassembly of section .text._ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E:

000000008001e5b4 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E>:
    8001e5b4:	1101                	addi	sp,sp,-32
    8001e5b6:	ec06                	sd	ra,24(sp)
    8001e5b8:	862e                	mv	a2,a1
    8001e5ba:	85aa                	mv	a1,a0
    8001e5bc:	e42e                	sd	a1,8(sp)
    8001e5be:	e832                	sd	a2,16(sp)
    8001e5c0:	6188                	ld	a0,0(a1)
    8001e5c2:	658c                	ld	a1,8(a1)
    8001e5c4:	00005097          	auipc	ra,0x5
    8001e5c8:	0bc080e7          	jalr	188(ra) # 80023680 <_ZN42_$LT$str$u20$as$u20$core..fmt..Display$GT$3fmt17h0539661bd0865efeE>
    8001e5cc:	e02a                	sd	a0,0(sp)
    8001e5ce:	a009                	j	8001e5d0 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E+0x1c>
    8001e5d0:	6502                	ld	a0,0(sp)
    8001e5d2:	60e2                	ld	ra,24(sp)
    8001e5d4:	6105                	addi	sp,sp,32
    8001e5d6:	8082                	ret

Disassembly of section .text._ZN4core3fmt10ArgumentV13new17h44143960ef808aafE:

000000008001e5d8 <_ZN4core3fmt10ArgumentV13new17h44143960ef808aafE>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
    8001e5d8:	715d                	addi	sp,sp,-80
    8001e5da:	e82a                	sd	a0,16(sp)
    8001e5dc:	f82a                	sd	a0,48(sp)
    8001e5de:	fc2e                	sd	a1,56(sp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
    8001e5e0:	e0ae                	sd	a1,64(sp)
    8001e5e2:	ec2e                	sd	a1,24(sp)
    8001e5e4:	a009                	j	8001e5e6 <_ZN4core3fmt10ArgumentV13new17h44143960ef808aafE+0xe>
    8001e5e6:	6542                	ld	a0,16(sp)
    8001e5e8:	e4aa                	sd	a0,72(sp)
    8001e5ea:	e42a                	sd	a0,8(sp)
    8001e5ec:	a009                	j	8001e5ee <_ZN4core3fmt10ArgumentV13new17h44143960ef808aafE+0x16>
    8001e5ee:	65e2                	ld	a1,24(sp)
    8001e5f0:	6522                	ld	a0,8(sp)
    8001e5f2:	f02a                	sd	a0,32(sp)
    8001e5f4:	f42e                	sd	a1,40(sp)
    }
    8001e5f6:	6161                	addi	sp,sp,80
    8001e5f8:	8082                	ret

Disassembly of section .text._ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE:

000000008001e5fa <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
    8001e5fa:	715d                	addi	sp,sp,-80
    8001e5fc:	e82a                	sd	a0,16(sp)
    8001e5fe:	f82a                	sd	a0,48(sp)
    8001e600:	fc2e                	sd	a1,56(sp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
    8001e602:	e0ae                	sd	a1,64(sp)
    8001e604:	ec2e                	sd	a1,24(sp)
    8001e606:	a009                	j	8001e608 <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE+0xe>
    8001e608:	6542                	ld	a0,16(sp)
    8001e60a:	e4aa                	sd	a0,72(sp)
    8001e60c:	e42a                	sd	a0,8(sp)
    8001e60e:	a009                	j	8001e610 <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE+0x16>
    8001e610:	65e2                	ld	a1,24(sp)
    8001e612:	6522                	ld	a0,8(sp)
    8001e614:	f02a                	sd	a0,32(sp)
    8001e616:	f42e                	sd	a1,40(sp)
    }
    8001e618:	6161                	addi	sp,sp,80
    8001e61a:	8082                	ret

Disassembly of section .text._ZN4core3fmt10ArgumentV13new17h4cc7035953f043f8E:

000000008001e61c <_ZN4core3fmt10ArgumentV13new17h4cc7035953f043f8E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
    8001e61c:	715d                	addi	sp,sp,-80
    8001e61e:	e82a                	sd	a0,16(sp)
    8001e620:	f82a                	sd	a0,48(sp)
    8001e622:	fc2e                	sd	a1,56(sp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
    8001e624:	e0ae                	sd	a1,64(sp)
    8001e626:	ec2e                	sd	a1,24(sp)
    8001e628:	a009                	j	8001e62a <_ZN4core3fmt10ArgumentV13new17h4cc7035953f043f8E+0xe>
    8001e62a:	6542                	ld	a0,16(sp)
    8001e62c:	e4aa                	sd	a0,72(sp)
    8001e62e:	e42a                	sd	a0,8(sp)
    8001e630:	a009                	j	8001e632 <_ZN4core3fmt10ArgumentV13new17h4cc7035953f043f8E+0x16>
    8001e632:	65e2                	ld	a1,24(sp)
    8001e634:	6522                	ld	a0,8(sp)
    8001e636:	f02a                	sd	a0,32(sp)
    8001e638:	f42e                	sd	a1,40(sp)
    }
    8001e63a:	6161                	addi	sp,sp,80
    8001e63c:	8082                	ret

Disassembly of section .text._ZN4core3fmt10ArgumentV13new17h64cb168c9af0caf2E:

000000008001e63e <_ZN4core3fmt10ArgumentV13new17h64cb168c9af0caf2E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
    8001e63e:	715d                	addi	sp,sp,-80
    8001e640:	e82a                	sd	a0,16(sp)
    8001e642:	f82a                	sd	a0,48(sp)
    8001e644:	fc2e                	sd	a1,56(sp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
    8001e646:	e0ae                	sd	a1,64(sp)
    8001e648:	ec2e                	sd	a1,24(sp)
    8001e64a:	a009                	j	8001e64c <_ZN4core3fmt10ArgumentV13new17h64cb168c9af0caf2E+0xe>
    8001e64c:	6542                	ld	a0,16(sp)
    8001e64e:	e4aa                	sd	a0,72(sp)
    8001e650:	e42a                	sd	a0,8(sp)
    8001e652:	a009                	j	8001e654 <_ZN4core3fmt10ArgumentV13new17h64cb168c9af0caf2E+0x16>
    8001e654:	65e2                	ld	a1,24(sp)
    8001e656:	6522                	ld	a0,8(sp)
    8001e658:	f02a                	sd	a0,32(sp)
    8001e65a:	f42e                	sd	a1,40(sp)
    }
    8001e65c:	6161                	addi	sp,sp,80
    8001e65e:	8082                	ret

Disassembly of section .text._ZN4core3fmt10ArgumentV13new17h8dd13dffa5e435d0E:

000000008001e660 <_ZN4core3fmt10ArgumentV13new17h8dd13dffa5e435d0E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
    8001e660:	715d                	addi	sp,sp,-80
    8001e662:	e82a                	sd	a0,16(sp)
    8001e664:	f82a                	sd	a0,48(sp)
    8001e666:	fc2e                	sd	a1,56(sp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
    8001e668:	e0ae                	sd	a1,64(sp)
    8001e66a:	ec2e                	sd	a1,24(sp)
    8001e66c:	a009                	j	8001e66e <_ZN4core3fmt10ArgumentV13new17h8dd13dffa5e435d0E+0xe>
    8001e66e:	6542                	ld	a0,16(sp)
    8001e670:	e4aa                	sd	a0,72(sp)
    8001e672:	e42a                	sd	a0,8(sp)
    8001e674:	a009                	j	8001e676 <_ZN4core3fmt10ArgumentV13new17h8dd13dffa5e435d0E+0x16>
    8001e676:	65e2                	ld	a1,24(sp)
    8001e678:	6522                	ld	a0,8(sp)
    8001e67a:	f02a                	sd	a0,32(sp)
    8001e67c:	f42e                	sd	a1,40(sp)
    }
    8001e67e:	6161                	addi	sp,sp,80
    8001e680:	8082                	ret

Disassembly of section .text._ZN4core3fmt10ArgumentV13new17hc1ed914d10380b65E:

000000008001e682 <_ZN4core3fmt10ArgumentV13new17hc1ed914d10380b65E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
    8001e682:	715d                	addi	sp,sp,-80
    8001e684:	e82a                	sd	a0,16(sp)
    8001e686:	f82a                	sd	a0,48(sp)
    8001e688:	fc2e                	sd	a1,56(sp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
    8001e68a:	e0ae                	sd	a1,64(sp)
    8001e68c:	ec2e                	sd	a1,24(sp)
    8001e68e:	a009                	j	8001e690 <_ZN4core3fmt10ArgumentV13new17hc1ed914d10380b65E+0xe>
    8001e690:	6542                	ld	a0,16(sp)
    8001e692:	e4aa                	sd	a0,72(sp)
    8001e694:	e42a                	sd	a0,8(sp)
    8001e696:	a009                	j	8001e698 <_ZN4core3fmt10ArgumentV13new17hc1ed914d10380b65E+0x16>
    8001e698:	65e2                	ld	a1,24(sp)
    8001e69a:	6522                	ld	a0,8(sp)
    8001e69c:	f02a                	sd	a0,32(sp)
    8001e69e:	f42e                	sd	a1,40(sp)
    }
    8001e6a0:	6161                	addi	sp,sp,80
    8001e6a2:	8082                	ret

Disassembly of section .text._ZN4core3fmt10ArgumentV13new17hff1fcd65a46300b2E:

000000008001e6a4 <_ZN4core3fmt10ArgumentV13new17hff1fcd65a46300b2E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
    8001e6a4:	715d                	addi	sp,sp,-80
    8001e6a6:	e82a                	sd	a0,16(sp)
    8001e6a8:	f82a                	sd	a0,48(sp)
    8001e6aa:	fc2e                	sd	a1,56(sp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
    8001e6ac:	e0ae                	sd	a1,64(sp)
    8001e6ae:	ec2e                	sd	a1,24(sp)
    8001e6b0:	a009                	j	8001e6b2 <_ZN4core3fmt10ArgumentV13new17hff1fcd65a46300b2E+0xe>
    8001e6b2:	6542                	ld	a0,16(sp)
    8001e6b4:	e4aa                	sd	a0,72(sp)
    8001e6b6:	e42a                	sd	a0,8(sp)
    8001e6b8:	a009                	j	8001e6ba <_ZN4core3fmt10ArgumentV13new17hff1fcd65a46300b2E+0x16>
    8001e6ba:	65e2                	ld	a1,24(sp)
    8001e6bc:	6522                	ld	a0,8(sp)
    8001e6be:	f02a                	sd	a0,32(sp)
    8001e6c0:	f42e                	sd	a1,40(sp)
    }
    8001e6c2:	6161                	addi	sp,sp,80
    8001e6c4:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register4satp4read17h0624a35f6368d5a6E:

000000008001e6c6 <_ZN6kernel4arch5riscv8register4satp4read17h0624a35f6368d5a6E>:
pub const SATP_SV39:usize =  8 << 60;

// supervisor address translation and protection;
// holds the address of the page table.
#[inline]
pub unsafe fn read() -> usize {
    8001e6c6:	1141                	addi	sp,sp,-16
    let ret:usize;
    llvm_asm!("csrr $0, satp":"=r"(ret):::"volatile");
    8001e6c8:	18002573          	csrr	a0,satp
    8001e6cc:	e42a                	sd	a0,8(sp)
    ret
}
    8001e6ce:	0141                	addi	sp,sp,16
    8001e6d0:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register4satp5write17h136481b47a553b1cE:

000000008001e6d2 <_ZN6kernel4arch5riscv8register4satp5write17h136481b47a553b1cE>:

pub unsafe fn write(x: usize){
    8001e6d2:	1141                	addi	sp,sp,-16
    8001e6d4:	e42a                	sd	a0,8(sp)
    // println!("write satp");
    llvm_asm!("csrw satp, $0"::"r"(x)::"volatile");
    8001e6d6:	18051073          	csrw	satp,a0
    8001e6da:	0141                	addi	sp,sp,16
    8001e6dc:	8082                	ret

Disassembly of section .text._ZN6kernel2fs4stat4Stat3new17h349e191f39203f6dE:

000000008001e6de <_ZN6kernel2fs4stat4Stat3new17h349e191f39203f6dE>:
    pub nlink: i16, // Number of links to link
    pub size: usize, // Size of file bytes 
}

impl Stat {
    pub const fn new() -> Self {
    8001e6de:	85aa                	mv	a1,a0
    8001e6e0:	4501                	li	a0,0
        Self {
    8001e6e2:	e188                	sd	a0,0(a1)
    8001e6e4:	c588                	sw	a0,8(a1)
    8001e6e6:	e988                	sd	a0,16(a1)
            inum: 0,
            itype: InodeType::Empty,
            nlink: 0,
            size: 0
        }
    }
    8001e6e8:	8082                	ret

Disassembly of section .text._ZN4core3fmt5Write10write_char17hd77becfa0a78745aE:

000000008001e6ea <_ZN4core3fmt5Write10write_char17hd77becfa0a78745aE>:
    fn write_char(&mut self, c: char) -> Result {
    8001e6ea:	715d                	addi	sp,sp,-80
    8001e6ec:	e486                	sd	ra,72(sp)
    8001e6ee:	e82e                	sd	a1,16(sp)
    8001e6f0:	85aa                	mv	a1,a0
    8001e6f2:	6542                	ld	a0,16(sp)
    8001e6f4:	ec2e                	sd	a1,24(sp)
    8001e6f6:	fc2e                	sd	a1,56(sp)
    8001e6f8:	c2aa                	sw	a0,68(sp)
    8001e6fa:	4581                	li	a1,0
        self.write_str(c.encode_utf8(&mut [0; 4]))
    8001e6fc:	da2e                	sw	a1,52(sp)
    8001e6fe:	184c                	addi	a1,sp,52
    8001e700:	4611                	li	a2,4
    8001e702:	ffffd097          	auipc	ra,0xffffd
    8001e706:	c52080e7          	jalr	-942(ra) # 8001b354 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$11encode_utf817h7239bcb774eea5aaE>
    8001e70a:	f02a                	sd	a0,32(sp)
    8001e70c:	f42e                	sd	a1,40(sp)
    8001e70e:	a009                	j	8001e710 <_ZN4core3fmt5Write10write_char17hd77becfa0a78745aE+0x26>
    8001e710:	7622                	ld	a2,40(sp)
    8001e712:	7582                	ld	a1,32(sp)
    8001e714:	6562                	ld	a0,24(sp)
    8001e716:	ffffd097          	auipc	ra,0xffffd
    8001e71a:	ee6080e7          	jalr	-282(ra) # 8001b5fc <_ZN63_$LT$kernel..driver..uart..Uart$u20$as$u20$core..fmt..Write$GT$9write_str17ha964a515ad10903aE>
    8001e71e:	e42a                	sd	a0,8(sp)
    8001e720:	a009                	j	8001e722 <_ZN4core3fmt5Write10write_char17hd77becfa0a78745aE+0x38>
    }
    8001e722:	6522                	ld	a0,8(sp)
    8001e724:	60a6                	ld	ra,72(sp)
    8001e726:	6161                	addi	sp,sp,80
    8001e728:	8082                	ret

Disassembly of section .text._ZN4core3fmt5Write9write_fmt17h7425e676f17f7351E:

000000008001e72a <_ZN4core3fmt5Write9write_fmt17h7425e676f17f7351E>:
    fn write_fmt(mut self: &mut Self, args: Arguments<'_>) -> Result {
    8001e72a:	715d                	addi	sp,sp,-80
    8001e72c:	e486                	sd	ra,72(sp)
    8001e72e:	e82a                	sd	a0,16(sp)
        write(&mut self, args)
    8001e730:	6188                	ld	a0,0(a1)
    8001e732:	ec2a                	sd	a0,24(sp)
    8001e734:	6588                	ld	a0,8(a1)
    8001e736:	f02a                	sd	a0,32(sp)
    8001e738:	6988                	ld	a0,16(a1)
    8001e73a:	f42a                	sd	a0,40(sp)
    8001e73c:	6d88                	ld	a0,24(a1)
    8001e73e:	f82a                	sd	a0,48(sp)
    8001e740:	7188                	ld	a0,32(a1)
    8001e742:	fc2a                	sd	a0,56(sp)
    8001e744:	7588                	ld	a0,40(a1)
    8001e746:	e0aa                	sd	a0,64(sp)

000000008001e748 <.LBB1_2>:
    8001e748:	0000d597          	auipc	a1,0xd
    8001e74c:	01058593          	addi	a1,a1,16 # 8002b758 <.L__unnamed_1>
    8001e750:	0808                	addi	a0,sp,16
    8001e752:	0830                	addi	a2,sp,24
    8001e754:	00004097          	auipc	ra,0x4
    8001e758:	384080e7          	jalr	900(ra) # 80022ad8 <_ZN4core3fmt5write17hf87af17b3ec995a2E>
    8001e75c:	e42a                	sd	a0,8(sp)
    8001e75e:	a009                	j	8001e760 <.LBB1_2+0x18>
    }
    8001e760:	6522                	ld	a0,8(sp)
    8001e762:	60a6                	ld	ra,72(sp)
    8001e764:	6161                	addi	sp,sp,80
    8001e766:	8082                	ret

Disassembly of section .text._ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h1e2dcf27a34235edE:

000000008001e768 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h1e2dcf27a34235edE>:
    fn write_char(&mut self, c: char) -> Result {
    8001e768:	1101                	addi	sp,sp,-32
    8001e76a:	ec06                	sd	ra,24(sp)
    8001e76c:	e42a                	sd	a0,8(sp)
    8001e76e:	ca2e                	sw	a1,20(sp)
        (**self).write_char(c)
    8001e770:	6108                	ld	a0,0(a0)
    8001e772:	00000097          	auipc	ra,0x0
    8001e776:	f78080e7          	jalr	-136(ra) # 8001e6ea <_ZN4core3fmt5Write10write_char17hd77becfa0a78745aE>
    8001e77a:	e02a                	sd	a0,0(sp)
    8001e77c:	a009                	j	8001e77e <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h1e2dcf27a34235edE+0x16>
    }
    8001e77e:	6502                	ld	a0,0(sp)
    8001e780:	60e2                	ld	ra,24(sp)
    8001e782:	6105                	addi	sp,sp,32
    8001e784:	8082                	ret

Disassembly of section .text._ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17hc6623925455b9c1eE:

000000008001e786 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17hc6623925455b9c1eE>:
    fn write_fmt(&mut self, args: Arguments<'_>) -> Result {
    8001e786:	715d                	addi	sp,sp,-80
    8001e788:	e486                	sd	ra,72(sp)
    8001e78a:	e0aa                	sd	a0,64(sp)
        (**self).write_fmt(args)
    8001e78c:	6108                	ld	a0,0(a0)
    8001e78e:	7590                	ld	a2,40(a1)
    8001e790:	fc32                	sd	a2,56(sp)
    8001e792:	7190                	ld	a2,32(a1)
    8001e794:	f832                	sd	a2,48(sp)
    8001e796:	6d90                	ld	a2,24(a1)
    8001e798:	f432                	sd	a2,40(sp)
    8001e79a:	6990                	ld	a2,16(a1)
    8001e79c:	f032                	sd	a2,32(sp)
    8001e79e:	6590                	ld	a2,8(a1)
    8001e7a0:	ec32                	sd	a2,24(sp)
    8001e7a2:	618c                	ld	a1,0(a1)
    8001e7a4:	e82e                	sd	a1,16(sp)
    8001e7a6:	080c                	addi	a1,sp,16
    8001e7a8:	00000097          	auipc	ra,0x0
    8001e7ac:	f82080e7          	jalr	-126(ra) # 8001e72a <_ZN4core3fmt5Write9write_fmt17h7425e676f17f7351E>
    8001e7b0:	e42a                	sd	a0,8(sp)
    8001e7b2:	a009                	j	8001e7b4 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17hc6623925455b9c1eE+0x2e>
    }
    8001e7b4:	6522                	ld	a0,8(sp)
    8001e7b6:	60a6                	ld	ra,72(sp)
    8001e7b8:	6161                	addi	sp,sp,80
    8001e7ba:	8082                	ret

Disassembly of section .text._ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h41f150747a15ec7fE:

000000008001e7bc <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h41f150747a15ec7fE>:
    fn write_str(&mut self, s: &str) -> Result {
    8001e7bc:	7179                	addi	sp,sp,-48
    8001e7be:	f406                	sd	ra,40(sp)
    8001e7c0:	e82a                	sd	a0,16(sp)
    8001e7c2:	ec2e                	sd	a1,24(sp)
    8001e7c4:	f032                	sd	a2,32(sp)
        (**self).write_str(s)
    8001e7c6:	6108                	ld	a0,0(a0)
    8001e7c8:	ffffd097          	auipc	ra,0xffffd
    8001e7cc:	e34080e7          	jalr	-460(ra) # 8001b5fc <_ZN63_$LT$kernel..driver..uart..Uart$u20$as$u20$core..fmt..Write$GT$9write_str17ha964a515ad10903aE>
    8001e7d0:	e42a                	sd	a0,8(sp)
    8001e7d2:	a009                	j	8001e7d4 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h41f150747a15ec7fE+0x18>
    }
    8001e7d4:	6522                	ld	a0,8(sp)
    8001e7d6:	70a2                	ld	ra,40(sp)
    8001e7d8:	6145                	addi	sp,sp,48
    8001e7da:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register2tp4read17h418649f5c8f5b927E:

000000008001e7dc <_ZN6kernel4arch5riscv8register2tp4read17h418649f5c8f5b927E>:
// read and write tp, the thread pointer, which holds
// this core's hartid (core number), the index into cpus[].
#[inline]
pub unsafe fn read() -> usize {
    8001e7dc:	1141                	addi	sp,sp,-16
    let ret:usize;
    llvm_asm!("mv $0, tp":"=r"(ret):::"volatile");
    8001e7de:	8512                	mv	a0,tp
    8001e7e0:	e42a                	sd	a0,8(sp)
    ret
}
    8001e7e2:	0141                	addi	sp,sp,16
    8001e7e4:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register2tp5write17hac520d82928ad2ddE:

000000008001e7e6 <_ZN6kernel4arch5riscv8register2tp5write17hac520d82928ad2ddE>:

#[inline]
pub unsafe fn write(x:usize){
    8001e7e6:	1141                	addi	sp,sp,-16
    8001e7e8:	e42a                	sd	a0,8(sp)
    llvm_asm!("mv tp, $0"::"r"(x)::"volatile");
    8001e7ea:	822a                	mv	tp,a0
    8001e7ec:	0141                	addi	sp,sp,16
    8001e7ee:	8082                	ret

Disassembly of section .text._ZN4core3str8converts19from_utf8_unchecked17hb3b621a5f279bc07E:

000000008001e7f0 <_ZN4core3str8converts19from_utf8_unchecked17hb3b621a5f279bc07E>:
/// ```
#[inline]
#[stable(feature = "rust1", since = "1.0.0")]
#[rustc_const_unstable(feature = "const_str_from_utf8_unchecked", issue = "75196")]
#[rustc_allow_const_fn_unstable(const_fn_transmute)]
pub const unsafe fn from_utf8_unchecked(v: &[u8]) -> &str {
    8001e7f0:	7179                	addi	sp,sp,-48
    8001e7f2:	e82a                	sd	a0,16(sp)
    8001e7f4:	ec2e                	sd	a1,24(sp)
    // SAFETY: the caller must guarantee that the bytes `v` are valid UTF-8.
    // Also relies on `&str` and `&[u8]` having the same layout.
    unsafe { mem::transmute(v) }
    8001e7f6:	f02a                	sd	a0,32(sp)
    8001e7f8:	f42e                	sd	a1,40(sp)
    8001e7fa:	e02a                	sd	a0,0(sp)
    8001e7fc:	e42e                	sd	a1,8(sp)
    8001e7fe:	a009                	j	8001e800 <_ZN4core3str8converts19from_utf8_unchecked17hb3b621a5f279bc07E+0x10>
}
    8001e800:	65a2                	ld	a1,8(sp)
    8001e802:	6502                	ld	a0,0(sp)
    8001e804:	6145                	addi	sp,sp,48
    8001e806:	8082                	ret

Disassembly of section .text._ZN4core3str8converts23from_utf8_unchecked_mut17h690302c73d561c56E:

000000008001e808 <_ZN4core3str8converts23from_utf8_unchecked_mut17h690302c73d561c56E>:
///
/// assert_eq!("💖", heart);
/// ```
#[inline]
#[stable(feature = "str_mut_extras", since = "1.20.0")]
pub unsafe fn from_utf8_unchecked_mut(v: &mut [u8]) -> &mut str {
    8001e808:	1141                	addi	sp,sp,-16
    8001e80a:	e02a                	sd	a0,0(sp)
    8001e80c:	e42e                	sd	a1,8(sp)
    // SAFETY: the caller must guarantee that the bytes `v`
    // are valid UTF-8, thus the cast to `*mut str` is safe.
    // Also, the pointer dereference is safe because that pointer
    // comes from a reference which is guaranteed to be valid for writes.
    unsafe { &mut *(v as *mut [u8] as *mut str) }
}
    8001e80e:	0141                	addi	sp,sp,16
    8001e810:	8082                	ret

Disassembly of section .text._ZN4core5alloc6layout6Layout12pad_to_align17hf134c92d73cc7687E:

000000008001e812 <_ZN4core5alloc6layout6Layout12pad_to_align17hf134c92d73cc7687E>:
    pub fn pad_to_align(&self) -> Layout {
    8001e812:	7159                	addi	sp,sp,-112
    8001e814:	f486                	sd	ra,104(sp)
    8001e816:	e0aa                	sd	a0,64(sp)
    8001e818:	e8aa                	sd	a0,80(sp)
        let pad = self.padding_needed_for(self.align());
    8001e81a:	00000097          	auipc	ra,0x0
    8001e81e:	17e080e7          	jalr	382(ra) # 8001e998 <_ZN4core5alloc6layout6Layout5align17h05712eb17caed6beE>
    8001e822:	e4aa                	sd	a0,72(sp)
    8001e824:	a009                	j	8001e826 <_ZN4core5alloc6layout6Layout12pad_to_align17hf134c92d73cc7687E+0x14>
    8001e826:	65a6                	ld	a1,72(sp)
    8001e828:	6506                	ld	a0,64(sp)
    8001e82a:	00000097          	auipc	ra,0x0
    8001e82e:	0ce080e7          	jalr	206(ra) # 8001e8f8 <_ZN4core5alloc6layout6Layout18padding_needed_for17h6f762d98d6b3cc59E>
    8001e832:	85aa                	mv	a1,a0
    8001e834:	fc2e                	sd	a1,56(sp)
    8001e836:	ecaa                	sd	a0,88(sp)
    8001e838:	a009                	j	8001e83a <_ZN4core5alloc6layout6Layout12pad_to_align17hf134c92d73cc7687E+0x28>
        let new_size = self.size() + pad;
    8001e83a:	6506                	ld	a0,64(sp)
    8001e83c:	00000097          	auipc	ra,0x0
    8001e840:	152080e7          	jalr	338(ra) # 8001e98e <_ZN4core5alloc6layout6Layout4size17h7f60c0168860a2ffE>
    8001e844:	f82a                	sd	a0,48(sp)
    8001e846:	a009                	j	8001e848 <_ZN4core5alloc6layout6Layout12pad_to_align17hf134c92d73cc7687E+0x36>
    8001e848:	6506                	ld	a0,64(sp)
    8001e84a:	75c2                	ld	a1,48(sp)
    8001e84c:	7662                	ld	a2,56(sp)
    8001e84e:	95b2                	add	a1,a1,a2
    8001e850:	f02e                	sd	a1,32(sp)
    8001e852:	f0ae                	sd	a1,96(sp)
        Layout::from_size_align(new_size, self.align()).unwrap()
    8001e854:	00000097          	auipc	ra,0x0
    8001e858:	144080e7          	jalr	324(ra) # 8001e998 <_ZN4core5alloc6layout6Layout5align17h05712eb17caed6beE>
    8001e85c:	f42a                	sd	a0,40(sp)
    8001e85e:	a009                	j	8001e860 <_ZN4core5alloc6layout6Layout12pad_to_align17hf134c92d73cc7687E+0x4e>
    8001e860:	75a2                	ld	a1,40(sp)
    8001e862:	7502                	ld	a0,32(sp)
    8001e864:	00000097          	auipc	ra,0x0
    8001e868:	032080e7          	jalr	50(ra) # 8001e896 <_ZN4core5alloc6layout6Layout15from_size_align17h679d1a608f332f1fE>
    8001e86c:	e82a                	sd	a0,16(sp)
    8001e86e:	ec2e                	sd	a1,24(sp)
    8001e870:	a009                	j	8001e872 <_ZN4core5alloc6layout6Layout12pad_to_align17hf134c92d73cc7687E+0x60>
    8001e872:	65e2                	ld	a1,24(sp)
    8001e874:	6542                	ld	a0,16(sp)

000000008001e876 <.LBB0_7>:
    8001e876:	0000d617          	auipc	a2,0xd
    8001e87a:	f9260613          	addi	a2,a2,-110 # 8002b808 <.L__unnamed_1>
    8001e87e:	fffee097          	auipc	ra,0xfffee
    8001e882:	51c080e7          	jalr	1308(ra) # 8000cd9a <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h01f79eb8d5b769f4E>
    8001e886:	e02a                	sd	a0,0(sp)
    8001e888:	e42e                	sd	a1,8(sp)
    8001e88a:	a009                	j	8001e88c <.LBB0_7+0x16>
    }
    8001e88c:	65a2                	ld	a1,8(sp)
    8001e88e:	6502                	ld	a0,0(sp)
    8001e890:	70a6                	ld	ra,104(sp)
    8001e892:	6165                	addi	sp,sp,112
    8001e894:	8082                	ret

Disassembly of section .text._ZN4core5alloc6layout6Layout15from_size_align17h679d1a608f332f1fE:

000000008001e896 <_ZN4core5alloc6layout6Layout15from_size_align17h679d1a608f332f1fE>:
    pub const fn from_size_align(size: usize, align: usize) -> Result<Self, LayoutError> {
    8001e896:	715d                	addi	sp,sp,-80
    8001e898:	e486                	sd	ra,72(sp)
    8001e89a:	e82e                	sd	a1,16(sp)
    8001e89c:	85aa                	mv	a1,a0
    8001e89e:	6542                	ld	a0,16(sp)
    8001e8a0:	ec2e                	sd	a1,24(sp)
    8001e8a2:	fc2e                	sd	a1,56(sp)
    8001e8a4:	e0aa                	sd	a0,64(sp)
        if !align.is_power_of_two() {
    8001e8a6:	00000097          	auipc	ra,0x0
    8001e8aa:	88e080e7          	jalr	-1906(ra) # 8001e134 <_ZN4core3num23_$LT$impl$u20$usize$GT$15is_power_of_two17h1415e23f4938ba42E>
    8001e8ae:	f02a                	sd	a0,32(sp)
    8001e8b0:	a009                	j	8001e8b2 <_ZN4core5alloc6layout6Layout15from_size_align17h679d1a608f332f1fE+0x1c>
    8001e8b2:	7502                	ld	a0,32(sp)
    8001e8b4:	e509                	bnez	a0,8001e8be <_ZN4core5alloc6layout6Layout15from_size_align17h679d1a608f332f1fE+0x28>
    8001e8b6:	a009                	j	8001e8b8 <_ZN4core5alloc6layout6Layout15from_size_align17h679d1a608f332f1fE+0x22>
    8001e8b8:	4501                	li	a0,0
            return Err(LayoutError { private: () });
    8001e8ba:	f82a                	sd	a0,48(sp)
    8001e8bc:	a80d                	j	8001e8ee <_ZN4core5alloc6layout6Layout15from_size_align17h679d1a608f332f1fE+0x58>
    8001e8be:	65e2                	ld	a1,24(sp)
    8001e8c0:	6642                	ld	a2,16(sp)
    8001e8c2:	4501                	li	a0,0
        if size > usize::MAX - (align - 1) {
    8001e8c4:	8d11                	sub	a0,a0,a2
    8001e8c6:	00b57663          	bgeu	a0,a1,8001e8d2 <_ZN4core5alloc6layout6Layout15from_size_align17h679d1a608f332f1fE+0x3c>
    8001e8ca:	a009                	j	8001e8cc <_ZN4core5alloc6layout6Layout15from_size_align17h679d1a608f332f1fE+0x36>
    8001e8cc:	4501                	li	a0,0
            return Err(LayoutError { private: () });
    8001e8ce:	f82a                	sd	a0,48(sp)
    8001e8d0:	a839                	j	8001e8ee <_ZN4core5alloc6layout6Layout15from_size_align17h679d1a608f332f1fE+0x58>
        unsafe { Ok(Layout::from_size_align_unchecked(size, align)) }
    8001e8d2:	65c2                	ld	a1,16(sp)
    8001e8d4:	6562                	ld	a0,24(sp)
    8001e8d6:	00000097          	auipc	ra,0x0
    8001e8da:	08e080e7          	jalr	142(ra) # 8001e964 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h7d187b5349095d20E>
    8001e8de:	e02a                	sd	a0,0(sp)
    8001e8e0:	e42e                	sd	a1,8(sp)
    8001e8e2:	a009                	j	8001e8e4 <_ZN4core5alloc6layout6Layout15from_size_align17h679d1a608f332f1fE+0x4e>
    8001e8e4:	6522                	ld	a0,8(sp)
    8001e8e6:	6582                	ld	a1,0(sp)
    8001e8e8:	f42e                	sd	a1,40(sp)
    8001e8ea:	f82a                	sd	a0,48(sp)
    }
    8001e8ec:	a009                	j	8001e8ee <_ZN4core5alloc6layout6Layout15from_size_align17h679d1a608f332f1fE+0x58>
    8001e8ee:	7522                	ld	a0,40(sp)
    8001e8f0:	75c2                	ld	a1,48(sp)
    8001e8f2:	60a6                	ld	ra,72(sp)
    8001e8f4:	6161                	addi	sp,sp,80
    8001e8f6:	8082                	ret

Disassembly of section .text._ZN4core5alloc6layout6Layout18padding_needed_for17h6f762d98d6b3cc59E:

000000008001e8f8 <_ZN4core5alloc6layout6Layout18padding_needed_for17h6f762d98d6b3cc59E>:
    pub const fn padding_needed_for(&self, align: usize) -> usize {
    8001e8f8:	711d                	addi	sp,sp,-96
    8001e8fa:	ec86                	sd	ra,88(sp)
    8001e8fc:	f42e                	sd	a1,40(sp)
    8001e8fe:	fc2a                	sd	a0,56(sp)
    8001e900:	e0ae                	sd	a1,64(sp)
        let len = self.size();
    8001e902:	00000097          	auipc	ra,0x0
    8001e906:	08c080e7          	jalr	140(ra) # 8001e98e <_ZN4core5alloc6layout6Layout4size17h7f60c0168860a2ffE>
    8001e90a:	85aa                	mv	a1,a0
    8001e90c:	f82e                	sd	a1,48(sp)
    8001e90e:	e4aa                	sd	a0,72(sp)
    8001e910:	a009                	j	8001e912 <_ZN4core5alloc6layout6Layout18padding_needed_for17h6f762d98d6b3cc59E+0x1a>
        let len_rounded_up = len.wrapping_add(align).wrapping_sub(1) & !align.wrapping_sub(1);
    8001e912:	75a2                	ld	a1,40(sp)
    8001e914:	7542                	ld	a0,48(sp)
    8001e916:	fffff097          	auipc	ra,0xfffff
    8001e91a:	79e080e7          	jalr	1950(ra) # 8001e0b4 <_ZN4core3num23_$LT$impl$u20$usize$GT$12wrapping_add17he0ea74277f4c06b1E>
    8001e91e:	f02a                	sd	a0,32(sp)
    8001e920:	a009                	j	8001e922 <_ZN4core5alloc6layout6Layout18padding_needed_for17h6f762d98d6b3cc59E+0x2a>
    8001e922:	7502                	ld	a0,32(sp)
    8001e924:	4585                	li	a1,1
    8001e926:	fffff097          	auipc	ra,0xfffff
    8001e92a:	79a080e7          	jalr	1946(ra) # 8001e0c0 <_ZN4core3num23_$LT$impl$u20$usize$GT$12wrapping_sub17h8f077bf007d122c9E>
    8001e92e:	ec2a                	sd	a0,24(sp)
    8001e930:	a009                	j	8001e932 <_ZN4core5alloc6layout6Layout18padding_needed_for17h6f762d98d6b3cc59E+0x3a>
    8001e932:	7522                	ld	a0,40(sp)
    8001e934:	4585                	li	a1,1
    8001e936:	fffff097          	auipc	ra,0xfffff
    8001e93a:	78a080e7          	jalr	1930(ra) # 8001e0c0 <_ZN4core3num23_$LT$impl$u20$usize$GT$12wrapping_sub17h8f077bf007d122c9E>
    8001e93e:	e82a                	sd	a0,16(sp)
    8001e940:	a009                	j	8001e942 <_ZN4core5alloc6layout6Layout18padding_needed_for17h6f762d98d6b3cc59E+0x4a>
    8001e942:	75c2                	ld	a1,48(sp)
    8001e944:	6562                	ld	a0,24(sp)
    8001e946:	6642                	ld	a2,16(sp)
    8001e948:	fff64613          	not	a2,a2
    8001e94c:	8d71                	and	a0,a0,a2
    8001e94e:	e8aa                	sd	a0,80(sp)
        len_rounded_up.wrapping_sub(len)
    8001e950:	fffff097          	auipc	ra,0xfffff
    8001e954:	770080e7          	jalr	1904(ra) # 8001e0c0 <_ZN4core3num23_$LT$impl$u20$usize$GT$12wrapping_sub17h8f077bf007d122c9E>
    8001e958:	e42a                	sd	a0,8(sp)
    8001e95a:	a009                	j	8001e95c <_ZN4core5alloc6layout6Layout18padding_needed_for17h6f762d98d6b3cc59E+0x64>
    }
    8001e95c:	6522                	ld	a0,8(sp)
    8001e95e:	60e6                	ld	ra,88(sp)
    8001e960:	6125                	addi	sp,sp,96
    8001e962:	8082                	ret

Disassembly of section .text._ZN4core5alloc6layout6Layout25from_size_align_unchecked17h7d187b5349095d20E:

000000008001e964 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h7d187b5349095d20E>:
    pub const unsafe fn from_size_align_unchecked(size: usize, align: usize) -> Self {
    8001e964:	7139                	addi	sp,sp,-64
    8001e966:	fc06                	sd	ra,56(sp)
    8001e968:	e02e                	sd	a1,0(sp)
    8001e96a:	85aa                	mv	a1,a0
    8001e96c:	6502                	ld	a0,0(sp)
    8001e96e:	e42e                	sd	a1,8(sp)
    8001e970:	f42e                	sd	a1,40(sp)
    8001e972:	f82a                	sd	a0,48(sp)
        Layout { size_: size, align_: unsafe { NonZeroUsize::new_unchecked(align) } }
    8001e974:	ffffa097          	auipc	ra,0xffffa
    8001e978:	b08080e7          	jalr	-1272(ra) # 8001847c <_ZN4core3num7nonzero12NonZeroUsize13new_unchecked17h04f2481c8bf8ee85E>
    8001e97c:	e82a                	sd	a0,16(sp)
    8001e97e:	a009                	j	8001e980 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h7d187b5349095d20E+0x1c>
    8001e980:	65c2                	ld	a1,16(sp)
    8001e982:	6522                	ld	a0,8(sp)
    8001e984:	ec2a                	sd	a0,24(sp)
    8001e986:	f02e                	sd	a1,32(sp)
    }
    8001e988:	70e2                	ld	ra,56(sp)
    8001e98a:	6121                	addi	sp,sp,64
    8001e98c:	8082                	ret

Disassembly of section .text._ZN4core5alloc6layout6Layout4size17h7f60c0168860a2ffE:

000000008001e98e <_ZN4core5alloc6layout6Layout4size17h7f60c0168860a2ffE>:
    pub const fn size(&self) -> usize {
    8001e98e:	1141                	addi	sp,sp,-16
    8001e990:	e42a                	sd	a0,8(sp)
        self.size_
    8001e992:	6108                	ld	a0,0(a0)
    }
    8001e994:	0141                	addi	sp,sp,16
    8001e996:	8082                	ret

Disassembly of section .text._ZN4core5alloc6layout6Layout5align17h05712eb17caed6beE:

000000008001e998 <_ZN4core5alloc6layout6Layout5align17h05712eb17caed6beE>:
    pub const fn align(&self) -> usize {
    8001e998:	1101                	addi	sp,sp,-32
    8001e99a:	ec06                	sd	ra,24(sp)
    8001e99c:	e82a                	sd	a0,16(sp)
        self.align_.get()
    8001e99e:	6508                	ld	a0,8(a0)
    8001e9a0:	ffffa097          	auipc	ra,0xffffa
    8001e9a4:	ae6080e7          	jalr	-1306(ra) # 80018486 <_ZN4core3num7nonzero12NonZeroUsize3get17h9c9882678da2bc98E>
    8001e9a8:	e42a                	sd	a0,8(sp)
    8001e9aa:	a009                	j	8001e9ac <_ZN4core5alloc6layout6Layout5align17h05712eb17caed6beE+0x14>
    }
    8001e9ac:	6522                	ld	a0,8(sp)
    8001e9ae:	60e2                	ld	ra,24(sp)
    8001e9b0:	6105                	addi	sp,sp,32
    8001e9b2:	8082                	ret

Disassembly of section .text._ZN4core5alloc6layout6Layout6repeat17he5367bbab955aefbE:

000000008001e9b4 <_ZN4core5alloc6layout6Layout6repeat17he5367bbab955aefbE>:
    pub fn repeat(&self, n: usize) -> Result<(Self, usize), LayoutError> {
    8001e9b4:	7115                	addi	sp,sp,-224
    8001e9b6:	ed86                	sd	ra,216(sp)
    8001e9b8:	ecb2                	sd	a2,88(sp)
    8001e9ba:	f0ae                	sd	a1,96(sp)
    8001e9bc:	85aa                	mv	a1,a0
    8001e9be:	7506                	ld	a0,96(sp)
    8001e9c0:	f4ae                	sd	a1,104(sp)
    8001e9c2:	f52a                	sd	a0,168(sp)
    8001e9c4:	f932                	sd	a2,176(sp)
        let padded_size = self.size() + self.padding_needed_for(self.align());
    8001e9c6:	00000097          	auipc	ra,0x0
    8001e9ca:	fc8080e7          	jalr	-56(ra) # 8001e98e <_ZN4core5alloc6layout6Layout4size17h7f60c0168860a2ffE>
    8001e9ce:	f8aa                	sd	a0,112(sp)
    8001e9d0:	a009                	j	8001e9d2 <_ZN4core5alloc6layout6Layout6repeat17he5367bbab955aefbE+0x1e>
    8001e9d2:	7506                	ld	a0,96(sp)
    8001e9d4:	00000097          	auipc	ra,0x0
    8001e9d8:	fc4080e7          	jalr	-60(ra) # 8001e998 <_ZN4core5alloc6layout6Layout5align17h05712eb17caed6beE>
    8001e9dc:	e8aa                	sd	a0,80(sp)
    8001e9de:	a009                	j	8001e9e0 <_ZN4core5alloc6layout6Layout6repeat17he5367bbab955aefbE+0x2c>
    8001e9e0:	65c6                	ld	a1,80(sp)
    8001e9e2:	7506                	ld	a0,96(sp)
    8001e9e4:	00000097          	auipc	ra,0x0
    8001e9e8:	f14080e7          	jalr	-236(ra) # 8001e8f8 <_ZN4core5alloc6layout6Layout18padding_needed_for17h6f762d98d6b3cc59E>
    8001e9ec:	e4aa                	sd	a0,72(sp)
    8001e9ee:	a009                	j	8001e9f0 <_ZN4core5alloc6layout6Layout6repeat17he5367bbab955aefbE+0x3c>
    8001e9f0:	65e6                	ld	a1,88(sp)
    8001e9f2:	7546                	ld	a0,112(sp)
    8001e9f4:	6626                	ld	a2,72(sp)
    8001e9f6:	9532                	add	a0,a0,a2
    8001e9f8:	f82a                	sd	a0,48(sp)
    8001e9fa:	e1aa                	sd	a0,192(sp)
        let alloc_size = padded_size.checked_mul(n).ok_or(LayoutError { private: () })?;
    8001e9fc:	fffff097          	auipc	ra,0xfffff
    8001ea00:	61c080e7          	jalr	1564(ra) # 8001e018 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17h38933f87a0e6dbeaE>
    8001ea04:	fc2a                	sd	a0,56(sp)
    8001ea06:	e0ae                	sd	a1,64(sp)
    8001ea08:	a009                	j	8001ea0a <_ZN4core5alloc6layout6Layout6repeat17he5367bbab955aefbE+0x56>
    8001ea0a:	6586                	ld	a1,64(sp)
    8001ea0c:	7562                	ld	a0,56(sp)
    8001ea0e:	ffff0097          	auipc	ra,0xffff0
    8001ea12:	d72080e7          	jalr	-654(ra) # 8000e780 <_ZN4core6option15Option$LT$T$GT$5ok_or17h630e1a004ee31f6cE>
    8001ea16:	f02a                	sd	a0,32(sp)
    8001ea18:	f42e                	sd	a1,40(sp)
    8001ea1a:	a009                	j	8001ea1c <_ZN4core5alloc6layout6Layout6repeat17he5367bbab955aefbE+0x68>
    8001ea1c:	75a2                	ld	a1,40(sp)
    8001ea1e:	7502                	ld	a0,32(sp)
    8001ea20:	fffef097          	auipc	ra,0xfffef
    8001ea24:	802080e7          	jalr	-2046(ra) # 8000d222 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hd9845beb6e8da5c7E>
    8001ea28:	fcaa                	sd	a0,120(sp)
    8001ea2a:	e12e                	sd	a1,128(sp)
    8001ea2c:	a009                	j	8001ea2e <_ZN4core5alloc6layout6Layout6repeat17he5367bbab955aefbE+0x7a>
    8001ea2e:	7566                	ld	a0,120(sp)
    8001ea30:	4581                	li	a1,0
    8001ea32:	00b50463          	beq	a0,a1,8001ea3a <_ZN4core5alloc6layout6Layout6repeat17he5367bbab955aefbE+0x86>
    8001ea36:	a009                	j	8001ea38 <_ZN4core5alloc6layout6Layout6repeat17he5367bbab955aefbE+0x84>
    8001ea38:	a829                	j	8001ea52 <_ZN4core5alloc6layout6Layout6repeat17he5367bbab955aefbE+0x9e>
    8001ea3a:	7506                	ld	a0,96(sp)
    8001ea3c:	658a                	ld	a1,128(sp)
    8001ea3e:	e82e                	sd	a1,16(sp)
    8001ea40:	e5ae                	sd	a1,200(sp)
    8001ea42:	e9ae                	sd	a1,208(sp)
        unsafe { Ok((Layout::from_size_align_unchecked(alloc_size, self.align()), padded_size)) }
    8001ea44:	00000097          	auipc	ra,0x0
    8001ea48:	f54080e7          	jalr	-172(ra) # 8001e998 <_ZN4core5alloc6layout6Layout5align17h05712eb17caed6beE>
    8001ea4c:	ec2a                	sd	a0,24(sp)
    8001ea4e:	a831                	j	8001ea6a <_ZN4core5alloc6layout6Layout6repeat17he5367bbab955aefbE+0xb6>
        let alloc_size = padded_size.checked_mul(n).ok_or(LayoutError { private: () })?;
    8001ea50:	0000                	unimp
    8001ea52:	fffea097          	auipc	ra,0xfffea
    8001ea56:	c64080e7          	jalr	-924(ra) # 800086b6 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h2a9aee2c044310b7E>
    8001ea5a:	a009                	j	8001ea5c <_ZN4core5alloc6layout6Layout6repeat17he5367bbab955aefbE+0xa8>
    8001ea5c:	7526                	ld	a0,104(sp)
    8001ea5e:	fffee097          	auipc	ra,0xfffee
    8001ea62:	6ae080e7          	jalr	1710(ra) # 8000d10c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h826a3a4a12863e91E>
    8001ea66:	a009                	j	8001ea68 <_ZN4core5alloc6layout6Layout6repeat17he5367bbab955aefbE+0xb4>
    }
    8001ea68:	a02d                	j	8001ea92 <_ZN4core5alloc6layout6Layout6repeat17he5367bbab955aefbE+0xde>
        unsafe { Ok((Layout::from_size_align_unchecked(alloc_size, self.align()), padded_size)) }
    8001ea6a:	65e2                	ld	a1,24(sp)
    8001ea6c:	6542                	ld	a0,16(sp)
    8001ea6e:	00000097          	auipc	ra,0x0
    8001ea72:	ef6080e7          	jalr	-266(ra) # 8001e964 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h7d187b5349095d20E>
    8001ea76:	e02a                	sd	a0,0(sp)
    8001ea78:	e42e                	sd	a1,8(sp)
    8001ea7a:	a009                	j	8001ea7c <_ZN4core5alloc6layout6Layout6repeat17he5367bbab955aefbE+0xc8>
    8001ea7c:	6502                	ld	a0,0(sp)
    8001ea7e:	75a6                	ld	a1,104(sp)
    8001ea80:	6622                	ld	a2,8(sp)
    8001ea82:	76c2                	ld	a3,48(sp)
    8001ea84:	e92a                	sd	a0,144(sp)
    8001ea86:	ed32                	sd	a2,152(sp)
    8001ea88:	f136                	sd	a3,160(sp)
    8001ea8a:	e994                	sd	a3,16(a1)
    8001ea8c:	e590                	sd	a2,8(a1)
    8001ea8e:	e188                	sd	a0,0(a1)
    }
    8001ea90:	a009                	j	8001ea92 <_ZN4core5alloc6layout6Layout6repeat17he5367bbab955aefbE+0xde>
    8001ea92:	60ee                	ld	ra,216(sp)
    8001ea94:	612d                	addi	sp,sp,224
    8001ea96:	8082                	ret

Disassembly of section .text._ZN4core5alloc6layout6Layout8dangling17h635528e7b5a013bbE:

000000008001ea98 <_ZN4core5alloc6layout6Layout8dangling17h635528e7b5a013bbE>:
    pub const fn dangling(&self) -> NonNull<u8> {
    8001ea98:	1101                	addi	sp,sp,-32
    8001ea9a:	ec06                	sd	ra,24(sp)
    8001ea9c:	e82a                	sd	a0,16(sp)
        unsafe { NonNull::new_unchecked(self.align() as *mut u8) }
    8001ea9e:	00000097          	auipc	ra,0x0
    8001eaa2:	efa080e7          	jalr	-262(ra) # 8001e998 <_ZN4core5alloc6layout6Layout5align17h05712eb17caed6beE>
    8001eaa6:	e42a                	sd	a0,8(sp)
    8001eaa8:	a009                	j	8001eaaa <_ZN4core5alloc6layout6Layout8dangling17h635528e7b5a013bbE+0x12>
    8001eaaa:	6522                	ld	a0,8(sp)
    8001eaac:	ffff1097          	auipc	ra,0xffff1
    8001eab0:	838080e7          	jalr	-1992(ra) # 8000f2e4 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h5ed8fa4a56812246E>
    8001eab4:	e02a                	sd	a0,0(sp)
    8001eab6:	a009                	j	8001eab8 <_ZN4core5alloc6layout6Layout8dangling17h635528e7b5a013bbE+0x20>
    }
    8001eab8:	6502                	ld	a0,0(sp)
    8001eaba:	60e2                	ld	ra,24(sp)
    8001eabc:	6105                	addi	sp,sp,32
    8001eabe:	8082                	ret

Disassembly of section .text._ZN6kernel6driver11virtio_disk4Disk4init17h491380cac5f59b4bE:

000000008001eac0 <_ZN6kernel6driver11virtio_disk4Disk4init17h491380cac5f59b4bE>:
    pub unsafe fn init(&mut self) {
    8001eac0:	dc010113          	addi	sp,sp,-576
    8001eac4:	22113c23          	sd	ra,568(sp)
    8001eac8:	e52a                	sd	a0,136(sp)
    8001eaca:	f7aa                	sd	a0,488(sp)
    8001eacc:	6585                	lui	a1,0x1
    8001eace:	35fd                	addiw	a1,a1,-1
        debug_assert_eq!((&self.desc as *const _ as usize) % PGSIZE, 0);
    8001ead0:	8d6d                	and	a0,a0,a1
    8001ead2:	f92a                	sd	a0,176(sp)
    8001ead4:	1910                	addi	a2,sp,176
    8001ead6:	e932                	sd	a2,144(sp)
    8001ead8:	f132                	sd	a2,160(sp)

000000008001eada <.LBB0_47>:
    8001eada:	00008597          	auipc	a1,0x8
    8001eade:	d9658593          	addi	a1,a1,-618 # 80026870 <.L__unnamed_6+0xc8>
    8001eae2:	ed2e                	sd	a1,152(sp)
    8001eae4:	f52e                	sd	a1,168(sp)
    8001eae6:	fbb2                	sd	a2,496(sp)
    8001eae8:	ffae                	sd	a1,504(sp)
    8001eaea:	4581                	li	a1,0
    8001eaec:	02b50363          	beq	a0,a1,8001eb12 <.LBB0_48+0x14>
    8001eaf0:	a009                	j	8001eaf2 <.LBB0_47+0x18>
    8001eaf2:	666a                	ld	a2,152(sp)
    8001eaf4:	65ca                	ld	a1,144(sp)
    8001eaf6:	4501                	li	a0,0
    8001eaf8:	0aa10fa3          	sb	a0,191(sp)
    8001eafc:	e1aa                	sd	a0,192(sp)

000000008001eafe <.LBB0_48>:
    8001eafe:	0000d717          	auipc	a4,0xd
    8001eb02:	d4a70713          	addi	a4,a4,-694 # 8002b848 <.L__unnamed_2>
    8001eb06:	0194                	addi	a3,sp,192
    8001eb08:	00001097          	auipc	ra,0x1
    8001eb0c:	e9c080e7          	jalr	-356(ra) # 8001f9a4 <_ZN4core9panicking13assert_failed17h4e6d74c9d534b647E>
    8001eb10:	0000                	unimp
    8001eb12:	652a                	ld	a0,136(sp)
    8001eb14:	6585                	lui	a1,0x1
        debug_assert_eq!((&self.used as *const _ as usize) % PGSIZE, 0);
    8001eb16:	952e                	add	a0,a0,a1
    8001eb18:	35fd                	addiw	a1,a1,-1
    8001eb1a:	8d6d                	and	a0,a0,a1
    8001eb1c:	e22a                	sd	a0,256(sp)
    8001eb1e:	0210                	addi	a2,sp,256
    8001eb20:	fcb2                	sd	a2,120(sp)
    8001eb22:	f9b2                	sd	a2,240(sp)

000000008001eb24 <.LBB0_49>:
    8001eb24:	00008597          	auipc	a1,0x8
    8001eb28:	d4c58593          	addi	a1,a1,-692 # 80026870 <.L__unnamed_6+0xc8>
    8001eb2c:	e12e                	sd	a1,128(sp)
    8001eb2e:	fdae                	sd	a1,248(sp)
    8001eb30:	20c13023          	sd	a2,512(sp)
    8001eb34:	20b13423          	sd	a1,520(sp)
    8001eb38:	4581                	li	a1,0
    8001eb3a:	02b50363          	beq	a0,a1,8001eb60 <.LBB0_50+0x14>
    8001eb3e:	a009                	j	8001eb40 <.LBB0_49+0x1c>
    8001eb40:	660a                	ld	a2,128(sp)
    8001eb42:	75e6                	ld	a1,120(sp)
    8001eb44:	4501                	li	a0,0
    8001eb46:	10a107a3          	sb	a0,271(sp)
    8001eb4a:	ea2a                	sd	a0,272(sp)

000000008001eb4c <.LBB0_50>:
    8001eb4c:	0000d717          	auipc	a4,0xd
    8001eb50:	d1470713          	addi	a4,a4,-748 # 8002b860 <.L__unnamed_3>
    8001eb54:	0a14                	addi	a3,sp,272
    8001eb56:	00001097          	auipc	ra,0x1
    8001eb5a:	e4e080e7          	jalr	-434(ra) # 8001f9a4 <_ZN4core9panicking13assert_failed17h4e6d74c9d534b647E>
    8001eb5e:	0000                	unimp
    8001eb60:	652a                	ld	a0,136(sp)
    8001eb62:	6589                	lui	a1,0x2
        debug_assert_eq!((&self.free as *const _ as usize) % PGSIZE, 0);
    8001eb64:	952e                	add	a0,a0,a1
    8001eb66:	6585                	lui	a1,0x1
    8001eb68:	35fd                	addiw	a1,a1,-1
    8001eb6a:	8d6d                	and	a0,a0,a1
    8001eb6c:	eaaa                	sd	a0,336(sp)
    8001eb6e:	0a90                	addi	a2,sp,336
    8001eb70:	f4b2                	sd	a2,104(sp)
    8001eb72:	e2b2                	sd	a2,320(sp)

000000008001eb74 <.LBB0_51>:
    8001eb74:	00008597          	auipc	a1,0x8
    8001eb78:	cfc58593          	addi	a1,a1,-772 # 80026870 <.L__unnamed_6+0xc8>
    8001eb7c:	f8ae                	sd	a1,112(sp)
    8001eb7e:	e6ae                	sd	a1,328(sp)
    8001eb80:	20c13823          	sd	a2,528(sp)
    8001eb84:	20b13c23          	sd	a1,536(sp)
    8001eb88:	4581                	li	a1,0
    8001eb8a:	02b50363          	beq	a0,a1,8001ebb0 <.LBB0_52+0x14>
    8001eb8e:	a009                	j	8001eb90 <.LBB0_51+0x1c>
    8001eb90:	7646                	ld	a2,112(sp)
    8001eb92:	75a6                	ld	a1,104(sp)
    8001eb94:	4501                	li	a0,0
    8001eb96:	14a10fa3          	sb	a0,351(sp)
    8001eb9a:	f2aa                	sd	a0,352(sp)

000000008001eb9c <.LBB0_52>:
    8001eb9c:	0000d717          	auipc	a4,0xd
    8001eba0:	cdc70713          	addi	a4,a4,-804 # 8002b878 <.L__unnamed_4>
    8001eba4:	1294                	addi	a3,sp,352
    8001eba6:	00001097          	auipc	ra,0x1
    8001ebaa:	dfe080e7          	jalr	-514(ra) # 8001f9a4 <_ZN4core9panicking13assert_failed17h4e6d74c9d534b647E>
    8001ebae:	0000                	unimp
    8001ebb0:	4501                	li	a0,0
        if read(VIRTIO_MMIO_MAGIC_VALUE) != 0x74726976
    8001ebb2:	00001097          	auipc	ra,0x1
    8001ebb6:	924080e7          	jalr	-1756(ra) # 8001f4d6 <_ZN6kernel6driver11virtio_disk4read17h68d9cc1e57aa6089E>
    8001ebba:	f0aa                	sd	a0,96(sp)
    8001ebbc:	a8ad                	j	8001ec36 <.LBB0_52+0x9a>
    8001ebbe:	4505                	li	a0,1
    8001ebc0:	18a10aa3          	sb	a0,405(sp)
    8001ebc4:	a821                	j	8001ebdc <.LBB0_52+0x40>
    8001ebc6:	4501                	li	a0,0
    8001ebc8:	18a10aa3          	sb	a0,405(sp)
    8001ebcc:	a801                	j	8001ebdc <.LBB0_52+0x40>
    8001ebce:	4531                	li	a0,12
            || read(VIRTIO_MMIO_VENDOR_ID) != 0x554d4551
    8001ebd0:	00001097          	auipc	ra,0x1
    8001ebd4:	906080e7          	jalr	-1786(ra) # 8001f4d6 <_ZN6kernel6driver11virtio_disk4read17h68d9cc1e57aa6089E>
    8001ebd8:	ecaa                	sd	a0,88(sp)
    8001ebda:	a059                	j	8001ec60 <.LBB0_52+0xc4>
        if read(VIRTIO_MMIO_MAGIC_VALUE) != 0x74726976
    8001ebdc:	19514503          	lbu	a0,405(sp)
    8001ebe0:	8905                	andi	a0,a0,1
    8001ebe2:	e941                	bnez	a0,8001ec72 <.LBB0_53>
    8001ebe4:	a06d                	j	8001ec8e <.LBB0_54+0x14>
    8001ebe6:	4505                	li	a0,1
    8001ebe8:	18a10b23          	sb	a0,406(sp)
    8001ebec:	a821                	j	8001ec04 <.LBB0_52+0x68>
    8001ebee:	4501                	li	a0,0
    8001ebf0:	18a10b23          	sb	a0,406(sp)
    8001ebf4:	a801                	j	8001ec04 <.LBB0_52+0x68>
    8001ebf6:	4521                	li	a0,8
            || read(VIRTIO_MMIO_DEVICE_ID) != 2
    8001ebf8:	00001097          	auipc	ra,0x1
    8001ebfc:	8de080e7          	jalr	-1826(ra) # 8001f4d6 <_ZN6kernel6driver11virtio_disk4read17h68d9cc1e57aa6089E>
    8001ec00:	e8aa                	sd	a0,80(sp)
    8001ec02:	a889                	j	8001ec54 <.LBB0_52+0xb8>
        if read(VIRTIO_MMIO_MAGIC_VALUE) != 0x74726976
    8001ec04:	19614503          	lbu	a0,406(sp)
    8001ec08:	8905                	andi	a0,a0,1
    8001ec0a:	f955                	bnez	a0,8001ebbe <.LBB0_52+0x22>
    8001ec0c:	b7c9                	j	8001ebce <.LBB0_52+0x32>
    8001ec0e:	4505                	li	a0,1
    8001ec10:	18a10ba3          	sb	a0,407(sp)
    8001ec14:	a821                	j	8001ec2c <.LBB0_52+0x90>
    8001ec16:	4501                	li	a0,0
    8001ec18:	18a10ba3          	sb	a0,407(sp)
    8001ec1c:	a801                	j	8001ec2c <.LBB0_52+0x90>
    8001ec1e:	4511                	li	a0,4
            || read(VIRTIO_MMIO_VERSION) != 1
    8001ec20:	00001097          	auipc	ra,0x1
    8001ec24:	8b6080e7          	jalr	-1866(ra) # 8001f4d6 <_ZN6kernel6driver11virtio_disk4read17h68d9cc1e57aa6089E>
    8001ec28:	e4aa                	sd	a0,72(sp)
    8001ec2a:	a839                	j	8001ec48 <.LBB0_52+0xac>
        if read(VIRTIO_MMIO_MAGIC_VALUE) != 0x74726976
    8001ec2c:	19714503          	lbu	a0,407(sp)
    8001ec30:	8905                	andi	a0,a0,1
    8001ec32:	f955                	bnez	a0,8001ebe6 <.LBB0_52+0x4a>
    8001ec34:	b7c9                	j	8001ebf6 <.LBB0_52+0x5a>
    8001ec36:	7506                	ld	a0,96(sp)
    8001ec38:	2501                	sext.w	a0,a0
    8001ec3a:	747275b7          	lui	a1,0x74727
    8001ec3e:	9765859b          	addiw	a1,a1,-1674
    8001ec42:	fcb50ee3          	beq	a0,a1,8001ec1e <.LBB0_52+0x82>
    8001ec46:	b7e1                	j	8001ec0e <.LBB0_52+0x72>
    8001ec48:	6526                	ld	a0,72(sp)
    8001ec4a:	2501                	sext.w	a0,a0
    8001ec4c:	4585                	li	a1,1
    8001ec4e:	fcb504e3          	beq	a0,a1,8001ec16 <.LBB0_52+0x7a>
    8001ec52:	bf75                	j	8001ec0e <.LBB0_52+0x72>
    8001ec54:	6546                	ld	a0,80(sp)
    8001ec56:	2501                	sext.w	a0,a0
    8001ec58:	4589                	li	a1,2
    8001ec5a:	f8b50ae3          	beq	a0,a1,8001ebee <.LBB0_52+0x52>
    8001ec5e:	b761                	j	8001ebe6 <.LBB0_52+0x4a>
    8001ec60:	6566                	ld	a0,88(sp)
    8001ec62:	2501                	sext.w	a0,a0
    8001ec64:	554d45b7          	lui	a1,0x554d4
    8001ec68:	5515859b          	addiw	a1,a1,1361
    8001ec6c:	f4b50de3          	beq	a0,a1,8001ebc6 <.LBB0_52+0x2a>
    8001ec70:	b7b9                	j	8001ebbe <.LBB0_52+0x22>

000000008001ec72 <.LBB0_53>:
            panic!("could not find virtio disk");
    8001ec72:	0000d517          	auipc	a0,0xd
    8001ec76:	c1e50513          	addi	a0,a0,-994 # 8002b890 <.L__unnamed_5>

000000008001ec7a <.LBB0_54>:
    8001ec7a:	0000d617          	auipc	a2,0xd
    8001ec7e:	c3660613          	addi	a2,a2,-970 # 8002b8b0 <.L__unnamed_6>
    8001ec82:	45e9                	li	a1,26
    8001ec84:	00003097          	auipc	ra,0x3
    8001ec88:	5f2080e7          	jalr	1522(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8001ec8c:	0000                	unimp
    8001ec8e:	4585                	li	a1,1
        status |= VIRTIO_CONFIG_S_ACKNOWLEDGE;
    8001ec90:	18b12c23          	sw	a1,408(sp)
    8001ec94:	07000513          	li	a0,112
        write(VIRTIO_MMIO_STATUS, status);
    8001ec98:	00001097          	auipc	ra,0x1
    8001ec9c:	898080e7          	jalr	-1896(ra) # 8001f530 <_ZN6kernel6driver11virtio_disk5write17hf82e2458568dd21bE>
    8001eca0:	a009                	j	8001eca2 <.LBB0_54+0x28>
        status |= VIRTIO_CONFIG_S_DRIVER;
    8001eca2:	19812503          	lw	a0,408(sp)
    8001eca6:	00256593          	ori	a1,a0,2
    8001ecaa:	18b12c23          	sw	a1,408(sp)
    8001ecae:	07000513          	li	a0,112
        write(VIRTIO_MMIO_STATUS, status);
    8001ecb2:	00001097          	auipc	ra,0x1
    8001ecb6:	87e080e7          	jalr	-1922(ra) # 8001f530 <_ZN6kernel6driver11virtio_disk5write17hf82e2458568dd21bE>
    8001ecba:	a009                	j	8001ecbc <.LBB0_54+0x42>
    8001ecbc:	4541                	li	a0,16
        let mut features: u32 = read(VIRTIO_MMIO_DEVICE_FEATURES);
    8001ecbe:	00001097          	auipc	ra,0x1
    8001ecc2:	818080e7          	jalr	-2024(ra) # 8001f4d6 <_ZN6kernel6driver11virtio_disk4read17h68d9cc1e57aa6089E>
    8001ecc6:	18a12e23          	sw	a0,412(sp)
    8001ecca:	a009                	j	8001eccc <.LBB0_54+0x52>
        features &= !(1u32 << VIRTIO_BLK_F_RO);
    8001eccc:	19c12503          	lw	a0,412(sp)
    8001ecd0:	c7ffe5b7          	lui	a1,0xc7ffe
    8001ecd4:	75f5859b          	addiw	a1,a1,1887
        features &= !(1u32 << VIRTIO_RING_F_INDIRECT_DESC);
    8001ecd8:	8de9                	and	a1,a1,a0
    8001ecda:	18b12e23          	sw	a1,412(sp)
    8001ecde:	02000513          	li	a0,32
        write(VIRTIO_MMIO_DRIVER_FEATURES, features);
    8001ece2:	00001097          	auipc	ra,0x1
    8001ece6:	84e080e7          	jalr	-1970(ra) # 8001f530 <_ZN6kernel6driver11virtio_disk5write17hf82e2458568dd21bE>
    8001ecea:	a009                	j	8001ecec <.LBB0_54+0x72>
        status |= VIRTIO_CONFIG_S_FEATURES_OK;
    8001ecec:	19812503          	lw	a0,408(sp)
    8001ecf0:	00856593          	ori	a1,a0,8
    8001ecf4:	18b12c23          	sw	a1,408(sp)
    8001ecf8:	07000513          	li	a0,112
        write(VIRTIO_MMIO_STATUS, status);
    8001ecfc:	00001097          	auipc	ra,0x1
    8001ed00:	834080e7          	jalr	-1996(ra) # 8001f530 <_ZN6kernel6driver11virtio_disk5write17hf82e2458568dd21bE>
    8001ed04:	a009                	j	8001ed06 <.LBB0_54+0x8c>
        status |= VIRTIO_CONFIG_S_DRIVER_OK;
    8001ed06:	19812503          	lw	a0,408(sp)
    8001ed0a:	00456593          	ori	a1,a0,4
    8001ed0e:	18b12c23          	sw	a1,408(sp)
    8001ed12:	07000513          	li	a0,112
        write(VIRTIO_MMIO_STATUS, status);
    8001ed16:	00001097          	auipc	ra,0x1
    8001ed1a:	81a080e7          	jalr	-2022(ra) # 8001f530 <_ZN6kernel6driver11virtio_disk5write17hf82e2458568dd21bE>
    8001ed1e:	a009                	j	8001ed20 <.LBB0_54+0xa6>
    8001ed20:	02800513          	li	a0,40
    8001ed24:	6585                	lui	a1,0x1
        write(VIRTIO_MMIO_GUEST_PAGE_SIZE, PGSIZE as u32);
    8001ed26:	00001097          	auipc	ra,0x1
    8001ed2a:	80a080e7          	jalr	-2038(ra) # 8001f530 <_ZN6kernel6driver11virtio_disk5write17hf82e2458568dd21bE>
    8001ed2e:	a009                	j	8001ed30 <.LBB0_54+0xb6>
    8001ed30:	03000513          	li	a0,48
    8001ed34:	4581                	li	a1,0
        write(VIRTIO_MMIO_QUEUE_SEL, 0);
    8001ed36:	00000097          	auipc	ra,0x0
    8001ed3a:	7fa080e7          	jalr	2042(ra) # 8001f530 <_ZN6kernel6driver11virtio_disk5write17hf82e2458568dd21bE>
    8001ed3e:	a009                	j	8001ed40 <.LBB0_54+0xc6>
    8001ed40:	03400513          	li	a0,52
        let max = read(VIRTIO_MMIO_QUEUE_NUM_MAX);
    8001ed44:	00000097          	auipc	ra,0x0
    8001ed48:	792080e7          	jalr	1938(ra) # 8001f4d6 <_ZN6kernel6driver11virtio_disk4read17h68d9cc1e57aa6089E>
    8001ed4c:	85aa                	mv	a1,a0
    8001ed4e:	e0ae                	sd	a1,64(sp)
    8001ed50:	22a12223          	sw	a0,548(sp)
    8001ed54:	a009                	j	8001ed56 <.LBB0_54+0xdc>
        if max == 0 {
    8001ed56:	6506                	ld	a0,64(sp)
    8001ed58:	2501                	sext.w	a0,a0
    8001ed5a:	4581                	li	a1,0
    8001ed5c:	02b51163          	bne	a0,a1,8001ed7e <.LBB0_56+0x14>
    8001ed60:	a009                	j	8001ed62 <.LBB0_55>

000000008001ed62 <.LBB0_55>:
            panic!("virtio disk has no queue 0");
    8001ed62:	0000d517          	auipc	a0,0xd
    8001ed66:	bce50513          	addi	a0,a0,-1074 # 8002b930 <.L__unnamed_7>

000000008001ed6a <.LBB0_56>:
    8001ed6a:	0000d617          	auipc	a2,0xd
    8001ed6e:	be660613          	addi	a2,a2,-1050 # 8002b950 <.L__unnamed_8>
    8001ed72:	45e9                	li	a1,26
    8001ed74:	00003097          	auipc	ra,0x3
    8001ed78:	502080e7          	jalr	1282(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8001ed7c:	0000                	unimp
        if max < NUM as u32 {
    8001ed7e:	6506                	ld	a0,64(sp)
    8001ed80:	0005059b          	sext.w	a1,a0
    8001ed84:	451d                	li	a0,7
    8001ed86:	02b56563          	bltu	a0,a1,8001edb0 <.LBB0_58+0x16>
    8001ed8a:	a009                	j	8001ed8c <.LBB0_57>

000000008001ed8c <.LBB0_57>:
            panic!("virtio disk max queue short than NUM={}", NUM);
    8001ed8c:	00008517          	auipc	a0,0x8
    8001ed90:	a9c50513          	addi	a0,a0,-1380 # 80026828 <.L__unnamed_6+0x80>
    8001ed94:	f3aa                	sd	a0,480(sp)
    8001ed96:	22a13423          	sd	a0,552(sp)

000000008001ed9a <.LBB0_58>:
    8001ed9a:	00006597          	auipc	a1,0x6
    8001ed9e:	b6858593          	addi	a1,a1,-1176 # 80024902 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h9c6c4af1578f7c29E>
    8001eda2:	00001097          	auipc	ra,0x1
    8001eda6:	8fe080e7          	jalr	-1794(ra) # 8001f6a0 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    8001edaa:	f82a                	sd	a0,48(sp)
    8001edac:	fc2e                	sd	a1,56(sp)
    8001edae:	a809                	j	8001edc0 <.LBB0_58+0x26>
    8001edb0:	03800513          	li	a0,56
    8001edb4:	45a1                	li	a1,8
        write(VIRTIO_MMIO_QUEUE_NUM, NUM as u32);
    8001edb6:	00000097          	auipc	ra,0x0
    8001edba:	77a080e7          	jalr	1914(ra) # 8001f530 <_ZN6kernel6driver11virtio_disk5write17hf82e2458568dd21bE>
    8001edbe:	a825                	j	8001edf6 <.LBB0_60+0x14>
            panic!("virtio disk max queue short than NUM={}", NUM);
    8001edc0:	7562                	ld	a0,56(sp)
    8001edc2:	75c2                	ld	a1,48(sp)
    8001edc4:	ebae                	sd	a1,464(sp)
    8001edc6:	efaa                	sd	a0,472(sp)

000000008001edc8 <.LBB0_59>:
    8001edc8:	0000d597          	auipc	a1,0xd
    8001edcc:	b2858593          	addi	a1,a1,-1240 # 8002b8f0 <.L__unnamed_10>
    8001edd0:	1308                	addi	a0,sp,416
    8001edd2:	0b94                	addi	a3,sp,464
    8001edd4:	4705                	li	a4,1
    8001edd6:	863a                	mv	a2,a4
    8001edd8:	fffe6097          	auipc	ra,0xfffe6
    8001eddc:	692080e7          	jalr	1682(ra) # 8000546a <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8001ede0:	a009                	j	8001ede2 <.LBB0_60>

000000008001ede2 <.LBB0_60>:
    8001ede2:	0000d597          	auipc	a1,0xd
    8001ede6:	b1e58593          	addi	a1,a1,-1250 # 8002b900 <.L__unnamed_11>
    8001edea:	1308                	addi	a0,sp,416
    8001edec:	00003097          	auipc	ra,0x3
    8001edf0:	4f6080e7          	jalr	1270(ra) # 800222e2 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
    8001edf4:	0000                	unimp
        let pfn: usize = (self as *const Disk as usize) >> PGSHIFT;
    8001edf6:	652a                	ld	a0,136(sp)
    8001edf8:	8131                	srli	a0,a0,0xc
    8001edfa:	f42a                	sd	a0,40(sp)
    8001edfc:	a009                	j	8001edfe <.LBB0_60+0x1c>
    8001edfe:	7522                	ld	a0,40(sp)
    8001ee00:	22a13823          	sd	a0,560(sp)
        write(VIRTIO_MMIO_QUEUE_PFN, u32::try_from(pfn).unwrap());
    8001ee04:	fffff097          	auipc	ra,0xfffff
    8001ee08:	600080e7          	jalr	1536(ra) # 8001e404 <_ZN4core7convert3num18ptr_try_from_impls69_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u32$GT$8try_from17hf11680289e05cb5fE>
    8001ee0c:	ec2a                	sd	a0,24(sp)
    8001ee0e:	f02e                	sd	a1,32(sp)
    8001ee10:	a009                	j	8001ee12 <.LBB0_60+0x30>
    8001ee12:	7582                	ld	a1,32(sp)
    8001ee14:	6562                	ld	a0,24(sp)

000000008001ee16 <.LBB0_61>:
    8001ee16:	0000d617          	auipc	a2,0xd
    8001ee1a:	b0260613          	addi	a2,a2,-1278 # 8002b918 <.L__unnamed_12>
    8001ee1e:	fffee097          	auipc	ra,0xfffee
    8001ee22:	fc0080e7          	jalr	-64(ra) # 8000cdde <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h07a2a3bbe53a0b92E>
    8001ee26:	e82a                	sd	a0,16(sp)
    8001ee28:	a009                	j	8001ee2a <.LBB0_61+0x14>
    8001ee2a:	65c2                	ld	a1,16(sp)
    8001ee2c:	04000513          	li	a0,64
    8001ee30:	00000097          	auipc	ra,0x0
    8001ee34:	700080e7          	jalr	1792(ra) # 8001f530 <_ZN6kernel6driver11virtio_disk5write17hf82e2458568dd21bE>
    8001ee38:	a009                	j	8001ee3a <.LBB0_61+0x24>
    8001ee3a:	652a                	ld	a0,136(sp)
    8001ee3c:	6589                	lui	a1,0x2
        self.free.iter_mut().for_each(|f| *f = true);
    8001ee3e:	952e                	add	a0,a0,a1
    8001ee40:	45a1                	li	a1,8
    8001ee42:	00000097          	auipc	ra,0x0
    8001ee46:	7f8080e7          	jalr	2040(ra) # 8001f63a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h847ff5bce17a319bE>
    8001ee4a:	e02a                	sd	a0,0(sp)
    8001ee4c:	e42e                	sd	a1,8(sp)
    8001ee4e:	a009                	j	8001ee50 <.LBB0_61+0x3a>
    8001ee50:	65a2                	ld	a1,8(sp)
    8001ee52:	6502                	ld	a0,0(sp)
    8001ee54:	fffec097          	auipc	ra,0xfffec
    8001ee58:	67e080e7          	jalr	1662(ra) # 8000b4d2 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8for_each17hd302585b5e4cac20E>
    8001ee5c:	a009                	j	8001ee5e <.LBB0_61+0x48>
    }
    8001ee5e:	23813083          	ld	ra,568(sp)
    8001ee62:	24010113          	addi	sp,sp,576
    8001ee66:	8082                	ret

Disassembly of section .text._ZN6kernel6driver11virtio_disk4Disk11alloc3_desc17h72dc3c5e71ae6e49E:

000000008001ee68 <_ZN6kernel6driver11virtio_disk4Disk11alloc3_desc17h72dc3c5e71ae6e49E>:
    fn alloc3_desc(&mut self, idx: &mut [usize; 3]) -> bool {
    8001ee68:	716d                	addi	sp,sp,-272
    8001ee6a:	e606                	sd	ra,264(sp)
    8001ee6c:	f82e                	sd	a1,48(sp)
    8001ee6e:	85aa                	mv	a1,a0
    8001ee70:	7542                	ld	a0,48(sp)
    8001ee72:	fc2e                	sd	a1,56(sp)
    8001ee74:	e1ae                	sd	a1,192(sp)
    8001ee76:	e5aa                	sd	a0,200(sp)
    8001ee78:	458d                	li	a1,3
        for i in 0..idx.len() {
    8001ee7a:	00000097          	auipc	ra,0x0
    8001ee7e:	76e080e7          	jalr	1902(ra) # 8001f5e8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hc17413639ca00bf8E>
    8001ee82:	e0aa                	sd	a0,64(sp)
    8001ee84:	a009                	j	8001ee86 <_ZN6kernel6driver11virtio_disk4Disk11alloc3_desc17h72dc3c5e71ae6e49E+0x1e>
    8001ee86:	6586                	ld	a1,64(sp)
    8001ee88:	4501                	li	a0,0
    8001ee8a:	e8aa                	sd	a0,80(sp)
    8001ee8c:	ecae                	sd	a1,88(sp)
    8001ee8e:	00001097          	auipc	ra,0x1
    8001ee92:	ab4080e7          	jalr	-1356(ra) # 8001f942 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he0a8d93712e5493bE>
    8001ee96:	f02a                	sd	a0,32(sp)
    8001ee98:	f42e                	sd	a1,40(sp)
    8001ee9a:	a009                	j	8001ee9c <_ZN6kernel6driver11virtio_disk4Disk11alloc3_desc17h72dc3c5e71ae6e49E+0x34>
    8001ee9c:	7522                	ld	a0,40(sp)
    8001ee9e:	7582                	ld	a1,32(sp)
    8001eea0:	f0ae                	sd	a1,96(sp)
    8001eea2:	f4aa                	sd	a0,104(sp)
    8001eea4:	a009                	j	8001eea6 <_ZN6kernel6driver11virtio_disk4Disk11alloc3_desc17h72dc3c5e71ae6e49E+0x3e>
    8001eea6:	1088                	addi	a0,sp,96
    8001eea8:	00001097          	auipc	ra,0x1
    8001eeac:	a2c080e7          	jalr	-1492(ra) # 8001f8d4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE>
    8001eeb0:	f8aa                	sd	a0,112(sp)
    8001eeb2:	fcae                	sd	a1,120(sp)
    8001eeb4:	a009                	j	8001eeb6 <_ZN6kernel6driver11virtio_disk4Disk11alloc3_desc17h72dc3c5e71ae6e49E+0x4e>
    8001eeb6:	7546                	ld	a0,112(sp)
    8001eeb8:	4581                	li	a1,0
    8001eeba:	00b50463          	beq	a0,a1,8001eec2 <_ZN6kernel6driver11virtio_disk4Disk11alloc3_desc17h72dc3c5e71ae6e49E+0x5a>
    8001eebe:	a009                	j	8001eec0 <_ZN6kernel6driver11virtio_disk4Disk11alloc3_desc17h72dc3c5e71ae6e49E+0x58>
    8001eec0:	a031                	j	8001eecc <_ZN6kernel6driver11virtio_disk4Disk11alloc3_desc17h72dc3c5e71ae6e49E+0x64>
    8001eec2:	4505                	li	a0,1
        true
    8001eec4:	04a107a3          	sb	a0,79(sp)
    }
    8001eec8:	a05d                	j	8001ef6e <_ZN6kernel6driver11virtio_disk4Disk11alloc3_desc17h72dc3c5e71ae6e49E+0x106>
        for i in 0..idx.len() {
    8001eeca:	0000                	unimp
    8001eecc:	7562                	ld	a0,56(sp)
    8001eece:	75e6                	ld	a1,120(sp)
    8001eed0:	ec2e                	sd	a1,24(sp)
    8001eed2:	e9ae                	sd	a1,208(sp)
    8001eed4:	edae                	sd	a1,216(sp)
    8001eed6:	f1ae                	sd	a1,224(sp)
            match self.alloc_desc() {
    8001eed8:	00000097          	auipc	ra,0x0
    8001eedc:	0b6080e7          	jalr	182(ra) # 8001ef8e <_ZN6kernel6driver11virtio_disk4Disk10alloc_desc17h3772a128eda7246cE>
    8001eee0:	e12a                	sd	a0,128(sp)
    8001eee2:	e52e                	sd	a1,136(sp)
    8001eee4:	a009                	j	8001eee6 <_ZN6kernel6driver11virtio_disk4Disk11alloc3_desc17h72dc3c5e71ae6e49E+0x7e>
                Some(ix) => idx[i] = ix,
    8001eee6:	650a                	ld	a0,128(sp)
    8001eee8:	4581                	li	a1,0
    8001eeea:	00b50463          	beq	a0,a1,8001eef2 <_ZN6kernel6driver11virtio_disk4Disk11alloc3_desc17h72dc3c5e71ae6e49E+0x8a>
    8001eeee:	a009                	j	8001eef0 <_ZN6kernel6driver11virtio_disk4Disk11alloc3_desc17h72dc3c5e71ae6e49E+0x88>
    8001eef0:	a829                	j	8001ef0a <_ZN6kernel6driver11virtio_disk4Disk11alloc3_desc17h72dc3c5e71ae6e49E+0xa2>
    8001eef2:	65e2                	ld	a1,24(sp)
    8001eef4:	4501                	li	a0,0
                    for j in 0..i {
    8001eef6:	e92a                	sd	a0,144(sp)
    8001eef8:	ed2e                	sd	a1,152(sp)
    8001eefa:	00001097          	auipc	ra,0x1
    8001eefe:	a48080e7          	jalr	-1464(ra) # 8001f942 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he0a8d93712e5493bE>
    8001ef02:	e42a                	sd	a0,8(sp)
    8001ef04:	e82e                	sd	a1,16(sp)
    8001ef06:	a00d                	j	8001ef28 <_ZN6kernel6driver11virtio_disk4Disk11alloc3_desc17h72dc3c5e71ae6e49E+0xc0>
            match self.alloc_desc() {
    8001ef08:	0000                	unimp
                Some(ix) => idx[i] = ix,
    8001ef0a:	65e2                	ld	a1,24(sp)
    8001ef0c:	652a                	ld	a0,136(sp)
    8001ef0e:	e02a                	sd	a0,0(sp)
    8001ef10:	f5aa                	sd	a0,232(sp)
    8001ef12:	4509                	li	a0,2
    8001ef14:	06b56263          	bltu	a0,a1,8001ef78 <_ZN6kernel6driver11virtio_disk4Disk11alloc3_desc17h72dc3c5e71ae6e49E+0x110>
    8001ef18:	a009                	j	8001ef1a <_ZN6kernel6driver11virtio_disk4Disk11alloc3_desc17h72dc3c5e71ae6e49E+0xb2>
    8001ef1a:	6502                	ld	a0,0(sp)
    8001ef1c:	75c2                	ld	a1,48(sp)
    8001ef1e:	6662                	ld	a2,24(sp)
    8001ef20:	060e                	slli	a2,a2,0x3
    8001ef22:	95b2                	add	a1,a1,a2
    8001ef24:	e188                	sd	a0,0(a1)
        for i in 0..idx.len() {
    8001ef26:	b741                	j	8001eea6 <_ZN6kernel6driver11virtio_disk4Disk11alloc3_desc17h72dc3c5e71ae6e49E+0x3e>
                    for j in 0..i {
    8001ef28:	6542                	ld	a0,16(sp)
    8001ef2a:	65a2                	ld	a1,8(sp)
    8001ef2c:	f12e                	sd	a1,160(sp)
    8001ef2e:	f52a                	sd	a0,168(sp)
    8001ef30:	a009                	j	8001ef32 <_ZN6kernel6driver11virtio_disk4Disk11alloc3_desc17h72dc3c5e71ae6e49E+0xca>
    8001ef32:	1108                	addi	a0,sp,160
    8001ef34:	00001097          	auipc	ra,0x1
    8001ef38:	9a0080e7          	jalr	-1632(ra) # 8001f8d4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE>
    8001ef3c:	f92a                	sd	a0,176(sp)
    8001ef3e:	fd2e                	sd	a1,184(sp)
    8001ef40:	a009                	j	8001ef42 <_ZN6kernel6driver11virtio_disk4Disk11alloc3_desc17h72dc3c5e71ae6e49E+0xda>
    8001ef42:	754a                	ld	a0,176(sp)
    8001ef44:	4581                	li	a1,0
    8001ef46:	00b50463          	beq	a0,a1,8001ef4e <_ZN6kernel6driver11virtio_disk4Disk11alloc3_desc17h72dc3c5e71ae6e49E+0xe6>
    8001ef4a:	a009                	j	8001ef4c <_ZN6kernel6driver11virtio_disk4Disk11alloc3_desc17h72dc3c5e71ae6e49E+0xe4>
    8001ef4c:	a031                	j	8001ef58 <_ZN6kernel6driver11virtio_disk4Disk11alloc3_desc17h72dc3c5e71ae6e49E+0xf0>
    8001ef4e:	4501                	li	a0,0
                    return false;
    8001ef50:	04a107a3          	sb	a0,79(sp)
    }
    8001ef54:	a829                	j	8001ef6e <_ZN6kernel6driver11virtio_disk4Disk11alloc3_desc17h72dc3c5e71ae6e49E+0x106>
                    for j in 0..i {
    8001ef56:	0000                	unimp
    8001ef58:	7562                	ld	a0,56(sp)
    8001ef5a:	75ea                	ld	a1,184(sp)
    8001ef5c:	f9ae                	sd	a1,240(sp)
    8001ef5e:	fdae                	sd	a1,248(sp)
    8001ef60:	e22e                	sd	a1,256(sp)
                        self.free_desc(j);
    8001ef62:	00000097          	auipc	ra,0x0
    8001ef66:	14e080e7          	jalr	334(ra) # 8001f0b0 <_ZN6kernel6driver11virtio_disk4Disk9free_desc17h82d1b4d3b146e1f5E>
    8001ef6a:	a009                	j	8001ef6c <_ZN6kernel6driver11virtio_disk4Disk11alloc3_desc17h72dc3c5e71ae6e49E+0x104>
                    for j in 0..i {
    8001ef6c:	b7d9                	j	8001ef32 <_ZN6kernel6driver11virtio_disk4Disk11alloc3_desc17h72dc3c5e71ae6e49E+0xca>
    }
    8001ef6e:	04f14503          	lbu	a0,79(sp)
    8001ef72:	60b2                	ld	ra,264(sp)
    8001ef74:	6151                	addi	sp,sp,272
    8001ef76:	8082                	ret
                Some(ix) => idx[i] = ix,
    8001ef78:	6562                	ld	a0,24(sp)

000000008001ef7a <.LBB1_25>:
    8001ef7a:	0000d617          	auipc	a2,0xd
    8001ef7e:	9ee60613          	addi	a2,a2,-1554 # 8002b968 <.L__unnamed_13>
    8001ef82:	458d                	li	a1,3
    8001ef84:	00003097          	auipc	ra,0x3
    8001ef88:	31e080e7          	jalr	798(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel6driver11virtio_disk4Disk10alloc_desc17h3772a128eda7246cE:

000000008001ef8e <_ZN6kernel6driver11virtio_disk4Disk10alloc_desc17h3772a128eda7246cE>:
    fn alloc_desc(&mut self) -> Option<usize> {
    8001ef8e:	7111                	addi	sp,sp,-256
    8001ef90:	fd86                	sd	ra,248(sp)
    8001ef92:	f82a                	sd	a0,48(sp)
    8001ef94:	e5aa                	sd	a0,200(sp)
    8001ef96:	6589                	lui	a1,0x2
        debug_assert_eq!(self.free.len(), NUM);
    8001ef98:	952e                	add	a0,a0,a1
    8001ef9a:	45a1                	li	a1,8
    8001ef9c:	00000097          	auipc	ra,0x0
    8001efa0:	610080e7          	jalr	1552(ra) # 8001f5ac <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h040db97216f8ec10E>
    8001efa4:	ecaa                	sd	a0,88(sp)
    8001efa6:	a009                	j	8001efa8 <_ZN6kernel6driver11virtio_disk4Disk10alloc_desc17h3772a128eda7246cE+0x1a>
    8001efa8:	08ac                	addi	a1,sp,88
    8001efaa:	f02e                	sd	a1,32(sp)
    8001efac:	e4ae                	sd	a1,72(sp)

000000008001efae <.LBB2_18>:
    8001efae:	00008517          	auipc	a0,0x8
    8001efb2:	87a50513          	addi	a0,a0,-1926 # 80026828 <.L__unnamed_6+0x80>
    8001efb6:	f42a                	sd	a0,40(sp)
    8001efb8:	e8aa                	sd	a0,80(sp)
    8001efba:	e9ae                	sd	a1,208(sp)
    8001efbc:	edaa                	sd	a0,216(sp)
    8001efbe:	6566                	ld	a0,88(sp)
    8001efc0:	45a1                	li	a1,8
    8001efc2:	02b50363          	beq	a0,a1,8001efe8 <.LBB2_19+0x14>
    8001efc6:	a009                	j	8001efc8 <.LBB2_18+0x1a>
    8001efc8:	7622                	ld	a2,40(sp)
    8001efca:	7582                	ld	a1,32(sp)
    8001efcc:	4501                	li	a0,0
    8001efce:	06a103a3          	sb	a0,103(sp)
    8001efd2:	f4aa                	sd	a0,104(sp)

000000008001efd4 <.LBB2_19>:
    8001efd4:	0000d717          	auipc	a4,0xd
    8001efd8:	9ac70713          	addi	a4,a4,-1620 # 8002b980 <.L__unnamed_14>
    8001efdc:	10b4                	addi	a3,sp,104
    8001efde:	00001097          	auipc	ra,0x1
    8001efe2:	9c6080e7          	jalr	-1594(ra) # 8001f9a4 <_ZN4core9panicking13assert_failed17h4e6d74c9d534b647E>
    8001efe6:	0000                	unimp
    8001efe8:	4501                	li	a0,0
        for i in 0..NUM {
    8001efea:	ed2a                	sd	a0,152(sp)
    8001efec:	45a1                	li	a1,8
    8001efee:	f12e                	sd	a1,160(sp)
    8001eff0:	00001097          	auipc	ra,0x1
    8001eff4:	952080e7          	jalr	-1710(ra) # 8001f942 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he0a8d93712e5493bE>
    8001eff8:	e82a                	sd	a0,16(sp)
    8001effa:	ec2e                	sd	a1,24(sp)
    8001effc:	a009                	j	8001effe <.LBB2_19+0x2a>
    8001effe:	6562                	ld	a0,24(sp)
    8001f000:	65c2                	ld	a1,16(sp)
    8001f002:	f52e                	sd	a1,168(sp)
    8001f004:	f92a                	sd	a0,176(sp)
    8001f006:	a009                	j	8001f008 <.LBB2_19+0x34>
    8001f008:	1128                	addi	a0,sp,168
    8001f00a:	00001097          	auipc	ra,0x1
    8001f00e:	8ca080e7          	jalr	-1846(ra) # 8001f8d4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE>
    8001f012:	fd2a                	sd	a0,184(sp)
    8001f014:	e1ae                	sd	a1,192(sp)
    8001f016:	a009                	j	8001f018 <.LBB2_19+0x44>
    8001f018:	756a                	ld	a0,184(sp)
    8001f01a:	4581                	li	a1,0
    8001f01c:	00b50463          	beq	a0,a1,8001f024 <.LBB2_19+0x50>
    8001f020:	a009                	j	8001f022 <.LBB2_19+0x4e>
    8001f022:	a029                	j	8001f02c <.LBB2_19+0x58>
    8001f024:	4501                	li	a0,0
        None
    8001f026:	fc2a                	sd	a0,56(sp)
    }
    8001f028:	a889                	j	8001f07a <.LBB2_19+0xa6>
        for i in 0..NUM {
    8001f02a:	0000                	unimp
    8001f02c:	658e                	ld	a1,192(sp)
    8001f02e:	e42e                	sd	a1,8(sp)
    8001f030:	f1ae                	sd	a1,224(sp)
    8001f032:	f5ae                	sd	a1,232(sp)
    8001f034:	f9ae                	sd	a1,240(sp)
    8001f036:	451d                	li	a0,7
            if self.free[i] {
    8001f038:	04b56663          	bltu	a0,a1,8001f084 <.LBB2_19+0xb0>
    8001f03c:	a009                	j	8001f03e <.LBB2_19+0x6a>
    8001f03e:	7542                	ld	a0,48(sp)
    8001f040:	65a2                	ld	a1,8(sp)
    8001f042:	952e                	add	a0,a0,a1
    8001f044:	6589                	lui	a1,0x2
    8001f046:	952e                	add	a0,a0,a1
    8001f048:	00054503          	lbu	a0,0(a0)
    8001f04c:	8905                	andi	a0,a0,1
    8001f04e:	4581                	li	a1,0
    8001f050:	00b50863          	beq	a0,a1,8001f060 <.LBB2_19+0x8c>
    8001f054:	a009                	j	8001f056 <.LBB2_19+0x82>
    8001f056:	6522                	ld	a0,8(sp)
    8001f058:	45a1                	li	a1,8
                self.free[i] = false;
    8001f05a:	00b56463          	bltu	a0,a1,8001f062 <.LBB2_19+0x8e>
    8001f05e:	a835                	j	8001f09a <.LBB2_20+0x14>
        for i in 0..NUM {
    8001f060:	b765                	j	8001f008 <.LBB2_19+0x34>
                self.free[i] = false;
    8001f062:	6522                	ld	a0,8(sp)
    8001f064:	75c2                	ld	a1,48(sp)
    8001f066:	95aa                	add	a1,a1,a0
    8001f068:	6609                	lui	a2,0x2
    8001f06a:	962e                	add	a2,a2,a1
    8001f06c:	4581                	li	a1,0
    8001f06e:	00b60023          	sb	a1,0(a2) # 2000 <.Lline_table_start0+0x46f>
                return Some(i)
    8001f072:	e0aa                	sd	a0,64(sp)
    8001f074:	4505                	li	a0,1
    8001f076:	fc2a                	sd	a0,56(sp)
    }
    8001f078:	a009                	j	8001f07a <.LBB2_19+0xa6>
    8001f07a:	7562                	ld	a0,56(sp)
    8001f07c:	6586                	ld	a1,64(sp)
    8001f07e:	70ee                	ld	ra,248(sp)
    8001f080:	6111                	addi	sp,sp,256
    8001f082:	8082                	ret
            if self.free[i] {
    8001f084:	6522                	ld	a0,8(sp)

000000008001f086 <.LBB2_20>:
    8001f086:	0000d617          	auipc	a2,0xd
    8001f08a:	91260613          	addi	a2,a2,-1774 # 8002b998 <.L__unnamed_15>
    8001f08e:	45a1                	li	a1,8
    8001f090:	00003097          	auipc	ra,0x3
    8001f094:	212080e7          	jalr	530(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    8001f098:	0000                	unimp
                self.free[i] = false;
    8001f09a:	6522                	ld	a0,8(sp)

000000008001f09c <.LBB2_21>:
    8001f09c:	0000d617          	auipc	a2,0xd
    8001f0a0:	91460613          	addi	a2,a2,-1772 # 8002b9b0 <.L__unnamed_16>
    8001f0a4:	45a1                	li	a1,8
    8001f0a6:	00003097          	auipc	ra,0x3
    8001f0aa:	1fc080e7          	jalr	508(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel6driver11virtio_disk4Disk9free_desc17h82d1b4d3b146e1f5E:

000000008001f0b0 <_ZN6kernel6driver11virtio_disk4Disk9free_desc17h82d1b4d3b146e1f5E>:
    fn free_desc(&mut self, i: usize) {
    8001f0b0:	7179                	addi	sp,sp,-48
    8001f0b2:	f406                	sd	ra,40(sp)
    8001f0b4:	e02e                	sd	a1,0(sp)
    8001f0b6:	e42a                	sd	a0,8(sp)
    8001f0b8:	ec2a                	sd	a0,24(sp)
    8001f0ba:	f02e                	sd	a1,32(sp)
    8001f0bc:	4521                	li	a0,8
        if i >= NUM || self.free[i] {
    8001f0be:	00a5eb63          	bltu	a1,a0,8001f0d4 <_ZN6kernel6driver11virtio_disk4Disk9free_desc17h82d1b4d3b146e1f5E+0x24>
    8001f0c2:	a009                	j	8001f0c4 <_ZN6kernel6driver11virtio_disk4Disk9free_desc17h82d1b4d3b146e1f5E+0x14>
    8001f0c4:	4505                	li	a0,1
    8001f0c6:	00a10ba3          	sb	a0,23(sp)
    8001f0ca:	a811                	j	8001f0de <_ZN6kernel6driver11virtio_disk4Disk9free_desc17h82d1b4d3b146e1f5E+0x2e>
    8001f0cc:	4501                	li	a0,0
    8001f0ce:	00a10ba3          	sb	a0,23(sp)
    8001f0d2:	a031                	j	8001f0de <_ZN6kernel6driver11virtio_disk4Disk9free_desc17h82d1b4d3b146e1f5E+0x2e>
    8001f0d4:	6502                	ld	a0,0(sp)
    8001f0d6:	45a1                	li	a1,8
    8001f0d8:	00b56863          	bltu	a0,a1,8001f0e8 <_ZN6kernel6driver11virtio_disk4Disk9free_desc17h82d1b4d3b146e1f5E+0x38>
    8001f0dc:	a0f1                	j	8001f1a8 <.LBB3_22+0x18>
    8001f0de:	01714503          	lbu	a0,23(sp)
    8001f0e2:	8905                	andi	a0,a0,1
    8001f0e4:	ed01                	bnez	a0,8001f0fc <.LBB3_20>
    8001f0e6:	a80d                	j	8001f118 <.LBB3_21+0x14>
    8001f0e8:	6522                	ld	a0,8(sp)
    8001f0ea:	6582                	ld	a1,0(sp)
    8001f0ec:	952e                	add	a0,a0,a1
    8001f0ee:	6589                	lui	a1,0x2
    8001f0f0:	952e                	add	a0,a0,a1
    8001f0f2:	00054503          	lbu	a0,0(a0)
    8001f0f6:	8905                	andi	a0,a0,1
    8001f0f8:	f571                	bnez	a0,8001f0c4 <_ZN6kernel6driver11virtio_disk4Disk9free_desc17h82d1b4d3b146e1f5E+0x14>
    8001f0fa:	bfc9                	j	8001f0cc <_ZN6kernel6driver11virtio_disk4Disk9free_desc17h82d1b4d3b146e1f5E+0x1c>

000000008001f0fc <.LBB3_20>:
            panic!("desc index not correct");
    8001f0fc:	0000d517          	auipc	a0,0xd
    8001f100:	8e450513          	addi	a0,a0,-1820 # 8002b9e0 <.L__unnamed_17>

000000008001f104 <.LBB3_21>:
    8001f104:	0000d617          	auipc	a2,0xd
    8001f108:	8f460613          	addi	a2,a2,-1804 # 8002b9f8 <.L__unnamed_18>
    8001f10c:	45d9                	li	a1,22
    8001f10e:	00003097          	auipc	ra,0x3
    8001f112:	168080e7          	jalr	360(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8001f116:	0000                	unimp
    8001f118:	6582                	ld	a1,0(sp)
    8001f11a:	451d                	li	a0,7
        self.desc[i].addr = 0;
    8001f11c:	0ab56163          	bltu	a0,a1,8001f1be <.LBB3_23+0x14>
    8001f120:	a009                	j	8001f122 <.LBB3_21+0x1e>
    8001f122:	6582                	ld	a1,0(sp)
    8001f124:	6522                	ld	a0,8(sp)
    8001f126:	00459613          	slli	a2,a1,0x4
    8001f12a:	962a                	add	a2,a2,a0
    8001f12c:	4501                	li	a0,0
    8001f12e:	e208                	sd	a0,0(a2)
    8001f130:	451d                	li	a0,7
        self.desc[i].len = 0;
    8001f132:	0ab56163          	bltu	a0,a1,8001f1d4 <.LBB3_24+0x14>
    8001f136:	a009                	j	8001f138 <.LBB3_21+0x34>
    8001f138:	6582                	ld	a1,0(sp)
    8001f13a:	6522                	ld	a0,8(sp)
    8001f13c:	00459613          	slli	a2,a1,0x4
    8001f140:	962a                	add	a2,a2,a0
    8001f142:	4501                	li	a0,0
    8001f144:	c608                	sw	a0,8(a2)
    8001f146:	451d                	li	a0,7
        self.desc[i].flags = 0;
    8001f148:	0ab56163          	bltu	a0,a1,8001f1ea <.LBB3_25+0x14>
    8001f14c:	a009                	j	8001f14e <.LBB3_21+0x4a>
    8001f14e:	6582                	ld	a1,0(sp)
    8001f150:	6522                	ld	a0,8(sp)
    8001f152:	00459613          	slli	a2,a1,0x4
    8001f156:	962a                	add	a2,a2,a0
    8001f158:	4501                	li	a0,0
    8001f15a:	00a61623          	sh	a0,12(a2)
    8001f15e:	451d                	li	a0,7
        self.desc[i].next = 0;
    8001f160:	0ab56063          	bltu	a0,a1,8001f200 <.LBB3_26+0x14>
    8001f164:	a009                	j	8001f166 <.LBB3_21+0x62>
    8001f166:	6582                	ld	a1,0(sp)
    8001f168:	6522                	ld	a0,8(sp)
    8001f16a:	00459613          	slli	a2,a1,0x4
    8001f16e:	962a                	add	a2,a2,a0
    8001f170:	4501                	li	a0,0
    8001f172:	00a61723          	sh	a0,14(a2)
    8001f176:	451d                	li	a0,7
        self.free[i] = true;
    8001f178:	08b56f63          	bltu	a0,a1,8001f216 <.LBB3_27+0x14>
    8001f17c:	a009                	j	8001f17e <.LBB3_21+0x7a>
    8001f17e:	6502                	ld	a0,0(sp)
    8001f180:	65a2                	ld	a1,8(sp)
    8001f182:	6609                	lui	a2,0x2
    8001f184:	95b2                	add	a1,a1,a2
    8001f186:	00a58633          	add	a2,a1,a0
    8001f18a:	4505                	li	a0,1
    8001f18c:	00a60023          	sb	a0,0(a2) # 2000 <.Lline_table_start0+0x46f>

000000008001f190 <.LBB3_22>:
            PROC_MANAGER.wake_up(&self.free[0] as *const bool as usize);
    8001f190:	00038517          	auipc	a0,0x38
    8001f194:	41050513          	addi	a0,a0,1040 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    8001f198:	fffee097          	auipc	ra,0xfffee
    8001f19c:	768080e7          	jalr	1896(ra) # 8000d900 <_ZN6kernel7process7manager11ProcManager7wake_up17ha46b4d15ac07187bE>
    8001f1a0:	a009                	j	8001f1a2 <.LBB3_22+0x12>
    }
    8001f1a2:	70a2                	ld	ra,40(sp)
    8001f1a4:	6145                	addi	sp,sp,48
    8001f1a6:	8082                	ret
        if i >= NUM || self.free[i] {
    8001f1a8:	6502                	ld	a0,0(sp)

000000008001f1aa <.LBB3_23>:
    8001f1aa:	0000d617          	auipc	a2,0xd
    8001f1ae:	81e60613          	addi	a2,a2,-2018 # 8002b9c8 <.L__unnamed_19>
    8001f1b2:	45a1                	li	a1,8
    8001f1b4:	00003097          	auipc	ra,0x3
    8001f1b8:	0ee080e7          	jalr	238(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    8001f1bc:	0000                	unimp
        self.desc[i].addr = 0;
    8001f1be:	6502                	ld	a0,0(sp)

000000008001f1c0 <.LBB3_24>:
    8001f1c0:	0000d617          	auipc	a2,0xd
    8001f1c4:	85060613          	addi	a2,a2,-1968 # 8002ba10 <.L__unnamed_20>
    8001f1c8:	45a1                	li	a1,8
    8001f1ca:	00003097          	auipc	ra,0x3
    8001f1ce:	0d8080e7          	jalr	216(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    8001f1d2:	0000                	unimp
        self.desc[i].len = 0;
    8001f1d4:	6502                	ld	a0,0(sp)

000000008001f1d6 <.LBB3_25>:
    8001f1d6:	0000d617          	auipc	a2,0xd
    8001f1da:	85260613          	addi	a2,a2,-1966 # 8002ba28 <.L__unnamed_21>
    8001f1de:	45a1                	li	a1,8
    8001f1e0:	00003097          	auipc	ra,0x3
    8001f1e4:	0c2080e7          	jalr	194(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    8001f1e8:	0000                	unimp
        self.desc[i].flags = 0;
    8001f1ea:	6502                	ld	a0,0(sp)

000000008001f1ec <.LBB3_26>:
    8001f1ec:	0000d617          	auipc	a2,0xd
    8001f1f0:	85460613          	addi	a2,a2,-1964 # 8002ba40 <.L__unnamed_22>
    8001f1f4:	45a1                	li	a1,8
    8001f1f6:	00003097          	auipc	ra,0x3
    8001f1fa:	0ac080e7          	jalr	172(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    8001f1fe:	0000                	unimp
        self.desc[i].next = 0;
    8001f200:	6502                	ld	a0,0(sp)

000000008001f202 <.LBB3_27>:
    8001f202:	0000d617          	auipc	a2,0xd
    8001f206:	85660613          	addi	a2,a2,-1962 # 8002ba58 <.L__unnamed_23>
    8001f20a:	45a1                	li	a1,8
    8001f20c:	00003097          	auipc	ra,0x3
    8001f210:	096080e7          	jalr	150(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    8001f214:	0000                	unimp
        self.free[i] = true;
    8001f216:	6502                	ld	a0,0(sp)

000000008001f218 <.LBB3_28>:
    8001f218:	0000d617          	auipc	a2,0xd
    8001f21c:	85860613          	addi	a2,a2,-1960 # 8002ba70 <.L__unnamed_24>
    8001f220:	45a1                	li	a1,8
    8001f222:	00003097          	auipc	ra,0x3
    8001f226:	080080e7          	jalr	128(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel6driver11virtio_disk4Disk10free_chain17h88621e1c7ba36f26E:

000000008001f22c <_ZN6kernel6driver11virtio_disk4Disk10free_chain17h88621e1c7ba36f26E>:
    fn free_chain(&mut self, mut i: usize) {
    8001f22c:	715d                	addi	sp,sp,-80
    8001f22e:	e486                	sd	ra,72(sp)
    8001f230:	f42a                	sd	a0,40(sp)
    8001f232:	f82e                	sd	a1,48(sp)
    8001f234:	fc2a                	sd	a0,56(sp)
    8001f236:	a009                	j	8001f238 <_ZN6kernel6driver11virtio_disk4Disk10free_chain17h88621e1c7ba36f26E+0xc>
            let flag = self.desc[i].flags;
    8001f238:	75c2                	ld	a1,48(sp)
    8001f23a:	f02e                	sd	a1,32(sp)
    8001f23c:	451d                	li	a0,7
    8001f23e:	04b56d63          	bltu	a0,a1,8001f298 <_ZN6kernel6driver11virtio_disk4Disk10free_chain17h88621e1c7ba36f26E+0x6c>
    8001f242:	a009                	j	8001f244 <_ZN6kernel6driver11virtio_disk4Disk10free_chain17h88621e1c7ba36f26E+0x18>
    8001f244:	7522                	ld	a0,40(sp)
    8001f246:	7582                	ld	a1,32(sp)
    8001f248:	0592                	slli	a1,a1,0x4
    8001f24a:	952e                	add	a0,a0,a1
    8001f24c:	00c55503          	lhu	a0,12(a0)
    8001f250:	e82a                	sd	a0,16(sp)
    8001f252:	04a11223          	sh	a0,68(sp)
            let next = self.desc[i].next;
    8001f256:	75c2                	ld	a1,48(sp)
    8001f258:	ec2e                	sd	a1,24(sp)
    8001f25a:	451d                	li	a0,7
    8001f25c:	04b56963          	bltu	a0,a1,8001f2ae <.LBB4_9+0x14>
    8001f260:	a009                	j	8001f262 <_ZN6kernel6driver11virtio_disk4Disk10free_chain17h88621e1c7ba36f26E+0x36>
    8001f262:	7522                	ld	a0,40(sp)
    8001f264:	65e2                	ld	a1,24(sp)
    8001f266:	0592                	slli	a1,a1,0x4
    8001f268:	95aa                	add	a1,a1,a0
    8001f26a:	00e5d583          	lhu	a1,14(a1) # 200e <.Lline_table_start0+0x47d>
    8001f26e:	e42e                	sd	a1,8(sp)
    8001f270:	04b11323          	sh	a1,70(sp)
            self.free_desc(i);
    8001f274:	75c2                	ld	a1,48(sp)
    8001f276:	00000097          	auipc	ra,0x0
    8001f27a:	e3a080e7          	jalr	-454(ra) # 8001f0b0 <_ZN6kernel6driver11virtio_disk4Disk9free_desc17h82d1b4d3b146e1f5E>
    8001f27e:	a009                	j	8001f280 <_ZN6kernel6driver11virtio_disk4Disk10free_chain17h88621e1c7ba36f26E+0x54>
            if (flag & VRING_DESC_F_NEXT) != 0 {
    8001f280:	6542                	ld	a0,16(sp)
    8001f282:	8905                	andi	a0,a0,1
    8001f284:	4581                	li	a1,0
    8001f286:	00b50663          	beq	a0,a1,8001f292 <_ZN6kernel6driver11virtio_disk4Disk10free_chain17h88621e1c7ba36f26E+0x66>
    8001f28a:	a009                	j	8001f28c <_ZN6kernel6driver11virtio_disk4Disk10free_chain17h88621e1c7ba36f26E+0x60>
                i = next as usize;
    8001f28c:	6522                	ld	a0,8(sp)
    8001f28e:	f82a                	sd	a0,48(sp)
        loop {
    8001f290:	b765                	j	8001f238 <_ZN6kernel6driver11virtio_disk4Disk10free_chain17h88621e1c7ba36f26E+0xc>
    }
    8001f292:	60a6                	ld	ra,72(sp)
    8001f294:	6161                	addi	sp,sp,80
    8001f296:	8082                	ret
            let flag = self.desc[i].flags;
    8001f298:	7502                	ld	a0,32(sp)

000000008001f29a <.LBB4_9>:
    8001f29a:	0000c617          	auipc	a2,0xc
    8001f29e:	7ee60613          	addi	a2,a2,2030 # 8002ba88 <.L__unnamed_25>
    8001f2a2:	45a1                	li	a1,8
    8001f2a4:	00003097          	auipc	ra,0x3
    8001f2a8:	ffe080e7          	jalr	-2(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    8001f2ac:	0000                	unimp
            let next = self.desc[i].next;
    8001f2ae:	6562                	ld	a0,24(sp)

000000008001f2b0 <.LBB4_10>:
    8001f2b0:	0000c617          	auipc	a2,0xc
    8001f2b4:	7f060613          	addi	a2,a2,2032 # 8002baa0 <.L__unnamed_26>
    8001f2b8:	45a1                	li	a1,8
    8001f2ba:	00003097          	auipc	ra,0x3
    8001f2be:	fe8080e7          	jalr	-24(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel6driver11virtio_disk4Disk4intr17h780fdb71fd330281E:

000000008001f2c4 <_ZN6kernel6driver11virtio_disk4Disk4intr17h780fdb71fd330281E>:
    pub fn intr(&mut self) {
    8001f2c4:	7159                	addi	sp,sp,-112
    8001f2c6:	f486                	sd	ra,104(sp)
    8001f2c8:	f82a                	sd	a0,48(sp)
    8001f2ca:	e4aa                	sd	a0,72(sp)
    8001f2cc:	06000513          	li	a0,96
            let intr_stat = read(VIRTIO_MMIO_INTERRUPT_STATUS);
    8001f2d0:	00000097          	auipc	ra,0x0
    8001f2d4:	206080e7          	jalr	518(ra) # 8001f4d6 <_ZN6kernel6driver11virtio_disk4read17h68d9cc1e57aa6089E>
    8001f2d8:	85aa                	mv	a1,a0
    8001f2da:	fc2e                	sd	a1,56(sp)
    8001f2dc:	caaa                	sw	a0,84(sp)
    8001f2de:	a009                	j	8001f2e0 <_ZN6kernel6driver11virtio_disk4Disk4intr17h780fdb71fd330281E+0x1c>
            write(VIRTIO_MMIO_INTERRUPT_ACK, intr_stat & 0x3);
    8001f2e0:	7562                	ld	a0,56(sp)
    8001f2e2:	00357593          	andi	a1,a0,3
    8001f2e6:	06400513          	li	a0,100
    8001f2ea:	00000097          	auipc	ra,0x0
    8001f2ee:	246080e7          	jalr	582(ra) # 8001f530 <_ZN6kernel6driver11virtio_disk5write17hf82e2458568dd21bE>
    8001f2f2:	a009                	j	8001f2f4 <_ZN6kernel6driver11virtio_disk4Disk4intr17h780fdb71fd330281E+0x30>
    8001f2f4:	4511                	li	a0,4
        fence(Ordering::SeqCst);
    8001f2f6:	04a10323          	sb	a0,70(sp)
    8001f2fa:	fffe5097          	auipc	ra,0xfffe5
    8001f2fe:	4b6080e7          	jalr	1206(ra) # 800047b0 <_ZN4core4sync6atomic5fence17hd2f91624c9f09ce8E>
    8001f302:	a009                	j	8001f304 <_ZN6kernel6driver11virtio_disk4Disk4intr17h780fdb71fd330281E+0x40>
    8001f304:	75c2                	ld	a1,48(sp)
    8001f306:	6509                	lui	a0,0x2
    8001f308:	2521                	addiw	a0,a0,8
        while self.used_idx != self.used.idx {
    8001f30a:	952e                	add	a0,a0,a1
    8001f30c:	00055503          	lhu	a0,0(a0) # 2000 <.Lline_table_start0+0x46f>
    8001f310:	6605                	lui	a2,0x1
    8001f312:	2609                	addiw	a2,a2,2
    8001f314:	95b2                	add	a1,a1,a2
    8001f316:	0005d583          	lhu	a1,0(a1)
    8001f31a:	00b51663          	bne	a0,a1,8001f326 <_ZN6kernel6driver11virtio_disk4Disk4intr17h780fdb71fd330281E+0x62>
    8001f31e:	a009                	j	8001f320 <_ZN6kernel6driver11virtio_disk4Disk4intr17h780fdb71fd330281E+0x5c>
    }
    8001f320:	70a6                	ld	ra,104(sp)
    8001f322:	6165                	addi	sp,sp,112
    8001f324:	8082                	ret
    8001f326:	4511                	li	a0,4
            fence(Ordering::SeqCst);
    8001f328:	04a103a3          	sb	a0,71(sp)
    8001f32c:	fffe5097          	auipc	ra,0xfffe5
    8001f330:	484080e7          	jalr	1156(ra) # 800047b0 <_ZN4core4sync6atomic5fence17hd2f91624c9f09ce8E>
    8001f334:	a009                	j	8001f336 <_ZN6kernel6driver11virtio_disk4Disk4intr17h780fdb71fd330281E+0x72>
    8001f336:	7542                	ld	a0,48(sp)
    8001f338:	6589                	lui	a1,0x2
    8001f33a:	25a1                	addiw	a1,a1,8
            let id = self.used.ring[self.used_idx as usize % NUM].id as usize;
    8001f33c:	952e                	add	a0,a0,a1
    8001f33e:	00055503          	lhu	a0,0(a0)
    8001f342:	00757593          	andi	a1,a0,7
    8001f346:	f42e                	sd	a1,40(sp)
    8001f348:	451d                	li	a0,7
    8001f34a:	10b56c63          	bltu	a0,a1,8001f462 <.LBB5_26+0x40>
    8001f34e:	a009                	j	8001f350 <_ZN6kernel6driver11virtio_disk4Disk4intr17h780fdb71fd330281E+0x8c>
    8001f350:	7542                	ld	a0,48(sp)
    8001f352:	75a2                	ld	a1,40(sp)
    8001f354:	058e                	slli	a1,a1,0x3
    8001f356:	952e                	add	a0,a0,a1
    8001f358:	6585                	lui	a1,0x1
    8001f35a:	2591                	addiw	a1,a1,4
    8001f35c:	952e                	add	a0,a0,a1
    8001f35e:	00056583          	lwu	a1,0(a0)
    8001f362:	f02e                	sd	a1,32(sp)
    8001f364:	ecae                	sd	a1,88(sp)
    8001f366:	451d                	li	a0,7
            if self.info[id].status != 0 {
    8001f368:	10b56863          	bltu	a0,a1,8001f478 <.LBB5_27+0x14>
    8001f36c:	a009                	j	8001f36e <_ZN6kernel6driver11virtio_disk4Disk4intr17h780fdb71fd330281E+0xaa>
    8001f36e:	7542                	ld	a0,48(sp)
    8001f370:	7582                	ld	a1,32(sp)
    8001f372:	4661                	li	a2,24
    8001f374:	02c585b3          	mul	a1,a1,a2
    8001f378:	952e                	add	a0,a0,a1
    8001f37a:	6589                	lui	a1,0x2
    8001f37c:	0205859b          	addiw	a1,a1,32
    8001f380:	952e                	add	a0,a0,a1
    8001f382:	00054503          	lbu	a0,0(a0)
    8001f386:	4581                	li	a1,0
    8001f388:	02b50163          	beq	a0,a1,8001f3aa <.LBB5_23+0x14>
    8001f38c:	a009                	j	8001f38e <.LBB5_22>

000000008001f38e <.LBB5_22>:
                panic!("interrupt status");
    8001f38e:	00006517          	auipc	a0,0x6
    8001f392:	35250513          	addi	a0,a0,850 # 800256e0 <.L__unnamed_35+0x68>

000000008001f396 <.LBB5_23>:
    8001f396:	0000c617          	auipc	a2,0xc
    8001f39a:	75260613          	addi	a2,a2,1874 # 8002bae8 <.L__unnamed_28>
    8001f39e:	45c1                	li	a1,16
    8001f3a0:	00003097          	auipc	ra,0x3
    8001f3a4:	ed6080e7          	jalr	-298(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8001f3a8:	0000                	unimp
    8001f3aa:	7582                	ld	a1,32(sp)
    8001f3ac:	451d                	li	a0,7
            let buf_raw_data = self.info[id].buf_channel.clone()
    8001f3ae:	0eb56063          	bltu	a0,a1,8001f48e <.LBB5_28+0x14>
    8001f3b2:	a009                	j	8001f3b4 <.LBB5_23+0x1e>
    8001f3b4:	7542                	ld	a0,48(sp)
    8001f3b6:	7582                	ld	a1,32(sp)
    8001f3b8:	4661                	li	a2,24
    8001f3ba:	02c585b3          	mul	a1,a1,a2
    8001f3be:	952e                	add	a0,a0,a1
    8001f3c0:	6589                	lui	a1,0x2
    8001f3c2:	25c1                	addiw	a1,a1,16
    8001f3c4:	952e                	add	a0,a0,a1
    8001f3c6:	ffff0097          	auipc	ra,0xffff0
    8001f3ca:	e1a080e7          	jalr	-486(ra) # 8000f1e0 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17he939c90bc3d2b0caE>
    8001f3ce:	e82a                	sd	a0,16(sp)
    8001f3d0:	ec2e                	sd	a1,24(sp)
    8001f3d2:	a009                	j	8001f3d4 <.LBB5_23+0x3e>
    8001f3d4:	65e2                	ld	a1,24(sp)
    8001f3d6:	6542                	ld	a0,16(sp)

000000008001f3d8 <.LBB5_24>:
    8001f3d8:	0000c617          	auipc	a2,0xc
    8001f3dc:	74060613          	addi	a2,a2,1856 # 8002bb18 <.L__unnamed_29>

000000008001f3e0 <.LBB5_25>:
    8001f3e0:	0000c717          	auipc	a4,0xc
    8001f3e4:	78070713          	addi	a4,a4,1920 # 8002bb60 <.L__unnamed_30>
    8001f3e8:	04300693          	li	a3,67
    8001f3ec:	fffef097          	auipc	ra,0xfffef
    8001f3f0:	70a080e7          	jalr	1802(ra) # 8000eaf6 <_ZN4core6option15Option$LT$T$GT$6expect17h263816fde9da1c25E>
    8001f3f4:	85aa                	mv	a1,a0
    8001f3f6:	e42e                	sd	a1,8(sp)
    8001f3f8:	f0aa                	sd	a0,96(sp)
    8001f3fa:	a009                	j	8001f3fc <.LBB5_25+0x1c>
    8001f3fc:	7582                	ld	a1,32(sp)
    8001f3fe:	451d                	li	a0,7
            self.info[id].disk = false;
    8001f400:	0ab56263          	bltu	a0,a1,8001f4a4 <.LBB5_29+0x14>
    8001f404:	a009                	j	8001f406 <.LBB5_25+0x26>
    8001f406:	65a2                	ld	a1,8(sp)
    8001f408:	7542                	ld	a0,48(sp)
    8001f40a:	7602                	ld	a2,32(sp)
    8001f40c:	46e1                	li	a3,24
    8001f40e:	02d60633          	mul	a2,a2,a3
    8001f412:	9532                	add	a0,a0,a2
    8001f414:	6609                	lui	a2,0x2
    8001f416:	0216061b          	addiw	a2,a2,33
    8001f41a:	962a                	add	a2,a2,a0
    8001f41c:	4501                	li	a0,0
    8001f41e:	00a60023          	sb	a0,0(a2) # 2000 <.Lline_table_start0+0x46f>

000000008001f422 <.LBB5_26>:
            unsafe { PROC_MANAGER.wake_up(buf_raw_data); }
    8001f422:	00038517          	auipc	a0,0x38
    8001f426:	17e50513          	addi	a0,a0,382 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    8001f42a:	fffee097          	auipc	ra,0xfffee
    8001f42e:	4d6080e7          	jalr	1238(ra) # 8000d900 <_ZN6kernel7process7manager11ProcManager7wake_up17ha46b4d15ac07187bE>
    8001f432:	a009                	j	8001f434 <.LBB5_26+0x12>
    8001f434:	7542                	ld	a0,48(sp)
    8001f436:	6589                	lui	a1,0x2
    8001f438:	25a1                	addiw	a1,a1,8
            self.used_idx += 1;
    8001f43a:	952e                	add	a0,a0,a1
    8001f43c:	00055503          	lhu	a0,0(a0)
    8001f440:	00150593          	addi	a1,a0,1
    8001f444:	e02e                	sd	a1,0(sp)
    8001f446:	6541                	lui	a0,0x10
    8001f448:	357d                	addiw	a0,a0,-1
    8001f44a:	8d6d                	and	a0,a0,a1
    8001f44c:	06b51763          	bne	a0,a1,8001f4ba <.LBB5_31>
    8001f450:	a009                	j	8001f452 <.LBB5_26+0x30>
    8001f452:	6502                	ld	a0,0(sp)
    8001f454:	75c2                	ld	a1,48(sp)
    8001f456:	6609                	lui	a2,0x2
    8001f458:	2621                	addiw	a2,a2,8
    8001f45a:	95b2                	add	a1,a1,a2
    8001f45c:	00a59023          	sh	a0,0(a1) # 2000 <.Lline_table_start0+0x46f>
        while self.used_idx != self.used.idx {
    8001f460:	b555                	j	8001f304 <_ZN6kernel6driver11virtio_disk4Disk4intr17h780fdb71fd330281E+0x40>
            let id = self.used.ring[self.used_idx as usize % NUM].id as usize;
    8001f462:	7522                	ld	a0,40(sp)

000000008001f464 <.LBB5_27>:
    8001f464:	0000c617          	auipc	a2,0xc
    8001f468:	65460613          	addi	a2,a2,1620 # 8002bab8 <.L__unnamed_31>
    8001f46c:	45a1                	li	a1,8
    8001f46e:	00003097          	auipc	ra,0x3
    8001f472:	e34080e7          	jalr	-460(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    8001f476:	0000                	unimp
            if self.info[id].status != 0 {
    8001f478:	7502                	ld	a0,32(sp)

000000008001f47a <.LBB5_28>:
    8001f47a:	0000c617          	auipc	a2,0xc
    8001f47e:	65660613          	addi	a2,a2,1622 # 8002bad0 <.L__unnamed_32>
    8001f482:	45a1                	li	a1,8
    8001f484:	00003097          	auipc	ra,0x3
    8001f488:	e1e080e7          	jalr	-482(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    8001f48c:	0000                	unimp
            let buf_raw_data = self.info[id].buf_channel.clone()
    8001f48e:	7502                	ld	a0,32(sp)

000000008001f490 <.LBB5_29>:
    8001f490:	0000c617          	auipc	a2,0xc
    8001f494:	67060613          	addi	a2,a2,1648 # 8002bb00 <.L__unnamed_33>
    8001f498:	45a1                	li	a1,8
    8001f49a:	00003097          	auipc	ra,0x3
    8001f49e:	e08080e7          	jalr	-504(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    8001f4a2:	0000                	unimp
            self.info[id].disk = false;
    8001f4a4:	7502                	ld	a0,32(sp)

000000008001f4a6 <.LBB5_30>:
    8001f4a6:	0000c617          	auipc	a2,0xc
    8001f4aa:	6d260613          	addi	a2,a2,1746 # 8002bb78 <.L__unnamed_34>
    8001f4ae:	45a1                	li	a1,8
    8001f4b0:	00003097          	auipc	ra,0x3
    8001f4b4:	df2080e7          	jalr	-526(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

000000008001f4ba <.LBB5_31>:
            self.used_idx += 1;
    8001f4ba:	0000c517          	auipc	a0,0xc
    8001f4be:	6f650513          	addi	a0,a0,1782 # 8002bbb0 <str.0>

000000008001f4c2 <.LBB5_32>:
    8001f4c2:	0000c617          	auipc	a2,0xc
    8001f4c6:	6ce60613          	addi	a2,a2,1742 # 8002bb90 <.L__unnamed_35>
    8001f4ca:	45f1                	li	a1,28
    8001f4cc:	00003097          	auipc	ra,0x3
    8001f4d0:	daa080e7          	jalr	-598(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel6driver11virtio_disk4read17h68d9cc1e57aa6089E:

000000008001f4d6 <_ZN6kernel6driver11virtio_disk4read17h68d9cc1e57aa6089E>:
// this many virtio descriptors
// must be a power of 2
const NUM: usize = 8;

#[inline]
unsafe fn read(offset: usize) -> u32 {
    8001f4d6:	7139                	addi	sp,sp,-64
    8001f4d8:	fc06                	sd	ra,56(sp)
    8001f4da:	ec2a                	sd	a0,24(sp)
    8001f4dc:	f42a                	sd	a0,40(sp)
    8001f4de:	10001537          	lui	a0,0x10001
    let src = (Into::<usize>::into(VIRTIO0) + offset) as *const u32;
    8001f4e2:	fffec097          	auipc	ra,0xfffec
    8001f4e6:	59c080e7          	jalr	1436(ra) # 8000ba7e <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hbecc82c6a2b59487E>
    8001f4ea:	f02a                	sd	a0,32(sp)
    8001f4ec:	a009                	j	8001f4ee <_ZN6kernel6driver11virtio_disk4read17h68d9cc1e57aa6089E+0x18>
    8001f4ee:	7582                	ld	a1,32(sp)
    8001f4f0:	6562                	ld	a0,24(sp)
    8001f4f2:	952e                	add	a0,a0,a1
    8001f4f4:	e82a                	sd	a0,16(sp)
    8001f4f6:	00b56f63          	bltu	a0,a1,8001f514 <.LBB6_5>
    8001f4fa:	a009                	j	8001f4fc <_ZN6kernel6driver11virtio_disk4read17h68d9cc1e57aa6089E+0x26>
    8001f4fc:	6542                	ld	a0,16(sp)
    8001f4fe:	f82a                	sd	a0,48(sp)
    ptr::read_volatile(src)
    8001f500:	ffff9097          	auipc	ra,0xffff9
    8001f504:	05e080e7          	jalr	94(ra) # 8001855e <_ZN4core3ptr13read_volatile17h0ae297fe3f24e4caE>
    8001f508:	e42a                	sd	a0,8(sp)
    8001f50a:	a009                	j	8001f50c <_ZN6kernel6driver11virtio_disk4read17h68d9cc1e57aa6089E+0x36>
}
    8001f50c:	6522                	ld	a0,8(sp)
    8001f50e:	70e2                	ld	ra,56(sp)
    8001f510:	6121                	addi	sp,sp,64
    8001f512:	8082                	ret

000000008001f514 <.LBB6_5>:
    let src = (Into::<usize>::into(VIRTIO0) + offset) as *const u32;
    8001f514:	0000c517          	auipc	a0,0xc
    8001f518:	69c50513          	addi	a0,a0,1692 # 8002bbb0 <str.0>

000000008001f51c <.LBB6_6>:
    8001f51c:	0000c617          	auipc	a2,0xc
    8001f520:	6b460613          	addi	a2,a2,1716 # 8002bbd0 <.L__unnamed_36>
    8001f524:	45f1                	li	a1,28
    8001f526:	00003097          	auipc	ra,0x3
    8001f52a:	d50080e7          	jalr	-688(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel6driver11virtio_disk5write17hf82e2458568dd21bE:

000000008001f530 <_ZN6kernel6driver11virtio_disk5write17hf82e2458568dd21bE>:

#[inline]
unsafe fn write(offset: usize, data: u32) {
    8001f530:	7139                	addi	sp,sp,-64
    8001f532:	fc06                	sd	ra,56(sp)
    8001f534:	e42a                	sd	a0,8(sp)
    8001f536:	862e                	mv	a2,a1
    8001f538:	e832                	sd	a2,16(sp)
    8001f53a:	f02a                	sd	a0,32(sp)
    8001f53c:	d62e                	sw	a1,44(sp)
    8001f53e:	10001537          	lui	a0,0x10001
    let dst = (Into::<usize>::into(VIRTIO0) + offset) as *mut u32;
    8001f542:	fffec097          	auipc	ra,0xfffec
    8001f546:	53c080e7          	jalr	1340(ra) # 8000ba7e <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hbecc82c6a2b59487E>
    8001f54a:	ec2a                	sd	a0,24(sp)
    8001f54c:	a009                	j	8001f54e <_ZN6kernel6driver11virtio_disk5write17hf82e2458568dd21bE+0x1e>
    8001f54e:	65e2                	ld	a1,24(sp)
    8001f550:	6522                	ld	a0,8(sp)
    8001f552:	952e                	add	a0,a0,a1
    8001f554:	e02a                	sd	a0,0(sp)
    8001f556:	00b56e63          	bltu	a0,a1,8001f572 <.LBB7_5>
    8001f55a:	a009                	j	8001f55c <_ZN6kernel6driver11virtio_disk5write17hf82e2458568dd21bE+0x2c>
    8001f55c:	65c2                	ld	a1,16(sp)
    8001f55e:	6502                	ld	a0,0(sp)
    8001f560:	f82a                	sd	a0,48(sp)
    ptr::write_volatile(dst, data);
    8001f562:	ffff9097          	auipc	ra,0xffff9
    8001f566:	038080e7          	jalr	56(ra) # 8001859a <_ZN4core3ptr14write_volatile17h1c498a4c32cde7d4E>
    8001f56a:	a009                	j	8001f56c <_ZN6kernel6driver11virtio_disk5write17hf82e2458568dd21bE+0x3c>
}
    8001f56c:	70e2                	ld	ra,56(sp)
    8001f56e:	6121                	addi	sp,sp,64
    8001f570:	8082                	ret

000000008001f572 <.LBB7_5>:
    let dst = (Into::<usize>::into(VIRTIO0) + offset) as *mut u32;
    8001f572:	0000c517          	auipc	a0,0xc
    8001f576:	63e50513          	addi	a0,a0,1598 # 8002bbb0 <str.0>

000000008001f57a <.LBB7_6>:
    8001f57a:	0000c617          	auipc	a2,0xc
    8001f57e:	66e60613          	addi	a2,a2,1646 # 8002bbe8 <.L__unnamed_37>
    8001f582:	45f1                	li	a1,28
    8001f584:	00003097          	auipc	ra,0x3
    8001f588:	cf2080e7          	jalr	-782(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h69a6648c691317bcE:

000000008001f58e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h69a6648c691317bcE>:
    pub const fn as_mut_ptr(&mut self) -> *mut T {
    8001f58e:	1141                	addi	sp,sp,-16
    8001f590:	e02a                	sd	a0,0(sp)
    8001f592:	e42e                	sd	a1,8(sp)
    }
    8001f594:	0141                	addi	sp,sp,16
    8001f596:	8082                	ret

Disassembly of section .text._ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h752c0d8417c49952E:

000000008001f598 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h752c0d8417c49952E>:
    pub const fn as_mut_ptr(&mut self) -> *mut T {
    8001f598:	1141                	addi	sp,sp,-16
    8001f59a:	e02a                	sd	a0,0(sp)
    8001f59c:	e42e                	sd	a1,8(sp)
    }
    8001f59e:	0141                	addi	sp,sp,16
    8001f5a0:	8082                	ret

Disassembly of section .text._ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17he2d11453020d912aE:

000000008001f5a2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17he2d11453020d912aE>:
    pub const fn as_mut_ptr(&mut self) -> *mut T {
    8001f5a2:	1141                	addi	sp,sp,-16
    8001f5a4:	e02a                	sd	a0,0(sp)
    8001f5a6:	e42e                	sd	a1,8(sp)
    }
    8001f5a8:	0141                	addi	sp,sp,16
    8001f5aa:	8082                	ret

Disassembly of section .text._ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h040db97216f8ec10E:

000000008001f5ac <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h040db97216f8ec10E>:
    pub const fn len(&self) -> usize {
    8001f5ac:	7179                	addi	sp,sp,-48
    8001f5ae:	e42e                	sd	a1,8(sp)
    8001f5b0:	85aa                	mv	a1,a0
    8001f5b2:	6522                	ld	a0,8(sp)
    8001f5b4:	f02e                	sd	a1,32(sp)
    8001f5b6:	f42a                	sd	a0,40(sp)
            unsafe { crate::ptr::PtrRepr { const_ptr: self }.components.metadata }
    8001f5b8:	e82e                	sd	a1,16(sp)
    8001f5ba:	ec2a                	sd	a0,24(sp)
    }
    8001f5bc:	6145                	addi	sp,sp,48
    8001f5be:	8082                	ret

Disassembly of section .text._ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17ha6c4bb93a093d49eE:

000000008001f5c0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17ha6c4bb93a093d49eE>:
    pub const fn len(&self) -> usize {
    8001f5c0:	7179                	addi	sp,sp,-48
    8001f5c2:	e42e                	sd	a1,8(sp)
    8001f5c4:	85aa                	mv	a1,a0
    8001f5c6:	6522                	ld	a0,8(sp)
    8001f5c8:	f02e                	sd	a1,32(sp)
    8001f5ca:	f42a                	sd	a0,40(sp)
            unsafe { crate::ptr::PtrRepr { const_ptr: self }.components.metadata }
    8001f5cc:	e82e                	sd	a1,16(sp)
    8001f5ce:	ec2a                	sd	a0,24(sp)
    }
    8001f5d0:	6145                	addi	sp,sp,48
    8001f5d2:	8082                	ret

Disassembly of section .text._ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hb06ce83b043493f3E:

000000008001f5d4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hb06ce83b043493f3E>:
    pub const fn len(&self) -> usize {
    8001f5d4:	7179                	addi	sp,sp,-48
    8001f5d6:	e42e                	sd	a1,8(sp)
    8001f5d8:	85aa                	mv	a1,a0
    8001f5da:	6522                	ld	a0,8(sp)
    8001f5dc:	f02e                	sd	a1,32(sp)
    8001f5de:	f42a                	sd	a0,40(sp)
            unsafe { crate::ptr::PtrRepr { const_ptr: self }.components.metadata }
    8001f5e0:	e82e                	sd	a1,16(sp)
    8001f5e2:	ec2a                	sd	a0,24(sp)
    }
    8001f5e4:	6145                	addi	sp,sp,48
    8001f5e6:	8082                	ret

Disassembly of section .text._ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hc17413639ca00bf8E:

000000008001f5e8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hc17413639ca00bf8E>:
    pub const fn len(&self) -> usize {
    8001f5e8:	7179                	addi	sp,sp,-48
    8001f5ea:	e42e                	sd	a1,8(sp)
    8001f5ec:	85aa                	mv	a1,a0
    8001f5ee:	6522                	ld	a0,8(sp)
    8001f5f0:	f02e                	sd	a1,32(sp)
    8001f5f2:	f42a                	sd	a0,40(sp)
            unsafe { crate::ptr::PtrRepr { const_ptr: self }.components.metadata }
    8001f5f4:	e82e                	sd	a1,16(sp)
    8001f5f6:	ec2a                	sd	a0,24(sp)
    }
    8001f5f8:	6145                	addi	sp,sp,48
    8001f5fa:	8082                	ret

Disassembly of section .text._ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h8f308ca2182773f1E:

000000008001f5fc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h8f308ca2182773f1E>:
    pub fn iter(&self) -> Iter<'_, T> {
    8001f5fc:	7179                	addi	sp,sp,-48
    8001f5fe:	f406                	sd	ra,40(sp)
    8001f600:	ec2a                	sd	a0,24(sp)
    8001f602:	f02e                	sd	a1,32(sp)
        Iter::new(self)
    8001f604:	fffeb097          	auipc	ra,0xfffeb
    8001f608:	70c080e7          	jalr	1804(ra) # 8000ad10 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h7dcd9c98bf37806bE>
    8001f60c:	e42a                	sd	a0,8(sp)
    8001f60e:	e82e                	sd	a1,16(sp)
    8001f610:	a009                	j	8001f612 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h8f308ca2182773f1E+0x16>
    }
    8001f612:	65c2                	ld	a1,16(sp)
    8001f614:	6522                	ld	a0,8(sp)
    8001f616:	70a2                	ld	ra,40(sp)
    8001f618:	6145                	addi	sp,sp,48
    8001f61a:	8082                	ret

Disassembly of section .text._ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h1ea05a5f45312d57E:

000000008001f61c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h1ea05a5f45312d57E>:
    pub const fn as_ptr(&self) -> *const T {
    8001f61c:	1141                	addi	sp,sp,-16
    8001f61e:	e02a                	sd	a0,0(sp)
    8001f620:	e42e                	sd	a1,8(sp)
    }
    8001f622:	0141                	addi	sp,sp,16
    8001f624:	8082                	ret

Disassembly of section .text._ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hc3575ad36de0bb27E:

000000008001f626 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hc3575ad36de0bb27E>:
    pub const fn as_ptr(&self) -> *const T {
    8001f626:	1141                	addi	sp,sp,-16
    8001f628:	e02a                	sd	a0,0(sp)
    8001f62a:	e42e                	sd	a1,8(sp)
    }
    8001f62c:	0141                	addi	sp,sp,16
    8001f62e:	8082                	ret

Disassembly of section .text._ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hf7620495824cfb20E:

000000008001f630 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hf7620495824cfb20E>:
    pub const fn as_ptr(&self) -> *const T {
    8001f630:	1141                	addi	sp,sp,-16
    8001f632:	e02a                	sd	a0,0(sp)
    8001f634:	e42e                	sd	a1,8(sp)
    }
    8001f636:	0141                	addi	sp,sp,16
    8001f638:	8082                	ret

Disassembly of section .text._ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h847ff5bce17a319bE:

000000008001f63a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h847ff5bce17a319bE>:
    pub fn iter_mut(&mut self) -> IterMut<'_, T> {
    8001f63a:	7179                	addi	sp,sp,-48
    8001f63c:	f406                	sd	ra,40(sp)
    8001f63e:	ec2a                	sd	a0,24(sp)
    8001f640:	f02e                	sd	a1,32(sp)
        IterMut::new(self)
    8001f642:	fffec097          	auipc	ra,0xfffec
    8001f646:	8fe080e7          	jalr	-1794(ra) # 8000af40 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h8130085cf5731c78E>
    8001f64a:	e42a                	sd	a0,8(sp)
    8001f64c:	e82e                	sd	a1,16(sp)
    8001f64e:	a009                	j	8001f650 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h847ff5bce17a319bE+0x16>
    }
    8001f650:	65c2                	ld	a1,16(sp)
    8001f652:	6522                	ld	a0,8(sp)
    8001f654:	70a2                	ld	ra,40(sp)
    8001f656:	6145                	addi	sp,sp,48
    8001f658:	8082                	ret

Disassembly of section .text.__rust_alloc:

000000008001f65a <__rust_alloc>:
    8001f65a:	fffed317          	auipc	t1,0xfffed
    8001f65e:	3d230067          	jr	978(t1) # 8000ca2c <__rg_alloc>

Disassembly of section .text.__rust_dealloc:

000000008001f662 <__rust_dealloc>:
    8001f662:	fffed317          	auipc	t1,0xfffed
    8001f666:	40030067          	jr	1024(t1) # 8000ca62 <__rg_dealloc>

Disassembly of section .text.__rust_realloc:

000000008001f66a <__rust_realloc>:
    8001f66a:	fffed317          	auipc	t1,0xfffed
    8001f66e:	43c30067          	jr	1084(t1) # 8000caa6 <__rg_realloc>

Disassembly of section .text.__rust_alloc_zeroed:

000000008001f672 <__rust_alloc_zeroed>:
    8001f672:	fffed317          	auipc	t1,0xfffed
    8001f676:	48230067          	jr	1154(t1) # 8000caf4 <__rg_alloc_zeroed>

Disassembly of section .text.__rust_alloc_error_handler:

000000008001f67a <__rust_alloc_error_handler>:
    8001f67a:	00003317          	auipc	t1,0x3
    8001f67e:	a0430067          	jr	-1532(t1) # 8002207e <__rg_oom>

Disassembly of section .text._ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hd6815da901cfddf7E:

000000008001f682 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hd6815da901cfddf7E>:
            fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
    8001f682:	1101                	addi	sp,sp,-32
    8001f684:	ec06                	sd	ra,24(sp)
    8001f686:	e42a                	sd	a0,8(sp)
    8001f688:	e82e                	sd	a1,16(sp)
    8001f68a:	6108                	ld	a0,0(a0)
    8001f68c:	00000097          	auipc	ra,0x0
    8001f690:	37a080e7          	jalr	890(ra) # 8001fa06 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h145a0e5da1339a00E>
    8001f694:	e02a                	sd	a0,0(sp)
    8001f696:	a009                	j	8001f698 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hd6815da901cfddf7E+0x16>
    8001f698:	6502                	ld	a0,0(sp)
    8001f69a:	60e2                	ld	ra,24(sp)
    8001f69c:	6105                	addi	sp,sp,32
    8001f69e:	8082                	ret

Disassembly of section .text._ZN4core3fmt10ArgumentV13new17hafe633af74a29011E:

000000008001f6a0 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
    8001f6a0:	715d                	addi	sp,sp,-80
    8001f6a2:	e82a                	sd	a0,16(sp)
    8001f6a4:	f82a                	sd	a0,48(sp)
    8001f6a6:	fc2e                	sd	a1,56(sp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
    8001f6a8:	e0ae                	sd	a1,64(sp)
    8001f6aa:	ec2e                	sd	a1,24(sp)
    8001f6ac:	a009                	j	8001f6ae <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E+0xe>
    8001f6ae:	6542                	ld	a0,16(sp)
    8001f6b0:	e4aa                	sd	a0,72(sp)
    8001f6b2:	e42a                	sd	a0,8(sp)
    8001f6b4:	a009                	j	8001f6b6 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E+0x16>
    8001f6b6:	65e2                	ld	a1,24(sp)
    8001f6b8:	6522                	ld	a0,8(sp)
    8001f6ba:	f02a                	sd	a0,32(sp)
    8001f6bc:	f42e                	sd	a1,40(sp)
    }
    8001f6be:	6161                	addi	sp,sp,80
    8001f6c0:	8082                	ret

Disassembly of section .text._ZN4core3fmt10ArgumentV13new17hc2eeb6f5565b6dd2E:

000000008001f6c2 <_ZN4core3fmt10ArgumentV13new17hc2eeb6f5565b6dd2E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
    8001f6c2:	715d                	addi	sp,sp,-80
    8001f6c4:	e82a                	sd	a0,16(sp)
    8001f6c6:	f82a                	sd	a0,48(sp)
    8001f6c8:	fc2e                	sd	a1,56(sp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
    8001f6ca:	e0ae                	sd	a1,64(sp)
    8001f6cc:	ec2e                	sd	a1,24(sp)
    8001f6ce:	a009                	j	8001f6d0 <_ZN4core3fmt10ArgumentV13new17hc2eeb6f5565b6dd2E+0xe>
    8001f6d0:	6542                	ld	a0,16(sp)
    8001f6d2:	e4aa                	sd	a0,72(sp)
    8001f6d4:	e42a                	sd	a0,8(sp)
    8001f6d6:	a009                	j	8001f6d8 <_ZN4core3fmt10ArgumentV13new17hc2eeb6f5565b6dd2E+0x16>
    8001f6d8:	65e2                	ld	a1,24(sp)
    8001f6da:	6522                	ld	a0,8(sp)
    8001f6dc:	f02a                	sd	a0,32(sp)
    8001f6de:	f42e                	sd	a1,40(sp)
    }
    8001f6e0:	6161                	addi	sp,sp,80
    8001f6e2:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$13guaranteed_eq17h568dab4191b83956E:

000000008001f6e4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$13guaranteed_eq17h568dab4191b83956E>:
    pub const fn guaranteed_eq(self, other: *mut T) -> bool
    8001f6e4:	1101                	addi	sp,sp,-32
    8001f6e6:	e42a                	sd	a0,8(sp)
    8001f6e8:	e82e                	sd	a1,16(sp)
        intrinsics::ptr_guaranteed_eq(self as *const _, other as *const _)
    8001f6ea:	8d2d                	xor	a0,a0,a1
    8001f6ec:	00153513          	seqz	a0,a0
    8001f6f0:	e02a                	sd	a0,0(sp)
    8001f6f2:	00a10fa3          	sb	a0,31(sp)
    8001f6f6:	a009                	j	8001f6f8 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$13guaranteed_eq17h568dab4191b83956E+0x14>
    }
    8001f6f8:	6502                	ld	a0,0(sp)
    8001f6fa:	6105                	addi	sp,sp,32
    8001f6fc:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1d203f00cca684c1E:

000000008001f6fe <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1d203f00cca684c1E>:
    pub const unsafe fn add(self, count: usize) -> Self
    8001f6fe:	1101                	addi	sp,sp,-32
    8001f700:	ec06                	sd	ra,24(sp)
    8001f702:	e42a                	sd	a0,8(sp)
    8001f704:	e82e                	sd	a1,16(sp)
        unsafe { self.offset(count as isize) }
    8001f706:	00000097          	auipc	ra,0x0
    8001f70a:	068080e7          	jalr	104(ra) # 8001f76e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb5f7a0f346747657E>
    8001f70e:	e02a                	sd	a0,0(sp)
    8001f710:	a009                	j	8001f712 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1d203f00cca684c1E+0x14>
    }
    8001f712:	6502                	ld	a0,0(sp)
    8001f714:	60e2                	ld	ra,24(sp)
    8001f716:	6105                	addi	sp,sp,32
    8001f718:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$4cast17h7b791e143f90db99E:

000000008001f71a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$4cast17h7b791e143f90db99E>:
    pub const fn cast<U>(self) -> *mut U {
    8001f71a:	1141                	addi	sp,sp,-16
    8001f71c:	e42a                	sd	a0,8(sp)
    }
    8001f71e:	0141                	addi	sp,sp,16
    8001f720:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17h8b37e8181b720bd0E:

000000008001f722 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17h8b37e8181b720bd0E>:
    pub const unsafe fn write(self, val: T)
    8001f722:	1101                	addi	sp,sp,-32
    8001f724:	ec06                	sd	ra,24(sp)
    8001f726:	e02a                	sd	a0,0(sp)
    8001f728:	e42e                	sd	a1,8(sp)
    8001f72a:	e832                	sd	a2,16(sp)
        unsafe { write(self, val) }
    8001f72c:	00002097          	auipc	ra,0x2
    8001f730:	116080e7          	jalr	278(ra) # 80021842 <_ZN4core3ptr5write17h05084118c665240bE>
    8001f734:	a009                	j	8001f736 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17h8b37e8181b720bd0E+0x14>
    }
    8001f736:	60e2                	ld	ra,24(sp)
    8001f738:	6105                	addi	sp,sp,32
    8001f73a:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17he7a20e0a0a2f5b66E:

000000008001f73c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17he7a20e0a0a2f5b66E>:
    pub unsafe fn as_mut<'a>(self) -> Option<&'a mut T> {
    8001f73c:	7179                	addi	sp,sp,-48
    8001f73e:	f406                	sd	ra,40(sp)
    8001f740:	e42a                	sd	a0,8(sp)
    8001f742:	f02a                	sd	a0,32(sp)
        if self.is_null() { None } else { unsafe { Some(&mut *self) } }
    8001f744:	00000097          	auipc	ra,0x0
    8001f748:	03e080e7          	jalr	62(ra) # 8001f782 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hba478e65ea6353f9E>
    8001f74c:	e82a                	sd	a0,16(sp)
    8001f74e:	a009                	j	8001f750 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17he7a20e0a0a2f5b66E+0x14>
    8001f750:	6542                	ld	a0,16(sp)
    8001f752:	4581                	li	a1,0
    8001f754:	00b50663          	beq	a0,a1,8001f760 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17he7a20e0a0a2f5b66E+0x24>
    8001f758:	a009                	j	8001f75a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17he7a20e0a0a2f5b66E+0x1e>
    8001f75a:	4501                	li	a0,0
    8001f75c:	ec2a                	sd	a0,24(sp)
    8001f75e:	a021                	j	8001f766 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17he7a20e0a0a2f5b66E+0x2a>
    8001f760:	6522                	ld	a0,8(sp)
    8001f762:	ec2a                	sd	a0,24(sp)
    8001f764:	a009                	j	8001f766 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17he7a20e0a0a2f5b66E+0x2a>
    }
    8001f766:	6562                	ld	a0,24(sp)
    8001f768:	70a2                	ld	ra,40(sp)
    8001f76a:	6145                	addi	sp,sp,48
    8001f76c:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb5f7a0f346747657E:

000000008001f76e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb5f7a0f346747657E>:
    pub const unsafe fn offset(self, count: isize) -> *mut T
    8001f76e:	1101                	addi	sp,sp,-32
    8001f770:	e42a                	sd	a0,8(sp)
    8001f772:	e82e                	sd	a1,16(sp)
        unsafe { intrinsics::offset(self, count) as *mut T }
    8001f774:	952e                	add	a0,a0,a1
    8001f776:	e02a                	sd	a0,0(sp)
    8001f778:	ec2a                	sd	a0,24(sp)
    8001f77a:	a009                	j	8001f77c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb5f7a0f346747657E+0xe>
    }
    8001f77c:	6502                	ld	a0,0(sp)
    8001f77e:	6105                	addi	sp,sp,32
    8001f780:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hba478e65ea6353f9E:

000000008001f782 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hba478e65ea6353f9E>:
    pub const fn is_null(self) -> bool {
    8001f782:	1101                	addi	sp,sp,-32
    8001f784:	ec06                	sd	ra,24(sp)
    8001f786:	e42a                	sd	a0,8(sp)
    8001f788:	e82a                	sd	a0,16(sp)
        (self as *mut u8).guaranteed_eq(null_mut())
    8001f78a:	a009                	j	8001f78c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hba478e65ea6353f9E+0xa>
    8001f78c:	6522                	ld	a0,8(sp)
    8001f78e:	4581                	li	a1,0
    8001f790:	00000097          	auipc	ra,0x0
    8001f794:	f54080e7          	jalr	-172(ra) # 8001f6e4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$13guaranteed_eq17h568dab4191b83956E>
    8001f798:	e02a                	sd	a0,0(sp)
    8001f79a:	a009                	j	8001f79c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hba478e65ea6353f9E+0x1a>
    }
    8001f79c:	6502                	ld	a0,0(sp)
    8001f79e:	60e2                	ld	ra,24(sp)
    8001f7a0:	6105                	addi	sp,sp,32
    8001f7a2:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr41_$LT$impl$u20$$BP$mut$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h80398cc0098c8b0fE:

000000008001f7a4 <_ZN4core3ptr7mut_ptr41_$LT$impl$u20$$BP$mut$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h80398cc0098c8b0fE>:
    /// assert_eq!(slice.as_mut_ptr(), 0 as *mut i8);
    /// ```
    #[inline]
    #[unstable(feature = "slice_ptr_get", issue = "74265")]
    #[rustc_const_unstable(feature = "slice_ptr_get", issue = "74265")]
    pub const fn as_mut_ptr(self) -> *mut T {
    8001f7a4:	1141                	addi	sp,sp,-16
    8001f7a6:	e02a                	sd	a0,0(sp)
    8001f7a8:	e42e                	sd	a1,8(sp)
        self as *mut T
    }
    8001f7aa:	0141                	addi	sp,sp,16
    8001f7ac:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr41_$LT$impl$u20$$BP$mut$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h1fb5de3e2413636cE:

000000008001f7ae <_ZN4core3ptr7mut_ptr41_$LT$impl$u20$$BP$mut$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h1fb5de3e2413636cE>:
    ///     assert_eq!(x.get_unchecked_mut(1), x.as_mut_ptr().add(1));
    /// }
    /// ```
    #[unstable(feature = "slice_ptr_get", issue = "74265")]
    #[inline]
    pub unsafe fn get_unchecked_mut<I>(self, index: I) -> *mut I::Output
    8001f7ae:	7179                	addi	sp,sp,-48
    8001f7b0:	f406                	sd	ra,40(sp)
    8001f7b2:	e032                	sd	a2,0(sp)
    8001f7b4:	862e                	mv	a2,a1
    8001f7b6:	85aa                	mv	a1,a0
    8001f7b8:	6502                	ld	a0,0(sp)
    8001f7ba:	e82e                	sd	a1,16(sp)
    8001f7bc:	ec32                	sd	a2,24(sp)
    8001f7be:	f02a                	sd	a0,32(sp)
    where
        I: SliceIndex<[T]>,
    {
        // SAFETY: the caller ensures that `self` is dereferencable and `index` in-bounds.
        unsafe { index.get_unchecked_mut(self) }
    8001f7c0:	00002097          	auipc	ra,0x2
    8001f7c4:	66e080e7          	jalr	1646(ra) # 80021e2e <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hc32ec1251c36865fE>
    8001f7c8:	e42a                	sd	a0,8(sp)
    8001f7ca:	a009                	j	8001f7cc <_ZN4core3ptr7mut_ptr41_$LT$impl$u20$$BP$mut$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h1fb5de3e2413636cE+0x1e>
    }
    8001f7cc:	6522                	ld	a0,8(sp)
    8001f7ce:	70a2                	ld	ra,40(sp)
    8001f7d0:	6145                	addi	sp,sp,48
    8001f7d2:	8082                	ret

Disassembly of section .text._ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$13guaranteed_eq17hae95a39236f9ef3eE:

000000008001f7d4 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$13guaranteed_eq17hae95a39236f9ef3eE>:
    pub const fn guaranteed_eq(self, other: *const T) -> bool
    8001f7d4:	1101                	addi	sp,sp,-32
    8001f7d6:	e42a                	sd	a0,8(sp)
    8001f7d8:	e82e                	sd	a1,16(sp)
        intrinsics::ptr_guaranteed_eq(self, other)
    8001f7da:	8d2d                	xor	a0,a0,a1
    8001f7dc:	00153513          	seqz	a0,a0
    8001f7e0:	e02a                	sd	a0,0(sp)
    8001f7e2:	00a10fa3          	sb	a0,31(sp)
    8001f7e6:	a009                	j	8001f7e8 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$13guaranteed_eq17hae95a39236f9ef3eE+0x14>
    }
    8001f7e8:	6502                	ld	a0,0(sp)
    8001f7ea:	6105                	addi	sp,sp,32
    8001f7ec:	8082                	ret

Disassembly of section .text._ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h3ef2f165a29b2365E:

000000008001f7ee <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h3ef2f165a29b2365E>:
    pub const unsafe fn add(self, count: usize) -> Self
    8001f7ee:	1101                	addi	sp,sp,-32
    8001f7f0:	ec06                	sd	ra,24(sp)
    8001f7f2:	e42a                	sd	a0,8(sp)
    8001f7f4:	e82e                	sd	a1,16(sp)
        unsafe { self.offset(count as isize) }
    8001f7f6:	00000097          	auipc	ra,0x0
    8001f7fa:	046080e7          	jalr	70(ra) # 8001f83c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d562998c5c34b1bE>
    8001f7fe:	e02a                	sd	a0,0(sp)
    8001f800:	a009                	j	8001f802 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h3ef2f165a29b2365E+0x14>
    }
    8001f802:	6502                	ld	a0,0(sp)
    8001f804:	60e2                	ld	ra,24(sp)
    8001f806:	6105                	addi	sp,sp,32
    8001f808:	8082                	ret

Disassembly of section .text._ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6as_ref17h1afc8f6daddbc052E:

000000008001f80a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6as_ref17h1afc8f6daddbc052E>:
    pub unsafe fn as_ref<'a>(self) -> Option<&'a T> {
    8001f80a:	7179                	addi	sp,sp,-48
    8001f80c:	f406                	sd	ra,40(sp)
    8001f80e:	e42a                	sd	a0,8(sp)
    8001f810:	f02a                	sd	a0,32(sp)
        if self.is_null() { None } else { unsafe { Some(&*self) } }
    8001f812:	00000097          	auipc	ra,0x0
    8001f816:	03e080e7          	jalr	62(ra) # 8001f850 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h309eb733b6984dd5E>
    8001f81a:	e82a                	sd	a0,16(sp)
    8001f81c:	a009                	j	8001f81e <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6as_ref17h1afc8f6daddbc052E+0x14>
    8001f81e:	6542                	ld	a0,16(sp)
    8001f820:	4581                	li	a1,0
    8001f822:	00b50663          	beq	a0,a1,8001f82e <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6as_ref17h1afc8f6daddbc052E+0x24>
    8001f826:	a009                	j	8001f828 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6as_ref17h1afc8f6daddbc052E+0x1e>
    8001f828:	4501                	li	a0,0
    8001f82a:	ec2a                	sd	a0,24(sp)
    8001f82c:	a021                	j	8001f834 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6as_ref17h1afc8f6daddbc052E+0x2a>
    8001f82e:	6522                	ld	a0,8(sp)
    8001f830:	ec2a                	sd	a0,24(sp)
    8001f832:	a009                	j	8001f834 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6as_ref17h1afc8f6daddbc052E+0x2a>
    }
    8001f834:	6562                	ld	a0,24(sp)
    8001f836:	70a2                	ld	ra,40(sp)
    8001f838:	6145                	addi	sp,sp,48
    8001f83a:	8082                	ret

Disassembly of section .text._ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d562998c5c34b1bE:

000000008001f83c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d562998c5c34b1bE>:
    pub const unsafe fn offset(self, count: isize) -> *const T
    8001f83c:	1101                	addi	sp,sp,-32
    8001f83e:	e42a                	sd	a0,8(sp)
    8001f840:	e82e                	sd	a1,16(sp)
        unsafe { intrinsics::offset(self, count) }
    8001f842:	952e                	add	a0,a0,a1
    8001f844:	e02a                	sd	a0,0(sp)
    8001f846:	ec2a                	sd	a0,24(sp)
    8001f848:	a009                	j	8001f84a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d562998c5c34b1bE+0xe>
    }
    8001f84a:	6502                	ld	a0,0(sp)
    8001f84c:	6105                	addi	sp,sp,32
    8001f84e:	8082                	ret

Disassembly of section .text._ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h309eb733b6984dd5E:

000000008001f850 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h309eb733b6984dd5E>:
    pub const fn is_null(self) -> bool {
    8001f850:	1101                	addi	sp,sp,-32
    8001f852:	ec06                	sd	ra,24(sp)
    8001f854:	e42a                	sd	a0,8(sp)
    8001f856:	e82a                	sd	a0,16(sp)
        (self as *const u8).guaranteed_eq(null())
    8001f858:	a009                	j	8001f85a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h309eb733b6984dd5E+0xa>
    8001f85a:	6522                	ld	a0,8(sp)
    8001f85c:	4581                	li	a1,0
    8001f85e:	00000097          	auipc	ra,0x0
    8001f862:	f76080e7          	jalr	-138(ra) # 8001f7d4 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$13guaranteed_eq17hae95a39236f9ef3eE>
    8001f866:	e02a                	sd	a0,0(sp)
    8001f868:	a009                	j	8001f86a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h309eb733b6984dd5E+0x1a>
    }
    8001f86a:	6502                	ld	a0,0(sp)
    8001f86c:	60e2                	ld	ra,24(sp)
    8001f86e:	6105                	addi	sp,sp,32
    8001f870:	8082                	ret

Disassembly of section .text._ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$13get_unchecked17h149838d98ef59845E:

000000008001f872 <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$13get_unchecked17h149838d98ef59845E>:
    ///     assert_eq!(x.get_unchecked(1), x.as_ptr().add(1));
    /// }
    /// ```
    #[unstable(feature = "slice_ptr_get", issue = "74265")]
    #[inline]
    pub unsafe fn get_unchecked<I>(self, index: I) -> *const I::Output
    8001f872:	7179                	addi	sp,sp,-48
    8001f874:	f406                	sd	ra,40(sp)
    8001f876:	e032                	sd	a2,0(sp)
    8001f878:	862e                	mv	a2,a1
    8001f87a:	85aa                	mv	a1,a0
    8001f87c:	6502                	ld	a0,0(sp)
    8001f87e:	e82e                	sd	a1,16(sp)
    8001f880:	ec32                	sd	a2,24(sp)
    8001f882:	f02a                	sd	a0,32(sp)
    where
        I: SliceIndex<[T]>,
    {
        // SAFETY: the caller ensures that `self` is dereferencable and `index` in-bounds.
        unsafe { index.get_unchecked(self) }
    8001f884:	00002097          	auipc	ra,0x2
    8001f888:	532080e7          	jalr	1330(ra) # 80021db6 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hb36b3c40d6b3daa6E>
    8001f88c:	e42a                	sd	a0,8(sp)
    8001f88e:	a009                	j	8001f890 <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$13get_unchecked17h149838d98ef59845E+0x1e>
    }
    8001f890:	6522                	ld	a0,8(sp)
    8001f892:	70a2                	ld	ra,40(sp)
    8001f894:	6145                	addi	sp,sp,48
    8001f896:	8082                	ret

Disassembly of section .text._ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$6as_ptr17hcf3eefd405b9d730E:

000000008001f898 <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$6as_ptr17hcf3eefd405b9d730E>:
    pub const fn as_ptr(self) -> *const T {
    8001f898:	1141                	addi	sp,sp,-16
    8001f89a:	e02a                	sd	a0,0(sp)
    8001f89c:	e42e                	sd	a1,8(sp)
    }
    8001f89e:	0141                	addi	sp,sp,16
    8001f8a0:	8082                	ret

Disassembly of section .text._ZN4core3mem7replace17h718d2b5d4e2666b3E:

000000008001f8a2 <_ZN4core3mem7replace17h718d2b5d4e2666b3E>:
pub const fn replace<T>(dest: &mut T, src: T) -> T {
    8001f8a2:	7139                	addi	sp,sp,-64
    8001f8a4:	fc06                	sd	ra,56(sp)
    8001f8a6:	e42e                	sd	a1,8(sp)
    8001f8a8:	e82a                	sd	a0,16(sp)
    8001f8aa:	f02a                	sd	a0,32(sp)
    8001f8ac:	f42e                	sd	a1,40(sp)
        let result = ptr::read(dest);
    8001f8ae:	00002097          	auipc	ra,0x2
    8001f8b2:	f6e080e7          	jalr	-146(ra) # 8002181c <_ZN4core3ptr4read17hc3975c6c06864098E>
    8001f8b6:	85aa                	mv	a1,a0
    8001f8b8:	ec2e                	sd	a1,24(sp)
    8001f8ba:	f82a                	sd	a0,48(sp)
    8001f8bc:	a009                	j	8001f8be <_ZN4core3mem7replace17h718d2b5d4e2666b3E+0x1c>
        ptr::write(dest, src);
    8001f8be:	65a2                	ld	a1,8(sp)
    8001f8c0:	6542                	ld	a0,16(sp)
    8001f8c2:	00002097          	auipc	ra,0x2
    8001f8c6:	f90080e7          	jalr	-112(ra) # 80021852 <_ZN4core3ptr5write17h087ddd4d9bf79c51E>
    8001f8ca:	a009                	j	8001f8cc <_ZN4core3mem7replace17h718d2b5d4e2666b3E+0x2a>
}
    8001f8cc:	6562                	ld	a0,24(sp)
    8001f8ce:	70e2                	ld	ra,56(sp)
    8001f8d0:	6121                	addi	sp,sp,64
    8001f8d2:	8082                	ret

Disassembly of section .text._ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE:

000000008001f8d4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE>:
    fn next(&mut self) -> Option<A> {
    8001f8d4:	715d                	addi	sp,sp,-80
    8001f8d6:	e486                	sd	ra,72(sp)
    8001f8d8:	ec2a                	sd	a0,24(sp)
    8001f8da:	fc2a                	sd	a0,56(sp)
        if self.start < self.end {
    8001f8dc:	00850593          	addi	a1,a0,8
    8001f8e0:	00000097          	auipc	ra,0x0
    8001f8e4:	0b2080e7          	jalr	178(ra) # 8001f992 <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17ha284226f6d671daaE>
    8001f8e8:	f02a                	sd	a0,32(sp)
    8001f8ea:	a009                	j	8001f8ec <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE+0x18>
    8001f8ec:	7502                	ld	a0,32(sp)
    8001f8ee:	4581                	li	a1,0
    8001f8f0:	00b50a63          	beq	a0,a1,8001f904 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE+0x30>
    8001f8f4:	a009                	j	8001f8f6 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE+0x22>
            let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };
    8001f8f6:	6562                	ld	a0,24(sp)
    8001f8f8:	00002097          	auipc	ra,0x2
    8001f8fc:	490080e7          	jalr	1168(ra) # 80021d88 <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$usize$GT$5clone17h2bd08456cf1cb28dE>
    8001f900:	e82a                	sd	a0,16(sp)
    8001f902:	a021                	j	8001f90a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE+0x36>
    8001f904:	4501                	li	a0,0
            None
    8001f906:	f42a                	sd	a0,40(sp)
        if self.start < self.end {
    8001f908:	a805                	j	8001f938 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE+0x64>
            let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };
    8001f90a:	6542                	ld	a0,16(sp)
    8001f90c:	4585                	li	a1,1
    8001f90e:	00002097          	auipc	ra,0x2
    8001f912:	23e080e7          	jalr	574(ra) # 80021b4c <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17h8a22fb325f3ddf5bE>
    8001f916:	85aa                	mv	a1,a0
    8001f918:	e42e                	sd	a1,8(sp)
    8001f91a:	e0aa                	sd	a0,64(sp)
    8001f91c:	a009                	j	8001f91e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE+0x4a>
            Some(mem::replace(&mut self.start, n))
    8001f91e:	65a2                	ld	a1,8(sp)
    8001f920:	6562                	ld	a0,24(sp)
    8001f922:	00000097          	auipc	ra,0x0
    8001f926:	f80080e7          	jalr	-128(ra) # 8001f8a2 <_ZN4core3mem7replace17h718d2b5d4e2666b3E>
    8001f92a:	e02a                	sd	a0,0(sp)
    8001f92c:	a009                	j	8001f92e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE+0x5a>
    8001f92e:	6502                	ld	a0,0(sp)
    8001f930:	f82a                	sd	a0,48(sp)
    8001f932:	4505                	li	a0,1
    8001f934:	f42a                	sd	a0,40(sp)
        if self.start < self.end {
    8001f936:	a009                	j	8001f938 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE+0x64>
    }
    8001f938:	7522                	ld	a0,40(sp)
    8001f93a:	75c2                	ld	a1,48(sp)
    8001f93c:	60a6                	ld	ra,72(sp)
    8001f93e:	6161                	addi	sp,sp,80
    8001f940:	8082                	ret

Disassembly of section .text._ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he0a8d93712e5493bE:

000000008001f942 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he0a8d93712e5493bE>:
    fn into_iter(self) -> I {
    8001f942:	1141                	addi	sp,sp,-16
    8001f944:	e02a                	sd	a0,0(sp)
    8001f946:	e42e                	sd	a1,8(sp)
    }
    8001f948:	0141                	addi	sp,sp,16
    8001f94a:	8082                	ret

Disassembly of section .text._ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17hbe490bb523b08a07E:

000000008001f94c <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17hbe490bb523b08a07E>:
                fn cmp(&self, other: &$t) -> Ordering {
    8001f94c:	7179                	addi	sp,sp,-48
    8001f94e:	e42e                	sd	a1,8(sp)
    8001f950:	e82a                	sd	a0,16(sp)
    8001f952:	f02a                	sd	a0,32(sp)
    8001f954:	f42e                	sd	a1,40(sp)
                    if *self < *other { Less }
    8001f956:	6108                	ld	a0,0(a0)
    8001f958:	618c                	ld	a1,0(a1)
    8001f95a:	00b57863          	bgeu	a0,a1,8001f96a <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17hbe490bb523b08a07E+0x1e>
    8001f95e:	a009                	j	8001f960 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17hbe490bb523b08a07E+0x14>
    8001f960:	0ff00513          	li	a0,255
    8001f964:	00a10fa3          	sb	a0,31(sp)
    8001f968:	a00d                	j	8001f98a <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17hbe490bb523b08a07E+0x3e>
                    else if *self == *other { Equal }
    8001f96a:	65a2                	ld	a1,8(sp)
    8001f96c:	6542                	ld	a0,16(sp)
    8001f96e:	6108                	ld	a0,0(a0)
    8001f970:	618c                	ld	a1,0(a1)
    8001f972:	00b51763          	bne	a0,a1,8001f980 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17hbe490bb523b08a07E+0x34>
    8001f976:	a009                	j	8001f978 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17hbe490bb523b08a07E+0x2c>
    8001f978:	4501                	li	a0,0
    8001f97a:	00a10fa3          	sb	a0,31(sp)
    8001f97e:	a029                	j	8001f988 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17hbe490bb523b08a07E+0x3c>
    8001f980:	4505                	li	a0,1
                    else { Greater }
    8001f982:	00a10fa3          	sb	a0,31(sp)
                    else if *self == *other { Equal }
    8001f986:	a009                	j	8001f988 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17hbe490bb523b08a07E+0x3c>
                    if *self < *other { Less }
    8001f988:	a009                	j	8001f98a <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17hbe490bb523b08a07E+0x3e>
                }
    8001f98a:	01f10503          	lb	a0,31(sp)
    8001f98e:	6145                	addi	sp,sp,48
    8001f990:	8082                	ret

Disassembly of section .text._ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17ha284226f6d671daaE:

000000008001f992 <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17ha284226f6d671daaE>:
                fn lt(&self, other: &$t) -> bool { (*self) < (*other) }
    8001f992:	1141                	addi	sp,sp,-16
    8001f994:	e02a                	sd	a0,0(sp)
    8001f996:	e42e                	sd	a1,8(sp)
    8001f998:	6108                	ld	a0,0(a0)
    8001f99a:	618c                	ld	a1,0(a1)
    8001f99c:	00b53533          	sltu	a0,a0,a1
    8001f9a0:	0141                	addi	sp,sp,16
    8001f9a2:	8082                	ret

Disassembly of section .text._ZN4core9panicking13assert_failed17h4e6d74c9d534b647E:

000000008001f9a4 <_ZN4core9panicking13assert_failed17h4e6d74c9d534b647E>:
pub fn assert_failed<T, U>(
    8001f9a4:	715d                	addi	sp,sp,-80
    8001f9a6:	883a                	mv	a6,a4
    8001f9a8:	e42e                	sd	a1,8(sp)
    8001f9aa:	e832                	sd	a2,16(sp)
    8001f9ac:	04a107a3          	sb	a0,79(sp)
    assert_failed_inner(kind, &left, &right, args)
    8001f9b0:	628c                	ld	a1,0(a3)
    8001f9b2:	ec2e                	sd	a1,24(sp)
    8001f9b4:	668c                	ld	a1,8(a3)
    8001f9b6:	f02e                	sd	a1,32(sp)
    8001f9b8:	6a8c                	ld	a1,16(a3)
    8001f9ba:	f42e                	sd	a1,40(sp)
    8001f9bc:	6e8c                	ld	a1,24(a3)
    8001f9be:	f82e                	sd	a1,48(sp)
    8001f9c0:	728c                	ld	a1,32(a3)
    8001f9c2:	fc2e                	sd	a1,56(sp)
    8001f9c4:	768c                	ld	a1,40(a3)
    8001f9c6:	e0ae                	sd	a1,64(sp)

000000008001f9c8 <.LBB0_1>:
    8001f9c8:	0000c717          	auipc	a4,0xc
    8001f9cc:	23870713          	addi	a4,a4,568 # 8002bc00 <.L__unnamed_1>
    8001f9d0:	002c                	addi	a1,sp,8
    8001f9d2:	0814                	addi	a3,sp,16
    8001f9d4:	083c                	addi	a5,sp,24
    8001f9d6:	863a                	mv	a2,a4
    8001f9d8:	00003097          	auipc	ra,0x3
    8001f9dc:	932080e7          	jalr	-1742(ra) # 8002230a <_ZN4core9panicking19assert_failed_inner17h4615d2e87cda8e50E>
	...

Disassembly of section .text._ZN4core3ops8function6FnOnce9call_once17h199d3571a582934bE:

000000008001f9e2 <_ZN4core3ops8function6FnOnce9call_once17h199d3571a582934bE>:
    8001f9e2:	7179                	addi	sp,sp,-48
    8001f9e4:	f406                	sd	ra,40(sp)
    8001f9e6:	e82a                	sd	a0,16(sp)
    8001f9e8:	ec2e                	sd	a1,24(sp)
    8001f9ea:	00000097          	auipc	ra,0x0
    8001f9ee:	f62080e7          	jalr	-158(ra) # 8001f94c <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17hbe490bb523b08a07E>
    8001f9f2:	e42a                	sd	a0,8(sp)
    8001f9f4:	a009                	j	8001f9f6 <_ZN4core3ops8function6FnOnce9call_once17h199d3571a582934bE+0x14>
    8001f9f6:	6522                	ld	a0,8(sp)
    8001f9f8:	70a2                	ld	ra,40(sp)
    8001f9fa:	6145                	addi	sp,sp,48
    8001f9fc:	8082                	ret

Disassembly of section .text._ZN4core3ptr30drop_in_place$LT$$RF$usize$GT$17h4738edf12535783bE:

000000008001f9fe <_ZN4core3ptr30drop_in_place$LT$$RF$usize$GT$17h4738edf12535783bE>:
pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
    8001f9fe:	1141                	addi	sp,sp,-16
    8001fa00:	e42a                	sd	a0,8(sp)
    8001fa02:	0141                	addi	sp,sp,16
    8001fa04:	8082                	ret

Disassembly of section .text._ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h145a0e5da1339a00E:

000000008001fa06 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h145a0e5da1339a00E>:
macro_rules! debug {
    ($($T:ident)*) => {$(
        #[stable(feature = "rust1", since = "1.0.0")]
        impl fmt::Debug for $T {
            #[inline]
            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
    8001fa06:	7139                	addi	sp,sp,-64
    8001fa08:	fc06                	sd	ra,56(sp)
    8001fa0a:	e42e                	sd	a1,8(sp)
    8001fa0c:	85aa                	mv	a1,a0
    8001fa0e:	6522                	ld	a0,8(sp)
    8001fa10:	e82e                	sd	a1,16(sp)
    8001fa12:	f42e                	sd	a1,40(sp)
    8001fa14:	f82a                	sd	a0,48(sp)
                if f.debug_lower_hex() {
    8001fa16:	00003097          	auipc	ra,0x3
    8001fa1a:	7c8080e7          	jalr	1992(ra) # 800231de <_ZN4core3fmt9Formatter15debug_lower_hex17h7c86defbf028d215E>
    8001fa1e:	ec2a                	sd	a0,24(sp)
    8001fa20:	a009                	j	8001fa22 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h145a0e5da1339a00E+0x1c>
    8001fa22:	6562                	ld	a0,24(sp)
    8001fa24:	4581                	li	a1,0
    8001fa26:	00b50c63          	beq	a0,a1,8001fa3e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h145a0e5da1339a00E+0x38>
    8001fa2a:	a009                	j	8001fa2c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h145a0e5da1339a00E+0x26>
                    fmt::LowerHex::fmt(self, f)
    8001fa2c:	65a2                	ld	a1,8(sp)
    8001fa2e:	6542                	ld	a0,16(sp)
    8001fa30:	00005097          	auipc	ra,0x5
    8001fa34:	984080e7          	jalr	-1660(ra) # 800243b4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h760b07191d46b3f2E>
    8001fa38:	02a103a3          	sb	a0,39(sp)
    8001fa3c:	a801                	j	8001fa4c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h145a0e5da1339a00E+0x46>
                } else if f.debug_upper_hex() {
    8001fa3e:	6522                	ld	a0,8(sp)
    8001fa40:	00003097          	auipc	ra,0x3
    8001fa44:	7a8080e7          	jalr	1960(ra) # 800231e8 <_ZN4core3fmt9Formatter15debug_upper_hex17hdf276d50be1e3931E>
    8001fa48:	e02a                	sd	a0,0(sp)
    8001fa4a:	a011                	j	8001fa4e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h145a0e5da1339a00E+0x48>
                if f.debug_lower_hex() {
    8001fa4c:	a81d                	j	8001fa82 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h145a0e5da1339a00E+0x7c>
    8001fa4e:	6502                	ld	a0,0(sp)
    8001fa50:	4581                	li	a1,0
                } else if f.debug_upper_hex() {
    8001fa52:	00b50c63          	beq	a0,a1,8001fa6a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h145a0e5da1339a00E+0x64>
    8001fa56:	a009                	j	8001fa58 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h145a0e5da1339a00E+0x52>
                    fmt::UpperHex::fmt(self, f)
    8001fa58:	65a2                	ld	a1,8(sp)
    8001fa5a:	6542                	ld	a0,16(sp)
    8001fa5c:	00005097          	auipc	ra,0x5
    8001fa60:	9d2080e7          	jalr	-1582(ra) # 8002442e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17h66734376af0f4671E>
    8001fa64:	02a103a3          	sb	a0,39(sp)
    8001fa68:	a811                	j	8001fa7c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h145a0e5da1339a00E+0x76>
                } else {
                    fmt::Display::fmt(self, f)
    8001fa6a:	65a2                	ld	a1,8(sp)
    8001fa6c:	6542                	ld	a0,16(sp)
    8001fa6e:	00005097          	auipc	ra,0x5
    8001fa72:	e94080e7          	jalr	-364(ra) # 80024902 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h9c6c4af1578f7c29E>
    8001fa76:	02a103a3          	sb	a0,39(sp)
    8001fa7a:	a011                	j	8001fa7e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h145a0e5da1339a00E+0x78>
                } else if f.debug_upper_hex() {
    8001fa7c:	a011                	j	8001fa80 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h145a0e5da1339a00E+0x7a>
    8001fa7e:	a009                	j	8001fa80 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h145a0e5da1339a00E+0x7a>
                if f.debug_lower_hex() {
    8001fa80:	a009                	j	8001fa82 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h145a0e5da1339a00E+0x7c>
                }
            }
    8001fa82:	02714503          	lbu	a0,39(sp)
    8001fa86:	70e2                	ld	ra,56(sp)
    8001fa88:	6121                	addi	sp,sp,64
    8001fa8a:	8082                	ret

Disassembly of section .text._ZN9allocator11BuddySystem4init17h0838f8d4c4026c43E:

000000008001fa8c <_ZN9allocator11BuddySystem4init17h0838f8d4c4026c43E>:

    /// Init the buddy system allocator at [start, end).
    /// `leaf_size` and `max_alignment` must be a power of 2.
    /// `max_alignment` is the biggest alignment of a [`alloc::alloc::Layout`] the user can request.
    /// SAFETY: It should only be called once and before any subsequent call to this buddy system.
    pub unsafe fn init(&mut self, start: usize, end: usize, leaf_size: usize, max_alignment: usize)
    8001fa8c:	d1010113          	addi	sp,sp,-752
    8001fa90:	2e113423          	sd	ra,744(sp)
    8001fa94:	eeba                	sd	a4,344(sp)
    8001fa96:	f2b6                	sd	a3,352(sp)
    8001fa98:	f6b2                	sd	a2,360(sp)
    8001fa9a:	faae                	sd	a1,368(sp)
    8001fa9c:	feaa                	sd	a0,376(sp)
    8001fa9e:	20a13023          	sd	a0,512(sp)
    8001faa2:	20b13423          	sd	a1,520(sp)
    8001faa6:	20c13823          	sd	a2,528(sp)
    8001faaa:	20d13c23          	sd	a3,536(sp)
    8001faae:	22e13023          	sd	a4,544(sp)
        -> Result<(), &'static str>
    {
        if self.initialized {
    8001fab2:	03854503          	lbu	a0,56(a0)
    8001fab6:	8905                	andi	a0,a0,1
    8001fab8:	4581                	li	a1,0
    8001faba:	00b50b63          	beq	a0,a1,8001fad0 <.LBB1_78+0x10>
    8001fabe:	a009                	j	8001fac0 <.LBB1_78>

000000008001fac0 <.LBB1_78>:
            return Err("init twice");
    8001fac0:	0000c517          	auipc	a0,0xc
    8001fac4:	16050513          	addi	a0,a0,352 # 8002bc20 <.L__unnamed_1>
    8001fac8:	e32a                	sd	a0,384(sp)
    8001faca:	4529                	li	a0,10
    8001facc:	e72a                	sd	a0,392(sp)
//! Thread-unsafe, panic-free buddy system allocator.
    8001face:	a139                	j	8001fedc <.LBB1_81+0x20>
        }

        if end - start < leaf_size {
    8001fad0:	7536                	ld	a0,360(sp)
    8001fad2:	75d6                	ld	a1,368(sp)
    8001fad4:	40b505b3          	sub	a1,a0,a1
    8001fad8:	eaae                	sd	a1,336(sp)
    8001fada:	40b56863          	bltu	a0,a1,8001feea <.LBB1_82>
    8001fade:	a009                	j	8001fae0 <.LBB1_78+0x20>
    8001fae0:	6556                	ld	a0,336(sp)
    8001fae2:	7596                	ld	a1,352(sp)
    8001fae4:	00b57b63          	bgeu	a0,a1,8001fafa <.LBB1_79+0x10>
    8001fae8:	a009                	j	8001faea <.LBB1_79>

000000008001faea <.LBB1_79>:
            return Err("range too small");
    8001faea:	0000c517          	auipc	a0,0xc
    8001faee:	1a750513          	addi	a0,a0,423 # 8002bc91 <.L__unnamed_2>
    8001faf2:	e32a                	sd	a0,384(sp)
    8001faf4:	453d                	li	a0,15
    8001faf6:	e72a                	sd	a0,392(sp)
//! Thread-unsafe, panic-free buddy system allocator.
    8001faf8:	a6d5                	j	8001fedc <.LBB1_81+0x20>
        }

        if !leaf_size.is_power_of_two() || !max_alignment.is_power_of_two() {
    8001fafa:	7516                	ld	a0,352(sp)
    8001fafc:	00002097          	auipc	ra,0x2
    8001fb00:	ec8080e7          	jalr	-312(ra) # 800219c4 <_ZN4core3num23_$LT$impl$u20$usize$GT$15is_power_of_two17h4d07b92e227ceed8E>
    8001fb04:	e6aa                	sd	a0,328(sp)
    8001fb06:	a02d                	j	8001fb30 <.LBB1_79+0x46>
    8001fb08:	4505                	li	a0,1
    8001fb0a:	18a10ba3          	sb	a0,407(sp)
    8001fb0e:	a821                	j	8001fb26 <.LBB1_79+0x3c>
    8001fb10:	4501                	li	a0,0
    8001fb12:	18a10ba3          	sb	a0,407(sp)
    8001fb16:	a801                	j	8001fb26 <.LBB1_79+0x3c>
    8001fb18:	6576                	ld	a0,344(sp)
    8001fb1a:	00002097          	auipc	ra,0x2
    8001fb1e:	eaa080e7          	jalr	-342(ra) # 800219c4 <_ZN4core3num23_$LT$impl$u20$usize$GT$15is_power_of_two17h4d07b92e227ceed8E>
    8001fb22:	e2aa                	sd	a0,320(sp)
    8001fb24:	a819                	j	8001fb3a <.LBB1_79+0x50>
    8001fb26:	19714503          	lbu	a0,407(sp)
    8001fb2a:	8905                	andi	a0,a0,1
    8001fb2c:	ed01                	bnez	a0,8001fb44 <.LBB1_80>
    8001fb2e:	a025                	j	8001fb56 <.LBB1_80+0x12>
    8001fb30:	6536                	ld	a0,328(sp)
    8001fb32:	4581                	li	a1,0
    8001fb34:	fcb50ae3          	beq	a0,a1,8001fb08 <.LBB1_79+0x1e>
    8001fb38:	b7c5                	j	8001fb18 <.LBB1_79+0x2e>
    8001fb3a:	6516                	ld	a0,320(sp)
    8001fb3c:	4581                	li	a1,0
    8001fb3e:	fcb505e3          	beq	a0,a1,8001fb08 <.LBB1_79+0x1e>
    8001fb42:	b7f9                	j	8001fb10 <.LBB1_79+0x26>

000000008001fb44 <.LBB1_80>:
            return Err("leaf size or max_alignment not 2^n");
    8001fb44:	0000c517          	auipc	a0,0xc
    8001fb48:	15c50513          	addi	a0,a0,348 # 8002bca0 <.L__unnamed_3>
    8001fb4c:	e32a                	sd	a0,384(sp)
    8001fb4e:	02200513          	li	a0,34
    8001fb52:	e72a                	sd	a0,392(sp)
//! Thread-unsafe, panic-free buddy system allocator.
    8001fb54:	a661                	j	8001fedc <.LBB1_81+0x20>
        }
        self.leaf_size = leaf_size;
    8001fb56:	65f6                	ld	a1,344(sp)
    8001fb58:	7516                	ld	a0,352(sp)
    8001fb5a:	7676                	ld	a2,376(sp)
    8001fb5c:	ee08                	sd	a0,24(a2)
        self.max_alignment = max_alignment;
    8001fb5e:	f20c                	sd	a1,32(a2)

        // make sure start and end are both leaf aligned
        // and record the heap memory range: [self.base, self.end)
        let mut cur: usize = round_up(start, cmp::max(leaf_size, max_alignment));
    8001fb60:	00002097          	auipc	ra,0x2
    8001fb64:	37a080e7          	jalr	890(ra) # 80021eda <_ZN4core3cmp3max17h3dc8da765fcdebd4E>
    8001fb68:	fe2a                	sd	a0,312(sp)
    8001fb6a:	a009                	j	8001fb6c <.LBB1_80+0x28>
    8001fb6c:	75f2                	ld	a1,312(sp)
    8001fb6e:	7556                	ld	a0,368(sp)
    8001fb70:	00001097          	auipc	ra,0x1
    8001fb74:	726080e7          	jalr	1830(ra) # 80021296 <_ZN9allocator8round_up17h09c23390ccb46398E>
    8001fb78:	ef2a                	sd	a0,408(sp)
    8001fb7a:	a009                	j	8001fb7c <.LBB1_80+0x38>
        self.base = cur;
    8001fb7c:	65f6                	ld	a1,344(sp)
    8001fb7e:	7516                	ld	a0,352(sp)
    8001fb80:	76f6                	ld	a3,376(sp)
    8001fb82:	667a                	ld	a2,408(sp)
    8001fb84:	e290                	sd	a2,0(a3)
        self.actual_end = round_down(end, cmp::max(leaf_size, max_alignment));
    8001fb86:	00002097          	auipc	ra,0x2
    8001fb8a:	354080e7          	jalr	852(ra) # 80021eda <_ZN4core3cmp3max17h3dc8da765fcdebd4E>
    8001fb8e:	fa2a                	sd	a0,304(sp)
    8001fb90:	a009                	j	8001fb92 <.LBB1_80+0x4e>
    8001fb92:	75d2                	ld	a1,304(sp)
    8001fb94:	7536                	ld	a0,360(sp)
    8001fb96:	00001097          	auipc	ra,0x1
    8001fb9a:	7c2080e7          	jalr	1986(ra) # 80021358 <_ZN9allocator10round_down17h97bc9e681a0cc273E>
    8001fb9e:	f62a                	sd	a0,296(sp)
    8001fba0:	a009                	j	8001fba2 <.LBB1_80+0x5e>
    8001fba2:	7532                	ld	a0,296(sp)
    8001fba4:	75f6                	ld	a1,376(sp)
    8001fba6:	e588                	sd	a0,8(a1)

        // compute the max pow of 2 smaller than size of [self.base, self.actual_end)
        self.nsizes = log2((self.actual_end-cur)/leaf_size) + 1;
    8001fba8:	65fa                	ld	a1,408(sp)
    8001fbaa:	40b505b3          	sub	a1,a0,a1
    8001fbae:	f22e                	sd	a1,288(sp)
    8001fbb0:	34b56c63          	bltu	a0,a1,8001ff08 <.LBB1_84>
    8001fbb4:	a009                	j	8001fbb6 <.LBB1_80+0x72>
    8001fbb6:	7516                	ld	a0,352(sp)
    8001fbb8:	4581                	li	a1,0
    8001fbba:	36b50663          	beq	a0,a1,8001ff26 <.LBB1_86>
    8001fbbe:	a009                	j	8001fbc0 <.LBB1_80+0x7c>
    8001fbc0:	7512                	ld	a0,288(sp)
    8001fbc2:	7596                	ld	a1,352(sp)
    8001fbc4:	02b55533          	divu	a0,a0,a1
    8001fbc8:	00001097          	auipc	ra,0x1
    8001fbcc:	7fc080e7          	jalr	2044(ra) # 800213c4 <_ZN9allocator4log217h8cd213ee718a0479E>
    8001fbd0:	ee2a                	sd	a0,280(sp)
    8001fbd2:	a009                	j	8001fbd4 <.LBB1_80+0x90>
    8001fbd4:	65f2                	ld	a1,280(sp)
    8001fbd6:	00158513          	addi	a0,a1,1
    8001fbda:	ea2a                	sd	a0,272(sp)
    8001fbdc:	36b56363          	bltu	a0,a1,8001ff42 <.LBB1_88>
    8001fbe0:	a009                	j	8001fbe2 <.LBB1_80+0x9e>
    8001fbe2:	7576                	ld	a0,376(sp)
    8001fbe4:	65d2                	ld	a1,272(sp)
    8001fbe6:	e90c                	sd	a1,16(a0)
        if self.actual_end - cur > self.blk_size(self.max_size()) {
    8001fbe8:	6508                	ld	a0,8(a0)
    8001fbea:	65fa                	ld	a1,408(sp)
    8001fbec:	40b505b3          	sub	a1,a0,a1
    8001fbf0:	e62e                	sd	a1,264(sp)
    8001fbf2:	36b56663          	bltu	a0,a1,8001ff5e <.LBB1_90>
    8001fbf6:	a009                	j	8001fbf8 <.LBB1_80+0xb4>
    8001fbf8:	7576                	ld	a0,376(sp)
    8001fbfa:	00001097          	auipc	ra,0x1
    8001fbfe:	0f6080e7          	jalr	246(ra) # 80020cf0 <_ZN9allocator11BuddySystem8max_size17hef7a09e8b41b3266E>
    8001fc02:	e22a                	sd	a0,256(sp)
    8001fc04:	a009                	j	8001fc06 <.LBB1_80+0xc2>
    8001fc06:	6592                	ld	a1,256(sp)
    8001fc08:	7576                	ld	a0,376(sp)
    8001fc0a:	00001097          	auipc	ra,0x1
    8001fc0e:	3bc080e7          	jalr	956(ra) # 80020fc6 <_ZN9allocator11BuddySystem8blk_size17h8693939904cd2981E>
    8001fc12:	fdaa                	sd	a0,248(sp)
    8001fc14:	a009                	j	8001fc16 <.LBB1_80+0xd2>
    8001fc16:	756e                	ld	a0,248(sp)
    8001fc18:	65b2                	ld	a1,264(sp)
    8001fc1a:	00b57b63          	bgeu	a0,a1,8001fc30 <.LBB1_80+0xec>
    8001fc1e:	a009                	j	8001fc20 <.LBB1_80+0xdc>
            self.nsizes += 1;
    8001fc20:	7576                	ld	a0,376(sp)
    8001fc22:	690c                	ld	a1,16(a0)
    8001fc24:	00158513          	addi	a0,a1,1
    8001fc28:	f9aa                	sd	a0,240(sp)
    8001fc2a:	34b56963          	bltu	a0,a1,8001ff7c <.LBB1_92>
    8001fc2e:	a011                	j	8001fc32 <.LBB1_80+0xee>
        if self.actual_end - cur > self.blk_size(self.max_size()) {
    8001fc30:	a029                	j	8001fc3a <.LBB1_80+0xf6>
            self.nsizes += 1;
    8001fc32:	754e                	ld	a0,240(sp)
    8001fc34:	75f6                	ld	a1,376(sp)
    8001fc36:	e988                	sd	a0,16(a1)
        if self.actual_end - cur > self.blk_size(self.max_size()) {
    8001fc38:	a009                	j	8001fc3a <.LBB1_80+0xf6>
        }

        // alloc buddy infos
        // SAFETY: init all of the BuddyInfo
        let info_slice_ptr = init_slice_empty(&mut cur, self.nsizes);
    8001fc3a:	7576                	ld	a0,376(sp)
    8001fc3c:	690c                	ld	a1,16(a0)
    8001fc3e:	0b28                	addi	a0,sp,408
    8001fc40:	00002097          	auipc	ra,0x2
    8001fc44:	0a0080e7          	jalr	160(ra) # 80021ce0 <_ZN9allocator16init_slice_empty17h570498bae7ef4c88E>
    8001fc48:	862a                	mv	a2,a0
    8001fc4a:	f1b2                	sd	a2,224(sp)
    8001fc4c:	862e                	mv	a2,a1
    8001fc4e:	f5b2                	sd	a2,232(sp)
    8001fc50:	22a13423          	sd	a0,552(sp)
    8001fc54:	22b13823          	sd	a1,560(sp)
    8001fc58:	a009                	j	8001fc5a <.LBB1_80+0x116>
        self.infos.as_mut_ptr().write(info_slice_ptr);
    8001fc5a:	7576                	ld	a0,376(sp)
    8001fc5c:	02850513          	addi	a0,a0,40
    8001fc60:	edaa                	sd	a0,216(sp)
    8001fc62:	2ca13823          	sd	a0,720(sp)
    8001fc66:	a009                	j	8001fc68 <.LBB1_80+0x124>
    8001fc68:	762e                	ld	a2,232(sp)
    8001fc6a:	758e                	ld	a1,224(sp)
    8001fc6c:	656e                	ld	a0,216(sp)
    8001fc6e:	00002097          	auipc	ra,0x2
    8001fc72:	f1e080e7          	jalr	-226(ra) # 80021b8c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17h69211318640bf224E>
    8001fc76:	a009                	j	8001fc78 <.LBB1_80+0x134>

        // init free list and alloc space for alloc field
        for i in 0..self.nsizes {
    8001fc78:	7576                	ld	a0,376(sp)
    8001fc7a:	690c                	ld	a1,16(a0)
    8001fc7c:	4501                	li	a0,0
    8001fc7e:	f32a                	sd	a0,416(sp)
    8001fc80:	f72e                	sd	a1,424(sp)
    8001fc82:	00000097          	auipc	ra,0x0
    8001fc86:	cc0080e7          	jalr	-832(ra) # 8001f942 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he0a8d93712e5493bE>
    8001fc8a:	e5aa                	sd	a0,200(sp)
    8001fc8c:	e9ae                	sd	a1,208(sp)
    8001fc8e:	a009                	j	8001fc90 <.LBB1_80+0x14c>
    8001fc90:	654e                	ld	a0,208(sp)
    8001fc92:	65ae                	ld	a1,200(sp)
    8001fc94:	fb2e                	sd	a1,432(sp)
    8001fc96:	ff2a                	sd	a0,440(sp)
    8001fc98:	a009                	j	8001fc9a <.LBB1_80+0x156>
    8001fc9a:	1b08                	addi	a0,sp,432
    8001fc9c:	00000097          	auipc	ra,0x0
    8001fca0:	c38080e7          	jalr	-968(ra) # 8001f8d4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE>
    8001fca4:	e3aa                	sd	a0,448(sp)
    8001fca6:	e7ae                	sd	a1,456(sp)
    8001fca8:	a009                	j	8001fcaa <.LBB1_80+0x166>
    8001fcaa:	651e                	ld	a0,448(sp)
    8001fcac:	4581                	li	a1,0
    8001fcae:	00b50463          	beq	a0,a1,8001fcb6 <.LBB1_80+0x172>
    8001fcb2:	a009                	j	8001fcb4 <.LBB1_80+0x170>
    8001fcb4:	a831                	j	8001fcd0 <.LBB1_80+0x18c>
            info.alloc.as_mut_ptr().write(alloc_slice_ptr);
        }

        // alloc space for split field
        // blocks of size 0 no need to split
        for i in 1..self.nsizes {
    8001fcb6:	7576                	ld	a0,376(sp)
    8001fcb8:	690c                	ld	a1,16(a0)
    8001fcba:	4505                	li	a0,1
    8001fcbc:	ebaa                	sd	a0,464(sp)
    8001fcbe:	efae                	sd	a1,472(sp)
    8001fcc0:	00000097          	auipc	ra,0x0
    8001fcc4:	c82080e7          	jalr	-894(ra) # 8001f942 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he0a8d93712e5493bE>
    8001fcc8:	fd2a                	sd	a0,184(sp)
    8001fcca:	e1ae                	sd	a1,192(sp)
    8001fccc:	a879                	j	8001fd6a <.LBB1_80+0x226>
        for i in 0..self.nsizes {
    8001fcce:	0000                	unimp
    8001fcd0:	7576                	ld	a0,376(sp)
    8001fcd2:	65be                	ld	a1,456(sp)
    8001fcd4:	f52e                	sd	a1,168(sp)
    8001fcd6:	22b13c23          	sd	a1,568(sp)
    8001fcda:	24b13023          	sd	a1,576(sp)
    8001fcde:	24b13423          	sd	a1,584(sp)
            let nblk = self.n_blk(i);
    8001fce2:	00001097          	auipc	ra,0x1
    8001fce6:	044080e7          	jalr	68(ra) # 80020d26 <_ZN9allocator11BuddySystem5n_blk17hdff1460b10f7c769E>
    8001fcea:	85aa                	mv	a1,a0
    8001fcec:	f92e                	sd	a1,176(sp)
    8001fcee:	24a13823          	sd	a0,592(sp)
    8001fcf2:	a009                	j	8001fcf4 <.LBB1_80+0x1b0>
            let info = self.get_info_mut(i);
    8001fcf4:	75aa                	ld	a1,168(sp)
    8001fcf6:	7576                	ld	a0,376(sp)
    8001fcf8:	00001097          	auipc	ra,0x1
    8001fcfc:	fa0080e7          	jalr	-96(ra) # 80020c98 <_ZN9allocator11BuddySystem12get_info_mut17h828847c6ad79cffaE>
    8001fd00:	85aa                	mv	a1,a0
    8001fd02:	f12e                	sd	a1,160(sp)
    8001fd04:	24a13c23          	sd	a0,600(sp)
    8001fd08:	a009                	j	8001fd0a <.LBB1_80+0x1c6>
            info.free.init();
    8001fd0a:	750a                	ld	a0,160(sp)
    8001fd0c:	00002097          	auipc	ra,0x2
    8001fd10:	8b8080e7          	jalr	-1864(ra) # 800215c4 <_ZN9allocator4list4List4init17ha2ca564ea80bf5d5E>
    8001fd14:	a009                	j	8001fd16 <.LBB1_80+0x1d2>
            let alloc_size = round_up(nblk, 8)/8;
    8001fd16:	754a                	ld	a0,176(sp)
    8001fd18:	45a1                	li	a1,8
    8001fd1a:	00001097          	auipc	ra,0x1
    8001fd1e:	57c080e7          	jalr	1404(ra) # 80021296 <_ZN9allocator8round_up17h09c23390ccb46398E>
    8001fd22:	ed2a                	sd	a0,152(sp)
    8001fd24:	a009                	j	8001fd26 <.LBB1_80+0x1e2>
    8001fd26:	656a                	ld	a0,152(sp)
    8001fd28:	00355593          	srli	a1,a0,0x3
    8001fd2c:	26b13023          	sd	a1,608(sp)
    8001fd30:	0b28                	addi	a0,sp,408
            let alloc_slice_ptr = init_slice_empty(&mut cur, alloc_size);
    8001fd32:	00002097          	auipc	ra,0x2
    8001fd36:	f14080e7          	jalr	-236(ra) # 80021c46 <_ZN9allocator16init_slice_empty17h3fa3ac5493bc8701E>
    8001fd3a:	862a                	mv	a2,a0
    8001fd3c:	e532                	sd	a2,136(sp)
    8001fd3e:	862e                	mv	a2,a1
    8001fd40:	e932                	sd	a2,144(sp)
    8001fd42:	26a13423          	sd	a0,616(sp)
    8001fd46:	26b13823          	sd	a1,624(sp)
    8001fd4a:	a009                	j	8001fd4c <.LBB1_80+0x208>
            info.alloc.as_mut_ptr().write(alloc_slice_ptr);
    8001fd4c:	750a                	ld	a0,160(sp)
    8001fd4e:	0541                	addi	a0,a0,16
    8001fd50:	e12a                	sd	a0,128(sp)
    8001fd52:	2ca13c23          	sd	a0,728(sp)
    8001fd56:	a009                	j	8001fd58 <.LBB1_80+0x214>
    8001fd58:	664a                	ld	a2,144(sp)
    8001fd5a:	65aa                	ld	a1,136(sp)
    8001fd5c:	650a                	ld	a0,128(sp)
    8001fd5e:	00000097          	auipc	ra,0x0
    8001fd62:	9c4080e7          	jalr	-1596(ra) # 8001f722 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17h8b37e8181b720bd0E>
    8001fd66:	a009                	j	8001fd68 <.LBB1_80+0x224>
        for i in 0..self.nsizes {
    8001fd68:	bf0d                	j	8001fc9a <.LBB1_80+0x156>
        for i in 1..self.nsizes {
    8001fd6a:	650e                	ld	a0,192(sp)
    8001fd6c:	75ea                	ld	a1,184(sp)
    8001fd6e:	f3ae                	sd	a1,480(sp)
    8001fd70:	f7aa                	sd	a0,488(sp)
    8001fd72:	a009                	j	8001fd74 <.LBB1_80+0x230>
    8001fd74:	1388                	addi	a0,sp,480
    8001fd76:	00000097          	auipc	ra,0x0
    8001fd7a:	b5e080e7          	jalr	-1186(ra) # 8001f8d4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE>
    8001fd7e:	fbaa                	sd	a0,496(sp)
    8001fd80:	ffae                	sd	a1,504(sp)
    8001fd82:	a009                	j	8001fd84 <.LBB1_80+0x240>
    8001fd84:	755e                	ld	a0,496(sp)
    8001fd86:	4581                	li	a1,0
    8001fd88:	00b50463          	beq	a0,a1,8001fd90 <.LBB1_80+0x24c>
    8001fd8c:	a009                	j	8001fd8e <.LBB1_80+0x24a>
    8001fd8e:	a811                	j	8001fda2 <.LBB1_80+0x25e>
            let split_slice_ptr = init_slice_empty(&mut cur, split_size);
            info.split.as_mut_ptr().write(split_slice_ptr);
        }

        // cur address may not be aligned now
        cur = round_up(cur, leaf_size);
    8001fd90:	7596                	ld	a1,352(sp)
    8001fd92:	657a                	ld	a0,408(sp)
    8001fd94:	00001097          	auipc	ra,0x1
    8001fd98:	502080e7          	jalr	1282(ra) # 80021296 <_ZN9allocator8round_up17h09c23390ccb46398E>
    8001fd9c:	fcaa                	sd	a0,120(sp)
    8001fd9e:	a851                	j	8001fe32 <.LBB1_80+0x2ee>
        for i in 1..self.nsizes {
    8001fda0:	0000                	unimp
    8001fda2:	7576                	ld	a0,376(sp)
    8001fda4:	75fe                	ld	a1,504(sp)
    8001fda6:	f4ae                	sd	a1,104(sp)
    8001fda8:	26b13c23          	sd	a1,632(sp)
    8001fdac:	28b13023          	sd	a1,640(sp)
    8001fdb0:	28b13423          	sd	a1,648(sp)
            let nblk = self.n_blk(i);
    8001fdb4:	00001097          	auipc	ra,0x1
    8001fdb8:	f72080e7          	jalr	-142(ra) # 80020d26 <_ZN9allocator11BuddySystem5n_blk17hdff1460b10f7c769E>
    8001fdbc:	85aa                	mv	a1,a0
    8001fdbe:	f8ae                	sd	a1,112(sp)
    8001fdc0:	28a13823          	sd	a0,656(sp)
    8001fdc4:	a009                	j	8001fdc6 <.LBB1_80+0x282>
            let info = self.get_info_mut(i);
    8001fdc6:	75a6                	ld	a1,104(sp)
    8001fdc8:	7576                	ld	a0,376(sp)
    8001fdca:	00001097          	auipc	ra,0x1
    8001fdce:	ece080e7          	jalr	-306(ra) # 80020c98 <_ZN9allocator11BuddySystem12get_info_mut17h828847c6ad79cffaE>
    8001fdd2:	85aa                	mv	a1,a0
    8001fdd4:	f0ae                	sd	a1,96(sp)
    8001fdd6:	28a13c23          	sd	a0,664(sp)
    8001fdda:	a009                	j	8001fddc <.LBB1_80+0x298>
            let split_size = round_up(nblk, 8)/8;
    8001fddc:	7546                	ld	a0,112(sp)
    8001fdde:	45a1                	li	a1,8
    8001fde0:	00001097          	auipc	ra,0x1
    8001fde4:	4b6080e7          	jalr	1206(ra) # 80021296 <_ZN9allocator8round_up17h09c23390ccb46398E>
    8001fde8:	ecaa                	sd	a0,88(sp)
    8001fdea:	a009                	j	8001fdec <.LBB1_80+0x2a8>
    8001fdec:	6566                	ld	a0,88(sp)
    8001fdee:	00355593          	srli	a1,a0,0x3
    8001fdf2:	2ab13023          	sd	a1,672(sp)
    8001fdf6:	0b28                	addi	a0,sp,408
            let split_slice_ptr = init_slice_empty(&mut cur, split_size);
    8001fdf8:	00002097          	auipc	ra,0x2
    8001fdfc:	e4e080e7          	jalr	-434(ra) # 80021c46 <_ZN9allocator16init_slice_empty17h3fa3ac5493bc8701E>
    8001fe00:	862a                	mv	a2,a0
    8001fe02:	e4b2                	sd	a2,72(sp)
    8001fe04:	862e                	mv	a2,a1
    8001fe06:	e8b2                	sd	a2,80(sp)
    8001fe08:	2aa13423          	sd	a0,680(sp)
    8001fe0c:	2ab13823          	sd	a1,688(sp)
    8001fe10:	a009                	j	8001fe12 <.LBB1_80+0x2ce>
            info.split.as_mut_ptr().write(split_slice_ptr);
    8001fe12:	7506                	ld	a0,96(sp)
    8001fe14:	02050513          	addi	a0,a0,32
    8001fe18:	e0aa                	sd	a0,64(sp)
    8001fe1a:	2ea13023          	sd	a0,736(sp)
    8001fe1e:	a009                	j	8001fe20 <.LBB1_80+0x2dc>
    8001fe20:	6646                	ld	a2,80(sp)
    8001fe22:	65a6                	ld	a1,72(sp)
    8001fe24:	6506                	ld	a0,64(sp)
    8001fe26:	00000097          	auipc	ra,0x0
    8001fe2a:	8fc080e7          	jalr	-1796(ra) # 8001f722 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17h8b37e8181b720bd0E>
    8001fe2e:	a009                	j	8001fe30 <.LBB1_80+0x2ec>
        for i in 1..self.nsizes {
    8001fe30:	b791                	j	8001fd74 <.LBB1_80+0x230>
        cur = round_up(cur, leaf_size);
    8001fe32:	75e6                	ld	a1,120(sp)
    8001fe34:	7576                	ld	a0,376(sp)
    8001fe36:	ef2e                	sd	a1,408(sp)

        // meta data lies between [base, cur)
        let meta = self.mark_meta(cur);
    8001fe38:	00001097          	auipc	ra,0x1
    8001fe3c:	8f4080e7          	jalr	-1804(ra) # 8002072c <_ZN9allocator11BuddySystem9mark_meta17h01c7ae17553a6764E>
    8001fe40:	85aa                	mv	a1,a0
    8001fe42:	fc2e                	sd	a1,56(sp)
    8001fe44:	2aa13c23          	sd	a0,696(sp)
    8001fe48:	a009                	j	8001fe4a <.LBB1_80+0x306>

        // unavailable data lies between [self.actual_end, 2^(self.nsizes-1))
        // due to the memory size of buddy system is a power of 2
        let unavail = self.mark_unavail();
    8001fe4a:	7576                	ld	a0,376(sp)
    8001fe4c:	00001097          	auipc	ra,0x1
    8001fe50:	934080e7          	jalr	-1740(ra) # 80020780 <_ZN9allocator11BuddySystem12mark_unavail17h19653a018281c6a8E>
    8001fe54:	85aa                	mv	a1,a0
    8001fe56:	f82e                	sd	a1,48(sp)
    8001fe58:	2ca13023          	sd	a0,704(sp)
    8001fe5c:	a009                	j	8001fe5e <.LBB1_80+0x31a>
        
        // init free regions
        let free = self.init_free(cur);
    8001fe5e:	7576                	ld	a0,376(sp)
    8001fe60:	65fa                	ld	a1,408(sp)
    8001fe62:	00001097          	auipc	ra,0x1
    8001fe66:	bd0080e7          	jalr	-1072(ra) # 80020a32 <_ZN9allocator11BuddySystem9init_free17h25e98e7c902c4f06E>
    8001fe6a:	85aa                	mv	a1,a0
    8001fe6c:	f42e                	sd	a1,40(sp)
    8001fe6e:	2ca13423          	sd	a0,712(sp)
    8001fe72:	a009                	j	8001fe74 <.LBB1_80+0x330>

        // check total memory
        if free != self.blk_size(self.max_size()) - meta - unavail {
    8001fe74:	7576                	ld	a0,376(sp)
    8001fe76:	00001097          	auipc	ra,0x1
    8001fe7a:	e7a080e7          	jalr	-390(ra) # 80020cf0 <_ZN9allocator11BuddySystem8max_size17hef7a09e8b41b3266E>
    8001fe7e:	f02a                	sd	a0,32(sp)
    8001fe80:	a009                	j	8001fe82 <.LBB1_80+0x33e>
    8001fe82:	7582                	ld	a1,32(sp)
    8001fe84:	7576                	ld	a0,376(sp)
    8001fe86:	00001097          	auipc	ra,0x1
    8001fe8a:	140080e7          	jalr	320(ra) # 80020fc6 <_ZN9allocator11BuddySystem8blk_size17h8693939904cd2981E>
    8001fe8e:	ec2a                	sd	a0,24(sp)
    8001fe90:	a009                	j	8001fe92 <.LBB1_80+0x34e>
    8001fe92:	6562                	ld	a0,24(sp)
    8001fe94:	75e2                	ld	a1,56(sp)
    8001fe96:	40b505b3          	sub	a1,a0,a1
    8001fe9a:	e82e                	sd	a1,16(sp)
    8001fe9c:	0eb56e63          	bltu	a0,a1,8001ff98 <.LBB1_94>
    8001fea0:	a009                	j	8001fea2 <.LBB1_80+0x35e>
    8001fea2:	6542                	ld	a0,16(sp)
    8001fea4:	75c2                	ld	a1,48(sp)
    8001fea6:	40b505b3          	sub	a1,a0,a1
    8001feaa:	e42e                	sd	a1,8(sp)
    8001feac:	10b56563          	bltu	a0,a1,8001ffb6 <.LBB1_96>
    8001feb0:	a009                	j	8001feb2 <.LBB1_80+0x36e>
    8001feb2:	7522                	ld	a0,40(sp)
    8001feb4:	65a2                	ld	a1,8(sp)
    8001feb6:	00b50c63          	beq	a0,a1,8001fece <.LBB1_81+0x12>
    8001feba:	a009                	j	8001febc <.LBB1_81>

000000008001febc <.LBB1_81>:
            return Err("allocator bug: tot != meta + free + unavail");
    8001febc:	0000c517          	auipc	a0,0xc
    8001fec0:	ecc50513          	addi	a0,a0,-308 # 8002bd88 <.L__unnamed_4>
    8001fec4:	e32a                	sd	a0,384(sp)
    8001fec6:	02b00513          	li	a0,43
    8001feca:	e72a                	sd	a0,392(sp)
//! Thread-unsafe, panic-free buddy system allocator.
    8001fecc:	a801                	j	8001fedc <.LBB1_81+0x20>
    8001fece:	75f6                	ld	a1,376(sp)
    8001fed0:	4505                	li	a0,1
        }

        self.initialized = true;
    8001fed2:	02a58c23          	sb	a0,56(a1)
    8001fed6:	4501                	li	a0,0
        Ok(())
    8001fed8:	e32a                	sd	a0,384(sp)
    }
    8001feda:	a009                	j	8001fedc <.LBB1_81+0x20>
    8001fedc:	651a                	ld	a0,384(sp)
    8001fede:	65ba                	ld	a1,392(sp)
    8001fee0:	2e813083          	ld	ra,744(sp)
    8001fee4:	2f010113          	addi	sp,sp,752
    8001fee8:	8082                	ret

000000008001feea <.LBB1_82>:
        if end - start < leaf_size {
    8001feea:	0000c517          	auipc	a0,0xc
    8001feee:	d8650513          	addi	a0,a0,-634 # 8002bc70 <str.0>

000000008001fef2 <.LBB1_83>:
    8001fef2:	0000c617          	auipc	a2,0xc
    8001fef6:	d6660613          	addi	a2,a2,-666 # 8002bc58 <.L__unnamed_5>
    8001fefa:	02100593          	li	a1,33
    8001fefe:	00002097          	auipc	ra,0x2
    8001ff02:	378080e7          	jalr	888(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008001ff08 <.LBB1_84>:
        self.nsizes = log2((self.actual_end-cur)/leaf_size) + 1;
    8001ff08:	0000c517          	auipc	a0,0xc
    8001ff0c:	d6850513          	addi	a0,a0,-664 # 8002bc70 <str.0>

000000008001ff10 <.LBB1_85>:
    8001ff10:	0000c617          	auipc	a2,0xc
    8001ff14:	db860613          	addi	a2,a2,-584 # 8002bcc8 <.L__unnamed_6>
    8001ff18:	02100593          	li	a1,33
    8001ff1c:	00002097          	auipc	ra,0x2
    8001ff20:	35a080e7          	jalr	858(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008001ff26 <.LBB1_86>:
    8001ff26:	0000c517          	auipc	a0,0xc
    8001ff2a:	dba50513          	addi	a0,a0,-582 # 8002bce0 <str.1>

000000008001ff2e <.LBB1_87>:
    8001ff2e:	0000c617          	auipc	a2,0xc
    8001ff32:	d9a60613          	addi	a2,a2,-614 # 8002bcc8 <.L__unnamed_6>
    8001ff36:	45e5                	li	a1,25
    8001ff38:	00002097          	auipc	ra,0x2
    8001ff3c:	33e080e7          	jalr	830(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008001ff42 <.LBB1_88>:
    8001ff42:	0000c517          	auipc	a0,0xc
    8001ff46:	dde50513          	addi	a0,a0,-546 # 8002bd20 <str.2>

000000008001ff4a <.LBB1_89>:
    8001ff4a:	0000c617          	auipc	a2,0xc
    8001ff4e:	db660613          	addi	a2,a2,-586 # 8002bd00 <.L__unnamed_7>
    8001ff52:	45f1                	li	a1,28
    8001ff54:	00002097          	auipc	ra,0x2
    8001ff58:	322080e7          	jalr	802(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008001ff5e <.LBB1_90>:
        if self.actual_end - cur > self.blk_size(self.max_size()) {
    8001ff5e:	0000c517          	auipc	a0,0xc
    8001ff62:	d1250513          	addi	a0,a0,-750 # 8002bc70 <str.0>

000000008001ff66 <.LBB1_91>:
    8001ff66:	0000c617          	auipc	a2,0xc
    8001ff6a:	dda60613          	addi	a2,a2,-550 # 8002bd40 <.L__unnamed_8>
    8001ff6e:	02100593          	li	a1,33
    8001ff72:	00002097          	auipc	ra,0x2
    8001ff76:	304080e7          	jalr	772(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008001ff7c <.LBB1_92>:
            self.nsizes += 1;
    8001ff7c:	0000c517          	auipc	a0,0xc
    8001ff80:	da450513          	addi	a0,a0,-604 # 8002bd20 <str.2>

000000008001ff84 <.LBB1_93>:
    8001ff84:	0000c617          	auipc	a2,0xc
    8001ff88:	dd460613          	addi	a2,a2,-556 # 8002bd58 <.L__unnamed_9>
    8001ff8c:	45f1                	li	a1,28
    8001ff8e:	00002097          	auipc	ra,0x2
    8001ff92:	2e8080e7          	jalr	744(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008001ff98 <.LBB1_94>:
        if free != self.blk_size(self.max_size()) - meta - unavail {
    8001ff98:	0000c517          	auipc	a0,0xc
    8001ff9c:	cd850513          	addi	a0,a0,-808 # 8002bc70 <str.0>

000000008001ffa0 <.LBB1_95>:
    8001ffa0:	0000c617          	auipc	a2,0xc
    8001ffa4:	dd060613          	addi	a2,a2,-560 # 8002bd70 <.L__unnamed_10>
    8001ffa8:	02100593          	li	a1,33
    8001ffac:	00002097          	auipc	ra,0x2
    8001ffb0:	2ca080e7          	jalr	714(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008001ffb6 <.LBB1_96>:
    8001ffb6:	0000c517          	auipc	a0,0xc
    8001ffba:	cba50513          	addi	a0,a0,-838 # 8002bc70 <str.0>

000000008001ffbe <.LBB1_97>:
    8001ffbe:	0000c617          	auipc	a2,0xc
    8001ffc2:	db260613          	addi	a2,a2,-590 # 8002bd70 <.L__unnamed_10>
    8001ffc6:	02100593          	li	a1,33
    8001ffca:	00002097          	auipc	ra,0x2
    8001ffce:	2ac080e7          	jalr	684(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E:

000000008001ffd4 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E>:
    pub fn meta_info(&self) -> (bool, usize, usize, usize) {
        (self.initialized, self.base, self.actual_end, self.nsizes)
    }

    /// Allocate a block of memory satisifying the layout.
    pub fn alloc(&mut self, layout: Layout) -> *mut u8 {
    8001ffd4:	7149                	addi	sp,sp,-368
    8001ffd6:	f686                	sd	ra,360(sp)
    8001ffd8:	e1aa                	sd	a0,192(sp)
    8001ffda:	e9ae                	sd	a1,208(sp)
    8001ffdc:	edb2                	sd	a2,216(sp)
    8001ffde:	e62a                	sd	a0,264(sp)
    8001ffe0:	0988                	addi	a0,sp,208
        if layout.size() == 0 {
    8001ffe2:	00001097          	auipc	ra,0x1
    8001ffe6:	5b4080e7          	jalr	1460(ra) # 80021596 <_ZN4core5alloc6layout6Layout4size17h7a38fec576bdd6a2E>
    8001ffea:	e5aa                	sd	a0,200(sp)
    8001ffec:	a009                	j	8001ffee <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x1a>
    8001ffee:	652e                	ld	a0,200(sp)
    8001fff0:	4581                	li	a1,0
    8001fff2:	00b51663          	bne	a0,a1,8001fffe <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x2a>
    8001fff6:	a009                	j	8001fff8 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x24>
    8001fff8:	4501                	li	a0,0
            return ptr::null_mut();
    8001fffa:	f1aa                	sd	a0,224(sp)
    8001fffc:	ac81                	j	8002024c <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x278>
    8001fffe:	0988                	addi	a0,sp,208
        }

        // only guarantee the alignment not bigger than max_alignment
        if layout.align() > self.max_alignment {
    80020000:	00001097          	auipc	ra,0x1
    80020004:	5a0080e7          	jalr	1440(ra) # 800215a0 <_ZN4core5alloc6layout6Layout5align17habc8d2502287bfe5E>
    80020008:	fd2a                	sd	a0,184(sp)
    8002000a:	a009                	j	8002000c <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x38>
    8002000c:	75ea                	ld	a1,184(sp)
    8002000e:	650e                	ld	a0,192(sp)
    80020010:	7108                	ld	a0,32(a0)
    80020012:	00b57663          	bgeu	a0,a1,8002001e <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x4a>
    80020016:	a009                	j	80020018 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x44>
    80020018:	4501                	li	a0,0
            return ptr::null_mut();
    8002001a:	f1aa                	sd	a0,224(sp)
    8002001c:	ac05                	j	8002024c <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x278>
    8002001e:	0988                	addi	a0,sp,208
        // note: the size of a value is always a multiple of its alignment
        // now we only have to consider the size
        // because base and actual_end are already align to max_alignment

        // find the smallest block can contain the size
        let smalli = if layout.size() <= self.leaf_size {
    80020020:	00001097          	auipc	ra,0x1
    80020024:	576080e7          	jalr	1398(ra) # 80021596 <_ZN4core5alloc6layout6Layout4size17h7a38fec576bdd6a2E>
    80020028:	f92a                	sd	a0,176(sp)
    8002002a:	a009                	j	8002002c <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x58>
    8002002c:	75ca                	ld	a1,176(sp)
    8002002e:	650e                	ld	a0,192(sp)
    80020030:	6d08                	ld	a0,24(a0)
    80020032:	00b56663          	bltu	a0,a1,8002003e <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x6a>
    80020036:	a009                	j	80020038 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x64>
    80020038:	4501                	li	a0,0
            0 
    8002003a:	f5aa                	sd	a0,232(sp)
        let smalli = if layout.size() <= self.leaf_size {
    8002003c:	a0a9                	j	80020086 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0xb2>
    8002003e:	0988                	addi	a0,sp,208
        } else {
            (layout.size().next_power_of_two() / self.leaf_size).trailing_zeros() as usize
    80020040:	00001097          	auipc	ra,0x1
    80020044:	556080e7          	jalr	1366(ra) # 80021596 <_ZN4core5alloc6layout6Layout4size17h7a38fec576bdd6a2E>
    80020048:	f52a                	sd	a0,168(sp)
    8002004a:	a009                	j	8002004c <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x78>
    8002004c:	752a                	ld	a0,168(sp)
    8002004e:	00002097          	auipc	ra,0x2
    80020052:	998080e7          	jalr	-1640(ra) # 800219e6 <_ZN4core3num23_$LT$impl$u20$usize$GT$17next_power_of_two17h8eeaf87577f4331fE>
    80020056:	f12a                	sd	a0,160(sp)
    80020058:	a009                	j	8002005a <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x86>
    8002005a:	650e                	ld	a0,192(sp)
    8002005c:	6d08                	ld	a0,24(a0)
    8002005e:	ed2a                	sd	a0,152(sp)
    80020060:	4581                	li	a1,0
    80020062:	1eb50963          	beq	a0,a1,80020254 <.LBB3_59>
    80020066:	a009                	j	80020068 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x94>
    80020068:	750a                	ld	a0,160(sp)
    8002006a:	65ea                	ld	a1,152(sp)
    8002006c:	02b55533          	divu	a0,a0,a1
    80020070:	00002097          	auipc	ra,0x2
    80020074:	8b6080e7          	jalr	-1866(ra) # 80021926 <_ZN4core3num23_$LT$impl$u20$usize$GT$14trailing_zeros17h26e4a056cb05b6fbE>
    80020078:	e92a                	sd	a0,144(sp)
    8002007a:	a009                	j	8002007c <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0xa8>
    8002007c:	654a                	ld	a0,144(sp)
    8002007e:	1502                	slli	a0,a0,0x20
    80020080:	9101                	srli	a0,a0,0x20
    80020082:	f5aa                	sd	a0,232(sp)
        let smalli = if layout.size() <= self.leaf_size {
    80020084:	a009                	j	80020086 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0xb2>
        };
        let mut sizei = smalli;
    80020086:	752e                	ld	a0,232(sp)
    80020088:	f9aa                	sd	a0,240(sp)
        while sizei < self.nsizes {
    8002008a:	a009                	j	8002008c <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0xb8>
    8002008c:	658e                	ld	a1,192(sp)
    8002008e:	754e                	ld	a0,240(sp)
    80020090:	698c                	ld	a1,16(a1)
    80020092:	00b56463          	bltu	a0,a1,8002009a <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0xc6>
    80020096:	a009                	j	80020098 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0xc4>
    80020098:	a83d                	j	800200d6 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x102>
            let info = unsafe { self.get_info_mut(sizei) };
    8002009a:	650e                	ld	a0,192(sp)
    8002009c:	75ce                	ld	a1,240(sp)
    8002009e:	00001097          	auipc	ra,0x1
    800200a2:	bfa080e7          	jalr	-1030(ra) # 80020c98 <_ZN9allocator11BuddySystem12get_info_mut17h828847c6ad79cffaE>
    800200a6:	e52a                	sd	a0,136(sp)
    800200a8:	a009                	j	800200aa <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0xd6>
    800200aa:	652a                	ld	a0,136(sp)
    800200ac:	ea2a                	sd	a0,272(sp)
            if !info.free.is_empty() {
    800200ae:	00001097          	auipc	ra,0x1
    800200b2:	604080e7          	jalr	1540(ra) # 800216b2 <_ZN9allocator4list4List8is_empty17h2b5a11437d86acd9E>
    800200b6:	e12a                	sd	a0,128(sp)
    800200b8:	a009                	j	800200ba <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0xe6>
    800200ba:	650a                	ld	a0,128(sp)
    800200bc:	e119                	bnez	a0,800200c2 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0xee>
    800200be:	a009                	j	800200c0 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0xec>
//! Thread-unsafe, panic-free buddy system allocator.
    800200c0:	a819                	j	800200d6 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x102>
                break;
            }
            sizei += 1;
    800200c2:	75ce                	ld	a1,240(sp)
    800200c4:	00158513          	addi	a0,a1,1
    800200c8:	fcaa                	sd	a0,120(sp)
    800200ca:	1ab56363          	bltu	a0,a1,80020270 <.LBB3_61>
    800200ce:	a009                	j	800200d0 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0xfc>
    800200d0:	7566                	ld	a0,120(sp)
    800200d2:	f9aa                	sd	a0,240(sp)
        while sizei < self.nsizes {
    800200d4:	bf65                	j	8002008c <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0xb8>
        }
        if sizei >= self.nsizes {
    800200d6:	658e                	ld	a1,192(sp)
    800200d8:	754e                	ld	a0,240(sp)
    800200da:	698c                	ld	a1,16(a1)
    800200dc:	00b56663          	bltu	a0,a1,800200e8 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x114>
    800200e0:	a009                	j	800200e2 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x10e>
    800200e2:	4501                	li	a0,0
            // no free memory
            return ptr::null_mut()
    800200e4:	f1aa                	sd	a0,224(sp)
    800200e6:	a29d                	j	8002024c <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x278>
        }

        // pop a block at self.infos[sizei]
        let info = unsafe { self.get_info_mut(sizei) };
    800200e8:	650e                	ld	a0,192(sp)
    800200ea:	75ce                	ld	a1,240(sp)
    800200ec:	00001097          	auipc	ra,0x1
    800200f0:	bac080e7          	jalr	-1108(ra) # 80020c98 <_ZN9allocator11BuddySystem12get_info_mut17h828847c6ad79cffaE>
    800200f4:	f8aa                	sd	a0,112(sp)
    800200f6:	a009                	j	800200f8 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x124>
    800200f8:	7546                	ld	a0,112(sp)
    800200fa:	ee2a                	sd	a0,280(sp)
        let raw_addr = match unsafe { info.free.pop() } {
    800200fc:	00001097          	auipc	ra,0x1
    80020100:	530080e7          	jalr	1328(ra) # 8002162c <_ZN9allocator4list4List3pop17h8165b98152b25881E>
    80020104:	fdaa                	sd	a0,248(sp)
    80020106:	e22e                	sd	a1,256(sp)
    80020108:	a009                	j	8002010a <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x136>
            Some(raw_addr) => raw_addr,
    8002010a:	756e                	ld	a0,248(sp)
    8002010c:	4581                	li	a1,0
    8002010e:	00b50463          	beq	a0,a1,80020116 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x142>
    80020112:	a009                	j	80020114 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x140>
    80020114:	a029                	j	8002011e <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x14a>
    80020116:	4501                	li	a0,0
            None => return ptr::null_mut(),
    80020118:	f1aa                	sd	a0,224(sp)
    8002011a:	aa0d                	j	8002024c <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x278>
        let raw_addr = match unsafe { info.free.pop() } {
    8002011c:	0000                	unimp
            Some(raw_addr) => raw_addr,
    8002011e:	650e                	ld	a0,192(sp)
    80020120:	6612                	ld	a2,256(sp)
    80020122:	f0b2                	sd	a2,96(sp)
    80020124:	f232                	sd	a2,288(sp)
    80020126:	f632                	sd	a2,296(sp)
        };
        let bi = self.blk_index(sizei, raw_addr);
    80020128:	75ce                	ld	a1,240(sp)
    8002012a:	00001097          	auipc	ra,0x1
    8002012e:	c7c080e7          	jalr	-900(ra) # 80020da6 <_ZN9allocator11BuddySystem9blk_index17hcd9ce7a5032bb5d0E>
    80020132:	85aa                	mv	a1,a0
    80020134:	f4ae                	sd	a1,104(sp)
    80020136:	fa2a                	sd	a0,304(sp)
    80020138:	a009                	j	8002013a <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x166>
        unsafe { self.get_info_mut(sizei).alloc_set(bi, true); }
    8002013a:	650e                	ld	a0,192(sp)
    8002013c:	75ce                	ld	a1,240(sp)
    8002013e:	00001097          	auipc	ra,0x1
    80020142:	b5a080e7          	jalr	-1190(ra) # 80020c98 <_ZN9allocator11BuddySystem12get_info_mut17h828847c6ad79cffaE>
    80020146:	ecaa                	sd	a0,88(sp)
    80020148:	a009                	j	8002014a <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x176>
    8002014a:	75a6                	ld	a1,104(sp)
    8002014c:	6566                	ld	a0,88(sp)
    8002014e:	4605                	li	a2,1
    80020150:	00001097          	auipc	ra,0x1
    80020154:	04a080e7          	jalr	74(ra) # 8002119a <_ZN9allocator9BuddyInfo9alloc_set17h48fdb360b5f9c917E>
    80020158:	a009                	j	8002015a <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x186>

        // split the block until it reach smallest block size
        while sizei > smalli {            
    8002015a:	a009                	j	8002015c <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x188>
    8002015c:	75ce                	ld	a1,240(sp)
    8002015e:	752e                	ld	a0,232(sp)
    80020160:	00b56663          	bltu	a0,a1,8002016c <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x198>
    80020164:	a009                	j	80020166 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x192>
            unsafe { info1.free.push(buddy_addr); }

            sizei -= 1;
        }

        raw_addr as *mut u8
    80020166:	7506                	ld	a0,96(sp)
    80020168:	f1aa                	sd	a0,224(sp)
    }
    8002016a:	a0cd                	j	8002024c <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x278>
            let bi = self.blk_index(sizei, raw_addr);
    8002016c:	7606                	ld	a2,96(sp)
    8002016e:	650e                	ld	a0,192(sp)
    80020170:	75ce                	ld	a1,240(sp)
    80020172:	00001097          	auipc	ra,0x1
    80020176:	c34080e7          	jalr	-972(ra) # 80020da6 <_ZN9allocator11BuddySystem9blk_index17hcd9ce7a5032bb5d0E>
    8002017a:	85aa                	mv	a1,a0
    8002017c:	e8ae                	sd	a1,80(sp)
    8002017e:	fe2a                	sd	a0,312(sp)
    80020180:	a009                	j	80020182 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x1ae>
            let info = unsafe { self.get_info_mut(sizei) };
    80020182:	650e                	ld	a0,192(sp)
    80020184:	75ce                	ld	a1,240(sp)
    80020186:	00001097          	auipc	ra,0x1
    8002018a:	b12080e7          	jalr	-1262(ra) # 80020c98 <_ZN9allocator11BuddySystem12get_info_mut17h828847c6ad79cffaE>
    8002018e:	e4aa                	sd	a0,72(sp)
    80020190:	a009                	j	80020192 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x1be>
    80020192:	65c6                	ld	a1,80(sp)
    80020194:	6526                	ld	a0,72(sp)
    80020196:	e2aa                	sd	a0,320(sp)
    80020198:	4605                	li	a2,1
            info.split_set(bi, true);
    8002019a:	00001097          	auipc	ra,0x1
    8002019e:	044080e7          	jalr	68(ra) # 800211de <_ZN9allocator9BuddyInfo9split_set17hd9896ad2ca355490E>
    800201a2:	a009                	j	800201a4 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x1d0>
            let bs1 = self.blk_size(sizei-1);
    800201a4:	754e                	ld	a0,240(sp)
    800201a6:	fff50593          	addi	a1,a0,-1
    800201aa:	e0ae                	sd	a1,64(sp)
    800201ac:	0eb56063          	bltu	a0,a1,8002028c <.LBB3_63>
    800201b0:	a009                	j	800201b2 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x1de>
    800201b2:	6586                	ld	a1,64(sp)
    800201b4:	650e                	ld	a0,192(sp)
    800201b6:	00001097          	auipc	ra,0x1
    800201ba:	e10080e7          	jalr	-496(ra) # 80020fc6 <_ZN9allocator11BuddySystem8blk_size17h8693939904cd2981E>
    800201be:	85aa                	mv	a1,a0
    800201c0:	fc2e                	sd	a1,56(sp)
    800201c2:	e6aa                	sd	a0,328(sp)
    800201c4:	a009                	j	800201c6 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x1f2>
            let bi1 = self.blk_index(sizei-1, raw_addr);
    800201c6:	754e                	ld	a0,240(sp)
    800201c8:	fff50593          	addi	a1,a0,-1
    800201cc:	f82e                	sd	a1,48(sp)
    800201ce:	0cb56e63          	bltu	a0,a1,800202aa <.LBB3_65>
    800201d2:	a009                	j	800201d4 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x200>
    800201d4:	7606                	ld	a2,96(sp)
    800201d6:	75c2                	ld	a1,48(sp)
    800201d8:	650e                	ld	a0,192(sp)
    800201da:	00001097          	auipc	ra,0x1
    800201de:	bcc080e7          	jalr	-1076(ra) # 80020da6 <_ZN9allocator11BuddySystem9blk_index17hcd9ce7a5032bb5d0E>
    800201e2:	85aa                	mv	a1,a0
    800201e4:	f42e                	sd	a1,40(sp)
    800201e6:	eaaa                	sd	a0,336(sp)
    800201e8:	a009                	j	800201ea <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x216>
            let info1 = unsafe { self.get_info_mut(sizei-1) };
    800201ea:	754e                	ld	a0,240(sp)
    800201ec:	fff50593          	addi	a1,a0,-1
    800201f0:	f02e                	sd	a1,32(sp)
    800201f2:	0cb56b63          	bltu	a0,a1,800202c8 <.LBB3_67>
    800201f6:	a009                	j	800201f8 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x224>
    800201f8:	7582                	ld	a1,32(sp)
    800201fa:	650e                	ld	a0,192(sp)
    800201fc:	00001097          	auipc	ra,0x1
    80020200:	a9c080e7          	jalr	-1380(ra) # 80020c98 <_ZN9allocator11BuddySystem12get_info_mut17h828847c6ad79cffaE>
    80020204:	ec2a                	sd	a0,24(sp)
    80020206:	a009                	j	80020208 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x234>
    80020208:	75a2                	ld	a1,40(sp)
    8002020a:	6562                	ld	a0,24(sp)
    8002020c:	eeaa                	sd	a0,344(sp)
    8002020e:	4605                	li	a2,1
            info1.alloc_set(bi1, true);
    80020210:	00001097          	auipc	ra,0x1
    80020214:	f8a080e7          	jalr	-118(ra) # 8002119a <_ZN9allocator9BuddyInfo9alloc_set17h48fdb360b5f9c917E>
    80020218:	a009                	j	8002021a <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x246>
            let buddy_addr = raw_addr + bs1;
    8002021a:	7586                	ld	a1,96(sp)
    8002021c:	7562                	ld	a0,56(sp)
    8002021e:	952e                	add	a0,a0,a1
    80020220:	e82a                	sd	a0,16(sp)
    80020222:	0cb56263          	bltu	a0,a1,800202e6 <.LBB3_69>
    80020226:	a009                	j	80020228 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x254>
    80020228:	65c2                	ld	a1,16(sp)
    8002022a:	6562                	ld	a0,24(sp)
    8002022c:	f2ae                	sd	a1,352(sp)
            unsafe { info1.free.push(buddy_addr); }
    8002022e:	00001097          	auipc	ra,0x1
    80020232:	3a2080e7          	jalr	930(ra) # 800215d0 <_ZN9allocator4list4List4push17h00016bee64ea1dbdE>
    80020236:	a009                	j	80020238 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x264>
            sizei -= 1;
    80020238:	754e                	ld	a0,240(sp)
    8002023a:	fff50593          	addi	a1,a0,-1
    8002023e:	e42e                	sd	a1,8(sp)
    80020240:	0cb56163          	bltu	a0,a1,80020302 <.LBB3_71>
    80020244:	a009                	j	80020246 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x272>
    80020246:	6522                	ld	a0,8(sp)
    80020248:	f9aa                	sd	a0,240(sp)
        while sizei > smalli {            
    8002024a:	bf09                	j	8002015c <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x188>
    }
    8002024c:	750e                	ld	a0,224(sp)
    8002024e:	70b6                	ld	ra,360(sp)
    80020250:	6175                	addi	sp,sp,368
    80020252:	8082                	ret

0000000080020254 <.LBB3_59>:
            (layout.size().next_power_of_two() / self.leaf_size).trailing_zeros() as usize
    80020254:	0000c517          	auipc	a0,0xc
    80020258:	a8c50513          	addi	a0,a0,-1396 # 8002bce0 <str.1>

000000008002025c <.LBB3_60>:
    8002025c:	0000c617          	auipc	a2,0xc
    80020260:	b5c60613          	addi	a2,a2,-1188 # 8002bdb8 <.L__unnamed_11>
    80020264:	45e5                	li	a1,25
    80020266:	00002097          	auipc	ra,0x2
    8002026a:	010080e7          	jalr	16(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080020270 <.LBB3_61>:
            sizei += 1;
    80020270:	0000c517          	auipc	a0,0xc
    80020274:	ab050513          	addi	a0,a0,-1360 # 8002bd20 <str.2>

0000000080020278 <.LBB3_62>:
    80020278:	0000c617          	auipc	a2,0xc
    8002027c:	b5860613          	addi	a2,a2,-1192 # 8002bdd0 <.L__unnamed_12>
    80020280:	45f1                	li	a1,28
    80020282:	00002097          	auipc	ra,0x2
    80020286:	ff4080e7          	jalr	-12(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008002028c <.LBB3_63>:
            let bs1 = self.blk_size(sizei-1);
    8002028c:	0000c517          	auipc	a0,0xc
    80020290:	9e450513          	addi	a0,a0,-1564 # 8002bc70 <str.0>

0000000080020294 <.LBB3_64>:
    80020294:	0000c617          	auipc	a2,0xc
    80020298:	b5460613          	addi	a2,a2,-1196 # 8002bde8 <.L__unnamed_13>
    8002029c:	02100593          	li	a1,33
    800202a0:	00002097          	auipc	ra,0x2
    800202a4:	fd6080e7          	jalr	-42(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

00000000800202aa <.LBB3_65>:
            let bi1 = self.blk_index(sizei-1, raw_addr);
    800202aa:	0000c517          	auipc	a0,0xc
    800202ae:	9c650513          	addi	a0,a0,-1594 # 8002bc70 <str.0>

00000000800202b2 <.LBB3_66>:
    800202b2:	0000c617          	auipc	a2,0xc
    800202b6:	b4e60613          	addi	a2,a2,-1202 # 8002be00 <.L__unnamed_14>
    800202ba:	02100593          	li	a1,33
    800202be:	00002097          	auipc	ra,0x2
    800202c2:	fb8080e7          	jalr	-72(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

00000000800202c8 <.LBB3_67>:
            let info1 = unsafe { self.get_info_mut(sizei-1) };
    800202c8:	0000c517          	auipc	a0,0xc
    800202cc:	9a850513          	addi	a0,a0,-1624 # 8002bc70 <str.0>

00000000800202d0 <.LBB3_68>:
    800202d0:	0000c617          	auipc	a2,0xc
    800202d4:	b4860613          	addi	a2,a2,-1208 # 8002be18 <.L__unnamed_15>
    800202d8:	02100593          	li	a1,33
    800202dc:	00002097          	auipc	ra,0x2
    800202e0:	f9a080e7          	jalr	-102(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

00000000800202e6 <.LBB3_69>:
            let buddy_addr = raw_addr + bs1;
    800202e6:	0000c517          	auipc	a0,0xc
    800202ea:	a3a50513          	addi	a0,a0,-1478 # 8002bd20 <str.2>

00000000800202ee <.LBB3_70>:
    800202ee:	0000c617          	auipc	a2,0xc
    800202f2:	b4260613          	addi	a2,a2,-1214 # 8002be30 <.L__unnamed_16>
    800202f6:	45f1                	li	a1,28
    800202f8:	00002097          	auipc	ra,0x2
    800202fc:	f7e080e7          	jalr	-130(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080020302 <.LBB3_71>:
            sizei -= 1;
    80020302:	0000c517          	auipc	a0,0xc
    80020306:	96e50513          	addi	a0,a0,-1682 # 8002bc70 <str.0>

000000008002030a <.LBB3_72>:
    8002030a:	0000c617          	auipc	a2,0xc
    8002030e:	b3e60613          	addi	a2,a2,-1218 # 8002be48 <.L__unnamed_17>
    80020312:	02100593          	li	a1,33
    80020316:	00002097          	auipc	ra,0x2
    8002031a:	f60080e7          	jalr	-160(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN9allocator11BuddySystem7dealloc17hfe9c60ecf0af29ebE:

0000000080020320 <_ZN9allocator11BuddySystem7dealloc17hfe9c60ecf0af29ebE>:

    /// Deallocate the memory.
    /// SAFETY: The raw ptr passed-in should be the one handed out previously.
    pub fn dealloc(&mut self, ptr: *mut u8, layout: Layout) {
    80020320:	dc010113          	addi	sp,sp,-576
    80020324:	22113c23          	sd	ra,568(sp)
    80020328:	f9aa                	sd	a0,240(sp)
    8002032a:	fdb2                	sd	a2,248(sp)
    8002032c:	e236                	sd	a3,256(sp)
    8002032e:	e3aa                	sd	a0,448(sp)
    80020330:	e7ae                	sd	a1,456(sp)
        // check ptr in range [self.base, self.actual_end)
        let mut raw_addr = ptr as usize;
    80020332:	e62e                	sd	a1,264(sp)
        #[cfg(debug_assertions)]
        if raw_addr < self.base || raw_addr >= self.actual_end {
    80020334:	6108                	ld	a0,0(a0)
    80020336:	00a5fb63          	bgeu	a1,a0,8002034c <_ZN9allocator11BuddySystem7dealloc17hfe9c60ecf0af29ebE+0x2c>
    8002033a:	a009                	j	8002033c <_ZN9allocator11BuddySystem7dealloc17hfe9c60ecf0af29ebE+0x1c>
    8002033c:	4505                	li	a0,1
    8002033e:	10a10ba3          	sb	a0,279(sp)
    80020342:	a819                	j	80020358 <_ZN9allocator11BuddySystem7dealloc17hfe9c60ecf0af29ebE+0x38>
    80020344:	4501                	li	a0,0
    80020346:	10a10ba3          	sb	a0,279(sp)
    8002034a:	a039                	j	80020358 <_ZN9allocator11BuddySystem7dealloc17hfe9c60ecf0af29ebE+0x38>
    8002034c:	75ce                	ld	a1,240(sp)
    8002034e:	6532                	ld	a0,264(sp)
    80020350:	658c                	ld	a1,8(a1)
    80020352:	feb575e3          	bgeu	a0,a1,8002033c <_ZN9allocator11BuddySystem7dealloc17hfe9c60ecf0af29ebE+0x1c>
    80020356:	b7fd                	j	80020344 <_ZN9allocator11BuddySystem7dealloc17hfe9c60ecf0af29ebE+0x24>
    80020358:	11714503          	lbu	a0,279(sp)
    8002035c:	8905                	andi	a0,a0,1
    8002035e:	4581                	li	a1,0
    80020360:	02b50263          	beq	a0,a1,80020384 <.LBB4_68+0x16>
    80020364:	a009                	j	80020366 <.LBB4_67>

0000000080020366 <.LBB4_67>:
            panic!("allocator: dealloc ptr out of range");
    80020366:	0000c517          	auipc	a0,0xc
    8002036a:	afa50513          	addi	a0,a0,-1286 # 8002be60 <.L__unnamed_18>

000000008002036e <.LBB4_68>:
    8002036e:	0000c617          	auipc	a2,0xc
    80020372:	b1a60613          	addi	a2,a2,-1254 # 8002be88 <.L__unnamed_19>
    80020376:	02300593          	li	a1,35
    8002037a:	00002097          	auipc	ra,0x2
    8002037e:	efc080e7          	jalr	-260(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80020382:	0000                	unimp
        }

        // find the size of block pointed by ptr
        // and check with the layout
        let mut sizei = self.nsizes;
    80020384:	754e                	ld	a0,240(sp)
    80020386:	690c                	ld	a1,16(a0)
    80020388:	ee2e                	sd	a1,280(sp)
        for i in 0..self.max_size() {
    8002038a:	00001097          	auipc	ra,0x1
    8002038e:	966080e7          	jalr	-1690(ra) # 80020cf0 <_ZN9allocator11BuddySystem8max_size17hef7a09e8b41b3266E>
    80020392:	f5aa                	sd	a0,232(sp)
    80020394:	a009                	j	80020396 <.LBB4_68+0x28>
    80020396:	75ae                	ld	a1,232(sp)
    80020398:	4501                	li	a0,0
    8002039a:	f22a                	sd	a0,288(sp)
    8002039c:	f62e                	sd	a1,296(sp)
    8002039e:	fffff097          	auipc	ra,0xfffff
    800203a2:	5a4080e7          	jalr	1444(ra) # 8001f942 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he0a8d93712e5493bE>
    800203a6:	edaa                	sd	a0,216(sp)
    800203a8:	f1ae                	sd	a1,224(sp)
    800203aa:	a009                	j	800203ac <.LBB4_68+0x3e>
    800203ac:	750e                	ld	a0,224(sp)
    800203ae:	65ee                	ld	a1,216(sp)
    800203b0:	fa2e                	sd	a1,304(sp)
    800203b2:	fe2a                	sd	a0,312(sp)
    800203b4:	a009                	j	800203b6 <.LBB4_68+0x48>
    800203b6:	1a08                	addi	a0,sp,304
    800203b8:	fffff097          	auipc	ra,0xfffff
    800203bc:	51c080e7          	jalr	1308(ra) # 8001f8d4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE>
    800203c0:	e2aa                	sd	a0,320(sp)
    800203c2:	e6ae                	sd	a1,328(sp)
    800203c4:	a009                	j	800203c6 <.LBB4_68+0x58>
    800203c6:	6516                	ld	a0,320(sp)
    800203c8:	4581                	li	a1,0
    800203ca:	00b50463          	beq	a0,a1,800203d2 <.LBB4_68+0x64>
    800203ce:	a009                	j	800203d0 <.LBB4_68+0x62>
    800203d0:	a019                	j	800203d6 <.LBB4_68+0x68>
//! Thread-unsafe, panic-free buddy system allocator.
    800203d2:	a88d                	j	80020444 <.LBB4_68+0xd6>
        for i in 0..self.max_size() {
    800203d4:	0000                	unimp
    800203d6:	65b6                	ld	a1,328(sp)
    800203d8:	e5ae                	sd	a1,200(sp)
    800203da:	ebae                	sd	a1,464(sp)
    800203dc:	efae                	sd	a1,472(sp)
    800203de:	f3ae                	sd	a1,480(sp)
            let bi = self.blk_index(i+1, raw_addr);
    800203e0:	00158513          	addi	a0,a1,1
    800203e4:	e9aa                	sd	a0,208(sp)
    800203e6:	2ab56c63          	bltu	a0,a1,8002069e <.LBB4_76>
    800203ea:	a009                	j	800203ec <.LBB4_68+0x7e>
    800203ec:	65ce                	ld	a1,208(sp)
    800203ee:	754e                	ld	a0,240(sp)
    800203f0:	6632                	ld	a2,264(sp)
    800203f2:	00001097          	auipc	ra,0x1
    800203f6:	9b4080e7          	jalr	-1612(ra) # 80020da6 <_ZN9allocator11BuddySystem9blk_index17hcd9ce7a5032bb5d0E>
    800203fa:	85aa                	mv	a1,a0
    800203fc:	e1ae                	sd	a1,192(sp)
    800203fe:	f7aa                	sd	a0,488(sp)
    80020400:	a009                	j	80020402 <.LBB4_68+0x94>
            let info = unsafe { self.get_info_mut(i+1) };
    80020402:	65ae                	ld	a1,200(sp)
    80020404:	00158513          	addi	a0,a1,1
    80020408:	fd2a                	sd	a0,184(sp)
    8002040a:	2ab56863          	bltu	a0,a1,800206ba <.LBB4_78>
    8002040e:	a009                	j	80020410 <.LBB4_68+0xa2>
    80020410:	75ea                	ld	a1,184(sp)
    80020412:	754e                	ld	a0,240(sp)
    80020414:	00001097          	auipc	ra,0x1
    80020418:	884080e7          	jalr	-1916(ra) # 80020c98 <_ZN9allocator11BuddySystem12get_info_mut17h828847c6ad79cffaE>
    8002041c:	f92a                	sd	a0,176(sp)
    8002041e:	a009                	j	80020420 <.LBB4_68+0xb2>
    80020420:	658e                	ld	a1,192(sp)
    80020422:	754a                	ld	a0,176(sp)
    80020424:	fbaa                	sd	a0,496(sp)
            if info.is_split_set(bi) {
    80020426:	00001097          	auipc	ra,0x1
    8002042a:	e36080e7          	jalr	-458(ra) # 8002125c <_ZN9allocator9BuddyInfo12is_split_set17hd9054b929d273b40E>
    8002042e:	f52a                	sd	a0,168(sp)
    80020430:	a009                	j	80020432 <.LBB4_68+0xc4>
    80020432:	752a                	ld	a0,168(sp)
    80020434:	4581                	li	a1,0
    80020436:	00b50663          	beq	a0,a1,80020442 <.LBB4_68+0xd4>
    8002043a:	a009                	j	8002043c <.LBB4_68+0xce>
                sizei = i;
    8002043c:	652e                	ld	a0,200(sp)
    8002043e:	ee2a                	sd	a0,280(sp)
//! Thread-unsafe, panic-free buddy system allocator.
    80020440:	a011                	j	80020444 <.LBB4_68+0xd6>
        for i in 0..self.max_size() {
    80020442:	bf95                	j	800203b6 <.LBB4_68+0x48>
                break;
            }
        }
        #[cfg(debug_assertions)]
        if sizei == self.nsizes {
    80020444:	75ce                	ld	a1,240(sp)
    80020446:	6572                	ld	a0,280(sp)
    80020448:	698c                	ld	a1,16(a1)
    8002044a:	02b51263          	bne	a0,a1,8002046e <.LBB4_70+0x16>
    8002044e:	a009                	j	80020450 <.LBB4_69>

0000000080020450 <.LBB4_69>:
            panic!("allocator: dealloc cannot recycle ptr");
    80020450:	0000c517          	auipc	a0,0xc
    80020454:	a8050513          	addi	a0,a0,-1408 # 8002bed0 <.L__unnamed_20>

0000000080020458 <.LBB4_70>:
    80020458:	0000c617          	auipc	a2,0xc
    8002045c:	aa060613          	addi	a2,a2,-1376 # 8002bef8 <.L__unnamed_21>
    80020460:	02500593          	li	a1,37
    80020464:	00002097          	auipc	ra,0x2
    80020468:	e12080e7          	jalr	-494(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8002046c:	0000                	unimp
    8002046e:	19a8                	addi	a0,sp,248
        }

        // check layout
        #[cfg(debug_assertions)]
        if layout.size() > self.blk_size(sizei) {
    80020470:	00001097          	auipc	ra,0x1
    80020474:	126080e7          	jalr	294(ra) # 80021596 <_ZN4core5alloc6layout6Layout4size17h7a38fec576bdd6a2E>
    80020478:	f12a                	sd	a0,160(sp)
    8002047a:	a009                	j	8002047c <.LBB4_70+0x24>
    8002047c:	754e                	ld	a0,240(sp)
    8002047e:	65f2                	ld	a1,280(sp)
    80020480:	00001097          	auipc	ra,0x1
    80020484:	b46080e7          	jalr	-1210(ra) # 80020fc6 <_ZN9allocator11BuddySystem8blk_size17h8693939904cd2981E>
    80020488:	ed2a                	sd	a0,152(sp)
    8002048a:	a009                	j	8002048c <.LBB4_70+0x34>
    8002048c:	656a                	ld	a0,152(sp)
    8002048e:	758a                	ld	a1,160(sp)
    80020490:	00b57b63          	bgeu	a0,a1,800204a6 <.LBB4_70+0x4e>
    80020494:	a009                	j	80020496 <.LBB4_70+0x3e>
            panic!("allocator: layout {:?} > blk size {}", layout, self.blk_size(sizei));
    80020496:	754e                	ld	a0,240(sp)
    80020498:	65f2                	ld	a1,280(sp)
    8002049a:	00001097          	auipc	ra,0x1
    8002049e:	b2c080e7          	jalr	-1236(ra) # 80020fc6 <_ZN9allocator11BuddySystem8blk_size17h8693939904cd2981E>
    800204a2:	fb2a                	sd	a0,432(sp)
    800204a4:	a011                	j	800204a8 <.LBB4_70+0x50>
        }

        // free and coalesce
        while sizei < self.max_size() {
    800204a6:	a8bd                	j	80020524 <.LBB4_74+0x14>
    800204a8:	19a8                	addi	a0,sp,248
            panic!("allocator: layout {:?} > blk size {}", layout, self.blk_size(sizei));
    800204aa:	f32a                	sd	a0,416(sp)
    800204ac:	1b0c                	addi	a1,sp,432
    800204ae:	e12e                	sd	a1,128(sp)
    800204b0:	f72e                	sd	a1,424(sp)
    800204b2:	ffaa                	sd	a0,504(sp)
    800204b4:	20b13023          	sd	a1,512(sp)

00000000800204b8 <.LBB4_71>:
    800204b8:	00005597          	auipc	a1,0x5
    800204bc:	ae458593          	addi	a1,a1,-1308 # 80024f9c <_ZN64_$LT$core..alloc..layout..Layout$u20$as$u20$core..fmt..Debug$GT$3fmt17h791c624323e1e5daE>
    800204c0:	fffff097          	auipc	ra,0xfffff
    800204c4:	202080e7          	jalr	514(ra) # 8001f6c2 <_ZN4core3fmt10ArgumentV13new17hc2eeb6f5565b6dd2E>
    800204c8:	e52a                	sd	a0,136(sp)
    800204ca:	e92e                	sd	a1,144(sp)
    800204cc:	a009                	j	800204ce <.LBB4_71+0x16>
    800204ce:	650a                	ld	a0,128(sp)

00000000800204d0 <.LBB4_72>:
    800204d0:	00004597          	auipc	a1,0x4
    800204d4:	43258593          	addi	a1,a1,1074 # 80024902 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h9c6c4af1578f7c29E>
    800204d8:	fffff097          	auipc	ra,0xfffff
    800204dc:	1c8080e7          	jalr	456(ra) # 8001f6a0 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    800204e0:	f8aa                	sd	a0,112(sp)
    800204e2:	fcae                	sd	a1,120(sp)
    800204e4:	a009                	j	800204e6 <.LBB4_72+0x16>
    800204e6:	7566                	ld	a0,120(sp)
    800204e8:	75c6                	ld	a1,112(sp)
    800204ea:	664a                	ld	a2,144(sp)
    800204ec:	66aa                	ld	a3,136(sp)
    800204ee:	e336                	sd	a3,384(sp)
    800204f0:	e732                	sd	a2,392(sp)
    800204f2:	eb2e                	sd	a1,400(sp)
    800204f4:	ef2a                	sd	a0,408(sp)

00000000800204f6 <.LBB4_73>:
    800204f6:	0000c597          	auipc	a1,0xc
    800204fa:	a3a58593          	addi	a1,a1,-1478 # 8002bf30 <.L__unnamed_22>
    800204fe:	0a88                	addi	a0,sp,336
    80020500:	0314                	addi	a3,sp,384
    80020502:	4709                	li	a4,2
    80020504:	863a                	mv	a2,a4
    80020506:	00001097          	auipc	ra,0x1
    8002050a:	06e080e7          	jalr	110(ra) # 80021574 <_ZN4core3fmt9Arguments6new_v117hf60bb287480e0058E>
    8002050e:	a009                	j	80020510 <.LBB4_74>

0000000080020510 <.LBB4_74>:
    80020510:	0000c597          	auipc	a1,0xc
    80020514:	a4058593          	addi	a1,a1,-1472 # 8002bf50 <.L__unnamed_23>
    80020518:	0a88                	addi	a0,sp,336
    8002051a:	00002097          	auipc	ra,0x2
    8002051e:	dc8080e7          	jalr	-568(ra) # 800222e2 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
    80020522:	0000                	unimp
        while sizei < self.max_size() {
    80020524:	754e                	ld	a0,240(sp)
    80020526:	65f2                	ld	a1,280(sp)
    80020528:	f0ae                	sd	a1,96(sp)
    8002052a:	00000097          	auipc	ra,0x0
    8002052e:	7c6080e7          	jalr	1990(ra) # 80020cf0 <_ZN9allocator11BuddySystem8max_size17hef7a09e8b41b3266E>
    80020532:	f4aa                	sd	a0,104(sp)
    80020534:	a009                	j	80020536 <.LBB4_74+0x26>
    80020536:	7506                	ld	a0,96(sp)
    80020538:	75a6                	ld	a1,104(sp)
    8002053a:	00b56463          	bltu	a0,a1,80020542 <.LBB4_74+0x32>
    8002053e:	a009                	j	80020540 <.LBB4_74+0x30>
    80020540:	aa0d                	j	80020672 <.LBB4_75+0x80>
            let bi = self.blk_index(sizei, raw_addr);
    80020542:	754e                	ld	a0,240(sp)
    80020544:	65f2                	ld	a1,280(sp)
    80020546:	6632                	ld	a2,264(sp)
    80020548:	00001097          	auipc	ra,0x1
    8002054c:	85e080e7          	jalr	-1954(ra) # 80020da6 <_ZN9allocator11BuddySystem9blk_index17hcd9ce7a5032bb5d0E>
    80020550:	85aa                	mv	a1,a0
    80020552:	ecae                	sd	a1,88(sp)
    80020554:	20a13423          	sd	a0,520(sp)
    80020558:	a009                	j	8002055a <.LBB4_74+0x4a>
            let buddyi = if bi % 2 == 0 { bi+1 } else { bi-1 };
    8002055a:	6566                	ld	a0,88(sp)
    8002055c:	8905                	andi	a0,a0,1
    8002055e:	e909                	bnez	a0,80020570 <.LBB4_74+0x60>
    80020560:	a009                	j	80020562 <.LBB4_74+0x52>
    80020562:	65e6                	ld	a1,88(sp)
    80020564:	00158513          	addi	a0,a1,1
    80020568:	e8aa                	sd	a0,80(sp)
    8002056a:	18b56563          	bltu	a0,a1,800206f4 <.LBB4_82>
    8002056e:	a801                	j	8002057e <.LBB4_74+0x6e>
    80020570:	6566                	ld	a0,88(sp)
    80020572:	fff50593          	addi	a1,a0,-1
    80020576:	e4ae                	sd	a1,72(sp)
    80020578:	14b56f63          	bltu	a0,a1,800206d6 <.LBB4_80>
    8002057c:	a021                	j	80020584 <.LBB4_74+0x74>
    8002057e:	6546                	ld	a0,80(sp)
    80020580:	ff2a                	sd	a0,440(sp)
    80020582:	a021                	j	8002058a <.LBB4_74+0x7a>
    80020584:	6526                	ld	a0,72(sp)
    80020586:	ff2a                	sd	a0,440(sp)
    80020588:	a009                	j	8002058a <.LBB4_74+0x7a>
            let info = unsafe { self.get_info_mut(sizei) };
    8002058a:	754e                	ld	a0,240(sp)
    8002058c:	65f2                	ld	a1,280(sp)
    8002058e:	00000097          	auipc	ra,0x0
    80020592:	70a080e7          	jalr	1802(ra) # 80020c98 <_ZN9allocator11BuddySystem12get_info_mut17h828847c6ad79cffaE>
    80020596:	e0aa                	sd	a0,64(sp)
    80020598:	a009                	j	8002059a <.LBB4_74+0x8a>
    8002059a:	65e6                	ld	a1,88(sp)
    8002059c:	6506                	ld	a0,64(sp)
    8002059e:	20a13823          	sd	a0,528(sp)
    800205a2:	4601                	li	a2,0
            info.alloc_set(bi, false);
    800205a4:	00001097          	auipc	ra,0x1
    800205a8:	bf6080e7          	jalr	-1034(ra) # 8002119a <_ZN9allocator9BuddyInfo9alloc_set17h48fdb360b5f9c917E>
    800205ac:	a009                	j	800205ae <.LBB4_74+0x9e>
            
            // test if buddy is free
            if info.is_alloc_set(buddyi) {
    800205ae:	6506                	ld	a0,64(sp)
    800205b0:	75fa                	ld	a1,440(sp)
    800205b2:	00001097          	auipc	ra,0x1
    800205b6:	c70080e7          	jalr	-912(ra) # 80021222 <_ZN9allocator9BuddyInfo12is_alloc_set17h74e6eb5491672d31E>
    800205ba:	fc2a                	sd	a0,56(sp)
    800205bc:	a009                	j	800205be <.LBB4_74+0xae>
    800205be:	7562                	ld	a0,56(sp)
    800205c0:	4581                	li	a1,0
    800205c2:	00b50463          	beq	a0,a1,800205ca <.LBB4_74+0xba>
    800205c6:	a009                	j	800205c8 <.LBB4_74+0xb8>
//! Thread-unsafe, panic-free buddy system allocator.
    800205c8:	a06d                	j	80020672 <.LBB4_75+0x80>
                break;
            }
            let buddy_addr = self.blk_addr(sizei, buddyi);
    800205ca:	754e                	ld	a0,240(sp)
    800205cc:	65f2                	ld	a1,280(sp)
    800205ce:	767a                	ld	a2,440(sp)
    800205d0:	00001097          	auipc	ra,0x1
    800205d4:	974080e7          	jalr	-1676(ra) # 80020f44 <_ZN9allocator11BuddySystem8blk_addr17h1858bf3dd7c08f3fE>
    800205d8:	85aa                	mv	a1,a0
    800205da:	f82e                	sd	a1,48(sp)
    800205dc:	20a13c23          	sd	a0,536(sp)
    800205e0:	a009                	j	800205e2 <.LBB4_74+0xd2>
            unsafe { (buddy_addr as *mut List).as_mut().unwrap().remove(); }
    800205e2:	7542                	ld	a0,48(sp)
    800205e4:	00002097          	auipc	ra,0x2
    800205e8:	886080e7          	jalr	-1914(ra) # 80021e6a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h1d891c09167259ccE>
    800205ec:	f42a                	sd	a0,40(sp)
    800205ee:	a009                	j	800205f0 <.LBB4_74+0xe0>
    800205f0:	7522                	ld	a0,40(sp)

00000000800205f2 <.LBB4_75>:
    800205f2:	0000c597          	auipc	a1,0xc
    800205f6:	9a658593          	addi	a1,a1,-1626 # 8002bf98 <.L__unnamed_24>
    800205fa:	00001097          	auipc	ra,0x1
    800205fe:	0d6080e7          	jalr	214(ra) # 800216d0 <_ZN4core6option15Option$LT$T$GT$6unwrap17h92f45fda96995230E>
    80020602:	f02a                	sd	a0,32(sp)
    80020604:	a009                	j	80020606 <.LBB4_75+0x14>
    80020606:	7502                	ld	a0,32(sp)
    80020608:	00001097          	auipc	ra,0x1
    8002060c:	094080e7          	jalr	148(ra) # 8002169c <_ZN9allocator4list4List6remove17hdaf9d5be7333b4ddE>
    80020610:	a009                	j	80020612 <.LBB4_75+0x20>
            if buddyi % 2 == 0 {
    80020612:	1b814503          	lbu	a0,440(sp)
    80020616:	8905                	andi	a0,a0,1
    80020618:	e509                	bnez	a0,80020622 <.LBB4_75+0x30>
    8002061a:	a009                	j	8002061c <.LBB4_75+0x2a>
                raw_addr = buddy_addr;
    8002061c:	7542                	ld	a0,48(sp)
    8002061e:	e62a                	sd	a0,264(sp)
            if buddyi % 2 == 0 {
    80020620:	a011                	j	80020624 <.LBB4_75+0x32>
    80020622:	a009                	j	80020624 <.LBB4_75+0x32>
            }

            // coalesce and continue
            sizei += 1;
    80020624:	65f2                	ld	a1,280(sp)
    80020626:	00158513          	addi	a0,a1,1
    8002062a:	ec2a                	sd	a0,24(sp)
    8002062c:	0eb56263          	bltu	a0,a1,80020710 <.LBB4_84>
    80020630:	a009                	j	80020632 <.LBB4_75+0x40>
    80020632:	65e2                	ld	a1,24(sp)
    80020634:	754e                	ld	a0,240(sp)
    80020636:	ee2e                	sd	a1,280(sp)
            let spliti = self.blk_index(sizei, raw_addr);
    80020638:	6632                	ld	a2,264(sp)
    8002063a:	00000097          	auipc	ra,0x0
    8002063e:	76c080e7          	jalr	1900(ra) # 80020da6 <_ZN9allocator11BuddySystem9blk_index17hcd9ce7a5032bb5d0E>
    80020642:	85aa                	mv	a1,a0
    80020644:	e82e                	sd	a1,16(sp)
    80020646:	22a13023          	sd	a0,544(sp)
    8002064a:	a009                	j	8002064c <.LBB4_75+0x5a>
            let info = unsafe { self.get_info_mut(sizei) };
    8002064c:	754e                	ld	a0,240(sp)
    8002064e:	65f2                	ld	a1,280(sp)
    80020650:	00000097          	auipc	ra,0x0
    80020654:	648080e7          	jalr	1608(ra) # 80020c98 <_ZN9allocator11BuddySystem12get_info_mut17h828847c6ad79cffaE>
    80020658:	e42a                	sd	a0,8(sp)
    8002065a:	a009                	j	8002065c <.LBB4_75+0x6a>
    8002065c:	65c2                	ld	a1,16(sp)
    8002065e:	6522                	ld	a0,8(sp)
    80020660:	22a13423          	sd	a0,552(sp)
    80020664:	4601                	li	a2,0
            info.split_set(spliti, false);
    80020666:	00001097          	auipc	ra,0x1
    8002066a:	b78080e7          	jalr	-1160(ra) # 800211de <_ZN9allocator9BuddyInfo9split_set17hd9896ad2ca355490E>
    8002066e:	a009                	j	80020670 <.LBB4_75+0x7e>
        while sizei < self.max_size() {
    80020670:	bd55                	j	80020524 <.LBB4_74+0x14>
        }

        let info = unsafe { self.get_info_mut(sizei) };
    80020672:	754e                	ld	a0,240(sp)
    80020674:	65f2                	ld	a1,280(sp)
    80020676:	00000097          	auipc	ra,0x0
    8002067a:	622080e7          	jalr	1570(ra) # 80020c98 <_ZN9allocator11BuddySystem12get_info_mut17h828847c6ad79cffaE>
    8002067e:	e02a                	sd	a0,0(sp)
    80020680:	a009                	j	80020682 <.LBB4_75+0x90>
    80020682:	6502                	ld	a0,0(sp)
    80020684:	22a13823          	sd	a0,560(sp)
        unsafe { info.free.push(raw_addr); }
    80020688:	65b2                	ld	a1,264(sp)
    8002068a:	00001097          	auipc	ra,0x1
    8002068e:	f46080e7          	jalr	-186(ra) # 800215d0 <_ZN9allocator4list4List4push17h00016bee64ea1dbdE>
    80020692:	a009                	j	80020694 <.LBB4_75+0xa2>
    }
    80020694:	23813083          	ld	ra,568(sp)
    80020698:	24010113          	addi	sp,sp,576
    8002069c:	8082                	ret

000000008002069e <.LBB4_76>:
            let bi = self.blk_index(i+1, raw_addr);
    8002069e:	0000b517          	auipc	a0,0xb
    800206a2:	68250513          	addi	a0,a0,1666 # 8002bd20 <str.2>

00000000800206a6 <.LBB4_77>:
    800206a6:	0000b617          	auipc	a2,0xb
    800206aa:	7fa60613          	addi	a2,a2,2042 # 8002bea0 <.L__unnamed_25>
    800206ae:	45f1                	li	a1,28
    800206b0:	00002097          	auipc	ra,0x2
    800206b4:	bc6080e7          	jalr	-1082(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

00000000800206ba <.LBB4_78>:
            let info = unsafe { self.get_info_mut(i+1) };
    800206ba:	0000b517          	auipc	a0,0xb
    800206be:	66650513          	addi	a0,a0,1638 # 8002bd20 <str.2>

00000000800206c2 <.LBB4_79>:
    800206c2:	0000b617          	auipc	a2,0xb
    800206c6:	7f660613          	addi	a2,a2,2038 # 8002beb8 <.L__unnamed_26>
    800206ca:	45f1                	li	a1,28
    800206cc:	00002097          	auipc	ra,0x2
    800206d0:	baa080e7          	jalr	-1110(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

00000000800206d6 <.LBB4_80>:
            let buddyi = if bi % 2 == 0 { bi+1 } else { bi-1 };
    800206d6:	0000b517          	auipc	a0,0xb
    800206da:	59a50513          	addi	a0,a0,1434 # 8002bc70 <str.0>

00000000800206de <.LBB4_81>:
    800206de:	0000c617          	auipc	a2,0xc
    800206e2:	88a60613          	addi	a2,a2,-1910 # 8002bf68 <.L__unnamed_27>
    800206e6:	02100593          	li	a1,33
    800206ea:	00002097          	auipc	ra,0x2
    800206ee:	b8c080e7          	jalr	-1140(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

00000000800206f4 <.LBB4_82>:
    800206f4:	0000b517          	auipc	a0,0xb
    800206f8:	62c50513          	addi	a0,a0,1580 # 8002bd20 <str.2>

00000000800206fc <.LBB4_83>:
    800206fc:	0000c617          	auipc	a2,0xc
    80020700:	88460613          	addi	a2,a2,-1916 # 8002bf80 <.L__unnamed_28>
    80020704:	45f1                	li	a1,28
    80020706:	00002097          	auipc	ra,0x2
    8002070a:	b70080e7          	jalr	-1168(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080020710 <.LBB4_84>:
            sizei += 1;
    80020710:	0000b517          	auipc	a0,0xb
    80020714:	61050513          	addi	a0,a0,1552 # 8002bd20 <str.2>

0000000080020718 <.LBB4_85>:
    80020718:	0000c617          	auipc	a2,0xc
    8002071c:	89860613          	addi	a2,a2,-1896 # 8002bfb0 <.L__unnamed_29>
    80020720:	45f1                	li	a1,28
    80020722:	00002097          	auipc	ra,0x2
    80020726:	b54080e7          	jalr	-1196(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN9allocator11BuddySystem9mark_meta17h01c7ae17553a6764E:

000000008002072c <_ZN9allocator11BuddySystem9mark_meta17h01c7ae17553a6764E>:

    /// Mark meta data of buddy system as used.
    /// [self.base, cur)
    fn mark_meta(&mut self, cur: usize) -> usize {
    8002072c:	7139                	addi	sp,sp,-64
    8002072e:	fc06                	sd	ra,56(sp)
    80020730:	e42e                	sd	a1,8(sp)
    80020732:	e82a                	sd	a0,16(sp)
    80020734:	f02a                	sd	a0,32(sp)
    80020736:	f42e                	sd	a1,40(sp)
        let meta = cur - self.base;
    80020738:	6108                	ld	a0,0(a0)
    8002073a:	40a58533          	sub	a0,a1,a0
    8002073e:	ec2a                	sd	a0,24(sp)
    80020740:	02a5e163          	bltu	a1,a0,80020762 <.LBB5_4>
    80020744:	a009                	j	80020746 <_ZN9allocator11BuddySystem9mark_meta17h01c7ae17553a6764E+0x1a>
    80020746:	6622                	ld	a2,8(sp)
    80020748:	6542                	ld	a0,16(sp)
    8002074a:	65e2                	ld	a1,24(sp)
    8002074c:	f82e                	sd	a1,48(sp)
        self.mark(self.base, cur);
    8002074e:	610c                	ld	a1,0(a0)
    80020750:	00000097          	auipc	ra,0x0
    80020754:	0fa080e7          	jalr	250(ra) # 8002084a <_ZN9allocator11BuddySystem4mark17h082e3ed5a4c299caE>
    80020758:	a009                	j	8002075a <_ZN9allocator11BuddySystem9mark_meta17h01c7ae17553a6764E+0x2e>
        meta
    }
    8002075a:	6562                	ld	a0,24(sp)
    8002075c:	70e2                	ld	ra,56(sp)
    8002075e:	6121                	addi	sp,sp,64
    80020760:	8082                	ret

0000000080020762 <.LBB5_4>:
        let meta = cur - self.base;
    80020762:	0000b517          	auipc	a0,0xb
    80020766:	50e50513          	addi	a0,a0,1294 # 8002bc70 <str.0>

000000008002076a <.LBB5_5>:
    8002076a:	0000c617          	auipc	a2,0xc
    8002076e:	85e60613          	addi	a2,a2,-1954 # 8002bfc8 <.L__unnamed_30>
    80020772:	02100593          	li	a1,33
    80020776:	00002097          	auipc	ra,0x2
    8002077a:	b00080e7          	jalr	-1280(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN9allocator11BuddySystem12mark_unavail17h19653a018281c6a8E:

0000000080020780 <_ZN9allocator11BuddySystem12mark_unavail17h19653a018281c6a8E>:

    /// Mark unavailable data due to the requirement,
    /// that the size of buddy system should be a power of 2.
    fn mark_unavail(&mut self) -> usize {
    80020780:	715d                	addi	sp,sp,-80
    80020782:	e486                	sd	ra,72(sp)
    80020784:	f42a                	sd	a0,40(sp)
    80020786:	fc2a                	sd	a0,56(sp)
        let unavail = self.blk_size(self.max_size()) - (self.actual_end - self.base);
    80020788:	00000097          	auipc	ra,0x0
    8002078c:	568080e7          	jalr	1384(ra) # 80020cf0 <_ZN9allocator11BuddySystem8max_size17hef7a09e8b41b3266E>
    80020790:	f82a                	sd	a0,48(sp)
    80020792:	a009                	j	80020794 <_ZN9allocator11BuddySystem12mark_unavail17h19653a018281c6a8E+0x14>
    80020794:	75c2                	ld	a1,48(sp)
    80020796:	7522                	ld	a0,40(sp)
    80020798:	00001097          	auipc	ra,0x1
    8002079c:	82e080e7          	jalr	-2002(ra) # 80020fc6 <_ZN9allocator11BuddySystem8blk_size17h8693939904cd2981E>
    800207a0:	f02a                	sd	a0,32(sp)
    800207a2:	a009                	j	800207a4 <_ZN9allocator11BuddySystem12mark_unavail17h19653a018281c6a8E+0x24>
    800207a4:	75a2                	ld	a1,40(sp)
    800207a6:	6588                	ld	a0,8(a1)
    800207a8:	618c                	ld	a1,0(a1)
    800207aa:	40b505b3          	sub	a1,a0,a1
    800207ae:	ec2e                	sd	a1,24(sp)
    800207b0:	04b56163          	bltu	a0,a1,800207f2 <.LBB6_10>
    800207b4:	a009                	j	800207b6 <_ZN9allocator11BuddySystem12mark_unavail17h19653a018281c6a8E+0x36>
    800207b6:	7502                	ld	a0,32(sp)
    800207b8:	65e2                	ld	a1,24(sp)
    800207ba:	40b505b3          	sub	a1,a0,a1
    800207be:	e82e                	sd	a1,16(sp)
    800207c0:	04b56863          	bltu	a0,a1,80020810 <.LBB6_12>
    800207c4:	a009                	j	800207c6 <_ZN9allocator11BuddySystem12mark_unavail17h19653a018281c6a8E+0x46>
    800207c6:	6542                	ld	a0,16(sp)
    800207c8:	75a2                	ld	a1,40(sp)
    800207ca:	e0aa                	sd	a0,64(sp)
        self.mark(self.actual_end, self.actual_end + unavail);
    800207cc:	658c                	ld	a1,8(a1)
    800207ce:	e02e                	sd	a1,0(sp)
    800207d0:	952e                	add	a0,a0,a1
    800207d2:	e42a                	sd	a0,8(sp)
    800207d4:	04b56d63          	bltu	a0,a1,8002082e <.LBB6_14>
    800207d8:	a009                	j	800207da <_ZN9allocator11BuddySystem12mark_unavail17h19653a018281c6a8E+0x5a>
    800207da:	6622                	ld	a2,8(sp)
    800207dc:	6582                	ld	a1,0(sp)
    800207de:	7522                	ld	a0,40(sp)
    800207e0:	00000097          	auipc	ra,0x0
    800207e4:	06a080e7          	jalr	106(ra) # 8002084a <_ZN9allocator11BuddySystem4mark17h082e3ed5a4c299caE>
    800207e8:	a009                	j	800207ea <_ZN9allocator11BuddySystem12mark_unavail17h19653a018281c6a8E+0x6a>
        unavail
    }
    800207ea:	6542                	ld	a0,16(sp)
    800207ec:	60a6                	ld	ra,72(sp)
    800207ee:	6161                	addi	sp,sp,80
    800207f0:	8082                	ret

00000000800207f2 <.LBB6_10>:
        let unavail = self.blk_size(self.max_size()) - (self.actual_end - self.base);
    800207f2:	0000b517          	auipc	a0,0xb
    800207f6:	47e50513          	addi	a0,a0,1150 # 8002bc70 <str.0>

00000000800207fa <.LBB6_11>:
    800207fa:	0000b617          	auipc	a2,0xb
    800207fe:	7e660613          	addi	a2,a2,2022 # 8002bfe0 <.L__unnamed_31>
    80020802:	02100593          	li	a1,33
    80020806:	00002097          	auipc	ra,0x2
    8002080a:	a70080e7          	jalr	-1424(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080020810 <.LBB6_12>:
    80020810:	0000b517          	auipc	a0,0xb
    80020814:	46050513          	addi	a0,a0,1120 # 8002bc70 <str.0>

0000000080020818 <.LBB6_13>:
    80020818:	0000b617          	auipc	a2,0xb
    8002081c:	7e060613          	addi	a2,a2,2016 # 8002bff8 <.L__unnamed_32>
    80020820:	02100593          	li	a1,33
    80020824:	00002097          	auipc	ra,0x2
    80020828:	a52080e7          	jalr	-1454(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008002082e <.LBB6_14>:
        self.mark(self.actual_end, self.actual_end + unavail);
    8002082e:	0000b517          	auipc	a0,0xb
    80020832:	4f250513          	addi	a0,a0,1266 # 8002bd20 <str.2>

0000000080020836 <.LBB6_15>:
    80020836:	0000b617          	auipc	a2,0xb
    8002083a:	7da60613          	addi	a2,a2,2010 # 8002c010 <.L__unnamed_33>
    8002083e:	45f1                	li	a1,28
    80020840:	00002097          	auipc	ra,0x2
    80020844:	a36080e7          	jalr	-1482(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN9allocator11BuddySystem4mark17h082e3ed5a4c299caE:

000000008002084a <_ZN9allocator11BuddySystem4mark17h082e3ed5a4c299caE>:

    /// Mark memory from [left, right) as allocated.
    /// Useful for meta and unavailable data.
    fn mark(&mut self, left: usize, right: usize) {
    8002084a:	7121                	addi	sp,sp,-448
    8002084c:	ff06                	sd	ra,440(sp)
    8002084e:	f0b2                	sd	a2,96(sp)
    80020850:	f4ae                	sd	a1,104(sp)
    80020852:	f8aa                	sd	a0,112(sp)
    80020854:	eeaa                	sd	a0,344(sp)
    80020856:	f2ae                	sd	a1,352(sp)
    80020858:	f6b2                	sd	a2,360(sp)
        debug_assert_eq!(left % self.leaf_size, 0);
    8002085a:	6d08                	ld	a0,24(a0)
    8002085c:	fcaa                	sd	a0,120(sp)
    8002085e:	4581                	li	a1,0
    80020860:	16b50d63          	beq	a0,a1,800209da <.LBB7_32>
    80020864:	a009                	j	80020866 <_ZN9allocator11BuddySystem4mark17h082e3ed5a4c299caE+0x1c>
    80020866:	7526                	ld	a0,104(sp)
    80020868:	75e6                	ld	a1,120(sp)
    8002086a:	02b57533          	remu	a0,a0,a1
    8002086e:	e92a                	sd	a0,144(sp)
    80020870:	0910                	addi	a2,sp,144
    80020872:	e8b2                	sd	a2,80(sp)
    80020874:	e132                	sd	a2,128(sp)

0000000080020876 <.LBB7_28>:
    80020876:	00006597          	auipc	a1,0x6
    8002087a:	ffa58593          	addi	a1,a1,-6 # 80026870 <.L__unnamed_6+0xc8>
    8002087e:	ecae                	sd	a1,88(sp)
    80020880:	e52e                	sd	a1,136(sp)
    80020882:	fab2                	sd	a2,368(sp)
    80020884:	feae                	sd	a1,376(sp)
    80020886:	4581                	li	a1,0
    80020888:	02b50363          	beq	a0,a1,800208ae <.LBB7_29+0x14>
    8002088c:	a009                	j	8002088e <.LBB7_28+0x18>
    8002088e:	6666                	ld	a2,88(sp)
    80020890:	65c6                	ld	a1,80(sp)
    80020892:	4501                	li	a0,0
    80020894:	08a10fa3          	sb	a0,159(sp)
    80020898:	f12a                	sd	a0,160(sp)

000000008002089a <.LBB7_29>:
    8002089a:	0000b717          	auipc	a4,0xb
    8002089e:	7e670713          	addi	a4,a4,2022 # 8002c080 <.L__unnamed_35>
    800208a2:	1114                	addi	a3,sp,160
    800208a4:	fffff097          	auipc	ra,0xfffff
    800208a8:	100080e7          	jalr	256(ra) # 8001f9a4 <_ZN4core9panicking13assert_failed17h4e6d74c9d534b647E>
    800208ac:	0000                	unimp
        debug_assert_eq!(right % self.leaf_size, 0);
    800208ae:	7546                	ld	a0,112(sp)
    800208b0:	6d08                	ld	a0,24(a0)
    800208b2:	e4aa                	sd	a0,72(sp)
    800208b4:	4581                	li	a1,0
    800208b6:	14b50163          	beq	a0,a1,800209f8 <.LBB7_34>
    800208ba:	a009                	j	800208bc <.LBB7_29+0x22>
    800208bc:	7506                	ld	a0,96(sp)
    800208be:	65a6                	ld	a1,72(sp)
    800208c0:	02b57533          	remu	a0,a0,a1
    800208c4:	f1aa                	sd	a0,224(sp)
    800208c6:	1190                	addi	a2,sp,224
    800208c8:	fc32                	sd	a2,56(sp)
    800208ca:	e9b2                	sd	a2,208(sp)

00000000800208cc <.LBB7_30>:
    800208cc:	00006597          	auipc	a1,0x6
    800208d0:	fa458593          	addi	a1,a1,-92 # 80026870 <.L__unnamed_6+0xc8>
    800208d4:	e0ae                	sd	a1,64(sp)
    800208d6:	edae                	sd	a1,216(sp)
    800208d8:	e332                	sd	a2,384(sp)
    800208da:	e72e                	sd	a1,392(sp)
    800208dc:	4581                	li	a1,0
    800208de:	02b50363          	beq	a0,a1,80020904 <.LBB7_31+0x14>
    800208e2:	a009                	j	800208e4 <.LBB7_30+0x18>
    800208e4:	6606                	ld	a2,64(sp)
    800208e6:	75e2                	ld	a1,56(sp)
    800208e8:	4501                	li	a0,0
    800208ea:	0ea107a3          	sb	a0,239(sp)
    800208ee:	f9aa                	sd	a0,240(sp)

00000000800208f0 <.LBB7_31>:
    800208f0:	0000b717          	auipc	a4,0xb
    800208f4:	7c070713          	addi	a4,a4,1984 # 8002c0b0 <.L__unnamed_36>
    800208f8:	1994                	addi	a3,sp,240
    800208fa:	fffff097          	auipc	ra,0xfffff
    800208fe:	0aa080e7          	jalr	170(ra) # 8001f9a4 <_ZN4core9panicking13assert_failed17h4e6d74c9d534b647E>
    80020902:	0000                	unimp

        for i in 0..self.nsizes {
    80020904:	7546                	ld	a0,112(sp)
    80020906:	690c                	ld	a1,16(a0)
    80020908:	4501                	li	a0,0
    8002090a:	f22a                	sd	a0,288(sp)
    8002090c:	f62e                	sd	a1,296(sp)
    8002090e:	fffff097          	auipc	ra,0xfffff
    80020912:	034080e7          	jalr	52(ra) # 8001f942 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he0a8d93712e5493bE>
    80020916:	f42a                	sd	a0,40(sp)
    80020918:	f82e                	sd	a1,48(sp)
    8002091a:	a009                	j	8002091c <.LBB7_31+0x2c>
    8002091c:	7542                	ld	a0,48(sp)
    8002091e:	75a2                	ld	a1,40(sp)
    80020920:	fa2e                	sd	a1,304(sp)
    80020922:	fe2a                	sd	a0,312(sp)
    80020924:	a009                	j	80020926 <.LBB7_31+0x36>
    80020926:	1a08                	addi	a0,sp,304
    80020928:	fffff097          	auipc	ra,0xfffff
    8002092c:	fac080e7          	jalr	-84(ra) # 8001f8d4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE>
    80020930:	e2aa                	sd	a0,320(sp)
    80020932:	e6ae                	sd	a1,328(sp)
    80020934:	a009                	j	80020936 <.LBB7_31+0x46>
    80020936:	6516                	ld	a0,320(sp)
    80020938:	4581                	li	a1,0
    8002093a:	00b50463          	beq	a0,a1,80020942 <.LBB7_31+0x52>
    8002093e:	a009                	j	80020940 <.LBB7_31+0x50>
    80020940:	a029                	j	8002094a <.LBB7_31+0x5a>
                    info.split_set(bi, true);
                }
                bi += 1;
            }
        }
    }
    80020942:	70fa                	ld	ra,440(sp)
    80020944:	6139                	addi	sp,sp,448
    80020946:	8082                	ret
        for i in 0..self.nsizes {
    80020948:	0000                	unimp
    8002094a:	7626                	ld	a2,104(sp)
    8002094c:	7546                	ld	a0,112(sp)
    8002094e:	65b6                	ld	a1,328(sp)
    80020950:	f02e                	sd	a1,32(sp)
    80020952:	eb2e                	sd	a1,400(sp)
    80020954:	ef2e                	sd	a1,408(sp)
    80020956:	f32e                	sd	a1,416(sp)
            let mut bi = self.blk_index(i, left);
    80020958:	00000097          	auipc	ra,0x0
    8002095c:	44e080e7          	jalr	1102(ra) # 80020da6 <_ZN9allocator11BuddySystem9blk_index17hcd9ce7a5032bb5d0E>
    80020960:	eaaa                	sd	a0,336(sp)
    80020962:	a009                	j	80020964 <.LBB7_31+0x74>
            let bj = self.blk_index_next(i, right);
    80020964:	7606                	ld	a2,96(sp)
    80020966:	7582                	ld	a1,32(sp)
    80020968:	7546                	ld	a0,112(sp)
    8002096a:	00000097          	auipc	ra,0x0
    8002096e:	4ba080e7          	jalr	1210(ra) # 80020e24 <_ZN9allocator11BuddySystem14blk_index_next17hac914ee1adc8ccddE>
    80020972:	85aa                	mv	a1,a0
    80020974:	ec2e                	sd	a1,24(sp)
    80020976:	f72a                	sd	a0,424(sp)
    80020978:	a009                	j	8002097a <.LBB7_31+0x8a>
            while bi < bj {
    8002097a:	65e2                	ld	a1,24(sp)
    8002097c:	6556                	ld	a0,336(sp)
    8002097e:	00b56463          	bltu	a0,a1,80020986 <.LBB7_31+0x96>
    80020982:	a009                	j	80020984 <.LBB7_31+0x94>
        for i in 0..self.nsizes {
    80020984:	b74d                	j	80020926 <.LBB7_31+0x36>
                let info = unsafe { self.get_info_mut(i) };
    80020986:	7582                	ld	a1,32(sp)
    80020988:	7546                	ld	a0,112(sp)
    8002098a:	00000097          	auipc	ra,0x0
    8002098e:	30e080e7          	jalr	782(ra) # 80020c98 <_ZN9allocator11BuddySystem12get_info_mut17h828847c6ad79cffaE>
    80020992:	e82a                	sd	a0,16(sp)
    80020994:	a009                	j	80020996 <.LBB7_31+0xa6>
    80020996:	6542                	ld	a0,16(sp)
    80020998:	fb2a                	sd	a0,432(sp)
                info.alloc_set(bi, true);
    8002099a:	65d6                	ld	a1,336(sp)
    8002099c:	4605                	li	a2,1
    8002099e:	00000097          	auipc	ra,0x0
    800209a2:	7fc080e7          	jalr	2044(ra) # 8002119a <_ZN9allocator9BuddyInfo9alloc_set17h48fdb360b5f9c917E>
    800209a6:	a009                	j	800209a8 <.LBB7_31+0xb8>
    800209a8:	7502                	ld	a0,32(sp)
    800209aa:	4581                	li	a1,0
                if i > 0 {
    800209ac:	00b50b63          	beq	a0,a1,800209c2 <.LBB7_31+0xd2>
    800209b0:	a009                	j	800209b2 <.LBB7_31+0xc2>
                    info.split_set(bi, true);
    800209b2:	6542                	ld	a0,16(sp)
    800209b4:	65d6                	ld	a1,336(sp)
    800209b6:	4605                	li	a2,1
    800209b8:	00001097          	auipc	ra,0x1
    800209bc:	826080e7          	jalr	-2010(ra) # 800211de <_ZN9allocator9BuddyInfo9split_set17hd9896ad2ca355490E>
    800209c0:	a011                	j	800209c4 <.LBB7_31+0xd4>
                if i > 0 {
    800209c2:	a011                	j	800209c6 <.LBB7_31+0xd6>
    800209c4:	a009                	j	800209c6 <.LBB7_31+0xd6>
                bi += 1;
    800209c6:	65d6                	ld	a1,336(sp)
    800209c8:	00158513          	addi	a0,a1,1
    800209cc:	e42a                	sd	a0,8(sp)
    800209ce:	04b56463          	bltu	a0,a1,80020a16 <.LBB7_36>
    800209d2:	a009                	j	800209d4 <.LBB7_31+0xe4>
    800209d4:	6522                	ld	a0,8(sp)
    800209d6:	eaaa                	sd	a0,336(sp)
            while bi < bj {
    800209d8:	b74d                	j	8002097a <.LBB7_31+0x8a>

00000000800209da <.LBB7_32>:
        debug_assert_eq!(left % self.leaf_size, 0);
    800209da:	0000b517          	auipc	a0,0xb
    800209de:	66650513          	addi	a0,a0,1638 # 8002c040 <str.3>

00000000800209e2 <.LBB7_33>:
    800209e2:	0000b617          	auipc	a2,0xb
    800209e6:	64660613          	addi	a2,a2,1606 # 8002c028 <.L__unnamed_37>
    800209ea:	03900593          	li	a1,57
    800209ee:	00002097          	auipc	ra,0x2
    800209f2:	888080e7          	jalr	-1912(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

00000000800209f8 <.LBB7_34>:
        debug_assert_eq!(right % self.leaf_size, 0);
    800209f8:	0000b517          	auipc	a0,0xb
    800209fc:	64850513          	addi	a0,a0,1608 # 8002c040 <str.3>

0000000080020a00 <.LBB7_35>:
    80020a00:	0000b617          	auipc	a2,0xb
    80020a04:	69860613          	addi	a2,a2,1688 # 8002c098 <.L__unnamed_38>
    80020a08:	03900593          	li	a1,57
    80020a0c:	00002097          	auipc	ra,0x2
    80020a10:	86a080e7          	jalr	-1942(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080020a16 <.LBB7_36>:
                bi += 1;
    80020a16:	0000b517          	auipc	a0,0xb
    80020a1a:	30a50513          	addi	a0,a0,778 # 8002bd20 <str.2>

0000000080020a1e <.LBB7_37>:
    80020a1e:	0000b617          	auipc	a2,0xb
    80020a22:	6aa60613          	addi	a2,a2,1706 # 8002c0c8 <.L__unnamed_39>
    80020a26:	45f1                	li	a1,28
    80020a28:	00002097          	auipc	ra,0x2
    80020a2c:	84e080e7          	jalr	-1970(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN9allocator11BuddySystem9init_free17h25e98e7c902c4f06E:

0000000080020a32 <_ZN9allocator11BuddySystem9init_free17h25e98e7c902c4f06E>:

    /// Init free regions between [left, self.actual_end).
    /// Must be called after marking meta and unavail data.
    fn init_free(&mut self, left: usize) -> usize {
    80020a32:	7151                	addi	sp,sp,-240
    80020a34:	f586                	sd	ra,232(sp)
    80020a36:	e8ae                	sd	a1,80(sp)
    80020a38:	ecaa                	sd	a0,88(sp)
    80020a3a:	f52a                	sd	a0,168(sp)
    80020a3c:	f92e                	sd	a1,176(sp)
        let right = self.actual_end;
    80020a3e:	650c                	ld	a1,8(a0)
    80020a40:	f0ae                	sd	a1,96(sp)
    80020a42:	fd2e                	sd	a1,184(sp)
    80020a44:	4581                	li	a1,0
        let mut free = 0;
    80020a46:	f8ae                	sd	a1,112(sp)
        for i in 0..self.max_size() {
    80020a48:	00000097          	auipc	ra,0x0
    80020a4c:	2a8080e7          	jalr	680(ra) # 80020cf0 <_ZN9allocator11BuddySystem8max_size17hef7a09e8b41b3266E>
    80020a50:	f4aa                	sd	a0,104(sp)
    80020a52:	a009                	j	80020a54 <_ZN9allocator11BuddySystem9init_free17h25e98e7c902c4f06E+0x22>
    80020a54:	75a6                	ld	a1,104(sp)
    80020a56:	4501                	li	a0,0
    80020a58:	fcaa                	sd	a0,120(sp)
    80020a5a:	e12e                	sd	a1,128(sp)
    80020a5c:	fffff097          	auipc	ra,0xfffff
    80020a60:	ee6080e7          	jalr	-282(ra) # 8001f942 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he0a8d93712e5493bE>
    80020a64:	e0aa                	sd	a0,64(sp)
    80020a66:	e4ae                	sd	a1,72(sp)
    80020a68:	a009                	j	80020a6a <_ZN9allocator11BuddySystem9init_free17h25e98e7c902c4f06E+0x38>
    80020a6a:	6526                	ld	a0,72(sp)
    80020a6c:	6586                	ld	a1,64(sp)
    80020a6e:	e52e                	sd	a1,136(sp)
    80020a70:	e92a                	sd	a0,144(sp)
    80020a72:	a009                	j	80020a74 <_ZN9allocator11BuddySystem9init_free17h25e98e7c902c4f06E+0x42>
    80020a74:	0128                	addi	a0,sp,136
    80020a76:	fffff097          	auipc	ra,0xfffff
    80020a7a:	e5e080e7          	jalr	-418(ra) # 8001f8d4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE>
    80020a7e:	ed2a                	sd	a0,152(sp)
    80020a80:	f12e                	sd	a1,160(sp)
    80020a82:	a009                	j	80020a84 <_ZN9allocator11BuddySystem9init_free17h25e98e7c902c4f06E+0x52>
    80020a84:	656a                	ld	a0,152(sp)
    80020a86:	4581                	li	a1,0
    80020a88:	00b50463          	beq	a0,a1,80020a90 <_ZN9allocator11BuddySystem9init_free17h25e98e7c902c4f06E+0x5e>
    80020a8c:	a009                	j	80020a8e <_ZN9allocator11BuddySystem9init_free17h25e98e7c902c4f06E+0x5c>
    80020a8e:	a031                	j	80020a9a <_ZN9allocator11BuddySystem9init_free17h25e98e7c902c4f06E+0x68>
            if left < right {
                free += self.init_free_pair(i, rbi);
            }
        }
        free
    }
    80020a90:	7546                	ld	a0,112(sp)
    80020a92:	70ae                	ld	ra,232(sp)
    80020a94:	616d                	addi	sp,sp,240
    80020a96:	8082                	ret
        for i in 0..self.max_size() {
    80020a98:	0000                	unimp
    80020a9a:	6646                	ld	a2,80(sp)
    80020a9c:	6566                	ld	a0,88(sp)
    80020a9e:	758a                	ld	a1,160(sp)
    80020aa0:	f82e                	sd	a1,48(sp)
    80020aa2:	e1ae                	sd	a1,192(sp)
    80020aa4:	e5ae                	sd	a1,200(sp)
    80020aa6:	e9ae                	sd	a1,208(sp)
            let lbi = self.blk_index_next(i, left);
    80020aa8:	00000097          	auipc	ra,0x0
    80020aac:	37c080e7          	jalr	892(ra) # 80020e24 <_ZN9allocator11BuddySystem14blk_index_next17hac914ee1adc8ccddE>
    80020ab0:	85aa                	mv	a1,a0
    80020ab2:	fc2e                	sd	a1,56(sp)
    80020ab4:	edaa                	sd	a0,216(sp)
    80020ab6:	a009                	j	80020ab8 <_ZN9allocator11BuddySystem9init_free17h25e98e7c902c4f06E+0x86>
            let rbi = self.blk_index(i, right);
    80020ab8:	7606                	ld	a2,96(sp)
    80020aba:	75c2                	ld	a1,48(sp)
    80020abc:	6566                	ld	a0,88(sp)
    80020abe:	00000097          	auipc	ra,0x0
    80020ac2:	2e8080e7          	jalr	744(ra) # 80020da6 <_ZN9allocator11BuddySystem9blk_index17hcd9ce7a5032bb5d0E>
    80020ac6:	85aa                	mv	a1,a0
    80020ac8:	f42e                	sd	a1,40(sp)
    80020aca:	f1aa                	sd	a0,224(sp)
    80020acc:	a009                	j	80020ace <_ZN9allocator11BuddySystem9init_free17h25e98e7c902c4f06E+0x9c>
            free += self.init_free_pair(i, lbi);
    80020ace:	7662                	ld	a2,56(sp)
    80020ad0:	75c2                	ld	a1,48(sp)
    80020ad2:	6566                	ld	a0,88(sp)
    80020ad4:	00000097          	auipc	ra,0x0
    80020ad8:	08a080e7          	jalr	138(ra) # 80020b5e <_ZN9allocator11BuddySystem14init_free_pair17h8a26a6b8be683eeaE>
    80020adc:	f02a                	sd	a0,32(sp)
    80020ade:	a009                	j	80020ae0 <_ZN9allocator11BuddySystem9init_free17h25e98e7c902c4f06E+0xae>
    80020ae0:	7502                	ld	a0,32(sp)
    80020ae2:	75c6                	ld	a1,112(sp)
    80020ae4:	952e                	add	a0,a0,a1
    80020ae6:	ec2a                	sd	a0,24(sp)
    80020ae8:	02b56f63          	bltu	a0,a1,80020b26 <.LBB8_20>
    80020aec:	a009                	j	80020aee <_ZN9allocator11BuddySystem9init_free17h25e98e7c902c4f06E+0xbc>
    80020aee:	6546                	ld	a0,80(sp)
    80020af0:	7586                	ld	a1,96(sp)
    80020af2:	6662                	ld	a2,24(sp)
    80020af4:	f8b2                	sd	a2,112(sp)
            if left < right {
    80020af6:	00b57c63          	bgeu	a0,a1,80020b0e <_ZN9allocator11BuddySystem9init_free17h25e98e7c902c4f06E+0xdc>
    80020afa:	a009                	j	80020afc <_ZN9allocator11BuddySystem9init_free17h25e98e7c902c4f06E+0xca>
                free += self.init_free_pair(i, rbi);
    80020afc:	7622                	ld	a2,40(sp)
    80020afe:	75c2                	ld	a1,48(sp)
    80020b00:	6566                	ld	a0,88(sp)
    80020b02:	00000097          	auipc	ra,0x0
    80020b06:	05c080e7          	jalr	92(ra) # 80020b5e <_ZN9allocator11BuddySystem14init_free_pair17h8a26a6b8be683eeaE>
    80020b0a:	e82a                	sd	a0,16(sp)
    80020b0c:	a011                	j	80020b10 <_ZN9allocator11BuddySystem9init_free17h25e98e7c902c4f06E+0xde>
            if left < right {
    80020b0e:	a819                	j	80020b24 <_ZN9allocator11BuddySystem9init_free17h25e98e7c902c4f06E+0xf2>
                free += self.init_free_pair(i, rbi);
    80020b10:	6542                	ld	a0,16(sp)
    80020b12:	75c6                	ld	a1,112(sp)
    80020b14:	952e                	add	a0,a0,a1
    80020b16:	e42a                	sd	a0,8(sp)
    80020b18:	02b56563          	bltu	a0,a1,80020b42 <.LBB8_22>
    80020b1c:	a009                	j	80020b1e <_ZN9allocator11BuddySystem9init_free17h25e98e7c902c4f06E+0xec>
    80020b1e:	6522                	ld	a0,8(sp)
    80020b20:	f8aa                	sd	a0,112(sp)
            if left < right {
    80020b22:	a009                	j	80020b24 <_ZN9allocator11BuddySystem9init_free17h25e98e7c902c4f06E+0xf2>
        for i in 0..self.max_size() {
    80020b24:	bf81                	j	80020a74 <_ZN9allocator11BuddySystem9init_free17h25e98e7c902c4f06E+0x42>

0000000080020b26 <.LBB8_20>:
            free += self.init_free_pair(i, lbi);
    80020b26:	0000b517          	auipc	a0,0xb
    80020b2a:	1fa50513          	addi	a0,a0,506 # 8002bd20 <str.2>

0000000080020b2e <.LBB8_21>:
    80020b2e:	0000b617          	auipc	a2,0xb
    80020b32:	5b260613          	addi	a2,a2,1458 # 8002c0e0 <.L__unnamed_40>
    80020b36:	45f1                	li	a1,28
    80020b38:	00001097          	auipc	ra,0x1
    80020b3c:	73e080e7          	jalr	1854(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080020b42 <.LBB8_22>:
                free += self.init_free_pair(i, rbi);
    80020b42:	0000b517          	auipc	a0,0xb
    80020b46:	1de50513          	addi	a0,a0,478 # 8002bd20 <str.2>

0000000080020b4a <.LBB8_23>:
    80020b4a:	0000b617          	auipc	a2,0xb
    80020b4e:	5ae60613          	addi	a2,a2,1454 # 8002c0f8 <.L__unnamed_41>
    80020b52:	45f1                	li	a1,28
    80020b54:	00001097          	auipc	ra,0x1
    80020b58:	722080e7          	jalr	1826(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN9allocator11BuddySystem14init_free_pair17h8a26a6b8be683eeaE:

0000000080020b5e <_ZN9allocator11BuddySystem14init_free_pair17h8a26a6b8be683eeaE>:

    /// Push a buddy into the list if it cannot be coalesce and upgrade.
    fn init_free_pair(&mut self, sizei: usize, bi: usize) -> usize {
    80020b5e:	7135                	addi	sp,sp,-160
    80020b60:	ed06                	sd	ra,152(sp)
    80020b62:	e0b2                	sd	a2,64(sp)
    80020b64:	e4ae                	sd	a1,72(sp)
    80020b66:	e8aa                	sd	a0,80(sp)
    80020b68:	f4aa                	sd	a0,104(sp)
    80020b6a:	f8ae                	sd	a1,112(sp)
    80020b6c:	fcb2                	sd	a2,120(sp)
        let buddyi = if bi % 2 == 0 { bi+1 } else { bi-1 };
    80020b6e:	00167513          	andi	a0,a2,1
    80020b72:	e909                	bnez	a0,80020b84 <_ZN9allocator11BuddySystem14init_free_pair17h8a26a6b8be683eeaE+0x26>
    80020b74:	a009                	j	80020b76 <_ZN9allocator11BuddySystem14init_free_pair17h8a26a6b8be683eeaE+0x18>
    80020b76:	6586                	ld	a1,64(sp)
    80020b78:	00158513          	addi	a0,a1,1
    80020b7c:	fc2a                	sd	a0,56(sp)
    80020b7e:	0eb56f63          	bltu	a0,a1,80020c7c <.LBB9_24>
    80020b82:	a801                	j	80020b92 <_ZN9allocator11BuddySystem14init_free_pair17h8a26a6b8be683eeaE+0x34>
    80020b84:	6506                	ld	a0,64(sp)
    80020b86:	fff50593          	addi	a1,a0,-1
    80020b8a:	f82e                	sd	a1,48(sp)
    80020b8c:	0cb56963          	bltu	a0,a1,80020c5e <.LBB9_22>
    80020b90:	a021                	j	80020b98 <_ZN9allocator11BuddySystem14init_free_pair17h8a26a6b8be683eeaE+0x3a>
    80020b92:	7562                	ld	a0,56(sp)
    80020b94:	f0aa                	sd	a0,96(sp)
    80020b96:	a021                	j	80020b9e <_ZN9allocator11BuddySystem14init_free_pair17h8a26a6b8be683eeaE+0x40>
    80020b98:	7542                	ld	a0,48(sp)
    80020b9a:	f0aa                	sd	a0,96(sp)
    80020b9c:	a009                	j	80020b9e <_ZN9allocator11BuddySystem14init_free_pair17h8a26a6b8be683eeaE+0x40>
        let blk_addr_bi = self.blk_addr(sizei, bi);
    80020b9e:	6606                	ld	a2,64(sp)
    80020ba0:	65a6                	ld	a1,72(sp)
    80020ba2:	6546                	ld	a0,80(sp)
    80020ba4:	00000097          	auipc	ra,0x0
    80020ba8:	3a0080e7          	jalr	928(ra) # 80020f44 <_ZN9allocator11BuddySystem8blk_addr17h1858bf3dd7c08f3fE>
    80020bac:	85aa                	mv	a1,a0
    80020bae:	f42e                	sd	a1,40(sp)
    80020bb0:	e12a                	sd	a0,128(sp)
    80020bb2:	a009                	j	80020bb4 <_ZN9allocator11BuddySystem14init_free_pair17h8a26a6b8be683eeaE+0x56>
        let blk_addr_buddyi = self.blk_addr(sizei, buddyi);
    80020bb4:	65a6                	ld	a1,72(sp)
    80020bb6:	6546                	ld	a0,80(sp)
    80020bb8:	7606                	ld	a2,96(sp)
    80020bba:	00000097          	auipc	ra,0x0
    80020bbe:	38a080e7          	jalr	906(ra) # 80020f44 <_ZN9allocator11BuddySystem8blk_addr17h1858bf3dd7c08f3fE>
    80020bc2:	85aa                	mv	a1,a0
    80020bc4:	f02e                	sd	a1,32(sp)
    80020bc6:	e52a                	sd	a0,136(sp)
    80020bc8:	a009                	j	80020bca <_ZN9allocator11BuddySystem14init_free_pair17h8a26a6b8be683eeaE+0x6c>
        
        let info = unsafe { self.get_info_mut(sizei) };
    80020bca:	65a6                	ld	a1,72(sp)
    80020bcc:	6546                	ld	a0,80(sp)
    80020bce:	00000097          	auipc	ra,0x0
    80020bd2:	0ca080e7          	jalr	202(ra) # 80020c98 <_ZN9allocator11BuddySystem12get_info_mut17h828847c6ad79cffaE>
    80020bd6:	ec2a                	sd	a0,24(sp)
    80020bd8:	a009                	j	80020bda <_ZN9allocator11BuddySystem14init_free_pair17h8a26a6b8be683eeaE+0x7c>
    80020bda:	6586                	ld	a1,64(sp)
    80020bdc:	6562                	ld	a0,24(sp)
    80020bde:	e92a                	sd	a0,144(sp)
        if info.is_alloc_set(bi) != info.is_alloc_set(buddyi) {
    80020be0:	00000097          	auipc	ra,0x0
    80020be4:	642080e7          	jalr	1602(ra) # 80021222 <_ZN9allocator9BuddyInfo12is_alloc_set17h74e6eb5491672d31E>
    80020be8:	e82a                	sd	a0,16(sp)
    80020bea:	a009                	j	80020bec <_ZN9allocator11BuddySystem14init_free_pair17h8a26a6b8be683eeaE+0x8e>
    80020bec:	6562                	ld	a0,24(sp)
    80020bee:	7586                	ld	a1,96(sp)
    80020bf0:	00000097          	auipc	ra,0x0
    80020bf4:	632080e7          	jalr	1586(ra) # 80021222 <_ZN9allocator9BuddyInfo12is_alloc_set17h74e6eb5491672d31E>
    80020bf8:	e42a                	sd	a0,8(sp)
    80020bfa:	a009                	j	80020bfc <_ZN9allocator11BuddySystem14init_free_pair17h8a26a6b8be683eeaE+0x9e>
    80020bfc:	6542                	ld	a0,16(sp)
    80020bfe:	65a2                	ld	a1,8(sp)
    80020c00:	00b50b63          	beq	a0,a1,80020c16 <_ZN9allocator11BuddySystem14init_free_pair17h8a26a6b8be683eeaE+0xb8>
    80020c04:	a009                	j	80020c06 <_ZN9allocator11BuddySystem14init_free_pair17h8a26a6b8be683eeaE+0xa8>
            // one buddy is free, the other is allocated
            unsafe {
                if info.is_alloc_set(bi) {
    80020c06:	6586                	ld	a1,64(sp)
    80020c08:	6562                	ld	a0,24(sp)
    80020c0a:	00000097          	auipc	ra,0x0
    80020c0e:	618080e7          	jalr	1560(ra) # 80021222 <_ZN9allocator9BuddyInfo12is_alloc_set17h74e6eb5491672d31E>
    80020c12:	e02a                	sd	a0,0(sp)
    80020c14:	a021                	j	80020c1c <_ZN9allocator11BuddySystem14init_free_pair17h8a26a6b8be683eeaE+0xbe>
    80020c16:	4501                	li	a0,0
                    info.free.push(blk_addr_bi);    
                }
            }
            self.blk_size(sizei)
        } else {
            0
    80020c18:	ecaa                	sd	a0,88(sp)
        if info.is_alloc_set(bi) != info.is_alloc_set(buddyi) {
    80020c1a:	a835                	j	80020c56 <_ZN9allocator11BuddySystem14init_free_pair17h8a26a6b8be683eeaE+0xf8>
    80020c1c:	6502                	ld	a0,0(sp)
    80020c1e:	4581                	li	a1,0
                if info.is_alloc_set(bi) {
    80020c20:	00b50a63          	beq	a0,a1,80020c34 <_ZN9allocator11BuddySystem14init_free_pair17h8a26a6b8be683eeaE+0xd6>
    80020c24:	a009                	j	80020c26 <_ZN9allocator11BuddySystem14init_free_pair17h8a26a6b8be683eeaE+0xc8>
                    info.free.push(blk_addr_buddyi);
    80020c26:	7582                	ld	a1,32(sp)
    80020c28:	6562                	ld	a0,24(sp)
    80020c2a:	00001097          	auipc	ra,0x1
    80020c2e:	9a6080e7          	jalr	-1626(ra) # 800215d0 <_ZN9allocator4list4List4push17h00016bee64ea1dbdE>
    80020c32:	a801                	j	80020c42 <_ZN9allocator11BuddySystem14init_free_pair17h8a26a6b8be683eeaE+0xe4>
                    info.free.push(blk_addr_bi);    
    80020c34:	75a2                	ld	a1,40(sp)
    80020c36:	6562                	ld	a0,24(sp)
    80020c38:	00001097          	auipc	ra,0x1
    80020c3c:	998080e7          	jalr	-1640(ra) # 800215d0 <_ZN9allocator4list4List4push17h00016bee64ea1dbdE>
    80020c40:	a011                	j	80020c44 <_ZN9allocator11BuddySystem14init_free_pair17h8a26a6b8be683eeaE+0xe6>
                if info.is_alloc_set(bi) {
    80020c42:	a011                	j	80020c46 <_ZN9allocator11BuddySystem14init_free_pair17h8a26a6b8be683eeaE+0xe8>
    80020c44:	a009                	j	80020c46 <_ZN9allocator11BuddySystem14init_free_pair17h8a26a6b8be683eeaE+0xe8>
            self.blk_size(sizei)
    80020c46:	65a6                	ld	a1,72(sp)
    80020c48:	6546                	ld	a0,80(sp)
    80020c4a:	00000097          	auipc	ra,0x0
    80020c4e:	37c080e7          	jalr	892(ra) # 80020fc6 <_ZN9allocator11BuddySystem8blk_size17h8693939904cd2981E>
    80020c52:	ecaa                	sd	a0,88(sp)
    80020c54:	a009                	j	80020c56 <_ZN9allocator11BuddySystem14init_free_pair17h8a26a6b8be683eeaE+0xf8>
        }
    }
    80020c56:	6566                	ld	a0,88(sp)
    80020c58:	60ea                	ld	ra,152(sp)
    80020c5a:	610d                	addi	sp,sp,160
    80020c5c:	8082                	ret

0000000080020c5e <.LBB9_22>:
        let buddyi = if bi % 2 == 0 { bi+1 } else { bi-1 };
    80020c5e:	0000b517          	auipc	a0,0xb
    80020c62:	01250513          	addi	a0,a0,18 # 8002bc70 <str.0>

0000000080020c66 <.LBB9_23>:
    80020c66:	0000b617          	auipc	a2,0xb
    80020c6a:	4aa60613          	addi	a2,a2,1194 # 8002c110 <.L__unnamed_42>
    80020c6e:	02100593          	li	a1,33
    80020c72:	00001097          	auipc	ra,0x1
    80020c76:	604080e7          	jalr	1540(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080020c7c <.LBB9_24>:
    80020c7c:	0000b517          	auipc	a0,0xb
    80020c80:	0a450513          	addi	a0,a0,164 # 8002bd20 <str.2>

0000000080020c84 <.LBB9_25>:
    80020c84:	0000b617          	auipc	a2,0xb
    80020c88:	4a460613          	addi	a2,a2,1188 # 8002c128 <.L__unnamed_43>
    80020c8c:	45f1                	li	a1,28
    80020c8e:	00001097          	auipc	ra,0x1
    80020c92:	5e8080e7          	jalr	1512(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN9allocator11BuddySystem12get_info_mut17h828847c6ad79cffaE:

0000000080020c98 <_ZN9allocator11BuddySystem12get_info_mut17h828847c6ad79cffaE>:

    /// Get buddy info at certain index.
    ///
    /// SAFETY: must be called after the initialization of infos field.
    unsafe fn get_info_mut(&mut self, index: usize) -> &mut BuddyInfo {
    80020c98:	711d                	addi	sp,sp,-96
    80020c9a:	ec86                	sd	ra,88(sp)
    80020c9c:	f02e                	sd	a1,32(sp)
    80020c9e:	f82a                	sd	a0,48(sp)
    80020ca0:	fc2e                	sd	a1,56(sp)
        let info_slice_ptr = *self.infos.as_ptr();
    80020ca2:	02850513          	addi	a0,a0,40
    80020ca6:	f42a                	sd	a0,40(sp)
    80020ca8:	e8aa                	sd	a0,80(sp)
    80020caa:	a009                	j	80020cac <_ZN9allocator11BuddySystem12get_info_mut17h828847c6ad79cffaE+0x14>
    80020cac:	7602                	ld	a2,32(sp)
    80020cae:	75a2                	ld	a1,40(sp)
    80020cb0:	6188                	ld	a0,0(a1)
    80020cb2:	658c                	ld	a1,8(a1)
    80020cb4:	e0aa                	sd	a0,64(sp)
    80020cb6:	e4ae                	sd	a1,72(sp)
        info_slice_ptr.get_unchecked_mut(index).as_mut().unwrap()
    80020cb8:	00001097          	auipc	ra,0x1
    80020cbc:	f68080e7          	jalr	-152(ra) # 80021c20 <_ZN4core3ptr7mut_ptr41_$LT$impl$u20$$BP$mut$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h83deb5daf75ed8d6E>
    80020cc0:	ec2a                	sd	a0,24(sp)
    80020cc2:	a009                	j	80020cc4 <_ZN9allocator11BuddySystem12get_info_mut17h828847c6ad79cffaE+0x2c>
    80020cc4:	6562                	ld	a0,24(sp)
    80020cc6:	00001097          	auipc	ra,0x1
    80020cca:	ee0080e7          	jalr	-288(ra) # 80021ba6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h46e365b62bffa500E>
    80020cce:	e82a                	sd	a0,16(sp)
    80020cd0:	a009                	j	80020cd2 <_ZN9allocator11BuddySystem12get_info_mut17h828847c6ad79cffaE+0x3a>
    80020cd2:	6542                	ld	a0,16(sp)

0000000080020cd4 <.LBB10_5>:
    80020cd4:	0000b597          	auipc	a1,0xb
    80020cd8:	46c58593          	addi	a1,a1,1132 # 8002c140 <.L__unnamed_44>
    80020cdc:	00001097          	auipc	ra,0x1
    80020ce0:	a60080e7          	jalr	-1440(ra) # 8002173c <_ZN4core6option15Option$LT$T$GT$6unwrap17hda397585f3de5667E>
    80020ce4:	e42a                	sd	a0,8(sp)
    80020ce6:	a009                	j	80020ce8 <.LBB10_5+0x14>
    }
    80020ce8:	6522                	ld	a0,8(sp)
    80020cea:	60e6                	ld	ra,88(sp)
    80020cec:	6125                	addi	sp,sp,96
    80020cee:	8082                	ret

Disassembly of section .text._ZN9allocator11BuddySystem8max_size17hef7a09e8b41b3266E:

0000000080020cf0 <_ZN9allocator11BuddySystem8max_size17hef7a09e8b41b3266E>:

    /// The largest block size.
    /// Also the last index into the buddy info array.
    #[inline]
    fn max_size(&self) -> usize {
    80020cf0:	1141                	addi	sp,sp,-16
    80020cf2:	e42a                	sd	a0,8(sp)
        self.nsizes - 1
    80020cf4:	6908                	ld	a0,16(a0)
    80020cf6:	fff50593          	addi	a1,a0,-1
    80020cfa:	e02e                	sd	a1,0(sp)
    80020cfc:	00b56663          	bltu	a0,a1,80020d08 <.LBB11_3>
    80020d00:	a009                	j	80020d02 <_ZN9allocator11BuddySystem8max_size17hef7a09e8b41b3266E+0x12>
    }
    80020d02:	6502                	ld	a0,0(sp)
    80020d04:	0141                	addi	sp,sp,16
    80020d06:	8082                	ret

0000000080020d08 <.LBB11_3>:
        self.nsizes - 1
    80020d08:	0000b517          	auipc	a0,0xb
    80020d0c:	f6850513          	addi	a0,a0,-152 # 8002bc70 <str.0>

0000000080020d10 <.LBB11_4>:
    80020d10:	0000b617          	auipc	a2,0xb
    80020d14:	44860613          	addi	a2,a2,1096 # 8002c158 <.L__unnamed_45>
    80020d18:	02100593          	li	a1,33
    80020d1c:	00001097          	auipc	ra,0x1
    80020d20:	55a080e7          	jalr	1370(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN9allocator11BuddySystem5n_blk17hdff1460b10f7c769E:

0000000080020d26 <_ZN9allocator11BuddySystem5n_blk17hdff1460b10f7c769E>:

    /// Number of block at size k, based on the total managed memory.
    #[inline]
    fn n_blk(&self, k: usize) -> usize {
    80020d26:	7139                	addi	sp,sp,-64
    80020d28:	fc06                	sd	ra,56(sp)
    80020d2a:	ec2e                	sd	a1,24(sp)
    80020d2c:	f42a                	sd	a0,40(sp)
    80020d2e:	f82e                	sd	a1,48(sp)
        1 << (self.max_size() - k)
    80020d30:	00000097          	auipc	ra,0x0
    80020d34:	fc0080e7          	jalr	-64(ra) # 80020cf0 <_ZN9allocator11BuddySystem8max_size17hef7a09e8b41b3266E>
    80020d38:	f02a                	sd	a0,32(sp)
    80020d3a:	a009                	j	80020d3c <_ZN9allocator11BuddySystem5n_blk17hdff1460b10f7c769E+0x16>
    80020d3c:	7502                	ld	a0,32(sp)
    80020d3e:	65e2                	ld	a1,24(sp)
    80020d40:	40b505b3          	sub	a1,a0,a1
    80020d44:	e82e                	sd	a1,16(sp)
    80020d46:	02b56263          	bltu	a0,a1,80020d6a <.LBB12_6>
    80020d4a:	a009                	j	80020d4c <_ZN9allocator11BuddySystem5n_blk17hdff1460b10f7c769E+0x26>
    80020d4c:	6642                	ld	a2,16(sp)
    80020d4e:	fc067513          	andi	a0,a2,-64
    80020d52:	4585                	li	a1,1
    80020d54:	00c595b3          	sll	a1,a1,a2
    80020d58:	e42e                	sd	a1,8(sp)
    80020d5a:	4581                	li	a1,0
    80020d5c:	02b51663          	bne	a0,a1,80020d88 <.LBB12_8>
    80020d60:	a009                	j	80020d62 <_ZN9allocator11BuddySystem5n_blk17hdff1460b10f7c769E+0x3c>
    }
    80020d62:	6522                	ld	a0,8(sp)
    80020d64:	70e2                	ld	ra,56(sp)
    80020d66:	6121                	addi	sp,sp,64
    80020d68:	8082                	ret

0000000080020d6a <.LBB12_6>:
        1 << (self.max_size() - k)
    80020d6a:	0000b517          	auipc	a0,0xb
    80020d6e:	f0650513          	addi	a0,a0,-250 # 8002bc70 <str.0>

0000000080020d72 <.LBB12_7>:
    80020d72:	0000b617          	auipc	a2,0xb
    80020d76:	3fe60613          	addi	a2,a2,1022 # 8002c170 <.L__unnamed_46>
    80020d7a:	02100593          	li	a1,33
    80020d7e:	00001097          	auipc	ra,0x1
    80020d82:	4f8080e7          	jalr	1272(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080020d88 <.LBB12_8>:
    80020d88:	0000b517          	auipc	a0,0xb
    80020d8c:	41850513          	addi	a0,a0,1048 # 8002c1a0 <str.4>

0000000080020d90 <.LBB12_9>:
    80020d90:	0000b617          	auipc	a2,0xb
    80020d94:	3f860613          	addi	a2,a2,1016 # 8002c188 <.L__unnamed_47>
    80020d98:	02300593          	li	a1,35
    80020d9c:	00001097          	auipc	ra,0x1
    80020da0:	4da080e7          	jalr	1242(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN9allocator11BuddySystem9blk_index17hcd9ce7a5032bb5d0E:

0000000080020da6 <_ZN9allocator11BuddySystem9blk_index17hcd9ce7a5032bb5d0E>:

    fn blk_index(&self, k: usize, addr: usize) -> usize {
    80020da6:	7139                	addi	sp,sp,-64
    80020da8:	fc06                	sd	ra,56(sp)
    80020daa:	e42e                	sd	a1,8(sp)
    80020dac:	e82a                	sd	a0,16(sp)
    80020dae:	f02a                	sd	a0,32(sp)
    80020db0:	f42e                	sd	a1,40(sp)
    80020db2:	f832                	sd	a2,48(sp)
        (addr - self.base) / self.blk_size(k)
    80020db4:	6108                	ld	a0,0(a0)
    80020db6:	40a60533          	sub	a0,a2,a0
    80020dba:	ec2a                	sd	a0,24(sp)
    80020dbc:	02a66763          	bltu	a2,a0,80020dea <.LBB13_6>
    80020dc0:	a009                	j	80020dc2 <_ZN9allocator11BuddySystem9blk_index17hcd9ce7a5032bb5d0E+0x1c>
    80020dc2:	65a2                	ld	a1,8(sp)
    80020dc4:	6542                	ld	a0,16(sp)
    80020dc6:	00000097          	auipc	ra,0x0
    80020dca:	200080e7          	jalr	512(ra) # 80020fc6 <_ZN9allocator11BuddySystem8blk_size17h8693939904cd2981E>
    80020dce:	e02a                	sd	a0,0(sp)
    80020dd0:	a009                	j	80020dd2 <_ZN9allocator11BuddySystem9blk_index17hcd9ce7a5032bb5d0E+0x2c>
    80020dd2:	6502                	ld	a0,0(sp)
    80020dd4:	4581                	li	a1,0
    80020dd6:	02b50963          	beq	a0,a1,80020e08 <.LBB13_8>
    80020dda:	a009                	j	80020ddc <_ZN9allocator11BuddySystem9blk_index17hcd9ce7a5032bb5d0E+0x36>
    80020ddc:	6562                	ld	a0,24(sp)
    80020dde:	6582                	ld	a1,0(sp)
    80020de0:	02b55533          	divu	a0,a0,a1
    }
    80020de4:	70e2                	ld	ra,56(sp)
    80020de6:	6121                	addi	sp,sp,64
    80020de8:	8082                	ret

0000000080020dea <.LBB13_6>:
        (addr - self.base) / self.blk_size(k)
    80020dea:	0000b517          	auipc	a0,0xb
    80020dee:	e8650513          	addi	a0,a0,-378 # 8002bc70 <str.0>

0000000080020df2 <.LBB13_7>:
    80020df2:	0000b617          	auipc	a2,0xb
    80020df6:	3d660613          	addi	a2,a2,982 # 8002c1c8 <.L__unnamed_48>
    80020dfa:	02100593          	li	a1,33
    80020dfe:	00001097          	auipc	ra,0x1
    80020e02:	478080e7          	jalr	1144(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080020e08 <.LBB13_8>:
    80020e08:	0000b517          	auipc	a0,0xb
    80020e0c:	ed850513          	addi	a0,a0,-296 # 8002bce0 <str.1>

0000000080020e10 <.LBB13_9>:
    80020e10:	0000b617          	auipc	a2,0xb
    80020e14:	3b860613          	addi	a2,a2,952 # 8002c1c8 <.L__unnamed_48>
    80020e18:	45e5                	li	a1,25
    80020e1a:	00001097          	auipc	ra,0x1
    80020e1e:	45c080e7          	jalr	1116(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN9allocator11BuddySystem14blk_index_next17hac914ee1adc8ccddE:

0000000080020e24 <_ZN9allocator11BuddySystem14blk_index_next17hac914ee1adc8ccddE>:

    fn blk_index_next(&self, k: usize, addr: usize) -> usize {
    80020e24:	711d                	addi	sp,sp,-96
    80020e26:	ec86                	sd	ra,88(sp)
    80020e28:	ec32                	sd	a2,24(sp)
    80020e2a:	f02a                	sd	a0,32(sp)
    80020e2c:	fc2a                	sd	a0,56(sp)
    80020e2e:	e0ae                	sd	a1,64(sp)
    80020e30:	e4b2                	sd	a2,72(sp)
        let bs = self.blk_size(k);
    80020e32:	00000097          	auipc	ra,0x0
    80020e36:	194080e7          	jalr	404(ra) # 80020fc6 <_ZN9allocator11BuddySystem8blk_size17h8693939904cd2981E>
    80020e3a:	85aa                	mv	a1,a0
    80020e3c:	f42e                	sd	a1,40(sp)
    80020e3e:	e8aa                	sd	a0,80(sp)
    80020e40:	a009                	j	80020e42 <_ZN9allocator11BuddySystem14blk_index_next17hac914ee1adc8ccddE+0x1e>
        let mut i = (addr - self.base) / bs;
    80020e42:	6562                	ld	a0,24(sp)
    80020e44:	7582                	ld	a1,32(sp)
    80020e46:	618c                	ld	a1,0(a1)
    80020e48:	40b505b3          	sub	a1,a0,a1
    80020e4c:	e82e                	sd	a1,16(sp)
    80020e4e:	06b56263          	bltu	a0,a1,80020eb2 <.LBB14_15>
    80020e52:	a009                	j	80020e54 <_ZN9allocator11BuddySystem14blk_index_next17hac914ee1adc8ccddE+0x30>
    80020e54:	7522                	ld	a0,40(sp)
    80020e56:	4581                	li	a1,0
    80020e58:	06b50c63          	beq	a0,a1,80020ed0 <.LBB14_17>
    80020e5c:	a009                	j	80020e5e <_ZN9allocator11BuddySystem14blk_index_next17hac914ee1adc8ccddE+0x3a>
    80020e5e:	6562                	ld	a0,24(sp)
    80020e60:	7582                	ld	a1,32(sp)
    80020e62:	6642                	ld	a2,16(sp)
    80020e64:	76a2                	ld	a3,40(sp)
    80020e66:	02d65633          	divu	a2,a2,a3
    80020e6a:	f832                	sd	a2,48(sp)
        if (addr - self.base) % bs > 0 {
    80020e6c:	618c                	ld	a1,0(a1)
    80020e6e:	40b505b3          	sub	a1,a0,a1
    80020e72:	e42e                	sd	a1,8(sp)
    80020e74:	06b56c63          	bltu	a0,a1,80020eec <.LBB14_19>
    80020e78:	a009                	j	80020e7a <_ZN9allocator11BuddySystem14blk_index_next17hac914ee1adc8ccddE+0x56>
    80020e7a:	7522                	ld	a0,40(sp)
    80020e7c:	4581                	li	a1,0
    80020e7e:	08b50663          	beq	a0,a1,80020f0a <.LBB14_21>
    80020e82:	a009                	j	80020e84 <_ZN9allocator11BuddySystem14blk_index_next17hac914ee1adc8ccddE+0x60>
    80020e84:	6522                	ld	a0,8(sp)
    80020e86:	75a2                	ld	a1,40(sp)
    80020e88:	02b57533          	remu	a0,a0,a1
    80020e8c:	4581                	li	a1,0
    80020e8e:	00b50a63          	beq	a0,a1,80020ea2 <_ZN9allocator11BuddySystem14blk_index_next17hac914ee1adc8ccddE+0x7e>
    80020e92:	a009                	j	80020e94 <_ZN9allocator11BuddySystem14blk_index_next17hac914ee1adc8ccddE+0x70>
            i += 1;
    80020e94:	75c2                	ld	a1,48(sp)
    80020e96:	00158513          	addi	a0,a1,1
    80020e9a:	e02a                	sd	a0,0(sp)
    80020e9c:	08b56663          	bltu	a0,a1,80020f28 <.LBB14_23>
    80020ea0:	a011                	j	80020ea4 <_ZN9allocator11BuddySystem14blk_index_next17hac914ee1adc8ccddE+0x80>
        if (addr - self.base) % bs > 0 {
    80020ea2:	a021                	j	80020eaa <_ZN9allocator11BuddySystem14blk_index_next17hac914ee1adc8ccddE+0x86>
            i += 1;
    80020ea4:	6502                	ld	a0,0(sp)
    80020ea6:	f82a                	sd	a0,48(sp)
        if (addr - self.base) % bs > 0 {
    80020ea8:	a009                	j	80020eaa <_ZN9allocator11BuddySystem14blk_index_next17hac914ee1adc8ccddE+0x86>
        }
        i
    }
    80020eaa:	7542                	ld	a0,48(sp)
    80020eac:	60e6                	ld	ra,88(sp)
    80020eae:	6125                	addi	sp,sp,96
    80020eb0:	8082                	ret

0000000080020eb2 <.LBB14_15>:
        let mut i = (addr - self.base) / bs;
    80020eb2:	0000b517          	auipc	a0,0xb
    80020eb6:	dbe50513          	addi	a0,a0,-578 # 8002bc70 <str.0>

0000000080020eba <.LBB14_16>:
    80020eba:	0000b617          	auipc	a2,0xb
    80020ebe:	32660613          	addi	a2,a2,806 # 8002c1e0 <.L__unnamed_49>
    80020ec2:	02100593          	li	a1,33
    80020ec6:	00001097          	auipc	ra,0x1
    80020eca:	3b0080e7          	jalr	944(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080020ed0 <.LBB14_17>:
    80020ed0:	0000b517          	auipc	a0,0xb
    80020ed4:	e1050513          	addi	a0,a0,-496 # 8002bce0 <str.1>

0000000080020ed8 <.LBB14_18>:
    80020ed8:	0000b617          	auipc	a2,0xb
    80020edc:	30860613          	addi	a2,a2,776 # 8002c1e0 <.L__unnamed_49>
    80020ee0:	45e5                	li	a1,25
    80020ee2:	00001097          	auipc	ra,0x1
    80020ee6:	394080e7          	jalr	916(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080020eec <.LBB14_19>:
        if (addr - self.base) % bs > 0 {
    80020eec:	0000b517          	auipc	a0,0xb
    80020ef0:	d8450513          	addi	a0,a0,-636 # 8002bc70 <str.0>

0000000080020ef4 <.LBB14_20>:
    80020ef4:	0000b617          	auipc	a2,0xb
    80020ef8:	30460613          	addi	a2,a2,772 # 8002c1f8 <.L__unnamed_50>
    80020efc:	02100593          	li	a1,33
    80020f00:	00001097          	auipc	ra,0x1
    80020f04:	376080e7          	jalr	886(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080020f0a <.LBB14_21>:
    80020f0a:	0000b517          	auipc	a0,0xb
    80020f0e:	13650513          	addi	a0,a0,310 # 8002c040 <str.3>

0000000080020f12 <.LBB14_22>:
    80020f12:	0000b617          	auipc	a2,0xb
    80020f16:	2e660613          	addi	a2,a2,742 # 8002c1f8 <.L__unnamed_50>
    80020f1a:	03900593          	li	a1,57
    80020f1e:	00001097          	auipc	ra,0x1
    80020f22:	358080e7          	jalr	856(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080020f28 <.LBB14_23>:
            i += 1;
    80020f28:	0000b517          	auipc	a0,0xb
    80020f2c:	df850513          	addi	a0,a0,-520 # 8002bd20 <str.2>

0000000080020f30 <.LBB14_24>:
    80020f30:	0000b617          	auipc	a2,0xb
    80020f34:	2e060613          	addi	a2,a2,736 # 8002c210 <.L__unnamed_51>
    80020f38:	45f1                	li	a1,28
    80020f3a:	00001097          	auipc	ra,0x1
    80020f3e:	33c080e7          	jalr	828(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN9allocator11BuddySystem8blk_addr17h1858bf3dd7c08f3fE:

0000000080020f44 <_ZN9allocator11BuddySystem8blk_addr17h1858bf3dd7c08f3fE>:

    /// Receive size k and block index bi.
    /// Return the block's raw addr at this buddy system.
    fn blk_addr(&self, k: usize, bi: usize) -> usize {
    80020f44:	715d                	addi	sp,sp,-80
    80020f46:	e486                	sd	ra,72(sp)
    80020f48:	ec32                	sd	a2,24(sp)
    80020f4a:	f82a                	sd	a0,48(sp)
    80020f4c:	fc2e                	sd	a1,56(sp)
    80020f4e:	e0b2                	sd	a2,64(sp)
        self.base + (bi * self.blk_size(k))
    80020f50:	6110                	ld	a2,0(a0)
    80020f52:	f032                	sd	a2,32(sp)
    80020f54:	00000097          	auipc	ra,0x0
    80020f58:	072080e7          	jalr	114(ra) # 80020fc6 <_ZN9allocator11BuddySystem8blk_size17h8693939904cd2981E>
    80020f5c:	f42a                	sd	a0,40(sp)
    80020f5e:	a009                	j	80020f60 <_ZN9allocator11BuddySystem8blk_addr17h1858bf3dd7c08f3fE+0x1c>
    80020f60:	6562                	ld	a0,24(sp)
    80020f62:	75a2                	ld	a1,40(sp)
    80020f64:	02b50633          	mul	a2,a0,a1
    80020f68:	e832                	sd	a2,16(sp)
    80020f6a:	02b53533          	mulhu	a0,a0,a1
    80020f6e:	4581                	li	a1,0
    80020f70:	00b51e63          	bne	a0,a1,80020f8c <.LBB15_6>
    80020f74:	a009                	j	80020f76 <_ZN9allocator11BuddySystem8blk_addr17h1858bf3dd7c08f3fE+0x32>
    80020f76:	7582                	ld	a1,32(sp)
    80020f78:	6542                	ld	a0,16(sp)
    80020f7a:	952e                	add	a0,a0,a1
    80020f7c:	e42a                	sd	a0,8(sp)
    80020f7e:	02b56663          	bltu	a0,a1,80020faa <.LBB15_8>
    80020f82:	a009                	j	80020f84 <_ZN9allocator11BuddySystem8blk_addr17h1858bf3dd7c08f3fE+0x40>
    }
    80020f84:	6522                	ld	a0,8(sp)
    80020f86:	60a6                	ld	ra,72(sp)
    80020f88:	6161                	addi	sp,sp,80
    80020f8a:	8082                	ret

0000000080020f8c <.LBB15_6>:
        self.base + (bi * self.blk_size(k))
    80020f8c:	0000b517          	auipc	a0,0xb
    80020f90:	2b450513          	addi	a0,a0,692 # 8002c240 <str.5>

0000000080020f94 <.LBB15_7>:
    80020f94:	0000b617          	auipc	a2,0xb
    80020f98:	29460613          	addi	a2,a2,660 # 8002c228 <.L__unnamed_52>
    80020f9c:	02100593          	li	a1,33
    80020fa0:	00001097          	auipc	ra,0x1
    80020fa4:	2d6080e7          	jalr	726(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080020faa <.LBB15_8>:
    80020faa:	0000b517          	auipc	a0,0xb
    80020fae:	d7650513          	addi	a0,a0,-650 # 8002bd20 <str.2>

0000000080020fb2 <.LBB15_9>:
    80020fb2:	0000b617          	auipc	a2,0xb
    80020fb6:	2b660613          	addi	a2,a2,694 # 8002c268 <.L__unnamed_53>
    80020fba:	45f1                	li	a1,28
    80020fbc:	00001097          	auipc	ra,0x1
    80020fc0:	2ba080e7          	jalr	698(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN9allocator11BuddySystem8blk_size17h8693939904cd2981E:

0000000080020fc6 <_ZN9allocator11BuddySystem8blk_size17h8693939904cd2981E>:

    #[inline]
    fn blk_size(&self, k: usize) -> usize {
    80020fc6:	7179                	addi	sp,sp,-48
    80020fc8:	862e                	mv	a2,a1
    80020fca:	e82a                	sd	a0,16(sp)
    80020fcc:	f02a                	sd	a0,32(sp)
    80020fce:	f432                	sd	a2,40(sp)
        (1 << k) * self.leaf_size
    80020fd0:	fc067513          	andi	a0,a2,-64
    80020fd4:	4585                	li	a1,1
    80020fd6:	00c595b3          	sll	a1,a1,a2
    80020fda:	ec2e                	sd	a1,24(sp)
    80020fdc:	4581                	li	a1,0
    80020fde:	02b51263          	bne	a0,a1,80021002 <.LBB16_5>
    80020fe2:	a009                	j	80020fe4 <_ZN9allocator11BuddySystem8blk_size17h8693939904cd2981E+0x1e>
    80020fe4:	6562                	ld	a0,24(sp)
    80020fe6:	65c2                	ld	a1,16(sp)
    80020fe8:	6d8c                	ld	a1,24(a1)
    80020fea:	02b50633          	mul	a2,a0,a1
    80020fee:	e432                	sd	a2,8(sp)
    80020ff0:	02b53533          	mulhu	a0,a0,a1
    80020ff4:	4581                	li	a1,0
    80020ff6:	02b51563          	bne	a0,a1,80021020 <.LBB16_7>
    80020ffa:	a009                	j	80020ffc <_ZN9allocator11BuddySystem8blk_size17h8693939904cd2981E+0x36>
    }
    80020ffc:	6522                	ld	a0,8(sp)
    80020ffe:	6145                	addi	sp,sp,48
    80021000:	8082                	ret

0000000080021002 <.LBB16_5>:
        (1 << k) * self.leaf_size
    80021002:	0000b517          	auipc	a0,0xb
    80021006:	19e50513          	addi	a0,a0,414 # 8002c1a0 <str.4>

000000008002100a <.LBB16_6>:
    8002100a:	0000b617          	auipc	a2,0xb
    8002100e:	27660613          	addi	a2,a2,630 # 8002c280 <.L__unnamed_54>
    80021012:	02300593          	li	a1,35
    80021016:	00001097          	auipc	ra,0x1
    8002101a:	260080e7          	jalr	608(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080021020 <.LBB16_7>:
    80021020:	0000b517          	auipc	a0,0xb
    80021024:	22050513          	addi	a0,a0,544 # 8002c240 <str.5>

0000000080021028 <.LBB16_8>:
    80021028:	0000b617          	auipc	a2,0xb
    8002102c:	25860613          	addi	a2,a2,600 # 8002c280 <.L__unnamed_54>
    80021030:	02100593          	li	a1,33
    80021034:	00001097          	auipc	ra,0x1
    80021038:	242080e7          	jalr	578(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN9allocator9BuddyInfo9get_alloc17hc8e52f4241734faeE:

000000008002103e <_ZN9allocator9BuddyInfo9get_alloc17hc8e52f4241734faeE>:
    split: MaybeUninit<*mut [u8]>,      // tell if a block is split into smaller size
}

impl BuddyInfo {
    /// SAFETY: must be called after the initialization of alloc field.
    unsafe fn get_alloc(&self, index: usize) -> &u8 {
    8002103e:	711d                	addi	sp,sp,-96
    80021040:	ec86                	sd	ra,88(sp)
    80021042:	f02e                	sd	a1,32(sp)
    80021044:	f82a                	sd	a0,48(sp)
    80021046:	fc2e                	sd	a1,56(sp)
        let alloc_slice_ptr = *self.alloc.as_ptr() as *const [u8];
    80021048:	0541                	addi	a0,a0,16
    8002104a:	f42a                	sd	a0,40(sp)
    8002104c:	e8aa                	sd	a0,80(sp)
    8002104e:	a009                	j	80021050 <_ZN9allocator9BuddyInfo9get_alloc17hc8e52f4241734faeE+0x12>
    80021050:	7602                	ld	a2,32(sp)
    80021052:	75a2                	ld	a1,40(sp)
    80021054:	6188                	ld	a0,0(a1)
    80021056:	658c                	ld	a1,8(a1)
    80021058:	e0aa                	sd	a0,64(sp)
    8002105a:	e4ae                	sd	a1,72(sp)
        alloc_slice_ptr.get_unchecked(index).as_ref().unwrap()
    8002105c:	fffff097          	auipc	ra,0xfffff
    80021060:	816080e7          	jalr	-2026(ra) # 8001f872 <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$13get_unchecked17h149838d98ef59845E>
    80021064:	ec2a                	sd	a0,24(sp)
    80021066:	a009                	j	80021068 <_ZN9allocator9BuddyInfo9get_alloc17hc8e52f4241734faeE+0x2a>
    80021068:	6562                	ld	a0,24(sp)
    8002106a:	ffffe097          	auipc	ra,0xffffe
    8002106e:	7a0080e7          	jalr	1952(ra) # 8001f80a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6as_ref17h1afc8f6daddbc052E>
    80021072:	e82a                	sd	a0,16(sp)
    80021074:	a009                	j	80021076 <_ZN9allocator9BuddyInfo9get_alloc17hc8e52f4241734faeE+0x38>
    80021076:	6542                	ld	a0,16(sp)

0000000080021078 <.LBB17_5>:
    80021078:	0000b597          	auipc	a1,0xb
    8002107c:	22058593          	addi	a1,a1,544 # 8002c298 <.L__unnamed_55>
    80021080:	00000097          	auipc	ra,0x0
    80021084:	6f2080e7          	jalr	1778(ra) # 80021772 <_ZN4core6option15Option$LT$T$GT$6unwrap17hf33e22fb94afcd9bE>
    80021088:	e42a                	sd	a0,8(sp)
    8002108a:	a009                	j	8002108c <.LBB17_5+0x14>
    }
    8002108c:	6522                	ld	a0,8(sp)
    8002108e:	60e6                	ld	ra,88(sp)
    80021090:	6125                	addi	sp,sp,96
    80021092:	8082                	ret

Disassembly of section .text._ZN9allocator9BuddyInfo13get_alloc_mut17he7a2a5362df5d388E:

0000000080021094 <_ZN9allocator9BuddyInfo13get_alloc_mut17he7a2a5362df5d388E>:

    /// SAFETY: must be called after the initialization of alloc field.
    unsafe fn get_alloc_mut(&mut self, index: usize) -> &mut u8 {
    80021094:	711d                	addi	sp,sp,-96
    80021096:	ec86                	sd	ra,88(sp)
    80021098:	f02e                	sd	a1,32(sp)
    8002109a:	f82a                	sd	a0,48(sp)
    8002109c:	fc2e                	sd	a1,56(sp)
        let alloc_slice_ptr = *self.alloc.as_ptr();
    8002109e:	0541                	addi	a0,a0,16
    800210a0:	f42a                	sd	a0,40(sp)
    800210a2:	e8aa                	sd	a0,80(sp)
    800210a4:	a009                	j	800210a6 <_ZN9allocator9BuddyInfo13get_alloc_mut17he7a2a5362df5d388E+0x12>
    800210a6:	7602                	ld	a2,32(sp)
    800210a8:	75a2                	ld	a1,40(sp)
    800210aa:	6188                	ld	a0,0(a1)
    800210ac:	658c                	ld	a1,8(a1)
    800210ae:	e0aa                	sd	a0,64(sp)
    800210b0:	e4ae                	sd	a1,72(sp)
        alloc_slice_ptr.get_unchecked_mut(index).as_mut().unwrap()
    800210b2:	ffffe097          	auipc	ra,0xffffe
    800210b6:	6fc080e7          	jalr	1788(ra) # 8001f7ae <_ZN4core3ptr7mut_ptr41_$LT$impl$u20$$BP$mut$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h1fb5de3e2413636cE>
    800210ba:	ec2a                	sd	a0,24(sp)
    800210bc:	a009                	j	800210be <_ZN9allocator9BuddyInfo13get_alloc_mut17he7a2a5362df5d388E+0x2a>
    800210be:	6562                	ld	a0,24(sp)
    800210c0:	ffffe097          	auipc	ra,0xffffe
    800210c4:	67c080e7          	jalr	1660(ra) # 8001f73c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17he7a20e0a0a2f5b66E>
    800210c8:	e82a                	sd	a0,16(sp)
    800210ca:	a009                	j	800210cc <_ZN9allocator9BuddyInfo13get_alloc_mut17he7a2a5362df5d388E+0x38>
    800210cc:	6542                	ld	a0,16(sp)

00000000800210ce <.LBB18_5>:
    800210ce:	0000b597          	auipc	a1,0xb
    800210d2:	1e258593          	addi	a1,a1,482 # 8002c2b0 <.L__unnamed_56>
    800210d6:	00000097          	auipc	ra,0x0
    800210da:	630080e7          	jalr	1584(ra) # 80021706 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9c7c2e8ce1270a73E>
    800210de:	e42a                	sd	a0,8(sp)
    800210e0:	a009                	j	800210e2 <.LBB18_5+0x14>
    }
    800210e2:	6522                	ld	a0,8(sp)
    800210e4:	60e6                	ld	ra,88(sp)
    800210e6:	6125                	addi	sp,sp,96
    800210e8:	8082                	ret

Disassembly of section .text._ZN9allocator9BuddyInfo9get_split17hd25381f0deeea7b0E:

00000000800210ea <_ZN9allocator9BuddyInfo9get_split17hd25381f0deeea7b0E>:

    /// SAFETY: must be called after the initialization of split field.
    unsafe fn get_split(&self, index: usize) -> &u8 {
    800210ea:	711d                	addi	sp,sp,-96
    800210ec:	ec86                	sd	ra,88(sp)
    800210ee:	f02e                	sd	a1,32(sp)
    800210f0:	f82a                	sd	a0,48(sp)
    800210f2:	fc2e                	sd	a1,56(sp)
        let split_slice_ptr = *self.split.as_ptr() as *const [u8];
    800210f4:	02050513          	addi	a0,a0,32
    800210f8:	f42a                	sd	a0,40(sp)
    800210fa:	e8aa                	sd	a0,80(sp)
    800210fc:	a009                	j	800210fe <_ZN9allocator9BuddyInfo9get_split17hd25381f0deeea7b0E+0x14>
    800210fe:	7602                	ld	a2,32(sp)
    80021100:	75a2                	ld	a1,40(sp)
    80021102:	6188                	ld	a0,0(a1)
    80021104:	658c                	ld	a1,8(a1)
    80021106:	e0aa                	sd	a0,64(sp)
    80021108:	e4ae                	sd	a1,72(sp)
        split_slice_ptr.get_unchecked(index).as_ref().unwrap()
    8002110a:	ffffe097          	auipc	ra,0xffffe
    8002110e:	768080e7          	jalr	1896(ra) # 8001f872 <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$13get_unchecked17h149838d98ef59845E>
    80021112:	ec2a                	sd	a0,24(sp)
    80021114:	a009                	j	80021116 <_ZN9allocator9BuddyInfo9get_split17hd25381f0deeea7b0E+0x2c>
    80021116:	6562                	ld	a0,24(sp)
    80021118:	ffffe097          	auipc	ra,0xffffe
    8002111c:	6f2080e7          	jalr	1778(ra) # 8001f80a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6as_ref17h1afc8f6daddbc052E>
    80021120:	e82a                	sd	a0,16(sp)
    80021122:	a009                	j	80021124 <_ZN9allocator9BuddyInfo9get_split17hd25381f0deeea7b0E+0x3a>
    80021124:	6542                	ld	a0,16(sp)

0000000080021126 <.LBB19_5>:
    80021126:	0000b597          	auipc	a1,0xb
    8002112a:	1a258593          	addi	a1,a1,418 # 8002c2c8 <.L__unnamed_57>
    8002112e:	00000097          	auipc	ra,0x0
    80021132:	644080e7          	jalr	1604(ra) # 80021772 <_ZN4core6option15Option$LT$T$GT$6unwrap17hf33e22fb94afcd9bE>
    80021136:	e42a                	sd	a0,8(sp)
    80021138:	a009                	j	8002113a <.LBB19_5+0x14>
    }
    8002113a:	6522                	ld	a0,8(sp)
    8002113c:	60e6                	ld	ra,88(sp)
    8002113e:	6125                	addi	sp,sp,96
    80021140:	8082                	ret

Disassembly of section .text._ZN9allocator9BuddyInfo13get_split_mut17h16866174694e07d9E:

0000000080021142 <_ZN9allocator9BuddyInfo13get_split_mut17h16866174694e07d9E>:

    /// SAFETY: must be called after the initialization of split field.
    unsafe fn get_split_mut(&mut self, index: usize) -> &mut u8 {
    80021142:	711d                	addi	sp,sp,-96
    80021144:	ec86                	sd	ra,88(sp)
    80021146:	f02e                	sd	a1,32(sp)
    80021148:	f82a                	sd	a0,48(sp)
    8002114a:	fc2e                	sd	a1,56(sp)
        let split_slice_ptr = *self.split.as_ptr();
    8002114c:	02050513          	addi	a0,a0,32
    80021150:	f42a                	sd	a0,40(sp)
    80021152:	e8aa                	sd	a0,80(sp)
    80021154:	a009                	j	80021156 <_ZN9allocator9BuddyInfo13get_split_mut17h16866174694e07d9E+0x14>
    80021156:	7602                	ld	a2,32(sp)
    80021158:	75a2                	ld	a1,40(sp)
    8002115a:	6188                	ld	a0,0(a1)
    8002115c:	658c                	ld	a1,8(a1)
    8002115e:	e0aa                	sd	a0,64(sp)
    80021160:	e4ae                	sd	a1,72(sp)
        split_slice_ptr.get_unchecked_mut(index).as_mut().unwrap()
    80021162:	ffffe097          	auipc	ra,0xffffe
    80021166:	64c080e7          	jalr	1612(ra) # 8001f7ae <_ZN4core3ptr7mut_ptr41_$LT$impl$u20$$BP$mut$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h1fb5de3e2413636cE>
    8002116a:	ec2a                	sd	a0,24(sp)
    8002116c:	a009                	j	8002116e <_ZN9allocator9BuddyInfo13get_split_mut17h16866174694e07d9E+0x2c>
    8002116e:	6562                	ld	a0,24(sp)
    80021170:	ffffe097          	auipc	ra,0xffffe
    80021174:	5cc080e7          	jalr	1484(ra) # 8001f73c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17he7a20e0a0a2f5b66E>
    80021178:	e82a                	sd	a0,16(sp)
    8002117a:	a009                	j	8002117c <_ZN9allocator9BuddyInfo13get_split_mut17h16866174694e07d9E+0x3a>
    8002117c:	6542                	ld	a0,16(sp)

000000008002117e <.LBB20_5>:
    8002117e:	0000b597          	auipc	a1,0xb
    80021182:	16258593          	addi	a1,a1,354 # 8002c2e0 <.L__unnamed_58>
    80021186:	00000097          	auipc	ra,0x0
    8002118a:	580080e7          	jalr	1408(ra) # 80021706 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9c7c2e8ce1270a73E>
    8002118e:	e42a                	sd	a0,8(sp)
    80021190:	a009                	j	80021192 <.LBB20_5+0x14>
    }
    80021192:	6522                	ld	a0,8(sp)
    80021194:	60e6                	ld	ra,88(sp)
    80021196:	6125                	addi	sp,sp,96
    80021198:	8082                	ret

Disassembly of section .text._ZN9allocator9BuddyInfo9alloc_set17h48fdb360b5f9c917E:

000000008002119a <_ZN9allocator9BuddyInfo9alloc_set17h48fdb360b5f9c917E>:

    fn alloc_set(&mut self, index: usize, set_or_clear: bool) {
    8002119a:	715d                	addi	sp,sp,-80
    8002119c:	e486                	sd	ra,72(sp)
    8002119e:	e032                	sd	a2,0(sp)
    800211a0:	862e                	mv	a2,a1
    800211a2:	6582                	ld	a1,0(sp)
    800211a4:	86ae                	mv	a3,a1
    800211a6:	e436                	sd	a3,8(sp)
    800211a8:	f02a                	sd	a0,32(sp)
    800211aa:	f432                	sd	a2,40(sp)
    800211ac:	02b10ba3          	sb	a1,55(sp)
        let i1 = index / 8;
    800211b0:	00365593          	srli	a1,a2,0x3
    800211b4:	fc2e                	sd	a1,56(sp)
        let i2 = index % 8;
    800211b6:	8a1d                	andi	a2,a2,7
    800211b8:	e832                	sd	a2,16(sp)
    800211ba:	e0b2                	sd	a2,64(sp)
        unsafe { self.get_alloc_mut(i1).set_bit(i2, set_or_clear); }
    800211bc:	00000097          	auipc	ra,0x0
    800211c0:	ed8080e7          	jalr	-296(ra) # 80021094 <_ZN9allocator9BuddyInfo13get_alloc_mut17he7a2a5362df5d388E>
    800211c4:	ec2a                	sd	a0,24(sp)
    800211c6:	a009                	j	800211c8 <_ZN9allocator9BuddyInfo9alloc_set17h48fdb360b5f9c917E+0x2e>
    800211c8:	6622                	ld	a2,8(sp)
    800211ca:	65c2                	ld	a1,16(sp)
    800211cc:	6562                	ld	a0,24(sp)
    800211ce:	00000097          	auipc	ra,0x0
    800211d2:	2ca080e7          	jalr	714(ra) # 80021498 <_ZN42_$LT$u8$u20$as$u20$bit_field..BitField$GT$7set_bit17h65cd2a40e8cb79a2E>
    800211d6:	a009                	j	800211d8 <_ZN9allocator9BuddyInfo9alloc_set17h48fdb360b5f9c917E+0x3e>
    }
    800211d8:	60a6                	ld	ra,72(sp)
    800211da:	6161                	addi	sp,sp,80
    800211dc:	8082                	ret

Disassembly of section .text._ZN9allocator9BuddyInfo9split_set17hd9896ad2ca355490E:

00000000800211de <_ZN9allocator9BuddyInfo9split_set17hd9896ad2ca355490E>:

    fn split_set(&mut self, index: usize, set_or_clear: bool) {
    800211de:	715d                	addi	sp,sp,-80
    800211e0:	e486                	sd	ra,72(sp)
    800211e2:	e032                	sd	a2,0(sp)
    800211e4:	862e                	mv	a2,a1
    800211e6:	6582                	ld	a1,0(sp)
    800211e8:	86ae                	mv	a3,a1
    800211ea:	e436                	sd	a3,8(sp)
    800211ec:	f02a                	sd	a0,32(sp)
    800211ee:	f432                	sd	a2,40(sp)
    800211f0:	02b10ba3          	sb	a1,55(sp)
        let i1 = index / 8;
    800211f4:	00365593          	srli	a1,a2,0x3
    800211f8:	fc2e                	sd	a1,56(sp)
        let i2 = index % 8;
    800211fa:	8a1d                	andi	a2,a2,7
    800211fc:	e832                	sd	a2,16(sp)
    800211fe:	e0b2                	sd	a2,64(sp)
        unsafe { self.get_split_mut(i1).set_bit(i2, set_or_clear); }
    80021200:	00000097          	auipc	ra,0x0
    80021204:	f42080e7          	jalr	-190(ra) # 80021142 <_ZN9allocator9BuddyInfo13get_split_mut17h16866174694e07d9E>
    80021208:	ec2a                	sd	a0,24(sp)
    8002120a:	a009                	j	8002120c <_ZN9allocator9BuddyInfo9split_set17hd9896ad2ca355490E+0x2e>
    8002120c:	6622                	ld	a2,8(sp)
    8002120e:	65c2                	ld	a1,16(sp)
    80021210:	6562                	ld	a0,24(sp)
    80021212:	00000097          	auipc	ra,0x0
    80021216:	286080e7          	jalr	646(ra) # 80021498 <_ZN42_$LT$u8$u20$as$u20$bit_field..BitField$GT$7set_bit17h65cd2a40e8cb79a2E>
    8002121a:	a009                	j	8002121c <_ZN9allocator9BuddyInfo9split_set17hd9896ad2ca355490E+0x3e>
    }
    8002121c:	60a6                	ld	ra,72(sp)
    8002121e:	6161                	addi	sp,sp,80
    80021220:	8082                	ret

Disassembly of section .text._ZN9allocator9BuddyInfo12is_alloc_set17h74e6eb5491672d31E:

0000000080021222 <_ZN9allocator9BuddyInfo12is_alloc_set17h74e6eb5491672d31E>:

    fn is_alloc_set(&self, index: usize) -> bool {
    80021222:	7139                	addi	sp,sp,-64
    80021224:	fc06                	sd	ra,56(sp)
    80021226:	862e                	mv	a2,a1
    80021228:	ec2a                	sd	a0,24(sp)
    8002122a:	f032                	sd	a2,32(sp)
        let i1 = index / 8;
    8002122c:	00365593          	srli	a1,a2,0x3
    80021230:	f42e                	sd	a1,40(sp)
        let i2 = index % 8;
    80021232:	8a1d                	andi	a2,a2,7
    80021234:	e432                	sd	a2,8(sp)
    80021236:	f832                	sd	a2,48(sp)
        unsafe { self.get_alloc(i1).get_bit(i2) }
    80021238:	00000097          	auipc	ra,0x0
    8002123c:	e06080e7          	jalr	-506(ra) # 8002103e <_ZN9allocator9BuddyInfo9get_alloc17hc8e52f4241734faeE>
    80021240:	e82a                	sd	a0,16(sp)
    80021242:	a009                	j	80021244 <_ZN9allocator9BuddyInfo12is_alloc_set17h74e6eb5491672d31E+0x22>
    80021244:	65a2                	ld	a1,8(sp)
    80021246:	6542                	ld	a0,16(sp)
    80021248:	00000097          	auipc	ra,0x0
    8002124c:	1d2080e7          	jalr	466(ra) # 8002141a <_ZN42_$LT$u8$u20$as$u20$bit_field..BitField$GT$7get_bit17h748f572d0cd86d7cE>
    80021250:	e02a                	sd	a0,0(sp)
    80021252:	a009                	j	80021254 <_ZN9allocator9BuddyInfo12is_alloc_set17h74e6eb5491672d31E+0x32>
    }
    80021254:	6502                	ld	a0,0(sp)
    80021256:	70e2                	ld	ra,56(sp)
    80021258:	6121                	addi	sp,sp,64
    8002125a:	8082                	ret

Disassembly of section .text._ZN9allocator9BuddyInfo12is_split_set17hd9054b929d273b40E:

000000008002125c <_ZN9allocator9BuddyInfo12is_split_set17hd9054b929d273b40E>:

    fn is_split_set(&self, index: usize) -> bool {
    8002125c:	7139                	addi	sp,sp,-64
    8002125e:	fc06                	sd	ra,56(sp)
    80021260:	862e                	mv	a2,a1
    80021262:	ec2a                	sd	a0,24(sp)
    80021264:	f032                	sd	a2,32(sp)
        let i1 = index / 8;
    80021266:	00365593          	srli	a1,a2,0x3
    8002126a:	f42e                	sd	a1,40(sp)
        let i2 = index % 8;
    8002126c:	8a1d                	andi	a2,a2,7
    8002126e:	e432                	sd	a2,8(sp)
    80021270:	f832                	sd	a2,48(sp)
        unsafe { self.get_split(i1).get_bit(i2) }
    80021272:	00000097          	auipc	ra,0x0
    80021276:	e78080e7          	jalr	-392(ra) # 800210ea <_ZN9allocator9BuddyInfo9get_split17hd25381f0deeea7b0E>
    8002127a:	e82a                	sd	a0,16(sp)
    8002127c:	a009                	j	8002127e <_ZN9allocator9BuddyInfo12is_split_set17hd9054b929d273b40E+0x22>
    8002127e:	65a2                	ld	a1,8(sp)
    80021280:	6542                	ld	a0,16(sp)
    80021282:	00000097          	auipc	ra,0x0
    80021286:	198080e7          	jalr	408(ra) # 8002141a <_ZN42_$LT$u8$u20$as$u20$bit_field..BitField$GT$7get_bit17h748f572d0cd86d7cE>
    8002128a:	e02a                	sd	a0,0(sp)
    8002128c:	a009                	j	8002128e <_ZN9allocator9BuddyInfo12is_split_set17hd9054b929d273b40E+0x32>
    }
    8002128e:	6502                	ld	a0,0(sp)
    80021290:	70e2                	ld	ra,56(sp)
    80021292:	6121                	addi	sp,sp,64
    80021294:	8082                	ret

Disassembly of section .text._ZN9allocator8round_up17h09c23390ccb46398E:

0000000080021296 <_ZN9allocator8round_up17h09c23390ccb46398E>:
    ptr::write_bytes(raw_ptr, 0, len);
    ptr::slice_from_raw_parts_mut(raw_ptr, len)
}

#[inline]
fn round_up(n: usize, size: usize) -> usize {
    80021296:	7179                	addi	sp,sp,-48
    80021298:	e82e                	sd	a1,16(sp)
    8002129a:	f02a                	sd	a0,32(sp)
    8002129c:	f42e                	sd	a1,40(sp)
    (((n-1)/size)+1)*size
    8002129e:	fff50593          	addi	a1,a0,-1
    800212a2:	ec2e                	sd	a1,24(sp)
    800212a4:	04b56063          	bltu	a0,a1,800212e4 <.LBB25_9>
    800212a8:	a009                	j	800212aa <_ZN9allocator8round_up17h09c23390ccb46398E+0x14>
    800212aa:	6542                	ld	a0,16(sp)
    800212ac:	4581                	li	a1,0
    800212ae:	04b50a63          	beq	a0,a1,80021302 <.LBB25_11>
    800212b2:	a009                	j	800212b4 <_ZN9allocator8round_up17h09c23390ccb46398E+0x1e>
    800212b4:	6562                	ld	a0,24(sp)
    800212b6:	65c2                	ld	a1,16(sp)
    800212b8:	02b555b3          	divu	a1,a0,a1
    800212bc:	00158513          	addi	a0,a1,1
    800212c0:	e42a                	sd	a0,8(sp)
    800212c2:	04b56e63          	bltu	a0,a1,8002131e <.LBB25_13>
    800212c6:	a009                	j	800212c8 <_ZN9allocator8round_up17h09c23390ccb46398E+0x32>
    800212c8:	6522                	ld	a0,8(sp)
    800212ca:	65c2                	ld	a1,16(sp)
    800212cc:	02b50633          	mul	a2,a0,a1
    800212d0:	e032                	sd	a2,0(sp)
    800212d2:	02b53533          	mulhu	a0,a0,a1
    800212d6:	4581                	li	a1,0
    800212d8:	06b51163          	bne	a0,a1,8002133a <.LBB25_15>
    800212dc:	a009                	j	800212de <_ZN9allocator8round_up17h09c23390ccb46398E+0x48>
}
    800212de:	6502                	ld	a0,0(sp)
    800212e0:	6145                	addi	sp,sp,48
    800212e2:	8082                	ret

00000000800212e4 <.LBB25_9>:
    (((n-1)/size)+1)*size
    800212e4:	0000b517          	auipc	a0,0xb
    800212e8:	98c50513          	addi	a0,a0,-1652 # 8002bc70 <str.0>

00000000800212ec <.LBB25_10>:
    800212ec:	0000b617          	auipc	a2,0xb
    800212f0:	00c60613          	addi	a2,a2,12 # 8002c2f8 <.L__unnamed_59>
    800212f4:	02100593          	li	a1,33
    800212f8:	00001097          	auipc	ra,0x1
    800212fc:	f7e080e7          	jalr	-130(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080021302 <.LBB25_11>:
    80021302:	0000b517          	auipc	a0,0xb
    80021306:	9de50513          	addi	a0,a0,-1570 # 8002bce0 <str.1>

000000008002130a <.LBB25_12>:
    8002130a:	0000b617          	auipc	a2,0xb
    8002130e:	00660613          	addi	a2,a2,6 # 8002c310 <.L__unnamed_60>
    80021312:	45e5                	li	a1,25
    80021314:	00001097          	auipc	ra,0x1
    80021318:	f62080e7          	jalr	-158(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008002131e <.LBB25_13>:
    8002131e:	0000b517          	auipc	a0,0xb
    80021322:	a0250513          	addi	a0,a0,-1534 # 8002bd20 <str.2>

0000000080021326 <.LBB25_14>:
    80021326:	0000b617          	auipc	a2,0xb
    8002132a:	00260613          	addi	a2,a2,2 # 8002c328 <.L__unnamed_61>
    8002132e:	45f1                	li	a1,28
    80021330:	00001097          	auipc	ra,0x1
    80021334:	f46080e7          	jalr	-186(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008002133a <.LBB25_15>:
    8002133a:	0000b517          	auipc	a0,0xb
    8002133e:	f0650513          	addi	a0,a0,-250 # 8002c240 <str.5>

0000000080021342 <.LBB25_16>:
    80021342:	0000b617          	auipc	a2,0xb
    80021346:	fe660613          	addi	a2,a2,-26 # 8002c328 <.L__unnamed_61>
    8002134a:	02100593          	li	a1,33
    8002134e:	00001097          	auipc	ra,0x1
    80021352:	f28080e7          	jalr	-216(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN9allocator10round_down17h97bc9e681a0cc273E:

0000000080021358 <_ZN9allocator10round_down17h97bc9e681a0cc273E>:

#[inline]
fn round_down(n: usize, size: usize) -> usize {
    80021358:	7179                	addi	sp,sp,-48
    8002135a:	e82e                	sd	a1,16(sp)
    8002135c:	ec2a                	sd	a0,24(sp)
    8002135e:	f02a                	sd	a0,32(sp)
    80021360:	f42e                	sd	a1,40(sp)
    80021362:	4501                	li	a0,0
    (n/size)*size
    80021364:	02a58363          	beq	a1,a0,8002138a <.LBB26_5>
    80021368:	a009                	j	8002136a <_ZN9allocator10round_down17h97bc9e681a0cc273E+0x12>
    8002136a:	65c2                	ld	a1,16(sp)
    8002136c:	6562                	ld	a0,24(sp)
    8002136e:	02b55533          	divu	a0,a0,a1
    80021372:	02b50633          	mul	a2,a0,a1
    80021376:	e432                	sd	a2,8(sp)
    80021378:	02b53533          	mulhu	a0,a0,a1
    8002137c:	4581                	li	a1,0
    8002137e:	02b51463          	bne	a0,a1,800213a6 <.LBB26_7>
    80021382:	a009                	j	80021384 <_ZN9allocator10round_down17h97bc9e681a0cc273E+0x2c>
}
    80021384:	6522                	ld	a0,8(sp)
    80021386:	6145                	addi	sp,sp,48
    80021388:	8082                	ret

000000008002138a <.LBB26_5>:
    (n/size)*size
    8002138a:	0000b517          	auipc	a0,0xb
    8002138e:	95650513          	addi	a0,a0,-1706 # 8002bce0 <str.1>

0000000080021392 <.LBB26_6>:
    80021392:	0000b617          	auipc	a2,0xb
    80021396:	fae60613          	addi	a2,a2,-82 # 8002c340 <.L__unnamed_62>
    8002139a:	45e5                	li	a1,25
    8002139c:	00001097          	auipc	ra,0x1
    800213a0:	eda080e7          	jalr	-294(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

00000000800213a6 <.LBB26_7>:
    800213a6:	0000b517          	auipc	a0,0xb
    800213aa:	e9a50513          	addi	a0,a0,-358 # 8002c240 <str.5>

00000000800213ae <.LBB26_8>:
    800213ae:	0000b617          	auipc	a2,0xb
    800213b2:	f9260613          	addi	a2,a2,-110 # 8002c340 <.L__unnamed_62>
    800213b6:	02100593          	li	a1,33
    800213ba:	00001097          	auipc	ra,0x1
    800213be:	ebc080e7          	jalr	-324(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN9allocator4log217h8cd213ee718a0479E:

00000000800213c4 <_ZN9allocator4log217h8cd213ee718a0479E>:

fn log2(mut n: usize) -> usize {
    800213c4:	1101                	addi	sp,sp,-32
    800213c6:	e82a                	sd	a0,16(sp)
    800213c8:	4501                	li	a0,0
    let mut k = 0;
    800213ca:	ec2a                	sd	a0,24(sp)
    while n > 1 {
    800213cc:	a009                	j	800213ce <_ZN9allocator4log217h8cd213ee718a0479E+0xa>
    800213ce:	65c2                	ld	a1,16(sp)
    800213d0:	4505                	li	a0,1
    800213d2:	00b56663          	bltu	a0,a1,800213de <_ZN9allocator4log217h8cd213ee718a0479E+0x1a>
    800213d6:	a009                	j	800213d8 <_ZN9allocator4log217h8cd213ee718a0479E+0x14>
        k += 1;
        n >>= 1;
    }
    k
}
    800213d8:	6562                	ld	a0,24(sp)
    800213da:	6105                	addi	sp,sp,32
    800213dc:	8082                	ret
        k += 1;
    800213de:	65e2                	ld	a1,24(sp)
    800213e0:	00158513          	addi	a0,a1,1
    800213e4:	e42a                	sd	a0,8(sp)
    800213e6:	00b56c63          	bltu	a0,a1,800213fe <.LBB27_7>
    800213ea:	a009                	j	800213ec <_ZN9allocator4log217h8cd213ee718a0479E+0x28>
    800213ec:	6522                	ld	a0,8(sp)
    800213ee:	ec2a                	sd	a0,24(sp)
        n >>= 1;
    800213f0:	6542                	ld	a0,16(sp)
    800213f2:	8105                	srli	a0,a0,0x1
    800213f4:	e02a                	sd	a0,0(sp)
    800213f6:	a009                	j	800213f8 <_ZN9allocator4log217h8cd213ee718a0479E+0x34>
    800213f8:	6502                	ld	a0,0(sp)
    800213fa:	e82a                	sd	a0,16(sp)
    while n > 1 {
    800213fc:	bfc9                	j	800213ce <_ZN9allocator4log217h8cd213ee718a0479E+0xa>

00000000800213fe <.LBB27_7>:
        k += 1;
    800213fe:	0000b517          	auipc	a0,0xb
    80021402:	92250513          	addi	a0,a0,-1758 # 8002bd20 <str.2>

0000000080021406 <.LBB27_8>:
    80021406:	0000b617          	auipc	a2,0xb
    8002140a:	f5260613          	addi	a2,a2,-174 # 8002c358 <.L__unnamed_63>
    8002140e:	45f1                	li	a1,28
    80021410:	00001097          	auipc	ra,0x1
    80021414:	e66080e7          	jalr	-410(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN42_$LT$u8$u20$as$u20$bit_field..BitField$GT$7get_bit17h748f572d0cd86d7cE:

000000008002141a <_ZN42_$LT$u8$u20$as$u20$bit_field..BitField$GT$7get_bit17h748f572d0cd86d7cE>:
            fn get_bit(&self, bit: usize) -> bool {
    8002141a:	7179                	addi	sp,sp,-48
    8002141c:	e82e                	sd	a1,16(sp)
    8002141e:	ec2a                	sd	a0,24(sp)
    80021420:	f02a                	sd	a0,32(sp)
    80021422:	f42e                	sd	a1,40(sp)
    80021424:	4521                	li	a0,8
                assert!(bit < Self::BIT_LENGTH);
    80021426:	02a5e263          	bltu	a1,a0,8002144a <.LBB0_6+0x16>
    8002142a:	a009                	j	8002142c <.LBB0_5>

000000008002142c <.LBB0_5>:
    8002142c:	0000b517          	auipc	a0,0xb
    80021430:	f4450513          	addi	a0,a0,-188 # 8002c370 <.L__unnamed_1>

0000000080021434 <.LBB0_6>:
    80021434:	0000b617          	auipc	a2,0xb
    80021438:	fc460613          	addi	a2,a2,-60 # 8002c3f8 <.L__unnamed_2>
    8002143c:	02800593          	li	a1,40
    80021440:	00001097          	auipc	ra,0x1
    80021444:	e36080e7          	jalr	-458(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80021448:	0000                	unimp
                (*self & (1 << bit)) != 0
    8002144a:	65c2                	ld	a1,16(sp)
    8002144c:	6562                	ld	a0,24(sp)
    8002144e:	00054503          	lbu	a0,0(a0)
    80021452:	e02a                	sd	a0,0(sp)
    80021454:	ff85f513          	andi	a0,a1,-8
    80021458:	0075f613          	andi	a2,a1,7
    8002145c:	4585                	li	a1,1
    8002145e:	00c595b3          	sll	a1,a1,a2
    80021462:	e42e                	sd	a1,8(sp)
    80021464:	4581                	li	a1,0
    80021466:	00b51a63          	bne	a0,a1,8002147a <.LBB0_7>
    8002146a:	a009                	j	8002146c <.LBB0_6+0x38>
    8002146c:	6502                	ld	a0,0(sp)
    8002146e:	65a2                	ld	a1,8(sp)
    80021470:	8d6d                	and	a0,a0,a1
    80021472:	00a03533          	snez	a0,a0
            }
    80021476:	6145                	addi	sp,sp,48
    80021478:	8082                	ret

000000008002147a <.LBB0_7>:
                (*self & (1 << bit)) != 0
    8002147a:	0000b517          	auipc	a0,0xb
    8002147e:	f9650513          	addi	a0,a0,-106 # 8002c410 <str.0>

0000000080021482 <.LBB0_8>:
    80021482:	0000b617          	auipc	a2,0xb
    80021486:	f7660613          	addi	a2,a2,-138 # 8002c3f8 <.L__unnamed_2>
    8002148a:	02300593          	li	a1,35
    8002148e:	00001097          	auipc	ra,0x1
    80021492:	de8080e7          	jalr	-536(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN42_$LT$u8$u20$as$u20$bit_field..BitField$GT$7set_bit17h65cd2a40e8cb79a2E:

0000000080021498 <_ZN42_$LT$u8$u20$as$u20$bit_field..BitField$GT$7set_bit17h65cd2a40e8cb79a2E>:
            fn set_bit(&mut self, bit: usize, value: bool) -> &mut Self {
    80021498:	7139                	addi	sp,sp,-64
    8002149a:	e82e                	sd	a1,16(sp)
    8002149c:	ec2a                	sd	a0,24(sp)
    8002149e:	86b2                	mv	a3,a2
    800214a0:	f036                	sd	a3,32(sp)
    800214a2:	f42a                	sd	a0,40(sp)
    800214a4:	f82e                	sd	a1,48(sp)
    800214a6:	02c10fa3          	sb	a2,63(sp)
    800214aa:	4521                	li	a0,8
                assert!(bit < Self::BIT_LENGTH);
    800214ac:	02a5e263          	bltu	a1,a0,800214d0 <.LBB1_11+0x16>
    800214b0:	a009                	j	800214b2 <.LBB1_10>

00000000800214b2 <.LBB1_10>:
    800214b2:	0000b517          	auipc	a0,0xb
    800214b6:	ebe50513          	addi	a0,a0,-322 # 8002c370 <.L__unnamed_1>

00000000800214ba <.LBB1_11>:
    800214ba:	0000b617          	auipc	a2,0xb
    800214be:	f3e60613          	addi	a2,a2,-194 # 8002c3f8 <.L__unnamed_2>
    800214c2:	02800593          	li	a1,40
    800214c6:	00001097          	auipc	ra,0x1
    800214ca:	db0080e7          	jalr	-592(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    800214ce:	0000                	unimp
    800214d0:	7502                	ld	a0,32(sp)
    800214d2:	4581                	li	a1,0
                if value {
    800214d4:	02b50063          	beq	a0,a1,800214f4 <.LBB1_11+0x3a>
    800214d8:	a009                	j	800214da <.LBB1_11+0x20>
                    *self |= 1 << bit;
    800214da:	65c2                	ld	a1,16(sp)
    800214dc:	ff85f513          	andi	a0,a1,-8
    800214e0:	0075f613          	andi	a2,a1,7
    800214e4:	4585                	li	a1,1
    800214e6:	00c595b3          	sll	a1,a1,a2
    800214ea:	e42e                	sd	a1,8(sp)
    800214ec:	4581                	li	a1,0
    800214ee:	04b51563          	bne	a0,a1,80021538 <.LBB1_12>
    800214f2:	a831                	j	8002150e <.LBB1_11+0x54>
                    *self &= !(1 << bit);
    800214f4:	65c2                	ld	a1,16(sp)
    800214f6:	ff85f513          	andi	a0,a1,-8
    800214fa:	0075f613          	andi	a2,a1,7
    800214fe:	4585                	li	a1,1
    80021500:	00c595b3          	sll	a1,a1,a2
    80021504:	e02e                	sd	a1,0(sp)
    80021506:	4581                	li	a1,0
    80021508:	04b51763          	bne	a0,a1,80021556 <.LBB1_14>
    8002150c:	a809                	j	8002151e <.LBB1_11+0x64>
                    *self |= 1 << bit;
    8002150e:	65e2                	ld	a1,24(sp)
    80021510:	6622                	ld	a2,8(sp)
    80021512:	00058503          	lb	a0,0(a1)
    80021516:	8d51                	or	a0,a0,a2
    80021518:	00a58023          	sb	a0,0(a1)
                if value {
    8002151c:	a819                	j	80021532 <.LBB1_11+0x78>
                    *self &= !(1 << bit);
    8002151e:	65e2                	ld	a1,24(sp)
    80021520:	6502                	ld	a0,0(sp)
    80021522:	fff54613          	not	a2,a0
    80021526:	00058503          	lb	a0,0(a1)
    8002152a:	8d71                	and	a0,a0,a2
    8002152c:	00a58023          	sb	a0,0(a1)
                if value {
    80021530:	a009                	j	80021532 <.LBB1_11+0x78>
            }
    80021532:	6562                	ld	a0,24(sp)
    80021534:	6121                	addi	sp,sp,64
    80021536:	8082                	ret

0000000080021538 <.LBB1_12>:
                    *self |= 1 << bit;
    80021538:	0000b517          	auipc	a0,0xb
    8002153c:	ed850513          	addi	a0,a0,-296 # 8002c410 <str.0>

0000000080021540 <.LBB1_13>:
    80021540:	0000b617          	auipc	a2,0xb
    80021544:	eb860613          	addi	a2,a2,-328 # 8002c3f8 <.L__unnamed_2>
    80021548:	02300593          	li	a1,35
    8002154c:	00001097          	auipc	ra,0x1
    80021550:	d2a080e7          	jalr	-726(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080021556 <.LBB1_14>:
                    *self &= !(1 << bit);
    80021556:	0000b517          	auipc	a0,0xb
    8002155a:	eba50513          	addi	a0,a0,-326 # 8002c410 <str.0>

000000008002155e <.LBB1_15>:
    8002155e:	0000b617          	auipc	a2,0xb
    80021562:	e9a60613          	addi	a2,a2,-358 # 8002c3f8 <.L__unnamed_2>
    80021566:	02300593          	li	a1,35
    8002156a:	00001097          	auipc	ra,0x1
    8002156e:	d0c080e7          	jalr	-756(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN4core3fmt9Arguments6new_v117hf60bb287480e0058E:

0000000080021574 <_ZN4core3fmt9Arguments6new_v117hf60bb287480e0058E>:
    pub fn new_v1(pieces: &'a [&'static str], args: &'a [ArgumentV1<'a>]) -> Arguments<'a> {
    80021574:	7179                	addi	sp,sp,-48
    80021576:	e82e                	sd	a1,16(sp)
    80021578:	ec32                	sd	a2,24(sp)
    8002157a:	f036                	sd	a3,32(sp)
    8002157c:	f43a                	sd	a4,40(sp)
    8002157e:	4781                	li	a5,0
        Arguments { pieces, fmt: None, args }
    80021580:	e03e                	sd	a5,0(sp)
    80021582:	e10c                	sd	a1,0(a0)
    80021584:	e510                	sd	a2,8(a0)
    80021586:	6602                	ld	a2,0(sp)
    80021588:	65a2                	ld	a1,8(sp)
    8002158a:	e910                	sd	a2,16(a0)
    8002158c:	ed0c                	sd	a1,24(a0)
    8002158e:	f114                	sd	a3,32(a0)
    80021590:	f518                	sd	a4,40(a0)
    }
    80021592:	6145                	addi	sp,sp,48
    80021594:	8082                	ret

Disassembly of section .text._ZN4core5alloc6layout6Layout4size17h7a38fec576bdd6a2E:

0000000080021596 <_ZN4core5alloc6layout6Layout4size17h7a38fec576bdd6a2E>:
    pub const fn size(&self) -> usize {
    80021596:	1141                	addi	sp,sp,-16
    80021598:	e42a                	sd	a0,8(sp)
        self.size_
    8002159a:	6108                	ld	a0,0(a0)
    }
    8002159c:	0141                	addi	sp,sp,16
    8002159e:	8082                	ret

Disassembly of section .text._ZN4core5alloc6layout6Layout5align17habc8d2502287bfe5E:

00000000800215a0 <_ZN4core5alloc6layout6Layout5align17habc8d2502287bfe5E>:
    pub const fn align(&self) -> usize {
    800215a0:	1101                	addi	sp,sp,-32
    800215a2:	ec06                	sd	ra,24(sp)
    800215a4:	e82a                	sd	a0,16(sp)
        self.align_.get()
    800215a6:	6508                	ld	a0,8(a0)
    800215a8:	00000097          	auipc	ra,0x0
    800215ac:	014080e7          	jalr	20(ra) # 800215bc <_ZN4core3num7nonzero12NonZeroUsize3get17h6255ed88f1e61af7E>
    800215b0:	e42a                	sd	a0,8(sp)
    800215b2:	a009                	j	800215b4 <_ZN4core5alloc6layout6Layout5align17habc8d2502287bfe5E+0x14>
    }
    800215b4:	6522                	ld	a0,8(sp)
    800215b6:	60e2                	ld	ra,24(sp)
    800215b8:	6105                	addi	sp,sp,32
    800215ba:	8082                	ret

Disassembly of section .text._ZN4core3num7nonzero12NonZeroUsize3get17h6255ed88f1e61af7E:

00000000800215bc <_ZN4core3num7nonzero12NonZeroUsize3get17h6255ed88f1e61af7E>:
                pub const fn get(self) -> $Int {
    800215bc:	1141                	addi	sp,sp,-16
    800215be:	e42a                	sd	a0,8(sp)
                }
    800215c0:	0141                	addi	sp,sp,16
    800215c2:	8082                	ret

Disassembly of section .text._ZN9allocator4list4List4init17ha2ca564ea80bf5d5E:

00000000800215c4 <_ZN9allocator4list4List4init17ha2ca564ea80bf5d5E>:
    prev: *mut List,
    next: *mut List,
}

impl List {
    pub fn init(&mut self) {
    800215c4:	1141                	addi	sp,sp,-16
    800215c6:	e42a                	sd	a0,8(sp)
        self.prev = self;
    800215c8:	e108                	sd	a0,0(a0)
        self.next = self;
    800215ca:	e508                	sd	a0,8(a0)
    }
    800215cc:	0141                	addi	sp,sp,16
    800215ce:	8082                	ret

Disassembly of section .text._ZN9allocator4list4List4push17h00016bee64ea1dbdE:

00000000800215d0 <_ZN9allocator4list4List4push17h00016bee64ea1dbdE>:

    pub unsafe fn push(&mut self, raw_addr: usize) {
    800215d0:	711d                	addi	sp,sp,-96
    800215d2:	ec86                	sd	ra,88(sp)
    800215d4:	ec2e                	sd	a1,24(sp)
    800215d6:	85aa                	mv	a1,a0
    800215d8:	6562                	ld	a0,24(sp)
    800215da:	f02e                	sd	a1,32(sp)
    800215dc:	e0ae                	sd	a1,64(sp)
    800215de:	e4aa                	sd	a0,72(sp)
        let raw_list = raw_addr as *mut List;
    800215e0:	862a                	mv	a2,a0
    800215e2:	f432                	sd	a2,40(sp)
    800215e4:	e8aa                	sd	a0,80(sp)
        ptr::write(raw_list, List {
            prev: self,
            next: self.next,
    800215e6:	6590                	ld	a2,8(a1)
        ptr::write(raw_list, List {
    800215e8:	f82e                	sd	a1,48(sp)
    800215ea:	fc32                	sd	a2,56(sp)
    800215ec:	00000097          	auipc	ra,0x0
    800215f0:	272080e7          	jalr	626(ra) # 8002185e <_ZN4core3ptr5write17h20482a37cc2ee430E>
    800215f4:	a009                	j	800215f6 <_ZN9allocator4list4List4push17h00016bee64ea1dbdE+0x26>
        });
        self.next.as_mut().unwrap().prev = raw_list;
    800215f6:	7502                	ld	a0,32(sp)
    800215f8:	6508                	ld	a0,8(a0)
    800215fa:	00001097          	auipc	ra,0x1
    800215fe:	870080e7          	jalr	-1936(ra) # 80021e6a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h1d891c09167259ccE>
    80021602:	e82a                	sd	a0,16(sp)
    80021604:	a009                	j	80021606 <_ZN9allocator4list4List4push17h00016bee64ea1dbdE+0x36>
    80021606:	6542                	ld	a0,16(sp)

0000000080021608 <.LBB1_4>:
    80021608:	0000b597          	auipc	a1,0xb
    8002160c:	e5858593          	addi	a1,a1,-424 # 8002c460 <.L__unnamed_1>
    80021610:	00000097          	auipc	ra,0x0
    80021614:	0c0080e7          	jalr	192(ra) # 800216d0 <_ZN4core6option15Option$LT$T$GT$6unwrap17h92f45fda96995230E>
    80021618:	e42a                	sd	a0,8(sp)
    8002161a:	a009                	j	8002161c <.LBB1_4+0x14>
    8002161c:	7522                	ld	a0,40(sp)
    8002161e:	7582                	ld	a1,32(sp)
    80021620:	6622                	ld	a2,8(sp)
    80021622:	e208                	sd	a0,0(a2)
        self.next = raw_list;
    80021624:	e588                	sd	a0,8(a1)
    }
    80021626:	60e6                	ld	ra,88(sp)
    80021628:	6125                	addi	sp,sp,96
    8002162a:	8082                	ret

Disassembly of section .text._ZN9allocator4list4List3pop17h8165b98152b25881E:

000000008002162c <_ZN9allocator4list4List3pop17h8165b98152b25881E>:

    pub unsafe fn pop(&mut self) -> Option<usize> {
    8002162c:	715d                	addi	sp,sp,-80
    8002162e:	e486                	sd	ra,72(sp)
    80021630:	ec2a                	sd	a0,24(sp)
    80021632:	fc2a                	sd	a0,56(sp)
        if self.is_empty() {
    80021634:	00000097          	auipc	ra,0x0
    80021638:	07e080e7          	jalr	126(ra) # 800216b2 <_ZN9allocator4list4List8is_empty17h2b5a11437d86acd9E>
    8002163c:	f02a                	sd	a0,32(sp)
    8002163e:	a009                	j	80021640 <_ZN9allocator4list4List3pop17h8165b98152b25881E+0x14>
    80021640:	7502                	ld	a0,32(sp)
    80021642:	4581                	li	a1,0
    80021644:	00b50663          	beq	a0,a1,80021650 <_ZN9allocator4list4List3pop17h8165b98152b25881E+0x24>
    80021648:	a009                	j	8002164a <_ZN9allocator4list4List3pop17h8165b98152b25881E+0x1e>
    8002164a:	4501                	li	a0,0
            return None
    8002164c:	f42a                	sd	a0,40(sp)
        }
        let raw_addr = self.next as usize;
        self.next.as_mut().unwrap().remove();
        Some(raw_addr)
    }
    8002164e:	a091                	j	80021692 <.LBB2_8+0x2a>
        let raw_addr = self.next as usize;
    80021650:	6562                	ld	a0,24(sp)
    80021652:	650c                	ld	a1,8(a0)
    80021654:	e42e                	sd	a1,8(sp)
    80021656:	e0ae                	sd	a1,64(sp)
        self.next.as_mut().unwrap().remove();
    80021658:	6508                	ld	a0,8(a0)
    8002165a:	00001097          	auipc	ra,0x1
    8002165e:	810080e7          	jalr	-2032(ra) # 80021e6a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h1d891c09167259ccE>
    80021662:	e82a                	sd	a0,16(sp)
    80021664:	a009                	j	80021666 <_ZN9allocator4list4List3pop17h8165b98152b25881E+0x3a>
    80021666:	6542                	ld	a0,16(sp)

0000000080021668 <.LBB2_8>:
    80021668:	0000b597          	auipc	a1,0xb
    8002166c:	e1058593          	addi	a1,a1,-496 # 8002c478 <.L__unnamed_2>
    80021670:	00000097          	auipc	ra,0x0
    80021674:	060080e7          	jalr	96(ra) # 800216d0 <_ZN4core6option15Option$LT$T$GT$6unwrap17h92f45fda96995230E>
    80021678:	e02a                	sd	a0,0(sp)
    8002167a:	a009                	j	8002167c <.LBB2_8+0x14>
    8002167c:	6502                	ld	a0,0(sp)
    8002167e:	00000097          	auipc	ra,0x0
    80021682:	01e080e7          	jalr	30(ra) # 8002169c <_ZN9allocator4list4List6remove17hdaf9d5be7333b4ddE>
    80021686:	a009                	j	80021688 <.LBB2_8+0x20>
        Some(raw_addr)
    80021688:	6522                	ld	a0,8(sp)
    8002168a:	f82a                	sd	a0,48(sp)
    8002168c:	4505                	li	a0,1
    8002168e:	f42a                	sd	a0,40(sp)
    }
    80021690:	a009                	j	80021692 <.LBB2_8+0x2a>
    80021692:	7522                	ld	a0,40(sp)
    80021694:	75c2                	ld	a1,48(sp)
    80021696:	60a6                	ld	ra,72(sp)
    80021698:	6161                	addi	sp,sp,80
    8002169a:	8082                	ret

Disassembly of section .text._ZN9allocator4list4List6remove17hdaf9d5be7333b4ddE:

000000008002169c <_ZN9allocator4list4List6remove17hdaf9d5be7333b4ddE>:

    pub unsafe fn remove(&mut self) {
    8002169c:	1141                	addi	sp,sp,-16
    8002169e:	85aa                	mv	a1,a0
    800216a0:	e42e                	sd	a1,8(sp)
        (*self.prev).next = self.next;
    800216a2:	6588                	ld	a0,8(a1)
    800216a4:	6190                	ld	a2,0(a1)
    800216a6:	e608                	sd	a0,8(a2)
        (*self.next).prev = self.prev;
    800216a8:	6188                	ld	a0,0(a1)
    800216aa:	658c                	ld	a1,8(a1)
    800216ac:	e188                	sd	a0,0(a1)
    }
    800216ae:	0141                	addi	sp,sp,16
    800216b0:	8082                	ret

Disassembly of section .text._ZN9allocator4list4List8is_empty17h2b5a11437d86acd9E:

00000000800216b2 <_ZN9allocator4list4List8is_empty17h2b5a11437d86acd9E>:

    pub fn is_empty(&self) -> bool {
    800216b2:	1101                	addi	sp,sp,-32
    800216b4:	ec06                	sd	ra,24(sp)
    800216b6:	85aa                	mv	a1,a0
    800216b8:	e82e                	sd	a1,16(sp)
        ptr::eq(self.next, self)
    800216ba:	6588                	ld	a0,8(a1)
    800216bc:	00000097          	auipc	ra,0x0
    800216c0:	150080e7          	jalr	336(ra) # 8002180c <_ZN4core3ptr2eq17ha5b82c23507454aeE>
    800216c4:	e42a                	sd	a0,8(sp)
    800216c6:	a009                	j	800216c8 <_ZN9allocator4list4List8is_empty17h2b5a11437d86acd9E+0x16>
    }
    800216c8:	6522                	ld	a0,8(sp)
    800216ca:	60e2                	ld	ra,24(sp)
    800216cc:	6105                	addi	sp,sp,32
    800216ce:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$6unwrap17h92f45fda96995230E:

00000000800216d0 <_ZN4core6option15Option$LT$T$GT$6unwrap17h92f45fda96995230E>:
    pub const fn unwrap(self) -> T {
    800216d0:	1101                	addi	sp,sp,-32
    800216d2:	e42e                	sd	a1,8(sp)
    800216d4:	e82a                	sd	a0,16(sp)
            Some(val) => val,
    800216d6:	00a035b3          	snez	a1,a0
    800216da:	4581                	li	a1,0
    800216dc:	00b50463          	beq	a0,a1,800216e4 <_ZN4core6option15Option$LT$T$GT$6unwrap17h92f45fda96995230E+0x14>
    800216e0:	a009                	j	800216e2 <_ZN4core6option15Option$LT$T$GT$6unwrap17h92f45fda96995230E+0x12>
    800216e2:	a831                	j	800216fe <.LBB0_5+0x18>
            None => panic!("called `Option::unwrap()` on a `None` value"),
    800216e4:	6622                	ld	a2,8(sp)

00000000800216e6 <.LBB0_5>:
    800216e6:	0000b517          	auipc	a0,0xb
    800216ea:	daa50513          	addi	a0,a0,-598 # 8002c490 <.L__unnamed_1>
    800216ee:	02b00593          	li	a1,43
    800216f2:	00001097          	auipc	ra,0x1
    800216f6:	b84080e7          	jalr	-1148(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    800216fa:	0000                	unimp
        match self {
    800216fc:	0000                	unimp
            Some(val) => val,
    800216fe:	6542                	ld	a0,16(sp)
    80021700:	ec2a                	sd	a0,24(sp)
    }
    80021702:	6105                	addi	sp,sp,32
    80021704:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$6unwrap17h9c7c2e8ce1270a73E:

0000000080021706 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9c7c2e8ce1270a73E>:
    pub const fn unwrap(self) -> T {
    80021706:	1101                	addi	sp,sp,-32
    80021708:	e42e                	sd	a1,8(sp)
    8002170a:	e82a                	sd	a0,16(sp)
            Some(val) => val,
    8002170c:	00a035b3          	snez	a1,a0
    80021710:	4581                	li	a1,0
    80021712:	00b50463          	beq	a0,a1,8002171a <_ZN4core6option15Option$LT$T$GT$6unwrap17h9c7c2e8ce1270a73E+0x14>
    80021716:	a009                	j	80021718 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9c7c2e8ce1270a73E+0x12>
    80021718:	a831                	j	80021734 <.LBB1_5+0x18>
            None => panic!("called `Option::unwrap()` on a `None` value"),
    8002171a:	6622                	ld	a2,8(sp)

000000008002171c <.LBB1_5>:
    8002171c:	0000b517          	auipc	a0,0xb
    80021720:	d7450513          	addi	a0,a0,-652 # 8002c490 <.L__unnamed_1>
    80021724:	02b00593          	li	a1,43
    80021728:	00001097          	auipc	ra,0x1
    8002172c:	b4e080e7          	jalr	-1202(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80021730:	0000                	unimp
        match self {
    80021732:	0000                	unimp
            Some(val) => val,
    80021734:	6542                	ld	a0,16(sp)
    80021736:	ec2a                	sd	a0,24(sp)
    }
    80021738:	6105                	addi	sp,sp,32
    8002173a:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$6unwrap17hda397585f3de5667E:

000000008002173c <_ZN4core6option15Option$LT$T$GT$6unwrap17hda397585f3de5667E>:
    pub const fn unwrap(self) -> T {
    8002173c:	1101                	addi	sp,sp,-32
    8002173e:	e42e                	sd	a1,8(sp)
    80021740:	e82a                	sd	a0,16(sp)
            Some(val) => val,
    80021742:	00a035b3          	snez	a1,a0
    80021746:	4581                	li	a1,0
    80021748:	00b50463          	beq	a0,a1,80021750 <_ZN4core6option15Option$LT$T$GT$6unwrap17hda397585f3de5667E+0x14>
    8002174c:	a009                	j	8002174e <_ZN4core6option15Option$LT$T$GT$6unwrap17hda397585f3de5667E+0x12>
    8002174e:	a831                	j	8002176a <.LBB2_5+0x18>
            None => panic!("called `Option::unwrap()` on a `None` value"),
    80021750:	6622                	ld	a2,8(sp)

0000000080021752 <.LBB2_5>:
    80021752:	0000b517          	auipc	a0,0xb
    80021756:	d3e50513          	addi	a0,a0,-706 # 8002c490 <.L__unnamed_1>
    8002175a:	02b00593          	li	a1,43
    8002175e:	00001097          	auipc	ra,0x1
    80021762:	b18080e7          	jalr	-1256(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80021766:	0000                	unimp
        match self {
    80021768:	0000                	unimp
            Some(val) => val,
    8002176a:	6542                	ld	a0,16(sp)
    8002176c:	ec2a                	sd	a0,24(sp)
    }
    8002176e:	6105                	addi	sp,sp,32
    80021770:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$6unwrap17hf33e22fb94afcd9bE:

0000000080021772 <_ZN4core6option15Option$LT$T$GT$6unwrap17hf33e22fb94afcd9bE>:
    pub const fn unwrap(self) -> T {
    80021772:	1101                	addi	sp,sp,-32
    80021774:	e42e                	sd	a1,8(sp)
    80021776:	e82a                	sd	a0,16(sp)
            Some(val) => val,
    80021778:	00a035b3          	snez	a1,a0
    8002177c:	4581                	li	a1,0
    8002177e:	00b50463          	beq	a0,a1,80021786 <_ZN4core6option15Option$LT$T$GT$6unwrap17hf33e22fb94afcd9bE+0x14>
    80021782:	a009                	j	80021784 <_ZN4core6option15Option$LT$T$GT$6unwrap17hf33e22fb94afcd9bE+0x12>
    80021784:	a831                	j	800217a0 <.LBB3_5+0x18>
            None => panic!("called `Option::unwrap()` on a `None` value"),
    80021786:	6622                	ld	a2,8(sp)

0000000080021788 <.LBB3_5>:
    80021788:	0000b517          	auipc	a0,0xb
    8002178c:	d0850513          	addi	a0,a0,-760 # 8002c490 <.L__unnamed_1>
    80021790:	02b00593          	li	a1,43
    80021794:	00001097          	auipc	ra,0x1
    80021798:	ae2080e7          	jalr	-1310(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8002179c:	0000                	unimp
        match self {
    8002179e:	0000                	unimp
            Some(val) => val,
    800217a0:	6542                	ld	a0,16(sp)
    800217a2:	ec2a                	sd	a0,24(sp)
    }
    800217a4:	6105                	addi	sp,sp,32
    800217a6:	8082                	ret

Disassembly of section .text._ZN4core3ptr24slice_from_raw_parts_mut17h39496eba86137ee5E:

00000000800217a8 <_ZN4core3ptr24slice_from_raw_parts_mut17h39496eba86137ee5E>:
pub const fn slice_from_raw_parts_mut<T>(data: *mut T, len: usize) -> *mut [T] {
    800217a8:	7139                	addi	sp,sp,-64
    800217aa:	fc06                	sd	ra,56(sp)
    800217ac:	ec2e                	sd	a1,24(sp)
    800217ae:	f42a                	sd	a0,40(sp)
    800217b0:	f82e                	sd	a1,48(sp)
    from_raw_parts_mut(data.cast(), len)
    800217b2:	ffffe097          	auipc	ra,0xffffe
    800217b6:	f68080e7          	jalr	-152(ra) # 8001f71a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$4cast17h7b791e143f90db99E>
    800217ba:	f02a                	sd	a0,32(sp)
    800217bc:	a009                	j	800217be <_ZN4core3ptr24slice_from_raw_parts_mut17h39496eba86137ee5E+0x16>
    800217be:	65e2                	ld	a1,24(sp)
    800217c0:	7502                	ld	a0,32(sp)
    800217c2:	00000097          	auipc	ra,0x0
    800217c6:	5e2080e7          	jalr	1506(ra) # 80021da4 <_ZN4core3ptr8metadata18from_raw_parts_mut17hf93e4b94956554aaE>
    800217ca:	e42a                	sd	a0,8(sp)
    800217cc:	e82e                	sd	a1,16(sp)
    800217ce:	a009                	j	800217d0 <_ZN4core3ptr24slice_from_raw_parts_mut17h39496eba86137ee5E+0x28>
}
    800217d0:	65c2                	ld	a1,16(sp)
    800217d2:	6522                	ld	a0,8(sp)
    800217d4:	70e2                	ld	ra,56(sp)
    800217d6:	6121                	addi	sp,sp,64
    800217d8:	8082                	ret

Disassembly of section .text._ZN4core3ptr24slice_from_raw_parts_mut17h9355ff019662f88fE:

00000000800217da <_ZN4core3ptr24slice_from_raw_parts_mut17h9355ff019662f88fE>:
pub const fn slice_from_raw_parts_mut<T>(data: *mut T, len: usize) -> *mut [T] {
    800217da:	7139                	addi	sp,sp,-64
    800217dc:	fc06                	sd	ra,56(sp)
    800217de:	ec2e                	sd	a1,24(sp)
    800217e0:	f42a                	sd	a0,40(sp)
    800217e2:	f82e                	sd	a1,48(sp)
    from_raw_parts_mut(data.cast(), len)
    800217e4:	00000097          	auipc	ra,0x0
    800217e8:	3a0080e7          	jalr	928(ra) # 80021b84 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$4cast17h8ad85686487e19c0E>
    800217ec:	f02a                	sd	a0,32(sp)
    800217ee:	a009                	j	800217f0 <_ZN4core3ptr24slice_from_raw_parts_mut17h9355ff019662f88fE+0x16>
    800217f0:	65e2                	ld	a1,24(sp)
    800217f2:	7502                	ld	a0,32(sp)
    800217f4:	00000097          	auipc	ra,0x0
    800217f8:	59e080e7          	jalr	1438(ra) # 80021d92 <_ZN4core3ptr8metadata18from_raw_parts_mut17hd3633c4516987911E>
    800217fc:	e42a                	sd	a0,8(sp)
    800217fe:	e82e                	sd	a1,16(sp)
    80021800:	a009                	j	80021802 <_ZN4core3ptr24slice_from_raw_parts_mut17h9355ff019662f88fE+0x28>
}
    80021802:	65c2                	ld	a1,16(sp)
    80021804:	6522                	ld	a0,8(sp)
    80021806:	70e2                	ld	ra,56(sp)
    80021808:	6121                	addi	sp,sp,64
    8002180a:	8082                	ret

Disassembly of section .text._ZN4core3ptr2eq17ha5b82c23507454aeE:

000000008002180c <_ZN4core3ptr2eq17ha5b82c23507454aeE>:
pub fn eq<T: ?Sized>(a: *const T, b: *const T) -> bool {
    8002180c:	1141                	addi	sp,sp,-16
    8002180e:	e02a                	sd	a0,0(sp)
    80021810:	e42e                	sd	a1,8(sp)
    a == b
    80021812:	8d2d                	xor	a0,a0,a1
    80021814:	00153513          	seqz	a0,a0
}
    80021818:	0141                	addi	sp,sp,16
    8002181a:	8082                	ret

Disassembly of section .text._ZN4core3ptr4read17hc3975c6c06864098E:

000000008002181c <_ZN4core3ptr4read17hc3975c6c06864098E>:
pub const unsafe fn read<T>(src: *const T) -> T {
    8002181c:	7139                	addi	sp,sp,-64
    8002181e:	e42a                	sd	a0,8(sp)
    80021820:	ec2a                	sd	a0,24(sp)
    80021822:	7502                	ld	a0,32(sp)
    let mut tmp = MaybeUninit::<T>::uninit();
    80021824:	e82a                	sd	a0,16(sp)
    80021826:	a009                	j	80021828 <_ZN4core3ptr4read17hc3975c6c06864098E+0xc>
    80021828:	0808                	addi	a0,sp,16
    8002182a:	fc2a                	sd	a0,56(sp)
        copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
    8002182c:	a009                	j	8002182e <_ZN4core3ptr4read17hc3975c6c06864098E+0x12>
    8002182e:	6522                	ld	a0,8(sp)
    80021830:	6108                	ld	a0,0(a0)
    80021832:	e02a                	sd	a0,0(sp)
    80021834:	e82a                	sd	a0,16(sp)
    80021836:	f42a                	sd	a0,40(sp)
    80021838:	f82a                	sd	a0,48(sp)
        tmp.assume_init()
    8002183a:	a009                	j	8002183c <_ZN4core3ptr4read17hc3975c6c06864098E+0x20>
}
    8002183c:	6502                	ld	a0,0(sp)
    8002183e:	6121                	addi	sp,sp,64
    80021840:	8082                	ret

Disassembly of section .text._ZN4core3ptr5write17h05084118c665240bE:

0000000080021842 <_ZN4core3ptr5write17h05084118c665240bE>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
    80021842:	1101                	addi	sp,sp,-32
    80021844:	e42e                	sd	a1,8(sp)
    80021846:	e832                	sd	a2,16(sp)
    80021848:	ec2a                	sd	a0,24(sp)
        copy_nonoverlapping(&src as *const T, dst, 1);
    8002184a:	e510                	sd	a2,8(a0)
    8002184c:	e10c                	sd	a1,0(a0)
}
    8002184e:	6105                	addi	sp,sp,32
    80021850:	8082                	ret

Disassembly of section .text._ZN4core3ptr5write17h087ddd4d9bf79c51E:

0000000080021852 <_ZN4core3ptr5write17h087ddd4d9bf79c51E>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
    80021852:	1141                	addi	sp,sp,-16
    80021854:	e02e                	sd	a1,0(sp)
    80021856:	e42a                	sd	a0,8(sp)
        copy_nonoverlapping(&src as *const T, dst, 1);
    80021858:	e10c                	sd	a1,0(a0)
}
    8002185a:	0141                	addi	sp,sp,16
    8002185c:	8082                	ret

Disassembly of section .text._ZN4core3ptr5write17h20482a37cc2ee430E:

000000008002185e <_ZN4core3ptr5write17h20482a37cc2ee430E>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
    8002185e:	1101                	addi	sp,sp,-32
    80021860:	e42e                	sd	a1,8(sp)
    80021862:	e832                	sd	a2,16(sp)
    80021864:	ec2a                	sd	a0,24(sp)
        copy_nonoverlapping(&src as *const T, dst, 1);
    80021866:	e510                	sd	a2,8(a0)
    80021868:	e10c                	sd	a1,0(a0)
}
    8002186a:	6105                	addi	sp,sp,32
    8002186c:	8082                	ret

Disassembly of section .text._ZN4core3ptr5write17he24a5dabd5fc0ae9E:

000000008002186e <_ZN4core3ptr5write17he24a5dabd5fc0ae9E>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
    8002186e:	1101                	addi	sp,sp,-32
    80021870:	e42e                	sd	a1,8(sp)
    80021872:	e832                	sd	a2,16(sp)
    80021874:	ec2a                	sd	a0,24(sp)
        copy_nonoverlapping(&src as *const T, dst, 1);
    80021876:	e510                	sd	a2,8(a0)
    80021878:	e10c                	sd	a1,0(a0)
}
    8002187a:	6105                	addi	sp,sp,32
    8002187c:	8082                	ret

Disassembly of section .text._ZN4core3num23_$LT$impl$u20$usize$GT$10count_ones17h72d1856430c619feE:

000000008002187e <_ZN4core3num23_$LT$impl$u20$usize$GT$10count_ones17h72d1856430c619feE>:
        pub const fn count_ones(self) -> u32 {
    8002187e:	1101                	addi	sp,sp,-32
    80021880:	e82a                	sd	a0,16(sp)
            intrinsics::ctpop(self as $ActualT) as u32
    80021882:	00155593          	srli	a1,a0,0x1
    80021886:	05555637          	lui	a2,0x5555
    8002188a:	5556061b          	addiw	a2,a2,1365
    8002188e:	0632                	slli	a2,a2,0xc
    80021890:	55560613          	addi	a2,a2,1365 # 5555555 <.Lline_table_start0+0x551ea53>
    80021894:	0632                	slli	a2,a2,0xc
    80021896:	55560613          	addi	a2,a2,1365
    8002189a:	0632                	slli	a2,a2,0xc
    8002189c:	55560613          	addi	a2,a2,1365
    800218a0:	8df1                	and	a1,a1,a2
    800218a2:	40b505b3          	sub	a1,a0,a1
    800218a6:	03333537          	lui	a0,0x3333
    800218aa:	3335051b          	addiw	a0,a0,819
    800218ae:	0532                	slli	a0,a0,0xc
    800218b0:	33350513          	addi	a0,a0,819 # 3333333 <.Lline_table_start0+0x32fc831>
    800218b4:	0532                	slli	a0,a0,0xc
    800218b6:	33350513          	addi	a0,a0,819
    800218ba:	0532                	slli	a0,a0,0xc
    800218bc:	33350613          	addi	a2,a0,819
    800218c0:	00c5f533          	and	a0,a1,a2
    800218c4:	8189                	srli	a1,a1,0x2
    800218c6:	8df1                	and	a1,a1,a2
    800218c8:	952e                	add	a0,a0,a1
    800218ca:	00455593          	srli	a1,a0,0x4
    800218ce:	952e                	add	a0,a0,a1
    800218d0:	00f0f5b7          	lui	a1,0xf0f
    800218d4:	0f15859b          	addiw	a1,a1,241
    800218d8:	05b2                	slli	a1,a1,0xc
    800218da:	f0f58593          	addi	a1,a1,-241 # f0ef0f <.Lline_table_start0+0xed840d>
    800218de:	05b2                	slli	a1,a1,0xc
    800218e0:	0f158593          	addi	a1,a1,241
    800218e4:	05b2                	slli	a1,a1,0xc
    800218e6:	f0f58593          	addi	a1,a1,-241
    800218ea:	8d6d                	and	a0,a0,a1
    800218ec:	010105b7          	lui	a1,0x1010
    800218f0:	1015859b          	addiw	a1,a1,257
    800218f4:	05c2                	slli	a1,a1,0x10
    800218f6:	10158593          	addi	a1,a1,257 # 1010101 <.Lline_table_start0+0xfd95ff>
    800218fa:	05c2                	slli	a1,a1,0x10
    800218fc:	10158593          	addi	a1,a1,257
    80021900:	02b50533          	mul	a0,a0,a1
    80021904:	9161                	srli	a0,a0,0x38
    80021906:	e42a                	sd	a0,8(sp)
    80021908:	ec2a                	sd	a0,24(sp)
    8002190a:	a009                	j	8002190c <_ZN4core3num23_$LT$impl$u20$usize$GT$10count_ones17h72d1856430c619feE+0x8e>
        }
    8002190c:	6522                	ld	a0,8(sp)
    8002190e:	6105                	addi	sp,sp,32
    80021910:	8082                	ret

Disassembly of section .text._ZN4core3num23_$LT$impl$u20$usize$GT$13unchecked_add17hcd1907f29e8c72abE:

0000000080021912 <_ZN4core3num23_$LT$impl$u20$usize$GT$13unchecked_add17hcd1907f29e8c72abE>:
        pub unsafe fn unchecked_add(self, rhs: Self) -> Self {
    80021912:	1101                	addi	sp,sp,-32
    80021914:	e42a                	sd	a0,8(sp)
    80021916:	e82e                	sd	a1,16(sp)
            unsafe { intrinsics::unchecked_add(self, rhs) }
    80021918:	952e                	add	a0,a0,a1
    8002191a:	e02a                	sd	a0,0(sp)
    8002191c:	ec2a                	sd	a0,24(sp)
    8002191e:	a009                	j	80021920 <_ZN4core3num23_$LT$impl$u20$usize$GT$13unchecked_add17hcd1907f29e8c72abE+0xe>
        }
    80021920:	6502                	ld	a0,0(sp)
    80021922:	6105                	addi	sp,sp,32
    80021924:	8082                	ret

Disassembly of section .text._ZN4core3num23_$LT$impl$u20$usize$GT$14trailing_zeros17h26e4a056cb05b6fbE:

0000000080021926 <_ZN4core3num23_$LT$impl$u20$usize$GT$14trailing_zeros17h26e4a056cb05b6fbE>:
        pub const fn trailing_zeros(self) -> u32 {
    80021926:	1101                	addi	sp,sp,-32
    80021928:	e82a                	sd	a0,16(sp)
            intrinsics::cttz(self) as u32
    8002192a:	fff50593          	addi	a1,a0,-1
    8002192e:	fff54513          	not	a0,a0
    80021932:	8d6d                	and	a0,a0,a1
    80021934:	00155593          	srli	a1,a0,0x1
    80021938:	05555637          	lui	a2,0x5555
    8002193c:	5556061b          	addiw	a2,a2,1365
    80021940:	0632                	slli	a2,a2,0xc
    80021942:	55560613          	addi	a2,a2,1365 # 5555555 <.Lline_table_start0+0x551ea53>
    80021946:	0632                	slli	a2,a2,0xc
    80021948:	55560613          	addi	a2,a2,1365
    8002194c:	0632                	slli	a2,a2,0xc
    8002194e:	55560613          	addi	a2,a2,1365
    80021952:	8df1                	and	a1,a1,a2
    80021954:	40b505b3          	sub	a1,a0,a1
    80021958:	03333537          	lui	a0,0x3333
    8002195c:	3335051b          	addiw	a0,a0,819
    80021960:	0532                	slli	a0,a0,0xc
    80021962:	33350513          	addi	a0,a0,819 # 3333333 <.Lline_table_start0+0x32fc831>
    80021966:	0532                	slli	a0,a0,0xc
    80021968:	33350513          	addi	a0,a0,819
    8002196c:	0532                	slli	a0,a0,0xc
    8002196e:	33350613          	addi	a2,a0,819
    80021972:	00c5f533          	and	a0,a1,a2
    80021976:	8189                	srli	a1,a1,0x2
    80021978:	8df1                	and	a1,a1,a2
    8002197a:	952e                	add	a0,a0,a1
    8002197c:	00455593          	srli	a1,a0,0x4
    80021980:	952e                	add	a0,a0,a1
    80021982:	00f0f5b7          	lui	a1,0xf0f
    80021986:	0f15859b          	addiw	a1,a1,241
    8002198a:	05b2                	slli	a1,a1,0xc
    8002198c:	f0f58593          	addi	a1,a1,-241 # f0ef0f <.Lline_table_start0+0xed840d>
    80021990:	05b2                	slli	a1,a1,0xc
    80021992:	0f158593          	addi	a1,a1,241
    80021996:	05b2                	slli	a1,a1,0xc
    80021998:	f0f58593          	addi	a1,a1,-241
    8002199c:	8d6d                	and	a0,a0,a1
    8002199e:	010105b7          	lui	a1,0x1010
    800219a2:	1015859b          	addiw	a1,a1,257
    800219a6:	05c2                	slli	a1,a1,0x10
    800219a8:	10158593          	addi	a1,a1,257 # 1010101 <.Lline_table_start0+0xfd95ff>
    800219ac:	05c2                	slli	a1,a1,0x10
    800219ae:	10158593          	addi	a1,a1,257
    800219b2:	02b50533          	mul	a0,a0,a1
    800219b6:	9161                	srli	a0,a0,0x38
    800219b8:	e42a                	sd	a0,8(sp)
    800219ba:	ec2a                	sd	a0,24(sp)
    800219bc:	a009                	j	800219be <_ZN4core3num23_$LT$impl$u20$usize$GT$14trailing_zeros17h26e4a056cb05b6fbE+0x98>
        }
    800219be:	6522                	ld	a0,8(sp)
    800219c0:	6105                	addi	sp,sp,32
    800219c2:	8082                	ret

Disassembly of section .text._ZN4core3num23_$LT$impl$u20$usize$GT$15is_power_of_two17h4d07b92e227ceed8E:

00000000800219c4 <_ZN4core3num23_$LT$impl$u20$usize$GT$15is_power_of_two17h4d07b92e227ceed8E>:
        pub const fn is_power_of_two(self) -> bool {
    800219c4:	1101                	addi	sp,sp,-32
    800219c6:	ec06                	sd	ra,24(sp)
    800219c8:	e82a                	sd	a0,16(sp)
            self.count_ones() == 1
    800219ca:	00000097          	auipc	ra,0x0
    800219ce:	eb4080e7          	jalr	-332(ra) # 8002187e <_ZN4core3num23_$LT$impl$u20$usize$GT$10count_ones17h72d1856430c619feE>
    800219d2:	e42a                	sd	a0,8(sp)
    800219d4:	a009                	j	800219d6 <_ZN4core3num23_$LT$impl$u20$usize$GT$15is_power_of_two17h4d07b92e227ceed8E+0x12>
    800219d6:	6522                	ld	a0,8(sp)
    800219d8:	2501                	sext.w	a0,a0
    800219da:	157d                	addi	a0,a0,-1
    800219dc:	00153513          	seqz	a0,a0
        }
    800219e0:	60e2                	ld	ra,24(sp)
    800219e2:	6105                	addi	sp,sp,32
    800219e4:	8082                	ret

Disassembly of section .text._ZN4core3num23_$LT$impl$u20$usize$GT$17next_power_of_two17h8eeaf87577f4331fE:

00000000800219e6 <_ZN4core3num23_$LT$impl$u20$usize$GT$17next_power_of_two17h8eeaf87577f4331fE>:
        pub const fn next_power_of_two(self) -> Self {
    800219e6:	1101                	addi	sp,sp,-32
    800219e8:	ec06                	sd	ra,24(sp)
    800219ea:	e82a                	sd	a0,16(sp)
            self.one_less_than_next_power_of_two() + 1
    800219ec:	00000097          	auipc	ra,0x0
    800219f0:	03e080e7          	jalr	62(ra) # 80021a2a <_ZN4core3num23_$LT$impl$u20$usize$GT$31one_less_than_next_power_of_two17hfbc6a00474408ebbE>
    800219f4:	e42a                	sd	a0,8(sp)
    800219f6:	a009                	j	800219f8 <_ZN4core3num23_$LT$impl$u20$usize$GT$17next_power_of_two17h8eeaf87577f4331fE+0x12>
    800219f8:	65a2                	ld	a1,8(sp)
    800219fa:	00158513          	addi	a0,a1,1
    800219fe:	e02a                	sd	a0,0(sp)
    80021a00:	00b56763          	bltu	a0,a1,80021a0e <.LBB4_4>
    80021a04:	a009                	j	80021a06 <_ZN4core3num23_$LT$impl$u20$usize$GT$17next_power_of_two17h8eeaf87577f4331fE+0x20>
        }
    80021a06:	6502                	ld	a0,0(sp)
    80021a08:	60e2                	ld	ra,24(sp)
    80021a0a:	6105                	addi	sp,sp,32
    80021a0c:	8082                	ret

0000000080021a0e <.LBB4_4>:
            self.one_less_than_next_power_of_two() + 1
    80021a0e:	0000b517          	auipc	a0,0xb
    80021a12:	b4250513          	addi	a0,a0,-1214 # 8002c550 <str.0>

0000000080021a16 <.LBB4_5>:
    80021a16:	0000b617          	auipc	a2,0xb
    80021a1a:	b2260613          	addi	a2,a2,-1246 # 8002c538 <.L__unnamed_1>
    80021a1e:	45f1                	li	a1,28
    80021a20:	00001097          	auipc	ra,0x1
    80021a24:	856080e7          	jalr	-1962(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN4core3num23_$LT$impl$u20$usize$GT$31one_less_than_next_power_of_two17hfbc6a00474408ebbE:

0000000080021a2a <_ZN4core3num23_$LT$impl$u20$usize$GT$31one_less_than_next_power_of_two17hfbc6a00474408ebbE>:
        const fn one_less_than_next_power_of_two(self) -> Self {
    80021a2a:	7139                	addi	sp,sp,-64
    80021a2c:	85aa                	mv	a1,a0
    80021a2e:	e82e                	sd	a1,16(sp)
    80021a30:	f02e                	sd	a1,32(sp)
    80021a32:	4505                	li	a0,1
            if self <= 1 { return 0; }
    80021a34:	00b56663          	bltu	a0,a1,80021a40 <_ZN4core3num23_$LT$impl$u20$usize$GT$31one_less_than_next_power_of_two17hfbc6a00474408ebbE+0x16>
    80021a38:	a009                	j	80021a3a <_ZN4core3num23_$LT$impl$u20$usize$GT$31one_less_than_next_power_of_two17hfbc6a00474408ebbE+0x10>
    80021a3a:	4501                	li	a0,0
    80021a3c:	ec2a                	sd	a0,24(sp)
        }
    80021a3e:	a0e1                	j	80021b06 <_ZN4core3num23_$LT$impl$u20$usize$GT$31one_less_than_next_power_of_two17hfbc6a00474408ebbE+0xdc>
            let p = self - 1;
    80021a40:	6542                	ld	a0,16(sp)
    80021a42:	157d                	addi	a0,a0,-1
    80021a44:	f42a                	sd	a0,40(sp)
            let z = unsafe { intrinsics::ctlz_nonzero(p) };
    80021a46:	00155593          	srli	a1,a0,0x1
    80021a4a:	8d4d                	or	a0,a0,a1
    80021a4c:	00255593          	srli	a1,a0,0x2
    80021a50:	8d4d                	or	a0,a0,a1
    80021a52:	00455593          	srli	a1,a0,0x4
    80021a56:	8d4d                	or	a0,a0,a1
    80021a58:	00855593          	srli	a1,a0,0x8
    80021a5c:	8d4d                	or	a0,a0,a1
    80021a5e:	01055593          	srli	a1,a0,0x10
    80021a62:	8d4d                	or	a0,a0,a1
    80021a64:	02055593          	srli	a1,a0,0x20
    80021a68:	8d4d                	or	a0,a0,a1
    80021a6a:	fff54513          	not	a0,a0
    80021a6e:	00155593          	srli	a1,a0,0x1
    80021a72:	05555637          	lui	a2,0x5555
    80021a76:	5556061b          	addiw	a2,a2,1365
    80021a7a:	0632                	slli	a2,a2,0xc
    80021a7c:	55560613          	addi	a2,a2,1365 # 5555555 <.Lline_table_start0+0x551ea53>
    80021a80:	0632                	slli	a2,a2,0xc
    80021a82:	55560613          	addi	a2,a2,1365
    80021a86:	0632                	slli	a2,a2,0xc
    80021a88:	55560613          	addi	a2,a2,1365
    80021a8c:	8df1                	and	a1,a1,a2
    80021a8e:	40b505b3          	sub	a1,a0,a1
    80021a92:	03333537          	lui	a0,0x3333
    80021a96:	3335051b          	addiw	a0,a0,819
    80021a9a:	0532                	slli	a0,a0,0xc
    80021a9c:	33350513          	addi	a0,a0,819 # 3333333 <.Lline_table_start0+0x32fc831>
    80021aa0:	0532                	slli	a0,a0,0xc
    80021aa2:	33350513          	addi	a0,a0,819
    80021aa6:	0532                	slli	a0,a0,0xc
    80021aa8:	33350613          	addi	a2,a0,819
    80021aac:	00c5f533          	and	a0,a1,a2
    80021ab0:	8189                	srli	a1,a1,0x2
    80021ab2:	8df1                	and	a1,a1,a2
    80021ab4:	952e                	add	a0,a0,a1
    80021ab6:	00455593          	srli	a1,a0,0x4
    80021aba:	952e                	add	a0,a0,a1
    80021abc:	00f0f5b7          	lui	a1,0xf0f
    80021ac0:	0f15859b          	addiw	a1,a1,241
    80021ac4:	05b2                	slli	a1,a1,0xc
    80021ac6:	f0f58593          	addi	a1,a1,-241 # f0ef0f <.Lline_table_start0+0xed840d>
    80021aca:	05b2                	slli	a1,a1,0xc
    80021acc:	0f158593          	addi	a1,a1,241
    80021ad0:	05b2                	slli	a1,a1,0xc
    80021ad2:	f0f58593          	addi	a1,a1,-241
    80021ad6:	8d6d                	and	a0,a0,a1
    80021ad8:	010105b7          	lui	a1,0x1010
    80021adc:	1015859b          	addiw	a1,a1,257
    80021ae0:	05c2                	slli	a1,a1,0x10
    80021ae2:	10158593          	addi	a1,a1,257 # 1010101 <.Lline_table_start0+0xfd95ff>
    80021ae6:	05c2                	slli	a1,a1,0x10
    80021ae8:	10158593          	addi	a1,a1,257
    80021aec:	02b50533          	mul	a0,a0,a1
    80021af0:	9161                	srli	a0,a0,0x38
    80021af2:	e42a                	sd	a0,8(sp)
    80021af4:	f82a                	sd	a0,48(sp)
    80021af6:	fc2a                	sd	a0,56(sp)
    80021af8:	a009                	j	80021afa <_ZN4core3num23_$LT$impl$u20$usize$GT$31one_less_than_next_power_of_two17hfbc6a00474408ebbE+0xd0>
    80021afa:	65a2                	ld	a1,8(sp)
    80021afc:	557d                	li	a0,-1
            <$SelfT>::MAX >> z
    80021afe:	00b55533          	srl	a0,a0,a1
    80021b02:	ec2a                	sd	a0,24(sp)
        }
    80021b04:	a009                	j	80021b06 <_ZN4core3num23_$LT$impl$u20$usize$GT$31one_less_than_next_power_of_two17hfbc6a00474408ebbE+0xdc>
    80021b06:	6562                	ld	a0,24(sp)
    80021b08:	6121                	addi	sp,sp,64
    80021b0a:	8082                	ret

Disassembly of section .text._ZN4core10intrinsics11write_bytes17hd3155cf1c4a39b27E:

0000000080021b0c <_ZN4core10intrinsics11write_bytes17hd3155cf1c4a39b27E>:
pub unsafe fn write_bytes<T>(dst: *mut T, val: u8, count: usize) {
    80021b0c:	1101                	addi	sp,sp,-32
    80021b0e:	ec06                	sd	ra,24(sp)
    80021b10:	e02a                	sd	a0,0(sp)
    80021b12:	00b107a3          	sb	a1,15(sp)
    80021b16:	e832                	sd	a2,16(sp)
    80021b18:	03000693          	li	a3,48
    unsafe { write_bytes(dst, val, count) }
    80021b1c:	02d60633          	mul	a2,a2,a3
    80021b20:	00003097          	auipc	ra,0x3
    80021b24:	616080e7          	jalr	1558(ra) # 80025136 <memset>
    80021b28:	a009                	j	80021b2a <_ZN4core10intrinsics11write_bytes17hd3155cf1c4a39b27E+0x1e>
}
    80021b2a:	60e2                	ld	ra,24(sp)
    80021b2c:	6105                	addi	sp,sp,32
    80021b2e:	8082                	ret

Disassembly of section .text._ZN4core10intrinsics11write_bytes17hfabd30e5bfcb1b55E:

0000000080021b30 <_ZN4core10intrinsics11write_bytes17hfabd30e5bfcb1b55E>:
pub unsafe fn write_bytes<T>(dst: *mut T, val: u8, count: usize) {
    80021b30:	1101                	addi	sp,sp,-32
    80021b32:	ec06                	sd	ra,24(sp)
    80021b34:	e02a                	sd	a0,0(sp)
    80021b36:	00b107a3          	sb	a1,15(sp)
    80021b3a:	e832                	sd	a2,16(sp)
    unsafe { write_bytes(dst, val, count) }
    80021b3c:	00003097          	auipc	ra,0x3
    80021b40:	5fa080e7          	jalr	1530(ra) # 80025136 <memset>
    80021b44:	a009                	j	80021b46 <_ZN4core10intrinsics11write_bytes17hfabd30e5bfcb1b55E+0x16>
}
    80021b46:	60e2                	ld	ra,24(sp)
    80021b48:	6105                	addi	sp,sp,32
    80021b4a:	8082                	ret

Disassembly of section .text._ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17h8a22fb325f3ddf5bE:

0000000080021b4c <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17h8a22fb325f3ddf5bE>:
        unsafe fn forward_unchecked(start: Self, n: usize) -> Self {
    80021b4c:	1101                	addi	sp,sp,-32
    80021b4e:	ec06                	sd	ra,24(sp)
    80021b50:	e42a                	sd	a0,8(sp)
    80021b52:	e82e                	sd	a1,16(sp)
            unsafe { start.unchecked_add(n as Self) }
    80021b54:	00000097          	auipc	ra,0x0
    80021b58:	dbe080e7          	jalr	-578(ra) # 80021912 <_ZN4core3num23_$LT$impl$u20$usize$GT$13unchecked_add17hcd1907f29e8c72abE>
    80021b5c:	e02a                	sd	a0,0(sp)
    80021b5e:	a009                	j	80021b60 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17h8a22fb325f3ddf5bE+0x14>
        }
    80021b60:	6502                	ld	a0,0(sp)
    80021b62:	60e2                	ld	ra,24(sp)
    80021b64:	6105                	addi	sp,sp,32
    80021b66:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h94cbb879d32de261E:

0000000080021b68 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h94cbb879d32de261E>:
    pub const unsafe fn add(self, count: usize) -> Self
    80021b68:	1101                	addi	sp,sp,-32
    80021b6a:	ec06                	sd	ra,24(sp)
    80021b6c:	e42a                	sd	a0,8(sp)
    80021b6e:	e82e                	sd	a1,16(sp)
        unsafe { self.offset(count as isize) }
    80021b70:	00000097          	auipc	ra,0x0
    80021b74:	068080e7          	jalr	104(ra) # 80021bd8 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h19b052a8866d770eE>
    80021b78:	e02a                	sd	a0,0(sp)
    80021b7a:	a009                	j	80021b7c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h94cbb879d32de261E+0x14>
    }
    80021b7c:	6502                	ld	a0,0(sp)
    80021b7e:	60e2                	ld	ra,24(sp)
    80021b80:	6105                	addi	sp,sp,32
    80021b82:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$4cast17h8ad85686487e19c0E:

0000000080021b84 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$4cast17h8ad85686487e19c0E>:
    pub const fn cast<U>(self) -> *mut U {
    80021b84:	1141                	addi	sp,sp,-16
    80021b86:	e42a                	sd	a0,8(sp)
    }
    80021b88:	0141                	addi	sp,sp,16
    80021b8a:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17h69211318640bf224E:

0000000080021b8c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17h69211318640bf224E>:
    pub const unsafe fn write(self, val: T)
    80021b8c:	1101                	addi	sp,sp,-32
    80021b8e:	ec06                	sd	ra,24(sp)
    80021b90:	e02a                	sd	a0,0(sp)
    80021b92:	e42e                	sd	a1,8(sp)
    80021b94:	e832                	sd	a2,16(sp)
        unsafe { write(self, val) }
    80021b96:	00000097          	auipc	ra,0x0
    80021b9a:	cd8080e7          	jalr	-808(ra) # 8002186e <_ZN4core3ptr5write17he24a5dabd5fc0ae9E>
    80021b9e:	a009                	j	80021ba0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17h69211318640bf224E+0x14>
    }
    80021ba0:	60e2                	ld	ra,24(sp)
    80021ba2:	6105                	addi	sp,sp,32
    80021ba4:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h46e365b62bffa500E:

0000000080021ba6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h46e365b62bffa500E>:
    pub unsafe fn as_mut<'a>(self) -> Option<&'a mut T> {
    80021ba6:	7179                	addi	sp,sp,-48
    80021ba8:	f406                	sd	ra,40(sp)
    80021baa:	e42a                	sd	a0,8(sp)
    80021bac:	f02a                	sd	a0,32(sp)
        if self.is_null() { None } else { unsafe { Some(&mut *self) } }
    80021bae:	00000097          	auipc	ra,0x0
    80021bb2:	046080e7          	jalr	70(ra) # 80021bf4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h7ee5bf75e9cc9a60E>
    80021bb6:	e82a                	sd	a0,16(sp)
    80021bb8:	a009                	j	80021bba <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h46e365b62bffa500E+0x14>
    80021bba:	6542                	ld	a0,16(sp)
    80021bbc:	4581                	li	a1,0
    80021bbe:	00b50663          	beq	a0,a1,80021bca <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h46e365b62bffa500E+0x24>
    80021bc2:	a009                	j	80021bc4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h46e365b62bffa500E+0x1e>
    80021bc4:	4501                	li	a0,0
    80021bc6:	ec2a                	sd	a0,24(sp)
    80021bc8:	a021                	j	80021bd0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h46e365b62bffa500E+0x2a>
    80021bca:	6522                	ld	a0,8(sp)
    80021bcc:	ec2a                	sd	a0,24(sp)
    80021bce:	a009                	j	80021bd0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h46e365b62bffa500E+0x2a>
    }
    80021bd0:	6562                	ld	a0,24(sp)
    80021bd2:	70a2                	ld	ra,40(sp)
    80021bd4:	6145                	addi	sp,sp,48
    80021bd6:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h19b052a8866d770eE:

0000000080021bd8 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h19b052a8866d770eE>:
    pub const unsafe fn offset(self, count: isize) -> *mut T
    80021bd8:	1101                	addi	sp,sp,-32
    80021bda:	e42a                	sd	a0,8(sp)
    80021bdc:	e82e                	sd	a1,16(sp)
    80021bde:	03000613          	li	a2,48
        unsafe { intrinsics::offset(self, count) as *mut T }
    80021be2:	02c585b3          	mul	a1,a1,a2
    80021be6:	952e                	add	a0,a0,a1
    80021be8:	e02a                	sd	a0,0(sp)
    80021bea:	ec2a                	sd	a0,24(sp)
    80021bec:	a009                	j	80021bee <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h19b052a8866d770eE+0x16>
    }
    80021bee:	6502                	ld	a0,0(sp)
    80021bf0:	6105                	addi	sp,sp,32
    80021bf2:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h7ee5bf75e9cc9a60E:

0000000080021bf4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h7ee5bf75e9cc9a60E>:
    pub const fn is_null(self) -> bool {
    80021bf4:	1101                	addi	sp,sp,-32
    80021bf6:	ec06                	sd	ra,24(sp)
    80021bf8:	e82a                	sd	a0,16(sp)
        (self as *mut u8).guaranteed_eq(null_mut())
    80021bfa:	e42a                	sd	a0,8(sp)
    80021bfc:	a009                	j	80021bfe <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h7ee5bf75e9cc9a60E+0xa>
    80021bfe:	6522                	ld	a0,8(sp)
    80021c00:	4581                	li	a1,0
    80021c02:	ffffe097          	auipc	ra,0xffffe
    80021c06:	ae2080e7          	jalr	-1310(ra) # 8001f6e4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$13guaranteed_eq17h568dab4191b83956E>
    80021c0a:	e02a                	sd	a0,0(sp)
    80021c0c:	a009                	j	80021c0e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h7ee5bf75e9cc9a60E+0x1a>
    }
    80021c0e:	6502                	ld	a0,0(sp)
    80021c10:	60e2                	ld	ra,24(sp)
    80021c12:	6105                	addi	sp,sp,32
    80021c14:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr41_$LT$impl$u20$$BP$mut$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h6f6f43a247b8051cE:

0000000080021c16 <_ZN4core3ptr7mut_ptr41_$LT$impl$u20$$BP$mut$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h6f6f43a247b8051cE>:
    pub const fn as_mut_ptr(self) -> *mut T {
    80021c16:	1141                	addi	sp,sp,-16
    80021c18:	e02a                	sd	a0,0(sp)
    80021c1a:	e42e                	sd	a1,8(sp)
    }
    80021c1c:	0141                	addi	sp,sp,16
    80021c1e:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr41_$LT$impl$u20$$BP$mut$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h83deb5daf75ed8d6E:

0000000080021c20 <_ZN4core3ptr7mut_ptr41_$LT$impl$u20$$BP$mut$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h83deb5daf75ed8d6E>:
    pub unsafe fn get_unchecked_mut<I>(self, index: I) -> *mut I::Output
    80021c20:	7179                	addi	sp,sp,-48
    80021c22:	f406                	sd	ra,40(sp)
    80021c24:	e032                	sd	a2,0(sp)
    80021c26:	862e                	mv	a2,a1
    80021c28:	85aa                	mv	a1,a0
    80021c2a:	6502                	ld	a0,0(sp)
    80021c2c:	e82e                	sd	a1,16(sp)
    80021c2e:	ec32                	sd	a2,24(sp)
    80021c30:	f02a                	sd	a0,32(sp)
        unsafe { index.get_unchecked_mut(self) }
    80021c32:	00000097          	auipc	ra,0x0
    80021c36:	1c0080e7          	jalr	448(ra) # 80021df2 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17ha2bcc8944b7af021E>
    80021c3a:	e42a                	sd	a0,8(sp)
    80021c3c:	a009                	j	80021c3e <_ZN4core3ptr7mut_ptr41_$LT$impl$u20$$BP$mut$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h83deb5daf75ed8d6E+0x1e>
    }
    80021c3e:	6522                	ld	a0,8(sp)
    80021c40:	70a2                	ld	ra,40(sp)
    80021c42:	6145                	addi	sp,sp,48
    80021c44:	8082                	ret

Disassembly of section .text._ZN9allocator16init_slice_empty17h3fa3ac5493bc8701E:

0000000080021c46 <_ZN9allocator16init_slice_empty17h3fa3ac5493bc8701E>:
unsafe fn init_slice_empty<T>(cur: &mut usize, len: usize) -> *mut [T] {
    80021c46:	711d                	addi	sp,sp,-96
    80021c48:	ec86                	sd	ra,88(sp)
    80021c4a:	f42e                	sd	a1,40(sp)
    80021c4c:	f82a                	sd	a0,48(sp)
    80021c4e:	e0aa                	sd	a0,64(sp)
    80021c50:	e4ae                	sd	a1,72(sp)
    let raw_ptr = *cur as *mut T;
    80021c52:	6108                	ld	a0,0(a0)
    80021c54:	fc2a                	sd	a0,56(sp)
    80021c56:	e8aa                	sd	a0,80(sp)
    *cur += mem::size_of::<T>() * len;
    80021c58:	a009                	j	80021c5a <_ZN9allocator16init_slice_empty17h3fa3ac5493bc8701E+0x14>
    80021c5a:	7522                	ld	a0,40(sp)
    80021c5c:	f02a                	sd	a0,32(sp)
    80021c5e:	4501                	li	a0,0
    80021c60:	e139                	bnez	a0,80021ca6 <.LBB8_8>
    80021c62:	a009                	j	80021c64 <_ZN9allocator16init_slice_empty17h3fa3ac5493bc8701E+0x1e>
    80021c64:	7502                	ld	a0,32(sp)
    80021c66:	75c2                	ld	a1,48(sp)
    80021c68:	618c                	ld	a1,0(a1)
    80021c6a:	952e                	add	a0,a0,a1
    80021c6c:	ec2a                	sd	a0,24(sp)
    80021c6e:	04b56b63          	bltu	a0,a1,80021cc4 <.LBB8_10>
    80021c72:	a009                	j	80021c74 <_ZN9allocator16init_slice_empty17h3fa3ac5493bc8701E+0x2e>
    80021c74:	7622                	ld	a2,40(sp)
    80021c76:	7562                	ld	a0,56(sp)
    80021c78:	65e2                	ld	a1,24(sp)
    80021c7a:	76c2                	ld	a3,48(sp)
    80021c7c:	e28c                	sd	a1,0(a3)
    80021c7e:	4581                	li	a1,0
    ptr::write_bytes(raw_ptr, 0, len);
    80021c80:	00000097          	auipc	ra,0x0
    80021c84:	eb0080e7          	jalr	-336(ra) # 80021b30 <_ZN4core10intrinsics11write_bytes17hfabd30e5bfcb1b55E>
    80021c88:	a009                	j	80021c8a <_ZN9allocator16init_slice_empty17h3fa3ac5493bc8701E+0x44>
    ptr::slice_from_raw_parts_mut(raw_ptr, len)
    80021c8a:	75a2                	ld	a1,40(sp)
    80021c8c:	7562                	ld	a0,56(sp)
    80021c8e:	00000097          	auipc	ra,0x0
    80021c92:	b1a080e7          	jalr	-1254(ra) # 800217a8 <_ZN4core3ptr24slice_from_raw_parts_mut17h39496eba86137ee5E>
    80021c96:	e42a                	sd	a0,8(sp)
    80021c98:	e82e                	sd	a1,16(sp)
    80021c9a:	a009                	j	80021c9c <_ZN9allocator16init_slice_empty17h3fa3ac5493bc8701E+0x56>
}
    80021c9c:	65c2                	ld	a1,16(sp)
    80021c9e:	6522                	ld	a0,8(sp)
    80021ca0:	60e6                	ld	ra,88(sp)
    80021ca2:	6125                	addi	sp,sp,96
    80021ca4:	8082                	ret

0000000080021ca6 <.LBB8_8>:
    *cur += mem::size_of::<T>() * len;
    80021ca6:	0000b517          	auipc	a0,0xb
    80021caa:	90a50513          	addi	a0,a0,-1782 # 8002c5b0 <str.0>

0000000080021cae <.LBB8_9>:
    80021cae:	0000b617          	auipc	a2,0xb
    80021cb2:	8ea60613          	addi	a2,a2,-1814 # 8002c598 <.L__unnamed_1>
    80021cb6:	02100593          	li	a1,33
    80021cba:	00000097          	auipc	ra,0x0
    80021cbe:	5bc080e7          	jalr	1468(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080021cc4 <.LBB8_10>:
    80021cc4:	0000b517          	auipc	a0,0xb
    80021cc8:	92c50513          	addi	a0,a0,-1748 # 8002c5f0 <str.1>

0000000080021ccc <.LBB8_11>:
    80021ccc:	0000b617          	auipc	a2,0xb
    80021cd0:	90c60613          	addi	a2,a2,-1780 # 8002c5d8 <.L__unnamed_2>
    80021cd4:	45f1                	li	a1,28
    80021cd6:	00000097          	auipc	ra,0x0
    80021cda:	5a0080e7          	jalr	1440(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN9allocator16init_slice_empty17h570498bae7ef4c88E:

0000000080021ce0 <_ZN9allocator16init_slice_empty17h570498bae7ef4c88E>:
unsafe fn init_slice_empty<T>(cur: &mut usize, len: usize) -> *mut [T] {
    80021ce0:	711d                	addi	sp,sp,-96
    80021ce2:	ec86                	sd	ra,88(sp)
    80021ce4:	f42e                	sd	a1,40(sp)
    80021ce6:	f82a                	sd	a0,48(sp)
    80021ce8:	e0aa                	sd	a0,64(sp)
    80021cea:	e4ae                	sd	a1,72(sp)
    let raw_ptr = *cur as *mut T;
    80021cec:	6108                	ld	a0,0(a0)
    80021cee:	fc2a                	sd	a0,56(sp)
    80021cf0:	e8aa                	sd	a0,80(sp)
    *cur += mem::size_of::<T>() * len;
    80021cf2:	a009                	j	80021cf4 <_ZN9allocator16init_slice_empty17h570498bae7ef4c88E+0x14>
    80021cf4:	7522                	ld	a0,40(sp)
    80021cf6:	03000593          	li	a1,48
    80021cfa:	02b50633          	mul	a2,a0,a1
    80021cfe:	f032                	sd	a2,32(sp)
    80021d00:	02b53533          	mulhu	a0,a0,a1
    80021d04:	4581                	li	a1,0
    80021d06:	04b51463          	bne	a0,a1,80021d4e <.LBB9_8>
    80021d0a:	a009                	j	80021d0c <_ZN9allocator16init_slice_empty17h570498bae7ef4c88E+0x2c>
    80021d0c:	7502                	ld	a0,32(sp)
    80021d0e:	75c2                	ld	a1,48(sp)
    80021d10:	618c                	ld	a1,0(a1)
    80021d12:	952e                	add	a0,a0,a1
    80021d14:	ec2a                	sd	a0,24(sp)
    80021d16:	04b56b63          	bltu	a0,a1,80021d6c <.LBB9_10>
    80021d1a:	a009                	j	80021d1c <_ZN9allocator16init_slice_empty17h570498bae7ef4c88E+0x3c>
    80021d1c:	7622                	ld	a2,40(sp)
    80021d1e:	7562                	ld	a0,56(sp)
    80021d20:	65e2                	ld	a1,24(sp)
    80021d22:	76c2                	ld	a3,48(sp)
    80021d24:	e28c                	sd	a1,0(a3)
    80021d26:	4581                	li	a1,0
    ptr::write_bytes(raw_ptr, 0, len);
    80021d28:	00000097          	auipc	ra,0x0
    80021d2c:	de4080e7          	jalr	-540(ra) # 80021b0c <_ZN4core10intrinsics11write_bytes17hd3155cf1c4a39b27E>
    80021d30:	a009                	j	80021d32 <_ZN9allocator16init_slice_empty17h570498bae7ef4c88E+0x52>
    ptr::slice_from_raw_parts_mut(raw_ptr, len)
    80021d32:	75a2                	ld	a1,40(sp)
    80021d34:	7562                	ld	a0,56(sp)
    80021d36:	00000097          	auipc	ra,0x0
    80021d3a:	aa4080e7          	jalr	-1372(ra) # 800217da <_ZN4core3ptr24slice_from_raw_parts_mut17h9355ff019662f88fE>
    80021d3e:	e42a                	sd	a0,8(sp)
    80021d40:	e82e                	sd	a1,16(sp)
    80021d42:	a009                	j	80021d44 <_ZN9allocator16init_slice_empty17h570498bae7ef4c88E+0x64>
}
    80021d44:	65c2                	ld	a1,16(sp)
    80021d46:	6522                	ld	a0,8(sp)
    80021d48:	60e6                	ld	ra,88(sp)
    80021d4a:	6125                	addi	sp,sp,96
    80021d4c:	8082                	ret

0000000080021d4e <.LBB9_8>:
    *cur += mem::size_of::<T>() * len;
    80021d4e:	0000b517          	auipc	a0,0xb
    80021d52:	86250513          	addi	a0,a0,-1950 # 8002c5b0 <str.0>

0000000080021d56 <.LBB9_9>:
    80021d56:	0000b617          	auipc	a2,0xb
    80021d5a:	84260613          	addi	a2,a2,-1982 # 8002c598 <.L__unnamed_1>
    80021d5e:	02100593          	li	a1,33
    80021d62:	00000097          	auipc	ra,0x0
    80021d66:	514080e7          	jalr	1300(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080021d6c <.LBB9_10>:
    80021d6c:	0000b517          	auipc	a0,0xb
    80021d70:	88450513          	addi	a0,a0,-1916 # 8002c5f0 <str.1>

0000000080021d74 <.LBB9_11>:
    80021d74:	0000b617          	auipc	a2,0xb
    80021d78:	86460613          	addi	a2,a2,-1948 # 8002c5d8 <.L__unnamed_2>
    80021d7c:	45f1                	li	a1,28
    80021d7e:	00000097          	auipc	ra,0x0
    80021d82:	4f8080e7          	jalr	1272(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$usize$GT$5clone17h2bd08456cf1cb28dE:

0000000080021d88 <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$usize$GT$5clone17h2bd08456cf1cb28dE>:
                    fn clone(&self) -> Self {
    80021d88:	1141                	addi	sp,sp,-16
    80021d8a:	e42a                	sd	a0,8(sp)
                        *self
    80021d8c:	6108                	ld	a0,0(a0)
                    }
    80021d8e:	0141                	addi	sp,sp,16
    80021d90:	8082                	ret

Disassembly of section .text._ZN4core3ptr8metadata18from_raw_parts_mut17hd3633c4516987911E:

0000000080021d92 <_ZN4core3ptr8metadata18from_raw_parts_mut17hd3633c4516987911E>:
///
/// See the documentation of [`from_raw_parts`] for more details.
#[unstable(feature = "ptr_metadata", issue = "81513")]
#[rustc_const_unstable(feature = "ptr_metadata", issue = "81513")]
#[inline]
pub const fn from_raw_parts_mut<T: ?Sized>(
    80021d92:	7179                	addi	sp,sp,-48
    80021d94:	f02a                	sd	a0,32(sp)
    80021d96:	f42e                	sd	a1,40(sp)
    metadata: <T as Pointee>::Metadata,
) -> *mut T {
    // SAFETY: Accessing the value from the `PtrRepr` union is safe since *const T
    // and PtrComponents<T> have the same memory layouts. Only std can make this
    // guarantee.
    unsafe { PtrRepr { components: PtrComponents { data_address, metadata } }.mut_ptr }
    80021d98:	e82a                	sd	a0,16(sp)
    80021d9a:	ec2e                	sd	a1,24(sp)
    80021d9c:	e02a                	sd	a0,0(sp)
    80021d9e:	e42e                	sd	a1,8(sp)
}
    80021da0:	6145                	addi	sp,sp,48
    80021da2:	8082                	ret

Disassembly of section .text._ZN4core3ptr8metadata18from_raw_parts_mut17hf93e4b94956554aaE:

0000000080021da4 <_ZN4core3ptr8metadata18from_raw_parts_mut17hf93e4b94956554aaE>:
pub const fn from_raw_parts_mut<T: ?Sized>(
    80021da4:	7179                	addi	sp,sp,-48
    80021da6:	f02a                	sd	a0,32(sp)
    80021da8:	f42e                	sd	a1,40(sp)
    unsafe { PtrRepr { components: PtrComponents { data_address, metadata } }.mut_ptr }
    80021daa:	e82a                	sd	a0,16(sp)
    80021dac:	ec2e                	sd	a1,24(sp)
    80021dae:	e02a                	sd	a0,0(sp)
    80021db0:	e42e                	sd	a1,8(sp)
}
    80021db2:	6145                	addi	sp,sp,48
    80021db4:	8082                	ret

Disassembly of section .text._ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hb36b3c40d6b3daa6E:

0000000080021db6 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hb36b3c40d6b3daa6E>:
    unsafe fn get_unchecked(self, slice: *const [T]) -> *const T {
    80021db6:	715d                	addi	sp,sp,-80
    80021db8:	e486                	sd	ra,72(sp)
    80021dba:	e832                	sd	a2,16(sp)
    80021dbc:	862e                	mv	a2,a1
    80021dbe:	65c2                	ld	a1,16(sp)
    80021dc0:	ec32                	sd	a2,24(sp)
    80021dc2:	862a                	mv	a2,a0
    80021dc4:	6562                	ld	a0,24(sp)
    80021dc6:	f032                	sd	a2,32(sp)
    80021dc8:	f832                	sd	a2,48(sp)
    80021dca:	fc2a                	sd	a0,56(sp)
    80021dcc:	e0ae                	sd	a1,64(sp)
        unsafe { slice.as_ptr().add(self) }
    80021dce:	ffffe097          	auipc	ra,0xffffe
    80021dd2:	aca080e7          	jalr	-1334(ra) # 8001f898 <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$6as_ptr17hcf3eefd405b9d730E>
    80021dd6:	f42a                	sd	a0,40(sp)
    80021dd8:	a009                	j	80021dda <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hb36b3c40d6b3daa6E+0x24>
    80021dda:	7582                	ld	a1,32(sp)
    80021ddc:	7522                	ld	a0,40(sp)
    80021dde:	ffffe097          	auipc	ra,0xffffe
    80021de2:	a10080e7          	jalr	-1520(ra) # 8001f7ee <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h3ef2f165a29b2365E>
    80021de6:	e42a                	sd	a0,8(sp)
    80021de8:	a009                	j	80021dea <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hb36b3c40d6b3daa6E+0x34>
    }
    80021dea:	6522                	ld	a0,8(sp)
    80021dec:	60a6                	ld	ra,72(sp)
    80021dee:	6161                	addi	sp,sp,80
    80021df0:	8082                	ret

Disassembly of section .text._ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17ha2bcc8944b7af021E:

0000000080021df2 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17ha2bcc8944b7af021E>:
    unsafe fn get_unchecked_mut(self, slice: *mut [T]) -> *mut T {
    80021df2:	715d                	addi	sp,sp,-80
    80021df4:	e486                	sd	ra,72(sp)
    80021df6:	e832                	sd	a2,16(sp)
    80021df8:	862e                	mv	a2,a1
    80021dfa:	65c2                	ld	a1,16(sp)
    80021dfc:	ec32                	sd	a2,24(sp)
    80021dfe:	862a                	mv	a2,a0
    80021e00:	6562                	ld	a0,24(sp)
    80021e02:	f032                	sd	a2,32(sp)
    80021e04:	f832                	sd	a2,48(sp)
    80021e06:	fc2a                	sd	a0,56(sp)
    80021e08:	e0ae                	sd	a1,64(sp)
        unsafe { slice.as_mut_ptr().add(self) }
    80021e0a:	00000097          	auipc	ra,0x0
    80021e0e:	e0c080e7          	jalr	-500(ra) # 80021c16 <_ZN4core3ptr7mut_ptr41_$LT$impl$u20$$BP$mut$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h6f6f43a247b8051cE>
    80021e12:	f42a                	sd	a0,40(sp)
    80021e14:	a009                	j	80021e16 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17ha2bcc8944b7af021E+0x24>
    80021e16:	7582                	ld	a1,32(sp)
    80021e18:	7522                	ld	a0,40(sp)
    80021e1a:	00000097          	auipc	ra,0x0
    80021e1e:	d4e080e7          	jalr	-690(ra) # 80021b68 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h94cbb879d32de261E>
    80021e22:	e42a                	sd	a0,8(sp)
    80021e24:	a009                	j	80021e26 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17ha2bcc8944b7af021E+0x34>
    }
    80021e26:	6522                	ld	a0,8(sp)
    80021e28:	60a6                	ld	ra,72(sp)
    80021e2a:	6161                	addi	sp,sp,80
    80021e2c:	8082                	ret

Disassembly of section .text._ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hc32ec1251c36865fE:

0000000080021e2e <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hc32ec1251c36865fE>:
    unsafe fn get_unchecked_mut(self, slice: *mut [T]) -> *mut T {
    80021e2e:	715d                	addi	sp,sp,-80
    80021e30:	e486                	sd	ra,72(sp)
    80021e32:	e832                	sd	a2,16(sp)
    80021e34:	862e                	mv	a2,a1
    80021e36:	65c2                	ld	a1,16(sp)
    80021e38:	ec32                	sd	a2,24(sp)
    80021e3a:	862a                	mv	a2,a0
    80021e3c:	6562                	ld	a0,24(sp)
    80021e3e:	f032                	sd	a2,32(sp)
    80021e40:	f832                	sd	a2,48(sp)
    80021e42:	fc2a                	sd	a0,56(sp)
    80021e44:	e0ae                	sd	a1,64(sp)
        unsafe { slice.as_mut_ptr().add(self) }
    80021e46:	ffffe097          	auipc	ra,0xffffe
    80021e4a:	95e080e7          	jalr	-1698(ra) # 8001f7a4 <_ZN4core3ptr7mut_ptr41_$LT$impl$u20$$BP$mut$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h80398cc0098c8b0fE>
    80021e4e:	f42a                	sd	a0,40(sp)
    80021e50:	a009                	j	80021e52 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hc32ec1251c36865fE+0x24>
    80021e52:	7582                	ld	a1,32(sp)
    80021e54:	7522                	ld	a0,40(sp)
    80021e56:	ffffe097          	auipc	ra,0xffffe
    80021e5a:	8a8080e7          	jalr	-1880(ra) # 8001f6fe <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1d203f00cca684c1E>
    80021e5e:	e42a                	sd	a0,8(sp)
    80021e60:	a009                	j	80021e62 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hc32ec1251c36865fE+0x34>
    }
    80021e62:	6522                	ld	a0,8(sp)
    80021e64:	60a6                	ld	ra,72(sp)
    80021e66:	6161                	addi	sp,sp,80
    80021e68:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h1d891c09167259ccE:

0000000080021e6a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h1d891c09167259ccE>:
    pub unsafe fn as_mut<'a>(self) -> Option<&'a mut T> {
    80021e6a:	7179                	addi	sp,sp,-48
    80021e6c:	f406                	sd	ra,40(sp)
    80021e6e:	e42a                	sd	a0,8(sp)
    80021e70:	f02a                	sd	a0,32(sp)
        if self.is_null() { None } else { unsafe { Some(&mut *self) } }
    80021e72:	00000097          	auipc	ra,0x0
    80021e76:	02a080e7          	jalr	42(ra) # 80021e9c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hb17ce9bdda6c1a43E>
    80021e7a:	e82a                	sd	a0,16(sp)
    80021e7c:	a009                	j	80021e7e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h1d891c09167259ccE+0x14>
    80021e7e:	6542                	ld	a0,16(sp)
    80021e80:	4581                	li	a1,0
    80021e82:	00b50663          	beq	a0,a1,80021e8e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h1d891c09167259ccE+0x24>
    80021e86:	a009                	j	80021e88 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h1d891c09167259ccE+0x1e>
    80021e88:	4501                	li	a0,0
    80021e8a:	ec2a                	sd	a0,24(sp)
    80021e8c:	a021                	j	80021e94 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h1d891c09167259ccE+0x2a>
    80021e8e:	6522                	ld	a0,8(sp)
    80021e90:	ec2a                	sd	a0,24(sp)
    80021e92:	a009                	j	80021e94 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h1d891c09167259ccE+0x2a>
    }
    80021e94:	6562                	ld	a0,24(sp)
    80021e96:	70a2                	ld	ra,40(sp)
    80021e98:	6145                	addi	sp,sp,48
    80021e9a:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hb17ce9bdda6c1a43E:

0000000080021e9c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hb17ce9bdda6c1a43E>:
    pub const fn is_null(self) -> bool {
    80021e9c:	1101                	addi	sp,sp,-32
    80021e9e:	ec06                	sd	ra,24(sp)
    80021ea0:	e82a                	sd	a0,16(sp)
        (self as *mut u8).guaranteed_eq(null_mut())
    80021ea2:	e42a                	sd	a0,8(sp)
    80021ea4:	a009                	j	80021ea6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hb17ce9bdda6c1a43E+0xa>
    80021ea6:	6522                	ld	a0,8(sp)
    80021ea8:	4581                	li	a1,0
    80021eaa:	ffffe097          	auipc	ra,0xffffe
    80021eae:	83a080e7          	jalr	-1990(ra) # 8001f6e4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$13guaranteed_eq17h568dab4191b83956E>
    80021eb2:	e02a                	sd	a0,0(sp)
    80021eb4:	a009                	j	80021eb6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hb17ce9bdda6c1a43E+0x1a>
    }
    80021eb6:	6502                	ld	a0,0(sp)
    80021eb8:	60e2                	ld	ra,24(sp)
    80021eba:	6105                	addi	sp,sp,32
    80021ebc:	8082                	ret

Disassembly of section .text._ZN4core3cmp3Ord3max17ha4f6a78e5e1bca09E:

0000000080021ebe <_ZN4core3cmp3Ord3max17ha4f6a78e5e1bca09E>:
    fn max(self, other: Self) -> Self
    80021ebe:	1101                	addi	sp,sp,-32
    80021ec0:	ec06                	sd	ra,24(sp)
    80021ec2:	e42a                	sd	a0,8(sp)
    80021ec4:	e82e                	sd	a1,16(sp)
        max_by(self, other, Ord::cmp)
    80021ec6:	00000097          	auipc	ra,0x0
    80021eca:	030080e7          	jalr	48(ra) # 80021ef6 <_ZN4core3cmp6max_by17h5ce2d208ffcd1be0E>
    80021ece:	e02a                	sd	a0,0(sp)
    80021ed0:	a009                	j	80021ed2 <_ZN4core3cmp3Ord3max17ha4f6a78e5e1bca09E+0x14>
    }
    80021ed2:	6502                	ld	a0,0(sp)
    80021ed4:	60e2                	ld	ra,24(sp)
    80021ed6:	6105                	addi	sp,sp,32
    80021ed8:	8082                	ret

Disassembly of section .text._ZN4core3cmp3max17h3dc8da765fcdebd4E:

0000000080021eda <_ZN4core3cmp3max17h3dc8da765fcdebd4E>:
pub fn max<T: Ord>(v1: T, v2: T) -> T {
    80021eda:	1101                	addi	sp,sp,-32
    80021edc:	ec06                	sd	ra,24(sp)
    80021ede:	e42a                	sd	a0,8(sp)
    80021ee0:	e82e                	sd	a1,16(sp)
    v1.max(v2)
    80021ee2:	00000097          	auipc	ra,0x0
    80021ee6:	fdc080e7          	jalr	-36(ra) # 80021ebe <_ZN4core3cmp3Ord3max17ha4f6a78e5e1bca09E>
    80021eea:	e02a                	sd	a0,0(sp)
    80021eec:	a009                	j	80021eee <_ZN4core3cmp3max17h3dc8da765fcdebd4E+0x14>
}
    80021eee:	6502                	ld	a0,0(sp)
    80021ef0:	60e2                	ld	ra,24(sp)
    80021ef2:	6105                	addi	sp,sp,32
    80021ef4:	8082                	ret

Disassembly of section .text._ZN4core3cmp6max_by17h5ce2d208ffcd1be0E:

0000000080021ef6 <_ZN4core3cmp6max_by17h5ce2d208ffcd1be0E>:
pub fn max_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
    80021ef6:	715d                	addi	sp,sp,-80
    80021ef8:	e486                	sd	ra,72(sp)
    80021efa:	e42a                	sd	a0,8(sp)
    80021efc:	e82e                	sd	a1,16(sp)
    80021efe:	4505                	li	a0,1
    match compare(&v1, &v2) {
    80021f00:	02a10fa3          	sb	a0,63(sp)
    80021f04:	02a10f23          	sb	a0,62(sp)
    80021f08:	0028                	addi	a0,sp,8
    80021f0a:	f42a                	sd	a0,40(sp)
    80021f0c:	080c                	addi	a1,sp,16
    80021f0e:	f82e                	sd	a1,48(sp)
    80021f10:	ffffe097          	auipc	ra,0xffffe
    80021f14:	ad2080e7          	jalr	-1326(ra) # 8001f9e2 <_ZN4core3ops8function6FnOnce9call_once17h199d3571a582934bE>
    80021f18:	02a103a3          	sb	a0,39(sp)
    80021f1c:	a009                	j	80021f1e <_ZN4core3cmp6max_by17h5ce2d208ffcd1be0E+0x28>
        Ordering::Less | Ordering::Equal => v2,
    80021f1e:	02710503          	lb	a0,39(sp)
    80021f22:	0505                	addi	a0,a0,1
    80021f24:	4589                	li	a1,2
    80021f26:	00b56a63          	bltu	a0,a1,80021f3a <_ZN4core3cmp6max_by17h5ce2d208ffcd1be0E+0x44>
    80021f2a:	a009                	j	80021f2c <_ZN4core3cmp6max_by17h5ce2d208ffcd1be0E+0x36>
    80021f2c:	4501                	li	a0,0
        Ordering::Greater => v1,
    80021f2e:	02a10fa3          	sb	a0,63(sp)
    80021f32:	6522                	ld	a0,8(sp)
    80021f34:	ec2a                	sd	a0,24(sp)
    match compare(&v1, &v2) {
    80021f36:	a801                	j	80021f46 <_ZN4core3cmp6max_by17h5ce2d208ffcd1be0E+0x50>
    80021f38:	0000                	unimp
    80021f3a:	4501                	li	a0,0
        Ordering::Less | Ordering::Equal => v2,
    80021f3c:	02a10f23          	sb	a0,62(sp)
    80021f40:	6542                	ld	a0,16(sp)
    80021f42:	ec2a                	sd	a0,24(sp)
    match compare(&v1, &v2) {
    80021f44:	a009                	j	80021f46 <_ZN4core3cmp6max_by17h5ce2d208ffcd1be0E+0x50>
}
    80021f46:	03e14503          	lbu	a0,62(sp)
    80021f4a:	8905                	andi	a0,a0,1
    80021f4c:	e919                	bnez	a0,80021f62 <_ZN4core3cmp6max_by17h5ce2d208ffcd1be0E+0x6c>
    80021f4e:	a009                	j	80021f50 <_ZN4core3cmp6max_by17h5ce2d208ffcd1be0E+0x5a>
    80021f50:	03f14503          	lbu	a0,63(sp)
    80021f54:	8905                	andi	a0,a0,1
    80021f56:	e519                	bnez	a0,80021f64 <_ZN4core3cmp6max_by17h5ce2d208ffcd1be0E+0x6e>
    80021f58:	a009                	j	80021f5a <_ZN4core3cmp6max_by17h5ce2d208ffcd1be0E+0x64>
    80021f5a:	6562                	ld	a0,24(sp)
    80021f5c:	60a6                	ld	ra,72(sp)
    80021f5e:	6161                	addi	sp,sp,80
    80021f60:	8082                	ret
    80021f62:	b7fd                	j	80021f50 <_ZN4core3cmp6max_by17h5ce2d208ffcd1be0E+0x5a>
    80021f64:	bfdd                	j	80021f5a <_ZN4core3cmp6max_by17h5ce2d208ffcd1be0E+0x64>

Disassembly of section .text._ZN4core4sync6atomic11atomic_load17h7c28be5fa6ab6ea0E:

0000000080021f66 <_ZN4core4sync6atomic11atomic_load17h7c28be5fa6ab6ea0E>:
unsafe fn atomic_load<T: Copy>(dst: *const T, order: Ordering) -> T {
    80021f66:	1101                	addi	sp,sp,-32
    80021f68:	e02a                	sd	a0,0(sp)
    80021f6a:	00b10b23          	sb	a1,22(sp)
    80021f6e:	ec2a                	sd	a0,24(sp)
            Acquire => intrinsics::atomic_load_acq(dst),
    80021f70:	0ff5f513          	andi	a0,a1,255
    80021f74:	e42a                	sd	a0,8(sp)
    80021f76:	6522                	ld	a0,8(sp)
    80021f78:	050e                	slli	a0,a0,0x3

0000000080021f7a <.LBB1_12>:
    80021f7a:	0000a597          	auipc	a1,0xa
    80021f7e:	69658593          	addi	a1,a1,1686 # 8002c610 <.LJTI1_0>
    80021f82:	952e                	add	a0,a0,a1
    80021f84:	6108                	ld	a0,0(a0)
    80021f86:	8502                	jr	a0

0000000080021f88 <.LBB1_13>:
            AcqRel => panic!("there is no such thing as an acquire/release load"),
    80021f88:	0000a517          	auipc	a0,0xa
    80021f8c:	6b050513          	addi	a0,a0,1712 # 8002c638 <.L__unnamed_1>

0000000080021f90 <.LBB1_14>:
    80021f90:	0000a617          	auipc	a2,0xa
    80021f94:	75860613          	addi	a2,a2,1880 # 8002c6e8 <.L__unnamed_2>
    80021f98:	03100593          	li	a1,49
    80021f9c:	00000097          	auipc	ra,0x0
    80021fa0:	2da080e7          	jalr	730(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80021fa4:	0000                	unimp
	...

0000000080021fa8 <.LBB1_4>:
            Acquire => intrinsics::atomic_load_acq(dst),
    80021fa8:	6502                	ld	a0,0(sp)
    80021faa:	00050503          	lb	a0,0(a0)
    80021fae:	0230000f          	fence	r,rw
    80021fb2:	00a10ba3          	sb	a0,23(sp)
    80021fb6:	a009                	j	80021fb8 <.LBB1_4+0x10>
        match order {
    80021fb8:	a091                	j	80021ffc <.LBB1_16+0x16>

0000000080021fba <.LBB1_6>:
            Relaxed => intrinsics::atomic_load_relaxed(dst),
    80021fba:	6502                	ld	a0,0(sp)
    80021fbc:	00050503          	lb	a0,0(a0)
    80021fc0:	00a10ba3          	sb	a0,23(sp)
    80021fc4:	a009                	j	80021fc6 <.LBB1_6+0xc>
        match order {
    80021fc6:	a81d                	j	80021ffc <.LBB1_16+0x16>

0000000080021fc8 <.LBB1_8>:
            SeqCst => intrinsics::atomic_load(dst),
    80021fc8:	6502                	ld	a0,0(sp)
    80021fca:	0330000f          	fence	rw,rw
    80021fce:	00050503          	lb	a0,0(a0)
    80021fd2:	0230000f          	fence	r,rw
    80021fd6:	00a10ba3          	sb	a0,23(sp)
    80021fda:	a009                	j	80021fdc <.LBB1_8+0x14>
        match order {
    80021fdc:	a005                	j	80021ffc <.LBB1_16+0x16>

0000000080021fde <.LBB1_10>:
            Release => panic!("there is no such thing as a release load"),
    80021fde:	0000a517          	auipc	a0,0xa
    80021fe2:	72250513          	addi	a0,a0,1826 # 8002c700 <.L__unnamed_3>

0000000080021fe6 <.LBB1_16>:
    80021fe6:	0000a617          	auipc	a2,0xa
    80021fea:	74260613          	addi	a2,a2,1858 # 8002c728 <.L__unnamed_4>
    80021fee:	02800593          	li	a1,40
    80021ff2:	00000097          	auipc	ra,0x0
    80021ff6:	284080e7          	jalr	644(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80021ffa:	0000                	unimp
}
    80021ffc:	01710503          	lb	a0,23(sp)
    80022000:	6105                	addi	sp,sp,32
    80022002:	8082                	ret

Disassembly of section .text._ZN4core3fmt10ArgumentV13new17ha67f1954b9155e6dE:

0000000080022004 <_ZN4core3fmt10ArgumentV13new17ha67f1954b9155e6dE>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
    80022004:	715d                	addi	sp,sp,-80
    80022006:	e82a                	sd	a0,16(sp)
    80022008:	f82a                	sd	a0,48(sp)
    8002200a:	fc2e                	sd	a1,56(sp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
    8002200c:	e0ae                	sd	a1,64(sp)
    8002200e:	ec2e                	sd	a1,24(sp)
    80022010:	a009                	j	80022012 <_ZN4core3fmt10ArgumentV13new17ha67f1954b9155e6dE+0xe>
    80022012:	6542                	ld	a0,16(sp)
    80022014:	e4aa                	sd	a0,72(sp)
    80022016:	e42a                	sd	a0,8(sp)
    80022018:	a009                	j	8002201a <_ZN4core3fmt10ArgumentV13new17ha67f1954b9155e6dE+0x16>
    8002201a:	65e2                	ld	a1,24(sp)
    8002201c:	6522                	ld	a0,8(sp)
    8002201e:	f02a                	sd	a0,32(sp)
    80022020:	f42e                	sd	a1,40(sp)
    }
    80022022:	6161                	addi	sp,sp,80
    80022024:	8082                	ret

Disassembly of section .text._ZN4core4cell19UnsafeCell$LT$T$GT$3get17h34ebeaa57b5c7248E:

0000000080022026 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h34ebeaa57b5c7248E>:
    pub const fn get(&self) -> *mut T {
    80022026:	1141                	addi	sp,sp,-16
    80022028:	e42a                	sd	a0,8(sp)
    }
    8002202a:	0141                	addi	sp,sp,16
    8002202c:	8082                	ret

Disassembly of section .text._ZN4core4cell19UnsafeCell$LT$T$GT$3new17h3aa2f2534c029263E:

000000008002202e <_ZN4core4cell19UnsafeCell$LT$T$GT$3new17h3aa2f2534c029263E>:
    pub const fn new(value: T) -> UnsafeCell<T> {
    8002202e:	1141                	addi	sp,sp,-16
    80022030:	00a107a3          	sb	a0,15(sp)
        UnsafeCell { value }
    80022034:	00a10723          	sb	a0,14(sp)
    }
    80022038:	0141                	addi	sp,sp,16
    8002203a:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$13guaranteed_eq17h32ea8c99c0b8220dE:

000000008002203c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$13guaranteed_eq17h32ea8c99c0b8220dE>:
    pub const fn guaranteed_eq(self, other: *mut T) -> bool
    8002203c:	1101                	addi	sp,sp,-32
    8002203e:	e42a                	sd	a0,8(sp)
    80022040:	e82e                	sd	a1,16(sp)
        intrinsics::ptr_guaranteed_eq(self as *const _, other as *const _)
    80022042:	8d2d                	xor	a0,a0,a1
    80022044:	00153513          	seqz	a0,a0
    80022048:	e02a                	sd	a0,0(sp)
    8002204a:	00a10fa3          	sb	a0,31(sp)
    8002204e:	a009                	j	80022050 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$13guaranteed_eq17h32ea8c99c0b8220dE+0x14>
    }
    80022050:	6502                	ld	a0,0(sp)
    80022052:	6105                	addi	sp,sp,32
    80022054:	8082                	ret

Disassembly of section .text._ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$13guaranteed_eq17h0ce622e77376dc6cE:

0000000080022056 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$13guaranteed_eq17h0ce622e77376dc6cE>:
    pub const fn guaranteed_eq(self, other: *const T) -> bool
    80022056:	1101                	addi	sp,sp,-32
    80022058:	e42a                	sd	a0,8(sp)
    8002205a:	e82e                	sd	a1,16(sp)
        intrinsics::ptr_guaranteed_eq(self, other)
    8002205c:	8d2d                	xor	a0,a0,a1
    8002205e:	00153513          	seqz	a0,a0
    80022062:	e02a                	sd	a0,0(sp)
    80022064:	00a10fa3          	sb	a0,31(sp)
    80022068:	a009                	j	8002206a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$13guaranteed_eq17h0ce622e77376dc6cE+0x14>
    }
    8002206a:	6502                	ld	a0,0(sp)
    8002206c:	6105                	addi	sp,sp,32
    8002206e:	8082                	ret

Disassembly of section .text.unlikely._ZN5alloc5alloc18handle_alloc_error17haa1b1c0a80642c5aE:

0000000080022070 <_ZN5alloc5alloc18handle_alloc_error17haa1b1c0a80642c5aE>:
    80022070:	1141                	addi	sp,sp,-16
    80022072:	e406                	sd	ra,8(sp)
    80022074:	ffffd097          	auipc	ra,0xffffd
    80022078:	606080e7          	jalr	1542(ra) # 8001f67a <__rust_alloc_error_handler>
	...

Disassembly of section .text.__rg_oom:

000000008002207e <__rg_oom>:
    8002207e:	1141                	addi	sp,sp,-16
    80022080:	e406                	sd	ra,8(sp)
    80022082:	fffea097          	auipc	ra,0xfffea
    80022086:	722080e7          	jalr	1826(ra) # 8000c7a4 <rust_oom>
	...

Disassembly of section .text._ZN5alloc7raw_vec17capacity_overflow17hae1c560931d103e4E:

000000008002208c <_ZN5alloc7raw_vec17capacity_overflow17hae1c560931d103e4E>:
    8002208c:	1141                	addi	sp,sp,-16
    8002208e:	e406                	sd	ra,8(sp)

0000000080022090 <.LBB24_1>:
    80022090:	0000a517          	auipc	a0,0xa
    80022094:	6cc50513          	addi	a0,a0,1740 # 8002c75c <.Lanon.44beac3b33b5e076e135e766d0ea4256.19>

0000000080022098 <.LBB24_2>:
    80022098:	0000a617          	auipc	a2,0xa
    8002209c:	6d860613          	addi	a2,a2,1752 # 8002c770 <.Lanon.44beac3b33b5e076e135e766d0ea4256.20>
    800220a0:	45c5                	li	a1,17
    800220a2:	00000097          	auipc	ra,0x0
    800220a6:	1d4080e7          	jalr	468(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN4core4cell19UnsafeCell$LT$T$GT$3get17hcdc438fb74b7ecc8E:

00000000800220ac <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17hcdc438fb74b7ecc8E>:
    pub const fn get(&self) -> *mut T {
    800220ac:	1141                	addi	sp,sp,-16
    800220ae:	e42a                	sd	a0,8(sp)
    }
    800220b0:	0141                	addi	sp,sp,16
    800220b2:	8082                	ret

Disassembly of section .text._ZN4core3ops8function6FnOnce9call_once17h6147212214d3120cE:

00000000800220b4 <_ZN4core3ops8function6FnOnce9call_once17h6147212214d3120cE>:
    800220b4:	6108                	ld	a0,0(a0)
    800220b6:	a001                	j	800220b6 <_ZN4core3ops8function6FnOnce9call_once17h6147212214d3120cE+0x2>

Disassembly of section .text._ZN4core3ptr102drop_in_place$LT$$RF$core..iter..adapters..copied..Copied$LT$core..slice..iter..Iter$LT$u8$GT$$GT$$GT$17hedf53d70a7e54828E:

00000000800220b8 <_ZN4core3ptr102drop_in_place$LT$$RF$core..iter..adapters..copied..Copied$LT$core..slice..iter..Iter$LT$u8$GT$$GT$$GT$17hedf53d70a7e54828E>:
    800220b8:	8082                	ret

Disassembly of section .text._ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17hafa23fe214721e38E:

00000000800220ba <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17hafa23fe214721e38E>:
    800220ba:	715d                	addi	sp,sp,-80
    800220bc:	e486                	sd	ra,72(sp)
    800220be:	e0a2                	sd	s0,64(sp)
    800220c0:	fc26                	sd	s1,56(sp)
    800220c2:	842e                	mv	s0,a1
    800220c4:	84aa                	mv	s1,a0
    800220c6:	00002097          	auipc	ra,0x2
    800220ca:	3e2080e7          	jalr	994(ra) # 800244a8 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h46dfaf96577b17ecE>
    800220ce:	e51d                	bnez	a0,800220fc <.LBB78_5+0x18>
    800220d0:	7008                	ld	a0,32(s0)
    800220d2:	740c                	ld	a1,40(s0)

00000000800220d4 <.LBB78_4>:
    800220d4:	0000a617          	auipc	a2,0xa
    800220d8:	71c60613          	addi	a2,a2,1820 # 8002c7f0 <.Lanon.f077182aff5f58a5660f14b1290425e3.134>
    800220dc:	e432                	sd	a2,8(sp)
    800220de:	4605                	li	a2,1
    800220e0:	e832                	sd	a2,16(sp)
    800220e2:	ec02                	sd	zero,24(sp)

00000000800220e4 <.LBB78_5>:
    800220e4:	0000a617          	auipc	a2,0xa
    800220e8:	70460613          	addi	a2,a2,1796 # 8002c7e8 <.Lanon.f077182aff5f58a5660f14b1290425e3.133>
    800220ec:	f432                	sd	a2,40(sp)
    800220ee:	f802                	sd	zero,48(sp)
    800220f0:	0030                	addi	a2,sp,8
    800220f2:	00001097          	auipc	ra,0x1
    800220f6:	9e6080e7          	jalr	-1562(ra) # 80022ad8 <_ZN4core3fmt5write17hf87af17b3ec995a2E>
    800220fa:	c519                	beqz	a0,80022108 <.LBB78_5+0x24>
    800220fc:	4505                	li	a0,1
    800220fe:	74e2                	ld	s1,56(sp)
    80022100:	6406                	ld	s0,64(sp)
    80022102:	60a6                	ld	ra,72(sp)
    80022104:	6161                	addi	sp,sp,80
    80022106:	8082                	ret
    80022108:	00848513          	addi	a0,s1,8
    8002210c:	85a2                	mv	a1,s0
    8002210e:	74e2                	ld	s1,56(sp)
    80022110:	6406                	ld	s0,64(sp)
    80022112:	60a6                	ld	ra,72(sp)
    80022114:	6161                	addi	sp,sp,80
    80022116:	00002317          	auipc	t1,0x2
    8002211a:	39230067          	jr	914(t1) # 800244a8 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h46dfaf96577b17ecE>

Disassembly of section .text._ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h43d5b99303c08f4dE:

000000008002211e <_ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h43d5b99303c08f4dE>:
    8002211e:	032d3537          	lui	a0,0x32d3
    80022122:	2895051b          	addiw	a0,a0,649
    80022126:	0532                	slli	a0,a0,0xc
    80022128:	48950513          	addi	a0,a0,1161 # 32d3489 <.Lline_table_start0+0x329c987>
    8002212c:	0532                	slli	a0,a0,0xc
    8002212e:	69f50513          	addi	a0,a0,1695
    80022132:	0532                	slli	a0,a0,0xc
    80022134:	85850513          	addi	a0,a0,-1960
    80022138:	8082                	ret

Disassembly of section .text.unlikely._ZN4core6option13expect_failed17h0edd1e4bb5304a50E:

000000008002213a <_ZN4core6option13expect_failed17h0edd1e4bb5304a50E>:
    8002213a:	711d                	addi	sp,sp,-96
    8002213c:	ec86                	sd	ra,88(sp)
    8002213e:	e42a                	sd	a0,8(sp)
    80022140:	e82e                	sd	a1,16(sp)
    80022142:	0028                	addi	a0,sp,8
    80022144:	e4aa                	sd	a0,72(sp)

0000000080022146 <.LBB119_1>:
    80022146:	00003517          	auipc	a0,0x3
    8002214a:	c1450513          	addi	a0,a0,-1004 # 80024d5a <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h65c6410ca8a4d3e4E>
    8002214e:	e8aa                	sd	a0,80(sp)

0000000080022150 <.LBB119_2>:
    80022150:	0000a517          	auipc	a0,0xa
    80022154:	6e050513          	addi	a0,a0,1760 # 8002c830 <.Lanon.f077182aff5f58a5660f14b1290425e3.169>
    80022158:	ec2a                	sd	a0,24(sp)
    8002215a:	4505                	li	a0,1
    8002215c:	f02a                	sd	a0,32(sp)
    8002215e:	f402                	sd	zero,40(sp)
    80022160:	00ac                	addi	a1,sp,72
    80022162:	fc2e                	sd	a1,56(sp)
    80022164:	e0aa                	sd	a0,64(sp)
    80022166:	0828                	addi	a0,sp,24
    80022168:	85b2                	mv	a1,a2
    8002216a:	00000097          	auipc	ra,0x0
    8002216e:	178080e7          	jalr	376(ra) # 800222e2 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
	...

Disassembly of section .text._ZN61_$LT$core..panic..PanicInfo$u20$as$u20$core..fmt..Display$GT$3fmt17h17913560c4fcc8feE:

0000000080022174 <_ZN61_$LT$core..panic..PanicInfo$u20$as$u20$core..fmt..Display$GT$3fmt17h17913560c4fcc8feE>:
    80022174:	7175                	addi	sp,sp,-144
    80022176:	e506                	sd	ra,136(sp)
    80022178:	e122                	sd	s0,128(sp)
    8002217a:	fca6                	sd	s1,120(sp)
    8002217c:	f8ca                	sd	s2,112(sp)
    8002217e:	f4ce                	sd	s3,104(sp)
    80022180:	0285b983          	ld	s3,40(a1)
    80022184:	7184                	ld	s1,32(a1)
    80022186:	0189b683          	ld	a3,24(s3)
    8002218a:	892a                	mv	s2,a0

000000008002218c <.LBB123_8>:
    8002218c:	0000a597          	auipc	a1,0xa
    80022190:	6d458593          	addi	a1,a1,1748 # 8002c860 <.Lanon.f077182aff5f58a5660f14b1290425e3.171>
    80022194:	4631                	li	a2,12
    80022196:	8526                	mv	a0,s1
    80022198:	9682                	jalr	a3
    8002219a:	4405                	li	s0,1
    8002219c:	e569                	bnez	a0,80022266 <.LBB123_14+0x26>
    8002219e:	01093503          	ld	a0,16(s2)
    800221a2:	c909                	beqz	a0,800221b4 <.LBB123_9+0xa>
    800221a4:	e02a                	sd	a0,0(sp)
    800221a6:	850a                	mv	a0,sp
    800221a8:	e42a                	sd	a0,8(sp)

00000000800221aa <.LBB123_9>:
    800221aa:	00003517          	auipc	a0,0x3
    800221ae:	bc050513          	addi	a0,a0,-1088 # 80024d6a <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h78c3d125c3c6a2c3E>
    800221b2:	a835                	j	800221ee <.LBB123_10+0x8>
    800221b4:	00893503          	ld	a0,8(s2)
    800221b8:	00093403          	ld	s0,0(s2)
    800221bc:	6d0c                	ld	a1,24(a0)
    800221be:	8522                	mv	a0,s0
    800221c0:	9582                	jalr	a1
    800221c2:	007ef5b7          	lui	a1,0x7ef
    800221c6:	2a95859b          	addiw	a1,a1,681
    800221ca:	05ba                	slli	a1,a1,0xe
    800221cc:	7bb58593          	addi	a1,a1,1979 # 7ef7bb <.Lline_table_start0+0x7b8cb9>
    800221d0:	05b2                	slli	a1,a1,0xc
    800221d2:	31f58593          	addi	a1,a1,799
    800221d6:	05ba                	slli	a1,a1,0xe
    800221d8:	cf458593          	addi	a1,a1,-780
    800221dc:	02b51e63          	bne	a0,a1,80022218 <.LBB123_11+0x28>
    800221e0:	e022                	sd	s0,0(sp)
    800221e2:	850a                	mv	a0,sp
    800221e4:	e42a                	sd	a0,8(sp)

00000000800221e6 <.LBB123_10>:
    800221e6:	00003517          	auipc	a0,0x3
    800221ea:	bb650513          	addi	a0,a0,-1098 # 80024d9c <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h874d6ce7f8524becE>
    800221ee:	e82a                	sd	a0,16(sp)

00000000800221f0 <.LBB123_11>:
    800221f0:	0000a517          	auipc	a0,0xa
    800221f4:	68050513          	addi	a0,a0,1664 # 8002c870 <.Lanon.f077182aff5f58a5660f14b1290425e3.174>
    800221f8:	fc2a                	sd	a0,56(sp)
    800221fa:	4509                	li	a0,2
    800221fc:	e0aa                	sd	a0,64(sp)
    800221fe:	e482                	sd	zero,72(sp)
    80022200:	0028                	addi	a0,sp,8
    80022202:	ecaa                	sd	a0,88(sp)
    80022204:	4405                	li	s0,1
    80022206:	f0a2                	sd	s0,96(sp)
    80022208:	1830                	addi	a2,sp,56
    8002220a:	8526                	mv	a0,s1
    8002220c:	85ce                	mv	a1,s3
    8002220e:	00001097          	auipc	ra,0x1
    80022212:	8ca080e7          	jalr	-1846(ra) # 80022ad8 <_ZN4core3fmt5write17hf87af17b3ec995a2E>
    80022216:	e921                	bnez	a0,80022266 <.LBB123_14+0x26>
    80022218:	01893503          	ld	a0,24(s2)
    8002221c:	01050593          	addi	a1,a0,16
    80022220:	01450613          	addi	a2,a0,20
    80022224:	e42a                	sd	a0,8(sp)

0000000080022226 <.LBB123_12>:
    80022226:	00003517          	auipc	a0,0x3
    8002222a:	b3450513          	addi	a0,a0,-1228 # 80024d5a <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h65c6410ca8a4d3e4E>
    8002222e:	e82a                	sd	a0,16(sp)
    80022230:	ec2e                	sd	a1,24(sp)

0000000080022232 <.LBB123_13>:
    80022232:	00002517          	auipc	a0,0x2
    80022236:	51450513          	addi	a0,a0,1300 # 80024746 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17h19c6429b08a072b1E>
    8002223a:	f02a                	sd	a0,32(sp)
    8002223c:	f432                	sd	a2,40(sp)
    8002223e:	f82a                	sd	a0,48(sp)

0000000080022240 <.LBB123_14>:
    80022240:	0000a517          	auipc	a0,0xa
    80022244:	65850513          	addi	a0,a0,1624 # 8002c898 <.Lanon.f077182aff5f58a5660f14b1290425e3.176>
    80022248:	fc2a                	sd	a0,56(sp)
    8002224a:	450d                	li	a0,3
    8002224c:	e0aa                	sd	a0,64(sp)
    8002224e:	e482                	sd	zero,72(sp)
    80022250:	002c                	addi	a1,sp,8
    80022252:	ecae                	sd	a1,88(sp)
    80022254:	f0aa                	sd	a0,96(sp)
    80022256:	1830                	addi	a2,sp,56
    80022258:	8526                	mv	a0,s1
    8002225a:	85ce                	mv	a1,s3
    8002225c:	00001097          	auipc	ra,0x1
    80022260:	87c080e7          	jalr	-1924(ra) # 80022ad8 <_ZN4core3fmt5write17hf87af17b3ec995a2E>
    80022264:	842a                	mv	s0,a0
    80022266:	8522                	mv	a0,s0
    80022268:	79a6                	ld	s3,104(sp)
    8002226a:	7946                	ld	s2,112(sp)
    8002226c:	74e6                	ld	s1,120(sp)
    8002226e:	640a                	ld	s0,128(sp)
    80022270:	60aa                	ld	ra,136(sp)
    80022272:	6149                	addi	sp,sp,144
    80022274:	8082                	ret

Disassembly of section .text.unlikely._ZN4core9panicking5panic17h153a4ce3c60ede6bE:

0000000080022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>:
    80022276:	715d                	addi	sp,sp,-80
    80022278:	e486                	sd	ra,72(sp)
    8002227a:	fc2a                	sd	a0,56(sp)
    8002227c:	e0ae                	sd	a1,64(sp)
    8002227e:	1828                	addi	a0,sp,56
    80022280:	e42a                	sd	a0,8(sp)
    80022282:	4505                	li	a0,1
    80022284:	e82a                	sd	a0,16(sp)
    80022286:	ec02                	sd	zero,24(sp)

0000000080022288 <.LBB130_1>:
    80022288:	0000a517          	auipc	a0,0xa
    8002228c:	56050513          	addi	a0,a0,1376 # 8002c7e8 <.Lanon.f077182aff5f58a5660f14b1290425e3.133>
    80022290:	f42a                	sd	a0,40(sp)
    80022292:	f802                	sd	zero,48(sp)
    80022294:	0028                	addi	a0,sp,8
    80022296:	85b2                	mv	a1,a2
    80022298:	00000097          	auipc	ra,0x0
    8002229c:	04a080e7          	jalr	74(ra) # 800222e2 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
	...

Disassembly of section .text.unlikely._ZN4core9panicking18panic_bounds_check17h8e071db613335003E:

00000000800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>:
    800222a2:	7159                	addi	sp,sp,-112
    800222a4:	f486                	sd	ra,104(sp)
    800222a6:	e42a                	sd	a0,8(sp)
    800222a8:	e82e                	sd	a1,16(sp)
    800222aa:	0808                	addi	a0,sp,16
    800222ac:	e4aa                	sd	a0,72(sp)

00000000800222ae <.LBB131_1>:
    800222ae:	00002517          	auipc	a0,0x2
    800222b2:	65450513          	addi	a0,a0,1620 # 80024902 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h9c6c4af1578f7c29E>
    800222b6:	e8aa                	sd	a0,80(sp)
    800222b8:	002c                	addi	a1,sp,8
    800222ba:	ecae                	sd	a1,88(sp)
    800222bc:	f0aa                	sd	a0,96(sp)

00000000800222be <.LBB131_2>:
    800222be:	0000a517          	auipc	a0,0xa
    800222c2:	62250513          	addi	a0,a0,1570 # 8002c8e0 <.Lanon.f077182aff5f58a5660f14b1290425e3.179>
    800222c6:	ec2a                	sd	a0,24(sp)
    800222c8:	4509                	li	a0,2
    800222ca:	f02a                	sd	a0,32(sp)
    800222cc:	f402                	sd	zero,40(sp)
    800222ce:	00ac                	addi	a1,sp,72
    800222d0:	fc2e                	sd	a1,56(sp)
    800222d2:	e0aa                	sd	a0,64(sp)
    800222d4:	0828                	addi	a0,sp,24
    800222d6:	85b2                	mv	a1,a2
    800222d8:	00000097          	auipc	ra,0x0
    800222dc:	00a080e7          	jalr	10(ra) # 800222e2 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
	...

Disassembly of section .text.unlikely._ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E:

00000000800222e2 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>:
    800222e2:	7179                	addi	sp,sp,-48
    800222e4:	f406                	sd	ra,40(sp)

00000000800222e6 <.LBB132_1>:
    800222e6:	0000a617          	auipc	a2,0xa
    800222ea:	50260613          	addi	a2,a2,1282 # 8002c7e8 <.Lanon.f077182aff5f58a5660f14b1290425e3.133>
    800222ee:	e432                	sd	a2,8(sp)

00000000800222f0 <.LBB132_2>:
    800222f0:	0000a617          	auipc	a2,0xa
    800222f4:	55060613          	addi	a2,a2,1360 # 8002c840 <.Lanon.f077182aff5f58a5660f14b1290425e3.170>
    800222f8:	e832                	sd	a2,16(sp)
    800222fa:	ec2a                	sd	a0,24(sp)
    800222fc:	f02e                	sd	a1,32(sp)
    800222fe:	0028                	addi	a0,sp,8
    80022300:	ffffc097          	auipc	ra,0xffffc
    80022304:	ac4080e7          	jalr	-1340(ra) # 8001ddc4 <rust_begin_unwind>
	...

Disassembly of section .text._ZN4core9panicking19assert_failed_inner17h4615d2e87cda8e50E:

000000008002230a <_ZN4core9panicking19assert_failed_inner17h4615d2e87cda8e50E>:
    8002230a:	7115                	addi	sp,sp,-224
    8002230c:	ed86                	sd	ra,216(sp)
    8002230e:	e42e                	sd	a1,8(sp)
    80022310:	e832                	sd	a2,16(sp)
    80022312:	ec36                	sd	a3,24(sp)
    80022314:	0ff57513          	andi	a0,a0,255
    80022318:	f03a                	sd	a4,32(sp)
    8002231a:	c909                	beqz	a0,8002232c <.LBB135_10>
    8002231c:	4585                	li	a1,1
    8002231e:	04b51d63          	bne	a0,a1,80022378 <.LBB135_14>

0000000080022322 <.LBB135_9>:
    80022322:	0000a517          	auipc	a0,0xa
    80022326:	5e550513          	addi	a0,a0,1509 # 8002c907 <.Lanon.f077182aff5f58a5660f14b1290425e3.182>
    8002232a:	a029                	j	80022334 <.LBB135_10+0x8>

000000008002232c <.LBB135_10>:
    8002232c:	0000a517          	auipc	a0,0xa
    80022330:	5dd50513          	addi	a0,a0,1501 # 8002c909 <.Lanon.f077182aff5f58a5660f14b1290425e3.183>
    80022334:	f42a                	sd	a0,40(sp)
    80022336:	4509                	li	a0,2
    80022338:	638c                	ld	a1,0(a5)
    8002233a:	f82a                	sd	a0,48(sp)
    8002233c:	e5b9                	bnez	a1,8002238a <.LBB135_14+0x12>
    8002233e:	1028                	addi	a0,sp,40
    80022340:	f4aa                	sd	a0,104(sp)

0000000080022342 <.LBB135_11>:
    80022342:	00003517          	auipc	a0,0x3
    80022346:	a1850513          	addi	a0,a0,-1512 # 80024d5a <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h65c6410ca8a4d3e4E>
    8002234a:	f8aa                	sd	a0,112(sp)
    8002234c:	0028                	addi	a0,sp,8
    8002234e:	fcaa                	sd	a0,120(sp)

0000000080022350 <.LBB135_12>:
    80022350:	00003517          	auipc	a0,0x3
    80022354:	90050513          	addi	a0,a0,-1792 # 80024c50 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h729ad47dd83507edE>
    80022358:	e12a                	sd	a0,128(sp)
    8002235a:	082c                	addi	a1,sp,24
    8002235c:	e52e                	sd	a1,136(sp)
    8002235e:	e92a                	sd	a0,144(sp)

0000000080022360 <.LBB135_13>:
    80022360:	0000a517          	auipc	a0,0xa
    80022364:	63050513          	addi	a0,a0,1584 # 8002c990 <.Lanon.f077182aff5f58a5660f14b1290425e3.190>
    80022368:	f52a                	sd	a0,168(sp)
    8002236a:	4511                	li	a0,4
    8002236c:	f92a                	sd	a0,176(sp)
    8002236e:	fd02                	sd	zero,184(sp)
    80022370:	10a8                	addi	a0,sp,104
    80022372:	e5aa                	sd	a0,200(sp)
    80022374:	450d                	li	a0,3
    80022376:	a885                	j	800223e6 <.LBB135_18+0x14>

0000000080022378 <.LBB135_14>:
    80022378:	0000a517          	auipc	a0,0xa
    8002237c:	58850513          	addi	a0,a0,1416 # 8002c900 <.Lanon.f077182aff5f58a5660f14b1290425e3.181>
    80022380:	f42a                	sd	a0,40(sp)
    80022382:	451d                	li	a0,7
    80022384:	638c                	ld	a1,0(a5)
    80022386:	f82a                	sd	a0,48(sp)
    80022388:	d9dd                	beqz	a1,8002233e <.LBB135_10+0x12>
    8002238a:	7788                	ld	a0,40(a5)
    8002238c:	738c                	ld	a1,32(a5)
    8002238e:	f0aa                	sd	a0,96(sp)
    80022390:	ecae                	sd	a1,88(sp)
    80022392:	6f88                	ld	a0,24(a5)
    80022394:	6b8c                	ld	a1,16(a5)
    80022396:	6790                	ld	a2,8(a5)
    80022398:	6394                	ld	a3,0(a5)
    8002239a:	e8aa                	sd	a0,80(sp)
    8002239c:	e4ae                	sd	a1,72(sp)
    8002239e:	e0b2                	sd	a2,64(sp)
    800223a0:	fc36                	sd	a3,56(sp)
    800223a2:	1028                	addi	a0,sp,40
    800223a4:	f4aa                	sd	a0,104(sp)

00000000800223a6 <.LBB135_15>:
    800223a6:	00003517          	auipc	a0,0x3
    800223aa:	9b450513          	addi	a0,a0,-1612 # 80024d5a <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h65c6410ca8a4d3e4E>
    800223ae:	f8aa                	sd	a0,112(sp)
    800223b0:	0028                	addi	a0,sp,8
    800223b2:	fcaa                	sd	a0,120(sp)

00000000800223b4 <.LBB135_16>:
    800223b4:	00003517          	auipc	a0,0x3
    800223b8:	89c50513          	addi	a0,a0,-1892 # 80024c50 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h729ad47dd83507edE>
    800223bc:	e12a                	sd	a0,128(sp)
    800223be:	082c                	addi	a1,sp,24
    800223c0:	e52e                	sd	a1,136(sp)
    800223c2:	e92a                	sd	a0,144(sp)
    800223c4:	1828                	addi	a0,sp,56
    800223c6:	ed2a                	sd	a0,152(sp)

00000000800223c8 <.LBB135_17>:
    800223c8:	00000517          	auipc	a0,0x0
    800223cc:	6de50513          	addi	a0,a0,1758 # 80022aa6 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17hff7b3fee0b75a94eE>
    800223d0:	f12a                	sd	a0,160(sp)

00000000800223d2 <.LBB135_18>:
    800223d2:	0000a517          	auipc	a0,0xa
    800223d6:	57650513          	addi	a0,a0,1398 # 8002c948 <.Lanon.f077182aff5f58a5660f14b1290425e3.188>
    800223da:	f52a                	sd	a0,168(sp)
    800223dc:	4511                	li	a0,4
    800223de:	f92a                	sd	a0,176(sp)
    800223e0:	fd02                	sd	zero,184(sp)
    800223e2:	10ac                	addi	a1,sp,104
    800223e4:	e5ae                	sd	a1,200(sp)
    800223e6:	e9aa                	sd	a0,208(sp)
    800223e8:	1128                	addi	a0,sp,168
    800223ea:	85c2                	mv	a1,a6
    800223ec:	00000097          	auipc	ra,0x0
    800223f0:	ef6080e7          	jalr	-266(ra) # 800222e2 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
	...

Disassembly of section .text.unlikely._ZN4core6result13unwrap_failed17h07d3c4e2b4f310f6E:

00000000800223f6 <_ZN4core6result13unwrap_failed17h07d3c4e2b4f310f6E>:
    800223f6:	7119                	addi	sp,sp,-128
    800223f8:	fc86                	sd	ra,120(sp)
    800223fa:	e42a                	sd	a0,8(sp)
    800223fc:	e82e                	sd	a1,16(sp)
    800223fe:	ec32                	sd	a2,24(sp)
    80022400:	f036                	sd	a3,32(sp)
    80022402:	0028                	addi	a0,sp,8
    80022404:	ecaa                	sd	a0,88(sp)

0000000080022406 <.LBB136_1>:
    80022406:	00003517          	auipc	a0,0x3
    8002240a:	95450513          	addi	a0,a0,-1708 # 80024d5a <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h65c6410ca8a4d3e4E>
    8002240e:	f0aa                	sd	a0,96(sp)
    80022410:	0828                	addi	a0,sp,24
    80022412:	f4aa                	sd	a0,104(sp)

0000000080022414 <.LBB136_2>:
    80022414:	00003517          	auipc	a0,0x3
    80022418:	83c50513          	addi	a0,a0,-1988 # 80024c50 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h729ad47dd83507edE>
    8002241c:	f8aa                	sd	a0,112(sp)

000000008002241e <.LBB136_3>:
    8002241e:	0000a517          	auipc	a0,0xa
    80022422:	5ba50513          	addi	a0,a0,1466 # 8002c9d8 <.Lanon.f077182aff5f58a5660f14b1290425e3.192>
    80022426:	f42a                	sd	a0,40(sp)
    80022428:	4509                	li	a0,2
    8002242a:	f82a                	sd	a0,48(sp)
    8002242c:	fc02                	sd	zero,56(sp)
    8002242e:	08ac                	addi	a1,sp,88
    80022430:	e4ae                	sd	a1,72(sp)
    80022432:	e8aa                	sd	a0,80(sp)
    80022434:	1028                	addi	a0,sp,40
    80022436:	85ba                	mv	a1,a4
    80022438:	00000097          	auipc	ra,0x0
    8002243c:	eaa080e7          	jalr	-342(ra) # 800222e2 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
	...

Disassembly of section .text._ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17haa7f46eb365e41edE:

0000000080022442 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17haa7f46eb365e41edE>:
    80022442:	711d                	addi	sp,sp,-96
    80022444:	ec86                	sd	ra,88(sp)
    80022446:	e8a2                	sd	s0,80(sp)
    80022448:	e4a6                	sd	s1,72(sp)
    8002244a:	e0ca                	sd	s2,64(sp)
    8002244c:	fc4e                	sd	s3,56(sp)
    8002244e:	f852                	sd	s4,48(sp)
    80022450:	f456                	sd	s5,40(sp)
    80022452:	f05a                	sd	s6,32(sp)
    80022454:	ec5e                	sd	s7,24(sp)
    80022456:	e862                	sd	s8,16(sp)
    80022458:	e466                	sd	s9,8(sp)
    8002245a:	e06a                	sd	s10,0(sp)
    8002245c:	10060c63          	beqz	a2,80022574 <.LBB138_30+0x1a>
    80022460:	84b2                	mv	s1,a2
    80022462:	89ae                	mv	s3,a1
    80022464:	01053a03          	ld	s4,16(a0)
    80022468:	00053903          	ld	s2,0(a0)
    8002246c:	00853a83          	ld	s5,8(a0)
    80022470:	4b3d                	li	s6,15
    80022472:	4ba9                	li	s7,10
    80022474:	4c05                	li	s8,1
    80022476:	fbf00c93          	li	s9,-65
    8002247a:	a819                	j	80022490 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17haa7f46eb365e41edE+0x4e>
    8002247c:	018ab683          	ld	a3,24(s5)
    80022480:	854a                	mv	a0,s2
    80022482:	85ce                	mv	a1,s3
    80022484:	8622                	mv	a2,s0
    80022486:	9682                	jalr	a3
    80022488:	e965                	bnez	a0,80022578 <.LBB138_30+0x1e>
    8002248a:	8c81                	sub	s1,s1,s0
    8002248c:	89ea                	mv	s3,s10
    8002248e:	c0fd                	beqz	s1,80022574 <.LBB138_30+0x1a>
    80022490:	000a4503          	lbu	a0,0(s4)
    80022494:	c919                	beqz	a0,800224aa <.LBB138_29+0x10>
    80022496:	018ab683          	ld	a3,24(s5)

000000008002249a <.LBB138_29>:
    8002249a:	00004597          	auipc	a1,0x4
    8002249e:	25e58593          	addi	a1,a1,606 # 800266f8 <.LJTI3_0+0x58>
    800224a2:	4611                	li	a2,4
    800224a4:	854a                	mv	a0,s2
    800224a6:	9682                	jalr	a3
    800224a8:	e961                	bnez	a0,80022578 <.LBB138_30+0x1e>
    800224aa:	4401                	li	s0,0
    800224ac:	8626                	mv	a2,s1
    800224ae:	a031                	j	800224ba <.LBB138_29+0x20>
    800224b0:	0084b533          	sltu	a0,s1,s0
    800224b4:	40848633          	sub	a2,s1,s0
    800224b8:	e925                	bnez	a0,80022528 <.LBB138_29+0x8e>
    800224ba:	008986b3          	add	a3,s3,s0
    800224be:	02cb6263          	bltu	s6,a2,800224e2 <.LBB138_29+0x48>
    800224c2:	4581                	li	a1,0
    800224c4:	ca05                	beqz	a2,800224f4 <.LBB138_29+0x5a>
    800224c6:	00b68533          	add	a0,a3,a1
    800224ca:	00054503          	lbu	a0,0(a0)
    800224ce:	03750763          	beq	a0,s7,800224fc <.LBB138_29+0x62>
    800224d2:	0585                	addi	a1,a1,1
    800224d4:	feb619e3          	bne	a2,a1,800224c6 <.LBB138_29+0x2c>
    800224d8:	4501                	li	a0,0
    800224da:	85b2                	mv	a1,a2
    800224dc:	03850363          	beq	a0,s8,80022502 <.LBB138_29+0x68>
    800224e0:	a0a1                	j	80022528 <.LBB138_29+0x8e>
    800224e2:	4529                	li	a0,10
    800224e4:	85b6                	mv	a1,a3
    800224e6:	00001097          	auipc	ra,0x1
    800224ea:	41c080e7          	jalr	1052(ra) # 80023902 <_ZN4core5slice6memchr19memchr_general_case17hea58e64f15abdd7dE>
    800224ee:	01850a63          	beq	a0,s8,80022502 <.LBB138_29+0x68>
    800224f2:	a81d                	j	80022528 <.LBB138_29+0x8e>
    800224f4:	4501                	li	a0,0
    800224f6:	01850663          	beq	a0,s8,80022502 <.LBB138_29+0x68>
    800224fa:	a03d                	j	80022528 <.LBB138_29+0x8e>
    800224fc:	4505                	li	a0,1
    800224fe:	03851563          	bne	a0,s8,80022528 <.LBB138_29+0x8e>
    80022502:	00858533          	add	a0,a1,s0
    80022506:	00150413          	addi	s0,a0,1
    8002250a:	fa9573e3          	bgeu	a0,s1,800224b0 <.LBB138_29+0x16>
    8002250e:	954e                	add	a0,a0,s3
    80022510:	00054503          	lbu	a0,0(a0)
    80022514:	f9751ee3          	bne	a0,s7,800224b0 <.LBB138_29+0x16>
    80022518:	4505                	li	a0,1
    8002251a:	00aa0023          	sb	a0,0(s4)
    8002251e:	00898d33          	add	s10,s3,s0
    80022522:	f4848de3          	beq	s1,s0,8002247c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17haa7f46eb365e41edE+0x3a>
    80022526:	a809                	j	80022538 <.LBB138_29+0x9e>
    80022528:	4501                	li	a0,0
    8002252a:	8426                	mv	s0,s1
    8002252c:	00aa0023          	sb	a0,0(s4)
    80022530:	00898d33          	add	s10,s3,s0
    80022534:	f48484e3          	beq	s1,s0,8002247c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17haa7f46eb365e41edE+0x3a>
    80022538:	04947f63          	bgeu	s0,s1,80022596 <.LBB138_31>
    8002253c:	000d0503          	lb	a0,0(s10)
    80022540:	04acdb63          	bge	s9,a0,80022596 <.LBB138_31>
    80022544:	018ab683          	ld	a3,24(s5)
    80022548:	854a                	mv	a0,s2
    8002254a:	85ce                	mv	a1,s3
    8002254c:	8622                	mv	a2,s0
    8002254e:	9682                	jalr	a3
    80022550:	e505                	bnez	a0,80022578 <.LBB138_30+0x1e>
    80022552:	000d0503          	lb	a0,0(s10)
    80022556:	f2accae3          	blt	s9,a0,8002248a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17haa7f46eb365e41edE+0x48>

000000008002255a <.LBB138_30>:
    8002255a:	0000a717          	auipc	a4,0xa
    8002255e:	4e670713          	addi	a4,a4,1254 # 8002ca40 <.Lanon.f077182aff5f58a5660f14b1290425e3.197>
    80022562:	854e                	mv	a0,s3
    80022564:	85a6                	mv	a1,s1
    80022566:	8622                	mv	a2,s0
    80022568:	86a6                	mv	a3,s1
    8002256a:	00001097          	auipc	ra,0x1
    8002256e:	7cc080e7          	jalr	1996(ra) # 80023d36 <_ZN4core3str16slice_error_fail17h98613a818fa8baa4E>
    80022572:	0000                	unimp
    80022574:	4501                	li	a0,0
    80022576:	a011                	j	8002257a <.LBB138_30+0x20>
    80022578:	4505                	li	a0,1
    8002257a:	6d02                	ld	s10,0(sp)
    8002257c:	6ca2                	ld	s9,8(sp)
    8002257e:	6c42                	ld	s8,16(sp)
    80022580:	6be2                	ld	s7,24(sp)
    80022582:	7b02                	ld	s6,32(sp)
    80022584:	7aa2                	ld	s5,40(sp)
    80022586:	7a42                	ld	s4,48(sp)
    80022588:	79e2                	ld	s3,56(sp)
    8002258a:	6906                	ld	s2,64(sp)
    8002258c:	64a6                	ld	s1,72(sp)
    8002258e:	6446                	ld	s0,80(sp)
    80022590:	60e6                	ld	ra,88(sp)
    80022592:	6125                	addi	sp,sp,96
    80022594:	8082                	ret

0000000080022596 <.LBB138_31>:
    80022596:	0000a717          	auipc	a4,0xa
    8002259a:	49270713          	addi	a4,a4,1170 # 8002ca28 <.Lanon.f077182aff5f58a5660f14b1290425e3.196>
    8002259e:	854e                	mv	a0,s3
    800225a0:	85a6                	mv	a1,s1
    800225a2:	4601                	li	a2,0
    800225a4:	86a2                	mv	a3,s0
    800225a6:	00001097          	auipc	ra,0x1
    800225aa:	790080e7          	jalr	1936(ra) # 80023d36 <_ZN4core3str16slice_error_fail17h98613a818fa8baa4E>
	...

Disassembly of section .text._ZN4core3fmt8builders11DebugStruct5field17hd4a9c9da942f00c3E:

00000000800225b0 <_ZN4core3fmt8builders11DebugStruct5field17hd4a9c9da942f00c3E>:
    800225b0:	7171                	addi	sp,sp,-176
    800225b2:	f506                	sd	ra,168(sp)
    800225b4:	f122                	sd	s0,160(sp)
    800225b6:	ed26                	sd	s1,152(sp)
    800225b8:	e94a                	sd	s2,144(sp)
    800225ba:	e54e                	sd	s3,136(sp)
    800225bc:	e152                	sd	s4,128(sp)
    800225be:	fcd6                	sd	s5,120(sp)
    800225c0:	f8da                	sd	s6,112(sp)
    800225c2:	f4de                	sd	s7,104(sp)
    800225c4:	842a                	mv	s0,a0
    800225c6:	00854503          	lbu	a0,8(a0)
    800225ca:	4b85                	li	s7,1
    800225cc:	4485                	li	s1,1
    800225ce:	c10d                	beqz	a0,800225f0 <_ZN4core3fmt8builders11DebugStruct5field17hd4a9c9da942f00c3E+0x40>
    800225d0:	00940423          	sb	s1,8(s0)
    800225d4:	017404a3          	sb	s7,9(s0)
    800225d8:	8522                	mv	a0,s0
    800225da:	7ba6                	ld	s7,104(sp)
    800225dc:	7b46                	ld	s6,112(sp)
    800225de:	7ae6                	ld	s5,120(sp)
    800225e0:	6a0a                	ld	s4,128(sp)
    800225e2:	69aa                	ld	s3,136(sp)
    800225e4:	694a                	ld	s2,144(sp)
    800225e6:	64ea                	ld	s1,152(sp)
    800225e8:	740a                	ld	s0,160(sp)
    800225ea:	70aa                	ld	ra,168(sp)
    800225ec:	614d                	addi	sp,sp,176
    800225ee:	8082                	ret
    800225f0:	89ba                	mv	s3,a4
    800225f2:	8936                	mv	s2,a3
    800225f4:	8a32                	mv	s4,a2
    800225f6:	8aae                	mv	s5,a1
    800225f8:	00043b03          	ld	s6,0(s0)
    800225fc:	030b6503          	lwu	a0,48(s6)
    80022600:	00944583          	lbu	a1,9(s0)
    80022604:	00457693          	andi	a3,a0,4
    80022608:	0015b613          	seqz	a2,a1
    8002260c:	e699                	bnez	a3,8002261a <.LBB139_18+0xa>
    8002260e:	e261                	bnez	a2,800226ce <.LBB139_23>

0000000080022610 <.LBB139_18>:
    80022610:	0000a597          	auipc	a1,0xa
    80022614:	44d58593          	addi	a1,a1,1101 # 8002ca5d <.Lanon.f077182aff5f58a5660f14b1290425e3.200>
    80022618:	a87d                	j	800226d6 <.LBB139_23+0x8>
    8002261a:	c205                	beqz	a2,8002263a <.LBB139_19+0x14>
    8002261c:	028b3583          	ld	a1,40(s6)
    80022620:	020b3503          	ld	a0,32(s6)
    80022624:	6d94                	ld	a3,24(a1)

0000000080022626 <.LBB139_19>:
    80022626:	0000a597          	auipc	a1,0xa
    8002262a:	43258593          	addi	a1,a1,1074 # 8002ca58 <.Lanon.f077182aff5f58a5660f14b1290425e3.198>
    8002262e:	460d                	li	a2,3
    80022630:	9682                	jalr	a3
    80022632:	4485                	li	s1,1
    80022634:	fd51                	bnez	a0,800225d0 <_ZN4core3fmt8builders11DebugStruct5field17hd4a9c9da942f00c3E+0x20>
    80022636:	030b6503          	lwu	a0,48(s6)
    8002263a:	4485                	li	s1,1
    8002263c:	029103a3          	sb	s1,39(sp)
    80022640:	020b3583          	ld	a1,32(s6)
    80022644:	028b3603          	ld	a2,40(s6)
    80022648:	e42e                	sd	a1,8(sp)
    8002264a:	e832                	sd	a2,16(sp)
    8002264c:	02710593          	addi	a1,sp,39
    80022650:	ec2e                	sd	a1,24(sp)
    80022652:	034b2583          	lw	a1,52(s6)
    80022656:	038b0603          	lb	a2,56(s6)
    8002265a:	000b3683          	ld	a3,0(s6)
    8002265e:	008b3703          	ld	a4,8(s6)
    80022662:	010b3783          	ld	a5,16(s6)
    80022666:	018b3803          	ld	a6,24(s6)
    8002266a:	ccaa                	sw	a0,88(sp)
    8002266c:	ceae                	sw	a1,92(sp)
    8002266e:	06c10023          	sb	a2,96(sp)
    80022672:	f436                	sd	a3,40(sp)
    80022674:	f83a                	sd	a4,48(sp)
    80022676:	fc3e                	sd	a5,56(sp)
    80022678:	e0c2                	sd	a6,64(sp)
    8002267a:	0028                	addi	a0,sp,8
    8002267c:	e4aa                	sd	a0,72(sp)

000000008002267e <.LBB139_20>:
    8002267e:	0000a517          	auipc	a0,0xa
    80022682:	37a50513          	addi	a0,a0,890 # 8002c9f8 <.Lanon.f077182aff5f58a5660f14b1290425e3.194>
    80022686:	e8aa                	sd	a0,80(sp)
    80022688:	0028                	addi	a0,sp,8
    8002268a:	85d6                	mv	a1,s5
    8002268c:	8652                	mv	a2,s4
    8002268e:	00000097          	auipc	ra,0x0
    80022692:	db4080e7          	jalr	-588(ra) # 80022442 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17haa7f46eb365e41edE>
    80022696:	fd0d                	bnez	a0,800225d0 <_ZN4core3fmt8builders11DebugStruct5field17hd4a9c9da942f00c3E+0x20>

0000000080022698 <.LBB139_21>:
    80022698:	0000a597          	auipc	a1,0xa
    8002269c:	33858593          	addi	a1,a1,824 # 8002c9d0 <.Lanon.f077182aff5f58a5660f14b1290425e3.191>
    800226a0:	0028                	addi	a0,sp,8
    800226a2:	4609                	li	a2,2
    800226a4:	00000097          	auipc	ra,0x0
    800226a8:	d9e080e7          	jalr	-610(ra) # 80022442 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17haa7f46eb365e41edE>
    800226ac:	f115                	bnez	a0,800225d0 <_ZN4core3fmt8builders11DebugStruct5field17hd4a9c9da942f00c3E+0x20>
    800226ae:	0189b603          	ld	a2,24(s3)
    800226b2:	102c                	addi	a1,sp,40
    800226b4:	854a                	mv	a0,s2
    800226b6:	9602                	jalr	a2
    800226b8:	fd01                	bnez	a0,800225d0 <_ZN4core3fmt8builders11DebugStruct5field17hd4a9c9da942f00c3E+0x20>
    800226ba:	65c6                	ld	a1,80(sp)
    800226bc:	6526                	ld	a0,72(sp)
    800226be:	6d94                	ld	a3,24(a1)

00000000800226c0 <.LBB139_22>:
    800226c0:	0000a597          	auipc	a1,0xa
    800226c4:	39b58593          	addi	a1,a1,923 # 8002ca5b <.Lanon.f077182aff5f58a5660f14b1290425e3.199>
    800226c8:	4609                	li	a2,2
    800226ca:	9682                	jalr	a3
    800226cc:	a8b1                	j	80022728 <.LBB139_24+0x1c>

00000000800226ce <.LBB139_23>:
    800226ce:	0000a597          	auipc	a1,0xa
    800226d2:	39158593          	addi	a1,a1,913 # 8002ca5f <.Lanon.f077182aff5f58a5660f14b1290425e3.201>
    800226d6:	028b3683          	ld	a3,40(s6)
    800226da:	020b3503          	ld	a0,32(s6)
    800226de:	6e94                	ld	a3,24(a3)
    800226e0:	00266613          	ori	a2,a2,2
    800226e4:	9682                	jalr	a3
    800226e6:	4485                	li	s1,1
    800226e8:	ee0514e3          	bnez	a0,800225d0 <_ZN4core3fmt8builders11DebugStruct5field17hd4a9c9da942f00c3E+0x20>
    800226ec:	028b3583          	ld	a1,40(s6)
    800226f0:	020b3503          	ld	a0,32(s6)
    800226f4:	6d94                	ld	a3,24(a1)
    800226f6:	85d6                	mv	a1,s5
    800226f8:	8652                	mv	a2,s4
    800226fa:	9682                	jalr	a3
    800226fc:	4485                	li	s1,1
    800226fe:	ec0519e3          	bnez	a0,800225d0 <_ZN4core3fmt8builders11DebugStruct5field17hd4a9c9da942f00c3E+0x20>
    80022702:	028b3583          	ld	a1,40(s6)
    80022706:	020b3503          	ld	a0,32(s6)
    8002270a:	6d94                	ld	a3,24(a1)

000000008002270c <.LBB139_24>:
    8002270c:	0000a597          	auipc	a1,0xa
    80022710:	2c458593          	addi	a1,a1,708 # 8002c9d0 <.Lanon.f077182aff5f58a5660f14b1290425e3.191>
    80022714:	4609                	li	a2,2
    80022716:	9682                	jalr	a3
    80022718:	4485                	li	s1,1
    8002271a:	ea051be3          	bnez	a0,800225d0 <_ZN4core3fmt8builders11DebugStruct5field17hd4a9c9da942f00c3E+0x20>
    8002271e:	0189b603          	ld	a2,24(s3)
    80022722:	854a                	mv	a0,s2
    80022724:	85da                	mv	a1,s6
    80022726:	9602                	jalr	a2
    80022728:	84aa                	mv	s1,a0
    8002272a:	b55d                	j	800225d0 <_ZN4core3fmt8builders11DebugStruct5field17hd4a9c9da942f00c3E+0x20>

Disassembly of section .text._ZN4core3fmt8builders10DebugTuple5field17h5bd338b8cb98b948E:

000000008002272c <_ZN4core3fmt8builders10DebugTuple5field17h5bd338b8cb98b948E>:
    8002272c:	7135                	addi	sp,sp,-160
    8002272e:	ed06                	sd	ra,152(sp)
    80022730:	e922                	sd	s0,144(sp)
    80022732:	e526                	sd	s1,136(sp)
    80022734:	e14a                	sd	s2,128(sp)
    80022736:	fcce                	sd	s3,120(sp)
    80022738:	f8d2                	sd	s4,112(sp)
    8002273a:	f4d6                	sd	s5,104(sp)
    8002273c:	842a                	mv	s0,a0
    8002273e:	01054503          	lbu	a0,16(a0)
    80022742:	c509                	beqz	a0,8002274c <_ZN4core3fmt8builders10DebugTuple5field17h5bd338b8cb98b948E+0x20>
    80022744:	00843a83          	ld	s5,8(s0)
    80022748:	4485                	li	s1,1
    8002274a:	a0d5                	j	8002282e <.LBB142_20+0xe>
    8002274c:	89b2                	mv	s3,a2
    8002274e:	892e                	mv	s2,a1
    80022750:	00043a03          	ld	s4,0(s0)
    80022754:	030a6503          	lwu	a0,48(s4)
    80022758:	00843a83          	ld	s5,8(s0)
    8002275c:	00457593          	andi	a1,a0,4
    80022760:	001ab613          	seqz	a2,s5
    80022764:	e599                	bnez	a1,80022772 <.LBB142_16+0xa>
    80022766:	e615                	bnez	a2,80022792 <.LBB142_18>

0000000080022768 <.LBB142_16>:
    80022768:	0000a597          	auipc	a1,0xa
    8002276c:	2f558593          	addi	a1,a1,757 # 8002ca5d <.Lanon.f077182aff5f58a5660f14b1290425e3.200>
    80022770:	a02d                	j	8002279a <.LBB142_18+0x8>
    80022772:	c639                	beqz	a2,800227c0 <.LBB142_18+0x2e>
    80022774:	028a3583          	ld	a1,40(s4)
    80022778:	020a3503          	ld	a0,32(s4)
    8002277c:	6d94                	ld	a3,24(a1)

000000008002277e <.LBB142_17>:
    8002277e:	0000a597          	auipc	a1,0xa
    80022782:	2e758593          	addi	a1,a1,743 # 8002ca65 <.Lanon.f077182aff5f58a5660f14b1290425e3.207>
    80022786:	4609                	li	a2,2
    80022788:	9682                	jalr	a3
    8002278a:	c90d                	beqz	a0,800227bc <.LBB142_18+0x2a>
    8002278c:	4a81                	li	s5,0
    8002278e:	4485                	li	s1,1
    80022790:	a879                	j	8002282e <.LBB142_20+0xe>

0000000080022792 <.LBB142_18>:
    80022792:	0000a597          	auipc	a1,0xa
    80022796:	2d558593          	addi	a1,a1,725 # 8002ca67 <.Lanon.f077182aff5f58a5660f14b1290425e3.208>
    8002279a:	028a3683          	ld	a3,40(s4)
    8002279e:	020a3503          	ld	a0,32(s4)
    800227a2:	6e94                	ld	a3,24(a3)
    800227a4:	4709                	li	a4,2
    800227a6:	40c70633          	sub	a2,a4,a2
    800227aa:	9682                	jalr	a3
    800227ac:	4485                	li	s1,1
    800227ae:	e141                	bnez	a0,8002282e <.LBB142_20+0xe>
    800227b0:	0189b603          	ld	a2,24(s3)
    800227b4:	854a                	mv	a0,s2
    800227b6:	85d2                	mv	a1,s4
    800227b8:	9602                	jalr	a2
    800227ba:	a88d                	j	8002282c <.LBB142_20+0xc>
    800227bc:	030a6503          	lwu	a0,48(s4)
    800227c0:	4485                	li	s1,1
    800227c2:	029103a3          	sb	s1,39(sp)
    800227c6:	020a3583          	ld	a1,32(s4)
    800227ca:	028a3603          	ld	a2,40(s4)
    800227ce:	e42e                	sd	a1,8(sp)
    800227d0:	e832                	sd	a2,16(sp)
    800227d2:	02710593          	addi	a1,sp,39
    800227d6:	ec2e                	sd	a1,24(sp)
    800227d8:	034a2583          	lw	a1,52(s4)
    800227dc:	038a0603          	lb	a2,56(s4)
    800227e0:	000a3683          	ld	a3,0(s4)
    800227e4:	008a3703          	ld	a4,8(s4)
    800227e8:	010a3783          	ld	a5,16(s4)
    800227ec:	018a3803          	ld	a6,24(s4)
    800227f0:	ccaa                	sw	a0,88(sp)
    800227f2:	ceae                	sw	a1,92(sp)
    800227f4:	06c10023          	sb	a2,96(sp)
    800227f8:	f436                	sd	a3,40(sp)
    800227fa:	f83a                	sd	a4,48(sp)
    800227fc:	fc3e                	sd	a5,56(sp)
    800227fe:	e0c2                	sd	a6,64(sp)
    80022800:	0028                	addi	a0,sp,8
    80022802:	0189b603          	ld	a2,24(s3)
    80022806:	e4aa                	sd	a0,72(sp)

0000000080022808 <.LBB142_19>:
    80022808:	0000a517          	auipc	a0,0xa
    8002280c:	1f050513          	addi	a0,a0,496 # 8002c9f8 <.Lanon.f077182aff5f58a5660f14b1290425e3.194>
    80022810:	e8aa                	sd	a0,80(sp)
    80022812:	102c                	addi	a1,sp,40
    80022814:	854a                	mv	a0,s2
    80022816:	9602                	jalr	a2
    80022818:	e919                	bnez	a0,8002282e <.LBB142_20+0xe>
    8002281a:	65c6                	ld	a1,80(sp)
    8002281c:	6526                	ld	a0,72(sp)
    8002281e:	6d94                	ld	a3,24(a1)

0000000080022820 <.LBB142_20>:
    80022820:	0000a597          	auipc	a1,0xa
    80022824:	23b58593          	addi	a1,a1,571 # 8002ca5b <.Lanon.f077182aff5f58a5660f14b1290425e3.199>
    80022828:	4609                	li	a2,2
    8002282a:	9682                	jalr	a3
    8002282c:	84aa                	mv	s1,a0
    8002282e:	00940823          	sb	s1,16(s0)
    80022832:	001a8513          	addi	a0,s5,1
    80022836:	e408                	sd	a0,8(s0)
    80022838:	8522                	mv	a0,s0
    8002283a:	7aa6                	ld	s5,104(sp)
    8002283c:	7a46                	ld	s4,112(sp)
    8002283e:	79e6                	ld	s3,120(sp)
    80022840:	690a                	ld	s2,128(sp)
    80022842:	64aa                	ld	s1,136(sp)
    80022844:	644a                	ld	s0,144(sp)
    80022846:	60ea                	ld	ra,152(sp)
    80022848:	610d                	addi	sp,sp,160
    8002284a:	8082                	ret

Disassembly of section .text._ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE:

000000008002284c <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>:
    8002284c:	1101                	addi	sp,sp,-32
    8002284e:	ec06                	sd	ra,24(sp)
    80022850:	e822                	sd	s0,16(sp)
    80022852:	e426                	sd	s1,8(sp)
    80022854:	842a                	mv	s0,a0
    80022856:	650c                	ld	a1,8(a0)
    80022858:	01054503          	lbu	a0,16(a0)
    8002285c:	c5b9                	beqz	a1,800228aa <.LBB143_10+0x14>
    8002285e:	4485                	li	s1,1
    80022860:	e131                	bnez	a0,800228a4 <.LBB143_10+0xe>
    80022862:	4505                	li	a0,1
    80022864:	02a59563          	bne	a1,a0,8002288e <.LBB143_9+0x10>
    80022868:	01144503          	lbu	a0,17(s0)
    8002286c:	c10d                	beqz	a0,8002288e <.LBB143_9+0x10>
    8002286e:	6008                	ld	a0,0(s0)
    80022870:	03054583          	lbu	a1,48(a0)
    80022874:	8991                	andi	a1,a1,4
    80022876:	ed81                	bnez	a1,8002288e <.LBB143_9+0x10>
    80022878:	750c                	ld	a1,40(a0)
    8002287a:	7108                	ld	a0,32(a0)
    8002287c:	6d94                	ld	a3,24(a1)

000000008002287e <.LBB143_9>:
    8002287e:	0000a597          	auipc	a1,0xa
    80022882:	1ea58593          	addi	a1,a1,490 # 8002ca68 <.Lanon.f077182aff5f58a5660f14b1290425e3.209>
    80022886:	4605                	li	a2,1
    80022888:	4485                	li	s1,1
    8002288a:	9682                	jalr	a3
    8002288c:	ed01                	bnez	a0,800228a4 <.LBB143_10+0xe>
    8002288e:	6008                	ld	a0,0(s0)
    80022890:	750c                	ld	a1,40(a0)
    80022892:	7108                	ld	a0,32(a0)
    80022894:	6d94                	ld	a3,24(a1)

0000000080022896 <.LBB143_10>:
    80022896:	0000a597          	auipc	a1,0xa
    8002289a:	1d358593          	addi	a1,a1,467 # 8002ca69 <.Lanon.f077182aff5f58a5660f14b1290425e3.210>
    8002289e:	4605                	li	a2,1
    800228a0:	9682                	jalr	a3
    800228a2:	84aa                	mv	s1,a0
    800228a4:	00940823          	sb	s1,16(s0)
    800228a8:	8526                	mv	a0,s1
    800228aa:	00a03533          	snez	a0,a0
    800228ae:	64a2                	ld	s1,8(sp)
    800228b0:	6442                	ld	s0,16(sp)
    800228b2:	60e2                	ld	ra,24(sp)
    800228b4:	6105                	addi	sp,sp,32
    800228b6:	8082                	ret

Disassembly of section .text._ZN4core3fmt5Write10write_char17h618b2d222791a8a5E:

00000000800228b8 <_ZN4core3fmt5Write10write_char17h618b2d222791a8a5E>:
    800228b8:	1141                	addi	sp,sp,-16
    800228ba:	e406                	sd	ra,8(sp)
    800228bc:	0005861b          	sext.w	a2,a1
    800228c0:	08000693          	li	a3,128
    800228c4:	c202                	sw	zero,4(sp)
    800228c6:	00d67663          	bgeu	a2,a3,800228d2 <_ZN4core3fmt5Write10write_char17h618b2d222791a8a5E+0x1a>
    800228ca:	00b10223          	sb	a1,4(sp)
    800228ce:	4605                	li	a2,1
    800228d0:	a841                	j	80022960 <_ZN4core3fmt5Write10write_char17h618b2d222791a8a5E+0xa8>
    800228d2:	00b5d61b          	srliw	a2,a1,0xb
    800228d6:	ee19                	bnez	a2,800228f4 <_ZN4core3fmt5Write10write_char17h618b2d222791a8a5E+0x3c>
    800228d8:	0065d613          	srli	a2,a1,0x6
    800228dc:	0c066613          	ori	a2,a2,192
    800228e0:	00c10223          	sb	a2,4(sp)
    800228e4:	03f5f593          	andi	a1,a1,63
    800228e8:	0805e593          	ori	a1,a1,128
    800228ec:	00b102a3          	sb	a1,5(sp)
    800228f0:	4609                	li	a2,2
    800228f2:	a0bd                	j	80022960 <_ZN4core3fmt5Write10write_char17h618b2d222791a8a5E+0xa8>
    800228f4:	0105d61b          	srliw	a2,a1,0x10
    800228f8:	e61d                	bnez	a2,80022926 <_ZN4core3fmt5Write10write_char17h618b2d222791a8a5E+0x6e>
    800228fa:	00c5d61b          	srliw	a2,a1,0xc
    800228fe:	0e066613          	ori	a2,a2,224
    80022902:	00c10223          	sb	a2,4(sp)
    80022906:	0065d61b          	srliw	a2,a1,0x6
    8002290a:	03f67613          	andi	a2,a2,63
    8002290e:	08066613          	ori	a2,a2,128
    80022912:	00c102a3          	sb	a2,5(sp)
    80022916:	03f5f593          	andi	a1,a1,63
    8002291a:	0805e593          	ori	a1,a1,128
    8002291e:	00b10323          	sb	a1,6(sp)
    80022922:	460d                	li	a2,3
    80022924:	a835                	j	80022960 <_ZN4core3fmt5Write10write_char17h618b2d222791a8a5E+0xa8>
    80022926:	0125d61b          	srliw	a2,a1,0x12
    8002292a:	0f066613          	ori	a2,a2,240
    8002292e:	00c10223          	sb	a2,4(sp)
    80022932:	00c5d61b          	srliw	a2,a1,0xc
    80022936:	03f67613          	andi	a2,a2,63
    8002293a:	08066613          	ori	a2,a2,128
    8002293e:	00c102a3          	sb	a2,5(sp)
    80022942:	0065d61b          	srliw	a2,a1,0x6
    80022946:	03f67613          	andi	a2,a2,63
    8002294a:	08066613          	ori	a2,a2,128
    8002294e:	00c10323          	sb	a2,6(sp)
    80022952:	03f5f593          	andi	a1,a1,63
    80022956:	0805e593          	ori	a1,a1,128
    8002295a:	00b103a3          	sb	a1,7(sp)
    8002295e:	4611                	li	a2,4
    80022960:	004c                	addi	a1,sp,4
    80022962:	00000097          	auipc	ra,0x0
    80022966:	ae0080e7          	jalr	-1312(ra) # 80022442 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17haa7f46eb365e41edE>
    8002296a:	60a2                	ld	ra,8(sp)
    8002296c:	0141                	addi	sp,sp,16
    8002296e:	8082                	ret

Disassembly of section .text._ZN4core3fmt5Write9write_fmt17h35126b63af1cfc53E:

0000000080022970 <_ZN4core3fmt5Write9write_fmt17h35126b63af1cfc53E>:
    80022970:	7139                	addi	sp,sp,-64
    80022972:	fc06                	sd	ra,56(sp)
    80022974:	7590                	ld	a2,40(a1)
    80022976:	7194                	ld	a3,32(a1)
    80022978:	e02a                	sd	a0,0(sp)
    8002297a:	f832                	sd	a2,48(sp)
    8002297c:	f436                	sd	a3,40(sp)
    8002297e:	6d88                	ld	a0,24(a1)
    80022980:	6990                	ld	a2,16(a1)
    80022982:	6594                	ld	a3,8(a1)
    80022984:	618c                	ld	a1,0(a1)
    80022986:	f02a                	sd	a0,32(sp)
    80022988:	ec32                	sd	a2,24(sp)
    8002298a:	e836                	sd	a3,16(sp)
    8002298c:	e42e                	sd	a1,8(sp)

000000008002298e <.LBB165_1>:
    8002298e:	0000a597          	auipc	a1,0xa
    80022992:	20a58593          	addi	a1,a1,522 # 8002cb98 <.Lanon.f077182aff5f58a5660f14b1290425e3.232>
    80022996:	850a                	mv	a0,sp
    80022998:	0030                	addi	a2,sp,8
    8002299a:	00000097          	auipc	ra,0x0
    8002299e:	13e080e7          	jalr	318(ra) # 80022ad8 <_ZN4core3fmt5write17hf87af17b3ec995a2E>
    800229a2:	70e2                	ld	ra,56(sp)
    800229a4:	6121                	addi	sp,sp,64
    800229a6:	8082                	ret

Disassembly of section .text._ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h3e38ec0fac65c122E:

00000000800229a8 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h3e38ec0fac65c122E>:
    800229a8:	6108                	ld	a0,0(a0)
    800229aa:	00000317          	auipc	t1,0x0
    800229ae:	a9830067          	jr	-1384(t1) # 80022442 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17haa7f46eb365e41edE>

Disassembly of section .text._ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h00198f5ff26d8c43E:

00000000800229b2 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h00198f5ff26d8c43E>:
    800229b2:	1141                	addi	sp,sp,-16
    800229b4:	e406                	sd	ra,8(sp)
    800229b6:	6108                	ld	a0,0(a0)
    800229b8:	0005861b          	sext.w	a2,a1
    800229bc:	08000693          	li	a3,128
    800229c0:	c202                	sw	zero,4(sp)
    800229c2:	00d67663          	bgeu	a2,a3,800229ce <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h00198f5ff26d8c43E+0x1c>
    800229c6:	00b10223          	sb	a1,4(sp)
    800229ca:	4605                	li	a2,1
    800229cc:	a841                	j	80022a5c <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h00198f5ff26d8c43E+0xaa>
    800229ce:	00b5d61b          	srliw	a2,a1,0xb
    800229d2:	ee19                	bnez	a2,800229f0 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h00198f5ff26d8c43E+0x3e>
    800229d4:	0065d613          	srli	a2,a1,0x6
    800229d8:	0c066613          	ori	a2,a2,192
    800229dc:	00c10223          	sb	a2,4(sp)
    800229e0:	03f5f593          	andi	a1,a1,63
    800229e4:	0805e593          	ori	a1,a1,128
    800229e8:	00b102a3          	sb	a1,5(sp)
    800229ec:	4609                	li	a2,2
    800229ee:	a0bd                	j	80022a5c <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h00198f5ff26d8c43E+0xaa>
    800229f0:	0105d61b          	srliw	a2,a1,0x10
    800229f4:	e61d                	bnez	a2,80022a22 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h00198f5ff26d8c43E+0x70>
    800229f6:	00c5d61b          	srliw	a2,a1,0xc
    800229fa:	0e066613          	ori	a2,a2,224
    800229fe:	00c10223          	sb	a2,4(sp)
    80022a02:	0065d61b          	srliw	a2,a1,0x6
    80022a06:	03f67613          	andi	a2,a2,63
    80022a0a:	08066613          	ori	a2,a2,128
    80022a0e:	00c102a3          	sb	a2,5(sp)
    80022a12:	03f5f593          	andi	a1,a1,63
    80022a16:	0805e593          	ori	a1,a1,128
    80022a1a:	00b10323          	sb	a1,6(sp)
    80022a1e:	460d                	li	a2,3
    80022a20:	a835                	j	80022a5c <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h00198f5ff26d8c43E+0xaa>
    80022a22:	0125d61b          	srliw	a2,a1,0x12
    80022a26:	0f066613          	ori	a2,a2,240
    80022a2a:	00c10223          	sb	a2,4(sp)
    80022a2e:	00c5d61b          	srliw	a2,a1,0xc
    80022a32:	03f67613          	andi	a2,a2,63
    80022a36:	08066613          	ori	a2,a2,128
    80022a3a:	00c102a3          	sb	a2,5(sp)
    80022a3e:	0065d61b          	srliw	a2,a1,0x6
    80022a42:	03f67613          	andi	a2,a2,63
    80022a46:	08066613          	ori	a2,a2,128
    80022a4a:	00c10323          	sb	a2,6(sp)
    80022a4e:	03f5f593          	andi	a1,a1,63
    80022a52:	0805e593          	ori	a1,a1,128
    80022a56:	00b103a3          	sb	a1,7(sp)
    80022a5a:	4611                	li	a2,4
    80022a5c:	004c                	addi	a1,sp,4
    80022a5e:	00000097          	auipc	ra,0x0
    80022a62:	9e4080e7          	jalr	-1564(ra) # 80022442 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17haa7f46eb365e41edE>
    80022a66:	60a2                	ld	ra,8(sp)
    80022a68:	0141                	addi	sp,sp,16
    80022a6a:	8082                	ret

Disassembly of section .text._ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17ha842f9ebf6244b3dE:

0000000080022a6c <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17ha842f9ebf6244b3dE>:
    80022a6c:	7139                	addi	sp,sp,-64
    80022a6e:	fc06                	sd	ra,56(sp)
    80022a70:	6108                	ld	a0,0(a0)
    80022a72:	7590                	ld	a2,40(a1)
    80022a74:	7194                	ld	a3,32(a1)
    80022a76:	e02a                	sd	a0,0(sp)
    80022a78:	f832                	sd	a2,48(sp)
    80022a7a:	f436                	sd	a3,40(sp)
    80022a7c:	6d88                	ld	a0,24(a1)
    80022a7e:	6990                	ld	a2,16(a1)
    80022a80:	6594                	ld	a3,8(a1)
    80022a82:	618c                	ld	a1,0(a1)
    80022a84:	f02a                	sd	a0,32(sp)
    80022a86:	ec32                	sd	a2,24(sp)
    80022a88:	e836                	sd	a3,16(sp)
    80022a8a:	e42e                	sd	a1,8(sp)

0000000080022a8c <.LBB168_1>:
    80022a8c:	0000a597          	auipc	a1,0xa
    80022a90:	10c58593          	addi	a1,a1,268 # 8002cb98 <.Lanon.f077182aff5f58a5660f14b1290425e3.232>
    80022a94:	850a                	mv	a0,sp
    80022a96:	0030                	addi	a2,sp,8
    80022a98:	00000097          	auipc	ra,0x0
    80022a9c:	040080e7          	jalr	64(ra) # 80022ad8 <_ZN4core3fmt5write17hf87af17b3ec995a2E>
    80022aa0:	70e2                	ld	ra,56(sp)
    80022aa2:	6121                	addi	sp,sp,64
    80022aa4:	8082                	ret

Disassembly of section .text._ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17hff7b3fee0b75a94eE:

0000000080022aa6 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17hff7b3fee0b75a94eE>:
    80022aa6:	7139                	addi	sp,sp,-64
    80022aa8:	fc06                	sd	ra,56(sp)
    80022aaa:	7510                	ld	a2,40(a0)
    80022aac:	7118                	ld	a4,32(a0)
    80022aae:	6d1c                	ld	a5,24(a0)
    80022ab0:	f832                	sd	a2,48(sp)
    80022ab2:	7194                	ld	a3,32(a1)
    80022ab4:	f43a                	sd	a4,40(sp)
    80022ab6:	f03e                	sd	a5,32(sp)
    80022ab8:	6910                	ld	a2,16(a0)
    80022aba:	6518                	ld	a4,8(a0)
    80022abc:	6108                	ld	a0,0(a0)
    80022abe:	758c                	ld	a1,40(a1)
    80022ac0:	ec32                	sd	a2,24(sp)
    80022ac2:	e83a                	sd	a4,16(sp)
    80022ac4:	e42a                	sd	a0,8(sp)
    80022ac6:	0030                	addi	a2,sp,8
    80022ac8:	8536                	mv	a0,a3
    80022aca:	00000097          	auipc	ra,0x0
    80022ace:	00e080e7          	jalr	14(ra) # 80022ad8 <_ZN4core3fmt5write17hf87af17b3ec995a2E>
    80022ad2:	70e2                	ld	ra,56(sp)
    80022ad4:	6121                	addi	sp,sp,64
    80022ad6:	8082                	ret

Disassembly of section .text._ZN4core3fmt5write17hf87af17b3ec995a2E:

0000000080022ad8 <_ZN4core3fmt5write17hf87af17b3ec995a2E>:
    80022ad8:	7175                	addi	sp,sp,-144
    80022ada:	e506                	sd	ra,136(sp)
    80022adc:	e122                	sd	s0,128(sp)
    80022ade:	fca6                	sd	s1,120(sp)
    80022ae0:	f8ca                	sd	s2,112(sp)
    80022ae2:	f4ce                	sd	s3,104(sp)
    80022ae4:	f0d2                	sd	s4,96(sp)
    80022ae6:	ecd6                	sd	s5,88(sp)
    80022ae8:	e8da                	sd	s6,80(sp)
    80022aea:	e4de                	sd	s7,72(sp)
    80022aec:	e0e2                	sd	s8,64(sp)
    80022aee:	8432                	mv	s0,a2
    80022af0:	4605                	li	a2,1
    80022af2:	1616                	slli	a2,a2,0x25
    80022af4:	f832                	sd	a2,48(sp)
    80022af6:	460d                	li	a2,3
    80022af8:	02c10c23          	sb	a2,56(sp)
    80022afc:	6804                	ld	s1,16(s0)
    80022afe:	e002                	sd	zero,0(sp)
    80022b00:	e802                	sd	zero,16(sp)
    80022b02:	f02a                	sd	a0,32(sp)
    80022b04:	f42e                	sd	a1,40(sp)
    80022b06:	c0f1                	beqz	s1,80022bca <.LBB172_35+0x90>
    80022b08:	6c10                	ld	a2,24(s0)
    80022b0a:	00843903          	ld	s2,8(s0)
    80022b0e:	8a4a                	mv	s4,s2
    80022b10:	00c96363          	bltu	s2,a2,80022b16 <_ZN4core3fmt5write17hf87af17b3ec995a2E+0x3e>
    80022b14:	8a32                	mv	s4,a2
    80022b16:	00043983          	ld	s3,0(s0)
    80022b1a:	100a0363          	beqz	s4,80022c20 <.LBB172_35+0xe6>
    80022b1e:	0009b683          	ld	a3,0(s3)
    80022b22:	0089b603          	ld	a2,8(s3)
    80022b26:	6d98                	ld	a4,24(a1)
    80022b28:	85b6                	mv	a1,a3
    80022b2a:	9702                	jalr	a4
    80022b2c:	10051863          	bnez	a0,80022c3c <.LBB172_35+0x102>
    80022b30:	02043b83          	ld	s7,32(s0)
    80022b34:	01898c13          	addi	s8,s3,24
    80022b38:	4a89                	li	s5,2

0000000080022b3a <.LBB172_35>:
    80022b3a:	fffffb17          	auipc	s6,0xfffff
    80022b3e:	57ab0b13          	addi	s6,s6,1402 # 800220b4 <_ZN4core3ops8function6FnOnce9call_once17h6147212214d3120cE>
    80022b42:	8452                	mv	s0,s4
    80022b44:	5488                	lw	a0,40(s1)
    80022b46:	da2a                	sw	a0,52(sp)
    80022b48:	03048503          	lb	a0,48(s1)
    80022b4c:	02a10c23          	sb	a0,56(sp)
    80022b50:	54c8                	lw	a0,44(s1)
    80022b52:	d82a                	sw	a0,48(sp)
    80022b54:	6c90                	ld	a2,24(s1)
    80022b56:	7088                	ld	a0,32(s1)
    80022b58:	ce09                	beqz	a2,80022b72 <.LBB172_35+0x38>
    80022b5a:	4581                	li	a1,0
    80022b5c:	01560c63          	beq	a2,s5,80022b74 <.LBB172_35+0x3a>
    80022b60:	0512                	slli	a0,a0,0x4
    80022b62:	955e                	add	a0,a0,s7
    80022b64:	650c                	ld	a1,8(a0)
    80022b66:	01658463          	beq	a1,s6,80022b6e <.LBB172_35+0x34>
    80022b6a:	4581                	li	a1,0
    80022b6c:	a021                	j	80022b74 <.LBB172_35+0x3a>
    80022b6e:	6108                	ld	a0,0(a0)
    80022b70:	6108                	ld	a0,0(a0)
    80022b72:	4585                	li	a1,1
    80022b74:	e02e                	sd	a1,0(sp)
    80022b76:	e42a                	sd	a0,8(sp)
    80022b78:	6490                	ld	a2,8(s1)
    80022b7a:	6888                	ld	a0,16(s1)
    80022b7c:	ce09                	beqz	a2,80022b96 <.LBB172_35+0x5c>
    80022b7e:	4581                	li	a1,0
    80022b80:	01560c63          	beq	a2,s5,80022b98 <.LBB172_35+0x5e>
    80022b84:	0512                	slli	a0,a0,0x4
    80022b86:	955e                	add	a0,a0,s7
    80022b88:	650c                	ld	a1,8(a0)
    80022b8a:	01658463          	beq	a1,s6,80022b92 <.LBB172_35+0x58>
    80022b8e:	4581                	li	a1,0
    80022b90:	a021                	j	80022b98 <.LBB172_35+0x5e>
    80022b92:	6108                	ld	a0,0(a0)
    80022b94:	6108                	ld	a0,0(a0)
    80022b96:	4585                	li	a1,1
    80022b98:	e82e                	sd	a1,16(sp)
    80022b9a:	ec2a                	sd	a0,24(sp)
    80022b9c:	6088                	ld	a0,0(s1)
    80022b9e:	0512                	slli	a0,a0,0x4
    80022ba0:	955e                	add	a0,a0,s7
    80022ba2:	6510                	ld	a2,8(a0)
    80022ba4:	6108                	ld	a0,0(a0)
    80022ba6:	858a                	mv	a1,sp
    80022ba8:	9602                	jalr	a2
    80022baa:	e949                	bnez	a0,80022c3c <.LBB172_35+0x102>
    80022bac:	147d                	addi	s0,s0,-1
    80022bae:	c835                	beqz	s0,80022c22 <.LBB172_35+0xe8>
    80022bb0:	76a2                	ld	a3,40(sp)
    80022bb2:	7502                	ld	a0,32(sp)
    80022bb4:	ff8c3583          	ld	a1,-8(s8)
    80022bb8:	000c3603          	ld	a2,0(s8)
    80022bbc:	6e94                	ld	a3,24(a3)
    80022bbe:	03848493          	addi	s1,s1,56
    80022bc2:	0c41                	addi	s8,s8,16
    80022bc4:	9682                	jalr	a3
    80022bc6:	dd3d                	beqz	a0,80022b44 <.LBB172_35+0xa>
    80022bc8:	a895                	j	80022c3c <.LBB172_35+0x102>
    80022bca:	7410                	ld	a2,40(s0)
    80022bcc:	00843903          	ld	s2,8(s0)
    80022bd0:	8a4a                	mv	s4,s2
    80022bd2:	00c96363          	bltu	s2,a2,80022bd8 <.LBB172_35+0x9e>
    80022bd6:	8a32                	mv	s4,a2
    80022bd8:	00043983          	ld	s3,0(s0)
    80022bdc:	040a0263          	beqz	s4,80022c20 <.LBB172_35+0xe6>
    80022be0:	02043a83          	ld	s5,32(s0)
    80022be4:	0009b683          	ld	a3,0(s3)
    80022be8:	0089b603          	ld	a2,8(s3)
    80022bec:	6d98                	ld	a4,24(a1)
    80022bee:	85b6                	mv	a1,a3
    80022bf0:	9702                	jalr	a4
    80022bf2:	e529                	bnez	a0,80022c3c <.LBB172_35+0x102>
    80022bf4:	4401                	li	s0,0
    80022bf6:	84d2                	mv	s1,s4
    80022bf8:	008a8533          	add	a0,s5,s0
    80022bfc:	6510                	ld	a2,8(a0)
    80022bfe:	6108                	ld	a0,0(a0)
    80022c00:	858a                	mv	a1,sp
    80022c02:	9602                	jalr	a2
    80022c04:	ed05                	bnez	a0,80022c3c <.LBB172_35+0x102>
    80022c06:	14fd                	addi	s1,s1,-1
    80022c08:	cc89                	beqz	s1,80022c22 <.LBB172_35+0xe8>
    80022c0a:	7502                	ld	a0,32(sp)
    80022c0c:	76a2                	ld	a3,40(sp)
    80022c0e:	00898633          	add	a2,s3,s0
    80022c12:	6a0c                	ld	a1,16(a2)
    80022c14:	6e10                	ld	a2,24(a2)
    80022c16:	6e94                	ld	a3,24(a3)
    80022c18:	0441                	addi	s0,s0,16
    80022c1a:	9682                	jalr	a3
    80022c1c:	dd71                	beqz	a0,80022bf8 <.LBB172_35+0xbe>
    80022c1e:	a839                	j	80022c3c <.LBB172_35+0x102>
    80022c20:	4a01                	li	s4,0
    80022c22:	012a7f63          	bgeu	s4,s2,80022c40 <.LBB172_35+0x106>
    80022c26:	7502                	ld	a0,32(sp)
    80022c28:	76a2                	ld	a3,40(sp)
    80022c2a:	004a1593          	slli	a1,s4,0x4
    80022c2e:	00b98633          	add	a2,s3,a1
    80022c32:	620c                	ld	a1,0(a2)
    80022c34:	6610                	ld	a2,8(a2)
    80022c36:	6e94                	ld	a3,24(a3)
    80022c38:	9682                	jalr	a3
    80022c3a:	c119                	beqz	a0,80022c40 <.LBB172_35+0x106>
    80022c3c:	4505                	li	a0,1
    80022c3e:	a011                	j	80022c42 <.LBB172_35+0x108>
    80022c40:	4501                	li	a0,0
    80022c42:	6c06                	ld	s8,64(sp)
    80022c44:	6ba6                	ld	s7,72(sp)
    80022c46:	6b46                	ld	s6,80(sp)
    80022c48:	6ae6                	ld	s5,88(sp)
    80022c4a:	7a06                	ld	s4,96(sp)
    80022c4c:	79a6                	ld	s3,104(sp)
    80022c4e:	7946                	ld	s2,112(sp)
    80022c50:	74e6                	ld	s1,120(sp)
    80022c52:	640a                	ld	s0,128(sp)
    80022c54:	60aa                	ld	ra,136(sp)
    80022c56:	6149                	addi	sp,sp,144
    80022c58:	8082                	ret

Disassembly of section .text._ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E:

0000000080022c5a <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E>:
    80022c5a:	711d                	addi	sp,sp,-96
    80022c5c:	ec86                	sd	ra,88(sp)
    80022c5e:	e8a2                	sd	s0,80(sp)
    80022c60:	e4a6                	sd	s1,72(sp)
    80022c62:	e0ca                	sd	s2,64(sp)
    80022c64:	fc4e                	sd	s3,56(sp)
    80022c66:	f852                	sd	s4,48(sp)
    80022c68:	f456                	sd	s5,40(sp)
    80022c6a:	f05a                	sd	s6,32(sp)
    80022c6c:	ec5e                	sd	s7,24(sp)
    80022c6e:	e862                	sd	s8,16(sp)
    80022c70:	e466                	sd	s9,8(sp)
    80022c72:	e06a                	sd	s10,0(sp)
    80022c74:	89be                	mv	s3,a5
    80022c76:	893a                	mv	s2,a4
    80022c78:	8ab6                	mv	s5,a3
    80022c7a:	8baa                	mv	s7,a0
    80022c7c:	c5b1                	beqz	a1,80022cc8 <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0x6e>
    80022c7e:	030be503          	lwu	a0,48(s7)
    80022c82:	00157593          	andi	a1,a0,1
    80022c86:	00110a37          	lui	s4,0x110
    80022c8a:	c199                	beqz	a1,80022c90 <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0x36>
    80022c8c:	02b00a13          	li	s4,43
    80022c90:	01358433          	add	s0,a1,s3
    80022c94:	00457593          	andi	a1,a0,4
    80022c98:	c1a9                	beqz	a1,80022cda <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0x80>
    80022c9a:	4581                	li	a1,0
    80022c9c:	020a8063          	beqz	s5,80022cbc <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0x62>
    80022ca0:	86d6                	mv	a3,s5
    80022ca2:	8732                	mv	a4,a2
    80022ca4:	00074783          	lbu	a5,0(a4)
    80022ca8:	0705                	addi	a4,a4,1
    80022caa:	0c07f793          	andi	a5,a5,192
    80022cae:	f8078793          	addi	a5,a5,-128
    80022cb2:	00f037b3          	snez	a5,a5
    80022cb6:	16fd                	addi	a3,a3,-1
    80022cb8:	95be                	add	a1,a1,a5
    80022cba:	f6ed                	bnez	a3,80022ca4 <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0x4a>
    80022cbc:	942e                	add	s0,s0,a1
    80022cbe:	8c32                	mv	s8,a2
    80022cc0:	000bb583          	ld	a1,0(s7)
    80022cc4:	ed99                	bnez	a1,80022ce2 <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0x88>
    80022cc6:	a0a9                	j	80022d10 <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0xb6>
    80022cc8:	030be503          	lwu	a0,48(s7)
    80022ccc:	00198413          	addi	s0,s3,1
    80022cd0:	02d00a13          	li	s4,45
    80022cd4:	00457593          	andi	a1,a0,4
    80022cd8:	f1e9                	bnez	a1,80022c9a <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0x40>
    80022cda:	4c01                	li	s8,0
    80022cdc:	000bb583          	ld	a1,0(s7)
    80022ce0:	c985                	beqz	a1,80022d10 <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0xb6>
    80022ce2:	008bb483          	ld	s1,8(s7)
    80022ce6:	02947563          	bgeu	s0,s1,80022d10 <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0xb6>
    80022cea:	8921                	andi	a0,a0,8
    80022cec:	e141                	bnez	a0,80022d6c <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0x112>
    80022cee:	038bc583          	lbu	a1,56(s7)
    80022cf2:	460d                	li	a2,3
    80022cf4:	4505                	li	a0,1
    80022cf6:	00c58363          	beq	a1,a2,80022cfc <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0xa2>
    80022cfa:	852e                	mv	a0,a1
    80022cfc:	00357593          	andi	a1,a0,3
    80022d00:	40848533          	sub	a0,s1,s0
    80022d04:	c9cd                	beqz	a1,80022db6 <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0x15c>
    80022d06:	4605                	li	a2,1
    80022d08:	0ac59a63          	bne	a1,a2,80022dbc <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0x162>
    80022d0c:	4c81                	li	s9,0
    80022d0e:	a865                	j	80022dc6 <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0x16c>
    80022d10:	855e                	mv	a0,s7
    80022d12:	85d2                	mv	a1,s4
    80022d14:	8662                	mv	a2,s8
    80022d16:	86d6                	mv	a3,s5
    80022d18:	00000097          	auipc	ra,0x0
    80022d1c:	1aa080e7          	jalr	426(ra) # 80022ec2 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h8dc03175dafd03baE>
    80022d20:	4b05                	li	s6,1
    80022d22:	c105                	beqz	a0,80022d42 <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0xe8>
    80022d24:	855a                	mv	a0,s6
    80022d26:	6d02                	ld	s10,0(sp)
    80022d28:	6ca2                	ld	s9,8(sp)
    80022d2a:	6c42                	ld	s8,16(sp)
    80022d2c:	6be2                	ld	s7,24(sp)
    80022d2e:	7b02                	ld	s6,32(sp)
    80022d30:	7aa2                	ld	s5,40(sp)
    80022d32:	7a42                	ld	s4,48(sp)
    80022d34:	79e2                	ld	s3,56(sp)
    80022d36:	6906                	ld	s2,64(sp)
    80022d38:	64a6                	ld	s1,72(sp)
    80022d3a:	6446                	ld	s0,80(sp)
    80022d3c:	60e6                	ld	ra,88(sp)
    80022d3e:	6125                	addi	sp,sp,96
    80022d40:	8082                	ret
    80022d42:	028bb583          	ld	a1,40(s7)
    80022d46:	020bb503          	ld	a0,32(s7)
    80022d4a:	6d9c                	ld	a5,24(a1)
    80022d4c:	85ca                	mv	a1,s2
    80022d4e:	864e                	mv	a2,s3
    80022d50:	6d02                	ld	s10,0(sp)
    80022d52:	6ca2                	ld	s9,8(sp)
    80022d54:	6c42                	ld	s8,16(sp)
    80022d56:	6be2                	ld	s7,24(sp)
    80022d58:	7b02                	ld	s6,32(sp)
    80022d5a:	7aa2                	ld	s5,40(sp)
    80022d5c:	7a42                	ld	s4,48(sp)
    80022d5e:	79e2                	ld	s3,56(sp)
    80022d60:	6906                	ld	s2,64(sp)
    80022d62:	64a6                	ld	s1,72(sp)
    80022d64:	6446                	ld	s0,80(sp)
    80022d66:	60e6                	ld	ra,88(sp)
    80022d68:	6125                	addi	sp,sp,96
    80022d6a:	8782                	jr	a5
    80022d6c:	034bec83          	lwu	s9,52(s7)
    80022d70:	03000513          	li	a0,48
    80022d74:	038bcd03          	lbu	s10,56(s7)
    80022d78:	02abaa23          	sw	a0,52(s7)
    80022d7c:	4b05                	li	s6,1
    80022d7e:	036b8c23          	sb	s6,56(s7)
    80022d82:	855e                	mv	a0,s7
    80022d84:	85d2                	mv	a1,s4
    80022d86:	8662                	mv	a2,s8
    80022d88:	86d6                	mv	a3,s5
    80022d8a:	00000097          	auipc	ra,0x0
    80022d8e:	138080e7          	jalr	312(ra) # 80022ec2 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h8dc03175dafd03baE>
    80022d92:	f949                	bnez	a0,80022d24 <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0xca>
    80022d94:	038bc583          	lbu	a1,56(s7)
    80022d98:	460d                	li	a2,3
    80022d9a:	4505                	li	a0,1
    80022d9c:	00c58363          	beq	a1,a2,80022da2 <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0x148>
    80022da0:	852e                	mv	a0,a1
    80022da2:	00357593          	andi	a1,a0,3
    80022da6:	40848533          	sub	a0,s1,s0
    80022daa:	c5d9                	beqz	a1,80022e38 <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0x1de>
    80022dac:	4605                	li	a2,1
    80022dae:	08c59863          	bne	a1,a2,80022e3e <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0x1e4>
    80022db2:	4a01                	li	s4,0
    80022db4:	a851                	j	80022e48 <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0x1ee>
    80022db6:	8caa                	mv	s9,a0
    80022db8:	4501                	li	a0,0
    80022dba:	a031                	j	80022dc6 <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0x16c>
    80022dbc:	00150593          	addi	a1,a0,1
    80022dc0:	8105                	srli	a0,a0,0x1
    80022dc2:	0015dc93          	srli	s9,a1,0x1
    80022dc6:	020bbb03          	ld	s6,32(s7)
    80022dca:	028bb403          	ld	s0,40(s7)
    80022dce:	034bed03          	lwu	s10,52(s7)
    80022dd2:	00150493          	addi	s1,a0,1
    80022dd6:	14fd                	addi	s1,s1,-1
    80022dd8:	c499                	beqz	s1,80022de6 <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0x18c>
    80022dda:	7010                	ld	a2,32(s0)
    80022ddc:	855a                	mv	a0,s6
    80022dde:	85ea                	mv	a1,s10
    80022de0:	9602                	jalr	a2
    80022de2:	d975                	beqz	a0,80022dd6 <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0x17c>
    80022de4:	a049                	j	80022e66 <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0x20c>
    80022de6:	000d051b          	sext.w	a0,s10
    80022dea:	001105b7          	lui	a1,0x110
    80022dee:	4b05                	li	s6,1
    80022df0:	f2b50ae3          	beq	a0,a1,80022d24 <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0xca>
    80022df4:	855e                	mv	a0,s7
    80022df6:	85d2                	mv	a1,s4
    80022df8:	8662                	mv	a2,s8
    80022dfa:	86d6                	mv	a3,s5
    80022dfc:	00000097          	auipc	ra,0x0
    80022e00:	0c6080e7          	jalr	198(ra) # 80022ec2 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h8dc03175dafd03baE>
    80022e04:	f105                	bnez	a0,80022d24 <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0xca>
    80022e06:	028bb583          	ld	a1,40(s7)
    80022e0a:	020bb503          	ld	a0,32(s7)
    80022e0e:	6d94                	ld	a3,24(a1)
    80022e10:	85ca                	mv	a1,s2
    80022e12:	864e                	mv	a2,s3
    80022e14:	9682                	jalr	a3
    80022e16:	f519                	bnez	a0,80022d24 <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0xca>
    80022e18:	020bb903          	ld	s2,32(s7)
    80022e1c:	028bb403          	ld	s0,40(s7)
    80022e20:	4481                	li	s1,0
    80022e22:	089c8c63          	beq	s9,s1,80022eba <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0x260>
    80022e26:	7010                	ld	a2,32(s0)
    80022e28:	0485                	addi	s1,s1,1
    80022e2a:	854a                	mv	a0,s2
    80022e2c:	85ea                	mv	a1,s10
    80022e2e:	9602                	jalr	a2
    80022e30:	d96d                	beqz	a0,80022e22 <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0x1c8>
    80022e32:	fff48513          	addi	a0,s1,-1
    80022e36:	a059                	j	80022ebc <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0x262>
    80022e38:	8a2a                	mv	s4,a0
    80022e3a:	4501                	li	a0,0
    80022e3c:	a031                	j	80022e48 <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0x1ee>
    80022e3e:	00150593          	addi	a1,a0,1
    80022e42:	8105                	srli	a0,a0,0x1
    80022e44:	0015da13          	srli	s4,a1,0x1
    80022e48:	020bbb03          	ld	s6,32(s7)
    80022e4c:	028bb403          	ld	s0,40(s7)
    80022e50:	034bea83          	lwu	s5,52(s7)
    80022e54:	00150493          	addi	s1,a0,1
    80022e58:	14fd                	addi	s1,s1,-1
    80022e5a:	c881                	beqz	s1,80022e6a <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0x210>
    80022e5c:	7010                	ld	a2,32(s0)
    80022e5e:	855a                	mv	a0,s6
    80022e60:	85d6                	mv	a1,s5
    80022e62:	9602                	jalr	a2
    80022e64:	d975                	beqz	a0,80022e58 <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0x1fe>
    80022e66:	4b05                	li	s6,1
    80022e68:	bd75                	j	80022d24 <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0xca>
    80022e6a:	000a851b          	sext.w	a0,s5
    80022e6e:	001105b7          	lui	a1,0x110
    80022e72:	4b05                	li	s6,1
    80022e74:	eab508e3          	beq	a0,a1,80022d24 <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0xca>
    80022e78:	028bb583          	ld	a1,40(s7)
    80022e7c:	020bb503          	ld	a0,32(s7)
    80022e80:	6d94                	ld	a3,24(a1)
    80022e82:	85ca                	mv	a1,s2
    80022e84:	864e                	mv	a2,s3
    80022e86:	9682                	jalr	a3
    80022e88:	e8051ee3          	bnez	a0,80022d24 <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0xca>
    80022e8c:	020bb903          	ld	s2,32(s7)
    80022e90:	028bb483          	ld	s1,40(s7)
    80022e94:	4401                	li	s0,0
    80022e96:	008a0c63          	beq	s4,s0,80022eae <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0x254>
    80022e9a:	7090                	ld	a2,32(s1)
    80022e9c:	0405                	addi	s0,s0,1
    80022e9e:	854a                	mv	a0,s2
    80022ea0:	85d6                	mv	a1,s5
    80022ea2:	9602                	jalr	a2
    80022ea4:	d96d                	beqz	a0,80022e96 <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0x23c>
    80022ea6:	fff40513          	addi	a0,s0,-1
    80022eaa:	e7456de3          	bltu	a0,s4,80022d24 <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0xca>
    80022eae:	4b01                	li	s6,0
    80022eb0:	039baa23          	sw	s9,52(s7)
    80022eb4:	03ab8c23          	sb	s10,56(s7)
    80022eb8:	b5b5                	j	80022d24 <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0xca>
    80022eba:	8566                	mv	a0,s9
    80022ebc:	01953b33          	sltu	s6,a0,s9
    80022ec0:	b595                	j	80022d24 <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0xca>

Disassembly of section .text._ZN4core3fmt9Formatter12pad_integral12write_prefix17h8dc03175dafd03baE:

0000000080022ec2 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h8dc03175dafd03baE>:
    80022ec2:	1101                	addi	sp,sp,-32
    80022ec4:	ec06                	sd	ra,24(sp)
    80022ec6:	e822                	sd	s0,16(sp)
    80022ec8:	e426                	sd	s1,8(sp)
    80022eca:	e04a                	sd	s2,0(sp)
    80022ecc:	0005871b          	sext.w	a4,a1
    80022ed0:	001107b7          	lui	a5,0x110
    80022ed4:	8936                	mv	s2,a3
    80022ed6:	84b2                	mv	s1,a2
    80022ed8:	842a                	mv	s0,a0
    80022eda:	00f70963          	beq	a4,a5,80022eec <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h8dc03175dafd03baE+0x2a>
    80022ede:	7410                	ld	a2,40(s0)
    80022ee0:	7008                	ld	a0,32(s0)
    80022ee2:	7210                	ld	a2,32(a2)
    80022ee4:	9602                	jalr	a2
    80022ee6:	85aa                	mv	a1,a0
    80022ee8:	4505                	li	a0,1
    80022eea:	ed91                	bnez	a1,80022f06 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h8dc03175dafd03baE+0x44>
    80022eec:	cc81                	beqz	s1,80022f04 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h8dc03175dafd03baE+0x42>
    80022eee:	740c                	ld	a1,40(s0)
    80022ef0:	7008                	ld	a0,32(s0)
    80022ef2:	6d9c                	ld	a5,24(a1)
    80022ef4:	85a6                	mv	a1,s1
    80022ef6:	864a                	mv	a2,s2
    80022ef8:	6902                	ld	s2,0(sp)
    80022efa:	64a2                	ld	s1,8(sp)
    80022efc:	6442                	ld	s0,16(sp)
    80022efe:	60e2                	ld	ra,24(sp)
    80022f00:	6105                	addi	sp,sp,32
    80022f02:	8782                	jr	a5
    80022f04:	4501                	li	a0,0
    80022f06:	6902                	ld	s2,0(sp)
    80022f08:	64a2                	ld	s1,8(sp)
    80022f0a:	6442                	ld	s0,16(sp)
    80022f0c:	60e2                	ld	ra,24(sp)
    80022f0e:	6105                	addi	sp,sp,32
    80022f10:	8082                	ret

Disassembly of section .text._ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE:

0000000080022f12 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE>:
    80022f12:	715d                	addi	sp,sp,-80
    80022f14:	e486                	sd	ra,72(sp)
    80022f16:	e0a2                	sd	s0,64(sp)
    80022f18:	fc26                	sd	s1,56(sp)
    80022f1a:	f84a                	sd	s2,48(sp)
    80022f1c:	f44e                	sd	s3,40(sp)
    80022f1e:	f052                	sd	s4,32(sp)
    80022f20:	ec56                	sd	s5,24(sp)
    80022f22:	e85a                	sd	s6,16(sp)
    80022f24:	e45e                	sd	s7,8(sp)
    80022f26:	6918                	ld	a4,16(a0)
    80022f28:	6114                	ld	a3,0(a0)
    80022f2a:	89b2                	mv	s3,a2
    80022f2c:	892e                	mv	s2,a1
    80022f2e:	fff70593          	addi	a1,a4,-1
    80022f32:	4605                	li	a2,1
    80022f34:	0015b593          	seqz	a1,a1
    80022f38:	00c69463          	bne	a3,a2,80022f40 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x2e>
    80022f3c:	e581                	bnez	a1,80022f44 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x32>
    80022f3e:	a235                	j	8002306a <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x158>
    80022f40:	18058c63          	beqz	a1,800230d8 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x1c6>
    80022f44:	6d18                	ld	a4,24(a0)
    80022f46:	fff68593          	addi	a1,a3,-1
    80022f4a:	0015b293          	seqz	t0,a1
    80022f4e:	013904b3          	add	s1,s2,s3
    80022f52:	4601                	li	a2,0
    80022f54:	cb45                	beqz	a4,80023004 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0xf2>
    80022f56:	5e7d                	li	t3,-1
    80022f58:	0e000393          	li	t2,224
    80022f5c:	0f000313          	li	t1,240
    80022f60:	001c0837          	lui	a6,0x1c0
    80022f64:	001108b7          	lui	a7,0x110
    80022f68:	844a                	mv	s0,s2
    80022f6a:	0e940e63          	beq	s0,s1,80023066 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x154>
    80022f6e:	00040683          	lb	a3,0(s0)
    80022f72:	00140593          	addi	a1,s0,1
    80022f76:	00de5a63          	bge	t3,a3,80022f8a <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x78>
    80022f7a:	86ae                	mv	a3,a1
    80022f7c:	408687b3          	sub	a5,a3,s0
    80022f80:	177d                	addi	a4,a4,-1
    80022f82:	963e                	add	a2,a2,a5
    80022f84:	8436                	mv	s0,a3
    80022f86:	f375                	bnez	a4,80022f6a <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x58>
    80022f88:	a8bd                	j	80023006 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0xf4>
    80022f8a:	00958d63          	beq	a1,s1,80022fa4 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x92>
    80022f8e:	00144783          	lbu	a5,1(s0)
    80022f92:	00240593          	addi	a1,s0,2
    80022f96:	03f7fe93          	andi	t4,a5,63
    80022f9a:	0ff6f793          	andi	a5,a3,255
    80022f9e:	fc77eee3          	bltu	a5,t2,80022f7a <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x68>
    80022fa2:	a039                	j	80022fb0 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x9e>
    80022fa4:	4e81                	li	t4,0
    80022fa6:	85a6                	mv	a1,s1
    80022fa8:	0ff6f793          	andi	a5,a3,255
    80022fac:	fc77e7e3          	bltu	a5,t2,80022f7a <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x68>
    80022fb0:	00958a63          	beq	a1,s1,80022fc4 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0xb2>
    80022fb4:	0005c683          	lbu	a3,0(a1) # 110000 <.Lline_table_start0+0xd94fe>
    80022fb8:	0585                	addi	a1,a1,1
    80022fba:	03f6ff13          	andi	t5,a3,63
    80022fbe:	fa67eee3          	bltu	a5,t1,80022f7a <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x68>
    80022fc2:	a029                	j	80022fcc <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0xba>
    80022fc4:	4f01                	li	t5,0
    80022fc6:	85a6                	mv	a1,s1
    80022fc8:	fa67e9e3          	bltu	a5,t1,80022f7a <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x68>
    80022fcc:	00958a63          	beq	a1,s1,80022fe0 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0xce>
    80022fd0:	0005cf83          	lbu	t6,0(a1)
    80022fd4:	00158693          	addi	a3,a1,1
    80022fd8:	03ffff93          	andi	t6,t6,63
    80022fdc:	85b6                	mv	a1,a3
    80022fde:	a019                	j	80022fe4 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0xd2>
    80022fe0:	4f81                	li	t6,0
    80022fe2:	86a6                	mv	a3,s1
    80022fe4:	07ca                	slli	a5,a5,0x12
    80022fe6:	0107fa33          	and	s4,a5,a6
    80022fea:	00ce9793          	slli	a5,t4,0xc
    80022fee:	006f1e93          	slli	t4,t5,0x6
    80022ff2:	0147e7b3          	or	a5,a5,s4
    80022ff6:	01d7e7b3          	or	a5,a5,t4
    80022ffa:	01f7e7b3          	or	a5,a5,t6
    80022ffe:	f7179fe3          	bne	a5,a7,80022f7c <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x6a>
    80023002:	a095                	j	80023066 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x154>
    80023004:	85ca                	mv	a1,s2
    80023006:	06958063          	beq	a1,s1,80023066 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x154>
    8002300a:	00058683          	lb	a3,0(a1)
    8002300e:	577d                	li	a4,-1
    80023010:	02d75763          	bge	a4,a3,8002303e <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x12c>
    80023014:	00163593          	seqz	a1,a2
    80023018:	013646b3          	xor	a3,a2,s3
    8002301c:	0016b693          	seqz	a3,a3
    80023020:	8dd5                	or	a1,a1,a3
    80023022:	e999                	bnez	a1,80023038 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x126>
    80023024:	03367d63          	bgeu	a2,s3,8002305e <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x14c>
    80023028:	00c905b3          	add	a1,s2,a2
    8002302c:	00058583          	lb	a1,0(a1)
    80023030:	fc000693          	li	a3,-64
    80023034:	02d5c563          	blt	a1,a3,8002305e <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x14c>
    80023038:	85ca                	mv	a1,s2
    8002303a:	e585                	bnez	a1,80023062 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x150>
    8002303c:	a02d                	j	80023066 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x154>
    8002303e:	00158793          	addi	a5,a1,1
    80023042:	0ff6f713          	andi	a4,a3,255
    80023046:	10978e63          	beq	a5,s1,80023162 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x250>
    8002304a:	0015c683          	lbu	a3,1(a1)
    8002304e:	0589                	addi	a1,a1,2
    80023050:	03f6f693          	andi	a3,a3,63
    80023054:	0e000793          	li	a5,224
    80023058:	10f77b63          	bgeu	a4,a5,8002316e <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x25c>
    8002305c:	bf65                	j	80023014 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x102>
    8002305e:	4581                	li	a1,0
    80023060:	c199                	beqz	a1,80023066 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x154>
    80023062:	892e                	mv	s2,a1
    80023064:	89b2                	mv	s3,a2
    80023066:	06028963          	beqz	t0,800230d8 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x1c6>
    8002306a:	04098463          	beqz	s3,800230b2 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x1a0>
    8002306e:	4601                	li	a2,0
    80023070:	85ce                	mv	a1,s3
    80023072:	86ca                	mv	a3,s2
    80023074:	0006c703          	lbu	a4,0(a3)
    80023078:	0685                	addi	a3,a3,1
    8002307a:	0c077713          	andi	a4,a4,192
    8002307e:	f8070713          	addi	a4,a4,-128
    80023082:	00e03733          	snez	a4,a4
    80023086:	15fd                	addi	a1,a1,-1
    80023088:	963a                	add	a2,a2,a4
    8002308a:	f5ed                	bnez	a1,80023074 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x162>
    8002308c:	650c                	ld	a1,8(a0)
    8002308e:	04b67563          	bgeu	a2,a1,800230d8 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x1c6>
    80023092:	4601                	li	a2,0
    80023094:	86ce                	mv	a3,s3
    80023096:	874a                	mv	a4,s2
    80023098:	00074783          	lbu	a5,0(a4)
    8002309c:	0705                	addi	a4,a4,1
    8002309e:	0c07f793          	andi	a5,a5,192
    800230a2:	f8078793          	addi	a5,a5,-128 # 10ff80 <.Lline_table_start0+0xd947e>
    800230a6:	00f037b3          	snez	a5,a5
    800230aa:	16fd                	addi	a3,a3,-1
    800230ac:	963e                	add	a2,a2,a5
    800230ae:	f6ed                	bnez	a3,80023098 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x186>
    800230b0:	a021                	j	800230b8 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x1a6>
    800230b2:	650c                	ld	a1,8(a0)
    800230b4:	4601                	li	a2,0
    800230b6:	c18d                	beqz	a1,800230d8 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x1c6>
    800230b8:	03854683          	lbu	a3,56(a0)
    800230bc:	478d                	li	a5,3
    800230be:	4701                	li	a4,0
    800230c0:	00f68363          	beq	a3,a5,800230c6 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x1b4>
    800230c4:	8736                	mv	a4,a3
    800230c6:	00377693          	andi	a3,a4,3
    800230ca:	8d91                	sub	a1,a1,a2
    800230cc:	c695                	beqz	a3,800230f8 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x1e6>
    800230ce:	4605                	li	a2,1
    800230d0:	02c69763          	bne	a3,a2,800230fe <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x1ec>
    800230d4:	4a81                	li	s5,0
    800230d6:	a80d                	j	80023108 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x1f6>
    800230d8:	750c                	ld	a1,40(a0)
    800230da:	7108                	ld	a0,32(a0)
    800230dc:	6d9c                	ld	a5,24(a1)
    800230de:	85ca                	mv	a1,s2
    800230e0:	864e                	mv	a2,s3
    800230e2:	6ba2                	ld	s7,8(sp)
    800230e4:	6b42                	ld	s6,16(sp)
    800230e6:	6ae2                	ld	s5,24(sp)
    800230e8:	7a02                	ld	s4,32(sp)
    800230ea:	79a2                	ld	s3,40(sp)
    800230ec:	7942                	ld	s2,48(sp)
    800230ee:	74e2                	ld	s1,56(sp)
    800230f0:	6406                	ld	s0,64(sp)
    800230f2:	60a6                	ld	ra,72(sp)
    800230f4:	6161                	addi	sp,sp,80
    800230f6:	8782                	jr	a5
    800230f8:	8aae                	mv	s5,a1
    800230fa:	4581                	li	a1,0
    800230fc:	a031                	j	80023108 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x1f6>
    800230fe:	00158613          	addi	a2,a1,1
    80023102:	8185                	srli	a1,a1,0x1
    80023104:	00165a93          	srli	s5,a2,0x1
    80023108:	02053b03          	ld	s6,32(a0)
    8002310c:	02853b83          	ld	s7,40(a0)
    80023110:	03456403          	lwu	s0,52(a0)
    80023114:	00158493          	addi	s1,a1,1
    80023118:	14fd                	addi	s1,s1,-1
    8002311a:	c889                	beqz	s1,8002312c <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x21a>
    8002311c:	020bb603          	ld	a2,32(s7)
    80023120:	855a                	mv	a0,s6
    80023122:	85a2                	mv	a1,s0
    80023124:	9602                	jalr	a2
    80023126:	d96d                	beqz	a0,80023118 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x206>
    80023128:	4a05                	li	s4,1
    8002312a:	a095                	j	8002318e <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x27c>
    8002312c:	0004051b          	sext.w	a0,s0
    80023130:	001105b7          	lui	a1,0x110
    80023134:	4a05                	li	s4,1
    80023136:	04b50c63          	beq	a0,a1,8002318e <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x27c>
    8002313a:	018bb683          	ld	a3,24(s7)
    8002313e:	855a                	mv	a0,s6
    80023140:	85ca                	mv	a1,s2
    80023142:	864e                	mv	a2,s3
    80023144:	9682                	jalr	a3
    80023146:	e521                	bnez	a0,8002318e <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x27c>
    80023148:	4481                	li	s1,0
    8002314a:	029a8f63          	beq	s5,s1,80023188 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x276>
    8002314e:	020bb603          	ld	a2,32(s7)
    80023152:	0485                	addi	s1,s1,1
    80023154:	855a                	mv	a0,s6
    80023156:	85a2                	mv	a1,s0
    80023158:	9602                	jalr	a2
    8002315a:	d965                	beqz	a0,8002314a <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x238>
    8002315c:	fff48513          	addi	a0,s1,-1
    80023160:	a02d                	j	8002318a <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x278>
    80023162:	4681                	li	a3,0
    80023164:	85a6                	mv	a1,s1
    80023166:	0e000793          	li	a5,224
    8002316a:	eaf765e3          	bltu	a4,a5,80023014 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x102>
    8002316e:	02958c63          	beq	a1,s1,800231a6 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x294>
    80023172:	0005c403          	lbu	s0,0(a1) # 110000 <.Lline_table_start0+0xd94fe>
    80023176:	00158793          	addi	a5,a1,1
    8002317a:	03f47593          	andi	a1,s0,63
    8002317e:	0f000413          	li	s0,240
    80023182:	02877863          	bgeu	a4,s0,800231b2 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x2a0>
    80023186:	b579                	j	80023014 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x102>
    80023188:	8556                	mv	a0,s5
    8002318a:	01553a33          	sltu	s4,a0,s5
    8002318e:	8552                	mv	a0,s4
    80023190:	6ba2                	ld	s7,8(sp)
    80023192:	6b42                	ld	s6,16(sp)
    80023194:	6ae2                	ld	s5,24(sp)
    80023196:	7a02                	ld	s4,32(sp)
    80023198:	79a2                	ld	s3,40(sp)
    8002319a:	7942                	ld	s2,48(sp)
    8002319c:	74e2                	ld	s1,56(sp)
    8002319e:	6406                	ld	s0,64(sp)
    800231a0:	60a6                	ld	ra,72(sp)
    800231a2:	6161                	addi	sp,sp,80
    800231a4:	8082                	ret
    800231a6:	4581                	li	a1,0
    800231a8:	87a6                	mv	a5,s1
    800231aa:	0f000413          	li	s0,240
    800231ae:	e68763e3          	bltu	a4,s0,80023014 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x102>
    800231b2:	00978763          	beq	a5,s1,800231c0 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x2ae>
    800231b6:	0007c783          	lbu	a5,0(a5)
    800231ba:	03f7f793          	andi	a5,a5,63
    800231be:	a011                	j	800231c2 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x2b0>
    800231c0:	4781                	li	a5,0
    800231c2:	074a                	slli	a4,a4,0x12
    800231c4:	001c04b7          	lui	s1,0x1c0
    800231c8:	8f65                	and	a4,a4,s1
    800231ca:	06b2                	slli	a3,a3,0xc
    800231cc:	059a                	slli	a1,a1,0x6
    800231ce:	8ed9                	or	a3,a3,a4
    800231d0:	8dd5                	or	a1,a1,a3
    800231d2:	8ddd                	or	a1,a1,a5
    800231d4:	001106b7          	lui	a3,0x110
    800231d8:	e8d587e3          	beq	a1,a3,80023066 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x154>
    800231dc:	bd25                	j	80023014 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x102>

Disassembly of section .text._ZN4core3fmt9Formatter15debug_lower_hex17h7c86defbf028d215E:

00000000800231de <_ZN4core3fmt9Formatter15debug_lower_hex17h7c86defbf028d215E>:
    800231de:	03054503          	lbu	a0,48(a0)
    800231e2:	8941                	andi	a0,a0,16
    800231e4:	8111                	srli	a0,a0,0x4
    800231e6:	8082                	ret

Disassembly of section .text._ZN4core3fmt9Formatter15debug_upper_hex17hdf276d50be1e3931E:

00000000800231e8 <_ZN4core3fmt9Formatter15debug_upper_hex17hdf276d50be1e3931E>:
    800231e8:	03054503          	lbu	a0,48(a0)
    800231ec:	02057513          	andi	a0,a0,32
    800231f0:	8115                	srli	a0,a0,0x5
    800231f2:	8082                	ret

Disassembly of section .text._ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E:

00000000800231f4 <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>:
    800231f4:	1101                	addi	sp,sp,-32
    800231f6:	ec06                	sd	ra,24(sp)
    800231f8:	e822                	sd	s0,16(sp)
    800231fa:	e426                	sd	s1,8(sp)
    800231fc:	e04a                	sd	s2,0(sp)
    800231fe:	842e                	mv	s0,a1
    80023200:	7598                	ld	a4,40(a1)
    80023202:	718c                	ld	a1,32(a1)
    80023204:	6f18                	ld	a4,24(a4)
    80023206:	8936                	mv	s2,a3
    80023208:	84aa                	mv	s1,a0
    8002320a:	852e                	mv	a0,a1
    8002320c:	85b2                	mv	a1,a2
    8002320e:	8636                	mv	a2,a3
    80023210:	9702                	jalr	a4
    80023212:	00193593          	seqz	a1,s2
    80023216:	e080                	sd	s0,0(s1)
    80023218:	00a48823          	sb	a0,16(s1) # 1c0010 <.Lline_table_start0+0x18950e>
    8002321c:	0004b423          	sd	zero,8(s1)
    80023220:	00b488a3          	sb	a1,17(s1)
    80023224:	6902                	ld	s2,0(sp)
    80023226:	64a2                	ld	s1,8(sp)
    80023228:	6442                	ld	s0,16(sp)
    8002322a:	60e2                	ld	ra,24(sp)
    8002322c:	6105                	addi	sp,sp,32
    8002322e:	8082                	ret

Disassembly of section .text._ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h399f9f006bebcceeE:

0000000080023230 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h399f9f006bebcceeE>:
    80023230:	7131                	addi	sp,sp,-192
    80023232:	fd06                	sd	ra,184(sp)
    80023234:	f922                	sd	s0,176(sp)
    80023236:	f526                	sd	s1,168(sp)
    80023238:	f14a                	sd	s2,160(sp)
    8002323a:	ed4e                	sd	s3,152(sp)
    8002323c:	e952                	sd	s4,144(sp)
    8002323e:	e556                	sd	s5,136(sp)
    80023240:	e15a                	sd	s6,128(sp)
    80023242:	fcde                	sd	s7,120(sp)
    80023244:	f8e2                	sd	s8,112(sp)
    80023246:	f4e6                	sd	s9,104(sp)
    80023248:	f0ea                	sd	s10,96(sp)
    8002324a:	ecee                	sd	s11,88(sp)
    8002324c:	7614                	ld	a3,40(a2)
    8002324e:	7200                	ld	s0,32(a2)
    80023250:	e0b6                	sd	a3,64(sp)
    80023252:	729c                	ld	a5,32(a3)
    80023254:	89ae                	mv	s3,a1
    80023256:	e4aa                	sd	a0,72(sp)
    80023258:	02200593          	li	a1,34
    8002325c:	8522                	mv	a0,s0
    8002325e:	e8be                	sd	a5,80(sp)
    80023260:	9782                	jalr	a5
    80023262:	c10d                	beqz	a0,80023284 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h399f9f006bebcceeE+0x54>
    80023264:	4505                	li	a0,1
    80023266:	6de6                	ld	s11,88(sp)
    80023268:	7d06                	ld	s10,96(sp)
    8002326a:	7ca6                	ld	s9,104(sp)
    8002326c:	7c46                	ld	s8,112(sp)
    8002326e:	7be6                	ld	s7,120(sp)
    80023270:	6b0a                	ld	s6,128(sp)
    80023272:	6aaa                	ld	s5,136(sp)
    80023274:	6a4a                	ld	s4,144(sp)
    80023276:	69ea                	ld	s3,152(sp)
    80023278:	790a                	ld	s2,160(sp)
    8002327a:	74aa                	ld	s1,168(sp)
    8002327c:	744a                	ld	s0,176(sp)
    8002327e:	70ea                	ld	ra,184(sp)
    80023280:	6129                	addi	sp,sp,192
    80023282:	8082                	ret
    80023284:	4481                	li	s1,0
    80023286:	3a098263          	beqz	s3,8002362a <.LBB201_67+0x3e>
    8002328a:	4a01                	li	s4,0
    8002328c:	6926                	ld	s2,72(sp)
    8002328e:	01390b33          	add	s6,s2,s3
    80023292:	f0100513          	li	a0,-255
    80023296:	1502                	slli	a0,a0,0x20
    80023298:	fff50c93          	addi	s9,a0,-1
    8002329c:	4bb1                	li	s7,12
    8002329e:	4d89                	li	s11,2
    800232a0:	fbf00813          	li	a6,-65
    800232a4:	05555537          	lui	a0,0x5555
    800232a8:	5555051b          	addiw	a0,a0,1365
    800232ac:	0532                	slli	a0,a0,0xc
    800232ae:	55550513          	addi	a0,a0,1365 # 5555555 <.Lline_table_start0+0x551ea53>
    800232b2:	0532                	slli	a0,a0,0xc
    800232b4:	55550513          	addi	a0,a0,1365
    800232b8:	0532                	slli	a0,a0,0xc
    800232ba:	55550513          	addi	a0,a0,1365
    800232be:	f02a                	sd	a0,32(sp)
    800232c0:	03333537          	lui	a0,0x3333
    800232c4:	3335051b          	addiw	a0,a0,819
    800232c8:	0532                	slli	a0,a0,0xc
    800232ca:	33350513          	addi	a0,a0,819 # 3333333 <.Lline_table_start0+0x32fc831>
    800232ce:	0532                	slli	a0,a0,0xc
    800232d0:	33350513          	addi	a0,a0,819
    800232d4:	0532                	slli	a0,a0,0xc
    800232d6:	33350513          	addi	a0,a0,819
    800232da:	ec2a                	sd	a0,24(sp)
    800232dc:	00f0f537          	lui	a0,0xf0f
    800232e0:	0f15051b          	addiw	a0,a0,241
    800232e4:	0532                	slli	a0,a0,0xc
    800232e6:	f0f50513          	addi	a0,a0,-241 # f0ef0f <.Lline_table_start0+0xed840d>
    800232ea:	0532                	slli	a0,a0,0xc
    800232ec:	0f150513          	addi	a0,a0,241
    800232f0:	0532                	slli	a0,a0,0xc
    800232f2:	f0f50513          	addi	a0,a0,-241
    800232f6:	e82a                	sd	a0,16(sp)
    800232f8:	01010537          	lui	a0,0x1010
    800232fc:	1015051b          	addiw	a0,a0,257
    80023300:	0542                	slli	a0,a0,0x10
    80023302:	10150513          	addi	a0,a0,257 # 1010101 <.Lline_table_start0+0xfd95ff>
    80023306:	0542                	slli	a0,a0,0x10
    80023308:	10150513          	addi	a0,a0,257
    8002330c:	e42a                	sd	a0,8(sp)
    8002330e:	4515                	li	a0,5
    80023310:	1502                	slli	a0,a0,0x20
    80023312:	e02a                	sd	a0,0(sp)
    80023314:	87ca                	mv	a5,s2
    80023316:	f45a                	sd	s6,40(sp)
    80023318:	00090503          	lb	a0,0(s2)
    8002331c:	00190693          	addi	a3,s2,1
    80023320:	0ff57c13          	andi	s8,a0,255
    80023324:	00054463          	bltz	a0,8002332c <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h399f9f006bebcceeE+0xfc>
    80023328:	8936                	mv	s2,a3
    8002332a:	a869                	j	800233c4 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h399f9f006bebcceeE+0x194>
    8002332c:	05668663          	beq	a3,s6,80023378 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h399f9f006bebcceeE+0x148>
    80023330:	00194503          	lbu	a0,1(s2)
    80023334:	0909                	addi	s2,s2,2
    80023336:	03f57593          	andi	a1,a0,63
    8002333a:	01fc7513          	andi	a0,s8,31
    8002333e:	0e000613          	li	a2,224
    80023342:	04cc6363          	bltu	s8,a2,80023388 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h399f9f006bebcceeE+0x158>
    80023346:	05690663          	beq	s2,s6,80023392 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h399f9f006bebcceeE+0x162>
    8002334a:	00094603          	lbu	a2,0(s2)
    8002334e:	00190693          	addi	a3,s2,1
    80023352:	03f67613          	andi	a2,a2,63
    80023356:	8936                	mv	s2,a3
    80023358:	059a                	slli	a1,a1,0x6
    8002335a:	8dd1                	or	a1,a1,a2
    8002335c:	0f000613          	li	a2,240
    80023360:	04cc6163          	bltu	s8,a2,800233a2 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h399f9f006bebcceeE+0x172>
    80023364:	05668363          	beq	a3,s6,800233aa <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h399f9f006bebcceeE+0x17a>
    80023368:	0006c603          	lbu	a2,0(a3) # 110000 <.Lline_table_start0+0xd94fe>
    8002336c:	00168913          	addi	s2,a3,1
    80023370:	03f67613          	andi	a2,a2,63
    80023374:	86ca                	mv	a3,s2
    80023376:	a81d                	j	800233ac <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h399f9f006bebcceeE+0x17c>
    80023378:	4581                	li	a1,0
    8002337a:	895a                	mv	s2,s6
    8002337c:	01fc7513          	andi	a0,s8,31
    80023380:	0e000613          	li	a2,224
    80023384:	fccc71e3          	bgeu	s8,a2,80023346 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h399f9f006bebcceeE+0x116>
    80023388:	051a                	slli	a0,a0,0x6
    8002338a:	00b56c33          	or	s8,a0,a1
    8002338e:	86ca                	mv	a3,s2
    80023390:	a815                	j	800233c4 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h399f9f006bebcceeE+0x194>
    80023392:	4601                	li	a2,0
    80023394:	86da                	mv	a3,s6
    80023396:	059a                	slli	a1,a1,0x6
    80023398:	8dd1                	or	a1,a1,a2
    8002339a:	0f000613          	li	a2,240
    8002339e:	fccc73e3          	bgeu	s8,a2,80023364 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h399f9f006bebcceeE+0x134>
    800233a2:	0532                	slli	a0,a0,0xc
    800233a4:	00a5ec33          	or	s8,a1,a0
    800233a8:	a831                	j	800233c4 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h399f9f006bebcceeE+0x194>
    800233aa:	4601                	li	a2,0
    800233ac:	054a                	slli	a0,a0,0x12
    800233ae:	001c0737          	lui	a4,0x1c0
    800233b2:	8d79                	and	a0,a0,a4
    800233b4:	059a                	slli	a1,a1,0x6
    800233b6:	8d4d                	or	a0,a0,a1
    800233b8:	00c56c33          	or	s8,a0,a2
    800233bc:	00110537          	lui	a0,0x110
    800233c0:	24ac0363          	beq	s8,a0,80023606 <.LBB201_67+0x1a>
    800233c4:	4d09                	li	s10,2
    800233c6:	fc3e                	sd	a5,56(sp)
    800233c8:	f836                	sd	a3,48(sp)
    800233ca:	038bd263          	bge	s7,s8,800233ee <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h399f9f006bebcceeE+0x1be>
    800233ce:	05c00513          	li	a0,92
    800233d2:	02ac0b63          	beq	s8,a0,80023408 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h399f9f006bebcceeE+0x1d8>
    800233d6:	02200513          	li	a0,34
    800233da:	02ac0763          	beq	s8,a0,80023408 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h399f9f006bebcceeE+0x1d8>
    800233de:	4535                	li	a0,13
    800233e0:	18ac1363          	bne	s8,a0,80023566 <.LBB201_51+0x40>
    800233e4:	07200a93          	li	s5,114
    800233e8:	029a7363          	bgeu	s4,s1,8002340e <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h399f9f006bebcceeE+0x1de>
    800233ec:	a401                	j	800235ec <.LBB201_67>
    800233ee:	07400a93          	li	s5,116
    800233f2:	4525                	li	a0,9
    800233f4:	00ac0b63          	beq	s8,a0,8002340a <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h399f9f006bebcceeE+0x1da>
    800233f8:	4529                	li	a0,10
    800233fa:	16ac1663          	bne	s8,a0,80023566 <.LBB201_51+0x40>
    800233fe:	06e00a93          	li	s5,110
    80023402:	009a7663          	bgeu	s4,s1,8002340e <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h399f9f006bebcceeE+0x1de>
    80023406:	a2dd                	j	800235ec <.LBB201_67>
    80023408:	8ae2                	mv	s5,s8
    8002340a:	1e9a6163          	bltu	s4,s1,800235ec <.LBB201_67>
    8002340e:	0014b513          	seqz	a0,s1
    80023412:	0134c5b3          	xor	a1,s1,s3
    80023416:	0015b593          	seqz	a1,a1
    8002341a:	8d4d                	or	a0,a0,a1
    8002341c:	65a6                	ld	a1,72(sp)
    8002341e:	95a6                	add	a1,a1,s1
    80023420:	e519                	bnez	a0,8002342e <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h399f9f006bebcceeE+0x1fe>
    80023422:	1d34f563          	bgeu	s1,s3,800235ec <.LBB201_67>
    80023426:	00058503          	lb	a0,0(a1)
    8002342a:	1ca85163          	bge	a6,a0,800235ec <.LBB201_67>
    8002342e:	001a3513          	seqz	a0,s4
    80023432:	013a4633          	xor	a2,s4,s3
    80023436:	00163613          	seqz	a2,a2
    8002343a:	8d51                	or	a0,a0,a2
    8002343c:	e909                	bnez	a0,8002344e <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h399f9f006bebcceeE+0x21e>
    8002343e:	1b3a7763          	bgeu	s4,s3,800235ec <.LBB201_67>
    80023442:	6526                	ld	a0,72(sp)
    80023444:	9552                	add	a0,a0,s4
    80023446:	00050503          	lb	a0,0(a0) # 110000 <.Lline_table_start0+0xd94fe>
    8002344a:	1aa85163          	bge	a6,a0,800235ec <.LBB201_67>
    8002344e:	6506                	ld	a0,64(sp)
    80023450:	6d14                	ld	a3,24(a0)
    80023452:	409a0633          	sub	a2,s4,s1
    80023456:	8522                	mv	a0,s0
    80023458:	9682                	jalr	a3
    8002345a:	54fd                	li	s1,-1
    8002345c:	c115                	beqz	a0,80023480 <.LBB201_35+0x20>
    8002345e:	b519                	j	80023264 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h399f9f006bebcceeE+0x34>

0000000080023460 <.LBB201_35>:
    80023460:	009b7b33          	and	s6,s6,s1
    80023464:	019bf533          	and	a0,s7,s9
    80023468:	4d0d                	li	s10,3
    8002346a:	020d1593          	slli	a1,s10,0x20
    8002346e:	00b56bb3          	or	s7,a0,a1
    80023472:	07500593          	li	a1,117
    80023476:	8522                	mv	a0,s0
    80023478:	67c6                	ld	a5,80(sp)
    8002347a:	9782                	jalr	a5
    8002347c:	de0514e3          	bnez	a0,80023264 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h399f9f006bebcceeE+0x34>
    80023480:	020d1513          	slli	a0,s10,0x20
    80023484:	9101                	srli	a0,a0,0x20
    80023486:	4d05                	li	s10,1
    80023488:	02ad5a63          	bge	s10,a0,800234bc <.LBB201_40+0x10>
    8002348c:	05c00593          	li	a1,92
    80023490:	ffb503e3          	beq	a0,s11,80023476 <.LBB201_35+0x16>
    80023494:	020bd513          	srli	a0,s7,0x20
    80023498:	0ff57513          	andi	a0,a0,255
    8002349c:	050e                	slli	a0,a0,0x3

000000008002349e <.LBB201_66>:
    8002349e:	00009617          	auipc	a2,0x9
    800234a2:	2ea60613          	addi	a2,a2,746 # 8002c788 <.LJTI201_0>
    800234a6:	9532                	add	a0,a0,a2
    800234a8:	6108                	ld	a0,0(a0)
    800234aa:	8502                	jr	a0

00000000800234ac <.LBB201_40>:
    800234ac:	009b7b33          	and	s6,s6,s1
    800234b0:	019bfbb3          	and	s7,s7,s9
    800234b4:	4d0d                	li	s10,3
    800234b6:	07d00593          	li	a1,125
    800234ba:	bf75                	j	80023476 <.LBB201_35+0x16>
    800234bc:	4585                	li	a1,1
    800234be:	06b51463          	bne	a0,a1,80023526 <.LBB201_51>
    800234c2:	4d01                	li	s10,0
    800234c4:	85d6                	mv	a1,s5
    800234c6:	bf45                	j	80023476 <.LBB201_35+0x16>

00000000800234c8 <.LBB201_43>:
    800234c8:	002b1513          	slli	a0,s6,0x2
    800234cc:	00abd53b          	srlw	a0,s7,a0
    800234d0:	893d                	andi	a0,a0,15
    800234d2:	03000593          	li	a1,48
    800234d6:	4629                	li	a2,10
    800234d8:	00c56463          	bltu	a0,a2,800234e0 <.LBB201_43+0x18>
    800234dc:	05700593          	li	a1,87
    800234e0:	95aa                	add	a1,a1,a0
    800234e2:	020b0863          	beqz	s6,80023512 <.LBB201_48+0xe>
    800234e6:	1b7d                	addi	s6,s6,-1
    800234e8:	4d0d                	li	s10,3
    800234ea:	b771                	j	80023476 <.LBB201_35+0x16>

00000000800234ec <.LBB201_47>:
    800234ec:	009b7b33          	and	s6,s6,s1
    800234f0:	019bf533          	and	a0,s7,s9
    800234f4:	4585                	li	a1,1
    800234f6:	1586                	slli	a1,a1,0x21
    800234f8:	00b56bb3          	or	s7,a0,a1
    800234fc:	4d0d                	li	s10,3
    800234fe:	07b00593          	li	a1,123
    80023502:	bf95                	j	80023476 <.LBB201_35+0x16>

0000000080023504 <.LBB201_48>:
    80023504:	009b7b33          	and	s6,s6,s1
    80023508:	019bf533          	and	a0,s7,s9
    8002350c:	4605                	li	a2,1
    8002350e:	160a                	slli	a2,a2,0x22
    80023510:	a039                	j	8002351e <.LBB201_48+0x1a>
    80023512:	009b7b33          	and	s6,s6,s1
    80023516:	019bf533          	and	a0,s7,s9
    8002351a:	4605                	li	a2,1
    8002351c:	1602                	slli	a2,a2,0x20
    8002351e:	00c56bb3          	or	s7,a0,a2
    80023522:	4d0d                	li	s10,3
    80023524:	bf89                	j	80023476 <.LBB201_35+0x16>

0000000080023526 <.LBB201_51>:
    80023526:	4505                	li	a0,1
    80023528:	08000593          	li	a1,128
    8002352c:	00bc6d63          	bltu	s8,a1,80023546 <.LBB201_51+0x20>
    80023530:	00bc5593          	srli	a1,s8,0xb
    80023534:	4509                	li	a0,2
    80023536:	c981                	beqz	a1,80023546 <.LBB201_51+0x20>
    80023538:	010c5513          	srli	a0,s8,0x10
    8002353c:	00153513          	seqz	a0,a0
    80023540:	4591                	li	a1,4
    80023542:	40a58533          	sub	a0,a1,a0
    80023546:	014504b3          	add	s1,a0,s4
    8002354a:	7b22                	ld	s6,40(sp)
    8002354c:	4bb1                	li	s7,12
    8002354e:	fbf00813          	li	a6,-65
    80023552:	7562                	ld	a0,56(sp)
    80023554:	75c2                	ld	a1,48(sp)
    80023556:	40aa0533          	sub	a0,s4,a0
    8002355a:	00b50a33          	add	s4,a0,a1
    8002355e:	87ca                	mv	a5,s2
    80023560:	db691ce3          	bne	s2,s6,80023318 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h399f9f006bebcceeE+0xe8>
    80023564:	a04d                	j	80023606 <.LBB201_67+0x1a>
    80023566:	8562                	mv	a0,s8
    80023568:	00002097          	auipc	ra,0x2
    8002356c:	8fe080e7          	jalr	-1794(ra) # 80024e66 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17hb6efbf5d86b330e2E>
    80023570:	e519                	bnez	a0,8002357e <.LBB201_51+0x58>
    80023572:	8562                	mv	a0,s8
    80023574:	00001097          	auipc	ra,0x1
    80023578:	a7c080e7          	jalr	-1412(ra) # 80023ff0 <_ZN4core7unicode9printable12is_printable17hd386595a5390c2aaE>
    8002357c:	f969                	bnez	a0,8002354e <.LBB201_51+0x28>
    8002357e:	001c6513          	ori	a0,s8,1
    80023582:	00155593          	srli	a1,a0,0x1
    80023586:	8d4d                	or	a0,a0,a1
    80023588:	00255593          	srli	a1,a0,0x2
    8002358c:	8d4d                	or	a0,a0,a1
    8002358e:	00455593          	srli	a1,a0,0x4
    80023592:	8d4d                	or	a0,a0,a1
    80023594:	00855593          	srli	a1,a0,0x8
    80023598:	8d4d                	or	a0,a0,a1
    8002359a:	01055593          	srli	a1,a0,0x10
    8002359e:	8d4d                	or	a0,a0,a1
    800235a0:	02055593          	srli	a1,a0,0x20
    800235a4:	8d4d                	or	a0,a0,a1
    800235a6:	fff54513          	not	a0,a0
    800235aa:	00155593          	srli	a1,a0,0x1
    800235ae:	7602                	ld	a2,32(sp)
    800235b0:	8df1                	and	a1,a1,a2
    800235b2:	8d0d                	sub	a0,a0,a1
    800235b4:	6662                	ld	a2,24(sp)
    800235b6:	00c575b3          	and	a1,a0,a2
    800235ba:	8109                	srli	a0,a0,0x2
    800235bc:	8d71                	and	a0,a0,a2
    800235be:	952e                	add	a0,a0,a1
    800235c0:	00455593          	srli	a1,a0,0x4
    800235c4:	952e                	add	a0,a0,a1
    800235c6:	65c2                	ld	a1,16(sp)
    800235c8:	8d6d                	and	a0,a0,a1
    800235ca:	65a2                	ld	a1,8(sp)
    800235cc:	02b50533          	mul	a0,a0,a1
    800235d0:	9161                	srli	a0,a0,0x38
    800235d2:	1501                	addi	a0,a0,-32
    800235d4:	0025551b          	srliw	a0,a0,0x2
    800235d8:	00754b13          	xori	s6,a0,7
    800235dc:	6502                	ld	a0,0(sp)
    800235de:	00ac6bb3          	or	s7,s8,a0
    800235e2:	4d0d                	li	s10,3
    800235e4:	fbf00813          	li	a6,-65
    800235e8:	e29a73e3          	bgeu	s4,s1,8002340e <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h399f9f006bebcceeE+0x1de>

00000000800235ec <.LBB201_67>:
    800235ec:	00009717          	auipc	a4,0x9
    800235f0:	5fc70713          	addi	a4,a4,1532 # 8002cbe8 <.Lanon.f077182aff5f58a5660f14b1290425e3.240>
    800235f4:	6526                	ld	a0,72(sp)
    800235f6:	85ce                	mv	a1,s3
    800235f8:	8626                	mv	a2,s1
    800235fa:	86d2                	mv	a3,s4
    800235fc:	00000097          	auipc	ra,0x0
    80023600:	73a080e7          	jalr	1850(ra) # 80023d36 <_ZN4core3str16slice_error_fail17h98613a818fa8baa4E>
    80023604:	0000                	unimp
    80023606:	0014b513          	seqz	a0,s1
    8002360a:	0134c5b3          	xor	a1,s1,s3
    8002360e:	0015b593          	seqz	a1,a1
    80023612:	8d4d                	or	a0,a0,a1
    80023614:	e919                	bnez	a0,8002362a <.LBB201_67+0x3e>
    80023616:	0534f863          	bgeu	s1,s3,80023666 <.LBB201_68>
    8002361a:	6526                	ld	a0,72(sp)
    8002361c:	9526                	add	a0,a0,s1
    8002361e:	00050503          	lb	a0,0(a0)
    80023622:	fbf00593          	li	a1,-65
    80023626:	04a5d063          	bge	a1,a0,80023666 <.LBB201_68>
    8002362a:	6506                	ld	a0,64(sp)
    8002362c:	6d14                	ld	a3,24(a0)
    8002362e:	6526                	ld	a0,72(sp)
    80023630:	009505b3          	add	a1,a0,s1
    80023634:	40998633          	sub	a2,s3,s1
    80023638:	8522                	mv	a0,s0
    8002363a:	9682                	jalr	a3
    8002363c:	c20514e3          	bnez	a0,80023264 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h399f9f006bebcceeE+0x34>
    80023640:	02200593          	li	a1,34
    80023644:	8522                	mv	a0,s0
    80023646:	67c6                	ld	a5,80(sp)
    80023648:	6de6                	ld	s11,88(sp)
    8002364a:	7d06                	ld	s10,96(sp)
    8002364c:	7ca6                	ld	s9,104(sp)
    8002364e:	7c46                	ld	s8,112(sp)
    80023650:	7be6                	ld	s7,120(sp)
    80023652:	6b0a                	ld	s6,128(sp)
    80023654:	6aaa                	ld	s5,136(sp)
    80023656:	6a4a                	ld	s4,144(sp)
    80023658:	69ea                	ld	s3,152(sp)
    8002365a:	790a                	ld	s2,160(sp)
    8002365c:	74aa                	ld	s1,168(sp)
    8002365e:	744a                	ld	s0,176(sp)
    80023660:	70ea                	ld	ra,184(sp)
    80023662:	6129                	addi	sp,sp,192
    80023664:	8782                	jr	a5

0000000080023666 <.LBB201_68>:
    80023666:	00009717          	auipc	a4,0x9
    8002366a:	59a70713          	addi	a4,a4,1434 # 8002cc00 <.Lanon.f077182aff5f58a5660f14b1290425e3.241>
    8002366e:	6526                	ld	a0,72(sp)
    80023670:	85ce                	mv	a1,s3
    80023672:	8626                	mv	a2,s1
    80023674:	86ce                	mv	a3,s3
    80023676:	00000097          	auipc	ra,0x0
    8002367a:	6c0080e7          	jalr	1728(ra) # 80023d36 <_ZN4core3str16slice_error_fail17h98613a818fa8baa4E>
	...

Disassembly of section .text._ZN42_$LT$str$u20$as$u20$core..fmt..Display$GT$3fmt17h0539661bd0865efeE:

0000000080023680 <_ZN42_$LT$str$u20$as$u20$core..fmt..Display$GT$3fmt17h0539661bd0865efeE>:
    80023680:	86ae                	mv	a3,a1
    80023682:	85aa                	mv	a1,a0
    80023684:	8532                	mv	a0,a2
    80023686:	8636                	mv	a2,a3
    80023688:	00000317          	auipc	t1,0x0
    8002368c:	88a30067          	jr	-1910(t1) # 80022f12 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE>

Disassembly of section .text._ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hdf5d4d6f5f47000aE:

0000000080023690 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hdf5d4d6f5f47000aE>:
    80023690:	7159                	addi	sp,sp,-112
    80023692:	f486                	sd	ra,104(sp)
    80023694:	f0a2                	sd	s0,96(sp)
    80023696:	eca6                	sd	s1,88(sp)
    80023698:	e8ca                	sd	s2,80(sp)
    8002369a:	e4ce                	sd	s3,72(sp)
    8002369c:	e0d2                	sd	s4,64(sp)
    8002369e:	fc56                	sd	s5,56(sp)
    800236a0:	f85a                	sd	s6,48(sp)
    800236a2:	f45e                	sd	s7,40(sp)
    800236a4:	f062                	sd	s8,32(sp)
    800236a6:	ec66                	sd	s9,24(sp)
    800236a8:	e86a                	sd	s10,16(sp)
    800236aa:	e46e                	sd	s11,8(sp)
    800236ac:	7590                	ld	a2,40(a1)
    800236ae:	0205ba03          	ld	s4,32(a1)
    800236b2:	721c                	ld	a5,32(a2)
    800236b4:	84aa                	mv	s1,a0
    800236b6:	02700593          	li	a1,39
    800236ba:	8552                	mv	a0,s4
    800236bc:	e03e                	sd	a5,0(sp)
    800236be:	9782                	jalr	a5
    800236c0:	c10d                	beqz	a0,800236e2 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hdf5d4d6f5f47000aE+0x52>
    800236c2:	4505                	li	a0,1
    800236c4:	6da2                	ld	s11,8(sp)
    800236c6:	6d42                	ld	s10,16(sp)
    800236c8:	6ce2                	ld	s9,24(sp)
    800236ca:	7c02                	ld	s8,32(sp)
    800236cc:	7ba2                	ld	s7,40(sp)
    800236ce:	7b42                	ld	s6,48(sp)
    800236d0:	7ae2                	ld	s5,56(sp)
    800236d2:	6a06                	ld	s4,64(sp)
    800236d4:	69a6                	ld	s3,72(sp)
    800236d6:	6946                	ld	s2,80(sp)
    800236d8:	64e6                	ld	s1,88(sp)
    800236da:	7406                	ld	s0,96(sp)
    800236dc:	70a6                	ld	ra,104(sp)
    800236de:	6165                	addi	sp,sp,112
    800236e0:	8082                	ret
    800236e2:	0004e903          	lwu	s2,0(s1)
    800236e6:	4531                	li	a0,12
    800236e8:	4489                	li	s1,2
    800236ea:	03255063          	bge	a0,s2,8002370a <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hdf5d4d6f5f47000aE+0x7a>
    800236ee:	05c00993          	li	s3,92
    800236f2:	03390463          	beq	s2,s3,8002371a <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hdf5d4d6f5f47000aE+0x8a>
    800236f6:	02700993          	li	s3,39
    800236fa:	03390063          	beq	s2,s3,8002371a <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hdf5d4d6f5f47000aE+0x8a>
    800236fe:	4535                	li	a0,13
    80023700:	02a91163          	bne	s2,a0,80023722 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hdf5d4d6f5f47000aE+0x92>
    80023704:	07200993          	li	s3,114
    80023708:	a8ed                	j	80023802 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hdf5d4d6f5f47000aE+0x172>
    8002370a:	4525                	li	a0,9
    8002370c:	00a90863          	beq	s2,a0,8002371c <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hdf5d4d6f5f47000aE+0x8c>
    80023710:	4529                	li	a0,10
    80023712:	00a91863          	bne	s2,a0,80023722 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hdf5d4d6f5f47000aE+0x92>
    80023716:	06e00993          	li	s3,110
    8002371a:	a0e5                	j	80023802 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hdf5d4d6f5f47000aE+0x172>
    8002371c:	07400993          	li	s3,116
    80023720:	a0cd                	j	80023802 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hdf5d4d6f5f47000aE+0x172>
    80023722:	854a                	mv	a0,s2
    80023724:	00001097          	auipc	ra,0x1
    80023728:	742080e7          	jalr	1858(ra) # 80024e66 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17hb6efbf5d86b330e2E>
    8002372c:	e911                	bnez	a0,80023740 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hdf5d4d6f5f47000aE+0xb0>
    8002372e:	854a                	mv	a0,s2
    80023730:	00001097          	auipc	ra,0x1
    80023734:	8c0080e7          	jalr	-1856(ra) # 80023ff0 <_ZN4core7unicode9printable12is_printable17hd386595a5390c2aaE>
    80023738:	c501                	beqz	a0,80023740 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hdf5d4d6f5f47000aE+0xb0>
    8002373a:	4485                	li	s1,1
    8002373c:	89ca                	mv	s3,s2
    8002373e:	a0d1                	j	80023802 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hdf5d4d6f5f47000aE+0x172>
    80023740:	00196513          	ori	a0,s2,1
    80023744:	00155593          	srli	a1,a0,0x1
    80023748:	8d4d                	or	a0,a0,a1
    8002374a:	00255593          	srli	a1,a0,0x2
    8002374e:	8d4d                	or	a0,a0,a1
    80023750:	00455593          	srli	a1,a0,0x4
    80023754:	8d4d                	or	a0,a0,a1
    80023756:	00855593          	srli	a1,a0,0x8
    8002375a:	8d4d                	or	a0,a0,a1
    8002375c:	01055593          	srli	a1,a0,0x10
    80023760:	8d4d                	or	a0,a0,a1
    80023762:	02055593          	srli	a1,a0,0x20
    80023766:	8d4d                	or	a0,a0,a1
    80023768:	fff54513          	not	a0,a0
    8002376c:	00155593          	srli	a1,a0,0x1
    80023770:	05555637          	lui	a2,0x5555
    80023774:	5556061b          	addiw	a2,a2,1365
    80023778:	0632                	slli	a2,a2,0xc
    8002377a:	55560613          	addi	a2,a2,1365 # 5555555 <.Lline_table_start0+0x551ea53>
    8002377e:	0632                	slli	a2,a2,0xc
    80023780:	55560613          	addi	a2,a2,1365
    80023784:	0632                	slli	a2,a2,0xc
    80023786:	55560613          	addi	a2,a2,1365
    8002378a:	8df1                	and	a1,a1,a2
    8002378c:	8d0d                	sub	a0,a0,a1
    8002378e:	033335b7          	lui	a1,0x3333
    80023792:	3335859b          	addiw	a1,a1,819
    80023796:	05b2                	slli	a1,a1,0xc
    80023798:	33358593          	addi	a1,a1,819 # 3333333 <.Lline_table_start0+0x32fc831>
    8002379c:	05b2                	slli	a1,a1,0xc
    8002379e:	33358593          	addi	a1,a1,819
    800237a2:	05b2                	slli	a1,a1,0xc
    800237a4:	33358593          	addi	a1,a1,819
    800237a8:	00b57633          	and	a2,a0,a1
    800237ac:	8109                	srli	a0,a0,0x2
    800237ae:	8d6d                	and	a0,a0,a1
    800237b0:	9532                	add	a0,a0,a2
    800237b2:	00455593          	srli	a1,a0,0x4
    800237b6:	952e                	add	a0,a0,a1
    800237b8:	00f0f5b7          	lui	a1,0xf0f
    800237bc:	0f15859b          	addiw	a1,a1,241
    800237c0:	05b2                	slli	a1,a1,0xc
    800237c2:	f0f58593          	addi	a1,a1,-241 # f0ef0f <.Lline_table_start0+0xed840d>
    800237c6:	05b2                	slli	a1,a1,0xc
    800237c8:	0f158593          	addi	a1,a1,241
    800237cc:	05b2                	slli	a1,a1,0xc
    800237ce:	f0f58593          	addi	a1,a1,-241
    800237d2:	8d6d                	and	a0,a0,a1
    800237d4:	010105b7          	lui	a1,0x1010
    800237d8:	1015859b          	addiw	a1,a1,257
    800237dc:	05c2                	slli	a1,a1,0x10
    800237de:	10158593          	addi	a1,a1,257 # 1010101 <.Lline_table_start0+0xfd95ff>
    800237e2:	05c2                	slli	a1,a1,0x10
    800237e4:	10158593          	addi	a1,a1,257
    800237e8:	02b50533          	mul	a0,a0,a1
    800237ec:	9161                	srli	a0,a0,0x38
    800237ee:	1501                	addi	a0,a0,-32
    800237f0:	0025551b          	srliw	a0,a0,0x2
    800237f4:	00754a93          	xori	s5,a0,7
    800237f8:	4515                	li	a0,5
    800237fa:	1502                	slli	a0,a0,0x20
    800237fc:	00a96433          	or	s0,s2,a0
    80023800:	448d                	li	s1,3
    80023802:	597d                	li	s2,-1
    80023804:	f0100513          	li	a0,-255
    80023808:	1502                	slli	a0,a0,0x20
    8002380a:	fff50b13          	addi	s6,a0,-1
    8002380e:	4b85                	li	s7,1
    80023810:	4c09                	li	s8,2

0000000080023812 <.LBB203_35>:
    80023812:	00009c97          	auipc	s9,0x9
    80023816:	fa6c8c93          	addi	s9,s9,-90 # 8002c7b8 <.LJTI203_0>
    8002381a:	020b9d93          	slli	s11,s7,0x20
    8002381e:	021b9d13          	slli	s10,s7,0x21
    80023822:	a039                	j	80023830 <.LBB203_35+0x1e>
    80023824:	4485                	li	s1,1
    80023826:	8552                	mv	a0,s4
    80023828:	6782                	ld	a5,0(sp)
    8002382a:	9782                	jalr	a5
    8002382c:	e8051be3          	bnez	a0,800236c2 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hdf5d4d6f5f47000aE+0x32>
    80023830:	02049513          	slli	a0,s1,0x20
    80023834:	9101                	srli	a0,a0,0x20
    80023836:	02abd663          	bge	s7,a0,80023862 <.LBB203_22+0x10>
    8002383a:	05c00593          	li	a1,92
    8002383e:	ff8503e3          	beq	a0,s8,80023824 <.LBB203_35+0x12>
    80023842:	02045513          	srli	a0,s0,0x20
    80023846:	0ff57513          	andi	a0,a0,255
    8002384a:	050e                	slli	a0,a0,0x3
    8002384c:	9566                	add	a0,a0,s9
    8002384e:	6108                	ld	a0,0(a0)
    80023850:	8502                	jr	a0

0000000080023852 <.LBB203_22>:
    80023852:	012afab3          	and	s5,s5,s2
    80023856:	01647433          	and	s0,s0,s6
    8002385a:	448d                	li	s1,3
    8002385c:	07d00593          	li	a1,125
    80023860:	b7d9                	j	80023826 <.LBB203_35+0x14>
    80023862:	07751d63          	bne	a0,s7,800238dc <.LBB203_34>
    80023866:	4481                	li	s1,0
    80023868:	85ce                	mv	a1,s3
    8002386a:	bf75                	j	80023826 <.LBB203_35+0x14>

000000008002386c <.LBB203_25>:
    8002386c:	002a9513          	slli	a0,s5,0x2
    80023870:	00a4553b          	srlw	a0,s0,a0
    80023874:	893d                	andi	a0,a0,15
    80023876:	03000593          	li	a1,48
    8002387a:	4629                	li	a2,10
    8002387c:	00c56463          	bltu	a0,a2,80023884 <.LBB203_25+0x18>
    80023880:	05700593          	li	a1,87
    80023884:	95aa                	add	a1,a1,a0
    80023886:	040a8363          	beqz	s5,800238cc <.LBB203_31+0x12>
    8002388a:	1afd                	addi	s5,s5,-1
    8002388c:	a0b1                	j	800238d8 <.LBB203_31+0x1e>

000000008002388e <.LBB203_29>:
    8002388e:	012afab3          	and	s5,s5,s2
    80023892:	01647533          	and	a0,s0,s6
    80023896:	01a56433          	or	s0,a0,s10
    8002389a:	448d                	li	s1,3
    8002389c:	07b00593          	li	a1,123
    800238a0:	b759                	j	80023826 <.LBB203_35+0x14>

00000000800238a2 <.LBB203_30>:
    800238a2:	012afab3          	and	s5,s5,s2
    800238a6:	01647533          	and	a0,s0,s6
    800238aa:	448d                	li	s1,3
    800238ac:	02049593          	slli	a1,s1,0x20
    800238b0:	00b56433          	or	s0,a0,a1
    800238b4:	07500593          	li	a1,117
    800238b8:	b7bd                	j	80023826 <.LBB203_35+0x14>

00000000800238ba <.LBB203_31>:
    800238ba:	012afab3          	and	s5,s5,s2
    800238be:	01647533          	and	a0,s0,s6
    800238c2:	022b9613          	slli	a2,s7,0x22
    800238c6:	00c56433          	or	s0,a0,a2
    800238ca:	a039                	j	800238d8 <.LBB203_31+0x1e>
    800238cc:	012afab3          	and	s5,s5,s2
    800238d0:	01647533          	and	a0,s0,s6
    800238d4:	01b56433          	or	s0,a0,s11
    800238d8:	448d                	li	s1,3
    800238da:	b7b1                	j	80023826 <.LBB203_35+0x14>

00000000800238dc <.LBB203_34>:
    800238dc:	02700593          	li	a1,39
    800238e0:	8552                	mv	a0,s4
    800238e2:	6782                	ld	a5,0(sp)
    800238e4:	6da2                	ld	s11,8(sp)
    800238e6:	6d42                	ld	s10,16(sp)
    800238e8:	6ce2                	ld	s9,24(sp)
    800238ea:	7c02                	ld	s8,32(sp)
    800238ec:	7ba2                	ld	s7,40(sp)
    800238ee:	7b42                	ld	s6,48(sp)
    800238f0:	7ae2                	ld	s5,56(sp)
    800238f2:	6a06                	ld	s4,64(sp)
    800238f4:	69a6                	ld	s3,72(sp)
    800238f6:	6946                	ld	s2,80(sp)
    800238f8:	64e6                	ld	s1,88(sp)
    800238fa:	7406                	ld	s0,96(sp)
    800238fc:	70a6                	ld	ra,104(sp)
    800238fe:	6165                	addi	sp,sp,112
    80023900:	8782                	jr	a5

Disassembly of section .text._ZN4core5slice6memchr19memchr_general_case17hea58e64f15abdd7dE:

0000000080023902 <_ZN4core5slice6memchr19memchr_general_case17hea58e64f15abdd7dE>:
    80023902:	1141                	addi	sp,sp,-16
    80023904:	e406                	sd	ra,8(sp)
    80023906:	00758693          	addi	a3,a1,7
    8002390a:	9ae1                	andi	a3,a3,-8
    8002390c:	8e8d                	sub	a3,a3,a1
    8002390e:	0ff57813          	andi	a6,a0,255
    80023912:	c68d                	beqz	a3,8002393c <_ZN4core5slice6memchr19memchr_general_case17hea58e64f15abdd7dE+0x3a>
    80023914:	8532                	mv	a0,a2
    80023916:	00d66363          	bltu	a2,a3,8002391c <_ZN4core5slice6memchr19memchr_general_case17hea58e64f15abdd7dE+0x1a>
    8002391a:	8536                	mv	a0,a3
    8002391c:	c105                	beqz	a0,8002393c <_ZN4core5slice6memchr19memchr_general_case17hea58e64f15abdd7dE+0x3a>
    8002391e:	4681                	li	a3,0
    80023920:	00d58733          	add	a4,a1,a3
    80023924:	00074703          	lbu	a4,0(a4)
    80023928:	0b070e63          	beq	a4,a6,800239e4 <_ZN4core5slice6memchr19memchr_general_case17hea58e64f15abdd7dE+0xe2>
    8002392c:	0685                	addi	a3,a3,1
    8002392e:	fed519e3          	bne	a0,a3,80023920 <_ZN4core5slice6memchr19memchr_general_case17hea58e64f15abdd7dE+0x1e>
    80023932:	ff060893          	addi	a7,a2,-16
    80023936:	00a8f663          	bgeu	a7,a0,80023942 <_ZN4core5slice6memchr19memchr_general_case17hea58e64f15abdd7dE+0x40>
    8002393a:	a049                	j	800239bc <_ZN4core5slice6memchr19memchr_general_case17hea58e64f15abdd7dE+0xba>
    8002393c:	4501                	li	a0,0
    8002393e:	ff060893          	addi	a7,a2,-16
    80023942:	feff06b7          	lui	a3,0xfeff0
    80023946:	eff6869b          	addiw	a3,a3,-257
    8002394a:	06c2                	slli	a3,a3,0x10
    8002394c:	eff68693          	addi	a3,a3,-257 # fffffffffefefeff <end+0xffffffff7ef7c96f>
    80023950:	06c2                	slli	a3,a3,0x10
    80023952:	eff68293          	addi	t0,a3,-257
    80023956:	76c1                	lui	a3,0xffff0
    80023958:	1016869b          	addiw	a3,a3,257
    8002395c:	06c2                	slli	a3,a3,0x10
    8002395e:	10168693          	addi	a3,a3,257 # ffffffffffff0101 <end+0xffffffff7ff7cb71>
    80023962:	06c2                	slli	a3,a3,0x10
    80023964:	10168693          	addi	a3,a3,257
    80023968:	06be                	slli	a3,a3,0xf
    8002396a:	08068313          	addi	t1,a3,128
    8002396e:	010106b7          	lui	a3,0x1010
    80023972:	1016869b          	addiw	a3,a3,257
    80023976:	06c2                	slli	a3,a3,0x10
    80023978:	10168693          	addi	a3,a3,257 # 1010101 <.Lline_table_start0+0xfd95ff>
    8002397c:	06c2                	slli	a3,a3,0x10
    8002397e:	10168693          	addi	a3,a3,257
    80023982:	02d803b3          	mul	t2,a6,a3
    80023986:	00a587b3          	add	a5,a1,a0
    8002398a:	6398                	ld	a4,0(a5)
    8002398c:	679c                	ld	a5,8(a5)
    8002398e:	00774733          	xor	a4,a4,t2
    80023992:	fff74693          	not	a3,a4
    80023996:	9716                	add	a4,a4,t0
    80023998:	0066f6b3          	and	a3,a3,t1
    8002399c:	8ef9                	and	a3,a3,a4
    8002399e:	0077c733          	xor	a4,a5,t2
    800239a2:	fff74793          	not	a5,a4
    800239a6:	9716                	add	a4,a4,t0
    800239a8:	0067f7b3          	and	a5,a5,t1
    800239ac:	8f7d                	and	a4,a4,a5
    800239ae:	8ed9                	or	a3,a3,a4
    800239b0:	e681                	bnez	a3,800239b8 <_ZN4core5slice6memchr19memchr_general_case17hea58e64f15abdd7dE+0xb6>
    800239b2:	0541                	addi	a0,a0,16
    800239b4:	fca8f9e3          	bgeu	a7,a0,80023986 <_ZN4core5slice6memchr19memchr_general_case17hea58e64f15abdd7dE+0x84>
    800239b8:	02a66b63          	bltu	a2,a0,800239ee <.LBB209_21>
    800239bc:	00c50e63          	beq	a0,a2,800239d8 <_ZN4core5slice6memchr19memchr_general_case17hea58e64f15abdd7dE+0xd6>
    800239c0:	4681                	li	a3,0
    800239c2:	95aa                	add	a1,a1,a0
    800239c4:	8e09                	sub	a2,a2,a0
    800239c6:	00d58733          	add	a4,a1,a3
    800239ca:	00074703          	lbu	a4,0(a4)
    800239ce:	01070a63          	beq	a4,a6,800239e2 <_ZN4core5slice6memchr19memchr_general_case17hea58e64f15abdd7dE+0xe0>
    800239d2:	0685                	addi	a3,a3,1
    800239d4:	fed619e3          	bne	a2,a3,800239c6 <_ZN4core5slice6memchr19memchr_general_case17hea58e64f15abdd7dE+0xc4>
    800239d8:	4501                	li	a0,0
    800239da:	85b6                	mv	a1,a3
    800239dc:	60a2                	ld	ra,8(sp)
    800239de:	0141                	addi	sp,sp,16
    800239e0:	8082                	ret
    800239e2:	96aa                	add	a3,a3,a0
    800239e4:	4505                	li	a0,1
    800239e6:	85b6                	mv	a1,a3
    800239e8:	60a2                	ld	ra,8(sp)
    800239ea:	0141                	addi	sp,sp,16
    800239ec:	8082                	ret

00000000800239ee <.LBB209_21>:
    800239ee:	00009697          	auipc	a3,0x9
    800239f2:	23268693          	addi	a3,a3,562 # 8002cc20 <.Lanon.f077182aff5f58a5660f14b1290425e3.246>
    800239f6:	85b2                	mv	a1,a2
    800239f8:	8636                	mv	a2,a3
    800239fa:	00000097          	auipc	ra,0x0
    800239fe:	00a080e7          	jalr	10(ra) # 80023a04 <_ZN4core5slice5index26slice_start_index_len_fail17h9b5b4d8717655b24E>
	...

Disassembly of section .text.unlikely._ZN4core5slice5index26slice_start_index_len_fail17h9b5b4d8717655b24E:

0000000080023a04 <_ZN4core5slice5index26slice_start_index_len_fail17h9b5b4d8717655b24E>:
    80023a04:	7159                	addi	sp,sp,-112
    80023a06:	f486                	sd	ra,104(sp)
    80023a08:	e42a                	sd	a0,8(sp)
    80023a0a:	e82e                	sd	a1,16(sp)
    80023a0c:	0028                	addi	a0,sp,8
    80023a0e:	e4aa                	sd	a0,72(sp)

0000000080023a10 <.LBB215_1>:
    80023a10:	00001517          	auipc	a0,0x1
    80023a14:	ef250513          	addi	a0,a0,-270 # 80024902 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h9c6c4af1578f7c29E>
    80023a18:	e8aa                	sd	a0,80(sp)
    80023a1a:	080c                	addi	a1,sp,16
    80023a1c:	ecae                	sd	a1,88(sp)
    80023a1e:	f0aa                	sd	a0,96(sp)

0000000080023a20 <.LBB215_2>:
    80023a20:	00009517          	auipc	a0,0x9
    80023a24:	25050513          	addi	a0,a0,592 # 8002cc70 <.Lanon.f077182aff5f58a5660f14b1290425e3.252>
    80023a28:	ec2a                	sd	a0,24(sp)
    80023a2a:	4509                	li	a0,2
    80023a2c:	f02a                	sd	a0,32(sp)
    80023a2e:	f402                	sd	zero,40(sp)
    80023a30:	00ac                	addi	a1,sp,72
    80023a32:	fc2e                	sd	a1,56(sp)
    80023a34:	e0aa                	sd	a0,64(sp)
    80023a36:	0828                	addi	a0,sp,24
    80023a38:	85b2                	mv	a1,a2
    80023a3a:	fffff097          	auipc	ra,0xfffff
    80023a3e:	8a8080e7          	jalr	-1880(ra) # 800222e2 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
	...

Disassembly of section .text.unlikely._ZN4core5slice5index24slice_end_index_len_fail17hbdcbb59c061b5014E:

0000000080023a44 <_ZN4core5slice5index24slice_end_index_len_fail17hbdcbb59c061b5014E>:
    80023a44:	7159                	addi	sp,sp,-112
    80023a46:	f486                	sd	ra,104(sp)
    80023a48:	e42a                	sd	a0,8(sp)
    80023a4a:	e82e                	sd	a1,16(sp)
    80023a4c:	0028                	addi	a0,sp,8
    80023a4e:	e4aa                	sd	a0,72(sp)

0000000080023a50 <.LBB216_1>:
    80023a50:	00001517          	auipc	a0,0x1
    80023a54:	eb250513          	addi	a0,a0,-334 # 80024902 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h9c6c4af1578f7c29E>
    80023a58:	e8aa                	sd	a0,80(sp)
    80023a5a:	080c                	addi	a1,sp,16
    80023a5c:	ecae                	sd	a1,88(sp)
    80023a5e:	f0aa                	sd	a0,96(sp)

0000000080023a60 <.LBB216_2>:
    80023a60:	00009517          	auipc	a0,0x9
    80023a64:	23050513          	addi	a0,a0,560 # 8002cc90 <.Lanon.f077182aff5f58a5660f14b1290425e3.254>
    80023a68:	ec2a                	sd	a0,24(sp)
    80023a6a:	4509                	li	a0,2
    80023a6c:	f02a                	sd	a0,32(sp)
    80023a6e:	f402                	sd	zero,40(sp)
    80023a70:	00ac                	addi	a1,sp,72
    80023a72:	fc2e                	sd	a1,56(sp)
    80023a74:	e0aa                	sd	a0,64(sp)
    80023a76:	0828                	addi	a0,sp,24
    80023a78:	85b2                	mv	a1,a2
    80023a7a:	fffff097          	auipc	ra,0xfffff
    80023a7e:	868080e7          	jalr	-1944(ra) # 800222e2 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
	...

Disassembly of section .text.unlikely._ZN4core5slice5index22slice_index_order_fail17h8c18576576dbf4e3E:

0000000080023a84 <_ZN4core5slice5index22slice_index_order_fail17h8c18576576dbf4e3E>:
    80023a84:	7159                	addi	sp,sp,-112
    80023a86:	f486                	sd	ra,104(sp)
    80023a88:	e42a                	sd	a0,8(sp)
    80023a8a:	e82e                	sd	a1,16(sp)
    80023a8c:	0028                	addi	a0,sp,8
    80023a8e:	e4aa                	sd	a0,72(sp)

0000000080023a90 <.LBB217_1>:
    80023a90:	00001517          	auipc	a0,0x1
    80023a94:	e7250513          	addi	a0,a0,-398 # 80024902 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h9c6c4af1578f7c29E>
    80023a98:	e8aa                	sd	a0,80(sp)
    80023a9a:	080c                	addi	a1,sp,16
    80023a9c:	ecae                	sd	a1,88(sp)
    80023a9e:	f0aa                	sd	a0,96(sp)

0000000080023aa0 <.LBB217_2>:
    80023aa0:	00009517          	auipc	a0,0x9
    80023aa4:	23850513          	addi	a0,a0,568 # 8002ccd8 <.Lanon.f077182aff5f58a5660f14b1290425e3.257>
    80023aa8:	ec2a                	sd	a0,24(sp)
    80023aaa:	4509                	li	a0,2
    80023aac:	f02a                	sd	a0,32(sp)
    80023aae:	f402                	sd	zero,40(sp)
    80023ab0:	00ac                	addi	a1,sp,72
    80023ab2:	fc2e                	sd	a1,56(sp)
    80023ab4:	e0aa                	sd	a0,64(sp)
    80023ab6:	0828                	addi	a0,sp,24
    80023ab8:	85b2                	mv	a1,a2
    80023aba:	fffff097          	auipc	ra,0xfffff
    80023abe:	828080e7          	jalr	-2008(ra) # 800222e2 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
	...

Disassembly of section .text._ZN4core3str8converts9from_utf817h3f0a2d8686bfd9bbE:

0000000080023ac4 <_ZN4core3str8converts9from_utf817h3f0a2d8686bfd9bbE>:
    80023ac4:	711d                	addi	sp,sp,-96
    80023ac6:	eca2                	sd	s0,88(sp)
    80023ac8:	e8a6                	sd	s1,80(sp)
    80023aca:	e4ca                	sd	s2,72(sp)
    80023acc:	e0ce                	sd	s3,64(sp)
    80023ace:	fc52                	sd	s4,56(sp)
    80023ad0:	f856                	sd	s5,48(sp)
    80023ad2:	f45a                	sd	s6,40(sp)
    80023ad4:	f05e                	sd	s7,32(sp)
    80023ad6:	ec62                	sd	s8,24(sp)
    80023ad8:	e866                	sd	s9,16(sp)
    80023ada:	e46a                	sd	s10,8(sp)
    80023adc:	ff160693          	addi	a3,a2,-15
    80023ae0:	00d63733          	sltu	a4,a2,a3
    80023ae4:	4c81                	li	s9,0
    80023ae6:	e311                	bnez	a4,80023aea <_ZN4core3str8converts9from_utf817h3f0a2d8686bfd9bbE+0x26>
    80023ae8:	8cb6                	mv	s9,a3
    80023aea:	20060663          	beqz	a2,80023cf6 <.LBB222_49+0x1f4>
    80023aee:	4681                	li	a3,0
    80023af0:	00758713          	addi	a4,a1,7
    80023af4:	9b61                	andi	a4,a4,-8
    80023af6:	40b70833          	sub	a6,a4,a1
    80023afa:	00180713          	addi	a4,a6,1 # 1c0001 <.Lline_table_start0+0x1894ff>
    80023afe:	00173c13          	seqz	s8,a4

0000000080023b02 <.LBB222_49>:
    80023b02:	00009897          	auipc	a7,0x9
    80023b06:	1f688893          	addi	a7,a7,502 # 8002ccf8 <_ZN4core3str11validations15UTF8_CHAR_WIDTH17h26c7bb6d1905d302E>
    80023b0a:	4291                	li	t0,4
    80023b0c:	0f400313          	li	t1,244
    80023b10:	08000393          	li	t2,128
    80023b14:	0f000e13          	li	t3,240
    80023b18:	03000e93          	li	t4,48
    80023b1c:	4f09                	li	t5,2
    80023b1e:	5ffd                	li	t6,-1
    80023b20:	0bf00913          	li	s2,191
    80023b24:	4b8d                	li	s7,3
    80023b26:	0ed00b13          	li	s6,237
    80023b2a:	0e000993          	li	s3,224
    80023b2e:	0a000a13          	li	s4,160
    80023b32:	4aad                	li	s5,11
    80023b34:	7741                	lui	a4,0xffff0
    80023b36:	1017071b          	addiw	a4,a4,257
    80023b3a:	0742                	slli	a4,a4,0x10
    80023b3c:	10170713          	addi	a4,a4,257 # ffffffffffff0101 <end+0xffffffff7ff7cb71>
    80023b40:	0742                	slli	a4,a4,0x10
    80023b42:	10170713          	addi	a4,a4,257
    80023b46:	073e                	slli	a4,a4,0xf
    80023b48:	08070413          	addi	s0,a4,128
    80023b4c:	a029                	j	80023b56 <.LBB222_49+0x54>
    80023b4e:	00170693          	addi	a3,a4,1
    80023b52:	1ac6f263          	bgeu	a3,a2,80023cf6 <.LBB222_49+0x1f4>
    80023b56:	00d58733          	add	a4,a1,a3
    80023b5a:	00074703          	lbu	a4,0(a4)
    80023b5e:	03871793          	slli	a5,a4,0x38
    80023b62:	4387d493          	srai	s1,a5,0x38
    80023b66:	0004cc63          	bltz	s1,80023b7e <.LBB222_49+0x7c>
    80023b6a:	000c1663          	bnez	s8,80023b76 <.LBB222_49+0x74>
    80023b6e:	40d80733          	sub	a4,a6,a3
    80023b72:	8b1d                	andi	a4,a4,7
    80023b74:	cf05                	beqz	a4,80023bac <.LBB222_49+0xaa>
    80023b76:	0685                	addi	a3,a3,1
    80023b78:	fcc6efe3          	bltu	a3,a2,80023b56 <.LBB222_49+0x54>
    80023b7c:	aaad                	j	80023cf6 <.LBB222_49+0x1f4>
    80023b7e:	011707b3          	add	a5,a4,a7
    80023b82:	0007c783          	lbu	a5,0(a5)
    80023b86:	04578b63          	beq	a5,t0,80023bdc <.LBB222_49+0xda>
    80023b8a:	07778b63          	beq	a5,s7,80023c00 <.LBB222_49+0xfe>
    80023b8e:	17e79b63          	bne	a5,t5,80023d04 <.LBB222_49+0x202>
    80023b92:	00168713          	addi	a4,a3,1
    80023b96:	16c77463          	bgeu	a4,a2,80023cfe <.LBB222_49+0x1fc>
    80023b9a:	00e587b3          	add	a5,a1,a4
    80023b9e:	0007c783          	lbu	a5,0(a5)
    80023ba2:	0c07f793          	andi	a5,a5,192
    80023ba6:	fa7784e3          	beq	a5,t2,80023b4e <.LBB222_49+0x4c>
    80023baa:	aaa9                	j	80023d04 <.LBB222_49+0x202>
    80023bac:	0196fc63          	bgeu	a3,s9,80023bc4 <.LBB222_49+0xc2>
    80023bb0:	00d58733          	add	a4,a1,a3
    80023bb4:	631c                	ld	a5,0(a4)
    80023bb6:	6718                	ld	a4,8(a4)
    80023bb8:	8f5d                	or	a4,a4,a5
    80023bba:	8f61                	and	a4,a4,s0
    80023bbc:	e701                	bnez	a4,80023bc4 <.LBB222_49+0xc2>
    80023bbe:	06c1                	addi	a3,a3,16
    80023bc0:	ff96e8e3          	bltu	a3,s9,80023bb0 <.LBB222_49+0xae>
    80023bc4:	fac6fae3          	bgeu	a3,a2,80023b78 <.LBB222_49+0x76>
    80023bc8:	00d58733          	add	a4,a1,a3
    80023bcc:	00070703          	lb	a4,0(a4)
    80023bd0:	fa0744e3          	bltz	a4,80023b78 <.LBB222_49+0x76>
    80023bd4:	0685                	addi	a3,a3,1
    80023bd6:	fed619e3          	bne	a2,a3,80023bc8 <.LBB222_49+0xc6>
    80023bda:	aa31                	j	80023cf6 <.LBB222_49+0x1f4>
    80023bdc:	00168793          	addi	a5,a3,1
    80023be0:	10c7ff63          	bgeu	a5,a2,80023cfe <.LBB222_49+0x1fc>
    80023be4:	97ae                	add	a5,a5,a1
    80023be6:	0007c783          	lbu	a5,0(a5)
    80023bea:	02670b63          	beq	a4,t1,80023c20 <.LBB222_49+0x11e>
    80023bee:	05c71363          	bne	a4,t3,80023c34 <.LBB222_49+0x132>
    80023bf2:	07078713          	addi	a4,a5,112
    80023bf6:	0ff77713          	andi	a4,a4,255
    80023bfa:	05d76d63          	bltu	a4,t4,80023c54 <.LBB222_49+0x152>
    80023bfe:	a219                	j	80023d04 <.LBB222_49+0x202>
    80023c00:	00168793          	addi	a5,a3,1
    80023c04:	0ec7fd63          	bgeu	a5,a2,80023cfe <.LBB222_49+0x1fc>
    80023c08:	97ae                	add	a5,a5,a1
    80023c0a:	0007c783          	lbu	a5,0(a5)
    80023c0e:	07670c63          	beq	a4,s6,80023c86 <.LBB222_49+0x184>
    80023c12:	09371463          	bne	a4,s3,80023c9a <.LBB222_49+0x198>
    80023c16:	0e07f713          	andi	a4,a5,224
    80023c1a:	0b470f63          	beq	a4,s4,80023cd8 <.LBB222_49+0x1d6>
    80023c1e:	a0dd                	j	80023d04 <.LBB222_49+0x202>
    80023c20:	03879713          	slli	a4,a5,0x38
    80023c24:	9761                	srai	a4,a4,0x38
    80023c26:	00072713          	slti	a4,a4,0
    80023c2a:	0907b793          	sltiu	a5,a5,144
    80023c2e:	8f7d                	and	a4,a4,a5
    80023c30:	e315                	bnez	a4,80023c54 <.LBB222_49+0x152>
    80023c32:	a8c9                	j	80023d04 <.LBB222_49+0x202>
    80023c34:	00f48713          	addi	a4,s1,15
    80023c38:	0ff77713          	andi	a4,a4,255
    80023c3c:	00ef3733          	sltu	a4,t5,a4
    80023c40:	03879493          	slli	s1,a5,0x38
    80023c44:	94e1                	srai	s1,s1,0x38
    80023c46:	009fa4b3          	slt	s1,t6,s1
    80023c4a:	8f45                	or	a4,a4,s1
    80023c4c:	00f937b3          	sltu	a5,s2,a5
    80023c50:	8f5d                	or	a4,a4,a5
    80023c52:	eb4d                	bnez	a4,80023d04 <.LBB222_49+0x202>
    80023c54:	00268713          	addi	a4,a3,2
    80023c58:	0ac77363          	bgeu	a4,a2,80023cfe <.LBB222_49+0x1fc>
    80023c5c:	972e                	add	a4,a4,a1
    80023c5e:	00074703          	lbu	a4,0(a4)
    80023c62:	0c077713          	andi	a4,a4,192
    80023c66:	4485                	li	s1,1
    80023c68:	0c771363          	bne	a4,t2,80023d2e <.LBB222_49+0x22c>
    80023c6c:	00368713          	addi	a4,a3,3
    80023c70:	08c77763          	bgeu	a4,a2,80023cfe <.LBB222_49+0x1fc>
    80023c74:	00e587b3          	add	a5,a1,a4
    80023c78:	0007c783          	lbu	a5,0(a5)
    80023c7c:	0c07f793          	andi	a5,a5,192
    80023c80:	ec7787e3          	beq	a5,t2,80023b4e <.LBB222_49+0x4c>
    80023c84:	a07d                	j	80023d32 <.LBB222_49+0x230>
    80023c86:	03879713          	slli	a4,a5,0x38
    80023c8a:	9761                	srai	a4,a4,0x38
    80023c8c:	00072713          	slti	a4,a4,0
    80023c90:	0a07b793          	sltiu	a5,a5,160
    80023c94:	8f7d                	and	a4,a4,a5
    80023c96:	e329                	bnez	a4,80023cd8 <.LBB222_49+0x1d6>
    80023c98:	a0b5                	j	80023d04 <.LBB222_49+0x202>
    80023c9a:	01f48713          	addi	a4,s1,31
    80023c9e:	0ff77713          	andi	a4,a4,255
    80023ca2:	03879d13          	slli	s10,a5,0x38
    80023ca6:	00eaeb63          	bltu	s5,a4,80023cbc <.LBB222_49+0x1ba>
    80023caa:	438d5713          	srai	a4,s10,0x38
    80023cae:	00072713          	slti	a4,a4,0
    80023cb2:	0c07b793          	sltiu	a5,a5,192
    80023cb6:	8f7d                	and	a4,a4,a5
    80023cb8:	e305                	bnez	a4,80023cd8 <.LBB222_49+0x1d6>
    80023cba:	a0a9                	j	80023d04 <.LBB222_49+0x202>
    80023cbc:	ffe4f713          	andi	a4,s1,-2
    80023cc0:	0749                	addi	a4,a4,18
    80023cc2:	00e03733          	snez	a4,a4
    80023cc6:	438d5493          	srai	s1,s10,0x38
    80023cca:	009fa4b3          	slt	s1,t6,s1
    80023cce:	8f45                	or	a4,a4,s1
    80023cd0:	00f937b3          	sltu	a5,s2,a5
    80023cd4:	8f5d                	or	a4,a4,a5
    80023cd6:	e71d                	bnez	a4,80023d04 <.LBB222_49+0x202>
    80023cd8:	00268713          	addi	a4,a3,2
    80023cdc:	02c77163          	bgeu	a4,a2,80023cfe <.LBB222_49+0x1fc>
    80023ce0:	00e587b3          	add	a5,a1,a4
    80023ce4:	0007c783          	lbu	a5,0(a5)
    80023ce8:	0c07f793          	andi	a5,a5,192
    80023cec:	e67781e3          	beq	a5,t2,80023b4e <.LBB222_49+0x4c>
    80023cf0:	4485                	li	s1,1
    80023cf2:	4589                	li	a1,2
    80023cf4:	a811                	j	80023d08 <.LBB222_49+0x206>
    80023cf6:	4681                	li	a3,0
    80023cf8:	e50c                	sd	a1,8(a0)
    80023cfa:	e910                	sd	a2,16(a0)
    80023cfc:	a819                	j	80023d12 <.LBB222_49+0x210>
    80023cfe:	4581                	li	a1,0
    80023d00:	4481                	li	s1,0
    80023d02:	a019                	j	80023d08 <.LBB222_49+0x206>
    80023d04:	4585                	li	a1,1
    80023d06:	4485                	li	s1,1
    80023d08:	05a2                	slli	a1,a1,0x8
    80023d0a:	8dc5                	or	a1,a1,s1
    80023d0c:	e514                	sd	a3,8(a0)
    80023d0e:	e90c                	sd	a1,16(a0)
    80023d10:	4685                	li	a3,1
    80023d12:	e114                	sd	a3,0(a0)
    80023d14:	6d22                	ld	s10,8(sp)
    80023d16:	6cc2                	ld	s9,16(sp)
    80023d18:	6c62                	ld	s8,24(sp)
    80023d1a:	7b82                	ld	s7,32(sp)
    80023d1c:	7b22                	ld	s6,40(sp)
    80023d1e:	7ac2                	ld	s5,48(sp)
    80023d20:	7a62                	ld	s4,56(sp)
    80023d22:	6986                	ld	s3,64(sp)
    80023d24:	6926                	ld	s2,72(sp)
    80023d26:	64c6                	ld	s1,80(sp)
    80023d28:	6466                	ld	s0,88(sp)
    80023d2a:	6125                	addi	sp,sp,96
    80023d2c:	8082                	ret
    80023d2e:	4589                	li	a1,2
    80023d30:	bfe1                	j	80023d08 <.LBB222_49+0x206>
    80023d32:	458d                	li	a1,3
    80023d34:	bfd1                	j	80023d08 <.LBB222_49+0x206>

Disassembly of section .text.unlikely._ZN4core3str16slice_error_fail17h98613a818fa8baa4E:

0000000080023d36 <_ZN4core3str16slice_error_fail17h98613a818fa8baa4E>:
    80023d36:	7115                	addi	sp,sp,-224
    80023d38:	ed86                	sd	ra,216(sp)
    80023d3a:	e432                	sd	a2,8(sp)
    80023d3c:	10100793          	li	a5,257
    80023d40:	e836                	sd	a3,16(sp)
    80023d42:	00f5fb63          	bgeu	a1,a5,80023d58 <.LBB239_47+0x10>
    80023d46:	4801                	li	a6,0

0000000080023d48 <.LBB239_47>:
    80023d48:	00009797          	auipc	a5,0x9
    80023d4c:	aa078793          	addi	a5,a5,-1376 # 8002c7e8 <.Lanon.f077182aff5f58a5660f14b1290425e3.133>
    80023d50:	f43e                	sd	a5,40(sp)
    80023d52:	ec2a                	sd	a0,24(sp)
    80023d54:	f02e                	sd	a1,32(sp)
    80023d56:	a889                	j	80023da8 <.LBB239_48+0xc>
    80023d58:	0ff00793          	li	a5,255
    80023d5c:	40b788b3          	sub	a7,a5,a1
    80023d60:	10000313          	li	t1,256
    80023d64:	fbf00813          	li	a6,-65
    80023d68:	a839                	j	80023d86 <.LBB239_47+0x3e>
    80023d6a:	fff30293          	addi	t0,t1,-1
    80023d6e:	006887b3          	add	a5,a7,t1
    80023d72:	00503333          	snez	t1,t0
    80023d76:	f0078793          	addi	a5,a5,-256
    80023d7a:	00f037b3          	snez	a5,a5
    80023d7e:	00f377b3          	and	a5,t1,a5
    80023d82:	8316                	mv	t1,t0
    80023d84:	cb91                	beqz	a5,80023d98 <.LBB239_47+0x50>
    80023d86:	feb372e3          	bgeu	t1,a1,80023d6a <.LBB239_47+0x22>
    80023d8a:	006507b3          	add	a5,a0,t1
    80023d8e:	00078783          	lb	a5,0(a5)
    80023d92:	fcf85ce3          	bge	a6,a5,80023d6a <.LBB239_47+0x22>
    80023d96:	829a                	mv	t0,t1
    80023d98:	ec2a                	sd	a0,24(sp)
    80023d9a:	f016                	sd	t0,32(sp)

0000000080023d9c <.LBB239_48>:
    80023d9c:	00009797          	auipc	a5,0x9
    80023da0:	05c78793          	addi	a5,a5,92 # 8002cdf8 <.Lanon.f077182aff5f58a5660f14b1290425e3.315>
    80023da4:	f43e                	sd	a5,40(sp)
    80023da6:	4815                	li	a6,5
    80023da8:	00c5b8b3          	sltu	a7,a1,a2
    80023dac:	0018c293          	xori	t0,a7,1
    80023db0:	00d5b7b3          	sltu	a5,a1,a3
    80023db4:	0017c793          	xori	a5,a5,1
    80023db8:	00f2f7b3          	and	a5,t0,a5
    80023dbc:	f842                	sd	a6,48(sp)
    80023dbe:	ef8d                	bnez	a5,80023df8 <.LBB239_51+0xe>
    80023dc0:	00089363          	bnez	a7,80023dc6 <.LBB239_48+0x2a>
    80023dc4:	8636                	mv	a2,a3
    80023dc6:	e4b2                	sd	a2,72(sp)
    80023dc8:	00a8                	addi	a0,sp,72
    80023dca:	e52a                	sd	a0,136(sp)

0000000080023dcc <.LBB239_49>:
    80023dcc:	00001517          	auipc	a0,0x1
    80023dd0:	b3650513          	addi	a0,a0,-1226 # 80024902 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h9c6c4af1578f7c29E>
    80023dd4:	e92a                	sd	a0,144(sp)
    80023dd6:	0828                	addi	a0,sp,24
    80023dd8:	ed2a                	sd	a0,152(sp)

0000000080023dda <.LBB239_50>:
    80023dda:	00001517          	auipc	a0,0x1
    80023dde:	f8050513          	addi	a0,a0,-128 # 80024d5a <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h65c6410ca8a4d3e4E>
    80023de2:	f12a                	sd	a0,160(sp)
    80023de4:	102c                	addi	a1,sp,40
    80023de6:	f52e                	sd	a1,168(sp)
    80023de8:	f92a                	sd	a0,176(sp)

0000000080023dea <.LBB239_51>:
    80023dea:	00009517          	auipc	a0,0x9
    80023dee:	03650513          	addi	a0,a0,54 # 8002ce20 <.Lanon.f077182aff5f58a5660f14b1290425e3.318>
    80023df2:	ecaa                	sd	a0,88(sp)
    80023df4:	450d                	li	a0,3
    80023df6:	a2cd                	j	80023fd8 <.LBB239_60+0xc>
    80023df8:	02c6fd63          	bgeu	a3,a2,80023e32 <.LBB239_54+0xe>
    80023dfc:	0028                	addi	a0,sp,8
    80023dfe:	e52a                	sd	a0,136(sp)

0000000080023e00 <.LBB239_52>:
    80023e00:	00001517          	auipc	a0,0x1
    80023e04:	b0250513          	addi	a0,a0,-1278 # 80024902 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h9c6c4af1578f7c29E>
    80023e08:	e92a                	sd	a0,144(sp)
    80023e0a:	080c                	addi	a1,sp,16
    80023e0c:	ed2e                	sd	a1,152(sp)
    80023e0e:	f12a                	sd	a0,160(sp)
    80023e10:	0828                	addi	a0,sp,24
    80023e12:	f52a                	sd	a0,168(sp)

0000000080023e14 <.LBB239_53>:
    80023e14:	00001517          	auipc	a0,0x1
    80023e18:	f4650513          	addi	a0,a0,-186 # 80024d5a <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h65c6410ca8a4d3e4E>
    80023e1c:	f92a                	sd	a0,176(sp)
    80023e1e:	102c                	addi	a1,sp,40
    80023e20:	fd2e                	sd	a1,184(sp)
    80023e22:	e1aa                	sd	a0,192(sp)

0000000080023e24 <.LBB239_54>:
    80023e24:	00009517          	auipc	a0,0x9
    80023e28:	03c50513          	addi	a0,a0,60 # 8002ce60 <.Lanon.f077182aff5f58a5660f14b1290425e3.322>
    80023e2c:	ecaa                	sd	a0,88(sp)
    80023e2e:	4511                	li	a0,4
    80023e30:	a265                	j	80023fd8 <.LBB239_60+0xc>
    80023e32:	00163813          	seqz	a6,a2
    80023e36:	00c5c7b3          	xor	a5,a1,a2
    80023e3a:	0017b793          	seqz	a5,a5
    80023e3e:	00f867b3          	or	a5,a6,a5
    80023e42:	c399                	beqz	a5,80023e48 <.LBB239_54+0x24>
    80023e44:	8636                	mv	a2,a3
    80023e46:	a819                	j	80023e5c <.LBB239_54+0x38>
    80023e48:	00b67a63          	bgeu	a2,a1,80023e5c <.LBB239_54+0x38>
    80023e4c:	00c507b3          	add	a5,a0,a2
    80023e50:	00078803          	lb	a6,0(a5)
    80023e54:	fc000793          	li	a5,-64
    80023e58:	fef856e3          	bge	a6,a5,80023e44 <.LBB239_54+0x20>
    80023e5c:	00163693          	seqz	a3,a2
    80023e60:	00b647b3          	xor	a5,a2,a1
    80023e64:	0017b793          	seqz	a5,a5
    80023e68:	8edd                	or	a3,a3,a5
    80023e6a:	fc32                	sd	a2,56(sp)
    80023e6c:	c28d                	beqz	a3,80023e8e <.LBB239_55+0x18>
    80023e6e:	87b2                	mv	a5,a2
    80023e70:	863e                	mv	a2,a5
    80023e72:	04b61763          	bne	a2,a1,80023ec0 <.LBB239_55+0x4a>

0000000080023e76 <.LBB239_55>:
    80023e76:	00009517          	auipc	a0,0x9
    80023e7a:	98a50513          	addi	a0,a0,-1654 # 8002c800 <.Lanon.f077182aff5f58a5660f14b1290425e3.168>
    80023e7e:	02b00593          	li	a1,43
    80023e82:	863a                	mv	a2,a4
    80023e84:	ffffe097          	auipc	ra,0xffffe
    80023e88:	3f2080e7          	jalr	1010(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80023e8c:	0000                	unimp
    80023e8e:	00158893          	addi	a7,a1,1
    80023e92:	fc000813          	li	a6,-64
    80023e96:	a821                	j	80023eae <.LBB239_55+0x38>
    80023e98:	fff60793          	addi	a5,a2,-1
    80023e9c:	0017b693          	seqz	a3,a5
    80023ea0:	00c8c633          	xor	a2,a7,a2
    80023ea4:	00163613          	seqz	a2,a2
    80023ea8:	8ed1                	or	a3,a3,a2
    80023eaa:	863e                	mv	a2,a5
    80023eac:	f2f1                	bnez	a3,80023e70 <.LBB239_54+0x4c>
    80023eae:	feb675e3          	bgeu	a2,a1,80023e98 <.LBB239_55+0x22>
    80023eb2:	00c507b3          	add	a5,a0,a2
    80023eb6:	00078783          	lb	a5,0(a5)
    80023eba:	fd07cfe3          	blt	a5,a6,80023e98 <.LBB239_55+0x22>
    80023ebe:	bf55                	j	80023e72 <.LBB239_54+0x4e>
    80023ec0:	00c507b3          	add	a5,a0,a2
    80023ec4:	00078683          	lb	a3,0(a5)
    80023ec8:	0ff6f293          	andi	t0,a3,255
    80023ecc:	0006c563          	bltz	a3,80023ed6 <.LBB239_55+0x60>
    80023ed0:	c296                	sw	t0,68(sp)
    80023ed2:	4585                	li	a1,1
    80023ed4:	a84d                	j	80023f86 <.LBB239_55+0x110>
    80023ed6:	952e                	add	a0,a0,a1
    80023ed8:	00178593          	addi	a1,a5,1
    80023edc:	00a59e63          	bne	a1,a0,80023ef8 <.LBB239_55+0x82>
    80023ee0:	4781                	li	a5,0
    80023ee2:	85aa                	mv	a1,a0
    80023ee4:	0e000693          	li	a3,224
    80023ee8:	01f2f813          	andi	a6,t0,31
    80023eec:	02d2f263          	bgeu	t0,a3,80023f10 <.LBB239_55+0x9a>
    80023ef0:	00681513          	slli	a0,a6,0x6
    80023ef4:	8d5d                	or	a0,a0,a5
    80023ef6:	a88d                	j	80023f68 <.LBB239_55+0xf2>
    80023ef8:	0017c683          	lbu	a3,1(a5)
    80023efc:	00278593          	addi	a1,a5,2
    80023f00:	03f6f793          	andi	a5,a3,63
    80023f04:	0e000693          	li	a3,224
    80023f08:	01f2f813          	andi	a6,t0,31
    80023f0c:	fed2e2e3          	bltu	t0,a3,80023ef0 <.LBB239_55+0x7a>
    80023f10:	00a59563          	bne	a1,a0,80023f1a <.LBB239_55+0xa4>
    80023f14:	4581                	li	a1,0
    80023f16:	88aa                	mv	a7,a0
    80023f18:	a039                	j	80023f26 <.LBB239_55+0xb0>
    80023f1a:	0005c683          	lbu	a3,0(a1)
    80023f1e:	00158893          	addi	a7,a1,1
    80023f22:	03f6f593          	andi	a1,a3,63
    80023f26:	00679693          	slli	a3,a5,0x6
    80023f2a:	0f000313          	li	t1,240
    80023f2e:	00b6e7b3          	or	a5,a3,a1
    80023f32:	0062e663          	bltu	t0,t1,80023f3e <.LBB239_55+0xc8>
    80023f36:	00a89863          	bne	a7,a0,80023f46 <.LBB239_55+0xd0>
    80023f3a:	4501                	li	a0,0
    80023f3c:	a809                	j	80023f4e <.LBB239_55+0xd8>
    80023f3e:	00c81513          	slli	a0,a6,0xc
    80023f42:	8d5d                	or	a0,a0,a5
    80023f44:	a015                	j	80023f68 <.LBB239_55+0xf2>
    80023f46:	0008c503          	lbu	a0,0(a7)
    80023f4a:	03f57513          	andi	a0,a0,63
    80023f4e:	01281593          	slli	a1,a6,0x12
    80023f52:	001c06b7          	lui	a3,0x1c0
    80023f56:	8df5                	and	a1,a1,a3
    80023f58:	00679693          	slli	a3,a5,0x6
    80023f5c:	8dd5                	or	a1,a1,a3
    80023f5e:	8d4d                	or	a0,a0,a1
    80023f60:	001105b7          	lui	a1,0x110
    80023f64:	f0b509e3          	beq	a0,a1,80023e76 <.LBB239_55>
    80023f68:	c2aa                	sw	a0,68(sp)
    80023f6a:	08000693          	li	a3,128
    80023f6e:	4585                	li	a1,1
    80023f70:	00d56b63          	bltu	a0,a3,80023f86 <.LBB239_55+0x110>
    80023f74:	00b55693          	srli	a3,a0,0xb
    80023f78:	4589                	li	a1,2
    80023f7a:	c691                	beqz	a3,80023f86 <.LBB239_55+0x110>
    80023f7c:	8141                	srli	a0,a0,0x10
    80023f7e:	00153513          	seqz	a0,a0
    80023f82:	4591                	li	a1,4
    80023f84:	8d89                	sub	a1,a1,a0
    80023f86:	00c58533          	add	a0,a1,a2
    80023f8a:	e4b2                	sd	a2,72(sp)
    80023f8c:	e8aa                	sd	a0,80(sp)
    80023f8e:	1828                	addi	a0,sp,56
    80023f90:	e52a                	sd	a0,136(sp)

0000000080023f92 <.LBB239_56>:
    80023f92:	00001517          	auipc	a0,0x1
    80023f96:	97050513          	addi	a0,a0,-1680 # 80024902 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h9c6c4af1578f7c29E>
    80023f9a:	e92a                	sd	a0,144(sp)
    80023f9c:	00c8                	addi	a0,sp,68
    80023f9e:	ed2a                	sd	a0,152(sp)

0000000080023fa0 <.LBB239_57>:
    80023fa0:	fffff517          	auipc	a0,0xfffff
    80023fa4:	6f050513          	addi	a0,a0,1776 # 80023690 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hdf5d4d6f5f47000aE>
    80023fa8:	f12a                	sd	a0,160(sp)
    80023faa:	00a8                	addi	a0,sp,72
    80023fac:	f52a                	sd	a0,168(sp)

0000000080023fae <.LBB239_58>:
    80023fae:	ffffe517          	auipc	a0,0xffffe
    80023fb2:	10c50513          	addi	a0,a0,268 # 800220ba <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17hafa23fe214721e38E>
    80023fb6:	f92a                	sd	a0,176(sp)
    80023fb8:	0828                	addi	a0,sp,24
    80023fba:	fd2a                	sd	a0,184(sp)

0000000080023fbc <.LBB239_59>:
    80023fbc:	00001517          	auipc	a0,0x1
    80023fc0:	d9e50513          	addi	a0,a0,-610 # 80024d5a <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h65c6410ca8a4d3e4E>
    80023fc4:	e1aa                	sd	a0,192(sp)
    80023fc6:	102c                	addi	a1,sp,40
    80023fc8:	e5ae                	sd	a1,200(sp)
    80023fca:	e9aa                	sd	a0,208(sp)

0000000080023fcc <.LBB239_60>:
    80023fcc:	00009517          	auipc	a0,0x9
    80023fd0:	f0450513          	addi	a0,a0,-252 # 8002ced0 <.Lanon.f077182aff5f58a5660f14b1290425e3.326>
    80023fd4:	ecaa                	sd	a0,88(sp)
    80023fd6:	4515                	li	a0,5
    80023fd8:	f0aa                	sd	a0,96(sp)
    80023fda:	f482                	sd	zero,104(sp)
    80023fdc:	012c                	addi	a1,sp,136
    80023fde:	fcae                	sd	a1,120(sp)
    80023fe0:	e12a                	sd	a0,128(sp)
    80023fe2:	08a8                	addi	a0,sp,88
    80023fe4:	85ba                	mv	a1,a4
    80023fe6:	ffffe097          	auipc	ra,0xffffe
    80023fea:	2fc080e7          	jalr	764(ra) # 800222e2 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
	...

Disassembly of section .text._ZN4core7unicode9printable12is_printable17hd386595a5390c2aaE:

0000000080023ff0 <_ZN4core7unicode9printable12is_printable17hd386595a5390c2aaE>:
    80023ff0:	1141                	addi	sp,sp,-16
    80023ff2:	e406                	sd	ra,8(sp)
    80023ff4:	0105559b          	srliw	a1,a0,0x10
    80023ff8:	e1d9                	bnez	a1,8002407e <.LBB255_42+0x12>
    80023ffa:	4581                	li	a1,0
    80023ffc:	0085561b          	srliw	a2,a0,0x8

0000000080024000 <.LBB255_40>:
    80024000:	00009797          	auipc	a5,0x9
    80024004:	f7878793          	addi	a5,a5,-136 # 8002cf78 <.Lanon.f077182aff5f58a5660f14b1290425e3.349>
    80024008:	0ff67313          	andi	t1,a2,255
    8002400c:	12300813          	li	a6,291

0000000080024010 <.LBB255_41>:
    80024010:	00009897          	auipc	a7,0x9
    80024014:	fba88893          	addi	a7,a7,-70 # 8002cfca <.Lanon.f077182aff5f58a5660f14b1290425e3.350>
    80024018:	05278293          	addi	t0,a5,82
    8002401c:	0ff57713          	andi	a4,a0,255
    80024020:	a811                	j	80024034 <.LBB255_41+0x24>
    80024022:	00d335b3          	sltu	a1,t1,a3
    80024026:	0057c633          	xor	a2,a5,t0
    8002402a:	00163613          	seqz	a2,a2
    8002402e:	8e4d                	or	a2,a2,a1
    80024030:	859e                	mv	a1,t2
    80024032:	ea15                	bnez	a2,80024066 <.LBB255_41+0x56>
    80024034:	0007c683          	lbu	a3,0(a5)
    80024038:	0017c603          	lbu	a2,1(a5)
    8002403c:	0789                	addi	a5,a5,2
    8002403e:	00c583b3          	add	t2,a1,a2
    80024042:	fe6690e3          	bne	a3,t1,80024022 <.LBB255_41+0x12>
    80024046:	1eb3e463          	bltu	t2,a1,8002422e <.LBB255_46>
    8002404a:	1f03fd63          	bgeu	t2,a6,80024244 <.LBB255_47>
    8002404e:	95c6                	add	a1,a1,a7
    80024050:	ca01                	beqz	a2,80024060 <.LBB255_41+0x50>
    80024052:	0005c683          	lbu	a3,0(a1) # 110000 <.Lline_table_start0+0xd94fe>
    80024056:	0585                	addi	a1,a1,1
    80024058:	167d                	addi	a2,a2,-1
    8002405a:	fee69be3          	bne	a3,a4,80024050 <.LBB255_41+0x40>
    8002405e:	a06d                	j	80024108 <.LBB255_45+0x12>
    80024060:	859e                	mv	a1,t2
    80024062:	fc5799e3          	bne	a5,t0,80024034 <.LBB255_41+0x24>
    80024066:	65c1                	lui	a1,0x10
    80024068:	35fd                	addiw	a1,a1,-1
    8002406a:	8de9                	and	a1,a1,a0

000000008002406c <.LBB255_42>:
    8002406c:	00009717          	auipc	a4,0x9
    80024070:	08070713          	addi	a4,a4,128 # 8002d0ec <.Lanon.f077182aff5f58a5660f14b1290425e3.351>
    80024074:	4505                	li	a0,1
    80024076:	587d                	li	a6,-1
    80024078:	13570693          	addi	a3,a4,309
    8002407c:	a06d                	j	80024126 <.LBB255_45+0x30>
    8002407e:	0115559b          	srliw	a1,a0,0x11
    80024082:	e5e9                	bnez	a1,8002414c <.LBB255_45+0x56>
    80024084:	4581                	li	a1,0
    80024086:	0085561b          	srliw	a2,a0,0x8

000000008002408a <.LBB255_43>:
    8002408a:	00009797          	auipc	a5,0x9
    8002408e:	19778793          	addi	a5,a5,407 # 8002d221 <.Lanon.f077182aff5f58a5660f14b1290425e3.352>
    80024092:	0ff67313          	andi	t1,a2,255
    80024096:	0b000813          	li	a6,176

000000008002409a <.LBB255_44>:
    8002409a:	00009897          	auipc	a7,0x9
    8002409e:	1d388893          	addi	a7,a7,467 # 8002d26d <.Lanon.f077182aff5f58a5660f14b1290425e3.353>
    800240a2:	04c78293          	addi	t0,a5,76
    800240a6:	0ff57713          	andi	a4,a0,255
    800240aa:	a811                	j	800240be <.LBB255_44+0x24>
    800240ac:	00d335b3          	sltu	a1,t1,a3
    800240b0:	0057c633          	xor	a2,a5,t0
    800240b4:	00163613          	seqz	a2,a2
    800240b8:	8e4d                	or	a2,a2,a1
    800240ba:	859e                	mv	a1,t2
    800240bc:	ea15                	bnez	a2,800240f0 <.LBB255_44+0x56>
    800240be:	0007c683          	lbu	a3,0(a5)
    800240c2:	0017c603          	lbu	a2,1(a5)
    800240c6:	0789                	addi	a5,a5,2
    800240c8:	00c583b3          	add	t2,a1,a2
    800240cc:	fe6690e3          	bne	a3,t1,800240ac <.LBB255_44+0x12>
    800240d0:	14b3ef63          	bltu	t2,a1,8002422e <.LBB255_46>
    800240d4:	1703ff63          	bgeu	t2,a6,80024252 <.LBB255_48>
    800240d8:	95c6                	add	a1,a1,a7
    800240da:	ca01                	beqz	a2,800240ea <.LBB255_44+0x50>
    800240dc:	0005c683          	lbu	a3,0(a1) # 10000 <.Lline_table_start0+0x6fe>
    800240e0:	0585                	addi	a1,a1,1
    800240e2:	167d                	addi	a2,a2,-1
    800240e4:	fee69be3          	bne	a3,a4,800240da <.LBB255_44+0x40>
    800240e8:	a005                	j	80024108 <.LBB255_45+0x12>
    800240ea:	859e                	mv	a1,t2
    800240ec:	fc5799e3          	bne	a5,t0,800240be <.LBB255_44+0x24>
    800240f0:	65c1                	lui	a1,0x10
    800240f2:	35fd                	addiw	a1,a1,-1
    800240f4:	8de9                	and	a1,a1,a0

00000000800240f6 <.LBB255_45>:
    800240f6:	00009717          	auipc	a4,0x9
    800240fa:	22670713          	addi	a4,a4,550 # 8002d31c <.Lanon.f077182aff5f58a5660f14b1290425e3.354>
    800240fe:	4505                	li	a0,1
    80024100:	587d                	li	a6,-1
    80024102:	1a370693          	addi	a3,a4,419
    80024106:	a209                	j	80024208 <.LBB255_45+0x112>
    80024108:	4501                	li	a0,0
    8002410a:	8905                	andi	a0,a0,1
    8002410c:	60a2                	ld	ra,8(sp)
    8002410e:	0141                	addi	sp,sp,16
    80024110:	8082                	ret
    80024112:	0ff7f793          	andi	a5,a5,255
    80024116:	8732                	mv	a4,a2
    80024118:	9d9d                	subw	a1,a1,a5
    8002411a:	fe05c8e3          	bltz	a1,8002410a <.LBB255_45+0x14>
    8002411e:	00154513          	xori	a0,a0,1
    80024122:	fed704e3          	beq	a4,a3,8002410a <.LBB255_45+0x14>
    80024126:	00070783          	lb	a5,0(a4)
    8002412a:	00170613          	addi	a2,a4,1
    8002412e:	fef842e3          	blt	a6,a5,80024112 <.LBB255_45+0x1c>
    80024132:	12d60c63          	beq	a2,a3,8002426a <.LBB255_49>
    80024136:	00174603          	lbu	a2,1(a4)
    8002413a:	07f7f793          	andi	a5,a5,127
    8002413e:	07a2                	slli	a5,a5,0x8
    80024140:	0709                	addi	a4,a4,2
    80024142:	8fd1                	or	a5,a5,a2
    80024144:	9d9d                	subw	a1,a1,a5
    80024146:	fc05dce3          	bgez	a1,8002411e <.LBB255_45+0x28>
    8002414a:	b7c1                	j	8002410a <.LBB255_45+0x14>
    8002414c:	fffd65b7          	lui	a1,0xfffd6
    80024150:	9225859b          	addiw	a1,a1,-1758
    80024154:	9da9                	addw	a1,a1,a0
    80024156:	0005061b          	sext.w	a2,a0
    8002415a:	02100693          	li	a3,33
    8002415e:	00b6b5b3          	sltu	a1,a3,a1
    80024162:	fffd56b7          	lui	a3,0xfffd5
    80024166:	8cb6869b          	addiw	a3,a3,-1845
    8002416a:	9ea9                	addw	a3,a3,a0
    8002416c:	4729                	li	a4,10
    8002416e:	00d736b3          	sltu	a3,a4,a3
    80024172:	8df5                	and	a1,a1,a3
    80024174:	002006b7          	lui	a3,0x200
    80024178:	36f9                	addiw	a3,a3,-2
    8002417a:	8ee9                	and	a3,a3,a0
    8002417c:	0002c737          	lui	a4,0x2c
    80024180:	81e7071b          	addiw	a4,a4,-2018
    80024184:	8eb9                	xor	a3,a3,a4
    80024186:	00d036b3          	snez	a3,a3
    8002418a:	8df5                	and	a1,a1,a3
    8002418c:	fffd36b7          	lui	a3,0xfffd3
    80024190:	15e6869b          	addiw	a3,a3,350
    80024194:	9ea9                	addw	a3,a3,a0
    80024196:	4735                	li	a4,13
    80024198:	00d736b3          	sltu	a3,a4,a3
    8002419c:	8df5                	and	a1,a1,a3
    8002419e:	fffd16b7          	lui	a3,0xfffd1
    800241a2:	41f6869b          	addiw	a3,a3,1055
    800241a6:	9ea9                	addw	a3,a3,a0
    800241a8:	6705                	lui	a4,0x1
    800241aa:	c1e7071b          	addiw	a4,a4,-994
    800241ae:	00d736b3          	sltu	a3,a4,a3
    800241b2:	8df5                	and	a1,a1,a3
    800241b4:	fffd06b7          	lui	a3,0xfffd0
    800241b8:	5e26869b          	addiw	a3,a3,1506
    800241bc:	9ea9                	addw	a3,a3,a0
    800241be:	5e100713          	li	a4,1505
    800241c2:	00d736b3          	sltu	a3,a4,a3
    800241c6:	8df5                	and	a1,a1,a3
    800241c8:	fffcf6b7          	lui	a3,0xfffcf
    800241cc:	cb56869b          	addiw	a3,a3,-843
    800241d0:	9d35                	addw	a0,a0,a3
    800241d2:	000af6b7          	lui	a3,0xaf
    800241d6:	db46869b          	addiw	a3,a3,-588
    800241da:	00a6b533          	sltu	a0,a3,a0
    800241de:	8d6d                	and	a0,a0,a1
    800241e0:	000e05b7          	lui	a1,0xe0
    800241e4:	1f05859b          	addiw	a1,a1,496
    800241e8:	00b635b3          	sltu	a1,a2,a1
    800241ec:	8d6d                	and	a0,a0,a1
    800241ee:	60a2                	ld	ra,8(sp)
    800241f0:	0141                	addi	sp,sp,16
    800241f2:	8082                	ret
    800241f4:	0ff7f793          	andi	a5,a5,255
    800241f8:	8732                	mv	a4,a2
    800241fa:	9d9d                	subw	a1,a1,a5
    800241fc:	f005c7e3          	bltz	a1,8002410a <.LBB255_45+0x14>
    80024200:	00154513          	xori	a0,a0,1
    80024204:	f0d703e3          	beq	a4,a3,8002410a <.LBB255_45+0x14>
    80024208:	00070783          	lb	a5,0(a4) # 1000 <.Lline_table_start0+0x30b>
    8002420c:	00170613          	addi	a2,a4,1
    80024210:	fef842e3          	blt	a6,a5,800241f4 <.LBB255_45+0xfe>
    80024214:	04d60b63          	beq	a2,a3,8002426a <.LBB255_49>
    80024218:	00174603          	lbu	a2,1(a4)
    8002421c:	07f7f793          	andi	a5,a5,127
    80024220:	07a2                	slli	a5,a5,0x8
    80024222:	0709                	addi	a4,a4,2
    80024224:	8fd1                	or	a5,a5,a2
    80024226:	9d9d                	subw	a1,a1,a5
    80024228:	fc05dce3          	bgez	a1,80024200 <.LBB255_45+0x10a>
    8002422c:	bdf9                	j	8002410a <.LBB255_45+0x14>

000000008002422e <.LBB255_46>:
    8002422e:	00009617          	auipc	a2,0x9
    80024232:	d1a60613          	addi	a2,a2,-742 # 8002cf48 <.Lanon.f077182aff5f58a5660f14b1290425e3.347>
    80024236:	852e                	mv	a0,a1
    80024238:	859e                	mv	a1,t2
    8002423a:	00000097          	auipc	ra,0x0
    8002423e:	84a080e7          	jalr	-1974(ra) # 80023a84 <_ZN4core5slice5index22slice_index_order_fail17h8c18576576dbf4e3E>
	...

0000000080024244 <.LBB255_47>:
    80024244:	00009617          	auipc	a2,0x9
    80024248:	d0460613          	addi	a2,a2,-764 # 8002cf48 <.Lanon.f077182aff5f58a5660f14b1290425e3.347>
    8002424c:	12200593          	li	a1,290
    80024250:	a039                	j	8002425e <.LBB255_48+0xc>

0000000080024252 <.LBB255_48>:
    80024252:	00009617          	auipc	a2,0x9
    80024256:	cf660613          	addi	a2,a2,-778 # 8002cf48 <.Lanon.f077182aff5f58a5660f14b1290425e3.347>
    8002425a:	0af00593          	li	a1,175
    8002425e:	851e                	mv	a0,t2
    80024260:	fffff097          	auipc	ra,0xfffff
    80024264:	7e4080e7          	jalr	2020(ra) # 80023a44 <_ZN4core5slice5index24slice_end_index_len_fail17hbdcbb59c061b5014E>
	...

000000008002426a <.LBB255_49>:
    8002426a:	00008517          	auipc	a0,0x8
    8002426e:	59650513          	addi	a0,a0,1430 # 8002c800 <.Lanon.f077182aff5f58a5660f14b1290425e3.168>

0000000080024272 <.LBB255_50>:
    80024272:	00009617          	auipc	a2,0x9
    80024276:	cee60613          	addi	a2,a2,-786 # 8002cf60 <.Lanon.f077182aff5f58a5660f14b1290425e3.348>
    8002427a:	02b00593          	li	a1,43
    8002427e:	ffffe097          	auipc	ra,0xffffe
    80024282:	ff8080e7          	jalr	-8(ra) # 80022276 <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN70_$LT$core..num..error..TryFromIntError$u20$as$u20$core..fmt..Debug$GT$3fmt17hc144b27efd65b050E:

0000000080024288 <_ZN70_$LT$core..num..error..TryFromIntError$u20$as$u20$core..fmt..Debug$GT$3fmt17hc144b27efd65b050E>:
    80024288:	7139                	addi	sp,sp,-64
    8002428a:	fc06                	sd	ra,56(sp)
    8002428c:	f822                	sd	s0,48(sp)
    8002428e:	f426                	sd	s1,40(sp)
    80024290:	842e                	mv	s0,a1
    80024292:	758c                	ld	a1,40(a1)
    80024294:	7014                	ld	a3,32(s0)
    80024296:	6d98                	ld	a4,24(a1)
    80024298:	84aa                	mv	s1,a0

000000008002429a <.LBB324_8>:
    8002429a:	00009597          	auipc	a1,0x9
    8002429e:	2b658593          	addi	a1,a1,694 # 8002d550 <.Lanon.f077182aff5f58a5660f14b1290425e3.425>
    800242a2:	463d                	li	a2,15
    800242a4:	8536                	mv	a0,a3
    800242a6:	9702                	jalr	a4
    800242a8:	e422                	sd	s0,8(sp)
    800242aa:	00a10c23          	sb	a0,24(sp)
    800242ae:	e802                	sd	zero,16(sp)
    800242b0:	00010ca3          	sb	zero,25(sp)
    800242b4:	f026                	sd	s1,32(sp)

00000000800242b6 <.LBB324_9>:
    800242b6:	00009617          	auipc	a2,0x9
    800242ba:	2aa60613          	addi	a2,a2,682 # 8002d560 <.Lanon.f077182aff5f58a5660f14b1290425e3.426>
    800242be:	0028                	addi	a0,sp,8
    800242c0:	100c                	addi	a1,sp,32
    800242c2:	ffffe097          	auipc	ra,0xffffe
    800242c6:	46a080e7          	jalr	1130(ra) # 8002272c <_ZN4core3fmt8builders10DebugTuple5field17h5bd338b8cb98b948E>
    800242ca:	6542                	ld	a0,16(sp)
    800242cc:	01814583          	lbu	a1,24(sp)
    800242d0:	c921                	beqz	a0,80024320 <.LBB324_11+0x10>
    800242d2:	4405                	li	s0,1
    800242d4:	e5a9                	bnez	a1,8002431e <.LBB324_11+0xe>
    800242d6:	01914583          	lbu	a1,25(sp)
    800242da:	157d                	addi	a0,a0,-1
    800242dc:	00a03533          	snez	a0,a0
    800242e0:	0015b593          	seqz	a1,a1
    800242e4:	8d4d                	or	a0,a0,a1
    800242e6:	e10d                	bnez	a0,80024308 <.LBB324_10+0x10>
    800242e8:	6522                	ld	a0,8(sp)
    800242ea:	03054583          	lbu	a1,48(a0)
    800242ee:	8991                	andi	a1,a1,4
    800242f0:	ed81                	bnez	a1,80024308 <.LBB324_10+0x10>
    800242f2:	750c                	ld	a1,40(a0)
    800242f4:	7108                	ld	a0,32(a0)
    800242f6:	6d94                	ld	a3,24(a1)

00000000800242f8 <.LBB324_10>:
    800242f8:	00008597          	auipc	a1,0x8
    800242fc:	77058593          	addi	a1,a1,1904 # 8002ca68 <.Lanon.f077182aff5f58a5660f14b1290425e3.209>
    80024300:	4605                	li	a2,1
    80024302:	4405                	li	s0,1
    80024304:	9682                	jalr	a3
    80024306:	ed01                	bnez	a0,8002431e <.LBB324_11+0xe>
    80024308:	6522                	ld	a0,8(sp)
    8002430a:	750c                	ld	a1,40(a0)
    8002430c:	7108                	ld	a0,32(a0)
    8002430e:	6d94                	ld	a3,24(a1)

0000000080024310 <.LBB324_11>:
    80024310:	00008597          	auipc	a1,0x8
    80024314:	75958593          	addi	a1,a1,1881 # 8002ca69 <.Lanon.f077182aff5f58a5660f14b1290425e3.210>
    80024318:	4605                	li	a2,1
    8002431a:	9682                	jalr	a3
    8002431c:	842a                	mv	s0,a0
    8002431e:	85a2                	mv	a1,s0
    80024320:	00b03533          	snez	a0,a1
    80024324:	74a2                	ld	s1,40(sp)
    80024326:	7442                	ld	s0,48(sp)
    80024328:	70e2                	ld	ra,56(sp)
    8002432a:	6121                	addi	sp,sp,64
    8002432c:	8082                	ret

Disassembly of section .text._ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hf71897f85e3edf35E:

000000008002432e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hf71897f85e3edf35E>:
    8002432e:	7175                	addi	sp,sp,-144
    80024330:	e506                	sd	ra,136(sp)
    80024332:	882e                	mv	a6,a1
    80024334:	4581                	li	a1,0
    80024336:	00056603          	lwu	a2,0(a0)
    8002433a:	00810893          	addi	a7,sp,8
    8002433e:	100006b7          	lui	a3,0x10000
    80024342:	36fd                	addiw	a3,a3,-1
    80024344:	4729                	li	a4,10
    80024346:	a819                	j	8002435c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hf71897f85e3edf35E+0x2e>
    80024348:	03778793          	addi	a5,a5,55
    8002434c:	00b88533          	add	a0,a7,a1
    80024350:	8211                	srli	a2,a2,0x4
    80024352:	8e75                	and	a2,a2,a3
    80024354:	06f50fa3          	sb	a5,127(a0)
    80024358:	15fd                	addi	a1,a1,-1
    8002435a:	ca01                	beqz	a2,8002436a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hf71897f85e3edf35E+0x3c>
    8002435c:	00f67793          	andi	a5,a2,15
    80024360:	fee7f4e3          	bgeu	a5,a4,80024348 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hf71897f85e3edf35E+0x1a>
    80024364:	0307e793          	ori	a5,a5,48
    80024368:	b7d5                	j	8002434c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hf71897f85e3edf35E+0x1e>
    8002436a:	08058513          	addi	a0,a1,128
    8002436e:	08100613          	li	a2,129
    80024372:	02c57663          	bgeu	a0,a2,8002439e <.LBB466_9>
    80024376:	40b007b3          	neg	a5,a1
    8002437a:	0028                	addi	a0,sp,8
    8002437c:	952e                	add	a0,a0,a1
    8002437e:	08050713          	addi	a4,a0,128

0000000080024382 <.LBB466_8>:
    80024382:	00008617          	auipc	a2,0x8
    80024386:	74660613          	addi	a2,a2,1862 # 8002cac8 <.Lanon.f077182aff5f58a5660f14b1290425e3.226>
    8002438a:	4585                	li	a1,1
    8002438c:	4689                	li	a3,2
    8002438e:	8542                	mv	a0,a6
    80024390:	fffff097          	auipc	ra,0xfffff
    80024394:	8ca080e7          	jalr	-1846(ra) # 80022c5a <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E>
    80024398:	60aa                	ld	ra,136(sp)
    8002439a:	6149                	addi	sp,sp,144
    8002439c:	8082                	ret

000000008002439e <.LBB466_9>:
    8002439e:	00008617          	auipc	a2,0x8
    800243a2:	71260613          	addi	a2,a2,1810 # 8002cab0 <.Lanon.f077182aff5f58a5660f14b1290425e3.225>
    800243a6:	08000593          	li	a1,128
    800243aa:	fffff097          	auipc	ra,0xfffff
    800243ae:	65a080e7          	jalr	1626(ra) # 80023a04 <_ZN4core5slice5index26slice_start_index_len_fail17h9b5b4d8717655b24E>
	...

Disassembly of section .text._ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h760b07191d46b3f2E:

00000000800243b4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h760b07191d46b3f2E>:
    800243b4:	7175                	addi	sp,sp,-144
    800243b6:	e506                	sd	ra,136(sp)
    800243b8:	6108                	ld	a0,0(a0)
    800243ba:	882e                	mv	a6,a1
    800243bc:	4581                	li	a1,0
    800243be:	0030                	addi	a2,sp,8
    800243c0:	46a9                	li	a3,10
    800243c2:	a811                	j	800243d6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h760b07191d46b3f2E+0x22>
    800243c4:	05770713          	addi	a4,a4,87
    800243c8:	00b607b3          	add	a5,a2,a1
    800243cc:	8111                	srli	a0,a0,0x4
    800243ce:	06e78fa3          	sb	a4,127(a5)
    800243d2:	15fd                	addi	a1,a1,-1
    800243d4:	c901                	beqz	a0,800243e4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h760b07191d46b3f2E+0x30>
    800243d6:	00f57713          	andi	a4,a0,15
    800243da:	fed775e3          	bgeu	a4,a3,800243c4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h760b07191d46b3f2E+0x10>
    800243de:	03076713          	ori	a4,a4,48
    800243e2:	b7dd                	j	800243c8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h760b07191d46b3f2E+0x14>
    800243e4:	08058513          	addi	a0,a1,128
    800243e8:	08100613          	li	a2,129
    800243ec:	02c57663          	bgeu	a0,a2,80024418 <.LBB469_9>
    800243f0:	40b007b3          	neg	a5,a1
    800243f4:	0028                	addi	a0,sp,8
    800243f6:	952e                	add	a0,a0,a1
    800243f8:	08050713          	addi	a4,a0,128

00000000800243fc <.LBB469_8>:
    800243fc:	00008617          	auipc	a2,0x8
    80024400:	6cc60613          	addi	a2,a2,1740 # 8002cac8 <.Lanon.f077182aff5f58a5660f14b1290425e3.226>
    80024404:	4585                	li	a1,1
    80024406:	4689                	li	a3,2
    80024408:	8542                	mv	a0,a6
    8002440a:	fffff097          	auipc	ra,0xfffff
    8002440e:	850080e7          	jalr	-1968(ra) # 80022c5a <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E>
    80024412:	60aa                	ld	ra,136(sp)
    80024414:	6149                	addi	sp,sp,144
    80024416:	8082                	ret

0000000080024418 <.LBB469_9>:
    80024418:	00008617          	auipc	a2,0x8
    8002441c:	69860613          	addi	a2,a2,1688 # 8002cab0 <.Lanon.f077182aff5f58a5660f14b1290425e3.225>
    80024420:	08000593          	li	a1,128
    80024424:	fffff097          	auipc	ra,0xfffff
    80024428:	5e0080e7          	jalr	1504(ra) # 80023a04 <_ZN4core5slice5index26slice_start_index_len_fail17h9b5b4d8717655b24E>
	...

Disassembly of section .text._ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17h66734376af0f4671E:

000000008002442e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17h66734376af0f4671E>:
    8002442e:	7175                	addi	sp,sp,-144
    80024430:	e506                	sd	ra,136(sp)
    80024432:	6108                	ld	a0,0(a0)
    80024434:	882e                	mv	a6,a1
    80024436:	4581                	li	a1,0
    80024438:	0030                	addi	a2,sp,8
    8002443a:	46a9                	li	a3,10
    8002443c:	a811                	j	80024450 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17h66734376af0f4671E+0x22>
    8002443e:	03770713          	addi	a4,a4,55
    80024442:	00b607b3          	add	a5,a2,a1
    80024446:	8111                	srli	a0,a0,0x4
    80024448:	06e78fa3          	sb	a4,127(a5)
    8002444c:	15fd                	addi	a1,a1,-1
    8002444e:	c901                	beqz	a0,8002445e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17h66734376af0f4671E+0x30>
    80024450:	00f57713          	andi	a4,a0,15
    80024454:	fed775e3          	bgeu	a4,a3,8002443e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17h66734376af0f4671E+0x10>
    80024458:	03076713          	ori	a4,a4,48
    8002445c:	b7dd                	j	80024442 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17h66734376af0f4671E+0x14>
    8002445e:	08058513          	addi	a0,a1,128
    80024462:	08100613          	li	a2,129
    80024466:	02c57663          	bgeu	a0,a2,80024492 <.LBB470_9>
    8002446a:	40b007b3          	neg	a5,a1
    8002446e:	0028                	addi	a0,sp,8
    80024470:	952e                	add	a0,a0,a1
    80024472:	08050713          	addi	a4,a0,128

0000000080024476 <.LBB470_8>:
    80024476:	00008617          	auipc	a2,0x8
    8002447a:	65260613          	addi	a2,a2,1618 # 8002cac8 <.Lanon.f077182aff5f58a5660f14b1290425e3.226>
    8002447e:	4585                	li	a1,1
    80024480:	4689                	li	a3,2
    80024482:	8542                	mv	a0,a6
    80024484:	ffffe097          	auipc	ra,0xffffe
    80024488:	7d6080e7          	jalr	2006(ra) # 80022c5a <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E>
    8002448c:	60aa                	ld	ra,136(sp)
    8002448e:	6149                	addi	sp,sp,144
    80024490:	8082                	ret

0000000080024492 <.LBB470_9>:
    80024492:	00008617          	auipc	a2,0x8
    80024496:	61e60613          	addi	a2,a2,1566 # 8002cab0 <.Lanon.f077182aff5f58a5660f14b1290425e3.225>
    8002449a:	08000593          	li	a1,128
    8002449e:	fffff097          	auipc	ra,0xfffff
    800244a2:	566080e7          	jalr	1382(ra) # 80023a04 <_ZN4core5slice5index26slice_start_index_len_fail17h9b5b4d8717655b24E>
	...

Disassembly of section .text._ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h46dfaf96577b17ecE:

00000000800244a8 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h46dfaf96577b17ecE>:
    800244a8:	7175                	addi	sp,sp,-144
    800244aa:	e506                	sd	ra,136(sp)
    800244ac:	882e                	mv	a6,a1
    800244ae:	0305e583          	lwu	a1,48(a1)
    800244b2:	0105f613          	andi	a2,a1,16
    800244b6:	ea19                	bnez	a2,800244cc <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h46dfaf96577b17ecE+0x24>
    800244b8:	0205f593          	andi	a1,a1,32
    800244bc:	ed8d                	bnez	a1,800244f6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h46dfaf96577b17ecE+0x4e>
    800244be:	85c2                	mv	a1,a6
    800244c0:	60aa                	ld	ra,136(sp)
    800244c2:	6149                	addi	sp,sp,144
    800244c4:	00000317          	auipc	t1,0x0
    800244c8:	43e30067          	jr	1086(t1) # 80024902 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h9c6c4af1578f7c29E>
    800244cc:	6108                	ld	a0,0(a0)
    800244ce:	4581                	li	a1,0
    800244d0:	0030                	addi	a2,sp,8
    800244d2:	46a9                	li	a3,10
    800244d4:	a811                	j	800244e8 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h46dfaf96577b17ecE+0x40>
    800244d6:	05770713          	addi	a4,a4,87
    800244da:	00b607b3          	add	a5,a2,a1
    800244de:	8111                	srli	a0,a0,0x4
    800244e0:	06e78fa3          	sb	a4,127(a5)
    800244e4:	15fd                	addi	a1,a1,-1
    800244e6:	cd0d                	beqz	a0,80024520 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h46dfaf96577b17ecE+0x78>
    800244e8:	00f57713          	andi	a4,a0,15
    800244ec:	fed775e3          	bgeu	a4,a3,800244d6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h46dfaf96577b17ecE+0x2e>
    800244f0:	03076713          	ori	a4,a4,48
    800244f4:	b7dd                	j	800244da <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h46dfaf96577b17ecE+0x32>
    800244f6:	6108                	ld	a0,0(a0)
    800244f8:	4581                	li	a1,0
    800244fa:	0030                	addi	a2,sp,8
    800244fc:	46a9                	li	a3,10
    800244fe:	a811                	j	80024512 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h46dfaf96577b17ecE+0x6a>
    80024500:	03770713          	addi	a4,a4,55
    80024504:	00b607b3          	add	a5,a2,a1
    80024508:	8111                	srli	a0,a0,0x4
    8002450a:	06e78fa3          	sb	a4,127(a5)
    8002450e:	15fd                	addi	a1,a1,-1
    80024510:	c901                	beqz	a0,80024520 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h46dfaf96577b17ecE+0x78>
    80024512:	00f57713          	andi	a4,a0,15
    80024516:	fed775e3          	bgeu	a4,a3,80024500 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h46dfaf96577b17ecE+0x58>
    8002451a:	03076713          	ori	a4,a4,48
    8002451e:	b7dd                	j	80024504 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h46dfaf96577b17ecE+0x5c>
    80024520:	08058513          	addi	a0,a1,128
    80024524:	08100613          	li	a2,129
    80024528:	02c57663          	bgeu	a0,a2,80024554 <.LBB475_17>
    8002452c:	40b007b3          	neg	a5,a1
    80024530:	0028                	addi	a0,sp,8
    80024532:	952e                	add	a0,a0,a1
    80024534:	08050713          	addi	a4,a0,128

0000000080024538 <.LBB475_16>:
    80024538:	00008617          	auipc	a2,0x8
    8002453c:	59060613          	addi	a2,a2,1424 # 8002cac8 <.Lanon.f077182aff5f58a5660f14b1290425e3.226>
    80024540:	4585                	li	a1,1
    80024542:	4689                	li	a3,2
    80024544:	8542                	mv	a0,a6
    80024546:	ffffe097          	auipc	ra,0xffffe
    8002454a:	714080e7          	jalr	1812(ra) # 80022c5a <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E>
    8002454e:	60aa                	ld	ra,136(sp)
    80024550:	6149                	addi	sp,sp,144
    80024552:	8082                	ret

0000000080024554 <.LBB475_17>:
    80024554:	00008617          	auipc	a2,0x8
    80024558:	55c60613          	addi	a2,a2,1372 # 8002cab0 <.Lanon.f077182aff5f58a5660f14b1290425e3.225>
    8002455c:	08000593          	li	a1,128
    80024560:	fffff097          	auipc	ra,0xfffff
    80024564:	4a4080e7          	jalr	1188(ra) # 80023a04 <_ZN4core5slice5index26slice_start_index_len_fail17h9b5b4d8717655b24E>
	...

Disassembly of section .text._ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17h1b385cecfac82c6bE:

000000008002456a <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17h1b385cecfac82c6bE>:
    8002456a:	711d                	addi	sp,sp,-96
    8002456c:	ec86                	sd	ra,88(sp)
    8002456e:	e8a2                	sd	s0,80(sp)
    80024570:	e4a6                	sd	s1,72(sp)
    80024572:	e0ca                	sd	s2,64(sp)
    80024574:	fc4e                	sd	s3,56(sp)
    80024576:	f852                	sd	s4,48(sp)
    80024578:	00056f83          	lwu	t6,0(a0)
    8002457c:	000f889b          	sext.w	a7,t6
    80024580:	587d                	li	a6,-1
    80024582:	852e                	mv	a0,a1
    80024584:	01184763          	blt	a6,a7,80024592 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17h1b385cecfac82c6bE+0x28>
    80024588:	ffffc593          	not	a1,t6
    8002458c:	2581                	sext.w	a1,a1
    8002458e:	00158f93          	addi	t6,a1,1
    80024592:	004fd593          	srli	a1,t6,0x4
    80024596:	02700693          	li	a3,39
    8002459a:	27100613          	li	a2,625

000000008002459e <.LBB480_12>:
    8002459e:	00008297          	auipc	t0,0x8
    800245a2:	52c28293          	addi	t0,t0,1324 # 8002caca <.Lanon.f077182aff5f58a5660f14b1290425e3.229>
    800245a6:	02c5f563          	bgeu	a1,a2,800245d0 <.LBB480_12+0x32>
    800245aa:	06300593          	li	a1,99
    800245ae:	0ff5c063          	blt	a1,t6,8002468e <.LBB480_12+0xf0>
    800245b2:	4625                	li	a2,9
    800245b4:	011825b3          	slt	a1,a6,a7
    800245b8:	13f64d63          	blt	a2,t6,800246f2 <.LBB480_12+0x154>
    800245bc:	fff68613          	addi	a2,a3,-1 # fffffff <.Lline_table_start0+0xffc94fd>
    800245c0:	00910693          	addi	a3,sp,9
    800245c4:	96b2                	add	a3,a3,a2
    800245c6:	030f8713          	addi	a4,t6,48
    800245ca:	00e68023          	sb	a4,0(a3)
    800245ce:	a299                	j	80024714 <.LBB480_12+0x176>
    800245d0:	4581                	li	a1,0
    800245d2:	001a3637          	lui	a2,0x1a3
    800245d6:	6e36061b          	addiw	a2,a2,1763
    800245da:	063a                	slli	a2,a2,0xe
    800245dc:	ac760613          	addi	a2,a2,-1337 # 1a2ac7 <.Lline_table_start0+0x16bfc5>
    800245e0:	063a                	slli	a2,a2,0xe
    800245e2:	43360613          	addi	a2,a2,1075
    800245e6:	0636                	slli	a2,a2,0xd
    800245e8:	94b60313          	addi	t1,a2,-1717
    800245ec:	6609                	lui	a2,0x2
    800245ee:	71060e1b          	addiw	t3,a2,1808
    800245f2:	6641                	lui	a2,0x10
    800245f4:	ffc60f1b          	addiw	t5,a2,-4
    800245f8:	0051f6b7          	lui	a3,0x51f
    800245fc:	b856869b          	addiw	a3,a3,-1147
    80024600:	06b6                	slli	a3,a3,0xd
    80024602:	3d768693          	addi	a3,a3,983 # 51f3d7 <.Lline_table_start0+0x4e88d5>
    80024606:	06ba                	slli	a3,a3,0xe
    80024608:	28f68693          	addi	a3,a3,655
    8002460c:	06b2                	slli	a3,a3,0xc
    8002460e:	5c368913          	addi	s2,a3,1475
    80024612:	06400393          	li	t2,100
    80024616:	ffe6099b          	addiw	s3,a2,-2
    8002461a:	00910e93          	addi	t4,sp,9
    8002461e:	05f5e7b7          	lui	a5,0x5f5e
    80024622:	0ff78a1b          	addiw	s4,a5,255
    80024626:	877e                	mv	a4,t6
    80024628:	026fb6b3          	mulhu	a3,t6,t1
    8002462c:	00b6df93          	srli	t6,a3,0xb
    80024630:	03cf86b3          	mul	a3,t6,t3
    80024634:	40d706b3          	sub	a3,a4,a3
    80024638:	01e6f4b3          	and	s1,a3,t5
    8002463c:	8089                	srli	s1,s1,0x2
    8002463e:	0324b4b3          	mulhu	s1,s1,s2
    80024642:	8089                	srli	s1,s1,0x2
    80024644:	00149413          	slli	s0,s1,0x1
    80024648:	027484b3          	mul	s1,s1,t2
    8002464c:	8e85                	sub	a3,a3,s1
    8002464e:	0686                	slli	a3,a3,0x1
    80024650:	0136f6b3          	and	a3,a3,s3
    80024654:	9416                	add	s0,s0,t0
    80024656:	00be84b3          	add	s1,t4,a1
    8002465a:	00044603          	lbu	a2,0(s0)
    8002465e:	00140403          	lb	s0,1(s0)
    80024662:	9696                	add	a3,a3,t0
    80024664:	00168783          	lb	a5,1(a3)
    80024668:	0006c683          	lbu	a3,0(a3)
    8002466c:	02848223          	sb	s0,36(s1)
    80024670:	02c481a3          	sb	a2,35(s1)
    80024674:	02f48323          	sb	a5,38(s1)
    80024678:	02d482a3          	sb	a3,37(s1)
    8002467c:	15f1                	addi	a1,a1,-4
    8002467e:	faea64e3          	bltu	s4,a4,80024626 <.LBB480_12+0x88>
    80024682:	02758693          	addi	a3,a1,39
    80024686:	06300593          	li	a1,99
    8002468a:	f3f5d4e3          	bge	a1,t6,800245b2 <.LBB480_12+0x14>
    8002468e:	65c1                	lui	a1,0x10
    80024690:	ffc5861b          	addiw	a2,a1,-4
    80024694:	00cff633          	and	a2,t6,a2
    80024698:	8209                	srli	a2,a2,0x2
    8002469a:	0051f737          	lui	a4,0x51f
    8002469e:	b857071b          	addiw	a4,a4,-1147
    800246a2:	0736                	slli	a4,a4,0xd
    800246a4:	3d770713          	addi	a4,a4,983 # 51f3d7 <.Lline_table_start0+0x4e88d5>
    800246a8:	073a                	slli	a4,a4,0xe
    800246aa:	28f70713          	addi	a4,a4,655
    800246ae:	0732                	slli	a4,a4,0xc
    800246b0:	5c370713          	addi	a4,a4,1475
    800246b4:	02e63633          	mulhu	a2,a2,a4
    800246b8:	8209                	srli	a2,a2,0x2
    800246ba:	06400713          	li	a4,100
    800246be:	02e60733          	mul	a4,a2,a4
    800246c2:	40ef8733          	sub	a4,t6,a4
    800246c6:	0706                	slli	a4,a4,0x1
    800246c8:	35f9                	addiw	a1,a1,-2
    800246ca:	8df9                	and	a1,a1,a4
    800246cc:	16f9                	addi	a3,a3,-2
    800246ce:	9596                	add	a1,a1,t0
    800246d0:	00158703          	lb	a4,1(a1) # 10001 <.Lline_table_start0+0x6ff>
    800246d4:	0005c583          	lbu	a1,0(a1)
    800246d8:	00910793          	addi	a5,sp,9
    800246dc:	97b6                	add	a5,a5,a3
    800246de:	00e780a3          	sb	a4,1(a5) # 5f5e001 <.Lline_table_start0+0x5f274ff>
    800246e2:	00b78023          	sb	a1,0(a5)
    800246e6:	8fb2                	mv	t6,a2
    800246e8:	4625                	li	a2,9
    800246ea:	011825b3          	slt	a1,a6,a7
    800246ee:	edf657e3          	bge	a2,t6,800245bc <.LBB480_12+0x1e>
    800246f2:	001f9713          	slli	a4,t6,0x1
    800246f6:	ffe68613          	addi	a2,a3,-2
    800246fa:	005706b3          	add	a3,a4,t0
    800246fe:	00168703          	lb	a4,1(a3)
    80024702:	0006c683          	lbu	a3,0(a3)
    80024706:	00910793          	addi	a5,sp,9
    8002470a:	97b2                	add	a5,a5,a2
    8002470c:	00e780a3          	sb	a4,1(a5)
    80024710:	00d78023          	sb	a3,0(a5)
    80024714:	00910693          	addi	a3,sp,9
    80024718:	00c68733          	add	a4,a3,a2
    8002471c:	02700693          	li	a3,39
    80024720:	40c687b3          	sub	a5,a3,a2

0000000080024724 <.LBB480_13>:
    80024724:	00008617          	auipc	a2,0x8
    80024728:	0c460613          	addi	a2,a2,196 # 8002c7e8 <.Lanon.f077182aff5f58a5660f14b1290425e3.133>
    8002472c:	4681                	li	a3,0
    8002472e:	ffffe097          	auipc	ra,0xffffe
    80024732:	52c080e7          	jalr	1324(ra) # 80022c5a <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E>
    80024736:	7a42                	ld	s4,48(sp)
    80024738:	79e2                	ld	s3,56(sp)
    8002473a:	6906                	ld	s2,64(sp)
    8002473c:	64a6                	ld	s1,72(sp)
    8002473e:	6446                	ld	s0,80(sp)
    80024740:	60e6                	ld	ra,88(sp)
    80024742:	6125                	addi	sp,sp,96
    80024744:	8082                	ret

Disassembly of section .text._ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17h19c6429b08a072b1E:

0000000080024746 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17h19c6429b08a072b1E>:
    80024746:	715d                	addi	sp,sp,-80
    80024748:	e486                	sd	ra,72(sp)
    8002474a:	e0a2                	sd	s0,64(sp)
    8002474c:	fc26                	sd	s1,56(sp)
    8002474e:	f84a                	sd	s2,48(sp)
    80024750:	00056903          	lwu	s2,0(a0)
    80024754:	852e                	mv	a0,a1
    80024756:	00495593          	srli	a1,s2,0x4
    8002475a:	02700693          	li	a3,39
    8002475e:	27100713          	li	a4,625

0000000080024762 <.LBB481_10>:
    80024762:	00008817          	auipc	a6,0x8
    80024766:	36880813          	addi	a6,a6,872 # 8002caca <.Lanon.f077182aff5f58a5660f14b1290425e3.229>
    8002476a:	02e5f363          	bgeu	a1,a4,80024790 <.LBB481_10+0x2e>
    8002476e:	06300593          	li	a1,99
    80024772:	0f25e063          	bltu	a1,s2,80024852 <.LBB481_10+0xf0>
    80024776:	45a5                	li	a1,9
    80024778:	1325cd63          	blt	a1,s2,800248b2 <.LBB481_10+0x150>
    8002477c:	fff68593          	addi	a1,a3,-1
    80024780:	00910613          	addi	a2,sp,9
    80024784:	962e                	add	a2,a2,a1
    80024786:	03090693          	addi	a3,s2,48
    8002478a:	00d60023          	sb	a3,0(a2)
    8002478e:	a291                	j	800248d2 <.LBB481_10+0x170>
    80024790:	4681                	li	a3,0
    80024792:	001a35b7          	lui	a1,0x1a3
    80024796:	6e35859b          	addiw	a1,a1,1763
    8002479a:	05ba                	slli	a1,a1,0xe
    8002479c:	ac758593          	addi	a1,a1,-1337 # 1a2ac7 <.Lline_table_start0+0x16bfc5>
    800247a0:	05ba                	slli	a1,a1,0xe
    800247a2:	43358593          	addi	a1,a1,1075
    800247a6:	05b6                	slli	a1,a1,0xd
    800247a8:	94b58893          	addi	a7,a1,-1717
    800247ac:	6589                	lui	a1,0x2
    800247ae:	7105831b          	addiw	t1,a1,1808
    800247b2:	65c1                	lui	a1,0x10
    800247b4:	ffc58e1b          	addiw	t3,a1,-4
    800247b8:	0051f737          	lui	a4,0x51f
    800247bc:	b857071b          	addiw	a4,a4,-1147
    800247c0:	0736                	slli	a4,a4,0xd
    800247c2:	3d770713          	addi	a4,a4,983 # 51f3d7 <.Lline_table_start0+0x4e88d5>
    800247c6:	073a                	slli	a4,a4,0xe
    800247c8:	28f70713          	addi	a4,a4,655
    800247cc:	0732                	slli	a4,a4,0xc
    800247ce:	5c370e93          	addi	t4,a4,1475
    800247d2:	06400293          	li	t0,100
    800247d6:	ffe58f1b          	addiw	t5,a1,-2
    800247da:	00910393          	addi	t2,sp,9
    800247de:	05f5e5b7          	lui	a1,0x5f5e
    800247e2:	0ff58f9b          	addiw	t6,a1,255
    800247e6:	864a                	mv	a2,s2
    800247e8:	031937b3          	mulhu	a5,s2,a7
    800247ec:	00b7d913          	srli	s2,a5,0xb
    800247f0:	02690733          	mul	a4,s2,t1
    800247f4:	40e60733          	sub	a4,a2,a4
    800247f8:	01c775b3          	and	a1,a4,t3
    800247fc:	8189                	srli	a1,a1,0x2
    800247fe:	03d5b5b3          	mulhu	a1,a1,t4
    80024802:	8189                	srli	a1,a1,0x2
    80024804:	00159413          	slli	s0,a1,0x1
    80024808:	025585b3          	mul	a1,a1,t0
    8002480c:	40b705b3          	sub	a1,a4,a1
    80024810:	0586                	slli	a1,a1,0x1
    80024812:	01e5f5b3          	and	a1,a1,t5
    80024816:	01040733          	add	a4,s0,a6
    8002481a:	00d38433          	add	s0,t2,a3
    8002481e:	00074483          	lbu	s1,0(a4)
    80024822:	00170703          	lb	a4,1(a4)
    80024826:	95c2                	add	a1,a1,a6
    80024828:	00158783          	lb	a5,1(a1) # 5f5e001 <.Lline_table_start0+0x5f274ff>
    8002482c:	0005c583          	lbu	a1,0(a1)
    80024830:	02e40223          	sb	a4,36(s0)
    80024834:	029401a3          	sb	s1,35(s0)
    80024838:	02f40323          	sb	a5,38(s0)
    8002483c:	02b402a3          	sb	a1,37(s0)
    80024840:	16f1                	addi	a3,a3,-4
    80024842:	facfe2e3          	bltu	t6,a2,800247e6 <.LBB481_10+0x84>
    80024846:	02768693          	addi	a3,a3,39
    8002484a:	06300593          	li	a1,99
    8002484e:	f325f4e3          	bgeu	a1,s2,80024776 <.LBB481_10+0x14>
    80024852:	65c1                	lui	a1,0x10
    80024854:	ffc5861b          	addiw	a2,a1,-4
    80024858:	00c97633          	and	a2,s2,a2
    8002485c:	8209                	srli	a2,a2,0x2
    8002485e:	0051f737          	lui	a4,0x51f
    80024862:	b857071b          	addiw	a4,a4,-1147
    80024866:	0736                	slli	a4,a4,0xd
    80024868:	3d770713          	addi	a4,a4,983 # 51f3d7 <.Lline_table_start0+0x4e88d5>
    8002486c:	073a                	slli	a4,a4,0xe
    8002486e:	28f70713          	addi	a4,a4,655
    80024872:	0732                	slli	a4,a4,0xc
    80024874:	5c370713          	addi	a4,a4,1475
    80024878:	02e63633          	mulhu	a2,a2,a4
    8002487c:	8209                	srli	a2,a2,0x2
    8002487e:	06400713          	li	a4,100
    80024882:	02e60733          	mul	a4,a2,a4
    80024886:	40e90733          	sub	a4,s2,a4
    8002488a:	0706                	slli	a4,a4,0x1
    8002488c:	35f9                	addiw	a1,a1,-2
    8002488e:	8df9                	and	a1,a1,a4
    80024890:	16f9                	addi	a3,a3,-2
    80024892:	95c2                	add	a1,a1,a6
    80024894:	00158703          	lb	a4,1(a1) # 10001 <.Lline_table_start0+0x6ff>
    80024898:	0005c583          	lbu	a1,0(a1)
    8002489c:	00910793          	addi	a5,sp,9
    800248a0:	97b6                	add	a5,a5,a3
    800248a2:	00e780a3          	sb	a4,1(a5)
    800248a6:	00b78023          	sb	a1,0(a5)
    800248aa:	8932                	mv	s2,a2
    800248ac:	45a5                	li	a1,9
    800248ae:	ed25d7e3          	bge	a1,s2,8002477c <.LBB481_10+0x1a>
    800248b2:	00191613          	slli	a2,s2,0x1
    800248b6:	ffe68593          	addi	a1,a3,-2
    800248ba:	9642                	add	a2,a2,a6
    800248bc:	00160683          	lb	a3,1(a2)
    800248c0:	00064603          	lbu	a2,0(a2)
    800248c4:	00910713          	addi	a4,sp,9
    800248c8:	972e                	add	a4,a4,a1
    800248ca:	00d700a3          	sb	a3,1(a4)
    800248ce:	00c70023          	sb	a2,0(a4)
    800248d2:	00910613          	addi	a2,sp,9
    800248d6:	00b60733          	add	a4,a2,a1
    800248da:	02700613          	li	a2,39
    800248de:	40b607b3          	sub	a5,a2,a1

00000000800248e2 <.LBB481_11>:
    800248e2:	00008617          	auipc	a2,0x8
    800248e6:	f0660613          	addi	a2,a2,-250 # 8002c7e8 <.Lanon.f077182aff5f58a5660f14b1290425e3.133>
    800248ea:	4585                	li	a1,1
    800248ec:	4681                	li	a3,0
    800248ee:	ffffe097          	auipc	ra,0xffffe
    800248f2:	36c080e7          	jalr	876(ra) # 80022c5a <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E>
    800248f6:	7942                	ld	s2,48(sp)
    800248f8:	74e2                	ld	s1,56(sp)
    800248fa:	6406                	ld	s0,64(sp)
    800248fc:	60a6                	ld	ra,72(sp)
    800248fe:	6161                	addi	sp,sp,80
    80024900:	8082                	ret

Disassembly of section .text._ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h9c6c4af1578f7c29E:

0000000080024902 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h9c6c4af1578f7c29E>:
    80024902:	715d                	addi	sp,sp,-80
    80024904:	e486                	sd	ra,72(sp)
    80024906:	e0a2                	sd	s0,64(sp)
    80024908:	fc26                	sd	s1,56(sp)
    8002490a:	f84a                	sd	s2,48(sp)
    8002490c:	00053903          	ld	s2,0(a0)
    80024910:	852e                	mv	a0,a1
    80024912:	00495593          	srli	a1,s2,0x4
    80024916:	02700693          	li	a3,39
    8002491a:	27100713          	li	a4,625

000000008002491e <.LBB483_10>:
    8002491e:	00008817          	auipc	a6,0x8
    80024922:	1ac80813          	addi	a6,a6,428 # 8002caca <.Lanon.f077182aff5f58a5660f14b1290425e3.229>
    80024926:	02e5f363          	bgeu	a1,a4,8002494c <.LBB483_10+0x2e>
    8002492a:	06300593          	li	a1,99
    8002492e:	0f25c063          	blt	a1,s2,80024a0e <.LBB483_10+0xf0>
    80024932:	45a5                	li	a1,9
    80024934:	1325cd63          	blt	a1,s2,80024a6e <.LBB483_10+0x150>
    80024938:	fff68593          	addi	a1,a3,-1
    8002493c:	00910613          	addi	a2,sp,9
    80024940:	962e                	add	a2,a2,a1
    80024942:	03090693          	addi	a3,s2,48
    80024946:	00d60023          	sb	a3,0(a2)
    8002494a:	a291                	j	80024a8e <.LBB483_10+0x170>
    8002494c:	4681                	li	a3,0
    8002494e:	001a35b7          	lui	a1,0x1a3
    80024952:	6e35859b          	addiw	a1,a1,1763
    80024956:	05ba                	slli	a1,a1,0xe
    80024958:	ac758593          	addi	a1,a1,-1337 # 1a2ac7 <.Lline_table_start0+0x16bfc5>
    8002495c:	05ba                	slli	a1,a1,0xe
    8002495e:	43358593          	addi	a1,a1,1075
    80024962:	05b6                	slli	a1,a1,0xd
    80024964:	94b58893          	addi	a7,a1,-1717
    80024968:	6589                	lui	a1,0x2
    8002496a:	7105831b          	addiw	t1,a1,1808
    8002496e:	65c1                	lui	a1,0x10
    80024970:	ffc58e1b          	addiw	t3,a1,-4
    80024974:	0051f737          	lui	a4,0x51f
    80024978:	b857071b          	addiw	a4,a4,-1147
    8002497c:	0736                	slli	a4,a4,0xd
    8002497e:	3d770713          	addi	a4,a4,983 # 51f3d7 <.Lline_table_start0+0x4e88d5>
    80024982:	073a                	slli	a4,a4,0xe
    80024984:	28f70713          	addi	a4,a4,655
    80024988:	0732                	slli	a4,a4,0xc
    8002498a:	5c370e93          	addi	t4,a4,1475
    8002498e:	06400293          	li	t0,100
    80024992:	ffe58f1b          	addiw	t5,a1,-2
    80024996:	00910393          	addi	t2,sp,9
    8002499a:	05f5e5b7          	lui	a1,0x5f5e
    8002499e:	0ff58f9b          	addiw	t6,a1,255
    800249a2:	864a                	mv	a2,s2
    800249a4:	031937b3          	mulhu	a5,s2,a7
    800249a8:	00b7d913          	srli	s2,a5,0xb
    800249ac:	02690733          	mul	a4,s2,t1
    800249b0:	40e60733          	sub	a4,a2,a4
    800249b4:	01c775b3          	and	a1,a4,t3
    800249b8:	8189                	srli	a1,a1,0x2
    800249ba:	03d5b5b3          	mulhu	a1,a1,t4
    800249be:	8189                	srli	a1,a1,0x2
    800249c0:	00159413          	slli	s0,a1,0x1
    800249c4:	025585b3          	mul	a1,a1,t0
    800249c8:	40b705b3          	sub	a1,a4,a1
    800249cc:	0586                	slli	a1,a1,0x1
    800249ce:	01e5f5b3          	and	a1,a1,t5
    800249d2:	01040733          	add	a4,s0,a6
    800249d6:	00d38433          	add	s0,t2,a3
    800249da:	00074483          	lbu	s1,0(a4)
    800249de:	00170703          	lb	a4,1(a4)
    800249e2:	95c2                	add	a1,a1,a6
    800249e4:	00158783          	lb	a5,1(a1) # 5f5e001 <.Lline_table_start0+0x5f274ff>
    800249e8:	0005c583          	lbu	a1,0(a1)
    800249ec:	02e40223          	sb	a4,36(s0)
    800249f0:	029401a3          	sb	s1,35(s0)
    800249f4:	02f40323          	sb	a5,38(s0)
    800249f8:	02b402a3          	sb	a1,37(s0)
    800249fc:	16f1                	addi	a3,a3,-4
    800249fe:	facfe2e3          	bltu	t6,a2,800249a2 <.LBB483_10+0x84>
    80024a02:	02768693          	addi	a3,a3,39
    80024a06:	06300593          	li	a1,99
    80024a0a:	f325d4e3          	bge	a1,s2,80024932 <.LBB483_10+0x14>
    80024a0e:	65c1                	lui	a1,0x10
    80024a10:	ffc5861b          	addiw	a2,a1,-4
    80024a14:	00c97633          	and	a2,s2,a2
    80024a18:	8209                	srli	a2,a2,0x2
    80024a1a:	0051f737          	lui	a4,0x51f
    80024a1e:	b857071b          	addiw	a4,a4,-1147
    80024a22:	0736                	slli	a4,a4,0xd
    80024a24:	3d770713          	addi	a4,a4,983 # 51f3d7 <.Lline_table_start0+0x4e88d5>
    80024a28:	073a                	slli	a4,a4,0xe
    80024a2a:	28f70713          	addi	a4,a4,655
    80024a2e:	0732                	slli	a4,a4,0xc
    80024a30:	5c370713          	addi	a4,a4,1475
    80024a34:	02e63633          	mulhu	a2,a2,a4
    80024a38:	8209                	srli	a2,a2,0x2
    80024a3a:	06400713          	li	a4,100
    80024a3e:	02e60733          	mul	a4,a2,a4
    80024a42:	40e90733          	sub	a4,s2,a4
    80024a46:	0706                	slli	a4,a4,0x1
    80024a48:	35f9                	addiw	a1,a1,-2
    80024a4a:	8df9                	and	a1,a1,a4
    80024a4c:	16f9                	addi	a3,a3,-2
    80024a4e:	95c2                	add	a1,a1,a6
    80024a50:	00158703          	lb	a4,1(a1) # 10001 <.Lline_table_start0+0x6ff>
    80024a54:	0005c583          	lbu	a1,0(a1)
    80024a58:	00910793          	addi	a5,sp,9
    80024a5c:	97b6                	add	a5,a5,a3
    80024a5e:	00e780a3          	sb	a4,1(a5)
    80024a62:	00b78023          	sb	a1,0(a5)
    80024a66:	8932                	mv	s2,a2
    80024a68:	45a5                	li	a1,9
    80024a6a:	ed25d7e3          	bge	a1,s2,80024938 <.LBB483_10+0x1a>
    80024a6e:	00191613          	slli	a2,s2,0x1
    80024a72:	ffe68593          	addi	a1,a3,-2
    80024a76:	9642                	add	a2,a2,a6
    80024a78:	00160683          	lb	a3,1(a2)
    80024a7c:	00064603          	lbu	a2,0(a2)
    80024a80:	00910713          	addi	a4,sp,9
    80024a84:	972e                	add	a4,a4,a1
    80024a86:	00d700a3          	sb	a3,1(a4)
    80024a8a:	00c70023          	sb	a2,0(a4)
    80024a8e:	00910613          	addi	a2,sp,9
    80024a92:	00b60733          	add	a4,a2,a1
    80024a96:	02700613          	li	a2,39
    80024a9a:	40b607b3          	sub	a5,a2,a1

0000000080024a9e <.LBB483_11>:
    80024a9e:	00008617          	auipc	a2,0x8
    80024aa2:	d4a60613          	addi	a2,a2,-694 # 8002c7e8 <.Lanon.f077182aff5f58a5660f14b1290425e3.133>
    80024aa6:	4585                	li	a1,1
    80024aa8:	4681                	li	a3,0
    80024aaa:	ffffe097          	auipc	ra,0xffffe
    80024aae:	1b0080e7          	jalr	432(ra) # 80022c5a <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E>
    80024ab2:	7942                	ld	s2,48(sp)
    80024ab4:	74e2                	ld	s1,56(sp)
    80024ab6:	6406                	ld	s0,64(sp)
    80024ab8:	60a6                	ld	ra,72(sp)
    80024aba:	6161                	addi	sp,sp,80
    80024abc:	8082                	ret

Disassembly of section .text._ZN53_$LT$core..fmt..Error$u20$as$u20$core..fmt..Debug$GT$3fmt17h2b8d1e77328b4836E:

0000000080024abe <_ZN53_$LT$core..fmt..Error$u20$as$u20$core..fmt..Debug$GT$3fmt17h2b8d1e77328b4836E>:
    80024abe:	7590                	ld	a2,40(a1)
    80024ac0:	7188                	ld	a0,32(a1)
    80024ac2:	6e1c                	ld	a5,24(a2)

0000000080024ac4 <.LBB507_1>:
    80024ac4:	00009597          	auipc	a1,0x9
    80024ac8:	abc58593          	addi	a1,a1,-1348 # 8002d580 <.Lanon.f077182aff5f58a5660f14b1290425e3.546>
    80024acc:	4615                	li	a2,5
    80024ace:	8782                	jr	a5

Disassembly of section .text._ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h017525c41f63708eE:

0000000080024ad0 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h017525c41f63708eE>:
    80024ad0:	7175                	addi	sp,sp,-144
    80024ad2:	e506                	sd	ra,136(sp)
    80024ad4:	882e                	mv	a6,a1
    80024ad6:	0305e583          	lwu	a1,48(a1)
    80024ada:	6108                	ld	a0,0(a0)
    80024adc:	0105f613          	andi	a2,a1,16
    80024ae0:	e625                	bnez	a2,80024b48 <.LBB508_21+0x22>
    80024ae2:	0205f593          	andi	a1,a1,32
    80024ae6:	e9c1                	bnez	a1,80024b76 <.LBB508_21+0x50>
    80024ae8:	00054503          	lbu	a0,0(a0)
    80024aec:	06400593          	li	a1,100
    80024af0:	0eb56463          	bltu	a0,a1,80024bd8 <.LBB508_22+0x1c>
    80024af4:	0fc57613          	andi	a2,a0,252
    80024af8:	8209                	srli	a2,a2,0x2
    80024afa:	0051f6b7          	lui	a3,0x51f
    80024afe:	b856869b          	addiw	a3,a3,-1147
    80024b02:	06b6                	slli	a3,a3,0xd
    80024b04:	3d768693          	addi	a3,a3,983 # 51f3d7 <.Lline_table_start0+0x4e88d5>
    80024b08:	06ba                	slli	a3,a3,0xe
    80024b0a:	28f68693          	addi	a3,a3,655
    80024b0e:	06b2                	slli	a3,a3,0xc
    80024b10:	5c368693          	addi	a3,a3,1475
    80024b14:	02d63633          	mulhu	a2,a2,a3
    80024b18:	8209                	srli	a2,a2,0x2
    80024b1a:	02b605b3          	mul	a1,a2,a1
    80024b1e:	8d0d                	sub	a0,a0,a1
    80024b20:	0506                	slli	a0,a0,0x1
    80024b22:	0fe57513          	andi	a0,a0,254

0000000080024b26 <.LBB508_21>:
    80024b26:	00008597          	auipc	a1,0x8
    80024b2a:	fa458593          	addi	a1,a1,-92 # 8002caca <.Lanon.f077182aff5f58a5660f14b1290425e3.229>
    80024b2e:	952e                	add	a0,a0,a1
    80024b30:	00150583          	lb	a1,1(a0)
    80024b34:	00054503          	lbu	a0,0(a0)
    80024b38:	02b10723          	sb	a1,46(sp)
    80024b3c:	02a106a3          	sb	a0,45(sp)
    80024b40:	02400593          	li	a1,36
    80024b44:	8532                	mv	a0,a2
    80024b46:	a871                	j	80024be2 <.LBB508_22+0x26>
    80024b48:	00054503          	lbu	a0,0(a0)
    80024b4c:	4581                	li	a1,0
    80024b4e:	0030                	addi	a2,sp,8
    80024b50:	46a9                	li	a3,10
    80024b52:	a819                	j	80024b68 <.LBB508_21+0x42>
    80024b54:	05770713          	addi	a4,a4,87
    80024b58:	00b607b3          	add	a5,a2,a1
    80024b5c:	8111                	srli	a0,a0,0x4
    80024b5e:	893d                	andi	a0,a0,15
    80024b60:	06e78fa3          	sb	a4,127(a5)
    80024b64:	15fd                	addi	a1,a1,-1
    80024b66:	cd1d                	beqz	a0,80024ba4 <.LBB508_21+0x7e>
    80024b68:	00f57713          	andi	a4,a0,15
    80024b6c:	fed774e3          	bgeu	a4,a3,80024b54 <.LBB508_21+0x2e>
    80024b70:	03076713          	ori	a4,a4,48
    80024b74:	b7d5                	j	80024b58 <.LBB508_21+0x32>
    80024b76:	00054503          	lbu	a0,0(a0)
    80024b7a:	4581                	li	a1,0
    80024b7c:	0030                	addi	a2,sp,8
    80024b7e:	46a9                	li	a3,10
    80024b80:	a819                	j	80024b96 <.LBB508_21+0x70>
    80024b82:	03770713          	addi	a4,a4,55
    80024b86:	00b607b3          	add	a5,a2,a1
    80024b8a:	8111                	srli	a0,a0,0x4
    80024b8c:	893d                	andi	a0,a0,15
    80024b8e:	06e78fa3          	sb	a4,127(a5)
    80024b92:	15fd                	addi	a1,a1,-1
    80024b94:	c901                	beqz	a0,80024ba4 <.LBB508_21+0x7e>
    80024b96:	00f57713          	andi	a4,a0,15
    80024b9a:	fed774e3          	bgeu	a4,a3,80024b82 <.LBB508_21+0x5c>
    80024b9e:	03076713          	ori	a4,a4,48
    80024ba2:	b7d5                	j	80024b86 <.LBB508_21+0x60>
    80024ba4:	08058513          	addi	a0,a1,128
    80024ba8:	08100613          	li	a2,129
    80024bac:	08c57763          	bgeu	a0,a2,80024c3a <.LBB508_25>
    80024bb0:	40b007b3          	neg	a5,a1
    80024bb4:	0028                	addi	a0,sp,8
    80024bb6:	952e                	add	a0,a0,a1
    80024bb8:	08050713          	addi	a4,a0,128

0000000080024bbc <.LBB508_22>:
    80024bbc:	00008617          	auipc	a2,0x8
    80024bc0:	f0c60613          	addi	a2,a2,-244 # 8002cac8 <.Lanon.f077182aff5f58a5660f14b1290425e3.226>
    80024bc4:	4585                	li	a1,1
    80024bc6:	4689                	li	a3,2
    80024bc8:	8542                	mv	a0,a6
    80024bca:	ffffe097          	auipc	ra,0xffffe
    80024bce:	090080e7          	jalr	144(ra) # 80022c5a <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E>
    80024bd2:	60aa                	ld	ra,136(sp)
    80024bd4:	6149                	addi	sp,sp,144
    80024bd6:	8082                	ret
    80024bd8:	4625                	li	a2,9
    80024bda:	02600593          	li	a1,38
    80024bde:	00a66963          	bltu	a2,a0,80024bf0 <.LBB508_22+0x34>
    80024be2:	0030                	addi	a2,sp,8
    80024be4:	962e                	add	a2,a2,a1
    80024be6:	03050513          	addi	a0,a0,48
    80024bea:	00a60023          	sb	a0,0(a2)
    80024bee:	a00d                	j	80024c10 <.LBB508_23+0x1e>
    80024bf0:	0506                	slli	a0,a0,0x1

0000000080024bf2 <.LBB508_23>:
    80024bf2:	00008597          	auipc	a1,0x8
    80024bf6:	ed858593          	addi	a1,a1,-296 # 8002caca <.Lanon.f077182aff5f58a5660f14b1290425e3.229>
    80024bfa:	952e                	add	a0,a0,a1
    80024bfc:	00150583          	lb	a1,1(a0)
    80024c00:	00054503          	lbu	a0,0(a0)
    80024c04:	02b10723          	sb	a1,46(sp)
    80024c08:	02a106a3          	sb	a0,45(sp)
    80024c0c:	02500593          	li	a1,37
    80024c10:	0028                	addi	a0,sp,8
    80024c12:	00b50733          	add	a4,a0,a1
    80024c16:	02700513          	li	a0,39
    80024c1a:	40b507b3          	sub	a5,a0,a1

0000000080024c1e <.LBB508_24>:
    80024c1e:	00008617          	auipc	a2,0x8
    80024c22:	bca60613          	addi	a2,a2,-1078 # 8002c7e8 <.Lanon.f077182aff5f58a5660f14b1290425e3.133>
    80024c26:	4585                	li	a1,1
    80024c28:	8542                	mv	a0,a6
    80024c2a:	4681                	li	a3,0
    80024c2c:	ffffe097          	auipc	ra,0xffffe
    80024c30:	02e080e7          	jalr	46(ra) # 80022c5a <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E>
    80024c34:	60aa                	ld	ra,136(sp)
    80024c36:	6149                	addi	sp,sp,144
    80024c38:	8082                	ret

0000000080024c3a <.LBB508_25>:
    80024c3a:	00008617          	auipc	a2,0x8
    80024c3e:	e7660613          	addi	a2,a2,-394 # 8002cab0 <.Lanon.f077182aff5f58a5660f14b1290425e3.225>
    80024c42:	08000593          	li	a1,128
    80024c46:	fffff097          	auipc	ra,0xfffff
    80024c4a:	dbe080e7          	jalr	-578(ra) # 80023a04 <_ZN4core5slice5index26slice_start_index_len_fail17h9b5b4d8717655b24E>
	...

Disassembly of section .text._ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h729ad47dd83507edE:

0000000080024c50 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h729ad47dd83507edE>:
    80024c50:	6510                	ld	a2,8(a0)
    80024c52:	6108                	ld	a0,0(a0)
    80024c54:	6e1c                	ld	a5,24(a2)
    80024c56:	8782                	jr	a5

Disassembly of section .text._ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17haf4f75541e037c12E:

0000000080024c58 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17haf4f75541e037c12E>:
    80024c58:	6108                	ld	a0,0(a0)
    80024c5a:	00000317          	auipc	t1,0x0
    80024c5e:	84e30067          	jr	-1970(t1) # 800244a8 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h46dfaf96577b17ecE>

Disassembly of section .text._ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hb809428d9f1f0981E:

0000000080024c62 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hb809428d9f1f0981E>:
    80024c62:	00008697          	auipc	a3,0x8
    80024c66:	fb668693          	addi	a3,a3,-74 # 8002cc18 <.Lanon.f077182aff5f58a5660f14b1290425e3.242>
    80024c6a:	4609                	li	a2,2
    80024c6c:	852e                	mv	a0,a1
    80024c6e:	85b6                	mv	a1,a3
    80024c70:	ffffe317          	auipc	t1,0xffffe
    80024c74:	2a230067          	jr	674(t1) # 80022f12 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE>

Disassembly of section .text._ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hb8cc379c2a0c894eE:

0000000080024c78 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hb8cc379c2a0c894eE>:
    80024c78:	7139                	addi	sp,sp,-64
    80024c7a:	fc06                	sd	ra,56(sp)
    80024c7c:	f822                	sd	s0,48(sp)
    80024c7e:	f426                	sd	s1,40(sp)
    80024c80:	6110                	ld	a2,0(a0)
    80024c82:	00064503          	lbu	a0,0(a2)
    80024c86:	842e                	mv	s0,a1
    80024c88:	cd59                	beqz	a0,80024d26 <.LBB572_13+0x1e>
    80024c8a:	740c                	ld	a1,40(s0)
    80024c8c:	7008                	ld	a0,32(s0)
    80024c8e:	6d94                	ld	a3,24(a1)
    80024c90:	00160493          	addi	s1,a2,1

0000000080024c94 <.LBB572_10>:
    80024c94:	00002597          	auipc	a1,0x2
    80024c98:	a6858593          	addi	a1,a1,-1432 # 800266fc <.LJTI3_0+0x5c>
    80024c9c:	4611                	li	a2,4
    80024c9e:	9682                	jalr	a3
    80024ca0:	e422                	sd	s0,8(sp)
    80024ca2:	00a10c23          	sb	a0,24(sp)
    80024ca6:	e802                	sd	zero,16(sp)
    80024ca8:	00010ca3          	sb	zero,25(sp)
    80024cac:	f026                	sd	s1,32(sp)

0000000080024cae <.LBB572_11>:
    80024cae:	00008617          	auipc	a2,0x8
    80024cb2:	dc260613          	addi	a2,a2,-574 # 8002ca70 <.Lanon.f077182aff5f58a5660f14b1290425e3.214>
    80024cb6:	0028                	addi	a0,sp,8
    80024cb8:	100c                	addi	a1,sp,32
    80024cba:	ffffe097          	auipc	ra,0xffffe
    80024cbe:	a72080e7          	jalr	-1422(ra) # 8002272c <_ZN4core3fmt8builders10DebugTuple5field17h5bd338b8cb98b948E>
    80024cc2:	6542                	ld	a0,16(sp)
    80024cc4:	01814583          	lbu	a1,24(sp)
    80024cc8:	c921                	beqz	a0,80024d18 <.LBB572_13+0x10>
    80024cca:	4405                	li	s0,1
    80024ccc:	e5a9                	bnez	a1,80024d16 <.LBB572_13+0xe>
    80024cce:	01914583          	lbu	a1,25(sp)
    80024cd2:	157d                	addi	a0,a0,-1
    80024cd4:	00a03533          	snez	a0,a0
    80024cd8:	0015b593          	seqz	a1,a1
    80024cdc:	8d4d                	or	a0,a0,a1
    80024cde:	e10d                	bnez	a0,80024d00 <.LBB572_12+0x10>
    80024ce0:	6522                	ld	a0,8(sp)
    80024ce2:	03054583          	lbu	a1,48(a0)
    80024ce6:	8991                	andi	a1,a1,4
    80024ce8:	ed81                	bnez	a1,80024d00 <.LBB572_12+0x10>
    80024cea:	750c                	ld	a1,40(a0)
    80024cec:	7108                	ld	a0,32(a0)
    80024cee:	6d94                	ld	a3,24(a1)

0000000080024cf0 <.LBB572_12>:
    80024cf0:	00008597          	auipc	a1,0x8
    80024cf4:	d7858593          	addi	a1,a1,-648 # 8002ca68 <.Lanon.f077182aff5f58a5660f14b1290425e3.209>
    80024cf8:	4605                	li	a2,1
    80024cfa:	4405                	li	s0,1
    80024cfc:	9682                	jalr	a3
    80024cfe:	ed01                	bnez	a0,80024d16 <.LBB572_13+0xe>
    80024d00:	6522                	ld	a0,8(sp)
    80024d02:	750c                	ld	a1,40(a0)
    80024d04:	7108                	ld	a0,32(a0)
    80024d06:	6d94                	ld	a3,24(a1)

0000000080024d08 <.LBB572_13>:
    80024d08:	00008597          	auipc	a1,0x8
    80024d0c:	d6158593          	addi	a1,a1,-671 # 8002ca69 <.Lanon.f077182aff5f58a5660f14b1290425e3.210>
    80024d10:	4605                	li	a2,1
    80024d12:	9682                	jalr	a3
    80024d14:	842a                	mv	s0,a0
    80024d16:	85a2                	mv	a1,s0
    80024d18:	00b03533          	snez	a0,a1
    80024d1c:	74a2                	ld	s1,40(sp)
    80024d1e:	7442                	ld	s0,48(sp)
    80024d20:	70e2                	ld	ra,56(sp)
    80024d22:	6121                	addi	sp,sp,64
    80024d24:	8082                	ret
    80024d26:	740c                	ld	a1,40(s0)
    80024d28:	7008                	ld	a0,32(s0)
    80024d2a:	6d9c                	ld	a5,24(a1)

0000000080024d2c <.LBB572_14>:
    80024d2c:	00002597          	auipc	a1,0x2
    80024d30:	9f458593          	addi	a1,a1,-1548 # 80026720 <.LJTI3_0+0x80>
    80024d34:	4611                	li	a2,4
    80024d36:	74a2                	ld	s1,40(sp)
    80024d38:	7442                	ld	s0,48(sp)
    80024d3a:	70e2                	ld	ra,56(sp)
    80024d3c:	6121                	addi	sp,sp,64
    80024d3e:	8782                	jr	a5

Disassembly of section .text._ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hd91955f1ed16292bE:

0000000080024d40 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hd91955f1ed16292bE>:
    80024d40:	1141                	addi	sp,sp,-16
    80024d42:	e406                	sd	ra,8(sp)
    80024d44:	6108                	ld	a0,0(a0)
    80024d46:	6108                	ld	a0,0(a0)
    80024d48:	e02a                	sd	a0,0(sp)
    80024d4a:	850a                	mv	a0,sp
    80024d4c:	fffff097          	auipc	ra,0xfffff
    80024d50:	75c080e7          	jalr	1884(ra) # 800244a8 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h46dfaf96577b17ecE>
    80024d54:	60a2                	ld	ra,8(sp)
    80024d56:	0141                	addi	sp,sp,16
    80024d58:	8082                	ret

Disassembly of section .text._ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h65c6410ca8a4d3e4E:

0000000080024d5a <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h65c6410ca8a4d3e4E>:
    80024d5a:	6114                	ld	a3,0(a0)
    80024d5c:	6510                	ld	a2,8(a0)
    80024d5e:	852e                	mv	a0,a1
    80024d60:	85b6                	mv	a1,a3
    80024d62:	ffffe317          	auipc	t1,0xffffe
    80024d66:	1b030067          	jr	432(t1) # 80022f12 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE>

Disassembly of section .text._ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h78c3d125c3c6a2c3E:

0000000080024d6a <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h78c3d125c3c6a2c3E>:
    80024d6a:	7139                	addi	sp,sp,-64
    80024d6c:	fc06                	sd	ra,56(sp)
    80024d6e:	6110                	ld	a2,0(a0)
    80024d70:	7608                	ld	a0,40(a2)
    80024d72:	f82a                	sd	a0,48(sp)
    80024d74:	7208                	ld	a0,32(a2)
    80024d76:	f42a                	sd	a0,40(sp)
    80024d78:	6e08                	ld	a0,24(a2)
    80024d7a:	f02a                	sd	a0,32(sp)
    80024d7c:	6a08                	ld	a0,16(a2)
    80024d7e:	ec2a                	sd	a0,24(sp)
    80024d80:	6614                	ld	a3,8(a2)
    80024d82:	7188                	ld	a0,32(a1)
    80024d84:	e836                	sd	a3,16(sp)
    80024d86:	6210                	ld	a2,0(a2)
    80024d88:	758c                	ld	a1,40(a1)
    80024d8a:	e432                	sd	a2,8(sp)
    80024d8c:	0030                	addi	a2,sp,8
    80024d8e:	ffffe097          	auipc	ra,0xffffe
    80024d92:	d4a080e7          	jalr	-694(ra) # 80022ad8 <_ZN4core3fmt5write17hf87af17b3ec995a2E>
    80024d96:	70e2                	ld	ra,56(sp)
    80024d98:	6121                	addi	sp,sp,64
    80024d9a:	8082                	ret

Disassembly of section .text._ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h874d6ce7f8524becE:

0000000080024d9c <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h874d6ce7f8524becE>:
    80024d9c:	6108                	ld	a0,0(a0)
    80024d9e:	6114                	ld	a3,0(a0)
    80024da0:	6510                	ld	a2,8(a0)
    80024da2:	852e                	mv	a0,a1
    80024da4:	85b6                	mv	a1,a3
    80024da6:	ffffe317          	auipc	t1,0xffffe
    80024daa:	16c30067          	jr	364(t1) # 80022f12 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE>

Disassembly of section .text._ZN64_$LT$core..str..error..Utf8Error$u20$as$u20$core..fmt..Debug$GT$3fmt17ha0e809482d073ba7E:

0000000080024dae <_ZN64_$LT$core..str..error..Utf8Error$u20$as$u20$core..fmt..Debug$GT$3fmt17ha0e809482d073ba7E>:
    80024dae:	7139                	addi	sp,sp,-64
    80024db0:	fc06                	sd	ra,56(sp)
    80024db2:	f822                	sd	s0,48(sp)
    80024db4:	f426                	sd	s1,40(sp)
    80024db6:	f04a                	sd	s2,32(sp)
    80024db8:	842e                	mv	s0,a1
    80024dba:	758c                	ld	a1,40(a1)
    80024dbc:	7014                	ld	a3,32(s0)
    80024dbe:	6d98                	ld	a4,24(a1)
    80024dc0:	84aa                	mv	s1,a0
    80024dc2:	00850913          	addi	s2,a0,8

0000000080024dc6 <.LBB599_8>:
    80024dc6:	00008597          	auipc	a1,0x8
    80024dca:	7bf58593          	addi	a1,a1,1983 # 8002d585 <.Lanon.f077182aff5f58a5660f14b1290425e3.570>
    80024dce:	4625                	li	a2,9
    80024dd0:	8536                	mv	a0,a3
    80024dd2:	9702                	jalr	a4
    80024dd4:	e42a                	sd	a0,8(sp)
    80024dd6:	e022                	sd	s0,0(sp)
    80024dd8:	ec26                	sd	s1,24(sp)

0000000080024dda <.LBB599_9>:
    80024dda:	00008597          	auipc	a1,0x8
    80024dde:	7b458593          	addi	a1,a1,1972 # 8002d58e <.Lanon.f077182aff5f58a5660f14b1290425e3.571>

0000000080024de2 <.LBB599_10>:
    80024de2:	00008717          	auipc	a4,0x8
    80024de6:	74e70713          	addi	a4,a4,1870 # 8002d530 <.Lanon.f077182aff5f58a5660f14b1290425e3.422>
    80024dea:	850a                	mv	a0,sp
    80024dec:	462d                	li	a2,11
    80024dee:	0834                	addi	a3,sp,24
    80024df0:	ffffd097          	auipc	ra,0xffffd
    80024df4:	7c0080e7          	jalr	1984(ra) # 800225b0 <_ZN4core3fmt8builders11DebugStruct5field17hd4a9c9da942f00c3E>
    80024df8:	ec4a                	sd	s2,24(sp)

0000000080024dfa <.LBB599_11>:
    80024dfa:	00008597          	auipc	a1,0x8
    80024dfe:	79f58593          	addi	a1,a1,1951 # 8002d599 <.Lanon.f077182aff5f58a5660f14b1290425e3.572>

0000000080024e02 <.LBB599_12>:
    80024e02:	00008717          	auipc	a4,0x8
    80024e06:	7a670713          	addi	a4,a4,1958 # 8002d5a8 <.Lanon.f077182aff5f58a5660f14b1290425e3.573>
    80024e0a:	850a                	mv	a0,sp
    80024e0c:	4625                	li	a2,9
    80024e0e:	0834                	addi	a3,sp,24
    80024e10:	ffffd097          	auipc	ra,0xffffd
    80024e14:	7a0080e7          	jalr	1952(ra) # 800225b0 <_ZN4core3fmt8builders11DebugStruct5field17hd4a9c9da942f00c3E>
    80024e18:	00914503          	lbu	a0,9(sp)
    80024e1c:	00814583          	lbu	a1,8(sp)
    80024e20:	c91d                	beqz	a0,80024e56 <.LBB599_14+0xe>
    80024e22:	4505                	li	a0,1
    80024e24:	e985                	bnez	a1,80024e54 <.LBB599_14+0xc>
    80024e26:	6502                	ld	a0,0(sp)
    80024e28:	03054583          	lbu	a1,48(a0)
    80024e2c:	8991                	andi	a1,a1,4
    80024e2e:	e991                	bnez	a1,80024e42 <.LBB599_13+0xc>
    80024e30:	750c                	ld	a1,40(a0)
    80024e32:	7108                	ld	a0,32(a0)
    80024e34:	6d94                	ld	a3,24(a1)

0000000080024e36 <.LBB599_13>:
    80024e36:	00008597          	auipc	a1,0x8
    80024e3a:	c2d58593          	addi	a1,a1,-979 # 8002ca63 <.Lanon.f077182aff5f58a5660f14b1290425e3.206>
    80024e3e:	4609                	li	a2,2
    80024e40:	a809                	j	80024e52 <.LBB599_14+0xa>
    80024e42:	750c                	ld	a1,40(a0)
    80024e44:	7108                	ld	a0,32(a0)
    80024e46:	6d94                	ld	a3,24(a1)

0000000080024e48 <.LBB599_14>:
    80024e48:	00008597          	auipc	a1,0x8
    80024e4c:	c1a58593          	addi	a1,a1,-998 # 8002ca62 <.Lanon.f077182aff5f58a5660f14b1290425e3.205>
    80024e50:	4605                	li	a2,1
    80024e52:	9682                	jalr	a3
    80024e54:	85aa                	mv	a1,a0
    80024e56:	00b03533          	snez	a0,a1
    80024e5a:	7902                	ld	s2,32(sp)
    80024e5c:	74a2                	ld	s1,40(sp)
    80024e5e:	7442                	ld	s0,48(sp)
    80024e60:	70e2                	ld	ra,56(sp)
    80024e62:	6121                	addi	sp,sp,64
    80024e64:	8082                	ret

Disassembly of section .text._ZN4core7unicode12unicode_data15grapheme_extend6lookup17hb6efbf5d86b330e2E:

0000000080024e66 <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17hb6efbf5d86b330e2E>:
    80024e66:	1141                	addi	sp,sp,-16
    80024e68:	e406                	sd	ra,8(sp)
    80024e6a:	4701                	li	a4,0
    80024e6c:	00b51593          	slli	a1,a0,0xb
    80024e70:	47fd                	li	a5,31

0000000080024e72 <.LBB627_25>:
    80024e72:	00008817          	auipc	a6,0x8
    80024e76:	75680813          	addi	a6,a6,1878 # 8002d5c8 <_ZN4core7unicode12unicode_data15grapheme_extend17SHORT_OFFSET_RUNS17h48ab6df2484a36f4E>
    80024e7a:	0005889b          	sext.w	a7,a1
    80024e7e:	46fd                	li	a3,31
    80024e80:	a039                	j	80024e8e <.LBB627_25+0x1c>
    80024e82:	00178713          	addi	a4,a5,1
    80024e86:	40e687b3          	sub	a5,a3,a4
    80024e8a:	02d77a63          	bgeu	a4,a3,80024ebe <.LBB627_25+0x4c>
    80024e8e:	0017d593          	srli	a1,a5,0x1
    80024e92:	00e587b3          	add	a5,a1,a4
    80024e96:	00279593          	slli	a1,a5,0x2
    80024e9a:	95c2                	add	a1,a1,a6
    80024e9c:	418c                	lw	a1,0(a1)
    80024e9e:	00b5961b          	slliw	a2,a1,0xb
    80024ea2:	ff1660e3          	bltu	a2,a7,80024e82 <.LBB627_25+0x10>
    80024ea6:	05ae                	slli	a1,a1,0xb
    80024ea8:	2581                	sext.w	a1,a1
    80024eaa:	01158863          	beq	a1,a7,80024eba <.LBB627_25+0x48>
    80024eae:	86be                	mv	a3,a5
    80024eb0:	40e687b3          	sub	a5,a3,a4
    80024eb4:	fcd76de3          	bltu	a4,a3,80024e8e <.LBB627_25+0x1c>
    80024eb8:	a019                	j	80024ebe <.LBB627_25+0x4c>
    80024eba:	00178713          	addi	a4,a5,1
    80024ebe:	46f9                	li	a3,30
    80024ec0:	0ae6e863          	bltu	a3,a4,80024f70 <.LBB627_28>
    80024ec4:	00271793          	slli	a5,a4,0x2
    80024ec8:	2b100613          	li	a2,689
    80024ecc:	00d70863          	beq	a4,a3,80024edc <.LBB627_25+0x6a>
    80024ed0:	00f805b3          	add	a1,a6,a5
    80024ed4:	0045e583          	lwu	a1,4(a1)
    80024ed8:	0155d613          	srli	a2,a1,0x15
    80024edc:	fff70693          	addi	a3,a4,-1
    80024ee0:	00d77463          	bgeu	a4,a3,80024ee8 <.LBB627_25+0x76>
    80024ee4:	4701                	li	a4,0
    80024ee6:	a831                	j	80024f02 <.LBB627_25+0x90>
    80024ee8:	45fd                	li	a1,31
    80024eea:	08b6fe63          	bgeu	a3,a1,80024f86 <.LBB627_29>
    80024eee:	00269593          	slli	a1,a3,0x2
    80024ef2:	95c2                	add	a1,a1,a6
    80024ef4:	0005e583          	lwu	a1,0(a1)
    80024ef8:	002006b7          	lui	a3,0x200
    80024efc:	36fd                	addiw	a3,a3,-1
    80024efe:	00d5f733          	and	a4,a1,a3
    80024f02:	010785b3          	add	a1,a5,a6
    80024f06:	0005e583          	lwu	a1,0(a1)
    80024f0a:	81d5                	srli	a1,a1,0x15
    80024f0c:	00158693          	addi	a3,a1,1
    80024f10:	02d60f63          	beq	a2,a3,80024f4e <.LBB627_26+0x22>
    80024f14:	2b100793          	li	a5,689
    80024f18:	882e                	mv	a6,a1
    80024f1a:	00b7e463          	bltu	a5,a1,80024f22 <.LBB627_25+0xb0>
    80024f1e:	2b100813          	li	a6,689
    80024f22:	4781                	li	a5,0
    80024f24:	40e5073b          	subw	a4,a0,a4
    80024f28:	fff60513          	addi	a0,a2,-1

0000000080024f2c <.LBB627_26>:
    80024f2c:	00008617          	auipc	a2,0x8
    80024f30:	71860613          	addi	a2,a2,1816 # 8002d644 <_ZN4core7unicode12unicode_data15grapheme_extend7OFFSETS17h8de8e75bf9625e57E>
    80024f34:	02b80263          	beq	a6,a1,80024f58 <.LBB627_27>
    80024f38:	00c586b3          	add	a3,a1,a2
    80024f3c:	0006c683          	lbu	a3,0(a3) # 200000 <.Lline_table_start0+0x1c94fe>
    80024f40:	9fb5                	addw	a5,a5,a3
    80024f42:	00f76663          	bltu	a4,a5,80024f4e <.LBB627_26+0x22>
    80024f46:	0585                	addi	a1,a1,1
    80024f48:	feb516e3          	bne	a0,a1,80024f34 <.LBB627_26+0x8>
    80024f4c:	85aa                	mv	a1,a0
    80024f4e:	0015f513          	andi	a0,a1,1
    80024f52:	60a2                	ld	ra,8(sp)
    80024f54:	0141                	addi	sp,sp,16
    80024f56:	8082                	ret

0000000080024f58 <.LBB627_27>:
    80024f58:	00008617          	auipc	a2,0x8
    80024f5c:	5a860613          	addi	a2,a2,1448 # 8002d500 <.Lanon.f077182aff5f58a5660f14b1290425e3.360>
    80024f60:	2b100593          	li	a1,689
    80024f64:	8542                	mv	a0,a6
    80024f66:	ffffd097          	auipc	ra,0xffffd
    80024f6a:	33c080e7          	jalr	828(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

0000000080024f70 <.LBB627_28>:
    80024f70:	00008617          	auipc	a2,0x8
    80024f74:	57860613          	addi	a2,a2,1400 # 8002d4e8 <.Lanon.f077182aff5f58a5660f14b1290425e3.359>
    80024f78:	45fd                	li	a1,31
    80024f7a:	853a                	mv	a0,a4
    80024f7c:	ffffd097          	auipc	ra,0xffffd
    80024f80:	326080e7          	jalr	806(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

0000000080024f86 <.LBB627_29>:
    80024f86:	00008617          	auipc	a2,0x8
    80024f8a:	59260613          	addi	a2,a2,1426 # 8002d518 <.Lanon.f077182aff5f58a5660f14b1290425e3.361>
    80024f8e:	45fd                	li	a1,31
    80024f90:	8536                	mv	a0,a3
    80024f92:	ffffd097          	auipc	ra,0xffffd
    80024f96:	310080e7          	jalr	784(ra) # 800222a2 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN64_$LT$core..alloc..layout..Layout$u20$as$u20$core..fmt..Debug$GT$3fmt17h791c624323e1e5daE:

0000000080024f9c <_ZN64_$LT$core..alloc..layout..Layout$u20$as$u20$core..fmt..Debug$GT$3fmt17h791c624323e1e5daE>:
    80024f9c:	7139                	addi	sp,sp,-64
    80024f9e:	fc06                	sd	ra,56(sp)
    80024fa0:	f822                	sd	s0,48(sp)
    80024fa2:	f426                	sd	s1,40(sp)
    80024fa4:	f04a                	sd	s2,32(sp)
    80024fa6:	842e                	mv	s0,a1
    80024fa8:	758c                	ld	a1,40(a1)
    80024faa:	7014                	ld	a3,32(s0)
    80024fac:	6d98                	ld	a4,24(a1)
    80024fae:	84aa                	mv	s1,a0
    80024fb0:	00850913          	addi	s2,a0,8

0000000080024fb4 <.LBB637_8>:
    80024fb4:	00009597          	auipc	a1,0x9
    80024fb8:	94158593          	addi	a1,a1,-1727 # 8002d8f5 <.Lanon.f077182aff5f58a5660f14b1290425e3.643>
    80024fbc:	4619                	li	a2,6
    80024fbe:	8536                	mv	a0,a3
    80024fc0:	9702                	jalr	a4
    80024fc2:	e42a                	sd	a0,8(sp)
    80024fc4:	e022                	sd	s0,0(sp)
    80024fc6:	ec26                	sd	s1,24(sp)

0000000080024fc8 <.LBB637_9>:
    80024fc8:	00009597          	auipc	a1,0x9
    80024fcc:	93358593          	addi	a1,a1,-1741 # 8002d8fb <.Lanon.f077182aff5f58a5660f14b1290425e3.644>

0000000080024fd0 <.LBB637_10>:
    80024fd0:	00008717          	auipc	a4,0x8
    80024fd4:	56070713          	addi	a4,a4,1376 # 8002d530 <.Lanon.f077182aff5f58a5660f14b1290425e3.422>
    80024fd8:	850a                	mv	a0,sp
    80024fda:	4615                	li	a2,5
    80024fdc:	0834                	addi	a3,sp,24
    80024fde:	ffffd097          	auipc	ra,0xffffd
    80024fe2:	5d2080e7          	jalr	1490(ra) # 800225b0 <_ZN4core3fmt8builders11DebugStruct5field17hd4a9c9da942f00c3E>
    80024fe6:	ec4a                	sd	s2,24(sp)

0000000080024fe8 <.LBB637_11>:
    80024fe8:	00009597          	auipc	a1,0x9
    80024fec:	91858593          	addi	a1,a1,-1768 # 8002d900 <.Lanon.f077182aff5f58a5660f14b1290425e3.645>

0000000080024ff0 <.LBB637_12>:
    80024ff0:	00009717          	auipc	a4,0x9
    80024ff4:	91870713          	addi	a4,a4,-1768 # 8002d908 <.Lanon.f077182aff5f58a5660f14b1290425e3.646>
    80024ff8:	850a                	mv	a0,sp
    80024ffa:	4619                	li	a2,6
    80024ffc:	0834                	addi	a3,sp,24
    80024ffe:	ffffd097          	auipc	ra,0xffffd
    80025002:	5b2080e7          	jalr	1458(ra) # 800225b0 <_ZN4core3fmt8builders11DebugStruct5field17hd4a9c9da942f00c3E>
    80025006:	00914503          	lbu	a0,9(sp)
    8002500a:	00814583          	lbu	a1,8(sp)
    8002500e:	c91d                	beqz	a0,80025044 <.LBB637_14+0xe>
    80025010:	4505                	li	a0,1
    80025012:	e985                	bnez	a1,80025042 <.LBB637_14+0xc>
    80025014:	6502                	ld	a0,0(sp)
    80025016:	03054583          	lbu	a1,48(a0)
    8002501a:	8991                	andi	a1,a1,4
    8002501c:	e991                	bnez	a1,80025030 <.LBB637_13+0xc>
    8002501e:	750c                	ld	a1,40(a0)
    80025020:	7108                	ld	a0,32(a0)
    80025022:	6d94                	ld	a3,24(a1)

0000000080025024 <.LBB637_13>:
    80025024:	00008597          	auipc	a1,0x8
    80025028:	a3f58593          	addi	a1,a1,-1473 # 8002ca63 <.Lanon.f077182aff5f58a5660f14b1290425e3.206>
    8002502c:	4609                	li	a2,2
    8002502e:	a809                	j	80025040 <.LBB637_14+0xa>
    80025030:	750c                	ld	a1,40(a0)
    80025032:	7108                	ld	a0,32(a0)
    80025034:	6d94                	ld	a3,24(a1)

0000000080025036 <.LBB637_14>:
    80025036:	00008597          	auipc	a1,0x8
    8002503a:	a2c58593          	addi	a1,a1,-1492 # 8002ca62 <.Lanon.f077182aff5f58a5660f14b1290425e3.205>
    8002503e:	4605                	li	a2,1
    80025040:	9682                	jalr	a3
    80025042:	85aa                	mv	a1,a0
    80025044:	00b03533          	snez	a0,a1
    80025048:	7902                	ld	s2,32(sp)
    8002504a:	74a2                	ld	s1,40(sp)
    8002504c:	7442                	ld	s0,48(sp)
    8002504e:	70e2                	ld	ra,56(sp)
    80025050:	6121                	addi	sp,sp,64
    80025052:	8082                	ret

Disassembly of section .text._ZN69_$LT$core..alloc..layout..LayoutError$u20$as$u20$core..fmt..Debug$GT$3fmt17hfec9be36260ff346E:

0000000080025054 <_ZN69_$LT$core..alloc..layout..LayoutError$u20$as$u20$core..fmt..Debug$GT$3fmt17hfec9be36260ff346E>:
    80025054:	7179                	addi	sp,sp,-48
    80025056:	f406                	sd	ra,40(sp)
    80025058:	f022                	sd	s0,32(sp)
    8002505a:	ec26                	sd	s1,24(sp)
    8002505c:	842e                	mv	s0,a1
    8002505e:	758c                	ld	a1,40(a1)
    80025060:	7014                	ld	a3,32(s0)
    80025062:	6d98                	ld	a4,24(a1)
    80025064:	84aa                	mv	s1,a0

0000000080025066 <.LBB638_8>:
    80025066:	00009597          	auipc	a1,0x9
    8002506a:	8c258593          	addi	a1,a1,-1854 # 8002d928 <.Lanon.f077182aff5f58a5660f14b1290425e3.647>
    8002506e:	462d                	li	a2,11
    80025070:	8536                	mv	a0,a3
    80025072:	9702                	jalr	a4
    80025074:	e42a                	sd	a0,8(sp)
    80025076:	e022                	sd	s0,0(sp)
    80025078:	e826                	sd	s1,16(sp)

000000008002507a <.LBB638_9>:
    8002507a:	00009597          	auipc	a1,0x9
    8002507e:	8b958593          	addi	a1,a1,-1863 # 8002d933 <.Lanon.f077182aff5f58a5660f14b1290425e3.648>

0000000080025082 <.LBB638_10>:
    80025082:	00008717          	auipc	a4,0x8
    80025086:	4de70713          	addi	a4,a4,1246 # 8002d560 <.Lanon.f077182aff5f58a5660f14b1290425e3.426>
    8002508a:	850a                	mv	a0,sp
    8002508c:	461d                	li	a2,7
    8002508e:	0814                	addi	a3,sp,16
    80025090:	ffffd097          	auipc	ra,0xffffd
    80025094:	520080e7          	jalr	1312(ra) # 800225b0 <_ZN4core3fmt8builders11DebugStruct5field17hd4a9c9da942f00c3E>
    80025098:	00914503          	lbu	a0,9(sp)
    8002509c:	00814583          	lbu	a1,8(sp)
    800250a0:	c91d                	beqz	a0,800250d6 <.LBB638_12+0xe>
    800250a2:	4505                	li	a0,1
    800250a4:	e985                	bnez	a1,800250d4 <.LBB638_12+0xc>
    800250a6:	6502                	ld	a0,0(sp)
    800250a8:	03054583          	lbu	a1,48(a0)
    800250ac:	8991                	andi	a1,a1,4
    800250ae:	e991                	bnez	a1,800250c2 <.LBB638_11+0xc>
    800250b0:	750c                	ld	a1,40(a0)
    800250b2:	7108                	ld	a0,32(a0)
    800250b4:	6d94                	ld	a3,24(a1)

00000000800250b6 <.LBB638_11>:
    800250b6:	00008597          	auipc	a1,0x8
    800250ba:	9ad58593          	addi	a1,a1,-1619 # 8002ca63 <.Lanon.f077182aff5f58a5660f14b1290425e3.206>
    800250be:	4609                	li	a2,2
    800250c0:	a809                	j	800250d2 <.LBB638_12+0xa>
    800250c2:	750c                	ld	a1,40(a0)
    800250c4:	7108                	ld	a0,32(a0)
    800250c6:	6d94                	ld	a3,24(a1)

00000000800250c8 <.LBB638_12>:
    800250c8:	00008597          	auipc	a1,0x8
    800250cc:	99a58593          	addi	a1,a1,-1638 # 8002ca62 <.Lanon.f077182aff5f58a5660f14b1290425e3.205>
    800250d0:	4605                	li	a2,1
    800250d2:	9682                	jalr	a3
    800250d4:	85aa                	mv	a1,a0
    800250d6:	00b03533          	snez	a0,a1
    800250da:	64e2                	ld	s1,24(sp)
    800250dc:	7402                	ld	s0,32(sp)
    800250de:	70a2                	ld	ra,40(sp)
    800250e0:	6145                	addi	sp,sp,48
    800250e2:	8082                	ret

Disassembly of section .text.memcpy:

00000000800250e4 <memcpy>:
    800250e4:	ca11                	beqz	a2,800250f8 <memcpy+0x14>
    800250e6:	86aa                	mv	a3,a0
    800250e8:	00058703          	lb	a4,0(a1)
    800250ec:	00e68023          	sb	a4,0(a3)
    800250f0:	167d                	addi	a2,a2,-1
    800250f2:	0685                	addi	a3,a3,1
    800250f4:	0585                	addi	a1,a1,1
    800250f6:	fa6d                	bnez	a2,800250e8 <memcpy+0x4>
    800250f8:	8082                	ret

Disassembly of section .text.memmove:

00000000800250fa <memmove>:
    800250fa:	40b506b3          	sub	a3,a0,a1
    800250fe:	02c6f163          	bgeu	a3,a2,80025120 <memmove+0x26>
    80025102:	fff50693          	addi	a3,a0,-1
    80025106:	15fd                	addi	a1,a1,-1
    80025108:	00c58733          	add	a4,a1,a2
    8002510c:	00070703          	lb	a4,0(a4)
    80025110:	fff60793          	addi	a5,a2,-1
    80025114:	9636                	add	a2,a2,a3
    80025116:	00e60023          	sb	a4,0(a2)
    8002511a:	863e                	mv	a2,a5
    8002511c:	f7f5                	bnez	a5,80025108 <memmove+0xe>
    8002511e:	a819                	j	80025134 <memmove+0x3a>
    80025120:	ca11                	beqz	a2,80025134 <memmove+0x3a>
    80025122:	86aa                	mv	a3,a0
    80025124:	00058703          	lb	a4,0(a1)
    80025128:	00e68023          	sb	a4,0(a3)
    8002512c:	167d                	addi	a2,a2,-1
    8002512e:	0685                	addi	a3,a3,1
    80025130:	0585                	addi	a1,a1,1
    80025132:	fa6d                	bnez	a2,80025124 <memmove+0x2a>
    80025134:	8082                	ret

Disassembly of section .text.memset:

0000000080025136 <memset>:
    80025136:	c619                	beqz	a2,80025144 <memset+0xe>
    80025138:	86aa                	mv	a3,a0
    8002513a:	00b68023          	sb	a1,0(a3)
    8002513e:	167d                	addi	a2,a2,-1
    80025140:	0685                	addi	a3,a3,1
    80025142:	fe65                	bnez	a2,8002513a <memset+0x4>
    80025144:	8082                	ret
