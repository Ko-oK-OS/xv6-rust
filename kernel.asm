
kernel/target/riscv64gc-unknown-none-elf/debug/kernel:     file format elf64-littleriscv


Disassembly of section .text:

0000000080000000 <_entry>:
    80000000:	00037117          	auipc	sp,0x37
    80000004:	54010113          	addi	sp,sp,1344 # 80037540 <stack0>
    80000008:	6511                	lui	a0,0x4
    8000000a:	f14025f3          	csrr	a1,mhartid
    8000000e:	0585                	addi	a1,a1,1
    80000010:	02b50533          	mul	a0,a0,a1
    80000014:	912a                	add	sp,sp,a0
    80000016:	0000c097          	auipc	ra,0xc
    8000001a:	2f8080e7          	jalr	760(ra) # 8000c30e <start>
    8000001e:	0001                	nop

0000000080000020 <kernelvec>:
    80000020:	7111                	addi	sp,sp,-256
    80000022:	e006                	sd	ra,0(sp)
    80000024:	e40a                	sd	sp,8(sp)
    80000026:	e80e                	sd	gp,16(sp)
    80000028:	ec12                	sd	tp,24(sp)
    8000002a:	f016                	sd	t0,32(sp)
    8000002c:	f41a                	sd	t1,40(sp)
    8000002e:	f81e                	sd	t2,48(sp)
    80000030:	fc22                	sd	s0,56(sp)
    80000032:	e0a6                	sd	s1,64(sp)
    80000034:	e4aa                	sd	a0,72(sp)
    80000036:	e8ae                	sd	a1,80(sp)
    80000038:	ecb2                	sd	a2,88(sp)
    8000003a:	f0b6                	sd	a3,96(sp)
    8000003c:	f4ba                	sd	a4,104(sp)
    8000003e:	f8be                	sd	a5,112(sp)
    80000040:	fcc2                	sd	a6,120(sp)
    80000042:	e146                	sd	a7,128(sp)
    80000044:	e54a                	sd	s2,136(sp)
    80000046:	e94e                	sd	s3,144(sp)
    80000048:	ed52                	sd	s4,152(sp)
    8000004a:	f156                	sd	s5,160(sp)
    8000004c:	f55a                	sd	s6,168(sp)
    8000004e:	f95e                	sd	s7,176(sp)
    80000050:	fd62                	sd	s8,184(sp)
    80000052:	e1e6                	sd	s9,192(sp)
    80000054:	e5ea                	sd	s10,200(sp)
    80000056:	e9ee                	sd	s11,208(sp)
    80000058:	edf2                	sd	t3,216(sp)
    8000005a:	f1f6                	sd	t4,224(sp)
    8000005c:	f5fa                	sd	t5,232(sp)
    8000005e:	f9fe                	sd	t6,240(sp)
    80000060:	00006097          	auipc	ra,0x6
    80000064:	714080e7          	jalr	1812(ra) # 80006774 <kernel_trap>
    80000068:	6082                	ld	ra,0(sp)
    8000006a:	6122                	ld	sp,8(sp)
    8000006c:	61c2                	ld	gp,16(sp)
    8000006e:	7282                	ld	t0,32(sp)
    80000070:	7322                	ld	t1,40(sp)
    80000072:	73c2                	ld	t2,48(sp)
    80000074:	7462                	ld	s0,56(sp)
    80000076:	6486                	ld	s1,64(sp)
    80000078:	6526                	ld	a0,72(sp)
    8000007a:	65c6                	ld	a1,80(sp)
    8000007c:	6666                	ld	a2,88(sp)
    8000007e:	7686                	ld	a3,96(sp)
    80000080:	7726                	ld	a4,104(sp)
    80000082:	77c6                	ld	a5,112(sp)
    80000084:	7866                	ld	a6,120(sp)
    80000086:	688a                	ld	a7,128(sp)
    80000088:	692a                	ld	s2,136(sp)
    8000008a:	69ca                	ld	s3,144(sp)
    8000008c:	6a6a                	ld	s4,152(sp)
    8000008e:	7a8a                	ld	s5,160(sp)
    80000090:	7b2a                	ld	s6,168(sp)
    80000092:	7bca                	ld	s7,176(sp)
    80000094:	7c6a                	ld	s8,184(sp)
    80000096:	6c8e                	ld	s9,192(sp)
    80000098:	6d2e                	ld	s10,200(sp)
    8000009a:	6dce                	ld	s11,208(sp)
    8000009c:	6e6e                	ld	t3,216(sp)
    8000009e:	7e8e                	ld	t4,224(sp)
    800000a0:	7f2e                	ld	t5,232(sp)
    800000a2:	7fce                	ld	t6,240(sp)
    800000a4:	6111                	addi	sp,sp,256
    800000a6:	10200073          	sret
    800000aa:	00000013          	nop
    800000ae:	0001                	nop

00000000800000b0 <timervec>:
    800000b0:	34051573          	csrrw	a0,mscratch,a0
    800000b4:	e10c                	sd	a1,0(a0)
    800000b6:	e510                	sd	a2,8(a0)
    800000b8:	e914                	sd	a3,16(a0)
    800000ba:	6d0c                	ld	a1,24(a0)
    800000bc:	7110                	ld	a2,32(a0)
    800000be:	6194                	ld	a3,0(a1)
    800000c0:	96b2                	add	a3,a3,a2
    800000c2:	e194                	sd	a3,0(a1)
    800000c4:	4589                	li	a1,2
    800000c6:	14459073          	csrw	sip,a1
    800000ca:	6914                	ld	a3,16(a0)
    800000cc:	6510                	ld	a2,8(a0)
    800000ce:	610c                	ld	a1,0(a0)
    800000d0:	34051573          	csrrw	a0,mscratch,a0
    800000d4:	30200073          	mret
	...

0000000080001000 <trampoline>:
    80001000:	14051573          	csrrw	a0,sscratch,a0
    80001004:	02153423          	sd	ra,40(a0) # 4028 <.Lline_table_start0+0x3a2>
    80001008:	02253823          	sd	sp,48(a0)
    8000100c:	02353c23          	sd	gp,56(a0)
    80001010:	04453023          	sd	tp,64(a0)
    80001014:	04553423          	sd	t0,72(a0)
    80001018:	04653823          	sd	t1,80(a0)
    8000101c:	04753c23          	sd	t2,88(a0)
    80001020:	f120                	sd	s0,96(a0)
    80001022:	f524                	sd	s1,104(a0)
    80001024:	fd2c                	sd	a1,120(a0)
    80001026:	e150                	sd	a2,128(a0)
    80001028:	e554                	sd	a3,136(a0)
    8000102a:	e958                	sd	a4,144(a0)
    8000102c:	ed5c                	sd	a5,152(a0)
    8000102e:	0b053023          	sd	a6,160(a0)
    80001032:	0b153423          	sd	a7,168(a0)
    80001036:	0b253823          	sd	s2,176(a0)
    8000103a:	0b353c23          	sd	s3,184(a0)
    8000103e:	0d453023          	sd	s4,192(a0)
    80001042:	0d553423          	sd	s5,200(a0)
    80001046:	0d653823          	sd	s6,208(a0)
    8000104a:	0d753c23          	sd	s7,216(a0)
    8000104e:	0f853023          	sd	s8,224(a0)
    80001052:	0f953423          	sd	s9,232(a0)
    80001056:	0fa53823          	sd	s10,240(a0)
    8000105a:	0fb53c23          	sd	s11,248(a0)
    8000105e:	11c53023          	sd	t3,256(a0)
    80001062:	11d53423          	sd	t4,264(a0)
    80001066:	11e53823          	sd	t5,272(a0)
    8000106a:	11f53c23          	sd	t6,280(a0)
    8000106e:	140022f3          	csrr	t0,sscratch
    80001072:	06553823          	sd	t0,112(a0)
    80001076:	141022f3          	csrr	t0,sepc
    8000107a:	00553c23          	sd	t0,24(a0)
    8000107e:	00853103          	ld	sp,8(a0)
    80001082:	02053203          	ld	tp,32(a0)
    80001086:	01053283          	ld	t0,16(a0)
    8000108a:	00053303          	ld	t1,0(a0)
    8000108e:	18031073          	csrw	satp,t1
    80001092:	12000073          	sfence.vma
    80001096:	8282                	jr	t0
	...

00000000800010a0 <userret>:
    800010a0:	18059073          	csrw	satp,a1
    800010a4:	12000073          	sfence.vma
    800010a8:	07053283          	ld	t0,112(a0)
    800010ac:	14029073          	csrw	sscratch,t0
    800010b0:	02853083          	ld	ra,40(a0)
    800010b4:	03053103          	ld	sp,48(a0)
    800010b8:	03853183          	ld	gp,56(a0)
    800010bc:	04053203          	ld	tp,64(a0)
    800010c0:	04853283          	ld	t0,72(a0)
    800010c4:	05053303          	ld	t1,80(a0)
    800010c8:	05853383          	ld	t2,88(a0)
    800010cc:	7120                	ld	s0,96(a0)
    800010ce:	7524                	ld	s1,104(a0)
    800010d0:	7d2c                	ld	a1,120(a0)
    800010d2:	6150                	ld	a2,128(a0)
    800010d4:	6554                	ld	a3,136(a0)
    800010d6:	6958                	ld	a4,144(a0)
    800010d8:	6d5c                	ld	a5,152(a0)
    800010da:	0a053803          	ld	a6,160(a0)
    800010de:	0a853883          	ld	a7,168(a0)
    800010e2:	0b053903          	ld	s2,176(a0)
    800010e6:	0b853983          	ld	s3,184(a0)
    800010ea:	0c053a03          	ld	s4,192(a0)
    800010ee:	0c853a83          	ld	s5,200(a0)
    800010f2:	0d053b03          	ld	s6,208(a0)
    800010f6:	0d853b83          	ld	s7,216(a0)
    800010fa:	0e053c03          	ld	s8,224(a0)
    800010fe:	0e853c83          	ld	s9,232(a0)
    80001102:	0f053d03          	ld	s10,240(a0)
    80001106:	0f853d83          	ld	s11,248(a0)
    8000110a:	10053e03          	ld	t3,256(a0)
    8000110e:	10853e83          	ld	t4,264(a0)
    80001112:	11053f03          	ld	t5,272(a0)
    80001116:	11853f83          	ld	t6,280(a0)
    8000111a:	14051573          	csrrw	a0,sscratch,a0
    8000111e:	10200073          	sret

0000000080001122 <switch>:
    80001122:	00153023          	sd	ra,0(a0)
    80001126:	00253423          	sd	sp,8(a0)
    8000112a:	e900                	sd	s0,16(a0)
    8000112c:	ed04                	sd	s1,24(a0)
    8000112e:	03253023          	sd	s2,32(a0)
    80001132:	03353423          	sd	s3,40(a0)
    80001136:	03453823          	sd	s4,48(a0)
    8000113a:	03553c23          	sd	s5,56(a0)
    8000113e:	05653023          	sd	s6,64(a0)
    80001142:	05753423          	sd	s7,72(a0)
    80001146:	05853823          	sd	s8,80(a0)
    8000114a:	05953c23          	sd	s9,88(a0)
    8000114e:	07a53023          	sd	s10,96(a0)
    80001152:	07b53423          	sd	s11,104(a0)
    80001156:	0005b083          	ld	ra,0(a1)
    8000115a:	0085b103          	ld	sp,8(a1)
    8000115e:	6980                	ld	s0,16(a1)
    80001160:	6d84                	ld	s1,24(a1)
    80001162:	0205b903          	ld	s2,32(a1)
    80001166:	0285b983          	ld	s3,40(a1)
    8000116a:	0305ba03          	ld	s4,48(a1)
    8000116e:	0385ba83          	ld	s5,56(a1)
    80001172:	0405bb03          	ld	s6,64(a1)
    80001176:	0485bb83          	ld	s7,72(a1)
    8000117a:	0505bc03          	ld	s8,80(a1)
    8000117e:	0585bc83          	ld	s9,88(a1)
    80001182:	0605bd03          	ld	s10,96(a1)
    80001186:	0685bd83          	ld	s11,104(a1)
    8000118a:	8082                	ret

Disassembly of section .text._ZN6kernel7process3elf8load_seg17h8e22665aca7680efE:

000000008000118c <_ZN6kernel7process3elf8load_seg17h8e22665aca7680efE>:
/// va must be page-aligned
/// and the pages from va to va+sz must already be mapped.
/// Returns 0 on success, -1 on failure.
#[allow(unused_variables)]
#[allow(unused_assignments)]
fn load_seg(
    8000118c:	7111                	addi	sp,sp,-256
    8000118e:	fd86                	sd	ra,248(sp)
    80001190:	e4ba                	sd	a4,72(sp)
    80001192:	e8b6                	sd	a3,80(sp)
    80001194:	ecb2                	sd	a2,88(sp)
    80001196:	f0ae                	sd	a1,96(sp)
    80001198:	85aa                	mv	a1,a0
    8000119a:	7506                	ld	a0,96(sp)
    8000119c:	f4ae                	sd	a1,104(sp)
    8000119e:	e5ae                	sd	a1,200(sp)
    800011a0:	e9aa                	sd	a0,208(sp)
    800011a2:	edb2                	sd	a2,216(sp)
    800011a4:	f1b6                	sd	a3,224(sp)
    800011a6:	f5ba                	sd	a4,232(sp)
    inode_data: &mut SleepLockGuard<InodeData>,
    offset: usize, 
    size: usize
) -> Result<(), &'static str> {
    // 生成虚拟地址
    let mut va = VirtualAddress::new(va);
    800011a8:	00010097          	auipc	ra,0x10
    800011ac:	370080e7          	jalr	880(ra) # 80011518 <_ZN6kernel6memory7address14VirtualAddress3new17h716be423461f1938E>
    800011b0:	e12a                	sd	a0,128(sp)
    800011b2:	a009                	j	800011b4 <_ZN6kernel7process3elf8load_seg17h8e22665aca7680efE+0x28>
    800011b4:	0108                	addi	a0,sp,128
    if !va.is_page_aligned() {
    800011b6:	00003097          	auipc	ra,0x3
    800011ba:	6aa080e7          	jalr	1706(ra) # 80004860 <_ZN6kernel6memory7address4Addr15is_page_aligned17h21d9aa1b7bd151ebE>
    800011be:	e0aa                	sd	a0,64(sp)
    800011c0:	a009                	j	800011c2 <_ZN6kernel7process3elf8load_seg17h8e22665aca7680efE+0x36>
    800011c2:	6506                	ld	a0,64(sp)
    800011c4:	e10d                	bnez	a0,800011e6 <.LBB0_33+0x16>
    800011c6:	a009                	j	800011c8 <.LBB0_32>

00000000800011c8 <.LBB0_32>:
        panic!("load_seg(): va must be page aligned.");
    800011c8:	00024517          	auipc	a0,0x24
    800011cc:	ed850513          	addi	a0,a0,-296 # 800250a0 <.L__unnamed_1>

00000000800011d0 <.LBB0_33>:
    800011d0:	00024617          	auipc	a2,0x24
    800011d4:	f0860613          	addi	a2,a2,-248 # 800250d8 <.L__unnamed_2>
    800011d8:	02400593          	li	a1,36
    800011dc:	00021097          	auipc	ra,0x21
    800011e0:	f20080e7          	jalr	-224(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    800011e4:	0000                	unimp
    800011e6:	7526                	ld	a0,104(sp)
    800011e8:	4581                	li	a1,0
    }

    let mut copy_size: usize = 0;
    800011ea:	e52e                	sd	a1,136(sp)
    let pagetable = unsafe { &mut *page_table };
    800011ec:	f9aa                	sd	a0,240(sp)
    while copy_size < size {
    800011ee:	a009                	j	800011f0 <.LBB0_33+0x20>
    800011f0:	65a6                	ld	a1,72(sp)
    800011f2:	652a                	ld	a0,136(sp)
    800011f4:	00b56663          	bltu	a0,a1,80001200 <.LBB0_33+0x30>
    800011f8:	a009                	j	800011fa <.LBB0_33+0x2a>
    800011fa:	4501                	li	a0,0

        copy_size += PGSIZE;
        va.add_page();
    }

    Ok(())
    800011fc:	f8aa                	sd	a0,112(sp)
}
    800011fe:	a211                	j	80001302 <.LBB0_36+0x30>
                .pgt_translate(va) {
    80001200:	7526                	ld	a0,104(sp)
    80001202:	658a                	ld	a1,128(sp)
        match pagetable
    80001204:	00016097          	auipc	ra,0x16
    80001208:	dbe080e7          	jalr	-578(ra) # 80016fc2 <_ZN6kernel6memory7mapping10page_table9PageTable13pgt_translate17h8fe9f71b8d139103E>
    8000120c:	e92a                	sd	a0,144(sp)
    8000120e:	ed2e                	sd	a1,152(sp)
    80001210:	a009                	j	80001212 <.LBB0_33+0x42>
            Some(pa) => {
    80001212:	654a                	ld	a0,144(sp)
    80001214:	4581                	li	a1,0
    80001216:	00b50463          	beq	a0,a1,8000121e <.LBB0_34>
    8000121a:	a009                	j	8000121c <.LBB0_33+0x4c>
    8000121c:	a00d                	j	8000123e <.LBB0_35+0x18>

000000008000121e <.LBB0_34>:
                panic!("load_seg(): address should exist.");
    8000121e:	00024517          	auipc	a0,0x24
    80001222:	fa250513          	addi	a0,a0,-94 # 800251c0 <.L__unnamed_3>

0000000080001226 <.LBB0_35>:
    80001226:	00024617          	auipc	a2,0x24
    8000122a:	fc260613          	addi	a2,a2,-62 # 800251e8 <.L__unnamed_4>
    8000122e:	02100593          	li	a1,33
    80001232:	00021097          	auipc	ra,0x21
    80001236:	eca080e7          	jalr	-310(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8000123a:	0000                	unimp
        match pagetable
    8000123c:	0000                	unimp
            Some(pa) => {
    8000123e:	6526                	ld	a0,72(sp)
    80001240:	65ea                	ld	a1,152(sp)
    80001242:	f12e                	sd	a1,160(sp)
                if size - copy_size < PGSIZE {
    80001244:	65aa                	ld	a1,136(sp)
    80001246:	40b505b3          	sub	a1,a0,a1
    8000124a:	fc2e                	sd	a1,56(sp)
    8000124c:	0cb56063          	bltu	a0,a1,8000130c <.LBB0_37>
    80001250:	a009                	j	80001252 <.LBB0_35+0x2c>
    80001252:	7562                	ld	a0,56(sp)
    80001254:	8131                	srli	a0,a0,0xc
    80001256:	4581                	li	a1,0
    80001258:	00b51b63          	bne	a0,a1,8000126e <.LBB0_35+0x48>
    8000125c:	a009                	j	8000125e <.LBB0_35+0x38>
                    count = size - copy_size;
    8000125e:	6526                	ld	a0,72(sp)
    80001260:	65aa                	ld	a1,136(sp)
    80001262:	40b505b3          	sub	a1,a0,a1
    80001266:	f82e                	sd	a1,48(sp)
    80001268:	0cb56163          	bltu	a0,a1,8000132a <.LBB0_39>
    8000126c:	a021                	j	80001274 <.LBB0_35+0x4e>
    8000126e:	6505                	lui	a0,0x1
                    count = PGSIZE;
    80001270:	f52a                	sd	a0,168(sp)
                if size - copy_size < PGSIZE {
    80001272:	a021                	j	8000127a <.LBB0_35+0x54>
                    count = size - copy_size;
    80001274:	7542                	ld	a0,48(sp)
    80001276:	f52a                	sd	a0,168(sp)
                if size - copy_size < PGSIZE {
    80001278:	a009                	j	8000127a <.LBB0_35+0x54>
                if inode_data.read(
    8000127a:	6566                	ld	a0,88(sp)
    8000127c:	0001c097          	auipc	ra,0x1c
    80001280:	298080e7          	jalr	664(ra) # 8001d514 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    80001284:	f42a                	sd	a0,40(sp)
    80001286:	a009                	j	80001288 <.LBB0_35+0x62>
    80001288:	1108                	addi	a0,sp,160
                    pa.as_usize(), 
    8000128a:	00010097          	auipc	ra,0x10
    8000128e:	27c080e7          	jalr	636(ra) # 80011506 <_ZN90_$LT$kernel..memory..address..PhysicalAddress$u20$as$u20$kernel..memory..address..Addr$GT$8as_usize17hea2eecdb80a1a2b2E>
    80001292:	f02a                	sd	a0,32(sp)
    80001294:	a009                	j	80001296 <.LBB0_35+0x70>
                    (offset + copy_size) as u32, 
    80001296:	65c6                	ld	a1,80(sp)
    80001298:	652a                	ld	a0,136(sp)
    8000129a:	952e                	add	a0,a0,a1
    8000129c:	ec2a                	sd	a0,24(sp)
    8000129e:	0ab56563          	bltu	a0,a1,80001348 <.LBB0_41>
    800012a2:	a009                	j	800012a4 <.LBB0_35+0x7e>
                    count as u32
    800012a4:	6762                	ld	a4,24(sp)
    800012a6:	7682                	ld	a3,32(sp)
    800012a8:	75a2                	ld	a1,40(sp)
    800012aa:	77aa                	ld	a5,168(sp)
    800012ac:	1908                	addi	a0,sp,176
    800012ae:	4601                	li	a2,0
                if inode_data.read(
    800012b0:	00019097          	auipc	ra,0x19
    800012b4:	e60080e7          	jalr	-416(ra) # 8001a110 <_ZN6kernel2fs5inode9InodeData4read17h2d02dc0e430e4837E>
    800012b8:	a009                	j	800012ba <.LBB0_35+0x94>
    800012ba:	1908                	addi	a0,sp,176
    800012bc:	0000c097          	auipc	ra,0xc
    800012c0:	a18080e7          	jalr	-1512(ra) # 8000ccd4 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17he593c7735b347060E>
    800012c4:	e82a                	sd	a0,16(sp)
    800012c6:	a009                	j	800012c8 <.LBB0_35+0xa2>
    800012c8:	6542                	ld	a0,16(sp)
    800012ca:	4581                	li	a1,0
    800012cc:	00b50b63          	beq	a0,a1,800012e2 <.LBB0_36+0x10>
    800012d0:	a009                	j	800012d2 <.LBB0_36>

00000000800012d2 <.LBB0_36>:
                    return Err("load_seg: Fail to read inode")
    800012d2:	00024517          	auipc	a0,0x24
    800012d6:	eba50513          	addi	a0,a0,-326 # 8002518c <.L__unnamed_5>
    800012da:	f8aa                	sd	a0,112(sp)
    800012dc:	4571                	li	a0,28
    800012de:	fcaa                	sd	a0,120(sp)
}
    800012e0:	a00d                	j	80001302 <.LBB0_36+0x30>
        copy_size += PGSIZE;
    800012e2:	65aa                	ld	a1,136(sp)
    800012e4:	6505                	lui	a0,0x1
    800012e6:	952e                	add	a0,a0,a1
    800012e8:	e42a                	sd	a0,8(sp)
    800012ea:	06b56d63          	bltu	a0,a1,80001364 <.LBB0_43>
    800012ee:	a009                	j	800012f0 <.LBB0_36+0x1e>
    800012f0:	6522                	ld	a0,8(sp)
    800012f2:	e52a                	sd	a0,136(sp)
    800012f4:	0108                	addi	a0,sp,128
        va.add_page();
    800012f6:	00003097          	auipc	ra,0x3
    800012fa:	73e080e7          	jalr	1854(ra) # 80004a34 <_ZN6kernel6memory7address4Addr8add_page17hda9f7615eed2e36aE>
    800012fe:	a009                	j	80001300 <.LBB0_36+0x2e>
    while copy_size < size {
    80001300:	bdc5                	j	800011f0 <.LBB0_33+0x20>
}
    80001302:	7546                	ld	a0,112(sp)
    80001304:	75e6                	ld	a1,120(sp)
    80001306:	70ee                	ld	ra,248(sp)
    80001308:	6111                	addi	sp,sp,256
    8000130a:	8082                	ret

000000008000130c <.LBB0_37>:
                if size - copy_size < PGSIZE {
    8000130c:	00024517          	auipc	a0,0x24
    80001310:	e0450513          	addi	a0,a0,-508 # 80025110 <str.0>

0000000080001314 <.LBB0_38>:
    80001314:	00024617          	auipc	a2,0x24
    80001318:	ddc60613          	addi	a2,a2,-548 # 800250f0 <.L__unnamed_6>
    8000131c:	02100593          	li	a1,33
    80001320:	00021097          	auipc	ra,0x21
    80001324:	ddc080e7          	jalr	-548(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008000132a <.LBB0_39>:
                    count = size - copy_size;
    8000132a:	00024517          	auipc	a0,0x24
    8000132e:	de650513          	addi	a0,a0,-538 # 80025110 <str.0>

0000000080001332 <.LBB0_40>:
    80001332:	00024617          	auipc	a2,0x24
    80001336:	e0660613          	addi	a2,a2,-506 # 80025138 <.L__unnamed_7>
    8000133a:	02100593          	li	a1,33
    8000133e:	00021097          	auipc	ra,0x21
    80001342:	dbe080e7          	jalr	-578(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080001348 <.LBB0_41>:
                    (offset + copy_size) as u32, 
    80001348:	00024517          	auipc	a0,0x24
    8000134c:	e2850513          	addi	a0,a0,-472 # 80025170 <str.1>

0000000080001350 <.LBB0_42>:
    80001350:	00024617          	auipc	a2,0x24
    80001354:	e0060613          	addi	a2,a2,-512 # 80025150 <.L__unnamed_8>
    80001358:	45f1                	li	a1,28
    8000135a:	00021097          	auipc	ra,0x21
    8000135e:	da2080e7          	jalr	-606(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080001364 <.LBB0_43>:
        copy_size += PGSIZE;
    80001364:	00024517          	auipc	a0,0x24
    80001368:	e0c50513          	addi	a0,a0,-500 # 80025170 <str.1>

000000008000136c <.LBB0_44>:
    8000136c:	00024617          	auipc	a2,0x24
    80001370:	e3c60613          	addi	a2,a2,-452 # 800251a8 <.L__unnamed_9>
    80001374:	45f1                	li	a1,28
    80001376:	00021097          	auipc	ra,0x21
    8000137a:	d86080e7          	jalr	-634(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel7process3elf4exec17h6cecf459cb29fe26E:

0000000080001380 <_ZN6kernel7process3elf4exec17h6cecf459cb29fe26E>:


pub unsafe fn exec(
    80001380:	9f010113          	addi	sp,sp,-1552
    80001384:	60113423          	sd	ra,1544(sp)
    80001388:	28e13023          	sd	a4,640(sp)
    8000138c:	28d13423          	sd	a3,648(sp)
    80001390:	28c13823          	sd	a2,656(sp)
    80001394:	28b13c23          	sd	a1,664(sp)
    80001398:	2aa13023          	sd	a0,672(sp)
    8000139c:	54b13823          	sd	a1,1360(sp)
    800013a0:	54c13c23          	sd	a2,1368(sp)
    800013a4:	56d13023          	sd	a3,1376(sp)
    800013a8:	56e13423          	sd	a4,1384(sp)
    800013ac:	4501                	li	a0,0
    path: &str, 
    argv: &[*const u8]
) -> Result<usize, &'static str> {
    let elf = Box::<ElfHeader>::new_zeroed().assume_init();
    800013ae:	54a107a3          	sb	a0,1359(sp)
    800013b2:	54a10723          	sb	a0,1358(sp)
    800013b6:	0001a097          	auipc	ra,0x1a
    800013ba:	364080e7          	jalr	868(ra) # 8001b71a <_ZN5alloc5boxed12Box$LT$T$GT$10new_zeroed17he41f9c30769fb517E>
    800013be:	2aa13423          	sd	a0,680(sp)
    800013c2:	a009                	j	800013c4 <_ZN6kernel7process3elf4exec17h6cecf459cb29fe26E+0x44>
    800013c4:	2a813503          	ld	a0,680(sp)
    800013c8:	0001b097          	auipc	ra,0x1b
    800013cc:	f00080e7          	jalr	-256(ra) # 8001c2c8 <_ZN5alloc5boxed60Box$LT$core..mem..maybe_uninit..MaybeUninit$LT$T$GT$$C$A$GT$11assume_init17h4ed953d8735ade7eE>
    800013d0:	2aa13823          	sd	a0,688(sp)
    800013d4:	a009                	j	800013d6 <_ZN6kernel7process3elf4exec17h6cecf459cb29fe26E+0x56>
    let ph = Box::<ProgHeader>::new_zeroed().assume_init();
    800013d6:	0001a097          	auipc	ra,0x1a
    800013da:	314080e7          	jalr	788(ra) # 8001b6ea <_ZN5alloc5boxed12Box$LT$T$GT$10new_zeroed17hb9a4ac65c8961d16E>
    800013de:	26a13c23          	sd	a0,632(sp)
    800013e2:	a009                	j	800013e4 <_ZN6kernel7process3elf4exec17h6cecf459cb29fe26E+0x64>
    800013e4:	27813503          	ld	a0,632(sp)
    800013e8:	0001b097          	auipc	ra,0x1b
    800013ec:	f0a080e7          	jalr	-246(ra) # 8001c2f2 <_ZN5alloc5boxed60Box$LT$core..mem..maybe_uninit..MaybeUninit$LT$T$GT$$C$A$GT$11assume_init17hef567e32e2b3ffa4E>
    800013f0:	2aa13c23          	sd	a0,696(sp)
    800013f4:	a009                	j	800013f6 <_ZN6kernel7process3elf4exec17h6cecf459cb29fe26E+0x76>
    800013f6:	4581                	li	a1,0
    // let mut page_table: *mut PageTable;
    let mut size = 0;
    800013f8:	2cb13023          	sd	a1,704(sp)
    800013fc:	0d88                	addi	a0,sp,720
    800013fe:	10000613          	li	a2,256
    let p: &mut task_struct;
    let mut sp: usize;
    let stack_base: usize;
    let mut user_stack: [usize; MAXARG] = [0;MAXARG];
    80001402:	00024097          	auipc	ra,0x24
    80001406:	c8a080e7          	jalr	-886(ra) # 8002508c <memset>

000000008000140a <.LBB1_209>:
    let inode: Inode;

    LOG.begin_op();
    8000140a:	00058517          	auipc	a0,0x58
    8000140e:	25e50513          	addi	a0,a0,606 # 80059668 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    80001412:	00007097          	auipc	ra,0x7
    80001416:	7ea080e7          	jalr	2026(ra) # 80008bfc <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$8begin_op17he5b49a48c716e372E>
    8000141a:	a009                	j	8000141c <.LBB1_209+0x12>
    8000141c:	29013503          	ld	a0,656(sp)
    80001420:	29813583          	ld	a1,664(sp)
    80001424:	5eb13423          	sd	a1,1512(sp)
    80001428:	5ea13823          	sd	a0,1520(sp)
    #[inline(always)]
    #[allow(unused_attributes)]
    #[rustc_allow_const_fn_unstable(const_fn_transmute)]
    pub const fn as_bytes(&self) -> &[u8] {
        // SAFETY: const sound because we transmute two types with the same layout
        unsafe { mem::transmute(self) }
    8000142c:	5eb13c23          	sd	a1,1528(sp)
    80001430:	60a13023          	sd	a0,1536(sp)

    // Get current inode by path
    inode = ICACHE.namei(path.as_bytes()).ok_or("Fail to find executable file")?;
    80001434:	26b13423          	sd	a1,616(sp)
    80001438:	26a13823          	sd	a0,624(sp)
    8000143c:	a009                	j	8000143e <.LBB1_209+0x34>
    8000143e:	27013683          	ld	a3,624(sp)
    80001442:	26813603          	ld	a2,616(sp)

0000000080001446 <.LBB1_210>:
    80001446:	00058597          	auipc	a1,0x58
    8000144a:	2ca58593          	addi	a1,a1,714 # 80059710 <_ZN6kernel2fs5inode6ICACHE17had1be8942ca79bf1E>
    8000144e:	42010513          	addi	a0,sp,1056
    80001452:	00018097          	auipc	ra,0x18
    80001456:	e6a080e7          	jalr	-406(ra) # 800192bc <_ZN6kernel2fs5inode10InodeCache5namei17hc269c6a9eecf1991E>
    8000145a:	a009                	j	8000145c <.LBB1_211>

000000008000145c <.LBB1_211>:
    8000145c:	00024617          	auipc	a2,0x24
    80001460:	da460613          	addi	a2,a2,-604 # 80025200 <.L__unnamed_10>
    80001464:	40810513          	addi	a0,sp,1032
    80001468:	42010593          	addi	a1,sp,1056
    8000146c:	46f1                	li	a3,28
    8000146e:	0000d097          	auipc	ra,0xd
    80001472:	456080e7          	jalr	1110(ra) # 8000e8c4 <_ZN4core6option15Option$LT$T$GT$5ok_or17hfc73591acc2890d8E>
    80001476:	a009                	j	80001478 <.LBB1_211+0x1c>
    80001478:	1f88                	addi	a0,sp,1008
    8000147a:	40810593          	addi	a1,sp,1032
    8000147e:	0000c097          	auipc	ra,0xc
    80001482:	ca6080e7          	jalr	-858(ra) # 8000d124 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7e17d789c0860991E>
    80001486:	a009                	j	80001488 <.LBB1_211+0x2c>
    80001488:	3f013503          	ld	a0,1008(sp)
    8000148c:	4581                	li	a1,0
    8000148e:	00b50463          	beq	a0,a1,80001496 <.LBB1_211+0x3a>
    80001492:	a009                	j	80001494 <.LBB1_211+0x38>
    80001494:	a089                	j	800014d6 <.LBB1_211+0x7a>
    80001496:	40013583          	ld	a1,1024(sp)
    8000149a:	44b13023          	sd	a1,1088(sp)
    8000149e:	3f813603          	ld	a2,1016(sp)
    800014a2:	42c13c23          	sd	a2,1080(sp)
    800014a6:	3ec13023          	sd	a2,992(sp)
    800014aa:	3eb13423          	sd	a1,1000(sp)
    800014ae:	4505                	li	a0,1
    800014b0:	54a107a3          	sb	a0,1359(sp)
    800014b4:	3cc13823          	sd	a2,976(sp)
    800014b8:	3cb13c23          	sd	a1,984(sp)

    // Get inode data by sleeplock
    let mut inode_guard = inode.lock();
    800014bc:	54a10723          	sb	a0,1358(sp)
    800014c0:	0f88                	addi	a0,sp,976
    800014c2:	0001a097          	auipc	ra,0x1a
    800014c6:	83e080e7          	jalr	-1986(ra) # 8001ad00 <_ZN6kernel2fs5inode5Inode4lock17he70970c593f751adE>
    800014ca:	44a13423          	sd	a0,1096(sp)
    800014ce:	44b13823          	sd	a1,1104(sp)
    800014d2:	a081                	j	80001512 <.LBB1_211+0xb6>
    inode = ICACHE.namei(path.as_bytes()).ok_or("Fail to find executable file")?;
    800014d4:	0000                	unimp
    800014d6:	3f813503          	ld	a0,1016(sp)
    800014da:	40013583          	ld	a1,1024(sp)
    800014de:	56a13823          	sd	a0,1392(sp)
    800014e2:	56b13c23          	sd	a1,1400(sp)
    800014e6:	0000a097          	auipc	ra,0xa
    800014ea:	4de080e7          	jalr	1246(ra) # 8000b9c4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h6f3e3843c20d184aE>
    800014ee:	24a13c23          	sd	a0,600(sp)
    800014f2:	26b13023          	sd	a1,608(sp)
    800014f6:	a009                	j	800014f8 <.LBB1_211+0x9c>
    800014f8:	26013603          	ld	a2,608(sp)
    800014fc:	25813583          	ld	a1,600(sp)
    80001500:	2a013503          	ld	a0,672(sp)
    80001504:	0000c097          	auipc	ra,0xc
    80001508:	b00080e7          	jalr	-1280(ra) # 8000d004 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h4dd43adfe00292f6E>
    8000150c:	a009                	j	8000150e <.LBB1_211+0xb2>
#![no_std]
    8000150e:	3f90006f          	j	80002106 <.LBB1_239+0xe6>
    80001512:	44810513          	addi	a0,sp,1096
           
    // Check ELF header
    if inode_guard.read(
    80001516:	0001c097          	auipc	ra,0x1c
    8000151a:	ffe080e7          	jalr	-2(ra) # 8001d514 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    8000151e:	24a13823          	sd	a0,592(sp)
    80001522:	a009                	j	80001524 <.LBB1_211+0xc8>
        false, 
        &*elf as *const ElfHeader as usize, 
    80001524:	2b013503          	ld	a0,688(sp)
        0, 
        size_of::<ElfHeader>() as u32
    80001528:	24a13423          	sd	a0,584(sp)
    8000152c:	a009                	j	8000152e <.LBB1_211+0xd2>
    if inode_guard.read(
    8000152e:	24813683          	ld	a3,584(sp)
    80001532:	25013583          	ld	a1,592(sp)
    80001536:	45810513          	addi	a0,sp,1112
    8000153a:	4701                	li	a4,0
    8000153c:	04000793          	li	a5,64
    80001540:	863a                	mv	a2,a4
    80001542:	00019097          	auipc	ra,0x19
    80001546:	bce080e7          	jalr	-1074(ra) # 8001a110 <_ZN6kernel2fs5inode9InodeData4read17h2d02dc0e430e4837E>
    8000154a:	a009                	j	8000154c <.LBB1_211+0xf0>
    8000154c:	45810513          	addi	a0,sp,1112
    80001550:	0000b097          	auipc	ra,0xb
    80001554:	784080e7          	jalr	1924(ra) # 8000ccd4 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17he593c7735b347060E>
    80001558:	24a13023          	sd	a0,576(sp)
    8000155c:	a009                	j	8000155e <.LBB1_211+0x102>
    8000155e:	24013503          	ld	a0,576(sp)
    80001562:	4581                	li	a1,0
    80001564:	00b50f63          	beq	a0,a1,80001582 <.LBB1_211+0x126>
    80001568:	a009                	j	8000156a <.LBB1_211+0x10e>
    8000156a:	4501                	li	a0,0
    ).is_err() {
        drop(inode_guard);
    8000156c:	54a10723          	sb	a0,1358(sp)
    80001570:	44813503          	ld	a0,1096(sp)
    80001574:	45013583          	ld	a1,1104(sp)
    80001578:	0001c097          	auipc	ra,0x1c
    8000157c:	93a080e7          	jalr	-1734(ra) # 8001ceb2 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    80001580:	a819                	j	80001596 <.LBB1_212>
        LOG.end_op();
        return Err("exec: Fail to read elf header.")
    }

    // println!("[Debug] 检查魔数");
    if elf.magic != ELF_MAGIC {
    80001582:	2b013503          	ld	a0,688(sp)
    80001586:	4108                	lw	a0,0(a0)
    80001588:	464c45b7          	lui	a1,0x464c4
    8000158c:	57f5859b          	addiw	a1,a1,1407
    80001590:	02b51963          	bne	a0,a1,800015c2 <.LBB1_213+0x16>
    80001594:	a099                	j	800015da <.LBB1_214>

0000000080001596 <.LBB1_212>:
        LOG.end_op();
    80001596:	00058517          	auipc	a0,0x58
    8000159a:	0d250513          	addi	a0,a0,210 # 80059668 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    8000159e:	00008097          	auipc	ra,0x8
    800015a2:	c44080e7          	jalr	-956(ra) # 800091e2 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>
    800015a6:	a009                	j	800015a8 <.LBB1_212+0x12>
        return Err("exec: Fail to read elf header.")
    800015a8:	2a013583          	ld	a1,672(sp)

00000000800015ac <.LBB1_213>:
    800015ac:	00024517          	auipc	a0,0x24
    800015b0:	c7050513          	addi	a0,a0,-912 # 8002521c <.L__unnamed_11>
    800015b4:	e588                	sd	a0,8(a1)
    800015b6:	4579                	li	a0,30
    800015b8:	e988                	sd	a0,16(a1)
    800015ba:	4505                	li	a0,1
    800015bc:	e188                	sd	a0,0(a1)
    800015be:	3330006f          	j	800020f0 <.LBB1_239+0xd0>
    800015c2:	4501                	li	a0,0
        // println!("[Debug] 魔数错误, 为0x{:x}, 应为0x{:x}", elf.magic, ELF_MAGIC);
        drop(inode_guard);
    800015c4:	54a10723          	sb	a0,1358(sp)
    800015c8:	44813503          	ld	a0,1096(sp)
    800015cc:	45013583          	ld	a1,1104(sp)
    800015d0:	0001c097          	auipc	ra,0x1c
    800015d4:	8e2080e7          	jalr	-1822(ra) # 8001ceb2 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    800015d8:	a821                	j	800015f0 <.LBB1_215>

00000000800015da <.LBB1_214>:
        LOG.end_op();
        return Err("exec: Elf magic number is wrong.")
    }

    let my_proc = CPU_MANAGER.myproc().unwrap();
    800015da:	00063517          	auipc	a0,0x63
    800015de:	b6650513          	addi	a0,a0,-1178 # 80064140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    800015e2:	00010097          	auipc	ra,0x10
    800015e6:	448080e7          	jalr	1096(ra) # 80011a2a <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    800015ea:	22a13c23          	sd	a0,568(sp)
    800015ee:	a805                	j	8000161e <.LBB1_216+0x18>

00000000800015f0 <.LBB1_215>:
        LOG.end_op();
    800015f0:	00058517          	auipc	a0,0x58
    800015f4:	07850513          	addi	a0,a0,120 # 80059668 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    800015f8:	00008097          	auipc	ra,0x8
    800015fc:	bea080e7          	jalr	-1046(ra) # 800091e2 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>
    80001600:	a009                	j	80001602 <.LBB1_215+0x12>
        return Err("exec: Elf magic number is wrong.")
    80001602:	2a013583          	ld	a1,672(sp)

0000000080001606 <.LBB1_216>:
    80001606:	00024517          	auipc	a0,0x24
    8000160a:	c5450513          	addi	a0,a0,-940 # 8002525a <.L__unnamed_11+0x3e>
    8000160e:	e588                	sd	a0,8(a1)
    80001610:	02000513          	li	a0,32
    80001614:	e988                	sd	a0,16(a1)
    80001616:	4505                	li	a0,1
    80001618:	e188                	sd	a0,0(a1)
    8000161a:	2d70006f          	j	800020f0 <.LBB1_239+0xd0>
    let my_proc = CPU_MANAGER.myproc().unwrap();
    8000161e:	23813503          	ld	a0,568(sp)

0000000080001622 <.LBB1_217>:
    80001622:	00024597          	auipc	a1,0x24
    80001626:	dbe58593          	addi	a1,a1,-578 # 800253e0 <.L__unnamed_13>
    8000162a:	0000d097          	auipc	ra,0xd
    8000162e:	692080e7          	jalr	1682(ra) # 8000ecbc <_ZN4core6option15Option$LT$T$GT$6unwrap17h81f0c84c54a80648E>
    80001632:	85aa                	mv	a1,a0
    80001634:	22b13823          	sd	a1,560(sp)
    80001638:	58a13023          	sd	a0,1408(sp)
    8000163c:	a009                	j	8000163e <.LBB1_217+0x1c>
    let pagetable = my_proc.proc_pagetable();
    8000163e:	23013503          	ld	a0,560(sp)
    80001642:	00014097          	auipc	ra,0x14
    80001646:	742080e7          	jalr	1858(ra) # 80015d84 <_ZN6kernel7process7process11task_struct14proc_pagetable17h014e9ba7c74d9318E>
    8000164a:	85aa                	mv	a1,a0
    8000164c:	22b13423          	sd	a1,552(sp)
    80001650:	58a13423          	sd	a0,1416(sp)
    80001654:	a009                	j	80001656 <.LBB1_217+0x34>
    let page_table = &mut *pagetable;
    80001656:	22813503          	ld	a0,552(sp)
    8000165a:	58a13823          	sd	a0,1424(sp)
            
        
        let ph_size = size_of::<ProgHeader>() as u32;
    8000165e:	a009                	j	80001660 <.LBB1_217+0x3e>
    80001660:	03800513          	li	a0,56
    80001664:	20a13823          	sd	a0,528(sp)
    80001668:	58a12c23          	sw	a0,1432(sp)
        // Load program into memeory. 
        let mut off = elf.phoff;
    8000166c:	2b013503          	ld	a0,688(sp)
    80001670:	710c                	ld	a1,32(a0)
    80001672:	46b13823          	sd	a1,1136(sp)
        for _ in 0..elf.phnum {
    80001676:	03851583          	lh	a1,56(a0)
    8000167a:	4501                	li	a0,0
    8000167c:	46a11c23          	sh	a0,1144(sp)
    80001680:	46b11d23          	sh	a1,1146(sp)
    80001684:	0000a097          	auipc	ra,0xa
    80001688:	322080e7          	jalr	802(ra) # 8000b9a6 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he12a3ecdd35a2d32E>
    8000168c:	20a13c23          	sd	a0,536(sp)
    80001690:	22b13023          	sd	a1,544(sp)
    80001694:	a009                	j	80001696 <.LBB1_217+0x74>
    80001696:	22013503          	ld	a0,544(sp)
    8000169a:	21813583          	ld	a1,536(sp)
    8000169e:	48b11023          	sh	a1,1152(sp)
    800016a2:	48a11123          	sh	a0,1154(sp)
    800016a6:	a009                	j	800016a8 <.LBB1_217+0x86>
    800016a8:	48010513          	addi	a0,sp,1152
    800016ac:	0000a097          	auipc	ra,0xa
    800016b0:	108080e7          	jalr	264(ra) # 8000b7b4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h1063a80d56ceadabE>
    800016b4:	48a11423          	sh	a0,1160(sp)
    800016b8:	48b11523          	sh	a1,1162(sp)
    800016bc:	a009                	j	800016be <.LBB1_217+0x9c>
    800016be:	48815503          	lhu	a0,1160(sp)
    800016c2:	4581                	li	a1,0
    800016c4:	00b50463          	beq	a0,a1,800016cc <.LBB1_217+0xaa>
    800016c8:	a009                	j	800016ca <.LBB1_217+0xa8>
    800016ca:	a831                	j	800016e6 <.LBB1_217+0xc4>
    800016cc:	4501                	li	a0,0
            }
            off += size_of::<ProgHeader>();
        }
        // println!("[Debug] 完成加载程序");

        drop(inode_guard);
    800016ce:	54a10723          	sb	a0,1358(sp)
    800016d2:	44813503          	ld	a0,1096(sp)
    800016d6:	45013583          	ld	a1,1104(sp)
    800016da:	0001b097          	auipc	ra,0x1b
    800016de:	7d8080e7          	jalr	2008(ra) # 8001ceb2 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    800016e2:	ae81                	j	80001a32 <.LBB1_230>
        for _ in 0..elf.phnum {
    800016e4:	0000                	unimp
    800016e6:	48a11503          	lh	a0,1162(sp)
    800016ea:	58a11e23          	sh	a0,1436(sp)
    800016ee:	58a11f23          	sh	a0,1438(sp)
    800016f2:	44810513          	addi	a0,sp,1096
            if inode_guard.read(
    800016f6:	0001c097          	auipc	ra,0x1c
    800016fa:	e1e080e7          	jalr	-482(ra) # 8001d514 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    800016fe:	20a13423          	sd	a0,520(sp)
    80001702:	a009                	j	80001704 <.LBB1_217+0xe2>
                &*ph as *const ProgHeader as usize, 
    80001704:	21013783          	ld	a5,528(sp)
    80001708:	20813583          	ld	a1,520(sp)
    8000170c:	2b813683          	ld	a3,696(sp)
                off as u32, 
    80001710:	47013703          	ld	a4,1136(sp)
    80001714:	49010513          	addi	a0,sp,1168
    80001718:	4601                	li	a2,0
            if inode_guard.read(
    8000171a:	00019097          	auipc	ra,0x19
    8000171e:	9f6080e7          	jalr	-1546(ra) # 8001a110 <_ZN6kernel2fs5inode9InodeData4read17h2d02dc0e430e4837E>
    80001722:	a009                	j	80001724 <.LBB1_217+0x102>
    80001724:	49010513          	addi	a0,sp,1168
    80001728:	0000b097          	auipc	ra,0xb
    8000172c:	48c080e7          	jalr	1164(ra) # 8000cbb4 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h0d49413fcec9dcc1E>
    80001730:	20a13023          	sd	a0,512(sp)
    80001734:	a009                	j	80001736 <.LBB1_217+0x114>
    80001736:	20013503          	ld	a0,512(sp)
    8000173a:	4581                	li	a1,0
    8000173c:	00b50a63          	beq	a0,a1,80001750 <.LBB1_217+0x12e>
    80001740:	a009                	j	80001742 <.LBB1_217+0x120>
                if ph.prog_type != ELF_PROG_LOAD { continue; }
    80001742:	2b813503          	ld	a0,696(sp)
    80001746:	4108                	lw	a0,0(a0)
    80001748:	4585                	li	a1,1
    8000174a:	f4b51fe3          	bne	a0,a1,800016a8 <.LBB1_217+0x86>
    8000174e:	a801                	j	8000175e <.LBB1_217+0x13c>
                drop(page_table);
    80001750:	22813503          	ld	a0,552(sp)
    80001754:	0001b097          	auipc	ra,0x1b
    80001758:	7ee080e7          	jalr	2030(ra) # 8001cf42 <_ZN4core3mem4drop17ha184dbcd1a83d607E>
    8000175c:	acb5                	j	800019d8 <.LBB1_227+0x14>
                if ph.mem_size < ph.file_size {
    8000175e:	2b813583          	ld	a1,696(sp)
    80001762:	7588                	ld	a0,40(a1)
    80001764:	718c                	ld	a1,32(a1)
    80001766:	00b57c63          	bgeu	a0,a1,8000177e <.LBB1_217+0x15c>
    8000176a:	a009                	j	8000176c <.LBB1_217+0x14a>
                    page_table.proc_free_pagetable(size);
    8000176c:	22813503          	ld	a0,552(sp)
    80001770:	2c013583          	ld	a1,704(sp)
    80001774:	00017097          	auipc	ra,0x17
    80001778:	9f4080e7          	jalr	-1548(ra) # 80018168 <_ZN6kernel6memory7mapping10page_table9PageTable19proc_free_pagetable17h67102aea540089c1E>
    8000177c:	a811                	j	80001790 <.LBB1_217+0x16e>
                if ph.vaddr + ph.mem_size < ph.vaddr {
    8000177e:	2b813503          	ld	a0,696(sp)
    80001782:	690c                	ld	a1,16(a0)
    80001784:	7508                	ld	a0,40(a0)
    80001786:	952e                	add	a0,a0,a1
    80001788:	ffaa                	sd	a0,504(sp)
    8000178a:	18b563e3          	bltu	a0,a1,80002110 <.LBB1_240>
    8000178e:	a0a1                	j	800017d6 <.LBB1_219+0x18>
    80001790:	4501                	li	a0,0
                    drop(inode_guard);
    80001792:	54a10723          	sb	a0,1358(sp)
    80001796:	44813503          	ld	a0,1096(sp)
    8000179a:	45013583          	ld	a1,1104(sp)
    8000179e:	0001b097          	auipc	ra,0x1b
    800017a2:	714080e7          	jalr	1812(ra) # 8001ceb2 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    800017a6:	a009                	j	800017a8 <.LBB1_218>

00000000800017a8 <.LBB1_218>:
                    LOG.end_op();
    800017a8:	00058517          	auipc	a0,0x58
    800017ac:	ec050513          	addi	a0,a0,-320 # 80059668 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    800017b0:	00008097          	auipc	ra,0x8
    800017b4:	a32080e7          	jalr	-1486(ra) # 800091e2 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>
    800017b8:	a009                	j	800017ba <.LBB1_218+0x12>
                    return Err("exec: memory size is less than file size.")
    800017ba:	2a013583          	ld	a1,672(sp)

00000000800017be <.LBB1_219>:
    800017be:	00024517          	auipc	a0,0x24
    800017c2:	c3a50513          	addi	a0,a0,-966 # 800253f8 <.L__unnamed_14>
    800017c6:	e588                	sd	a0,8(a1)
    800017c8:	02900513          	li	a0,41
    800017cc:	e988                	sd	a0,16(a1)
    800017ce:	4505                	li	a0,1
    800017d0:	e188                	sd	a0,0(a1)
    800017d2:	11f0006f          	j	800020f0 <.LBB1_239+0xd0>
                if ph.vaddr + ph.mem_size < ph.vaddr {
    800017d6:	757e                	ld	a0,504(sp)
    800017d8:	2b813583          	ld	a1,696(sp)
    800017dc:	698c                	ld	a1,16(a1)
    800017de:	00b57c63          	bgeu	a0,a1,800017f6 <.LBB1_219+0x38>
    800017e2:	a009                	j	800017e4 <.LBB1_219+0x26>
                    page_table.proc_free_pagetable(size);
    800017e4:	22813503          	ld	a0,552(sp)
    800017e8:	2c013583          	ld	a1,704(sp)
    800017ec:	00017097          	auipc	ra,0x17
    800017f0:	97c080e7          	jalr	-1668(ra) # 80018168 <_ZN6kernel6memory7mapping10page_table9PageTable19proc_free_pagetable17h67102aea540089c1E>
    800017f4:	a829                	j	8000180e <.LBB1_219+0x50>
                .uvm_alloc(size, ph.vaddr + ph.mem_size)
    800017f6:	2c013503          	ld	a0,704(sp)
    800017fa:	f7aa                	sd	a0,488(sp)
    800017fc:	2b813503          	ld	a0,696(sp)
    80001800:	690c                	ld	a1,16(a0)
    80001802:	7508                	ld	a0,40(a0)
    80001804:	952e                	add	a0,a0,a1
    80001806:	fbaa                	sd	a0,496(sp)
    80001808:	12b562e3          	bltu	a0,a1,8000212c <.LBB1_242>
    8000180c:	a099                	j	80001852 <.LBB1_221+0x16>
    8000180e:	4501                	li	a0,0
                    drop(inode_guard);
    80001810:	54a10723          	sb	a0,1358(sp)
    80001814:	44813503          	ld	a0,1096(sp)
    80001818:	45013583          	ld	a1,1104(sp)
    8000181c:	0001b097          	auipc	ra,0x1b
    80001820:	696080e7          	jalr	1686(ra) # 8001ceb2 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    80001824:	a009                	j	80001826 <.LBB1_220>

0000000080001826 <.LBB1_220>:
                    LOG.end_op();
    80001826:	00058517          	auipc	a0,0x58
    8000182a:	e4250513          	addi	a0,a0,-446 # 80059668 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    8000182e:	00008097          	auipc	ra,0x8
    80001832:	9b4080e7          	jalr	-1612(ra) # 800091e2 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>
    80001836:	a009                	j	80001838 <.LBB1_220+0x12>
                    return Err("exec: vaddr + mem_size < vaddr")
    80001838:	2a013583          	ld	a1,672(sp)

000000008000183c <.LBB1_221>:
    8000183c:	00024517          	auipc	a0,0x24
    80001840:	c0450513          	addi	a0,a0,-1020 # 80025440 <.L__unnamed_15>
    80001844:	e588                	sd	a0,8(a1)
    80001846:	4579                	li	a0,30
    80001848:	e988                	sd	a0,16(a1)
    8000184a:	4505                	li	a0,1
    8000184c:	e188                	sd	a0,0(a1)
    8000184e:	0a30006f          	j	800020f0 <.LBB1_239+0xd0>
                match page_table
    80001852:	765e                	ld	a2,496(sp)
    80001854:	75be                	ld	a1,488(sp)
    80001856:	22813503          	ld	a0,552(sp)
    8000185a:	00016097          	auipc	ra,0x16
    8000185e:	b92080e7          	jalr	-1134(ra) # 800173ec <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_alloc17h600a2c8e8dc8349aE>
    80001862:	4aa13c23          	sd	a0,1208(sp)
    80001866:	4cb13023          	sd	a1,1216(sp)
    8000186a:	a009                	j	8000186c <.LBB1_221+0x30>
    8000186c:	4b810513          	addi	a0,sp,1208
    80001870:	0000d097          	auipc	ra,0xd
    80001874:	d62080e7          	jalr	-670(ra) # 8000e5d2 <_ZN4core6option15Option$LT$T$GT$4take17h3f0477f04f3bf4c3E>
    80001878:	4aa13423          	sd	a0,1192(sp)
    8000187c:	4ab13823          	sd	a1,1200(sp)
    80001880:	a009                	j	80001882 <.LBB1_221+0x46>
                    None => {
    80001882:	4a813503          	ld	a0,1192(sp)
    80001886:	4581                	li	a1,0
    80001888:	02b50563          	beq	a0,a1,800018b2 <.LBB1_221+0x76>
    8000188c:	a009                	j	8000188e <.LBB1_221+0x52>
                    Some(new_size) => {
    8000188e:	4b013503          	ld	a0,1200(sp)
    80001892:	5aa13023          	sd	a0,1440(sp)
                        size = new_size;
    80001896:	2ca13023          	sd	a0,704(sp)
                if ph.vaddr % PGSIZE != 0 {
    8000189a:	2b813503          	ld	a0,696(sp)
    8000189e:	01055503          	lhu	a0,16(a0)
    800018a2:	6585                	lui	a1,0x1
    800018a4:	35fd                	addiw	a1,a1,-1
    800018a6:	8d6d                	and	a0,a0,a1
    800018a8:	4581                	li	a1,0
    800018aa:	06b50763          	beq	a0,a1,80001918 <.LBB1_223+0x26>
    800018ae:	a8a1                	j	80001906 <.LBB1_223+0x14>
                match page_table
    800018b0:	0000                	unimp
                        page_table.proc_free_pagetable(size);
    800018b2:	22813503          	ld	a0,552(sp)
    800018b6:	2c013583          	ld	a1,704(sp)
    800018ba:	00017097          	auipc	ra,0x17
    800018be:	8ae080e7          	jalr	-1874(ra) # 80018168 <_ZN6kernel6memory7mapping10page_table9PageTable19proc_free_pagetable17h67102aea540089c1E>
    800018c2:	a009                	j	800018c4 <.LBB1_221+0x88>
    800018c4:	4501                	li	a0,0
                        drop(inode_guard);
    800018c6:	54a10723          	sb	a0,1358(sp)
    800018ca:	44813503          	ld	a0,1096(sp)
    800018ce:	45013583          	ld	a1,1104(sp)
    800018d2:	0001b097          	auipc	ra,0x1b
    800018d6:	5e0080e7          	jalr	1504(ra) # 8001ceb2 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    800018da:	a009                	j	800018dc <.LBB1_222>

00000000800018dc <.LBB1_222>:
                        LOG.end_op();
    800018dc:	00058517          	auipc	a0,0x58
    800018e0:	d8c50513          	addi	a0,a0,-628 # 80059668 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    800018e4:	00008097          	auipc	ra,0x8
    800018e8:	8fe080e7          	jalr	-1794(ra) # 800091e2 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>
    800018ec:	a009                	j	800018ee <.LBB1_222+0x12>
                        return Err("exec: Fail to uvmalloc.")
    800018ee:	2a013583          	ld	a1,672(sp)

00000000800018f2 <.LBB1_223>:
    800018f2:	00024517          	auipc	a0,0x24
    800018f6:	bf650513          	addi	a0,a0,-1034 # 800254e8 <.L__unnamed_16>
    800018fa:	e588                	sd	a0,8(a1)
    800018fc:	455d                	li	a0,23
    800018fe:	e988                	sd	a0,16(a1)
    80001900:	4505                	li	a0,1
    80001902:	e188                	sd	a0,0(a1)
    80001904:	a7f5                	j	800020f0 <.LBB1_239+0xd0>
                    page_table.proc_free_pagetable(size);
    80001906:	22813503          	ld	a0,552(sp)
    8000190a:	2c013583          	ld	a1,704(sp)
    8000190e:	00017097          	auipc	ra,0x17
    80001912:	85a080e7          	jalr	-1958(ra) # 80018168 <_ZN6kernel6memory7mapping10page_table9PageTable19proc_free_pagetable17h67102aea540089c1E>
    80001916:	a01d                	j	8000193c <.LBB1_224>
                    ph.vaddr, 
    80001918:	22813503          	ld	a0,552(sp)
    8000191c:	2b813603          	ld	a2,696(sp)
    80001920:	6a0c                	ld	a1,16(a2)
                    ph.off, 
    80001922:	6614                	ld	a3,8(a2)
                    ph.file_size
    80001924:	7218                	ld	a4,32(a2)
    80001926:	44810613          	addi	a2,sp,1096
                if load_seg(
    8000192a:	00000097          	auipc	ra,0x0
    8000192e:	862080e7          	jalr	-1950(ra) # 8000118c <_ZN6kernel7process3elf8load_seg17h8e22665aca7680efE>
    80001932:	4ca13423          	sd	a0,1224(sp)
    80001936:	4cb13823          	sd	a1,1232(sp)
    8000193a:	a03d                	j	80001968 <.LBB1_225+0x16>

000000008000193c <.LBB1_224>:
                    LOG.end_op();
    8000193c:	00058517          	auipc	a0,0x58
    80001940:	d2c50513          	addi	a0,a0,-724 # 80059668 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    80001944:	00008097          	auipc	ra,0x8
    80001948:	89e080e7          	jalr	-1890(ra) # 800091e2 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>
    8000194c:	a009                	j	8000194e <.LBB1_224+0x12>
                    return Err("exec: Programe Header must be integer multiple of PGSIZE. ")
    8000194e:	2a013583          	ld	a1,672(sp)

0000000080001952 <.LBB1_225>:
    80001952:	00024517          	auipc	a0,0x24
    80001956:	b2650513          	addi	a0,a0,-1242 # 80025478 <.L__unnamed_17>
    8000195a:	e588                	sd	a0,8(a1)
    8000195c:	03a00513          	li	a0,58
    80001960:	e988                	sd	a0,16(a1)
    80001962:	4505                	li	a0,1
    80001964:	e188                	sd	a0,0(a1)
    80001966:	a769                	j	800020f0 <.LBB1_239+0xd0>
    80001968:	4c810513          	addi	a0,sp,1224
                if load_seg(
    8000196c:	0000b097          	auipc	ra,0xb
    80001970:	34a080e7          	jalr	842(ra) # 8000ccb6 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h304118d236359d80E>
    80001974:	f3aa                	sd	a0,480(sp)
    80001976:	a009                	j	80001978 <.LBB1_225+0x26>
    80001978:	751e                	ld	a0,480(sp)
    8000197a:	4581                	li	a1,0
    8000197c:	00b50c63          	beq	a0,a1,80001994 <.LBB1_225+0x42>
    80001980:	a009                	j	80001982 <.LBB1_225+0x30>
                    page_table.proc_free_pagetable(size);
    80001982:	22813503          	ld	a0,552(sp)
    80001986:	2c013583          	ld	a1,704(sp)
    8000198a:	00016097          	auipc	ra,0x16
    8000198e:	7de080e7          	jalr	2014(ra) # 80018168 <_ZN6kernel6memory7mapping10page_table9PageTable19proc_free_pagetable17h67102aea540089c1E>
    80001992:	a011                	j	80001996 <.LBB1_225+0x44>
            off += size_of::<ProgHeader>();
    80001994:	a059                	j	80001a1a <.LBB1_229+0x14>
    80001996:	4501                	li	a0,0
                    drop(inode_guard);
    80001998:	54a10723          	sb	a0,1358(sp)
    8000199c:	44813503          	ld	a0,1096(sp)
    800019a0:	45013583          	ld	a1,1104(sp)
    800019a4:	0001b097          	auipc	ra,0x1b
    800019a8:	50e080e7          	jalr	1294(ra) # 8001ceb2 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    800019ac:	a009                	j	800019ae <.LBB1_226>

00000000800019ae <.LBB1_226>:
                    LOG.end_op();
    800019ae:	00058517          	auipc	a0,0x58
    800019b2:	cba50513          	addi	a0,a0,-838 # 80059668 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    800019b6:	00008097          	auipc	ra,0x8
    800019ba:	82c080e7          	jalr	-2004(ra) # 800091e2 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>
    800019be:	a009                	j	800019c0 <.LBB1_226+0x12>
                    return Err("exec: Fail to load segment. ")
    800019c0:	2a013583          	ld	a1,672(sp)

00000000800019c4 <.LBB1_227>:
    800019c4:	00024517          	auipc	a0,0x24
    800019c8:	aee50513          	addi	a0,a0,-1298 # 800254b2 <.L__unnamed_18>
    800019cc:	e588                	sd	a0,8(a1)
    800019ce:	4571                	li	a0,28
    800019d0:	e988                	sd	a0,16(a1)
    800019d2:	4505                	li	a0,1
    800019d4:	e188                	sd	a0,0(a1)
    800019d6:	af29                	j	800020f0 <.LBB1_239+0xd0>
    800019d8:	4501                	li	a0,0
                drop(inode_guard);
    800019da:	54a10723          	sb	a0,1358(sp)
    800019de:	44813503          	ld	a0,1096(sp)
    800019e2:	45013583          	ld	a1,1104(sp)
    800019e6:	0001b097          	auipc	ra,0x1b
    800019ea:	4cc080e7          	jalr	1228(ra) # 8001ceb2 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    800019ee:	a009                	j	800019f0 <.LBB1_228>

00000000800019f0 <.LBB1_228>:
                LOG.end_op();
    800019f0:	00058517          	auipc	a0,0x58
    800019f4:	c7850513          	addi	a0,a0,-904 # 80059668 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    800019f8:	00007097          	auipc	ra,0x7
    800019fc:	7ea080e7          	jalr	2026(ra) # 800091e2 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>
    80001a00:	a009                	j	80001a02 <.LBB1_228+0x12>
                return Err("exec: Fail to read from inode")
    80001a02:	2a013583          	ld	a1,672(sp)

0000000080001a06 <.LBB1_229>:
    80001a06:	00024517          	auipc	a0,0x24
    80001a0a:	af950513          	addi	a0,a0,-1287 # 800254ff <.L__unnamed_19>
    80001a0e:	e588                	sd	a0,8(a1)
    80001a10:	4575                	li	a0,29
    80001a12:	e988                	sd	a0,16(a1)
    80001a14:	4505                	li	a0,1
    80001a16:	e188                	sd	a0,0(a1)
    80001a18:	ade1                	j	800020f0 <.LBB1_239+0xd0>
            off += size_of::<ProgHeader>();
    80001a1a:	47013583          	ld	a1,1136(sp)
    80001a1e:	03858513          	addi	a0,a1,56 # 1038 <.Lline_table_start0+0x343>
    80001a22:	efaa                	sd	a0,472(sp)
    80001a24:	72b56263          	bltu	a0,a1,80002148 <.LBB1_244>
    80001a28:	a009                	j	80001a2a <.LBB1_229+0x24>
    80001a2a:	657e                	ld	a0,472(sp)
    80001a2c:	46a13823          	sd	a0,1136(sp)
        for _ in 0..elf.phnum {
    80001a30:	b9a5                	j	800016a8 <.LBB1_217+0x86>

0000000080001a32 <.LBB1_230>:
        LOG.end_op();
    80001a32:	00058517          	auipc	a0,0x58
    80001a36:	c3650513          	addi	a0,a0,-970 # 80059668 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    80001a3a:	00007097          	auipc	ra,0x7
    80001a3e:	7a8080e7          	jalr	1960(ra) # 800091e2 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>
    80001a42:	a009                	j	80001a44 <.LBB1_231>

0000000080001a44 <.LBB1_231>:

        p = CPU_MANAGER.myproc().unwrap();
    80001a44:	00062517          	auipc	a0,0x62
    80001a48:	6fc50513          	addi	a0,a0,1788 # 80064140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    80001a4c:	00010097          	auipc	ra,0x10
    80001a50:	fde080e7          	jalr	-34(ra) # 80011a2a <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    80001a54:	ebaa                	sd	a0,464(sp)
    80001a56:	a009                	j	80001a58 <.LBB1_231+0x14>
    80001a58:	655e                	ld	a0,464(sp)

0000000080001a5a <.LBB1_232>:
    80001a5a:	00024597          	auipc	a1,0x24
    80001a5e:	ac658593          	addi	a1,a1,-1338 # 80025520 <.L__unnamed_20>
    80001a62:	0000d097          	auipc	ra,0xd
    80001a66:	25a080e7          	jalr	602(ra) # 8000ecbc <_ZN4core6option15Option$LT$T$GT$6unwrap17h81f0c84c54a80648E>
    80001a6a:	e7aa                	sd	a0,456(sp)
    80001a6c:	a009                	j	80001a6e <.LBB1_232+0x14>
    80001a6e:	653e                	ld	a0,456(sp)
    80001a70:	5aa13423          	sd	a0,1448(sp)
        let old_size = p.size;
    80001a74:	6908                	ld	a0,16(a0)
    80001a76:	ff2a                	sd	a0,440(sp)
    80001a78:	5aa13823          	sd	a0,1456(sp)

        // Allocate two pages at the next page boundary
        // Use the second as the user stack. 
        size = page_round_up(size);
    80001a7c:	2c013503          	ld	a0,704(sp)
    80001a80:	0001c097          	auipc	ra,0x1c
    80001a84:	c06080e7          	jalr	-1018(ra) # 8001d686 <_ZN6kernel6memory7mapping13page_round_up17h53b8f5a3d9b0c04fE>
    80001a88:	e3aa                	sd	a0,448(sp)
    80001a8a:	a009                	j	80001a8c <.LBB1_232+0x32>
    80001a8c:	659e                	ld	a1,448(sp)
    80001a8e:	2cb13023          	sd	a1,704(sp)
        match page_table
                .uvm_alloc(size, size + 2 * PGSIZE) {
    80001a92:	852e                	mv	a0,a1
    80001a94:	f72a                	sd	a0,424(sp)
    80001a96:	6509                	lui	a0,0x2
    80001a98:	952e                	add	a0,a0,a1
    80001a9a:	fb2a                	sd	a0,432(sp)
    80001a9c:	6cb56463          	bltu	a0,a1,80002164 <.LBB1_246>
    80001aa0:	a009                	j	80001aa2 <.LBB1_232+0x48>
        match page_table
    80001aa2:	765a                	ld	a2,432(sp)
    80001aa4:	75ba                	ld	a1,424(sp)
    80001aa6:	22813503          	ld	a0,552(sp)
    80001aaa:	00016097          	auipc	ra,0x16
    80001aae:	942080e7          	jalr	-1726(ra) # 800173ec <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_alloc17h600a2c8e8dc8349aE>
    80001ab2:	4ca13c23          	sd	a0,1240(sp)
    80001ab6:	4eb13023          	sd	a1,1248(sp)
    80001aba:	a009                	j	80001abc <.LBB1_232+0x62>
            None => {
    80001abc:	4d813503          	ld	a0,1240(sp)
    80001ac0:	4581                	li	a1,0
    80001ac2:	02b50063          	beq	a0,a1,80001ae2 <.LBB1_232+0x88>
    80001ac6:	a009                	j	80001ac8 <.LBB1_232+0x6e>
                page_table.proc_free_pagetable(size);
                return Err("exec: Fail to uvmalloc")
            }

            Some(new_size) => {
    80001ac8:	4e013503          	ld	a0,1248(sp)
    80001acc:	5aa13c23          	sd	a0,1464(sp)
                size = new_size;
    80001ad0:	2ca13023          	sd	a0,704(sp)
    80001ad4:	75f9                	lui	a1,0xffffe
            }
        }

        page_table.uvm_clear(VirtualAddress::new(size - 2 * PGSIZE));
    80001ad6:	95aa                	add	a1,a1,a0
    80001ad8:	f32e                	sd	a1,416(sp)
    80001ada:	6ab56363          	bltu	a0,a1,80002180 <.LBB1_248>
    80001ade:	a03d                	j	80001b0c <.LBB1_233+0x14>
        match page_table
    80001ae0:	0000                	unimp
                page_table.proc_free_pagetable(size);
    80001ae2:	22813503          	ld	a0,552(sp)
    80001ae6:	2c013583          	ld	a1,704(sp)
    80001aea:	00016097          	auipc	ra,0x16
    80001aee:	67e080e7          	jalr	1662(ra) # 80018168 <_ZN6kernel6memory7mapping10page_table9PageTable19proc_free_pagetable17h67102aea540089c1E>
    80001af2:	a009                	j	80001af4 <.LBB1_232+0x9a>
                return Err("exec: Fail to uvmalloc")
    80001af4:	2a013583          	ld	a1,672(sp)

0000000080001af8 <.LBB1_233>:
    80001af8:	00024517          	auipc	a0,0x24
    80001afc:	d1050513          	addi	a0,a0,-752 # 80025808 <.L__unnamed_21>
    80001b00:	e588                	sd	a0,8(a1)
    80001b02:	4559                	li	a0,22
    80001b04:	e988                	sd	a0,16(a1)
    80001b06:	4505                	li	a0,1
    80001b08:	e188                	sd	a0,0(a1)
    80001b0a:	a3dd                	j	800020f0 <.LBB1_239+0xd0>
        page_table.uvm_clear(VirtualAddress::new(size - 2 * PGSIZE));
    80001b0c:	751a                	ld	a0,416(sp)
    80001b0e:	00010097          	auipc	ra,0x10
    80001b12:	a0a080e7          	jalr	-1526(ra) # 80011518 <_ZN6kernel6memory7address14VirtualAddress3new17h716be423461f1938E>
    80001b16:	ef2a                	sd	a0,408(sp)
    80001b18:	a009                	j	80001b1a <.LBB1_233+0x22>
    80001b1a:	65fa                	ld	a1,408(sp)
    80001b1c:	22813503          	ld	a0,552(sp)
    80001b20:	00016097          	auipc	ra,0x16
    80001b24:	ea2080e7          	jalr	-350(ra) # 800179c2 <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_clear17hb623751aee30bcf2E>
    80001b28:	a009                	j	80001b2a <.LBB1_233+0x32>
        // Get stack top address. 
        sp = size;
    80001b2a:	2c013503          	ld	a0,704(sp)
    80001b2e:	2ca13423          	sd	a0,712(sp)
        // Get stack bottom address. 
        stack_base = sp - PGSIZE;
    80001b32:	80050593          	addi	a1,a0,-2048
    80001b36:	80058593          	addi	a1,a1,-2048 # ffffffffffffd800 <end+0xffffffff7ff99270>
    80001b3a:	eb2e                	sd	a1,400(sp)
    80001b3c:	66b56163          	bltu	a0,a1,8000219e <.LBB1_250>
    80001b40:	a009                	j	80001b42 <.LBB1_233+0x4a>
    80001b42:	655a                	ld	a0,400(sp)
    80001b44:	5ca13023          	sd	a0,1472(sp)
    80001b48:	4501                	li	a0,0

        // Push argument strings, prepare rest of stack in ustack. 
        let mut argc = 0;
    80001b4a:	4ea13423          	sd	a0,1256(sp)
        loop {
    80001b4e:	a009                	j	80001b50 <.LBB1_233+0x58>
            if argv[argc] as usize == 0x0 { break; }
    80001b50:	28013583          	ld	a1,640(sp)
    80001b54:	4e813503          	ld	a0,1256(sp)
    80001b58:	e72a                	sd	a0,392(sp)
    80001b5a:	66b57163          	bgeu	a0,a1,800021bc <.LBB1_251+0x16>
    80001b5e:	a009                	j	80001b60 <.LBB1_233+0x68>
    80001b60:	28813503          	ld	a0,648(sp)
    80001b64:	65ba                	ld	a1,392(sp)
    80001b66:	058e                	slli	a1,a1,0x3
    80001b68:	952e                	add	a0,a0,a1
    80001b6a:	6108                	ld	a0,0(a0)
    80001b6c:	4581                	li	a1,0
    80001b6e:	00b51b63          	bne	a0,a1,80001b84 <.LBB1_233+0x8c>
    80001b72:	a009                	j	80001b74 <.LBB1_233+0x7c>
                    return Err("exec: Fail to copy out.") 
                }
            user_stack[argc] = sp;
            argc += 1;
        }
    user_stack[argc] = 0;
    80001b74:	4e813503          	ld	a0,1256(sp)
    80001b78:	e32a                	sd	a0,384(sp)
    80001b7a:	02000593          	li	a1,32
    80001b7e:	20b56763          	bltu	a0,a1,80001d8c <.LBB1_236+0x3a>
    80001b82:	af35                	j	800022be <.LBB1_265+0x14>
            if argc >= MAXARG {
    80001b84:	4e813503          	ld	a0,1256(sp)
    80001b88:	02000593          	li	a1,32
    80001b8c:	00b56c63          	bltu	a0,a1,80001ba4 <.LBB1_233+0xac>
    80001b90:	a009                	j	80001b92 <.LBB1_233+0x9a>
                page_table.proc_free_pagetable(size);
    80001b92:	22813503          	ld	a0,552(sp)
    80001b96:	2c013583          	ld	a1,704(sp)
    80001b9a:	00016097          	auipc	ra,0x16
    80001b9e:	5ce080e7          	jalr	1486(ra) # 80018168 <_ZN6kernel6memory7mapping10page_table9PageTable19proc_free_pagetable17h67102aea540089c1E>
    80001ba2:	a809                	j	80001bb4 <.LBB1_233+0xbc>
            sp -= str_len(argv[argc]) + 1;
    80001ba4:	28013583          	ld	a1,640(sp)
    80001ba8:	4e813503          	ld	a0,1256(sp)
    80001bac:	feaa                	sd	a0,376(sp)
    80001bae:	02b56063          	bltu	a0,a1,80001bce <.LBB1_234+0x16>
    80001bb2:	a50d                	j	800021d4 <.LBB1_252+0x12>
                return Err("exec: argc is more than MAXARG. ")
    80001bb4:	2a013583          	ld	a1,672(sp)

0000000080001bb8 <.LBB1_234>:
    80001bb8:	00023517          	auipc	a0,0x23
    80001bbc:	7a250513          	addi	a0,a0,1954 # 8002535a <.L__unnamed_11+0x13e>
    80001bc0:	e588                	sd	a0,8(a1)
    80001bc2:	02000513          	li	a0,32
    80001bc6:	e988                	sd	a0,16(a1)
    80001bc8:	4505                	li	a0,1
    80001bca:	e188                	sd	a0,0(a1)
    80001bcc:	a315                	j	800020f0 <.LBB1_239+0xd0>
            sp -= str_len(argv[argc]) + 1;
    80001bce:	28813503          	ld	a0,648(sp)
    80001bd2:	75f6                	ld	a1,376(sp)
    80001bd4:	058e                	slli	a1,a1,0x3
    80001bd6:	952e                	add	a0,a0,a1
    80001bd8:	6108                	ld	a0,0(a0)
    80001bda:	00006097          	auipc	ra,0x6
    80001bde:	cec080e7          	jalr	-788(ra) # 800078c6 <_ZN6kernel4misc7str_len17h64928e428ab71413E>
    80001be2:	faaa                	sd	a0,368(sp)
    80001be4:	a009                	j	80001be6 <.LBB1_234+0x2e>
    80001be6:	75d6                	ld	a1,368(sp)
    80001be8:	00158513          	addi	a0,a1,1
    80001bec:	f6aa                	sd	a0,360(sp)
    80001bee:	5eb56f63          	bltu	a0,a1,800021ec <.LBB1_254>
    80001bf2:	a009                	j	80001bf4 <.LBB1_234+0x3c>
    80001bf4:	75b6                	ld	a1,360(sp)
    80001bf6:	2c813503          	ld	a0,712(sp)
    80001bfa:	40b505b3          	sub	a1,a0,a1
    80001bfe:	f2ae                	sd	a1,352(sp)
    80001c00:	60b56463          	bltu	a0,a1,80002208 <.LBB1_256>
    80001c04:	a009                	j	80001c06 <.LBB1_234+0x4e>
    80001c06:	7516                	ld	a0,352(sp)
    80001c08:	2ca13423          	sd	a0,712(sp)
            sp = align_sp(sp);
    80001c0c:	00000097          	auipc	ra,0x0
    80001c10:	796080e7          	jalr	1942(ra) # 800023a2 <_ZN6kernel7process3elf8align_sp17h0cb3435f5c58b65bE>
    80001c14:	eeaa                	sd	a0,344(sp)
    80001c16:	a009                	j	80001c18 <.LBB1_234+0x60>
    80001c18:	6576                	ld	a0,344(sp)
    80001c1a:	65da                	ld	a1,400(sp)
    80001c1c:	2ca13423          	sd	a0,712(sp)
            if sp < stack_base {
    80001c20:	00b57a63          	bgeu	a0,a1,80001c34 <.LBB1_234+0x7c>
    80001c24:	a009                	j	80001c26 <.LBB1_234+0x6e>
                drop(page_table);
    80001c26:	22813503          	ld	a0,552(sp)
    80001c2a:	0001b097          	auipc	ra,0x1b
    80001c2e:	318080e7          	jalr	792(ra) # 8001cf42 <_ZN4core3mem4drop17ha184dbcd1a83d607E>
    80001c32:	a821                	j	80001c4a <.LBB1_234+0x92>
                    sp, 
    80001c34:	28013583          	ld	a1,640(sp)
    80001c38:	2c813503          	ld	a0,712(sp)
                        argv[argc] as *mut u8, 
    80001c3c:	e6aa                	sd	a0,328(sp)
    80001c3e:	4e813503          	ld	a0,1256(sp)
    80001c42:	eaaa                	sd	a0,336(sp)
    80001c44:	00b56f63          	bltu	a0,a1,80001c62 <.LBB1_235+0x14>
    80001c48:	abf9                	j	80002226 <.LBB1_257+0x16>
                return Err("User Stack Bomb!")
    80001c4a:	2a013583          	ld	a1,672(sp)

0000000080001c4e <.LBB1_235>:
    80001c4e:	00024517          	auipc	a0,0x24
    80001c52:	9f250513          	addi	a0,a0,-1550 # 80025640 <.L__unnamed_35+0x78>
    80001c56:	e588                	sd	a0,8(a1)
    80001c58:	4541                	li	a0,16
    80001c5a:	e988                	sd	a0,16(a1)
    80001c5c:	4505                	li	a0,1
    80001c5e:	e188                	sd	a0,0(a1)
    80001c60:	a941                	j	800020f0 <.LBB1_239+0xd0>
                        argv[argc] as *mut u8, 
    80001c62:	28013583          	ld	a1,640(sp)
    80001c66:	28813503          	ld	a0,648(sp)
    80001c6a:	6656                	ld	a2,336(sp)
    80001c6c:	060e                	slli	a2,a2,0x3
    80001c6e:	9532                	add	a0,a0,a2
    80001c70:	6108                	ld	a0,0(a0)
                        str_len(argv[argc])
    80001c72:	fe2a                	sd	a0,312(sp)
    80001c74:	4e813503          	ld	a0,1256(sp)
    80001c78:	e2aa                	sd	a0,320(sp)
    80001c7a:	5cb57263          	bgeu	a0,a1,8000223e <.LBB1_258+0x12>
    80001c7e:	a009                	j	80001c80 <.LBB1_235+0x32>
    80001c80:	28813503          	ld	a0,648(sp)
    80001c84:	6596                	ld	a1,320(sp)
    80001c86:	058e                	slli	a1,a1,0x3
    80001c88:	952e                	add	a0,a0,a1
    80001c8a:	6108                	ld	a0,0(a0)
    80001c8c:	00006097          	auipc	ra,0x6
    80001c90:	c3a080e7          	jalr	-966(ra) # 800078c6 <_ZN6kernel4misc7str_len17h64928e428ab71413E>
    80001c94:	fa2a                	sd	a0,304(sp)
    80001c96:	a009                	j	80001c98 <.LBB1_235+0x4a>
                    core::slice::from_raw_parts_mut(
    80001c98:	75d2                	ld	a1,304(sp)
    80001c9a:	7572                	ld	a0,312(sp)
    80001c9c:	00003097          	auipc	ra,0x3
    80001ca0:	71c080e7          	jalr	1820(ra) # 800053b8 <_ZN4core5slice3raw18from_raw_parts_mut17h0bc9e5c0c3217bc8E>
    80001ca4:	f22a                	sd	a0,288(sp)
    80001ca6:	f62e                	sd	a1,296(sp)
    80001ca8:	a009                	j	80001caa <.LBB1_235+0x5c>
    80001caa:	75b2                	ld	a1,296(sp)
    80001cac:	7512                	ld	a0,288(sp)
    80001cae:	0001e097          	auipc	ra,0x1e
    80001cb2:	808080e7          	jalr	-2040(ra) # 8001f4b6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hf7620495824cfb20E>
    80001cb6:	ee2a                	sd	a0,280(sp)
    80001cb8:	a009                	j	80001cba <.LBB1_235+0x6c>
                    str_len(argv[argc]) + 1,
    80001cba:	28013583          	ld	a1,640(sp)
    80001cbe:	4e813503          	ld	a0,1256(sp)
    80001cc2:	ea2a                	sd	a0,272(sp)
    80001cc4:	58b57963          	bgeu	a0,a1,80002256 <.LBB1_259+0x12>
    80001cc8:	a009                	j	80001cca <.LBB1_235+0x7c>
    80001cca:	28813503          	ld	a0,648(sp)
    80001cce:	65d2                	ld	a1,272(sp)
    80001cd0:	058e                	slli	a1,a1,0x3
    80001cd2:	952e                	add	a0,a0,a1
    80001cd4:	6108                	ld	a0,0(a0)
    80001cd6:	00006097          	auipc	ra,0x6
    80001cda:	bf0080e7          	jalr	-1040(ra) # 800078c6 <_ZN6kernel4misc7str_len17h64928e428ab71413E>
    80001cde:	e62a                	sd	a0,264(sp)
    80001ce0:	a009                	j	80001ce2 <.LBB1_235+0x94>
    80001ce2:	65b2                	ld	a1,264(sp)
    80001ce4:	00158513          	addi	a0,a1,1
    80001ce8:	e22a                	sd	a0,256(sp)
    80001cea:	58b56263          	bltu	a0,a1,8000226e <.LBB1_261>
    80001cee:	a009                	j	80001cf0 <.LBB1_235+0xa2>
            if page_table
    80001cf0:	6692                	ld	a3,256(sp)
    80001cf2:	6672                	ld	a2,280(sp)
    80001cf4:	65b6                	ld	a1,328(sp)
    80001cf6:	22813503          	ld	a0,552(sp)
    80001cfa:	00016097          	auipc	ra,0x16
    80001cfe:	d18080e7          	jalr	-744(ra) # 80017a12 <_ZN6kernel6memory7mapping10page_table9PageTable8copy_out17h55d0f27ee3680817E>
    80001d02:	4ea13823          	sd	a0,1264(sp)
    80001d06:	4eb13c23          	sd	a1,1272(sp)
    80001d0a:	a009                	j	80001d0c <.LBB1_235+0xbe>
    80001d0c:	4f010513          	addi	a0,sp,1264
    80001d10:	0000b097          	auipc	ra,0xb
    80001d14:	fa6080e7          	jalr	-90(ra) # 8000ccb6 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h304118d236359d80E>
    80001d18:	fdaa                	sd	a0,248(sp)
    80001d1a:	a009                	j	80001d1c <.LBB1_235+0xce>
    80001d1c:	756e                	ld	a0,248(sp)
    80001d1e:	4581                	li	a1,0
    80001d20:	00b50c63          	beq	a0,a1,80001d38 <.LBB1_235+0xea>
    80001d24:	a009                	j	80001d26 <.LBB1_235+0xd8>
                    page_table.proc_free_pagetable(size);
    80001d26:	22813503          	ld	a0,552(sp)
    80001d2a:	2c013583          	ld	a1,704(sp)
    80001d2e:	00016097          	auipc	ra,0x16
    80001d32:	43a080e7          	jalr	1082(ra) # 80018168 <_ZN6kernel6memory7mapping10page_table9PageTable19proc_free_pagetable17h67102aea540089c1E>
    80001d36:	a821                	j	80001d4e <.LBB1_235+0x100>
            user_stack[argc] = sp;
    80001d38:	2c813503          	ld	a0,712(sp)
    80001d3c:	f5aa                	sd	a0,232(sp)
    80001d3e:	4e813503          	ld	a0,1256(sp)
    80001d42:	f9aa                	sd	a0,240(sp)
    80001d44:	02000593          	li	a1,32
    80001d48:	00b56f63          	bltu	a0,a1,80001d66 <.LBB1_236+0x14>
    80001d4c:	ab3d                	j	8000228a <.LBB1_262+0x14>
                    return Err("exec: Fail to copy out.") 
    80001d4e:	2a013583          	ld	a1,672(sp)

0000000080001d52 <.LBB1_236>:
    80001d52:	00024517          	auipc	a0,0x24
    80001d56:	9ae50513          	addi	a0,a0,-1618 # 80025700 <.L__unnamed_24>
    80001d5a:	e588                	sd	a0,8(a1)
    80001d5c:	455d                	li	a0,23
    80001d5e:	e988                	sd	a0,16(a1)
    80001d60:	4505                	li	a0,1
    80001d62:	e188                	sd	a0,0(a1)
    80001d64:	a671                	j	800020f0 <.LBB1_239+0xd0>
            user_stack[argc] = sp;
    80001d66:	752e                	ld	a0,232(sp)
    80001d68:	75ce                	ld	a1,240(sp)
    80001d6a:	00359613          	slli	a2,a1,0x3
    80001d6e:	0d8c                	addi	a1,sp,720
    80001d70:	95b2                	add	a1,a1,a2
    80001d72:	e188                	sd	a0,0(a1)
            argc += 1;
    80001d74:	4e813583          	ld	a1,1256(sp)
    80001d78:	00158513          	addi	a0,a1,1
    80001d7c:	f1aa                	sd	a0,224(sp)
    80001d7e:	52b56263          	bltu	a0,a1,800022a2 <.LBB1_264>
    80001d82:	a009                	j	80001d84 <.LBB1_236+0x32>
    80001d84:	750e                	ld	a0,224(sp)
    80001d86:	4ea13423          	sd	a0,1256(sp)
        loop {
    80001d8a:	b3d9                	j	80001b50 <.LBB1_233+0x58>
    user_stack[argc] = 0;
    80001d8c:	651a                	ld	a0,384(sp)
    80001d8e:	00351593          	slli	a1,a0,0x3
    80001d92:	0d88                	addi	a0,sp,720
    80001d94:	95aa                	add	a1,a1,a0
    80001d96:	4501                	li	a0,0
    80001d98:	e188                	sd	a0,0(a1)

    // Push the array of argv pointers. 
    sp -= (argc + 1) * size_of::<usize>();
    80001d9a:	4e813583          	ld	a1,1256(sp)
    80001d9e:	00158513          	addi	a0,a1,1
    80001da2:	edaa                	sd	a0,216(sp)
    80001da4:	52b56963          	bltu	a0,a1,800022d6 <.LBB1_267>
    80001da8:	a009                	j	80001daa <.LBB1_236+0x58>
    80001daa:	a009                	j	80001dac <.LBB1_236+0x5a>
    80001dac:	65ee                	ld	a1,216(sp)
    80001dae:	4505                	li	a0,1
    80001db0:	1576                	slli	a0,a0,0x3d
    80001db2:	157d                	addi	a0,a0,-1
    80001db4:	8d6d                	and	a0,a0,a1
    80001db6:	00359613          	slli	a2,a1,0x3
    80001dba:	e9b2                	sd	a2,208(sp)
    80001dbc:	52b51b63          	bne	a0,a1,800022f2 <.LBB1_269>
    80001dc0:	a009                	j	80001dc2 <.LBB1_236+0x70>
    80001dc2:	65ce                	ld	a1,208(sp)
    80001dc4:	2c813503          	ld	a0,712(sp)
    80001dc8:	40b505b3          	sub	a1,a0,a1
    80001dcc:	e5ae                	sd	a1,200(sp)
    80001dce:	54b56163          	bltu	a0,a1,80002310 <.LBB1_271>
    80001dd2:	a009                	j	80001dd4 <.LBB1_236+0x82>
    80001dd4:	652e                	ld	a0,200(sp)
    80001dd6:	2ca13423          	sd	a0,712(sp)
    sp = align_sp(sp);
    80001dda:	00000097          	auipc	ra,0x0
    80001dde:	5c8080e7          	jalr	1480(ra) # 800023a2 <_ZN6kernel7process3elf8align_sp17h0cb3435f5c58b65bE>
    80001de2:	e1aa                	sd	a0,192(sp)
    80001de4:	a009                	j	80001de6 <.LBB1_236+0x94>
    80001de6:	650e                	ld	a0,192(sp)
    80001de8:	65da                	ld	a1,400(sp)
    80001dea:	2ca13423          	sd	a0,712(sp)
    if sp < stack_base {
    80001dee:	00b57c63          	bgeu	a0,a1,80001e06 <.LBB1_237+0x12>
    80001df2:	a009                	j	80001df4 <.LBB1_237>

0000000080001df4 <.LBB1_237>:
        LOG.end_op();
    80001df4:	00058517          	auipc	a0,0x58
    80001df8:	87450513          	addi	a0,a0,-1932 # 80059668 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    80001dfc:	00007097          	auipc	ra,0x7
    80001e00:	3e6080e7          	jalr	998(ra) # 800091e2 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>
    80001e04:	a011                	j	80001e08 <.LBB1_237+0x14>
    if sp < stack_base {
    80001e06:	a819                	j	80001e1c <.LBB1_237+0x28>
        page_table.proc_free_pagetable(size);
    80001e08:	22813503          	ld	a0,552(sp)
    80001e0c:	2c013583          	ld	a1,704(sp)
    80001e10:	00016097          	auipc	ra,0x16
    80001e14:	358080e7          	jalr	856(ra) # 80018168 <_ZN6kernel6memory7mapping10page_table9PageTable19proc_free_pagetable17h67102aea540089c1E>
    80001e18:	a009                	j	80001e1a <.LBB1_237+0x26>
    if sp < stack_base {
    80001e1a:	a009                	j	80001e1c <.LBB1_237+0x28>
    }

    if page_table
    .copy_out(
        sp, 
    80001e1c:	2c813503          	ld	a0,712(sp)
        core::slice::from_raw_parts_mut(
            user_stack.as_mut_ptr() as *mut u8, 
    80001e20:	f92a                	sd	a0,176(sp)
    80001e22:	0d88                	addi	a0,sp,720
    80001e24:	02000593          	li	a1,32
    80001e28:	0001d097          	auipc	ra,0x1d
    80001e2c:	600080e7          	jalr	1536(ra) # 8001f428 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17he2d11453020d912aE>
    80001e30:	fd2a                	sd	a0,184(sp)
    80001e32:	a009                	j	80001e34 <.LBB1_237+0x40>
    80001e34:	756a                	ld	a0,184(sp)
            (argc + 1)*size_of::<usize>()
    80001e36:	f12a                	sd	a0,160(sp)
    80001e38:	4e813583          	ld	a1,1256(sp)
    80001e3c:	00158513          	addi	a0,a1,1
    80001e40:	f52a                	sd	a0,168(sp)
    80001e42:	4eb56663          	bltu	a0,a1,8000232e <.LBB1_273>
    80001e46:	a009                	j	80001e48 <.LBB1_237+0x54>
    80001e48:	a009                	j	80001e4a <.LBB1_237+0x56>
    80001e4a:	75aa                	ld	a1,168(sp)
    80001e4c:	4505                	li	a0,1
    80001e4e:	1576                	slli	a0,a0,0x3d
    80001e50:	157d                	addi	a0,a0,-1
    80001e52:	8d6d                	and	a0,a0,a1
    80001e54:	00359613          	slli	a2,a1,0x3
    80001e58:	ed32                	sd	a2,152(sp)
    80001e5a:	4eb51863          	bne	a0,a1,8000234a <.LBB1_275>
    80001e5e:	a009                	j	80001e60 <.LBB1_237+0x6c>
        core::slice::from_raw_parts_mut(
    80001e60:	65ea                	ld	a1,152(sp)
    80001e62:	750a                	ld	a0,160(sp)
    80001e64:	00003097          	auipc	ra,0x3
    80001e68:	554080e7          	jalr	1364(ra) # 800053b8 <_ZN4core5slice3raw18from_raw_parts_mut17h0bc9e5c0c3217bc8E>
    80001e6c:	e52a                	sd	a0,136(sp)
    80001e6e:	e92e                	sd	a1,144(sp)
    80001e70:	a009                	j	80001e72 <.LBB1_237+0x7e>
    80001e72:	65ca                	ld	a1,144(sp)
    80001e74:	652a                	ld	a0,136(sp)
    80001e76:	0001d097          	auipc	ra,0x1d
    80001e7a:	640080e7          	jalr	1600(ra) # 8001f4b6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hf7620495824cfb20E>
    80001e7e:	e12a                	sd	a0,128(sp)
    80001e80:	a009                	j	80001e82 <.LBB1_237+0x8e>
        ).as_ptr(),
            (argc + 1)*size_of::<usize>()
    80001e82:	4e813583          	ld	a1,1256(sp)
    80001e86:	00158513          	addi	a0,a1,1
    80001e8a:	fcaa                	sd	a0,120(sp)
    80001e8c:	4cb56e63          	bltu	a0,a1,80002368 <.LBB1_277>
    80001e90:	a009                	j	80001e92 <.LBB1_237+0x9e>
    80001e92:	a009                	j	80001e94 <.LBB1_237+0xa0>
    80001e94:	75e6                	ld	a1,120(sp)
    80001e96:	4505                	li	a0,1
    80001e98:	1576                	slli	a0,a0,0x3d
    80001e9a:	157d                	addi	a0,a0,-1
    80001e9c:	8d6d                	and	a0,a0,a1
    80001e9e:	00359613          	slli	a2,a1,0x3
    80001ea2:	f8b2                	sd	a2,112(sp)
    80001ea4:	4eb51063          	bne	a0,a1,80002384 <.LBB1_279>
    80001ea8:	a009                	j	80001eaa <.LBB1_237+0xb6>
    if page_table
    80001eaa:	76c6                	ld	a3,112(sp)
    80001eac:	660a                	ld	a2,128(sp)
    80001eae:	75ca                	ld	a1,176(sp)
    80001eb0:	22813503          	ld	a0,552(sp)
    80001eb4:	00016097          	auipc	ra,0x16
    80001eb8:	b5e080e7          	jalr	-1186(ra) # 80017a12 <_ZN6kernel6memory7mapping10page_table9PageTable8copy_out17h55d0f27ee3680817E>
    80001ebc:	50a13023          	sd	a0,1280(sp)
    80001ec0:	50b13423          	sd	a1,1288(sp)
    80001ec4:	a009                	j	80001ec6 <.LBB1_237+0xd2>
    80001ec6:	50010513          	addi	a0,sp,1280
    80001eca:	0000b097          	auipc	ra,0xb
    80001ece:	dec080e7          	jalr	-532(ra) # 8000ccb6 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h304118d236359d80E>
    80001ed2:	f4aa                	sd	a0,104(sp)
    80001ed4:	a009                	j	80001ed6 <.LBB1_237+0xe2>
    80001ed6:	7526                	ld	a0,104(sp)
    80001ed8:	4581                	li	a1,0
    80001eda:	00b50c63          	beq	a0,a1,80001ef2 <.LBB1_237+0xfe>
    80001ede:	a009                	j	80001ee0 <.LBB1_237+0xec>
    ).is_err() {
        page_table.proc_free_pagetable(size);
    80001ee0:	22813503          	ld	a0,552(sp)
    80001ee4:	2c013583          	ld	a1,704(sp)
    80001ee8:	00016097          	auipc	ra,0x16
    80001eec:	280080e7          	jalr	640(ra) # 80018168 <_ZN6kernel6memory7mapping10page_table9PageTable19proc_free_pagetable17h67102aea540089c1E>
    80001ef0:	a005                	j	80001f10 <.LBB1_237+0x11c>

    // arguments to user main(argc, argv)
    // argc is returned via the system call return
    // value, which goes in a0. 
    
    let trapframe = &mut *p.trapframe;
    80001ef2:	653e                	ld	a0,456(sp)
    80001ef4:	710c                	ld	a1,32(a0)
    80001ef6:	f0ae                	sd	a1,96(sp)
    80001ef8:	5cb13423          	sd	a1,1480(sp)
    trapframe.a1 = sp;
    80001efc:	2c813503          	ld	a0,712(sp)
    80001f00:	fda8                	sd	a0,120(a1)
    80001f02:	51010513          	addi	a0,sp,1296

    // Save program name for debugging
    // core::ptr::copy(path.as_ptr(), &mut pdata.name as *mut u8, 16);
    let mut exec_name: String = String::new();
    80001f06:	0001c097          	auipc	ra,0x1c
    80001f0a:	38a080e7          	jalr	906(ra) # 8001e290 <_ZN5alloc6string6String3new17h806e7bcacb841554E>
    80001f0e:	a829                	j	80001f28 <.LBB1_238+0x14>
        return Err("exec: Fail to copy out.")
    80001f10:	2a013583          	ld	a1,672(sp)

0000000080001f14 <.LBB1_238>:
    80001f14:	00023517          	auipc	a0,0x23
    80001f18:	7ec50513          	addi	a0,a0,2028 # 80025700 <.L__unnamed_24>
    80001f1c:	e588                	sd	a0,8(a1)
    80001f1e:	455d                	li	a0,23
    80001f20:	e988                	sd	a0,16(a1)
    80001f22:	4505                	li	a0,1
    80001f24:	e188                	sd	a0,0(a1)
    80001f26:	a2e9                	j	800020f0 <.LBB1_239+0xd0>
    for c in path.chars() {
    80001f28:	29013583          	ld	a1,656(sp)
    80001f2c:	29813503          	ld	a0,664(sp)
    80001f30:	00016097          	auipc	ra,0x16
    80001f34:	2ec080e7          	jalr	748(ra) # 8001821c <_ZN4core3str21_$LT$impl$u20$str$GT$5chars17h18a0dd289a8edb0cE>
    80001f38:	e8aa                	sd	a0,80(sp)
    80001f3a:	ecae                	sd	a1,88(sp)
    80001f3c:	a009                	j	80001f3e <.LBB1_238+0x2a>
    80001f3e:	65e6                	ld	a1,88(sp)
    80001f40:	6546                	ld	a0,80(sp)
    80001f42:	0001c097          	auipc	ra,0x1c
    80001f46:	d4e080e7          	jalr	-690(ra) # 8001dc90 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hdbffcc8df8ebe27dE>
    80001f4a:	e0aa                	sd	a0,64(sp)
    80001f4c:	e4ae                	sd	a1,72(sp)
    80001f4e:	a009                	j	80001f50 <.LBB1_238+0x3c>
    80001f50:	6526                	ld	a0,72(sp)
    80001f52:	6586                	ld	a1,64(sp)
    80001f54:	52b13423          	sd	a1,1320(sp)
    80001f58:	52a13823          	sd	a0,1328(sp)
    80001f5c:	a009                	j	80001f5e <.LBB1_238+0x4a>
    80001f5e:	52810513          	addi	a0,sp,1320
    80001f62:	0000b097          	auipc	ra,0xb
    80001f66:	b56080e7          	jalr	-1194(ra) # 8000cab8 <_ZN81_$LT$core..str..iter..Chars$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h562590808242c9ccE>
    80001f6a:	1502                	slli	a0,a0,0x20
    80001f6c:	9101                	srli	a0,a0,0x20
    80001f6e:	52a12e23          	sw	a0,1340(sp)
    80001f72:	a009                	j	80001f74 <.LBB1_238+0x60>
    80001f74:	53c12503          	lw	a0,1340(sp)
    80001f78:	ffef05b7          	lui	a1,0xffef0
    80001f7c:	9d2d                	addw	a0,a0,a1
    80001f7e:	00a035b3          	snez	a1,a0
    80001f82:	4581                	li	a1,0
    80001f84:	00b50463          	beq	a0,a1,80001f8c <.LBB1_238+0x78>
    80001f88:	a009                	j	80001f8a <.LBB1_238+0x76>
    80001f8a:	a819                	j	80001fa0 <.LBB1_238+0x8c>
    80001f8c:	51010513          	addi	a0,sp,1296
        if c != '/' {
            exec_name.push(c);
        }
    }
    core::ptr::copy(exec_name.as_ptr(), &mut p.name as *mut u8, 16);
    80001f90:	0001c097          	auipc	ra,0x1c
    80001f94:	3a6080e7          	jalr	934(ra) # 8001e336 <_ZN65_$LT$alloc..string..String$u20$as$u20$core..ops..deref..Deref$GT$5deref17hb3510aeed9e3d071E>
    80001f98:	f82a                	sd	a0,48(sp)
    80001f9a:	fc2e                	sd	a1,56(sp)
    80001f9c:	a835                	j	80001fd8 <.LBB1_238+0xc4>
    for c in path.chars() {
    80001f9e:	0000                	unimp
    80001fa0:	53c12503          	lw	a0,1340(sp)
    80001fa4:	02051593          	slli	a1,a0,0x20
    80001fa8:	9181                	srli	a1,a1,0x20
    80001faa:	f42e                	sd	a1,40(sp)
    80001fac:	5ca12a23          	sw	a0,1492(sp)
    80001fb0:	5ca12c23          	sw	a0,1496(sp)
    80001fb4:	5ca12e23          	sw	a0,1500(sp)
    80001fb8:	02f00593          	li	a1,47
        if c != '/' {
    80001fbc:	00b50b63          	beq	a0,a1,80001fd2 <.LBB1_238+0xbe>
    80001fc0:	a009                	j	80001fc2 <.LBB1_238+0xae>
            exec_name.push(c);
    80001fc2:	75a2                	ld	a1,40(sp)
    80001fc4:	51010513          	addi	a0,sp,1296
    80001fc8:	0001c097          	auipc	ra,0x1c
    80001fcc:	2ee080e7          	jalr	750(ra) # 8001e2b6 <_ZN5alloc6string6String4push17h2b5e883a1c1e3781E>
    80001fd0:	a011                	j	80001fd4 <.LBB1_238+0xc0>
        if c != '/' {
    80001fd2:	a011                	j	80001fd6 <.LBB1_238+0xc2>
    80001fd4:	a009                	j	80001fd6 <.LBB1_238+0xc2>
    for c in path.chars() {
    80001fd6:	b761                	j	80001f5e <.LBB1_238+0x4a>
    core::ptr::copy(exec_name.as_ptr(), &mut p.name as *mut u8, 16);
    80001fd8:	75e2                	ld	a1,56(sp)
    80001fda:	7542                	ld	a0,48(sp)
    80001fdc:	00016097          	auipc	ra,0x16
    80001fe0:	276080e7          	jalr	630(ra) # 80018252 <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h399b117e49285f4dE>
    80001fe4:	f02a                	sd	a0,32(sp)
    80001fe6:	a009                	j	80001fe8 <.LBB1_238+0xd4>
    80001fe8:	7582                	ld	a1,32(sp)
    80001fea:	653e                	ld	a0,456(sp)
    80001fec:	3f850513          	addi	a0,a0,1016
    80001ff0:	4641                	li	a2,16
    80001ff2:	00023097          	auipc	ra,0x23
    80001ff6:	05e080e7          	jalr	94(ra) # 80025050 <memmove>
    80001ffa:	a009                	j	80001ffc <.LBB1_238+0xe8>

    // Commit to user image.
    let old_pgt = p.pagetable.as_mut().take().unwrap();
    80001ffc:	653e                	ld	a0,456(sp)
    80001ffe:	6d08                	ld	a0,24(a0)
    80002000:	0000b097          	auipc	ra,0xb
    80002004:	ae8080e7          	jalr	-1304(ra) # 8000cae8 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17hfc3d5eeea9dab8e4E>
    80002008:	54a13023          	sd	a0,1344(sp)
    8000200c:	a009                	j	8000200e <.LBB1_238+0xfa>
    8000200e:	54010513          	addi	a0,sp,1344
    80002012:	0000c097          	auipc	ra,0xc
    80002016:	5a6080e7          	jalr	1446(ra) # 8000e5b8 <_ZN4core6option15Option$LT$T$GT$4take17h2bb26f7cfbd48ae3E>
    8000201a:	ec2a                	sd	a0,24(sp)
    8000201c:	a009                	j	8000201e <.LBB1_238+0x10a>
    8000201e:	6562                	ld	a0,24(sp)

0000000080002020 <.LBB1_239>:
    80002020:	00023597          	auipc	a1,0x23
    80002024:	7d058593          	addi	a1,a1,2000 # 800257f0 <.L__unnamed_25>
    80002028:	0000d097          	auipc	ra,0xd
    8000202c:	b18080e7          	jalr	-1256(ra) # 8000eb40 <_ZN4core6option15Option$LT$T$GT$6unwrap17h2b22556a60663957E>
    80002030:	85aa                	mv	a1,a0
    80002032:	e82e                	sd	a1,16(sp)
    80002034:	5ea13023          	sd	a0,1504(sp)
    80002038:	a009                	j	8000203a <.LBB1_239+0x1a>
    old_pgt.proc_free_pagetable(old_size);
    8000203a:	75fa                	ld	a1,440(sp)
    8000203c:	6542                	ld	a0,16(sp)
    8000203e:	00016097          	auipc	ra,0x16
    80002042:	12a080e7          	jalr	298(ra) # 80018168 <_ZN6kernel6memory7mapping10page_table9PageTable19proc_free_pagetable17h67102aea540089c1E>
    80002046:	a009                	j	80002048 <.LBB1_239+0x28>

    p.pagetable = pagetable;
    80002048:	2a013583          	ld	a1,672(sp)
    8000204c:	7606                	ld	a2,96(sp)
    8000204e:	66be                	ld	a3,456(sp)
    80002050:	22813503          	ld	a0,552(sp)
    80002054:	ee88                	sd	a0,24(a3)
    p.size = size;
    80002056:	2c013503          	ld	a0,704(sp)
    8000205a:	ea88                	sd	a0,16(a3)
    // initial program counter = main
    trapframe.epc = elf.entry;
    8000205c:	2b013503          	ld	a0,688(sp)
    80002060:	6d08                	ld	a0,24(a0)
    80002062:	ee08                	sd	a0,24(a2)
    // initial stack pointer
    trapframe.sp = sp;
    80002064:	2c813503          	ld	a0,712(sp)
    80002068:	fa08                	sd	a0,48(a2)

    Ok(argc)
    8000206a:	4e813503          	ld	a0,1256(sp)
    8000206e:	e588                	sd	a0,8(a1)
    80002070:	4501                	li	a0,0
    80002072:	e188                	sd	a0,0(a1)
    80002074:	51010513          	addi	a0,sp,1296
}
    80002078:	00005097          	auipc	ra,0x5
    8000207c:	e34080e7          	jalr	-460(ra) # 80006eac <_ZN4core3ptr42drop_in_place$LT$alloc..string..String$GT$17h586f2f4ef42593a1E>
    80002080:	a009                	j	80002082 <.LBB1_239+0x62>
    80002082:	4501                	li	a0,0
    80002084:	54a10723          	sb	a0,1358(sp)
    80002088:	0f88                	addi	a0,sp,976
    8000208a:	00005097          	auipc	ra,0x5
    8000208e:	e50080e7          	jalr	-432(ra) # 80006eda <_ZN4core3ptr45drop_in_place$LT$kernel..fs..inode..Inode$GT$17h8786fe1a2a287832E>
    80002092:	a009                	j	80002094 <.LBB1_239+0x74>
    80002094:	4501                	li	a0,0
    80002096:	54a107a3          	sb	a0,1359(sp)
    8000209a:	1d28                	addi	a0,sp,696
    8000209c:	00005097          	auipc	ra,0x5
    800020a0:	f62080e7          	jalr	-158(ra) # 80006ffe <_ZN4core3ptr78drop_in_place$LT$alloc..boxed..Box$LT$kernel..process..elf..ProgHeader$GT$$GT$17h18632e5365e45018E>
    800020a4:	a009                	j	800020a6 <.LBB1_239+0x86>
    800020a6:	1d08                	addi	a0,sp,688
    800020a8:	00005097          	auipc	ra,0x5
    800020ac:	f38080e7          	jalr	-200(ra) # 80006fe0 <_ZN4core3ptr77drop_in_place$LT$alloc..boxed..Box$LT$kernel..process..elf..ElfHeader$GT$$GT$17hf970e769dc617072E>
    800020b0:	a025                	j	800020d8 <.LBB1_239+0xb8>
    800020b2:	4501                	li	a0,0
    800020b4:	54a10723          	sb	a0,1358(sp)
    800020b8:	a0b9                	j	80002106 <.LBB1_239+0xe6>
    800020ba:	4501                	li	a0,0
    800020bc:	54a107a3          	sb	a0,1359(sp)
    800020c0:	1d28                	addi	a0,sp,696
    800020c2:	00005097          	auipc	ra,0x5
    800020c6:	f3c080e7          	jalr	-196(ra) # 80006ffe <_ZN4core3ptr78drop_in_place$LT$alloc..boxed..Box$LT$kernel..process..elf..ProgHeader$GT$$GT$17h18632e5365e45018E>
    800020ca:	a009                	j	800020cc <.LBB1_239+0xac>
    800020cc:	1d08                	addi	a0,sp,688
    800020ce:	00005097          	auipc	ra,0x5
    800020d2:	f12080e7          	jalr	-238(ra) # 80006fe0 <_ZN4core3ptr77drop_in_place$LT$alloc..boxed..Box$LT$kernel..process..elf..ElfHeader$GT$$GT$17hf970e769dc617072E>
    800020d6:	a009                	j	800020d8 <.LBB1_239+0xb8>
    800020d8:	60813083          	ld	ra,1544(sp)
    800020dc:	61010113          	addi	sp,sp,1552
    800020e0:	8082                	ret
    800020e2:	44810513          	addi	a0,sp,1096
    800020e6:	00005097          	auipc	ra,0x5
    800020ea:	fc8080e7          	jalr	-56(ra) # 800070ae <_ZN4core3ptr96drop_in_place$LT$kernel..lock..sleeplock..SleepLockGuard$LT$kernel..fs..inode..InodeData$GT$$GT$17h00d5c02cf687ef41E>
    800020ee:	b7d1                	j	800020b2 <.LBB1_239+0x92>
    800020f0:	54e14503          	lbu	a0,1358(sp)
    800020f4:	8905                	andi	a0,a0,1
    800020f6:	f575                	bnez	a0,800020e2 <.LBB1_239+0xc2>
    800020f8:	bf6d                	j	800020b2 <.LBB1_239+0x92>
    800020fa:	0f88                	addi	a0,sp,976
    800020fc:	00005097          	auipc	ra,0x5
    80002100:	dde080e7          	jalr	-546(ra) # 80006eda <_ZN4core3ptr45drop_in_place$LT$kernel..fs..inode..Inode$GT$17h8786fe1a2a287832E>
    80002104:	bf5d                	j	800020ba <.LBB1_239+0x9a>
    80002106:	54f14503          	lbu	a0,1359(sp)
    8000210a:	8905                	andi	a0,a0,1
    8000210c:	f57d                	bnez	a0,800020fa <.LBB1_239+0xda>
    8000210e:	b775                	j	800020ba <.LBB1_239+0x9a>

0000000080002110 <.LBB1_240>:
                if ph.vaddr + ph.mem_size < ph.vaddr {
    80002110:	00023517          	auipc	a0,0x23
    80002114:	06050513          	addi	a0,a0,96 # 80025170 <str.1>

0000000080002118 <.LBB1_241>:
    80002118:	00023617          	auipc	a2,0x23
    8000211c:	31060613          	addi	a2,a2,784 # 80025428 <.L__unnamed_26>
    80002120:	45f1                	li	a1,28
    80002122:	00020097          	auipc	ra,0x20
    80002126:	fda080e7          	jalr	-38(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008000212c <.LBB1_242>:
                .uvm_alloc(size, ph.vaddr + ph.mem_size)
    8000212c:	00023517          	auipc	a0,0x23
    80002130:	04450513          	addi	a0,a0,68 # 80025170 <str.1>

0000000080002134 <.LBB1_243>:
    80002134:	00023617          	auipc	a2,0x23
    80002138:	32c60613          	addi	a2,a2,812 # 80025460 <.L__unnamed_27>
    8000213c:	45f1                	li	a1,28
    8000213e:	00020097          	auipc	ra,0x20
    80002142:	fbe080e7          	jalr	-66(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080002148 <.LBB1_244>:
            off += size_of::<ProgHeader>();
    80002148:	00023517          	auipc	a0,0x23
    8000214c:	02850513          	addi	a0,a0,40 # 80025170 <str.1>

0000000080002150 <.LBB1_245>:
    80002150:	00023617          	auipc	a2,0x23
    80002154:	38060613          	addi	a2,a2,896 # 800254d0 <.L__unnamed_28>
    80002158:	45f1                	li	a1,28
    8000215a:	00020097          	auipc	ra,0x20
    8000215e:	fa2080e7          	jalr	-94(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080002164 <.LBB1_246>:
                .uvm_alloc(size, size + 2 * PGSIZE) {
    80002164:	00023517          	auipc	a0,0x23
    80002168:	00c50513          	addi	a0,a0,12 # 80025170 <str.1>

000000008000216c <.LBB1_247>:
    8000216c:	00023617          	auipc	a2,0x23
    80002170:	3cc60613          	addi	a2,a2,972 # 80025538 <.L__unnamed_29>
    80002174:	45f1                	li	a1,28
    80002176:	00020097          	auipc	ra,0x20
    8000217a:	f86080e7          	jalr	-122(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080002180 <.LBB1_248>:
        page_table.uvm_clear(VirtualAddress::new(size - 2 * PGSIZE));
    80002180:	00023517          	auipc	a0,0x23
    80002184:	f9050513          	addi	a0,a0,-112 # 80025110 <str.0>

0000000080002188 <.LBB1_249>:
    80002188:	00023617          	auipc	a2,0x23
    8000218c:	3c860613          	addi	a2,a2,968 # 80025550 <.L__unnamed_30>
    80002190:	02100593          	li	a1,33
    80002194:	00020097          	auipc	ra,0x20
    80002198:	f68080e7          	jalr	-152(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008000219e <.LBB1_250>:
        stack_base = sp - PGSIZE;
    8000219e:	00023517          	auipc	a0,0x23
    800021a2:	f7250513          	addi	a0,a0,-142 # 80025110 <str.0>

00000000800021a6 <.LBB1_251>:
    800021a6:	00023617          	auipc	a2,0x23
    800021aa:	3c260613          	addi	a2,a2,962 # 80025568 <.L__unnamed_31>
    800021ae:	02100593          	li	a1,33
    800021b2:	00020097          	auipc	ra,0x20
    800021b6:	f4a080e7          	jalr	-182(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    800021ba:	0000                	unimp
            if argv[argc] as usize == 0x0 { break; }
    800021bc:	28013583          	ld	a1,640(sp)
    800021c0:	653a                	ld	a0,392(sp)

00000000800021c2 <.LBB1_252>:
    800021c2:	00023617          	auipc	a2,0x23
    800021c6:	3be60613          	addi	a2,a2,958 # 80025580 <.L__unnamed_32>
    800021ca:	00020097          	auipc	ra,0x20
    800021ce:	f5e080e7          	jalr	-162(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    800021d2:	0000                	unimp
            sp -= str_len(argv[argc]) + 1;
    800021d4:	28013583          	ld	a1,640(sp)
    800021d8:	7576                	ld	a0,376(sp)

00000000800021da <.LBB1_253>:
    800021da:	00023617          	auipc	a2,0x23
    800021de:	3be60613          	addi	a2,a2,958 # 80025598 <.L__unnamed_33>
    800021e2:	00020097          	auipc	ra,0x20
    800021e6:	f46080e7          	jalr	-186(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

00000000800021ec <.LBB1_254>:
    800021ec:	00023517          	auipc	a0,0x23
    800021f0:	f8450513          	addi	a0,a0,-124 # 80025170 <str.1>

00000000800021f4 <.LBB1_255>:
    800021f4:	00023617          	auipc	a2,0x23
    800021f8:	3bc60613          	addi	a2,a2,956 # 800255b0 <.L__unnamed_34>
    800021fc:	45f1                	li	a1,28
    800021fe:	00020097          	auipc	ra,0x20
    80002202:	efe080e7          	jalr	-258(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080002208 <.LBB1_256>:
    80002208:	00023517          	auipc	a0,0x23
    8000220c:	f0850513          	addi	a0,a0,-248 # 80025110 <str.0>

0000000080002210 <.LBB1_257>:
    80002210:	00023617          	auipc	a2,0x23
    80002214:	3b860613          	addi	a2,a2,952 # 800255c8 <.L__unnamed_35>
    80002218:	02100593          	li	a1,33
    8000221c:	00020097          	auipc	ra,0x20
    80002220:	ee0080e7          	jalr	-288(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80002224:	0000                	unimp
                        argv[argc] as *mut u8, 
    80002226:	28013583          	ld	a1,640(sp)
    8000222a:	6556                	ld	a0,336(sp)

000000008000222c <.LBB1_258>:
    8000222c:	00023617          	auipc	a2,0x23
    80002230:	47460613          	addi	a2,a2,1140 # 800256a0 <.L__unnamed_36>
    80002234:	00020097          	auipc	ra,0x20
    80002238:	ef4080e7          	jalr	-268(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    8000223c:	0000                	unimp
                        str_len(argv[argc])
    8000223e:	28013583          	ld	a1,640(sp)
    80002242:	6516                	ld	a0,320(sp)

0000000080002244 <.LBB1_259>:
    80002244:	00023617          	auipc	a2,0x23
    80002248:	47460613          	addi	a2,a2,1140 # 800256b8 <.L__unnamed_37>
    8000224c:	00020097          	auipc	ra,0x20
    80002250:	edc080e7          	jalr	-292(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80002254:	0000                	unimp
                    str_len(argv[argc]) + 1,
    80002256:	28013583          	ld	a1,640(sp)
    8000225a:	6552                	ld	a0,272(sp)

000000008000225c <.LBB1_260>:
    8000225c:	00023617          	auipc	a2,0x23
    80002260:	47460613          	addi	a2,a2,1140 # 800256d0 <.L__unnamed_38>
    80002264:	00020097          	auipc	ra,0x20
    80002268:	ec4080e7          	jalr	-316(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

000000008000226e <.LBB1_261>:
    8000226e:	00023517          	auipc	a0,0x23
    80002272:	f0250513          	addi	a0,a0,-254 # 80025170 <str.1>

0000000080002276 <.LBB1_262>:
    80002276:	00023617          	auipc	a2,0x23
    8000227a:	47260613          	addi	a2,a2,1138 # 800256e8 <.L__unnamed_39>
    8000227e:	45f1                	li	a1,28
    80002280:	00020097          	auipc	ra,0x20
    80002284:	e7c080e7          	jalr	-388(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80002288:	0000                	unimp
            user_stack[argc] = sp;
    8000228a:	754e                	ld	a0,240(sp)

000000008000228c <.LBB1_263>:
    8000228c:	00023617          	auipc	a2,0x23
    80002290:	48c60613          	addi	a2,a2,1164 # 80025718 <.L__unnamed_40>
    80002294:	02000593          	li	a1,32
    80002298:	00020097          	auipc	ra,0x20
    8000229c:	e90080e7          	jalr	-368(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

00000000800022a2 <.LBB1_264>:
            argc += 1;
    800022a2:	00023517          	auipc	a0,0x23
    800022a6:	ece50513          	addi	a0,a0,-306 # 80025170 <str.1>

00000000800022aa <.LBB1_265>:
    800022aa:	00023617          	auipc	a2,0x23
    800022ae:	48660613          	addi	a2,a2,1158 # 80025730 <.L__unnamed_41>
    800022b2:	45f1                	li	a1,28
    800022b4:	00020097          	auipc	ra,0x20
    800022b8:	e48080e7          	jalr	-440(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    800022bc:	0000                	unimp
    user_stack[argc] = 0;
    800022be:	651a                	ld	a0,384(sp)

00000000800022c0 <.LBB1_266>:
    800022c0:	00023617          	auipc	a2,0x23
    800022c4:	48860613          	addi	a2,a2,1160 # 80025748 <.L__unnamed_42>
    800022c8:	02000593          	li	a1,32
    800022cc:	00020097          	auipc	ra,0x20
    800022d0:	e5c080e7          	jalr	-420(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

00000000800022d6 <.LBB1_267>:
    sp -= (argc + 1) * size_of::<usize>();
    800022d6:	00023517          	auipc	a0,0x23
    800022da:	e9a50513          	addi	a0,a0,-358 # 80025170 <str.1>

00000000800022de <.LBB1_268>:
    800022de:	00023617          	auipc	a2,0x23
    800022e2:	48260613          	addi	a2,a2,1154 # 80025760 <.L__unnamed_43>
    800022e6:	45f1                	li	a1,28
    800022e8:	00020097          	auipc	ra,0x20
    800022ec:	e14080e7          	jalr	-492(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

00000000800022f2 <.LBB1_269>:
    800022f2:	00023517          	auipc	a0,0x23
    800022f6:	48e50513          	addi	a0,a0,1166 # 80025780 <str.2>

00000000800022fa <.LBB1_270>:
    800022fa:	00023617          	auipc	a2,0x23
    800022fe:	46660613          	addi	a2,a2,1126 # 80025760 <.L__unnamed_43>
    80002302:	02100593          	li	a1,33
    80002306:	00020097          	auipc	ra,0x20
    8000230a:	df6080e7          	jalr	-522(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080002310 <.LBB1_271>:
    80002310:	00023517          	auipc	a0,0x23
    80002314:	e0050513          	addi	a0,a0,-512 # 80025110 <str.0>

0000000080002318 <.LBB1_272>:
    80002318:	00023617          	auipc	a2,0x23
    8000231c:	49060613          	addi	a2,a2,1168 # 800257a8 <.L__unnamed_44>
    80002320:	02100593          	li	a1,33
    80002324:	00020097          	auipc	ra,0x20
    80002328:	dd8080e7          	jalr	-552(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008000232e <.LBB1_273>:
            (argc + 1)*size_of::<usize>()
    8000232e:	00023517          	auipc	a0,0x23
    80002332:	e4250513          	addi	a0,a0,-446 # 80025170 <str.1>

0000000080002336 <.LBB1_274>:
    80002336:	00023617          	auipc	a2,0x23
    8000233a:	48a60613          	addi	a2,a2,1162 # 800257c0 <.L__unnamed_45>
    8000233e:	45f1                	li	a1,28
    80002340:	00020097          	auipc	ra,0x20
    80002344:	dbc080e7          	jalr	-580(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008000234a <.LBB1_275>:
    8000234a:	00023517          	auipc	a0,0x23
    8000234e:	43650513          	addi	a0,a0,1078 # 80025780 <str.2>

0000000080002352 <.LBB1_276>:
    80002352:	00023617          	auipc	a2,0x23
    80002356:	46e60613          	addi	a2,a2,1134 # 800257c0 <.L__unnamed_45>
    8000235a:	02100593          	li	a1,33
    8000235e:	00020097          	auipc	ra,0x20
    80002362:	d9e080e7          	jalr	-610(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080002368 <.LBB1_277>:
            (argc + 1)*size_of::<usize>()
    80002368:	00023517          	auipc	a0,0x23
    8000236c:	e0850513          	addi	a0,a0,-504 # 80025170 <str.1>

0000000080002370 <.LBB1_278>:
    80002370:	00023617          	auipc	a2,0x23
    80002374:	46860613          	addi	a2,a2,1128 # 800257d8 <.L__unnamed_46>
    80002378:	45f1                	li	a1,28
    8000237a:	00020097          	auipc	ra,0x20
    8000237e:	d82080e7          	jalr	-638(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080002384 <.LBB1_279>:
    80002384:	00023517          	auipc	a0,0x23
    80002388:	3fc50513          	addi	a0,a0,1020 # 80025780 <str.2>

000000008000238c <.LBB1_280>:
    8000238c:	00023617          	auipc	a2,0x23
    80002390:	44c60613          	addi	a2,a2,1100 # 800257d8 <.L__unnamed_46>
    80002394:	02100593          	li	a1,33
    80002398:	00020097          	auipc	ra,0x20
    8000239c:	d64080e7          	jalr	-668(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel7process3elf8align_sp17h0cb3435f5c58b65bE:

00000000800023a2 <_ZN6kernel7process3elf8align_sp17h0cb3435f5c58b65bE>:


#[inline]
fn align_sp(sp: usize) -> usize {
    800023a2:	1141                	addi	sp,sp,-16
    800023a4:	e42a                	sd	a0,8(sp)
    sp - (sp % 16)
    800023a6:	ff057593          	andi	a1,a0,-16
    800023aa:	e02e                	sd	a1,0(sp)
    800023ac:	00b56663          	bltu	a0,a1,800023b8 <.LBB2_3>
    800023b0:	a009                	j	800023b2 <_ZN6kernel7process3elf8align_sp17h0cb3435f5c58b65bE+0x10>
    800023b2:	6502                	ld	a0,0(sp)
    800023b4:	0141                	addi	sp,sp,16
    800023b6:	8082                	ret

00000000800023b8 <.LBB2_3>:
    sp - (sp % 16)
    800023b8:	00023517          	auipc	a0,0x23
    800023bc:	d5850513          	addi	a0,a0,-680 # 80025110 <str.0>

00000000800023c0 <.LBB2_4>:
    800023c0:	00023617          	auipc	a2,0x23
    800023c4:	46060613          	addi	a2,a2,1120 # 80025820 <.L__unnamed_47>
    800023c8:	02100593          	li	a1,33
    800023cc:	00020097          	auipc	ra,0x20
    800023d0:	d30080e7          	jalr	-720(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hf28a3b70ff934ae9E:

00000000800023d6 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hf28a3b70ff934ae9E>:
#[stable(feature = "rust1", since = "1.0.0")]
impl<T, U> Into<U> for T
where
    U: From<T>,
{
    fn into(self) -> U {
    800023d6:	1101                	addi	sp,sp,-32
    800023d8:	ec06                	sd	ra,24(sp)
    800023da:	e82a                	sd	a0,16(sp)
        U::from(self)
    800023dc:	0000d097          	auipc	ra,0xd
    800023e0:	1a2080e7          	jalr	418(ra) # 8000f57e <_ZN98_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$mut$u20$T$GT$$GT$4from17h99a3612f25da96c9E>
    800023e4:	e42a                	sd	a0,8(sp)
    800023e6:	a009                	j	800023e8 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hf28a3b70ff934ae9E+0x12>
    }
    800023e8:	6522                	ld	a0,8(sp)
    800023ea:	60e2                	ld	ra,24(sp)
    800023ec:	6105                	addi	sp,sp,32
    800023ee:	8082                	ret

Disassembly of section .text._ZN5alloc4sync12Arc$LT$T$GT$10from_inner17ha9d20dd6b0e60056E:

00000000800023f0 <_ZN5alloc4sync12Arc$LT$T$GT$10from_inner17ha9d20dd6b0e60056E>:

#[unstable(feature = "dispatch_from_dyn", issue = "none")]
impl<T: ?Sized + Unsize<U>, U: ?Sized> DispatchFromDyn<Arc<U>> for Arc<T> {}

impl<T: ?Sized> Arc<T> {
    fn from_inner(ptr: NonNull<ArcInner<T>>) -> Self {
    800023f0:	1141                	addi	sp,sp,-16
    800023f2:	e42a                	sd	a0,8(sp)
        Self { ptr, phantom: PhantomData }
    800023f4:	e02a                	sd	a0,0(sp)
    }
    800023f6:	0141                	addi	sp,sp,16
    800023f8:	8082                	ret

Disassembly of section .text._ZN5alloc4sync12Arc$LT$T$GT$17get_mut_unchecked17hb9140ecfe8505044E:

00000000800023fa <_ZN5alloc4sync12Arc$LT$T$GT$17get_mut_unchecked17hb9140ecfe8505044E>:
    /// }
    /// assert_eq!(*x, "foo");
    /// ```
    #[inline]
    #[unstable(feature = "get_mut_unchecked", issue = "63292")]
    pub unsafe fn get_mut_unchecked(this: &mut Self) -> &mut T {
    800023fa:	1101                	addi	sp,sp,-32
    800023fc:	ec06                	sd	ra,24(sp)
    800023fe:	e82a                	sd	a0,16(sp)
        // We are careful to *not* create a reference covering the "count" fields, as
        // this would alias with concurrent access to the reference counts (e.g. by `Weak`).
        unsafe { &mut (*this.ptr.as_ptr()).data }
    80002400:	6108                	ld	a0,0(a0)
    80002402:	0000d097          	auipc	ra,0xd
    80002406:	070080e7          	jalr	112(ra) # 8000f472 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17hc25f2e50aadb25dbE>
    8000240a:	e42a                	sd	a0,8(sp)
    8000240c:	a009                	j	8000240e <_ZN5alloc4sync12Arc$LT$T$GT$17get_mut_unchecked17hb9140ecfe8505044E+0x14>
    8000240e:	6522                	ld	a0,8(sp)
    80002410:	0541                	addi	a0,a0,16
    }
    80002412:	60e2                	ld	ra,24(sp)
    80002414:	6105                	addi	sp,sp,32
    80002416:	8082                	ret

Disassembly of section .text._ZN5alloc4sync12Arc$LT$T$GT$3new17h678276cd59118dbbE:

0000000080002418 <_ZN5alloc4sync12Arc$LT$T$GT$3new17h678276cd59118dbbE>:
    pub fn new(data: T) -> Arc<T> {
    80002418:	7175                	addi	sp,sp,-144
    8000241a:	e506                	sd	ra,136(sp)
    8000241c:	ec2a                	sd	a0,24(sp)
    8000241e:	04800513          	li	a0,72
    80002422:	45a1                	li	a1,8
        let x: Box<_> = box ArcInner {
    80002424:	0000a097          	auipc	ra,0xa
    80002428:	948080e7          	jalr	-1720(ra) # 8000bd6c <_ZN5alloc5alloc15exchange_malloc17hc8acd7fb5c1fe184E>
            strong: atomic::AtomicUsize::new(1),
    8000242c:	f02a                	sd	a0,32(sp)
    8000242e:	4505                	li	a0,1
    80002430:	00002097          	auipc	ra,0x2
    80002434:	2f4080e7          	jalr	756(ra) # 80004724 <_ZN4core4sync6atomic11AtomicUsize3new17hb5d2654a6be55e11E>
    80002438:	f8aa                	sd	a0,112(sp)
    8000243a:	f42a                	sd	a0,40(sp)
    8000243c:	a009                	j	8000243e <_ZN5alloc4sync12Arc$LT$T$GT$3new17h678276cd59118dbbE+0x26>
    8000243e:	4505                	li	a0,1
            weak: atomic::AtomicUsize::new(1),
    80002440:	00002097          	auipc	ra,0x2
    80002444:	2e4080e7          	jalr	740(ra) # 80004724 <_ZN4core4sync6atomic11AtomicUsize3new17hb5d2654a6be55e11E>
    80002448:	fcaa                	sd	a0,120(sp)
    8000244a:	f82a                	sd	a0,48(sp)
    8000244c:	a009                	j	8000244e <_ZN5alloc4sync12Arc$LT$T$GT$3new17h678276cd59118dbbE+0x36>
            data,
    8000244e:	7502                	ld	a0,32(sp)
    80002450:	65e2                	ld	a1,24(sp)
    80002452:	7990                	ld	a2,48(a1)
    80002454:	f4b2                	sd	a2,104(sp)
    80002456:	7590                	ld	a2,40(a1)
    80002458:	f0b2                	sd	a2,96(sp)
    8000245a:	7190                	ld	a2,32(a1)
    8000245c:	ecb2                	sd	a2,88(sp)
    8000245e:	6d90                	ld	a2,24(a1)
    80002460:	e8b2                	sd	a2,80(sp)
    80002462:	6990                	ld	a2,16(a1)
    80002464:	e4b2                	sd	a2,72(sp)
    80002466:	6590                	ld	a2,8(a1)
    80002468:	e0b2                	sd	a2,64(sp)
    8000246a:	618c                	ld	a1,0(a1)
    8000246c:	fc2e                	sd	a1,56(sp)
        let x: Box<_> = box ArcInner {
    8000246e:	75a2                	ld	a1,40(sp)
    80002470:	e10c                	sd	a1,0(a0)
    80002472:	75c2                	ld	a1,48(sp)
    80002474:	e50c                	sd	a1,8(a0)
    80002476:	75a6                	ld	a1,104(sp)
    80002478:	e12c                	sd	a1,64(a0)
    8000247a:	7586                	ld	a1,96(sp)
    8000247c:	fd0c                	sd	a1,56(a0)
    8000247e:	65e6                	ld	a1,88(sp)
    80002480:	f90c                	sd	a1,48(a0)
    80002482:	65c6                	ld	a1,80(sp)
    80002484:	f50c                	sd	a1,40(a0)
    80002486:	65a6                	ld	a1,72(sp)
    80002488:	f10c                	sd	a1,32(a0)
    8000248a:	6586                	ld	a1,64(sp)
    8000248c:	ed0c                	sd	a1,24(a0)
    8000248e:	75e2                	ld	a1,56(sp)
    80002490:	e90c                	sd	a1,16(a0)
    80002492:	e12a                	sd	a0,128(sp)
        Self::from_inner(Box::leak(x).into())
    80002494:	0001a097          	auipc	ra,0x1a
    80002498:	c9e080e7          	jalr	-866(ra) # 8001c132 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17ha0a7030531762e6fE>
    8000249c:	e82a                	sd	a0,16(sp)
    8000249e:	a009                	j	800024a0 <_ZN5alloc4sync12Arc$LT$T$GT$3new17h678276cd59118dbbE+0x88>
    800024a0:	6542                	ld	a0,16(sp)
    800024a2:	00000097          	auipc	ra,0x0
    800024a6:	f34080e7          	jalr	-204(ra) # 800023d6 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hf28a3b70ff934ae9E>
    800024aa:	e42a                	sd	a0,8(sp)
    800024ac:	a009                	j	800024ae <_ZN5alloc4sync12Arc$LT$T$GT$3new17h678276cd59118dbbE+0x96>
    800024ae:	6522                	ld	a0,8(sp)
    800024b0:	00000097          	auipc	ra,0x0
    800024b4:	f40080e7          	jalr	-192(ra) # 800023f0 <_ZN5alloc4sync12Arc$LT$T$GT$10from_inner17ha9d20dd6b0e60056E>
    800024b8:	e02a                	sd	a0,0(sp)
    800024ba:	a009                	j	800024bc <_ZN5alloc4sync12Arc$LT$T$GT$3new17h678276cd59118dbbE+0xa4>
    }
    800024bc:	6502                	ld	a0,0(sp)
    800024be:	60aa                	ld	ra,136(sp)
    800024c0:	6149                	addi	sp,sp,144
    800024c2:	8082                	ret

Disassembly of section .text._ZN5alloc4sync12Arc$LT$T$GT$5inner17h9bfe4db1ecae9d98E:

00000000800024c4 <_ZN5alloc4sync12Arc$LT$T$GT$5inner17h9bfe4db1ecae9d98E>:
    fn inner(&self) -> &ArcInner<T> {
    800024c4:	1101                	addi	sp,sp,-32
    800024c6:	ec06                	sd	ra,24(sp)
    800024c8:	e82a                	sd	a0,16(sp)
        unsafe { self.ptr.as_ref() }
    800024ca:	0000d097          	auipc	ra,0xd
    800024ce:	fc0080e7          	jalr	-64(ra) # 8000f48a <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ref17hb658835e636047c4E>
    800024d2:	e42a                	sd	a0,8(sp)
    800024d4:	a009                	j	800024d6 <_ZN5alloc4sync12Arc$LT$T$GT$5inner17h9bfe4db1ecae9d98E+0x12>
    }
    800024d6:	6522                	ld	a0,8(sp)
    800024d8:	60e2                	ld	ra,24(sp)
    800024da:	6105                	addi	sp,sp,32
    800024dc:	8082                	ret

Disassembly of section .text._ZN5alloc4sync12Arc$LT$T$GT$9drop_slow17hcb02a55d90430c0dE:

00000000800024de <_ZN5alloc4sync12Arc$LT$T$GT$9drop_slow17hcb02a55d90430c0dE>:
    unsafe fn drop_slow(&mut self) {
    800024de:	7179                	addi	sp,sp,-48
    800024e0:	f406                	sd	ra,40(sp)
    800024e2:	e42a                	sd	a0,8(sp)
    800024e4:	f02a                	sd	a0,32(sp)
        unsafe { ptr::drop_in_place(Self::get_mut_unchecked(self)) };
    800024e6:	00000097          	auipc	ra,0x0
    800024ea:	f14080e7          	jalr	-236(ra) # 800023fa <_ZN5alloc4sync12Arc$LT$T$GT$17get_mut_unchecked17hb9140ecfe8505044E>
    800024ee:	e82a                	sd	a0,16(sp)
    800024f0:	a009                	j	800024f2 <_ZN5alloc4sync12Arc$LT$T$GT$9drop_slow17hcb02a55d90430c0dE+0x14>
    800024f2:	6542                	ld	a0,16(sp)
    800024f4:	00005097          	auipc	ra,0x5
    800024f8:	9ce080e7          	jalr	-1586(ra) # 80006ec2 <_ZN4core3ptr44drop_in_place$LT$kernel..fs..file..VFile$GT$17h7a3c9775c1583e88E>
    800024fc:	a009                	j	800024fe <_ZN5alloc4sync12Arc$LT$T$GT$9drop_slow17hcb02a55d90430c0dE+0x20>
        drop(Weak { ptr: self.ptr });
    800024fe:	6522                	ld	a0,8(sp)
    80002500:	6108                	ld	a0,0(a0)
    80002502:	ec2a                	sd	a0,24(sp)
    80002504:	0001b097          	auipc	ra,0x1b
    80002508:	9c8080e7          	jalr	-1592(ra) # 8001cecc <_ZN4core3mem4drop17h4200387821e72e60E>
    8000250c:	a009                	j	8000250e <_ZN5alloc4sync12Arc$LT$T$GT$9drop_slow17hcb02a55d90430c0dE+0x30>
    }
    8000250e:	70a2                	ld	ra,40(sp)
    80002510:	6145                	addi	sp,sp,48
    80002512:	8082                	ret

Disassembly of section .text._ZN5alloc4sync13Weak$LT$T$GT$5inner17h5044bfde36c7c45eE:

0000000080002514 <_ZN5alloc4sync13Weak$LT$T$GT$5inner17h5044bfde36c7c45eE>:
    }

    /// Returns `None` when the pointer is dangling and there is no allocated `ArcInner`,
    /// (i.e., when this `Weak` was created by `Weak::new`).
    #[inline]
    fn inner(&self) -> Option<WeakInner<'_>> {
    80002514:	711d                	addi	sp,sp,-96
    80002516:	ec86                	sd	ra,88(sp)
    80002518:	ec2a                	sd	a0,24(sp)
    8000251a:	e4aa                	sd	a0,72(sp)
        if is_dangling(self.ptr.as_ptr()) {
    8000251c:	6108                	ld	a0,0(a0)
    8000251e:	0000d097          	auipc	ra,0xd
    80002522:	f54080e7          	jalr	-172(ra) # 8000f472 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17hc25f2e50aadb25dbE>
    80002526:	f02a                	sd	a0,32(sp)
    80002528:	a009                	j	8000252a <_ZN5alloc4sync13Weak$LT$T$GT$5inner17h5044bfde36c7c45eE+0x16>
    8000252a:	7502                	ld	a0,32(sp)
    8000252c:	0000a097          	auipc	ra,0xa
    80002530:	678080e7          	jalr	1656(ra) # 8000cba4 <_ZN5alloc2rc11is_dangling17hdc2075289302a6eaE>
    80002534:	e82a                	sd	a0,16(sp)
    80002536:	a009                	j	80002538 <_ZN5alloc4sync13Weak$LT$T$GT$5inner17h5044bfde36c7c45eE+0x24>
    80002538:	6542                	ld	a0,16(sp)
    8000253a:	4581                	li	a1,0
    8000253c:	00b50663          	beq	a0,a1,80002548 <_ZN5alloc4sync13Weak$LT$T$GT$5inner17h5044bfde36c7c45eE+0x34>
    80002540:	a009                	j	80002542 <_ZN5alloc4sync13Weak$LT$T$GT$5inner17h5044bfde36c7c45eE+0x2e>
    80002542:	4501                	li	a0,0
            None
    80002544:	f42a                	sd	a0,40(sp)
        if is_dangling(self.ptr.as_ptr()) {
    80002546:	a01d                	j	8000256c <_ZN5alloc4sync13Weak$LT$T$GT$5inner17h5044bfde36c7c45eE+0x58>
        } else {
            // We are careful to *not* create a reference covering the "data" field, as
            // the field may be mutated concurrently (for example, if the last `Arc`
            // is dropped, the data field will be dropped in-place).
            Some(unsafe {
                let ptr = self.ptr.as_ptr();
    80002548:	6562                	ld	a0,24(sp)
    8000254a:	6108                	ld	a0,0(a0)
    8000254c:	0000d097          	auipc	ra,0xd
    80002550:	f26080e7          	jalr	-218(ra) # 8000f472 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17hc25f2e50aadb25dbE>
    80002554:	85aa                	mv	a1,a0
    80002556:	e42e                	sd	a1,8(sp)
    80002558:	e8aa                	sd	a0,80(sp)
    8000255a:	a009                	j	8000255c <_ZN5alloc4sync13Weak$LT$T$GT$5inner17h5044bfde36c7c45eE+0x48>
                WeakInner { strong: &(*ptr).strong, weak: &(*ptr).weak }
    8000255c:	6522                	ld	a0,8(sp)
    8000255e:	00850593          	addi	a1,a0,8
    80002562:	fc2e                	sd	a1,56(sp)
    80002564:	e0aa                	sd	a0,64(sp)
            Some(unsafe {
    80002566:	f42e                	sd	a1,40(sp)
    80002568:	f82a                	sd	a0,48(sp)
        if is_dangling(self.ptr.as_ptr()) {
    8000256a:	a009                	j	8000256c <_ZN5alloc4sync13Weak$LT$T$GT$5inner17h5044bfde36c7c45eE+0x58>
            })
        }
    }
    8000256c:	7522                	ld	a0,40(sp)
    8000256e:	75c2                	ld	a1,48(sp)
    80002570:	60e6                	ld	ra,88(sp)
    80002572:	6125                	addi	sp,sp,96
    80002574:	8082                	ret

Disassembly of section .text._ZN64_$LT$alloc..sync..Arc$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hd600a08a186c4518E:

0000000080002576 <_ZN64_$LT$alloc..sync..Arc$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hd600a08a186c4518E>:
    fn clone(&self) -> Arc<T> {
    80002576:	7139                	addi	sp,sp,-64
    80002578:	fc06                	sd	ra,56(sp)
    8000257a:	e82a                	sd	a0,16(sp)
    8000257c:	f42a                	sd	a0,40(sp)
        let old_size = self.inner().strong.fetch_add(1, Relaxed);
    8000257e:	00000097          	auipc	ra,0x0
    80002582:	f46080e7          	jalr	-186(ra) # 800024c4 <_ZN5alloc4sync12Arc$LT$T$GT$5inner17h9bfe4db1ecae9d98E>
    80002586:	ec2a                	sd	a0,24(sp)
    80002588:	a009                	j	8000258a <_ZN64_$LT$alloc..sync..Arc$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hd600a08a186c4518E+0x14>
    8000258a:	6562                	ld	a0,24(sp)
    8000258c:	4601                	li	a2,0
    8000258e:	02c103a3          	sb	a2,39(sp)
    80002592:	4585                	li	a1,1
    80002594:	00002097          	auipc	ra,0x2
    80002598:	1ac080e7          	jalr	428(ra) # 80004740 <_ZN4core4sync6atomic11AtomicUsize9fetch_add17h9147f412b3f815f9E>
    8000259c:	85aa                	mv	a1,a0
    8000259e:	e42e                	sd	a1,8(sp)
    800025a0:	f82a                	sd	a0,48(sp)
    800025a2:	a009                	j	800025a4 <_ZN64_$LT$alloc..sync..Arc$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hd600a08a186c4518E+0x2e>
    800025a4:	65a2                	ld	a1,8(sp)
    800025a6:	557d                	li	a0,-1
        if old_size > MAX_REFCOUNT {
    800025a8:	00b54563          	blt	a0,a1,800025b2 <_ZN64_$LT$alloc..sync..Arc$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hd600a08a186c4518E+0x3c>
    800025ac:	a009                	j	800025ae <_ZN64_$LT$alloc..sync..Arc$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hd600a08a186c4518E+0x38>
            abort();
    800025ae:	0000                	unimp
    800025b0:	0000                	unimp
        Self::from_inner(self.ptr)
    800025b2:	6542                	ld	a0,16(sp)
    800025b4:	6108                	ld	a0,0(a0)
    800025b6:	00000097          	auipc	ra,0x0
    800025ba:	e3a080e7          	jalr	-454(ra) # 800023f0 <_ZN5alloc4sync12Arc$LT$T$GT$10from_inner17ha9d20dd6b0e60056E>
    800025be:	e02a                	sd	a0,0(sp)
    800025c0:	a009                	j	800025c2 <_ZN64_$LT$alloc..sync..Arc$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hd600a08a186c4518E+0x4c>
    }
    800025c2:	6502                	ld	a0,0(sp)
    800025c4:	70e2                	ld	ra,56(sp)
    800025c6:	6121                	addi	sp,sp,64
    800025c8:	8082                	ret

Disassembly of section .text._ZN69_$LT$alloc..sync..Arc$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h7c280ba665690166E:

00000000800025ca <_ZN69_$LT$alloc..sync..Arc$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h7c280ba665690166E>:
    fn deref(&self) -> &T {
    800025ca:	1101                	addi	sp,sp,-32
    800025cc:	ec06                	sd	ra,24(sp)
    800025ce:	e82a                	sd	a0,16(sp)
        &self.inner().data
    800025d0:	00000097          	auipc	ra,0x0
    800025d4:	ef4080e7          	jalr	-268(ra) # 800024c4 <_ZN5alloc4sync12Arc$LT$T$GT$5inner17h9bfe4db1ecae9d98E>
    800025d8:	e42a                	sd	a0,8(sp)
    800025da:	a009                	j	800025dc <_ZN69_$LT$alloc..sync..Arc$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h7c280ba665690166E+0x12>
    800025dc:	6522                	ld	a0,8(sp)
    800025de:	0541                	addi	a0,a0,16
    }
    800025e0:	60e2                	ld	ra,24(sp)
    800025e2:	6105                	addi	sp,sp,32
    800025e4:	8082                	ret

Disassembly of section .text._ZN63_$LT$u8$u20$as$u20$alloc..vec..spec_from_elem..SpecFromElem$GT$9from_elem17h7bf881e84d821ad0E:

00000000800025e6 <_ZN63_$LT$u8$u20$as$u20$alloc..vec..spec_from_elem..SpecFromElem$GT$9from_elem17h7bf881e84d821ad0E>:
    }
}

impl SpecFromElem for u8 {
    #[inline]
    fn from_elem<A: Allocator>(elem: u8, n: usize, alloc: A) -> Vec<u8, A> {
    800025e6:	7159                	addi	sp,sp,-112
    800025e8:	f486                	sd	ra,104(sp)
    800025ea:	f032                	sd	a2,32(sp)
    800025ec:	f42a                	sd	a0,40(sp)
    800025ee:	0ff5f513          	andi	a0,a1,255
    800025f2:	86ae                	mv	a3,a1
    800025f4:	f836                	sd	a3,48(sp)
    800025f6:	04b10ba3          	sb	a1,87(sp)
    800025fa:	ecb2                	sd	a2,88(sp)
    800025fc:	4581                	li	a1,0
        if elem == 0 {
    800025fe:	00b51b63          	bne	a0,a1,80002614 <_ZN63_$LT$u8$u20$as$u20$alloc..vec..spec_from_elem..SpecFromElem$GT$9from_elem17h7bf881e84d821ad0E+0x2e>
    80002602:	a009                	j	80002604 <_ZN63_$LT$u8$u20$as$u20$alloc..vec..spec_from_elem..SpecFromElem$GT$9from_elem17h7bf881e84d821ad0E+0x1e>
            return Vec { buf: RawVec::with_capacity_zeroed_in(n, alloc), len: n };
    80002604:	7502                	ld	a0,32(sp)
    80002606:	00000097          	auipc	ra,0x0
    8000260a:	64e080e7          	jalr	1614(ra) # 80002c54 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$23with_capacity_zeroed_in17hc0850ff3c2415cf8E>
    8000260e:	e82a                	sd	a0,16(sp)
    80002610:	ec2e                	sd	a1,24(sp)
    80002612:	a801                	j	80002622 <_ZN63_$LT$u8$u20$as$u20$alloc..vec..spec_from_elem..SpecFromElem$GT$9from_elem17h7bf881e84d821ad0E+0x3c>
        }
        unsafe {
            let mut v = Vec::with_capacity_in(n, alloc);
    80002614:	7582                	ld	a1,32(sp)
    80002616:	1828                	addi	a0,sp,56
    80002618:	00014097          	auipc	ra,0x14
    8000261c:	3fa080e7          	jalr	1018(ra) # 80016a12 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$16with_capacity_in17hb324b531b744c1e4E>
    80002620:	a809                	j	80002632 <_ZN63_$LT$u8$u20$as$u20$alloc..vec..spec_from_elem..SpecFromElem$GT$9from_elem17h7bf881e84d821ad0E+0x4c>
            return Vec { buf: RawVec::with_capacity_zeroed_in(n, alloc), len: n };
    80002622:	7502                	ld	a0,32(sp)
    80002624:	75a2                	ld	a1,40(sp)
    80002626:	6662                	ld	a2,24(sp)
    80002628:	66c2                	ld	a3,16(sp)
    8000262a:	e194                	sd	a3,0(a1)
    8000262c:	e590                	sd	a2,8(a1)
    8000262e:	e988                	sd	a0,16(a1)
            ptr::write_bytes(v.as_mut_ptr(), elem, n);
            v.set_len(n);
            v
        }
    }
    80002630:	a83d                	j	8000266e <_ZN63_$LT$u8$u20$as$u20$alloc..vec..spec_from_elem..SpecFromElem$GT$9from_elem17h7bf881e84d821ad0E+0x88>
    80002632:	1828                	addi	a0,sp,56
            ptr::write_bytes(v.as_mut_ptr(), elem, n);
    80002634:	00014097          	auipc	ra,0x14
    80002638:	32a080e7          	jalr	810(ra) # 8001695e <_ZN5alloc3vec16Vec$LT$T$C$A$GT$10as_mut_ptr17h2d512420264161fdE>
    8000263c:	e42a                	sd	a0,8(sp)
    8000263e:	a009                	j	80002640 <_ZN63_$LT$u8$u20$as$u20$alloc..vec..spec_from_elem..SpecFromElem$GT$9from_elem17h7bf881e84d821ad0E+0x5a>
    80002640:	7602                	ld	a2,32(sp)
    80002642:	75c2                	ld	a1,48(sp)
    80002644:	6522                	ld	a0,8(sp)
    80002646:	0001f097          	auipc	ra,0x1f
    8000264a:	370080e7          	jalr	880(ra) # 800219b6 <_ZN4core10intrinsics11write_bytes17hfabd30e5bfcb1b55E>
    8000264e:	a009                	j	80002650 <_ZN63_$LT$u8$u20$as$u20$alloc..vec..spec_from_elem..SpecFromElem$GT$9from_elem17h7bf881e84d821ad0E+0x6a>
            v.set_len(n);
    80002650:	7582                	ld	a1,32(sp)
    80002652:	1828                	addi	a0,sp,56
    80002654:	00014097          	auipc	ra,0x14
    80002658:	4f6080e7          	jalr	1270(ra) # 80016b4a <_ZN5alloc3vec16Vec$LT$T$C$A$GT$7set_len17h69219cf242af5cbaE>
    8000265c:	a009                	j	8000265e <_ZN63_$LT$u8$u20$as$u20$alloc..vec..spec_from_elem..SpecFromElem$GT$9from_elem17h7bf881e84d821ad0E+0x78>
            v
    8000265e:	75a2                	ld	a1,40(sp)
    80002660:	6526                	ld	a0,72(sp)
    80002662:	e988                	sd	a0,16(a1)
    80002664:	6506                	ld	a0,64(sp)
    80002666:	e588                	sd	a0,8(a1)
    80002668:	7562                	ld	a0,56(sp)
    8000266a:	e188                	sd	a0,0(a1)
    }
    8000266c:	a009                	j	8000266e <_ZN63_$LT$u8$u20$as$u20$alloc..vec..spec_from_elem..SpecFromElem$GT$9from_elem17h7bf881e84d821ad0E+0x88>
    8000266e:	70a6                	ld	ra,104(sp)
    80002670:	6165                	addi	sp,sp,112
    80002672:	8082                	ret

Disassembly of section .text._ZN4core9panicking13assert_failed17hb31c8c2a34dfd8a3E:

0000000080002674 <_ZN4core9panicking13assert_failed17hb31c8c2a34dfd8a3E>:

/// Internal function for `assert_eq!` and `assert_ne!` macros
#[cold]
#[track_caller]
#[doc(hidden)]
pub fn assert_failed<T, U>(
    80002674:	715d                	addi	sp,sp,-80
    80002676:	883a                	mv	a6,a4
    80002678:	e42e                	sd	a1,8(sp)
    8000267a:	e832                	sd	a2,16(sp)
    8000267c:	04a107a3          	sb	a0,79(sp)
) -> !
where
    T: fmt::Debug + ?Sized,
    U: fmt::Debug + ?Sized,
{
    assert_failed_inner(kind, &left, &right, args)
    80002680:	628c                	ld	a1,0(a3)
    80002682:	ec2e                	sd	a1,24(sp)
    80002684:	668c                	ld	a1,8(a3)
    80002686:	f02e                	sd	a1,32(sp)
    80002688:	6a8c                	ld	a1,16(a3)
    8000268a:	f42e                	sd	a1,40(sp)
    8000268c:	6e8c                	ld	a1,24(a3)
    8000268e:	f82e                	sd	a1,48(sp)
    80002690:	728c                	ld	a1,32(a3)
    80002692:	fc2e                	sd	a1,56(sp)
    80002694:	768c                	ld	a1,40(a3)
    80002696:	e0ae                	sd	a1,64(sp)

0000000080002698 <.LBB0_1>:
    80002698:	00023717          	auipc	a4,0x23
    8000269c:	1a070713          	addi	a4,a4,416 # 80025838 <.L__unnamed_1>
    800026a0:	002c                	addi	a1,sp,8
    800026a2:	0814                	addi	a3,sp,16
    800026a4:	083c                	addi	a5,sp,24
    800026a6:	863a                	mv	a2,a4
    800026a8:	00020097          	auipc	ra,0x20
    800026ac:	ae8080e7          	jalr	-1304(ra) # 80022190 <_ZN4core9panicking19assert_failed_inner17h4615d2e87cda8e50E>
	...

Disassembly of section .text._ZN6kernel4arch5riscv8register4mepc5write17h048707cbba437631E:

00000000800026b2 <_ZN6kernel4arch5riscv8register4mepc5write17h048707cbba437631E>:
// machine exception program counter, holds the
// instruction address to which a return from
// exception will go.
#[inline]
pub unsafe fn write(mepc: usize) {
    800026b2:	1141                	addi	sp,sp,-16
    800026b4:	e42a                	sd	a0,8(sp)
    llvm_asm!("csrw mepc, $0" :: "r"(mepc)::"volatile");
    800026b6:	34151073          	csrw	mepc,a0
    800026ba:	0141                	addi	sp,sp,16
    800026bc:	8082                	ret

Disassembly of section .text._ZN6kernel7process9trapframe9Trapframe10update_epc17h24874241e4b03020E:

00000000800026be <_ZN6kernel7process9trapframe9Trapframe10update_epc17h24874241e4b03020E>:
    /*280 */    pub t6:usize
}


impl Trapframe {
    pub fn update_epc(&mut self) {
    800026be:	1101                	addi	sp,sp,-32
    800026c0:	e42a                	sd	a0,8(sp)
    800026c2:	ec2a                	sd	a0,24(sp)
        self.epc += 4;
    800026c4:	6d0c                	ld	a1,24(a0)
    800026c6:	00458513          	addi	a0,a1,4
    800026ca:	e82a                	sd	a0,16(sp)
    800026cc:	00b56863          	bltu	a0,a1,800026dc <.LBB0_3>
    800026d0:	a009                	j	800026d2 <_ZN6kernel7process9trapframe9Trapframe10update_epc17h24874241e4b03020E+0x14>
    800026d2:	6542                	ld	a0,16(sp)
    800026d4:	65a2                	ld	a1,8(sp)
    800026d6:	ed88                	sd	a0,24(a1)
    }
    800026d8:	6105                	addi	sp,sp,32
    800026da:	8082                	ret

00000000800026dc <.LBB0_3>:
        self.epc += 4;
    800026dc:	00023517          	auipc	a0,0x23
    800026e0:	1b450513          	addi	a0,a0,436 # 80025890 <str.0>

00000000800026e4 <.LBB0_4>:
    800026e4:	00023617          	auipc	a2,0x23
    800026e8:	18c60613          	addi	a2,a2,396 # 80025870 <.L__unnamed_1>
    800026ec:	45f1                	li	a1,28
    800026ee:	00020097          	auipc	ra,0x20
    800026f2:	a0e080e7          	jalr	-1522(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN5alloc7raw_vec11finish_grow17h67df8fd3b618c18aE:

00000000800026f8 <_ZN5alloc7raw_vec11finish_grow17h67df8fd3b618c18aE>:
// This function is outside `RawVec` to minimize compile times. See the comment
// above `RawVec::grow_amortized` for details. (The `A` parameter isn't
// significant, because the number of different `A` types seen in practice is
// much smaller than the number of `T` types.)
#[inline(never)]
fn finish_grow<A>(
    800026f8:	7129                	addi	sp,sp,-320
    800026fa:	fe06                	sd	ra,312(sp)
    800026fc:	f83a                	sd	a4,48(sp)
    new_layout: Result<Layout, LayoutError>,
    current_memory: Option<(NonNull<u8>, Layout)>,
    800026fe:	fc36                	sd	a3,56(sp)
    80002700:	e0aa                	sd	a0,64(sp)
    80002702:	f1ae                	sd	a1,224(sp)
    80002704:	f5b2                	sd	a2,232(sp)
    80002706:	f9ba                	sd	a4,240(sp)
    80002708:	1888                	addi	a0,sp,112
) -> Result<NonNull<[u8]>, TryReserveError>
where
    A: Allocator,
{
    // Check for the error here to minimize the size of `RawVec::grow_*`.
    let new_layout = new_layout.map_err(|_| CapacityOverflow)?;
    8000270a:	0000a097          	auipc	ra,0xa
    8000270e:	7ba080e7          	jalr	1978(ra) # 8000cec4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h048c451de26fa4b9E>
    80002712:	a009                	j	80002714 <_ZN5alloc7raw_vec11finish_grow17h67df8fd3b618c18aE+0x1c>
    80002714:	08a8                	addi	a0,sp,88
    80002716:	188c                	addi	a1,sp,112
    80002718:	0000b097          	auipc	ra,0xb
    8000271c:	a24080e7          	jalr	-1500(ra) # 8000d13c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h81067e0558a14198E>
    80002720:	a009                	j	80002722 <_ZN5alloc7raw_vec11finish_grow17h67df8fd3b618c18aE+0x2a>
    80002722:	6566                	ld	a0,88(sp)
    80002724:	4581                	li	a1,0
    80002726:	00b50463          	beq	a0,a1,8000272e <_ZN5alloc7raw_vec11finish_grow17h67df8fd3b618c18aE+0x36>
    8000272a:	a009                	j	8000272c <_ZN5alloc7raw_vec11finish_grow17h67df8fd3b618c18aE+0x34>
    8000272c:	a839                	j	8000274a <_ZN5alloc7raw_vec11finish_grow17h67df8fd3b618c18aE+0x52>
    8000272e:	7586                	ld	a1,96(sp)
    80002730:	7526                	ld	a0,104(sp)
    80002732:	ea2e                	sd	a1,272(sp)
    80002734:	ee2a                	sd	a0,280(sp)
    80002736:	e4ae                	sd	a1,72(sp)
    80002738:	e8aa                	sd	a0,80(sp)
    8000273a:	00a8                	addi	a0,sp,72

    alloc_guard(new_layout.size())?;
    8000273c:	0001c097          	auipc	ra,0x1c
    80002740:	0d8080e7          	jalr	216(ra) # 8001e814 <_ZN4core5alloc6layout6Layout4size17h7f60c0168860a2ffE>
    80002744:	f42a                	sd	a0,40(sp)
    80002746:	a035                	j	80002772 <_ZN5alloc7raw_vec11finish_grow17h67df8fd3b618c18aE+0x7a>
    let new_layout = new_layout.map_err(|_| CapacityOverflow)?;
    80002748:	0000                	unimp
    8000274a:	7506                	ld	a0,96(sp)
    8000274c:	75a6                	ld	a1,104(sp)
    8000274e:	e22a                	sd	a0,256(sp)
    80002750:	e62e                	sd	a1,264(sp)
    80002752:	00013097          	auipc	ra,0x13
    80002756:	028080e7          	jalr	40(ra) # 8001577a <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h00cb4931a375be30E>
    8000275a:	ec2a                	sd	a0,24(sp)
    8000275c:	f02e                	sd	a1,32(sp)
    8000275e:	a009                	j	80002760 <_ZN5alloc7raw_vec11finish_grow17h67df8fd3b618c18aE+0x68>
    80002760:	7602                	ld	a2,32(sp)
    80002762:	65e2                	ld	a1,24(sp)
    80002764:	6506                	ld	a0,64(sp)
    80002766:	0000b097          	auipc	ra,0xb
    8000276a:	8e6080e7          	jalr	-1818(ra) # 8000d04c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h7458ba93a206fcffE>
    8000276e:	a009                	j	80002770 <_ZN5alloc7raw_vec11finish_grow17h67df8fd3b618c18aE+0x78>
    80002770:	a8c9                	j	80002842 <_ZN5alloc7raw_vec11finish_grow17h67df8fd3b618c18aE+0x14a>
    alloc_guard(new_layout.size())?;
    80002772:	75a2                	ld	a1,40(sp)
    80002774:	1108                	addi	a0,sp,160
    80002776:	0001c097          	auipc	ra,0x1c
    8000277a:	bf0080e7          	jalr	-1040(ra) # 8001e366 <_ZN5alloc7raw_vec11alloc_guard17hfed185ef1a23ae81E>
    8000277e:	a009                	j	80002780 <_ZN5alloc7raw_vec11finish_grow17h67df8fd3b618c18aE+0x88>
    80002780:	0128                	addi	a0,sp,136
    80002782:	110c                	addi	a1,sp,160
    80002784:	0000b097          	auipc	ra,0xb
    80002788:	970080e7          	jalr	-1680(ra) # 8000d0f4 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h219e266dbc1ee71cE>
    8000278c:	a009                	j	8000278e <_ZN5alloc7raw_vec11finish_grow17h67df8fd3b618c18aE+0x96>
    8000278e:	652a                	ld	a0,136(sp)
    80002790:	4581                	li	a1,0
    80002792:	00b50463          	beq	a0,a1,8000279a <_ZN5alloc7raw_vec11finish_grow17h67df8fd3b618c18aE+0xa2>
    80002796:	a009                	j	80002798 <_ZN5alloc7raw_vec11finish_grow17h67df8fd3b618c18aE+0xa0>
    80002798:	a801                	j	800027a8 <_ZN5alloc7raw_vec11finish_grow17h67df8fd3b618c18aE+0xb0>

    let memory = if let Some((ptr, old_layout)) = current_memory {
    8000279a:	7562                	ld	a0,56(sp)
    8000279c:	6108                	ld	a0,0(a0)
    8000279e:	4581                	li	a1,0
    800027a0:	04b51263          	bne	a0,a1,800027e4 <_ZN5alloc7raw_vec11finish_grow17h67df8fd3b618c18aE+0xec>
    800027a4:	a035                	j	800027d0 <_ZN5alloc7raw_vec11finish_grow17h67df8fd3b618c18aE+0xd8>
    alloc_guard(new_layout.size())?;
    800027a6:	0000                	unimp
    800027a8:	654a                	ld	a0,144(sp)
    800027aa:	65ea                	ld	a1,152(sp)
    800027ac:	f22a                	sd	a0,288(sp)
    800027ae:	f62e                	sd	a1,296(sp)
    800027b0:	00013097          	auipc	ra,0x13
    800027b4:	fca080e7          	jalr	-54(ra) # 8001577a <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h00cb4931a375be30E>
    800027b8:	e42a                	sd	a0,8(sp)
    800027ba:	e82e                	sd	a1,16(sp)
    800027bc:	a009                	j	800027be <_ZN5alloc7raw_vec11finish_grow17h67df8fd3b618c18aE+0xc6>
    800027be:	6642                	ld	a2,16(sp)
    800027c0:	65a2                	ld	a1,8(sp)
    800027c2:	6506                	ld	a0,64(sp)
    800027c4:	0000b097          	auipc	ra,0xb
    800027c8:	888080e7          	jalr	-1912(ra) # 8000d04c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h7458ba93a206fcffE>
    800027cc:	a009                	j	800027ce <_ZN5alloc7raw_vec11finish_grow17h67df8fd3b618c18aE+0xd6>
    800027ce:	a895                	j	80002842 <_ZN5alloc7raw_vec11finish_grow17h67df8fd3b618c18aE+0x14a>
            // The allocator checks for alignment equality
            intrinsics::assume(old_layout.align() == new_layout.align());
            alloc.grow(ptr, old_layout, new_layout)
        }
    } else {
        alloc.allocate(new_layout)
    800027d0:	7542                	ld	a0,48(sp)
    800027d2:	65a6                	ld	a1,72(sp)
    800027d4:	6646                	ld	a2,80(sp)
    800027d6:	0000a097          	auipc	ra,0xa
    800027da:	a96080e7          	jalr	-1386(ra) # 8000c26c <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$8allocate17ha3ee32ed39eb82efE>
    800027de:	fd2a                	sd	a0,184(sp)
    800027e0:	e1ae                	sd	a1,192(sp)
    800027e2:	a0a1                	j	8000282a <_ZN5alloc7raw_vec11finish_grow17h67df8fd3b618c18aE+0x132>
    let memory = if let Some((ptr, old_layout)) = current_memory {
    800027e4:	7562                	ld	a0,56(sp)
    800027e6:	610c                	ld	a1,0(a0)
    800027e8:	e02e                	sd	a1,0(sp)
    800027ea:	fa2e                	sd	a1,304(sp)
    800027ec:	650c                	ld	a1,8(a0)
    800027ee:	6908                	ld	a0,16(a0)
    800027f0:	e5ae                	sd	a1,200(sp)
    800027f2:	e9aa                	sd	a0,208(sp)
    800027f4:	01a8                	addi	a0,sp,200
            intrinsics::assume(old_layout.align() == new_layout.align());
    800027f6:	0001c097          	auipc	ra,0x1c
    800027fa:	028080e7          	jalr	40(ra) # 8001e81e <_ZN4core5alloc6layout6Layout5align17h05712eb17caed6beE>
    800027fe:	a009                	j	80002800 <_ZN5alloc7raw_vec11finish_grow17h67df8fd3b618c18aE+0x108>
    80002800:	00a8                	addi	a0,sp,72
    80002802:	0001c097          	auipc	ra,0x1c
    80002806:	01c080e7          	jalr	28(ra) # 8001e81e <_ZN4core5alloc6layout6Layout5align17h05712eb17caed6beE>
    8000280a:	a009                	j	8000280c <_ZN5alloc7raw_vec11finish_grow17h67df8fd3b618c18aE+0x114>
    8000280c:	a009                	j	8000280e <_ZN5alloc7raw_vec11finish_grow17h67df8fd3b618c18aE+0x116>
            alloc.grow(ptr, old_layout, new_layout)
    8000280e:	6582                	ld	a1,0(sp)
    80002810:	7542                	ld	a0,48(sp)
    80002812:	662e                	ld	a2,200(sp)
    80002814:	66ce                	ld	a3,208(sp)
    80002816:	6726                	ld	a4,72(sp)
    80002818:	67c6                	ld	a5,80(sp)
    8000281a:	0000a097          	auipc	ra,0xa
    8000281e:	a28080e7          	jalr	-1496(ra) # 8000c242 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$4grow17h7670efcd8d0be277E>
    80002822:	fd2a                	sd	a0,184(sp)
    80002824:	e1ae                	sd	a1,192(sp)
    80002826:	a009                	j	80002828 <_ZN5alloc7raw_vec11finish_grow17h67df8fd3b618c18aE+0x130>
    let memory = if let Some((ptr, old_layout)) = current_memory {
    80002828:	a011                	j	8000282c <_ZN5alloc7raw_vec11finish_grow17h67df8fd3b618c18aE+0x134>
    8000282a:	a009                	j	8000282c <_ZN5alloc7raw_vec11finish_grow17h67df8fd3b618c18aE+0x134>
    };

    memory.map_err(|_| AllocError { layout: new_layout, non_exhaustive: () })
    8000282c:	6506                	ld	a0,64(sp)
    8000282e:	75ea                	ld	a1,184(sp)
    80002830:	660e                	ld	a2,192(sp)
    80002832:	00b4                	addi	a3,sp,72
    80002834:	edb6                	sd	a3,216(sp)
    80002836:	0000a097          	auipc	ra,0xa
    8000283a:	6f6080e7          	jalr	1782(ra) # 8000cf2c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h3706629688909c32E>
    8000283e:	a009                	j	80002840 <_ZN5alloc7raw_vec11finish_grow17h67df8fd3b618c18aE+0x148>
}
    80002840:	a011                	j	80002844 <_ZN5alloc7raw_vec11finish_grow17h67df8fd3b618c18aE+0x14c>
    80002842:	a009                	j	80002844 <_ZN5alloc7raw_vec11finish_grow17h67df8fd3b618c18aE+0x14c>
    80002844:	70f2                	ld	ra,312(sp)
    80002846:	6131                	addi	sp,sp,320
    80002848:	8082                	ret

Disassembly of section .text._ZN5alloc7raw_vec11finish_grow28_$u7b$$u7b$closure$u7d$$u7d$17h4102ec07be08fbafE:

000000008000284a <_ZN5alloc7raw_vec11finish_grow28_$u7b$$u7b$closure$u7d$$u7d$17h4102ec07be08fbafE>:
    memory.map_err(|_| AllocError { layout: new_layout, non_exhaustive: () })
    8000284a:	1101                	addi	sp,sp,-32
    8000284c:	85aa                	mv	a1,a0
    8000284e:	e82e                	sd	a1,16(sp)
    80002850:	6188                	ld	a0,0(a1)
    80002852:	658c                	ld	a1,8(a1)
    80002854:	e02a                	sd	a0,0(sp)
    80002856:	e42e                	sd	a1,8(sp)
    80002858:	6105                	addi	sp,sp,32
    8000285a:	8082                	ret

Disassembly of section .text._ZN5alloc7raw_vec11finish_grow28_$u7b$$u7b$closure$u7d$$u7d$17h73415ce87cdd3564E:

000000008000285c <_ZN5alloc7raw_vec11finish_grow28_$u7b$$u7b$closure$u7d$$u7d$17h73415ce87cdd3564E>:
    let new_layout = new_layout.map_err(|_| CapacityOverflow)?;
    8000285c:	1101                	addi	sp,sp,-32
    8000285e:	4581                	li	a1,0
    80002860:	e42e                	sd	a1,8(sp)
    80002862:	6502                	ld	a0,0(sp)
    80002864:	6105                	addi	sp,sp,32
    80002866:	8082                	ret

Disassembly of section .text._ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11allocate_in17hb1a7e5211a2ca028E:

0000000080002868 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11allocate_in17hb1a7e5211a2ca028E>:
    fn allocate_in(capacity: usize, init: AllocInit, alloc: A) -> Self {
    80002868:	7151                	addi	sp,sp,-240
    8000286a:	f586                	sd	ra,232(sp)
    8000286c:	e0aa                	sd	a0,64(sp)
    8000286e:	04b107a3          	sb	a1,79(sp)
    80002872:	f92a                	sd	a0,176(sp)
        if mem::size_of::<T>() == 0 {
    80002874:	a009                	j	80002876 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11allocate_in17hb1a7e5211a2ca028E+0xe>
    80002876:	4505                	li	a0,1
    80002878:	e909                	bnez	a0,8000288a <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11allocate_in17hb1a7e5211a2ca028E+0x22>
    8000287a:	a009                	j	8000287c <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11allocate_in17hb1a7e5211a2ca028E+0x14>
            Self::new_in(alloc)
    8000287c:	00000097          	auipc	ra,0x0
    80002880:	418080e7          	jalr	1048(ra) # 80002c94 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$6new_in17hcde8bd186b8458cbE>
    80002884:	ecaa                	sd	a0,88(sp)
    80002886:	f0ae                	sd	a1,96(sp)
    80002888:	a809                	j	8000289a <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11allocate_in17hb1a7e5211a2ca028E+0x32>
            let layout = match Layout::array::<T>(capacity) {
    8000288a:	6506                	ld	a0,64(sp)
    8000288c:	00006097          	auipc	ra,0x6
    80002890:	dd8080e7          	jalr	-552(ra) # 80008664 <_ZN4core5alloc6layout6Layout5array17h33220460c7f786e0E>
    80002894:	fcaa                	sd	a0,120(sp)
    80002896:	e12e                	sd	a1,128(sp)
    80002898:	a011                	j	8000289c <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11allocate_in17hb1a7e5211a2ca028E+0x34>
        if mem::size_of::<T>() == 0 {
    8000289a:	aa11                	j	800029ae <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11allocate_in17hb1a7e5211a2ca028E+0x146>
                Ok(layout) => layout,
    8000289c:	650a                	ld	a0,128(sp)
    8000289e:	00153593          	seqz	a1,a0
    800028a2:	4581                	li	a1,0
    800028a4:	00b51963          	bne	a0,a1,800028b6 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11allocate_in17hb1a7e5211a2ca028E+0x4e>
    800028a8:	a009                	j	800028aa <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11allocate_in17hb1a7e5211a2ca028E+0x42>
                Err(_) => capacity_overflow(),
    800028aa:	0001f097          	auipc	ra,0x1f
    800028ae:	668080e7          	jalr	1640(ra) # 80021f12 <_ZN5alloc7raw_vec17capacity_overflow17hae1c560931d103e4E>
    800028b2:	0000                	unimp
            let layout = match Layout::array::<T>(capacity) {
    800028b4:	0000                	unimp
                Ok(layout) => layout,
    800028b6:	75e6                	ld	a1,120(sp)
    800028b8:	650a                	ld	a0,128(sp)
    800028ba:	fd2e                	sd	a1,184(sp)
    800028bc:	e1aa                	sd	a0,192(sp)
    800028be:	f4ae                	sd	a1,104(sp)
    800028c0:	f8aa                	sd	a0,112(sp)
    800028c2:	10a8                	addi	a0,sp,104
            match alloc_guard(layout.size()) {
    800028c4:	0001c097          	auipc	ra,0x1c
    800028c8:	f50080e7          	jalr	-176(ra) # 8001e814 <_ZN4core5alloc6layout6Layout4size17h7f60c0168860a2ffE>
    800028cc:	fc2a                	sd	a0,56(sp)
    800028ce:	a009                	j	800028d0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11allocate_in17hb1a7e5211a2ca028E+0x68>
    800028d0:	75e2                	ld	a1,56(sp)
    800028d2:	0128                	addi	a0,sp,136
    800028d4:	0001c097          	auipc	ra,0x1c
    800028d8:	a92080e7          	jalr	-1390(ra) # 8001e366 <_ZN5alloc7raw_vec11alloc_guard17hfed185ef1a23ae81E>
    800028dc:	a009                	j	800028de <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11allocate_in17hb1a7e5211a2ca028E+0x76>
                Ok(_) => {}
    800028de:	652a                	ld	a0,136(sp)
    800028e0:	4581                	li	a1,0
    800028e2:	00b50963          	beq	a0,a1,800028f4 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11allocate_in17hb1a7e5211a2ca028E+0x8c>
    800028e6:	a009                	j	800028e8 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11allocate_in17hb1a7e5211a2ca028E+0x80>
                Err(_) => capacity_overflow(),
    800028e8:	0001f097          	auipc	ra,0x1f
    800028ec:	62a080e7          	jalr	1578(ra) # 80021f12 <_ZN5alloc7raw_vec17capacity_overflow17hae1c560931d103e4E>
    800028f0:	0000                	unimp
            match alloc_guard(layout.size()) {
    800028f2:	0000                	unimp
                AllocInit::Uninitialized => alloc.allocate(layout),
    800028f4:	04f14503          	lbu	a0,79(sp)
    800028f8:	8905                	andi	a0,a0,1
    800028fa:	4581                	li	a1,0
    800028fc:	00b50e63          	beq	a0,a1,80002918 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11allocate_in17hb1a7e5211a2ca028E+0xb0>
    80002900:	a009                	j	80002902 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11allocate_in17hb1a7e5211a2ca028E+0x9a>
                AllocInit::Zeroed => alloc.allocate_zeroed(layout),
    80002902:	75a6                	ld	a1,104(sp)
    80002904:	7646                	ld	a2,112(sp)
    80002906:	0888                	addi	a0,sp,80
    80002908:	0000a097          	auipc	ra,0xa
    8000290c:	916080e7          	jalr	-1770(ra) # 8000c21e <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$15allocate_zeroed17h62d497141254e70dE>
    80002910:	f12a                	sd	a0,160(sp)
    80002912:	f52e                	sd	a1,168(sp)
    80002914:	a829                	j	8000292e <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11allocate_in17hb1a7e5211a2ca028E+0xc6>
            let result = match init {
    80002916:	0000                	unimp
                AllocInit::Uninitialized => alloc.allocate(layout),
    80002918:	75a6                	ld	a1,104(sp)
    8000291a:	7646                	ld	a2,112(sp)
    8000291c:	0888                	addi	a0,sp,80
    8000291e:	0000a097          	auipc	ra,0xa
    80002922:	94e080e7          	jalr	-1714(ra) # 8000c26c <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$8allocate17ha3ee32ed39eb82efE>
    80002926:	f12a                	sd	a0,160(sp)
    80002928:	f52e                	sd	a1,168(sp)
    8000292a:	a009                	j	8000292c <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11allocate_in17hb1a7e5211a2ca028E+0xc4>
            let result = match init {
    8000292c:	a011                	j	80002930 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11allocate_in17hb1a7e5211a2ca028E+0xc8>
    8000292e:	a009                	j	80002930 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11allocate_in17hb1a7e5211a2ca028E+0xc8>
                Ok(ptr) => ptr,
    80002930:	750a                	ld	a0,160(sp)
    80002932:	00153593          	seqz	a1,a0
    80002936:	4581                	li	a1,0
    80002938:	00b51b63          	bne	a0,a1,8000294e <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11allocate_in17hb1a7e5211a2ca028E+0xe6>
    8000293c:	a009                	j	8000293e <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11allocate_in17hb1a7e5211a2ca028E+0xd6>
                Err(_) => handle_alloc_error(layout),
    8000293e:	7526                	ld	a0,104(sp)
    80002940:	75c6                	ld	a1,112(sp)
    80002942:	0001f097          	auipc	ra,0x1f
    80002946:	5b4080e7          	jalr	1460(ra) # 80021ef6 <_ZN5alloc5alloc18handle_alloc_error17haa1b1c0a80642c5aE>
    8000294a:	0000                	unimp
            let ptr = match result {
    8000294c:	0000                	unimp
                Ok(ptr) => ptr,
    8000294e:	750a                	ld	a0,160(sp)
    80002950:	f02a                	sd	a0,32(sp)
    80002952:	75aa                	ld	a1,168(sp)
    80002954:	f42e                	sd	a1,40(sp)
    80002956:	e5aa                	sd	a0,200(sp)
    80002958:	e9ae                	sd	a1,208(sp)
    8000295a:	edaa                	sd	a0,216(sp)
    8000295c:	f1ae                	sd	a1,224(sp)
                ptr: unsafe { Unique::new_unchecked(ptr.cast().as_ptr()) },
    8000295e:	0000d097          	auipc	ra,0xd
    80002962:	a5a080e7          	jalr	-1446(ra) # 8000f3b8 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17he3c6d28f0e68e811E>
    80002966:	f82a                	sd	a0,48(sp)
    80002968:	a009                	j	8000296a <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11allocate_in17hb1a7e5211a2ca028E+0x102>
    8000296a:	7542                	ld	a0,48(sp)
    8000296c:	0000d097          	auipc	ra,0xd
    80002970:	acc080e7          	jalr	-1332(ra) # 8000f438 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h729713db2b300d39E>
    80002974:	ec2a                	sd	a0,24(sp)
    80002976:	a009                	j	80002978 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11allocate_in17hb1a7e5211a2ca028E+0x110>
    80002978:	6562                	ld	a0,24(sp)
    8000297a:	00009097          	auipc	ra,0x9
    8000297e:	0ec080e7          	jalr	236(ra) # 8000ba66 <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17h620617f59cddd065E>
    80002982:	e82a                	sd	a0,16(sp)
    80002984:	a009                	j	80002986 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11allocate_in17hb1a7e5211a2ca028E+0x11e>
                cap: Self::capacity_from_bytes(ptr.len()),
    80002986:	75a2                	ld	a1,40(sp)
    80002988:	7502                	ld	a0,32(sp)
    8000298a:	0000d097          	auipc	ra,0xd
    8000298e:	bc6080e7          	jalr	-1082(ra) # 8000f550 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$3len17h17d848b65404492bE>
    80002992:	e42a                	sd	a0,8(sp)
    80002994:	a009                	j	80002996 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11allocate_in17hb1a7e5211a2ca028E+0x12e>
    80002996:	6522                	ld	a0,8(sp)
    80002998:	00000097          	auipc	ra,0x0
    8000299c:	28c080e7          	jalr	652(ra) # 80002c24 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$19capacity_from_bytes17hb8f80a7316d4a8fbE>
    800029a0:	e02a                	sd	a0,0(sp)
    800029a2:	a009                	j	800029a4 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11allocate_in17hb1a7e5211a2ca028E+0x13c>
            Self {
    800029a4:	6502                	ld	a0,0(sp)
    800029a6:	65c2                	ld	a1,16(sp)
    800029a8:	ecae                	sd	a1,88(sp)
    800029aa:	f0aa                	sd	a0,96(sp)
        if mem::size_of::<T>() == 0 {
    800029ac:	a009                	j	800029ae <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11allocate_in17hb1a7e5211a2ca028E+0x146>
    }
    800029ae:	6566                	ld	a0,88(sp)
    800029b0:	7586                	ld	a1,96(sp)
    800029b2:	70ae                	ld	ra,232(sp)
    800029b4:	616d                	addi	sp,sp,240
    800029b6:	8082                	ret

Disassembly of section .text._ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$13needs_to_grow17ha08818b631ce0004E:

00000000800029b8 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$13needs_to_grow17ha08818b631ce0004E>:
    fn needs_to_grow(&self, len: usize, additional: usize) -> bool {
    800029b8:	715d                	addi	sp,sp,-80
    800029ba:	e486                	sd	ra,72(sp)
    800029bc:	e432                	sd	a2,8(sp)
    800029be:	e82e                	sd	a1,16(sp)
    800029c0:	f02a                	sd	a0,32(sp)
    800029c2:	f42e                	sd	a1,40(sp)
    800029c4:	f832                	sd	a2,48(sp)
    800029c6:	e0aa                	sd	a0,64(sp)
        if mem::size_of::<T>() == 0 { usize::MAX } else { self.cap }
    800029c8:	6508                	ld	a0,8(a0)
    800029ca:	ec2a                	sd	a0,24(sp)
    800029cc:	fc2a                	sd	a0,56(sp)
        additional > self.capacity().wrapping_sub(len)
    800029ce:	a009                	j	800029d0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$13needs_to_grow17ha08818b631ce0004E+0x18>
    800029d0:	65c2                	ld	a1,16(sp)
    800029d2:	6562                	ld	a0,24(sp)
    800029d4:	0001b097          	auipc	ra,0x1b
    800029d8:	550080e7          	jalr	1360(ra) # 8001df24 <_ZN4core3num23_$LT$impl$u20$usize$GT$12wrapping_sub17h8f077bf007d122c9E>
    800029dc:	e02a                	sd	a0,0(sp)
    800029de:	a009                	j	800029e0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$13needs_to_grow17ha08818b631ce0004E+0x28>
    800029e0:	6502                	ld	a0,0(sp)
    800029e2:	65a2                	ld	a1,8(sp)
    800029e4:	00b53533          	sltu	a0,a0,a1
    }
    800029e8:	60a6                	ld	ra,72(sp)
    800029ea:	6161                	addi	sp,sp,80
    800029ec:	8082                	ret

Disassembly of section .text._ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h47d07dfc1131b1d6E:

00000000800029ee <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h47d07dfc1131b1d6E>:
    fn current_memory(&self) -> Option<(NonNull<u8>, Layout)> {
    800029ee:	7175                	addi	sp,sp,-144
    800029f0:	e506                	sd	ra,136(sp)
    800029f2:	f42e                	sd	a1,40(sp)
    800029f4:	f82a                	sd	a0,48(sp)
    800029f6:	ecae                	sd	a1,88(sp)
        if mem::size_of::<T>() == 0 || self.cap == 0 {
    800029f8:	a025                	j	80002a20 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h47d07dfc1131b1d6E+0x32>
    800029fa:	4505                	li	a0,1
    800029fc:	02a10fa3          	sb	a0,63(sp)
    80002a00:	a819                	j	80002a16 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h47d07dfc1131b1d6E+0x28>
    80002a02:	4501                	li	a0,0
    80002a04:	02a10fa3          	sb	a0,63(sp)
    80002a08:	a039                	j	80002a16 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h47d07dfc1131b1d6E+0x28>
    80002a0a:	7522                	ld	a0,40(sp)
    80002a0c:	6508                	ld	a0,8(a0)
    80002a0e:	4581                	li	a1,0
    80002a10:	feb505e3          	beq	a0,a1,800029fa <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h47d07dfc1131b1d6E+0xc>
    80002a14:	b7fd                	j	80002a02 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h47d07dfc1131b1d6E+0x14>
    80002a16:	03f14503          	lbu	a0,63(sp)
    80002a1a:	8905                	andi	a0,a0,1
    80002a1c:	e509                	bnez	a0,80002a26 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h47d07dfc1131b1d6E+0x38>
    80002a1e:	a801                	j	80002a2e <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h47d07dfc1131b1d6E+0x40>
    80002a20:	4501                	li	a0,0
    80002a22:	fd61                	bnez	a0,800029fa <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h47d07dfc1131b1d6E+0xc>
    80002a24:	b7dd                	j	80002a0a <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h47d07dfc1131b1d6E+0x1c>
    80002a26:	75c2                	ld	a1,48(sp)
    80002a28:	4501                	li	a0,0
            None
    80002a2a:	e188                	sd	a0,0(a1)
        if mem::size_of::<T>() == 0 || self.cap == 0 {
    80002a2c:	a085                	j	80002a8c <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h47d07dfc1131b1d6E+0x9e>
    80002a2e:	4505                	li	a0,1
#[inline(always)]
#[stable(feature = "rust1", since = "1.0.0")]
#[rustc_promotable]
#[rustc_const_stable(feature = "const_align_of", since = "1.24.0")]
pub const fn align_of<T>() -> usize {
    intrinsics::min_align_of::<T>()
    80002a30:	f02a                	sd	a0,32(sp)
    80002a32:	e12a                	sd	a0,128(sp)
                let align = mem::align_of::<T>();
    80002a34:	f0aa                	sd	a0,96(sp)
    80002a36:	a009                	j	80002a38 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h47d07dfc1131b1d6E+0x4a>
                let size = mem::size_of::<T>() * self.cap;
    80002a38:	a009                	j	80002a3a <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h47d07dfc1131b1d6E+0x4c>
    80002a3a:	7582                	ld	a1,32(sp)
    80002a3c:	7522                	ld	a0,40(sp)
    80002a3e:	6508                	ld	a0,8(a0)
    80002a40:	f4aa                	sd	a0,104(sp)
                let layout = Layout::from_size_align_unchecked(size, align);
    80002a42:	0001c097          	auipc	ra,0x1c
    80002a46:	da8080e7          	jalr	-600(ra) # 8001e7ea <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h7d187b5349095d20E>
    80002a4a:	862a                	mv	a2,a0
    80002a4c:	e832                	sd	a2,16(sp)
    80002a4e:	862e                	mv	a2,a1
    80002a50:	ec32                	sd	a2,24(sp)
    80002a52:	f8aa                	sd	a0,112(sp)
    80002a54:	fcae                	sd	a1,120(sp)
    80002a56:	a009                	j	80002a58 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h47d07dfc1131b1d6E+0x6a>
                Some((self.ptr.cast().into(), layout))
    80002a58:	7522                	ld	a0,40(sp)
    80002a5a:	6108                	ld	a0,0(a0)
    80002a5c:	00009097          	auipc	ra,0x9
    80002a60:	082080e7          	jalr	130(ra) # 8000bade <_ZN4core3ptr6unique15Unique$LT$T$GT$4cast17h63879fc8651a3d59E>
    80002a64:	e42a                	sd	a0,8(sp)
    80002a66:	a009                	j	80002a68 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h47d07dfc1131b1d6E+0x7a>
    80002a68:	6522                	ld	a0,8(sp)
    80002a6a:	00009097          	auipc	ra,0x9
    80002a6e:	17e080e7          	jalr	382(ra) # 8000bbe8 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h6726b37a43d030b4E>
    80002a72:	e02a                	sd	a0,0(sp)
    80002a74:	a009                	j	80002a76 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h47d07dfc1131b1d6E+0x88>
    80002a76:	6502                	ld	a0,0(sp)
    80002a78:	75c2                	ld	a1,48(sp)
    80002a7a:	6642                	ld	a2,16(sp)
    80002a7c:	66e2                	ld	a3,24(sp)
    80002a7e:	e0aa                	sd	a0,64(sp)
    80002a80:	e4b2                	sd	a2,72(sp)
    80002a82:	e8b6                	sd	a3,80(sp)
    80002a84:	e994                	sd	a3,16(a1)
    80002a86:	e590                	sd	a2,8(a1)
    80002a88:	e188                	sd	a0,0(a1)
        if mem::size_of::<T>() == 0 || self.cap == 0 {
    80002a8a:	a009                	j	80002a8c <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h47d07dfc1131b1d6E+0x9e>
    }
    80002a8c:	60aa                	ld	ra,136(sp)
    80002a8e:	6149                	addi	sp,sp,144
    80002a90:	8082                	ret

Disassembly of section .text._ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6d7a8aee2de04232E:

0000000080002a92 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6d7a8aee2de04232E>:
    fn grow_amortized(&mut self, len: usize, additional: usize) -> Result<(), TryReserveError> {
    80002a92:	7125                	addi	sp,sp,-416
    80002a94:	ef06                	sd	ra,408(sp)
    80002a96:	ecb6                	sd	a3,88(sp)
    80002a98:	f0b2                	sd	a2,96(sp)
    80002a9a:	f4ae                	sd	a1,104(sp)
    80002a9c:	f8aa                	sd	a0,112(sp)
    80002a9e:	ea2e                	sd	a1,272(sp)
    80002aa0:	ee32                	sd	a2,280(sp)
    80002aa2:	f236                	sd	a3,288(sp)
        if mem::size_of::<T>() == 0 {
    80002aa4:	a009                	j	80002aa6 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6d7a8aee2de04232E+0x14>
    80002aa6:	4505                	li	a0,1
    80002aa8:	e919                	bnez	a0,80002abe <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6d7a8aee2de04232E+0x2c>
    80002aaa:	a009                	j	80002aac <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6d7a8aee2de04232E+0x1a>
    80002aac:	75c6                	ld	a1,112(sp)
    80002aae:	4501                	li	a0,0
            return Err(CapacityOverflow);
    80002ab0:	e12a                	sd	a0,128(sp)
    80002ab2:	7666                	ld	a2,120(sp)
    80002ab4:	e590                	sd	a2,8(a1)
    80002ab6:	e988                	sd	a0,16(a1)
    80002ab8:	4505                	li	a0,1
    80002aba:	e188                	sd	a0,0(a1)
    80002abc:	aa3d                	j	80002bfa <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6d7a8aee2de04232E+0x168>
        let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
    80002abe:	65e6                	ld	a1,88(sp)
    80002ac0:	7506                	ld	a0,96(sp)
    80002ac2:	0001b097          	auipc	ra,0x1b
    80002ac6:	36c080e7          	jalr	876(ra) # 8001de2e <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17he2495d381876d258E>
    80002aca:	e4aa                	sd	a0,72(sp)
    80002acc:	e8ae                	sd	a1,80(sp)
    80002ace:	a009                	j	80002ad0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6d7a8aee2de04232E+0x3e>
    80002ad0:	6646                	ld	a2,80(sp)
    80002ad2:	65a6                	ld	a1,72(sp)
    80002ad4:	4701                	li	a4,0
    80002ad6:	e1ba                	sd	a4,192(sp)
    80002ad8:	76ea                	ld	a3,184(sp)
    80002ada:	1108                	addi	a0,sp,160
    80002adc:	0000c097          	auipc	ra,0xc
    80002ae0:	c62080e7          	jalr	-926(ra) # 8000e73e <_ZN4core6option15Option$LT$T$GT$5ok_or17h7a4d5ef4770297f6E>
    80002ae4:	a009                	j	80002ae6 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6d7a8aee2de04232E+0x54>
    80002ae6:	0128                	addi	a0,sp,136
    80002ae8:	110c                	addi	a1,sp,160
    80002aea:	0000a097          	auipc	ra,0xa
    80002aee:	69a080e7          	jalr	1690(ra) # 8000d184 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hda96dc8b8fa1398aE>
    80002af2:	a009                	j	80002af4 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6d7a8aee2de04232E+0x62>
    80002af4:	652a                	ld	a0,136(sp)
    80002af6:	4581                	li	a1,0
    80002af8:	00b50463          	beq	a0,a1,80002b00 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6d7a8aee2de04232E+0x6e>
    80002afc:	a009                	j	80002afe <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6d7a8aee2de04232E+0x6c>
    80002afe:	a005                	j	80002b1e <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6d7a8aee2de04232E+0x8c>
    80002b00:	7526                	ld	a0,104(sp)
    80002b02:	65ca                	ld	a1,144(sp)
    80002b04:	fe2e                	sd	a1,312(sp)
    80002b06:	e2ae                	sd	a1,320(sp)
        let cap = cmp::max(self.cap * 2, required_cap);
    80002b08:	6508                	ld	a0,8(a0)
    80002b0a:	0506                	slli	a0,a0,0x1
    80002b0c:	0001f097          	auipc	ra,0x1f
    80002b10:	254080e7          	jalr	596(ra) # 80021d60 <_ZN4core3cmp3max17h3dc8da765fcdebd4E>
    80002b14:	85aa                	mv	a1,a0
    80002b16:	e0ae                	sd	a1,64(sp)
    80002b18:	e6aa                	sd	a0,328(sp)
    80002b1a:	a035                	j	80002b46 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6d7a8aee2de04232E+0xb4>
        let required_cap = len.checked_add(additional).ok_or(CapacityOverflow)?;
    80002b1c:	0000                	unimp
    80002b1e:	654a                	ld	a0,144(sp)
    80002b20:	65ea                	ld	a1,152(sp)
    80002b22:	f62a                	sd	a0,296(sp)
    80002b24:	fa2e                	sd	a1,304(sp)
    80002b26:	00013097          	auipc	ra,0x13
    80002b2a:	c54080e7          	jalr	-940(ra) # 8001577a <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h00cb4931a375be30E>
    80002b2e:	f82a                	sd	a0,48(sp)
    80002b30:	fc2e                	sd	a1,56(sp)
    80002b32:	a009                	j	80002b34 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6d7a8aee2de04232E+0xa2>
    80002b34:	7662                	ld	a2,56(sp)
    80002b36:	75c2                	ld	a1,48(sp)
    80002b38:	7546                	ld	a0,112(sp)
    80002b3a:	0000a097          	auipc	ra,0xa
    80002b3e:	4ee080e7          	jalr	1262(ra) # 8000d028 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h5998e5a20485011cE>
    80002b42:	a009                	j	80002b44 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6d7a8aee2de04232E+0xb2>
    80002b44:	a855                	j	80002bf8 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6d7a8aee2de04232E+0x166>
        let cap = cmp::max(Self::MIN_NON_ZERO_CAP, cap);
    80002b46:	6586                	ld	a1,64(sp)
    80002b48:	4521                	li	a0,8
    80002b4a:	0001f097          	auipc	ra,0x1f
    80002b4e:	216080e7          	jalr	534(ra) # 80021d60 <_ZN4core3cmp3max17h3dc8da765fcdebd4E>
    80002b52:	85aa                	mv	a1,a0
    80002b54:	f42e                	sd	a1,40(sp)
    80002b56:	eaaa                	sd	a0,336(sp)
    80002b58:	a009                	j	80002b5a <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6d7a8aee2de04232E+0xc8>
        let new_layout = Layout::array::<T>(cap);
    80002b5a:	7522                	ld	a0,40(sp)
    80002b5c:	00006097          	auipc	ra,0x6
    80002b60:	b08080e7          	jalr	-1272(ra) # 80008664 <_ZN4core5alloc6layout6Layout5array17h33220460c7f786e0E>
    80002b64:	862a                	mv	a2,a0
    80002b66:	ec32                	sd	a2,24(sp)
    80002b68:	862e                	mv	a2,a1
    80002b6a:	f032                	sd	a2,32(sp)
    80002b6c:	eeaa                	sd	a0,344(sp)
    80002b6e:	f2ae                	sd	a1,352(sp)
    80002b70:	a009                	j	80002b72 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6d7a8aee2de04232E+0xe0>
        let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
    80002b72:	75a6                	ld	a1,104(sp)
    80002b74:	19a8                	addi	a0,sp,248
    80002b76:	00000097          	auipc	ra,0x0
    80002b7a:	e78080e7          	jalr	-392(ra) # 800029ee <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h47d07dfc1131b1d6E>
    80002b7e:	a009                	j	80002b80 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6d7a8aee2de04232E+0xee>
    80002b80:	7726                	ld	a4,104(sp)
    80002b82:	7602                	ld	a2,32(sp)
    80002b84:	65e2                	ld	a1,24(sp)
    80002b86:	1188                	addi	a0,sp,224
    80002b88:	19b4                	addi	a3,sp,248
    80002b8a:	00000097          	auipc	ra,0x0
    80002b8e:	b6e080e7          	jalr	-1170(ra) # 800026f8 <_ZN5alloc7raw_vec11finish_grow17h67df8fd3b618c18aE>
    80002b92:	a009                	j	80002b94 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6d7a8aee2de04232E+0x102>
    80002b94:	01a8                	addi	a0,sp,200
    80002b96:	118c                	addi	a1,sp,224
    80002b98:	0000a097          	auipc	ra,0xa
    80002b9c:	634080e7          	jalr	1588(ra) # 8000d1cc <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hf2a730b9c7ab248fE>
    80002ba0:	a009                	j	80002ba2 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6d7a8aee2de04232E+0x110>
    80002ba2:	652e                	ld	a0,200(sp)
    80002ba4:	4581                	li	a1,0
    80002ba6:	00b50463          	beq	a0,a1,80002bae <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6d7a8aee2de04232E+0x11c>
    80002baa:	a009                	j	80002bac <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6d7a8aee2de04232E+0x11a>
    80002bac:	a831                	j	80002bc8 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6d7a8aee2de04232E+0x136>
    80002bae:	7526                	ld	a0,104(sp)
    80002bb0:	65ce                	ld	a1,208(sp)
    80002bb2:	666e                	ld	a2,216(sp)
    80002bb4:	feae                	sd	a1,376(sp)
    80002bb6:	e332                	sd	a2,384(sp)
    80002bb8:	e72e                	sd	a1,392(sp)
    80002bba:	eb32                	sd	a2,400(sp)
        self.set_ptr(ptr);
    80002bbc:	00000097          	auipc	ra,0x0
    80002bc0:	164080e7          	jalr	356(ra) # 80002d20 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7set_ptr17hbcba753f42d1a54eE>
    80002bc4:	a035                	j	80002bf0 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6d7a8aee2de04232E+0x15e>
        let ptr = finish_grow(new_layout, self.current_memory(), &mut self.alloc)?;
    80002bc6:	0000                	unimp
    80002bc8:	654e                	ld	a0,208(sp)
    80002bca:	65ee                	ld	a1,216(sp)
    80002bcc:	f6aa                	sd	a0,360(sp)
    80002bce:	faae                	sd	a1,368(sp)
    80002bd0:	00013097          	auipc	ra,0x13
    80002bd4:	baa080e7          	jalr	-1110(ra) # 8001577a <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h00cb4931a375be30E>
    80002bd8:	e42a                	sd	a0,8(sp)
    80002bda:	e82e                	sd	a1,16(sp)
    80002bdc:	a009                	j	80002bde <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6d7a8aee2de04232E+0x14c>
    80002bde:	6642                	ld	a2,16(sp)
    80002be0:	65a2                	ld	a1,8(sp)
    80002be2:	7546                	ld	a0,112(sp)
    80002be4:	0000a097          	auipc	ra,0xa
    80002be8:	444080e7          	jalr	1092(ra) # 8000d028 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h5998e5a20485011cE>
    80002bec:	a009                	j	80002bee <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6d7a8aee2de04232E+0x15c>
    80002bee:	a029                	j	80002bf8 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6d7a8aee2de04232E+0x166>
    80002bf0:	75c6                	ld	a1,112(sp)
    80002bf2:	4501                	li	a0,0
        Ok(())
    80002bf4:	e188                	sd	a0,0(a1)
    }
    80002bf6:	a011                	j	80002bfa <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6d7a8aee2de04232E+0x168>
    80002bf8:	a009                	j	80002bfa <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6d7a8aee2de04232E+0x168>
    80002bfa:	60fa                	ld	ra,408(sp)
    80002bfc:	611d                	addi	sp,sp,416
    80002bfe:	8082                	ret

Disassembly of section .text._ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$16with_capacity_in17hb06502444696164dE:

0000000080002c00 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$16with_capacity_in17hb06502444696164dE>:
    pub fn with_capacity_in(capacity: usize, alloc: A) -> Self {
    80002c00:	7179                	addi	sp,sp,-48
    80002c02:	f406                	sd	ra,40(sp)
    80002c04:	ec2a                	sd	a0,24(sp)
    80002c06:	4581                	li	a1,0
        Self::allocate_in(capacity, AllocInit::Uninitialized, alloc)
    80002c08:	00b10ba3          	sb	a1,23(sp)
    80002c0c:	00000097          	auipc	ra,0x0
    80002c10:	c5c080e7          	jalr	-932(ra) # 80002868 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11allocate_in17hb1a7e5211a2ca028E>
    80002c14:	e02a                	sd	a0,0(sp)
    80002c16:	e42e                	sd	a1,8(sp)
    80002c18:	a009                	j	80002c1a <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$16with_capacity_in17hb06502444696164dE+0x1a>
    }
    80002c1a:	65a2                	ld	a1,8(sp)
    80002c1c:	6502                	ld	a0,0(sp)
    80002c1e:	70a2                	ld	ra,40(sp)
    80002c20:	6145                	addi	sp,sp,48
    80002c22:	8082                	ret

Disassembly of section .text._ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$19capacity_from_bytes17hb8f80a7316d4a8fbE:

0000000080002c24 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$19capacity_from_bytes17hb8f80a7316d4a8fbE>:
    fn capacity_from_bytes(excess: usize) -> usize {
    80002c24:	1141                	addi	sp,sp,-16
    80002c26:	e02a                	sd	a0,0(sp)
    80002c28:	e42a                	sd	a0,8(sp)
        excess / mem::size_of::<T>()
    80002c2a:	a009                	j	80002c2c <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$19capacity_from_bytes17hb8f80a7316d4a8fbE+0x8>
    80002c2c:	4501                	li	a0,0
    80002c2e:	e509                	bnez	a0,80002c38 <.LBB8_4>
    80002c30:	a009                	j	80002c32 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$19capacity_from_bytes17hb8f80a7316d4a8fbE+0xe>
    }
    80002c32:	6502                	ld	a0,0(sp)
    80002c34:	0141                	addi	sp,sp,16
    80002c36:	8082                	ret

0000000080002c38 <.LBB8_4>:
        excess / mem::size_of::<T>()
    80002c38:	00023517          	auipc	a0,0x23
    80002c3c:	d0850513          	addi	a0,a0,-760 # 80025940 <str.0>

0000000080002c40 <.LBB8_5>:
    80002c40:	00023617          	auipc	a2,0x23
    80002c44:	ce860613          	addi	a2,a2,-792 # 80025928 <.L__unnamed_1>
    80002c48:	45e5                	li	a1,25
    80002c4a:	0001f097          	auipc	ra,0x1f
    80002c4e:	4b2080e7          	jalr	1202(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$23with_capacity_zeroed_in17hc0850ff3c2415cf8E:

0000000080002c54 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$23with_capacity_zeroed_in17hc0850ff3c2415cf8E>:
    pub fn with_capacity_zeroed_in(capacity: usize, alloc: A) -> Self {
    80002c54:	7179                	addi	sp,sp,-48
    80002c56:	f406                	sd	ra,40(sp)
    80002c58:	ec2a                	sd	a0,24(sp)
    80002c5a:	4585                	li	a1,1
        Self::allocate_in(capacity, AllocInit::Zeroed, alloc)
    80002c5c:	00b10ba3          	sb	a1,23(sp)
    80002c60:	00000097          	auipc	ra,0x0
    80002c64:	c08080e7          	jalr	-1016(ra) # 80002868 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11allocate_in17hb1a7e5211a2ca028E>
    80002c68:	e02a                	sd	a0,0(sp)
    80002c6a:	e42e                	sd	a1,8(sp)
    80002c6c:	a009                	j	80002c6e <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$23with_capacity_zeroed_in17hc0850ff3c2415cf8E+0x1a>
    }
    80002c6e:	65a2                	ld	a1,8(sp)
    80002c70:	6502                	ld	a0,0(sp)
    80002c72:	70a2                	ld	ra,40(sp)
    80002c74:	6145                	addi	sp,sp,48
    80002c76:	8082                	ret

Disassembly of section .text._ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17h887fa3437b1e26b7E:

0000000080002c78 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17h887fa3437b1e26b7E>:
    pub fn ptr(&self) -> *mut T {
    80002c78:	1101                	addi	sp,sp,-32
    80002c7a:	ec06                	sd	ra,24(sp)
    80002c7c:	e82a                	sd	a0,16(sp)
        self.ptr.as_ptr()
    80002c7e:	6108                	ld	a0,0(a0)
    80002c80:	00009097          	auipc	ra,0x9
    80002c84:	ef6080e7          	jalr	-266(ra) # 8000bb76 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17hc428d38b809aa8c2E>
    80002c88:	e42a                	sd	a0,8(sp)
    80002c8a:	a009                	j	80002c8c <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17h887fa3437b1e26b7E+0x14>
    }
    80002c8c:	6522                	ld	a0,8(sp)
    80002c8e:	60e2                	ld	ra,24(sp)
    80002c90:	6105                	addi	sp,sp,32
    80002c92:	8082                	ret

Disassembly of section .text._ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$6new_in17hcde8bd186b8458cbE:

0000000080002c94 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$6new_in17hcde8bd186b8458cbE>:
    pub const fn new_in(alloc: A) -> Self {
    80002c94:	7179                	addi	sp,sp,-48
        Self { ptr: Unique::dangling(), cap: 0, alloc }
    80002c96:	f406                	sd	ra,40(sp)
    80002c98:	00009097          	auipc	ra,0x9
    80002c9c:	f2e080e7          	jalr	-210(ra) # 8000bbc6 <_ZN4core3ptr6unique15Unique$LT$T$GT$8dangling17h9486dd80fcd97a92E>
    80002ca0:	e42a                	sd	a0,8(sp)
    80002ca2:	a009                	j	80002ca4 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$6new_in17hcde8bd186b8458cbE+0x10>
    80002ca4:	6522                	ld	a0,8(sp)
    80002ca6:	e82a                	sd	a0,16(sp)
    80002ca8:	4581                	li	a1,0
    80002caa:	ec2e                	sd	a1,24(sp)
    }
    80002cac:	70a2                	ld	ra,40(sp)
    80002cae:	6145                	addi	sp,sp,48
    80002cb0:	8082                	ret

Disassembly of section .text._ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve17hb5cb67f1b8f5bd01E:

0000000080002cb2 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve17hb5cb67f1b8f5bd01E>:
    pub fn reserve(&mut self, len: usize, additional: usize) {
    80002cb2:	715d                	addi	sp,sp,-80
    80002cb4:	e486                	sd	ra,72(sp)
    80002cb6:	e432                	sd	a2,8(sp)
    80002cb8:	e82e                	sd	a1,16(sp)
    80002cba:	ec2a                	sd	a0,24(sp)
    80002cbc:	f82a                	sd	a0,48(sp)
    80002cbe:	fc2e                	sd	a1,56(sp)
    80002cc0:	e0b2                	sd	a2,64(sp)
        if self.needs_to_grow(len, additional) {
    80002cc2:	00000097          	auipc	ra,0x0
    80002cc6:	cf6080e7          	jalr	-778(ra) # 800029b8 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$13needs_to_grow17ha08818b631ce0004E>
    80002cca:	f02a                	sd	a0,32(sp)
    80002ccc:	a009                	j	80002cce <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve17hb5cb67f1b8f5bd01E+0x1c>
    80002cce:	7502                	ld	a0,32(sp)
    80002cd0:	4581                	li	a1,0
    80002cd2:	00b50b63          	beq	a0,a1,80002ce8 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve17hb5cb67f1b8f5bd01E+0x36>
    80002cd6:	a009                	j	80002cd8 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve17hb5cb67f1b8f5bd01E+0x26>
            do_reserve_and_handle(self, len, additional);
    80002cd8:	6622                	ld	a2,8(sp)
    80002cda:	65c2                	ld	a1,16(sp)
    80002cdc:	6562                	ld	a0,24(sp)
    80002cde:	00000097          	auipc	ra,0x0
    80002ce2:	014080e7          	jalr	20(ra) # 80002cf2 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve21do_reserve_and_handle17h338385e566e859eeE>
    80002ce6:	a011                	j	80002cea <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve17hb5cb67f1b8f5bd01E+0x38>
        if self.needs_to_grow(len, additional) {
    80002ce8:	a011                	j	80002cec <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve17hb5cb67f1b8f5bd01E+0x3a>
    80002cea:	a009                	j	80002cec <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve17hb5cb67f1b8f5bd01E+0x3a>
    }
    80002cec:	60a6                	ld	ra,72(sp)
    80002cee:	6161                	addi	sp,sp,80
    80002cf0:	8082                	ret

Disassembly of section .text._ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve21do_reserve_and_handle17h338385e566e859eeE:

0000000080002cf2 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve21do_reserve_and_handle17h338385e566e859eeE>:
        fn do_reserve_and_handle<T, A: Allocator>(
    80002cf2:	7139                	addi	sp,sp,-64
    80002cf4:	fc06                	sd	ra,56(sp)
    80002cf6:	86b2                	mv	a3,a2
    80002cf8:	862e                	mv	a2,a1
    80002cfa:	85aa                	mv	a1,a0
    80002cfc:	f02e                	sd	a1,32(sp)
    80002cfe:	f432                	sd	a2,40(sp)
    80002d00:	f836                	sd	a3,48(sp)
    80002d02:	0028                	addi	a0,sp,8
            handle_reserve(slf.grow_amortized(len, additional));
    80002d04:	00000097          	auipc	ra,0x0
    80002d08:	d8e080e7          	jalr	-626(ra) # 80002a92 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14grow_amortized17h6d7a8aee2de04232E>
    80002d0c:	a009                	j	80002d0e <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve21do_reserve_and_handle17h338385e566e859eeE+0x1c>
    80002d0e:	0028                	addi	a0,sp,8
    80002d10:	0001b097          	auipc	ra,0x1b
    80002d14:	680080e7          	jalr	1664(ra) # 8001e390 <_ZN5alloc7raw_vec14handle_reserve17h9818f7956a53f3d6E>
    80002d18:	a009                	j	80002d1a <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve21do_reserve_and_handle17h338385e566e859eeE+0x28>
        }
    80002d1a:	70e2                	ld	ra,56(sp)
    80002d1c:	6121                	addi	sp,sp,64
    80002d1e:	8082                	ret

Disassembly of section .text._ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7set_ptr17hbcba753f42d1a54eE:

0000000080002d20 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7set_ptr17hbcba753f42d1a54eE>:
    fn set_ptr(&mut self, ptr: NonNull<[u8]>) {
    80002d20:	711d                	addi	sp,sp,-96
    80002d22:	ec86                	sd	ra,88(sp)
    80002d24:	f032                	sd	a2,32(sp)
    80002d26:	862e                	mv	a2,a1
    80002d28:	7582                	ld	a1,32(sp)
    80002d2a:	f432                	sd	a2,40(sp)
    80002d2c:	862a                	mv	a2,a0
    80002d2e:	7522                	ld	a0,40(sp)
    80002d30:	f832                	sd	a2,48(sp)
    80002d32:	e0b2                	sd	a2,64(sp)
    80002d34:	e4aa                	sd	a0,72(sp)
    80002d36:	e8ae                	sd	a1,80(sp)
        self.ptr = unsafe { Unique::new_unchecked(ptr.cast().as_ptr()) };
    80002d38:	0000c097          	auipc	ra,0xc
    80002d3c:	680080e7          	jalr	1664(ra) # 8000f3b8 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17he3c6d28f0e68e811E>
    80002d40:	fc2a                	sd	a0,56(sp)
    80002d42:	a009                	j	80002d44 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7set_ptr17hbcba753f42d1a54eE+0x24>
    80002d44:	7562                	ld	a0,56(sp)
    80002d46:	0000c097          	auipc	ra,0xc
    80002d4a:	6f2080e7          	jalr	1778(ra) # 8000f438 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h729713db2b300d39E>
    80002d4e:	ec2a                	sd	a0,24(sp)
    80002d50:	a009                	j	80002d52 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7set_ptr17hbcba753f42d1a54eE+0x32>
    80002d52:	6562                	ld	a0,24(sp)
    80002d54:	00009097          	auipc	ra,0x9
    80002d58:	d12080e7          	jalr	-750(ra) # 8000ba66 <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17h620617f59cddd065E>
    80002d5c:	e82a                	sd	a0,16(sp)
    80002d5e:	a009                	j	80002d60 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7set_ptr17hbcba753f42d1a54eE+0x40>
    80002d60:	7582                	ld	a1,32(sp)
    80002d62:	7522                	ld	a0,40(sp)
    80002d64:	6642                	ld	a2,16(sp)
    80002d66:	76c2                	ld	a3,48(sp)
    80002d68:	e290                	sd	a2,0(a3)
        self.cap = Self::capacity_from_bytes(ptr.len());
    80002d6a:	0000c097          	auipc	ra,0xc
    80002d6e:	7e6080e7          	jalr	2022(ra) # 8000f550 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$3len17h17d848b65404492bE>
    80002d72:	e42a                	sd	a0,8(sp)
    80002d74:	a009                	j	80002d76 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7set_ptr17hbcba753f42d1a54eE+0x56>
    80002d76:	6522                	ld	a0,8(sp)
    80002d78:	00000097          	auipc	ra,0x0
    80002d7c:	eac080e7          	jalr	-340(ra) # 80002c24 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$19capacity_from_bytes17hb8f80a7316d4a8fbE>
    80002d80:	e02a                	sd	a0,0(sp)
    80002d82:	a009                	j	80002d84 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7set_ptr17hbcba753f42d1a54eE+0x64>
    80002d84:	6502                	ld	a0,0(sp)
    80002d86:	75c2                	ld	a1,48(sp)
    80002d88:	e588                	sd	a0,8(a1)
    }
    80002d8a:	60e6                	ld	ra,88(sp)
    80002d8c:	6125                	addi	sp,sp,96
    80002d8e:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register5clint10read_mtime17h47cb1a320cb6e740E:

0000000080002d90 <_ZN6kernel4arch5riscv8register5clint10read_mtime17h47cb1a320cb6e740E>:
use crate::arch::riscv::qemu::layout::{CLINT_MTIME, CLINT_MTIMECMP, CLINT};

// core local interruptor (CLINT), which contains the timer.

#[inline]
unsafe fn read_mtime() -> u64 {
    80002d90:	1101                	addi	sp,sp,-32
    80002d92:	ec06                	sd	ra,24(sp)
    80002d94:	0200c537          	lui	a0,0x200c
    80002d98:	3561                	addiw	a0,a0,-8
    ptr::read_volatile(Into::<usize>::into(CLINT_MTIME) as *const u64)
    80002d9a:	00009097          	auipc	ra,0x9
    80002d9e:	c3c080e7          	jalr	-964(ra) # 8000b9d6 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hbecc82c6a2b59487E>
    80002da2:	e82a                	sd	a0,16(sp)
    80002da4:	a009                	j	80002da6 <_ZN6kernel4arch5riscv8register5clint10read_mtime17h47cb1a320cb6e740E+0x16>
    80002da6:	6542                	ld	a0,16(sp)
    80002da8:	00015097          	auipc	ra,0x15
    80002dac:	62a080e7          	jalr	1578(ra) # 800183d2 <_ZN4core3ptr13read_volatile17h53ed030574802bd4E>
    80002db0:	e42a                	sd	a0,8(sp)
    80002db2:	a009                	j	80002db4 <_ZN6kernel4arch5riscv8register5clint10read_mtime17h47cb1a320cb6e740E+0x24>
}
    80002db4:	6522                	ld	a0,8(sp)
    80002db6:	60e2                	ld	ra,24(sp)
    80002db8:	6105                	addi	sp,sp,32
    80002dba:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register5clint14write_mtimecmp17h37dad6df38dd09a3E:

0000000080002dbc <_ZN6kernel4arch5riscv8register5clint14write_mtimecmp17h37dad6df38dd09a3E>:

unsafe fn write_mtimecmp(mhartid:usize, value: u64) {
    80002dbc:	715d                	addi	sp,sp,-80
    80002dbe:	e486                	sd	ra,72(sp)
    80002dc0:	ec2e                	sd	a1,24(sp)
    80002dc2:	f02a                	sd	a0,32(sp)
    80002dc4:	f82a                	sd	a0,48(sp)
    80002dc6:	fc2e                	sd	a1,56(sp)
    80002dc8:	02004537          	lui	a0,0x2004
    let offset = Into::<usize>::into(CLINT_MTIMECMP) + 8*mhartid;
    80002dcc:	00009097          	auipc	ra,0x9
    80002dd0:	c0a080e7          	jalr	-1014(ra) # 8000b9d6 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hbecc82c6a2b59487E>
    80002dd4:	f42a                	sd	a0,40(sp)
    80002dd6:	a009                	j	80002dd8 <_ZN6kernel4arch5riscv8register5clint14write_mtimecmp17h37dad6df38dd09a3E+0x1c>
    80002dd8:	7582                	ld	a1,32(sp)
    80002dda:	4505                	li	a0,1
    80002ddc:	1576                	slli	a0,a0,0x3d
    80002dde:	157d                	addi	a0,a0,-1
    80002de0:	8d6d                	and	a0,a0,a1
    80002de2:	00359613          	slli	a2,a1,0x3
    80002de6:	e832                	sd	a2,16(sp)
    80002de8:	02b51563          	bne	a0,a1,80002e12 <.LBB1_7>
    80002dec:	a009                	j	80002dee <_ZN6kernel4arch5riscv8register5clint14write_mtimecmp17h37dad6df38dd09a3E+0x32>
    80002dee:	75a2                	ld	a1,40(sp)
    80002df0:	6542                	ld	a0,16(sp)
    80002df2:	952e                	add	a0,a0,a1
    80002df4:	e42a                	sd	a0,8(sp)
    80002df6:	02b56d63          	bltu	a0,a1,80002e30 <.LBB1_9>
    80002dfa:	a009                	j	80002dfc <_ZN6kernel4arch5riscv8register5clint14write_mtimecmp17h37dad6df38dd09a3E+0x40>
    80002dfc:	65e2                	ld	a1,24(sp)
    80002dfe:	6522                	ld	a0,8(sp)
    80002e00:	e0aa                	sd	a0,64(sp)
    ptr::write_volatile(offset as *mut u64, value);
    80002e02:	00015097          	auipc	ra,0x15
    80002e06:	5f0080e7          	jalr	1520(ra) # 800183f2 <_ZN4core3ptr14write_volatile17h935b49f1a63f6714E>
    80002e0a:	a009                	j	80002e0c <_ZN6kernel4arch5riscv8register5clint14write_mtimecmp17h37dad6df38dd09a3E+0x50>
}
    80002e0c:	60a6                	ld	ra,72(sp)
    80002e0e:	6161                	addi	sp,sp,80
    80002e10:	8082                	ret

0000000080002e12 <.LBB1_7>:
    let offset = Into::<usize>::into(CLINT_MTIMECMP) + 8*mhartid;
    80002e12:	00023517          	auipc	a0,0x23
    80002e16:	b6e50513          	addi	a0,a0,-1170 # 80025980 <str.0>

0000000080002e1a <.LBB1_8>:
    80002e1a:	00023617          	auipc	a2,0x23
    80002e1e:	b4660613          	addi	a2,a2,-1210 # 80025960 <.L__unnamed_1>
    80002e22:	02100593          	li	a1,33
    80002e26:	0001f097          	auipc	ra,0x1f
    80002e2a:	2d6080e7          	jalr	726(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080002e30 <.LBB1_9>:
    80002e30:	00023517          	auipc	a0,0x23
    80002e34:	b9050513          	addi	a0,a0,-1136 # 800259c0 <str.1>

0000000080002e38 <.LBB1_10>:
    80002e38:	00023617          	auipc	a2,0x23
    80002e3c:	b7060613          	addi	a2,a2,-1168 # 800259a8 <.L__unnamed_2>
    80002e40:	45f1                	li	a1,28
    80002e42:	0001f097          	auipc	ra,0x1f
    80002e46:	2ba080e7          	jalr	698(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel4arch5riscv8register5clint12add_mtimecmp17hca3030d0d062e6f9E:

0000000080002e4c <_ZN6kernel4arch5riscv8register5clint12add_mtimecmp17hca3030d0d062e6f9E>:

pub unsafe fn add_mtimecmp(mhartid:usize, interval:u64){
    80002e4c:	7139                	addi	sp,sp,-64
    80002e4e:	fc06                	sd	ra,56(sp)
    80002e50:	e42e                	sd	a1,8(sp)
    80002e52:	e82a                	sd	a0,16(sp)
    80002e54:	f02a                	sd	a0,32(sp)
    80002e56:	f42e                	sd	a1,40(sp)
    let value = read_mtime();
    80002e58:	00000097          	auipc	ra,0x0
    80002e5c:	f38080e7          	jalr	-200(ra) # 80002d90 <_ZN6kernel4arch5riscv8register5clint10read_mtime17h47cb1a320cb6e740E>
    80002e60:	85aa                	mv	a1,a0
    80002e62:	ec2e                	sd	a1,24(sp)
    80002e64:	f82a                	sd	a0,48(sp)
    80002e66:	a009                	j	80002e68 <_ZN6kernel4arch5riscv8register5clint12add_mtimecmp17hca3030d0d062e6f9E+0x1c>
    write_mtimecmp(mhartid, value+interval);
    80002e68:	65e2                	ld	a1,24(sp)
    80002e6a:	6522                	ld	a0,8(sp)
    80002e6c:	952e                	add	a0,a0,a1
    80002e6e:	e02a                	sd	a0,0(sp)
    80002e70:	00b56d63          	bltu	a0,a1,80002e8a <.LBB2_5>
    80002e74:	a009                	j	80002e76 <_ZN6kernel4arch5riscv8register5clint12add_mtimecmp17hca3030d0d062e6f9E+0x2a>
    80002e76:	6582                	ld	a1,0(sp)
    80002e78:	6542                	ld	a0,16(sp)
    80002e7a:	00000097          	auipc	ra,0x0
    80002e7e:	f42080e7          	jalr	-190(ra) # 80002dbc <_ZN6kernel4arch5riscv8register5clint14write_mtimecmp17h37dad6df38dd09a3E>
    80002e82:	a009                	j	80002e84 <_ZN6kernel4arch5riscv8register5clint12add_mtimecmp17hca3030d0d062e6f9E+0x38>
}
    80002e84:	70e2                	ld	ra,56(sp)
    80002e86:	6121                	addi	sp,sp,64
    80002e88:	8082                	ret

0000000080002e8a <.LBB2_5>:
    write_mtimecmp(mhartid, value+interval);
    80002e8a:	00023517          	auipc	a0,0x23
    80002e8e:	b3650513          	addi	a0,a0,-1226 # 800259c0 <str.1>

0000000080002e92 <.LBB2_6>:
    80002e92:	00023617          	auipc	a2,0x23
    80002e96:	b4e60613          	addi	a2,a2,-1202 # 800259e0 <.L__unnamed_3>
    80002e9a:	45f1                	li	a1,28
    80002e9c:	0001f097          	auipc	ra,0x1f
    80002ea0:	260080e7          	jalr	608(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel4arch5riscv8register5clint13count_mtiecmp17h29e162b64ddfbfccE:

0000000080002ea6 <_ZN6kernel4arch5riscv8register5clint13count_mtiecmp17h29e162b64ddfbfccE>:

pub fn count_mtiecmp(mhartid:usize) -> usize{
    80002ea6:	7139                	addi	sp,sp,-64
    80002ea8:	fc06                	sd	ra,56(sp)
    80002eaa:	ec2a                	sd	a0,24(sp)
    80002eac:	f42a                	sd	a0,40(sp)
    80002eae:	02000537          	lui	a0,0x2000
    let ret:usize;
    ret = Into::<usize>::into(CLINT) + 8*mhartid + 0x4000;
    80002eb2:	00009097          	auipc	ra,0x9
    80002eb6:	b24080e7          	jalr	-1244(ra) # 8000b9d6 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hbecc82c6a2b59487E>
    80002eba:	f02a                	sd	a0,32(sp)
    80002ebc:	a009                	j	80002ebe <_ZN6kernel4arch5riscv8register5clint13count_mtiecmp17h29e162b64ddfbfccE+0x18>
    80002ebe:	65e2                	ld	a1,24(sp)
    80002ec0:	4505                	li	a0,1
    80002ec2:	1576                	slli	a0,a0,0x3d
    80002ec4:	157d                	addi	a0,a0,-1
    80002ec6:	8d6d                	and	a0,a0,a1
    80002ec8:	00359613          	slli	a2,a1,0x3
    80002ecc:	e832                	sd	a2,16(sp)
    80002ece:	02b51663          	bne	a0,a1,80002efa <.LBB3_8>
    80002ed2:	a009                	j	80002ed4 <_ZN6kernel4arch5riscv8register5clint13count_mtiecmp17h29e162b64ddfbfccE+0x2e>
    80002ed4:	7582                	ld	a1,32(sp)
    80002ed6:	6542                	ld	a0,16(sp)
    80002ed8:	952e                	add	a0,a0,a1
    80002eda:	e42a                	sd	a0,8(sp)
    80002edc:	02b56e63          	bltu	a0,a1,80002f18 <.LBB3_10>
    80002ee0:	a009                	j	80002ee2 <_ZN6kernel4arch5riscv8register5clint13count_mtiecmp17h29e162b64ddfbfccE+0x3c>
    80002ee2:	65a2                	ld	a1,8(sp)
    80002ee4:	6511                	lui	a0,0x4
    80002ee6:	952e                	add	a0,a0,a1
    80002ee8:	e02a                	sd	a0,0(sp)
    80002eea:	04b56563          	bltu	a0,a1,80002f34 <.LBB3_12>
    80002eee:	a009                	j	80002ef0 <_ZN6kernel4arch5riscv8register5clint13count_mtiecmp17h29e162b64ddfbfccE+0x4a>
    80002ef0:	6502                	ld	a0,0(sp)
    80002ef2:	f82a                	sd	a0,48(sp)
    ret
}
    80002ef4:	70e2                	ld	ra,56(sp)
    80002ef6:	6121                	addi	sp,sp,64
    80002ef8:	8082                	ret

0000000080002efa <.LBB3_8>:
    ret = Into::<usize>::into(CLINT) + 8*mhartid + 0x4000;
    80002efa:	00023517          	auipc	a0,0x23
    80002efe:	a8650513          	addi	a0,a0,-1402 # 80025980 <str.0>

0000000080002f02 <.LBB3_9>:
    80002f02:	00023617          	auipc	a2,0x23
    80002f06:	af660613          	addi	a2,a2,-1290 # 800259f8 <.L__unnamed_4>
    80002f0a:	02100593          	li	a1,33
    80002f0e:	0001f097          	auipc	ra,0x1f
    80002f12:	1ee080e7          	jalr	494(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080002f18 <.LBB3_10>:
    80002f18:	00023517          	auipc	a0,0x23
    80002f1c:	aa850513          	addi	a0,a0,-1368 # 800259c0 <str.1>

0000000080002f20 <.LBB3_11>:
    80002f20:	00023617          	auipc	a2,0x23
    80002f24:	af060613          	addi	a2,a2,-1296 # 80025a10 <.L__unnamed_5>
    80002f28:	45f1                	li	a1,28
    80002f2a:	0001f097          	auipc	ra,0x1f
    80002f2e:	1d2080e7          	jalr	466(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080002f34 <.LBB3_12>:
    80002f34:	00023517          	auipc	a0,0x23
    80002f38:	a8c50513          	addi	a0,a0,-1396 # 800259c0 <str.1>

0000000080002f3c <.LBB3_13>:
    80002f3c:	00023617          	auipc	a2,0x23
    80002f40:	ad460613          	addi	a2,a2,-1324 # 80025a10 <.L__unnamed_5>
    80002f44:	45f1                	li	a1,28
    80002f46:	0001f097          	auipc	ra,0x1f
    80002f4a:	1b6080e7          	jalr	438(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6as_ref17he2102635824876d2E:

0000000080002f50 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6as_ref17he2102635824876d2E>:
    ///     println!("We got back the value: {}!", val_back);
    /// }
    /// ```
    #[stable(feature = "ptr_as_ref", since = "1.9.0")]
    #[inline]
    pub unsafe fn as_ref<'a>(self) -> Option<&'a T> {
    80002f50:	7179                	addi	sp,sp,-48
    80002f52:	f406                	sd	ra,40(sp)
    80002f54:	e42a                	sd	a0,8(sp)
    80002f56:	f02a                	sd	a0,32(sp)
        // SAFETY: the caller must guarantee that `self` is valid
        // for a reference if it isn't null.
        if self.is_null() { None } else { unsafe { Some(&*self) } }
    80002f58:	00000097          	auipc	ra,0x0
    80002f5c:	02a080e7          	jalr	42(ra) # 80002f82 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hb09234d1bdc9d8a1E>
    80002f60:	e82a                	sd	a0,16(sp)
    80002f62:	a009                	j	80002f64 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6as_ref17he2102635824876d2E+0x14>
    80002f64:	6542                	ld	a0,16(sp)
    80002f66:	4581                	li	a1,0
    80002f68:	00b50663          	beq	a0,a1,80002f74 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6as_ref17he2102635824876d2E+0x24>
    80002f6c:	a009                	j	80002f6e <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6as_ref17he2102635824876d2E+0x1e>
    80002f6e:	4501                	li	a0,0
    80002f70:	ec2a                	sd	a0,24(sp)
    80002f72:	a021                	j	80002f7a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6as_ref17he2102635824876d2E+0x2a>
    80002f74:	6522                	ld	a0,8(sp)
    80002f76:	ec2a                	sd	a0,24(sp)
    80002f78:	a009                	j	80002f7a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6as_ref17he2102635824876d2E+0x2a>
    }
    80002f7a:	6562                	ld	a0,24(sp)
    80002f7c:	70a2                	ld	ra,40(sp)
    80002f7e:	6145                	addi	sp,sp,48
    80002f80:	8082                	ret

Disassembly of section .text._ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hb09234d1bdc9d8a1E:

0000000080002f82 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hb09234d1bdc9d8a1E>:
    pub const fn is_null(self) -> bool {
    80002f82:	1101                	addi	sp,sp,-32
    80002f84:	ec06                	sd	ra,24(sp)
    80002f86:	e82a                	sd	a0,16(sp)
        (self as *const u8).guaranteed_eq(null())
    80002f88:	e42a                	sd	a0,8(sp)
    80002f8a:	a009                	j	80002f8c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hb09234d1bdc9d8a1E+0xa>
    80002f8c:	6522                	ld	a0,8(sp)
    80002f8e:	4581                	li	a1,0
    80002f90:	0001f097          	auipc	ra,0x1f
    80002f94:	f4c080e7          	jalr	-180(ra) # 80021edc <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$13guaranteed_eq17h0ce622e77376dc6cE>
    80002f98:	e02a                	sd	a0,0(sp)
    80002f9a:	a009                	j	80002f9c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hb09234d1bdc9d8a1E+0x1a>
    }
    80002f9c:	6502                	ld	a0,0(sp)
    80002f9e:	60e2                	ld	ra,24(sp)
    80002fa0:	6105                	addi	sp,sp,32
    80002fa2:	8082                	ret

Disassembly of section .text._ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE:

0000000080002fa4 <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE>:
        }
    }

    /// Init the bcache.
    /// Should only be called once when the kernel inits itself.
    pub fn binit(&self) {
    80002fa4:	7125                	addi	sp,sp,-416
    80002fa6:	ef06                	sd	ra,408(sp)
    80002fa8:	faaa                	sd	a0,368(sp)
        let mut ctrl = self.ctrl.acquire();
    80002faa:	0000d097          	auipc	ra,0xd
    80002fae:	3ea080e7          	jalr	1002(ra) # 80010394 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h4c9081acf22588feE>
    80002fb2:	f22a                	sd	a0,288(sp)
    80002fb4:	a009                	j	80002fb6 <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x12>
    80002fb6:	1208                	addi	a0,sp,288
        let len = ctrl.inner.len();
    80002fb8:	0000e097          	auipc	ra,0xe
    80002fbc:	398080e7          	jalr	920(ra) # 80011350 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc8a5a3c7c4ffa947E>
    80002fc0:	ee2a                	sd	a0,280(sp)
    80002fc2:	a009                	j	80002fc4 <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x20>
    80002fc4:	6572                	ld	a0,280(sp)
    80002fc6:	45f9                	li	a1,30
    80002fc8:	00002097          	auipc	ra,0x2
    80002fcc:	698080e7          	jalr	1688(ra) # 80005660 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h0b5a743241a7cbfaE>
    80002fd0:	85aa                	mv	a1,a0
    80002fd2:	ea2e                	sd	a1,272(sp)
    80002fd4:	feaa                	sd	a0,376(sp)
    80002fd6:	a009                	j	80002fd8 <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x34>
    80002fd8:	1208                	addi	a0,sp,288

        // init the head and tail of the lru list
        ctrl.head = &mut ctrl.inner[0];
    80002fda:	0000e097          	auipc	ra,0xe
    80002fde:	434080e7          	jalr	1076(ra) # 8001140e <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7fbd4bc7b8273f3cE>
    80002fe2:	e62a                	sd	a0,264(sp)
    80002fe4:	a009                	j	80002fe6 <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x42>
    80002fe6:	6532                	ld	a0,264(sp)
    80002fe8:	fdaa                	sd	a0,248(sp)
    80002fea:	1208                	addi	a0,sp,288
    80002fec:	0000e097          	auipc	ra,0xe
    80002ff0:	422080e7          	jalr	1058(ra) # 8001140e <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7fbd4bc7b8273f3cE>
    80002ff4:	e22a                	sd	a0,256(sp)
    80002ff6:	a009                	j	80002ff8 <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x54>
    80002ff8:	756e                	ld	a0,248(sp)
    80002ffa:	6592                	ld	a1,256(sp)
    80002ffc:	4aa5b823          	sd	a0,1200(a1)
    80003000:	1208                	addi	a0,sp,288
        ctrl.tail = &mut ctrl.inner[len-1];
    80003002:	0000e097          	auipc	ra,0xe
    80003006:	40c080e7          	jalr	1036(ra) # 8001140e <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7fbd4bc7b8273f3cE>
    8000300a:	f9aa                	sd	a0,240(sp)
    8000300c:	a009                	j	8000300e <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x6a>
    8000300e:	6552                	ld	a0,272(sp)
    80003010:	fff50593          	addi	a1,a0,-1
    80003014:	f5ae                	sd	a1,232(sp)
    80003016:	28b56263          	bltu	a0,a1,8000329a <.LBB0_62>
    8000301a:	a009                	j	8000301c <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x78>
    8000301c:	75ae                	ld	a1,232(sp)
    8000301e:	4575                	li	a0,29
    80003020:	28b56c63          	bltu	a0,a1,800032b8 <.LBB0_63+0x16>
    80003024:	a009                	j	80003026 <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x82>
    80003026:	754e                	ld	a0,240(sp)
    80003028:	75ae                	ld	a1,232(sp)
    8000302a:	02800613          	li	a2,40
    8000302e:	02c585b3          	mul	a1,a1,a2
    80003032:	952e                	add	a0,a0,a1
    80003034:	edaa                	sd	a0,216(sp)
    80003036:	1208                	addi	a0,sp,288
    80003038:	0000e097          	auipc	ra,0xe
    8000303c:	3d6080e7          	jalr	982(ra) # 8001140e <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7fbd4bc7b8273f3cE>
    80003040:	f1aa                	sd	a0,224(sp)
    80003042:	a009                	j	80003044 <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0xa0>
    80003044:	656e                	ld	a0,216(sp)
    80003046:	758e                	ld	a1,224(sp)
    80003048:	4aa5bc23          	sd	a0,1208(a1)

        // init prev and next field
        ctrl.inner[0].prev = ptr::null_mut();
    8000304c:	a009                	j	8000304e <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0xaa>
    8000304e:	1208                	addi	a0,sp,288
    80003050:	0000e097          	auipc	ra,0xe
    80003054:	3be080e7          	jalr	958(ra) # 8001140e <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7fbd4bc7b8273f3cE>
    80003058:	e9aa                	sd	a0,208(sp)
    8000305a:	a009                	j	8000305c <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0xb8>
    8000305c:	65ce                	ld	a1,208(sp)
    8000305e:	4501                	li	a0,0
    80003060:	e188                	sd	a0,0(a1)
    80003062:	1208                	addi	a0,sp,288
        ctrl.inner[0].next = &mut ctrl.inner[1];
    80003064:	0000e097          	auipc	ra,0xe
    80003068:	3aa080e7          	jalr	938(ra) # 8001140e <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7fbd4bc7b8273f3cE>
    8000306c:	e5aa                	sd	a0,200(sp)
    8000306e:	a009                	j	80003070 <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0xcc>
    80003070:	652e                	ld	a0,200(sp)
    80003072:	02850513          	addi	a0,a0,40
    80003076:	fd2a                	sd	a0,184(sp)
    80003078:	1208                	addi	a0,sp,288
    8000307a:	0000e097          	auipc	ra,0xe
    8000307e:	394080e7          	jalr	916(ra) # 8001140e <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7fbd4bc7b8273f3cE>
    80003082:	e1aa                	sd	a0,192(sp)
    80003084:	a009                	j	80003086 <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0xe2>
    80003086:	756a                	ld	a0,184(sp)
    80003088:	658e                	ld	a1,192(sp)
    8000308a:	e588                	sd	a0,8(a1)
    8000308c:	1208                	addi	a0,sp,288
        ctrl.inner[len-1].prev = &mut ctrl.inner[len-2];
    8000308e:	0000e097          	auipc	ra,0xe
    80003092:	380080e7          	jalr	896(ra) # 8001140e <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7fbd4bc7b8273f3cE>
    80003096:	f92a                	sd	a0,176(sp)
    80003098:	a009                	j	8000309a <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0xf6>
    8000309a:	6552                	ld	a0,272(sp)
    8000309c:	ffe50593          	addi	a1,a0,-2
    800030a0:	f52e                	sd	a1,168(sp)
    800030a2:	22b56663          	bltu	a0,a1,800032ce <.LBB0_65>
    800030a6:	a009                	j	800030a8 <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x104>
    800030a8:	75aa                	ld	a1,168(sp)
    800030aa:	4575                	li	a0,29
    800030ac:	24b56063          	bltu	a0,a1,800032ec <.LBB0_66+0x16>
    800030b0:	a009                	j	800030b2 <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x10e>
    800030b2:	754a                	ld	a0,176(sp)
    800030b4:	75aa                	ld	a1,168(sp)
    800030b6:	02800613          	li	a2,40
    800030ba:	02c585b3          	mul	a1,a1,a2
    800030be:	952e                	add	a0,a0,a1
    800030c0:	ed2a                	sd	a0,152(sp)
    800030c2:	1208                	addi	a0,sp,288
    800030c4:	0000e097          	auipc	ra,0xe
    800030c8:	34a080e7          	jalr	842(ra) # 8001140e <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7fbd4bc7b8273f3cE>
    800030cc:	f12a                	sd	a0,160(sp)
    800030ce:	a009                	j	800030d0 <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x12c>
    800030d0:	6552                	ld	a0,272(sp)
    800030d2:	fff50593          	addi	a1,a0,-1
    800030d6:	e92e                	sd	a1,144(sp)
    800030d8:	22b56563          	bltu	a0,a1,80003302 <.LBB0_68>
    800030dc:	a009                	j	800030de <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x13a>
    800030de:	65ca                	ld	a1,144(sp)
    800030e0:	4575                	li	a0,29
    800030e2:	22b56f63          	bltu	a0,a1,80003320 <.LBB0_69+0x16>
    800030e6:	a009                	j	800030e8 <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x144>
    800030e8:	656a                	ld	a0,152(sp)
    800030ea:	758a                	ld	a1,160(sp)
    800030ec:	664a                	ld	a2,144(sp)
    800030ee:	02800693          	li	a3,40
    800030f2:	02d60633          	mul	a2,a2,a3
    800030f6:	95b2                	add	a1,a1,a2
    800030f8:	e188                	sd	a0,0(a1)
        ctrl.inner[len-1].next = ptr::null_mut();
    800030fa:	a009                	j	800030fc <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x158>
    800030fc:	1208                	addi	a0,sp,288
    800030fe:	0000e097          	auipc	ra,0xe
    80003102:	310080e7          	jalr	784(ra) # 8001140e <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7fbd4bc7b8273f3cE>
    80003106:	e52a                	sd	a0,136(sp)
    80003108:	a009                	j	8000310a <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x166>
    8000310a:	6552                	ld	a0,272(sp)
    8000310c:	fff50593          	addi	a1,a0,-1
    80003110:	e12e                	sd	a1,128(sp)
    80003112:	22b56263          	bltu	a0,a1,80003336 <.LBB0_71>
    80003116:	a009                	j	80003118 <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x174>
    80003118:	658a                	ld	a1,128(sp)
    8000311a:	4575                	li	a0,29
    8000311c:	22b56c63          	bltu	a0,a1,80003354 <.LBB0_72+0x16>
    80003120:	a009                	j	80003122 <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x17e>
    80003122:	6552                	ld	a0,272(sp)
    80003124:	65aa                	ld	a1,136(sp)
    80003126:	660a                	ld	a2,128(sp)
    80003128:	02800693          	li	a3,40
    8000312c:	02d60633          	mul	a2,a2,a3
    80003130:	962e                	add	a2,a2,a1
    80003132:	4581                	li	a1,0
    80003134:	e60c                	sd	a1,8(a2)
        for i in 1..(len-1) {
    80003136:	fff50593          	addi	a1,a0,-1
    8000313a:	fcae                	sd	a1,120(sp)
    8000313c:	22b56763          	bltu	a0,a1,8000336a <.LBB0_74>
    80003140:	a009                	j	80003142 <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x19e>
    80003142:	75e6                	ld	a1,120(sp)
    80003144:	4505                	li	a0,1
    80003146:	f62a                	sd	a0,296(sp)
    80003148:	fa2e                	sd	a1,304(sp)
    8000314a:	0001c097          	auipc	ra,0x1c
    8000314e:	67e080e7          	jalr	1662(ra) # 8001f7c8 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he0a8d93712e5493bE>
    80003152:	f4aa                	sd	a0,104(sp)
    80003154:	f8ae                	sd	a1,112(sp)
    80003156:	a009                	j	80003158 <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x1b4>
    80003158:	7546                	ld	a0,112(sp)
    8000315a:	75a6                	ld	a1,104(sp)
    8000315c:	fe2e                	sd	a1,312(sp)
    8000315e:	e2aa                	sd	a0,320(sp)
    80003160:	a009                	j	80003162 <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x1be>
    80003162:	1a28                	addi	a0,sp,312
    80003164:	0001c097          	auipc	ra,0x1c
    80003168:	5f6080e7          	jalr	1526(ra) # 8001f75a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE>
    8000316c:	e6aa                	sd	a0,328(sp)
    8000316e:	eaae                	sd	a1,336(sp)
    80003170:	a009                	j	80003172 <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x1ce>
    80003172:	6536                	ld	a0,328(sp)
    80003174:	4581                	li	a1,0
    80003176:	00b50463          	beq	a0,a1,8000317e <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x1da>
    8000317a:	a009                	j	8000317c <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x1d8>
    8000317c:	a809                	j	8000318e <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x1ea>
    8000317e:	1208                	addi	a0,sp,288
            ctrl.inner[i].prev = &mut ctrl.inner[i-1];
            ctrl.inner[i].next = &mut ctrl.inner[i+1];
        }
        
        // init index
        ctrl.inner.iter_mut()
    80003180:	0000e097          	auipc	ra,0xe
    80003184:	28e080e7          	jalr	654(ra) # 8001140e <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7fbd4bc7b8273f3cE>
    80003188:	f0aa                	sd	a0,96(sp)
    8000318a:	a8c1                	j	8000325a <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x2b6>
        for i in 1..(len-1) {
    8000318c:	0000                	unimp
    8000318e:	6556                	ld	a0,336(sp)
    80003190:	e8aa                	sd	a0,80(sp)
    80003192:	e32a                	sd	a0,384(sp)
    80003194:	e72a                	sd	a0,392(sp)
    80003196:	eb2a                	sd	a0,400(sp)
    80003198:	1208                	addi	a0,sp,288
            ctrl.inner[i].prev = &mut ctrl.inner[i-1];
    8000319a:	0000e097          	auipc	ra,0xe
    8000319e:	274080e7          	jalr	628(ra) # 8001140e <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7fbd4bc7b8273f3cE>
    800031a2:	ecaa                	sd	a0,88(sp)
    800031a4:	a009                	j	800031a6 <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x202>
    800031a6:	6546                	ld	a0,80(sp)
    800031a8:	fff50593          	addi	a1,a0,-1
    800031ac:	e4ae                	sd	a1,72(sp)
    800031ae:	1cb56d63          	bltu	a0,a1,80003388 <.LBB0_76>
    800031b2:	a009                	j	800031b4 <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x210>
    800031b4:	65a6                	ld	a1,72(sp)
    800031b6:	4575                	li	a0,29
    800031b8:	1eb56763          	bltu	a0,a1,800033a6 <.LBB0_77+0x16>
    800031bc:	a009                	j	800031be <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x21a>
    800031be:	6566                	ld	a0,88(sp)
    800031c0:	65a6                	ld	a1,72(sp)
    800031c2:	02800613          	li	a2,40
    800031c6:	02c585b3          	mul	a1,a1,a2
    800031ca:	952e                	add	a0,a0,a1
    800031cc:	fc2a                	sd	a0,56(sp)
    800031ce:	1208                	addi	a0,sp,288
    800031d0:	0000e097          	auipc	ra,0xe
    800031d4:	23e080e7          	jalr	574(ra) # 8001140e <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7fbd4bc7b8273f3cE>
    800031d8:	e0aa                	sd	a0,64(sp)
    800031da:	a009                	j	800031dc <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x238>
    800031dc:	65c6                	ld	a1,80(sp)
    800031de:	4575                	li	a0,29
    800031e0:	1cb56e63          	bltu	a0,a1,800033bc <.LBB0_78+0x14>
    800031e4:	a009                	j	800031e6 <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x242>
    800031e6:	7562                	ld	a0,56(sp)
    800031e8:	6586                	ld	a1,64(sp)
    800031ea:	6646                	ld	a2,80(sp)
    800031ec:	02800693          	li	a3,40
    800031f0:	02d60633          	mul	a2,a2,a3
    800031f4:	95b2                	add	a1,a1,a2
    800031f6:	e188                	sd	a0,0(a1)
    800031f8:	1208                	addi	a0,sp,288
            ctrl.inner[i].next = &mut ctrl.inner[i+1];
    800031fa:	0000e097          	auipc	ra,0xe
    800031fe:	214080e7          	jalr	532(ra) # 8001140e <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7fbd4bc7b8273f3cE>
    80003202:	f82a                	sd	a0,48(sp)
    80003204:	a009                	j	80003206 <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x262>
    80003206:	65c6                	ld	a1,80(sp)
    80003208:	00158513          	addi	a0,a1,1
    8000320c:	f42a                	sd	a0,40(sp)
    8000320e:	1cb56263          	bltu	a0,a1,800033d2 <.LBB0_80>
    80003212:	a009                	j	80003214 <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x270>
    80003214:	75a2                	ld	a1,40(sp)
    80003216:	4575                	li	a0,29
    80003218:	1cb56b63          	bltu	a0,a1,800033ee <.LBB0_81+0x14>
    8000321c:	a009                	j	8000321e <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x27a>
    8000321e:	7542                	ld	a0,48(sp)
    80003220:	75a2                	ld	a1,40(sp)
    80003222:	02800613          	li	a2,40
    80003226:	02c585b3          	mul	a1,a1,a2
    8000322a:	952e                	add	a0,a0,a1
    8000322c:	ec2a                	sd	a0,24(sp)
    8000322e:	1208                	addi	a0,sp,288
    80003230:	0000e097          	auipc	ra,0xe
    80003234:	1de080e7          	jalr	478(ra) # 8001140e <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7fbd4bc7b8273f3cE>
    80003238:	f02a                	sd	a0,32(sp)
    8000323a:	a009                	j	8000323c <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x298>
    8000323c:	65c6                	ld	a1,80(sp)
    8000323e:	4575                	li	a0,29
    80003240:	1cb56263          	bltu	a0,a1,80003404 <.LBB0_82+0x14>
    80003244:	a009                	j	80003246 <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x2a2>
    80003246:	6562                	ld	a0,24(sp)
    80003248:	7582                	ld	a1,32(sp)
    8000324a:	6646                	ld	a2,80(sp)
    8000324c:	02800693          	li	a3,40
    80003250:	02d60633          	mul	a2,a2,a3
    80003254:	95b2                	add	a1,a1,a2
    80003256:	e588                	sd	a0,8(a1)
        for i in 1..(len-1) {
    80003258:	b729                	j	80003162 <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x1be>
        ctrl.inner.iter_mut()
    8000325a:	7506                	ld	a0,96(sp)
    8000325c:	45f9                	li	a1,30
    8000325e:	00002097          	auipc	ra,0x2
    80003262:	416080e7          	jalr	1046(ra) # 80005674 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h56877d4d8de3d254E>
    80003266:	e42a                	sd	a0,8(sp)
    80003268:	e82e                	sd	a1,16(sp)
    8000326a:	a009                	j	8000326c <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x2c8>
    8000326c:	6642                	ld	a2,16(sp)
    8000326e:	65a2                	ld	a1,8(sp)
    80003270:	0aa8                	addi	a0,sp,344
    80003272:	00008097          	auipc	ra,0x8
    80003276:	92c080e7          	jalr	-1748(ra) # 8000ab9e <_ZN4core4iter6traits8iterator8Iterator9enumerate17h42a569d91d49dc41E>
    8000327a:	a009                	j	8000327c <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x2d8>
    8000327c:	0aa8                	addi	a0,sp,344
    8000327e:	0000f097          	auipc	ra,0xf
    80003282:	e7a080e7          	jalr	-390(ra) # 800120f8 <_ZN4core4iter6traits8iterator8Iterator8for_each17hc49183b8c223967eE>
    80003286:	a009                	j	80003288 <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x2e4>
    80003288:	1208                	addi	a0,sp,288
            .enumerate()
            .for_each(|(i, b)| b.index = i);
    }
    8000328a:	00004097          	auipc	ra,0x4
    8000328e:	dbe080e7          	jalr	-578(ra) # 80007048 <_ZN4core3ptr89drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..fs..bio..BufLru$GT$$GT$17h9c86fb58887d325bE>
    80003292:	a009                	j	80003294 <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE+0x2f0>
    80003294:	60fa                	ld	ra,408(sp)
    80003296:	611d                	addi	sp,sp,416
    80003298:	8082                	ret

000000008000329a <.LBB0_62>:
        ctrl.tail = &mut ctrl.inner[len-1];
    8000329a:	00022517          	auipc	a0,0x22
    8000329e:	7d650513          	addi	a0,a0,2006 # 80025a70 <str.0>

00000000800032a2 <.LBB0_63>:
    800032a2:	00022617          	auipc	a2,0x22
    800032a6:	7ae60613          	addi	a2,a2,1966 # 80025a50 <.L__unnamed_1>
    800032aa:	02100593          	li	a1,33
    800032ae:	0001f097          	auipc	ra,0x1f
    800032b2:	e4e080e7          	jalr	-434(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    800032b6:	0000                	unimp
    800032b8:	752e                	ld	a0,232(sp)

00000000800032ba <.LBB0_64>:
    800032ba:	00022617          	auipc	a2,0x22
    800032be:	7de60613          	addi	a2,a2,2014 # 80025a98 <.L__unnamed_2>
    800032c2:	45f9                	li	a1,30
    800032c4:	0001f097          	auipc	ra,0x1f
    800032c8:	e64080e7          	jalr	-412(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

00000000800032ce <.LBB0_65>:
        ctrl.inner[len-1].prev = &mut ctrl.inner[len-2];
    800032ce:	00022517          	auipc	a0,0x22
    800032d2:	7a250513          	addi	a0,a0,1954 # 80025a70 <str.0>

00000000800032d6 <.LBB0_66>:
    800032d6:	00022617          	auipc	a2,0x22
    800032da:	7da60613          	addi	a2,a2,2010 # 80025ab0 <.L__unnamed_3>
    800032de:	02100593          	li	a1,33
    800032e2:	0001f097          	auipc	ra,0x1f
    800032e6:	e1a080e7          	jalr	-486(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    800032ea:	0000                	unimp
    800032ec:	752a                	ld	a0,168(sp)

00000000800032ee <.LBB0_67>:
    800032ee:	00022617          	auipc	a2,0x22
    800032f2:	7da60613          	addi	a2,a2,2010 # 80025ac8 <.L__unnamed_4>
    800032f6:	45f9                	li	a1,30
    800032f8:	0001f097          	auipc	ra,0x1f
    800032fc:	e30080e7          	jalr	-464(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

0000000080003302 <.LBB0_68>:
    80003302:	00022517          	auipc	a0,0x22
    80003306:	76e50513          	addi	a0,a0,1902 # 80025a70 <str.0>

000000008000330a <.LBB0_69>:
    8000330a:	00022617          	auipc	a2,0x22
    8000330e:	7d660613          	addi	a2,a2,2006 # 80025ae0 <.L__unnamed_5>
    80003312:	02100593          	li	a1,33
    80003316:	0001f097          	auipc	ra,0x1f
    8000331a:	de6080e7          	jalr	-538(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8000331e:	0000                	unimp
    80003320:	654a                	ld	a0,144(sp)

0000000080003322 <.LBB0_70>:
    80003322:	00022617          	auipc	a2,0x22
    80003326:	7d660613          	addi	a2,a2,2006 # 80025af8 <.L__unnamed_6>
    8000332a:	45f9                	li	a1,30
    8000332c:	0001f097          	auipc	ra,0x1f
    80003330:	dfc080e7          	jalr	-516(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

0000000080003336 <.LBB0_71>:
        ctrl.inner[len-1].next = ptr::null_mut();
    80003336:	00022517          	auipc	a0,0x22
    8000333a:	73a50513          	addi	a0,a0,1850 # 80025a70 <str.0>

000000008000333e <.LBB0_72>:
    8000333e:	00022617          	auipc	a2,0x22
    80003342:	7d260613          	addi	a2,a2,2002 # 80025b10 <.L__unnamed_7>
    80003346:	02100593          	li	a1,33
    8000334a:	0001f097          	auipc	ra,0x1f
    8000334e:	db2080e7          	jalr	-590(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80003352:	0000                	unimp
    80003354:	650a                	ld	a0,128(sp)

0000000080003356 <.LBB0_73>:
    80003356:	00022617          	auipc	a2,0x22
    8000335a:	7d260613          	addi	a2,a2,2002 # 80025b28 <.L__unnamed_8>
    8000335e:	45f9                	li	a1,30
    80003360:	0001f097          	auipc	ra,0x1f
    80003364:	dc8080e7          	jalr	-568(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

000000008000336a <.LBB0_74>:
        for i in 1..(len-1) {
    8000336a:	00022517          	auipc	a0,0x22
    8000336e:	70650513          	addi	a0,a0,1798 # 80025a70 <str.0>

0000000080003372 <.LBB0_75>:
    80003372:	00022617          	auipc	a2,0x22
    80003376:	7ce60613          	addi	a2,a2,1998 # 80025b40 <.L__unnamed_9>
    8000337a:	02100593          	li	a1,33
    8000337e:	0001f097          	auipc	ra,0x1f
    80003382:	d7e080e7          	jalr	-642(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080003388 <.LBB0_76>:
            ctrl.inner[i].prev = &mut ctrl.inner[i-1];
    80003388:	00022517          	auipc	a0,0x22
    8000338c:	6e850513          	addi	a0,a0,1768 # 80025a70 <str.0>

0000000080003390 <.LBB0_77>:
    80003390:	00022617          	auipc	a2,0x22
    80003394:	7c860613          	addi	a2,a2,1992 # 80025b58 <.L__unnamed_10>
    80003398:	02100593          	li	a1,33
    8000339c:	0001f097          	auipc	ra,0x1f
    800033a0:	d60080e7          	jalr	-672(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    800033a4:	0000                	unimp
    800033a6:	6526                	ld	a0,72(sp)

00000000800033a8 <.LBB0_78>:
    800033a8:	00022617          	auipc	a2,0x22
    800033ac:	7c860613          	addi	a2,a2,1992 # 80025b70 <.L__unnamed_11>
    800033b0:	45f9                	li	a1,30
    800033b2:	0001f097          	auipc	ra,0x1f
    800033b6:	d76080e7          	jalr	-650(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    800033ba:	0000                	unimp
    800033bc:	6546                	ld	a0,80(sp)

00000000800033be <.LBB0_79>:
    800033be:	00022617          	auipc	a2,0x22
    800033c2:	7ca60613          	addi	a2,a2,1994 # 80025b88 <.L__unnamed_12>
    800033c6:	45f9                	li	a1,30
    800033c8:	0001f097          	auipc	ra,0x1f
    800033cc:	d60080e7          	jalr	-672(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

00000000800033d2 <.LBB0_80>:
            ctrl.inner[i].next = &mut ctrl.inner[i+1];
    800033d2:	00022517          	auipc	a0,0x22
    800033d6:	7ee50513          	addi	a0,a0,2030 # 80025bc0 <str.1>

00000000800033da <.LBB0_81>:
    800033da:	00022617          	auipc	a2,0x22
    800033de:	7c660613          	addi	a2,a2,1990 # 80025ba0 <.L__unnamed_13>
    800033e2:	45f1                	li	a1,28
    800033e4:	0001f097          	auipc	ra,0x1f
    800033e8:	d18080e7          	jalr	-744(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    800033ec:	0000                	unimp
    800033ee:	7522                	ld	a0,40(sp)

00000000800033f0 <.LBB0_82>:
    800033f0:	00022617          	auipc	a2,0x22
    800033f4:	7f060613          	addi	a2,a2,2032 # 80025be0 <.L__unnamed_14>
    800033f8:	45f9                	li	a1,30
    800033fa:	0001f097          	auipc	ra,0x1f
    800033fe:	d2e080e7          	jalr	-722(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80003402:	0000                	unimp
    80003404:	6546                	ld	a0,80(sp)

0000000080003406 <.LBB0_83>:
    80003406:	00022617          	auipc	a2,0x22
    8000340a:	7f260613          	addi	a2,a2,2034 # 80025bf8 <.L__unnamed_15>
    8000340e:	45f9                	li	a1,30
    80003410:	0001f097          	auipc	ra,0x1f
    80003414:	d18080e7          	jalr	-744(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel2fs3bio6Bcache4bget17h5f7e8a4c3a341a1bE:

000000008000341a <_ZN6kernel2fs3bio6Bcache4bget17h5f7e8a4c3a341a1bE>:

    fn bget(&self, dev: u32, blockno: u32) -> Buf<'_> {
    8000341a:	716d                	addi	sp,sp,-272
    8000341c:	e606                	sd	ra,264(sp)
    8000341e:	ecae                	sd	a1,88(sp)
    80003420:	85aa                	mv	a1,a0
    80003422:	6566                	ld	a0,88(sp)
    80003424:	f0ae                	sd	a1,96(sp)
    80003426:	85b6                	mv	a1,a3
    80003428:	f4ae                	sd	a1,104(sp)
    8000342a:	85b2                	mv	a1,a2
    8000342c:	f8ae                	sd	a1,112(sp)
    8000342e:	edaa                	sd	a0,216(sp)
    80003430:	d1b2                	sw	a2,224(sp)
    80003432:	d3b6                	sw	a3,228(sp)
        let mut ctrl = self.ctrl.acquire();
    80003434:	0000d097          	auipc	ra,0xd
    80003438:	f60080e7          	jalr	-160(ra) # 80010394 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h4c9081acf22588feE>
    8000343c:	fcaa                	sd	a0,120(sp)
    8000343e:	a009                	j	80003440 <_ZN6kernel2fs3bio6Bcache4bget17h5f7e8a4c3a341a1bE+0x26>
    80003440:	18a8                	addi	a0,sp,120

        // find cached block
        match ctrl.find_cached(dev, blockno) {
    80003442:	0000e097          	auipc	ra,0xe
    80003446:	fcc080e7          	jalr	-52(ra) # 8001140e <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7fbd4bc7b8273f3cE>
    8000344a:	e8aa                	sd	a0,80(sp)
    8000344c:	a009                	j	8000344e <_ZN6kernel2fs3bio6Bcache4bget17h5f7e8a4c3a341a1bE+0x34>
    8000344e:	76a6                	ld	a3,104(sp)
    80003450:	7646                	ld	a2,112(sp)
    80003452:	65c6                	ld	a1,80(sp)
    80003454:	0108                	addi	a0,sp,128
    80003456:	00000097          	auipc	ra,0x0
    8000345a:	41e080e7          	jalr	1054(ra) # 80003874 <_ZN6kernel2fs3bio6BufLru11find_cached17h75fa078c96ee4834E>
    8000345e:	a009                	j	80003460 <_ZN6kernel2fs3bio6Bcache4bget17h5f7e8a4c3a341a1bE+0x46>
            Some((index, rc_ptr)) => {
    80003460:	650a                	ld	a0,128(sp)
    80003462:	4581                	li	a1,0
    80003464:	00b50463          	beq	a0,a1,8000346c <_ZN6kernel2fs3bio6Bcache4bget17h5f7e8a4c3a341a1bE+0x52>
    80003468:	a009                	j	8000346a <_ZN6kernel2fs3bio6Bcache4bget17h5f7e8a4c3a341a1bE+0x50>
    8000346a:	a809                	j	8000347c <_ZN6kernel2fs3bio6Bcache4bget17h5f7e8a4c3a341a1bE+0x62>
    8000346c:	18a8                	addi	a0,sp,120
                }
            }
            None => {
                // not cached
                // recycle the least recently used (LRU) unused buffer
                match ctrl.recycle(dev, blockno) {
    8000346e:	0000e097          	auipc	ra,0xe
    80003472:	fa0080e7          	jalr	-96(ra) # 8001140e <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7fbd4bc7b8273f3cE>
    80003476:	e4aa                	sd	a0,72(sp)
    80003478:	a0ad                	j	800034e2 <_ZN6kernel2fs3bio6Bcache4bget17h5f7e8a4c3a341a1bE+0xc8>
        match ctrl.find_cached(dev, blockno) {
    8000347a:	0000                	unimp
            Some((index, rc_ptr)) => {
    8000347c:	652a                	ld	a0,136(sp)
    8000347e:	fc2a                	sd	a0,56(sp)
    80003480:	f5aa                	sd	a0,232(sp)
    80003482:	654a                	ld	a0,144(sp)
    80003484:	e0aa                	sd	a0,64(sp)
    80003486:	f9aa                	sd	a0,240(sp)
                drop(ctrl);
    80003488:	7566                	ld	a0,120(sp)
    8000348a:	0001a097          	auipc	ra,0x1a
    8000348e:	a6e080e7          	jalr	-1426(ra) # 8001cef8 <_ZN4core3mem4drop17h82526bd482ef36a5E>
    80003492:	a009                	j	80003494 <_ZN6kernel2fs3bio6Bcache4bget17h5f7e8a4c3a341a1bE+0x7a>
    80003494:	75e2                	ld	a1,56(sp)
    80003496:	4575                	li	a0,29
                    data: Some(self.bufs[index].data.lock())
    80003498:	12b56163          	bltu	a0,a1,800035ba <.LBB1_27+0xb2>
    8000349c:	a009                	j	8000349e <_ZN6kernel2fs3bio6Bcache4bget17h5f7e8a4c3a341a1bE+0x84>
    8000349e:	6566                	ld	a0,88(sp)
    800034a0:	75e2                	ld	a1,56(sp)
    800034a2:	44000613          	li	a2,1088
    800034a6:	02c585b3          	mul	a1,a1,a2
    800034aa:	952e                	add	a0,a0,a1
    800034ac:	4e050513          	addi	a0,a0,1248
    800034b0:	0001a097          	auipc	ra,0x1a
    800034b4:	e8c080e7          	jalr	-372(ra) # 8001d33c <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$4lock17h852a891f9af492ecE>
    800034b8:	f42a                	sd	a0,40(sp)
    800034ba:	f82e                	sd	a1,48(sp)
    800034bc:	a009                	j	800034be <_ZN6kernel2fs3bio6Bcache4bget17h5f7e8a4c3a341a1bE+0xa4>
    800034be:	7586                	ld	a1,96(sp)
    800034c0:	6506                	ld	a0,64(sp)
    800034c2:	7626                	ld	a2,104(sp)
    800034c4:	76c6                	ld	a3,112(sp)
    800034c6:	7762                	ld	a4,56(sp)
    800034c8:	77c2                	ld	a5,48(sp)
    800034ca:	7822                	ld	a6,40(sp)
    800034cc:	ed42                	sd	a6,152(sp)
    800034ce:	f13e                	sd	a5,160(sp)
                Buf {
    800034d0:	e198                	sd	a4,0(a1)
    800034d2:	d194                	sw	a3,32(a1)
    800034d4:	d1d0                	sw	a2,36(a1)
    800034d6:	e588                	sd	a0,8(a1)
    800034d8:	666a                	ld	a2,152(sp)
    800034da:	750a                	ld	a0,160(sp)
    800034dc:	e990                	sd	a2,16(a1)
    800034de:	ed88                	sd	a0,24(a1)
                    }
                    None => panic!("no usable buffer")
                }
            }
        }
    }
    800034e0:	a8d1                	j	800035b4 <.LBB1_27+0xac>
                match ctrl.recycle(dev, blockno) {
    800034e2:	76a6                	ld	a3,104(sp)
    800034e4:	7646                	ld	a2,112(sp)
    800034e6:	65a6                	ld	a1,72(sp)
    800034e8:	1128                	addi	a0,sp,168
    800034ea:	00000097          	auipc	ra,0x0
    800034ee:	47c080e7          	jalr	1148(ra) # 80003966 <_ZN6kernel2fs3bio6BufLru7recycle17h2cc2179c79ac2f75E>
    800034f2:	a009                	j	800034f4 <_ZN6kernel2fs3bio6Bcache4bget17h5f7e8a4c3a341a1bE+0xda>
                    Some((index, rc_ptr)) => {
    800034f4:	752a                	ld	a0,168(sp)
    800034f6:	4581                	li	a1,0
    800034f8:	00b50463          	beq	a0,a1,80003500 <.LBB1_26>
    800034fc:	a009                	j	800034fe <_ZN6kernel2fs3bio6Bcache4bget17h5f7e8a4c3a341a1bE+0xe4>
    800034fe:	a005                	j	8000351e <.LBB1_27+0x16>

0000000080003500 <.LBB1_26>:
                    None => panic!("no usable buffer")
    80003500:	00022517          	auipc	a0,0x22
    80003504:	17050513          	addi	a0,a0,368 # 80025670 <.L__unnamed_35+0xa8>

0000000080003508 <.LBB1_27>:
    80003508:	00022617          	auipc	a2,0x22
    8000350c:	75060613          	addi	a2,a2,1872 # 80025c58 <.L__unnamed_17>
    80003510:	45c1                	li	a1,16
    80003512:	0001f097          	auipc	ra,0x1f
    80003516:	bea080e7          	jalr	-1046(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8000351a:	0000                	unimp
                match ctrl.recycle(dev, blockno) {
    8000351c:	0000                	unimp
                    Some((index, rc_ptr)) => {
    8000351e:	75ca                	ld	a1,176(sp)
    80003520:	ec2e                	sd	a1,24(sp)
    80003522:	fdae                	sd	a1,248(sp)
    80003524:	756a                	ld	a0,184(sp)
    80003526:	f02a                	sd	a0,32(sp)
    80003528:	e22a                	sd	a0,256(sp)
    8000352a:	4575                	li	a0,29
                        self.bufs[index].valid.store(false, Ordering::Relaxed);
    8000352c:	0ab56263          	bltu	a0,a1,800035d0 <.LBB1_28+0x14>
    80003530:	a009                	j	80003532 <.LBB1_27+0x2a>
    80003532:	6566                	ld	a0,88(sp)
    80003534:	65e2                	ld	a1,24(sp)
    80003536:	44000613          	li	a2,1088
    8000353a:	02c585b3          	mul	a1,a1,a2
    8000353e:	952e                	add	a0,a0,a1
    80003540:	48c50513          	addi	a0,a0,1164
    80003544:	48c50513          	addi	a0,a0,1164
    80003548:	4601                	li	a2,0
    8000354a:	0cc103a3          	sb	a2,199(sp)
    8000354e:	85b2                	mv	a1,a2
    80003550:	00001097          	auipc	ra,0x1
    80003554:	19c080e7          	jalr	412(ra) # 800046ec <_ZN4core4sync6atomic10AtomicBool5store17h325e21ca90edd7e7E>
    80003558:	a009                	j	8000355a <.LBB1_27+0x52>
                        drop(ctrl);
    8000355a:	7566                	ld	a0,120(sp)
    8000355c:	0001a097          	auipc	ra,0x1a
    80003560:	99c080e7          	jalr	-1636(ra) # 8001cef8 <_ZN4core3mem4drop17h82526bd482ef36a5E>
    80003564:	a009                	j	80003566 <.LBB1_27+0x5e>
    80003566:	65e2                	ld	a1,24(sp)
    80003568:	4575                	li	a0,29
                            data: Some(self.bufs[index].data.lock()),
    8000356a:	06b56e63          	bltu	a0,a1,800035e6 <.LBB1_29+0x14>
    8000356e:	a009                	j	80003570 <.LBB1_27+0x68>
    80003570:	6566                	ld	a0,88(sp)
    80003572:	65e2                	ld	a1,24(sp)
    80003574:	44000613          	li	a2,1088
    80003578:	02c585b3          	mul	a1,a1,a2
    8000357c:	952e                	add	a0,a0,a1
    8000357e:	4e050513          	addi	a0,a0,1248
    80003582:	0001a097          	auipc	ra,0x1a
    80003586:	dba080e7          	jalr	-582(ra) # 8001d33c <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$4lock17h852a891f9af492ecE>
    8000358a:	e42a                	sd	a0,8(sp)
    8000358c:	e82e                	sd	a1,16(sp)
    8000358e:	a009                	j	80003590 <.LBB1_27+0x88>
    80003590:	7586                	ld	a1,96(sp)
    80003592:	7502                	ld	a0,32(sp)
    80003594:	7626                	ld	a2,104(sp)
    80003596:	76c6                	ld	a3,112(sp)
    80003598:	6762                	ld	a4,24(sp)
    8000359a:	67c2                	ld	a5,16(sp)
    8000359c:	6822                	ld	a6,8(sp)
    8000359e:	e5c2                	sd	a6,200(sp)
    800035a0:	e9be                	sd	a5,208(sp)
                        return Buf {
    800035a2:	e198                	sd	a4,0(a1)
    800035a4:	d194                	sw	a3,32(a1)
    800035a6:	d1d0                	sw	a2,36(a1)
    800035a8:	e588                	sd	a0,8(a1)
    800035aa:	662e                	ld	a2,200(sp)
    800035ac:	654e                	ld	a0,208(sp)
    800035ae:	e990                	sd	a2,16(a1)
    800035b0:	ed88                	sd	a0,24(a1)
    }
    800035b2:	a009                	j	800035b4 <.LBB1_27+0xac>
    800035b4:	60b2                	ld	ra,264(sp)
    800035b6:	6151                	addi	sp,sp,272
    800035b8:	8082                	ret
                    data: Some(self.bufs[index].data.lock())
    800035ba:	7562                	ld	a0,56(sp)

00000000800035bc <.LBB1_28>:
    800035bc:	00022617          	auipc	a2,0x22
    800035c0:	65460613          	addi	a2,a2,1620 # 80025c10 <.L__unnamed_18>
    800035c4:	45f9                	li	a1,30
    800035c6:	0001f097          	auipc	ra,0x1f
    800035ca:	b62080e7          	jalr	-1182(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    800035ce:	0000                	unimp
                        self.bufs[index].valid.store(false, Ordering::Relaxed);
    800035d0:	6562                	ld	a0,24(sp)

00000000800035d2 <.LBB1_29>:
    800035d2:	00022617          	auipc	a2,0x22
    800035d6:	65660613          	addi	a2,a2,1622 # 80025c28 <.L__unnamed_19>
    800035da:	45f9                	li	a1,30
    800035dc:	0001f097          	auipc	ra,0x1f
    800035e0:	b4c080e7          	jalr	-1204(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    800035e4:	0000                	unimp
                            data: Some(self.bufs[index].data.lock()),
    800035e6:	6562                	ld	a0,24(sp)

00000000800035e8 <.LBB1_30>:
    800035e8:	00022617          	auipc	a2,0x22
    800035ec:	65860613          	addi	a2,a2,1624 # 80025c40 <.L__unnamed_20>
    800035f0:	45f9                	li	a1,30
    800035f2:	0001f097          	auipc	ra,0x1f
    800035f6:	b36080e7          	jalr	-1226(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel2fs3bio6Bcache5bread17h6ef915e4e896646bE:

00000000800035fc <_ZN6kernel2fs3bio6Bcache5bread17h6ef915e4e896646bE>:

    /// Get the buf from the cache/disk
    pub fn bread<'a>(&'a self, dev: u32, blockno: u32) -> Buf<'a> {
    800035fc:	715d                	addi	sp,sp,-80
        let mut b = self.bget(dev, blockno);
    800035fe:	e486                	sd	ra,72(sp)
    80003600:	f02e                	sd	a1,32(sp)
    80003602:	f42a                	sd	a0,40(sp)
    80003604:	fc2e                	sd	a1,56(sp)
    80003606:	c0b2                	sw	a2,64(sp)
    80003608:	c2b6                	sw	a3,68(sp)
    8000360a:	00000097          	auipc	ra,0x0
    8000360e:	e10080e7          	jalr	-496(ra) # 8000341a <_ZN6kernel2fs3bio6Bcache4bget17h5f7e8a4c3a341a1bE>
    80003612:	a009                	j	80003614 <_ZN6kernel2fs3bio6Bcache5bread17h6ef915e4e896646bE+0x18>
        if !self.bufs[b.index].valid.load(Ordering::Relaxed) {
    80003614:	7522                	ld	a0,40(sp)
    80003616:	610c                	ld	a1,0(a0)
    80003618:	ec2e                	sd	a1,24(sp)
    8000361a:	4575                	li	a0,29
    8000361c:	08b56563          	bltu	a0,a1,800036a6 <.LBB2_12+0x54>
    80003620:	a009                	j	80003622 <_ZN6kernel2fs3bio6Bcache5bread17h6ef915e4e896646bE+0x26>
    80003622:	7502                	ld	a0,32(sp)
    80003624:	65e2                	ld	a1,24(sp)
    80003626:	44000613          	li	a2,1088
    8000362a:	02c585b3          	mul	a1,a1,a2
    8000362e:	952e                	add	a0,a0,a1
    80003630:	48c50513          	addi	a0,a0,1164
    80003634:	48c50513          	addi	a0,a0,1164
    80003638:	4581                	li	a1,0
    8000363a:	02b10b23          	sb	a1,54(sp)
    8000363e:	00001097          	auipc	ra,0x1
    80003642:	030080e7          	jalr	48(ra) # 8000466e <_ZN4core4sync6atomic10AtomicBool4load17h49a663f50dd66935E>
    80003646:	e82a                	sd	a0,16(sp)
    80003648:	a009                	j	8000364a <_ZN6kernel2fs3bio6Bcache5bread17h6ef915e4e896646bE+0x4e>
    8000364a:	6542                	ld	a0,16(sp)
    8000364c:	ed09                	bnez	a0,80003666 <.LBB2_12+0x14>
    8000364e:	a009                	j	80003650 <_ZN6kernel2fs3bio6Bcache5bread17h6ef915e4e896646bE+0x54>
            DISK.rw(&mut b, false);
    80003650:	75a2                	ld	a1,40(sp)

0000000080003652 <.LBB2_12>:
    80003652:	0005a517          	auipc	a0,0x5a
    80003656:	9ae50513          	addi	a0,a0,-1618 # 8005d000 <_ZN6kernel6driver11virtio_disk4DISK17h9e8917083150b34aE>
    8000365a:	4601                	li	a2,0
    8000365c:	00006097          	auipc	ra,0x6
    80003660:	d40080e7          	jalr	-704(ra) # 8000939c <_ZN6kernel6driver11virtio_disk91_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..driver..virtio_disk..Disk$GT$$GT$2rw17h4aaaa8090d764af5E>
    80003664:	a011                	j	80003668 <.LBB2_12+0x16>
        if !self.bufs[b.index].valid.load(Ordering::Relaxed) {
    80003666:	a82d                	j	800036a0 <.LBB2_12+0x4e>
            self.bufs[b.index].valid.store(true, Ordering::Relaxed);
    80003668:	7522                	ld	a0,40(sp)
    8000366a:	610c                	ld	a1,0(a0)
    8000366c:	e42e                	sd	a1,8(sp)
    8000366e:	4575                	li	a0,29
    80003670:	04b56663          	bltu	a0,a1,800036bc <.LBB2_13+0x14>
    80003674:	a009                	j	80003676 <.LBB2_12+0x24>
    80003676:	7502                	ld	a0,32(sp)
    80003678:	65a2                	ld	a1,8(sp)
    8000367a:	44000613          	li	a2,1088
    8000367e:	02c585b3          	mul	a1,a1,a2
    80003682:	952e                	add	a0,a0,a1
    80003684:	48c50513          	addi	a0,a0,1164
    80003688:	48c50513          	addi	a0,a0,1164
    8000368c:	4601                	li	a2,0
    8000368e:	02c10ba3          	sb	a2,55(sp)
    80003692:	4585                	li	a1,1
    80003694:	00001097          	auipc	ra,0x1
    80003698:	058080e7          	jalr	88(ra) # 800046ec <_ZN4core4sync6atomic10AtomicBool5store17h325e21ca90edd7e7E>
    8000369c:	a009                	j	8000369e <.LBB2_12+0x4c>
        if !self.bufs[b.index].valid.load(Ordering::Relaxed) {
    8000369e:	a009                	j	800036a0 <.LBB2_12+0x4e>
        }
        b
    }
    800036a0:	60a6                	ld	ra,72(sp)
    800036a2:	6161                	addi	sp,sp,80
    800036a4:	8082                	ret
        if !self.bufs[b.index].valid.load(Ordering::Relaxed) {
    800036a6:	6562                	ld	a0,24(sp)

00000000800036a8 <.LBB2_13>:
    800036a8:	00022617          	auipc	a2,0x22
    800036ac:	5c860613          	addi	a2,a2,1480 # 80025c70 <.L__unnamed_21>
    800036b0:	45f9                	li	a1,30
    800036b2:	0001f097          	auipc	ra,0x1f
    800036b6:	a76080e7          	jalr	-1418(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    800036ba:	0000                	unimp
            self.bufs[b.index].valid.store(true, Ordering::Relaxed);
    800036bc:	6522                	ld	a0,8(sp)

00000000800036be <.LBB2_14>:
    800036be:	00022617          	auipc	a2,0x22
    800036c2:	5ca60613          	addi	a2,a2,1482 # 80025c88 <.L__unnamed_22>
    800036c6:	45f9                	li	a1,30
    800036c8:	0001f097          	auipc	ra,0x1f
    800036cc:	a60080e7          	jalr	-1440(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel2fs3bio6Bcache6brelse17hc59c97ea45d16b39E:

00000000800036d2 <_ZN6kernel2fs3bio6Bcache6brelse17hc59c97ea45d16b39E>:

    /// Move an unlocked buf to the head of the most-recently-used list.
    fn brelse(&self, index: usize) {
    800036d2:	7179                	addi	sp,sp,-48
    800036d4:	f406                	sd	ra,40(sp)
    800036d6:	e42e                	sd	a1,8(sp)
    800036d8:	ec2a                	sd	a0,24(sp)
    800036da:	f02e                	sd	a1,32(sp)
        self.ctrl.acquire().move_if_no_ref(index);
    800036dc:	0000d097          	auipc	ra,0xd
    800036e0:	cb8080e7          	jalr	-840(ra) # 80010394 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h4c9081acf22588feE>
    800036e4:	e82a                	sd	a0,16(sp)
    800036e6:	a009                	j	800036e8 <_ZN6kernel2fs3bio6Bcache6brelse17hc59c97ea45d16b39E+0x16>
    800036e8:	0808                	addi	a0,sp,16
    800036ea:	0000e097          	auipc	ra,0xe
    800036ee:	d24080e7          	jalr	-732(ra) # 8001140e <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7fbd4bc7b8273f3cE>
    800036f2:	e02a                	sd	a0,0(sp)
    800036f4:	a009                	j	800036f6 <_ZN6kernel2fs3bio6Bcache6brelse17hc59c97ea45d16b39E+0x24>
    800036f6:	65a2                	ld	a1,8(sp)
    800036f8:	6502                	ld	a0,0(sp)
    800036fa:	00000097          	auipc	ra,0x0
    800036fe:	338080e7          	jalr	824(ra) # 80003a32 <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE>
    80003702:	a009                	j	80003704 <_ZN6kernel2fs3bio6Bcache6brelse17hc59c97ea45d16b39E+0x32>
    80003704:	0808                	addi	a0,sp,16
    80003706:	00004097          	auipc	ra,0x4
    8000370a:	942080e7          	jalr	-1726(ra) # 80007048 <_ZN4core3ptr89drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..fs..bio..BufLru$GT$$GT$17h9c86fb58887d325bE>
    8000370e:	a009                	j	80003710 <_ZN6kernel2fs3bio6Bcache6brelse17hc59c97ea45d16b39E+0x3e>
    }
    80003710:	70a2                	ld	ra,40(sp)
    80003712:	6145                	addi	sp,sp,48
    80003714:	8082                	ret

Disassembly of section .text._ZN6kernel2fs3bio3Buf12read_blockno17ha2cb61f265147e82E:

0000000080003716 <_ZN6kernel2fs3bio3Buf12read_blockno17ha2cb61f265147e82E>:
    /// Introduced to let the sleeplock guard drop before the whole struct.
    data: Option<SleepLockGuard<'a, BufData>>,
}

impl<'a> Buf<'a> {
    pub fn read_blockno(&self) -> u32 {
    80003716:	1141                	addi	sp,sp,-16
    80003718:	e42a                	sd	a0,8(sp)
        self.blockno
    }
    8000371a:	5148                	lw	a0,36(a0)
    8000371c:	0141                	addi	sp,sp,16
    8000371e:	8082                	ret

Disassembly of section .text._ZN6kernel2fs3bio3Buf6bwrite17hec751387ebedcc62E:

0000000080003720 <_ZN6kernel2fs3bio3Buf6bwrite17hec751387ebedcc62E>:

    pub fn bwrite(&mut self) {
    80003720:	1141                	addi	sp,sp,-16
    80003722:	e406                	sd	ra,8(sp)
    80003724:	85aa                	mv	a1,a0
    80003726:	e02e                	sd	a1,0(sp)

0000000080003728 <.LBB5_2>:
        DISK.rw(self, true);
    80003728:	0005a517          	auipc	a0,0x5a
    8000372c:	8d850513          	addi	a0,a0,-1832 # 8005d000 <_ZN6kernel6driver11virtio_disk4DISK17h9e8917083150b34aE>
    80003730:	4605                	li	a2,1
    80003732:	00006097          	auipc	ra,0x6
    80003736:	c6a080e7          	jalr	-918(ra) # 8000939c <_ZN6kernel6driver11virtio_disk91_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..driver..virtio_disk..Disk$GT$$GT$2rw17h4aaaa8090d764af5E>
    8000373a:	a009                	j	8000373c <.LBB5_2+0x14>
    }
    8000373c:	60a2                	ld	ra,8(sp)
    8000373e:	0141                	addi	sp,sp,16
    80003740:	8082                	ret

Disassembly of section .text._ZN6kernel2fs3bio3Buf8raw_data17h6a896fea03f7ee91E:

0000000080003742 <_ZN6kernel2fs3bio3Buf8raw_data17h6a896fea03f7ee91E>:

    /// Gives out a raw const pointer at the buf data. 
    pub fn raw_data(&self) -> *const BufData {
    80003742:	7179                	addi	sp,sp,-48
    80003744:	f406                	sd	ra,40(sp)
    80003746:	ec2a                	sd	a0,24(sp)
        let guard = self.data.as_ref().unwrap();
    80003748:	0541                	addi	a0,a0,16
    8000374a:	0000b097          	auipc	ra,0xb
    8000374e:	288080e7          	jalr	648(ra) # 8000e9d2 <_ZN4core6option15Option$LT$T$GT$6as_ref17hb04d778bad5fcb59E>
    80003752:	e82a                	sd	a0,16(sp)
    80003754:	a009                	j	80003756 <_ZN6kernel2fs3bio3Buf8raw_data17h6a896fea03f7ee91E+0x14>
    80003756:	6542                	ld	a0,16(sp)

0000000080003758 <.LBB6_4>:
    80003758:	00022597          	auipc	a1,0x22
    8000375c:	54858593          	addi	a1,a1,1352 # 80025ca0 <.L__unnamed_23>
    80003760:	0000b097          	auipc	ra,0xb
    80003764:	482080e7          	jalr	1154(ra) # 8000ebe2 <_ZN4core6option15Option$LT$T$GT$6unwrap17h5e7c29d7de25e54aE>
    80003768:	85aa                	mv	a1,a0
    8000376a:	e42e                	sd	a1,8(sp)
    8000376c:	f02a                	sd	a0,32(sp)
    8000376e:	a009                	j	80003770 <.LBB6_4+0x18>
        guard.deref()
    80003770:	6522                	ld	a0,8(sp)
    80003772:	0001a097          	auipc	ra,0x1a
    80003776:	d84080e7          	jalr	-636(ra) # 8001d4f6 <_ZN92_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17he0c0fee5a6939b40E>
    8000377a:	e02a                	sd	a0,0(sp)
    8000377c:	a009                	j	8000377e <.LBB6_4+0x26>
    }
    8000377e:	6502                	ld	a0,0(sp)
    80003780:	70a2                	ld	ra,40(sp)
    80003782:	6145                	addi	sp,sp,48
    80003784:	8082                	ret

Disassembly of section .text._ZN6kernel2fs3bio3Buf12raw_data_mut17hbae73c10d57c515dE:

0000000080003786 <_ZN6kernel2fs3bio3Buf12raw_data_mut17hbae73c10d57c515dE>:

    /// Gives out a raw mut pointer at the buf data. 
    pub fn raw_data_mut(&mut self) -> *mut BufData {
    80003786:	7179                	addi	sp,sp,-48
    80003788:	f406                	sd	ra,40(sp)
    8000378a:	ec2a                	sd	a0,24(sp)
        let guard = self.data.as_mut().unwrap();
    8000378c:	0541                	addi	a0,a0,16
    8000378e:	0000b097          	auipc	ra,0xb
    80003792:	198080e7          	jalr	408(ra) # 8000e926 <_ZN4core6option15Option$LT$T$GT$6as_mut17h3a38d82722b299a5E>
    80003796:	e82a                	sd	a0,16(sp)
    80003798:	a009                	j	8000379a <_ZN6kernel2fs3bio3Buf12raw_data_mut17hbae73c10d57c515dE+0x14>
    8000379a:	6542                	ld	a0,16(sp)

000000008000379c <.LBB7_4>:
    8000379c:	00022597          	auipc	a1,0x22
    800037a0:	51c58593          	addi	a1,a1,1308 # 80025cb8 <.L__unnamed_24>
    800037a4:	0000b097          	auipc	ra,0xb
    800037a8:	690080e7          	jalr	1680(ra) # 8000ee34 <_ZN4core6option15Option$LT$T$GT$6unwrap17heec1a84bcf97bc0fE>
    800037ac:	85aa                	mv	a1,a0
    800037ae:	e42e                	sd	a1,8(sp)
    800037b0:	f02a                	sd	a0,32(sp)
    800037b2:	a009                	j	800037b4 <.LBB7_4+0x18>
        guard.deref_mut()
    800037b4:	6522                	ld	a0,8(sp)
    800037b6:	0001a097          	auipc	ra,0x1a
    800037ba:	d54080e7          	jalr	-684(ra) # 8001d50a <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h29ddb6c86f63b2e9E>
    800037be:	e02a                	sd	a0,0(sp)
    800037c0:	a009                	j	800037c2 <.LBB7_4+0x26>
    }
    800037c2:	6502                	ld	a0,0(sp)
    800037c4:	70a2                	ld	ra,40(sp)
    800037c6:	6145                	addi	sp,sp,48
    800037c8:	8082                	ret

Disassembly of section .text._ZN6kernel2fs3bio3Buf3pin17hb02a509b70e70322E:

00000000800037ca <_ZN6kernel2fs3bio3Buf3pin17hb02a509b70e70322E>:

    /// Pin the buf.
    /// SAFETY: it should be definitly safe.
    ///     Because the current refcnt >= 1, so the rc_ptr is valid.
    pub unsafe fn pin(&self) {
    800037ca:	1101                	addi	sp,sp,-32
    800037cc:	e02a                	sd	a0,0(sp)
    800037ce:	e82a                	sd	a0,16(sp)
        let rc = *self.rc_ptr;
    800037d0:	6508                	ld	a0,8(a0)
    800037d2:	610c                	ld	a1,0(a0)
    800037d4:	ec2e                	sd	a1,24(sp)
        *self.rc_ptr = rc + 1;
    800037d6:	00158513          	addi	a0,a1,1
    800037da:	e42a                	sd	a0,8(sp)
    800037dc:	00b56963          	bltu	a0,a1,800037ee <.LBB8_3>
    800037e0:	a009                	j	800037e2 <_ZN6kernel2fs3bio3Buf3pin17hb02a509b70e70322E+0x18>
    800037e2:	6522                	ld	a0,8(sp)
    800037e4:	6582                	ld	a1,0(sp)
    800037e6:	658c                	ld	a1,8(a1)
    800037e8:	e188                	sd	a0,0(a1)
    }
    800037ea:	6105                	addi	sp,sp,32
    800037ec:	8082                	ret

00000000800037ee <.LBB8_3>:
        *self.rc_ptr = rc + 1;
    800037ee:	00022517          	auipc	a0,0x22
    800037f2:	3d250513          	addi	a0,a0,978 # 80025bc0 <str.1>

00000000800037f6 <.LBB8_4>:
    800037f6:	00022617          	auipc	a2,0x22
    800037fa:	4da60613          	addi	a2,a2,1242 # 80025cd0 <.L__unnamed_25>
    800037fe:	45f1                	li	a1,28
    80003800:	0001f097          	auipc	ra,0x1f
    80003804:	8fc080e7          	jalr	-1796(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel2fs3bio3Buf5unpin17h781e1439f4d799baE:

000000008000380a <_ZN6kernel2fs3bio3Buf5unpin17h781e1439f4d799baE>:

    /// Unpin the buf.
    /// SAFETY: it should be called matching pin.
    pub unsafe fn unpin(&self) {
    8000380a:	7179                	addi	sp,sp,-48
    8000380c:	e82a                	sd	a0,16(sp)
    8000380e:	f02a                	sd	a0,32(sp)
        let rc = *self.rc_ptr;
    80003810:	6508                	ld	a0,8(a0)
    80003812:	610c                	ld	a1,0(a0)
    80003814:	ec2e                	sd	a1,24(sp)
    80003816:	f42e                	sd	a1,40(sp)
    80003818:	4505                	li	a0,1
        if rc <= 1 {
    8000381a:	02b56163          	bltu	a0,a1,8000383c <.LBB9_6+0x14>
    8000381e:	a009                	j	80003820 <.LBB9_5>

0000000080003820 <.LBB9_5>:
            panic!("buf unpin not match");
    80003820:	00022517          	auipc	a0,0x22
    80003824:	4c850513          	addi	a0,a0,1224 # 80025ce8 <.L__unnamed_26>

0000000080003828 <.LBB9_6>:
    80003828:	00022617          	auipc	a2,0x22
    8000382c:	4d860613          	addi	a2,a2,1240 # 80025d00 <.L__unnamed_27>
    80003830:	45cd                	li	a1,19
    80003832:	0001f097          	auipc	ra,0x1f
    80003836:	8ca080e7          	jalr	-1846(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8000383a:	0000                	unimp
        }
        *self.rc_ptr = rc - 1;
    8000383c:	6562                	ld	a0,24(sp)
    8000383e:	fff50593          	addi	a1,a0,-1
    80003842:	e42e                	sd	a1,8(sp)
    80003844:	00b56963          	bltu	a0,a1,80003856 <.LBB9_7>
    80003848:	a009                	j	8000384a <.LBB9_6+0x22>
    8000384a:	6522                	ld	a0,8(sp)
    8000384c:	65c2                	ld	a1,16(sp)
    8000384e:	658c                	ld	a1,8(a1)
    80003850:	e188                	sd	a0,0(a1)
    }
    80003852:	6145                	addi	sp,sp,48
    80003854:	8082                	ret

0000000080003856 <.LBB9_7>:
        *self.rc_ptr = rc - 1;
    80003856:	00022517          	auipc	a0,0x22
    8000385a:	21a50513          	addi	a0,a0,538 # 80025a70 <str.0>

000000008000385e <.LBB9_8>:
    8000385e:	00022617          	auipc	a2,0x22
    80003862:	4ba60613          	addi	a2,a2,1210 # 80025d18 <.L__unnamed_28>
    80003866:	02100593          	li	a1,33
    8000386a:	0001f097          	auipc	ra,0x1f
    8000386e:	892080e7          	jalr	-1902(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel2fs3bio6BufLru11find_cached17h75fa078c96ee4834E:

0000000080003874 <_ZN6kernel2fs3bio6BufLru11find_cached17h75fa078c96ee4834E>:
        }
    }

    /// Find if the requested block is cached.
    /// Return its index and incr the refcnt if found.
    fn find_cached(&mut self, dev: u32, blockno: u32) -> Option<(usize, *mut usize)> {
    80003874:	7119                	addi	sp,sp,-128
    80003876:	fc86                	sd	ra,120(sp)
    80003878:	f42a                	sd	a0,40(sp)
    8000387a:	8536                	mv	a0,a3
    8000387c:	f82a                	sd	a0,48(sp)
    8000387e:	8532                	mv	a0,a2
    80003880:	fc2a                	sd	a0,56(sp)
    80003882:	f0ae                	sd	a1,96(sp)
    80003884:	d4b2                	sw	a2,104(sp)
    80003886:	d6b6                	sw	a3,108(sp)
        let mut b = self.head;
    80003888:	4b05b503          	ld	a0,1200(a1)
    8000388c:	e0aa                	sd	a0,64(sp)
        while !b.is_null() {
    8000388e:	a009                	j	80003890 <_ZN6kernel2fs3bio6BufLru11find_cached17h75fa078c96ee4834E+0x1c>
    80003890:	6506                	ld	a0,64(sp)
    80003892:	00002097          	auipc	ra,0x2
    80003896:	da2080e7          	jalr	-606(ra) # 80005634 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hee9a0b1c2395b573E>
    8000389a:	f02a                	sd	a0,32(sp)
    8000389c:	a009                	j	8000389e <_ZN6kernel2fs3bio6BufLru11find_cached17h75fa078c96ee4834E+0x2a>
    8000389e:	7502                	ld	a0,32(sp)
    800038a0:	4581                	li	a1,0
    800038a2:	00b50763          	beq	a0,a1,800038b0 <_ZN6kernel2fs3bio6BufLru11find_cached17h75fa078c96ee4834E+0x3c>
    800038a6:	a009                	j	800038a8 <_ZN6kernel2fs3bio6BufLru11find_cached17h75fa078c96ee4834E+0x34>
    800038a8:	75a2                	ld	a1,40(sp)
    800038aa:	4501                	li	a0,0
                bref.refcnt += 1;
                return Some((bref.index, &mut bref.refcnt));
            }
            b = bref.next;
        }
        None
    800038ac:	e188                	sd	a0,0(a1)
    }
    800038ae:	a859                	j	80003944 <.LBB10_16+0x84>
            let bref = unsafe { b.as_mut().unwrap() };
    800038b0:	6506                	ld	a0,64(sp)
    800038b2:	00002097          	auipc	ra,0x2
    800038b6:	d34080e7          	jalr	-716(ra) # 800055e6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h12167601873b3d53E>
    800038ba:	ec2a                	sd	a0,24(sp)
    800038bc:	a009                	j	800038be <_ZN6kernel2fs3bio6BufLru11find_cached17h75fa078c96ee4834E+0x4a>
    800038be:	6562                	ld	a0,24(sp)

00000000800038c0 <.LBB10_16>:
    800038c0:	00022597          	auipc	a1,0x22
    800038c4:	47058593          	addi	a1,a1,1136 # 80025d30 <.L__unnamed_29>
    800038c8:	0000b097          	auipc	ra,0xb
    800038cc:	2e4080e7          	jalr	740(ra) # 8000ebac <_ZN4core6option15Option$LT$T$GT$6unwrap17h34586233d4d65f4cE>
    800038d0:	e82a                	sd	a0,16(sp)
    800038d2:	a009                	j	800038d4 <.LBB10_16+0x14>
    800038d4:	75e2                	ld	a1,56(sp)
    800038d6:	6542                	ld	a0,16(sp)
    800038d8:	f8aa                	sd	a0,112(sp)
            if bref.dev == dev && bref.blockno == blockno {
    800038da:	5108                	lw	a0,32(a0)
    800038dc:	2581                	sext.w	a1,a1
    800038de:	00b50b63          	beq	a0,a1,800038f4 <.LBB10_16+0x34>
    800038e2:	a029                	j	800038ec <.LBB10_16+0x2c>
    800038e4:	4505                	li	a0,1
    800038e6:	04a107a3          	sb	a0,79(sp)
    800038ea:	a821                	j	80003902 <.LBB10_16+0x42>
    800038ec:	4501                	li	a0,0
    800038ee:	04a107a3          	sb	a0,79(sp)
    800038f2:	a801                	j	80003902 <.LBB10_16+0x42>
    800038f4:	75c2                	ld	a1,48(sp)
    800038f6:	6542                	ld	a0,16(sp)
    800038f8:	5148                	lw	a0,36(a0)
    800038fa:	2581                	sext.w	a1,a1
    800038fc:	feb504e3          	beq	a0,a1,800038e4 <.LBB10_16+0x24>
    80003900:	b7f5                	j	800038ec <.LBB10_16+0x2c>
    80003902:	04f14503          	lbu	a0,79(sp)
    80003906:	8905                	andi	a0,a0,1
    80003908:	4581                	li	a1,0
    8000390a:	00b50b63          	beq	a0,a1,80003920 <.LBB10_16+0x60>
    8000390e:	a009                	j	80003910 <.LBB10_16+0x50>
                bref.refcnt += 1;
    80003910:	6542                	ld	a0,16(sp)
    80003912:	690c                	ld	a1,16(a0)
    80003914:	00158513          	addi	a0,a1,1
    80003918:	e42a                	sd	a0,8(sp)
    8000391a:	02b56863          	bltu	a0,a1,8000394a <.LBB10_17>
    8000391e:	a029                	j	80003928 <.LBB10_16+0x68>
            b = bref.next;
    80003920:	6542                	ld	a0,16(sp)
    80003922:	6508                	ld	a0,8(a0)
    80003924:	e0aa                	sd	a0,64(sp)
        while !b.is_null() {
    80003926:	b7ad                	j	80003890 <_ZN6kernel2fs3bio6BufLru11find_cached17h75fa078c96ee4834E+0x1c>
                bref.refcnt += 1;
    80003928:	75a2                	ld	a1,40(sp)
    8000392a:	6642                	ld	a2,16(sp)
    8000392c:	66a2                	ld	a3,8(sp)
    8000392e:	01060513          	addi	a0,a2,16
    80003932:	ea14                	sd	a3,16(a2)
                return Some((bref.index, &mut bref.refcnt));
    80003934:	6e10                	ld	a2,24(a2)
    80003936:	e8b2                	sd	a2,80(sp)
    80003938:	ecaa                	sd	a0,88(sp)
    8000393a:	e590                	sd	a2,8(a1)
    8000393c:	e988                	sd	a0,16(a1)
    8000393e:	4505                	li	a0,1
    80003940:	e188                	sd	a0,0(a1)
    }
    80003942:	a009                	j	80003944 <.LBB10_16+0x84>
    80003944:	70e6                	ld	ra,120(sp)
    80003946:	6109                	addi	sp,sp,128
    80003948:	8082                	ret

000000008000394a <.LBB10_17>:
                bref.refcnt += 1;
    8000394a:	00022517          	auipc	a0,0x22
    8000394e:	27650513          	addi	a0,a0,630 # 80025bc0 <str.1>

0000000080003952 <.LBB10_18>:
    80003952:	00022617          	auipc	a2,0x22
    80003956:	3f660613          	addi	a2,a2,1014 # 80025d48 <.L__unnamed_30>
    8000395a:	45f1                	li	a1,28
    8000395c:	0001e097          	auipc	ra,0x1e
    80003960:	7a0080e7          	jalr	1952(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel2fs3bio6BufLru7recycle17h2cc2179c79ac2f75E:

0000000080003966 <_ZN6kernel2fs3bio6BufLru7recycle17h2cc2179c79ac2f75E>:

    /// Recycle an unused buffer from the tail.
    /// Return its index if found.
    fn recycle(&mut self, dev: u32, blockno: u32) -> Option<(usize, *mut usize)> {
    80003966:	7159                	addi	sp,sp,-112
    80003968:	f486                	sd	ra,104(sp)
    8000396a:	f02a                	sd	a0,32(sp)
    8000396c:	8536                	mv	a0,a3
    8000396e:	f42a                	sd	a0,40(sp)
    80003970:	8532                	mv	a0,a2
    80003972:	f82a                	sd	a0,48(sp)
    80003974:	e8ae                	sd	a1,80(sp)
    80003976:	ccb2                	sw	a2,88(sp)
    80003978:	ceb6                	sw	a3,92(sp)
        let mut b = self.tail;
    8000397a:	4b85b503          	ld	a0,1208(a1)
    8000397e:	fc2a                	sd	a0,56(sp)
        while !b.is_null() {
    80003980:	a009                	j	80003982 <_ZN6kernel2fs3bio6BufLru7recycle17h2cc2179c79ac2f75E+0x1c>
    80003982:	7562                	ld	a0,56(sp)
    80003984:	00002097          	auipc	ra,0x2
    80003988:	cb0080e7          	jalr	-848(ra) # 80005634 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hee9a0b1c2395b573E>
    8000398c:	ec2a                	sd	a0,24(sp)
    8000398e:	a009                	j	80003990 <_ZN6kernel2fs3bio6BufLru7recycle17h2cc2179c79ac2f75E+0x2a>
    80003990:	6562                	ld	a0,24(sp)
    80003992:	4581                	li	a1,0
    80003994:	00b50763          	beq	a0,a1,800039a2 <_ZN6kernel2fs3bio6BufLru7recycle17h2cc2179c79ac2f75E+0x3c>
    80003998:	a009                	j	8000399a <_ZN6kernel2fs3bio6BufLru7recycle17h2cc2179c79ac2f75E+0x34>
    8000399a:	7582                	ld	a1,32(sp)
    8000399c:	4501                	li	a0,0
                bref.refcnt += 1;
                return Some((bref.index, &mut bref.refcnt));
            }
            b = bref.prev;
        }
        None
    8000399e:	e188                	sd	a0,0(a1)
    }
    800039a0:	a885                	j	80003a10 <.LBB11_12+0x5e>
            let bref = unsafe { b.as_mut().unwrap() };
    800039a2:	7562                	ld	a0,56(sp)
    800039a4:	00002097          	auipc	ra,0x2
    800039a8:	c42080e7          	jalr	-958(ra) # 800055e6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h12167601873b3d53E>
    800039ac:	e82a                	sd	a0,16(sp)
    800039ae:	a009                	j	800039b0 <_ZN6kernel2fs3bio6BufLru7recycle17h2cc2179c79ac2f75E+0x4a>
    800039b0:	6542                	ld	a0,16(sp)

00000000800039b2 <.LBB11_12>:
    800039b2:	00022597          	auipc	a1,0x22
    800039b6:	3ae58593          	addi	a1,a1,942 # 80025d60 <.L__unnamed_31>
    800039ba:	0000b097          	auipc	ra,0xb
    800039be:	1f2080e7          	jalr	498(ra) # 8000ebac <_ZN4core6option15Option$LT$T$GT$6unwrap17h34586233d4d65f4cE>
    800039c2:	e42a                	sd	a0,8(sp)
    800039c4:	a009                	j	800039c6 <.LBB11_12+0x14>
    800039c6:	6522                	ld	a0,8(sp)
    800039c8:	f0aa                	sd	a0,96(sp)
            if bref.refcnt == 0 {
    800039ca:	6908                	ld	a0,16(a0)
    800039cc:	4581                	li	a1,0
    800039ce:	00b51f63          	bne	a0,a1,800039ec <.LBB11_12+0x3a>
    800039d2:	a009                	j	800039d4 <.LBB11_12+0x22>
                bref.dev = dev;
    800039d4:	6522                	ld	a0,8(sp)
    800039d6:	75a2                	ld	a1,40(sp)
    800039d8:	7642                	ld	a2,48(sp)
    800039da:	d110                	sw	a2,32(a0)
                bref.blockno = blockno;
    800039dc:	d14c                	sw	a1,36(a0)
                bref.refcnt += 1;
    800039de:	690c                	ld	a1,16(a0)
    800039e0:	00158513          	addi	a0,a1,1
    800039e4:	e02a                	sd	a0,0(sp)
    800039e6:	02b56863          	bltu	a0,a1,80003a16 <.LBB11_13>
    800039ea:	a029                	j	800039f4 <.LBB11_12+0x42>
            b = bref.prev;
    800039ec:	6522                	ld	a0,8(sp)
    800039ee:	6108                	ld	a0,0(a0)
    800039f0:	fc2a                	sd	a0,56(sp)
        while !b.is_null() {
    800039f2:	bf41                	j	80003982 <_ZN6kernel2fs3bio6BufLru7recycle17h2cc2179c79ac2f75E+0x1c>
                bref.refcnt += 1;
    800039f4:	7582                	ld	a1,32(sp)
    800039f6:	6622                	ld	a2,8(sp)
    800039f8:	6682                	ld	a3,0(sp)
    800039fa:	01060513          	addi	a0,a2,16
    800039fe:	ea14                	sd	a3,16(a2)
                return Some((bref.index, &mut bref.refcnt));
    80003a00:	6e10                	ld	a2,24(a2)
    80003a02:	e0b2                	sd	a2,64(sp)
    80003a04:	e4aa                	sd	a0,72(sp)
    80003a06:	e590                	sd	a2,8(a1)
    80003a08:	e988                	sd	a0,16(a1)
    80003a0a:	4505                	li	a0,1
    80003a0c:	e188                	sd	a0,0(a1)
    }
    80003a0e:	a009                	j	80003a10 <.LBB11_12+0x5e>
    80003a10:	70a6                	ld	ra,104(sp)
    80003a12:	6165                	addi	sp,sp,112
    80003a14:	8082                	ret

0000000080003a16 <.LBB11_13>:
                bref.refcnt += 1;
    80003a16:	00022517          	auipc	a0,0x22
    80003a1a:	1aa50513          	addi	a0,a0,426 # 80025bc0 <str.1>

0000000080003a1e <.LBB11_14>:
    80003a1e:	00022617          	auipc	a2,0x22
    80003a22:	35a60613          	addi	a2,a2,858 # 80025d78 <.L__unnamed_32>
    80003a26:	45f1                	li	a1,28
    80003a28:	0001e097          	auipc	ra,0x1e
    80003a2c:	6d4080e7          	jalr	1748(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE:

0000000080003a32 <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE>:

    /// Move an entry to the head if no live ref.
    fn move_if_no_ref(&mut self, index: usize) {
    80003a32:	7175                	addi	sp,sp,-144
    80003a34:	e506                	sd	ra,136(sp)
    80003a36:	fc2e                	sd	a1,56(sp)
    80003a38:	e0aa                	sd	a0,64(sp)
    80003a3a:	fcaa                	sd	a0,120(sp)
    80003a3c:	e12e                	sd	a1,128(sp)
    80003a3e:	4575                	li	a0,29
        let b = &mut self.inner[index];
    80003a40:	14b56763          	bltu	a0,a1,80003b8e <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0x15c>
    80003a44:	a009                	j	80003a46 <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0x14>
    80003a46:	6506                	ld	a0,64(sp)
    80003a48:	75e2                	ld	a1,56(sp)
    80003a4a:	02800613          	li	a2,40
    80003a4e:	02c585b3          	mul	a1,a1,a2
    80003a52:	952e                	add	a0,a0,a1
    80003a54:	e8aa                	sd	a0,80(sp)
        b.refcnt -= 1;
    80003a56:	6908                	ld	a0,16(a0)
    80003a58:	fff50593          	addi	a1,a0,-1
    80003a5c:	f82e                	sd	a1,48(sp)
    80003a5e:	14b56363          	bltu	a0,a1,80003ba4 <.LBB12_30>
    80003a62:	a009                	j	80003a64 <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0x32>
    80003a64:	7542                	ld	a0,48(sp)
    80003a66:	65c6                	ld	a1,80(sp)
    80003a68:	e988                	sd	a0,16(a1)
        if b.refcnt == 0 && !ptr::eq(self.head, b) {
    80003a6a:	6546                	ld	a0,80(sp)
    80003a6c:	6908                	ld	a0,16(a0)
    80003a6e:	4581                	li	a1,0
    80003a70:	00b50b63          	beq	a0,a1,80003a86 <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0x54>
    80003a74:	a029                	j	80003a7e <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0x4c>
    80003a76:	4505                	li	a0,1
    80003a78:	04a10f23          	sb	a0,94(sp)
    80003a7c:	a839                	j	80003a9a <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0x68>
    80003a7e:	4501                	li	a0,0
    80003a80:	04a10f23          	sb	a0,94(sp)
    80003a84:	a819                	j	80003a9a <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0x68>
    80003a86:	6506                	ld	a0,64(sp)
    80003a88:	4b053503          	ld	a0,1200(a0)
    80003a8c:	65c6                	ld	a1,80(sp)
    80003a8e:	00015097          	auipc	ra,0x15
    80003a92:	9e8080e7          	jalr	-1560(ra) # 80018476 <_ZN4core3ptr2eq17h2ab91a60e465e9ebE>
    80003a96:	f42a                	sd	a0,40(sp)
    80003a98:	a031                	j	80003aa4 <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0x72>
    80003a9a:	05e14503          	lbu	a0,94(sp)
    80003a9e:	8905                	andi	a0,a0,1
    80003aa0:	e519                	bnez	a0,80003aae <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0x7c>
    80003aa2:	a005                	j	80003ac2 <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0x90>
    80003aa4:	7522                	ld	a0,40(sp)
    80003aa6:	4581                	li	a1,0
    80003aa8:	fcb507e3          	beq	a0,a1,80003a76 <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0x44>
    80003aac:	bfc9                	j	80003a7e <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0x4c>
            // forward the tail if b is at the tail
            // b may be the only entry in the lru list
            if ptr::eq(self.tail, b) && !b.prev.is_null() {
    80003aae:	6506                	ld	a0,64(sp)
    80003ab0:	4b853503          	ld	a0,1208(a0)
    80003ab4:	65c6                	ld	a1,80(sp)
    80003ab6:	00015097          	auipc	ra,0x15
    80003aba:	9c0080e7          	jalr	-1600(ra) # 80018476 <_ZN4core3ptr2eq17h2ab91a60e465e9ebE>
    80003abe:	f02a                	sd	a0,32(sp)
    80003ac0:	a03d                	j	80003aee <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0xbc>
        if b.refcnt == 0 && !ptr::eq(self.head, b) {
    80003ac2:	a0d9                	j	80003b88 <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0x156>
    80003ac4:	4505                	li	a0,1
            if ptr::eq(self.tail, b) && !b.prev.is_null() {
    80003ac6:	04a10fa3          	sb	a0,95(sp)
    80003aca:	a829                	j	80003ae4 <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0xb2>
    80003acc:	4501                	li	a0,0
    80003ace:	04a10fa3          	sb	a0,95(sp)
    80003ad2:	a809                	j	80003ae4 <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0xb2>
    80003ad4:	6546                	ld	a0,80(sp)
    80003ad6:	6108                	ld	a0,0(a0)
    80003ad8:	00002097          	auipc	ra,0x2
    80003adc:	b5c080e7          	jalr	-1188(ra) # 80005634 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hee9a0b1c2395b573E>
    80003ae0:	ec2a                	sd	a0,24(sp)
    80003ae2:	a809                	j	80003af4 <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0xc2>
    80003ae4:	05f14503          	lbu	a0,95(sp)
    80003ae8:	8905                	andi	a0,a0,1
    80003aea:	e911                	bnez	a0,80003afe <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0xcc>
    80003aec:	a839                	j	80003b0a <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0xd8>
    80003aee:	7502                	ld	a0,32(sp)
    80003af0:	f175                	bnez	a0,80003ad4 <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0xa2>
    80003af2:	bfe9                	j	80003acc <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0x9a>
    80003af4:	6562                	ld	a0,24(sp)
    80003af6:	4581                	li	a1,0
    80003af8:	fcb506e3          	beq	a0,a1,80003ac4 <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0x92>
    80003afc:	bfc1                	j	80003acc <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0x9a>
                self.tail = b.prev;
    80003afe:	6586                	ld	a1,64(sp)
    80003b00:	6546                	ld	a0,80(sp)
    80003b02:	6108                	ld	a0,0(a0)
    80003b04:	4aa5bc23          	sd	a0,1208(a1)
            if ptr::eq(self.tail, b) && !b.prev.is_null() {
    80003b08:	a011                	j	80003b0c <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0xda>
    80003b0a:	a009                	j	80003b0c <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0xda>
            }
            
            // detach b
            unsafe {
                b.next.as_mut().map(|b_next| b_next.prev = b.prev);
    80003b0c:	6546                	ld	a0,80(sp)
    80003b0e:	6508                	ld	a0,8(a0)
    80003b10:	00002097          	auipc	ra,0x2
    80003b14:	ad6080e7          	jalr	-1322(ra) # 800055e6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h12167601873b3d53E>
    80003b18:	e82a                	sd	a0,16(sp)
    80003b1a:	a009                	j	80003b1c <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0xea>
    80003b1c:	6542                	ld	a0,16(sp)
    80003b1e:	088c                	addi	a1,sp,80
    80003b20:	f0ae                	sd	a1,96(sp)
    80003b22:	0000b097          	auipc	ra,0xb
    80003b26:	918080e7          	jalr	-1768(ra) # 8000e43a <_ZN4core6option15Option$LT$T$GT$3map17ha9a8f16b0aa2a3f1E>
    80003b2a:	a009                	j	80003b2c <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0xfa>
                b.prev.as_mut().map(|b_prev| b_prev.next = b.next);
    80003b2c:	6546                	ld	a0,80(sp)
    80003b2e:	6108                	ld	a0,0(a0)
    80003b30:	00002097          	auipc	ra,0x2
    80003b34:	ab6080e7          	jalr	-1354(ra) # 800055e6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h12167601873b3d53E>
    80003b38:	e42a                	sd	a0,8(sp)
    80003b3a:	a009                	j	80003b3c <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0x10a>
    80003b3c:	6522                	ld	a0,8(sp)
    80003b3e:	088c                	addi	a1,sp,80
    80003b40:	f4ae                	sd	a1,104(sp)
    80003b42:	0000b097          	auipc	ra,0xb
    80003b46:	9ba080e7          	jalr	-1606(ra) # 8000e4fc <_ZN4core6option15Option$LT$T$GT$3map17hd4472e66f8c522f7E>
    80003b4a:	a009                	j	80003b4c <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0x11a>
            }

            // attach b
            b.prev = ptr::null_mut();
    80003b4c:	a009                	j	80003b4e <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0x11c>
    80003b4e:	6506                	ld	a0,64(sp)
    80003b50:	6646                	ld	a2,80(sp)
    80003b52:	4581                	li	a1,0
    80003b54:	e20c                	sd	a1,0(a2)
            b.next = self.head;
    80003b56:	4b053583          	ld	a1,1200(a0)
    80003b5a:	6646                	ld	a2,80(sp)
    80003b5c:	e60c                	sd	a1,8(a2)
            unsafe {
                self.head.as_mut().map(|old_head| old_head.prev = b);
    80003b5e:	4b053503          	ld	a0,1200(a0)
    80003b62:	00002097          	auipc	ra,0x2
    80003b66:	a84080e7          	jalr	-1404(ra) # 800055e6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h12167601873b3d53E>
    80003b6a:	e02a                	sd	a0,0(sp)
    80003b6c:	a009                	j	80003b6e <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0x13c>
    80003b6e:	6502                	ld	a0,0(sp)
    80003b70:	088c                	addi	a1,sp,80
    80003b72:	f8ae                	sd	a1,112(sp)
    80003b74:	0000b097          	auipc	ra,0xb
    80003b78:	9e6080e7          	jalr	-1562(ra) # 8000e55a <_ZN4core6option15Option$LT$T$GT$3map17hf813a527d3b93241E>
    80003b7c:	a009                	j	80003b7e <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0x14c>
            }
            self.head = b;
    80003b7e:	6586                	ld	a1,64(sp)
    80003b80:	6546                	ld	a0,80(sp)
    80003b82:	4aa5b823          	sd	a0,1200(a1)
        if b.refcnt == 0 && !ptr::eq(self.head, b) {
    80003b86:	a009                	j	80003b88 <_ZN6kernel2fs3bio6BufLru14move_if_no_ref17h9c300d5c07285c6bE+0x156>
        }
    }
    80003b88:	60aa                	ld	ra,136(sp)
    80003b8a:	6149                	addi	sp,sp,144
    80003b8c:	8082                	ret
        let b = &mut self.inner[index];
    80003b8e:	7562                	ld	a0,56(sp)

0000000080003b90 <.LBB12_29>:
    80003b90:	00022617          	auipc	a2,0x22
    80003b94:	20060613          	addi	a2,a2,512 # 80025d90 <.L__unnamed_33>
    80003b98:	45f9                	li	a1,30
    80003b9a:	0001e097          	auipc	ra,0x1e
    80003b9e:	58e080e7          	jalr	1422(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

0000000080003ba4 <.LBB12_30>:
        b.refcnt -= 1;
    80003ba4:	00022517          	auipc	a0,0x22
    80003ba8:	ecc50513          	addi	a0,a0,-308 # 80025a70 <str.0>

0000000080003bac <.LBB12_31>:
    80003bac:	00022617          	auipc	a2,0x22
    80003bb0:	1fc60613          	addi	a2,a2,508 # 80025da8 <.L__unnamed_34>
    80003bb4:	02100593          	li	a1,33
    80003bb8:	0001e097          	auipc	ra,0x1e
    80003bbc:	544080e7          	jalr	1348(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN42_$LT$u8$u20$as$u20$bit_field..BitField$GT$7get_bit17h5d59737ea892b952E:

0000000080003bc2 <_ZN42_$LT$u8$u20$as$u20$bit_field..BitField$GT$7get_bit17h5d59737ea892b952E>:
    ($($t:ty)*) => ($(
        impl BitField for $t {
            const BIT_LENGTH: usize = ::core::mem::size_of::<Self>() as usize * 8;

            #[inline]
            fn get_bit(&self, bit: usize) -> bool {
    80003bc2:	7179                	addi	sp,sp,-48
    80003bc4:	e82e                	sd	a1,16(sp)
    80003bc6:	ec2a                	sd	a0,24(sp)
    80003bc8:	f02a                	sd	a0,32(sp)
    80003bca:	f42e                	sd	a1,40(sp)
    80003bcc:	4521                	li	a0,8
                assert!(bit < Self::BIT_LENGTH);
    80003bce:	02a5e263          	bltu	a1,a0,80003bf2 <.LBB0_6+0x16>
    80003bd2:	a009                	j	80003bd4 <.LBB0_5>

0000000080003bd4 <.LBB0_5>:
    80003bd4:	00022517          	auipc	a0,0x22
    80003bd8:	1ec50513          	addi	a0,a0,492 # 80025dc0 <.L__unnamed_1>

0000000080003bdc <.LBB0_6>:
    80003bdc:	00022617          	auipc	a2,0x22
    80003be0:	26c60613          	addi	a2,a2,620 # 80025e48 <.L__unnamed_2>
    80003be4:	02800593          	li	a1,40
    80003be8:	0001e097          	auipc	ra,0x1e
    80003bec:	514080e7          	jalr	1300(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80003bf0:	0000                	unimp

                (*self & (1 << bit)) != 0
    80003bf2:	65c2                	ld	a1,16(sp)
    80003bf4:	6562                	ld	a0,24(sp)
    80003bf6:	00054503          	lbu	a0,0(a0)
    80003bfa:	e02a                	sd	a0,0(sp)
    80003bfc:	ff85f513          	andi	a0,a1,-8
    80003c00:	0075f613          	andi	a2,a1,7
    80003c04:	4585                	li	a1,1
    80003c06:	00c595b3          	sll	a1,a1,a2
    80003c0a:	e42e                	sd	a1,8(sp)
    80003c0c:	4581                	li	a1,0
    80003c0e:	00b51a63          	bne	a0,a1,80003c22 <.LBB0_7>
    80003c12:	a009                	j	80003c14 <.LBB0_6+0x38>
    80003c14:	6502                	ld	a0,0(sp)
    80003c16:	65a2                	ld	a1,8(sp)
    80003c18:	8d6d                	and	a0,a0,a1
    80003c1a:	00a03533          	snez	a0,a0
            }
    80003c1e:	6145                	addi	sp,sp,48
    80003c20:	8082                	ret

0000000080003c22 <.LBB0_7>:
                (*self & (1 << bit)) != 0
    80003c22:	00022517          	auipc	a0,0x22
    80003c26:	23e50513          	addi	a0,a0,574 # 80025e60 <str.0>

0000000080003c2a <.LBB0_8>:
    80003c2a:	00022617          	auipc	a2,0x22
    80003c2e:	21e60613          	addi	a2,a2,542 # 80025e48 <.L__unnamed_2>
    80003c32:	02300593          	li	a1,35
    80003c36:	0001e097          	auipc	ra,0x1e
    80003c3a:	4c6080e7          	jalr	1222(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN42_$LT$u8$u20$as$u20$bit_field..BitField$GT$7set_bit17ha97cadf2a55a43d3E:

0000000080003c40 <_ZN42_$LT$u8$u20$as$u20$bit_field..BitField$GT$7set_bit17ha97cadf2a55a43d3E>:
                // shift away low bits
                bits >> range.start
            }

            #[inline]
            fn set_bit(&mut self, bit: usize, value: bool) -> &mut Self {
    80003c40:	7139                	addi	sp,sp,-64
    80003c42:	e82e                	sd	a1,16(sp)
    80003c44:	ec2a                	sd	a0,24(sp)
    80003c46:	86b2                	mv	a3,a2
    80003c48:	f036                	sd	a3,32(sp)
    80003c4a:	f42a                	sd	a0,40(sp)
    80003c4c:	f82e                	sd	a1,48(sp)
    80003c4e:	02c10fa3          	sb	a2,63(sp)
    80003c52:	4521                	li	a0,8
                assert!(bit < Self::BIT_LENGTH);
    80003c54:	02a5e263          	bltu	a1,a0,80003c78 <.LBB1_11+0x16>
    80003c58:	a009                	j	80003c5a <.LBB1_10>

0000000080003c5a <.LBB1_10>:
    80003c5a:	00022517          	auipc	a0,0x22
    80003c5e:	16650513          	addi	a0,a0,358 # 80025dc0 <.L__unnamed_1>

0000000080003c62 <.LBB1_11>:
    80003c62:	00022617          	auipc	a2,0x22
    80003c66:	1e660613          	addi	a2,a2,486 # 80025e48 <.L__unnamed_2>
    80003c6a:	02800593          	li	a1,40
    80003c6e:	0001e097          	auipc	ra,0x1e
    80003c72:	48e080e7          	jalr	1166(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80003c76:	0000                	unimp
    80003c78:	7502                	ld	a0,32(sp)
    80003c7a:	4581                	li	a1,0

                if value {
    80003c7c:	02b50063          	beq	a0,a1,80003c9c <.LBB1_11+0x3a>
    80003c80:	a009                	j	80003c82 <.LBB1_11+0x20>
                    *self |= 1 << bit;
    80003c82:	65c2                	ld	a1,16(sp)
    80003c84:	ff85f513          	andi	a0,a1,-8
    80003c88:	0075f613          	andi	a2,a1,7
    80003c8c:	4585                	li	a1,1
    80003c8e:	00c595b3          	sll	a1,a1,a2
    80003c92:	e42e                	sd	a1,8(sp)
    80003c94:	4581                	li	a1,0
    80003c96:	04b51563          	bne	a0,a1,80003ce0 <.LBB1_12>
    80003c9a:	a831                	j	80003cb6 <.LBB1_11+0x54>
                } else {
                    *self &= !(1 << bit);
    80003c9c:	65c2                	ld	a1,16(sp)
    80003c9e:	ff85f513          	andi	a0,a1,-8
    80003ca2:	0075f613          	andi	a2,a1,7
    80003ca6:	4585                	li	a1,1
    80003ca8:	00c595b3          	sll	a1,a1,a2
    80003cac:	e02e                	sd	a1,0(sp)
    80003cae:	4581                	li	a1,0
    80003cb0:	04b51763          	bne	a0,a1,80003cfe <.LBB1_14>
    80003cb4:	a809                	j	80003cc6 <.LBB1_11+0x64>
                    *self |= 1 << bit;
    80003cb6:	65e2                	ld	a1,24(sp)
    80003cb8:	6622                	ld	a2,8(sp)
    80003cba:	00058503          	lb	a0,0(a1)
    80003cbe:	8d51                	or	a0,a0,a2
    80003cc0:	00a58023          	sb	a0,0(a1)
                if value {
    80003cc4:	a819                	j	80003cda <.LBB1_11+0x78>
                    *self &= !(1 << bit);
    80003cc6:	65e2                	ld	a1,24(sp)
    80003cc8:	6502                	ld	a0,0(sp)
    80003cca:	fff54613          	not	a2,a0
    80003cce:	00058503          	lb	a0,0(a1)
    80003cd2:	8d71                	and	a0,a0,a2
    80003cd4:	00a58023          	sb	a0,0(a1)
                if value {
    80003cd8:	a009                	j	80003cda <.LBB1_11+0x78>
                }

                self
            }
    80003cda:	6562                	ld	a0,24(sp)
    80003cdc:	6121                	addi	sp,sp,64
    80003cde:	8082                	ret

0000000080003ce0 <.LBB1_12>:
                    *self |= 1 << bit;
    80003ce0:	00022517          	auipc	a0,0x22
    80003ce4:	18050513          	addi	a0,a0,384 # 80025e60 <str.0>

0000000080003ce8 <.LBB1_13>:
    80003ce8:	00022617          	auipc	a2,0x22
    80003cec:	16060613          	addi	a2,a2,352 # 80025e48 <.L__unnamed_2>
    80003cf0:	02300593          	li	a1,35
    80003cf4:	0001e097          	auipc	ra,0x1e
    80003cf8:	408080e7          	jalr	1032(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080003cfe <.LBB1_14>:
                    *self &= !(1 << bit);
    80003cfe:	00022517          	auipc	a0,0x22
    80003d02:	16250513          	addi	a0,a0,354 # 80025e60 <str.0>

0000000080003d06 <.LBB1_15>:
    80003d06:	00022617          	auipc	a2,0x22
    80003d0a:	14260613          	addi	a2,a2,322 # 80025e48 <.L__unnamed_2>
    80003d0e:	02300593          	li	a1,35
    80003d12:	0001e097          	auipc	ra,0x1e
    80003d16:	3ea080e7          	jalr	1002(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN45_$LT$usize$u20$as$u20$bit_field..BitField$GT$7get_bit17ha84b909d1dae7859E:

0000000080003d1c <_ZN45_$LT$usize$u20$as$u20$bit_field..BitField$GT$7get_bit17ha84b909d1dae7859E>:
            fn get_bit(&self, bit: usize) -> bool {
    80003d1c:	7179                	addi	sp,sp,-48
    80003d1e:	e82e                	sd	a1,16(sp)
    80003d20:	ec2a                	sd	a0,24(sp)
    80003d22:	f02a                	sd	a0,32(sp)
    80003d24:	f42e                	sd	a1,40(sp)
    80003d26:	04000513          	li	a0,64
                assert!(bit < Self::BIT_LENGTH);
    80003d2a:	02a5e263          	bltu	a1,a0,80003d4e <.LBB2_6+0x16>
    80003d2e:	a009                	j	80003d30 <.LBB2_5>

0000000080003d30 <.LBB2_5>:
    80003d30:	00022517          	auipc	a0,0x22
    80003d34:	09050513          	addi	a0,a0,144 # 80025dc0 <.L__unnamed_1>

0000000080003d38 <.LBB2_6>:
    80003d38:	00022617          	auipc	a2,0x22
    80003d3c:	11060613          	addi	a2,a2,272 # 80025e48 <.L__unnamed_2>
    80003d40:	02800593          	li	a1,40
    80003d44:	0001e097          	auipc	ra,0x1e
    80003d48:	3b8080e7          	jalr	952(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80003d4c:	0000                	unimp
                (*self & (1 << bit)) != 0
    80003d4e:	6642                	ld	a2,16(sp)
    80003d50:	6562                	ld	a0,24(sp)
    80003d52:	6108                	ld	a0,0(a0)
    80003d54:	e02a                	sd	a0,0(sp)
    80003d56:	fc067513          	andi	a0,a2,-64
    80003d5a:	4585                	li	a1,1
    80003d5c:	00c595b3          	sll	a1,a1,a2
    80003d60:	e42e                	sd	a1,8(sp)
    80003d62:	4581                	li	a1,0
    80003d64:	00b51a63          	bne	a0,a1,80003d78 <.LBB2_7>
    80003d68:	a009                	j	80003d6a <.LBB2_6+0x32>
    80003d6a:	6502                	ld	a0,0(sp)
    80003d6c:	65a2                	ld	a1,8(sp)
    80003d6e:	8d6d                	and	a0,a0,a1
    80003d70:	00a03533          	snez	a0,a0
            }
    80003d74:	6145                	addi	sp,sp,48
    80003d76:	8082                	ret

0000000080003d78 <.LBB2_7>:
                (*self & (1 << bit)) != 0
    80003d78:	00022517          	auipc	a0,0x22
    80003d7c:	0e850513          	addi	a0,a0,232 # 80025e60 <str.0>

0000000080003d80 <.LBB2_8>:
    80003d80:	00022617          	auipc	a2,0x22
    80003d84:	0c860613          	addi	a2,a2,200 # 80025e48 <.L__unnamed_2>
    80003d88:	02300593          	li	a1,35
    80003d8c:	0001e097          	auipc	ra,0x1e
    80003d90:	370080e7          	jalr	880(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN45_$LT$usize$u20$as$u20$bit_field..BitField$GT$7set_bit17h956504fd5d951209E:

0000000080003d96 <_ZN45_$LT$usize$u20$as$u20$bit_field..BitField$GT$7set_bit17h956504fd5d951209E>:
            fn set_bit(&mut self, bit: usize, value: bool) -> &mut Self {
    80003d96:	7139                	addi	sp,sp,-64
    80003d98:	e82e                	sd	a1,16(sp)
    80003d9a:	ec2a                	sd	a0,24(sp)
    80003d9c:	86b2                	mv	a3,a2
    80003d9e:	f036                	sd	a3,32(sp)
    80003da0:	f42a                	sd	a0,40(sp)
    80003da2:	f82e                	sd	a1,48(sp)
    80003da4:	02c10fa3          	sb	a2,63(sp)
    80003da8:	04000513          	li	a0,64
                assert!(bit < Self::BIT_LENGTH);
    80003dac:	02a5e263          	bltu	a1,a0,80003dd0 <.LBB3_11+0x16>
    80003db0:	a009                	j	80003db2 <.LBB3_10>

0000000080003db2 <.LBB3_10>:
    80003db2:	00022517          	auipc	a0,0x22
    80003db6:	00e50513          	addi	a0,a0,14 # 80025dc0 <.L__unnamed_1>

0000000080003dba <.LBB3_11>:
    80003dba:	00022617          	auipc	a2,0x22
    80003dbe:	08e60613          	addi	a2,a2,142 # 80025e48 <.L__unnamed_2>
    80003dc2:	02800593          	li	a1,40
    80003dc6:	0001e097          	auipc	ra,0x1e
    80003dca:	336080e7          	jalr	822(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80003dce:	0000                	unimp
    80003dd0:	7502                	ld	a0,32(sp)
    80003dd2:	4581                	li	a1,0
                if value {
    80003dd4:	00b50e63          	beq	a0,a1,80003df0 <.LBB3_11+0x36>
    80003dd8:	a009                	j	80003dda <.LBB3_11+0x20>
                    *self |= 1 << bit;
    80003dda:	6642                	ld	a2,16(sp)
    80003ddc:	fc067513          	andi	a0,a2,-64
    80003de0:	4585                	li	a1,1
    80003de2:	00c595b3          	sll	a1,a1,a2
    80003de6:	e42e                	sd	a1,8(sp)
    80003de8:	4581                	li	a1,0
    80003dea:	02b51f63          	bne	a0,a1,80003e28 <.LBB3_12>
    80003dee:	a821                	j	80003e06 <.LBB3_11+0x4c>
                    *self &= !(1 << bit);
    80003df0:	6642                	ld	a2,16(sp)
    80003df2:	fc067513          	andi	a0,a2,-64
    80003df6:	4585                	li	a1,1
    80003df8:	00c595b3          	sll	a1,a1,a2
    80003dfc:	e02e                	sd	a1,0(sp)
    80003dfe:	4581                	li	a1,0
    80003e00:	04b51363          	bne	a0,a1,80003e46 <.LBB3_14>
    80003e04:	a039                	j	80003e12 <.LBB3_11+0x58>
                    *self |= 1 << bit;
    80003e06:	65e2                	ld	a1,24(sp)
    80003e08:	6622                	ld	a2,8(sp)
    80003e0a:	6188                	ld	a0,0(a1)
    80003e0c:	8d51                	or	a0,a0,a2
    80003e0e:	e188                	sd	a0,0(a1)
                if value {
    80003e10:	a809                	j	80003e22 <.LBB3_11+0x68>
                    *self &= !(1 << bit);
    80003e12:	65e2                	ld	a1,24(sp)
    80003e14:	6502                	ld	a0,0(sp)
    80003e16:	fff54613          	not	a2,a0
    80003e1a:	6188                	ld	a0,0(a1)
    80003e1c:	8d71                	and	a0,a0,a2
    80003e1e:	e188                	sd	a0,0(a1)
                if value {
    80003e20:	a009                	j	80003e22 <.LBB3_11+0x68>
            }
    80003e22:	6562                	ld	a0,24(sp)
    80003e24:	6121                	addi	sp,sp,64
    80003e26:	8082                	ret

0000000080003e28 <.LBB3_12>:
                    *self |= 1 << bit;
    80003e28:	00022517          	auipc	a0,0x22
    80003e2c:	03850513          	addi	a0,a0,56 # 80025e60 <str.0>

0000000080003e30 <.LBB3_13>:
    80003e30:	00022617          	auipc	a2,0x22
    80003e34:	01860613          	addi	a2,a2,24 # 80025e48 <.L__unnamed_2>
    80003e38:	02300593          	li	a1,35
    80003e3c:	0001e097          	auipc	ra,0x1e
    80003e40:	2c0080e7          	jalr	704(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080003e46 <.LBB3_14>:
                    *self &= !(1 << bit);
    80003e46:	00022517          	auipc	a0,0x22
    80003e4a:	01a50513          	addi	a0,a0,26 # 80025e60 <str.0>

0000000080003e4e <.LBB3_15>:
    80003e4e:	00022617          	auipc	a2,0x22
    80003e52:	ffa60613          	addi	a2,a2,-6 # 80025e48 <.L__unnamed_2>
    80003e56:	02300593          	li	a1,35
    80003e5a:	0001e097          	auipc	ra,0x1e
    80003e5e:	2a2080e7          	jalr	674(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel6driver7console4putc17h15d6d35ca2ac864eE:

0000000080003e64 <_ZN6kernel6driver7console4putc17h15d6d35ca2ac864eE>:
        }
    }
}

/// Put a single character to console. 
pub(crate) fn putc(c: u8) {
    80003e64:	1101                	addi	sp,sp,-32
    80003e66:	ec06                	sd	ra,24(sp)
    80003e68:	85aa                	mv	a1,a0
    80003e6a:	0ff5f513          	andi	a0,a1,255
    80003e6e:	862e                	mv	a2,a1
    80003e70:	e432                	sd	a2,8(sp)
    80003e72:	00b10ba3          	sb	a1,23(sp)
    80003e76:	45a1                	li	a1,8
    if c == CTRL_BS {
    80003e78:	00b51963          	bne	a0,a1,80003e8a <_ZN6kernel6driver7console4putc17h15d6d35ca2ac864eE+0x26>
    80003e7c:	a009                	j	80003e7e <_ZN6kernel6driver7console4putc17h15d6d35ca2ac864eE+0x1a>
    80003e7e:	4521                	li	a0,8
        putc_sync(CTRL_BS);
    80003e80:	00017097          	auipc	ra,0x17
    80003e84:	6b0080e7          	jalr	1712(ra) # 8001b530 <_ZN6kernel6driver4uart9putc_sync17h8ef1d9e0f2a8eae2E>
    80003e88:	a039                	j	80003e96 <_ZN6kernel6driver7console4putc17h15d6d35ca2ac864eE+0x32>
        putc_sync(b' ');
        putc_sync(CTRL_BS);
    } else {
        putc_sync(c);
    80003e8a:	6522                	ld	a0,8(sp)
    80003e8c:	00017097          	auipc	ra,0x17
    80003e90:	6a4080e7          	jalr	1700(ra) # 8001b530 <_ZN6kernel6driver4uart9putc_sync17h8ef1d9e0f2a8eae2E>
    80003e94:	a839                	j	80003eb2 <_ZN6kernel6driver7console4putc17h15d6d35ca2ac864eE+0x4e>
    80003e96:	02000513          	li	a0,32
        putc_sync(b' ');
    80003e9a:	00017097          	auipc	ra,0x17
    80003e9e:	696080e7          	jalr	1686(ra) # 8001b530 <_ZN6kernel6driver4uart9putc_sync17h8ef1d9e0f2a8eae2E>
    80003ea2:	a009                	j	80003ea4 <_ZN6kernel6driver7console4putc17h15d6d35ca2ac864eE+0x40>
    80003ea4:	4521                	li	a0,8
        putc_sync(CTRL_BS);
    80003ea6:	00017097          	auipc	ra,0x17
    80003eaa:	68a080e7          	jalr	1674(ra) # 8001b530 <_ZN6kernel6driver4uart9putc_sync17h8ef1d9e0f2a8eae2E>
    80003eae:	a009                	j	80003eb0 <_ZN6kernel6driver7console4putc17h15d6d35ca2ac864eE+0x4c>
    if c == CTRL_BS {
    80003eb0:	a011                	j	80003eb4 <_ZN6kernel6driver7console4putc17h15d6d35ca2ac864eE+0x50>
    80003eb2:	a009                	j	80003eb4 <_ZN6kernel6driver7console4putc17h15d6d35ca2ac864eE+0x50>
    }
}
    80003eb4:	60e2                	ld	ra,24(sp)
    80003eb6:	6105                	addi	sp,sp,32
    80003eb8:	8082                	ret

Disassembly of section .text._ZN6kernel6driver7console12console_read17hbad5452084e392ddE:

0000000080003eba <_ZN6kernel6driver7console12console_read17hbad5452084e392ddE>:

/// User read from the console go here. 
/// copy a whole input line to dst. 
/// is_user indicated whether dst is a user
/// or kernel address. 
pub(super) fn console_read(
    80003eba:	712d                	addi	sp,sp,-288
    80003ebc:	ee06                	sd	ra,280(sp)
    80003ebe:	ed32                	sd	a2,152(sp)
    80003ec0:	86aa                	mv	a3,a0
    80003ec2:	f136                	sd	a3,160(sp)
    80003ec4:	f52e                	sd	a1,168(sp)
    80003ec6:	0ea10fa3          	sb	a0,255(sp)
    80003eca:	e232                	sd	a2,256(sp)

0000000080003ecc <.LBB1_45>:
    is_user: bool, 
    mut dst: usize, 
    size: usize
) -> Option<usize> {
    let mut console = CONSOLE.acquire();
    80003ecc:	00033517          	auipc	a0,0x33
    80003ed0:	59450513          	addi	a0,a0,1428 # 80037460 <_ZN6kernel6driver7console7CONSOLE17h7fc6e38a093b4810E>
    80003ed4:	0000c097          	auipc	ra,0xc
    80003ed8:	3e0080e7          	jalr	992(ra) # 800102b4 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h431ef48b95a5e4c6E>
    80003edc:	e1aa                	sd	a0,192(sp)
    80003ede:	a009                	j	80003ee0 <.LBB1_45+0x14>

    let mut left = size;
    80003ee0:	656a                	ld	a0,152(sp)
    80003ee2:	e5aa                	sd	a0,200(sp)
    while left > 0 {
    80003ee4:	a009                	j	80003ee6 <.LBB1_45+0x1a>
    80003ee6:	652e                	ld	a0,200(sp)
    80003ee8:	4581                	li	a1,0
    80003eea:	00b51463          	bne	a0,a1,80003ef2 <.LBB1_45+0x26>
    80003eee:	a009                	j	80003ef0 <.LBB1_45+0x24>
    80003ef0:	a2f1                	j	800040bc <.LBB1_49+0x108>
    80003ef2:	0188                	addi	a0,sp,192
        // if no available data in console buf 
        // wait until the console device write some data. 
        while console.read_index == console.write_index {
    80003ef4:	0000d097          	auipc	ra,0xd
    80003ef8:	41c080e7          	jalr	1052(ra) # 80011310 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8f385c8b975788d5E>
    80003efc:	e92a                	sd	a0,144(sp)
    80003efe:	a009                	j	80003f00 <.LBB1_45+0x34>
    80003f00:	654a                	ld	a0,144(sp)
    80003f02:	e12a                	sd	a0,128(sp)
    80003f04:	0188                	addi	a0,sp,192
    80003f06:	0000d097          	auipc	ra,0xd
    80003f0a:	40a080e7          	jalr	1034(ra) # 80011310 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8f385c8b975788d5E>
    80003f0e:	e52a                	sd	a0,136(sp)
    80003f10:	a009                	j	80003f12 <.LBB1_45+0x46>
    80003f12:	650a                	ld	a0,128(sp)
    80003f14:	65aa                	ld	a1,136(sp)
    80003f16:	05a1                	addi	a1,a1,8
    80003f18:	0000b097          	auipc	ra,0xb
    80003f1c:	670080e7          	jalr	1648(ra) # 8000f588 <_ZN79_$LT$core..num..wrapping..Wrapping$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h94523e3cd63d6752E>
    80003f20:	fcaa                	sd	a0,120(sp)
    80003f22:	a009                	j	80003f24 <.LBB1_45+0x58>
    80003f24:	7566                	ld	a0,120(sp)
    80003f26:	e909                	bnez	a0,80003f38 <.LBB1_46>
    80003f28:	a009                	j	80003f2a <.LBB1_45+0x5e>
    80003f2a:	0188                	addi	a0,sp,192
            p.sleep(&console.read_index as *const _ as usize, console);
            console = CONSOLE.acquire();
        }

        // read
        let c = console.buf[console.read_index.0 % INPUT_BUF];
    80003f2c:	0000d097          	auipc	ra,0xd
    80003f30:	3e4080e7          	jalr	996(ra) # 80011310 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8f385c8b975788d5E>
    80003f34:	f8aa                	sd	a0,112(sp)
    80003f36:	a861                	j	80003fce <.LBB1_49+0x1a>

0000000080003f38 <.LBB1_46>:
                CPU_MANAGER.myproc().expect("Fail to get my process")
    80003f38:	00060517          	auipc	a0,0x60
    80003f3c:	20850513          	addi	a0,a0,520 # 80064140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    80003f40:	0000e097          	auipc	ra,0xe
    80003f44:	aea080e7          	jalr	-1302(ra) # 80011a2a <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    80003f48:	f4aa                	sd	a0,104(sp)
    80003f4a:	a009                	j	80003f4c <.LBB1_46+0x14>
    80003f4c:	7526                	ld	a0,104(sp)

0000000080003f4e <.LBB1_47>:
    80003f4e:	00022597          	auipc	a1,0x22
    80003f52:	f3c58593          	addi	a1,a1,-196 # 80025e8a <.L__unnamed_1>

0000000080003f56 <.LBB1_48>:
    80003f56:	00022697          	auipc	a3,0x22
    80003f5a:	f6268693          	addi	a3,a3,-158 # 80025eb8 <.L__unnamed_2>
    80003f5e:	4659                	li	a2,22
    80003f60:	0000b097          	auipc	ra,0xb
    80003f64:	b3c080e7          	jalr	-1220(ra) # 8000ea9c <_ZN4core6option15Option$LT$T$GT$6expect17h5cc0070b74d715b8E>
    80003f68:	f0aa                	sd	a0,96(sp)
    80003f6a:	a009                	j	80003f6c <.LBB1_48+0x16>
    80003f6c:	7506                	ld	a0,96(sp)
    80003f6e:	e62a                	sd	a0,264(sp)
            if p.killed() {
    80003f70:	00012097          	auipc	ra,0x12
    80003f74:	d96080e7          	jalr	-618(ra) # 80015d06 <_ZN6kernel7process7process11task_struct6killed17h4fc8d78e83fc4243E>
    80003f78:	ecaa                	sd	a0,88(sp)
    80003f7a:	a009                	j	80003f7c <.LBB1_48+0x26>
    80003f7c:	6566                	ld	a0,88(sp)
    80003f7e:	4581                	li	a1,0
    80003f80:	00b50b63          	beq	a0,a1,80003f96 <.LBB1_48+0x40>
    80003f84:	a009                	j	80003f86 <.LBB1_48+0x30>
    80003f86:	4501                	li	a0,0
                return None
    80003f88:	f92a                	sd	a0,176(sp)
    80003f8a:	0188                	addi	a0,sp,192
        }
    }
    // 结果应该返回读取的字节数
    let ret = size - left;
    Some(ret)
}
    80003f8c:	00003097          	auipc	ra,0x3
    80003f90:	138080e7          	jalr	312(ra) # 800070c4 <_ZN4core3ptr98drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..driver..console..Console$GT$$GT$17hbea8b3b0221deadaE>
    80003f94:	a2b9                	j	800040e2 <.LBB1_49+0x12e>
    80003f96:	0188                	addi	a0,sp,192
            p.sleep(&console.read_index as *const _ as usize, console);
    80003f98:	0000d097          	auipc	ra,0xd
    80003f9c:	378080e7          	jalr	888(ra) # 80011310 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8f385c8b975788d5E>
    80003fa0:	e8aa                	sd	a0,80(sp)
    80003fa2:	a009                	j	80003fa4 <.LBB1_48+0x4e>
    80003fa4:	65c6                	ld	a1,80(sp)
    80003fa6:	7506                	ld	a0,96(sp)
    80003fa8:	660e                	ld	a2,192(sp)
    80003faa:	0000e097          	auipc	ra,0xe
    80003fae:	98c080e7          	jalr	-1652(ra) # 80011936 <_ZN6kernel7process7process11task_struct5sleep17hcd4817f58ebdb572E>
    80003fb2:	a009                	j	80003fb4 <.LBB1_49>

0000000080003fb4 <.LBB1_49>:
            console = CONSOLE.acquire();
    80003fb4:	00033517          	auipc	a0,0x33
    80003fb8:	4ac50513          	addi	a0,a0,1196 # 80037460 <_ZN6kernel6driver7console7CONSOLE17h7fc6e38a093b4810E>
    80003fbc:	0000c097          	auipc	ra,0xc
    80003fc0:	2f8080e7          	jalr	760(ra) # 800102b4 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h431ef48b95a5e4c6E>
    80003fc4:	e4aa                	sd	a0,72(sp)
    80003fc6:	a009                	j	80003fc8 <.LBB1_49+0x14>
    80003fc8:	6526                	ld	a0,72(sp)
    80003fca:	e1aa                	sd	a0,192(sp)
        while console.read_index == console.write_index {
    80003fcc:	b71d                	j	80003ef2 <.LBB1_45+0x26>
    80003fce:	0188                	addi	a0,sp,192
        let c = console.buf[console.read_index.0 % INPUT_BUF];
    80003fd0:	0000d097          	auipc	ra,0xd
    80003fd4:	340080e7          	jalr	832(ra) # 80011310 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8f385c8b975788d5E>
    80003fd8:	e0aa                	sd	a0,64(sp)
    80003fda:	a009                	j	80003fdc <.LBB1_49+0x28>
    80003fdc:	6506                	ld	a0,64(sp)
    80003fde:	6108                	ld	a0,0(a0)
    80003fe0:	07f57593          	andi	a1,a0,127
    80003fe4:	fc2e                	sd	a1,56(sp)
    80003fe6:	07f00513          	li	a0,127
    80003fea:	10b56163          	bltu	a0,a1,800040ec <.LBB1_49+0x138>
    80003fee:	a009                	j	80003ff0 <.LBB1_49+0x3c>
    80003ff0:	7546                	ld	a0,112(sp)
    80003ff2:	75e2                	ld	a1,56(sp)
    80003ff4:	952e                	add	a0,a0,a1
    80003ff6:	01850503          	lb	a0,24(a0)
    80003ffa:	0ca10ba3          	sb	a0,215(sp)
    80003ffe:	0188                	addi	a0,sp,192
        console.read_index += Wrapping(1);
    80004000:	0000d097          	auipc	ra,0xd
    80004004:	3ce080e7          	jalr	974(ra) # 800113ce <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h6db8254bcc254a19E>
    80004008:	f82a                	sd	a0,48(sp)
    8000400a:	a009                	j	8000400c <.LBB1_49+0x58>
    8000400c:	7542                	ld	a0,48(sp)
    8000400e:	4585                	li	a1,1
    80004010:	edae                	sd	a1,216(sp)
    80004012:	00003097          	auipc	ra,0x3
    80004016:	442080e7          	jalr	1090(ra) # 80007454 <_ZN90_$LT$core..num..wrapping..Wrapping$LT$usize$GT$$u20$as$u20$core..ops..arith..AddAssign$GT$10add_assign17hc731864567f3481aE>
    8000401a:	a009                	j	8000401c <.LBB1_49+0x68>
        if c == CTRL_EOT {
    8000401c:	0d714503          	lbu	a0,215(sp)
    80004020:	4591                	li	a1,4
    80004022:	00b51863          	bne	a0,a1,80004032 <.LBB1_49+0x7e>
    80004026:	a009                	j	80004028 <.LBB1_49+0x74>
            if left < size {
    80004028:	65ea                	ld	a1,152(sp)
    8000402a:	652e                	ld	a0,200(sp)
    8000402c:	00b56f63          	bltu	a0,a1,8000404a <.LBB1_49+0x96>
    80004030:	a025                	j	80004058 <.LBB1_49+0xa4>
        if copy_from_kernel(is_user, dst, &c as *const u8, 1).is_err() {
    80004032:	750a                	ld	a0,160(sp)
    80004034:	75aa                	ld	a1,168(sp)
    80004036:	0d710613          	addi	a2,sp,215
    8000403a:	4685                	li	a3,1
    8000403c:	0001a097          	auipc	ra,0x1a
    80004040:	a6a080e7          	jalr	-1430(ra) # 8001daa6 <_ZN6kernel6memory16copy_from_kernel17hf0969988b3a5fbc0E>
    80004044:	f5aa                	sd	a0,232(sp)
    80004046:	f9ae                	sd	a1,240(sp)
    80004048:	a01d                	j	8000406e <.LBB1_49+0xba>
    8000404a:	0188                	addi	a0,sp,192
                console.read_index -= Wrapping(1);
    8000404c:	0000d097          	auipc	ra,0xd
    80004050:	382080e7          	jalr	898(ra) # 800113ce <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h6db8254bcc254a19E>
    80004054:	f42a                	sd	a0,40(sp)
    80004056:	a011                	j	8000405a <.LBB1_49+0xa6>
            if left < size {
    80004058:	a811                	j	8000406c <.LBB1_49+0xb8>
    8000405a:	7522                	ld	a0,40(sp)
    8000405c:	4585                	li	a1,1
                console.read_index -= Wrapping(1);
    8000405e:	f1ae                	sd	a1,224(sp)
    80004060:	00003097          	auipc	ra,0x3
    80004064:	418080e7          	jalr	1048(ra) # 80007478 <_ZN90_$LT$core..num..wrapping..Wrapping$LT$usize$GT$$u20$as$u20$core..ops..arith..SubAssign$GT$10sub_assign17h67a53f3fa0ccb70bE>
    80004068:	a009                	j	8000406a <.LBB1_49+0xb6>
            if left < size {
    8000406a:	a009                	j	8000406c <.LBB1_49+0xb8>
    8000406c:	a881                	j	800040bc <.LBB1_49+0x108>
    8000406e:	11a8                	addi	a0,sp,232
        if copy_from_kernel(is_user, dst, &c as *const u8, 1).is_err() {
    80004070:	00009097          	auipc	ra,0x9
    80004074:	c46080e7          	jalr	-954(ra) # 8000ccb6 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h304118d236359d80E>
    80004078:	f02a                	sd	a0,32(sp)
    8000407a:	a009                	j	8000407c <.LBB1_49+0xc8>
    8000407c:	7502                	ld	a0,32(sp)
    8000407e:	4581                	li	a1,0
    80004080:	00b50463          	beq	a0,a1,80004088 <.LBB1_49+0xd4>
    80004084:	a009                	j	80004086 <.LBB1_49+0xd2>
    80004086:	a81d                	j	800040bc <.LBB1_49+0x108>
        dst += 1;
    80004088:	75aa                	ld	a1,168(sp)
    8000408a:	00158513          	addi	a0,a1,1
    8000408e:	ec2a                	sd	a0,24(sp)
    80004090:	06b56a63          	bltu	a0,a1,80004104 <.LBB1_51>
    80004094:	a009                	j	80004096 <.LBB1_49+0xe2>
    80004096:	6562                	ld	a0,24(sp)
    80004098:	f52a                	sd	a0,168(sp)
        left -= 1;
    8000409a:	652e                	ld	a0,200(sp)
    8000409c:	fff50593          	addi	a1,a0,-1
    800040a0:	e82e                	sd	a1,16(sp)
    800040a2:	06b56f63          	bltu	a0,a1,80004120 <.LBB1_53>
    800040a6:	a009                	j	800040a8 <.LBB1_49+0xf4>
    800040a8:	6542                	ld	a0,16(sp)
    800040aa:	e5aa                	sd	a0,200(sp)
        if c == CTRL_LF {
    800040ac:	0d714503          	lbu	a0,215(sp)
    800040b0:	45a9                	li	a1,10
    800040b2:	00b51463          	bne	a0,a1,800040ba <.LBB1_49+0x106>
    800040b6:	a009                	j	800040b8 <.LBB1_49+0x104>
    800040b8:	a011                	j	800040bc <.LBB1_49+0x108>
    while left > 0 {
    800040ba:	b535                	j	80003ee6 <.LBB1_45+0x1a>
    let ret = size - left;
    800040bc:	656a                	ld	a0,152(sp)
    800040be:	65ae                	ld	a1,200(sp)
    800040c0:	40b505b3          	sub	a1,a0,a1
    800040c4:	e42e                	sd	a1,8(sp)
    800040c6:	06b56c63          	bltu	a0,a1,8000413e <.LBB1_55>
    800040ca:	a009                	j	800040cc <.LBB1_49+0x118>
    800040cc:	6522                	ld	a0,8(sp)
    800040ce:	ea2a                	sd	a0,272(sp)
    Some(ret)
    800040d0:	fd2a                	sd	a0,184(sp)
    800040d2:	4505                	li	a0,1
    800040d4:	f92a                	sd	a0,176(sp)
    800040d6:	0188                	addi	a0,sp,192
}
    800040d8:	00003097          	auipc	ra,0x3
    800040dc:	fec080e7          	jalr	-20(ra) # 800070c4 <_ZN4core3ptr98drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..driver..console..Console$GT$$GT$17hbea8b3b0221deadaE>
    800040e0:	a009                	j	800040e2 <.LBB1_49+0x12e>
    800040e2:	754a                	ld	a0,176(sp)
    800040e4:	75ea                	ld	a1,184(sp)
    800040e6:	60f2                	ld	ra,280(sp)
    800040e8:	6115                	addi	sp,sp,288
    800040ea:	8082                	ret
        let c = console.buf[console.read_index.0 % INPUT_BUF];
    800040ec:	7562                	ld	a0,56(sp)

00000000800040ee <.LBB1_50>:
    800040ee:	00022617          	auipc	a2,0x22
    800040f2:	de260613          	addi	a2,a2,-542 # 80025ed0 <.L__unnamed_3>
    800040f6:	08000593          	li	a1,128
    800040fa:	0001e097          	auipc	ra,0x1e
    800040fe:	02e080e7          	jalr	46(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

0000000080004104 <.LBB1_51>:
        dst += 1;
    80004104:	00022517          	auipc	a0,0x22
    80004108:	dfc50513          	addi	a0,a0,-516 # 80025f00 <str.0>

000000008000410c <.LBB1_52>:
    8000410c:	00022617          	auipc	a2,0x22
    80004110:	ddc60613          	addi	a2,a2,-548 # 80025ee8 <.L__unnamed_4>
    80004114:	45f1                	li	a1,28
    80004116:	0001e097          	auipc	ra,0x1e
    8000411a:	fe6080e7          	jalr	-26(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080004120 <.LBB1_53>:
        left -= 1;
    80004120:	00022517          	auipc	a0,0x22
    80004124:	e2050513          	addi	a0,a0,-480 # 80025f40 <str.1>

0000000080004128 <.LBB1_54>:
    80004128:	00022617          	auipc	a2,0x22
    8000412c:	df860613          	addi	a2,a2,-520 # 80025f20 <.L__unnamed_5>
    80004130:	02100593          	li	a1,33
    80004134:	0001e097          	auipc	ra,0x1e
    80004138:	fc8080e7          	jalr	-56(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008000413e <.LBB1_55>:
    let ret = size - left;
    8000413e:	00022517          	auipc	a0,0x22
    80004142:	e0250513          	addi	a0,a0,-510 # 80025f40 <str.1>

0000000080004146 <.LBB1_56>:
    80004146:	00022617          	auipc	a2,0x22
    8000414a:	e2260613          	addi	a2,a2,-478 # 80025f68 <.L__unnamed_6>
    8000414e:	02100593          	li	a1,33
    80004152:	0001e097          	auipc	ra,0x1e
    80004156:	faa080e7          	jalr	-86(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel6driver7console13console_write17h0e125bdbb626dc42E:

000000008000415c <_ZN6kernel6driver7console13console_write17h0e125bdbb626dc42E>:

/// User write to the console go here. 
pub(super) fn console_write(
    8000415c:	7155                	addi	sp,sp,-208
    8000415e:	e586                	sd	ra,200(sp)
    80004160:	f032                	sd	a2,32(sp)
    80004162:	862e                	mv	a2,a1
    80004164:	7582                	ld	a1,32(sp)
    80004166:	86aa                	mv	a3,a0
    80004168:	f436                	sd	a3,40(sp)
    8000416a:	e0b2                	sd	a2,64(sp)
    8000416c:	0aa103a3          	sb	a0,167(sp)
    80004170:	f52e                	sd	a1,168(sp)
    80004172:	4501                	li	a0,0
    is_user: bool,
    mut src: usize,
    size: usize
) -> Option<usize> {
    for i in 0..size {
    80004174:	ecaa                	sd	a0,88(sp)
    80004176:	f0ae                	sd	a1,96(sp)
    80004178:	0001b097          	auipc	ra,0x1b
    8000417c:	650080e7          	jalr	1616(ra) # 8001f7c8 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he0a8d93712e5493bE>
    80004180:	f82a                	sd	a0,48(sp)
    80004182:	fc2e                	sd	a1,56(sp)
    80004184:	a009                	j	80004186 <_ZN6kernel6driver7console13console_write17h0e125bdbb626dc42E+0x2a>
    80004186:	7562                	ld	a0,56(sp)
    80004188:	75c2                	ld	a1,48(sp)
    8000418a:	f4ae                	sd	a1,104(sp)
    8000418c:	f8aa                	sd	a0,112(sp)
    8000418e:	a009                	j	80004190 <_ZN6kernel6driver7console13console_write17h0e125bdbb626dc42E+0x34>
    80004190:	10a8                	addi	a0,sp,104
    80004192:	0001b097          	auipc	ra,0x1b
    80004196:	5c8080e7          	jalr	1480(ra) # 8001f75a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE>
    8000419a:	fcaa                	sd	a0,120(sp)
    8000419c:	e12e                	sd	a1,128(sp)
    8000419e:	a009                	j	800041a0 <_ZN6kernel6driver7console13console_write17h0e125bdbb626dc42E+0x44>
    800041a0:	7566                	ld	a0,120(sp)
    800041a2:	4581                	li	a1,0
    800041a4:	00b50463          	beq	a0,a1,800041ac <_ZN6kernel6driver7console13console_write17h0e125bdbb626dc42E+0x50>
    800041a8:	a009                	j	800041aa <_ZN6kernel6driver7console13console_write17h0e125bdbb626dc42E+0x4e>
    800041aa:	a039                	j	800041b8 <_ZN6kernel6driver7console13console_write17h0e125bdbb626dc42E+0x5c>
            return Some(i)
        }
        UART.putc(c);
        src += 1;
    }
    Some(size)
    800041ac:	7502                	ld	a0,32(sp)
    800041ae:	e8aa                	sd	a0,80(sp)
    800041b0:	4505                	li	a0,1
    800041b2:	e4aa                	sd	a0,72(sp)
}
    800041b4:	a8a5                	j	8000422c <.LBB2_16+0x26>
    for i in 0..size {
    800041b6:	0000                	unimp
    800041b8:	75a2                	ld	a1,40(sp)
    800041ba:	650a                	ld	a0,128(sp)
    800041bc:	ec2a                	sd	a0,24(sp)
    800041be:	f92a                	sd	a0,176(sp)
    800041c0:	fd2a                	sd	a0,184(sp)
    800041c2:	e1aa                	sd	a0,192(sp)
    800041c4:	4501                	li	a0,0
        let mut c = 0u8;
    800041c6:	08a107a3          	sb	a0,143(sp)
        if copy_to_kernel(&mut c as *mut u8, is_user, src, 1).is_err() {
    800041ca:	6606                	ld	a2,64(sp)
    800041cc:	08f10513          	addi	a0,sp,143
    800041d0:	4685                	li	a3,1
    800041d2:	0001a097          	auipc	ra,0x1a
    800041d6:	824080e7          	jalr	-2012(ra) # 8001d9f6 <_ZN6kernel6memory14copy_to_kernel17hd4730b664342d99cE>
    800041da:	e92a                	sd	a0,144(sp)
    800041dc:	ed2e                	sd	a1,152(sp)
    800041de:	a009                	j	800041e0 <_ZN6kernel6driver7console13console_write17h0e125bdbb626dc42E+0x84>
    800041e0:	0908                	addi	a0,sp,144
    800041e2:	00009097          	auipc	ra,0x9
    800041e6:	ad4080e7          	jalr	-1324(ra) # 8000ccb6 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h304118d236359d80E>
    800041ea:	e82a                	sd	a0,16(sp)
    800041ec:	a009                	j	800041ee <_ZN6kernel6driver7console13console_write17h0e125bdbb626dc42E+0x92>
    800041ee:	6542                	ld	a0,16(sp)
    800041f0:	4581                	li	a1,0
    800041f2:	00b50863          	beq	a0,a1,80004202 <_ZN6kernel6driver7console13console_write17h0e125bdbb626dc42E+0xa6>
    800041f6:	a009                	j	800041f8 <_ZN6kernel6driver7console13console_write17h0e125bdbb626dc42E+0x9c>
            return Some(i)
    800041f8:	6562                	ld	a0,24(sp)
    800041fa:	e8aa                	sd	a0,80(sp)
    800041fc:	4505                	li	a0,1
    800041fe:	e4aa                	sd	a0,72(sp)
}
    80004200:	a035                	j	8000422c <.LBB2_16+0x26>
        UART.putc(c);
    80004202:	08f10583          	lb	a1,143(sp)

0000000080004206 <.LBB2_16>:
    80004206:	00057517          	auipc	a0,0x57
    8000420a:	2da50513          	addi	a0,a0,730 # 8005b4e0 <_ZN6kernel6driver4uart4UART17h0708b3e179d548ddE>
    8000420e:	00006097          	auipc	ra,0x6
    80004212:	bcc080e7          	jalr	-1076(ra) # 80009dda <_ZN6kernel6driver4uart84_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..driver..uart..Uart$GT$$GT$4putc17h6cd19d349a1fe87bE>
    80004216:	a009                	j	80004218 <.LBB2_16+0x12>
        src += 1;
    80004218:	6586                	ld	a1,64(sp)
    8000421a:	00158513          	addi	a0,a1,1
    8000421e:	e42a                	sd	a0,8(sp)
    80004220:	00b56b63          	bltu	a0,a1,80004236 <.LBB2_17>
    80004224:	a009                	j	80004226 <.LBB2_16+0x20>
    80004226:	6522                	ld	a0,8(sp)
    80004228:	e0aa                	sd	a0,64(sp)
    for i in 0..size {
    8000422a:	b79d                	j	80004190 <_ZN6kernel6driver7console13console_write17h0e125bdbb626dc42E+0x34>
}
    8000422c:	6526                	ld	a0,72(sp)
    8000422e:	65c6                	ld	a1,80(sp)
    80004230:	60ae                	ld	ra,200(sp)
    80004232:	6169                	addi	sp,sp,208
    80004234:	8082                	ret

0000000080004236 <.LBB2_17>:
        src += 1;
    80004236:	00022517          	auipc	a0,0x22
    8000423a:	cca50513          	addi	a0,a0,-822 # 80025f00 <str.0>

000000008000423e <.LBB2_18>:
    8000423e:	00022617          	auipc	a2,0x22
    80004242:	d4260613          	addi	a2,a2,-702 # 80025f80 <.L__unnamed_7>
    80004246:	45f1                	li	a1,28
    80004248:	0001e097          	auipc	ra,0x1e
    8000424c:	eb4080e7          	jalr	-332(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel6driver7console12console_intr17hcdedd3169cb49f5fE:

0000000080004252 <_ZN6kernel6driver7console12console_intr17hcdedd3169cb49f5fE>:
/// The normal routine is: 
/// 1. user input;
/// 2. uart handler interrupt;
/// 3. console handle interrupt. 
/// 4. console echo back input or do extra controlling. 
pub(super) fn console_intr(c: u8) {
    80004252:	710d                	addi	sp,sp,-352
    80004254:	ee86                	sd	ra,344(sp)
    80004256:	85aa                	mv	a1,a0
    80004258:	e22e                	sd	a1,256(sp)
    8000425a:	14a107a3          	sb	a0,335(sp)

000000008000425e <.LBB3_73>:
    let mut console = CONSOLE.acquire();
    8000425e:	00033517          	auipc	a0,0x33
    80004262:	20250513          	addi	a0,a0,514 # 80037460 <_ZN6kernel6driver7console7CONSOLE17h7fc6e38a093b4810E>
    80004266:	0000c097          	auipc	ra,0xc
    8000426a:	04e080e7          	jalr	78(ra) # 800102b4 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h431ef48b95a5e4c6E>
    8000426e:	ea2a                	sd	a0,272(sp)
    80004270:	a009                	j	80004272 <.LBB3_73+0x14>

    match c {
        CTRL_PRINT_PROCESS => {
    80004272:	6512                	ld	a0,256(sp)
    80004274:	0ff57513          	andi	a0,a0,255
    80004278:	45a1                	li	a1,8
    8000427a:	12b50663          	beq	a0,a1,800043a6 <.LBB3_74+0xec>
    8000427e:	a009                	j	80004280 <.LBB3_73+0x22>
    80004280:	6512                	ld	a0,256(sp)
    80004282:	0ff57513          	andi	a0,a0,255
    80004286:	45c1                	li	a1,16
    80004288:	02b50963          	beq	a0,a1,800042ba <.LBB3_74>
    8000428c:	a009                	j	8000428e <.LBB3_73+0x30>
    8000428e:	6512                	ld	a0,256(sp)
    80004290:	0ff57513          	andi	a0,a0,255
    80004294:	45d5                	li	a1,21
    80004296:	02b50c63          	beq	a0,a1,800042ce <.LBB3_74+0x14>
    8000429a:	a009                	j	8000429c <.LBB3_73+0x3e>
    8000429c:	6512                	ld	a0,256(sp)
    8000429e:	0ff57513          	andi	a0,a0,255
    800042a2:	07f00593          	li	a1,127
    800042a6:	10b50063          	beq	a0,a1,800043a6 <.LBB3_74+0xec>
    800042aa:	a009                	j	800042ac <.LBB3_73+0x4e>
            }
        },

        _ => {
            // echo back
            if c != 0 && (console.edit_index - console.read_index).0 < INPUT_BUF {
    800042ac:	6512                	ld	a0,256(sp)
    800042ae:	0ff57513          	andi	a0,a0,255
    800042b2:	4581                	li	a1,0
    800042b4:	16b50463          	beq	a0,a1,8000441c <.LBB3_74+0x162>
    800042b8:	a2b5                	j	80004424 <.LBB3_74+0x16a>

00000000800042ba <.LBB3_74>:
                PROC_MANAGER.proc_dump();
    800042ba:	00053517          	auipc	a0,0x53
    800042be:	2e650513          	addi	a0,a0,742 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    800042c2:	0000a097          	auipc	ra,0xa
    800042c6:	e90080e7          	jalr	-368(ra) # 8000e152 <_ZN6kernel7process7manager11ProcManager9proc_dump17h983bd5c89559ec59E>
    800042ca:	a009                	j	800042cc <.LBB3_74+0x12>
    match c {
    800042cc:	ae01                	j	800045dc <.LBB3_75+0x14>
    800042ce:	0a08                	addi	a0,sp,272
            while console.edit_index != console.write_index &&
    800042d0:	0000d097          	auipc	ra,0xd
    800042d4:	040080e7          	jalr	64(ra) # 80011310 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8f385c8b975788d5E>
    800042d8:	fdaa                	sd	a0,248(sp)
    800042da:	a02d                	j	80004304 <.LBB3_74+0x4a>
    800042dc:	4505                	li	a0,1
    800042de:	10a10fa3          	sb	a0,287(sp)
    800042e2:	a821                	j	800042fa <.LBB3_74+0x40>
    800042e4:	4501                	li	a0,0
    800042e6:	10a10fa3          	sb	a0,287(sp)
    800042ea:	a801                	j	800042fa <.LBB3_74+0x40>
    800042ec:	0a08                	addi	a0,sp,272
            console.buf[(console.edit_index - Wrapping(1)).0 % INPUT_BUF] != CTRL_LF {
    800042ee:	0000d097          	auipc	ra,0xd
    800042f2:	022080e7          	jalr	34(ra) # 80011310 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8f385c8b975788d5E>
    800042f6:	f9aa                	sd	a0,240(sp)
    800042f8:	a825                	j	80004330 <.LBB3_74+0x76>
            while console.edit_index != console.write_index &&
    800042fa:	11f14503          	lbu	a0,287(sp)
    800042fe:	8905                	andi	a0,a0,1
    80004300:	ed25                	bnez	a0,80004378 <.LBB3_74+0xbe>
    80004302:	a895                	j	80004376 <.LBB3_74+0xbc>
    80004304:	756e                	ld	a0,248(sp)
    80004306:	0541                	addi	a0,a0,16
    80004308:	f1aa                	sd	a0,224(sp)
    8000430a:	0a08                	addi	a0,sp,272
    8000430c:	0000d097          	auipc	ra,0xd
    80004310:	004080e7          	jalr	4(ra) # 80011310 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8f385c8b975788d5E>
    80004314:	f5aa                	sd	a0,232(sp)
    80004316:	a009                	j	80004318 <.LBB3_74+0x5e>
    80004318:	750e                	ld	a0,224(sp)
    8000431a:	75ae                	ld	a1,232(sp)
    8000431c:	05a1                	addi	a1,a1,8
    8000431e:	0000b097          	auipc	ra,0xb
    80004322:	28a080e7          	jalr	650(ra) # 8000f5a8 <_ZN79_$LT$core..num..wrapping..Wrapping$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2ne17h2d3bd6a577efe0b1E>
    80004326:	edaa                	sd	a0,216(sp)
    80004328:	a009                	j	8000432a <.LBB3_74+0x70>
    8000432a:	656e                	ld	a0,216(sp)
    8000432c:	f161                	bnez	a0,800042ec <.LBB3_74+0x32>
    8000432e:	bf5d                	j	800042e4 <.LBB3_74+0x2a>
    80004330:	0a08                	addi	a0,sp,272
            console.buf[(console.edit_index - Wrapping(1)).0 % INPUT_BUF] != CTRL_LF {
    80004332:	0000d097          	auipc	ra,0xd
    80004336:	fde080e7          	jalr	-34(ra) # 80011310 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8f385c8b975788d5E>
    8000433a:	e9aa                	sd	a0,208(sp)
    8000433c:	a009                	j	8000433e <.LBB3_74+0x84>
    8000433e:	654e                	ld	a0,208(sp)
    80004340:	6908                	ld	a0,16(a0)
    80004342:	4585                	li	a1,1
    80004344:	f22e                	sd	a1,288(sp)
    80004346:	00003097          	auipc	ra,0x3
    8000434a:	0f0080e7          	jalr	240(ra) # 80007436 <_ZN84_$LT$core..num..wrapping..Wrapping$LT$usize$GT$$u20$as$u20$core..ops..arith..Sub$GT$3sub17h09c98f8a3aa1050aE>
    8000434e:	e5aa                	sd	a0,200(sp)
    80004350:	a009                	j	80004352 <.LBB3_74+0x98>
    80004352:	652e                	ld	a0,200(sp)
    80004354:	07f57593          	andi	a1,a0,127
    80004358:	e1ae                	sd	a1,192(sp)
    8000435a:	07f00513          	li	a0,127
    8000435e:	2ab56463          	bltu	a0,a1,80004606 <.LBB3_76+0x16>
    80004362:	a009                	j	80004364 <.LBB3_74+0xaa>
    80004364:	754e                	ld	a0,240(sp)
    80004366:	658e                	ld	a1,192(sp)
    80004368:	952e                	add	a0,a0,a1
    8000436a:	01854503          	lbu	a0,24(a0)
    8000436e:	45a9                	li	a1,10
            while console.edit_index != console.write_index &&
    80004370:	f6b516e3          	bne	a0,a1,800042dc <.LBB3_74+0x22>
    80004374:	bf85                	j	800042e4 <.LBB3_74+0x2a>
    match c {
    80004376:	a49d                	j	800045dc <.LBB3_75+0x14>
    80004378:	0a08                	addi	a0,sp,272
                console.edit_index -= Wrapping(1);
    8000437a:	0000d097          	auipc	ra,0xd
    8000437e:	054080e7          	jalr	84(ra) # 800113ce <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h6db8254bcc254a19E>
    80004382:	fd2a                	sd	a0,184(sp)
    80004384:	a009                	j	80004386 <.LBB3_74+0xcc>
    80004386:	756a                	ld	a0,184(sp)
    80004388:	0541                	addi	a0,a0,16
    8000438a:	4585                	li	a1,1
    8000438c:	f62e                	sd	a1,296(sp)
    8000438e:	00003097          	auipc	ra,0x3
    80004392:	0ea080e7          	jalr	234(ra) # 80007478 <_ZN90_$LT$core..num..wrapping..Wrapping$LT$usize$GT$$u20$as$u20$core..ops..arith..SubAssign$GT$10sub_assign17h67a53f3fa0ccb70bE>
    80004396:	a009                	j	80004398 <.LBB3_74+0xde>
    80004398:	4521                	li	a0,8
                putc(CTRL_BS);
    8000439a:	00000097          	auipc	ra,0x0
    8000439e:	aca080e7          	jalr	-1334(ra) # 80003e64 <_ZN6kernel6driver7console4putc17h15d6d35ca2ac864eE>
    800043a2:	a009                	j	800043a4 <.LBB3_74+0xea>
            while console.edit_index != console.write_index &&
    800043a4:	b72d                	j	800042ce <.LBB3_74+0x14>
    800043a6:	0a08                	addi	a0,sp,272
            if console.edit_index != console.write_index {
    800043a8:	0000d097          	auipc	ra,0xd
    800043ac:	f68080e7          	jalr	-152(ra) # 80011310 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8f385c8b975788d5E>
    800043b0:	f92a                	sd	a0,176(sp)
    800043b2:	a009                	j	800043b4 <.LBB3_74+0xfa>
    800043b4:	754a                	ld	a0,176(sp)
    800043b6:	0541                	addi	a0,a0,16
    800043b8:	f12a                	sd	a0,160(sp)
    800043ba:	0a08                	addi	a0,sp,272
    800043bc:	0000d097          	auipc	ra,0xd
    800043c0:	f54080e7          	jalr	-172(ra) # 80011310 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8f385c8b975788d5E>
    800043c4:	f52a                	sd	a0,168(sp)
    800043c6:	a009                	j	800043c8 <.LBB3_74+0x10e>
    800043c8:	750a                	ld	a0,160(sp)
    800043ca:	75aa                	ld	a1,168(sp)
    800043cc:	05a1                	addi	a1,a1,8
    800043ce:	0000b097          	auipc	ra,0xb
    800043d2:	1da080e7          	jalr	474(ra) # 8000f5a8 <_ZN79_$LT$core..num..wrapping..Wrapping$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2ne17h2d3bd6a577efe0b1E>
    800043d6:	ed2a                	sd	a0,152(sp)
    800043d8:	a009                	j	800043da <.LBB3_74+0x120>
    800043da:	656a                	ld	a0,152(sp)
    800043dc:	4581                	li	a1,0
    800043de:	00b50a63          	beq	a0,a1,800043f2 <.LBB3_74+0x138>
    800043e2:	a009                	j	800043e4 <.LBB3_74+0x12a>
    800043e4:	0a08                	addi	a0,sp,272
                console.edit_index -= Wrapping(1);
    800043e6:	0000d097          	auipc	ra,0xd
    800043ea:	fe8080e7          	jalr	-24(ra) # 800113ce <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h6db8254bcc254a19E>
    800043ee:	e92a                	sd	a0,144(sp)
    800043f0:	a011                	j	800043f4 <.LBB3_74+0x13a>
            if console.edit_index != console.write_index {
    800043f2:	a2ed                	j	800045dc <.LBB3_75+0x14>
                console.edit_index -= Wrapping(1);
    800043f4:	654a                	ld	a0,144(sp)
    800043f6:	0541                	addi	a0,a0,16
    800043f8:	4585                	li	a1,1
    800043fa:	fa2e                	sd	a1,304(sp)
    800043fc:	00003097          	auipc	ra,0x3
    80004400:	07c080e7          	jalr	124(ra) # 80007478 <_ZN90_$LT$core..num..wrapping..Wrapping$LT$usize$GT$$u20$as$u20$core..ops..arith..SubAssign$GT$10sub_assign17h67a53f3fa0ccb70bE>
    80004404:	a009                	j	80004406 <.LBB3_74+0x14c>
    80004406:	4521                	li	a0,8
                putc(CTRL_BS);
    80004408:	00000097          	auipc	ra,0x0
    8000440c:	a5c080e7          	jalr	-1444(ra) # 80003e64 <_ZN6kernel6driver7console4putc17h15d6d35ca2ac864eE>
    80004410:	a009                	j	80004412 <.LBB3_74+0x158>
            if console.edit_index != console.write_index {
    80004412:	a2e9                	j	800045dc <.LBB3_75+0x14>
    80004414:	4505                	li	a0,1
            if c != 0 && (console.edit_index - console.read_index).0 < INPUT_BUF {
    80004416:	12a10f23          	sb	a0,318(sp)
    8000441a:	a821                	j	80004432 <.LBB3_74+0x178>
    8000441c:	4501                	li	a0,0
    8000441e:	12a10f23          	sb	a0,318(sp)
    80004422:	a801                	j	80004432 <.LBB3_74+0x178>
    80004424:	0a08                	addi	a0,sp,272
    80004426:	0000d097          	auipc	ra,0xd
    8000442a:	eea080e7          	jalr	-278(ra) # 80011310 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8f385c8b975788d5E>
    8000442e:	e52a                	sd	a0,136(sp)
    80004430:	a031                	j	8000443c <.LBB3_74+0x182>
    80004432:	13e14503          	lbu	a0,318(sp)
    80004436:	8905                	andi	a0,a0,1
    80004438:	e91d                	bnez	a0,8000446e <.LBB3_74+0x1b4>
    8000443a:	a089                	j	8000447c <.LBB3_74+0x1c2>
    8000443c:	652a                	ld	a0,136(sp)
    8000443e:	6908                	ld	a0,16(a0)
    80004440:	fcaa                	sd	a0,120(sp)
    80004442:	0a08                	addi	a0,sp,272
    80004444:	0000d097          	auipc	ra,0xd
    80004448:	ecc080e7          	jalr	-308(ra) # 80011310 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8f385c8b975788d5E>
    8000444c:	e12a                	sd	a0,128(sp)
    8000444e:	a009                	j	80004450 <.LBB3_74+0x196>
    80004450:	7566                	ld	a0,120(sp)
    80004452:	658a                	ld	a1,128(sp)
    80004454:	618c                	ld	a1,0(a1)
    80004456:	00003097          	auipc	ra,0x3
    8000445a:	fe0080e7          	jalr	-32(ra) # 80007436 <_ZN84_$LT$core..num..wrapping..Wrapping$LT$usize$GT$$u20$as$u20$core..ops..arith..Sub$GT$3sub17h09c98f8a3aa1050aE>
    8000445e:	f8aa                	sd	a0,112(sp)
    80004460:	a009                	j	80004462 <.LBB3_74+0x1a8>
    80004462:	7546                	ld	a0,112(sp)
    80004464:	08000593          	li	a1,128
    80004468:	fab566e3          	bltu	a0,a1,80004414 <.LBB3_74+0x15a>
    8000446c:	bf45                	j	8000441c <.LBB3_74+0x162>
                let c = if c == CTRL_CR { CTRL_LF } else { c };
    8000446e:	6512                	ld	a0,256(sp)
    80004470:	0ff57513          	andi	a0,a0,255
    80004474:	45b5                	li	a1,13
    80004476:	00b50463          	beq	a0,a1,8000447e <.LBB3_74+0x1c4>
    8000447a:	a031                	j	80004486 <.LBB3_74+0x1cc>
            if c != 0 && (console.edit_index - console.read_index).0 < INPUT_BUF {
    8000447c:	a285                	j	800045dc <.LBB3_75+0x14>
    8000447e:	4529                	li	a0,10
                let c = if c == CTRL_CR { CTRL_LF } else { c };
    80004480:	12a10fa3          	sb	a0,319(sp)
    80004484:	a029                	j	8000448e <.LBB3_74+0x1d4>
    80004486:	6512                	ld	a0,256(sp)
    80004488:	12a10fa3          	sb	a0,319(sp)
    8000448c:	a009                	j	8000448e <.LBB3_74+0x1d4>
                putc(c);
    8000448e:	13f10503          	lb	a0,319(sp)
    80004492:	00000097          	auipc	ra,0x0
    80004496:	9d2080e7          	jalr	-1582(ra) # 80003e64 <_ZN6kernel6driver7console4putc17h15d6d35ca2ac864eE>
    8000449a:	a009                	j	8000449c <.LBB3_74+0x1e2>
    8000449c:	0a08                	addi	a0,sp,272
                let edit_index = console.edit_index.0 % INPUT_BUF;
    8000449e:	0000d097          	auipc	ra,0xd
    800044a2:	e72080e7          	jalr	-398(ra) # 80011310 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8f385c8b975788d5E>
    800044a6:	f4aa                	sd	a0,104(sp)
    800044a8:	a009                	j	800044aa <.LBB3_74+0x1f0>
    800044aa:	7526                	ld	a0,104(sp)
    800044ac:	6908                	ld	a0,16(a0)
    800044ae:	07f57513          	andi	a0,a0,127
    800044b2:	e8aa                	sd	a0,80(sp)
    800044b4:	eaaa                	sd	a0,336(sp)
                console.buf[edit_index] = c;
    800044b6:	13f14503          	lbu	a0,319(sp)
    800044ba:	ecaa                	sd	a0,88(sp)
    800044bc:	0a08                	addi	a0,sp,272
    800044be:	0000d097          	auipc	ra,0xd
    800044c2:	f10080e7          	jalr	-240(ra) # 800113ce <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h6db8254bcc254a19E>
    800044c6:	f0aa                	sd	a0,96(sp)
    800044c8:	a009                	j	800044ca <.LBB3_74+0x210>
    800044ca:	65c6                	ld	a1,80(sp)
    800044cc:	07f00513          	li	a0,127
    800044d0:	10b56f63          	bltu	a0,a1,800045ee <.LBB3_75+0x26>
    800044d4:	a009                	j	800044d6 <.LBB3_74+0x21c>
    800044d6:	6566                	ld	a0,88(sp)
    800044d8:	7586                	ld	a1,96(sp)
    800044da:	6646                	ld	a2,80(sp)
    800044dc:	95b2                	add	a1,a1,a2
    800044de:	00a58c23          	sb	a0,24(a1)
    800044e2:	0a08                	addi	a0,sp,272
                console.edit_index += Wrapping(1);
    800044e4:	0000d097          	auipc	ra,0xd
    800044e8:	eea080e7          	jalr	-278(ra) # 800113ce <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h6db8254bcc254a19E>
    800044ec:	e4aa                	sd	a0,72(sp)
    800044ee:	a009                	j	800044f0 <.LBB3_74+0x236>
    800044f0:	6526                	ld	a0,72(sp)
    800044f2:	0541                	addi	a0,a0,16
    800044f4:	4585                	li	a1,1
    800044f6:	e2ae                	sd	a1,320(sp)
    800044f8:	00003097          	auipc	ra,0x3
    800044fc:	f5c080e7          	jalr	-164(ra) # 80007454 <_ZN90_$LT$core..num..wrapping..Wrapping$LT$usize$GT$$u20$as$u20$core..ops..arith..AddAssign$GT$10add_assign17hc731864567f3481aE>
    80004500:	a009                	j	80004502 <.LBB3_74+0x248>
                if c == CTRL_LF || c == CTRL_EOT || (console.edit_index - console.read_index).0 == INPUT_BUF {
    80004502:	13f14503          	lbu	a0,319(sp)
    80004506:	45a9                	li	a1,10
    80004508:	02b50763          	beq	a0,a1,80004536 <.LBB3_74+0x27c>
    8000450c:	a82d                	j	80004546 <.LBB3_74+0x28c>
    8000450e:	4505                	li	a0,1
    80004510:	14a106a3          	sb	a0,333(sp)
    80004514:	a821                	j	8000452c <.LBB3_74+0x272>
    80004516:	4501                	li	a0,0
    80004518:	14a106a3          	sb	a0,333(sp)
    8000451c:	a801                	j	8000452c <.LBB3_74+0x272>
    8000451e:	0a08                	addi	a0,sp,272
    80004520:	0000d097          	auipc	ra,0xd
    80004524:	df0080e7          	jalr	-528(ra) # 80011310 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8f385c8b975788d5E>
    80004528:	e0aa                	sd	a0,64(sp)
    8000452a:	a80d                	j	8000455c <.LBB3_74+0x2a2>
    8000452c:	14d14503          	lbu	a0,333(sp)
    80004530:	8905                	andi	a0,a0,1
    80004532:	ed31                	bnez	a0,8000458e <.LBB3_74+0x2d4>
    80004534:	a0a5                	j	8000459c <.LBB3_74+0x2e2>
    80004536:	4505                	li	a0,1
    80004538:	14a10723          	sb	a0,334(sp)
    8000453c:	a819                	j	80004552 <.LBB3_74+0x298>
    8000453e:	4501                	li	a0,0
    80004540:	14a10723          	sb	a0,334(sp)
    80004544:	a039                	j	80004552 <.LBB3_74+0x298>
    80004546:	13f14503          	lbu	a0,319(sp)
    8000454a:	4591                	li	a1,4
    8000454c:	feb505e3          	beq	a0,a1,80004536 <.LBB3_74+0x27c>
    80004550:	b7fd                	j	8000453e <.LBB3_74+0x284>
    80004552:	14e14503          	lbu	a0,334(sp)
    80004556:	8905                	andi	a0,a0,1
    80004558:	f95d                	bnez	a0,8000450e <.LBB3_74+0x254>
    8000455a:	b7d1                	j	8000451e <.LBB3_74+0x264>
    8000455c:	6506                	ld	a0,64(sp)
    8000455e:	6908                	ld	a0,16(a0)
    80004560:	f82a                	sd	a0,48(sp)
    80004562:	0a08                	addi	a0,sp,272
    80004564:	0000d097          	auipc	ra,0xd
    80004568:	dac080e7          	jalr	-596(ra) # 80011310 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8f385c8b975788d5E>
    8000456c:	fc2a                	sd	a0,56(sp)
    8000456e:	a009                	j	80004570 <.LBB3_74+0x2b6>
    80004570:	7542                	ld	a0,48(sp)
    80004572:	75e2                	ld	a1,56(sp)
    80004574:	618c                	ld	a1,0(a1)
    80004576:	00003097          	auipc	ra,0x3
    8000457a:	ec0080e7          	jalr	-320(ra) # 80007436 <_ZN84_$LT$core..num..wrapping..Wrapping$LT$usize$GT$$u20$as$u20$core..ops..arith..Sub$GT$3sub17h09c98f8a3aa1050aE>
    8000457e:	f42a                	sd	a0,40(sp)
    80004580:	a009                	j	80004582 <.LBB3_74+0x2c8>
    80004582:	7522                	ld	a0,40(sp)
    80004584:	08000593          	li	a1,128
    80004588:	f8b503e3          	beq	a0,a1,8000450e <.LBB3_74+0x254>
    8000458c:	b769                	j	80004516 <.LBB3_74+0x25c>
    8000458e:	0a08                	addi	a0,sp,272
                    console.write_index = console.edit_index;
    80004590:	0000d097          	auipc	ra,0xd
    80004594:	d80080e7          	jalr	-640(ra) # 80011310 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8f385c8b975788d5E>
    80004598:	f02a                	sd	a0,32(sp)
    8000459a:	a011                	j	8000459e <.LBB3_74+0x2e4>
                if c == CTRL_LF || c == CTRL_EOT || (console.edit_index - console.read_index).0 == INPUT_BUF {
    8000459c:	a081                	j	800045dc <.LBB3_75+0x14>
                    console.write_index = console.edit_index;
    8000459e:	7502                	ld	a0,32(sp)
    800045a0:	6908                	ld	a0,16(a0)
    800045a2:	e82a                	sd	a0,16(sp)
    800045a4:	0a08                	addi	a0,sp,272
    800045a6:	0000d097          	auipc	ra,0xd
    800045aa:	e28080e7          	jalr	-472(ra) # 800113ce <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h6db8254bcc254a19E>
    800045ae:	ec2a                	sd	a0,24(sp)
    800045b0:	a009                	j	800045b2 <.LBB3_74+0x2f8>
    800045b2:	6542                	ld	a0,16(sp)
    800045b4:	65e2                	ld	a1,24(sp)
    800045b6:	e588                	sd	a0,8(a1)
    800045b8:	0a08                	addi	a0,sp,272
                    // 当检测到用户换行的时候，唤醒 `console_read` 进行读取
                    unsafe{
                        PROC_MANAGER.wake_up(&console.read_index as *const _ as usize)
    800045ba:	0000d097          	auipc	ra,0xd
    800045be:	d56080e7          	jalr	-682(ra) # 80011310 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8f385c8b975788d5E>
    800045c2:	e42a                	sd	a0,8(sp)
    800045c4:	a009                	j	800045c6 <.LBB3_74+0x30c>
    800045c6:	65a2                	ld	a1,8(sp)

00000000800045c8 <.LBB3_75>:
    800045c8:	00053517          	auipc	a0,0x53
    800045cc:	fd850513          	addi	a0,a0,-40 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    800045d0:	00009097          	auipc	ra,0x9
    800045d4:	27e080e7          	jalr	638(ra) # 8000d84e <_ZN6kernel7process7manager11ProcManager7wake_up17ha46b4d15ac07187bE>
    800045d8:	a009                	j	800045da <.LBB3_75+0x12>
                if c == CTRL_LF || c == CTRL_EOT || (console.edit_index - console.read_index).0 == INPUT_BUF {
    800045da:	a009                	j	800045dc <.LBB3_75+0x14>
    800045dc:	0a08                	addi	a0,sp,272
                    };
                }
            }
        }
    }
}
    800045de:	00003097          	auipc	ra,0x3
    800045e2:	ae6080e7          	jalr	-1306(ra) # 800070c4 <_ZN4core3ptr98drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..driver..console..Console$GT$$GT$17hbea8b3b0221deadaE>
    800045e6:	a009                	j	800045e8 <.LBB3_75+0x20>
    800045e8:	60f6                	ld	ra,344(sp)
    800045ea:	6135                	addi	sp,sp,352
    800045ec:	8082                	ret
                console.buf[edit_index] = c;
    800045ee:	6546                	ld	a0,80(sp)

00000000800045f0 <.LBB3_76>:
    800045f0:	00022617          	auipc	a2,0x22
    800045f4:	9a860613          	addi	a2,a2,-1624 # 80025f98 <.L__unnamed_8>
    800045f8:	08000593          	li	a1,128
    800045fc:	0001e097          	auipc	ra,0x1e
    80004600:	b2c080e7          	jalr	-1236(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80004604:	0000                	unimp
            console.buf[(console.edit_index - Wrapping(1)).0 % INPUT_BUF] != CTRL_LF {
    80004606:	650e                	ld	a0,192(sp)

0000000080004608 <.LBB3_77>:
    80004608:	00022617          	auipc	a2,0x22
    8000460c:	9a860613          	addi	a2,a2,-1624 # 80025fb0 <.L__unnamed_9>
    80004610:	08000593          	li	a1,128
    80004614:	0001e097          	auipc	ra,0x1e
    80004618:	b14080e7          	jalr	-1260(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel6driver7console12console_init17h6fb79c78956ee465E:

000000008000461e <_ZN6kernel6driver7console12console_init17h6fb79c78956ee465E>:

use core::sync::atomic::AtomicBool;
pub(crate) static PANICKED: AtomicBool = AtomicBool::new(false);

/// must be called only once in rmain.rs:rust_main
pub unsafe fn console_init() {
    8000461e:	1141                	addi	sp,sp,-16
    use crate::fs::DEVICE_LIST;
    use crate::arch::riscv::qemu::devices::CONSOLE;
    super::uart::uart_init();
    80004620:	e406                	sd	ra,8(sp)
    80004622:	00017097          	auipc	ra,0x17
    80004626:	c20080e7          	jalr	-992(ra) # 8001b242 <_ZN6kernel6driver4uart9uart_init17h01daa242cfe569c9E>
    8000462a:	a009                	j	8000462c <.LBB4_2>

000000008000462c <.LBB4_2>:
    DEVICE_LIST.table[CONSOLE].write = console_write as *const u8;
    8000462c:	00000517          	auipc	a0,0x0
    80004630:	b3050513          	addi	a0,a0,-1232 # 8000415c <_ZN6kernel6driver7console13console_write17h0e125bdbb626dc42E>

0000000080004634 <.LBB4_3>:
    80004634:	0005e597          	auipc	a1,0x5e
    80004638:	9cc58593          	addi	a1,a1,-1588 # 80062000 <_ZN6kernel2fs7devices11DEVICE_LIST17h17b7683da24e3570E>
    8000463c:	ed88                	sd	a0,24(a1)

000000008000463e <.LBB4_4>:
    DEVICE_LIST.table[CONSOLE].read = console_read as *const u8;
    8000463e:	00000517          	auipc	a0,0x0
    80004642:	87c50513          	addi	a0,a0,-1924 # 80003eba <_ZN6kernel6driver7console12console_read17hbad5452084e392ddE>
    80004646:	e988                	sd	a0,16(a1)
    80004648:	60a2                	ld	ra,8(sp)
    8000464a:	0141                	addi	sp,sp,16
    8000464c:	8082                	ret

Disassembly of section .text._ZN4core4sync6atomic10AtomicBool3new17hb0054f5394c676a1E:

000000008000464e <_ZN4core4sync6atomic10AtomicBool3new17hb0054f5394c676a1E>:
    /// let atomic_false = AtomicBool::new(false);
    /// ```
    #[inline]
    #[stable(feature = "rust1", since = "1.0.0")]
    #[rustc_const_stable(feature = "const_atomic_new", since = "1.24.0")]
    pub const fn new(v: bool) -> AtomicBool {
    8000464e:	1101                	addi	sp,sp,-32
    80004650:	ec06                	sd	ra,24(sp)
    80004652:	00a10ba3          	sb	a0,23(sp)
        AtomicBool { v: UnsafeCell::new(v as u8) }
    80004656:	0001e097          	auipc	ra,0x1e
    8000465a:	85e080e7          	jalr	-1954(ra) # 80021eb4 <_ZN4core4cell19UnsafeCell$LT$T$GT$3new17h3aa2f2534c029263E>
    8000465e:	e42a                	sd	a0,8(sp)
    80004660:	a009                	j	80004662 <_ZN4core4sync6atomic10AtomicBool3new17hb0054f5394c676a1E+0x14>
    80004662:	6522                	ld	a0,8(sp)
    80004664:	00a10823          	sb	a0,16(sp)
    }
    80004668:	60e2                	ld	ra,24(sp)
    8000466a:	6105                	addi	sp,sp,32
    8000466c:	8082                	ret

Disassembly of section .text._ZN4core4sync6atomic10AtomicBool4load17h49a663f50dd66935E:

000000008000466e <_ZN4core4sync6atomic10AtomicBool4load17h49a663f50dd66935E>:
    ///
    /// assert_eq!(some_bool.load(Ordering::Relaxed), true);
    /// ```
    #[inline]
    #[stable(feature = "rust1", since = "1.0.0")]
    pub fn load(&self, order: Ordering) -> bool {
    8000466e:	7179                	addi	sp,sp,-48
    80004670:	f406                	sd	ra,40(sp)
    80004672:	862e                	mv	a2,a1
    80004674:	e432                	sd	a2,8(sp)
    80004676:	ec2a                	sd	a0,24(sp)
    80004678:	02b103a3          	sb	a1,39(sp)
        // SAFETY: any data races are prevented by atomic intrinsics and the raw
        // pointer passed in is valid because we got it from a reference.
        unsafe { atomic_load(self.v.get(), order) != 0 }
    8000467c:	0001e097          	auipc	ra,0x1e
    80004680:	830080e7          	jalr	-2000(ra) # 80021eac <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h34ebeaa57b5c7248E>
    80004684:	e82a                	sd	a0,16(sp)
    80004686:	a009                	j	80004688 <_ZN4core4sync6atomic10AtomicBool4load17h49a663f50dd66935E+0x1a>
    80004688:	65a2                	ld	a1,8(sp)
    8000468a:	6542                	ld	a0,16(sp)
    8000468c:	0001d097          	auipc	ra,0x1d
    80004690:	760080e7          	jalr	1888(ra) # 80021dec <_ZN4core4sync6atomic11atomic_load17h7c28be5fa6ab6ea0E>
    80004694:	e02a                	sd	a0,0(sp)
    80004696:	a009                	j	80004698 <_ZN4core4sync6atomic10AtomicBool4load17h49a663f50dd66935E+0x2a>
    80004698:	6502                	ld	a0,0(sp)
    8000469a:	0ff57513          	andi	a0,a0,255
    8000469e:	00a03533          	snez	a0,a0
    }
    800046a2:	70a2                	ld	ra,40(sp)
    800046a4:	6145                	addi	sp,sp,48
    800046a6:	8082                	ret

Disassembly of section .text._ZN4core4sync6atomic10AtomicBool4swap17h269e9e7e986b9c97E:

00000000800046a8 <_ZN4core4sync6atomic10AtomicBool4swap17h269e9e7e986b9c97E>:
    /// assert_eq!(some_bool.load(Ordering::Relaxed), false);
    /// ```
    #[inline]
    #[stable(feature = "rust1", since = "1.0.0")]
    #[cfg(target_has_atomic = "8")]
    pub fn swap(&self, val: bool, order: Ordering) -> bool {
    800046a8:	7139                	addi	sp,sp,-64
    800046aa:	fc06                	sd	ra,56(sp)
    800046ac:	86b2                	mv	a3,a2
    800046ae:	e836                	sd	a3,16(sp)
    800046b0:	86ae                	mv	a3,a1
    800046b2:	ec36                	sd	a3,24(sp)
    800046b4:	f42a                	sd	a0,40(sp)
    800046b6:	02b10b23          	sb	a1,54(sp)
    800046ba:	02c10ba3          	sb	a2,55(sp)
        // SAFETY: data races are prevented by atomic intrinsics.
        unsafe { atomic_swap(self.v.get(), val as u8, order) != 0 }
    800046be:	0001d097          	auipc	ra,0x1d
    800046c2:	7ee080e7          	jalr	2030(ra) # 80021eac <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h34ebeaa57b5c7248E>
    800046c6:	f02a                	sd	a0,32(sp)
    800046c8:	a009                	j	800046ca <_ZN4core4sync6atomic10AtomicBool4swap17h269e9e7e986b9c97E+0x22>
    800046ca:	6642                	ld	a2,16(sp)
    800046cc:	65e2                	ld	a1,24(sp)
    800046ce:	7502                	ld	a0,32(sp)
    800046d0:	0000b097          	auipc	ra,0xb
    800046d4:	70a080e7          	jalr	1802(ra) # 8000fdda <_ZN4core4sync6atomic11atomic_swap17hdd22e709589114eaE>
    800046d8:	e42a                	sd	a0,8(sp)
    800046da:	a009                	j	800046dc <_ZN4core4sync6atomic10AtomicBool4swap17h269e9e7e986b9c97E+0x34>
    800046dc:	6522                	ld	a0,8(sp)
    800046de:	0ff57513          	andi	a0,a0,255
    800046e2:	00a03533          	snez	a0,a0
    }
    800046e6:	70e2                	ld	ra,56(sp)
    800046e8:	6121                	addi	sp,sp,64
    800046ea:	8082                	ret

Disassembly of section .text._ZN4core4sync6atomic10AtomicBool5store17h325e21ca90edd7e7E:

00000000800046ec <_ZN4core4sync6atomic10AtomicBool5store17h325e21ca90edd7e7E>:
    pub fn store(&self, val: bool, order: Ordering) {
    800046ec:	7179                	addi	sp,sp,-48
    800046ee:	f406                	sd	ra,40(sp)
    800046f0:	86b2                	mv	a3,a2
    800046f2:	e036                	sd	a3,0(sp)
    800046f4:	86ae                	mv	a3,a1
    800046f6:	e436                	sd	a3,8(sp)
    800046f8:	ec2a                	sd	a0,24(sp)
    800046fa:	02b10323          	sb	a1,38(sp)
    800046fe:	02c103a3          	sb	a2,39(sp)
            atomic_store(self.v.get(), val as u8, order);
    80004702:	0001d097          	auipc	ra,0x1d
    80004706:	7aa080e7          	jalr	1962(ra) # 80021eac <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h34ebeaa57b5c7248E>
    8000470a:	e82a                	sd	a0,16(sp)
    8000470c:	a009                	j	8000470e <_ZN4core4sync6atomic10AtomicBool5store17h325e21ca90edd7e7E+0x22>
    8000470e:	6602                	ld	a2,0(sp)
    80004710:	65a2                	ld	a1,8(sp)
    80004712:	6542                	ld	a0,16(sp)
    80004714:	0000c097          	auipc	ra,0xc
    80004718:	812080e7          	jalr	-2030(ra) # 8000ff26 <_ZN4core4sync6atomic12atomic_store17h031d76ab229dd222E>
    8000471c:	a009                	j	8000471e <_ZN4core4sync6atomic10AtomicBool5store17h325e21ca90edd7e7E+0x32>
    }
    8000471e:	70a2                	ld	ra,40(sp)
    80004720:	6145                	addi	sp,sp,48
    80004722:	8082                	ret

Disassembly of section .text._ZN4core4sync6atomic11AtomicUsize3new17hb5d2654a6be55e11E:

0000000080004724 <_ZN4core4sync6atomic11AtomicUsize3new17hb5d2654a6be55e11E>:
            #[doc = concat!("let atomic_forty_two = ", stringify!($atomic_type), "::new(42);")]
            /// ```
            #[inline]
            #[$stable]
            #[$const_stable]
            pub const fn new(v: $int_type) -> Self {
    80004724:	1101                	addi	sp,sp,-32
    80004726:	ec06                	sd	ra,24(sp)
    80004728:	e82a                	sd	a0,16(sp)
                Self {v: UnsafeCell::new(v)}
    8000472a:	00001097          	auipc	ra,0x1
    8000472e:	b50080e7          	jalr	-1200(ra) # 8000527a <_ZN4core4cell19UnsafeCell$LT$T$GT$3new17h4d1d6404457ffa31E>
    80004732:	e02a                	sd	a0,0(sp)
    80004734:	a009                	j	80004736 <_ZN4core4sync6atomic11AtomicUsize3new17hb5d2654a6be55e11E+0x12>
    80004736:	6502                	ld	a0,0(sp)
    80004738:	e42a                	sd	a0,8(sp)
            }
    8000473a:	60e2                	ld	ra,24(sp)
    8000473c:	6105                	addi	sp,sp,32
    8000473e:	8082                	ret

Disassembly of section .text._ZN4core4sync6atomic11AtomicUsize9fetch_add17h9147f412b3f815f9E:

0000000080004740 <_ZN4core4sync6atomic11AtomicUsize9fetch_add17h9147f412b3f815f9E>:
            /// assert_eq!(foo.load(Ordering::SeqCst), 10);
            /// ```
            #[inline]
            #[$stable]
            #[$cfg_cas]
            pub fn fetch_add(&self, val: $int_type, order: Ordering) -> $int_type {
    80004740:	7139                	addi	sp,sp,-64
    80004742:	fc06                	sd	ra,56(sp)
    80004744:	e42e                	sd	a1,8(sp)
    80004746:	86b2                	mv	a3,a2
    80004748:	e836                	sd	a3,16(sp)
    8000474a:	f02a                	sd	a0,32(sp)
    8000474c:	f42e                	sd	a1,40(sp)
    8000474e:	02c10ba3          	sb	a2,55(sp)
                // SAFETY: data races are prevented by atomic intrinsics.
                unsafe { atomic_add(self.v.get(), val, order) }
    80004752:	0001d097          	auipc	ra,0x1d
    80004756:	7e0080e7          	jalr	2016(ra) # 80021f32 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17hcdc438fb74b7ecc8E>
    8000475a:	ec2a                	sd	a0,24(sp)
    8000475c:	a009                	j	8000475e <_ZN4core4sync6atomic11AtomicUsize9fetch_add17h9147f412b3f815f9E+0x1e>
    8000475e:	6642                	ld	a2,16(sp)
    80004760:	65a2                	ld	a1,8(sp)
    80004762:	6562                	ld	a0,24(sp)
    80004764:	0000b097          	auipc	ra,0xb
    80004768:	57a080e7          	jalr	1402(ra) # 8000fcde <_ZN4core4sync6atomic10atomic_add17hcefa99837e5e8934E>
    8000476c:	e02a                	sd	a0,0(sp)
    8000476e:	a009                	j	80004770 <_ZN4core4sync6atomic11AtomicUsize9fetch_add17h9147f412b3f815f9E+0x30>
            }
    80004770:	6502                	ld	a0,0(sp)
    80004772:	70e2                	ld	ra,56(sp)
    80004774:	6121                	addi	sp,sp,64
    80004776:	8082                	ret

Disassembly of section .text._ZN4core4sync6atomic11AtomicUsize9fetch_sub17h94fe355041184982E:

0000000080004778 <_ZN4core4sync6atomic11AtomicUsize9fetch_sub17h94fe355041184982E>:
            /// assert_eq!(foo.load(Ordering::SeqCst), 10);
            /// ```
            #[inline]
            #[$stable]
            #[$cfg_cas]
            pub fn fetch_sub(&self, val: $int_type, order: Ordering) -> $int_type {
    80004778:	7139                	addi	sp,sp,-64
    8000477a:	fc06                	sd	ra,56(sp)
    8000477c:	e42e                	sd	a1,8(sp)
    8000477e:	86b2                	mv	a3,a2
    80004780:	e836                	sd	a3,16(sp)
    80004782:	f02a                	sd	a0,32(sp)
    80004784:	f42e                	sd	a1,40(sp)
    80004786:	02c10ba3          	sb	a2,55(sp)
                // SAFETY: data races are prevented by atomic intrinsics.
                unsafe { atomic_sub(self.v.get(), val, order) }
    8000478a:	0001d097          	auipc	ra,0x1d
    8000478e:	7a8080e7          	jalr	1960(ra) # 80021f32 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17hcdc438fb74b7ecc8E>
    80004792:	ec2a                	sd	a0,24(sp)
    80004794:	a009                	j	80004796 <_ZN4core4sync6atomic11AtomicUsize9fetch_sub17h94fe355041184982E+0x1e>
    80004796:	6642                	ld	a2,16(sp)
    80004798:	65a2                	ld	a1,8(sp)
    8000479a:	6562                	ld	a0,24(sp)
    8000479c:	0000b097          	auipc	ra,0xb
    800047a0:	5b6080e7          	jalr	1462(ra) # 8000fd52 <_ZN4core4sync6atomic10atomic_sub17ha62074418a99a7bbE>
    800047a4:	e02a                	sd	a0,0(sp)
    800047a6:	a009                	j	800047a8 <_ZN4core4sync6atomic11AtomicUsize9fetch_sub17h94fe355041184982E+0x30>
            }
    800047a8:	6502                	ld	a0,0(sp)
    800047aa:	70e2                	ld	ra,56(sp)
    800047ac:	6121                	addi	sp,sp,64
    800047ae:	8082                	ret

Disassembly of section .text._ZN4core4sync6atomic5fence17hd2f91624c9f09ce8E:

00000000800047b0 <_ZN4core4sync6atomic5fence17hd2f91624c9f09ce8E>:
///     }
/// }
/// ```
#[inline]
#[stable(feature = "rust1", since = "1.0.0")]
pub fn fence(order: Ordering) {
    800047b0:	1101                	addi	sp,sp,-32
    800047b2:	00a10ba3          	sb	a0,23(sp)
    // SAFETY: using an atomic fence is safe.
    unsafe {
        match order {
            Acquire => intrinsics::atomic_fence_acq(),
    800047b6:	0ff57513          	andi	a0,a0,255
    800047ba:	e42a                	sd	a0,8(sp)
    800047bc:	6522                	ld	a0,8(sp)
    800047be:	050e                	slli	a0,a0,0x3

00000000800047c0 <.LBB7_9>:
    800047c0:	00022597          	auipc	a1,0x22
    800047c4:	80858593          	addi	a1,a1,-2040 # 80025fc8 <.LJTI7_0>
    800047c8:	952e                	add	a0,a0,a1
    800047ca:	6108                	ld	a0,0(a0)
    800047cc:	8502                	jr	a0

00000000800047ce <.LBB7_10>:
            Release => intrinsics::atomic_fence_rel(),
            AcqRel => intrinsics::atomic_fence_acqrel(),
            SeqCst => intrinsics::atomic_fence(),
            Relaxed => panic!("there is no such thing as a relaxed fence"),
    800047ce:	00022517          	auipc	a0,0x22
    800047d2:	82250513          	addi	a0,a0,-2014 # 80025ff0 <.L__unnamed_1>

00000000800047d6 <.LBB7_11>:
    800047d6:	00022617          	auipc	a2,0x22
    800047da:	8c260613          	addi	a2,a2,-1854 # 80026098 <.L__unnamed_2>
    800047de:	02900593          	li	a1,41
    800047e2:	0001e097          	auipc	ra,0x1e
    800047e6:	91a080e7          	jalr	-1766(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    800047ea:	0000                	unimp
	...

00000000800047ee <.LBB7_4>:
            Acquire => intrinsics::atomic_fence_acq(),
    800047ee:	0230000f          	fence	r,rw
    800047f2:	a811                	j	80004806 <.LBB7_7+0x6>

00000000800047f4 <.LBB7_5>:
            Release => intrinsics::atomic_fence_rel(),
    800047f4:	0310000f          	fence	rw,w
    800047f8:	a039                	j	80004806 <.LBB7_7+0x6>

00000000800047fa <.LBB7_6>:
            AcqRel => intrinsics::atomic_fence_acqrel(),
    800047fa:	8330000f          	fence.tso
    800047fe:	a021                	j	80004806 <.LBB7_7+0x6>

0000000080004800 <.LBB7_7>:
            SeqCst => intrinsics::atomic_fence(),
    80004800:	0330000f          	fence	rw,rw
    80004804:	a009                	j	80004806 <.LBB7_7+0x6>
        }
    }
}
    80004806:	6105                	addi	sp,sp,32
    80004808:	8082                	ret

Disassembly of section .text._ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h10470fd1e83789bbE:

000000008000480a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h10470fd1e83789bbE>:
    /// ```
    #[stable(feature = "pointer_methods", since = "1.26.0")]
    #[must_use = "returns a new pointer rather than modifying its argument"]
    #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
    #[inline]
    pub const fn wrapping_add(self, count: usize) -> Self
    8000480a:	1101                	addi	sp,sp,-32
    8000480c:	ec06                	sd	ra,24(sp)
    8000480e:	e42a                	sd	a0,8(sp)
    80004810:	e82e                	sd	a1,16(sp)
    where
        T: Sized,
    {
        self.wrapping_offset(count as isize)
    80004812:	00000097          	auipc	ra,0x0
    80004816:	014080e7          	jalr	20(ra) # 80004826 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17hf5c823f0de9373d9E>
    8000481a:	e02a                	sd	a0,0(sp)
    8000481c:	a009                	j	8000481e <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h10470fd1e83789bbE+0x14>
    }
    8000481e:	6502                	ld	a0,0(sp)
    80004820:	60e2                	ld	ra,24(sp)
    80004822:	6105                	addi	sp,sp,32
    80004824:	8082                	ret

Disassembly of section .text._ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17hf5c823f0de9373d9E:

0000000080004826 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17hf5c823f0de9373d9E>:
    pub const fn wrapping_offset(self, count: isize) -> *const T
    80004826:	1101                	addi	sp,sp,-32
    80004828:	e42a                	sd	a0,8(sp)
    8000482a:	e82e                	sd	a1,16(sp)
        unsafe { intrinsics::arith_offset(self, count) }
    8000482c:	952e                	add	a0,a0,a1
    8000482e:	e02a                	sd	a0,0(sp)
    80004830:	ec2a                	sd	a0,24(sp)
    80004832:	a009                	j	80004834 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17hf5c823f0de9373d9E+0xe>
    }
    80004834:	6502                	ld	a0,0(sp)
    80004836:	6105                	addi	sp,sp,32
    80004838:	8082                	ret

Disassembly of section .text._ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4cast17h03bc1f4ed09a4b3cE:

000000008000483a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4cast17h03bc1f4ed09a4b3cE>:
    pub const fn cast<U>(self) -> *const U {
    8000483a:	1141                	addi	sp,sp,-16
    8000483c:	e42a                	sd	a0,8(sp)
    }
    8000483e:	0141                	addi	sp,sp,16
    80004840:	8082                	ret

Disassembly of section .text._ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4cast17he44352a5ab45ee06E:

0000000080004842 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4cast17he44352a5ab45ee06E>:
    pub const fn cast<U>(self) -> *const U {
    80004842:	1141                	addi	sp,sp,-16
    80004844:	e42a                	sd	a0,8(sp)
    }
    80004846:	0141                	addi	sp,sp,16
    80004848:	8082                	ret

Disassembly of section .text._ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h936ab5e813f51efdE:

000000008000484a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h936ab5e813f51efdE>:
    pub const unsafe fn offset(self, count: isize) -> *const T
    8000484a:	1101                	addi	sp,sp,-32
    8000484c:	e42a                	sd	a0,8(sp)
    8000484e:	e82e                	sd	a1,16(sp)
        unsafe { intrinsics::offset(self, count) }
    80004850:	058a                	slli	a1,a1,0x2
    80004852:	952e                	add	a0,a0,a1
    80004854:	e02a                	sd	a0,0(sp)
    80004856:	ec2a                	sd	a0,24(sp)
    80004858:	a009                	j	8000485a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h936ab5e813f51efdE+0x10>
    }
    8000485a:	6502                	ld	a0,0(sp)
    8000485c:	6105                	addi	sp,sp,32
    8000485e:	8082                	ret

Disassembly of section .text._ZN6kernel6memory7address4Addr15is_page_aligned17h21d9aa1b7bd151ebE:

0000000080004860 <_ZN6kernel6memory7address4Addr15is_page_aligned17h21d9aa1b7bd151ebE>:
    fn data_ref(&self) -> &usize;

    fn data_mut(&mut self) -> &mut usize;

    #[inline]
    fn is_page_aligned(&self) -> bool{
    80004860:	1101                	addi	sp,sp,-32
    80004862:	ec06                	sd	ra,24(sp)
    80004864:	e82a                	sd	a0,16(sp)
        self.as_usize() % PGSIZE == 0
    80004866:	0000d097          	auipc	ra,0xd
    8000486a:	c8e080e7          	jalr	-882(ra) # 800114f4 <_ZN89_$LT$kernel..memory..address..VirtualAddress$u20$as$u20$kernel..memory..address..Addr$GT$8as_usize17h7916c21610008a66E>
    8000486e:	e42a                	sd	a0,8(sp)
    80004870:	a009                	j	80004872 <_ZN6kernel6memory7address4Addr15is_page_aligned17h21d9aa1b7bd151ebE+0x12>
    80004872:	6522                	ld	a0,8(sp)
    80004874:	6585                	lui	a1,0x1
    80004876:	35fd                	addiw	a1,a1,-1
    80004878:	8d6d                	and	a0,a0,a1
    8000487a:	00153513          	seqz	a0,a0
    }
    8000487e:	60e2                	ld	ra,24(sp)
    80004880:	6105                	addi	sp,sp,32
    80004882:	8082                	ret

Disassembly of section .text._ZN6kernel6memory7address4Addr10as_mut_ptr17hfa59607f4391fdb5E:

0000000080004884 <_ZN6kernel6memory7address4Addr10as_mut_ptr17hfa59607f4391fdb5E>:
    fn as_ptr(&self) -> *const u8{
        self.as_usize() as *const u8
    }

    #[inline]
    fn as_mut_ptr(&self) -> *mut u8{
    80004884:	1101                	addi	sp,sp,-32
    80004886:	ec06                	sd	ra,24(sp)
    80004888:	e82a                	sd	a0,16(sp)
        self.as_usize() as *mut u8
    8000488a:	0000d097          	auipc	ra,0xd
    8000488e:	c7c080e7          	jalr	-900(ra) # 80011506 <_ZN90_$LT$kernel..memory..address..PhysicalAddress$u20$as$u20$kernel..memory..address..Addr$GT$8as_usize17hea2eecdb80a1a2b2E>
    80004892:	e42a                	sd	a0,8(sp)
    80004894:	a009                	j	80004896 <_ZN6kernel6memory7address4Addr10as_mut_ptr17hfa59607f4391fdb5E+0x12>
    }
    80004896:	6522                	ld	a0,8(sp)
    80004898:	60e2                	ld	ra,24(sp)
    8000489a:	6105                	addi	sp,sp,32
    8000489c:	8082                	ret

Disassembly of section .text._ZN6kernel6memory7address4Addr11pg_round_up17h43579bab3405c977E:

000000008000489e <_ZN6kernel6memory7address4Addr11pg_round_up17h43579bab3405c977E>:

    #[inline]
    fn pg_round_up(&mut self) {
    8000489e:	7139                	addi	sp,sp,-64
    800048a0:	fc06                	sd	ra,56(sp)
    800048a2:	f02a                	sd	a0,32(sp)
    800048a4:	f82a                	sd	a0,48(sp)
        *self.data_mut() = (*self.data_mut() + PGSIZE - 1) & !(PGSIZE - 1)
    800048a6:	0000d097          	auipc	ra,0xd
    800048aa:	c58080e7          	jalr	-936(ra) # 800114fe <_ZN89_$LT$kernel..memory..address..VirtualAddress$u20$as$u20$kernel..memory..address..Addr$GT$8data_mut17h88794159bc97d31bE>
    800048ae:	f42a                	sd	a0,40(sp)
    800048b0:	a009                	j	800048b2 <_ZN6kernel6memory7address4Addr11pg_round_up17h43579bab3405c977E+0x14>
    800048b2:	7522                	ld	a0,40(sp)
    800048b4:	610c                	ld	a1,0(a0)
    800048b6:	6505                	lui	a0,0x1
    800048b8:	952e                	add	a0,a0,a1
    800048ba:	ec2a                	sd	a0,24(sp)
    800048bc:	02b56963          	bltu	a0,a1,800048ee <.LBB2_7>
    800048c0:	a009                	j	800048c2 <_ZN6kernel6memory7address4Addr11pg_round_up17h43579bab3405c977E+0x24>
    800048c2:	6562                	ld	a0,24(sp)
    800048c4:	fff50593          	addi	a1,a0,-1 # fff <.Lline_table_start0+0x30a>
    800048c8:	e82e                	sd	a1,16(sp)
    800048ca:	04b56063          	bltu	a0,a1,8000490a <.LBB2_9>
    800048ce:	a009                	j	800048d0 <_ZN6kernel6memory7address4Addr11pg_round_up17h43579bab3405c977E+0x32>
    800048d0:	7502                	ld	a0,32(sp)
    800048d2:	0000d097          	auipc	ra,0xd
    800048d6:	c2c080e7          	jalr	-980(ra) # 800114fe <_ZN89_$LT$kernel..memory..address..VirtualAddress$u20$as$u20$kernel..memory..address..Addr$GT$8data_mut17h88794159bc97d31bE>
    800048da:	e42a                	sd	a0,8(sp)
    800048dc:	a009                	j	800048de <_ZN6kernel6memory7address4Addr11pg_round_up17h43579bab3405c977E+0x40>
    800048de:	65a2                	ld	a1,8(sp)
    800048e0:	6542                	ld	a0,16(sp)
    800048e2:	767d                	lui	a2,0xfffff
    800048e4:	8d71                	and	a0,a0,a2
    800048e6:	e188                	sd	a0,0(a1)
    }
    800048e8:	70e2                	ld	ra,56(sp)
    800048ea:	6121                	addi	sp,sp,64
    800048ec:	8082                	ret

00000000800048ee <.LBB2_7>:
        *self.data_mut() = (*self.data_mut() + PGSIZE - 1) & !(PGSIZE - 1)
    800048ee:	00021517          	auipc	a0,0x21
    800048f2:	7f250513          	addi	a0,a0,2034 # 800260e0 <str.0>

00000000800048f6 <.LBB2_8>:
    800048f6:	00021617          	auipc	a2,0x21
    800048fa:	7d260613          	addi	a2,a2,2002 # 800260c8 <.L__unnamed_1>
    800048fe:	45f1                	li	a1,28
    80004900:	0001d097          	auipc	ra,0x1d
    80004904:	7fc080e7          	jalr	2044(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008000490a <.LBB2_9>:
    8000490a:	00022517          	auipc	a0,0x22
    8000490e:	81650513          	addi	a0,a0,-2026 # 80026120 <str.1>

0000000080004912 <.LBB2_10>:
    80004912:	00021617          	auipc	a2,0x21
    80004916:	7ee60613          	addi	a2,a2,2030 # 80026100 <.L__unnamed_2>
    8000491a:	02100593          	li	a1,33
    8000491e:	0001d097          	auipc	ra,0x1d
    80004922:	7de080e7          	jalr	2014(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel6memory7address4Addr11pg_round_up17h93ce0bf629830ebdE:

0000000080004928 <_ZN6kernel6memory7address4Addr11pg_round_up17h93ce0bf629830ebdE>:
    fn pg_round_up(&mut self) {
    80004928:	7139                	addi	sp,sp,-64
    8000492a:	fc06                	sd	ra,56(sp)
    8000492c:	f02a                	sd	a0,32(sp)
    8000492e:	f82a                	sd	a0,48(sp)
        *self.data_mut() = (*self.data_mut() + PGSIZE - 1) & !(PGSIZE - 1)
    80004930:	0000d097          	auipc	ra,0xd
    80004934:	be0080e7          	jalr	-1056(ra) # 80011510 <_ZN90_$LT$kernel..memory..address..PhysicalAddress$u20$as$u20$kernel..memory..address..Addr$GT$8data_mut17h98a368b1f7383ca3E>
    80004938:	f42a                	sd	a0,40(sp)
    8000493a:	a009                	j	8000493c <_ZN6kernel6memory7address4Addr11pg_round_up17h93ce0bf629830ebdE+0x14>
    8000493c:	7522                	ld	a0,40(sp)
    8000493e:	610c                	ld	a1,0(a0)
    80004940:	6505                	lui	a0,0x1
    80004942:	952e                	add	a0,a0,a1
    80004944:	ec2a                	sd	a0,24(sp)
    80004946:	02b56963          	bltu	a0,a1,80004978 <.LBB3_7>
    8000494a:	a009                	j	8000494c <_ZN6kernel6memory7address4Addr11pg_round_up17h93ce0bf629830ebdE+0x24>
    8000494c:	6562                	ld	a0,24(sp)
    8000494e:	fff50593          	addi	a1,a0,-1 # fff <.Lline_table_start0+0x30a>
    80004952:	e82e                	sd	a1,16(sp)
    80004954:	04b56063          	bltu	a0,a1,80004994 <.LBB3_9>
    80004958:	a009                	j	8000495a <_ZN6kernel6memory7address4Addr11pg_round_up17h93ce0bf629830ebdE+0x32>
    8000495a:	7502                	ld	a0,32(sp)
    8000495c:	0000d097          	auipc	ra,0xd
    80004960:	bb4080e7          	jalr	-1100(ra) # 80011510 <_ZN90_$LT$kernel..memory..address..PhysicalAddress$u20$as$u20$kernel..memory..address..Addr$GT$8data_mut17h98a368b1f7383ca3E>
    80004964:	e42a                	sd	a0,8(sp)
    80004966:	a009                	j	80004968 <_ZN6kernel6memory7address4Addr11pg_round_up17h93ce0bf629830ebdE+0x40>
    80004968:	65a2                	ld	a1,8(sp)
    8000496a:	6542                	ld	a0,16(sp)
    8000496c:	767d                	lui	a2,0xfffff
    8000496e:	8d71                	and	a0,a0,a2
    80004970:	e188                	sd	a0,0(a1)
    }
    80004972:	70e2                	ld	ra,56(sp)
    80004974:	6121                	addi	sp,sp,64
    80004976:	8082                	ret

0000000080004978 <.LBB3_7>:
        *self.data_mut() = (*self.data_mut() + PGSIZE - 1) & !(PGSIZE - 1)
    80004978:	00021517          	auipc	a0,0x21
    8000497c:	76850513          	addi	a0,a0,1896 # 800260e0 <str.0>

0000000080004980 <.LBB3_8>:
    80004980:	00021617          	auipc	a2,0x21
    80004984:	74860613          	addi	a2,a2,1864 # 800260c8 <.L__unnamed_1>
    80004988:	45f1                	li	a1,28
    8000498a:	0001d097          	auipc	ra,0x1d
    8000498e:	772080e7          	jalr	1906(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080004994 <.LBB3_9>:
    80004994:	00021517          	auipc	a0,0x21
    80004998:	78c50513          	addi	a0,a0,1932 # 80026120 <str.1>

000000008000499c <.LBB3_10>:
    8000499c:	00021617          	auipc	a2,0x21
    800049a0:	76460613          	addi	a2,a2,1892 # 80026100 <.L__unnamed_2>
    800049a4:	02100593          	li	a1,33
    800049a8:	0001d097          	auipc	ra,0x1d
    800049ac:	754080e7          	jalr	1876(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel6memory7address4Addr13pg_round_down17h7ab358be9f94b06bE:

00000000800049b2 <_ZN6kernel6memory7address4Addr13pg_round_down17h7ab358be9f94b06bE>:

    #[inline]
    fn pg_round_down(&mut self) {
    800049b2:	7179                	addi	sp,sp,-48
    800049b4:	f406                	sd	ra,40(sp)
    800049b6:	e82a                	sd	a0,16(sp)
    800049b8:	f02a                	sd	a0,32(sp)
        *self.data_mut() = *self.data_mut() & !(PGSIZE - 1)
    800049ba:	0000d097          	auipc	ra,0xd
    800049be:	b44080e7          	jalr	-1212(ra) # 800114fe <_ZN89_$LT$kernel..memory..address..VirtualAddress$u20$as$u20$kernel..memory..address..Addr$GT$8data_mut17h88794159bc97d31bE>
    800049c2:	ec2a                	sd	a0,24(sp)
    800049c4:	a009                	j	800049c6 <_ZN6kernel6memory7address4Addr13pg_round_down17h7ab358be9f94b06bE+0x14>
    800049c6:	6542                	ld	a0,16(sp)
    800049c8:	65e2                	ld	a1,24(sp)
    800049ca:	618c                	ld	a1,0(a1)
    800049cc:	e02e                	sd	a1,0(sp)
    800049ce:	0000d097          	auipc	ra,0xd
    800049d2:	b30080e7          	jalr	-1232(ra) # 800114fe <_ZN89_$LT$kernel..memory..address..VirtualAddress$u20$as$u20$kernel..memory..address..Addr$GT$8data_mut17h88794159bc97d31bE>
    800049d6:	e42a                	sd	a0,8(sp)
    800049d8:	a009                	j	800049da <_ZN6kernel6memory7address4Addr13pg_round_down17h7ab358be9f94b06bE+0x28>
    800049da:	65a2                	ld	a1,8(sp)
    800049dc:	6502                	ld	a0,0(sp)
    800049de:	767d                	lui	a2,0xfffff
    800049e0:	8d71                	and	a0,a0,a2
    800049e2:	e188                	sd	a0,0(a1)
    }
    800049e4:	70a2                	ld	ra,40(sp)
    800049e6:	6145                	addi	sp,sp,48
    800049e8:	8082                	ret

Disassembly of section .text._ZN6kernel6memory7address4Addr8add_page17h93c7d6ddd860f6baE:

00000000800049ea <_ZN6kernel6memory7address4Addr8add_page17h93c7d6ddd860f6baE>:

    #[inline]
    fn add_page(&mut self){
    800049ea:	1101                	addi	sp,sp,-32
    800049ec:	ec06                	sd	ra,24(sp)
    800049ee:	e82a                	sd	a0,16(sp)
        *self.data_mut() += PGSIZE;
    800049f0:	0000d097          	auipc	ra,0xd
    800049f4:	b20080e7          	jalr	-1248(ra) # 80011510 <_ZN90_$LT$kernel..memory..address..PhysicalAddress$u20$as$u20$kernel..memory..address..Addr$GT$8data_mut17h98a368b1f7383ca3E>
    800049f8:	e42a                	sd	a0,8(sp)
    800049fa:	a009                	j	800049fc <_ZN6kernel6memory7address4Addr8add_page17h93c7d6ddd860f6baE+0x12>
    800049fc:	6522                	ld	a0,8(sp)
    800049fe:	610c                	ld	a1,0(a0)
    80004a00:	6505                	lui	a0,0x1
    80004a02:	952e                	add	a0,a0,a1
    80004a04:	e02a                	sd	a0,0(sp)
    80004a06:	00b56963          	bltu	a0,a1,80004a18 <.LBB5_4>
    80004a0a:	a009                	j	80004a0c <_ZN6kernel6memory7address4Addr8add_page17h93c7d6ddd860f6baE+0x22>
    80004a0c:	6502                	ld	a0,0(sp)
    80004a0e:	65a2                	ld	a1,8(sp)
    80004a10:	e188                	sd	a0,0(a1)
    }
    80004a12:	60e2                	ld	ra,24(sp)
    80004a14:	6105                	addi	sp,sp,32
    80004a16:	8082                	ret

0000000080004a18 <.LBB5_4>:
        *self.data_mut() += PGSIZE;
    80004a18:	00021517          	auipc	a0,0x21
    80004a1c:	6c850513          	addi	a0,a0,1736 # 800260e0 <str.0>

0000000080004a20 <.LBB5_5>:
    80004a20:	00021617          	auipc	a2,0x21
    80004a24:	72860613          	addi	a2,a2,1832 # 80026148 <.L__unnamed_3>
    80004a28:	45f1                	li	a1,28
    80004a2a:	0001d097          	auipc	ra,0x1d
    80004a2e:	6d2080e7          	jalr	1746(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel6memory7address4Addr8add_page17hda9f7615eed2e36aE:

0000000080004a34 <_ZN6kernel6memory7address4Addr8add_page17hda9f7615eed2e36aE>:
    fn add_page(&mut self){
    80004a34:	1101                	addi	sp,sp,-32
    80004a36:	ec06                	sd	ra,24(sp)
    80004a38:	e82a                	sd	a0,16(sp)
        *self.data_mut() += PGSIZE;
    80004a3a:	0000d097          	auipc	ra,0xd
    80004a3e:	ac4080e7          	jalr	-1340(ra) # 800114fe <_ZN89_$LT$kernel..memory..address..VirtualAddress$u20$as$u20$kernel..memory..address..Addr$GT$8data_mut17h88794159bc97d31bE>
    80004a42:	e42a                	sd	a0,8(sp)
    80004a44:	a009                	j	80004a46 <_ZN6kernel6memory7address4Addr8add_page17hda9f7615eed2e36aE+0x12>
    80004a46:	6522                	ld	a0,8(sp)
    80004a48:	610c                	ld	a1,0(a0)
    80004a4a:	6505                	lui	a0,0x1
    80004a4c:	952e                	add	a0,a0,a1
    80004a4e:	e02a                	sd	a0,0(sp)
    80004a50:	00b56963          	bltu	a0,a1,80004a62 <.LBB6_4>
    80004a54:	a009                	j	80004a56 <_ZN6kernel6memory7address4Addr8add_page17hda9f7615eed2e36aE+0x22>
    80004a56:	6502                	ld	a0,0(sp)
    80004a58:	65a2                	ld	a1,8(sp)
    80004a5a:	e188                	sd	a0,0(a1)
    }
    80004a5c:	60e2                	ld	ra,24(sp)
    80004a5e:	6105                	addi	sp,sp,32
    80004a60:	8082                	ret

0000000080004a62 <.LBB6_4>:
        *self.data_mut() += PGSIZE;
    80004a62:	00021517          	auipc	a0,0x21
    80004a66:	67e50513          	addi	a0,a0,1662 # 800260e0 <str.0>

0000000080004a6a <.LBB6_5>:
    80004a6a:	00021617          	auipc	a2,0x21
    80004a6e:	6de60613          	addi	a2,a2,1758 # 80026148 <.L__unnamed_3>
    80004a72:	45f1                	li	a1,28
    80004a74:	0001d097          	auipc	ra,0x1d
    80004a78:	688080e7          	jalr	1672(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN104_$LT$core..iter..adapters..copied..Copied$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h5c47b4a6235bae37E:

0000000080004a7e <_ZN104_$LT$core..iter..adapters..copied..Copied$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h5c47b4a6235bae37E>:
    I: Iterator<Item = &'a T>,
    T: Copy,
{
    type Item = T;

    fn next(&mut self) -> Option<T> {
    80004a7e:	7179                	addi	sp,sp,-48
    80004a80:	f406                	sd	ra,40(sp)
    80004a82:	f02a                	sd	a0,32(sp)
        self.it.next().copied()
    80004a84:	00006097          	auipc	ra,0x6
    80004a88:	618080e7          	jalr	1560(ra) # 8000b09c <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbe39990052f1389dE>
    80004a8c:	ec2a                	sd	a0,24(sp)
    80004a8e:	a009                	j	80004a90 <_ZN104_$LT$core..iter..adapters..copied..Copied$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h5c47b4a6235bae37E+0x12>
    80004a90:	6562                	ld	a0,24(sp)
    80004a92:	0000a097          	auipc	ra,0xa
    80004a96:	514080e7          	jalr	1300(ra) # 8000efa6 <_ZN4core6option19Option$LT$$RF$T$GT$6copied17h53fb63a9bdc6d466E>
    80004a9a:	e42a                	sd	a0,8(sp)
    80004a9c:	e82e                	sd	a1,16(sp)
    80004a9e:	a009                	j	80004aa0 <_ZN104_$LT$core..iter..adapters..copied..Copied$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h5c47b4a6235bae37E+0x22>
    }
    80004aa0:	65c2                	ld	a1,16(sp)
    80004aa2:	6522                	ld	a0,8(sp)
    80004aa4:	8905                	andi	a0,a0,1
    80004aa6:	70a2                	ld	ra,40(sp)
    80004aa8:	6145                	addi	sp,sp,48
    80004aaa:	8082                	ret

Disassembly of section .text._ZN4core4iter8adapters6copied15Copied$LT$I$GT$3new17h07d9127b76ff3571E:

0000000080004aac <_ZN4core4iter8adapters6copied15Copied$LT$I$GT$3new17h07d9127b76ff3571E>:
    pub(in crate::iter) fn new(it: I) -> Copied<I> {
    80004aac:	1101                	addi	sp,sp,-32
    80004aae:	e82a                	sd	a0,16(sp)
    80004ab0:	ec2e                	sd	a1,24(sp)
        Copied { it }
    80004ab2:	e02a                	sd	a0,0(sp)
    80004ab4:	e42e                	sd	a1,8(sp)
    }
    80004ab6:	6105                	addi	sp,sp,32
    80004ab8:	8082                	ret

Disassembly of section .text._ZN4core5alloc6global11GlobalAlloc12alloc_zeroed17h5bb5edba03a2227bE:

0000000080004aba <_ZN4core5alloc6global11GlobalAlloc12alloc_zeroed17h5bb5edba03a2227bE>:
    /// allocation error are encouraged to call the [`handle_alloc_error`] function,
    /// rather than directly invoking `panic!` or similar.
    ///
    /// [`handle_alloc_error`]: ../../alloc/alloc/fn.handle_alloc_error.html
    #[stable(feature = "global_alloc", since = "1.28.0")]
    unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {
    80004aba:	715d                	addi	sp,sp,-80
    80004abc:	e486                	sd	ra,72(sp)
    80004abe:	e82a                	sd	a0,16(sp)
    80004ac0:	f02e                	sd	a1,32(sp)
    80004ac2:	f432                	sd	a2,40(sp)
    80004ac4:	f82a                	sd	a0,48(sp)
    80004ac6:	1008                	addi	a0,sp,32
        let size = layout.size();
    80004ac8:	0001a097          	auipc	ra,0x1a
    80004acc:	d4c080e7          	jalr	-692(ra) # 8001e814 <_ZN4core5alloc6layout6Layout4size17h7f60c0168860a2ffE>
    80004ad0:	85aa                	mv	a1,a0
    80004ad2:	ec2e                	sd	a1,24(sp)
    80004ad4:	fc2a                	sd	a0,56(sp)
    80004ad6:	a009                	j	80004ad8 <_ZN4core5alloc6global11GlobalAlloc12alloc_zeroed17h5bb5edba03a2227bE+0x1e>
        // SAFETY: the safety contract for `alloc` must be upheld by the caller.
        let ptr = unsafe { self.alloc(layout) };
    80004ad8:	6542                	ld	a0,16(sp)
    80004ada:	7582                	ld	a1,32(sp)
    80004adc:	7622                	ld	a2,40(sp)
    80004ade:	00008097          	auipc	ra,0x8
    80004ae2:	c78080e7          	jalr	-904(ra) # 8000c756 <_ZN87_$LT$kernel..memory..kalloc..KernelHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17h526e18d88530d166E>
    80004ae6:	85aa                	mv	a1,a0
    80004ae8:	e42e                	sd	a1,8(sp)
    80004aea:	e0aa                	sd	a0,64(sp)
    80004aec:	a009                	j	80004aee <_ZN4core5alloc6global11GlobalAlloc12alloc_zeroed17h5bb5edba03a2227bE+0x34>
        if !ptr.is_null() {
    80004aee:	6522                	ld	a0,8(sp)
    80004af0:	0001b097          	auipc	ra,0x1b
    80004af4:	b18080e7          	jalr	-1256(ra) # 8001f608 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hba478e65ea6353f9E>
    80004af8:	e02a                	sd	a0,0(sp)
    80004afa:	a009                	j	80004afc <_ZN4core5alloc6global11GlobalAlloc12alloc_zeroed17h5bb5edba03a2227bE+0x42>
    80004afc:	6502                	ld	a0,0(sp)
    80004afe:	e911                	bnez	a0,80004b12 <_ZN4core5alloc6global11GlobalAlloc12alloc_zeroed17h5bb5edba03a2227bE+0x58>
    80004b00:	a009                	j	80004b02 <_ZN4core5alloc6global11GlobalAlloc12alloc_zeroed17h5bb5edba03a2227bE+0x48>
            // SAFETY: as allocation succeeded, the region from `ptr`
            // of size `size` is guaranteed to be valid for writes.
            unsafe { ptr::write_bytes(ptr, 0, size) };
    80004b02:	6662                	ld	a2,24(sp)
    80004b04:	6522                	ld	a0,8(sp)
    80004b06:	4581                	li	a1,0
    80004b08:	0001d097          	auipc	ra,0x1d
    80004b0c:	eae080e7          	jalr	-338(ra) # 800219b6 <_ZN4core10intrinsics11write_bytes17hfabd30e5bfcb1b55E>
    80004b10:	a011                	j	80004b14 <_ZN4core5alloc6global11GlobalAlloc12alloc_zeroed17h5bb5edba03a2227bE+0x5a>
        if !ptr.is_null() {
    80004b12:	a011                	j	80004b16 <_ZN4core5alloc6global11GlobalAlloc12alloc_zeroed17h5bb5edba03a2227bE+0x5c>
    80004b14:	a009                	j	80004b16 <_ZN4core5alloc6global11GlobalAlloc12alloc_zeroed17h5bb5edba03a2227bE+0x5c>
        }
        ptr
    }
    80004b16:	6522                	ld	a0,8(sp)
    80004b18:	60a6                	ld	ra,72(sp)
    80004b1a:	6161                	addi	sp,sp,80
    80004b1c:	8082                	ret

Disassembly of section .text._ZN4core5alloc6global11GlobalAlloc7realloc17h24a579bea5cb79d9E:

0000000080004b1e <_ZN4core5alloc6global11GlobalAlloc7realloc17h24a579bea5cb79d9E>:
    /// reallocation error are encouraged to call the [`handle_alloc_error`] function,
    /// rather than directly invoking `panic!` or similar.
    ///
    /// [`handle_alloc_error`]: ../../alloc/alloc/fn.handle_alloc_error.html
    #[stable(feature = "global_alloc", since = "1.28.0")]
    unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
    80004b1e:	7135                	addi	sp,sp,-160
    80004b20:	ed06                	sd	ra,152(sp)
    80004b22:	fc3a                	sd	a4,56(sp)
    80004b24:	e0ae                	sd	a1,64(sp)
    80004b26:	e4aa                	sd	a0,72(sp)
    80004b28:	ecb2                	sd	a2,88(sp)
    80004b2a:	f0b6                	sd	a3,96(sp)
    80004b2c:	f4aa                	sd	a0,104(sp)
    80004b2e:	f8ae                	sd	a1,112(sp)
    80004b30:	fcba                	sd	a4,120(sp)
    80004b32:	08a8                	addi	a0,sp,88
        // SAFETY: the caller must ensure that the `new_size` does not overflow.
        // `layout.align()` comes from a `Layout` and is thus guaranteed to be valid.
        let new_layout = unsafe { Layout::from_size_align_unchecked(new_size, layout.align()) };
    80004b34:	0001a097          	auipc	ra,0x1a
    80004b38:	cea080e7          	jalr	-790(ra) # 8001e81e <_ZN4core5alloc6layout6Layout5align17h05712eb17caed6beE>
    80004b3c:	e8aa                	sd	a0,80(sp)
    80004b3e:	a009                	j	80004b40 <_ZN4core5alloc6global11GlobalAlloc7realloc17h24a579bea5cb79d9E+0x22>
    80004b40:	65c6                	ld	a1,80(sp)
    80004b42:	7562                	ld	a0,56(sp)
    80004b44:	0001a097          	auipc	ra,0x1a
    80004b48:	ca6080e7          	jalr	-858(ra) # 8001e7ea <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h7d187b5349095d20E>
    80004b4c:	862a                	mv	a2,a0
    80004b4e:	f432                	sd	a2,40(sp)
    80004b50:	862e                	mv	a2,a1
    80004b52:	f832                	sd	a2,48(sp)
    80004b54:	e12a                	sd	a0,128(sp)
    80004b56:	e52e                	sd	a1,136(sp)
    80004b58:	a009                	j	80004b5a <_ZN4core5alloc6global11GlobalAlloc7realloc17h24a579bea5cb79d9E+0x3c>
        // SAFETY: the caller must ensure that `new_layout` is greater than zero.
        let new_ptr = unsafe { self.alloc(new_layout) };
    80004b5a:	7642                	ld	a2,48(sp)
    80004b5c:	75a2                	ld	a1,40(sp)
    80004b5e:	6526                	ld	a0,72(sp)
    80004b60:	00008097          	auipc	ra,0x8
    80004b64:	bf6080e7          	jalr	-1034(ra) # 8000c756 <_ZN87_$LT$kernel..memory..kalloc..KernelHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17h526e18d88530d166E>
    80004b68:	85aa                	mv	a1,a0
    80004b6a:	f02e                	sd	a1,32(sp)
    80004b6c:	e92a                	sd	a0,144(sp)
    80004b6e:	a009                	j	80004b70 <_ZN4core5alloc6global11GlobalAlloc7realloc17h24a579bea5cb79d9E+0x52>
        if !new_ptr.is_null() {
    80004b70:	7502                	ld	a0,32(sp)
    80004b72:	0001b097          	auipc	ra,0x1b
    80004b76:	a96080e7          	jalr	-1386(ra) # 8001f608 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hba478e65ea6353f9E>
    80004b7a:	ec2a                	sd	a0,24(sp)
    80004b7c:	a009                	j	80004b7e <_ZN4core5alloc6global11GlobalAlloc7realloc17h24a579bea5cb79d9E+0x60>
    80004b7e:	6562                	ld	a0,24(sp)
    80004b80:	e909                	bnez	a0,80004b92 <_ZN4core5alloc6global11GlobalAlloc7realloc17h24a579bea5cb79d9E+0x74>
    80004b82:	a009                	j	80004b84 <_ZN4core5alloc6global11GlobalAlloc7realloc17h24a579bea5cb79d9E+0x66>
    80004b84:	08a8                	addi	a0,sp,88
            // SAFETY: the previously allocated block cannot overlap the newly allocated block.
            // The safety contract for `dealloc` must be upheld by the caller.
            unsafe {
                ptr::copy_nonoverlapping(ptr, new_ptr, cmp::min(layout.size(), new_size));
    80004b86:	0001a097          	auipc	ra,0x1a
    80004b8a:	c8e080e7          	jalr	-882(ra) # 8001e814 <_ZN4core5alloc6layout6Layout4size17h7f60c0168860a2ffE>
    80004b8e:	e82a                	sd	a0,16(sp)
    80004b90:	a011                	j	80004b94 <_ZN4core5alloc6global11GlobalAlloc7realloc17h24a579bea5cb79d9E+0x76>
        if !new_ptr.is_null() {
    80004b92:	a815                	j	80004bc6 <_ZN4core5alloc6global11GlobalAlloc7realloc17h24a579bea5cb79d9E+0xa8>
                ptr::copy_nonoverlapping(ptr, new_ptr, cmp::min(layout.size(), new_size));
    80004b94:	75e2                	ld	a1,56(sp)
    80004b96:	6542                	ld	a0,16(sp)
    80004b98:	00017097          	auipc	ra,0x17
    80004b9c:	7a0080e7          	jalr	1952(ra) # 8001c338 <_ZN4core3cmp3min17hbc9e632873ab1838E>
    80004ba0:	e42a                	sd	a0,8(sp)
    80004ba2:	a009                	j	80004ba4 <_ZN4core5alloc6global11GlobalAlloc7realloc17h24a579bea5cb79d9E+0x86>
    80004ba4:	6586                	ld	a1,64(sp)
    80004ba6:	6622                	ld	a2,8(sp)
    80004ba8:	7502                	ld	a0,32(sp)
    80004baa:	00020097          	auipc	ra,0x20
    80004bae:	490080e7          	jalr	1168(ra) # 8002503a <memcpy>
    80004bb2:	6586                	ld	a1,64(sp)
                self.dealloc(ptr, layout);
    80004bb4:	6526                	ld	a0,72(sp)
    80004bb6:	6666                	ld	a2,88(sp)
    80004bb8:	7686                	ld	a3,96(sp)
    80004bba:	00008097          	auipc	ra,0x8
    80004bbe:	bea080e7          	jalr	-1046(ra) # 8000c7a4 <_ZN87_$LT$kernel..memory..kalloc..KernelHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$7dealloc17hf9dbc9c2cc300335E>
    80004bc2:	a009                	j	80004bc4 <_ZN4core5alloc6global11GlobalAlloc7realloc17h24a579bea5cb79d9E+0xa6>
        if !new_ptr.is_null() {
    80004bc4:	a009                	j	80004bc6 <_ZN4core5alloc6global11GlobalAlloc7realloc17h24a579bea5cb79d9E+0xa8>
            }
        }
        new_ptr
    }
    80004bc6:	7502                	ld	a0,32(sp)
    80004bc8:	60ea                	ld	ra,152(sp)
    80004bca:	610d                	addi	sp,sp,160
    80004bcc:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register4sepc4read17hcaa3e2a818646c19E:

0000000080004bce <_ZN6kernel4arch5riscv8register4sepc4read17hcaa3e2a818646c19E>:
// machine exception program counter, holds the
// instruction address to which a return from
// exception will go.
#[inline]
pub unsafe fn read() -> usize {
    80004bce:	1141                	addi	sp,sp,-16
    let ret:usize;
    llvm_asm!("csrr $0, sepc":"=r"(ret):::"volatile");
    80004bd0:	14102573          	csrr	a0,sepc
    80004bd4:	e42a                	sd	a0,8(sp)
    ret
}
    80004bd6:	0141                	addi	sp,sp,16
    80004bd8:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register4sepc5write17h2074fd389defa9f2E:

0000000080004bda <_ZN6kernel4arch5riscv8register4sepc5write17h2074fd389defa9f2E>:

#[inline]
pub unsafe fn write(x:usize){
    80004bda:	1141                	addi	sp,sp,-16
    80004bdc:	e42a                	sd	a0,8(sp)
    llvm_asm!("csrw sepc, $0"::"r"(x)::"volatile");
    80004bde:	14151073          	csrw	sepc,a0
    80004be2:	0141                	addi	sp,sp,16
    80004be4:	8082                	ret

Disassembly of section .text._ZN6kernel2fs6bitmap19locate_inode_offset17h27b37f6ce6332c77E:

0000000080004be6 <_ZN6kernel2fs6bitmap19locate_inode_offset17h27b37f6ce6332c77E>:
// }

/// Given an inode number. 
/// Calculate the offset index of this inode inside the block. 
#[inline]
fn locate_inode_offset(inum: u32) -> usize {
    80004be6:	1141                	addi	sp,sp,-16
    80004be8:	c62a                	sw	a0,12(sp)
    inum as usize % IPB
    80004bea:	893d                	andi	a0,a0,15
}
    80004bec:	0141                	addi	sp,sp,16
    80004bee:	8082                	ret

Disassembly of section .text._ZN6kernel2fs6bitmap5bfree17h2d4cb92b39e2512aE:

0000000080004bf0 <_ZN6kernel2fs6bitmap5bfree17h2d4cb92b39e2512aE>:

/// Free a block in the disk by setting the relevant bit in bitmap to 0.
pub fn bfree(dev: u32, blockno: u32) {
    80004bf0:	7155                	addi	sp,sp,-208
    80004bf2:	e586                	sd	ra,200(sp)
    80004bf4:	862e                	mv	a2,a1
    80004bf6:	fc32                	sd	a2,56(sp)
    80004bf8:	862a                	mv	a2,a0
    80004bfa:	e0b2                	sd	a2,64(sp)
    80004bfc:	d12a                	sw	a0,160(sp)
    80004bfe:	d32e                	sw	a1,164(sp)

0000000080004c00 <.LBB1_12>:
    let bm_blockno = unsafe { SUPER_BLOCK.bitmap_blockno(blockno) };
    80004c00:	0005d517          	auipc	a0,0x5d
    80004c04:	4a050513          	addi	a0,a0,1184 # 800620a0 <_ZN6kernel2fs10superblock11SUPER_BLOCK17hc3889871ecbe2b54E>
    80004c08:	00003097          	auipc	ra,0x3
    80004c0c:	c56080e7          	jalr	-938(ra) # 8000785e <_ZN6kernel2fs10superblock10SuperBlock14bitmap_blockno17h010142deb773804aE>
    80004c10:	85aa                	mv	a1,a0
    80004c12:	e4ae                	sd	a1,72(sp)
    80004c14:	d52a                	sw	a0,168(sp)
    80004c16:	a009                	j	80004c18 <.LBB1_12+0x18>
    80004c18:	66a6                	ld	a3,72(sp)
    80004c1a:	6606                	ld	a2,64(sp)
    80004c1c:	7562                	ld	a0,56(sp)
    80004c1e:	6589                	lui	a1,0x2
    80004c20:	35fd                	addiw	a1,a1,-1
    let bm_offset = blockno % BPB;
    80004c22:	8de9                	and	a1,a1,a0
    80004c24:	d72e                	sw	a1,172(sp)
    let index = (bm_offset / 8) as isize;
    80004c26:	00355593          	srli	a1,a0,0x3
    80004c2a:	3ff5f593          	andi	a1,a1,1023
    80004c2e:	f42e                	sd	a1,40(sp)
    80004c30:	f92e                	sd	a1,176(sp)
    let bit = (bm_offset % 8) as usize;
    80004c32:	891d                	andi	a0,a0,7
    80004c34:	f82a                	sd	a0,48(sp)
    80004c36:	fd2a                	sd	a0,184(sp)

0000000080004c38 <.LBB1_13>:
    let mut buf = BCACHE.bread(dev, bm_blockno);
    80004c38:	0002a597          	auipc	a1,0x2a
    80004c3c:	3c858593          	addi	a1,a1,968 # 8002f000 <_ZN6kernel2fs3bio6BCACHE17h4811aac4f8d79dc4E>
    80004c40:	0888                	addi	a0,sp,80
    80004c42:	fffff097          	auipc	ra,0xfffff
    80004c46:	9ba080e7          	jalr	-1606(ra) # 800035fc <_ZN6kernel2fs3bio6Bcache5bread17h6ef915e4e896646bE>
    80004c4a:	a009                	j	80004c4c <.LBB1_13+0x14>
    80004c4c:	0888                	addi	a0,sp,80
    
    let byte = unsafe { (buf.raw_data_mut() as *mut u8).offset(index).as_mut().unwrap() };
    80004c4e:	fffff097          	auipc	ra,0xfffff
    80004c52:	b38080e7          	jalr	-1224(ra) # 80003786 <_ZN6kernel2fs3bio3Buf12raw_data_mut17hbae73c10d57c515dE>
    80004c56:	f02a                	sd	a0,32(sp)
    80004c58:	a009                	j	80004c5a <.LBB1_13+0x22>
    80004c5a:	75a2                	ld	a1,40(sp)
    80004c5c:	7502                	ld	a0,32(sp)
    80004c5e:	0001b097          	auipc	ra,0x1b
    80004c62:	996080e7          	jalr	-1642(ra) # 8001f5f4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb5f7a0f346747657E>
    80004c66:	ec2a                	sd	a0,24(sp)
    80004c68:	a009                	j	80004c6a <.LBB1_13+0x32>
    80004c6a:	6562                	ld	a0,24(sp)
    80004c6c:	0001b097          	auipc	ra,0x1b
    80004c70:	956080e7          	jalr	-1706(ra) # 8001f5c2 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17he7a20e0a0a2f5b66E>
    80004c74:	e82a                	sd	a0,16(sp)
    80004c76:	a009                	j	80004c78 <.LBB1_13+0x40>
    80004c78:	6542                	ld	a0,16(sp)

0000000080004c7a <.LBB1_14>:
    80004c7a:	00021597          	auipc	a1,0x21
    80004c7e:	4e658593          	addi	a1,a1,1254 # 80026160 <.L__unnamed_1>
    80004c82:	0001d097          	auipc	ra,0x1d
    80004c86:	90a080e7          	jalr	-1782(ra) # 8002158c <_ZN4core6option15Option$LT$T$GT$6unwrap17h9c7c2e8ce1270a73E>
    80004c8a:	e42a                	sd	a0,8(sp)
    80004c8c:	a009                	j	80004c8e <.LBB1_14+0x14>
    80004c8e:	75c2                	ld	a1,48(sp)
    80004c90:	6522                	ld	a0,8(sp)
    80004c92:	e1aa                	sd	a0,192(sp)
    if !byte.get_bit(bit) {
    80004c94:	fffff097          	auipc	ra,0xfffff
    80004c98:	f2e080e7          	jalr	-210(ra) # 80003bc2 <_ZN42_$LT$u8$u20$as$u20$bit_field..BitField$GT$7get_bit17h5d59737ea892b952E>
    80004c9c:	e02a                	sd	a0,0(sp)
    80004c9e:	a009                	j	80004ca0 <.LBB1_14+0x26>
    80004ca0:	6502                	ld	a0,0(sp)
    80004ca2:	e105                	bnez	a0,80004cc2 <.LBB1_16+0x14>
    80004ca4:	a009                	j	80004ca6 <.LBB1_15>

0000000080004ca6 <.LBB1_15>:
        panic!("bitmap: double freeing a block");
    80004ca6:	00021517          	auipc	a0,0x21
    80004caa:	4d250513          	addi	a0,a0,1234 # 80026178 <.L__unnamed_2>

0000000080004cae <.LBB1_16>:
    80004cae:	00021617          	auipc	a2,0x21
    80004cb2:	4ea60613          	addi	a2,a2,1258 # 80026198 <.L__unnamed_3>
    80004cb6:	45f9                	li	a1,30
    80004cb8:	0001d097          	auipc	ra,0x1d
    80004cbc:	444080e7          	jalr	1092(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80004cc0:	0000                	unimp
    }
    byte.set_bit(bit, false);
    80004cc2:	75c2                	ld	a1,48(sp)
    80004cc4:	6522                	ld	a0,8(sp)
    80004cc6:	4601                	li	a2,0
    80004cc8:	fffff097          	auipc	ra,0xfffff
    80004ccc:	f78080e7          	jalr	-136(ra) # 80003c40 <_ZN42_$LT$u8$u20$as$u20$bit_field..BitField$GT$7set_bit17ha97cadf2a55a43d3E>
    80004cd0:	a009                	j	80004cd2 <.LBB1_16+0x24>
    LOG.write(buf);
    80004cd2:	7546                	ld	a0,112(sp)
    80004cd4:	ed2a                	sd	a0,152(sp)
    80004cd6:	7526                	ld	a0,104(sp)
    80004cd8:	e92a                	sd	a0,144(sp)
    80004cda:	7506                	ld	a0,96(sp)
    80004cdc:	e52a                	sd	a0,136(sp)
    80004cde:	6566                	ld	a0,88(sp)
    80004ce0:	e12a                	sd	a0,128(sp)
    80004ce2:	6546                	ld	a0,80(sp)
    80004ce4:	fcaa                	sd	a0,120(sp)

0000000080004ce6 <.LBB1_17>:
    80004ce6:	00055517          	auipc	a0,0x55
    80004cea:	98250513          	addi	a0,a0,-1662 # 80059668 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    80004cee:	18ac                	addi	a1,sp,120
    80004cf0:	00004097          	auipc	ra,0x4
    80004cf4:	0fe080e7          	jalr	254(ra) # 80008dee <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$5write17ha48e3edeecccac4fE>
    80004cf8:	a009                	j	80004cfa <.LBB1_17+0x14>
}
    80004cfa:	60ae                	ld	ra,200(sp)
    80004cfc:	6169                	addi	sp,sp,208
    80004cfe:	8082                	ret

Disassembly of section .text._ZN6kernel2fs6bitmap6balloc17hb1927bc98cc6e122E:

0000000080004d00 <_ZN6kernel2fs6bitmap6balloc17hb1927bc98cc6e122E>:


/// Allocate a zeroed disk block 
pub fn balloc(dev: u32) -> u32 {
    80004d00:	712d                	addi	sp,sp,-288
    80004d02:	ee06                	sd	ra,280(sp)
    80004d04:	85aa                	mv	a1,a0
    80004d06:	f0ae                	sd	a1,96(sp)
    80004d08:	ddaa                	sw	a0,248(sp)
    80004d0a:	4501                	li	a0,0
    let mut b = 0;
    80004d0c:	daaa                	sw	a0,116(sp)

0000000080004d0e <.LBB2_33>:
    let sb_size = unsafe{ SUPER_BLOCK.size() };
    80004d0e:	0005d517          	auipc	a0,0x5d
    80004d12:	39250513          	addi	a0,a0,914 # 800620a0 <_ZN6kernel2fs10superblock11SUPER_BLOCK17hc3889871ecbe2b54E>
    80004d16:	00003097          	auipc	ra,0x3
    80004d1a:	a28080e7          	jalr	-1496(ra) # 8000773e <_ZN6kernel2fs10superblock10SuperBlock4size17hb3cee79658d4a223E>
    80004d1e:	85aa                	mv	a1,a0
    80004d20:	f4ae                	sd	a1,104(sp)
    80004d22:	dfaa                	sw	a0,252(sp)
    80004d24:	a009                	j	80004d26 <.LBB2_33+0x18>
    while b < sb_size {
    80004d26:	75a6                	ld	a1,104(sp)
    80004d28:	5556                	lw	a0,116(sp)
    80004d2a:	2581                	sext.w	a1,a1
    80004d2c:	02b56263          	bltu	a0,a1,80004d50 <.LBB2_35+0x16>
    80004d30:	a009                	j	80004d32 <.LBB2_34>

0000000080004d32 <.LBB2_34>:
            }
        }
        drop(buf);
        b += BPB;
    }
    panic!("balloc: out of the block ranges.")
    80004d32:	00020517          	auipc	a0,0x20
    80004d36:	5c850513          	addi	a0,a0,1480 # 800252fa <.L__unnamed_11+0xde>

0000000080004d3a <.LBB2_35>:
    80004d3a:	00021617          	auipc	a2,0x21
    80004d3e:	55660613          	addi	a2,a2,1366 # 80026290 <.L__unnamed_5>
    80004d42:	02000593          	li	a1,32
    80004d46:	0001d097          	auipc	ra,0x1d
    80004d4a:	3b6080e7          	jalr	950(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80004d4e:	0000                	unimp
        let bm_blockno = unsafe{ SUPER_BLOCK.bitmap_blockno(b) };
    80004d50:	55d6                	lw	a1,116(sp)

0000000080004d52 <.LBB2_36>:
    80004d52:	0005d517          	auipc	a0,0x5d
    80004d56:	34e50513          	addi	a0,a0,846 # 800620a0 <_ZN6kernel2fs10superblock11SUPER_BLOCK17hc3889871ecbe2b54E>
    80004d5a:	00003097          	auipc	ra,0x3
    80004d5e:	b04080e7          	jalr	-1276(ra) # 8000785e <_ZN6kernel2fs10superblock10SuperBlock14bitmap_blockno17h010142deb773804aE>
    80004d62:	85aa                	mv	a1,a0
    80004d64:	ecae                	sd	a1,88(sp)
    80004d66:	10a12023          	sw	a0,256(sp)
    80004d6a:	a009                	j	80004d6c <.LBB2_36+0x1a>
        let mut buf = BCACHE.bread(dev, bm_blockno);
    80004d6c:	66e6                	ld	a3,88(sp)
    80004d6e:	7606                	ld	a2,96(sp)

0000000080004d70 <.LBB2_37>:
    80004d70:	0002a597          	auipc	a1,0x2a
    80004d74:	29058593          	addi	a1,a1,656 # 8002f000 <_ZN6kernel2fs3bio6BCACHE17h4811aac4f8d79dc4E>
    80004d78:	18a8                	addi	a0,sp,120
    80004d7a:	fffff097          	auipc	ra,0xfffff
    80004d7e:	882080e7          	jalr	-1918(ra) # 800035fc <_ZN6kernel2fs3bio6Bcache5bread17h6ef915e4e896646bE>
    80004d82:	a009                	j	80004d84 <.LBB2_37+0x14>
    80004d84:	4501                	li	a0,0
        let mut bi = 0;
    80004d86:	d12a                	sw	a0,160(sp)
        while bi < BPB && b + bi < sb_size {
    80004d88:	a009                	j	80004d8a <.LBB2_37+0x1a>
    80004d8a:	0a016503          	lwu	a0,160(sp)
    80004d8e:	8135                	srli	a0,a0,0xd
    80004d90:	4581                	li	a1,0
    80004d92:	00b50b63          	beq	a0,a1,80004da8 <.LBB2_37+0x38>
    80004d96:	a029                	j	80004da0 <.LBB2_37+0x30>
    80004d98:	4505                	li	a0,1
    80004d9a:	0aa103a3          	sb	a0,167(sp)
    80004d9e:	a00d                	j	80004dc0 <.LBB2_37+0x50>
    80004da0:	4501                	li	a0,0
    80004da2:	0aa103a3          	sb	a0,167(sp)
    80004da6:	a829                	j	80004dc0 <.LBB2_37+0x50>
    80004da8:	07416503          	lwu	a0,116(sp)
    80004dac:	0a016583          	lwu	a1,160(sp)
    80004db0:	95aa                	add	a1,a1,a0
    80004db2:	e8ae                	sd	a1,80(sp)
    80004db4:	02059513          	slli	a0,a1,0x20
    80004db8:	9101                	srli	a0,a0,0x20
    80004dba:	14b51863          	bne	a0,a1,80004f0a <.LBB2_40>
    80004dbe:	a031                	j	80004dca <.LBB2_37+0x5a>
    80004dc0:	0a714503          	lbu	a0,167(sp)
    80004dc4:	8905                	andi	a0,a0,1
    80004dc6:	e90d                	bnez	a0,80004df8 <.LBB2_37+0x88>
    80004dc8:	a801                	j	80004dd8 <.LBB2_37+0x68>
    80004dca:	6546                	ld	a0,80(sp)
    80004dcc:	75a6                	ld	a1,104(sp)
    80004dce:	2581                	sext.w	a1,a1
    80004dd0:	2501                	sext.w	a0,a0
    80004dd2:	fcb563e3          	bltu	a0,a1,80004d98 <.LBB2_37+0x28>
    80004dd6:	b7e9                	j	80004da0 <.LBB2_37+0x30>
        drop(buf);
    80004dd8:	656a                	ld	a0,152(sp)
    80004dda:	f9aa                	sd	a0,240(sp)
    80004ddc:	654a                	ld	a0,144(sp)
    80004dde:	f5aa                	sd	a0,232(sp)
    80004de0:	652a                	ld	a0,136(sp)
    80004de2:	f1aa                	sd	a0,224(sp)
    80004de4:	650a                	ld	a0,128(sp)
    80004de6:	edaa                	sd	a0,216(sp)
    80004de8:	7566                	ld	a0,120(sp)
    80004dea:	e9aa                	sd	a0,208(sp)
    80004dec:	0988                	addi	a0,sp,208
    80004dee:	00018097          	auipc	ra,0x18
    80004df2:	19e080e7          	jalr	414(ra) # 8001cf8c <_ZN4core3mem4drop17hda1e19029436deb9E>
    80004df6:	a8e5                	j	80004eee <.LBB2_39+0x34>
            bi += 1;
    80004df8:	0a016503          	lwu	a0,160(sp)
    80004dfc:	00150593          	addi	a1,a0,1
    80004e00:	e4ae                	sd	a1,72(sp)
    80004e02:	02059513          	slli	a0,a1,0x20
    80004e06:	9101                	srli	a0,a0,0x20
    80004e08:	10b51f63          	bne	a0,a1,80004f26 <.LBB2_42>
    80004e0c:	a009                	j	80004e0e <.LBB2_37+0x9e>
    80004e0e:	6526                	ld	a0,72(sp)
    80004e10:	d12a                	sw	a0,160(sp)
            let m = 1 << (bi % 8);
    80004e12:	00757593          	andi	a1,a0,7
    80004e16:	4505                	li	a0,1
    80004e18:	00b51533          	sll	a0,a0,a1
    80004e1c:	e0aa                	sd	a0,64(sp)
    80004e1e:	4501                	li	a0,0
    80004e20:	12051163          	bnez	a0,80004f42 <.LBB2_44>
    80004e24:	a009                	j	80004e26 <.LBB2_37+0xb6>
    80004e26:	6506                	ld	a0,64(sp)
    80004e28:	10a103a3          	sb	a0,263(sp)
    80004e2c:	18a8                	addi	a0,sp,120
            let buf_ptr = unsafe{ (buf.raw_data_mut() as *mut u8).offset((bi / 8) as isize).as_mut().unwrap() };
    80004e2e:	fffff097          	auipc	ra,0xfffff
    80004e32:	958080e7          	jalr	-1704(ra) # 80003786 <_ZN6kernel2fs3bio3Buf12raw_data_mut17hbae73c10d57c515dE>
    80004e36:	fc2a                	sd	a0,56(sp)
    80004e38:	a009                	j	80004e3a <.LBB2_37+0xca>
    80004e3a:	7562                	ld	a0,56(sp)
    80004e3c:	0a016583          	lwu	a1,160(sp)
    80004e40:	818d                	srli	a1,a1,0x3
    80004e42:	0001a097          	auipc	ra,0x1a
    80004e46:	7b2080e7          	jalr	1970(ra) # 8001f5f4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb5f7a0f346747657E>
    80004e4a:	f82a                	sd	a0,48(sp)
    80004e4c:	a009                	j	80004e4e <.LBB2_37+0xde>
    80004e4e:	7542                	ld	a0,48(sp)
    80004e50:	0001a097          	auipc	ra,0x1a
    80004e54:	772080e7          	jalr	1906(ra) # 8001f5c2 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17he7a20e0a0a2f5b66E>
    80004e58:	f42a                	sd	a0,40(sp)
    80004e5a:	a009                	j	80004e5c <.LBB2_37+0xec>
    80004e5c:	7522                	ld	a0,40(sp)

0000000080004e5e <.LBB2_38>:
    80004e5e:	00021597          	auipc	a1,0x21
    80004e62:	3ea58593          	addi	a1,a1,1002 # 80026248 <.L__unnamed_6>
    80004e66:	0001c097          	auipc	ra,0x1c
    80004e6a:	726080e7          	jalr	1830(ra) # 8002158c <_ZN4core6option15Option$LT$T$GT$6unwrap17h9c7c2e8ce1270a73E>
    80004e6e:	f02a                	sd	a0,32(sp)
    80004e70:	a009                	j	80004e72 <.LBB2_38+0x14>
    80004e72:	7502                	ld	a0,32(sp)
    80004e74:	e62a                	sd	a0,264(sp)
            let buf_val = unsafe{ ptr::read(buf_ptr) };
    80004e76:	00013097          	auipc	ra,0x13
    80004e7a:	610080e7          	jalr	1552(ra) # 80018486 <_ZN4core3ptr4read17h018161c0cd37b3fbE>
    80004e7e:	85aa                	mv	a1,a0
    80004e80:	ec2e                	sd	a1,24(sp)
    80004e82:	10a10ba3          	sb	a0,279(sp)
    80004e86:	a009                	j	80004e88 <.LBB2_38+0x2a>
            if buf_val == 0 { // Is block free?
    80004e88:	6562                	ld	a0,24(sp)
    80004e8a:	0ff57513          	andi	a0,a0,255
    80004e8e:	4581                	li	a1,0
    80004e90:	00b51a63          	bne	a0,a1,80004ea4 <.LBB2_38+0x46>
    80004e94:	a009                	j	80004e96 <.LBB2_38+0x38>
                unsafe{ ptr::write(buf_ptr, m) };
    80004e96:	6586                	ld	a1,64(sp)
    80004e98:	7502                	ld	a0,32(sp)
    80004e9a:	00014097          	auipc	ra,0x14
    80004e9e:	876080e7          	jalr	-1930(ra) # 80018710 <_ZN4core3ptr5write17h0fb1ba83ac2984c7E>
    80004ea2:	a011                	j	80004ea6 <.LBB2_38+0x48>
        while bi < BPB && b + bi < sb_size {
    80004ea4:	b5dd                	j	80004d8a <.LBB2_37+0x1a>
                LOG.write(buf);
    80004ea6:	656a                	ld	a0,152(sp)
    80004ea8:	e5aa                	sd	a0,200(sp)
    80004eaa:	654a                	ld	a0,144(sp)
    80004eac:	e1aa                	sd	a0,192(sp)
    80004eae:	652a                	ld	a0,136(sp)
    80004eb0:	fd2a                	sd	a0,184(sp)
    80004eb2:	650a                	ld	a0,128(sp)
    80004eb4:	f92a                	sd	a0,176(sp)
    80004eb6:	7566                	ld	a0,120(sp)
    80004eb8:	f52a                	sd	a0,168(sp)

0000000080004eba <.LBB2_39>:
    80004eba:	00054517          	auipc	a0,0x54
    80004ebe:	7ae50513          	addi	a0,a0,1966 # 80059668 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    80004ec2:	112c                	addi	a1,sp,168
    80004ec4:	00004097          	auipc	ra,0x4
    80004ec8:	f2a080e7          	jalr	-214(ra) # 80008dee <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$5write17ha48e3edeecccac4fE>
    80004ecc:	a009                	j	80004ece <.LBB2_39+0x14>
                return b + bi
    80004ece:	07416503          	lwu	a0,116(sp)
    80004ed2:	0a016583          	lwu	a1,160(sp)
    80004ed6:	95aa                	add	a1,a1,a0
    80004ed8:	e82e                	sd	a1,16(sp)
    80004eda:	02059513          	slli	a0,a1,0x20
    80004ede:	9101                	srli	a0,a0,0x20
    80004ee0:	08b51063          	bne	a0,a1,80004f60 <.LBB2_46>
    80004ee4:	a009                	j	80004ee6 <.LBB2_39+0x2c>
}
    80004ee6:	6542                	ld	a0,16(sp)
    80004ee8:	60f2                	ld	ra,280(sp)
    80004eea:	6115                	addi	sp,sp,288
    80004eec:	8082                	ret
        b += BPB;
    80004eee:	07416503          	lwu	a0,116(sp)
    80004ef2:	6589                	lui	a1,0x2
    80004ef4:	95aa                	add	a1,a1,a0
    80004ef6:	e42e                	sd	a1,8(sp)
    80004ef8:	02059513          	slli	a0,a1,0x20
    80004efc:	9101                	srli	a0,a0,0x20
    80004efe:	06b51f63          	bne	a0,a1,80004f7c <.LBB2_48>
    80004f02:	a009                	j	80004f04 <.LBB2_39+0x4a>
    80004f04:	6522                	ld	a0,8(sp)
    80004f06:	daaa                	sw	a0,116(sp)
    while b < sb_size {
    80004f08:	bd39                	j	80004d26 <.LBB2_33+0x18>

0000000080004f0a <.LBB2_40>:
        while bi < BPB && b + bi < sb_size {
    80004f0a:	00021517          	auipc	a0,0x21
    80004f0e:	2c650513          	addi	a0,a0,710 # 800261d0 <str.0>

0000000080004f12 <.LBB2_41>:
    80004f12:	00021617          	auipc	a2,0x21
    80004f16:	29e60613          	addi	a2,a2,670 # 800261b0 <.L__unnamed_7>
    80004f1a:	45f1                	li	a1,28
    80004f1c:	0001d097          	auipc	ra,0x1d
    80004f20:	1e0080e7          	jalr	480(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080004f26 <.LBB2_42>:
            bi += 1;
    80004f26:	00021517          	auipc	a0,0x21
    80004f2a:	2aa50513          	addi	a0,a0,682 # 800261d0 <str.0>

0000000080004f2e <.LBB2_43>:
    80004f2e:	00021617          	auipc	a2,0x21
    80004f32:	2c260613          	addi	a2,a2,706 # 800261f0 <.L__unnamed_8>
    80004f36:	45f1                	li	a1,28
    80004f38:	0001d097          	auipc	ra,0x1d
    80004f3c:	1c4080e7          	jalr	452(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080004f42 <.LBB2_44>:
            let m = 1 << (bi % 8);
    80004f42:	00021517          	auipc	a0,0x21
    80004f46:	2de50513          	addi	a0,a0,734 # 80026220 <str.1>

0000000080004f4a <.LBB2_45>:
    80004f4a:	00021617          	auipc	a2,0x21
    80004f4e:	2be60613          	addi	a2,a2,702 # 80026208 <.L__unnamed_9>
    80004f52:	02300593          	li	a1,35
    80004f56:	0001d097          	auipc	ra,0x1d
    80004f5a:	1a6080e7          	jalr	422(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080004f60 <.LBB2_46>:
                return b + bi
    80004f60:	00021517          	auipc	a0,0x21
    80004f64:	27050513          	addi	a0,a0,624 # 800261d0 <str.0>

0000000080004f68 <.LBB2_47>:
    80004f68:	00021617          	auipc	a2,0x21
    80004f6c:	2f860613          	addi	a2,a2,760 # 80026260 <.L__unnamed_10>
    80004f70:	45f1                	li	a1,28
    80004f72:	0001d097          	auipc	ra,0x1d
    80004f76:	18a080e7          	jalr	394(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080004f7c <.LBB2_48>:
        b += BPB;
    80004f7c:	00021517          	auipc	a0,0x21
    80004f80:	25450513          	addi	a0,a0,596 # 800261d0 <str.0>

0000000080004f84 <.LBB2_49>:
    80004f84:	00021617          	auipc	a2,0x21
    80004f88:	2f460613          	addi	a2,a2,756 # 80026278 <.L__unnamed_11>
    80004f8c:	45f1                	li	a1,28
    80004f8e:	0001d097          	auipc	ra,0x1d
    80004f92:	16e080e7          	jalr	366(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel2fs6bitmap11inode_alloc17h289cf49ddd9fbbd3E:

0000000080004f98 <_ZN6kernel2fs6bitmap11inode_alloc17h289cf49ddd9fbbd3E>:

pub fn inode_alloc(dev: u32, itype: InodeType) -> u32 {
    80004f98:	716d                	addi	sp,sp,-272
    80004f9a:	e606                	sd	ra,264(sp)
    80004f9c:	862e                	mv	a2,a1
    80004f9e:	e4b2                	sd	a2,72(sp)
    80004fa0:	862a                	mv	a2,a0
    80004fa2:	e8b2                	sd	a2,80(sp)
    80004fa4:	cbaa                	sw	a0,212(sp)
    80004fa6:	0cb11d23          	sh	a1,218(sp)

0000000080004faa <.LBB3_20>:
    let size = unsafe { SUPER_BLOCK.ninodes() };
    80004faa:	0005d517          	auipc	a0,0x5d
    80004fae:	0f650513          	addi	a0,a0,246 # 800620a0 <_ZN6kernel2fs10superblock11SUPER_BLOCK17hc3889871ecbe2b54E>
    80004fb2:	00002097          	auipc	ra,0x2
    80004fb6:	7ac080e7          	jalr	1964(ra) # 8000775e <_ZN6kernel2fs10superblock10SuperBlock7ninodes17h32fa650b3c4991daE>
    80004fba:	85aa                	mv	a1,a0
    80004fbc:	ecae                	sd	a1,88(sp)
    80004fbe:	cfaa                	sw	a0,220(sp)
    80004fc0:	a009                	j	80004fc2 <.LBB3_20+0x18>
    80004fc2:	65e6                	ld	a1,88(sp)
    80004fc4:	4505                	li	a0,1
    for inum in 1..size {
    80004fc6:	d0aa                	sw	a0,96(sp)
    80004fc8:	d2ae                	sw	a1,100(sp)
    80004fca:	00007097          	auipc	ra,0x7
    80004fce:	9d2080e7          	jalr	-1582(ra) # 8000b99c <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h2819071fbc006758E>
    80004fd2:	fc2a                	sd	a0,56(sp)
    80004fd4:	e0ae                	sd	a1,64(sp)
    80004fd6:	a009                	j	80004fd8 <.LBB3_20+0x2e>
    80004fd8:	6506                	ld	a0,64(sp)
    80004fda:	75e2                	ld	a1,56(sp)
    80004fdc:	d4ae                	sw	a1,104(sp)
    80004fde:	d6aa                	sw	a0,108(sp)
    80004fe0:	a009                	j	80004fe2 <.LBB3_20+0x38>
    80004fe2:	10a8                	addi	a0,sp,104
    80004fe4:	00007097          	auipc	ra,0x7
    80004fe8:	84a080e7          	jalr	-1974(ra) # 8000b82e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17he2f0092c6efc86cdE>
    80004fec:	d8aa                	sw	a0,112(sp)
    80004fee:	daae                	sw	a1,116(sp)
    80004ff0:	a009                	j	80004ff2 <.LBB3_20+0x48>
    80004ff2:	07016503          	lwu	a0,112(sp)
    80004ff6:	4581                	li	a1,0
    80004ff8:	00b50463          	beq	a0,a1,80005000 <.LBB3_21>
    80004ffc:	a009                	j	80004ffe <.LBB3_20+0x54>
    80004ffe:	a005                	j	8000501e <.LBB3_22+0x16>

0000000080005000 <.LBB3_21>:
            LOG.write(buf);
            return inum
        }
    }

    panic!("not enough inode to alloc");
    80005000:	00021517          	auipc	a0,0x21
    80005004:	2a850513          	addi	a0,a0,680 # 800262a8 <.L__unnamed_12>

0000000080005008 <.LBB3_22>:
    80005008:	00021617          	auipc	a2,0x21
    8000500c:	2c060613          	addi	a2,a2,704 # 800262c8 <.L__unnamed_13>
    80005010:	45e5                	li	a1,25
    80005012:	0001d097          	auipc	ra,0x1d
    80005016:	0ea080e7          	jalr	234(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8000501a:	0000                	unimp
    for inum in 1..size {
    8000501c:	0000                	unimp
    8000501e:	07416583          	lwu	a1,116(sp)
    80005022:	f42e                	sd	a1,40(sp)
    80005024:	d1ae                	sw	a1,224(sp)
    80005026:	d3ae                	sw	a1,228(sp)
    80005028:	d5ae                	sw	a1,232(sp)

000000008000502a <.LBB3_23>:
        let blockno = unsafe { SUPER_BLOCK.locate_inode(inum) };
    8000502a:	0005d517          	auipc	a0,0x5d
    8000502e:	07650513          	addi	a0,a0,118 # 800620a0 <_ZN6kernel2fs10superblock11SUPER_BLOCK17hc3889871ecbe2b54E>
    80005032:	00002097          	auipc	ra,0x2
    80005036:	748080e7          	jalr	1864(ra) # 8000777a <_ZN6kernel2fs10superblock10SuperBlock12locate_inode17hc2dbfb20b9411e7cE>
    8000503a:	85aa                	mv	a1,a0
    8000503c:	f82e                	sd	a1,48(sp)
    8000503e:	d7aa                	sw	a0,236(sp)
    80005040:	a009                	j	80005042 <.LBB3_23+0x18>
        let offset = locate_inode_offset(inum) as isize;
    80005042:	7522                	ld	a0,40(sp)
    80005044:	00000097          	auipc	ra,0x0
    80005048:	ba2080e7          	jalr	-1118(ra) # 80004be6 <_ZN6kernel2fs6bitmap19locate_inode_offset17h27b37f6ce6332c77E>
    8000504c:	f02a                	sd	a0,32(sp)
    8000504e:	a009                	j	80005050 <.LBB3_23+0x26>
    80005050:	76c2                	ld	a3,48(sp)
    80005052:	6646                	ld	a2,80(sp)
    80005054:	7502                	ld	a0,32(sp)
    80005056:	f9aa                	sd	a0,240(sp)

0000000080005058 <.LBB3_24>:
        let mut buf = BCACHE.bread(dev, blockno);
    80005058:	0002a597          	auipc	a1,0x2a
    8000505c:	fa858593          	addi	a1,a1,-88 # 8002f000 <_ZN6kernel2fs3bio6BCACHE17h4811aac4f8d79dc4E>
    80005060:	18a8                	addi	a0,sp,120
    80005062:	ffffe097          	auipc	ra,0xffffe
    80005066:	59a080e7          	jalr	1434(ra) # 800035fc <_ZN6kernel2fs3bio6Bcache5bread17h6ef915e4e896646bE>
    8000506a:	a009                	j	8000506c <.LBB3_24+0x14>
    8000506c:	18a8                	addi	a0,sp,120
        let dinode = unsafe { (buf.raw_data_mut() as *mut DiskInode).offset(offset) };
    8000506e:	ffffe097          	auipc	ra,0xffffe
    80005072:	718080e7          	jalr	1816(ra) # 80003786 <_ZN6kernel2fs3bio3Buf12raw_data_mut17hbae73c10d57c515dE>
    80005076:	ec2a                	sd	a0,24(sp)
    80005078:	a009                	j	8000507a <.LBB3_24+0x22>
    8000507a:	7582                	ld	a1,32(sp)
    8000507c:	6562                	ld	a0,24(sp)
    8000507e:	00013097          	auipc	ra,0x13
    80005082:	21c080e7          	jalr	540(ra) # 8001829a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hf7573a6302c08e61E>
    80005086:	85aa                	mv	a1,a0
    80005088:	e82e                	sd	a1,16(sp)
    8000508a:	fdaa                	sd	a0,248(sp)
    8000508c:	a009                	j	8000508e <.LBB3_24+0x36>
        let dinode = unsafe { &mut *dinode };
    8000508e:	65a6                	ld	a1,72(sp)
    80005090:	6542                	ld	a0,16(sp)
    80005092:	e22a                	sd	a0,256(sp)
        if dinode.try_alloc(itype).is_ok() {
    80005094:	00003097          	auipc	ra,0x3
    80005098:	1ea080e7          	jalr	490(ra) # 8000827e <_ZN6kernel2fs6dinode9DiskInode9try_alloc17h945d9012d7c3db98E>
    8000509c:	0aa103a3          	sb	a0,167(sp)
    800050a0:	a009                	j	800050a2 <.LBB3_24+0x4a>
    800050a2:	0a710513          	addi	a0,sp,167
    800050a6:	00008097          	auipc	ra,0x8
    800050aa:	b34080e7          	jalr	-1228(ra) # 8000cbda <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h2dc3ede719915417E>
    800050ae:	e42a                	sd	a0,8(sp)
    800050b0:	a009                	j	800050b2 <.LBB3_24+0x5a>
    800050b2:	6522                	ld	a0,8(sp)
    800050b4:	4581                	li	a1,0
    800050b6:	02b50763          	beq	a0,a1,800050e4 <.LBB3_25+0x14>
    800050ba:	a009                	j	800050bc <.LBB3_24+0x64>
            LOG.write(buf);
    800050bc:	656a                	ld	a0,152(sp)
    800050be:	e5aa                	sd	a0,200(sp)
    800050c0:	654a                	ld	a0,144(sp)
    800050c2:	e1aa                	sd	a0,192(sp)
    800050c4:	652a                	ld	a0,136(sp)
    800050c6:	fd2a                	sd	a0,184(sp)
    800050c8:	650a                	ld	a0,128(sp)
    800050ca:	f92a                	sd	a0,176(sp)
    800050cc:	7566                	ld	a0,120(sp)
    800050ce:	f52a                	sd	a0,168(sp)

00000000800050d0 <.LBB3_25>:
    800050d0:	00054517          	auipc	a0,0x54
    800050d4:	59850513          	addi	a0,a0,1432 # 80059668 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    800050d8:	112c                	addi	a1,sp,168
    800050da:	00004097          	auipc	ra,0x4
    800050de:	d14080e7          	jalr	-748(ra) # 80008dee <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$5write17ha48e3edeecccac4fE>
    800050e2:	a039                	j	800050f0 <.LBB3_25+0x20>
    800050e4:	18a8                	addi	a0,sp,120
    }
    800050e6:	00002097          	auipc	ra,0x2
    800050ea:	da0080e7          	jalr	-608(ra) # 80006e86 <_ZN4core3ptr41drop_in_place$LT$kernel..fs..bio..Buf$GT$17hc35967244f3e9eb6E>
    800050ee:	a029                	j	800050f8 <.LBB3_25+0x28>
    800050f0:	7522                	ld	a0,40(sp)
    800050f2:	60b2                	ld	ra,264(sp)
    800050f4:	6151                	addi	sp,sp,272
    800050f6:	8082                	ret
    for inum in 1..size {
    800050f8:	b5ed                	j	80004fe2 <.LBB3_20+0x38>

Disassembly of section .text._ZN4core4cell13Cell$LT$T$GT$3get17ha10dd437ebde1b39E:

00000000800050fa <_ZN4core4cell13Cell$LT$T$GT$3get17ha10dd437ebde1b39E>:
    ///
    /// let five = c.get();
    /// ```
    #[inline]
    #[stable(feature = "rust1", since = "1.0.0")]
    pub fn get(&self) -> T {
    800050fa:	1101                	addi	sp,sp,-32
    800050fc:	ec06                	sd	ra,24(sp)
    800050fe:	e82a                	sd	a0,16(sp)
        // SAFETY: This can cause data races if called from a separate thread,
        // but `Cell` is `!Sync` so this won't happen.
        unsafe { *self.value.get() }
    80005100:	00000097          	auipc	ra,0x0
    80005104:	15a080e7          	jalr	346(ra) # 8000525a <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h9354550c008f8577E>
    80005108:	e42a                	sd	a0,8(sp)
    8000510a:	a009                	j	8000510c <_ZN4core4cell13Cell$LT$T$GT$3get17ha10dd437ebde1b39E+0x12>
    8000510c:	6522                	ld	a0,8(sp)
    8000510e:	00054503          	lbu	a0,0(a0)
    }
    80005112:	60e2                	ld	ra,24(sp)
    80005114:	6105                	addi	sp,sp,32
    80005116:	8082                	ret

Disassembly of section .text._ZN4core4cell13Cell$LT$T$GT$3get17hc0e1a98a16df48afE:

0000000080005118 <_ZN4core4cell13Cell$LT$T$GT$3get17hc0e1a98a16df48afE>:
    pub fn get(&self) -> T {
    80005118:	1101                	addi	sp,sp,-32
    8000511a:	ec06                	sd	ra,24(sp)
    8000511c:	e82a                	sd	a0,16(sp)
        unsafe { *self.value.get() }
    8000511e:	00000097          	auipc	ra,0x0
    80005122:	124080e7          	jalr	292(ra) # 80005242 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h592018459564cd3bE>
    80005126:	e42a                	sd	a0,8(sp)
    80005128:	a009                	j	8000512a <_ZN4core4cell13Cell$LT$T$GT$3get17hc0e1a98a16df48afE+0x12>
    8000512a:	6522                	ld	a0,8(sp)
    8000512c:	6108                	ld	a0,0(a0)
    }
    8000512e:	60e2                	ld	ra,24(sp)
    80005130:	6105                	addi	sp,sp,32
    80005132:	8082                	ret

Disassembly of section .text._ZN4core4cell13Cell$LT$T$GT$3new17h92764083b52e393eE:

0000000080005134 <_ZN4core4cell13Cell$LT$T$GT$3new17h92764083b52e393eE>:
    pub const fn new(value: T) -> Cell<T> {
    80005134:	1101                	addi	sp,sp,-32
    80005136:	ec06                	sd	ra,24(sp)
    80005138:	e82a                	sd	a0,16(sp)
        Cell { value: UnsafeCell::new(value) }
    8000513a:	00000097          	auipc	ra,0x0
    8000513e:	150080e7          	jalr	336(ra) # 8000528a <_ZN4core4cell19UnsafeCell$LT$T$GT$3new17hc9ea09ea33e2099aE>
    80005142:	e02a                	sd	a0,0(sp)
    80005144:	a009                	j	80005146 <_ZN4core4cell13Cell$LT$T$GT$3new17h92764083b52e393eE+0x12>
    80005146:	6502                	ld	a0,0(sp)
    80005148:	e42a                	sd	a0,8(sp)
    }
    8000514a:	60e2                	ld	ra,24(sp)
    8000514c:	6105                	addi	sp,sp,32
    8000514e:	8082                	ret

Disassembly of section .text._ZN4core4cell13Cell$LT$T$GT$3set17h60fabb73b23781c0E:

0000000080005150 <_ZN4core4cell13Cell$LT$T$GT$3set17h60fabb73b23781c0E>:
    pub fn set(&self, val: T) {
    80005150:	1101                	addi	sp,sp,-32
    80005152:	ec06                	sd	ra,24(sp)
    80005154:	e42a                	sd	a0,8(sp)
    80005156:	00b10b23          	sb	a1,22(sp)
        let old = self.replace(val);
    8000515a:	00000097          	auipc	ra,0x0
    8000515e:	068080e7          	jalr	104(ra) # 800051c2 <_ZN4core4cell13Cell$LT$T$GT$7replace17h84abfc72a05bacf1E>
    80005162:	85aa                	mv	a1,a0
    80005164:	e02e                	sd	a1,0(sp)
    80005166:	00a10ba3          	sb	a0,23(sp)
    8000516a:	a009                	j	8000516c <_ZN4core4cell13Cell$LT$T$GT$3set17h60fabb73b23781c0E+0x1c>
        drop(old);
    8000516c:	6502                	ld	a0,0(sp)
    8000516e:	00018097          	auipc	ra,0x18
    80005172:	cd8080e7          	jalr	-808(ra) # 8001ce46 <_ZN4core3mem4drop17h0a31045cd6ca0c7bE>
    80005176:	a009                	j	80005178 <_ZN4core4cell13Cell$LT$T$GT$3set17h60fabb73b23781c0E+0x28>
    }
    80005178:	60e2                	ld	ra,24(sp)
    8000517a:	6105                	addi	sp,sp,32
    8000517c:	8082                	ret

Disassembly of section .text._ZN4core4cell13Cell$LT$T$GT$3set17hb9927bf4fdcefc87E:

000000008000517e <_ZN4core4cell13Cell$LT$T$GT$3set17hb9927bf4fdcefc87E>:
    pub fn set(&self, val: T) {
    8000517e:	7179                	addi	sp,sp,-48
    80005180:	f406                	sd	ra,40(sp)
    80005182:	e82a                	sd	a0,16(sp)
    80005184:	ec2e                	sd	a1,24(sp)
        let old = self.replace(val);
    80005186:	00000097          	auipc	ra,0x0
    8000518a:	06e080e7          	jalr	110(ra) # 800051f4 <_ZN4core4cell13Cell$LT$T$GT$7replace17ha9b4881d80b5e394E>
    8000518e:	85aa                	mv	a1,a0
    80005190:	e42e                	sd	a1,8(sp)
    80005192:	f02a                	sd	a0,32(sp)
    80005194:	a009                	j	80005196 <_ZN4core4cell13Cell$LT$T$GT$3set17hb9927bf4fdcefc87E+0x18>
        drop(old);
    80005196:	6522                	ld	a0,8(sp)
    80005198:	00018097          	auipc	ra,0x18
    8000519c:	db4080e7          	jalr	-588(ra) # 8001cf4c <_ZN4core3mem4drop17ha75bac042eb9b458E>
    800051a0:	a009                	j	800051a2 <_ZN4core4cell13Cell$LT$T$GT$3set17hb9927bf4fdcefc87E+0x24>
    }
    800051a2:	70a2                	ld	ra,40(sp)
    800051a4:	6145                	addi	sp,sp,48
    800051a6:	8082                	ret

Disassembly of section .text._ZN4core4cell13Cell$LT$T$GT$6as_ptr17h2323c3e07ac4531cE:

00000000800051a8 <_ZN4core4cell13Cell$LT$T$GT$6as_ptr17h2323c3e07ac4531cE>:
    /// let ptr = c.as_ptr();
    /// ```
    #[inline]
    #[stable(feature = "cell_as_ptr", since = "1.12.0")]
    #[rustc_const_stable(feature = "const_cell_as_ptr", since = "1.32.0")]
    pub const fn as_ptr(&self) -> *mut T {
    800051a8:	1101                	addi	sp,sp,-32
    800051aa:	ec06                	sd	ra,24(sp)
    800051ac:	e82a                	sd	a0,16(sp)
        self.value.get()
    800051ae:	00000097          	auipc	ra,0x0
    800051b2:	0ac080e7          	jalr	172(ra) # 8000525a <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h9354550c008f8577E>
    800051b6:	e42a                	sd	a0,8(sp)
    800051b8:	a009                	j	800051ba <_ZN4core4cell13Cell$LT$T$GT$6as_ptr17h2323c3e07ac4531cE+0x12>
    }
    800051ba:	6522                	ld	a0,8(sp)
    800051bc:	60e2                	ld	ra,24(sp)
    800051be:	6105                	addi	sp,sp,32
    800051c0:	8082                	ret

Disassembly of section .text._ZN4core4cell13Cell$LT$T$GT$7replace17h84abfc72a05bacf1E:

00000000800051c2 <_ZN4core4cell13Cell$LT$T$GT$7replace17h84abfc72a05bacf1E>:
    pub fn replace(&self, val: T) -> T {
    800051c2:	7179                	addi	sp,sp,-48
    800051c4:	f406                	sd	ra,40(sp)
    800051c6:	862e                	mv	a2,a1
    800051c8:	e432                	sd	a2,8(sp)
    800051ca:	ec2a                	sd	a0,24(sp)
    800051cc:	02b103a3          	sb	a1,39(sp)
        mem::replace(unsafe { &mut *self.value.get() }, val)
    800051d0:	00000097          	auipc	ra,0x0
    800051d4:	08a080e7          	jalr	138(ra) # 8000525a <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h9354550c008f8577E>
    800051d8:	e82a                	sd	a0,16(sp)
    800051da:	a009                	j	800051dc <_ZN4core4cell13Cell$LT$T$GT$7replace17h84abfc72a05bacf1E+0x1a>
    800051dc:	65a2                	ld	a1,8(sp)
    800051de:	6542                	ld	a0,16(sp)
    800051e0:	00018097          	auipc	ra,0x18
    800051e4:	ea2080e7          	jalr	-350(ra) # 8001d082 <_ZN4core3mem7replace17h1967adb5d4092576E>
    800051e8:	e02a                	sd	a0,0(sp)
    800051ea:	a009                	j	800051ec <_ZN4core4cell13Cell$LT$T$GT$7replace17h84abfc72a05bacf1E+0x2a>
    }
    800051ec:	6502                	ld	a0,0(sp)
    800051ee:	70a2                	ld	ra,40(sp)
    800051f0:	6145                	addi	sp,sp,48
    800051f2:	8082                	ret

Disassembly of section .text._ZN4core4cell13Cell$LT$T$GT$7replace17ha9b4881d80b5e394E:

00000000800051f4 <_ZN4core4cell13Cell$LT$T$GT$7replace17ha9b4881d80b5e394E>:
    pub fn replace(&self, val: T) -> T {
    800051f4:	7179                	addi	sp,sp,-48
    800051f6:	f406                	sd	ra,40(sp)
    800051f8:	e42e                	sd	a1,8(sp)
    800051fa:	ec2a                	sd	a0,24(sp)
    800051fc:	f02e                	sd	a1,32(sp)
        mem::replace(unsafe { &mut *self.value.get() }, val)
    800051fe:	00000097          	auipc	ra,0x0
    80005202:	044080e7          	jalr	68(ra) # 80005242 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h592018459564cd3bE>
    80005206:	e82a                	sd	a0,16(sp)
    80005208:	a009                	j	8000520a <_ZN4core4cell13Cell$LT$T$GT$7replace17ha9b4881d80b5e394E+0x16>
    8000520a:	65a2                	ld	a1,8(sp)
    8000520c:	6542                	ld	a0,16(sp)
    8000520e:	00018097          	auipc	ra,0x18
    80005212:	ee4080e7          	jalr	-284(ra) # 8001d0f2 <_ZN4core3mem7replace17ha3220c9fe59ec441E>
    80005216:	e02a                	sd	a0,0(sp)
    80005218:	a009                	j	8000521a <_ZN4core4cell13Cell$LT$T$GT$7replace17ha9b4881d80b5e394E+0x26>
    }
    8000521a:	6502                	ld	a0,0(sp)
    8000521c:	70a2                	ld	ra,40(sp)
    8000521e:	6145                	addi	sp,sp,48
    80005220:	8082                	ret

Disassembly of section .text._ZN4core4cell19UnsafeCell$LT$T$GT$3get17h05438521b5304ed4E:

0000000080005222 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h05438521b5304ed4E>:
    /// let five = uc.get();
    /// ```
    #[inline]
    #[stable(feature = "rust1", since = "1.0.0")]
    #[rustc_const_stable(feature = "const_unsafecell_get", since = "1.32.0")]
    pub const fn get(&self) -> *mut T {
    80005222:	1141                	addi	sp,sp,-16
    80005224:	e42a                	sd	a0,8(sp)
        // We can just cast the pointer from `UnsafeCell<T>` to `T` because of
        // #[repr(transparent)]. This exploits libstd's special status, there is
        // no guarantee for user code that this will work in future versions of the compiler!
        self as *const UnsafeCell<T> as *const T as *mut T
    }
    80005226:	0141                	addi	sp,sp,16
    80005228:	8082                	ret

Disassembly of section .text._ZN4core4cell19UnsafeCell$LT$T$GT$3get17h0c090ec98b6b5023E:

000000008000522a <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h0c090ec98b6b5023E>:
    pub const fn get(&self) -> *mut T {
    8000522a:	1141                	addi	sp,sp,-16
    8000522c:	e42a                	sd	a0,8(sp)
    }
    8000522e:	0141                	addi	sp,sp,16
    80005230:	8082                	ret

Disassembly of section .text._ZN4core4cell19UnsafeCell$LT$T$GT$3get17h222732a2deb54afaE:

0000000080005232 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h222732a2deb54afaE>:
    pub const fn get(&self) -> *mut T {
    80005232:	1141                	addi	sp,sp,-16
    80005234:	e42a                	sd	a0,8(sp)
    }
    80005236:	0141                	addi	sp,sp,16
    80005238:	8082                	ret

Disassembly of section .text._ZN4core4cell19UnsafeCell$LT$T$GT$3get17h4b85f27290bf8d3bE:

000000008000523a <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h4b85f27290bf8d3bE>:
    pub const fn get(&self) -> *mut T {
    8000523a:	1141                	addi	sp,sp,-16
    8000523c:	e42a                	sd	a0,8(sp)
    }
    8000523e:	0141                	addi	sp,sp,16
    80005240:	8082                	ret

Disassembly of section .text._ZN4core4cell19UnsafeCell$LT$T$GT$3get17h592018459564cd3bE:

0000000080005242 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h592018459564cd3bE>:
    pub const fn get(&self) -> *mut T {
    80005242:	1141                	addi	sp,sp,-16
    80005244:	e42a                	sd	a0,8(sp)
    }
    80005246:	0141                	addi	sp,sp,16
    80005248:	8082                	ret

Disassembly of section .text._ZN4core4cell19UnsafeCell$LT$T$GT$3get17h6b3041abf61d3f4fE:

000000008000524a <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h6b3041abf61d3f4fE>:
    pub const fn get(&self) -> *mut T {
    8000524a:	1141                	addi	sp,sp,-16
    8000524c:	e42a                	sd	a0,8(sp)
    }
    8000524e:	0141                	addi	sp,sp,16
    80005250:	8082                	ret

Disassembly of section .text._ZN4core4cell19UnsafeCell$LT$T$GT$3get17h85f42af92512c053E:

0000000080005252 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h85f42af92512c053E>:
    pub const fn get(&self) -> *mut T {
    80005252:	1141                	addi	sp,sp,-16
    80005254:	e42a                	sd	a0,8(sp)
    }
    80005256:	0141                	addi	sp,sp,16
    80005258:	8082                	ret

Disassembly of section .text._ZN4core4cell19UnsafeCell$LT$T$GT$3get17h9354550c008f8577E:

000000008000525a <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h9354550c008f8577E>:
    pub const fn get(&self) -> *mut T {
    8000525a:	1141                	addi	sp,sp,-16
    8000525c:	e42a                	sd	a0,8(sp)
    }
    8000525e:	0141                	addi	sp,sp,16
    80005260:	8082                	ret

Disassembly of section .text._ZN4core4cell19UnsafeCell$LT$T$GT$3get17hb24b2b56dfaab8d4E:

0000000080005262 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17hb24b2b56dfaab8d4E>:
    pub const fn get(&self) -> *mut T {
    80005262:	1141                	addi	sp,sp,-16
    80005264:	e42a                	sd	a0,8(sp)
    }
    80005266:	0141                	addi	sp,sp,16
    80005268:	8082                	ret

Disassembly of section .text._ZN4core4cell19UnsafeCell$LT$T$GT$3get17hbe9e1598ba1bbd42E:

000000008000526a <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17hbe9e1598ba1bbd42E>:
    pub const fn get(&self) -> *mut T {
    8000526a:	1141                	addi	sp,sp,-16
    8000526c:	e42a                	sd	a0,8(sp)
    }
    8000526e:	0141                	addi	sp,sp,16
    80005270:	8082                	ret

Disassembly of section .text._ZN4core4cell19UnsafeCell$LT$T$GT$3get17hf0694f5cd8271985E:

0000000080005272 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17hf0694f5cd8271985E>:
    pub const fn get(&self) -> *mut T {
    80005272:	1141                	addi	sp,sp,-16
    80005274:	e42a                	sd	a0,8(sp)
    }
    80005276:	0141                	addi	sp,sp,16
    80005278:	8082                	ret

Disassembly of section .text._ZN4core4cell19UnsafeCell$LT$T$GT$3new17h4d1d6404457ffa31E:

000000008000527a <_ZN4core4cell19UnsafeCell$LT$T$GT$3new17h4d1d6404457ffa31E>:
    pub const fn new(value: T) -> UnsafeCell<T> {
    8000527a:	1141                	addi	sp,sp,-16
    8000527c:	e42a                	sd	a0,8(sp)
        UnsafeCell { value }
    8000527e:	e02a                	sd	a0,0(sp)
    }
    80005280:	0141                	addi	sp,sp,16
    80005282:	8082                	ret

Disassembly of section .text._ZN4core4cell19UnsafeCell$LT$T$GT$3new17hc63dc9326193c257E:

0000000080005284 <_ZN4core4cell19UnsafeCell$LT$T$GT$3new17hc63dc9326193c257E>:
    pub const fn new(value: T) -> UnsafeCell<T> {
    80005284:	1141                	addi	sp,sp,-16
    }
    80005286:	0141                	addi	sp,sp,16
    80005288:	8082                	ret

Disassembly of section .text._ZN4core4cell19UnsafeCell$LT$T$GT$3new17hc9ea09ea33e2099aE:

000000008000528a <_ZN4core4cell19UnsafeCell$LT$T$GT$3new17hc9ea09ea33e2099aE>:
    pub const fn new(value: T) -> UnsafeCell<T> {
    8000528a:	1141                	addi	sp,sp,-16
    8000528c:	e42a                	sd	a0,8(sp)
        UnsafeCell { value }
    8000528e:	e02a                	sd	a0,0(sp)
    }
    80005290:	0141                	addi	sp,sp,16
    80005292:	8082                	ret

Disassembly of section .text._ZN6kernel2fs7devices6Device4read17h5487da2141591295E:

0000000080005294 <_ZN6kernel2fs7devices6Device4read17h5487da2141591295E>:
            read: 0 as *const u8,
            write: 0 as *const u8
        }
    }

    pub fn read(&self) -> ReadFn {
    80005294:	1101                	addi	sp,sp,-32
    80005296:	e42a                	sd	a0,8(sp)
        let func = unsafe {
            transmute::<*const u8, ReadFn>(self.read)
    80005298:	6108                	ld	a0,0(a0)
    8000529a:	e02a                	sd	a0,0(sp)
    8000529c:	e82a                	sd	a0,16(sp)
    8000529e:	ec2a                	sd	a0,24(sp)
    800052a0:	a009                	j	800052a2 <_ZN6kernel2fs7devices6Device4read17h5487da2141591295E+0xe>
        };
        func
    }
    800052a2:	6502                	ld	a0,0(sp)
    800052a4:	6105                	addi	sp,sp,32
    800052a6:	8082                	ret

Disassembly of section .text._ZN6kernel2fs7devices6Device5write17hdacd5bd8b779c8b1E:

00000000800052a8 <_ZN6kernel2fs7devices6Device5write17hdacd5bd8b779c8b1E>:

    pub fn write(&self) -> WriteFn {
    800052a8:	1101                	addi	sp,sp,-32
    800052aa:	e42a                	sd	a0,8(sp)
        let func = unsafe {
            transmute::<*const u8, WriteFn>(self.write)
    800052ac:	6508                	ld	a0,8(a0)
    800052ae:	e02a                	sd	a0,0(sp)
    800052b0:	e82a                	sd	a0,16(sp)
    800052b2:	ec2a                	sd	a0,24(sp)
    800052b4:	a009                	j	800052b6 <_ZN6kernel2fs7devices6Device5write17hdacd5bd8b779c8b1E+0xe>
        };
        func
    }
    800052b6:	6502                	ld	a0,0(sp)
    800052b8:	6105                	addi	sp,sp,32
    800052ba:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register5stval4read17h328c9da49d53d19fE:

00000000800052bc <_ZN6kernel4arch5riscv8register5stval4read17h328c9da49d53d19fE>:
// Supervisor Trap Value
#[inline]
pub unsafe fn read() -> usize {
    800052bc:	1141                	addi	sp,sp,-16
    let ret:usize;
    llvm_asm!("csrr $0, stval":"=r"(ret):::"volatile");
    800052be:	14302573          	csrr	a0,stval
    800052c2:	e42a                	sd	a0,8(sp)
    ret
}
    800052c4:	0141                	addi	sp,sp,16
    800052c6:	8082                	ret

Disassembly of section .text._ZN6kernel8shutdown12system_reset17h91571bbff266ab01E:

00000000800052c8 <_ZN6kernel8shutdown12system_reset17h91571bbff266ab01E>:

const TEST_FAIL:u32 = 0x3333;
const TEST_PASS:u32 = 0x5555;
const TEST_RESET:u32 = 0x7777;

pub fn system_reset(reset_type: usize, reset_reason: usize) {
    800052c8:	7179                	addi	sp,sp,-48
    800052ca:	f406                	sd	ra,40(sp)
    800052cc:	e02e                	sd	a1,0(sp)
    800052ce:	e42a                	sd	a0,8(sp)
    800052d0:	ec2a                	sd	a0,24(sp)
    800052d2:	f02e                	sd	a1,32(sp)
    800052d4:	4581                	li	a1,0
    // Fail = 0x3333,
    // Pass = 0x5555,
    // Reset = 0x7777,

    let mut value = match reset_type {
        RESET_TYPE_SHUTDOWN => TEST_PASS,
    800052d6:	02b50263          	beq	a0,a1,800052fa <_ZN6kernel8shutdown12system_reset17h91571bbff266ab01E+0x32>
    800052da:	a009                	j	800052dc <_ZN6kernel8shutdown12system_reset17h91571bbff266ab01E+0x14>
    800052dc:	6522                	ld	a0,8(sp)
    800052de:	4585                	li	a1,1
    800052e0:	02b50263          	beq	a0,a1,80005304 <_ZN6kernel8shutdown12system_reset17h91571bbff266ab01E+0x3c>
    800052e4:	a009                	j	800052e6 <_ZN6kernel8shutdown12system_reset17h91571bbff266ab01E+0x1e>
    800052e6:	6522                	ld	a0,8(sp)
    800052e8:	4589                	li	a1,2
    800052ea:	02b50263          	beq	a0,a1,8000530e <_ZN6kernel8shutdown12system_reset17h91571bbff266ab01E+0x46>
    800052ee:	a009                	j	800052f0 <_ZN6kernel8shutdown12system_reset17h91571bbff266ab01E+0x28>
    800052f0:	650d                	lui	a0,0x3
    800052f2:	3335051b          	addiw	a0,a0,819
        RESET_TYPE_COLD_REBOOT => TEST_RESET,
        RESET_TYPE_WARM_REBOOT => TEST_RESET,
        _ => TEST_FAIL,
    800052f6:	ca2a                	sw	a0,20(sp)
    let mut value = match reset_type {
    800052f8:	a005                	j	80005318 <_ZN6kernel8shutdown12system_reset17h91571bbff266ab01E+0x50>
    800052fa:	6515                	lui	a0,0x5
    800052fc:	5555051b          	addiw	a0,a0,1365
        RESET_TYPE_SHUTDOWN => TEST_PASS,
    80005300:	ca2a                	sw	a0,20(sp)
    let mut value = match reset_type {
    80005302:	a819                	j	80005318 <_ZN6kernel8shutdown12system_reset17h91571bbff266ab01E+0x50>
    80005304:	651d                	lui	a0,0x7
    80005306:	7775051b          	addiw	a0,a0,1911
        RESET_TYPE_COLD_REBOOT => TEST_RESET,
    8000530a:	ca2a                	sw	a0,20(sp)
    let mut value = match reset_type {
    8000530c:	a031                	j	80005318 <_ZN6kernel8shutdown12system_reset17h91571bbff266ab01E+0x50>
    8000530e:	651d                	lui	a0,0x7
    80005310:	7775051b          	addiw	a0,a0,1911
        RESET_TYPE_WARM_REBOOT => TEST_RESET,
    80005314:	ca2a                	sw	a0,20(sp)
    let mut value = match reset_type {
    80005316:	a009                	j	80005318 <_ZN6kernel8shutdown12system_reset17h91571bbff266ab01E+0x50>
    80005318:	6502                	ld	a0,0(sp)
    8000531a:	4585                	li	a1,1
    };

    if reset_reason == RESET_REASON_SYSTEM_FAILURE {
    8000531c:	00b51863          	bne	a0,a1,8000532c <_ZN6kernel8shutdown12system_reset17h91571bbff266ab01E+0x64>
    80005320:	a009                	j	80005322 <_ZN6kernel8shutdown12system_reset17h91571bbff266ab01E+0x5a>
    80005322:	650d                	lui	a0,0x3
    80005324:	3335051b          	addiw	a0,a0,819
        value = TEST_FAIL
    80005328:	ca2a                	sw	a0,20(sp)
    if reset_reason == RESET_REASON_SYSTEM_FAILURE {
    8000532a:	a011                	j	8000532e <_ZN6kernel8shutdown12system_reset17h91571bbff266ab01E+0x66>
    8000532c:	a009                	j	8000532e <_ZN6kernel8shutdown12system_reset17h91571bbff266ab01E+0x66>
    }

    unsafe {
        core::ptr::write_volatile(VIRT_TEST, value);
    8000532e:	45d2                	lw	a1,20(sp)
    80005330:	00100537          	lui	a0,0x100
    80005334:	00013097          	auipc	ra,0x13
    80005338:	0b0080e7          	jalr	176(ra) # 800183e4 <_ZN4core3ptr14write_volatile17h1c498a4c32cde7d4E>
    8000533c:	a009                	j	8000533e <.LBB0_12>

000000008000533e <.LBB0_12>:
    }

    unreachable!();
    8000533e:	00021517          	auipc	a0,0x21
    80005342:	fa250513          	addi	a0,a0,-94 # 800262e0 <.L__unnamed_1>

0000000080005346 <.LBB0_13>:
    80005346:	00021617          	auipc	a2,0x21
    8000534a:	fd260613          	addi	a2,a2,-46 # 80026318 <.L__unnamed_2>
    8000534e:	02800593          	li	a1,40
    80005352:	0001d097          	auipc	ra,0x1d
    80005356:	daa080e7          	jalr	-598(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel8shutdown8shutdown17hf11bb5dd05ff266dE:

000000008000535c <_ZN6kernel8shutdown8shutdown17hf11bb5dd05ff266dE>:
}

pub fn shutdown() {
    8000535c:	1141                	addi	sp,sp,-16
    8000535e:	e406                	sd	ra,8(sp)
    80005360:	4521                	li	a0,8
    80005362:	4681                	li	a3,0
    kernel_env_call(SHUTDOWN, 0, 0, 0);
    80005364:	85b6                	mv	a1,a3
    80005366:	8636                	mv	a2,a3
    80005368:	00010097          	auipc	ra,0x10
    8000536c:	dd8080e7          	jalr	-552(ra) # 80015140 <_ZN6kernel7syscall15kernel_env_call17h9e1a25b47e8ef67bE>
    80005370:	a009                	j	80005372 <_ZN6kernel8shutdown8shutdown17hf11bb5dd05ff266dE+0x16>
}
    80005372:	60a2                	ld	ra,8(sp)
    80005374:	0141                	addi	sp,sp,16
    80005376:	8082                	ret

Disassembly of section .text._ZN4core5slice3raw14from_raw_parts17h24ea7267a8aa7c05E:

0000000080005378 <_ZN4core5slice3raw14from_raw_parts17h24ea7267a8aa7c05E>:
///
/// [valid]: ptr#safety
/// [`NonNull::dangling()`]: ptr::NonNull::dangling
#[inline]
#[stable(feature = "rust1", since = "1.0.0")]
pub unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {
    80005378:	7179                	addi	sp,sp,-48
    8000537a:	f406                	sd	ra,40(sp)
    8000537c:	ec2a                	sd	a0,24(sp)
    8000537e:	f02e                	sd	a1,32(sp)
    debug_assert!(
        mem::size_of::<T>().saturating_mul(len) <= isize::MAX as usize,
        "attempt to create slice covering at least half the address space"
    );
    // SAFETY: the caller must uphold the safety contract for `from_raw_parts`.
    unsafe { &*ptr::slice_from_raw_parts(data, len) }
    80005380:	00013097          	auipc	ra,0x13
    80005384:	092080e7          	jalr	146(ra) # 80018412 <_ZN4core3ptr20slice_from_raw_parts17h19b34a977b1709d3E>
    80005388:	e42a                	sd	a0,8(sp)
    8000538a:	e82e                	sd	a1,16(sp)
    8000538c:	a009                	j	8000538e <_ZN4core5slice3raw14from_raw_parts17h24ea7267a8aa7c05E+0x16>
}
    8000538e:	65c2                	ld	a1,16(sp)
    80005390:	6522                	ld	a0,8(sp)
    80005392:	70a2                	ld	ra,40(sp)
    80005394:	6145                	addi	sp,sp,48
    80005396:	8082                	ret

Disassembly of section .text._ZN4core5slice3raw14from_raw_parts17hf1accf0e45b69f71E:

0000000080005398 <_ZN4core5slice3raw14from_raw_parts17hf1accf0e45b69f71E>:
pub unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {
    80005398:	7179                	addi	sp,sp,-48
    8000539a:	f406                	sd	ra,40(sp)
    8000539c:	ec2a                	sd	a0,24(sp)
    8000539e:	f02e                	sd	a1,32(sp)
    unsafe { &*ptr::slice_from_raw_parts(data, len) }
    800053a0:	00013097          	auipc	ra,0x13
    800053a4:	0a4080e7          	jalr	164(ra) # 80018444 <_ZN4core3ptr20slice_from_raw_parts17h4c1ee3b844c20623E>
    800053a8:	e42a                	sd	a0,8(sp)
    800053aa:	e82e                	sd	a1,16(sp)
    800053ac:	a009                	j	800053ae <_ZN4core5slice3raw14from_raw_parts17hf1accf0e45b69f71E+0x16>
}
    800053ae:	65c2                	ld	a1,16(sp)
    800053b0:	6522                	ld	a0,8(sp)
    800053b2:	70a2                	ld	ra,40(sp)
    800053b4:	6145                	addi	sp,sp,48
    800053b6:	8082                	ret

Disassembly of section .text._ZN4core5slice3raw18from_raw_parts_mut17h0bc9e5c0c3217bc8E:

00000000800053b8 <_ZN4core5slice3raw18from_raw_parts_mut17h0bc9e5c0c3217bc8E>:
///
/// [valid]: ptr#safety
/// [`NonNull::dangling()`]: ptr::NonNull::dangling
#[inline]
#[stable(feature = "rust1", since = "1.0.0")]
pub unsafe fn from_raw_parts_mut<'a, T>(data: *mut T, len: usize) -> &'a mut [T] {
    800053b8:	7179                	addi	sp,sp,-48
    800053ba:	f406                	sd	ra,40(sp)
    800053bc:	ec2a                	sd	a0,24(sp)
    800053be:	f02e                	sd	a1,32(sp)
    debug_assert!(
        mem::size_of::<T>().saturating_mul(len) <= isize::MAX as usize,
        "attempt to create slice covering at least half the address space"
    );
    // SAFETY: the caller must uphold the safety contract for `from_raw_parts_mut`.
    unsafe { &mut *ptr::slice_from_raw_parts_mut(data, len) }
    800053c0:	0001c097          	auipc	ra,0x1c
    800053c4:	26e080e7          	jalr	622(ra) # 8002162e <_ZN4core3ptr24slice_from_raw_parts_mut17h39496eba86137ee5E>
    800053c8:	e42a                	sd	a0,8(sp)
    800053ca:	e82e                	sd	a1,16(sp)
    800053cc:	a009                	j	800053ce <_ZN4core5slice3raw18from_raw_parts_mut17h0bc9e5c0c3217bc8E+0x16>
}
    800053ce:	65c2                	ld	a1,16(sp)
    800053d0:	6522                	ld	a0,8(sp)
    800053d2:	70a2                	ld	ra,40(sp)
    800053d4:	6145                	addi	sp,sp,48
    800053d6:	8082                	ret

Disassembly of section .text._ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_exec28_$u7b$$u7b$closure$u7d$$u7d$17hac210036fe7eba45E:

00000000800053d8 <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_exec28_$u7b$$u7b$closure$u7d$$u7d$17hac210036fe7eba45E>:
                MAXARG
            ) 
        };
        let ret = unsafe {
            exec(path, &argv).map_err(
                |_|(())
    800053d8:	1101                	addi	sp,sp,-32
    800053da:	e82a                	sd	a0,16(sp)
    800053dc:	ec2e                	sd	a1,24(sp)
    800053de:	6105                	addi	sp,sp,32
    800053e0:	8082                	ret

Disassembly of section .text._ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17hde552876d1bc9ef6E:

00000000800053e2 <_ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17hde552876d1bc9ef6E>:
}

#[stable(feature = "rust1", since = "1.0.0")]
impl Debug for () {
    #[inline]
    fn fmt(&self, f: &mut Formatter<'_>) -> Result {
    800053e2:	7179                	addi	sp,sp,-48
    800053e4:	f406                	sd	ra,40(sp)
    800053e6:	e42e                	sd	a1,8(sp)
    800053e8:	85aa                	mv	a1,a0
    800053ea:	6522                	ld	a0,8(sp)
    800053ec:	ec2e                	sd	a1,24(sp)
    800053ee:	f02a                	sd	a0,32(sp)

00000000800053f0 <.LBB0_2>:
        f.pad("()")
    800053f0:	00021597          	auipc	a1,0x21
    800053f4:	f4058593          	addi	a1,a1,-192 # 80026330 <.L__unnamed_1>
    800053f8:	4609                	li	a2,2
    800053fa:	0001e097          	auipc	ra,0x1e
    800053fe:	99e080e7          	jalr	-1634(ra) # 80022d98 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE>
    80005402:	e82a                	sd	a0,16(sp)
    80005404:	a009                	j	80005406 <.LBB0_2+0x16>
    }
    80005406:	6542                	ld	a0,16(sp)
    80005408:	70a2                	ld	ra,40(sp)
    8000540a:	6145                	addi	sp,sp,48
    8000540c:	8082                	ret

Disassembly of section .text._ZN4core3fmt9Arguments16new_v1_formatted17hf6d3ed0f8e821319E:

000000008000540e <_ZN4core3fmt9Arguments16new_v1_formatted17hf6d3ed0f8e821319E>:
    pub fn new_v1_formatted(
    8000540e:	7139                	addi	sp,sp,-64
    80005410:	e82e                	sd	a1,16(sp)
    80005412:	ec32                	sd	a2,24(sp)
    80005414:	f036                	sd	a3,32(sp)
    80005416:	f43a                	sd	a4,40(sp)
    80005418:	f83e                	sd	a5,48(sp)
    8000541a:	fc42                	sd	a6,56(sp)
        Arguments { pieces, fmt: Some(fmt), args }
    8000541c:	e03e                	sd	a5,0(sp)
    8000541e:	e442                	sd	a6,8(sp)
    80005420:	e10c                	sd	a1,0(a0)
    80005422:	e510                	sd	a2,8(a0)
    80005424:	6602                	ld	a2,0(sp)
    80005426:	65a2                	ld	a1,8(sp)
    80005428:	e910                	sd	a2,16(a0)
    8000542a:	ed0c                	sd	a1,24(a0)
    8000542c:	f114                	sd	a3,32(a0)
    8000542e:	f518                	sd	a4,40(a0)
    }
    80005430:	6121                	addi	sp,sp,64
    80005432:	8082                	ret

Disassembly of section .text._ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE:

0000000080005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>:
    pub fn new_v1(pieces: &'a [&'static str], args: &'a [ArgumentV1<'a>]) -> Arguments<'a> {
    80005434:	7179                	addi	sp,sp,-48
    80005436:	e82e                	sd	a1,16(sp)
    80005438:	ec32                	sd	a2,24(sp)
    8000543a:	f036                	sd	a3,32(sp)
    8000543c:	f43a                	sd	a4,40(sp)
    8000543e:	4781                	li	a5,0
        Arguments { pieces, fmt: None, args }
    80005440:	e03e                	sd	a5,0(sp)
    80005442:	e10c                	sd	a1,0(a0)
    80005444:	e510                	sd	a2,8(a0)
    80005446:	6602                	ld	a2,0(sp)
    80005448:	65a2                	ld	a1,8(sp)
    8000544a:	e910                	sd	a2,16(a0)
    8000544c:	ed0c                	sd	a1,24(a0)
    8000544e:	f114                	sd	a3,32(a0)
    80005450:	f518                	sd	a4,40(a0)
    }
    80005452:	6145                	addi	sp,sp,48
    80005454:	8082                	ret

Disassembly of section .text._ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E:

0000000080005456 <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E>:

/// Reads the next code point out of a byte iterator (assuming a
/// UTF-8-like encoding).
#[unstable(feature = "str_internals", issue = "none")]
#[inline]
pub fn next_code_point<'a, I: Iterator<Item = &'a u8>>(bytes: &mut I) -> Option<u32> {
    80005456:	7131                	addi	sp,sp,-192
    80005458:	fd06                	sd	ra,184(sp)
    8000545a:	f0aa                	sd	a0,96(sp)
    8000545c:	e52a                	sd	a0,136(sp)
    // Decode UTF-8
    let x = *bytes.next()?;
    8000545e:	00006097          	auipc	ra,0x6
    80005462:	c3e080e7          	jalr	-962(ra) # 8000b09c <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbe39990052f1389dE>
    80005466:	f4aa                	sd	a0,104(sp)
    80005468:	a009                	j	8000546a <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E+0x14>
    8000546a:	7526                	ld	a0,104(sp)
    8000546c:	0000a097          	auipc	ra,0xa
    80005470:	d24080e7          	jalr	-732(ra) # 8000f190 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hce0d66149b699885E>
    80005474:	fcaa                	sd	a0,120(sp)
    80005476:	a009                	j	80005478 <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E+0x22>
    80005478:	7566                	ld	a0,120(sp)
    8000547a:	00153593          	seqz	a1,a0
    8000547e:	4581                	li	a1,0
    80005480:	00b51463          	bne	a0,a1,80005488 <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E+0x32>
    80005484:	a009                	j	80005486 <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E+0x30>
    80005486:	a839                	j	800054a4 <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E+0x4e>
    80005488:	7566                	ld	a0,120(sp)
    8000548a:	ed2a                	sd	a0,152(sp)
    8000548c:	00050583          	lb	a1,0(a0)
    80005490:	0ff5f513          	andi	a0,a1,255
    80005494:	ecaa                	sd	a0,88(sp)
    80005496:	0ab103a3          	sb	a1,167(sp)
    8000549a:	557d                	li	a0,-1
    if x < 128 {
    8000549c:	02b54163          	blt	a0,a1,800054be <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E+0x68>
    800054a0:	a025                	j	800054c8 <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E+0x72>
    let x = *bytes.next()?;
    800054a2:	0000                	unimp
    800054a4:	0000a097          	auipc	ra,0xa
    800054a8:	b32080e7          	jalr	-1230(ra) # 8000efd6 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h8871efd663dd0baaE>
    800054ac:	a009                	j	800054ae <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E+0x58>
    800054ae:	0000a097          	auipc	ra,0xa
    800054b2:	cbc080e7          	jalr	-836(ra) # 8000f16a <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h35e87322ea53eeb5E>
    800054b6:	d8aa                	sw	a0,112(sp)
    800054b8:	daae                	sw	a1,116(sp)
    800054ba:	a009                	j	800054bc <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E+0x66>
    800054bc:	a209                	j	800055be <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E+0x168>
        return Some(x as u32);
    800054be:	6566                	ld	a0,88(sp)
    800054c0:	daaa                	sw	a0,116(sp)
    800054c2:	4505                	li	a0,1
    800054c4:	d8aa                	sw	a0,112(sp)
    800054c6:	a8e5                	j	800055be <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E+0x168>
    }

    // Multibyte case follows
    // Decode from a byte combination out of: [[[x y] z] w]
    // NOTE: Performance is sensitive to the exact formulation here
    let init = utf8_first_byte(x, 2);
    800054c8:	6566                	ld	a0,88(sp)
    800054ca:	4589                	li	a1,2
    800054cc:	00003097          	auipc	ra,0x3
    800054d0:	514080e7          	jalr	1300(ra) # 800089e0 <_ZN4core3str11validations15utf8_first_byte17h336ce196ba99428fE>
    800054d4:	85aa                	mv	a1,a0
    800054d6:	e8ae                	sd	a1,80(sp)
    800054d8:	d52a                	sw	a0,168(sp)
    800054da:	a009                	j	800054dc <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E+0x86>
    let y = unwrap_or_0(bytes.next());
    800054dc:	7506                	ld	a0,96(sp)
    800054de:	00006097          	auipc	ra,0x6
    800054e2:	bbe080e7          	jalr	-1090(ra) # 8000b09c <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbe39990052f1389dE>
    800054e6:	e4aa                	sd	a0,72(sp)
    800054e8:	a009                	j	800054ea <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E+0x94>
    800054ea:	6526                	ld	a0,72(sp)
    800054ec:	00003097          	auipc	ra,0x3
    800054f0:	4c0080e7          	jalr	1216(ra) # 800089ac <_ZN4core3str11validations11unwrap_or_017haab6baa99207da23E>
    800054f4:	85aa                	mv	a1,a0
    800054f6:	e0ae                	sd	a1,64(sp)
    800054f8:	0aa10723          	sb	a0,174(sp)
    800054fc:	a009                	j	800054fe <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E+0xa8>
    let mut ch = utf8_acc_cont_byte(init, y);
    800054fe:	6586                	ld	a1,64(sp)
    80005500:	6546                	ld	a0,80(sp)
    80005502:	00003097          	auipc	ra,0x3
    80005506:	4f8080e7          	jalr	1272(ra) # 800089fa <_ZN4core3str11validations18utf8_acc_cont_byte17h8689eb325a5b266aE>
    8000550a:	c32a                	sw	a0,132(sp)
    8000550c:	a009                	j	8000550e <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E+0xb8>
    8000550e:	6566                	ld	a0,88(sp)
    80005510:	0e000593          	li	a1,224
    if x >= 0xE0 {
    80005514:	00b56a63          	bltu	a0,a1,80005528 <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E+0xd2>
    80005518:	a009                	j	8000551a <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E+0xc4>
        // [[x y z] w] case
        // 5th bit in 0xE0 .. 0xEF is always clear, so `init` is still valid
        let z = unwrap_or_0(bytes.next());
    8000551a:	7506                	ld	a0,96(sp)
    8000551c:	00006097          	auipc	ra,0x6
    80005520:	b80080e7          	jalr	-1152(ra) # 8000b09c <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbe39990052f1389dE>
    80005524:	fc2a                	sd	a0,56(sp)
    80005526:	a011                	j	8000552a <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E+0xd4>
    if x >= 0xE0 {
    80005528:	a071                	j	800055b4 <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E+0x15e>
        let z = unwrap_or_0(bytes.next());
    8000552a:	7562                	ld	a0,56(sp)
    8000552c:	00003097          	auipc	ra,0x3
    80005530:	480080e7          	jalr	1152(ra) # 800089ac <_ZN4core3str11validations11unwrap_or_017haab6baa99207da23E>
    80005534:	85aa                	mv	a1,a0
    80005536:	f82e                	sd	a1,48(sp)
    80005538:	0aa107a3          	sb	a0,175(sp)
    8000553c:	a009                	j	8000553e <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E+0xe8>
        let y_z = utf8_acc_cont_byte((y & CONT_MASK) as u32, z);
    8000553e:	75c2                	ld	a1,48(sp)
    80005540:	6506                	ld	a0,64(sp)
    80005542:	03f57513          	andi	a0,a0,63
    80005546:	00003097          	auipc	ra,0x3
    8000554a:	4b4080e7          	jalr	1204(ra) # 800089fa <_ZN4core3str11validations18utf8_acc_cont_byte17h8689eb325a5b266aE>
    8000554e:	85aa                	mv	a1,a0
    80005550:	f42e                	sd	a1,40(sp)
    80005552:	d92a                	sw	a0,176(sp)
    80005554:	a009                	j	80005556 <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E+0x100>
        ch = init << 12 | y_z;
    80005556:	6566                	ld	a0,88(sp)
    80005558:	7622                	ld	a2,40(sp)
    8000555a:	65c6                	ld	a1,80(sp)
    8000555c:	05b2                	slli	a1,a1,0xc
    8000555e:	8dd1                	or	a1,a1,a2
    80005560:	c32e                	sw	a1,132(sp)
    80005562:	0f000593          	li	a1,240
        if x >= 0xF0 {
    80005566:	00b56a63          	bltu	a0,a1,8000557a <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E+0x124>
    8000556a:	a009                	j	8000556c <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E+0x116>
            // [x y z w] case
            // use only the lower 3 bits of `init`
            let w = unwrap_or_0(bytes.next());
    8000556c:	7506                	ld	a0,96(sp)
    8000556e:	00006097          	auipc	ra,0x6
    80005572:	b2e080e7          	jalr	-1234(ra) # 8000b09c <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbe39990052f1389dE>
    80005576:	f02a                	sd	a0,32(sp)
    80005578:	a011                	j	8000557c <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E+0x126>
        if x >= 0xF0 {
    8000557a:	a825                	j	800055b2 <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E+0x15c>
            let w = unwrap_or_0(bytes.next());
    8000557c:	7502                	ld	a0,32(sp)
    8000557e:	00003097          	auipc	ra,0x3
    80005582:	42e080e7          	jalr	1070(ra) # 800089ac <_ZN4core3str11validations11unwrap_or_017haab6baa99207da23E>
    80005586:	85aa                	mv	a1,a0
    80005588:	ec2e                	sd	a1,24(sp)
    8000558a:	0aa10ba3          	sb	a0,183(sp)
    8000558e:	a009                	j	80005590 <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E+0x13a>
            ch = (init & 7) << 18 | utf8_acc_cont_byte(y_z, w);
    80005590:	65e2                	ld	a1,24(sp)
    80005592:	7522                	ld	a0,40(sp)
    80005594:	6646                	ld	a2,80(sp)
    80005596:	8a1d                	andi	a2,a2,7
    80005598:	064a                	slli	a2,a2,0x12
    8000559a:	e432                	sd	a2,8(sp)
    8000559c:	00003097          	auipc	ra,0x3
    800055a0:	45e080e7          	jalr	1118(ra) # 800089fa <_ZN4core3str11validations18utf8_acc_cont_byte17h8689eb325a5b266aE>
    800055a4:	e82a                	sd	a0,16(sp)
    800055a6:	a009                	j	800055a8 <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E+0x152>
    800055a8:	6522                	ld	a0,8(sp)
    800055aa:	65c2                	ld	a1,16(sp)
    800055ac:	8d4d                	or	a0,a0,a1
    800055ae:	c32a                	sw	a0,132(sp)
        if x >= 0xF0 {
    800055b0:	a009                	j	800055b2 <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E+0x15c>
    if x >= 0xE0 {
    800055b2:	a009                	j	800055b4 <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E+0x15e>
        }
    }

    Some(ch)
    800055b4:	451a                	lw	a0,132(sp)
    800055b6:	daaa                	sw	a0,116(sp)
    800055b8:	4505                	li	a0,1
    800055ba:	d8aa                	sw	a0,112(sp)
}
    800055bc:	a011                	j	800055c0 <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E+0x16a>
    800055be:	a009                	j	800055c0 <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E+0x16a>
    800055c0:	5546                	lw	a0,112(sp)
    800055c2:	55d6                	lw	a1,116(sp)
    800055c4:	70ea                	ld	ra,184(sp)
    800055c6:	6129                	addi	sp,sp,192
    800055c8:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17hffa57d7c8ffaba34E:

00000000800055ca <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17hffa57d7c8ffaba34E>:
    /// ```
    #[stable(feature = "pointer_methods", since = "1.26.0")]
    #[must_use = "returns a new pointer rather than modifying its argument"]
    #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
    #[inline]
    pub const unsafe fn add(self, count: usize) -> Self
    800055ca:	1101                	addi	sp,sp,-32
    800055cc:	ec06                	sd	ra,24(sp)
    800055ce:	e42a                	sd	a0,8(sp)
    800055d0:	e82e                	sd	a1,16(sp)
    where
        T: Sized,
    {
        // SAFETY: the caller must uphold the safety contract for `offset`.
        unsafe { self.offset(count as isize) }
    800055d2:	00000097          	auipc	ra,0x0
    800055d6:	046080e7          	jalr	70(ra) # 80005618 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h6150def6e470518fE>
    800055da:	e02a                	sd	a0,0(sp)
    800055dc:	a009                	j	800055de <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17hffa57d7c8ffaba34E+0x14>
    }
    800055de:	6502                	ld	a0,0(sp)
    800055e0:	60e2                	ld	ra,24(sp)
    800055e2:	6105                	addi	sp,sp,32
    800055e4:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h12167601873b3d53E:

00000000800055e6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h12167601873b3d53E>:
    pub unsafe fn as_mut<'a>(self) -> Option<&'a mut T> {
    800055e6:	7179                	addi	sp,sp,-48
    800055e8:	f406                	sd	ra,40(sp)
    800055ea:	e42a                	sd	a0,8(sp)
    800055ec:	f02a                	sd	a0,32(sp)
        if self.is_null() { None } else { unsafe { Some(&mut *self) } }
    800055ee:	00000097          	auipc	ra,0x0
    800055f2:	046080e7          	jalr	70(ra) # 80005634 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hee9a0b1c2395b573E>
    800055f6:	e82a                	sd	a0,16(sp)
    800055f8:	a009                	j	800055fa <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h12167601873b3d53E+0x14>
    800055fa:	6542                	ld	a0,16(sp)
    800055fc:	4581                	li	a1,0
    800055fe:	00b50663          	beq	a0,a1,8000560a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h12167601873b3d53E+0x24>
    80005602:	a009                	j	80005604 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h12167601873b3d53E+0x1e>
    80005604:	4501                	li	a0,0
    80005606:	ec2a                	sd	a0,24(sp)
    80005608:	a021                	j	80005610 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h12167601873b3d53E+0x2a>
    8000560a:	6522                	ld	a0,8(sp)
    8000560c:	ec2a                	sd	a0,24(sp)
    8000560e:	a009                	j	80005610 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h12167601873b3d53E+0x2a>
    }
    80005610:	6562                	ld	a0,24(sp)
    80005612:	70a2                	ld	ra,40(sp)
    80005614:	6145                	addi	sp,sp,48
    80005616:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h6150def6e470518fE:

0000000080005618 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h6150def6e470518fE>:
    pub const unsafe fn offset(self, count: isize) -> *mut T
    80005618:	1101                	addi	sp,sp,-32
    8000561a:	e42a                	sd	a0,8(sp)
    8000561c:	e82e                	sd	a1,16(sp)
    8000561e:	02800613          	li	a2,40
        unsafe { intrinsics::offset(self, count) as *mut T }
    80005622:	02c585b3          	mul	a1,a1,a2
    80005626:	952e                	add	a0,a0,a1
    80005628:	e02a                	sd	a0,0(sp)
    8000562a:	ec2a                	sd	a0,24(sp)
    8000562c:	a009                	j	8000562e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h6150def6e470518fE+0x16>
    }
    8000562e:	6502                	ld	a0,0(sp)
    80005630:	6105                	addi	sp,sp,32
    80005632:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hee9a0b1c2395b573E:

0000000080005634 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hee9a0b1c2395b573E>:
    pub const fn is_null(self) -> bool {
    80005634:	1101                	addi	sp,sp,-32
    80005636:	ec06                	sd	ra,24(sp)
    80005638:	e82a                	sd	a0,16(sp)
        (self as *mut u8).guaranteed_eq(null_mut())
    8000563a:	e42a                	sd	a0,8(sp)
    8000563c:	a009                	j	8000563e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hee9a0b1c2395b573E+0xa>
    8000563e:	6522                	ld	a0,8(sp)
    80005640:	4581                	li	a1,0
    80005642:	0001d097          	auipc	ra,0x1d
    80005646:	880080e7          	jalr	-1920(ra) # 80021ec2 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$13guaranteed_eq17h32ea8c99c0b8220dE>
    8000564a:	e02a                	sd	a0,0(sp)
    8000564c:	a009                	j	8000564e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hee9a0b1c2395b573E+0x1a>
    }
    8000564e:	6502                	ld	a0,0(sp)
    80005650:	60e2                	ld	ra,24(sp)
    80005652:	6105                	addi	sp,sp,32
    80005654:	8082                	ret

Disassembly of section .text._ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h37e95d8a2d6ca634E:

0000000080005656 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h37e95d8a2d6ca634E>:
    /// assert_eq!(x, &[3, 4, 6]);
    /// ```
    #[stable(feature = "rust1", since = "1.0.0")]
    #[rustc_const_unstable(feature = "const_ptr_offset", issue = "71499")]
    #[inline]
    pub const fn as_mut_ptr(&mut self) -> *mut T {
    80005656:	1141                	addi	sp,sp,-16
    80005658:	e02a                	sd	a0,0(sp)
    8000565a:	e42e                	sd	a1,8(sp)
        self as *mut [T] as *mut T
    }
    8000565c:	0141                	addi	sp,sp,16
    8000565e:	8082                	ret

Disassembly of section .text._ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h0b5a743241a7cbfaE:

0000000080005660 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h0b5a743241a7cbfaE>:
    pub const fn len(&self) -> usize {
    80005660:	7179                	addi	sp,sp,-48
    80005662:	e42e                	sd	a1,8(sp)
    80005664:	85aa                	mv	a1,a0
    80005666:	6522                	ld	a0,8(sp)
    80005668:	f02e                	sd	a1,32(sp)
    8000566a:	f42a                	sd	a0,40(sp)
            unsafe { crate::ptr::PtrRepr { const_ptr: self }.components.metadata }
    8000566c:	e82e                	sd	a1,16(sp)
    8000566e:	ec2a                	sd	a0,24(sp)
    }
    80005670:	6145                	addi	sp,sp,48
    80005672:	8082                	ret

Disassembly of section .text._ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h56877d4d8de3d254E:

0000000080005674 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h56877d4d8de3d254E>:
    /// }
    /// assert_eq!(x, &[3, 4, 6]);
    /// ```
    #[stable(feature = "rust1", since = "1.0.0")]
    #[inline]
    pub fn iter_mut(&mut self) -> IterMut<'_, T> {
    80005674:	7179                	addi	sp,sp,-48
    80005676:	f406                	sd	ra,40(sp)
    80005678:	ec2a                	sd	a0,24(sp)
    8000567a:	f02e                	sd	a1,32(sp)
        IterMut::new(self)
    8000567c:	00005097          	auipc	ra,0x5
    80005680:	6e8080e7          	jalr	1768(ra) # 8000ad64 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h018b863ac427b524E>
    80005684:	e42a                	sd	a0,8(sp)
    80005686:	e82e                	sd	a1,16(sp)
    80005688:	a009                	j	8000568a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h56877d4d8de3d254E+0x16>
    }
    8000568a:	65c2                	ld	a1,16(sp)
    8000568c:	6522                	ld	a0,8(sp)
    8000568e:	70a2                	ld	ra,40(sp)
    80005690:	6145                	addi	sp,sp,48
    80005692:	8082                	ret

Disassembly of section .text._ZN6kernel2fs3bio6Bcache5binit28_$u7b$$u7b$closure$u7d$$u7d$17h25f2c34d7a851755E:

0000000080005694 <_ZN6kernel2fs3bio6Bcache5binit28_$u7b$$u7b$closure$u7d$$u7d$17h25f2c34d7a851755E>:
            .for_each(|(i, b)| b.index = i);
    80005694:	7179                	addi	sp,sp,-48
    80005696:	e42a                	sd	a0,8(sp)
    80005698:	e82e                	sd	a1,16(sp)
    8000569a:	ec32                	sd	a2,24(sp)
    8000569c:	f02e                	sd	a1,32(sp)
    8000569e:	f432                	sd	a2,40(sp)
    800056a0:	ee0c                	sd	a1,24(a2)
    800056a2:	6145                	addi	sp,sp,48
    800056a4:	8082                	ret

Disassembly of section .text._ZN6kernel2fs3bio6BufLru14move_if_no_ref28_$u7b$$u7b$closure$u7d$$u7d$17h09361c1327a61982E:

00000000800056a6 <_ZN6kernel2fs3bio6BufLru14move_if_no_ref28_$u7b$$u7b$closure$u7d$$u7d$17h09361c1327a61982E>:
                b.next.as_mut().map(|b_next| b_next.prev = b.prev);
    800056a6:	1141                	addi	sp,sp,-16
    800056a8:	e02a                	sd	a0,0(sp)
    800056aa:	e42e                	sd	a1,8(sp)
    800056ac:	6108                	ld	a0,0(a0)
    800056ae:	6108                	ld	a0,0(a0)
    800056b0:	e188                	sd	a0,0(a1)
    800056b2:	0141                	addi	sp,sp,16
    800056b4:	8082                	ret

Disassembly of section .text._ZN6kernel2fs3bio6BufLru14move_if_no_ref28_$u7b$$u7b$closure$u7d$$u7d$17h0a4afebccbc6cf13E:

00000000800056b6 <_ZN6kernel2fs3bio6BufLru14move_if_no_ref28_$u7b$$u7b$closure$u7d$$u7d$17h0a4afebccbc6cf13E>:
                b.prev.as_mut().map(|b_prev| b_prev.next = b.next);
    800056b6:	1141                	addi	sp,sp,-16
    800056b8:	e02a                	sd	a0,0(sp)
    800056ba:	e42e                	sd	a1,8(sp)
    800056bc:	6108                	ld	a0,0(a0)
    800056be:	6508                	ld	a0,8(a0)
    800056c0:	e588                	sd	a0,8(a1)
    800056c2:	0141                	addi	sp,sp,16
    800056c4:	8082                	ret

Disassembly of section .text._ZN6kernel2fs3bio6BufLru14move_if_no_ref28_$u7b$$u7b$closure$u7d$$u7d$17h304675452a5a98dfE:

00000000800056c6 <_ZN6kernel2fs3bio6BufLru14move_if_no_ref28_$u7b$$u7b$closure$u7d$$u7d$17h304675452a5a98dfE>:
                self.head.as_mut().map(|old_head| old_head.prev = b);
    800056c6:	1141                	addi	sp,sp,-16
    800056c8:	e02a                	sd	a0,0(sp)
    800056ca:	e42e                	sd	a1,8(sp)
    800056cc:	6108                	ld	a0,0(a0)
    800056ce:	e188                	sd	a0,0(a1)
    800056d0:	0141                	addi	sp,sp,16
    800056d2:	8082                	ret

Disassembly of section .text._ZN6kernel2fs4file5VFile4init17h000c38ec0bf103cfE:

00000000800056d4 <_ZN6kernel2fs4file5VFile4init17h000c38ec0bf103cfE>:
    pub(crate) major: i16
    // inner: FileInner
}

impl VFile {
    pub(crate) const fn init() -> Self {
    800056d4:	7179                	addi	sp,sp,-48
    800056d6:	85aa                	mv	a1,a0
    800056d8:	4501                	li	a0,0
        Self{
            ftype: FileType::None,
            readable: false,
            writeable: false,
            pipe: None,
    800056da:	e42a                	sd	a0,8(sp)
            inode: None,
    800056dc:	ec2a                	sd	a0,24(sp)
        Self{
    800056de:	02a59623          	sh	a0,44(a1)
    800056e2:	02a59823          	sh	a0,48(a1)
    800056e6:	66a2                	ld	a3,8(sp)
    800056e8:	6642                	ld	a2,16(sp)
    800056ea:	e194                	sd	a3,0(a1)
    800056ec:	e590                	sd	a2,8(a1)
    800056ee:	6662                	ld	a2,24(sp)
    800056f0:	e990                	sd	a2,16(a1)
    800056f2:	7602                	ld	a2,32(sp)
    800056f4:	ed90                	sd	a2,24(a1)
    800056f6:	7622                	ld	a2,40(sp)
    800056f8:	f190                	sd	a2,32(a1)
    800056fa:	d588                	sw	a0,40(a1)
    800056fc:	02a59723          	sh	a0,46(a1)
            // fifo: None,
            offset: 0,
            major: 0
        }
    }
    80005700:	6145                	addi	sp,sp,48
    80005702:	8082                	ret

Disassembly of section .text._ZN6kernel2fs4file5VFile4read17h537db93950e2de6aE:

0000000080005704 <_ZN6kernel2fs4file5VFile4read17h537db93950e2de6aE>:

    pub fn read(
    80005704:	7145                	addi	sp,sp,-464
    80005706:	e786                	sd	ra,456(sp)
    80005708:	e136                	sd	a3,128(sp)
    8000570a:	e532                	sd	a2,136(sp)
    8000570c:	e92e                	sd	a1,144(sp)
    8000570e:	85aa                	mv	a1,a0
    80005710:	654a                	ld	a0,144(sp)
    80005712:	ed2e                	sd	a1,152(sp)
    80005714:	e6aa                	sd	a0,328(sp)
    80005716:	eab2                	sd	a2,336(sp)
    80005718:	eeb6                	sd	a3,344(sp)
    8000571a:	4581                	li	a1,0
        &self, 
        addr: usize, 
        len: usize
    ) -> Result<usize, &'static str> {
        let ret;
    8000571c:	14b103a3          	sb	a1,327(sp)
        if !self.readable() {
    80005720:	00001097          	auipc	ra,0x1
    80005724:	866080e7          	jalr	-1946(ra) # 80005f86 <_ZN6kernel2fs4file5VFile8readable17h4e596856d12086d6E>
    80005728:	f12a                	sd	a0,160(sp)
    8000572a:	a009                	j	8000572c <_ZN6kernel2fs4file5VFile4read17h537db93950e2de6aE+0x28>
    8000572c:	750a                	ld	a0,160(sp)
    8000572e:	e105                	bnez	a0,8000574e <.LBB1_58+0x14>
    80005730:	a009                	j	80005732 <.LBB1_57>

0000000080005732 <.LBB1_57>:
            panic!("File can't be read!")
    80005732:	00021517          	auipc	a0,0x21
    80005736:	c0050513          	addi	a0,a0,-1024 # 80026332 <.L__unnamed_1>

000000008000573a <.LBB1_58>:
    8000573a:	00021617          	auipc	a2,0x21
    8000573e:	c1e60613          	addi	a2,a2,-994 # 80026358 <.L__unnamed_2>
    80005742:	45cd                	li	a1,19
    80005744:	0001d097          	auipc	ra,0x1d
    80005748:	9b8080e7          	jalr	-1608(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8000574c:	0000                	unimp
        }

        match self.ftype {
            FileType::Pipe => {
    8000574e:	654a                	ld	a0,144(sp)
    80005750:	02c55503          	lhu	a0,44(a0)
    80005754:	fcaa                	sd	a0,120(sp)
    80005756:	4585                	li	a1,1
    80005758:	02b50b63          	beq	a0,a1,8000578e <.LBB1_60+0x14>
    8000575c:	a009                	j	8000575e <.LBB1_58+0x24>
    8000575e:	7566                	ld	a0,120(sp)
    80005760:	4589                	li	a1,2
    80005762:	1eb50363          	beq	a0,a1,80005948 <.LBB1_65+0x68>
    80005766:	a009                	j	80005768 <.LBB1_58+0x2e>
    80005768:	7566                	ld	a0,120(sp)
    8000576a:	458d                	li	a1,3
    8000576c:	0ab50163          	beq	a0,a1,8000580e <.LBB1_61+0x7a>
    80005770:	a009                	j	80005772 <.LBB1_59>

0000000080005772 <.LBB1_59>:
                    }
                }
            },

            _ => {
                panic!("Invalid file!")
    80005772:	00021517          	auipc	a0,0x21
    80005776:	bfe50513          	addi	a0,a0,-1026 # 80026370 <.L__unnamed_3>

000000008000577a <.LBB1_60>:
    8000577a:	00021617          	auipc	a2,0x21
    8000577e:	c0660613          	addi	a2,a2,-1018 # 80026380 <.L__unnamed_4>
    80005782:	45b5                	li	a1,13
    80005784:	0001d097          	auipc	ra,0x1d
    80005788:	978080e7          	jalr	-1672(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8000578c:	0000                	unimp
                let pipe = unsafe{ &*self.pipe.unwrap() };
    8000578e:	65ca                	ld	a1,144(sp)
    80005790:	6188                	ld	a0,0(a1)
    80005792:	658c                	ld	a1,8(a1)

0000000080005794 <.LBB1_61>:
    80005794:	00021617          	auipc	a2,0x21
    80005798:	c9c60613          	addi	a2,a2,-868 # 80026430 <.L__unnamed_5>
    8000579c:	00009097          	auipc	ra,0x9
    800057a0:	370080e7          	jalr	880(ra) # 8000eb0c <_ZN4core6option15Option$LT$T$GT$6unwrap17h1e3cd39cfed0614fE>
    800057a4:	f8aa                	sd	a0,112(sp)
    800057a6:	a009                	j	800057a8 <.LBB1_61+0x14>
    800057a8:	668a                	ld	a3,128(sp)
    800057aa:	662a                	ld	a2,136(sp)
    800057ac:	75c6                	ld	a1,112(sp)
    800057ae:	f72e                	sd	a1,424(sp)
    800057b0:	01a8                	addi	a0,sp,200
                ret = pipe.read(addr, len)?;
    800057b2:	00005097          	auipc	ra,0x5
    800057b6:	992080e7          	jalr	-1646(ra) # 8000a144 <_ZN6kernel2fs4pipe4Pipe4read17he058981835099b36E>
    800057ba:	a009                	j	800057bc <.LBB1_61+0x28>
    800057bc:	1908                	addi	a0,sp,176
    800057be:	01ac                	addi	a1,sp,200
    800057c0:	00008097          	auipc	ra,0x8
    800057c4:	912080e7          	jalr	-1774(ra) # 8000d0d2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h0dd4a8728df8a7c8E>
    800057c8:	a009                	j	800057ca <.LBB1_61+0x36>
    800057ca:	754a                	ld	a0,176(sp)
    800057cc:	4581                	li	a1,0
    800057ce:	00b50463          	beq	a0,a1,800057d6 <.LBB1_61+0x42>
    800057d2:	a009                	j	800057d4 <.LBB1_61+0x40>
    800057d4:	a811                	j	800057e8 <.LBB1_61+0x54>
    800057d6:	65ea                	ld	a1,152(sp)
    800057d8:	756a                	ld	a0,184(sp)
    800057da:	e3aa                	sd	a0,448(sp)
    800057dc:	f52a                	sd	a0,168(sp)
                return Ok(ret)
    800057de:	e588                	sd	a0,8(a1)
    800057e0:	4501                	li	a0,0
    800057e2:	e188                	sd	a0,0(a1)
    800057e4:	a481                	j	80005a24 <.LBB1_66+0xca>
                ret = pipe.read(addr, len)?;
    800057e6:	0000                	unimp
    800057e8:	756a                	ld	a0,184(sp)
    800057ea:	658e                	ld	a1,192(sp)
    800057ec:	fb2a                	sd	a0,432(sp)
    800057ee:	ff2e                	sd	a1,440(sp)
    800057f0:	00006097          	auipc	ra,0x6
    800057f4:	1d4080e7          	jalr	468(ra) # 8000b9c4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h6f3e3843c20d184aE>
    800057f8:	f0aa                	sd	a0,96(sp)
    800057fa:	f4ae                	sd	a1,104(sp)
    800057fc:	a009                	j	800057fe <.LBB1_61+0x6a>
    800057fe:	7626                	ld	a2,104(sp)
    80005800:	7586                	ld	a1,96(sp)
    80005802:	656a                	ld	a0,152(sp)
    80005804:	00008097          	auipc	ra,0x8
    80005808:	800080e7          	jalr	-2048(ra) # 8000d004 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h4dd43adfe00292f6E>
    8000580c:	ac21                	j	80005a24 <.LBB1_66+0xca>
                if self.major < 0 || 
    8000580e:	654a                	ld	a0,144(sp)
    80005810:	02e51503          	lh	a0,46(a0)
    80005814:	4581                	li	a1,0
    80005816:	02b54863          	blt	a0,a1,80005846 <.LBB1_61+0xb2>
    8000581a:	a835                	j	80005856 <.LBB1_61+0xc2>
    8000581c:	4505                	li	a0,1
    8000581e:	0ea10323          	sb	a0,230(sp)
    80005822:	a829                	j	8000583c <.LBB1_61+0xa8>
    80005824:	4501                	li	a0,0
    80005826:	0ea10323          	sb	a0,230(sp)
    8000582a:	a809                	j	8000583c <.LBB1_61+0xa8>
                unsafe{ DEVICE_LIST.table[self.major as usize].read as usize == 0 }{
    8000582c:	654a                	ld	a0,144(sp)
    8000582e:	02e51503          	lh	a0,46(a0)
    80005832:	ecaa                	sd	a0,88(sp)
    80005834:	45a9                	li	a1,10
    80005836:	02b56c63          	bltu	a0,a1,8000586e <.LBB1_61+0xda>
    8000583a:	a419                	j	80005a40 <.LBB1_66+0xe6>
                if self.major < 0 || 
    8000583c:	0e614503          	lbu	a0,230(sp)
    80005840:	8905                	andi	a0,a0,1
    80005842:	e131                	bnez	a0,80005886 <.LBB1_62+0x14>
    80005844:	a8a9                	j	8000589e <.LBB1_63+0x16>
    80005846:	4505                	li	a0,1
    80005848:	0ea103a3          	sb	a0,231(sp)
    8000584c:	a821                	j	80005864 <.LBB1_61+0xd0>
    8000584e:	4501                	li	a0,0
    80005850:	0ea103a3          	sb	a0,231(sp)
    80005854:	a801                	j	80005864 <.LBB1_61+0xd0>
                self.major as usize >= NDEV || 
    80005856:	654a                	ld	a0,144(sp)
    80005858:	02e51583          	lh	a1,46(a0)
    8000585c:	4525                	li	a0,9
                if self.major < 0 || 
    8000585e:	feb564e3          	bltu	a0,a1,80005846 <.LBB1_61+0xb2>
    80005862:	b7f5                	j	8000584e <.LBB1_61+0xba>
    80005864:	0e714503          	lbu	a0,231(sp)
    80005868:	8905                	andi	a0,a0,1
    8000586a:	f94d                	bnez	a0,8000581c <.LBB1_61+0x88>
    8000586c:	b7c1                	j	8000582c <.LBB1_61+0x98>
                unsafe{ DEVICE_LIST.table[self.major as usize].read as usize == 0 }{
    8000586e:	6566                	ld	a0,88(sp)
    80005870:	0512                	slli	a0,a0,0x4

0000000080005872 <.LBB1_62>:
    80005872:	0005c597          	auipc	a1,0x5c
    80005876:	78e58593          	addi	a1,a1,1934 # 80062000 <_ZN6kernel2fs7devices11DEVICE_LIST17h17b7683da24e3570E>
    8000587a:	952e                	add	a0,a0,a1
    8000587c:	6108                	ld	a0,0(a0)
    8000587e:	4581                	li	a1,0
                if self.major < 0 || 
    80005880:	f8b50ee3          	beq	a0,a1,8000581c <.LBB1_61+0x88>
    80005884:	b745                	j	80005824 <.LBB1_61+0x90>
                    return Err("[Error] vfs: Fail to read device")
    80005886:	65ea                	ld	a1,152(sp)

0000000080005888 <.LBB1_63>:
    80005888:	00020517          	auipc	a0,0x20
    8000588c:	ab250513          	addi	a0,a0,-1358 # 8002533a <.L__unnamed_11+0x11e>
    80005890:	e588                	sd	a0,8(a1)
    80005892:	02000513          	li	a0,32
    80005896:	e988                	sd	a0,16(a1)
    80005898:	4505                	li	a0,1
    8000589a:	e188                	sd	a0,0(a1)
    8000589c:	a261                	j	80005a24 <.LBB1_66+0xca>
                    DEVICE_LIST.table[self.major as usize].read()
    8000589e:	654a                	ld	a0,144(sp)
    800058a0:	02e51583          	lh	a1,46(a0)
    800058a4:	e8ae                	sd	a1,80(sp)
    800058a6:	4525                	li	a0,9
    800058a8:	1ab56763          	bltu	a0,a1,80005a56 <.LBB1_67+0x14>
    800058ac:	a009                	j	800058ae <.LBB1_63+0x26>
    800058ae:	6546                	ld	a0,80(sp)
    800058b0:	0512                	slli	a0,a0,0x4

00000000800058b2 <.LBB1_64>:
    800058b2:	0005c597          	auipc	a1,0x5c
    800058b6:	74e58593          	addi	a1,a1,1870 # 80062000 <_ZN6kernel2fs7devices11DEVICE_LIST17h17b7683da24e3570E>
    800058ba:	952e                	add	a0,a0,a1
    800058bc:	00000097          	auipc	ra,0x0
    800058c0:	9d8080e7          	jalr	-1576(ra) # 80005294 <_ZN6kernel2fs7devices6Device4read17h5487da2141591295E>
    800058c4:	85aa                	mv	a1,a0
    800058c6:	e4ae                	sd	a1,72(sp)
    800058c8:	f2aa                	sd	a0,352(sp)
    800058ca:	a009                	j	800058cc <.LBB1_64+0x1a>
                ret = read(true, addr, len).ok_or("Fail to read device")?;
    800058cc:	66a6                	ld	a3,72(sp)
    800058ce:	660a                	ld	a2,128(sp)
    800058d0:	65aa                	ld	a1,136(sp)
    800058d2:	4505                	li	a0,1
    800058d4:	9682                	jalr	a3
    800058d6:	fc2a                	sd	a0,56(sp)
    800058d8:	e0ae                	sd	a1,64(sp)
    800058da:	a009                	j	800058dc <.LBB1_64+0x2a>
    800058dc:	6606                	ld	a2,64(sp)
    800058de:	75e2                	ld	a1,56(sp)

00000000800058e0 <.LBB1_65>:
    800058e0:	00021697          	auipc	a3,0x21
    800058e4:	ae868693          	addi	a3,a3,-1304 # 800263c8 <.L__unnamed_7>
    800058e8:	0208                	addi	a0,sp,256
    800058ea:	474d                	li	a4,19
    800058ec:	00009097          	auipc	ra,0x9
    800058f0:	d3c080e7          	jalr	-708(ra) # 8000e628 <_ZN4core6option15Option$LT$T$GT$5ok_or17h436768d7af37ca52E>
    800058f4:	a009                	j	800058f6 <.LBB1_65+0x16>
    800058f6:	11a8                	addi	a0,sp,232
    800058f8:	020c                	addi	a1,sp,256
    800058fa:	00007097          	auipc	ra,0x7
    800058fe:	7d8080e7          	jalr	2008(ra) # 8000d0d2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h0dd4a8728df8a7c8E>
    80005902:	a009                	j	80005904 <.LBB1_65+0x24>
    80005904:	752e                	ld	a0,232(sp)
    80005906:	4581                	li	a1,0
    80005908:	00b50463          	beq	a0,a1,80005910 <.LBB1_65+0x30>
    8000590c:	a009                	j	8000590e <.LBB1_65+0x2e>
    8000590e:	a811                	j	80005922 <.LBB1_65+0x42>
    80005910:	65ea                	ld	a1,152(sp)
    80005912:	754e                	ld	a0,240(sp)
    80005914:	feaa                	sd	a0,376(sp)
    80005916:	f52a                	sd	a0,168(sp)
                return Ok(ret)
    80005918:	e588                	sd	a0,8(a1)
    8000591a:	4501                	li	a0,0
    8000591c:	e188                	sd	a0,0(a1)
    8000591e:	a219                	j	80005a24 <.LBB1_66+0xca>
                ret = read(true, addr, len).ok_or("Fail to read device")?;
    80005920:	0000                	unimp
    80005922:	754e                	ld	a0,240(sp)
    80005924:	75ee                	ld	a1,248(sp)
    80005926:	f6aa                	sd	a0,360(sp)
    80005928:	faae                	sd	a1,368(sp)
    8000592a:	00006097          	auipc	ra,0x6
    8000592e:	09a080e7          	jalr	154(ra) # 8000b9c4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h6f3e3843c20d184aE>
    80005932:	f42a                	sd	a0,40(sp)
    80005934:	f82e                	sd	a1,48(sp)
    80005936:	a009                	j	80005938 <.LBB1_65+0x58>
    80005938:	7642                	ld	a2,48(sp)
    8000593a:	75a2                	ld	a1,40(sp)
    8000593c:	656a                	ld	a0,152(sp)
    8000593e:	00007097          	auipc	ra,0x7
    80005942:	6c6080e7          	jalr	1734(ra) # 8000d004 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h4dd43adfe00292f6E>
    80005946:	a8f9                	j	80005a24 <.LBB1_66+0xca>
                let inode = self.inode.as_ref().unwrap();
    80005948:	654a                	ld	a0,144(sp)
    8000594a:	0541                	addi	a0,a0,16
    8000594c:	00009097          	auipc	ra,0x9
    80005950:	05c080e7          	jalr	92(ra) # 8000e9a8 <_ZN4core6option15Option$LT$T$GT$6as_ref17h883d1380e87d3449E>
    80005954:	f02a                	sd	a0,32(sp)
    80005956:	a009                	j	80005958 <.LBB1_65+0x78>
    80005958:	7502                	ld	a0,32(sp)

000000008000595a <.LBB1_66>:
    8000595a:	00021597          	auipc	a1,0x21
    8000595e:	a8658593          	addi	a1,a1,-1402 # 800263e0 <.L__unnamed_8>
    80005962:	00009097          	auipc	ra,0x9
    80005966:	3c6080e7          	jalr	966(ra) # 8000ed28 <_ZN4core6option15Option$LT$T$GT$6unwrap17h8e9f6f5582436d22E>
    8000596a:	85aa                	mv	a1,a0
    8000596c:	ec2e                	sd	a1,24(sp)
    8000596e:	e32a                	sd	a0,384(sp)
    80005970:	a009                	j	80005972 <.LBB1_66+0x18>
    80005972:	6562                	ld	a0,24(sp)
    80005974:	4585                	li	a1,1
                let mut inode_guard = inode.lock();
    80005976:	14b103a3          	sb	a1,327(sp)
    8000597a:	00015097          	auipc	ra,0x15
    8000597e:	386080e7          	jalr	902(ra) # 8001ad00 <_ZN6kernel2fs5inode5Inode4lock17he70970c593f751adE>
    80005982:	ee2a                	sd	a0,280(sp)
    80005984:	f22e                	sd	a1,288(sp)
    80005986:	a009                	j	80005988 <.LBB1_66+0x2e>
    80005988:	0a28                	addi	a0,sp,280
                match inode_guard.read(true, addr, self.offset, len as u32) {
    8000598a:	00018097          	auipc	ra,0x18
    8000598e:	b8a080e7          	jalr	-1142(ra) # 8001d514 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    80005992:	e82a                	sd	a0,16(sp)
    80005994:	a009                	j	80005996 <.LBB1_66+0x3c>
    80005996:	678a                	ld	a5,128(sp)
    80005998:	66aa                	ld	a3,136(sp)
    8000599a:	65c2                	ld	a1,16(sp)
    8000599c:	654a                	ld	a0,144(sp)
    8000599e:	5518                	lw	a4,40(a0)
    800059a0:	1228                	addi	a0,sp,296
    800059a2:	4605                	li	a2,1
    800059a4:	00014097          	auipc	ra,0x14
    800059a8:	76c080e7          	jalr	1900(ra) # 8001a110 <_ZN6kernel2fs5inode9InodeData4read17h2d02dc0e430e4837E>
    800059ac:	a009                	j	800059ae <.LBB1_66+0x54>
                    Ok(size) => {
    800059ae:	7532                	ld	a0,296(sp)
    800059b0:	4581                	li	a1,0
    800059b2:	00b50e63          	beq	a0,a1,800059ce <.LBB1_66+0x74>
    800059b6:	a009                	j	800059b8 <.LBB1_66+0x5e>
                    Err(err) => {
    800059b8:	65ea                	ld	a1,152(sp)
    800059ba:	7652                	ld	a2,304(sp)
    800059bc:	7572                	ld	a0,312(sp)
    800059be:	e732                	sd	a2,392(sp)
    800059c0:	eb2a                	sd	a0,400(sp)
                        Err(err)
    800059c2:	e590                	sd	a2,8(a1)
    800059c4:	e988                	sd	a0,16(a1)
    800059c6:	4505                	li	a0,1
    800059c8:	e188                	sd	a0,0(a1)
                match inode_guard.read(true, addr, self.offset, len as u32) {
    800059ca:	a0b5                	j	80005a36 <.LBB1_66+0xdc>
    800059cc:	0000                	unimp
                    Ok(size) => {
    800059ce:	654a                	ld	a0,144(sp)
    800059d0:	75d2                	ld	a1,304(sp)
    800059d2:	ef2e                	sd	a1,408(sp)
                        ret = size;
    800059d4:	f52e                	sd	a1,168(sp)
                        let offset = unsafe { &mut *(&self.offset as *const _ as *mut u32)};
    800059d6:	02850613          	addi	a2,a0,40
    800059da:	e032                	sd	a2,0(sp)
    800059dc:	f332                	sd	a2,416(sp)
                        *offset += ret as u32;
    800059de:	1582                	slli	a1,a1,0x20
    800059e0:	9181                	srli	a1,a1,0x20
    800059e2:	02856503          	lwu	a0,40(a0)
    800059e6:	95aa                	add	a1,a1,a0
    800059e8:	e42e                	sd	a1,8(sp)
    800059ea:	02059513          	slli	a0,a1,0x20
    800059ee:	9101                	srli	a0,a0,0x20
    800059f0:	06b51e63          	bne	a0,a1,80005a6c <.LBB1_69>
    800059f4:	a009                	j	800059f6 <.LBB1_66+0x9c>
    800059f6:	6522                	ld	a0,8(sp)
    800059f8:	6582                	ld	a1,0(sp)
    800059fa:	c188                	sw	a0,0(a1)
    800059fc:	4501                	li	a0,0
                        drop(inode_guard);
    800059fe:	14a103a3          	sb	a0,327(sp)
    80005a02:	6572                	ld	a0,280(sp)
    80005a04:	7592                	ld	a1,288(sp)
    80005a06:	00017097          	auipc	ra,0x17
    80005a0a:	4ac080e7          	jalr	1196(ra) # 8001ceb2 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    80005a0e:	a009                	j	80005a10 <.LBB1_66+0xb6>
                        Ok(ret)
    80005a10:	65ea                	ld	a1,152(sp)
    80005a12:	752a                	ld	a0,168(sp)
    80005a14:	e588                	sd	a0,8(a1)
    80005a16:	4501                	li	a0,0
    80005a18:	e188                	sd	a0,0(a1)
                match inode_guard.read(true, addr, self.offset, len as u32) {
    80005a1a:	a831                	j	80005a36 <.LBB1_66+0xdc>
    80005a1c:	4501                	li	a0,0
            },
    80005a1e:	14a103a3          	sb	a0,327(sp)
            },
        }
    }
    80005a22:	a009                	j	80005a24 <.LBB1_66+0xca>
    80005a24:	60be                	ld	ra,456(sp)
    80005a26:	6179                	addi	sp,sp,464
    80005a28:	8082                	ret
    80005a2a:	0a28                	addi	a0,sp,280
            },
    80005a2c:	00001097          	auipc	ra,0x1
    80005a30:	682080e7          	jalr	1666(ra) # 800070ae <_ZN4core3ptr96drop_in_place$LT$kernel..lock..sleeplock..SleepLockGuard$LT$kernel..fs..inode..InodeData$GT$$GT$17h00d5c02cf687ef41E>
    80005a34:	b7e5                	j	80005a1c <.LBB1_66+0xc2>
    80005a36:	14714503          	lbu	a0,327(sp)
    80005a3a:	8905                	andi	a0,a0,1
    80005a3c:	f57d                	bnez	a0,80005a2a <.LBB1_66+0xd0>
    80005a3e:	bff9                	j	80005a1c <.LBB1_66+0xc2>
                unsafe{ DEVICE_LIST.table[self.major as usize].read as usize == 0 }{
    80005a40:	6566                	ld	a0,88(sp)

0000000080005a42 <.LBB1_67>:
    80005a42:	00021617          	auipc	a2,0x21
    80005a46:	95660613          	addi	a2,a2,-1706 # 80026398 <.L__unnamed_9>
    80005a4a:	45a9                	li	a1,10
    80005a4c:	0001c097          	auipc	ra,0x1c
    80005a50:	6dc080e7          	jalr	1756(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80005a54:	0000                	unimp
                    DEVICE_LIST.table[self.major as usize].read()
    80005a56:	6546                	ld	a0,80(sp)

0000000080005a58 <.LBB1_68>:
    80005a58:	00021617          	auipc	a2,0x21
    80005a5c:	95860613          	addi	a2,a2,-1704 # 800263b0 <.L__unnamed_10>
    80005a60:	45a9                	li	a1,10
    80005a62:	0001c097          	auipc	ra,0x1c
    80005a66:	6c6080e7          	jalr	1734(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

0000000080005a6c <.LBB1_69>:
                        *offset += ret as u32;
    80005a6c:	00021517          	auipc	a0,0x21
    80005a70:	9a450513          	addi	a0,a0,-1628 # 80026410 <str.0>

0000000080005a74 <.LBB1_70>:
    80005a74:	00021617          	auipc	a2,0x21
    80005a78:	98460613          	addi	a2,a2,-1660 # 800263f8 <.L__unnamed_11>
    80005a7c:	45f1                	li	a1,28
    80005a7e:	0001c097          	auipc	ra,0x1c
    80005a82:	67e080e7          	jalr	1662(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel2fs4file5VFile5write17h6504f6f101707b61E:

0000000080005a88 <_ZN6kernel2fs4file5VFile5write17h6504f6f101707b61E>:

    /// Write to file f. 
    /// addr is a user virtual address.
    pub fn write(
    80005a88:	d5010113          	addi	sp,sp,-688
    80005a8c:	2a113423          	sd	ra,680(sp)
    80005a90:	edae                	sd	a1,216(sp)
    80005a92:	85aa                	mv	a1,a0
    80005a94:	656e                	ld	a0,216(sp)
    80005a96:	f1ae                	sd	a1,224(sp)
    80005a98:	f9b2                	sd	a2,240(sp)
    80005a9a:	fdb6                	sd	a3,248(sp)
    80005a9c:	22a13023          	sd	a0,544(sp)
        &self, 
        addr: usize, 
        len: usize
    ) -> Result<usize, &'static str> {
        let ret; 
        if !self.writeable() {
    80005aa0:	00000097          	auipc	ra,0x0
    80005aa4:	4f2080e7          	jalr	1266(ra) # 80005f92 <_ZN6kernel2fs4file5VFile9writeable17h876bce4459deb027E>
    80005aa8:	f5aa                	sd	a0,232(sp)
    80005aaa:	a009                	j	80005aac <_ZN6kernel2fs4file5VFile5write17h6504f6f101707b61E+0x24>
    80005aac:	752e                	ld	a0,232(sp)
    80005aae:	e105                	bnez	a0,80005ace <.LBB2_76+0x14>
    80005ab0:	a009                	j	80005ab2 <.LBB2_75>

0000000080005ab2 <.LBB2_75>:
            panic!("file can't be written")
    80005ab2:	00021517          	auipc	a0,0x21
    80005ab6:	99650513          	addi	a0,a0,-1642 # 80026448 <.L__unnamed_12>

0000000080005aba <.LBB2_76>:
    80005aba:	00021617          	auipc	a2,0x21
    80005abe:	9a660613          	addi	a2,a2,-1626 # 80026460 <.L__unnamed_13>
    80005ac2:	45d5                	li	a1,21
    80005ac4:	0001c097          	auipc	ra,0x1c
    80005ac8:	638080e7          	jalr	1592(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80005acc:	0000                	unimp
        }
        
        match self.ftype {
            FileType::Pipe => {
    80005ace:	656e                	ld	a0,216(sp)
    80005ad0:	02c55503          	lhu	a0,44(a0)
    80005ad4:	e9aa                	sd	a0,208(sp)
    80005ad6:	4585                	li	a1,1
    80005ad8:	02b50b63          	beq	a0,a1,80005b0e <.LBB2_78+0x14>
    80005adc:	a009                	j	80005ade <.LBB2_76+0x24>
    80005ade:	654e                	ld	a0,208(sp)
    80005ae0:	4589                	li	a1,2
    80005ae2:	26b50763          	beq	a0,a1,80005d50 <.LBB2_86+0x6e>
    80005ae6:	a009                	j	80005ae8 <.LBB2_76+0x2e>
    80005ae8:	654e                	ld	a0,208(sp)
    80005aea:	458d                	li	a1,3
    80005aec:	12b50163          	beq	a0,a1,80005c0e <.LBB2_82+0x90>
    80005af0:	a009                	j	80005af2 <.LBB2_77>

0000000080005af2 <.LBB2_77>:
                ret = count;
                Ok(ret)
            },

            _ => {
                panic!("Invalid File Type!")
    80005af2:	00021517          	auipc	a0,0x21
    80005af6:	98650513          	addi	a0,a0,-1658 # 80026478 <.L__unnamed_14>

0000000080005afa <.LBB2_78>:
    80005afa:	00021617          	auipc	a2,0x21
    80005afe:	99660613          	addi	a2,a2,-1642 # 80026490 <.L__unnamed_15>
    80005b02:	45c9                	li	a1,18
    80005b04:	0001c097          	auipc	ra,0x1c
    80005b08:	5f8080e7          	jalr	1528(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80005b0c:	0000                	unimp
                let pipe = unsafe{ &*self.pipe.unwrap() };
    80005b0e:	65ee                	ld	a1,216(sp)
    80005b10:	6188                	ld	a0,0(a1)
    80005b12:	658c                	ld	a1,8(a1)

0000000080005b14 <.LBB2_79>:
    80005b14:	00021617          	auipc	a2,0x21
    80005b18:	a9460613          	addi	a2,a2,-1388 # 800265a8 <.L__unnamed_16>
    80005b1c:	00009097          	auipc	ra,0x9
    80005b20:	ff0080e7          	jalr	-16(ra) # 8000eb0c <_ZN4core6option15Option$LT$T$GT$6unwrap17h1e3cd39cfed0614fE>
    80005b24:	e5aa                	sd	a0,200(sp)
    80005b26:	a009                	j	80005b28 <.LBB2_79+0x14>
    80005b28:	652e                	ld	a0,200(sp)
    80005b2a:	26a13c23          	sd	a0,632(sp)
    80005b2e:	1988                	addi	a0,sp,240
                println!("))) {} {} ", addr, len);
    80005b30:	eeaa                	sd	a0,344(sp)
    80005b32:	19ac                	addi	a1,sp,248
    80005b34:	f92e                	sd	a1,176(sp)
    80005b36:	f2ae                	sd	a1,352(sp)
    80005b38:	28a13023          	sd	a0,640(sp)
    80005b3c:	28b13423          	sd	a1,648(sp)

0000000080005b40 <.LBB2_80>:
    80005b40:	0001f597          	auipc	a1,0x1f
    80005b44:	d1858593          	addi	a1,a1,-744 # 80024858 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h9c6c4af1578f7c29E>
    80005b48:	0001a097          	auipc	ra,0x1a
    80005b4c:	9de080e7          	jalr	-1570(ra) # 8001f526 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    80005b50:	fd2a                	sd	a0,184(sp)
    80005b52:	e1ae                	sd	a1,192(sp)
    80005b54:	a009                	j	80005b56 <.LBB2_80+0x16>
    80005b56:	754a                	ld	a0,176(sp)

0000000080005b58 <.LBB2_81>:
    80005b58:	0001f597          	auipc	a1,0x1f
    80005b5c:	d0058593          	addi	a1,a1,-768 # 80024858 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h9c6c4af1578f7c29E>
    80005b60:	0001a097          	auipc	ra,0x1a
    80005b64:	9c6080e7          	jalr	-1594(ra) # 8001f526 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    80005b68:	f12a                	sd	a0,160(sp)
    80005b6a:	f52e                	sd	a1,168(sp)
    80005b6c:	a009                	j	80005b6e <.LBB2_81+0x16>
    80005b6e:	752a                	ld	a0,168(sp)
    80005b70:	758a                	ld	a1,160(sp)
    80005b72:	660e                	ld	a2,192(sp)
    80005b74:	76ea                	ld	a3,184(sp)
    80005b76:	fe36                	sd	a3,312(sp)
    80005b78:	e2b2                	sd	a2,320(sp)
    80005b7a:	e6ae                	sd	a1,328(sp)
    80005b7c:	eaaa                	sd	a0,336(sp)

0000000080005b7e <.LBB2_82>:
    80005b7e:	00021597          	auipc	a1,0x21
    80005b82:	a7a58593          	addi	a1,a1,-1414 # 800265f8 <.L__unnamed_17>
    80005b86:	0228                	addi	a0,sp,264
    80005b88:	460d                	li	a2,3
    80005b8a:	1a34                	addi	a3,sp,312
    80005b8c:	4709                	li	a4,2
    80005b8e:	00000097          	auipc	ra,0x0
    80005b92:	8a6080e7          	jalr	-1882(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80005b96:	a009                	j	80005b98 <.LBB2_82+0x1a>
    80005b98:	0228                	addi	a0,sp,264
    80005b9a:	00018097          	auipc	ra,0x18
    80005b9e:	016080e7          	jalr	22(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    80005ba2:	a009                	j	80005ba4 <.LBB2_82+0x26>
                ret = pipe.write(addr, len)?;
    80005ba4:	65ae                	ld	a1,200(sp)
    80005ba6:	764e                	ld	a2,240(sp)
    80005ba8:	76ee                	ld	a3,248(sp)
    80005baa:	0308                	addi	a0,sp,384
    80005bac:	00005097          	auipc	ra,0x5
    80005bb0:	834080e7          	jalr	-1996(ra) # 8000a3e0 <_ZN6kernel2fs4pipe4Pipe5write17h81e33cf4c0f9044aE>
    80005bb4:	a009                	j	80005bb6 <.LBB2_82+0x38>
    80005bb6:	12a8                	addi	a0,sp,360
    80005bb8:	030c                	addi	a1,sp,384
    80005bba:	00007097          	auipc	ra,0x7
    80005bbe:	518080e7          	jalr	1304(ra) # 8000d0d2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h0dd4a8728df8a7c8E>
    80005bc2:	a009                	j	80005bc4 <.LBB2_82+0x46>
    80005bc4:	7536                	ld	a0,360(sp)
    80005bc6:	4581                	li	a1,0
    80005bc8:	00b50463          	beq	a0,a1,80005bd0 <.LBB2_82+0x52>
    80005bcc:	a009                	j	80005bce <.LBB2_82+0x50>
    80005bce:	a819                	j	80005be4 <.LBB2_82+0x66>
    80005bd0:	758e                	ld	a1,224(sp)
    80005bd2:	7556                	ld	a0,368(sp)
    80005bd4:	2aa13023          	sd	a0,672(sp)
    80005bd8:	e22a                	sd	a0,256(sp)
                Ok(ret)
    80005bda:	e588                	sd	a0,8(a1)
    80005bdc:	4501                	li	a0,0
    80005bde:	e188                	sd	a0,0(a1)
        match self.ftype {
    80005be0:	acfd                	j	80005ede <.LBB2_89+0x50>
                ret = pipe.write(addr, len)?;
    80005be2:	0000                	unimp
    80005be4:	7556                	ld	a0,368(sp)
    80005be6:	75f6                	ld	a1,376(sp)
    80005be8:	28a13823          	sd	a0,656(sp)
    80005bec:	28b13c23          	sd	a1,664(sp)
    80005bf0:	00006097          	auipc	ra,0x6
    80005bf4:	dd4080e7          	jalr	-556(ra) # 8000b9c4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h6f3e3843c20d184aE>
    80005bf8:	e92a                	sd	a0,144(sp)
    80005bfa:	ed2e                	sd	a1,152(sp)
    80005bfc:	a009                	j	80005bfe <.LBB2_82+0x80>
    80005bfe:	666a                	ld	a2,152(sp)
    80005c00:	65ca                	ld	a1,144(sp)
    80005c02:	750e                	ld	a0,224(sp)
    80005c04:	00007097          	auipc	ra,0x7
    80005c08:	400080e7          	jalr	1024(ra) # 8000d004 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h4dd43adfe00292f6E>
    80005c0c:	acc9                	j	80005ede <.LBB2_89+0x50>
                if self.major < 0 || 
    80005c0e:	656e                	ld	a0,216(sp)
    80005c10:	02e51503          	lh	a0,46(a0)
    80005c14:	4581                	li	a1,0
    80005c16:	02b54863          	blt	a0,a1,80005c46 <.LBB2_82+0xc8>
    80005c1a:	a835                	j	80005c56 <.LBB2_82+0xd8>
    80005c1c:	4505                	li	a0,1
    80005c1e:	18a10f23          	sb	a0,414(sp)
    80005c22:	a829                	j	80005c3c <.LBB2_82+0xbe>
    80005c24:	4501                	li	a0,0
    80005c26:	18a10f23          	sb	a0,414(sp)
    80005c2a:	a809                	j	80005c3c <.LBB2_82+0xbe>
                unsafe{ DEVICE_LIST.table[self.major as usize].write as usize == 0 } {
    80005c2c:	656e                	ld	a0,216(sp)
    80005c2e:	02e51503          	lh	a0,46(a0)
    80005c32:	e52a                	sd	a0,136(sp)
    80005c34:	45a9                	li	a1,10
    80005c36:	02b56c63          	bltu	a0,a1,80005c6e <.LBB2_82+0xf0>
    80005c3a:	a47d                	j	80005ee8 <.LBB2_89+0x5a>
                if self.major < 0 || 
    80005c3c:	19e14503          	lbu	a0,414(sp)
    80005c40:	8905                	andi	a0,a0,1
    80005c42:	e139                	bnez	a0,80005c88 <.LBB2_83+0x14>
    80005c44:	a8a9                	j	80005c9e <.LBB2_84+0x14>
    80005c46:	4505                	li	a0,1
    80005c48:	18a10fa3          	sb	a0,415(sp)
    80005c4c:	a821                	j	80005c64 <.LBB2_82+0xe6>
    80005c4e:	4501                	li	a0,0
    80005c50:	18a10fa3          	sb	a0,415(sp)
    80005c54:	a801                	j	80005c64 <.LBB2_82+0xe6>
                self.major as usize >= NDEV || 
    80005c56:	656e                	ld	a0,216(sp)
    80005c58:	02e51583          	lh	a1,46(a0)
    80005c5c:	4525                	li	a0,9
                if self.major < 0 || 
    80005c5e:	feb564e3          	bltu	a0,a1,80005c46 <.LBB2_82+0xc8>
    80005c62:	b7f5                	j	80005c4e <.LBB2_82+0xd0>
    80005c64:	19f14503          	lbu	a0,415(sp)
    80005c68:	8905                	andi	a0,a0,1
    80005c6a:	f94d                	bnez	a0,80005c1c <.LBB2_82+0x9e>
    80005c6c:	b7c1                	j	80005c2c <.LBB2_82+0xae>
                unsafe{ DEVICE_LIST.table[self.major as usize].write as usize == 0 } {
    80005c6e:	652a                	ld	a0,136(sp)
    80005c70:	00451593          	slli	a1,a0,0x4

0000000080005c74 <.LBB2_83>:
    80005c74:	0005c517          	auipc	a0,0x5c
    80005c78:	38c50513          	addi	a0,a0,908 # 80062000 <_ZN6kernel2fs7devices11DEVICE_LIST17h17b7683da24e3570E>
    80005c7c:	952e                	add	a0,a0,a1
    80005c7e:	6508                	ld	a0,8(a0)
    80005c80:	4581                	li	a1,0
                if self.major < 0 || 
    80005c82:	f8b50de3          	beq	a0,a1,80005c1c <.LBB2_82+0x9e>
    80005c86:	bf79                	j	80005c24 <.LBB2_82+0xa6>
                    return Err("Fail to write to device")
    80005c88:	758e                	ld	a1,224(sp)

0000000080005c8a <.LBB2_84>:
    80005c8a:	00021517          	auipc	a0,0x21
    80005c8e:	83650513          	addi	a0,a0,-1994 # 800264c0 <.L__unnamed_18>
    80005c92:	e588                	sd	a0,8(a1)
    80005c94:	455d                	li	a0,23
    80005c96:	e988                	sd	a0,16(a1)
    80005c98:	4505                	li	a0,1
    80005c9a:	e188                	sd	a0,0(a1)
    80005c9c:	a489                	j	80005ede <.LBB2_89+0x50>
                    DEVICE_LIST.table[self.major as usize].write()
    80005c9e:	656e                	ld	a0,216(sp)
    80005ca0:	02e51583          	lh	a1,46(a0)
    80005ca4:	e12e                	sd	a1,128(sp)
    80005ca6:	4525                	li	a0,9
    80005ca8:	24b56b63          	bltu	a0,a1,80005efe <.LBB2_90+0x14>
    80005cac:	a009                	j	80005cae <.LBB2_84+0x24>
    80005cae:	650a                	ld	a0,128(sp)
    80005cb0:	0512                	slli	a0,a0,0x4

0000000080005cb2 <.LBB2_85>:
    80005cb2:	0005c597          	auipc	a1,0x5c
    80005cb6:	34e58593          	addi	a1,a1,846 # 80062000 <_ZN6kernel2fs7devices11DEVICE_LIST17h17b7683da24e3570E>
    80005cba:	952e                	add	a0,a0,a1
    80005cbc:	fffff097          	auipc	ra,0xfffff
    80005cc0:	5ec080e7          	jalr	1516(ra) # 800052a8 <_ZN6kernel2fs7devices6Device5write17hdacd5bd8b779c8b1E>
    80005cc4:	85aa                	mv	a1,a0
    80005cc6:	fcae                	sd	a1,120(sp)
    80005cc8:	22a13423          	sd	a0,552(sp)
    80005ccc:	a009                	j	80005cce <.LBB2_85+0x1c>
                ret = write(true, addr, len).ok_or("Fail to write device")?;
    80005cce:	76e6                	ld	a3,120(sp)
    80005cd0:	75ce                	ld	a1,240(sp)
    80005cd2:	766e                	ld	a2,248(sp)
    80005cd4:	4505                	li	a0,1
    80005cd6:	9682                	jalr	a3
    80005cd8:	f4aa                	sd	a0,104(sp)
    80005cda:	f8ae                	sd	a1,112(sp)
    80005cdc:	a009                	j	80005cde <.LBB2_85+0x2c>
    80005cde:	7646                	ld	a2,112(sp)
    80005ce0:	75a6                	ld	a1,104(sp)

0000000080005ce2 <.LBB2_86>:
    80005ce2:	00021697          	auipc	a3,0x21
    80005ce6:	80e68693          	addi	a3,a3,-2034 # 800264f0 <.L__unnamed_19>
    80005cea:	1b28                	addi	a0,sp,440
    80005cec:	4751                	li	a4,20
    80005cee:	00009097          	auipc	ra,0x9
    80005cf2:	93a080e7          	jalr	-1734(ra) # 8000e628 <_ZN4core6option15Option$LT$T$GT$5ok_or17h436768d7af37ca52E>
    80005cf6:	a009                	j	80005cf8 <.LBB2_86+0x16>
    80005cf8:	1308                	addi	a0,sp,416
    80005cfa:	1b2c                	addi	a1,sp,440
    80005cfc:	00007097          	auipc	ra,0x7
    80005d00:	3d6080e7          	jalr	982(ra) # 8000d0d2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h0dd4a8728df8a7c8E>
    80005d04:	a009                	j	80005d06 <.LBB2_86+0x24>
    80005d06:	751a                	ld	a0,416(sp)
    80005d08:	4581                	li	a1,0
    80005d0a:	00b50463          	beq	a0,a1,80005d12 <.LBB2_86+0x30>
    80005d0e:	a009                	j	80005d10 <.LBB2_86+0x2e>
    80005d10:	a819                	j	80005d26 <.LBB2_86+0x44>
    80005d12:	758e                	ld	a1,224(sp)
    80005d14:	753a                	ld	a0,424(sp)
    80005d16:	24a13023          	sd	a0,576(sp)
    80005d1a:	e22a                	sd	a0,256(sp)
                Ok(ret)
    80005d1c:	e588                	sd	a0,8(a1)
    80005d1e:	4501                	li	a0,0
    80005d20:	e188                	sd	a0,0(a1)
        match self.ftype {
    80005d22:	aa75                	j	80005ede <.LBB2_89+0x50>
                ret = write(true, addr, len).ok_or("Fail to write device")?;
    80005d24:	0000                	unimp
    80005d26:	753a                	ld	a0,424(sp)
    80005d28:	75da                	ld	a1,432(sp)
    80005d2a:	22a13823          	sd	a0,560(sp)
    80005d2e:	22b13c23          	sd	a1,568(sp)
    80005d32:	00006097          	auipc	ra,0x6
    80005d36:	c92080e7          	jalr	-878(ra) # 8000b9c4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h6f3e3843c20d184aE>
    80005d3a:	ecaa                	sd	a0,88(sp)
    80005d3c:	f0ae                	sd	a1,96(sp)
    80005d3e:	a009                	j	80005d40 <.LBB2_86+0x5e>
    80005d40:	7606                	ld	a2,96(sp)
    80005d42:	65e6                	ld	a1,88(sp)
    80005d44:	750e                	ld	a0,224(sp)
    80005d46:	00007097          	auipc	ra,0x7
    80005d4a:	2be080e7          	jalr	702(ra) # 8000d004 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h4dd43adfe00292f6E>
    80005d4e:	aa41                	j	80005ede <.LBB2_89+0x50>
    80005d50:	6505                	lui	a0,0x1
    80005d52:	c005051b          	addiw	a0,a0,-1024
                let max = ((MAXOPBLOCKS -1 -1 -2) / 2) * BSIZE;
    80005d56:	24a13423          	sd	a0,584(sp)
    80005d5a:	4501                	li	a0,0
                let mut count  = 0;
    80005d5c:	ebaa                	sd	a0,464(sp)
                while count < len {
    80005d5e:	a009                	j	80005d60 <.LBB2_86+0x7e>
    80005d60:	655e                	ld	a0,464(sp)
    80005d62:	75ee                	ld	a1,248(sp)
    80005d64:	00b56a63          	bltu	a0,a1,80005d78 <.LBB2_86+0x96>
    80005d68:	a009                	j	80005d6a <.LBB2_86+0x88>
                ret = count;
    80005d6a:	758e                	ld	a1,224(sp)
    80005d6c:	655e                	ld	a0,464(sp)
    80005d6e:	e22a                	sd	a0,256(sp)
                Ok(ret)
    80005d70:	e588                	sd	a0,8(a1)
    80005d72:	4501                	li	a0,0
    80005d74:	e188                	sd	a0,0(a1)
        match self.ftype {
    80005d76:	a2a5                	j	80005ede <.LBB2_89+0x50>
                    let mut write_bytes = len - count;
    80005d78:	756e                	ld	a0,248(sp)
    80005d7a:	65de                	ld	a1,464(sp)
    80005d7c:	40b505b3          	sub	a1,a0,a1
    80005d80:	e8ae                	sd	a1,80(sp)
    80005d82:	18b56963          	bltu	a0,a1,80005f14 <.LBB2_92>
    80005d86:	a009                	j	80005d88 <.LBB2_86+0xa6>
    80005d88:	6546                	ld	a0,80(sp)
    80005d8a:	efaa                	sd	a0,472(sp)
    80005d8c:	6585                	lui	a1,0x1
    80005d8e:	c015859b          	addiw	a1,a1,-1023
                    if write_bytes > max { write_bytes = max; }
    80005d92:	00b56863          	bltu	a0,a1,80005da2 <.LBB2_86+0xc0>
    80005d96:	a009                	j	80005d98 <.LBB2_86+0xb6>
    80005d98:	6505                	lui	a0,0x1
    80005d9a:	c005051b          	addiw	a0,a0,-1024
    80005d9e:	efaa                	sd	a0,472(sp)
    80005da0:	a011                	j	80005da4 <.LBB2_87>
    80005da2:	a009                	j	80005da4 <.LBB2_87>

0000000080005da4 <.LBB2_87>:
                    LOG.begin_op();
    80005da4:	00054517          	auipc	a0,0x54
    80005da8:	8c450513          	addi	a0,a0,-1852 # 80059668 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    80005dac:	00003097          	auipc	ra,0x3
    80005db0:	e50080e7          	jalr	-432(ra) # 80008bfc <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$8begin_op17he5b49a48c716e372E>
    80005db4:	a009                	j	80005db6 <.LBB2_87+0x12>
                    let inode = self.inode.as_ref().unwrap();
    80005db6:	656e                	ld	a0,216(sp)
    80005db8:	0541                	addi	a0,a0,16
    80005dba:	00009097          	auipc	ra,0x9
    80005dbe:	bee080e7          	jalr	-1042(ra) # 8000e9a8 <_ZN4core6option15Option$LT$T$GT$6as_ref17h883d1380e87d3449E>
    80005dc2:	e4aa                	sd	a0,72(sp)
    80005dc4:	a009                	j	80005dc6 <.LBB2_87+0x22>
    80005dc6:	6526                	ld	a0,72(sp)

0000000080005dc8 <.LBB2_88>:
    80005dc8:	00020597          	auipc	a1,0x20
    80005dcc:	78058593          	addi	a1,a1,1920 # 80026548 <.L__unnamed_20>
    80005dd0:	00009097          	auipc	ra,0x9
    80005dd4:	f58080e7          	jalr	-168(ra) # 8000ed28 <_ZN4core6option15Option$LT$T$GT$6unwrap17h8e9f6f5582436d22E>
    80005dd8:	85aa                	mv	a1,a0
    80005dda:	e0ae                	sd	a1,64(sp)
    80005ddc:	24a13823          	sd	a0,592(sp)
    80005de0:	a009                	j	80005de2 <.LBB2_88+0x1a>
                    let mut inode_guard = inode.lock();
    80005de2:	6506                	ld	a0,64(sp)
    80005de4:	00015097          	auipc	ra,0x15
    80005de8:	f1c080e7          	jalr	-228(ra) # 8001ad00 <_ZN6kernel2fs5inode5Inode4lock17he70970c593f751adE>
    80005dec:	f3aa                	sd	a0,480(sp)
    80005dee:	f7ae                	sd	a1,488(sp)
    80005df0:	a009                	j	80005df2 <.LBB2_88+0x2a>
    80005df2:	1388                	addi	a0,sp,480
                    inode_guard.write(
    80005df4:	00017097          	auipc	ra,0x17
    80005df8:	720080e7          	jalr	1824(ra) # 8001d514 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    80005dfc:	fc2a                	sd	a0,56(sp)
    80005dfe:	a009                	j	80005e00 <.LBB2_88+0x38>
                        addr + count, 
    80005e00:	75ce                	ld	a1,240(sp)
    80005e02:	655e                	ld	a0,464(sp)
    80005e04:	952e                	add	a0,a0,a1
    80005e06:	f82a                	sd	a0,48(sp)
    80005e08:	12b56563          	bltu	a0,a1,80005f32 <.LBB2_94>
    80005e0c:	a009                	j	80005e0e <.LBB2_88+0x46>
                        write_bytes as u32
    80005e0e:	76c2                	ld	a3,48(sp)
    80005e10:	75e2                	ld	a1,56(sp)
    80005e12:	656e                	ld	a0,216(sp)
    80005e14:	67fe                	ld	a5,472(sp)
                    inode_guard.write(
    80005e16:	5518                	lw	a4,40(a0)
    80005e18:	0428                	addi	a0,sp,520
    80005e1a:	4605                	li	a2,1
    80005e1c:	00014097          	auipc	ra,0x14
    80005e20:	646080e7          	jalr	1606(ra) # 8001a462 <_ZN6kernel2fs5inode9InodeData5write17h219447b865f1c381E>
    80005e24:	a009                	j	80005e26 <.LBB2_88+0x5e>
    80005e26:	1b88                	addi	a0,sp,496
    80005e28:	042c                	addi	a1,sp,520
    80005e2a:	00007097          	auipc	ra,0x7
    80005e2e:	2a8080e7          	jalr	680(ra) # 8000d0d2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h0dd4a8728df8a7c8E>
    80005e32:	a009                	j	80005e34 <.LBB2_88+0x6c>
                    )?;
    80005e34:	755e                	ld	a0,496(sp)
    80005e36:	4581                	li	a1,0
    80005e38:	00b50463          	beq	a0,a1,80005e40 <.LBB2_88+0x78>
    80005e3c:	a009                	j	80005e3e <.LBB2_88+0x76>
    80005e3e:	a821                	j	80005e56 <.LBB2_88+0x8e>
                    inode_guard.write(
    80005e40:	757e                	ld	a0,504(sp)
    80005e42:	26a13423          	sd	a0,616(sp)
                    drop(inode_guard);
    80005e46:	751e                	ld	a0,480(sp)
    80005e48:	75be                	ld	a1,488(sp)
    80005e4a:	00017097          	auipc	ra,0x17
    80005e4e:	068080e7          	jalr	104(ra) # 8001ceb2 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    80005e52:	a835                	j	80005e8e <.LBB2_89>
                    inode_guard.write(
    80005e54:	0000                	unimp
                    )?;
    80005e56:	757e                	ld	a0,504(sp)
    80005e58:	20013583          	ld	a1,512(sp)
    80005e5c:	24a13c23          	sd	a0,600(sp)
    80005e60:	26b13023          	sd	a1,608(sp)
    80005e64:	00006097          	auipc	ra,0x6
    80005e68:	b60080e7          	jalr	-1184(ra) # 8000b9c4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h6f3e3843c20d184aE>
    80005e6c:	f02a                	sd	a0,32(sp)
    80005e6e:	f42e                	sd	a1,40(sp)
    80005e70:	a009                	j	80005e72 <.LBB2_88+0xaa>
                    inode_guard.write(
    80005e72:	7622                	ld	a2,40(sp)
    80005e74:	7582                	ld	a1,32(sp)
    80005e76:	750e                	ld	a0,224(sp)
    80005e78:	00007097          	auipc	ra,0x7
    80005e7c:	18c080e7          	jalr	396(ra) # 8000d004 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h4dd43adfe00292f6E>
    80005e80:	a009                	j	80005e82 <.LBB2_88+0xba>
    80005e82:	1388                	addi	a0,sp,480
                }
    80005e84:	00001097          	auipc	ra,0x1
    80005e88:	22a080e7          	jalr	554(ra) # 800070ae <_ZN4core3ptr96drop_in_place$LT$kernel..lock..sleeplock..SleepLockGuard$LT$kernel..fs..inode..InodeData$GT$$GT$17h00d5c02cf687ef41E>
    80005e8c:	a889                	j	80005ede <.LBB2_89+0x50>

0000000080005e8e <.LBB2_89>:
                    LOG.end_op();
    80005e8e:	00053517          	auipc	a0,0x53
    80005e92:	7da50513          	addi	a0,a0,2010 # 80059668 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    80005e96:	00003097          	auipc	ra,0x3
    80005e9a:	34c080e7          	jalr	844(ra) # 800091e2 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>
    80005e9e:	a009                	j	80005ea0 <.LBB2_89+0x12>
                    let offset = unsafe{ &mut *(&self.offset as *const _ as *mut u32) };
    80005ea0:	656e                	ld	a0,216(sp)
    80005ea2:	02850593          	addi	a1,a0,40
    80005ea6:	e82e                	sd	a1,16(sp)
    80005ea8:	26b13823          	sd	a1,624(sp)
                    *offset += write_bytes as u32;
    80005eac:	1d816583          	lwu	a1,472(sp)
    80005eb0:	02856503          	lwu	a0,40(a0)
    80005eb4:	95aa                	add	a1,a1,a0
    80005eb6:	ec2e                	sd	a1,24(sp)
    80005eb8:	02059513          	slli	a0,a1,0x20
    80005ebc:	9101                	srli	a0,a0,0x20
    80005ebe:	08b51863          	bne	a0,a1,80005f4e <.LBB2_96>
    80005ec2:	a009                	j	80005ec4 <.LBB2_89+0x36>
    80005ec4:	6562                	ld	a0,24(sp)
    80005ec6:	65c2                	ld	a1,16(sp)
    80005ec8:	c188                	sw	a0,0(a1)
                    count += write_bytes;
    80005eca:	657e                	ld	a0,472(sp)
    80005ecc:	65de                	ld	a1,464(sp)
    80005ece:	952e                	add	a0,a0,a1
    80005ed0:	e42a                	sd	a0,8(sp)
    80005ed2:	08b56c63          	bltu	a0,a1,80005f6a <.LBB2_98>
    80005ed6:	a009                	j	80005ed8 <.LBB2_89+0x4a>
    80005ed8:	6522                	ld	a0,8(sp)
    80005eda:	ebaa                	sd	a0,464(sp)
                while count < len {
    80005edc:	b551                	j	80005d60 <.LBB2_86+0x7e>
            }
        }

    }
    80005ede:	2a813083          	ld	ra,680(sp)
    80005ee2:	2b010113          	addi	sp,sp,688
    80005ee6:	8082                	ret
                unsafe{ DEVICE_LIST.table[self.major as usize].write as usize == 0 } {
    80005ee8:	652a                	ld	a0,136(sp)

0000000080005eea <.LBB2_90>:
    80005eea:	00020617          	auipc	a2,0x20
    80005eee:	5be60613          	addi	a2,a2,1470 # 800264a8 <.L__unnamed_21>
    80005ef2:	45a9                	li	a1,10
    80005ef4:	0001c097          	auipc	ra,0x1c
    80005ef8:	234080e7          	jalr	564(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80005efc:	0000                	unimp
                    DEVICE_LIST.table[self.major as usize].write()
    80005efe:	650a                	ld	a0,128(sp)

0000000080005f00 <.LBB2_91>:
    80005f00:	00020617          	auipc	a2,0x20
    80005f04:	5d860613          	addi	a2,a2,1496 # 800264d8 <.L__unnamed_22>
    80005f08:	45a9                	li	a1,10
    80005f0a:	0001c097          	auipc	ra,0x1c
    80005f0e:	21e080e7          	jalr	542(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

0000000080005f14 <.LBB2_92>:
                    let mut write_bytes = len - count;
    80005f14:	00020517          	auipc	a0,0x20
    80005f18:	60c50513          	addi	a0,a0,1548 # 80026520 <str.1>

0000000080005f1c <.LBB2_93>:
    80005f1c:	00020617          	auipc	a2,0x20
    80005f20:	5ec60613          	addi	a2,a2,1516 # 80026508 <.L__unnamed_23>
    80005f24:	02100593          	li	a1,33
    80005f28:	0001c097          	auipc	ra,0x1c
    80005f2c:	1d4080e7          	jalr	468(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080005f32 <.LBB2_94>:
                        addr + count, 
    80005f32:	00020517          	auipc	a0,0x20
    80005f36:	4de50513          	addi	a0,a0,1246 # 80026410 <str.0>

0000000080005f3a <.LBB2_95>:
    80005f3a:	00020617          	auipc	a2,0x20
    80005f3e:	62660613          	addi	a2,a2,1574 # 80026560 <.L__unnamed_24>
    80005f42:	45f1                	li	a1,28
    80005f44:	0001c097          	auipc	ra,0x1c
    80005f48:	1b8080e7          	jalr	440(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080005f4e <.LBB2_96>:
                    *offset += write_bytes as u32;
    80005f4e:	00020517          	auipc	a0,0x20
    80005f52:	4c250513          	addi	a0,a0,1218 # 80026410 <str.0>

0000000080005f56 <.LBB2_97>:
    80005f56:	00020617          	auipc	a2,0x20
    80005f5a:	62260613          	addi	a2,a2,1570 # 80026578 <.L__unnamed_25>
    80005f5e:	45f1                	li	a1,28
    80005f60:	0001c097          	auipc	ra,0x1c
    80005f64:	19c080e7          	jalr	412(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080005f6a <.LBB2_98>:
                    count += write_bytes;
    80005f6a:	00020517          	auipc	a0,0x20
    80005f6e:	4a650513          	addi	a0,a0,1190 # 80026410 <str.0>

0000000080005f72 <.LBB2_99>:
    80005f72:	00020617          	auipc	a2,0x20
    80005f76:	61e60613          	addi	a2,a2,1566 # 80026590 <.L__unnamed_26>
    80005f7a:	45f1                	li	a1,28
    80005f7c:	0001c097          	auipc	ra,0x1c
    80005f80:	180080e7          	jalr	384(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel2fs4file5VFile8readable17h4e596856d12086d6E:

0000000080005f86 <_ZN6kernel2fs4file5VFile8readable17h4e596856d12086d6E>:

    fn readable(&self) -> bool {
    80005f86:	1141                	addi	sp,sp,-16
    80005f88:	e42a                	sd	a0,8(sp)
        self.readable
    80005f8a:	03054503          	lbu	a0,48(a0)
    }
    80005f8e:	0141                	addi	sp,sp,16
    80005f90:	8082                	ret

Disassembly of section .text._ZN6kernel2fs4file5VFile9writeable17h876bce4459deb027E:

0000000080005f92 <_ZN6kernel2fs4file5VFile9writeable17h876bce4459deb027E>:

    fn writeable(&self) -> bool {
    80005f92:	1141                	addi	sp,sp,-16
    80005f94:	e42a                	sd	a0,8(sp)
        self.writeable
    80005f96:	03154503          	lbu	a0,49(a0)
    }
    80005f9a:	0141                	addi	sp,sp,16
    80005f9c:	8082                	ret

Disassembly of section .text._ZN6kernel2fs4file5VFile4stat17heebdb0d64a039b86E:

0000000080005f9e <_ZN6kernel2fs4file5VFile4stat17heebdb0d64a039b86E>:

    /// Get metadata about file f. 
    /// addr is a user virtual address, pointing to a struct stat. 
    pub fn stat(&self, addr: usize) -> Result<(), &'static str> {
    80005f9e:	7111                	addi	sp,sp,-256
    80005fa0:	fd86                	sd	ra,248(sp)
    80005fa2:	ecae                	sd	a1,88(sp)
    80005fa4:	f0aa                	sd	a0,96(sp)
    80005fa6:	fd2a                	sd	a0,184(sp)
    80005fa8:	e1ae                	sd	a1,192(sp)

0000000080005faa <.LBB5_21>:
        let p = unsafe{ CPU_MANAGER.myproc().unwrap() };
    80005faa:	0005e517          	auipc	a0,0x5e
    80005fae:	19650513          	addi	a0,a0,406 # 80064140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    80005fb2:	0000c097          	auipc	ra,0xc
    80005fb6:	a78080e7          	jalr	-1416(ra) # 80011a2a <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    80005fba:	f4aa                	sd	a0,104(sp)
    80005fbc:	a009                	j	80005fbe <.LBB5_21+0x14>
    80005fbe:	7526                	ld	a0,104(sp)

0000000080005fc0 <.LBB5_22>:
    80005fc0:	00020597          	auipc	a1,0x20
    80005fc4:	66858593          	addi	a1,a1,1640 # 80026628 <.L__unnamed_27>
    80005fc8:	00009097          	auipc	ra,0x9
    80005fcc:	cf4080e7          	jalr	-780(ra) # 8000ecbc <_ZN4core6option15Option$LT$T$GT$6unwrap17h81f0c84c54a80648E>
    80005fd0:	e8aa                	sd	a0,80(sp)
    80005fd2:	a009                	j	80005fd4 <.LBB5_22+0x14>
    80005fd4:	6546                	ld	a0,80(sp)
    80005fd6:	e9aa                	sd	a0,208(sp)
    80005fd8:	0108                	addi	a0,sp,128
        let mut stat: Stat = Stat::new();
    80005fda:	00018097          	auipc	ra,0x18
    80005fde:	58a080e7          	jalr	1418(ra) # 8001e564 <_ZN6kernel2fs4stat4Stat3new17h349e191f39203f6dE>
    80005fe2:	a009                	j	80005fe4 <.LBB5_22+0x24>
        match self.ftype {
            FileType::Device | FileType::Inode => {
    80005fe4:	7506                	ld	a0,96(sp)
    80005fe6:	02c51503          	lh	a0,44(a0)
    80005fea:	1579                	addi	a0,a0,-2
    80005fec:	65c1                	lui	a1,0x10
    80005fee:	35fd                	addiw	a1,a1,-1
    80005ff0:	8d6d                	and	a0,a0,a1
    80005ff2:	4589                	li	a1,2
    80005ff4:	00b56b63          	bltu	a0,a1,8000600a <.LBB5_23+0x10>
    80005ff8:	a009                	j	80005ffa <.LBB5_23>

0000000080005ffa <.LBB5_23>:
                page_table.copy_out(addr, (&stat) as *const Stat as *const u8, size_of::<Stat>())?;
                Ok(())
            },  

            _ => {
                Err("")
    80005ffa:	00020517          	auipc	a0,0x20
    80005ffe:	64650513          	addi	a0,a0,1606 # 80026640 <.L__unnamed_29>
    80006002:	f8aa                	sd	a0,112(sp)
    80006004:	4501                	li	a0,0
    80006006:	fcaa                	sd	a0,120(sp)
        match self.ftype {
    80006008:	a8f1                	j	800060e4 <.LBB5_24+0xc8>
                let inode = self.inode.as_ref().unwrap();
    8000600a:	7506                	ld	a0,96(sp)
    8000600c:	0541                	addi	a0,a0,16
    8000600e:	00009097          	auipc	ra,0x9
    80006012:	99a080e7          	jalr	-1638(ra) # 8000e9a8 <_ZN4core6option15Option$LT$T$GT$6as_ref17h883d1380e87d3449E>
    80006016:	e4aa                	sd	a0,72(sp)
    80006018:	a009                	j	8000601a <.LBB5_23+0x20>
    8000601a:	6526                	ld	a0,72(sp)

000000008000601c <.LBB5_24>:
    8000601c:	00020597          	auipc	a1,0x20
    80006020:	62458593          	addi	a1,a1,1572 # 80026640 <.L__unnamed_29>
    80006024:	00009097          	auipc	ra,0x9
    80006028:	d04080e7          	jalr	-764(ra) # 8000ed28 <_ZN4core6option15Option$LT$T$GT$6unwrap17h8e9f6f5582436d22E>
    8000602c:	85aa                	mv	a1,a0
    8000602e:	e0ae                	sd	a1,64(sp)
    80006030:	edaa                	sd	a0,216(sp)
    80006032:	a009                	j	80006034 <.LBB5_24+0x18>
                let inode_guard = inode.lock();
    80006034:	6506                	ld	a0,64(sp)
    80006036:	00015097          	auipc	ra,0x15
    8000603a:	cca080e7          	jalr	-822(ra) # 8001ad00 <_ZN6kernel2fs5inode5Inode4lock17he70970c593f751adE>
    8000603e:	ed2a                	sd	a0,152(sp)
    80006040:	f12e                	sd	a1,160(sp)
    80006042:	a009                	j	80006044 <.LBB5_24+0x28>
    80006044:	0928                	addi	a0,sp,152
                inode_guard.stat(&mut stat);
    80006046:	00017097          	auipc	ra,0x17
    8000604a:	4ba080e7          	jalr	1210(ra) # 8001d500 <_ZN92_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfc7812d7ca7ab1e1E>
    8000604e:	fc2a                	sd	a0,56(sp)
    80006050:	a009                	j	80006052 <.LBB5_24+0x36>
    80006052:	7562                	ld	a0,56(sp)
    80006054:	010c                	addi	a1,sp,128
    80006056:	00014097          	auipc	ra,0x14
    8000605a:	b06080e7          	jalr	-1274(ra) # 80019b5c <_ZN6kernel2fs5inode9InodeData4stat17h1253d1c76b7156e3E>
    8000605e:	a009                	j	80006060 <.LBB5_24+0x44>
                drop(inode_guard);
    80006060:	656a                	ld	a0,152(sp)
    80006062:	758a                	ld	a1,160(sp)
    80006064:	00017097          	auipc	ra,0x17
    80006068:	e4e080e7          	jalr	-434(ra) # 8001ceb2 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    8000606c:	a009                	j	8000606e <.LBB5_24+0x52>
                let page_table = unsafe { &mut *p.pagetable };
    8000606e:	6546                	ld	a0,80(sp)
    80006070:	6d08                	ld	a0,24(a0)
    80006072:	f42a                	sd	a0,40(sp)
    80006074:	f1aa                	sd	a0,224(sp)
    80006076:	0108                	addi	a0,sp,128
                page_table.copy_out(addr, (&stat) as *const Stat as *const u8, size_of::<Stat>())?;
    80006078:	f82a                	sd	a0,48(sp)
    8000607a:	a009                	j	8000607c <.LBB5_24+0x60>
    8000607c:	7642                	ld	a2,48(sp)
    8000607e:	65e6                	ld	a1,88(sp)
    80006080:	7522                	ld	a0,40(sp)
    80006082:	46e1                	li	a3,24
    80006084:	00012097          	auipc	ra,0x12
    80006088:	98e080e7          	jalr	-1650(ra) # 80017a12 <_ZN6kernel6memory7mapping10page_table9PageTable8copy_out17h55d0f27ee3680817E>
    8000608c:	ec2a                	sd	a0,24(sp)
    8000608e:	f02e                	sd	a1,32(sp)
    80006090:	a009                	j	80006092 <.LBB5_24+0x76>
    80006092:	7582                	ld	a1,32(sp)
    80006094:	6562                	ld	a0,24(sp)
    80006096:	00007097          	auipc	ra,0x7
    8000609a:	0c8080e7          	jalr	200(ra) # 8000d15e <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hb12176fc822fec8fE>
    8000609e:	f52a                	sd	a0,168(sp)
    800060a0:	f92e                	sd	a1,176(sp)
    800060a2:	a009                	j	800060a4 <.LBB5_24+0x88>
    800060a4:	752a                	ld	a0,168(sp)
    800060a6:	00a035b3          	snez	a1,a0
    800060aa:	4581                	li	a1,0
    800060ac:	00b50463          	beq	a0,a1,800060b4 <.LBB5_24+0x98>
    800060b0:	a009                	j	800060b2 <.LBB5_24+0x96>
    800060b2:	a029                	j	800060bc <.LBB5_24+0xa0>
    800060b4:	4501                	li	a0,0
                Ok(())
    800060b6:	f8aa                	sd	a0,112(sp)
        match self.ftype {
    800060b8:	a035                	j	800060e4 <.LBB5_24+0xc8>
                page_table.copy_out(addr, (&stat) as *const Stat as *const u8, size_of::<Stat>())?;
    800060ba:	0000                	unimp
    800060bc:	752a                	ld	a0,168(sp)
    800060be:	75ca                	ld	a1,176(sp)
    800060c0:	f5aa                	sd	a0,232(sp)
    800060c2:	f9ae                	sd	a1,240(sp)
    800060c4:	00006097          	auipc	ra,0x6
    800060c8:	900080e7          	jalr	-1792(ra) # 8000b9c4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h6f3e3843c20d184aE>
    800060cc:	e42a                	sd	a0,8(sp)
    800060ce:	e82e                	sd	a1,16(sp)
    800060d0:	a009                	j	800060d2 <.LBB5_24+0xb6>
    800060d2:	65c2                	ld	a1,16(sp)
    800060d4:	6522                	ld	a0,8(sp)
    800060d6:	00007097          	auipc	ra,0x7
    800060da:	fa4080e7          	jalr	-92(ra) # 8000d07a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h9d11a50f8e490b2eE>
    800060de:	f8aa                	sd	a0,112(sp)
    800060e0:	fcae                	sd	a1,120(sp)
    800060e2:	a009                	j	800060e4 <.LBB5_24+0xc8>
            }
        }
    }
    800060e4:	7546                	ld	a0,112(sp)
    800060e6:	75e6                	ld	a1,120(sp)
    800060e8:	70ee                	ld	ra,248(sp)
    800060ea:	6111                	addi	sp,sp,256
    800060ec:	8082                	ret

Disassembly of section .text._ZN65_$LT$kernel..fs..file..FileType$u20$as$u20$core..clone..Clone$GT$5clone17h661efdf789c282d2E:

00000000800060ee <_ZN65_$LT$kernel..fs..file..FileType$u20$as$u20$core..clone..Clone$GT$5clone17h661efdf789c282d2E>:
#[derive(Clone, Copy, Debug, PartialEq)]
    800060ee:	1141                	addi	sp,sp,-16
    800060f0:	e42a                	sd	a0,8(sp)
    800060f2:	00051503          	lh	a0,0(a0)
    800060f6:	0141                	addi	sp,sp,16
    800060f8:	8082                	ret

Disassembly of section .text._ZN62_$LT$kernel..fs..file..VFile$u20$as$u20$core..clone..Clone$GT$5clone17hec76716ecfa94dd4E:

00000000800060fa <_ZN62_$LT$kernel..fs..file..VFile$u20$as$u20$core..clone..Clone$GT$5clone17hec76716ecfa94dd4E>:
#[derive(Clone, Debug)]
    800060fa:	7115                	addi	sp,sp,-224
    800060fc:	ed86                	sd	ra,216(sp)
    800060fe:	fc2e                	sd	a1,56(sp)
    80006100:	e0aa                	sd	a0,64(sp)
    80006102:	ed2e                	sd	a1,152(sp)
    pub(crate) ftype: FileType,
    80006104:	02c58513          	addi	a0,a1,44
    80006108:	f12a                	sd	a0,160(sp)
    pub(crate) readable: bool,
    8000610a:	03058613          	addi	a2,a1,48
    8000610e:	e4b2                	sd	a2,72(sp)
    80006110:	f532                	sd	a2,168(sp)
    pub(crate) writeable: bool,
    80006112:	03158613          	addi	a2,a1,49
    80006116:	e8b2                	sd	a2,80(sp)
    80006118:	f932                	sd	a2,176(sp)
    pub(crate) pipe: Option<*mut Pipe>,
    8000611a:	862e                	mv	a2,a1
    8000611c:	ecb2                	sd	a2,88(sp)
    8000611e:	fd2e                	sd	a1,184(sp)
    pub(crate) inode: Option<Inode>,
    80006120:	01058613          	addi	a2,a1,16
    80006124:	f0b2                	sd	a2,96(sp)
    80006126:	e1b2                	sd	a2,192(sp)
    pub(crate) offset: u32,
    80006128:	02858613          	addi	a2,a1,40
    8000612c:	f4b2                	sd	a2,104(sp)
    8000612e:	e5b2                	sd	a2,200(sp)
    pub(crate) major: i16
    80006130:	02e58593          	addi	a1,a1,46
    80006134:	f8ae                	sd	a1,112(sp)
    80006136:	e9ae                	sd	a1,208(sp)
    pub(crate) ftype: FileType,
    80006138:	00000097          	auipc	ra,0x0
    8000613c:	fb6080e7          	jalr	-74(ra) # 800060ee <_ZN65_$LT$kernel..fs..file..FileType$u20$as$u20$core..clone..Clone$GT$5clone17h661efdf789c282d2E>
    80006140:	65c1                	lui	a1,0x10
    80006142:	35fd                	addiw	a1,a1,-1
    80006144:	8d6d                	and	a0,a0,a1
    80006146:	fcaa                	sd	a0,120(sp)
    80006148:	a009                	j	8000614a <_ZN62_$LT$kernel..fs..file..VFile$u20$as$u20$core..clone..Clone$GT$5clone17hec76716ecfa94dd4E+0x50>
    pub(crate) readable: bool,
    8000614a:	6526                	ld	a0,72(sp)
    8000614c:	00017097          	auipc	ra,0x17
    80006150:	524080e7          	jalr	1316(ra) # 8001d670 <_ZN4core5clone5impls53_$LT$impl$u20$core..clone..Clone$u20$for$u20$bool$GT$5clone17hd6e1e19c635da345E>
    80006154:	f82a                	sd	a0,48(sp)
    80006156:	a009                	j	80006158 <_ZN62_$LT$kernel..fs..file..VFile$u20$as$u20$core..clone..Clone$GT$5clone17hec76716ecfa94dd4E+0x5e>
    pub(crate) writeable: bool,
    80006158:	6546                	ld	a0,80(sp)
    8000615a:	00017097          	auipc	ra,0x17
    8000615e:	516080e7          	jalr	1302(ra) # 8001d670 <_ZN4core5clone5impls53_$LT$impl$u20$core..clone..Clone$u20$for$u20$bool$GT$5clone17hd6e1e19c635da345E>
    80006162:	f42a                	sd	a0,40(sp)
    80006164:	a009                	j	80006166 <_ZN62_$LT$kernel..fs..file..VFile$u20$as$u20$core..clone..Clone$GT$5clone17hec76716ecfa94dd4E+0x6c>
    pub(crate) pipe: Option<*mut Pipe>,
    80006166:	6566                	ld	a0,88(sp)
    80006168:	00009097          	auipc	ra,0x9
    8000616c:	ee6080e7          	jalr	-282(ra) # 8000f04e <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h192c01ff449d5bd3E>
    80006170:	ec2a                	sd	a0,24(sp)
    80006172:	f02e                	sd	a1,32(sp)
    80006174:	a009                	j	80006176 <_ZN62_$LT$kernel..fs..file..VFile$u20$as$u20$core..clone..Clone$GT$5clone17hec76716ecfa94dd4E+0x7c>
    pub(crate) inode: Option<Inode>,
    80006176:	7586                	ld	a1,96(sp)
    80006178:	0108                	addi	a0,sp,128
    8000617a:	00009097          	auipc	ra,0x9
    8000617e:	f16080e7          	jalr	-234(ra) # 8000f090 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h97a616a53917bc2aE>
    80006182:	a009                	j	80006184 <_ZN62_$LT$kernel..fs..file..VFile$u20$as$u20$core..clone..Clone$GT$5clone17hec76716ecfa94dd4E+0x8a>
    pub(crate) offset: u32,
    80006184:	7526                	ld	a0,104(sp)
    80006186:	00017097          	auipc	ra,0x17
    8000618a:	4e0080e7          	jalr	1248(ra) # 8001d666 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17ha1019ce9fdc4d620E>
    8000618e:	e82a                	sd	a0,16(sp)
    80006190:	a009                	j	80006192 <_ZN62_$LT$kernel..fs..file..VFile$u20$as$u20$core..clone..Clone$GT$5clone17hec76716ecfa94dd4E+0x98>
    pub(crate) major: i16
    80006192:	7546                	ld	a0,112(sp)
    80006194:	00017097          	auipc	ra,0x17
    80006198:	4ba080e7          	jalr	1210(ra) # 8001d64e <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$i16$GT$5clone17h91da98197f473cc1E>
    8000619c:	e42a                	sd	a0,8(sp)
    8000619e:	a009                	j	800061a0 <_ZN62_$LT$kernel..fs..file..VFile$u20$as$u20$core..clone..Clone$GT$5clone17hec76716ecfa94dd4E+0xa6>
#[derive(Clone, Debug)]
    800061a0:	6522                	ld	a0,8(sp)
    800061a2:	6586                	ld	a1,64(sp)
    800061a4:	6642                	ld	a2,16(sp)
    800061a6:	7682                	ld	a3,32(sp)
    800061a8:	6762                	ld	a4,24(sp)
    800061aa:	77a2                	ld	a5,40(sp)
    800061ac:	7842                	ld	a6,48(sp)
    800061ae:	78e6                	ld	a7,120(sp)
    800061b0:	03159623          	sh	a7,44(a1) # 1002c <.Lline_table_start0+0x8d8>
    800061b4:	03058823          	sb	a6,48(a1)
    800061b8:	02f588a3          	sb	a5,49(a1)
    800061bc:	e198                	sd	a4,0(a1)
    800061be:	e594                	sd	a3,8(a1)
    800061c0:	668a                	ld	a3,128(sp)
    800061c2:	e994                	sd	a3,16(a1)
    800061c4:	66aa                	ld	a3,136(sp)
    800061c6:	ed94                	sd	a3,24(a1)
    800061c8:	66ca                	ld	a3,144(sp)
    800061ca:	f194                	sd	a3,32(a1)
    800061cc:	d590                	sw	a2,40(a1)
    800061ce:	02a59723          	sh	a0,46(a1)
    800061d2:	60ee                	ld	ra,216(sp)
    800061d4:	612d                	addi	sp,sp,224
    800061d6:	8082                	ret

Disassembly of section .text._ZN6kernel4trap14trap_init_hart17h35cf9f3a8bf40f94E:

00000000800061d8 <_ZN6kernel4trap14trap_init_hart17h35cf9f3a8bf40f94E>:
use super::*;

pub static mut TICKS_LOCK:Spinlock<usize> = Spinlock::new(0, "time");

/// Set up to take exceptions and traps while in the kernel.
pub unsafe fn trap_init_hart() {
    800061d8:	1141                	addi	sp,sp,-16
    extern "C" {
        fn kernelvec();
    }
    stvec::write(kernelvec as usize);
    800061da:	e406                	sd	ra,8(sp)

00000000800061dc <.LBB0_2>:
    800061dc:	ffffa517          	auipc	a0,0xffffa
    800061e0:	e4450513          	addi	a0,a0,-444 # 80000020 <kernelvec>
    800061e4:	00006097          	auipc	ra,0x6
    800061e8:	a6e080e7          	jalr	-1426(ra) # 8000bc52 <_ZN6kernel4arch5riscv8register5stvec5write17ha770434f21f9bf27E>
    800061ec:	a009                	j	800061ee <.LBB0_2+0x12>
}
    800061ee:	60a2                	ld	ra,8(sp)
    800061f0:	0141                	addi	sp,sp,16
    800061f2:	8082                	ret

Disassembly of section .text.user_trap:

00000000800061f4 <user_trap>:


/// handle an interrupt, exception, or system call from user space.
/// called from trampoline.S
#[no_mangle]
pub unsafe fn user_trap() {
    800061f4:	7101                	addi	sp,sp,-512
    let sepc = sepc::read();
    800061f6:	ff86                	sd	ra,504(sp)
    800061f8:	fffff097          	auipc	ra,0xfffff
    800061fc:	9d6080e7          	jalr	-1578(ra) # 80004bce <_ZN6kernel4arch5riscv8register4sepc4read17hcaa3e2a818646c19E>
    80006200:	e1aa                	sd	a0,192(sp)
    80006202:	a009                	j	80006204 <user_trap+0x10>
    let scause = Scause::new(scause::read());
    80006204:	00002097          	auipc	ra,0x2
    80006208:	966080e7          	jalr	-1690(ra) # 80007b6a <_ZN6kernel4arch5riscv8register6scause4read17h6f388cd664aa7885E>
    8000620c:	fd2a                	sd	a0,184(sp)
    8000620e:	a009                	j	80006210 <user_trap+0x1c>
    80006210:	756a                	ld	a0,184(sp)
    80006212:	00002097          	auipc	ra,0x2
    80006216:	a58080e7          	jalr	-1448(ra) # 80007c6a <_ZN6kernel4arch5riscv8register6scause6Scause3new17hf1aad0ee6c83efd3E>
    8000621a:	e5aa                	sd	a0,200(sp)
    8000621c:	a009                	j	8000621e <user_trap+0x2a>

    if !sstatus::is_from_user() {
    8000621e:	00018097          	auipc	ra,0x18
    80006222:	f6a080e7          	jalr	-150(ra) # 8001e188 <_ZN6kernel4arch5riscv8register7sstatus12is_from_user17hfa7a30a57661c561E>
    80006226:	f92a                	sd	a0,176(sp)
    80006228:	a009                	j	8000622a <user_trap+0x36>
    8000622a:	754a                	ld	a0,176(sp)
    8000622c:	e105                	bnez	a0,8000624c <.LBB1_67>
    8000622e:	a009                	j	80006230 <.LBB1_65>

0000000080006230 <.LBB1_65>:
        panic!("user_trap(): not from user mode");
    80006230:	00020517          	auipc	a0,0x20
    80006234:	48050513          	addi	a0,a0,1152 # 800266b0 <.L__unnamed_1>

0000000080006238 <.LBB1_66>:
    80006238:	00020617          	auipc	a2,0x20
    8000623c:	4a860613          	addi	a2,a2,1192 # 800266e0 <.L__unnamed_2>
    80006240:	45fd                	li	a1,31
    80006242:	0001c097          	auipc	ra,0x1c
    80006246:	eba080e7          	jalr	-326(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008000624c <.LBB1_67>:
    // send interrupts and exceptions to kerneltrap(),
    // since we're now in the kernel.
    extern "C" {
        fn kernelvec();
    }
    stvec::write(kernelvec as usize);
    8000624c:	ffffa517          	auipc	a0,0xffffa
    80006250:	dd450513          	addi	a0,a0,-556 # 80000020 <kernelvec>
    80006254:	00006097          	auipc	ra,0x6
    80006258:	9fe080e7          	jalr	-1538(ra) # 8000bc52 <_ZN6kernel4arch5riscv8register5stvec5write17ha770434f21f9bf27E>
    8000625c:	a009                	j	8000625e <.LBB1_68>

000000008000625e <.LBB1_68>:

    let my_proc = CPU_MANAGER.myproc().unwrap();
    8000625e:	0005e517          	auipc	a0,0x5e
    80006262:	ee250513          	addi	a0,a0,-286 # 80064140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    80006266:	0000b097          	auipc	ra,0xb
    8000626a:	7c4080e7          	jalr	1988(ra) # 80011a2a <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    8000626e:	f52a                	sd	a0,168(sp)
    80006270:	a009                	j	80006272 <.LBB1_68+0x14>
    80006272:	752a                	ld	a0,168(sp)

0000000080006274 <.LBB1_69>:
    80006274:	00020597          	auipc	a1,0x20
    80006278:	48458593          	addi	a1,a1,1156 # 800266f8 <.L__unnamed_3>
    8000627c:	00009097          	auipc	ra,0x9
    80006280:	a40080e7          	jalr	-1472(ra) # 8000ecbc <_ZN4core6option15Option$LT$T$GT$6unwrap17h81f0c84c54a80648E>
    80006284:	85aa                	mv	a1,a0
    80006286:	f12e                	sd	a1,160(sp)
    80006288:	e3aa                	sd	a0,448(sp)
    8000628a:	a009                	j	8000628c <.LBB1_69+0x18>
    let tf = &mut *my_proc.trapframe;
    8000628c:	750a                	ld	a0,160(sp)
    8000628e:	710c                	ld	a1,32(a0)
    80006290:	ed2e                	sd	a1,152(sp)
    80006292:	e7ae                	sd	a1,456(sp)
    tf.epc = sepc;
    80006294:	650e                	ld	a0,192(sp)
    80006296:	ed88                	sd	a0,24(a1)
    80006298:	01a8                	addi	a0,sp,200
    // println!("{}", sepc);
    match scause.cause() {
    8000629a:	00002097          	auipc	ra,0x2
    8000629e:	a7e080e7          	jalr	-1410(ra) # 80007d18 <_ZN6kernel4arch5riscv8register6scause6Scause5cause17h87ca94701d022899E>
    800062a2:	0ca10823          	sb	a0,208(sp)
    800062a6:	0cb108a3          	sb	a1,209(sp)
    800062aa:	a009                	j	800062ac <.LBB1_69+0x38>
        
        Trap::Exception(Exception::UserEnvCall) => {
    800062ac:	0d014503          	lbu	a0,208(sp)
    800062b0:	e92a                	sd	a0,144(sp)
    800062b2:	8905                	andi	a0,a0,1
    800062b4:	4581                	li	a1,0
    800062b6:	00b50863          	beq	a0,a1,800062c6 <.LBB1_69+0x52>
    800062ba:	a009                	j	800062bc <.LBB1_69+0x48>
    800062bc:	654a                	ld	a0,144(sp)
    800062be:	4585                	li	a1,1
    800062c0:	02b50963          	beq	a0,a1,800062f2 <.LBB1_69+0x7e>
    800062c4:	a829                	j	800062de <.LBB1_69+0x6a>
            handle_syscall();
            
        },

        // Device interrupt
        Trap::Interrupt(Interrupt::SupervisorExternal) => {
    800062c6:	0d114503          	lbu	a0,209(sp)
    800062ca:	e52a                	sd	a0,136(sp)
    800062cc:	4585                	li	a1,1
    800062ce:	12b50a63          	beq	a0,a1,80006402 <.LBB1_74+0x22>
    800062d2:	a009                	j	800062d4 <.LBB1_69+0x60>
    800062d4:	652a                	ld	a0,136(sp)
    800062d6:	4595                	li	a1,5
    800062d8:	06b50a63          	beq	a0,a1,8000634c <.LBB1_70+0x36>
    800062dc:	a009                	j	800062de <.LBB1_69+0x6a>
    800062de:	01a8                	addi	a0,sp,200
            // yield up the CPU if this is a timer interrupt
            my_proc.yielding();
        },

        _ => {
            println!("usertrap: unexpected scacuse: {:?}\n pid: {}", scause.cause(), my_proc.pid());
    800062e0:	00002097          	auipc	ra,0x2
    800062e4:	a38080e7          	jalr	-1480(ra) # 80007d18 <_ZN6kernel4arch5riscv8register6scause6Scause5cause17h87ca94701d022899E>
    800062e8:	14a10423          	sb	a0,328(sp)
    800062ec:	14b104a3          	sb	a1,329(sp)
    800062f0:	aaad                	j	8000646a <.LBB1_75+0x22>
        Trap::Exception(Exception::UserEnvCall) => {
    800062f2:	0d114503          	lbu	a0,209(sp)
    800062f6:	459d                	li	a1,7
    800062f8:	feb513e3          	bne	a0,a1,800062de <.LBB1_69+0x6a>
    800062fc:	a009                	j	800062fe <.LBB1_69+0x8a>
            if my_proc.killed() {
    800062fe:	750a                	ld	a0,160(sp)
    80006300:	00010097          	auipc	ra,0x10
    80006304:	a06080e7          	jalr	-1530(ra) # 80015d06 <_ZN6kernel7process7process11task_struct6killed17h4fc8d78e83fc4243E>
    80006308:	e12a                	sd	a0,128(sp)
    8000630a:	a009                	j	8000630c <.LBB1_69+0x98>
    8000630c:	650a                	ld	a0,128(sp)
    8000630e:	4581                	li	a1,0
    80006310:	00b50d63          	beq	a0,a1,8000632a <.LBB1_70+0x14>
    80006314:	a009                	j	80006316 <.LBB1_70>

0000000080006316 <.LBB1_70>:
                PROC_MANAGER.exit(1);
    80006316:	00051517          	auipc	a0,0x51
    8000631a:	28a50513          	addi	a0,a0,650 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    8000631e:	4585                	li	a1,1
    80006320:	00007097          	auipc	ra,0x7
    80006324:	6b8080e7          	jalr	1720(ra) # 8000d9d8 <_ZN6kernel7process7manager11ProcManager4exit17hfa49a8445fc58f81E>
    80006328:	0000                	unimp
            tf.update_epc();
    8000632a:	656a                	ld	a0,152(sp)
    8000632c:	ffffc097          	auipc	ra,0xffffc
    80006330:	392080e7          	jalr	914(ra) # 800026be <_ZN6kernel7process9trapframe9Trapframe10update_epc17h24874241e4b03020E>
    80006334:	a009                	j	80006336 <.LBB1_70+0x20>
            sstatus::intr_on();
    80006336:	00018097          	auipc	ra,0x18
    8000633a:	e72080e7          	jalr	-398(ra) # 8001e1a8 <_ZN6kernel4arch5riscv8register7sstatus7intr_on17h10d927cfe74faba7E>
    8000633e:	a009                	j	80006340 <.LBB1_70+0x2a>
            handle_syscall();
    80006340:	0000e097          	auipc	ra,0xe
    80006344:	6e6080e7          	jalr	1766(ra) # 80014a26 <handle_syscall>
    80006348:	a009                	j	8000634a <.LBB1_70+0x34>
    match scause.cause() {
    8000634a:	a43d                	j	80006578 <.LBB1_81+0x36>
            if let Some(interrupt) = plic_claim() {
    8000634c:	00017097          	auipc	ra,0x17
    80006350:	5e2080e7          	jalr	1506(ra) # 8001d92e <_ZN6kernel6driver4plic10plic_claim17h6764dad227b44c96E>
    80006354:	cdaa                	sw	a0,216(sp)
    80006356:	cfae                	sw	a1,220(sp)
    80006358:	a009                	j	8000635a <.LBB1_70+0x44>
    8000635a:	456e                	lw	a0,216(sp)
    8000635c:	4581                	li	a1,0
    8000635e:	00b51463          	bne	a0,a1,80006366 <.LBB1_70+0x50>
    80006362:	a009                	j	80006364 <.LBB1_70+0x4e>
    80006364:	ac11                	j	80006578 <.LBB1_81+0x36>
    80006366:	457e                	lw	a0,220(sp)
    80006368:	02051593          	slli	a1,a0,0x20
    8000636c:	9181                	srli	a1,a1,0x20
    8000636e:	fcae                	sd	a1,120(sp)
    80006370:	1ea12a23          	sw	a0,500(sp)
    80006374:	4585                	li	a1,1
                    VIRTIO0_IRQ => {
    80006376:	02b50763          	beq	a0,a1,800063a4 <.LBB1_73>
    8000637a:	a009                	j	8000637c <.LBB1_70+0x66>
    8000637c:	7566                	ld	a0,120(sp)
    8000637e:	2501                	sext.w	a0,a0
    80006380:	45a9                	li	a1,10
    80006382:	04b50f63          	beq	a0,a1,800063e0 <.LBB1_74>
    80006386:	a009                	j	80006388 <.LBB1_71>

0000000080006388 <.LBB1_71>:
                        panic!("Unresolved interrupt");
    80006388:	00020517          	auipc	a0,0x20
    8000638c:	4e850513          	addi	a0,a0,1256 # 80026870 <.L__unnamed_4>

0000000080006390 <.LBB1_72>:
    80006390:	00020617          	auipc	a2,0x20
    80006394:	4f860613          	addi	a2,a2,1272 # 80026888 <.L__unnamed_5>
    80006398:	45d1                	li	a1,20
    8000639a:	0001c097          	auipc	ra,0x1c
    8000639e:	d62080e7          	jalr	-670(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

00000000800063a4 <.LBB1_73>:
                        DISK.acquire().intr();
    800063a4:	00057517          	auipc	a0,0x57
    800063a8:	c5c50513          	addi	a0,a0,-932 # 8005d000 <_ZN6kernel6driver11virtio_disk4DISK17h9e8917083150b34aE>
    800063ac:	0000a097          	auipc	ra,0xa
    800063b0:	1a8080e7          	jalr	424(ra) # 80010554 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h922bace5232f6228E>
    800063b4:	f1aa                	sd	a0,224(sp)
    800063b6:	a009                	j	800063b8 <.LBB1_73+0x14>
    800063b8:	1188                	addi	a0,sp,224
    800063ba:	0000b097          	auipc	ra,0xb
    800063be:	fb6080e7          	jalr	-74(ra) # 80011370 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h362a59dae1fa4f35E>
    800063c2:	f8aa                	sd	a0,112(sp)
    800063c4:	a009                	j	800063c6 <.LBB1_73+0x22>
    800063c6:	7546                	ld	a0,112(sp)
    800063c8:	00019097          	auipc	ra,0x19
    800063cc:	d82080e7          	jalr	-638(ra) # 8001f14a <_ZN6kernel6driver11virtio_disk4Disk4intr17h780fdb71fd330281E>
    800063d0:	a009                	j	800063d2 <.LBB1_73+0x2e>
    800063d2:	1188                	addi	a0,sp,224
    800063d4:	00001097          	auipc	ra,0x1
    800063d8:	d06080e7          	jalr	-762(ra) # 800070da <_ZN4core3ptr99drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..driver..virtio_disk..Disk$GT$$GT$17h4fc01c278f0bfe6cE>
    800063dc:	a009                	j	800063de <.LBB1_73+0x3a>
                match interrupt {
    800063de:	a819                	j	800063f4 <.LBB1_74+0x14>

00000000800063e0 <.LBB1_74>:
                        UART.intr();
    800063e0:	00055517          	auipc	a0,0x55
    800063e4:	10050513          	addi	a0,a0,256 # 8005b4e0 <_ZN6kernel6driver4uart4UART17h0708b3e179d548ddE>
    800063e8:	00004097          	auipc	ra,0x4
    800063ec:	96e080e7          	jalr	-1682(ra) # 80009d56 <_ZN6kernel6driver4uart84_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..driver..uart..Uart$GT$$GT$4intr17h862db3ca167d2b66E>
    800063f0:	a009                	j	800063f2 <.LBB1_74+0x12>
                match interrupt {
    800063f2:	a009                	j	800063f4 <.LBB1_74+0x14>
                plic_complete(interrupt);
    800063f4:	7566                	ld	a0,120(sp)
    800063f6:	00017097          	auipc	ra,0x17
    800063fa:	592080e7          	jalr	1426(ra) # 8001d988 <_ZN6kernel6driver4plic13plic_complete17hc3a23eee8594fbc3E>
    800063fe:	a009                	j	80006400 <.LBB1_74+0x20>
            if let Some(interrupt) = plic_claim() {
    80006400:	aaa5                	j	80006578 <.LBB1_81+0x36>
            if cpu::cpuid() == 0{
    80006402:	0000b097          	auipc	ra,0xb
    80006406:	5c0080e7          	jalr	1472(ra) # 800119c2 <_ZN6kernel7process3cpu5cpuid17h605093a6a9a60164E>
    8000640a:	f4aa                	sd	a0,104(sp)
    8000640c:	a009                	j	8000640e <.LBB1_74+0x2e>
    8000640e:	7526                	ld	a0,104(sp)
    80006410:	4581                	li	a1,0
    80006412:	00b51863          	bne	a0,a1,80006422 <.LBB1_74+0x42>
    80006416:	a009                	j	80006418 <.LBB1_74+0x38>
                clock_intr();
    80006418:	00001097          	auipc	ra,0x1
    8000641c:	922080e7          	jalr	-1758(ra) # 80006d3a <_ZN6kernel4trap10clock_intr17h80b4decf617479a4E>
    80006420:	a011                	j	80006424 <.LBB1_74+0x44>
            if cpu::cpuid() == 0{
    80006422:	a011                	j	80006426 <.LBB1_74+0x46>
    80006424:	a009                	j	80006426 <.LBB1_74+0x46>
            sip::clear_ssip();
    80006426:	00017097          	auipc	ra,0x17
    8000642a:	31c080e7          	jalr	796(ra) # 8001d742 <_ZN6kernel4arch5riscv8register3sip10clear_ssip17h3546c4610df6574fE>
    8000642e:	a009                	j	80006430 <.LBB1_74+0x50>
            if my_proc.killed() {
    80006430:	750a                	ld	a0,160(sp)
    80006432:	00010097          	auipc	ra,0x10
    80006436:	8d4080e7          	jalr	-1836(ra) # 80015d06 <_ZN6kernel7process7process11task_struct6killed17h4fc8d78e83fc4243E>
    8000643a:	f0aa                	sd	a0,96(sp)
    8000643c:	a009                	j	8000643e <.LBB1_74+0x5e>
    8000643e:	7506                	ld	a0,96(sp)
    80006440:	4581                	li	a1,0
    80006442:	00b50d63          	beq	a0,a1,8000645c <.LBB1_75+0x14>
    80006446:	a009                	j	80006448 <.LBB1_75>

0000000080006448 <.LBB1_75>:
                PROC_MANAGER.exit(1);
    80006448:	00051517          	auipc	a0,0x51
    8000644c:	15850513          	addi	a0,a0,344 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    80006450:	4585                	li	a1,1
    80006452:	00007097          	auipc	ra,0x7
    80006456:	586080e7          	jalr	1414(ra) # 8000d9d8 <_ZN6kernel7process7manager11ProcManager4exit17hfa49a8445fc58f81E>
    8000645a:	0000                	unimp
            my_proc.yielding();
    8000645c:	750a                	ld	a0,160(sp)
    8000645e:	00010097          	auipc	ra,0x10
    80006462:	c32080e7          	jalr	-974(ra) # 80016090 <_ZN6kernel7process7process11task_struct8yielding17hffa4922f8aee5a94E>
    80006466:	a009                	j	80006468 <.LBB1_75+0x20>
    match scause.cause() {
    80006468:	aa01                	j	80006578 <.LBB1_81+0x36>
            println!("usertrap: unexpected scacuse: {:?}\n pid: {}", scause.cause(), my_proc.pid());
    8000646a:	750a                	ld	a0,160(sp)
    8000646c:	00010097          	auipc	ra,0x10
    80006470:	8a6080e7          	jalr	-1882(ra) # 80015d12 <_ZN6kernel7process7process11task_struct3pid17hf16723aa87a30b20E>
    80006474:	eaaa                	sd	a0,336(sp)
    80006476:	a009                	j	80006478 <.LBB1_75+0x30>
    80006478:	02a8                	addi	a0,sp,328
    8000647a:	fe2a                	sd	a0,312(sp)
    8000647c:	0a8c                	addi	a1,sp,336
    8000647e:	e4ae                	sd	a1,72(sp)
    80006480:	e2ae                	sd	a1,320(sp)
    80006482:	ebaa                	sd	a0,464(sp)
    80006484:	efae                	sd	a1,472(sp)

0000000080006486 <.LBB1_76>:
    80006486:	00002597          	auipc	a1,0x2
    8000648a:	99258593          	addi	a1,a1,-1646 # 80007e18 <_ZN80_$LT$kernel..arch..riscv..register..scause..Trap$u20$as$u20$core..fmt..Debug$GT$3fmt17haf633180146f5b80E>
    8000648e:	00018097          	auipc	ra,0x18
    80006492:	058080e7          	jalr	88(ra) # 8001e4e6 <_ZN4core3fmt10ArgumentV13new17hc1ed914d10380b65E>
    80006496:	e8aa                	sd	a0,80(sp)
    80006498:	ecae                	sd	a1,88(sp)
    8000649a:	a009                	j	8000649c <.LBB1_76+0x16>
    8000649c:	6526                	ld	a0,72(sp)

000000008000649e <.LBB1_77>:
    8000649e:	0001e597          	auipc	a1,0x1e
    800064a2:	3ba58593          	addi	a1,a1,954 # 80024858 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h9c6c4af1578f7c29E>
    800064a6:	00019097          	auipc	ra,0x19
    800064aa:	080080e7          	jalr	128(ra) # 8001f526 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    800064ae:	fc2a                	sd	a0,56(sp)
    800064b0:	e0ae                	sd	a1,64(sp)
    800064b2:	a009                	j	800064b4 <.LBB1_77+0x16>
    800064b4:	6506                	ld	a0,64(sp)
    800064b6:	75e2                	ld	a1,56(sp)
    800064b8:	6666                	ld	a2,88(sp)
    800064ba:	66c6                	ld	a3,80(sp)
    800064bc:	ee36                	sd	a3,280(sp)
    800064be:	f232                	sd	a2,288(sp)
    800064c0:	f62e                	sd	a1,296(sp)
    800064c2:	fa2a                	sd	a0,304(sp)

00000000800064c4 <.LBB1_78>:
    800064c4:	00020597          	auipc	a1,0x20
    800064c8:	27458593          	addi	a1,a1,628 # 80026738 <.L__unnamed_6>
    800064cc:	11a8                	addi	a0,sp,232
    800064ce:	460d                	li	a2,3
    800064d0:	0a34                	addi	a3,sp,280
    800064d2:	4709                	li	a4,2
    800064d4:	fffff097          	auipc	ra,0xfffff
    800064d8:	f60080e7          	jalr	-160(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    800064dc:	a009                	j	800064de <.LBB1_78+0x1a>
    800064de:	11a8                	addi	a0,sp,232
    800064e0:	00017097          	auipc	ra,0x17
    800064e4:	6d0080e7          	jalr	1744(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    800064e8:	a009                	j	800064ea <.LBB1_78+0x26>
            println!("sepc: 0x{:x}, stval: 0x{:x}", sepc, stval::read());
    800064ea:	fffff097          	auipc	ra,0xfffff
    800064ee:	dd2080e7          	jalr	-558(ra) # 800052bc <_ZN6kernel4arch5riscv8register5stval4read17h328c9da49d53d19fE>
    800064f2:	ff2a                	sd	a0,440(sp)
    800064f4:	a009                	j	800064f6 <.LBB1_78+0x32>
    800064f6:	0188                	addi	a0,sp,192
    800064f8:	f72a                	sd	a0,424(sp)
    800064fa:	1b2c                	addi	a1,sp,440
    800064fc:	f02e                	sd	a1,32(sp)
    800064fe:	fb2e                	sd	a1,432(sp)
    80006500:	f3aa                	sd	a0,480(sp)
    80006502:	f7ae                	sd	a1,488(sp)

0000000080006504 <.LBB1_79>:
    80006504:	0001e597          	auipc	a1,0x1e
    80006508:	d3658593          	addi	a1,a1,-714 # 8002423a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h760b07191d46b3f2E>
    8000650c:	00019097          	auipc	ra,0x19
    80006510:	01a080e7          	jalr	26(ra) # 8001f526 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    80006514:	f42a                	sd	a0,40(sp)
    80006516:	f82e                	sd	a1,48(sp)
    80006518:	a009                	j	8000651a <.LBB1_79+0x16>
    8000651a:	7502                	ld	a0,32(sp)

000000008000651c <.LBB1_80>:
    8000651c:	0001e597          	auipc	a1,0x1e
    80006520:	d1e58593          	addi	a1,a1,-738 # 8002423a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h760b07191d46b3f2E>
    80006524:	00019097          	auipc	ra,0x19
    80006528:	002080e7          	jalr	2(ra) # 8001f526 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    8000652c:	e82a                	sd	a0,16(sp)
    8000652e:	ec2e                	sd	a1,24(sp)
    80006530:	a009                	j	80006532 <.LBB1_80+0x16>
    80006532:	6562                	ld	a0,24(sp)
    80006534:	65c2                	ld	a1,16(sp)
    80006536:	7642                	ld	a2,48(sp)
    80006538:	76a2                	ld	a3,40(sp)
    8000653a:	e736                	sd	a3,392(sp)
    8000653c:	eb32                	sd	a2,400(sp)
    8000653e:	ef2e                	sd	a1,408(sp)
    80006540:	f32a                	sd	a0,416(sp)

0000000080006542 <.LBB1_81>:
    80006542:	00020597          	auipc	a1,0x20
    80006546:	2fe58593          	addi	a1,a1,766 # 80026840 <.L__unnamed_7>
    8000654a:	0aa8                	addi	a0,sp,344
    8000654c:	460d                	li	a2,3
    8000654e:	0334                	addi	a3,sp,392
    80006550:	4709                	li	a4,2
    80006552:	fffff097          	auipc	ra,0xfffff
    80006556:	ee2080e7          	jalr	-286(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8000655a:	a009                	j	8000655c <.LBB1_81+0x1a>
    8000655c:	0aa8                	addi	a0,sp,344
    8000655e:	00017097          	auipc	ra,0x17
    80006562:	652080e7          	jalr	1618(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    80006566:	a009                	j	80006568 <.LBB1_81+0x26>
            my_proc.modify_kill(true);
    80006568:	750a                	ld	a0,160(sp)
    8000656a:	4585                	li	a1,1
    8000656c:	00010097          	auipc	ra,0x10
    80006570:	808080e7          	jalr	-2040(ra) # 80015d74 <_ZN6kernel7process7process11task_struct11modify_kill17hb12febfdeb8e8d03E>
    80006574:	a009                	j	80006576 <.LBB1_81+0x34>
    match scause.cause() {
    80006576:	a009                	j	80006578 <.LBB1_81+0x36>
        }

    }

    if my_proc.killed() {
    80006578:	750a                	ld	a0,160(sp)
    8000657a:	0000f097          	auipc	ra,0xf
    8000657e:	78c080e7          	jalr	1932(ra) # 80015d06 <_ZN6kernel7process7process11task_struct6killed17h4fc8d78e83fc4243E>
    80006582:	e42a                	sd	a0,8(sp)
    80006584:	a009                	j	80006586 <.LBB1_81+0x44>
    80006586:	6522                	ld	a0,8(sp)
    80006588:	4581                	li	a1,0
    8000658a:	00b50d63          	beq	a0,a1,800065a4 <.LBB1_82+0x14>
    8000658e:	a009                	j	80006590 <.LBB1_82>

0000000080006590 <.LBB1_82>:
        PROC_MANAGER.exit(1);
    80006590:	00051517          	auipc	a0,0x51
    80006594:	01050513          	addi	a0,a0,16 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    80006598:	4585                	li	a1,1
    8000659a:	00007097          	auipc	ra,0x7
    8000659e:	43e080e7          	jalr	1086(ra) # 8000d9d8 <_ZN6kernel7process7manager11ProcManager4exit17hfa49a8445fc58f81E>
    800065a2:	0000                	unimp
    }
    
    user_trap_ret();
    800065a4:	00000097          	auipc	ra,0x0
    800065a8:	00a080e7          	jalr	10(ra) # 800065ae <user_trap_ret>
	...

Disassembly of section .text.user_trap_ret:

00000000800065ae <user_trap_ret>:
}


/// return to user space
#[no_mangle]
pub unsafe fn user_trap_ret() -> ! {
    800065ae:	7135                	addi	sp,sp,-160
        fn trampoline();
        fn userret();
        fn etext();
    }

    let my_proc = CPU_MANAGER.myproc().unwrap();
    800065b0:	ed06                	sd	ra,152(sp)

00000000800065b2 <.LBB2_23>:
    800065b2:	0005e517          	auipc	a0,0x5e
    800065b6:	b8e50513          	addi	a0,a0,-1138 # 80064140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    800065ba:	0000b097          	auipc	ra,0xb
    800065be:	470080e7          	jalr	1136(ra) # 80011a2a <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    800065c2:	f0aa                	sd	a0,96(sp)
    800065c4:	a009                	j	800065c6 <.LBB2_23+0x14>
    800065c6:	7506                	ld	a0,96(sp)

00000000800065c8 <.LBB2_24>:
    800065c8:	00020597          	auipc	a1,0x20
    800065cc:	2d858593          	addi	a1,a1,728 # 800268a0 <.L__unnamed_8>
    800065d0:	00008097          	auipc	ra,0x8
    800065d4:	6ec080e7          	jalr	1772(ra) # 8000ecbc <_ZN4core6option15Option$LT$T$GT$6unwrap17h81f0c84c54a80648E>
    800065d8:	85aa                	mv	a1,a0
    800065da:	ecae                	sd	a1,88(sp)
    800065dc:	f8aa                	sd	a0,112(sp)
    800065de:	a009                	j	800065e0 <.LBB2_24+0x18>

    // we're about to switch the destination of traps from
    // kerneltrap() to usertrap(), so turn off interrupts until
    // we're back in user space, where usertrap() is correct.
    sstatus::intr_off();
    800065e0:	00018097          	auipc	ra,0x18
    800065e4:	bee080e7          	jalr	-1042(ra) # 8001e1ce <_ZN6kernel4arch5riscv8register7sstatus8intr_off17hed3f5b43b53e6556E>
    800065e8:	a009                	j	800065ea <.LBB2_25>

00000000800065ea <.LBB2_25>:

    // send syscalls, interrupts, and exceptions to trampoline.S
    stvec::write(TRAMPOLINE + (uservec as usize - trampoline as usize));
    800065ea:	ffffb597          	auipc	a1,0xffffb
    800065ee:	a1658593          	addi	a1,a1,-1514 # 80001000 <trampoline>

00000000800065f2 <.LBB2_26>:
    800065f2:	ffffb517          	auipc	a0,0xffffb
    800065f6:	a0e50513          	addi	a0,a0,-1522 # 80001000 <trampoline>
    800065fa:	40b505b3          	sub	a1,a0,a1
    800065fe:	e8ae                	sd	a1,80(sp)
    80006600:	10b56063          	bltu	a0,a1,80006700 <.LBB2_30>
    80006604:	a009                	j	80006606 <.LBB2_26+0x14>
    80006606:	65c6                	ld	a1,80(sp)
    80006608:	04000537          	lui	a0,0x4000
    8000660c:	357d                	addiw	a0,a0,-1
    8000660e:	0532                	slli	a0,a0,0xc
    80006610:	952e                	add	a0,a0,a1
    80006612:	e4aa                	sd	a0,72(sp)
    80006614:	10b56563          	bltu	a0,a1,8000671e <.LBB2_32>
    80006618:	a009                	j	8000661a <.LBB2_26+0x28>
    8000661a:	6526                	ld	a0,72(sp)
    8000661c:	00005097          	auipc	ra,0x5
    80006620:	636080e7          	jalr	1590(ra) # 8000bc52 <_ZN6kernel4arch5riscv8register5stvec5write17ha770434f21f9bf27E>
    80006624:	a009                	j	80006626 <.LBB2_26+0x34>

    // set up trapframe values that uservec will need when
    // the process next re-enters the kernel.
 
    my_proc.user_init();
    80006626:	6566                	ld	a0,88(sp)
    80006628:	0000f097          	auipc	ra,0xf
    8000662c:	344080e7          	jalr	836(ra) # 8001596c <_ZN6kernel7process7process11task_struct9user_init17hc3178b7a708271cbE>
    80006630:	a009                	j	80006632 <.LBB2_26+0x40>

    // set up the registers that trampoline.S's sret will use
    // to get to user space.
    // Set S Previous Privilege mode to User. 
    let mut sstatus = sstatus::read();
    80006632:	00018097          	auipc	ra,0x18
    80006636:	b20080e7          	jalr	-1248(ra) # 8001e152 <_ZN6kernel4arch5riscv8register7sstatus4read17h1df585a8263fd2acE>
    8000663a:	f4aa                	sd	a0,104(sp)
    8000663c:	a009                	j	8000663e <.LBB2_26+0x4c>
    sstatus = sstatus::clear_spp(sstatus); // clear SPP to 0 for user mode
    8000663e:	7526                	ld	a0,104(sp)
    80006640:	00018097          	auipc	ra,0x18
    80006644:	bd2080e7          	jalr	-1070(ra) # 8001e212 <_ZN6kernel4arch5riscv8register7sstatus9clear_spp17h6421d1a1ec9c8eccE>
    80006648:	e0aa                	sd	a0,64(sp)
    8000664a:	a009                	j	8000664c <.LBB2_26+0x5a>
    8000664c:	6506                	ld	a0,64(sp)
    8000664e:	f4aa                	sd	a0,104(sp)
    sstatus = sstatus::user_intr_on(sstatus); // enable interrupts in user mode
    80006650:	00018097          	auipc	ra,0x18
    80006654:	bce080e7          	jalr	-1074(ra) # 8001e21e <_ZN6kernel4arch5riscv8register7sstatus12user_intr_on17h1304f970b07c3896E>
    80006658:	fc2a                	sd	a0,56(sp)
    8000665a:	a009                	j	8000665c <.LBB2_26+0x6a>
    8000665c:	7562                	ld	a0,56(sp)
    8000665e:	f4aa                	sd	a0,104(sp)
    sstatus::write(sstatus);
    80006660:	00018097          	auipc	ra,0x18
    80006664:	afe080e7          	jalr	-1282(ra) # 8001e15e <_ZN6kernel4arch5riscv8register7sstatus5write17h2e3a8152fe4defdaE>
    80006668:	a009                	j	8000666a <.LBB2_26+0x78>

    // set S Exception Program Counter to the saved user pc. 
    sepc::write((*my_proc.trapframe).epc);
    8000666a:	6566                	ld	a0,88(sp)
    8000666c:	7108                	ld	a0,32(a0)
    8000666e:	6d08                	ld	a0,24(a0)
    80006670:	ffffe097          	auipc	ra,0xffffe
    80006674:	56a080e7          	jalr	1386(ra) # 80004bda <_ZN6kernel4arch5riscv8register4sepc5write17h2074fd389defa9f2E>
    80006678:	a009                	j	8000667a <.LBB2_26+0x88>
    // }

    // println!("------{}", (*my_proc.trapframe).epc);
    
    // tell trampoline.S the user page table to switch to
    let satp = my_proc.pagetable.as_ref().unwrap().as_satp();
    8000667a:	6566                	ld	a0,88(sp)
    8000667c:	6d08                	ld	a0,24(a0)
    8000667e:	00006097          	auipc	ra,0x6
    80006682:	49c080e7          	jalr	1180(ra) # 8000cb1a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_ref17h449f973acae747ffE>
    80006686:	f82a                	sd	a0,48(sp)
    80006688:	a009                	j	8000668a <.LBB2_26+0x98>
    8000668a:	7542                	ld	a0,48(sp)

000000008000668c <.LBB2_27>:
    8000668c:	00020597          	auipc	a1,0x20
    80006690:	2a458593          	addi	a1,a1,676 # 80026930 <.L__unnamed_9>
    80006694:	00008097          	auipc	ra,0x8
    80006698:	6ca080e7          	jalr	1738(ra) # 8000ed5e <_ZN4core6option15Option$LT$T$GT$6unwrap17h97667cf20f9698d4E>
    8000669c:	f42a                	sd	a0,40(sp)
    8000669e:	a009                	j	800066a0 <.LBB2_27+0x14>
    800066a0:	7522                	ld	a0,40(sp)
    800066a2:	00010097          	auipc	ra,0x10
    800066a6:	52a080e7          	jalr	1322(ra) # 80016bcc <_ZN6kernel6memory7mapping10page_table9PageTable7as_satp17h97121d8f678f163eE>
    800066aa:	85aa                	mv	a1,a0
    800066ac:	f02e                	sd	a1,32(sp)
    800066ae:	fcaa                	sd	a0,120(sp)
    800066b0:	a009                	j	800066b2 <.LBB2_28>

00000000800066b2 <.LBB2_28>:

    // jump to trampoline.S at the top of memory, which
    // switches to the user page table, restores user registers,
    // and switches to user mode with sret. 
    let userret_virt = TRAMPOLINE + (userret as usize - trampoline as usize);
    800066b2:	ffffb597          	auipc	a1,0xffffb
    800066b6:	94e58593          	addi	a1,a1,-1714 # 80001000 <trampoline>

00000000800066ba <.LBB2_29>:
    800066ba:	ffffb517          	auipc	a0,0xffffb
    800066be:	9e650513          	addi	a0,a0,-1562 # 800010a0 <userret>
    800066c2:	40b505b3          	sub	a1,a0,a1
    800066c6:	ec2e                	sd	a1,24(sp)
    800066c8:	06b56963          	bltu	a0,a1,8000673a <.LBB2_34>
    800066cc:	a009                	j	800066ce <.LBB2_29+0x14>
    800066ce:	65e2                	ld	a1,24(sp)
    800066d0:	04000537          	lui	a0,0x4000
    800066d4:	357d                	addiw	a0,a0,-1
    800066d6:	0532                	slli	a0,a0,0xc
    800066d8:	952e                	add	a0,a0,a1
    800066da:	e82a                	sd	a0,16(sp)
    800066dc:	06b56e63          	bltu	a0,a1,80006758 <.LBB2_36>
    800066e0:	a009                	j	800066e2 <.LBB2_29+0x28>
    800066e2:	6542                	ld	a0,16(sp)
    800066e4:	e12a                	sd	a0,128(sp)
    let userret_virt: extern "C" fn(usize, usize) -> ! = 
    core::mem::transmute(userret_virt as usize);
    800066e6:	e52a                	sd	a0,136(sp)
    800066e8:	85aa                	mv	a1,a0
    800066ea:	e42e                	sd	a1,8(sp)
    800066ec:	e92a                	sd	a0,144(sp)
    800066ee:	a009                	j	800066f0 <.LBB2_29+0x36>
    
    userret_virt(TRAPFRAME, satp);
    800066f0:	6622                	ld	a2,8(sp)
    800066f2:	7582                	ld	a1,32(sp)
    800066f4:	02000537          	lui	a0,0x2000
    800066f8:	357d                	addiw	a0,a0,-1
    800066fa:	0536                	slli	a0,a0,0xd
    800066fc:	9602                	jalr	a2
	...

0000000080006700 <.LBB2_30>:
    stvec::write(TRAMPOLINE + (uservec as usize - trampoline as usize));
    80006700:	00020517          	auipc	a0,0x20
    80006704:	1d050513          	addi	a0,a0,464 # 800268d0 <str.0>

0000000080006708 <.LBB2_31>:
    80006708:	00020617          	auipc	a2,0x20
    8000670c:	1b060613          	addi	a2,a2,432 # 800268b8 <.L__unnamed_10>
    80006710:	02100593          	li	a1,33
    80006714:	0001c097          	auipc	ra,0x1c
    80006718:	9e8080e7          	jalr	-1560(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008000671e <.LBB2_32>:
    8000671e:	00020517          	auipc	a0,0x20
    80006722:	1f250513          	addi	a0,a0,498 # 80026910 <str.1>

0000000080006726 <.LBB2_33>:
    80006726:	00020617          	auipc	a2,0x20
    8000672a:	1d260613          	addi	a2,a2,466 # 800268f8 <.L__unnamed_11>
    8000672e:	45f1                	li	a1,28
    80006730:	0001c097          	auipc	ra,0x1c
    80006734:	9cc080e7          	jalr	-1588(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008000673a <.LBB2_34>:
    let userret_virt = TRAMPOLINE + (userret as usize - trampoline as usize);
    8000673a:	00020517          	auipc	a0,0x20
    8000673e:	19650513          	addi	a0,a0,406 # 800268d0 <str.0>

0000000080006742 <.LBB2_35>:
    80006742:	00020617          	auipc	a2,0x20
    80006746:	20660613          	addi	a2,a2,518 # 80026948 <.L__unnamed_12>
    8000674a:	02100593          	li	a1,33
    8000674e:	0001c097          	auipc	ra,0x1c
    80006752:	9ae080e7          	jalr	-1618(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080006758 <.LBB2_36>:
    80006758:	00020517          	auipc	a0,0x20
    8000675c:	1b850513          	addi	a0,a0,440 # 80026910 <str.1>

0000000080006760 <.LBB2_37>:
    80006760:	00020617          	auipc	a2,0x20
    80006764:	20060613          	addi	a2,a2,512 # 80026960 <.L__unnamed_13>
    80006768:	45f1                	li	a1,28
    8000676a:	0001c097          	auipc	ra,0x1c
    8000676e:	992080e7          	jalr	-1646(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text.kernel_trap:

0000000080006774 <kernel_trap>:
}

/// interrupts and exceptions from kernel code go here via kernelvec,
/// on whatever the current kernel stack is.
#[no_mangle]
pub unsafe fn kernel_trap(
    80006774:	c2010113          	addi	sp,sp,-992
    80006778:	3c113c23          	sd	ra,984(sp)
    8000677c:	f1c6                	sd	a7,224(sp)
    8000677e:	34a13423          	sd	a0,840(sp)
    80006782:	34b13823          	sd	a1,848(sp)
    80006786:	34c13c23          	sd	a2,856(sp)
    8000678a:	36d13023          	sd	a3,864(sp)
    8000678e:	36e13423          	sd	a4,872(sp)
    80006792:	36f13823          	sd	a5,880(sp)
    80006796:	37013c23          	sd	a6,888(sp)
    8000679a:	39113023          	sd	a7,896(sp)
   _: usize, _: usize, _: usize, _: usize,
   _: usize, _: usize, _: usize, which: usize
) {
    let sepc = sepc::read();
    8000679e:	ffffe097          	auipc	ra,0xffffe
    800067a2:	430080e7          	jalr	1072(ra) # 80004bce <_ZN6kernel4arch5riscv8register4sepc4read17hcaa3e2a818646c19E>
    800067a6:	f5aa                	sd	a0,232(sp)
    800067a8:	a009                	j	800067aa <kernel_trap+0x36>
    let sstatus = sstatus::read();
    800067aa:	00018097          	auipc	ra,0x18
    800067ae:	9a8080e7          	jalr	-1624(ra) # 8001e152 <_ZN6kernel4arch5riscv8register7sstatus4read17h1df585a8263fd2acE>
    800067b2:	85aa                	mv	a1,a0
    800067b4:	edae                	sd	a1,216(sp)
    800067b6:	38a13423          	sd	a0,904(sp)
    800067ba:	a009                	j	800067bc <kernel_trap+0x48>
    let scause = scause::read();
    800067bc:	00001097          	auipc	ra,0x1
    800067c0:	3ae080e7          	jalr	942(ra) # 80007b6a <_ZN6kernel4arch5riscv8register6scause4read17h6f388cd664aa7885E>
    800067c4:	85aa                	mv	a1,a0
    800067c6:	e9ae                	sd	a1,208(sp)
    800067c8:	38a13823          	sd	a0,912(sp)
    800067cc:	a009                	j	800067ce <kernel_trap+0x5a>
    let stval = stval::read();
    800067ce:	fffff097          	auipc	ra,0xfffff
    800067d2:	aee080e7          	jalr	-1298(ra) # 800052bc <_ZN6kernel4arch5riscv8register5stval4read17h328c9da49d53d19fE>
    800067d6:	f9aa                	sd	a0,240(sp)
    800067d8:	a009                	j	800067da <kernel_trap+0x66>

    if !sstatus::is_from_supervisor() {
    800067da:	00018097          	auipc	ra,0x18
    800067de:	990080e7          	jalr	-1648(ra) # 8001e16a <_ZN6kernel4arch5riscv8register7sstatus18is_from_supervisor17h09ba8119c534748eE>
    800067e2:	e5aa                	sd	a0,200(sp)
    800067e4:	a009                	j	800067e6 <kernel_trap+0x72>
    800067e6:	652e                	ld	a0,200(sp)
    800067e8:	e105                	bnez	a0,80006808 <.LBB3_82+0x14>
    800067ea:	a009                	j	800067ec <.LBB3_81>

00000000800067ec <.LBB3_81>:
        panic!("not from supervisor mode");
    800067ec:	00020517          	auipc	a0,0x20
    800067f0:	18c50513          	addi	a0,a0,396 # 80026978 <.L__unnamed_14>

00000000800067f4 <.LBB3_82>:
    800067f4:	00020617          	auipc	a2,0x20
    800067f8:	19c60613          	addi	a2,a2,412 # 80026990 <.L__unnamed_15>
    800067fc:	45e1                	li	a1,24
    800067fe:	0001c097          	auipc	ra,0x1c
    80006802:	8fe080e7          	jalr	-1794(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80006806:	0000                	unimp
    }

    if sstatus::intr_get() {
    80006808:	00018097          	auipc	ra,0x18
    8000680c:	9ea080e7          	jalr	-1558(ra) # 8001e1f2 <_ZN6kernel4arch5riscv8register7sstatus8intr_get17h3e12e0f19cb31fd5E>
    80006810:	e1aa                	sd	a0,192(sp)
    80006812:	a009                	j	80006814 <.LBB3_82+0x20>
    80006814:	650e                	ld	a0,192(sp)
    80006816:	4581                	li	a1,0
    80006818:	02b50263          	beq	a0,a1,8000683c <.LBB3_84+0x16>
    8000681c:	a009                	j	8000681e <.LBB3_83>

000000008000681e <.LBB3_83>:
        panic!("kerneltrap(): interrupts enabled");
    8000681e:	0001f517          	auipc	a0,0x1f
    80006822:	a1c50513          	addi	a0,a0,-1508 # 8002523a <.L__unnamed_11+0x1e>

0000000080006826 <.LBB3_84>:
    80006826:	00020617          	auipc	a2,0x20
    8000682a:	18260613          	addi	a2,a2,386 # 800269a8 <.L__unnamed_17>
    8000682e:	02000593          	li	a1,32
    80006832:	0001c097          	auipc	ra,0x1c
    80006836:	8ca080e7          	jalr	-1846(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8000683a:	0000                	unimp
    }

    let mut local_spec = sepc;
    8000683c:	654e                	ld	a0,208(sp)
    8000683e:	75ae                	ld	a1,232(sp)
    80006840:	fdae                	sd	a1,248(sp)
    // Update progrma counter
    let scause = Scause::new(scause);
    80006842:	00001097          	auipc	ra,0x1
    80006846:	428080e7          	jalr	1064(ra) # 80007c6a <_ZN6kernel4arch5riscv8register6scause6Scause3new17hf1aad0ee6c83efd3E>
    8000684a:	e22a                	sd	a0,256(sp)
    8000684c:	a009                	j	8000684e <.LBB3_84+0x28>
    8000684e:	0208                	addi	a0,sp,256
    match scause.cause() {
    80006850:	00001097          	auipc	ra,0x1
    80006854:	4c8080e7          	jalr	1224(ra) # 80007d18 <_ZN6kernel4arch5riscv8register6scause6Scause5cause17h87ca94701d022899E>
    80006858:	10a10423          	sb	a0,264(sp)
    8000685c:	10b104a3          	sb	a1,265(sp)
    80006860:	a009                	j	80006862 <.LBB3_84+0x3c>
        Trap::Exception(Exception::Breakpoint) => {
    80006862:	10814503          	lbu	a0,264(sp)
    80006866:	fd2a                	sd	a0,184(sp)
    80006868:	8905                	andi	a0,a0,1
    8000686a:	4581                	li	a1,0
    8000686c:	00b50863          	beq	a0,a1,8000687c <.LBB3_84+0x56>
    80006870:	a009                	j	80006872 <.LBB3_84+0x4c>
    80006872:	756a                	ld	a0,184(sp)
    80006874:	4585                	li	a1,1
    80006876:	02b50d63          	beq	a0,a1,800068b0 <.LBB3_86+0x14>
    8000687a:	a829                	j	80006894 <.LBB3_16>
            println!("stval: 0x{:x}", stval);
            panic!();
        },

        // Device Interruput
        Trap::Interrupt(Interrupt::SupervisorExternal) => {
    8000687c:	10914503          	lbu	a0,265(sp)
    80006880:	f92a                	sd	a0,176(sp)
    80006882:	4585                	li	a1,1
    80006884:	42b50463          	beq	a0,a1,80006cac <.LBB3_118+0x22>
    80006888:	a009                	j	8000688a <.LBB3_84+0x64>
    8000688a:	754a                	ld	a0,176(sp)
    8000688c:	4595                	li	a1,5
    8000688e:	34b50f63          	beq	a0,a1,80006bec <.LBB3_114+0x14>
    80006892:	a009                	j	80006894 <.LBB3_16>

0000000080006894 <.LBB3_16>:
            // give up the cpu. 
            CPU_MANAGER.mycpu().try_yield_proc();
        }

        _ => {       
            panic!("Unresolved Trap!");
    80006894:	0001f517          	auipc	a0,0x1f
    80006898:	dfc50513          	addi	a0,a0,-516 # 80025690 <.L__unnamed_35+0xc8>

000000008000689c <.LBB3_86>:
    8000689c:	00020617          	auipc	a2,0x20
    800068a0:	3b460613          	addi	a2,a2,948 # 80026c50 <.L__unnamed_19>
    800068a4:	45c1                	li	a1,16
    800068a6:	0001c097          	auipc	ra,0x1c
    800068aa:	856080e7          	jalr	-1962(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    800068ae:	0000                	unimp
        Trap::Exception(Exception::Breakpoint) => {
    800068b0:	10914503          	lbu	a0,265(sp)
    800068b4:	fff50593          	addi	a1,a0,-1
    800068b8:	f52e                	sd	a1,168(sp)
    800068ba:	4529                	li	a0,10
    800068bc:	fcb56ce3          	bltu	a0,a1,80006894 <.LBB3_16>
    800068c0:	752a                	ld	a0,168(sp)
    800068c2:	050e                	slli	a0,a0,0x3

00000000800068c4 <.LBB3_87>:
    800068c4:	00020597          	auipc	a1,0x20
    800068c8:	d9458593          	addi	a1,a1,-620 # 80026658 <.LJTI3_0>
    800068cc:	952e                	add	a0,a0,a1
    800068ce:	6108                	ld	a0,0(a0)
    800068d0:	8502                	jr	a0

00000000800068d2 <.LBB3_19>:
            local_spec += 2;
    800068d2:	75ee                	ld	a1,248(sp)
    800068d4:	00258513          	addi	a0,a1,2
    800068d8:	f12a                	sd	a0,160(sp)
    800068da:	44b56263          	bltu	a0,a1,80006d1e <.LBB3_120>
    800068de:	a009                	j	800068e0 <.LBB3_19+0xe>
    800068e0:	750a                	ld	a0,160(sp)
    800068e2:	fdaa                	sd	a0,248(sp)

00000000800068e4 <.LBB3_88>:
            println!("BreakPoint!");
    800068e4:	00020597          	auipc	a1,0x20
    800068e8:	31458593          	addi	a1,a1,788 # 80026bf8 <.L__unnamed_20>

00000000800068ec <.LBB3_89>:
    800068ec:	00020697          	auipc	a3,0x20
    800068f0:	29468693          	addi	a3,a3,660 # 80026b80 <.L__unnamed_53>
    800068f4:	0a08                	addi	a0,sp,272
    800068f6:	4605                	li	a2,1
    800068f8:	4701                	li	a4,0
    800068fa:	fffff097          	auipc	ra,0xfffff
    800068fe:	b3a080e7          	jalr	-1222(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80006902:	a009                	j	80006904 <.LBB3_89+0x18>
    80006904:	0a08                	addi	a0,sp,272
    80006906:	00017097          	auipc	ra,0x17
    8000690a:	2aa080e7          	jalr	682(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8000690e:	a009                	j	80006910 <.LBB3_89+0x24>
    match scause.cause() {
    80006910:	a6f5                	j	80006cfc <.LBB3_119+0x22>

0000000080006912 <.LBB3_23>:
        Trap::Exception(Exception::LoadFault) => panic!("Load Fault!"),
    80006912:	00020517          	auipc	a0,0x20
    80006916:	29650513          	addi	a0,a0,662 # 80026ba8 <.L__unnamed_22>

000000008000691a <.LBB3_91>:
    8000691a:	00020617          	auipc	a2,0x20
    8000691e:	29e60613          	addi	a2,a2,670 # 80026bb8 <.L__unnamed_23>
    80006922:	45ad                	li	a1,11
    80006924:	0001b097          	auipc	ra,0x1b
    80006928:	7d8080e7          	jalr	2008(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008000692e <.LBB3_24>:
    8000692e:	1988                	addi	a0,sp,240
            panic!("[Panic] Load Page Fault!\n stval: 0x{:x}\n sepc: 0x{:x}\n", stval, sepc);
    80006930:	eb2a                	sd	a0,400(sp)
    80006932:	11ac                	addi	a1,sp,232
    80006934:	e52e                	sd	a1,136(sp)
    80006936:	ef2e                	sd	a1,408(sp)
    80006938:	3aa13423          	sd	a0,936(sp)
    8000693c:	3ab13823          	sd	a1,944(sp)

0000000080006940 <.LBB3_92>:
    80006940:	0001e597          	auipc	a1,0x1e
    80006944:	8fa58593          	addi	a1,a1,-1798 # 8002423a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h760b07191d46b3f2E>
    80006948:	00019097          	auipc	ra,0x19
    8000694c:	bde080e7          	jalr	-1058(ra) # 8001f526 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    80006950:	e92a                	sd	a0,144(sp)
    80006952:	ed2e                	sd	a1,152(sp)
    80006954:	a009                	j	80006956 <.LBB3_92+0x16>
    80006956:	652a                	ld	a0,136(sp)

0000000080006958 <.LBB3_93>:
    80006958:	0001e597          	auipc	a1,0x1e
    8000695c:	8e258593          	addi	a1,a1,-1822 # 8002423a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h760b07191d46b3f2E>
    80006960:	00019097          	auipc	ra,0x19
    80006964:	bc6080e7          	jalr	-1082(ra) # 8001f526 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    80006968:	fcaa                	sd	a0,120(sp)
    8000696a:	e12e                	sd	a1,128(sp)
    8000696c:	a009                	j	8000696e <.LBB3_93+0x16>
    8000696e:	650a                	ld	a0,128(sp)
    80006970:	75e6                	ld	a1,120(sp)
    80006972:	666a                	ld	a2,152(sp)
    80006974:	66ca                	ld	a3,144(sp)
    80006976:	fab6                	sd	a3,368(sp)
    80006978:	feb2                	sd	a2,376(sp)
    8000697a:	e32e                	sd	a1,384(sp)
    8000697c:	e72a                	sd	a0,392(sp)

000000008000697e <.LBB3_94>:
    8000697e:	00020597          	auipc	a1,0x20
    80006982:	0e258593          	addi	a1,a1,226 # 80026a60 <.L__unnamed_24>
    80006986:	0288                	addi	a0,sp,320
    80006988:	460d                	li	a2,3
    8000698a:	1a94                	addi	a3,sp,368
    8000698c:	4709                	li	a4,2
    8000698e:	fffff097          	auipc	ra,0xfffff
    80006992:	aa6080e7          	jalr	-1370(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80006996:	a009                	j	80006998 <.LBB3_95>

0000000080006998 <.LBB3_95>:
    80006998:	00020597          	auipc	a1,0x20
    8000699c:	0f858593          	addi	a1,a1,248 # 80026a90 <.L__unnamed_25>
    800069a0:	0288                	addi	a0,sp,320
    800069a2:	0001b097          	auipc	ra,0x1b
    800069a6:	7c6080e7          	jalr	1990(ra) # 80022168 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
	...

00000000800069ac <.LBB3_28>:
    800069ac:	1988                	addi	a0,sp,240
            panic!("[Panic] Store Page Fault!\n stval: 0x{:x}\n sepc: 0x{:x}\n", stval, sepc);
    800069ae:	fbaa                	sd	a0,496(sp)
    800069b0:	11ac                	addi	a1,sp,232
    800069b2:	f0ae                	sd	a1,96(sp)
    800069b4:	ffae                	sd	a1,504(sp)
    800069b6:	38a13c23          	sd	a0,920(sp)
    800069ba:	3ab13023          	sd	a1,928(sp)

00000000800069be <.LBB3_96>:
    800069be:	0001e597          	auipc	a1,0x1e
    800069c2:	87c58593          	addi	a1,a1,-1924 # 8002423a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h760b07191d46b3f2E>
    800069c6:	00019097          	auipc	ra,0x19
    800069ca:	b60080e7          	jalr	-1184(ra) # 8001f526 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    800069ce:	f4aa                	sd	a0,104(sp)
    800069d0:	f8ae                	sd	a1,112(sp)
    800069d2:	a009                	j	800069d4 <.LBB3_96+0x16>
    800069d4:	7506                	ld	a0,96(sp)

00000000800069d6 <.LBB3_97>:
    800069d6:	0001e597          	auipc	a1,0x1e
    800069da:	86458593          	addi	a1,a1,-1948 # 8002423a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h760b07191d46b3f2E>
    800069de:	00019097          	auipc	ra,0x19
    800069e2:	b48080e7          	jalr	-1208(ra) # 8001f526 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    800069e6:	e8aa                	sd	a0,80(sp)
    800069e8:	ecae                	sd	a1,88(sp)
    800069ea:	a009                	j	800069ec <.LBB3_97+0x16>
    800069ec:	6566                	ld	a0,88(sp)
    800069ee:	65c6                	ld	a1,80(sp)
    800069f0:	7646                	ld	a2,112(sp)
    800069f2:	76a6                	ld	a3,104(sp)
    800069f4:	ebb6                	sd	a3,464(sp)
    800069f6:	efb2                	sd	a2,472(sp)
    800069f8:	f3ae                	sd	a1,480(sp)
    800069fa:	f7aa                	sd	a0,488(sp)

00000000800069fc <.LBB3_98>:
    800069fc:	00020597          	auipc	a1,0x20
    80006a00:	ff458593          	addi	a1,a1,-12 # 800269f0 <.L__unnamed_26>
    80006a04:	1308                	addi	a0,sp,416
    80006a06:	460d                	li	a2,3
    80006a08:	0b94                	addi	a3,sp,464
    80006a0a:	4709                	li	a4,2
    80006a0c:	fffff097          	auipc	ra,0xfffff
    80006a10:	a28080e7          	jalr	-1496(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80006a14:	a009                	j	80006a16 <.LBB3_99>

0000000080006a16 <.LBB3_99>:
    80006a16:	00020597          	auipc	a1,0x20
    80006a1a:	00a58593          	addi	a1,a1,10 # 80026a20 <.L__unnamed_27>
    80006a1e:	1308                	addi	a0,sp,416
    80006a20:	0001b097          	auipc	ra,0x1b
    80006a24:	748080e7          	jalr	1864(ra) # 80022168 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
	...

0000000080006a2a <.LBB3_32>:
    80006a2a:	750e                	ld	a0,224(sp)
    80006a2c:	45a1                	li	a1,8
                SHUTDOWN => {
    80006a2e:	02b50663          	beq	a0,a1,80006a5a <.LBB3_102>
    80006a32:	a009                	j	80006a34 <.LBB3_32+0xa>
    80006a34:	750e                	ld	a0,224(sp)
    80006a36:	45a5                	li	a1,9
    80006a38:	04b50f63          	beq	a0,a1,80006a96 <.LBB3_104>
    80006a3c:	a009                	j	80006a3e <.LBB3_100>

0000000080006a3e <.LBB3_100>:
                    panic!("Unresolved Kernel Syscall!");
    80006a3e:	00020517          	auipc	a0,0x20
    80006a42:	0e250513          	addi	a0,a0,226 # 80026b20 <.L__unnamed_28>

0000000080006a46 <.LBB3_101>:
    80006a46:	00020617          	auipc	a2,0x20
    80006a4a:	0fa60613          	addi	a2,a2,250 # 80026b40 <.L__unnamed_29>
    80006a4e:	45e9                	li	a1,26
    80006a50:	0001b097          	auipc	ra,0x1b
    80006a54:	6ac080e7          	jalr	1708(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080006a5a <.LBB3_102>:
                    println!("\x1b[1;31mShutdown!\x1b[0m");
    80006a5a:	00020597          	auipc	a1,0x20
    80006a5e:	13e58593          	addi	a1,a1,318 # 80026b98 <.L__unnamed_30>

0000000080006a62 <.LBB3_103>:
    80006a62:	00020697          	auipc	a3,0x20
    80006a66:	11e68693          	addi	a3,a3,286 # 80026b80 <.L__unnamed_53>
    80006a6a:	0408                	addi	a0,sp,512
    80006a6c:	4605                	li	a2,1
    80006a6e:	4701                	li	a4,0
    80006a70:	fffff097          	auipc	ra,0xfffff
    80006a74:	9c4080e7          	jalr	-1596(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80006a78:	a009                	j	80006a7a <.LBB3_103+0x18>
    80006a7a:	0408                	addi	a0,sp,512
    80006a7c:	00017097          	auipc	ra,0x17
    80006a80:	134080e7          	jalr	308(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    80006a84:	a009                	j	80006a86 <.LBB3_103+0x24>
    80006a86:	4581                	li	a1,0
                    system_reset(
    80006a88:	852e                	mv	a0,a1
    80006a8a:	fffff097          	auipc	ra,0xfffff
    80006a8e:	83e080e7          	jalr	-1986(ra) # 800052c8 <_ZN6kernel8shutdown12system_reset17h91571bbff266ab01E>
    80006a92:	a009                	j	80006a94 <.LBB3_103+0x32>
            match which  {
    80006a94:	a4a5                	j	80006cfc <.LBB3_119+0x22>

0000000080006a96 <.LBB3_104>:
                    println!("\x1b[1;31mReboot!\x1b[0m");
    80006a96:	00020597          	auipc	a1,0x20
    80006a9a:	0da58593          	addi	a1,a1,218 # 80026b70 <.L__unnamed_31>

0000000080006a9e <.LBB3_105>:
    80006a9e:	00020697          	auipc	a3,0x20
    80006aa2:	0e268693          	addi	a3,a3,226 # 80026b80 <.L__unnamed_53>
    80006aa6:	1c08                	addi	a0,sp,560
    80006aa8:	4605                	li	a2,1
    80006aaa:	4701                	li	a4,0
    80006aac:	fffff097          	auipc	ra,0xfffff
    80006ab0:	988080e7          	jalr	-1656(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80006ab4:	a009                	j	80006ab6 <.LBB3_105+0x18>
    80006ab6:	1c08                	addi	a0,sp,560
    80006ab8:	00017097          	auipc	ra,0x17
    80006abc:	0f8080e7          	jalr	248(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    80006ac0:	a009                	j	80006ac2 <.LBB3_105+0x24>
    80006ac2:	4505                	li	a0,1
    80006ac4:	4581                	li	a1,0
                    system_reset(
    80006ac6:	fffff097          	auipc	ra,0xfffff
    80006aca:	802080e7          	jalr	-2046(ra) # 800052c8 <_ZN6kernel8shutdown12system_reset17h91571bbff266ab01E>
    80006ace:	a009                	j	80006ad0 <.LBB3_105+0x32>
            match which  {
    80006ad0:	a435                	j	80006cfc <.LBB3_119+0x22>

0000000080006ad2 <.LBB3_43>:
    80006ad2:	11a8                	addi	a0,sp,232
        Trap::Exception(Exception::InstructionFault) => panic!("Instruction Fault, sepc: 0x{:x}", sepc),
    80006ad4:	2aa13023          	sd	a0,672(sp)
    80006ad8:	3ca13423          	sd	a0,968(sp)

0000000080006adc <.LBB3_106>:
    80006adc:	0001d597          	auipc	a1,0x1d
    80006ae0:	75e58593          	addi	a1,a1,1886 # 8002423a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h760b07191d46b3f2E>
    80006ae4:	00019097          	auipc	ra,0x19
    80006ae8:	a42080e7          	jalr	-1470(ra) # 8001f526 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    80006aec:	e0aa                	sd	a0,64(sp)
    80006aee:	e4ae                	sd	a1,72(sp)
    80006af0:	a009                	j	80006af2 <.LBB3_106+0x16>
    80006af2:	6526                	ld	a0,72(sp)
    80006af4:	6586                	ld	a1,64(sp)
    80006af6:	28b13823          	sd	a1,656(sp)
    80006afa:	28a13c23          	sd	a0,664(sp)

0000000080006afe <.LBB3_107>:
    80006afe:	00020597          	auipc	a1,0x20
    80006b02:	12a58593          	addi	a1,a1,298 # 80026c28 <.L__unnamed_32>
    80006b06:	1488                	addi	a0,sp,608
    80006b08:	0d14                	addi	a3,sp,656
    80006b0a:	4705                	li	a4,1
    80006b0c:	863a                	mv	a2,a4
    80006b0e:	fffff097          	auipc	ra,0xfffff
    80006b12:	926080e7          	jalr	-1754(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80006b16:	a009                	j	80006b18 <.LBB3_108>

0000000080006b18 <.LBB3_108>:
    80006b18:	00020597          	auipc	a1,0x20
    80006b1c:	12058593          	addi	a1,a1,288 # 80026c38 <.L__unnamed_33>
    80006b20:	1488                	addi	a0,sp,608
    80006b22:	0001b097          	auipc	ra,0x1b
    80006b26:	646080e7          	jalr	1606(ra) # 80022168 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
	...

0000000080006b2c <.LBB3_46>:
    80006b2c:	11a8                	addi	a0,sp,232
            println!("sepc: 0x{:x}", sepc);
    80006b2e:	2ea13423          	sd	a0,744(sp)
    80006b32:	3aa13c23          	sd	a0,952(sp)

0000000080006b36 <.LBB3_109>:
    80006b36:	0001d597          	auipc	a1,0x1d
    80006b3a:	70458593          	addi	a1,a1,1796 # 8002423a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h760b07191d46b3f2E>
    80006b3e:	00019097          	auipc	ra,0x19
    80006b42:	9e8080e7          	jalr	-1560(ra) # 8001f526 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    80006b46:	f82a                	sd	a0,48(sp)
    80006b48:	fc2e                	sd	a1,56(sp)
    80006b4a:	a009                	j	80006b4c <.LBB3_109+0x16>
    80006b4c:	7562                	ld	a0,56(sp)
    80006b4e:	75c2                	ld	a1,48(sp)
    80006b50:	2cb13c23          	sd	a1,728(sp)
    80006b54:	2ea13023          	sd	a0,736(sp)

0000000080006b58 <.LBB3_110>:
    80006b58:	00020597          	auipc	a1,0x20
    80006b5c:	f5058593          	addi	a1,a1,-176 # 80026aa8 <.L__unnamed_34>
    80006b60:	1528                	addi	a0,sp,680
    80006b62:	4609                	li	a2,2
    80006b64:	0db4                	addi	a3,sp,728
    80006b66:	4705                	li	a4,1
    80006b68:	fffff097          	auipc	ra,0xfffff
    80006b6c:	8cc080e7          	jalr	-1844(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80006b70:	a009                	j	80006b72 <.LBB3_110+0x1a>
    80006b72:	1528                	addi	a0,sp,680
    80006b74:	00017097          	auipc	ra,0x17
    80006b78:	03c080e7          	jalr	60(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    80006b7c:	a009                	j	80006b7e <.LBB3_110+0x26>
    80006b7e:	1988                	addi	a0,sp,240
            println!("stval: 0x{:x}", stval);
    80006b80:	32a13823          	sd	a0,816(sp)
    80006b84:	3ca13023          	sd	a0,960(sp)

0000000080006b88 <.LBB3_111>:
    80006b88:	0001d597          	auipc	a1,0x1d
    80006b8c:	6b258593          	addi	a1,a1,1714 # 8002423a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h760b07191d46b3f2E>
    80006b90:	00019097          	auipc	ra,0x19
    80006b94:	996080e7          	jalr	-1642(ra) # 8001f526 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    80006b98:	f02a                	sd	a0,32(sp)
    80006b9a:	f42e                	sd	a1,40(sp)
    80006b9c:	a009                	j	80006b9e <.LBB3_111+0x16>
    80006b9e:	7522                	ld	a0,40(sp)
    80006ba0:	7582                	ld	a1,32(sp)
    80006ba2:	32b13023          	sd	a1,800(sp)
    80006ba6:	32a13423          	sd	a0,808(sp)

0000000080006baa <.LBB3_112>:
    80006baa:	00020597          	auipc	a1,0x20
    80006bae:	f2e58593          	addi	a1,a1,-210 # 80026ad8 <.L__unnamed_35>
    80006bb2:	1d88                	addi	a0,sp,752
    80006bb4:	4609                	li	a2,2
    80006bb6:	1614                	addi	a3,sp,800
    80006bb8:	4705                	li	a4,1
    80006bba:	fffff097          	auipc	ra,0xfffff
    80006bbe:	87a080e7          	jalr	-1926(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80006bc2:	a009                	j	80006bc4 <.LBB3_112+0x1a>
    80006bc4:	1d88                	addi	a0,sp,752
    80006bc6:	00017097          	auipc	ra,0x17
    80006bca:	fea080e7          	jalr	-22(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    80006bce:	a009                	j	80006bd0 <.LBB3_113>

0000000080006bd0 <.LBB3_113>:
            panic!();
    80006bd0:	00020517          	auipc	a0,0x20
    80006bd4:	f2850513          	addi	a0,a0,-216 # 80026af8 <.L__unnamed_36>

0000000080006bd8 <.LBB3_114>:
    80006bd8:	00020617          	auipc	a2,0x20
    80006bdc:	f3060613          	addi	a2,a2,-208 # 80026b08 <.L__unnamed_37>
    80006be0:	45b9                	li	a1,14
    80006be2:	0001b097          	auipc	ra,0x1b
    80006be6:	51a080e7          	jalr	1306(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80006bea:	0000                	unimp
            if let Some(interrupt) = plic_claim() {
    80006bec:	00017097          	auipc	ra,0x17
    80006bf0:	d42080e7          	jalr	-702(ra) # 8001d92e <_ZN6kernel6driver4plic10plic_claim17h6764dad227b44c96E>
    80006bf4:	32a12c23          	sw	a0,824(sp)
    80006bf8:	32b12e23          	sw	a1,828(sp)
    80006bfc:	a009                	j	80006bfe <.LBB3_114+0x26>
    80006bfe:	33812503          	lw	a0,824(sp)
    80006c02:	4581                	li	a1,0
    80006c04:	00b51463          	bne	a0,a1,80006c0c <.LBB3_114+0x34>
    80006c08:	a009                	j	80006c0a <.LBB3_114+0x32>
    80006c0a:	a8cd                	j	80006cfc <.LBB3_119+0x22>
    80006c0c:	33c12503          	lw	a0,828(sp)
    80006c10:	02051593          	slli	a1,a0,0x20
    80006c14:	9181                	srli	a1,a1,0x20
    80006c16:	ec2e                	sd	a1,24(sp)
    80006c18:	3ca12a23          	sw	a0,980(sp)
    80006c1c:	4585                	li	a1,1
                    VIRTIO0_IRQ => {
    80006c1e:	02b50763          	beq	a0,a1,80006c4c <.LBB3_117>
    80006c22:	a009                	j	80006c24 <.LBB3_114+0x4c>
    80006c24:	6562                	ld	a0,24(sp)
    80006c26:	2501                	sext.w	a0,a0
    80006c28:	45a9                	li	a1,10
    80006c2a:	06b50063          	beq	a0,a1,80006c8a <.LBB3_118>
    80006c2e:	a009                	j	80006c30 <.LBB3_115>

0000000080006c30 <.LBB3_115>:
                        panic!("Unresolved interrupt");
    80006c30:	00020517          	auipc	a0,0x20
    80006c34:	c4050513          	addi	a0,a0,-960 # 80026870 <.L__unnamed_4>

0000000080006c38 <.LBB3_116>:
    80006c38:	00020617          	auipc	a2,0x20
    80006c3c:	03060613          	addi	a2,a2,48 # 80026c68 <.L__unnamed_38>
    80006c40:	45d1                	li	a1,20
    80006c42:	0001b097          	auipc	ra,0x1b
    80006c46:	4ba080e7          	jalr	1210(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080006c4c <.LBB3_117>:
                        DISK.acquire().intr();
    80006c4c:	00056517          	auipc	a0,0x56
    80006c50:	3b450513          	addi	a0,a0,948 # 8005d000 <_ZN6kernel6driver11virtio_disk4DISK17h9e8917083150b34aE>
    80006c54:	0000a097          	auipc	ra,0xa
    80006c58:	900080e7          	jalr	-1792(ra) # 80010554 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h922bace5232f6228E>
    80006c5c:	34a13023          	sd	a0,832(sp)
    80006c60:	a009                	j	80006c62 <.LBB3_117+0x16>
    80006c62:	0688                	addi	a0,sp,832
    80006c64:	0000a097          	auipc	ra,0xa
    80006c68:	70c080e7          	jalr	1804(ra) # 80011370 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h362a59dae1fa4f35E>
    80006c6c:	e82a                	sd	a0,16(sp)
    80006c6e:	a009                	j	80006c70 <.LBB3_117+0x24>
    80006c70:	6542                	ld	a0,16(sp)
    80006c72:	00018097          	auipc	ra,0x18
    80006c76:	4d8080e7          	jalr	1240(ra) # 8001f14a <_ZN6kernel6driver11virtio_disk4Disk4intr17h780fdb71fd330281E>
    80006c7a:	a009                	j	80006c7c <.LBB3_117+0x30>
    80006c7c:	0688                	addi	a0,sp,832
    80006c7e:	00000097          	auipc	ra,0x0
    80006c82:	45c080e7          	jalr	1116(ra) # 800070da <_ZN4core3ptr99drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..driver..virtio_disk..Disk$GT$$GT$17h4fc01c278f0bfe6cE>
    80006c86:	a009                	j	80006c88 <.LBB3_117+0x3c>
                match interrupt {
    80006c88:	a819                	j	80006c9e <.LBB3_118+0x14>

0000000080006c8a <.LBB3_118>:
                        UART.intr();
    80006c8a:	00055517          	auipc	a0,0x55
    80006c8e:	85650513          	addi	a0,a0,-1962 # 8005b4e0 <_ZN6kernel6driver4uart4UART17h0708b3e179d548ddE>
    80006c92:	00003097          	auipc	ra,0x3
    80006c96:	0c4080e7          	jalr	196(ra) # 80009d56 <_ZN6kernel6driver4uart84_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..driver..uart..Uart$GT$$GT$4intr17h862db3ca167d2b66E>
    80006c9a:	a009                	j	80006c9c <.LBB3_118+0x12>
                match interrupt {
    80006c9c:	a009                	j	80006c9e <.LBB3_118+0x14>
                plic_complete(interrupt);
    80006c9e:	6562                	ld	a0,24(sp)
    80006ca0:	00017097          	auipc	ra,0x17
    80006ca4:	ce8080e7          	jalr	-792(ra) # 8001d988 <_ZN6kernel6driver4plic13plic_complete17hc3a23eee8594fbc3E>
    80006ca8:	a009                	j	80006caa <.LBB3_118+0x20>
            if let Some(interrupt) = plic_claim() {
    80006caa:	a889                	j	80006cfc <.LBB3_119+0x22>
            if cpu::cpuid() == 0{
    80006cac:	0000b097          	auipc	ra,0xb
    80006cb0:	d16080e7          	jalr	-746(ra) # 800119c2 <_ZN6kernel7process3cpu5cpuid17h605093a6a9a60164E>
    80006cb4:	e42a                	sd	a0,8(sp)
    80006cb6:	a009                	j	80006cb8 <.LBB3_118+0x2e>
    80006cb8:	6522                	ld	a0,8(sp)
    80006cba:	4581                	li	a1,0
    80006cbc:	00b51863          	bne	a0,a1,80006ccc <.LBB3_118+0x42>
    80006cc0:	a009                	j	80006cc2 <.LBB3_118+0x38>
                clock_intr();
    80006cc2:	00000097          	auipc	ra,0x0
    80006cc6:	078080e7          	jalr	120(ra) # 80006d3a <_ZN6kernel4trap10clock_intr17h80b4decf617479a4E>
    80006cca:	a011                	j	80006cce <.LBB3_118+0x44>
            if cpu::cpuid() == 0{
    80006ccc:	a011                	j	80006cd0 <.LBB3_118+0x46>
    80006cce:	a009                	j	80006cd0 <.LBB3_118+0x46>
            sip::clear_ssip();
    80006cd0:	00017097          	auipc	ra,0x17
    80006cd4:	a72080e7          	jalr	-1422(ra) # 8001d742 <_ZN6kernel4arch5riscv8register3sip10clear_ssip17h3546c4610df6574fE>
    80006cd8:	a009                	j	80006cda <.LBB3_119>

0000000080006cda <.LBB3_119>:
            CPU_MANAGER.mycpu().try_yield_proc();
    80006cda:	0005d517          	auipc	a0,0x5d
    80006cde:	46650513          	addi	a0,a0,1126 # 80064140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    80006ce2:	0000b097          	auipc	ra,0xb
    80006ce6:	cfc080e7          	jalr	-772(ra) # 800119de <_ZN6kernel7process3cpu10CPUManager5mycpu17hac5ae6ce2070e7c3E>
    80006cea:	e02a                	sd	a0,0(sp)
    80006cec:	a009                	j	80006cee <.LBB3_119+0x14>
    80006cee:	6502                	ld	a0,0(sp)
    80006cf0:	0000b097          	auipc	ra,0xb
    80006cf4:	0e8080e7          	jalr	232(ra) # 80011dd8 <_ZN6kernel7process3cpu3CPU14try_yield_proc17hdb175aaf084d8a03E>
    80006cf8:	a009                	j	80006cfa <.LBB3_119+0x20>
    match scause.cause() {
    80006cfa:	a009                	j	80006cfc <.LBB3_119+0x22>
        }
    }
    // store context
    sepc::write(local_spec);
    80006cfc:	756e                	ld	a0,248(sp)
    80006cfe:	ffffe097          	auipc	ra,0xffffe
    80006d02:	edc080e7          	jalr	-292(ra) # 80004bda <_ZN6kernel4arch5riscv8register4sepc5write17h2074fd389defa9f2E>
    80006d06:	a009                	j	80006d08 <.LBB3_119+0x2e>
    sstatus::write(sstatus);
    80006d08:	656e                	ld	a0,216(sp)
    80006d0a:	00017097          	auipc	ra,0x17
    80006d0e:	454080e7          	jalr	1108(ra) # 8001e15e <_ZN6kernel4arch5riscv8register7sstatus5write17h2e3a8152fe4defdaE>
    80006d12:	a009                	j	80006d14 <.LBB3_119+0x3a>

}
    80006d14:	3d813083          	ld	ra,984(sp)
    80006d18:	3e010113          	addi	sp,sp,992
    80006d1c:	8082                	ret

0000000080006d1e <.LBB3_120>:
            local_spec += 2;
    80006d1e:	00020517          	auipc	a0,0x20
    80006d22:	bf250513          	addi	a0,a0,-1038 # 80026910 <str.1>

0000000080006d26 <.LBB3_121>:
    80006d26:	00020617          	auipc	a2,0x20
    80006d2a:	eaa60613          	addi	a2,a2,-342 # 80026bd0 <.L__unnamed_39>
    80006d2e:	45f1                	li	a1,28
    80006d30:	0001b097          	auipc	ra,0x1b
    80006d34:	3cc080e7          	jalr	972(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel4trap10clock_intr17h80b4decf617479a4E:

0000000080006d3a <_ZN6kernel4trap10clock_intr17h80b4decf617479a4E>:


pub unsafe fn clock_intr(){
    80006d3a:	7179                	addi	sp,sp,-48
    let mut ticks = TICKS_LOCK.acquire();
    80006d3c:	f406                	sd	ra,40(sp)

0000000080006d3e <.LBB4_7>:
    80006d3e:	00030517          	auipc	a0,0x30
    80006d42:	7da50513          	addi	a0,a0,2010 # 80037518 <_ZN6kernel4trap10TICKS_LOCK17hd80a843c812fe4caE>
    80006d46:	0000a097          	auipc	ra,0xa
    80006d4a:	9ce080e7          	jalr	-1586(ra) # 80010714 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17he33ed4c8b2ffa030E>
    80006d4e:	f02a                	sd	a0,32(sp)
    80006d50:	a009                	j	80006d52 <.LBB4_7+0x14>
    80006d52:	1008                	addi	a0,sp,32
    *ticks = *ticks + 1;
    80006d54:	0000a097          	auipc	ra,0xa
    80006d58:	55e080e7          	jalr	1374(ra) # 800112b2 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h570d144f846c2ec7E>
    80006d5c:	ec2a                	sd	a0,24(sp)
    80006d5e:	a009                	j	80006d60 <.LBB4_7+0x22>
    80006d60:	6562                	ld	a0,24(sp)
    80006d62:	610c                	ld	a1,0(a0)
    80006d64:	00158513          	addi	a0,a1,1
    80006d68:	e82a                	sd	a0,16(sp)
    80006d6a:	02b56663          	bltu	a0,a1,80006d96 <.LBB4_8>
    80006d6e:	a009                	j	80006d70 <.LBB4_7+0x32>
    80006d70:	1008                	addi	a0,sp,32
    80006d72:	0000a097          	auipc	ra,0xa
    80006d76:	6bc080e7          	jalr	1724(ra) # 8001142e <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h8532990243dc594eE>
    80006d7a:	e42a                	sd	a0,8(sp)
    80006d7c:	a009                	j	80006d7e <.LBB4_7+0x40>
    80006d7e:	6542                	ld	a0,16(sp)
    80006d80:	65a2                	ld	a1,8(sp)
    80006d82:	e188                	sd	a0,0(a1)
    drop(ticks);
    80006d84:	7502                	ld	a0,32(sp)
    80006d86:	00016097          	auipc	ra,0x16
    80006d8a:	0cc080e7          	jalr	204(ra) # 8001ce52 <_ZN4core3mem4drop17h0acc999538dd9281E>
    80006d8e:	a009                	j	80006d90 <.LBB4_7+0x52>
}
    80006d90:	70a2                	ld	ra,40(sp)
    80006d92:	6145                	addi	sp,sp,48
    80006d94:	8082                	ret

0000000080006d96 <.LBB4_8>:
    *ticks = *ticks + 1;
    80006d96:	00020517          	auipc	a0,0x20
    80006d9a:	b7a50513          	addi	a0,a0,-1158 # 80026910 <str.1>

0000000080006d9e <.LBB4_9>:
    80006d9e:	00020617          	auipc	a2,0x20
    80006da2:	ee260613          	addi	a2,a2,-286 # 80026c80 <.L__unnamed_40>
    80006da6:	45f1                	li	a1,28
    80006da8:	0001b097          	auipc	ra,0x1b
    80006dac:	354080e7          	jalr	852(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN4core3ops8function6FnOnce9call_once17h5aa9a10c33b479e6E:

0000000080006db2 <_ZN4core3ops8function6FnOnce9call_once17h5aa9a10c33b479e6E>:
    #[stable(feature = "fn_once_output", since = "1.12.0")]
    type Output;

    /// Performs the call operation.
    #[unstable(feature = "fn_traits", issue = "29625")]
    extern "rust-call" fn call_once(self, args: Args) -> Self::Output;
    80006db2:	7179                	addi	sp,sp,-48
    80006db4:	f406                	sd	ra,40(sp)
    80006db6:	e82a                	sd	a0,16(sp)
    80006db8:	ec2e                	sd	a1,24(sp)
    80006dba:	00014097          	auipc	ra,0x14
    80006dbe:	7e8080e7          	jalr	2024(ra) # 8001b5a2 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h6e23c4cf8dccfdcdE>
    80006dc2:	e42a                	sd	a0,8(sp)
    80006dc4:	a009                	j	80006dc6 <_ZN4core3ops8function6FnOnce9call_once17h5aa9a10c33b479e6E+0x14>
    80006dc6:	6522                	ld	a0,8(sp)
    80006dc8:	70a2                	ld	ra,40(sp)
    80006dca:	6145                	addi	sp,sp,48
    80006dcc:	8082                	ret

Disassembly of section .text._ZN4core3ptr116drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$$u5b$kernel..fs..inode..InodeMeta$u3b$$u20$50$u5d$$GT$$GT$17h4e8573cf3b362114E:

0000000080006dce <_ZN4core3ptr116drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$$u5b$kernel..fs..inode..InodeMeta$u3b$$u20$50$u5d$$GT$$GT$17h4e8573cf3b362114E>:
/// i.e., you do not usually have to worry about such issues unless you call `drop_in_place`
/// manually.
#[stable(feature = "drop_in_place", since = "1.8.0")]
#[lang = "drop_in_place"]
#[allow(unconditional_recursion)]
pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
    80006dce:	1141                	addi	sp,sp,-16
    80006dd0:	e406                	sd	ra,8(sp)
    80006dd2:	e02a                	sd	a0,0(sp)
    80006dd4:	00000097          	auipc	ra,0x0
    80006dd8:	4f2080e7          	jalr	1266(ra) # 800072c6 <_ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h1d31607f4cd7f071E>
    80006ddc:	a009                	j	80006dde <_ZN4core3ptr116drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$$u5b$kernel..fs..inode..InodeMeta$u3b$$u20$50$u5d$$GT$$GT$17h4e8573cf3b362114E+0x10>
    80006dde:	60a2                	ld	ra,8(sp)
    80006de0:	0141                	addi	sp,sp,16
    80006de2:	8082                	ret

Disassembly of section .text._ZN4core3ptr119drop_in_place$LT$$u5b$core..option..Option$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$$u3b$$u20$100$u5d$$GT$17ha293b69a65138838E:

0000000080006de4 <_ZN4core3ptr119drop_in_place$LT$$u5b$core..option..Option$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$$u3b$$u20$100$u5d$$GT$17ha293b69a65138838E>:
    80006de4:	7179                	addi	sp,sp,-48
    80006de6:	f406                	sd	ra,40(sp)
    80006de8:	e02a                	sd	a0,0(sp)
    80006dea:	f02a                	sd	a0,32(sp)
    80006dec:	4501                	li	a0,0
    80006dee:	e51d                	bnez	a0,80006e1c <_ZN4core3ptr119drop_in_place$LT$$u5b$core..option..Option$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$$u3b$$u20$100$u5d$$GT$17ha293b69a65138838E+0x38>
    80006df0:	a0b9                	j	80006e3e <_ZN4core3ptr119drop_in_place$LT$$u5b$core..option..Option$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$$u3b$$u20$100$u5d$$GT$17ha293b69a65138838E+0x5a>
    80006df2:	70a2                	ld	ra,40(sp)
    80006df4:	6145                	addi	sp,sp,48
    80006df6:	8082                	ret
    80006df8:	6502                	ld	a0,0(sp)
    80006dfa:	65a2                	ld	a1,8(sp)
    80006dfc:	00359613          	slli	a2,a1,0x3
    80006e00:	9532                	add	a0,a0,a2
    80006e02:	0585                	addi	a1,a1,1
    80006e04:	e42e                	sd	a1,8(sp)
    80006e06:	00000097          	auipc	ra,0x0
    80006e0a:	284080e7          	jalr	644(ra) # 8000708a <_ZN4core3ptr96drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$$GT$17hc79d9c89cd1d7f36E>
    80006e0e:	a009                	j	80006e10 <_ZN4core3ptr119drop_in_place$LT$$u5b$core..option..Option$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$$u3b$$u20$100$u5d$$GT$17ha293b69a65138838E+0x2c>
    80006e10:	6522                	ld	a0,8(sp)
    80006e12:	06400593          	li	a1,100
    80006e16:	fcb50ee3          	beq	a0,a1,80006df2 <_ZN4core3ptr119drop_in_place$LT$$u5b$core..option..Option$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$$u3b$$u20$100$u5d$$GT$17ha293b69a65138838E+0xe>
    80006e1a:	bff9                	j	80006df8 <_ZN4core3ptr119drop_in_place$LT$$u5b$core..option..Option$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$$u3b$$u20$100$u5d$$GT$17ha293b69a65138838E+0x14>
    80006e1c:	4501                	li	a0,0
    80006e1e:	e42a                	sd	a0,8(sp)
    80006e20:	bfc5                	j	80006e10 <_ZN4core3ptr119drop_in_place$LT$$u5b$core..option..Option$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$$u3b$$u20$100$u5d$$GT$17ha293b69a65138838E+0x2c>
    80006e22:	6542                	ld	a0,16(sp)
    80006e24:	00850593          	addi	a1,a0,8
    80006e28:	e82e                	sd	a1,16(sp)
    80006e2a:	00000097          	auipc	ra,0x0
    80006e2e:	260080e7          	jalr	608(ra) # 8000708a <_ZN4core3ptr96drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$$GT$17hc79d9c89cd1d7f36E>
    80006e32:	a009                	j	80006e34 <_ZN4core3ptr119drop_in_place$LT$$u5b$core..option..Option$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$$u3b$$u20$100$u5d$$GT$17ha293b69a65138838E+0x50>
    80006e34:	6542                	ld	a0,16(sp)
    80006e36:	65e2                	ld	a1,24(sp)
    80006e38:	fab50de3          	beq	a0,a1,80006df2 <_ZN4core3ptr119drop_in_place$LT$$u5b$core..option..Option$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$$u3b$$u20$100$u5d$$GT$17ha293b69a65138838E+0xe>
    80006e3c:	b7dd                	j	80006e22 <_ZN4core3ptr119drop_in_place$LT$$u5b$core..option..Option$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$$u3b$$u20$100$u5d$$GT$17ha293b69a65138838E+0x3e>
    80006e3e:	6502                	ld	a0,0(sp)
    80006e40:	e82a                	sd	a0,16(sp)
    80006e42:	32050513          	addi	a0,a0,800
    80006e46:	ec2a                	sd	a0,24(sp)
    80006e48:	b7f5                	j	80006e34 <_ZN4core3ptr119drop_in_place$LT$$u5b$core..option..Option$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$$u3b$$u20$100$u5d$$GT$17ha293b69a65138838E+0x50>

Disassembly of section .text._ZN4core3ptr120drop_in_place$LT$core..option..Option$LT$kernel..lock..sleeplock..SleepLockGuard$LT$kernel..fs..bio..BufData$GT$$GT$$GT$17hc3cb66b90ce8c8e9E:

0000000080006e4a <_ZN4core3ptr120drop_in_place$LT$core..option..Option$LT$kernel..lock..sleeplock..SleepLockGuard$LT$kernel..fs..bio..BufData$GT$$GT$$GT$17hc3cb66b90ce8c8e9E>:
    80006e4a:	1101                	addi	sp,sp,-32
    80006e4c:	ec06                	sd	ra,24(sp)
    80006e4e:	e42a                	sd	a0,8(sp)
    80006e50:	e82a                	sd	a0,16(sp)
    80006e52:	6108                	ld	a0,0(a0)
    80006e54:	4581                	li	a1,0
    80006e56:	00b51663          	bne	a0,a1,80006e62 <_ZN4core3ptr120drop_in_place$LT$core..option..Option$LT$kernel..lock..sleeplock..SleepLockGuard$LT$kernel..fs..bio..BufData$GT$$GT$$GT$17hc3cb66b90ce8c8e9E+0x18>
    80006e5a:	a009                	j	80006e5c <_ZN4core3ptr120drop_in_place$LT$core..option..Option$LT$kernel..lock..sleeplock..SleepLockGuard$LT$kernel..fs..bio..BufData$GT$$GT$$GT$17hc3cb66b90ce8c8e9E+0x12>
    80006e5c:	60e2                	ld	ra,24(sp)
    80006e5e:	6105                	addi	sp,sp,32
    80006e60:	8082                	ret
    80006e62:	6522                	ld	a0,8(sp)
    80006e64:	00000097          	auipc	ra,0x0
    80006e68:	1fa080e7          	jalr	506(ra) # 8000705e <_ZN4core3ptr92drop_in_place$LT$kernel..lock..sleeplock..SleepLockGuard$LT$kernel..fs..bio..BufData$GT$$GT$17h537aa9010d3295f9E>
    80006e6c:	bfc5                	j	80006e5c <_ZN4core3ptr120drop_in_place$LT$core..option..Option$LT$kernel..lock..sleeplock..SleepLockGuard$LT$kernel..fs..bio..BufData$GT$$GT$$GT$17hc3cb66b90ce8c8e9E+0x12>

Disassembly of section .text._ZN4core3ptr28drop_in_place$LT$$RF$str$GT$17h2bbae85ad1a63829E:

0000000080006e6e <_ZN4core3ptr28drop_in_place$LT$$RF$str$GT$17h2bbae85ad1a63829E>:
    80006e6e:	1141                	addi	sp,sp,-16
    80006e70:	e42a                	sd	a0,8(sp)
    80006e72:	0141                	addi	sp,sp,16
    80006e74:	8082                	ret

Disassembly of section .text._ZN4core3ptr29drop_in_place$LT$$LP$$RP$$GT$17h051aaaaafca2b588E:

0000000080006e76 <_ZN4core3ptr29drop_in_place$LT$$LP$$RP$$GT$17h051aaaaafca2b588E>:
    80006e76:	1141                	addi	sp,sp,-16
    80006e78:	e42a                	sd	a0,8(sp)
    80006e7a:	0141                	addi	sp,sp,16
    80006e7c:	8082                	ret

Disassembly of section .text._ZN4core3ptr37drop_in_place$LT$core..fmt..Error$GT$17h74512b837ee77bedE:

0000000080006e7e <_ZN4core3ptr37drop_in_place$LT$core..fmt..Error$GT$17h74512b837ee77bedE>:
    80006e7e:	1141                	addi	sp,sp,-16
    80006e80:	e42a                	sd	a0,8(sp)
    80006e82:	0141                	addi	sp,sp,16
    80006e84:	8082                	ret

Disassembly of section .text._ZN4core3ptr41drop_in_place$LT$kernel..fs..bio..Buf$GT$17hc35967244f3e9eb6E:

0000000080006e86 <_ZN4core3ptr41drop_in_place$LT$kernel..fs..bio..Buf$GT$17hc35967244f3e9eb6E>:
    80006e86:	1101                	addi	sp,sp,-32
    80006e88:	ec06                	sd	ra,24(sp)
    80006e8a:	e42a                	sd	a0,8(sp)
    80006e8c:	e82a                	sd	a0,16(sp)
    80006e8e:	00000097          	auipc	ra,0x0
    80006e92:	528080e7          	jalr	1320(ra) # 800073b6 <_ZN62_$LT$kernel..fs..bio..Buf$u20$as$u20$core..ops..drop..Drop$GT$4drop17hae787f8a28b7a10dE>
    80006e96:	a021                	j	80006e9e <_ZN4core3ptr41drop_in_place$LT$kernel..fs..bio..Buf$GT$17hc35967244f3e9eb6E+0x18>
    80006e98:	60e2                	ld	ra,24(sp)
    80006e9a:	6105                	addi	sp,sp,32
    80006e9c:	8082                	ret
    80006e9e:	6522                	ld	a0,8(sp)
    80006ea0:	0541                	addi	a0,a0,16
    80006ea2:	00000097          	auipc	ra,0x0
    80006ea6:	fa8080e7          	jalr	-88(ra) # 80006e4a <_ZN4core3ptr120drop_in_place$LT$core..option..Option$LT$kernel..lock..sleeplock..SleepLockGuard$LT$kernel..fs..bio..BufData$GT$$GT$$GT$17hc3cb66b90ce8c8e9E>
    80006eaa:	b7fd                	j	80006e98 <_ZN4core3ptr41drop_in_place$LT$kernel..fs..bio..Buf$GT$17hc35967244f3e9eb6E+0x12>

Disassembly of section .text._ZN4core3ptr42drop_in_place$LT$alloc..string..String$GT$17h586f2f4ef42593a1E:

0000000080006eac <_ZN4core3ptr42drop_in_place$LT$alloc..string..String$GT$17h586f2f4ef42593a1E>:
    80006eac:	1141                	addi	sp,sp,-16
    80006eae:	e406                	sd	ra,8(sp)
    80006eb0:	e02a                	sd	a0,0(sp)
    80006eb2:	00000097          	auipc	ra,0x0
    80006eb6:	03e080e7          	jalr	62(ra) # 80006ef0 <_ZN4core3ptr46drop_in_place$LT$alloc..vec..Vec$LT$u8$GT$$GT$17hc049a0af331ff31cE>
    80006eba:	a009                	j	80006ebc <_ZN4core3ptr42drop_in_place$LT$alloc..string..String$GT$17h586f2f4ef42593a1E+0x10>
    80006ebc:	60a2                	ld	ra,8(sp)
    80006ebe:	0141                	addi	sp,sp,16
    80006ec0:	8082                	ret

Disassembly of section .text._ZN4core3ptr44drop_in_place$LT$kernel..fs..file..VFile$GT$17h7a3c9775c1583e88E:

0000000080006ec2 <_ZN4core3ptr44drop_in_place$LT$kernel..fs..file..VFile$GT$17h7a3c9775c1583e88E>:
    80006ec2:	1141                	addi	sp,sp,-16
    80006ec4:	e406                	sd	ra,8(sp)
    80006ec6:	e02a                	sd	a0,0(sp)
    80006ec8:	0541                	addi	a0,a0,16
    80006eca:	00000097          	auipc	ra,0x0
    80006ece:	0da080e7          	jalr	218(ra) # 80006fa4 <_ZN4core3ptr73drop_in_place$LT$core..option..Option$LT$kernel..fs..inode..Inode$GT$$GT$17h6a7b3b84406d6cdfE>
    80006ed2:	a009                	j	80006ed4 <_ZN4core3ptr44drop_in_place$LT$kernel..fs..file..VFile$GT$17h7a3c9775c1583e88E+0x12>
    80006ed4:	60a2                	ld	ra,8(sp)
    80006ed6:	0141                	addi	sp,sp,16
    80006ed8:	8082                	ret

Disassembly of section .text._ZN4core3ptr45drop_in_place$LT$kernel..fs..inode..Inode$GT$17h8786fe1a2a287832E:

0000000080006eda <_ZN4core3ptr45drop_in_place$LT$kernel..fs..inode..Inode$GT$17h8786fe1a2a287832E>:
    80006eda:	1141                	addi	sp,sp,-16
    80006edc:	e406                	sd	ra,8(sp)
    80006ede:	e02a                	sd	a0,0(sp)
    80006ee0:	00000097          	auipc	ra,0x0
    80006ee4:	518080e7          	jalr	1304(ra) # 800073f8 <_ZN66_$LT$kernel..fs..inode..Inode$u20$as$u20$core..ops..drop..Drop$GT$4drop17h624968f150cac4e7E>
    80006ee8:	a009                	j	80006eea <_ZN4core3ptr45drop_in_place$LT$kernel..fs..inode..Inode$GT$17h8786fe1a2a287832E+0x10>
    80006eea:	60a2                	ld	ra,8(sp)
    80006eec:	0141                	addi	sp,sp,16
    80006eee:	8082                	ret

Disassembly of section .text._ZN4core3ptr46drop_in_place$LT$alloc..vec..Vec$LT$u8$GT$$GT$17hc049a0af331ff31cE:

0000000080006ef0 <_ZN4core3ptr46drop_in_place$LT$alloc..vec..Vec$LT$u8$GT$$GT$17hc049a0af331ff31cE>:
    80006ef0:	1101                	addi	sp,sp,-32
    80006ef2:	ec06                	sd	ra,24(sp)
    80006ef4:	e42a                	sd	a0,8(sp)
    80006ef6:	e82a                	sd	a0,16(sp)
    80006ef8:	00000097          	auipc	ra,0x0
    80006efc:	348080e7          	jalr	840(ra) # 80007240 <_ZN70_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hf7bf84e08f8deec7E>
    80006f00:	a021                	j	80006f08 <_ZN4core3ptr46drop_in_place$LT$alloc..vec..Vec$LT$u8$GT$$GT$17hc049a0af331ff31cE+0x18>
    80006f02:	60e2                	ld	ra,24(sp)
    80006f04:	6105                	addi	sp,sp,32
    80006f06:	8082                	ret
    80006f08:	6522                	ld	a0,8(sp)
    80006f0a:	00000097          	auipc	ra,0x0
    80006f0e:	012080e7          	jalr	18(ra) # 80006f1c <_ZN4core3ptr53drop_in_place$LT$alloc..raw_vec..RawVec$LT$u8$GT$$GT$17h43989f6a80c9a285E>
    80006f12:	bfc5                	j	80006f02 <_ZN4core3ptr46drop_in_place$LT$alloc..vec..Vec$LT$u8$GT$$GT$17hc049a0af331ff31cE+0x12>

Disassembly of section .text._ZN4core3ptr48drop_in_place$LT$core..str..error..Utf8Error$GT$17h597f3c07065c4e0fE:

0000000080006f14 <_ZN4core3ptr48drop_in_place$LT$core..str..error..Utf8Error$GT$17h597f3c07065c4e0fE>:
    80006f14:	1141                	addi	sp,sp,-16
    80006f16:	e42a                	sd	a0,8(sp)
    80006f18:	0141                	addi	sp,sp,16
    80006f1a:	8082                	ret

Disassembly of section .text._ZN4core3ptr53drop_in_place$LT$alloc..raw_vec..RawVec$LT$u8$GT$$GT$17h43989f6a80c9a285E:

0000000080006f1c <_ZN4core3ptr53drop_in_place$LT$alloc..raw_vec..RawVec$LT$u8$GT$$GT$17h43989f6a80c9a285E>:
    80006f1c:	1141                	addi	sp,sp,-16
    80006f1e:	e406                	sd	ra,8(sp)
    80006f20:	e02a                	sd	a0,0(sp)
    80006f22:	00000097          	auipc	ra,0x0
    80006f26:	34a080e7          	jalr	842(ra) # 8000726c <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h07f37a6ddf49c648E>
    80006f2a:	a009                	j	80006f2c <_ZN4core3ptr53drop_in_place$LT$alloc..raw_vec..RawVec$LT$u8$GT$$GT$17h43989f6a80c9a285E+0x10>
    80006f2c:	60a2                	ld	ra,8(sp)
    80006f2e:	0141                	addi	sp,sp,16
    80006f30:	8082                	ret

Disassembly of section .text._ZN4core3ptr53drop_in_place$LT$core..alloc..layout..LayoutError$GT$17he06501856409b544E:

0000000080006f32 <_ZN4core3ptr53drop_in_place$LT$core..alloc..layout..LayoutError$GT$17he06501856409b544E>:
    80006f32:	1141                	addi	sp,sp,-16
    80006f34:	e42a                	sd	a0,8(sp)
    80006f36:	0141                	addi	sp,sp,16
    80006f38:	8082                	ret

Disassembly of section .text._ZN4core3ptr54drop_in_place$LT$$RF$kernel..fs..dinode..InodeType$GT$17h9ce5713d93ac6a07E:

0000000080006f3a <_ZN4core3ptr54drop_in_place$LT$$RF$kernel..fs..dinode..InodeType$GT$17h9ce5713d93ac6a07E>:
    80006f3a:	1141                	addi	sp,sp,-16
    80006f3c:	e42a                	sd	a0,8(sp)
    80006f3e:	0141                	addi	sp,sp,16
    80006f40:	8082                	ret

Disassembly of section .text._ZN4core3ptr54drop_in_place$LT$core..num..error..TryFromIntError$GT$17hcbff8ea1575fcb6aE:

0000000080006f42 <_ZN4core3ptr54drop_in_place$LT$core..num..error..TryFromIntError$GT$17hcbff8ea1575fcb6aE>:
    80006f42:	1141                	addi	sp,sp,-16
    80006f44:	e42a                	sd	a0,8(sp)
    80006f46:	0141                	addi	sp,sp,16
    80006f48:	8082                	ret

Disassembly of section .text._ZN4core3ptr59drop_in_place$LT$$RF$mut$u20$kernel..driver..uart..Uart$GT$17he0733011476f9c53E:

0000000080006f4a <_ZN4core3ptr59drop_in_place$LT$$RF$mut$u20$kernel..driver..uart..Uart$GT$17he0733011476f9c53E>:
    80006f4a:	1141                	addi	sp,sp,-16
    80006f4c:	e42a                	sd	a0,8(sp)
    80006f4e:	0141                	addi	sp,sp,16
    80006f50:	8082                	ret

Disassembly of section .text._ZN4core3ptr68drop_in_place$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$17h1ebe49ede9a118fdE:

0000000080006f52 <_ZN4core3ptr68drop_in_place$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$17h1ebe49ede9a118fdE>:
    80006f52:	1141                	addi	sp,sp,-16
    80006f54:	e406                	sd	ra,8(sp)
    80006f56:	e02a                	sd	a0,0(sp)
    80006f58:	00000097          	auipc	ra,0x0
    80006f5c:	1de080e7          	jalr	478(ra) # 80007136 <_ZN67_$LT$alloc..sync..Arc$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h228396a8880ae9ddE>
    80006f60:	a009                	j	80006f62 <_ZN4core3ptr68drop_in_place$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$17h1ebe49ede9a118fdE+0x10>
    80006f62:	60a2                	ld	ra,8(sp)
    80006f64:	0141                	addi	sp,sp,16
    80006f66:	8082                	ret

Disassembly of section .text._ZN4core3ptr69drop_in_place$LT$alloc..sync..Weak$LT$kernel..fs..file..VFile$GT$$GT$17hfcb3bca0be736df8E:

0000000080006f68 <_ZN4core3ptr69drop_in_place$LT$alloc..sync..Weak$LT$kernel..fs..file..VFile$GT$$GT$17hfcb3bca0be736df8E>:
    80006f68:	1141                	addi	sp,sp,-16
    80006f6a:	e406                	sd	ra,8(sp)
    80006f6c:	e02a                	sd	a0,0(sp)
    80006f6e:	00000097          	auipc	ra,0x0
    80006f72:	222080e7          	jalr	546(ra) # 80007190 <_ZN68_$LT$alloc..sync..Weak$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hb23957f9542a4990E>
    80006f76:	a009                	j	80006f78 <_ZN4core3ptr69drop_in_place$LT$alloc..sync..Weak$LT$kernel..fs..file..VFile$GT$$GT$17hfcb3bca0be736df8E+0x10>
    80006f78:	60a2                	ld	ra,8(sp)
    80006f7a:	0141                	addi	sp,sp,16
    80006f7c:	8082                	ret

Disassembly of section .text._ZN4core3ptr71drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$usize$GT$$GT$17h978f142a914ddf2eE:

0000000080006f7e <_ZN4core3ptr71drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$usize$GT$$GT$17h978f142a914ddf2eE>:
    80006f7e:	1141                	addi	sp,sp,-16
    80006f80:	e406                	sd	ra,8(sp)
    80006f82:	e02a                	sd	a0,0(sp)
    80006f84:	00000097          	auipc	ra,0x0
    80006f88:	3ba080e7          	jalr	954(ra) # 8000733e <_ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hbd0d5c90a46c79b0E>
    80006f8c:	a009                	j	80006f8e <_ZN4core3ptr71drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$usize$GT$$GT$17h978f142a914ddf2eE+0x10>
    80006f8e:	60a2                	ld	ra,8(sp)
    80006f90:	0141                	addi	sp,sp,16
    80006f92:	8082                	ret

Disassembly of section .text._ZN4core3ptr73drop_in_place$LT$$RF$kernel..arch..riscv..register..scause..Exception$GT$17h18956ab47fc37e77E:

0000000080006f94 <_ZN4core3ptr73drop_in_place$LT$$RF$kernel..arch..riscv..register..scause..Exception$GT$17h18956ab47fc37e77E>:
    80006f94:	1141                	addi	sp,sp,-16
    80006f96:	e42a                	sd	a0,8(sp)
    80006f98:	0141                	addi	sp,sp,16
    80006f9a:	8082                	ret

Disassembly of section .text._ZN4core3ptr73drop_in_place$LT$$RF$kernel..arch..riscv..register..scause..Interrupt$GT$17h9a154681bb7a8c38E:

0000000080006f9c <_ZN4core3ptr73drop_in_place$LT$$RF$kernel..arch..riscv..register..scause..Interrupt$GT$17h9a154681bb7a8c38E>:
    80006f9c:	1141                	addi	sp,sp,-16
    80006f9e:	e42a                	sd	a0,8(sp)
    80006fa0:	0141                	addi	sp,sp,16
    80006fa2:	8082                	ret

Disassembly of section .text._ZN4core3ptr73drop_in_place$LT$core..option..Option$LT$kernel..fs..inode..Inode$GT$$GT$17h6a7b3b84406d6cdfE:

0000000080006fa4 <_ZN4core3ptr73drop_in_place$LT$core..option..Option$LT$kernel..fs..inode..Inode$GT$$GT$17h6a7b3b84406d6cdfE>:
    80006fa4:	1101                	addi	sp,sp,-32
    80006fa6:	ec06                	sd	ra,24(sp)
    80006fa8:	e42a                	sd	a0,8(sp)
    80006faa:	e82a                	sd	a0,16(sp)
    80006fac:	6108                	ld	a0,0(a0)
    80006fae:	4581                	li	a1,0
    80006fb0:	00b51663          	bne	a0,a1,80006fbc <_ZN4core3ptr73drop_in_place$LT$core..option..Option$LT$kernel..fs..inode..Inode$GT$$GT$17h6a7b3b84406d6cdfE+0x18>
    80006fb4:	a009                	j	80006fb6 <_ZN4core3ptr73drop_in_place$LT$core..option..Option$LT$kernel..fs..inode..Inode$GT$$GT$17h6a7b3b84406d6cdfE+0x12>
    80006fb6:	60e2                	ld	ra,24(sp)
    80006fb8:	6105                	addi	sp,sp,32
    80006fba:	8082                	ret
    80006fbc:	6522                	ld	a0,8(sp)
    80006fbe:	0521                	addi	a0,a0,8
    80006fc0:	00000097          	auipc	ra,0x0
    80006fc4:	f1a080e7          	jalr	-230(ra) # 80006eda <_ZN4core3ptr45drop_in_place$LT$kernel..fs..inode..Inode$GT$17h8786fe1a2a287832E>
    80006fc8:	b7fd                	j	80006fb6 <_ZN4core3ptr73drop_in_place$LT$core..option..Option$LT$kernel..fs..inode..Inode$GT$$GT$17h6a7b3b84406d6cdfE+0x12>

Disassembly of section .text._ZN4core3ptr74drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$$LP$$RP$$GT$$GT$17he568be727488c8bbE:

0000000080006fca <_ZN4core3ptr74drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$$LP$$RP$$GT$$GT$17he568be727488c8bbE>:
    80006fca:	1141                	addi	sp,sp,-16
    80006fcc:	e406                	sd	ra,8(sp)
    80006fce:	e02a                	sd	a0,0(sp)
    80006fd0:	00000097          	auipc	ra,0x0
    80006fd4:	33e080e7          	jalr	830(ra) # 8000730e <_ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h821d547a3c969c60E>
    80006fd8:	a009                	j	80006fda <_ZN4core3ptr74drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$$LP$$RP$$GT$$GT$17he568be727488c8bbE+0x10>
    80006fda:	60a2                	ld	ra,8(sp)
    80006fdc:	0141                	addi	sp,sp,16
    80006fde:	8082                	ret

Disassembly of section .text._ZN4core3ptr77drop_in_place$LT$alloc..boxed..Box$LT$kernel..process..elf..ElfHeader$GT$$GT$17hf970e769dc617072E:

0000000080006fe0 <_ZN4core3ptr77drop_in_place$LT$alloc..boxed..Box$LT$kernel..process..elf..ElfHeader$GT$$GT$17hf970e769dc617072E>:
    80006fe0:	1101                	addi	sp,sp,-32
    80006fe2:	ec06                	sd	ra,24(sp)
    80006fe4:	e42a                	sd	a0,8(sp)
    80006fe6:	e82a                	sd	a0,16(sp)
    80006fe8:	a021                	j	80006ff0 <_ZN4core3ptr77drop_in_place$LT$alloc..boxed..Box$LT$kernel..process..elf..ElfHeader$GT$$GT$17hf970e769dc617072E+0x10>
    80006fea:	60e2                	ld	ra,24(sp)
    80006fec:	6105                	addi	sp,sp,32
    80006fee:	8082                	ret
    80006ff0:	6522                	ld	a0,8(sp)
    80006ff2:	6108                	ld	a0,0(a0)
    80006ff4:	00002097          	auipc	ra,0x2
    80006ff8:	a1a080e7          	jalr	-1510(ra) # 80008a0e <_ZN5alloc5alloc8box_free17h9496fa4d23b2ebc8E>
    80006ffc:	b7fd                	j	80006fea <_ZN4core3ptr77drop_in_place$LT$alloc..boxed..Box$LT$kernel..process..elf..ElfHeader$GT$$GT$17hf970e769dc617072E+0xa>

Disassembly of section .text._ZN4core3ptr78drop_in_place$LT$alloc..boxed..Box$LT$kernel..process..elf..ProgHeader$GT$$GT$17h18632e5365e45018E:

0000000080006ffe <_ZN4core3ptr78drop_in_place$LT$alloc..boxed..Box$LT$kernel..process..elf..ProgHeader$GT$$GT$17h18632e5365e45018E>:
    80006ffe:	1101                	addi	sp,sp,-32
    80007000:	ec06                	sd	ra,24(sp)
    80007002:	e42a                	sd	a0,8(sp)
    80007004:	e82a                	sd	a0,16(sp)
    80007006:	a021                	j	8000700e <_ZN4core3ptr78drop_in_place$LT$alloc..boxed..Box$LT$kernel..process..elf..ProgHeader$GT$$GT$17h18632e5365e45018E+0x10>
    80007008:	60e2                	ld	ra,24(sp)
    8000700a:	6105                	addi	sp,sp,32
    8000700c:	8082                	ret
    8000700e:	6522                	ld	a0,8(sp)
    80007010:	6108                	ld	a0,0(a0)
    80007012:	00002097          	auipc	ra,0x2
    80007016:	a80080e7          	jalr	-1408(ra) # 80008a92 <_ZN5alloc5alloc8box_free17hc9fdd8b40dd668b4E>
    8000701a:	b7fd                	j	80007008 <_ZN4core3ptr78drop_in_place$LT$alloc..boxed..Box$LT$kernel..process..elf..ProgHeader$GT$$GT$17h18632e5365e45018E+0xa>

Disassembly of section .text._ZN4core3ptr86drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..fs..log..Log$GT$$GT$17h3ff4d5b7fa89905aE:

000000008000701c <_ZN4core3ptr86drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..fs..log..Log$GT$$GT$17h3ff4d5b7fa89905aE>:
    8000701c:	1141                	addi	sp,sp,-16
    8000701e:	e406                	sd	ra,8(sp)
    80007020:	e02a                	sd	a0,0(sp)
    80007022:	00000097          	auipc	ra,0x0
    80007026:	28c080e7          	jalr	652(ra) # 800072ae <_ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h07564fb2c96981cdE>
    8000702a:	a009                	j	8000702c <_ZN4core3ptr86drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..fs..log..Log$GT$$GT$17h3ff4d5b7fa89905aE+0x10>
    8000702c:	60a2                	ld	ra,8(sp)
    8000702e:	0141                	addi	sp,sp,16
    80007030:	8082                	ret

Disassembly of section .text._ZN4core3ptr88drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$allocator..BuddySystem$GT$$GT$17hd20388e8ca3384f9E:

0000000080007032 <_ZN4core3ptr88drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$allocator..BuddySystem$GT$$GT$17hd20388e8ca3384f9E>:
    80007032:	1141                	addi	sp,sp,-16
    80007034:	e406                	sd	ra,8(sp)
    80007036:	e02a                	sd	a0,0(sp)
    80007038:	00000097          	auipc	ra,0x0
    8000703c:	2be080e7          	jalr	702(ra) # 800072f6 <_ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h5c638f5071dc4adaE>
    80007040:	a009                	j	80007042 <_ZN4core3ptr88drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$allocator..BuddySystem$GT$$GT$17hd20388e8ca3384f9E+0x10>
    80007042:	60a2                	ld	ra,8(sp)
    80007044:	0141                	addi	sp,sp,16
    80007046:	8082                	ret

Disassembly of section .text._ZN4core3ptr89drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..fs..bio..BufLru$GT$$GT$17h9c86fb58887d325bE:

0000000080007048 <_ZN4core3ptr89drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..fs..bio..BufLru$GT$$GT$17h9c86fb58887d325bE>:
    80007048:	1141                	addi	sp,sp,-16
    8000704a:	e406                	sd	ra,8(sp)
    8000704c:	e02a                	sd	a0,0(sp)
    8000704e:	00000097          	auipc	ra,0x0
    80007052:	308080e7          	jalr	776(ra) # 80007356 <_ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hc0ab90800bd26fd3E>
    80007056:	a009                	j	80007058 <_ZN4core3ptr89drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..fs..bio..BufLru$GT$$GT$17h9c86fb58887d325bE+0x10>
    80007058:	60a2                	ld	ra,8(sp)
    8000705a:	0141                	addi	sp,sp,16
    8000705c:	8082                	ret

Disassembly of section .text._ZN4core3ptr92drop_in_place$LT$kernel..lock..sleeplock..SleepLockGuard$LT$kernel..fs..bio..BufData$GT$$GT$17h537aa9010d3295f9E:

000000008000705e <_ZN4core3ptr92drop_in_place$LT$kernel..lock..sleeplock..SleepLockGuard$LT$kernel..fs..bio..BufData$GT$$GT$17h537aa9010d3295f9E>:
    8000705e:	1141                	addi	sp,sp,-16
    80007060:	e406                	sd	ra,8(sp)
    80007062:	e02a                	sd	a0,0(sp)
    80007064:	00000097          	auipc	ra,0x0
    80007068:	33a080e7          	jalr	826(ra) # 8000739e <_ZN90_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hd4f2db8ec388cdc1E>
    8000706c:	a009                	j	8000706e <_ZN4core3ptr92drop_in_place$LT$kernel..lock..sleeplock..SleepLockGuard$LT$kernel..fs..bio..BufData$GT$$GT$17h537aa9010d3295f9E+0x10>
    8000706e:	60a2                	ld	ra,8(sp)
    80007070:	0141                	addi	sp,sp,16
    80007072:	8082                	ret

Disassembly of section .text._ZN4core3ptr92drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..driver..uart..Uart$GT$$GT$17h4785ee23048b5bddE:

0000000080007074 <_ZN4core3ptr92drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..driver..uart..Uart$GT$$GT$17h4785ee23048b5bddE>:
    80007074:	1141                	addi	sp,sp,-16
    80007076:	e406                	sd	ra,8(sp)
    80007078:	e02a                	sd	a0,0(sp)
    8000707a:	00000097          	auipc	ra,0x0
    8000707e:	2f4080e7          	jalr	756(ra) # 8000736e <_ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hc6fa91bad8825bc2E>
    80007082:	a009                	j	80007084 <_ZN4core3ptr92drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..driver..uart..Uart$GT$$GT$17h4785ee23048b5bddE+0x10>
    80007084:	60a2                	ld	ra,8(sp)
    80007086:	0141                	addi	sp,sp,16
    80007088:	8082                	ret

Disassembly of section .text._ZN4core3ptr96drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$$GT$17hc79d9c89cd1d7f36E:

000000008000708a <_ZN4core3ptr96drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$$GT$17hc79d9c89cd1d7f36E>:
    8000708a:	1101                	addi	sp,sp,-32
    8000708c:	ec06                	sd	ra,24(sp)
    8000708e:	e42a                	sd	a0,8(sp)
    80007090:	e82a                	sd	a0,16(sp)
    80007092:	6108                	ld	a0,0(a0)
    80007094:	4581                	li	a1,0
    80007096:	00b51663          	bne	a0,a1,800070a2 <_ZN4core3ptr96drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$$GT$17hc79d9c89cd1d7f36E+0x18>
    8000709a:	a009                	j	8000709c <_ZN4core3ptr96drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$$GT$17hc79d9c89cd1d7f36E+0x12>
    8000709c:	60e2                	ld	ra,24(sp)
    8000709e:	6105                	addi	sp,sp,32
    800070a0:	8082                	ret
    800070a2:	6522                	ld	a0,8(sp)
    800070a4:	00000097          	auipc	ra,0x0
    800070a8:	eae080e7          	jalr	-338(ra) # 80006f52 <_ZN4core3ptr68drop_in_place$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$17h1ebe49ede9a118fdE>
    800070ac:	bfc5                	j	8000709c <_ZN4core3ptr96drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$$GT$17hc79d9c89cd1d7f36E+0x12>

Disassembly of section .text._ZN4core3ptr96drop_in_place$LT$kernel..lock..sleeplock..SleepLockGuard$LT$kernel..fs..inode..InodeData$GT$$GT$17h00d5c02cf687ef41E:

00000000800070ae <_ZN4core3ptr96drop_in_place$LT$kernel..lock..sleeplock..SleepLockGuard$LT$kernel..fs..inode..InodeData$GT$$GT$17h00d5c02cf687ef41E>:
    800070ae:	1141                	addi	sp,sp,-16
    800070b0:	e406                	sd	ra,8(sp)
    800070b2:	e02a                	sd	a0,0(sp)
    800070b4:	00000097          	auipc	ra,0x0
    800070b8:	2d2080e7          	jalr	722(ra) # 80007386 <_ZN90_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17ha2d42db7f65900b8E>
    800070bc:	a009                	j	800070be <_ZN4core3ptr96drop_in_place$LT$kernel..lock..sleeplock..SleepLockGuard$LT$kernel..fs..inode..InodeData$GT$$GT$17h00d5c02cf687ef41E+0x10>
    800070be:	60a2                	ld	ra,8(sp)
    800070c0:	0141                	addi	sp,sp,16
    800070c2:	8082                	ret

Disassembly of section .text._ZN4core3ptr98drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..driver..console..Console$GT$$GT$17hbea8b3b0221deadaE:

00000000800070c4 <_ZN4core3ptr98drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..driver..console..Console$GT$$GT$17hbea8b3b0221deadaE>:
    800070c4:	1141                	addi	sp,sp,-16
    800070c6:	e406                	sd	ra,8(sp)
    800070c8:	e02a                	sd	a0,0(sp)
    800070ca:	00000097          	auipc	ra,0x0
    800070ce:	25c080e7          	jalr	604(ra) # 80007326 <_ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hb3b00b618040e227E>
    800070d2:	a009                	j	800070d4 <_ZN4core3ptr98drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..driver..console..Console$GT$$GT$17hbea8b3b0221deadaE+0x10>
    800070d4:	60a2                	ld	ra,8(sp)
    800070d6:	0141                	addi	sp,sp,16
    800070d8:	8082                	ret

Disassembly of section .text._ZN4core3ptr99drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..driver..virtio_disk..Disk$GT$$GT$17h4fc01c278f0bfe6cE:

00000000800070da <_ZN4core3ptr99drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..driver..virtio_disk..Disk$GT$$GT$17h4fc01c278f0bfe6cE>:
    800070da:	1141                	addi	sp,sp,-16
    800070dc:	e406                	sd	ra,8(sp)
    800070de:	e02a                	sd	a0,0(sp)
    800070e0:	00000097          	auipc	ra,0x0
    800070e4:	1fe080e7          	jalr	510(ra) # 800072de <_ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h472d74790cb24d84E>
    800070e8:	a009                	j	800070ea <_ZN4core3ptr99drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..driver..virtio_disk..Disk$GT$$GT$17h4fc01c278f0bfe6cE+0x10>
    800070ea:	60a2                	ld	ra,8(sp)
    800070ec:	0141                	addi	sp,sp,16
    800070ee:	8082                	ret

Disassembly of section .text._ZN4core5clone5Clone5clone17h31f6bbc7b19c5f8bE:

00000000800070f0 <_ZN4core5clone5Clone5clone17h31f6bbc7b19c5f8bE>:
    ///
    /// assert_eq!("Hello", hello.clone());
    /// ```
    #[stable(feature = "rust1", since = "1.0.0")]
    #[must_use = "cloning is often expensive and is not expected to have side effects"]
    fn clone(&self) -> Self;
    800070f0:	7179                	addi	sp,sp,-48
    800070f2:	f406                	sd	ra,40(sp)
    800070f4:	e42e                	sd	a1,8(sp)
    800070f6:	e82a                	sd	a0,16(sp)
    800070f8:	f02e                	sd	a1,32(sp)
    800070fa:	4501                	li	a0,0
    800070fc:	ec2a                	sd	a0,24(sp)
    800070fe:	a009                	j	80007100 <_ZN4core5clone5Clone5clone17h31f6bbc7b19c5f8bE+0x10>
    80007100:	6562                	ld	a0,24(sp)
    80007102:	06400593          	li	a1,100
    80007106:	02b50563          	beq	a0,a1,80007130 <_ZN4core5clone5Clone5clone17h31f6bbc7b19c5f8bE+0x40>
    8000710a:	a009                	j	8000710c <_ZN4core5clone5Clone5clone17h31f6bbc7b19c5f8bE+0x1c>
    8000710c:	65c2                	ld	a1,16(sp)
    8000710e:	6522                	ld	a0,8(sp)
    80007110:	6662                	ld	a2,24(sp)
    80007112:	060e                	slli	a2,a2,0x3
    80007114:	9532                	add	a0,a0,a2
    80007116:	95b2                	add	a1,a1,a2
    80007118:	e02e                	sd	a1,0(sp)
    8000711a:	00008097          	auipc	ra,0x8
    8000711e:	fc4080e7          	jalr	-60(ra) # 8000f0de <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha5678c3a724a7a2fE>
    80007122:	6582                	ld	a1,0(sp)
    80007124:	e188                	sd	a0,0(a1)
    80007126:	a009                	j	80007128 <_ZN4core5clone5Clone5clone17h31f6bbc7b19c5f8bE+0x38>
    80007128:	6562                	ld	a0,24(sp)
    8000712a:	0505                	addi	a0,a0,1
    8000712c:	ec2a                	sd	a0,24(sp)
    8000712e:	bfc9                	j	80007100 <_ZN4core5clone5Clone5clone17h31f6bbc7b19c5f8bE+0x10>
    80007130:	70a2                	ld	ra,40(sp)
    80007132:	6145                	addi	sp,sp,48
    80007134:	8082                	ret

Disassembly of section .text._ZN67_$LT$alloc..sync..Arc$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h228396a8880ae9ddE:

0000000080007136 <_ZN67_$LT$alloc..sync..Arc$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h228396a8880ae9ddE>:
    fn drop(&mut self) {
    80007136:	7179                	addi	sp,sp,-48
    80007138:	f406                	sd	ra,40(sp)
    8000713a:	e42a                	sd	a0,8(sp)
    8000713c:	f02a                	sd	a0,32(sp)
        if self.inner().strong.fetch_sub(1, Release) != 1 {
    8000713e:	ffffb097          	auipc	ra,0xffffb
    80007142:	386080e7          	jalr	902(ra) # 800024c4 <_ZN5alloc4sync12Arc$LT$T$GT$5inner17h9bfe4db1ecae9d98E>
    80007146:	e82a                	sd	a0,16(sp)
    80007148:	a009                	j	8000714a <_ZN67_$LT$alloc..sync..Arc$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h228396a8880ae9ddE+0x14>
    8000714a:	6542                	ld	a0,16(sp)
    8000714c:	4605                	li	a2,1
    8000714e:	00c10f23          	sb	a2,30(sp)
    80007152:	85b2                	mv	a1,a2
    80007154:	ffffd097          	auipc	ra,0xffffd
    80007158:	624080e7          	jalr	1572(ra) # 80004778 <_ZN4core4sync6atomic11AtomicUsize9fetch_sub17h94fe355041184982E>
    8000715c:	e02a                	sd	a0,0(sp)
    8000715e:	a009                	j	80007160 <_ZN67_$LT$alloc..sync..Arc$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h228396a8880ae9ddE+0x2a>
    80007160:	6502                	ld	a0,0(sp)
    80007162:	4585                	li	a1,1
    80007164:	00b50463          	beq	a0,a1,8000716c <_ZN67_$LT$alloc..sync..Arc$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h228396a8880ae9ddE+0x36>
    80007168:	a009                	j	8000716a <_ZN67_$LT$alloc..sync..Arc$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h228396a8880ae9ddE+0x34>
    }
    8000716a:	a005                	j	8000718a <_ZN67_$LT$alloc..sync..Arc$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h228396a8880ae9ddE+0x54>
    8000716c:	4509                	li	a0,2
        acquire!(self.inner().strong);
    8000716e:	00a10fa3          	sb	a0,31(sp)
    80007172:	ffffd097          	auipc	ra,0xffffd
    80007176:	63e080e7          	jalr	1598(ra) # 800047b0 <_ZN4core4sync6atomic5fence17hd2f91624c9f09ce8E>
    8000717a:	a009                	j	8000717c <_ZN67_$LT$alloc..sync..Arc$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h228396a8880ae9ddE+0x46>
            self.drop_slow();
    8000717c:	6522                	ld	a0,8(sp)
    8000717e:	ffffb097          	auipc	ra,0xffffb
    80007182:	360080e7          	jalr	864(ra) # 800024de <_ZN5alloc4sync12Arc$LT$T$GT$9drop_slow17hcb02a55d90430c0dE>
    80007186:	a009                	j	80007188 <_ZN67_$LT$alloc..sync..Arc$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h228396a8880ae9ddE+0x52>
    }
    80007188:	a009                	j	8000718a <_ZN67_$LT$alloc..sync..Arc$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h228396a8880ae9ddE+0x54>
    8000718a:	70a2                	ld	ra,40(sp)
    8000718c:	6145                	addi	sp,sp,48
    8000718e:	8082                	ret

Disassembly of section .text._ZN68_$LT$alloc..sync..Weak$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hb23957f9542a4990E:

0000000080007190 <_ZN68_$LT$alloc..sync..Weak$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hb23957f9542a4990E>:
    /// drop(weak_foo);   // Doesn't print anything
    /// drop(foo);        // Prints "dropped!"
    ///
    /// assert!(other_weak_foo.upgrade().is_none());
    /// ```
    fn drop(&mut self) {
    80007190:	7119                	addi	sp,sp,-128
    80007192:	fc86                	sd	ra,120(sp)
    80007194:	f42a                	sd	a0,40(sp)
    80007196:	e8aa                	sd	a0,80(sp)
        //
        // It's not necessary to check for the locked state here, because the
        // weak count can only be locked if there was precisely one weak ref,
        // meaning that drop could only subsequently run ON that remaining weak
        // ref, which can only happen after the lock is released.
        let inner = if let Some(inner) = self.inner() { inner } else { return };
    80007198:	ffffb097          	auipc	ra,0xffffb
    8000719c:	37c080e7          	jalr	892(ra) # 80002514 <_ZN5alloc4sync13Weak$LT$T$GT$5inner17h5044bfde36c7c45eE>
    800071a0:	fc2a                	sd	a0,56(sp)
    800071a2:	e0ae                	sd	a1,64(sp)
    800071a4:	a009                	j	800071a6 <_ZN68_$LT$alloc..sync..Weak$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hb23957f9542a4990E+0x16>
    800071a6:	7562                	ld	a0,56(sp)
    800071a8:	4581                	li	a1,0
    800071aa:	00b51463          	bne	a0,a1,800071b2 <_ZN68_$LT$alloc..sync..Weak$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hb23957f9542a4990E+0x22>
    800071ae:	a009                	j	800071b0 <_ZN68_$LT$alloc..sync..Weak$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hb23957f9542a4990E+0x20>

        if inner.weak.fetch_sub(1, Release) == 1 {
            acquire!(inner.weak);
            unsafe { Global.deallocate(self.ptr.cast(), Layout::for_value_raw(self.ptr.as_ptr())) }
        }
    }
    800071b0:	a069                	j	8000723a <.LBB41_14+0x16>
        let inner = if let Some(inner) = self.inner() { inner } else { return };
    800071b2:	7562                	ld	a0,56(sp)
    800071b4:	6586                	ld	a1,64(sp)
    800071b6:	ecaa                	sd	a0,88(sp)
    800071b8:	f0ae                	sd	a1,96(sp)
    800071ba:	f4aa                	sd	a0,104(sp)
    800071bc:	f8ae                	sd	a1,112(sp)
    800071be:	4605                	li	a2,1
        if inner.weak.fetch_sub(1, Release) == 1 {
    800071c0:	04c10723          	sb	a2,78(sp)
    800071c4:	85b2                	mv	a1,a2
    800071c6:	ffffd097          	auipc	ra,0xffffd
    800071ca:	5b2080e7          	jalr	1458(ra) # 80004778 <_ZN4core4sync6atomic11AtomicUsize9fetch_sub17h94fe355041184982E>
    800071ce:	f02a                	sd	a0,32(sp)
    800071d0:	a009                	j	800071d2 <_ZN68_$LT$alloc..sync..Weak$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hb23957f9542a4990E+0x42>
    800071d2:	7502                	ld	a0,32(sp)
    800071d4:	4585                	li	a1,1
    800071d6:	00b51b63          	bne	a0,a1,800071ec <_ZN68_$LT$alloc..sync..Weak$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hb23957f9542a4990E+0x5c>
    800071da:	a009                	j	800071dc <_ZN68_$LT$alloc..sync..Weak$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hb23957f9542a4990E+0x4c>
    800071dc:	4509                	li	a0,2
            acquire!(inner.weak);
    800071de:	04a107a3          	sb	a0,79(sp)
    800071e2:	ffffd097          	auipc	ra,0xffffd
    800071e6:	5ce080e7          	jalr	1486(ra) # 800047b0 <_ZN4core4sync6atomic5fence17hd2f91624c9f09ce8E>
    800071ea:	a011                	j	800071ee <_ZN68_$LT$alloc..sync..Weak$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hb23957f9542a4990E+0x5e>
        if inner.weak.fetch_sub(1, Release) == 1 {
    800071ec:	a0b1                	j	80007238 <.LBB41_14+0x14>
            unsafe { Global.deallocate(self.ptr.cast(), Layout::for_value_raw(self.ptr.as_ptr())) }
    800071ee:	7522                	ld	a0,40(sp)
    800071f0:	6108                	ld	a0,0(a0)
    800071f2:	00008097          	auipc	ra,0x8
    800071f6:	174080e7          	jalr	372(ra) # 8000f366 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h7831112f0067c5f4E>
    800071fa:	ec2a                	sd	a0,24(sp)
    800071fc:	a009                	j	800071fe <_ZN68_$LT$alloc..sync..Weak$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hb23957f9542a4990E+0x6e>
    800071fe:	7522                	ld	a0,40(sp)
    80007200:	6108                	ld	a0,0(a0)
    80007202:	00008097          	auipc	ra,0x8
    80007206:	270080e7          	jalr	624(ra) # 8000f472 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17hc25f2e50aadb25dbE>
    8000720a:	e82a                	sd	a0,16(sp)
    8000720c:	a009                	j	8000720e <_ZN68_$LT$alloc..sync..Weak$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hb23957f9542a4990E+0x7e>
    8000720e:	6542                	ld	a0,16(sp)
    80007210:	00001097          	auipc	ra,0x1
    80007214:	2e2080e7          	jalr	738(ra) # 800084f2 <_ZN4core5alloc6layout6Layout13for_value_raw17h9ddd239d574f5362E>
    80007218:	e02a                	sd	a0,0(sp)
    8000721a:	e42e                	sd	a1,8(sp)
    8000721c:	a009                	j	8000721e <_ZN68_$LT$alloc..sync..Weak$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hb23957f9542a4990E+0x8e>
    8000721e:	66a2                	ld	a3,8(sp)
    80007220:	6602                	ld	a2,0(sp)
    80007222:	65e2                	ld	a1,24(sp)

0000000080007224 <.LBB41_14>:
    80007224:	00020517          	auipc	a0,0x20
    80007228:	a7450513          	addi	a0,a0,-1420 # 80026c98 <.L__unnamed_16>
    8000722c:	00005097          	auipc	ra,0x5
    80007230:	fa4080e7          	jalr	-92(ra) # 8000c1d0 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17hd299418f64a2b74eE>
    80007234:	a009                	j	80007236 <.LBB41_14+0x12>
        if inner.weak.fetch_sub(1, Release) == 1 {
    80007236:	a009                	j	80007238 <.LBB41_14+0x14>
    }
    80007238:	a009                	j	8000723a <.LBB41_14+0x16>
    8000723a:	70e6                	ld	ra,120(sp)
    8000723c:	6109                	addi	sp,sp,128
    8000723e:	8082                	ret

Disassembly of section .text._ZN70_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hf7bf84e08f8deec7E:

0000000080007240 <_ZN70_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hf7bf84e08f8deec7E>:
    }
}

#[stable(feature = "rust1", since = "1.0.0")]
unsafe impl<#[may_dangle] T, A: Allocator> Drop for Vec<T, A> {
    fn drop(&mut self) {
    80007240:	1101                	addi	sp,sp,-32
    80007242:	ec06                	sd	ra,24(sp)
    80007244:	e02a                	sd	a0,0(sp)
    80007246:	e82a                	sd	a0,16(sp)
        unsafe {
            // use drop for [T]
            // use a raw slice to refer to the elements of the vector as weakest necessary type;
            // could avoid questions of validity in certain cases
            ptr::drop_in_place(ptr::slice_from_raw_parts_mut(self.as_mut_ptr(), self.len))
    80007248:	0000f097          	auipc	ra,0xf
    8000724c:	716080e7          	jalr	1814(ra) # 8001695e <_ZN5alloc3vec16Vec$LT$T$C$A$GT$10as_mut_ptr17h2d512420264161fdE>
    80007250:	e42a                	sd	a0,8(sp)
    80007252:	a009                	j	80007254 <_ZN70_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hf7bf84e08f8deec7E+0x14>
    80007254:	6522                	ld	a0,8(sp)
    80007256:	6582                	ld	a1,0(sp)
    80007258:	698c                	ld	a1,16(a1)
    8000725a:	0001a097          	auipc	ra,0x1a
    8000725e:	3d4080e7          	jalr	980(ra) # 8002162e <_ZN4core3ptr24slice_from_raw_parts_mut17h39496eba86137ee5E>
    80007262:	a009                	j	80007264 <_ZN70_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hf7bf84e08f8deec7E+0x24>
    80007264:	a009                	j	80007266 <_ZN70_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hf7bf84e08f8deec7E+0x26>
        }
        // RawVec handles deallocation
    }
    80007266:	60e2                	ld	ra,24(sp)
    80007268:	6105                	addi	sp,sp,32
    8000726a:	8082                	ret

Disassembly of section .text._ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h07f37a6ddf49c648E:

000000008000726c <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h07f37a6ddf49c648E>:

unsafe impl<#[may_dangle] T, A: Allocator> Drop for RawVec<T, A> {
    /// Frees the memory owned by the `RawVec` *without* trying to drop its contents.
    fn drop(&mut self) {
    8000726c:	715d                	addi	sp,sp,-80
    8000726e:	e486                	sd	ra,72(sp)
    80007270:	85aa                	mv	a1,a0
    80007272:	e02e                	sd	a1,0(sp)
    80007274:	f42e                	sd	a1,40(sp)
    80007276:	0808                	addi	a0,sp,16
        if let Some((ptr, layout)) = self.current_memory() {
    80007278:	ffffb097          	auipc	ra,0xffffb
    8000727c:	776080e7          	jalr	1910(ra) # 800029ee <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$14current_memory17h47d07dfc1131b1d6E>
    80007280:	a009                	j	80007282 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h07f37a6ddf49c648E+0x16>
    80007282:	6542                	ld	a0,16(sp)
    80007284:	4581                	li	a1,0
    80007286:	00b51463          	bne	a0,a1,8000728e <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h07f37a6ddf49c648E+0x22>
    8000728a:	a009                	j	8000728c <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h07f37a6ddf49c648E+0x20>
    8000728c:	a831                	j	800072a8 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h07f37a6ddf49c648E+0x3c>
    8000728e:	6502                	ld	a0,0(sp)
    80007290:	65c2                	ld	a1,16(sp)
    80007292:	f82e                	sd	a1,48(sp)
    80007294:	6662                	ld	a2,24(sp)
    80007296:	7682                	ld	a3,32(sp)
    80007298:	fc32                	sd	a2,56(sp)
    8000729a:	e0b6                	sd	a3,64(sp)
            unsafe { self.alloc.deallocate(ptr, layout) }
    8000729c:	00005097          	auipc	ra,0x5
    800072a0:	f34080e7          	jalr	-204(ra) # 8000c1d0 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17hd299418f64a2b74eE>
    800072a4:	a009                	j	800072a6 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h07f37a6ddf49c648E+0x3a>
        if let Some((ptr, layout)) = self.current_memory() {
    800072a6:	a009                	j	800072a8 <_ZN77_$LT$alloc..raw_vec..RawVec$LT$T$C$A$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h07f37a6ddf49c648E+0x3c>
        }
    }
    800072a8:	60a6                	ld	ra,72(sp)
    800072aa:	6161                	addi	sp,sp,80
    800072ac:	8082                	ret

Disassembly of section .text._ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h07564fb2c96981cdE:

00000000800072ae <_ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h07564fb2c96981cdE>:
        }
    }
}

impl<T> Drop for SpinlockGuard<'_, T>{
    fn drop(&mut self){
    800072ae:	1141                	addi	sp,sp,-16
    800072b0:	e406                	sd	ra,8(sp)
    800072b2:	e02a                	sd	a0,0(sp)
        self.spinlock.release()
    800072b4:	6108                	ld	a0,0(a0)
    800072b6:	00009097          	auipc	ra,0x9
    800072ba:	53e080e7          	jalr	1342(ra) # 800107f4 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17h4488adb03f65166cE>
    800072be:	a009                	j	800072c0 <_ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h07564fb2c96981cdE+0x12>
    }
    800072c0:	60a2                	ld	ra,8(sp)
    800072c2:	0141                	addi	sp,sp,16
    800072c4:	8082                	ret

Disassembly of section .text._ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h1d31607f4cd7f071E:

00000000800072c6 <_ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h1d31607f4cd7f071E>:
    fn drop(&mut self){
    800072c6:	1141                	addi	sp,sp,-16
    800072c8:	e406                	sd	ra,8(sp)
    800072ca:	e02a                	sd	a0,0(sp)
        self.spinlock.release()
    800072cc:	6108                	ld	a0,0(a0)
    800072ce:	0000a097          	auipc	ra,0xa
    800072d2:	8a0080e7          	jalr	-1888(ra) # 80010b6e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17hd5c81d47b1881bbfE>
    800072d6:	a009                	j	800072d8 <_ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h1d31607f4cd7f071E+0x12>
    }
    800072d8:	60a2                	ld	ra,8(sp)
    800072da:	0141                	addi	sp,sp,16
    800072dc:	8082                	ret

Disassembly of section .text._ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h472d74790cb24d84E:

00000000800072de <_ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h472d74790cb24d84E>:
    fn drop(&mut self){
    800072de:	1141                	addi	sp,sp,-16
    800072e0:	e406                	sd	ra,8(sp)
    800072e2:	e02a                	sd	a0,0(sp)
        self.spinlock.release()
    800072e4:	6108                	ld	a0,0(a0)
    800072e6:	0000a097          	auipc	ra,0xa
    800072ea:	a9e080e7          	jalr	-1378(ra) # 80010d84 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17hfedbfd7a024c8acfE>
    800072ee:	a009                	j	800072f0 <_ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h472d74790cb24d84E+0x12>
    }
    800072f0:	60a2                	ld	ra,8(sp)
    800072f2:	0141                	addi	sp,sp,16
    800072f4:	8082                	ret

Disassembly of section .text._ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h5c638f5071dc4adaE:

00000000800072f6 <_ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h5c638f5071dc4adaE>:
    fn drop(&mut self){
    800072f6:	1141                	addi	sp,sp,-16
    800072f8:	e406                	sd	ra,8(sp)
    800072fa:	e02a                	sd	a0,0(sp)
        self.spinlock.release()
    800072fc:	6108                	ld	a0,0(a0)
    800072fe:	00009097          	auipc	ra,0x9
    80007302:	70c080e7          	jalr	1804(ra) # 80010a0a <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17h84d22e527c35405fE>
    80007306:	a009                	j	80007308 <_ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h5c638f5071dc4adaE+0x12>
    }
    80007308:	60a2                	ld	ra,8(sp)
    8000730a:	0141                	addi	sp,sp,16
    8000730c:	8082                	ret

Disassembly of section .text._ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h821d547a3c969c60E:

000000008000730e <_ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h821d547a3c969c60E>:
    fn drop(&mut self){
    8000730e:	1141                	addi	sp,sp,-16
    80007310:	e406                	sd	ra,8(sp)
    80007312:	e02a                	sd	a0,0(sp)
        self.spinlock.release()
    80007314:	6108                	ld	a0,0(a0)
    80007316:	0000a097          	auipc	ra,0xa
    8000731a:	9bc080e7          	jalr	-1604(ra) # 80010cd2 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17hfda5e7f2f4cdedb7E>
    8000731e:	a009                	j	80007320 <_ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h821d547a3c969c60E+0x12>
    }
    80007320:	60a2                	ld	ra,8(sp)
    80007322:	0141                	addi	sp,sp,16
    80007324:	8082                	ret

Disassembly of section .text._ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hb3b00b618040e227E:

0000000080007326 <_ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hb3b00b618040e227E>:
    fn drop(&mut self){
    80007326:	1141                	addi	sp,sp,-16
    80007328:	e406                	sd	ra,8(sp)
    8000732a:	e02a                	sd	a0,0(sp)
        self.spinlock.release()
    8000732c:	6108                	ld	a0,0(a0)
    8000732e:	0000a097          	auipc	ra,0xa
    80007332:	8f2080e7          	jalr	-1806(ra) # 80010c20 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17hdd8465c64dcbee95E>
    80007336:	a009                	j	80007338 <_ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hb3b00b618040e227E+0x12>
    }
    80007338:	60a2                	ld	ra,8(sp)
    8000733a:	0141                	addi	sp,sp,16
    8000733c:	8082                	ret

Disassembly of section .text._ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hbd0d5c90a46c79b0E:

000000008000733e <_ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hbd0d5c90a46c79b0E>:
    fn drop(&mut self){
    8000733e:	1141                	addi	sp,sp,-16
    80007340:	e406                	sd	ra,8(sp)
    80007342:	e02a                	sd	a0,0(sp)
        self.spinlock.release()
    80007344:	6108                	ld	a0,0(a0)
    80007346:	00009097          	auipc	ra,0x9
    8000734a:	776080e7          	jalr	1910(ra) # 80010abc <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17hb6d563787d966a77E>
    8000734e:	a009                	j	80007350 <_ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hbd0d5c90a46c79b0E+0x12>
    }
    80007350:	60a2                	ld	ra,8(sp)
    80007352:	0141                	addi	sp,sp,16
    80007354:	8082                	ret

Disassembly of section .text._ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hc0ab90800bd26fd3E:

0000000080007356 <_ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hc0ab90800bd26fd3E>:
    fn drop(&mut self){
    80007356:	1141                	addi	sp,sp,-16
    80007358:	e406                	sd	ra,8(sp)
    8000735a:	e02a                	sd	a0,0(sp)
        self.spinlock.release()
    8000735c:	6108                	ld	a0,0(a0)
    8000735e:	00009097          	auipc	ra,0x9
    80007362:	548080e7          	jalr	1352(ra) # 800108a6 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17h7f531b2c66469855E>
    80007366:	a009                	j	80007368 <_ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hc0ab90800bd26fd3E+0x12>
    }
    80007368:	60a2                	ld	ra,8(sp)
    8000736a:	0141                	addi	sp,sp,16
    8000736c:	8082                	ret

Disassembly of section .text._ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hc6fa91bad8825bc2E:

000000008000736e <_ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hc6fa91bad8825bc2E>:
    fn drop(&mut self){
    8000736e:	1141                	addi	sp,sp,-16
    80007370:	e406                	sd	ra,8(sp)
    80007372:	e02a                	sd	a0,0(sp)
        self.spinlock.release()
    80007374:	6108                	ld	a0,0(a0)
    80007376:	00009097          	auipc	ra,0x9
    8000737a:	5e2080e7          	jalr	1506(ra) # 80010958 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17h8041517806e423d6E>
    8000737e:	a009                	j	80007380 <_ZN88_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hc6fa91bad8825bc2E+0x12>
    }
    80007380:	60a2                	ld	ra,8(sp)
    80007382:	0141                	addi	sp,sp,16
    80007384:	8082                	ret

Disassembly of section .text._ZN90_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17ha2d42db7f65900b8E:

0000000080007386 <_ZN90_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17ha2d42db7f65900b8E>:
}

impl<'a, T: ?Sized> Drop for SleepLockGuard<'a, T> {
    /// The dropping of the SpinLockGuard will call spinlock's release_lock(),
    /// through its reference to its original spinlock.
    fn drop(&mut self) {
    80007386:	1141                	addi	sp,sp,-16
    80007388:	e406                	sd	ra,8(sp)
    8000738a:	e02a                	sd	a0,0(sp)
        self.lock.unlock();
    8000738c:	6108                	ld	a0,0(a0)
    8000738e:	00016097          	auipc	ra,0x16
    80007392:	078080e7          	jalr	120(ra) # 8001d406 <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$6unlock17h4136b26b6a44129dE>
    80007396:	a009                	j	80007398 <_ZN90_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17ha2d42db7f65900b8E+0x12>
    }
    80007398:	60a2                	ld	ra,8(sp)
    8000739a:	0141                	addi	sp,sp,16
    8000739c:	8082                	ret

Disassembly of section .text._ZN90_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hd4f2db8ec388cdc1E:

000000008000739e <_ZN90_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hd4f2db8ec388cdc1E>:
    fn drop(&mut self) {
    8000739e:	1141                	addi	sp,sp,-16
    800073a0:	e406                	sd	ra,8(sp)
    800073a2:	e02a                	sd	a0,0(sp)
        self.lock.unlock();
    800073a4:	6108                	ld	a0,0(a0)
    800073a6:	00016097          	auipc	ra,0x16
    800073aa:	0a8080e7          	jalr	168(ra) # 8001d44e <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$6unlock17h5d72a4d2b4e61b31E>
    800073ae:	a009                	j	800073b0 <_ZN90_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17hd4f2db8ec388cdc1E+0x12>
    }
    800073b0:	60a2                	ld	ra,8(sp)
    800073b2:	0141                	addi	sp,sp,16
    800073b4:	8082                	ret

Disassembly of section .text._ZN62_$LT$kernel..fs..bio..Buf$u20$as$u20$core..ops..drop..Drop$GT$4drop17hae787f8a28b7a10dE:

00000000800073b6 <_ZN62_$LT$kernel..fs..bio..Buf$u20$as$u20$core..ops..drop..Drop$GT$4drop17hae787f8a28b7a10dE>:
    fn drop(&mut self) {
    800073b6:	7179                	addi	sp,sp,-48
    800073b8:	f406                	sd	ra,40(sp)
    800073ba:	e42a                	sd	a0,8(sp)
    800073bc:	f02a                	sd	a0,32(sp)
        drop(self.data.take());
    800073be:	0541                	addi	a0,a0,16
    800073c0:	00007097          	auipc	ra,0x7
    800073c4:	230080e7          	jalr	560(ra) # 8000e5f0 <_ZN4core6option15Option$LT$T$GT$4take17h80340c04cecd09beE>
    800073c8:	e82a                	sd	a0,16(sp)
    800073ca:	ec2e                	sd	a1,24(sp)
    800073cc:	a009                	j	800073ce <_ZN62_$LT$kernel..fs..bio..Buf$u20$as$u20$core..ops..drop..Drop$GT$4drop17hae787f8a28b7a10dE+0x18>
    800073ce:	65e2                	ld	a1,24(sp)
    800073d0:	6542                	ld	a0,16(sp)
    800073d2:	00016097          	auipc	ra,0x16
    800073d6:	b3e080e7          	jalr	-1218(ra) # 8001cf10 <_ZN4core3mem4drop17h8377f059e38e21aaE>
    800073da:	a009                	j	800073dc <_ZN62_$LT$kernel..fs..bio..Buf$u20$as$u20$core..ops..drop..Drop$GT$4drop17hae787f8a28b7a10dE+0x26>
        BCACHE.brelse(self.index);        
    800073dc:	6522                	ld	a0,8(sp)
    800073de:	610c                	ld	a1,0(a0)

00000000800073e0 <.LBB55_4>:
    800073e0:	00028517          	auipc	a0,0x28
    800073e4:	c2050513          	addi	a0,a0,-992 # 8002f000 <_ZN6kernel2fs3bio6BCACHE17h4811aac4f8d79dc4E>
    800073e8:	ffffc097          	auipc	ra,0xffffc
    800073ec:	2ea080e7          	jalr	746(ra) # 800036d2 <_ZN6kernel2fs3bio6Bcache6brelse17hc59c97ea45d16b39E>
    800073f0:	a009                	j	800073f2 <.LBB55_4+0x12>
    }
    800073f2:	70a2                	ld	ra,40(sp)
    800073f4:	6145                	addi	sp,sp,48
    800073f6:	8082                	ret

Disassembly of section .text._ZN66_$LT$kernel..fs..inode..Inode$u20$as$u20$core..ops..drop..Drop$GT$4drop17h624968f150cac4e7E:

00000000800073f8 <_ZN66_$LT$kernel..fs..inode..Inode$u20$as$u20$core..ops..drop..Drop$GT$4drop17h624968f150cac4e7E>:

impl Drop for Inode {
    /// Done with this inode. 
    /// If this is the last reference in the inode cache, then is might be recycled. 
    /// Further, if this inode has no links anymore, free this inode in the disk. 
    fn drop(&mut self) {
    800073f8:	1141                	addi	sp,sp,-16
    800073fa:	e406                	sd	ra,8(sp)
    800073fc:	85aa                	mv	a1,a0
    800073fe:	e02e                	sd	a1,0(sp)

0000000080007400 <.LBB56_2>:
        ICACHE.put(self)
    80007400:	00052517          	auipc	a0,0x52
    80007404:	31050513          	addi	a0,a0,784 # 80059710 <_ZN6kernel2fs5inode6ICACHE17had1be8942ca79bf1E>
    80007408:	00011097          	auipc	ra,0x11
    8000740c:	45c080e7          	jalr	1116(ra) # 80018864 <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE>
    80007410:	a009                	j	80007412 <.LBB56_2+0x12>
    }
    80007412:	60a2                	ld	ra,8(sp)
    80007414:	0141                	addi	sp,sp,16
    80007416:	8082                	ret

Disassembly of section .text._ZN84_$LT$core..num..wrapping..Wrapping$LT$usize$GT$$u20$as$u20$core..ops..arith..Add$GT$3add17hc13ca841e8f8e9ddE:

0000000080007418 <_ZN84_$LT$core..num..wrapping..Wrapping$LT$usize$GT$$u20$as$u20$core..ops..arith..Add$GT$3add17hc13ca841e8f8e9ddE>:
        #[stable(feature = "rust1", since = "1.0.0")]
        impl Add for Wrapping<$t> {
            type Output = Wrapping<$t>;

            #[inline]
            fn add(self, other: Wrapping<$t>) -> Wrapping<$t> {
    80007418:	7179                	addi	sp,sp,-48
    8000741a:	f406                	sd	ra,40(sp)
    8000741c:	ec2a                	sd	a0,24(sp)
    8000741e:	f02e                	sd	a1,32(sp)
                Wrapping(self.0.wrapping_add(other.0))
    80007420:	00017097          	auipc	ra,0x17
    80007424:	af8080e7          	jalr	-1288(ra) # 8001df18 <_ZN4core3num23_$LT$impl$u20$usize$GT$12wrapping_add17he0ea74277f4c06b1E>
    80007428:	e42a                	sd	a0,8(sp)
    8000742a:	a009                	j	8000742c <_ZN84_$LT$core..num..wrapping..Wrapping$LT$usize$GT$$u20$as$u20$core..ops..arith..Add$GT$3add17hc13ca841e8f8e9ddE+0x14>
    8000742c:	6522                	ld	a0,8(sp)
    8000742e:	e82a                	sd	a0,16(sp)
            }
    80007430:	70a2                	ld	ra,40(sp)
    80007432:	6145                	addi	sp,sp,48
    80007434:	8082                	ret

Disassembly of section .text._ZN84_$LT$core..num..wrapping..Wrapping$LT$usize$GT$$u20$as$u20$core..ops..arith..Sub$GT$3sub17h09c98f8a3aa1050aE:

0000000080007436 <_ZN84_$LT$core..num..wrapping..Wrapping$LT$usize$GT$$u20$as$u20$core..ops..arith..Sub$GT$3sub17h09c98f8a3aa1050aE>:
        #[stable(feature = "rust1", since = "1.0.0")]
        impl Sub for Wrapping<$t> {
            type Output = Wrapping<$t>;

            #[inline]
            fn sub(self, other: Wrapping<$t>) -> Wrapping<$t> {
    80007436:	7179                	addi	sp,sp,-48
    80007438:	f406                	sd	ra,40(sp)
    8000743a:	ec2a                	sd	a0,24(sp)
    8000743c:	f02e                	sd	a1,32(sp)
                Wrapping(self.0.wrapping_sub(other.0))
    8000743e:	00017097          	auipc	ra,0x17
    80007442:	ae6080e7          	jalr	-1306(ra) # 8001df24 <_ZN4core3num23_$LT$impl$u20$usize$GT$12wrapping_sub17h8f077bf007d122c9E>
    80007446:	e42a                	sd	a0,8(sp)
    80007448:	a009                	j	8000744a <_ZN84_$LT$core..num..wrapping..Wrapping$LT$usize$GT$$u20$as$u20$core..ops..arith..Sub$GT$3sub17h09c98f8a3aa1050aE+0x14>
    8000744a:	6522                	ld	a0,8(sp)
    8000744c:	e82a                	sd	a0,16(sp)
            }
    8000744e:	70a2                	ld	ra,40(sp)
    80007450:	6145                	addi	sp,sp,48
    80007452:	8082                	ret

Disassembly of section .text._ZN90_$LT$core..num..wrapping..Wrapping$LT$usize$GT$$u20$as$u20$core..ops..arith..AddAssign$GT$10add_assign17hc731864567f3481aE:

0000000080007454 <_ZN90_$LT$core..num..wrapping..Wrapping$LT$usize$GT$$u20$as$u20$core..ops..arith..AddAssign$GT$10add_assign17hc731864567f3481aE>:
            fn add_assign(&mut self, other: Wrapping<$t>) {
    80007454:	7179                	addi	sp,sp,-48
    80007456:	f406                	sd	ra,40(sp)
    80007458:	e42a                	sd	a0,8(sp)
    8000745a:	ec2a                	sd	a0,24(sp)
    8000745c:	f02e                	sd	a1,32(sp)
                *self = *self + other;
    8000745e:	6108                	ld	a0,0(a0)
    80007460:	00000097          	auipc	ra,0x0
    80007464:	fb8080e7          	jalr	-72(ra) # 80007418 <_ZN84_$LT$core..num..wrapping..Wrapping$LT$usize$GT$$u20$as$u20$core..ops..arith..Add$GT$3add17hc13ca841e8f8e9ddE>
    80007468:	e82a                	sd	a0,16(sp)
    8000746a:	a009                	j	8000746c <_ZN90_$LT$core..num..wrapping..Wrapping$LT$usize$GT$$u20$as$u20$core..ops..arith..AddAssign$GT$10add_assign17hc731864567f3481aE+0x18>
    8000746c:	6542                	ld	a0,16(sp)
    8000746e:	65a2                	ld	a1,8(sp)
    80007470:	e188                	sd	a0,0(a1)
            }
    80007472:	70a2                	ld	ra,40(sp)
    80007474:	6145                	addi	sp,sp,48
    80007476:	8082                	ret

Disassembly of section .text._ZN90_$LT$core..num..wrapping..Wrapping$LT$usize$GT$$u20$as$u20$core..ops..arith..SubAssign$GT$10sub_assign17h67a53f3fa0ccb70bE:

0000000080007478 <_ZN90_$LT$core..num..wrapping..Wrapping$LT$usize$GT$$u20$as$u20$core..ops..arith..SubAssign$GT$10sub_assign17h67a53f3fa0ccb70bE>:
                #[stable(feature = "wrapping_ref", since = "1.14.0")] }

        #[stable(feature = "op_assign_traits", since = "1.8.0")]
        impl SubAssign for Wrapping<$t> {
            #[inline]
            fn sub_assign(&mut self, other: Wrapping<$t>) {
    80007478:	7179                	addi	sp,sp,-48
    8000747a:	f406                	sd	ra,40(sp)
    8000747c:	e42a                	sd	a0,8(sp)
    8000747e:	ec2a                	sd	a0,24(sp)
    80007480:	f02e                	sd	a1,32(sp)
                *self = *self - other;
    80007482:	6108                	ld	a0,0(a0)
    80007484:	00000097          	auipc	ra,0x0
    80007488:	fb2080e7          	jalr	-78(ra) # 80007436 <_ZN84_$LT$core..num..wrapping..Wrapping$LT$usize$GT$$u20$as$u20$core..ops..arith..Sub$GT$3sub17h09c98f8a3aa1050aE>
    8000748c:	e82a                	sd	a0,16(sp)
    8000748e:	a009                	j	80007490 <_ZN90_$LT$core..num..wrapping..Wrapping$LT$usize$GT$$u20$as$u20$core..ops..arith..SubAssign$GT$10sub_assign17h67a53f3fa0ccb70bE+0x18>
    80007490:	6542                	ld	a0,16(sp)
    80007492:	65a2                	ld	a1,8(sp)
    80007494:	e188                	sd	a0,0(a1)
            }
    80007496:	70a2                	ld	ra,40(sp)
    80007498:	6145                	addi	sp,sp,48
    8000749a:	8082                	ret

Disassembly of section .text._ZN6kernel4misc3min17he96917d05b11cd47E:

000000008000749c <_ZN6kernel4misc3min17he96917d05b11cd47E>:
use core::ptr::read;
use core::cmp::Ord;
use core::ptr::{ write, write_bytes };

pub fn min<T>(a: T, b: T) -> T 
    8000749c:	7179                	addi	sp,sp,-48
    8000749e:	f406                	sd	ra,40(sp)
    800074a0:	e82a                	sd	a0,16(sp)
    800074a2:	ec2e                	sd	a1,24(sp)
    800074a4:	0808                	addi	a0,sp,16
    800074a6:	082c                	addi	a1,sp,24
    where T: Ord
{
    if a < b {
    800074a8:	00014097          	auipc	ra,0x14
    800074ac:	1ac080e7          	jalr	428(ra) # 8001b654 <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17ha09858e1dc8f460eE>
    800074b0:	e42a                	sd	a0,8(sp)
    800074b2:	a009                	j	800074b4 <_ZN6kernel4misc3min17he96917d05b11cd47E+0x18>
    800074b4:	6522                	ld	a0,8(sp)
    800074b6:	4581                	li	a1,0
    800074b8:	00b50663          	beq	a0,a1,800074c4 <_ZN6kernel4misc3min17he96917d05b11cd47E+0x28>
    800074bc:	a009                	j	800074be <_ZN6kernel4misc3min17he96917d05b11cd47E+0x22>
        return a
    800074be:	6542                	ld	a0,16(sp)
    800074c0:	f02a                	sd	a0,32(sp)
    }
    b
}
    800074c2:	a021                	j	800074ca <_ZN6kernel4misc3min17he96917d05b11cd47E+0x2e>
    b
    800074c4:	6562                	ld	a0,24(sp)
    800074c6:	f02a                	sd	a0,32(sp)
}
    800074c8:	a009                	j	800074ca <_ZN6kernel4misc3min17he96917d05b11cd47E+0x2e>
    800074ca:	7502                	ld	a0,32(sp)
    800074cc:	70a2                	ld	ra,40(sp)
    800074ce:	6145                	addi	sp,sp,48
    800074d0:	8082                	ret

Disassembly of section .text._ZN6kernel2fs10superblock10SuperBlock4init17hd314ea22bd8e6757E:

00000000800074d2 <_ZN6kernel2fs10superblock10SuperBlock4init17hd314ea22bd8e6757E>:
        }
    }

    /// Read and init the super block from disk into memory.
    /// SAFETY: it should only be called by the first regular process alone.
    pub unsafe fn init(&mut self, dev: u32) {
    800074d2:	7125                	addi	sp,sp,-416
    800074d4:	ef06                	sd	ra,408(sp)
    800074d6:	ecaa                	sd	a0,88(sp)
    800074d8:	862e                	mv	a2,a1
    800074da:	f0b2                	sd	a2,96(sp)
    800074dc:	eeaa                	sd	a0,344(sp)
    800074de:	16b12223          	sw	a1,356(sp)
    800074e2:	4521                	li	a0,8
    800074e4:	f4aa                	sd	a0,104(sp)
    800074e6:	feaa                	sd	a0,376(sp)
        debug_assert_eq!(mem::align_of::<BufData>() % mem::align_of::<RawSuperBlock>(), 0);
    800074e8:	a009                	j	800074ea <_ZN6kernel2fs10superblock10SuperBlock4init17hd314ea22bd8e6757E+0x18>
    800074ea:	4511                	li	a0,4
    800074ec:	e8aa                	sd	a0,80(sp)
    800074ee:	eb2a                	sd	a0,400(sp)
    800074f0:	a009                	j	800074f2 <_ZN6kernel2fs10superblock10SuperBlock4init17hd314ea22bd8e6757E+0x20>
    800074f2:	6546                	ld	a0,80(sp)
    800074f4:	4581                	li	a1,0
    800074f6:	18b50763          	beq	a0,a1,80007684 <.LBB0_31>
    800074fa:	a009                	j	800074fc <_ZN6kernel2fs10superblock10SuperBlock4init17hd314ea22bd8e6757E+0x2a>
    800074fc:	7526                	ld	a0,104(sp)
    800074fe:	65c6                	ld	a1,80(sp)
    80007500:	02b57533          	remu	a0,a0,a1
    80007504:	e52a                	sd	a0,136(sp)
    80007506:	0130                	addi	a2,sp,136
    80007508:	e0b2                	sd	a2,64(sp)
    8000750a:	fcb2                	sd	a2,120(sp)

000000008000750c <.LBB0_23>:
    8000750c:	0001f597          	auipc	a1,0x1f
    80007510:	2f458593          	addi	a1,a1,756 # 80026800 <.L__unnamed_6+0xc8>
    80007514:	e4ae                	sd	a1,72(sp)
    80007516:	e12e                	sd	a1,128(sp)
    80007518:	f6b2                	sd	a2,360(sp)
    8000751a:	faae                	sd	a1,368(sp)
    8000751c:	4581                	li	a1,0
    8000751e:	02b50363          	beq	a0,a1,80007544 <.LBB0_24+0x14>
    80007522:	a009                	j	80007524 <.LBB0_23+0x18>
    80007524:	6626                	ld	a2,72(sp)
    80007526:	6586                	ld	a1,64(sp)
    80007528:	4501                	li	a0,0
    8000752a:	08a10ba3          	sb	a0,151(sp)
    8000752e:	ed2a                	sd	a0,152(sp)

0000000080007530 <.LBB0_24>:
    80007530:	0001f717          	auipc	a4,0x1f
    80007534:	7e070713          	addi	a4,a4,2016 # 80026d10 <.L__unnamed_2>
    80007538:	0934                	addi	a3,sp,152
    8000753a:	00018097          	auipc	ra,0x18
    8000753e:	2f0080e7          	jalr	752(ra) # 8001f82a <_ZN4core9panicking13assert_failed17h4e6d74c9d534b647E>
    80007542:	0000                	unimp
        if self.initialized.load(Ordering::Relaxed) {
    80007544:	6566                	ld	a0,88(sp)
    80007546:	02050513          	addi	a0,a0,32
    8000754a:	4581                	li	a1,0
    8000754c:	0cb107a3          	sb	a1,207(sp)
    80007550:	ffffd097          	auipc	ra,0xffffd
    80007554:	11e080e7          	jalr	286(ra) # 8000466e <_ZN4core4sync6atomic10AtomicBool4load17h49a663f50dd66935E>
    80007558:	fc2a                	sd	a0,56(sp)
    8000755a:	a009                	j	8000755c <.LBB0_24+0x2c>
    8000755c:	7562                	ld	a0,56(sp)
    8000755e:	4581                	li	a1,0
    80007560:	00b50463          	beq	a0,a1,80007568 <.LBB0_24+0x38>
    80007564:	a009                	j	80007566 <.LBB0_24+0x36>
        self.initialized.store(true, Ordering::SeqCst);
        drop(buf);

        #[cfg(feature = "verbose_init_info")]
        println!("super block data: {:?}", self.data.as_ptr().as_ref().unwrap());
    }
    80007566:	aa21                	j	8000767e <.LBB0_30+0x4e>
        let buf = BCACHE.bread(dev, 1);
    80007568:	7606                	ld	a2,96(sp)

000000008000756a <.LBB0_25>:
    8000756a:	00028597          	auipc	a1,0x28
    8000756e:	a9658593          	addi	a1,a1,-1386 # 8002f000 <_ZN6kernel2fs3bio6BCACHE17h4811aac4f8d79dc4E>
    80007572:	0988                	addi	a0,sp,208
    80007574:	4685                	li	a3,1
    80007576:	ffffc097          	auipc	ra,0xffffc
    8000757a:	086080e7          	jalr	134(ra) # 800035fc <_ZN6kernel2fs3bio6Bcache5bread17h6ef915e4e896646bE>
    8000757e:	a009                	j	80007580 <.LBB0_25+0x16>
    80007580:	0988                	addi	a0,sp,208
            buf.raw_data() as *const RawSuperBlock,
    80007582:	ffffc097          	auipc	ra,0xffffc
    80007586:	1c0080e7          	jalr	448(ra) # 80003742 <_ZN6kernel2fs3bio3Buf8raw_data17h6a896fea03f7ee91E>
    8000758a:	f82a                	sd	a0,48(sp)
    8000758c:	a009                	j	8000758e <.LBB0_25+0x24>
    8000758e:	6566                	ld	a0,88(sp)
    80007590:	75c2                	ld	a1,48(sp)
    80007592:	f02e                	sd	a1,32(sp)
    80007594:	e72a                	sd	a0,392(sp)
            self.data.as_mut_ptr(),
    80007596:	f42a                	sd	a0,40(sp)
    80007598:	a009                	j	8000759a <.LBB0_25+0x30>
        ptr::copy_nonoverlapping(
    8000759a:	75a2                	ld	a1,40(sp)
    8000759c:	7502                	ld	a0,32(sp)
    8000759e:	4d50                	lw	a2,28(a0)
    800075a0:	cdd0                	sw	a2,28(a1)
    800075a2:	4d10                	lw	a2,24(a0)
    800075a4:	cd90                	sw	a2,24(a1)
    800075a6:	4950                	lw	a2,20(a0)
    800075a8:	c9d0                	sw	a2,20(a1)
    800075aa:	4910                	lw	a2,16(a0)
    800075ac:	c990                	sw	a2,16(a1)
    800075ae:	4550                	lw	a2,12(a0)
    800075b0:	c5d0                	sw	a2,12(a1)
    800075b2:	4510                	lw	a2,8(a0)
    800075b4:	c590                	sw	a2,8(a1)
    800075b6:	4150                	lw	a2,4(a0)
    800075b8:	c1d0                	sw	a2,4(a1)
    800075ba:	4108                	lw	a0,0(a0)
    800075bc:	c188                	sw	a0,0(a1)

00000000800075be <.LBB0_26>:
        println!("check magic number");
    800075be:	0001f597          	auipc	a1,0x1f
    800075c2:	78258593          	addi	a1,a1,1922 # 80026d40 <.L__unnamed_3>

00000000800075c6 <.LBB0_27>:
    800075c6:	0001f697          	auipc	a3,0x1f
    800075ca:	78a68693          	addi	a3,a3,1930 # 80026d50 <.L__unnamed_5>
    800075ce:	19a8                	addi	a0,sp,248
    800075d0:	4605                	li	a2,1
    800075d2:	4701                	li	a4,0
    800075d4:	ffffe097          	auipc	ra,0xffffe
    800075d8:	e60080e7          	jalr	-416(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    800075dc:	a009                	j	800075de <.LBB0_27+0x18>
    800075de:	19a8                	addi	a0,sp,248
    800075e0:	00016097          	auipc	ra,0x16
    800075e4:	5d0080e7          	jalr	1488(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    800075e8:	a009                	j	800075ea <.LBB0_27+0x24>
    800075ea:	6566                	ld	a0,88(sp)
    800075ec:	e32a                	sd	a0,384(sp)
        if self.data.as_ptr().as_ref().unwrap().magic != FSMAGIC {
    800075ee:	ec2a                	sd	a0,24(sp)
    800075f0:	a009                	j	800075f2 <.LBB0_27+0x2c>
    800075f2:	6562                	ld	a0,24(sp)
    800075f4:	ffffc097          	auipc	ra,0xffffc
    800075f8:	95c080e7          	jalr	-1700(ra) # 80002f50 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6as_ref17he2102635824876d2E>
    800075fc:	e82a                	sd	a0,16(sp)
    800075fe:	a009                	j	80007600 <.LBB0_27+0x3a>
    80007600:	6542                	ld	a0,16(sp)

0000000080007602 <.LBB0_28>:
    80007602:	0001f597          	auipc	a1,0x1f
    80007606:	74e58593          	addi	a1,a1,1870 # 80026d50 <.L__unnamed_5>
    8000760a:	00007097          	auipc	ra,0x7
    8000760e:	7c0080e7          	jalr	1984(ra) # 8000edca <_ZN4core6option15Option$LT$T$GT$6unwrap17hcaa2b543d69df090E>
    80007612:	e42a                	sd	a0,8(sp)
    80007614:	a009                	j	80007616 <.LBB0_28+0x14>
    80007616:	6522                	ld	a0,8(sp)
    80007618:	4108                	lw	a0,0(a0)
    8000761a:	102035b7          	lui	a1,0x10203
    8000761e:	0405859b          	addiw	a1,a1,64
    80007622:	02b50163          	beq	a0,a1,80007644 <.LBB0_30+0x14>
    80007626:	a009                	j	80007628 <.LBB0_29>

0000000080007628 <.LBB0_29>:
            panic!("invalid file system magic num");
    80007628:	0001f517          	auipc	a0,0x1f
    8000762c:	74050513          	addi	a0,a0,1856 # 80026d68 <.L__unnamed_6>

0000000080007630 <.LBB0_30>:
    80007630:	0001f617          	auipc	a2,0x1f
    80007634:	75860613          	addi	a2,a2,1880 # 80026d88 <.L__unnamed_7>
    80007638:	45f5                	li	a1,29
    8000763a:	0001b097          	auipc	ra,0x1b
    8000763e:	ac2080e7          	jalr	-1342(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80007642:	0000                	unimp
        self.initialized.store(true, Ordering::SeqCst);
    80007644:	6566                	ld	a0,88(sp)
    80007646:	02050513          	addi	a0,a0,32
    8000764a:	4611                	li	a2,4
    8000764c:	12c107a3          	sb	a2,303(sp)
    80007650:	4585                	li	a1,1
    80007652:	ffffd097          	auipc	ra,0xffffd
    80007656:	09a080e7          	jalr	154(ra) # 800046ec <_ZN4core4sync6atomic10AtomicBool5store17h325e21ca90edd7e7E>
    8000765a:	a009                	j	8000765c <.LBB0_30+0x2c>
        drop(buf);
    8000765c:	754e                	ld	a0,240(sp)
    8000765e:	eaaa                	sd	a0,336(sp)
    80007660:	752e                	ld	a0,232(sp)
    80007662:	e6aa                	sd	a0,328(sp)
    80007664:	750e                	ld	a0,224(sp)
    80007666:	e2aa                	sd	a0,320(sp)
    80007668:	656e                	ld	a0,216(sp)
    8000766a:	fe2a                	sd	a0,312(sp)
    8000766c:	654e                	ld	a0,208(sp)
    8000766e:	fa2a                	sd	a0,304(sp)
    80007670:	1a08                	addi	a0,sp,304
    80007672:	00016097          	auipc	ra,0x16
    80007676:	91a080e7          	jalr	-1766(ra) # 8001cf8c <_ZN4core3mem4drop17hda1e19029436deb9E>
    8000767a:	a009                	j	8000767c <.LBB0_30+0x4c>
    }
    8000767c:	a009                	j	8000767e <.LBB0_30+0x4e>
    8000767e:	60fa                	ld	ra,408(sp)
    80007680:	611d                	addi	sp,sp,416
    80007682:	8082                	ret

0000000080007684 <.LBB0_31>:
        debug_assert_eq!(mem::align_of::<BufData>() % mem::align_of::<RawSuperBlock>(), 0);
    80007684:	0001f517          	auipc	a0,0x1f
    80007688:	64c50513          	addi	a0,a0,1612 # 80026cd0 <str.0>

000000008000768c <.LBB0_32>:
    8000768c:	0001f617          	auipc	a2,0x1f
    80007690:	62460613          	addi	a2,a2,1572 # 80026cb0 <.L__unnamed_8>
    80007694:	03900593          	li	a1,57
    80007698:	0001b097          	auipc	ra,0x1b
    8000769c:	a64080e7          	jalr	-1436(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel2fs10superblock10SuperBlock4read17h8c393935916ac41aE:

00000000800076a2 <_ZN6kernel2fs10superblock10SuperBlock4read17h8c393935916ac41aE>:

    /// Read the info of super block.
    fn read(&self) -> &RawSuperBlock {
    800076a2:	715d                	addi	sp,sp,-80
    800076a4:	e486                	sd	ra,72(sp)
    800076a6:	f02a                	sd	a0,32(sp)
    800076a8:	fc2a                	sd	a0,56(sp)
        debug_assert!(self.initialized.load(Ordering::Relaxed));
    800076aa:	02050513          	addi	a0,a0,32
    800076ae:	4581                	li	a1,0
    800076b0:	02b10ba3          	sb	a1,55(sp)
    800076b4:	ffffd097          	auipc	ra,0xffffd
    800076b8:	fba080e7          	jalr	-70(ra) # 8000466e <_ZN4core4sync6atomic10AtomicBool4load17h49a663f50dd66935E>
    800076bc:	f42a                	sd	a0,40(sp)
    800076be:	a009                	j	800076c0 <_ZN6kernel2fs10superblock10SuperBlock4read17h8c393935916ac41aE+0x1e>
    800076c0:	7522                	ld	a0,40(sp)
    800076c2:	e10d                	bnez	a0,800076e4 <.LBB1_8+0x16>
    800076c4:	a009                	j	800076c6 <.LBB1_7>

00000000800076c6 <.LBB1_7>:
    800076c6:	0001f517          	auipc	a0,0x1f
    800076ca:	6da50513          	addi	a0,a0,1754 # 80026da0 <.L__unnamed_9>

00000000800076ce <.LBB1_8>:
    800076ce:	0001f617          	auipc	a2,0x1f
    800076d2:	71260613          	addi	a2,a2,1810 # 80026de0 <.L__unnamed_10>
    800076d6:	03a00593          	li	a1,58
    800076da:	0001b097          	auipc	ra,0x1b
    800076de:	a22080e7          	jalr	-1502(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    800076e2:	0000                	unimp
    800076e4:	7502                	ld	a0,32(sp)
    800076e6:	e0aa                	sd	a0,64(sp)
        unsafe {
            self.data.as_ptr().as_ref().unwrap()
    800076e8:	ec2a                	sd	a0,24(sp)
    800076ea:	a009                	j	800076ec <.LBB1_8+0x1e>
    800076ec:	6562                	ld	a0,24(sp)
    800076ee:	ffffc097          	auipc	ra,0xffffc
    800076f2:	862080e7          	jalr	-1950(ra) # 80002f50 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6as_ref17he2102635824876d2E>
    800076f6:	e82a                	sd	a0,16(sp)
    800076f8:	a009                	j	800076fa <.LBB1_8+0x2c>
    800076fa:	6542                	ld	a0,16(sp)

00000000800076fc <.LBB1_9>:
    800076fc:	0001f597          	auipc	a1,0x1f
    80007700:	6fc58593          	addi	a1,a1,1788 # 80026df8 <.L__unnamed_11>
    80007704:	00007097          	auipc	ra,0x7
    80007708:	6c6080e7          	jalr	1734(ra) # 8000edca <_ZN4core6option15Option$LT$T$GT$6unwrap17hcaa2b543d69df090E>
    8000770c:	e42a                	sd	a0,8(sp)
    8000770e:	a009                	j	80007710 <.LBB1_9+0x14>
        }
    }
    80007710:	6522                	ld	a0,8(sp)
    80007712:	60a6                	ld	ra,72(sp)
    80007714:	6161                	addi	sp,sp,80
    80007716:	8082                	ret

Disassembly of section .text._ZN6kernel2fs10superblock10SuperBlock8read_log17h7cc8d407eaa9ef0fE:

0000000080007718 <_ZN6kernel2fs10superblock10SuperBlock8read_log17h7cc8d407eaa9ef0fE>:

    /// Load the log info of super block.
    /// Return starting block and usable blocks for log.
    pub fn read_log(&self) -> (u32, u32) {
    80007718:	7179                	addi	sp,sp,-48
    8000771a:	f406                	sd	ra,40(sp)
    8000771c:	ec2a                	sd	a0,24(sp)
        let sb = self.read();
    8000771e:	00000097          	auipc	ra,0x0
    80007722:	f84080e7          	jalr	-124(ra) # 800076a2 <_ZN6kernel2fs10superblock10SuperBlock4read17h8c393935916ac41aE>
    80007726:	85aa                	mv	a1,a0
    80007728:	e42e                	sd	a1,8(sp)
    8000772a:	f02a                	sd	a0,32(sp)
    8000772c:	a009                	j	8000772e <_ZN6kernel2fs10superblock10SuperBlock8read_log17h7cc8d407eaa9ef0fE+0x16>
        (sb.logstart, sb.nlog)
    8000772e:	65a2                	ld	a1,8(sp)
    80007730:	49c8                	lw	a0,20(a1)
    80007732:	498c                	lw	a1,16(a1)
    80007734:	c82a                	sw	a0,16(sp)
    80007736:	ca2e                	sw	a1,20(sp)
    }
    80007738:	70a2                	ld	ra,40(sp)
    8000773a:	6145                	addi	sp,sp,48
    8000773c:	8082                	ret

Disassembly of section .text._ZN6kernel2fs10superblock10SuperBlock4size17hb3cee79658d4a223E:

000000008000773e <_ZN6kernel2fs10superblock10SuperBlock4size17hb3cee79658d4a223E>:

    /// The total count of blocks in the disk.
    pub fn size(&self) -> u32 {
    8000773e:	1101                	addi	sp,sp,-32
    80007740:	ec06                	sd	ra,24(sp)
    80007742:	e42a                	sd	a0,8(sp)
        let sb = self.read();
    80007744:	00000097          	auipc	ra,0x0
    80007748:	f5e080e7          	jalr	-162(ra) # 800076a2 <_ZN6kernel2fs10superblock10SuperBlock4read17h8c393935916ac41aE>
    8000774c:	85aa                	mv	a1,a0
    8000774e:	e02e                	sd	a1,0(sp)
    80007750:	e82a                	sd	a0,16(sp)
    80007752:	a009                	j	80007754 <_ZN6kernel2fs10superblock10SuperBlock4size17hb3cee79658d4a223E+0x16>
        sb.size
    }
    80007754:	6502                	ld	a0,0(sp)
    80007756:	4148                	lw	a0,4(a0)
    80007758:	60e2                	ld	ra,24(sp)
    8000775a:	6105                	addi	sp,sp,32
    8000775c:	8082                	ret

Disassembly of section .text._ZN6kernel2fs10superblock10SuperBlock7ninodes17h32fa650b3c4991daE:

000000008000775e <_ZN6kernel2fs10superblock10SuperBlock7ninodes17h32fa650b3c4991daE>:
        let sb = self.read();
        sb.bmapstart
    }

    /// inode numbers
    pub fn ninodes(&self) -> u32 {
    8000775e:	1101                	addi	sp,sp,-32
    80007760:	ec06                	sd	ra,24(sp)
    80007762:	e82a                	sd	a0,16(sp)
        self.read().ninodes
    80007764:	00000097          	auipc	ra,0x0
    80007768:	f3e080e7          	jalr	-194(ra) # 800076a2 <_ZN6kernel2fs10superblock10SuperBlock4read17h8c393935916ac41aE>
    8000776c:	e42a                	sd	a0,8(sp)
    8000776e:	a009                	j	80007770 <_ZN6kernel2fs10superblock10SuperBlock7ninodes17h32fa650b3c4991daE+0x12>
    }
    80007770:	6522                	ld	a0,8(sp)
    80007772:	4548                	lw	a0,12(a0)
    80007774:	60e2                	ld	ra,24(sp)
    80007776:	6105                	addi	sp,sp,32
    80007778:	8082                	ret

Disassembly of section .text._ZN6kernel2fs10superblock10SuperBlock12locate_inode17hc2dbfb20b9411e7cE:

000000008000777a <_ZN6kernel2fs10superblock10SuperBlock12locate_inode17hc2dbfb20b9411e7cE>:

    /// Given an inode number. 
    /// Return the blockno of the block this inode resides. 
    /// Panic if the queryed inode out of range. 
    pub fn locate_inode(&self, inum: u32) -> u32 {
    8000777a:	7155                	addi	sp,sp,-208
    8000777c:	e586                	sd	ra,200(sp)
    8000777e:	de2e                	sw	a1,60(sp)
    80007780:	f12a                	sd	a0,160(sp)
        let sb = self.read();
    80007782:	00000097          	auipc	ra,0x0
    80007786:	f20080e7          	jalr	-224(ra) # 800076a2 <_ZN6kernel2fs10superblock10SuperBlock4read17h8c393935916ac41aE>
    8000778a:	85aa                	mv	a1,a0
    8000778c:	f82e                	sd	a1,48(sp)
    8000778e:	f52a                	sd	a0,168(sp)
    80007790:	a009                	j	80007792 <_ZN6kernel2fs10superblock10SuperBlock12locate_inode17hc2dbfb20b9411e7cE+0x18>
        if inum >= sb.ninodes {
    80007792:	75c2                	ld	a1,48(sp)
    80007794:	5572                	lw	a0,60(sp)
    80007796:	45cc                	lw	a1,12(a1)
    80007798:	02b56763          	bltu	a0,a1,800077c6 <.LBB5_9+0x16>
    8000779c:	a009                	j	8000779e <_ZN6kernel2fs10superblock10SuperBlock12locate_inode17hc2dbfb20b9411e7cE+0x24>
            panic!("query inum {} larger than maximum inode nums {}", inum, sb.ninodes);
    8000779e:	7542                	ld	a0,48(sp)
    800077a0:	00c50593          	addi	a1,a0,12
    800077a4:	ec2e                	sd	a1,24(sp)
    800077a6:	1868                	addi	a0,sp,60
    800077a8:	e92a                	sd	a0,144(sp)
    800077aa:	ed2e                	sd	a1,152(sp)
    800077ac:	f92a                	sd	a0,176(sp)
    800077ae:	fd2e                	sd	a1,184(sp)

00000000800077b0 <.LBB5_9>:
    800077b0:	0001d597          	auipc	a1,0x1d
    800077b4:	eec58593          	addi	a1,a1,-276 # 8002469c <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17h19c6429b08a072b1E>
    800077b8:	0001a097          	auipc	ra,0x1a
    800077bc:	6d2080e7          	jalr	1746(ra) # 80021e8a <_ZN4core3fmt10ArgumentV13new17ha67f1954b9155e6dE>
    800077c0:	f02a                	sd	a0,32(sp)
    800077c2:	f42e                	sd	a1,40(sp)
    800077c4:	a839                	j	800077e2 <.LBB5_9+0x32>
        }
        // println!("[Debug] inum: {}", inum);
        let blockno = (inum / (IPB as u32)) + sb.inodestart;
    800077c6:	75c2                	ld	a1,48(sp)
    800077c8:	03c16503          	lwu	a0,60(sp)
    800077cc:	8111                	srli	a0,a0,0x4
    800077ce:	0185e583          	lwu	a1,24(a1)
    800077d2:	95aa                	add	a1,a1,a0
    800077d4:	e82e                	sd	a1,16(sp)
    800077d6:	02059513          	slli	a0,a1,0x20
    800077da:	9101                	srli	a0,a0,0x20
    800077dc:	06b51363          	bne	a0,a1,80007842 <.LBB5_13>
    800077e0:	a8a1                	j	80007838 <.LBB5_12+0x14>
            panic!("query inum {} larger than maximum inode nums {}", inum, sb.ninodes);
    800077e2:	6562                	ld	a0,24(sp)

00000000800077e4 <.LBB5_10>:
    800077e4:	0001d597          	auipc	a1,0x1d
    800077e8:	eb858593          	addi	a1,a1,-328 # 8002469c <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17h19c6429b08a072b1E>
    800077ec:	0001a097          	auipc	ra,0x1a
    800077f0:	69e080e7          	jalr	1694(ra) # 80021e8a <_ZN4core3fmt10ArgumentV13new17ha67f1954b9155e6dE>
    800077f4:	e02a                	sd	a0,0(sp)
    800077f6:	e42e                	sd	a1,8(sp)
    800077f8:	a009                	j	800077fa <.LBB5_10+0x16>
    800077fa:	6522                	ld	a0,8(sp)
    800077fc:	6582                	ld	a1,0(sp)
    800077fe:	7622                	ld	a2,40(sp)
    80007800:	7682                	ld	a3,32(sp)
    80007802:	f8b6                	sd	a3,112(sp)
    80007804:	fcb2                	sd	a2,120(sp)
    80007806:	e12e                	sd	a1,128(sp)
    80007808:	e52a                	sd	a0,136(sp)

000000008000780a <.LBB5_11>:
    8000780a:	0001f597          	auipc	a1,0x1f
    8000780e:	61658593          	addi	a1,a1,1558 # 80026e20 <.L__unnamed_12>
    80007812:	0088                	addi	a0,sp,64
    80007814:	1894                	addi	a3,sp,112
    80007816:	4709                	li	a4,2
    80007818:	863a                	mv	a2,a4
    8000781a:	ffffe097          	auipc	ra,0xffffe
    8000781e:	c1a080e7          	jalr	-998(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80007822:	a009                	j	80007824 <.LBB5_12>

0000000080007824 <.LBB5_12>:
    80007824:	0001f597          	auipc	a1,0x1f
    80007828:	61c58593          	addi	a1,a1,1564 # 80026e40 <.L__unnamed_13>
    8000782c:	0088                	addi	a0,sp,64
    8000782e:	0001b097          	auipc	ra,0x1b
    80007832:	93a080e7          	jalr	-1734(ra) # 80022168 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
    80007836:	0000                	unimp
        let blockno = (inum / (IPB as u32)) + sb.inodestart;
    80007838:	6542                	ld	a0,16(sp)
    8000783a:	c3aa                	sw	a0,196(sp)
        // println!("[Debug] block number: {}", blockno);
        blockno
    }
    8000783c:	60ae                	ld	ra,200(sp)
    8000783e:	6169                	addi	sp,sp,208
    80007840:	8082                	ret

0000000080007842 <.LBB5_13>:
        let blockno = (inum / (IPB as u32)) + sb.inodestart;
    80007842:	0001f517          	auipc	a0,0x1f
    80007846:	62e50513          	addi	a0,a0,1582 # 80026e70 <str.1>

000000008000784a <.LBB5_14>:
    8000784a:	0001f617          	auipc	a2,0x1f
    8000784e:	60e60613          	addi	a2,a2,1550 # 80026e58 <.L__unnamed_14>
    80007852:	45f1                	li	a1,28
    80007854:	0001b097          	auipc	ra,0x1b
    80007858:	8a8080e7          	jalr	-1880(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel2fs10superblock10SuperBlock14bitmap_blockno17h010142deb773804aE:

000000008000785e <_ZN6kernel2fs10superblock10SuperBlock14bitmap_blockno17h010142deb773804aE>:

    /// Given a block number in the disk. 
    /// Returns the relevant block number of the (controlling) bitmap block. 
    pub fn bitmap_blockno(&self, blockno: u32) -> u32 {
    8000785e:	7139                	addi	sp,sp,-64
    80007860:	fc06                	sd	ra,56(sp)
    80007862:	862e                	mv	a2,a1
    80007864:	e832                	sd	a2,16(sp)
    80007866:	f02a                	sd	a0,32(sp)
    80007868:	d62e                	sw	a1,44(sp)
        let sb = self.read();
    8000786a:	00000097          	auipc	ra,0x0
    8000786e:	e38080e7          	jalr	-456(ra) # 800076a2 <_ZN6kernel2fs10superblock10SuperBlock4read17h8c393935916ac41aE>
    80007872:	85aa                	mv	a1,a0
    80007874:	ec2e                	sd	a1,24(sp)
    80007876:	f82a                	sd	a0,48(sp)
    80007878:	a009                	j	8000787a <_ZN6kernel2fs10superblock10SuperBlock14bitmap_blockno17h010142deb773804aE+0x1c>
        (blockno / BPB as u32) + sb.bmapstart
    8000787a:	65e2                	ld	a1,24(sp)
    8000787c:	6542                	ld	a0,16(sp)
    8000787e:	00d5551b          	srliw	a0,a0,0xd
    80007882:	01c5e583          	lwu	a1,28(a1)
    80007886:	95aa                	add	a1,a1,a0
    80007888:	e42e                	sd	a1,8(sp)
    8000788a:	02059513          	slli	a0,a1,0x20
    8000788e:	9101                	srli	a0,a0,0x20
    80007890:	00b51763          	bne	a0,a1,8000789e <.LBB6_4>
    80007894:	a009                	j	80007896 <_ZN6kernel2fs10superblock10SuperBlock14bitmap_blockno17h010142deb773804aE+0x38>
    }
    80007896:	6522                	ld	a0,8(sp)
    80007898:	70e2                	ld	ra,56(sp)
    8000789a:	6121                	addi	sp,sp,64
    8000789c:	8082                	ret

000000008000789e <.LBB6_4>:
        (blockno / BPB as u32) + sb.bmapstart
    8000789e:	0001f517          	auipc	a0,0x1f
    800078a2:	5d250513          	addi	a0,a0,1490 # 80026e70 <str.1>

00000000800078a6 <.LBB6_5>:
    800078a6:	0001f617          	auipc	a2,0x1f
    800078aa:	5ea60613          	addi	a2,a2,1514 # 80026e90 <.L__unnamed_15>
    800078ae:	45f1                	li	a1,28
    800078b0:	0001b097          	auipc	ra,0x1b
    800078b4:	84c080e7          	jalr	-1972(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel4arch5riscv8register7mhartid4read17hb0a253df4f0869d8E:

00000000800078ba <_ZN6kernel4arch5riscv8register7mhartid4read17hb0a253df4f0869d8E>:
// which hart (core) is this?
#[inline]
pub unsafe fn read() -> usize{
    800078ba:	1141                	addi	sp,sp,-16
    let ret:usize;
    llvm_asm!("csrr $0, mhartid":"=r"(ret):::"volatile");
    800078bc:	f1402573          	csrr	a0,mhartid
    800078c0:	e42a                	sd	a0,8(sp)
    ret
    800078c2:	0141                	addi	sp,sp,16
    800078c4:	8082                	ret

Disassembly of section .text._ZN6kernel4misc7str_len17h64928e428ab71413E:

00000000800078c6 <_ZN6kernel4misc7str_len17h64928e428ab71413E>:

pub fn str_len(str: *const u8) -> usize {
    800078c6:	715d                	addi	sp,sp,-80
    800078c8:	e486                	sd	ra,72(sp)
    800078ca:	f02a                	sd	a0,32(sp)
    800078cc:	f82a                	sd	a0,48(sp)
    800078ce:	4501                	li	a0,0
    let mut i:usize = 0;
    800078d0:	f42a                	sd	a0,40(sp)
    loop {
    800078d2:	a009                	j	800078d4 <_ZN6kernel4misc7str_len17h64928e428ab71413E+0xe>
       let ptr = (str as usize + i) as *const u8;
    800078d4:	7582                	ld	a1,32(sp)
    800078d6:	7522                	ld	a0,40(sp)
    800078d8:	952e                	add	a0,a0,a1
    800078da:	ec2a                	sd	a0,24(sp)
    800078dc:	04b56363          	bltu	a0,a1,80007922 <.LBB0_9>
    800078e0:	a009                	j	800078e2 <_ZN6kernel4misc7str_len17h64928e428ab71413E+0x1c>
    800078e2:	6562                	ld	a0,24(sp)
    800078e4:	fc2a                	sd	a0,56(sp)
       let c = unsafe {
           read(ptr)
    800078e6:	00011097          	auipc	ra,0x11
    800078ea:	ba0080e7          	jalr	-1120(ra) # 80018486 <_ZN4core3ptr4read17h018161c0cd37b3fbE>
    800078ee:	85aa                	mv	a1,a0
    800078f0:	e82e                	sd	a1,16(sp)
    800078f2:	04a103a3          	sb	a0,71(sp)
    800078f6:	a009                	j	800078f8 <_ZN6kernel4misc7str_len17h64928e428ab71413E+0x32>
       };
       if c != 0 { i += 1; }
    800078f8:	6542                	ld	a0,16(sp)
    800078fa:	0ff57513          	andi	a0,a0,255
    800078fe:	4581                	li	a1,0
    80007900:	00b50a63          	beq	a0,a1,80007914 <_ZN6kernel4misc7str_len17h64928e428ab71413E+0x4e>
    80007904:	a009                	j	80007906 <_ZN6kernel4misc7str_len17h64928e428ab71413E+0x40>
    80007906:	75a2                	ld	a1,40(sp)
    80007908:	00158513          	addi	a0,a1,1
    8000790c:	e42a                	sd	a0,8(sp)
    8000790e:	02b56863          	bltu	a0,a1,8000793e <.LBB0_11>
    80007912:	a029                	j	8000791c <_ZN6kernel4misc7str_len17h64928e428ab71413E+0x56>
       else { break; }
    }
    i
}
    80007914:	7522                	ld	a0,40(sp)
    80007916:	60a6                	ld	ra,72(sp)
    80007918:	6161                	addi	sp,sp,80
    8000791a:	8082                	ret
       if c != 0 { i += 1; }
    8000791c:	6522                	ld	a0,8(sp)
    8000791e:	f42a                	sd	a0,40(sp)
    loop {
    80007920:	bf55                	j	800078d4 <_ZN6kernel4misc7str_len17h64928e428ab71413E+0xe>

0000000080007922 <.LBB0_9>:
       let ptr = (str as usize + i) as *const u8;
    80007922:	0001f517          	auipc	a0,0x1f
    80007926:	5ae50513          	addi	a0,a0,1454 # 80026ed0 <str.0>

000000008000792a <.LBB0_10>:
    8000792a:	0001f617          	auipc	a2,0x1f
    8000792e:	58e60613          	addi	a2,a2,1422 # 80026eb8 <.L__unnamed_1>
    80007932:	45f1                	li	a1,28
    80007934:	0001a097          	auipc	ra,0x1a
    80007938:	7c8080e7          	jalr	1992(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008000793e <.LBB0_11>:
       if c != 0 { i += 1; }
    8000793e:	0001f517          	auipc	a0,0x1f
    80007942:	59250513          	addi	a0,a0,1426 # 80026ed0 <str.0>

0000000080007946 <.LBB0_12>:
    80007946:	0001f617          	auipc	a2,0x1f
    8000794a:	5aa60613          	addi	a2,a2,1450 # 80026ef0 <.L__unnamed_2>
    8000794e:	45f1                	li	a1,28
    80007950:	0001a097          	auipc	ra,0x1a
    80007954:	7ac080e7          	jalr	1964(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel4misc8mem_copy17h5e55f1040770ffdeE:

000000008000795a <_ZN6kernel4misc8mem_copy17h5e55f1040770ffdeE>:

/// memory copy, copy memory into other memory. 
pub fn mem_copy(dst: usize, src: usize, len: usize) {
    8000795a:	7131                	addi	sp,sp,-192
    8000795c:	fd06                	sd	ra,184(sp)
    8000795e:	f432                	sd	a2,40(sp)
    80007960:	862e                	mv	a2,a1
    80007962:	75a2                	ld	a1,40(sp)
    80007964:	f832                	sd	a2,48(sp)
    80007966:	862a                	mv	a2,a0
    80007968:	7542                	ld	a0,48(sp)
    8000796a:	fc32                	sd	a2,56(sp)
    8000796c:	e132                	sd	a2,128(sp)
    8000796e:	e52a                	sd	a0,136(sp)
    80007970:	e92e                	sd	a1,144(sp)
    80007972:	4501                	li	a0,0
    unsafe{
        for i in 0..len {
    80007974:	e8aa                	sd	a0,80(sp)
    80007976:	ecae                	sd	a1,88(sp)
    80007978:	00018097          	auipc	ra,0x18
    8000797c:	e50080e7          	jalr	-432(ra) # 8001f7c8 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he0a8d93712e5493bE>
    80007980:	e0aa                	sd	a0,64(sp)
    80007982:	e4ae                	sd	a1,72(sp)
    80007984:	a009                	j	80007986 <_ZN6kernel4misc8mem_copy17h5e55f1040770ffdeE+0x2c>
    80007986:	6526                	ld	a0,72(sp)
    80007988:	6586                	ld	a1,64(sp)
    8000798a:	f0ae                	sd	a1,96(sp)
    8000798c:	f4aa                	sd	a0,104(sp)
    8000798e:	a009                	j	80007990 <_ZN6kernel4misc8mem_copy17h5e55f1040770ffdeE+0x36>
    80007990:	1088                	addi	a0,sp,96
    80007992:	00018097          	auipc	ra,0x18
    80007996:	dc8080e7          	jalr	-568(ra) # 8001f75a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE>
    8000799a:	f8aa                	sd	a0,112(sp)
    8000799c:	fcae                	sd	a1,120(sp)
    8000799e:	a009                	j	800079a0 <_ZN6kernel4misc8mem_copy17h5e55f1040770ffdeE+0x46>
    800079a0:	7546                	ld	a0,112(sp)
    800079a2:	4581                	li	a1,0
    800079a4:	00b50463          	beq	a0,a1,800079ac <_ZN6kernel4misc8mem_copy17h5e55f1040770ffdeE+0x52>
    800079a8:	a009                	j	800079aa <_ZN6kernel4misc8mem_copy17h5e55f1040770ffdeE+0x50>
    800079aa:	a029                	j	800079b4 <_ZN6kernel4misc8mem_copy17h5e55f1040770ffdeE+0x5a>
            let val = read((src + i) as *const u8);
            write((dst + i) as *mut u8, val);
        }
    }
}
    800079ac:	70ea                	ld	ra,184(sp)
    800079ae:	6129                	addi	sp,sp,192
    800079b0:	8082                	ret
        for i in 0..len {
    800079b2:	0000                	unimp
    800079b4:	75c2                	ld	a1,48(sp)
    800079b6:	7566                	ld	a0,120(sp)
    800079b8:	ec2a                	sd	a0,24(sp)
    800079ba:	ed2a                	sd	a0,152(sp)
    800079bc:	f12a                	sd	a0,160(sp)
    800079be:	f52a                	sd	a0,168(sp)
            let val = read((src + i) as *const u8);
    800079c0:	952e                	add	a0,a0,a1
    800079c2:	f02a                	sd	a0,32(sp)
    800079c4:	02b56c63          	bltu	a0,a1,800079fc <.LBB1_14>
    800079c8:	a009                	j	800079ca <_ZN6kernel4misc8mem_copy17h5e55f1040770ffdeE+0x70>
    800079ca:	7502                	ld	a0,32(sp)
    800079cc:	00011097          	auipc	ra,0x11
    800079d0:	aba080e7          	jalr	-1350(ra) # 80018486 <_ZN4core3ptr4read17h018161c0cd37b3fbE>
    800079d4:	85aa                	mv	a1,a0
    800079d6:	e82e                	sd	a1,16(sp)
    800079d8:	0aa10ba3          	sb	a0,183(sp)
    800079dc:	a009                	j	800079de <_ZN6kernel4misc8mem_copy17h5e55f1040770ffdeE+0x84>
            write((dst + i) as *mut u8, val);
    800079de:	75e2                	ld	a1,56(sp)
    800079e0:	6562                	ld	a0,24(sp)
    800079e2:	952e                	add	a0,a0,a1
    800079e4:	e42a                	sd	a0,8(sp)
    800079e6:	02b56963          	bltu	a0,a1,80007a18 <.LBB1_16>
    800079ea:	a009                	j	800079ec <_ZN6kernel4misc8mem_copy17h5e55f1040770ffdeE+0x92>
    800079ec:	65c2                	ld	a1,16(sp)
    800079ee:	6522                	ld	a0,8(sp)
    800079f0:	00011097          	auipc	ra,0x11
    800079f4:	d20080e7          	jalr	-736(ra) # 80018710 <_ZN4core3ptr5write17h0fb1ba83ac2984c7E>
    800079f8:	a009                	j	800079fa <_ZN6kernel4misc8mem_copy17h5e55f1040770ffdeE+0xa0>
        for i in 0..len {
    800079fa:	bf59                	j	80007990 <_ZN6kernel4misc8mem_copy17h5e55f1040770ffdeE+0x36>

00000000800079fc <.LBB1_14>:
            let val = read((src + i) as *const u8);
    800079fc:	0001f517          	auipc	a0,0x1f
    80007a00:	4d450513          	addi	a0,a0,1236 # 80026ed0 <str.0>

0000000080007a04 <.LBB1_15>:
    80007a04:	0001f617          	auipc	a2,0x1f
    80007a08:	50460613          	addi	a2,a2,1284 # 80026f08 <.L__unnamed_3>
    80007a0c:	45f1                	li	a1,28
    80007a0e:	0001a097          	auipc	ra,0x1a
    80007a12:	6ee080e7          	jalr	1774(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080007a18 <.LBB1_16>:
            write((dst + i) as *mut u8, val);
    80007a18:	0001f517          	auipc	a0,0x1f
    80007a1c:	4b850513          	addi	a0,a0,1208 # 80026ed0 <str.0>

0000000080007a20 <.LBB1_17>:
    80007a20:	0001f617          	auipc	a2,0x1f
    80007a24:	50060613          	addi	a2,a2,1280 # 80026f20 <.L__unnamed_4>
    80007a28:	45f1                	li	a1,28
    80007a2a:	0001a097          	auipc	ra,0x1a
    80007a2e:	6d2080e7          	jalr	1746(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel4misc7str_cmp17h91115d5ee259e480E:

0000000080007a34 <_ZN6kernel4misc7str_cmp17h91115d5ee259e480E>:
    };
    dst
}

/// Compare str
pub fn str_cmp(a: &[u8], b: &[u8], max_len: usize) -> bool {
    80007a34:	7151                	addi	sp,sp,-240
    80007a36:	f586                	sd	ra,232(sp)
    80007a38:	e0ba                	sd	a4,64(sp)
    80007a3a:	e4b6                	sd	a3,72(sp)
    80007a3c:	e8b2                	sd	a2,80(sp)
    80007a3e:	ecae                	sd	a1,88(sp)
    80007a40:	f0aa                	sd	a0,96(sp)
    80007a42:	f52a                	sd	a0,168(sp)
    80007a44:	f92e                	sd	a1,176(sp)
    80007a46:	fd32                	sd	a2,184(sp)
    80007a48:	e1b6                	sd	a3,192(sp)
    80007a4a:	e5ba                	sd	a4,200(sp)
    if a.len() != b.len() {
    80007a4c:	00018097          	auipc	ra,0x18
    80007a50:	a0e080e7          	jalr	-1522(ra) # 8001f45a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hb06ce83b043493f3E>
    80007a54:	f4aa                	sd	a0,104(sp)
    80007a56:	a009                	j	80007a58 <_ZN6kernel4misc7str_cmp17h91115d5ee259e480E+0x24>
    80007a58:	65a6                	ld	a1,72(sp)
    80007a5a:	6546                	ld	a0,80(sp)
    80007a5c:	00018097          	auipc	ra,0x18
    80007a60:	9fe080e7          	jalr	-1538(ra) # 8001f45a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hb06ce83b043493f3E>
    80007a64:	fc2a                	sd	a0,56(sp)
    80007a66:	a009                	j	80007a68 <_ZN6kernel4misc7str_cmp17h91115d5ee259e480E+0x34>
    80007a68:	7526                	ld	a0,104(sp)
    80007a6a:	75e2                	ld	a1,56(sp)
    80007a6c:	00b50763          	beq	a0,a1,80007a7a <_ZN6kernel4misc7str_cmp17h91115d5ee259e480E+0x46>
    80007a70:	a009                	j	80007a72 <_ZN6kernel4misc7str_cmp17h91115d5ee259e480E+0x3e>
    80007a72:	4501                	li	a0,0
        return false
    80007a74:	06a10ba3          	sb	a0,119(sp)
    80007a78:	a875                	j	80007b34 <_ZN6kernel4misc7str_cmp17h91115d5ee259e480E+0x100>
    }

    if a.len() > max_len {
    80007a7a:	65e6                	ld	a1,88(sp)
    80007a7c:	7506                	ld	a0,96(sp)
    80007a7e:	00018097          	auipc	ra,0x18
    80007a82:	9dc080e7          	jalr	-1572(ra) # 8001f45a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hb06ce83b043493f3E>
    80007a86:	f82a                	sd	a0,48(sp)
    80007a88:	a009                	j	80007a8a <_ZN6kernel4misc7str_cmp17h91115d5ee259e480E+0x56>
    80007a8a:	6506                	ld	a0,64(sp)
    80007a8c:	75c2                	ld	a1,48(sp)
    80007a8e:	00b57763          	bgeu	a0,a1,80007a9c <_ZN6kernel4misc7str_cmp17h91115d5ee259e480E+0x68>
    80007a92:	a009                	j	80007a94 <_ZN6kernel4misc7str_cmp17h91115d5ee259e480E+0x60>
    80007a94:	4501                	li	a0,0
        return false
    80007a96:	06a10ba3          	sb	a0,119(sp)
    80007a9a:	a869                	j	80007b34 <_ZN6kernel4misc7str_cmp17h91115d5ee259e480E+0x100>
    }

    for i in 0..a.len() {
    80007a9c:	65e6                	ld	a1,88(sp)
    80007a9e:	7506                	ld	a0,96(sp)
    80007aa0:	00018097          	auipc	ra,0x18
    80007aa4:	9ba080e7          	jalr	-1606(ra) # 8001f45a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hb06ce83b043493f3E>
    80007aa8:	f42a                	sd	a0,40(sp)
    80007aaa:	a009                	j	80007aac <_ZN6kernel4misc7str_cmp17h91115d5ee259e480E+0x78>
    80007aac:	75a2                	ld	a1,40(sp)
    80007aae:	4501                	li	a0,0
    80007ab0:	fcaa                	sd	a0,120(sp)
    80007ab2:	e12e                	sd	a1,128(sp)
    80007ab4:	00018097          	auipc	ra,0x18
    80007ab8:	d14080e7          	jalr	-748(ra) # 8001f7c8 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he0a8d93712e5493bE>
    80007abc:	ec2a                	sd	a0,24(sp)
    80007abe:	f02e                	sd	a1,32(sp)
    80007ac0:	a009                	j	80007ac2 <_ZN6kernel4misc7str_cmp17h91115d5ee259e480E+0x8e>
    80007ac2:	7502                	ld	a0,32(sp)
    80007ac4:	65e2                	ld	a1,24(sp)
    80007ac6:	e52e                	sd	a1,136(sp)
    80007ac8:	e92a                	sd	a0,144(sp)
    80007aca:	a009                	j	80007acc <_ZN6kernel4misc7str_cmp17h91115d5ee259e480E+0x98>
    80007acc:	0128                	addi	a0,sp,136
    80007ace:	00018097          	auipc	ra,0x18
    80007ad2:	c8c080e7          	jalr	-884(ra) # 8001f75a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE>
    80007ad6:	ed2a                	sd	a0,152(sp)
    80007ad8:	f12e                	sd	a1,160(sp)
    80007ada:	a009                	j	80007adc <_ZN6kernel4misc7str_cmp17h91115d5ee259e480E+0xa8>
    80007adc:	656a                	ld	a0,152(sp)
    80007ade:	4581                	li	a1,0
    80007ae0:	00b50463          	beq	a0,a1,80007ae8 <_ZN6kernel4misc7str_cmp17h91115d5ee259e480E+0xb4>
    80007ae4:	a009                	j	80007ae6 <_ZN6kernel4misc7str_cmp17h91115d5ee259e480E+0xb2>
    80007ae6:	a031                	j	80007af2 <_ZN6kernel4misc7str_cmp17h91115d5ee259e480E+0xbe>
    80007ae8:	4505                	li	a0,1
        if a[i] != b[i] {
            return false
        }
    }
    true
    80007aea:	06a10ba3          	sb	a0,119(sp)
    80007aee:	a099                	j	80007b34 <_ZN6kernel4misc7str_cmp17h91115d5ee259e480E+0x100>
    for i in 0..a.len() {
    80007af0:	0000                	unimp
    80007af2:	65e6                	ld	a1,88(sp)
    80007af4:	750a                	ld	a0,160(sp)
    80007af6:	e82a                	sd	a0,16(sp)
    80007af8:	e9aa                	sd	a0,208(sp)
    80007afa:	edaa                	sd	a0,216(sp)
    80007afc:	f1aa                	sd	a0,224(sp)
        if a[i] != b[i] {
    80007afe:	04b57063          	bgeu	a0,a1,80007b3e <_ZN6kernel4misc7str_cmp17h91115d5ee259e480E+0x10a>
    80007b02:	a009                	j	80007b04 <_ZN6kernel4misc7str_cmp17h91115d5ee259e480E+0xd0>
    80007b04:	6542                	ld	a0,16(sp)
    80007b06:	65a6                	ld	a1,72(sp)
    80007b08:	7606                	ld	a2,96(sp)
    80007b0a:	962a                	add	a2,a2,a0
    80007b0c:	00064603          	lbu	a2,0(a2)
    80007b10:	e432                	sd	a2,8(sp)
    80007b12:	04b57163          	bgeu	a0,a1,80007b54 <.LBB2_23+0x12>
    80007b16:	a009                	j	80007b18 <_ZN6kernel4misc7str_cmp17h91115d5ee259e480E+0xe4>
    80007b18:	6522                	ld	a0,8(sp)
    80007b1a:	65c6                	ld	a1,80(sp)
    80007b1c:	6642                	ld	a2,16(sp)
    80007b1e:	95b2                	add	a1,a1,a2
    80007b20:	0005c583          	lbu	a1,0(a1)
    80007b24:	00b50763          	beq	a0,a1,80007b32 <_ZN6kernel4misc7str_cmp17h91115d5ee259e480E+0xfe>
    80007b28:	a009                	j	80007b2a <_ZN6kernel4misc7str_cmp17h91115d5ee259e480E+0xf6>
    80007b2a:	4501                	li	a0,0
            return false
    80007b2c:	06a10ba3          	sb	a0,119(sp)
    80007b30:	a011                	j	80007b34 <_ZN6kernel4misc7str_cmp17h91115d5ee259e480E+0x100>
    for i in 0..a.len() {
    80007b32:	bf69                	j	80007acc <_ZN6kernel4misc7str_cmp17h91115d5ee259e480E+0x98>
    80007b34:	07714503          	lbu	a0,119(sp)
    80007b38:	70ae                	ld	ra,232(sp)
    80007b3a:	616d                	addi	sp,sp,240
    80007b3c:	8082                	ret
        if a[i] != b[i] {
    80007b3e:	65e6                	ld	a1,88(sp)
    80007b40:	6542                	ld	a0,16(sp)

0000000080007b42 <.LBB2_23>:
    80007b42:	0001f617          	auipc	a2,0x1f
    80007b46:	3f660613          	addi	a2,a2,1014 # 80026f38 <.L__unnamed_5>
    80007b4a:	0001a097          	auipc	ra,0x1a
    80007b4e:	5de080e7          	jalr	1502(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80007b52:	0000                	unimp
    80007b54:	65a6                	ld	a1,72(sp)
    80007b56:	6542                	ld	a0,16(sp)

0000000080007b58 <.LBB2_24>:
    80007b58:	0001f617          	auipc	a2,0x1f
    80007b5c:	3f860613          	addi	a2,a2,1016 # 80026f50 <.L__unnamed_6>
    80007b60:	0001a097          	auipc	ra,0x1a
    80007b64:	5c8080e7          	jalr	1480(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel4arch5riscv8register6scause4read17h6f388cd664aa7885E:

0000000080007b6a <_ZN6kernel4arch5riscv8register6scause4read17h6f388cd664aa7885E>:
use bit_field::BitField;
use core::mem::size_of;

// Supervisor Trap Cause
#[inline]
pub unsafe fn read() -> usize {
    80007b6a:	1141                	addi	sp,sp,-16
    let ret:usize;
    llvm_asm!("csrr $0, scause":"=r"(ret):::"volatile");
    80007b6c:	14202573          	csrr	a0,scause
    80007b70:	e42a                	sd	a0,8(sp)
    ret
}
    80007b72:	0141                	addi	sp,sp,16
    80007b74:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register6scause9Interrupt4from17hfa107f1206d46befE:

0000000080007b76 <_ZN6kernel4arch5riscv8register6scause9Interrupt4from17hfa107f1206d46befE>:
    Unknown
}


impl Interrupt{
    pub fn from(nr: usize) -> Self {
    80007b76:	1101                	addi	sp,sp,-32
    80007b78:	85aa                	mv	a1,a0
    80007b7a:	ec2e                	sd	a1,24(sp)
        match nr{
            0 => Interrupt::UserSoft,
    80007b7c:	852e                	mv	a0,a1
    80007b7e:	e42a                	sd	a0,8(sp)
    80007b80:	4525                	li	a0,9
    80007b82:	00b56b63          	bltu	a0,a1,80007b98 <.LBB1_2>
    80007b86:	6522                	ld	a0,8(sp)
    80007b88:	050e                	slli	a0,a0,0x3

0000000080007b8a <.LBB1_10>:
    80007b8a:	0001f597          	auipc	a1,0x1f
    80007b8e:	3de58593          	addi	a1,a1,990 # 80026f68 <.LJTI1_0>
    80007b92:	952e                	add	a0,a0,a1
    80007b94:	6108                	ld	a0,0(a0)
    80007b96:	8502                	jr	a0

0000000080007b98 <.LBB1_2>:
    80007b98:	4519                	li	a0,6
            1 => Interrupt::SupervisorSoft,
            4 => Interrupt::UserTimer,
            5 => Interrupt::SupervisorTimer,
            8 => Interrupt::UserExternal,
            9 => Interrupt::SupervisorExternal,
            _ => Interrupt::Unknown
    80007b9a:	00a10ba3          	sb	a0,23(sp)
        match nr{
    80007b9e:	a80d                	j	80007bd0 <.LBB1_8+0x8>

0000000080007ba0 <.LBB1_3>:
    80007ba0:	4501                	li	a0,0
            0 => Interrupt::UserSoft,
    80007ba2:	00a10ba3          	sb	a0,23(sp)
        match nr{
    80007ba6:	a02d                	j	80007bd0 <.LBB1_8+0x8>

0000000080007ba8 <.LBB1_4>:
    80007ba8:	4505                	li	a0,1
            1 => Interrupt::SupervisorSoft,
    80007baa:	00a10ba3          	sb	a0,23(sp)
        match nr{
    80007bae:	a00d                	j	80007bd0 <.LBB1_8+0x8>

0000000080007bb0 <.LBB1_5>:
    80007bb0:	4509                	li	a0,2
            4 => Interrupt::UserTimer,
    80007bb2:	00a10ba3          	sb	a0,23(sp)
        match nr{
    80007bb6:	a829                	j	80007bd0 <.LBB1_8+0x8>

0000000080007bb8 <.LBB1_6>:
    80007bb8:	450d                	li	a0,3
            5 => Interrupt::SupervisorTimer,
    80007bba:	00a10ba3          	sb	a0,23(sp)
        match nr{
    80007bbe:	a809                	j	80007bd0 <.LBB1_8+0x8>

0000000080007bc0 <.LBB1_7>:
    80007bc0:	4511                	li	a0,4
            8 => Interrupt::UserExternal,
    80007bc2:	00a10ba3          	sb	a0,23(sp)
        match nr{
    80007bc6:	a029                	j	80007bd0 <.LBB1_8+0x8>

0000000080007bc8 <.LBB1_8>:
    80007bc8:	4515                	li	a0,5
            9 => Interrupt::SupervisorExternal,
    80007bca:	00a10ba3          	sb	a0,23(sp)
        match nr{
    80007bce:	a009                	j	80007bd0 <.LBB1_8+0x8>
        }
    }
    80007bd0:	01710503          	lb	a0,23(sp)
    80007bd4:	6105                	addi	sp,sp,32
    80007bd6:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register6scause9Exception4from17hf94bf9ab612e4876E:

0000000080007bd8 <_ZN6kernel4arch5riscv8register6scause9Exception4from17hf94bf9ab612e4876E>:
}

impl Exception{
    pub fn from(nr: usize) -> Self {
    80007bd8:	1101                	addi	sp,sp,-32
    80007bda:	85aa                	mv	a1,a0
    80007bdc:	ec2e                	sd	a1,24(sp)
        match nr {
            0 => Exception::InstructionMisaligned,
    80007bde:	852e                	mv	a0,a1
    80007be0:	e42a                	sd	a0,8(sp)
    80007be2:	453d                	li	a0,15
    80007be4:	00b56b63          	bltu	a0,a1,80007bfa <.LBB2_2>
    80007be8:	6522                	ld	a0,8(sp)
    80007bea:	050e                	slli	a0,a0,0x3

0000000080007bec <.LBB2_16>:
    80007bec:	0001f597          	auipc	a1,0x1f
    80007bf0:	3cc58593          	addi	a1,a1,972 # 80026fb8 <.LJTI2_0>
    80007bf4:	952e                	add	a0,a0,a1
    80007bf6:	6108                	ld	a0,0(a0)
    80007bf8:	8502                	jr	a0

0000000080007bfa <.LBB2_2>:
    80007bfa:	4531                	li	a0,12
            8 => Exception::UserEnvCall,
            9 => Exception::KernelEnvCall,
            12 => Exception::InstructionPageFault,
            13 => Exception::LoadPageFault,
            15 => Exception::StorePageFault,
            _ => Exception::Unknown
    80007bfc:	00a10ba3          	sb	a0,23(sp)
        match nr {
    80007c00:	a08d                	j	80007c62 <.LBB2_14+0x8>

0000000080007c02 <.LBB2_3>:
    80007c02:	4501                	li	a0,0
            0 => Exception::InstructionMisaligned,
    80007c04:	00a10ba3          	sb	a0,23(sp)
        match nr {
    80007c08:	a8a9                	j	80007c62 <.LBB2_14+0x8>

0000000080007c0a <.LBB2_4>:
    80007c0a:	4505                	li	a0,1
            1 => Exception::InstructionFault,
    80007c0c:	00a10ba3          	sb	a0,23(sp)
        match nr {
    80007c10:	a889                	j	80007c62 <.LBB2_14+0x8>

0000000080007c12 <.LBB2_5>:
    80007c12:	4509                	li	a0,2
            2 => Exception::IllegalInstruction,
    80007c14:	00a10ba3          	sb	a0,23(sp)
        match nr {
    80007c18:	a0a9                	j	80007c62 <.LBB2_14+0x8>

0000000080007c1a <.LBB2_6>:
    80007c1a:	450d                	li	a0,3
            3 => Exception::Breakpoint,
    80007c1c:	00a10ba3          	sb	a0,23(sp)
        match nr {
    80007c20:	a089                	j	80007c62 <.LBB2_14+0x8>

0000000080007c22 <.LBB2_7>:
    80007c22:	4511                	li	a0,4
            5 => Exception::LoadFault,
    80007c24:	00a10ba3          	sb	a0,23(sp)
        match nr {
    80007c28:	a82d                	j	80007c62 <.LBB2_14+0x8>

0000000080007c2a <.LBB2_8>:
    80007c2a:	4515                	li	a0,5
            6 => Exception::StoreMisaligned,
    80007c2c:	00a10ba3          	sb	a0,23(sp)
        match nr {
    80007c30:	a80d                	j	80007c62 <.LBB2_14+0x8>

0000000080007c32 <.LBB2_9>:
    80007c32:	4519                	li	a0,6
            7 => Exception::StoreFault,
    80007c34:	00a10ba3          	sb	a0,23(sp)
        match nr {
    80007c38:	a02d                	j	80007c62 <.LBB2_14+0x8>

0000000080007c3a <.LBB2_10>:
    80007c3a:	451d                	li	a0,7
            8 => Exception::UserEnvCall,
    80007c3c:	00a10ba3          	sb	a0,23(sp)
        match nr {
    80007c40:	a00d                	j	80007c62 <.LBB2_14+0x8>

0000000080007c42 <.LBB2_11>:
    80007c42:	4521                	li	a0,8
            9 => Exception::KernelEnvCall,
    80007c44:	00a10ba3          	sb	a0,23(sp)
        match nr {
    80007c48:	a829                	j	80007c62 <.LBB2_14+0x8>

0000000080007c4a <.LBB2_12>:
    80007c4a:	4525                	li	a0,9
            12 => Exception::InstructionPageFault,
    80007c4c:	00a10ba3          	sb	a0,23(sp)
        match nr {
    80007c50:	a809                	j	80007c62 <.LBB2_14+0x8>

0000000080007c52 <.LBB2_13>:
    80007c52:	4529                	li	a0,10
            13 => Exception::LoadPageFault,
    80007c54:	00a10ba3          	sb	a0,23(sp)
        match nr {
    80007c58:	a029                	j	80007c62 <.LBB2_14+0x8>

0000000080007c5a <.LBB2_14>:
    80007c5a:	452d                	li	a0,11
            15 => Exception::StorePageFault,
    80007c5c:	00a10ba3          	sb	a0,23(sp)
        match nr {
    80007c60:	a009                	j	80007c62 <.LBB2_14+0x8>
        }
    }
    80007c62:	01710503          	lb	a0,23(sp)
    80007c66:	6105                	addi	sp,sp,32
    80007c68:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register6scause6Scause3new17hf1aad0ee6c83efd3E:

0000000080007c6a <_ZN6kernel4arch5riscv8register6scause6Scause3new17hf1aad0ee6c83efd3E>:

impl Scause{

    // new a Scause Object by usize
    #[inline]
    pub fn new(scause: usize) -> Self{
    80007c6a:	1141                	addi	sp,sp,-16
    80007c6c:	e42a                	sd	a0,8(sp)
        Self{
    80007c6e:	e02a                	sd	a0,0(sp)
            bits: scause
        }
    }
    80007c70:	0141                	addi	sp,sp,16
    80007c72:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register6scause6Scause4code17he6d8ec308b055b2eE:

0000000080007c74 <_ZN6kernel4arch5riscv8register6scause6Scause4code17he6d8ec308b055b2eE>:
    pub fn bits(&self) -> usize{
        self.bits
    }

    // Returns the code field
    pub fn code(&self) -> usize{
    80007c74:	7179                	addi	sp,sp,-48
    80007c76:	ec2a                	sd	a0,24(sp)
    80007c78:	f02a                	sd	a0,32(sp)
        let bit =  1 << (size_of::<usize>() * 8 -1);
    80007c7a:	a009                	j	80007c7c <_ZN6kernel4arch5riscv8register6scause6Scause4code17he6d8ec308b055b2eE+0x8>
    80007c7c:	04000513          	li	a0,64
    80007c80:	e82a                	sd	a0,16(sp)
    80007c82:	4501                	li	a0,0
    80007c84:	ed0d                	bnez	a0,80007cbe <.LBB4_8>
    80007c86:	a009                	j	80007c88 <_ZN6kernel4arch5riscv8register6scause6Scause4code17he6d8ec308b055b2eE+0x14>
    80007c88:	6542                	ld	a0,16(sp)
    80007c8a:	fff50593          	addi	a1,a0,-1
    80007c8e:	e42e                	sd	a1,8(sp)
    80007c90:	04b56663          	bltu	a0,a1,80007cdc <.LBB4_10>
    80007c94:	a009                	j	80007c96 <_ZN6kernel4arch5riscv8register6scause6Scause4code17he6d8ec308b055b2eE+0x22>
    80007c96:	6622                	ld	a2,8(sp)
    80007c98:	fc067513          	andi	a0,a2,-64
    80007c9c:	4585                	li	a1,1
    80007c9e:	00c595b3          	sll	a1,a1,a2
    80007ca2:	e02e                	sd	a1,0(sp)
    80007ca4:	4581                	li	a1,0
    80007ca6:	04b51a63          	bne	a0,a1,80007cfa <.LBB4_12>
    80007caa:	a009                	j	80007cac <_ZN6kernel4arch5riscv8register6scause6Scause4code17he6d8ec308b055b2eE+0x38>
    80007cac:	6582                	ld	a1,0(sp)
    80007cae:	6562                	ld	a0,24(sp)
    80007cb0:	f42e                	sd	a1,40(sp)
        self.bits & !bit
    80007cb2:	6108                	ld	a0,0(a0)
    80007cb4:	fff5c593          	not	a1,a1
    80007cb8:	8d6d                	and	a0,a0,a1
    }
    80007cba:	6145                	addi	sp,sp,48
    80007cbc:	8082                	ret

0000000080007cbe <.LBB4_8>:
        let bit =  1 << (size_of::<usize>() * 8 -1);
    80007cbe:	0001f517          	auipc	a0,0x1f
    80007cc2:	46250513          	addi	a0,a0,1122 # 80027120 <str.0>

0000000080007cc6 <.LBB4_9>:
    80007cc6:	0001f617          	auipc	a2,0x1f
    80007cca:	43a60613          	addi	a2,a2,1082 # 80027100 <.L__unnamed_3>
    80007cce:	02100593          	li	a1,33
    80007cd2:	0001a097          	auipc	ra,0x1a
    80007cd6:	42a080e7          	jalr	1066(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080007cdc <.LBB4_10>:
    80007cdc:	0001f517          	auipc	a0,0x1f
    80007ce0:	48450513          	addi	a0,a0,1156 # 80027160 <str.1>

0000000080007ce4 <.LBB4_11>:
    80007ce4:	0001f617          	auipc	a2,0x1f
    80007ce8:	46460613          	addi	a2,a2,1124 # 80027148 <.L__unnamed_4>
    80007cec:	02100593          	li	a1,33
    80007cf0:	0001a097          	auipc	ra,0x1a
    80007cf4:	40c080e7          	jalr	1036(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080007cfa <.LBB4_12>:
    80007cfa:	0001f517          	auipc	a0,0x1f
    80007cfe:	4a650513          	addi	a0,a0,1190 # 800271a0 <str.2>

0000000080007d02 <.LBB4_13>:
    80007d02:	0001f617          	auipc	a2,0x1f
    80007d06:	48660613          	addi	a2,a2,1158 # 80027188 <.L__unnamed_5>
    80007d0a:	02300593          	li	a1,35
    80007d0e:	0001a097          	auipc	ra,0x1a
    80007d12:	3ee080e7          	jalr	1006(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel4arch5riscv8register6scause6Scause5cause17h87ca94701d022899E:

0000000080007d18 <_ZN6kernel4arch5riscv8register6scause6Scause5cause17h87ca94701d022899E>:

    // Trap Cause
    #[inline]
    pub fn cause(&self) -> Trap{
    80007d18:	715d                	addi	sp,sp,-80
    80007d1a:	e486                	sd	ra,72(sp)
    80007d1c:	f42a                	sd	a0,40(sp)
    80007d1e:	e0aa                	sd	a0,64(sp)
        if self.is_interrupt() {
    80007d20:	00000097          	auipc	ra,0x0
    80007d24:	080080e7          	jalr	128(ra) # 80007da0 <_ZN6kernel4arch5riscv8register6scause6Scause12is_interrupt17ha1f71e688e6e4741E>
    80007d28:	f82a                	sd	a0,48(sp)
    80007d2a:	a009                	j	80007d2c <_ZN6kernel4arch5riscv8register6scause6Scause5cause17h87ca94701d022899E+0x14>
    80007d2c:	7542                	ld	a0,48(sp)
    80007d2e:	4581                	li	a1,0
    80007d30:	00b50a63          	beq	a0,a1,80007d44 <_ZN6kernel4arch5riscv8register6scause6Scause5cause17h87ca94701d022899E+0x2c>
    80007d34:	a009                	j	80007d36 <_ZN6kernel4arch5riscv8register6scause6Scause5cause17h87ca94701d022899E+0x1e>
            Trap::Interrupt(Interrupt::from(self.code()))
    80007d36:	7522                	ld	a0,40(sp)
    80007d38:	00000097          	auipc	ra,0x0
    80007d3c:	f3c080e7          	jalr	-196(ra) # 80007c74 <_ZN6kernel4arch5riscv8register6scause6Scause4code17he6d8ec308b055b2eE>
    80007d40:	f02a                	sd	a0,32(sp)
    80007d42:	a801                	j	80007d52 <_ZN6kernel4arch5riscv8register6scause6Scause5cause17h87ca94701d022899E+0x3a>
        }else{
            
            Trap::Exception(Exception::from(self.code()))
    80007d44:	7522                	ld	a0,40(sp)
    80007d46:	00000097          	auipc	ra,0x0
    80007d4a:	f2e080e7          	jalr	-210(ra) # 80007c74 <_ZN6kernel4arch5riscv8register6scause6Scause4code17he6d8ec308b055b2eE>
    80007d4e:	ec2a                	sd	a0,24(sp)
    80007d50:	a00d                	j	80007d72 <_ZN6kernel4arch5riscv8register6scause6Scause5cause17h87ca94701d022899E+0x5a>
            Trap::Interrupt(Interrupt::from(self.code()))
    80007d52:	7502                	ld	a0,32(sp)
    80007d54:	00000097          	auipc	ra,0x0
    80007d58:	e22080e7          	jalr	-478(ra) # 80007b76 <_ZN6kernel4arch5riscv8register6scause9Interrupt4from17hfa107f1206d46befE>
    80007d5c:	0ff57513          	andi	a0,a0,255
    80007d60:	e82a                	sd	a0,16(sp)
    80007d62:	a009                	j	80007d64 <_ZN6kernel4arch5riscv8register6scause6Scause5cause17h87ca94701d022899E+0x4c>
    80007d64:	6542                	ld	a0,16(sp)
    80007d66:	02a10ca3          	sb	a0,57(sp)
    80007d6a:	4501                	li	a0,0
    80007d6c:	02a10c23          	sb	a0,56(sp)
        if self.is_interrupt() {
    80007d70:	a00d                	j	80007d92 <_ZN6kernel4arch5riscv8register6scause6Scause5cause17h87ca94701d022899E+0x7a>
            Trap::Exception(Exception::from(self.code()))
    80007d72:	6562                	ld	a0,24(sp)
    80007d74:	00000097          	auipc	ra,0x0
    80007d78:	e64080e7          	jalr	-412(ra) # 80007bd8 <_ZN6kernel4arch5riscv8register6scause9Exception4from17hf94bf9ab612e4876E>
    80007d7c:	0ff57513          	andi	a0,a0,255
    80007d80:	e42a                	sd	a0,8(sp)
    80007d82:	a009                	j	80007d84 <_ZN6kernel4arch5riscv8register6scause6Scause5cause17h87ca94701d022899E+0x6c>
    80007d84:	6522                	ld	a0,8(sp)
    80007d86:	02a10ca3          	sb	a0,57(sp)
    80007d8a:	4505                	li	a0,1
    80007d8c:	02a10c23          	sb	a0,56(sp)
        if self.is_interrupt() {
    80007d90:	a009                	j	80007d92 <_ZN6kernel4arch5riscv8register6scause6Scause5cause17h87ca94701d022899E+0x7a>
        }
    }
    80007d92:	03814503          	lbu	a0,56(sp)
    80007d96:	03910583          	lb	a1,57(sp)
    80007d9a:	60a6                	ld	ra,72(sp)
    80007d9c:	6161                	addi	sp,sp,80
    80007d9e:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register6scause6Scause12is_interrupt17ha1f71e688e6e4741E:

0000000080007da0 <_ZN6kernel4arch5riscv8register6scause6Scause12is_interrupt17ha1f71e688e6e4741E>:


    // Is trap cause an interrupt
    #[inline]
    pub fn is_interrupt(&self) -> bool {
    80007da0:	7179                	addi	sp,sp,-48
    80007da2:	f406                	sd	ra,40(sp)
    80007da4:	ec2a                	sd	a0,24(sp)
    80007da6:	f02a                	sd	a0,32(sp)
        self.bits.get_bit(size_of::<usize>()*8 - 1)
    80007da8:	a009                	j	80007daa <_ZN6kernel4arch5riscv8register6scause6Scause12is_interrupt17ha1f71e688e6e4741E+0xa>
    80007daa:	04000513          	li	a0,64
    80007dae:	e82a                	sd	a0,16(sp)
    80007db0:	4501                	li	a0,0
    80007db2:	e50d                	bnez	a0,80007ddc <.LBB6_7>
    80007db4:	a009                	j	80007db6 <_ZN6kernel4arch5riscv8register6scause6Scause12is_interrupt17ha1f71e688e6e4741E+0x16>
    80007db6:	6542                	ld	a0,16(sp)
    80007db8:	fff50593          	addi	a1,a0,-1
    80007dbc:	e42e                	sd	a1,8(sp)
    80007dbe:	02b56e63          	bltu	a0,a1,80007dfa <.LBB6_9>
    80007dc2:	a009                	j	80007dc4 <_ZN6kernel4arch5riscv8register6scause6Scause12is_interrupt17ha1f71e688e6e4741E+0x24>
    80007dc4:	65a2                	ld	a1,8(sp)
    80007dc6:	6562                	ld	a0,24(sp)
    80007dc8:	ffffc097          	auipc	ra,0xffffc
    80007dcc:	f54080e7          	jalr	-172(ra) # 80003d1c <_ZN45_$LT$usize$u20$as$u20$bit_field..BitField$GT$7get_bit17ha84b909d1dae7859E>
    80007dd0:	e02a                	sd	a0,0(sp)
    80007dd2:	a009                	j	80007dd4 <_ZN6kernel4arch5riscv8register6scause6Scause12is_interrupt17ha1f71e688e6e4741E+0x34>
    }
    80007dd4:	6502                	ld	a0,0(sp)
    80007dd6:	70a2                	ld	ra,40(sp)
    80007dd8:	6145                	addi	sp,sp,48
    80007dda:	8082                	ret

0000000080007ddc <.LBB6_7>:
        self.bits.get_bit(size_of::<usize>()*8 - 1)
    80007ddc:	0001f517          	auipc	a0,0x1f
    80007de0:	34450513          	addi	a0,a0,836 # 80027120 <str.0>

0000000080007de4 <.LBB6_8>:
    80007de4:	0001f617          	auipc	a2,0x1f
    80007de8:	3e460613          	addi	a2,a2,996 # 800271c8 <.L__unnamed_6>
    80007dec:	02100593          	li	a1,33
    80007df0:	0001a097          	auipc	ra,0x1a
    80007df4:	30c080e7          	jalr	780(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080007dfa <.LBB6_9>:
    80007dfa:	0001f517          	auipc	a0,0x1f
    80007dfe:	36650513          	addi	a0,a0,870 # 80027160 <str.1>

0000000080007e02 <.LBB6_10>:
    80007e02:	0001f617          	auipc	a2,0x1f
    80007e06:	3c660613          	addi	a2,a2,966 # 800271c8 <.L__unnamed_6>
    80007e0a:	02100593          	li	a1,33
    80007e0e:	0001a097          	auipc	ra,0x1a
    80007e12:	2ee080e7          	jalr	750(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN80_$LT$kernel..arch..riscv..register..scause..Trap$u20$as$u20$core..fmt..Debug$GT$3fmt17haf633180146f5b80E:

0000000080007e18 <_ZN80_$LT$kernel..arch..riscv..register..scause..Trap$u20$as$u20$core..fmt..Debug$GT$3fmt17haf633180146f5b80E>:
#[derive(Copy, Clone, Debug, Eq, PartialEq)]
    80007e18:	7135                	addi	sp,sp,-160
    80007e1a:	ed06                	sd	ra,152(sp)
    80007e1c:	e82e                	sd	a1,16(sp)
    80007e1e:	f4aa                	sd	a0,104(sp)
    80007e20:	f8ae                	sd	a1,112(sp)
    80007e22:	f02a                	sd	a0,32(sp)
    80007e24:	00054503          	lbu	a0,0(a0)
    80007e28:	8905                	andi	a0,a0,1
    80007e2a:	4581                	li	a1,0
    80007e2c:	02b50463          	beq	a0,a1,80007e54 <.LBB7_10+0x18>
    80007e30:	a009                	j	80007e32 <_ZN80_$LT$kernel..arch..riscv..register..scause..Trap$u20$as$u20$core..fmt..Debug$GT$3fmt17haf633180146f5b80E+0x1a>
    Exception(Exception),
    80007e32:	65c2                	ld	a1,16(sp)
    80007e34:	7502                	ld	a0,32(sp)
    80007e36:	0505                	addi	a0,a0,1
    80007e38:	e42a                	sd	a0,8(sp)
    80007e3a:	fcaa                	sd	a0,120(sp)

0000000080007e3c <.LBB7_10>:
#[derive(Copy, Clone, Debug, Eq, PartialEq)]
    80007e3c:	0001f617          	auipc	a2,0x1f
    80007e40:	3a460613          	addi	a2,a2,932 # 800271e0 <.L__unnamed_7>
    80007e44:	00a8                	addi	a0,sp,72
    80007e46:	46a5                	li	a3,9
    80007e48:	0001b097          	auipc	ra,0x1b
    80007e4c:	232080e7          	jalr	562(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    80007e50:	a881                	j	80007ea0 <.LBB7_12+0x24>
    80007e52:	0000                	unimp
    Interrupt(Interrupt),
    80007e54:	65c2                	ld	a1,16(sp)
    80007e56:	7502                	ld	a0,32(sp)
    80007e58:	0505                	addi	a0,a0,1
    80007e5a:	e02a                	sd	a0,0(sp)
    80007e5c:	e52a                	sd	a0,136(sp)

0000000080007e5e <.LBB7_11>:
#[derive(Copy, Clone, Debug, Eq, PartialEq)]
    80007e5e:	0001f617          	auipc	a2,0x1f
    80007e62:	3b260613          	addi	a2,a2,946 # 80027210 <.L__unnamed_8>
    80007e66:	1028                	addi	a0,sp,40
    80007e68:	46a5                	li	a3,9
    80007e6a:	0001b097          	auipc	ra,0x1b
    80007e6e:	210080e7          	jalr	528(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    80007e72:	a009                	j	80007e74 <.LBB7_11+0x16>
    80007e74:	6582                	ld	a1,0(sp)
    80007e76:	1028                	addi	a0,sp,40
    80007e78:	e92a                	sd	a0,144(sp)
    Interrupt(Interrupt),
    80007e7a:	e0ae                	sd	a1,64(sp)

0000000080007e7c <.LBB7_12>:
#[derive(Copy, Clone, Debug, Eq, PartialEq)]
    80007e7c:	0001f617          	auipc	a2,0x1f
    80007e80:	3a460613          	addi	a2,a2,932 # 80027220 <.L__unnamed_2>
    80007e84:	008c                	addi	a1,sp,64
    80007e86:	0001a097          	auipc	ra,0x1a
    80007e8a:	72c080e7          	jalr	1836(ra) # 800225b2 <_ZN4core3fmt8builders10DebugTuple5field17h5bd338b8cb98b948E>
    80007e8e:	a009                	j	80007e90 <.LBB7_12+0x14>
    80007e90:	1028                	addi	a0,sp,40
    80007e92:	0001b097          	auipc	ra,0x1b
    80007e96:	840080e7          	jalr	-1984(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    80007e9a:	00a10fa3          	sb	a0,31(sp)
    80007e9e:	a03d                	j	80007ecc <.LBB7_13+0x24>
    80007ea0:	65a2                	ld	a1,8(sp)
    80007ea2:	00a8                	addi	a0,sp,72
    80007ea4:	e12a                	sd	a0,128(sp)
    Exception(Exception),
    80007ea6:	f0ae                	sd	a1,96(sp)

0000000080007ea8 <.LBB7_13>:
#[derive(Copy, Clone, Debug, Eq, PartialEq)]
    80007ea8:	0001f617          	auipc	a2,0x1f
    80007eac:	34860613          	addi	a2,a2,840 # 800271f0 <.L__unnamed_1>
    80007eb0:	108c                	addi	a1,sp,96
    80007eb2:	0001a097          	auipc	ra,0x1a
    80007eb6:	700080e7          	jalr	1792(ra) # 800225b2 <_ZN4core3fmt8builders10DebugTuple5field17h5bd338b8cb98b948E>
    80007eba:	a009                	j	80007ebc <.LBB7_13+0x14>
    80007ebc:	00a8                	addi	a0,sp,72
    80007ebe:	0001b097          	auipc	ra,0x1b
    80007ec2:	814080e7          	jalr	-2028(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    80007ec6:	00a10fa3          	sb	a0,31(sp)
    80007eca:	a009                	j	80007ecc <.LBB7_13+0x24>
    80007ecc:	01f14503          	lbu	a0,31(sp)
    80007ed0:	60ea                	ld	ra,152(sp)
    80007ed2:	610d                	addi	sp,sp,160
    80007ed4:	8082                	ret

Disassembly of section .text._ZN85_$LT$kernel..arch..riscv..register..scause..Interrupt$u20$as$u20$core..fmt..Debug$GT$3fmt17h96992b3c4ed41ad9E:

0000000080007ed6 <_ZN85_$LT$kernel..arch..riscv..register..scause..Interrupt$u20$as$u20$core..fmt..Debug$GT$3fmt17h96992b3c4ed41ad9E>:
#[derive(Copy, Clone, Debug, Eq, PartialEq)]
    80007ed6:	712d                	addi	sp,sp,-288
    80007ed8:	ee06                	sd	ra,280(sp)
    80007eda:	e42e                	sd	a1,8(sp)
    80007edc:	e9aa                	sd	a0,208(sp)
    80007ede:	edae                	sd	a1,216(sp)
    80007ee0:	f02a                	sd	a0,32(sp)
    80007ee2:	00054503          	lbu	a0,0(a0)
    80007ee6:	e82a                	sd	a0,16(sp)
    80007ee8:	6542                	ld	a0,16(sp)
    80007eea:	050e                	slli	a0,a0,0x3

0000000080007eec <.LBB8_18>:
    80007eec:	0001f597          	auipc	a1,0x1f
    80007ef0:	14c58593          	addi	a1,a1,332 # 80027038 <.LJTI8_0>
    80007ef4:	952e                	add	a0,a0,a1
    80007ef6:	6108                	ld	a0,0(a0)
    80007ef8:	8502                	jr	a0

0000000080007efa <.LBB8_2>:
    80007efa:	65a2                	ld	a1,8(sp)

0000000080007efc <.LBB8_19>:
    80007efc:	0001f617          	auipc	a2,0x1f
    80007f00:	34460613          	addi	a2,a2,836 # 80027240 <.L__unnamed_9>
    80007f04:	1928                	addi	a0,sp,184
    80007f06:	469d                	li	a3,7
    80007f08:	0001b097          	auipc	ra,0x1b
    80007f0c:	172080e7          	jalr	370(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    80007f10:	a201                	j	80008010 <.LBB8_25+0x28>
	...

0000000080007f14 <.LBB8_4>:
    80007f14:	65a2                	ld	a1,8(sp)

0000000080007f16 <.LBB8_20>:
    80007f16:	0001f617          	auipc	a2,0x1f
    80007f1a:	89260613          	addi	a2,a2,-1902 # 800267a8 <.L__unnamed_6+0x70>
    80007f1e:	1028                	addi	a0,sp,40
    80007f20:	46a1                	li	a3,8
    80007f22:	0001b097          	auipc	ra,0x1b
    80007f26:	158080e7          	jalr	344(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    80007f2a:	a009                	j	80007f2c <.LBB8_20+0x16>
    80007f2c:	1028                	addi	a0,sp,40
    80007f2e:	ea2a                	sd	a0,272(sp)
    80007f30:	0001a097          	auipc	ra,0x1a
    80007f34:	7a2080e7          	jalr	1954(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    80007f38:	00a10fa3          	sb	a0,31(sp)
    80007f3c:	a0dd                	j	80008022 <.LBB8_25+0x3a>

0000000080007f3e <.LBB8_6>:
    80007f3e:	65a2                	ld	a1,8(sp)

0000000080007f40 <.LBB8_21>:
    80007f40:	0001f617          	auipc	a2,0x1f
    80007f44:	33d60613          	addi	a2,a2,829 # 8002727d <.L__unnamed_11>
    80007f48:	0088                	addi	a0,sp,64
    80007f4a:	46b9                	li	a3,14
    80007f4c:	0001b097          	auipc	ra,0x1b
    80007f50:	12e080e7          	jalr	302(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    80007f54:	a009                	j	80007f56 <.LBB8_21+0x16>
    80007f56:	0088                	addi	a0,sp,64
    80007f58:	e62a                	sd	a0,264(sp)
    80007f5a:	0001a097          	auipc	ra,0x1a
    80007f5e:	778080e7          	jalr	1912(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    80007f62:	00a10fa3          	sb	a0,31(sp)
    80007f66:	a875                	j	80008022 <.LBB8_25+0x3a>

0000000080007f68 <.LBB8_8>:
    80007f68:	65a2                	ld	a1,8(sp)

0000000080007f6a <.LBB8_22>:
    80007f6a:	0001f617          	auipc	a2,0x1f
    80007f6e:	30a60613          	addi	a2,a2,778 # 80027274 <.L__unnamed_12>
    80007f72:	08a8                	addi	a0,sp,88
    80007f74:	46a5                	li	a3,9
    80007f76:	0001b097          	auipc	ra,0x1b
    80007f7a:	104080e7          	jalr	260(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    80007f7e:	a009                	j	80007f80 <.LBB8_22+0x16>
    80007f80:	08a8                	addi	a0,sp,88
    80007f82:	e22a                	sd	a0,256(sp)
    80007f84:	0001a097          	auipc	ra,0x1a
    80007f88:	74e080e7          	jalr	1870(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    80007f8c:	00a10fa3          	sb	a0,31(sp)
    80007f90:	a849                	j	80008022 <.LBB8_25+0x3a>

0000000080007f92 <.LBB8_10>:
    80007f92:	65a2                	ld	a1,8(sp)

0000000080007f94 <.LBB8_23>:
    80007f94:	0001f617          	auipc	a2,0x1f
    80007f98:	2d160613          	addi	a2,a2,721 # 80027265 <.L__unnamed_13>
    80007f9c:	1888                	addi	a0,sp,112
    80007f9e:	46bd                	li	a3,15
    80007fa0:	0001b097          	auipc	ra,0x1b
    80007fa4:	0da080e7          	jalr	218(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    80007fa8:	a009                	j	80007faa <.LBB8_23+0x16>
    80007faa:	1888                	addi	a0,sp,112
    80007fac:	fdaa                	sd	a0,248(sp)
    80007fae:	0001a097          	auipc	ra,0x1a
    80007fb2:	724080e7          	jalr	1828(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    80007fb6:	00a10fa3          	sb	a0,31(sp)
    80007fba:	a0a5                	j	80008022 <.LBB8_25+0x3a>

0000000080007fbc <.LBB8_12>:
    80007fbc:	65a2                	ld	a1,8(sp)

0000000080007fbe <.LBB8_24>:
    80007fbe:	0001f617          	auipc	a2,0x1f
    80007fc2:	29b60613          	addi	a2,a2,667 # 80027259 <.L__unnamed_14>
    80007fc6:	0128                	addi	a0,sp,136
    80007fc8:	46b1                	li	a3,12
    80007fca:	0001b097          	auipc	ra,0x1b
    80007fce:	0b0080e7          	jalr	176(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    80007fd2:	a009                	j	80007fd4 <.LBB8_24+0x16>
    80007fd4:	0128                	addi	a0,sp,136
    80007fd6:	f9aa                	sd	a0,240(sp)
    80007fd8:	0001a097          	auipc	ra,0x1a
    80007fdc:	6fa080e7          	jalr	1786(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    80007fe0:	00a10fa3          	sb	a0,31(sp)
    80007fe4:	a83d                	j	80008022 <.LBB8_25+0x3a>

0000000080007fe6 <.LBB8_14>:
    80007fe6:	65a2                	ld	a1,8(sp)

0000000080007fe8 <.LBB8_25>:
    80007fe8:	0001f617          	auipc	a2,0x1f
    80007fec:	25f60613          	addi	a2,a2,607 # 80027247 <.L__unnamed_15>
    80007ff0:	1108                	addi	a0,sp,160
    80007ff2:	46c9                	li	a3,18
    80007ff4:	0001b097          	auipc	ra,0x1b
    80007ff8:	086080e7          	jalr	134(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    80007ffc:	a009                	j	80007ffe <.LBB8_25+0x16>
    80007ffe:	1108                	addi	a0,sp,160
    80008000:	f5aa                	sd	a0,232(sp)
    80008002:	0001a097          	auipc	ra,0x1a
    80008006:	6d0080e7          	jalr	1744(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    8000800a:	00a10fa3          	sb	a0,31(sp)
    8000800e:	a811                	j	80008022 <.LBB8_25+0x3a>
    80008010:	1928                	addi	a0,sp,184
    80008012:	f1aa                	sd	a0,224(sp)
    80008014:	0001a097          	auipc	ra,0x1a
    80008018:	6be080e7          	jalr	1726(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    8000801c:	00a10fa3          	sb	a0,31(sp)
    80008020:	a009                	j	80008022 <.LBB8_25+0x3a>
    80008022:	01f14503          	lbu	a0,31(sp)
    80008026:	60f2                	ld	ra,280(sp)
    80008028:	6115                	addi	sp,sp,288
    8000802a:	8082                	ret

Disassembly of section .text._ZN85_$LT$kernel..arch..riscv..register..scause..Exception$u20$as$u20$core..fmt..Debug$GT$3fmt17h4deffc5a3158ed01E:

000000008000802c <_ZN85_$LT$kernel..arch..riscv..register..scause..Exception$u20$as$u20$core..fmt..Debug$GT$3fmt17h4deffc5a3158ed01E>:
#[derive(Copy, Clone, Debug, Eq, PartialEq)]
    8000802c:	7105                	addi	sp,sp,-480
    8000802e:	ef86                	sd	ra,472(sp)
    80008030:	e42e                	sd	a1,8(sp)
    80008032:	f2aa                	sd	a0,352(sp)
    80008034:	f6ae                	sd	a1,360(sp)
    80008036:	f02a                	sd	a0,32(sp)
    80008038:	00054503          	lbu	a0,0(a0)
    8000803c:	e82a                	sd	a0,16(sp)
    8000803e:	6542                	ld	a0,16(sp)
    80008040:	050e                	slli	a0,a0,0x3

0000000080008042 <.LBB9_30>:
    80008042:	0001f597          	auipc	a1,0x1f
    80008046:	02e58593          	addi	a1,a1,46 # 80027070 <.LJTI9_0>
    8000804a:	952e                	add	a0,a0,a1
    8000804c:	6108                	ld	a0,0(a0)
    8000804e:	8502                	jr	a0

0000000080008050 <.LBB9_2>:
    80008050:	65a2                	ld	a1,8(sp)

0000000080008052 <.LBB9_31>:
    80008052:	0001f617          	auipc	a2,0x1f
    80008056:	1ee60613          	addi	a2,a2,494 # 80027240 <.L__unnamed_9>
    8000805a:	02a8                	addi	a0,sp,328
    8000805c:	469d                	li	a3,7
    8000805e:	0001b097          	auipc	ra,0x1b
    80008062:	01c080e7          	jalr	28(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    80008066:	aaf5                	j	80008262 <.LBB9_43+0x28>
	...

000000008000806a <.LBB9_4>:
    8000806a:	65a2                	ld	a1,8(sp)

000000008000806c <.LBB9_32>:
    8000806c:	0001f617          	auipc	a2,0x1f
    80008070:	2a460613          	addi	a2,a2,676 # 80027310 <.L__unnamed_16>
    80008074:	1028                	addi	a0,sp,40
    80008076:	46d5                	li	a3,21
    80008078:	0001b097          	auipc	ra,0x1b
    8000807c:	002080e7          	jalr	2(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    80008080:	a009                	j	80008082 <.LBB9_32+0x16>
    80008082:	1028                	addi	a0,sp,40
    80008084:	ebaa                	sd	a0,464(sp)
    80008086:	0001a097          	auipc	ra,0x1a
    8000808a:	64c080e7          	jalr	1612(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    8000808e:	00a10fa3          	sb	a0,31(sp)
    80008092:	a2cd                	j	80008274 <.LBB9_43+0x3a>

0000000080008094 <.LBB9_6>:
    80008094:	65a2                	ld	a1,8(sp)

0000000080008096 <.LBB9_33>:
    80008096:	0001d617          	auipc	a2,0x1d
    8000809a:	5ea60613          	addi	a2,a2,1514 # 80025680 <.L__unnamed_35+0xb8>
    8000809e:	0088                	addi	a0,sp,64
    800080a0:	46c1                	li	a3,16
    800080a2:	0001b097          	auipc	ra,0x1b
    800080a6:	fd8080e7          	jalr	-40(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    800080aa:	a009                	j	800080ac <.LBB9_33+0x16>
    800080ac:	0088                	addi	a0,sp,64
    800080ae:	e7aa                	sd	a0,456(sp)
    800080b0:	0001a097          	auipc	ra,0x1a
    800080b4:	622080e7          	jalr	1570(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    800080b8:	00a10fa3          	sb	a0,31(sp)
    800080bc:	aa65                	j	80008274 <.LBB9_43+0x3a>

00000000800080be <.LBB9_8>:
    800080be:	65a2                	ld	a1,8(sp)

00000000800080c0 <.LBB9_34>:
    800080c0:	0001f617          	auipc	a2,0x1f
    800080c4:	23e60613          	addi	a2,a2,574 # 800272fe <.L__unnamed_18>
    800080c8:	08a8                	addi	a0,sp,88
    800080ca:	46c9                	li	a3,18
    800080cc:	0001b097          	auipc	ra,0x1b
    800080d0:	fae080e7          	jalr	-82(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    800080d4:	a009                	j	800080d6 <.LBB9_34+0x16>
    800080d6:	08a8                	addi	a0,sp,88
    800080d8:	e3aa                	sd	a0,448(sp)
    800080da:	0001a097          	auipc	ra,0x1a
    800080de:	5f8080e7          	jalr	1528(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    800080e2:	00a10fa3          	sb	a0,31(sp)
    800080e6:	a279                	j	80008274 <.LBB9_43+0x3a>

00000000800080e8 <.LBB9_10>:
    800080e8:	65a2                	ld	a1,8(sp)

00000000800080ea <.LBB9_35>:
    800080ea:	0001f617          	auipc	a2,0x1f
    800080ee:	20a60613          	addi	a2,a2,522 # 800272f4 <.L__unnamed_19>
    800080f2:	1888                	addi	a0,sp,112
    800080f4:	46a9                	li	a3,10
    800080f6:	0001b097          	auipc	ra,0x1b
    800080fa:	f84080e7          	jalr	-124(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    800080fe:	a009                	j	80008100 <.LBB9_35+0x16>
    80008100:	1888                	addi	a0,sp,112
    80008102:	ff2a                	sd	a0,440(sp)
    80008104:	0001a097          	auipc	ra,0x1a
    80008108:	5ce080e7          	jalr	1486(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    8000810c:	00a10fa3          	sb	a0,31(sp)
    80008110:	a295                	j	80008274 <.LBB9_43+0x3a>

0000000080008112 <.LBB9_12>:
    80008112:	65a2                	ld	a1,8(sp)

0000000080008114 <.LBB9_36>:
    80008114:	0001f617          	auipc	a2,0x1f
    80008118:	1d760613          	addi	a2,a2,471 # 800272eb <.L__unnamed_20>
    8000811c:	0128                	addi	a0,sp,136
    8000811e:	46a5                	li	a3,9
    80008120:	0001b097          	auipc	ra,0x1b
    80008124:	f5a080e7          	jalr	-166(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    80008128:	a009                	j	8000812a <.LBB9_36+0x16>
    8000812a:	0128                	addi	a0,sp,136
    8000812c:	fb2a                	sd	a0,432(sp)
    8000812e:	0001a097          	auipc	ra,0x1a
    80008132:	5a4080e7          	jalr	1444(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    80008136:	00a10fa3          	sb	a0,31(sp)
    8000813a:	aa2d                	j	80008274 <.LBB9_43+0x3a>

000000008000813c <.LBB9_14>:
    8000813c:	65a2                	ld	a1,8(sp)

000000008000813e <.LBB9_37>:
    8000813e:	0001f617          	auipc	a2,0x1f
    80008142:	19e60613          	addi	a2,a2,414 # 800272dc <.L__unnamed_21>
    80008146:	1108                	addi	a0,sp,160
    80008148:	46bd                	li	a3,15
    8000814a:	0001b097          	auipc	ra,0x1b
    8000814e:	f30080e7          	jalr	-208(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    80008152:	a009                	j	80008154 <.LBB9_37+0x16>
    80008154:	1108                	addi	a0,sp,160
    80008156:	f72a                	sd	a0,424(sp)
    80008158:	0001a097          	auipc	ra,0x1a
    8000815c:	57a080e7          	jalr	1402(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    80008160:	00a10fa3          	sb	a0,31(sp)
    80008164:	aa01                	j	80008274 <.LBB9_43+0x3a>

0000000080008166 <.LBB9_16>:
    80008166:	65a2                	ld	a1,8(sp)

0000000080008168 <.LBB9_38>:
    80008168:	0001f617          	auipc	a2,0x1f
    8000816c:	16a60613          	addi	a2,a2,362 # 800272d2 <.L__unnamed_22>
    80008170:	1928                	addi	a0,sp,184
    80008172:	46a9                	li	a3,10
    80008174:	0001b097          	auipc	ra,0x1b
    80008178:	f06080e7          	jalr	-250(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    8000817c:	a009                	j	8000817e <.LBB9_38+0x16>
    8000817e:	1928                	addi	a0,sp,184
    80008180:	f32a                	sd	a0,416(sp)
    80008182:	0001a097          	auipc	ra,0x1a
    80008186:	550080e7          	jalr	1360(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    8000818a:	00a10fa3          	sb	a0,31(sp)
    8000818e:	a0dd                	j	80008274 <.LBB9_43+0x3a>

0000000080008190 <.LBB9_18>:
    80008190:	65a2                	ld	a1,8(sp)

0000000080008192 <.LBB9_39>:
    80008192:	0001f617          	auipc	a2,0x1f
    80008196:	13560613          	addi	a2,a2,309 # 800272c7 <.L__unnamed_23>
    8000819a:	0988                	addi	a0,sp,208
    8000819c:	46ad                	li	a3,11
    8000819e:	0001b097          	auipc	ra,0x1b
    800081a2:	edc080e7          	jalr	-292(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    800081a6:	a009                	j	800081a8 <.LBB9_39+0x16>
    800081a8:	0988                	addi	a0,sp,208
    800081aa:	ef2a                	sd	a0,408(sp)
    800081ac:	0001a097          	auipc	ra,0x1a
    800081b0:	526080e7          	jalr	1318(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    800081b4:	00a10fa3          	sb	a0,31(sp)
    800081b8:	a875                	j	80008274 <.LBB9_43+0x3a>

00000000800081ba <.LBB9_20>:
    800081ba:	65a2                	ld	a1,8(sp)

00000000800081bc <.LBB9_40>:
    800081bc:	0001f617          	auipc	a2,0x1f
    800081c0:	0fe60613          	addi	a2,a2,254 # 800272ba <.L__unnamed_24>
    800081c4:	11a8                	addi	a0,sp,232
    800081c6:	46b5                	li	a3,13
    800081c8:	0001b097          	auipc	ra,0x1b
    800081cc:	eb2080e7          	jalr	-334(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    800081d0:	a009                	j	800081d2 <.LBB9_40+0x16>
    800081d2:	11a8                	addi	a0,sp,232
    800081d4:	eb2a                	sd	a0,400(sp)
    800081d6:	0001a097          	auipc	ra,0x1a
    800081da:	4fc080e7          	jalr	1276(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    800081de:	00a10fa3          	sb	a0,31(sp)
    800081e2:	a849                	j	80008274 <.LBB9_43+0x3a>

00000000800081e4 <.LBB9_22>:
    800081e4:	65a2                	ld	a1,8(sp)

00000000800081e6 <.LBB9_41>:
    800081e6:	0001f617          	auipc	a2,0x1f
    800081ea:	0c060613          	addi	a2,a2,192 # 800272a6 <.L__unnamed_25>
    800081ee:	0208                	addi	a0,sp,256
    800081f0:	46d1                	li	a3,20
    800081f2:	0001b097          	auipc	ra,0x1b
    800081f6:	e88080e7          	jalr	-376(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    800081fa:	a009                	j	800081fc <.LBB9_41+0x16>
    800081fc:	0208                	addi	a0,sp,256
    800081fe:	e72a                	sd	a0,392(sp)
    80008200:	0001a097          	auipc	ra,0x1a
    80008204:	4d2080e7          	jalr	1234(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    80008208:	00a10fa3          	sb	a0,31(sp)
    8000820c:	a0a5                	j	80008274 <.LBB9_43+0x3a>

000000008000820e <.LBB9_24>:
    8000820e:	65a2                	ld	a1,8(sp)

0000000080008210 <.LBB9_42>:
    80008210:	0001f617          	auipc	a2,0x1f
    80008214:	08960613          	addi	a2,a2,137 # 80027299 <.L__unnamed_26>
    80008218:	0a28                	addi	a0,sp,280
    8000821a:	46b5                	li	a3,13
    8000821c:	0001b097          	auipc	ra,0x1b
    80008220:	e5e080e7          	jalr	-418(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    80008224:	a009                	j	80008226 <.LBB9_42+0x16>
    80008226:	0a28                	addi	a0,sp,280
    80008228:	e32a                	sd	a0,384(sp)
    8000822a:	0001a097          	auipc	ra,0x1a
    8000822e:	4a8080e7          	jalr	1192(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    80008232:	00a10fa3          	sb	a0,31(sp)
    80008236:	a83d                	j	80008274 <.LBB9_43+0x3a>

0000000080008238 <.LBB9_26>:
    80008238:	65a2                	ld	a1,8(sp)

000000008000823a <.LBB9_43>:
    8000823a:	0001f617          	auipc	a2,0x1f
    8000823e:	05160613          	addi	a2,a2,81 # 8002728b <.L__unnamed_27>
    80008242:	1a08                	addi	a0,sp,304
    80008244:	46b9                	li	a3,14
    80008246:	0001b097          	auipc	ra,0x1b
    8000824a:	e34080e7          	jalr	-460(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    8000824e:	a009                	j	80008250 <.LBB9_43+0x16>
    80008250:	1a08                	addi	a0,sp,304
    80008252:	feaa                	sd	a0,376(sp)
    80008254:	0001a097          	auipc	ra,0x1a
    80008258:	47e080e7          	jalr	1150(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    8000825c:	00a10fa3          	sb	a0,31(sp)
    80008260:	a811                	j	80008274 <.LBB9_43+0x3a>
    80008262:	02a8                	addi	a0,sp,328
    80008264:	faaa                	sd	a0,368(sp)
    80008266:	0001a097          	auipc	ra,0x1a
    8000826a:	46c080e7          	jalr	1132(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    8000826e:	00a10fa3          	sb	a0,31(sp)
    80008272:	a009                	j	80008274 <.LBB9_43+0x3a>
    80008274:	01f14503          	lbu	a0,31(sp)
    80008278:	60fe                	ld	ra,472(sp)
    8000827a:	613d                	addi	sp,sp,480
    8000827c:	8082                	ret

Disassembly of section .text._ZN6kernel2fs6dinode9DiskInode9try_alloc17h945d9012d7c3db98E:

000000008000827e <_ZN6kernel2fs6dinode9DiskInode9try_alloc17h945d9012d7c3db98E>:
            size: 0,
            addrs: [0; NDIRECT+1]
        }
    }

    pub fn try_alloc(&mut self, itype: InodeType) -> Result<(), ()> {
    8000827e:	7139                	addi	sp,sp,-64
    80008280:	fc06                	sd	ra,56(sp)
    80008282:	e42a                	sd	a0,8(sp)
    80008284:	862e                	mv	a2,a1
    80008286:	e832                	sd	a2,16(sp)
    80008288:	f42a                	sd	a0,40(sp)
    8000828a:	02b11b23          	sh	a1,54(sp)

000000008000828e <.LBB0_6>:
        if self.itype == InodeType::Empty {
    8000828e:	0001f597          	auipc	a1,0x1f
    80008292:	0c258593          	addi	a1,a1,194 # 80027350 <.L__unnamed_1>
    80008296:	00000097          	auipc	ra,0x0
    8000829a:	176080e7          	jalr	374(ra) # 8000840c <_ZN70_$LT$kernel..fs..dinode..InodeType$u20$as$u20$core..cmp..PartialEq$GT$2eq17h96b8b60db340aeeeE>
    8000829e:	ec2a                	sd	a0,24(sp)
    800082a0:	a009                	j	800082a2 <.LBB0_6+0x14>
    800082a2:	6562                	ld	a0,24(sp)
    800082a4:	4581                	li	a1,0
    800082a6:	00b50b63          	beq	a0,a1,800082bc <.LBB0_6+0x2e>
    800082aa:	a009                	j	800082ac <.LBB0_6+0x1e>
            unsafe { ptr::write_bytes(self, 0, 1); }
    800082ac:	6522                	ld	a0,8(sp)
    800082ae:	4581                	li	a1,0
    800082b0:	4605                	li	a2,1
    800082b2:	00004097          	auipc	ra,0x4
    800082b6:	9ac080e7          	jalr	-1620(ra) # 8000bc5e <_ZN4core10intrinsics11write_bytes17h11bbad1db2a3ea1bE>
    800082ba:	a029                	j	800082c4 <.LBB0_6+0x36>
    800082bc:	4505                	li	a0,1
            self.itype = itype;
            Ok(())
        } else {
            Err(())
    800082be:	02a103a3          	sb	a0,39(sp)
        if self.itype == InodeType::Empty {
    800082c2:	a809                	j	800082d4 <.LBB0_6+0x46>
            self.itype = itype;
    800082c4:	6542                	ld	a0,16(sp)
    800082c6:	65a2                	ld	a1,8(sp)
    800082c8:	00a59023          	sh	a0,0(a1)
    800082cc:	4501                	li	a0,0
            Ok(())
    800082ce:	02a103a3          	sb	a0,39(sp)
        if self.itype == InodeType::Empty {
    800082d2:	a009                	j	800082d4 <.LBB0_6+0x46>
        }
    }
    800082d4:	02714503          	lbu	a0,39(sp)
    800082d8:	70e2                	ld	ra,56(sp)
    800082da:	6121                	addi	sp,sp,64
    800082dc:	8082                	ret

Disassembly of section .text._ZN6kernel2fs6dinode8DirEntry3new17h74e849d4398bb7e4E:

00000000800082de <_ZN6kernel2fs6dinode8DirEntry3new17h74e849d4398bb7e4E>:
}

impl DirEntry {
    pub const fn new() -> Self {
    800082de:	7179                	addi	sp,sp,-48
    800082e0:	f406                	sd	ra,40(sp)
    800082e2:	4501                	li	a0,0
        Self {
            inum: 0,
            name: [0;DIRSIZ]
    800082e4:	02a11223          	sh	a0,36(sp)
    800082e8:	d02a                	sw	a0,32(sp)
    800082ea:	ec2a                	sd	a0,24(sp)
        Self {
    800082ec:	00a11423          	sh	a0,8(sp)
    800082f0:	00a10513          	addi	a0,sp,10
    800082f4:	082c                	addi	a1,sp,24
    800082f6:	4639                	li	a2,14
    800082f8:	0001d097          	auipc	ra,0x1d
    800082fc:	d42080e7          	jalr	-702(ra) # 8002503a <memcpy>
        }
    }
    80008300:	6522                	ld	a0,8(sp)
    80008302:	65c2                	ld	a1,16(sp)
    80008304:	70a2                	ld	ra,40(sp)
    80008306:	6145                	addi	sp,sp,48
    80008308:	8082                	ret

Disassembly of section .text._ZN66_$LT$kernel..fs..dinode..InodeType$u20$as$u20$core..fmt..Debug$GT$3fmt17hb18bbbb2274bc1adE:

000000008000830a <_ZN66_$LT$kernel..fs..dinode..InodeType$u20$as$u20$core..fmt..Debug$GT$3fmt17hb18bbbb2274bc1adE>:
#[derive(Clone, Copy, PartialEq, Eq, Debug)]
    8000830a:	7115                	addi	sp,sp,-224
    8000830c:	ed86                	sd	ra,216(sp)
    8000830e:	e42e                	sd	a1,8(sp)
    80008310:	f12a                	sd	a0,160(sp)
    80008312:	f52e                	sd	a1,168(sp)
    80008314:	f02a                	sd	a0,32(sp)
    80008316:	00055503          	lhu	a0,0(a0)
    8000831a:	e82a                	sd	a0,16(sp)
    8000831c:	6542                	ld	a0,16(sp)
    8000831e:	050e                	slli	a0,a0,0x3

0000000080008320 <.LBB2_14>:
    80008320:	0001f597          	auipc	a1,0x1f
    80008324:	00858593          	addi	a1,a1,8 # 80027328 <.LJTI2_0>
    80008328:	952e                	add	a0,a0,a1
    8000832a:	6108                	ld	a0,0(a0)
    8000832c:	8502                	jr	a0

000000008000832e <.LBB2_2>:
    8000832e:	65a2                	ld	a1,8(sp)

0000000080008330 <.LBB2_15>:
    80008330:	0001e617          	auipc	a2,0x1e
    80008334:	2bc60613          	addi	a2,a2,700 # 800265ec <.L__unnamed_16+0x44>
    80008338:	0128                	addi	a0,sp,136
    8000833a:	4691                	li	a3,4
    8000833c:	0001b097          	auipc	ra,0x1b
    80008340:	d3e080e7          	jalr	-706(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    80008344:	a075                	j	800083f0 <.LBB2_19+0x28>
	...

0000000080008348 <.LBB2_4>:
    80008348:	65a2                	ld	a1,8(sp)

000000008000834a <.LBB2_16>:
    8000834a:	0001f617          	auipc	a2,0x1f
    8000834e:	01760613          	addi	a2,a2,23 # 80027361 <.L__unnamed_3>
    80008352:	1028                	addi	a0,sp,40
    80008354:	4695                	li	a3,5
    80008356:	0001b097          	auipc	ra,0x1b
    8000835a:	d24080e7          	jalr	-732(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    8000835e:	a009                	j	80008360 <.LBB2_16+0x16>
    80008360:	1028                	addi	a0,sp,40
    80008362:	e9aa                	sd	a0,208(sp)
    80008364:	0001a097          	auipc	ra,0x1a
    80008368:	36e080e7          	jalr	878(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    8000836c:	00a10fa3          	sb	a0,31(sp)
    80008370:	a849                	j	80008402 <.LBB2_19+0x3a>

0000000080008372 <.LBB2_6>:
    80008372:	65a2                	ld	a1,8(sp)

0000000080008374 <.LBB2_17>:
    80008374:	0001f617          	auipc	a2,0x1f
    80008378:	fe460613          	addi	a2,a2,-28 # 80027358 <.L__unnamed_4>
    8000837c:	0088                	addi	a0,sp,64
    8000837e:	46a5                	li	a3,9
    80008380:	0001b097          	auipc	ra,0x1b
    80008384:	cfa080e7          	jalr	-774(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    80008388:	a009                	j	8000838a <.LBB2_17+0x16>
    8000838a:	0088                	addi	a0,sp,64
    8000838c:	e5aa                	sd	a0,200(sp)
    8000838e:	0001a097          	auipc	ra,0x1a
    80008392:	344080e7          	jalr	836(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    80008396:	00a10fa3          	sb	a0,31(sp)
    8000839a:	a0a5                	j	80008402 <.LBB2_19+0x3a>

000000008000839c <.LBB2_8>:
    8000839c:	65a2                	ld	a1,8(sp)

000000008000839e <.LBB2_18>:
    8000839e:	0001e617          	auipc	a2,0x1e
    800083a2:	23e60613          	addi	a2,a2,574 # 800265dc <.L__unnamed_16+0x34>
    800083a6:	08a8                	addi	a0,sp,88
    800083a8:	4691                	li	a3,4
    800083aa:	0001b097          	auipc	ra,0x1b
    800083ae:	cd0080e7          	jalr	-816(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    800083b2:	a009                	j	800083b4 <.LBB2_18+0x16>
    800083b4:	08a8                	addi	a0,sp,88
    800083b6:	e1aa                	sd	a0,192(sp)
    800083b8:	0001a097          	auipc	ra,0x1a
    800083bc:	31a080e7          	jalr	794(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    800083c0:	00a10fa3          	sb	a0,31(sp)
    800083c4:	a83d                	j	80008402 <.LBB2_19+0x3a>

00000000800083c6 <.LBB2_10>:
    800083c6:	65a2                	ld	a1,8(sp)

00000000800083c8 <.LBB2_19>:
    800083c8:	0001f617          	auipc	a2,0x1f
    800083cc:	f8a60613          	addi	a2,a2,-118 # 80027352 <.L__unnamed_6>
    800083d0:	1888                	addi	a0,sp,112
    800083d2:	4699                	li	a3,6
    800083d4:	0001b097          	auipc	ra,0x1b
    800083d8:	ca6080e7          	jalr	-858(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    800083dc:	a009                	j	800083de <.LBB2_19+0x16>
    800083de:	1888                	addi	a0,sp,112
    800083e0:	fd2a                	sd	a0,184(sp)
    800083e2:	0001a097          	auipc	ra,0x1a
    800083e6:	2f0080e7          	jalr	752(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    800083ea:	00a10fa3          	sb	a0,31(sp)
    800083ee:	a811                	j	80008402 <.LBB2_19+0x3a>
    800083f0:	0128                	addi	a0,sp,136
    800083f2:	f92a                	sd	a0,176(sp)
    800083f4:	0001a097          	auipc	ra,0x1a
    800083f8:	2de080e7          	jalr	734(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    800083fc:	00a10fa3          	sb	a0,31(sp)
    80008400:	a009                	j	80008402 <.LBB2_19+0x3a>
    80008402:	01f14503          	lbu	a0,31(sp)
    80008406:	60ee                	ld	ra,216(sp)
    80008408:	612d                	addi	sp,sp,224
    8000840a:	8082                	ret

Disassembly of section .text._ZN70_$LT$kernel..fs..dinode..InodeType$u20$as$u20$core..cmp..PartialEq$GT$2eq17h96b8b60db340aeeeE:

000000008000840c <_ZN70_$LT$kernel..fs..dinode..InodeType$u20$as$u20$core..cmp..PartialEq$GT$2eq17h96b8b60db340aeeeE>:
    8000840c:	1101                	addi	sp,sp,-32
    8000840e:	e42a                	sd	a0,8(sp)
    80008410:	e82e                	sd	a1,16(sp)
    80008412:	00055503          	lhu	a0,0(a0)
    80008416:	00a11e23          	sh	a0,28(sp)
    8000841a:	0005d583          	lhu	a1,0(a1)
    8000841e:	00b11f23          	sh	a1,30(sp)
    80008422:	00b51763          	bne	a0,a1,80008430 <_ZN70_$LT$kernel..fs..dinode..InodeType$u20$as$u20$core..cmp..PartialEq$GT$2eq17h96b8b60db340aeeeE+0x24>
    80008426:	a009                	j	80008428 <_ZN70_$LT$kernel..fs..dinode..InodeType$u20$as$u20$core..cmp..PartialEq$GT$2eq17h96b8b60db340aeeeE+0x1c>
    80008428:	4505                	li	a0,1
    8000842a:	00a103a3          	sb	a0,7(sp)
    8000842e:	a029                	j	80008438 <_ZN70_$LT$kernel..fs..dinode..InodeType$u20$as$u20$core..cmp..PartialEq$GT$2eq17h96b8b60db340aeeeE+0x2c>
    80008430:	4501                	li	a0,0
    80008432:	00a103a3          	sb	a0,7(sp)
    80008436:	a009                	j	80008438 <_ZN70_$LT$kernel..fs..dinode..InodeType$u20$as$u20$core..cmp..PartialEq$GT$2eq17h96b8b60db340aeeeE+0x2c>
    80008438:	00714503          	lbu	a0,7(sp)
    8000843c:	8905                	andi	a0,a0,1
    8000843e:	4581                	li	a1,0
    80008440:	00b50763          	beq	a0,a1,8000844e <_ZN70_$LT$kernel..fs..dinode..InodeType$u20$as$u20$core..cmp..PartialEq$GT$2eq17h96b8b60db340aeeeE+0x42>
    80008444:	a009                	j	80008446 <_ZN70_$LT$kernel..fs..dinode..InodeType$u20$as$u20$core..cmp..PartialEq$GT$2eq17h96b8b60db340aeeeE+0x3a>
    80008446:	4505                	li	a0,1
    80008448:	00a10323          	sb	a0,6(sp)
    8000844c:	a029                	j	80008456 <_ZN70_$LT$kernel..fs..dinode..InodeType$u20$as$u20$core..cmp..PartialEq$GT$2eq17h96b8b60db340aeeeE+0x4a>
    8000844e:	4501                	li	a0,0
    80008450:	00a10323          	sb	a0,6(sp)
    80008454:	a009                	j	80008456 <_ZN70_$LT$kernel..fs..dinode..InodeType$u20$as$u20$core..cmp..PartialEq$GT$2eq17h96b8b60db340aeeeE+0x4a>
    80008456:	00614503          	lbu	a0,6(sp)
    8000845a:	6105                	addi	sp,sp,32
    8000845c:	8082                	ret

Disassembly of section .text._ZN4core5alloc6layout10size_align17h358c0d001efe79fbE:

000000008000845e <_ZN4core5alloc6layout10size_align17h358c0d001efe79fbE>:
// could be inlined, the previous attempts to do so made rustc
// slower:
//
// * https://github.com/rust-lang/rust/pull/72189
// * https://github.com/rust-lang/rust/pull/79827
const fn size_align<T>() -> (usize, usize) {
    8000845e:	1101                	addi	sp,sp,-32
    (mem::size_of::<T>(), mem::align_of::<T>())
    80008460:	a009                	j	80008462 <_ZN4core5alloc6layout10size_align17h358c0d001efe79fbE+0x4>
    80008462:	6505                	lui	a0,0x1
    80008464:	e02a                	sd	a0,0(sp)
    80008466:	ec2a                	sd	a0,24(sp)
    80008468:	a009                	j	8000846a <_ZN4core5alloc6layout10size_align17h358c0d001efe79fbE+0xc>
    8000846a:	6582                	ld	a1,0(sp)
    8000846c:	6511                	lui	a0,0x4
    8000846e:	e42a                	sd	a0,8(sp)
    80008470:	e82e                	sd	a1,16(sp)
}
    80008472:	6105                	addi	sp,sp,32
    80008474:	8082                	ret

Disassembly of section .text._ZN4core5alloc6layout10size_align17h455ca6349ebf1183E:

0000000080008476 <_ZN4core5alloc6layout10size_align17h455ca6349ebf1183E>:
const fn size_align<T>() -> (usize, usize) {
    80008476:	1101                	addi	sp,sp,-32
    (mem::size_of::<T>(), mem::align_of::<T>())
    80008478:	a009                	j	8000847a <_ZN4core5alloc6layout10size_align17h455ca6349ebf1183E+0x4>
    8000847a:	4505                	li	a0,1
    8000847c:	e02a                	sd	a0,0(sp)
    8000847e:	ec2a                	sd	a0,24(sp)
    80008480:	a009                	j	80008482 <_ZN4core5alloc6layout10size_align17h455ca6349ebf1183E+0xc>
    80008482:	6582                	ld	a1,0(sp)
    80008484:	4505                	li	a0,1
    80008486:	e42a                	sd	a0,8(sp)
    80008488:	e82e                	sd	a1,16(sp)
}
    8000848a:	6105                	addi	sp,sp,32
    8000848c:	8082                	ret

Disassembly of section .text._ZN4core5alloc6layout10size_align17h799b388dcefa2425E:

000000008000848e <_ZN4core5alloc6layout10size_align17h799b388dcefa2425E>:
const fn size_align<T>() -> (usize, usize) {
    8000848e:	1101                	addi	sp,sp,-32
    (mem::size_of::<T>(), mem::align_of::<T>())
    80008490:	a009                	j	80008492 <_ZN4core5alloc6layout10size_align17h799b388dcefa2425E+0x4>
    80008492:	4521                	li	a0,8
    80008494:	e02a                	sd	a0,0(sp)
    80008496:	ec2a                	sd	a0,24(sp)
    80008498:	a009                	j	8000849a <_ZN4core5alloc6layout10size_align17h799b388dcefa2425E+0xc>
    8000849a:	6582                	ld	a1,0(sp)
    8000849c:	04000513          	li	a0,64
    800084a0:	e42a                	sd	a0,8(sp)
    800084a2:	e82e                	sd	a1,16(sp)
}
    800084a4:	6105                	addi	sp,sp,32
    800084a6:	8082                	ret

Disassembly of section .text._ZN4core5alloc6layout10size_align17h813b5ff13136f8feE:

00000000800084a8 <_ZN4core5alloc6layout10size_align17h813b5ff13136f8feE>:
const fn size_align<T>() -> (usize, usize) {
    800084a8:	1101                	addi	sp,sp,-32
    (mem::size_of::<T>(), mem::align_of::<T>())
    800084aa:	a009                	j	800084ac <_ZN4core5alloc6layout10size_align17h813b5ff13136f8feE+0x4>
    800084ac:	4521                	li	a0,8
    800084ae:	e02a                	sd	a0,0(sp)
    800084b0:	ec2a                	sd	a0,24(sp)
    800084b2:	a009                	j	800084b4 <_ZN4core5alloc6layout10size_align17h813b5ff13136f8feE+0xc>
    800084b4:	6582                	ld	a1,0(sp)
    800084b6:	03800513          	li	a0,56
    800084ba:	e42a                	sd	a0,8(sp)
    800084bc:	e82e                	sd	a1,16(sp)
}
    800084be:	6105                	addi	sp,sp,32
    800084c0:	8082                	ret

Disassembly of section .text._ZN4core5alloc6layout10size_align17ha6efdca072762e51E:

00000000800084c2 <_ZN4core5alloc6layout10size_align17ha6efdca072762e51E>:
const fn size_align<T>() -> (usize, usize) {
    800084c2:	1101                	addi	sp,sp,-32
    (mem::size_of::<T>(), mem::align_of::<T>())
    800084c4:	a009                	j	800084c6 <_ZN4core5alloc6layout10size_align17ha6efdca072762e51E+0x4>
    800084c6:	6505                	lui	a0,0x1
    800084c8:	e02a                	sd	a0,0(sp)
    800084ca:	ec2a                	sd	a0,24(sp)
    800084cc:	a009                	j	800084ce <_ZN4core5alloc6layout10size_align17ha6efdca072762e51E+0xc>
    800084ce:	6582                	ld	a1,0(sp)
    800084d0:	6505                	lui	a0,0x1
    800084d2:	e42a                	sd	a0,8(sp)
    800084d4:	e82e                	sd	a1,16(sp)
}
    800084d6:	6105                	addi	sp,sp,32
    800084d8:	8082                	ret

Disassembly of section .text._ZN4core5alloc6layout10size_align17hfd583a9e66514f54E:

00000000800084da <_ZN4core5alloc6layout10size_align17hfd583a9e66514f54E>:
const fn size_align<T>() -> (usize, usize) {
    800084da:	1101                	addi	sp,sp,-32
    (mem::size_of::<T>(), mem::align_of::<T>())
    800084dc:	a009                	j	800084de <_ZN4core5alloc6layout10size_align17hfd583a9e66514f54E+0x4>
    800084de:	6505                	lui	a0,0x1
    800084e0:	e02a                	sd	a0,0(sp)
    800084e2:	ec2a                	sd	a0,24(sp)
    800084e4:	a009                	j	800084e6 <_ZN4core5alloc6layout10size_align17hfd583a9e66514f54E+0xc>
    800084e6:	6582                	ld	a1,0(sp)
    800084e8:	6505                	lui	a0,0x1
    800084ea:	e42a                	sd	a0,8(sp)
    800084ec:	e82e                	sd	a1,16(sp)
}
    800084ee:	6105                	addi	sp,sp,32
    800084f0:	8082                	ret

Disassembly of section .text._ZN4core5alloc6layout6Layout13for_value_raw17h9ddd239d574f5362E:

00000000800084f2 <_ZN4core5alloc6layout6Layout13for_value_raw17h9ddd239d574f5362E>:
    ///     - otherwise, it is conservatively not allowed to call this function.
    ///
    /// [trait object]: ../../book/ch17-02-trait-objects.html
    /// [extern type]: ../../unstable-book/language-features/extern-types.html
    #[unstable(feature = "layout_for_ptr", issue = "69835")]
    pub unsafe fn for_value_raw<T: ?Sized>(t: *const T) -> Self {
    800084f2:	711d                	addi	sp,sp,-96
    800084f4:	ec86                	sd	ra,88(sp)
    800084f6:	f02a                	sd	a0,32(sp)
    800084f8:	e0aa                	sd	a0,64(sp)
        // SAFETY: we pass along the prerequisites of these functions to the caller
        let (size, align) = unsafe { (mem::size_of_val_raw(t), mem::align_of_val_raw(t)) };
    800084fa:	00015097          	auipc	ra,0x15
    800084fe:	926080e7          	jalr	-1754(ra) # 8001ce20 <_ZN4core3mem15size_of_val_raw17h1bfec9c80578f181E>
    80008502:	f42a                	sd	a0,40(sp)
    80008504:	a009                	j	80008506 <_ZN4core5alloc6layout6Layout13for_value_raw17h9ddd239d574f5362E+0x14>
    80008506:	7502                	ld	a0,32(sp)
    80008508:	00015097          	auipc	ra,0x15
    8000850c:	92c080e7          	jalr	-1748(ra) # 8001ce34 <_ZN4core3mem16align_of_val_raw17hadcb67548ac99edfE>
    80008510:	ec2a                	sd	a0,24(sp)
    80008512:	a009                	j	80008514 <_ZN4core5alloc6layout6Layout13for_value_raw17h9ddd239d574f5362E+0x22>
    80008514:	65e2                	ld	a1,24(sp)
    80008516:	7522                	ld	a0,40(sp)
    80008518:	f82a                	sd	a0,48(sp)
    8000851a:	fc2e                	sd	a1,56(sp)
    8000851c:	e4aa                	sd	a0,72(sp)
    8000851e:	e8ae                	sd	a1,80(sp)
        debug_assert!(Layout::from_size_align(size, align).is_ok());
        // SAFETY: see rationale in `new` for why this is using the unsafe variant
        unsafe { Layout::from_size_align_unchecked(size, align) }
    80008520:	00016097          	auipc	ra,0x16
    80008524:	2ca080e7          	jalr	714(ra) # 8001e7ea <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h7d187b5349095d20E>
    80008528:	e42a                	sd	a0,8(sp)
    8000852a:	e82e                	sd	a1,16(sp)
    8000852c:	a009                	j	8000852e <_ZN4core5alloc6layout6Layout13for_value_raw17h9ddd239d574f5362E+0x3c>
    }
    8000852e:	65c2                	ld	a1,16(sp)
    80008530:	6522                	ld	a0,8(sp)
    80008532:	60e6                	ld	ra,88(sp)
    80008534:	6125                	addi	sp,sp,96
    80008536:	8082                	ret

Disassembly of section .text._ZN4core5alloc6layout6Layout3new17h00440f750a953d15E:

0000000080008538 <_ZN4core5alloc6layout6Layout3new17h00440f750a953d15E>:
    pub const fn new<T>() -> Self {
    80008538:	7139                	addi	sp,sp,-64
        let (size, align) = size_align::<T>();
    8000853a:	fc06                	sd	ra,56(sp)
    8000853c:	00000097          	auipc	ra,0x0
    80008540:	f9e080e7          	jalr	-98(ra) # 800084da <_ZN4core5alloc6layout10size_align17hfd583a9e66514f54E>
    80008544:	ec2a                	sd	a0,24(sp)
    80008546:	f02e                	sd	a1,32(sp)
    80008548:	a009                	j	8000854a <_ZN4core5alloc6layout6Layout3new17h00440f750a953d15E+0x12>
    8000854a:	7582                	ld	a1,32(sp)
    8000854c:	6562                	ld	a0,24(sp)
    8000854e:	f42a                	sd	a0,40(sp)
    80008550:	f82e                	sd	a1,48(sp)
        unsafe { Layout::from_size_align_unchecked(size, align) }
    80008552:	00016097          	auipc	ra,0x16
    80008556:	298080e7          	jalr	664(ra) # 8001e7ea <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h7d187b5349095d20E>
    8000855a:	e42a                	sd	a0,8(sp)
    8000855c:	e82e                	sd	a1,16(sp)
    8000855e:	a009                	j	80008560 <_ZN4core5alloc6layout6Layout3new17h00440f750a953d15E+0x28>
    }
    80008560:	65c2                	ld	a1,16(sp)
    80008562:	6522                	ld	a0,8(sp)
    80008564:	70e2                	ld	ra,56(sp)
    80008566:	6121                	addi	sp,sp,64
    80008568:	8082                	ret

Disassembly of section .text._ZN4core5alloc6layout6Layout3new17h0cabd46b2af96281E:

000000008000856a <_ZN4core5alloc6layout6Layout3new17h0cabd46b2af96281E>:
    pub const fn new<T>() -> Self {
    8000856a:	7139                	addi	sp,sp,-64
        let (size, align) = size_align::<T>();
    8000856c:	fc06                	sd	ra,56(sp)
    8000856e:	00000097          	auipc	ra,0x0
    80008572:	ef0080e7          	jalr	-272(ra) # 8000845e <_ZN4core5alloc6layout10size_align17h358c0d001efe79fbE>
    80008576:	ec2a                	sd	a0,24(sp)
    80008578:	f02e                	sd	a1,32(sp)
    8000857a:	a009                	j	8000857c <_ZN4core5alloc6layout6Layout3new17h0cabd46b2af96281E+0x12>
    8000857c:	7582                	ld	a1,32(sp)
    8000857e:	6562                	ld	a0,24(sp)
    80008580:	f42a                	sd	a0,40(sp)
    80008582:	f82e                	sd	a1,48(sp)
        unsafe { Layout::from_size_align_unchecked(size, align) }
    80008584:	00016097          	auipc	ra,0x16
    80008588:	266080e7          	jalr	614(ra) # 8001e7ea <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h7d187b5349095d20E>
    8000858c:	e42a                	sd	a0,8(sp)
    8000858e:	e82e                	sd	a1,16(sp)
    80008590:	a009                	j	80008592 <_ZN4core5alloc6layout6Layout3new17h0cabd46b2af96281E+0x28>
    }
    80008592:	65c2                	ld	a1,16(sp)
    80008594:	6522                	ld	a0,8(sp)
    80008596:	70e2                	ld	ra,56(sp)
    80008598:	6121                	addi	sp,sp,64
    8000859a:	8082                	ret

Disassembly of section .text._ZN4core5alloc6layout6Layout3new17h2e48cf004fc4e008E:

000000008000859c <_ZN4core5alloc6layout6Layout3new17h2e48cf004fc4e008E>:
    pub const fn new<T>() -> Self {
    8000859c:	7139                	addi	sp,sp,-64
        let (size, align) = size_align::<T>();
    8000859e:	fc06                	sd	ra,56(sp)
    800085a0:	00000097          	auipc	ra,0x0
    800085a4:	ed6080e7          	jalr	-298(ra) # 80008476 <_ZN4core5alloc6layout10size_align17h455ca6349ebf1183E>
    800085a8:	ec2a                	sd	a0,24(sp)
    800085aa:	f02e                	sd	a1,32(sp)
    800085ac:	a009                	j	800085ae <_ZN4core5alloc6layout6Layout3new17h2e48cf004fc4e008E+0x12>
    800085ae:	7582                	ld	a1,32(sp)
    800085b0:	6562                	ld	a0,24(sp)
    800085b2:	f42a                	sd	a0,40(sp)
    800085b4:	f82e                	sd	a1,48(sp)
        unsafe { Layout::from_size_align_unchecked(size, align) }
    800085b6:	00016097          	auipc	ra,0x16
    800085ba:	234080e7          	jalr	564(ra) # 8001e7ea <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h7d187b5349095d20E>
    800085be:	e42a                	sd	a0,8(sp)
    800085c0:	e82e                	sd	a1,16(sp)
    800085c2:	a009                	j	800085c4 <_ZN4core5alloc6layout6Layout3new17h2e48cf004fc4e008E+0x28>
    }
    800085c4:	65c2                	ld	a1,16(sp)
    800085c6:	6522                	ld	a0,8(sp)
    800085c8:	70e2                	ld	ra,56(sp)
    800085ca:	6121                	addi	sp,sp,64
    800085cc:	8082                	ret

Disassembly of section .text._ZN4core5alloc6layout6Layout3new17h728acb0ef5b915afE:

00000000800085ce <_ZN4core5alloc6layout6Layout3new17h728acb0ef5b915afE>:
    pub const fn new<T>() -> Self {
    800085ce:	7139                	addi	sp,sp,-64
        let (size, align) = size_align::<T>();
    800085d0:	fc06                	sd	ra,56(sp)
    800085d2:	00000097          	auipc	ra,0x0
    800085d6:	ef0080e7          	jalr	-272(ra) # 800084c2 <_ZN4core5alloc6layout10size_align17ha6efdca072762e51E>
    800085da:	ec2a                	sd	a0,24(sp)
    800085dc:	f02e                	sd	a1,32(sp)
    800085de:	a009                	j	800085e0 <_ZN4core5alloc6layout6Layout3new17h728acb0ef5b915afE+0x12>
    800085e0:	7582                	ld	a1,32(sp)
    800085e2:	6562                	ld	a0,24(sp)
    800085e4:	f42a                	sd	a0,40(sp)
    800085e6:	f82e                	sd	a1,48(sp)
        unsafe { Layout::from_size_align_unchecked(size, align) }
    800085e8:	00016097          	auipc	ra,0x16
    800085ec:	202080e7          	jalr	514(ra) # 8001e7ea <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h7d187b5349095d20E>
    800085f0:	e42a                	sd	a0,8(sp)
    800085f2:	e82e                	sd	a1,16(sp)
    800085f4:	a009                	j	800085f6 <_ZN4core5alloc6layout6Layout3new17h728acb0ef5b915afE+0x28>
    }
    800085f6:	65c2                	ld	a1,16(sp)
    800085f8:	6522                	ld	a0,8(sp)
    800085fa:	70e2                	ld	ra,56(sp)
    800085fc:	6121                	addi	sp,sp,64
    800085fe:	8082                	ret

Disassembly of section .text._ZN4core5alloc6layout6Layout3new17h9329aa50601ba1ffE:

0000000080008600 <_ZN4core5alloc6layout6Layout3new17h9329aa50601ba1ffE>:
    pub const fn new<T>() -> Self {
    80008600:	7139                	addi	sp,sp,-64
        let (size, align) = size_align::<T>();
    80008602:	fc06                	sd	ra,56(sp)
    80008604:	00000097          	auipc	ra,0x0
    80008608:	ea4080e7          	jalr	-348(ra) # 800084a8 <_ZN4core5alloc6layout10size_align17h813b5ff13136f8feE>
    8000860c:	ec2a                	sd	a0,24(sp)
    8000860e:	f02e                	sd	a1,32(sp)
    80008610:	a009                	j	80008612 <_ZN4core5alloc6layout6Layout3new17h9329aa50601ba1ffE+0x12>
    80008612:	7582                	ld	a1,32(sp)
    80008614:	6562                	ld	a0,24(sp)
    80008616:	f42a                	sd	a0,40(sp)
    80008618:	f82e                	sd	a1,48(sp)
        unsafe { Layout::from_size_align_unchecked(size, align) }
    8000861a:	00016097          	auipc	ra,0x16
    8000861e:	1d0080e7          	jalr	464(ra) # 8001e7ea <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h7d187b5349095d20E>
    80008622:	e42a                	sd	a0,8(sp)
    80008624:	e82e                	sd	a1,16(sp)
    80008626:	a009                	j	80008628 <_ZN4core5alloc6layout6Layout3new17h9329aa50601ba1ffE+0x28>
    }
    80008628:	65c2                	ld	a1,16(sp)
    8000862a:	6522                	ld	a0,8(sp)
    8000862c:	70e2                	ld	ra,56(sp)
    8000862e:	6121                	addi	sp,sp,64
    80008630:	8082                	ret

Disassembly of section .text._ZN4core5alloc6layout6Layout3new17hfb4102c77959cfa1E:

0000000080008632 <_ZN4core5alloc6layout6Layout3new17hfb4102c77959cfa1E>:
    pub const fn new<T>() -> Self {
    80008632:	7139                	addi	sp,sp,-64
        let (size, align) = size_align::<T>();
    80008634:	fc06                	sd	ra,56(sp)
    80008636:	00000097          	auipc	ra,0x0
    8000863a:	e58080e7          	jalr	-424(ra) # 8000848e <_ZN4core5alloc6layout10size_align17h799b388dcefa2425E>
    8000863e:	ec2a                	sd	a0,24(sp)
    80008640:	f02e                	sd	a1,32(sp)
    80008642:	a009                	j	80008644 <_ZN4core5alloc6layout6Layout3new17hfb4102c77959cfa1E+0x12>
    80008644:	7582                	ld	a1,32(sp)
    80008646:	6562                	ld	a0,24(sp)
    80008648:	f42a                	sd	a0,40(sp)
    8000864a:	f82e                	sd	a1,48(sp)
        unsafe { Layout::from_size_align_unchecked(size, align) }
    8000864c:	00016097          	auipc	ra,0x16
    80008650:	19e080e7          	jalr	414(ra) # 8001e7ea <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h7d187b5349095d20E>
    80008654:	e42a                	sd	a0,8(sp)
    80008656:	e82e                	sd	a1,16(sp)
    80008658:	a009                	j	8000865a <_ZN4core5alloc6layout6Layout3new17hfb4102c77959cfa1E+0x28>
    }
    8000865a:	65c2                	ld	a1,16(sp)
    8000865c:	6522                	ld	a0,8(sp)
    8000865e:	70e2                	ld	ra,56(sp)
    80008660:	6121                	addi	sp,sp,64
    80008662:	8082                	ret

Disassembly of section .text._ZN4core5alloc6layout6Layout5array17h33220460c7f786e0E:

0000000080008664 <_ZN4core5alloc6layout6Layout5array17h33220460c7f786e0E>:
    /// Creates a layout describing the record for a `[T; n]`.
    ///
    /// On arithmetic overflow, returns `LayoutError`.
    #[stable(feature = "alloc_layout_manipulation", since = "1.44.0")]
    #[inline]
    pub fn array<T>(n: usize) -> Result<Self, LayoutError> {
    80008664:	7155                	addi	sp,sp,-208
    80008666:	e586                	sd	ra,200(sp)
    80008668:	ec2a                	sd	a0,24(sp)
    8000866a:	f92a                	sd	a0,176(sp)
        let (layout, offset) = Layout::new::<T>().repeat(n)?;
    8000866c:	00000097          	auipc	ra,0x0
    80008670:	f30080e7          	jalr	-208(ra) # 8000859c <_ZN4core5alloc6layout6Layout3new17h2e48cf004fc4e008E>
    80008674:	e52a                	sd	a0,136(sp)
    80008676:	e92e                	sd	a1,144(sp)
    80008678:	a009                	j	8000867a <_ZN4core5alloc6layout6Layout5array17h33220460c7f786e0E+0x16>
    8000867a:	6662                	ld	a2,24(sp)
    8000867c:	1888                	addi	a0,sp,112
    8000867e:	012c                	addi	a1,sp,136
    80008680:	00016097          	auipc	ra,0x16
    80008684:	1ba080e7          	jalr	442(ra) # 8001e83a <_ZN4core5alloc6layout6Layout6repeat17he5367bbab955aefbE>
    80008688:	a009                	j	8000868a <_ZN4core5alloc6layout6Layout5array17h33220460c7f786e0E+0x26>
    8000868a:	08a8                	addi	a0,sp,88
    8000868c:	188c                	addi	a1,sp,112
    8000868e:	00005097          	auipc	ra,0x5
    80008692:	b26080e7          	jalr	-1242(ra) # 8000d1b4 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17heda032b26dd469a1E>
    80008696:	a009                	j	80008698 <_ZN4core5alloc6layout6Layout5array17h33220460c7f786e0E+0x34>
    80008698:	7506                	ld	a0,96(sp)
    8000869a:	00153593          	seqz	a1,a0
    8000869e:	4581                	li	a1,0
    800086a0:	00b51463          	bne	a0,a1,800086a8 <_ZN4core5alloc6layout6Layout5array17h33220460c7f786e0E+0x44>
    800086a4:	a009                	j	800086a6 <_ZN4core5alloc6layout6Layout5array17h33220460c7f786e0E+0x42>
    800086a6:	a035                	j	800086d2 <_ZN4core5alloc6layout6Layout5array17h33220460c7f786e0E+0x6e>
    800086a8:	7526                	ld	a0,104(sp)
    800086aa:	f52a                	sd	a0,168(sp)
    800086ac:	7586                	ld	a1,96(sp)
    800086ae:	f12e                	sd	a1,160(sp)
    800086b0:	6666                	ld	a2,88(sp)
    800086b2:	ed32                	sd	a2,152(sp)
    800086b4:	e0b2                	sd	a2,64(sp)
    800086b6:	e4ae                	sd	a1,72(sp)
    800086b8:	e8aa                	sd	a0,80(sp)
    800086ba:	f832                	sd	a2,48(sp)
    800086bc:	fc2e                	sd	a1,56(sp)
    800086be:	e1aa                	sd	a0,192(sp)
    800086c0:	1808                	addi	a0,sp,48
        debug_assert_eq!(offset, mem::size_of::<T>());
        Ok(layout.pad_to_align())
    800086c2:	00016097          	auipc	ra,0x16
    800086c6:	fd6080e7          	jalr	-42(ra) # 8001e698 <_ZN4core5alloc6layout6Layout12pad_to_align17hf134c92d73cc7687E>
    800086ca:	e42a                	sd	a0,8(sp)
    800086cc:	e82e                	sd	a1,16(sp)
    800086ce:	a839                	j	800086ec <_ZN4core5alloc6layout6Layout5array17h33220460c7f786e0E+0x88>
        let (layout, offset) = Layout::new::<T>().repeat(n)?;
    800086d0:	0000                	unimp
    800086d2:	00000097          	auipc	ra,0x0
    800086d6:	02e080e7          	jalr	46(ra) # 80008700 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h2a9aee2c044310b7E>
    800086da:	a009                	j	800086dc <_ZN4core5alloc6layout6Layout5array17h33220460c7f786e0E+0x78>
    800086dc:	00005097          	auipc	ra,0x5
    800086e0:	940080e7          	jalr	-1728(ra) # 8000d01c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h5591b1c718d6dce1E>
    800086e4:	f02a                	sd	a0,32(sp)
    800086e6:	f42e                	sd	a1,40(sp)
    800086e8:	a009                	j	800086ea <_ZN4core5alloc6layout6Layout5array17h33220460c7f786e0E+0x86>
    }
    800086ea:	a031                	j	800086f6 <_ZN4core5alloc6layout6Layout5array17h33220460c7f786e0E+0x92>
        Ok(layout.pad_to_align())
    800086ec:	6542                	ld	a0,16(sp)
    800086ee:	65a2                	ld	a1,8(sp)
    800086f0:	f02e                	sd	a1,32(sp)
    800086f2:	f42a                	sd	a0,40(sp)
    }
    800086f4:	a009                	j	800086f6 <_ZN4core5alloc6layout6Layout5array17h33220460c7f786e0E+0x92>
    800086f6:	7502                	ld	a0,32(sp)
    800086f8:	75a2                	ld	a1,40(sp)
    800086fa:	60ae                	ld	ra,200(sp)
    800086fc:	6169                	addi	sp,sp,208
    800086fe:	8082                	ret

Disassembly of section .text._ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h2a9aee2c044310b7E:

0000000080008700 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h2a9aee2c044310b7E>:
}

// From (and thus Into) is reflexive
#[stable(feature = "rust1", since = "1.0.0")]
impl<T> From<T> for T {
    fn from(t: T) -> T {
    80008700:	1141                	addi	sp,sp,-16
        t
    }
    80008702:	0141                	addi	sp,sp,16
    80008704:	8082                	ret

Disassembly of section .text._ZN6kernel6memory7mapping16page_table_entry8PteFlags3new17h46b0ea84c5bd5a31E:

0000000080008706 <_ZN6kernel6memory7mapping16page_table_entry8PteFlags3new17h46b0ea84c5bd5a31E>:
    }
    
}

impl PteFlags {
    pub fn new(x: usize) -> Self {
    80008706:	1141                	addi	sp,sp,-16
    80008708:	e42a                	sd	a0,8(sp)
        Self{
    8000870a:	e02a                	sd	a0,0(sp)
            bits: x
        }
    }
    8000870c:	0141                	addi	sp,sp,16
    8000870e:	8082                	ret

Disassembly of section .text._ZN6kernel6memory7mapping16page_table_entry14PageTableEntry8as_usize17h85d0d27e00f735b4E:

0000000080008710 <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry8as_usize17h85d0d27e00f735b4E>:
        let addr = self.as_usize() as *mut u8;
        addr
    }

    #[inline]
    pub fn as_usize(&self) -> usize{
    80008710:	1141                	addi	sp,sp,-16
    80008712:	e42a                	sd	a0,8(sp)
        self.0
    80008714:	6108                	ld	a0,0(a0)
    }
    80008716:	0141                	addi	sp,sp,16
    80008718:	8082                	ret

Disassembly of section .text._ZN6kernel6memory7mapping16page_table_entry14PageTableEntry8is_valid17h2b3a673d14ed09c6E:

000000008000871a <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry8is_valid17h2b3a673d14ed09c6E>:

    #[inline]
    pub fn is_valid(&self) -> bool{
    8000871a:	1101                	addi	sp,sp,-32
    8000871c:	ec06                	sd	ra,24(sp)
    8000871e:	e82a                	sd	a0,16(sp)
        (self.0 & (PteFlags::V.bits())) > 0
    80008720:	6108                	ld	a0,0(a0)
    80008722:	e02a                	sd	a0,0(sp)

0000000080008724 <.LBB2_2>:
    80008724:	0001e517          	auipc	a0,0x1e
    80008728:	0b450513          	addi	a0,a0,180 # 800267d8 <.L__unnamed_6+0xa0>
    8000872c:	00000097          	auipc	ra,0x0
    80008730:	164080e7          	jalr	356(ra) # 80008890 <_ZN6kernel6memory7mapping16page_table_entry8PteFlags4bits17hec41972a30d9c1c3E>
    80008734:	e42a                	sd	a0,8(sp)
    80008736:	a009                	j	80008738 <.LBB2_2+0x14>
    80008738:	6502                	ld	a0,0(sp)
    8000873a:	65a2                	ld	a1,8(sp)
    8000873c:	8d6d                	and	a0,a0,a1
    8000873e:	00a03533          	snez	a0,a0
    }
    80008742:	60e2                	ld	ra,24(sp)
    80008744:	6105                	addi	sp,sp,32
    80008746:	8082                	ret

Disassembly of section .text._ZN6kernel6memory7mapping16page_table_entry14PageTableEntry7is_user17ha81b2d62b11ea775E:

0000000080008748 <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry7is_user17ha81b2d62b11ea775E>:

    #[inline]
    pub fn is_user(&self) -> bool {
    80008748:	1101                	addi	sp,sp,-32
    8000874a:	ec06                	sd	ra,24(sp)
    8000874c:	e82a                	sd	a0,16(sp)
        (self.0 & (PteFlags::V.bits())) > 0
    8000874e:	6108                	ld	a0,0(a0)
    80008750:	e02a                	sd	a0,0(sp)

0000000080008752 <.LBB3_2>:
    80008752:	0001e517          	auipc	a0,0x1e
    80008756:	08650513          	addi	a0,a0,134 # 800267d8 <.L__unnamed_6+0xa0>
    8000875a:	00000097          	auipc	ra,0x0
    8000875e:	136080e7          	jalr	310(ra) # 80008890 <_ZN6kernel6memory7mapping16page_table_entry8PteFlags4bits17hec41972a30d9c1c3E>
    80008762:	e42a                	sd	a0,8(sp)
    80008764:	a009                	j	80008766 <.LBB3_2+0x14>
    80008766:	6502                	ld	a0,0(sp)
    80008768:	65a2                	ld	a1,8(sp)
    8000876a:	8d6d                	and	a0,a0,a1
    8000876c:	00a03533          	snez	a0,a0
    }
    80008770:	60e2                	ld	ra,24(sp)
    80008772:	6105                	addi	sp,sp,32
    80008774:	8082                	ret

Disassembly of section .text._ZN6kernel6memory7mapping16page_table_entry14PageTableEntry7is_leaf17h30d4b7c99c6d4286E:

0000000080008776 <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry7is_leaf17h30d4b7c99c6d4286E>:
    pub fn is_execute(&self) -> bool {
        (self.0 & (PteFlags::X.bits())) > 0
    }

    #[inline]
    pub fn is_leaf(&self) -> bool {
    80008776:	7139                	addi	sp,sp,-64
    80008778:	fc06                	sd	ra,56(sp)
    8000877a:	f42a                	sd	a0,40(sp)
        let flag_bits = self.0 & (PteFlags::R | PteFlags::W | PteFlags::X).bits();
    8000877c:	6108                	ld	a0,0(a0)
    8000877e:	e82a                	sd	a0,16(sp)
    80008780:	4509                	li	a0,2
    80008782:	4591                	li	a1,4
    80008784:	00000097          	auipc	ra,0x0
    80008788:	116080e7          	jalr	278(ra) # 8000889a <_ZN93_$LT$kernel..memory..mapping..page_table_entry..PteFlags$u20$as$u20$core..ops..bit..BitOr$GT$5bitor17h95bfa721b377cbd2E>
    8000878c:	ec2a                	sd	a0,24(sp)
    8000878e:	a009                	j	80008790 <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry7is_leaf17h30d4b7c99c6d4286E+0x1a>
    80008790:	6562                	ld	a0,24(sp)
    80008792:	45a1                	li	a1,8
    80008794:	00000097          	auipc	ra,0x0
    80008798:	106080e7          	jalr	262(ra) # 8000889a <_ZN93_$LT$kernel..memory..mapping..page_table_entry..PteFlags$u20$as$u20$core..ops..bit..BitOr$GT$5bitor17h95bfa721b377cbd2E>
    8000879c:	f02a                	sd	a0,32(sp)
    8000879e:	a009                	j	800087a0 <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry7is_leaf17h30d4b7c99c6d4286E+0x2a>
    800087a0:	1008                	addi	a0,sp,32
    800087a2:	00000097          	auipc	ra,0x0
    800087a6:	0ee080e7          	jalr	238(ra) # 80008890 <_ZN6kernel6memory7mapping16page_table_entry8PteFlags4bits17hec41972a30d9c1c3E>
    800087aa:	e42a                	sd	a0,8(sp)
    800087ac:	a009                	j	800087ae <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry7is_leaf17h30d4b7c99c6d4286E+0x38>
    800087ae:	6542                	ld	a0,16(sp)
    800087b0:	65a2                	ld	a1,8(sp)
    800087b2:	8d6d                	and	a0,a0,a1
    800087b4:	f82a                	sd	a0,48(sp)
        !(flag_bits == 0)
    800087b6:	00a03533          	snez	a0,a0
    }
    800087ba:	70e2                	ld	ra,56(sp)
    800087bc:	6121                	addi	sp,sp,64
    800087be:	8082                	ret

Disassembly of section .text._ZN6kernel6memory7mapping16page_table_entry14PageTableEntry11rm_user_bit17hf6078e39c3f185baE:

00000000800087c0 <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry11rm_user_bit17hf6078e39c3f185baE>:
        let pte = self.as_usize() | (PteFlags::U.bits());
        Self(pte)
    }

    #[inline]
    pub fn rm_user_bit(&mut self) {
    800087c0:	1101                	addi	sp,sp,-32
    800087c2:	ec06                	sd	ra,24(sp)
    800087c4:	e02a                	sd	a0,0(sp)
    800087c6:	e82a                	sd	a0,16(sp)

00000000800087c8 <.LBB5_2>:
        self.0 &= !(PteFlags::U.bits());
    800087c8:	0001e517          	auipc	a0,0x1e
    800087cc:	04050513          	addi	a0,a0,64 # 80026808 <.L__unnamed_6+0xd0>
    800087d0:	00000097          	auipc	ra,0x0
    800087d4:	0c0080e7          	jalr	192(ra) # 80008890 <_ZN6kernel6memory7mapping16page_table_entry8PteFlags4bits17hec41972a30d9c1c3E>
    800087d8:	e42a                	sd	a0,8(sp)
    800087da:	a009                	j	800087dc <.LBB5_2+0x14>
    800087dc:	6582                	ld	a1,0(sp)
    800087de:	6522                	ld	a0,8(sp)
    800087e0:	fff54613          	not	a2,a0
    800087e4:	6188                	ld	a0,0(a1)
    800087e6:	8d71                	and	a0,a0,a2
    800087e8:	e188                	sd	a0,0(a1)
    }
    800087ea:	60e2                	ld	ra,24(sp)
    800087ec:	6105                	addi	sp,sp,32
    800087ee:	8082                	ret

Disassembly of section .text._ZN6kernel6memory7mapping16page_table_entry14PageTableEntry12as_pagetable17h89cf44fefbbd4b4eE:

00000000800087f0 <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry12as_pagetable17h89cf44fefbbd4b4eE>:

    // implement PTE2PA
    #[inline]
    pub fn as_pagetable(&self) -> *mut PageTable{
    800087f0:	1101                	addi	sp,sp,-32
    800087f2:	e82a                	sd	a0,16(sp)
        let ret = ((self.0 >> 10) << 12) as *mut PageTable;
    800087f4:	6108                	ld	a0,0(a0)
    800087f6:	8129                	srli	a0,a0,0xa
    800087f8:	e42a                	sd	a0,8(sp)
    800087fa:	a009                	j	800087fc <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry12as_pagetable17h89cf44fefbbd4b4eE+0xc>
    800087fc:	6522                	ld	a0,8(sp)
    800087fe:	0532                	slli	a0,a0,0xc
    80008800:	e02a                	sd	a0,0(sp)
    80008802:	a009                	j	80008804 <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry12as_pagetable17h89cf44fefbbd4b4eE+0x14>
    80008804:	6502                	ld	a0,0(sp)
    80008806:	ec2a                	sd	a0,24(sp)
        ret
    }
    80008808:	6105                	addi	sp,sp,32
    8000880a:	8082                	ret

Disassembly of section .text._ZN6kernel6memory7mapping16page_table_entry14PageTableEntry8as_flags17hf18e3bbee6201d61E:

000000008000880c <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry8as_flags17hf18e3bbee6201d61E>:
        Self((addr >> 12) << 10)
    }

    // implement PTE_FLAGES
    #[inline]
    pub fn as_flags(&self) -> usize {
    8000880c:	1101                	addi	sp,sp,-32
    8000880e:	ec06                	sd	ra,24(sp)
    80008810:	e82a                	sd	a0,16(sp)
        self.as_usize() & 0x3FF
    80008812:	00000097          	auipc	ra,0x0
    80008816:	efe080e7          	jalr	-258(ra) # 80008710 <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry8as_usize17h85d0d27e00f735b4E>
    8000881a:	e42a                	sd	a0,8(sp)
    8000881c:	a009                	j	8000881e <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry8as_flags17hf18e3bbee6201d61E+0x12>
    8000881e:	6522                	ld	a0,8(sp)
    80008820:	3ff57513          	andi	a0,a0,1023
    }
    80008824:	60e2                	ld	ra,24(sp)
    80008826:	6105                	addi	sp,sp,32
    80008828:	8082                	ret

Disassembly of section .text._ZN6kernel6memory7mapping16page_table_entry14PageTableEntry10write_perm17h2feb85df16db2682E:

000000008000882a <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry10write_perm17h2feb85df16db2682E>:
    pub fn write_zero(&mut self){
        self.0 = 0;
    }

    #[inline]
    pub fn write_perm(&mut self, pa:PhysicalAddress, perm: PteFlags){
    8000882a:	711d                	addi	sp,sp,-96
    8000882c:	ec86                	sd	ra,88(sp)
    8000882e:	f032                	sd	a2,32(sp)
    80008830:	f42a                	sd	a0,40(sp)
    80008832:	fc2e                	sd	a1,56(sp)
    80008834:	e4aa                	sd	a0,72(sp)
    80008836:	e8b2                	sd	a2,80(sp)
    80008838:	1828                	addi	a0,sp,56
        self.0 = ((pa.as_usize() >> 12) << 10) | (perm | PteFlags::V).bits()
    8000883a:	00009097          	auipc	ra,0x9
    8000883e:	ccc080e7          	jalr	-820(ra) # 80011506 <_ZN90_$LT$kernel..memory..address..PhysicalAddress$u20$as$u20$kernel..memory..address..Addr$GT$8as_usize17hea2eecdb80a1a2b2E>
    80008842:	f82a                	sd	a0,48(sp)
    80008844:	a009                	j	80008846 <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry10write_perm17h2feb85df16db2682E+0x1c>
    80008846:	7542                	ld	a0,48(sp)
    80008848:	8131                	srli	a0,a0,0xc
    8000884a:	ec2a                	sd	a0,24(sp)
    8000884c:	a009                	j	8000884e <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry10write_perm17h2feb85df16db2682E+0x24>
    8000884e:	6562                	ld	a0,24(sp)
    80008850:	052a                	slli	a0,a0,0xa
    80008852:	e82a                	sd	a0,16(sp)
    80008854:	a009                	j	80008856 <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry10write_perm17h2feb85df16db2682E+0x2c>
    80008856:	7502                	ld	a0,32(sp)
    80008858:	4585                	li	a1,1
    8000885a:	00000097          	auipc	ra,0x0
    8000885e:	040080e7          	jalr	64(ra) # 8000889a <_ZN93_$LT$kernel..memory..mapping..page_table_entry..PteFlags$u20$as$u20$core..ops..bit..BitOr$GT$5bitor17h95bfa721b377cbd2E>
    80008862:	e0aa                	sd	a0,64(sp)
    80008864:	a009                	j	80008866 <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry10write_perm17h2feb85df16db2682E+0x3c>
    80008866:	0088                	addi	a0,sp,64
    80008868:	00000097          	auipc	ra,0x0
    8000886c:	028080e7          	jalr	40(ra) # 80008890 <_ZN6kernel6memory7mapping16page_table_entry8PteFlags4bits17hec41972a30d9c1c3E>
    80008870:	e42a                	sd	a0,8(sp)
    80008872:	a009                	j	80008874 <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry10write_perm17h2feb85df16db2682E+0x4a>
    80008874:	75a2                	ld	a1,40(sp)
    80008876:	6542                	ld	a0,16(sp)
    80008878:	6622                	ld	a2,8(sp)
    8000887a:	8d51                	or	a0,a0,a2
    8000887c:	e188                	sd	a0,0(a1)
    }
    8000887e:	60e6                	ld	ra,88(sp)
    80008880:	6125                	addi	sp,sp,96
    80008882:	8082                	ret

Disassembly of section .text._ZN6kernel6memory7mapping16page_table_entry14PageTableEntry5write17h80740d4aa6720343E:

0000000080008884 <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry5write17h80740d4aa6720343E>:

    #[inline]
    pub fn write(&mut self, addr: usize) {
    80008884:	1141                	addi	sp,sp,-16
    80008886:	e02a                	sd	a0,0(sp)
    80008888:	e42e                	sd	a1,8(sp)
        self.0 = addr
    8000888a:	e10c                	sd	a1,0(a0)
    }
    8000888c:	0141                	addi	sp,sp,16
    8000888e:	8082                	ret

Disassembly of section .text._ZN6kernel6memory7mapping16page_table_entry8PteFlags4bits17hec41972a30d9c1c3E:

0000000080008890 <_ZN6kernel6memory7mapping16page_table_entry8PteFlags4bits17hec41972a30d9c1c3E>:
                }
            }

            /// Returns the raw value of the flags currently stored.
            #[inline]
            pub const fn bits(&self) -> $T {
    80008890:	1141                	addi	sp,sp,-16
    80008892:	e42a                	sd	a0,8(sp)
                self.bits
    80008894:	6108                	ld	a0,0(a0)
            }
    80008896:	0141                	addi	sp,sp,16
    80008898:	8082                	ret

Disassembly of section .text._ZN93_$LT$kernel..memory..mapping..page_table_entry..PteFlags$u20$as$u20$core..ops..bit..BitOr$GT$5bitor17h95bfa721b377cbd2E:

000000008000889a <_ZN93_$LT$kernel..memory..mapping..page_table_entry..PteFlags$u20$as$u20$core..ops..bit..BitOr$GT$5bitor17h95bfa721b377cbd2E>:
        impl $crate::_core::ops::BitOr for $BitFlags {
            type Output = Self;

            /// Returns the union of the two sets of flags.
            #[inline]
            fn bitor(self, other: $BitFlags) -> Self {
    8000889a:	1101                	addi	sp,sp,-32
    8000889c:	e82a                	sd	a0,16(sp)
    8000889e:	ec2e                	sd	a1,24(sp)
                Self { bits: self.bits | other.bits }
    800088a0:	8d4d                	or	a0,a0,a1
    800088a2:	e42a                	sd	a0,8(sp)
            }
    800088a4:	6105                	addi	sp,sp,32
    800088a6:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$11write_bytes17h89eca677f2a46e73E:

00000000800088a8 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$11write_bytes17h89eca677f2a46e73E>:
    /// See [`ptr::write_bytes`] for safety concerns and examples.
    ///
    /// [`ptr::write_bytes`]: crate::ptr::write_bytes()
    #[stable(feature = "pointer_methods", since = "1.26.0")]
    #[inline]
    pub unsafe fn write_bytes(self, val: u8, count: usize)
    800088a8:	1101                	addi	sp,sp,-32
    800088aa:	ec06                	sd	ra,24(sp)
    800088ac:	e02a                	sd	a0,0(sp)
    800088ae:	00b107a3          	sb	a1,15(sp)
    800088b2:	e832                	sd	a2,16(sp)
    where
        T: Sized,
    {
        // SAFETY: the caller must uphold the safety contract for `write_bytes`.
        unsafe { write_bytes(self, val, count) }
    800088b4:	00019097          	auipc	ra,0x19
    800088b8:	102080e7          	jalr	258(ra) # 800219b6 <_ZN4core10intrinsics11write_bytes17hfabd30e5bfcb1b55E>
    800088bc:	a009                	j	800088be <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$11write_bytes17h89eca677f2a46e73E+0x16>
    }
    800088be:	60e2                	ld	ra,24(sp)
    800088c0:	6105                	addi	sp,sp,32
    800088c2:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$12wrapping_add17hef81cac2ef53321bE:

00000000800088c4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$12wrapping_add17hef81cac2ef53321bE>:
    pub const fn wrapping_add(self, count: usize) -> Self
    800088c4:	1101                	addi	sp,sp,-32
    800088c6:	ec06                	sd	ra,24(sp)
    800088c8:	e42a                	sd	a0,8(sp)
    800088ca:	e82e                	sd	a1,16(sp)
        self.wrapping_offset(count as isize)
    800088cc:	00000097          	auipc	ra,0x0
    800088d0:	048080e7          	jalr	72(ra) # 80008914 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$15wrapping_offset17h01aa229f802838f9E>
    800088d4:	e02a                	sd	a0,0(sp)
    800088d6:	a009                	j	800088d8 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$12wrapping_add17hef81cac2ef53321bE+0x14>
    }
    800088d8:	6502                	ld	a0,0(sp)
    800088da:	60e2                	ld	ra,24(sp)
    800088dc:	6105                	addi	sp,sp,32
    800088de:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$13read_volatile17h74b3a7ca48b9b2b5E:

00000000800088e0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$13read_volatile17h74b3a7ca48b9b2b5E>:
    pub unsafe fn read_volatile(self) -> T
    800088e0:	1101                	addi	sp,sp,-32
    800088e2:	ec06                	sd	ra,24(sp)
    800088e4:	e82a                	sd	a0,16(sp)
        unsafe { read_volatile(self) }
    800088e6:	00010097          	auipc	ra,0x10
    800088ea:	ad6080e7          	jalr	-1322(ra) # 800183bc <_ZN4core3ptr13read_volatile17h48a61fef837248f4E>
    800088ee:	e42a                	sd	a0,8(sp)
    800088f0:	a009                	j	800088f2 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$13read_volatile17h74b3a7ca48b9b2b5E+0x12>
    }
    800088f2:	6522                	ld	a0,8(sp)
    800088f4:	60e2                	ld	ra,24(sp)
    800088f6:	6105                	addi	sp,sp,32
    800088f8:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$14write_volatile17h3132c1bed6ef07b7E:

00000000800088fa <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$14write_volatile17h3132c1bed6ef07b7E>:
    /// See [`ptr::write_volatile`] for safety concerns and examples.
    ///
    /// [`ptr::write_volatile`]: crate::ptr::write_volatile()
    #[stable(feature = "pointer_methods", since = "1.26.0")]
    #[inline]
    pub unsafe fn write_volatile(self, val: T)
    800088fa:	1101                	addi	sp,sp,-32
    800088fc:	ec06                	sd	ra,24(sp)
    800088fe:	e42a                	sd	a0,8(sp)
    80008900:	00b10ba3          	sb	a1,23(sp)
    where
        T: Sized,
    {
        // SAFETY: the caller must uphold the safety contract for `write_volatile`.
        unsafe { write_volatile(self, val) }
    80008904:	00010097          	auipc	ra,0x10
    80008908:	afc080e7          	jalr	-1284(ra) # 80018400 <_ZN4core3ptr14write_volatile17ha922d8ced3e01de5E>
    8000890c:	a009                	j	8000890e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$14write_volatile17h3132c1bed6ef07b7E+0x14>
    }
    8000890e:	60e2                	ld	ra,24(sp)
    80008910:	6105                	addi	sp,sp,32
    80008912:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$15wrapping_offset17h01aa229f802838f9E:

0000000080008914 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$15wrapping_offset17h01aa229f802838f9E>:
    pub const fn wrapping_offset(self, count: isize) -> *mut T
    80008914:	1101                	addi	sp,sp,-32
    80008916:	e42a                	sd	a0,8(sp)
    80008918:	e82e                	sd	a1,16(sp)
        unsafe { intrinsics::arith_offset(self, count) as *mut T }
    8000891a:	952e                	add	a0,a0,a1
    8000891c:	e02a                	sd	a0,0(sp)
    8000891e:	ec2a                	sd	a0,24(sp)
    80008920:	a009                	j	80008922 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$15wrapping_offset17h01aa229f802838f9E+0xe>
    }
    80008922:	6502                	ld	a0,0(sp)
    80008924:	6105                	addi	sp,sp,32
    80008926:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1fdb3e6f0b8b1c65E:

0000000080008928 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1fdb3e6f0b8b1c65E>:
    pub const unsafe fn add(self, count: usize) -> Self
    80008928:	1101                	addi	sp,sp,-32
    8000892a:	ec06                	sd	ra,24(sp)
    8000892c:	e42a                	sd	a0,8(sp)
    8000892e:	e82e                	sd	a1,16(sp)
        unsafe { self.offset(count as isize) }
    80008930:	00000097          	auipc	ra,0x0
    80008934:	014080e7          	jalr	20(ra) # 80008944 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h07753d2a365b8ea9E>
    80008938:	e02a                	sd	a0,0(sp)
    8000893a:	a009                	j	8000893c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1fdb3e6f0b8b1c65E+0x14>
    }
    8000893c:	6502                	ld	a0,0(sp)
    8000893e:	60e2                	ld	ra,24(sp)
    80008940:	6105                	addi	sp,sp,32
    80008942:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h07753d2a365b8ea9E:

0000000080008944 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h07753d2a365b8ea9E>:
    pub const unsafe fn offset(self, count: isize) -> *mut T
    80008944:	1101                	addi	sp,sp,-32
    80008946:	e42a                	sd	a0,8(sp)
    80008948:	e82e                	sd	a1,16(sp)
        unsafe { intrinsics::offset(self, count) as *mut T }
    8000894a:	952e                	add	a0,a0,a1
    8000894c:	e02a                	sd	a0,0(sp)
    8000894e:	ec2a                	sd	a0,24(sp)
    80008950:	a009                	j	80008952 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h07753d2a365b8ea9E+0xe>
    }
    80008952:	6502                	ld	a0,0(sp)
    80008954:	6105                	addi	sp,sp,32
    80008956:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h9889ec684d0da599E:

0000000080008958 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h9889ec684d0da599E>:
    pub const unsafe fn offset(self, count: isize) -> *mut T
    80008958:	1101                	addi	sp,sp,-32
    8000895a:	e42a                	sd	a0,8(sp)
    8000895c:	e82e                	sd	a1,16(sp)
        unsafe { intrinsics::offset(self, count) as *mut T }
    8000895e:	058a                	slli	a1,a1,0x2
    80008960:	952e                	add	a0,a0,a1
    80008962:	e02a                	sd	a0,0(sp)
    80008964:	ec2a                	sd	a0,24(sp)
    80008966:	a009                	j	80008968 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h9889ec684d0da599E+0x10>
    }
    80008968:	6502                	ld	a0,0(sp)
    8000896a:	6105                	addi	sp,sp,32
    8000896c:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hc49b20e03dc897f6E:

000000008000896e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hc49b20e03dc897f6E>:
    pub const fn is_null(self) -> bool {
    8000896e:	1101                	addi	sp,sp,-32
    80008970:	ec06                	sd	ra,24(sp)
    80008972:	e42a                	sd	a0,8(sp)
    80008974:	e82a                	sd	a0,16(sp)
        (self as *mut u8).guaranteed_eq(null_mut())
    80008976:	a009                	j	80008978 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hc49b20e03dc897f6E+0xa>
    80008978:	6522                	ld	a0,8(sp)
    8000897a:	4581                	li	a1,0
    8000897c:	00019097          	auipc	ra,0x19
    80008980:	546080e7          	jalr	1350(ra) # 80021ec2 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$13guaranteed_eq17h32ea8c99c0b8220dE>
    80008984:	e02a                	sd	a0,0(sp)
    80008986:	a009                	j	80008988 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hc49b20e03dc897f6E+0x1a>
    }
    80008988:	6502                	ld	a0,0(sp)
    8000898a:	60e2                	ld	ra,24(sp)
    8000898c:	6105                	addi	sp,sp,32
    8000898e:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr41_$LT$impl$u20$$BP$mut$u20$$u5b$T$u5d$$GT$3len17hf44174276422642dE:

0000000080008990 <_ZN4core3ptr7mut_ptr41_$LT$impl$u20$$BP$mut$u20$$u5b$T$u5d$$GT$3len17hf44174276422642dE>:
    /// assert_eq!(slice.len(), 3);
    /// ```
    #[inline]
    #[unstable(feature = "slice_ptr_len", issue = "71146")]
    #[rustc_const_unstable(feature = "const_slice_ptr_len", issue = "71146")]
    pub const fn len(self) -> usize {
    80008990:	1101                	addi	sp,sp,-32
    80008992:	ec06                	sd	ra,24(sp)
    80008994:	e42a                	sd	a0,8(sp)
    80008996:	e82e                	sd	a1,16(sp)
            // SAFETY: this is safe because `*const [T]` and `FatPtr<T>` have the same layout.
            // Only `std` can make this guarantee.
            unsafe { Repr { rust_mut: self }.raw }.len
        }
        #[cfg(not(bootstrap))]
        metadata(self)
    80008998:	00012097          	auipc	ra,0x12
    8000899c:	590080e7          	jalr	1424(ra) # 8001af28 <_ZN4core3ptr8metadata8metadata17h8c3e19bdf44a2913E>
    800089a0:	e02a                	sd	a0,0(sp)
    800089a2:	a009                	j	800089a4 <_ZN4core3ptr7mut_ptr41_$LT$impl$u20$$BP$mut$u20$$u5b$T$u5d$$GT$3len17hf44174276422642dE+0x14>
    }
    800089a4:	6502                	ld	a0,0(sp)
    800089a6:	60e2                	ld	ra,24(sp)
    800089a8:	6105                	addi	sp,sp,32
    800089aa:	8082                	ret

Disassembly of section .text._ZN4core3str11validations11unwrap_or_017haab6baa99207da23E:

00000000800089ac <_ZN4core3str11validations11unwrap_or_017haab6baa99207da23E>:
fn unwrap_or_0(opt: Option<&u8>) -> u8 {
    800089ac:	1141                	addi	sp,sp,-16
    800089ae:	e02a                	sd	a0,0(sp)
        Some(&byte) => byte,
    800089b0:	00a035b3          	snez	a1,a0
    800089b4:	4581                	li	a1,0
    800089b6:	00b50463          	beq	a0,a1,800089be <_ZN4core3str11validations11unwrap_or_017haab6baa99207da23E+0x12>
    800089ba:	a009                	j	800089bc <_ZN4core3str11validations11unwrap_or_017haab6baa99207da23E+0x10>
    800089bc:	a031                	j	800089c8 <_ZN4core3str11validations11unwrap_or_017haab6baa99207da23E+0x1c>
    800089be:	4501                	li	a0,0
        None => 0,
    800089c0:	00a10723          	sb	a0,14(sp)
    match opt {
    800089c4:	a811                	j	800089d8 <_ZN4core3str11validations11unwrap_or_017haab6baa99207da23E+0x2c>
    800089c6:	0000                	unimp
        Some(&byte) => byte,
    800089c8:	6502                	ld	a0,0(sp)
    800089ca:	00050503          	lb	a0,0(a0)
    800089ce:	00a107a3          	sb	a0,15(sp)
    800089d2:	00a10723          	sb	a0,14(sp)
    match opt {
    800089d6:	a009                	j	800089d8 <_ZN4core3str11validations11unwrap_or_017haab6baa99207da23E+0x2c>
}
    800089d8:	00e10503          	lb	a0,14(sp)
    800089dc:	0141                	addi	sp,sp,16
    800089de:	8082                	ret

Disassembly of section .text._ZN4core3str11validations15utf8_first_byte17h336ce196ba99428fE:

00000000800089e0 <_ZN4core3str11validations15utf8_first_byte17h336ce196ba99428fE>:
fn utf8_first_byte(byte: u8, width: u32) -> u32 {
    800089e0:	1141                	addi	sp,sp,-16
    800089e2:	00a105a3          	sb	a0,11(sp)
    800089e6:	c62e                	sw	a1,12(sp)
    (byte & (0x7F >> width)) as u32
    800089e8:	0075f613          	andi	a2,a1,7
    800089ec:	07f00593          	li	a1,127
    800089f0:	00c5d5b3          	srl	a1,a1,a2
    800089f4:	8d6d                	and	a0,a0,a1
}
    800089f6:	0141                	addi	sp,sp,16
    800089f8:	8082                	ret

Disassembly of section .text._ZN4core3str11validations18utf8_acc_cont_byte17h8689eb325a5b266aE:

00000000800089fa <_ZN4core3str11validations18utf8_acc_cont_byte17h8689eb325a5b266aE>:
fn utf8_acc_cont_byte(ch: u32, byte: u8) -> u32 {
    800089fa:	1141                	addi	sp,sp,-16
    800089fc:	c42a                	sw	a0,8(sp)
    800089fe:	00b107a3          	sb	a1,15(sp)
    (ch << 6) | (byte & CONT_MASK) as u32
    80008a02:	051a                	slli	a0,a0,0x6
    80008a04:	03f5f593          	andi	a1,a1,63
    80008a08:	8d4d                	or	a0,a0,a1
}
    80008a0a:	0141                	addi	sp,sp,16
    80008a0c:	8082                	ret

Disassembly of section .text._ZN5alloc5alloc8box_free17h9496fa4d23b2ebc8E:

0000000080008a0e <_ZN5alloc5alloc8box_free17h9496fa4d23b2ebc8E>:
// This signature has to be the same as `Box`, otherwise an ICE will happen.
// When an additional parameter to `Box` is added (like `A: Allocator`), this has to be added here as
// well.
// For example if `Box` is changed to  `struct Box<T: ?Sized, A: Allocator>(Unique<T>, A)`,
// this function has to be changed to `fn box_free<T: ?Sized, A: Allocator>(Unique<T>, A)` as well.
pub(crate) unsafe fn box_free<T: ?Sized, A: Allocator>(ptr: Unique<T>, alloc: A) {
    80008a0e:	7119                	addi	sp,sp,-128
    80008a10:	fc86                	sd	ra,120(sp)
    80008a12:	fc2a                	sd	a0,56(sp)
    80008a14:	1828                	addi	a0,sp,56
    unsafe {
        let size = size_of_val(ptr.as_ref());
    80008a16:	00003097          	auipc	ra,0x3
    80008a1a:	194080e7          	jalr	404(ra) # 8000bbaa <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ref17hf6739c76b33ed63aE>
    80008a1e:	a009                	j	80008a20 <_ZN5alloc5alloc8box_free17h9496fa4d23b2ebc8E+0x12>
    80008a20:	04000513          	li	a0,64
    80008a24:	f82a                	sd	a0,48(sp)
    80008a26:	e4aa                	sd	a0,72(sp)
    80008a28:	e8aa                	sd	a0,80(sp)
    80008a2a:	a009                	j	80008a2c <_ZN5alloc5alloc8box_free17h9496fa4d23b2ebc8E+0x1e>
    80008a2c:	1828                	addi	a0,sp,56
        let align = min_align_of_val(ptr.as_ref());
    80008a2e:	00003097          	auipc	ra,0x3
    80008a32:	17c080e7          	jalr	380(ra) # 8000bbaa <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ref17hf6739c76b33ed63aE>
    80008a36:	a009                	j	80008a38 <_ZN5alloc5alloc8box_free17h9496fa4d23b2ebc8E+0x2a>
    80008a38:	4521                	li	a0,8
    80008a3a:	f42a                	sd	a0,40(sp)
    80008a3c:	ecaa                	sd	a0,88(sp)
    80008a3e:	f0aa                	sd	a0,96(sp)
    80008a40:	a009                	j	80008a42 <_ZN5alloc5alloc8box_free17h9496fa4d23b2ebc8E+0x34>
        let layout = Layout::from_size_align_unchecked(size, align);
    80008a42:	75a2                	ld	a1,40(sp)
    80008a44:	7542                	ld	a0,48(sp)
    80008a46:	00016097          	auipc	ra,0x16
    80008a4a:	da4080e7          	jalr	-604(ra) # 8001e7ea <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h7d187b5349095d20E>
    80008a4e:	862a                	mv	a2,a0
    80008a50:	ec32                	sd	a2,24(sp)
    80008a52:	862e                	mv	a2,a1
    80008a54:	f032                	sd	a2,32(sp)
    80008a56:	f4aa                	sd	a0,104(sp)
    80008a58:	f8ae                	sd	a1,112(sp)
    80008a5a:	a009                	j	80008a5c <_ZN5alloc5alloc8box_free17h9496fa4d23b2ebc8E+0x4e>
        alloc.deallocate(ptr.cast().into(), layout)
    80008a5c:	7562                	ld	a0,56(sp)
    80008a5e:	00003097          	auipc	ra,0x3
    80008a62:	0a8080e7          	jalr	168(ra) # 8000bb06 <_ZN4core3ptr6unique15Unique$LT$T$GT$4cast17h6eaa84e8f5e764c2E>
    80008a66:	e82a                	sd	a0,16(sp)
    80008a68:	a009                	j	80008a6a <_ZN5alloc5alloc8box_free17h9496fa4d23b2ebc8E+0x5c>
    80008a6a:	6542                	ld	a0,16(sp)
    80008a6c:	00003097          	auipc	ra,0x3
    80008a70:	17c080e7          	jalr	380(ra) # 8000bbe8 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h6726b37a43d030b4E>
    80008a74:	e42a                	sd	a0,8(sp)
    80008a76:	a009                	j	80008a78 <_ZN5alloc5alloc8box_free17h9496fa4d23b2ebc8E+0x6a>
    80008a78:	7682                	ld	a3,32(sp)
    80008a7a:	6662                	ld	a2,24(sp)
    80008a7c:	65a2                	ld	a1,8(sp)
    80008a7e:	0088                	addi	a0,sp,64
    80008a80:	00003097          	auipc	ra,0x3
    80008a84:	750080e7          	jalr	1872(ra) # 8000c1d0 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17hd299418f64a2b74eE>
    80008a88:	a009                	j	80008a8a <_ZN5alloc5alloc8box_free17h9496fa4d23b2ebc8E+0x7c>
    }
}
    80008a8a:	a009                	j	80008a8c <_ZN5alloc5alloc8box_free17h9496fa4d23b2ebc8E+0x7e>
    80008a8c:	70e6                	ld	ra,120(sp)
    80008a8e:	6109                	addi	sp,sp,128
    80008a90:	8082                	ret

Disassembly of section .text._ZN5alloc5alloc8box_free17hc9fdd8b40dd668b4E:

0000000080008a92 <_ZN5alloc5alloc8box_free17hc9fdd8b40dd668b4E>:
pub(crate) unsafe fn box_free<T: ?Sized, A: Allocator>(ptr: Unique<T>, alloc: A) {
    80008a92:	7119                	addi	sp,sp,-128
    80008a94:	fc86                	sd	ra,120(sp)
    80008a96:	fc2a                	sd	a0,56(sp)
    80008a98:	1828                	addi	a0,sp,56
        let size = size_of_val(ptr.as_ref());
    80008a9a:	00003097          	auipc	ra,0x3
    80008a9e:	0f4080e7          	jalr	244(ra) # 8000bb8e <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ref17hc8563a91a04f7babE>
    80008aa2:	a009                	j	80008aa4 <_ZN5alloc5alloc8box_free17hc9fdd8b40dd668b4E+0x12>
    80008aa4:	03800513          	li	a0,56
    80008aa8:	f82a                	sd	a0,48(sp)
    80008aaa:	e4aa                	sd	a0,72(sp)
    80008aac:	e8aa                	sd	a0,80(sp)
    80008aae:	a009                	j	80008ab0 <_ZN5alloc5alloc8box_free17hc9fdd8b40dd668b4E+0x1e>
    80008ab0:	1828                	addi	a0,sp,56
        let align = min_align_of_val(ptr.as_ref());
    80008ab2:	00003097          	auipc	ra,0x3
    80008ab6:	0dc080e7          	jalr	220(ra) # 8000bb8e <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ref17hc8563a91a04f7babE>
    80008aba:	a009                	j	80008abc <_ZN5alloc5alloc8box_free17hc9fdd8b40dd668b4E+0x2a>
    80008abc:	4521                	li	a0,8
    80008abe:	f42a                	sd	a0,40(sp)
    80008ac0:	ecaa                	sd	a0,88(sp)
    80008ac2:	f0aa                	sd	a0,96(sp)
    80008ac4:	a009                	j	80008ac6 <_ZN5alloc5alloc8box_free17hc9fdd8b40dd668b4E+0x34>
        let layout = Layout::from_size_align_unchecked(size, align);
    80008ac6:	75a2                	ld	a1,40(sp)
    80008ac8:	7542                	ld	a0,48(sp)
    80008aca:	00016097          	auipc	ra,0x16
    80008ace:	d20080e7          	jalr	-736(ra) # 8001e7ea <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h7d187b5349095d20E>
    80008ad2:	862a                	mv	a2,a0
    80008ad4:	ec32                	sd	a2,24(sp)
    80008ad6:	862e                	mv	a2,a1
    80008ad8:	f032                	sd	a2,32(sp)
    80008ada:	f4aa                	sd	a0,104(sp)
    80008adc:	f8ae                	sd	a1,112(sp)
    80008ade:	a009                	j	80008ae0 <_ZN5alloc5alloc8box_free17hc9fdd8b40dd668b4E+0x4e>
        alloc.deallocate(ptr.cast().into(), layout)
    80008ae0:	7562                	ld	a0,56(sp)
    80008ae2:	00003097          	auipc	ra,0x3
    80008ae6:	fd4080e7          	jalr	-44(ra) # 8000bab6 <_ZN4core3ptr6unique15Unique$LT$T$GT$4cast17h0df13c1b672cf8a2E>
    80008aea:	e82a                	sd	a0,16(sp)
    80008aec:	a009                	j	80008aee <_ZN5alloc5alloc8box_free17hc9fdd8b40dd668b4E+0x5c>
    80008aee:	6542                	ld	a0,16(sp)
    80008af0:	00003097          	auipc	ra,0x3
    80008af4:	0f8080e7          	jalr	248(ra) # 8000bbe8 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h6726b37a43d030b4E>
    80008af8:	e42a                	sd	a0,8(sp)
    80008afa:	a009                	j	80008afc <_ZN5alloc5alloc8box_free17hc9fdd8b40dd668b4E+0x6a>
    80008afc:	7682                	ld	a3,32(sp)
    80008afe:	6662                	ld	a2,24(sp)
    80008b00:	65a2                	ld	a1,8(sp)
    80008b02:	0088                	addi	a0,sp,64
    80008b04:	00003097          	auipc	ra,0x3
    80008b08:	6cc080e7          	jalr	1740(ra) # 8000c1d0 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17hd299418f64a2b74eE>
    80008b0c:	a009                	j	80008b0e <_ZN5alloc5alloc8box_free17hc9fdd8b40dd668b4E+0x7c>
}
    80008b0e:	a009                	j	80008b10 <_ZN5alloc5alloc8box_free17hc9fdd8b40dd668b4E+0x7e>
    80008b10:	70e6                	ld	ra,120(sp)
    80008b12:	6109                	addi	sp,sp,128
    80008b14:	8082                	ret

Disassembly of section .text._ZN4core5clone5Clone10clone_from17h4153b3cb0b8f3e29E:

0000000080008b16 <_ZN4core5clone5Clone10clone_from17h4153b3cb0b8f3e29E>:
    /// `a.clone_from(&b)` is equivalent to `a = b.clone()` in functionality,
    /// but can be overridden to reuse the resources of `a` to avoid unnecessary
    /// allocations.
    #[inline]
    #[stable(feature = "rust1", since = "1.0.0")]
    fn clone_from(&mut self, source: &Self) {
    80008b16:	715d                	addi	sp,sp,-80
    80008b18:	e486                	sd	ra,72(sp)
    80008b1a:	e02e                	sd	a1,0(sp)
    80008b1c:	85aa                	mv	a1,a0
    80008b1e:	6502                	ld	a0,0(sp)
    80008b20:	e42e                	sd	a1,8(sp)
    80008b22:	f02e                	sd	a1,32(sp)
    80008b24:	f42a                	sd	a0,40(sp)
        *self = source.clone()
    80008b26:	00012097          	auipc	ra,0x12
    80008b2a:	1ae080e7          	jalr	430(ra) # 8001acd4 <_ZN63_$LT$kernel..fs..inode..Inode$u20$as$u20$core..clone..Clone$GT$5clone17hdd0850fb54e2bc6cE>
    80008b2e:	f82a                	sd	a0,48(sp)
    80008b30:	fc2e                	sd	a1,56(sp)
    80008b32:	e82a                	sd	a0,16(sp)
    80008b34:	ec2e                	sd	a1,24(sp)
    80008b36:	a009                	j	80008b38 <_ZN4core5clone5Clone10clone_from17h4153b3cb0b8f3e29E+0x22>
    80008b38:	6522                	ld	a0,8(sp)
    80008b3a:	ffffe097          	auipc	ra,0xffffe
    80008b3e:	3a0080e7          	jalr	928(ra) # 80006eda <_ZN4core3ptr45drop_in_place$LT$kernel..fs..inode..Inode$GT$17h8786fe1a2a287832E>
    80008b42:	a009                	j	80008b44 <_ZN4core5clone5Clone10clone_from17h4153b3cb0b8f3e29E+0x2e>
    80008b44:	65a2                	ld	a1,8(sp)
    80008b46:	6562                	ld	a0,24(sp)
    80008b48:	e588                	sd	a0,8(a1)
    80008b4a:	6542                	ld	a0,16(sp)
    80008b4c:	e188                	sd	a0,0(a1)
    }
    80008b4e:	60a6                	ld	ra,72(sp)
    80008b50:	6161                	addi	sp,sp,80
    80008b52:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h1b12e5c191747deaE:

0000000080008b54 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h1b12e5c191747deaE>:
    pub unsafe fn as_mut<'a>(self) -> Option<&'a mut T> {
    80008b54:	7179                	addi	sp,sp,-48
    80008b56:	f406                	sd	ra,40(sp)
    80008b58:	e42a                	sd	a0,8(sp)
    80008b5a:	f02a                	sd	a0,32(sp)
        if self.is_null() { None } else { unsafe { Some(&mut *self) } }
    80008b5c:	00000097          	auipc	ra,0x0
    80008b60:	05c080e7          	jalr	92(ra) # 80008bb8 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17ha54fba030ecf9049E>
    80008b64:	e82a                	sd	a0,16(sp)
    80008b66:	a009                	j	80008b68 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h1b12e5c191747deaE+0x14>
    80008b68:	6542                	ld	a0,16(sp)
    80008b6a:	4581                	li	a1,0
    80008b6c:	00b50663          	beq	a0,a1,80008b78 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h1b12e5c191747deaE+0x24>
    80008b70:	a009                	j	80008b72 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h1b12e5c191747deaE+0x1e>
    80008b72:	4501                	li	a0,0
    80008b74:	ec2a                	sd	a0,24(sp)
    80008b76:	a021                	j	80008b7e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h1b12e5c191747deaE+0x2a>
    80008b78:	6522                	ld	a0,8(sp)
    80008b7a:	ec2a                	sd	a0,24(sp)
    80008b7c:	a009                	j	80008b7e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h1b12e5c191747deaE+0x2a>
    }
    80008b7e:	6562                	ld	a0,24(sp)
    80008b80:	70a2                	ld	ra,40(sp)
    80008b82:	6145                	addi	sp,sp,48
    80008b84:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17ha6d203c03ed13dfdE:

0000000080008b86 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17ha6d203c03ed13dfdE>:
    pub unsafe fn as_mut<'a>(self) -> Option<&'a mut T> {
    80008b86:	7179                	addi	sp,sp,-48
    80008b88:	f406                	sd	ra,40(sp)
    80008b8a:	e42a                	sd	a0,8(sp)
    80008b8c:	f02a                	sd	a0,32(sp)
        if self.is_null() { None } else { unsafe { Some(&mut *self) } }
    80008b8e:	00000097          	auipc	ra,0x0
    80008b92:	04c080e7          	jalr	76(ra) # 80008bda <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hcdcddf7362d728f0E>
    80008b96:	e82a                	sd	a0,16(sp)
    80008b98:	a009                	j	80008b9a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17ha6d203c03ed13dfdE+0x14>
    80008b9a:	6542                	ld	a0,16(sp)
    80008b9c:	4581                	li	a1,0
    80008b9e:	00b50663          	beq	a0,a1,80008baa <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17ha6d203c03ed13dfdE+0x24>
    80008ba2:	a009                	j	80008ba4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17ha6d203c03ed13dfdE+0x1e>
    80008ba4:	4501                	li	a0,0
    80008ba6:	ec2a                	sd	a0,24(sp)
    80008ba8:	a021                	j	80008bb0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17ha6d203c03ed13dfdE+0x2a>
    80008baa:	6522                	ld	a0,8(sp)
    80008bac:	ec2a                	sd	a0,24(sp)
    80008bae:	a009                	j	80008bb0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17ha6d203c03ed13dfdE+0x2a>
    }
    80008bb0:	6562                	ld	a0,24(sp)
    80008bb2:	70a2                	ld	ra,40(sp)
    80008bb4:	6145                	addi	sp,sp,48
    80008bb6:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17ha54fba030ecf9049E:

0000000080008bb8 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17ha54fba030ecf9049E>:
    pub const fn is_null(self) -> bool {
    80008bb8:	1101                	addi	sp,sp,-32
    80008bba:	ec06                	sd	ra,24(sp)
    80008bbc:	e82a                	sd	a0,16(sp)
        (self as *mut u8).guaranteed_eq(null_mut())
    80008bbe:	e42a                	sd	a0,8(sp)
    80008bc0:	a009                	j	80008bc2 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17ha54fba030ecf9049E+0xa>
    80008bc2:	6522                	ld	a0,8(sp)
    80008bc4:	4581                	li	a1,0
    80008bc6:	00019097          	auipc	ra,0x19
    80008bca:	2fc080e7          	jalr	764(ra) # 80021ec2 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$13guaranteed_eq17h32ea8c99c0b8220dE>
    80008bce:	e02a                	sd	a0,0(sp)
    80008bd0:	a009                	j	80008bd2 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17ha54fba030ecf9049E+0x1a>
    }
    80008bd2:	6502                	ld	a0,0(sp)
    80008bd4:	60e2                	ld	ra,24(sp)
    80008bd6:	6105                	addi	sp,sp,32
    80008bd8:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hcdcddf7362d728f0E:

0000000080008bda <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hcdcddf7362d728f0E>:
    pub const fn is_null(self) -> bool {
    80008bda:	1101                	addi	sp,sp,-32
    80008bdc:	ec06                	sd	ra,24(sp)
    80008bde:	e82a                	sd	a0,16(sp)
        (self as *mut u8).guaranteed_eq(null_mut())
    80008be0:	e42a                	sd	a0,8(sp)
    80008be2:	a009                	j	80008be4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hcdcddf7362d728f0E+0xa>
    80008be4:	6522                	ld	a0,8(sp)
    80008be6:	4581                	li	a1,0
    80008be8:	00019097          	auipc	ra,0x19
    80008bec:	2da080e7          	jalr	730(ra) # 80021ec2 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$13guaranteed_eq17h32ea8c99c0b8220dE>
    80008bf0:	e02a                	sd	a0,0(sp)
    80008bf2:	a009                	j	80008bf4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hcdcddf7362d728f0E+0x1a>
    }
    80008bf4:	6502                	ld	a0,0(sp)
    80008bf6:	60e2                	ld	ra,24(sp)
    80008bf8:	6105                	addi	sp,sp,32
    80008bfa:	8082                	ret

Disassembly of section .text._ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$8begin_op17he5b49a48c716e372E:

0000000080008bfc <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$8begin_op17he5b49a48c716e372E>:
    }
}

impl Spinlock<Log> {
    /// It should be called at the start of file system call.
    pub fn begin_op(&self) {
    80008bfc:	7135                	addi	sp,sp,-160
    80008bfe:	ed06                	sd	ra,152(sp)
    80008c00:	f8aa                	sd	a0,112(sp)
    80008c02:	e52a                	sd	a0,136(sp)
        let mut guard  = self.acquire();
    80008c04:	00007097          	auipc	ra,0x7
    80008c08:	5d0080e7          	jalr	1488(ra) # 800101d4 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h25a8532f298de6d8E>
    80008c0c:	fcaa                	sd	a0,120(sp)
    80008c0e:	a009                	j	80008c10 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$8begin_op17he5b49a48c716e372E+0x14>
    80008c10:	18a8                	addi	a0,sp,120
        loop {
            if guard.committing ||
    80008c12:	00008097          	auipc	ra,0x8
    80008c16:	6e0080e7          	jalr	1760(ra) # 800112f2 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h89fb3cfbc0625c4cE>
    80008c1a:	f4aa                	sd	a0,104(sp)
    80008c1c:	a02d                	j	80008c46 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$8begin_op17he5b49a48c716e372E+0x4a>
    80008c1e:	4505                	li	a0,1
    80008c20:	08a103a3          	sb	a0,135(sp)
    80008c24:	a821                	j	80008c3c <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$8begin_op17he5b49a48c716e372E+0x40>
    80008c26:	4501                	li	a0,0
    80008c28:	08a103a3          	sb	a0,135(sp)
    80008c2c:	a801                	j	80008c3c <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$8begin_op17he5b49a48c716e372E+0x40>
    80008c2e:	18a8                	addi	a0,sp,120
                1 + guard.lh.len as usize +
    80008c30:	00008097          	auipc	ra,0x8
    80008c34:	6c2080e7          	jalr	1730(ra) # 800112f2 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h89fb3cfbc0625c4cE>
    80008c38:	f0aa                	sd	a0,96(sp)
    80008c3a:	a821                	j	80008c52 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$8begin_op17he5b49a48c716e372E+0x56>
            if guard.committing ||
    80008c3c:	08714503          	lbu	a0,135(sp)
    80008c40:	8905                	andi	a0,a0,1
    80008c42:	ed35                	bnez	a0,80008cbe <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$8begin_op17he5b49a48c716e372E+0xc2>
    80008c44:	a061                	j	80008ccc <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$8begin_op17he5b49a48c716e372E+0xd0>
    80008c46:	7526                	ld	a0,104(sp)
    80008c48:	08854503          	lbu	a0,136(a0)
    80008c4c:	8905                	andi	a0,a0,1
    80008c4e:	f961                	bnez	a0,80008c1e <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$8begin_op17he5b49a48c716e372E+0x22>
    80008c50:	bff9                	j	80008c2e <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$8begin_op17he5b49a48c716e372E+0x32>
                1 + guard.lh.len as usize +
    80008c52:	7506                	ld	a0,96(sp)
    80008c54:	01056503          	lwu	a0,16(a0)
    80008c58:	0505                	addi	a0,a0,1
    80008c5a:	ecaa                	sd	a0,88(sp)
    80008c5c:	4501                	li	a0,0
    80008c5e:	10051163          	bnez	a0,80008d60 <.LBB0_30>
    80008c62:	a009                	j	80008c64 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$8begin_op17he5b49a48c716e372E+0x68>
    80008c64:	18a8                	addi	a0,sp,120
                (guard.outstanding+1) as usize * MAXOPBLOCKS > LOGSIZE
    80008c66:	00008097          	auipc	ra,0x8
    80008c6a:	68c080e7          	jalr	1676(ra) # 800112f2 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h89fb3cfbc0625c4cE>
    80008c6e:	e8aa                	sd	a0,80(sp)
    80008c70:	a009                	j	80008c72 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$8begin_op17he5b49a48c716e372E+0x76>
    80008c72:	6546                	ld	a0,80(sp)
    80008c74:	00c56503          	lwu	a0,12(a0)
    80008c78:	00150593          	addi	a1,a0,1
    80008c7c:	e4ae                	sd	a1,72(sp)
    80008c7e:	02059513          	slli	a0,a1,0x20
    80008c82:	9101                	srli	a0,a0,0x20
    80008c84:	0eb51c63          	bne	a0,a1,80008d7c <.LBB0_32>
    80008c88:	a009                	j	80008c8a <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$8begin_op17he5b49a48c716e372E+0x8e>
    80008c8a:	6526                	ld	a0,72(sp)
    80008c8c:	1502                	slli	a0,a0,0x20
    80008c8e:	9101                	srli	a0,a0,0x20
    80008c90:	45a9                	li	a1,10
    80008c92:	02b50633          	mul	a2,a0,a1
    80008c96:	e0b2                	sd	a2,64(sp)
    80008c98:	02b53533          	mulhu	a0,a0,a1
    80008c9c:	4581                	li	a1,0
    80008c9e:	0eb51d63          	bne	a0,a1,80008d98 <.LBB0_34>
    80008ca2:	a009                	j	80008ca4 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$8begin_op17he5b49a48c716e372E+0xa8>
                1 + guard.lh.len as usize +
    80008ca4:	6566                	ld	a0,88(sp)
    80008ca6:	6586                	ld	a1,64(sp)
    80008ca8:	952e                	add	a0,a0,a1
    80008caa:	fc2a                	sd	a0,56(sp)
    80008cac:	4501                	li	a0,0
    80008cae:	10051463          	bnez	a0,80008db6 <.LBB0_36>
    80008cb2:	a009                	j	80008cb4 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$8begin_op17he5b49a48c716e372E+0xb8>
    80008cb4:	75e2                	ld	a1,56(sp)
    80008cb6:	4579                	li	a0,30
            if guard.committing ||
    80008cb8:	f6b563e3          	bltu	a0,a1,80008c1e <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$8begin_op17he5b49a48c716e372E+0x22>
    80008cbc:	b7ad                	j	80008c26 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$8begin_op17he5b49a48c716e372E+0x2a>
    80008cbe:	18a8                	addi	a0,sp,120
            {
                let channel = guard.deref() as *const Log as usize;
    80008cc0:	00008097          	auipc	ra,0x8
    80008cc4:	632080e7          	jalr	1586(ra) # 800112f2 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h89fb3cfbc0625c4cE>
    80008cc8:	f82a                	sd	a0,48(sp)
    80008cca:	a801                	j	80008cda <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$8begin_op17he5b49a48c716e372E+0xde>
    80008ccc:	18a8                	addi	a0,sp,120
                unsafe { CPU_MANAGER.myproc().unwrap().sleep(channel, guard); }
                guard = self.acquire();
            } else {
                guard.outstanding += 1;
    80008cce:	00008097          	auipc	ra,0x8
    80008cd2:	6e2080e7          	jalr	1762(ra) # 800113b0 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h6a09efacfb59499dE>
    80008cd6:	f42a                	sd	a0,40(sp)
    80008cd8:	a8a1                	j	80008d30 <.LBB0_29+0x38>
                let channel = guard.deref() as *const Log as usize;
    80008cda:	7542                	ld	a0,48(sp)
    80008cdc:	85aa                	mv	a1,a0
    80008cde:	ec2e                	sd	a1,24(sp)
    80008ce0:	e92a                	sd	a0,144(sp)

0000000080008ce2 <.LBB0_28>:
                unsafe { CPU_MANAGER.myproc().unwrap().sleep(channel, guard); }
    80008ce2:	0005b517          	auipc	a0,0x5b
    80008ce6:	45e50513          	addi	a0,a0,1118 # 80064140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    80008cea:	00009097          	auipc	ra,0x9
    80008cee:	d40080e7          	jalr	-704(ra) # 80011a2a <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    80008cf2:	f02a                	sd	a0,32(sp)
    80008cf4:	a009                	j	80008cf6 <.LBB0_28+0x14>
    80008cf6:	7502                	ld	a0,32(sp)

0000000080008cf8 <.LBB0_29>:
    80008cf8:	0001e597          	auipc	a1,0x1e
    80008cfc:	70058593          	addi	a1,a1,1792 # 800273f8 <.L__unnamed_1>
    80008d00:	00006097          	auipc	ra,0x6
    80008d04:	fbc080e7          	jalr	-68(ra) # 8000ecbc <_ZN4core6option15Option$LT$T$GT$6unwrap17h81f0c84c54a80648E>
    80008d08:	e82a                	sd	a0,16(sp)
    80008d0a:	a009                	j	80008d0c <.LBB0_29+0x14>
    80008d0c:	65e2                	ld	a1,24(sp)
    80008d0e:	6542                	ld	a0,16(sp)
    80008d10:	7666                	ld	a2,120(sp)
    80008d12:	00009097          	auipc	ra,0x9
    80008d16:	b0c080e7          	jalr	-1268(ra) # 8001181e <_ZN6kernel7process7process11task_struct5sleep17ha12ac4247dad146bE>
    80008d1a:	a009                	j	80008d1c <.LBB0_29+0x24>
                guard = self.acquire();
    80008d1c:	7546                	ld	a0,112(sp)
    80008d1e:	00007097          	auipc	ra,0x7
    80008d22:	4b6080e7          	jalr	1206(ra) # 800101d4 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h25a8532f298de6d8E>
    80008d26:	e42a                	sd	a0,8(sp)
    80008d28:	a009                	j	80008d2a <.LBB0_29+0x32>
    80008d2a:	6522                	ld	a0,8(sp)
    80008d2c:	fcaa                	sd	a0,120(sp)
        loop {
    80008d2e:	b5cd                	j	80008c10 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$8begin_op17he5b49a48c716e372E+0x14>
                guard.outstanding += 1;
    80008d30:	7522                	ld	a0,40(sp)
    80008d32:	00c56503          	lwu	a0,12(a0)
    80008d36:	00150593          	addi	a1,a0,1
    80008d3a:	e02e                	sd	a1,0(sp)
    80008d3c:	02059513          	slli	a0,a1,0x20
    80008d40:	9101                	srli	a0,a0,0x20
    80008d42:	08b51863          	bne	a0,a1,80008dd2 <.LBB0_38>
    80008d46:	a009                	j	80008d48 <.LBB0_29+0x50>
    80008d48:	6502                	ld	a0,0(sp)
    80008d4a:	75a2                	ld	a1,40(sp)
    80008d4c:	c5c8                	sw	a0,12(a1)
                drop(guard);
    80008d4e:	7566                	ld	a0,120(sp)
    80008d50:	00014097          	auipc	ra,0x14
    80008d54:	206080e7          	jalr	518(ra) # 8001cf56 <_ZN4core3mem4drop17haa2d2dc72bd2e81bE>
    80008d58:	a009                	j	80008d5a <.LBB0_29+0x62>
                break;
            }
        }
    }
    80008d5a:	60ea                	ld	ra,152(sp)
    80008d5c:	610d                	addi	sp,sp,160
    80008d5e:	8082                	ret

0000000080008d60 <.LBB0_30>:
                1 + guard.lh.len as usize +
    80008d60:	0001e517          	auipc	a0,0x1e
    80008d64:	63050513          	addi	a0,a0,1584 # 80027390 <str.0>

0000000080008d68 <.LBB0_31>:
    80008d68:	0001e617          	auipc	a2,0x1e
    80008d6c:	61060613          	addi	a2,a2,1552 # 80027378 <.L__unnamed_2>
    80008d70:	45f1                	li	a1,28
    80008d72:	00019097          	auipc	ra,0x19
    80008d76:	38a080e7          	jalr	906(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080008d7c <.LBB0_32>:
                (guard.outstanding+1) as usize * MAXOPBLOCKS > LOGSIZE
    80008d7c:	0001e517          	auipc	a0,0x1e
    80008d80:	61450513          	addi	a0,a0,1556 # 80027390 <str.0>

0000000080008d84 <.LBB0_33>:
    80008d84:	0001e617          	auipc	a2,0x1e
    80008d88:	62c60613          	addi	a2,a2,1580 # 800273b0 <.L__unnamed_3>
    80008d8c:	45f1                	li	a1,28
    80008d8e:	00019097          	auipc	ra,0x19
    80008d92:	36e080e7          	jalr	878(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080008d98 <.LBB0_34>:
    80008d98:	0001e517          	auipc	a0,0x1e
    80008d9c:	63850513          	addi	a0,a0,1592 # 800273d0 <str.1>

0000000080008da0 <.LBB0_35>:
    80008da0:	0001e617          	auipc	a2,0x1e
    80008da4:	61060613          	addi	a2,a2,1552 # 800273b0 <.L__unnamed_3>
    80008da8:	02100593          	li	a1,33
    80008dac:	00019097          	auipc	ra,0x19
    80008db0:	350080e7          	jalr	848(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080008db6 <.LBB0_36>:
                1 + guard.lh.len as usize +
    80008db6:	0001e517          	auipc	a0,0x1e
    80008dba:	5da50513          	addi	a0,a0,1498 # 80027390 <str.0>

0000000080008dbe <.LBB0_37>:
    80008dbe:	0001e617          	auipc	a2,0x1e
    80008dc2:	5ba60613          	addi	a2,a2,1466 # 80027378 <.L__unnamed_2>
    80008dc6:	45f1                	li	a1,28
    80008dc8:	00019097          	auipc	ra,0x19
    80008dcc:	334080e7          	jalr	820(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080008dd2 <.LBB0_38>:
                guard.outstanding += 1;
    80008dd2:	0001e517          	auipc	a0,0x1e
    80008dd6:	5be50513          	addi	a0,a0,1470 # 80027390 <str.0>

0000000080008dda <.LBB0_39>:
    80008dda:	0001e617          	auipc	a2,0x1e
    80008dde:	63660613          	addi	a2,a2,1590 # 80027410 <.L__unnamed_4>
    80008de2:	45f1                	li	a1,28
    80008de4:	00019097          	auipc	ra,0x19
    80008de8:	318080e7          	jalr	792(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$5write17ha48e3edeecccac4fE:

0000000080008dee <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$5write17ha48e3edeecccac4fE>:

    /// Accept a buffer, write it into the log and then release the buffer.
    /// This function will pin this buf in the cache until the log commits.
    pub fn write(&self, buf: Buf<'_>) {
    80008dee:	7109                	addi	sp,sp,-384
    80008df0:	fe86                	sd	ra,376(sp)
    80008df2:	e5ae                	sd	a1,200(sp)
    80008df4:	eeaa                	sd	a0,344(sp)
        let mut guard = self.acquire();
    80008df6:	00007097          	auipc	ra,0x7
    80008dfa:	3de080e7          	jalr	990(ra) # 800101d4 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h25a8532f298de6d8E>
    80008dfe:	edaa                	sd	a0,216(sp)
    80008e00:	a009                	j	80008e02 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$5write17ha48e3edeecccac4fE+0x14>
    80008e02:	09a8                	addi	a0,sp,216
        
        if (guard.lh.len+1) as usize >= LOGSIZE || guard.lh.len+1 >= guard.size {
    80008e04:	00008097          	auipc	ra,0x8
    80008e08:	4ee080e7          	jalr	1262(ra) # 800112f2 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h89fb3cfbc0625c4cE>
    80008e0c:	e1aa                	sd	a0,192(sp)
    80008e0e:	a02d                	j	80008e38 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$5write17ha48e3edeecccac4fE+0x4a>
    80008e10:	4505                	li	a0,1
    80008e12:	0ea103a3          	sb	a0,231(sp)
    80008e16:	a821                	j	80008e2e <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$5write17ha48e3edeecccac4fE+0x40>
    80008e18:	4501                	li	a0,0
    80008e1a:	0ea103a3          	sb	a0,231(sp)
    80008e1e:	a801                	j	80008e2e <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$5write17ha48e3edeecccac4fE+0x40>
    80008e20:	09a8                	addi	a0,sp,216
    80008e22:	00008097          	auipc	ra,0x8
    80008e26:	4d0080e7          	jalr	1232(ra) # 800112f2 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h89fb3cfbc0625c4cE>
    80008e2a:	fd2a                	sd	a0,184(sp)
    80008e2c:	a80d                	j	80008e5e <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$5write17ha48e3edeecccac4fE+0x70>
    80008e2e:	0e714503          	lbu	a0,231(sp)
    80008e32:	8905                	andi	a0,a0,1
    80008e34:	ed39                	bnez	a0,80008e92 <.LBB1_59>
    80008e36:	a8ad                	j	80008eb0 <.LBB1_60+0x16>
    80008e38:	650e                	ld	a0,192(sp)
    80008e3a:	01056503          	lwu	a0,16(a0)
    80008e3e:	00150593          	addi	a1,a0,1
    80008e42:	f92e                	sd	a1,176(sp)
    80008e44:	02059513          	slli	a0,a1,0x20
    80008e48:	9101                	srli	a0,a0,0x20
    80008e4a:	2eb51063          	bne	a0,a1,8000912a <.LBB1_65>
    80008e4e:	a009                	j	80008e50 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$5write17ha48e3edeecccac4fE+0x62>
    80008e50:	754a                	ld	a0,176(sp)
    80008e52:	0005059b          	sext.w	a1,a0
    80008e56:	4575                	li	a0,29
    80008e58:	fab56ce3          	bltu	a0,a1,80008e10 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$5write17ha48e3edeecccac4fE+0x22>
    80008e5c:	b7d1                	j	80008e20 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$5write17ha48e3edeecccac4fE+0x32>
    80008e5e:	756a                	ld	a0,184(sp)
    80008e60:	01056503          	lwu	a0,16(a0)
    80008e64:	00150593          	addi	a1,a0,1
    80008e68:	f52e                	sd	a1,168(sp)
    80008e6a:	02059513          	slli	a0,a1,0x20
    80008e6e:	9101                	srli	a0,a0,0x20
    80008e70:	2cb51b63          	bne	a0,a1,80009146 <.LBB1_67>
    80008e74:	a009                	j	80008e76 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$5write17ha48e3edeecccac4fE+0x88>
    80008e76:	09a8                	addi	a0,sp,216
    80008e78:	00008097          	auipc	ra,0x8
    80008e7c:	47a080e7          	jalr	1146(ra) # 800112f2 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h89fb3cfbc0625c4cE>
    80008e80:	f12a                	sd	a0,160(sp)
    80008e82:	a009                	j	80008e84 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$5write17ha48e3edeecccac4fE+0x96>
    80008e84:	752a                	ld	a0,168(sp)
    80008e86:	758a                	ld	a1,160(sp)
    80008e88:	41cc                	lw	a1,4(a1)
    80008e8a:	2501                	sext.w	a0,a0
    80008e8c:	f8b572e3          	bgeu	a0,a1,80008e10 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$5write17ha48e3edeecccac4fE+0x22>
    80008e90:	b761                	j	80008e18 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$5write17ha48e3edeecccac4fE+0x2a>

0000000080008e92 <.LBB1_59>:
            panic!("log: not enough space for ongoing transactions");
    80008e92:	0001e517          	auipc	a0,0x1e
    80008e96:	5c650513          	addi	a0,a0,1478 # 80027458 <.L__unnamed_5>

0000000080008e9a <.LBB1_60>:
    80008e9a:	0001e617          	auipc	a2,0x1e
    80008e9e:	5ee60613          	addi	a2,a2,1518 # 80027488 <.L__unnamed_6>
    80008ea2:	02e00593          	li	a1,46
    80008ea6:	00019097          	auipc	ra,0x19
    80008eaa:	256080e7          	jalr	598(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80008eae:	0000                	unimp
    80008eb0:	09a8                	addi	a0,sp,216
        }
        if guard.outstanding < 1 {
    80008eb2:	00008097          	auipc	ra,0x8
    80008eb6:	440080e7          	jalr	1088(ra) # 800112f2 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h89fb3cfbc0625c4cE>
    80008eba:	ed2a                	sd	a0,152(sp)
    80008ebc:	a009                	j	80008ebe <.LBB1_60+0x24>
    80008ebe:	656a                	ld	a0,152(sp)
    80008ec0:	4548                	lw	a0,12(a0)
    80008ec2:	4581                	li	a1,0
    80008ec4:	02b51263          	bne	a0,a1,80008ee8 <.LBB1_62+0x16>
    80008ec8:	a009                	j	80008eca <.LBB1_61>

0000000080008eca <.LBB1_61>:
            panic!("log: this log write is out of recording");
    80008eca:	0001e517          	auipc	a0,0x1e
    80008ece:	5d650513          	addi	a0,a0,1494 # 800274a0 <.L__unnamed_7>

0000000080008ed2 <.LBB1_62>:
    80008ed2:	0001e617          	auipc	a2,0x1e
    80008ed6:	5f660613          	addi	a2,a2,1526 # 800274c8 <.L__unnamed_8>
    80008eda:	02700593          	li	a1,39
    80008ede:	00019097          	auipc	ra,0x19
    80008ee2:	21e080e7          	jalr	542(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80008ee6:	0000                	unimp
    80008ee8:	09a8                	addi	a0,sp,216
        }

        // record the buf's blockno in the log header
        for i in 0..guard.lh.len {
    80008eea:	00008097          	auipc	ra,0x8
    80008eee:	408080e7          	jalr	1032(ra) # 800112f2 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h89fb3cfbc0625c4cE>
    80008ef2:	e92a                	sd	a0,144(sp)
    80008ef4:	a009                	j	80008ef6 <.LBB1_62+0x24>
    80008ef6:	654a                	ld	a0,144(sp)
    80008ef8:	490c                	lw	a1,16(a0)
    80008efa:	4501                	li	a0,0
    80008efc:	d5aa                	sw	a0,232(sp)
    80008efe:	d7ae                	sw	a1,236(sp)
    80008f00:	00003097          	auipc	ra,0x3
    80008f04:	a9c080e7          	jalr	-1380(ra) # 8000b99c <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h2819071fbc006758E>
    80008f08:	e12a                	sd	a0,128(sp)
    80008f0a:	e52e                	sd	a1,136(sp)
    80008f0c:	a009                	j	80008f0e <.LBB1_62+0x3c>
    80008f0e:	652a                	ld	a0,136(sp)
    80008f10:	658a                	ld	a1,128(sp)
    80008f12:	d9ae                	sw	a1,240(sp)
    80008f14:	dbaa                	sw	a0,244(sp)
    80008f16:	a009                	j	80008f18 <.LBB1_62+0x46>
    80008f18:	1988                	addi	a0,sp,240
    80008f1a:	00003097          	auipc	ra,0x3
    80008f1e:	914080e7          	jalr	-1772(ra) # 8000b82e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17he2f0092c6efc86cdE>
    80008f22:	ddaa                	sw	a0,248(sp)
    80008f24:	dfae                	sw	a1,252(sp)
    80008f26:	a009                	j	80008f28 <.LBB1_62+0x56>
    80008f28:	0f816503          	lwu	a0,248(sp)
    80008f2c:	4581                	li	a1,0
    80008f2e:	00b50463          	beq	a0,a1,80008f36 <.LBB1_62+0x64>
    80008f32:	a009                	j	80008f34 <.LBB1_62+0x62>
    80008f34:	a809                	j	80008f46 <.LBB1_62+0x74>
    80008f36:	09a8                	addi	a0,sp,216
                drop(guard);
                drop(buf);
                return;
            }
        }
        if (guard.lh.len+2) as usize >= LOGSIZE || guard.lh.len+2 >= guard.size {
    80008f38:	00008097          	auipc	ra,0x8
    80008f3c:	3ba080e7          	jalr	954(ra) # 800112f2 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h89fb3cfbc0625c4cE>
    80008f40:	fcaa                	sd	a0,120(sp)
    80008f42:	a865                	j	80008ffa <.LBB1_62+0x128>
        for i in 0..guard.lh.len {
    80008f44:	0000                	unimp
    80008f46:	0fc16503          	lwu	a0,252(sp)
    80008f4a:	f4aa                	sd	a0,104(sp)
    80008f4c:	16a12223          	sw	a0,356(sp)
    80008f50:	16a12423          	sw	a0,360(sp)
    80008f54:	16a12623          	sw	a0,364(sp)
    80008f58:	09a8                	addi	a0,sp,216
            if guard.lh.blocknos[i as usize] == buf.read_blockno() {
    80008f5a:	00008097          	auipc	ra,0x8
    80008f5e:	398080e7          	jalr	920(ra) # 800112f2 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h89fb3cfbc0625c4cE>
    80008f62:	f8aa                	sd	a0,112(sp)
    80008f64:	a009                	j	80008f66 <.LBB1_62+0x94>
    80008f66:	7526                	ld	a0,104(sp)
    80008f68:	0005059b          	sext.w	a1,a0
    80008f6c:	f0aa                	sd	a0,96(sp)
    80008f6e:	4571                	li	a0,28
    80008f70:	1eb56963          	bltu	a0,a1,80009162 <.LBB1_68+0x14>
    80008f74:	a009                	j	80008f76 <.LBB1_62+0xa4>
    80008f76:	652e                	ld	a0,200(sp)
    80008f78:	75c6                	ld	a1,112(sp)
    80008f7a:	7606                	ld	a2,96(sp)
    80008f7c:	060a                	slli	a2,a2,0x2
    80008f7e:	95b2                	add	a1,a1,a2
    80008f80:	0145e583          	lwu	a1,20(a1)
    80008f84:	e8ae                	sd	a1,80(sp)
    80008f86:	ffffa097          	auipc	ra,0xffffa
    80008f8a:	790080e7          	jalr	1936(ra) # 80003716 <_ZN6kernel2fs3bio3Buf12read_blockno17ha2cb61f265147e82E>
    80008f8e:	ecaa                	sd	a0,88(sp)
    80008f90:	a009                	j	80008f92 <.LBB1_62+0xc0>
    80008f92:	6546                	ld	a0,80(sp)
    80008f94:	65e6                	ld	a1,88(sp)
    80008f96:	2581                	sext.w	a1,a1
    80008f98:	2501                	sext.w	a0,a0
    80008f9a:	00b51963          	bne	a0,a1,80008fac <.LBB1_62+0xda>
    80008f9e:	a009                	j	80008fa0 <.LBB1_62+0xce>
                drop(guard);
    80008fa0:	656e                	ld	a0,216(sp)
    80008fa2:	00014097          	auipc	ra,0x14
    80008fa6:	fb4080e7          	jalr	-76(ra) # 8001cf56 <_ZN4core3mem4drop17haa2d2dc72bd2e81bE>
    80008faa:	a011                	j	80008fae <.LBB1_62+0xdc>
        for i in 0..guard.lh.len {
    80008fac:	b7b5                	j	80008f18 <.LBB1_62+0x46>
                drop(buf);
    80008fae:	652e                	ld	a0,200(sp)
    80008fb0:	710c                	ld	a1,32(a0)
    80008fb2:	f22e                	sd	a1,288(sp)
    80008fb4:	6d0c                	ld	a1,24(a0)
    80008fb6:	ee2e                	sd	a1,280(sp)
    80008fb8:	690c                	ld	a1,16(a0)
    80008fba:	ea2e                	sd	a1,272(sp)
    80008fbc:	650c                	ld	a1,8(a0)
    80008fbe:	e62e                	sd	a1,264(sp)
    80008fc0:	6108                	ld	a0,0(a0)
    80008fc2:	e22a                	sd	a0,256(sp)
    80008fc4:	0208                	addi	a0,sp,256
    80008fc6:	00014097          	auipc	ra,0x14
    80008fca:	fc6080e7          	jalr	-58(ra) # 8001cf8c <_ZN4core3mem4drop17hda1e19029436deb9E>
    80008fce:	a009                	j	80008fd0 <.LBB1_62+0xfe>
        let len = guard.lh.len as usize;
        guard.lh.blocknos[len] = buf.read_blockno();
        guard.lh.len += 1;
        drop(guard);
        drop(buf);
    }
    80008fd0:	aa91                	j	80009124 <.LBB1_64+0xc8>
    80008fd2:	4505                	li	a0,1
        if (guard.lh.len+2) as usize >= LOGSIZE || guard.lh.len+2 >= guard.size {
    80008fd4:	12a107a3          	sb	a0,303(sp)
    80008fd8:	a821                	j	80008ff0 <.LBB1_62+0x11e>
    80008fda:	4501                	li	a0,0
    80008fdc:	12a107a3          	sb	a0,303(sp)
    80008fe0:	a801                	j	80008ff0 <.LBB1_62+0x11e>
    80008fe2:	09a8                	addi	a0,sp,216
    80008fe4:	00008097          	auipc	ra,0x8
    80008fe8:	30e080e7          	jalr	782(ra) # 800112f2 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h89fb3cfbc0625c4cE>
    80008fec:	e4aa                	sd	a0,72(sp)
    80008fee:	a80d                	j	80009020 <.LBB1_62+0x14e>
    80008ff0:	12f14503          	lbu	a0,303(sp)
    80008ff4:	8905                	andi	a0,a0,1
    80008ff6:	ed39                	bnez	a0,80009054 <.LBB1_63>
    80008ff8:	a8ad                	j	80009072 <.LBB1_64+0x16>
    80008ffa:	7566                	ld	a0,120(sp)
    80008ffc:	01056503          	lwu	a0,16(a0)
    80009000:	00250593          	addi	a1,a0,2
    80009004:	e0ae                	sd	a1,64(sp)
    80009006:	02059513          	slli	a0,a1,0x20
    8000900a:	9101                	srli	a0,a0,0x20
    8000900c:	16b51663          	bne	a0,a1,80009178 <.LBB1_70>
    80009010:	a009                	j	80009012 <.LBB1_62+0x140>
    80009012:	6506                	ld	a0,64(sp)
    80009014:	0005059b          	sext.w	a1,a0
    80009018:	4575                	li	a0,29
    8000901a:	fab56ce3          	bltu	a0,a1,80008fd2 <.LBB1_62+0x100>
    8000901e:	b7d1                	j	80008fe2 <.LBB1_62+0x110>
    80009020:	6526                	ld	a0,72(sp)
    80009022:	01056503          	lwu	a0,16(a0)
    80009026:	00250593          	addi	a1,a0,2
    8000902a:	fc2e                	sd	a1,56(sp)
    8000902c:	02059513          	slli	a0,a1,0x20
    80009030:	9101                	srli	a0,a0,0x20
    80009032:	16b51163          	bne	a0,a1,80009194 <.LBB1_72>
    80009036:	a009                	j	80009038 <.LBB1_62+0x166>
    80009038:	09a8                	addi	a0,sp,216
    8000903a:	00008097          	auipc	ra,0x8
    8000903e:	2b8080e7          	jalr	696(ra) # 800112f2 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h89fb3cfbc0625c4cE>
    80009042:	f82a                	sd	a0,48(sp)
    80009044:	a009                	j	80009046 <.LBB1_62+0x174>
    80009046:	7562                	ld	a0,56(sp)
    80009048:	75c2                	ld	a1,48(sp)
    8000904a:	41cc                	lw	a1,4(a1)
    8000904c:	2501                	sext.w	a0,a0
    8000904e:	f8b572e3          	bgeu	a0,a1,80008fd2 <.LBB1_62+0x100>
    80009052:	b761                	j	80008fda <.LBB1_62+0x108>

0000000080009054 <.LBB1_63>:
            panic!("log: not enough space for this transaction");
    80009054:	0001e517          	auipc	a0,0x1e
    80009058:	4d450513          	addi	a0,a0,1236 # 80027528 <.L__unnamed_9>

000000008000905c <.LBB1_64>:
    8000905c:	0001e617          	auipc	a2,0x1e
    80009060:	4fc60613          	addi	a2,a2,1276 # 80027558 <.L__unnamed_10>
    80009064:	02a00593          	li	a1,42
    80009068:	00019097          	auipc	ra,0x19
    8000906c:	094080e7          	jalr	148(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80009070:	0000                	unimp
        unsafe { buf.pin(); }
    80009072:	652e                	ld	a0,200(sp)
    80009074:	ffffa097          	auipc	ra,0xffffa
    80009078:	756080e7          	jalr	1878(ra) # 800037ca <_ZN6kernel2fs3bio3Buf3pin17hb02a509b70e70322E>
    8000907c:	a009                	j	8000907e <.LBB1_64+0x22>
    8000907e:	09a8                	addi	a0,sp,216
        let len = guard.lh.len as usize;
    80009080:	00008097          	auipc	ra,0x8
    80009084:	272080e7          	jalr	626(ra) # 800112f2 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h89fb3cfbc0625c4cE>
    80009088:	f42a                	sd	a0,40(sp)
    8000908a:	a009                	j	8000908c <.LBB1_64+0x30>
    8000908c:	652e                	ld	a0,200(sp)
    8000908e:	75a2                	ld	a1,40(sp)
    80009090:	0105e583          	lwu	a1,16(a1)
    80009094:	ec2e                	sd	a1,24(sp)
    80009096:	faae                	sd	a1,368(sp)
        guard.lh.blocknos[len] = buf.read_blockno();
    80009098:	ffffa097          	auipc	ra,0xffffa
    8000909c:	67e080e7          	jalr	1662(ra) # 80003716 <_ZN6kernel2fs3bio3Buf12read_blockno17ha2cb61f265147e82E>
    800090a0:	f02a                	sd	a0,32(sp)
    800090a2:	a009                	j	800090a4 <.LBB1_64+0x48>
    800090a4:	09a8                	addi	a0,sp,216
    800090a6:	00008097          	auipc	ra,0x8
    800090aa:	30a080e7          	jalr	778(ra) # 800113b0 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h6a09efacfb59499dE>
    800090ae:	e82a                	sd	a0,16(sp)
    800090b0:	a009                	j	800090b2 <.LBB1_64+0x56>
    800090b2:	65e2                	ld	a1,24(sp)
    800090b4:	4571                	li	a0,28
    800090b6:	0eb56d63          	bltu	a0,a1,800091b0 <.LBB1_73+0x14>
    800090ba:	a009                	j	800090bc <.LBB1_64+0x60>
    800090bc:	7502                	ld	a0,32(sp)
    800090be:	65c2                	ld	a1,16(sp)
    800090c0:	6662                	ld	a2,24(sp)
    800090c2:	060a                	slli	a2,a2,0x2
    800090c4:	95b2                	add	a1,a1,a2
    800090c6:	c9c8                	sw	a0,20(a1)
    800090c8:	09a8                	addi	a0,sp,216
        guard.lh.len += 1;
    800090ca:	00008097          	auipc	ra,0x8
    800090ce:	2e6080e7          	jalr	742(ra) # 800113b0 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h6a09efacfb59499dE>
    800090d2:	e42a                	sd	a0,8(sp)
    800090d4:	a009                	j	800090d6 <.LBB1_64+0x7a>
    800090d6:	6522                	ld	a0,8(sp)
    800090d8:	01056503          	lwu	a0,16(a0)
    800090dc:	00150593          	addi	a1,a0,1
    800090e0:	e02e                	sd	a1,0(sp)
    800090e2:	02059513          	slli	a0,a1,0x20
    800090e6:	9101                	srli	a0,a0,0x20
    800090e8:	0cb51f63          	bne	a0,a1,800091c6 <.LBB1_75>
    800090ec:	a009                	j	800090ee <.LBB1_64+0x92>
    800090ee:	6502                	ld	a0,0(sp)
    800090f0:	65a2                	ld	a1,8(sp)
    800090f2:	c988                	sw	a0,16(a1)
        drop(guard);
    800090f4:	656e                	ld	a0,216(sp)
    800090f6:	00014097          	auipc	ra,0x14
    800090fa:	e60080e7          	jalr	-416(ra) # 8001cf56 <_ZN4core3mem4drop17haa2d2dc72bd2e81bE>
    800090fe:	a009                	j	80009100 <.LBB1_64+0xa4>
        drop(buf);
    80009100:	652e                	ld	a0,200(sp)
    80009102:	710c                	ld	a1,32(a0)
    80009104:	eaae                	sd	a1,336(sp)
    80009106:	6d0c                	ld	a1,24(a0)
    80009108:	e6ae                	sd	a1,328(sp)
    8000910a:	690c                	ld	a1,16(a0)
    8000910c:	e2ae                	sd	a1,320(sp)
    8000910e:	650c                	ld	a1,8(a0)
    80009110:	fe2e                	sd	a1,312(sp)
    80009112:	6108                	ld	a0,0(a0)
    80009114:	fa2a                	sd	a0,304(sp)
    80009116:	1a08                	addi	a0,sp,304
    80009118:	00014097          	auipc	ra,0x14
    8000911c:	e74080e7          	jalr	-396(ra) # 8001cf8c <_ZN4core3mem4drop17hda1e19029436deb9E>
    80009120:	a009                	j	80009122 <.LBB1_64+0xc6>
    }
    80009122:	a009                	j	80009124 <.LBB1_64+0xc8>
    80009124:	70f6                	ld	ra,376(sp)
    80009126:	6119                	addi	sp,sp,384
    80009128:	8082                	ret

000000008000912a <.LBB1_65>:
        if (guard.lh.len+1) as usize >= LOGSIZE || guard.lh.len+1 >= guard.size {
    8000912a:	0001e517          	auipc	a0,0x1e
    8000912e:	26650513          	addi	a0,a0,614 # 80027390 <str.0>

0000000080009132 <.LBB1_66>:
    80009132:	0001e617          	auipc	a2,0x1e
    80009136:	2f660613          	addi	a2,a2,758 # 80027428 <.L__unnamed_11>
    8000913a:	45f1                	li	a1,28
    8000913c:	00019097          	auipc	ra,0x19
    80009140:	fc0080e7          	jalr	-64(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080009146 <.LBB1_67>:
    80009146:	0001e517          	auipc	a0,0x1e
    8000914a:	24a50513          	addi	a0,a0,586 # 80027390 <str.0>

000000008000914e <.LBB1_68>:
    8000914e:	0001e617          	auipc	a2,0x1e
    80009152:	2f260613          	addi	a2,a2,754 # 80027440 <.L__unnamed_12>
    80009156:	45f1                	li	a1,28
    80009158:	00019097          	auipc	ra,0x19
    8000915c:	fa4080e7          	jalr	-92(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80009160:	0000                	unimp
            if guard.lh.blocknos[i as usize] == buf.read_blockno() {
    80009162:	7506                	ld	a0,96(sp)

0000000080009164 <.LBB1_69>:
    80009164:	0001e617          	auipc	a2,0x1e
    80009168:	37c60613          	addi	a2,a2,892 # 800274e0 <.L__unnamed_13>
    8000916c:	45f5                	li	a1,29
    8000916e:	00019097          	auipc	ra,0x19
    80009172:	fba080e7          	jalr	-70(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

0000000080009178 <.LBB1_70>:
        if (guard.lh.len+2) as usize >= LOGSIZE || guard.lh.len+2 >= guard.size {
    80009178:	0001e517          	auipc	a0,0x1e
    8000917c:	21850513          	addi	a0,a0,536 # 80027390 <str.0>

0000000080009180 <.LBB1_71>:
    80009180:	0001e617          	auipc	a2,0x1e
    80009184:	37860613          	addi	a2,a2,888 # 800274f8 <.L__unnamed_14>
    80009188:	45f1                	li	a1,28
    8000918a:	00019097          	auipc	ra,0x19
    8000918e:	f72080e7          	jalr	-142(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080009194 <.LBB1_72>:
    80009194:	0001e517          	auipc	a0,0x1e
    80009198:	1fc50513          	addi	a0,a0,508 # 80027390 <str.0>

000000008000919c <.LBB1_73>:
    8000919c:	0001e617          	auipc	a2,0x1e
    800091a0:	37460613          	addi	a2,a2,884 # 80027510 <.L__unnamed_15>
    800091a4:	45f1                	li	a1,28
    800091a6:	00019097          	auipc	ra,0x19
    800091aa:	f56080e7          	jalr	-170(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    800091ae:	0000                	unimp
        guard.lh.blocknos[len] = buf.read_blockno();
    800091b0:	6562                	ld	a0,24(sp)

00000000800091b2 <.LBB1_74>:
    800091b2:	0001e617          	auipc	a2,0x1e
    800091b6:	3be60613          	addi	a2,a2,958 # 80027570 <.L__unnamed_16>
    800091ba:	45f5                	li	a1,29
    800091bc:	00019097          	auipc	ra,0x19
    800091c0:	f6c080e7          	jalr	-148(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

00000000800091c6 <.LBB1_75>:
        guard.lh.len += 1;
    800091c6:	0001e517          	auipc	a0,0x1e
    800091ca:	1ca50513          	addi	a0,a0,458 # 80027390 <str.0>

00000000800091ce <.LBB1_76>:
    800091ce:	0001e617          	auipc	a2,0x1e
    800091d2:	3ba60613          	addi	a2,a2,954 # 80027588 <.L__unnamed_17>
    800091d6:	45f1                	li	a1,28
    800091d8:	00019097          	auipc	ra,0x19
    800091dc:	f24080e7          	jalr	-220(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE:

00000000800091e2 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>:

    /// It should be called at the end of file system call.
    /// It will commit the log if this is the last outstanding op.
    pub fn end_op(&self) {
    800091e2:	7171                	addi	sp,sp,-176
    800091e4:	f506                	sd	ra,168(sp)
    800091e6:	f4aa                	sd	a0,104(sp)
    800091e8:	e92a                	sd	a0,144(sp)
    800091ea:	4501                	li	a0,0
        let mut log_ptr: *mut Log = ptr::null_mut();
    800091ec:	fcaa                	sd	a0,120(sp)
    800091ee:	a009                	j	800091f0 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE+0xe>

        let mut guard = self.acquire();
    800091f0:	7526                	ld	a0,104(sp)
    800091f2:	00007097          	auipc	ra,0x7
    800091f6:	fe2080e7          	jalr	-30(ra) # 800101d4 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h25a8532f298de6d8E>
    800091fa:	e12a                	sd	a0,128(sp)
    800091fc:	a009                	j	800091fe <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE+0x1c>
    800091fe:	0108                	addi	a0,sp,128
        guard.outstanding -= 1;
    80009200:	00008097          	auipc	ra,0x8
    80009204:	1b0080e7          	jalr	432(ra) # 800113b0 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h6a09efacfb59499dE>
    80009208:	f0aa                	sd	a0,96(sp)
    8000920a:	a009                	j	8000920c <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE+0x2a>
    8000920c:	7506                	ld	a0,96(sp)
    8000920e:	00c56503          	lwu	a0,12(a0)
    80009212:	fff50593          	addi	a1,a0,-1
    80009216:	ecae                	sd	a1,88(sp)
    80009218:	02059513          	slli	a0,a1,0x20
    8000921c:	9101                	srli	a0,a0,0x20
    8000921e:	16b51063          	bne	a0,a1,8000937e <.LBB2_35>
    80009222:	a009                	j	80009224 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE+0x42>
    80009224:	6566                	ld	a0,88(sp)
    80009226:	7586                	ld	a1,96(sp)
    80009228:	c5c8                	sw	a0,12(a1)
    8000922a:	0108                	addi	a0,sp,128
        if guard.committing {
    8000922c:	00008097          	auipc	ra,0x8
    80009230:	0c6080e7          	jalr	198(ra) # 800112f2 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h89fb3cfbc0625c4cE>
    80009234:	e8aa                	sd	a0,80(sp)
    80009236:	a009                	j	80009238 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE+0x56>
    80009238:	6546                	ld	a0,80(sp)
    8000923a:	08854503          	lbu	a0,136(a0)
    8000923e:	8905                	andi	a0,a0,1
    80009240:	4581                	li	a1,0
    80009242:	02b50263          	beq	a0,a1,80009266 <.LBB2_31+0x16>
    80009246:	a009                	j	80009248 <.LBB2_30>

0000000080009248 <.LBB2_30>:
            // it is not allowed to start a fs op while the log is commiting
            panic!("log: end fs op while the log is committing");
    80009248:	0001e517          	auipc	a0,0x1e
    8000924c:	39950513          	addi	a0,a0,921 # 800275e1 <.L__unnamed_18>

0000000080009250 <.LBB2_31>:
    80009250:	0001e617          	auipc	a2,0x1e
    80009254:	3c060613          	addi	a2,a2,960 # 80027610 <.L__unnamed_19>
    80009258:	02a00593          	li	a1,42
    8000925c:	00019097          	auipc	ra,0x19
    80009260:	ea0080e7          	jalr	-352(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80009264:	0000                	unimp
    80009266:	0108                	addi	a0,sp,128
        }
        if guard.outstanding == 0 {
    80009268:	00008097          	auipc	ra,0x8
    8000926c:	08a080e7          	jalr	138(ra) # 800112f2 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h89fb3cfbc0625c4cE>
    80009270:	e4aa                	sd	a0,72(sp)
    80009272:	a009                	j	80009274 <.LBB2_31+0x24>
    80009274:	6526                	ld	a0,72(sp)
    80009276:	4548                	lw	a0,12(a0)
    80009278:	4581                	li	a1,0
    8000927a:	00b51a63          	bne	a0,a1,8000928e <.LBB2_31+0x3e>
    8000927e:	a009                	j	80009280 <.LBB2_31+0x30>
    80009280:	0108                	addi	a0,sp,128
            guard.committing = true;
    80009282:	00008097          	auipc	ra,0x8
    80009286:	12e080e7          	jalr	302(ra) # 800113b0 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h6a09efacfb59499dE>
    8000928a:	e0aa                	sd	a0,64(sp)
    8000928c:	a801                	j	8000929c <.LBB2_31+0x4c>
    8000928e:	0108                	addi	a0,sp,128
            log_ptr = guard.deref_mut() as *mut Log;
        } else {
            let channel = guard.deref() as *const Log as usize;
    80009290:	00008097          	auipc	ra,0x8
    80009294:	062080e7          	jalr	98(ra) # 800112f2 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h89fb3cfbc0625c4cE>
    80009298:	fc2a                	sd	a0,56(sp)
    8000929a:	a839                	j	800092b8 <.LBB2_31+0x68>
    8000929c:	6586                	ld	a1,64(sp)
    8000929e:	4505                	li	a0,1
            guard.committing = true;
    800092a0:	08a58423          	sb	a0,136(a1)
    800092a4:	0108                	addi	a0,sp,128
            log_ptr = guard.deref_mut() as *mut Log;
    800092a6:	00008097          	auipc	ra,0x8
    800092aa:	10a080e7          	jalr	266(ra) # 800113b0 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h6a09efacfb59499dE>
    800092ae:	f82a                	sd	a0,48(sp)
    800092b0:	a009                	j	800092b2 <.LBB2_31+0x62>
    800092b2:	7542                	ld	a0,48(sp)
    800092b4:	fcaa                	sd	a0,120(sp)
        if guard.outstanding == 0 {
    800092b6:	a829                	j	800092d0 <.LBB2_32+0x14>
            let channel = guard.deref() as *const Log as usize;
    800092b8:	75e2                	ld	a1,56(sp)
    800092ba:	ed2e                	sd	a1,152(sp)

00000000800092bc <.LBB2_32>:
            unsafe { PROC_MANAGER.wake_up(channel); }
    800092bc:	0004e517          	auipc	a0,0x4e
    800092c0:	2e450513          	addi	a0,a0,740 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    800092c4:	00004097          	auipc	ra,0x4
    800092c8:	58a080e7          	jalr	1418(ra) # 8000d84e <_ZN6kernel7process7manager11ProcManager7wake_up17ha46b4d15ac07187bE>
    800092cc:	a009                	j	800092ce <.LBB2_32+0x12>
        if guard.outstanding == 0 {
    800092ce:	a009                	j	800092d0 <.LBB2_32+0x14>
        }
        drop(guard);
    800092d0:	650a                	ld	a0,128(sp)
    800092d2:	00014097          	auipc	ra,0x14
    800092d6:	c84080e7          	jalr	-892(ra) # 8001cf56 <_ZN4core3mem4drop17haa2d2dc72bd2e81bE>
    800092da:	a009                	j	800092dc <.LBB2_32+0x20>

        if !log_ptr.is_null() {
    800092dc:	7566                	ld	a0,120(sp)
    800092de:	00000097          	auipc	ra,0x0
    800092e2:	8fc080e7          	jalr	-1796(ra) # 80008bda <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hcdcddf7362d728f0E>
    800092e6:	f42a                	sd	a0,40(sp)
    800092e8:	a009                	j	800092ea <.LBB2_32+0x2e>
    800092ea:	7522                	ld	a0,40(sp)
    800092ec:	e909                	bnez	a0,800092fe <.LBB2_32+0x42>
    800092ee:	a009                	j	800092f0 <.LBB2_32+0x34>
            // SAFETY: Call commit without holding any lock.
            //        And the committing flag protects the log op.
            unsafe { log_ptr.as_mut().unwrap().commit(); }
    800092f0:	7566                	ld	a0,120(sp)
    800092f2:	00000097          	auipc	ra,0x0
    800092f6:	894080e7          	jalr	-1900(ra) # 80008b86 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17ha6d203c03ed13dfdE>
    800092fa:	f02a                	sd	a0,32(sp)
    800092fc:	a011                	j	80009300 <.LBB2_32+0x44>
        if !log_ptr.is_null() {
    800092fe:	a8ad                	j	80009378 <.LBB2_34+0x20>
            unsafe { log_ptr.as_mut().unwrap().commit(); }
    80009300:	7502                	ld	a0,32(sp)

0000000080009302 <.LBB2_33>:
    80009302:	0001e597          	auipc	a1,0x1e
    80009306:	32658593          	addi	a1,a1,806 # 80027628 <.L__unnamed_20>
    8000930a:	00006097          	auipc	ra,0x6
    8000930e:	a8a080e7          	jalr	-1398(ra) # 8000ed94 <_ZN4core6option15Option$LT$T$GT$6unwrap17hc367d03244a4b027E>
    80009312:	ec2a                	sd	a0,24(sp)
    80009314:	a009                	j	80009316 <.LBB2_33+0x14>
    80009316:	6562                	ld	a0,24(sp)
    80009318:	00006097          	auipc	ra,0x6
    8000931c:	79e080e7          	jalr	1950(ra) # 8000fab6 <_ZN6kernel2fs3log3Log6commit17hb6044c935645b581E>
    80009320:	a009                	j	80009322 <.LBB2_33+0x20>
            let mut guard = self.acquire();
    80009322:	7526                	ld	a0,104(sp)
    80009324:	00007097          	auipc	ra,0x7
    80009328:	eb0080e7          	jalr	-336(ra) # 800101d4 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h25a8532f298de6d8E>
    8000932c:	e52a                	sd	a0,136(sp)
    8000932e:	a009                	j	80009330 <.LBB2_33+0x2e>
    80009330:	0128                	addi	a0,sp,136
            guard.committing = false;
    80009332:	00008097          	auipc	ra,0x8
    80009336:	07e080e7          	jalr	126(ra) # 800113b0 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h6a09efacfb59499dE>
    8000933a:	e82a                	sd	a0,16(sp)
    8000933c:	a009                	j	8000933e <.LBB2_33+0x3c>
    8000933e:	65c2                	ld	a1,16(sp)
    80009340:	4501                	li	a0,0
    80009342:	08a58423          	sb	a0,136(a1)
    80009346:	0128                	addi	a0,sp,136
            let channel = guard.deref() as *const Log as usize;
    80009348:	00008097          	auipc	ra,0x8
    8000934c:	faa080e7          	jalr	-86(ra) # 800112f2 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h89fb3cfbc0625c4cE>
    80009350:	e42a                	sd	a0,8(sp)
    80009352:	a009                	j	80009354 <.LBB2_33+0x52>
    80009354:	65a2                	ld	a1,8(sp)
    80009356:	f12e                	sd	a1,160(sp)

0000000080009358 <.LBB2_34>:
            unsafe { PROC_MANAGER.wake_up(channel); }
    80009358:	0004e517          	auipc	a0,0x4e
    8000935c:	24850513          	addi	a0,a0,584 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    80009360:	00004097          	auipc	ra,0x4
    80009364:	4ee080e7          	jalr	1262(ra) # 8000d84e <_ZN6kernel7process7manager11ProcManager7wake_up17ha46b4d15ac07187bE>
    80009368:	a009                	j	8000936a <.LBB2_34+0x12>
            drop(guard);
    8000936a:	652a                	ld	a0,136(sp)
    8000936c:	00014097          	auipc	ra,0x14
    80009370:	bea080e7          	jalr	-1046(ra) # 8001cf56 <_ZN4core3mem4drop17haa2d2dc72bd2e81bE>
    80009374:	a009                	j	80009376 <.LBB2_34+0x1e>
        if !log_ptr.is_null() {
    80009376:	a009                	j	80009378 <.LBB2_34+0x20>
        }
    }
    80009378:	70aa                	ld	ra,168(sp)
    8000937a:	614d                	addi	sp,sp,176
    8000937c:	8082                	ret

000000008000937e <.LBB2_35>:
        guard.outstanding -= 1;
    8000937e:	0001e517          	auipc	a0,0x1e
    80009382:	24250513          	addi	a0,a0,578 # 800275c0 <str.2>

0000000080009386 <.LBB2_36>:
    80009386:	0001e617          	auipc	a2,0x1e
    8000938a:	21a60613          	addi	a2,a2,538 # 800275a0 <.L__unnamed_21>
    8000938e:	02100593          	li	a1,33
    80009392:	00019097          	auipc	ra,0x19
    80009396:	d6a080e7          	jalr	-662(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel6driver11virtio_disk91_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..driver..virtio_disk..Disk$GT$$GT$2rw17h4aaaa8090d764af5E:

000000008000939c <_ZN6kernel6driver11virtio_disk91_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..driver..virtio_disk..Disk$GT$$GT$2rw17h4aaaa8090d764af5E>:
    }
}

impl Spinlock<Disk> {
    /// Read or write a certain Buf, which is returned after the op is done. 
    pub fn rw(&self, buf: &mut Buf<'_>, writing: bool) {
    8000939c:	c8010113          	addi	sp,sp,-896
    800093a0:	36113c23          	sd	ra,888(sp)
    800093a4:	26b13c23          	sd	a1,632(sp)
    800093a8:	28a13023          	sd	a0,640(sp)
    800093ac:	86b2                	mv	a3,a2
    800093ae:	28d13423          	sd	a3,648(sp)
    800093b2:	32a13423          	sd	a0,808(sp)
    800093b6:	32b13823          	sd	a1,816(sp)
    800093ba:	32c10fa3          	sb	a2,831(sp)
        let mut guard = self.acquire();
    800093be:	00007097          	auipc	ra,0x7
    800093c2:	196080e7          	jalr	406(ra) # 80010554 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h922bace5232f6228E>
    800093c6:	28a13823          	sd	a0,656(sp)
    800093ca:	a009                	j	800093cc <_ZN6kernel6driver11virtio_disk91_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..driver..virtio_disk..Disk$GT$$GT$2rw17h4aaaa8090d764af5E+0x30>
        let buf_raw_data = buf.raw_data_mut();
    800093cc:	27813503          	ld	a0,632(sp)
    800093d0:	ffffa097          	auipc	ra,0xffffa
    800093d4:	3b6080e7          	jalr	950(ra) # 80003786 <_ZN6kernel2fs3bio3Buf12raw_data_mut17hbae73c10d57c515dE>
    800093d8:	85aa                	mv	a1,a0
    800093da:	26b13823          	sd	a1,624(sp)
    800093de:	34a13023          	sd	a0,832(sp)
    800093e2:	a009                	j	800093e4 <_ZN6kernel6driver11virtio_disk91_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..driver..virtio_disk..Disk$GT$$GT$2rw17h4aaaa8090d764af5E+0x48>
    800093e4:	4501                	li	a0,0

        let mut idx: [usize; 3] = [0; 3];
    800093e6:	2aa13423          	sd	a0,680(sp)
    800093ea:	2aa13023          	sd	a0,672(sp)
    800093ee:	28a13c23          	sd	a0,664(sp)
        loop {
    800093f2:	a009                	j	800093f4 <_ZN6kernel6driver11virtio_disk91_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..driver..virtio_disk..Disk$GT$$GT$2rw17h4aaaa8090d764af5E+0x58>
    800093f4:	0d08                	addi	a0,sp,656
            if guard.alloc3_desc(&mut idx) {
    800093f6:	00008097          	auipc	ra,0x8
    800093fa:	f7a080e7          	jalr	-134(ra) # 80011370 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h362a59dae1fa4f35E>
    800093fe:	26a13423          	sd	a0,616(sp)
    80009402:	a009                	j	80009404 <_ZN6kernel6driver11virtio_disk91_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..driver..virtio_disk..Disk$GT$$GT$2rw17h4aaaa8090d764af5E+0x68>
    80009404:	26813503          	ld	a0,616(sp)
    80009408:	0d2c                	addi	a1,sp,664
    8000940a:	00016097          	auipc	ra,0x16
    8000940e:	8e4080e7          	jalr	-1820(ra) # 8001ecee <_ZN6kernel6driver11virtio_disk4Disk11alloc3_desc17h72dc3c5e71ae6e49E>
    80009412:	26a13023          	sd	a0,608(sp)
    80009416:	a009                	j	80009418 <_ZN6kernel6driver11virtio_disk91_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..driver..virtio_disk..Disk$GT$$GT$2rw17h4aaaa8090d764af5E+0x7c>
    80009418:	26013503          	ld	a0,608(sp)
    8000941c:	4581                	li	a1,0
    8000941e:	00b50b63          	beq	a0,a1,80009434 <.LBB3_117>
    80009422:	a009                	j	80009424 <_ZN6kernel6driver11virtio_disk91_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..driver..virtio_disk..Disk$GT$$GT$2rw17h4aaaa8090d764af5E+0x88>
    80009424:	0d08                	addi	a0,sp,656
            }
        }

        // format descriptors
        // QEMU's virtio block device read them
        let buf0 = &mut guard.ops[idx[0]];
    80009426:	00008097          	auipc	ra,0x8
    8000942a:	f4a080e7          	jalr	-182(ra) # 80011370 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h362a59dae1fa4f35E>
    8000942e:	24a13c23          	sd	a0,600(sp)
    80009432:	a8a5                	j	800094aa <.LBB3_118+0x5c>

0000000080009434 <.LBB3_117>:
                    CPU_MANAGER.myproc().unwrap().sleep(&guard.free[0] as *const bool as usize, guard);
    80009434:	0005b517          	auipc	a0,0x5b
    80009438:	d0c50513          	addi	a0,a0,-756 # 80064140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    8000943c:	00008097          	auipc	ra,0x8
    80009440:	5ee080e7          	jalr	1518(ra) # 80011a2a <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    80009444:	24a13823          	sd	a0,592(sp)
    80009448:	a009                	j	8000944a <.LBB3_117+0x16>
    8000944a:	25013503          	ld	a0,592(sp)

000000008000944e <.LBB3_118>:
    8000944e:	0001e597          	auipc	a1,0x1e
    80009452:	4fa58593          	addi	a1,a1,1274 # 80027948 <.L__unnamed_22>
    80009456:	00006097          	auipc	ra,0x6
    8000945a:	866080e7          	jalr	-1946(ra) # 8000ecbc <_ZN4core6option15Option$LT$T$GT$6unwrap17h81f0c84c54a80648E>
    8000945e:	24a13423          	sd	a0,584(sp)
    80009462:	a009                	j	80009464 <.LBB3_118+0x16>
    80009464:	0d08                	addi	a0,sp,656
    80009466:	00008097          	auipc	ra,0x8
    8000946a:	e6c080e7          	jalr	-404(ra) # 800112d2 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h7eb0b551b3d2dabcE>
    8000946e:	24a13023          	sd	a0,576(sp)
    80009472:	a009                	j	80009474 <.LBB3_118+0x26>
    80009474:	24813503          	ld	a0,584(sp)
    80009478:	24013583          	ld	a1,576(sp)
    8000947c:	6609                	lui	a2,0x2
    8000947e:	95b2                	add	a1,a1,a2
    80009480:	29013603          	ld	a2,656(sp)
    80009484:	00008097          	auipc	ra,0x8
    80009488:	30e080e7          	jalr	782(ra) # 80011792 <_ZN6kernel7process7process11task_struct5sleep17h3e20b1d3f8d47a0dE>
    8000948c:	a009                	j	8000948e <.LBB3_118+0x40>
                guard = self.acquire();
    8000948e:	28013503          	ld	a0,640(sp)
    80009492:	00007097          	auipc	ra,0x7
    80009496:	0c2080e7          	jalr	194(ra) # 80010554 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h922bace5232f6228E>
    8000949a:	22a13c23          	sd	a0,568(sp)
    8000949e:	a009                	j	800094a0 <.LBB3_118+0x52>
    800094a0:	23813503          	ld	a0,568(sp)
    800094a4:	28a13823          	sd	a0,656(sp)
        loop {
    800094a8:	b7b1                	j	800093f4 <_ZN6kernel6driver11virtio_disk91_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..driver..virtio_disk..Disk$GT$$GT$2rw17h4aaaa8090d764af5E+0x58>
        let buf0 = &mut guard.ops[idx[0]];
    800094aa:	29813583          	ld	a1,664(sp)
    800094ae:	22b13823          	sd	a1,560(sp)
    800094b2:	451d                	li	a0,7
    800094b4:	68b56b63          	bltu	a0,a1,80009b4a <.LBB3_127+0x4a>
    800094b8:	a009                	j	800094ba <.LBB3_118+0x6c>
    800094ba:	28813503          	ld	a0,648(sp)
    800094be:	25813583          	ld	a1,600(sp)
    800094c2:	23013603          	ld	a2,560(sp)
    800094c6:	0612                	slli	a2,a2,0x4
    800094c8:	95b2                	add	a1,a1,a2
    800094ca:	6609                	lui	a2,0x2
    800094cc:	0d06061b          	addiw	a2,a2,208
    800094d0:	95b2                	add	a1,a1,a2
    800094d2:	22b13423          	sd	a1,552(sp)
    800094d6:	34b13423          	sd	a1,840(sp)
    800094da:	4581                	li	a1,0
        buf0.type_ = if writing { VIRTIO_BLK_T_OUT } else { VIRTIO_BLK_T_IN };
    800094dc:	00b50763          	beq	a0,a1,800094ea <.LBB3_118+0x9c>
    800094e0:	a009                	j	800094e2 <.LBB3_118+0x94>
    800094e2:	4505                	li	a0,1
    800094e4:	2aa12823          	sw	a0,688(sp)
    800094e8:	a029                	j	800094f2 <.LBB3_118+0xa4>
    800094ea:	4501                	li	a0,0
    800094ec:	2aa12823          	sw	a0,688(sp)
    800094f0:	a009                	j	800094f2 <.LBB3_118+0xa4>
    800094f2:	27813503          	ld	a0,632(sp)
    800094f6:	22813603          	ld	a2,552(sp)
    800094fa:	2b012583          	lw	a1,688(sp)
    800094fe:	c20c                	sw	a1,0(a2)
    80009500:	4581                	li	a1,0
        buf0.reserved = 0;
    80009502:	c24c                	sw	a1,4(a2)
        buf0.sector = (buf.read_blockno() as usize * (BSIZE / 512)) as u64;
    80009504:	ffffa097          	auipc	ra,0xffffa
    80009508:	212080e7          	jalr	530(ra) # 80003716 <_ZN6kernel2fs3bio3Buf12read_blockno17ha2cb61f265147e82E>
    8000950c:	22a13023          	sd	a0,544(sp)
    80009510:	a009                	j	80009512 <.LBB3_118+0xc4>
    80009512:	22013503          	ld	a0,544(sp)
    80009516:	1502                	slli	a0,a0,0x20
    80009518:	9101                	srli	a0,a0,0x20
    8000951a:	952a                	add	a0,a0,a0
    8000951c:	20a13c23          	sd	a0,536(sp)
    80009520:	4501                	li	a0,0
    80009522:	64051063          	bnez	a0,80009b62 <.LBB3_129>
    80009526:	a009                	j	80009528 <.LBB3_118+0xda>
    80009528:	21813503          	ld	a0,536(sp)
    8000952c:	22813583          	ld	a1,552(sp)
    80009530:	e588                	sd	a0,8(a1)
    80009532:	0d08                	addi	a0,sp,656

        guard.desc[idx[0]].addr = buf0 as *mut _ as u64;
    80009534:	00008097          	auipc	ra,0x8
    80009538:	e3c080e7          	jalr	-452(ra) # 80011370 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h362a59dae1fa4f35E>
    8000953c:	20a13823          	sd	a0,528(sp)
    80009540:	a009                	j	80009542 <.LBB3_118+0xf4>
    80009542:	29813583          	ld	a1,664(sp)
    80009546:	20b13423          	sd	a1,520(sp)
    8000954a:	451d                	li	a0,7
    8000954c:	62b56a63          	bltu	a0,a1,80009b80 <.LBB3_130+0x16>
    80009550:	a009                	j	80009552 <.LBB3_118+0x104>
    80009552:	22813503          	ld	a0,552(sp)
    80009556:	21013583          	ld	a1,528(sp)
    8000955a:	20813603          	ld	a2,520(sp)
    8000955e:	0612                	slli	a2,a2,0x4
    80009560:	95b2                	add	a1,a1,a2
    80009562:	e188                	sd	a0,0(a1)
        guard.desc[idx[0]].len = core::mem::size_of::<VirtIOBlkReq>().try_into().unwrap();
    80009564:	a009                	j	80009566 <.LBB3_118+0x118>
    80009566:	4541                	li	a0,16
    80009568:	00002097          	auipc	ra,0x2
    8000956c:	4a4080e7          	jalr	1188(ra) # 8000ba0c <_ZN53_$LT$T$u20$as$u20$core..convert..TryInto$LT$U$GT$$GT$8try_into17h168ef583366b1bfdE>
    80009570:	ffaa                	sd	a0,504(sp)
    80009572:	20b13023          	sd	a1,512(sp)
    80009576:	a009                	j	80009578 <.LBB3_118+0x12a>
    80009578:	20013583          	ld	a1,512(sp)
    8000957c:	757e                	ld	a0,504(sp)

000000008000957e <.LBB3_119>:
    8000957e:	0001e617          	auipc	a2,0x1e
    80009582:	12a60613          	addi	a2,a2,298 # 800276a8 <.L__unnamed_23>
    80009586:	00003097          	auipc	ra,0x3
    8000958a:	7b0080e7          	jalr	1968(ra) # 8000cd36 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h07a2a3bbe53a0b92E>
    8000958e:	fbaa                	sd	a0,496(sp)
    80009590:	a009                	j	80009592 <.LBB3_119+0x14>
    80009592:	0d08                	addi	a0,sp,656
    80009594:	00008097          	auipc	ra,0x8
    80009598:	ddc080e7          	jalr	-548(ra) # 80011370 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h362a59dae1fa4f35E>
    8000959c:	f7aa                	sd	a0,488(sp)
    8000959e:	a009                	j	800095a0 <.LBB3_119+0x22>
    800095a0:	29813583          	ld	a1,664(sp)
    800095a4:	f3ae                	sd	a1,480(sp)
    800095a6:	451d                	li	a0,7
    800095a8:	5eb56863          	bltu	a0,a1,80009b98 <.LBB3_131+0x14>
    800095ac:	a009                	j	800095ae <.LBB3_119+0x30>
    800095ae:	755e                	ld	a0,496(sp)
    800095b0:	75be                	ld	a1,488(sp)
    800095b2:	761e                	ld	a2,480(sp)
    800095b4:	0612                	slli	a2,a2,0x4
    800095b6:	95b2                	add	a1,a1,a2
    800095b8:	c588                	sw	a0,8(a1)
    800095ba:	0d08                	addi	a0,sp,656
        guard.desc[idx[0]].flags = VRING_DESC_F_NEXT;
    800095bc:	00008097          	auipc	ra,0x8
    800095c0:	db4080e7          	jalr	-588(ra) # 80011370 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h362a59dae1fa4f35E>
    800095c4:	efaa                	sd	a0,472(sp)
    800095c6:	a009                	j	800095c8 <.LBB3_119+0x4a>
    800095c8:	29813583          	ld	a1,664(sp)
    800095cc:	ebae                	sd	a1,464(sp)
    800095ce:	451d                	li	a0,7
    800095d0:	5cb56f63          	bltu	a0,a1,80009bae <.LBB3_132+0x14>
    800095d4:	a009                	j	800095d6 <.LBB3_119+0x58>
    800095d6:	657e                	ld	a0,472(sp)
    800095d8:	65de                	ld	a1,464(sp)
    800095da:	0592                	slli	a1,a1,0x4
    800095dc:	95aa                	add	a1,a1,a0
    800095de:	4505                	li	a0,1
    800095e0:	00a59623          	sh	a0,12(a1)
        guard.desc[idx[0]].next = idx[1].try_into().unwrap();
    800095e4:	2a013503          	ld	a0,672(sp)
    800095e8:	00002097          	auipc	ra,0x2
    800095ec:	442080e7          	jalr	1090(ra) # 8000ba2a <_ZN53_$LT$T$u20$as$u20$core..convert..TryInto$LT$U$GT$$GT$8try_into17h79444d549eeb58faE>
    800095f0:	e3aa                	sd	a0,448(sp)
    800095f2:	e7ae                	sd	a1,456(sp)
    800095f4:	a009                	j	800095f6 <.LBB3_119+0x78>
    800095f6:	65be                	ld	a1,456(sp)
    800095f8:	651e                	ld	a0,448(sp)

00000000800095fa <.LBB3_120>:
    800095fa:	0001e617          	auipc	a2,0x1e
    800095fe:	0f660613          	addi	a2,a2,246 # 800276f0 <.L__unnamed_24>
    80009602:	00003097          	auipc	ra,0x3
    80009606:	7ac080e7          	jalr	1964(ra) # 8000cdae <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h42e1173662da7b7dE>
    8000960a:	ff2a                	sd	a0,440(sp)
    8000960c:	a009                	j	8000960e <.LBB3_120+0x14>
    8000960e:	0d08                	addi	a0,sp,656
    80009610:	00008097          	auipc	ra,0x8
    80009614:	d60080e7          	jalr	-672(ra) # 80011370 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h362a59dae1fa4f35E>
    80009618:	fb2a                	sd	a0,432(sp)
    8000961a:	a009                	j	8000961c <.LBB3_120+0x22>
    8000961c:	29813583          	ld	a1,664(sp)
    80009620:	f72e                	sd	a1,424(sp)
    80009622:	451d                	li	a0,7
    80009624:	5ab56063          	bltu	a0,a1,80009bc4 <.LBB3_133+0x14>
    80009628:	a009                	j	8000962a <.LBB3_120+0x30>
    8000962a:	757a                	ld	a0,440(sp)
    8000962c:	75da                	ld	a1,432(sp)
    8000962e:	763a                	ld	a2,424(sp)
    80009630:	0612                	slli	a2,a2,0x4
    80009632:	95b2                	add	a1,a1,a2
    80009634:	00a59723          	sh	a0,14(a1)
    80009638:	0d08                	addi	a0,sp,656

        guard.desc[idx[1]].addr = buf_raw_data as u64;
    8000963a:	00008097          	auipc	ra,0x8
    8000963e:	d36080e7          	jalr	-714(ra) # 80011370 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h362a59dae1fa4f35E>
    80009642:	f32a                	sd	a0,416(sp)
    80009644:	a009                	j	80009646 <.LBB3_120+0x4c>
    80009646:	2a013583          	ld	a1,672(sp)
    8000964a:	ef2e                	sd	a1,408(sp)
    8000964c:	451d                	li	a0,7
    8000964e:	58b56663          	bltu	a0,a1,80009bda <.LBB3_134+0x14>
    80009652:	a009                	j	80009654 <.LBB3_120+0x5a>
    80009654:	27013503          	ld	a0,624(sp)
    80009658:	759a                	ld	a1,416(sp)
    8000965a:	667a                	ld	a2,408(sp)
    8000965c:	0612                	slli	a2,a2,0x4
    8000965e:	95b2                	add	a1,a1,a2
    80009660:	e188                	sd	a0,0(a1)
    80009662:	40000513          	li	a0,1024
        guard.desc[idx[1]].len = BSIZE.try_into().unwrap();
    80009666:	00002097          	auipc	ra,0x2
    8000966a:	3a6080e7          	jalr	934(ra) # 8000ba0c <_ZN53_$LT$T$u20$as$u20$core..convert..TryInto$LT$U$GT$$GT$8try_into17h168ef583366b1bfdE>
    8000966e:	e72a                	sd	a0,392(sp)
    80009670:	eb2e                	sd	a1,400(sp)
    80009672:	a009                	j	80009674 <.LBB3_120+0x7a>
    80009674:	65da                	ld	a1,400(sp)
    80009676:	653a                	ld	a0,392(sp)

0000000080009678 <.LBB3_121>:
    80009678:	0001e617          	auipc	a2,0x1e
    8000967c:	0c060613          	addi	a2,a2,192 # 80027738 <.L__unnamed_25>
    80009680:	00003097          	auipc	ra,0x3
    80009684:	6b6080e7          	jalr	1718(ra) # 8000cd36 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h07a2a3bbe53a0b92E>
    80009688:	e32a                	sd	a0,384(sp)
    8000968a:	a009                	j	8000968c <.LBB3_121+0x14>
    8000968c:	0d08                	addi	a0,sp,656
    8000968e:	00008097          	auipc	ra,0x8
    80009692:	ce2080e7          	jalr	-798(ra) # 80011370 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h362a59dae1fa4f35E>
    80009696:	feaa                	sd	a0,376(sp)
    80009698:	a009                	j	8000969a <.LBB3_121+0x22>
    8000969a:	2a013583          	ld	a1,672(sp)
    8000969e:	faae                	sd	a1,368(sp)
    800096a0:	451d                	li	a0,7
    800096a2:	54b56763          	bltu	a0,a1,80009bf0 <.LBB3_135+0x14>
    800096a6:	a009                	j	800096a8 <.LBB3_121+0x30>
    800096a8:	28813503          	ld	a0,648(sp)
    800096ac:	659a                	ld	a1,384(sp)
    800096ae:	7676                	ld	a2,376(sp)
    800096b0:	76d6                	ld	a3,368(sp)
    800096b2:	0692                	slli	a3,a3,0x4
    800096b4:	9636                	add	a2,a2,a3
    800096b6:	c60c                	sw	a1,8(a2)
    800096b8:	4581                	li	a1,0
        guard.desc[idx[1]].flags = if writing { 0 } else { VRING_DESC_F_WRITE };
    800096ba:	00b50763          	beq	a0,a1,800096c8 <.LBB3_121+0x50>
    800096be:	a009                	j	800096c0 <.LBB3_121+0x48>
    800096c0:	4501                	li	a0,0
    800096c2:	2aa11b23          	sh	a0,694(sp)
    800096c6:	a029                	j	800096d0 <.LBB3_121+0x58>
    800096c8:	4509                	li	a0,2
    800096ca:	2aa11b23          	sh	a0,694(sp)
    800096ce:	a009                	j	800096d0 <.LBB3_121+0x58>
    800096d0:	0d08                	addi	a0,sp,656
    800096d2:	00008097          	auipc	ra,0x8
    800096d6:	c9e080e7          	jalr	-866(ra) # 80011370 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h362a59dae1fa4f35E>
    800096da:	f6aa                	sd	a0,360(sp)
    800096dc:	a009                	j	800096de <.LBB3_121+0x66>
    800096de:	2a013583          	ld	a1,672(sp)
    800096e2:	f2ae                	sd	a1,352(sp)
    800096e4:	451d                	li	a0,7
    800096e6:	52b56063          	bltu	a0,a1,80009c06 <.LBB3_136+0x14>
    800096ea:	a009                	j	800096ec <.LBB3_121+0x74>
    800096ec:	7536                	ld	a0,360(sp)
    800096ee:	7596                	ld	a1,352(sp)
    800096f0:	0592                	slli	a1,a1,0x4
    800096f2:	95aa                	add	a1,a1,a0
    800096f4:	2b611503          	lh	a0,694(sp)
    800096f8:	00a59623          	sh	a0,12(a1)
    800096fc:	0d08                	addi	a0,sp,656
        guard.desc[idx[1]].flags |= VRING_DESC_F_NEXT;
    800096fe:	00008097          	auipc	ra,0x8
    80009702:	c72080e7          	jalr	-910(ra) # 80011370 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h362a59dae1fa4f35E>
    80009706:	eeaa                	sd	a0,344(sp)
    80009708:	a009                	j	8000970a <.LBB3_121+0x92>
    8000970a:	2a013583          	ld	a1,672(sp)
    8000970e:	eaae                	sd	a1,336(sp)
    80009710:	451d                	li	a0,7
    80009712:	50b56563          	bltu	a0,a1,80009c1c <.LBB3_137+0x14>
    80009716:	a009                	j	80009718 <.LBB3_121+0xa0>
    80009718:	6576                	ld	a0,344(sp)
    8000971a:	65d6                	ld	a1,336(sp)
    8000971c:	0592                	slli	a1,a1,0x4
    8000971e:	95aa                	add	a1,a1,a0
    80009720:	00c59503          	lh	a0,12(a1)
    80009724:	00156513          	ori	a0,a0,1
    80009728:	00a59623          	sh	a0,12(a1)
        guard.desc[idx[1]].next = idx[2].try_into().unwrap();
    8000972c:	2a813503          	ld	a0,680(sp)
    80009730:	00002097          	auipc	ra,0x2
    80009734:	2fa080e7          	jalr	762(ra) # 8000ba2a <_ZN53_$LT$T$u20$as$u20$core..convert..TryInto$LT$U$GT$$GT$8try_into17h79444d549eeb58faE>
    80009738:	e2aa                	sd	a0,320(sp)
    8000973a:	e6ae                	sd	a1,328(sp)
    8000973c:	a009                	j	8000973e <.LBB3_121+0xc6>
    8000973e:	65b6                	ld	a1,328(sp)
    80009740:	6516                	ld	a0,320(sp)

0000000080009742 <.LBB3_122>:
    80009742:	0001e617          	auipc	a2,0x1e
    80009746:	05660613          	addi	a2,a2,86 # 80027798 <.L__unnamed_26>
    8000974a:	00003097          	auipc	ra,0x3
    8000974e:	664080e7          	jalr	1636(ra) # 8000cdae <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h42e1173662da7b7dE>
    80009752:	fe2a                	sd	a0,312(sp)
    80009754:	a009                	j	80009756 <.LBB3_122+0x14>
    80009756:	0d08                	addi	a0,sp,656
    80009758:	00008097          	auipc	ra,0x8
    8000975c:	c18080e7          	jalr	-1000(ra) # 80011370 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h362a59dae1fa4f35E>
    80009760:	fa2a                	sd	a0,304(sp)
    80009762:	a009                	j	80009764 <.LBB3_122+0x22>
    80009764:	2a013583          	ld	a1,672(sp)
    80009768:	f62e                	sd	a1,296(sp)
    8000976a:	451d                	li	a0,7
    8000976c:	4cb56363          	bltu	a0,a1,80009c32 <.LBB3_138+0x14>
    80009770:	a009                	j	80009772 <.LBB3_122+0x30>
    80009772:	7572                	ld	a0,312(sp)
    80009774:	75d2                	ld	a1,304(sp)
    80009776:	7632                	ld	a2,296(sp)
    80009778:	0612                	slli	a2,a2,0x4
    8000977a:	95b2                	add	a1,a1,a2
    8000977c:	00a59723          	sh	a0,14(a1)
    80009780:	0d08                	addi	a0,sp,656

        guard.info[idx[0]].status = 0xff;
    80009782:	00008097          	auipc	ra,0x8
    80009786:	bee080e7          	jalr	-1042(ra) # 80011370 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h362a59dae1fa4f35E>
    8000978a:	f22a                	sd	a0,288(sp)
    8000978c:	a009                	j	8000978e <.LBB3_122+0x4c>
    8000978e:	29813583          	ld	a1,664(sp)
    80009792:	ee2e                	sd	a1,280(sp)
    80009794:	451d                	li	a0,7
    80009796:	4ab56963          	bltu	a0,a1,80009c48 <.LBB3_139+0x14>
    8000979a:	a009                	j	8000979c <.LBB3_122+0x5a>
    8000979c:	7512                	ld	a0,288(sp)
    8000979e:	65f2                	ld	a1,280(sp)
    800097a0:	4661                	li	a2,24
    800097a2:	02c585b3          	mul	a1,a1,a2
    800097a6:	952e                	add	a0,a0,a1
    800097a8:	6589                	lui	a1,0x2
    800097aa:	0205859b          	addiw	a1,a1,32
    800097ae:	95aa                	add	a1,a1,a0
    800097b0:	0ff00513          	li	a0,255
    800097b4:	00a58023          	sb	a0,0(a1) # 2000 <.Lline_table_start0+0x46f>
    800097b8:	0d08                	addi	a0,sp,656
        guard.desc[idx[2]].addr = &mut guard.info[idx[0]].status as *mut _ as u64;
    800097ba:	00008097          	auipc	ra,0x8
    800097be:	bb6080e7          	jalr	-1098(ra) # 80011370 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h362a59dae1fa4f35E>
    800097c2:	ea2a                	sd	a0,272(sp)
    800097c4:	a009                	j	800097c6 <.LBB3_122+0x84>
    800097c6:	29813583          	ld	a1,664(sp)
    800097ca:	e62e                	sd	a1,264(sp)
    800097cc:	451d                	li	a0,7
    800097ce:	48b56863          	bltu	a0,a1,80009c5e <.LBB3_140+0x14>
    800097d2:	a009                	j	800097d4 <.LBB3_122+0x92>
    800097d4:	6552                	ld	a0,272(sp)
    800097d6:	65b2                	ld	a1,264(sp)
    800097d8:	4661                	li	a2,24
    800097da:	02c585b3          	mul	a1,a1,a2
    800097de:	952e                	add	a0,a0,a1
    800097e0:	6589                	lui	a1,0x2
    800097e2:	0205859b          	addiw	a1,a1,32
    800097e6:	952e                	add	a0,a0,a1
    800097e8:	fdaa                	sd	a0,248(sp)
    800097ea:	0d08                	addi	a0,sp,656
    800097ec:	00008097          	auipc	ra,0x8
    800097f0:	b84080e7          	jalr	-1148(ra) # 80011370 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h362a59dae1fa4f35E>
    800097f4:	e22a                	sd	a0,256(sp)
    800097f6:	a009                	j	800097f8 <.LBB3_122+0xb6>
    800097f8:	2a813583          	ld	a1,680(sp)
    800097fc:	f9ae                	sd	a1,240(sp)
    800097fe:	451d                	li	a0,7
    80009800:	46b56a63          	bltu	a0,a1,80009c74 <.LBB3_141+0x14>
    80009804:	a009                	j	80009806 <.LBB3_122+0xc4>
    80009806:	756e                	ld	a0,248(sp)
    80009808:	6592                	ld	a1,256(sp)
    8000980a:	764e                	ld	a2,240(sp)
    8000980c:	0612                	slli	a2,a2,0x4
    8000980e:	95b2                	add	a1,a1,a2
    80009810:	e188                	sd	a0,0(a1)
    80009812:	0d08                	addi	a0,sp,656
        guard.desc[idx[2]].len = 1;
    80009814:	00008097          	auipc	ra,0x8
    80009818:	b5c080e7          	jalr	-1188(ra) # 80011370 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h362a59dae1fa4f35E>
    8000981c:	f5aa                	sd	a0,232(sp)
    8000981e:	a009                	j	80009820 <.LBB3_122+0xde>
    80009820:	2a813583          	ld	a1,680(sp)
    80009824:	f1ae                	sd	a1,224(sp)
    80009826:	451d                	li	a0,7
    80009828:	46b56163          	bltu	a0,a1,80009c8a <.LBB3_142+0x14>
    8000982c:	a009                	j	8000982e <.LBB3_122+0xec>
    8000982e:	752e                	ld	a0,232(sp)
    80009830:	758e                	ld	a1,224(sp)
    80009832:	0592                	slli	a1,a1,0x4
    80009834:	95aa                	add	a1,a1,a0
    80009836:	4505                	li	a0,1
    80009838:	c588                	sw	a0,8(a1)
    8000983a:	0d08                	addi	a0,sp,656
        guard.desc[idx[2]].flags = VRING_DESC_F_WRITE;
    8000983c:	00008097          	auipc	ra,0x8
    80009840:	b34080e7          	jalr	-1228(ra) # 80011370 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h362a59dae1fa4f35E>
    80009844:	edaa                	sd	a0,216(sp)
    80009846:	a009                	j	80009848 <.LBB3_122+0x106>
    80009848:	2a813583          	ld	a1,680(sp)
    8000984c:	e9ae                	sd	a1,208(sp)
    8000984e:	451d                	li	a0,7
    80009850:	44b56863          	bltu	a0,a1,80009ca0 <.LBB3_143+0x14>
    80009854:	a009                	j	80009856 <.LBB3_122+0x114>
    80009856:	656e                	ld	a0,216(sp)
    80009858:	65ce                	ld	a1,208(sp)
    8000985a:	0592                	slli	a1,a1,0x4
    8000985c:	95aa                	add	a1,a1,a0
    8000985e:	4509                	li	a0,2
    80009860:	00a59623          	sh	a0,12(a1) # 200c <.Lline_table_start0+0x47b>
    80009864:	0d08                	addi	a0,sp,656
        guard.desc[idx[2]].next = 0;
    80009866:	00008097          	auipc	ra,0x8
    8000986a:	b0a080e7          	jalr	-1270(ra) # 80011370 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h362a59dae1fa4f35E>
    8000986e:	e5aa                	sd	a0,200(sp)
    80009870:	a009                	j	80009872 <.LBB3_122+0x130>
    80009872:	2a813583          	ld	a1,680(sp)
    80009876:	e1ae                	sd	a1,192(sp)
    80009878:	451d                	li	a0,7
    8000987a:	42b56e63          	bltu	a0,a1,80009cb6 <.LBB3_144+0x14>
    8000987e:	a009                	j	80009880 <.LBB3_122+0x13e>
    80009880:	652e                	ld	a0,200(sp)
    80009882:	658e                	ld	a1,192(sp)
    80009884:	0592                	slli	a1,a1,0x4
    80009886:	95aa                	add	a1,a1,a0
    80009888:	4501                	li	a0,0
    8000988a:	00a59723          	sh	a0,14(a1)
    8000988e:	0d08                	addi	a0,sp,656

        // record the buf
        // retrieve it back when the disk finishes with the raw buf data
        guard.info[idx[0]].disk = true;
    80009890:	00008097          	auipc	ra,0x8
    80009894:	ae0080e7          	jalr	-1312(ra) # 80011370 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h362a59dae1fa4f35E>
    80009898:	fd2a                	sd	a0,184(sp)
    8000989a:	a009                	j	8000989c <.LBB3_122+0x15a>
    8000989c:	29813583          	ld	a1,664(sp)
    800098a0:	f92e                	sd	a1,176(sp)
    800098a2:	451d                	li	a0,7
    800098a4:	42b56463          	bltu	a0,a1,80009ccc <.LBB3_145+0x14>
    800098a8:	a009                	j	800098aa <.LBB3_122+0x168>
    800098aa:	27013583          	ld	a1,624(sp)
    800098ae:	756a                	ld	a0,184(sp)
    800098b0:	764a                	ld	a2,176(sp)
    800098b2:	46e1                	li	a3,24
    800098b4:	02d60633          	mul	a2,a2,a3
    800098b8:	9532                	add	a0,a0,a2
    800098ba:	6609                	lui	a2,0x2
    800098bc:	0216061b          	addiw	a2,a2,33
    800098c0:	962a                	add	a2,a2,a0
    800098c2:	4505                	li	a0,1
    800098c4:	00a60023          	sb	a0,0(a2) # 2000 <.Lline_table_start0+0x46f>
        guard.info[idx[0]].buf_channel = Some(buf_raw_data as usize);
    800098c8:	2cb13023          	sd	a1,704(sp)
    800098cc:	2aa13c23          	sd	a0,696(sp)
    800098d0:	0d08                	addi	a0,sp,656
    800098d2:	00008097          	auipc	ra,0x8
    800098d6:	a9e080e7          	jalr	-1378(ra) # 80011370 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h362a59dae1fa4f35E>
    800098da:	f52a                	sd	a0,168(sp)
    800098dc:	a009                	j	800098de <.LBB3_122+0x19c>
    800098de:	29813583          	ld	a1,664(sp)
    800098e2:	f12e                	sd	a1,160(sp)
    800098e4:	451d                	li	a0,7
    800098e6:	3eb56e63          	bltu	a0,a1,80009ce2 <.LBB3_146+0x14>
    800098ea:	a009                	j	800098ec <.LBB3_122+0x1aa>
    800098ec:	752a                	ld	a0,168(sp)
    800098ee:	758a                	ld	a1,160(sp)
    800098f0:	4661                	li	a2,24
    800098f2:	02c585b3          	mul	a1,a1,a2
    800098f6:	952e                	add	a0,a0,a1
    800098f8:	6589                	lui	a1,0x2
    800098fa:	25c1                	addiw	a1,a1,16
    800098fc:	95aa                	add	a1,a1,a0
    800098fe:	2b813603          	ld	a2,696(sp)
    80009902:	2c013503          	ld	a0,704(sp)
    80009906:	e190                	sd	a2,0(a1)
    80009908:	e588                	sd	a0,8(a1)
    8000990a:	0d08                	addi	a0,sp,656

        {
            let i = guard.avail.idx as usize % NUM;
    8000990c:	00008097          	auipc	ra,0x8
    80009910:	9c6080e7          	jalr	-1594(ra) # 800112d2 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h7eb0b551b3d2dabcE>
    80009914:	ed2a                	sd	a0,152(sp)
    80009916:	a009                	j	80009918 <.LBB3_122+0x1d6>
    80009918:	656a                	ld	a0,152(sp)
    8000991a:	08255503          	lhu	a0,130(a0)
    8000991e:	891d                	andi	a0,a0,7
    80009920:	e12a                	sd	a0,128(sp)
    80009922:	34a13823          	sd	a0,848(sp)
            guard.avail.ring[i] = idx[0].try_into().unwrap();
    80009926:	29813503          	ld	a0,664(sp)
    8000992a:	00002097          	auipc	ra,0x2
    8000992e:	100080e7          	jalr	256(ra) # 8000ba2a <_ZN53_$LT$T$u20$as$u20$core..convert..TryInto$LT$U$GT$$GT$8try_into17h79444d549eeb58faE>
    80009932:	e52a                	sd	a0,136(sp)
    80009934:	e92e                	sd	a1,144(sp)
    80009936:	a009                	j	80009938 <.LBB3_122+0x1f6>
    80009938:	65ca                	ld	a1,144(sp)
    8000993a:	652a                	ld	a0,136(sp)

000000008000993c <.LBB3_123>:
    8000993c:	0001e617          	auipc	a2,0x1e
    80009940:	f4c60613          	addi	a2,a2,-180 # 80027888 <.L__unnamed_27>
    80009944:	00003097          	auipc	ra,0x3
    80009948:	46a080e7          	jalr	1130(ra) # 8000cdae <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h42e1173662da7b7dE>
    8000994c:	fcaa                	sd	a0,120(sp)
    8000994e:	a009                	j	80009950 <.LBB3_123+0x14>
    80009950:	0d08                	addi	a0,sp,656
    80009952:	00008097          	auipc	ra,0x8
    80009956:	a1e080e7          	jalr	-1506(ra) # 80011370 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h362a59dae1fa4f35E>
    8000995a:	f8aa                	sd	a0,112(sp)
    8000995c:	a009                	j	8000995e <.LBB3_123+0x22>
    8000995e:	658a                	ld	a1,128(sp)
    80009960:	451d                	li	a0,7
    80009962:	38b56b63          	bltu	a0,a1,80009cf8 <.LBB3_147+0x14>
    80009966:	a009                	j	80009968 <.LBB3_123+0x2c>
    80009968:	7566                	ld	a0,120(sp)
    8000996a:	75c6                	ld	a1,112(sp)
    8000996c:	660a                	ld	a2,128(sp)
    8000996e:	0606                	slli	a2,a2,0x1
    80009970:	95b2                	add	a1,a1,a2
    80009972:	08a59223          	sh	a0,132(a1) # 2084 <.Lline_table_start0+0x70>
    80009976:	4511                	li	a0,4
        }

        fence(Ordering::SeqCst);
    80009978:	2ca10723          	sb	a0,718(sp)
    8000997c:	ffffb097          	auipc	ra,0xffffb
    80009980:	e34080e7          	jalr	-460(ra) # 800047b0 <_ZN4core4sync6atomic5fence17hd2f91624c9f09ce8E>
    80009984:	a009                	j	80009986 <.LBB3_123+0x4a>
    80009986:	0d08                	addi	a0,sp,656

        guard.avail.idx += 1;
    80009988:	00008097          	auipc	ra,0x8
    8000998c:	9e8080e7          	jalr	-1560(ra) # 80011370 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h362a59dae1fa4f35E>
    80009990:	f4aa                	sd	a0,104(sp)
    80009992:	a009                	j	80009994 <.LBB3_123+0x58>
    80009994:	7526                	ld	a0,104(sp)
    80009996:	08255503          	lhu	a0,130(a0)
    8000999a:	00150593          	addi	a1,a0,1
    8000999e:	f0ae                	sd	a1,96(sp)
    800099a0:	6541                	lui	a0,0x10
    800099a2:	357d                	addiw	a0,a0,-1
    800099a4:	8d6d                	and	a0,a0,a1
    800099a6:	36b51463          	bne	a0,a1,80009d0e <.LBB3_149>
    800099aa:	a009                	j	800099ac <.LBB3_123+0x70>
    800099ac:	7506                	ld	a0,96(sp)
    800099ae:	75a6                	ld	a1,104(sp)
    800099b0:	08a59123          	sh	a0,130(a1)
    800099b4:	4511                	li	a0,4

        fence(Ordering::SeqCst);
    800099b6:	2ca107a3          	sb	a0,719(sp)
    800099ba:	ffffb097          	auipc	ra,0xffffb
    800099be:	df6080e7          	jalr	-522(ra) # 800047b0 <_ZN4core4sync6atomic5fence17hd2f91624c9f09ce8E>
    800099c2:	a009                	j	800099c4 <.LBB3_123+0x88>
    800099c4:	05000513          	li	a0,80
    800099c8:	4581                	li	a1,0

        unsafe { write(VIRTIO_MMIO_QUEUE_NOTIFY, 0); }
    800099ca:	00016097          	auipc	ra,0x16
    800099ce:	9ec080e7          	jalr	-1556(ra) # 8001f3b6 <_ZN6kernel6driver11virtio_disk5write17hf82e2458568dd21bE>
    800099d2:	a009                	j	800099d4 <.LBB3_123+0x98>

        // wait for the disk to handle the buf data
        while guard.info[idx[0]].disk {
    800099d4:	a009                	j	800099d6 <.LBB3_123+0x9a>
    800099d6:	0d08                	addi	a0,sp,656
    800099d8:	00008097          	auipc	ra,0x8
    800099dc:	8fa080e7          	jalr	-1798(ra) # 800112d2 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h7eb0b551b3d2dabcE>
    800099e0:	ecaa                	sd	a0,88(sp)
    800099e2:	a009                	j	800099e4 <.LBB3_123+0xa8>
    800099e4:	29813583          	ld	a1,664(sp)
    800099e8:	e8ae                	sd	a1,80(sp)
    800099ea:	451d                	li	a0,7
    800099ec:	32b56f63          	bltu	a0,a1,80009d2a <.LBB3_150+0x14>
    800099f0:	a009                	j	800099f2 <.LBB3_123+0xb6>
    800099f2:	6566                	ld	a0,88(sp)
    800099f4:	65c6                	ld	a1,80(sp)
    800099f6:	4661                	li	a2,24
    800099f8:	02c585b3          	mul	a1,a1,a2
    800099fc:	952e                	add	a0,a0,a1
    800099fe:	6589                	lui	a1,0x2
    80009a00:	0215859b          	addiw	a1,a1,33
    80009a04:	952e                	add	a0,a0,a1
    80009a06:	00054503          	lbu	a0,0(a0) # 10000 <.Lline_table_start0+0x8ac>
    80009a0a:	8905                	andi	a0,a0,1
    80009a0c:	e909                	bnez	a0,80009a1e <.LBB3_124>
    80009a0e:	a009                	j	80009a10 <.LBB3_123+0xd4>
    80009a10:	0d08                	addi	a0,sp,656
            // choose the raw buf data as channel
            unsafe { CPU_MANAGER.myproc().unwrap().sleep(buf_raw_data as usize, guard); }
            guard = self.acquire();
        }

        let buf_channel = guard.info[idx[0]].buf_channel.take();
    80009a12:	00008097          	auipc	ra,0x8
    80009a16:	95e080e7          	jalr	-1698(ra) # 80011370 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h362a59dae1fa4f35E>
    80009a1a:	e4aa                	sd	a0,72(sp)
    80009a1c:	a8a1                	j	80009a74 <.LBB3_125+0x40>

0000000080009a1e <.LBB3_124>:
            unsafe { CPU_MANAGER.myproc().unwrap().sleep(buf_raw_data as usize, guard); }
    80009a1e:	0005a517          	auipc	a0,0x5a
    80009a22:	72250513          	addi	a0,a0,1826 # 80064140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    80009a26:	00008097          	auipc	ra,0x8
    80009a2a:	004080e7          	jalr	4(ra) # 80011a2a <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    80009a2e:	e0aa                	sd	a0,64(sp)
    80009a30:	a009                	j	80009a32 <.LBB3_124+0x14>
    80009a32:	6506                	ld	a0,64(sp)

0000000080009a34 <.LBB3_125>:
    80009a34:	0001e597          	auipc	a1,0x1e
    80009a38:	eb458593          	addi	a1,a1,-332 # 800278e8 <.L__unnamed_28>
    80009a3c:	00005097          	auipc	ra,0x5
    80009a40:	280080e7          	jalr	640(ra) # 8000ecbc <_ZN4core6option15Option$LT$T$GT$6unwrap17h81f0c84c54a80648E>
    80009a44:	fc2a                	sd	a0,56(sp)
    80009a46:	a009                	j	80009a48 <.LBB3_125+0x14>
    80009a48:	27013583          	ld	a1,624(sp)
    80009a4c:	7562                	ld	a0,56(sp)
    80009a4e:	29013603          	ld	a2,656(sp)
    80009a52:	00008097          	auipc	ra,0x8
    80009a56:	d40080e7          	jalr	-704(ra) # 80011792 <_ZN6kernel7process7process11task_struct5sleep17h3e20b1d3f8d47a0dE>
    80009a5a:	a009                	j	80009a5c <.LBB3_125+0x28>
            guard = self.acquire();
    80009a5c:	28013503          	ld	a0,640(sp)
    80009a60:	00007097          	auipc	ra,0x7
    80009a64:	af4080e7          	jalr	-1292(ra) # 80010554 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h922bace5232f6228E>
    80009a68:	f82a                	sd	a0,48(sp)
    80009a6a:	a009                	j	80009a6c <.LBB3_125+0x38>
    80009a6c:	7542                	ld	a0,48(sp)
    80009a6e:	28a13823          	sd	a0,656(sp)
        while guard.info[idx[0]].disk {
    80009a72:	b795                	j	800099d6 <.LBB3_123+0x9a>
        let buf_channel = guard.info[idx[0]].buf_channel.take();
    80009a74:	29813583          	ld	a1,664(sp)
    80009a78:	f42e                	sd	a1,40(sp)
    80009a7a:	451d                	li	a0,7
    80009a7c:	2cb56263          	bltu	a0,a1,80009d40 <.LBB3_151+0x14>
    80009a80:	a009                	j	80009a82 <.LBB3_125+0x4e>
    80009a82:	6526                	ld	a0,72(sp)
    80009a84:	75a2                	ld	a1,40(sp)
    80009a86:	4661                	li	a2,24
    80009a88:	02c585b3          	mul	a1,a1,a2
    80009a8c:	952e                	add	a0,a0,a1
    80009a8e:	6589                	lui	a1,0x2
    80009a90:	25c1                	addiw	a1,a1,16
    80009a92:	952e                	add	a0,a0,a1
    80009a94:	00005097          	auipc	ra,0x5
    80009a98:	b3e080e7          	jalr	-1218(ra) # 8000e5d2 <_ZN4core6option15Option$LT$T$GT$4take17h3f0477f04f3bf4c3E>
    80009a9c:	862a                	mv	a2,a0
    80009a9e:	ec32                	sd	a2,24(sp)
    80009aa0:	862e                	mv	a2,a1
    80009aa2:	f032                	sd	a2,32(sp)
    80009aa4:	34a13c23          	sd	a0,856(sp)
    80009aa8:	36b13023          	sd	a1,864(sp)
    80009aac:	a009                	j	80009aae <.LBB3_125+0x7a>
        debug_assert_eq!(buf_channel.unwrap(), buf_raw_data as usize);
    80009aae:	7582                	ld	a1,32(sp)
    80009ab0:	6562                	ld	a0,24(sp)

0000000080009ab2 <.LBB3_126>:
    80009ab2:	0001e617          	auipc	a2,0x1e
    80009ab6:	e6660613          	addi	a2,a2,-410 # 80027918 <.L__unnamed_29>
    80009aba:	00005097          	auipc	ra,0x5
    80009abe:	346080e7          	jalr	838(ra) # 8000ee00 <_ZN4core6option15Option$LT$T$GT$6unwrap17he97e68f5d459b5f2E>
    80009ac2:	2ea13023          	sd	a0,736(sp)
    80009ac6:	a009                	j	80009ac8 <.LBB3_126+0x16>
    80009ac8:	27013583          	ld	a1,624(sp)
    80009acc:	2eb13423          	sd	a1,744(sp)
    80009ad0:	1590                	addi	a2,sp,736
    80009ad2:	e432                	sd	a2,8(sp)
    80009ad4:	2cc13823          	sd	a2,720(sp)
    80009ad8:	15a8                	addi	a0,sp,744
    80009ada:	e82a                	sd	a0,16(sp)
    80009adc:	2ca13c23          	sd	a0,728(sp)
    80009ae0:	36c13423          	sd	a2,872(sp)
    80009ae4:	36a13823          	sd	a0,880(sp)
    80009ae8:	2e013503          	ld	a0,736(sp)
    80009aec:	02b50463          	beq	a0,a1,80009b14 <.LBB3_127+0x14>
    80009af0:	a009                	j	80009af2 <.LBB3_126+0x40>
    80009af2:	6642                	ld	a2,16(sp)
    80009af4:	65a2                	ld	a1,8(sp)
    80009af6:	4501                	li	a0,0
    80009af8:	2ea10ba3          	sb	a0,759(sp)
    80009afc:	2ea13c23          	sd	a0,760(sp)

0000000080009b00 <.LBB3_127>:
    80009b00:	0001e717          	auipc	a4,0x1e
    80009b04:	e3070713          	addi	a4,a4,-464 # 80027930 <.L__unnamed_30>
    80009b08:	1db4                	addi	a3,sp,760
    80009b0a:	00016097          	auipc	ra,0x16
    80009b0e:	d20080e7          	jalr	-736(ra) # 8001f82a <_ZN4core9panicking13assert_failed17h4e6d74c9d534b647E>
    80009b12:	0000                	unimp
    80009b14:	0d08                	addi	a0,sp,656
        guard.free_chain(idx[0]);
    80009b16:	00008097          	auipc	ra,0x8
    80009b1a:	85a080e7          	jalr	-1958(ra) # 80011370 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h362a59dae1fa4f35E>
    80009b1e:	e02a                	sd	a0,0(sp)
    80009b20:	a009                	j	80009b22 <.LBB3_127+0x22>
    80009b22:	6502                	ld	a0,0(sp)
    80009b24:	29813583          	ld	a1,664(sp)
    80009b28:	00015097          	auipc	ra,0x15
    80009b2c:	58a080e7          	jalr	1418(ra) # 8001f0b2 <_ZN6kernel6driver11virtio_disk4Disk10free_chain17h88621e1c7ba36f26E>
    80009b30:	a009                	j	80009b32 <.LBB3_127+0x32>

        drop(guard);
    80009b32:	29013503          	ld	a0,656(sp)
    80009b36:	00013097          	auipc	ra,0x13
    80009b3a:	474080e7          	jalr	1140(ra) # 8001cfaa <_ZN4core3mem4drop17hf5d8d4b62719f1bfE>
    80009b3e:	a009                	j	80009b40 <.LBB3_127+0x40>
    }
    80009b40:	37813083          	ld	ra,888(sp)
    80009b44:	38010113          	addi	sp,sp,896
    80009b48:	8082                	ret
        let buf0 = &mut guard.ops[idx[0]];
    80009b4a:	23013503          	ld	a0,560(sp)

0000000080009b4e <.LBB3_128>:
    80009b4e:	0001e617          	auipc	a2,0x1e
    80009b52:	b1260613          	addi	a2,a2,-1262 # 80027660 <.L__unnamed_31>
    80009b56:	45a1                	li	a1,8
    80009b58:	00018097          	auipc	ra,0x18
    80009b5c:	5d0080e7          	jalr	1488(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

0000000080009b62 <.LBB3_129>:
        buf0.sector = (buf.read_blockno() as usize * (BSIZE / 512)) as u64;
    80009b62:	0001e517          	auipc	a0,0x1e
    80009b66:	86e50513          	addi	a0,a0,-1938 # 800273d0 <str.1>

0000000080009b6a <.LBB3_130>:
    80009b6a:	0001e617          	auipc	a2,0x1e
    80009b6e:	b0e60613          	addi	a2,a2,-1266 # 80027678 <.L__unnamed_32>
    80009b72:	02100593          	li	a1,33
    80009b76:	00018097          	auipc	ra,0x18
    80009b7a:	586080e7          	jalr	1414(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80009b7e:	0000                	unimp
        guard.desc[idx[0]].addr = buf0 as *mut _ as u64;
    80009b80:	20813503          	ld	a0,520(sp)

0000000080009b84 <.LBB3_131>:
    80009b84:	0001e617          	auipc	a2,0x1e
    80009b88:	b0c60613          	addi	a2,a2,-1268 # 80027690 <.L__unnamed_33>
    80009b8c:	45a1                	li	a1,8
    80009b8e:	00018097          	auipc	ra,0x18
    80009b92:	59a080e7          	jalr	1434(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80009b96:	0000                	unimp
        guard.desc[idx[0]].len = core::mem::size_of::<VirtIOBlkReq>().try_into().unwrap();
    80009b98:	751e                	ld	a0,480(sp)

0000000080009b9a <.LBB3_132>:
    80009b9a:	0001e617          	auipc	a2,0x1e
    80009b9e:	b2660613          	addi	a2,a2,-1242 # 800276c0 <.L__unnamed_34>
    80009ba2:	45a1                	li	a1,8
    80009ba4:	00018097          	auipc	ra,0x18
    80009ba8:	584080e7          	jalr	1412(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80009bac:	0000                	unimp
        guard.desc[idx[0]].flags = VRING_DESC_F_NEXT;
    80009bae:	655e                	ld	a0,464(sp)

0000000080009bb0 <.LBB3_133>:
    80009bb0:	0001e617          	auipc	a2,0x1e
    80009bb4:	b2860613          	addi	a2,a2,-1240 # 800276d8 <.L__unnamed_35>
    80009bb8:	45a1                	li	a1,8
    80009bba:	00018097          	auipc	ra,0x18
    80009bbe:	56e080e7          	jalr	1390(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80009bc2:	0000                	unimp
        guard.desc[idx[0]].next = idx[1].try_into().unwrap();
    80009bc4:	753a                	ld	a0,424(sp)

0000000080009bc6 <.LBB3_134>:
    80009bc6:	0001e617          	auipc	a2,0x1e
    80009bca:	b4260613          	addi	a2,a2,-1214 # 80027708 <.L__unnamed_36>
    80009bce:	45a1                	li	a1,8
    80009bd0:	00018097          	auipc	ra,0x18
    80009bd4:	558080e7          	jalr	1368(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80009bd8:	0000                	unimp
        guard.desc[idx[1]].addr = buf_raw_data as u64;
    80009bda:	657a                	ld	a0,408(sp)

0000000080009bdc <.LBB3_135>:
    80009bdc:	0001e617          	auipc	a2,0x1e
    80009be0:	b4460613          	addi	a2,a2,-1212 # 80027720 <.L__unnamed_37>
    80009be4:	45a1                	li	a1,8
    80009be6:	00018097          	auipc	ra,0x18
    80009bea:	542080e7          	jalr	1346(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80009bee:	0000                	unimp
        guard.desc[idx[1]].len = BSIZE.try_into().unwrap();
    80009bf0:	7556                	ld	a0,368(sp)

0000000080009bf2 <.LBB3_136>:
    80009bf2:	0001e617          	auipc	a2,0x1e
    80009bf6:	b5e60613          	addi	a2,a2,-1186 # 80027750 <.L__unnamed_38>
    80009bfa:	45a1                	li	a1,8
    80009bfc:	00018097          	auipc	ra,0x18
    80009c00:	52c080e7          	jalr	1324(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80009c04:	0000                	unimp
        guard.desc[idx[1]].flags = if writing { 0 } else { VRING_DESC_F_WRITE };
    80009c06:	7516                	ld	a0,352(sp)

0000000080009c08 <.LBB3_137>:
    80009c08:	0001e617          	auipc	a2,0x1e
    80009c0c:	b6060613          	addi	a2,a2,-1184 # 80027768 <.L__unnamed_39>
    80009c10:	45a1                	li	a1,8
    80009c12:	00018097          	auipc	ra,0x18
    80009c16:	516080e7          	jalr	1302(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80009c1a:	0000                	unimp
        guard.desc[idx[1]].flags |= VRING_DESC_F_NEXT;
    80009c1c:	6556                	ld	a0,336(sp)

0000000080009c1e <.LBB3_138>:
    80009c1e:	0001e617          	auipc	a2,0x1e
    80009c22:	b6260613          	addi	a2,a2,-1182 # 80027780 <.L__unnamed_40>
    80009c26:	45a1                	li	a1,8
    80009c28:	00018097          	auipc	ra,0x18
    80009c2c:	500080e7          	jalr	1280(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80009c30:	0000                	unimp
        guard.desc[idx[1]].next = idx[2].try_into().unwrap();
    80009c32:	7532                	ld	a0,296(sp)

0000000080009c34 <.LBB3_139>:
    80009c34:	0001e617          	auipc	a2,0x1e
    80009c38:	b7c60613          	addi	a2,a2,-1156 # 800277b0 <.L__unnamed_41>
    80009c3c:	45a1                	li	a1,8
    80009c3e:	00018097          	auipc	ra,0x18
    80009c42:	4ea080e7          	jalr	1258(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80009c46:	0000                	unimp
        guard.info[idx[0]].status = 0xff;
    80009c48:	6572                	ld	a0,280(sp)

0000000080009c4a <.LBB3_140>:
    80009c4a:	0001e617          	auipc	a2,0x1e
    80009c4e:	b7e60613          	addi	a2,a2,-1154 # 800277c8 <.L__unnamed_42>
    80009c52:	45a1                	li	a1,8
    80009c54:	00018097          	auipc	ra,0x18
    80009c58:	4d4080e7          	jalr	1236(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80009c5c:	0000                	unimp
        guard.desc[idx[2]].addr = &mut guard.info[idx[0]].status as *mut _ as u64;
    80009c5e:	6532                	ld	a0,264(sp)

0000000080009c60 <.LBB3_141>:
    80009c60:	0001e617          	auipc	a2,0x1e
    80009c64:	b8060613          	addi	a2,a2,-1152 # 800277e0 <.L__unnamed_43>
    80009c68:	45a1                	li	a1,8
    80009c6a:	00018097          	auipc	ra,0x18
    80009c6e:	4be080e7          	jalr	1214(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80009c72:	0000                	unimp
    80009c74:	754e                	ld	a0,240(sp)

0000000080009c76 <.LBB3_142>:
    80009c76:	0001e617          	auipc	a2,0x1e
    80009c7a:	b8260613          	addi	a2,a2,-1150 # 800277f8 <.L__unnamed_44>
    80009c7e:	45a1                	li	a1,8
    80009c80:	00018097          	auipc	ra,0x18
    80009c84:	4a8080e7          	jalr	1192(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80009c88:	0000                	unimp
        guard.desc[idx[2]].len = 1;
    80009c8a:	750e                	ld	a0,224(sp)

0000000080009c8c <.LBB3_143>:
    80009c8c:	0001e617          	auipc	a2,0x1e
    80009c90:	b8460613          	addi	a2,a2,-1148 # 80027810 <.L__unnamed_45>
    80009c94:	45a1                	li	a1,8
    80009c96:	00018097          	auipc	ra,0x18
    80009c9a:	492080e7          	jalr	1170(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80009c9e:	0000                	unimp
        guard.desc[idx[2]].flags = VRING_DESC_F_WRITE;
    80009ca0:	654e                	ld	a0,208(sp)

0000000080009ca2 <.LBB3_144>:
    80009ca2:	0001e617          	auipc	a2,0x1e
    80009ca6:	b8660613          	addi	a2,a2,-1146 # 80027828 <.L__unnamed_46>
    80009caa:	45a1                	li	a1,8
    80009cac:	00018097          	auipc	ra,0x18
    80009cb0:	47c080e7          	jalr	1148(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80009cb4:	0000                	unimp
        guard.desc[idx[2]].next = 0;
    80009cb6:	650e                	ld	a0,192(sp)

0000000080009cb8 <.LBB3_145>:
    80009cb8:	0001e617          	auipc	a2,0x1e
    80009cbc:	b8860613          	addi	a2,a2,-1144 # 80027840 <.L__unnamed_47>
    80009cc0:	45a1                	li	a1,8
    80009cc2:	00018097          	auipc	ra,0x18
    80009cc6:	466080e7          	jalr	1126(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80009cca:	0000                	unimp
        guard.info[idx[0]].disk = true;
    80009ccc:	754a                	ld	a0,176(sp)

0000000080009cce <.LBB3_146>:
    80009cce:	0001e617          	auipc	a2,0x1e
    80009cd2:	b8a60613          	addi	a2,a2,-1142 # 80027858 <.L__unnamed_48>
    80009cd6:	45a1                	li	a1,8
    80009cd8:	00018097          	auipc	ra,0x18
    80009cdc:	450080e7          	jalr	1104(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80009ce0:	0000                	unimp
        guard.info[idx[0]].buf_channel = Some(buf_raw_data as usize);
    80009ce2:	750a                	ld	a0,160(sp)

0000000080009ce4 <.LBB3_147>:
    80009ce4:	0001e617          	auipc	a2,0x1e
    80009ce8:	b8c60613          	addi	a2,a2,-1140 # 80027870 <.L__unnamed_49>
    80009cec:	45a1                	li	a1,8
    80009cee:	00018097          	auipc	ra,0x18
    80009cf2:	43a080e7          	jalr	1082(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80009cf6:	0000                	unimp
            guard.avail.ring[i] = idx[0].try_into().unwrap();
    80009cf8:	650a                	ld	a0,128(sp)

0000000080009cfa <.LBB3_148>:
    80009cfa:	0001e617          	auipc	a2,0x1e
    80009cfe:	ba660613          	addi	a2,a2,-1114 # 800278a0 <.L__unnamed_50>
    80009d02:	45a1                	li	a1,8
    80009d04:	00018097          	auipc	ra,0x18
    80009d08:	424080e7          	jalr	1060(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

0000000080009d0e <.LBB3_149>:
        guard.avail.idx += 1;
    80009d0e:	0001d517          	auipc	a0,0x1d
    80009d12:	68250513          	addi	a0,a0,1666 # 80027390 <str.0>

0000000080009d16 <.LBB3_150>:
    80009d16:	0001e617          	auipc	a2,0x1e
    80009d1a:	ba260613          	addi	a2,a2,-1118 # 800278b8 <.L__unnamed_51>
    80009d1e:	45f1                	li	a1,28
    80009d20:	00018097          	auipc	ra,0x18
    80009d24:	3dc080e7          	jalr	988(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80009d28:	0000                	unimp
        while guard.info[idx[0]].disk {
    80009d2a:	6546                	ld	a0,80(sp)

0000000080009d2c <.LBB3_151>:
    80009d2c:	0001e617          	auipc	a2,0x1e
    80009d30:	ba460613          	addi	a2,a2,-1116 # 800278d0 <.L__unnamed_52>
    80009d34:	45a1                	li	a1,8
    80009d36:	00018097          	auipc	ra,0x18
    80009d3a:	3f2080e7          	jalr	1010(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80009d3e:	0000                	unimp
        let buf_channel = guard.info[idx[0]].buf_channel.take();
    80009d40:	7522                	ld	a0,40(sp)

0000000080009d42 <.LBB3_152>:
    80009d42:	0001e617          	auipc	a2,0x1e
    80009d46:	bbe60613          	addi	a2,a2,-1090 # 80027900 <.L__unnamed_53>
    80009d4a:	45a1                	li	a1,8
    80009d4c:	00018097          	auipc	ra,0x18
    80009d50:	3dc080e7          	jalr	988(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel6driver4uart84_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..driver..uart..Uart$GT$$GT$4intr17h862db3ca167d2b66E:

0000000080009d56 <_ZN6kernel6driver4uart84_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..driver..uart..Uart$GT$$GT$4intr17h862db3ca167d2b66E>:

impl Spinlock<Uart> {
    /// Handle a uart interrupt, raised because input has
    /// arrived, or the uart is ready for more output, or
    /// both, called from trap.rs
    pub fn intr(&self) {
    80009d56:	7139                	addi	sp,sp,-64
    80009d58:	fc06                	sd	ra,56(sp)
    80009d5a:	ec2a                	sd	a0,24(sp)
    80009d5c:	f42a                	sd	a0,40(sp)
    80009d5e:	a009                	j	80009d60 <_ZN6kernel6driver4uart84_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..driver..uart..Uart$GT$$GT$4intr17h862db3ca167d2b66E+0xa>
    80009d60:	10000537          	lui	a0,0x10000
    80009d64:	2515                	addiw	a0,a0,5
        loop {
            // read and process incoming characters. 
            let c: u8;
            if read_reg(UART_BASE_ADDR + LSR) & 1 > 0 {
    80009d66:	00011097          	auipc	ra,0x11
    80009d6a:	78c080e7          	jalr	1932(ra) # 8001b4f2 <_ZN6kernel6driver4uart8read_reg17h6cf7d47ea5c47590E>
    80009d6e:	e82a                	sd	a0,16(sp)
    80009d70:	a009                	j	80009d72 <_ZN6kernel6driver4uart84_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..driver..uart..Uart$GT$$GT$4intr17h862db3ca167d2b66E+0x1c>
    80009d72:	6542                	ld	a0,16(sp)
    80009d74:	8905                	andi	a0,a0,1
    80009d76:	4581                	li	a1,0
    80009d78:	00b50b63          	beq	a0,a1,80009d8e <_ZN6kernel6driver4uart84_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..driver..uart..Uart$GT$$GT$4intr17h862db3ca167d2b66E+0x38>
    80009d7c:	a009                	j	80009d7e <_ZN6kernel6driver4uart84_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..driver..uart..Uart$GT$$GT$4intr17h862db3ca167d2b66E+0x28>
    80009d7e:	10000537          	lui	a0,0x10000
                c = read_reg(UART_BASE_ADDR + RHR)
    80009d82:	00011097          	auipc	ra,0x11
    80009d86:	770080e7          	jalr	1904(ra) # 8001b4f2 <_ZN6kernel6driver4uart8read_reg17h6cf7d47ea5c47590E>
    80009d8a:	e42a                	sd	a0,8(sp)
    80009d8c:	a801                	j	80009d9c <_ZN6kernel6driver4uart84_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..driver..uart..Uart$GT$$GT$4intr17h862db3ca167d2b66E+0x46>
                break;
            }
            console_intr(c);
        }
        // transmit
        self.acquire().transmit();
    80009d8e:	6562                	ld	a0,24(sp)
    80009d90:	00006097          	auipc	ra,0x6
    80009d94:	284080e7          	jalr	644(ra) # 80010014 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h007ac3682185ef97E>
    80009d98:	f02a                	sd	a0,32(sp)
    80009d9a:	a811                	j	80009dae <_ZN6kernel6driver4uart84_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..driver..uart..Uart$GT$$GT$4intr17h862db3ca167d2b66E+0x58>
                c = read_reg(UART_BASE_ADDR + RHR)
    80009d9c:	6522                	ld	a0,8(sp)
    80009d9e:	02a10ba3          	sb	a0,55(sp)
            console_intr(c);
    80009da2:	ffffa097          	auipc	ra,0xffffa
    80009da6:	4b0080e7          	jalr	1200(ra) # 80004252 <_ZN6kernel6driver7console12console_intr17hcdedd3169cb49f5fE>
    80009daa:	a009                	j	80009dac <_ZN6kernel6driver4uart84_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..driver..uart..Uart$GT$$GT$4intr17h862db3ca167d2b66E+0x56>
        loop {
    80009dac:	bf55                	j	80009d60 <_ZN6kernel6driver4uart84_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..driver..uart..Uart$GT$$GT$4intr17h862db3ca167d2b66E+0xa>
    80009dae:	1008                	addi	a0,sp,32
        self.acquire().transmit();
    80009db0:	00007097          	auipc	ra,0x7
    80009db4:	69e080e7          	jalr	1694(ra) # 8001144e <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hce69ac52326dbcadE>
    80009db8:	e02a                	sd	a0,0(sp)
    80009dba:	a009                	j	80009dbc <_ZN6kernel6driver4uart84_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..driver..uart..Uart$GT$$GT$4intr17h862db3ca167d2b66E+0x66>
    80009dbc:	6502                	ld	a0,0(sp)
    80009dbe:	00011097          	auipc	ra,0x11
    80009dc2:	5be080e7          	jalr	1470(ra) # 8001b37c <_ZN6kernel6driver4uart4Uart8transmit17h1cf1c52f0e7bc086E>
    80009dc6:	a009                	j	80009dc8 <_ZN6kernel6driver4uart84_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..driver..uart..Uart$GT$$GT$4intr17h862db3ca167d2b66E+0x72>
    80009dc8:	1008                	addi	a0,sp,32
    80009dca:	ffffd097          	auipc	ra,0xffffd
    80009dce:	2aa080e7          	jalr	682(ra) # 80007074 <_ZN4core3ptr92drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..driver..uart..Uart$GT$$GT$17h4785ee23048b5bddE>
    80009dd2:	a009                	j	80009dd4 <_ZN6kernel6driver4uart84_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..driver..uart..Uart$GT$$GT$4intr17h862db3ca167d2b66E+0x7e>
    }
    80009dd4:	70e2                	ld	ra,56(sp)
    80009dd6:	6121                	addi	sp,sp,64
    80009dd8:	8082                	ret

Disassembly of section .text._ZN6kernel6driver4uart84_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..driver..uart..Uart$GT$$GT$4putc17h6cd19d349a1fe87bE:

0000000080009dda <_ZN6kernel6driver4uart84_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..driver..uart..Uart$GT$$GT$4putc17h6cd19d349a1fe87bE>:


    /// Put a u8 to the uart buffer(in the kernel). 
    /// It might sleep if the buffer is full. 
    pub fn putc(&self, c: u8) {
    80009dda:	7155                	addi	sp,sp,-208
    80009ddc:	e586                	sd	ra,200(sp)
    80009dde:	f8aa                	sd	a0,112(sp)
    80009de0:	862e                	mv	a2,a1
    80009de2:	fcb2                	sd	a2,120(sp)
    80009de4:	f52a                	sd	a0,168(sp)
    80009de6:	0ab10ba3          	sb	a1,183(sp)
        let mut uart = self.acquire();
    80009dea:	00006097          	auipc	ra,0x6
    80009dee:	22a080e7          	jalr	554(ra) # 80010014 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h007ac3682185ef97E>
    80009df2:	e12a                	sd	a0,128(sp)
    80009df4:	a009                	j	80009df6 <_ZN6kernel6driver4uart84_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..driver..uart..Uart$GT$$GT$4putc17h6cd19d349a1fe87bE+0x1c>
    80009df6:	4581                	li	a1,0

        if PANICKED.load(Ordering::Relaxed) {
    80009df8:	08b107a3          	sb	a1,143(sp)

0000000080009dfc <.LBB5_26>:
    80009dfc:	0005a517          	auipc	a0,0x5a
    80009e00:	78450513          	addi	a0,a0,1924 # 80064580 <_ZN6kernel6driver7console8PANICKED17hbdbbad2548440929E>
    80009e04:	ffffb097          	auipc	ra,0xffffb
    80009e08:	86a080e7          	jalr	-1942(ra) # 8000466e <_ZN4core4sync6atomic10AtomicBool4load17h49a663f50dd66935E>
    80009e0c:	f4aa                	sd	a0,104(sp)
    80009e0e:	a009                	j	80009e10 <.LBB5_26+0x14>
    80009e10:	7526                	ld	a0,104(sp)
    80009e12:	e119                	bnez	a0,80009e18 <.LBB5_26+0x1c>
    80009e14:	a009                	j	80009e16 <.LBB5_26+0x1a>
            loop{}
        }

        loop {
    80009e16:	a011                	j	80009e1a <.LBB5_26+0x1e>
            loop{}
    80009e18:	a001                	j	80009e18 <.LBB5_26+0x1c>
    80009e1a:	0108                	addi	a0,sp,128
            if uart.write_index == uart.read_index + Wrapping(UART_BUF_SIZE) {
    80009e1c:	00007097          	auipc	ra,0x7
    80009e20:	514080e7          	jalr	1300(ra) # 80011330 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h9affced61e721535E>
    80009e24:	f0aa                	sd	a0,96(sp)
    80009e26:	a009                	j	80009e28 <.LBB5_26+0x2c>
    80009e28:	7506                	ld	a0,96(sp)
    80009e2a:	e8aa                	sd	a0,80(sp)
    80009e2c:	0108                	addi	a0,sp,128
    80009e2e:	00007097          	auipc	ra,0x7
    80009e32:	502080e7          	jalr	1282(ra) # 80011330 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h9affced61e721535E>
    80009e36:	ecaa                	sd	a0,88(sp)
    80009e38:	a009                	j	80009e3a <.LBB5_26+0x3e>
    80009e3a:	6566                	ld	a0,88(sp)
    80009e3c:	6508                	ld	a0,8(a0)
    80009e3e:	02000593          	li	a1,32
    80009e42:	ed2e                	sd	a1,152(sp)
    80009e44:	ffffd097          	auipc	ra,0xffffd
    80009e48:	5d4080e7          	jalr	1492(ra) # 80007418 <_ZN84_$LT$core..num..wrapping..Wrapping$LT$usize$GT$$u20$as$u20$core..ops..arith..Add$GT$3add17hc13ca841e8f8e9ddE>
    80009e4c:	e92a                	sd	a0,144(sp)
    80009e4e:	a009                	j	80009e50 <.LBB5_26+0x54>
    80009e50:	6546                	ld	a0,80(sp)
    80009e52:	090c                	addi	a1,sp,144
    80009e54:	00005097          	auipc	ra,0x5
    80009e58:	734080e7          	jalr	1844(ra) # 8000f588 <_ZN79_$LT$core..num..wrapping..Wrapping$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h94523e3cd63d6752E>
    80009e5c:	e4aa                	sd	a0,72(sp)
    80009e5e:	a009                	j	80009e60 <.LBB5_26+0x64>
    80009e60:	6526                	ld	a0,72(sp)
    80009e62:	4581                	li	a1,0
    80009e64:	00b50d63          	beq	a0,a1,80009e7e <.LBB5_27+0x14>
    80009e68:	a009                	j	80009e6a <.LBB5_27>

0000000080009e6a <.LBB5_27>:
                let p = unsafe {
                    CPU_MANAGER.myproc().expect("Fail to get my process.")
    80009e6a:	0005a517          	auipc	a0,0x5a
    80009e6e:	2d650513          	addi	a0,a0,726 # 80064140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    80009e72:	00008097          	auipc	ra,0x8
    80009e76:	bb8080e7          	jalr	-1096(ra) # 80011a2a <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    80009e7a:	e0aa                	sd	a0,64(sp)
    80009e7c:	a801                	j	80009e8c <.LBB5_27+0x22>
    80009e7e:	0108                	addi	a0,sp,128
                };

                p.sleep(&uart.read_index as *const _ as usize, uart);
                uart = self.acquire();
            } else {
                let write_index = uart.write_index.0 % UART_BUF_SIZE;
    80009e80:	00007097          	auipc	ra,0x7
    80009e84:	4b0080e7          	jalr	1200(ra) # 80011330 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h9affced61e721535E>
    80009e88:	fc2a                	sd	a0,56(sp)
    80009e8a:	a8a9                	j	80009ee4 <.LBB5_29+0x4e>
                    CPU_MANAGER.myproc().expect("Fail to get my process.")
    80009e8c:	6506                	ld	a0,64(sp)

0000000080009e8e <.LBB5_28>:
    80009e8e:	0001e597          	auipc	a1,0x1e
    80009e92:	ad258593          	addi	a1,a1,-1326 # 80027960 <.L__unnamed_54>

0000000080009e96 <.LBB5_29>:
    80009e96:	0001e697          	auipc	a3,0x1e
    80009e9a:	afa68693          	addi	a3,a3,-1286 # 80027990 <.L__unnamed_55>
    80009e9e:	465d                	li	a2,23
    80009ea0:	00005097          	auipc	ra,0x5
    80009ea4:	bfc080e7          	jalr	-1028(ra) # 8000ea9c <_ZN4core6option15Option$LT$T$GT$6expect17h5cc0070b74d715b8E>
    80009ea8:	f82a                	sd	a0,48(sp)
    80009eaa:	a009                	j	80009eac <.LBB5_29+0x16>
    80009eac:	7542                	ld	a0,48(sp)
    80009eae:	fd2a                	sd	a0,184(sp)
    80009eb0:	0108                	addi	a0,sp,128
                p.sleep(&uart.read_index as *const _ as usize, uart);
    80009eb2:	00007097          	auipc	ra,0x7
    80009eb6:	47e080e7          	jalr	1150(ra) # 80011330 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h9affced61e721535E>
    80009eba:	f42a                	sd	a0,40(sp)
    80009ebc:	a009                	j	80009ebe <.LBB5_29+0x28>
    80009ebe:	7542                	ld	a0,48(sp)
    80009ec0:	75a2                	ld	a1,40(sp)
    80009ec2:	05a1                	addi	a1,a1,8
    80009ec4:	660a                	ld	a2,128(sp)
    80009ec6:	00008097          	auipc	ra,0x8
    80009eca:	9e4080e7          	jalr	-1564(ra) # 800118aa <_ZN6kernel7process7process11task_struct5sleep17ha46e5892ef284241E>
    80009ece:	a009                	j	80009ed0 <.LBB5_29+0x3a>
                uart = self.acquire();
    80009ed0:	7546                	ld	a0,112(sp)
    80009ed2:	00006097          	auipc	ra,0x6
    80009ed6:	142080e7          	jalr	322(ra) # 80010014 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h007ac3682185ef97E>
    80009eda:	f02a                	sd	a0,32(sp)
    80009edc:	a009                	j	80009ede <.LBB5_29+0x48>
    80009ede:	7502                	ld	a0,32(sp)
    80009ee0:	e12a                	sd	a0,128(sp)
        loop {
    80009ee2:	bf25                	j	80009e1a <.LBB5_26+0x1e>
                let write_index = uart.write_index.0 % UART_BUF_SIZE;
    80009ee4:	7562                	ld	a0,56(sp)
    80009ee6:	6108                	ld	a0,0(a0)
    80009ee8:	897d                	andi	a0,a0,31
    80009eea:	e82a                	sd	a0,16(sp)
    80009eec:	e1aa                	sd	a0,192(sp)
    80009eee:	0108                	addi	a0,sp,128
                uart.buf[write_index] = c;
    80009ef0:	00007097          	auipc	ra,0x7
    80009ef4:	55e080e7          	jalr	1374(ra) # 8001144e <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hce69ac52326dbcadE>
    80009ef8:	ec2a                	sd	a0,24(sp)
    80009efa:	a009                	j	80009efc <.LBB5_29+0x66>
    80009efc:	65c2                	ld	a1,16(sp)
    80009efe:	457d                	li	a0,31
    80009f00:	04b56e63          	bltu	a0,a1,80009f5c <.LBB5_29+0xc6>
    80009f04:	a009                	j	80009f06 <.LBB5_29+0x70>
    80009f06:	7566                	ld	a0,120(sp)
    80009f08:	65e2                	ld	a1,24(sp)
    80009f0a:	6642                	ld	a2,16(sp)
    80009f0c:	95b2                	add	a1,a1,a2
    80009f0e:	00a58823          	sb	a0,16(a1)
    80009f12:	0108                	addi	a0,sp,128
                uart.write_index += Wrapping(1);
    80009f14:	00007097          	auipc	ra,0x7
    80009f18:	53a080e7          	jalr	1338(ra) # 8001144e <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hce69ac52326dbcadE>
    80009f1c:	e42a                	sd	a0,8(sp)
    80009f1e:	a009                	j	80009f20 <.LBB5_29+0x8a>
    80009f20:	6522                	ld	a0,8(sp)
    80009f22:	4585                	li	a1,1
    80009f24:	f12e                	sd	a1,160(sp)
    80009f26:	ffffd097          	auipc	ra,0xffffd
    80009f2a:	52e080e7          	jalr	1326(ra) # 80007454 <_ZN90_$LT$core..num..wrapping..Wrapping$LT$usize$GT$$u20$as$u20$core..ops..arith..AddAssign$GT$10add_assign17hc731864567f3481aE>
    80009f2e:	a009                	j	80009f30 <.LBB5_29+0x9a>
    80009f30:	0108                	addi	a0,sp,128
                uart.transmit();
    80009f32:	00007097          	auipc	ra,0x7
    80009f36:	51c080e7          	jalr	1308(ra) # 8001144e <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hce69ac52326dbcadE>
    80009f3a:	e02a                	sd	a0,0(sp)
    80009f3c:	a009                	j	80009f3e <.LBB5_29+0xa8>
    80009f3e:	6502                	ld	a0,0(sp)
    80009f40:	00011097          	auipc	ra,0x11
    80009f44:	43c080e7          	jalr	1084(ra) # 8001b37c <_ZN6kernel6driver4uart4Uart8transmit17h1cf1c52f0e7bc086E>
    80009f48:	a009                	j	80009f4a <.LBB5_29+0xb4>
    80009f4a:	0108                	addi	a0,sp,128
                break;
            }
        }
    }
    80009f4c:	ffffd097          	auipc	ra,0xffffd
    80009f50:	128080e7          	jalr	296(ra) # 80007074 <_ZN4core3ptr92drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..driver..uart..Uart$GT$$GT$17h4785ee23048b5bddE>
    80009f54:	a009                	j	80009f56 <.LBB5_29+0xc0>
    80009f56:	60ae                	ld	ra,200(sp)
    80009f58:	6169                	addi	sp,sp,208
    80009f5a:	8082                	ret
                uart.buf[write_index] = c;
    80009f5c:	6542                	ld	a0,16(sp)

0000000080009f5e <.LBB5_30>:
    80009f5e:	0001e617          	auipc	a2,0x1e
    80009f62:	a4a60613          	addi	a2,a2,-1462 # 800279a8 <.L__unnamed_56>
    80009f66:	02000593          	li	a1,32
    80009f6a:	00018097          	auipc	ra,0x18
    80009f6e:	1be080e7          	jalr	446(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel6memory13PageAllocator10new_zeroed17h849e935775a724f6E:

0000000080009f74 <_ZN6kernel6memory13PageAllocator10new_zeroed17h849e935775a724f6E>:
use crate::misc::mem_copy;

use alloc::{boxed::Box, vec};

pub trait PageAllocator: Sized {
    unsafe fn new_zeroed() -> usize {
    80009f74:	7179                	addi	sp,sp,-48
        let boxed_page = Box::<Self>::new_zeroed().assume_init();
    80009f76:	f406                	sd	ra,40(sp)
    80009f78:	00011097          	auipc	ra,0x11
    80009f7c:	742080e7          	jalr	1858(ra) # 8001b6ba <_ZN5alloc5boxed12Box$LT$T$GT$10new_zeroed17h2dc288bcc805675fE>
    80009f80:	e82a                	sd	a0,16(sp)
    80009f82:	a009                	j	80009f84 <_ZN6kernel6memory13PageAllocator10new_zeroed17h849e935775a724f6E+0x10>
    80009f84:	6542                	ld	a0,16(sp)
    80009f86:	00012097          	auipc	ra,0x12
    80009f8a:	318080e7          	jalr	792(ra) # 8001c29e <_ZN5alloc5boxed60Box$LT$core..mem..maybe_uninit..MaybeUninit$LT$T$GT$$C$A$GT$11assume_init17h35c82a9a8f43ab52E>
    80009f8e:	85aa                	mv	a1,a0
    80009f90:	e42e                	sd	a1,8(sp)
    80009f92:	ec2a                	sd	a0,24(sp)
    80009f94:	a009                	j	80009f96 <_ZN6kernel6memory13PageAllocator10new_zeroed17h849e935775a724f6E+0x22>
        let ptr = Box::into_raw(boxed_page) as usize;
    80009f96:	6522                	ld	a0,8(sp)
    80009f98:	00012097          	auipc	ra,0x12
    80009f9c:	272080e7          	jalr	626(ra) # 8001c20a <_ZN5alloc5boxed16Box$LT$T$C$A$GT$8into_raw17h4b72114c3b8b546bE>
    80009fa0:	e02a                	sd	a0,0(sp)
    80009fa2:	a009                	j	80009fa4 <_ZN6kernel6memory13PageAllocator10new_zeroed17h849e935775a724f6E+0x30>
    80009fa4:	6502                	ld	a0,0(sp)
    80009fa6:	f02a                	sd	a0,32(sp)
        ptr
    }
    80009fa8:	70a2                	ld	ra,40(sp)
    80009faa:	6145                	addi	sp,sp,48
    80009fac:	8082                	ret

Disassembly of section .text._ZN6kernel6memory13PageAllocator10new_zeroed17hbc99bdbca8d1d931E:

0000000080009fae <_ZN6kernel6memory13PageAllocator10new_zeroed17hbc99bdbca8d1d931E>:
    unsafe fn new_zeroed() -> usize {
    80009fae:	7179                	addi	sp,sp,-48
        let boxed_page = Box::<Self>::new_zeroed().assume_init();
    80009fb0:	f406                	sd	ra,40(sp)
    80009fb2:	00011097          	auipc	ra,0x11
    80009fb6:	720080e7          	jalr	1824(ra) # 8001b6d2 <_ZN5alloc5boxed12Box$LT$T$GT$10new_zeroed17ha7605ec5087df013E>
    80009fba:	e82a                	sd	a0,16(sp)
    80009fbc:	a009                	j	80009fbe <_ZN6kernel6memory13PageAllocator10new_zeroed17hbc99bdbca8d1d931E+0x10>
    80009fbe:	6542                	ld	a0,16(sp)
    80009fc0:	00012097          	auipc	ra,0x12
    80009fc4:	28a080e7          	jalr	650(ra) # 8001c24a <_ZN5alloc5boxed60Box$LT$core..mem..maybe_uninit..MaybeUninit$LT$T$GT$$C$A$GT$11assume_init17h22cceebd78df14b7E>
    80009fc8:	85aa                	mv	a1,a0
    80009fca:	e42e                	sd	a1,8(sp)
    80009fcc:	ec2a                	sd	a0,24(sp)
    80009fce:	a009                	j	80009fd0 <_ZN6kernel6memory13PageAllocator10new_zeroed17hbc99bdbca8d1d931E+0x22>
        let ptr = Box::into_raw(boxed_page) as usize;
    80009fd0:	6522                	ld	a0,8(sp)
    80009fd2:	00012097          	auipc	ra,0x12
    80009fd6:	258080e7          	jalr	600(ra) # 8001c22a <_ZN5alloc5boxed16Box$LT$T$C$A$GT$8into_raw17hcc7ebe92239a3cf2E>
    80009fda:	e02a                	sd	a0,0(sp)
    80009fdc:	a009                	j	80009fde <_ZN6kernel6memory13PageAllocator10new_zeroed17hbc99bdbca8d1d931E+0x30>
    80009fde:	6502                	ld	a0,0(sp)
    80009fe0:	f02a                	sd	a0,32(sp)
    }
    80009fe2:	70a2                	ld	ra,40(sp)
    80009fe4:	6145                	addi	sp,sp,48
    80009fe6:	8082                	ret

Disassembly of section .text._ZN6kernel2fs4pipe4Pipe5alloc17h6a6be38aac05d699E:

0000000080009fe8 <_ZN6kernel2fs4pipe4Pipe5alloc17h6a6be38aac05d699E>:
    /// write fd is still open
    write_open: bool
}

impl Pipe {
    pub unsafe fn alloc(rf: *mut *mut VFile, wf: *mut *mut VFile) -> Self {
    80009fe8:	ce010113          	addi	sp,sp,-800
        let pipedata = unsafe{ *PipeData::alloc() }; 
        let mut pipe = Self {
    80009fec:	30113c23          	sd	ra,792(sp)
    80009ff0:	e832                	sd	a2,16(sp)
    80009ff2:	ec2e                	sd	a1,24(sp)
    80009ff4:	f02a                	sd	a0,32(sp)
    80009ff6:	30b13423          	sd	a1,776(sp)
    80009ffa:	30c13823          	sd	a2,784(sp)
        let pipedata = unsafe{ *PipeData::alloc() }; 
    80009ffe:	00000097          	auipc	ra,0x0
    8000a002:	6a8080e7          	jalr	1704(ra) # 8000a6a6 <_ZN6kernel2fs4pipe8PipeData5alloc17h6739b2f9d9d21ef0E>
    8000a006:	f42a                	sd	a0,40(sp)
    8000a008:	a009                	j	8000a00a <_ZN6kernel2fs4pipe4Pipe5alloc17h6a6be38aac05d699E+0x22>
    8000a00a:	75a2                	ld	a1,40(sp)
    8000a00c:	1808                	addi	a0,sp,48
    8000a00e:	21800613          	li	a2,536
    8000a012:	0001b097          	auipc	ra,0x1b
    8000a016:	028080e7          	jalr	40(ra) # 8002503a <memcpy>
            pipe: PipeData::alloc(),
    8000a01a:	00000097          	auipc	ra,0x0
    8000a01e:	68c080e7          	jalr	1676(ra) # 8000a6a6 <_ZN6kernel2fs4pipe8PipeData5alloc17h6739b2f9d9d21ef0E>
    8000a022:	e42a                	sd	a0,8(sp)
    8000a024:	a009                	j	8000a026 <.LBB0_8>

000000008000a026 <.LBB0_8>:
            pipe_lock: Spinlock::new((), "pipe")
    8000a026:	0001c597          	auipc	a1,0x1c
    8000a02a:	5b258593          	addi	a1,a1,1458 # 800265d8 <.L__unnamed_16+0x30>
    8000a02e:	04a8                	addi	a0,sp,584
    8000a030:	4611                	li	a2,4
    8000a032:	00006097          	auipc	ra,0x6
    8000a036:	f8c080e7          	jalr	-116(ra) # 8000ffbe <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$3new17h56b5f93ca614e897E>
    8000a03a:	a009                	j	8000a03c <.LBB0_8+0x16>
        let mut pipe = Self {
    8000a03c:	7582                	ld	a1,32(sp)
    8000a03e:	6522                	ld	a0,8(sp)
    8000a040:	e188                	sd	a0,0(a1)
    8000a042:	24813503          	ld	a0,584(sp)
    8000a046:	e588                	sd	a0,8(a1)
    8000a048:	25013503          	ld	a0,592(sp)
    8000a04c:	e988                	sd	a0,16(a1)
    8000a04e:	25813503          	ld	a0,600(sp)
    8000a052:	ed88                	sd	a0,24(a1)
    8000a054:	26013503          	ld	a0,608(sp)
    8000a058:	f188                	sd	a0,32(a1)
    8000a05a:	14a8                	addi	a0,sp,616
        };
        **rf = VFile::init();
    8000a05c:	ffffb097          	auipc	ra,0xffffb
    8000a060:	678080e7          	jalr	1656(ra) # 800056d4 <_ZN6kernel2fs4file5VFile4init17h000c38ec0bf103cfE>
    8000a064:	a009                	j	8000a066 <.LBB0_8+0x40>
    8000a066:	6562                	ld	a0,24(sp)
    8000a068:	6108                	ld	a0,0(a0)
    8000a06a:	ffffd097          	auipc	ra,0xffffd
    8000a06e:	e58080e7          	jalr	-424(ra) # 80006ec2 <_ZN4core3ptr44drop_in_place$LT$kernel..fs..file..VFile$GT$17h7a3c9775c1583e88E>
    8000a072:	a801                	j	8000a082 <.LBB0_8+0x5c>
        **wf = VFile::init();
    8000a074:	6542                	ld	a0,16(sp)
    8000a076:	6108                	ld	a0,0(a0)
    8000a078:	ffffd097          	auipc	ra,0xffffd
    8000a07c:	e4a080e7          	jalr	-438(ra) # 80006ec2 <_ZN4core3ptr44drop_in_place$LT$kernel..fs..file..VFile$GT$17h7a3c9775c1583e88E>
    8000a080:	a835                	j	8000a0bc <.LBB0_8+0x96>
        **rf = VFile::init();
    8000a082:	6562                	ld	a0,24(sp)
    8000a084:	610c                	ld	a1,0(a0)
    8000a086:	29813503          	ld	a0,664(sp)
    8000a08a:	f988                	sd	a0,48(a1)
    8000a08c:	29013503          	ld	a0,656(sp)
    8000a090:	f588                	sd	a0,40(a1)
    8000a092:	28813503          	ld	a0,648(sp)
    8000a096:	f188                	sd	a0,32(a1)
    8000a098:	28013503          	ld	a0,640(sp)
    8000a09c:	ed88                	sd	a0,24(a1)
    8000a09e:	27813503          	ld	a0,632(sp)
    8000a0a2:	e988                	sd	a0,16(a1)
    8000a0a4:	27013503          	ld	a0,624(sp)
    8000a0a8:	e588                	sd	a0,8(a1)
    8000a0aa:	26813503          	ld	a0,616(sp)
    8000a0ae:	e188                	sd	a0,0(a1)
    8000a0b0:	1508                	addi	a0,sp,672
        **wf = VFile::init();
    8000a0b2:	ffffb097          	auipc	ra,0xffffb
    8000a0b6:	622080e7          	jalr	1570(ra) # 800056d4 <_ZN6kernel2fs4file5VFile4init17h000c38ec0bf103cfE>
    8000a0ba:	bf6d                	j	8000a074 <.LBB0_8+0x4e>
    8000a0bc:	7502                	ld	a0,32(sp)
    8000a0be:	65c2                	ld	a1,16(sp)
    8000a0c0:	6762                	ld	a4,24(sp)
    8000a0c2:	6194                	ld	a3,0(a1)
    8000a0c4:	2d013603          	ld	a2,720(sp)
    8000a0c8:	fa90                	sd	a2,48(a3)
    8000a0ca:	2c813603          	ld	a2,712(sp)
    8000a0ce:	f690                	sd	a2,40(a3)
    8000a0d0:	2c013603          	ld	a2,704(sp)
    8000a0d4:	f290                	sd	a2,32(a3)
    8000a0d6:	2b813603          	ld	a2,696(sp)
    8000a0da:	ee90                	sd	a2,24(a3)
    8000a0dc:	2b013603          	ld	a2,688(sp)
    8000a0e0:	ea90                	sd	a2,16(a3)
    8000a0e2:	2a813603          	ld	a2,680(sp)
    8000a0e6:	e690                	sd	a2,8(a3)
    8000a0e8:	2a013603          	ld	a2,672(sp)
    8000a0ec:	e290                	sd	a2,0(a3)
    8000a0ee:	4605                	li	a2,1
        (*(*rf)).ftype = FileType::Pipe;
    8000a0f0:	2cc11f23          	sh	a2,734(sp)
    8000a0f4:	6314                	ld	a3,0(a4)
    8000a0f6:	02c69623          	sh	a2,44(a3)
        (*(*rf)).readable = true;
    8000a0fa:	6314                	ld	a3,0(a4)
    8000a0fc:	02c68823          	sb	a2,48(a3)
        (*(*rf)).writeable = false;
    8000a100:	631c                	ld	a5,0(a4)
    8000a102:	4681                	li	a3,0
    8000a104:	02d788a3          	sb	a3,49(a5)
        (*(*rf)).pipe = Some(&mut pipe as *mut Pipe);
    8000a108:	2ea13423          	sd	a0,744(sp)
    8000a10c:	2ec13023          	sd	a2,736(sp)
    8000a110:	6318                	ld	a4,0(a4)
    8000a112:	e310                	sd	a2,0(a4)
    8000a114:	e708                	sd	a0,8(a4)
        (*(*wf)).ftype = FileType::Pipe;
    8000a116:	2ec11b23          	sh	a2,758(sp)
    8000a11a:	6198                	ld	a4,0(a1)
    8000a11c:	02c71623          	sh	a2,44(a4)
        (*(*wf)).readable = false;
    8000a120:	6198                	ld	a4,0(a1)
    8000a122:	02d70823          	sb	a3,48(a4)
        (*(*wf)).writeable = true;
    8000a126:	6194                	ld	a3,0(a1)
    8000a128:	02c688a3          	sb	a2,49(a3)
        (*(*wf)).pipe = Some(&mut pipe as *mut Pipe);
    8000a12c:	30a13023          	sd	a0,768(sp)
    8000a130:	2ec13c23          	sd	a2,760(sp)
    8000a134:	618c                	ld	a1,0(a1)
    8000a136:	e190                	sd	a2,0(a1)
    8000a138:	e588                	sd	a0,8(a1)

        pipe
    }
    8000a13a:	31813083          	ld	ra,792(sp)
    8000a13e:	32010113          	addi	sp,sp,800
    8000a142:	8082                	ret

Disassembly of section .text._ZN6kernel2fs4pipe4Pipe4read17he058981835099b36E:

000000008000a144 <_ZN6kernel2fs4pipe4Pipe4read17he058981835099b36E>:

    pub fn read(&self, addr: usize, len: usize) -> Result<usize, &'static str> {
    8000a144:	7129                	addi	sp,sp,-320
    8000a146:	fe06                	sd	ra,312(sp)
    8000a148:	f4b6                	sd	a3,104(sp)
    8000a14a:	f8b2                	sd	a2,112(sp)
    8000a14c:	fcae                	sd	a1,120(sp)
    8000a14e:	e12a                	sd	a0,128(sp)
    8000a150:	f9ae                	sd	a1,240(sp)
    8000a152:	fdb2                	sd	a2,248(sp)
    8000a154:	e236                	sd	a3,256(sp)

000000008000a156 <.LBB1_44>:
        let my_proc = unsafe {
            CPU_MANAGER.myproc().ok_or("Fail to get my process")?
    8000a156:	0005a517          	auipc	a0,0x5a
    8000a15a:	fea50513          	addi	a0,a0,-22 # 80064140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    8000a15e:	00008097          	auipc	ra,0x8
    8000a162:	8cc080e7          	jalr	-1844(ra) # 80011a2a <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    8000a166:	e52a                	sd	a0,136(sp)
    8000a168:	a009                	j	8000a16a <.LBB1_44+0x14>
    8000a16a:	65aa                	ld	a1,136(sp)

000000008000a16c <.LBB1_45>:
    8000a16c:	0001e617          	auipc	a2,0x1e
    8000a170:	85460613          	addi	a2,a2,-1964 # 800279c0 <.L__unnamed_2>
    8000a174:	1128                	addi	a0,sp,168
    8000a176:	46d9                	li	a3,22
    8000a178:	00004097          	auipc	ra,0x4
    8000a17c:	6b6080e7          	jalr	1718(ra) # 8000e82e <_ZN4core6option15Option$LT$T$GT$5ok_or17hc525e8e997fb4842E>
    8000a180:	a009                	j	8000a182 <.LBB1_45+0x16>
    8000a182:	0908                	addi	a0,sp,144
    8000a184:	112c                	addi	a1,sp,168
    8000a186:	00003097          	auipc	ra,0x3
    8000a18a:	016080e7          	jalr	22(ra) # 8000d19c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hea2de720f3c4ff28E>
    8000a18e:	a009                	j	8000a190 <.LBB1_45+0x24>
    8000a190:	654a                	ld	a0,144(sp)
    8000a192:	4581                	li	a1,0
    8000a194:	00b50463          	beq	a0,a1,8000a19c <.LBB1_45+0x30>
    8000a198:	a009                	j	8000a19a <.LBB1_45+0x2e>
    8000a19a:	a831                	j	8000a1b6 <.LBB1_45+0x4a>
    8000a19c:	7566                	ld	a0,120(sp)
    8000a19e:	65ea                	ld	a1,152(sp)
    8000a1a0:	f0ae                	sd	a1,96(sp)
    8000a1a2:	ee2e                	sd	a1,280(sp)
    8000a1a4:	f22e                	sd	a1,288(sp)
        };

        let mut guard = self.pipe_lock.acquire();
    8000a1a6:	0521                	addi	a0,a0,8
    8000a1a8:	00006097          	auipc	ra,0x6
    8000a1ac:	48c080e7          	jalr	1164(ra) # 80010634 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    8000a1b0:	e1aa                	sd	a0,192(sp)
    8000a1b2:	a02d                	j	8000a1dc <.LBB1_45+0x70>
            CPU_MANAGER.myproc().ok_or("Fail to get my process")?
    8000a1b4:	0000                	unimp
    8000a1b6:	656a                	ld	a0,152(sp)
    8000a1b8:	758a                	ld	a1,160(sp)
    8000a1ba:	e62a                	sd	a0,264(sp)
    8000a1bc:	ea2e                	sd	a1,272(sp)
    8000a1be:	00002097          	auipc	ra,0x2
    8000a1c2:	806080e7          	jalr	-2042(ra) # 8000b9c4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h6f3e3843c20d184aE>
    8000a1c6:	e8aa                	sd	a0,80(sp)
    8000a1c8:	ecae                	sd	a1,88(sp)
    8000a1ca:	a009                	j	8000a1cc <.LBB1_45+0x60>
    8000a1cc:	6666                	ld	a2,88(sp)
    8000a1ce:	65c6                	ld	a1,80(sp)
    8000a1d0:	650a                	ld	a0,128(sp)
    8000a1d2:	00003097          	auipc	ra,0x3
    8000a1d6:	e32080e7          	jalr	-462(ra) # 8000d004 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h4dd43adfe00292f6E>
    8000a1da:	aa51                	j	8000a36e <.LBB1_47+0x2a>
        let pipe = unsafe { &mut *self.pipe };
    8000a1dc:	7566                	ld	a0,120(sp)
    8000a1de:	6108                	ld	a0,0(a0)
    8000a1e0:	e4aa                	sd	a0,72(sp)
    8000a1e2:	f62a                	sd	a0,296(sp)
        while pipe.read_number == pipe.write_number && pipe.write_open {
    8000a1e4:	a009                	j	8000a1e6 <.LBB1_45+0x7a>
    8000a1e6:	65a6                	ld	a1,72(sp)
    8000a1e8:	2005b503          	ld	a0,512(a1)
    8000a1ec:	2085b583          	ld	a1,520(a1)
    8000a1f0:	00b50b63          	beq	a0,a1,8000a206 <.LBB1_45+0x9a>
    8000a1f4:	a029                	j	8000a1fe <.LBB1_45+0x92>
    8000a1f6:	4505                	li	a0,1
    8000a1f8:	0ca107a3          	sb	a0,207(sp)
    8000a1fc:	a819                	j	8000a212 <.LBB1_45+0xa6>
    8000a1fe:	4501                	li	a0,0
    8000a200:	0ca107a3          	sb	a0,207(sp)
    8000a204:	a039                	j	8000a212 <.LBB1_45+0xa6>
    8000a206:	6526                	ld	a0,72(sp)
    8000a208:	21154503          	lbu	a0,529(a0)
    8000a20c:	8905                	andi	a0,a0,1
    8000a20e:	f565                	bnez	a0,8000a1f6 <.LBB1_45+0x8a>
    8000a210:	b7fd                	j	8000a1fe <.LBB1_45+0x92>
    8000a212:	0cf14503          	lbu	a0,207(sp)
    8000a216:	8905                	andi	a0,a0,1
    8000a218:	e509                	bnez	a0,8000a222 <.LBB1_45+0xb6>
    8000a21a:	a009                	j	8000a21c <.LBB1_45+0xb0>
    8000a21c:	4501                	li	a0,0
        //     }
        //     i = index;
        //     // pipe_guard.read_number += 1;

        // }
        let mut i = 0;
    8000a21e:	e9aa                	sd	a0,208(sp)
        while i < len {
    8000a220:	a0a5                	j	8000a288 <.LBB1_46+0x2c>
            if my_proc.killed() {
    8000a222:	7506                	ld	a0,96(sp)
    8000a224:	0000c097          	auipc	ra,0xc
    8000a228:	ae2080e7          	jalr	-1310(ra) # 80015d06 <_ZN6kernel7process7process11task_struct6killed17h4fc8d78e83fc4243E>
    8000a22c:	e0aa                	sd	a0,64(sp)
    8000a22e:	a009                	j	8000a230 <.LBB1_45+0xc4>
    8000a230:	6506                	ld	a0,64(sp)
    8000a232:	4581                	li	a1,0
    8000a234:	00b50963          	beq	a0,a1,8000a246 <.LBB1_45+0xda>
    8000a238:	a009                	j	8000a23a <.LBB1_45+0xce>
                drop(guard);
    8000a23a:	650e                	ld	a0,192(sp)
    8000a23c:	00013097          	auipc	ra,0x13
    8000a240:	c2e080e7          	jalr	-978(ra) # 8001ce6a <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    8000a244:	a819                	j	8000a25a <.LBB1_45+0xee>
                &pipe.read_number as *const _ as usize, 
    8000a246:	7506                	ld	a0,96(sp)
    8000a248:	65a6                	ld	a1,72(sp)
    8000a24a:	20058593          	addi	a1,a1,512
                guard
    8000a24e:	660e                	ld	a2,192(sp)
            my_proc.sleep(
    8000a250:	00007097          	auipc	ra,0x7
    8000a254:	4b6080e7          	jalr	1206(ra) # 80011706 <_ZN6kernel7process7process11task_struct5sleep17h3865ab03b1bff75fE>
    8000a258:	a829                	j	8000a272 <.LBB1_46+0x16>
                return Err("pipe read: current process has been killed")
    8000a25a:	658a                	ld	a1,128(sp)

000000008000a25c <.LBB1_46>:
    8000a25c:	0001d517          	auipc	a0,0x1d
    8000a260:	77a50513          	addi	a0,a0,1914 # 800279d6 <.L__unnamed_3>
    8000a264:	e588                	sd	a0,8(a1)
    8000a266:	02a00513          	li	a0,42
    8000a26a:	e988                	sd	a0,16(a1)
    8000a26c:	4505                	li	a0,1
    8000a26e:	e188                	sd	a0,0(a1)
    8000a270:	a8fd                	j	8000a36e <.LBB1_47+0x2a>
            guard = self.pipe_lock.acquire();
    8000a272:	7566                	ld	a0,120(sp)
    8000a274:	0521                	addi	a0,a0,8
    8000a276:	00006097          	auipc	ra,0x6
    8000a27a:	3be080e7          	jalr	958(ra) # 80010634 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    8000a27e:	fc2a                	sd	a0,56(sp)
    8000a280:	a009                	j	8000a282 <.LBB1_46+0x26>
    8000a282:	7562                	ld	a0,56(sp)
    8000a284:	e1aa                	sd	a0,192(sp)
        while pipe.read_number == pipe.write_number && pipe.write_open {
    8000a286:	b785                	j	8000a1e6 <.LBB1_45+0x7a>
        while i < len {
    8000a288:	75a6                	ld	a1,104(sp)
    8000a28a:	654e                	ld	a0,208(sp)
    8000a28c:	00b56463          	bltu	a0,a1,8000a294 <.LBB1_46+0x38>
    8000a290:	a009                	j	8000a292 <.LBB1_46+0x36>
    8000a292:	a075                	j	8000a33e <.LBB1_46+0xe2>
            if pipe.read_number == pipe.write_number {
    8000a294:	65a6                	ld	a1,72(sp)
    8000a296:	2005b503          	ld	a0,512(a1)
    8000a29a:	2085b583          	ld	a1,520(a1)
    8000a29e:	00b51463          	bne	a0,a1,8000a2a6 <.LBB1_46+0x4a>
    8000a2a2:	a009                	j	8000a2a4 <.LBB1_46+0x48>
    8000a2a4:	a869                	j	8000a33e <.LBB1_46+0xe2>
                break;
            }
            let ch = pipe.data[pipe.read_number % PIPE_SIZE];
    8000a2a6:	6526                	ld	a0,72(sp)
    8000a2a8:	20053503          	ld	a0,512(a0)
    8000a2ac:	1ff57593          	andi	a1,a0,511
    8000a2b0:	f82e                	sd	a1,48(sp)
    8000a2b2:	1ff00513          	li	a0,511
    8000a2b6:	0ab56f63          	bltu	a0,a1,8000a374 <.LBB1_47+0x30>
    8000a2ba:	a009                	j	8000a2bc <.LBB1_46+0x60>
    8000a2bc:	6526                	ld	a0,72(sp)
    8000a2be:	75c2                	ld	a1,48(sp)
    8000a2c0:	95aa                	add	a1,a1,a0
    8000a2c2:	00058583          	lb	a1,0(a1)
    8000a2c6:	0cb10fa3          	sb	a1,223(sp)
            pipe.read_number += 1;
    8000a2ca:	20053583          	ld	a1,512(a0)
    8000a2ce:	00158513          	addi	a0,a1,1
    8000a2d2:	f42a                	sd	a0,40(sp)
    8000a2d4:	0ab56c63          	bltu	a0,a1,8000a38c <.LBB1_49>
    8000a2d8:	a009                	j	8000a2da <.LBB1_46+0x7e>
    8000a2da:	75c6                	ld	a1,112(sp)
    8000a2dc:	7506                	ld	a0,96(sp)
    8000a2de:	7622                	ld	a2,40(sp)
    8000a2e0:	66a6                	ld	a3,72(sp)
    8000a2e2:	20c6b023          	sd	a2,512(a3)
            
            let pgt = unsafe { &mut *my_proc.pagetable };
    8000a2e6:	6d08                	ld	a0,24(a0)
    8000a2e8:	ec2a                	sd	a0,24(sp)
    8000a2ea:	fa2a                	sd	a0,304(sp)
            if pgt.copy_out(addr + i, &ch as *const u8, 1).is_err() {
    8000a2ec:	654e                	ld	a0,208(sp)
    8000a2ee:	952e                	add	a0,a0,a1
    8000a2f0:	f02a                	sd	a0,32(sp)
    8000a2f2:	0ab56b63          	bltu	a0,a1,8000a3a8 <.LBB1_51>
    8000a2f6:	a009                	j	8000a2f8 <.LBB1_46+0x9c>
    8000a2f8:	7582                	ld	a1,32(sp)
    8000a2fa:	6562                	ld	a0,24(sp)
    8000a2fc:	0df10613          	addi	a2,sp,223
    8000a300:	4685                	li	a3,1
    8000a302:	0000d097          	auipc	ra,0xd
    8000a306:	710080e7          	jalr	1808(ra) # 80017a12 <_ZN6kernel6memory7mapping10page_table9PageTable8copy_out17h55d0f27ee3680817E>
    8000a30a:	f1aa                	sd	a0,224(sp)
    8000a30c:	f5ae                	sd	a1,232(sp)
    8000a30e:	a009                	j	8000a310 <.LBB1_46+0xb4>
    8000a310:	1188                	addi	a0,sp,224
    8000a312:	00003097          	auipc	ra,0x3
    8000a316:	9a4080e7          	jalr	-1628(ra) # 8000ccb6 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h304118d236359d80E>
    8000a31a:	e82a                	sd	a0,16(sp)
    8000a31c:	a009                	j	8000a31e <.LBB1_46+0xc2>
    8000a31e:	6542                	ld	a0,16(sp)
    8000a320:	4581                	li	a1,0
    8000a322:	00b50463          	beq	a0,a1,8000a32a <.LBB1_46+0xce>
    8000a326:	a009                	j	8000a328 <.LBB1_46+0xcc>
    8000a328:	a819                	j	8000a33e <.LBB1_46+0xe2>
                break;
            }
            i += 1;
    8000a32a:	65ce                	ld	a1,208(sp)
    8000a32c:	00158513          	addi	a0,a1,1
    8000a330:	e42a                	sd	a0,8(sp)
    8000a332:	08b56963          	bltu	a0,a1,8000a3c4 <.LBB1_53>
    8000a336:	a009                	j	8000a338 <.LBB1_46+0xdc>
    8000a338:	6522                	ld	a0,8(sp)
    8000a33a:	e9aa                	sd	a0,208(sp)
        while i < len {
    8000a33c:	b7b1                	j	8000a288 <.LBB1_46+0x2c>
        }

        unsafe{ PROC_MANAGER.wake_up(&pipe.write_number as *const _ as usize) };
    8000a33e:	6526                	ld	a0,72(sp)
    8000a340:	20850593          	addi	a1,a0,520

000000008000a344 <.LBB1_47>:
    8000a344:	0004d517          	auipc	a0,0x4d
    8000a348:	25c50513          	addi	a0,a0,604 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    8000a34c:	00003097          	auipc	ra,0x3
    8000a350:	502080e7          	jalr	1282(ra) # 8000d84e <_ZN6kernel7process7manager11ProcManager7wake_up17ha46b4d15ac07187bE>
    8000a354:	a009                	j	8000a356 <.LBB1_47+0x12>
        drop(guard);
    8000a356:	650e                	ld	a0,192(sp)
    8000a358:	00013097          	auipc	ra,0x13
    8000a35c:	b12080e7          	jalr	-1262(ra) # 8001ce6a <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    8000a360:	a009                	j	8000a362 <.LBB1_47+0x1e>
        Ok(i)
    8000a362:	658a                	ld	a1,128(sp)
    8000a364:	654e                	ld	a0,208(sp)
    8000a366:	e588                	sd	a0,8(a1)
    8000a368:	4501                	li	a0,0
    8000a36a:	e188                	sd	a0,0(a1)
    }
    8000a36c:	a009                	j	8000a36e <.LBB1_47+0x2a>
    8000a36e:	70f2                	ld	ra,312(sp)
    8000a370:	6131                	addi	sp,sp,320
    8000a372:	8082                	ret
            let ch = pipe.data[pipe.read_number % PIPE_SIZE];
    8000a374:	7542                	ld	a0,48(sp)

000000008000a376 <.LBB1_48>:
    8000a376:	0001d617          	auipc	a2,0x1d
    8000a37a:	69a60613          	addi	a2,a2,1690 # 80027a10 <.L__unnamed_4>
    8000a37e:	20000593          	li	a1,512
    8000a382:	00018097          	auipc	ra,0x18
    8000a386:	da6080e7          	jalr	-602(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

000000008000a38c <.LBB1_49>:
            pipe.read_number += 1;
    8000a38c:	0001d517          	auipc	a0,0x1d
    8000a390:	6b450513          	addi	a0,a0,1716 # 80027a40 <str.0>

000000008000a394 <.LBB1_50>:
    8000a394:	0001d617          	auipc	a2,0x1d
    8000a398:	69460613          	addi	a2,a2,1684 # 80027a28 <.L__unnamed_5>
    8000a39c:	45f1                	li	a1,28
    8000a39e:	00018097          	auipc	ra,0x18
    8000a3a2:	d5e080e7          	jalr	-674(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008000a3a8 <.LBB1_51>:
            if pgt.copy_out(addr + i, &ch as *const u8, 1).is_err() {
    8000a3a8:	0001d517          	auipc	a0,0x1d
    8000a3ac:	69850513          	addi	a0,a0,1688 # 80027a40 <str.0>

000000008000a3b0 <.LBB1_52>:
    8000a3b0:	0001d617          	auipc	a2,0x1d
    8000a3b4:	6b060613          	addi	a2,a2,1712 # 80027a60 <.L__unnamed_6>
    8000a3b8:	45f1                	li	a1,28
    8000a3ba:	00018097          	auipc	ra,0x18
    8000a3be:	d42080e7          	jalr	-702(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008000a3c4 <.LBB1_53>:
            i += 1;
    8000a3c4:	0001d517          	auipc	a0,0x1d
    8000a3c8:	67c50513          	addi	a0,a0,1660 # 80027a40 <str.0>

000000008000a3cc <.LBB1_54>:
    8000a3cc:	0001d617          	auipc	a2,0x1d
    8000a3d0:	6ac60613          	addi	a2,a2,1708 # 80027a78 <.L__unnamed_7>
    8000a3d4:	45f1                	li	a1,28
    8000a3d6:	00018097          	auipc	ra,0x18
    8000a3da:	d26080e7          	jalr	-730(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel2fs4pipe4Pipe5write17h81e33cf4c0f9044aE:

000000008000a3e0 <_ZN6kernel2fs4pipe4Pipe5write17h81e33cf4c0f9044aE>:

    pub fn write(&self, addr: usize, len: usize) -> Result<usize, &'static str> {
    8000a3e0:	7161                	addi	sp,sp,-432
    8000a3e2:	f706                	sd	ra,424(sp)
    8000a3e4:	e536                	sd	a3,136(sp)
    8000a3e6:	e932                	sd	a2,144(sp)
    8000a3e8:	ed2e                	sd	a1,152(sp)
    8000a3ea:	f12a                	sd	a0,160(sp)
    8000a3ec:	eaae                	sd	a1,336(sp)
    8000a3ee:	eeb2                	sd	a2,344(sp)
    8000a3f0:	f2b6                	sd	a3,352(sp)

000000008000a3f2 <.LBB2_39>:
        
        let my_proc = unsafe {
            CPU_MANAGER.myproc().ok_or("Fail to get current process")?
    8000a3f2:	0005a517          	auipc	a0,0x5a
    8000a3f6:	d4e50513          	addi	a0,a0,-690 # 80064140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    8000a3fa:	00007097          	auipc	ra,0x7
    8000a3fe:	630080e7          	jalr	1584(ra) # 80011a2a <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    8000a402:	f52a                	sd	a0,168(sp)
    8000a404:	a009                	j	8000a406 <.LBB2_39+0x14>
    8000a406:	75aa                	ld	a1,168(sp)

000000008000a408 <.LBB2_40>:
    8000a408:	0001d617          	auipc	a2,0x1d
    8000a40c:	68860613          	addi	a2,a2,1672 # 80027a90 <.L__unnamed_8>
    8000a410:	01a8                	addi	a0,sp,200
    8000a412:	46ed                	li	a3,27
    8000a414:	00004097          	auipc	ra,0x4
    8000a418:	41a080e7          	jalr	1050(ra) # 8000e82e <_ZN4core6option15Option$LT$T$GT$5ok_or17hc525e8e997fb4842E>
    8000a41c:	a009                	j	8000a41e <.LBB2_40+0x16>
    8000a41e:	1908                	addi	a0,sp,176
    8000a420:	01ac                	addi	a1,sp,200
    8000a422:	00003097          	auipc	ra,0x3
    8000a426:	d7a080e7          	jalr	-646(ra) # 8000d19c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hea2de720f3c4ff28E>
    8000a42a:	a009                	j	8000a42c <.LBB2_40+0x24>
    8000a42c:	754a                	ld	a0,176(sp)
    8000a42e:	4581                	li	a1,0
    8000a430:	00b50463          	beq	a0,a1,8000a438 <.LBB2_40+0x30>
    8000a434:	a009                	j	8000a436 <.LBB2_40+0x2e>
    8000a436:	a831                	j	8000a452 <.LBB2_40+0x4a>
    8000a438:	656a                	ld	a0,152(sp)
    8000a43a:	75ea                	ld	a1,184(sp)
    8000a43c:	e12e                	sd	a1,128(sp)
    8000a43e:	feae                	sd	a1,376(sp)
    8000a440:	e32e                	sd	a1,384(sp)
        };
        // println!("$$$");
       
        let mut guard = self.pipe_lock.acquire();
    8000a442:	0521                	addi	a0,a0,8
    8000a444:	00006097          	auipc	ra,0x6
    8000a448:	1f0080e7          	jalr	496(ra) # 80010634 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    8000a44c:	f1aa                	sd	a0,224(sp)
    8000a44e:	a02d                	j	8000a478 <.LBB2_40+0x70>
            CPU_MANAGER.myproc().ok_or("Fail to get current process")?
    8000a450:	0000                	unimp
    8000a452:	756a                	ld	a0,184(sp)
    8000a454:	658e                	ld	a1,192(sp)
    8000a456:	f6aa                	sd	a0,360(sp)
    8000a458:	faae                	sd	a1,368(sp)
    8000a45a:	00001097          	auipc	ra,0x1
    8000a45e:	56a080e7          	jalr	1386(ra) # 8000b9c4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h6f3e3843c20d184aE>
    8000a462:	f8aa                	sd	a0,112(sp)
    8000a464:	fcae                	sd	a1,120(sp)
    8000a466:	a009                	j	8000a468 <.LBB2_40+0x60>
    8000a468:	7666                	ld	a2,120(sp)
    8000a46a:	75c6                	ld	a1,112(sp)
    8000a46c:	750a                	ld	a0,160(sp)
    8000a46e:	00003097          	auipc	ra,0x3
    8000a472:	b96080e7          	jalr	-1130(ra) # 8000d004 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h4dd43adfe00292f6E>
    8000a476:	a24d                	j	8000a618 <.LBB2_44+0x2a>
        let pipe = unsafe { &mut *self.pipe };
    8000a478:	656a                	ld	a0,152(sp)
    8000a47a:	6108                	ld	a0,0(a0)
    8000a47c:	f4aa                	sd	a0,104(sp)
    8000a47e:	e72a                	sd	a0,392(sp)
    8000a480:	4501                	li	a0,0
        let mut i = 0;
    8000a482:	f5aa                	sd	a0,232(sp)

        // println!("$$$");
        
        // println!("@{} {}", pipe.write_number, pipe.read_number);
        
        while i < len {
    8000a484:	a009                	j	8000a486 <.LBB2_40+0x7e>
    8000a486:	65aa                	ld	a1,136(sp)
    8000a488:	752e                	ld	a0,232(sp)
    8000a48a:	00b56463          	bltu	a0,a1,8000a492 <.LBB2_40+0x8a>
    8000a48e:	a009                	j	8000a490 <.LBB2_40+0x88>
    8000a490:	aaa1                	j	8000a5e8 <.LBB2_43+0x54>
            //     drop(guard);
            //     return Err("pipe write: pipe read close or current process has been killed")
            // }
            // println!("HEHE");
           
            if pipe.write_number == pipe.read_number + PIPE_SIZE {
    8000a492:	7526                	ld	a0,104(sp)
    8000a494:	20853583          	ld	a1,520(a0)
    8000a498:	ecae                	sd	a1,88(sp)
    8000a49a:	20053583          	ld	a1,512(a0)
    8000a49e:	20058513          	addi	a0,a1,512
    8000a4a2:	f0aa                	sd	a0,96(sp)
    8000a4a4:	16b56d63          	bltu	a0,a1,8000a61e <.LBB2_45>
    8000a4a8:	a009                	j	8000a4aa <.LBB2_40+0xa2>
    8000a4aa:	6566                	ld	a0,88(sp)
    8000a4ac:	7586                	ld	a1,96(sp)
    8000a4ae:	00b51f63          	bne	a0,a1,8000a4cc <.LBB2_41+0x12>
    8000a4b2:	a009                	j	8000a4b4 <.LBB2_40+0xac>
                
                
                unsafe {
                    PROC_MANAGER.wake_up(&pipe.read_number as *const _ as usize);
    8000a4b4:	7526                	ld	a0,104(sp)
    8000a4b6:	20050593          	addi	a1,a0,512

000000008000a4ba <.LBB2_41>:
    8000a4ba:	0004d517          	auipc	a0,0x4d
    8000a4be:	0e650513          	addi	a0,a0,230 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    8000a4c2:	00003097          	auipc	ra,0x3
    8000a4c6:	38c080e7          	jalr	908(ra) # 8000d84e <_ZN6kernel7process7manager11ProcManager7wake_up17ha46b4d15ac07187bE>
    8000a4ca:	a839                	j	8000a4e8 <.LBB2_41+0x2e>
    8000a4cc:	65ca                	ld	a1,144(sp)
    8000a4ce:	650a                	ld	a0,128(sp)
    8000a4d0:	4601                	li	a2,0
                }
                my_proc.sleep(&pipe.write_number as *const _ as usize, guard);
                guard = self.pipe_lock.acquire();
            } else {
                // println!("HAHA");
                let mut char: u8 = 0;
    8000a4d2:	0ec10ba3          	sb	a2,247(sp)
                let pgt = unsafe { &mut *my_proc.pagetable };
    8000a4d6:	6d08                	ld	a0,24(a0)
    8000a4d8:	e4aa                	sd	a0,72(sp)
    8000a4da:	eb2a                	sd	a0,400(sp)
                if pgt.copy_in(&mut char as *mut u8, addr + i, 1).is_err() {
    8000a4dc:	752e                	ld	a0,232(sp)
    8000a4de:	952e                	add	a0,a0,a1
    8000a4e0:	e8aa                	sd	a0,80(sp)
    8000a4e2:	14b56c63          	bltu	a0,a1,8000a63a <.LBB2_47>
    8000a4e6:	a035                	j	8000a512 <.LBB2_41+0x58>
                my_proc.sleep(&pipe.write_number as *const _ as usize, guard);
    8000a4e8:	650a                	ld	a0,128(sp)
    8000a4ea:	75a6                	ld	a1,104(sp)
    8000a4ec:	20858593          	addi	a1,a1,520
    8000a4f0:	760e                	ld	a2,224(sp)
    8000a4f2:	00007097          	auipc	ra,0x7
    8000a4f6:	214080e7          	jalr	532(ra) # 80011706 <_ZN6kernel7process7process11task_struct5sleep17h3865ab03b1bff75fE>
    8000a4fa:	a009                	j	8000a4fc <.LBB2_41+0x42>
                guard = self.pipe_lock.acquire();
    8000a4fc:	656a                	ld	a0,152(sp)
    8000a4fe:	0521                	addi	a0,a0,8
    8000a500:	00006097          	auipc	ra,0x6
    8000a504:	134080e7          	jalr	308(ra) # 80010634 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    8000a508:	e0aa                	sd	a0,64(sp)
    8000a50a:	a009                	j	8000a50c <.LBB2_41+0x52>
    8000a50c:	6506                	ld	a0,64(sp)
    8000a50e:	f1aa                	sd	a0,224(sp)
            if pipe.write_number == pipe.read_number + PIPE_SIZE {
    8000a510:	bf9d                	j	8000a486 <.LBB2_40+0x7e>
                if pgt.copy_in(&mut char as *mut u8, addr + i, 1).is_err() {
    8000a512:	6646                	ld	a2,80(sp)
    8000a514:	6526                	ld	a0,72(sp)
    8000a516:	0f710593          	addi	a1,sp,247
    8000a51a:	4685                	li	a3,1
    8000a51c:	0000d097          	auipc	ra,0xd
    8000a520:	726080e7          	jalr	1830(ra) # 80017c42 <_ZN6kernel6memory7mapping10page_table9PageTable7copy_in17h459a5354b5a5ab11E>
    8000a524:	fdaa                	sd	a0,248(sp)
    8000a526:	e22e                	sd	a1,256(sp)
    8000a528:	a009                	j	8000a52a <.LBB2_41+0x70>
    8000a52a:	19a8                	addi	a0,sp,248
    8000a52c:	00002097          	auipc	ra,0x2
    8000a530:	78a080e7          	jalr	1930(ra) # 8000ccb6 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h304118d236359d80E>
    8000a534:	fc2a                	sd	a0,56(sp)
    8000a536:	a009                	j	8000a538 <.LBB2_41+0x7e>
    8000a538:	7562                	ld	a0,56(sp)
    8000a53a:	4581                	li	a1,0
    8000a53c:	00b50463          	beq	a0,a1,8000a544 <.LBB2_41+0x8a>
    8000a540:	a009                	j	8000a542 <.LBB2_41+0x88>
    8000a542:	a05d                	j	8000a5e8 <.LBB2_43+0x54>
                    break;
                }
                let write_cursor = pipe.write_number % PIPE_SIZE;
    8000a544:	7526                	ld	a0,104(sp)
    8000a546:	20853503          	ld	a0,520(a0)
    8000a54a:	1ff57593          	andi	a1,a0,511
    8000a54e:	f42e                	sd	a1,40(sp)
    8000a550:	ef2e                	sd	a1,408(sp)
                pipe.data[write_cursor] = char;
    8000a552:	0f714503          	lbu	a0,247(sp)
    8000a556:	f82a                	sd	a0,48(sp)
    8000a558:	1ff00513          	li	a0,511
    8000a55c:	0eb56d63          	bltu	a0,a1,8000a656 <.LBB2_48+0x14>
    8000a560:	a009                	j	8000a562 <.LBB2_41+0xa8>
    8000a562:	7542                	ld	a0,48(sp)
    8000a564:	75a6                	ld	a1,104(sp)
    8000a566:	7622                	ld	a2,40(sp)
    8000a568:	95b2                	add	a1,a1,a2
    8000a56a:	00a58023          	sb	a0,0(a1)
    8000a56e:	0f710513          	addi	a0,sp,247
                println!("+{}", char);
    8000a572:	e6aa                	sd	a0,328(sp)
    8000a574:	f32a                	sd	a0,416(sp)

000000008000a576 <.LBB2_42>:
    8000a576:	0001a597          	auipc	a1,0x1a
    8000a57a:	e7a58593          	addi	a1,a1,-390 # 800243f0 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h88f04bfded474003E>
    8000a57e:	00014097          	auipc	ra,0x14
    8000a582:	f02080e7          	jalr	-254(ra) # 8001e480 <_ZN4core3fmt10ArgumentV13new17h56f4edf050dced00E>
    8000a586:	ec2a                	sd	a0,24(sp)
    8000a588:	f02e                	sd	a1,32(sp)
    8000a58a:	a009                	j	8000a58c <.LBB2_42+0x16>
    8000a58c:	7502                	ld	a0,32(sp)
    8000a58e:	65e2                	ld	a1,24(sp)
    8000a590:	fe2e                	sd	a1,312(sp)
    8000a592:	e2aa                	sd	a0,320(sp)

000000008000a594 <.LBB2_43>:
    8000a594:	0001d597          	auipc	a1,0x1d
    8000a598:	56c58593          	addi	a1,a1,1388 # 80027b00 <.L__unnamed_9>
    8000a59c:	0228                	addi	a0,sp,264
    8000a59e:	4609                	li	a2,2
    8000a5a0:	1a34                	addi	a3,sp,312
    8000a5a2:	4705                	li	a4,1
    8000a5a4:	ffffb097          	auipc	ra,0xffffb
    8000a5a8:	e90080e7          	jalr	-368(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8000a5ac:	a009                	j	8000a5ae <.LBB2_43+0x1a>
    8000a5ae:	0228                	addi	a0,sp,264
    8000a5b0:	00013097          	auipc	ra,0x13
    8000a5b4:	600080e7          	jalr	1536(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8000a5b8:	a009                	j	8000a5ba <.LBB2_43+0x26>
                
                pipe.write_number += 1;
    8000a5ba:	7526                	ld	a0,104(sp)
    8000a5bc:	20853583          	ld	a1,520(a0)
    8000a5c0:	00158513          	addi	a0,a1,1
    8000a5c4:	e82a                	sd	a0,16(sp)
    8000a5c6:	0ab56463          	bltu	a0,a1,8000a66e <.LBB2_50>
    8000a5ca:	a009                	j	8000a5cc <.LBB2_43+0x38>
    8000a5cc:	6542                	ld	a0,16(sp)
    8000a5ce:	75a6                	ld	a1,104(sp)
    8000a5d0:	20a5b423          	sd	a0,520(a1)
                i += 1;
    8000a5d4:	75ae                	ld	a1,232(sp)
    8000a5d6:	00158513          	addi	a0,a1,1
    8000a5da:	e42a                	sd	a0,8(sp)
    8000a5dc:	0ab56763          	bltu	a0,a1,8000a68a <.LBB2_52>
    8000a5e0:	a009                	j	8000a5e2 <.LBB2_43+0x4e>
    8000a5e2:	6522                	ld	a0,8(sp)
    8000a5e4:	f5aa                	sd	a0,232(sp)
            if pipe.write_number == pipe.read_number + PIPE_SIZE {
    8000a5e6:	b545                	j	8000a486 <.LBB2_40+0x7e>
        }

         

        unsafe {
            PROC_MANAGER.wake_up(&pipe.read_number as *const _ as usize);
    8000a5e8:	7526                	ld	a0,104(sp)
    8000a5ea:	20050593          	addi	a1,a0,512

000000008000a5ee <.LBB2_44>:
    8000a5ee:	0004d517          	auipc	a0,0x4d
    8000a5f2:	fb250513          	addi	a0,a0,-78 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    8000a5f6:	00003097          	auipc	ra,0x3
    8000a5fa:	258080e7          	jalr	600(ra) # 8000d84e <_ZN6kernel7process7manager11ProcManager7wake_up17ha46b4d15ac07187bE>
    8000a5fe:	a009                	j	8000a600 <.LBB2_44+0x12>
        }
        drop(guard);
    8000a600:	750e                	ld	a0,224(sp)
    8000a602:	00013097          	auipc	ra,0x13
    8000a606:	868080e7          	jalr	-1944(ra) # 8001ce6a <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    8000a60a:	a009                	j	8000a60c <.LBB2_44+0x1e>
        
        Ok(i)
    8000a60c:	758a                	ld	a1,160(sp)
    8000a60e:	752e                	ld	a0,232(sp)
    8000a610:	e588                	sd	a0,8(a1)
    8000a612:	4501                	li	a0,0
    8000a614:	e188                	sd	a0,0(a1)
    }
    8000a616:	a009                	j	8000a618 <.LBB2_44+0x2a>
    8000a618:	70ba                	ld	ra,424(sp)
    8000a61a:	615d                	addi	sp,sp,432
    8000a61c:	8082                	ret

000000008000a61e <.LBB2_45>:
            if pipe.write_number == pipe.read_number + PIPE_SIZE {
    8000a61e:	0001d517          	auipc	a0,0x1d
    8000a622:	42250513          	addi	a0,a0,1058 # 80027a40 <str.0>

000000008000a626 <.LBB2_46>:
    8000a626:	0001d617          	auipc	a2,0x1d
    8000a62a:	48a60613          	addi	a2,a2,1162 # 80027ab0 <.L__unnamed_10>
    8000a62e:	45f1                	li	a1,28
    8000a630:	00018097          	auipc	ra,0x18
    8000a634:	acc080e7          	jalr	-1332(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008000a63a <.LBB2_47>:
                if pgt.copy_in(&mut char as *mut u8, addr + i, 1).is_err() {
    8000a63a:	0001d517          	auipc	a0,0x1d
    8000a63e:	40650513          	addi	a0,a0,1030 # 80027a40 <str.0>

000000008000a642 <.LBB2_48>:
    8000a642:	0001d617          	auipc	a2,0x1d
    8000a646:	48660613          	addi	a2,a2,1158 # 80027ac8 <.L__unnamed_11>
    8000a64a:	45f1                	li	a1,28
    8000a64c:	00018097          	auipc	ra,0x18
    8000a650:	ab0080e7          	jalr	-1360(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8000a654:	0000                	unimp
                pipe.data[write_cursor] = char;
    8000a656:	7522                	ld	a0,40(sp)

000000008000a658 <.LBB2_49>:
    8000a658:	0001d617          	auipc	a2,0x1d
    8000a65c:	48860613          	addi	a2,a2,1160 # 80027ae0 <.L__unnamed_12>
    8000a660:	20000593          	li	a1,512
    8000a664:	00018097          	auipc	ra,0x18
    8000a668:	ac4080e7          	jalr	-1340(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

000000008000a66e <.LBB2_50>:
                pipe.write_number += 1;
    8000a66e:	0001d517          	auipc	a0,0x1d
    8000a672:	3d250513          	addi	a0,a0,978 # 80027a40 <str.0>

000000008000a676 <.LBB2_51>:
    8000a676:	0001d617          	auipc	a2,0x1d
    8000a67a:	4aa60613          	addi	a2,a2,1194 # 80027b20 <.L__unnamed_13>
    8000a67e:	45f1                	li	a1,28
    8000a680:	00018097          	auipc	ra,0x18
    8000a684:	a7c080e7          	jalr	-1412(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008000a68a <.LBB2_52>:
                i += 1;
    8000a68a:	0001d517          	auipc	a0,0x1d
    8000a68e:	3b650513          	addi	a0,a0,950 # 80027a40 <str.0>

000000008000a692 <.LBB2_53>:
    8000a692:	0001d617          	auipc	a2,0x1d
    8000a696:	4a660613          	addi	a2,a2,1190 # 80027b38 <.L__unnamed_14>
    8000a69a:	45f1                	li	a1,28
    8000a69c:	00018097          	auipc	ra,0x18
    8000a6a0:	a60080e7          	jalr	-1440(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel2fs4pipe8PipeData5alloc17h6739b2f9d9d21ef0E:

000000008000a6a6 <_ZN6kernel2fs4pipe8PipeData5alloc17h6739b2f9d9d21ef0E>:
        }
    }
}

impl PipeData {
    pub fn alloc() -> *mut Self {
    8000a6a6:	1101                	addi	sp,sp,-32
        let pipe = unsafe{ RawPage::new_zeroed() as *mut PipeData };
    8000a6a8:	ec06                	sd	ra,24(sp)
    8000a6aa:	00000097          	auipc	ra,0x0
    8000a6ae:	904080e7          	jalr	-1788(ra) # 80009fae <_ZN6kernel6memory13PageAllocator10new_zeroed17hbc99bdbca8d1d931E>
    8000a6b2:	e02a                	sd	a0,0(sp)
    8000a6b4:	a009                	j	8000a6b6 <_ZN6kernel2fs4pipe8PipeData5alloc17h6739b2f9d9d21ef0E+0x10>
    8000a6b6:	6502                	ld	a0,0(sp)
    8000a6b8:	e42a                	sd	a0,8(sp)
        let pipe = unsafe{ &mut *pipe };
    8000a6ba:	e82a                	sd	a0,16(sp)
    8000a6bc:	4581                	li	a1,0
        pipe.read_number = 0;
    8000a6be:	20b53023          	sd	a1,512(a0)
        pipe.write_number = 0;
    8000a6c2:	20b53423          	sd	a1,520(a0)
    8000a6c6:	10100593          	li	a1,257
        pipe.read_open = true;
    8000a6ca:	20b51823          	sh	a1,528(a0)
        pipe.write_open = true;
        pipe as *mut Self 
    }
    8000a6ce:	60e2                	ld	ra,24(sp)
    8000a6d0:	6105                	addi	sp,sp,32
    8000a6d2:	8082                	ret

Disassembly of section .text.kvm_init:

000000008000a6d4 <kvm_init>:
    fn trampoline();
}

/// Initialize the one kernel_pagetable
#[no_mangle]
pub unsafe fn kvm_init(){
    8000a6d4:	7175                	addi	sp,sp,-144
    // check if RawPage and PageTable have the same memory layout
    assert_eq!(size_of::<RawPage>(), PGSIZE);
    8000a6d6:	e506                	sd	ra,136(sp)

000000008000a6d8 <.LBB0_2>:
    8000a6d8:	0001c517          	auipc	a0,0x1c
    8000a6dc:	14850513          	addi	a0,a0,328 # 80026820 <.L__unnamed_6+0xe8>
    8000a6e0:	e02a                	sd	a0,0(sp)
    8000a6e2:	e42a                	sd	a0,8(sp)
    8000a6e4:	e82a                	sd	a0,16(sp)
    8000a6e6:	e4aa                	sd	a0,72(sp)
    8000a6e8:	e8aa                	sd	a0,80(sp)
    assert_eq!(align_of::<RawPage>(), PGSIZE);
    8000a6ea:	ec2a                	sd	a0,24(sp)
    8000a6ec:	f02a                	sd	a0,32(sp)
    8000a6ee:	ecaa                	sd	a0,88(sp)
    8000a6f0:	f0aa                	sd	a0,96(sp)
    assert_eq!(size_of::<RawPage>(), size_of::<PageTable>());
    8000a6f2:	f42a                	sd	a0,40(sp)
    8000a6f4:	f82a                	sd	a0,48(sp)
    8000a6f6:	f4aa                	sd	a0,104(sp)
    8000a6f8:	f8aa                	sd	a0,112(sp)
    assert_eq!(align_of::<RawPage>(), align_of::<PageTable>());
    8000a6fa:	fc2a                	sd	a0,56(sp)
    8000a6fc:	e0aa                	sd	a0,64(sp)
    8000a6fe:	fcaa                	sd	a0,120(sp)
    8000a700:	e12a                	sd	a0,128(sp)

    kernel_map();
    8000a702:	00000097          	auipc	ra,0x0
    8000a706:	044080e7          	jalr	68(ra) # 8000a746 <_ZN6kernel6memory7mapping10kernel_map10kernel_map17hdb0b29a584d860dbE>
    8000a70a:	a009                	j	8000a70c <.LBB0_2+0x34>
}
    8000a70c:	60aa                	ld	ra,136(sp)
    8000a70e:	6149                	addi	sp,sp,144
    8000a710:	8082                	ret

Disassembly of section .text._ZN6kernel6memory7mapping10kernel_map13kvm_init_hart17hca08c717b940e5bcE:

000000008000a712 <_ZN6kernel6memory7mapping10kernel_map13kvm_init_hart17hca08c717b940e5bcE>:

/// Switch h/w page table register to the kernel's page table,
/// and enable paging.
pub unsafe fn kvm_init_hart() {
    8000a712:	1141                	addi	sp,sp,-16
    satp::write(KERNEL_PAGETABLE.as_satp());
    8000a714:	e406                	sd	ra,8(sp)

000000008000a716 <.LBB1_4>:
    8000a716:	00059517          	auipc	a0,0x59
    8000a71a:	8ea50513          	addi	a0,a0,-1814 # 80063000 <_ZN6kernel6memory7mapping10kernel_map16KERNEL_PAGETABLE17h338fe72968ecefecE>
    8000a71e:	0000c097          	auipc	ra,0xc
    8000a722:	4ae080e7          	jalr	1198(ra) # 80016bcc <_ZN6kernel6memory7mapping10page_table9PageTable7as_satp17h97121d8f678f163eE>
    8000a726:	e02a                	sd	a0,0(sp)
    8000a728:	a009                	j	8000a72a <.LBB1_4+0x14>
    8000a72a:	6502                	ld	a0,0(sp)
    8000a72c:	00014097          	auipc	ra,0x14
    8000a730:	e2c080e7          	jalr	-468(ra) # 8001e558 <_ZN6kernel4arch5riscv8register4satp5write17h136481b47a553b1cE>
    8000a734:	a009                	j	8000a736 <.LBB1_4+0x20>
    sfence_vma();
    8000a736:	0000e097          	auipc	ra,0xe
    8000a73a:	c0c080e7          	jalr	-1012(ra) # 80018342 <_ZN6kernel4arch5riscv8register10sfence_vma17h7533c6c75a9febaaE>
    8000a73e:	a009                	j	8000a740 <.LBB1_4+0x2a>
}
    8000a740:	60a2                	ld	ra,8(sp)
    8000a742:	0141                	addi	sp,sp,16
    8000a744:	8082                	ret

Disassembly of section .text._ZN6kernel6memory7mapping10kernel_map10kernel_map17hdb0b29a584d860dbE:

000000008000a746 <_ZN6kernel6memory7mapping10kernel_map10kernel_map17hdb0b29a584d860dbE>:


/// Make a direct-map page table for the kernel.
unsafe fn kernel_map() {
    8000a746:	7129                	addi	sp,sp,-320
    println!("kernel page map");
    8000a748:	fe06                	sd	ra,312(sp)

000000008000a74a <.LBB2_48>:
    8000a74a:	0001d597          	auipc	a1,0x1d
    8000a74e:	40658593          	addi	a1,a1,1030 # 80027b50 <.L__unnamed_2>

000000008000a752 <.LBB2_49>:
    8000a752:	0001d697          	auipc	a3,0x1d
    8000a756:	40e68693          	addi	a3,a3,1038 # 80027b60 <.L__unnamed_4>
    8000a75a:	0228                	addi	a0,sp,264
    8000a75c:	4605                	li	a2,1
    8000a75e:	4701                	li	a4,0
    8000a760:	ffffb097          	auipc	ra,0xffffb
    8000a764:	cd4080e7          	jalr	-812(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8000a768:	a009                	j	8000a76a <.LBB2_49+0x18>
    8000a76a:	0228                	addi	a0,sp,264
    8000a76c:	00013097          	auipc	ra,0x13
    8000a770:	444080e7          	jalr	1092(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8000a774:	a009                	j	8000a776 <.LBB2_49+0x24>
    8000a776:	00100537          	lui	a0,0x100
    // map VIRT_TEST for shutdown or reboot
    KERNEL_PAGETABLE.kernel_map(
        VirtualAddress::new(VIRT_TEST),
    8000a77a:	00007097          	auipc	ra,0x7
    8000a77e:	d9e080e7          	jalr	-610(ra) # 80011518 <_ZN6kernel6memory7address14VirtualAddress3new17h716be423461f1938E>
    8000a782:	e22a                	sd	a0,256(sp)
    8000a784:	a009                	j	8000a786 <.LBB2_49+0x34>
    8000a786:	00100537          	lui	a0,0x100
        PhysicalAddress::new(VIRT_TEST),
    8000a78a:	00007097          	auipc	ra,0x7
    8000a78e:	e3e080e7          	jalr	-450(ra) # 800115c8 <_ZN6kernel6memory7address15PhysicalAddress3new17hf2b76f8479ac6235E>
    8000a792:	fdaa                	sd	a0,248(sp)
    8000a794:	a009                	j	8000a796 <.LBB2_49+0x44>
    8000a796:	4509                	li	a0,2
    8000a798:	4591                	li	a1,4
        PGSIZE,
        PteFlags::R | PteFlags::W
    8000a79a:	ffffe097          	auipc	ra,0xffffe
    8000a79e:	100080e7          	jalr	256(ra) # 8000889a <_ZN93_$LT$kernel..memory..mapping..page_table_entry..PteFlags$u20$as$u20$core..ops..bit..BitOr$GT$5bitor17h95bfa721b377cbd2E>
    8000a7a2:	f9aa                	sd	a0,240(sp)
    8000a7a4:	a009                	j	8000a7a6 <.LBB2_49+0x54>
    KERNEL_PAGETABLE.kernel_map(
    8000a7a6:	774e                	ld	a4,240(sp)
    8000a7a8:	766e                	ld	a2,248(sp)
    8000a7aa:	6592                	ld	a1,256(sp)

000000008000a7ac <.LBB2_50>:
    8000a7ac:	00059517          	auipc	a0,0x59
    8000a7b0:	85450513          	addi	a0,a0,-1964 # 80063000 <_ZN6kernel6memory7mapping10kernel_map16KERNEL_PAGETABLE17h338fe72968ecefecE>
    8000a7b4:	6685                	lui	a3,0x1
    8000a7b6:	0000d097          	auipc	ra,0xd
    8000a7ba:	ab6080e7          	jalr	-1354(ra) # 8001726c <_ZN6kernel6memory7mapping10page_table9PageTable10kernel_map17h284e6512c0cc8b52E>
    8000a7be:	a009                	j	8000a7c0 <.LBB2_50+0x14>
    8000a7c0:	10000537          	lui	a0,0x10000
    );

    // uart registers
    KERNEL_PAGETABLE.kernel_map(
        VirtualAddress::new(UART0), 
    8000a7c4:	00007097          	auipc	ra,0x7
    8000a7c8:	d54080e7          	jalr	-684(ra) # 80011518 <_ZN6kernel6memory7address14VirtualAddress3new17h716be423461f1938E>
    8000a7cc:	f5aa                	sd	a0,232(sp)
    8000a7ce:	a009                	j	8000a7d0 <.LBB2_50+0x24>
    8000a7d0:	10000537          	lui	a0,0x10000
        PhysicalAddress::new(UART0), 
    8000a7d4:	00007097          	auipc	ra,0x7
    8000a7d8:	df4080e7          	jalr	-524(ra) # 800115c8 <_ZN6kernel6memory7address15PhysicalAddress3new17hf2b76f8479ac6235E>
    8000a7dc:	f1aa                	sd	a0,224(sp)
    8000a7de:	a009                	j	8000a7e0 <.LBB2_50+0x34>
    8000a7e0:	4509                	li	a0,2
    8000a7e2:	4591                	li	a1,4
        PGSIZE, 
        PteFlags::R | PteFlags::W,
    8000a7e4:	ffffe097          	auipc	ra,0xffffe
    8000a7e8:	0b6080e7          	jalr	182(ra) # 8000889a <_ZN93_$LT$kernel..memory..mapping..page_table_entry..PteFlags$u20$as$u20$core..ops..bit..BitOr$GT$5bitor17h95bfa721b377cbd2E>
    8000a7ec:	edaa                	sd	a0,216(sp)
    8000a7ee:	a009                	j	8000a7f0 <.LBB2_50+0x44>
    KERNEL_PAGETABLE.kernel_map(
    8000a7f0:	676e                	ld	a4,216(sp)
    8000a7f2:	760e                	ld	a2,224(sp)
    8000a7f4:	75ae                	ld	a1,232(sp)

000000008000a7f6 <.LBB2_51>:
    8000a7f6:	00059517          	auipc	a0,0x59
    8000a7fa:	80a50513          	addi	a0,a0,-2038 # 80063000 <_ZN6kernel6memory7mapping10kernel_map16KERNEL_PAGETABLE17h338fe72968ecefecE>
    8000a7fe:	6685                	lui	a3,0x1
    8000a800:	0000d097          	auipc	ra,0xd
    8000a804:	a6c080e7          	jalr	-1428(ra) # 8001726c <_ZN6kernel6memory7mapping10page_table9PageTable10kernel_map17h284e6512c0cc8b52E>
    8000a808:	a009                	j	8000a80a <.LBB2_51+0x14>
    8000a80a:	10001537          	lui	a0,0x10001
    );
    // virtio mmio disk interface
    KERNEL_PAGETABLE.kernel_map(
        VirtualAddress::new(VIRTIO0), 
    8000a80e:	00007097          	auipc	ra,0x7
    8000a812:	d0a080e7          	jalr	-758(ra) # 80011518 <_ZN6kernel6memory7address14VirtualAddress3new17h716be423461f1938E>
    8000a816:	e9aa                	sd	a0,208(sp)
    8000a818:	a009                	j	8000a81a <.LBB2_51+0x24>
    8000a81a:	10001537          	lui	a0,0x10001
        PhysicalAddress::new(VIRTIO0), 
    8000a81e:	00007097          	auipc	ra,0x7
    8000a822:	daa080e7          	jalr	-598(ra) # 800115c8 <_ZN6kernel6memory7address15PhysicalAddress3new17hf2b76f8479ac6235E>
    8000a826:	e5aa                	sd	a0,200(sp)
    8000a828:	a009                	j	8000a82a <.LBB2_51+0x34>
    8000a82a:	4509                	li	a0,2
    8000a82c:	4591                	li	a1,4
        PGSIZE, 
        PteFlags::R | PteFlags::W
    8000a82e:	ffffe097          	auipc	ra,0xffffe
    8000a832:	06c080e7          	jalr	108(ra) # 8000889a <_ZN93_$LT$kernel..memory..mapping..page_table_entry..PteFlags$u20$as$u20$core..ops..bit..BitOr$GT$5bitor17h95bfa721b377cbd2E>
    8000a836:	e1aa                	sd	a0,192(sp)
    8000a838:	a009                	j	8000a83a <.LBB2_51+0x44>
    KERNEL_PAGETABLE.kernel_map(
    8000a83a:	670e                	ld	a4,192(sp)
    8000a83c:	662e                	ld	a2,200(sp)
    8000a83e:	65ce                	ld	a1,208(sp)

000000008000a840 <.LBB2_52>:
    8000a840:	00058517          	auipc	a0,0x58
    8000a844:	7c050513          	addi	a0,a0,1984 # 80063000 <_ZN6kernel6memory7mapping10kernel_map16KERNEL_PAGETABLE17h338fe72968ecefecE>
    8000a848:	6685                	lui	a3,0x1
    8000a84a:	0000d097          	auipc	ra,0xd
    8000a84e:	a22080e7          	jalr	-1502(ra) # 8001726c <_ZN6kernel6memory7mapping10page_table9PageTable10kernel_map17h284e6512c0cc8b52E>
    8000a852:	a009                	j	8000a854 <.LBB2_52+0x14>
    8000a854:	30000537          	lui	a0,0x30000
    );

    // PCI-E ECAM (configuration space), for pci.rs
    KERNEL_PAGETABLE.kernel_map(
        VirtualAddress::new(ECAM),
    8000a858:	00007097          	auipc	ra,0x7
    8000a85c:	cc0080e7          	jalr	-832(ra) # 80011518 <_ZN6kernel6memory7address14VirtualAddress3new17h716be423461f1938E>
    8000a860:	fd2a                	sd	a0,184(sp)
    8000a862:	a009                	j	8000a864 <.LBB2_52+0x24>
    8000a864:	30000537          	lui	a0,0x30000
        PhysicalAddress::new(ECAM),
    8000a868:	00007097          	auipc	ra,0x7
    8000a86c:	d60080e7          	jalr	-672(ra) # 800115c8 <_ZN6kernel6memory7address15PhysicalAddress3new17hf2b76f8479ac6235E>
    8000a870:	f92a                	sd	a0,176(sp)
    8000a872:	a009                	j	8000a874 <.LBB2_52+0x34>
    8000a874:	4509                	li	a0,2
    8000a876:	4591                	li	a1,4
        0x10000000,
        PteFlags::R | PteFlags::W
    8000a878:	ffffe097          	auipc	ra,0xffffe
    8000a87c:	022080e7          	jalr	34(ra) # 8000889a <_ZN93_$LT$kernel..memory..mapping..page_table_entry..PteFlags$u20$as$u20$core..ops..bit..BitOr$GT$5bitor17h95bfa721b377cbd2E>
    8000a880:	f52a                	sd	a0,168(sp)
    8000a882:	a009                	j	8000a884 <.LBB2_52+0x44>
    KERNEL_PAGETABLE.kernel_map(
    8000a884:	772a                	ld	a4,168(sp)
    8000a886:	764a                	ld	a2,176(sp)
    8000a888:	75ea                	ld	a1,184(sp)

000000008000a88a <.LBB2_53>:
    8000a88a:	00058517          	auipc	a0,0x58
    8000a88e:	77650513          	addi	a0,a0,1910 # 80063000 <_ZN6kernel6memory7mapping10kernel_map16KERNEL_PAGETABLE17h338fe72968ecefecE>
    8000a892:	100006b7          	lui	a3,0x10000
    8000a896:	0000d097          	auipc	ra,0xd
    8000a89a:	9d6080e7          	jalr	-1578(ra) # 8001726c <_ZN6kernel6memory7mapping10page_table9PageTable10kernel_map17h284e6512c0cc8b52E>
    8000a89e:	a009                	j	8000a8a0 <.LBB2_53+0x16>
    8000a8a0:	40000537          	lui	a0,0x40000
    );

    // pci maps the e1000's registers here.
    KERNEL_PAGETABLE.kernel_map(
        VirtualAddress::new(E1000_REGS),
    8000a8a4:	00007097          	auipc	ra,0x7
    8000a8a8:	c74080e7          	jalr	-908(ra) # 80011518 <_ZN6kernel6memory7address14VirtualAddress3new17h716be423461f1938E>
    8000a8ac:	f12a                	sd	a0,160(sp)
    8000a8ae:	a009                	j	8000a8b0 <.LBB2_53+0x26>
    8000a8b0:	40000537          	lui	a0,0x40000
        PhysicalAddress::new(E1000_REGS),
    8000a8b4:	00007097          	auipc	ra,0x7
    8000a8b8:	d14080e7          	jalr	-748(ra) # 800115c8 <_ZN6kernel6memory7address15PhysicalAddress3new17hf2b76f8479ac6235E>
    8000a8bc:	ed2a                	sd	a0,152(sp)
    8000a8be:	a009                	j	8000a8c0 <.LBB2_53+0x36>
    8000a8c0:	4509                	li	a0,2
    8000a8c2:	4591                	li	a1,4
        0x20000,
        PteFlags::R | PteFlags::W
    8000a8c4:	ffffe097          	auipc	ra,0xffffe
    8000a8c8:	fd6080e7          	jalr	-42(ra) # 8000889a <_ZN93_$LT$kernel..memory..mapping..page_table_entry..PteFlags$u20$as$u20$core..ops..bit..BitOr$GT$5bitor17h95bfa721b377cbd2E>
    8000a8cc:	e92a                	sd	a0,144(sp)
    8000a8ce:	a009                	j	8000a8d0 <.LBB2_53+0x46>
    KERNEL_PAGETABLE.kernel_map(
    8000a8d0:	674a                	ld	a4,144(sp)
    8000a8d2:	666a                	ld	a2,152(sp)
    8000a8d4:	758a                	ld	a1,160(sp)

000000008000a8d6 <.LBB2_54>:
    8000a8d6:	00058517          	auipc	a0,0x58
    8000a8da:	72a50513          	addi	a0,a0,1834 # 80063000 <_ZN6kernel6memory7mapping10kernel_map16KERNEL_PAGETABLE17h338fe72968ecefecE>
    8000a8de:	000206b7          	lui	a3,0x20
    8000a8e2:	0000d097          	auipc	ra,0xd
    8000a8e6:	98a080e7          	jalr	-1654(ra) # 8001726c <_ZN6kernel6memory7mapping10page_table9PageTable10kernel_map17h284e6512c0cc8b52E>
    8000a8ea:	a009                	j	8000a8ec <.LBB2_54+0x16>
    8000a8ec:	02000537          	lui	a0,0x2000
    );

    // CLINT
    KERNEL_PAGETABLE.kernel_map(
        VirtualAddress::new(CLINT),
    8000a8f0:	00007097          	auipc	ra,0x7
    8000a8f4:	c28080e7          	jalr	-984(ra) # 80011518 <_ZN6kernel6memory7address14VirtualAddress3new17h716be423461f1938E>
    8000a8f8:	e52a                	sd	a0,136(sp)
    8000a8fa:	a009                	j	8000a8fc <.LBB2_54+0x26>
    8000a8fc:	02000537          	lui	a0,0x2000
        PhysicalAddress::new(CLINT),
    8000a900:	00007097          	auipc	ra,0x7
    8000a904:	cc8080e7          	jalr	-824(ra) # 800115c8 <_ZN6kernel6memory7address15PhysicalAddress3new17hf2b76f8479ac6235E>
    8000a908:	e12a                	sd	a0,128(sp)
    8000a90a:	a009                	j	8000a90c <.LBB2_54+0x36>
    8000a90c:	4509                	li	a0,2
    8000a90e:	4591                	li	a1,4
        0x10000,
        PteFlags::R | PteFlags::W
    8000a910:	ffffe097          	auipc	ra,0xffffe
    8000a914:	f8a080e7          	jalr	-118(ra) # 8000889a <_ZN93_$LT$kernel..memory..mapping..page_table_entry..PteFlags$u20$as$u20$core..ops..bit..BitOr$GT$5bitor17h95bfa721b377cbd2E>
    8000a918:	fcaa                	sd	a0,120(sp)
    8000a91a:	a009                	j	8000a91c <.LBB2_54+0x46>
    KERNEL_PAGETABLE.kernel_map(
    8000a91c:	7766                	ld	a4,120(sp)
    8000a91e:	660a                	ld	a2,128(sp)
    8000a920:	65aa                	ld	a1,136(sp)

000000008000a922 <.LBB2_55>:
    8000a922:	00058517          	auipc	a0,0x58
    8000a926:	6de50513          	addi	a0,a0,1758 # 80063000 <_ZN6kernel6memory7mapping10kernel_map16KERNEL_PAGETABLE17h338fe72968ecefecE>
    8000a92a:	66c1                	lui	a3,0x10
    8000a92c:	0000d097          	auipc	ra,0xd
    8000a930:	940080e7          	jalr	-1728(ra) # 8001726c <_ZN6kernel6memory7mapping10page_table9PageTable10kernel_map17h284e6512c0cc8b52E>
    8000a934:	a009                	j	8000a936 <.LBB2_55+0x14>
    8000a936:	0c000537          	lui	a0,0xc000
    );

    // PLIC
    KERNEL_PAGETABLE.kernel_map(
        VirtualAddress::new(PLIC_BASE), 
    8000a93a:	00007097          	auipc	ra,0x7
    8000a93e:	bde080e7          	jalr	-1058(ra) # 80011518 <_ZN6kernel6memory7address14VirtualAddress3new17h716be423461f1938E>
    8000a942:	f8aa                	sd	a0,112(sp)
    8000a944:	a009                	j	8000a946 <.LBB2_55+0x24>
    8000a946:	0c000537          	lui	a0,0xc000
        PhysicalAddress::new(PLIC_BASE), 
    8000a94a:	00007097          	auipc	ra,0x7
    8000a94e:	c7e080e7          	jalr	-898(ra) # 800115c8 <_ZN6kernel6memory7address15PhysicalAddress3new17hf2b76f8479ac6235E>
    8000a952:	f4aa                	sd	a0,104(sp)
    8000a954:	a009                	j	8000a956 <.LBB2_55+0x34>
    8000a956:	4509                	li	a0,2
    8000a958:	4591                	li	a1,4
        0x400000, 
        PteFlags::R | PteFlags::W
    8000a95a:	ffffe097          	auipc	ra,0xffffe
    8000a95e:	f40080e7          	jalr	-192(ra) # 8000889a <_ZN93_$LT$kernel..memory..mapping..page_table_entry..PteFlags$u20$as$u20$core..ops..bit..BitOr$GT$5bitor17h95bfa721b377cbd2E>
    8000a962:	f0aa                	sd	a0,96(sp)
    8000a964:	a009                	j	8000a966 <.LBB2_55+0x44>
    KERNEL_PAGETABLE.kernel_map(
    8000a966:	7706                	ld	a4,96(sp)
    8000a968:	7626                	ld	a2,104(sp)
    8000a96a:	75c6                	ld	a1,112(sp)

000000008000a96c <.LBB2_56>:
    8000a96c:	00058517          	auipc	a0,0x58
    8000a970:	69450513          	addi	a0,a0,1684 # 80063000 <_ZN6kernel6memory7mapping10kernel_map16KERNEL_PAGETABLE17h338fe72968ecefecE>
    8000a974:	004006b7          	lui	a3,0x400
    8000a978:	0000d097          	auipc	ra,0xd
    8000a97c:	8f4080e7          	jalr	-1804(ra) # 8001726c <_ZN6kernel6memory7mapping10page_table9PageTable10kernel_map17h284e6512c0cc8b52E>
    8000a980:	a009                	j	8000a982 <.LBB2_56+0x16>
    8000a982:	4505                	li	a0,1
    8000a984:	057e                	slli	a0,a0,0x1f
    );

    // map kernel text exectuable and read-only
    KERNEL_PAGETABLE.kernel_map(
        VirtualAddress::new(KERNEL_BASE), 
    8000a986:	00007097          	auipc	ra,0x7
    8000a98a:	b92080e7          	jalr	-1134(ra) # 80011518 <_ZN6kernel6memory7address14VirtualAddress3new17h716be423461f1938E>
    8000a98e:	ecaa                	sd	a0,88(sp)
    8000a990:	a009                	j	8000a992 <.LBB2_56+0x26>
    8000a992:	4505                	li	a0,1
    8000a994:	057e                	slli	a0,a0,0x1f
        PhysicalAddress::new(KERNEL_BASE), 
    8000a996:	00007097          	auipc	ra,0x7
    8000a99a:	c32080e7          	jalr	-974(ra) # 800115c8 <_ZN6kernel6memory7address15PhysicalAddress3new17hf2b76f8479ac6235E>
    8000a99e:	e8aa                	sd	a0,80(sp)
    8000a9a0:	a009                	j	8000a9a2 <.LBB2_57>

000000008000a9a2 <.LBB2_57>:
        etext as usize - KERNEL_BASE, 
    8000a9a2:	00024517          	auipc	a0,0x24
    8000a9a6:	65e50513          	addi	a0,a0,1630 # 8002f000 <_ZN6kernel2fs3bio6BCACHE17h4811aac4f8d79dc4E>
    8000a9aa:	800005b7          	lui	a1,0x80000
    8000a9ae:	95aa                	add	a1,a1,a0
    8000a9b0:	e4ae                	sd	a1,72(sp)
    8000a9b2:	10b56263          	bltu	a0,a1,8000aab6 <.LBB2_66>
    8000a9b6:	a009                	j	8000a9b8 <.LBB2_57+0x16>
    8000a9b8:	4509                	li	a0,2
    8000a9ba:	45a1                	li	a1,8
        PteFlags::R | PteFlags::X
    8000a9bc:	ffffe097          	auipc	ra,0xffffe
    8000a9c0:	ede080e7          	jalr	-290(ra) # 8000889a <_ZN93_$LT$kernel..memory..mapping..page_table_entry..PteFlags$u20$as$u20$core..ops..bit..BitOr$GT$5bitor17h95bfa721b377cbd2E>
    8000a9c4:	e0aa                	sd	a0,64(sp)
    8000a9c6:	a009                	j	8000a9c8 <.LBB2_57+0x26>
    KERNEL_PAGETABLE.kernel_map(
    8000a9c8:	6706                	ld	a4,64(sp)
    8000a9ca:	66a6                	ld	a3,72(sp)
    8000a9cc:	6646                	ld	a2,80(sp)
    8000a9ce:	65e6                	ld	a1,88(sp)

000000008000a9d0 <.LBB2_58>:
    8000a9d0:	00058517          	auipc	a0,0x58
    8000a9d4:	63050513          	addi	a0,a0,1584 # 80063000 <_ZN6kernel6memory7mapping10kernel_map16KERNEL_PAGETABLE17h338fe72968ecefecE>
    8000a9d8:	0000d097          	auipc	ra,0xd
    8000a9dc:	894080e7          	jalr	-1900(ra) # 8001726c <_ZN6kernel6memory7mapping10page_table9PageTable10kernel_map17h284e6512c0cc8b52E>
    8000a9e0:	a009                	j	8000a9e2 <.LBB2_59>

000000008000a9e2 <.LBB2_59>:
    );

    // map kernel data and the physical RAM we'll make use of
    KERNEL_PAGETABLE.kernel_map(
        VirtualAddress::new(etext as usize), 
    8000a9e2:	00024517          	auipc	a0,0x24
    8000a9e6:	61e50513          	addi	a0,a0,1566 # 8002f000 <_ZN6kernel2fs3bio6BCACHE17h4811aac4f8d79dc4E>
    8000a9ea:	00007097          	auipc	ra,0x7
    8000a9ee:	b2e080e7          	jalr	-1234(ra) # 80011518 <_ZN6kernel6memory7address14VirtualAddress3new17h716be423461f1938E>
    8000a9f2:	fc2a                	sd	a0,56(sp)
    8000a9f4:	a009                	j	8000a9f6 <.LBB2_60>

000000008000a9f6 <.LBB2_60>:
        PhysicalAddress::new(etext as usize), 
    8000a9f6:	00024517          	auipc	a0,0x24
    8000a9fa:	60a50513          	addi	a0,a0,1546 # 8002f000 <_ZN6kernel2fs3bio6BCACHE17h4811aac4f8d79dc4E>
    8000a9fe:	00007097          	auipc	ra,0x7
    8000aa02:	bca080e7          	jalr	-1078(ra) # 800115c8 <_ZN6kernel6memory7address15PhysicalAddress3new17hf2b76f8479ac6235E>
    8000aa06:	f82a                	sd	a0,48(sp)
    8000aa08:	a009                	j	8000aa0a <.LBB2_61>

000000008000aa0a <.LBB2_61>:
        PHYSTOP - etext as usize, 
    8000aa0a:	00024597          	auipc	a1,0x24
    8000aa0e:	5f658593          	addi	a1,a1,1526 # 8002f000 <_ZN6kernel2fs3bio6BCACHE17h4811aac4f8d79dc4E>
    8000aa12:	4545                	li	a0,17
    8000aa14:	056e                	slli	a0,a0,0x1b
    8000aa16:	40b505b3          	sub	a1,a0,a1
    8000aa1a:	f42e                	sd	a1,40(sp)
    8000aa1c:	0ab56c63          	bltu	a0,a1,8000aad4 <.LBB2_68>
    8000aa20:	a009                	j	8000aa22 <.LBB2_61+0x18>
    8000aa22:	4509                	li	a0,2
    8000aa24:	4591                	li	a1,4
        PteFlags::R | PteFlags::W
    8000aa26:	ffffe097          	auipc	ra,0xffffe
    8000aa2a:	e74080e7          	jalr	-396(ra) # 8000889a <_ZN93_$LT$kernel..memory..mapping..page_table_entry..PteFlags$u20$as$u20$core..ops..bit..BitOr$GT$5bitor17h95bfa721b377cbd2E>
    8000aa2e:	f02a                	sd	a0,32(sp)
    8000aa30:	a009                	j	8000aa32 <.LBB2_61+0x28>
    KERNEL_PAGETABLE.kernel_map(
    8000aa32:	7702                	ld	a4,32(sp)
    8000aa34:	76a2                	ld	a3,40(sp)
    8000aa36:	7642                	ld	a2,48(sp)
    8000aa38:	75e2                	ld	a1,56(sp)

000000008000aa3a <.LBB2_62>:
    8000aa3a:	00058517          	auipc	a0,0x58
    8000aa3e:	5c650513          	addi	a0,a0,1478 # 80063000 <_ZN6kernel6memory7mapping10kernel_map16KERNEL_PAGETABLE17h338fe72968ecefecE>
    8000aa42:	0000d097          	auipc	ra,0xd
    8000aa46:	82a080e7          	jalr	-2006(ra) # 8001726c <_ZN6kernel6memory7mapping10page_table9PageTable10kernel_map17h284e6512c0cc8b52E>
    8000aa4a:	a009                	j	8000aa4c <.LBB2_62+0x12>
    8000aa4c:	04000537          	lui	a0,0x4000
    8000aa50:	357d                	addiw	a0,a0,-1
    8000aa52:	0532                	slli	a0,a0,0xc
    );

    // map the trampoline for trap entry/exit
    // the highest virtual address in the kernel
    KERNEL_PAGETABLE.kernel_map(
        VirtualAddress::new(TRAMPOLINE), 
    8000aa54:	00007097          	auipc	ra,0x7
    8000aa58:	ac4080e7          	jalr	-1340(ra) # 80011518 <_ZN6kernel6memory7address14VirtualAddress3new17h716be423461f1938E>
    8000aa5c:	ec2a                	sd	a0,24(sp)
    8000aa5e:	a009                	j	8000aa60 <.LBB2_63>

000000008000aa60 <.LBB2_63>:
        PhysicalAddress::new(trampoline as usize), 
    8000aa60:	ffff6517          	auipc	a0,0xffff6
    8000aa64:	5a050513          	addi	a0,a0,1440 # 80001000 <trampoline>
    8000aa68:	00007097          	auipc	ra,0x7
    8000aa6c:	b60080e7          	jalr	-1184(ra) # 800115c8 <_ZN6kernel6memory7address15PhysicalAddress3new17hf2b76f8479ac6235E>
    8000aa70:	e82a                	sd	a0,16(sp)
    8000aa72:	a009                	j	8000aa74 <.LBB2_63+0x14>
    8000aa74:	4509                	li	a0,2
    8000aa76:	45a1                	li	a1,8
        PGSIZE, 
        PteFlags::R | PteFlags::X
    8000aa78:	ffffe097          	auipc	ra,0xffffe
    8000aa7c:	e22080e7          	jalr	-478(ra) # 8000889a <_ZN93_$LT$kernel..memory..mapping..page_table_entry..PteFlags$u20$as$u20$core..ops..bit..BitOr$GT$5bitor17h95bfa721b377cbd2E>
    8000aa80:	e42a                	sd	a0,8(sp)
    8000aa82:	a009                	j	8000aa84 <.LBB2_63+0x24>
    KERNEL_PAGETABLE.kernel_map(
    8000aa84:	6722                	ld	a4,8(sp)
    8000aa86:	6642                	ld	a2,16(sp)
    8000aa88:	65e2                	ld	a1,24(sp)

000000008000aa8a <.LBB2_64>:
    8000aa8a:	00058517          	auipc	a0,0x58
    8000aa8e:	57650513          	addi	a0,a0,1398 # 80063000 <_ZN6kernel6memory7mapping10kernel_map16KERNEL_PAGETABLE17h338fe72968ecefecE>
    8000aa92:	6685                	lui	a3,0x1
    8000aa94:	0000c097          	auipc	ra,0xc
    8000aa98:	7d8080e7          	jalr	2008(ra) # 8001726c <_ZN6kernel6memory7mapping10page_table9PageTable10kernel_map17h284e6512c0cc8b52E>
    8000aa9c:	a009                	j	8000aa9e <.LBB2_65>

000000008000aa9e <.LBB2_65>:
    );

    // 映射不同进程的内核栈
    PROC_MANAGER.proc_mapstacks();
    8000aa9e:	0004d517          	auipc	a0,0x4d
    8000aaa2:	b0250513          	addi	a0,a0,-1278 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    8000aaa6:	00003097          	auipc	ra,0x3
    8000aaaa:	850080e7          	jalr	-1968(ra) # 8000d2f6 <_ZN6kernel7process7manager11ProcManager14proc_mapstacks17he92f2c2a936a1699E>
    8000aaae:	a009                	j	8000aab0 <.LBB2_65+0x12>
}
    8000aab0:	70f2                	ld	ra,312(sp)
    8000aab2:	6131                	addi	sp,sp,320
    8000aab4:	8082                	ret

000000008000aab6 <.LBB2_66>:
        etext as usize - KERNEL_BASE, 
    8000aab6:	0001d517          	auipc	a0,0x1d
    8000aaba:	0ca50513          	addi	a0,a0,202 # 80027b80 <str.0>

000000008000aabe <.LBB2_67>:
    8000aabe:	0001d617          	auipc	a2,0x1d
    8000aac2:	0a260613          	addi	a2,a2,162 # 80027b60 <.L__unnamed_4>
    8000aac6:	02100593          	li	a1,33
    8000aaca:	00017097          	auipc	ra,0x17
    8000aace:	632080e7          	jalr	1586(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008000aad4 <.LBB2_68>:
        PHYSTOP - etext as usize, 
    8000aad4:	0001d517          	auipc	a0,0x1d
    8000aad8:	0ac50513          	addi	a0,a0,172 # 80027b80 <str.0>

000000008000aadc <.LBB2_69>:
    8000aadc:	0001d617          	auipc	a2,0x1d
    8000aae0:	0cc60613          	addi	a2,a2,204 # 80027ba8 <.L__unnamed_5>
    8000aae4:	02100593          	li	a1,33
    8000aae8:	00017097          	auipc	ra,0x17
    8000aaec:	614080e7          	jalr	1556(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN11array_macro19__Capacity$LT$_$GT$3get17hecfc1cf2bb733562E:

000000008000aaf2 <_ZN11array_macro19__Capacity$LT$_$GT$3get17hecfc1cf2bb733562E>:

#[doc(hidden)]
pub struct __Capacity<const N: usize>;

impl<const N: usize> __Capacity<N> {
    pub const fn get(&self) -> usize {
    8000aaf2:	1141                	addi	sp,sp,-16
    8000aaf4:	e42a                	sd	a0,8(sp)
    8000aaf6:	06400513          	li	a0,100
        N
    }
    8000aafa:	0141                	addi	sp,sp,16
    8000aafc:	8082                	ret

Disassembly of section .text._ZN11array_macro28__ArrayVecInner$LT$T$C$_$GT$3new17h8c73fc7516a84ce9E:

000000008000aafe <_ZN11array_macro28__ArrayVecInner$LT$T$C$_$GT$3new17h8c73fc7516a84ce9E>:
    pub const unsafe fn new(arr: [MaybeUninit<T>; N]) -> Self {
    8000aafe:	cc010113          	addi	sp,sp,-832
            arr,
    8000ab02:	32113c23          	sd	ra,824(sp)
    8000ab06:	e82a                	sd	a0,16(sp)
    8000ab08:	0828                	addi	a0,sp,24
    8000ab0a:	e02a                	sd	a0,0(sp)
    8000ab0c:	32000613          	li	a2,800
    8000ab10:	e432                	sd	a2,8(sp)
    8000ab12:	0001a097          	auipc	ra,0x1a
    8000ab16:	528080e7          	jalr	1320(ra) # 8002503a <memcpy>
    8000ab1a:	6582                	ld	a1,0(sp)
    8000ab1c:	6622                	ld	a2,8(sp)
        Self {
    8000ab1e:	6542                	ld	a0,16(sp)
    8000ab20:	0001a097          	auipc	ra,0x1a
    8000ab24:	51a080e7          	jalr	1306(ra) # 8002503a <memcpy>
    8000ab28:	65c2                	ld	a1,16(sp)
    8000ab2a:	4501                	li	a0,0
    8000ab2c:	32a5b023          	sd	a0,800(a1)
    }
    8000ab30:	33813083          	ld	ra,824(sp)
    8000ab34:	34010113          	addi	sp,sp,832
    8000ab38:	8082                	ret

Disassembly of section .text._ZN4core4iter6traits8iterator8Iterator4fold17hc68e62fe16e6d649E:

000000008000ab3a <_ZN4core4iter6traits8iterator8Iterator4fold17hc68e62fe16e6d649E>:
    /// [`reduce()`]: Iterator::reduce
    #[doc(alias = "reduce")]
    #[doc(alias = "inject")]
    #[inline]
    #[stable(feature = "rust1", since = "1.0.0")]
    fn fold<B, F>(mut self, init: B, mut f: F) -> B
    8000ab3a:	715d                	addi	sp,sp,-80
    8000ab3c:	e486                	sd	ra,72(sp)
    8000ab3e:	e42a                	sd	a0,8(sp)
    8000ab40:	e82e                	sd	a1,16(sp)
    8000ab42:	ec32                	sd	a2,24(sp)
    where
        Self: Sized,
        F: FnMut(B, Self::Item) -> B,
    {
        let mut accum = init;
        while let Some(x) = self.next() {
    8000ab44:	a009                	j	8000ab46 <_ZN4core4iter6traits8iterator8Iterator4fold17hc68e62fe16e6d649E+0xc>
    8000ab46:	0028                	addi	a0,sp,8
    8000ab48:	00000097          	auipc	ra,0x0
    8000ab4c:	776080e7          	jalr	1910(ra) # 8000b2be <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb379e12fde7ef54dE>
    8000ab50:	f42a                	sd	a0,40(sp)
    8000ab52:	a009                	j	8000ab54 <_ZN4core4iter6traits8iterator8Iterator4fold17hc68e62fe16e6d649E+0x1a>
    8000ab54:	7522                	ld	a0,40(sp)
    8000ab56:	4581                	li	a1,0
    8000ab58:	00b51463          	bne	a0,a1,8000ab60 <_ZN4core4iter6traits8iterator8Iterator4fold17hc68e62fe16e6d649E+0x26>
    8000ab5c:	a009                	j	8000ab5e <_ZN4core4iter6traits8iterator8Iterator4fold17hc68e62fe16e6d649E+0x24>
            accum = f(accum, x);
        }
    8000ab5e:	a819                	j	8000ab74 <_ZN4core4iter6traits8iterator8Iterator4fold17hc68e62fe16e6d649E+0x3a>
        while let Some(x) = self.next() {
    8000ab60:	75a2                	ld	a1,40(sp)
    8000ab62:	e0ae                	sd	a1,64(sp)
            accum = f(accum, x);
    8000ab64:	f82e                	sd	a1,48(sp)
    8000ab66:	0828                	addi	a0,sp,24
    8000ab68:	00007097          	auipc	ra,0x7
    8000ab6c:	492080e7          	jalr	1170(ra) # 80011ffa <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold9enumerate28_$u7b$$u7b$closure$u7d$$u7d$17hd0c93bb900581135E>
    8000ab70:	a009                	j	8000ab72 <_ZN4core4iter6traits8iterator8Iterator4fold17hc68e62fe16e6d649E+0x38>
        while let Some(x) = self.next() {
    8000ab72:	bfd1                	j	8000ab46 <_ZN4core4iter6traits8iterator8Iterator4fold17hc68e62fe16e6d649E+0xc>
        accum
    }
    8000ab74:	a009                	j	8000ab76 <_ZN4core4iter6traits8iterator8Iterator4fold17hc68e62fe16e6d649E+0x3c>
    8000ab76:	a009                	j	8000ab78 <_ZN4core4iter6traits8iterator8Iterator4fold17hc68e62fe16e6d649E+0x3e>
    8000ab78:	60a6                	ld	ra,72(sp)
    8000ab7a:	6161                	addi	sp,sp,80
    8000ab7c:	8082                	ret

Disassembly of section .text._ZN4core4iter6traits8iterator8Iterator6copied17hc4f54d9039c4545bE:

000000008000ab7e <_ZN4core4iter6traits8iterator8Iterator6copied17hc4f54d9039c4545bE>:
    ///
    /// assert_eq!(v_copied, vec![1, 2, 3]);
    /// assert_eq!(v_map, vec![1, 2, 3]);
    /// ```
    #[stable(feature = "iter_copied", since = "1.36.0")]
    fn copied<'a, T: 'a>(self) -> Copied<Self>
    8000ab7e:	7179                	addi	sp,sp,-48
    8000ab80:	f406                	sd	ra,40(sp)
    8000ab82:	ec2a                	sd	a0,24(sp)
    8000ab84:	f02e                	sd	a1,32(sp)
    where
        Self: Sized + Iterator<Item = &'a T>,
        T: Copy,
    {
        Copied::new(self)
    8000ab86:	ffffa097          	auipc	ra,0xffffa
    8000ab8a:	f26080e7          	jalr	-218(ra) # 80004aac <_ZN4core4iter8adapters6copied15Copied$LT$I$GT$3new17h07d9127b76ff3571E>
    8000ab8e:	e42a                	sd	a0,8(sp)
    8000ab90:	e82e                	sd	a1,16(sp)
    8000ab92:	a009                	j	8000ab94 <_ZN4core4iter6traits8iterator8Iterator6copied17hc4f54d9039c4545bE+0x16>
    }
    8000ab94:	65c2                	ld	a1,16(sp)
    8000ab96:	6522                	ld	a0,8(sp)
    8000ab98:	70a2                	ld	ra,40(sp)
    8000ab9a:	6145                	addi	sp,sp,48
    8000ab9c:	8082                	ret

Disassembly of section .text._ZN4core4iter6traits8iterator8Iterator9enumerate17h42a569d91d49dc41E:

000000008000ab9e <_ZN4core4iter6traits8iterator8Iterator9enumerate17h42a569d91d49dc41E>:
    fn enumerate(self) -> Enumerate<Self>
    8000ab9e:	1101                	addi	sp,sp,-32
    8000aba0:	ec06                	sd	ra,24(sp)
    8000aba2:	e42e                	sd	a1,8(sp)
    8000aba4:	e832                	sd	a2,16(sp)
        Enumerate::new(self)
    8000aba6:	00007097          	auipc	ra,0x7
    8000abaa:	596080e7          	jalr	1430(ra) # 8001213c <_ZN4core4iter8adapters9enumerate18Enumerate$LT$I$GT$3new17h6d37c7662d298f80E>
    8000abae:	a009                	j	8000abb0 <_ZN4core4iter6traits8iterator8Iterator9enumerate17h42a569d91d49dc41E+0x12>
    }
    8000abb0:	60e2                	ld	ra,24(sp)
    8000abb2:	6105                	addi	sp,sp,32
    8000abb4:	8082                	ret

Disassembly of section .text._ZN4core4iter6traits8iterator8Iterator9enumerate17hf4bbd83c6ce36188E:

000000008000abb6 <_ZN4core4iter6traits8iterator8Iterator9enumerate17hf4bbd83c6ce36188E>:
    fn enumerate(self) -> Enumerate<Self>
    8000abb6:	1101                	addi	sp,sp,-32
    8000abb8:	ec06                	sd	ra,24(sp)
    8000abba:	e42e                	sd	a1,8(sp)
    8000abbc:	e832                	sd	a2,16(sp)
        Enumerate::new(self)
    8000abbe:	00007097          	auipc	ra,0x7
    8000abc2:	566080e7          	jalr	1382(ra) # 80012124 <_ZN4core4iter8adapters9enumerate18Enumerate$LT$I$GT$3new17h36e1d93f918ce5d8E>
    8000abc6:	a009                	j	8000abc8 <_ZN4core4iter6traits8iterator8Iterator9enumerate17hf4bbd83c6ce36188E+0x12>
    }
    8000abc8:	60e2                	ld	ra,24(sp)
    8000abca:	6105                	addi	sp,sp,32
    8000abcc:	8082                	ret

Disassembly of section .text._ZN4core5slice4iter13Iter$LT$T$GT$3new17h255496547b3a0f33E:

000000008000abce <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h255496547b3a0f33E>:
#[stable(feature = "rust1", since = "1.0.0")]
unsafe impl<T: Sync> Send for Iter<'_, T> {}

impl<'a, T> Iter<'a, T> {
    #[inline]
    pub(super) fn new(slice: &'a [T]) -> Self {
    8000abce:	7119                	addi	sp,sp,-128
    8000abd0:	fc86                	sd	ra,120(sp)
    8000abd2:	f82e                	sd	a1,48(sp)
    8000abd4:	fc2a                	sd	a0,56(sp)
    8000abd6:	f0aa                	sd	a0,96(sp)
    8000abd8:	f4ae                	sd	a1,104(sp)
        let ptr = slice.as_ptr();
    8000abda:	00007097          	auipc	ra,0x7
    8000abde:	b02080e7          	jalr	-1278(ra) # 800116dc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h435aa5d084fb4c37E>
    8000abe2:	85aa                	mv	a1,a0
    8000abe4:	e0ae                	sd	a1,64(sp)
    8000abe6:	f8aa                	sd	a0,112(sp)
    8000abe8:	a009                	j	8000abea <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h255496547b3a0f33E+0x1c>
        // SAFETY: Similar to `IterMut::new`.
        unsafe {
            assume(!ptr.is_null());
    8000abea:	6506                	ld	a0,64(sp)
    8000abec:	00007097          	auipc	ra,0x7
    8000abf0:	a90080e7          	jalr	-1392(ra) # 8001167c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17ha3fd0a02496fedc6E>
    8000abf4:	a009                	j	8000abf6 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h255496547b3a0f33E+0x28>
    8000abf6:	a009                	j	8000abf8 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h255496547b3a0f33E+0x2a>

            let end = if mem::size_of::<T>() == 0 {
    8000abf8:	a009                	j	8000abfa <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h255496547b3a0f33E+0x2c>
    8000abfa:	4505                	li	a0,1
    8000abfc:	ed01                	bnez	a0,8000ac14 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h255496547b3a0f33E+0x46>
    8000abfe:	a009                	j	8000ac00 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h255496547b3a0f33E+0x32>
                (ptr as *const u8).wrapping_add(slice.len()) as *const T
    8000ac00:	75c2                	ld	a1,48(sp)
    8000ac02:	7562                	ld	a0,56(sp)
    8000ac04:	6606                	ld	a2,64(sp)
    8000ac06:	f032                	sd	a2,32(sp)
    8000ac08:	00007097          	auipc	ra,0x7
    8000ac0c:	aa0080e7          	jalr	-1376(ra) # 800116a8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf08bc165152fefe5E>
    8000ac10:	f42a                	sd	a0,40(sp)
    8000ac12:	a809                	j	8000ac24 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h255496547b3a0f33E+0x56>
            } else {
                ptr.add(slice.len())
    8000ac14:	75c2                	ld	a1,48(sp)
    8000ac16:	7562                	ld	a0,56(sp)
    8000ac18:	00007097          	auipc	ra,0x7
    8000ac1c:	a90080e7          	jalr	-1392(ra) # 800116a8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf08bc165152fefe5E>
    8000ac20:	ec2a                	sd	a0,24(sp)
    8000ac22:	a821                	j	8000ac3a <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h255496547b3a0f33E+0x6c>
                (ptr as *const u8).wrapping_add(slice.len()) as *const T
    8000ac24:	75a2                	ld	a1,40(sp)
    8000ac26:	7502                	ld	a0,32(sp)
    8000ac28:	ffffa097          	auipc	ra,0xffffa
    8000ac2c:	be2080e7          	jalr	-1054(ra) # 8000480a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h10470fd1e83789bbE>
    8000ac30:	e82a                	sd	a0,16(sp)
    8000ac32:	a009                	j	8000ac34 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h255496547b3a0f33E+0x66>
    8000ac34:	6542                	ld	a0,16(sp)
    8000ac36:	ecaa                	sd	a0,88(sp)
            let end = if mem::size_of::<T>() == 0 {
    8000ac38:	a811                	j	8000ac4c <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h255496547b3a0f33E+0x7e>
                ptr.add(slice.len())
    8000ac3a:	65e2                	ld	a1,24(sp)
    8000ac3c:	6506                	ld	a0,64(sp)
    8000ac3e:	00007097          	auipc	ra,0x7
    8000ac42:	a06080e7          	jalr	-1530(ra) # 80011644 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h82f80b86300e876eE>
    8000ac46:	ecaa                	sd	a0,88(sp)
    8000ac48:	a009                	j	8000ac4a <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h255496547b3a0f33E+0x7c>
            let end = if mem::size_of::<T>() == 0 {
    8000ac4a:	a009                	j	8000ac4c <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h255496547b3a0f33E+0x7e>
            };

            Self { ptr: NonNull::new_unchecked(ptr as *mut T), end, _marker: PhantomData }
    8000ac4c:	6506                	ld	a0,64(sp)
    8000ac4e:	00004097          	auipc	ra,0x4
    8000ac52:	5fa080e7          	jalr	1530(ra) # 8000f248 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17he6e2e3c661183ac0E>
    8000ac56:	e42a                	sd	a0,8(sp)
    8000ac58:	a009                	j	8000ac5a <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h255496547b3a0f33E+0x8c>
    8000ac5a:	6522                	ld	a0,8(sp)
    8000ac5c:	65e6                	ld	a1,88(sp)
    8000ac5e:	e4aa                	sd	a0,72(sp)
    8000ac60:	e8ae                	sd	a1,80(sp)
        }
    }
    8000ac62:	70e6                	ld	ra,120(sp)
    8000ac64:	6109                	addi	sp,sp,128
    8000ac66:	8082                	ret

Disassembly of section .text._ZN4core5slice4iter13Iter$LT$T$GT$3new17h7dcd9c98bf37806bE:

000000008000ac68 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h7dcd9c98bf37806bE>:
    pub(super) fn new(slice: &'a [T]) -> Self {
    8000ac68:	7159                	addi	sp,sp,-112
    8000ac6a:	f486                	sd	ra,104(sp)
    8000ac6c:	f02e                	sd	a1,32(sp)
    8000ac6e:	f42a                	sd	a0,40(sp)
    8000ac70:	e8aa                	sd	a0,80(sp)
    8000ac72:	ecae                	sd	a1,88(sp)
        let ptr = slice.as_ptr();
    8000ac74:	00015097          	auipc	ra,0x15
    8000ac78:	842080e7          	jalr	-1982(ra) # 8001f4b6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hf7620495824cfb20E>
    8000ac7c:	85aa                	mv	a1,a0
    8000ac7e:	f82e                	sd	a1,48(sp)
    8000ac80:	f0aa                	sd	a0,96(sp)
    8000ac82:	a009                	j	8000ac84 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h7dcd9c98bf37806bE+0x1c>
            assume(!ptr.is_null());
    8000ac84:	7542                	ld	a0,48(sp)
    8000ac86:	00015097          	auipc	ra,0x15
    8000ac8a:	a50080e7          	jalr	-1456(ra) # 8001f6d6 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h309eb733b6984dd5E>
    8000ac8e:	a009                	j	8000ac90 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h7dcd9c98bf37806bE+0x28>
    8000ac90:	a009                	j	8000ac92 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h7dcd9c98bf37806bE+0x2a>
            let end = if mem::size_of::<T>() == 0 {
    8000ac92:	a009                	j	8000ac94 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h7dcd9c98bf37806bE+0x2c>
    8000ac94:	4505                	li	a0,1
    8000ac96:	e911                	bnez	a0,8000acaa <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h7dcd9c98bf37806bE+0x42>
    8000ac98:	a009                	j	8000ac9a <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h7dcd9c98bf37806bE+0x32>
                (ptr as *const u8).wrapping_add(slice.len()) as *const T
    8000ac9a:	7582                	ld	a1,32(sp)
    8000ac9c:	7522                	ld	a0,40(sp)
    8000ac9e:	00014097          	auipc	ra,0x14
    8000aca2:	7bc080e7          	jalr	1980(ra) # 8001f45a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hb06ce83b043493f3E>
    8000aca6:	ec2a                	sd	a0,24(sp)
    8000aca8:	a809                	j	8000acba <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h7dcd9c98bf37806bE+0x52>
                ptr.add(slice.len())
    8000acaa:	7582                	ld	a1,32(sp)
    8000acac:	7522                	ld	a0,40(sp)
    8000acae:	00014097          	auipc	ra,0x14
    8000acb2:	7ac080e7          	jalr	1964(ra) # 8001f45a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hb06ce83b043493f3E>
    8000acb6:	e82a                	sd	a0,16(sp)
    8000acb8:	a821                	j	8000acd0 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h7dcd9c98bf37806bE+0x68>
                (ptr as *const u8).wrapping_add(slice.len()) as *const T
    8000acba:	65e2                	ld	a1,24(sp)
    8000acbc:	7542                	ld	a0,48(sp)
    8000acbe:	ffffa097          	auipc	ra,0xffffa
    8000acc2:	b4c080e7          	jalr	-1204(ra) # 8000480a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h10470fd1e83789bbE>
    8000acc6:	e42a                	sd	a0,8(sp)
    8000acc8:	a009                	j	8000acca <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h7dcd9c98bf37806bE+0x62>
    8000acca:	6522                	ld	a0,8(sp)
    8000accc:	e4aa                	sd	a0,72(sp)
            let end = if mem::size_of::<T>() == 0 {
    8000acce:	a811                	j	8000ace2 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h7dcd9c98bf37806bE+0x7a>
                ptr.add(slice.len())
    8000acd0:	65c2                	ld	a1,16(sp)
    8000acd2:	7542                	ld	a0,48(sp)
    8000acd4:	00015097          	auipc	ra,0x15
    8000acd8:	9a0080e7          	jalr	-1632(ra) # 8001f674 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h3ef2f165a29b2365E>
    8000acdc:	e4aa                	sd	a0,72(sp)
    8000acde:	a009                	j	8000ace0 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h7dcd9c98bf37806bE+0x78>
            let end = if mem::size_of::<T>() == 0 {
    8000ace0:	a009                	j	8000ace2 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h7dcd9c98bf37806bE+0x7a>
            Self { ptr: NonNull::new_unchecked(ptr as *mut T), end, _marker: PhantomData }
    8000ace2:	7542                	ld	a0,48(sp)
    8000ace4:	00004097          	auipc	ra,0x4
    8000ace8:	53c080e7          	jalr	1340(ra) # 8000f220 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h5ed8fa4a56812246E>
    8000acec:	e02a                	sd	a0,0(sp)
    8000acee:	a009                	j	8000acf0 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h7dcd9c98bf37806bE+0x88>
    8000acf0:	6502                	ld	a0,0(sp)
    8000acf2:	65a6                	ld	a1,72(sp)
    8000acf4:	fc2a                	sd	a0,56(sp)
    8000acf6:	e0ae                	sd	a1,64(sp)
    }
    8000acf8:	70a6                	ld	ra,104(sp)
    8000acfa:	6165                	addi	sp,sp,112
    8000acfc:	8082                	ret

Disassembly of section .text._ZN4core5slice4iter13Iter$LT$T$GT$8as_slice17hddf2d5a72581ec8fE:

000000008000acfe <_ZN4core5slice4iter13Iter$LT$T$GT$8as_slice17hddf2d5a72581ec8fE>:
    /// iter.next();
    /// // Now `as_slice` returns "[2, 3]":
    /// println!("{:?}", iter.as_slice());
    /// ```
    #[stable(feature = "iter_to_slice", since = "1.4.0")]
    pub fn as_slice(&self) -> &'a [T] {
    8000acfe:	7119                	addi	sp,sp,-128
    8000ad00:	fc86                	sd	ra,120(sp)
    8000ad02:	e42a                	sd	a0,8(sp)
    8000ad04:	fc2a                	sd	a0,56(sp)
    8000ad06:	e4aa                	sd	a0,72(sp)
            #[inline(always)]
            fn make_slice(&self) -> &'a [T] {
                // SAFETY: the iterator was created from a slice with pointer
                // `self.ptr` and length `len!(self)`. This guarantees that all
                // the prerequisites for `from_raw_parts` are fulfilled.
                unsafe { from_raw_parts(self.ptr.as_ptr(), len!(self)) }
    8000ad08:	6108                	ld	a0,0(a0)
    8000ad0a:	00004097          	auipc	ra,0x4
    8000ad0e:	72e080e7          	jalr	1838(ra) # 8000f438 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h729713db2b300d39E>
    8000ad12:	85aa                	mv	a1,a0
    8000ad14:	6522                	ld	a0,8(sp)
    8000ad16:	f02e                	sd	a1,32(sp)
    8000ad18:	6108                	ld	a0,0(a0)
    8000ad1a:	e82a                	sd	a0,16(sp)
    8000ad1c:	e8aa                	sd	a0,80(sp)
    8000ad1e:	00004097          	auipc	ra,0x4
    8000ad22:	71a080e7          	jalr	1818(ra) # 8000f438 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h729713db2b300d39E>
    8000ad26:	65a2                	ld	a1,8(sp)
    8000ad28:	862a                	mv	a2,a0
    8000ad2a:	6542                	ld	a0,16(sp)
    8000ad2c:	f8b2                	sd	a2,112(sp)
    8000ad2e:	4605                	li	a2,1
    8000ad30:	ecb2                	sd	a2,88(sp)
    8000ad32:	658c                	ld	a1,8(a1)
    8000ad34:	ec2e                	sd	a1,24(sp)
    8000ad36:	00004097          	auipc	ra,0x4
    8000ad3a:	702080e7          	jalr	1794(ra) # 8000f438 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h729713db2b300d39E>
    8000ad3e:	65e2                	ld	a1,24(sp)
    8000ad40:	862a                	mv	a2,a0
    8000ad42:	7502                	ld	a0,32(sp)
    8000ad44:	8d91                	sub	a1,a1,a2
    8000ad46:	f0ae                	sd	a1,96(sp)
    8000ad48:	f4ae                	sd	a1,104(sp)
    8000ad4a:	e0ae                	sd	a1,64(sp)
    8000ad4c:	ffffa097          	auipc	ra,0xffffa
    8000ad50:	64c080e7          	jalr	1612(ra) # 80005398 <_ZN4core5slice3raw14from_raw_parts17hf1accf0e45b69f71E>
        self.make_slice()
    8000ad54:	f42a                	sd	a0,40(sp)
    8000ad56:	f82e                	sd	a1,48(sp)
    8000ad58:	a009                	j	8000ad5a <_ZN4core5slice4iter13Iter$LT$T$GT$8as_slice17hddf2d5a72581ec8fE+0x5c>
    }
    8000ad5a:	75c2                	ld	a1,48(sp)
    8000ad5c:	7522                	ld	a0,40(sp)
    8000ad5e:	70e6                	ld	ra,120(sp)
    8000ad60:	6109                	addi	sp,sp,128
    8000ad62:	8082                	ret

Disassembly of section .text._ZN4core5slice4iter16IterMut$LT$T$GT$3new17h018b863ac427b524E:

000000008000ad64 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h018b863ac427b524E>:
#[stable(feature = "rust1", since = "1.0.0")]
unsafe impl<T: Send> Send for IterMut<'_, T> {}

impl<'a, T> IterMut<'a, T> {
    #[inline]
    pub(super) fn new(slice: &'a mut [T]) -> Self {
    8000ad64:	7119                	addi	sp,sp,-128
    8000ad66:	fc86                	sd	ra,120(sp)
    8000ad68:	f82e                	sd	a1,48(sp)
    8000ad6a:	fc2a                	sd	a0,56(sp)
    8000ad6c:	f0aa                	sd	a0,96(sp)
    8000ad6e:	f4ae                	sd	a1,104(sp)
        let ptr = slice.as_mut_ptr();
    8000ad70:	ffffb097          	auipc	ra,0xffffb
    8000ad74:	8e6080e7          	jalr	-1818(ra) # 80005656 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h37e95d8a2d6ca634E>
    8000ad78:	85aa                	mv	a1,a0
    8000ad7a:	e0ae                	sd	a1,64(sp)
    8000ad7c:	f8aa                	sd	a0,112(sp)
    8000ad7e:	a009                	j	8000ad80 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h018b863ac427b524E+0x1c>
        // the length, to also allows for the fast `ptr == end` check.
        //
        // See the `next_unchecked!` and `is_empty!` macros as well as the
        // `post_inc_start` method for more informations.
        unsafe {
            assume(!ptr.is_null());
    8000ad80:	6506                	ld	a0,64(sp)
    8000ad82:	ffffb097          	auipc	ra,0xffffb
    8000ad86:	8b2080e7          	jalr	-1870(ra) # 80005634 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hee9a0b1c2395b573E>
    8000ad8a:	a009                	j	8000ad8c <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h018b863ac427b524E+0x28>
    8000ad8c:	a009                	j	8000ad8e <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h018b863ac427b524E+0x2a>

            let end = if mem::size_of::<T>() == 0 {
    8000ad8e:	a009                	j	8000ad90 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h018b863ac427b524E+0x2c>
    8000ad90:	4505                	li	a0,1
    8000ad92:	ed01                	bnez	a0,8000adaa <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h018b863ac427b524E+0x46>
    8000ad94:	a009                	j	8000ad96 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h018b863ac427b524E+0x32>
                (ptr as *mut u8).wrapping_add(slice.len()) as *mut T
    8000ad96:	75c2                	ld	a1,48(sp)
    8000ad98:	7562                	ld	a0,56(sp)
    8000ad9a:	6606                	ld	a2,64(sp)
    8000ad9c:	f032                	sd	a2,32(sp)
    8000ad9e:	ffffb097          	auipc	ra,0xffffb
    8000ada2:	8c2080e7          	jalr	-1854(ra) # 80005660 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h0b5a743241a7cbfaE>
    8000ada6:	f42a                	sd	a0,40(sp)
    8000ada8:	a809                	j	8000adba <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h018b863ac427b524E+0x56>
            } else {
                ptr.add(slice.len())
    8000adaa:	75c2                	ld	a1,48(sp)
    8000adac:	7562                	ld	a0,56(sp)
    8000adae:	ffffb097          	auipc	ra,0xffffb
    8000adb2:	8b2080e7          	jalr	-1870(ra) # 80005660 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h0b5a743241a7cbfaE>
    8000adb6:	ec2a                	sd	a0,24(sp)
    8000adb8:	a821                	j	8000add0 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h018b863ac427b524E+0x6c>
                (ptr as *mut u8).wrapping_add(slice.len()) as *mut T
    8000adba:	75a2                	ld	a1,40(sp)
    8000adbc:	7502                	ld	a0,32(sp)
    8000adbe:	ffffe097          	auipc	ra,0xffffe
    8000adc2:	b06080e7          	jalr	-1274(ra) # 800088c4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$12wrapping_add17hef81cac2ef53321bE>
    8000adc6:	e82a                	sd	a0,16(sp)
    8000adc8:	a009                	j	8000adca <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h018b863ac427b524E+0x66>
    8000adca:	6542                	ld	a0,16(sp)
    8000adcc:	ecaa                	sd	a0,88(sp)
            let end = if mem::size_of::<T>() == 0 {
    8000adce:	a811                	j	8000ade2 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h018b863ac427b524E+0x7e>
                ptr.add(slice.len())
    8000add0:	65e2                	ld	a1,24(sp)
    8000add2:	6506                	ld	a0,64(sp)
    8000add4:	ffffa097          	auipc	ra,0xffffa
    8000add8:	7f6080e7          	jalr	2038(ra) # 800055ca <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17hffa57d7c8ffaba34E>
    8000addc:	ecaa                	sd	a0,88(sp)
    8000adde:	a009                	j	8000ade0 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h018b863ac427b524E+0x7c>
            let end = if mem::size_of::<T>() == 0 {
    8000ade0:	a009                	j	8000ade2 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h018b863ac427b524E+0x7e>
            };

            Self { ptr: NonNull::new_unchecked(ptr), end, _marker: PhantomData }
    8000ade2:	6506                	ld	a0,64(sp)
    8000ade4:	00004097          	auipc	ra,0x4
    8000ade8:	45a080e7          	jalr	1114(ra) # 8000f23e <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17hd62713267129dcbeE>
    8000adec:	e42a                	sd	a0,8(sp)
    8000adee:	a009                	j	8000adf0 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h018b863ac427b524E+0x8c>
    8000adf0:	6522                	ld	a0,8(sp)
    8000adf2:	65e6                	ld	a1,88(sp)
    8000adf4:	e4aa                	sd	a0,72(sp)
    8000adf6:	e8ae                	sd	a1,80(sp)
        }
    }
    8000adf8:	70e6                	ld	ra,120(sp)
    8000adfa:	6109                	addi	sp,sp,128
    8000adfc:	8082                	ret

Disassembly of section .text._ZN4core5slice4iter16IterMut$LT$T$GT$3new17h41c69a0e1f2809d6E:

000000008000adfe <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h41c69a0e1f2809d6E>:
    pub(super) fn new(slice: &'a mut [T]) -> Self {
    8000adfe:	7119                	addi	sp,sp,-128
    8000ae00:	fc86                	sd	ra,120(sp)
    8000ae02:	f82e                	sd	a1,48(sp)
    8000ae04:	fc2a                	sd	a0,56(sp)
    8000ae06:	f0aa                	sd	a0,96(sp)
    8000ae08:	f4ae                	sd	a1,104(sp)
        let ptr = slice.as_mut_ptr();
    8000ae0a:	00012097          	auipc	ra,0x12
    8000ae0e:	7fc080e7          	jalr	2044(ra) # 8001d606 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb34fa5c829e1d9f2E>
    8000ae12:	85aa                	mv	a1,a0
    8000ae14:	e0ae                	sd	a1,64(sp)
    8000ae16:	f8aa                	sd	a0,112(sp)
    8000ae18:	a009                	j	8000ae1a <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h41c69a0e1f2809d6E+0x1c>
            assume(!ptr.is_null());
    8000ae1a:	6506                	ld	a0,64(sp)
    8000ae1c:	00012097          	auipc	ra,0x12
    8000ae20:	7c8080e7          	jalr	1992(ra) # 8001d5e4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h1d4bdf7317c60b96E>
    8000ae24:	a009                	j	8000ae26 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h41c69a0e1f2809d6E+0x28>
    8000ae26:	a009                	j	8000ae28 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h41c69a0e1f2809d6E+0x2a>
            let end = if mem::size_of::<T>() == 0 {
    8000ae28:	a009                	j	8000ae2a <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h41c69a0e1f2809d6E+0x2c>
    8000ae2a:	4505                	li	a0,1
    8000ae2c:	ed01                	bnez	a0,8000ae44 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h41c69a0e1f2809d6E+0x46>
    8000ae2e:	a009                	j	8000ae30 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h41c69a0e1f2809d6E+0x32>
                (ptr as *mut u8).wrapping_add(slice.len()) as *mut T
    8000ae30:	75c2                	ld	a1,48(sp)
    8000ae32:	7562                	ld	a0,56(sp)
    8000ae34:	6606                	ld	a2,64(sp)
    8000ae36:	f032                	sd	a2,32(sp)
    8000ae38:	00012097          	auipc	ra,0x12
    8000ae3c:	7d8080e7          	jalr	2008(ra) # 8001d610 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h5af32af5d380fccdE>
    8000ae40:	f42a                	sd	a0,40(sp)
    8000ae42:	a809                	j	8000ae54 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h41c69a0e1f2809d6E+0x56>
                ptr.add(slice.len())
    8000ae44:	75c2                	ld	a1,48(sp)
    8000ae46:	7562                	ld	a0,56(sp)
    8000ae48:	00012097          	auipc	ra,0x12
    8000ae4c:	7c8080e7          	jalr	1992(ra) # 8001d610 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h5af32af5d380fccdE>
    8000ae50:	ec2a                	sd	a0,24(sp)
    8000ae52:	a821                	j	8000ae6a <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h41c69a0e1f2809d6E+0x6c>
                (ptr as *mut u8).wrapping_add(slice.len()) as *mut T
    8000ae54:	75a2                	ld	a1,40(sp)
    8000ae56:	7502                	ld	a0,32(sp)
    8000ae58:	ffffe097          	auipc	ra,0xffffe
    8000ae5c:	a6c080e7          	jalr	-1428(ra) # 800088c4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$12wrapping_add17hef81cac2ef53321bE>
    8000ae60:	e82a                	sd	a0,16(sp)
    8000ae62:	a009                	j	8000ae64 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h41c69a0e1f2809d6E+0x66>
    8000ae64:	6542                	ld	a0,16(sp)
    8000ae66:	ecaa                	sd	a0,88(sp)
            let end = if mem::size_of::<T>() == 0 {
    8000ae68:	a811                	j	8000ae7c <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h41c69a0e1f2809d6E+0x7e>
                ptr.add(slice.len())
    8000ae6a:	65e2                	ld	a1,24(sp)
    8000ae6c:	6506                	ld	a0,64(sp)
    8000ae6e:	00012097          	auipc	ra,0x12
    8000ae72:	73e080e7          	jalr	1854(ra) # 8001d5ac <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h3a39754d1b9c54a7E>
    8000ae76:	ecaa                	sd	a0,88(sp)
    8000ae78:	a009                	j	8000ae7a <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h41c69a0e1f2809d6E+0x7c>
            let end = if mem::size_of::<T>() == 0 {
    8000ae7a:	a009                	j	8000ae7c <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h41c69a0e1f2809d6E+0x7e>
            Self { ptr: NonNull::new_unchecked(ptr), end, _marker: PhantomData }
    8000ae7c:	6506                	ld	a0,64(sp)
    8000ae7e:	00004097          	auipc	ra,0x4
    8000ae82:	3de080e7          	jalr	990(ra) # 8000f25c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17hf41e3912db402547E>
    8000ae86:	e42a                	sd	a0,8(sp)
    8000ae88:	a009                	j	8000ae8a <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h41c69a0e1f2809d6E+0x8c>
    8000ae8a:	6522                	ld	a0,8(sp)
    8000ae8c:	65e6                	ld	a1,88(sp)
    8000ae8e:	e4aa                	sd	a0,72(sp)
    8000ae90:	e8ae                	sd	a1,80(sp)
    }
    8000ae92:	70e6                	ld	ra,120(sp)
    8000ae94:	6109                	addi	sp,sp,128
    8000ae96:	8082                	ret

Disassembly of section .text._ZN4core5slice4iter16IterMut$LT$T$GT$3new17h8130085cf5731c78E:

000000008000ae98 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h8130085cf5731c78E>:
    pub(super) fn new(slice: &'a mut [T]) -> Self {
    8000ae98:	7159                	addi	sp,sp,-112
    8000ae9a:	f486                	sd	ra,104(sp)
    8000ae9c:	f02e                	sd	a1,32(sp)
    8000ae9e:	f42a                	sd	a0,40(sp)
    8000aea0:	e8aa                	sd	a0,80(sp)
    8000aea2:	ecae                	sd	a1,88(sp)
        let ptr = slice.as_mut_ptr();
    8000aea4:	00014097          	auipc	ra,0x14
    8000aea8:	57a080e7          	jalr	1402(ra) # 8001f41e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h752c0d8417c49952E>
    8000aeac:	85aa                	mv	a1,a0
    8000aeae:	f82e                	sd	a1,48(sp)
    8000aeb0:	f0aa                	sd	a0,96(sp)
    8000aeb2:	a009                	j	8000aeb4 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h8130085cf5731c78E+0x1c>
            assume(!ptr.is_null());
    8000aeb4:	7542                	ld	a0,48(sp)
    8000aeb6:	ffffe097          	auipc	ra,0xffffe
    8000aeba:	ab8080e7          	jalr	-1352(ra) # 8000896e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hc49b20e03dc897f6E>
    8000aebe:	a009                	j	8000aec0 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h8130085cf5731c78E+0x28>
    8000aec0:	a009                	j	8000aec2 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h8130085cf5731c78E+0x2a>
            let end = if mem::size_of::<T>() == 0 {
    8000aec2:	a009                	j	8000aec4 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h8130085cf5731c78E+0x2c>
    8000aec4:	4505                	li	a0,1
    8000aec6:	e911                	bnez	a0,8000aeda <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h8130085cf5731c78E+0x42>
    8000aec8:	a009                	j	8000aeca <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h8130085cf5731c78E+0x32>
                (ptr as *mut u8).wrapping_add(slice.len()) as *mut T
    8000aeca:	7582                	ld	a1,32(sp)
    8000aecc:	7522                	ld	a0,40(sp)
    8000aece:	00014097          	auipc	ra,0x14
    8000aed2:	564080e7          	jalr	1380(ra) # 8001f432 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h040db97216f8ec10E>
    8000aed6:	ec2a                	sd	a0,24(sp)
    8000aed8:	a809                	j	8000aeea <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h8130085cf5731c78E+0x52>
                ptr.add(slice.len())
    8000aeda:	7582                	ld	a1,32(sp)
    8000aedc:	7522                	ld	a0,40(sp)
    8000aede:	00014097          	auipc	ra,0x14
    8000aee2:	554080e7          	jalr	1364(ra) # 8001f432 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h040db97216f8ec10E>
    8000aee6:	e82a                	sd	a0,16(sp)
    8000aee8:	a821                	j	8000af00 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h8130085cf5731c78E+0x68>
                (ptr as *mut u8).wrapping_add(slice.len()) as *mut T
    8000aeea:	65e2                	ld	a1,24(sp)
    8000aeec:	7542                	ld	a0,48(sp)
    8000aeee:	ffffe097          	auipc	ra,0xffffe
    8000aef2:	9d6080e7          	jalr	-1578(ra) # 800088c4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$12wrapping_add17hef81cac2ef53321bE>
    8000aef6:	e42a                	sd	a0,8(sp)
    8000aef8:	a009                	j	8000aefa <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h8130085cf5731c78E+0x62>
    8000aefa:	6522                	ld	a0,8(sp)
    8000aefc:	e4aa                	sd	a0,72(sp)
            let end = if mem::size_of::<T>() == 0 {
    8000aefe:	a811                	j	8000af12 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h8130085cf5731c78E+0x7a>
                ptr.add(slice.len())
    8000af00:	65c2                	ld	a1,16(sp)
    8000af02:	7542                	ld	a0,48(sp)
    8000af04:	ffffe097          	auipc	ra,0xffffe
    8000af08:	a24080e7          	jalr	-1500(ra) # 80008928 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1fdb3e6f0b8b1c65E>
    8000af0c:	e4aa                	sd	a0,72(sp)
    8000af0e:	a009                	j	8000af10 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h8130085cf5731c78E+0x78>
            let end = if mem::size_of::<T>() == 0 {
    8000af10:	a009                	j	8000af12 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h8130085cf5731c78E+0x7a>
            Self { ptr: NonNull::new_unchecked(ptr), end, _marker: PhantomData }
    8000af12:	7542                	ld	a0,48(sp)
    8000af14:	00004097          	auipc	ra,0x4
    8000af18:	33e080e7          	jalr	830(ra) # 8000f252 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17he8eb4f7b6f10823eE>
    8000af1c:	e02a                	sd	a0,0(sp)
    8000af1e:	a009                	j	8000af20 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h8130085cf5731c78E+0x88>
    8000af20:	6502                	ld	a0,0(sp)
    8000af22:	65a6                	ld	a1,72(sp)
    8000af24:	fc2a                	sd	a0,56(sp)
    8000af26:	e0ae                	sd	a1,64(sp)
    }
    8000af28:	70a6                	ld	ra,104(sp)
    8000af2a:	6165                	addi	sp,sp,112
    8000af2c:	8082                	ret

Disassembly of section .text._ZN4core5slice4iter16IterMut$LT$T$GT$3new17hbe8b57feddcb3b2cE:

000000008000af2e <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17hbe8b57feddcb3b2cE>:
    pub(super) fn new(slice: &'a mut [T]) -> Self {
    8000af2e:	7119                	addi	sp,sp,-128
    8000af30:	fc86                	sd	ra,120(sp)
    8000af32:	f82e                	sd	a1,48(sp)
    8000af34:	fc2a                	sd	a0,56(sp)
    8000af36:	f0aa                	sd	a0,96(sp)
    8000af38:	f4ae                	sd	a1,104(sp)
        let ptr = slice.as_mut_ptr();
    8000af3a:	00006097          	auipc	ra,0x6
    8000af3e:	764080e7          	jalr	1892(ra) # 8001169e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb07c6377ef535791E>
    8000af42:	85aa                	mv	a1,a0
    8000af44:	e0ae                	sd	a1,64(sp)
    8000af46:	f8aa                	sd	a0,112(sp)
    8000af48:	a009                	j	8000af4a <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17hbe8b57feddcb3b2cE+0x1c>
            assume(!ptr.is_null());
    8000af4a:	6506                	ld	a0,64(sp)
    8000af4c:	00006097          	auipc	ra,0x6
    8000af50:	6d6080e7          	jalr	1750(ra) # 80011622 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17he6d08a4a98c1735bE>
    8000af54:	a009                	j	8000af56 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17hbe8b57feddcb3b2cE+0x28>
    8000af56:	a009                	j	8000af58 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17hbe8b57feddcb3b2cE+0x2a>
            let end = if mem::size_of::<T>() == 0 {
    8000af58:	a009                	j	8000af5a <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17hbe8b57feddcb3b2cE+0x2c>
    8000af5a:	4505                	li	a0,1
    8000af5c:	ed01                	bnez	a0,8000af74 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17hbe8b57feddcb3b2cE+0x46>
    8000af5e:	a009                	j	8000af60 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17hbe8b57feddcb3b2cE+0x32>
                (ptr as *mut u8).wrapping_add(slice.len()) as *mut T
    8000af60:	75c2                	ld	a1,48(sp)
    8000af62:	7562                	ld	a0,56(sp)
    8000af64:	6606                	ld	a2,64(sp)
    8000af66:	f032                	sd	a2,32(sp)
    8000af68:	00006097          	auipc	ra,0x6
    8000af6c:	740080e7          	jalr	1856(ra) # 800116a8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf08bc165152fefe5E>
    8000af70:	f42a                	sd	a0,40(sp)
    8000af72:	a809                	j	8000af84 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17hbe8b57feddcb3b2cE+0x56>
                ptr.add(slice.len())
    8000af74:	75c2                	ld	a1,48(sp)
    8000af76:	7562                	ld	a0,56(sp)
    8000af78:	00006097          	auipc	ra,0x6
    8000af7c:	730080e7          	jalr	1840(ra) # 800116a8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf08bc165152fefe5E>
    8000af80:	ec2a                	sd	a0,24(sp)
    8000af82:	a821                	j	8000af9a <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17hbe8b57feddcb3b2cE+0x6c>
                (ptr as *mut u8).wrapping_add(slice.len()) as *mut T
    8000af84:	75a2                	ld	a1,40(sp)
    8000af86:	7502                	ld	a0,32(sp)
    8000af88:	ffffe097          	auipc	ra,0xffffe
    8000af8c:	93c080e7          	jalr	-1732(ra) # 800088c4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$12wrapping_add17hef81cac2ef53321bE>
    8000af90:	e82a                	sd	a0,16(sp)
    8000af92:	a009                	j	8000af94 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17hbe8b57feddcb3b2cE+0x66>
    8000af94:	6542                	ld	a0,16(sp)
    8000af96:	ecaa                	sd	a0,88(sp)
            let end = if mem::size_of::<T>() == 0 {
    8000af98:	a811                	j	8000afac <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17hbe8b57feddcb3b2cE+0x7e>
                ptr.add(slice.len())
    8000af9a:	65e2                	ld	a1,24(sp)
    8000af9c:	6506                	ld	a0,64(sp)
    8000af9e:	00006097          	auipc	ra,0x6
    8000afa2:	64c080e7          	jalr	1612(ra) # 800115ea <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h38f66f125a87c1b1E>
    8000afa6:	ecaa                	sd	a0,88(sp)
    8000afa8:	a009                	j	8000afaa <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17hbe8b57feddcb3b2cE+0x7c>
            let end = if mem::size_of::<T>() == 0 {
    8000afaa:	a009                	j	8000afac <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17hbe8b57feddcb3b2cE+0x7e>
            Self { ptr: NonNull::new_unchecked(ptr), end, _marker: PhantomData }
    8000afac:	6506                	ld	a0,64(sp)
    8000afae:	00004097          	auipc	ra,0x4
    8000afb2:	29a080e7          	jalr	666(ra) # 8000f248 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17he6e2e3c661183ac0E>
    8000afb6:	e42a                	sd	a0,8(sp)
    8000afb8:	a009                	j	8000afba <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17hbe8b57feddcb3b2cE+0x8c>
    8000afba:	6522                	ld	a0,8(sp)
    8000afbc:	65e6                	ld	a1,88(sp)
    8000afbe:	e4aa                	sd	a0,72(sp)
    8000afc0:	e8ae                	sd	a1,80(sp)
    }
    8000afc2:	70e6                	ld	ra,120(sp)
    8000afc4:	6109                	addi	sp,sp,128
    8000afc6:	8082                	ret

Disassembly of section .text._ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h4af9d22df112c9d1E:

000000008000afc8 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h4af9d22df112c9d1E>:
#[stable(feature = "rust1", since = "1.0.0")]
impl<I: Iterator> IntoIterator for I {
    type Item = I::Item;
    type IntoIter = I;

    fn into_iter(self) -> I {
    8000afc8:	1141                	addi	sp,sp,-16
    8000afca:	e02a                	sd	a0,0(sp)
    8000afcc:	e42e                	sd	a1,8(sp)
        self
    }
    8000afce:	0141                	addi	sp,sp,16
    8000afd0:	8082                	ret

Disassembly of section .text._ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17ha1082b6c43007424E:

000000008000afd2 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17ha1082b6c43007424E>:
    fn into_iter(self) -> I {
    8000afd2:	1141                	addi	sp,sp,-16
    8000afd4:	e02a                	sd	a0,0(sp)
    8000afd6:	e42e                	sd	a1,8(sp)
    }
    8000afd8:	0141                	addi	sp,sp,16
    8000afda:	8082                	ret

Disassembly of section .text._ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17had1f1a546667c559E:

000000008000afdc <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17had1f1a546667c559E>:
    fn into_iter(self) -> I {
    8000afdc:	1141                	addi	sp,sp,-16
    8000afde:	e02a                	sd	a0,0(sp)
    8000afe0:	e42e                	sd	a1,8(sp)
    }
    8000afe2:	0141                	addi	sp,sp,16
    8000afe4:	8082                	ret

Disassembly of section .text._ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha83d9fbdc7b514feE:

000000008000afe6 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha83d9fbdc7b514feE>:
        #[stable(feature = "rust1", since = "1.0.0")]
        impl<'a, T> Iterator for $name<'a, T> {
            type Item = $elem;

            #[inline]
            fn next(&mut self) -> Option<$elem> {
    8000afe6:	7159                	addi	sp,sp,-112
    8000afe8:	f486                	sd	ra,104(sp)
    8000afea:	f42a                	sd	a0,40(sp)
    8000afec:	e0aa                	sd	a0,64(sp)
                // SAFETY: `assume` calls are safe since a slice's start pointer
                // must be non-null, and slices over non-ZSTs must also have a
                // non-null end pointer. The call to `next_unchecked!` is safe
                // since we check if the iterator is empty first.
                unsafe {
                    assume(!self.ptr.as_ptr().is_null());
    8000afee:	6108                	ld	a0,0(a0)
    8000aff0:	00004097          	auipc	ra,0x4
    8000aff4:	450080e7          	jalr	1104(ra) # 8000f440 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h7c6e4b893f33870bE>
    8000aff8:	f82a                	sd	a0,48(sp)
    8000affa:	a009                	j	8000affc <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha83d9fbdc7b514feE+0x16>
    8000affc:	7542                	ld	a0,48(sp)
    8000affe:	00006097          	auipc	ra,0x6
    8000b002:	624080e7          	jalr	1572(ra) # 80011622 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17he6d08a4a98c1735bE>
    8000b006:	a009                	j	8000b008 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha83d9fbdc7b514feE+0x22>
    8000b008:	a009                	j	8000b00a <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha83d9fbdc7b514feE+0x24>
                    if mem::size_of::<T>() != 0 {
    8000b00a:	a009                	j	8000b00c <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha83d9fbdc7b514feE+0x26>
    8000b00c:	4501                	li	a0,0
    8000b00e:	e909                	bnez	a0,8000b020 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha83d9fbdc7b514feE+0x3a>
    8000b010:	a009                	j	8000b012 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha83d9fbdc7b514feE+0x2c>
                        assume(!self.end.is_null());
    8000b012:	7522                	ld	a0,40(sp)
    8000b014:	6508                	ld	a0,8(a0)
    8000b016:	00006097          	auipc	ra,0x6
    8000b01a:	666080e7          	jalr	1638(ra) # 8001167c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17ha3fd0a02496fedc6E>
    8000b01e:	a011                	j	8000b022 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha83d9fbdc7b514feE+0x3c>
                    if mem::size_of::<T>() != 0 {
    8000b020:	a019                	j	8000b026 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha83d9fbdc7b514feE+0x40>
                        assume(!self.end.is_null());
    8000b022:	a009                	j	8000b024 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha83d9fbdc7b514feE+0x3e>
                    if mem::size_of::<T>() != 0 {
    8000b024:	a009                	j	8000b026 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha83d9fbdc7b514feE+0x40>
                    }
                    if is_empty!(self) {
    8000b026:	7522                	ld	a0,40(sp)
    8000b028:	6108                	ld	a0,0(a0)
    8000b02a:	00004097          	auipc	ra,0x4
    8000b02e:	416080e7          	jalr	1046(ra) # 8000f440 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h7c6e4b893f33870bE>
    8000b032:	f02a                	sd	a0,32(sp)
    8000b034:	a009                	j	8000b036 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha83d9fbdc7b514feE+0x50>
    8000b036:	7502                	ld	a0,32(sp)
    8000b038:	75a2                	ld	a1,40(sp)
    8000b03a:	658c                	ld	a1,8(a1)
    8000b03c:	00b51663          	bne	a0,a1,8000b048 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha83d9fbdc7b514feE+0x62>
    8000b040:	a009                	j	8000b042 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha83d9fbdc7b514feE+0x5c>
    8000b042:	4501                	li	a0,0
                        None
    8000b044:	fc2a                	sd	a0,56(sp)
                    if is_empty!(self) {
    8000b046:	a0b9                	j	8000b094 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha83d9fbdc7b514feE+0xae>
    8000b048:	7522                	ld	a0,40(sp)
    8000b04a:	e8aa                	sd	a0,80(sp)
    8000b04c:	4585                	li	a1,1
    8000b04e:	e42e                	sd	a1,8(sp)
    8000b050:	ecae                	sd	a1,88(sp)
                    let old = self.ptr.as_ptr();
    8000b052:	6108                	ld	a0,0(a0)
    8000b054:	00004097          	auipc	ra,0x4
    8000b058:	3ec080e7          	jalr	1004(ra) # 8000f440 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h7c6e4b893f33870bE>
    8000b05c:	85aa                	mv	a1,a0
    8000b05e:	7522                	ld	a0,40(sp)
    8000b060:	e82e                	sd	a1,16(sp)
    8000b062:	f0ae                	sd	a1,96(sp)
                    self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
    8000b064:	6108                	ld	a0,0(a0)
    8000b066:	00004097          	auipc	ra,0x4
    8000b06a:	3da080e7          	jalr	986(ra) # 8000f440 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h7c6e4b893f33870bE>
    8000b06e:	65a2                	ld	a1,8(sp)
    8000b070:	00006097          	auipc	ra,0x6
    8000b074:	596080e7          	jalr	1430(ra) # 80011606 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hc564f45fb449f47eE>
    8000b078:	00004097          	auipc	ra,0x4
    8000b07c:	1d0080e7          	jalr	464(ra) # 8000f248 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17he6e2e3c661183ac0E>
    8000b080:	7622                	ld	a2,40(sp)
    8000b082:	85aa                	mv	a1,a0
    8000b084:	6542                	ld	a0,16(sp)
    8000b086:	e20c                	sd	a1,0(a2)
                    old
    8000b088:	e4aa                	sd	a0,72(sp)
                    } else {
                        Some(next_unchecked!(self))
    8000b08a:	ec2a                	sd	a0,24(sp)
    8000b08c:	a009                	j	8000b08e <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha83d9fbdc7b514feE+0xa8>
    8000b08e:	6562                	ld	a0,24(sp)
    8000b090:	fc2a                	sd	a0,56(sp)
                    if is_empty!(self) {
    8000b092:	a009                	j	8000b094 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha83d9fbdc7b514feE+0xae>
                    }
                }
            }
    8000b094:	7562                	ld	a0,56(sp)
    8000b096:	70a6                	ld	ra,104(sp)
    8000b098:	6165                	addi	sp,sp,112
    8000b09a:	8082                	ret

Disassembly of section .text._ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbe39990052f1389dE:

000000008000b09c <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbe39990052f1389dE>:
            fn next(&mut self) -> Option<$elem> {
    8000b09c:	7159                	addi	sp,sp,-112
    8000b09e:	f486                	sd	ra,104(sp)
    8000b0a0:	f42a                	sd	a0,40(sp)
    8000b0a2:	e0aa                	sd	a0,64(sp)
                    assume(!self.ptr.as_ptr().is_null());
    8000b0a4:	6108                	ld	a0,0(a0)
    8000b0a6:	00004097          	auipc	ra,0x4
    8000b0aa:	392080e7          	jalr	914(ra) # 8000f438 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h729713db2b300d39E>
    8000b0ae:	f82a                	sd	a0,48(sp)
    8000b0b0:	a009                	j	8000b0b2 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbe39990052f1389dE+0x16>
    8000b0b2:	7542                	ld	a0,48(sp)
    8000b0b4:	00014097          	auipc	ra,0x14
    8000b0b8:	554080e7          	jalr	1364(ra) # 8001f608 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hba478e65ea6353f9E>
    8000b0bc:	a009                	j	8000b0be <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbe39990052f1389dE+0x22>
    8000b0be:	a009                	j	8000b0c0 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbe39990052f1389dE+0x24>
                    if mem::size_of::<T>() != 0 {
    8000b0c0:	a009                	j	8000b0c2 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbe39990052f1389dE+0x26>
    8000b0c2:	4501                	li	a0,0
    8000b0c4:	e909                	bnez	a0,8000b0d6 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbe39990052f1389dE+0x3a>
    8000b0c6:	a009                	j	8000b0c8 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbe39990052f1389dE+0x2c>
                        assume(!self.end.is_null());
    8000b0c8:	7522                	ld	a0,40(sp)
    8000b0ca:	6508                	ld	a0,8(a0)
    8000b0cc:	00014097          	auipc	ra,0x14
    8000b0d0:	60a080e7          	jalr	1546(ra) # 8001f6d6 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h309eb733b6984dd5E>
    8000b0d4:	a011                	j	8000b0d8 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbe39990052f1389dE+0x3c>
                    if mem::size_of::<T>() != 0 {
    8000b0d6:	a019                	j	8000b0dc <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbe39990052f1389dE+0x40>
                        assume(!self.end.is_null());
    8000b0d8:	a009                	j	8000b0da <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbe39990052f1389dE+0x3e>
                    if mem::size_of::<T>() != 0 {
    8000b0da:	a009                	j	8000b0dc <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbe39990052f1389dE+0x40>
                    if is_empty!(self) {
    8000b0dc:	7522                	ld	a0,40(sp)
    8000b0de:	6108                	ld	a0,0(a0)
    8000b0e0:	00004097          	auipc	ra,0x4
    8000b0e4:	358080e7          	jalr	856(ra) # 8000f438 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h729713db2b300d39E>
    8000b0e8:	f02a                	sd	a0,32(sp)
    8000b0ea:	a009                	j	8000b0ec <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbe39990052f1389dE+0x50>
    8000b0ec:	7502                	ld	a0,32(sp)
    8000b0ee:	75a2                	ld	a1,40(sp)
    8000b0f0:	658c                	ld	a1,8(a1)
    8000b0f2:	00b51663          	bne	a0,a1,8000b0fe <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbe39990052f1389dE+0x62>
    8000b0f6:	a009                	j	8000b0f8 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbe39990052f1389dE+0x5c>
    8000b0f8:	4501                	li	a0,0
                        None
    8000b0fa:	fc2a                	sd	a0,56(sp)
                    if is_empty!(self) {
    8000b0fc:	a0b9                	j	8000b14a <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbe39990052f1389dE+0xae>
    8000b0fe:	7522                	ld	a0,40(sp)
    8000b100:	e8aa                	sd	a0,80(sp)
    8000b102:	4585                	li	a1,1
    8000b104:	e42e                	sd	a1,8(sp)
    8000b106:	ecae                	sd	a1,88(sp)
                    let old = self.ptr.as_ptr();
    8000b108:	6108                	ld	a0,0(a0)
    8000b10a:	00004097          	auipc	ra,0x4
    8000b10e:	32e080e7          	jalr	814(ra) # 8000f438 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h729713db2b300d39E>
    8000b112:	85aa                	mv	a1,a0
    8000b114:	7522                	ld	a0,40(sp)
    8000b116:	e82e                	sd	a1,16(sp)
    8000b118:	f0ae                	sd	a1,96(sp)
                    self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
    8000b11a:	6108                	ld	a0,0(a0)
    8000b11c:	00004097          	auipc	ra,0x4
    8000b120:	31c080e7          	jalr	796(ra) # 8000f438 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h729713db2b300d39E>
    8000b124:	65a2                	ld	a1,8(sp)
    8000b126:	00014097          	auipc	ra,0x14
    8000b12a:	4ce080e7          	jalr	1230(ra) # 8001f5f4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb5f7a0f346747657E>
    8000b12e:	00004097          	auipc	ra,0x4
    8000b132:	0f2080e7          	jalr	242(ra) # 8000f220 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h5ed8fa4a56812246E>
    8000b136:	7622                	ld	a2,40(sp)
    8000b138:	85aa                	mv	a1,a0
    8000b13a:	6542                	ld	a0,16(sp)
    8000b13c:	e20c                	sd	a1,0(a2)
                    old
    8000b13e:	e4aa                	sd	a0,72(sp)
                        Some(next_unchecked!(self))
    8000b140:	ec2a                	sd	a0,24(sp)
    8000b142:	a009                	j	8000b144 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbe39990052f1389dE+0xa8>
    8000b144:	6562                	ld	a0,24(sp)
    8000b146:	fc2a                	sd	a0,56(sp)
                    if is_empty!(self) {
    8000b148:	a009                	j	8000b14a <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hbe39990052f1389dE+0xae>
            }
    8000b14a:	7562                	ld	a0,56(sp)
    8000b14c:	70a6                	ld	ra,104(sp)
    8000b14e:	6165                	addi	sp,sp,112
    8000b150:	8082                	ret

Disassembly of section .text._ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1ffaf15da7599f33E:

000000008000b152 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1ffaf15da7599f33E>:
            fn next(&mut self) -> Option<$elem> {
    8000b152:	7159                	addi	sp,sp,-112
    8000b154:	f486                	sd	ra,104(sp)
    8000b156:	f42a                	sd	a0,40(sp)
    8000b158:	e0aa                	sd	a0,64(sp)
                    assume(!self.ptr.as_ptr().is_null());
    8000b15a:	6108                	ld	a0,0(a0)
    8000b15c:	00004097          	auipc	ra,0x4
    8000b160:	326080e7          	jalr	806(ra) # 8000f482 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17hfb12dd33ea904ed8E>
    8000b164:	f82a                	sd	a0,48(sp)
    8000b166:	a009                	j	8000b168 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1ffaf15da7599f33E+0x16>
    8000b168:	7542                	ld	a0,48(sp)
    8000b16a:	ffffe097          	auipc	ra,0xffffe
    8000b16e:	804080e7          	jalr	-2044(ra) # 8000896e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hc49b20e03dc897f6E>
    8000b172:	a009                	j	8000b174 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1ffaf15da7599f33E+0x22>
    8000b174:	a009                	j	8000b176 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1ffaf15da7599f33E+0x24>
                    if mem::size_of::<T>() != 0 {
    8000b176:	a009                	j	8000b178 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1ffaf15da7599f33E+0x26>
    8000b178:	4501                	li	a0,0
    8000b17a:	e909                	bnez	a0,8000b18c <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1ffaf15da7599f33E+0x3a>
    8000b17c:	a009                	j	8000b17e <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1ffaf15da7599f33E+0x2c>
                        assume(!self.end.is_null());
    8000b17e:	7522                	ld	a0,40(sp)
    8000b180:	6508                	ld	a0,8(a0)
    8000b182:	ffffd097          	auipc	ra,0xffffd
    8000b186:	7ec080e7          	jalr	2028(ra) # 8000896e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hc49b20e03dc897f6E>
    8000b18a:	a011                	j	8000b18e <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1ffaf15da7599f33E+0x3c>
                    if mem::size_of::<T>() != 0 {
    8000b18c:	a019                	j	8000b192 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1ffaf15da7599f33E+0x40>
                        assume(!self.end.is_null());
    8000b18e:	a009                	j	8000b190 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1ffaf15da7599f33E+0x3e>
                    if mem::size_of::<T>() != 0 {
    8000b190:	a009                	j	8000b192 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1ffaf15da7599f33E+0x40>
                    if is_empty!(self) {
    8000b192:	7522                	ld	a0,40(sp)
    8000b194:	6108                	ld	a0,0(a0)
    8000b196:	00004097          	auipc	ra,0x4
    8000b19a:	2ec080e7          	jalr	748(ra) # 8000f482 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17hfb12dd33ea904ed8E>
    8000b19e:	f02a                	sd	a0,32(sp)
    8000b1a0:	a009                	j	8000b1a2 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1ffaf15da7599f33E+0x50>
    8000b1a2:	7502                	ld	a0,32(sp)
    8000b1a4:	75a2                	ld	a1,40(sp)
    8000b1a6:	658c                	ld	a1,8(a1)
    8000b1a8:	00b51663          	bne	a0,a1,8000b1b4 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1ffaf15da7599f33E+0x62>
    8000b1ac:	a009                	j	8000b1ae <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1ffaf15da7599f33E+0x5c>
    8000b1ae:	4501                	li	a0,0
                        None
    8000b1b0:	fc2a                	sd	a0,56(sp)
                    if is_empty!(self) {
    8000b1b2:	a0b9                	j	8000b200 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1ffaf15da7599f33E+0xae>
    8000b1b4:	7522                	ld	a0,40(sp)
    8000b1b6:	e8aa                	sd	a0,80(sp)
    8000b1b8:	4585                	li	a1,1
    8000b1ba:	e42e                	sd	a1,8(sp)
    8000b1bc:	ecae                	sd	a1,88(sp)
                    let old = self.ptr.as_ptr();
    8000b1be:	6108                	ld	a0,0(a0)
    8000b1c0:	00004097          	auipc	ra,0x4
    8000b1c4:	2c2080e7          	jalr	706(ra) # 8000f482 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17hfb12dd33ea904ed8E>
    8000b1c8:	85aa                	mv	a1,a0
    8000b1ca:	7522                	ld	a0,40(sp)
    8000b1cc:	e82e                	sd	a1,16(sp)
    8000b1ce:	f0ae                	sd	a1,96(sp)
                    self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
    8000b1d0:	6108                	ld	a0,0(a0)
    8000b1d2:	00004097          	auipc	ra,0x4
    8000b1d6:	2b0080e7          	jalr	688(ra) # 8000f482 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17hfb12dd33ea904ed8E>
    8000b1da:	65a2                	ld	a1,8(sp)
    8000b1dc:	ffffd097          	auipc	ra,0xffffd
    8000b1e0:	768080e7          	jalr	1896(ra) # 80008944 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h07753d2a365b8ea9E>
    8000b1e4:	00004097          	auipc	ra,0x4
    8000b1e8:	06e080e7          	jalr	110(ra) # 8000f252 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17he8eb4f7b6f10823eE>
    8000b1ec:	7622                	ld	a2,40(sp)
    8000b1ee:	85aa                	mv	a1,a0
    8000b1f0:	6542                	ld	a0,16(sp)
    8000b1f2:	e20c                	sd	a1,0(a2)
                    old
    8000b1f4:	e4aa                	sd	a0,72(sp)
                        Some(next_unchecked!(self))
    8000b1f6:	ec2a                	sd	a0,24(sp)
    8000b1f8:	a009                	j	8000b1fa <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1ffaf15da7599f33E+0xa8>
    8000b1fa:	6562                	ld	a0,24(sp)
    8000b1fc:	fc2a                	sd	a0,56(sp)
                    if is_empty!(self) {
    8000b1fe:	a009                	j	8000b200 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1ffaf15da7599f33E+0xae>
            }
    8000b200:	7562                	ld	a0,56(sp)
    8000b202:	70a6                	ld	ra,104(sp)
    8000b204:	6165                	addi	sp,sp,112
    8000b206:	8082                	ret

Disassembly of section .text._ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17habdea9e62d8c6ddfE:

000000008000b208 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17habdea9e62d8c6ddfE>:
            fn next(&mut self) -> Option<$elem> {
    8000b208:	7159                	addi	sp,sp,-112
    8000b20a:	f486                	sd	ra,104(sp)
    8000b20c:	f42a                	sd	a0,40(sp)
    8000b20e:	e0aa                	sd	a0,64(sp)
                    assume(!self.ptr.as_ptr().is_null());
    8000b210:	6108                	ld	a0,0(a0)
    8000b212:	00004097          	auipc	ra,0x4
    8000b216:	22e080e7          	jalr	558(ra) # 8000f440 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h7c6e4b893f33870bE>
    8000b21a:	f82a                	sd	a0,48(sp)
    8000b21c:	a009                	j	8000b21e <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17habdea9e62d8c6ddfE+0x16>
    8000b21e:	7542                	ld	a0,48(sp)
    8000b220:	00006097          	auipc	ra,0x6
    8000b224:	402080e7          	jalr	1026(ra) # 80011622 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17he6d08a4a98c1735bE>
    8000b228:	a009                	j	8000b22a <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17habdea9e62d8c6ddfE+0x22>
    8000b22a:	a009                	j	8000b22c <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17habdea9e62d8c6ddfE+0x24>
                    if mem::size_of::<T>() != 0 {
    8000b22c:	a009                	j	8000b22e <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17habdea9e62d8c6ddfE+0x26>
    8000b22e:	4501                	li	a0,0
    8000b230:	e909                	bnez	a0,8000b242 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17habdea9e62d8c6ddfE+0x3a>
    8000b232:	a009                	j	8000b234 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17habdea9e62d8c6ddfE+0x2c>
                        assume(!self.end.is_null());
    8000b234:	7522                	ld	a0,40(sp)
    8000b236:	6508                	ld	a0,8(a0)
    8000b238:	00006097          	auipc	ra,0x6
    8000b23c:	3ea080e7          	jalr	1002(ra) # 80011622 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17he6d08a4a98c1735bE>
    8000b240:	a011                	j	8000b244 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17habdea9e62d8c6ddfE+0x3c>
                    if mem::size_of::<T>() != 0 {
    8000b242:	a019                	j	8000b248 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17habdea9e62d8c6ddfE+0x40>
                        assume(!self.end.is_null());
    8000b244:	a009                	j	8000b246 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17habdea9e62d8c6ddfE+0x3e>
                    if mem::size_of::<T>() != 0 {
    8000b246:	a009                	j	8000b248 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17habdea9e62d8c6ddfE+0x40>
                    if is_empty!(self) {
    8000b248:	7522                	ld	a0,40(sp)
    8000b24a:	6108                	ld	a0,0(a0)
    8000b24c:	00004097          	auipc	ra,0x4
    8000b250:	1f4080e7          	jalr	500(ra) # 8000f440 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h7c6e4b893f33870bE>
    8000b254:	f02a                	sd	a0,32(sp)
    8000b256:	a009                	j	8000b258 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17habdea9e62d8c6ddfE+0x50>
    8000b258:	7502                	ld	a0,32(sp)
    8000b25a:	75a2                	ld	a1,40(sp)
    8000b25c:	658c                	ld	a1,8(a1)
    8000b25e:	00b51663          	bne	a0,a1,8000b26a <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17habdea9e62d8c6ddfE+0x62>
    8000b262:	a009                	j	8000b264 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17habdea9e62d8c6ddfE+0x5c>
    8000b264:	4501                	li	a0,0
                        None
    8000b266:	fc2a                	sd	a0,56(sp)
                    if is_empty!(self) {
    8000b268:	a0b9                	j	8000b2b6 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17habdea9e62d8c6ddfE+0xae>
    8000b26a:	7522                	ld	a0,40(sp)
    8000b26c:	e8aa                	sd	a0,80(sp)
    8000b26e:	4585                	li	a1,1
    8000b270:	e42e                	sd	a1,8(sp)
    8000b272:	ecae                	sd	a1,88(sp)
                    let old = self.ptr.as_ptr();
    8000b274:	6108                	ld	a0,0(a0)
    8000b276:	00004097          	auipc	ra,0x4
    8000b27a:	1ca080e7          	jalr	458(ra) # 8000f440 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h7c6e4b893f33870bE>
    8000b27e:	85aa                	mv	a1,a0
    8000b280:	7522                	ld	a0,40(sp)
    8000b282:	e82e                	sd	a1,16(sp)
    8000b284:	f0ae                	sd	a1,96(sp)
                    self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
    8000b286:	6108                	ld	a0,0(a0)
    8000b288:	00004097          	auipc	ra,0x4
    8000b28c:	1b8080e7          	jalr	440(ra) # 8000f440 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h7c6e4b893f33870bE>
    8000b290:	65a2                	ld	a1,8(sp)
    8000b292:	00006097          	auipc	ra,0x6
    8000b296:	374080e7          	jalr	884(ra) # 80011606 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hc564f45fb449f47eE>
    8000b29a:	00004097          	auipc	ra,0x4
    8000b29e:	fae080e7          	jalr	-82(ra) # 8000f248 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17he6e2e3c661183ac0E>
    8000b2a2:	7622                	ld	a2,40(sp)
    8000b2a4:	85aa                	mv	a1,a0
    8000b2a6:	6542                	ld	a0,16(sp)
    8000b2a8:	e20c                	sd	a1,0(a2)
                    old
    8000b2aa:	e4aa                	sd	a0,72(sp)
                        Some(next_unchecked!(self))
    8000b2ac:	ec2a                	sd	a0,24(sp)
    8000b2ae:	a009                	j	8000b2b0 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17habdea9e62d8c6ddfE+0xa8>
    8000b2b0:	6562                	ld	a0,24(sp)
    8000b2b2:	fc2a                	sd	a0,56(sp)
                    if is_empty!(self) {
    8000b2b4:	a009                	j	8000b2b6 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17habdea9e62d8c6ddfE+0xae>
            }
    8000b2b6:	7562                	ld	a0,56(sp)
    8000b2b8:	70a6                	ld	ra,104(sp)
    8000b2ba:	6165                	addi	sp,sp,112
    8000b2bc:	8082                	ret

Disassembly of section .text._ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb379e12fde7ef54dE:

000000008000b2be <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb379e12fde7ef54dE>:
            fn next(&mut self) -> Option<$elem> {
    8000b2be:	7159                	addi	sp,sp,-112
    8000b2c0:	f486                	sd	ra,104(sp)
    8000b2c2:	f42a                	sd	a0,40(sp)
    8000b2c4:	e0aa                	sd	a0,64(sp)
                    assume(!self.ptr.as_ptr().is_null());
    8000b2c6:	6108                	ld	a0,0(a0)
    8000b2c8:	00004097          	auipc	ra,0x4
    8000b2cc:	18a080e7          	jalr	394(ra) # 8000f452 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h911cddd192dc1ebbE>
    8000b2d0:	f82a                	sd	a0,48(sp)
    8000b2d2:	a009                	j	8000b2d4 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb379e12fde7ef54dE+0x16>
    8000b2d4:	7542                	ld	a0,48(sp)
    8000b2d6:	ffffa097          	auipc	ra,0xffffa
    8000b2da:	35e080e7          	jalr	862(ra) # 80005634 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hee9a0b1c2395b573E>
    8000b2de:	a009                	j	8000b2e0 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb379e12fde7ef54dE+0x22>
    8000b2e0:	a009                	j	8000b2e2 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb379e12fde7ef54dE+0x24>
                    if mem::size_of::<T>() != 0 {
    8000b2e2:	a009                	j	8000b2e4 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb379e12fde7ef54dE+0x26>
    8000b2e4:	4501                	li	a0,0
    8000b2e6:	e909                	bnez	a0,8000b2f8 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb379e12fde7ef54dE+0x3a>
    8000b2e8:	a009                	j	8000b2ea <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb379e12fde7ef54dE+0x2c>
                        assume(!self.end.is_null());
    8000b2ea:	7522                	ld	a0,40(sp)
    8000b2ec:	6508                	ld	a0,8(a0)
    8000b2ee:	ffffa097          	auipc	ra,0xffffa
    8000b2f2:	346080e7          	jalr	838(ra) # 80005634 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hee9a0b1c2395b573E>
    8000b2f6:	a011                	j	8000b2fa <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb379e12fde7ef54dE+0x3c>
                    if mem::size_of::<T>() != 0 {
    8000b2f8:	a019                	j	8000b2fe <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb379e12fde7ef54dE+0x40>
                        assume(!self.end.is_null());
    8000b2fa:	a009                	j	8000b2fc <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb379e12fde7ef54dE+0x3e>
                    if mem::size_of::<T>() != 0 {
    8000b2fc:	a009                	j	8000b2fe <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb379e12fde7ef54dE+0x40>
                    if is_empty!(self) {
    8000b2fe:	7522                	ld	a0,40(sp)
    8000b300:	6108                	ld	a0,0(a0)
    8000b302:	00004097          	auipc	ra,0x4
    8000b306:	150080e7          	jalr	336(ra) # 8000f452 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h911cddd192dc1ebbE>
    8000b30a:	f02a                	sd	a0,32(sp)
    8000b30c:	a009                	j	8000b30e <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb379e12fde7ef54dE+0x50>
    8000b30e:	7502                	ld	a0,32(sp)
    8000b310:	75a2                	ld	a1,40(sp)
    8000b312:	658c                	ld	a1,8(a1)
    8000b314:	00b51663          	bne	a0,a1,8000b320 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb379e12fde7ef54dE+0x62>
    8000b318:	a009                	j	8000b31a <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb379e12fde7ef54dE+0x5c>
    8000b31a:	4501                	li	a0,0
                        None
    8000b31c:	fc2a                	sd	a0,56(sp)
                    if is_empty!(self) {
    8000b31e:	a0b9                	j	8000b36c <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb379e12fde7ef54dE+0xae>
    8000b320:	7522                	ld	a0,40(sp)
    8000b322:	e8aa                	sd	a0,80(sp)
    8000b324:	4585                	li	a1,1
    8000b326:	e42e                	sd	a1,8(sp)
    8000b328:	ecae                	sd	a1,88(sp)
                    let old = self.ptr.as_ptr();
    8000b32a:	6108                	ld	a0,0(a0)
    8000b32c:	00004097          	auipc	ra,0x4
    8000b330:	126080e7          	jalr	294(ra) # 8000f452 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h911cddd192dc1ebbE>
    8000b334:	85aa                	mv	a1,a0
    8000b336:	7522                	ld	a0,40(sp)
    8000b338:	e82e                	sd	a1,16(sp)
    8000b33a:	f0ae                	sd	a1,96(sp)
                    self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
    8000b33c:	6108                	ld	a0,0(a0)
    8000b33e:	00004097          	auipc	ra,0x4
    8000b342:	114080e7          	jalr	276(ra) # 8000f452 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h911cddd192dc1ebbE>
    8000b346:	65a2                	ld	a1,8(sp)
    8000b348:	ffffa097          	auipc	ra,0xffffa
    8000b34c:	2d0080e7          	jalr	720(ra) # 80005618 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h6150def6e470518fE>
    8000b350:	00004097          	auipc	ra,0x4
    8000b354:	eee080e7          	jalr	-274(ra) # 8000f23e <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17hd62713267129dcbeE>
    8000b358:	7622                	ld	a2,40(sp)
    8000b35a:	85aa                	mv	a1,a0
    8000b35c:	6542                	ld	a0,16(sp)
    8000b35e:	e20c                	sd	a1,0(a2)
                    old
    8000b360:	e4aa                	sd	a0,72(sp)
                        Some(next_unchecked!(self))
    8000b362:	ec2a                	sd	a0,24(sp)
    8000b364:	a009                	j	8000b366 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb379e12fde7ef54dE+0xa8>
    8000b366:	6562                	ld	a0,24(sp)
    8000b368:	fc2a                	sd	a0,56(sp)
                    if is_empty!(self) {
    8000b36a:	a009                	j	8000b36c <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb379e12fde7ef54dE+0xae>
            }
    8000b36c:	7562                	ld	a0,56(sp)
    8000b36e:	70a6                	ld	ra,104(sp)
    8000b370:	6165                	addi	sp,sp,112
    8000b372:	8082                	ret

Disassembly of section .text._ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he7c6aa33b7e64d1cE:

000000008000b374 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he7c6aa33b7e64d1cE>:
            fn next(&mut self) -> Option<$elem> {
    8000b374:	7159                	addi	sp,sp,-112
    8000b376:	f486                	sd	ra,104(sp)
    8000b378:	f42a                	sd	a0,40(sp)
    8000b37a:	e0aa                	sd	a0,64(sp)
                    assume(!self.ptr.as_ptr().is_null());
    8000b37c:	6108                	ld	a0,0(a0)
    8000b37e:	00004097          	auipc	ra,0x4
    8000b382:	0dc080e7          	jalr	220(ra) # 8000f45a <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h9b02cb35a46880f1E>
    8000b386:	f82a                	sd	a0,48(sp)
    8000b388:	a009                	j	8000b38a <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he7c6aa33b7e64d1cE+0x16>
    8000b38a:	7542                	ld	a0,48(sp)
    8000b38c:	00012097          	auipc	ra,0x12
    8000b390:	258080e7          	jalr	600(ra) # 8001d5e4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h1d4bdf7317c60b96E>
    8000b394:	a009                	j	8000b396 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he7c6aa33b7e64d1cE+0x22>
    8000b396:	a009                	j	8000b398 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he7c6aa33b7e64d1cE+0x24>
                    if mem::size_of::<T>() != 0 {
    8000b398:	a009                	j	8000b39a <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he7c6aa33b7e64d1cE+0x26>
    8000b39a:	4501                	li	a0,0
    8000b39c:	e909                	bnez	a0,8000b3ae <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he7c6aa33b7e64d1cE+0x3a>
    8000b39e:	a009                	j	8000b3a0 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he7c6aa33b7e64d1cE+0x2c>
                        assume(!self.end.is_null());
    8000b3a0:	7522                	ld	a0,40(sp)
    8000b3a2:	6508                	ld	a0,8(a0)
    8000b3a4:	00012097          	auipc	ra,0x12
    8000b3a8:	240080e7          	jalr	576(ra) # 8001d5e4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h1d4bdf7317c60b96E>
    8000b3ac:	a011                	j	8000b3b0 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he7c6aa33b7e64d1cE+0x3c>
                    if mem::size_of::<T>() != 0 {
    8000b3ae:	a019                	j	8000b3b4 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he7c6aa33b7e64d1cE+0x40>
                        assume(!self.end.is_null());
    8000b3b0:	a009                	j	8000b3b2 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he7c6aa33b7e64d1cE+0x3e>
                    if mem::size_of::<T>() != 0 {
    8000b3b2:	a009                	j	8000b3b4 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he7c6aa33b7e64d1cE+0x40>
                    if is_empty!(self) {
    8000b3b4:	7522                	ld	a0,40(sp)
    8000b3b6:	6108                	ld	a0,0(a0)
    8000b3b8:	00004097          	auipc	ra,0x4
    8000b3bc:	0a2080e7          	jalr	162(ra) # 8000f45a <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h9b02cb35a46880f1E>
    8000b3c0:	f02a                	sd	a0,32(sp)
    8000b3c2:	a009                	j	8000b3c4 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he7c6aa33b7e64d1cE+0x50>
    8000b3c4:	7502                	ld	a0,32(sp)
    8000b3c6:	75a2                	ld	a1,40(sp)
    8000b3c8:	658c                	ld	a1,8(a1)
    8000b3ca:	00b51663          	bne	a0,a1,8000b3d6 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he7c6aa33b7e64d1cE+0x62>
    8000b3ce:	a009                	j	8000b3d0 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he7c6aa33b7e64d1cE+0x5c>
    8000b3d0:	4501                	li	a0,0
                        None
    8000b3d2:	fc2a                	sd	a0,56(sp)
                    if is_empty!(self) {
    8000b3d4:	a0b9                	j	8000b422 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he7c6aa33b7e64d1cE+0xae>
    8000b3d6:	7522                	ld	a0,40(sp)
    8000b3d8:	e8aa                	sd	a0,80(sp)
    8000b3da:	4585                	li	a1,1
    8000b3dc:	e42e                	sd	a1,8(sp)
    8000b3de:	ecae                	sd	a1,88(sp)
                    let old = self.ptr.as_ptr();
    8000b3e0:	6108                	ld	a0,0(a0)
    8000b3e2:	00004097          	auipc	ra,0x4
    8000b3e6:	078080e7          	jalr	120(ra) # 8000f45a <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h9b02cb35a46880f1E>
    8000b3ea:	85aa                	mv	a1,a0
    8000b3ec:	7522                	ld	a0,40(sp)
    8000b3ee:	e82e                	sd	a1,16(sp)
    8000b3f0:	f0ae                	sd	a1,96(sp)
                    self.ptr = unsafe { NonNull::new_unchecked(self.ptr.as_ptr().offset(offset)) };
    8000b3f2:	6108                	ld	a0,0(a0)
    8000b3f4:	00004097          	auipc	ra,0x4
    8000b3f8:	066080e7          	jalr	102(ra) # 8000f45a <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h9b02cb35a46880f1E>
    8000b3fc:	65a2                	ld	a1,8(sp)
    8000b3fe:	00012097          	auipc	ra,0x12
    8000b402:	1ca080e7          	jalr	458(ra) # 8001d5c8 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17he4f714b54e872ab3E>
    8000b406:	00004097          	auipc	ra,0x4
    8000b40a:	e56080e7          	jalr	-426(ra) # 8000f25c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17hf41e3912db402547E>
    8000b40e:	7622                	ld	a2,40(sp)
    8000b410:	85aa                	mv	a1,a0
    8000b412:	6542                	ld	a0,16(sp)
    8000b414:	e20c                	sd	a1,0(a2)
                    old
    8000b416:	e4aa                	sd	a0,72(sp)
                        Some(next_unchecked!(self))
    8000b418:	ec2a                	sd	a0,24(sp)
    8000b41a:	a009                	j	8000b41c <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he7c6aa33b7e64d1cE+0xa8>
    8000b41c:	6562                	ld	a0,24(sp)
    8000b41e:	fc2a                	sd	a0,56(sp)
                    if is_empty!(self) {
    8000b420:	a009                	j	8000b422 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he7c6aa33b7e64d1cE+0xae>
            }
    8000b422:	7562                	ld	a0,56(sp)
    8000b424:	70a6                	ld	ra,104(sp)
    8000b426:	6165                	addi	sp,sp,112
    8000b428:	8082                	ret

Disassembly of section .text._ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8for_each17hd302585b5e4cac20E:

000000008000b42a <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8for_each17hd302585b5e4cac20E>:

            // We override the default implementation, which uses `try_fold`,
            // because this simple implementation generates less LLVM IR and is
            // faster to compile.
            #[inline]
            fn for_each<F>(mut self, mut f: F)
    8000b42a:	7139                	addi	sp,sp,-64
    8000b42c:	fc06                	sd	ra,56(sp)
    8000b42e:	e42a                	sd	a0,8(sp)
    8000b430:	e82e                	sd	a1,16(sp)
    8000b432:	a009                	j	8000b434 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8for_each17hd302585b5e4cac20E+0xa>
    8000b434:	0028                	addi	a0,sp,8
            where
                Self: Sized,
                F: FnMut(Self::Item),
            {
                while let Some(x) = self.next() {
    8000b436:	00000097          	auipc	ra,0x0
    8000b43a:	d1c080e7          	jalr	-740(ra) # 8000b152 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h1ffaf15da7599f33E>
    8000b43e:	f02a                	sd	a0,32(sp)
    8000b440:	a009                	j	8000b442 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8for_each17hd302585b5e4cac20E+0x18>
    8000b442:	7502                	ld	a0,32(sp)
    8000b444:	4581                	li	a1,0
    8000b446:	00b51463          	bne	a0,a1,8000b44e <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8for_each17hd302585b5e4cac20E+0x24>
    8000b44a:	a009                	j	8000b44c <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8for_each17hd302585b5e4cac20E+0x22>
                    f(x);
                }
            }
    8000b44c:	a819                	j	8000b462 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8for_each17hd302585b5e4cac20E+0x38>
                while let Some(x) = self.next() {
    8000b44e:	7582                	ld	a1,32(sp)
    8000b450:	f82e                	sd	a1,48(sp)
                    f(x);
    8000b452:	f42e                	sd	a1,40(sp)
    8000b454:	0828                	addi	a0,sp,24
    8000b456:	00001097          	auipc	ra,0x1
    8000b45a:	62c080e7          	jalr	1580(ra) # 8000ca82 <_ZN6kernel6driver11virtio_disk4Disk4init28_$u7b$$u7b$closure$u7d$$u7d$17h8a5adb868ad71917E>
    8000b45e:	a009                	j	8000b460 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8for_each17hd302585b5e4cac20E+0x36>
                while let Some(x) = self.next() {
    8000b460:	bfd1                	j	8000b434 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8for_each17hd302585b5e4cac20E+0xa>
            }
    8000b462:	70e2                	ld	ra,56(sp)
    8000b464:	6121                	addi	sp,sp,64
    8000b466:	8082                	ret

Disassembly of section .text._ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h375e002d3a518d66E:

000000008000b468 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h375e002d3a518d66E>:
        // so the call to `add` is safe.
        unsafe { ptr::slice_from_raw_parts(slice.as_ptr().add(self.start), self.end - self.start) }
    }

    #[inline]
    unsafe fn get_unchecked_mut(self, slice: *mut [T]) -> *mut [T] {
    8000b468:	7159                	addi	sp,sp,-112
    8000b46a:	f486                	sd	ra,104(sp)
    8000b46c:	f036                	sd	a3,32(sp)
    8000b46e:	f832                	sd	a2,48(sp)
    8000b470:	862e                	mv	a2,a1
    8000b472:	7582                	ld	a1,32(sp)
    8000b474:	f432                	sd	a2,40(sp)
    8000b476:	86aa                	mv	a3,a0
    8000b478:	7542                	ld	a0,48(sp)
    8000b47a:	fc36                	sd	a3,56(sp)
    8000b47c:	e4b6                	sd	a3,72(sp)
    8000b47e:	e8b2                	sd	a2,80(sp)
    8000b480:	ecaa                	sd	a0,88(sp)
    8000b482:	f0ae                	sd	a1,96(sp)
        // SAFETY: see comments for `get_unchecked` above.
        unsafe {
            ptr::slice_from_raw_parts_mut(slice.as_mut_ptr().add(self.start), self.end - self.start)
    8000b484:	00014097          	auipc	ra,0x14
    8000b488:	1a6080e7          	jalr	422(ra) # 8001f62a <_ZN4core3ptr7mut_ptr41_$LT$impl$u20$$BP$mut$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h80398cc0098c8b0fE>
    8000b48c:	e0aa                	sd	a0,64(sp)
    8000b48e:	a009                	j	8000b490 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h375e002d3a518d66E+0x28>
    8000b490:	75e2                	ld	a1,56(sp)
    8000b492:	6506                	ld	a0,64(sp)
    8000b494:	00014097          	auipc	ra,0x14
    8000b498:	0f0080e7          	jalr	240(ra) # 8001f584 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1d203f00cca684c1E>
    8000b49c:	ec2a                	sd	a0,24(sp)
    8000b49e:	a009                	j	8000b4a0 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h375e002d3a518d66E+0x38>
    8000b4a0:	6562                	ld	a0,24(sp)
    8000b4a2:	75a2                	ld	a1,40(sp)
    8000b4a4:	7662                	ld	a2,56(sp)
    8000b4a6:	8d91                	sub	a1,a1,a2
    8000b4a8:	00016097          	auipc	ra,0x16
    8000b4ac:	186080e7          	jalr	390(ra) # 8002162e <_ZN4core3ptr24slice_from_raw_parts_mut17h39496eba86137ee5E>
    8000b4b0:	e42a                	sd	a0,8(sp)
    8000b4b2:	e82e                	sd	a1,16(sp)
    8000b4b4:	a009                	j	8000b4b6 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h375e002d3a518d66E+0x4e>
        }
    }
    8000b4b6:	65c2                	ld	a1,16(sp)
    8000b4b8:	6522                	ld	a0,8(sp)
    8000b4ba:	70a6                	ld	ra,104(sp)
    8000b4bc:	6165                	addi	sp,sp,112
    8000b4be:	8082                	ret

Disassembly of section .text._ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hbf20116633f62746E:

000000008000b4c0 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hbf20116633f62746E>:
        // SAFETY: `self` is checked to be valid and in bounds above.
        unsafe { &*self.get_unchecked(slice) }
    }

    #[inline]
    fn index_mut(self, slice: &mut [T]) -> &mut [T] {
    8000b4c0:	7159                	addi	sp,sp,-112
    8000b4c2:	f486                	sd	ra,104(sp)
    8000b4c4:	f03a                	sd	a4,32(sp)
    8000b4c6:	f436                	sd	a3,40(sp)
    8000b4c8:	f832                	sd	a2,48(sp)
    8000b4ca:	fc2e                	sd	a1,56(sp)
    8000b4cc:	e0aa                	sd	a0,64(sp)
    8000b4ce:	e4aa                	sd	a0,72(sp)
    8000b4d0:	e8ae                	sd	a1,80(sp)
    8000b4d2:	ecb2                	sd	a2,88(sp)
    8000b4d4:	f0b6                	sd	a3,96(sp)
        if self.start > self.end {
    8000b4d6:	00a5fb63          	bgeu	a1,a0,8000b4ec <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hbf20116633f62746E+0x2c>
    8000b4da:	a009                	j	8000b4dc <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hbf20116633f62746E+0x1c>
            slice_index_order_fail(self.start, self.end);
    8000b4dc:	7602                	ld	a2,32(sp)
    8000b4de:	75e2                	ld	a1,56(sp)
    8000b4e0:	6506                	ld	a0,64(sp)
    8000b4e2:	00018097          	auipc	ra,0x18
    8000b4e6:	428080e7          	jalr	1064(ra) # 8002390a <_ZN4core5slice5index22slice_index_order_fail17h8c18576576dbf4e3E>
    8000b4ea:	0000                	unimp
        } else if self.end > slice.len() {
    8000b4ec:	75a2                	ld	a1,40(sp)
    8000b4ee:	7542                	ld	a0,48(sp)
    8000b4f0:	00014097          	auipc	ra,0x14
    8000b4f4:	f6a080e7          	jalr	-150(ra) # 8001f45a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hb06ce83b043493f3E>
    8000b4f8:	ec2a                	sd	a0,24(sp)
    8000b4fa:	a009                	j	8000b4fc <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hbf20116633f62746E+0x3c>
    8000b4fc:	6562                	ld	a0,24(sp)
    8000b4fe:	75e2                	ld	a1,56(sp)
    8000b500:	00b57b63          	bgeu	a0,a1,8000b516 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hbf20116633f62746E+0x56>
    8000b504:	a009                	j	8000b506 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hbf20116633f62746E+0x46>
            slice_end_index_len_fail(self.end, slice.len());
    8000b506:	75a2                	ld	a1,40(sp)
    8000b508:	7542                	ld	a0,48(sp)
    8000b50a:	00014097          	auipc	ra,0x14
    8000b50e:	f50080e7          	jalr	-176(ra) # 8001f45a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hb06ce83b043493f3E>
    8000b512:	e82a                	sd	a0,16(sp)
    8000b514:	a821                	j	8000b52c <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hbf20116633f62746E+0x6c>
        }
        // SAFETY: `self` is checked to be valid and in bounds above.
        unsafe { &mut *self.get_unchecked_mut(slice) }
    8000b516:	76a2                	ld	a3,40(sp)
    8000b518:	7642                	ld	a2,48(sp)
    8000b51a:	75e2                	ld	a1,56(sp)
    8000b51c:	6506                	ld	a0,64(sp)
    8000b51e:	00000097          	auipc	ra,0x0
    8000b522:	f4a080e7          	jalr	-182(ra) # 8000b468 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h375e002d3a518d66E>
    8000b526:	e02a                	sd	a0,0(sp)
    8000b528:	e42e                	sd	a1,8(sp)
    8000b52a:	a809                	j	8000b53c <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hbf20116633f62746E+0x7c>
            slice_end_index_len_fail(self.end, slice.len());
    8000b52c:	7602                	ld	a2,32(sp)
    8000b52e:	65c2                	ld	a1,16(sp)
    8000b530:	7562                	ld	a0,56(sp)
    8000b532:	00018097          	auipc	ra,0x18
    8000b536:	398080e7          	jalr	920(ra) # 800238ca <_ZN4core5slice5index24slice_end_index_len_fail17hbdcbb59c061b5014E>
    8000b53a:	0000                	unimp
    }
    8000b53c:	65a2                	ld	a1,8(sp)
    8000b53e:	6502                	ld	a0,0(sp)
    8000b540:	70a6                	ld	ra,104(sp)
    8000b542:	6165                	addi	sp,sp,112
    8000b544:	8082                	ret

Disassembly of section .text._ZN108_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h6e1483f88545dbc6E:

000000008000b546 <_ZN108_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h6e1483f88545dbc6E>:
    fn index(self, slice: &[T]) -> &[T] {
        (0..self.end).index(slice)
    }

    #[inline]
    fn index_mut(self, slice: &mut [T]) -> &mut [T] {
    8000b546:	7139                	addi	sp,sp,-64
    8000b548:	fc06                	sd	ra,56(sp)
    8000b54a:	8736                	mv	a4,a3
    8000b54c:	86b2                	mv	a3,a2
    8000b54e:	862e                	mv	a2,a1
    8000b550:	85aa                	mv	a1,a0
    8000b552:	f02e                	sd	a1,32(sp)
    8000b554:	f432                	sd	a2,40(sp)
    8000b556:	f836                	sd	a3,48(sp)
    8000b558:	4501                	li	a0,0
        (0..self.end).index_mut(slice)
    8000b55a:	e82a                	sd	a0,16(sp)
    8000b55c:	ec2e                	sd	a1,24(sp)
    8000b55e:	00000097          	auipc	ra,0x0
    8000b562:	f62080e7          	jalr	-158(ra) # 8000b4c0 <_ZN106_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hbf20116633f62746E>
    8000b566:	e02a                	sd	a0,0(sp)
    8000b568:	e42e                	sd	a1,8(sp)
    8000b56a:	a009                	j	8000b56c <_ZN108_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h6e1483f88545dbc6E+0x26>
    }
    8000b56c:	65a2                	ld	a1,8(sp)
    8000b56e:	6502                	ld	a0,0(sp)
    8000b570:	70e2                	ld	ra,56(sp)
    8000b572:	6121                	addi	sp,sp,64
    8000b574:	8082                	ret

Disassembly of section .text._ZN4core3ops5range25RangeInclusive$LT$Idx$GT$3new17h55e0942ec6ff79cbE:

000000008000b576 <_ZN4core3ops5range25RangeInclusive$LT$Idx$GT$3new17h55e0942ec6ff79cbE>:
    #[lang = "range_inclusive_new"]
    #[stable(feature = "inclusive_range_methods", since = "1.27.0")]
    #[inline]
    #[rustc_promotable]
    #[rustc_const_stable(feature = "const_range_new", since = "1.32.0")]
    pub const fn new(start: Idx, end: Idx) -> Self {
    8000b576:	1101                	addi	sp,sp,-32
    8000b578:	e42e                	sd	a1,8(sp)
    8000b57a:	85aa                	mv	a1,a0
    8000b57c:	6522                	ld	a0,8(sp)
    8000b57e:	e82a                	sd	a0,16(sp)
    8000b580:	ec32                	sd	a2,24(sp)
        Self { start, end, exhausted: false }
    8000b582:	e188                	sd	a0,0(a1)
    8000b584:	e590                	sd	a2,8(a1)
    8000b586:	4501                	li	a0,0
    8000b588:	00a58823          	sb	a0,16(a1)
    }
    8000b58c:	6105                	addi	sp,sp,32
    8000b58e:	8082                	ret

Disassembly of section .text._ZN4core3ops5range25RangeInclusive$LT$Idx$GT$8is_empty17h217535e9c22b3affE:

000000008000b590 <_ZN4core3ops5range25RangeInclusive$LT$Idx$GT$8is_empty17h217535e9c22b3affE>:
    /// // Precise field values are unspecified here
    /// assert!(r.is_empty());
    /// ```
    #[stable(feature = "range_is_empty", since = "1.47.0")]
    #[inline]
    pub fn is_empty(&self) -> bool {
    8000b590:	7179                	addi	sp,sp,-48
    8000b592:	f406                	sd	ra,40(sp)
    8000b594:	e82a                	sd	a0,16(sp)
    8000b596:	f02a                	sd	a0,32(sp)
        self.exhausted || !(self.start <= self.end)
    8000b598:	01054503          	lbu	a0,16(a0)
    8000b59c:	8905                	andi	a0,a0,1
    8000b59e:	4581                	li	a1,0
    8000b5a0:	00b50b63          	beq	a0,a1,8000b5b6 <_ZN4core3ops5range25RangeInclusive$LT$Idx$GT$8is_empty17h217535e9c22b3affE+0x26>
    8000b5a4:	a009                	j	8000b5a6 <_ZN4core3ops5range25RangeInclusive$LT$Idx$GT$8is_empty17h217535e9c22b3affE+0x16>
    8000b5a6:	4505                	li	a0,1
    8000b5a8:	00a10fa3          	sb	a0,31(sp)
    8000b5ac:	a831                	j	8000b5c8 <_ZN4core3ops5range25RangeInclusive$LT$Idx$GT$8is_empty17h217535e9c22b3affE+0x38>
    8000b5ae:	4501                	li	a0,0
    8000b5b0:	00a10fa3          	sb	a0,31(sp)
    8000b5b4:	a811                	j	8000b5c8 <_ZN4core3ops5range25RangeInclusive$LT$Idx$GT$8is_empty17h217535e9c22b3affE+0x38>
    8000b5b6:	6542                	ld	a0,16(sp)
    8000b5b8:	00850593          	addi	a1,a0,8
    8000b5bc:	00010097          	auipc	ra,0x10
    8000b5c0:	07c080e7          	jalr	124(ra) # 8001b638 <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2le17hf6519ff85d133637E>
    8000b5c4:	e42a                	sd	a0,8(sp)
    8000b5c6:	a031                	j	8000b5d2 <_ZN4core3ops5range25RangeInclusive$LT$Idx$GT$8is_empty17h217535e9c22b3affE+0x42>
    }
    8000b5c8:	01f14503          	lbu	a0,31(sp)
    8000b5cc:	70a2                	ld	ra,40(sp)
    8000b5ce:	6145                	addi	sp,sp,48
    8000b5d0:	8082                	ret
    8000b5d2:	6522                	ld	a0,8(sp)
    8000b5d4:	4581                	li	a1,0
        self.exhausted || !(self.start <= self.end)
    8000b5d6:	fcb508e3          	beq	a0,a1,8000b5a6 <_ZN4core3ops5range25RangeInclusive$LT$Idx$GT$8is_empty17h217535e9c22b3affE+0x16>
    8000b5da:	bfd1                	j	8000b5ae <_ZN4core3ops5range25RangeInclusive$LT$Idx$GT$8is_empty17h217535e9c22b3affE+0x1e>

Disassembly of section .text._ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h1068366d302d8741E:

000000008000b5dc <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h1068366d302d8741E>:
            (0, Some(0))
        }
    }

    #[inline]
    fn nth(&mut self, n: usize) -> Option<A> {
    8000b5dc:	7119                	addi	sp,sp,-128
    8000b5de:	fc86                	sd	ra,120(sp)
    8000b5e0:	f02e                	sd	a1,32(sp)
    8000b5e2:	f42a                	sd	a0,40(sp)
    8000b5e4:	f4aa                	sd	a0,104(sp)
    8000b5e6:	f8ae                	sd	a1,112(sp)
    8000b5e8:	4581                	li	a1,0
        if let Some(plus_n) = Step::forward_checked(self.start.clone(), n) {
    8000b5ea:	06b103a3          	sb	a1,103(sp)
    8000b5ee:	00012097          	auipc	ra,0x12
    8000b5f2:	08e080e7          	jalr	142(ra) # 8001d67c <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$usize$GT$5clone17h35e6cace0a4ed712E>
    8000b5f6:	f82a                	sd	a0,48(sp)
    8000b5f8:	a009                	j	8000b5fa <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h1068366d302d8741E+0x1e>
    8000b5fa:	7582                	ld	a1,32(sp)
    8000b5fc:	7542                	ld	a0,48(sp)
    8000b5fe:	4605                	li	a2,1
    8000b600:	06c103a3          	sb	a2,103(sp)
    8000b604:	00013097          	auipc	ra,0x13
    8000b608:	adc080e7          	jalr	-1316(ra) # 8001e0e0 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$15forward_checked17h89a22c0b5326f750E>
    8000b60c:	e4aa                	sd	a0,72(sp)
    8000b60e:	e8ae                	sd	a1,80(sp)
    8000b610:	a009                	j	8000b612 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h1068366d302d8741E+0x36>
    8000b612:	6526                	ld	a0,72(sp)
    8000b614:	4581                	li	a1,0
    8000b616:	00b51463          	bne	a0,a1,8000b61e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h1068366d302d8741E+0x42>
    8000b61a:	a009                	j	8000b61c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h1068366d302d8741E+0x40>
    8000b61c:	a859                	j	8000b6b2 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h1068366d302d8741E+0xd6>
    8000b61e:	7522                	ld	a0,40(sp)
    8000b620:	4581                	li	a1,0
    8000b622:	06b103a3          	sb	a1,103(sp)
    8000b626:	65c6                	ld	a1,80(sp)
    8000b628:	ecae                	sd	a1,88(sp)
            if plus_n < self.end {
    8000b62a:	00850593          	addi	a1,a0,8
    8000b62e:	08a8                	addi	a0,sp,88
    8000b630:	00010097          	auipc	ra,0x10
    8000b634:	024080e7          	jalr	36(ra) # 8001b654 <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17ha09858e1dc8f460eE>
    8000b638:	ec2a                	sd	a0,24(sp)
    8000b63a:	a009                	j	8000b63c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h1068366d302d8741E+0x60>
    8000b63c:	6562                	ld	a0,24(sp)
    8000b63e:	4581                	li	a1,0
    8000b640:	00b50a63          	beq	a0,a1,8000b654 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h1068366d302d8741E+0x78>
    8000b644:	a009                	j	8000b646 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h1068366d302d8741E+0x6a>
    8000b646:	08a8                	addi	a0,sp,88
                // SAFETY: just checked precondition
                self.start = unsafe { Step::forward_unchecked(plus_n.clone(), 1) };
    8000b648:	00012097          	auipc	ra,0x12
    8000b64c:	034080e7          	jalr	52(ra) # 8001d67c <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$usize$GT$5clone17h35e6cace0a4ed712E>
    8000b650:	e82a                	sd	a0,16(sp)
    8000b652:	a011                	j	8000b656 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h1068366d302d8741E+0x7a>
                return Some(plus_n);
            }
        }
    8000b654:	a811                	j	8000b668 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h1068366d302d8741E+0x8c>
                self.start = unsafe { Step::forward_unchecked(plus_n.clone(), 1) };
    8000b656:	6542                	ld	a0,16(sp)
    8000b658:	4585                	li	a1,1
    8000b65a:	00013097          	auipc	ra,0x13
    8000b65e:	ac0080e7          	jalr	-1344(ra) # 8001e11a <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17h4b00136ef7a8c813E>
    8000b662:	e42a                	sd	a0,8(sp)
    8000b664:	a009                	j	8000b666 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h1068366d302d8741E+0x8a>
    8000b666:	a801                	j	8000b676 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h1068366d302d8741E+0x9a>
        if let Some(plus_n) = Step::forward_checked(self.start.clone(), n) {
    8000b668:	a0a9                	j	8000b6b2 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h1068366d302d8741E+0xd6>

        self.start = self.end.clone();
    8000b66a:	a889                	j	8000b6bc <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h1068366d302d8741E+0xe0>
        None
    }
    8000b66c:	7562                	ld	a0,56(sp)
    8000b66e:	6586                	ld	a1,64(sp)
    8000b670:	70e6                	ld	ra,120(sp)
    8000b672:	6109                	addi	sp,sp,128
    8000b674:	8082                	ret
                self.start = unsafe { Step::forward_unchecked(plus_n.clone(), 1) };
    8000b676:	6522                	ld	a0,8(sp)
    8000b678:	75a2                	ld	a1,40(sp)
    8000b67a:	e188                	sd	a0,0(a1)
                return Some(plus_n);
    8000b67c:	6566                	ld	a0,88(sp)
    8000b67e:	e0aa                	sd	a0,64(sp)
    8000b680:	4505                	li	a0,1
    8000b682:	fc2a                	sd	a0,56(sp)
    8000b684:	4501                	li	a0,0
        }
    8000b686:	06a103a3          	sb	a0,103(sp)
    }
    8000b68a:	b7cd                	j	8000b66c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h1068366d302d8741E+0x90>
    8000b68c:	7522                	ld	a0,40(sp)
    8000b68e:	4581                	li	a1,0
        }
    8000b690:	06b103a3          	sb	a1,103(sp)
        self.start = self.end.clone();
    8000b694:	0521                	addi	a0,a0,8
    8000b696:	00012097          	auipc	ra,0x12
    8000b69a:	fe6080e7          	jalr	-26(ra) # 8001d67c <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$usize$GT$5clone17h35e6cace0a4ed712E>
    8000b69e:	e02a                	sd	a0,0(sp)
    8000b6a0:	b7e9                	j	8000b66a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h1068366d302d8741E+0x8e>
        }
    8000b6a2:	06714503          	lbu	a0,103(sp)
    8000b6a6:	8905                	andi	a0,a0,1
    8000b6a8:	4581                	li	a1,0
    8000b6aa:	feb501e3          	beq	a0,a1,8000b68c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h1068366d302d8741E+0xb0>
    8000b6ae:	a009                	j	8000b6b0 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h1068366d302d8741E+0xd4>
    8000b6b0:	bff1                	j	8000b68c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h1068366d302d8741E+0xb0>
    8000b6b2:	6526                	ld	a0,72(sp)
    8000b6b4:	4581                	li	a1,0
    8000b6b6:	feb516e3          	bne	a0,a1,8000b6a2 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h1068366d302d8741E+0xc6>
    8000b6ba:	bfc9                	j	8000b68c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h1068366d302d8741E+0xb0>
        self.start = self.end.clone();
    8000b6bc:	6502                	ld	a0,0(sp)
    8000b6be:	75a2                	ld	a1,40(sp)
    8000b6c0:	e188                	sd	a0,0(a1)
    8000b6c2:	4501                	li	a0,0
        None
    8000b6c4:	fc2a                	sd	a0,56(sp)
    }
    8000b6c6:	b75d                	j	8000b66c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h1068366d302d8741E+0x90>

Disassembly of section .text._ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h3de1e189a1a61c83E:

000000008000b6c8 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h3de1e189a1a61c83E>:
    fn nth(&mut self, n: usize) -> Option<A> {
    8000b6c8:	7159                	addi	sp,sp,-112
    8000b6ca:	f486                	sd	ra,104(sp)
    8000b6cc:	f42e                	sd	a1,40(sp)
    8000b6ce:	f82a                	sd	a0,48(sp)
    8000b6d0:	ecaa                	sd	a0,88(sp)
    8000b6d2:	f0ae                	sd	a1,96(sp)
    8000b6d4:	4581                	li	a1,0
        if let Some(plus_n) = Step::forward_checked(self.start.clone(), n) {
    8000b6d6:	04b10ba3          	sb	a1,87(sp)
    8000b6da:	00012097          	auipc	ra,0x12
    8000b6de:	f8c080e7          	jalr	-116(ra) # 8001d666 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17ha1019ce9fdc4d620E>
    8000b6e2:	fc2a                	sd	a0,56(sp)
    8000b6e4:	a009                	j	8000b6e6 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h3de1e189a1a61c83E+0x1e>
    8000b6e6:	75a2                	ld	a1,40(sp)
    8000b6e8:	7562                	ld	a0,56(sp)
    8000b6ea:	4605                	li	a2,1
    8000b6ec:	04c10ba3          	sb	a2,87(sp)
    8000b6f0:	00013097          	auipc	ra,0x13
    8000b6f4:	980080e7          	jalr	-1664(ra) # 8001e070 <_ZN47_$LT$u32$u20$as$u20$core..iter..range..Step$GT$15forward_checked17h56207e7d47bfb4e6E>
    8000b6f8:	c4aa                	sw	a0,72(sp)
    8000b6fa:	c6ae                	sw	a1,76(sp)
    8000b6fc:	a009                	j	8000b6fe <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h3de1e189a1a61c83E+0x36>
    8000b6fe:	4526                	lw	a0,72(sp)
    8000b700:	4581                	li	a1,0
    8000b702:	00b51463          	bne	a0,a1,8000b70a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h3de1e189a1a61c83E+0x42>
    8000b706:	a009                	j	8000b708 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h3de1e189a1a61c83E+0x40>
    8000b708:	a859                	j	8000b79e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h3de1e189a1a61c83E+0xd6>
    8000b70a:	7542                	ld	a0,48(sp)
    8000b70c:	4581                	li	a1,0
    8000b70e:	04b10ba3          	sb	a1,87(sp)
    8000b712:	45b6                	lw	a1,76(sp)
    8000b714:	c8ae                	sw	a1,80(sp)
            if plus_n < self.end {
    8000b716:	00450593          	addi	a1,a0,4
    8000b71a:	0888                	addi	a0,sp,80
    8000b71c:	00010097          	auipc	ra,0x10
    8000b720:	ee2080e7          	jalr	-286(ra) # 8001b5fe <_ZN4core3cmp5impls55_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u32$GT$2lt17h9cf9ff1045241cdfE>
    8000b724:	f02a                	sd	a0,32(sp)
    8000b726:	a009                	j	8000b728 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h3de1e189a1a61c83E+0x60>
    8000b728:	7502                	ld	a0,32(sp)
    8000b72a:	4581                	li	a1,0
    8000b72c:	00b50a63          	beq	a0,a1,8000b740 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h3de1e189a1a61c83E+0x78>
    8000b730:	a009                	j	8000b732 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h3de1e189a1a61c83E+0x6a>
    8000b732:	0888                	addi	a0,sp,80
                self.start = unsafe { Step::forward_unchecked(plus_n.clone(), 1) };
    8000b734:	00012097          	auipc	ra,0x12
    8000b738:	f32080e7          	jalr	-206(ra) # 8001d666 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17ha1019ce9fdc4d620E>
    8000b73c:	ec2a                	sd	a0,24(sp)
    8000b73e:	a011                	j	8000b742 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h3de1e189a1a61c83E+0x7a>
        }
    8000b740:	a811                	j	8000b754 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h3de1e189a1a61c83E+0x8c>
                self.start = unsafe { Step::forward_unchecked(plus_n.clone(), 1) };
    8000b742:	6562                	ld	a0,24(sp)
    8000b744:	4585                	li	a1,1
    8000b746:	00013097          	auipc	ra,0x13
    8000b74a:	97e080e7          	jalr	-1666(ra) # 8001e0c4 <_ZN47_$LT$u32$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17hd82fe8ce42e2d29dE>
    8000b74e:	e82a                	sd	a0,16(sp)
    8000b750:	a009                	j	8000b752 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h3de1e189a1a61c83E+0x8a>
    8000b752:	a801                	j	8000b762 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h3de1e189a1a61c83E+0x9a>
        if let Some(plus_n) = Step::forward_checked(self.start.clone(), n) {
    8000b754:	a0a9                	j	8000b79e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h3de1e189a1a61c83E+0xd6>
        self.start = self.end.clone();
    8000b756:	a889                	j	8000b7a8 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h3de1e189a1a61c83E+0xe0>
    }
    8000b758:	4506                	lw	a0,64(sp)
    8000b75a:	4596                	lw	a1,68(sp)
    8000b75c:	70a6                	ld	ra,104(sp)
    8000b75e:	6165                	addi	sp,sp,112
    8000b760:	8082                	ret
                self.start = unsafe { Step::forward_unchecked(plus_n.clone(), 1) };
    8000b762:	6542                	ld	a0,16(sp)
    8000b764:	75c2                	ld	a1,48(sp)
    8000b766:	c188                	sw	a0,0(a1)
                return Some(plus_n);
    8000b768:	4546                	lw	a0,80(sp)
    8000b76a:	c2aa                	sw	a0,68(sp)
    8000b76c:	4505                	li	a0,1
    8000b76e:	c0aa                	sw	a0,64(sp)
    8000b770:	4501                	li	a0,0
        }
    8000b772:	04a10ba3          	sb	a0,87(sp)
    }
    8000b776:	b7cd                	j	8000b758 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h3de1e189a1a61c83E+0x90>
    8000b778:	7542                	ld	a0,48(sp)
    8000b77a:	4581                	li	a1,0
        }
    8000b77c:	04b10ba3          	sb	a1,87(sp)
        self.start = self.end.clone();
    8000b780:	0511                	addi	a0,a0,4
    8000b782:	00012097          	auipc	ra,0x12
    8000b786:	ee4080e7          	jalr	-284(ra) # 8001d666 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17ha1019ce9fdc4d620E>
    8000b78a:	e42a                	sd	a0,8(sp)
    8000b78c:	b7e9                	j	8000b756 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h3de1e189a1a61c83E+0x8e>
        }
    8000b78e:	05714503          	lbu	a0,87(sp)
    8000b792:	8905                	andi	a0,a0,1
    8000b794:	4581                	li	a1,0
    8000b796:	feb501e3          	beq	a0,a1,8000b778 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h3de1e189a1a61c83E+0xb0>
    8000b79a:	a009                	j	8000b79c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h3de1e189a1a61c83E+0xd4>
    8000b79c:	bff1                	j	8000b778 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h3de1e189a1a61c83E+0xb0>
    8000b79e:	4526                	lw	a0,72(sp)
    8000b7a0:	4581                	li	a1,0
    8000b7a2:	feb516e3          	bne	a0,a1,8000b78e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h3de1e189a1a61c83E+0xc6>
    8000b7a6:	bfc9                	j	8000b778 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h3de1e189a1a61c83E+0xb0>
        self.start = self.end.clone();
    8000b7a8:	6522                	ld	a0,8(sp)
    8000b7aa:	75c2                	ld	a1,48(sp)
    8000b7ac:	c188                	sw	a0,0(a1)
    8000b7ae:	4501                	li	a0,0
        None
    8000b7b0:	c0aa                	sw	a0,64(sp)
    }
    8000b7b2:	b75d                	j	8000b758 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h3de1e189a1a61c83E+0x90>

Disassembly of section .text._ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h1063a80d56ceadabE:

000000008000b7b4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h1063a80d56ceadabE>:
    fn next(&mut self) -> Option<A> {
    8000b7b4:	715d                	addi	sp,sp,-80
    8000b7b6:	e486                	sd	ra,72(sp)
    8000b7b8:	f02a                	sd	a0,32(sp)
    8000b7ba:	fc2a                	sd	a0,56(sp)
        if self.start < self.end {
    8000b7bc:	00250593          	addi	a1,a0,2
    8000b7c0:	00010097          	auipc	ra,0x10
    8000b7c4:	e28080e7          	jalr	-472(ra) # 8001b5e8 <_ZN4core3cmp5impls55_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u16$GT$2lt17h2ba0f37fe46e7bafE>
    8000b7c8:	f42a                	sd	a0,40(sp)
    8000b7ca:	a009                	j	8000b7cc <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h1063a80d56ceadabE+0x18>
    8000b7cc:	7522                	ld	a0,40(sp)
    8000b7ce:	4581                	li	a1,0
    8000b7d0:	00b50a63          	beq	a0,a1,8000b7e4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h1063a80d56ceadabE+0x30>
    8000b7d4:	a009                	j	8000b7d6 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h1063a80d56ceadabE+0x22>
            let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };
    8000b7d6:	7502                	ld	a0,32(sp)
    8000b7d8:	00012097          	auipc	ra,0x12
    8000b7dc:	e82080e7          	jalr	-382(ra) # 8001d65a <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u16$GT$5clone17h7947cab6b7dc7abbE>
    8000b7e0:	ec2a                	sd	a0,24(sp)
    8000b7e2:	a029                	j	8000b7ec <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h1063a80d56ceadabE+0x38>
    8000b7e4:	4501                	li	a0,0
            None
    8000b7e6:	02a11823          	sh	a0,48(sp)
        if self.start < self.end {
    8000b7ea:	a81d                	j	8000b820 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h1063a80d56ceadabE+0x6c>
            let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };
    8000b7ec:	6562                	ld	a0,24(sp)
    8000b7ee:	4585                	li	a1,1
    8000b7f0:	00013097          	auipc	ra,0x13
    8000b7f4:	862080e7          	jalr	-1950(ra) # 8001e052 <_ZN47_$LT$u16$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17h3535906832610659E>
    8000b7f8:	85aa                	mv	a1,a0
    8000b7fa:	e82e                	sd	a1,16(sp)
    8000b7fc:	04a11323          	sh	a0,70(sp)
    8000b800:	a009                	j	8000b802 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h1063a80d56ceadabE+0x4e>
            Some(mem::replace(&mut self.start, n))
    8000b802:	65c2                	ld	a1,16(sp)
    8000b804:	7502                	ld	a0,32(sp)
    8000b806:	00012097          	auipc	ra,0x12
    8000b80a:	8b4080e7          	jalr	-1868(ra) # 8001d0ba <_ZN4core3mem7replace17h57a15db6942c9267E>
    8000b80e:	e42a                	sd	a0,8(sp)
    8000b810:	a009                	j	8000b812 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h1063a80d56ceadabE+0x5e>
    8000b812:	6522                	ld	a0,8(sp)
    8000b814:	02a11923          	sh	a0,50(sp)
    8000b818:	4505                	li	a0,1
    8000b81a:	02a11823          	sh	a0,48(sp)
        if self.start < self.end {
    8000b81e:	a009                	j	8000b820 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h1063a80d56ceadabE+0x6c>
    }
    8000b820:	03011503          	lh	a0,48(sp)
    8000b824:	03211583          	lh	a1,50(sp)
    8000b828:	60a6                	ld	ra,72(sp)
    8000b82a:	6161                	addi	sp,sp,80
    8000b82c:	8082                	ret

Disassembly of section .text._ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17he2f0092c6efc86cdE:

000000008000b82e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17he2f0092c6efc86cdE>:
    fn next(&mut self) -> Option<A> {
    8000b82e:	715d                	addi	sp,sp,-80
    8000b830:	e486                	sd	ra,72(sp)
    8000b832:	f02a                	sd	a0,32(sp)
    8000b834:	fc2a                	sd	a0,56(sp)
        if self.start < self.end {
    8000b836:	00450593          	addi	a1,a0,4
    8000b83a:	00010097          	auipc	ra,0x10
    8000b83e:	dc4080e7          	jalr	-572(ra) # 8001b5fe <_ZN4core3cmp5impls55_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u32$GT$2lt17h9cf9ff1045241cdfE>
    8000b842:	f42a                	sd	a0,40(sp)
    8000b844:	a009                	j	8000b846 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17he2f0092c6efc86cdE+0x18>
    8000b846:	7522                	ld	a0,40(sp)
    8000b848:	4581                	li	a1,0
    8000b84a:	00b50a63          	beq	a0,a1,8000b85e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17he2f0092c6efc86cdE+0x30>
    8000b84e:	a009                	j	8000b850 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17he2f0092c6efc86cdE+0x22>
            let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };
    8000b850:	7502                	ld	a0,32(sp)
    8000b852:	00012097          	auipc	ra,0x12
    8000b856:	e14080e7          	jalr	-492(ra) # 8001d666 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17ha1019ce9fdc4d620E>
    8000b85a:	ec2a                	sd	a0,24(sp)
    8000b85c:	a021                	j	8000b864 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17he2f0092c6efc86cdE+0x36>
    8000b85e:	4501                	li	a0,0
            None
    8000b860:	d82a                	sw	a0,48(sp)
        if self.start < self.end {
    8000b862:	a805                	j	8000b892 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17he2f0092c6efc86cdE+0x64>
            let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };
    8000b864:	6562                	ld	a0,24(sp)
    8000b866:	4585                	li	a1,1
    8000b868:	00013097          	auipc	ra,0x13
    8000b86c:	85c080e7          	jalr	-1956(ra) # 8001e0c4 <_ZN47_$LT$u32$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17hd82fe8ce42e2d29dE>
    8000b870:	85aa                	mv	a1,a0
    8000b872:	e82e                	sd	a1,16(sp)
    8000b874:	c2aa                	sw	a0,68(sp)
    8000b876:	a009                	j	8000b878 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17he2f0092c6efc86cdE+0x4a>
            Some(mem::replace(&mut self.start, n))
    8000b878:	65c2                	ld	a1,16(sp)
    8000b87a:	7502                	ld	a0,32(sp)
    8000b87c:	00012097          	auipc	ra,0x12
    8000b880:	990080e7          	jalr	-1648(ra) # 8001d20c <_ZN4core3mem7replace17hcd75ca48f5a8a8f5E>
    8000b884:	e42a                	sd	a0,8(sp)
    8000b886:	a009                	j	8000b888 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17he2f0092c6efc86cdE+0x5a>
    8000b888:	6522                	ld	a0,8(sp)
    8000b88a:	da2a                	sw	a0,52(sp)
    8000b88c:	4505                	li	a0,1
    8000b88e:	d82a                	sw	a0,48(sp)
        if self.start < self.end {
    8000b890:	a009                	j	8000b892 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17he2f0092c6efc86cdE+0x64>
    }
    8000b892:	5542                	lw	a0,48(sp)
    8000b894:	55d2                	lw	a1,52(sp)
    8000b896:	60a6                	ld	ra,72(sp)
    8000b898:	6161                	addi	sp,sp,80
    8000b89a:	8082                	ret

Disassembly of section .text._ZN4core4iter5range125_$LT$impl$u20$core..iter..traits..double_ended..DoubleEndedIterator$u20$for$u20$core..ops..range..RangeInclusive$LT$A$GT$$GT$9next_back17h6e80df4b43a95866E:

000000008000b89c <_ZN4core4iter5range125_$LT$impl$u20$core..iter..traits..double_ended..DoubleEndedIterator$u20$for$u20$core..ops..range..RangeInclusive$LT$A$GT$$GT$9next_back17h6e80df4b43a95866E>:
}

#[stable(feature = "inclusive_range", since = "1.26.0")]
impl<A: Step> DoubleEndedIterator for ops::RangeInclusive<A> {
    #[inline]
    fn next_back(&mut self) -> Option<A> {
    8000b89c:	711d                	addi	sp,sp,-96
    8000b89e:	ec86                	sd	ra,88(sp)
    8000b8a0:	ec2a                	sd	a0,24(sp)
    8000b8a2:	e0aa                	sd	a0,64(sp)
        if self.is_empty() {
    8000b8a4:	00000097          	auipc	ra,0x0
    8000b8a8:	cec080e7          	jalr	-788(ra) # 8000b590 <_ZN4core3ops5range25RangeInclusive$LT$Idx$GT$8is_empty17h217535e9c22b3affE>
    8000b8ac:	f02a                	sd	a0,32(sp)
    8000b8ae:	a009                	j	8000b8b0 <_ZN4core4iter5range125_$LT$impl$u20$core..iter..traits..double_ended..DoubleEndedIterator$u20$for$u20$core..ops..range..RangeInclusive$LT$A$GT$$GT$9next_back17h6e80df4b43a95866E+0x14>
    8000b8b0:	7502                	ld	a0,32(sp)
    8000b8b2:	4581                	li	a1,0
    8000b8b4:	00b50663          	beq	a0,a1,8000b8c0 <_ZN4core4iter5range125_$LT$impl$u20$core..iter..traits..double_ended..DoubleEndedIterator$u20$for$u20$core..ops..range..RangeInclusive$LT$A$GT$$GT$9next_back17h6e80df4b43a95866E+0x24>
    8000b8b8:	a009                	j	8000b8ba <_ZN4core4iter5range125_$LT$impl$u20$core..iter..traits..double_ended..DoubleEndedIterator$u20$for$u20$core..ops..range..RangeInclusive$LT$A$GT$$GT$9next_back17h6e80df4b43a95866E+0x1e>
    8000b8ba:	4501                	li	a0,0
            return None;
    8000b8bc:	f42a                	sd	a0,40(sp)
            mem::replace(&mut self.end, n)
        } else {
            self.exhausted = true;
            self.end.clone()
        })
    }
    8000b8be:	a8bd                	j	8000b93c <_ZN4core4iter5range125_$LT$impl$u20$core..iter..traits..double_ended..DoubleEndedIterator$u20$for$u20$core..ops..range..RangeInclusive$LT$A$GT$$GT$9next_back17h6e80df4b43a95866E+0xa0>
        let is_iterating = self.start < self.end;
    8000b8c0:	6562                	ld	a0,24(sp)
    8000b8c2:	00850593          	addi	a1,a0,8
    8000b8c6:	00010097          	auipc	ra,0x10
    8000b8ca:	d8e080e7          	jalr	-626(ra) # 8001b654 <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17ha09858e1dc8f460eE>
    8000b8ce:	85aa                	mv	a1,a0
    8000b8d0:	e82e                	sd	a1,16(sp)
    8000b8d2:	04a107a3          	sb	a0,79(sp)
    8000b8d6:	a009                	j	8000b8d8 <_ZN4core4iter5range125_$LT$impl$u20$core..iter..traits..double_ended..DoubleEndedIterator$u20$for$u20$core..ops..range..RangeInclusive$LT$A$GT$$GT$9next_back17h6e80df4b43a95866E+0x3c>
    8000b8d8:	6542                	ld	a0,16(sp)
    8000b8da:	4581                	li	a1,0
        Some(if is_iterating {
    8000b8dc:	00b50b63          	beq	a0,a1,8000b8f2 <_ZN4core4iter5range125_$LT$impl$u20$core..iter..traits..double_ended..DoubleEndedIterator$u20$for$u20$core..ops..range..RangeInclusive$LT$A$GT$$GT$9next_back17h6e80df4b43a95866E+0x56>
    8000b8e0:	a009                	j	8000b8e2 <_ZN4core4iter5range125_$LT$impl$u20$core..iter..traits..double_ended..DoubleEndedIterator$u20$for$u20$core..ops..range..RangeInclusive$LT$A$GT$$GT$9next_back17h6e80df4b43a95866E+0x46>
            let n = unsafe { Step::backward_unchecked(self.end.clone(), 1) };
    8000b8e2:	6562                	ld	a0,24(sp)
    8000b8e4:	0521                	addi	a0,a0,8
    8000b8e6:	00012097          	auipc	ra,0x12
    8000b8ea:	d96080e7          	jalr	-618(ra) # 8001d67c <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$usize$GT$5clone17h35e6cace0a4ed712E>
    8000b8ee:	e42a                	sd	a0,8(sp)
    8000b8f0:	a821                	j	8000b908 <_ZN4core4iter5range125_$LT$impl$u20$core..iter..traits..double_ended..DoubleEndedIterator$u20$for$u20$core..ops..range..RangeInclusive$LT$A$GT$$GT$9next_back17h6e80df4b43a95866E+0x6c>
    8000b8f2:	6562                	ld	a0,24(sp)
    8000b8f4:	4585                	li	a1,1
            self.exhausted = true;
    8000b8f6:	00b50823          	sb	a1,16(a0)
            self.end.clone()
    8000b8fa:	0521                	addi	a0,a0,8
    8000b8fc:	00012097          	auipc	ra,0x12
    8000b900:	d80080e7          	jalr	-640(ra) # 8001d67c <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$usize$GT$5clone17h35e6cace0a4ed712E>
    8000b904:	fc2a                	sd	a0,56(sp)
    8000b906:	a02d                	j	8000b930 <_ZN4core4iter5range125_$LT$impl$u20$core..iter..traits..double_ended..DoubleEndedIterator$u20$for$u20$core..ops..range..RangeInclusive$LT$A$GT$$GT$9next_back17h6e80df4b43a95866E+0x94>
            let n = unsafe { Step::backward_unchecked(self.end.clone(), 1) };
    8000b908:	6522                	ld	a0,8(sp)
    8000b90a:	4585                	li	a1,1
    8000b90c:	00013097          	auipc	ra,0x13
    8000b910:	82a080e7          	jalr	-2006(ra) # 8001e136 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$18backward_unchecked17h149195b805b2849bE>
    8000b914:	85aa                	mv	a1,a0
    8000b916:	e02e                	sd	a1,0(sp)
    8000b918:	e8aa                	sd	a0,80(sp)
    8000b91a:	a009                	j	8000b91c <_ZN4core4iter5range125_$LT$impl$u20$core..iter..traits..double_ended..DoubleEndedIterator$u20$for$u20$core..ops..range..RangeInclusive$LT$A$GT$$GT$9next_back17h6e80df4b43a95866E+0x80>
            mem::replace(&mut self.end, n)
    8000b91c:	6582                	ld	a1,0(sp)
    8000b91e:	6562                	ld	a0,24(sp)
    8000b920:	0521                	addi	a0,a0,8
    8000b922:	00014097          	auipc	ra,0x14
    8000b926:	e06080e7          	jalr	-506(ra) # 8001f728 <_ZN4core3mem7replace17h718d2b5d4e2666b3E>
    8000b92a:	fc2a                	sd	a0,56(sp)
    8000b92c:	a009                	j	8000b92e <_ZN4core4iter5range125_$LT$impl$u20$core..iter..traits..double_ended..DoubleEndedIterator$u20$for$u20$core..ops..range..RangeInclusive$LT$A$GT$$GT$9next_back17h6e80df4b43a95866E+0x92>
        Some(if is_iterating {
    8000b92e:	a011                	j	8000b932 <_ZN4core4iter5range125_$LT$impl$u20$core..iter..traits..double_ended..DoubleEndedIterator$u20$for$u20$core..ops..range..RangeInclusive$LT$A$GT$$GT$9next_back17h6e80df4b43a95866E+0x96>
    8000b930:	a009                	j	8000b932 <_ZN4core4iter5range125_$LT$impl$u20$core..iter..traits..double_ended..DoubleEndedIterator$u20$for$u20$core..ops..range..RangeInclusive$LT$A$GT$$GT$9next_back17h6e80df4b43a95866E+0x96>
    8000b932:	7562                	ld	a0,56(sp)
    8000b934:	f82a                	sd	a0,48(sp)
    8000b936:	4505                	li	a0,1
    8000b938:	f42a                	sd	a0,40(sp)
    }
    8000b93a:	a009                	j	8000b93c <_ZN4core4iter5range125_$LT$impl$u20$core..iter..traits..double_ended..DoubleEndedIterator$u20$for$u20$core..ops..range..RangeInclusive$LT$A$GT$$GT$9next_back17h6e80df4b43a95866E+0xa0>
    8000b93c:	7522                	ld	a0,40(sp)
    8000b93e:	75c2                	ld	a1,48(sp)
    8000b940:	60e6                	ld	ra,88(sp)
    8000b942:	6125                	addi	sp,sp,96
    8000b944:	8082                	ret

Disassembly of section .text._ZN4core4iter6traits8iterator8Iterator3rev17h6d9067942ad94ebeE:

000000008000b946 <_ZN4core4iter6traits8iterator8Iterator3rev17h6d9067942ad94ebeE>:
    fn rev(self) -> Rev<Self>
    8000b946:	1101                	addi	sp,sp,-32
        Rev::new(self)
    8000b948:	ec06                	sd	ra,24(sp)
    8000b94a:	6990                	ld	a2,16(a1)
    8000b94c:	e832                	sd	a2,16(sp)
    8000b94e:	6590                	ld	a2,8(a1)
    8000b950:	e432                	sd	a2,8(sp)
    8000b952:	618c                	ld	a1,0(a1)
    8000b954:	e02e                	sd	a1,0(sp)
    8000b956:	858a                	mv	a1,sp
    8000b958:	00010097          	auipc	ra,0x10
    8000b95c:	d0e080e7          	jalr	-754(ra) # 8001b666 <_ZN4core4iter8adapters3rev12Rev$LT$T$GT$3new17h2d10195152fc735dE>
    8000b960:	a009                	j	8000b962 <_ZN4core4iter6traits8iterator8Iterator3rev17h6d9067942ad94ebeE+0x1c>
    }
    8000b962:	60e2                	ld	ra,24(sp)
    8000b964:	6105                	addi	sp,sp,32
    8000b966:	8082                	ret

Disassembly of section .text._ZN4core4iter6traits8iterator8Iterator7step_by17ha7dfda23787d2a26E:

000000008000b968 <_ZN4core4iter6traits8iterator8Iterator7step_by17ha7dfda23787d2a26E>:
    fn step_by(self, step: usize) -> StepBy<Self>
    8000b968:	1101                	addi	sp,sp,-32
    8000b96a:	ec06                	sd	ra,24(sp)
    8000b96c:	c42e                	sw	a1,8(sp)
    8000b96e:	c632                	sw	a2,12(sp)
    8000b970:	e836                	sd	a3,16(sp)
        StepBy::new(self, step)
    8000b972:	00011097          	auipc	ra,0x11
    8000b976:	416080e7          	jalr	1046(ra) # 8001cd88 <_ZN4core4iter8adapters7step_by15StepBy$LT$I$GT$3new17h6692f5ddcbcdc828E>
    8000b97a:	a009                	j	8000b97c <_ZN4core4iter6traits8iterator8Iterator7step_by17ha7dfda23787d2a26E+0x14>
    }
    8000b97c:	60e2                	ld	ra,24(sp)
    8000b97e:	6105                	addi	sp,sp,32
    8000b980:	8082                	ret

Disassembly of section .text._ZN4core4iter6traits8iterator8Iterator7step_by17hcae6c74a630fccd6E:

000000008000b982 <_ZN4core4iter6traits8iterator8Iterator7step_by17hcae6c74a630fccd6E>:
    fn step_by(self, step: usize) -> StepBy<Self>
    8000b982:	1101                	addi	sp,sp,-32
    8000b984:	ec06                	sd	ra,24(sp)
    8000b986:	e02e                	sd	a1,0(sp)
    8000b988:	e432                	sd	a2,8(sp)
    8000b98a:	e836                	sd	a3,16(sp)
        StepBy::new(self, step)
    8000b98c:	00011097          	auipc	ra,0x11
    8000b990:	3ae080e7          	jalr	942(ra) # 8001cd3a <_ZN4core4iter8adapters7step_by15StepBy$LT$I$GT$3new17h4faa8304472101dfE>
    8000b994:	a009                	j	8000b996 <_ZN4core4iter6traits8iterator8Iterator7step_by17hcae6c74a630fccd6E+0x14>
    }
    8000b996:	60e2                	ld	ra,24(sp)
    8000b998:	6105                	addi	sp,sp,32
    8000b99a:	8082                	ret

Disassembly of section .text._ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h2819071fbc006758E:

000000008000b99c <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h2819071fbc006758E>:
    fn into_iter(self) -> I {
    8000b99c:	1141                	addi	sp,sp,-16
    8000b99e:	c42a                	sw	a0,8(sp)
    8000b9a0:	c62e                	sw	a1,12(sp)
    }
    8000b9a2:	0141                	addi	sp,sp,16
    8000b9a4:	8082                	ret

Disassembly of section .text._ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he12a3ecdd35a2d32E:

000000008000b9a6 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he12a3ecdd35a2d32E>:
    fn into_iter(self) -> I {
    8000b9a6:	1141                	addi	sp,sp,-16
    8000b9a8:	00a11423          	sh	a0,8(sp)
    8000b9ac:	00b11523          	sh	a1,10(sp)
    }
    8000b9b0:	0141                	addi	sp,sp,16
    8000b9b2:	8082                	ret

Disassembly of section .text._ZN97_$LT$core..ops..range..RangeFull$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hf4f8ccbc08517323E:

000000008000b9b4 <_ZN97_$LT$core..ops..range..RangeFull$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hf4f8ccbc08517323E>:
    fn index(self, slice: &[T]) -> &[T] {
        slice
    }

    #[inline]
    fn index_mut(self, slice: &mut [T]) -> &mut [T] {
    8000b9b4:	1101                	addi	sp,sp,-32
    8000b9b6:	e82a                	sd	a0,16(sp)
    8000b9b8:	ec2e                	sd	a1,24(sp)
        slice
    }
    8000b9ba:	6105                	addi	sp,sp,32
    8000b9bc:	8082                	ret

Disassembly of section .text._ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h2e645b443ebf2dc7E:

000000008000b9be <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h2e645b443ebf2dc7E>:
    fn from(t: T) -> T {
    8000b9be:	1141                	addi	sp,sp,-16
    }
    8000b9c0:	0141                	addi	sp,sp,16
    8000b9c2:	8082                	ret

Disassembly of section .text._ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h6f3e3843c20d184aE:

000000008000b9c4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h6f3e3843c20d184aE>:
    fn from(t: T) -> T {
    8000b9c4:	1141                	addi	sp,sp,-16
    8000b9c6:	e02a                	sd	a0,0(sp)
    8000b9c8:	e42e                	sd	a1,8(sp)
    }
    8000b9ca:	0141                	addi	sp,sp,16
    8000b9cc:	8082                	ret

Disassembly of section .text._ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h78163b68f4cb081dE:

000000008000b9ce <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h78163b68f4cb081dE>:
    fn from(t: T) -> T {
    8000b9ce:	1141                	addi	sp,sp,-16
    8000b9d0:	e42a                	sd	a0,8(sp)
    }
    8000b9d2:	0141                	addi	sp,sp,16
    8000b9d4:	8082                	ret

Disassembly of section .text._ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hbecc82c6a2b59487E:

000000008000b9d6 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hbecc82c6a2b59487E>:
    fn into(self) -> U {
    8000b9d6:	1101                	addi	sp,sp,-32
    8000b9d8:	ec06                	sd	ra,24(sp)
    8000b9da:	e82a                	sd	a0,16(sp)
        U::from(self)
    8000b9dc:	00000097          	auipc	ra,0x0
    8000b9e0:	ff2080e7          	jalr	-14(ra) # 8000b9ce <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h78163b68f4cb081dE>
    8000b9e4:	e42a                	sd	a0,8(sp)
    8000b9e6:	a009                	j	8000b9e8 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hbecc82c6a2b59487E+0x12>
    }
    8000b9e8:	6522                	ld	a0,8(sp)
    8000b9ea:	60e2                	ld	ra,24(sp)
    8000b9ec:	6105                	addi	sp,sp,32
    8000b9ee:	8082                	ret

Disassembly of section .text._ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17heab1f3c6250d8edbE:

000000008000b9f0 <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17heab1f3c6250d8edbE>:
where
    U: Into<T>,
{
    type Error = Infallible;

    fn try_from(value: U) -> Result<Self, Self::Error> {
    8000b9f0:	1101                	addi	sp,sp,-32
    8000b9f2:	ec06                	sd	ra,24(sp)
    8000b9f4:	e82a                	sd	a0,16(sp)
        Ok(U::into(value))
    8000b9f6:	00000097          	auipc	ra,0x0
    8000b9fa:	fe0080e7          	jalr	-32(ra) # 8000b9d6 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hbecc82c6a2b59487E>
    8000b9fe:	e02a                	sd	a0,0(sp)
    8000ba00:	a009                	j	8000ba02 <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17heab1f3c6250d8edbE+0x12>
    8000ba02:	6502                	ld	a0,0(sp)
    8000ba04:	e42a                	sd	a0,8(sp)
    }
    8000ba06:	60e2                	ld	ra,24(sp)
    8000ba08:	6105                	addi	sp,sp,32
    8000ba0a:	8082                	ret

Disassembly of section .text._ZN53_$LT$T$u20$as$u20$core..convert..TryInto$LT$U$GT$$GT$8try_into17h168ef583366b1bfdE:

000000008000ba0c <_ZN53_$LT$T$u20$as$u20$core..convert..TryInto$LT$U$GT$$GT$8try_into17h168ef583366b1bfdE>:
    fn try_into(self) -> Result<U, U::Error> {
    8000ba0c:	1101                	addi	sp,sp,-32
    8000ba0e:	ec06                	sd	ra,24(sp)
    8000ba10:	e82a                	sd	a0,16(sp)
        U::try_from(self)
    8000ba12:	00013097          	auipc	ra,0x13
    8000ba16:	856080e7          	jalr	-1962(ra) # 8001e268 <_ZN4core7convert3num18ptr_try_from_impls69_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u32$GT$8try_from17hf11680289e05cb5fE>
    8000ba1a:	e02a                	sd	a0,0(sp)
    8000ba1c:	e42e                	sd	a1,8(sp)
    8000ba1e:	a009                	j	8000ba20 <_ZN53_$LT$T$u20$as$u20$core..convert..TryInto$LT$U$GT$$GT$8try_into17h168ef583366b1bfdE+0x14>
    }
    8000ba20:	65a2                	ld	a1,8(sp)
    8000ba22:	6502                	ld	a0,0(sp)
    8000ba24:	60e2                	ld	ra,24(sp)
    8000ba26:	6105                	addi	sp,sp,32
    8000ba28:	8082                	ret

Disassembly of section .text._ZN53_$LT$T$u20$as$u20$core..convert..TryInto$LT$U$GT$$GT$8try_into17h79444d549eeb58faE:

000000008000ba2a <_ZN53_$LT$T$u20$as$u20$core..convert..TryInto$LT$U$GT$$GT$8try_into17h79444d549eeb58faE>:
    fn try_into(self) -> Result<U, U::Error> {
    8000ba2a:	1101                	addi	sp,sp,-32
    8000ba2c:	ec06                	sd	ra,24(sp)
    8000ba2e:	e82a                	sd	a0,16(sp)
        U::try_from(self)
    8000ba30:	00013097          	auipc	ra,0x13
    8000ba34:	806080e7          	jalr	-2042(ra) # 8001e236 <_ZN4core7convert3num18ptr_try_from_impls69_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u16$GT$8try_from17h9165284bf6d163adE>
    8000ba38:	e02a                	sd	a0,0(sp)
    8000ba3a:	e42e                	sd	a1,8(sp)
    8000ba3c:	a009                	j	8000ba3e <_ZN53_$LT$T$u20$as$u20$core..convert..TryInto$LT$U$GT$$GT$8try_into17h79444d549eeb58faE+0x14>
    }
    8000ba3e:	65a2                	ld	a1,8(sp)
    8000ba40:	6502                	ld	a0,0(sp)
    8000ba42:	60e2                	ld	ra,24(sp)
    8000ba44:	6105                	addi	sp,sp,32
    8000ba46:	8082                	ret

Disassembly of section .text._ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17h0d12a57a76d0850fE:

000000008000ba48 <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17h0d12a57a76d0850fE>:
    ///
    /// # Safety
    ///
    /// `ptr` must be non-null.
    #[inline]
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
    8000ba48:	1141                	addi	sp,sp,-16
    8000ba4a:	e42a                	sd	a0,8(sp)
        // SAFETY: the caller must guarantee that `ptr` is non-null.
        unsafe { Unique { pointer: ptr as _, _marker: PhantomData } }
    8000ba4c:	e02a                	sd	a0,0(sp)
    }
    8000ba4e:	0141                	addi	sp,sp,16
    8000ba50:	8082                	ret

Disassembly of section .text._ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17h20d3eb97294874feE:

000000008000ba52 <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17h20d3eb97294874feE>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
    8000ba52:	1141                	addi	sp,sp,-16
    8000ba54:	e42a                	sd	a0,8(sp)
        unsafe { Unique { pointer: ptr as _, _marker: PhantomData } }
    8000ba56:	e02a                	sd	a0,0(sp)
    }
    8000ba58:	0141                	addi	sp,sp,16
    8000ba5a:	8082                	ret

Disassembly of section .text._ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17h21d50a45a5a242bbE:

000000008000ba5c <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17h21d50a45a5a242bbE>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
    8000ba5c:	1141                	addi	sp,sp,-16
    8000ba5e:	e42a                	sd	a0,8(sp)
        unsafe { Unique { pointer: ptr as _, _marker: PhantomData } }
    8000ba60:	e02a                	sd	a0,0(sp)
    }
    8000ba62:	0141                	addi	sp,sp,16
    8000ba64:	8082                	ret

Disassembly of section .text._ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17h620617f59cddd065E:

000000008000ba66 <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17h620617f59cddd065E>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
    8000ba66:	1141                	addi	sp,sp,-16
    8000ba68:	e42a                	sd	a0,8(sp)
        unsafe { Unique { pointer: ptr as _, _marker: PhantomData } }
    8000ba6a:	e02a                	sd	a0,0(sp)
    }
    8000ba6c:	0141                	addi	sp,sp,16
    8000ba6e:	8082                	ret

Disassembly of section .text._ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17h802ec2c42c5b54adE:

000000008000ba70 <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17h802ec2c42c5b54adE>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
    8000ba70:	1141                	addi	sp,sp,-16
    8000ba72:	e42a                	sd	a0,8(sp)
        unsafe { Unique { pointer: ptr as _, _marker: PhantomData } }
    8000ba74:	e02a                	sd	a0,0(sp)
    }
    8000ba76:	0141                	addi	sp,sp,16
    8000ba78:	8082                	ret

Disassembly of section .text._ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17ha8b21015e9411210E:

000000008000ba7a <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17ha8b21015e9411210E>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
    8000ba7a:	1141                	addi	sp,sp,-16
    8000ba7c:	e42a                	sd	a0,8(sp)
        unsafe { Unique { pointer: ptr as _, _marker: PhantomData } }
    8000ba7e:	e02a                	sd	a0,0(sp)
    }
    8000ba80:	0141                	addi	sp,sp,16
    8000ba82:	8082                	ret

Disassembly of section .text._ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17hb5a9e5725254bb89E:

000000008000ba84 <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17hb5a9e5725254bb89E>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
    8000ba84:	1141                	addi	sp,sp,-16
    8000ba86:	e42a                	sd	a0,8(sp)
        unsafe { Unique { pointer: ptr as _, _marker: PhantomData } }
    8000ba88:	e02a                	sd	a0,0(sp)
    }
    8000ba8a:	0141                	addi	sp,sp,16
    8000ba8c:	8082                	ret

Disassembly of section .text._ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17hcb5e8bc8059451d1E:

000000008000ba8e <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17hcb5e8bc8059451d1E>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
    8000ba8e:	1141                	addi	sp,sp,-16
    8000ba90:	e42a                	sd	a0,8(sp)
        unsafe { Unique { pointer: ptr as _, _marker: PhantomData } }
    8000ba92:	e02a                	sd	a0,0(sp)
    }
    8000ba94:	0141                	addi	sp,sp,16
    8000ba96:	8082                	ret

Disassembly of section .text._ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17he1ff65b054541f9aE:

000000008000ba98 <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17he1ff65b054541f9aE>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
    8000ba98:	1141                	addi	sp,sp,-16
    8000ba9a:	e42a                	sd	a0,8(sp)
        unsafe { Unique { pointer: ptr as _, _marker: PhantomData } }
    8000ba9c:	e02a                	sd	a0,0(sp)
    }
    8000ba9e:	0141                	addi	sp,sp,16
    8000baa0:	8082                	ret

Disassembly of section .text._ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17he38725f417943878E:

000000008000baa2 <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17he38725f417943878E>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
    8000baa2:	1141                	addi	sp,sp,-16
    8000baa4:	e42a                	sd	a0,8(sp)
        unsafe { Unique { pointer: ptr as _, _marker: PhantomData } }
    8000baa6:	e02a                	sd	a0,0(sp)
    }
    8000baa8:	0141                	addi	sp,sp,16
    8000baaa:	8082                	ret

Disassembly of section .text._ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17hffcbfd9b9a15cee1E:

000000008000baac <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17hffcbfd9b9a15cee1E>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
    8000baac:	1141                	addi	sp,sp,-16
    8000baae:	e42a                	sd	a0,8(sp)
        unsafe { Unique { pointer: ptr as _, _marker: PhantomData } }
    8000bab0:	e02a                	sd	a0,0(sp)
    }
    8000bab2:	0141                	addi	sp,sp,16
    8000bab4:	8082                	ret

Disassembly of section .text._ZN4core3ptr6unique15Unique$LT$T$GT$4cast17h0df13c1b672cf8a2E:

000000008000bab6 <_ZN4core3ptr6unique15Unique$LT$T$GT$4cast17h0df13c1b672cf8a2E>:
        unsafe { &mut *self.as_ptr() }
    }

    /// Casts to a pointer of another type.
    #[inline]
    pub const fn cast<U>(self) -> Unique<U> {
    8000bab6:	1101                	addi	sp,sp,-32
    8000bab8:	ec06                	sd	ra,24(sp)
    8000baba:	e82a                	sd	a0,16(sp)
        // SAFETY: Unique::new_unchecked() creates a new unique and needs
        // the given pointer to not be null.
        // Since we are passing self as a pointer, it cannot be null.
        unsafe { Unique::new_unchecked(self.as_ptr() as *mut U) }
    8000babc:	00000097          	auipc	ra,0x0
    8000bac0:	09a080e7          	jalr	154(ra) # 8000bb56 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h98e034e84104bb8fE>
    8000bac4:	e42a                	sd	a0,8(sp)
    8000bac6:	a009                	j	8000bac8 <_ZN4core3ptr6unique15Unique$LT$T$GT$4cast17h0df13c1b672cf8a2E+0x12>
    8000bac8:	6522                	ld	a0,8(sp)
    8000baca:	00000097          	auipc	ra,0x0
    8000bace:	f9c080e7          	jalr	-100(ra) # 8000ba66 <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17h620617f59cddd065E>
    8000bad2:	e02a                	sd	a0,0(sp)
    8000bad4:	a009                	j	8000bad6 <_ZN4core3ptr6unique15Unique$LT$T$GT$4cast17h0df13c1b672cf8a2E+0x20>
    }
    8000bad6:	6502                	ld	a0,0(sp)
    8000bad8:	60e2                	ld	ra,24(sp)
    8000bada:	6105                	addi	sp,sp,32
    8000badc:	8082                	ret

Disassembly of section .text._ZN4core3ptr6unique15Unique$LT$T$GT$4cast17h63879fc8651a3d59E:

000000008000bade <_ZN4core3ptr6unique15Unique$LT$T$GT$4cast17h63879fc8651a3d59E>:
    pub const fn cast<U>(self) -> Unique<U> {
    8000bade:	1101                	addi	sp,sp,-32
    8000bae0:	ec06                	sd	ra,24(sp)
    8000bae2:	e82a                	sd	a0,16(sp)
        unsafe { Unique::new_unchecked(self.as_ptr() as *mut U) }
    8000bae4:	00000097          	auipc	ra,0x0
    8000bae8:	092080e7          	jalr	146(ra) # 8000bb76 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17hc428d38b809aa8c2E>
    8000baec:	e42a                	sd	a0,8(sp)
    8000baee:	a009                	j	8000baf0 <_ZN4core3ptr6unique15Unique$LT$T$GT$4cast17h63879fc8651a3d59E+0x12>
    8000baf0:	6522                	ld	a0,8(sp)
    8000baf2:	00000097          	auipc	ra,0x0
    8000baf6:	f74080e7          	jalr	-140(ra) # 8000ba66 <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17h620617f59cddd065E>
    8000bafa:	e02a                	sd	a0,0(sp)
    8000bafc:	a009                	j	8000bafe <_ZN4core3ptr6unique15Unique$LT$T$GT$4cast17h63879fc8651a3d59E+0x20>
    }
    8000bafe:	6502                	ld	a0,0(sp)
    8000bb00:	60e2                	ld	ra,24(sp)
    8000bb02:	6105                	addi	sp,sp,32
    8000bb04:	8082                	ret

Disassembly of section .text._ZN4core3ptr6unique15Unique$LT$T$GT$4cast17h6eaa84e8f5e764c2E:

000000008000bb06 <_ZN4core3ptr6unique15Unique$LT$T$GT$4cast17h6eaa84e8f5e764c2E>:
    pub const fn cast<U>(self) -> Unique<U> {
    8000bb06:	1101                	addi	sp,sp,-32
    8000bb08:	ec06                	sd	ra,24(sp)
    8000bb0a:	e82a                	sd	a0,16(sp)
        unsafe { Unique::new_unchecked(self.as_ptr() as *mut U) }
    8000bb0c:	00000097          	auipc	ra,0x0
    8000bb10:	052080e7          	jalr	82(ra) # 8000bb5e <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17hb36dfd1ef749fd26E>
    8000bb14:	e42a                	sd	a0,8(sp)
    8000bb16:	a009                	j	8000bb18 <_ZN4core3ptr6unique15Unique$LT$T$GT$4cast17h6eaa84e8f5e764c2E+0x12>
    8000bb18:	6522                	ld	a0,8(sp)
    8000bb1a:	00000097          	auipc	ra,0x0
    8000bb1e:	f4c080e7          	jalr	-180(ra) # 8000ba66 <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17h620617f59cddd065E>
    8000bb22:	e02a                	sd	a0,0(sp)
    8000bb24:	a009                	j	8000bb26 <_ZN4core3ptr6unique15Unique$LT$T$GT$4cast17h6eaa84e8f5e764c2E+0x20>
    }
    8000bb26:	6502                	ld	a0,0(sp)
    8000bb28:	60e2                	ld	ra,24(sp)
    8000bb2a:	6105                	addi	sp,sp,32
    8000bb2c:	8082                	ret

Disassembly of section .text._ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h3d727d33388c5225E:

000000008000bb2e <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h3d727d33388c5225E>:
    pub const fn as_ptr(self) -> *mut T {
    8000bb2e:	1141                	addi	sp,sp,-16
    8000bb30:	e42a                	sd	a0,8(sp)
    }
    8000bb32:	0141                	addi	sp,sp,16
    8000bb34:	8082                	ret

Disassembly of section .text._ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h43259d2d16140eb2E:

000000008000bb36 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h43259d2d16140eb2E>:
    pub const fn as_ptr(self) -> *mut T {
    8000bb36:	1141                	addi	sp,sp,-16
    8000bb38:	e42a                	sd	a0,8(sp)
    }
    8000bb3a:	0141                	addi	sp,sp,16
    8000bb3c:	8082                	ret

Disassembly of section .text._ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h54727a4650ef71dfE:

000000008000bb3e <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h54727a4650ef71dfE>:
    pub const fn as_ptr(self) -> *mut T {
    8000bb3e:	1141                	addi	sp,sp,-16
    8000bb40:	e42a                	sd	a0,8(sp)
    }
    8000bb42:	0141                	addi	sp,sp,16
    8000bb44:	8082                	ret

Disassembly of section .text._ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h7e93959e8a601ed4E:

000000008000bb46 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h7e93959e8a601ed4E>:
    pub const fn as_ptr(self) -> *mut T {
    8000bb46:	1141                	addi	sp,sp,-16
    8000bb48:	e42a                	sd	a0,8(sp)
    }
    8000bb4a:	0141                	addi	sp,sp,16
    8000bb4c:	8082                	ret

Disassembly of section .text._ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h9702a6a3d13a07b5E:

000000008000bb4e <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h9702a6a3d13a07b5E>:
    pub const fn as_ptr(self) -> *mut T {
    8000bb4e:	1141                	addi	sp,sp,-16
    8000bb50:	e42a                	sd	a0,8(sp)
    }
    8000bb52:	0141                	addi	sp,sp,16
    8000bb54:	8082                	ret

Disassembly of section .text._ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h98e034e84104bb8fE:

000000008000bb56 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h98e034e84104bb8fE>:
    pub const fn as_ptr(self) -> *mut T {
    8000bb56:	1141                	addi	sp,sp,-16
    8000bb58:	e42a                	sd	a0,8(sp)
    }
    8000bb5a:	0141                	addi	sp,sp,16
    8000bb5c:	8082                	ret

Disassembly of section .text._ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17hb36dfd1ef749fd26E:

000000008000bb5e <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17hb36dfd1ef749fd26E>:
    pub const fn as_ptr(self) -> *mut T {
    8000bb5e:	1141                	addi	sp,sp,-16
    8000bb60:	e42a                	sd	a0,8(sp)
    }
    8000bb62:	0141                	addi	sp,sp,16
    8000bb64:	8082                	ret

Disassembly of section .text._ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17hb43ff2a43bd415faE:

000000008000bb66 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17hb43ff2a43bd415faE>:
    pub const fn as_ptr(self) -> *mut T {
    8000bb66:	1141                	addi	sp,sp,-16
    8000bb68:	e42a                	sd	a0,8(sp)
    }
    8000bb6a:	0141                	addi	sp,sp,16
    8000bb6c:	8082                	ret

Disassembly of section .text._ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17hb57b3bcaa3bdd3f9E:

000000008000bb6e <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17hb57b3bcaa3bdd3f9E>:
    pub const fn as_ptr(self) -> *mut T {
    8000bb6e:	1141                	addi	sp,sp,-16
    8000bb70:	e42a                	sd	a0,8(sp)
    }
    8000bb72:	0141                	addi	sp,sp,16
    8000bb74:	8082                	ret

Disassembly of section .text._ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17hc428d38b809aa8c2E:

000000008000bb76 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17hc428d38b809aa8c2E>:
    pub const fn as_ptr(self) -> *mut T {
    8000bb76:	1141                	addi	sp,sp,-16
    8000bb78:	e42a                	sd	a0,8(sp)
    }
    8000bb7a:	0141                	addi	sp,sp,16
    8000bb7c:	8082                	ret

Disassembly of section .text._ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17hd1144efb36e37b5fE:

000000008000bb7e <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17hd1144efb36e37b5fE>:
    pub const fn as_ptr(self) -> *mut T {
    8000bb7e:	1141                	addi	sp,sp,-16
    8000bb80:	e42a                	sd	a0,8(sp)
    }
    8000bb82:	0141                	addi	sp,sp,16
    8000bb84:	8082                	ret

Disassembly of section .text._ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17hf99ed61581dd6ee2E:

000000008000bb86 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17hf99ed61581dd6ee2E>:
    pub const fn as_ptr(self) -> *mut T {
    8000bb86:	1141                	addi	sp,sp,-16
    8000bb88:	e42a                	sd	a0,8(sp)
    }
    8000bb8a:	0141                	addi	sp,sp,16
    8000bb8c:	8082                	ret

Disassembly of section .text._ZN4core3ptr6unique15Unique$LT$T$GT$6as_ref17hc8563a91a04f7babE:

000000008000bb8e <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ref17hc8563a91a04f7babE>:
    pub unsafe fn as_ref(&self) -> &T {
    8000bb8e:	1101                	addi	sp,sp,-32
    8000bb90:	ec06                	sd	ra,24(sp)
    8000bb92:	e82a                	sd	a0,16(sp)
        unsafe { &*self.as_ptr() }
    8000bb94:	6108                	ld	a0,0(a0)
    8000bb96:	00000097          	auipc	ra,0x0
    8000bb9a:	fc0080e7          	jalr	-64(ra) # 8000bb56 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h98e034e84104bb8fE>
    8000bb9e:	e42a                	sd	a0,8(sp)
    8000bba0:	a009                	j	8000bba2 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ref17hc8563a91a04f7babE+0x14>
    }
    8000bba2:	6522                	ld	a0,8(sp)
    8000bba4:	60e2                	ld	ra,24(sp)
    8000bba6:	6105                	addi	sp,sp,32
    8000bba8:	8082                	ret

Disassembly of section .text._ZN4core3ptr6unique15Unique$LT$T$GT$6as_ref17hf6739c76b33ed63aE:

000000008000bbaa <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ref17hf6739c76b33ed63aE>:
    pub unsafe fn as_ref(&self) -> &T {
    8000bbaa:	1101                	addi	sp,sp,-32
    8000bbac:	ec06                	sd	ra,24(sp)
    8000bbae:	e82a                	sd	a0,16(sp)
        unsafe { &*self.as_ptr() }
    8000bbb0:	6108                	ld	a0,0(a0)
    8000bbb2:	00000097          	auipc	ra,0x0
    8000bbb6:	fac080e7          	jalr	-84(ra) # 8000bb5e <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17hb36dfd1ef749fd26E>
    8000bbba:	e42a                	sd	a0,8(sp)
    8000bbbc:	a009                	j	8000bbbe <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ref17hf6739c76b33ed63aE+0x14>
    }
    8000bbbe:	6522                	ld	a0,8(sp)
    8000bbc0:	60e2                	ld	ra,24(sp)
    8000bbc2:	6105                	addi	sp,sp,32
    8000bbc4:	8082                	ret

Disassembly of section .text._ZN4core3ptr6unique15Unique$LT$T$GT$8dangling17h9486dd80fcd97a92E:

000000008000bbc6 <_ZN4core3ptr6unique15Unique$LT$T$GT$8dangling17h9486dd80fcd97a92E>:
    pub const fn dangling() -> Self {
    8000bbc6:	1101                	addi	sp,sp,-32
    8000bbc8:	ec06                	sd	ra,24(sp)
    8000bbca:	4505                	li	a0,1
    8000bbcc:	e42a                	sd	a0,8(sp)
    8000bbce:	e82a                	sd	a0,16(sp)
        unsafe { Unique::new_unchecked(mem::align_of::<T>() as *mut T) }
    8000bbd0:	a009                	j	8000bbd2 <_ZN4core3ptr6unique15Unique$LT$T$GT$8dangling17h9486dd80fcd97a92E+0xc>
    8000bbd2:	6522                	ld	a0,8(sp)
    8000bbd4:	00000097          	auipc	ra,0x0
    8000bbd8:	e92080e7          	jalr	-366(ra) # 8000ba66 <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17h620617f59cddd065E>
    8000bbdc:	e02a                	sd	a0,0(sp)
    8000bbde:	a009                	j	8000bbe0 <_ZN4core3ptr6unique15Unique$LT$T$GT$8dangling17h9486dd80fcd97a92E+0x1a>
    }
    8000bbe0:	6502                	ld	a0,0(sp)
    8000bbe2:	60e2                	ld	ra,24(sp)
    8000bbe4:	6105                	addi	sp,sp,32
    8000bbe6:	8082                	ret

Disassembly of section .text._ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h6726b37a43d030b4E:

000000008000bbe8 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h6726b37a43d030b4E>:
    fn into(self) -> U {
    8000bbe8:	1101                	addi	sp,sp,-32
    8000bbea:	ec06                	sd	ra,24(sp)
    8000bbec:	e82a                	sd	a0,16(sp)
        U::from(self)
    8000bbee:	00003097          	auipc	ra,0x3
    8000bbf2:	5e8080e7          	jalr	1512(ra) # 8000f1d6 <_ZN119_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$core..ptr..unique..Unique$LT$T$GT$$GT$$GT$4from17h163e90b2907f9865E>
    8000bbf6:	e42a                	sd	a0,8(sp)
    8000bbf8:	a009                	j	8000bbfa <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h6726b37a43d030b4E+0x12>
    }
    8000bbfa:	6522                	ld	a0,8(sp)
    8000bbfc:	60e2                	ld	ra,24(sp)
    8000bbfe:	6105                	addi	sp,sp,32
    8000bc00:	8082                	ret

Disassembly of section .text._ZN95_$LT$core..ptr..unique..Unique$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$mut$u20$T$GT$$GT$4from17h45361f1294fceae9E:

000000008000bc02 <_ZN95_$LT$core..ptr..unique..Unique$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$mut$u20$T$GT$$GT$4from17h45361f1294fceae9E>:
}

#[unstable(feature = "ptr_internals", issue = "none")]
impl<T: ?Sized> From<&mut T> for Unique<T> {
    #[inline]
    fn from(reference: &mut T) -> Self {
    8000bc02:	1141                	addi	sp,sp,-16
    8000bc04:	e42a                	sd	a0,8(sp)
        // SAFETY: A mutable reference cannot be null
        unsafe { Unique { pointer: reference as *mut T, _marker: PhantomData } }
    8000bc06:	e02a                	sd	a0,0(sp)
    }
    8000bc08:	0141                	addi	sp,sp,16
    8000bc0a:	8082                	ret

Disassembly of section .text._ZN95_$LT$core..ptr..unique..Unique$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$mut$u20$T$GT$$GT$4from17h7ca19f4bf209b680E:

000000008000bc0c <_ZN95_$LT$core..ptr..unique..Unique$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$mut$u20$T$GT$$GT$4from17h7ca19f4bf209b680E>:
    fn from(reference: &mut T) -> Self {
    8000bc0c:	1141                	addi	sp,sp,-16
    8000bc0e:	e42a                	sd	a0,8(sp)
        unsafe { Unique { pointer: reference as *mut T, _marker: PhantomData } }
    8000bc10:	e02a                	sd	a0,0(sp)
    }
    8000bc12:	0141                	addi	sp,sp,16
    8000bc14:	8082                	ret

Disassembly of section .text._ZN95_$LT$core..ptr..unique..Unique$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$mut$u20$T$GT$$GT$4from17h938709fab973920cE:

000000008000bc16 <_ZN95_$LT$core..ptr..unique..Unique$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$mut$u20$T$GT$$GT$4from17h938709fab973920cE>:
    fn from(reference: &mut T) -> Self {
    8000bc16:	1141                	addi	sp,sp,-16
    8000bc18:	e42a                	sd	a0,8(sp)
        unsafe { Unique { pointer: reference as *mut T, _marker: PhantomData } }
    8000bc1a:	e02a                	sd	a0,0(sp)
    }
    8000bc1c:	0141                	addi	sp,sp,16
    8000bc1e:	8082                	ret

Disassembly of section .text._ZN95_$LT$core..ptr..unique..Unique$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$mut$u20$T$GT$$GT$4from17h961fb5f3bbf04d92E:

000000008000bc20 <_ZN95_$LT$core..ptr..unique..Unique$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$mut$u20$T$GT$$GT$4from17h961fb5f3bbf04d92E>:
    fn from(reference: &mut T) -> Self {
    8000bc20:	1141                	addi	sp,sp,-16
    8000bc22:	e42a                	sd	a0,8(sp)
        unsafe { Unique { pointer: reference as *mut T, _marker: PhantomData } }
    8000bc24:	e02a                	sd	a0,0(sp)
    }
    8000bc26:	0141                	addi	sp,sp,16
    8000bc28:	8082                	ret

Disassembly of section .text._ZN95_$LT$core..ptr..unique..Unique$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$mut$u20$T$GT$$GT$4from17haf9e918ffbbde4a1E:

000000008000bc2a <_ZN95_$LT$core..ptr..unique..Unique$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$mut$u20$T$GT$$GT$4from17haf9e918ffbbde4a1E>:
    fn from(reference: &mut T) -> Self {
    8000bc2a:	1141                	addi	sp,sp,-16
    8000bc2c:	e42a                	sd	a0,8(sp)
        unsafe { Unique { pointer: reference as *mut T, _marker: PhantomData } }
    8000bc2e:	e02a                	sd	a0,0(sp)
    }
    8000bc30:	0141                	addi	sp,sp,16
    8000bc32:	8082                	ret

Disassembly of section .text._ZN95_$LT$core..ptr..unique..Unique$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$mut$u20$T$GT$$GT$4from17hbd7fdd10f6dec294E:

000000008000bc34 <_ZN95_$LT$core..ptr..unique..Unique$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$mut$u20$T$GT$$GT$4from17hbd7fdd10f6dec294E>:
    fn from(reference: &mut T) -> Self {
    8000bc34:	1141                	addi	sp,sp,-16
    8000bc36:	e42a                	sd	a0,8(sp)
        unsafe { Unique { pointer: reference as *mut T, _marker: PhantomData } }
    8000bc38:	e02a                	sd	a0,0(sp)
    }
    8000bc3a:	0141                	addi	sp,sp,16
    8000bc3c:	8082                	ret

Disassembly of section .text._ZN95_$LT$core..ptr..unique..Unique$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$mut$u20$T$GT$$GT$4from17hd2fb1fd1ad0aa985E:

000000008000bc3e <_ZN95_$LT$core..ptr..unique..Unique$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$mut$u20$T$GT$$GT$4from17hd2fb1fd1ad0aa985E>:
    fn from(reference: &mut T) -> Self {
    8000bc3e:	1141                	addi	sp,sp,-16
    8000bc40:	e42a                	sd	a0,8(sp)
        unsafe { Unique { pointer: reference as *mut T, _marker: PhantomData } }
    8000bc42:	e02a                	sd	a0,0(sp)
    }
    8000bc44:	0141                	addi	sp,sp,16
    8000bc46:	8082                	ret

Disassembly of section .text._ZN95_$LT$core..ptr..unique..Unique$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$mut$u20$T$GT$$GT$4from17hdb52ac7756946cf1E:

000000008000bc48 <_ZN95_$LT$core..ptr..unique..Unique$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$mut$u20$T$GT$$GT$4from17hdb52ac7756946cf1E>:
    fn from(reference: &mut T) -> Self {
    8000bc48:	1141                	addi	sp,sp,-16
    8000bc4a:	e42a                	sd	a0,8(sp)
        unsafe { Unique { pointer: reference as *mut T, _marker: PhantomData } }
    8000bc4c:	e02a                	sd	a0,0(sp)
    }
    8000bc4e:	0141                	addi	sp,sp,16
    8000bc50:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register5stvec5write17ha770434f21f9bf27E:

000000008000bc52 <_ZN6kernel4arch5riscv8register5stvec5write17ha770434f21f9bf27E>:
    llvm_asm!("csrr $0, stvec":"=r"(ret):::"volatile");
    ret
}

#[inline]
pub unsafe fn write(x:usize){
    8000bc52:	1141                	addi	sp,sp,-16
    8000bc54:	e42a                	sd	a0,8(sp)
    llvm_asm!("csrw stvec, $0"::"r"(x)::"volatile");
    8000bc56:	10551073          	csrw	stvec,a0
    8000bc5a:	0141                	addi	sp,sp,16
    8000bc5c:	8082                	ret

Disassembly of section .text._ZN4core10intrinsics11write_bytes17h11bbad1db2a3ea1bE:

000000008000bc5e <_ZN4core10intrinsics11write_bytes17h11bbad1db2a3ea1bE>:
/// // Now the box is fine
/// assert_eq!(*v, 42);
/// ```
#[stable(feature = "rust1", since = "1.0.0")]
#[inline]
pub unsafe fn write_bytes<T>(dst: *mut T, val: u8, count: usize) {
    8000bc5e:	1101                	addi	sp,sp,-32
    8000bc60:	ec06                	sd	ra,24(sp)
    8000bc62:	e02a                	sd	a0,0(sp)
    8000bc64:	00b107a3          	sb	a1,15(sp)
    8000bc68:	e832                	sd	a2,16(sp)
    }

    debug_assert!(is_aligned_and_not_null(dst), "attempt to write to unaligned or null pointer");

    // SAFETY: the safety contract for `write_bytes` must be upheld by the caller.
    unsafe { write_bytes(dst, val, count) }
    8000bc6a:	061a                	slli	a2,a2,0x6
    8000bc6c:	00019097          	auipc	ra,0x19
    8000bc70:	420080e7          	jalr	1056(ra) # 8002508c <memset>
    8000bc74:	a009                	j	8000bc76 <_ZN4core10intrinsics11write_bytes17h11bbad1db2a3ea1bE+0x18>
}
    8000bc76:	60e2                	ld	ra,24(sp)
    8000bc78:	6105                	addi	sp,sp,32
    8000bc7a:	8082                	ret

Disassembly of section .text._ZN6kernel2fs4init17h0544bbe6b6556f7eE:

000000008000bc7c <_ZN6kernel2fs4init17h0544bbe6b6556f7eE>:
use crate::lock::sleeplock::SleepLockGuard;

/// Init fs.
/// Read super block info.
/// Init log info and recover if necessary.
pub unsafe fn init(dev: u32) {
    8000bc7c:	7159                	addi	sp,sp,-112
    8000bc7e:	f486                	sd	ra,104(sp)
    8000bc80:	85aa                	mv	a1,a0
    8000bc82:	852e                	mv	a0,a1
    8000bc84:	ec2a                	sd	a0,24(sp)
    8000bc86:	ceae                	sw	a1,92(sp)

000000008000bc88 <.LBB0_10>:
    SUPER_BLOCK.init(dev);
    8000bc88:	00056517          	auipc	a0,0x56
    8000bc8c:	41850513          	addi	a0,a0,1048 # 800620a0 <_ZN6kernel2fs10superblock11SUPER_BLOCK17hc3889871ecbe2b54E>
    8000bc90:	ffffc097          	auipc	ra,0xffffc
    8000bc94:	842080e7          	jalr	-1982(ra) # 800074d2 <_ZN6kernel2fs10superblock10SuperBlock4init17hd314ea22bd8e6757E>
    8000bc98:	a009                	j	8000bc9a <.LBB0_11>

000000008000bc9a <.LBB0_11>:
    let log_ptr = LOG.acquire().deref_mut() as *mut Log;
    8000bc9a:	0004e517          	auipc	a0,0x4e
    8000bc9e:	9ce50513          	addi	a0,a0,-1586 # 80059668 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    8000bca2:	00004097          	auipc	ra,0x4
    8000bca6:	532080e7          	jalr	1330(ra) # 800101d4 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h25a8532f298de6d8E>
    8000bcaa:	f02a                	sd	a0,32(sp)
    8000bcac:	a009                	j	8000bcae <.LBB0_11+0x14>
    8000bcae:	1008                	addi	a0,sp,32
    8000bcb0:	00005097          	auipc	ra,0x5
    8000bcb4:	700080e7          	jalr	1792(ra) # 800113b0 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h6a09efacfb59499dE>
    8000bcb8:	e82a                	sd	a0,16(sp)
    8000bcba:	a009                	j	8000bcbc <.LBB0_11+0x22>
    8000bcbc:	6542                	ld	a0,16(sp)
    8000bcbe:	f0aa                	sd	a0,96(sp)
    8000bcc0:	1008                	addi	a0,sp,32
    8000bcc2:	ffffb097          	auipc	ra,0xffffb
    8000bcc6:	35a080e7          	jalr	858(ra) # 8000701c <_ZN4core3ptr86drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..fs..log..Log$GT$$GT$17h3ff4d5b7fa89905aE>
    8000bcca:	a009                	j	8000bccc <.LBB0_11+0x32>
    log_ptr.as_mut().unwrap().init(dev);
    8000bccc:	6542                	ld	a0,16(sp)
    8000bcce:	ffffd097          	auipc	ra,0xffffd
    8000bcd2:	eb8080e7          	jalr	-328(ra) # 80008b86 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17ha6d203c03ed13dfdE>
    8000bcd6:	e42a                	sd	a0,8(sp)
    8000bcd8:	a009                	j	8000bcda <.LBB0_11+0x40>
    8000bcda:	6522                	ld	a0,8(sp)

000000008000bcdc <.LBB0_12>:
    8000bcdc:	0001c597          	auipc	a1,0x1c
    8000bce0:	ef458593          	addi	a1,a1,-268 # 80027bd0 <.L__unnamed_1>
    8000bce4:	00003097          	auipc	ra,0x3
    8000bce8:	0b0080e7          	jalr	176(ra) # 8000ed94 <_ZN4core6option15Option$LT$T$GT$6unwrap17hc367d03244a4b027E>
    8000bcec:	e02a                	sd	a0,0(sp)
    8000bcee:	a009                	j	8000bcf0 <.LBB0_12+0x14>
    8000bcf0:	65e2                	ld	a1,24(sp)
    8000bcf2:	6502                	ld	a0,0(sp)
    8000bcf4:	00004097          	auipc	ra,0x4
    8000bcf8:	8d6080e7          	jalr	-1834(ra) # 8000f5ca <_ZN6kernel2fs3log3Log4init17h739bf7c5bf880a35E>
    8000bcfc:	a009                	j	8000bcfe <.LBB0_13>

000000008000bcfe <.LBB0_13>:
    println!("file system: setup done");
    8000bcfe:	0001c597          	auipc	a1,0x1c
    8000bd02:	f0258593          	addi	a1,a1,-254 # 80027c00 <.L__unnamed_2>

000000008000bd06 <.LBB0_14>:
    8000bd06:	0001c697          	auipc	a3,0x1c
    8000bd0a:	f0a68693          	addi	a3,a3,-246 # 80027c10 <.L__unnamed_9>
    8000bd0e:	1028                	addi	a0,sp,40
    8000bd10:	4605                	li	a2,1
    8000bd12:	4701                	li	a4,0
    8000bd14:	ffff9097          	auipc	ra,0xffff9
    8000bd18:	720080e7          	jalr	1824(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8000bd1c:	a009                	j	8000bd1e <.LBB0_14+0x18>
    8000bd1e:	1028                	addi	a0,sp,40
    8000bd20:	00012097          	auipc	ra,0x12
    8000bd24:	e90080e7          	jalr	-368(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8000bd28:	a009                	j	8000bd2a <.LBB0_14+0x24>
}
    8000bd2a:	70a6                	ld	ra,104(sp)
    8000bd2c:	6165                	addi	sp,sp,112
    8000bd2e:	8082                	ret

Disassembly of section .text._ZN5alloc5alloc12alloc_zeroed17h1e07741da5ebd770E:

000000008000bd30 <_ZN5alloc5alloc12alloc_zeroed17h1e07741da5ebd770E>:
pub unsafe fn alloc_zeroed(layout: Layout) -> *mut u8 {
    8000bd30:	7179                	addi	sp,sp,-48
    8000bd32:	f406                	sd	ra,40(sp)
    8000bd34:	ec2a                	sd	a0,24(sp)
    8000bd36:	f02e                	sd	a1,32(sp)
    8000bd38:	0828                	addi	a0,sp,24
    unsafe { __rust_alloc_zeroed(layout.size(), layout.align()) }
    8000bd3a:	00013097          	auipc	ra,0x13
    8000bd3e:	ada080e7          	jalr	-1318(ra) # 8001e814 <_ZN4core5alloc6layout6Layout4size17h7f60c0168860a2ffE>
    8000bd42:	e82a                	sd	a0,16(sp)
    8000bd44:	a009                	j	8000bd46 <_ZN5alloc5alloc12alloc_zeroed17h1e07741da5ebd770E+0x16>
    8000bd46:	0828                	addi	a0,sp,24
    8000bd48:	00013097          	auipc	ra,0x13
    8000bd4c:	ad6080e7          	jalr	-1322(ra) # 8001e81e <_ZN4core5alloc6layout6Layout5align17h05712eb17caed6beE>
    8000bd50:	e42a                	sd	a0,8(sp)
    8000bd52:	a009                	j	8000bd54 <_ZN5alloc5alloc12alloc_zeroed17h1e07741da5ebd770E+0x24>
    8000bd54:	65a2                	ld	a1,8(sp)
    8000bd56:	6542                	ld	a0,16(sp)
    8000bd58:	00013097          	auipc	ra,0x13
    8000bd5c:	7a0080e7          	jalr	1952(ra) # 8001f4f8 <__rust_alloc_zeroed>
    8000bd60:	e02a                	sd	a0,0(sp)
    8000bd62:	a009                	j	8000bd64 <_ZN5alloc5alloc12alloc_zeroed17h1e07741da5ebd770E+0x34>
}
    8000bd64:	6502                	ld	a0,0(sp)
    8000bd66:	70a2                	ld	ra,40(sp)
    8000bd68:	6145                	addi	sp,sp,48
    8000bd6a:	8082                	ret

Disassembly of section .text._ZN5alloc5alloc15exchange_malloc17hc8acd7fb5c1fe184E:

000000008000bd6c <_ZN5alloc5alloc15exchange_malloc17hc8acd7fb5c1fe184E>:
unsafe fn exchange_malloc(size: usize, align: usize) -> *mut u8 {
    8000bd6c:	711d                	addi	sp,sp,-96
    8000bd6e:	ec86                	sd	ra,88(sp)
    8000bd70:	f42a                	sd	a0,40(sp)
    8000bd72:	f82e                	sd	a1,48(sp)
    let layout = unsafe { Layout::from_size_align_unchecked(size, align) };
    8000bd74:	00013097          	auipc	ra,0x13
    8000bd78:	a76080e7          	jalr	-1418(ra) # 8001e7ea <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h7d187b5349095d20E>
    8000bd7c:	862a                	mv	a2,a0
    8000bd7e:	e432                	sd	a2,8(sp)
    8000bd80:	862e                	mv	a2,a1
    8000bd82:	e832                	sd	a2,16(sp)
    8000bd84:	fc2a                	sd	a0,56(sp)
    8000bd86:	e0ae                	sd	a1,64(sp)
    8000bd88:	a009                	j	8000bd8a <_ZN5alloc5alloc15exchange_malloc17hc8acd7fb5c1fe184E+0x1e>
    match Global.allocate(layout) {
    8000bd8a:	6642                	ld	a2,16(sp)
    8000bd8c:	65a2                	ld	a1,8(sp)

000000008000bd8e <.LBB1_8>:
    8000bd8e:	0001c517          	auipc	a0,0x1c
    8000bd92:	e8250513          	addi	a0,a0,-382 # 80027c10 <.L__unnamed_9>
    8000bd96:	00000097          	auipc	ra,0x0
    8000bd9a:	4d6080e7          	jalr	1238(ra) # 8000c26c <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$8allocate17ha3ee32ed39eb82efE>
    8000bd9e:	ec2a                	sd	a0,24(sp)
    8000bda0:	f02e                	sd	a1,32(sp)
    8000bda2:	a009                	j	8000bda4 <.LBB1_8+0x16>
        Ok(ptr) => ptr.as_mut_ptr(),
    8000bda4:	6562                	ld	a0,24(sp)
    8000bda6:	00153593          	seqz	a1,a0
    8000bdaa:	4581                	li	a1,0
    8000bdac:	00b51b63          	bne	a0,a1,8000bdc2 <.LBB1_8+0x34>
    8000bdb0:	a009                	j	8000bdb2 <.LBB1_8+0x24>
        Err(_) => handle_alloc_error(layout),
    8000bdb2:	65c2                	ld	a1,16(sp)
    8000bdb4:	6522                	ld	a0,8(sp)
    8000bdb6:	00016097          	auipc	ra,0x16
    8000bdba:	140080e7          	jalr	320(ra) # 80021ef6 <_ZN5alloc5alloc18handle_alloc_error17haa1b1c0a80642c5aE>
    8000bdbe:	0000                	unimp
    match Global.allocate(layout) {
    8000bdc0:	0000                	unimp
        Ok(ptr) => ptr.as_mut_ptr(),
    8000bdc2:	6562                	ld	a0,24(sp)
    8000bdc4:	7582                	ld	a1,32(sp)
    8000bdc6:	e4aa                	sd	a0,72(sp)
    8000bdc8:	e8ae                	sd	a1,80(sp)
    8000bdca:	00003097          	auipc	ra,0x3
    8000bdce:	6dc080e7          	jalr	1756(ra) # 8000f4a6 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$10as_mut_ptr17h1a3f7b42026c1de6E>
    8000bdd2:	e02a                	sd	a0,0(sp)
    8000bdd4:	a009                	j	8000bdd6 <.LBB1_8+0x48>
}
    8000bdd6:	6502                	ld	a0,0(sp)
    8000bdd8:	60e6                	ld	ra,88(sp)
    8000bdda:	6125                	addi	sp,sp,96
    8000bddc:	8082                	ret

Disassembly of section .text._ZN5alloc5alloc5alloc17hd4c58b08d1932008E:

000000008000bdde <_ZN5alloc5alloc5alloc17hd4c58b08d1932008E>:
pub unsafe fn alloc(layout: Layout) -> *mut u8 {
    8000bdde:	7179                	addi	sp,sp,-48
    8000bde0:	f406                	sd	ra,40(sp)
    8000bde2:	ec2a                	sd	a0,24(sp)
    8000bde4:	f02e                	sd	a1,32(sp)
    8000bde6:	0828                	addi	a0,sp,24
    unsafe { __rust_alloc(layout.size(), layout.align()) }
    8000bde8:	00013097          	auipc	ra,0x13
    8000bdec:	a2c080e7          	jalr	-1492(ra) # 8001e814 <_ZN4core5alloc6layout6Layout4size17h7f60c0168860a2ffE>
    8000bdf0:	e82a                	sd	a0,16(sp)
    8000bdf2:	a009                	j	8000bdf4 <_ZN5alloc5alloc5alloc17hd4c58b08d1932008E+0x16>
    8000bdf4:	0828                	addi	a0,sp,24
    8000bdf6:	00013097          	auipc	ra,0x13
    8000bdfa:	a28080e7          	jalr	-1496(ra) # 8001e81e <_ZN4core5alloc6layout6Layout5align17h05712eb17caed6beE>
    8000bdfe:	e42a                	sd	a0,8(sp)
    8000be00:	a009                	j	8000be02 <_ZN5alloc5alloc5alloc17hd4c58b08d1932008E+0x24>
    8000be02:	65a2                	ld	a1,8(sp)
    8000be04:	6542                	ld	a0,16(sp)
    8000be06:	00013097          	auipc	ra,0x13
    8000be0a:	6da080e7          	jalr	1754(ra) # 8001f4e0 <__rust_alloc>
    8000be0e:	e02a                	sd	a0,0(sp)
    8000be10:	a009                	j	8000be12 <_ZN5alloc5alloc5alloc17hd4c58b08d1932008E+0x34>
}
    8000be12:	6502                	ld	a0,0(sp)
    8000be14:	70a2                	ld	ra,40(sp)
    8000be16:	6145                	addi	sp,sp,48
    8000be18:	8082                	ret

Disassembly of section .text._ZN5alloc5alloc6Global10alloc_impl17h58679304960bb1eaE:

000000008000be1a <_ZN5alloc5alloc6Global10alloc_impl17h58679304960bb1eaE>:
    fn alloc_impl(&self, layout: Layout, zeroed: bool) -> Result<NonNull<[u8]>, AllocError> {
    8000be1a:	7171                	addi	sp,sp,-176
    8000be1c:	f506                	sd	ra,168(sp)
    8000be1e:	8736                	mv	a4,a3
    8000be20:	fc3a                	sd	a4,56(sp)
    8000be22:	e4ae                	sd	a1,72(sp)
    8000be24:	e8b2                	sd	a2,80(sp)
    8000be26:	fcaa                	sd	a0,120(sp)
    8000be28:	08d103a3          	sb	a3,135(sp)
    8000be2c:	00a8                	addi	a0,sp,72
        match layout.size() {
    8000be2e:	00013097          	auipc	ra,0x13
    8000be32:	9e6080e7          	jalr	-1562(ra) # 8001e814 <_ZN4core5alloc6layout6Layout4size17h7f60c0168860a2ffE>
    8000be36:	e0aa                	sd	a0,64(sp)
    8000be38:	a009                	j	8000be3a <_ZN5alloc5alloc6Global10alloc_impl17h58679304960bb1eaE+0x20>
    8000be3a:	6506                	ld	a0,64(sp)
    8000be3c:	4581                	li	a1,0
            0 => Ok(NonNull::slice_from_raw_parts(layout.dangling(), 0)),
    8000be3e:	00b50863          	beq	a0,a1,8000be4e <_ZN5alloc5alloc6Global10alloc_impl17h58679304960bb1eaE+0x34>
    8000be42:	a009                	j	8000be44 <_ZN5alloc5alloc6Global10alloc_impl17h58679304960bb1eaE+0x2a>
            size => unsafe {
    8000be44:	7562                	ld	a0,56(sp)
    8000be46:	6586                	ld	a1,64(sp)
    8000be48:	e92e                	sd	a1,144(sp)
                let raw_ptr = if zeroed { alloc_zeroed(layout) } else { alloc(layout) };
    8000be4a:	e51d                	bnez	a0,8000be78 <_ZN5alloc5alloc6Global10alloc_impl17h58679304960bb1eaE+0x5e>
    8000be4c:	a835                	j	8000be88 <_ZN5alloc5alloc6Global10alloc_impl17h58679304960bb1eaE+0x6e>
    8000be4e:	00a8                	addi	a0,sp,72
            0 => Ok(NonNull::slice_from_raw_parts(layout.dangling(), 0)),
    8000be50:	00013097          	auipc	ra,0x13
    8000be54:	ace080e7          	jalr	-1330(ra) # 8001e91e <_ZN4core5alloc6layout6Layout8dangling17h635528e7b5a013bbE>
    8000be58:	f82a                	sd	a0,48(sp)
    8000be5a:	a009                	j	8000be5c <_ZN5alloc5alloc6Global10alloc_impl17h58679304960bb1eaE+0x42>
    8000be5c:	7542                	ld	a0,48(sp)
    8000be5e:	4581                	li	a1,0
    8000be60:	00003097          	auipc	ra,0x3
    8000be64:	6ac080e7          	jalr	1708(ra) # 8000f50c <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$20slice_from_raw_parts17h7a0aec34eacd5d12E>
    8000be68:	f02a                	sd	a0,32(sp)
    8000be6a:	f42e                	sd	a1,40(sp)
    8000be6c:	a009                	j	8000be6e <_ZN5alloc5alloc6Global10alloc_impl17h58679304960bb1eaE+0x54>
    8000be6e:	7522                	ld	a0,40(sp)
    8000be70:	7582                	ld	a1,32(sp)
    8000be72:	ecae                	sd	a1,88(sp)
    8000be74:	f0aa                	sd	a0,96(sp)
        match layout.size() {
    8000be76:	a871                	j	8000bf12 <_ZN5alloc5alloc6Global10alloc_impl17h58679304960bb1eaE+0xf8>
                let raw_ptr = if zeroed { alloc_zeroed(layout) } else { alloc(layout) };
    8000be78:	6526                	ld	a0,72(sp)
    8000be7a:	65c6                	ld	a1,80(sp)
    8000be7c:	00000097          	auipc	ra,0x0
    8000be80:	eb4080e7          	jalr	-332(ra) # 8000bd30 <_ZN5alloc5alloc12alloc_zeroed17h1e07741da5ebd770E>
    8000be84:	f4aa                	sd	a0,104(sp)
    8000be86:	a809                	j	8000be98 <_ZN5alloc5alloc6Global10alloc_impl17h58679304960bb1eaE+0x7e>
    8000be88:	6526                	ld	a0,72(sp)
    8000be8a:	65c6                	ld	a1,80(sp)
    8000be8c:	00000097          	auipc	ra,0x0
    8000be90:	f52080e7          	jalr	-174(ra) # 8000bdde <_ZN5alloc5alloc5alloc17hd4c58b08d1932008E>
    8000be94:	f4aa                	sd	a0,104(sp)
    8000be96:	a011                	j	8000be9a <_ZN5alloc5alloc6Global10alloc_impl17h58679304960bb1eaE+0x80>
    8000be98:	a011                	j	8000be9c <_ZN5alloc5alloc6Global10alloc_impl17h58679304960bb1eaE+0x82>
    8000be9a:	a009                	j	8000be9c <_ZN5alloc5alloc6Global10alloc_impl17h58679304960bb1eaE+0x82>
                let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
    8000be9c:	7526                	ld	a0,104(sp)
    8000be9e:	00003097          	auipc	ra,0x3
    8000bea2:	40e080e7          	jalr	1038(ra) # 8000f2ac <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h3fba838d6c025de4E>
    8000bea6:	ec2a                	sd	a0,24(sp)
    8000bea8:	a009                	j	8000beaa <_ZN5alloc5alloc6Global10alloc_impl17h58679304960bb1eaE+0x90>
    8000beaa:	6562                	ld	a0,24(sp)
    8000beac:	00003097          	auipc	ra,0x3
    8000beb0:	8e8080e7          	jalr	-1816(ra) # 8000e794 <_ZN4core6option15Option$LT$T$GT$5ok_or17h8c89aa4278cdb5d9E>
    8000beb4:	e82a                	sd	a0,16(sp)
    8000beb6:	a009                	j	8000beb8 <_ZN5alloc5alloc6Global10alloc_impl17h58679304960bb1eaE+0x9e>
    8000beb8:	6542                	ld	a0,16(sp)
    8000beba:	00001097          	auipc	ra,0x1
    8000bebe:	210080e7          	jalr	528(ra) # 8000d0ca <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h01dd6c02021cf1cdE>
    8000bec2:	f8aa                	sd	a0,112(sp)
    8000bec4:	a009                	j	8000bec6 <_ZN5alloc5alloc6Global10alloc_impl17h58679304960bb1eaE+0xac>
    8000bec6:	7546                	ld	a0,112(sp)
    8000bec8:	00153593          	seqz	a1,a0
    8000becc:	4581                	li	a1,0
    8000bece:	00b51463          	bne	a0,a1,8000bed6 <_ZN5alloc5alloc6Global10alloc_impl17h58679304960bb1eaE+0xbc>
    8000bed2:	a009                	j	8000bed4 <_ZN5alloc5alloc6Global10alloc_impl17h58679304960bb1eaE+0xba>
    8000bed4:	a829                	j	8000beee <_ZN5alloc5alloc6Global10alloc_impl17h58679304960bb1eaE+0xd4>
    8000bed6:	6586                	ld	a1,64(sp)
    8000bed8:	7546                	ld	a0,112(sp)
    8000beda:	ed2a                	sd	a0,152(sp)
    8000bedc:	f12a                	sd	a0,160(sp)
                Ok(NonNull::slice_from_raw_parts(ptr, size))
    8000bede:	00003097          	auipc	ra,0x3
    8000bee2:	62e080e7          	jalr	1582(ra) # 8000f50c <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$20slice_from_raw_parts17h7a0aec34eacd5d12E>
    8000bee6:	e02a                	sd	a0,0(sp)
    8000bee8:	e42e                	sd	a1,8(sp)
    8000beea:	a839                	j	8000bf08 <_ZN5alloc5alloc6Global10alloc_impl17h58679304960bb1eaE+0xee>
                let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
    8000beec:	0000                	unimp
    8000beee:	00001097          	auipc	ra,0x1
    8000bef2:	ba4080e7          	jalr	-1116(ra) # 8000ca92 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h37d2ccc52635f8a7E>
    8000bef6:	a009                	j	8000bef8 <_ZN5alloc5alloc6Global10alloc_impl17h58679304960bb1eaE+0xde>
    8000bef8:	00001097          	auipc	ra,0x1
    8000befc:	190080e7          	jalr	400(ra) # 8000d088 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha082cd91ce3eeff8E>
    8000bf00:	ecaa                	sd	a0,88(sp)
    8000bf02:	f0ae                	sd	a1,96(sp)
    8000bf04:	a009                	j	8000bf06 <_ZN5alloc5alloc6Global10alloc_impl17h58679304960bb1eaE+0xec>
    }
    8000bf06:	a039                	j	8000bf14 <_ZN5alloc5alloc6Global10alloc_impl17h58679304960bb1eaE+0xfa>
                Ok(NonNull::slice_from_raw_parts(ptr, size))
    8000bf08:	6522                	ld	a0,8(sp)
    8000bf0a:	6582                	ld	a1,0(sp)
    8000bf0c:	ecae                	sd	a1,88(sp)
    8000bf0e:	f0aa                	sd	a0,96(sp)
        match layout.size() {
    8000bf10:	a009                	j	8000bf12 <_ZN5alloc5alloc6Global10alloc_impl17h58679304960bb1eaE+0xf8>
    }
    8000bf12:	a009                	j	8000bf14 <_ZN5alloc5alloc6Global10alloc_impl17h58679304960bb1eaE+0xfa>
    8000bf14:	6566                	ld	a0,88(sp)
    8000bf16:	7586                	ld	a1,96(sp)
    8000bf18:	70aa                	ld	ra,168(sp)
    8000bf1a:	614d                	addi	sp,sp,176
    8000bf1c:	8082                	ret

Disassembly of section .text._ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE:

000000008000bf1e <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE>:
    unsafe fn grow_impl(
    8000bf1e:	7165                	addi	sp,sp,-400
    8000bf20:	e706                	sd	ra,392(sp)
    8000bf22:	f12e                	sd	a1,160(sp)
    8000bf24:	f52a                	sd	a0,168(sp)
    8000bf26:	88c2                	mv	a7,a6
    8000bf28:	f946                	sd	a7,176(sp)
    8000bf2a:	fd32                	sd	a2,184(sp)
    8000bf2c:	e1b6                	sd	a3,192(sp)
    8000bf2e:	e5ba                	sd	a4,200(sp)
    8000bf30:	e9be                	sd	a5,208(sp)
    8000bf32:	e62a                	sd	a0,264(sp)
    8000bf34:	ea2e                	sd	a1,272(sp)
    8000bf36:	11010fa3          	sb	a6,287(sp)
    8000bf3a:	1928                	addi	a0,sp,184
        match old_layout.size() {
    8000bf3c:	00013097          	auipc	ra,0x13
    8000bf40:	8d8080e7          	jalr	-1832(ra) # 8001e814 <_ZN4core5alloc6layout6Layout4size17h7f60c0168860a2ffE>
    8000bf44:	f5aa                	sd	a0,232(sp)
    8000bf46:	a009                	j	8000bf48 <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x2a>
            0 => self.alloc_impl(new_layout, zeroed),
    8000bf48:	752e                	ld	a0,232(sp)
    8000bf4a:	4581                	li	a1,0
    8000bf4c:	00b51f63          	bne	a0,a1,8000bf6a <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x4c>
    8000bf50:	a009                	j	8000bf52 <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x34>
    8000bf52:	76ca                	ld	a3,176(sp)
    8000bf54:	752a                	ld	a0,168(sp)
    8000bf56:	65ae                	ld	a1,200(sp)
    8000bf58:	664e                	ld	a2,208(sp)
    8000bf5a:	00000097          	auipc	ra,0x0
    8000bf5e:	ec0080e7          	jalr	-320(ra) # 8000be1a <_ZN5alloc5alloc6Global10alloc_impl17h58679304960bb1eaE>
    8000bf62:	edaa                	sd	a0,216(sp)
    8000bf64:	f1ae                	sd	a1,224(sp)
    8000bf66:	a009                	j	8000bf68 <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x4a>
        match old_layout.size() {
    8000bf68:	aad1                	j	8000c13c <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x21e>
    8000bf6a:	11a8                	addi	a0,sp,232
            old_size if old_layout.align() == new_layout.align() => unsafe {
    8000bf6c:	fa2a                	sd	a0,304(sp)
    8000bf6e:	1928                	addi	a0,sp,184
    8000bf70:	00013097          	auipc	ra,0x13
    8000bf74:	8ae080e7          	jalr	-1874(ra) # 8001e81e <_ZN4core5alloc6layout6Layout5align17h05712eb17caed6beE>
    8000bf78:	ed2a                	sd	a0,152(sp)
    8000bf7a:	a009                	j	8000bf7c <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x5e>
    8000bf7c:	01a8                	addi	a0,sp,200
    8000bf7e:	00013097          	auipc	ra,0x13
    8000bf82:	8a0080e7          	jalr	-1888(ra) # 8001e81e <_ZN4core5alloc6layout6Layout5align17h05712eb17caed6beE>
    8000bf86:	e92a                	sd	a0,144(sp)
    8000bf88:	a009                	j	8000bf8a <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x6c>
    8000bf8a:	656a                	ld	a0,152(sp)
    8000bf8c:	65ca                	ld	a1,144(sp)
    8000bf8e:	00b51f63          	bne	a0,a1,8000bfac <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x8e>
    8000bf92:	a009                	j	8000bf94 <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x76>
    8000bf94:	752e                	ld	a0,232(sp)
    8000bf96:	e12a                	sd	a0,128(sp)
    8000bf98:	fe2a                	sd	a0,312(sp)
    8000bf9a:	01a8                	addi	a0,sp,200
                let new_size = new_layout.size();
    8000bf9c:	00013097          	auipc	ra,0x13
    8000bfa0:	878080e7          	jalr	-1928(ra) # 8001e814 <_ZN4core5alloc6layout6Layout4size17h7f60c0168860a2ffE>
    8000bfa4:	85aa                	mv	a1,a0
    8000bfa6:	e52e                	sd	a1,136(sp)
    8000bfa8:	e2aa                	sd	a0,320(sp)
    8000bfaa:	a839                	j	8000bfc8 <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0xaa>
            old_size => unsafe {
    8000bfac:	76ca                	ld	a3,176(sp)
    8000bfae:	752a                	ld	a0,168(sp)
    8000bfb0:	75ae                	ld	a1,232(sp)
    8000bfb2:	f4ae                	sd	a1,104(sp)
    8000bfb4:	f2ae                	sd	a1,352(sp)
                let new_ptr = self.alloc_impl(new_layout, zeroed)?;
    8000bfb6:	65ae                	ld	a1,200(sp)
    8000bfb8:	664e                	ld	a2,208(sp)
    8000bfba:	00000097          	auipc	ra,0x0
    8000bfbe:	e60080e7          	jalr	-416(ra) # 8000be1a <_ZN5alloc5alloc6Global10alloc_impl17h58679304960bb1eaE>
    8000bfc2:	f8aa                	sd	a0,112(sp)
    8000bfc4:	fcae                	sd	a1,120(sp)
    8000bfc6:	a0c5                	j	8000c0a6 <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x188>
    8000bfc8:	1928                	addi	a0,sp,184
                intrinsics::assume(new_size >= old_layout.size());
    8000bfca:	00013097          	auipc	ra,0x13
    8000bfce:	84a080e7          	jalr	-1974(ra) # 8001e814 <_ZN4core5alloc6layout6Layout4size17h7f60c0168860a2ffE>
    8000bfd2:	a009                	j	8000bfd4 <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0xb6>
    8000bfd4:	a009                	j	8000bfd6 <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0xb8>
                let raw_ptr = realloc(ptr.as_ptr(), old_layout, new_size);
    8000bfd6:	750a                	ld	a0,160(sp)
    8000bfd8:	00003097          	auipc	ra,0x3
    8000bfdc:	460080e7          	jalr	1120(ra) # 8000f438 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h729713db2b300d39E>
    8000bfe0:	f0aa                	sd	a0,96(sp)
    8000bfe2:	a009                	j	8000bfe4 <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0xc6>
    8000bfe4:	66aa                	ld	a3,136(sp)
    8000bfe6:	7506                	ld	a0,96(sp)
    8000bfe8:	75ea                	ld	a1,184(sp)
    8000bfea:	660e                	ld	a2,192(sp)
    8000bfec:	00000097          	auipc	ra,0x0
    8000bff0:	19c080e7          	jalr	412(ra) # 8000c188 <_ZN5alloc5alloc7realloc17hcf6ed4b0bd028c82E>
    8000bff4:	85aa                	mv	a1,a0
    8000bff6:	ecae                	sd	a1,88(sp)
    8000bff8:	e6aa                	sd	a0,328(sp)
    8000bffa:	a009                	j	8000bffc <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0xde>
                let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
    8000bffc:	6566                	ld	a0,88(sp)
    8000bffe:	00003097          	auipc	ra,0x3
    8000c002:	2ae080e7          	jalr	686(ra) # 8000f2ac <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h3fba838d6c025de4E>
    8000c006:	e8aa                	sd	a0,80(sp)
    8000c008:	a009                	j	8000c00a <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0xec>
    8000c00a:	6546                	ld	a0,80(sp)
    8000c00c:	00002097          	auipc	ra,0x2
    8000c010:	788080e7          	jalr	1928(ra) # 8000e794 <_ZN4core6option15Option$LT$T$GT$5ok_or17h8c89aa4278cdb5d9E>
    8000c014:	e4aa                	sd	a0,72(sp)
    8000c016:	a009                	j	8000c018 <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0xfa>
    8000c018:	6526                	ld	a0,72(sp)
    8000c01a:	00001097          	auipc	ra,0x1
    8000c01e:	0b0080e7          	jalr	176(ra) # 8000d0ca <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h01dd6c02021cf1cdE>
    8000c022:	f9aa                	sd	a0,240(sp)
    8000c024:	a009                	j	8000c026 <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x108>
    8000c026:	754e                	ld	a0,240(sp)
    8000c028:	00153593          	seqz	a1,a0
    8000c02c:	4581                	li	a1,0
    8000c02e:	00b51463          	bne	a0,a1,8000c036 <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x118>
    8000c032:	a009                	j	8000c034 <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x116>
    8000c034:	a809                	j	8000c046 <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x128>
    8000c036:	754a                	ld	a0,176(sp)
    8000c038:	75ce                	ld	a1,240(sp)
    8000c03a:	e0ae                	sd	a1,64(sp)
    8000c03c:	eaae                	sd	a1,336(sp)
    8000c03e:	eeae                	sd	a1,344(sp)
                if zeroed {
    8000c040:	e105                	bnez	a0,8000c060 <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x142>
    8000c042:	a03d                	j	8000c070 <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x152>
                let ptr = NonNull::new(raw_ptr).ok_or(AllocError)?;
    8000c044:	0000                	unimp
    8000c046:	00001097          	auipc	ra,0x1
    8000c04a:	a4c080e7          	jalr	-1460(ra) # 8000ca92 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h37d2ccc52635f8a7E>
    8000c04e:	a009                	j	8000c050 <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x132>
    8000c050:	00001097          	auipc	ra,0x1
    8000c054:	038080e7          	jalr	56(ra) # 8000d088 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha082cd91ce3eeff8E>
    8000c058:	edaa                	sd	a0,216(sp)
    8000c05a:	f1ae                	sd	a1,224(sp)
    8000c05c:	a009                	j	8000c05e <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x140>
    8000c05e:	a0c5                	j	8000c13e <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x220>
                    raw_ptr.add(old_size).write_bytes(0, new_size - old_size);
    8000c060:	658a                	ld	a1,128(sp)
    8000c062:	6566                	ld	a0,88(sp)
    8000c064:	00013097          	auipc	ra,0x13
    8000c068:	520080e7          	jalr	1312(ra) # 8001f584 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1d203f00cca684c1E>
    8000c06c:	fc2a                	sd	a0,56(sp)
    8000c06e:	a011                	j	8000c072 <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x154>
                if zeroed {
    8000c070:	a829                	j	8000c08a <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x16c>
                    raw_ptr.add(old_size).write_bytes(0, new_size - old_size);
    8000c072:	7562                	ld	a0,56(sp)
    8000c074:	65aa                	ld	a1,136(sp)
    8000c076:	660a                	ld	a2,128(sp)
    8000c078:	40c58633          	sub	a2,a1,a2
    8000c07c:	4581                	li	a1,0
    8000c07e:	ffffd097          	auipc	ra,0xffffd
    8000c082:	82a080e7          	jalr	-2006(ra) # 800088a8 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$11write_bytes17h89eca677f2a46e73E>
    8000c086:	a009                	j	8000c088 <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x16a>
                if zeroed {
    8000c088:	a009                	j	8000c08a <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x16c>
                Ok(NonNull::slice_from_raw_parts(ptr, new_size))
    8000c08a:	65aa                	ld	a1,136(sp)
    8000c08c:	6506                	ld	a0,64(sp)
    8000c08e:	00003097          	auipc	ra,0x3
    8000c092:	47e080e7          	jalr	1150(ra) # 8000f50c <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$20slice_from_raw_parts17h7a0aec34eacd5d12E>
    8000c096:	f42a                	sd	a0,40(sp)
    8000c098:	f82e                	sd	a1,48(sp)
    8000c09a:	a009                	j	8000c09c <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x17e>
    8000c09c:	7542                	ld	a0,48(sp)
    8000c09e:	75a2                	ld	a1,40(sp)
    8000c0a0:	edae                	sd	a1,216(sp)
    8000c0a2:	f1aa                	sd	a0,224(sp)
        match old_layout.size() {
    8000c0a4:	a861                	j	8000c13c <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x21e>
                let new_ptr = self.alloc_impl(new_layout, zeroed)?;
    8000c0a6:	75e6                	ld	a1,120(sp)
    8000c0a8:	7546                	ld	a0,112(sp)
    8000c0aa:	00001097          	auipc	ra,0x1
    8000c0ae:	040080e7          	jalr	64(ra) # 8000d0ea <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h1c9f3c35158f4b17E>
    8000c0b2:	fdaa                	sd	a0,248(sp)
    8000c0b4:	e22e                	sd	a1,256(sp)
    8000c0b6:	a009                	j	8000c0b8 <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x19a>
    8000c0b8:	756e                	ld	a0,248(sp)
    8000c0ba:	00153593          	seqz	a1,a0
    8000c0be:	4581                	li	a1,0
    8000c0c0:	00b51463          	bne	a0,a1,8000c0c8 <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x1aa>
    8000c0c4:	a009                	j	8000c0c6 <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x1a8>
    8000c0c6:	a00d                	j	8000c0e8 <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x1ca>
    8000c0c8:	750a                	ld	a0,160(sp)
    8000c0ca:	766e                	ld	a2,248(sp)
    8000c0cc:	e832                	sd	a2,16(sp)
    8000c0ce:	6592                	ld	a1,256(sp)
    8000c0d0:	ec2e                	sd	a1,24(sp)
    8000c0d2:	f6b2                	sd	a2,360(sp)
    8000c0d4:	faae                	sd	a1,368(sp)
    8000c0d6:	feb2                	sd	a2,376(sp)
    8000c0d8:	e32e                	sd	a1,384(sp)
                ptr::copy_nonoverlapping(ptr.as_ptr(), new_ptr.as_mut_ptr(), old_size);
    8000c0da:	00003097          	auipc	ra,0x3
    8000c0de:	35e080e7          	jalr	862(ra) # 8000f438 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h729713db2b300d39E>
    8000c0e2:	f02a                	sd	a0,32(sp)
    8000c0e4:	a839                	j	8000c102 <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x1e4>
                let new_ptr = self.alloc_impl(new_layout, zeroed)?;
    8000c0e6:	0000                	unimp
    8000c0e8:	00001097          	auipc	ra,0x1
    8000c0ec:	9aa080e7          	jalr	-1622(ra) # 8000ca92 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h37d2ccc52635f8a7E>
    8000c0f0:	a009                	j	8000c0f2 <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x1d4>
    8000c0f2:	00001097          	auipc	ra,0x1
    8000c0f6:	f96080e7          	jalr	-106(ra) # 8000d088 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha082cd91ce3eeff8E>
    8000c0fa:	edaa                	sd	a0,216(sp)
    8000c0fc:	f1ae                	sd	a1,224(sp)
    8000c0fe:	a009                	j	8000c100 <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x1e2>
    8000c100:	a83d                	j	8000c13e <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x220>
                ptr::copy_nonoverlapping(ptr.as_ptr(), new_ptr.as_mut_ptr(), old_size);
    8000c102:	65e2                	ld	a1,24(sp)
    8000c104:	6542                	ld	a0,16(sp)
    8000c106:	00003097          	auipc	ra,0x3
    8000c10a:	3a0080e7          	jalr	928(ra) # 8000f4a6 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$10as_mut_ptr17h1a3f7b42026c1de6E>
    8000c10e:	e42a                	sd	a0,8(sp)
    8000c110:	a009                	j	8000c112 <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x1f4>
    8000c112:	7626                	ld	a2,104(sp)
    8000c114:	7582                	ld	a1,32(sp)
    8000c116:	6522                	ld	a0,8(sp)
    8000c118:	00019097          	auipc	ra,0x19
    8000c11c:	f22080e7          	jalr	-222(ra) # 8002503a <memcpy>
    8000c120:	758a                	ld	a1,160(sp)
                self.deallocate(ptr, old_layout);
    8000c122:	752a                	ld	a0,168(sp)
    8000c124:	766a                	ld	a2,184(sp)
    8000c126:	668e                	ld	a3,192(sp)
    8000c128:	00000097          	auipc	ra,0x0
    8000c12c:	0a8080e7          	jalr	168(ra) # 8000c1d0 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17hd299418f64a2b74eE>
    8000c130:	a009                	j	8000c132 <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x214>
                Ok(new_ptr)
    8000c132:	6562                	ld	a0,24(sp)
    8000c134:	65c2                	ld	a1,16(sp)
    8000c136:	edae                	sd	a1,216(sp)
    8000c138:	f1aa                	sd	a0,224(sp)
        match old_layout.size() {
    8000c13a:	a009                	j	8000c13c <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x21e>
    }
    8000c13c:	a011                	j	8000c140 <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x222>
    8000c13e:	a009                	j	8000c140 <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE+0x222>
    8000c140:	656e                	ld	a0,216(sp)
    8000c142:	758e                	ld	a1,224(sp)
    8000c144:	60ba                	ld	ra,392(sp)
    8000c146:	6159                	addi	sp,sp,400
    8000c148:	8082                	ret

Disassembly of section .text._ZN5alloc5alloc7dealloc17ha462d27313510349E:

000000008000c14a <_ZN5alloc5alloc7dealloc17ha462d27313510349E>:
pub unsafe fn dealloc(ptr: *mut u8, layout: Layout) {
    8000c14a:	7139                	addi	sp,sp,-64
    8000c14c:	fc06                	sd	ra,56(sp)
    8000c14e:	e82a                	sd	a0,16(sp)
    8000c150:	f02e                	sd	a1,32(sp)
    8000c152:	f432                	sd	a2,40(sp)
    8000c154:	f82a                	sd	a0,48(sp)
    8000c156:	1008                	addi	a0,sp,32
    unsafe { __rust_dealloc(ptr, layout.size(), layout.align()) }
    8000c158:	00012097          	auipc	ra,0x12
    8000c15c:	6bc080e7          	jalr	1724(ra) # 8001e814 <_ZN4core5alloc6layout6Layout4size17h7f60c0168860a2ffE>
    8000c160:	ec2a                	sd	a0,24(sp)
    8000c162:	a009                	j	8000c164 <_ZN5alloc5alloc7dealloc17ha462d27313510349E+0x1a>
    8000c164:	1008                	addi	a0,sp,32
    8000c166:	00012097          	auipc	ra,0x12
    8000c16a:	6b8080e7          	jalr	1720(ra) # 8001e81e <_ZN4core5alloc6layout6Layout5align17h05712eb17caed6beE>
    8000c16e:	e42a                	sd	a0,8(sp)
    8000c170:	a009                	j	8000c172 <_ZN5alloc5alloc7dealloc17ha462d27313510349E+0x28>
    8000c172:	6622                	ld	a2,8(sp)
    8000c174:	65e2                	ld	a1,24(sp)
    8000c176:	6542                	ld	a0,16(sp)
    8000c178:	00013097          	auipc	ra,0x13
    8000c17c:	370080e7          	jalr	880(ra) # 8001f4e8 <__rust_dealloc>
    8000c180:	a009                	j	8000c182 <_ZN5alloc5alloc7dealloc17ha462d27313510349E+0x38>
}
    8000c182:	70e2                	ld	ra,56(sp)
    8000c184:	6121                	addi	sp,sp,64
    8000c186:	8082                	ret

Disassembly of section .text._ZN5alloc5alloc7realloc17hcf6ed4b0bd028c82E:

000000008000c188 <_ZN5alloc5alloc7realloc17hcf6ed4b0bd028c82E>:
pub unsafe fn realloc(ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {
    8000c188:	715d                	addi	sp,sp,-80
    8000c18a:	e486                	sd	ra,72(sp)
    8000c18c:	e836                	sd	a3,16(sp)
    8000c18e:	ec2a                	sd	a0,24(sp)
    8000c190:	f42e                	sd	a1,40(sp)
    8000c192:	f832                	sd	a2,48(sp)
    8000c194:	fc2a                	sd	a0,56(sp)
    8000c196:	e0b6                	sd	a3,64(sp)
    8000c198:	1028                	addi	a0,sp,40
    unsafe { __rust_realloc(ptr, layout.size(), layout.align(), new_size) }
    8000c19a:	00012097          	auipc	ra,0x12
    8000c19e:	67a080e7          	jalr	1658(ra) # 8001e814 <_ZN4core5alloc6layout6Layout4size17h7f60c0168860a2ffE>
    8000c1a2:	f02a                	sd	a0,32(sp)
    8000c1a4:	a009                	j	8000c1a6 <_ZN5alloc5alloc7realloc17hcf6ed4b0bd028c82E+0x1e>
    8000c1a6:	1028                	addi	a0,sp,40
    8000c1a8:	00012097          	auipc	ra,0x12
    8000c1ac:	676080e7          	jalr	1654(ra) # 8001e81e <_ZN4core5alloc6layout6Layout5align17h05712eb17caed6beE>
    8000c1b0:	e42a                	sd	a0,8(sp)
    8000c1b2:	a009                	j	8000c1b4 <_ZN5alloc5alloc7realloc17hcf6ed4b0bd028c82E+0x2c>
    8000c1b4:	66c2                	ld	a3,16(sp)
    8000c1b6:	6622                	ld	a2,8(sp)
    8000c1b8:	7582                	ld	a1,32(sp)
    8000c1ba:	6562                	ld	a0,24(sp)
    8000c1bc:	00013097          	auipc	ra,0x13
    8000c1c0:	334080e7          	jalr	820(ra) # 8001f4f0 <__rust_realloc>
    8000c1c4:	e02a                	sd	a0,0(sp)
    8000c1c6:	a009                	j	8000c1c8 <_ZN5alloc5alloc7realloc17hcf6ed4b0bd028c82E+0x40>
}
    8000c1c8:	6502                	ld	a0,0(sp)
    8000c1ca:	60a6                	ld	ra,72(sp)
    8000c1cc:	6161                	addi	sp,sp,80
    8000c1ce:	8082                	ret

Disassembly of section .text._ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17hd299418f64a2b74eE:

000000008000c1d0 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17hd299418f64a2b74eE>:
    unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout) {
    8000c1d0:	715d                	addi	sp,sp,-80
    8000c1d2:	e486                	sd	ra,72(sp)
    8000c1d4:	e82e                	sd	a1,16(sp)
    8000c1d6:	f032                	sd	a2,32(sp)
    8000c1d8:	f436                	sd	a3,40(sp)
    8000c1da:	fc2a                	sd	a0,56(sp)
    8000c1dc:	e0ae                	sd	a1,64(sp)
    8000c1de:	1008                	addi	a0,sp,32
        if layout.size() != 0 {
    8000c1e0:	00012097          	auipc	ra,0x12
    8000c1e4:	634080e7          	jalr	1588(ra) # 8001e814 <_ZN4core5alloc6layout6Layout4size17h7f60c0168860a2ffE>
    8000c1e8:	ec2a                	sd	a0,24(sp)
    8000c1ea:	a009                	j	8000c1ec <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17hd299418f64a2b74eE+0x1c>
    8000c1ec:	6562                	ld	a0,24(sp)
    8000c1ee:	4581                	li	a1,0
    8000c1f0:	00b50a63          	beq	a0,a1,8000c204 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17hd299418f64a2b74eE+0x34>
    8000c1f4:	a009                	j	8000c1f6 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17hd299418f64a2b74eE+0x26>
            unsafe { dealloc(ptr.as_ptr(), layout) }
    8000c1f6:	6542                	ld	a0,16(sp)
    8000c1f8:	00003097          	auipc	ra,0x3
    8000c1fc:	240080e7          	jalr	576(ra) # 8000f438 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h729713db2b300d39E>
    8000c200:	e42a                	sd	a0,8(sp)
    8000c202:	a011                	j	8000c206 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17hd299418f64a2b74eE+0x36>
        if layout.size() != 0 {
    8000c204:	a811                	j	8000c218 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17hd299418f64a2b74eE+0x48>
            unsafe { dealloc(ptr.as_ptr(), layout) }
    8000c206:	6522                	ld	a0,8(sp)
    8000c208:	7582                	ld	a1,32(sp)
    8000c20a:	7622                	ld	a2,40(sp)
    8000c20c:	00000097          	auipc	ra,0x0
    8000c210:	f3e080e7          	jalr	-194(ra) # 8000c14a <_ZN5alloc5alloc7dealloc17ha462d27313510349E>
    8000c214:	a009                	j	8000c216 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17hd299418f64a2b74eE+0x46>
        if layout.size() != 0 {
    8000c216:	a009                	j	8000c218 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$10deallocate17hd299418f64a2b74eE+0x48>
    }
    8000c218:	60a6                	ld	ra,72(sp)
    8000c21a:	6161                	addi	sp,sp,80
    8000c21c:	8082                	ret

Disassembly of section .text._ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$15allocate_zeroed17h62d497141254e70dE:

000000008000c21e <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$15allocate_zeroed17h62d497141254e70dE>:
    fn allocate_zeroed(&self, layout: Layout) -> Result<NonNull<[u8]>, AllocError> {
    8000c21e:	7179                	addi	sp,sp,-48
    8000c220:	f406                	sd	ra,40(sp)
    8000c222:	e82a                	sd	a0,16(sp)
    8000c224:	ec2e                	sd	a1,24(sp)
    8000c226:	f032                	sd	a2,32(sp)
    8000c228:	4685                	li	a3,1
        self.alloc_impl(layout, true)
    8000c22a:	00000097          	auipc	ra,0x0
    8000c22e:	bf0080e7          	jalr	-1040(ra) # 8000be1a <_ZN5alloc5alloc6Global10alloc_impl17h58679304960bb1eaE>
    8000c232:	e02a                	sd	a0,0(sp)
    8000c234:	e42e                	sd	a1,8(sp)
    8000c236:	a009                	j	8000c238 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$15allocate_zeroed17h62d497141254e70dE+0x1a>
    }
    8000c238:	65a2                	ld	a1,8(sp)
    8000c23a:	6502                	ld	a0,0(sp)
    8000c23c:	70a2                	ld	ra,40(sp)
    8000c23e:	6145                	addi	sp,sp,48
    8000c240:	8082                	ret

Disassembly of section .text._ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$4grow17h7670efcd8d0be277E:

000000008000c242 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$4grow17h7670efcd8d0be277E>:
    unsafe fn grow(
    8000c242:	715d                	addi	sp,sp,-80
    8000c244:	e486                	sd	ra,72(sp)
    8000c246:	ec2a                	sd	a0,24(sp)
    8000c248:	f02e                	sd	a1,32(sp)
    8000c24a:	f432                	sd	a2,40(sp)
    8000c24c:	f836                	sd	a3,48(sp)
    8000c24e:	fc3a                	sd	a4,56(sp)
    8000c250:	e0be                	sd	a5,64(sp)
    8000c252:	4801                	li	a6,0
        unsafe { self.grow_impl(ptr, old_layout, new_layout, false) }
    8000c254:	00000097          	auipc	ra,0x0
    8000c258:	cca080e7          	jalr	-822(ra) # 8000bf1e <_ZN5alloc5alloc6Global9grow_impl17h51438424dec2606aE>
    8000c25c:	e42a                	sd	a0,8(sp)
    8000c25e:	e82e                	sd	a1,16(sp)
    8000c260:	a009                	j	8000c262 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$4grow17h7670efcd8d0be277E+0x20>
    }
    8000c262:	65c2                	ld	a1,16(sp)
    8000c264:	6522                	ld	a0,8(sp)
    8000c266:	60a6                	ld	ra,72(sp)
    8000c268:	6161                	addi	sp,sp,80
    8000c26a:	8082                	ret

Disassembly of section .text._ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$8allocate17ha3ee32ed39eb82efE:

000000008000c26c <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$8allocate17ha3ee32ed39eb82efE>:
    fn allocate(&self, layout: Layout) -> Result<NonNull<[u8]>, AllocError> {
    8000c26c:	7179                	addi	sp,sp,-48
    8000c26e:	f406                	sd	ra,40(sp)
    8000c270:	e82a                	sd	a0,16(sp)
    8000c272:	ec2e                	sd	a1,24(sp)
    8000c274:	f032                	sd	a2,32(sp)
    8000c276:	4681                	li	a3,0
        self.alloc_impl(layout, false)
    8000c278:	00000097          	auipc	ra,0x0
    8000c27c:	ba2080e7          	jalr	-1118(ra) # 8000be1a <_ZN5alloc5alloc6Global10alloc_impl17h58679304960bb1eaE>
    8000c280:	e02a                	sd	a0,0(sp)
    8000c282:	e42e                	sd	a1,8(sp)
    8000c284:	a009                	j	8000c286 <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$8allocate17ha3ee32ed39eb82efE+0x1a>
    }
    8000c286:	65a2                	ld	a1,8(sp)
    8000c288:	6502                	ld	a0,0(sp)
    8000c28a:	70a2                	ld	ra,40(sp)
    8000c28c:	6145                	addi	sp,sp,48
    8000c28e:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register7mstatus4read17h128130238af49ec4E:

000000008000c290 <_ZN6kernel4arch5riscv8register7mstatus4read17h128130238af49ec4E>:
use bit_field::BitField;


// read register from M mode
#[inline]
unsafe fn read() -> usize {
    8000c290:	1141                	addi	sp,sp,-16
    let ret:usize;
    llvm_asm!("csrr $0, mstatus":"=r"(ret):::"volatile");
    8000c292:	30002573          	csrr	a0,mstatus
    8000c296:	e42a                	sd	a0,8(sp)
    ret
}
    8000c298:	0141                	addi	sp,sp,16
    8000c29a:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register7mstatus5write17h42ac5b0466add1d5E:

000000008000c29c <_ZN6kernel4arch5riscv8register7mstatus5write17h42ac5b0466add1d5E>:

// Write into register in M mode
#[inline]
unsafe fn write(x: usize) {
    8000c29c:	1141                	addi	sp,sp,-16
    8000c29e:	e42a                	sd	a0,8(sp)
    llvm_asm!("csrw mstatus, $0"::"r"(x)::"volatile");
    8000c2a0:	30051073          	csrw	mstatus,a0
}
    8000c2a4:	0141                	addi	sp,sp,16
    8000c2a6:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register7mstatus7set_mpp17h9778cbd7fe9ad41aE:

000000008000c2a8 <_ZN6kernel4arch5riscv8register7mstatus7set_mpp17h9778cbd7fe9ad41aE>:

// set M Previous Privilege mode to Supervisor, for mret.
pub unsafe fn set_mpp(){
    8000c2a8:	1141                	addi	sp,sp,-16
    let mut x = read();
    8000c2aa:	e406                	sd	ra,8(sp)
    8000c2ac:	00000097          	auipc	ra,0x0
    8000c2b0:	fe4080e7          	jalr	-28(ra) # 8000c290 <_ZN6kernel4arch5riscv8register7mstatus4read17h128130238af49ec4E>
    8000c2b4:	e02a                	sd	a0,0(sp)
    8000c2b6:	a009                	j	8000c2b8 <_ZN6kernel4arch5riscv8register7mstatus7set_mpp17h9778cbd7fe9ad41aE+0x10>
    x &= !MSTATUS_MPP_MASK;
    8000c2b8:	6502                	ld	a0,0(sp)
    8000c2ba:	75f9                	lui	a1,0xffffe
    8000c2bc:	7ff5859b          	addiw	a1,a1,2047
    8000c2c0:	8d6d                	and	a0,a0,a1
    8000c2c2:	6585                	lui	a1,0x1
    8000c2c4:	8005859b          	addiw	a1,a1,-2048
    x |= MSTATUS_MPP_S;
    8000c2c8:	8d4d                	or	a0,a0,a1
    8000c2ca:	e02a                	sd	a0,0(sp)
    write(x);
    8000c2cc:	00000097          	auipc	ra,0x0
    8000c2d0:	fd0080e7          	jalr	-48(ra) # 8000c29c <_ZN6kernel4arch5riscv8register7mstatus5write17h42ac5b0466add1d5E>
    8000c2d4:	a009                	j	8000c2d6 <_ZN6kernel4arch5riscv8register7mstatus7set_mpp17h9778cbd7fe9ad41aE+0x2e>
}
    8000c2d6:	60a2                	ld	ra,8(sp)
    8000c2d8:	0141                	addi	sp,sp,16
    8000c2da:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register7mstatus16enable_interrupt17hf0a2d533b14eb99bE:

000000008000c2dc <_ZN6kernel4arch5riscv8register7mstatus16enable_interrupt17hf0a2d533b14eb99bE>:

// enable machine-mode interrupts.
pub unsafe fn enable_interrupt(){
    8000c2dc:	1141                	addi	sp,sp,-16
    let mut mstatus = read();
    8000c2de:	e406                	sd	ra,8(sp)
    8000c2e0:	00000097          	auipc	ra,0x0
    8000c2e4:	fb0080e7          	jalr	-80(ra) # 8000c290 <_ZN6kernel4arch5riscv8register7mstatus4read17h128130238af49ec4E>
    8000c2e8:	e02a                	sd	a0,0(sp)
    8000c2ea:	a009                	j	8000c2ec <_ZN6kernel4arch5riscv8register7mstatus16enable_interrupt17hf0a2d533b14eb99bE+0x10>
    8000c2ec:	850a                	mv	a0,sp
    8000c2ee:	458d                	li	a1,3
    8000c2f0:	4605                	li	a2,1
    mstatus.set_bit(3, true);
    8000c2f2:	ffff8097          	auipc	ra,0xffff8
    8000c2f6:	aa4080e7          	jalr	-1372(ra) # 80003d96 <_ZN45_$LT$usize$u20$as$u20$bit_field..BitField$GT$7set_bit17h956504fd5d951209E>
    8000c2fa:	a009                	j	8000c2fc <_ZN6kernel4arch5riscv8register7mstatus16enable_interrupt17hf0a2d533b14eb99bE+0x20>
    write(mstatus);
    8000c2fc:	6502                	ld	a0,0(sp)
    8000c2fe:	00000097          	auipc	ra,0x0
    8000c302:	f9e080e7          	jalr	-98(ra) # 8000c29c <_ZN6kernel4arch5riscv8register7mstatus5write17h42ac5b0466add1d5E>
    8000c306:	a009                	j	8000c308 <_ZN6kernel4arch5riscv8register7mstatus16enable_interrupt17hf0a2d533b14eb99bE+0x2c>
}
    8000c308:	60a2                	ld	ra,8(sp)
    8000c30a:	0141                	addi	sp,sp,16
    8000c30c:	8082                	ret

Disassembly of section .text.start:

000000008000c30e <start>:
static mut TIMER_SCRATCH:[[u64; 5]; NCPU] = [[0u64; 5]; NCPU];
static STARTED:AtomicBool = AtomicBool::new(false);

/// 引导启动程序,进行寄存器的初始化操作
#[no_mangle]
pub unsafe fn start() -> !{
    8000c30e:	1101                	addi	sp,sp,-32
    // Set M Previlege mode to Supervisor, for mret
    mstatus::set_mpp();
    8000c310:	ec06                	sd	ra,24(sp)
    8000c312:	00000097          	auipc	ra,0x0
    8000c316:	f96080e7          	jalr	-106(ra) # 8000c2a8 <_ZN6kernel4arch5riscv8register7mstatus7set_mpp17h9778cbd7fe9ad41aE>
    8000c31a:	a009                	j	8000c31c <.LBB0_11>

000000008000c31c <.LBB0_11>:

    // set M Exception Program Counter to main, for mret.
    // requires gcc -mcmodel=medany
    mepc::write(rust_main as usize);
    8000c31c:	00000517          	auipc	a0,0x0
    8000c320:	1a850513          	addi	a0,a0,424 # 8000c4c4 <rust_main>
    8000c324:	ffff6097          	auipc	ra,0xffff6
    8000c328:	38e080e7          	jalr	910(ra) # 800026b2 <_ZN6kernel4arch5riscv8register4mepc5write17h048707cbba437631E>
    8000c32c:	a009                	j	8000c32e <.LBB0_11+0x12>
    8000c32e:	4501                	li	a0,0

    // disable paging for now.
    satp::write(0);
    8000c330:	00012097          	auipc	ra,0x12
    8000c334:	228080e7          	jalr	552(ra) # 8001e558 <_ZN6kernel4arch5riscv8register4satp5write17h136481b47a553b1cE>
    8000c338:	a009                	j	8000c33a <.LBB0_11+0x1e>
    8000c33a:	6541                	lui	a0,0x10
    8000c33c:	357d                	addiw	a0,a0,-1

    // delegate all interrupts and exceptions to supervisor mode.
    medeleg::write(0xffff);
    8000c33e:	00012097          	auipc	ra,0x12
    8000c342:	984080e7          	jalr	-1660(ra) # 8001dcc2 <_ZN6kernel4arch5riscv8register7medeleg5write17h087038b3215eaf8cE>
    8000c346:	a009                	j	8000c348 <.LBB0_11+0x2c>
    8000c348:	6541                	lui	a0,0x10
    8000c34a:	357d                	addiw	a0,a0,-1
    mideleg::write(0xffff);
    8000c34c:	00012097          	auipc	ra,0x12
    8000c350:	938080e7          	jalr	-1736(ra) # 8001dc84 <_ZN6kernel4arch5riscv8register7mideleg5write17hf36c8c211297ea03E>
    8000c354:	a009                	j	8000c356 <.LBB0_11+0x3a>
    sie::intr_on();
    8000c356:	00011097          	auipc	ra,0x11
    8000c35a:	3ac080e7          	jalr	940(ra) # 8001d702 <_ZN6kernel4arch5riscv8register3sie7intr_on17ha44057f13b8cbd2fE>
    8000c35e:	a009                	j	8000c360 <.LBB0_11+0x44>

    // ask for clock interrupts.
    timer_init();
    8000c360:	00000097          	auipc	ra,0x0
    8000c364:	02e080e7          	jalr	46(ra) # 8000c38e <_ZN6kernel10timer_init17h23308923add8e035E>
    8000c368:	a009                	j	8000c36a <.LBB0_11+0x4e>

    // keep each CPU's hartid in its tp register, for cpuid().
    let id:usize = mhartid::read(); 
    8000c36a:	ffffb097          	auipc	ra,0xffffb
    8000c36e:	550080e7          	jalr	1360(ra) # 800078ba <_ZN6kernel4arch5riscv8register7mhartid4read17hb0a253df4f0869d8E>
    8000c372:	85aa                	mv	a1,a0
    8000c374:	e42e                	sd	a1,8(sp)
    8000c376:	e82a                	sd	a0,16(sp)
    8000c378:	a009                	j	8000c37a <.LBB0_11+0x5e>
    tp::write(id);
    8000c37a:	6522                	ld	a0,8(sp)
    8000c37c:	00012097          	auipc	ra,0x12
    8000c380:	2f0080e7          	jalr	752(ra) # 8001e66c <_ZN6kernel4arch5riscv8register2tp5write17hac520d82928ad2ddE>
    8000c384:	a009                	j	8000c386 <.LBB0_11+0x6a>

    // switch to supervisor mode and jump to main().
    llvm_asm!("mret"::::"volatile");
    8000c386:	30200073          	mret

    loop{}
    8000c38a:	a009                	j	8000c38c <.LBB0_11+0x70>
    8000c38c:	a001                	j	8000c38c <.LBB0_11+0x70>

Disassembly of section .text._ZN6kernel10timer_init17h23308923add8e035E:

000000008000c38e <_ZN6kernel10timer_init17h23308923add8e035E>:
/// set up to receive timer interrupts in machine mode,
/// which arrive at timervec in kernelvec.S,
/// which turns them into software interrupts for
/// devintr() in trap.rs.
/// 启动时钟中断
unsafe fn timer_init(){
    8000c38e:	7139                	addi	sp,sp,-64
    // each CPU has a separate source of timer interrupts.
    let id = mhartid::read();
    8000c390:	fc06                	sd	ra,56(sp)
    8000c392:	ffffb097          	auipc	ra,0xffffb
    8000c396:	528080e7          	jalr	1320(ra) # 800078ba <_ZN6kernel4arch5riscv8register7mhartid4read17hb0a253df4f0869d8E>
    8000c39a:	85aa                	mv	a1,a0
    8000c39c:	f02e                	sd	a1,32(sp)
    8000c39e:	f42a                	sd	a0,40(sp)
    8000c3a0:	a009                	j	8000c3a2 <_ZN6kernel10timer_init17h23308923add8e035E+0x14>
    8000c3a2:	7502                	ld	a0,32(sp)
    8000c3a4:	000f45b7          	lui	a1,0xf4
    8000c3a8:	2405859b          	addiw	a1,a1,576

    // ask the CLINT for a timer interrupt.
    let interval = 1000000;// cycles; about 1/10th second in qemu.
    8000c3ac:	f82e                	sd	a1,48(sp)
    clint::add_mtimecmp(id, interval);
    8000c3ae:	ffff7097          	auipc	ra,0xffff7
    8000c3b2:	a9e080e7          	jalr	-1378(ra) # 80002e4c <_ZN6kernel4arch5riscv8register5clint12add_mtimecmp17hca3030d0d062e6f9E>
    8000c3b6:	a009                	j	8000c3b8 <_ZN6kernel10timer_init17h23308923add8e035E+0x2a>

    // prepare information in scratch[] for timervec.
    // scratch[0..2] : space for timervec to save registers.
    // scratch[3] : address of CLINT MTIMECMP register.
    // scratch[4] : desired interval (in cycles) between timer interrupts.
    TIMER_SCRATCH[id][3] = clint::count_mtiecmp(id) as u64;
    8000c3b8:	7502                	ld	a0,32(sp)
    8000c3ba:	ffff7097          	auipc	ra,0xffff7
    8000c3be:	aec080e7          	jalr	-1300(ra) # 80002ea6 <_ZN6kernel4arch5riscv8register5clint13count_mtiecmp17h29e162b64ddfbfccE>
    8000c3c2:	ec2a                	sd	a0,24(sp)
    8000c3c4:	a009                	j	8000c3c6 <_ZN6kernel10timer_init17h23308923add8e035E+0x38>
    8000c3c6:	7582                	ld	a1,32(sp)
    8000c3c8:	451d                	li	a0,7
    8000c3ca:	0ab56c63          	bltu	a0,a1,8000c482 <.LBB1_19+0x3e>
    8000c3ce:	a009                	j	8000c3d0 <_ZN6kernel10timer_init17h23308923add8e035E+0x42>
    8000c3d0:	7582                	ld	a1,32(sp)
    8000c3d2:	6562                	ld	a0,24(sp)
    8000c3d4:	02800613          	li	a2,40
    8000c3d8:	02c586b3          	mul	a3,a1,a2

000000008000c3dc <.LBB1_16>:
    8000c3dc:	00058617          	auipc	a2,0x58
    8000c3e0:	c2460613          	addi	a2,a2,-988 # 80064000 <_ZN6kernel13TIMER_SCRATCH17hc054732b4283b1caE>
    8000c3e4:	9636                	add	a2,a2,a3
    8000c3e6:	ee08                	sd	a0,24(a2)
    8000c3e8:	451d                	li	a0,7
    TIMER_SCRATCH[id][4] = interval;
    8000c3ea:	0ab56763          	bltu	a0,a1,8000c498 <.LBB1_20+0x14>
    8000c3ee:	a009                	j	8000c3f0 <.LBB1_16+0x14>
    8000c3f0:	7582                	ld	a1,32(sp)
    8000c3f2:	02800513          	li	a0,40
    8000c3f6:	02a58633          	mul	a2,a1,a0

000000008000c3fa <.LBB1_17>:
    8000c3fa:	00058517          	auipc	a0,0x58
    8000c3fe:	c0650513          	addi	a0,a0,-1018 # 80064000 <_ZN6kernel13TIMER_SCRATCH17hc054732b4283b1caE>
    8000c402:	962a                	add	a2,a2,a0
    8000c404:	000f4537          	lui	a0,0xf4
    8000c408:	2405051b          	addiw	a0,a0,576
    8000c40c:	f208                	sd	a0,32(a2)
    8000c40e:	451d                	li	a0,7
    mscratch::write(TIMER_SCRATCH[id].as_ptr() as usize);
    8000c410:	08b56f63          	bltu	a0,a1,8000c4ae <.LBB1_21+0x14>
    8000c414:	a009                	j	8000c416 <.LBB1_17+0x1c>
    8000c416:	7502                	ld	a0,32(sp)
    8000c418:	02800593          	li	a1,40
    8000c41c:	02b50533          	mul	a0,a0,a1

000000008000c420 <.LBB1_18>:
    8000c420:	00058597          	auipc	a1,0x58
    8000c424:	be058593          	addi	a1,a1,-1056 # 80064000 <_ZN6kernel13TIMER_SCRATCH17hc054732b4283b1caE>
    8000c428:	952e                	add	a0,a0,a1
    8000c42a:	4595                	li	a1,5
    8000c42c:	00013097          	auipc	ra,0x13
    8000c430:	076080e7          	jalr	118(ra) # 8001f4a2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h1ea05a5f45312d57E>
    8000c434:	e82a                	sd	a0,16(sp)
    8000c436:	a009                	j	8000c438 <.LBB1_18+0x18>
    8000c438:	6542                	ld	a0,16(sp)
    8000c43a:	00012097          	auipc	ra,0x12
    8000c43e:	df0080e7          	jalr	-528(ra) # 8001e22a <_ZN6kernel4arch5riscv8register8mscratch5write17h9d6c8373498c8305E>
    8000c442:	a009                	j	8000c444 <.LBB1_19>

000000008000c444 <.LBB1_19>:
    // set the machine-mode trap handler.
    extern "C" {
        fn timervec();
    }

    mtvec::write(timervec as usize);
    8000c444:	ffff4517          	auipc	a0,0xffff4
    8000c448:	c6c50513          	addi	a0,a0,-916 # 800000b0 <timervec>
    8000c44c:	0000a097          	auipc	ra,0xa
    8000c450:	756080e7          	jalr	1878(ra) # 80016ba2 <_ZN6kernel4arch5riscv8register5mtvec5write17h0d760c5cb091ccffE>
    8000c454:	a009                	j	8000c456 <.LBB1_19+0x12>

    // enable machine-mode interrupts.
    mstatus::enable_interrupt();
    8000c456:	00000097          	auipc	ra,0x0
    8000c45a:	e86080e7          	jalr	-378(ra) # 8000c2dc <_ZN6kernel4arch5riscv8register7mstatus16enable_interrupt17hf0a2d533b14eb99bE>
    8000c45e:	a009                	j	8000c460 <.LBB1_19+0x1c>

    // enable machine-mode timer interrupts.
    mie::write(mie::read() | mie::MIE::MTIE as usize);
    8000c460:	00000097          	auipc	ra,0x0
    8000c464:	72c080e7          	jalr	1836(ra) # 8000cb8c <_ZN6kernel4arch5riscv8register3mie4read17h69b673b504f0a30eE>
    8000c468:	e42a                	sd	a0,8(sp)
    8000c46a:	a009                	j	8000c46c <.LBB1_19+0x28>
    8000c46c:	6522                	ld	a0,8(sp)
    8000c46e:	08056513          	ori	a0,a0,128
    8000c472:	00000097          	auipc	ra,0x0
    8000c476:	726080e7          	jalr	1830(ra) # 8000cb98 <_ZN6kernel4arch5riscv8register3mie5write17hd754beffbe0101f6E>
    8000c47a:	a009                	j	8000c47c <.LBB1_19+0x38>

}
    8000c47c:	70e2                	ld	ra,56(sp)
    8000c47e:	6121                	addi	sp,sp,64
    8000c480:	8082                	ret
    TIMER_SCRATCH[id][3] = clint::count_mtiecmp(id) as u64;
    8000c482:	7502                	ld	a0,32(sp)

000000008000c484 <.LBB1_20>:
    8000c484:	0001b617          	auipc	a2,0x1b
    8000c488:	79c60613          	addi	a2,a2,1948 # 80027c20 <.L__unnamed_1>
    8000c48c:	45a1                	li	a1,8
    8000c48e:	00016097          	auipc	ra,0x16
    8000c492:	c9a080e7          	jalr	-870(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    8000c496:	0000                	unimp
    TIMER_SCRATCH[id][4] = interval;
    8000c498:	7502                	ld	a0,32(sp)

000000008000c49a <.LBB1_21>:
    8000c49a:	0001b617          	auipc	a2,0x1b
    8000c49e:	79e60613          	addi	a2,a2,1950 # 80027c38 <.L__unnamed_2>
    8000c4a2:	45a1                	li	a1,8
    8000c4a4:	00016097          	auipc	ra,0x16
    8000c4a8:	c84080e7          	jalr	-892(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    8000c4ac:	0000                	unimp
    mscratch::write(TIMER_SCRATCH[id].as_ptr() as usize);
    8000c4ae:	7502                	ld	a0,32(sp)

000000008000c4b0 <.LBB1_22>:
    8000c4b0:	0001b617          	auipc	a2,0x1b
    8000c4b4:	7a060613          	addi	a2,a2,1952 # 80027c50 <.L__unnamed_3>
    8000c4b8:	45a1                	li	a1,8
    8000c4ba:	00016097          	auipc	ra,0x16
    8000c4be:	c6e080e7          	jalr	-914(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text.rust_main:

000000008000c4c4 <rust_main>:

/// 进入内核初始化
#[no_mangle]
pub unsafe extern "C" fn rust_main() {
    8000c4c4:	7169                	addi	sp,sp,-304
    if cpu::cpuid() == 0 {
    8000c4c6:	f606                	sd	ra,296(sp)
    8000c4c8:	00005097          	auipc	ra,0x5
    8000c4cc:	4fa080e7          	jalr	1274(ra) # 800119c2 <_ZN6kernel7process3cpu5cpuid17h605093a6a9a60164E>
    8000c4d0:	fc2a                	sd	a0,56(sp)
    8000c4d2:	a009                	j	8000c4d4 <rust_main+0x10>
    8000c4d4:	7562                	ld	a0,56(sp)
    8000c4d6:	4581                	li	a1,0
    8000c4d8:	16b51363          	bne	a0,a1,8000c63e <.LBB2_48+0x20>
    8000c4dc:	a009                	j	8000c4de <rust_main+0x1a>
        console_init();
    8000c4de:	ffff8097          	auipc	ra,0xffff8
    8000c4e2:	140080e7          	jalr	320(ra) # 8000461e <_ZN6kernel6driver7console12console_init17h6fb79c78956ee465E>
    8000c4e6:	a009                	j	8000c4e8 <.LBB2_38>

000000008000c4e8 <.LBB2_38>:
        println!("{}",LOGO); 
    8000c4e8:	0001c517          	auipc	a0,0x1c
    8000c4ec:	8d850513          	addi	a0,a0,-1832 # 80027dc0 <.L__unnamed_4>
    8000c4f0:	e12a                	sd	a0,128(sp)
    8000c4f2:	f22a                	sd	a0,288(sp)

000000008000c4f4 <.LBB2_39>:
    8000c4f4:	00012597          	auipc	a1,0x12
    8000c4f8:	f2458593          	addi	a1,a1,-220 # 8001e418 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E>
    8000c4fc:	00012097          	auipc	ra,0x12
    8000c500:	f40080e7          	jalr	-192(ra) # 8001e43c <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>
    8000c504:	f42a                	sd	a0,40(sp)
    8000c506:	f82e                	sd	a1,48(sp)
    8000c508:	a009                	j	8000c50a <.LBB2_39+0x16>
    8000c50a:	7542                	ld	a0,48(sp)
    8000c50c:	75a2                	ld	a1,40(sp)
    8000c50e:	f8ae                	sd	a1,112(sp)
    8000c510:	fcaa                	sd	a0,120(sp)

000000008000c512 <.LBB2_40>:
    8000c512:	0001b597          	auipc	a1,0x1b
    8000c516:	78e58593          	addi	a1,a1,1934 # 80027ca0 <.L__unnamed_5>
    8000c51a:	0088                	addi	a0,sp,64
    8000c51c:	4609                	li	a2,2
    8000c51e:	1894                	addi	a3,sp,112
    8000c520:	4705                	li	a4,1
    8000c522:	ffff9097          	auipc	ra,0xffff9
    8000c526:	f12080e7          	jalr	-238(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8000c52a:	a009                	j	8000c52c <.LBB2_40+0x1a>
    8000c52c:	0088                	addi	a0,sp,64
    8000c52e:	00011097          	auipc	ra,0x11
    8000c532:	682080e7          	jalr	1666(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8000c536:	a009                	j	8000c538 <.LBB2_41>

000000008000c538 <.LBB2_41>:
        println!("xv6-rust kernel is booting!");
    8000c538:	0001c597          	auipc	a1,0x1c
    8000c53c:	8b858593          	addi	a1,a1,-1864 # 80027df0 <.L__unnamed_6>

000000008000c540 <.LBB2_42>:
    8000c540:	0001b697          	auipc	a3,0x1b
    8000c544:	75868693          	addi	a3,a3,1880 # 80027c98 <.L__unnamed_12>
    8000c548:	0128                	addi	a0,sp,136
    8000c54a:	4605                	li	a2,1
    8000c54c:	4701                	li	a4,0
    8000c54e:	ffff9097          	auipc	ra,0xffff9
    8000c552:	ee6080e7          	jalr	-282(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8000c556:	a009                	j	8000c558 <.LBB2_42+0x18>
    8000c558:	0128                	addi	a0,sp,136
    8000c55a:	00011097          	auipc	ra,0x11
    8000c55e:	656080e7          	jalr	1622(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8000c562:	a009                	j	8000c564 <.LBB2_43>

000000008000c564 <.LBB2_43>:
        KERNEL_HEAP.kinit(); // physical page allocator
    8000c564:	0004b517          	auipc	a0,0x4b
    8000c568:	fdc50513          	addi	a0,a0,-36 # 80057540 <_ZN6kernel6memory6kalloc11KERNEL_HEAP17hee4af7794785bdacE>
    8000c56c:	00000097          	auipc	ra,0x0
    8000c570:	36c080e7          	jalr	876(ra) # 8000c8d8 <_ZN6kernel6memory6kalloc10KernelHeap5kinit17hadc76a3ae98e4bd9E>
    8000c574:	a009                	j	8000c576 <.LBB2_43+0x12>
        kvm_init(); // create kernel page table
    8000c576:	ffffe097          	auipc	ra,0xffffe
    8000c57a:	15e080e7          	jalr	350(ra) # 8000a6d4 <kvm_init>
    8000c57e:	a009                	j	8000c580 <.LBB2_43+0x1c>
        kvm_init_hart(); // turn on paging
    8000c580:	ffffe097          	auipc	ra,0xffffe
    8000c584:	192080e7          	jalr	402(ra) # 8000a712 <_ZN6kernel6memory7mapping10kernel_map13kvm_init_hart17hca08c717b940e5bcE>
    8000c588:	a009                	j	8000c58a <.LBB2_44>

000000008000c58a <.LBB2_44>:
        PROC_MANAGER.init(); // process table
    8000c58a:	0004b517          	auipc	a0,0x4b
    8000c58e:	01650513          	addi	a0,a0,22 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    8000c592:	00001097          	auipc	ra,0x1
    8000c596:	c9c080e7          	jalr	-868(ra) # 8000d22e <_ZN6kernel7process7manager11ProcManager4init17h6f55d4e0f14b932aE>
    8000c59a:	a009                	j	8000c59c <.LBB2_44+0x12>
        trap_init_hart(); // trap vectors
    8000c59c:	ffffa097          	auipc	ra,0xffffa
    8000c5a0:	c3c080e7          	jalr	-964(ra) # 800061d8 <_ZN6kernel4trap14trap_init_hart17h35cf9f3a8bf40f94E>
    8000c5a4:	a009                	j	8000c5a6 <.LBB2_44+0x1c>
        plic_init(); // set up interrupt controller
    8000c5a6:	00011097          	auipc	ra,0x11
    8000c5aa:	304080e7          	jalr	772(ra) # 8001d8aa <_ZN6kernel6driver4plic9plic_init17he281b1081f5a24ddE>
    8000c5ae:	a009                	j	8000c5b0 <.LBB2_44+0x26>
        plic_init_hart(); // ask PLIC for device interrupts
    8000c5b0:	00011097          	auipc	ra,0x11
    8000c5b4:	32a080e7          	jalr	810(ra) # 8001d8da <_ZN6kernel6driver4plic14plic_init_hart17he37af6da421066b1E>
    8000c5b8:	a009                	j	8000c5ba <.LBB2_45>

000000008000c5ba <.LBB2_45>:
        BCACHE.binit(); // buffer cache
    8000c5ba:	00023517          	auipc	a0,0x23
    8000c5be:	a4650513          	addi	a0,a0,-1466 # 8002f000 <_ZN6kernel2fs3bio6BCACHE17h4811aac4f8d79dc4E>
    8000c5c2:	ffff7097          	auipc	ra,0xffff7
    8000c5c6:	9e2080e7          	jalr	-1566(ra) # 80002fa4 <_ZN6kernel2fs3bio6Bcache5binit17heeb55dbf2032387dE>
    8000c5ca:	a009                	j	8000c5cc <.LBB2_46>

000000008000c5cc <.LBB2_46>:
        DISK.acquire().init(); // emulated hard disk
    8000c5cc:	00051517          	auipc	a0,0x51
    8000c5d0:	a3450513          	addi	a0,a0,-1484 # 8005d000 <_ZN6kernel6driver11virtio_disk4DISK17h9e8917083150b34aE>
    8000c5d4:	00004097          	auipc	ra,0x4
    8000c5d8:	f80080e7          	jalr	-128(ra) # 80010554 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h922bace5232f6228E>
    8000c5dc:	fd2a                	sd	a0,184(sp)
    8000c5de:	a009                	j	8000c5e0 <.LBB2_46+0x14>
    8000c5e0:	1928                	addi	a0,sp,184
    8000c5e2:	00005097          	auipc	ra,0x5
    8000c5e6:	d8e080e7          	jalr	-626(ra) # 80011370 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h362a59dae1fa4f35E>
    8000c5ea:	f02a                	sd	a0,32(sp)
    8000c5ec:	a009                	j	8000c5ee <.LBB2_46+0x22>
    8000c5ee:	7502                	ld	a0,32(sp)
    8000c5f0:	00012097          	auipc	ra,0x12
    8000c5f4:	356080e7          	jalr	854(ra) # 8001e946 <_ZN6kernel6driver11virtio_disk4Disk4init17h491380cac5f59b4bE>
    8000c5f8:	a009                	j	8000c5fa <.LBB2_46+0x2e>
    8000c5fa:	1928                	addi	a0,sp,184
    8000c5fc:	ffffb097          	auipc	ra,0xffffb
    8000c600:	ade080e7          	jalr	-1314(ra) # 800070da <_ZN4core3ptr99drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..driver..virtio_disk..Disk$GT$$GT$17h4fc01c278f0bfe6cE>
    8000c604:	a009                	j	8000c606 <.LBB2_47>

000000008000c606 <.LBB2_47>:
        PROC_MANAGER.user_init(); // first user process
    8000c606:	0004b517          	auipc	a0,0x4b
    8000c60a:	f9a50513          	addi	a0,a0,-102 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    8000c60e:	00001097          	auipc	ra,0x1
    8000c612:	dcc080e7          	jalr	-564(ra) # 8000d3da <_ZN6kernel7process7manager11ProcManager9user_init17h45a7031cbcd11d0fE>
    8000c616:	a009                	j	8000c618 <.LBB2_47+0x12>
    8000c618:	4611                	li	a2,4
        STARTED.store(true, Ordering::SeqCst);
    8000c61a:	0cc10323          	sb	a2,198(sp)

000000008000c61e <.LBB2_48>:
    8000c61e:	00058517          	auipc	a0,0x58
    8000c622:	f6350513          	addi	a0,a0,-157 # 80064581 <_ZN6kernel7STARTED17h3a2948c645b636c9E>
    8000c626:	4585                	li	a1,1
    8000c628:	ffff8097          	auipc	ra,0xffff8
    8000c62c:	0c4080e7          	jalr	196(ra) # 800046ec <_ZN4core4sync6atomic10AtomicBool5store17h325e21ca90edd7e7E>
    8000c630:	a009                	j	8000c632 <.LBB2_48+0x14>
        sstatus::intr_on();
    8000c632:	00012097          	auipc	ra,0x12
    8000c636:	b76080e7          	jalr	-1162(ra) # 8001e1a8 <_ZN6kernel4arch5riscv8register7sstatus7intr_on17h10d927cfe74faba7E>
    8000c63a:	a009                	j	8000c63c <.LBB2_48+0x1e>
    if cpu::cpuid() == 0 {
    8000c63c:	a065                	j	8000c6e4 <.LBB2_52>
    8000c63e:	4591                	li	a1,4
    } else {
        while !STARTED.load(Ordering::SeqCst){}
    8000c640:	0cb103a3          	sb	a1,199(sp)

000000008000c644 <.LBB2_49>:
    8000c644:	00058517          	auipc	a0,0x58
    8000c648:	f3d50513          	addi	a0,a0,-195 # 80064581 <_ZN6kernel7STARTED17h3a2948c645b636c9E>
    8000c64c:	ffff8097          	auipc	ra,0xffff8
    8000c650:	022080e7          	jalr	34(ra) # 8000466e <_ZN4core4sync6atomic10AtomicBool4load17h49a663f50dd66935E>
    8000c654:	ec2a                	sd	a0,24(sp)
    8000c656:	a009                	j	8000c658 <.LBB2_49+0x14>
    8000c658:	6562                	ld	a0,24(sp)
    8000c65a:	4581                	li	a1,0
    8000c65c:	00b50963          	beq	a0,a1,8000c66e <.LBB2_49+0x2a>
    8000c660:	a009                	j	8000c662 <.LBB2_49+0x1e>
        println!("hart {} starting\n", cpu::cpuid());
    8000c662:	00005097          	auipc	ra,0x5
    8000c666:	360080e7          	jalr	864(ra) # 800119c2 <_ZN6kernel7process3cpu5cpuid17h605093a6a9a60164E>
    8000c66a:	ea2a                	sd	a0,272(sp)
    8000c66c:	a011                	j	8000c670 <.LBB2_49+0x2c>
        while !STARTED.load(Ordering::SeqCst){}
    8000c66e:	bfc1                	j	8000c63e <.LBB2_48+0x20>
    8000c670:	0a08                	addi	a0,sp,272
        println!("hart {} starting\n", cpu::cpuid());
    8000c672:	e62a                	sd	a0,264(sp)
    8000c674:	ee2a                	sd	a0,280(sp)

000000008000c676 <.LBB2_50>:
    8000c676:	00018597          	auipc	a1,0x18
    8000c67a:	1e258593          	addi	a1,a1,482 # 80024858 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h9c6c4af1578f7c29E>
    8000c67e:	00013097          	auipc	ra,0x13
    8000c682:	ea8080e7          	jalr	-344(ra) # 8001f526 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    8000c686:	e42a                	sd	a0,8(sp)
    8000c688:	e82e                	sd	a1,16(sp)
    8000c68a:	a009                	j	8000c68c <.LBB2_50+0x16>
    8000c68c:	6542                	ld	a0,16(sp)
    8000c68e:	65a2                	ld	a1,8(sp)
    8000c690:	fdae                	sd	a1,248(sp)
    8000c692:	e22a                	sd	a0,256(sp)

000000008000c694 <.LBB2_51>:
    8000c694:	0001b597          	auipc	a1,0x1b
    8000c698:	5e458593          	addi	a1,a1,1508 # 80027c78 <.L__unnamed_8>
    8000c69c:	01a8                	addi	a0,sp,200
    8000c69e:	4609                	li	a2,2
    8000c6a0:	19b4                	addi	a3,sp,248
    8000c6a2:	4705                	li	a4,1
    8000c6a4:	ffff9097          	auipc	ra,0xffff9
    8000c6a8:	d90080e7          	jalr	-624(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8000c6ac:	a009                	j	8000c6ae <.LBB2_51+0x1a>
    8000c6ae:	01a8                	addi	a0,sp,200
    8000c6b0:	00011097          	auipc	ra,0x11
    8000c6b4:	500080e7          	jalr	1280(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8000c6b8:	a009                	j	8000c6ba <.LBB2_51+0x26>
        kvm_init_hart(); // turn on paging
    8000c6ba:	ffffe097          	auipc	ra,0xffffe
    8000c6be:	058080e7          	jalr	88(ra) # 8000a712 <_ZN6kernel6memory7mapping10kernel_map13kvm_init_hart17hca08c717b940e5bcE>
    8000c6c2:	a009                	j	8000c6c4 <.LBB2_51+0x30>
        trap_init_hart(); // install kernel trap vector
    8000c6c4:	ffffa097          	auipc	ra,0xffffa
    8000c6c8:	b14080e7          	jalr	-1260(ra) # 800061d8 <_ZN6kernel4trap14trap_init_hart17h35cf9f3a8bf40f94E>
    8000c6cc:	a009                	j	8000c6ce <.LBB2_51+0x3a>
        plic_init(); // set up interrupt controller
    8000c6ce:	00011097          	auipc	ra,0x11
    8000c6d2:	1dc080e7          	jalr	476(ra) # 8001d8aa <_ZN6kernel6driver4plic9plic_init17he281b1081f5a24ddE>
    8000c6d6:	a009                	j	8000c6d8 <.LBB2_51+0x44>
        plic_init_hart(); // ask PLIC for device interrupts
    8000c6d8:	00011097          	auipc	ra,0x11
    8000c6dc:	202080e7          	jalr	514(ra) # 8001d8da <_ZN6kernel6driver4plic14plic_init_hart17he37af6da421066b1E>
    8000c6e0:	a009                	j	8000c6e2 <.LBB2_51+0x4e>
    if cpu::cpuid() == 0 {
    8000c6e2:	a009                	j	8000c6e4 <.LBB2_52>

000000008000c6e4 <.LBB2_52>:
    }
    CPU_MANAGER.scheduler();
    8000c6e4:	00058517          	auipc	a0,0x58
    8000c6e8:	a5c50513          	addi	a0,a0,-1444 # 80064140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    8000c6ec:	00005097          	auipc	ra,0x5
    8000c6f0:	3a4080e7          	jalr	932(ra) # 80011a90 <_ZN6kernel7process3cpu10CPUManager9scheduler17hecedd2e89c301e93E>
    8000c6f4:	a009                	j	8000c6f6 <.LBB2_52+0x12>
    
}
    8000c6f6:	70b2                	ld	ra,296(sp)
    8000c6f8:	6155                	addi	sp,sp,304
    8000c6fa:	8082                	ret

Disassembly of section .text.rust_oom:

000000008000c6fc <rust_oom>:

#[global_allocator]
pub static KERNEL_HEAP: KernelHeap = KernelHeap::uninit();

#[alloc_error_handler]
fn alloc_error_handler(layout: Layout) -> ! {
    8000c6fc:	7119                	addi	sp,sp,-128
    8000c6fe:	fc86                	sd	ra,120(sp)
    8000c700:	ec2a                	sd	a0,24(sp)
    8000c702:	f02e                	sd	a1,32(sp)
    8000c704:	0828                	addi	a0,sp,24
    panic!("alloc error: {:?}", layout);
    8000c706:	f4aa                	sd	a0,104(sp)
    8000c708:	f8aa                	sd	a0,112(sp)

000000008000c70a <.LBB0_3>:
    8000c70a:	00018597          	auipc	a1,0x18
    8000c70e:	7e858593          	addi	a1,a1,2024 # 80024ef2 <_ZN64_$LT$core..alloc..layout..Layout$u20$as$u20$core..fmt..Debug$GT$3fmt17h791c624323e1e5daE>
    8000c712:	00013097          	auipc	ra,0x13
    8000c716:	e36080e7          	jalr	-458(ra) # 8001f548 <_ZN4core3fmt10ArgumentV13new17hc2eeb6f5565b6dd2E>
    8000c71a:	e42a                	sd	a0,8(sp)
    8000c71c:	e82e                	sd	a1,16(sp)
    8000c71e:	a009                	j	8000c720 <.LBB0_3+0x16>
    8000c720:	6542                	ld	a0,16(sp)
    8000c722:	65a2                	ld	a1,8(sp)
    8000c724:	ecae                	sd	a1,88(sp)
    8000c726:	f0aa                	sd	a0,96(sp)

000000008000c728 <.LBB0_4>:
    8000c728:	0001b597          	auipc	a1,0x1b
    8000c72c:	6e858593          	addi	a1,a1,1768 # 80027e10 <.L__unnamed_1>
    8000c730:	1028                	addi	a0,sp,40
    8000c732:	08b4                	addi	a3,sp,88
    8000c734:	4705                	li	a4,1
    8000c736:	863a                	mv	a2,a4
    8000c738:	ffff9097          	auipc	ra,0xffff9
    8000c73c:	cfc080e7          	jalr	-772(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8000c740:	a009                	j	8000c742 <.LBB0_5>

000000008000c742 <.LBB0_5>:
    8000c742:	0001b597          	auipc	a1,0x1b
    8000c746:	6f658593          	addi	a1,a1,1782 # 80027e38 <.L__unnamed_2>
    8000c74a:	1028                	addi	a0,sp,40
    8000c74c:	00016097          	auipc	ra,0x16
    8000c750:	a1c080e7          	jalr	-1508(ra) # 80022168 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
	...

Disassembly of section .text._ZN87_$LT$kernel..memory..kalloc..KernelHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17h526e18d88530d166E:

000000008000c756 <_ZN87_$LT$kernel..memory..kalloc..KernelHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17h526e18d88530d166E>:

// kernel heap
pub struct KernelHeap(Spinlock<BuddySystem>);

unsafe impl GlobalAlloc for KernelHeap {
    unsafe fn alloc(&self, layout: Layout) -> *mut u8 {
    8000c756:	715d                	addi	sp,sp,-80
    8000c758:	e486                	sd	ra,72(sp)
    8000c75a:	ec32                	sd	a2,24(sp)
    8000c75c:	f02e                	sd	a1,32(sp)
    8000c75e:	f82a                	sd	a0,48(sp)
    8000c760:	fc2e                	sd	a1,56(sp)
    8000c762:	e0b2                	sd	a2,64(sp)
        self.0.acquire().alloc(layout)
    8000c764:	00004097          	auipc	ra,0x4
    8000c768:	990080e7          	jalr	-1648(ra) # 800100f4 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h107253eaf5028ed4E>
    8000c76c:	f42a                	sd	a0,40(sp)
    8000c76e:	a009                	j	8000c770 <_ZN87_$LT$kernel..memory..kalloc..KernelHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17h526e18d88530d166E+0x1a>
    8000c770:	1028                	addi	a0,sp,40
    8000c772:	00005097          	auipc	ra,0x5
    8000c776:	c1e080e7          	jalr	-994(ra) # 80011390 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h5eeb9448b47ad682E>
    8000c77a:	e82a                	sd	a0,16(sp)
    8000c77c:	a009                	j	8000c77e <_ZN87_$LT$kernel..memory..kalloc..KernelHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17h526e18d88530d166E+0x28>
    8000c77e:	6662                	ld	a2,24(sp)
    8000c780:	7582                	ld	a1,32(sp)
    8000c782:	6542                	ld	a0,16(sp)
    8000c784:	00013097          	auipc	ra,0x13
    8000c788:	6d6080e7          	jalr	1750(ra) # 8001fe5a <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E>
    8000c78c:	e42a                	sd	a0,8(sp)
    8000c78e:	a009                	j	8000c790 <_ZN87_$LT$kernel..memory..kalloc..KernelHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17h526e18d88530d166E+0x3a>
    8000c790:	1028                	addi	a0,sp,40
    }
    8000c792:	ffffb097          	auipc	ra,0xffffb
    8000c796:	8a0080e7          	jalr	-1888(ra) # 80007032 <_ZN4core3ptr88drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$allocator..BuddySystem$GT$$GT$17hd20388e8ca3384f9E>
    8000c79a:	a009                	j	8000c79c <_ZN87_$LT$kernel..memory..kalloc..KernelHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17h526e18d88530d166E+0x46>
    8000c79c:	6522                	ld	a0,8(sp)
    8000c79e:	60a6                	ld	ra,72(sp)
    8000c7a0:	6161                	addi	sp,sp,80
    8000c7a2:	8082                	ret

Disassembly of section .text._ZN87_$LT$kernel..memory..kalloc..KernelHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$7dealloc17hf9dbc9c2cc300335E:

000000008000c7a4 <_ZN87_$LT$kernel..memory..kalloc..KernelHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$7dealloc17hf9dbc9c2cc300335E>:

    unsafe fn dealloc(&self, ptr: *mut u8, layout: Layout) {
    8000c7a4:	715d                	addi	sp,sp,-80
    8000c7a6:	e486                	sd	ra,72(sp)
    8000c7a8:	e436                	sd	a3,8(sp)
    8000c7aa:	e832                	sd	a2,16(sp)
    8000c7ac:	ec2e                	sd	a1,24(sp)
    8000c7ae:	f42a                	sd	a0,40(sp)
    8000c7b0:	f82e                	sd	a1,48(sp)
    8000c7b2:	fc32                	sd	a2,56(sp)
    8000c7b4:	e0b6                	sd	a3,64(sp)
        self.0.acquire().dealloc(ptr, layout)
    8000c7b6:	00004097          	auipc	ra,0x4
    8000c7ba:	93e080e7          	jalr	-1730(ra) # 800100f4 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h107253eaf5028ed4E>
    8000c7be:	f02a                	sd	a0,32(sp)
    8000c7c0:	a009                	j	8000c7c2 <_ZN87_$LT$kernel..memory..kalloc..KernelHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$7dealloc17hf9dbc9c2cc300335E+0x1e>
    8000c7c2:	1008                	addi	a0,sp,32
    8000c7c4:	00005097          	auipc	ra,0x5
    8000c7c8:	bcc080e7          	jalr	-1076(ra) # 80011390 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h5eeb9448b47ad682E>
    8000c7cc:	e02a                	sd	a0,0(sp)
    8000c7ce:	a009                	j	8000c7d0 <_ZN87_$LT$kernel..memory..kalloc..KernelHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$7dealloc17hf9dbc9c2cc300335E+0x2c>
    8000c7d0:	66a2                	ld	a3,8(sp)
    8000c7d2:	6642                	ld	a2,16(sp)
    8000c7d4:	65e2                	ld	a1,24(sp)
    8000c7d6:	6502                	ld	a0,0(sp)
    8000c7d8:	00014097          	auipc	ra,0x14
    8000c7dc:	9ce080e7          	jalr	-1586(ra) # 800201a6 <_ZN9allocator11BuddySystem7dealloc17hfe9c60ecf0af29ebE>
    8000c7e0:	a009                	j	8000c7e2 <_ZN87_$LT$kernel..memory..kalloc..KernelHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$7dealloc17hf9dbc9c2cc300335E+0x3e>
    8000c7e2:	1008                	addi	a0,sp,32
    }
    8000c7e4:	ffffb097          	auipc	ra,0xffffb
    8000c7e8:	84e080e7          	jalr	-1970(ra) # 80007032 <_ZN4core3ptr88drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$allocator..BuddySystem$GT$$GT$17hd20388e8ca3384f9E>
    8000c7ec:	a009                	j	8000c7ee <_ZN87_$LT$kernel..memory..kalloc..KernelHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$7dealloc17hf9dbc9c2cc300335E+0x4a>
    8000c7ee:	60a6                	ld	ra,72(sp)
    8000c7f0:	6161                	addi	sp,sp,80
    8000c7f2:	8082                	ret

Disassembly of section .text._ZN6kernel6memory6kalloc10KernelHeap4init17he7fa11863b607d55E:

000000008000c7f4 <_ZN6kernel6memory6kalloc10KernelHeap4init17he7fa11863b607d55E>:
impl KernelHeap {
    const fn uninit() -> Self {
        Self(Spinlock::new(BuddySystem::uninit(), "kernel heap"))
    }

    unsafe fn init(&self, start: usize, end: usize) {
    8000c7f4:	7111                	addi	sp,sp,-256
    8000c7f6:	fd86                	sd	ra,248(sp)
    8000c7f8:	f032                	sd	a2,32(sp)
    8000c7fa:	f42e                	sd	a1,40(sp)
    8000c7fc:	edaa                	sd	a0,216(sp)
    8000c7fe:	f1ae                	sd	a1,224(sp)
    8000c800:	f5b2                	sd	a2,232(sp)
        let res = self.0.acquire().init(start, end, LEAF_SIZE, MAX_ALIGNMENT);
    8000c802:	00004097          	auipc	ra,0x4
    8000c806:	8f2080e7          	jalr	-1806(ra) # 800100f4 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h107253eaf5028ed4E>
    8000c80a:	e4aa                	sd	a0,72(sp)
    8000c80c:	a009                	j	8000c80e <_ZN6kernel6memory6kalloc10KernelHeap4init17he7fa11863b607d55E+0x1a>
    8000c80e:	00a8                	addi	a0,sp,72
    8000c810:	00005097          	auipc	ra,0x5
    8000c814:	b80080e7          	jalr	-1152(ra) # 80011390 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h5eeb9448b47ad682E>
    8000c818:	ec2a                	sd	a0,24(sp)
    8000c81a:	a009                	j	8000c81c <_ZN6kernel6memory6kalloc10KernelHeap4init17he7fa11863b607d55E+0x28>
    8000c81c:	7602                	ld	a2,32(sp)
    8000c81e:	75a2                	ld	a1,40(sp)
    8000c820:	6562                	ld	a0,24(sp)
    8000c822:	46c1                	li	a3,16
    8000c824:	6705                	lui	a4,0x1
    8000c826:	00013097          	auipc	ra,0x13
    8000c82a:	0ec080e7          	jalr	236(ra) # 8001f912 <_ZN9allocator11BuddySystem4init17h0838f8d4c4026c43E>
    8000c82e:	fc2a                	sd	a0,56(sp)
    8000c830:	e0ae                	sd	a1,64(sp)
    8000c832:	a009                	j	8000c834 <_ZN6kernel6memory6kalloc10KernelHeap4init17he7fa11863b607d55E+0x40>
    8000c834:	00a8                	addi	a0,sp,72
    8000c836:	ffffa097          	auipc	ra,0xffffa
    8000c83a:	7fc080e7          	jalr	2044(ra) # 80007032 <_ZN4core3ptr88drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$allocator..BuddySystem$GT$$GT$17hd20388e8ca3384f9E>
    8000c83e:	a009                	j	8000c840 <_ZN6kernel6memory6kalloc10KernelHeap4init17he7fa11863b607d55E+0x4c>
        match res {
            Ok(()) => {
    8000c840:	7562                	ld	a0,56(sp)
    8000c842:	00a035b3          	snez	a1,a0
    8000c846:	4581                	li	a1,0
    8000c848:	02b50663          	beq	a0,a1,8000c874 <.LBB3_16>
    8000c84c:	a009                	j	8000c84e <_ZN6kernel6memory6kalloc10KernelHeap4init17he7fa11863b607d55E+0x5a>
                println!("KernelHeap: success to init.");
            },

            Err(err) => {
    8000c84e:	75e2                	ld	a1,56(sp)
    8000c850:	6506                	ld	a0,64(sp)
    8000c852:	e12e                	sd	a1,128(sp)
    8000c854:	e52a                	sd	a0,136(sp)
    8000c856:	0108                	addi	a0,sp,128
                println!("KernelHeap: init error: {}.", err);
    8000c858:	e9aa                	sd	a0,208(sp)
    8000c85a:	f9aa                	sd	a0,240(sp)

000000008000c85c <.LBB3_15>:
    8000c85c:	00012597          	auipc	a1,0x12
    8000c860:	bbc58593          	addi	a1,a1,-1092 # 8001e418 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E>
    8000c864:	00012097          	auipc	ra,0x12
    8000c868:	bd8080e7          	jalr	-1064(ra) # 8001e43c <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>
    8000c86c:	e42a                	sd	a0,8(sp)
    8000c86e:	e82e                	sd	a1,16(sp)
    8000c870:	a80d                	j	8000c8a2 <.LBB3_17+0x26>
	...

000000008000c874 <.LBB3_16>:
                println!("KernelHeap: success to init.");
    8000c874:	0001b597          	auipc	a1,0x1b
    8000c878:	63c58593          	addi	a1,a1,1596 # 80027eb0 <.L__unnamed_3>

000000008000c87c <.LBB3_17>:
    8000c87c:	0001b697          	auipc	a3,0x1b
    8000c880:	64468693          	addi	a3,a3,1604 # 80027ec0 <.L__unnamed_14>
    8000c884:	0888                	addi	a0,sp,80
    8000c886:	4605                	li	a2,1
    8000c888:	4701                	li	a4,0
    8000c88a:	ffff9097          	auipc	ra,0xffff9
    8000c88e:	baa080e7          	jalr	-1110(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8000c892:	a009                	j	8000c894 <.LBB3_17+0x18>
    8000c894:	0888                	addi	a0,sp,80
    8000c896:	00011097          	auipc	ra,0x11
    8000c89a:	31a080e7          	jalr	794(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8000c89e:	a009                	j	8000c8a0 <.LBB3_17+0x24>
        match res {
    8000c8a0:	a80d                	j	8000c8d2 <.LBB3_18+0x28>
                println!("KernelHeap: init error: {}.", err);
    8000c8a2:	6542                	ld	a0,16(sp)
    8000c8a4:	65a2                	ld	a1,8(sp)
    8000c8a6:	e1ae                	sd	a1,192(sp)
    8000c8a8:	e5aa                	sd	a0,200(sp)

000000008000c8aa <.LBB3_18>:
    8000c8aa:	0001b597          	auipc	a1,0x1b
    8000c8ae:	5c658593          	addi	a1,a1,1478 # 80027e70 <.L__unnamed_5>
    8000c8b2:	0908                	addi	a0,sp,144
    8000c8b4:	4609                	li	a2,2
    8000c8b6:	0194                	addi	a3,sp,192
    8000c8b8:	4705                	li	a4,1
    8000c8ba:	ffff9097          	auipc	ra,0xffff9
    8000c8be:	b7a080e7          	jalr	-1158(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8000c8c2:	a009                	j	8000c8c4 <.LBB3_18+0x1a>
    8000c8c4:	0908                	addi	a0,sp,144
    8000c8c6:	00011097          	auipc	ra,0x11
    8000c8ca:	2ea080e7          	jalr	746(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8000c8ce:	a009                	j	8000c8d0 <.LBB3_18+0x26>
        match res {
    8000c8d0:	a009                	j	8000c8d2 <.LBB3_18+0x28>
            }
        }
    }
    8000c8d2:	70ee                	ld	ra,248(sp)
    8000c8d4:	6111                	addi	sp,sp,256
    8000c8d6:	8082                	ret

Disassembly of section .text._ZN6kernel6memory6kalloc10KernelHeap5kinit17hadc76a3ae98e4bd9E:

000000008000c8d8 <_ZN6kernel6memory6kalloc10KernelHeap5kinit17hadc76a3ae98e4bd9E>:

    pub unsafe fn kinit(&self) {
    8000c8d8:	7131                	addi	sp,sp,-192
    8000c8da:	fd06                	sd	ra,184(sp)
    8000c8dc:	ec2a                	sd	a0,24(sp)
    8000c8de:	f12a                	sd	a0,160(sp)

000000008000c8e0 <.LBB4_6>:
        extern "C" {
            fn end();
        }
        let end = end as usize;
    8000c8e0:	00058517          	auipc	a0,0x58
    8000c8e4:	cb050513          	addi	a0,a0,-848 # 80064590 <end>
    8000c8e8:	fc2a                	sd	a0,56(sp)
    8000c8ea:	1828                	addi	a0,sp,56
        println!("KernelHeap: available memory: [{:#x}, {:#x})", end, PHYSTOP);
    8000c8ec:	e92a                	sd	a0,144(sp)

000000008000c8ee <.LBB4_7>:
    8000c8ee:	0001a597          	auipc	a1,0x1a
    8000c8f2:	ef258593          	addi	a1,a1,-270 # 800267e0 <.L__unnamed_6+0xa8>
    8000c8f6:	f02e                	sd	a1,32(sp)
    8000c8f8:	ed2e                	sd	a1,152(sp)
    8000c8fa:	f52a                	sd	a0,168(sp)
    8000c8fc:	f92e                	sd	a1,176(sp)

000000008000c8fe <.LBB4_8>:
    8000c8fe:	00018597          	auipc	a1,0x18
    8000c902:	93c58593          	addi	a1,a1,-1732 # 8002423a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h760b07191d46b3f2E>
    8000c906:	00013097          	auipc	ra,0x13
    8000c90a:	c20080e7          	jalr	-992(ra) # 8001f526 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    8000c90e:	f42a                	sd	a0,40(sp)
    8000c910:	f82e                	sd	a1,48(sp)
    8000c912:	a009                	j	8000c914 <.LBB4_8+0x16>
    8000c914:	7502                	ld	a0,32(sp)

000000008000c916 <.LBB4_9>:
    8000c916:	00018597          	auipc	a1,0x18
    8000c91a:	92458593          	addi	a1,a1,-1756 # 8002423a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h760b07191d46b3f2E>
    8000c91e:	00013097          	auipc	ra,0x13
    8000c922:	c08080e7          	jalr	-1016(ra) # 8001f526 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    8000c926:	e42a                	sd	a0,8(sp)
    8000c928:	e82e                	sd	a1,16(sp)
    8000c92a:	a009                	j	8000c92c <.LBB4_9+0x16>
    8000c92c:	6542                	ld	a0,16(sp)
    8000c92e:	65a2                	ld	a1,8(sp)
    8000c930:	7642                	ld	a2,48(sp)
    8000c932:	76a2                	ld	a3,40(sp)
    8000c934:	f8b6                	sd	a3,112(sp)
    8000c936:	fcb2                	sd	a2,120(sp)
    8000c938:	e12e                	sd	a1,128(sp)
    8000c93a:	e52a                	sd	a0,136(sp)

000000008000c93c <.LBB4_10>:
    8000c93c:	0001b597          	auipc	a1,0x1b
    8000c940:	5ac58593          	addi	a1,a1,1452 # 80027ee8 <.L__unnamed_7>

000000008000c944 <.LBB4_11>:
    8000c944:	0001b797          	auipc	a5,0x1b
    8000c948:	5d478793          	addi	a5,a5,1492 # 80027f18 <.L__unnamed_8>
    8000c94c:	0088                	addi	a0,sp,64
    8000c94e:	460d                	li	a2,3
    8000c950:	1894                	addi	a3,sp,112
    8000c952:	4809                	li	a6,2
    8000c954:	8742                	mv	a4,a6
    8000c956:	ffff9097          	auipc	ra,0xffff9
    8000c95a:	ab8080e7          	jalr	-1352(ra) # 8000540e <_ZN4core3fmt9Arguments16new_v1_formatted17hf6d3ed0f8e821319E>
    8000c95e:	a009                	j	8000c960 <.LBB4_11+0x1c>
    8000c960:	0088                	addi	a0,sp,64
    8000c962:	00011097          	auipc	ra,0x11
    8000c966:	24e080e7          	jalr	590(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8000c96a:	a009                	j	8000c96c <.LBB4_11+0x28>
        self.init(end, PHYSTOP);
    8000c96c:	6562                	ld	a0,24(sp)
    8000c96e:	75e2                	ld	a1,56(sp)
    8000c970:	4645                	li	a2,17
    8000c972:	066e                	slli	a2,a2,0x1b
    8000c974:	00000097          	auipc	ra,0x0
    8000c978:	e80080e7          	jalr	-384(ra) # 8000c7f4 <_ZN6kernel6memory6kalloc10KernelHeap4init17he7fa11863b607d55E>
    8000c97c:	a009                	j	8000c97e <.LBB4_11+0x3a>
    }
    8000c97e:	70ea                	ld	ra,184(sp)
    8000c980:	6129                	addi	sp,sp,192
    8000c982:	8082                	ret

Disassembly of section .text.__rg_alloc:

000000008000c984 <__rg_alloc>:
pub static KERNEL_HEAP: KernelHeap = KernelHeap::uninit();
    8000c984:	7179                	addi	sp,sp,-48
    8000c986:	f406                	sd	ra,40(sp)
    8000c988:	ec2a                	sd	a0,24(sp)
    8000c98a:	f02e                	sd	a1,32(sp)
    8000c98c:	00012097          	auipc	ra,0x12
    8000c990:	e5e080e7          	jalr	-418(ra) # 8001e7ea <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h7d187b5349095d20E>
    8000c994:	e42a                	sd	a0,8(sp)
    8000c996:	e82e                	sd	a1,16(sp)
    8000c998:	a009                	j	8000c99a <__rg_alloc+0x16>
    8000c99a:	6642                	ld	a2,16(sp)
    8000c99c:	65a2                	ld	a1,8(sp)

000000008000c99e <.LBB5_3>:
    8000c99e:	0004b517          	auipc	a0,0x4b
    8000c9a2:	ba250513          	addi	a0,a0,-1118 # 80057540 <_ZN6kernel6memory6kalloc11KERNEL_HEAP17hee4af7794785bdacE>
    8000c9a6:	00000097          	auipc	ra,0x0
    8000c9aa:	db0080e7          	jalr	-592(ra) # 8000c756 <_ZN87_$LT$kernel..memory..kalloc..KernelHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$5alloc17h526e18d88530d166E>
    8000c9ae:	e02a                	sd	a0,0(sp)
    8000c9b0:	a009                	j	8000c9b2 <.LBB5_3+0x14>
    8000c9b2:	6502                	ld	a0,0(sp)
    8000c9b4:	70a2                	ld	ra,40(sp)
    8000c9b6:	6145                	addi	sp,sp,48
    8000c9b8:	8082                	ret

Disassembly of section .text.__rg_dealloc:

000000008000c9ba <__rg_dealloc>:
    8000c9ba:	715d                	addi	sp,sp,-80
    8000c9bc:	e486                	sd	ra,72(sp)
    8000c9be:	e432                	sd	a2,8(sp)
    8000c9c0:	862e                	mv	a2,a1
    8000c9c2:	65a2                	ld	a1,8(sp)
    8000c9c4:	e832                	sd	a2,16(sp)
    8000c9c6:	862a                	mv	a2,a0
    8000c9c8:	6542                	ld	a0,16(sp)
    8000c9ca:	ec32                	sd	a2,24(sp)
    8000c9cc:	f832                	sd	a2,48(sp)
    8000c9ce:	fc2a                	sd	a0,56(sp)
    8000c9d0:	e0ae                	sd	a1,64(sp)
    8000c9d2:	00012097          	auipc	ra,0x12
    8000c9d6:	e18080e7          	jalr	-488(ra) # 8001e7ea <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h7d187b5349095d20E>
    8000c9da:	f02a                	sd	a0,32(sp)
    8000c9dc:	f42e                	sd	a1,40(sp)
    8000c9de:	a009                	j	8000c9e0 <__rg_dealloc+0x26>
    8000c9e0:	76a2                	ld	a3,40(sp)
    8000c9e2:	7602                	ld	a2,32(sp)
    8000c9e4:	65e2                	ld	a1,24(sp)

000000008000c9e6 <.LBB6_3>:
    8000c9e6:	0004b517          	auipc	a0,0x4b
    8000c9ea:	b5a50513          	addi	a0,a0,-1190 # 80057540 <_ZN6kernel6memory6kalloc11KERNEL_HEAP17hee4af7794785bdacE>
    8000c9ee:	00000097          	auipc	ra,0x0
    8000c9f2:	db6080e7          	jalr	-586(ra) # 8000c7a4 <_ZN87_$LT$kernel..memory..kalloc..KernelHeap$u20$as$u20$core..alloc..global..GlobalAlloc$GT$7dealloc17hf9dbc9c2cc300335E>
    8000c9f6:	a009                	j	8000c9f8 <.LBB6_3+0x12>
    8000c9f8:	60a6                	ld	ra,72(sp)
    8000c9fa:	6161                	addi	sp,sp,80
    8000c9fc:	8082                	ret

Disassembly of section .text.__rg_realloc:

000000008000c9fe <__rg_realloc>:
    8000c9fe:	711d                	addi	sp,sp,-96
    8000ca00:	ec86                	sd	ra,88(sp)
    8000ca02:	e436                	sd	a3,8(sp)
    8000ca04:	e832                	sd	a2,16(sp)
    8000ca06:	862e                	mv	a2,a1
    8000ca08:	65c2                	ld	a1,16(sp)
    8000ca0a:	ec32                	sd	a2,24(sp)
    8000ca0c:	862a                	mv	a2,a0
    8000ca0e:	6562                	ld	a0,24(sp)
    8000ca10:	f032                	sd	a2,32(sp)
    8000ca12:	fc32                	sd	a2,56(sp)
    8000ca14:	e0aa                	sd	a0,64(sp)
    8000ca16:	e4ae                	sd	a1,72(sp)
    8000ca18:	e8b6                	sd	a3,80(sp)
    8000ca1a:	00012097          	auipc	ra,0x12
    8000ca1e:	dd0080e7          	jalr	-560(ra) # 8001e7ea <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h7d187b5349095d20E>
    8000ca22:	f42a                	sd	a0,40(sp)
    8000ca24:	f82e                	sd	a1,48(sp)
    8000ca26:	a009                	j	8000ca28 <__rg_realloc+0x2a>
    8000ca28:	6722                	ld	a4,8(sp)
    8000ca2a:	76c2                	ld	a3,48(sp)
    8000ca2c:	7622                	ld	a2,40(sp)
    8000ca2e:	7582                	ld	a1,32(sp)

000000008000ca30 <.LBB7_3>:
    8000ca30:	0004b517          	auipc	a0,0x4b
    8000ca34:	b1050513          	addi	a0,a0,-1264 # 80057540 <_ZN6kernel6memory6kalloc11KERNEL_HEAP17hee4af7794785bdacE>
    8000ca38:	ffff8097          	auipc	ra,0xffff8
    8000ca3c:	0e6080e7          	jalr	230(ra) # 80004b1e <_ZN4core5alloc6global11GlobalAlloc7realloc17h24a579bea5cb79d9E>
    8000ca40:	e02a                	sd	a0,0(sp)
    8000ca42:	a009                	j	8000ca44 <.LBB7_3+0x14>
    8000ca44:	6502                	ld	a0,0(sp)
    8000ca46:	60e6                	ld	ra,88(sp)
    8000ca48:	6125                	addi	sp,sp,96
    8000ca4a:	8082                	ret

Disassembly of section .text.__rg_alloc_zeroed:

000000008000ca4c <__rg_alloc_zeroed>:
    8000ca4c:	7179                	addi	sp,sp,-48
    8000ca4e:	f406                	sd	ra,40(sp)
    8000ca50:	ec2a                	sd	a0,24(sp)
    8000ca52:	f02e                	sd	a1,32(sp)
    8000ca54:	00012097          	auipc	ra,0x12
    8000ca58:	d96080e7          	jalr	-618(ra) # 8001e7ea <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h7d187b5349095d20E>
    8000ca5c:	e42a                	sd	a0,8(sp)
    8000ca5e:	e82e                	sd	a1,16(sp)
    8000ca60:	a009                	j	8000ca62 <__rg_alloc_zeroed+0x16>
    8000ca62:	6642                	ld	a2,16(sp)
    8000ca64:	65a2                	ld	a1,8(sp)

000000008000ca66 <.LBB8_3>:
    8000ca66:	0004b517          	auipc	a0,0x4b
    8000ca6a:	ada50513          	addi	a0,a0,-1318 # 80057540 <_ZN6kernel6memory6kalloc11KERNEL_HEAP17hee4af7794785bdacE>
    8000ca6e:	ffff8097          	auipc	ra,0xffff8
    8000ca72:	04c080e7          	jalr	76(ra) # 80004aba <_ZN4core5alloc6global11GlobalAlloc12alloc_zeroed17h5bb5edba03a2227bE>
    8000ca76:	e02a                	sd	a0,0(sp)
    8000ca78:	a009                	j	8000ca7a <.LBB8_3+0x14>
    8000ca7a:	6502                	ld	a0,0(sp)
    8000ca7c:	70a2                	ld	ra,40(sp)
    8000ca7e:	6145                	addi	sp,sp,48
    8000ca80:	8082                	ret

Disassembly of section .text._ZN6kernel6driver11virtio_disk4Disk4init28_$u7b$$u7b$closure$u7d$$u7d$17h8a5adb868ad71917E:

000000008000ca82 <_ZN6kernel6driver11virtio_disk4Disk4init28_$u7b$$u7b$closure$u7d$$u7d$17h8a5adb868ad71917E>:
        self.free.iter_mut().for_each(|f| *f = true);
    8000ca82:	1141                	addi	sp,sp,-16
    8000ca84:	e02a                	sd	a0,0(sp)
    8000ca86:	e42e                	sd	a1,8(sp)
    8000ca88:	4505                	li	a0,1
    8000ca8a:	00a58023          	sb	a0,0(a1)
    8000ca8e:	0141                	addi	sp,sp,16
    8000ca90:	8082                	ret

Disassembly of section .text._ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h37d2ccc52635f8a7E:

000000008000ca92 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h37d2ccc52635f8a7E>:
    fn from(t: T) -> T {
    8000ca92:	1141                	addi	sp,sp,-16
    }
    8000ca94:	0141                	addi	sp,sp,16
    8000ca96:	8082                	ret

Disassembly of section .text._ZN81_$LT$core..str..iter..Bytes$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h47cb47c87defe3efE:

000000008000ca98 <_ZN81_$LT$core..str..iter..Bytes$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h47cb47c87defe3efE>:
#[stable(feature = "rust1", since = "1.0.0")]
impl Iterator for Bytes<'_> {
    type Item = u8;

    #[inline]
    fn next(&mut self) -> Option<u8> {
    8000ca98:	1101                	addi	sp,sp,-32
    8000ca9a:	ec06                	sd	ra,24(sp)
    8000ca9c:	e82a                	sd	a0,16(sp)
        self.0.next()
    8000ca9e:	ffff8097          	auipc	ra,0xffff8
    8000caa2:	fe0080e7          	jalr	-32(ra) # 80004a7e <_ZN104_$LT$core..iter..adapters..copied..Copied$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h5c47b4a6235bae37E>
    8000caa6:	e02a                	sd	a0,0(sp)
    8000caa8:	e42e                	sd	a1,8(sp)
    8000caaa:	a009                	j	8000caac <_ZN81_$LT$core..str..iter..Bytes$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h47cb47c87defe3efE+0x14>
    }
    8000caac:	65a2                	ld	a1,8(sp)
    8000caae:	6502                	ld	a0,0(sp)
    8000cab0:	8905                	andi	a0,a0,1
    8000cab2:	60e2                	ld	ra,24(sp)
    8000cab4:	6105                	addi	sp,sp,32
    8000cab6:	8082                	ret

Disassembly of section .text._ZN81_$LT$core..str..iter..Chars$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h562590808242c9ccE:

000000008000cab8 <_ZN81_$LT$core..str..iter..Chars$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h562590808242c9ccE>:
    fn next(&mut self) -> Option<char> {
    8000cab8:	7179                	addi	sp,sp,-48
    8000caba:	f406                	sd	ra,40(sp)
    8000cabc:	f02a                	sd	a0,32(sp)
        next_code_point(&mut self.iter).map(|ch| {
    8000cabe:	ffff9097          	auipc	ra,0xffff9
    8000cac2:	998080e7          	jalr	-1640(ra) # 80005456 <_ZN4core3str11validations15next_code_point17h7999ea0e8f1f9704E>
    8000cac6:	e82a                	sd	a0,16(sp)
    8000cac8:	ec2e                	sd	a1,24(sp)
    8000caca:	a009                	j	8000cacc <_ZN81_$LT$core..str..iter..Chars$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h562590808242c9ccE+0x14>
    8000cacc:	65e2                	ld	a1,24(sp)
    8000cace:	6542                	ld	a0,16(sp)
    8000cad0:	00002097          	auipc	ra,0x2
    8000cad4:	90e080e7          	jalr	-1778(ra) # 8000e3de <_ZN4core6option15Option$LT$T$GT$3map17h2838ee6761cb3f47E>
    8000cad8:	1502                	slli	a0,a0,0x20
    8000cada:	9101                	srli	a0,a0,0x20
    8000cadc:	e42a                	sd	a0,8(sp)
    8000cade:	a009                	j	8000cae0 <_ZN81_$LT$core..str..iter..Chars$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h562590808242c9ccE+0x28>
    }
    8000cae0:	6522                	ld	a0,8(sp)
    8000cae2:	70a2                	ld	ra,40(sp)
    8000cae4:	6145                	addi	sp,sp,48
    8000cae6:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17hfc3d5eeea9dab8e4E:

000000008000cae8 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17hfc3d5eeea9dab8e4E>:
    pub unsafe fn as_mut<'a>(self) -> Option<&'a mut T> {
    8000cae8:	7179                	addi	sp,sp,-48
    8000caea:	f406                	sd	ra,40(sp)
    8000caec:	e42a                	sd	a0,8(sp)
    8000caee:	f02a                	sd	a0,32(sp)
        if self.is_null() { None } else { unsafe { Some(&mut *self) } }
    8000caf0:	00000097          	auipc	ra,0x0
    8000caf4:	05c080e7          	jalr	92(ra) # 8000cb4c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hc6fd4c72115f82d3E>
    8000caf8:	e82a                	sd	a0,16(sp)
    8000cafa:	a009                	j	8000cafc <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17hfc3d5eeea9dab8e4E+0x14>
    8000cafc:	6542                	ld	a0,16(sp)
    8000cafe:	4581                	li	a1,0
    8000cb00:	00b50663          	beq	a0,a1,8000cb0c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17hfc3d5eeea9dab8e4E+0x24>
    8000cb04:	a009                	j	8000cb06 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17hfc3d5eeea9dab8e4E+0x1e>
    8000cb06:	4501                	li	a0,0
    8000cb08:	ec2a                	sd	a0,24(sp)
    8000cb0a:	a021                	j	8000cb12 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17hfc3d5eeea9dab8e4E+0x2a>
    8000cb0c:	6522                	ld	a0,8(sp)
    8000cb0e:	ec2a                	sd	a0,24(sp)
    8000cb10:	a009                	j	8000cb12 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17hfc3d5eeea9dab8e4E+0x2a>
    }
    8000cb12:	6562                	ld	a0,24(sp)
    8000cb14:	70a2                	ld	ra,40(sp)
    8000cb16:	6145                	addi	sp,sp,48
    8000cb18:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_ref17h449f973acae747ffE:

000000008000cb1a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_ref17h449f973acae747ffE>:
    pub unsafe fn as_ref<'a>(self) -> Option<&'a T> {
    8000cb1a:	7179                	addi	sp,sp,-48
    8000cb1c:	f406                	sd	ra,40(sp)
    8000cb1e:	e42a                	sd	a0,8(sp)
    8000cb20:	f02a                	sd	a0,32(sp)
        if self.is_null() { None } else { unsafe { Some(&*self) } }
    8000cb22:	00000097          	auipc	ra,0x0
    8000cb26:	02a080e7          	jalr	42(ra) # 8000cb4c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hc6fd4c72115f82d3E>
    8000cb2a:	e82a                	sd	a0,16(sp)
    8000cb2c:	a009                	j	8000cb2e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_ref17h449f973acae747ffE+0x14>
    8000cb2e:	6542                	ld	a0,16(sp)
    8000cb30:	4581                	li	a1,0
    8000cb32:	00b50663          	beq	a0,a1,8000cb3e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_ref17h449f973acae747ffE+0x24>
    8000cb36:	a009                	j	8000cb38 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_ref17h449f973acae747ffE+0x1e>
    8000cb38:	4501                	li	a0,0
    8000cb3a:	ec2a                	sd	a0,24(sp)
    8000cb3c:	a021                	j	8000cb44 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_ref17h449f973acae747ffE+0x2a>
    8000cb3e:	6522                	ld	a0,8(sp)
    8000cb40:	ec2a                	sd	a0,24(sp)
    8000cb42:	a009                	j	8000cb44 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_ref17h449f973acae747ffE+0x2a>
    }
    8000cb44:	6562                	ld	a0,24(sp)
    8000cb46:	70a2                	ld	ra,40(sp)
    8000cb48:	6145                	addi	sp,sp,48
    8000cb4a:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hc6fd4c72115f82d3E:

000000008000cb4c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hc6fd4c72115f82d3E>:
    pub const fn is_null(self) -> bool {
    8000cb4c:	1101                	addi	sp,sp,-32
    8000cb4e:	ec06                	sd	ra,24(sp)
    8000cb50:	e82a                	sd	a0,16(sp)
        (self as *mut u8).guaranteed_eq(null_mut())
    8000cb52:	e42a                	sd	a0,8(sp)
    8000cb54:	a009                	j	8000cb56 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hc6fd4c72115f82d3E+0xa>
    8000cb56:	6522                	ld	a0,8(sp)
    8000cb58:	4581                	li	a1,0
    8000cb5a:	00015097          	auipc	ra,0x15
    8000cb5e:	368080e7          	jalr	872(ra) # 80021ec2 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$13guaranteed_eq17h32ea8c99c0b8220dE>
    8000cb62:	e02a                	sd	a0,0(sp)
    8000cb64:	a009                	j	8000cb66 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hc6fd4c72115f82d3E+0x1a>
    }
    8000cb66:	6502                	ld	a0,0(sp)
    8000cb68:	60e2                	ld	ra,24(sp)
    8000cb6a:	6105                	addi	sp,sp,32
    8000cb6c:	8082                	ret

Disassembly of section .text._ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h0a4be43e8f3bcf0dE:

000000008000cb6e <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h0a4be43e8f3bcf0dE>:
            fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
    8000cb6e:	1101                	addi	sp,sp,-32
    8000cb70:	ec06                	sd	ra,24(sp)
    8000cb72:	e42a                	sd	a0,8(sp)
    8000cb74:	e82e                	sd	a1,16(sp)
    8000cb76:	6108                	ld	a0,0(a0)
    8000cb78:	00015097          	auipc	ra,0x15
    8000cb7c:	482080e7          	jalr	1154(ra) # 80021ffa <_ZN61_$LT$core..panic..PanicInfo$u20$as$u20$core..fmt..Display$GT$3fmt17h17913560c4fcc8feE>
    8000cb80:	e02a                	sd	a0,0(sp)
    8000cb82:	a009                	j	8000cb84 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h0a4be43e8f3bcf0dE+0x16>
    8000cb84:	6502                	ld	a0,0(sp)
    8000cb86:	60e2                	ld	ra,24(sp)
    8000cb88:	6105                	addi	sp,sp,32
    8000cb8a:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register3mie4read17h69b673b504f0a30eE:

000000008000cb8c <_ZN6kernel4arch5riscv8register3mie4read17h69b673b504f0a30eE>:
    MTIE = 1 << 7,  // timer
    MSIE = 1 << 3  // software
}

#[inline]
pub unsafe fn read() -> usize {
    8000cb8c:	1141                	addi	sp,sp,-16
    let ret:usize;
    llvm_asm!("csrr $0, mie":"=r"(ret):::"volatile");
    8000cb8e:	30402573          	csrr	a0,mie
    8000cb92:	e42a                	sd	a0,8(sp)
    ret
}
    8000cb94:	0141                	addi	sp,sp,16
    8000cb96:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register3mie5write17hd754beffbe0101f6E:

000000008000cb98 <_ZN6kernel4arch5riscv8register3mie5write17hd754beffbe0101f6E>:

#[inline]
pub unsafe fn write(x:usize){
    8000cb98:	1141                	addi	sp,sp,-16
    8000cb9a:	e42a                	sd	a0,8(sp)
    llvm_asm!("csrw mie, $0"::"r"(x)::"volatile");
    8000cb9c:	30451073          	csrw	mie,a0
    8000cba0:	0141                	addi	sp,sp,16
    8000cba2:	8082                	ret

Disassembly of section .text._ZN5alloc2rc11is_dangling17hdc2075289302a6eaE:

000000008000cba4 <_ZN5alloc2rc11is_dangling17hdc2075289302a6eaE>:
    pub fn new() -> Weak<T> {
        Weak { ptr: NonNull::new(usize::MAX as *mut RcBox<T>).expect("MAX is not 0") }
    }
}

pub(crate) fn is_dangling<T: ?Sized>(ptr: *mut T) -> bool {
    8000cba4:	1141                	addi	sp,sp,-16
    8000cba6:	e02a                	sd	a0,0(sp)
    let address = ptr as *mut () as usize;
    8000cba8:	e42a                	sd	a0,8(sp)
    address == usize::MAX
    8000cbaa:	0505                	addi	a0,a0,1
    8000cbac:	00153513          	seqz	a0,a0
}
    8000cbb0:	0141                	addi	sp,sp,16
    8000cbb2:	8082                	ret

Disassembly of section .text._ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h0d49413fcec9dcc1E:

000000008000cbb4 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h0d49413fcec9dcc1E>:
    /// ```
    #[must_use = "if you intended to assert that this is ok, consider `.unwrap()` instead"]
    #[rustc_const_stable(feature = "const_result", since = "1.48.0")]
    #[inline]
    #[stable(feature = "rust1", since = "1.0.0")]
    pub const fn is_ok(&self) -> bool {
    8000cbb4:	1141                	addi	sp,sp,-16
    8000cbb6:	e42a                	sd	a0,8(sp)
        matches!(*self, Ok(_))
    8000cbb8:	6108                	ld	a0,0(a0)
    8000cbba:	4581                	li	a1,0
    8000cbbc:	00b50763          	beq	a0,a1,8000cbca <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h0d49413fcec9dcc1E+0x16>
    8000cbc0:	a009                	j	8000cbc2 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h0d49413fcec9dcc1E+0xe>
    8000cbc2:	4501                	li	a0,0
    8000cbc4:	00a103a3          	sb	a0,7(sp)
    8000cbc8:	a029                	j	8000cbd2 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h0d49413fcec9dcc1E+0x1e>
    8000cbca:	4505                	li	a0,1
    8000cbcc:	00a103a3          	sb	a0,7(sp)
    8000cbd0:	a009                	j	8000cbd2 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h0d49413fcec9dcc1E+0x1e>
    }
    8000cbd2:	00714503          	lbu	a0,7(sp)
    8000cbd6:	0141                	addi	sp,sp,16
    8000cbd8:	8082                	ret

Disassembly of section .text._ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h2dc3ede719915417E:

000000008000cbda <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h2dc3ede719915417E>:
    pub const fn is_ok(&self) -> bool {
    8000cbda:	1141                	addi	sp,sp,-16
    8000cbdc:	e42a                	sd	a0,8(sp)
        matches!(*self, Ok(_))
    8000cbde:	00054503          	lbu	a0,0(a0)
    8000cbe2:	8905                	andi	a0,a0,1
    8000cbe4:	4581                	li	a1,0
    8000cbe6:	00b50763          	beq	a0,a1,8000cbf4 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h2dc3ede719915417E+0x1a>
    8000cbea:	a009                	j	8000cbec <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h2dc3ede719915417E+0x12>
    8000cbec:	4501                	li	a0,0
    8000cbee:	00a103a3          	sb	a0,7(sp)
    8000cbf2:	a029                	j	8000cbfc <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h2dc3ede719915417E+0x22>
    8000cbf4:	4505                	li	a0,1
    8000cbf6:	00a103a3          	sb	a0,7(sp)
    8000cbfa:	a009                	j	8000cbfc <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h2dc3ede719915417E+0x22>
    }
    8000cbfc:	00714503          	lbu	a0,7(sp)
    8000cc00:	0141                	addi	sp,sp,16
    8000cc02:	8082                	ret

Disassembly of section .text._ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h5bbc2715c9ad6c41E:

000000008000cc04 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h5bbc2715c9ad6c41E>:
    pub const fn is_ok(&self) -> bool {
    8000cc04:	1141                	addi	sp,sp,-16
    8000cc06:	e42a                	sd	a0,8(sp)
        matches!(*self, Ok(_))
    8000cc08:	6108                	ld	a0,0(a0)
    8000cc0a:	4581                	li	a1,0
    8000cc0c:	00b50763          	beq	a0,a1,8000cc1a <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h5bbc2715c9ad6c41E+0x16>
    8000cc10:	a009                	j	8000cc12 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h5bbc2715c9ad6c41E+0xe>
    8000cc12:	4501                	li	a0,0
    8000cc14:	00a103a3          	sb	a0,7(sp)
    8000cc18:	a029                	j	8000cc22 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h5bbc2715c9ad6c41E+0x1e>
    8000cc1a:	4505                	li	a0,1
    8000cc1c:	00a103a3          	sb	a0,7(sp)
    8000cc20:	a009                	j	8000cc22 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h5bbc2715c9ad6c41E+0x1e>
    }
    8000cc22:	00714503          	lbu	a0,7(sp)
    8000cc26:	0141                	addi	sp,sp,16
    8000cc28:	8082                	ret

Disassembly of section .text._ZN4core6result19Result$LT$T$C$E$GT$6expect17h7db20d4970bed50aE:

000000008000cc2a <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h7db20d4970bed50aE>:
    /// x.expect("Testing expect"); // panics with `Testing expect: emergency failure`
    /// ```
    #[inline]
    #[track_caller]
    #[stable(feature = "result_expect", since = "1.4.0")]
    pub fn expect(self, msg: &str) -> T {
    8000cc2a:	715d                	addi	sp,sp,-80
    8000cc2c:	e03a                	sd	a4,0(sp)
    8000cc2e:	e436                	sd	a3,8(sp)
    8000cc30:	e832                	sd	a2,16(sp)
    8000cc32:	ec2a                	sd	a0,24(sp)
    8000cc34:	f02e                	sd	a1,32(sp)
    8000cc36:	e0b2                	sd	a2,64(sp)
    8000cc38:	e4b6                	sd	a3,72(sp)
        match self {
            Ok(t) => t,
    8000cc3a:	00a035b3          	snez	a1,a0
    8000cc3e:	4581                	li	a1,0
    8000cc40:	02b50563          	beq	a0,a1,8000cc6a <.LBB3_5+0x16>
    8000cc44:	a009                	j	8000cc46 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h7db20d4970bed50aE+0x1c>
            Err(e) => unwrap_failed(msg, &e),
    8000cc46:	6702                	ld	a4,0(sp)
    8000cc48:	65a2                	ld	a1,8(sp)
    8000cc4a:	6542                	ld	a0,16(sp)
    8000cc4c:	66e2                	ld	a3,24(sp)
    8000cc4e:	7602                	ld	a2,32(sp)
    8000cc50:	f436                	sd	a3,40(sp)
    8000cc52:	f832                	sd	a2,48(sp)

000000008000cc54 <.LBB3_5>:
    8000cc54:	0001b697          	auipc	a3,0x1b
    8000cc58:	34468693          	addi	a3,a3,836 # 80027f98 <.L__unnamed_1>
    8000cc5c:	1030                	addi	a2,sp,40
    8000cc5e:	00015097          	auipc	ra,0x15
    8000cc62:	61e080e7          	jalr	1566(ra) # 8002227c <_ZN4core6result13unwrap_failed17h07d3c4e2b4f310f6E>
    8000cc66:	0000                	unimp
        match self {
    8000cc68:	0000                	unimp
        }
    }
    8000cc6a:	6161                	addi	sp,sp,80
    8000cc6c:	8082                	ret

Disassembly of section .text._ZN4core6result19Result$LT$T$C$E$GT$6expect17he26db02725b9ae65E:

000000008000cc6e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17he26db02725b9ae65E>:
    pub fn expect(self, msg: &str) -> T {
    8000cc6e:	715d                	addi	sp,sp,-80
    8000cc70:	e436                	sd	a3,8(sp)
    8000cc72:	e832                	sd	a2,16(sp)
    8000cc74:	ec2e                	sd	a1,24(sp)
    8000cc76:	f02a                	sd	a0,32(sp)
    8000cc78:	fc2e                	sd	a1,56(sp)
    8000cc7a:	e0b2                	sd	a2,64(sp)
            Ok(t) => t,
    8000cc7c:	6108                	ld	a0,0(a0)
    8000cc7e:	4581                	li	a1,0
    8000cc80:	02b50663          	beq	a0,a1,8000ccac <.LBB4_5+0x16>
    8000cc84:	a009                	j	8000cc86 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17he26db02725b9ae65E+0x18>
            Err(e) => unwrap_failed(msg, &e),
    8000cc86:	6722                	ld	a4,8(sp)
    8000cc88:	65c2                	ld	a1,16(sp)
    8000cc8a:	6562                	ld	a0,24(sp)
    8000cc8c:	7602                	ld	a2,32(sp)
    8000cc8e:	6614                	ld	a3,8(a2)
    8000cc90:	6a10                	ld	a2,16(a2)
    8000cc92:	f436                	sd	a3,40(sp)
    8000cc94:	f832                	sd	a2,48(sp)

000000008000cc96 <.LBB4_5>:
    8000cc96:	0001b697          	auipc	a3,0x1b
    8000cc9a:	30268693          	addi	a3,a3,770 # 80027f98 <.L__unnamed_1>
    8000cc9e:	1030                	addi	a2,sp,40
    8000cca0:	00015097          	auipc	ra,0x15
    8000cca4:	5dc080e7          	jalr	1500(ra) # 8002227c <_ZN4core6result13unwrap_failed17h07d3c4e2b4f310f6E>
    8000cca8:	0000                	unimp
        match self {
    8000ccaa:	0000                	unimp
            Ok(t) => t,
    8000ccac:	7502                	ld	a0,32(sp)
    8000ccae:	6508                	ld	a0,8(a0)
    8000ccb0:	e4aa                	sd	a0,72(sp)
    }
    8000ccb2:	6161                	addi	sp,sp,80
    8000ccb4:	8082                	ret

Disassembly of section .text._ZN4core6result19Result$LT$T$C$E$GT$6is_err17h304118d236359d80E:

000000008000ccb6 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h304118d236359d80E>:
    pub const fn is_err(&self) -> bool {
    8000ccb6:	1101                	addi	sp,sp,-32
    8000ccb8:	ec06                	sd	ra,24(sp)
    8000ccba:	e82a                	sd	a0,16(sp)
        !self.is_ok()
    8000ccbc:	00000097          	auipc	ra,0x0
    8000ccc0:	f48080e7          	jalr	-184(ra) # 8000cc04 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h5bbc2715c9ad6c41E>
    8000ccc4:	e42a                	sd	a0,8(sp)
    8000ccc6:	a009                	j	8000ccc8 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h304118d236359d80E+0x12>
    8000ccc8:	6522                	ld	a0,8(sp)
    8000ccca:	00154513          	xori	a0,a0,1
    }
    8000ccce:	60e2                	ld	ra,24(sp)
    8000ccd0:	6105                	addi	sp,sp,32
    8000ccd2:	8082                	ret

Disassembly of section .text._ZN4core6result19Result$LT$T$C$E$GT$6is_err17he593c7735b347060E:

000000008000ccd4 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17he593c7735b347060E>:
    pub const fn is_err(&self) -> bool {
    8000ccd4:	1101                	addi	sp,sp,-32
    8000ccd6:	ec06                	sd	ra,24(sp)
    8000ccd8:	e82a                	sd	a0,16(sp)
        !self.is_ok()
    8000ccda:	00000097          	auipc	ra,0x0
    8000ccde:	eda080e7          	jalr	-294(ra) # 8000cbb4 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h0d49413fcec9dcc1E>
    8000cce2:	e42a                	sd	a0,8(sp)
    8000cce4:	a009                	j	8000cce6 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17he593c7735b347060E+0x12>
    8000cce6:	6522                	ld	a0,8(sp)
    8000cce8:	00154513          	xori	a0,a0,1
    }
    8000ccec:	60e2                	ld	ra,24(sp)
    8000ccee:	6105                	addi	sp,sp,32
    8000ccf0:	8082                	ret

Disassembly of section .text._ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h01f79eb8d5b769f4E:

000000008000ccf2 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h01f79eb8d5b769f4E>:
    /// x.unwrap(); // panics with `emergency failure`
    /// ```
    #[inline]
    #[track_caller]
    #[stable(feature = "rust1", since = "1.0.0")]
    pub fn unwrap(self) -> T {
    8000ccf2:	7179                	addi	sp,sp,-48
    8000ccf4:	e032                	sd	a2,0(sp)
    8000ccf6:	e42a                	sd	a0,8(sp)
    8000ccf8:	e82e                	sd	a1,16(sp)
        match self {
            Ok(t) => t,
    8000ccfa:	0015b513          	seqz	a0,a1
    8000ccfe:	4501                	li	a0,0
    8000cd00:	02a59563          	bne	a1,a0,8000cd2a <.LBB7_6+0x1a>
    8000cd04:	a009                	j	8000cd06 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h01f79eb8d5b769f4E+0x14>
            Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
    8000cd06:	6702                	ld	a4,0(sp)

000000008000cd08 <.LBB7_5>:
    8000cd08:	0001b517          	auipc	a0,0x1b
    8000cd0c:	2b050513          	addi	a0,a0,688 # 80027fb8 <.L__unnamed_7>

000000008000cd10 <.LBB7_6>:
    8000cd10:	0001b697          	auipc	a3,0x1b
    8000cd14:	2d868693          	addi	a3,a3,728 # 80027fe8 <.L__unnamed_2>
    8000cd18:	02b00593          	li	a1,43
    8000cd1c:	0830                	addi	a2,sp,24
    8000cd1e:	00015097          	auipc	ra,0x15
    8000cd22:	55e080e7          	jalr	1374(ra) # 8002227c <_ZN4core6result13unwrap_failed17h07d3c4e2b4f310f6E>
    8000cd26:	0000                	unimp
        match self {
    8000cd28:	0000                	unimp
            Ok(t) => t,
    8000cd2a:	6522                	ld	a0,8(sp)
    8000cd2c:	65c2                	ld	a1,16(sp)
    8000cd2e:	f02a                	sd	a0,32(sp)
    8000cd30:	f42e                	sd	a1,40(sp)
        }
    }
    8000cd32:	6145                	addi	sp,sp,48
    8000cd34:	8082                	ret

Disassembly of section .text._ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h07a2a3bbe53a0b92E:

000000008000cd36 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h07a2a3bbe53a0b92E>:
    pub fn unwrap(self) -> T {
    8000cd36:	1101                	addi	sp,sp,-32
    8000cd38:	e432                	sd	a2,8(sp)
    8000cd3a:	c82a                	sw	a0,16(sp)
    8000cd3c:	ca2e                	sw	a1,20(sp)
            Ok(t) => t,
    8000cd3e:	1502                	slli	a0,a0,0x20
    8000cd40:	9101                	srli	a0,a0,0x20
    8000cd42:	4581                	li	a1,0
    8000cd44:	02b50563          	beq	a0,a1,8000cd6e <.LBB8_6+0x1a>
    8000cd48:	a009                	j	8000cd4a <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h07a2a3bbe53a0b92E+0x14>
            Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
    8000cd4a:	6722                	ld	a4,8(sp)

000000008000cd4c <.LBB8_5>:
    8000cd4c:	0001b517          	auipc	a0,0x1b
    8000cd50:	26c50513          	addi	a0,a0,620 # 80027fb8 <.L__unnamed_7>

000000008000cd54 <.LBB8_6>:
    8000cd54:	0001b697          	auipc	a3,0x1b
    8000cd58:	2b468693          	addi	a3,a3,692 # 80028008 <.L__unnamed_3>
    8000cd5c:	02b00593          	li	a1,43
    8000cd60:	0830                	addi	a2,sp,24
    8000cd62:	00015097          	auipc	ra,0x15
    8000cd66:	51a080e7          	jalr	1306(ra) # 8002227c <_ZN4core6result13unwrap_failed17h07d3c4e2b4f310f6E>
    8000cd6a:	0000                	unimp
        match self {
    8000cd6c:	0000                	unimp
            Ok(t) => t,
    8000cd6e:	4552                	lw	a0,20(sp)
    8000cd70:	ce2a                	sw	a0,28(sp)
    }
    8000cd72:	6105                	addi	sp,sp,32
    8000cd74:	8082                	ret

Disassembly of section .text._ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h0d39573adfd86ec0E:

000000008000cd76 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h0d39573adfd86ec0E>:
    pub fn unwrap(self) -> T {
    8000cd76:	1101                	addi	sp,sp,-32
    8000cd78:	e02e                	sd	a1,0(sp)
    8000cd7a:	00a107a3          	sb	a0,15(sp)
    8000cd7e:	4581                	li	a1,0
            Ok(t) => t,
    8000cd80:	02b50563          	beq	a0,a1,8000cdaa <.LBB9_6+0x1a>
    8000cd84:	a009                	j	8000cd86 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h0d39573adfd86ec0E+0x10>
            Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
    8000cd86:	6702                	ld	a4,0(sp)

000000008000cd88 <.LBB9_5>:
    8000cd88:	0001b517          	auipc	a0,0x1b
    8000cd8c:	23050513          	addi	a0,a0,560 # 80027fb8 <.L__unnamed_7>

000000008000cd90 <.LBB9_6>:
    8000cd90:	0001b697          	auipc	a3,0x1b
    8000cd94:	29868693          	addi	a3,a3,664 # 80028028 <.L__unnamed_4>
    8000cd98:	02b00593          	li	a1,43
    8000cd9c:	0810                	addi	a2,sp,16
    8000cd9e:	00015097          	auipc	ra,0x15
    8000cda2:	4de080e7          	jalr	1246(ra) # 8002227c <_ZN4core6result13unwrap_failed17h07d3c4e2b4f310f6E>
    8000cda6:	0000                	unimp
        match self {
    8000cda8:	0000                	unimp
    }
    8000cdaa:	6105                	addi	sp,sp,32
    8000cdac:	8082                	ret

Disassembly of section .text._ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h42e1173662da7b7dE:

000000008000cdae <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h42e1173662da7b7dE>:
    pub fn unwrap(self) -> T {
    8000cdae:	1101                	addi	sp,sp,-32
    8000cdb0:	e432                	sd	a2,8(sp)
    8000cdb2:	00a11823          	sh	a0,16(sp)
    8000cdb6:	00b11923          	sh	a1,18(sp)
    8000cdba:	65c1                	lui	a1,0x10
    8000cdbc:	35fd                	addiw	a1,a1,-1
            Ok(t) => t,
    8000cdbe:	8d6d                	and	a0,a0,a1
    8000cdc0:	4581                	li	a1,0
    8000cdc2:	02b50563          	beq	a0,a1,8000cdec <.LBB10_6+0x1a>
    8000cdc6:	a009                	j	8000cdc8 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h42e1173662da7b7dE+0x1a>
            Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
    8000cdc8:	6722                	ld	a4,8(sp)

000000008000cdca <.LBB10_5>:
    8000cdca:	0001b517          	auipc	a0,0x1b
    8000cdce:	1ee50513          	addi	a0,a0,494 # 80027fb8 <.L__unnamed_7>

000000008000cdd2 <.LBB10_6>:
    8000cdd2:	0001b697          	auipc	a3,0x1b
    8000cdd6:	23668693          	addi	a3,a3,566 # 80028008 <.L__unnamed_3>
    8000cdda:	02b00593          	li	a1,43
    8000cdde:	0830                	addi	a2,sp,24
    8000cde0:	00015097          	auipc	ra,0x15
    8000cde4:	49c080e7          	jalr	1180(ra) # 8002227c <_ZN4core6result13unwrap_failed17h07d3c4e2b4f310f6E>
    8000cde8:	0000                	unimp
        match self {
    8000cdea:	0000                	unimp
            Ok(t) => t,
    8000cdec:	01211503          	lh	a0,18(sp)
    8000cdf0:	00a11f23          	sh	a0,30(sp)
    }
    8000cdf4:	6105                	addi	sp,sp,32
    8000cdf6:	8082                	ret

Disassembly of section .text._ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h6115c21749654733E:

000000008000cdf8 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h6115c21749654733E>:
    pub fn unwrap(self) -> T {
    8000cdf8:	7179                	addi	sp,sp,-48
    8000cdfa:	e42e                	sd	a1,8(sp)
    8000cdfc:	e82a                	sd	a0,16(sp)
            Ok(t) => t,
    8000cdfe:	6108                	ld	a0,0(a0)
    8000ce00:	4581                	li	a1,0
    8000ce02:	02b50a63          	beq	a0,a1,8000ce36 <.LBB11_6+0x1a>
    8000ce06:	a009                	j	8000ce08 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h6115c21749654733E+0x10>
            Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
    8000ce08:	6722                	ld	a4,8(sp)
    8000ce0a:	6542                	ld	a0,16(sp)
    8000ce0c:	650c                	ld	a1,8(a0)
    8000ce0e:	6908                	ld	a0,16(a0)
    8000ce10:	ec2e                	sd	a1,24(sp)
    8000ce12:	f02a                	sd	a0,32(sp)

000000008000ce14 <.LBB11_5>:
    8000ce14:	0001b517          	auipc	a0,0x1b
    8000ce18:	1a450513          	addi	a0,a0,420 # 80027fb8 <.L__unnamed_7>

000000008000ce1c <.LBB11_6>:
    8000ce1c:	0001b697          	auipc	a3,0x1b
    8000ce20:	17c68693          	addi	a3,a3,380 # 80027f98 <.L__unnamed_1>
    8000ce24:	02b00593          	li	a1,43
    8000ce28:	0830                	addi	a2,sp,24
    8000ce2a:	00015097          	auipc	ra,0x15
    8000ce2e:	452080e7          	jalr	1106(ra) # 8002227c <_ZN4core6result13unwrap_failed17h07d3c4e2b4f310f6E>
    8000ce32:	0000                	unimp
        match self {
    8000ce34:	0000                	unimp
            Ok(t) => t,
    8000ce36:	6542                	ld	a0,16(sp)
    8000ce38:	6508                	ld	a0,8(a0)
    8000ce3a:	f42a                	sd	a0,40(sp)
    }
    8000ce3c:	6145                	addi	sp,sp,48
    8000ce3e:	8082                	ret

Disassembly of section .text._ZN4core6result19Result$LT$T$C$E$GT$6unwrap17he7e280ca90d46427E:

000000008000ce40 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17he7e280ca90d46427E>:
    pub fn unwrap(self) -> T {
    8000ce40:	7179                	addi	sp,sp,-48
    8000ce42:	e02e                	sd	a1,0(sp)
    8000ce44:	e42a                	sd	a0,8(sp)
            Ok(t) => t,
    8000ce46:	6108                	ld	a0,0(a0)
    8000ce48:	4581                	li	a1,0
    8000ce4a:	02b50a63          	beq	a0,a1,8000ce7e <.LBB12_6+0x1a>
    8000ce4e:	a009                	j	8000ce50 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17he7e280ca90d46427E+0x10>
            Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
    8000ce50:	6702                	ld	a4,0(sp)
    8000ce52:	6522                	ld	a0,8(sp)
    8000ce54:	690c                	ld	a1,16(a0)
    8000ce56:	ec2e                	sd	a1,24(sp)
    8000ce58:	6508                	ld	a0,8(a0)
    8000ce5a:	e82a                	sd	a0,16(sp)

000000008000ce5c <.LBB12_5>:
    8000ce5c:	0001b517          	auipc	a0,0x1b
    8000ce60:	15c50513          	addi	a0,a0,348 # 80027fb8 <.L__unnamed_7>

000000008000ce64 <.LBB12_6>:
    8000ce64:	0001b697          	auipc	a3,0x1b
    8000ce68:	1e468693          	addi	a3,a3,484 # 80028048 <.L__unnamed_5>
    8000ce6c:	02b00593          	li	a1,43
    8000ce70:	0810                	addi	a2,sp,16
    8000ce72:	00015097          	auipc	ra,0x15
    8000ce76:	40a080e7          	jalr	1034(ra) # 8002227c <_ZN4core6result13unwrap_failed17h07d3c4e2b4f310f6E>
    8000ce7a:	0000                	unimp
        match self {
    8000ce7c:	0000                	unimp
            Ok(t) => t,
    8000ce7e:	65a2                	ld	a1,8(sp)
    8000ce80:	6588                	ld	a0,8(a1)
    8000ce82:	698c                	ld	a1,16(a1)
    8000ce84:	f02a                	sd	a0,32(sp)
    8000ce86:	f42e                	sd	a1,40(sp)
    }
    8000ce88:	6145                	addi	sp,sp,48
    8000ce8a:	8082                	ret

Disassembly of section .text._ZN4core6result19Result$LT$T$C$E$GT$6unwrap17hea14d8d7b2208f82E:

000000008000ce8c <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17hea14d8d7b2208f82E>:
    pub fn unwrap(self) -> T {
    8000ce8c:	1101                	addi	sp,sp,-32
    8000ce8e:	e02e                	sd	a1,0(sp)
    8000ce90:	00a107a3          	sb	a0,15(sp)
    8000ce94:	4581                	li	a1,0
            Ok(t) => t,
    8000ce96:	02b50563          	beq	a0,a1,8000cec0 <.LBB13_6+0x1a>
    8000ce9a:	a009                	j	8000ce9c <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17hea14d8d7b2208f82E+0x10>
            Err(e) => unwrap_failed("called `Result::unwrap()` on an `Err` value", &e),
    8000ce9c:	6702                	ld	a4,0(sp)

000000008000ce9e <.LBB13_5>:
    8000ce9e:	0001b517          	auipc	a0,0x1b
    8000cea2:	11a50513          	addi	a0,a0,282 # 80027fb8 <.L__unnamed_7>

000000008000cea6 <.LBB13_6>:
    8000cea6:	0001b697          	auipc	a3,0x1b
    8000ceaa:	1c268693          	addi	a3,a3,450 # 80028068 <.L__unnamed_6>
    8000ceae:	02b00593          	li	a1,43
    8000ceb2:	0810                	addi	a2,sp,16
    8000ceb4:	00015097          	auipc	ra,0x15
    8000ceb8:	3c8080e7          	jalr	968(ra) # 8002227c <_ZN4core6result13unwrap_failed17h07d3c4e2b4f310f6E>
    8000cebc:	0000                	unimp
        match self {
    8000cebe:	0000                	unimp
    }
    8000cec0:	6105                	addi	sp,sp,32
    8000cec2:	8082                	ret

Disassembly of section .text._ZN4core6result19Result$LT$T$C$E$GT$7map_err17h048c451de26fa4b9E:

000000008000cec4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h048c451de26fa4b9E>:
    pub fn map_err<F, O: FnOnce(E) -> F>(self, op: O) -> Result<T, F> {
    8000cec4:	711d                	addi	sp,sp,-96
    8000cec6:	ec86                	sd	ra,88(sp)
    8000cec8:	ec2a                	sd	a0,24(sp)
    8000ceca:	f02e                	sd	a1,32(sp)
    8000cecc:	f432                	sd	a2,40(sp)
    8000cece:	4505                	li	a0,1
            Ok(t) => Ok(t),
    8000ced0:	02a10ba3          	sb	a0,55(sp)
    8000ced4:	00163513          	seqz	a0,a2
    8000ced8:	4501                	li	a0,0
    8000ceda:	00a61e63          	bne	a2,a0,8000cef6 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h048c451de26fa4b9E+0x32>
    8000cede:	a009                	j	8000cee0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h048c451de26fa4b9E+0x1c>
    8000cee0:	4501                	li	a0,0
            Err(e) => Err(op(e)),
    8000cee2:	02a10ba3          	sb	a0,55(sp)
    8000cee6:	ffff6097          	auipc	ra,0xffff6
    8000ceea:	976080e7          	jalr	-1674(ra) # 8000285c <_ZN5alloc7raw_vec11finish_grow28_$u7b$$u7b$closure$u7d$$u7d$17h73415ce87cdd3564E>
    8000ceee:	e42a                	sd	a0,8(sp)
    8000cef0:	e82e                	sd	a1,16(sp)
    8000cef2:	a821                	j	8000cf0a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h048c451de26fa4b9E+0x46>
        match self {
    8000cef4:	0000                	unimp
            Ok(t) => Ok(t),
    8000cef6:	65e2                	ld	a1,24(sp)
    8000cef8:	7602                	ld	a2,32(sp)
    8000cefa:	7522                	ld	a0,40(sp)
    8000cefc:	e4b2                	sd	a2,72(sp)
    8000cefe:	e8aa                	sd	a0,80(sp)
    8000cf00:	e590                	sd	a2,8(a1)
    8000cf02:	e988                	sd	a0,16(a1)
    8000cf04:	4501                	li	a0,0
    8000cf06:	e188                	sd	a0,0(a1)
        match self {
    8000cf08:	a809                	j	8000cf1a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h048c451de26fa4b9E+0x56>
            Err(e) => Err(op(e)),
    8000cf0a:	65e2                	ld	a1,24(sp)
    8000cf0c:	6542                	ld	a0,16(sp)
    8000cf0e:	6622                	ld	a2,8(sp)
    8000cf10:	e590                	sd	a2,8(a1)
    8000cf12:	e988                	sd	a0,16(a1)
    8000cf14:	4505                	li	a0,1
    8000cf16:	e188                	sd	a0,0(a1)
        match self {
    8000cf18:	a009                	j	8000cf1a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h048c451de26fa4b9E+0x56>
    }
    8000cf1a:	03714503          	lbu	a0,55(sp)
    8000cf1e:	8905                	andi	a0,a0,1
    8000cf20:	e509                	bnez	a0,8000cf2a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h048c451de26fa4b9E+0x66>
    8000cf22:	a009                	j	8000cf24 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h048c451de26fa4b9E+0x60>
    8000cf24:	60e6                	ld	ra,88(sp)
    8000cf26:	6125                	addi	sp,sp,96
    8000cf28:	8082                	ret
    8000cf2a:	bfed                	j	8000cf24 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h048c451de26fa4b9E+0x60>

Disassembly of section .text._ZN4core6result19Result$LT$T$C$E$GT$7map_err17h3706629688909c32E:

000000008000cf2c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h3706629688909c32E>:
    pub fn map_err<F, O: FnOnce(E) -> F>(self, op: O) -> Result<T, F> {
    8000cf2c:	711d                	addi	sp,sp,-96
    8000cf2e:	ec86                	sd	ra,88(sp)
    8000cf30:	e836                	sd	a3,16(sp)
    8000cf32:	ec2a                	sd	a0,24(sp)
    8000cf34:	f02e                	sd	a1,32(sp)
    8000cf36:	f432                	sd	a2,40(sp)
    8000cf38:	fc36                	sd	a3,56(sp)
    8000cf3a:	4505                	li	a0,1
            Ok(t) => Ok(t),
    8000cf3c:	02a10ba3          	sb	a0,55(sp)
    8000cf40:	0015b513          	seqz	a0,a1
    8000cf44:	4501                	li	a0,0
    8000cf46:	00a59f63          	bne	a1,a0,8000cf64 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h3706629688909c32E+0x38>
    8000cf4a:	a009                	j	8000cf4c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h3706629688909c32E+0x20>
    8000cf4c:	6542                	ld	a0,16(sp)
    8000cf4e:	4581                	li	a1,0
            Err(e) => Err(op(e)),
    8000cf50:	02b10ba3          	sb	a1,55(sp)
    8000cf54:	ffff6097          	auipc	ra,0xffff6
    8000cf58:	8f6080e7          	jalr	-1802(ra) # 8000284a <_ZN5alloc7raw_vec11finish_grow28_$u7b$$u7b$closure$u7d$$u7d$17h4102ec07be08fbafE>
    8000cf5c:	e02a                	sd	a0,0(sp)
    8000cf5e:	e42e                	sd	a1,8(sp)
    8000cf60:	a821                	j	8000cf78 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h3706629688909c32E+0x4c>
        match self {
    8000cf62:	0000                	unimp
            Ok(t) => Ok(t),
    8000cf64:	65e2                	ld	a1,24(sp)
    8000cf66:	7602                	ld	a2,32(sp)
    8000cf68:	7522                	ld	a0,40(sp)
    8000cf6a:	e4b2                	sd	a2,72(sp)
    8000cf6c:	e8aa                	sd	a0,80(sp)
    8000cf6e:	e590                	sd	a2,8(a1)
    8000cf70:	e988                	sd	a0,16(a1)
    8000cf72:	4501                	li	a0,0
    8000cf74:	e188                	sd	a0,0(a1)
        match self {
    8000cf76:	a809                	j	8000cf88 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h3706629688909c32E+0x5c>
            Err(e) => Err(op(e)),
    8000cf78:	65e2                	ld	a1,24(sp)
    8000cf7a:	6522                	ld	a0,8(sp)
    8000cf7c:	6602                	ld	a2,0(sp)
    8000cf7e:	e590                	sd	a2,8(a1)
    8000cf80:	e988                	sd	a0,16(a1)
    8000cf82:	4505                	li	a0,1
    8000cf84:	e188                	sd	a0,0(a1)
        match self {
    8000cf86:	a009                	j	8000cf88 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h3706629688909c32E+0x5c>
    }
    8000cf88:	03714503          	lbu	a0,55(sp)
    8000cf8c:	8905                	andi	a0,a0,1
    8000cf8e:	e509                	bnez	a0,8000cf98 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h3706629688909c32E+0x6c>
    8000cf90:	a009                	j	8000cf92 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h3706629688909c32E+0x66>
    8000cf92:	60e6                	ld	ra,88(sp)
    8000cf94:	6125                	addi	sp,sp,96
    8000cf96:	8082                	ret
    8000cf98:	bfed                	j	8000cf92 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h3706629688909c32E+0x66>

Disassembly of section .text._ZN4core6result19Result$LT$T$C$E$GT$7map_err17hacf552840fbd34a9E:

000000008000cf9a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17hacf552840fbd34a9E>:
    pub fn map_err<F, O: FnOnce(E) -> F>(self, op: O) -> Result<T, F> {
    8000cf9a:	711d                	addi	sp,sp,-96
    8000cf9c:	ec86                	sd	ra,88(sp)
    8000cf9e:	e42a                	sd	a0,8(sp)
    8000cfa0:	4585                	li	a1,1
            Ok(t) => Ok(t),
    8000cfa2:	02b10ba3          	sb	a1,55(sp)
    8000cfa6:	6108                	ld	a0,0(a0)
    8000cfa8:	4581                	li	a1,0
    8000cfaa:	02b50363          	beq	a0,a1,8000cfd0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17hacf552840fbd34a9E+0x36>
    8000cfae:	a009                	j	8000cfb0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17hacf552840fbd34a9E+0x16>
            Err(e) => Err(op(e)),
    8000cfb0:	65a2                	ld	a1,8(sp)
    8000cfb2:	6588                	ld	a0,8(a1)
    8000cfb4:	698c                	ld	a1,16(a1)
    8000cfb6:	e0aa                	sd	a0,64(sp)
    8000cfb8:	e4ae                	sd	a1,72(sp)
    8000cfba:	4601                	li	a2,0
    8000cfbc:	02c10ba3          	sb	a2,55(sp)
    8000cfc0:	f02a                	sd	a0,32(sp)
    8000cfc2:	f42e                	sd	a1,40(sp)
    8000cfc4:	ffff8097          	auipc	ra,0xffff8
    8000cfc8:	414080e7          	jalr	1044(ra) # 800053d8 <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_exec28_$u7b$$u7b$closure$u7d$$u7d$17hac210036fe7eba45E>
    8000cfcc:	a809                	j	8000cfde <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17hacf552840fbd34a9E+0x44>
        match self {
    8000cfce:	0000                	unimp
            Ok(t) => Ok(t),
    8000cfd0:	6522                	ld	a0,8(sp)
    8000cfd2:	6508                	ld	a0,8(a0)
    8000cfd4:	e8aa                	sd	a0,80(sp)
    8000cfd6:	ec2a                	sd	a0,24(sp)
    8000cfd8:	4501                	li	a0,0
    8000cfda:	e82a                	sd	a0,16(sp)
        match self {
    8000cfdc:	a021                	j	8000cfe4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17hacf552840fbd34a9E+0x4a>
    8000cfde:	4505                	li	a0,1
            Err(e) => Err(op(e)),
    8000cfe0:	e82a                	sd	a0,16(sp)
        match self {
    8000cfe2:	a009                	j	8000cfe4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17hacf552840fbd34a9E+0x4a>
    }
    8000cfe4:	03714503          	lbu	a0,55(sp)
    8000cfe8:	8905                	andi	a0,a0,1
    8000cfea:	e519                	bnez	a0,8000cff8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17hacf552840fbd34a9E+0x5e>
    8000cfec:	a009                	j	8000cfee <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17hacf552840fbd34a9E+0x54>
    8000cfee:	6542                	ld	a0,16(sp)
    8000cff0:	65e2                	ld	a1,24(sp)
    8000cff2:	60e6                	ld	ra,88(sp)
    8000cff4:	6125                	addi	sp,sp,96
    8000cff6:	8082                	ret
    8000cff8:	bfdd                	j	8000cfee <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17hacf552840fbd34a9E+0x54>

Disassembly of section .text._ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h2a54492b2826375dE:

000000008000cffa <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h2a54492b2826375dE>:
    fn from_ok(v: T) -> Self {
        Ok(v)
    }

    #[inline]
    fn from_error(v: E) -> Self {
    8000cffa:	1141                	addi	sp,sp,-16
    8000cffc:	4501                	li	a0,0
        Err(v)
    8000cffe:	e02a                	sd	a0,0(sp)
    }
    8000d000:	0141                	addi	sp,sp,16
    8000d002:	8082                	ret

Disassembly of section .text._ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h4dd43adfe00292f6E:

000000008000d004 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h4dd43adfe00292f6E>:
    fn from_error(v: E) -> Self {
    8000d004:	1101                	addi	sp,sp,-32
    8000d006:	e42e                	sd	a1,8(sp)
    8000d008:	85aa                	mv	a1,a0
    8000d00a:	6522                	ld	a0,8(sp)
    8000d00c:	e82a                	sd	a0,16(sp)
    8000d00e:	ec32                	sd	a2,24(sp)
        Err(v)
    8000d010:	e588                	sd	a0,8(a1)
    8000d012:	e990                	sd	a2,16(a1)
    8000d014:	4505                	li	a0,1
    8000d016:	e188                	sd	a0,0(a1)
    }
    8000d018:	6105                	addi	sp,sp,32
    8000d01a:	8082                	ret

Disassembly of section .text._ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h5591b1c718d6dce1E:

000000008000d01c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h5591b1c718d6dce1E>:
    fn from_error(v: E) -> Self {
    8000d01c:	1101                	addi	sp,sp,-32
    8000d01e:	4581                	li	a1,0
        Err(v)
    8000d020:	e82e                	sd	a1,16(sp)
    }
    8000d022:	6522                	ld	a0,8(sp)
    8000d024:	6105                	addi	sp,sp,32
    8000d026:	8082                	ret

Disassembly of section .text._ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h5998e5a20485011cE:

000000008000d028 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h5998e5a20485011cE>:
    fn from_error(v: E) -> Self {
    8000d028:	1101                	addi	sp,sp,-32
    8000d02a:	e42e                	sd	a1,8(sp)
    8000d02c:	85aa                	mv	a1,a0
    8000d02e:	6522                	ld	a0,8(sp)
    8000d030:	e82a                	sd	a0,16(sp)
    8000d032:	ec32                	sd	a2,24(sp)
        Err(v)
    8000d034:	e588                	sd	a0,8(a1)
    8000d036:	e990                	sd	a2,16(a1)
    8000d038:	4505                	li	a0,1
    8000d03a:	e188                	sd	a0,0(a1)
    }
    8000d03c:	6105                	addi	sp,sp,32
    8000d03e:	8082                	ret

Disassembly of section .text._ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h74072cf57097ff24E:

000000008000d040 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h74072cf57097ff24E>:
    fn from_error(v: E) -> Self {
    8000d040:	1101                	addi	sp,sp,-32
    8000d042:	4505                	li	a0,1
        Err(v)
    8000d044:	e42a                	sd	a0,8(sp)
    }
    8000d046:	65c2                	ld	a1,16(sp)
    8000d048:	6105                	addi	sp,sp,32
    8000d04a:	8082                	ret

Disassembly of section .text._ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h7458ba93a206fcffE:

000000008000d04c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h7458ba93a206fcffE>:
    fn from_error(v: E) -> Self {
    8000d04c:	1101                	addi	sp,sp,-32
    8000d04e:	e42e                	sd	a1,8(sp)
    8000d050:	85aa                	mv	a1,a0
    8000d052:	6522                	ld	a0,8(sp)
    8000d054:	e82a                	sd	a0,16(sp)
    8000d056:	ec32                	sd	a2,24(sp)
        Err(v)
    8000d058:	e588                	sd	a0,8(a1)
    8000d05a:	e990                	sd	a2,16(a1)
    8000d05c:	4505                	li	a0,1
    8000d05e:	e188                	sd	a0,0(a1)
    }
    8000d060:	6105                	addi	sp,sp,32
    8000d062:	8082                	ret

Disassembly of section .text._ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h826a3a4a12863e91E:

000000008000d064 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h826a3a4a12863e91E>:
    fn from_error(v: E) -> Self {
    8000d064:	1141                	addi	sp,sp,-16
    8000d066:	85aa                	mv	a1,a0
    8000d068:	4501                	li	a0,0
        Err(v)
    8000d06a:	e588                	sd	a0,8(a1)
    }
    8000d06c:	0141                	addi	sp,sp,16
    8000d06e:	8082                	ret

Disassembly of section .text._ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h849eab7baac337bbE:

000000008000d070 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h849eab7baac337bbE>:
    fn from_error(v: E) -> Self {
    8000d070:	1141                	addi	sp,sp,-16
    8000d072:	4501                	li	a0,0
        Err(v)
    8000d074:	e02a                	sd	a0,0(sp)
    }
    8000d076:	0141                	addi	sp,sp,16
    8000d078:	8082                	ret

Disassembly of section .text._ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h9d11a50f8e490b2eE:

000000008000d07a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h9d11a50f8e490b2eE>:
    fn from_error(v: E) -> Self {
    8000d07a:	1101                	addi	sp,sp,-32
    8000d07c:	e82a                	sd	a0,16(sp)
    8000d07e:	ec2e                	sd	a1,24(sp)
        Err(v)
    8000d080:	e02a                	sd	a0,0(sp)
    8000d082:	e42e                	sd	a1,8(sp)
    }
    8000d084:	6105                	addi	sp,sp,32
    8000d086:	8082                	ret

Disassembly of section .text._ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha082cd91ce3eeff8E:

000000008000d088 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha082cd91ce3eeff8E>:
    fn from_error(v: E) -> Self {
    8000d088:	1101                	addi	sp,sp,-32
    8000d08a:	4501                	li	a0,0
        Err(v)
    8000d08c:	e42a                	sd	a0,8(sp)
    }
    8000d08e:	65c2                	ld	a1,16(sp)
    8000d090:	6105                	addi	sp,sp,32
    8000d092:	8082                	ret

Disassembly of section .text._ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17haeaec5be2c31cee9E:

000000008000d094 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17haeaec5be2c31cee9E>:
    fn from_error(v: E) -> Self {
    8000d094:	1101                	addi	sp,sp,-32
    8000d096:	e42e                	sd	a1,8(sp)
    8000d098:	85aa                	mv	a1,a0
    8000d09a:	6522                	ld	a0,8(sp)
    8000d09c:	e82a                	sd	a0,16(sp)
    8000d09e:	ec32                	sd	a2,24(sp)
        Err(v)
    8000d0a0:	e588                	sd	a0,8(a1)
    8000d0a2:	e990                	sd	a2,16(a1)
    8000d0a4:	4505                	li	a0,1
    8000d0a6:	e188                	sd	a0,0(a1)
    }
    8000d0a8:	6105                	addi	sp,sp,32
    8000d0aa:	8082                	ret

Disassembly of section .text._ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17hc42702708db6cea4E:

000000008000d0ac <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17hc42702708db6cea4E>:
    fn from_error(v: E) -> Self {
    8000d0ac:	1141                	addi	sp,sp,-16
    8000d0ae:	4501                	li	a0,0
        Err(v)
    8000d0b0:	e02a                	sd	a0,0(sp)
    }
    8000d0b2:	0141                	addi	sp,sp,16
    8000d0b4:	8082                	ret

Disassembly of section .text._ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17hc5c17464a72e6965E:

000000008000d0b6 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17hc5c17464a72e6965E>:
    fn from_error(v: E) -> Self {
    8000d0b6:	1141                	addi	sp,sp,-16
    8000d0b8:	4501                	li	a0,0
        Err(v)
    8000d0ba:	e02a                	sd	a0,0(sp)
    }
    8000d0bc:	0141                	addi	sp,sp,16
    8000d0be:	8082                	ret

Disassembly of section .text._ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17hfad957fd5ededc3fE:

000000008000d0c0 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17hfad957fd5ededc3fE>:
    fn from_error(v: E) -> Self {
    8000d0c0:	1141                	addi	sp,sp,-16
    8000d0c2:	4501                	li	a0,0
        Err(v)
    8000d0c4:	e02a                	sd	a0,0(sp)
    }
    8000d0c6:	0141                	addi	sp,sp,16
    8000d0c8:	8082                	ret

Disassembly of section .text._ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h01dd6c02021cf1cdE:

000000008000d0ca <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h01dd6c02021cf1cdE>:
    fn into_result(self) -> Self {
    8000d0ca:	1141                	addi	sp,sp,-16
    8000d0cc:	e42a                	sd	a0,8(sp)
    }
    8000d0ce:	0141                	addi	sp,sp,16
    8000d0d0:	8082                	ret

Disassembly of section .text._ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h0dd4a8728df8a7c8E:

000000008000d0d2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h0dd4a8728df8a7c8E>:
    fn into_result(self) -> Self {
    8000d0d2:	1141                	addi	sp,sp,-16
    8000d0d4:	e42e                	sd	a1,8(sp)
    8000d0d6:	85aa                	mv	a1,a0
        self
    8000d0d8:	6522                	ld	a0,8(sp)
    8000d0da:	6910                	ld	a2,16(a0)
    8000d0dc:	e990                	sd	a2,16(a1)
    8000d0de:	6510                	ld	a2,8(a0)
    8000d0e0:	e590                	sd	a2,8(a1)
    8000d0e2:	6108                	ld	a0,0(a0)
    8000d0e4:	e188                	sd	a0,0(a1)
    }
    8000d0e6:	0141                	addi	sp,sp,16
    8000d0e8:	8082                	ret

Disassembly of section .text._ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h1c9f3c35158f4b17E:

000000008000d0ea <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h1c9f3c35158f4b17E>:
    fn into_result(self) -> Self {
    8000d0ea:	1141                	addi	sp,sp,-16
    8000d0ec:	e02a                	sd	a0,0(sp)
    8000d0ee:	e42e                	sd	a1,8(sp)
    }
    8000d0f0:	0141                	addi	sp,sp,16
    8000d0f2:	8082                	ret

Disassembly of section .text._ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h219e266dbc1ee71cE:

000000008000d0f4 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h219e266dbc1ee71cE>:
    fn into_result(self) -> Self {
    8000d0f4:	1141                	addi	sp,sp,-16
    8000d0f6:	e42e                	sd	a1,8(sp)
    8000d0f8:	85aa                	mv	a1,a0
        self
    8000d0fa:	6522                	ld	a0,8(sp)
    8000d0fc:	6910                	ld	a2,16(a0)
    8000d0fe:	e990                	sd	a2,16(a1)
    8000d100:	6510                	ld	a2,8(a0)
    8000d102:	e590                	sd	a2,8(a1)
    8000d104:	6108                	ld	a0,0(a0)
    8000d106:	e188                	sd	a0,0(a1)
    }
    8000d108:	0141                	addi	sp,sp,16
    8000d10a:	8082                	ret

Disassembly of section .text._ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h3002ccf5391f70d3E:

000000008000d10c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h3002ccf5391f70d3E>:
    fn into_result(self) -> Self {
    8000d10c:	1141                	addi	sp,sp,-16
    8000d10e:	e42e                	sd	a1,8(sp)
    8000d110:	85aa                	mv	a1,a0
        self
    8000d112:	6522                	ld	a0,8(sp)
    8000d114:	6910                	ld	a2,16(a0)
    8000d116:	e990                	sd	a2,16(a1)
    8000d118:	6510                	ld	a2,8(a0)
    8000d11a:	e590                	sd	a2,8(a1)
    8000d11c:	6108                	ld	a0,0(a0)
    8000d11e:	e188                	sd	a0,0(a1)
    }
    8000d120:	0141                	addi	sp,sp,16
    8000d122:	8082                	ret

Disassembly of section .text._ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7e17d789c0860991E:

000000008000d124 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7e17d789c0860991E>:
    fn into_result(self) -> Self {
    8000d124:	1141                	addi	sp,sp,-16
    8000d126:	e42e                	sd	a1,8(sp)
    8000d128:	85aa                	mv	a1,a0
        self
    8000d12a:	6522                	ld	a0,8(sp)
    8000d12c:	6910                	ld	a2,16(a0)
    8000d12e:	e990                	sd	a2,16(a1)
    8000d130:	6510                	ld	a2,8(a0)
    8000d132:	e590                	sd	a2,8(a1)
    8000d134:	6108                	ld	a0,0(a0)
    8000d136:	e188                	sd	a0,0(a1)
    }
    8000d138:	0141                	addi	sp,sp,16
    8000d13a:	8082                	ret

Disassembly of section .text._ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h81067e0558a14198E:

000000008000d13c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h81067e0558a14198E>:
    fn into_result(self) -> Self {
    8000d13c:	1141                	addi	sp,sp,-16
    8000d13e:	e42e                	sd	a1,8(sp)
    8000d140:	85aa                	mv	a1,a0
        self
    8000d142:	6522                	ld	a0,8(sp)
    8000d144:	6910                	ld	a2,16(a0)
    8000d146:	e990                	sd	a2,16(a1)
    8000d148:	6510                	ld	a2,8(a0)
    8000d14a:	e590                	sd	a2,8(a1)
    8000d14c:	6108                	ld	a0,0(a0)
    8000d14e:	e188                	sd	a0,0(a1)
    }
    8000d150:	0141                	addi	sp,sp,16
    8000d152:	8082                	ret

Disassembly of section .text._ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h9e3ff03fe8989dd2E:

000000008000d154 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h9e3ff03fe8989dd2E>:
    fn into_result(self) -> Self {
    8000d154:	1141                	addi	sp,sp,-16
    8000d156:	00a107a3          	sb	a0,15(sp)
    }
    8000d15a:	0141                	addi	sp,sp,16
    8000d15c:	8082                	ret

Disassembly of section .text._ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hb12176fc822fec8fE:

000000008000d15e <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hb12176fc822fec8fE>:
    fn into_result(self) -> Self {
    8000d15e:	1141                	addi	sp,sp,-16
    8000d160:	e02a                	sd	a0,0(sp)
    8000d162:	e42e                	sd	a1,8(sp)
    }
    8000d164:	0141                	addi	sp,sp,16
    8000d166:	8082                	ret

Disassembly of section .text._ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hb8d2d18a4141e592E:

000000008000d168 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hb8d2d18a4141e592E>:
    fn into_result(self) -> Self {
    8000d168:	1141                	addi	sp,sp,-16
    8000d16a:	e02a                	sd	a0,0(sp)
    8000d16c:	e42e                	sd	a1,8(sp)
    }
    8000d16e:	0141                	addi	sp,sp,16
    8000d170:	8082                	ret

Disassembly of section .text._ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hcbbb135f4988ea23E:

000000008000d172 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hcbbb135f4988ea23E>:
    fn into_result(self) -> Self {
    8000d172:	1141                	addi	sp,sp,-16
    8000d174:	e42a                	sd	a0,8(sp)
    }
    8000d176:	0141                	addi	sp,sp,16
    8000d178:	8082                	ret

Disassembly of section .text._ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hd9845beb6e8da5c7E:

000000008000d17a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hd9845beb6e8da5c7E>:
    fn into_result(self) -> Self {
    8000d17a:	1141                	addi	sp,sp,-16
    8000d17c:	e02a                	sd	a0,0(sp)
    8000d17e:	e42e                	sd	a1,8(sp)
    }
    8000d180:	0141                	addi	sp,sp,16
    8000d182:	8082                	ret

Disassembly of section .text._ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hda96dc8b8fa1398aE:

000000008000d184 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hda96dc8b8fa1398aE>:
    fn into_result(self) -> Self {
    8000d184:	1141                	addi	sp,sp,-16
    8000d186:	e42e                	sd	a1,8(sp)
    8000d188:	85aa                	mv	a1,a0
        self
    8000d18a:	6522                	ld	a0,8(sp)
    8000d18c:	6910                	ld	a2,16(a0)
    8000d18e:	e990                	sd	a2,16(a1)
    8000d190:	6510                	ld	a2,8(a0)
    8000d192:	e590                	sd	a2,8(a1)
    8000d194:	6108                	ld	a0,0(a0)
    8000d196:	e188                	sd	a0,0(a1)
    }
    8000d198:	0141                	addi	sp,sp,16
    8000d19a:	8082                	ret

Disassembly of section .text._ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hea2de720f3c4ff28E:

000000008000d19c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hea2de720f3c4ff28E>:
    fn into_result(self) -> Self {
    8000d19c:	1141                	addi	sp,sp,-16
    8000d19e:	e42e                	sd	a1,8(sp)
    8000d1a0:	85aa                	mv	a1,a0
        self
    8000d1a2:	6522                	ld	a0,8(sp)
    8000d1a4:	6910                	ld	a2,16(a0)
    8000d1a6:	e990                	sd	a2,16(a1)
    8000d1a8:	6510                	ld	a2,8(a0)
    8000d1aa:	e590                	sd	a2,8(a1)
    8000d1ac:	6108                	ld	a0,0(a0)
    8000d1ae:	e188                	sd	a0,0(a1)
    }
    8000d1b0:	0141                	addi	sp,sp,16
    8000d1b2:	8082                	ret

Disassembly of section .text._ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17heda032b26dd469a1E:

000000008000d1b4 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17heda032b26dd469a1E>:
    fn into_result(self) -> Self {
    8000d1b4:	1141                	addi	sp,sp,-16
    8000d1b6:	e42e                	sd	a1,8(sp)
    8000d1b8:	85aa                	mv	a1,a0
        self
    8000d1ba:	6522                	ld	a0,8(sp)
    8000d1bc:	6910                	ld	a2,16(a0)
    8000d1be:	e990                	sd	a2,16(a1)
    8000d1c0:	6510                	ld	a2,8(a0)
    8000d1c2:	e590                	sd	a2,8(a1)
    8000d1c4:	6108                	ld	a0,0(a0)
    8000d1c6:	e188                	sd	a0,0(a1)
    }
    8000d1c8:	0141                	addi	sp,sp,16
    8000d1ca:	8082                	ret

Disassembly of section .text._ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hf2a730b9c7ab248fE:

000000008000d1cc <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hf2a730b9c7ab248fE>:
    fn into_result(self) -> Self {
    8000d1cc:	1141                	addi	sp,sp,-16
    8000d1ce:	e42e                	sd	a1,8(sp)
    8000d1d0:	85aa                	mv	a1,a0
        self
    8000d1d2:	6522                	ld	a0,8(sp)
    8000d1d4:	6910                	ld	a2,16(a0)
    8000d1d6:	e990                	sd	a2,16(a1)
    8000d1d8:	6510                	ld	a2,8(a0)
    8000d1da:	e590                	sd	a2,8(a1)
    8000d1dc:	6108                	ld	a0,0(a0)
    8000d1de:	e188                	sd	a0,0(a1)
    }
    8000d1e0:	0141                	addi	sp,sp,16
    8000d1e2:	8082                	ret

Disassembly of section .text._ZN6kernel7process7manager11ProcManager9alloc_pid17hc71dad597dc5708aE:

000000008000d1e4 <_ZN6kernel7process7manager11ProcManager9alloc_pid17hc71dad597dc5708aE>:
    
    // pub fn get_table_mut(&mut self) -> &mut [task_struct; NTASK] {
    //     &mut self.tasks
    // }

    pub fn alloc_pid() -> usize {
    8000d1e4:	1101                	addi	sp,sp,-32

000000008000d1e6 <.LBB0_3>:
        // let curtask = unsafe {
        //     CPU_MANAGER.myproc().expect("Current cpu's process is none.")
        // };
        unsafe {
            let ret = nextpid;
    8000d1e6:	00057517          	auipc	a0,0x57
    8000d1ea:	3a250513          	addi	a0,a0,930 # 80064588 <_ZN6kernel7process7manager7nextpid17h9a7cdc0385d7d3caE>
    8000d1ee:	610c                	ld	a1,0(a0)
    8000d1f0:	e42e                	sd	a1,8(sp)
    8000d1f2:	ec2e                	sd	a1,24(sp)
            
            nextpid += 1;
    8000d1f4:	00158513          	addi	a0,a1,1 # 10001 <.Lline_table_start0+0x8ad>
    8000d1f8:	e82a                	sd	a0,16(sp)
    8000d1fa:	00b56c63          	bltu	a0,a1,8000d212 <.LBB0_5>
    8000d1fe:	a009                	j	8000d200 <.LBB0_3+0x1a>
    8000d200:	6522                	ld	a0,8(sp)
    8000d202:	65c2                	ld	a1,16(sp)

000000008000d204 <.LBB0_4>:
    8000d204:	00057617          	auipc	a2,0x57
    8000d208:	38460613          	addi	a2,a2,900 # 80064588 <_ZN6kernel7process7manager7nextpid17h9a7cdc0385d7d3caE>
    8000d20c:	e20c                	sd	a1,0(a2)
            ret
        }
    }
    8000d20e:	6105                	addi	sp,sp,32
    8000d210:	8082                	ret

000000008000d212 <.LBB0_5>:
            nextpid += 1;
    8000d212:	0001b517          	auipc	a0,0x1b
    8000d216:	ebe50513          	addi	a0,a0,-322 # 800280d0 <str.0>

000000008000d21a <.LBB0_6>:
    8000d21a:	0001b617          	auipc	a2,0x1b
    8000d21e:	e9e60613          	addi	a2,a2,-354 # 800280b8 <.L__unnamed_1>
    8000d222:	45f1                	li	a1,28
    8000d224:	00015097          	auipc	ra,0x15
    8000d228:	ed8080e7          	jalr	-296(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel7process7manager11ProcManager4init17h6f55d4e0f14b932aE:

000000008000d22e <_ZN6kernel7process7manager11ProcManager4init17h6f55d4e0f14b932aE>:

    /// initialize the proc table at boot time.
    /// Only used in boot.
    pub unsafe fn init(&mut self){
    8000d22e:	7151                	addi	sp,sp,-240
    8000d230:	f586                	sd	ra,232(sp)
    8000d232:	f02a                	sd	a0,32(sp)
    8000d234:	f92a                	sd	a0,176(sp)

000000008000d236 <.LBB1_14>:
        println!("process init......");
    8000d236:	0001b597          	auipc	a1,0x1b
    8000d23a:	eca58593          	addi	a1,a1,-310 # 80028100 <.L__unnamed_2>

000000008000d23e <.LBB1_15>:
    8000d23e:	0001b697          	auipc	a3,0x1b
    8000d242:	ed268693          	addi	a3,a3,-302 # 80028110 <.L__unnamed_41>
    8000d246:	1028                	addi	a0,sp,40
    8000d248:	4605                	li	a2,1
    8000d24a:	4701                	li	a4,0
    8000d24c:	ffff8097          	auipc	ra,0xffff8
    8000d250:	1e8080e7          	jalr	488(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8000d254:	a009                	j	8000d256 <.LBB1_15+0x18>
    8000d256:	1028                	addi	a0,sp,40
    8000d258:	00011097          	auipc	ra,0x11
    8000d25c:	958080e7          	jalr	-1704(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8000d260:	a009                	j	8000d262 <.LBB1_15+0x24>
        for (pos, proc) in self.tasks.iter_mut().enumerate() {
    8000d262:	7502                	ld	a0,32(sp)
    8000d264:	45a1                	li	a1,8
    8000d266:	00004097          	auipc	ra,0x4
    8000d26a:	480080e7          	jalr	1152(ra) # 800116e6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h5a59168d2366923eE>
    8000d26e:	e82a                	sd	a0,16(sp)
    8000d270:	ec2e                	sd	a1,24(sp)
    8000d272:	a009                	j	8000d274 <.LBB1_15+0x36>
    8000d274:	6662                	ld	a2,24(sp)
    8000d276:	65c2                	ld	a1,16(sp)
    8000d278:	1888                	addi	a0,sp,112
    8000d27a:	ffffe097          	auipc	ra,0xffffe
    8000d27e:	93c080e7          	jalr	-1732(ra) # 8000abb6 <_ZN4core4iter6traits8iterator8Iterator9enumerate17hf4bbd83c6ce36188E>
    8000d282:	a009                	j	8000d284 <.LBB1_15+0x46>
    8000d284:	08a8                	addi	a0,sp,88
    8000d286:	188c                	addi	a1,sp,112
    8000d288:	00005097          	auipc	ra,0x5
    8000d28c:	ecc080e7          	jalr	-308(ra) # 80012154 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h928d6ed65fce619dE>
    8000d290:	a009                	j	8000d292 <.LBB1_15+0x54>
    8000d292:	7526                	ld	a0,104(sp)
    8000d294:	ed2a                	sd	a0,152(sp)
    8000d296:	7506                	ld	a0,96(sp)
    8000d298:	e92a                	sd	a0,144(sp)
    8000d29a:	6566                	ld	a0,88(sp)
    8000d29c:	e52a                	sd	a0,136(sp)
    8000d29e:	a009                	j	8000d2a0 <.LBB1_15+0x62>
    8000d2a0:	0128                	addi	a0,sp,136
    8000d2a2:	00005097          	auipc	ra,0x5
    8000d2a6:	db0080e7          	jalr	-592(ra) # 80012052 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2c3e0997dfaaf459E>
    8000d2aa:	f12a                	sd	a0,160(sp)
    8000d2ac:	f52e                	sd	a1,168(sp)
    8000d2ae:	a009                	j	8000d2b0 <.LBB1_15+0x72>
    8000d2b0:	752a                	ld	a0,168(sp)
    8000d2b2:	00a035b3          	snez	a1,a0
    8000d2b6:	4581                	li	a1,0
    8000d2b8:	00b50463          	beq	a0,a1,8000d2c0 <.LBB1_15+0x82>
    8000d2bc:	a009                	j	8000d2be <.LBB1_15+0x80>
    8000d2be:	a029                	j	8000d2c8 <.LBB1_15+0x8a>
            proc.init(kernel_stack(pos));
        }
    }
    8000d2c0:	70ae                	ld	ra,232(sp)
    8000d2c2:	616d                	addi	sp,sp,240
    8000d2c4:	8082                	ret
        for (pos, proc) in self.tasks.iter_mut().enumerate() {
    8000d2c6:	0000                	unimp
    8000d2c8:	750a                	ld	a0,160(sp)
    8000d2ca:	75aa                	ld	a1,168(sp)
    8000d2cc:	e02e                	sd	a1,0(sp)
    8000d2ce:	fd2a                	sd	a0,184(sp)
    8000d2d0:	e1ae                	sd	a1,192(sp)
    8000d2d2:	e5aa                	sd	a0,200(sp)
    8000d2d4:	e9ae                	sd	a1,208(sp)
    8000d2d6:	edaa                	sd	a0,216(sp)
    8000d2d8:	f1ae                	sd	a1,224(sp)
            proc.init(kernel_stack(pos));
    8000d2da:	00001097          	auipc	ra,0x1
    8000d2de:	fda080e7          	jalr	-38(ra) # 8000e2b4 <_ZN6kernel7process7manager12kernel_stack17h27945807ba9b8a49E>
    8000d2e2:	e42a                	sd	a0,8(sp)
    8000d2e4:	a009                	j	8000d2e6 <.LBB1_15+0xa8>
    8000d2e6:	65a2                	ld	a1,8(sp)
    8000d2e8:	6502                	ld	a0,0(sp)
    8000d2ea:	00008097          	auipc	ra,0x8
    8000d2ee:	6f6080e7          	jalr	1782(ra) # 800159e0 <_ZN6kernel7process7process11task_struct4init17h302d3726f13c442bE>
    8000d2f2:	a009                	j	8000d2f4 <.LBB1_15+0xb6>
        for (pos, proc) in self.tasks.iter_mut().enumerate() {
    8000d2f4:	b775                	j	8000d2a0 <.LBB1_15+0x62>

Disassembly of section .text._ZN6kernel7process7manager11ProcManager14proc_mapstacks17he92f2c2a936a1699E:

000000008000d2f6 <_ZN6kernel7process7manager11ProcManager14proc_mapstacks17he92f2c2a936a1699E>:

    /// Allocate 4 page for each process's kernel stack.
    /// Map it high in memory, followed by an invalid 
    /// group page
    pub unsafe fn proc_mapstacks(&mut self) {
    8000d2f6:	7115                	addi	sp,sp,-224
    8000d2f8:	ed86                	sd	ra,216(sp)
    8000d2fa:	ed2a                	sd	a0,152(sp)
    8000d2fc:	45a1                	li	a1,8
        for (pos, _) in self.tasks.iter_mut().enumerate() {
    8000d2fe:	00004097          	auipc	ra,0x4
    8000d302:	3e8080e7          	jalr	1000(ra) # 800116e6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h5a59168d2366923eE>
    8000d306:	f82a                	sd	a0,48(sp)
    8000d308:	fc2e                	sd	a1,56(sp)
    8000d30a:	a009                	j	8000d30c <_ZN6kernel7process7manager11ProcManager14proc_mapstacks17he92f2c2a936a1699E+0x16>
    8000d30c:	7662                	ld	a2,56(sp)
    8000d30e:	75c2                	ld	a1,48(sp)
    8000d310:	08a8                	addi	a0,sp,88
    8000d312:	ffffe097          	auipc	ra,0xffffe
    8000d316:	8a4080e7          	jalr	-1884(ra) # 8000abb6 <_ZN4core4iter6traits8iterator8Iterator9enumerate17hf4bbd83c6ce36188E>
    8000d31a:	a009                	j	8000d31c <_ZN6kernel7process7manager11ProcManager14proc_mapstacks17he92f2c2a936a1699E+0x26>
    8000d31c:	0088                	addi	a0,sp,64
    8000d31e:	08ac                	addi	a1,sp,88
    8000d320:	00005097          	auipc	ra,0x5
    8000d324:	e34080e7          	jalr	-460(ra) # 80012154 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h928d6ed65fce619dE>
    8000d328:	a009                	j	8000d32a <_ZN6kernel7process7manager11ProcManager14proc_mapstacks17he92f2c2a936a1699E+0x34>
    8000d32a:	6546                	ld	a0,80(sp)
    8000d32c:	e12a                	sd	a0,128(sp)
    8000d32e:	6526                	ld	a0,72(sp)
    8000d330:	fcaa                	sd	a0,120(sp)
    8000d332:	6506                	ld	a0,64(sp)
    8000d334:	f8aa                	sd	a0,112(sp)
    8000d336:	a009                	j	8000d338 <_ZN6kernel7process7manager11ProcManager14proc_mapstacks17he92f2c2a936a1699E+0x42>
    8000d338:	1888                	addi	a0,sp,112
    8000d33a:	00005097          	auipc	ra,0x5
    8000d33e:	d18080e7          	jalr	-744(ra) # 80012052 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2c3e0997dfaaf459E>
    8000d342:	e52a                	sd	a0,136(sp)
    8000d344:	e92e                	sd	a1,144(sp)
    8000d346:	a009                	j	8000d348 <_ZN6kernel7process7manager11ProcManager14proc_mapstacks17he92f2c2a936a1699E+0x52>
    8000d348:	654a                	ld	a0,144(sp)
    8000d34a:	00a035b3          	snez	a1,a0
    8000d34e:	4581                	li	a1,0
    8000d350:	00b50463          	beq	a0,a1,8000d358 <_ZN6kernel7process7manager11ProcManager14proc_mapstacks17he92f2c2a936a1699E+0x62>
    8000d354:	a009                	j	8000d356 <_ZN6kernel7process7manager11ProcManager14proc_mapstacks17he92f2c2a936a1699E+0x60>
    8000d356:	a029                	j	8000d360 <_ZN6kernel7process7manager11ProcManager14proc_mapstacks17he92f2c2a936a1699E+0x6a>
                PGSIZE * 4,
                PteFlags::R | PteFlags::W
            );
            
        }
    }
    8000d358:	60ee                	ld	ra,216(sp)
    8000d35a:	612d                	addi	sp,sp,224
    8000d35c:	8082                	ret
        for (pos, _) in self.tasks.iter_mut().enumerate() {
    8000d35e:	0000                	unimp
    8000d360:	652a                	ld	a0,136(sp)
    8000d362:	f02a                	sd	a0,32(sp)
    8000d364:	65ca                	ld	a1,144(sp)
    8000d366:	f12a                	sd	a0,160(sp)
    8000d368:	f52e                	sd	a1,168(sp)
    8000d36a:	f92a                	sd	a0,176(sp)
    8000d36c:	fd2e                	sd	a1,184(sp)
    8000d36e:	e1aa                	sd	a0,192(sp)
            let pa = Stack::new_zeroed();
    8000d370:	ffffd097          	auipc	ra,0xffffd
    8000d374:	c04080e7          	jalr	-1020(ra) # 80009f74 <_ZN6kernel6memory13PageAllocator10new_zeroed17h849e935775a724f6E>
    8000d378:	85aa                	mv	a1,a0
    8000d37a:	f42e                	sd	a1,40(sp)
    8000d37c:	e5aa                	sd	a0,200(sp)
    8000d37e:	a009                	j	8000d380 <_ZN6kernel7process7manager11ProcManager14proc_mapstacks17he92f2c2a936a1699E+0x8a>
            let va = kernel_stack(pos);
    8000d380:	7502                	ld	a0,32(sp)
    8000d382:	00001097          	auipc	ra,0x1
    8000d386:	f32080e7          	jalr	-206(ra) # 8000e2b4 <_ZN6kernel7process7manager12kernel_stack17h27945807ba9b8a49E>
    8000d38a:	85aa                	mv	a1,a0
    8000d38c:	ec2e                	sd	a1,24(sp)
    8000d38e:	e9aa                	sd	a0,208(sp)
    8000d390:	a009                	j	8000d392 <_ZN6kernel7process7manager11ProcManager14proc_mapstacks17he92f2c2a936a1699E+0x9c>
                VirtualAddress::new(va),
    8000d392:	6562                	ld	a0,24(sp)
    8000d394:	00004097          	auipc	ra,0x4
    8000d398:	184080e7          	jalr	388(ra) # 80011518 <_ZN6kernel6memory7address14VirtualAddress3new17h716be423461f1938E>
    8000d39c:	e82a                	sd	a0,16(sp)
    8000d39e:	a009                	j	8000d3a0 <_ZN6kernel7process7manager11ProcManager14proc_mapstacks17he92f2c2a936a1699E+0xaa>
                PhysicalAddress::new(pa),
    8000d3a0:	7522                	ld	a0,40(sp)
    8000d3a2:	00004097          	auipc	ra,0x4
    8000d3a6:	226080e7          	jalr	550(ra) # 800115c8 <_ZN6kernel6memory7address15PhysicalAddress3new17hf2b76f8479ac6235E>
    8000d3aa:	e42a                	sd	a0,8(sp)
    8000d3ac:	a009                	j	8000d3ae <_ZN6kernel7process7manager11ProcManager14proc_mapstacks17he92f2c2a936a1699E+0xb8>
    8000d3ae:	4509                	li	a0,2
    8000d3b0:	4591                	li	a1,4
                PteFlags::R | PteFlags::W
    8000d3b2:	ffffb097          	auipc	ra,0xffffb
    8000d3b6:	4e8080e7          	jalr	1256(ra) # 8000889a <_ZN93_$LT$kernel..memory..mapping..page_table_entry..PteFlags$u20$as$u20$core..ops..bit..BitOr$GT$5bitor17h95bfa721b377cbd2E>
    8000d3ba:	e02a                	sd	a0,0(sp)
    8000d3bc:	a009                	j	8000d3be <_ZN6kernel7process7manager11ProcManager14proc_mapstacks17he92f2c2a936a1699E+0xc8>
            KERNEL_PAGETABLE.kernel_map(
    8000d3be:	6702                	ld	a4,0(sp)
    8000d3c0:	6622                	ld	a2,8(sp)
    8000d3c2:	65c2                	ld	a1,16(sp)

000000008000d3c4 <.LBB2_16>:
    8000d3c4:	00056517          	auipc	a0,0x56
    8000d3c8:	c3c50513          	addi	a0,a0,-964 # 80063000 <_ZN6kernel6memory7mapping10kernel_map16KERNEL_PAGETABLE17h338fe72968ecefecE>
    8000d3cc:	6691                	lui	a3,0x4
    8000d3ce:	0000a097          	auipc	ra,0xa
    8000d3d2:	e9e080e7          	jalr	-354(ra) # 8001726c <_ZN6kernel6memory7mapping10page_table9PageTable10kernel_map17h284e6512c0cc8b52E>
    8000d3d6:	a009                	j	8000d3d8 <.LBB2_16+0x14>
        for (pos, _) in self.tasks.iter_mut().enumerate() {
    8000d3d8:	b785                	j	8000d338 <_ZN6kernel7process7manager11ProcManager14proc_mapstacks17he92f2c2a936a1699E+0x42>

Disassembly of section .text._ZN6kernel7process7manager11ProcManager9user_init17h45a7031cbcd11d0fE:

000000008000d3da <_ZN6kernel7process7manager11ProcManager9user_init17h45a7031cbcd11d0fE>:

    /// Set up first user programe
    pub unsafe fn user_init(&mut self) {
    8000d3da:	7151                	addi	sp,sp,-240
    8000d3dc:	f586                	sd	ra,232(sp)
    8000d3de:	f42a                	sd	a0,40(sp)
    8000d3e0:	f92a                	sd	a0,176(sp)

000000008000d3e2 <.LBB3_15>:
        println!("first user process init......");
    8000d3e2:	0001b597          	auipc	a1,0x1b
    8000d3e6:	d4e58593          	addi	a1,a1,-690 # 80028130 <.L__unnamed_4>

000000008000d3ea <.LBB3_16>:
    8000d3ea:	0001b697          	auipc	a3,0x1b
    8000d3ee:	d2668693          	addi	a3,a3,-730 # 80028110 <.L__unnamed_41>
    8000d3f2:	1808                	addi	a0,sp,48
    8000d3f4:	4605                	li	a2,1
    8000d3f6:	4701                	li	a4,0
    8000d3f8:	ffff8097          	auipc	ra,0xffff8
    8000d3fc:	03c080e7          	jalr	60(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8000d400:	a009                	j	8000d402 <.LBB3_16+0x18>
    8000d402:	1808                	addi	a0,sp,48
    8000d404:	00010097          	auipc	ra,0x10
    8000d408:	7ac080e7          	jalr	1964(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8000d40c:	a009                	j	8000d40e <.LBB3_16+0x24>
        let task = ProcManager::alloc_proc().expect("Fail to get unused process");
    8000d40e:	00000097          	auipc	ra,0x0
    8000d412:	15a080e7          	jalr	346(ra) # 8000d568 <_ZN6kernel7process7manager11ProcManager10alloc_proc17h18aef4c1178ef690E>
    8000d416:	f02a                	sd	a0,32(sp)
    8000d418:	a009                	j	8000d41a <.LBB3_16+0x30>
    8000d41a:	7502                	ld	a0,32(sp)

000000008000d41c <.LBB3_17>:
    8000d41c:	0001b597          	auipc	a1,0x1b
    8000d420:	d2458593          	addi	a1,a1,-732 # 80028140 <.L__unnamed_5>

000000008000d424 <.LBB3_18>:
    8000d424:	0001b697          	auipc	a3,0x1b
    8000d428:	d3c68693          	addi	a3,a3,-708 # 80028160 <.L__unnamed_6>
    8000d42c:	4669                	li	a2,26
    8000d42e:	00001097          	auipc	ra,0x1
    8000d432:	66e080e7          	jalr	1646(ra) # 8000ea9c <_ZN4core6option15Option$LT$T$GT$6expect17h5cc0070b74d715b8E>
    8000d436:	85aa                	mv	a1,a0
    8000d438:	ec2e                	sd	a1,24(sp)
    8000d43a:	fd2a                	sd	a0,184(sp)
    8000d43c:	a009                	j	8000d43e <.LBB3_18+0x1a>

        // allocate one user page and copy init's instructions
        // and data into it.
        task.pagetable.as_mut().unwrap().uvm_init(
    8000d43e:	6562                	ld	a0,24(sp)
    8000d440:	6d08                	ld	a0,24(a0)
    8000d442:	fffff097          	auipc	ra,0xfffff
    8000d446:	6a6080e7          	jalr	1702(ra) # 8000cae8 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17hfc3d5eeea9dab8e4E>
    8000d44a:	e82a                	sd	a0,16(sp)
    8000d44c:	a009                	j	8000d44e <.LBB3_18+0x2a>
    8000d44e:	6542                	ld	a0,16(sp)

000000008000d450 <.LBB3_19>:
    8000d450:	0001b597          	auipc	a1,0x1b
    8000d454:	d2858593          	addi	a1,a1,-728 # 80028178 <.L__unnamed_7>
    8000d458:	00001097          	auipc	ra,0x1
    8000d45c:	6e8080e7          	jalr	1768(ra) # 8000eb40 <_ZN4core6option15Option$LT$T$GT$6unwrap17h2b22556a60663957E>
    8000d460:	e42a                	sd	a0,8(sp)
    8000d462:	a009                	j	8000d464 <.LBB3_19+0x14>
    8000d464:	6522                	ld	a0,8(sp)

000000008000d466 <.LBB3_20>:
    8000d466:	0001e597          	auipc	a1,0x1e
    8000d46a:	12258593          	addi	a1,a1,290 # 8002b588 <_ZN6kernel7process8INITCODE17hdd0694ed5e43946eE>
    8000d46e:	03300613          	li	a2,51
    8000d472:	0000a097          	auipc	ra,0xa
    8000d476:	e78080e7          	jalr	-392(ra) # 800172ea <_ZN6kernel6memory7mapping10page_table9PageTable8uvm_init17h1e8988bec17c91edE>
    8000d47a:	a009                	j	8000d47c <.LBB3_20+0x16>
    8000d47c:	6562                	ld	a0,24(sp)
    8000d47e:	6585                	lui	a1,0x1
            &INITCODE,
        );

        task.size = PGSIZE;
    8000d480:	e90c                	sd	a1,16(a0)

        // prepare for the very first "return" from kernel to user. 
        let tf = &mut *task.trapframe;
    8000d482:	7110                	ld	a2,32(a0)
    8000d484:	e1b2                	sd	a2,192(sp)
    8000d486:	4581                	li	a1,0
        tf.epc = 0; // user program counter
    8000d488:	ee0c                	sd	a1,24(a2)

000000008000d48a <.LBB3_21>:
        tf.sp = 4 * PGSIZE; // user stack pointer
    8000d48a:	00018597          	auipc	a1,0x18
    8000d48e:	15658593          	addi	a1,a1,342 # 800255e0 <.L__unnamed_35+0x18>
    8000d492:	618c                	ld	a1,0(a1)
    8000d494:	fa0c                	sd	a1,48(a2)

000000008000d496 <.LBB3_22>:

        let init_name = b"initname\0";
    8000d496:	0001b597          	auipc	a1,0x1b
    8000d49a:	cfa58593          	addi	a1,a1,-774 # 80028190 <.L__unnamed_9>
    8000d49e:	e5ae                	sd	a1,200(sp)
    8000d4a0:	4625                	li	a2,9
        task.set_name(init_name);
    8000d4a2:	00008097          	auipc	ra,0x8
    8000d4a6:	2ec080e7          	jalr	748(ra) # 8001578e <_ZN6kernel7process7process11task_struct8set_name17h97383af55b55362eE>
    8000d4aa:	a009                	j	8000d4ac <.LBB3_23>

000000008000d4ac <.LBB3_23>:
        // Set init process's directory
        task.cwd = Some(ICACHE.namei(&ROOTIPATH).expect("cannot find root inode"));
    8000d4ac:	0004c597          	auipc	a1,0x4c
    8000d4b0:	26458593          	addi	a1,a1,612 # 80059710 <_ZN6kernel2fs5inode6ICACHE17had1be8942ca79bf1E>

000000008000d4b4 <.LBB3_24>:
    8000d4b4:	0001b617          	auipc	a2,0x1b
    8000d4b8:	ce560613          	addi	a2,a2,-795 # 80028199 <.L__unnamed_10>
    8000d4bc:	0128                	addi	a0,sp,136
    8000d4be:	4689                	li	a3,2
    8000d4c0:	0000c097          	auipc	ra,0xc
    8000d4c4:	dfc080e7          	jalr	-516(ra) # 800192bc <_ZN6kernel2fs5inode10InodeCache5namei17hc269c6a9eecf1991E>
    8000d4c8:	a009                	j	8000d4ca <.LBB3_25>

000000008000d4ca <.LBB3_25>:
    8000d4ca:	0001b597          	auipc	a1,0x1b
    8000d4ce:	cd158593          	addi	a1,a1,-815 # 8002819b <.L__unnamed_11>

000000008000d4d2 <.LBB3_26>:
    8000d4d2:	0001b697          	auipc	a3,0x1b
    8000d4d6:	ce668693          	addi	a3,a3,-794 # 800281b8 <.L__unnamed_12>
    8000d4da:	0128                	addi	a0,sp,136
    8000d4dc:	4659                	li	a2,22
    8000d4de:	00001097          	auipc	ra,0x1
    8000d4e2:	5f4080e7          	jalr	1524(ra) # 8000ead2 <_ZN4core6option15Option$LT$T$GT$6expect17h91dc8b235b72ffe4E>
    8000d4e6:	e9aa                	sd	a0,208(sp)
    8000d4e8:	edae                	sd	a1,216(sp)
    8000d4ea:	fcaa                	sd	a0,120(sp)
    8000d4ec:	e12e                	sd	a1,128(sp)
    8000d4ee:	a009                	j	8000d4f0 <.LBB3_26+0x1e>
    8000d4f0:	6562                	ld	a0,24(sp)
    8000d4f2:	658a                	ld	a1,128(sp)
    8000d4f4:	f8ae                	sd	a1,112(sp)
    8000d4f6:	75e6                	ld	a1,120(sp)
    8000d4f8:	f4ae                	sd	a1,104(sp)
    8000d4fa:	4585                	li	a1,1
    8000d4fc:	f0ae                	sd	a1,96(sp)
    8000d4fe:	3c850513          	addi	a0,a0,968
    8000d502:	ffffa097          	auipc	ra,0xffffa
    8000d506:	aa2080e7          	jalr	-1374(ra) # 80006fa4 <_ZN4core3ptr73drop_in_place$LT$core..option..Option$LT$kernel..fs..inode..Inode$GT$$GT$17h6a7b3b84406d6cdfE>
    8000d50a:	a815                	j	8000d53e <.LBB3_26+0x6c>
    8000d50c:	6562                	ld	a0,24(sp)
    8000d50e:	458d                	li	a1,3
        
        let guard = self.tasks_lock.acquire();
        task.set_state(ProcState::RUNNABLE);
    8000d510:	0ab107a3          	sb	a1,175(sp)
    8000d514:	00009097          	auipc	ra,0x9
    8000d518:	80a080e7          	jalr	-2038(ra) # 80015d1e <_ZN6kernel7process7process11task_struct9set_state17h31b362f9ace47b8fE>
    8000d51c:	a009                	j	8000d51e <.LBB3_26+0x4c>
        drop(guard);
    8000d51e:	750a                	ld	a0,160(sp)
    8000d520:	00010097          	auipc	ra,0x10
    8000d524:	94a080e7          	jalr	-1718(ra) # 8001ce6a <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    8000d528:	a009                	j	8000d52a <.LBB3_26+0x58>
    8000d52a:	6562                	ld	a0,24(sp)
    8000d52c:	75a2                	ld	a1,40(sp)
    8000d52e:	6609                	lui	a2,0x2
    8000d530:	0806061b          	addiw	a2,a2,128

        // Set init process
        self.init_proc = task as *mut task_struct;
    8000d534:	95b2                	add	a1,a1,a2
    8000d536:	e188                	sd	a0,0(a1)
    }
    8000d538:	70ae                	ld	ra,232(sp)
    8000d53a:	616d                	addi	sp,sp,240
    8000d53c:	8082                	ret
        task.cwd = Some(ICACHE.namei(&ROOTIPATH).expect("cannot find root inode"));
    8000d53e:	7522                	ld	a0,40(sp)
    8000d540:	6662                	ld	a2,24(sp)
    8000d542:	75c6                	ld	a1,112(sp)
    8000d544:	3cb63c23          	sd	a1,984(a2) # 23d8 <.Lline_table_start0+0xe7>
    8000d548:	75a6                	ld	a1,104(sp)
    8000d54a:	3cb63823          	sd	a1,976(a2)
    8000d54e:	7586                	ld	a1,96(sp)
    8000d550:	3cb63423          	sd	a1,968(a2)
    8000d554:	6589                	lui	a1,0x2
    8000d556:	0885859b          	addiw	a1,a1,136
        let guard = self.tasks_lock.acquire();
    8000d55a:	952e                	add	a0,a0,a1
    8000d55c:	00003097          	auipc	ra,0x3
    8000d560:	0d8080e7          	jalr	216(ra) # 80010634 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    8000d564:	f12a                	sd	a0,160(sp)
    8000d566:	b75d                	j	8000d50c <.LBB3_26+0x3a>

Disassembly of section .text._ZN6kernel7process7manager11ProcManager10alloc_proc17h18aef4c1178ef690E:

000000008000d568 <_ZN6kernel7process7manager11ProcManager10alloc_proc17h18aef4c1178ef690E>:
    /// If found, initialize state required to run in the kernel,
    /// and return p.acquire() held.
    /// If there are a free procs, or a memory allocation fails, return 0. 

    /// WARNING: possible error occurs here.
    pub fn alloc_proc() -> Option<&'static mut task_struct> {
    8000d568:	7135                	addi	sp,sp,-160
    8000d56a:	ed06                	sd	ra,152(sp)
    8000d56c:	6509                	lui	a0,0x2
    8000d56e:	0885059b          	addiw	a1,a0,136

000000008000d572 <.LBB4_21>:
    8000d572:	0004a517          	auipc	a0,0x4a
    8000d576:	02e50513          	addi	a0,a0,46 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    8000d57a:	952e                	add	a0,a0,a1

        let guard = unsafe { PROC_MANAGER.tasks_lock.acquire() };
    8000d57c:	00003097          	auipc	ra,0x3
    8000d580:	0b8080e7          	jalr	184(ra) # 80010634 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    8000d584:	85aa                	mv	a1,a0
    8000d586:	e0ae                	sd	a1,64(sp)
    8000d588:	f8aa                	sd	a0,112(sp)
    8000d58a:	a009                	j	8000d58c <.LBB4_22>

000000008000d58c <.LBB4_22>:

        // let alloc_pid = self.alloc_pid();
   
        for task in unsafe { PROC_MANAGER.tasks.iter_mut() } {
    8000d58c:	0004a517          	auipc	a0,0x4a
    8000d590:	01450513          	addi	a0,a0,20 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    8000d594:	45a1                	li	a1,8
    8000d596:	00004097          	auipc	ra,0x4
    8000d59a:	150080e7          	jalr	336(ra) # 800116e6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h5a59168d2366923eE>
    8000d59e:	f82a                	sd	a0,48(sp)
    8000d5a0:	fc2e                	sd	a1,56(sp)
    8000d5a2:	a009                	j	8000d5a4 <.LBB4_22+0x18>
    8000d5a4:	75e2                	ld	a1,56(sp)
    8000d5a6:	7542                	ld	a0,48(sp)
    8000d5a8:	ffffe097          	auipc	ra,0xffffe
    8000d5ac:	a2a080e7          	jalr	-1494(ra) # 8000afd2 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17ha1082b6c43007424E>
    8000d5b0:	f02a                	sd	a0,32(sp)
    8000d5b2:	f42e                	sd	a1,40(sp)
    8000d5b4:	a009                	j	8000d5b6 <.LBB4_22+0x2a>
    8000d5b6:	7522                	ld	a0,40(sp)
    8000d5b8:	7582                	ld	a1,32(sp)
    8000d5ba:	e8ae                	sd	a1,80(sp)
    8000d5bc:	ecaa                	sd	a0,88(sp)
    8000d5be:	a009                	j	8000d5c0 <.LBB4_22+0x34>
    8000d5c0:	0888                	addi	a0,sp,80
    8000d5c2:	ffffe097          	auipc	ra,0xffffe
    8000d5c6:	c46080e7          	jalr	-954(ra) # 8000b208 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17habdea9e62d8c6ddfE>
    8000d5ca:	f0aa                	sd	a0,96(sp)
    8000d5cc:	a009                	j	8000d5ce <.LBB4_22+0x42>
    8000d5ce:	7506                	ld	a0,96(sp)
    8000d5d0:	00a035b3          	snez	a1,a0
    8000d5d4:	4581                	li	a1,0
    8000d5d6:	00b50463          	beq	a0,a1,8000d5de <.LBB4_22+0x52>
    8000d5da:	a009                	j	8000d5dc <.LBB4_22+0x50>
    8000d5dc:	a801                	j	8000d5ec <.LBB4_22+0x60>
                    return Some(task)
                }
                _ => {}
            }
        }
        drop(guard);
    8000d5de:	6506                	ld	a0,64(sp)
    8000d5e0:	00010097          	auipc	ra,0x10
    8000d5e4:	88a080e7          	jalr	-1910(ra) # 8001ce6a <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    8000d5e8:	a071                	j	8000d674 <.LBB4_22+0xe8>
        for task in unsafe { PROC_MANAGER.tasks.iter_mut() } {
    8000d5ea:	0000                	unimp
    8000d5ec:	7506                	ld	a0,96(sp)
    8000d5ee:	ec2a                	sd	a0,24(sp)
    8000d5f0:	fcaa                	sd	a0,120(sp)
    8000d5f2:	e12a                	sd	a0,128(sp)
    8000d5f4:	e52a                	sd	a0,136(sp)
                ProcState::UNUSED => {
    8000d5f6:	40854503          	lbu	a0,1032(a0)
    8000d5fa:	4581                	li	a1,0
    8000d5fc:	00b50463          	beq	a0,a1,8000d604 <.LBB4_22+0x78>
    8000d600:	a009                	j	8000d602 <.LBB4_22+0x76>
        for task in unsafe { PROC_MANAGER.tasks.iter_mut() } {
    8000d602:	bf7d                	j	8000d5c0 <.LBB4_22+0x34>
                    task.pid = ProcManager::alloc_pid();
    8000d604:	00000097          	auipc	ra,0x0
    8000d608:	be0080e7          	jalr	-1056(ra) # 8000d1e4 <_ZN6kernel7process7manager11ProcManager9alloc_pid17hc71dad597dc5708aE>
    8000d60c:	e82a                	sd	a0,16(sp)
    8000d60e:	a009                	j	8000d610 <.LBB4_22+0x84>
    8000d610:	6562                	ld	a0,24(sp)
    8000d612:	65c2                	ld	a1,16(sp)
    8000d614:	3eb53823          	sd	a1,1008(a0)
    8000d618:	4599                	li	a1,6
                    task.set_state(ProcState::ALLOCATED);
    8000d61a:	06b107a3          	sb	a1,111(sp)
    8000d61e:	00008097          	auipc	ra,0x8
    8000d622:	700080e7          	jalr	1792(ra) # 80015d1e <_ZN6kernel7process7process11task_struct9set_state17h31b362f9ace47b8fE>
    8000d626:	a009                	j	8000d628 <.LBB4_22+0x9c>
                    drop(guard);
    8000d628:	6506                	ld	a0,64(sp)
    8000d62a:	00010097          	auipc	ra,0x10
    8000d62e:	840080e7          	jalr	-1984(ra) # 8001ce6a <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    8000d632:	a009                	j	8000d634 <.LBB4_22+0xa8>
                    let trapframe = unsafe{ RawPage::new_zeroed() as *mut u8 };
    8000d634:	ffffd097          	auipc	ra,0xffffd
    8000d638:	97a080e7          	jalr	-1670(ra) # 80009fae <_ZN6kernel6memory13PageAllocator10new_zeroed17hbc99bdbca8d1d931E>
    8000d63c:	e42a                	sd	a0,8(sp)
    8000d63e:	a009                	j	8000d640 <.LBB4_22+0xb4>
    8000d640:	65a2                	ld	a1,8(sp)
    8000d642:	6562                	ld	a0,24(sp)
    8000d644:	e92e                	sd	a1,144(sp)
                    task.set_trapframe(trapframe as *mut Trapframe);
    8000d646:	00008097          	auipc	ra,0x8
    8000d64a:	1c0080e7          	jalr	448(ra) # 80015806 <_ZN6kernel7process7process11task_struct13set_trapframe17he9793e67a5624ae0E>
    8000d64e:	a009                	j	8000d650 <.LBB4_22+0xc4>
                    task.pagetable = task.proc_pagetable();
    8000d650:	6562                	ld	a0,24(sp)
    8000d652:	00008097          	auipc	ra,0x8
    8000d656:	732080e7          	jalr	1842(ra) # 80015d84 <_ZN6kernel7process7process11task_struct14proc_pagetable17h014e9ba7c74d9318E>
    8000d65a:	e02a                	sd	a0,0(sp)
    8000d65c:	a009                	j	8000d65e <.LBB4_22+0xd2>
    8000d65e:	6562                	ld	a0,24(sp)
    8000d660:	6582                	ld	a1,0(sp)
    8000d662:	ed0c                	sd	a1,24(a0)
                    task.init_context();
    8000d664:	00008097          	auipc	ra,0x8
    8000d668:	1ba080e7          	jalr	442(ra) # 8001581e <_ZN6kernel7process7process11task_struct12init_context17hb9b4e203886f153dE>
    8000d66c:	a009                	j	8000d66e <.LBB4_22+0xe2>
                    return Some(task)
    8000d66e:	6562                	ld	a0,24(sp)
    8000d670:	e4aa                	sd	a0,72(sp)
        None
    }
    8000d672:	a021                	j	8000d67a <.LBB4_22+0xee>
    8000d674:	4501                	li	a0,0
        None
    8000d676:	e4aa                	sd	a0,72(sp)
    }
    8000d678:	a009                	j	8000d67a <.LBB4_22+0xee>
    8000d67a:	6526                	ld	a0,72(sp)
    8000d67c:	60ea                	ld	ra,152(sp)
    8000d67e:	610d                	addi	sp,sp,160
    8000d680:	8082                	ret

Disassembly of section .text._ZN6kernel7process7manager11ProcManager12alloc_thread17hfa981750c8094e17E:

000000008000d682 <_ZN6kernel7process7manager11ProcManager12alloc_thread17hfa981750c8094e17E>:

    pub fn alloc_thread() -> Option<&'static mut task_struct> {
    8000d682:	7135                	addi	sp,sp,-160
    8000d684:	ed06                	sd	ra,152(sp)
    8000d686:	6509                	lui	a0,0x2
    8000d688:	0885059b          	addiw	a1,a0,136

000000008000d68c <.LBB5_20>:
    8000d68c:	0004a517          	auipc	a0,0x4a
    8000d690:	f1450513          	addi	a0,a0,-236 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    8000d694:	952e                	add	a0,a0,a1

        let guard = unsafe { PROC_MANAGER.tasks_lock.acquire() };
    8000d696:	00003097          	auipc	ra,0x3
    8000d69a:	f9e080e7          	jalr	-98(ra) # 80010634 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    8000d69e:	85aa                	mv	a1,a0
    8000d6a0:	e0ae                	sd	a1,64(sp)
    8000d6a2:	f8aa                	sd	a0,112(sp)
    8000d6a4:	a009                	j	8000d6a6 <.LBB5_21>

000000008000d6a6 <.LBB5_21>:

        // let alloc_pid = self.alloc_pid();
   
        for task in unsafe { PROC_MANAGER.tasks.iter_mut() } {
    8000d6a6:	0004a517          	auipc	a0,0x4a
    8000d6aa:	efa50513          	addi	a0,a0,-262 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    8000d6ae:	45a1                	li	a1,8
    8000d6b0:	00004097          	auipc	ra,0x4
    8000d6b4:	036080e7          	jalr	54(ra) # 800116e6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h5a59168d2366923eE>
    8000d6b8:	f82a                	sd	a0,48(sp)
    8000d6ba:	fc2e                	sd	a1,56(sp)
    8000d6bc:	a009                	j	8000d6be <.LBB5_21+0x18>
    8000d6be:	75e2                	ld	a1,56(sp)
    8000d6c0:	7542                	ld	a0,48(sp)
    8000d6c2:	ffffe097          	auipc	ra,0xffffe
    8000d6c6:	910080e7          	jalr	-1776(ra) # 8000afd2 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17ha1082b6c43007424E>
    8000d6ca:	f02a                	sd	a0,32(sp)
    8000d6cc:	f42e                	sd	a1,40(sp)
    8000d6ce:	a009                	j	8000d6d0 <.LBB5_21+0x2a>
    8000d6d0:	7522                	ld	a0,40(sp)
    8000d6d2:	7582                	ld	a1,32(sp)
    8000d6d4:	e8ae                	sd	a1,80(sp)
    8000d6d6:	ecaa                	sd	a0,88(sp)
    8000d6d8:	a009                	j	8000d6da <.LBB5_21+0x34>
    8000d6da:	0888                	addi	a0,sp,80
    8000d6dc:	ffffe097          	auipc	ra,0xffffe
    8000d6e0:	b2c080e7          	jalr	-1236(ra) # 8000b208 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17habdea9e62d8c6ddfE>
    8000d6e4:	f0aa                	sd	a0,96(sp)
    8000d6e6:	a009                	j	8000d6e8 <.LBB5_21+0x42>
    8000d6e8:	7506                	ld	a0,96(sp)
    8000d6ea:	00a035b3          	snez	a1,a0
    8000d6ee:	4581                	li	a1,0
    8000d6f0:	00b50463          	beq	a0,a1,8000d6f8 <.LBB5_21+0x52>
    8000d6f4:	a009                	j	8000d6f6 <.LBB5_21+0x50>
    8000d6f6:	a801                	j	8000d706 <.LBB5_21+0x60>
                    return Some(task)
                }
                _ => {}
            }
        }
        drop(guard);
    8000d6f8:	6506                	ld	a0,64(sp)
    8000d6fa:	0000f097          	auipc	ra,0xf
    8000d6fe:	770080e7          	jalr	1904(ra) # 8001ce6a <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    8000d702:	a8ad                	j	8000d77c <.LBB5_21+0xd6>
        for task in unsafe { PROC_MANAGER.tasks.iter_mut() } {
    8000d704:	0000                	unimp
    8000d706:	7506                	ld	a0,96(sp)
    8000d708:	ec2a                	sd	a0,24(sp)
    8000d70a:	fcaa                	sd	a0,120(sp)
    8000d70c:	e12a                	sd	a0,128(sp)
    8000d70e:	e52a                	sd	a0,136(sp)
                ProcState::UNUSED => {
    8000d710:	40854503          	lbu	a0,1032(a0)
    8000d714:	4581                	li	a1,0
    8000d716:	00b50463          	beq	a0,a1,8000d71e <.LBB5_21+0x78>
    8000d71a:	a009                	j	8000d71c <.LBB5_21+0x76>
        for task in unsafe { PROC_MANAGER.tasks.iter_mut() } {
    8000d71c:	bf7d                	j	8000d6da <.LBB5_21+0x34>
                    task.pid = ProcManager::alloc_pid();
    8000d71e:	00000097          	auipc	ra,0x0
    8000d722:	ac6080e7          	jalr	-1338(ra) # 8000d1e4 <_ZN6kernel7process7manager11ProcManager9alloc_pid17hc71dad597dc5708aE>
    8000d726:	e82a                	sd	a0,16(sp)
    8000d728:	a009                	j	8000d72a <.LBB5_21+0x84>
    8000d72a:	6562                	ld	a0,24(sp)
    8000d72c:	65c2                	ld	a1,16(sp)
    8000d72e:	3eb53823          	sd	a1,1008(a0)
    8000d732:	4599                	li	a1,6
                    task.set_state(ProcState::ALLOCATED);
    8000d734:	06b107a3          	sb	a1,111(sp)
    8000d738:	00008097          	auipc	ra,0x8
    8000d73c:	5e6080e7          	jalr	1510(ra) # 80015d1e <_ZN6kernel7process7process11task_struct9set_state17h31b362f9ace47b8fE>
    8000d740:	a009                	j	8000d742 <.LBB5_21+0x9c>
                    drop(guard);
    8000d742:	6506                	ld	a0,64(sp)
    8000d744:	0000f097          	auipc	ra,0xf
    8000d748:	726080e7          	jalr	1830(ra) # 8001ce6a <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    8000d74c:	a009                	j	8000d74e <.LBB5_21+0xa8>
                    let trapframe = unsafe{ RawPage::new_zeroed() as *mut u8 };
    8000d74e:	ffffd097          	auipc	ra,0xffffd
    8000d752:	860080e7          	jalr	-1952(ra) # 80009fae <_ZN6kernel6memory13PageAllocator10new_zeroed17hbc99bdbca8d1d931E>
    8000d756:	e42a                	sd	a0,8(sp)
    8000d758:	a009                	j	8000d75a <.LBB5_21+0xb4>
    8000d75a:	65a2                	ld	a1,8(sp)
    8000d75c:	6562                	ld	a0,24(sp)
    8000d75e:	e92e                	sd	a1,144(sp)
                    task.set_trapframe(trapframe as *mut Trapframe);
    8000d760:	00008097          	auipc	ra,0x8
    8000d764:	0a6080e7          	jalr	166(ra) # 80015806 <_ZN6kernel7process7process11task_struct13set_trapframe17he9793e67a5624ae0E>
    8000d768:	a009                	j	8000d76a <.LBB5_21+0xc4>
                    task.init_context();
    8000d76a:	6562                	ld	a0,24(sp)
    8000d76c:	00008097          	auipc	ra,0x8
    8000d770:	0b2080e7          	jalr	178(ra) # 8001581e <_ZN6kernel7process7process11task_struct12init_context17hb9b4e203886f153dE>
    8000d774:	a009                	j	8000d776 <.LBB5_21+0xd0>
                    return Some(task)
    8000d776:	6562                	ld	a0,24(sp)
    8000d778:	e4aa                	sd	a0,72(sp)
        None
    }
    8000d77a:	a021                	j	8000d782 <.LBB5_21+0xdc>
    8000d77c:	4501                	li	a0,0
        None
    8000d77e:	e4aa                	sd	a0,72(sp)
    }
    8000d780:	a009                	j	8000d782 <.LBB5_21+0xdc>
    8000d782:	6526                	ld	a0,72(sp)
    8000d784:	60ea                	ld	ra,152(sp)
    8000d786:	610d                	addi	sp,sp,160
    8000d788:	8082                	ret

Disassembly of section .text._ZN6kernel7process7manager11ProcManager7wakeup117hddcdae2e398d5cf3E:

000000008000d78a <_ZN6kernel7process7manager11ProcManager7wakeup117hddcdae2e398d5cf3E>:


    pub fn wakeup1(channel: usize){
    8000d78a:	7119                	addi	sp,sp,-128
    8000d78c:	fc86                	sd	ra,120(sp)
    8000d78e:	f02a                	sd	a0,32(sp)
    8000d790:	ecaa                	sd	a0,88(sp)

000000008000d792 <.LBB6_17>:
        for task in unsafe { PROC_MANAGER.tasks.iter_mut() }{
    8000d792:	0004a517          	auipc	a0,0x4a
    8000d796:	e0e50513          	addi	a0,a0,-498 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    8000d79a:	45a1                	li	a1,8
    8000d79c:	00004097          	auipc	ra,0x4
    8000d7a0:	f4a080e7          	jalr	-182(ra) # 800116e6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h5a59168d2366923eE>
    8000d7a4:	f42a                	sd	a0,40(sp)
    8000d7a6:	f82e                	sd	a1,48(sp)
    8000d7a8:	a009                	j	8000d7aa <.LBB6_17+0x18>
    8000d7aa:	75c2                	ld	a1,48(sp)
    8000d7ac:	7522                	ld	a0,40(sp)
    8000d7ae:	ffffe097          	auipc	ra,0xffffe
    8000d7b2:	824080e7          	jalr	-2012(ra) # 8000afd2 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17ha1082b6c43007424E>
    8000d7b6:	e82a                	sd	a0,16(sp)
    8000d7b8:	ec2e                	sd	a1,24(sp)
    8000d7ba:	a009                	j	8000d7bc <.LBB6_17+0x2a>
    8000d7bc:	6562                	ld	a0,24(sp)
    8000d7be:	65c2                	ld	a1,16(sp)
    8000d7c0:	fc2e                	sd	a1,56(sp)
    8000d7c2:	e0aa                	sd	a0,64(sp)
    8000d7c4:	a009                	j	8000d7c6 <.LBB6_17+0x34>
    8000d7c6:	1828                	addi	a0,sp,56
    8000d7c8:	ffffe097          	auipc	ra,0xffffe
    8000d7cc:	a40080e7          	jalr	-1472(ra) # 8000b208 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17habdea9e62d8c6ddfE>
    8000d7d0:	e4aa                	sd	a0,72(sp)
    8000d7d2:	a009                	j	8000d7d4 <.LBB6_17+0x42>
    8000d7d4:	6526                	ld	a0,72(sp)
    8000d7d6:	00a035b3          	snez	a1,a0
    8000d7da:	4581                	li	a1,0
    8000d7dc:	00b50463          	beq	a0,a1,8000d7e4 <.LBB6_17+0x52>
    8000d7e0:	a009                	j	8000d7e2 <.LBB6_17+0x50>
    8000d7e2:	a029                	j	8000d7ec <.LBB6_17+0x5a>
            if task.state == ProcState::SLEEPING && task.channel == channel {
                task.state = ProcState::RUNNABLE;
            }
        }
    }
    8000d7e4:	70e6                	ld	ra,120(sp)
    8000d7e6:	6109                	addi	sp,sp,128
    8000d7e8:	8082                	ret
        for task in unsafe { PROC_MANAGER.tasks.iter_mut() }{
    8000d7ea:	0000                	unimp
    8000d7ec:	6526                	ld	a0,72(sp)
    8000d7ee:	e02a                	sd	a0,0(sp)
    8000d7f0:	f0aa                	sd	a0,96(sp)
    8000d7f2:	f4aa                	sd	a0,104(sp)
    8000d7f4:	f8aa                	sd	a0,112(sp)
            if task.state == ProcState::SLEEPING && task.channel == channel {
    8000d7f6:	40850513          	addi	a0,a0,1032

000000008000d7fa <.LBB6_18>:
    8000d7fa:	0001b597          	auipc	a1,0x1b
    8000d7fe:	9d658593          	addi	a1,a1,-1578 # 800281d0 <.L__unnamed_13>
    8000d802:	00009097          	auipc	ra,0x9
    8000d806:	0bc080e7          	jalr	188(ra) # 800168be <_ZN76_$LT$kernel..process..process..ProcState$u20$as$u20$core..cmp..PartialEq$GT$2eq17hc7c8c767a75b25feE>
    8000d80a:	e42a                	sd	a0,8(sp)
    8000d80c:	a02d                	j	8000d836 <.LBB6_18+0x3c>
    8000d80e:	4505                	li	a0,1
    8000d810:	04a10b23          	sb	a0,86(sp)
    8000d814:	a821                	j	8000d82c <.LBB6_18+0x32>
    8000d816:	4501                	li	a0,0
    8000d818:	04a10b23          	sb	a0,86(sp)
    8000d81c:	a801                	j	8000d82c <.LBB6_18+0x32>
    8000d81e:	7582                	ld	a1,32(sp)
    8000d820:	6502                	ld	a0,0(sp)
    8000d822:	3e053503          	ld	a0,992(a0)
    8000d826:	feb504e3          	beq	a0,a1,8000d80e <.LBB6_18+0x14>
    8000d82a:	b7f5                	j	8000d816 <.LBB6_18+0x1c>
    8000d82c:	05614503          	lbu	a0,86(sp)
    8000d830:	8905                	andi	a0,a0,1
    8000d832:	e509                	bnez	a0,8000d83c <.LBB6_18+0x42>
    8000d834:	a819                	j	8000d84a <.LBB6_18+0x50>
    8000d836:	6522                	ld	a0,8(sp)
    8000d838:	f17d                	bnez	a0,8000d81e <.LBB6_18+0x24>
    8000d83a:	bff1                	j	8000d816 <.LBB6_18+0x1c>
    8000d83c:	6582                	ld	a1,0(sp)
    8000d83e:	450d                	li	a0,3
                task.state = ProcState::RUNNABLE;
    8000d840:	04a10ba3          	sb	a0,87(sp)
    8000d844:	40a58423          	sb	a0,1032(a1)
            if task.state == ProcState::SLEEPING && task.channel == channel {
    8000d848:	a011                	j	8000d84c <.LBB6_18+0x52>
    8000d84a:	a009                	j	8000d84c <.LBB6_18+0x52>
        for task in unsafe { PROC_MANAGER.tasks.iter_mut() }{
    8000d84c:	bfad                	j	8000d7c6 <.LBB6_17+0x34>

Disassembly of section .text._ZN6kernel7process7manager11ProcManager7wake_up17ha46b4d15ac07187bE:

000000008000d84e <_ZN6kernel7process7manager11ProcManager7wake_up17ha46b4d15ac07187bE>:

    /// Wake up all processes sleeping on chan.
    /// Must be called without any p->lock.

    pub fn wake_up(&mut self, channel: usize) {
    8000d84e:	7179                	addi	sp,sp,-48
    8000d850:	f406                	sd	ra,40(sp)
    8000d852:	e02e                	sd	a1,0(sp)
    8000d854:	e82a                	sd	a0,16(sp)
    8000d856:	ec2e                	sd	a1,24(sp)
    8000d858:	6589                	lui	a1,0x2
    8000d85a:	0885859b          	addiw	a1,a1,136
        let guard = self.tasks_lock.acquire();
    8000d85e:	952e                	add	a0,a0,a1
    8000d860:	00003097          	auipc	ra,0x3
    8000d864:	dd4080e7          	jalr	-556(ra) # 80010634 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    8000d868:	85aa                	mv	a1,a0
    8000d86a:	e42e                	sd	a1,8(sp)
    8000d86c:	f02a                	sd	a0,32(sp)
    8000d86e:	a009                	j	8000d870 <_ZN6kernel7process7manager11ProcManager7wake_up17ha46b4d15ac07187bE+0x22>
        ProcManager::wakeup1(channel);
    8000d870:	6502                	ld	a0,0(sp)
    8000d872:	00000097          	auipc	ra,0x0
    8000d876:	f18080e7          	jalr	-232(ra) # 8000d78a <_ZN6kernel7process7manager11ProcManager7wakeup117hddcdae2e398d5cf3E>
    8000d87a:	a009                	j	8000d87c <_ZN6kernel7process7manager11ProcManager7wake_up17ha46b4d15ac07187bE+0x2e>
        drop(guard);
    8000d87c:	6522                	ld	a0,8(sp)
    8000d87e:	0000f097          	auipc	ra,0xf
    8000d882:	5ec080e7          	jalr	1516(ra) # 8001ce6a <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    8000d886:	a009                	j	8000d888 <_ZN6kernel7process7manager11ProcManager7wake_up17ha46b4d15ac07187bE+0x3a>
    }
    8000d888:	70a2                	ld	ra,40(sp)
    8000d88a:	6145                	addi	sp,sp,48
    8000d88c:	8082                	ret

Disassembly of section .text._ZN6kernel7process7manager11ProcManager13seek_runnable17h4972a46c3e17c2c4E:

000000008000d88e <_ZN6kernel7process7manager11ProcManager13seek_runnable17h4972a46c3e17c2c4E>:

    /// Find a runnable and set status to allocated
    /// should in lock
    pub fn seek_runnable(&mut self) -> Option<&mut task_struct> {
    8000d88e:	7119                	addi	sp,sp,-128
    8000d890:	fc86                	sd	ra,120(sp)
    8000d892:	ecaa                	sd	a0,88(sp)
    8000d894:	45a1                	li	a1,8
        // let guard = self.tasks_lock.acquire();
        for task in self.tasks.iter_mut() {
    8000d896:	00004097          	auipc	ra,0x4
    8000d89a:	e50080e7          	jalr	-432(ra) # 800116e6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h5a59168d2366923eE>
    8000d89e:	f42a                	sd	a0,40(sp)
    8000d8a0:	f82e                	sd	a1,48(sp)
    8000d8a2:	a009                	j	8000d8a4 <_ZN6kernel7process7manager11ProcManager13seek_runnable17h4972a46c3e17c2c4E+0x16>
    8000d8a4:	75c2                	ld	a1,48(sp)
    8000d8a6:	7522                	ld	a0,40(sp)
    8000d8a8:	ffffd097          	auipc	ra,0xffffd
    8000d8ac:	72a080e7          	jalr	1834(ra) # 8000afd2 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17ha1082b6c43007424E>
    8000d8b0:	ec2a                	sd	a0,24(sp)
    8000d8b2:	f02e                	sd	a1,32(sp)
    8000d8b4:	a009                	j	8000d8b6 <_ZN6kernel7process7manager11ProcManager13seek_runnable17h4972a46c3e17c2c4E+0x28>
    8000d8b6:	7502                	ld	a0,32(sp)
    8000d8b8:	65e2                	ld	a1,24(sp)
    8000d8ba:	e0ae                	sd	a1,64(sp)
    8000d8bc:	e4aa                	sd	a0,72(sp)
    8000d8be:	a009                	j	8000d8c0 <_ZN6kernel7process7manager11ProcManager13seek_runnable17h4972a46c3e17c2c4E+0x32>
    8000d8c0:	0088                	addi	a0,sp,64
    8000d8c2:	ffffe097          	auipc	ra,0xffffe
    8000d8c6:	946080e7          	jalr	-1722(ra) # 8000b208 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17habdea9e62d8c6ddfE>
    8000d8ca:	e8aa                	sd	a0,80(sp)
    8000d8cc:	a009                	j	8000d8ce <_ZN6kernel7process7manager11ProcManager13seek_runnable17h4972a46c3e17c2c4E+0x40>
    8000d8ce:	6546                	ld	a0,80(sp)
    8000d8d0:	00a035b3          	snez	a1,a0
    8000d8d4:	4581                	li	a1,0
    8000d8d6:	00b50463          	beq	a0,a1,8000d8de <_ZN6kernel7process7manager11ProcManager13seek_runnable17h4972a46c3e17c2c4E+0x50>
    8000d8da:	a009                	j	8000d8dc <_ZN6kernel7process7manager11ProcManager13seek_runnable17h4972a46c3e17c2c4E+0x4e>
    8000d8dc:	a029                	j	8000d8e6 <_ZN6kernel7process7manager11ProcManager13seek_runnable17h4972a46c3e17c2c4E+0x58>
    8000d8de:	4501                	li	a0,0
            // }
            if task.state == ProcState::RUNNABLE {
                return Some(task)
            }
        }
        None
    8000d8e0:	fc2a                	sd	a0,56(sp)
    }
    8000d8e2:	a825                	j	8000d91a <.LBB8_13+0x26>
        for task in self.tasks.iter_mut() {
    8000d8e4:	0000                	unimp
    8000d8e6:	6546                	ld	a0,80(sp)
    8000d8e8:	e42a                	sd	a0,8(sp)
    8000d8ea:	f0aa                	sd	a0,96(sp)
    8000d8ec:	f4aa                	sd	a0,104(sp)
    8000d8ee:	f8aa                	sd	a0,112(sp)
            if task.state == ProcState::RUNNABLE {
    8000d8f0:	40850513          	addi	a0,a0,1032

000000008000d8f4 <.LBB8_13>:
    8000d8f4:	0001b597          	auipc	a1,0x1b
    8000d8f8:	8dd58593          	addi	a1,a1,-1827 # 800281d1 <.L__unnamed_14>
    8000d8fc:	00009097          	auipc	ra,0x9
    8000d900:	fc2080e7          	jalr	-62(ra) # 800168be <_ZN76_$LT$kernel..process..process..ProcState$u20$as$u20$core..cmp..PartialEq$GT$2eq17hc7c8c767a75b25feE>
    8000d904:	e82a                	sd	a0,16(sp)
    8000d906:	a009                	j	8000d908 <.LBB8_13+0x14>
    8000d908:	6542                	ld	a0,16(sp)
    8000d90a:	4581                	li	a1,0
    8000d90c:	00b50663          	beq	a0,a1,8000d918 <.LBB8_13+0x24>
    8000d910:	a009                	j	8000d912 <.LBB8_13+0x1e>
                return Some(task)
    8000d912:	6522                	ld	a0,8(sp)
    8000d914:	fc2a                	sd	a0,56(sp)
    }
    8000d916:	a011                	j	8000d91a <.LBB8_13+0x26>
        for task in self.tasks.iter_mut() {
    8000d918:	b765                	j	8000d8c0 <_ZN6kernel7process7manager11ProcManager13seek_runnable17h4972a46c3e17c2c4E+0x32>
    }
    8000d91a:	7562                	ld	a0,56(sp)
    8000d91c:	70e6                	ld	ra,120(sp)
    8000d91e:	6109                	addi	sp,sp,128
    8000d920:	8082                	ret

Disassembly of section .text._ZN6kernel7process7manager11ProcManager8reparent17hc41daea1f75613cfE:

000000008000d922 <_ZN6kernel7process7manager11ProcManager8reparent17hc41daea1f75613cfE>:

    /// Pass p's abandonded children to init. 
    /// Caller must hold wait lock.  tasks_lock
    pub fn reparent(proc: &mut task_struct) {
    8000d922:	7175                	addi	sp,sp,-144
    8000d924:	e506                	sd	ra,136(sp)
    8000d926:	f02a                	sd	a0,32(sp)
    8000d928:	f0aa                	sd	a0,96(sp)

000000008000d92a <.LBB9_15>:
        //                 pdata.parent = Some(self.init_proc);
        //                 self.wake_up(self.init_proc as usize);
        //             }
        //         }
        // }
        for task in unsafe { PROC_MANAGER.tasks.iter_mut() } {
    8000d92a:	0004a517          	auipc	a0,0x4a
    8000d92e:	c7650513          	addi	a0,a0,-906 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    8000d932:	45a1                	li	a1,8
    8000d934:	00004097          	auipc	ra,0x4
    8000d938:	db2080e7          	jalr	-590(ra) # 800116e6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h5a59168d2366923eE>
    8000d93c:	f42a                	sd	a0,40(sp)
    8000d93e:	f82e                	sd	a1,48(sp)
    8000d940:	a009                	j	8000d942 <.LBB9_15+0x18>
    8000d942:	75c2                	ld	a1,48(sp)
    8000d944:	7522                	ld	a0,40(sp)
    8000d946:	ffffd097          	auipc	ra,0xffffd
    8000d94a:	68c080e7          	jalr	1676(ra) # 8000afd2 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17ha1082b6c43007424E>
    8000d94e:	e82a                	sd	a0,16(sp)
    8000d950:	ec2e                	sd	a1,24(sp)
    8000d952:	a009                	j	8000d954 <.LBB9_15+0x2a>
    8000d954:	6562                	ld	a0,24(sp)
    8000d956:	65c2                	ld	a1,16(sp)
    8000d958:	fc2e                	sd	a1,56(sp)
    8000d95a:	e0aa                	sd	a0,64(sp)
    8000d95c:	a009                	j	8000d95e <.LBB9_15+0x34>
    8000d95e:	1828                	addi	a0,sp,56
    8000d960:	ffffe097          	auipc	ra,0xffffe
    8000d964:	8a8080e7          	jalr	-1880(ra) # 8000b208 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17habdea9e62d8c6ddfE>
    8000d968:	e4aa                	sd	a0,72(sp)
    8000d96a:	a009                	j	8000d96c <.LBB9_15+0x42>
    8000d96c:	6526                	ld	a0,72(sp)
    8000d96e:	00a035b3          	snez	a1,a0
    8000d972:	4581                	li	a1,0
    8000d974:	00b50463          	beq	a0,a1,8000d97c <.LBB9_15+0x52>
    8000d978:	a009                	j	8000d97a <.LBB9_15+0x50>
    8000d97a:	a029                	j	8000d984 <.LBB9_15+0x5a>
                    // if task.state == ProcState::ZOMBIE     !!!!!!!!TODO
                    ProcManager::wakeup1(unsafe { PROC_MANAGER.init_proc as usize });
                } 
            }
        }
    }
    8000d97c:	60aa                	ld	ra,136(sp)
    8000d97e:	6149                	addi	sp,sp,144
    8000d980:	8082                	ret
        for task in unsafe { PROC_MANAGER.tasks.iter_mut() } {
    8000d982:	0000                	unimp
    8000d984:	6526                	ld	a0,72(sp)
    8000d986:	e42a                	sd	a0,8(sp)
    8000d988:	f4aa                	sd	a0,104(sp)
    8000d98a:	f8aa                	sd	a0,112(sp)
    8000d98c:	fcaa                	sd	a0,120(sp)
            if let Some(parent) = task.parent {
    8000d98e:	6d48                	ld	a0,152(a0)
    8000d990:	4581                	li	a1,0
    8000d992:	00b51463          	bne	a0,a1,8000d99a <.LBB9_15+0x70>
    8000d996:	a009                	j	8000d998 <.LBB9_15+0x6e>
    8000d998:	a83d                	j	8000d9d6 <.LBB9_16+0x26>
    8000d99a:	7582                	ld	a1,32(sp)
    8000d99c:	6522                	ld	a0,8(sp)
    8000d99e:	7148                	ld	a0,160(a0)
    8000d9a0:	e12a                	sd	a0,128(sp)
                if parent as *const _ == proc as *const _ {
    8000d9a2:	02b51863          	bne	a0,a1,8000d9d2 <.LBB9_16+0x22>
    8000d9a6:	a009                	j	8000d9a8 <.LBB9_15+0x7e>
    8000d9a8:	6622                	ld	a2,8(sp)
    8000d9aa:	6509                	lui	a0,0x2
    8000d9ac:	0805059b          	addiw	a1,a0,128

000000008000d9b0 <.LBB9_16>:
    8000d9b0:	0004a517          	auipc	a0,0x4a
    8000d9b4:	bf050513          	addi	a0,a0,-1040 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    8000d9b8:	952e                	add	a0,a0,a1
                    task.parent = unsafe { Some(PROC_MANAGER.init_proc) };
    8000d9ba:	610c                	ld	a1,0(a0)
    8000d9bc:	ecae                	sd	a1,88(sp)
    8000d9be:	4685                	li	a3,1
    8000d9c0:	e8b6                	sd	a3,80(sp)
    8000d9c2:	ee54                	sd	a3,152(a2)
    8000d9c4:	f24c                	sd	a1,160(a2)
                    ProcManager::wakeup1(unsafe { PROC_MANAGER.init_proc as usize });
    8000d9c6:	6108                	ld	a0,0(a0)
    8000d9c8:	00000097          	auipc	ra,0x0
    8000d9cc:	dc2080e7          	jalr	-574(ra) # 8000d78a <_ZN6kernel7process7manager11ProcManager7wakeup117hddcdae2e398d5cf3E>
    8000d9d0:	a011                	j	8000d9d4 <.LBB9_16+0x24>
                if parent as *const _ == proc as *const _ {
    8000d9d2:	a011                	j	8000d9d6 <.LBB9_16+0x26>
    8000d9d4:	a009                	j	8000d9d6 <.LBB9_16+0x26>
        for task in unsafe { PROC_MANAGER.tasks.iter_mut() } {
    8000d9d6:	b761                	j	8000d95e <.LBB9_15+0x34>

Disassembly of section .text._ZN6kernel7process7manager11ProcManager4exit17hfa49a8445fc58f81E:

000000008000d9d8 <_ZN6kernel7process7manager11ProcManager4exit17hfa49a8445fc58f81E>:
    
    /// Exit the current process. Does not return. 
    /// An exited process remains in the zombie state 
    /// until its parent calls wait. 
    pub fn exit(&mut self, status : usize) -> ! {
    8000d9d8:	712d                	addi	sp,sp,-288
    8000d9da:	ee06                	sd	ra,280(sp)
    8000d9dc:	ecae                	sd	a1,88(sp)
    8000d9de:	f0aa                	sd	a0,96(sp)
    8000d9e0:	e5aa                	sd	a0,200(sp)
    8000d9e2:	e9ae                	sd	a1,208(sp)

000000008000d9e4 <.LBB10_33>:
        let curtask = unsafe {
            CPU_MANAGER.myproc().expect("Current cpu's process is none.")
    8000d9e4:	00056517          	auipc	a0,0x56
    8000d9e8:	75c50513          	addi	a0,a0,1884 # 80064140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    8000d9ec:	00004097          	auipc	ra,0x4
    8000d9f0:	03e080e7          	jalr	62(ra) # 80011a2a <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    8000d9f4:	f4aa                	sd	a0,104(sp)
    8000d9f6:	a009                	j	8000d9f8 <.LBB10_33+0x14>
    8000d9f8:	7526                	ld	a0,104(sp)

000000008000d9fa <.LBB10_34>:
    8000d9fa:	0001a597          	auipc	a1,0x1a
    8000d9fe:	7d858593          	addi	a1,a1,2008 # 800281d2 <.L__unnamed_15>

000000008000da02 <.LBB10_35>:
    8000da02:	0001a697          	auipc	a3,0x1a
    8000da06:	7ee68693          	addi	a3,a3,2030 # 800281f0 <.L__unnamed_16>
    8000da0a:	4679                	li	a2,30
    8000da0c:	00001097          	auipc	ra,0x1
    8000da10:	090080e7          	jalr	144(ra) # 8000ea9c <_ZN4core6option15Option$LT$T$GT$6expect17h5cc0070b74d715b8E>
    8000da14:	e8aa                	sd	a0,80(sp)
    8000da16:	a009                	j	8000da18 <.LBB10_35+0x16>
    8000da18:	6546                	ld	a0,80(sp)
    8000da1a:	edaa                	sd	a0,216(sp)
        };
        // close all open files. 
        
        let open_files = &mut curtask.open_files;
    8000da1c:	0a850513          	addi	a0,a0,168
    8000da20:	e0aa                	sd	a0,64(sp)
    8000da22:	f1aa                	sd	a0,224(sp)
    8000da24:	06400593          	li	a1,100
        // 遍历该进程打开的文件，夺取所有权，即将引用计数减一
        for index in 0..open_files.len() {
    8000da28:	00001097          	auipc	ra,0x1
    8000da2c:	9a2080e7          	jalr	-1630(ra) # 8000e3ca <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h659c29622d59b861E>
    8000da30:	e4aa                	sd	a0,72(sp)
    8000da32:	a009                	j	8000da34 <.LBB10_35+0x32>
    8000da34:	65a6                	ld	a1,72(sp)
    8000da36:	4501                	li	a0,0
    8000da38:	f8aa                	sd	a0,112(sp)
    8000da3a:	fcae                	sd	a1,120(sp)
    8000da3c:	00012097          	auipc	ra,0x12
    8000da40:	d8c080e7          	jalr	-628(ra) # 8001f7c8 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he0a8d93712e5493bE>
    8000da44:	f82a                	sd	a0,48(sp)
    8000da46:	fc2e                	sd	a1,56(sp)
    8000da48:	a009                	j	8000da4a <.LBB10_35+0x48>
    8000da4a:	7562                	ld	a0,56(sp)
    8000da4c:	75c2                	ld	a1,48(sp)
    8000da4e:	e12e                	sd	a1,128(sp)
    8000da50:	e52a                	sd	a0,136(sp)
    8000da52:	a009                	j	8000da54 <.LBB10_35+0x52>
    8000da54:	0108                	addi	a0,sp,128
    8000da56:	00012097          	auipc	ra,0x12
    8000da5a:	d04080e7          	jalr	-764(ra) # 8001f75a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE>
    8000da5e:	e92a                	sd	a0,144(sp)
    8000da60:	ed2e                	sd	a1,152(sp)
    8000da62:	a009                	j	8000da64 <.LBB10_35+0x62>
    8000da64:	654a                	ld	a0,144(sp)
    8000da66:	4581                	li	a1,0
    8000da68:	00b50463          	beq	a0,a1,8000da70 <.LBB10_36>
    8000da6c:	a009                	j	8000da6e <.LBB10_35+0x6c>
    8000da6e:	a819                	j	8000da84 <.LBB10_36+0x14>

000000008000da70 <.LBB10_36>:
            if open_files[index].is_some() {
                open_files[index].take();
            }
        }

        LOG.begin_op();
    8000da70:	0004c517          	auipc	a0,0x4c
    8000da74:	bf850513          	addi	a0,a0,-1032 # 80059668 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    8000da78:	ffffb097          	auipc	ra,0xffffb
    8000da7c:	184080e7          	jalr	388(ra) # 80008bfc <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$8begin_op17he5b49a48c716e372E>
    8000da80:	a0a5                	j	8000dae8 <.LBB10_36+0x78>
        for index in 0..open_files.len() {
    8000da82:	0000                	unimp
    8000da84:	65ea                	ld	a1,152(sp)
    8000da86:	f42e                	sd	a1,40(sp)
    8000da88:	f5ae                	sd	a1,232(sp)
    8000da8a:	f9ae                	sd	a1,240(sp)
    8000da8c:	fdae                	sd	a1,248(sp)
    8000da8e:	06300513          	li	a0,99
            if open_files[index].is_some() {
    8000da92:	16b56a63          	bltu	a0,a1,8000dc06 <.LBB10_44+0x3e>
    8000da96:	a009                	j	8000da98 <.LBB10_36+0x28>
    8000da98:	6506                	ld	a0,64(sp)
    8000da9a:	75a2                	ld	a1,40(sp)
    8000da9c:	058e                	slli	a1,a1,0x3
    8000da9e:	952e                	add	a0,a0,a1
    8000daa0:	00001097          	auipc	ra,0x1
    8000daa4:	496080e7          	jalr	1174(ra) # 8000ef36 <_ZN4core6option15Option$LT$T$GT$7is_some17hd48c331b6466f73fE>
    8000daa8:	f02a                	sd	a0,32(sp)
    8000daaa:	a009                	j	8000daac <.LBB10_36+0x3c>
    8000daac:	7502                	ld	a0,32(sp)
    8000daae:	4581                	li	a1,0
    8000dab0:	00b50963          	beq	a0,a1,8000dac2 <.LBB10_36+0x52>
    8000dab4:	a009                	j	8000dab6 <.LBB10_36+0x46>
    8000dab6:	7522                	ld	a0,40(sp)
    8000dab8:	06400593          	li	a1,100
                open_files[index].take();
    8000dabc:	00b56463          	bltu	a0,a1,8000dac4 <.LBB10_36+0x54>
    8000dac0:	aab9                	j	8000dc1e <.LBB10_45+0x16>
            if open_files[index].is_some() {
    8000dac2:	a015                	j	8000dae6 <.LBB10_36+0x76>
                open_files[index].take();
    8000dac4:	6506                	ld	a0,64(sp)
    8000dac6:	75a2                	ld	a1,40(sp)
    8000dac8:	058e                	slli	a1,a1,0x3
    8000daca:	952e                	add	a0,a0,a1
    8000dacc:	00001097          	auipc	ra,0x1
    8000dad0:	b42080e7          	jalr	-1214(ra) # 8000e60e <_ZN4core6option15Option$LT$T$GT$4take17h80e6997975665939E>
    8000dad4:	f12a                	sd	a0,160(sp)
    8000dad6:	a009                	j	8000dad8 <.LBB10_36+0x68>
    8000dad8:	1108                	addi	a0,sp,160
    8000dada:	ffff9097          	auipc	ra,0xffff9
    8000dade:	5b0080e7          	jalr	1456(ra) # 8000708a <_ZN4core3ptr96drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$$GT$17hc79d9c89cd1d7f36E>
    8000dae2:	a009                	j	8000dae4 <.LBB10_36+0x74>
            if open_files[index].is_some() {
    8000dae4:	a009                	j	8000dae6 <.LBB10_36+0x76>
        for index in 0..open_files.len() {
    8000dae6:	b7bd                	j	8000da54 <.LBB10_35+0x52>
        let cwd = curtask.cwd.as_mut().expect("Fail to get inode");
    8000dae8:	6546                	ld	a0,80(sp)
    8000daea:	3c850513          	addi	a0,a0,968
    8000daee:	00001097          	auipc	ra,0x1
    8000daf2:	e64080e7          	jalr	-412(ra) # 8000e952 <_ZN4core6option15Option$LT$T$GT$6as_mut17he7f8c9f3d27cdb5eE>
    8000daf6:	ec2a                	sd	a0,24(sp)
    8000daf8:	a009                	j	8000dafa <.LBB10_36+0x8a>
    8000dafa:	6562                	ld	a0,24(sp)

000000008000dafc <.LBB10_37>:
    8000dafc:	0001a597          	auipc	a1,0x1a
    8000db00:	73c58593          	addi	a1,a1,1852 # 80028238 <.L__unnamed_17>

000000008000db04 <.LBB10_38>:
    8000db04:	0001a697          	auipc	a3,0x1a
    8000db08:	74c68693          	addi	a3,a3,1868 # 80028250 <.L__unnamed_18>
    8000db0c:	4645                	li	a2,17
    8000db0e:	00001097          	auipc	ra,0x1
    8000db12:	f58080e7          	jalr	-168(ra) # 8000ea66 <_ZN4core6option15Option$LT$T$GT$6expect17h3c07e85986db6eddE>
    8000db16:	85aa                	mv	a1,a0
    8000db18:	e82e                	sd	a1,16(sp)
    8000db1a:	e22a                	sd	a0,256(sp)
    8000db1c:	a009                	j	8000db1e <.LBB10_38+0x1a>
        drop(cwd);
    8000db1e:	6542                	ld	a0,16(sp)
    8000db20:	0000f097          	auipc	ra,0xf
    8000db24:	480080e7          	jalr	1152(ra) # 8001cfa0 <_ZN4core3mem4drop17he1c2696149894a05E>
    8000db28:	a009                	j	8000db2a <.LBB10_39>

000000008000db2a <.LBB10_39>:
        LOG.end_op();
    8000db2a:	0004c517          	auipc	a0,0x4c
    8000db2e:	b3e50513          	addi	a0,a0,-1218 # 80059668 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    8000db32:	ffffb097          	auipc	ra,0xffffb
    8000db36:	6b0080e7          	jalr	1712(ra) # 800091e2 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>
    8000db3a:	a009                	j	8000db3c <.LBB10_39+0x12>
    8000db3c:	6546                	ld	a0,80(sp)
    8000db3e:	4581                	li	a1,0


        curtask.cwd = None;
    8000db40:	f52e                	sd	a1,168(sp)
    8000db42:	3c850513          	addi	a0,a0,968
    8000db46:	ffff9097          	auipc	ra,0xffff9
    8000db4a:	45e080e7          	jalr	1118(ra) # 80006fa4 <_ZN4core3ptr73drop_in_place$LT$core..option..Option$LT$kernel..fs..inode..Inode$GT$$GT$17h6a7b3b84406d6cdfE>
    8000db4e:	a079                	j	8000dbdc <.LBB10_44+0x14>


        let guard = self.tasks_lock.acquire();
        // Parent might be sleeping in wait. 
        // 唤醒父进程
        ProcManager::wakeup1(curtask.parent.expect("Fail to find parent process") as usize);
    8000db50:	65c6                	ld	a1,80(sp)
    8000db52:	6dc8                	ld	a0,152(a1)
    8000db54:	71cc                	ld	a1,160(a1)

000000008000db56 <.LBB10_40>:
    8000db56:	0001a617          	auipc	a2,0x1a
    8000db5a:	71260613          	addi	a2,a2,1810 # 80028268 <.L__unnamed_19>

000000008000db5e <.LBB10_41>:
    8000db5e:	0001a717          	auipc	a4,0x1a
    8000db62:	72a70713          	addi	a4,a4,1834 # 80028288 <.L__unnamed_20>
    8000db66:	46ed                	li	a3,27
    8000db68:	00001097          	auipc	ra,0x1
    8000db6c:	e96080e7          	jalr	-362(ra) # 8000e9fe <_ZN4core6option15Option$LT$T$GT$6expect17h038f65ec579fa12bE>
    8000db70:	e42a                	sd	a0,8(sp)
    8000db72:	a009                	j	8000db74 <.LBB10_41+0x16>
    8000db74:	6522                	ld	a0,8(sp)
    8000db76:	00000097          	auipc	ra,0x0
    8000db7a:	c14080e7          	jalr	-1004(ra) # 8000d78a <_ZN6kernel7process7manager11ProcManager7wakeup117hddcdae2e398d5cf3E>
    8000db7e:	a009                	j	8000db80 <.LBB10_41+0x22>

        // Give any children to init. 
        ProcManager::reparent(curtask);
    8000db80:	6546                	ld	a0,80(sp)
    8000db82:	00000097          	auipc	ra,0x0
    8000db86:	da0080e7          	jalr	-608(ra) # 8000d922 <_ZN6kernel7process7manager11ProcManager8reparent17hc41daea1f75613cfE>
    8000db8a:	a009                	j	8000db8c <.LBB10_41+0x2e>
        // 设置退出状态
        curtask.xstate = status;
    8000db8c:	65c6                	ld	a1,80(sp)
    8000db8e:	6566                	ld	a0,88(sp)
    8000db90:	3ea5b423          	sd	a0,1000(a1)
    8000db94:	4515                	li	a0,5
        // 设置运行状态
        curtask.state = ProcState::ZOMBIE;
    8000db96:	0ca103a3          	sb	a0,199(sp)
    8000db9a:	40a58423          	sb	a0,1032(a1)

000000008000db9e <.LBB10_42>:

        let my_cpu = unsafe {
            CPU_MANAGER.mycpu()
    8000db9e:	00056517          	auipc	a0,0x56
    8000dba2:	5a250513          	addi	a0,a0,1442 # 80064140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    8000dba6:	00004097          	auipc	ra,0x4
    8000dbaa:	e38080e7          	jalr	-456(ra) # 800119de <_ZN6kernel7process3cpu10CPUManager5mycpu17hac5ae6ce2070e7c3E>
    8000dbae:	e02a                	sd	a0,0(sp)
    8000dbb0:	a009                	j	8000dbb2 <.LBB10_42+0x14>
    8000dbb2:	6502                	ld	a0,0(sp)
    8000dbb4:	ea2a                	sd	a0,272(sp)
        };
        unsafe {
            my_cpu.sched();
    8000dbb6:	00004097          	auipc	ra,0x4
    8000dbba:	09a080e7          	jalr	154(ra) # 80011c50 <_ZN6kernel7process3cpu3CPU5sched17h6aec64bf33990cbcE>
    8000dbbe:	a009                	j	8000dbc0 <.LBB10_43>

000000008000dbc0 <.LBB10_43>:
        }

        panic!("zombie exit!");
    8000dbc0:	0001a517          	auipc	a0,0x1a
    8000dbc4:	6e050513          	addi	a0,a0,1760 # 800282a0 <.L__unnamed_21>

000000008000dbc8 <.LBB10_44>:
    8000dbc8:	0001a617          	auipc	a2,0x1a
    8000dbcc:	6e860613          	addi	a2,a2,1768 # 800282b0 <.L__unnamed_22>
    8000dbd0:	45b1                	li	a1,12
    8000dbd2:	00014097          	auipc	ra,0x14
    8000dbd6:	52a080e7          	jalr	1322(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8000dbda:	0000                	unimp
        curtask.cwd = None;
    8000dbdc:	7506                	ld	a0,96(sp)
    8000dbde:	6646                	ld	a2,80(sp)
    8000dbe0:	75ea                	ld	a1,184(sp)
    8000dbe2:	3cb63c23          	sd	a1,984(a2)
    8000dbe6:	75ca                	ld	a1,176(sp)
    8000dbe8:	3cb63823          	sd	a1,976(a2)
    8000dbec:	75aa                	ld	a1,168(sp)
    8000dbee:	3cb63423          	sd	a1,968(a2)
    8000dbf2:	6589                	lui	a1,0x2
    8000dbf4:	0885859b          	addiw	a1,a1,136
        let guard = self.tasks_lock.acquire();
    8000dbf8:	952e                	add	a0,a0,a1
    8000dbfa:	00003097          	auipc	ra,0x3
    8000dbfe:	a3a080e7          	jalr	-1478(ra) # 80010634 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    8000dc02:	e62a                	sd	a0,264(sp)
    8000dc04:	b7b1                	j	8000db50 <.LBB10_39+0x26>
            if open_files[index].is_some() {
    8000dc06:	7522                	ld	a0,40(sp)

000000008000dc08 <.LBB10_45>:
    8000dc08:	0001a617          	auipc	a2,0x1a
    8000dc0c:	60060613          	addi	a2,a2,1536 # 80028208 <.L__unnamed_23>
    8000dc10:	06400593          	li	a1,100
    8000dc14:	00014097          	auipc	ra,0x14
    8000dc18:	514080e7          	jalr	1300(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    8000dc1c:	0000                	unimp
                open_files[index].take();
    8000dc1e:	7522                	ld	a0,40(sp)

000000008000dc20 <.LBB10_46>:
    8000dc20:	0001a617          	auipc	a2,0x1a
    8000dc24:	60060613          	addi	a2,a2,1536 # 80028220 <.L__unnamed_24>
    8000dc28:	06400593          	li	a1,100
    8000dc2c:	00014097          	auipc	ra,0x14
    8000dc30:	4fc080e7          	jalr	1276(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel7process7manager11ProcManager4wait17h7c4c80095cf78f04E:

000000008000dc36 <_ZN6kernel7process7manager11ProcManager4wait17h7c4c80095cf78f04E>:
    }

    /// Wait for a child process to exit and return its pid. 
    /// 等待子进程退出并返回 pid
    pub fn wait(&mut self, addr: usize) -> Option<usize> {
    8000dc36:	710d                	addi	sp,sp,-352
    8000dc38:	ee86                	sd	ra,344(sp)
    8000dc3a:	fcae                	sd	a1,120(sp)
    8000dc3c:	e12a                	sd	a0,128(sp)
    8000dc3e:	e22a                	sd	a0,256(sp)
    8000dc40:	e62e                	sd	a1,264(sp)

000000008000dc42 <.LBB11_47>:
        let pid;
        let curtask = unsafe {
            CPU_MANAGER.myproc().expect("Fail to get my process")
    8000dc42:	00056517          	auipc	a0,0x56
    8000dc46:	4fe50513          	addi	a0,a0,1278 # 80064140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    8000dc4a:	00004097          	auipc	ra,0x4
    8000dc4e:	de0080e7          	jalr	-544(ra) # 80011a2a <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    8000dc52:	e52a                	sd	a0,136(sp)
    8000dc54:	a009                	j	8000dc56 <.LBB11_47+0x14>
    8000dc56:	652a                	ld	a0,136(sp)

000000008000dc58 <.LBB11_48>:
    8000dc58:	0001a597          	auipc	a1,0x1a
    8000dc5c:	67058593          	addi	a1,a1,1648 # 800282c8 <.L__unnamed_25>

000000008000dc60 <.LBB11_49>:
    8000dc60:	0001a697          	auipc	a3,0x1a
    8000dc64:	68068693          	addi	a3,a3,1664 # 800282e0 <.L__unnamed_26>
    8000dc68:	4659                	li	a2,22
    8000dc6a:	00001097          	auipc	ra,0x1
    8000dc6e:	e32080e7          	jalr	-462(ra) # 8000ea9c <_ZN4core6option15Option$LT$T$GT$6expect17h5cc0070b74d715b8E>
    8000dc72:	f8aa                	sd	a0,112(sp)
    8000dc74:	a009                	j	8000dc76 <.LBB11_49+0x16>
    8000dc76:	7546                	ld	a0,112(sp)
    8000dc78:	ea2a                	sd	a0,272(sp)
        };
        
        // let wait_guard = self.wait_lock.acquire();
        
        loop {
    8000dc7a:	a009                	j	8000dc7c <.LBB11_49+0x1c>
    8000dc7c:	650a                	ld	a0,128(sp)
    8000dc7e:	6589                	lui	a1,0x2
    8000dc80:	0885859b          	addiw	a1,a1,136
            let tasks_guard = self.tasks_lock.acquire();
    8000dc84:	952e                	add	a0,a0,a1
    8000dc86:	00003097          	auipc	ra,0x3
    8000dc8a:	9ae080e7          	jalr	-1618(ra) # 80010634 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    8000dc8e:	85aa                	mv	a1,a0
    8000dc90:	f4ae                	sd	a1,104(sp)
    8000dc92:	ee2a                	sd	a0,280(sp)
    8000dc94:	a009                	j	8000dc96 <.LBB11_49+0x36>
    8000dc96:	650a                	ld	a0,128(sp)
    8000dc98:	4581                	li	a1,0
            

            let mut have_kids = false;
    8000dc9a:	0ab103a3          	sb	a1,167(sp)
    8000dc9e:	45a1                	li	a1,8
            // Scan through table looking for exited children. 
            // 遍历所有进程是否为其他进程的子进程
            for index in 0..self.tasks.len() {
    8000dca0:	00004097          	auipc	ra,0x4
    8000dca4:	a08080e7          	jalr	-1528(ra) # 800116a8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf08bc165152fefe5E>
    8000dca8:	f0aa                	sd	a0,96(sp)
    8000dcaa:	a009                	j	8000dcac <.LBB11_49+0x4c>
    8000dcac:	7586                	ld	a1,96(sp)
    8000dcae:	4501                	li	a0,0
    8000dcb0:	f52a                	sd	a0,168(sp)
    8000dcb2:	f92e                	sd	a1,176(sp)
    8000dcb4:	00012097          	auipc	ra,0x12
    8000dcb8:	b14080e7          	jalr	-1260(ra) # 8001f7c8 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he0a8d93712e5493bE>
    8000dcbc:	e8aa                	sd	a0,80(sp)
    8000dcbe:	ecae                	sd	a1,88(sp)
    8000dcc0:	a009                	j	8000dcc2 <.LBB11_49+0x62>
    8000dcc2:	6566                	ld	a0,88(sp)
    8000dcc4:	65c6                	ld	a1,80(sp)
    8000dcc6:	fd2e                	sd	a1,184(sp)
    8000dcc8:	e1aa                	sd	a0,192(sp)
    8000dcca:	a009                	j	8000dccc <.LBB11_49+0x6c>
    8000dccc:	1928                	addi	a0,sp,184
    8000dcce:	00012097          	auipc	ra,0x12
    8000dcd2:	a8c080e7          	jalr	-1396(ra) # 8001f75a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE>
    8000dcd6:	e5aa                	sd	a0,200(sp)
    8000dcd8:	e9ae                	sd	a1,208(sp)
    8000dcda:	a009                	j	8000dcdc <.LBB11_49+0x7c>
    8000dcdc:	652e                	ld	a0,200(sp)
    8000dcde:	4581                	li	a1,0
    8000dce0:	00b50463          	beq	a0,a1,8000dce8 <.LBB11_49+0x88>
    8000dce4:	a009                	j	8000dce6 <.LBB11_49+0x86>
    8000dce6:	a809                	j	8000dcf8 <.LBB11_49+0x98>
                    }
                }
            }
            
            // No point waiting if we don't have any children. 
            if !have_kids || curtask.killed {
    8000dce8:	0a714503          	lbu	a0,167(sp)
    8000dcec:	8905                	andi	a0,a0,1
    8000dcee:	4581                	li	a1,0
    8000dcf0:	12b50063          	beq	a0,a1,8000de10 <.LBB11_50+0xce>
    8000dcf4:	a235                	j	8000de20 <.LBB11_50+0xde>
            for index in 0..self.tasks.len() {
    8000dcf6:	0000                	unimp
    8000dcf8:	65ce                	ld	a1,208(sp)
    8000dcfa:	e4ae                	sd	a1,72(sp)
    8000dcfc:	f22e                	sd	a1,288(sp)
    8000dcfe:	f62e                	sd	a1,296(sp)
    8000dd00:	fa2e                	sd	a1,304(sp)
    8000dd02:	451d                	li	a0,7
                let task = &mut self.tasks[index];
    8000dd04:	1ab56863          	bltu	a0,a1,8000deb4 <.LBB11_51+0x56>
    8000dd08:	a009                	j	8000dd0a <.LBB11_49+0xaa>
    8000dd0a:	650a                	ld	a0,128(sp)
    8000dd0c:	65a6                	ld	a1,72(sp)
    8000dd0e:	41000613          	li	a2,1040
    8000dd12:	02c585b3          	mul	a1,a1,a2
    8000dd16:	952e                	add	a0,a0,a1
    8000dd18:	e0aa                	sd	a0,64(sp)
    8000dd1a:	fe2a                	sd	a0,312(sp)
                if let Some(parent) = task.parent {
    8000dd1c:	6d48                	ld	a0,152(a0)
    8000dd1e:	4581                	li	a1,0
    8000dd20:	00b51463          	bne	a0,a1,8000dd28 <.LBB11_49+0xc8>
    8000dd24:	a009                	j	8000dd26 <.LBB11_49+0xc6>
    8000dd26:	a0e5                	j	8000de0e <.LBB11_50+0xcc>
    8000dd28:	75c6                	ld	a1,112(sp)
    8000dd2a:	6506                	ld	a0,64(sp)
    8000dd2c:	7148                	ld	a0,160(a0)
    8000dd2e:	e2aa                	sd	a0,320(sp)
                    if parent as *const _ == curtask as *const _ {
    8000dd30:	02b51363          	bne	a0,a1,8000dd56 <.LBB11_50+0x14>
    8000dd34:	a009                	j	8000dd36 <.LBB11_49+0xd6>
    8000dd36:	6506                	ld	a0,64(sp)
    8000dd38:	4585                	li	a1,1
                        have_kids = true;
    8000dd3a:	0ab103a3          	sb	a1,167(sp)
                        if task.state == ProcState::ZOMBIE {
    8000dd3e:	40850513          	addi	a0,a0,1032

000000008000dd42 <.LBB11_50>:
    8000dd42:	0001a597          	auipc	a1,0x1a
    8000dd46:	5ce58593          	addi	a1,a1,1486 # 80028310 <.L__unnamed_27>
    8000dd4a:	00009097          	auipc	ra,0x9
    8000dd4e:	b74080e7          	jalr	-1164(ra) # 800168be <_ZN76_$LT$kernel..process..process..ProcState$u20$as$u20$core..cmp..PartialEq$GT$2eq17hc7c8c767a75b25feE>
    8000dd52:	fc2a                	sd	a0,56(sp)
    8000dd54:	a011                	j	8000dd58 <.LBB11_50+0x16>
                    if parent as *const _ == curtask as *const _ {
    8000dd56:	a865                	j	8000de0e <.LBB11_50+0xcc>
    8000dd58:	7562                	ld	a0,56(sp)
    8000dd5a:	4581                	li	a1,0
                        if task.state == ProcState::ZOMBIE {
    8000dd5c:	02b50063          	beq	a0,a1,8000dd7c <.LBB11_50+0x3a>
    8000dd60:	a009                	j	8000dd62 <.LBB11_50+0x20>
                            pid = task.pid;
    8000dd62:	7566                	ld	a0,120(sp)
    8000dd64:	6586                	ld	a1,64(sp)
    8000dd66:	3f05b603          	ld	a2,1008(a1)
    8000dd6a:	f432                	sd	a2,40(sp)
    8000dd6c:	e6b2                	sd	a2,328(sp)
                            let page_table = unsafe { &mut *task.pagetable };
    8000dd6e:	6d8c                	ld	a1,24(a1)
    8000dd70:	f82e                	sd	a1,48(sp)
    8000dd72:	eaae                	sd	a1,336(sp)
    8000dd74:	4581                	li	a1,0
                            if addr != 0 && page_table.copy_out(addr, task.xstate as *const u8, size_of_val(&task.xstate)).is_err() {
    8000dd76:	00b50863          	beq	a0,a1,8000dd86 <.LBB11_50+0x44>
    8000dd7a:	a811                	j	8000dd8e <.LBB11_50+0x4c>
                    if parent as *const _ == curtask as *const _ {
    8000dd7c:	a849                	j	8000de0e <.LBB11_50+0xcc>
    8000dd7e:	4505                	li	a0,1
                            if addr != 0 && page_table.copy_out(addr, task.xstate as *const u8, size_of_val(&task.xstate)).is_err() {
    8000dd80:	0ca10fa3          	sb	a0,223(sp)
    8000dd84:	a00d                	j	8000dda6 <.LBB11_50+0x64>
    8000dd86:	4501                	li	a0,0
    8000dd88:	0ca10fa3          	sb	a0,223(sp)
    8000dd8c:	a829                	j	8000dda6 <.LBB11_50+0x64>
    8000dd8e:	6586                	ld	a1,64(sp)
    8000dd90:	3e858513          	addi	a0,a1,1000
    8000dd94:	3e85b583          	ld	a1,1000(a1)
    8000dd98:	ec2e                	sd	a1,24(sp)
    8000dd9a:	0000f097          	auipc	ra,0xf
    8000dd9e:	074080e7          	jalr	116(ra) # 8001ce0e <_ZN4core3mem11size_of_val17hb8db3e1f6e8e8424E>
    8000dda2:	f02a                	sd	a0,32(sp)
    8000dda4:	a031                	j	8000ddb0 <.LBB11_50+0x6e>
    8000dda6:	0df14503          	lbu	a0,223(sp)
    8000ddaa:	8905                	andi	a0,a0,1
    8000ddac:	e51d                	bnez	a0,8000ddda <.LBB11_50+0x98>
    8000ddae:	a825                	j	8000dde6 <.LBB11_50+0xa4>
    8000ddb0:	7682                	ld	a3,32(sp)
    8000ddb2:	6662                	ld	a2,24(sp)
    8000ddb4:	75e6                	ld	a1,120(sp)
    8000ddb6:	7542                	ld	a0,48(sp)
    8000ddb8:	0000a097          	auipc	ra,0xa
    8000ddbc:	c5a080e7          	jalr	-934(ra) # 80017a12 <_ZN6kernel6memory7mapping10page_table9PageTable8copy_out17h55d0f27ee3680817E>
    8000ddc0:	f1aa                	sd	a0,224(sp)
    8000ddc2:	f5ae                	sd	a1,232(sp)
    8000ddc4:	a009                	j	8000ddc6 <.LBB11_50+0x84>
    8000ddc6:	1188                	addi	a0,sp,224
    8000ddc8:	fffff097          	auipc	ra,0xfffff
    8000ddcc:	eee080e7          	jalr	-274(ra) # 8000ccb6 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h304118d236359d80E>
    8000ddd0:	e82a                	sd	a0,16(sp)
    8000ddd2:	a009                	j	8000ddd4 <.LBB11_50+0x92>
    8000ddd4:	6542                	ld	a0,16(sp)
    8000ddd6:	f545                	bnez	a0,8000dd7e <.LBB11_50+0x3c>
    8000ddd8:	b77d                	j	8000dd86 <.LBB11_50+0x44>
                                drop(tasks_guard);
    8000ddda:	7526                	ld	a0,104(sp)
    8000dddc:	0000f097          	auipc	ra,0xf
    8000dde0:	08e080e7          	jalr	142(ra) # 8001ce6a <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    8000dde4:	a039                	j	8000ddf2 <.LBB11_50+0xb0>
                            task.free_proc();
    8000dde6:	6506                	ld	a0,64(sp)
    8000dde8:	00008097          	auipc	ra,0x8
    8000ddec:	0c4080e7          	jalr	196(ra) # 80015eac <_ZN6kernel7process7process11task_struct9free_proc17h164acbc3102fa45eE>
    8000ddf0:	a021                	j	8000ddf8 <.LBB11_50+0xb6>
    8000ddf2:	4501                	li	a0,0
                                return None
    8000ddf4:	e92a                	sd	a0,144(sp)
#![no_std]
    8000ddf6:	a855                	j	8000deaa <.LBB11_51+0x4c>
                            drop(tasks_guard);
    8000ddf8:	7526                	ld	a0,104(sp)
    8000ddfa:	0000f097          	auipc	ra,0xf
    8000ddfe:	070080e7          	jalr	112(ra) # 8001ce6a <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    8000de02:	a009                	j	8000de04 <.LBB11_50+0xc2>
                            return Some(pid)
    8000de04:	7522                	ld	a0,40(sp)
    8000de06:	ed2a                	sd	a0,152(sp)
    8000de08:	4505                	li	a0,1
    8000de0a:	e92a                	sd	a0,144(sp)
    8000de0c:	a879                	j	8000deaa <.LBB11_51+0x4c>
            for index in 0..self.tasks.len() {
    8000de0e:	bd7d                	j	8000dccc <.LBB11_49+0x6c>
    8000de10:	4505                	li	a0,1
            if !have_kids || curtask.killed {
    8000de12:	0ea10ba3          	sb	a0,247(sp)
    8000de16:	a819                	j	8000de2c <.LBB11_50+0xea>
    8000de18:	4501                	li	a0,0
    8000de1a:	0ea10ba3          	sb	a0,247(sp)
    8000de1e:	a039                	j	8000de2c <.LBB11_50+0xea>
    8000de20:	7546                	ld	a0,112(sp)
    8000de22:	40954503          	lbu	a0,1033(a0)
    8000de26:	8905                	andi	a0,a0,1
    8000de28:	f565                	bnez	a0,8000de10 <.LBB11_50+0xce>
    8000de2a:	b7fd                	j	8000de18 <.LBB11_50+0xd6>
    8000de2c:	0f714503          	lbu	a0,247(sp)
    8000de30:	8905                	andi	a0,a0,1
    8000de32:	4581                	li	a1,0
    8000de34:	00b50963          	beq	a0,a1,8000de46 <.LBB11_50+0x104>
    8000de38:	a009                	j	8000de3a <.LBB11_50+0xf8>
                drop(tasks_guard);
    8000de3a:	7526                	ld	a0,104(sp)
    8000de3c:	0000f097          	auipc	ra,0xf
    8000de40:	02e080e7          	jalr	46(ra) # 8001ce6a <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    8000de44:	a039                	j	8000de52 <.LBB11_50+0x110>
                // drop(wait_guard);
                return None
            }


            drop(tasks_guard);
    8000de46:	7526                	ld	a0,104(sp)
    8000de48:	0000f097          	auipc	ra,0xf
    8000de4c:	022080e7          	jalr	34(ra) # 8001ce6a <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    8000de50:	a021                	j	8000de58 <.LBB11_50+0x116>
    8000de52:	4501                	li	a0,0
                return None
    8000de54:	e92a                	sd	a0,144(sp)
    8000de56:	a891                	j	8000deaa <.LBB11_51+0x4c>
    8000de58:	6509                	lui	a0,0x2
    8000de5a:	0a85059b          	addiw	a1,a0,168

000000008000de5e <.LBB11_51>:
    8000de5e:	00049517          	auipc	a0,0x49
    8000de62:	74250513          	addi	a0,a0,1858 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    8000de66:	952e                	add	a0,a0,a1
            // Wait for a child to exit.
            let mut wait_guard = unsafe { PROC_MANAGER.wait_lock.acquire() };
    8000de68:	00002097          	auipc	ra,0x2
    8000de6c:	7cc080e7          	jalr	1996(ra) # 80010634 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    8000de70:	fdaa                	sd	a0,248(sp)
    8000de72:	a009                	j	8000de74 <.LBB11_51+0x16>
            curtask.sleep(
                curtask as *const _ as usize, 
                wait_guard
    8000de74:	75c6                	ld	a1,112(sp)
    8000de76:	766e                	ld	a2,248(sp)
            curtask.sleep(
    8000de78:	852e                	mv	a0,a1
    8000de7a:	00004097          	auipc	ra,0x4
    8000de7e:	88c080e7          	jalr	-1908(ra) # 80011706 <_ZN6kernel7process7process11task_struct5sleep17h3865ab03b1bff75fE>
    8000de82:	a009                	j	8000de84 <.LBB11_51+0x26>
    8000de84:	650a                	ld	a0,128(sp)
    8000de86:	6589                	lui	a1,0x2
    8000de88:	0a85859b          	addiw	a1,a1,168
            );
            wait_guard = self.wait_lock.acquire();
    8000de8c:	952e                	add	a0,a0,a1
    8000de8e:	00002097          	auipc	ra,0x2
    8000de92:	7a6080e7          	jalr	1958(ra) # 80010634 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    8000de96:	e42a                	sd	a0,8(sp)
    8000de98:	a009                	j	8000de9a <.LBB11_51+0x3c>
    8000de9a:	6522                	ld	a0,8(sp)
    8000de9c:	fdaa                	sd	a0,248(sp)
    8000de9e:	19a8                	addi	a0,sp,248
        }
    8000dea0:	ffff9097          	auipc	ra,0xffff9
    8000dea4:	12a080e7          	jalr	298(ra) # 80006fca <_ZN4core3ptr74drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$$LP$$RP$$GT$$GT$17he568be727488c8bbE>
    8000dea8:	bbd1                	j	8000dc7c <.LBB11_49+0x1c>
    }
    8000deaa:	654a                	ld	a0,144(sp)
    8000deac:	65ea                	ld	a1,152(sp)
    8000deae:	60f6                	ld	ra,344(sp)
    8000deb0:	6135                	addi	sp,sp,352
    8000deb2:	8082                	ret
                let task = &mut self.tasks[index];
    8000deb4:	6526                	ld	a0,72(sp)

000000008000deb6 <.LBB11_52>:
    8000deb6:	0001a617          	auipc	a2,0x1a
    8000deba:	44260613          	addi	a2,a2,1090 # 800282f8 <.L__unnamed_28>
    8000debe:	45a1                	li	a1,8
    8000dec0:	00014097          	auipc	ra,0x14
    8000dec4:	268080e7          	jalr	616(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel7process7manager11ProcManager4join17h0acabc4ce5dd65bdE:

000000008000deca <_ZN6kernel7process7manager11ProcManager4join17h0acabc4ce5dd65bdE>:

    pub fn join(&mut self, stack: usize) -> Option<usize> {
    8000deca:	7109                	addi	sp,sp,-384
    8000decc:	fe86                	sd	ra,376(sp)
    8000dece:	f8ae                	sd	a1,112(sp)
    8000ded0:	fcaa                	sd	a0,120(sp)
    8000ded2:	f22a                	sd	a0,288(sp)
    8000ded4:	f62e                	sd	a1,296(sp)

000000008000ded6 <.LBB12_45>:
        let pid;
        let my_proc = unsafe {
            CPU_MANAGER.myproc().expect("Fail to get my process")
    8000ded6:	00056517          	auipc	a0,0x56
    8000deda:	26a50513          	addi	a0,a0,618 # 80064140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    8000dede:	00004097          	auipc	ra,0x4
    8000dee2:	b4c080e7          	jalr	-1204(ra) # 80011a2a <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    8000dee6:	e12a                	sd	a0,128(sp)
    8000dee8:	a009                	j	8000deea <.LBB12_45+0x14>
    8000deea:	650a                	ld	a0,128(sp)

000000008000deec <.LBB12_46>:
    8000deec:	0001a597          	auipc	a1,0x1a
    8000def0:	3dc58593          	addi	a1,a1,988 # 800282c8 <.L__unnamed_25>

000000008000def4 <.LBB12_47>:
    8000def4:	0001a697          	auipc	a3,0x1a
    8000def8:	42468693          	addi	a3,a3,1060 # 80028318 <.L__unnamed_29>
    8000defc:	4659                	li	a2,22
    8000defe:	00001097          	auipc	ra,0x1
    8000df02:	b9e080e7          	jalr	-1122(ra) # 8000ea9c <_ZN4core6option15Option$LT$T$GT$6expect17h5cc0070b74d715b8E>
    8000df06:	f4aa                	sd	a0,104(sp)
    8000df08:	a009                	j	8000df0a <.LBB12_47+0x16>
    8000df0a:	7526                	ld	a0,104(sp)
    8000df0c:	fa2a                	sd	a0,304(sp)
        };
        
        loop {
    8000df0e:	a009                	j	8000df10 <.LBB12_47+0x1c>
    8000df10:	7566                	ld	a0,120(sp)
    8000df12:	6589                	lui	a1,0x2
    8000df14:	0885859b          	addiw	a1,a1,136
            let mut guard = self.tasks_lock.acquire();
    8000df18:	952e                	add	a0,a0,a1
    8000df1a:	00002097          	auipc	ra,0x2
    8000df1e:	71a080e7          	jalr	1818(ra) # 80010634 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    8000df22:	85aa                	mv	a1,a0
    8000df24:	f0ae                	sd	a1,96(sp)
    8000df26:	fe2a                	sd	a0,312(sp)
    8000df28:	a009                	j	8000df2a <.LBB12_47+0x36>
    8000df2a:	7566                	ld	a0,120(sp)
    8000df2c:	4581                	li	a1,0
            let mut have_kids = false;
    8000df2e:	08b10fa3          	sb	a1,159(sp)
    8000df32:	45a1                	li	a1,8
            // Scan through table looking for exited children. 
            // 遍历所有进程是否为其他进程的子进程
            for index in 0..self.tasks.len() {
    8000df34:	00003097          	auipc	ra,0x3
    8000df38:	774080e7          	jalr	1908(ra) # 800116a8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf08bc165152fefe5E>
    8000df3c:	ecaa                	sd	a0,88(sp)
    8000df3e:	a009                	j	8000df40 <.LBB12_47+0x4c>
    8000df40:	65e6                	ld	a1,88(sp)
    8000df42:	4501                	li	a0,0
    8000df44:	f12a                	sd	a0,160(sp)
    8000df46:	f52e                	sd	a1,168(sp)
    8000df48:	00012097          	auipc	ra,0x12
    8000df4c:	880080e7          	jalr	-1920(ra) # 8001f7c8 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he0a8d93712e5493bE>
    8000df50:	e4aa                	sd	a0,72(sp)
    8000df52:	e8ae                	sd	a1,80(sp)
    8000df54:	a009                	j	8000df56 <.LBB12_47+0x62>
    8000df56:	6546                	ld	a0,80(sp)
    8000df58:	65a6                	ld	a1,72(sp)
    8000df5a:	f92e                	sd	a1,176(sp)
    8000df5c:	fd2a                	sd	a0,184(sp)
    8000df5e:	a009                	j	8000df60 <.LBB12_47+0x6c>
    8000df60:	1908                	addi	a0,sp,176
    8000df62:	00011097          	auipc	ra,0x11
    8000df66:	7f8080e7          	jalr	2040(ra) # 8001f75a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE>
    8000df6a:	e1aa                	sd	a0,192(sp)
    8000df6c:	e5ae                	sd	a1,200(sp)
    8000df6e:	a009                	j	8000df70 <.LBB12_47+0x7c>
    8000df70:	650e                	ld	a0,192(sp)
    8000df72:	4581                	li	a1,0
    8000df74:	00b50463          	beq	a0,a1,8000df7c <.LBB12_47+0x88>
    8000df78:	a009                	j	8000df7a <.LBB12_47+0x86>
    8000df7a:	a809                	j	8000df8c <.LBB12_47+0x98>
                        }
                    }
                }
            }
            // No point waiting if we don't have any children. 
            if !have_kids || my_proc.killed {
    8000df7c:	09f14503          	lbu	a0,159(sp)
    8000df80:	8905                	andi	a0,a0,1
    8000df82:	4581                	li	a1,0
    8000df84:	10b50d63          	beq	a0,a1,8000e09e <.LBB12_50+0x4e>
    8000df88:	a21d                	j	8000e0ae <.LBB12_50+0x5e>
            for index in 0..self.tasks.len() {
    8000df8a:	0000                	unimp
    8000df8c:	65ae                	ld	a1,200(sp)
    8000df8e:	e0ae                	sd	a1,64(sp)
    8000df90:	e2ae                	sd	a1,320(sp)
    8000df92:	e6ae                	sd	a1,328(sp)
    8000df94:	eaae                	sd	a1,336(sp)
    8000df96:	451d                	li	a0,7
                let p = &mut self.tasks[index];
    8000df98:	1ab56263          	bltu	a0,a1,8000e13c <.LBB12_50+0xec>
    8000df9c:	a009                	j	8000df9e <.LBB12_47+0xaa>
    8000df9e:	7566                	ld	a0,120(sp)
    8000dfa0:	6586                	ld	a1,64(sp)
    8000dfa2:	41000613          	li	a2,1040
    8000dfa6:	02c585b3          	mul	a1,a1,a2
    8000dfaa:	952e                	add	a0,a0,a1
    8000dfac:	fc2a                	sd	a0,56(sp)
    8000dfae:	eeaa                	sd	a0,344(sp)
                if let Some(parent) = p.parent {
    8000dfb0:	6d48                	ld	a0,152(a0)
    8000dfb2:	4581                	li	a1,0
    8000dfb4:	00b51463          	bne	a0,a1,8000dfbc <.LBB12_47+0xc8>
    8000dfb8:	a009                	j	8000dfba <.LBB12_47+0xc6>
    8000dfba:	a0cd                	j	8000e09c <.LBB12_50+0x4c>
    8000dfbc:	75a6                	ld	a1,104(sp)
    8000dfbe:	7562                	ld	a0,56(sp)
    8000dfc0:	7148                	ld	a0,160(a0)
    8000dfc2:	f2aa                	sd	a0,352(sp)
                    if parent as *const _ == my_proc as *const _ {
    8000dfc4:	02b51363          	bne	a0,a1,8000dfea <.LBB12_48+0x14>
    8000dfc8:	a009                	j	8000dfca <.LBB12_47+0xd6>
    8000dfca:	7562                	ld	a0,56(sp)
    8000dfcc:	4585                	li	a1,1
                        have_kids = true;
    8000dfce:	08b10fa3          	sb	a1,159(sp)
                        if p.state == ProcState::ZOMBIE {
    8000dfd2:	40850513          	addi	a0,a0,1032

000000008000dfd6 <.LBB12_48>:
    8000dfd6:	0001a597          	auipc	a1,0x1a
    8000dfda:	33a58593          	addi	a1,a1,826 # 80028310 <.L__unnamed_27>
    8000dfde:	00009097          	auipc	ra,0x9
    8000dfe2:	8e0080e7          	jalr	-1824(ra) # 800168be <_ZN76_$LT$kernel..process..process..ProcState$u20$as$u20$core..cmp..PartialEq$GT$2eq17hc7c8c767a75b25feE>
    8000dfe6:	f82a                	sd	a0,48(sp)
    8000dfe8:	a011                	j	8000dfec <.LBB12_48+0x16>
                    if parent as *const _ == my_proc as *const _ {
    8000dfea:	a84d                	j	8000e09c <.LBB12_50+0x4c>
    8000dfec:	7542                	ld	a0,48(sp)
    8000dfee:	4581                	li	a1,0
                        if p.state == ProcState::ZOMBIE {
    8000dff0:	00b50e63          	beq	a0,a1,8000e00c <.LBB12_48+0x36>
    8000dff4:	a009                	j	8000dff6 <.LBB12_48+0x20>
                            pid = p.pid;
    8000dff6:	7562                	ld	a0,56(sp)
    8000dff8:	3f053583          	ld	a1,1008(a0)
    8000dffc:	ec2e                	sd	a1,24(sp)
    8000dffe:	f6ae                	sd	a1,360(sp)
                            let page_table = unsafe { &mut *p.pagetable };
    8000e000:	6d0c                	ld	a1,24(a0)
    8000e002:	f02e                	sd	a1,32(sp)
    8000e004:	faae                	sd	a1,368(sp)
                            if page_table.copy_out(stack, p.thread_ustack as *const u8, size_of::<usize>()).is_err() {
    8000e006:	6508                	ld	a0,8(a0)
    8000e008:	f42a                	sd	a0,40(sp)
    8000e00a:	a011                	j	8000e00e <.LBB12_48+0x38>
                    if parent as *const _ == my_proc as *const _ {
    8000e00c:	a841                	j	8000e09c <.LBB12_50+0x4c>
                            if page_table.copy_out(stack, p.thread_ustack as *const u8, size_of::<usize>()).is_err() {
    8000e00e:	7622                	ld	a2,40(sp)
    8000e010:	75c6                	ld	a1,112(sp)
    8000e012:	7502                	ld	a0,32(sp)
    8000e014:	46a1                	li	a3,8
    8000e016:	0000a097          	auipc	ra,0xa
    8000e01a:	9fc080e7          	jalr	-1540(ra) # 80017a12 <_ZN6kernel6memory7mapping10page_table9PageTable8copy_out17h55d0f27ee3680817E>
    8000e01e:	e9aa                	sd	a0,208(sp)
    8000e020:	edae                	sd	a1,216(sp)
    8000e022:	a009                	j	8000e024 <.LBB12_48+0x4e>
    8000e024:	0988                	addi	a0,sp,208
    8000e026:	fffff097          	auipc	ra,0xfffff
    8000e02a:	c90080e7          	jalr	-880(ra) # 8000ccb6 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h304118d236359d80E>
    8000e02e:	e82a                	sd	a0,16(sp)
    8000e030:	a009                	j	8000e032 <.LBB12_48+0x5c>
    8000e032:	6542                	ld	a0,16(sp)
    8000e034:	4581                	li	a1,0
    8000e036:	00b50963          	beq	a0,a1,8000e048 <.LBB12_49>
    8000e03a:	a009                	j	8000e03c <.LBB12_48+0x66>
                                drop(guard);
    8000e03c:	7506                	ld	a0,96(sp)
    8000e03e:	0000f097          	auipc	ra,0xf
    8000e042:	e2c080e7          	jalr	-468(ra) # 8001ce6a <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    8000e046:	a00d                	j	8000e068 <.LBB12_50+0x18>

000000008000e048 <.LBB12_49>:
                            println!("(FIND");
    8000e048:	0001a597          	auipc	a1,0x1a
    8000e04c:	30858593          	addi	a1,a1,776 # 80028350 <.L__unnamed_30>

000000008000e050 <.LBB12_50>:
    8000e050:	0001a697          	auipc	a3,0x1a
    8000e054:	0c068693          	addi	a3,a3,192 # 80028110 <.L__unnamed_41>
    8000e058:	1188                	addi	a0,sp,224
    8000e05a:	4605                	li	a2,1
    8000e05c:	4701                	li	a4,0
    8000e05e:	ffff7097          	auipc	ra,0xffff7
    8000e062:	3d6080e7          	jalr	982(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8000e066:	a021                	j	8000e06e <.LBB12_50+0x1e>
    8000e068:	4501                	li	a0,0
                                return None
    8000e06a:	e52a                	sd	a0,136(sp)
    8000e06c:	a0d9                	j	8000e132 <.LBB12_50+0xe2>
    8000e06e:	1188                	addi	a0,sp,224
                            println!("(FIND");
    8000e070:	00010097          	auipc	ra,0x10
    8000e074:	b40080e7          	jalr	-1216(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8000e078:	a009                	j	8000e07a <.LBB12_50+0x2a>
                            p.free_thread();
    8000e07a:	7562                	ld	a0,56(sp)
    8000e07c:	00008097          	auipc	ra,0x8
    8000e080:	ea0080e7          	jalr	-352(ra) # 80015f1c <_ZN6kernel7process7process11task_struct11free_thread17ha65c5f78ade6bf2bE>
    8000e084:	a009                	j	8000e086 <.LBB12_50+0x36>
                            drop(guard);
    8000e086:	7506                	ld	a0,96(sp)
    8000e088:	0000f097          	auipc	ra,0xf
    8000e08c:	de2080e7          	jalr	-542(ra) # 8001ce6a <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    8000e090:	a009                	j	8000e092 <.LBB12_50+0x42>
                            return Some(pid);
    8000e092:	6562                	ld	a0,24(sp)
    8000e094:	e92a                	sd	a0,144(sp)
    8000e096:	4505                	li	a0,1
    8000e098:	e52a                	sd	a0,136(sp)
    8000e09a:	a861                	j	8000e132 <.LBB12_50+0xe2>
            for index in 0..self.tasks.len() {
    8000e09c:	b5d1                	j	8000df60 <.LBB12_47+0x6c>
    8000e09e:	4505                	li	a0,1
            if !have_kids || my_proc.killed {
    8000e0a0:	10a10ba3          	sb	a0,279(sp)
    8000e0a4:	a819                	j	8000e0ba <.LBB12_50+0x6a>
    8000e0a6:	4501                	li	a0,0
    8000e0a8:	10a10ba3          	sb	a0,279(sp)
    8000e0ac:	a039                	j	8000e0ba <.LBB12_50+0x6a>
    8000e0ae:	7526                	ld	a0,104(sp)
    8000e0b0:	40954503          	lbu	a0,1033(a0)
    8000e0b4:	8905                	andi	a0,a0,1
    8000e0b6:	f565                	bnez	a0,8000e09e <.LBB12_50+0x4e>
    8000e0b8:	b7fd                	j	8000e0a6 <.LBB12_50+0x56>
    8000e0ba:	11714503          	lbu	a0,279(sp)
    8000e0be:	8905                	andi	a0,a0,1
    8000e0c0:	4581                	li	a1,0
    8000e0c2:	00b50963          	beq	a0,a1,8000e0d4 <.LBB12_50+0x84>
    8000e0c6:	a009                	j	8000e0c8 <.LBB12_50+0x78>
                drop(guard);
    8000e0c8:	7506                	ld	a0,96(sp)
    8000e0ca:	0000f097          	auipc	ra,0xf
    8000e0ce:	da0080e7          	jalr	-608(ra) # 8001ce6a <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    8000e0d2:	a039                	j	8000e0e0 <.LBB12_50+0x90>
                return None
            }
            // 释放锁，否则会死锁
            drop(guard);
    8000e0d4:	7506                	ld	a0,96(sp)
    8000e0d6:	0000f097          	auipc	ra,0xf
    8000e0da:	d94080e7          	jalr	-620(ra) # 8001ce6a <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    8000e0de:	a021                	j	8000e0e6 <.LBB12_50+0x96>
    8000e0e0:	4501                	li	a0,0
                return None
    8000e0e2:	e52a                	sd	a0,136(sp)
    8000e0e4:	a0b9                	j	8000e132 <.LBB12_50+0xe2>
    8000e0e6:	7566                	ld	a0,120(sp)
    8000e0e8:	6589                	lui	a1,0x2
    8000e0ea:	0a85859b          	addiw	a1,a1,168
            let mut wait_guard = self.wait_lock.acquire();
    8000e0ee:	952e                	add	a0,a0,a1
    8000e0f0:	00002097          	auipc	ra,0x2
    8000e0f4:	544080e7          	jalr	1348(ra) # 80010634 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    8000e0f8:	ee2a                	sd	a0,280(sp)
    8000e0fa:	a009                	j	8000e0fc <.LBB12_50+0xac>
            // Wait for a child to exit.
            my_proc.sleep(
                my_proc as *const _ as usize, 
                wait_guard
    8000e0fc:	75a6                	ld	a1,104(sp)
    8000e0fe:	6672                	ld	a2,280(sp)
            my_proc.sleep(
    8000e100:	852e                	mv	a0,a1
    8000e102:	00003097          	auipc	ra,0x3
    8000e106:	604080e7          	jalr	1540(ra) # 80011706 <_ZN6kernel7process7process11task_struct5sleep17h3865ab03b1bff75fE>
    8000e10a:	a009                	j	8000e10c <.LBB12_50+0xbc>
    8000e10c:	7566                	ld	a0,120(sp)
    8000e10e:	6589                	lui	a1,0x2
    8000e110:	0a85859b          	addiw	a1,a1,168
            );
            wait_guard = self.wait_lock.acquire();
    8000e114:	952e                	add	a0,a0,a1
    8000e116:	00002097          	auipc	ra,0x2
    8000e11a:	51e080e7          	jalr	1310(ra) # 80010634 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    8000e11e:	e42a                	sd	a0,8(sp)
    8000e120:	a009                	j	8000e122 <.LBB12_50+0xd2>
    8000e122:	6522                	ld	a0,8(sp)
    8000e124:	ee2a                	sd	a0,280(sp)
    8000e126:	0a28                	addi	a0,sp,280
        }
    8000e128:	ffff9097          	auipc	ra,0xffff9
    8000e12c:	ea2080e7          	jalr	-350(ra) # 80006fca <_ZN4core3ptr74drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$$LP$$RP$$GT$$GT$17he568be727488c8bbE>
    8000e130:	b3c5                	j	8000df10 <.LBB12_47+0x1c>
    }
    8000e132:	652a                	ld	a0,136(sp)
    8000e134:	65ca                	ld	a1,144(sp)
    8000e136:	70f6                	ld	ra,376(sp)
    8000e138:	6119                	addi	sp,sp,384
    8000e13a:	8082                	ret
                let p = &mut self.tasks[index];
    8000e13c:	6506                	ld	a0,64(sp)

000000008000e13e <.LBB12_51>:
    8000e13e:	0001a617          	auipc	a2,0x1a
    8000e142:	1f260613          	addi	a2,a2,498 # 80028330 <.L__unnamed_31>
    8000e146:	45a1                	li	a1,8
    8000e148:	00014097          	auipc	ra,0x14
    8000e14c:	fe0080e7          	jalr	-32(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel7process7manager11ProcManager9proc_dump17h983bd5c89559ec59E:

000000008000e152 <_ZN6kernel7process7manager11ProcManager9proc_dump17h983bd5c89559ec59E>:
    }

    /// Print a process listing to console. For debugging. 
    /// Runs when user type ^P on console. 
    /// No lock to avoid wedging a stuck machine further
    pub fn proc_dump(&self) {
    8000e152:	7149                	addi	sp,sp,-368
    8000e154:	f686                	sd	ra,360(sp)
    8000e156:	fa2a                	sd	a0,304(sp)
    8000e158:	45a1                	li	a1,8
        for proc in self.tasks.iter() {
    8000e15a:	00003097          	auipc	ra,0x3
    8000e15e:	562080e7          	jalr	1378(ra) # 800116bc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17hf352d95d7dd299d1E>
    8000e162:	f4aa                	sd	a0,104(sp)
    8000e164:	f8ae                	sd	a1,112(sp)
    8000e166:	a009                	j	8000e168 <_ZN6kernel7process7manager11ProcManager9proc_dump17h983bd5c89559ec59E+0x16>
    8000e168:	75c6                	ld	a1,112(sp)
    8000e16a:	7526                	ld	a0,104(sp)
    8000e16c:	ffffd097          	auipc	ra,0xffffd
    8000e170:	e5c080e7          	jalr	-420(ra) # 8000afc8 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h4af9d22df112c9d1E>
    8000e174:	ecaa                	sd	a0,88(sp)
    8000e176:	f0ae                	sd	a1,96(sp)
    8000e178:	a009                	j	8000e17a <_ZN6kernel7process7manager11ProcManager9proc_dump17h983bd5c89559ec59E+0x28>
    8000e17a:	7506                	ld	a0,96(sp)
    8000e17c:	65e6                	ld	a1,88(sp)
    8000e17e:	fcae                	sd	a1,120(sp)
    8000e180:	e12a                	sd	a0,128(sp)
    8000e182:	a009                	j	8000e184 <_ZN6kernel7process7manager11ProcManager9proc_dump17h983bd5c89559ec59E+0x32>
    8000e184:	18a8                	addi	a0,sp,120
    8000e186:	ffffd097          	auipc	ra,0xffffd
    8000e18a:	e60080e7          	jalr	-416(ra) # 8000afe6 <_ZN91_$LT$core..slice..iter..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha83d9fbdc7b514feE>
    8000e18e:	e52a                	sd	a0,136(sp)
    8000e190:	a009                	j	8000e192 <_ZN6kernel7process7manager11ProcManager9proc_dump17h983bd5c89559ec59E+0x40>
    8000e192:	652a                	ld	a0,136(sp)
    8000e194:	00a035b3          	snez	a1,a0
    8000e198:	4581                	li	a1,0
    8000e19a:	00b50463          	beq	a0,a1,8000e1a2 <_ZN6kernel7process7manager11ProcManager9proc_dump17h983bd5c89559ec59E+0x50>
    8000e19e:	a009                	j	8000e1a0 <_ZN6kernel7process7manager11ProcManager9proc_dump17h983bd5c89559ec59E+0x4e>
    8000e1a0:	a029                	j	8000e1aa <_ZN6kernel7process7manager11ProcManager9proc_dump17h983bd5c89559ec59E+0x58>
            if proc.state() == ProcState::UNUSED { continue; }
            else {
                println!("pid: {} state: {:?} name: {}", proc.pid(), proc.state(), proc.name());
            }
        }
    }
    8000e1a2:	70b6                	ld	ra,360(sp)
    8000e1a4:	6175                	addi	sp,sp,368
    8000e1a6:	8082                	ret
        for proc in self.tasks.iter() {
    8000e1a8:	0000                	unimp
    8000e1aa:	652a                	ld	a0,136(sp)
    8000e1ac:	e8aa                	sd	a0,80(sp)
    8000e1ae:	fe2a                	sd	a0,312(sp)
    8000e1b0:	e2aa                	sd	a0,320(sp)
    8000e1b2:	e6aa                	sd	a0,328(sp)
            if proc.state() == ProcState::UNUSED { continue; }
    8000e1b4:	00008097          	auipc	ra,0x8
    8000e1b8:	b7a080e7          	jalr	-1158(ra) # 80015d2e <_ZN6kernel7process7process11task_struct5state17h188201629a7bcaa5E>
    8000e1bc:	0ff57513          	andi	a0,a0,255
    8000e1c0:	08a10ba3          	sb	a0,151(sp)
    8000e1c4:	a009                	j	8000e1c6 <.LBB13_20>

000000008000e1c6 <.LBB13_20>:
    8000e1c6:	0001a597          	auipc	a1,0x1a
    8000e1ca:	19a58593          	addi	a1,a1,410 # 80028360 <.L__unnamed_32>
    8000e1ce:	09710513          	addi	a0,sp,151
    8000e1d2:	00008097          	auipc	ra,0x8
    8000e1d6:	6ec080e7          	jalr	1772(ra) # 800168be <_ZN76_$LT$kernel..process..process..ProcState$u20$as$u20$core..cmp..PartialEq$GT$2eq17hc7c8c767a75b25feE>
    8000e1da:	e4aa                	sd	a0,72(sp)
    8000e1dc:	a009                	j	8000e1de <.LBB13_20+0x18>
    8000e1de:	6526                	ld	a0,72(sp)
    8000e1e0:	f155                	bnez	a0,8000e184 <_ZN6kernel7process7manager11ProcManager9proc_dump17h983bd5c89559ec59E+0x32>
    8000e1e2:	a009                	j	8000e1e4 <.LBB13_20+0x1e>
                println!("pid: {} state: {:?} name: {}", proc.pid(), proc.state(), proc.name());
    8000e1e4:	6546                	ld	a0,80(sp)
    8000e1e6:	00008097          	auipc	ra,0x8
    8000e1ea:	b2c080e7          	jalr	-1236(ra) # 80015d12 <_ZN6kernel7process7process11task_struct3pid17hf16723aa87a30b20E>
    8000e1ee:	ea2a                	sd	a0,272(sp)
    8000e1f0:	a009                	j	8000e1f2 <.LBB13_20+0x2c>
    8000e1f2:	6546                	ld	a0,80(sp)
    8000e1f4:	00008097          	auipc	ra,0x8
    8000e1f8:	b3a080e7          	jalr	-1222(ra) # 80015d2e <_ZN6kernel7process7process11task_struct5state17h188201629a7bcaa5E>
    8000e1fc:	0ff57513          	andi	a0,a0,255
    8000e200:	10a10fa3          	sb	a0,287(sp)
    8000e204:	a009                	j	8000e206 <.LBB13_20+0x40>
    8000e206:	6546                	ld	a0,80(sp)
    8000e208:	00008097          	auipc	ra,0x8
    8000e20c:	b32080e7          	jalr	-1230(ra) # 80015d3a <_ZN6kernel7process7process11task_struct4name17he8a035723af8acadE>
    8000e210:	f22a                	sd	a0,288(sp)
    8000e212:	f62e                	sd	a1,296(sp)
    8000e214:	a009                	j	8000e216 <.LBB13_20+0x50>
    8000e216:	0a08                	addi	a0,sp,272
    8000e218:	fdaa                	sd	a0,248(sp)
    8000e21a:	11f10613          	addi	a2,sp,287
    8000e21e:	f432                	sd	a2,40(sp)
    8000e220:	e232                	sd	a2,256(sp)
    8000e222:	120c                	addi	a1,sp,288
    8000e224:	f82e                	sd	a1,48(sp)
    8000e226:	e62e                	sd	a1,264(sp)
    8000e228:	eaaa                	sd	a0,336(sp)
    8000e22a:	eeb2                	sd	a2,344(sp)
    8000e22c:	f2ae                	sd	a1,352(sp)

000000008000e22e <.LBB13_21>:
    8000e22e:	00016597          	auipc	a1,0x16
    8000e232:	62a58593          	addi	a1,a1,1578 # 80024858 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h9c6c4af1578f7c29E>
    8000e236:	00011097          	auipc	ra,0x11
    8000e23a:	2f0080e7          	jalr	752(ra) # 8001f526 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    8000e23e:	fc2a                	sd	a0,56(sp)
    8000e240:	e0ae                	sd	a1,64(sp)
    8000e242:	a009                	j	8000e244 <.LBB13_21+0x16>
    8000e244:	7522                	ld	a0,40(sp)

000000008000e246 <.LBB13_22>:
    8000e246:	00008597          	auipc	a1,0x8
    8000e24a:	52258593          	addi	a1,a1,1314 # 80016768 <_ZN72_$LT$kernel..process..process..ProcState$u20$as$u20$core..fmt..Debug$GT$3fmt17hf525681892d4cccaE>
    8000e24e:	00010097          	auipc	ra,0x10
    8000e252:	276080e7          	jalr	630(ra) # 8001e4c4 <_ZN4core3fmt10ArgumentV13new17h8dd13dffa5e435d0E>
    8000e256:	ec2a                	sd	a0,24(sp)
    8000e258:	f02e                	sd	a1,32(sp)
    8000e25a:	a009                	j	8000e25c <.LBB13_22+0x16>
    8000e25c:	7542                	ld	a0,48(sp)

000000008000e25e <.LBB13_23>:
    8000e25e:	00010597          	auipc	a1,0x10
    8000e262:	1ba58593          	addi	a1,a1,442 # 8001e418 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E>
    8000e266:	00010097          	auipc	ra,0x10
    8000e26a:	1d6080e7          	jalr	470(ra) # 8001e43c <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>
    8000e26e:	e42a                	sd	a0,8(sp)
    8000e270:	e82e                	sd	a1,16(sp)
    8000e272:	a009                	j	8000e274 <.LBB13_23+0x16>
    8000e274:	6542                	ld	a0,16(sp)
    8000e276:	65a2                	ld	a1,8(sp)
    8000e278:	7602                	ld	a2,32(sp)
    8000e27a:	66e2                	ld	a3,24(sp)
    8000e27c:	6706                	ld	a4,64(sp)
    8000e27e:	77e2                	ld	a5,56(sp)
    8000e280:	e5be                	sd	a5,200(sp)
    8000e282:	e9ba                	sd	a4,208(sp)
    8000e284:	edb6                	sd	a3,216(sp)
    8000e286:	f1b2                	sd	a2,224(sp)
    8000e288:	f5ae                	sd	a1,232(sp)
    8000e28a:	f9aa                	sd	a0,240(sp)

000000008000e28c <.LBB13_24>:
    8000e28c:	0001a597          	auipc	a1,0x1a
    8000e290:	0e458593          	addi	a1,a1,228 # 80028370 <.L__unnamed_33>
    8000e294:	0928                	addi	a0,sp,152
    8000e296:	4611                	li	a2,4
    8000e298:	01b4                	addi	a3,sp,200
    8000e29a:	470d                	li	a4,3
    8000e29c:	ffff7097          	auipc	ra,0xffff7
    8000e2a0:	198080e7          	jalr	408(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8000e2a4:	a009                	j	8000e2a6 <.LBB13_24+0x1a>
    8000e2a6:	0928                	addi	a0,sp,152
    8000e2a8:	00010097          	auipc	ra,0x10
    8000e2ac:	908080e7          	jalr	-1784(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8000e2b0:	a009                	j	8000e2b2 <.LBB13_24+0x26>
        for proc in self.tasks.iter() {
    8000e2b2:	bdc9                	j	8000e184 <_ZN6kernel7process7manager11ProcManager9proc_dump17h983bd5c89559ec59E+0x32>

Disassembly of section .text._ZN6kernel7process7manager12kernel_stack17h27945807ba9b8a49E:

000000008000e2b4 <_ZN6kernel7process7manager12kernel_stack17h27945807ba9b8a49E>:
}

#[inline]
fn kernel_stack(pos: usize) -> usize {
    8000e2b4:	7179                	addi	sp,sp,-48
    8000e2b6:	85aa                	mv	a1,a0
    8000e2b8:	f42e                	sd	a1,40(sp)
    TRAMPOLINE - (pos + 1) * 5 * PGSIZE
    8000e2ba:	00158513          	addi	a0,a1,1
    8000e2be:	f02a                	sd	a0,32(sp)
    8000e2c0:	04b56863          	bltu	a0,a1,8000e310 <.LBB14_9>
    8000e2c4:	a009                	j	8000e2c6 <_ZN6kernel7process7manager12kernel_stack17h27945807ba9b8a49E+0x12>
    8000e2c6:	7502                	ld	a0,32(sp)
    8000e2c8:	00251593          	slli	a1,a0,0x2
    8000e2cc:	95aa                	add	a1,a1,a0
    8000e2ce:	ec2e                	sd	a1,24(sp)
    8000e2d0:	4595                	li	a1,5
    8000e2d2:	02b53533          	mulhu	a0,a0,a1
    8000e2d6:	4581                	li	a1,0
    8000e2d8:	04b51a63          	bne	a0,a1,8000e32c <.LBB14_11>
    8000e2dc:	a009                	j	8000e2de <_ZN6kernel7process7manager12kernel_stack17h27945807ba9b8a49E+0x2a>
    8000e2de:	65e2                	ld	a1,24(sp)
    8000e2e0:	4505                	li	a0,1
    8000e2e2:	1552                	slli	a0,a0,0x34
    8000e2e4:	157d                	addi	a0,a0,-1
    8000e2e6:	8d6d                	and	a0,a0,a1
    8000e2e8:	00c59613          	slli	a2,a1,0xc
    8000e2ec:	e832                	sd	a2,16(sp)
    8000e2ee:	04b51e63          	bne	a0,a1,8000e34a <.LBB14_13>
    8000e2f2:	a009                	j	8000e2f4 <_ZN6kernel7process7manager12kernel_stack17h27945807ba9b8a49E+0x40>
    8000e2f4:	65c2                	ld	a1,16(sp)
    8000e2f6:	04000537          	lui	a0,0x4000
    8000e2fa:	357d                	addiw	a0,a0,-1
    8000e2fc:	0532                	slli	a0,a0,0xc
    8000e2fe:	40b505b3          	sub	a1,a0,a1
    8000e302:	e42e                	sd	a1,8(sp)
    8000e304:	06b56263          	bltu	a0,a1,8000e368 <.LBB14_15>
    8000e308:	a009                	j	8000e30a <_ZN6kernel7process7manager12kernel_stack17h27945807ba9b8a49E+0x56>
    8000e30a:	6522                	ld	a0,8(sp)
    8000e30c:	6145                	addi	sp,sp,48
    8000e30e:	8082                	ret

000000008000e310 <.LBB14_9>:
    TRAMPOLINE - (pos + 1) * 5 * PGSIZE
    8000e310:	0001a517          	auipc	a0,0x1a
    8000e314:	dc050513          	addi	a0,a0,-576 # 800280d0 <str.0>

000000008000e318 <.LBB14_10>:
    8000e318:	0001a617          	auipc	a2,0x1a
    8000e31c:	09860613          	addi	a2,a2,152 # 800283b0 <.L__unnamed_34>
    8000e320:	45f1                	li	a1,28
    8000e322:	00014097          	auipc	ra,0x14
    8000e326:	dda080e7          	jalr	-550(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008000e32c <.LBB14_11>:
    8000e32c:	0001a517          	auipc	a0,0x1a
    8000e330:	0a450513          	addi	a0,a0,164 # 800283d0 <str.1>

000000008000e334 <.LBB14_12>:
    8000e334:	0001a617          	auipc	a2,0x1a
    8000e338:	07c60613          	addi	a2,a2,124 # 800283b0 <.L__unnamed_34>
    8000e33c:	02100593          	li	a1,33
    8000e340:	00014097          	auipc	ra,0x14
    8000e344:	dbc080e7          	jalr	-580(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008000e34a <.LBB14_13>:
    8000e34a:	0001a517          	auipc	a0,0x1a
    8000e34e:	08650513          	addi	a0,a0,134 # 800283d0 <str.1>

000000008000e352 <.LBB14_14>:
    8000e352:	0001a617          	auipc	a2,0x1a
    8000e356:	05e60613          	addi	a2,a2,94 # 800283b0 <.L__unnamed_34>
    8000e35a:	02100593          	li	a1,33
    8000e35e:	00014097          	auipc	ra,0x14
    8000e362:	d9e080e7          	jalr	-610(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008000e368 <.LBB14_15>:
    8000e368:	0001a517          	auipc	a0,0x1a
    8000e36c:	0a850513          	addi	a0,a0,168 # 80028410 <str.2>

000000008000e370 <.LBB14_16>:
    8000e370:	0001a617          	auipc	a2,0x1a
    8000e374:	08860613          	addi	a2,a2,136 # 800283f8 <.L__unnamed_35>
    8000e378:	02100593          	li	a1,33
    8000e37c:	00014097          	auipc	ra,0x14
    8000e380:	d80080e7          	jalr	-640(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN4core5clone5Clone10clone_from17h2b52fdc155b58fc3E:

000000008000e386 <_ZN4core5clone5Clone10clone_from17h2b52fdc155b58fc3E>:
    fn clone_from(&mut self, source: &Self) {
    8000e386:	cc010113          	addi	sp,sp,-832
    8000e38a:	32113c23          	sd	ra,824(sp)
    8000e38e:	e02a                	sd	a0,0(sp)
    8000e390:	32a13423          	sd	a0,808(sp)
    8000e394:	32b13823          	sd	a1,816(sp)
    8000e398:	0028                	addi	a0,sp,8
        *self = source.clone()
    8000e39a:	ffff9097          	auipc	ra,0xffff9
    8000e39e:	d56080e7          	jalr	-682(ra) # 800070f0 <_ZN4core5clone5Clone5clone17h31f6bbc7b19c5f8bE>
    8000e3a2:	a009                	j	8000e3a4 <_ZN4core5clone5Clone10clone_from17h2b52fdc155b58fc3E+0x1e>
    8000e3a4:	6502                	ld	a0,0(sp)
    8000e3a6:	ffff9097          	auipc	ra,0xffff9
    8000e3aa:	a3e080e7          	jalr	-1474(ra) # 80006de4 <_ZN4core3ptr119drop_in_place$LT$$u5b$core..option..Option$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$$u3b$$u20$100$u5d$$GT$17ha293b69a65138838E>
    8000e3ae:	a009                	j	8000e3b0 <_ZN4core5clone5Clone10clone_from17h2b52fdc155b58fc3E+0x2a>
    8000e3b0:	6502                	ld	a0,0(sp)
    8000e3b2:	002c                	addi	a1,sp,8
    8000e3b4:	32000613          	li	a2,800
    8000e3b8:	00017097          	auipc	ra,0x17
    8000e3bc:	c82080e7          	jalr	-894(ra) # 8002503a <memcpy>
    }
    8000e3c0:	33813083          	ld	ra,824(sp)
    8000e3c4:	34010113          	addi	sp,sp,832
    8000e3c8:	8082                	ret

Disassembly of section .text._ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h659c29622d59b861E:

000000008000e3ca <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h659c29622d59b861E>:
    pub const fn len(&self) -> usize {
    8000e3ca:	7179                	addi	sp,sp,-48
    8000e3cc:	e42e                	sd	a1,8(sp)
    8000e3ce:	85aa                	mv	a1,a0
    8000e3d0:	6522                	ld	a0,8(sp)
    8000e3d2:	f02e                	sd	a1,32(sp)
    8000e3d4:	f42a                	sd	a0,40(sp)
            unsafe { crate::ptr::PtrRepr { const_ptr: self }.components.metadata }
    8000e3d6:	e82e                	sd	a1,16(sp)
    8000e3d8:	ec2a                	sd	a0,24(sp)
    }
    8000e3da:	6145                	addi	sp,sp,48
    8000e3dc:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$3map17h2838ee6761cb3f47E:

000000008000e3de <_ZN4core6option15Option$LT$T$GT$3map17h2838ee6761cb3f47E>:
    ///
    /// assert_eq!(maybe_some_len, Some(13));
    /// ```
    #[inline]
    #[stable(feature = "rust1", since = "1.0.0")]
    pub fn map<U, F: FnOnce(T) -> U>(self, f: F) -> Option<U> {
    8000e3de:	7179                	addi	sp,sp,-48
    8000e3e0:	f406                	sd	ra,40(sp)
    8000e3e2:	c42a                	sw	a0,8(sp)
    8000e3e4:	c62e                	sw	a1,12(sp)
    8000e3e6:	4585                	li	a1,1
        match self {
            Some(x) => Some(f(x)),
    8000e3e8:	00b10fa3          	sb	a1,31(sp)
    8000e3ec:	1502                	slli	a0,a0,0x20
    8000e3ee:	9101                	srli	a0,a0,0x20
    8000e3f0:	4581                	li	a1,0
    8000e3f2:	00b50463          	beq	a0,a1,8000e3fa <_ZN4core6option15Option$LT$T$GT$3map17h2838ee6761cb3f47E+0x1c>
    8000e3f6:	a009                	j	8000e3f8 <_ZN4core6option15Option$LT$T$GT$3map17h2838ee6761cb3f47E+0x1a>
    8000e3f8:	a031                	j	8000e404 <_ZN4core6option15Option$LT$T$GT$3map17h2838ee6761cb3f47E+0x26>
    8000e3fa:	00110537          	lui	a0,0x110
            None => None,
    8000e3fe:	ca2a                	sw	a0,20(sp)
        match self {
    8000e400:	a805                	j	8000e430 <_ZN4core6option15Option$LT$T$GT$3map17h2838ee6761cb3f47E+0x52>
    8000e402:	0000                	unimp
            Some(x) => Some(f(x)),
    8000e404:	4532                	lw	a0,12(sp)
    8000e406:	d22a                	sw	a0,36(sp)
    8000e408:	4581                	li	a1,0
    8000e40a:	00b10fa3          	sb	a1,31(sp)
    8000e40e:	cc2a                	sw	a0,24(sp)
    8000e410:	00010097          	auipc	ra,0x10
    8000e414:	894080e7          	jalr	-1900(ra) # 8001dca4 <_ZN81_$LT$core..str..iter..Chars$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17ha7c7da80d3c0bdbeE>
    8000e418:	1502                	slli	a0,a0,0x20
    8000e41a:	9101                	srli	a0,a0,0x20
    8000e41c:	e02a                	sd	a0,0(sp)
    8000e41e:	a009                	j	8000e420 <_ZN4core6option15Option$LT$T$GT$3map17h2838ee6761cb3f47E+0x42>
    8000e420:	6502                	ld	a0,0(sp)
    8000e422:	ca2a                	sw	a0,20(sp)
        }
    }
    8000e424:	a031                	j	8000e430 <_ZN4core6option15Option$LT$T$GT$3map17h2838ee6761cb3f47E+0x52>
    8000e426:	4552                	lw	a0,20(sp)
    8000e428:	70a2                	ld	ra,40(sp)
    8000e42a:	6145                	addi	sp,sp,48
    8000e42c:	8082                	ret
    8000e42e:	bfe5                	j	8000e426 <_ZN4core6option15Option$LT$T$GT$3map17h2838ee6761cb3f47E+0x48>
    8000e430:	01f14503          	lbu	a0,31(sp)
    8000e434:	8905                	andi	a0,a0,1
    8000e436:	fd65                	bnez	a0,8000e42e <_ZN4core6option15Option$LT$T$GT$3map17h2838ee6761cb3f47E+0x50>
    8000e438:	b7fd                	j	8000e426 <_ZN4core6option15Option$LT$T$GT$3map17h2838ee6761cb3f47E+0x48>

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$3map17ha9a8f16b0aa2a3f1E:

000000008000e43a <_ZN4core6option15Option$LT$T$GT$3map17ha9a8f16b0aa2a3f1E>:
    pub fn map<U, F: FnOnce(T) -> U>(self, f: F) -> Option<U> {
    8000e43a:	7139                	addi	sp,sp,-64
    8000e43c:	fc06                	sd	ra,56(sp)
    8000e43e:	e02e                	sd	a1,0(sp)
    8000e440:	e42a                	sd	a0,8(sp)
    8000e442:	f42e                	sd	a1,40(sp)
    8000e444:	4585                	li	a1,1
            Some(x) => Some(f(x)),
    8000e446:	02b103a3          	sb	a1,39(sp)
    8000e44a:	00a035b3          	snez	a1,a0
    8000e44e:	4581                	li	a1,0
    8000e450:	00b50463          	beq	a0,a1,8000e458 <_ZN4core6option15Option$LT$T$GT$3map17ha9a8f16b0aa2a3f1E+0x1e>
    8000e454:	a009                	j	8000e456 <_ZN4core6option15Option$LT$T$GT$3map17ha9a8f16b0aa2a3f1E+0x1c>
    8000e456:	a031                	j	8000e462 <_ZN4core6option15Option$LT$T$GT$3map17ha9a8f16b0aa2a3f1E+0x28>
    8000e458:	4501                	li	a0,0
            None => None,
    8000e45a:	00a10ba3          	sb	a0,23(sp)
        match self {
    8000e45e:	a805                	j	8000e48e <_ZN4core6option15Option$LT$T$GT$3map17ha9a8f16b0aa2a3f1E+0x54>
    8000e460:	0000                	unimp
            Some(x) => Some(f(x)),
    8000e462:	6502                	ld	a0,0(sp)
    8000e464:	65a2                	ld	a1,8(sp)
    8000e466:	f82e                	sd	a1,48(sp)
    8000e468:	4601                	li	a2,0
    8000e46a:	02c103a3          	sb	a2,39(sp)
    8000e46e:	ec2e                	sd	a1,24(sp)
    8000e470:	ffff7097          	auipc	ra,0xffff7
    8000e474:	236080e7          	jalr	566(ra) # 800056a6 <_ZN6kernel2fs3bio6BufLru14move_if_no_ref28_$u7b$$u7b$closure$u7d$$u7d$17h09361c1327a61982E>
    8000e478:	a009                	j	8000e47a <_ZN4core6option15Option$LT$T$GT$3map17ha9a8f16b0aa2a3f1E+0x40>
    8000e47a:	4505                	li	a0,1
    8000e47c:	00a10ba3          	sb	a0,23(sp)
    }
    8000e480:	a039                	j	8000e48e <_ZN4core6option15Option$LT$T$GT$3map17ha9a8f16b0aa2a3f1E+0x54>
    8000e482:	01714503          	lbu	a0,23(sp)
    8000e486:	70e2                	ld	ra,56(sp)
    8000e488:	6121                	addi	sp,sp,64
    8000e48a:	8082                	ret
    8000e48c:	bfdd                	j	8000e482 <_ZN4core6option15Option$LT$T$GT$3map17ha9a8f16b0aa2a3f1E+0x48>
    8000e48e:	02714503          	lbu	a0,39(sp)
    8000e492:	8905                	andi	a0,a0,1
    8000e494:	fd65                	bnez	a0,8000e48c <_ZN4core6option15Option$LT$T$GT$3map17ha9a8f16b0aa2a3f1E+0x52>
    8000e496:	b7f5                	j	8000e482 <_ZN4core6option15Option$LT$T$GT$3map17ha9a8f16b0aa2a3f1E+0x48>

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$3map17ha9dd9632468a120eE:

000000008000e498 <_ZN4core6option15Option$LT$T$GT$3map17ha9dd9632468a120eE>:
    pub fn map<U, F: FnOnce(T) -> U>(self, f: F) -> Option<U> {
    8000e498:	7139                	addi	sp,sp,-64
    8000e49a:	fc06                	sd	ra,56(sp)
    8000e49c:	e42a                	sd	a0,8(sp)
    8000e49e:	4585                	li	a1,1
            Some(x) => Some(f(x)),
    8000e4a0:	02b103a3          	sb	a1,39(sp)
    8000e4a4:	00a035b3          	snez	a1,a0
    8000e4a8:	4581                	li	a1,0
    8000e4aa:	00b50463          	beq	a0,a1,8000e4b2 <_ZN4core6option15Option$LT$T$GT$3map17ha9dd9632468a120eE+0x1a>
    8000e4ae:	a009                	j	8000e4b0 <_ZN4core6option15Option$LT$T$GT$3map17ha9dd9632468a120eE+0x18>
    8000e4b0:	a031                	j	8000e4bc <_ZN4core6option15Option$LT$T$GT$3map17ha9dd9632468a120eE+0x24>
    8000e4b2:	4501                	li	a0,0
            None => None,
    8000e4b4:	00a10823          	sb	a0,16(sp)
        match self {
    8000e4b8:	a82d                	j	8000e4f2 <_ZN4core6option15Option$LT$T$GT$3map17ha9dd9632468a120eE+0x5a>
    8000e4ba:	0000                	unimp
            Some(x) => Some(f(x)),
    8000e4bc:	6522                	ld	a0,8(sp)
    8000e4be:	f82a                	sd	a0,48(sp)
    8000e4c0:	4581                	li	a1,0
    8000e4c2:	02b103a3          	sb	a1,39(sp)
    8000e4c6:	ec2a                	sd	a0,24(sp)
    8000e4c8:	00001097          	auipc	ra,0x1
    8000e4cc:	afe080e7          	jalr	-1282(ra) # 8000efc6 <_ZN4core6option19Option$LT$$RF$T$GT$6copied28_$u7b$$u7b$closure$u7d$$u7d$17ha236d2efbe19b7e0E>
    8000e4d0:	e02a                	sd	a0,0(sp)
    8000e4d2:	a009                	j	8000e4d4 <_ZN4core6option15Option$LT$T$GT$3map17ha9dd9632468a120eE+0x3c>
    8000e4d4:	6502                	ld	a0,0(sp)
    8000e4d6:	00a108a3          	sb	a0,17(sp)
    8000e4da:	4505                	li	a0,1
    8000e4dc:	00a10823          	sb	a0,16(sp)
    }
    8000e4e0:	a809                	j	8000e4f2 <_ZN4core6option15Option$LT$T$GT$3map17ha9dd9632468a120eE+0x5a>
    8000e4e2:	01014503          	lbu	a0,16(sp)
    8000e4e6:	01110583          	lb	a1,17(sp)
    8000e4ea:	70e2                	ld	ra,56(sp)
    8000e4ec:	6121                	addi	sp,sp,64
    8000e4ee:	8082                	ret
    8000e4f0:	bfcd                	j	8000e4e2 <_ZN4core6option15Option$LT$T$GT$3map17ha9dd9632468a120eE+0x4a>
    8000e4f2:	02714503          	lbu	a0,39(sp)
    8000e4f6:	8905                	andi	a0,a0,1
    8000e4f8:	fd65                	bnez	a0,8000e4f0 <_ZN4core6option15Option$LT$T$GT$3map17ha9dd9632468a120eE+0x58>
    8000e4fa:	b7e5                	j	8000e4e2 <_ZN4core6option15Option$LT$T$GT$3map17ha9dd9632468a120eE+0x4a>

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$3map17hd4472e66f8c522f7E:

000000008000e4fc <_ZN4core6option15Option$LT$T$GT$3map17hd4472e66f8c522f7E>:
    pub fn map<U, F: FnOnce(T) -> U>(self, f: F) -> Option<U> {
    8000e4fc:	7139                	addi	sp,sp,-64
    8000e4fe:	fc06                	sd	ra,56(sp)
    8000e500:	e02e                	sd	a1,0(sp)
    8000e502:	e42a                	sd	a0,8(sp)
    8000e504:	f42e                	sd	a1,40(sp)
    8000e506:	4585                	li	a1,1
            Some(x) => Some(f(x)),
    8000e508:	02b103a3          	sb	a1,39(sp)
    8000e50c:	00a035b3          	snez	a1,a0
    8000e510:	4581                	li	a1,0
    8000e512:	00b50463          	beq	a0,a1,8000e51a <_ZN4core6option15Option$LT$T$GT$3map17hd4472e66f8c522f7E+0x1e>
    8000e516:	a009                	j	8000e518 <_ZN4core6option15Option$LT$T$GT$3map17hd4472e66f8c522f7E+0x1c>
    8000e518:	a031                	j	8000e524 <_ZN4core6option15Option$LT$T$GT$3map17hd4472e66f8c522f7E+0x28>
    8000e51a:	4501                	li	a0,0
            None => None,
    8000e51c:	00a10ba3          	sb	a0,23(sp)
        match self {
    8000e520:	a805                	j	8000e550 <_ZN4core6option15Option$LT$T$GT$3map17hd4472e66f8c522f7E+0x54>
    8000e522:	0000                	unimp
            Some(x) => Some(f(x)),
    8000e524:	6502                	ld	a0,0(sp)
    8000e526:	65a2                	ld	a1,8(sp)
    8000e528:	f82e                	sd	a1,48(sp)
    8000e52a:	4601                	li	a2,0
    8000e52c:	02c103a3          	sb	a2,39(sp)
    8000e530:	ec2e                	sd	a1,24(sp)
    8000e532:	ffff7097          	auipc	ra,0xffff7
    8000e536:	184080e7          	jalr	388(ra) # 800056b6 <_ZN6kernel2fs3bio6BufLru14move_if_no_ref28_$u7b$$u7b$closure$u7d$$u7d$17h0a4afebccbc6cf13E>
    8000e53a:	a009                	j	8000e53c <_ZN4core6option15Option$LT$T$GT$3map17hd4472e66f8c522f7E+0x40>
    8000e53c:	4505                	li	a0,1
    8000e53e:	00a10ba3          	sb	a0,23(sp)
    }
    8000e542:	a039                	j	8000e550 <_ZN4core6option15Option$LT$T$GT$3map17hd4472e66f8c522f7E+0x54>
    8000e544:	01714503          	lbu	a0,23(sp)
    8000e548:	70e2                	ld	ra,56(sp)
    8000e54a:	6121                	addi	sp,sp,64
    8000e54c:	8082                	ret
    8000e54e:	bfdd                	j	8000e544 <_ZN4core6option15Option$LT$T$GT$3map17hd4472e66f8c522f7E+0x48>
    8000e550:	02714503          	lbu	a0,39(sp)
    8000e554:	8905                	andi	a0,a0,1
    8000e556:	fd65                	bnez	a0,8000e54e <_ZN4core6option15Option$LT$T$GT$3map17hd4472e66f8c522f7E+0x52>
    8000e558:	b7f5                	j	8000e544 <_ZN4core6option15Option$LT$T$GT$3map17hd4472e66f8c522f7E+0x48>

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$3map17hf813a527d3b93241E:

000000008000e55a <_ZN4core6option15Option$LT$T$GT$3map17hf813a527d3b93241E>:
    pub fn map<U, F: FnOnce(T) -> U>(self, f: F) -> Option<U> {
    8000e55a:	7139                	addi	sp,sp,-64
    8000e55c:	fc06                	sd	ra,56(sp)
    8000e55e:	e02e                	sd	a1,0(sp)
    8000e560:	e42a                	sd	a0,8(sp)
    8000e562:	f42e                	sd	a1,40(sp)
    8000e564:	4585                	li	a1,1
            Some(x) => Some(f(x)),
    8000e566:	02b103a3          	sb	a1,39(sp)
    8000e56a:	00a035b3          	snez	a1,a0
    8000e56e:	4581                	li	a1,0
    8000e570:	00b50463          	beq	a0,a1,8000e578 <_ZN4core6option15Option$LT$T$GT$3map17hf813a527d3b93241E+0x1e>
    8000e574:	a009                	j	8000e576 <_ZN4core6option15Option$LT$T$GT$3map17hf813a527d3b93241E+0x1c>
    8000e576:	a031                	j	8000e582 <_ZN4core6option15Option$LT$T$GT$3map17hf813a527d3b93241E+0x28>
    8000e578:	4501                	li	a0,0
            None => None,
    8000e57a:	00a10ba3          	sb	a0,23(sp)
        match self {
    8000e57e:	a805                	j	8000e5ae <_ZN4core6option15Option$LT$T$GT$3map17hf813a527d3b93241E+0x54>
    8000e580:	0000                	unimp
            Some(x) => Some(f(x)),
    8000e582:	6502                	ld	a0,0(sp)
    8000e584:	65a2                	ld	a1,8(sp)
    8000e586:	f82e                	sd	a1,48(sp)
    8000e588:	4601                	li	a2,0
    8000e58a:	02c103a3          	sb	a2,39(sp)
    8000e58e:	ec2e                	sd	a1,24(sp)
    8000e590:	ffff7097          	auipc	ra,0xffff7
    8000e594:	136080e7          	jalr	310(ra) # 800056c6 <_ZN6kernel2fs3bio6BufLru14move_if_no_ref28_$u7b$$u7b$closure$u7d$$u7d$17h304675452a5a98dfE>
    8000e598:	a009                	j	8000e59a <_ZN4core6option15Option$LT$T$GT$3map17hf813a527d3b93241E+0x40>
    8000e59a:	4505                	li	a0,1
    8000e59c:	00a10ba3          	sb	a0,23(sp)
    }
    8000e5a0:	a039                	j	8000e5ae <_ZN4core6option15Option$LT$T$GT$3map17hf813a527d3b93241E+0x54>
    8000e5a2:	01714503          	lbu	a0,23(sp)
    8000e5a6:	70e2                	ld	ra,56(sp)
    8000e5a8:	6121                	addi	sp,sp,64
    8000e5aa:	8082                	ret
    8000e5ac:	bfdd                	j	8000e5a2 <_ZN4core6option15Option$LT$T$GT$3map17hf813a527d3b93241E+0x48>
    8000e5ae:	02714503          	lbu	a0,39(sp)
    8000e5b2:	8905                	andi	a0,a0,1
    8000e5b4:	fd65                	bnez	a0,8000e5ac <_ZN4core6option15Option$LT$T$GT$3map17hf813a527d3b93241E+0x52>
    8000e5b6:	b7f5                	j	8000e5a2 <_ZN4core6option15Option$LT$T$GT$3map17hf813a527d3b93241E+0x48>

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$4take17h2bb26f7cfbd48ae3E:

000000008000e5b8 <_ZN4core6option15Option$LT$T$GT$4take17h2bb26f7cfbd48ae3E>:
    /// assert_eq!(x, None);
    /// assert_eq!(y, None);
    /// ```
    #[inline]
    #[stable(feature = "rust1", since = "1.0.0")]
    pub fn take(&mut self) -> Option<T> {
    8000e5b8:	1101                	addi	sp,sp,-32
    8000e5ba:	ec06                	sd	ra,24(sp)
    8000e5bc:	e82a                	sd	a0,16(sp)
        mem::take(self)
    8000e5be:	0000f097          	auipc	ra,0xf
    8000e5c2:	a04080e7          	jalr	-1532(ra) # 8001cfc2 <_ZN4core3mem4take17h5215bf07db4a9cdbE>
    8000e5c6:	e42a                	sd	a0,8(sp)
    8000e5c8:	a009                	j	8000e5ca <_ZN4core6option15Option$LT$T$GT$4take17h2bb26f7cfbd48ae3E+0x12>
    }
    8000e5ca:	6522                	ld	a0,8(sp)
    8000e5cc:	60e2                	ld	ra,24(sp)
    8000e5ce:	6105                	addi	sp,sp,32
    8000e5d0:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$4take17h3f0477f04f3bf4c3E:

000000008000e5d2 <_ZN4core6option15Option$LT$T$GT$4take17h3f0477f04f3bf4c3E>:
    pub fn take(&mut self) -> Option<T> {
    8000e5d2:	1101                	addi	sp,sp,-32
    8000e5d4:	ec06                	sd	ra,24(sp)
    8000e5d6:	e82a                	sd	a0,16(sp)
        mem::take(self)
    8000e5d8:	0000f097          	auipc	ra,0xf
    8000e5dc:	a76080e7          	jalr	-1418(ra) # 8001d04e <_ZN4core3mem4take17ha8b178c6c6bab41fE>
    8000e5e0:	e02a                	sd	a0,0(sp)
    8000e5e2:	e42e                	sd	a1,8(sp)
    8000e5e4:	a009                	j	8000e5e6 <_ZN4core6option15Option$LT$T$GT$4take17h3f0477f04f3bf4c3E+0x14>
    }
    8000e5e6:	65a2                	ld	a1,8(sp)
    8000e5e8:	6502                	ld	a0,0(sp)
    8000e5ea:	60e2                	ld	ra,24(sp)
    8000e5ec:	6105                	addi	sp,sp,32
    8000e5ee:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$4take17h80340c04cecd09beE:

000000008000e5f0 <_ZN4core6option15Option$LT$T$GT$4take17h80340c04cecd09beE>:
    pub fn take(&mut self) -> Option<T> {
    8000e5f0:	1101                	addi	sp,sp,-32
    8000e5f2:	ec06                	sd	ra,24(sp)
    8000e5f4:	e82a                	sd	a0,16(sp)
        mem::take(self)
    8000e5f6:	0000f097          	auipc	ra,0xf
    8000e5fa:	a24080e7          	jalr	-1500(ra) # 8001d01a <_ZN4core3mem4take17ha20fa5de2e41ca09E>
    8000e5fe:	e02a                	sd	a0,0(sp)
    8000e600:	e42e                	sd	a1,8(sp)
    8000e602:	a009                	j	8000e604 <_ZN4core6option15Option$LT$T$GT$4take17h80340c04cecd09beE+0x14>
    }
    8000e604:	65a2                	ld	a1,8(sp)
    8000e606:	6502                	ld	a0,0(sp)
    8000e608:	60e2                	ld	ra,24(sp)
    8000e60a:	6105                	addi	sp,sp,32
    8000e60c:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$4take17h80e6997975665939E:

000000008000e60e <_ZN4core6option15Option$LT$T$GT$4take17h80e6997975665939E>:
    pub fn take(&mut self) -> Option<T> {
    8000e60e:	1101                	addi	sp,sp,-32
    8000e610:	ec06                	sd	ra,24(sp)
    8000e612:	e82a                	sd	a0,16(sp)
        mem::take(self)
    8000e614:	0000f097          	auipc	ra,0xf
    8000e618:	9da080e7          	jalr	-1574(ra) # 8001cfee <_ZN4core3mem4take17h9920b9ae1a5c3368E>
    8000e61c:	e42a                	sd	a0,8(sp)
    8000e61e:	a009                	j	8000e620 <_ZN4core6option15Option$LT$T$GT$4take17h80e6997975665939E+0x12>
    }
    8000e620:	6522                	ld	a0,8(sp)
    8000e622:	60e2                	ld	ra,24(sp)
    8000e624:	6105                	addi	sp,sp,32
    8000e626:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$5ok_or17h436768d7af37ca52E:

000000008000e628 <_ZN4core6option15Option$LT$T$GT$5ok_or17h436768d7af37ca52E>:
    pub fn ok_or<E>(self, err: E) -> Result<T, E> {
    8000e628:	715d                	addi	sp,sp,-80
    8000e62a:	e43a                	sd	a4,8(sp)
    8000e62c:	e836                	sd	a3,16(sp)
    8000e62e:	ec2a                	sd	a0,24(sp)
    8000e630:	f02e                	sd	a1,32(sp)
    8000e632:	f432                	sd	a2,40(sp)
    8000e634:	fc36                	sd	a3,56(sp)
    8000e636:	e0ba                	sd	a4,64(sp)
    8000e638:	4505                	li	a0,1
            Some(v) => Ok(v),
    8000e63a:	02a10ba3          	sb	a0,55(sp)
    8000e63e:	4501                	li	a0,0
    8000e640:	00a58463          	beq	a1,a0,8000e648 <_ZN4core6option15Option$LT$T$GT$5ok_or17h436768d7af37ca52E+0x20>
    8000e644:	a009                	j	8000e646 <_ZN4core6option15Option$LT$T$GT$5ok_or17h436768d7af37ca52E+0x1e>
    8000e646:	a829                	j	8000e660 <_ZN4core6option15Option$LT$T$GT$5ok_or17h436768d7af37ca52E+0x38>
    8000e648:	65e2                	ld	a1,24(sp)
    8000e64a:	6522                	ld	a0,8(sp)
    8000e64c:	6642                	ld	a2,16(sp)
    8000e64e:	4681                	li	a3,0
            None => Err(err),
    8000e650:	02d10ba3          	sb	a3,55(sp)
    8000e654:	e590                	sd	a2,8(a1)
    8000e656:	e988                	sd	a0,16(a1)
    8000e658:	4505                	li	a0,1
    8000e65a:	e188                	sd	a0,0(a1)
        match self {
    8000e65c:	a809                	j	8000e66e <_ZN4core6option15Option$LT$T$GT$5ok_or17h436768d7af37ca52E+0x46>
    8000e65e:	0000                	unimp
            Some(v) => Ok(v),
    8000e660:	65e2                	ld	a1,24(sp)
    8000e662:	7522                	ld	a0,40(sp)
    8000e664:	e4aa                	sd	a0,72(sp)
    8000e666:	e588                	sd	a0,8(a1)
    8000e668:	4501                	li	a0,0
    8000e66a:	e188                	sd	a0,0(a1)
        match self {
    8000e66c:	a009                	j	8000e66e <_ZN4core6option15Option$LT$T$GT$5ok_or17h436768d7af37ca52E+0x46>
    }
    8000e66e:	03714503          	lbu	a0,55(sp)
    8000e672:	8905                	andi	a0,a0,1
    8000e674:	e501                	bnez	a0,8000e67c <_ZN4core6option15Option$LT$T$GT$5ok_or17h436768d7af37ca52E+0x54>
    8000e676:	a009                	j	8000e678 <_ZN4core6option15Option$LT$T$GT$5ok_or17h436768d7af37ca52E+0x50>
    8000e678:	6161                	addi	sp,sp,80
    8000e67a:	8082                	ret
    8000e67c:	bff5                	j	8000e678 <_ZN4core6option15Option$LT$T$GT$5ok_or17h436768d7af37ca52E+0x50>

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$5ok_or17h53f933033be30818E:

000000008000e67e <_ZN4core6option15Option$LT$T$GT$5ok_or17h53f933033be30818E>:
    pub fn ok_or<E>(self, err: E) -> Result<T, E> {
    8000e67e:	7179                	addi	sp,sp,-48
    8000e680:	e42a                	sd	a0,8(sp)
    8000e682:	4585                	li	a1,1
            Some(v) => Ok(v),
    8000e684:	00b10fa3          	sb	a1,31(sp)
    8000e688:	00a035b3          	snez	a1,a0
    8000e68c:	4581                	li	a1,0
    8000e68e:	00b50463          	beq	a0,a1,8000e696 <_ZN4core6option15Option$LT$T$GT$5ok_or17h53f933033be30818E+0x18>
    8000e692:	a009                	j	8000e694 <_ZN4core6option15Option$LT$T$GT$5ok_or17h53f933033be30818E+0x16>
    8000e694:	a039                	j	8000e6a2 <_ZN4core6option15Option$LT$T$GT$5ok_or17h53f933033be30818E+0x24>
    8000e696:	4501                	li	a0,0
            None => Err(err),
    8000e698:	00a10fa3          	sb	a0,31(sp)
    8000e69c:	e82a                	sd	a0,16(sp)
        match self {
    8000e69e:	a031                	j	8000e6aa <_ZN4core6option15Option$LT$T$GT$5ok_or17h53f933033be30818E+0x2c>
    8000e6a0:	0000                	unimp
            Some(v) => Ok(v),
    8000e6a2:	6522                	ld	a0,8(sp)
    8000e6a4:	f42a                	sd	a0,40(sp)
    8000e6a6:	e82a                	sd	a0,16(sp)
        match self {
    8000e6a8:	a009                	j	8000e6aa <_ZN4core6option15Option$LT$T$GT$5ok_or17h53f933033be30818E+0x2c>
    }
    8000e6aa:	01f14503          	lbu	a0,31(sp)
    8000e6ae:	8905                	andi	a0,a0,1
    8000e6b0:	e509                	bnez	a0,8000e6ba <_ZN4core6option15Option$LT$T$GT$5ok_or17h53f933033be30818E+0x3c>
    8000e6b2:	a009                	j	8000e6b4 <_ZN4core6option15Option$LT$T$GT$5ok_or17h53f933033be30818E+0x36>
    8000e6b4:	6542                	ld	a0,16(sp)
    8000e6b6:	6145                	addi	sp,sp,48
    8000e6b8:	8082                	ret
    8000e6ba:	bfed                	j	8000e6b4 <_ZN4core6option15Option$LT$T$GT$5ok_or17h53f933033be30818E+0x36>

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$5ok_or17h630e1a004ee31f6cE:

000000008000e6bc <_ZN4core6option15Option$LT$T$GT$5ok_or17h630e1a004ee31f6cE>:
    pub fn ok_or<E>(self, err: E) -> Result<T, E> {
    8000e6bc:	7139                	addi	sp,sp,-64
    8000e6be:	e42a                	sd	a0,8(sp)
    8000e6c0:	e82e                	sd	a1,16(sp)
    8000e6c2:	4585                	li	a1,1
            Some(v) => Ok(v),
    8000e6c4:	02b107a3          	sb	a1,47(sp)
    8000e6c8:	4581                	li	a1,0
    8000e6ca:	00b50463          	beq	a0,a1,8000e6d2 <_ZN4core6option15Option$LT$T$GT$5ok_or17h630e1a004ee31f6cE+0x16>
    8000e6ce:	a009                	j	8000e6d0 <_ZN4core6option15Option$LT$T$GT$5ok_or17h630e1a004ee31f6cE+0x14>
    8000e6d0:	a801                	j	8000e6e0 <_ZN4core6option15Option$LT$T$GT$5ok_or17h630e1a004ee31f6cE+0x24>
    8000e6d2:	4501                	li	a0,0
            None => Err(err),
    8000e6d4:	02a107a3          	sb	a0,47(sp)
    8000e6d8:	4505                	li	a0,1
    8000e6da:	ec2a                	sd	a0,24(sp)
        match self {
    8000e6dc:	a801                	j	8000e6ec <_ZN4core6option15Option$LT$T$GT$5ok_or17h630e1a004ee31f6cE+0x30>
    8000e6de:	0000                	unimp
            Some(v) => Ok(v),
    8000e6e0:	6542                	ld	a0,16(sp)
    8000e6e2:	fc2a                	sd	a0,56(sp)
    8000e6e4:	f02a                	sd	a0,32(sp)
    8000e6e6:	4501                	li	a0,0
    8000e6e8:	ec2a                	sd	a0,24(sp)
        match self {
    8000e6ea:	a009                	j	8000e6ec <_ZN4core6option15Option$LT$T$GT$5ok_or17h630e1a004ee31f6cE+0x30>
    }
    8000e6ec:	02f14503          	lbu	a0,47(sp)
    8000e6f0:	8905                	andi	a0,a0,1
    8000e6f2:	e511                	bnez	a0,8000e6fe <_ZN4core6option15Option$LT$T$GT$5ok_or17h630e1a004ee31f6cE+0x42>
    8000e6f4:	a009                	j	8000e6f6 <_ZN4core6option15Option$LT$T$GT$5ok_or17h630e1a004ee31f6cE+0x3a>
    8000e6f6:	6562                	ld	a0,24(sp)
    8000e6f8:	7582                	ld	a1,32(sp)
    8000e6fa:	6121                	addi	sp,sp,64
    8000e6fc:	8082                	ret
    8000e6fe:	bfe5                	j	8000e6f6 <_ZN4core6option15Option$LT$T$GT$5ok_or17h630e1a004ee31f6cE+0x3a>

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$5ok_or17h693a281cfb0e5e0dE:

000000008000e700 <_ZN4core6option15Option$LT$T$GT$5ok_or17h693a281cfb0e5e0dE>:
    pub fn ok_or<E>(self, err: E) -> Result<T, E> {
    8000e700:	7179                	addi	sp,sp,-48
    8000e702:	e42a                	sd	a0,8(sp)
    8000e704:	4585                	li	a1,1
            Some(v) => Ok(v),
    8000e706:	00b10fa3          	sb	a1,31(sp)
    8000e70a:	00a035b3          	snez	a1,a0
    8000e70e:	4581                	li	a1,0
    8000e710:	00b50463          	beq	a0,a1,8000e718 <_ZN4core6option15Option$LT$T$GT$5ok_or17h693a281cfb0e5e0dE+0x18>
    8000e714:	a009                	j	8000e716 <_ZN4core6option15Option$LT$T$GT$5ok_or17h693a281cfb0e5e0dE+0x16>
    8000e716:	a039                	j	8000e724 <_ZN4core6option15Option$LT$T$GT$5ok_or17h693a281cfb0e5e0dE+0x24>
    8000e718:	4501                	li	a0,0
            None => Err(err),
    8000e71a:	00a10fa3          	sb	a0,31(sp)
    8000e71e:	e82a                	sd	a0,16(sp)
        match self {
    8000e720:	a031                	j	8000e72c <_ZN4core6option15Option$LT$T$GT$5ok_or17h693a281cfb0e5e0dE+0x2c>
    8000e722:	0000                	unimp
            Some(v) => Ok(v),
    8000e724:	6522                	ld	a0,8(sp)
    8000e726:	f42a                	sd	a0,40(sp)
    8000e728:	e82a                	sd	a0,16(sp)
        match self {
    8000e72a:	a009                	j	8000e72c <_ZN4core6option15Option$LT$T$GT$5ok_or17h693a281cfb0e5e0dE+0x2c>
    }
    8000e72c:	01f14503          	lbu	a0,31(sp)
    8000e730:	8905                	andi	a0,a0,1
    8000e732:	e509                	bnez	a0,8000e73c <_ZN4core6option15Option$LT$T$GT$5ok_or17h693a281cfb0e5e0dE+0x3c>
    8000e734:	a009                	j	8000e736 <_ZN4core6option15Option$LT$T$GT$5ok_or17h693a281cfb0e5e0dE+0x36>
    8000e736:	6542                	ld	a0,16(sp)
    8000e738:	6145                	addi	sp,sp,48
    8000e73a:	8082                	ret
    8000e73c:	bfed                	j	8000e736 <_ZN4core6option15Option$LT$T$GT$5ok_or17h693a281cfb0e5e0dE+0x36>

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$5ok_or17h7a4d5ef4770297f6E:

000000008000e73e <_ZN4core6option15Option$LT$T$GT$5ok_or17h7a4d5ef4770297f6E>:
    pub fn ok_or<E>(self, err: E) -> Result<T, E> {
    8000e73e:	715d                	addi	sp,sp,-80
    8000e740:	e43a                	sd	a4,8(sp)
    8000e742:	e836                	sd	a3,16(sp)
    8000e744:	ec2a                	sd	a0,24(sp)
    8000e746:	f02e                	sd	a1,32(sp)
    8000e748:	f432                	sd	a2,40(sp)
    8000e74a:	fc36                	sd	a3,56(sp)
    8000e74c:	e0ba                	sd	a4,64(sp)
    8000e74e:	4505                	li	a0,1
            Some(v) => Ok(v),
    8000e750:	02a10ba3          	sb	a0,55(sp)
    8000e754:	4501                	li	a0,0
    8000e756:	00a58463          	beq	a1,a0,8000e75e <_ZN4core6option15Option$LT$T$GT$5ok_or17h7a4d5ef4770297f6E+0x20>
    8000e75a:	a009                	j	8000e75c <_ZN4core6option15Option$LT$T$GT$5ok_or17h7a4d5ef4770297f6E+0x1e>
    8000e75c:	a829                	j	8000e776 <_ZN4core6option15Option$LT$T$GT$5ok_or17h7a4d5ef4770297f6E+0x38>
    8000e75e:	65e2                	ld	a1,24(sp)
    8000e760:	6522                	ld	a0,8(sp)
    8000e762:	6642                	ld	a2,16(sp)
    8000e764:	4681                	li	a3,0
            None => Err(err),
    8000e766:	02d10ba3          	sb	a3,55(sp)
    8000e76a:	e590                	sd	a2,8(a1)
    8000e76c:	e988                	sd	a0,16(a1)
    8000e76e:	4505                	li	a0,1
    8000e770:	e188                	sd	a0,0(a1)
        match self {
    8000e772:	a809                	j	8000e784 <_ZN4core6option15Option$LT$T$GT$5ok_or17h7a4d5ef4770297f6E+0x46>
    8000e774:	0000                	unimp
            Some(v) => Ok(v),
    8000e776:	65e2                	ld	a1,24(sp)
    8000e778:	7522                	ld	a0,40(sp)
    8000e77a:	e4aa                	sd	a0,72(sp)
    8000e77c:	e588                	sd	a0,8(a1)
    8000e77e:	4501                	li	a0,0
    8000e780:	e188                	sd	a0,0(a1)
        match self {
    8000e782:	a009                	j	8000e784 <_ZN4core6option15Option$LT$T$GT$5ok_or17h7a4d5ef4770297f6E+0x46>
    }
    8000e784:	03714503          	lbu	a0,55(sp)
    8000e788:	8905                	andi	a0,a0,1
    8000e78a:	e501                	bnez	a0,8000e792 <_ZN4core6option15Option$LT$T$GT$5ok_or17h7a4d5ef4770297f6E+0x54>
    8000e78c:	a009                	j	8000e78e <_ZN4core6option15Option$LT$T$GT$5ok_or17h7a4d5ef4770297f6E+0x50>
    8000e78e:	6161                	addi	sp,sp,80
    8000e790:	8082                	ret
    8000e792:	bff5                	j	8000e78e <_ZN4core6option15Option$LT$T$GT$5ok_or17h7a4d5ef4770297f6E+0x50>

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$5ok_or17h8c89aa4278cdb5d9E:

000000008000e794 <_ZN4core6option15Option$LT$T$GT$5ok_or17h8c89aa4278cdb5d9E>:
    pub fn ok_or<E>(self, err: E) -> Result<T, E> {
    8000e794:	7179                	addi	sp,sp,-48
    8000e796:	e42a                	sd	a0,8(sp)
    8000e798:	4585                	li	a1,1
            Some(v) => Ok(v),
    8000e79a:	00b10fa3          	sb	a1,31(sp)
    8000e79e:	00a035b3          	snez	a1,a0
    8000e7a2:	4581                	li	a1,0
    8000e7a4:	00b50463          	beq	a0,a1,8000e7ac <_ZN4core6option15Option$LT$T$GT$5ok_or17h8c89aa4278cdb5d9E+0x18>
    8000e7a8:	a009                	j	8000e7aa <_ZN4core6option15Option$LT$T$GT$5ok_or17h8c89aa4278cdb5d9E+0x16>
    8000e7aa:	a039                	j	8000e7b8 <_ZN4core6option15Option$LT$T$GT$5ok_or17h8c89aa4278cdb5d9E+0x24>
    8000e7ac:	4501                	li	a0,0
            None => Err(err),
    8000e7ae:	00a10fa3          	sb	a0,31(sp)
    8000e7b2:	e82a                	sd	a0,16(sp)
        match self {
    8000e7b4:	a031                	j	8000e7c0 <_ZN4core6option15Option$LT$T$GT$5ok_or17h8c89aa4278cdb5d9E+0x2c>
    8000e7b6:	0000                	unimp
            Some(v) => Ok(v),
    8000e7b8:	6522                	ld	a0,8(sp)
    8000e7ba:	f42a                	sd	a0,40(sp)
    8000e7bc:	e82a                	sd	a0,16(sp)
        match self {
    8000e7be:	a009                	j	8000e7c0 <_ZN4core6option15Option$LT$T$GT$5ok_or17h8c89aa4278cdb5d9E+0x2c>
    }
    8000e7c0:	01f14503          	lbu	a0,31(sp)
    8000e7c4:	8905                	andi	a0,a0,1
    8000e7c6:	e509                	bnez	a0,8000e7d0 <_ZN4core6option15Option$LT$T$GT$5ok_or17h8c89aa4278cdb5d9E+0x3c>
    8000e7c8:	a009                	j	8000e7ca <_ZN4core6option15Option$LT$T$GT$5ok_or17h8c89aa4278cdb5d9E+0x36>
    8000e7ca:	6542                	ld	a0,16(sp)
    8000e7cc:	6145                	addi	sp,sp,48
    8000e7ce:	8082                	ret
    8000e7d0:	bfed                	j	8000e7ca <_ZN4core6option15Option$LT$T$GT$5ok_or17h8c89aa4278cdb5d9E+0x36>

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$5ok_or17hac03a53b0754fc14E:

000000008000e7d2 <_ZN4core6option15Option$LT$T$GT$5ok_or17hac03a53b0754fc14E>:
    pub fn ok_or<E>(self, err: E) -> Result<T, E> {
    8000e7d2:	7139                	addi	sp,sp,-64
    8000e7d4:	e03a                	sd	a4,0(sp)
    8000e7d6:	e436                	sd	a3,8(sp)
    8000e7d8:	e82a                	sd	a0,16(sp)
    8000e7da:	cc2e                	sw	a1,24(sp)
    8000e7dc:	ce32                	sw	a2,28(sp)
    8000e7de:	f436                	sd	a3,40(sp)
    8000e7e0:	f83a                	sd	a4,48(sp)
    8000e7e2:	4505                	li	a0,1
            Some(v) => Ok(v),
    8000e7e4:	02a103a3          	sb	a0,39(sp)
    8000e7e8:	02059513          	slli	a0,a1,0x20
    8000e7ec:	9101                	srli	a0,a0,0x20
    8000e7ee:	4581                	li	a1,0
    8000e7f0:	00b50463          	beq	a0,a1,8000e7f8 <_ZN4core6option15Option$LT$T$GT$5ok_or17hac03a53b0754fc14E+0x26>
    8000e7f4:	a009                	j	8000e7f6 <_ZN4core6option15Option$LT$T$GT$5ok_or17hac03a53b0754fc14E+0x24>
    8000e7f6:	a829                	j	8000e810 <_ZN4core6option15Option$LT$T$GT$5ok_or17hac03a53b0754fc14E+0x3e>
    8000e7f8:	65c2                	ld	a1,16(sp)
    8000e7fa:	6502                	ld	a0,0(sp)
    8000e7fc:	6622                	ld	a2,8(sp)
    8000e7fe:	4681                	li	a3,0
            None => Err(err),
    8000e800:	02d103a3          	sb	a3,39(sp)
    8000e804:	e590                	sd	a2,8(a1)
    8000e806:	e988                	sd	a0,16(a1)
    8000e808:	4505                	li	a0,1
    8000e80a:	c188                	sw	a0,0(a1)
        match self {
    8000e80c:	a809                	j	8000e81e <_ZN4core6option15Option$LT$T$GT$5ok_or17hac03a53b0754fc14E+0x4c>
    8000e80e:	0000                	unimp
            Some(v) => Ok(v),
    8000e810:	65c2                	ld	a1,16(sp)
    8000e812:	4572                	lw	a0,28(sp)
    8000e814:	de2a                	sw	a0,60(sp)
    8000e816:	c1c8                	sw	a0,4(a1)
    8000e818:	4501                	li	a0,0
    8000e81a:	c188                	sw	a0,0(a1)
        match self {
    8000e81c:	a009                	j	8000e81e <_ZN4core6option15Option$LT$T$GT$5ok_or17hac03a53b0754fc14E+0x4c>
    }
    8000e81e:	02714503          	lbu	a0,39(sp)
    8000e822:	8905                	andi	a0,a0,1
    8000e824:	e501                	bnez	a0,8000e82c <_ZN4core6option15Option$LT$T$GT$5ok_or17hac03a53b0754fc14E+0x5a>
    8000e826:	a009                	j	8000e828 <_ZN4core6option15Option$LT$T$GT$5ok_or17hac03a53b0754fc14E+0x56>
    8000e828:	6121                	addi	sp,sp,64
    8000e82a:	8082                	ret
    8000e82c:	bff5                	j	8000e828 <_ZN4core6option15Option$LT$T$GT$5ok_or17hac03a53b0754fc14E+0x56>

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$5ok_or17hc525e8e997fb4842E:

000000008000e82e <_ZN4core6option15Option$LT$T$GT$5ok_or17hc525e8e997fb4842E>:
    pub fn ok_or<E>(self, err: E) -> Result<T, E> {
    8000e82e:	7139                	addi	sp,sp,-64
    8000e830:	e036                	sd	a3,0(sp)
    8000e832:	e432                	sd	a2,8(sp)
    8000e834:	e82a                	sd	a0,16(sp)
    8000e836:	ec2e                	sd	a1,24(sp)
    8000e838:	f432                	sd	a2,40(sp)
    8000e83a:	f836                	sd	a3,48(sp)
    8000e83c:	4505                	li	a0,1
            Some(v) => Ok(v),
    8000e83e:	02a103a3          	sb	a0,39(sp)
    8000e842:	00b03533          	snez	a0,a1
    8000e846:	4501                	li	a0,0
    8000e848:	00a58463          	beq	a1,a0,8000e850 <_ZN4core6option15Option$LT$T$GT$5ok_or17hc525e8e997fb4842E+0x22>
    8000e84c:	a009                	j	8000e84e <_ZN4core6option15Option$LT$T$GT$5ok_or17hc525e8e997fb4842E+0x20>
    8000e84e:	a829                	j	8000e868 <_ZN4core6option15Option$LT$T$GT$5ok_or17hc525e8e997fb4842E+0x3a>
    8000e850:	65c2                	ld	a1,16(sp)
    8000e852:	6502                	ld	a0,0(sp)
    8000e854:	6622                	ld	a2,8(sp)
    8000e856:	4681                	li	a3,0
            None => Err(err),
    8000e858:	02d103a3          	sb	a3,39(sp)
    8000e85c:	e590                	sd	a2,8(a1)
    8000e85e:	e988                	sd	a0,16(a1)
    8000e860:	4505                	li	a0,1
    8000e862:	e188                	sd	a0,0(a1)
        match self {
    8000e864:	a809                	j	8000e876 <_ZN4core6option15Option$LT$T$GT$5ok_or17hc525e8e997fb4842E+0x48>
    8000e866:	0000                	unimp
            Some(v) => Ok(v),
    8000e868:	65c2                	ld	a1,16(sp)
    8000e86a:	6562                	ld	a0,24(sp)
    8000e86c:	fc2a                	sd	a0,56(sp)
    8000e86e:	e588                	sd	a0,8(a1)
    8000e870:	4501                	li	a0,0
    8000e872:	e188                	sd	a0,0(a1)
        match self {
    8000e874:	a009                	j	8000e876 <_ZN4core6option15Option$LT$T$GT$5ok_or17hc525e8e997fb4842E+0x48>
    }
    8000e876:	02714503          	lbu	a0,39(sp)
    8000e87a:	8905                	andi	a0,a0,1
    8000e87c:	e501                	bnez	a0,8000e884 <_ZN4core6option15Option$LT$T$GT$5ok_or17hc525e8e997fb4842E+0x56>
    8000e87e:	a009                	j	8000e880 <_ZN4core6option15Option$LT$T$GT$5ok_or17hc525e8e997fb4842E+0x52>
    8000e880:	6121                	addi	sp,sp,64
    8000e882:	8082                	ret
    8000e884:	bff5                	j	8000e880 <_ZN4core6option15Option$LT$T$GT$5ok_or17hc525e8e997fb4842E+0x52>

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$5ok_or17hfa0f5f38e365ca74E:

000000008000e886 <_ZN4core6option15Option$LT$T$GT$5ok_or17hfa0f5f38e365ca74E>:
    pub fn ok_or<E>(self, err: E) -> Result<T, E> {
    8000e886:	7179                	addi	sp,sp,-48
    8000e888:	e42a                	sd	a0,8(sp)
    8000e88a:	4585                	li	a1,1
            Some(v) => Ok(v),
    8000e88c:	00b10fa3          	sb	a1,31(sp)
    8000e890:	00a035b3          	snez	a1,a0
    8000e894:	4581                	li	a1,0
    8000e896:	00b50463          	beq	a0,a1,8000e89e <_ZN4core6option15Option$LT$T$GT$5ok_or17hfa0f5f38e365ca74E+0x18>
    8000e89a:	a009                	j	8000e89c <_ZN4core6option15Option$LT$T$GT$5ok_or17hfa0f5f38e365ca74E+0x16>
    8000e89c:	a039                	j	8000e8aa <_ZN4core6option15Option$LT$T$GT$5ok_or17hfa0f5f38e365ca74E+0x24>
    8000e89e:	4501                	li	a0,0
            None => Err(err),
    8000e8a0:	00a10fa3          	sb	a0,31(sp)
    8000e8a4:	e82a                	sd	a0,16(sp)
        match self {
    8000e8a6:	a031                	j	8000e8b2 <_ZN4core6option15Option$LT$T$GT$5ok_or17hfa0f5f38e365ca74E+0x2c>
    8000e8a8:	0000                	unimp
            Some(v) => Ok(v),
    8000e8aa:	6522                	ld	a0,8(sp)
    8000e8ac:	f42a                	sd	a0,40(sp)
    8000e8ae:	e82a                	sd	a0,16(sp)
        match self {
    8000e8b0:	a009                	j	8000e8b2 <_ZN4core6option15Option$LT$T$GT$5ok_or17hfa0f5f38e365ca74E+0x2c>
    }
    8000e8b2:	01f14503          	lbu	a0,31(sp)
    8000e8b6:	8905                	andi	a0,a0,1
    8000e8b8:	e509                	bnez	a0,8000e8c2 <_ZN4core6option15Option$LT$T$GT$5ok_or17hfa0f5f38e365ca74E+0x3c>
    8000e8ba:	a009                	j	8000e8bc <_ZN4core6option15Option$LT$T$GT$5ok_or17hfa0f5f38e365ca74E+0x36>
    8000e8bc:	6542                	ld	a0,16(sp)
    8000e8be:	6145                	addi	sp,sp,48
    8000e8c0:	8082                	ret
    8000e8c2:	bfed                	j	8000e8bc <_ZN4core6option15Option$LT$T$GT$5ok_or17hfa0f5f38e365ca74E+0x36>

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$5ok_or17hfc73591acc2890d8E:

000000008000e8c4 <_ZN4core6option15Option$LT$T$GT$5ok_or17hfc73591acc2890d8E>:
    pub fn ok_or<E>(self, err: E) -> Result<T, E> {
    8000e8c4:	711d                	addi	sp,sp,-96
    8000e8c6:	e436                	sd	a3,8(sp)
    8000e8c8:	e832                	sd	a2,16(sp)
    8000e8ca:	ec2e                	sd	a1,24(sp)
    8000e8cc:	f02a                	sd	a0,32(sp)
    8000e8ce:	e8b2                	sd	a2,80(sp)
    8000e8d0:	ecb6                	sd	a3,88(sp)
    8000e8d2:	4505                	li	a0,1
            Some(v) => Ok(v),
    8000e8d4:	04a107a3          	sb	a0,79(sp)
    8000e8d8:	6188                	ld	a0,0(a1)
    8000e8da:	4581                	li	a1,0
    8000e8dc:	00b50463          	beq	a0,a1,8000e8e4 <_ZN4core6option15Option$LT$T$GT$5ok_or17hfc73591acc2890d8E+0x20>
    8000e8e0:	a009                	j	8000e8e2 <_ZN4core6option15Option$LT$T$GT$5ok_or17hfc73591acc2890d8E+0x1e>
    8000e8e2:	a829                	j	8000e8fc <_ZN4core6option15Option$LT$T$GT$5ok_or17hfc73591acc2890d8E+0x38>
    8000e8e4:	7582                	ld	a1,32(sp)
    8000e8e6:	6522                	ld	a0,8(sp)
    8000e8e8:	6642                	ld	a2,16(sp)
    8000e8ea:	4681                	li	a3,0
            None => Err(err),
    8000e8ec:	04d107a3          	sb	a3,79(sp)
    8000e8f0:	e590                	sd	a2,8(a1)
    8000e8f2:	e988                	sd	a0,16(a1)
    8000e8f4:	4505                	li	a0,1
    8000e8f6:	e188                	sd	a0,0(a1)
        match self {
    8000e8f8:	a839                	j	8000e916 <_ZN4core6option15Option$LT$T$GT$5ok_or17hfc73591acc2890d8E+0x52>
    8000e8fa:	0000                	unimp
            Some(v) => Ok(v),
    8000e8fc:	7582                	ld	a1,32(sp)
    8000e8fe:	6662                	ld	a2,24(sp)
    8000e900:	6608                	ld	a0,8(a2)
    8000e902:	f42a                	sd	a0,40(sp)
    8000e904:	6a10                	ld	a2,16(a2)
    8000e906:	f832                	sd	a2,48(sp)
    8000e908:	e0b2                	sd	a2,64(sp)
    8000e90a:	fc2a                	sd	a0,56(sp)
    8000e90c:	e990                	sd	a2,16(a1)
    8000e90e:	e588                	sd	a0,8(a1)
    8000e910:	4501                	li	a0,0
    8000e912:	e188                	sd	a0,0(a1)
        match self {
    8000e914:	a009                	j	8000e916 <_ZN4core6option15Option$LT$T$GT$5ok_or17hfc73591acc2890d8E+0x52>
    }
    8000e916:	04f14503          	lbu	a0,79(sp)
    8000e91a:	8905                	andi	a0,a0,1
    8000e91c:	e501                	bnez	a0,8000e924 <_ZN4core6option15Option$LT$T$GT$5ok_or17hfc73591acc2890d8E+0x60>
    8000e91e:	a009                	j	8000e920 <_ZN4core6option15Option$LT$T$GT$5ok_or17hfc73591acc2890d8E+0x5c>
    8000e920:	6125                	addi	sp,sp,96
    8000e922:	8082                	ret
    8000e924:	bff5                	j	8000e920 <_ZN4core6option15Option$LT$T$GT$5ok_or17hfc73591acc2890d8E+0x5c>

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$6as_mut17h3a38d82722b299a5E:

000000008000e926 <_ZN4core6option15Option$LT$T$GT$6as_mut17h3a38d82722b299a5E>:
    pub fn as_mut(&mut self) -> Option<&mut T> {
    8000e926:	1101                	addi	sp,sp,-32
    8000e928:	e02a                	sd	a0,0(sp)
    8000e92a:	e82a                	sd	a0,16(sp)
            Some(ref mut x) => Some(x),
    8000e92c:	6108                	ld	a0,0(a0)
    8000e92e:	00a035b3          	snez	a1,a0
    8000e932:	4581                	li	a1,0
    8000e934:	00b50463          	beq	a0,a1,8000e93c <_ZN4core6option15Option$LT$T$GT$6as_mut17h3a38d82722b299a5E+0x16>
    8000e938:	a009                	j	8000e93a <_ZN4core6option15Option$LT$T$GT$6as_mut17h3a38d82722b299a5E+0x14>
    8000e93a:	a029                	j	8000e944 <_ZN4core6option15Option$LT$T$GT$6as_mut17h3a38d82722b299a5E+0x1e>
    8000e93c:	4501                	li	a0,0
            None => None,
    8000e93e:	e42a                	sd	a0,8(sp)
        match *self {
    8000e940:	a031                	j	8000e94c <_ZN4core6option15Option$LT$T$GT$6as_mut17h3a38d82722b299a5E+0x26>
    8000e942:	0000                	unimp
            Some(ref mut x) => Some(x),
    8000e944:	6502                	ld	a0,0(sp)
    8000e946:	ec2a                	sd	a0,24(sp)
    8000e948:	e42a                	sd	a0,8(sp)
        match *self {
    8000e94a:	a009                	j	8000e94c <_ZN4core6option15Option$LT$T$GT$6as_mut17h3a38d82722b299a5E+0x26>
    }
    8000e94c:	6522                	ld	a0,8(sp)
    8000e94e:	6105                	addi	sp,sp,32
    8000e950:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$6as_mut17he7f8c9f3d27cdb5eE:

000000008000e952 <_ZN4core6option15Option$LT$T$GT$6as_mut17he7f8c9f3d27cdb5eE>:
    pub fn as_mut(&mut self) -> Option<&mut T> {
    8000e952:	1101                	addi	sp,sp,-32
    8000e954:	e02a                	sd	a0,0(sp)
    8000e956:	e82a                	sd	a0,16(sp)
            Some(ref mut x) => Some(x),
    8000e958:	6108                	ld	a0,0(a0)
    8000e95a:	4581                	li	a1,0
    8000e95c:	00b50463          	beq	a0,a1,8000e964 <_ZN4core6option15Option$LT$T$GT$6as_mut17he7f8c9f3d27cdb5eE+0x12>
    8000e960:	a009                	j	8000e962 <_ZN4core6option15Option$LT$T$GT$6as_mut17he7f8c9f3d27cdb5eE+0x10>
    8000e962:	a029                	j	8000e96c <_ZN4core6option15Option$LT$T$GT$6as_mut17he7f8c9f3d27cdb5eE+0x1a>
    8000e964:	4501                	li	a0,0
            None => None,
    8000e966:	e42a                	sd	a0,8(sp)
        match *self {
    8000e968:	a039                	j	8000e976 <_ZN4core6option15Option$LT$T$GT$6as_mut17he7f8c9f3d27cdb5eE+0x24>
    8000e96a:	0000                	unimp
            Some(ref mut x) => Some(x),
    8000e96c:	6502                	ld	a0,0(sp)
    8000e96e:	0521                	addi	a0,a0,8
    8000e970:	ec2a                	sd	a0,24(sp)
    8000e972:	e42a                	sd	a0,8(sp)
        match *self {
    8000e974:	a009                	j	8000e976 <_ZN4core6option15Option$LT$T$GT$6as_mut17he7f8c9f3d27cdb5eE+0x24>
    }
    8000e976:	6522                	ld	a0,8(sp)
    8000e978:	6105                	addi	sp,sp,32
    8000e97a:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$6as_ref17h0cd8921964ab0966E:

000000008000e97c <_ZN4core6option15Option$LT$T$GT$6as_ref17h0cd8921964ab0966E>:
    pub const fn as_ref(&self) -> Option<&T> {
    8000e97c:	1101                	addi	sp,sp,-32
    8000e97e:	e02a                	sd	a0,0(sp)
    8000e980:	e82a                	sd	a0,16(sp)
            Some(ref x) => Some(x),
    8000e982:	6108                	ld	a0,0(a0)
    8000e984:	00a035b3          	snez	a1,a0
    8000e988:	4581                	li	a1,0
    8000e98a:	00b50463          	beq	a0,a1,8000e992 <_ZN4core6option15Option$LT$T$GT$6as_ref17h0cd8921964ab0966E+0x16>
    8000e98e:	a009                	j	8000e990 <_ZN4core6option15Option$LT$T$GT$6as_ref17h0cd8921964ab0966E+0x14>
    8000e990:	a029                	j	8000e99a <_ZN4core6option15Option$LT$T$GT$6as_ref17h0cd8921964ab0966E+0x1e>
    8000e992:	4501                	li	a0,0
            None => None,
    8000e994:	e42a                	sd	a0,8(sp)
        match *self {
    8000e996:	a031                	j	8000e9a2 <_ZN4core6option15Option$LT$T$GT$6as_ref17h0cd8921964ab0966E+0x26>
    8000e998:	0000                	unimp
            Some(ref x) => Some(x),
    8000e99a:	6502                	ld	a0,0(sp)
    8000e99c:	ec2a                	sd	a0,24(sp)
    8000e99e:	e42a                	sd	a0,8(sp)
        match *self {
    8000e9a0:	a009                	j	8000e9a2 <_ZN4core6option15Option$LT$T$GT$6as_ref17h0cd8921964ab0966E+0x26>
    }
    8000e9a2:	6522                	ld	a0,8(sp)
    8000e9a4:	6105                	addi	sp,sp,32
    8000e9a6:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$6as_ref17h883d1380e87d3449E:

000000008000e9a8 <_ZN4core6option15Option$LT$T$GT$6as_ref17h883d1380e87d3449E>:
    pub const fn as_ref(&self) -> Option<&T> {
    8000e9a8:	1101                	addi	sp,sp,-32
    8000e9aa:	e02a                	sd	a0,0(sp)
    8000e9ac:	e82a                	sd	a0,16(sp)
            Some(ref x) => Some(x),
    8000e9ae:	6108                	ld	a0,0(a0)
    8000e9b0:	4581                	li	a1,0
    8000e9b2:	00b50463          	beq	a0,a1,8000e9ba <_ZN4core6option15Option$LT$T$GT$6as_ref17h883d1380e87d3449E+0x12>
    8000e9b6:	a009                	j	8000e9b8 <_ZN4core6option15Option$LT$T$GT$6as_ref17h883d1380e87d3449E+0x10>
    8000e9b8:	a029                	j	8000e9c2 <_ZN4core6option15Option$LT$T$GT$6as_ref17h883d1380e87d3449E+0x1a>
    8000e9ba:	4501                	li	a0,0
            None => None,
    8000e9bc:	e42a                	sd	a0,8(sp)
        match *self {
    8000e9be:	a039                	j	8000e9cc <_ZN4core6option15Option$LT$T$GT$6as_ref17h883d1380e87d3449E+0x24>
    8000e9c0:	0000                	unimp
            Some(ref x) => Some(x),
    8000e9c2:	6502                	ld	a0,0(sp)
    8000e9c4:	0521                	addi	a0,a0,8
    8000e9c6:	ec2a                	sd	a0,24(sp)
    8000e9c8:	e42a                	sd	a0,8(sp)
        match *self {
    8000e9ca:	a009                	j	8000e9cc <_ZN4core6option15Option$LT$T$GT$6as_ref17h883d1380e87d3449E+0x24>
    }
    8000e9cc:	6522                	ld	a0,8(sp)
    8000e9ce:	6105                	addi	sp,sp,32
    8000e9d0:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$6as_ref17hb04d778bad5fcb59E:

000000008000e9d2 <_ZN4core6option15Option$LT$T$GT$6as_ref17hb04d778bad5fcb59E>:
    pub const fn as_ref(&self) -> Option<&T> {
    8000e9d2:	1101                	addi	sp,sp,-32
    8000e9d4:	e02a                	sd	a0,0(sp)
    8000e9d6:	e82a                	sd	a0,16(sp)
            Some(ref x) => Some(x),
    8000e9d8:	6108                	ld	a0,0(a0)
    8000e9da:	00a035b3          	snez	a1,a0
    8000e9de:	4581                	li	a1,0
    8000e9e0:	00b50463          	beq	a0,a1,8000e9e8 <_ZN4core6option15Option$LT$T$GT$6as_ref17hb04d778bad5fcb59E+0x16>
    8000e9e4:	a009                	j	8000e9e6 <_ZN4core6option15Option$LT$T$GT$6as_ref17hb04d778bad5fcb59E+0x14>
    8000e9e6:	a029                	j	8000e9f0 <_ZN4core6option15Option$LT$T$GT$6as_ref17hb04d778bad5fcb59E+0x1e>
    8000e9e8:	4501                	li	a0,0
            None => None,
    8000e9ea:	e42a                	sd	a0,8(sp)
        match *self {
    8000e9ec:	a031                	j	8000e9f8 <_ZN4core6option15Option$LT$T$GT$6as_ref17hb04d778bad5fcb59E+0x26>
    8000e9ee:	0000                	unimp
            Some(ref x) => Some(x),
    8000e9f0:	6502                	ld	a0,0(sp)
    8000e9f2:	ec2a                	sd	a0,24(sp)
    8000e9f4:	e42a                	sd	a0,8(sp)
        match *self {
    8000e9f6:	a009                	j	8000e9f8 <_ZN4core6option15Option$LT$T$GT$6as_ref17hb04d778bad5fcb59E+0x26>
    }
    8000e9f8:	6522                	ld	a0,8(sp)
    8000e9fa:	6105                	addi	sp,sp,32
    8000e9fc:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$6expect17h038f65ec579fa12bE:

000000008000e9fe <_ZN4core6option15Option$LT$T$GT$6expect17h038f65ec579fa12bE>:
    pub fn expect(self, msg: &str) -> T {
    8000e9fe:	7139                	addi	sp,sp,-64
    8000ea00:	e03a                	sd	a4,0(sp)
    8000ea02:	e436                	sd	a3,8(sp)
    8000ea04:	e832                	sd	a2,16(sp)
    8000ea06:	ec2a                	sd	a0,24(sp)
    8000ea08:	f02e                	sd	a1,32(sp)
    8000ea0a:	f432                	sd	a2,40(sp)
    8000ea0c:	f836                	sd	a3,48(sp)
    8000ea0e:	4581                	li	a1,0
            Some(val) => val,
    8000ea10:	00b50463          	beq	a0,a1,8000ea18 <_ZN4core6option15Option$LT$T$GT$6expect17h038f65ec579fa12bE+0x1a>
    8000ea14:	a009                	j	8000ea16 <_ZN4core6option15Option$LT$T$GT$6expect17h038f65ec579fa12bE+0x18>
    8000ea16:	a811                	j	8000ea2a <_ZN4core6option15Option$LT$T$GT$6expect17h038f65ec579fa12bE+0x2c>
            None => expect_failed(msg),
    8000ea18:	6602                	ld	a2,0(sp)
    8000ea1a:	65a2                	ld	a1,8(sp)
    8000ea1c:	6542                	ld	a0,16(sp)
    8000ea1e:	00013097          	auipc	ra,0x13
    8000ea22:	5a2080e7          	jalr	1442(ra) # 80021fc0 <_ZN4core6option13expect_failed17h0edd1e4bb5304a50E>
    8000ea26:	0000                	unimp
        match self {
    8000ea28:	0000                	unimp
            Some(val) => val,
    8000ea2a:	7502                	ld	a0,32(sp)
    8000ea2c:	fc2a                	sd	a0,56(sp)
    }
    8000ea2e:	6121                	addi	sp,sp,64
    8000ea30:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$6expect17h263816fde9da1c25E:

000000008000ea32 <_ZN4core6option15Option$LT$T$GT$6expect17h263816fde9da1c25E>:
    pub fn expect(self, msg: &str) -> T {
    8000ea32:	7139                	addi	sp,sp,-64
    8000ea34:	e03a                	sd	a4,0(sp)
    8000ea36:	e436                	sd	a3,8(sp)
    8000ea38:	e832                	sd	a2,16(sp)
    8000ea3a:	ec2a                	sd	a0,24(sp)
    8000ea3c:	f02e                	sd	a1,32(sp)
    8000ea3e:	f432                	sd	a2,40(sp)
    8000ea40:	f836                	sd	a3,48(sp)
    8000ea42:	4581                	li	a1,0
            Some(val) => val,
    8000ea44:	00b50463          	beq	a0,a1,8000ea4c <_ZN4core6option15Option$LT$T$GT$6expect17h263816fde9da1c25E+0x1a>
    8000ea48:	a009                	j	8000ea4a <_ZN4core6option15Option$LT$T$GT$6expect17h263816fde9da1c25E+0x18>
    8000ea4a:	a811                	j	8000ea5e <_ZN4core6option15Option$LT$T$GT$6expect17h263816fde9da1c25E+0x2c>
            None => expect_failed(msg),
    8000ea4c:	6602                	ld	a2,0(sp)
    8000ea4e:	65a2                	ld	a1,8(sp)
    8000ea50:	6542                	ld	a0,16(sp)
    8000ea52:	00013097          	auipc	ra,0x13
    8000ea56:	56e080e7          	jalr	1390(ra) # 80021fc0 <_ZN4core6option13expect_failed17h0edd1e4bb5304a50E>
    8000ea5a:	0000                	unimp
        match self {
    8000ea5c:	0000                	unimp
            Some(val) => val,
    8000ea5e:	7502                	ld	a0,32(sp)
    8000ea60:	fc2a                	sd	a0,56(sp)
    }
    8000ea62:	6121                	addi	sp,sp,64
    8000ea64:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$6expect17h3c07e85986db6eddE:

000000008000ea66 <_ZN4core6option15Option$LT$T$GT$6expect17h3c07e85986db6eddE>:
    pub fn expect(self, msg: &str) -> T {
    8000ea66:	7139                	addi	sp,sp,-64
    8000ea68:	e436                	sd	a3,8(sp)
    8000ea6a:	e832                	sd	a2,16(sp)
    8000ea6c:	ec2e                	sd	a1,24(sp)
    8000ea6e:	f02a                	sd	a0,32(sp)
    8000ea70:	f42e                	sd	a1,40(sp)
    8000ea72:	f832                	sd	a2,48(sp)
            Some(val) => val,
    8000ea74:	00a035b3          	snez	a1,a0
    8000ea78:	4581                	li	a1,0
    8000ea7a:	00b50463          	beq	a0,a1,8000ea82 <_ZN4core6option15Option$LT$T$GT$6expect17h3c07e85986db6eddE+0x1c>
    8000ea7e:	a009                	j	8000ea80 <_ZN4core6option15Option$LT$T$GT$6expect17h3c07e85986db6eddE+0x1a>
    8000ea80:	a811                	j	8000ea94 <_ZN4core6option15Option$LT$T$GT$6expect17h3c07e85986db6eddE+0x2e>
            None => expect_failed(msg),
    8000ea82:	6622                	ld	a2,8(sp)
    8000ea84:	65c2                	ld	a1,16(sp)
    8000ea86:	6562                	ld	a0,24(sp)
    8000ea88:	00013097          	auipc	ra,0x13
    8000ea8c:	538080e7          	jalr	1336(ra) # 80021fc0 <_ZN4core6option13expect_failed17h0edd1e4bb5304a50E>
    8000ea90:	0000                	unimp
        match self {
    8000ea92:	0000                	unimp
            Some(val) => val,
    8000ea94:	7502                	ld	a0,32(sp)
    8000ea96:	fc2a                	sd	a0,56(sp)
    }
    8000ea98:	6121                	addi	sp,sp,64
    8000ea9a:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$6expect17h5cc0070b74d715b8E:

000000008000ea9c <_ZN4core6option15Option$LT$T$GT$6expect17h5cc0070b74d715b8E>:
    pub fn expect(self, msg: &str) -> T {
    8000ea9c:	7139                	addi	sp,sp,-64
    8000ea9e:	e436                	sd	a3,8(sp)
    8000eaa0:	e832                	sd	a2,16(sp)
    8000eaa2:	ec2e                	sd	a1,24(sp)
    8000eaa4:	f02a                	sd	a0,32(sp)
    8000eaa6:	f42e                	sd	a1,40(sp)
    8000eaa8:	f832                	sd	a2,48(sp)
            Some(val) => val,
    8000eaaa:	00a035b3          	snez	a1,a0
    8000eaae:	4581                	li	a1,0
    8000eab0:	00b50463          	beq	a0,a1,8000eab8 <_ZN4core6option15Option$LT$T$GT$6expect17h5cc0070b74d715b8E+0x1c>
    8000eab4:	a009                	j	8000eab6 <_ZN4core6option15Option$LT$T$GT$6expect17h5cc0070b74d715b8E+0x1a>
    8000eab6:	a811                	j	8000eaca <_ZN4core6option15Option$LT$T$GT$6expect17h5cc0070b74d715b8E+0x2e>
            None => expect_failed(msg),
    8000eab8:	6622                	ld	a2,8(sp)
    8000eaba:	65c2                	ld	a1,16(sp)
    8000eabc:	6562                	ld	a0,24(sp)
    8000eabe:	00013097          	auipc	ra,0x13
    8000eac2:	502080e7          	jalr	1282(ra) # 80021fc0 <_ZN4core6option13expect_failed17h0edd1e4bb5304a50E>
    8000eac6:	0000                	unimp
        match self {
    8000eac8:	0000                	unimp
            Some(val) => val,
    8000eaca:	7502                	ld	a0,32(sp)
    8000eacc:	fc2a                	sd	a0,56(sp)
    }
    8000eace:	6121                	addi	sp,sp,64
    8000ead0:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$6expect17h91dc8b235b72ffe4E:

000000008000ead2 <_ZN4core6option15Option$LT$T$GT$6expect17h91dc8b235b72ffe4E>:
    pub fn expect(self, msg: &str) -> T {
    8000ead2:	7139                	addi	sp,sp,-64
    8000ead4:	e036                	sd	a3,0(sp)
    8000ead6:	e432                	sd	a2,8(sp)
    8000ead8:	e82e                	sd	a1,16(sp)
    8000eada:	ec2a                	sd	a0,24(sp)
    8000eadc:	f82e                	sd	a1,48(sp)
    8000eade:	fc32                	sd	a2,56(sp)
            Some(val) => val,
    8000eae0:	6108                	ld	a0,0(a0)
    8000eae2:	4581                	li	a1,0
    8000eae4:	00b50463          	beq	a0,a1,8000eaec <_ZN4core6option15Option$LT$T$GT$6expect17h91dc8b235b72ffe4E+0x1a>
    8000eae8:	a009                	j	8000eaea <_ZN4core6option15Option$LT$T$GT$6expect17h91dc8b235b72ffe4E+0x18>
    8000eaea:	a811                	j	8000eafe <_ZN4core6option15Option$LT$T$GT$6expect17h91dc8b235b72ffe4E+0x2c>
            None => expect_failed(msg),
    8000eaec:	6602                	ld	a2,0(sp)
    8000eaee:	65a2                	ld	a1,8(sp)
    8000eaf0:	6542                	ld	a0,16(sp)
    8000eaf2:	00013097          	auipc	ra,0x13
    8000eaf6:	4ce080e7          	jalr	1230(ra) # 80021fc0 <_ZN4core6option13expect_failed17h0edd1e4bb5304a50E>
    8000eafa:	0000                	unimp
        match self {
    8000eafc:	0000                	unimp
            Some(val) => val,
    8000eafe:	6562                	ld	a0,24(sp)
    8000eb00:	690c                	ld	a1,16(a0)
    8000eb02:	f42e                	sd	a1,40(sp)
    8000eb04:	6508                	ld	a0,8(a0)
    8000eb06:	f02a                	sd	a0,32(sp)
    }
    8000eb08:	6121                	addi	sp,sp,64
    8000eb0a:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$6unwrap17h1e3cd39cfed0614fE:

000000008000eb0c <_ZN4core6option15Option$LT$T$GT$6unwrap17h1e3cd39cfed0614fE>:
    pub const fn unwrap(self) -> T {
    8000eb0c:	1101                	addi	sp,sp,-32
    8000eb0e:	e032                	sd	a2,0(sp)
    8000eb10:	e42a                	sd	a0,8(sp)
    8000eb12:	e82e                	sd	a1,16(sp)
    8000eb14:	4581                	li	a1,0
            Some(val) => val,
    8000eb16:	00b50463          	beq	a0,a1,8000eb1e <_ZN4core6option15Option$LT$T$GT$6unwrap17h1e3cd39cfed0614fE+0x12>
    8000eb1a:	a009                	j	8000eb1c <_ZN4core6option15Option$LT$T$GT$6unwrap17h1e3cd39cfed0614fE+0x10>
    8000eb1c:	a831                	j	8000eb38 <.LBB31_5+0x18>
            None => panic!("called `Option::unwrap()` on a `None` value"),
    8000eb1e:	6602                	ld	a2,0(sp)

000000008000eb20 <.LBB31_5>:
    8000eb20:	0001a517          	auipc	a0,0x1a
    8000eb24:	91150513          	addi	a0,a0,-1775 # 80028431 <.L__unnamed_1>
    8000eb28:	02b00593          	li	a1,43
    8000eb2c:	00013097          	auipc	ra,0x13
    8000eb30:	5d0080e7          	jalr	1488(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8000eb34:	0000                	unimp
        match self {
    8000eb36:	0000                	unimp
            Some(val) => val,
    8000eb38:	6542                	ld	a0,16(sp)
    8000eb3a:	ec2a                	sd	a0,24(sp)
    }
    8000eb3c:	6105                	addi	sp,sp,32
    8000eb3e:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$6unwrap17h2b22556a60663957E:

000000008000eb40 <_ZN4core6option15Option$LT$T$GT$6unwrap17h2b22556a60663957E>:
    pub const fn unwrap(self) -> T {
    8000eb40:	1101                	addi	sp,sp,-32
    8000eb42:	e42e                	sd	a1,8(sp)
    8000eb44:	e82a                	sd	a0,16(sp)
            Some(val) => val,
    8000eb46:	00a035b3          	snez	a1,a0
    8000eb4a:	4581                	li	a1,0
    8000eb4c:	00b50463          	beq	a0,a1,8000eb54 <_ZN4core6option15Option$LT$T$GT$6unwrap17h2b22556a60663957E+0x14>
    8000eb50:	a009                	j	8000eb52 <_ZN4core6option15Option$LT$T$GT$6unwrap17h2b22556a60663957E+0x12>
    8000eb52:	a831                	j	8000eb6e <.LBB32_5+0x18>
            None => panic!("called `Option::unwrap()` on a `None` value"),
    8000eb54:	6622                	ld	a2,8(sp)

000000008000eb56 <.LBB32_5>:
    8000eb56:	0001a517          	auipc	a0,0x1a
    8000eb5a:	8db50513          	addi	a0,a0,-1829 # 80028431 <.L__unnamed_1>
    8000eb5e:	02b00593          	li	a1,43
    8000eb62:	00013097          	auipc	ra,0x13
    8000eb66:	59a080e7          	jalr	1434(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8000eb6a:	0000                	unimp
        match self {
    8000eb6c:	0000                	unimp
            Some(val) => val,
    8000eb6e:	6542                	ld	a0,16(sp)
    8000eb70:	ec2a                	sd	a0,24(sp)
    }
    8000eb72:	6105                	addi	sp,sp,32
    8000eb74:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$6unwrap17h2ef2c85febc29d20E:

000000008000eb76 <_ZN4core6option15Option$LT$T$GT$6unwrap17h2ef2c85febc29d20E>:
    pub const fn unwrap(self) -> T {
    8000eb76:	1101                	addi	sp,sp,-32
    8000eb78:	e42e                	sd	a1,8(sp)
    8000eb7a:	e82a                	sd	a0,16(sp)
            Some(val) => val,
    8000eb7c:	00a035b3          	snez	a1,a0
    8000eb80:	4581                	li	a1,0
    8000eb82:	00b50463          	beq	a0,a1,8000eb8a <_ZN4core6option15Option$LT$T$GT$6unwrap17h2ef2c85febc29d20E+0x14>
    8000eb86:	a009                	j	8000eb88 <_ZN4core6option15Option$LT$T$GT$6unwrap17h2ef2c85febc29d20E+0x12>
    8000eb88:	a831                	j	8000eba4 <.LBB33_5+0x18>
            None => panic!("called `Option::unwrap()` on a `None` value"),
    8000eb8a:	6622                	ld	a2,8(sp)

000000008000eb8c <.LBB33_5>:
    8000eb8c:	0001a517          	auipc	a0,0x1a
    8000eb90:	8a550513          	addi	a0,a0,-1883 # 80028431 <.L__unnamed_1>
    8000eb94:	02b00593          	li	a1,43
    8000eb98:	00013097          	auipc	ra,0x13
    8000eb9c:	564080e7          	jalr	1380(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8000eba0:	0000                	unimp
        match self {
    8000eba2:	0000                	unimp
            Some(val) => val,
    8000eba4:	6542                	ld	a0,16(sp)
    8000eba6:	ec2a                	sd	a0,24(sp)
    }
    8000eba8:	6105                	addi	sp,sp,32
    8000ebaa:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$6unwrap17h34586233d4d65f4cE:

000000008000ebac <_ZN4core6option15Option$LT$T$GT$6unwrap17h34586233d4d65f4cE>:
    pub const fn unwrap(self) -> T {
    8000ebac:	1101                	addi	sp,sp,-32
    8000ebae:	e42e                	sd	a1,8(sp)
    8000ebb0:	e82a                	sd	a0,16(sp)
            Some(val) => val,
    8000ebb2:	00a035b3          	snez	a1,a0
    8000ebb6:	4581                	li	a1,0
    8000ebb8:	00b50463          	beq	a0,a1,8000ebc0 <_ZN4core6option15Option$LT$T$GT$6unwrap17h34586233d4d65f4cE+0x14>
    8000ebbc:	a009                	j	8000ebbe <_ZN4core6option15Option$LT$T$GT$6unwrap17h34586233d4d65f4cE+0x12>
    8000ebbe:	a831                	j	8000ebda <.LBB34_5+0x18>
            None => panic!("called `Option::unwrap()` on a `None` value"),
    8000ebc0:	6622                	ld	a2,8(sp)

000000008000ebc2 <.LBB34_5>:
    8000ebc2:	0001a517          	auipc	a0,0x1a
    8000ebc6:	86f50513          	addi	a0,a0,-1937 # 80028431 <.L__unnamed_1>
    8000ebca:	02b00593          	li	a1,43
    8000ebce:	00013097          	auipc	ra,0x13
    8000ebd2:	52e080e7          	jalr	1326(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8000ebd6:	0000                	unimp
        match self {
    8000ebd8:	0000                	unimp
            Some(val) => val,
    8000ebda:	6542                	ld	a0,16(sp)
    8000ebdc:	ec2a                	sd	a0,24(sp)
    }
    8000ebde:	6105                	addi	sp,sp,32
    8000ebe0:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$6unwrap17h5e7c29d7de25e54aE:

000000008000ebe2 <_ZN4core6option15Option$LT$T$GT$6unwrap17h5e7c29d7de25e54aE>:
    pub const fn unwrap(self) -> T {
    8000ebe2:	1101                	addi	sp,sp,-32
    8000ebe4:	e42e                	sd	a1,8(sp)
    8000ebe6:	e82a                	sd	a0,16(sp)
            Some(val) => val,
    8000ebe8:	00a035b3          	snez	a1,a0
    8000ebec:	4581                	li	a1,0
    8000ebee:	00b50463          	beq	a0,a1,8000ebf6 <_ZN4core6option15Option$LT$T$GT$6unwrap17h5e7c29d7de25e54aE+0x14>
    8000ebf2:	a009                	j	8000ebf4 <_ZN4core6option15Option$LT$T$GT$6unwrap17h5e7c29d7de25e54aE+0x12>
    8000ebf4:	a831                	j	8000ec10 <.LBB35_5+0x18>
            None => panic!("called `Option::unwrap()` on a `None` value"),
    8000ebf6:	6622                	ld	a2,8(sp)

000000008000ebf8 <.LBB35_5>:
    8000ebf8:	0001a517          	auipc	a0,0x1a
    8000ebfc:	83950513          	addi	a0,a0,-1991 # 80028431 <.L__unnamed_1>
    8000ec00:	02b00593          	li	a1,43
    8000ec04:	00013097          	auipc	ra,0x13
    8000ec08:	4f8080e7          	jalr	1272(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8000ec0c:	0000                	unimp
        match self {
    8000ec0e:	0000                	unimp
            Some(val) => val,
    8000ec10:	6542                	ld	a0,16(sp)
    8000ec12:	ec2a                	sd	a0,24(sp)
    }
    8000ec14:	6105                	addi	sp,sp,32
    8000ec16:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$6unwrap17h5fcd4b8dbd5a2f47E:

000000008000ec18 <_ZN4core6option15Option$LT$T$GT$6unwrap17h5fcd4b8dbd5a2f47E>:
    pub const fn unwrap(self) -> T {
    8000ec18:	1101                	addi	sp,sp,-32
    8000ec1a:	e02e                	sd	a1,0(sp)
    8000ec1c:	e42a                	sd	a0,8(sp)
            Some(val) => val,
    8000ec1e:	6108                	ld	a0,0(a0)
    8000ec20:	4581                	li	a1,0
    8000ec22:	00b50463          	beq	a0,a1,8000ec2a <_ZN4core6option15Option$LT$T$GT$6unwrap17h5fcd4b8dbd5a2f47E+0x12>
    8000ec26:	a009                	j	8000ec28 <_ZN4core6option15Option$LT$T$GT$6unwrap17h5fcd4b8dbd5a2f47E+0x10>
    8000ec28:	a831                	j	8000ec44 <.LBB36_5+0x18>
            None => panic!("called `Option::unwrap()` on a `None` value"),
    8000ec2a:	6602                	ld	a2,0(sp)

000000008000ec2c <.LBB36_5>:
    8000ec2c:	0001a517          	auipc	a0,0x1a
    8000ec30:	80550513          	addi	a0,a0,-2043 # 80028431 <.L__unnamed_1>
    8000ec34:	02b00593          	li	a1,43
    8000ec38:	00013097          	auipc	ra,0x13
    8000ec3c:	4c4080e7          	jalr	1220(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8000ec40:	0000                	unimp
        match self {
    8000ec42:	0000                	unimp
            Some(val) => val,
    8000ec44:	6522                	ld	a0,8(sp)
    8000ec46:	690c                	ld	a1,16(a0)
    8000ec48:	ec2e                	sd	a1,24(sp)
    8000ec4a:	6508                	ld	a0,8(a0)
    8000ec4c:	e82a                	sd	a0,16(sp)
    }
    8000ec4e:	6105                	addi	sp,sp,32
    8000ec50:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$6unwrap17h70b9b96f373d4183E:

000000008000ec52 <_ZN4core6option15Option$LT$T$GT$6unwrap17h70b9b96f373d4183E>:
    pub const fn unwrap(self) -> T {
    8000ec52:	1101                	addi	sp,sp,-32
    8000ec54:	e032                	sd	a2,0(sp)
    8000ec56:	e42a                	sd	a0,8(sp)
    8000ec58:	e82e                	sd	a1,16(sp)
    8000ec5a:	4581                	li	a1,0
            Some(val) => val,
    8000ec5c:	00b50463          	beq	a0,a1,8000ec64 <_ZN4core6option15Option$LT$T$GT$6unwrap17h70b9b96f373d4183E+0x12>
    8000ec60:	a009                	j	8000ec62 <_ZN4core6option15Option$LT$T$GT$6unwrap17h70b9b96f373d4183E+0x10>
    8000ec62:	a831                	j	8000ec7e <.LBB37_5+0x18>
            None => panic!("called `Option::unwrap()` on a `None` value"),
    8000ec64:	6602                	ld	a2,0(sp)

000000008000ec66 <.LBB37_5>:
    8000ec66:	00019517          	auipc	a0,0x19
    8000ec6a:	7cb50513          	addi	a0,a0,1995 # 80028431 <.L__unnamed_1>
    8000ec6e:	02b00593          	li	a1,43
    8000ec72:	00013097          	auipc	ra,0x13
    8000ec76:	48a080e7          	jalr	1162(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8000ec7a:	0000                	unimp
        match self {
    8000ec7c:	0000                	unimp
            Some(val) => val,
    8000ec7e:	6542                	ld	a0,16(sp)
    8000ec80:	ec2a                	sd	a0,24(sp)
    }
    8000ec82:	6105                	addi	sp,sp,32
    8000ec84:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$6unwrap17h715ab0e996921161E:

000000008000ec86 <_ZN4core6option15Option$LT$T$GT$6unwrap17h715ab0e996921161E>:
    pub const fn unwrap(self) -> T {
    8000ec86:	1101                	addi	sp,sp,-32
    8000ec88:	e42e                	sd	a1,8(sp)
    8000ec8a:	e82a                	sd	a0,16(sp)
            Some(val) => val,
    8000ec8c:	00a035b3          	snez	a1,a0
    8000ec90:	4581                	li	a1,0
    8000ec92:	00b50463          	beq	a0,a1,8000ec9a <_ZN4core6option15Option$LT$T$GT$6unwrap17h715ab0e996921161E+0x14>
    8000ec96:	a009                	j	8000ec98 <_ZN4core6option15Option$LT$T$GT$6unwrap17h715ab0e996921161E+0x12>
    8000ec98:	a831                	j	8000ecb4 <.LBB38_5+0x18>
            None => panic!("called `Option::unwrap()` on a `None` value"),
    8000ec9a:	6622                	ld	a2,8(sp)

000000008000ec9c <.LBB38_5>:
    8000ec9c:	00019517          	auipc	a0,0x19
    8000eca0:	79550513          	addi	a0,a0,1941 # 80028431 <.L__unnamed_1>
    8000eca4:	02b00593          	li	a1,43
    8000eca8:	00013097          	auipc	ra,0x13
    8000ecac:	454080e7          	jalr	1108(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8000ecb0:	0000                	unimp
        match self {
    8000ecb2:	0000                	unimp
            Some(val) => val,
    8000ecb4:	6542                	ld	a0,16(sp)
    8000ecb6:	ec2a                	sd	a0,24(sp)
    }
    8000ecb8:	6105                	addi	sp,sp,32
    8000ecba:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$6unwrap17h81f0c84c54a80648E:

000000008000ecbc <_ZN4core6option15Option$LT$T$GT$6unwrap17h81f0c84c54a80648E>:
    pub const fn unwrap(self) -> T {
    8000ecbc:	1101                	addi	sp,sp,-32
    8000ecbe:	e42e                	sd	a1,8(sp)
    8000ecc0:	e82a                	sd	a0,16(sp)
            Some(val) => val,
    8000ecc2:	00a035b3          	snez	a1,a0
    8000ecc6:	4581                	li	a1,0
    8000ecc8:	00b50463          	beq	a0,a1,8000ecd0 <_ZN4core6option15Option$LT$T$GT$6unwrap17h81f0c84c54a80648E+0x14>
    8000eccc:	a009                	j	8000ecce <_ZN4core6option15Option$LT$T$GT$6unwrap17h81f0c84c54a80648E+0x12>
    8000ecce:	a831                	j	8000ecea <.LBB39_5+0x18>
            None => panic!("called `Option::unwrap()` on a `None` value"),
    8000ecd0:	6622                	ld	a2,8(sp)

000000008000ecd2 <.LBB39_5>:
    8000ecd2:	00019517          	auipc	a0,0x19
    8000ecd6:	75f50513          	addi	a0,a0,1887 # 80028431 <.L__unnamed_1>
    8000ecda:	02b00593          	li	a1,43
    8000ecde:	00013097          	auipc	ra,0x13
    8000ece2:	41e080e7          	jalr	1054(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8000ece6:	0000                	unimp
        match self {
    8000ece8:	0000                	unimp
            Some(val) => val,
    8000ecea:	6542                	ld	a0,16(sp)
    8000ecec:	ec2a                	sd	a0,24(sp)
    }
    8000ecee:	6105                	addi	sp,sp,32
    8000ecf0:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$6unwrap17h84dba6f31c77e511E:

000000008000ecf2 <_ZN4core6option15Option$LT$T$GT$6unwrap17h84dba6f31c77e511E>:
    pub const fn unwrap(self) -> T {
    8000ecf2:	1101                	addi	sp,sp,-32
    8000ecf4:	e42e                	sd	a1,8(sp)
    8000ecf6:	e82a                	sd	a0,16(sp)
            Some(val) => val,
    8000ecf8:	00a035b3          	snez	a1,a0
    8000ecfc:	4581                	li	a1,0
    8000ecfe:	00b50463          	beq	a0,a1,8000ed06 <_ZN4core6option15Option$LT$T$GT$6unwrap17h84dba6f31c77e511E+0x14>
    8000ed02:	a009                	j	8000ed04 <_ZN4core6option15Option$LT$T$GT$6unwrap17h84dba6f31c77e511E+0x12>
    8000ed04:	a831                	j	8000ed20 <.LBB40_5+0x18>
            None => panic!("called `Option::unwrap()` on a `None` value"),
    8000ed06:	6622                	ld	a2,8(sp)

000000008000ed08 <.LBB40_5>:
    8000ed08:	00019517          	auipc	a0,0x19
    8000ed0c:	72950513          	addi	a0,a0,1833 # 80028431 <.L__unnamed_1>
    8000ed10:	02b00593          	li	a1,43
    8000ed14:	00013097          	auipc	ra,0x13
    8000ed18:	3e8080e7          	jalr	1000(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8000ed1c:	0000                	unimp
        match self {
    8000ed1e:	0000                	unimp
            Some(val) => val,
    8000ed20:	6542                	ld	a0,16(sp)
    8000ed22:	ec2a                	sd	a0,24(sp)
    }
    8000ed24:	6105                	addi	sp,sp,32
    8000ed26:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$6unwrap17h8e9f6f5582436d22E:

000000008000ed28 <_ZN4core6option15Option$LT$T$GT$6unwrap17h8e9f6f5582436d22E>:
    pub const fn unwrap(self) -> T {
    8000ed28:	1101                	addi	sp,sp,-32
    8000ed2a:	e42e                	sd	a1,8(sp)
    8000ed2c:	e82a                	sd	a0,16(sp)
            Some(val) => val,
    8000ed2e:	00a035b3          	snez	a1,a0
    8000ed32:	4581                	li	a1,0
    8000ed34:	00b50463          	beq	a0,a1,8000ed3c <_ZN4core6option15Option$LT$T$GT$6unwrap17h8e9f6f5582436d22E+0x14>
    8000ed38:	a009                	j	8000ed3a <_ZN4core6option15Option$LT$T$GT$6unwrap17h8e9f6f5582436d22E+0x12>
    8000ed3a:	a831                	j	8000ed56 <.LBB41_5+0x18>
            None => panic!("called `Option::unwrap()` on a `None` value"),
    8000ed3c:	6622                	ld	a2,8(sp)

000000008000ed3e <.LBB41_5>:
    8000ed3e:	00019517          	auipc	a0,0x19
    8000ed42:	6f350513          	addi	a0,a0,1779 # 80028431 <.L__unnamed_1>
    8000ed46:	02b00593          	li	a1,43
    8000ed4a:	00013097          	auipc	ra,0x13
    8000ed4e:	3b2080e7          	jalr	946(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8000ed52:	0000                	unimp
        match self {
    8000ed54:	0000                	unimp
            Some(val) => val,
    8000ed56:	6542                	ld	a0,16(sp)
    8000ed58:	ec2a                	sd	a0,24(sp)
    }
    8000ed5a:	6105                	addi	sp,sp,32
    8000ed5c:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$6unwrap17h97667cf20f9698d4E:

000000008000ed5e <_ZN4core6option15Option$LT$T$GT$6unwrap17h97667cf20f9698d4E>:
    pub const fn unwrap(self) -> T {
    8000ed5e:	1101                	addi	sp,sp,-32
    8000ed60:	e42e                	sd	a1,8(sp)
    8000ed62:	e82a                	sd	a0,16(sp)
            Some(val) => val,
    8000ed64:	00a035b3          	snez	a1,a0
    8000ed68:	4581                	li	a1,0
    8000ed6a:	00b50463          	beq	a0,a1,8000ed72 <_ZN4core6option15Option$LT$T$GT$6unwrap17h97667cf20f9698d4E+0x14>
    8000ed6e:	a009                	j	8000ed70 <_ZN4core6option15Option$LT$T$GT$6unwrap17h97667cf20f9698d4E+0x12>
    8000ed70:	a831                	j	8000ed8c <.LBB42_5+0x18>
            None => panic!("called `Option::unwrap()` on a `None` value"),
    8000ed72:	6622                	ld	a2,8(sp)

000000008000ed74 <.LBB42_5>:
    8000ed74:	00019517          	auipc	a0,0x19
    8000ed78:	6bd50513          	addi	a0,a0,1725 # 80028431 <.L__unnamed_1>
    8000ed7c:	02b00593          	li	a1,43
    8000ed80:	00013097          	auipc	ra,0x13
    8000ed84:	37c080e7          	jalr	892(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8000ed88:	0000                	unimp
        match self {
    8000ed8a:	0000                	unimp
            Some(val) => val,
    8000ed8c:	6542                	ld	a0,16(sp)
    8000ed8e:	ec2a                	sd	a0,24(sp)
    }
    8000ed90:	6105                	addi	sp,sp,32
    8000ed92:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$6unwrap17hc367d03244a4b027E:

000000008000ed94 <_ZN4core6option15Option$LT$T$GT$6unwrap17hc367d03244a4b027E>:
    pub const fn unwrap(self) -> T {
    8000ed94:	1101                	addi	sp,sp,-32
    8000ed96:	e42e                	sd	a1,8(sp)
    8000ed98:	e82a                	sd	a0,16(sp)
            Some(val) => val,
    8000ed9a:	00a035b3          	snez	a1,a0
    8000ed9e:	4581                	li	a1,0
    8000eda0:	00b50463          	beq	a0,a1,8000eda8 <_ZN4core6option15Option$LT$T$GT$6unwrap17hc367d03244a4b027E+0x14>
    8000eda4:	a009                	j	8000eda6 <_ZN4core6option15Option$LT$T$GT$6unwrap17hc367d03244a4b027E+0x12>
    8000eda6:	a831                	j	8000edc2 <.LBB43_5+0x18>
            None => panic!("called `Option::unwrap()` on a `None` value"),
    8000eda8:	6622                	ld	a2,8(sp)

000000008000edaa <.LBB43_5>:
    8000edaa:	00019517          	auipc	a0,0x19
    8000edae:	68750513          	addi	a0,a0,1671 # 80028431 <.L__unnamed_1>
    8000edb2:	02b00593          	li	a1,43
    8000edb6:	00013097          	auipc	ra,0x13
    8000edba:	346080e7          	jalr	838(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8000edbe:	0000                	unimp
        match self {
    8000edc0:	0000                	unimp
            Some(val) => val,
    8000edc2:	6542                	ld	a0,16(sp)
    8000edc4:	ec2a                	sd	a0,24(sp)
    }
    8000edc6:	6105                	addi	sp,sp,32
    8000edc8:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$6unwrap17hcaa2b543d69df090E:

000000008000edca <_ZN4core6option15Option$LT$T$GT$6unwrap17hcaa2b543d69df090E>:
    pub const fn unwrap(self) -> T {
    8000edca:	1101                	addi	sp,sp,-32
    8000edcc:	e42e                	sd	a1,8(sp)
    8000edce:	e82a                	sd	a0,16(sp)
            Some(val) => val,
    8000edd0:	00a035b3          	snez	a1,a0
    8000edd4:	4581                	li	a1,0
    8000edd6:	00b50463          	beq	a0,a1,8000edde <_ZN4core6option15Option$LT$T$GT$6unwrap17hcaa2b543d69df090E+0x14>
    8000edda:	a009                	j	8000eddc <_ZN4core6option15Option$LT$T$GT$6unwrap17hcaa2b543d69df090E+0x12>
    8000eddc:	a831                	j	8000edf8 <.LBB44_5+0x18>
            None => panic!("called `Option::unwrap()` on a `None` value"),
    8000edde:	6622                	ld	a2,8(sp)

000000008000ede0 <.LBB44_5>:
    8000ede0:	00019517          	auipc	a0,0x19
    8000ede4:	65150513          	addi	a0,a0,1617 # 80028431 <.L__unnamed_1>
    8000ede8:	02b00593          	li	a1,43
    8000edec:	00013097          	auipc	ra,0x13
    8000edf0:	310080e7          	jalr	784(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8000edf4:	0000                	unimp
        match self {
    8000edf6:	0000                	unimp
            Some(val) => val,
    8000edf8:	6542                	ld	a0,16(sp)
    8000edfa:	ec2a                	sd	a0,24(sp)
    }
    8000edfc:	6105                	addi	sp,sp,32
    8000edfe:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$6unwrap17he97e68f5d459b5f2E:

000000008000ee00 <_ZN4core6option15Option$LT$T$GT$6unwrap17he97e68f5d459b5f2E>:
    pub const fn unwrap(self) -> T {
    8000ee00:	1101                	addi	sp,sp,-32
    8000ee02:	e032                	sd	a2,0(sp)
    8000ee04:	e42a                	sd	a0,8(sp)
    8000ee06:	e82e                	sd	a1,16(sp)
    8000ee08:	4581                	li	a1,0
            Some(val) => val,
    8000ee0a:	00b50463          	beq	a0,a1,8000ee12 <_ZN4core6option15Option$LT$T$GT$6unwrap17he97e68f5d459b5f2E+0x12>
    8000ee0e:	a009                	j	8000ee10 <_ZN4core6option15Option$LT$T$GT$6unwrap17he97e68f5d459b5f2E+0x10>
    8000ee10:	a831                	j	8000ee2c <.LBB45_5+0x18>
            None => panic!("called `Option::unwrap()` on a `None` value"),
    8000ee12:	6602                	ld	a2,0(sp)

000000008000ee14 <.LBB45_5>:
    8000ee14:	00019517          	auipc	a0,0x19
    8000ee18:	61d50513          	addi	a0,a0,1565 # 80028431 <.L__unnamed_1>
    8000ee1c:	02b00593          	li	a1,43
    8000ee20:	00013097          	auipc	ra,0x13
    8000ee24:	2dc080e7          	jalr	732(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8000ee28:	0000                	unimp
        match self {
    8000ee2a:	0000                	unimp
            Some(val) => val,
    8000ee2c:	6542                	ld	a0,16(sp)
    8000ee2e:	ec2a                	sd	a0,24(sp)
    }
    8000ee30:	6105                	addi	sp,sp,32
    8000ee32:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$6unwrap17heec1a84bcf97bc0fE:

000000008000ee34 <_ZN4core6option15Option$LT$T$GT$6unwrap17heec1a84bcf97bc0fE>:
    pub const fn unwrap(self) -> T {
    8000ee34:	1101                	addi	sp,sp,-32
    8000ee36:	e42e                	sd	a1,8(sp)
    8000ee38:	e82a                	sd	a0,16(sp)
            Some(val) => val,
    8000ee3a:	00a035b3          	snez	a1,a0
    8000ee3e:	4581                	li	a1,0
    8000ee40:	00b50463          	beq	a0,a1,8000ee48 <_ZN4core6option15Option$LT$T$GT$6unwrap17heec1a84bcf97bc0fE+0x14>
    8000ee44:	a009                	j	8000ee46 <_ZN4core6option15Option$LT$T$GT$6unwrap17heec1a84bcf97bc0fE+0x12>
    8000ee46:	a831                	j	8000ee62 <.LBB46_5+0x18>
            None => panic!("called `Option::unwrap()` on a `None` value"),
    8000ee48:	6622                	ld	a2,8(sp)

000000008000ee4a <.LBB46_5>:
    8000ee4a:	00019517          	auipc	a0,0x19
    8000ee4e:	5e750513          	addi	a0,a0,1511 # 80028431 <.L__unnamed_1>
    8000ee52:	02b00593          	li	a1,43
    8000ee56:	00013097          	auipc	ra,0x13
    8000ee5a:	2a6080e7          	jalr	678(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8000ee5e:	0000                	unimp
        match self {
    8000ee60:	0000                	unimp
            Some(val) => val,
    8000ee62:	6542                	ld	a0,16(sp)
    8000ee64:	ec2a                	sd	a0,24(sp)
    }
    8000ee66:	6105                	addi	sp,sp,32
    8000ee68:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$7is_none17h62fa14fb8476dac2E:

000000008000ee6a <_ZN4core6option15Option$LT$T$GT$7is_none17h62fa14fb8476dac2E>:
    pub const fn is_none(&self) -> bool {
    8000ee6a:	1101                	addi	sp,sp,-32
    8000ee6c:	ec06                	sd	ra,24(sp)
    8000ee6e:	e82a                	sd	a0,16(sp)
        !self.is_some()
    8000ee70:	00000097          	auipc	ra,0x0
    8000ee74:	054080e7          	jalr	84(ra) # 8000eec4 <_ZN4core6option15Option$LT$T$GT$7is_some17h8c78d3bc0733b234E>
    8000ee78:	e42a                	sd	a0,8(sp)
    8000ee7a:	a009                	j	8000ee7c <_ZN4core6option15Option$LT$T$GT$7is_none17h62fa14fb8476dac2E+0x12>
    8000ee7c:	6522                	ld	a0,8(sp)
    8000ee7e:	00154513          	xori	a0,a0,1
    }
    8000ee82:	60e2                	ld	ra,24(sp)
    8000ee84:	6105                	addi	sp,sp,32
    8000ee86:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$7is_none17h8590a3c5c2d3d42aE:

000000008000ee88 <_ZN4core6option15Option$LT$T$GT$7is_none17h8590a3c5c2d3d42aE>:
    pub const fn is_none(&self) -> bool {
    8000ee88:	1101                	addi	sp,sp,-32
    8000ee8a:	ec06                	sd	ra,24(sp)
    8000ee8c:	e82a                	sd	a0,16(sp)
        !self.is_some()
    8000ee8e:	00000097          	auipc	ra,0x0
    8000ee92:	0a8080e7          	jalr	168(ra) # 8000ef36 <_ZN4core6option15Option$LT$T$GT$7is_some17hd48c331b6466f73fE>
    8000ee96:	e42a                	sd	a0,8(sp)
    8000ee98:	a009                	j	8000ee9a <_ZN4core6option15Option$LT$T$GT$7is_none17h8590a3c5c2d3d42aE+0x12>
    8000ee9a:	6522                	ld	a0,8(sp)
    8000ee9c:	00154513          	xori	a0,a0,1
    }
    8000eea0:	60e2                	ld	ra,24(sp)
    8000eea2:	6105                	addi	sp,sp,32
    8000eea4:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$7is_none17hbfc07de6cbdc4f1cE:

000000008000eea6 <_ZN4core6option15Option$LT$T$GT$7is_none17hbfc07de6cbdc4f1cE>:
    pub const fn is_none(&self) -> bool {
    8000eea6:	1101                	addi	sp,sp,-32
    8000eea8:	ec06                	sd	ra,24(sp)
    8000eeaa:	e82a                	sd	a0,16(sp)
        !self.is_some()
    8000eeac:	00000097          	auipc	ra,0x0
    8000eeb0:	064080e7          	jalr	100(ra) # 8000ef10 <_ZN4core6option15Option$LT$T$GT$7is_some17hac194dcf43ce65a0E>
    8000eeb4:	e42a                	sd	a0,8(sp)
    8000eeb6:	a009                	j	8000eeb8 <_ZN4core6option15Option$LT$T$GT$7is_none17hbfc07de6cbdc4f1cE+0x12>
    8000eeb8:	6522                	ld	a0,8(sp)
    8000eeba:	00154513          	xori	a0,a0,1
    }
    8000eebe:	60e2                	ld	ra,24(sp)
    8000eec0:	6105                	addi	sp,sp,32
    8000eec2:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$7is_some17h8c78d3bc0733b234E:

000000008000eec4 <_ZN4core6option15Option$LT$T$GT$7is_some17h8c78d3bc0733b234E>:
    pub const fn is_some(&self) -> bool {
    8000eec4:	1141                	addi	sp,sp,-16
    8000eec6:	e42a                	sd	a0,8(sp)
        matches!(*self, Some(_))
    8000eec8:	6108                	ld	a0,0(a0)
    8000eeca:	4581                	li	a1,0
    8000eecc:	00b51763          	bne	a0,a1,8000eeda <_ZN4core6option15Option$LT$T$GT$7is_some17h8c78d3bc0733b234E+0x16>
    8000eed0:	a009                	j	8000eed2 <_ZN4core6option15Option$LT$T$GT$7is_some17h8c78d3bc0733b234E+0xe>
    8000eed2:	4501                	li	a0,0
    8000eed4:	00a103a3          	sb	a0,7(sp)
    8000eed8:	a029                	j	8000eee2 <_ZN4core6option15Option$LT$T$GT$7is_some17h8c78d3bc0733b234E+0x1e>
    8000eeda:	4505                	li	a0,1
    8000eedc:	00a103a3          	sb	a0,7(sp)
    8000eee0:	a009                	j	8000eee2 <_ZN4core6option15Option$LT$T$GT$7is_some17h8c78d3bc0733b234E+0x1e>
    }
    8000eee2:	00714503          	lbu	a0,7(sp)
    8000eee6:	0141                	addi	sp,sp,16
    8000eee8:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$7is_some17h901b9974d3eea8b8E:

000000008000eeea <_ZN4core6option15Option$LT$T$GT$7is_some17h901b9974d3eea8b8E>:
    pub const fn is_some(&self) -> bool {
    8000eeea:	1141                	addi	sp,sp,-16
    8000eeec:	e42a                	sd	a0,8(sp)
        matches!(*self, Some(_))
    8000eeee:	6108                	ld	a0,0(a0)
    8000eef0:	4581                	li	a1,0
    8000eef2:	00b51763          	bne	a0,a1,8000ef00 <_ZN4core6option15Option$LT$T$GT$7is_some17h901b9974d3eea8b8E+0x16>
    8000eef6:	a009                	j	8000eef8 <_ZN4core6option15Option$LT$T$GT$7is_some17h901b9974d3eea8b8E+0xe>
    8000eef8:	4501                	li	a0,0
    8000eefa:	00a103a3          	sb	a0,7(sp)
    8000eefe:	a029                	j	8000ef08 <_ZN4core6option15Option$LT$T$GT$7is_some17h901b9974d3eea8b8E+0x1e>
    8000ef00:	4505                	li	a0,1
    8000ef02:	00a103a3          	sb	a0,7(sp)
    8000ef06:	a009                	j	8000ef08 <_ZN4core6option15Option$LT$T$GT$7is_some17h901b9974d3eea8b8E+0x1e>
    }
    8000ef08:	00714503          	lbu	a0,7(sp)
    8000ef0c:	0141                	addi	sp,sp,16
    8000ef0e:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$7is_some17hac194dcf43ce65a0E:

000000008000ef10 <_ZN4core6option15Option$LT$T$GT$7is_some17hac194dcf43ce65a0E>:
    pub const fn is_some(&self) -> bool {
    8000ef10:	1141                	addi	sp,sp,-16
    8000ef12:	e42a                	sd	a0,8(sp)
        matches!(*self, Some(_))
    8000ef14:	6108                	ld	a0,0(a0)
    8000ef16:	4581                	li	a1,0
    8000ef18:	00b51763          	bne	a0,a1,8000ef26 <_ZN4core6option15Option$LT$T$GT$7is_some17hac194dcf43ce65a0E+0x16>
    8000ef1c:	a009                	j	8000ef1e <_ZN4core6option15Option$LT$T$GT$7is_some17hac194dcf43ce65a0E+0xe>
    8000ef1e:	4501                	li	a0,0
    8000ef20:	00a103a3          	sb	a0,7(sp)
    8000ef24:	a029                	j	8000ef2e <_ZN4core6option15Option$LT$T$GT$7is_some17hac194dcf43ce65a0E+0x1e>
    8000ef26:	4505                	li	a0,1
    8000ef28:	00a103a3          	sb	a0,7(sp)
    8000ef2c:	a009                	j	8000ef2e <_ZN4core6option15Option$LT$T$GT$7is_some17hac194dcf43ce65a0E+0x1e>
    }
    8000ef2e:	00714503          	lbu	a0,7(sp)
    8000ef32:	0141                	addi	sp,sp,16
    8000ef34:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$7is_some17hd48c331b6466f73fE:

000000008000ef36 <_ZN4core6option15Option$LT$T$GT$7is_some17hd48c331b6466f73fE>:
    pub const fn is_some(&self) -> bool {
    8000ef36:	1141                	addi	sp,sp,-16
    8000ef38:	e42a                	sd	a0,8(sp)
        matches!(*self, Some(_))
    8000ef3a:	6108                	ld	a0,0(a0)
    8000ef3c:	4581                	li	a1,0
    8000ef3e:	00b51763          	bne	a0,a1,8000ef4c <_ZN4core6option15Option$LT$T$GT$7is_some17hd48c331b6466f73fE+0x16>
    8000ef42:	a009                	j	8000ef44 <_ZN4core6option15Option$LT$T$GT$7is_some17hd48c331b6466f73fE+0xe>
    8000ef44:	4501                	li	a0,0
    8000ef46:	00a103a3          	sb	a0,7(sp)
    8000ef4a:	a029                	j	8000ef54 <_ZN4core6option15Option$LT$T$GT$7is_some17hd48c331b6466f73fE+0x1e>
    8000ef4c:	4505                	li	a0,1
    8000ef4e:	00a103a3          	sb	a0,7(sp)
    8000ef52:	a009                	j	8000ef54 <_ZN4core6option15Option$LT$T$GT$7is_some17hd48c331b6466f73fE+0x1e>
    }
    8000ef54:	00714503          	lbu	a0,7(sp)
    8000ef58:	0141                	addi	sp,sp,16
    8000ef5a:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$7replace17h3b8bd4435d2ae84bE:

000000008000ef5c <_ZN4core6option15Option$LT$T$GT$7replace17h3b8bd4435d2ae84bE>:
    /// assert_eq!(x, Some(3));
    /// assert_eq!(old, None);
    /// ```
    #[inline]
    #[stable(feature = "option_replace", since = "1.31.0")]
    pub fn replace(&mut self, value: T) -> Option<T> {
    8000ef5c:	711d                	addi	sp,sp,-96
    8000ef5e:	ec86                	sd	ra,88(sp)
    8000ef60:	e832                	sd	a2,16(sp)
    8000ef62:	ec36                	sd	a3,24(sp)
    8000ef64:	e032                	sd	a2,0(sp)
    8000ef66:	e436                	sd	a3,8(sp)
    8000ef68:	e8ae                	sd	a1,80(sp)
        mem::replace(self, Some(value))
    8000ef6a:	e0b2                	sd	a2,64(sp)
    8000ef6c:	e4b6                	sd	a3,72(sp)
    8000ef6e:	f832                	sd	a2,48(sp)
    8000ef70:	fc36                	sd	a3,56(sp)
    8000ef72:	4605                	li	a2,1
    8000ef74:	f432                	sd	a2,40(sp)
    8000ef76:	1030                	addi	a2,sp,40
    8000ef78:	0000e097          	auipc	ra,0xe
    8000ef7c:	1ec080e7          	jalr	492(ra) # 8001d164 <_ZN4core3mem7replace17hbc5a7f4d236ddb3dE>
    8000ef80:	a009                	j	8000ef82 <_ZN4core6option15Option$LT$T$GT$7replace17h3b8bd4435d2ae84bE+0x26>
    }
    8000ef82:	60e6                	ld	ra,88(sp)
    8000ef84:	6125                	addi	sp,sp,96
    8000ef86:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$7replace17hf852e6bb4a32ec9aE:

000000008000ef88 <_ZN4core6option15Option$LT$T$GT$7replace17hf852e6bb4a32ec9aE>:
    pub fn replace(&mut self, value: T) -> Option<T> {
    8000ef88:	7179                	addi	sp,sp,-48
    8000ef8a:	f406                	sd	ra,40(sp)
    8000ef8c:	ec2a                	sd	a0,24(sp)
    8000ef8e:	f02e                	sd	a1,32(sp)
        mem::replace(self, Some(value))
    8000ef90:	e82e                	sd	a1,16(sp)
    8000ef92:	0000e097          	auipc	ra,0xe
    8000ef96:	2ae080e7          	jalr	686(ra) # 8001d240 <_ZN4core3mem7replace17hfd1d9a060b66fcb5E>
    8000ef9a:	e42a                	sd	a0,8(sp)
    8000ef9c:	a009                	j	8000ef9e <_ZN4core6option15Option$LT$T$GT$7replace17hf852e6bb4a32ec9aE+0x16>
    }
    8000ef9e:	6522                	ld	a0,8(sp)
    8000efa0:	70a2                	ld	ra,40(sp)
    8000efa2:	6145                	addi	sp,sp,48
    8000efa4:	8082                	ret

Disassembly of section .text._ZN4core6option19Option$LT$$RF$T$GT$6copied17h53fb63a9bdc6d466E:

000000008000efa6 <_ZN4core6option19Option$LT$$RF$T$GT$6copied17h53fb63a9bdc6d466E>:
    /// assert_eq!(opt_x, Some(&12));
    /// let copied = opt_x.copied();
    /// assert_eq!(copied, Some(12));
    /// ```
    #[stable(feature = "copied", since = "1.35.0")]
    pub fn copied(self) -> Option<T> {
    8000efa6:	1101                	addi	sp,sp,-32
    8000efa8:	ec06                	sd	ra,24(sp)
    8000efaa:	e82a                	sd	a0,16(sp)
        self.map(|&t| t)
    8000efac:	fffff097          	auipc	ra,0xfffff
    8000efb0:	4ec080e7          	jalr	1260(ra) # 8000e498 <_ZN4core6option15Option$LT$T$GT$3map17ha9dd9632468a120eE>
    8000efb4:	e02a                	sd	a0,0(sp)
    8000efb6:	e42e                	sd	a1,8(sp)
    8000efb8:	a009                	j	8000efba <_ZN4core6option19Option$LT$$RF$T$GT$6copied17h53fb63a9bdc6d466E+0x14>
    }
    8000efba:	65a2                	ld	a1,8(sp)
    8000efbc:	6502                	ld	a0,0(sp)
    8000efbe:	8905                	andi	a0,a0,1
    8000efc0:	60e2                	ld	ra,24(sp)
    8000efc2:	6105                	addi	sp,sp,32
    8000efc4:	8082                	ret

Disassembly of section .text._ZN4core6option19Option$LT$$RF$T$GT$6copied28_$u7b$$u7b$closure$u7d$$u7d$17ha236d2efbe19b7e0E:

000000008000efc6 <_ZN4core6option19Option$LT$$RF$T$GT$6copied28_$u7b$$u7b$closure$u7d$$u7d$17ha236d2efbe19b7e0E>:
        self.map(|&t| t)
    8000efc6:	1101                	addi	sp,sp,-32
    8000efc8:	e82a                	sd	a0,16(sp)
    8000efca:	00050503          	lb	a0,0(a0)
    8000efce:	00a10fa3          	sb	a0,31(sp)
    8000efd2:	6105                	addi	sp,sp,32
    8000efd4:	8082                	ret

Disassembly of section .text._ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h8871efd663dd0baaE:

000000008000efd6 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h8871efd663dd0baaE>:
    fn from(t: T) -> T {
    8000efd6:	1141                	addi	sp,sp,-16
    }
    8000efd8:	0141                	addi	sp,sp,16
    8000efda:	8082                	ret

Disassembly of section .text._ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$10clone_from17hf5f00fe6cb298a0dE:

000000008000efdc <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$10clone_from17hf5f00fe6cb298a0dE>:
            None => None,
        }
    }

    #[inline]
    fn clone_from(&mut self, source: &Self) {
    8000efdc:	7159                	addi	sp,sp,-112
    8000efde:	f486                	sd	ra,104(sp)
    8000efe0:	fc2a                	sd	a0,56(sp)
    8000efe2:	e0ae                	sd	a1,64(sp)
        match (self, source) {
    8000efe4:	e82a                	sd	a0,16(sp)
    8000efe6:	ec2e                	sd	a1,24(sp)
            (Some(to), Some(from)) => to.clone_from(from),
    8000efe8:	6108                	ld	a0,0(a0)
    8000efea:	4581                	li	a1,0
    8000efec:	00b51e63          	bne	a0,a1,8000f008 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$10clone_from17hf5f00fe6cb298a0dE+0x2c>
    8000eff0:	a009                	j	8000eff2 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$10clone_from17hf5f00fe6cb298a0dE+0x16>
            (to, from) => *to = from.clone(),
    8000eff2:	6542                	ld	a0,16(sp)
    8000eff4:	e02a                	sd	a0,0(sp)
    8000eff6:	e4aa                	sd	a0,72(sp)
    8000eff8:	65e2                	ld	a1,24(sp)
    8000effa:	e8ae                	sd	a1,80(sp)
    8000effc:	1008                	addi	a0,sp,32
    8000effe:	00000097          	auipc	ra,0x0
    8000f002:	092080e7          	jalr	146(ra) # 8000f090 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h97a616a53917bc2aE>
    8000f006:	a01d                	j	8000f02c <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$10clone_from17hf5f00fe6cb298a0dE+0x50>
            (Some(to), Some(from)) => to.clone_from(from),
    8000f008:	6562                	ld	a0,24(sp)
    8000f00a:	6108                	ld	a0,0(a0)
    8000f00c:	4581                	li	a1,0
    8000f00e:	feb502e3          	beq	a0,a1,8000eff2 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$10clone_from17hf5f00fe6cb298a0dE+0x16>
    8000f012:	a009                	j	8000f014 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$10clone_from17hf5f00fe6cb298a0dE+0x38>
    8000f014:	6542                	ld	a0,16(sp)
    8000f016:	0521                	addi	a0,a0,8
    8000f018:	ecaa                	sd	a0,88(sp)
    8000f01a:	65e2                	ld	a1,24(sp)
    8000f01c:	05a1                	addi	a1,a1,8
    8000f01e:	f0ae                	sd	a1,96(sp)
    8000f020:	ffffa097          	auipc	ra,0xffffa
    8000f024:	af6080e7          	jalr	-1290(ra) # 80008b16 <_ZN4core5clone5Clone10clone_from17h4153b3cb0b8f3e29E>
    8000f028:	a009                	j	8000f02a <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$10clone_from17hf5f00fe6cb298a0dE+0x4e>
        match (self, source) {
    8000f02a:	a039                	j	8000f038 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$10clone_from17hf5f00fe6cb298a0dE+0x5c>
            (to, from) => *to = from.clone(),
    8000f02c:	6502                	ld	a0,0(sp)
    8000f02e:	ffff8097          	auipc	ra,0xffff8
    8000f032:	f76080e7          	jalr	-138(ra) # 80006fa4 <_ZN4core3ptr73drop_in_place$LT$core..option..Option$LT$kernel..fs..inode..Inode$GT$$GT$17h6a7b3b84406d6cdfE>
    8000f036:	a021                	j	8000f03e <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$10clone_from17hf5f00fe6cb298a0dE+0x62>
        }
    }
    8000f038:	70a6                	ld	ra,104(sp)
    8000f03a:	6165                	addi	sp,sp,112
    8000f03c:	8082                	ret
            (to, from) => *to = from.clone(),
    8000f03e:	6582                	ld	a1,0(sp)
    8000f040:	7542                	ld	a0,48(sp)
    8000f042:	e988                	sd	a0,16(a1)
    8000f044:	7522                	ld	a0,40(sp)
    8000f046:	e588                	sd	a0,8(a1)
    8000f048:	7502                	ld	a0,32(sp)
    8000f04a:	e188                	sd	a0,0(a1)
        match (self, source) {
    8000f04c:	b7f5                	j	8000f038 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$10clone_from17hf5f00fe6cb298a0dE+0x5c>

Disassembly of section .text._ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h192c01ff449d5bd3E:

000000008000f04e <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h192c01ff449d5bd3E>:
    fn clone(&self) -> Self {
    8000f04e:	7139                	addi	sp,sp,-64
    8000f050:	fc06                	sd	ra,56(sp)
    8000f052:	e82a                	sd	a0,16(sp)
    8000f054:	f42a                	sd	a0,40(sp)
            Some(x) => Some(x.clone()),
    8000f056:	6108                	ld	a0,0(a0)
    8000f058:	4581                	li	a1,0
    8000f05a:	00b50463          	beq	a0,a1,8000f062 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h192c01ff449d5bd3E+0x14>
    8000f05e:	a009                	j	8000f060 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h192c01ff449d5bd3E+0x12>
    8000f060:	a029                	j	8000f06a <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h192c01ff449d5bd3E+0x1c>
    8000f062:	4501                	li	a0,0
            None => None,
    8000f064:	ec2a                	sd	a0,24(sp)
        match self {
    8000f066:	a005                	j	8000f086 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h192c01ff449d5bd3E+0x38>
    8000f068:	0000                	unimp
            Some(x) => Some(x.clone()),
    8000f06a:	6542                	ld	a0,16(sp)
    8000f06c:	0521                	addi	a0,a0,8
    8000f06e:	f82a                	sd	a0,48(sp)
    8000f070:	0000e097          	auipc	ra,0xe
    8000f074:	5d4080e7          	jalr	1492(ra) # 8001d644 <_ZN4core5clone5impls62_$LT$impl$u20$core..clone..Clone$u20$for$u20$$BP$mut$u20$T$GT$5clone17hc067a5a882105a3dE>
    8000f078:	e42a                	sd	a0,8(sp)
    8000f07a:	a009                	j	8000f07c <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h192c01ff449d5bd3E+0x2e>
    8000f07c:	6522                	ld	a0,8(sp)
    8000f07e:	f02a                	sd	a0,32(sp)
    8000f080:	4505                	li	a0,1
    8000f082:	ec2a                	sd	a0,24(sp)
        match self {
    8000f084:	a009                	j	8000f086 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h192c01ff449d5bd3E+0x38>
    }
    8000f086:	6562                	ld	a0,24(sp)
    8000f088:	7582                	ld	a1,32(sp)
    8000f08a:	70e2                	ld	ra,56(sp)
    8000f08c:	6121                	addi	sp,sp,64
    8000f08e:	8082                	ret

Disassembly of section .text._ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h97a616a53917bc2aE:

000000008000f090 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h97a616a53917bc2aE>:
    fn clone(&self) -> Self {
    8000f090:	715d                	addi	sp,sp,-80
    8000f092:	e486                	sd	ra,72(sp)
    8000f094:	e02e                	sd	a1,0(sp)
    8000f096:	e42a                	sd	a0,8(sp)
    8000f098:	f02e                	sd	a1,32(sp)
            Some(x) => Some(x.clone()),
    8000f09a:	6188                	ld	a0,0(a1)
    8000f09c:	4581                	li	a1,0
    8000f09e:	00b50463          	beq	a0,a1,8000f0a6 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h97a616a53917bc2aE+0x16>
    8000f0a2:	a009                	j	8000f0a4 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h97a616a53917bc2aE+0x14>
    8000f0a4:	a031                	j	8000f0b0 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h97a616a53917bc2aE+0x20>
    8000f0a6:	65a2                	ld	a1,8(sp)
    8000f0a8:	4501                	li	a0,0
            None => None,
    8000f0aa:	e188                	sd	a0,0(a1)
        match self {
    8000f0ac:	a035                	j	8000f0d8 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h97a616a53917bc2aE+0x48>
    8000f0ae:	0000                	unimp
            Some(x) => Some(x.clone()),
    8000f0b0:	6502                	ld	a0,0(sp)
    8000f0b2:	0521                	addi	a0,a0,8
    8000f0b4:	f42a                	sd	a0,40(sp)
    8000f0b6:	0000c097          	auipc	ra,0xc
    8000f0ba:	c1e080e7          	jalr	-994(ra) # 8001acd4 <_ZN63_$LT$kernel..fs..inode..Inode$u20$as$u20$core..clone..Clone$GT$5clone17hdd0850fb54e2bc6cE>
    8000f0be:	f82a                	sd	a0,48(sp)
    8000f0c0:	fc2e                	sd	a1,56(sp)
    8000f0c2:	e82a                	sd	a0,16(sp)
    8000f0c4:	ec2e                	sd	a1,24(sp)
    8000f0c6:	a009                	j	8000f0c8 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h97a616a53917bc2aE+0x38>
    8000f0c8:	65a2                	ld	a1,8(sp)
    8000f0ca:	6562                	ld	a0,24(sp)
    8000f0cc:	e988                	sd	a0,16(a1)
    8000f0ce:	6542                	ld	a0,16(sp)
    8000f0d0:	e588                	sd	a0,8(a1)
    8000f0d2:	4505                	li	a0,1
    8000f0d4:	e188                	sd	a0,0(a1)
        match self {
    8000f0d6:	a009                	j	8000f0d8 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h97a616a53917bc2aE+0x48>
    }
    8000f0d8:	60a6                	ld	ra,72(sp)
    8000f0da:	6161                	addi	sp,sp,80
    8000f0dc:	8082                	ret

Disassembly of section .text._ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha5678c3a724a7a2fE:

000000008000f0de <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha5678c3a724a7a2fE>:
    fn clone(&self) -> Self {
    8000f0de:	7179                	addi	sp,sp,-48
    8000f0e0:	f406                	sd	ra,40(sp)
    8000f0e2:	e42a                	sd	a0,8(sp)
    8000f0e4:	ec2a                	sd	a0,24(sp)
            Some(x) => Some(x.clone()),
    8000f0e6:	6108                	ld	a0,0(a0)
    8000f0e8:	00a035b3          	snez	a1,a0
    8000f0ec:	4581                	li	a1,0
    8000f0ee:	00b50463          	beq	a0,a1,8000f0f6 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha5678c3a724a7a2fE+0x18>
    8000f0f2:	a009                	j	8000f0f4 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha5678c3a724a7a2fE+0x16>
    8000f0f4:	a029                	j	8000f0fe <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha5678c3a724a7a2fE+0x20>
    8000f0f6:	4501                	li	a0,0
            None => None,
    8000f0f8:	e82a                	sd	a0,16(sp)
        match self {
    8000f0fa:	a829                	j	8000f114 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha5678c3a724a7a2fE+0x36>
    8000f0fc:	0000                	unimp
            Some(x) => Some(x.clone()),
    8000f0fe:	6522                	ld	a0,8(sp)
    8000f100:	f02a                	sd	a0,32(sp)
    8000f102:	ffff3097          	auipc	ra,0xffff3
    8000f106:	474080e7          	jalr	1140(ra) # 80002576 <_ZN64_$LT$alloc..sync..Arc$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hd600a08a186c4518E>
    8000f10a:	e02a                	sd	a0,0(sp)
    8000f10c:	a009                	j	8000f10e <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha5678c3a724a7a2fE+0x30>
    8000f10e:	6502                	ld	a0,0(sp)
    8000f110:	e82a                	sd	a0,16(sp)
        match self {
    8000f112:	a009                	j	8000f114 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha5678c3a724a7a2fE+0x36>
    }
    8000f114:	6542                	ld	a0,16(sp)
    8000f116:	70a2                	ld	ra,40(sp)
    8000f118:	6145                	addi	sp,sp,48
    8000f11a:	8082                	ret

Disassembly of section .text._ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17he939c90bc3d2b0caE:

000000008000f11c <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17he939c90bc3d2b0caE>:
    fn clone(&self) -> Self {
    8000f11c:	7139                	addi	sp,sp,-64
    8000f11e:	fc06                	sd	ra,56(sp)
    8000f120:	e82a                	sd	a0,16(sp)
    8000f122:	f42a                	sd	a0,40(sp)
            Some(x) => Some(x.clone()),
    8000f124:	6108                	ld	a0,0(a0)
    8000f126:	4581                	li	a1,0
    8000f128:	00b50463          	beq	a0,a1,8000f130 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17he939c90bc3d2b0caE+0x14>
    8000f12c:	a009                	j	8000f12e <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17he939c90bc3d2b0caE+0x12>
    8000f12e:	a029                	j	8000f138 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17he939c90bc3d2b0caE+0x1c>
    8000f130:	4501                	li	a0,0
            None => None,
    8000f132:	ec2a                	sd	a0,24(sp)
        match self {
    8000f134:	a005                	j	8000f154 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17he939c90bc3d2b0caE+0x38>
    8000f136:	0000                	unimp
            Some(x) => Some(x.clone()),
    8000f138:	6542                	ld	a0,16(sp)
    8000f13a:	0521                	addi	a0,a0,8
    8000f13c:	f82a                	sd	a0,48(sp)
    8000f13e:	0000e097          	auipc	ra,0xe
    8000f142:	53e080e7          	jalr	1342(ra) # 8001d67c <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$usize$GT$5clone17h35e6cace0a4ed712E>
    8000f146:	e42a                	sd	a0,8(sp)
    8000f148:	a009                	j	8000f14a <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17he939c90bc3d2b0caE+0x2e>
    8000f14a:	6522                	ld	a0,8(sp)
    8000f14c:	f02a                	sd	a0,32(sp)
    8000f14e:	4505                	li	a0,1
    8000f150:	ec2a                	sd	a0,24(sp)
        match self {
    8000f152:	a009                	j	8000f154 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17he939c90bc3d2b0caE+0x38>
    }
    8000f154:	6562                	ld	a0,24(sp)
    8000f156:	7582                	ld	a1,32(sp)
    8000f158:	70e2                	ld	ra,56(sp)
    8000f15a:	6121                	addi	sp,sp,64
    8000f15c:	8082                	ret

Disassembly of section .text._ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h22f2f1fa04d4de26E:

000000008000f15e <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h22f2f1fa04d4de26E>:
    fn from_ok(v: T) -> Self {
        Some(v)
    }

    #[inline]
    fn from_error(_: NoneError) -> Self {
    8000f15e:	1101                	addi	sp,sp,-32
    8000f160:	4581                	li	a1,0
        None
    8000f162:	e82e                	sd	a1,16(sp)
    }
    8000f164:	6522                	ld	a0,8(sp)
    8000f166:	6105                	addi	sp,sp,32
    8000f168:	8082                	ret

Disassembly of section .text._ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h35e87322ea53eeb5E:

000000008000f16a <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h35e87322ea53eeb5E>:
    fn from_error(_: NoneError) -> Self {
    8000f16a:	1141                	addi	sp,sp,-16
    8000f16c:	4501                	li	a0,0
        None
    8000f16e:	c02a                	sw	a0,0(sp)
    }
    8000f170:	4592                	lw	a1,4(sp)
    8000f172:	0141                	addi	sp,sp,16
    8000f174:	8082                	ret

Disassembly of section .text._ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h90575ee4c84cb448E:

000000008000f176 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h90575ee4c84cb448E>:
    fn into_result(self) -> Result<T, NoneError> {
    8000f176:	1101                	addi	sp,sp,-32
    8000f178:	ec06                	sd	ra,24(sp)
    8000f17a:	e82a                	sd	a0,16(sp)
        self.ok_or(NoneError)
    8000f17c:	fffff097          	auipc	ra,0xfffff
    8000f180:	502080e7          	jalr	1282(ra) # 8000e67e <_ZN4core6option15Option$LT$T$GT$5ok_or17h53f933033be30818E>
    8000f184:	e42a                	sd	a0,8(sp)
    8000f186:	a009                	j	8000f188 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h90575ee4c84cb448E+0x12>
    }
    8000f188:	6522                	ld	a0,8(sp)
    8000f18a:	60e2                	ld	ra,24(sp)
    8000f18c:	6105                	addi	sp,sp,32
    8000f18e:	8082                	ret

Disassembly of section .text._ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hce0d66149b699885E:

000000008000f190 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hce0d66149b699885E>:
    fn into_result(self) -> Result<T, NoneError> {
    8000f190:	1101                	addi	sp,sp,-32
    8000f192:	ec06                	sd	ra,24(sp)
    8000f194:	e82a                	sd	a0,16(sp)
        self.ok_or(NoneError)
    8000f196:	fffff097          	auipc	ra,0xfffff
    8000f19a:	6f0080e7          	jalr	1776(ra) # 8000e886 <_ZN4core6option15Option$LT$T$GT$5ok_or17hfa0f5f38e365ca74E>
    8000f19e:	e42a                	sd	a0,8(sp)
    8000f1a0:	a009                	j	8000f1a2 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hce0d66149b699885E+0x12>
    }
    8000f1a2:	6522                	ld	a0,8(sp)
    8000f1a4:	60e2                	ld	ra,24(sp)
    8000f1a6:	6105                	addi	sp,sp,32
    8000f1a8:	8082                	ret

Disassembly of section .text._ZN72_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..default..Default$GT$7default17h216c24bc3f109328E:

000000008000f1aa <_ZN72_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..default..Default$GT$7default17h216c24bc3f109328E>:
    fn default() -> Option<T> {
    8000f1aa:	1141                	addi	sp,sp,-16
    8000f1ac:	4501                	li	a0,0
        None
    8000f1ae:	e02a                	sd	a0,0(sp)
    }
    8000f1b0:	65a2                	ld	a1,8(sp)
    8000f1b2:	0141                	addi	sp,sp,16
    8000f1b4:	8082                	ret

Disassembly of section .text._ZN72_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..default..Default$GT$7default17h459b0dfcf4f19fffE:

000000008000f1b6 <_ZN72_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..default..Default$GT$7default17h459b0dfcf4f19fffE>:
    fn default() -> Option<T> {
    8000f1b6:	1141                	addi	sp,sp,-16
    8000f1b8:	4501                	li	a0,0
        None
    8000f1ba:	e42a                	sd	a0,8(sp)
    }
    8000f1bc:	0141                	addi	sp,sp,16
    8000f1be:	8082                	ret

Disassembly of section .text._ZN72_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..default..Default$GT$7default17h9e7fcea49a91f0edE:

000000008000f1c0 <_ZN72_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..default..Default$GT$7default17h9e7fcea49a91f0edE>:
    fn default() -> Option<T> {
    8000f1c0:	1141                	addi	sp,sp,-16
    8000f1c2:	4501                	li	a0,0
        None
    8000f1c4:	e02a                	sd	a0,0(sp)
    }
    8000f1c6:	65a2                	ld	a1,8(sp)
    8000f1c8:	0141                	addi	sp,sp,16
    8000f1ca:	8082                	ret

Disassembly of section .text._ZN72_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..default..Default$GT$7default17hbc90300349db98aaE:

000000008000f1cc <_ZN72_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..default..Default$GT$7default17hbc90300349db98aaE>:
    fn default() -> Option<T> {
    8000f1cc:	1141                	addi	sp,sp,-16
    8000f1ce:	4501                	li	a0,0
        None
    8000f1d0:	e42a                	sd	a0,8(sp)
    }
    8000f1d2:	0141                	addi	sp,sp,16
    8000f1d4:	8082                	ret

Disassembly of section .text._ZN119_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$core..ptr..unique..Unique$LT$T$GT$$GT$$GT$4from17h163e90b2907f9865E:

000000008000f1d6 <_ZN119_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$core..ptr..unique..Unique$LT$T$GT$$GT$$GT$4from17h163e90b2907f9865E>:
}

#[unstable(feature = "ptr_internals", issue = "none")]
impl<T: ?Sized> From<Unique<T>> for NonNull<T> {
    #[inline]
    fn from(unique: Unique<T>) -> Self {
    8000f1d6:	1101                	addi	sp,sp,-32
    8000f1d8:	ec06                	sd	ra,24(sp)
    8000f1da:	e82a                	sd	a0,16(sp)
        // SAFETY: A Unique pointer cannot be null, so the conditions for
        // new_unchecked() are respected.
        unsafe { NonNull::new_unchecked(unique.as_ptr()) }
    8000f1dc:	ffffd097          	auipc	ra,0xffffd
    8000f1e0:	99a080e7          	jalr	-1638(ra) # 8000bb76 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17hc428d38b809aa8c2E>
    8000f1e4:	e42a                	sd	a0,8(sp)
    8000f1e6:	a009                	j	8000f1e8 <_ZN119_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$core..ptr..unique..Unique$LT$T$GT$$GT$$GT$4from17h163e90b2907f9865E+0x12>
    8000f1e8:	6522                	ld	a0,8(sp)
    8000f1ea:	00000097          	auipc	ra,0x0
    8000f1ee:	036080e7          	jalr	54(ra) # 8000f220 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h5ed8fa4a56812246E>
    8000f1f2:	e02a                	sd	a0,0(sp)
    8000f1f4:	a009                	j	8000f1f6 <_ZN119_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$core..ptr..unique..Unique$LT$T$GT$$GT$$GT$4from17h163e90b2907f9865E+0x20>
    }
    8000f1f6:	6502                	ld	a0,0(sp)
    8000f1f8:	60e2                	ld	ra,24(sp)
    8000f1fa:	6105                	addi	sp,sp,32
    8000f1fc:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h0fdb76b0b758b1a8E:

000000008000f1fe <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h0fdb76b0b758b1a8E>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
    8000f1fe:	1141                	addi	sp,sp,-16
    8000f200:	e42a                	sd	a0,8(sp)
        unsafe { NonNull { pointer: ptr as _ } }
    8000f202:	e02a                	sd	a0,0(sp)
    }
    8000f204:	0141                	addi	sp,sp,16
    8000f206:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h39caf58a5e84bcebE:

000000008000f208 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h39caf58a5e84bcebE>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
    8000f208:	1141                	addi	sp,sp,-16
    8000f20a:	e42a                	sd	a0,8(sp)
        unsafe { NonNull { pointer: ptr as _ } }
    8000f20c:	e02a                	sd	a0,0(sp)
    }
    8000f20e:	0141                	addi	sp,sp,16
    8000f210:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h590958fa24c9c418E:

000000008000f212 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h590958fa24c9c418E>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
    8000f212:	1101                	addi	sp,sp,-32
    8000f214:	e82a                	sd	a0,16(sp)
    8000f216:	ec2e                	sd	a1,24(sp)
        unsafe { NonNull { pointer: ptr as _ } }
    8000f218:	e02a                	sd	a0,0(sp)
    8000f21a:	e42e                	sd	a1,8(sp)
    }
    8000f21c:	6105                	addi	sp,sp,32
    8000f21e:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h5ed8fa4a56812246E:

000000008000f220 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h5ed8fa4a56812246E>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
    8000f220:	1141                	addi	sp,sp,-16
    8000f222:	e42a                	sd	a0,8(sp)
        unsafe { NonNull { pointer: ptr as _ } }
    8000f224:	e02a                	sd	a0,0(sp)
    }
    8000f226:	0141                	addi	sp,sp,16
    8000f228:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h8c61f83afe42e5a2E:

000000008000f22a <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h8c61f83afe42e5a2E>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
    8000f22a:	1141                	addi	sp,sp,-16
    8000f22c:	e42a                	sd	a0,8(sp)
        unsafe { NonNull { pointer: ptr as _ } }
    8000f22e:	e02a                	sd	a0,0(sp)
    }
    8000f230:	0141                	addi	sp,sp,16
    8000f232:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17hb7c70ed4b69f095cE:

000000008000f234 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17hb7c70ed4b69f095cE>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
    8000f234:	1141                	addi	sp,sp,-16
    8000f236:	e42a                	sd	a0,8(sp)
        unsafe { NonNull { pointer: ptr as _ } }
    8000f238:	e02a                	sd	a0,0(sp)
    }
    8000f23a:	0141                	addi	sp,sp,16
    8000f23c:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17hd62713267129dcbeE:

000000008000f23e <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17hd62713267129dcbeE>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
    8000f23e:	1141                	addi	sp,sp,-16
    8000f240:	e42a                	sd	a0,8(sp)
        unsafe { NonNull { pointer: ptr as _ } }
    8000f242:	e02a                	sd	a0,0(sp)
    }
    8000f244:	0141                	addi	sp,sp,16
    8000f246:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17he6e2e3c661183ac0E:

000000008000f248 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17he6e2e3c661183ac0E>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
    8000f248:	1141                	addi	sp,sp,-16
    8000f24a:	e42a                	sd	a0,8(sp)
        unsafe { NonNull { pointer: ptr as _ } }
    8000f24c:	e02a                	sd	a0,0(sp)
    }
    8000f24e:	0141                	addi	sp,sp,16
    8000f250:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17he8eb4f7b6f10823eE:

000000008000f252 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17he8eb4f7b6f10823eE>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
    8000f252:	1141                	addi	sp,sp,-16
    8000f254:	e42a                	sd	a0,8(sp)
        unsafe { NonNull { pointer: ptr as _ } }
    8000f256:	e02a                	sd	a0,0(sp)
    }
    8000f258:	0141                	addi	sp,sp,16
    8000f25a:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17hf41e3912db402547E:

000000008000f25c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17hf41e3912db402547E>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
    8000f25c:	1141                	addi	sp,sp,-16
    8000f25e:	e42a                	sd	a0,8(sp)
        unsafe { NonNull { pointer: ptr as _ } }
    8000f260:	e02a                	sd	a0,0(sp)
    }
    8000f262:	0141                	addi	sp,sp,16
    8000f264:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17hfa67d7222a1c22a5E:

000000008000f266 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17hfa67d7222a1c22a5E>:
    pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {
    8000f266:	1141                	addi	sp,sp,-16
    8000f268:	e42a                	sd	a0,8(sp)
        unsafe { NonNull { pointer: ptr as _ } }
    8000f26a:	e02a                	sd	a0,0(sp)
    }
    8000f26c:	0141                	addi	sp,sp,16
    8000f26e:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h190cd254f5945591E:

000000008000f270 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h190cd254f5945591E>:
    pub fn new(ptr: *mut T) -> Option<Self> {
    8000f270:	7179                	addi	sp,sp,-48
    8000f272:	f406                	sd	ra,40(sp)
    8000f274:	e42a                	sd	a0,8(sp)
    8000f276:	f02a                	sd	a0,32(sp)
        if !ptr.is_null() {
    8000f278:	00002097          	auipc	ra,0x2
    8000f27c:	3aa080e7          	jalr	938(ra) # 80011622 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17he6d08a4a98c1735bE>
    8000f280:	e82a                	sd	a0,16(sp)
    8000f282:	a009                	j	8000f284 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h190cd254f5945591E+0x14>
    8000f284:	6542                	ld	a0,16(sp)
    8000f286:	e909                	bnez	a0,8000f298 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h190cd254f5945591E+0x28>
    8000f288:	a009                	j	8000f28a <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h190cd254f5945591E+0x1a>
            Some(unsafe { Self::new_unchecked(ptr) })
    8000f28a:	6522                	ld	a0,8(sp)
    8000f28c:	00000097          	auipc	ra,0x0
    8000f290:	fbc080e7          	jalr	-68(ra) # 8000f248 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17he6e2e3c661183ac0E>
    8000f294:	e02a                	sd	a0,0(sp)
    8000f296:	a021                	j	8000f29e <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h190cd254f5945591E+0x2e>
    8000f298:	4501                	li	a0,0
            None
    8000f29a:	ec2a                	sd	a0,24(sp)
        if !ptr.is_null() {
    8000f29c:	a021                	j	8000f2a4 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h190cd254f5945591E+0x34>
            Some(unsafe { Self::new_unchecked(ptr) })
    8000f29e:	6502                	ld	a0,0(sp)
    8000f2a0:	ec2a                	sd	a0,24(sp)
        if !ptr.is_null() {
    8000f2a2:	a009                	j	8000f2a4 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h190cd254f5945591E+0x34>
    }
    8000f2a4:	6562                	ld	a0,24(sp)
    8000f2a6:	70a2                	ld	ra,40(sp)
    8000f2a8:	6145                	addi	sp,sp,48
    8000f2aa:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h3fba838d6c025de4E:

000000008000f2ac <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h3fba838d6c025de4E>:
    pub fn new(ptr: *mut T) -> Option<Self> {
    8000f2ac:	7179                	addi	sp,sp,-48
    8000f2ae:	f406                	sd	ra,40(sp)
    8000f2b0:	e42a                	sd	a0,8(sp)
    8000f2b2:	f02a                	sd	a0,32(sp)
        if !ptr.is_null() {
    8000f2b4:	00010097          	auipc	ra,0x10
    8000f2b8:	354080e7          	jalr	852(ra) # 8001f608 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hba478e65ea6353f9E>
    8000f2bc:	e82a                	sd	a0,16(sp)
    8000f2be:	a009                	j	8000f2c0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h3fba838d6c025de4E+0x14>
    8000f2c0:	6542                	ld	a0,16(sp)
    8000f2c2:	e909                	bnez	a0,8000f2d4 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h3fba838d6c025de4E+0x28>
    8000f2c4:	a009                	j	8000f2c6 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h3fba838d6c025de4E+0x1a>
            Some(unsafe { Self::new_unchecked(ptr) })
    8000f2c6:	6522                	ld	a0,8(sp)
    8000f2c8:	00000097          	auipc	ra,0x0
    8000f2cc:	f58080e7          	jalr	-168(ra) # 8000f220 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h5ed8fa4a56812246E>
    8000f2d0:	e02a                	sd	a0,0(sp)
    8000f2d2:	a021                	j	8000f2da <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h3fba838d6c025de4E+0x2e>
    8000f2d4:	4501                	li	a0,0
            None
    8000f2d6:	ec2a                	sd	a0,24(sp)
        if !ptr.is_null() {
    8000f2d8:	a021                	j	8000f2e0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h3fba838d6c025de4E+0x34>
            Some(unsafe { Self::new_unchecked(ptr) })
    8000f2da:	6502                	ld	a0,0(sp)
    8000f2dc:	ec2a                	sd	a0,24(sp)
        if !ptr.is_null() {
    8000f2de:	a009                	j	8000f2e0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h3fba838d6c025de4E+0x34>
    }
    8000f2e0:	6562                	ld	a0,24(sp)
    8000f2e2:	70a2                	ld	ra,40(sp)
    8000f2e4:	6145                	addi	sp,sp,48
    8000f2e6:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h280b1a52f32358efE:

000000008000f2e8 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h280b1a52f32358efE>:
    pub const fn cast<U>(self) -> NonNull<U> {
    8000f2e8:	7179                	addi	sp,sp,-48
    8000f2ea:	f406                	sd	ra,40(sp)
    8000f2ec:	ec2a                	sd	a0,24(sp)
    8000f2ee:	f02e                	sd	a1,32(sp)
        unsafe { NonNull::new_unchecked(self.as_ptr() as *mut U) }
    8000f2f0:	00000097          	auipc	ra,0x0
    8000f2f4:	158080e7          	jalr	344(ra) # 8000f448 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h8eef1d8fb3aa5851E>
    8000f2f8:	e82a                	sd	a0,16(sp)
    8000f2fa:	a009                	j	8000f2fc <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h280b1a52f32358efE+0x14>
    8000f2fc:	6542                	ld	a0,16(sp)
    8000f2fe:	00000097          	auipc	ra,0x0
    8000f302:	f2c080e7          	jalr	-212(ra) # 8000f22a <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h8c61f83afe42e5a2E>
    8000f306:	e42a                	sd	a0,8(sp)
    8000f308:	a009                	j	8000f30a <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h280b1a52f32358efE+0x22>
    }
    8000f30a:	6522                	ld	a0,8(sp)
    8000f30c:	70a2                	ld	ra,40(sp)
    8000f30e:	6145                	addi	sp,sp,48
    8000f310:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h4354690cb24a4e56E:

000000008000f312 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h4354690cb24a4e56E>:
    pub const fn cast<U>(self) -> NonNull<U> {
    8000f312:	7179                	addi	sp,sp,-48
    8000f314:	f406                	sd	ra,40(sp)
    8000f316:	ec2a                	sd	a0,24(sp)
    8000f318:	f02e                	sd	a1,32(sp)
        unsafe { NonNull::new_unchecked(self.as_ptr() as *mut U) }
    8000f31a:	00000097          	auipc	ra,0x0
    8000f31e:	12e080e7          	jalr	302(ra) # 8000f448 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h8eef1d8fb3aa5851E>
    8000f322:	e82a                	sd	a0,16(sp)
    8000f324:	a009                	j	8000f326 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h4354690cb24a4e56E+0x14>
    8000f326:	6542                	ld	a0,16(sp)
    8000f328:	00000097          	auipc	ra,0x0
    8000f32c:	ed6080e7          	jalr	-298(ra) # 8000f1fe <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h0fdb76b0b758b1a8E>
    8000f330:	e42a                	sd	a0,8(sp)
    8000f332:	a009                	j	8000f334 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h4354690cb24a4e56E+0x22>
    }
    8000f334:	6522                	ld	a0,8(sp)
    8000f336:	70a2                	ld	ra,40(sp)
    8000f338:	6145                	addi	sp,sp,48
    8000f33a:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h535f2787d46a2a35E:

000000008000f33c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h535f2787d46a2a35E>:
    pub const fn cast<U>(self) -> NonNull<U> {
    8000f33c:	7179                	addi	sp,sp,-48
    8000f33e:	f406                	sd	ra,40(sp)
    8000f340:	ec2a                	sd	a0,24(sp)
    8000f342:	f02e                	sd	a1,32(sp)
        unsafe { NonNull::new_unchecked(self.as_ptr() as *mut U) }
    8000f344:	00000097          	auipc	ra,0x0
    8000f348:	104080e7          	jalr	260(ra) # 8000f448 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h8eef1d8fb3aa5851E>
    8000f34c:	e82a                	sd	a0,16(sp)
    8000f34e:	a009                	j	8000f350 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h535f2787d46a2a35E+0x14>
    8000f350:	6542                	ld	a0,16(sp)
    8000f352:	00000097          	auipc	ra,0x0
    8000f356:	eb6080e7          	jalr	-330(ra) # 8000f208 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h39caf58a5e84bcebE>
    8000f35a:	e42a                	sd	a0,8(sp)
    8000f35c:	a009                	j	8000f35e <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h535f2787d46a2a35E+0x22>
    }
    8000f35e:	6522                	ld	a0,8(sp)
    8000f360:	70a2                	ld	ra,40(sp)
    8000f362:	6145                	addi	sp,sp,48
    8000f364:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h7831112f0067c5f4E:

000000008000f366 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h7831112f0067c5f4E>:
    pub const fn cast<U>(self) -> NonNull<U> {
    8000f366:	1101                	addi	sp,sp,-32
    8000f368:	ec06                	sd	ra,24(sp)
    8000f36a:	e82a                	sd	a0,16(sp)
        unsafe { NonNull::new_unchecked(self.as_ptr() as *mut U) }
    8000f36c:	00000097          	auipc	ra,0x0
    8000f370:	106080e7          	jalr	262(ra) # 8000f472 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17hc25f2e50aadb25dbE>
    8000f374:	e42a                	sd	a0,8(sp)
    8000f376:	a009                	j	8000f378 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h7831112f0067c5f4E+0x12>
    8000f378:	6522                	ld	a0,8(sp)
    8000f37a:	00000097          	auipc	ra,0x0
    8000f37e:	ea6080e7          	jalr	-346(ra) # 8000f220 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h5ed8fa4a56812246E>
    8000f382:	e02a                	sd	a0,0(sp)
    8000f384:	a009                	j	8000f386 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h7831112f0067c5f4E+0x20>
    }
    8000f386:	6502                	ld	a0,0(sp)
    8000f388:	60e2                	ld	ra,24(sp)
    8000f38a:	6105                	addi	sp,sp,32
    8000f38c:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h85615dabbcfe0ebdE:

000000008000f38e <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h85615dabbcfe0ebdE>:
    pub const fn cast<U>(self) -> NonNull<U> {
    8000f38e:	7179                	addi	sp,sp,-48
    8000f390:	f406                	sd	ra,40(sp)
    8000f392:	ec2a                	sd	a0,24(sp)
    8000f394:	f02e                	sd	a1,32(sp)
        unsafe { NonNull::new_unchecked(self.as_ptr() as *mut U) }
    8000f396:	00000097          	auipc	ra,0x0
    8000f39a:	0b2080e7          	jalr	178(ra) # 8000f448 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h8eef1d8fb3aa5851E>
    8000f39e:	e82a                	sd	a0,16(sp)
    8000f3a0:	a009                	j	8000f3a2 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h85615dabbcfe0ebdE+0x14>
    8000f3a2:	6542                	ld	a0,16(sp)
    8000f3a4:	00000097          	auipc	ra,0x0
    8000f3a8:	ec2080e7          	jalr	-318(ra) # 8000f266 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17hfa67d7222a1c22a5E>
    8000f3ac:	e42a                	sd	a0,8(sp)
    8000f3ae:	a009                	j	8000f3b0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h85615dabbcfe0ebdE+0x22>
    }
    8000f3b0:	6522                	ld	a0,8(sp)
    8000f3b2:	70a2                	ld	ra,40(sp)
    8000f3b4:	6145                	addi	sp,sp,48
    8000f3b6:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17he3c6d28f0e68e811E:

000000008000f3b8 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17he3c6d28f0e68e811E>:
    pub const fn cast<U>(self) -> NonNull<U> {
    8000f3b8:	7179                	addi	sp,sp,-48
    8000f3ba:	f406                	sd	ra,40(sp)
    8000f3bc:	ec2a                	sd	a0,24(sp)
    8000f3be:	f02e                	sd	a1,32(sp)
        unsafe { NonNull::new_unchecked(self.as_ptr() as *mut U) }
    8000f3c0:	00000097          	auipc	ra,0x0
    8000f3c4:	088080e7          	jalr	136(ra) # 8000f448 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h8eef1d8fb3aa5851E>
    8000f3c8:	e82a                	sd	a0,16(sp)
    8000f3ca:	a009                	j	8000f3cc <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17he3c6d28f0e68e811E+0x14>
    8000f3cc:	6542                	ld	a0,16(sp)
    8000f3ce:	00000097          	auipc	ra,0x0
    8000f3d2:	e52080e7          	jalr	-430(ra) # 8000f220 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h5ed8fa4a56812246E>
    8000f3d6:	e42a                	sd	a0,8(sp)
    8000f3d8:	a009                	j	8000f3da <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17he3c6d28f0e68e811E+0x22>
    }
    8000f3da:	6522                	ld	a0,8(sp)
    8000f3dc:	70a2                	ld	ra,40(sp)
    8000f3de:	6145                	addi	sp,sp,48
    8000f3e0:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17hf78234e23d9835f1E:

000000008000f3e2 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17hf78234e23d9835f1E>:
    pub const fn cast<U>(self) -> NonNull<U> {
    8000f3e2:	7179                	addi	sp,sp,-48
    8000f3e4:	f406                	sd	ra,40(sp)
    8000f3e6:	ec2a                	sd	a0,24(sp)
    8000f3e8:	f02e                	sd	a1,32(sp)
        unsafe { NonNull::new_unchecked(self.as_ptr() as *mut U) }
    8000f3ea:	00000097          	auipc	ra,0x0
    8000f3ee:	05e080e7          	jalr	94(ra) # 8000f448 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h8eef1d8fb3aa5851E>
    8000f3f2:	e82a                	sd	a0,16(sp)
    8000f3f4:	a009                	j	8000f3f6 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17hf78234e23d9835f1E+0x14>
    8000f3f6:	6542                	ld	a0,16(sp)
    8000f3f8:	00000097          	auipc	ra,0x0
    8000f3fc:	e3c080e7          	jalr	-452(ra) # 8000f234 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17hb7c70ed4b69f095cE>
    8000f400:	e42a                	sd	a0,8(sp)
    8000f402:	a009                	j	8000f404 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17hf78234e23d9835f1E+0x22>
    }
    8000f404:	6522                	ld	a0,8(sp)
    8000f406:	70a2                	ld	ra,40(sp)
    8000f408:	6145                	addi	sp,sp,48
    8000f40a:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_mut17h0bb096450dabbbf6E:

000000008000f40c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_mut17h0bb096450dabbbf6E>:
    pub unsafe fn as_mut<'a>(&mut self) -> &'a mut T {
    8000f40c:	1101                	addi	sp,sp,-32
    8000f40e:	ec06                	sd	ra,24(sp)
    8000f410:	e82a                	sd	a0,16(sp)
        unsafe { &mut *self.as_ptr() }
    8000f412:	6108                	ld	a0,0(a0)
    8000f414:	00000097          	auipc	ra,0x0
    8000f418:	02c080e7          	jalr	44(ra) # 8000f440 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h7c6e4b893f33870bE>
    8000f41c:	e42a                	sd	a0,8(sp)
    8000f41e:	a009                	j	8000f420 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_mut17h0bb096450dabbbf6E+0x14>
    }
    8000f420:	6522                	ld	a0,8(sp)
    8000f422:	60e2                	ld	ra,24(sp)
    8000f424:	6105                	addi	sp,sp,32
    8000f426:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h4054fe6794409e65E:

000000008000f428 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h4054fe6794409e65E>:
    pub const fn as_ptr(self) -> *mut T {
    8000f428:	1141                	addi	sp,sp,-16
    8000f42a:	e42a                	sd	a0,8(sp)
    }
    8000f42c:	0141                	addi	sp,sp,16
    8000f42e:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h593c20a0c1123d02E:

000000008000f430 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h593c20a0c1123d02E>:
    pub const fn as_ptr(self) -> *mut T {
    8000f430:	1141                	addi	sp,sp,-16
    8000f432:	e42a                	sd	a0,8(sp)
    }
    8000f434:	0141                	addi	sp,sp,16
    8000f436:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h729713db2b300d39E:

000000008000f438 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h729713db2b300d39E>:
    pub const fn as_ptr(self) -> *mut T {
    8000f438:	1141                	addi	sp,sp,-16
    8000f43a:	e42a                	sd	a0,8(sp)
    }
    8000f43c:	0141                	addi	sp,sp,16
    8000f43e:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h7c6e4b893f33870bE:

000000008000f440 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h7c6e4b893f33870bE>:
    pub const fn as_ptr(self) -> *mut T {
    8000f440:	1141                	addi	sp,sp,-16
    8000f442:	e42a                	sd	a0,8(sp)
    }
    8000f444:	0141                	addi	sp,sp,16
    8000f446:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h8eef1d8fb3aa5851E:

000000008000f448 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h8eef1d8fb3aa5851E>:
    pub const fn as_ptr(self) -> *mut T {
    8000f448:	1141                	addi	sp,sp,-16
    8000f44a:	e02a                	sd	a0,0(sp)
    8000f44c:	e42e                	sd	a1,8(sp)
    }
    8000f44e:	0141                	addi	sp,sp,16
    8000f450:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h911cddd192dc1ebbE:

000000008000f452 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h911cddd192dc1ebbE>:
    pub const fn as_ptr(self) -> *mut T {
    8000f452:	1141                	addi	sp,sp,-16
    8000f454:	e42a                	sd	a0,8(sp)
    }
    8000f456:	0141                	addi	sp,sp,16
    8000f458:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h9b02cb35a46880f1E:

000000008000f45a <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h9b02cb35a46880f1E>:
    pub const fn as_ptr(self) -> *mut T {
    8000f45a:	1141                	addi	sp,sp,-16
    8000f45c:	e42a                	sd	a0,8(sp)
    }
    8000f45e:	0141                	addi	sp,sp,16
    8000f460:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17habcb33ad0b4dc302E:

000000008000f462 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17habcb33ad0b4dc302E>:
    pub const fn as_ptr(self) -> *mut T {
    8000f462:	1141                	addi	sp,sp,-16
    8000f464:	e42a                	sd	a0,8(sp)
    }
    8000f466:	0141                	addi	sp,sp,16
    8000f468:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haf282fdd0407a8a4E:

000000008000f46a <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haf282fdd0407a8a4E>:
    pub const fn as_ptr(self) -> *mut T {
    8000f46a:	1141                	addi	sp,sp,-16
    8000f46c:	e42a                	sd	a0,8(sp)
    }
    8000f46e:	0141                	addi	sp,sp,16
    8000f470:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17hc25f2e50aadb25dbE:

000000008000f472 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17hc25f2e50aadb25dbE>:
    pub const fn as_ptr(self) -> *mut T {
    8000f472:	1141                	addi	sp,sp,-16
    8000f474:	e42a                	sd	a0,8(sp)
    }
    8000f476:	0141                	addi	sp,sp,16
    8000f478:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17hd337d3c0c1677ef4E:

000000008000f47a <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17hd337d3c0c1677ef4E>:
    pub const fn as_ptr(self) -> *mut T {
    8000f47a:	1141                	addi	sp,sp,-16
    8000f47c:	e42a                	sd	a0,8(sp)
    }
    8000f47e:	0141                	addi	sp,sp,16
    8000f480:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17hfb12dd33ea904ed8E:

000000008000f482 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17hfb12dd33ea904ed8E>:
    pub const fn as_ptr(self) -> *mut T {
    8000f482:	1141                	addi	sp,sp,-16
    8000f484:	e42a                	sd	a0,8(sp)
    }
    8000f486:	0141                	addi	sp,sp,16
    8000f488:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ref17hb658835e636047c4E:

000000008000f48a <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ref17hb658835e636047c4E>:
    pub unsafe fn as_ref<'a>(&self) -> &'a T {
    8000f48a:	1101                	addi	sp,sp,-32
    8000f48c:	ec06                	sd	ra,24(sp)
    8000f48e:	e82a                	sd	a0,16(sp)
        unsafe { &*self.as_ptr() }
    8000f490:	6108                	ld	a0,0(a0)
    8000f492:	00000097          	auipc	ra,0x0
    8000f496:	fe0080e7          	jalr	-32(ra) # 8000f472 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17hc25f2e50aadb25dbE>
    8000f49a:	e42a                	sd	a0,8(sp)
    8000f49c:	a009                	j	8000f49e <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ref17hb658835e636047c4E+0x14>
    }
    8000f49e:	6522                	ld	a0,8(sp)
    8000f4a0:	60e2                	ld	ra,24(sp)
    8000f4a2:	6105                	addi	sp,sp,32
    8000f4a4:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$10as_mut_ptr17h1a3f7b42026c1de6E:

000000008000f4a6 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$10as_mut_ptr17h1a3f7b42026c1de6E>:
    pub const fn as_mut_ptr(self) -> *mut T {
    8000f4a6:	7179                	addi	sp,sp,-48
    8000f4a8:	f406                	sd	ra,40(sp)
    8000f4aa:	ec2a                	sd	a0,24(sp)
    8000f4ac:	f02e                	sd	a1,32(sp)
        self.as_non_null_ptr().as_ptr()
    8000f4ae:	00000097          	auipc	ra,0x0
    8000f4b2:	022080e7          	jalr	34(ra) # 8000f4d0 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$15as_non_null_ptr17h8962585bd18d4862E>
    8000f4b6:	e82a                	sd	a0,16(sp)
    8000f4b8:	a009                	j	8000f4ba <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$10as_mut_ptr17h1a3f7b42026c1de6E+0x14>
    8000f4ba:	6542                	ld	a0,16(sp)
    8000f4bc:	00000097          	auipc	ra,0x0
    8000f4c0:	f7c080e7          	jalr	-132(ra) # 8000f438 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h729713db2b300d39E>
    8000f4c4:	e42a                	sd	a0,8(sp)
    8000f4c6:	a009                	j	8000f4c8 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$10as_mut_ptr17h1a3f7b42026c1de6E+0x22>
    }
    8000f4c8:	6522                	ld	a0,8(sp)
    8000f4ca:	70a2                	ld	ra,40(sp)
    8000f4cc:	6145                	addi	sp,sp,48
    8000f4ce:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$15as_non_null_ptr17h8962585bd18d4862E:

000000008000f4d0 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$15as_non_null_ptr17h8962585bd18d4862E>:
    pub const fn as_non_null_ptr(self) -> NonNull<T> {
    8000f4d0:	7139                	addi	sp,sp,-64
    8000f4d2:	fc06                	sd	ra,56(sp)
    8000f4d4:	f42a                	sd	a0,40(sp)
    8000f4d6:	f82e                	sd	a1,48(sp)
        unsafe { NonNull::new_unchecked(self.as_ptr().as_mut_ptr()) }
    8000f4d8:	00000097          	auipc	ra,0x0
    8000f4dc:	f70080e7          	jalr	-144(ra) # 8000f448 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h8eef1d8fb3aa5851E>
    8000f4e0:	ec2a                	sd	a0,24(sp)
    8000f4e2:	f02e                	sd	a1,32(sp)
    8000f4e4:	a009                	j	8000f4e6 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$15as_non_null_ptr17h8962585bd18d4862E+0x16>
    8000f4e6:	7582                	ld	a1,32(sp)
    8000f4e8:	6562                	ld	a0,24(sp)
    8000f4ea:	00010097          	auipc	ra,0x10
    8000f4ee:	140080e7          	jalr	320(ra) # 8001f62a <_ZN4core3ptr7mut_ptr41_$LT$impl$u20$$BP$mut$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h80398cc0098c8b0fE>
    8000f4f2:	e82a                	sd	a0,16(sp)
    8000f4f4:	a009                	j	8000f4f6 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$15as_non_null_ptr17h8962585bd18d4862E+0x26>
    8000f4f6:	6542                	ld	a0,16(sp)
    8000f4f8:	00000097          	auipc	ra,0x0
    8000f4fc:	d28080e7          	jalr	-728(ra) # 8000f220 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h5ed8fa4a56812246E>
    8000f500:	e42a                	sd	a0,8(sp)
    8000f502:	a009                	j	8000f504 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$15as_non_null_ptr17h8962585bd18d4862E+0x34>
    }
    8000f504:	6522                	ld	a0,8(sp)
    8000f506:	70e2                	ld	ra,56(sp)
    8000f508:	6121                	addi	sp,sp,64
    8000f50a:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$20slice_from_raw_parts17h7a0aec34eacd5d12E:

000000008000f50c <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$20slice_from_raw_parts17h7a0aec34eacd5d12E>:
    pub const fn slice_from_raw_parts(data: NonNull<T>, len: usize) -> Self {
    8000f50c:	715d                	addi	sp,sp,-80
    8000f50e:	e486                	sd	ra,72(sp)
    8000f510:	f42e                	sd	a1,40(sp)
    8000f512:	fc2a                	sd	a0,56(sp)
    8000f514:	e0ae                	sd	a1,64(sp)
        unsafe { Self::new_unchecked(super::slice_from_raw_parts_mut(data.as_ptr(), len)) }
    8000f516:	00000097          	auipc	ra,0x0
    8000f51a:	f22080e7          	jalr	-222(ra) # 8000f438 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h729713db2b300d39E>
    8000f51e:	f82a                	sd	a0,48(sp)
    8000f520:	a009                	j	8000f522 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$20slice_from_raw_parts17h7a0aec34eacd5d12E+0x16>
    8000f522:	75a2                	ld	a1,40(sp)
    8000f524:	7542                	ld	a0,48(sp)
    8000f526:	00012097          	auipc	ra,0x12
    8000f52a:	108080e7          	jalr	264(ra) # 8002162e <_ZN4core3ptr24slice_from_raw_parts_mut17h39496eba86137ee5E>
    8000f52e:	ec2a                	sd	a0,24(sp)
    8000f530:	f02e                	sd	a1,32(sp)
    8000f532:	a009                	j	8000f534 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$20slice_from_raw_parts17h7a0aec34eacd5d12E+0x28>
    8000f534:	7582                	ld	a1,32(sp)
    8000f536:	6562                	ld	a0,24(sp)
    8000f538:	00000097          	auipc	ra,0x0
    8000f53c:	cda080e7          	jalr	-806(ra) # 8000f212 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h590958fa24c9c418E>
    8000f540:	e42a                	sd	a0,8(sp)
    8000f542:	e82e                	sd	a1,16(sp)
    8000f544:	a009                	j	8000f546 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$20slice_from_raw_parts17h7a0aec34eacd5d12E+0x3a>
    }
    8000f546:	65c2                	ld	a1,16(sp)
    8000f548:	6522                	ld	a0,8(sp)
    8000f54a:	60a6                	ld	ra,72(sp)
    8000f54c:	6161                	addi	sp,sp,80
    8000f54e:	8082                	ret

Disassembly of section .text._ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$3len17h17d848b65404492bE:

000000008000f550 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$3len17h17d848b65404492bE>:
    pub const fn len(self) -> usize {
    8000f550:	7179                	addi	sp,sp,-48
    8000f552:	f406                	sd	ra,40(sp)
    8000f554:	ec2a                	sd	a0,24(sp)
    8000f556:	f02e                	sd	a1,32(sp)
        self.as_ptr().len()
    8000f558:	00000097          	auipc	ra,0x0
    8000f55c:	ef0080e7          	jalr	-272(ra) # 8000f448 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h8eef1d8fb3aa5851E>
    8000f560:	e42a                	sd	a0,8(sp)
    8000f562:	e82e                	sd	a1,16(sp)
    8000f564:	a009                	j	8000f566 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$3len17h17d848b65404492bE+0x16>
    8000f566:	65c2                	ld	a1,16(sp)
    8000f568:	6522                	ld	a0,8(sp)
    8000f56a:	ffff9097          	auipc	ra,0xffff9
    8000f56e:	426080e7          	jalr	1062(ra) # 80008990 <_ZN4core3ptr7mut_ptr41_$LT$impl$u20$$BP$mut$u20$$u5b$T$u5d$$GT$3len17hf44174276422642dE>
    8000f572:	e02a                	sd	a0,0(sp)
    8000f574:	a009                	j	8000f576 <_ZN4core3ptr8non_null26NonNull$LT$$u5b$T$u5d$$GT$3len17h17d848b65404492bE+0x26>
    }
    8000f576:	6502                	ld	a0,0(sp)
    8000f578:	70a2                	ld	ra,40(sp)
    8000f57a:	6145                	addi	sp,sp,48
    8000f57c:	8082                	ret

Disassembly of section .text._ZN98_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$mut$u20$T$GT$$GT$4from17h99a3612f25da96c9E:

000000008000f57e <_ZN98_$LT$core..ptr..non_null..NonNull$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$mut$u20$T$GT$$GT$4from17h99a3612f25da96c9E>:
}

#[stable(feature = "nonnull", since = "1.25.0")]
impl<T: ?Sized> From<&mut T> for NonNull<T> {
    #[inline]
    fn from(reference: &mut T) -> Self {
    8000f57e:	1141                	addi	sp,sp,-16
    8000f580:	e42a                	sd	a0,8(sp)
        // SAFETY: A mutable reference cannot be null.
        unsafe { NonNull { pointer: reference as *mut T } }
    8000f582:	e02a                	sd	a0,0(sp)
    }
    8000f584:	0141                	addi	sp,sp,16
    8000f586:	8082                	ret

Disassembly of section .text._ZN79_$LT$core..num..wrapping..Wrapping$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h94523e3cd63d6752E:

000000008000f588 <_ZN79_$LT$core..num..wrapping..Wrapping$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h94523e3cd63d6752E>:
#[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Copy, Default, Hash)]
    8000f588:	7179                	addi	sp,sp,-48
    8000f58a:	f406                	sd	ra,40(sp)
    8000f58c:	e42a                	sd	a0,8(sp)
    8000f58e:	e82e                	sd	a1,16(sp)
pub struct Wrapping<T>(#[stable(feature = "rust1", since = "1.0.0")] pub T);
    8000f590:	ec2e                	sd	a1,24(sp)
    8000f592:	f02a                	sd	a0,32(sp)
    8000f594:	0000c097          	auipc	ra,0xc
    8000f598:	07c080e7          	jalr	124(ra) # 8001b610 <_ZN4core3cmp5impls56_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$usize$GT$2eq17hb88014a76b34c88fE>
    8000f59c:	e02a                	sd	a0,0(sp)
    8000f59e:	a009                	j	8000f5a0 <_ZN79_$LT$core..num..wrapping..Wrapping$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17h94523e3cd63d6752E+0x18>
#[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Copy, Default, Hash)]
    8000f5a0:	6502                	ld	a0,0(sp)
    8000f5a2:	70a2                	ld	ra,40(sp)
    8000f5a4:	6145                	addi	sp,sp,48
    8000f5a6:	8082                	ret

Disassembly of section .text._ZN79_$LT$core..num..wrapping..Wrapping$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2ne17h2d3bd6a577efe0b1E:

000000008000f5a8 <_ZN79_$LT$core..num..wrapping..Wrapping$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2ne17h2d3bd6a577efe0b1E>:
    8000f5a8:	7179                	addi	sp,sp,-48
    8000f5aa:	f406                	sd	ra,40(sp)
    8000f5ac:	e42a                	sd	a0,8(sp)
    8000f5ae:	e82e                	sd	a1,16(sp)
pub struct Wrapping<T>(#[stable(feature = "rust1", since = "1.0.0")] pub T);
    8000f5b0:	ec2e                	sd	a1,24(sp)
    8000f5b2:	f02a                	sd	a0,32(sp)
    8000f5b4:	0000c097          	auipc	ra,0xc
    8000f5b8:	070080e7          	jalr	112(ra) # 8001b624 <_ZN4core3cmp5impls56_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$usize$GT$2ne17h958431dd9ff1337dE>
    8000f5bc:	e02a                	sd	a0,0(sp)
    8000f5be:	a009                	j	8000f5c0 <_ZN79_$LT$core..num..wrapping..Wrapping$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2ne17h2d3bd6a577efe0b1E+0x18>
#[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Copy, Default, Hash)]
    8000f5c0:	6502                	ld	a0,0(sp)
    8000f5c2:	70a2                	ld	ra,40(sp)
    8000f5c4:	6145                	addi	sp,sp,48
    8000f5c6:	8082                	ret

Disassembly of section .text._ZN4core4hint9spin_loop17h176cebad2d7c26adE:

000000008000f5c8 <_ZN4core4hint9spin_loop17h176cebad2d7c26adE>:
            // SAFETY: the `cfg` attr ensures that we only execute this on arm targets
            // with support for the v6 feature.
            unsafe { crate::arch::arm::__yield() };
        }
    }
}
    8000f5c8:	8082                	ret

Disassembly of section .text._ZN6kernel2fs3log3Log4init17h739bf7c5bf880a35E:

000000008000f5ca <_ZN6kernel2fs3log3Log4init17h739bf7c5bf880a35E>:
    pub unsafe fn init(&mut self, dev: u32) {
    8000f5ca:	7155                	addi	sp,sp,-208
    8000f5cc:	e586                	sd	ra,200(sp)
    8000f5ce:	f82a                	sd	a0,48(sp)
    8000f5d0:	862e                	mv	a2,a1
    8000f5d2:	fc32                	sd	a2,56(sp)
    8000f5d4:	e92a                	sd	a0,144(sp)
    8000f5d6:	cf2e                	sw	a1,156(sp)
        debug_assert!(mem::size_of::<LogHeader>() < BSIZE);
    8000f5d8:	a009                	j	8000f5da <_ZN6kernel2fs3log3Log4init17h739bf7c5bf880a35E+0x10>
    8000f5da:	4505                	li	a0,1
    8000f5dc:	e10d                	bnez	a0,8000f5fe <.LBB0_13+0x16>
    8000f5de:	a009                	j	8000f5e0 <.LBB0_12>

000000008000f5e0 <.LBB0_12>:
    8000f5e0:	00019517          	auipc	a0,0x19
    8000f5e4:	e7f50513          	addi	a0,a0,-385 # 8002845f <.L__unnamed_1>

000000008000f5e8 <.LBB0_13>:
    8000f5e8:	00019617          	auipc	a2,0x19
    8000f5ec:	ec060613          	addi	a2,a2,-320 # 800284a8 <.L__unnamed_2>
    8000f5f0:	03500593          	li	a1,53
    8000f5f4:	00013097          	auipc	ra,0x13
    8000f5f8:	b08080e7          	jalr	-1272(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8000f5fc:	0000                	unimp
    8000f5fe:	4521                	li	a0,8
    8000f600:	f42a                	sd	a0,40(sp)
    8000f602:	fd2a                	sd	a0,184(sp)
        debug_assert_eq!(mem::align_of::<BufData>() % mem::align_of::<LogHeader>(), 0);
    8000f604:	a009                	j	8000f606 <.LBB0_13+0x1e>
    8000f606:	4511                	li	a0,4
    8000f608:	f02a                	sd	a0,32(sp)
    8000f60a:	e1aa                	sd	a0,192(sp)
    8000f60c:	a009                	j	8000f60e <.LBB0_13+0x26>
    8000f60e:	7502                	ld	a0,32(sp)
    8000f610:	4581                	li	a1,0
    8000f612:	08b50363          	beq	a0,a1,8000f698 <.LBB0_17>
    8000f616:	a009                	j	8000f618 <.LBB0_13+0x30>
    8000f618:	7522                	ld	a0,40(sp)
    8000f61a:	7582                	ld	a1,32(sp)
    8000f61c:	02b57533          	remu	a0,a0,a1
    8000f620:	e8aa                	sd	a0,80(sp)
    8000f622:	0890                	addi	a2,sp,80
    8000f624:	e832                	sd	a2,16(sp)
    8000f626:	e0b2                	sd	a2,64(sp)

000000008000f628 <.LBB0_14>:
    8000f628:	00017597          	auipc	a1,0x17
    8000f62c:	1d858593          	addi	a1,a1,472 # 80026800 <.L__unnamed_6+0xc8>
    8000f630:	ec2e                	sd	a1,24(sp)
    8000f632:	e4ae                	sd	a1,72(sp)
    8000f634:	f132                	sd	a2,160(sp)
    8000f636:	f52e                	sd	a1,168(sp)
    8000f638:	4581                	li	a1,0
    8000f63a:	02b50363          	beq	a0,a1,8000f660 <.LBB0_16>
    8000f63e:	a009                	j	8000f640 <.LBB0_14+0x18>
    8000f640:	6662                	ld	a2,24(sp)
    8000f642:	65c2                	ld	a1,16(sp)
    8000f644:	4501                	li	a0,0
    8000f646:	04a10fa3          	sb	a0,95(sp)
    8000f64a:	f0aa                	sd	a0,96(sp)

000000008000f64c <.LBB0_15>:
    8000f64c:	00019717          	auipc	a4,0x19
    8000f650:	ed470713          	addi	a4,a4,-300 # 80028520 <.L__unnamed_4>
    8000f654:	1094                	addi	a3,sp,96
    8000f656:	00010097          	auipc	ra,0x10
    8000f65a:	1d4080e7          	jalr	468(ra) # 8001f82a <_ZN4core9panicking13assert_failed17h4e6d74c9d534b647E>
	...

000000008000f660 <.LBB0_16>:
        let (start, size) = SUPER_BLOCK.read_log();
    8000f660:	00053517          	auipc	a0,0x53
    8000f664:	a4050513          	addi	a0,a0,-1472 # 800620a0 <_ZN6kernel2fs10superblock11SUPER_BLOCK17hc3889871ecbe2b54E>
    8000f668:	ffff8097          	auipc	ra,0xffff8
    8000f66c:	0b0080e7          	jalr	176(ra) # 80007718 <_ZN6kernel2fs10superblock10SuperBlock8read_log17h7cc8d407eaa9ef0fE>
    8000f670:	e02a                	sd	a0,0(sp)
    8000f672:	e42e                	sd	a1,8(sp)
    8000f674:	a009                	j	8000f676 <.LBB0_16+0x16>
    8000f676:	7542                	ld	a0,48(sp)
    8000f678:	75e2                	ld	a1,56(sp)
    8000f67a:	6622                	ld	a2,8(sp)
    8000f67c:	6682                	ld	a3,0(sp)
    8000f67e:	d936                	sw	a3,176(sp)
    8000f680:	db32                	sw	a2,180(sp)
        self.start = start;
    8000f682:	c114                	sw	a3,0(a0)
        self.size = size;
    8000f684:	c150                	sw	a2,4(a0)
        self.dev = dev;
    8000f686:	c50c                	sw	a1,8(a0)
        self.recover();
    8000f688:	00000097          	auipc	ra,0x0
    8000f68c:	02e080e7          	jalr	46(ra) # 8000f6b6 <_ZN6kernel2fs3log3Log7recover17h4d88efc42f980b61E>
    8000f690:	a009                	j	8000f692 <.LBB0_16+0x32>
    }
    8000f692:	60ae                	ld	ra,200(sp)
    8000f694:	6169                	addi	sp,sp,208
    8000f696:	8082                	ret

000000008000f698 <.LBB0_17>:
        debug_assert_eq!(mem::align_of::<BufData>() % mem::align_of::<LogHeader>(), 0);
    8000f698:	00019517          	auipc	a0,0x19
    8000f69c:	e4850513          	addi	a0,a0,-440 # 800284e0 <str.0>

000000008000f6a0 <.LBB0_18>:
    8000f6a0:	00019617          	auipc	a2,0x19
    8000f6a4:	e2060613          	addi	a2,a2,-480 # 800284c0 <.L__unnamed_5>
    8000f6a8:	03900593          	li	a1,57
    8000f6ac:	00013097          	auipc	ra,0x13
    8000f6b0:	a50080e7          	jalr	-1456(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel2fs3log3Log7recover17h4d88efc42f980b61E:

000000008000f6b6 <_ZN6kernel2fs3log3Log7recover17h4d88efc42f980b61E>:
    fn recover(&mut self) {
    8000f6b6:	7171                	addi	sp,sp,-176
    8000f6b8:	f506                	sd	ra,168(sp)
    8000f6ba:	e02a                	sd	a0,0(sp)
    8000f6bc:	f12a                	sd	a0,160(sp)

000000008000f6be <.LBB1_13>:
        println!("file system: checking logs");
    8000f6be:	00019597          	auipc	a1,0x19
    8000f6c2:	e9a58593          	addi	a1,a1,-358 # 80028558 <.L__unnamed_6>

000000008000f6c6 <.LBB1_14>:
    8000f6c6:	00019697          	auipc	a3,0x19
    8000f6ca:	ea268693          	addi	a3,a3,-350 # 80028568 <.L__unnamed_20>
    8000f6ce:	0808                	addi	a0,sp,16
    8000f6d0:	4605                	li	a2,1
    8000f6d2:	4701                	li	a4,0
    8000f6d4:	ffff6097          	auipc	ra,0xffff6
    8000f6d8:	d60080e7          	jalr	-672(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8000f6dc:	a009                	j	8000f6de <.LBB1_14+0x18>
    8000f6de:	0808                	addi	a0,sp,16
    8000f6e0:	0000e097          	auipc	ra,0xe
    8000f6e4:	4d0080e7          	jalr	1232(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8000f6e8:	a009                	j	8000f6ea <.LBB1_14+0x24>
        self.read_head();
    8000f6ea:	6502                	ld	a0,0(sp)
    8000f6ec:	00000097          	auipc	ra,0x0
    8000f6f0:	092080e7          	jalr	146(ra) # 8000f77e <_ZN6kernel2fs3log3Log9read_head17hbc6584ed4df3a629E>
    8000f6f4:	a009                	j	8000f6f6 <.LBB1_14+0x30>
        if self.lh.len > 0 {
    8000f6f6:	6502                	ld	a0,0(sp)
    8000f6f8:	4908                	lw	a0,16(a0)
    8000f6fa:	4581                	li	a1,0
    8000f6fc:	02b50363          	beq	a0,a1,8000f722 <.LBB1_17>
    8000f700:	a009                	j	8000f702 <.LBB1_15>

000000008000f702 <.LBB1_15>:
            println!("file system: recovering from logs");
    8000f702:	00019597          	auipc	a1,0x19
    8000f706:	e8e58593          	addi	a1,a1,-370 # 80028590 <.L__unnamed_8>

000000008000f70a <.LBB1_16>:
    8000f70a:	00019697          	auipc	a3,0x19
    8000f70e:	e5e68693          	addi	a3,a3,-418 # 80028568 <.L__unnamed_20>
    8000f712:	0088                	addi	a0,sp,64
    8000f714:	4605                	li	a2,1
    8000f716:	4701                	li	a4,0
    8000f718:	ffff6097          	auipc	ra,0xffff6
    8000f71c:	d1c080e7          	jalr	-740(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8000f720:	a00d                	j	8000f742 <.LBB1_18+0x18>

000000008000f722 <.LBB1_17>:
            println!("file system: no need to recover");
    8000f722:	00019597          	auipc	a1,0x19
    8000f726:	e7e58593          	addi	a1,a1,-386 # 800285a0 <.L__unnamed_9>

000000008000f72a <.LBB1_18>:
    8000f72a:	00019697          	auipc	a3,0x19
    8000f72e:	e3e68693          	addi	a3,a3,-450 # 80028568 <.L__unnamed_20>
    8000f732:	1888                	addi	a0,sp,112
    8000f734:	4605                	li	a2,1
    8000f736:	4701                	li	a4,0
    8000f738:	ffff6097          	auipc	ra,0xffff6
    8000f73c:	cfc080e7          	jalr	-772(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8000f740:	a02d                	j	8000f76a <.LBB1_18+0x40>
    8000f742:	0088                	addi	a0,sp,64
            println!("file system: recovering from logs");
    8000f744:	0000e097          	auipc	ra,0xe
    8000f748:	46c080e7          	jalr	1132(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8000f74c:	a009                	j	8000f74e <.LBB1_18+0x24>
            self.install_trans(true);
    8000f74e:	6502                	ld	a0,0(sp)
    8000f750:	4585                	li	a1,1
    8000f752:	00000097          	auipc	ra,0x0
    8000f756:	196080e7          	jalr	406(ra) # 8000f8e8 <_ZN6kernel2fs3log3Log13install_trans17h365e0e8a575b1656E>
    8000f75a:	a009                	j	8000f75c <.LBB1_18+0x32>
            self.empty_head();
    8000f75c:	6502                	ld	a0,0(sp)
    8000f75e:	00000097          	auipc	ra,0x0
    8000f762:	0fc080e7          	jalr	252(ra) # 8000f85a <_ZN6kernel2fs3log3Log10empty_head17hfcefa6f849cc86acE>
    8000f766:	a009                	j	8000f768 <.LBB1_18+0x3e>
        if self.lh.len > 0 {
    8000f768:	a801                	j	8000f778 <.LBB1_18+0x4e>
    8000f76a:	1888                	addi	a0,sp,112
            println!("file system: no need to recover");
    8000f76c:	0000e097          	auipc	ra,0xe
    8000f770:	444080e7          	jalr	1092(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8000f774:	a009                	j	8000f776 <.LBB1_18+0x4c>
        if self.lh.len > 0 {
    8000f776:	a009                	j	8000f778 <.LBB1_18+0x4e>
    }
    8000f778:	70aa                	ld	ra,168(sp)
    8000f77a:	614d                	addi	sp,sp,176
    8000f77c:	8082                	ret

Disassembly of section .text._ZN6kernel2fs3log3Log9read_head17hbc6584ed4df3a629E:

000000008000f77e <_ZN6kernel2fs3log3Log9read_head17hbc6584ed4df3a629E>:
    fn read_head(&mut self) {
    8000f77e:	7159                	addi	sp,sp,-112
    8000f780:	f486                	sd	ra,104(sp)
    8000f782:	e42a                	sd	a0,8(sp)
    8000f784:	f0aa                	sd	a0,96(sp)
        let buf = BCACHE.bread(self.dev, self.start);
    8000f786:	4114                	lw	a3,0(a0)
    8000f788:	4510                	lw	a2,8(a0)

000000008000f78a <.LBB2_4>:
    8000f78a:	00020597          	auipc	a1,0x20
    8000f78e:	87658593          	addi	a1,a1,-1930 # 8002f000 <_ZN6kernel2fs3bio6BCACHE17h4811aac4f8d79dc4E>
    8000f792:	0808                	addi	a0,sp,16
    8000f794:	ffff4097          	auipc	ra,0xffff4
    8000f798:	e68080e7          	jalr	-408(ra) # 800035fc <_ZN6kernel2fs3bio6Bcache5bread17h6ef915e4e896646bE>
    8000f79c:	a009                	j	8000f79e <.LBB2_4+0x14>
    8000f79e:	0808                	addi	a0,sp,16
                buf.raw_data() as *const LogHeader,
    8000f7a0:	ffff4097          	auipc	ra,0xffff4
    8000f7a4:	fa2080e7          	jalr	-94(ra) # 80003742 <_ZN6kernel2fs3bio3Buf8raw_data17h6a896fea03f7ee91E>
    8000f7a8:	e02a                	sd	a0,0(sp)
    8000f7aa:	a009                	j	8000f7ac <.LBB2_4+0x22>
                &mut self.lh,
    8000f7ac:	6582                	ld	a1,0(sp)
    8000f7ae:	6522                	ld	a0,8(sp)
    8000f7b0:	0541                	addi	a0,a0,16
    8000f7b2:	07800613          	li	a2,120
            ptr::copy_nonoverlapping(
    8000f7b6:	00016097          	auipc	ra,0x16
    8000f7ba:	884080e7          	jalr	-1916(ra) # 8002503a <memcpy>
        drop(buf);
    8000f7be:	6542                	ld	a0,16(sp)
    8000f7c0:	fc2a                	sd	a0,56(sp)
    8000f7c2:	6562                	ld	a0,24(sp)
    8000f7c4:	e0aa                	sd	a0,64(sp)
    8000f7c6:	7502                	ld	a0,32(sp)
    8000f7c8:	e4aa                	sd	a0,72(sp)
    8000f7ca:	7522                	ld	a0,40(sp)
    8000f7cc:	e8aa                	sd	a0,80(sp)
    8000f7ce:	7542                	ld	a0,48(sp)
    8000f7d0:	ecaa                	sd	a0,88(sp)
    8000f7d2:	1828                	addi	a0,sp,56
    8000f7d4:	0000d097          	auipc	ra,0xd
    8000f7d8:	7b8080e7          	jalr	1976(ra) # 8001cf8c <_ZN4core3mem4drop17hda1e19029436deb9E>
    8000f7dc:	a009                	j	8000f7de <.LBB2_4+0x54>
    }
    8000f7de:	70a6                	ld	ra,104(sp)
    8000f7e0:	6165                	addi	sp,sp,112
    8000f7e2:	8082                	ret

Disassembly of section .text._ZN6kernel2fs3log3Log10write_head17hcfa90aedd37d0ff2E:

000000008000f7e4 <_ZN6kernel2fs3log3Log10write_head17hcfa90aedd37d0ff2E>:
    fn write_head(&mut self) {
    8000f7e4:	7119                	addi	sp,sp,-128
    8000f7e6:	fc86                	sd	ra,120(sp)
    8000f7e8:	ec2a                	sd	a0,24(sp)
    8000f7ea:	f8aa                	sd	a0,112(sp)
        let mut buf = BCACHE.bread(self.dev, self.start);
    8000f7ec:	4114                	lw	a3,0(a0)
    8000f7ee:	4510                	lw	a2,8(a0)

000000008000f7f0 <.LBB3_5>:
    8000f7f0:	00020597          	auipc	a1,0x20
    8000f7f4:	81058593          	addi	a1,a1,-2032 # 8002f000 <_ZN6kernel2fs3bio6BCACHE17h4811aac4f8d79dc4E>
    8000f7f8:	1008                	addi	a0,sp,32
    8000f7fa:	ffff4097          	auipc	ra,0xffff4
    8000f7fe:	e02080e7          	jalr	-510(ra) # 800035fc <_ZN6kernel2fs3bio6Bcache5bread17h6ef915e4e896646bE>
    8000f802:	a009                	j	8000f804 <.LBB3_5+0x14>
                &self.lh,
    8000f804:	6562                	ld	a0,24(sp)
    8000f806:	0541                	addi	a0,a0,16
                buf.raw_data_mut() as *mut LogHeader,
    8000f808:	e42a                	sd	a0,8(sp)
    8000f80a:	1008                	addi	a0,sp,32
    8000f80c:	ffff4097          	auipc	ra,0xffff4
    8000f810:	f7a080e7          	jalr	-134(ra) # 80003786 <_ZN6kernel2fs3bio3Buf12raw_data_mut17hbae73c10d57c515dE>
    8000f814:	e82a                	sd	a0,16(sp)
    8000f816:	a009                	j	8000f818 <.LBB3_5+0x28>
            ptr::copy_nonoverlapping(
    8000f818:	65a2                	ld	a1,8(sp)
    8000f81a:	6542                	ld	a0,16(sp)
    8000f81c:	07800613          	li	a2,120
    8000f820:	00016097          	auipc	ra,0x16
    8000f824:	81a080e7          	jalr	-2022(ra) # 8002503a <memcpy>
    8000f828:	1008                	addi	a0,sp,32
        buf.bwrite();
    8000f82a:	ffff4097          	auipc	ra,0xffff4
    8000f82e:	ef6080e7          	jalr	-266(ra) # 80003720 <_ZN6kernel2fs3bio3Buf6bwrite17hec751387ebedcc62E>
    8000f832:	a009                	j	8000f834 <.LBB3_5+0x44>
        drop(buf);
    8000f834:	6506                	ld	a0,64(sp)
    8000f836:	f4aa                	sd	a0,104(sp)
    8000f838:	7562                	ld	a0,56(sp)
    8000f83a:	f0aa                	sd	a0,96(sp)
    8000f83c:	7542                	ld	a0,48(sp)
    8000f83e:	ecaa                	sd	a0,88(sp)
    8000f840:	7522                	ld	a0,40(sp)
    8000f842:	e8aa                	sd	a0,80(sp)
    8000f844:	7502                	ld	a0,32(sp)
    8000f846:	e4aa                	sd	a0,72(sp)
    8000f848:	00a8                	addi	a0,sp,72
    8000f84a:	0000d097          	auipc	ra,0xd
    8000f84e:	742080e7          	jalr	1858(ra) # 8001cf8c <_ZN4core3mem4drop17hda1e19029436deb9E>
    8000f852:	a009                	j	8000f854 <.LBB3_5+0x64>
    }
    8000f854:	70e6                	ld	ra,120(sp)
    8000f856:	6109                	addi	sp,sp,128
    8000f858:	8082                	ret

Disassembly of section .text._ZN6kernel2fs3log3Log10empty_head17hfcefa6f849cc86acE:

000000008000f85a <_ZN6kernel2fs3log3Log10empty_head17hfcefa6f849cc86acE>:
    fn empty_head(&mut self) {
    8000f85a:	7119                	addi	sp,sp,-128
    8000f85c:	fc86                	sd	ra,120(sp)
    8000f85e:	f4aa                	sd	a0,104(sp)
    8000f860:	4581                	li	a1,0
        self.lh.len = 0;
    8000f862:	c90c                	sw	a1,16(a0)
        let mut buf = BCACHE.bread(self.dev, self.start);
    8000f864:	4114                	lw	a3,0(a0)
    8000f866:	4510                	lw	a2,8(a0)

000000008000f868 <.LBB4_7>:
    8000f868:	0001f597          	auipc	a1,0x1f
    8000f86c:	79858593          	addi	a1,a1,1944 # 8002f000 <_ZN6kernel2fs3bio6BCACHE17h4811aac4f8d79dc4E>
    8000f870:	0828                	addi	a0,sp,24
    8000f872:	ffff4097          	auipc	ra,0xffff4
    8000f876:	d8a080e7          	jalr	-630(ra) # 800035fc <_ZN6kernel2fs3bio6Bcache5bread17h6ef915e4e896646bE>
    8000f87a:	a009                	j	8000f87c <.LBB4_7+0x14>
    8000f87c:	0828                	addi	a0,sp,24
        let raw_lh = buf.raw_data_mut() as *mut LogHeader;
    8000f87e:	ffff4097          	auipc	ra,0xffff4
    8000f882:	f08080e7          	jalr	-248(ra) # 80003786 <_ZN6kernel2fs3bio3Buf12raw_data_mut17hbae73c10d57c515dE>
    8000f886:	e82a                	sd	a0,16(sp)
    8000f888:	a009                	j	8000f88a <.LBB4_7+0x22>
    8000f88a:	6542                	ld	a0,16(sp)
    8000f88c:	f8aa                	sd	a0,112(sp)
        unsafe { raw_lh.as_mut().unwrap().len = 0; }
    8000f88e:	ffff9097          	auipc	ra,0xffff9
    8000f892:	2c6080e7          	jalr	710(ra) # 80008b54 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h1b12e5c191747deaE>
    8000f896:	e42a                	sd	a0,8(sp)
    8000f898:	a009                	j	8000f89a <.LBB4_7+0x32>
    8000f89a:	6522                	ld	a0,8(sp)

000000008000f89c <.LBB4_8>:
    8000f89c:	00019597          	auipc	a1,0x19
    8000f8a0:	d1458593          	addi	a1,a1,-748 # 800285b0 <.L__unnamed_10>
    8000f8a4:	fffff097          	auipc	ra,0xfffff
    8000f8a8:	2d2080e7          	jalr	722(ra) # 8000eb76 <_ZN4core6option15Option$LT$T$GT$6unwrap17h2ef2c85febc29d20E>
    8000f8ac:	e02a                	sd	a0,0(sp)
    8000f8ae:	a009                	j	8000f8b0 <.LBB4_8+0x14>
    8000f8b0:	6582                	ld	a1,0(sp)
    8000f8b2:	4501                	li	a0,0
    8000f8b4:	c188                	sw	a0,0(a1)
    8000f8b6:	0828                	addi	a0,sp,24
        buf.bwrite();
    8000f8b8:	ffff4097          	auipc	ra,0xffff4
    8000f8bc:	e68080e7          	jalr	-408(ra) # 80003720 <_ZN6kernel2fs3bio3Buf6bwrite17hec751387ebedcc62E>
    8000f8c0:	a009                	j	8000f8c2 <.LBB4_8+0x26>
        drop(buf);
    8000f8c2:	7562                	ld	a0,56(sp)
    8000f8c4:	f0aa                	sd	a0,96(sp)
    8000f8c6:	7542                	ld	a0,48(sp)
    8000f8c8:	ecaa                	sd	a0,88(sp)
    8000f8ca:	7522                	ld	a0,40(sp)
    8000f8cc:	e8aa                	sd	a0,80(sp)
    8000f8ce:	7502                	ld	a0,32(sp)
    8000f8d0:	e4aa                	sd	a0,72(sp)
    8000f8d2:	6562                	ld	a0,24(sp)
    8000f8d4:	e0aa                	sd	a0,64(sp)
    8000f8d6:	0088                	addi	a0,sp,64
    8000f8d8:	0000d097          	auipc	ra,0xd
    8000f8dc:	6b4080e7          	jalr	1716(ra) # 8001cf8c <_ZN4core3mem4drop17hda1e19029436deb9E>
    8000f8e0:	a009                	j	8000f8e2 <.LBB4_8+0x46>
    }
    8000f8e2:	70e6                	ld	ra,120(sp)
    8000f8e4:	6109                	addi	sp,sp,128
    8000f8e6:	8082                	ret

Disassembly of section .text._ZN6kernel2fs3log3Log13install_trans17h365e0e8a575b1656E:

000000008000f8e8 <_ZN6kernel2fs3log3Log13install_trans17h365e0e8a575b1656E>:
    fn install_trans(&mut self, recovering: bool) {
    8000f8e8:	7129                	addi	sp,sp,-320
    8000f8ea:	fe06                	sd	ra,312(sp)
    8000f8ec:	e4aa                	sd	a0,72(sp)
    8000f8ee:	862e                	mv	a2,a1
    8000f8f0:	e8b2                	sd	a2,80(sp)
    8000f8f2:	f22a                	sd	a0,288(sp)
    8000f8f4:	12b105a3          	sb	a1,299(sp)
        for i in 0..self.lh.len {
    8000f8f8:	490c                	lw	a1,16(a0)
    8000f8fa:	4501                	li	a0,0
    8000f8fc:	d4aa                	sw	a0,104(sp)
    8000f8fe:	d6ae                	sw	a1,108(sp)
    8000f900:	ffffc097          	auipc	ra,0xffffc
    8000f904:	09c080e7          	jalr	156(ra) # 8000b99c <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h2819071fbc006758E>
    8000f908:	ecaa                	sd	a0,88(sp)
    8000f90a:	f0ae                	sd	a1,96(sp)
    8000f90c:	a009                	j	8000f90e <_ZN6kernel2fs3log3Log13install_trans17h365e0e8a575b1656E+0x26>
    8000f90e:	7506                	ld	a0,96(sp)
    8000f910:	65e6                	ld	a1,88(sp)
    8000f912:	d8ae                	sw	a1,112(sp)
    8000f914:	daaa                	sw	a0,116(sp)
    8000f916:	a009                	j	8000f918 <_ZN6kernel2fs3log3Log13install_trans17h365e0e8a575b1656E+0x30>
    8000f918:	1888                	addi	a0,sp,112
    8000f91a:	ffffc097          	auipc	ra,0xffffc
    8000f91e:	f14080e7          	jalr	-236(ra) # 8000b82e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17he2f0092c6efc86cdE>
    8000f922:	dcaa                	sw	a0,120(sp)
    8000f924:	deae                	sw	a1,124(sp)
    8000f926:	a009                	j	8000f928 <_ZN6kernel2fs3log3Log13install_trans17h365e0e8a575b1656E+0x40>
    8000f928:	07816503          	lwu	a0,120(sp)
    8000f92c:	4581                	li	a1,0
    8000f92e:	00b50463          	beq	a0,a1,8000f936 <_ZN6kernel2fs3log3Log13install_trans17h365e0e8a575b1656E+0x4e>
    8000f932:	a009                	j	8000f934 <_ZN6kernel2fs3log3Log13install_trans17h365e0e8a575b1656E+0x4c>
    8000f934:	a029                	j	8000f93e <_ZN6kernel2fs3log3Log13install_trans17h365e0e8a575b1656E+0x56>
    }
    8000f936:	70f2                	ld	ra,312(sp)
    8000f938:	6131                	addi	sp,sp,320
    8000f93a:	8082                	ret
        for i in 0..self.lh.len {
    8000f93c:	0000                	unimp
    8000f93e:	6526                	ld	a0,72(sp)
    8000f940:	07c16583          	lwu	a1,124(sp)
    8000f944:	f82e                	sd	a1,48(sp)
    8000f946:	12b12623          	sw	a1,300(sp)
    8000f94a:	12b12823          	sw	a1,304(sp)
    8000f94e:	12b12a23          	sw	a1,308(sp)
            let log_buf  = BCACHE.bread(self.dev, self.start+1+i);
    8000f952:	00856583          	lwu	a1,8(a0)
    8000f956:	fc2e                	sd	a1,56(sp)
    8000f958:	00056503          	lwu	a0,0(a0)
    8000f95c:	00150593          	addi	a1,a0,1
    8000f960:	e0ae                	sd	a1,64(sp)
    8000f962:	02059513          	slli	a0,a1,0x20
    8000f966:	9101                	srli	a0,a0,0x20
    8000f968:	10b51063          	bne	a0,a1,8000fa68 <.LBB5_28>
    8000f96c:	a009                	j	8000f96e <_ZN6kernel2fs3log3Log13install_trans17h365e0e8a575b1656E+0x86>
    8000f96e:	75c2                	ld	a1,48(sp)
    8000f970:	6506                	ld	a0,64(sp)
    8000f972:	1502                	slli	a0,a0,0x20
    8000f974:	9101                	srli	a0,a0,0x20
    8000f976:	95aa                	add	a1,a1,a0
    8000f978:	f42e                	sd	a1,40(sp)
    8000f97a:	02059513          	slli	a0,a1,0x20
    8000f97e:	9101                	srli	a0,a0,0x20
    8000f980:	10b51263          	bne	a0,a1,8000fa84 <.LBB5_30>
    8000f984:	a009                	j	8000f986 <_ZN6kernel2fs3log3Log13install_trans17h365e0e8a575b1656E+0x9e>
    8000f986:	76a2                	ld	a3,40(sp)
    8000f988:	7662                	ld	a2,56(sp)

000000008000f98a <.LBB5_26>:
    8000f98a:	0001f597          	auipc	a1,0x1f
    8000f98e:	67658593          	addi	a1,a1,1654 # 8002f000 <_ZN6kernel2fs3bio6BCACHE17h4811aac4f8d79dc4E>
    8000f992:	0108                	addi	a0,sp,128
    8000f994:	ffff4097          	auipc	ra,0xffff4
    8000f998:	c68080e7          	jalr	-920(ra) # 800035fc <_ZN6kernel2fs3bio6Bcache5bread17h6ef915e4e896646bE>
    8000f99c:	a009                	j	8000f99e <.LBB5_26+0x14>
            let mut disk_buf = BCACHE.bread(self.dev, self.lh.blocknos[i as usize]);
    8000f99e:	7542                	ld	a0,48(sp)
    8000f9a0:	65a6                	ld	a1,72(sp)
    8000f9a2:	0085e583          	lwu	a1,8(a1)
    8000f9a6:	ec2e                	sd	a1,24(sp)
    8000f9a8:	0005059b          	sext.w	a1,a0
    8000f9ac:	f02a                	sd	a0,32(sp)
    8000f9ae:	4571                	li	a0,28
    8000f9b0:	0eb56863          	bltu	a0,a1,8000faa0 <.LBB5_31+0x14>
    8000f9b4:	a009                	j	8000f9b6 <.LBB5_26+0x2c>
    8000f9b6:	6662                	ld	a2,24(sp)
    8000f9b8:	6526                	ld	a0,72(sp)
    8000f9ba:	7582                	ld	a1,32(sp)
    8000f9bc:	058a                	slli	a1,a1,0x2
    8000f9be:	952e                	add	a0,a0,a1
    8000f9c0:	4954                	lw	a3,20(a0)

000000008000f9c2 <.LBB5_27>:
    8000f9c2:	0001f597          	auipc	a1,0x1f
    8000f9c6:	63e58593          	addi	a1,a1,1598 # 8002f000 <_ZN6kernel2fs3bio6BCACHE17h4811aac4f8d79dc4E>
    8000f9ca:	1128                	addi	a0,sp,168
    8000f9cc:	ffff4097          	auipc	ra,0xffff4
    8000f9d0:	c30080e7          	jalr	-976(ra) # 800035fc <_ZN6kernel2fs3bio6Bcache5bread17h6ef915e4e896646bE>
    8000f9d4:	a009                	j	8000f9d6 <.LBB5_27+0x14>
    8000f9d6:	0108                	addi	a0,sp,128
                    log_buf.raw_data(),
    8000f9d8:	ffff4097          	auipc	ra,0xffff4
    8000f9dc:	d6a080e7          	jalr	-662(ra) # 80003742 <_ZN6kernel2fs3bio3Buf8raw_data17h6a896fea03f7ee91E>
    8000f9e0:	e82a                	sd	a0,16(sp)
    8000f9e2:	a009                	j	8000f9e4 <.LBB5_27+0x22>
    8000f9e4:	1128                	addi	a0,sp,168
                    disk_buf.raw_data_mut(),
    8000f9e6:	ffff4097          	auipc	ra,0xffff4
    8000f9ea:	da0080e7          	jalr	-608(ra) # 80003786 <_ZN6kernel2fs3bio3Buf12raw_data_mut17hbae73c10d57c515dE>
    8000f9ee:	e42a                	sd	a0,8(sp)
    8000f9f0:	a009                	j	8000f9f2 <.LBB5_27+0x30>
                ptr::copy(
    8000f9f2:	65c2                	ld	a1,16(sp)
    8000f9f4:	6522                	ld	a0,8(sp)
    8000f9f6:	40000613          	li	a2,1024
    8000f9fa:	00015097          	auipc	ra,0x15
    8000f9fe:	656080e7          	jalr	1622(ra) # 80025050 <memmove>
    8000fa02:	a009                	j	8000fa04 <.LBB5_27+0x42>
    8000fa04:	1128                	addi	a0,sp,168
            disk_buf.bwrite();
    8000fa06:	ffff4097          	auipc	ra,0xffff4
    8000fa0a:	d1a080e7          	jalr	-742(ra) # 80003720 <_ZN6kernel2fs3bio3Buf6bwrite17hec751387ebedcc62E>
    8000fa0e:	a009                	j	8000fa10 <.LBB5_27+0x4e>
            if !recovering {
    8000fa10:	6546                	ld	a0,80(sp)
    8000fa12:	e901                	bnez	a0,8000fa22 <.LBB5_27+0x60>
    8000fa14:	a009                	j	8000fa16 <.LBB5_27+0x54>
    8000fa16:	1128                	addi	a0,sp,168
                unsafe { disk_buf.unpin(); }
    8000fa18:	ffff4097          	auipc	ra,0xffff4
    8000fa1c:	df2080e7          	jalr	-526(ra) # 8000380a <_ZN6kernel2fs3bio3Buf5unpin17h781e1439f4d799baE>
    8000fa20:	a011                	j	8000fa24 <.LBB5_27+0x62>
            if !recovering {
    8000fa22:	a011                	j	8000fa26 <.LBB5_27+0x64>
    8000fa24:	a009                	j	8000fa26 <.LBB5_27+0x64>
            drop(log_buf);
    8000fa26:	750a                	ld	a0,160(sp)
    8000fa28:	f9aa                	sd	a0,240(sp)
    8000fa2a:	656a                	ld	a0,152(sp)
    8000fa2c:	f5aa                	sd	a0,232(sp)
    8000fa2e:	654a                	ld	a0,144(sp)
    8000fa30:	f1aa                	sd	a0,224(sp)
    8000fa32:	652a                	ld	a0,136(sp)
    8000fa34:	edaa                	sd	a0,216(sp)
    8000fa36:	650a                	ld	a0,128(sp)
    8000fa38:	e9aa                	sd	a0,208(sp)
    8000fa3a:	0988                	addi	a0,sp,208
    8000fa3c:	0000d097          	auipc	ra,0xd
    8000fa40:	550080e7          	jalr	1360(ra) # 8001cf8c <_ZN4core3mem4drop17hda1e19029436deb9E>
    8000fa44:	a009                	j	8000fa46 <.LBB5_27+0x84>
            drop(disk_buf);
    8000fa46:	652e                	ld	a0,200(sp)
    8000fa48:	ee2a                	sd	a0,280(sp)
    8000fa4a:	650e                	ld	a0,192(sp)
    8000fa4c:	ea2a                	sd	a0,272(sp)
    8000fa4e:	756a                	ld	a0,184(sp)
    8000fa50:	e62a                	sd	a0,264(sp)
    8000fa52:	754a                	ld	a0,176(sp)
    8000fa54:	e22a                	sd	a0,256(sp)
    8000fa56:	752a                	ld	a0,168(sp)
    8000fa58:	fdaa                	sd	a0,248(sp)
    8000fa5a:	19a8                	addi	a0,sp,248
    8000fa5c:	0000d097          	auipc	ra,0xd
    8000fa60:	530080e7          	jalr	1328(ra) # 8001cf8c <_ZN4core3mem4drop17hda1e19029436deb9E>
    8000fa64:	a009                	j	8000fa66 <.LBB5_27+0xa4>
        for i in 0..self.lh.len {
    8000fa66:	bd4d                	j	8000f918 <_ZN6kernel2fs3log3Log13install_trans17h365e0e8a575b1656E+0x30>

000000008000fa68 <.LBB5_28>:
            let log_buf  = BCACHE.bread(self.dev, self.start+1+i);
    8000fa68:	00019517          	auipc	a0,0x19
    8000fa6c:	b7850513          	addi	a0,a0,-1160 # 800285e0 <str.1>

000000008000fa70 <.LBB5_29>:
    8000fa70:	00019617          	auipc	a2,0x19
    8000fa74:	b5860613          	addi	a2,a2,-1192 # 800285c8 <.L__unnamed_11>
    8000fa78:	45f1                	li	a1,28
    8000fa7a:	00012097          	auipc	ra,0x12
    8000fa7e:	682080e7          	jalr	1666(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008000fa84 <.LBB5_30>:
    8000fa84:	00019517          	auipc	a0,0x19
    8000fa88:	b5c50513          	addi	a0,a0,-1188 # 800285e0 <str.1>

000000008000fa8c <.LBB5_31>:
    8000fa8c:	00019617          	auipc	a2,0x19
    8000fa90:	b3c60613          	addi	a2,a2,-1220 # 800285c8 <.L__unnamed_11>
    8000fa94:	45f1                	li	a1,28
    8000fa96:	00012097          	auipc	ra,0x12
    8000fa9a:	666080e7          	jalr	1638(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8000fa9e:	0000                	unimp
            let mut disk_buf = BCACHE.bread(self.dev, self.lh.blocknos[i as usize]);
    8000faa0:	7502                	ld	a0,32(sp)

000000008000faa2 <.LBB5_32>:
    8000faa2:	00019617          	auipc	a2,0x19
    8000faa6:	b5e60613          	addi	a2,a2,-1186 # 80028600 <.L__unnamed_12>
    8000faaa:	45f5                	li	a1,29
    8000faac:	00012097          	auipc	ra,0x12
    8000fab0:	67c080e7          	jalr	1660(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel2fs3log3Log6commit17hb6044c935645b581E:

000000008000fab6 <_ZN6kernel2fs3log3Log6commit17hb6044c935645b581E>:
    pub unsafe fn commit(&mut self) {
    8000fab6:	1101                	addi	sp,sp,-32
    8000fab8:	ec06                	sd	ra,24(sp)
    8000faba:	e02a                	sd	a0,0(sp)
    8000fabc:	e82a                	sd	a0,16(sp)
        if !self.committing {
    8000fabe:	08854503          	lbu	a0,136(a0)
    8000fac2:	8905                	andi	a0,a0,1
    8000fac4:	e10d                	bnez	a0,8000fae6 <.LBB6_11+0x16>
    8000fac6:	a009                	j	8000fac8 <.LBB6_10>

000000008000fac8 <.LBB6_10>:
            panic!("log: committing while the committing flag is not set");
    8000fac8:	00019517          	auipc	a0,0x19
    8000facc:	b5050513          	addi	a0,a0,-1200 # 80028618 <.L__unnamed_13>

000000008000fad0 <.LBB6_11>:
    8000fad0:	00019617          	auipc	a2,0x19
    8000fad4:	b8060613          	addi	a2,a2,-1152 # 80028650 <.L__unnamed_14>
    8000fad8:	03400593          	li	a1,52
    8000fadc:	00012097          	auipc	ra,0x12
    8000fae0:	620080e7          	jalr	1568(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8000fae4:	0000                	unimp
        if self.lh.len > 0 {
    8000fae6:	6502                	ld	a0,0(sp)
    8000fae8:	4908                	lw	a0,16(a0)
    8000faea:	4581                	li	a1,0
    8000faec:	00b50963          	beq	a0,a1,8000fafe <.LBB6_11+0x2e>
    8000faf0:	a009                	j	8000faf2 <.LBB6_11+0x22>
            self.write_log();
    8000faf2:	6502                	ld	a0,0(sp)
    8000faf4:	00000097          	auipc	ra,0x0
    8000faf8:	03a080e7          	jalr	58(ra) # 8000fb2e <_ZN6kernel2fs3log3Log9write_log17hf6e116b9849c70aeE>
    8000fafc:	a011                	j	8000fb00 <.LBB6_11+0x30>
        if self.lh.len > 0 {
    8000fafe:	a02d                	j	8000fb28 <.LBB6_11+0x58>
            self.write_head();
    8000fb00:	6502                	ld	a0,0(sp)
    8000fb02:	00000097          	auipc	ra,0x0
    8000fb06:	ce2080e7          	jalr	-798(ra) # 8000f7e4 <_ZN6kernel2fs3log3Log10write_head17hcfa90aedd37d0ff2E>
    8000fb0a:	a009                	j	8000fb0c <.LBB6_11+0x3c>
            self.install_trans(false);
    8000fb0c:	6502                	ld	a0,0(sp)
    8000fb0e:	4581                	li	a1,0
    8000fb10:	00000097          	auipc	ra,0x0
    8000fb14:	dd8080e7          	jalr	-552(ra) # 8000f8e8 <_ZN6kernel2fs3log3Log13install_trans17h365e0e8a575b1656E>
    8000fb18:	a009                	j	8000fb1a <.LBB6_11+0x4a>
            self.empty_head();
    8000fb1a:	6502                	ld	a0,0(sp)
    8000fb1c:	00000097          	auipc	ra,0x0
    8000fb20:	d3e080e7          	jalr	-706(ra) # 8000f85a <_ZN6kernel2fs3log3Log10empty_head17hfcefa6f849cc86acE>
    8000fb24:	a009                	j	8000fb26 <.LBB6_11+0x56>
        if self.lh.len > 0 {
    8000fb26:	a009                	j	8000fb28 <.LBB6_11+0x58>
    }
    8000fb28:	60e2                	ld	ra,24(sp)
    8000fb2a:	6105                	addi	sp,sp,32
    8000fb2c:	8082                	ret

Disassembly of section .text._ZN6kernel2fs3log3Log9write_log17hf6e116b9849c70aeE:

000000008000fb2e <_ZN6kernel2fs3log3Log9write_log17hf6e116b9849c70aeE>:
    fn write_log(&mut self) {
    8000fb2e:	7169                	addi	sp,sp,-304
    8000fb30:	f606                	sd	ra,296(sp)
    8000fb32:	e0aa                	sd	a0,64(sp)
    8000fb34:	ea2a                	sd	a0,272(sp)
        for i in 0..self.lh.len {
    8000fb36:	490c                	lw	a1,16(a0)
    8000fb38:	4501                	li	a0,0
    8000fb3a:	ccaa                	sw	a0,88(sp)
    8000fb3c:	ceae                	sw	a1,92(sp)
    8000fb3e:	ffffc097          	auipc	ra,0xffffc
    8000fb42:	e5e080e7          	jalr	-418(ra) # 8000b99c <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h2819071fbc006758E>
    8000fb46:	e4aa                	sd	a0,72(sp)
    8000fb48:	e8ae                	sd	a1,80(sp)
    8000fb4a:	a009                	j	8000fb4c <_ZN6kernel2fs3log3Log9write_log17hf6e116b9849c70aeE+0x1e>
    8000fb4c:	6546                	ld	a0,80(sp)
    8000fb4e:	65a6                	ld	a1,72(sp)
    8000fb50:	d0ae                	sw	a1,96(sp)
    8000fb52:	d2aa                	sw	a0,100(sp)
    8000fb54:	a009                	j	8000fb56 <_ZN6kernel2fs3log3Log9write_log17hf6e116b9849c70aeE+0x28>
    8000fb56:	1088                	addi	a0,sp,96
    8000fb58:	ffffc097          	auipc	ra,0xffffc
    8000fb5c:	cd6080e7          	jalr	-810(ra) # 8000b82e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17he2f0092c6efc86cdE>
    8000fb60:	d4aa                	sw	a0,104(sp)
    8000fb62:	d6ae                	sw	a1,108(sp)
    8000fb64:	a009                	j	8000fb66 <_ZN6kernel2fs3log3Log9write_log17hf6e116b9849c70aeE+0x38>
    8000fb66:	06816503          	lwu	a0,104(sp)
    8000fb6a:	4581                	li	a1,0
    8000fb6c:	00b50463          	beq	a0,a1,8000fb74 <_ZN6kernel2fs3log3Log9write_log17hf6e116b9849c70aeE+0x46>
    8000fb70:	a009                	j	8000fb72 <_ZN6kernel2fs3log3Log9write_log17hf6e116b9849c70aeE+0x44>
    8000fb72:	a029                	j	8000fb7c <_ZN6kernel2fs3log3Log9write_log17hf6e116b9849c70aeE+0x4e>
    }
    8000fb74:	70b2                	ld	ra,296(sp)
    8000fb76:	6155                	addi	sp,sp,304
    8000fb78:	8082                	ret
        for i in 0..self.lh.len {
    8000fb7a:	0000                	unimp
    8000fb7c:	6506                	ld	a0,64(sp)
    8000fb7e:	06c16583          	lwu	a1,108(sp)
    8000fb82:	f42e                	sd	a1,40(sp)
    8000fb84:	10b12e23          	sw	a1,284(sp)
    8000fb88:	12b12023          	sw	a1,288(sp)
    8000fb8c:	12b12223          	sw	a1,292(sp)
            let mut log_buf  = BCACHE.bread(self.dev, self.start+1+i);
    8000fb90:	00856583          	lwu	a1,8(a0)
    8000fb94:	f82e                	sd	a1,48(sp)
    8000fb96:	00056503          	lwu	a0,0(a0)
    8000fb9a:	00150593          	addi	a1,a0,1
    8000fb9e:	fc2e                	sd	a1,56(sp)
    8000fba0:	02059513          	slli	a0,a1,0x20
    8000fba4:	9101                	srli	a0,a0,0x20
    8000fba6:	0eb51563          	bne	a0,a1,8000fc90 <.LBB7_24>
    8000fbaa:	a009                	j	8000fbac <_ZN6kernel2fs3log3Log9write_log17hf6e116b9849c70aeE+0x7e>
    8000fbac:	75a2                	ld	a1,40(sp)
    8000fbae:	7562                	ld	a0,56(sp)
    8000fbb0:	1502                	slli	a0,a0,0x20
    8000fbb2:	9101                	srli	a0,a0,0x20
    8000fbb4:	95aa                	add	a1,a1,a0
    8000fbb6:	f02e                	sd	a1,32(sp)
    8000fbb8:	02059513          	slli	a0,a1,0x20
    8000fbbc:	9101                	srli	a0,a0,0x20
    8000fbbe:	0eb51763          	bne	a0,a1,8000fcac <.LBB7_26>
    8000fbc2:	a009                	j	8000fbc4 <_ZN6kernel2fs3log3Log9write_log17hf6e116b9849c70aeE+0x96>
    8000fbc4:	7682                	ld	a3,32(sp)
    8000fbc6:	7642                	ld	a2,48(sp)

000000008000fbc8 <.LBB7_22>:
    8000fbc8:	0001f597          	auipc	a1,0x1f
    8000fbcc:	43858593          	addi	a1,a1,1080 # 8002f000 <_ZN6kernel2fs3bio6BCACHE17h4811aac4f8d79dc4E>
    8000fbd0:	1888                	addi	a0,sp,112
    8000fbd2:	ffff4097          	auipc	ra,0xffff4
    8000fbd6:	a2a080e7          	jalr	-1494(ra) # 800035fc <_ZN6kernel2fs3bio6Bcache5bread17h6ef915e4e896646bE>
    8000fbda:	a009                	j	8000fbdc <.LBB7_22+0x14>
            let cache_buf = BCACHE.bread(self.dev, self.lh.blocknos[i as usize]);
    8000fbdc:	7522                	ld	a0,40(sp)
    8000fbde:	6586                	ld	a1,64(sp)
    8000fbe0:	0085e583          	lwu	a1,8(a1)
    8000fbe4:	e82e                	sd	a1,16(sp)
    8000fbe6:	0005059b          	sext.w	a1,a0
    8000fbea:	ec2a                	sd	a0,24(sp)
    8000fbec:	4571                	li	a0,28
    8000fbee:	0cb56d63          	bltu	a0,a1,8000fcc8 <.LBB7_27+0x14>
    8000fbf2:	a009                	j	8000fbf4 <.LBB7_22+0x2c>
    8000fbf4:	6642                	ld	a2,16(sp)
    8000fbf6:	6506                	ld	a0,64(sp)
    8000fbf8:	65e2                	ld	a1,24(sp)
    8000fbfa:	058a                	slli	a1,a1,0x2
    8000fbfc:	952e                	add	a0,a0,a1
    8000fbfe:	4954                	lw	a3,20(a0)

000000008000fc00 <.LBB7_23>:
    8000fc00:	0001f597          	auipc	a1,0x1f
    8000fc04:	40058593          	addi	a1,a1,1024 # 8002f000 <_ZN6kernel2fs3bio6BCACHE17h4811aac4f8d79dc4E>
    8000fc08:	0928                	addi	a0,sp,152
    8000fc0a:	ffff4097          	auipc	ra,0xffff4
    8000fc0e:	9f2080e7          	jalr	-1550(ra) # 800035fc <_ZN6kernel2fs3bio6Bcache5bread17h6ef915e4e896646bE>
    8000fc12:	a009                	j	8000fc14 <.LBB7_23+0x14>
    8000fc14:	0928                	addi	a0,sp,152
                    cache_buf.raw_data(),
    8000fc16:	ffff4097          	auipc	ra,0xffff4
    8000fc1a:	b2c080e7          	jalr	-1236(ra) # 80003742 <_ZN6kernel2fs3bio3Buf8raw_data17h6a896fea03f7ee91E>
    8000fc1e:	e42a                	sd	a0,8(sp)
    8000fc20:	a009                	j	8000fc22 <.LBB7_23+0x22>
    8000fc22:	1888                	addi	a0,sp,112
                    log_buf.raw_data_mut(),
    8000fc24:	ffff4097          	auipc	ra,0xffff4
    8000fc28:	b62080e7          	jalr	-1182(ra) # 80003786 <_ZN6kernel2fs3bio3Buf12raw_data_mut17hbae73c10d57c515dE>
    8000fc2c:	e02a                	sd	a0,0(sp)
    8000fc2e:	a009                	j	8000fc30 <.LBB7_23+0x30>
                ptr::copy(
    8000fc30:	65a2                	ld	a1,8(sp)
    8000fc32:	6502                	ld	a0,0(sp)
    8000fc34:	40000613          	li	a2,1024
    8000fc38:	00015097          	auipc	ra,0x15
    8000fc3c:	418080e7          	jalr	1048(ra) # 80025050 <memmove>
    8000fc40:	a009                	j	8000fc42 <.LBB7_23+0x42>
    8000fc42:	1888                	addi	a0,sp,112
            log_buf.bwrite();
    8000fc44:	ffff4097          	auipc	ra,0xffff4
    8000fc48:	adc080e7          	jalr	-1316(ra) # 80003720 <_ZN6kernel2fs3bio3Buf6bwrite17hec751387ebedcc62E>
    8000fc4c:	a009                	j	8000fc4e <.LBB7_23+0x4e>
            drop(cache_buf);
    8000fc4e:	756a                	ld	a0,184(sp)
    8000fc50:	f1aa                	sd	a0,224(sp)
    8000fc52:	754a                	ld	a0,176(sp)
    8000fc54:	edaa                	sd	a0,216(sp)
    8000fc56:	752a                	ld	a0,168(sp)
    8000fc58:	e9aa                	sd	a0,208(sp)
    8000fc5a:	750a                	ld	a0,160(sp)
    8000fc5c:	e5aa                	sd	a0,200(sp)
    8000fc5e:	656a                	ld	a0,152(sp)
    8000fc60:	e1aa                	sd	a0,192(sp)
    8000fc62:	0188                	addi	a0,sp,192
    8000fc64:	0000d097          	auipc	ra,0xd
    8000fc68:	328080e7          	jalr	808(ra) # 8001cf8c <_ZN4core3mem4drop17hda1e19029436deb9E>
    8000fc6c:	a009                	j	8000fc6e <.LBB7_23+0x6e>
            drop(log_buf);
    8000fc6e:	654a                	ld	a0,144(sp)
    8000fc70:	e62a                	sd	a0,264(sp)
    8000fc72:	652a                	ld	a0,136(sp)
    8000fc74:	e22a                	sd	a0,256(sp)
    8000fc76:	650a                	ld	a0,128(sp)
    8000fc78:	fdaa                	sd	a0,248(sp)
    8000fc7a:	7566                	ld	a0,120(sp)
    8000fc7c:	f9aa                	sd	a0,240(sp)
    8000fc7e:	7546                	ld	a0,112(sp)
    8000fc80:	f5aa                	sd	a0,232(sp)
    8000fc82:	11a8                	addi	a0,sp,232
    8000fc84:	0000d097          	auipc	ra,0xd
    8000fc88:	308080e7          	jalr	776(ra) # 8001cf8c <_ZN4core3mem4drop17hda1e19029436deb9E>
    8000fc8c:	a009                	j	8000fc8e <.LBB7_23+0x8e>
        for i in 0..self.lh.len {
    8000fc8e:	b5e1                	j	8000fb56 <_ZN6kernel2fs3log3Log9write_log17hf6e116b9849c70aeE+0x28>

000000008000fc90 <.LBB7_24>:
            let mut log_buf  = BCACHE.bread(self.dev, self.start+1+i);
    8000fc90:	00019517          	auipc	a0,0x19
    8000fc94:	95050513          	addi	a0,a0,-1712 # 800285e0 <str.1>

000000008000fc98 <.LBB7_25>:
    8000fc98:	00019617          	auipc	a2,0x19
    8000fc9c:	9d060613          	addi	a2,a2,-1584 # 80028668 <.L__unnamed_15>
    8000fca0:	45f1                	li	a1,28
    8000fca2:	00012097          	auipc	ra,0x12
    8000fca6:	45a080e7          	jalr	1114(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008000fcac <.LBB7_26>:
    8000fcac:	00019517          	auipc	a0,0x19
    8000fcb0:	93450513          	addi	a0,a0,-1740 # 800285e0 <str.1>

000000008000fcb4 <.LBB7_27>:
    8000fcb4:	00019617          	auipc	a2,0x19
    8000fcb8:	9b460613          	addi	a2,a2,-1612 # 80028668 <.L__unnamed_15>
    8000fcbc:	45f1                	li	a1,28
    8000fcbe:	00012097          	auipc	ra,0x12
    8000fcc2:	43e080e7          	jalr	1086(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8000fcc6:	0000                	unimp
            let cache_buf = BCACHE.bread(self.dev, self.lh.blocknos[i as usize]);
    8000fcc8:	6562                	ld	a0,24(sp)

000000008000fcca <.LBB7_28>:
    8000fcca:	00019617          	auipc	a2,0x19
    8000fcce:	9b660613          	addi	a2,a2,-1610 # 80028680 <.L__unnamed_16>
    8000fcd2:	45f5                	li	a1,29
    8000fcd4:	00012097          	auipc	ra,0x12
    8000fcd8:	454080e7          	jalr	1108(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN4core4sync6atomic10atomic_add17hcefa99837e5e8934E:

000000008000fcde <_ZN4core4sync6atomic10atomic_add17hcefa99837e5e8934E>:
unsafe fn atomic_add<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {
    8000fcde:	7139                	addi	sp,sp,-64
    8000fce0:	e42e                	sd	a1,8(sp)
    8000fce2:	e82a                	sd	a0,16(sp)
    8000fce4:	02c103a3          	sb	a2,39(sp)
    8000fce8:	f82a                	sd	a0,48(sp)
    8000fcea:	fc2e                	sd	a1,56(sp)
            Acquire => intrinsics::atomic_xadd_acq(dst, val),
    8000fcec:	0ff67513          	andi	a0,a2,255
    8000fcf0:	ec2a                	sd	a0,24(sp)
    8000fcf2:	6562                	ld	a0,24(sp)
    8000fcf4:	050e                	slli	a0,a0,0x3

000000008000fcf6 <.LBB0_14>:
    8000fcf6:	00019597          	auipc	a1,0x19
    8000fcfa:	9a258593          	addi	a1,a1,-1630 # 80028698 <.LJTI0_0>
    8000fcfe:	952e                	add	a0,a0,a1
    8000fd00:	6108                	ld	a0,0(a0)
    8000fd02:	8502                	jr	a0

000000008000fd04 <.LBB0_2>:
            SeqCst => intrinsics::atomic_xadd(dst, val),
    8000fd04:	6542                	ld	a0,16(sp)
    8000fd06:	65a2                	ld	a1,8(sp)
    8000fd08:	06b5352f          	amoadd.d.aqrl	a0,a1,(a0)
    8000fd0c:	f42a                	sd	a0,40(sp)
    8000fd0e:	a835                	j	8000fd4a <.LBB0_10+0xe>
	...

000000008000fd12 <.LBB0_4>:
            Acquire => intrinsics::atomic_xadd_acq(dst, val),
    8000fd12:	6542                	ld	a0,16(sp)
    8000fd14:	65a2                	ld	a1,8(sp)
    8000fd16:	04b5352f          	amoadd.d.aq	a0,a1,(a0)
    8000fd1a:	f42a                	sd	a0,40(sp)
    8000fd1c:	a009                	j	8000fd1e <.LBB0_4+0xc>
        match order {
    8000fd1e:	a03d                	j	8000fd4c <.LBB0_10+0x10>

000000008000fd20 <.LBB0_6>:
            Release => intrinsics::atomic_xadd_rel(dst, val),
    8000fd20:	6542                	ld	a0,16(sp)
    8000fd22:	65a2                	ld	a1,8(sp)
    8000fd24:	02b5352f          	amoadd.d.rl	a0,a1,(a0)
    8000fd28:	f42a                	sd	a0,40(sp)
    8000fd2a:	a009                	j	8000fd2c <.LBB0_6+0xc>
        match order {
    8000fd2c:	a005                	j	8000fd4c <.LBB0_10+0x10>

000000008000fd2e <.LBB0_8>:
            AcqRel => intrinsics::atomic_xadd_acqrel(dst, val),
    8000fd2e:	6542                	ld	a0,16(sp)
    8000fd30:	65a2                	ld	a1,8(sp)
    8000fd32:	06b5352f          	amoadd.d.aqrl	a0,a1,(a0)
    8000fd36:	f42a                	sd	a0,40(sp)
    8000fd38:	a009                	j	8000fd3a <.LBB0_8+0xc>
        match order {
    8000fd3a:	a809                	j	8000fd4c <.LBB0_10+0x10>

000000008000fd3c <.LBB0_10>:
            Relaxed => intrinsics::atomic_xadd_relaxed(dst, val),
    8000fd3c:	6542                	ld	a0,16(sp)
    8000fd3e:	65a2                	ld	a1,8(sp)
    8000fd40:	00b5352f          	amoadd.d	a0,a1,(a0)
    8000fd44:	f42a                	sd	a0,40(sp)
    8000fd46:	a009                	j	8000fd48 <.LBB0_10+0xc>
        match order {
    8000fd48:	a011                	j	8000fd4c <.LBB0_10+0x10>
    8000fd4a:	a009                	j	8000fd4c <.LBB0_10+0x10>
}
    8000fd4c:	7522                	ld	a0,40(sp)
    8000fd4e:	6121                	addi	sp,sp,64
    8000fd50:	8082                	ret

Disassembly of section .text._ZN4core4sync6atomic10atomic_sub17ha62074418a99a7bbE:

000000008000fd52 <_ZN4core4sync6atomic10atomic_sub17ha62074418a99a7bbE>:
unsafe fn atomic_sub<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {
    8000fd52:	7139                	addi	sp,sp,-64
    8000fd54:	e42e                	sd	a1,8(sp)
    8000fd56:	e82a                	sd	a0,16(sp)
    8000fd58:	02c103a3          	sb	a2,39(sp)
    8000fd5c:	f82a                	sd	a0,48(sp)
    8000fd5e:	fc2e                	sd	a1,56(sp)
            Acquire => intrinsics::atomic_xsub_acq(dst, val),
    8000fd60:	0ff67513          	andi	a0,a2,255
    8000fd64:	ec2a                	sd	a0,24(sp)
    8000fd66:	6562                	ld	a0,24(sp)
    8000fd68:	050e                	slli	a0,a0,0x3

000000008000fd6a <.LBB1_14>:
    8000fd6a:	00019597          	auipc	a1,0x19
    8000fd6e:	95658593          	addi	a1,a1,-1706 # 800286c0 <.LJTI1_0>
    8000fd72:	952e                	add	a0,a0,a1
    8000fd74:	6108                	ld	a0,0(a0)
    8000fd76:	8502                	jr	a0

000000008000fd78 <.LBB1_2>:
            SeqCst => intrinsics::atomic_xsub(dst, val),
    8000fd78:	6542                	ld	a0,16(sp)
    8000fd7a:	65a2                	ld	a1,8(sp)
    8000fd7c:	40b005b3          	neg	a1,a1
    8000fd80:	06b5352f          	amoadd.d.aqrl	a0,a1,(a0)
    8000fd84:	f42a                	sd	a0,40(sp)
    8000fd86:	a0b1                	j	8000fdd2 <.LBB1_10+0x12>
	...

000000008000fd8a <.LBB1_4>:
            Acquire => intrinsics::atomic_xsub_acq(dst, val),
    8000fd8a:	6542                	ld	a0,16(sp)
    8000fd8c:	65a2                	ld	a1,8(sp)
    8000fd8e:	40b005b3          	neg	a1,a1
    8000fd92:	04b5352f          	amoadd.d.aq	a0,a1,(a0)
    8000fd96:	f42a                	sd	a0,40(sp)
    8000fd98:	a009                	j	8000fd9a <.LBB1_4+0x10>
        match order {
    8000fd9a:	a82d                	j	8000fdd4 <.LBB1_10+0x14>

000000008000fd9c <.LBB1_6>:
            Release => intrinsics::atomic_xsub_rel(dst, val),
    8000fd9c:	6542                	ld	a0,16(sp)
    8000fd9e:	65a2                	ld	a1,8(sp)
    8000fda0:	40b005b3          	neg	a1,a1
    8000fda4:	02b5352f          	amoadd.d.rl	a0,a1,(a0)
    8000fda8:	f42a                	sd	a0,40(sp)
    8000fdaa:	a009                	j	8000fdac <.LBB1_6+0x10>
        match order {
    8000fdac:	a025                	j	8000fdd4 <.LBB1_10+0x14>

000000008000fdae <.LBB1_8>:
            AcqRel => intrinsics::atomic_xsub_acqrel(dst, val),
    8000fdae:	6542                	ld	a0,16(sp)
    8000fdb0:	65a2                	ld	a1,8(sp)
    8000fdb2:	40b005b3          	neg	a1,a1
    8000fdb6:	06b5352f          	amoadd.d.aqrl	a0,a1,(a0)
    8000fdba:	f42a                	sd	a0,40(sp)
    8000fdbc:	a009                	j	8000fdbe <.LBB1_8+0x10>
        match order {
    8000fdbe:	a819                	j	8000fdd4 <.LBB1_10+0x14>

000000008000fdc0 <.LBB1_10>:
            Relaxed => intrinsics::atomic_xsub_relaxed(dst, val),
    8000fdc0:	6542                	ld	a0,16(sp)
    8000fdc2:	65a2                	ld	a1,8(sp)
    8000fdc4:	40b005b3          	neg	a1,a1
    8000fdc8:	00b5352f          	amoadd.d	a0,a1,(a0)
    8000fdcc:	f42a                	sd	a0,40(sp)
    8000fdce:	a009                	j	8000fdd0 <.LBB1_10+0x10>
        match order {
    8000fdd0:	a011                	j	8000fdd4 <.LBB1_10+0x14>
    8000fdd2:	a009                	j	8000fdd4 <.LBB1_10+0x14>
}
    8000fdd4:	7522                	ld	a0,40(sp)
    8000fdd6:	6121                	addi	sp,sp,64
    8000fdd8:	8082                	ret

Disassembly of section .text._ZN4core4sync6atomic11atomic_swap17hdd22e709589114eaE:

000000008000fdda <_ZN4core4sync6atomic11atomic_swap17hdd22e709589114eaE>:
unsafe fn atomic_swap<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {
    8000fdda:	7179                	addi	sp,sp,-48
    8000fddc:	e02a                	sd	a0,0(sp)
    8000fdde:	86ae                	mv	a3,a1
    8000fde0:	e436                	sd	a3,8(sp)
    8000fde2:	00c10f23          	sb	a2,30(sp)
    8000fde6:	f02a                	sd	a0,32(sp)
    8000fde8:	02b107a3          	sb	a1,47(sp)
            Acquire => intrinsics::atomic_xchg_acq(dst, val),
    8000fdec:	0ff67513          	andi	a0,a2,255
    8000fdf0:	e82a                	sd	a0,16(sp)
    8000fdf2:	6542                	ld	a0,16(sp)
    8000fdf4:	050e                	slli	a0,a0,0x3

000000008000fdf6 <.LBB2_14>:
    8000fdf6:	00019597          	auipc	a1,0x19
    8000fdfa:	8f258593          	addi	a1,a1,-1806 # 800286e8 <.LJTI2_0>
    8000fdfe:	952e                	add	a0,a0,a1
    8000fe00:	6108                	ld	a0,0(a0)
    8000fe02:	8502                	jr	a0

000000008000fe04 <.LBB2_2>:
            SeqCst => intrinsics::atomic_xchg(dst, val),
    8000fe04:	6522                	ld	a0,8(sp)
    8000fe06:	6582                	ld	a1,0(sp)
    8000fe08:	ffc5f693          	andi	a3,a1,-4
    8000fe0c:	058e                	slli	a1,a1,0x3
    8000fe0e:	0ff00613          	li	a2,255
    8000fe12:	00b617bb          	sllw	a5,a2,a1
    8000fe16:	0ff57513          	andi	a0,a0,255
    8000fe1a:	00b5173b          	sllw	a4,a0,a1
    8000fe1e:	1606a52f          	lr.w.aqrl	a0,(a3)
    8000fe22:	863a                	mv	a2,a4
    8000fe24:	8e29                	xor	a2,a2,a0
    8000fe26:	8e7d                	and	a2,a2,a5
    8000fe28:	8e29                	xor	a2,a2,a0
    8000fe2a:	1ec6a62f          	sc.w.aqrl	a2,a2,(a3)
    8000fe2e:	fa65                	bnez	a2,8000fe1e <.LBB2_2+0x1a>
    8000fe30:	00b5553b          	srlw	a0,a0,a1
    8000fe34:	00a10fa3          	sb	a0,31(sp)
    8000fe38:	a0d5                	j	8000ff1c <.LBB2_10+0x38>
	...

000000008000fe3c <.LBB2_4>:
            Acquire => intrinsics::atomic_xchg_acq(dst, val),
    8000fe3c:	6522                	ld	a0,8(sp)
    8000fe3e:	6582                	ld	a1,0(sp)
    8000fe40:	ffc5f693          	andi	a3,a1,-4
    8000fe44:	058e                	slli	a1,a1,0x3
    8000fe46:	0ff00613          	li	a2,255
    8000fe4a:	00b617bb          	sllw	a5,a2,a1
    8000fe4e:	0ff57513          	andi	a0,a0,255
    8000fe52:	00b5173b          	sllw	a4,a0,a1
    8000fe56:	1406a52f          	lr.w.aq	a0,(a3)
    8000fe5a:	863a                	mv	a2,a4
    8000fe5c:	8e29                	xor	a2,a2,a0
    8000fe5e:	8e7d                	and	a2,a2,a5
    8000fe60:	8e29                	xor	a2,a2,a0
    8000fe62:	18c6a62f          	sc.w	a2,a2,(a3)
    8000fe66:	fa65                	bnez	a2,8000fe56 <.LBB2_4+0x1a>
    8000fe68:	00b5553b          	srlw	a0,a0,a1
    8000fe6c:	00a10fa3          	sb	a0,31(sp)
    8000fe70:	a009                	j	8000fe72 <.LBB2_4+0x36>
        match order {
    8000fe72:	a075                	j	8000ff1e <.LBB2_10+0x3a>

000000008000fe74 <.LBB2_6>:
            Release => intrinsics::atomic_xchg_rel(dst, val),
    8000fe74:	6522                	ld	a0,8(sp)
    8000fe76:	6582                	ld	a1,0(sp)
    8000fe78:	ffc5f693          	andi	a3,a1,-4
    8000fe7c:	058e                	slli	a1,a1,0x3
    8000fe7e:	0ff00613          	li	a2,255
    8000fe82:	00b617bb          	sllw	a5,a2,a1
    8000fe86:	0ff57513          	andi	a0,a0,255
    8000fe8a:	00b5173b          	sllw	a4,a0,a1
    8000fe8e:	1006a52f          	lr.w	a0,(a3)
    8000fe92:	863a                	mv	a2,a4
    8000fe94:	8e29                	xor	a2,a2,a0
    8000fe96:	8e7d                	and	a2,a2,a5
    8000fe98:	8e29                	xor	a2,a2,a0
    8000fe9a:	1ac6a62f          	sc.w.rl	a2,a2,(a3)
    8000fe9e:	fa65                	bnez	a2,8000fe8e <.LBB2_6+0x1a>
    8000fea0:	00b5553b          	srlw	a0,a0,a1
    8000fea4:	00a10fa3          	sb	a0,31(sp)
    8000fea8:	a009                	j	8000feaa <.LBB2_6+0x36>
        match order {
    8000feaa:	a895                	j	8000ff1e <.LBB2_10+0x3a>

000000008000feac <.LBB2_8>:
            AcqRel => intrinsics::atomic_xchg_acqrel(dst, val),
    8000feac:	6522                	ld	a0,8(sp)
    8000feae:	6582                	ld	a1,0(sp)
    8000feb0:	ffc5f693          	andi	a3,a1,-4
    8000feb4:	058e                	slli	a1,a1,0x3
    8000feb6:	0ff00613          	li	a2,255
    8000feba:	00b617bb          	sllw	a5,a2,a1
    8000febe:	0ff57513          	andi	a0,a0,255
    8000fec2:	00b5173b          	sllw	a4,a0,a1
    8000fec6:	1406a52f          	lr.w.aq	a0,(a3)
    8000feca:	863a                	mv	a2,a4
    8000fecc:	8e29                	xor	a2,a2,a0
    8000fece:	8e7d                	and	a2,a2,a5
    8000fed0:	8e29                	xor	a2,a2,a0
    8000fed2:	1ac6a62f          	sc.w.rl	a2,a2,(a3)
    8000fed6:	fa65                	bnez	a2,8000fec6 <.LBB2_8+0x1a>
    8000fed8:	00b5553b          	srlw	a0,a0,a1
    8000fedc:	00a10fa3          	sb	a0,31(sp)
    8000fee0:	a009                	j	8000fee2 <.LBB2_8+0x36>
        match order {
    8000fee2:	a835                	j	8000ff1e <.LBB2_10+0x3a>

000000008000fee4 <.LBB2_10>:
            Relaxed => intrinsics::atomic_xchg_relaxed(dst, val),
    8000fee4:	6522                	ld	a0,8(sp)
    8000fee6:	6582                	ld	a1,0(sp)
    8000fee8:	ffc5f693          	andi	a3,a1,-4
    8000feec:	058e                	slli	a1,a1,0x3
    8000feee:	0ff00613          	li	a2,255
    8000fef2:	00b617bb          	sllw	a5,a2,a1
    8000fef6:	0ff57513          	andi	a0,a0,255
    8000fefa:	00b5173b          	sllw	a4,a0,a1
    8000fefe:	1006a52f          	lr.w	a0,(a3)
    8000ff02:	863a                	mv	a2,a4
    8000ff04:	8e29                	xor	a2,a2,a0
    8000ff06:	8e7d                	and	a2,a2,a5
    8000ff08:	8e29                	xor	a2,a2,a0
    8000ff0a:	18c6a62f          	sc.w	a2,a2,(a3)
    8000ff0e:	fa65                	bnez	a2,8000fefe <.LBB2_10+0x1a>
    8000ff10:	00b5553b          	srlw	a0,a0,a1
    8000ff14:	00a10fa3          	sb	a0,31(sp)
    8000ff18:	a009                	j	8000ff1a <.LBB2_10+0x36>
        match order {
    8000ff1a:	a011                	j	8000ff1e <.LBB2_10+0x3a>
    8000ff1c:	a009                	j	8000ff1e <.LBB2_10+0x3a>
}
    8000ff1e:	01f10503          	lb	a0,31(sp)
    8000ff22:	6145                	addi	sp,sp,48
    8000ff24:	8082                	ret

Disassembly of section .text._ZN4core4sync6atomic12atomic_store17h031d76ab229dd222E:

000000008000ff26 <_ZN4core4sync6atomic12atomic_store17h031d76ab229dd222E>:
unsafe fn atomic_store<T: Copy>(dst: *mut T, val: T, order: Ordering) {
    8000ff26:	7139                	addi	sp,sp,-64
    8000ff28:	e42a                	sd	a0,8(sp)
    8000ff2a:	86ae                	mv	a3,a1
    8000ff2c:	e836                	sd	a3,16(sp)
    8000ff2e:	02c103a3          	sb	a2,39(sp)
    8000ff32:	f82a                	sd	a0,48(sp)
    8000ff34:	02b10fa3          	sb	a1,63(sp)
            Release => intrinsics::atomic_store_rel(dst, val),
    8000ff38:	0ff67513          	andi	a0,a2,255
    8000ff3c:	ec2a                	sd	a0,24(sp)
    8000ff3e:	6562                	ld	a0,24(sp)
    8000ff40:	050e                	slli	a0,a0,0x3

000000008000ff42 <.LBB3_12>:
    8000ff42:	00018597          	auipc	a1,0x18
    8000ff46:	7ce58593          	addi	a1,a1,1998 # 80028710 <.LJTI3_0>
    8000ff4a:	952e                	add	a0,a0,a1
    8000ff4c:	6108                	ld	a0,0(a0)
    8000ff4e:	8502                	jr	a0

000000008000ff50 <.LBB3_13>:
            AcqRel => panic!("there is no such thing as an acquire/release store"),
    8000ff50:	00018517          	auipc	a0,0x18
    8000ff54:	7e850513          	addi	a0,a0,2024 # 80028738 <.L__unnamed_1>

000000008000ff58 <.LBB3_14>:
    8000ff58:	00019617          	auipc	a2,0x19
    8000ff5c:	89060613          	addi	a2,a2,-1904 # 800287e8 <.L__unnamed_2>
    8000ff60:	03200593          	li	a1,50
    8000ff64:	00012097          	auipc	ra,0x12
    8000ff68:	198080e7          	jalr	408(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8000ff6c:	0000                	unimp
	...

000000008000ff70 <.LBB3_4>:
            Release => intrinsics::atomic_store_rel(dst, val),
    8000ff70:	6542                	ld	a0,16(sp)
    8000ff72:	65a2                	ld	a1,8(sp)
    8000ff74:	0310000f          	fence	rw,w
    8000ff78:	00a58023          	sb	a0,0(a1)
    8000ff7c:	a009                	j	8000ff7e <.LBB3_4+0xe>
        match order {
    8000ff7e:	a835                	j	8000ffba <.LBB3_16+0x16>

000000008000ff80 <.LBB3_6>:
            Relaxed => intrinsics::atomic_store_relaxed(dst, val),
    8000ff80:	6542                	ld	a0,16(sp)
    8000ff82:	65a2                	ld	a1,8(sp)
    8000ff84:	00a58023          	sb	a0,0(a1)
    8000ff88:	a009                	j	8000ff8a <.LBB3_6+0xa>
        match order {
    8000ff8a:	a805                	j	8000ffba <.LBB3_16+0x16>

000000008000ff8c <.LBB3_8>:
            SeqCst => intrinsics::atomic_store(dst, val),
    8000ff8c:	6542                	ld	a0,16(sp)
    8000ff8e:	65a2                	ld	a1,8(sp)
    8000ff90:	0310000f          	fence	rw,w
    8000ff94:	00a58023          	sb	a0,0(a1)
    8000ff98:	a009                	j	8000ff9a <.LBB3_8+0xe>
        match order {
    8000ff9a:	a005                	j	8000ffba <.LBB3_16+0x16>

000000008000ff9c <.LBB3_10>:
            Acquire => panic!("there is no such thing as an acquire store"),
    8000ff9c:	00019517          	auipc	a0,0x19
    8000ffa0:	86450513          	addi	a0,a0,-1948 # 80028800 <.L__unnamed_3>

000000008000ffa4 <.LBB3_16>:
    8000ffa4:	00019617          	auipc	a2,0x19
    8000ffa8:	88c60613          	addi	a2,a2,-1908 # 80028830 <.L__unnamed_4>
    8000ffac:	02a00593          	li	a1,42
    8000ffb0:	00012097          	auipc	ra,0x12
    8000ffb4:	14c080e7          	jalr	332(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8000ffb8:	0000                	unimp
}
    8000ffba:	6121                	addi	sp,sp,64
    8000ffbc:	8082                	ret

Disassembly of section .text._ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$3new17h56b5f93ca614e897E:

000000008000ffbe <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$3new17h56b5f93ca614e897E>:
    pub const fn new(data: T, name: &'static str) -> Self {
    8000ffbe:	715d                	addi	sp,sp,-80
        let lock = Spinlock {
    8000ffc0:	e486                	sd	ra,72(sp)
    8000ffc2:	e432                	sd	a2,8(sp)
    8000ffc4:	e82e                	sd	a1,16(sp)
    8000ffc6:	ec2a                	sd	a0,24(sp)
    8000ffc8:	f82e                	sd	a1,48(sp)
    8000ffca:	fc32                	sd	a2,56(sp)
    8000ffcc:	4501                	li	a0,0
            locked: AtomicBool::new(false),
    8000ffce:	ffff4097          	auipc	ra,0xffff4
    8000ffd2:	680080e7          	jalr	1664(ra) # 8000464e <_ZN4core4sync6atomic10AtomicBool3new17hb0054f5394c676a1E>
    8000ffd6:	04a103a3          	sb	a0,71(sp)
    8000ffda:	02a10023          	sb	a0,32(sp)
    8000ffde:	a009                	j	8000ffe0 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$3new17h56b5f93ca614e897E+0x22>
    8000ffe0:	557d                	li	a0,-1
            cpu_id: Cell::new(-1),
    8000ffe2:	ffff5097          	auipc	ra,0xffff5
    8000ffe6:	152080e7          	jalr	338(ra) # 80005134 <_ZN4core4cell13Cell$LT$T$GT$3new17h92764083b52e393eE>
    8000ffea:	e02a                	sd	a0,0(sp)
    8000ffec:	a009                	j	8000ffee <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$3new17h56b5f93ca614e897E+0x30>
            data: UnsafeCell::new(data)
    8000ffee:	ffff5097          	auipc	ra,0xffff5
    8000fff2:	296080e7          	jalr	662(ra) # 80005284 <_ZN4core4cell19UnsafeCell$LT$T$GT$3new17hc63dc9326193c257E>
    8000fff6:	a009                	j	8000fff8 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$3new17h56b5f93ca614e897E+0x3a>
        let lock = Spinlock {
    8000fff8:	6502                	ld	a0,0(sp)
    8000fffa:	65e2                	ld	a1,24(sp)
    8000fffc:	6622                	ld	a2,8(sp)
    8000fffe:	66c2                	ld	a3,16(sp)
    80010000:	02010703          	lb	a4,32(sp)
    80010004:	00e58c23          	sb	a4,24(a1)
    80010008:	e194                	sd	a3,0(a1)
    8001000a:	e590                	sd	a2,8(a1)
    8001000c:	e988                	sd	a0,16(a1)
    }
    8001000e:	60a6                	ld	ra,72(sp)
    80010010:	6161                	addi	sp,sp,80
    80010012:	8082                	ret

Disassembly of section .text._ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h007ac3682185ef97E:

0000000080010014 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h007ac3682185ef97E>:
    pub fn acquire(&self) -> SpinlockGuard<'_, T> {
    80010014:	7135                	addi	sp,sp,-160
    80010016:	ed06                	sd	ra,152(sp)
    80010018:	f82a                	sd	a0,48(sp)
        push_off();
    8001001a:	00002097          	auipc	ra,0x2
    8001001e:	e14080e7          	jalr	-492(ra) # 80011e2e <_ZN6kernel7process3cpu8push_off17h0acd4baa93104745E>
    80010022:	a009                	j	80010024 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h007ac3682185ef97E+0x10>
        if self.holding() {
    80010024:	7542                	ld	a0,48(sp)
    80010026:	00001097          	auipc	ra,0x1
    8001002a:	f84080e7          	jalr	-124(ra) # 80010faa <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h685eaac29cc8096eE>
    8001002e:	f42a                	sd	a0,40(sp)
    80010030:	a009                	j	80010032 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h007ac3682185ef97E+0x1e>
    80010032:	7522                	ld	a0,40(sp)
    80010034:	4581                	li	a1,0
    80010036:	02b50163          	beq	a0,a1,80010058 <.LBB1_15+0x16>
    8001003a:	a009                	j	8001003c <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h007ac3682185ef97E+0x28>
            panic!("spinlock {} acquire", self.name);
    8001003c:	7542                	ld	a0,48(sp)
    8001003e:	e12a                	sd	a0,128(sp)
    80010040:	e92a                	sd	a0,144(sp)

0000000080010042 <.LBB1_15>:
    80010042:	0000e597          	auipc	a1,0xe
    80010046:	3d658593          	addi	a1,a1,982 # 8001e418 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E>
    8001004a:	0000e097          	auipc	ra,0xe
    8001004e:	3f2080e7          	jalr	1010(ra) # 8001e43c <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>
    80010052:	ec2a                	sd	a0,24(sp)
    80010054:	f02e                	sd	a1,32(sp)
    80010056:	a011                	j	8001005a <.LBB1_15+0x18>
        while self.locked.swap(true, Ordering::Acquire){
    80010058:	a825                	j	80010090 <.LBB1_17+0x14>
            panic!("spinlock {} acquire", self.name);
    8001005a:	7502                	ld	a0,32(sp)
    8001005c:	65e2                	ld	a1,24(sp)
    8001005e:	f8ae                	sd	a1,112(sp)
    80010060:	fcaa                	sd	a0,120(sp)

0000000080010062 <.LBB1_16>:
    80010062:	00018597          	auipc	a1,0x18
    80010066:	7f658593          	addi	a1,a1,2038 # 80028858 <.L__unnamed_1>
    8001006a:	0088                	addi	a0,sp,64
    8001006c:	4609                	li	a2,2
    8001006e:	1894                	addi	a3,sp,112
    80010070:	4705                	li	a4,1
    80010072:	ffff5097          	auipc	ra,0xffff5
    80010076:	3c2080e7          	jalr	962(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8001007a:	a009                	j	8001007c <.LBB1_17>

000000008001007c <.LBB1_17>:
    8001007c:	00019597          	auipc	a1,0x19
    80010080:	81458593          	addi	a1,a1,-2028 # 80028890 <.L__unnamed_2>
    80010084:	0088                	addi	a0,sp,64
    80010086:	00012097          	auipc	ra,0x12
    8001008a:	0e2080e7          	jalr	226(ra) # 80022168 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
    8001008e:	0000                	unimp
        while self.locked.swap(true, Ordering::Acquire){
    80010090:	7542                	ld	a0,48(sp)
    80010092:	0561                	addi	a0,a0,24
    80010094:	4609                	li	a2,2
    80010096:	08c10723          	sb	a2,142(sp)
    8001009a:	4585                	li	a1,1
    8001009c:	ffff4097          	auipc	ra,0xffff4
    800100a0:	60c080e7          	jalr	1548(ra) # 800046a8 <_ZN4core4sync6atomic10AtomicBool4swap17h269e9e7e986b9c97E>
    800100a4:	e82a                	sd	a0,16(sp)
    800100a6:	a009                	j	800100a8 <.LBB1_17+0x2c>
    800100a8:	6542                	ld	a0,16(sp)
    800100aa:	e911                	bnez	a0,800100be <.LBB1_17+0x42>
    800100ac:	a009                	j	800100ae <.LBB1_17+0x32>
    800100ae:	4511                	li	a0,4
        fence(Ordering::SeqCst);
    800100b0:	08a107a3          	sb	a0,143(sp)
    800100b4:	ffff4097          	auipc	ra,0xffff4
    800100b8:	6fc080e7          	jalr	1788(ra) # 800047b0 <_ZN4core4sync6atomic5fence17hd2f91624c9f09ce8E>
    800100bc:	a039                	j	800100ca <.LBB1_17+0x4e>
            spin_loop();
    800100be:	fffff097          	auipc	ra,0xfffff
    800100c2:	50a080e7          	jalr	1290(ra) # 8000f5c8 <_ZN4core4hint9spin_loop17h176cebad2d7c26adE>
    800100c6:	a009                	j	800100c8 <.LBB1_17+0x4c>
        while self.locked.swap(true, Ordering::Acquire){
    800100c8:	b7e1                	j	80010090 <.LBB1_17+0x14>
            self.cpu_id.set(cpuid() as isize);
    800100ca:	7542                	ld	a0,48(sp)
    800100cc:	0541                	addi	a0,a0,16
    800100ce:	e02a                	sd	a0,0(sp)
    800100d0:	00002097          	auipc	ra,0x2
    800100d4:	8f2080e7          	jalr	-1806(ra) # 800119c2 <_ZN6kernel7process3cpu5cpuid17h605093a6a9a60164E>
    800100d8:	e42a                	sd	a0,8(sp)
    800100da:	a009                	j	800100dc <.LBB1_17+0x60>
    800100dc:	65a2                	ld	a1,8(sp)
    800100de:	6502                	ld	a0,0(sp)
    800100e0:	ffff5097          	auipc	ra,0xffff5
    800100e4:	09e080e7          	jalr	158(ra) # 8000517e <_ZN4core4cell13Cell$LT$T$GT$3set17hb9927bf4fdcefc87E>
    800100e8:	a009                	j	800100ea <.LBB1_17+0x6e>
        SpinlockGuard{spinlock: &self}
    800100ea:	7542                	ld	a0,48(sp)
    800100ec:	fc2a                	sd	a0,56(sp)
    }
    800100ee:	60ea                	ld	ra,152(sp)
    800100f0:	610d                	addi	sp,sp,160
    800100f2:	8082                	ret

Disassembly of section .text._ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h107253eaf5028ed4E:

00000000800100f4 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h107253eaf5028ed4E>:
    pub fn acquire(&self) -> SpinlockGuard<'_, T> {
    800100f4:	7135                	addi	sp,sp,-160
    800100f6:	ed06                	sd	ra,152(sp)
    800100f8:	f82a                	sd	a0,48(sp)
        push_off();
    800100fa:	00002097          	auipc	ra,0x2
    800100fe:	d34080e7          	jalr	-716(ra) # 80011e2e <_ZN6kernel7process3cpu8push_off17h0acd4baa93104745E>
    80010102:	a009                	j	80010104 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h107253eaf5028ed4E+0x10>
        if self.holding() {
    80010104:	7542                	ld	a0,48(sp)
    80010106:	00001097          	auipc	ra,0x1
    8001010a:	110080e7          	jalr	272(ra) # 80011216 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hfffb7f56d7315d17E>
    8001010e:	f42a                	sd	a0,40(sp)
    80010110:	a009                	j	80010112 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h107253eaf5028ed4E+0x1e>
    80010112:	7522                	ld	a0,40(sp)
    80010114:	4581                	li	a1,0
    80010116:	02b50163          	beq	a0,a1,80010138 <.LBB2_15+0x16>
    8001011a:	a009                	j	8001011c <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h107253eaf5028ed4E+0x28>
            panic!("spinlock {} acquire", self.name);
    8001011c:	7542                	ld	a0,48(sp)
    8001011e:	e12a                	sd	a0,128(sp)
    80010120:	e92a                	sd	a0,144(sp)

0000000080010122 <.LBB2_15>:
    80010122:	0000e597          	auipc	a1,0xe
    80010126:	2f658593          	addi	a1,a1,758 # 8001e418 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E>
    8001012a:	0000e097          	auipc	ra,0xe
    8001012e:	312080e7          	jalr	786(ra) # 8001e43c <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>
    80010132:	ec2a                	sd	a0,24(sp)
    80010134:	f02e                	sd	a1,32(sp)
    80010136:	a011                	j	8001013a <.LBB2_15+0x18>
        while self.locked.swap(true, Ordering::Acquire){
    80010138:	a825                	j	80010170 <.LBB2_17+0x14>
            panic!("spinlock {} acquire", self.name);
    8001013a:	7502                	ld	a0,32(sp)
    8001013c:	65e2                	ld	a1,24(sp)
    8001013e:	f8ae                	sd	a1,112(sp)
    80010140:	fcaa                	sd	a0,120(sp)

0000000080010142 <.LBB2_16>:
    80010142:	00018597          	auipc	a1,0x18
    80010146:	71658593          	addi	a1,a1,1814 # 80028858 <.L__unnamed_1>
    8001014a:	0088                	addi	a0,sp,64
    8001014c:	4609                	li	a2,2
    8001014e:	1894                	addi	a3,sp,112
    80010150:	4705                	li	a4,1
    80010152:	ffff5097          	auipc	ra,0xffff5
    80010156:	2e2080e7          	jalr	738(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8001015a:	a009                	j	8001015c <.LBB2_17>

000000008001015c <.LBB2_17>:
    8001015c:	00018597          	auipc	a1,0x18
    80010160:	73458593          	addi	a1,a1,1844 # 80028890 <.L__unnamed_2>
    80010164:	0088                	addi	a0,sp,64
    80010166:	00012097          	auipc	ra,0x12
    8001016a:	002080e7          	jalr	2(ra) # 80022168 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
    8001016e:	0000                	unimp
        while self.locked.swap(true, Ordering::Acquire){
    80010170:	7542                	ld	a0,48(sp)
    80010172:	0561                	addi	a0,a0,24
    80010174:	4609                	li	a2,2
    80010176:	08c10723          	sb	a2,142(sp)
    8001017a:	4585                	li	a1,1
    8001017c:	ffff4097          	auipc	ra,0xffff4
    80010180:	52c080e7          	jalr	1324(ra) # 800046a8 <_ZN4core4sync6atomic10AtomicBool4swap17h269e9e7e986b9c97E>
    80010184:	e82a                	sd	a0,16(sp)
    80010186:	a009                	j	80010188 <.LBB2_17+0x2c>
    80010188:	6542                	ld	a0,16(sp)
    8001018a:	e911                	bnez	a0,8001019e <.LBB2_17+0x42>
    8001018c:	a009                	j	8001018e <.LBB2_17+0x32>
    8001018e:	4511                	li	a0,4
        fence(Ordering::SeqCst);
    80010190:	08a107a3          	sb	a0,143(sp)
    80010194:	ffff4097          	auipc	ra,0xffff4
    80010198:	61c080e7          	jalr	1564(ra) # 800047b0 <_ZN4core4sync6atomic5fence17hd2f91624c9f09ce8E>
    8001019c:	a039                	j	800101aa <.LBB2_17+0x4e>
            spin_loop();
    8001019e:	fffff097          	auipc	ra,0xfffff
    800101a2:	42a080e7          	jalr	1066(ra) # 8000f5c8 <_ZN4core4hint9spin_loop17h176cebad2d7c26adE>
    800101a6:	a009                	j	800101a8 <.LBB2_17+0x4c>
        while self.locked.swap(true, Ordering::Acquire){
    800101a8:	b7e1                	j	80010170 <.LBB2_17+0x14>
            self.cpu_id.set(cpuid() as isize);
    800101aa:	7542                	ld	a0,48(sp)
    800101ac:	0541                	addi	a0,a0,16
    800101ae:	e02a                	sd	a0,0(sp)
    800101b0:	00002097          	auipc	ra,0x2
    800101b4:	812080e7          	jalr	-2030(ra) # 800119c2 <_ZN6kernel7process3cpu5cpuid17h605093a6a9a60164E>
    800101b8:	e42a                	sd	a0,8(sp)
    800101ba:	a009                	j	800101bc <.LBB2_17+0x60>
    800101bc:	65a2                	ld	a1,8(sp)
    800101be:	6502                	ld	a0,0(sp)
    800101c0:	ffff5097          	auipc	ra,0xffff5
    800101c4:	fbe080e7          	jalr	-66(ra) # 8000517e <_ZN4core4cell13Cell$LT$T$GT$3set17hb9927bf4fdcefc87E>
    800101c8:	a009                	j	800101ca <.LBB2_17+0x6e>
        SpinlockGuard{spinlock: &self}
    800101ca:	7542                	ld	a0,48(sp)
    800101cc:	fc2a                	sd	a0,56(sp)
    }
    800101ce:	60ea                	ld	ra,152(sp)
    800101d0:	610d                	addi	sp,sp,160
    800101d2:	8082                	ret

Disassembly of section .text._ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h25a8532f298de6d8E:

00000000800101d4 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h25a8532f298de6d8E>:
    pub fn acquire(&self) -> SpinlockGuard<'_, T> {
    800101d4:	7135                	addi	sp,sp,-160
    800101d6:	ed06                	sd	ra,152(sp)
    800101d8:	f82a                	sd	a0,48(sp)
        push_off();
    800101da:	00002097          	auipc	ra,0x2
    800101de:	c54080e7          	jalr	-940(ra) # 80011e2e <_ZN6kernel7process3cpu8push_off17h0acd4baa93104745E>
    800101e2:	a009                	j	800101e4 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h25a8532f298de6d8E+0x10>
        if self.holding() {
    800101e4:	7542                	ld	a0,48(sp)
    800101e6:	00001097          	auipc	ra,0x1
    800101ea:	d48080e7          	jalr	-696(ra) # 80010f2e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h56772fc96a718090E>
    800101ee:	f42a                	sd	a0,40(sp)
    800101f0:	a009                	j	800101f2 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h25a8532f298de6d8E+0x1e>
    800101f2:	7522                	ld	a0,40(sp)
    800101f4:	4581                	li	a1,0
    800101f6:	02b50163          	beq	a0,a1,80010218 <.LBB3_15+0x16>
    800101fa:	a009                	j	800101fc <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h25a8532f298de6d8E+0x28>
            panic!("spinlock {} acquire", self.name);
    800101fc:	7542                	ld	a0,48(sp)
    800101fe:	e12a                	sd	a0,128(sp)
    80010200:	e92a                	sd	a0,144(sp)

0000000080010202 <.LBB3_15>:
    80010202:	0000e597          	auipc	a1,0xe
    80010206:	21658593          	addi	a1,a1,534 # 8001e418 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E>
    8001020a:	0000e097          	auipc	ra,0xe
    8001020e:	232080e7          	jalr	562(ra) # 8001e43c <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>
    80010212:	ec2a                	sd	a0,24(sp)
    80010214:	f02e                	sd	a1,32(sp)
    80010216:	a011                	j	8001021a <.LBB3_15+0x18>
        while self.locked.swap(true, Ordering::Acquire){
    80010218:	a825                	j	80010250 <.LBB3_17+0x14>
            panic!("spinlock {} acquire", self.name);
    8001021a:	7502                	ld	a0,32(sp)
    8001021c:	65e2                	ld	a1,24(sp)
    8001021e:	f8ae                	sd	a1,112(sp)
    80010220:	fcaa                	sd	a0,120(sp)

0000000080010222 <.LBB3_16>:
    80010222:	00018597          	auipc	a1,0x18
    80010226:	63658593          	addi	a1,a1,1590 # 80028858 <.L__unnamed_1>
    8001022a:	0088                	addi	a0,sp,64
    8001022c:	4609                	li	a2,2
    8001022e:	1894                	addi	a3,sp,112
    80010230:	4705                	li	a4,1
    80010232:	ffff5097          	auipc	ra,0xffff5
    80010236:	202080e7          	jalr	514(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8001023a:	a009                	j	8001023c <.LBB3_17>

000000008001023c <.LBB3_17>:
    8001023c:	00018597          	auipc	a1,0x18
    80010240:	65458593          	addi	a1,a1,1620 # 80028890 <.L__unnamed_2>
    80010244:	0088                	addi	a0,sp,64
    80010246:	00012097          	auipc	ra,0x12
    8001024a:	f22080e7          	jalr	-222(ra) # 80022168 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
    8001024e:	0000                	unimp
        while self.locked.swap(true, Ordering::Acquire){
    80010250:	7542                	ld	a0,48(sp)
    80010252:	0561                	addi	a0,a0,24
    80010254:	4609                	li	a2,2
    80010256:	08c10723          	sb	a2,142(sp)
    8001025a:	4585                	li	a1,1
    8001025c:	ffff4097          	auipc	ra,0xffff4
    80010260:	44c080e7          	jalr	1100(ra) # 800046a8 <_ZN4core4sync6atomic10AtomicBool4swap17h269e9e7e986b9c97E>
    80010264:	e82a                	sd	a0,16(sp)
    80010266:	a009                	j	80010268 <.LBB3_17+0x2c>
    80010268:	6542                	ld	a0,16(sp)
    8001026a:	e911                	bnez	a0,8001027e <.LBB3_17+0x42>
    8001026c:	a009                	j	8001026e <.LBB3_17+0x32>
    8001026e:	4511                	li	a0,4
        fence(Ordering::SeqCst);
    80010270:	08a107a3          	sb	a0,143(sp)
    80010274:	ffff4097          	auipc	ra,0xffff4
    80010278:	53c080e7          	jalr	1340(ra) # 800047b0 <_ZN4core4sync6atomic5fence17hd2f91624c9f09ce8E>
    8001027c:	a039                	j	8001028a <.LBB3_17+0x4e>
            spin_loop();
    8001027e:	fffff097          	auipc	ra,0xfffff
    80010282:	34a080e7          	jalr	842(ra) # 8000f5c8 <_ZN4core4hint9spin_loop17h176cebad2d7c26adE>
    80010286:	a009                	j	80010288 <.LBB3_17+0x4c>
        while self.locked.swap(true, Ordering::Acquire){
    80010288:	b7e1                	j	80010250 <.LBB3_17+0x14>
            self.cpu_id.set(cpuid() as isize);
    8001028a:	7542                	ld	a0,48(sp)
    8001028c:	0541                	addi	a0,a0,16
    8001028e:	e02a                	sd	a0,0(sp)
    80010290:	00001097          	auipc	ra,0x1
    80010294:	732080e7          	jalr	1842(ra) # 800119c2 <_ZN6kernel7process3cpu5cpuid17h605093a6a9a60164E>
    80010298:	e42a                	sd	a0,8(sp)
    8001029a:	a009                	j	8001029c <.LBB3_17+0x60>
    8001029c:	65a2                	ld	a1,8(sp)
    8001029e:	6502                	ld	a0,0(sp)
    800102a0:	ffff5097          	auipc	ra,0xffff5
    800102a4:	ede080e7          	jalr	-290(ra) # 8000517e <_ZN4core4cell13Cell$LT$T$GT$3set17hb9927bf4fdcefc87E>
    800102a8:	a009                	j	800102aa <.LBB3_17+0x6e>
        SpinlockGuard{spinlock: &self}
    800102aa:	7542                	ld	a0,48(sp)
    800102ac:	fc2a                	sd	a0,56(sp)
    }
    800102ae:	60ea                	ld	ra,152(sp)
    800102b0:	610d                	addi	sp,sp,160
    800102b2:	8082                	ret

Disassembly of section .text._ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h431ef48b95a5e4c6E:

00000000800102b4 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h431ef48b95a5e4c6E>:
    pub fn acquire(&self) -> SpinlockGuard<'_, T> {
    800102b4:	7135                	addi	sp,sp,-160
    800102b6:	ed06                	sd	ra,152(sp)
    800102b8:	f82a                	sd	a0,48(sp)
        push_off();
    800102ba:	00002097          	auipc	ra,0x2
    800102be:	b74080e7          	jalr	-1164(ra) # 80011e2e <_ZN6kernel7process3cpu8push_off17h0acd4baa93104745E>
    800102c2:	a009                	j	800102c4 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h431ef48b95a5e4c6E+0x10>
        if self.holding() {
    800102c4:	7542                	ld	a0,48(sp)
    800102c6:	00001097          	auipc	ra,0x1
    800102ca:	e58080e7          	jalr	-424(ra) # 8001111e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hca575eb433d6c072E>
    800102ce:	f42a                	sd	a0,40(sp)
    800102d0:	a009                	j	800102d2 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h431ef48b95a5e4c6E+0x1e>
    800102d2:	7522                	ld	a0,40(sp)
    800102d4:	4581                	li	a1,0
    800102d6:	02b50163          	beq	a0,a1,800102f8 <.LBB4_15+0x16>
    800102da:	a009                	j	800102dc <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h431ef48b95a5e4c6E+0x28>
            panic!("spinlock {} acquire", self.name);
    800102dc:	7542                	ld	a0,48(sp)
    800102de:	e12a                	sd	a0,128(sp)
    800102e0:	e92a                	sd	a0,144(sp)

00000000800102e2 <.LBB4_15>:
    800102e2:	0000e597          	auipc	a1,0xe
    800102e6:	13658593          	addi	a1,a1,310 # 8001e418 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E>
    800102ea:	0000e097          	auipc	ra,0xe
    800102ee:	152080e7          	jalr	338(ra) # 8001e43c <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>
    800102f2:	ec2a                	sd	a0,24(sp)
    800102f4:	f02e                	sd	a1,32(sp)
    800102f6:	a011                	j	800102fa <.LBB4_15+0x18>
        while self.locked.swap(true, Ordering::Acquire){
    800102f8:	a825                	j	80010330 <.LBB4_17+0x14>
            panic!("spinlock {} acquire", self.name);
    800102fa:	7502                	ld	a0,32(sp)
    800102fc:	65e2                	ld	a1,24(sp)
    800102fe:	f8ae                	sd	a1,112(sp)
    80010300:	fcaa                	sd	a0,120(sp)

0000000080010302 <.LBB4_16>:
    80010302:	00018597          	auipc	a1,0x18
    80010306:	55658593          	addi	a1,a1,1366 # 80028858 <.L__unnamed_1>
    8001030a:	0088                	addi	a0,sp,64
    8001030c:	4609                	li	a2,2
    8001030e:	1894                	addi	a3,sp,112
    80010310:	4705                	li	a4,1
    80010312:	ffff5097          	auipc	ra,0xffff5
    80010316:	122080e7          	jalr	290(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8001031a:	a009                	j	8001031c <.LBB4_17>

000000008001031c <.LBB4_17>:
    8001031c:	00018597          	auipc	a1,0x18
    80010320:	57458593          	addi	a1,a1,1396 # 80028890 <.L__unnamed_2>
    80010324:	0088                	addi	a0,sp,64
    80010326:	00012097          	auipc	ra,0x12
    8001032a:	e42080e7          	jalr	-446(ra) # 80022168 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
    8001032e:	0000                	unimp
        while self.locked.swap(true, Ordering::Acquire){
    80010330:	7542                	ld	a0,48(sp)
    80010332:	0561                	addi	a0,a0,24
    80010334:	4609                	li	a2,2
    80010336:	08c10723          	sb	a2,142(sp)
    8001033a:	4585                	li	a1,1
    8001033c:	ffff4097          	auipc	ra,0xffff4
    80010340:	36c080e7          	jalr	876(ra) # 800046a8 <_ZN4core4sync6atomic10AtomicBool4swap17h269e9e7e986b9c97E>
    80010344:	e82a                	sd	a0,16(sp)
    80010346:	a009                	j	80010348 <.LBB4_17+0x2c>
    80010348:	6542                	ld	a0,16(sp)
    8001034a:	e911                	bnez	a0,8001035e <.LBB4_17+0x42>
    8001034c:	a009                	j	8001034e <.LBB4_17+0x32>
    8001034e:	4511                	li	a0,4
        fence(Ordering::SeqCst);
    80010350:	08a107a3          	sb	a0,143(sp)
    80010354:	ffff4097          	auipc	ra,0xffff4
    80010358:	45c080e7          	jalr	1116(ra) # 800047b0 <_ZN4core4sync6atomic5fence17hd2f91624c9f09ce8E>
    8001035c:	a039                	j	8001036a <.LBB4_17+0x4e>
            spin_loop();
    8001035e:	fffff097          	auipc	ra,0xfffff
    80010362:	26a080e7          	jalr	618(ra) # 8000f5c8 <_ZN4core4hint9spin_loop17h176cebad2d7c26adE>
    80010366:	a009                	j	80010368 <.LBB4_17+0x4c>
        while self.locked.swap(true, Ordering::Acquire){
    80010368:	b7e1                	j	80010330 <.LBB4_17+0x14>
            self.cpu_id.set(cpuid() as isize);
    8001036a:	7542                	ld	a0,48(sp)
    8001036c:	0541                	addi	a0,a0,16
    8001036e:	e02a                	sd	a0,0(sp)
    80010370:	00001097          	auipc	ra,0x1
    80010374:	652080e7          	jalr	1618(ra) # 800119c2 <_ZN6kernel7process3cpu5cpuid17h605093a6a9a60164E>
    80010378:	e42a                	sd	a0,8(sp)
    8001037a:	a009                	j	8001037c <.LBB4_17+0x60>
    8001037c:	65a2                	ld	a1,8(sp)
    8001037e:	6502                	ld	a0,0(sp)
    80010380:	ffff5097          	auipc	ra,0xffff5
    80010384:	dfe080e7          	jalr	-514(ra) # 8000517e <_ZN4core4cell13Cell$LT$T$GT$3set17hb9927bf4fdcefc87E>
    80010388:	a009                	j	8001038a <.LBB4_17+0x6e>
        SpinlockGuard{spinlock: &self}
    8001038a:	7542                	ld	a0,48(sp)
    8001038c:	fc2a                	sd	a0,56(sp)
    }
    8001038e:	60ea                	ld	ra,152(sp)
    80010390:	610d                	addi	sp,sp,160
    80010392:	8082                	ret

Disassembly of section .text._ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h4c9081acf22588feE:

0000000080010394 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h4c9081acf22588feE>:
    pub fn acquire(&self) -> SpinlockGuard<'_, T> {
    80010394:	7135                	addi	sp,sp,-160
    80010396:	ed06                	sd	ra,152(sp)
    80010398:	f82a                	sd	a0,48(sp)
        push_off();
    8001039a:	00002097          	auipc	ra,0x2
    8001039e:	a94080e7          	jalr	-1388(ra) # 80011e2e <_ZN6kernel7process3cpu8push_off17h0acd4baa93104745E>
    800103a2:	a009                	j	800103a4 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h4c9081acf22588feE+0x10>
        if self.holding() {
    800103a4:	7542                	ld	a0,48(sp)
    800103a6:	00001097          	auipc	ra,0x1
    800103aa:	cfc080e7          	jalr	-772(ra) # 800110a2 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17haa146bec45c9d0c2E>
    800103ae:	f42a                	sd	a0,40(sp)
    800103b0:	a009                	j	800103b2 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h4c9081acf22588feE+0x1e>
    800103b2:	7522                	ld	a0,40(sp)
    800103b4:	4581                	li	a1,0
    800103b6:	02b50163          	beq	a0,a1,800103d8 <.LBB5_15+0x16>
    800103ba:	a009                	j	800103bc <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h4c9081acf22588feE+0x28>
            panic!("spinlock {} acquire", self.name);
    800103bc:	7542                	ld	a0,48(sp)
    800103be:	e12a                	sd	a0,128(sp)
    800103c0:	e92a                	sd	a0,144(sp)

00000000800103c2 <.LBB5_15>:
    800103c2:	0000e597          	auipc	a1,0xe
    800103c6:	05658593          	addi	a1,a1,86 # 8001e418 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E>
    800103ca:	0000e097          	auipc	ra,0xe
    800103ce:	072080e7          	jalr	114(ra) # 8001e43c <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>
    800103d2:	ec2a                	sd	a0,24(sp)
    800103d4:	f02e                	sd	a1,32(sp)
    800103d6:	a011                	j	800103da <.LBB5_15+0x18>
        while self.locked.swap(true, Ordering::Acquire){
    800103d8:	a825                	j	80010410 <.LBB5_17+0x14>
            panic!("spinlock {} acquire", self.name);
    800103da:	7502                	ld	a0,32(sp)
    800103dc:	65e2                	ld	a1,24(sp)
    800103de:	f8ae                	sd	a1,112(sp)
    800103e0:	fcaa                	sd	a0,120(sp)

00000000800103e2 <.LBB5_16>:
    800103e2:	00018597          	auipc	a1,0x18
    800103e6:	47658593          	addi	a1,a1,1142 # 80028858 <.L__unnamed_1>
    800103ea:	0088                	addi	a0,sp,64
    800103ec:	4609                	li	a2,2
    800103ee:	1894                	addi	a3,sp,112
    800103f0:	4705                	li	a4,1
    800103f2:	ffff5097          	auipc	ra,0xffff5
    800103f6:	042080e7          	jalr	66(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    800103fa:	a009                	j	800103fc <.LBB5_17>

00000000800103fc <.LBB5_17>:
    800103fc:	00018597          	auipc	a1,0x18
    80010400:	49458593          	addi	a1,a1,1172 # 80028890 <.L__unnamed_2>
    80010404:	0088                	addi	a0,sp,64
    80010406:	00012097          	auipc	ra,0x12
    8001040a:	d62080e7          	jalr	-670(ra) # 80022168 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
    8001040e:	0000                	unimp
        while self.locked.swap(true, Ordering::Acquire){
    80010410:	7542                	ld	a0,48(sp)
    80010412:	0561                	addi	a0,a0,24
    80010414:	4609                	li	a2,2
    80010416:	08c10723          	sb	a2,142(sp)
    8001041a:	4585                	li	a1,1
    8001041c:	ffff4097          	auipc	ra,0xffff4
    80010420:	28c080e7          	jalr	652(ra) # 800046a8 <_ZN4core4sync6atomic10AtomicBool4swap17h269e9e7e986b9c97E>
    80010424:	e82a                	sd	a0,16(sp)
    80010426:	a009                	j	80010428 <.LBB5_17+0x2c>
    80010428:	6542                	ld	a0,16(sp)
    8001042a:	e911                	bnez	a0,8001043e <.LBB5_17+0x42>
    8001042c:	a009                	j	8001042e <.LBB5_17+0x32>
    8001042e:	4511                	li	a0,4
        fence(Ordering::SeqCst);
    80010430:	08a107a3          	sb	a0,143(sp)
    80010434:	ffff4097          	auipc	ra,0xffff4
    80010438:	37c080e7          	jalr	892(ra) # 800047b0 <_ZN4core4sync6atomic5fence17hd2f91624c9f09ce8E>
    8001043c:	a039                	j	8001044a <.LBB5_17+0x4e>
            spin_loop();
    8001043e:	fffff097          	auipc	ra,0xfffff
    80010442:	18a080e7          	jalr	394(ra) # 8000f5c8 <_ZN4core4hint9spin_loop17h176cebad2d7c26adE>
    80010446:	a009                	j	80010448 <.LBB5_17+0x4c>
        while self.locked.swap(true, Ordering::Acquire){
    80010448:	b7e1                	j	80010410 <.LBB5_17+0x14>
            self.cpu_id.set(cpuid() as isize);
    8001044a:	7542                	ld	a0,48(sp)
    8001044c:	0541                	addi	a0,a0,16
    8001044e:	e02a                	sd	a0,0(sp)
    80010450:	00001097          	auipc	ra,0x1
    80010454:	572080e7          	jalr	1394(ra) # 800119c2 <_ZN6kernel7process3cpu5cpuid17h605093a6a9a60164E>
    80010458:	e42a                	sd	a0,8(sp)
    8001045a:	a009                	j	8001045c <.LBB5_17+0x60>
    8001045c:	65a2                	ld	a1,8(sp)
    8001045e:	6502                	ld	a0,0(sp)
    80010460:	ffff5097          	auipc	ra,0xffff5
    80010464:	d1e080e7          	jalr	-738(ra) # 8000517e <_ZN4core4cell13Cell$LT$T$GT$3set17hb9927bf4fdcefc87E>
    80010468:	a009                	j	8001046a <.LBB5_17+0x6e>
        SpinlockGuard{spinlock: &self}
    8001046a:	7542                	ld	a0,48(sp)
    8001046c:	fc2a                	sd	a0,56(sp)
    }
    8001046e:	60ea                	ld	ra,152(sp)
    80010470:	610d                	addi	sp,sp,160
    80010472:	8082                	ret

Disassembly of section .text._ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h702266ebf2d4d383E:

0000000080010474 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h702266ebf2d4d383E>:
    pub fn acquire(&self) -> SpinlockGuard<'_, T> {
    80010474:	7135                	addi	sp,sp,-160
    80010476:	ed06                	sd	ra,152(sp)
    80010478:	f82a                	sd	a0,48(sp)
        push_off();
    8001047a:	00002097          	auipc	ra,0x2
    8001047e:	9b4080e7          	jalr	-1612(ra) # 80011e2e <_ZN6kernel7process3cpu8push_off17h0acd4baa93104745E>
    80010482:	a009                	j	80010484 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h702266ebf2d4d383E+0x10>
        if self.holding() {
    80010484:	7542                	ld	a0,48(sp)
    80010486:	00001097          	auipc	ra,0x1
    8001048a:	ba0080e7          	jalr	-1120(ra) # 80011026 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h92b63d3de4da3516E>
    8001048e:	f42a                	sd	a0,40(sp)
    80010490:	a009                	j	80010492 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h702266ebf2d4d383E+0x1e>
    80010492:	7522                	ld	a0,40(sp)
    80010494:	4581                	li	a1,0
    80010496:	02b50163          	beq	a0,a1,800104b8 <.LBB6_15+0x16>
    8001049a:	a009                	j	8001049c <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h702266ebf2d4d383E+0x28>
            panic!("spinlock {} acquire", self.name);
    8001049c:	7542                	ld	a0,48(sp)
    8001049e:	e12a                	sd	a0,128(sp)
    800104a0:	e92a                	sd	a0,144(sp)

00000000800104a2 <.LBB6_15>:
    800104a2:	0000e597          	auipc	a1,0xe
    800104a6:	f7658593          	addi	a1,a1,-138 # 8001e418 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E>
    800104aa:	0000e097          	auipc	ra,0xe
    800104ae:	f92080e7          	jalr	-110(ra) # 8001e43c <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>
    800104b2:	ec2a                	sd	a0,24(sp)
    800104b4:	f02e                	sd	a1,32(sp)
    800104b6:	a011                	j	800104ba <.LBB6_15+0x18>
        while self.locked.swap(true, Ordering::Acquire){
    800104b8:	a825                	j	800104f0 <.LBB6_17+0x14>
            panic!("spinlock {} acquire", self.name);
    800104ba:	7502                	ld	a0,32(sp)
    800104bc:	65e2                	ld	a1,24(sp)
    800104be:	f8ae                	sd	a1,112(sp)
    800104c0:	fcaa                	sd	a0,120(sp)

00000000800104c2 <.LBB6_16>:
    800104c2:	00018597          	auipc	a1,0x18
    800104c6:	39658593          	addi	a1,a1,918 # 80028858 <.L__unnamed_1>
    800104ca:	0088                	addi	a0,sp,64
    800104cc:	4609                	li	a2,2
    800104ce:	1894                	addi	a3,sp,112
    800104d0:	4705                	li	a4,1
    800104d2:	ffff5097          	auipc	ra,0xffff5
    800104d6:	f62080e7          	jalr	-158(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    800104da:	a009                	j	800104dc <.LBB6_17>

00000000800104dc <.LBB6_17>:
    800104dc:	00018597          	auipc	a1,0x18
    800104e0:	3b458593          	addi	a1,a1,948 # 80028890 <.L__unnamed_2>
    800104e4:	0088                	addi	a0,sp,64
    800104e6:	00012097          	auipc	ra,0x12
    800104ea:	c82080e7          	jalr	-894(ra) # 80022168 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
    800104ee:	0000                	unimp
        while self.locked.swap(true, Ordering::Acquire){
    800104f0:	7542                	ld	a0,48(sp)
    800104f2:	0561                	addi	a0,a0,24
    800104f4:	4609                	li	a2,2
    800104f6:	08c10723          	sb	a2,142(sp)
    800104fa:	4585                	li	a1,1
    800104fc:	ffff4097          	auipc	ra,0xffff4
    80010500:	1ac080e7          	jalr	428(ra) # 800046a8 <_ZN4core4sync6atomic10AtomicBool4swap17h269e9e7e986b9c97E>
    80010504:	e82a                	sd	a0,16(sp)
    80010506:	a009                	j	80010508 <.LBB6_17+0x2c>
    80010508:	6542                	ld	a0,16(sp)
    8001050a:	e911                	bnez	a0,8001051e <.LBB6_17+0x42>
    8001050c:	a009                	j	8001050e <.LBB6_17+0x32>
    8001050e:	4511                	li	a0,4
        fence(Ordering::SeqCst);
    80010510:	08a107a3          	sb	a0,143(sp)
    80010514:	ffff4097          	auipc	ra,0xffff4
    80010518:	29c080e7          	jalr	668(ra) # 800047b0 <_ZN4core4sync6atomic5fence17hd2f91624c9f09ce8E>
    8001051c:	a039                	j	8001052a <.LBB6_17+0x4e>
            spin_loop();
    8001051e:	fffff097          	auipc	ra,0xfffff
    80010522:	0aa080e7          	jalr	170(ra) # 8000f5c8 <_ZN4core4hint9spin_loop17h176cebad2d7c26adE>
    80010526:	a009                	j	80010528 <.LBB6_17+0x4c>
        while self.locked.swap(true, Ordering::Acquire){
    80010528:	b7e1                	j	800104f0 <.LBB6_17+0x14>
            self.cpu_id.set(cpuid() as isize);
    8001052a:	7542                	ld	a0,48(sp)
    8001052c:	0541                	addi	a0,a0,16
    8001052e:	e02a                	sd	a0,0(sp)
    80010530:	00001097          	auipc	ra,0x1
    80010534:	492080e7          	jalr	1170(ra) # 800119c2 <_ZN6kernel7process3cpu5cpuid17h605093a6a9a60164E>
    80010538:	e42a                	sd	a0,8(sp)
    8001053a:	a009                	j	8001053c <.LBB6_17+0x60>
    8001053c:	65a2                	ld	a1,8(sp)
    8001053e:	6502                	ld	a0,0(sp)
    80010540:	ffff5097          	auipc	ra,0xffff5
    80010544:	c3e080e7          	jalr	-962(ra) # 8000517e <_ZN4core4cell13Cell$LT$T$GT$3set17hb9927bf4fdcefc87E>
    80010548:	a009                	j	8001054a <.LBB6_17+0x6e>
        SpinlockGuard{spinlock: &self}
    8001054a:	7542                	ld	a0,48(sp)
    8001054c:	fc2a                	sd	a0,56(sp)
    }
    8001054e:	60ea                	ld	ra,152(sp)
    80010550:	610d                	addi	sp,sp,160
    80010552:	8082                	ret

Disassembly of section .text._ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h922bace5232f6228E:

0000000080010554 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h922bace5232f6228E>:
    pub fn acquire(&self) -> SpinlockGuard<'_, T> {
    80010554:	7135                	addi	sp,sp,-160
    80010556:	ed06                	sd	ra,152(sp)
    80010558:	f82a                	sd	a0,48(sp)
        push_off();
    8001055a:	00002097          	auipc	ra,0x2
    8001055e:	8d4080e7          	jalr	-1836(ra) # 80011e2e <_ZN6kernel7process3cpu8push_off17h0acd4baa93104745E>
    80010562:	a009                	j	80010564 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h922bace5232f6228E+0x10>
        if self.holding() {
    80010564:	7542                	ld	a0,48(sp)
    80010566:	00001097          	auipc	ra,0x1
    8001056a:	8d0080e7          	jalr	-1840(ra) # 80010e36 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h04bb873c43629d68E>
    8001056e:	f42a                	sd	a0,40(sp)
    80010570:	a009                	j	80010572 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h922bace5232f6228E+0x1e>
    80010572:	7522                	ld	a0,40(sp)
    80010574:	4581                	li	a1,0
    80010576:	02b50163          	beq	a0,a1,80010598 <.LBB7_15+0x16>
    8001057a:	a009                	j	8001057c <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h922bace5232f6228E+0x28>
            panic!("spinlock {} acquire", self.name);
    8001057c:	7542                	ld	a0,48(sp)
    8001057e:	e12a                	sd	a0,128(sp)
    80010580:	e92a                	sd	a0,144(sp)

0000000080010582 <.LBB7_15>:
    80010582:	0000e597          	auipc	a1,0xe
    80010586:	e9658593          	addi	a1,a1,-362 # 8001e418 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E>
    8001058a:	0000e097          	auipc	ra,0xe
    8001058e:	eb2080e7          	jalr	-334(ra) # 8001e43c <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>
    80010592:	ec2a                	sd	a0,24(sp)
    80010594:	f02e                	sd	a1,32(sp)
    80010596:	a011                	j	8001059a <.LBB7_15+0x18>
        while self.locked.swap(true, Ordering::Acquire){
    80010598:	a825                	j	800105d0 <.LBB7_17+0x14>
            panic!("spinlock {} acquire", self.name);
    8001059a:	7502                	ld	a0,32(sp)
    8001059c:	65e2                	ld	a1,24(sp)
    8001059e:	f8ae                	sd	a1,112(sp)
    800105a0:	fcaa                	sd	a0,120(sp)

00000000800105a2 <.LBB7_16>:
    800105a2:	00018597          	auipc	a1,0x18
    800105a6:	2b658593          	addi	a1,a1,694 # 80028858 <.L__unnamed_1>
    800105aa:	0088                	addi	a0,sp,64
    800105ac:	4609                	li	a2,2
    800105ae:	1894                	addi	a3,sp,112
    800105b0:	4705                	li	a4,1
    800105b2:	ffff5097          	auipc	ra,0xffff5
    800105b6:	e82080e7          	jalr	-382(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    800105ba:	a009                	j	800105bc <.LBB7_17>

00000000800105bc <.LBB7_17>:
    800105bc:	00018597          	auipc	a1,0x18
    800105c0:	2d458593          	addi	a1,a1,724 # 80028890 <.L__unnamed_2>
    800105c4:	0088                	addi	a0,sp,64
    800105c6:	00012097          	auipc	ra,0x12
    800105ca:	ba2080e7          	jalr	-1118(ra) # 80022168 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
    800105ce:	0000                	unimp
        while self.locked.swap(true, Ordering::Acquire){
    800105d0:	7542                	ld	a0,48(sp)
    800105d2:	0561                	addi	a0,a0,24
    800105d4:	4609                	li	a2,2
    800105d6:	08c10723          	sb	a2,142(sp)
    800105da:	4585                	li	a1,1
    800105dc:	ffff4097          	auipc	ra,0xffff4
    800105e0:	0cc080e7          	jalr	204(ra) # 800046a8 <_ZN4core4sync6atomic10AtomicBool4swap17h269e9e7e986b9c97E>
    800105e4:	e82a                	sd	a0,16(sp)
    800105e6:	a009                	j	800105e8 <.LBB7_17+0x2c>
    800105e8:	6542                	ld	a0,16(sp)
    800105ea:	e911                	bnez	a0,800105fe <.LBB7_17+0x42>
    800105ec:	a009                	j	800105ee <.LBB7_17+0x32>
    800105ee:	4511                	li	a0,4
        fence(Ordering::SeqCst);
    800105f0:	08a107a3          	sb	a0,143(sp)
    800105f4:	ffff4097          	auipc	ra,0xffff4
    800105f8:	1bc080e7          	jalr	444(ra) # 800047b0 <_ZN4core4sync6atomic5fence17hd2f91624c9f09ce8E>
    800105fc:	a039                	j	8001060a <.LBB7_17+0x4e>
            spin_loop();
    800105fe:	fffff097          	auipc	ra,0xfffff
    80010602:	fca080e7          	jalr	-54(ra) # 8000f5c8 <_ZN4core4hint9spin_loop17h176cebad2d7c26adE>
    80010606:	a009                	j	80010608 <.LBB7_17+0x4c>
        while self.locked.swap(true, Ordering::Acquire){
    80010608:	b7e1                	j	800105d0 <.LBB7_17+0x14>
            self.cpu_id.set(cpuid() as isize);
    8001060a:	7542                	ld	a0,48(sp)
    8001060c:	0541                	addi	a0,a0,16
    8001060e:	e02a                	sd	a0,0(sp)
    80010610:	00001097          	auipc	ra,0x1
    80010614:	3b2080e7          	jalr	946(ra) # 800119c2 <_ZN6kernel7process3cpu5cpuid17h605093a6a9a60164E>
    80010618:	e42a                	sd	a0,8(sp)
    8001061a:	a009                	j	8001061c <.LBB7_17+0x60>
    8001061c:	65a2                	ld	a1,8(sp)
    8001061e:	6502                	ld	a0,0(sp)
    80010620:	ffff5097          	auipc	ra,0xffff5
    80010624:	b5e080e7          	jalr	-1186(ra) # 8000517e <_ZN4core4cell13Cell$LT$T$GT$3set17hb9927bf4fdcefc87E>
    80010628:	a009                	j	8001062a <.LBB7_17+0x6e>
        SpinlockGuard{spinlock: &self}
    8001062a:	7542                	ld	a0,48(sp)
    8001062c:	fc2a                	sd	a0,56(sp)
    }
    8001062e:	60ea                	ld	ra,152(sp)
    80010630:	610d                	addi	sp,sp,160
    80010632:	8082                	ret

Disassembly of section .text._ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E:

0000000080010634 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>:
    pub fn acquire(&self) -> SpinlockGuard<'_, T> {
    80010634:	7135                	addi	sp,sp,-160
    80010636:	ed06                	sd	ra,152(sp)
    80010638:	f82a                	sd	a0,48(sp)
        push_off();
    8001063a:	00001097          	auipc	ra,0x1
    8001063e:	7f4080e7          	jalr	2036(ra) # 80011e2e <_ZN6kernel7process3cpu8push_off17h0acd4baa93104745E>
    80010642:	a009                	j	80010644 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E+0x10>
        if self.holding() {
    80010644:	7542                	ld	a0,48(sp)
    80010646:	00001097          	auipc	ra,0x1
    8001064a:	86c080e7          	jalr	-1940(ra) # 80010eb2 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h22290a831051ae28E>
    8001064e:	f42a                	sd	a0,40(sp)
    80010650:	a009                	j	80010652 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E+0x1e>
    80010652:	7522                	ld	a0,40(sp)
    80010654:	4581                	li	a1,0
    80010656:	02b50163          	beq	a0,a1,80010678 <.LBB8_15+0x16>
    8001065a:	a009                	j	8001065c <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E+0x28>
            panic!("spinlock {} acquire", self.name);
    8001065c:	7542                	ld	a0,48(sp)
    8001065e:	e12a                	sd	a0,128(sp)
    80010660:	e92a                	sd	a0,144(sp)

0000000080010662 <.LBB8_15>:
    80010662:	0000e597          	auipc	a1,0xe
    80010666:	db658593          	addi	a1,a1,-586 # 8001e418 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E>
    8001066a:	0000e097          	auipc	ra,0xe
    8001066e:	dd2080e7          	jalr	-558(ra) # 8001e43c <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>
    80010672:	ec2a                	sd	a0,24(sp)
    80010674:	f02e                	sd	a1,32(sp)
    80010676:	a011                	j	8001067a <.LBB8_15+0x18>
        while self.locked.swap(true, Ordering::Acquire){
    80010678:	a825                	j	800106b0 <.LBB8_17+0x14>
            panic!("spinlock {} acquire", self.name);
    8001067a:	7502                	ld	a0,32(sp)
    8001067c:	65e2                	ld	a1,24(sp)
    8001067e:	f8ae                	sd	a1,112(sp)
    80010680:	fcaa                	sd	a0,120(sp)

0000000080010682 <.LBB8_16>:
    80010682:	00018597          	auipc	a1,0x18
    80010686:	1d658593          	addi	a1,a1,470 # 80028858 <.L__unnamed_1>
    8001068a:	0088                	addi	a0,sp,64
    8001068c:	4609                	li	a2,2
    8001068e:	1894                	addi	a3,sp,112
    80010690:	4705                	li	a4,1
    80010692:	ffff5097          	auipc	ra,0xffff5
    80010696:	da2080e7          	jalr	-606(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8001069a:	a009                	j	8001069c <.LBB8_17>

000000008001069c <.LBB8_17>:
    8001069c:	00018597          	auipc	a1,0x18
    800106a0:	1f458593          	addi	a1,a1,500 # 80028890 <.L__unnamed_2>
    800106a4:	0088                	addi	a0,sp,64
    800106a6:	00012097          	auipc	ra,0x12
    800106aa:	ac2080e7          	jalr	-1342(ra) # 80022168 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
    800106ae:	0000                	unimp
        while self.locked.swap(true, Ordering::Acquire){
    800106b0:	7542                	ld	a0,48(sp)
    800106b2:	0561                	addi	a0,a0,24
    800106b4:	4609                	li	a2,2
    800106b6:	08c10723          	sb	a2,142(sp)
    800106ba:	4585                	li	a1,1
    800106bc:	ffff4097          	auipc	ra,0xffff4
    800106c0:	fec080e7          	jalr	-20(ra) # 800046a8 <_ZN4core4sync6atomic10AtomicBool4swap17h269e9e7e986b9c97E>
    800106c4:	e82a                	sd	a0,16(sp)
    800106c6:	a009                	j	800106c8 <.LBB8_17+0x2c>
    800106c8:	6542                	ld	a0,16(sp)
    800106ca:	e911                	bnez	a0,800106de <.LBB8_17+0x42>
    800106cc:	a009                	j	800106ce <.LBB8_17+0x32>
    800106ce:	4511                	li	a0,4
        fence(Ordering::SeqCst);
    800106d0:	08a107a3          	sb	a0,143(sp)
    800106d4:	ffff4097          	auipc	ra,0xffff4
    800106d8:	0dc080e7          	jalr	220(ra) # 800047b0 <_ZN4core4sync6atomic5fence17hd2f91624c9f09ce8E>
    800106dc:	a039                	j	800106ea <.LBB8_17+0x4e>
            spin_loop();
    800106de:	fffff097          	auipc	ra,0xfffff
    800106e2:	eea080e7          	jalr	-278(ra) # 8000f5c8 <_ZN4core4hint9spin_loop17h176cebad2d7c26adE>
    800106e6:	a009                	j	800106e8 <.LBB8_17+0x4c>
        while self.locked.swap(true, Ordering::Acquire){
    800106e8:	b7e1                	j	800106b0 <.LBB8_17+0x14>
            self.cpu_id.set(cpuid() as isize);
    800106ea:	7542                	ld	a0,48(sp)
    800106ec:	0541                	addi	a0,a0,16
    800106ee:	e02a                	sd	a0,0(sp)
    800106f0:	00001097          	auipc	ra,0x1
    800106f4:	2d2080e7          	jalr	722(ra) # 800119c2 <_ZN6kernel7process3cpu5cpuid17h605093a6a9a60164E>
    800106f8:	e42a                	sd	a0,8(sp)
    800106fa:	a009                	j	800106fc <.LBB8_17+0x60>
    800106fc:	65a2                	ld	a1,8(sp)
    800106fe:	6502                	ld	a0,0(sp)
    80010700:	ffff5097          	auipc	ra,0xffff5
    80010704:	a7e080e7          	jalr	-1410(ra) # 8000517e <_ZN4core4cell13Cell$LT$T$GT$3set17hb9927bf4fdcefc87E>
    80010708:	a009                	j	8001070a <.LBB8_17+0x6e>
        SpinlockGuard{spinlock: &self}
    8001070a:	7542                	ld	a0,48(sp)
    8001070c:	fc2a                	sd	a0,56(sp)
    }
    8001070e:	60ea                	ld	ra,152(sp)
    80010710:	610d                	addi	sp,sp,160
    80010712:	8082                	ret

Disassembly of section .text._ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17he33ed4c8b2ffa030E:

0000000080010714 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17he33ed4c8b2ffa030E>:
    pub fn acquire(&self) -> SpinlockGuard<'_, T> {
    80010714:	7135                	addi	sp,sp,-160
    80010716:	ed06                	sd	ra,152(sp)
    80010718:	f82a                	sd	a0,48(sp)
        push_off();
    8001071a:	00001097          	auipc	ra,0x1
    8001071e:	714080e7          	jalr	1812(ra) # 80011e2e <_ZN6kernel7process3cpu8push_off17h0acd4baa93104745E>
    80010722:	a009                	j	80010724 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17he33ed4c8b2ffa030E+0x10>
        if self.holding() {
    80010724:	7542                	ld	a0,48(sp)
    80010726:	00001097          	auipc	ra,0x1
    8001072a:	a74080e7          	jalr	-1420(ra) # 8001119a <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17he647ed27b9879bf9E>
    8001072e:	f42a                	sd	a0,40(sp)
    80010730:	a009                	j	80010732 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17he33ed4c8b2ffa030E+0x1e>
    80010732:	7522                	ld	a0,40(sp)
    80010734:	4581                	li	a1,0
    80010736:	02b50163          	beq	a0,a1,80010758 <.LBB9_15+0x16>
    8001073a:	a009                	j	8001073c <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17he33ed4c8b2ffa030E+0x28>
            panic!("spinlock {} acquire", self.name);
    8001073c:	7542                	ld	a0,48(sp)
    8001073e:	e12a                	sd	a0,128(sp)
    80010740:	e92a                	sd	a0,144(sp)

0000000080010742 <.LBB9_15>:
    80010742:	0000e597          	auipc	a1,0xe
    80010746:	cd658593          	addi	a1,a1,-810 # 8001e418 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E>
    8001074a:	0000e097          	auipc	ra,0xe
    8001074e:	cf2080e7          	jalr	-782(ra) # 8001e43c <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>
    80010752:	ec2a                	sd	a0,24(sp)
    80010754:	f02e                	sd	a1,32(sp)
    80010756:	a011                	j	8001075a <.LBB9_15+0x18>
        while self.locked.swap(true, Ordering::Acquire){
    80010758:	a825                	j	80010790 <.LBB9_17+0x14>
            panic!("spinlock {} acquire", self.name);
    8001075a:	7502                	ld	a0,32(sp)
    8001075c:	65e2                	ld	a1,24(sp)
    8001075e:	f8ae                	sd	a1,112(sp)
    80010760:	fcaa                	sd	a0,120(sp)

0000000080010762 <.LBB9_16>:
    80010762:	00018597          	auipc	a1,0x18
    80010766:	0f658593          	addi	a1,a1,246 # 80028858 <.L__unnamed_1>
    8001076a:	0088                	addi	a0,sp,64
    8001076c:	4609                	li	a2,2
    8001076e:	1894                	addi	a3,sp,112
    80010770:	4705                	li	a4,1
    80010772:	ffff5097          	auipc	ra,0xffff5
    80010776:	cc2080e7          	jalr	-830(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8001077a:	a009                	j	8001077c <.LBB9_17>

000000008001077c <.LBB9_17>:
    8001077c:	00018597          	auipc	a1,0x18
    80010780:	11458593          	addi	a1,a1,276 # 80028890 <.L__unnamed_2>
    80010784:	0088                	addi	a0,sp,64
    80010786:	00012097          	auipc	ra,0x12
    8001078a:	9e2080e7          	jalr	-1566(ra) # 80022168 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
    8001078e:	0000                	unimp
        while self.locked.swap(true, Ordering::Acquire){
    80010790:	7542                	ld	a0,48(sp)
    80010792:	0561                	addi	a0,a0,24
    80010794:	4609                	li	a2,2
    80010796:	08c10723          	sb	a2,142(sp)
    8001079a:	4585                	li	a1,1
    8001079c:	ffff4097          	auipc	ra,0xffff4
    800107a0:	f0c080e7          	jalr	-244(ra) # 800046a8 <_ZN4core4sync6atomic10AtomicBool4swap17h269e9e7e986b9c97E>
    800107a4:	e82a                	sd	a0,16(sp)
    800107a6:	a009                	j	800107a8 <.LBB9_17+0x2c>
    800107a8:	6542                	ld	a0,16(sp)
    800107aa:	e911                	bnez	a0,800107be <.LBB9_17+0x42>
    800107ac:	a009                	j	800107ae <.LBB9_17+0x32>
    800107ae:	4511                	li	a0,4
        fence(Ordering::SeqCst);
    800107b0:	08a107a3          	sb	a0,143(sp)
    800107b4:	ffff4097          	auipc	ra,0xffff4
    800107b8:	ffc080e7          	jalr	-4(ra) # 800047b0 <_ZN4core4sync6atomic5fence17hd2f91624c9f09ce8E>
    800107bc:	a039                	j	800107ca <.LBB9_17+0x4e>
            spin_loop();
    800107be:	fffff097          	auipc	ra,0xfffff
    800107c2:	e0a080e7          	jalr	-502(ra) # 8000f5c8 <_ZN4core4hint9spin_loop17h176cebad2d7c26adE>
    800107c6:	a009                	j	800107c8 <.LBB9_17+0x4c>
        while self.locked.swap(true, Ordering::Acquire){
    800107c8:	b7e1                	j	80010790 <.LBB9_17+0x14>
            self.cpu_id.set(cpuid() as isize);
    800107ca:	7542                	ld	a0,48(sp)
    800107cc:	0541                	addi	a0,a0,16
    800107ce:	e02a                	sd	a0,0(sp)
    800107d0:	00001097          	auipc	ra,0x1
    800107d4:	1f2080e7          	jalr	498(ra) # 800119c2 <_ZN6kernel7process3cpu5cpuid17h605093a6a9a60164E>
    800107d8:	e42a                	sd	a0,8(sp)
    800107da:	a009                	j	800107dc <.LBB9_17+0x60>
    800107dc:	65a2                	ld	a1,8(sp)
    800107de:	6502                	ld	a0,0(sp)
    800107e0:	ffff5097          	auipc	ra,0xffff5
    800107e4:	99e080e7          	jalr	-1634(ra) # 8000517e <_ZN4core4cell13Cell$LT$T$GT$3set17hb9927bf4fdcefc87E>
    800107e8:	a009                	j	800107ea <.LBB9_17+0x6e>
        SpinlockGuard{spinlock: &self}
    800107ea:	7542                	ld	a0,48(sp)
    800107ec:	fc2a                	sd	a0,56(sp)
    }
    800107ee:	60ea                	ld	ra,152(sp)
    800107f0:	610d                	addi	sp,sp,160
    800107f2:	8082                	ret

Disassembly of section .text._ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17h4488adb03f65166cE:

00000000800107f4 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17h4488adb03f65166cE>:
    pub fn release(&self) {
    800107f4:	7175                	addi	sp,sp,-144
    800107f6:	e506                	sd	ra,136(sp)
    800107f8:	ec2a                	sd	a0,24(sp)
    800107fa:	fcaa                	sd	a0,120(sp)
        if !self.holding() {
    800107fc:	00000097          	auipc	ra,0x0
    80010800:	732080e7          	jalr	1842(ra) # 80010f2e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h56772fc96a718090E>
    80010804:	f02a                	sd	a0,32(sp)
    80010806:	a009                	j	80010808 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17h4488adb03f65166cE+0x14>
    80010808:	7502                	ld	a0,32(sp)
    8001080a:	e105                	bnez	a0,8001082a <.LBB10_10+0x16>
    8001080c:	a009                	j	8001080e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17h4488adb03f65166cE+0x1a>
            panic!("spinlock {} release", self.name);
    8001080e:	6562                	ld	a0,24(sp)
    80010810:	f4aa                	sd	a0,104(sp)
    80010812:	e12a                	sd	a0,128(sp)

0000000080010814 <.LBB10_10>:
    80010814:	0000e597          	auipc	a1,0xe
    80010818:	c0458593          	addi	a1,a1,-1020 # 8001e418 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E>
    8001081c:	0000e097          	auipc	ra,0xe
    80010820:	c20080e7          	jalr	-992(ra) # 8001e43c <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>
    80010824:	e42a                	sd	a0,8(sp)
    80010826:	e82e                	sd	a1,16(sp)
    80010828:	a809                	j	8001083a <.LBB10_10+0x26>
        self.cpu_id.set(-1);
    8001082a:	6562                	ld	a0,24(sp)
    8001082c:	0541                	addi	a0,a0,16
    8001082e:	55fd                	li	a1,-1
    80010830:	ffff5097          	auipc	ra,0xffff5
    80010834:	94e080e7          	jalr	-1714(ra) # 8000517e <_ZN4core4cell13Cell$LT$T$GT$3set17hb9927bf4fdcefc87E>
    80010838:	a825                	j	80010870 <.LBB10_12+0x14>
            panic!("spinlock {} release", self.name);
    8001083a:	6542                	ld	a0,16(sp)
    8001083c:	65a2                	ld	a1,8(sp)
    8001083e:	ecae                	sd	a1,88(sp)
    80010840:	f0aa                	sd	a0,96(sp)

0000000080010842 <.LBB10_11>:
    80010842:	00018597          	auipc	a1,0x18
    80010846:	06658593          	addi	a1,a1,102 # 800288a8 <.L__unnamed_3>
    8001084a:	1028                	addi	a0,sp,40
    8001084c:	4609                	li	a2,2
    8001084e:	08b4                	addi	a3,sp,88
    80010850:	4705                	li	a4,1
    80010852:	ffff5097          	auipc	ra,0xffff5
    80010856:	be2080e7          	jalr	-1054(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8001085a:	a009                	j	8001085c <.LBB10_12>

000000008001085c <.LBB10_12>:
    8001085c:	00018597          	auipc	a1,0x18
    80010860:	06c58593          	addi	a1,a1,108 # 800288c8 <.L__unnamed_4>
    80010864:	1028                	addi	a0,sp,40
    80010866:	00012097          	auipc	ra,0x12
    8001086a:	902080e7          	jalr	-1790(ra) # 80022168 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
    8001086e:	0000                	unimp
    80010870:	4511                	li	a0,4
        fence(Ordering::SeqCst);
    80010872:	06a10b23          	sb	a0,118(sp)
    80010876:	ffff4097          	auipc	ra,0xffff4
    8001087a:	f3a080e7          	jalr	-198(ra) # 800047b0 <_ZN4core4sync6atomic5fence17hd2f91624c9f09ce8E>
    8001087e:	a009                	j	80010880 <.LBB10_12+0x24>
        self.locked.store(false, Ordering::Release);
    80010880:	6562                	ld	a0,24(sp)
    80010882:	0561                	addi	a0,a0,24
    80010884:	4605                	li	a2,1
    80010886:	06c10ba3          	sb	a2,119(sp)
    8001088a:	4581                	li	a1,0
    8001088c:	ffff4097          	auipc	ra,0xffff4
    80010890:	e60080e7          	jalr	-416(ra) # 800046ec <_ZN4core4sync6atomic10AtomicBool5store17h325e21ca90edd7e7E>
    80010894:	a009                	j	80010896 <.LBB10_12+0x3a>
        pop_off();
    80010896:	00001097          	auipc	ra,0x1
    8001089a:	61c080e7          	jalr	1564(ra) # 80011eb2 <_ZN6kernel7process3cpu7pop_off17hb8c7b834ab1c7c4cE>
    8001089e:	a009                	j	800108a0 <.LBB10_12+0x44>
    }
    800108a0:	60aa                	ld	ra,136(sp)
    800108a2:	6149                	addi	sp,sp,144
    800108a4:	8082                	ret

Disassembly of section .text._ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17h7f531b2c66469855E:

00000000800108a6 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17h7f531b2c66469855E>:
    pub fn release(&self) {
    800108a6:	7175                	addi	sp,sp,-144
    800108a8:	e506                	sd	ra,136(sp)
    800108aa:	ec2a                	sd	a0,24(sp)
    800108ac:	fcaa                	sd	a0,120(sp)
        if !self.holding() {
    800108ae:	00000097          	auipc	ra,0x0
    800108b2:	7f4080e7          	jalr	2036(ra) # 800110a2 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17haa146bec45c9d0c2E>
    800108b6:	f02a                	sd	a0,32(sp)
    800108b8:	a009                	j	800108ba <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17h7f531b2c66469855E+0x14>
    800108ba:	7502                	ld	a0,32(sp)
    800108bc:	e105                	bnez	a0,800108dc <.LBB11_10+0x16>
    800108be:	a009                	j	800108c0 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17h7f531b2c66469855E+0x1a>
            panic!("spinlock {} release", self.name);
    800108c0:	6562                	ld	a0,24(sp)
    800108c2:	f4aa                	sd	a0,104(sp)
    800108c4:	e12a                	sd	a0,128(sp)

00000000800108c6 <.LBB11_10>:
    800108c6:	0000e597          	auipc	a1,0xe
    800108ca:	b5258593          	addi	a1,a1,-1198 # 8001e418 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E>
    800108ce:	0000e097          	auipc	ra,0xe
    800108d2:	b6e080e7          	jalr	-1170(ra) # 8001e43c <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>
    800108d6:	e42a                	sd	a0,8(sp)
    800108d8:	e82e                	sd	a1,16(sp)
    800108da:	a809                	j	800108ec <.LBB11_10+0x26>
        self.cpu_id.set(-1);
    800108dc:	6562                	ld	a0,24(sp)
    800108de:	0541                	addi	a0,a0,16
    800108e0:	55fd                	li	a1,-1
    800108e2:	ffff5097          	auipc	ra,0xffff5
    800108e6:	89c080e7          	jalr	-1892(ra) # 8000517e <_ZN4core4cell13Cell$LT$T$GT$3set17hb9927bf4fdcefc87E>
    800108ea:	a825                	j	80010922 <.LBB11_12+0x14>
            panic!("spinlock {} release", self.name);
    800108ec:	6542                	ld	a0,16(sp)
    800108ee:	65a2                	ld	a1,8(sp)
    800108f0:	ecae                	sd	a1,88(sp)
    800108f2:	f0aa                	sd	a0,96(sp)

00000000800108f4 <.LBB11_11>:
    800108f4:	00018597          	auipc	a1,0x18
    800108f8:	fb458593          	addi	a1,a1,-76 # 800288a8 <.L__unnamed_3>
    800108fc:	1028                	addi	a0,sp,40
    800108fe:	4609                	li	a2,2
    80010900:	08b4                	addi	a3,sp,88
    80010902:	4705                	li	a4,1
    80010904:	ffff5097          	auipc	ra,0xffff5
    80010908:	b30080e7          	jalr	-1232(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8001090c:	a009                	j	8001090e <.LBB11_12>

000000008001090e <.LBB11_12>:
    8001090e:	00018597          	auipc	a1,0x18
    80010912:	fba58593          	addi	a1,a1,-70 # 800288c8 <.L__unnamed_4>
    80010916:	1028                	addi	a0,sp,40
    80010918:	00012097          	auipc	ra,0x12
    8001091c:	850080e7          	jalr	-1968(ra) # 80022168 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
    80010920:	0000                	unimp
    80010922:	4511                	li	a0,4
        fence(Ordering::SeqCst);
    80010924:	06a10b23          	sb	a0,118(sp)
    80010928:	ffff4097          	auipc	ra,0xffff4
    8001092c:	e88080e7          	jalr	-376(ra) # 800047b0 <_ZN4core4sync6atomic5fence17hd2f91624c9f09ce8E>
    80010930:	a009                	j	80010932 <.LBB11_12+0x24>
        self.locked.store(false, Ordering::Release);
    80010932:	6562                	ld	a0,24(sp)
    80010934:	0561                	addi	a0,a0,24
    80010936:	4605                	li	a2,1
    80010938:	06c10ba3          	sb	a2,119(sp)
    8001093c:	4581                	li	a1,0
    8001093e:	ffff4097          	auipc	ra,0xffff4
    80010942:	dae080e7          	jalr	-594(ra) # 800046ec <_ZN4core4sync6atomic10AtomicBool5store17h325e21ca90edd7e7E>
    80010946:	a009                	j	80010948 <.LBB11_12+0x3a>
        pop_off();
    80010948:	00001097          	auipc	ra,0x1
    8001094c:	56a080e7          	jalr	1386(ra) # 80011eb2 <_ZN6kernel7process3cpu7pop_off17hb8c7b834ab1c7c4cE>
    80010950:	a009                	j	80010952 <.LBB11_12+0x44>
    }
    80010952:	60aa                	ld	ra,136(sp)
    80010954:	6149                	addi	sp,sp,144
    80010956:	8082                	ret

Disassembly of section .text._ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17h8041517806e423d6E:

0000000080010958 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17h8041517806e423d6E>:
    pub fn release(&self) {
    80010958:	7175                	addi	sp,sp,-144
    8001095a:	e506                	sd	ra,136(sp)
    8001095c:	ec2a                	sd	a0,24(sp)
    8001095e:	fcaa                	sd	a0,120(sp)
        if !self.holding() {
    80010960:	00000097          	auipc	ra,0x0
    80010964:	64a080e7          	jalr	1610(ra) # 80010faa <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h685eaac29cc8096eE>
    80010968:	f02a                	sd	a0,32(sp)
    8001096a:	a009                	j	8001096c <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17h8041517806e423d6E+0x14>
    8001096c:	7502                	ld	a0,32(sp)
    8001096e:	e105                	bnez	a0,8001098e <.LBB12_10+0x16>
    80010970:	a009                	j	80010972 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17h8041517806e423d6E+0x1a>
            panic!("spinlock {} release", self.name);
    80010972:	6562                	ld	a0,24(sp)
    80010974:	f4aa                	sd	a0,104(sp)
    80010976:	e12a                	sd	a0,128(sp)

0000000080010978 <.LBB12_10>:
    80010978:	0000e597          	auipc	a1,0xe
    8001097c:	aa058593          	addi	a1,a1,-1376 # 8001e418 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E>
    80010980:	0000e097          	auipc	ra,0xe
    80010984:	abc080e7          	jalr	-1348(ra) # 8001e43c <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>
    80010988:	e42a                	sd	a0,8(sp)
    8001098a:	e82e                	sd	a1,16(sp)
    8001098c:	a809                	j	8001099e <.LBB12_10+0x26>
        self.cpu_id.set(-1);
    8001098e:	6562                	ld	a0,24(sp)
    80010990:	0541                	addi	a0,a0,16
    80010992:	55fd                	li	a1,-1
    80010994:	ffff4097          	auipc	ra,0xffff4
    80010998:	7ea080e7          	jalr	2026(ra) # 8000517e <_ZN4core4cell13Cell$LT$T$GT$3set17hb9927bf4fdcefc87E>
    8001099c:	a825                	j	800109d4 <.LBB12_12+0x14>
            panic!("spinlock {} release", self.name);
    8001099e:	6542                	ld	a0,16(sp)
    800109a0:	65a2                	ld	a1,8(sp)
    800109a2:	ecae                	sd	a1,88(sp)
    800109a4:	f0aa                	sd	a0,96(sp)

00000000800109a6 <.LBB12_11>:
    800109a6:	00018597          	auipc	a1,0x18
    800109aa:	f0258593          	addi	a1,a1,-254 # 800288a8 <.L__unnamed_3>
    800109ae:	1028                	addi	a0,sp,40
    800109b0:	4609                	li	a2,2
    800109b2:	08b4                	addi	a3,sp,88
    800109b4:	4705                	li	a4,1
    800109b6:	ffff5097          	auipc	ra,0xffff5
    800109ba:	a7e080e7          	jalr	-1410(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    800109be:	a009                	j	800109c0 <.LBB12_12>

00000000800109c0 <.LBB12_12>:
    800109c0:	00018597          	auipc	a1,0x18
    800109c4:	f0858593          	addi	a1,a1,-248 # 800288c8 <.L__unnamed_4>
    800109c8:	1028                	addi	a0,sp,40
    800109ca:	00011097          	auipc	ra,0x11
    800109ce:	79e080e7          	jalr	1950(ra) # 80022168 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
    800109d2:	0000                	unimp
    800109d4:	4511                	li	a0,4
        fence(Ordering::SeqCst);
    800109d6:	06a10b23          	sb	a0,118(sp)
    800109da:	ffff4097          	auipc	ra,0xffff4
    800109de:	dd6080e7          	jalr	-554(ra) # 800047b0 <_ZN4core4sync6atomic5fence17hd2f91624c9f09ce8E>
    800109e2:	a009                	j	800109e4 <.LBB12_12+0x24>
        self.locked.store(false, Ordering::Release);
    800109e4:	6562                	ld	a0,24(sp)
    800109e6:	0561                	addi	a0,a0,24
    800109e8:	4605                	li	a2,1
    800109ea:	06c10ba3          	sb	a2,119(sp)
    800109ee:	4581                	li	a1,0
    800109f0:	ffff4097          	auipc	ra,0xffff4
    800109f4:	cfc080e7          	jalr	-772(ra) # 800046ec <_ZN4core4sync6atomic10AtomicBool5store17h325e21ca90edd7e7E>
    800109f8:	a009                	j	800109fa <.LBB12_12+0x3a>
        pop_off();
    800109fa:	00001097          	auipc	ra,0x1
    800109fe:	4b8080e7          	jalr	1208(ra) # 80011eb2 <_ZN6kernel7process3cpu7pop_off17hb8c7b834ab1c7c4cE>
    80010a02:	a009                	j	80010a04 <.LBB12_12+0x44>
    }
    80010a04:	60aa                	ld	ra,136(sp)
    80010a06:	6149                	addi	sp,sp,144
    80010a08:	8082                	ret

Disassembly of section .text._ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17h84d22e527c35405fE:

0000000080010a0a <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17h84d22e527c35405fE>:
    pub fn release(&self) {
    80010a0a:	7175                	addi	sp,sp,-144
    80010a0c:	e506                	sd	ra,136(sp)
    80010a0e:	ec2a                	sd	a0,24(sp)
    80010a10:	fcaa                	sd	a0,120(sp)
        if !self.holding() {
    80010a12:	00001097          	auipc	ra,0x1
    80010a16:	804080e7          	jalr	-2044(ra) # 80011216 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hfffb7f56d7315d17E>
    80010a1a:	f02a                	sd	a0,32(sp)
    80010a1c:	a009                	j	80010a1e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17h84d22e527c35405fE+0x14>
    80010a1e:	7502                	ld	a0,32(sp)
    80010a20:	e105                	bnez	a0,80010a40 <.LBB13_10+0x16>
    80010a22:	a009                	j	80010a24 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17h84d22e527c35405fE+0x1a>
            panic!("spinlock {} release", self.name);
    80010a24:	6562                	ld	a0,24(sp)
    80010a26:	f4aa                	sd	a0,104(sp)
    80010a28:	e12a                	sd	a0,128(sp)

0000000080010a2a <.LBB13_10>:
    80010a2a:	0000e597          	auipc	a1,0xe
    80010a2e:	9ee58593          	addi	a1,a1,-1554 # 8001e418 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E>
    80010a32:	0000e097          	auipc	ra,0xe
    80010a36:	a0a080e7          	jalr	-1526(ra) # 8001e43c <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>
    80010a3a:	e42a                	sd	a0,8(sp)
    80010a3c:	e82e                	sd	a1,16(sp)
    80010a3e:	a809                	j	80010a50 <.LBB13_10+0x26>
        self.cpu_id.set(-1);
    80010a40:	6562                	ld	a0,24(sp)
    80010a42:	0541                	addi	a0,a0,16
    80010a44:	55fd                	li	a1,-1
    80010a46:	ffff4097          	auipc	ra,0xffff4
    80010a4a:	738080e7          	jalr	1848(ra) # 8000517e <_ZN4core4cell13Cell$LT$T$GT$3set17hb9927bf4fdcefc87E>
    80010a4e:	a825                	j	80010a86 <.LBB13_12+0x14>
            panic!("spinlock {} release", self.name);
    80010a50:	6542                	ld	a0,16(sp)
    80010a52:	65a2                	ld	a1,8(sp)
    80010a54:	ecae                	sd	a1,88(sp)
    80010a56:	f0aa                	sd	a0,96(sp)

0000000080010a58 <.LBB13_11>:
    80010a58:	00018597          	auipc	a1,0x18
    80010a5c:	e5058593          	addi	a1,a1,-432 # 800288a8 <.L__unnamed_3>
    80010a60:	1028                	addi	a0,sp,40
    80010a62:	4609                	li	a2,2
    80010a64:	08b4                	addi	a3,sp,88
    80010a66:	4705                	li	a4,1
    80010a68:	ffff5097          	auipc	ra,0xffff5
    80010a6c:	9cc080e7          	jalr	-1588(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80010a70:	a009                	j	80010a72 <.LBB13_12>

0000000080010a72 <.LBB13_12>:
    80010a72:	00018597          	auipc	a1,0x18
    80010a76:	e5658593          	addi	a1,a1,-426 # 800288c8 <.L__unnamed_4>
    80010a7a:	1028                	addi	a0,sp,40
    80010a7c:	00011097          	auipc	ra,0x11
    80010a80:	6ec080e7          	jalr	1772(ra) # 80022168 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
    80010a84:	0000                	unimp
    80010a86:	4511                	li	a0,4
        fence(Ordering::SeqCst);
    80010a88:	06a10b23          	sb	a0,118(sp)
    80010a8c:	ffff4097          	auipc	ra,0xffff4
    80010a90:	d24080e7          	jalr	-732(ra) # 800047b0 <_ZN4core4sync6atomic5fence17hd2f91624c9f09ce8E>
    80010a94:	a009                	j	80010a96 <.LBB13_12+0x24>
        self.locked.store(false, Ordering::Release);
    80010a96:	6562                	ld	a0,24(sp)
    80010a98:	0561                	addi	a0,a0,24
    80010a9a:	4605                	li	a2,1
    80010a9c:	06c10ba3          	sb	a2,119(sp)
    80010aa0:	4581                	li	a1,0
    80010aa2:	ffff4097          	auipc	ra,0xffff4
    80010aa6:	c4a080e7          	jalr	-950(ra) # 800046ec <_ZN4core4sync6atomic10AtomicBool5store17h325e21ca90edd7e7E>
    80010aaa:	a009                	j	80010aac <.LBB13_12+0x3a>
        pop_off();
    80010aac:	00001097          	auipc	ra,0x1
    80010ab0:	406080e7          	jalr	1030(ra) # 80011eb2 <_ZN6kernel7process3cpu7pop_off17hb8c7b834ab1c7c4cE>
    80010ab4:	a009                	j	80010ab6 <.LBB13_12+0x44>
    }
    80010ab6:	60aa                	ld	ra,136(sp)
    80010ab8:	6149                	addi	sp,sp,144
    80010aba:	8082                	ret

Disassembly of section .text._ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17hb6d563787d966a77E:

0000000080010abc <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17hb6d563787d966a77E>:
    pub fn release(&self) {
    80010abc:	7175                	addi	sp,sp,-144
    80010abe:	e506                	sd	ra,136(sp)
    80010ac0:	ec2a                	sd	a0,24(sp)
    80010ac2:	fcaa                	sd	a0,120(sp)
        if !self.holding() {
    80010ac4:	00000097          	auipc	ra,0x0
    80010ac8:	6d6080e7          	jalr	1750(ra) # 8001119a <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17he647ed27b9879bf9E>
    80010acc:	f02a                	sd	a0,32(sp)
    80010ace:	a009                	j	80010ad0 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17hb6d563787d966a77E+0x14>
    80010ad0:	7502                	ld	a0,32(sp)
    80010ad2:	e105                	bnez	a0,80010af2 <.LBB14_10+0x16>
    80010ad4:	a009                	j	80010ad6 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17hb6d563787d966a77E+0x1a>
            panic!("spinlock {} release", self.name);
    80010ad6:	6562                	ld	a0,24(sp)
    80010ad8:	f4aa                	sd	a0,104(sp)
    80010ada:	e12a                	sd	a0,128(sp)

0000000080010adc <.LBB14_10>:
    80010adc:	0000e597          	auipc	a1,0xe
    80010ae0:	93c58593          	addi	a1,a1,-1732 # 8001e418 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E>
    80010ae4:	0000e097          	auipc	ra,0xe
    80010ae8:	958080e7          	jalr	-1704(ra) # 8001e43c <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>
    80010aec:	e42a                	sd	a0,8(sp)
    80010aee:	e82e                	sd	a1,16(sp)
    80010af0:	a809                	j	80010b02 <.LBB14_10+0x26>
        self.cpu_id.set(-1);
    80010af2:	6562                	ld	a0,24(sp)
    80010af4:	0541                	addi	a0,a0,16
    80010af6:	55fd                	li	a1,-1
    80010af8:	ffff4097          	auipc	ra,0xffff4
    80010afc:	686080e7          	jalr	1670(ra) # 8000517e <_ZN4core4cell13Cell$LT$T$GT$3set17hb9927bf4fdcefc87E>
    80010b00:	a825                	j	80010b38 <.LBB14_12+0x14>
            panic!("spinlock {} release", self.name);
    80010b02:	6542                	ld	a0,16(sp)
    80010b04:	65a2                	ld	a1,8(sp)
    80010b06:	ecae                	sd	a1,88(sp)
    80010b08:	f0aa                	sd	a0,96(sp)

0000000080010b0a <.LBB14_11>:
    80010b0a:	00018597          	auipc	a1,0x18
    80010b0e:	d9e58593          	addi	a1,a1,-610 # 800288a8 <.L__unnamed_3>
    80010b12:	1028                	addi	a0,sp,40
    80010b14:	4609                	li	a2,2
    80010b16:	08b4                	addi	a3,sp,88
    80010b18:	4705                	li	a4,1
    80010b1a:	ffff5097          	auipc	ra,0xffff5
    80010b1e:	91a080e7          	jalr	-1766(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80010b22:	a009                	j	80010b24 <.LBB14_12>

0000000080010b24 <.LBB14_12>:
    80010b24:	00018597          	auipc	a1,0x18
    80010b28:	da458593          	addi	a1,a1,-604 # 800288c8 <.L__unnamed_4>
    80010b2c:	1028                	addi	a0,sp,40
    80010b2e:	00011097          	auipc	ra,0x11
    80010b32:	63a080e7          	jalr	1594(ra) # 80022168 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
    80010b36:	0000                	unimp
    80010b38:	4511                	li	a0,4
        fence(Ordering::SeqCst);
    80010b3a:	06a10b23          	sb	a0,118(sp)
    80010b3e:	ffff4097          	auipc	ra,0xffff4
    80010b42:	c72080e7          	jalr	-910(ra) # 800047b0 <_ZN4core4sync6atomic5fence17hd2f91624c9f09ce8E>
    80010b46:	a009                	j	80010b48 <.LBB14_12+0x24>
        self.locked.store(false, Ordering::Release);
    80010b48:	6562                	ld	a0,24(sp)
    80010b4a:	0561                	addi	a0,a0,24
    80010b4c:	4605                	li	a2,1
    80010b4e:	06c10ba3          	sb	a2,119(sp)
    80010b52:	4581                	li	a1,0
    80010b54:	ffff4097          	auipc	ra,0xffff4
    80010b58:	b98080e7          	jalr	-1128(ra) # 800046ec <_ZN4core4sync6atomic10AtomicBool5store17h325e21ca90edd7e7E>
    80010b5c:	a009                	j	80010b5e <.LBB14_12+0x3a>
        pop_off();
    80010b5e:	00001097          	auipc	ra,0x1
    80010b62:	354080e7          	jalr	852(ra) # 80011eb2 <_ZN6kernel7process3cpu7pop_off17hb8c7b834ab1c7c4cE>
    80010b66:	a009                	j	80010b68 <.LBB14_12+0x44>
    }
    80010b68:	60aa                	ld	ra,136(sp)
    80010b6a:	6149                	addi	sp,sp,144
    80010b6c:	8082                	ret

Disassembly of section .text._ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17hd5c81d47b1881bbfE:

0000000080010b6e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17hd5c81d47b1881bbfE>:
    pub fn release(&self) {
    80010b6e:	7175                	addi	sp,sp,-144
    80010b70:	e506                	sd	ra,136(sp)
    80010b72:	ec2a                	sd	a0,24(sp)
    80010b74:	fcaa                	sd	a0,120(sp)
        if !self.holding() {
    80010b76:	00000097          	auipc	ra,0x0
    80010b7a:	4b0080e7          	jalr	1200(ra) # 80011026 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h92b63d3de4da3516E>
    80010b7e:	f02a                	sd	a0,32(sp)
    80010b80:	a009                	j	80010b82 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17hd5c81d47b1881bbfE+0x14>
    80010b82:	7502                	ld	a0,32(sp)
    80010b84:	e105                	bnez	a0,80010ba4 <.LBB15_10+0x16>
    80010b86:	a009                	j	80010b88 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17hd5c81d47b1881bbfE+0x1a>
            panic!("spinlock {} release", self.name);
    80010b88:	6562                	ld	a0,24(sp)
    80010b8a:	f4aa                	sd	a0,104(sp)
    80010b8c:	e12a                	sd	a0,128(sp)

0000000080010b8e <.LBB15_10>:
    80010b8e:	0000e597          	auipc	a1,0xe
    80010b92:	88a58593          	addi	a1,a1,-1910 # 8001e418 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E>
    80010b96:	0000e097          	auipc	ra,0xe
    80010b9a:	8a6080e7          	jalr	-1882(ra) # 8001e43c <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>
    80010b9e:	e42a                	sd	a0,8(sp)
    80010ba0:	e82e                	sd	a1,16(sp)
    80010ba2:	a809                	j	80010bb4 <.LBB15_10+0x26>
        self.cpu_id.set(-1);
    80010ba4:	6562                	ld	a0,24(sp)
    80010ba6:	0541                	addi	a0,a0,16
    80010ba8:	55fd                	li	a1,-1
    80010baa:	ffff4097          	auipc	ra,0xffff4
    80010bae:	5d4080e7          	jalr	1492(ra) # 8000517e <_ZN4core4cell13Cell$LT$T$GT$3set17hb9927bf4fdcefc87E>
    80010bb2:	a825                	j	80010bea <.LBB15_12+0x14>
            panic!("spinlock {} release", self.name);
    80010bb4:	6542                	ld	a0,16(sp)
    80010bb6:	65a2                	ld	a1,8(sp)
    80010bb8:	ecae                	sd	a1,88(sp)
    80010bba:	f0aa                	sd	a0,96(sp)

0000000080010bbc <.LBB15_11>:
    80010bbc:	00018597          	auipc	a1,0x18
    80010bc0:	cec58593          	addi	a1,a1,-788 # 800288a8 <.L__unnamed_3>
    80010bc4:	1028                	addi	a0,sp,40
    80010bc6:	4609                	li	a2,2
    80010bc8:	08b4                	addi	a3,sp,88
    80010bca:	4705                	li	a4,1
    80010bcc:	ffff5097          	auipc	ra,0xffff5
    80010bd0:	868080e7          	jalr	-1944(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80010bd4:	a009                	j	80010bd6 <.LBB15_12>

0000000080010bd6 <.LBB15_12>:
    80010bd6:	00018597          	auipc	a1,0x18
    80010bda:	cf258593          	addi	a1,a1,-782 # 800288c8 <.L__unnamed_4>
    80010bde:	1028                	addi	a0,sp,40
    80010be0:	00011097          	auipc	ra,0x11
    80010be4:	588080e7          	jalr	1416(ra) # 80022168 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
    80010be8:	0000                	unimp
    80010bea:	4511                	li	a0,4
        fence(Ordering::SeqCst);
    80010bec:	06a10b23          	sb	a0,118(sp)
    80010bf0:	ffff4097          	auipc	ra,0xffff4
    80010bf4:	bc0080e7          	jalr	-1088(ra) # 800047b0 <_ZN4core4sync6atomic5fence17hd2f91624c9f09ce8E>
    80010bf8:	a009                	j	80010bfa <.LBB15_12+0x24>
        self.locked.store(false, Ordering::Release);
    80010bfa:	6562                	ld	a0,24(sp)
    80010bfc:	0561                	addi	a0,a0,24
    80010bfe:	4605                	li	a2,1
    80010c00:	06c10ba3          	sb	a2,119(sp)
    80010c04:	4581                	li	a1,0
    80010c06:	ffff4097          	auipc	ra,0xffff4
    80010c0a:	ae6080e7          	jalr	-1306(ra) # 800046ec <_ZN4core4sync6atomic10AtomicBool5store17h325e21ca90edd7e7E>
    80010c0e:	a009                	j	80010c10 <.LBB15_12+0x3a>
        pop_off();
    80010c10:	00001097          	auipc	ra,0x1
    80010c14:	2a2080e7          	jalr	674(ra) # 80011eb2 <_ZN6kernel7process3cpu7pop_off17hb8c7b834ab1c7c4cE>
    80010c18:	a009                	j	80010c1a <.LBB15_12+0x44>
    }
    80010c1a:	60aa                	ld	ra,136(sp)
    80010c1c:	6149                	addi	sp,sp,144
    80010c1e:	8082                	ret

Disassembly of section .text._ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17hdd8465c64dcbee95E:

0000000080010c20 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17hdd8465c64dcbee95E>:
    pub fn release(&self) {
    80010c20:	7175                	addi	sp,sp,-144
    80010c22:	e506                	sd	ra,136(sp)
    80010c24:	ec2a                	sd	a0,24(sp)
    80010c26:	fcaa                	sd	a0,120(sp)
        if !self.holding() {
    80010c28:	00000097          	auipc	ra,0x0
    80010c2c:	4f6080e7          	jalr	1270(ra) # 8001111e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hca575eb433d6c072E>
    80010c30:	f02a                	sd	a0,32(sp)
    80010c32:	a009                	j	80010c34 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17hdd8465c64dcbee95E+0x14>
    80010c34:	7502                	ld	a0,32(sp)
    80010c36:	e105                	bnez	a0,80010c56 <.LBB16_10+0x16>
    80010c38:	a009                	j	80010c3a <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17hdd8465c64dcbee95E+0x1a>
            panic!("spinlock {} release", self.name);
    80010c3a:	6562                	ld	a0,24(sp)
    80010c3c:	f4aa                	sd	a0,104(sp)
    80010c3e:	e12a                	sd	a0,128(sp)

0000000080010c40 <.LBB16_10>:
    80010c40:	0000d597          	auipc	a1,0xd
    80010c44:	7d858593          	addi	a1,a1,2008 # 8001e418 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E>
    80010c48:	0000d097          	auipc	ra,0xd
    80010c4c:	7f4080e7          	jalr	2036(ra) # 8001e43c <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>
    80010c50:	e42a                	sd	a0,8(sp)
    80010c52:	e82e                	sd	a1,16(sp)
    80010c54:	a809                	j	80010c66 <.LBB16_10+0x26>
        self.cpu_id.set(-1);
    80010c56:	6562                	ld	a0,24(sp)
    80010c58:	0541                	addi	a0,a0,16
    80010c5a:	55fd                	li	a1,-1
    80010c5c:	ffff4097          	auipc	ra,0xffff4
    80010c60:	522080e7          	jalr	1314(ra) # 8000517e <_ZN4core4cell13Cell$LT$T$GT$3set17hb9927bf4fdcefc87E>
    80010c64:	a825                	j	80010c9c <.LBB16_12+0x14>
            panic!("spinlock {} release", self.name);
    80010c66:	6542                	ld	a0,16(sp)
    80010c68:	65a2                	ld	a1,8(sp)
    80010c6a:	ecae                	sd	a1,88(sp)
    80010c6c:	f0aa                	sd	a0,96(sp)

0000000080010c6e <.LBB16_11>:
    80010c6e:	00018597          	auipc	a1,0x18
    80010c72:	c3a58593          	addi	a1,a1,-966 # 800288a8 <.L__unnamed_3>
    80010c76:	1028                	addi	a0,sp,40
    80010c78:	4609                	li	a2,2
    80010c7a:	08b4                	addi	a3,sp,88
    80010c7c:	4705                	li	a4,1
    80010c7e:	ffff4097          	auipc	ra,0xffff4
    80010c82:	7b6080e7          	jalr	1974(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80010c86:	a009                	j	80010c88 <.LBB16_12>

0000000080010c88 <.LBB16_12>:
    80010c88:	00018597          	auipc	a1,0x18
    80010c8c:	c4058593          	addi	a1,a1,-960 # 800288c8 <.L__unnamed_4>
    80010c90:	1028                	addi	a0,sp,40
    80010c92:	00011097          	auipc	ra,0x11
    80010c96:	4d6080e7          	jalr	1238(ra) # 80022168 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
    80010c9a:	0000                	unimp
    80010c9c:	4511                	li	a0,4
        fence(Ordering::SeqCst);
    80010c9e:	06a10b23          	sb	a0,118(sp)
    80010ca2:	ffff4097          	auipc	ra,0xffff4
    80010ca6:	b0e080e7          	jalr	-1266(ra) # 800047b0 <_ZN4core4sync6atomic5fence17hd2f91624c9f09ce8E>
    80010caa:	a009                	j	80010cac <.LBB16_12+0x24>
        self.locked.store(false, Ordering::Release);
    80010cac:	6562                	ld	a0,24(sp)
    80010cae:	0561                	addi	a0,a0,24
    80010cb0:	4605                	li	a2,1
    80010cb2:	06c10ba3          	sb	a2,119(sp)
    80010cb6:	4581                	li	a1,0
    80010cb8:	ffff4097          	auipc	ra,0xffff4
    80010cbc:	a34080e7          	jalr	-1484(ra) # 800046ec <_ZN4core4sync6atomic10AtomicBool5store17h325e21ca90edd7e7E>
    80010cc0:	a009                	j	80010cc2 <.LBB16_12+0x3a>
        pop_off();
    80010cc2:	00001097          	auipc	ra,0x1
    80010cc6:	1f0080e7          	jalr	496(ra) # 80011eb2 <_ZN6kernel7process3cpu7pop_off17hb8c7b834ab1c7c4cE>
    80010cca:	a009                	j	80010ccc <.LBB16_12+0x44>
    }
    80010ccc:	60aa                	ld	ra,136(sp)
    80010cce:	6149                	addi	sp,sp,144
    80010cd0:	8082                	ret

Disassembly of section .text._ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17hfda5e7f2f4cdedb7E:

0000000080010cd2 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17hfda5e7f2f4cdedb7E>:
    pub fn release(&self) {
    80010cd2:	7175                	addi	sp,sp,-144
    80010cd4:	e506                	sd	ra,136(sp)
    80010cd6:	ec2a                	sd	a0,24(sp)
    80010cd8:	fcaa                	sd	a0,120(sp)
        if !self.holding() {
    80010cda:	00000097          	auipc	ra,0x0
    80010cde:	1d8080e7          	jalr	472(ra) # 80010eb2 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h22290a831051ae28E>
    80010ce2:	f02a                	sd	a0,32(sp)
    80010ce4:	a009                	j	80010ce6 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17hfda5e7f2f4cdedb7E+0x14>
    80010ce6:	7502                	ld	a0,32(sp)
    80010ce8:	e105                	bnez	a0,80010d08 <.LBB17_10+0x16>
    80010cea:	a009                	j	80010cec <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17hfda5e7f2f4cdedb7E+0x1a>
            panic!("spinlock {} release", self.name);
    80010cec:	6562                	ld	a0,24(sp)
    80010cee:	f4aa                	sd	a0,104(sp)
    80010cf0:	e12a                	sd	a0,128(sp)

0000000080010cf2 <.LBB17_10>:
    80010cf2:	0000d597          	auipc	a1,0xd
    80010cf6:	72658593          	addi	a1,a1,1830 # 8001e418 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E>
    80010cfa:	0000d097          	auipc	ra,0xd
    80010cfe:	742080e7          	jalr	1858(ra) # 8001e43c <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>
    80010d02:	e42a                	sd	a0,8(sp)
    80010d04:	e82e                	sd	a1,16(sp)
    80010d06:	a809                	j	80010d18 <.LBB17_10+0x26>
        self.cpu_id.set(-1);
    80010d08:	6562                	ld	a0,24(sp)
    80010d0a:	0541                	addi	a0,a0,16
    80010d0c:	55fd                	li	a1,-1
    80010d0e:	ffff4097          	auipc	ra,0xffff4
    80010d12:	470080e7          	jalr	1136(ra) # 8000517e <_ZN4core4cell13Cell$LT$T$GT$3set17hb9927bf4fdcefc87E>
    80010d16:	a825                	j	80010d4e <.LBB17_12+0x14>
            panic!("spinlock {} release", self.name);
    80010d18:	6542                	ld	a0,16(sp)
    80010d1a:	65a2                	ld	a1,8(sp)
    80010d1c:	ecae                	sd	a1,88(sp)
    80010d1e:	f0aa                	sd	a0,96(sp)

0000000080010d20 <.LBB17_11>:
    80010d20:	00018597          	auipc	a1,0x18
    80010d24:	b8858593          	addi	a1,a1,-1144 # 800288a8 <.L__unnamed_3>
    80010d28:	1028                	addi	a0,sp,40
    80010d2a:	4609                	li	a2,2
    80010d2c:	08b4                	addi	a3,sp,88
    80010d2e:	4705                	li	a4,1
    80010d30:	ffff4097          	auipc	ra,0xffff4
    80010d34:	704080e7          	jalr	1796(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80010d38:	a009                	j	80010d3a <.LBB17_12>

0000000080010d3a <.LBB17_12>:
    80010d3a:	00018597          	auipc	a1,0x18
    80010d3e:	b8e58593          	addi	a1,a1,-1138 # 800288c8 <.L__unnamed_4>
    80010d42:	1028                	addi	a0,sp,40
    80010d44:	00011097          	auipc	ra,0x11
    80010d48:	424080e7          	jalr	1060(ra) # 80022168 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
    80010d4c:	0000                	unimp
    80010d4e:	4511                	li	a0,4
        fence(Ordering::SeqCst);
    80010d50:	06a10b23          	sb	a0,118(sp)
    80010d54:	ffff4097          	auipc	ra,0xffff4
    80010d58:	a5c080e7          	jalr	-1444(ra) # 800047b0 <_ZN4core4sync6atomic5fence17hd2f91624c9f09ce8E>
    80010d5c:	a009                	j	80010d5e <.LBB17_12+0x24>
        self.locked.store(false, Ordering::Release);
    80010d5e:	6562                	ld	a0,24(sp)
    80010d60:	0561                	addi	a0,a0,24
    80010d62:	4605                	li	a2,1
    80010d64:	06c10ba3          	sb	a2,119(sp)
    80010d68:	4581                	li	a1,0
    80010d6a:	ffff4097          	auipc	ra,0xffff4
    80010d6e:	982080e7          	jalr	-1662(ra) # 800046ec <_ZN4core4sync6atomic10AtomicBool5store17h325e21ca90edd7e7E>
    80010d72:	a009                	j	80010d74 <.LBB17_12+0x3a>
        pop_off();
    80010d74:	00001097          	auipc	ra,0x1
    80010d78:	13e080e7          	jalr	318(ra) # 80011eb2 <_ZN6kernel7process3cpu7pop_off17hb8c7b834ab1c7c4cE>
    80010d7c:	a009                	j	80010d7e <.LBB17_12+0x44>
    }
    80010d7e:	60aa                	ld	ra,136(sp)
    80010d80:	6149                	addi	sp,sp,144
    80010d82:	8082                	ret

Disassembly of section .text._ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17hfedbfd7a024c8acfE:

0000000080010d84 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17hfedbfd7a024c8acfE>:
    pub fn release(&self) {
    80010d84:	7175                	addi	sp,sp,-144
    80010d86:	e506                	sd	ra,136(sp)
    80010d88:	ec2a                	sd	a0,24(sp)
    80010d8a:	fcaa                	sd	a0,120(sp)
        if !self.holding() {
    80010d8c:	00000097          	auipc	ra,0x0
    80010d90:	0aa080e7          	jalr	170(ra) # 80010e36 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h04bb873c43629d68E>
    80010d94:	f02a                	sd	a0,32(sp)
    80010d96:	a009                	j	80010d98 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17hfedbfd7a024c8acfE+0x14>
    80010d98:	7502                	ld	a0,32(sp)
    80010d9a:	e105                	bnez	a0,80010dba <.LBB18_10+0x16>
    80010d9c:	a009                	j	80010d9e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17hfedbfd7a024c8acfE+0x1a>
            panic!("spinlock {} release", self.name);
    80010d9e:	6562                	ld	a0,24(sp)
    80010da0:	f4aa                	sd	a0,104(sp)
    80010da2:	e12a                	sd	a0,128(sp)

0000000080010da4 <.LBB18_10>:
    80010da4:	0000d597          	auipc	a1,0xd
    80010da8:	67458593          	addi	a1,a1,1652 # 8001e418 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E>
    80010dac:	0000d097          	auipc	ra,0xd
    80010db0:	690080e7          	jalr	1680(ra) # 8001e43c <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>
    80010db4:	e42a                	sd	a0,8(sp)
    80010db6:	e82e                	sd	a1,16(sp)
    80010db8:	a809                	j	80010dca <.LBB18_10+0x26>
        self.cpu_id.set(-1);
    80010dba:	6562                	ld	a0,24(sp)
    80010dbc:	0541                	addi	a0,a0,16
    80010dbe:	55fd                	li	a1,-1
    80010dc0:	ffff4097          	auipc	ra,0xffff4
    80010dc4:	3be080e7          	jalr	958(ra) # 8000517e <_ZN4core4cell13Cell$LT$T$GT$3set17hb9927bf4fdcefc87E>
    80010dc8:	a825                	j	80010e00 <.LBB18_12+0x14>
            panic!("spinlock {} release", self.name);
    80010dca:	6542                	ld	a0,16(sp)
    80010dcc:	65a2                	ld	a1,8(sp)
    80010dce:	ecae                	sd	a1,88(sp)
    80010dd0:	f0aa                	sd	a0,96(sp)

0000000080010dd2 <.LBB18_11>:
    80010dd2:	00018597          	auipc	a1,0x18
    80010dd6:	ad658593          	addi	a1,a1,-1322 # 800288a8 <.L__unnamed_3>
    80010dda:	1028                	addi	a0,sp,40
    80010ddc:	4609                	li	a2,2
    80010dde:	08b4                	addi	a3,sp,88
    80010de0:	4705                	li	a4,1
    80010de2:	ffff4097          	auipc	ra,0xffff4
    80010de6:	652080e7          	jalr	1618(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80010dea:	a009                	j	80010dec <.LBB18_12>

0000000080010dec <.LBB18_12>:
    80010dec:	00018597          	auipc	a1,0x18
    80010df0:	adc58593          	addi	a1,a1,-1316 # 800288c8 <.L__unnamed_4>
    80010df4:	1028                	addi	a0,sp,40
    80010df6:	00011097          	auipc	ra,0x11
    80010dfa:	372080e7          	jalr	882(ra) # 80022168 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
    80010dfe:	0000                	unimp
    80010e00:	4511                	li	a0,4
        fence(Ordering::SeqCst);
    80010e02:	06a10b23          	sb	a0,118(sp)
    80010e06:	ffff4097          	auipc	ra,0xffff4
    80010e0a:	9aa080e7          	jalr	-1622(ra) # 800047b0 <_ZN4core4sync6atomic5fence17hd2f91624c9f09ce8E>
    80010e0e:	a009                	j	80010e10 <.LBB18_12+0x24>
        self.locked.store(false, Ordering::Release);
    80010e10:	6562                	ld	a0,24(sp)
    80010e12:	0561                	addi	a0,a0,24
    80010e14:	4605                	li	a2,1
    80010e16:	06c10ba3          	sb	a2,119(sp)
    80010e1a:	4581                	li	a1,0
    80010e1c:	ffff4097          	auipc	ra,0xffff4
    80010e20:	8d0080e7          	jalr	-1840(ra) # 800046ec <_ZN4core4sync6atomic10AtomicBool5store17h325e21ca90edd7e7E>
    80010e24:	a009                	j	80010e26 <.LBB18_12+0x3a>
        pop_off();
    80010e26:	00001097          	auipc	ra,0x1
    80010e2a:	08c080e7          	jalr	140(ra) # 80011eb2 <_ZN6kernel7process3cpu7pop_off17hb8c7b834ab1c7c4cE>
    80010e2e:	a009                	j	80010e30 <.LBB18_12+0x44>
    }
    80010e30:	60aa                	ld	ra,136(sp)
    80010e32:	6149                	addi	sp,sp,144
    80010e34:	8082                	ret

Disassembly of section .text._ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h04bb873c43629d68E:

0000000080010e36 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h04bb873c43629d68E>:
    pub fn holding(&self) -> bool{
    80010e36:	7139                	addi	sp,sp,-64
    80010e38:	fc06                	sd	ra,56(sp)
    80010e3a:	ec2a                	sd	a0,24(sp)
    80010e3c:	f82a                	sd	a0,48(sp)
        if self.locked.load(Ordering::Relaxed) && self.cpu_id.get() == unsafe{ cpuid() } as isize {
    80010e3e:	0561                	addi	a0,a0,24
    80010e40:	4581                	li	a1,0
    80010e42:	02b107a3          	sb	a1,47(sp)
    80010e46:	ffff4097          	auipc	ra,0xffff4
    80010e4a:	828080e7          	jalr	-2008(ra) # 8000466e <_ZN4core4sync6atomic10AtomicBool4load17h49a663f50dd66935E>
    80010e4e:	f02a                	sd	a0,32(sp)
    80010e50:	a035                	j	80010e7c <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h04bb873c43629d68E+0x46>
    80010e52:	4505                	li	a0,1
    80010e54:	02a10723          	sb	a0,46(sp)
    80010e58:	a829                	j	80010e72 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h04bb873c43629d68E+0x3c>
    80010e5a:	4501                	li	a0,0
    80010e5c:	02a10723          	sb	a0,46(sp)
    80010e60:	a809                	j	80010e72 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h04bb873c43629d68E+0x3c>
    80010e62:	6562                	ld	a0,24(sp)
    80010e64:	0541                	addi	a0,a0,16
    80010e66:	ffff4097          	auipc	ra,0xffff4
    80010e6a:	2b2080e7          	jalr	690(ra) # 80005118 <_ZN4core4cell13Cell$LT$T$GT$3get17hc0e1a98a16df48afE>
    80010e6e:	e82a                	sd	a0,16(sp)
    80010e70:	a809                	j	80010e82 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h04bb873c43629d68E+0x4c>
    80010e72:	02e14503          	lbu	a0,46(sp)
    80010e76:	8905                	andi	a0,a0,1
    80010e78:	e105                	bnez	a0,80010e98 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h04bb873c43629d68E+0x62>
    80010e7a:	a01d                	j	80010ea0 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h04bb873c43629d68E+0x6a>
    80010e7c:	7502                	ld	a0,32(sp)
    80010e7e:	f175                	bnez	a0,80010e62 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h04bb873c43629d68E+0x2c>
    80010e80:	bfe9                	j	80010e5a <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h04bb873c43629d68E+0x24>
    80010e82:	00001097          	auipc	ra,0x1
    80010e86:	b40080e7          	jalr	-1216(ra) # 800119c2 <_ZN6kernel7process3cpu5cpuid17h605093a6a9a60164E>
    80010e8a:	e42a                	sd	a0,8(sp)
    80010e8c:	a009                	j	80010e8e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h04bb873c43629d68E+0x58>
    80010e8e:	6542                	ld	a0,16(sp)
    80010e90:	65a2                	ld	a1,8(sp)
    80010e92:	fcb500e3          	beq	a0,a1,80010e52 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h04bb873c43629d68E+0x1c>
    80010e96:	b7d1                	j	80010e5a <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h04bb873c43629d68E+0x24>
    80010e98:	4505                	li	a0,1
            return true
    80010e9a:	02a106a3          	sb	a0,45(sp)
    }
    80010e9e:	a029                	j	80010ea8 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h04bb873c43629d68E+0x72>
    80010ea0:	4501                	li	a0,0
        false
    80010ea2:	02a106a3          	sb	a0,45(sp)
    }
    80010ea6:	a009                	j	80010ea8 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h04bb873c43629d68E+0x72>
    80010ea8:	02d14503          	lbu	a0,45(sp)
    80010eac:	70e2                	ld	ra,56(sp)
    80010eae:	6121                	addi	sp,sp,64
    80010eb0:	8082                	ret

Disassembly of section .text._ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h22290a831051ae28E:

0000000080010eb2 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h22290a831051ae28E>:
    pub fn holding(&self) -> bool{
    80010eb2:	7139                	addi	sp,sp,-64
    80010eb4:	fc06                	sd	ra,56(sp)
    80010eb6:	ec2a                	sd	a0,24(sp)
    80010eb8:	f82a                	sd	a0,48(sp)
        if self.locked.load(Ordering::Relaxed) && self.cpu_id.get() == unsafe{ cpuid() } as isize {
    80010eba:	0561                	addi	a0,a0,24
    80010ebc:	4581                	li	a1,0
    80010ebe:	02b107a3          	sb	a1,47(sp)
    80010ec2:	ffff3097          	auipc	ra,0xffff3
    80010ec6:	7ac080e7          	jalr	1964(ra) # 8000466e <_ZN4core4sync6atomic10AtomicBool4load17h49a663f50dd66935E>
    80010eca:	f02a                	sd	a0,32(sp)
    80010ecc:	a035                	j	80010ef8 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h22290a831051ae28E+0x46>
    80010ece:	4505                	li	a0,1
    80010ed0:	02a10723          	sb	a0,46(sp)
    80010ed4:	a829                	j	80010eee <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h22290a831051ae28E+0x3c>
    80010ed6:	4501                	li	a0,0
    80010ed8:	02a10723          	sb	a0,46(sp)
    80010edc:	a809                	j	80010eee <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h22290a831051ae28E+0x3c>
    80010ede:	6562                	ld	a0,24(sp)
    80010ee0:	0541                	addi	a0,a0,16
    80010ee2:	ffff4097          	auipc	ra,0xffff4
    80010ee6:	236080e7          	jalr	566(ra) # 80005118 <_ZN4core4cell13Cell$LT$T$GT$3get17hc0e1a98a16df48afE>
    80010eea:	e82a                	sd	a0,16(sp)
    80010eec:	a809                	j	80010efe <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h22290a831051ae28E+0x4c>
    80010eee:	02e14503          	lbu	a0,46(sp)
    80010ef2:	8905                	andi	a0,a0,1
    80010ef4:	e105                	bnez	a0,80010f14 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h22290a831051ae28E+0x62>
    80010ef6:	a01d                	j	80010f1c <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h22290a831051ae28E+0x6a>
    80010ef8:	7502                	ld	a0,32(sp)
    80010efa:	f175                	bnez	a0,80010ede <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h22290a831051ae28E+0x2c>
    80010efc:	bfe9                	j	80010ed6 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h22290a831051ae28E+0x24>
    80010efe:	00001097          	auipc	ra,0x1
    80010f02:	ac4080e7          	jalr	-1340(ra) # 800119c2 <_ZN6kernel7process3cpu5cpuid17h605093a6a9a60164E>
    80010f06:	e42a                	sd	a0,8(sp)
    80010f08:	a009                	j	80010f0a <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h22290a831051ae28E+0x58>
    80010f0a:	6542                	ld	a0,16(sp)
    80010f0c:	65a2                	ld	a1,8(sp)
    80010f0e:	fcb500e3          	beq	a0,a1,80010ece <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h22290a831051ae28E+0x1c>
    80010f12:	b7d1                	j	80010ed6 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h22290a831051ae28E+0x24>
    80010f14:	4505                	li	a0,1
            return true
    80010f16:	02a106a3          	sb	a0,45(sp)
    }
    80010f1a:	a029                	j	80010f24 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h22290a831051ae28E+0x72>
    80010f1c:	4501                	li	a0,0
        false
    80010f1e:	02a106a3          	sb	a0,45(sp)
    }
    80010f22:	a009                	j	80010f24 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h22290a831051ae28E+0x72>
    80010f24:	02d14503          	lbu	a0,45(sp)
    80010f28:	70e2                	ld	ra,56(sp)
    80010f2a:	6121                	addi	sp,sp,64
    80010f2c:	8082                	ret

Disassembly of section .text._ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h56772fc96a718090E:

0000000080010f2e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h56772fc96a718090E>:
    pub fn holding(&self) -> bool{
    80010f2e:	7139                	addi	sp,sp,-64
    80010f30:	fc06                	sd	ra,56(sp)
    80010f32:	ec2a                	sd	a0,24(sp)
    80010f34:	f82a                	sd	a0,48(sp)
        if self.locked.load(Ordering::Relaxed) && self.cpu_id.get() == unsafe{ cpuid() } as isize {
    80010f36:	0561                	addi	a0,a0,24
    80010f38:	4581                	li	a1,0
    80010f3a:	02b107a3          	sb	a1,47(sp)
    80010f3e:	ffff3097          	auipc	ra,0xffff3
    80010f42:	730080e7          	jalr	1840(ra) # 8000466e <_ZN4core4sync6atomic10AtomicBool4load17h49a663f50dd66935E>
    80010f46:	f02a                	sd	a0,32(sp)
    80010f48:	a035                	j	80010f74 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h56772fc96a718090E+0x46>
    80010f4a:	4505                	li	a0,1
    80010f4c:	02a10723          	sb	a0,46(sp)
    80010f50:	a829                	j	80010f6a <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h56772fc96a718090E+0x3c>
    80010f52:	4501                	li	a0,0
    80010f54:	02a10723          	sb	a0,46(sp)
    80010f58:	a809                	j	80010f6a <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h56772fc96a718090E+0x3c>
    80010f5a:	6562                	ld	a0,24(sp)
    80010f5c:	0541                	addi	a0,a0,16
    80010f5e:	ffff4097          	auipc	ra,0xffff4
    80010f62:	1ba080e7          	jalr	442(ra) # 80005118 <_ZN4core4cell13Cell$LT$T$GT$3get17hc0e1a98a16df48afE>
    80010f66:	e82a                	sd	a0,16(sp)
    80010f68:	a809                	j	80010f7a <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h56772fc96a718090E+0x4c>
    80010f6a:	02e14503          	lbu	a0,46(sp)
    80010f6e:	8905                	andi	a0,a0,1
    80010f70:	e105                	bnez	a0,80010f90 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h56772fc96a718090E+0x62>
    80010f72:	a01d                	j	80010f98 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h56772fc96a718090E+0x6a>
    80010f74:	7502                	ld	a0,32(sp)
    80010f76:	f175                	bnez	a0,80010f5a <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h56772fc96a718090E+0x2c>
    80010f78:	bfe9                	j	80010f52 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h56772fc96a718090E+0x24>
    80010f7a:	00001097          	auipc	ra,0x1
    80010f7e:	a48080e7          	jalr	-1464(ra) # 800119c2 <_ZN6kernel7process3cpu5cpuid17h605093a6a9a60164E>
    80010f82:	e42a                	sd	a0,8(sp)
    80010f84:	a009                	j	80010f86 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h56772fc96a718090E+0x58>
    80010f86:	6542                	ld	a0,16(sp)
    80010f88:	65a2                	ld	a1,8(sp)
    80010f8a:	fcb500e3          	beq	a0,a1,80010f4a <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h56772fc96a718090E+0x1c>
    80010f8e:	b7d1                	j	80010f52 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h56772fc96a718090E+0x24>
    80010f90:	4505                	li	a0,1
            return true
    80010f92:	02a106a3          	sb	a0,45(sp)
    }
    80010f96:	a029                	j	80010fa0 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h56772fc96a718090E+0x72>
    80010f98:	4501                	li	a0,0
        false
    80010f9a:	02a106a3          	sb	a0,45(sp)
    }
    80010f9e:	a009                	j	80010fa0 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h56772fc96a718090E+0x72>
    80010fa0:	02d14503          	lbu	a0,45(sp)
    80010fa4:	70e2                	ld	ra,56(sp)
    80010fa6:	6121                	addi	sp,sp,64
    80010fa8:	8082                	ret

Disassembly of section .text._ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h685eaac29cc8096eE:

0000000080010faa <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h685eaac29cc8096eE>:
    pub fn holding(&self) -> bool{
    80010faa:	7139                	addi	sp,sp,-64
    80010fac:	fc06                	sd	ra,56(sp)
    80010fae:	ec2a                	sd	a0,24(sp)
    80010fb0:	f82a                	sd	a0,48(sp)
        if self.locked.load(Ordering::Relaxed) && self.cpu_id.get() == unsafe{ cpuid() } as isize {
    80010fb2:	0561                	addi	a0,a0,24
    80010fb4:	4581                	li	a1,0
    80010fb6:	02b107a3          	sb	a1,47(sp)
    80010fba:	ffff3097          	auipc	ra,0xffff3
    80010fbe:	6b4080e7          	jalr	1716(ra) # 8000466e <_ZN4core4sync6atomic10AtomicBool4load17h49a663f50dd66935E>
    80010fc2:	f02a                	sd	a0,32(sp)
    80010fc4:	a035                	j	80010ff0 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h685eaac29cc8096eE+0x46>
    80010fc6:	4505                	li	a0,1
    80010fc8:	02a10723          	sb	a0,46(sp)
    80010fcc:	a829                	j	80010fe6 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h685eaac29cc8096eE+0x3c>
    80010fce:	4501                	li	a0,0
    80010fd0:	02a10723          	sb	a0,46(sp)
    80010fd4:	a809                	j	80010fe6 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h685eaac29cc8096eE+0x3c>
    80010fd6:	6562                	ld	a0,24(sp)
    80010fd8:	0541                	addi	a0,a0,16
    80010fda:	ffff4097          	auipc	ra,0xffff4
    80010fde:	13e080e7          	jalr	318(ra) # 80005118 <_ZN4core4cell13Cell$LT$T$GT$3get17hc0e1a98a16df48afE>
    80010fe2:	e82a                	sd	a0,16(sp)
    80010fe4:	a809                	j	80010ff6 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h685eaac29cc8096eE+0x4c>
    80010fe6:	02e14503          	lbu	a0,46(sp)
    80010fea:	8905                	andi	a0,a0,1
    80010fec:	e105                	bnez	a0,8001100c <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h685eaac29cc8096eE+0x62>
    80010fee:	a01d                	j	80011014 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h685eaac29cc8096eE+0x6a>
    80010ff0:	7502                	ld	a0,32(sp)
    80010ff2:	f175                	bnez	a0,80010fd6 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h685eaac29cc8096eE+0x2c>
    80010ff4:	bfe9                	j	80010fce <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h685eaac29cc8096eE+0x24>
    80010ff6:	00001097          	auipc	ra,0x1
    80010ffa:	9cc080e7          	jalr	-1588(ra) # 800119c2 <_ZN6kernel7process3cpu5cpuid17h605093a6a9a60164E>
    80010ffe:	e42a                	sd	a0,8(sp)
    80011000:	a009                	j	80011002 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h685eaac29cc8096eE+0x58>
    80011002:	6542                	ld	a0,16(sp)
    80011004:	65a2                	ld	a1,8(sp)
    80011006:	fcb500e3          	beq	a0,a1,80010fc6 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h685eaac29cc8096eE+0x1c>
    8001100a:	b7d1                	j	80010fce <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h685eaac29cc8096eE+0x24>
    8001100c:	4505                	li	a0,1
            return true
    8001100e:	02a106a3          	sb	a0,45(sp)
    }
    80011012:	a029                	j	8001101c <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h685eaac29cc8096eE+0x72>
    80011014:	4501                	li	a0,0
        false
    80011016:	02a106a3          	sb	a0,45(sp)
    }
    8001101a:	a009                	j	8001101c <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h685eaac29cc8096eE+0x72>
    8001101c:	02d14503          	lbu	a0,45(sp)
    80011020:	70e2                	ld	ra,56(sp)
    80011022:	6121                	addi	sp,sp,64
    80011024:	8082                	ret

Disassembly of section .text._ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h92b63d3de4da3516E:

0000000080011026 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h92b63d3de4da3516E>:
    pub fn holding(&self) -> bool{
    80011026:	7139                	addi	sp,sp,-64
    80011028:	fc06                	sd	ra,56(sp)
    8001102a:	ec2a                	sd	a0,24(sp)
    8001102c:	f82a                	sd	a0,48(sp)
        if self.locked.load(Ordering::Relaxed) && self.cpu_id.get() == unsafe{ cpuid() } as isize {
    8001102e:	0561                	addi	a0,a0,24
    80011030:	4581                	li	a1,0
    80011032:	02b107a3          	sb	a1,47(sp)
    80011036:	ffff3097          	auipc	ra,0xffff3
    8001103a:	638080e7          	jalr	1592(ra) # 8000466e <_ZN4core4sync6atomic10AtomicBool4load17h49a663f50dd66935E>
    8001103e:	f02a                	sd	a0,32(sp)
    80011040:	a035                	j	8001106c <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h92b63d3de4da3516E+0x46>
    80011042:	4505                	li	a0,1
    80011044:	02a10723          	sb	a0,46(sp)
    80011048:	a829                	j	80011062 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h92b63d3de4da3516E+0x3c>
    8001104a:	4501                	li	a0,0
    8001104c:	02a10723          	sb	a0,46(sp)
    80011050:	a809                	j	80011062 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h92b63d3de4da3516E+0x3c>
    80011052:	6562                	ld	a0,24(sp)
    80011054:	0541                	addi	a0,a0,16
    80011056:	ffff4097          	auipc	ra,0xffff4
    8001105a:	0c2080e7          	jalr	194(ra) # 80005118 <_ZN4core4cell13Cell$LT$T$GT$3get17hc0e1a98a16df48afE>
    8001105e:	e82a                	sd	a0,16(sp)
    80011060:	a809                	j	80011072 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h92b63d3de4da3516E+0x4c>
    80011062:	02e14503          	lbu	a0,46(sp)
    80011066:	8905                	andi	a0,a0,1
    80011068:	e105                	bnez	a0,80011088 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h92b63d3de4da3516E+0x62>
    8001106a:	a01d                	j	80011090 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h92b63d3de4da3516E+0x6a>
    8001106c:	7502                	ld	a0,32(sp)
    8001106e:	f175                	bnez	a0,80011052 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h92b63d3de4da3516E+0x2c>
    80011070:	bfe9                	j	8001104a <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h92b63d3de4da3516E+0x24>
    80011072:	00001097          	auipc	ra,0x1
    80011076:	950080e7          	jalr	-1712(ra) # 800119c2 <_ZN6kernel7process3cpu5cpuid17h605093a6a9a60164E>
    8001107a:	e42a                	sd	a0,8(sp)
    8001107c:	a009                	j	8001107e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h92b63d3de4da3516E+0x58>
    8001107e:	6542                	ld	a0,16(sp)
    80011080:	65a2                	ld	a1,8(sp)
    80011082:	fcb500e3          	beq	a0,a1,80011042 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h92b63d3de4da3516E+0x1c>
    80011086:	b7d1                	j	8001104a <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h92b63d3de4da3516E+0x24>
    80011088:	4505                	li	a0,1
            return true
    8001108a:	02a106a3          	sb	a0,45(sp)
    }
    8001108e:	a029                	j	80011098 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h92b63d3de4da3516E+0x72>
    80011090:	4501                	li	a0,0
        false
    80011092:	02a106a3          	sb	a0,45(sp)
    }
    80011096:	a009                	j	80011098 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h92b63d3de4da3516E+0x72>
    80011098:	02d14503          	lbu	a0,45(sp)
    8001109c:	70e2                	ld	ra,56(sp)
    8001109e:	6121                	addi	sp,sp,64
    800110a0:	8082                	ret

Disassembly of section .text._ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17haa146bec45c9d0c2E:

00000000800110a2 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17haa146bec45c9d0c2E>:
    pub fn holding(&self) -> bool{
    800110a2:	7139                	addi	sp,sp,-64
    800110a4:	fc06                	sd	ra,56(sp)
    800110a6:	ec2a                	sd	a0,24(sp)
    800110a8:	f82a                	sd	a0,48(sp)
        if self.locked.load(Ordering::Relaxed) && self.cpu_id.get() == unsafe{ cpuid() } as isize {
    800110aa:	0561                	addi	a0,a0,24
    800110ac:	4581                	li	a1,0
    800110ae:	02b107a3          	sb	a1,47(sp)
    800110b2:	ffff3097          	auipc	ra,0xffff3
    800110b6:	5bc080e7          	jalr	1468(ra) # 8000466e <_ZN4core4sync6atomic10AtomicBool4load17h49a663f50dd66935E>
    800110ba:	f02a                	sd	a0,32(sp)
    800110bc:	a035                	j	800110e8 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17haa146bec45c9d0c2E+0x46>
    800110be:	4505                	li	a0,1
    800110c0:	02a10723          	sb	a0,46(sp)
    800110c4:	a829                	j	800110de <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17haa146bec45c9d0c2E+0x3c>
    800110c6:	4501                	li	a0,0
    800110c8:	02a10723          	sb	a0,46(sp)
    800110cc:	a809                	j	800110de <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17haa146bec45c9d0c2E+0x3c>
    800110ce:	6562                	ld	a0,24(sp)
    800110d0:	0541                	addi	a0,a0,16
    800110d2:	ffff4097          	auipc	ra,0xffff4
    800110d6:	046080e7          	jalr	70(ra) # 80005118 <_ZN4core4cell13Cell$LT$T$GT$3get17hc0e1a98a16df48afE>
    800110da:	e82a                	sd	a0,16(sp)
    800110dc:	a809                	j	800110ee <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17haa146bec45c9d0c2E+0x4c>
    800110de:	02e14503          	lbu	a0,46(sp)
    800110e2:	8905                	andi	a0,a0,1
    800110e4:	e105                	bnez	a0,80011104 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17haa146bec45c9d0c2E+0x62>
    800110e6:	a01d                	j	8001110c <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17haa146bec45c9d0c2E+0x6a>
    800110e8:	7502                	ld	a0,32(sp)
    800110ea:	f175                	bnez	a0,800110ce <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17haa146bec45c9d0c2E+0x2c>
    800110ec:	bfe9                	j	800110c6 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17haa146bec45c9d0c2E+0x24>
    800110ee:	00001097          	auipc	ra,0x1
    800110f2:	8d4080e7          	jalr	-1836(ra) # 800119c2 <_ZN6kernel7process3cpu5cpuid17h605093a6a9a60164E>
    800110f6:	e42a                	sd	a0,8(sp)
    800110f8:	a009                	j	800110fa <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17haa146bec45c9d0c2E+0x58>
    800110fa:	6542                	ld	a0,16(sp)
    800110fc:	65a2                	ld	a1,8(sp)
    800110fe:	fcb500e3          	beq	a0,a1,800110be <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17haa146bec45c9d0c2E+0x1c>
    80011102:	b7d1                	j	800110c6 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17haa146bec45c9d0c2E+0x24>
    80011104:	4505                	li	a0,1
            return true
    80011106:	02a106a3          	sb	a0,45(sp)
    }
    8001110a:	a029                	j	80011114 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17haa146bec45c9d0c2E+0x72>
    8001110c:	4501                	li	a0,0
        false
    8001110e:	02a106a3          	sb	a0,45(sp)
    }
    80011112:	a009                	j	80011114 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17haa146bec45c9d0c2E+0x72>
    80011114:	02d14503          	lbu	a0,45(sp)
    80011118:	70e2                	ld	ra,56(sp)
    8001111a:	6121                	addi	sp,sp,64
    8001111c:	8082                	ret

Disassembly of section .text._ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hca575eb433d6c072E:

000000008001111e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hca575eb433d6c072E>:
    pub fn holding(&self) -> bool{
    8001111e:	7139                	addi	sp,sp,-64
    80011120:	fc06                	sd	ra,56(sp)
    80011122:	ec2a                	sd	a0,24(sp)
    80011124:	f82a                	sd	a0,48(sp)
        if self.locked.load(Ordering::Relaxed) && self.cpu_id.get() == unsafe{ cpuid() } as isize {
    80011126:	0561                	addi	a0,a0,24
    80011128:	4581                	li	a1,0
    8001112a:	02b107a3          	sb	a1,47(sp)
    8001112e:	ffff3097          	auipc	ra,0xffff3
    80011132:	540080e7          	jalr	1344(ra) # 8000466e <_ZN4core4sync6atomic10AtomicBool4load17h49a663f50dd66935E>
    80011136:	f02a                	sd	a0,32(sp)
    80011138:	a035                	j	80011164 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hca575eb433d6c072E+0x46>
    8001113a:	4505                	li	a0,1
    8001113c:	02a10723          	sb	a0,46(sp)
    80011140:	a829                	j	8001115a <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hca575eb433d6c072E+0x3c>
    80011142:	4501                	li	a0,0
    80011144:	02a10723          	sb	a0,46(sp)
    80011148:	a809                	j	8001115a <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hca575eb433d6c072E+0x3c>
    8001114a:	6562                	ld	a0,24(sp)
    8001114c:	0541                	addi	a0,a0,16
    8001114e:	ffff4097          	auipc	ra,0xffff4
    80011152:	fca080e7          	jalr	-54(ra) # 80005118 <_ZN4core4cell13Cell$LT$T$GT$3get17hc0e1a98a16df48afE>
    80011156:	e82a                	sd	a0,16(sp)
    80011158:	a809                	j	8001116a <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hca575eb433d6c072E+0x4c>
    8001115a:	02e14503          	lbu	a0,46(sp)
    8001115e:	8905                	andi	a0,a0,1
    80011160:	e105                	bnez	a0,80011180 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hca575eb433d6c072E+0x62>
    80011162:	a01d                	j	80011188 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hca575eb433d6c072E+0x6a>
    80011164:	7502                	ld	a0,32(sp)
    80011166:	f175                	bnez	a0,8001114a <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hca575eb433d6c072E+0x2c>
    80011168:	bfe9                	j	80011142 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hca575eb433d6c072E+0x24>
    8001116a:	00001097          	auipc	ra,0x1
    8001116e:	858080e7          	jalr	-1960(ra) # 800119c2 <_ZN6kernel7process3cpu5cpuid17h605093a6a9a60164E>
    80011172:	e42a                	sd	a0,8(sp)
    80011174:	a009                	j	80011176 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hca575eb433d6c072E+0x58>
    80011176:	6542                	ld	a0,16(sp)
    80011178:	65a2                	ld	a1,8(sp)
    8001117a:	fcb500e3          	beq	a0,a1,8001113a <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hca575eb433d6c072E+0x1c>
    8001117e:	b7d1                	j	80011142 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hca575eb433d6c072E+0x24>
    80011180:	4505                	li	a0,1
            return true
    80011182:	02a106a3          	sb	a0,45(sp)
    }
    80011186:	a029                	j	80011190 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hca575eb433d6c072E+0x72>
    80011188:	4501                	li	a0,0
        false
    8001118a:	02a106a3          	sb	a0,45(sp)
    }
    8001118e:	a009                	j	80011190 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hca575eb433d6c072E+0x72>
    80011190:	02d14503          	lbu	a0,45(sp)
    80011194:	70e2                	ld	ra,56(sp)
    80011196:	6121                	addi	sp,sp,64
    80011198:	8082                	ret

Disassembly of section .text._ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17he647ed27b9879bf9E:

000000008001119a <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17he647ed27b9879bf9E>:
    pub fn holding(&self) -> bool{
    8001119a:	7139                	addi	sp,sp,-64
    8001119c:	fc06                	sd	ra,56(sp)
    8001119e:	ec2a                	sd	a0,24(sp)
    800111a0:	f82a                	sd	a0,48(sp)
        if self.locked.load(Ordering::Relaxed) && self.cpu_id.get() == unsafe{ cpuid() } as isize {
    800111a2:	0561                	addi	a0,a0,24
    800111a4:	4581                	li	a1,0
    800111a6:	02b107a3          	sb	a1,47(sp)
    800111aa:	ffff3097          	auipc	ra,0xffff3
    800111ae:	4c4080e7          	jalr	1220(ra) # 8000466e <_ZN4core4sync6atomic10AtomicBool4load17h49a663f50dd66935E>
    800111b2:	f02a                	sd	a0,32(sp)
    800111b4:	a035                	j	800111e0 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17he647ed27b9879bf9E+0x46>
    800111b6:	4505                	li	a0,1
    800111b8:	02a10723          	sb	a0,46(sp)
    800111bc:	a829                	j	800111d6 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17he647ed27b9879bf9E+0x3c>
    800111be:	4501                	li	a0,0
    800111c0:	02a10723          	sb	a0,46(sp)
    800111c4:	a809                	j	800111d6 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17he647ed27b9879bf9E+0x3c>
    800111c6:	6562                	ld	a0,24(sp)
    800111c8:	0541                	addi	a0,a0,16
    800111ca:	ffff4097          	auipc	ra,0xffff4
    800111ce:	f4e080e7          	jalr	-178(ra) # 80005118 <_ZN4core4cell13Cell$LT$T$GT$3get17hc0e1a98a16df48afE>
    800111d2:	e82a                	sd	a0,16(sp)
    800111d4:	a809                	j	800111e6 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17he647ed27b9879bf9E+0x4c>
    800111d6:	02e14503          	lbu	a0,46(sp)
    800111da:	8905                	andi	a0,a0,1
    800111dc:	e105                	bnez	a0,800111fc <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17he647ed27b9879bf9E+0x62>
    800111de:	a01d                	j	80011204 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17he647ed27b9879bf9E+0x6a>
    800111e0:	7502                	ld	a0,32(sp)
    800111e2:	f175                	bnez	a0,800111c6 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17he647ed27b9879bf9E+0x2c>
    800111e4:	bfe9                	j	800111be <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17he647ed27b9879bf9E+0x24>
    800111e6:	00000097          	auipc	ra,0x0
    800111ea:	7dc080e7          	jalr	2012(ra) # 800119c2 <_ZN6kernel7process3cpu5cpuid17h605093a6a9a60164E>
    800111ee:	e42a                	sd	a0,8(sp)
    800111f0:	a009                	j	800111f2 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17he647ed27b9879bf9E+0x58>
    800111f2:	6542                	ld	a0,16(sp)
    800111f4:	65a2                	ld	a1,8(sp)
    800111f6:	fcb500e3          	beq	a0,a1,800111b6 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17he647ed27b9879bf9E+0x1c>
    800111fa:	b7d1                	j	800111be <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17he647ed27b9879bf9E+0x24>
    800111fc:	4505                	li	a0,1
            return true
    800111fe:	02a106a3          	sb	a0,45(sp)
    }
    80011202:	a029                	j	8001120c <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17he647ed27b9879bf9E+0x72>
    80011204:	4501                	li	a0,0
        false
    80011206:	02a106a3          	sb	a0,45(sp)
    }
    8001120a:	a009                	j	8001120c <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17he647ed27b9879bf9E+0x72>
    8001120c:	02d14503          	lbu	a0,45(sp)
    80011210:	70e2                	ld	ra,56(sp)
    80011212:	6121                	addi	sp,sp,64
    80011214:	8082                	ret

Disassembly of section .text._ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hfffb7f56d7315d17E:

0000000080011216 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hfffb7f56d7315d17E>:
    pub fn holding(&self) -> bool{
    80011216:	7139                	addi	sp,sp,-64
    80011218:	fc06                	sd	ra,56(sp)
    8001121a:	ec2a                	sd	a0,24(sp)
    8001121c:	f82a                	sd	a0,48(sp)
        if self.locked.load(Ordering::Relaxed) && self.cpu_id.get() == unsafe{ cpuid() } as isize {
    8001121e:	0561                	addi	a0,a0,24
    80011220:	4581                	li	a1,0
    80011222:	02b107a3          	sb	a1,47(sp)
    80011226:	ffff3097          	auipc	ra,0xffff3
    8001122a:	448080e7          	jalr	1096(ra) # 8000466e <_ZN4core4sync6atomic10AtomicBool4load17h49a663f50dd66935E>
    8001122e:	f02a                	sd	a0,32(sp)
    80011230:	a035                	j	8001125c <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hfffb7f56d7315d17E+0x46>
    80011232:	4505                	li	a0,1
    80011234:	02a10723          	sb	a0,46(sp)
    80011238:	a829                	j	80011252 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hfffb7f56d7315d17E+0x3c>
    8001123a:	4501                	li	a0,0
    8001123c:	02a10723          	sb	a0,46(sp)
    80011240:	a809                	j	80011252 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hfffb7f56d7315d17E+0x3c>
    80011242:	6562                	ld	a0,24(sp)
    80011244:	0541                	addi	a0,a0,16
    80011246:	ffff4097          	auipc	ra,0xffff4
    8001124a:	ed2080e7          	jalr	-302(ra) # 80005118 <_ZN4core4cell13Cell$LT$T$GT$3get17hc0e1a98a16df48afE>
    8001124e:	e82a                	sd	a0,16(sp)
    80011250:	a809                	j	80011262 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hfffb7f56d7315d17E+0x4c>
    80011252:	02e14503          	lbu	a0,46(sp)
    80011256:	8905                	andi	a0,a0,1
    80011258:	e105                	bnez	a0,80011278 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hfffb7f56d7315d17E+0x62>
    8001125a:	a01d                	j	80011280 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hfffb7f56d7315d17E+0x6a>
    8001125c:	7502                	ld	a0,32(sp)
    8001125e:	f175                	bnez	a0,80011242 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hfffb7f56d7315d17E+0x2c>
    80011260:	bfe9                	j	8001123a <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hfffb7f56d7315d17E+0x24>
    80011262:	00000097          	auipc	ra,0x0
    80011266:	760080e7          	jalr	1888(ra) # 800119c2 <_ZN6kernel7process3cpu5cpuid17h605093a6a9a60164E>
    8001126a:	e42a                	sd	a0,8(sp)
    8001126c:	a009                	j	8001126e <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hfffb7f56d7315d17E+0x58>
    8001126e:	6542                	ld	a0,16(sp)
    80011270:	65a2                	ld	a1,8(sp)
    80011272:	fcb500e3          	beq	a0,a1,80011232 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hfffb7f56d7315d17E+0x1c>
    80011276:	b7d1                	j	8001123a <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hfffb7f56d7315d17E+0x24>
    80011278:	4505                	li	a0,1
            return true
    8001127a:	02a106a3          	sb	a0,45(sp)
    }
    8001127e:	a029                	j	80011288 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hfffb7f56d7315d17E+0x72>
    80011280:	4501                	li	a0,0
        false
    80011282:	02a106a3          	sb	a0,45(sp)
    }
    80011286:	a009                	j	80011288 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17hfffb7f56d7315d17E+0x72>
    80011288:	02d14503          	lbu	a0,45(sp)
    8001128c:	70e2                	ld	ra,56(sp)
    8001128e:	6121                	addi	sp,sp,64
    80011290:	8082                	ret

Disassembly of section .text._ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h2948b75da44fd3f4E:

0000000080011292 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h2948b75da44fd3f4E>:
    fn deref(&self) -> &Self::Target {
    80011292:	1101                	addi	sp,sp,-32
    80011294:	ec06                	sd	ra,24(sp)
    80011296:	e82a                	sd	a0,16(sp)
            &*self.spinlock.data.get()
    80011298:	6108                	ld	a0,0(a0)
    8001129a:	02050513          	addi	a0,a0,32
    8001129e:	ffff4097          	auipc	ra,0xffff4
    800112a2:	f9c080e7          	jalr	-100(ra) # 8000523a <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h4b85f27290bf8d3bE>
    800112a6:	e42a                	sd	a0,8(sp)
    800112a8:	a009                	j	800112aa <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h2948b75da44fd3f4E+0x18>
    }
    800112aa:	6522                	ld	a0,8(sp)
    800112ac:	60e2                	ld	ra,24(sp)
    800112ae:	6105                	addi	sp,sp,32
    800112b0:	8082                	ret

Disassembly of section .text._ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h570d144f846c2ec7E:

00000000800112b2 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h570d144f846c2ec7E>:
    fn deref(&self) -> &Self::Target {
    800112b2:	1101                	addi	sp,sp,-32
    800112b4:	ec06                	sd	ra,24(sp)
    800112b6:	e82a                	sd	a0,16(sp)
            &*self.spinlock.data.get()
    800112b8:	6108                	ld	a0,0(a0)
    800112ba:	02050513          	addi	a0,a0,32
    800112be:	00011097          	auipc	ra,0x11
    800112c2:	c74080e7          	jalr	-908(ra) # 80021f32 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17hcdc438fb74b7ecc8E>
    800112c6:	e42a                	sd	a0,8(sp)
    800112c8:	a009                	j	800112ca <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h570d144f846c2ec7E+0x18>
    }
    800112ca:	6522                	ld	a0,8(sp)
    800112cc:	60e2                	ld	ra,24(sp)
    800112ce:	6105                	addi	sp,sp,32
    800112d0:	8082                	ret

Disassembly of section .text._ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h7eb0b551b3d2dabcE:

00000000800112d2 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h7eb0b551b3d2dabcE>:
    fn deref(&self) -> &Self::Target {
    800112d2:	1101                	addi	sp,sp,-32
    800112d4:	ec06                	sd	ra,24(sp)
    800112d6:	e82a                	sd	a0,16(sp)
            &*self.spinlock.data.get()
    800112d8:	6108                	ld	a0,0(a0)
    800112da:	6585                	lui	a1,0x1
    800112dc:	952e                	add	a0,a0,a1
    800112de:	ffff4097          	auipc	ra,0xffff4
    800112e2:	f54080e7          	jalr	-172(ra) # 80005232 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h222732a2deb54afaE>
    800112e6:	e42a                	sd	a0,8(sp)
    800112e8:	a009                	j	800112ea <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h7eb0b551b3d2dabcE+0x18>
    }
    800112ea:	6522                	ld	a0,8(sp)
    800112ec:	60e2                	ld	ra,24(sp)
    800112ee:	6105                	addi	sp,sp,32
    800112f0:	8082                	ret

Disassembly of section .text._ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h89fb3cfbc0625c4cE:

00000000800112f2 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h89fb3cfbc0625c4cE>:
    fn deref(&self) -> &Self::Target {
    800112f2:	1101                	addi	sp,sp,-32
    800112f4:	ec06                	sd	ra,24(sp)
    800112f6:	e82a                	sd	a0,16(sp)
            &*self.spinlock.data.get()
    800112f8:	6108                	ld	a0,0(a0)
    800112fa:	0571                	addi	a0,a0,28
    800112fc:	ffff4097          	auipc	ra,0xffff4
    80011300:	f76080e7          	jalr	-138(ra) # 80005272 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17hf0694f5cd8271985E>
    80011304:	e42a                	sd	a0,8(sp)
    80011306:	a009                	j	80011308 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h89fb3cfbc0625c4cE+0x16>
    }
    80011308:	6522                	ld	a0,8(sp)
    8001130a:	60e2                	ld	ra,24(sp)
    8001130c:	6105                	addi	sp,sp,32
    8001130e:	8082                	ret

Disassembly of section .text._ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8f385c8b975788d5E:

0000000080011310 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8f385c8b975788d5E>:
    fn deref(&self) -> &Self::Target {
    80011310:	1101                	addi	sp,sp,-32
    80011312:	ec06                	sd	ra,24(sp)
    80011314:	e82a                	sd	a0,16(sp)
            &*self.spinlock.data.get()
    80011316:	6108                	ld	a0,0(a0)
    80011318:	02050513          	addi	a0,a0,32
    8001131c:	ffff4097          	auipc	ra,0xffff4
    80011320:	f06080e7          	jalr	-250(ra) # 80005222 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h05438521b5304ed4E>
    80011324:	e42a                	sd	a0,8(sp)
    80011326:	a009                	j	80011328 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h8f385c8b975788d5E+0x18>
    }
    80011328:	6522                	ld	a0,8(sp)
    8001132a:	60e2                	ld	ra,24(sp)
    8001132c:	6105                	addi	sp,sp,32
    8001132e:	8082                	ret

Disassembly of section .text._ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h9affced61e721535E:

0000000080011330 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h9affced61e721535E>:
    fn deref(&self) -> &Self::Target {
    80011330:	1101                	addi	sp,sp,-32
    80011332:	ec06                	sd	ra,24(sp)
    80011334:	e82a                	sd	a0,16(sp)
            &*self.spinlock.data.get()
    80011336:	6108                	ld	a0,0(a0)
    80011338:	02050513          	addi	a0,a0,32
    8001133c:	ffff4097          	auipc	ra,0xffff4
    80011340:	f16080e7          	jalr	-234(ra) # 80005252 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h85f42af92512c053E>
    80011344:	e42a                	sd	a0,8(sp)
    80011346:	a009                	j	80011348 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h9affced61e721535E+0x18>
    }
    80011348:	6522                	ld	a0,8(sp)
    8001134a:	60e2                	ld	ra,24(sp)
    8001134c:	6105                	addi	sp,sp,32
    8001134e:	8082                	ret

Disassembly of section .text._ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc8a5a3c7c4ffa947E:

0000000080011350 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc8a5a3c7c4ffa947E>:
    fn deref(&self) -> &Self::Target {
    80011350:	1101                	addi	sp,sp,-32
    80011352:	ec06                	sd	ra,24(sp)
    80011354:	e82a                	sd	a0,16(sp)
            &*self.spinlock.data.get()
    80011356:	6108                	ld	a0,0(a0)
    80011358:	02050513          	addi	a0,a0,32
    8001135c:	ffff4097          	auipc	ra,0xffff4
    80011360:	f0e080e7          	jalr	-242(ra) # 8000526a <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17hbe9e1598ba1bbd42E>
    80011364:	e42a                	sd	a0,8(sp)
    80011366:	a009                	j	80011368 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc8a5a3c7c4ffa947E+0x18>
    }
    80011368:	6522                	ld	a0,8(sp)
    8001136a:	60e2                	ld	ra,24(sp)
    8001136c:	6105                	addi	sp,sp,32
    8001136e:	8082                	ret

Disassembly of section .text._ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h362a59dae1fa4f35E:

0000000080011370 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h362a59dae1fa4f35E>:
    fn deref_mut(&mut self) -> &mut Self::Target{
    80011370:	1101                	addi	sp,sp,-32
    80011372:	ec06                	sd	ra,24(sp)
    80011374:	e82a                	sd	a0,16(sp)
            &mut *self.spinlock.data.get()
    80011376:	6108                	ld	a0,0(a0)
    80011378:	6585                	lui	a1,0x1
    8001137a:	952e                	add	a0,a0,a1
    8001137c:	ffff4097          	auipc	ra,0xffff4
    80011380:	eb6080e7          	jalr	-330(ra) # 80005232 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h222732a2deb54afaE>
    80011384:	e42a                	sd	a0,8(sp)
    80011386:	a009                	j	80011388 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h362a59dae1fa4f35E+0x18>
    }
    80011388:	6522                	ld	a0,8(sp)
    8001138a:	60e2                	ld	ra,24(sp)
    8001138c:	6105                	addi	sp,sp,32
    8001138e:	8082                	ret

Disassembly of section .text._ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h5eeb9448b47ad682E:

0000000080011390 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h5eeb9448b47ad682E>:
    fn deref_mut(&mut self) -> &mut Self::Target{
    80011390:	1101                	addi	sp,sp,-32
    80011392:	ec06                	sd	ra,24(sp)
    80011394:	e82a                	sd	a0,16(sp)
            &mut *self.spinlock.data.get()
    80011396:	6108                	ld	a0,0(a0)
    80011398:	02050513          	addi	a0,a0,32
    8001139c:	ffff4097          	auipc	ra,0xffff4
    800113a0:	eae080e7          	jalr	-338(ra) # 8000524a <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h6b3041abf61d3f4fE>
    800113a4:	e42a                	sd	a0,8(sp)
    800113a6:	a009                	j	800113a8 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h5eeb9448b47ad682E+0x18>
    }
    800113a8:	6522                	ld	a0,8(sp)
    800113aa:	60e2                	ld	ra,24(sp)
    800113ac:	6105                	addi	sp,sp,32
    800113ae:	8082                	ret

Disassembly of section .text._ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h6a09efacfb59499dE:

00000000800113b0 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h6a09efacfb59499dE>:
    fn deref_mut(&mut self) -> &mut Self::Target{
    800113b0:	1101                	addi	sp,sp,-32
    800113b2:	ec06                	sd	ra,24(sp)
    800113b4:	e82a                	sd	a0,16(sp)
            &mut *self.spinlock.data.get()
    800113b6:	6108                	ld	a0,0(a0)
    800113b8:	0571                	addi	a0,a0,28
    800113ba:	ffff4097          	auipc	ra,0xffff4
    800113be:	eb8080e7          	jalr	-328(ra) # 80005272 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17hf0694f5cd8271985E>
    800113c2:	e42a                	sd	a0,8(sp)
    800113c4:	a009                	j	800113c6 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h6a09efacfb59499dE+0x16>
    }
    800113c6:	6522                	ld	a0,8(sp)
    800113c8:	60e2                	ld	ra,24(sp)
    800113ca:	6105                	addi	sp,sp,32
    800113cc:	8082                	ret

Disassembly of section .text._ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h6db8254bcc254a19E:

00000000800113ce <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h6db8254bcc254a19E>:
    fn deref_mut(&mut self) -> &mut Self::Target{
    800113ce:	1101                	addi	sp,sp,-32
    800113d0:	ec06                	sd	ra,24(sp)
    800113d2:	e82a                	sd	a0,16(sp)
            &mut *self.spinlock.data.get()
    800113d4:	6108                	ld	a0,0(a0)
    800113d6:	02050513          	addi	a0,a0,32
    800113da:	ffff4097          	auipc	ra,0xffff4
    800113de:	e48080e7          	jalr	-440(ra) # 80005222 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h05438521b5304ed4E>
    800113e2:	e42a                	sd	a0,8(sp)
    800113e4:	a009                	j	800113e6 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h6db8254bcc254a19E+0x18>
    }
    800113e6:	6522                	ld	a0,8(sp)
    800113e8:	60e2                	ld	ra,24(sp)
    800113ea:	6105                	addi	sp,sp,32
    800113ec:	8082                	ret

Disassembly of section .text._ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7113684d7590c345E:

00000000800113ee <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7113684d7590c345E>:
    fn deref_mut(&mut self) -> &mut Self::Target{
    800113ee:	1101                	addi	sp,sp,-32
    800113f0:	ec06                	sd	ra,24(sp)
    800113f2:	e82a                	sd	a0,16(sp)
            &mut *self.spinlock.data.get()
    800113f4:	6108                	ld	a0,0(a0)
    800113f6:	02050513          	addi	a0,a0,32
    800113fa:	ffff4097          	auipc	ra,0xffff4
    800113fe:	e40080e7          	jalr	-448(ra) # 8000523a <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h4b85f27290bf8d3bE>
    80011402:	e42a                	sd	a0,8(sp)
    80011404:	a009                	j	80011406 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7113684d7590c345E+0x18>
    }
    80011406:	6522                	ld	a0,8(sp)
    80011408:	60e2                	ld	ra,24(sp)
    8001140a:	6105                	addi	sp,sp,32
    8001140c:	8082                	ret

Disassembly of section .text._ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7fbd4bc7b8273f3cE:

000000008001140e <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7fbd4bc7b8273f3cE>:
    fn deref_mut(&mut self) -> &mut Self::Target{
    8001140e:	1101                	addi	sp,sp,-32
    80011410:	ec06                	sd	ra,24(sp)
    80011412:	e82a                	sd	a0,16(sp)
            &mut *self.spinlock.data.get()
    80011414:	6108                	ld	a0,0(a0)
    80011416:	02050513          	addi	a0,a0,32
    8001141a:	ffff4097          	auipc	ra,0xffff4
    8001141e:	e50080e7          	jalr	-432(ra) # 8000526a <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17hbe9e1598ba1bbd42E>
    80011422:	e42a                	sd	a0,8(sp)
    80011424:	a009                	j	80011426 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7fbd4bc7b8273f3cE+0x18>
    }
    80011426:	6522                	ld	a0,8(sp)
    80011428:	60e2                	ld	ra,24(sp)
    8001142a:	6105                	addi	sp,sp,32
    8001142c:	8082                	ret

Disassembly of section .text._ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h8532990243dc594eE:

000000008001142e <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h8532990243dc594eE>:
    fn deref_mut(&mut self) -> &mut Self::Target{
    8001142e:	1101                	addi	sp,sp,-32
    80011430:	ec06                	sd	ra,24(sp)
    80011432:	e82a                	sd	a0,16(sp)
            &mut *self.spinlock.data.get()
    80011434:	6108                	ld	a0,0(a0)
    80011436:	02050513          	addi	a0,a0,32
    8001143a:	00011097          	auipc	ra,0x11
    8001143e:	af8080e7          	jalr	-1288(ra) # 80021f32 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17hcdc438fb74b7ecc8E>
    80011442:	e42a                	sd	a0,8(sp)
    80011444:	a009                	j	80011446 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h8532990243dc594eE+0x18>
    }
    80011446:	6522                	ld	a0,8(sp)
    80011448:	60e2                	ld	ra,24(sp)
    8001144a:	6105                	addi	sp,sp,32
    8001144c:	8082                	ret

Disassembly of section .text._ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hce69ac52326dbcadE:

000000008001144e <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hce69ac52326dbcadE>:
    fn deref_mut(&mut self) -> &mut Self::Target{
    8001144e:	1101                	addi	sp,sp,-32
    80011450:	ec06                	sd	ra,24(sp)
    80011452:	e82a                	sd	a0,16(sp)
            &mut *self.spinlock.data.get()
    80011454:	6108                	ld	a0,0(a0)
    80011456:	02050513          	addi	a0,a0,32
    8001145a:	ffff4097          	auipc	ra,0xffff4
    8001145e:	df8080e7          	jalr	-520(ra) # 80005252 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h85f42af92512c053E>
    80011462:	e42a                	sd	a0,8(sp)
    80011464:	a009                	j	80011466 <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hce69ac52326dbcadE+0x18>
    }
    80011466:	6522                	ld	a0,8(sp)
    80011468:	60e2                	ld	ra,24(sp)
    8001146a:	6105                	addi	sp,sp,32
    8001146c:	8082                	ret

Disassembly of section .text._ZN4core5slice5index77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h6397a28cd31ac6bcE:

000000008001146e <_ZN4core5slice5index77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h6397a28cd31ac6bcE>:
    fn index_mut(&mut self, index: I) -> &mut I::Output {
    8001146e:	7179                	addi	sp,sp,-48
    80011470:	f406                	sd	ra,40(sp)
    80011472:	e82a                	sd	a0,16(sp)
    80011474:	ec2e                	sd	a1,24(sp)
        index.index_mut(self)
    80011476:	ffffa097          	auipc	ra,0xffffa
    8001147a:	53e080e7          	jalr	1342(ra) # 8000b9b4 <_ZN97_$LT$core..ops..range..RangeFull$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hf4f8ccbc08517323E>
    8001147e:	e02a                	sd	a0,0(sp)
    80011480:	e42e                	sd	a1,8(sp)
    80011482:	a009                	j	80011484 <_ZN4core5slice5index77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h6397a28cd31ac6bcE+0x16>
    }
    80011484:	65a2                	ld	a1,8(sp)
    80011486:	6502                	ld	a0,0(sp)
    80011488:	70a2                	ld	ra,40(sp)
    8001148a:	6145                	addi	sp,sp,48
    8001148c:	8082                	ret

Disassembly of section .text._ZN4core5slice5index77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hb4c5f14cfefb7eb2E:

000000008001148e <_ZN4core5slice5index77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hb4c5f14cfefb7eb2E>:
    fn index_mut(&mut self, index: I) -> &mut I::Output {
    8001148e:	7139                	addi	sp,sp,-64
    80011490:	fc06                	sd	ra,56(sp)
    80011492:	e432                	sd	a2,8(sp)
    80011494:	862e                	mv	a2,a1
    80011496:	85aa                	mv	a1,a0
    80011498:	6522                	ld	a0,8(sp)
    8001149a:	f02e                	sd	a1,32(sp)
    8001149c:	f432                	sd	a2,40(sp)
    8001149e:	f82a                	sd	a0,48(sp)
        index.index_mut(self)
    800114a0:	ffffa097          	auipc	ra,0xffffa
    800114a4:	0a6080e7          	jalr	166(ra) # 8000b546 <_ZN108_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h6e1483f88545dbc6E>
    800114a8:	e82a                	sd	a0,16(sp)
    800114aa:	ec2e                	sd	a1,24(sp)
    800114ac:	a009                	j	800114ae <_ZN4core5slice5index77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hb4c5f14cfefb7eb2E+0x20>
    }
    800114ae:	65e2                	ld	a1,24(sp)
    800114b0:	6542                	ld	a0,16(sp)
    800114b2:	70e2                	ld	ra,56(sp)
    800114b4:	6121                	addi	sp,sp,64
    800114b6:	8082                	ret

Disassembly of section .text._ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1a7368dde5044597E:

00000000800114b8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1a7368dde5044597E>:
    800114b8:	1101                	addi	sp,sp,-32
    800114ba:	ec06                	sd	ra,24(sp)
    800114bc:	e42a                	sd	a0,8(sp)
    800114be:	e82e                	sd	a1,16(sp)
    800114c0:	6108                	ld	a0,0(a0)
    800114c2:	ffff7097          	auipc	ra,0xffff7
    800114c6:	a14080e7          	jalr	-1516(ra) # 80007ed6 <_ZN85_$LT$kernel..arch..riscv..register..scause..Interrupt$u20$as$u20$core..fmt..Debug$GT$3fmt17h96992b3c4ed41ad9E>
    800114ca:	e02a                	sd	a0,0(sp)
    800114cc:	a009                	j	800114ce <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h1a7368dde5044597E+0x16>
    800114ce:	6502                	ld	a0,0(sp)
    800114d0:	60e2                	ld	ra,24(sp)
    800114d2:	6105                	addi	sp,sp,32
    800114d4:	8082                	ret

Disassembly of section .text._ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h436ba031ceeed146E:

00000000800114d6 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h436ba031ceeed146E>:
    800114d6:	1101                	addi	sp,sp,-32
    800114d8:	ec06                	sd	ra,24(sp)
    800114da:	e42a                	sd	a0,8(sp)
    800114dc:	e82e                	sd	a1,16(sp)
    800114de:	6108                	ld	a0,0(a0)
    800114e0:	ffff7097          	auipc	ra,0xffff7
    800114e4:	b4c080e7          	jalr	-1204(ra) # 8000802c <_ZN85_$LT$kernel..arch..riscv..register..scause..Exception$u20$as$u20$core..fmt..Debug$GT$3fmt17h4deffc5a3158ed01E>
    800114e8:	e02a                	sd	a0,0(sp)
    800114ea:	a009                	j	800114ec <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h436ba031ceeed146E+0x16>
    800114ec:	6502                	ld	a0,0(sp)
    800114ee:	60e2                	ld	ra,24(sp)
    800114f0:	6105                	addi	sp,sp,32
    800114f2:	8082                	ret

Disassembly of section .text._ZN89_$LT$kernel..memory..address..VirtualAddress$u20$as$u20$kernel..memory..address..Addr$GT$8as_usize17h7916c21610008a66E:

00000000800114f4 <_ZN89_$LT$kernel..memory..address..VirtualAddress$u20$as$u20$kernel..memory..address..Addr$GT$8as_usize17h7916c21610008a66E>:
    }
}

impl Addr for VirtualAddress{
    #[inline]
    fn as_usize(&self) -> usize{
    800114f4:	1141                	addi	sp,sp,-16
    800114f6:	e42a                	sd	a0,8(sp)
        self.0
    800114f8:	6108                	ld	a0,0(a0)
    }
    800114fa:	0141                	addi	sp,sp,16
    800114fc:	8082                	ret

Disassembly of section .text._ZN89_$LT$kernel..memory..address..VirtualAddress$u20$as$u20$kernel..memory..address..Addr$GT$8data_mut17h88794159bc97d31bE:

00000000800114fe <_ZN89_$LT$kernel..memory..address..VirtualAddress$u20$as$u20$kernel..memory..address..Addr$GT$8data_mut17h88794159bc97d31bE>:
    fn data_ref(&self) -> &usize{
        &self.0
    }

    #[inline]
    fn data_mut(&mut self) -> &mut usize{
    800114fe:	1141                	addi	sp,sp,-16
    80011500:	e42a                	sd	a0,8(sp)
        &mut self.0
    }
    80011502:	0141                	addi	sp,sp,16
    80011504:	8082                	ret

Disassembly of section .text._ZN90_$LT$kernel..memory..address..PhysicalAddress$u20$as$u20$kernel..memory..address..Addr$GT$8as_usize17hea2eecdb80a1a2b2E:

0000000080011506 <_ZN90_$LT$kernel..memory..address..PhysicalAddress$u20$as$u20$kernel..memory..address..Addr$GT$8as_usize17hea2eecdb80a1a2b2E>:

impl Addr for PhysicalAddress{


    #[inline]
    fn as_usize(&self) -> usize{
    80011506:	1141                	addi	sp,sp,-16
    80011508:	e42a                	sd	a0,8(sp)
        self.0
    8001150a:	6108                	ld	a0,0(a0)
    }
    8001150c:	0141                	addi	sp,sp,16
    8001150e:	8082                	ret

Disassembly of section .text._ZN90_$LT$kernel..memory..address..PhysicalAddress$u20$as$u20$kernel..memory..address..Addr$GT$8data_mut17h98a368b1f7383ca3E:

0000000080011510 <_ZN90_$LT$kernel..memory..address..PhysicalAddress$u20$as$u20$kernel..memory..address..Addr$GT$8data_mut17h98a368b1f7383ca3E>:
    fn data_ref(&self) -> &usize{
        &self.0
    }

    #[inline]
    fn data_mut(&mut self) -> &mut usize{
    80011510:	1141                	addi	sp,sp,-16
    80011512:	e42a                	sd	a0,8(sp)
        &mut self.0
    }
    80011514:	0141                	addi	sp,sp,16
    80011516:	8082                	ret

Disassembly of section .text._ZN6kernel6memory7address14VirtualAddress3new17h716be423461f1938E:

0000000080011518 <_ZN6kernel6memory7address14VirtualAddress3new17h716be423461f1938E>:

}

impl VirtualAddress{
    pub fn new(addr: usize) -> Self{
    80011518:	1141                	addi	sp,sp,-16
    8001151a:	e42a                	sd	a0,8(sp)
        Self(addr)
    8001151c:	e02a                	sd	a0,0(sp)
    }
    8001151e:	0141                	addi	sp,sp,16
    80011520:	8082                	ret

Disassembly of section .text._ZN6kernel6memory7address14VirtualAddress8page_num17h81ae42a65c302f7eE:

0000000080011522 <_ZN6kernel6memory7address14VirtualAddress8page_num17h81ae42a65c302f7eE>:
    pub fn add_addr(&self, addr:usize) -> Self{
        Self(self.0+addr)
    }


    pub fn page_num(&self, level: usize) -> usize{
    80011522:	7179                	addi	sp,sp,-48
    80011524:	f02a                	sd	a0,32(sp)
    80011526:	f42e                	sd	a1,40(sp)
        (self.0 >> (PGSHIFT + level * PGMASKLEN)) & PGMASK
    80011528:	6108                	ld	a0,0(a0)
    8001152a:	e82a                	sd	a0,16(sp)
    8001152c:	00359513          	slli	a0,a1,0x3
    80011530:	952e                	add	a0,a0,a1
    80011532:	ec2a                	sd	a0,24(sp)
    80011534:	4525                	li	a0,9
    80011536:	02a5b533          	mulhu	a0,a1,a0
    8001153a:	4581                	li	a1,0
    8001153c:	02b51a63          	bne	a0,a1,80011570 <.LBB5_7>
    80011540:	a009                	j	80011542 <_ZN6kernel6memory7address14VirtualAddress8page_num17h81ae42a65c302f7eE+0x20>
    80011542:	65e2                	ld	a1,24(sp)
    80011544:	00c58513          	addi	a0,a1,12 # 100c <.Lline_table_start0+0x317>
    80011548:	e42a                	sd	a0,8(sp)
    8001154a:	04b56263          	bltu	a0,a1,8001158e <.LBB5_9>
    8001154e:	a009                	j	80011550 <_ZN6kernel6memory7address14VirtualAddress8page_num17h81ae42a65c302f7eE+0x2e>
    80011550:	65c2                	ld	a1,16(sp)
    80011552:	6622                	ld	a2,8(sp)
    80011554:	fc067513          	andi	a0,a2,-64
    80011558:	00c5d5b3          	srl	a1,a1,a2
    8001155c:	e02e                	sd	a1,0(sp)
    8001155e:	4581                	li	a1,0
    80011560:	04b51563          	bne	a0,a1,800115aa <.LBB5_11>
    80011564:	a009                	j	80011566 <_ZN6kernel6memory7address14VirtualAddress8page_num17h81ae42a65c302f7eE+0x44>
    80011566:	6502                	ld	a0,0(sp)
    80011568:	1ff57513          	andi	a0,a0,511
    }
    8001156c:	6145                	addi	sp,sp,48
    8001156e:	8082                	ret

0000000080011570 <.LBB5_7>:
        (self.0 >> (PGSHIFT + level * PGMASKLEN)) & PGMASK
    80011570:	00017517          	auipc	a0,0x17
    80011574:	3a050513          	addi	a0,a0,928 # 80028910 <str.0>

0000000080011578 <.LBB5_8>:
    80011578:	00017617          	auipc	a2,0x17
    8001157c:	38060613          	addi	a2,a2,896 # 800288f8 <.L__unnamed_1>
    80011580:	02100593          	li	a1,33
    80011584:	00011097          	auipc	ra,0x11
    80011588:	b78080e7          	jalr	-1160(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008001158e <.LBB5_9>:
    8001158e:	00017517          	auipc	a0,0x17
    80011592:	3c250513          	addi	a0,a0,962 # 80028950 <str.1>

0000000080011596 <.LBB5_10>:
    80011596:	00017617          	auipc	a2,0x17
    8001159a:	3a260613          	addi	a2,a2,930 # 80028938 <.L__unnamed_2>
    8001159e:	45f1                	li	a1,28
    800115a0:	00011097          	auipc	ra,0x11
    800115a4:	b5c080e7          	jalr	-1188(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

00000000800115aa <.LBB5_11>:
    800115aa:	00017517          	auipc	a0,0x17
    800115ae:	3e650513          	addi	a0,a0,998 # 80028990 <str.2>

00000000800115b2 <.LBB5_12>:
    800115b2:	00017617          	auipc	a2,0x17
    800115b6:	3be60613          	addi	a2,a2,958 # 80028970 <.L__unnamed_3>
    800115ba:	02400593          	li	a1,36
    800115be:	00011097          	auipc	ra,0x11
    800115c2:	b3e080e7          	jalr	-1218(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel6memory7address15PhysicalAddress3new17hf2b76f8479ac6235E:

00000000800115c8 <_ZN6kernel6memory7address15PhysicalAddress3new17hf2b76f8479ac6235E>:

}

impl PhysicalAddress{
    pub fn new(value:usize) -> Self{
    800115c8:	1141                	addi	sp,sp,-16
    800115ca:	e42a                	sd	a0,8(sp)
        Self(value)
    800115cc:	e02a                	sd	a0,0(sp)
    }
    800115ce:	0141                	addi	sp,sp,16
    800115d0:	8082                	ret

Disassembly of section .text._ZN80_$LT$kernel..memory..address..VirtualAddress$u20$as$u20$core..cmp..PartialEq$GT$2ne17h594c009ca6e35357E:

00000000800115d2 <_ZN80_$LT$kernel..memory..address..VirtualAddress$u20$as$u20$core..cmp..PartialEq$GT$2ne17h594c009ca6e35357E>:
#[derive(Debug, Copy, Clone, PartialEq)]
    800115d2:	1101                	addi	sp,sp,-32
    800115d4:	e02a                	sd	a0,0(sp)
    800115d6:	e42e                	sd	a1,8(sp)
pub struct VirtualAddress(pub usize);
    800115d8:	e82e                	sd	a1,16(sp)
    800115da:	ec2a                	sd	a0,24(sp)
    800115dc:	6108                	ld	a0,0(a0)
    800115de:	618c                	ld	a1,0(a1)
    800115e0:	8d2d                	xor	a0,a0,a1
    800115e2:	00a03533          	snez	a0,a0
#[derive(Debug, Copy, Clone, PartialEq)]
    800115e6:	6105                	addi	sp,sp,32
    800115e8:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h38f66f125a87c1b1E:

00000000800115ea <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h38f66f125a87c1b1E>:
    pub const unsafe fn add(self, count: usize) -> Self
    800115ea:	1101                	addi	sp,sp,-32
    800115ec:	ec06                	sd	ra,24(sp)
    800115ee:	e42a                	sd	a0,8(sp)
    800115f0:	e82e                	sd	a1,16(sp)
        unsafe { self.offset(count as isize) }
    800115f2:	00000097          	auipc	ra,0x0
    800115f6:	014080e7          	jalr	20(ra) # 80011606 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hc564f45fb449f47eE>
    800115fa:	e02a                	sd	a0,0(sp)
    800115fc:	a009                	j	800115fe <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h38f66f125a87c1b1E+0x14>
    }
    800115fe:	6502                	ld	a0,0(sp)
    80011600:	60e2                	ld	ra,24(sp)
    80011602:	6105                	addi	sp,sp,32
    80011604:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hc564f45fb449f47eE:

0000000080011606 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hc564f45fb449f47eE>:
    pub const unsafe fn offset(self, count: isize) -> *mut T
    80011606:	1101                	addi	sp,sp,-32
    80011608:	e42a                	sd	a0,8(sp)
    8001160a:	e82e                	sd	a1,16(sp)
    8001160c:	41000613          	li	a2,1040
        unsafe { intrinsics::offset(self, count) as *mut T }
    80011610:	02c585b3          	mul	a1,a1,a2
    80011614:	952e                	add	a0,a0,a1
    80011616:	e02a                	sd	a0,0(sp)
    80011618:	ec2a                	sd	a0,24(sp)
    8001161a:	a009                	j	8001161c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hc564f45fb449f47eE+0x16>
    }
    8001161c:	6502                	ld	a0,0(sp)
    8001161e:	6105                	addi	sp,sp,32
    80011620:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17he6d08a4a98c1735bE:

0000000080011622 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17he6d08a4a98c1735bE>:
    pub const fn is_null(self) -> bool {
    80011622:	1101                	addi	sp,sp,-32
    80011624:	ec06                	sd	ra,24(sp)
    80011626:	e82a                	sd	a0,16(sp)
        (self as *mut u8).guaranteed_eq(null_mut())
    80011628:	e42a                	sd	a0,8(sp)
    8001162a:	a009                	j	8001162c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17he6d08a4a98c1735bE+0xa>
    8001162c:	6522                	ld	a0,8(sp)
    8001162e:	4581                	li	a1,0
    80011630:	00011097          	auipc	ra,0x11
    80011634:	892080e7          	jalr	-1902(ra) # 80021ec2 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$13guaranteed_eq17h32ea8c99c0b8220dE>
    80011638:	e02a                	sd	a0,0(sp)
    8001163a:	a009                	j	8001163c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17he6d08a4a98c1735bE+0x1a>
    }
    8001163c:	6502                	ld	a0,0(sp)
    8001163e:	60e2                	ld	ra,24(sp)
    80011640:	6105                	addi	sp,sp,32
    80011642:	8082                	ret

Disassembly of section .text._ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h82f80b86300e876eE:

0000000080011644 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h82f80b86300e876eE>:
    pub const unsafe fn add(self, count: usize) -> Self
    80011644:	1101                	addi	sp,sp,-32
    80011646:	ec06                	sd	ra,24(sp)
    80011648:	e42a                	sd	a0,8(sp)
    8001164a:	e82e                	sd	a1,16(sp)
        unsafe { self.offset(count as isize) }
    8001164c:	00000097          	auipc	ra,0x0
    80011650:	014080e7          	jalr	20(ra) # 80011660 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h5bca7b442f3da6edE>
    80011654:	e02a                	sd	a0,0(sp)
    80011656:	a009                	j	80011658 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h82f80b86300e876eE+0x14>
    }
    80011658:	6502                	ld	a0,0(sp)
    8001165a:	60e2                	ld	ra,24(sp)
    8001165c:	6105                	addi	sp,sp,32
    8001165e:	8082                	ret

Disassembly of section .text._ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h5bca7b442f3da6edE:

0000000080011660 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h5bca7b442f3da6edE>:
    pub const unsafe fn offset(self, count: isize) -> *const T
    80011660:	1101                	addi	sp,sp,-32
    80011662:	e42a                	sd	a0,8(sp)
    80011664:	e82e                	sd	a1,16(sp)
    80011666:	41000613          	li	a2,1040
        unsafe { intrinsics::offset(self, count) }
    8001166a:	02c585b3          	mul	a1,a1,a2
    8001166e:	952e                	add	a0,a0,a1
    80011670:	e02a                	sd	a0,0(sp)
    80011672:	ec2a                	sd	a0,24(sp)
    80011674:	a009                	j	80011676 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h5bca7b442f3da6edE+0x16>
    }
    80011676:	6502                	ld	a0,0(sp)
    80011678:	6105                	addi	sp,sp,32
    8001167a:	8082                	ret

Disassembly of section .text._ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17ha3fd0a02496fedc6E:

000000008001167c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17ha3fd0a02496fedc6E>:
    pub const fn is_null(self) -> bool {
    8001167c:	1101                	addi	sp,sp,-32
    8001167e:	ec06                	sd	ra,24(sp)
    80011680:	e82a                	sd	a0,16(sp)
        (self as *const u8).guaranteed_eq(null())
    80011682:	e42a                	sd	a0,8(sp)
    80011684:	a009                	j	80011686 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17ha3fd0a02496fedc6E+0xa>
    80011686:	6522                	ld	a0,8(sp)
    80011688:	4581                	li	a1,0
    8001168a:	00011097          	auipc	ra,0x11
    8001168e:	852080e7          	jalr	-1966(ra) # 80021edc <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$13guaranteed_eq17h0ce622e77376dc6cE>
    80011692:	e02a                	sd	a0,0(sp)
    80011694:	a009                	j	80011696 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17ha3fd0a02496fedc6E+0x1a>
    }
    80011696:	6502                	ld	a0,0(sp)
    80011698:	60e2                	ld	ra,24(sp)
    8001169a:	6105                	addi	sp,sp,32
    8001169c:	8082                	ret

Disassembly of section .text._ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb07c6377ef535791E:

000000008001169e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb07c6377ef535791E>:
    pub const fn as_mut_ptr(&mut self) -> *mut T {
    8001169e:	1141                	addi	sp,sp,-16
    800116a0:	e02a                	sd	a0,0(sp)
    800116a2:	e42e                	sd	a1,8(sp)
    }
    800116a4:	0141                	addi	sp,sp,16
    800116a6:	8082                	ret

Disassembly of section .text._ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf08bc165152fefe5E:

00000000800116a8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf08bc165152fefe5E>:
    pub const fn len(&self) -> usize {
    800116a8:	7179                	addi	sp,sp,-48
    800116aa:	e42e                	sd	a1,8(sp)
    800116ac:	85aa                	mv	a1,a0
    800116ae:	6522                	ld	a0,8(sp)
    800116b0:	f02e                	sd	a1,32(sp)
    800116b2:	f42a                	sd	a0,40(sp)
            unsafe { crate::ptr::PtrRepr { const_ptr: self }.components.metadata }
    800116b4:	e82e                	sd	a1,16(sp)
    800116b6:	ec2a                	sd	a0,24(sp)
    }
    800116b8:	6145                	addi	sp,sp,48
    800116ba:	8082                	ret

Disassembly of section .text._ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17hf352d95d7dd299d1E:

00000000800116bc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17hf352d95d7dd299d1E>:
    pub fn iter(&self) -> Iter<'_, T> {
    800116bc:	7179                	addi	sp,sp,-48
    800116be:	f406                	sd	ra,40(sp)
    800116c0:	ec2a                	sd	a0,24(sp)
    800116c2:	f02e                	sd	a1,32(sp)
        Iter::new(self)
    800116c4:	ffff9097          	auipc	ra,0xffff9
    800116c8:	50a080e7          	jalr	1290(ra) # 8000abce <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h255496547b3a0f33E>
    800116cc:	e42a                	sd	a0,8(sp)
    800116ce:	e82e                	sd	a1,16(sp)
    800116d0:	a009                	j	800116d2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17hf352d95d7dd299d1E+0x16>
    }
    800116d2:	65c2                	ld	a1,16(sp)
    800116d4:	6522                	ld	a0,8(sp)
    800116d6:	70a2                	ld	ra,40(sp)
    800116d8:	6145                	addi	sp,sp,48
    800116da:	8082                	ret

Disassembly of section .text._ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h435aa5d084fb4c37E:

00000000800116dc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h435aa5d084fb4c37E>:
    pub const fn as_ptr(&self) -> *const T {
    800116dc:	1141                	addi	sp,sp,-16
    800116de:	e02a                	sd	a0,0(sp)
    800116e0:	e42e                	sd	a1,8(sp)
    }
    800116e2:	0141                	addi	sp,sp,16
    800116e4:	8082                	ret

Disassembly of section .text._ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h5a59168d2366923eE:

00000000800116e6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h5a59168d2366923eE>:
    pub fn iter_mut(&mut self) -> IterMut<'_, T> {
    800116e6:	7179                	addi	sp,sp,-48
    800116e8:	f406                	sd	ra,40(sp)
    800116ea:	ec2a                	sd	a0,24(sp)
    800116ec:	f02e                	sd	a1,32(sp)
        IterMut::new(self)
    800116ee:	ffffa097          	auipc	ra,0xffffa
    800116f2:	840080e7          	jalr	-1984(ra) # 8000af2e <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17hbe8b57feddcb3b2cE>
    800116f6:	e42a                	sd	a0,8(sp)
    800116f8:	e82e                	sd	a1,16(sp)
    800116fa:	a009                	j	800116fc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h5a59168d2366923eE+0x16>
    }
    800116fc:	65c2                	ld	a1,16(sp)
    800116fe:	6522                	ld	a0,8(sp)
    80011700:	70a2                	ld	ra,40(sp)
    80011702:	6145                	addi	sp,sp,48
    80011704:	8082                	ret

Disassembly of section .text._ZN6kernel7process7process11task_struct5sleep17h3865ab03b1bff75fE:

0000000080011706 <_ZN6kernel7process7process11task_struct5sleep17h3865ab03b1bff75fE>:
        drop(guard);
    }

    /// Atomically release lock and sleep on chan
    /// Reacquires lock when awakened.
    pub fn sleep<T>(&mut self, channel: usize, lock: SpinlockGuard<'_, T>) {
    80011706:	711d                	addi	sp,sp,-96
    80011708:	ec86                	sd	ra,88(sp)
    8001170a:	e432                	sd	a2,8(sp)
    8001170c:	e82e                	sd	a1,16(sp)
    8001170e:	ec2a                	sd	a0,24(sp)
    80011710:	f82a                	sd	a0,48(sp)
    80011712:	fc2e                	sd	a1,56(sp)
    80011714:	e0b2                	sd	a2,64(sp)
    80011716:	6509                	lui	a0,0x2
    80011718:	0885059b          	addiw	a1,a0,136

000000008001171c <.LBB11_6>:
    8001171c:	00046517          	auipc	a0,0x46
    80011720:	e8450513          	addi	a0,a0,-380 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    80011724:	952e                	add	a0,a0,a1
        //     // Tide up
        //     guard.channel = 0;
        //     drop(guard);
        // }
        
        let tasks_guard = unsafe { PROC_MANAGER.tasks_lock.acquire() };
    80011726:	fffff097          	auipc	ra,0xfffff
    8001172a:	f0e080e7          	jalr	-242(ra) # 80010634 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    8001172e:	85aa                	mv	a1,a0
    80011730:	f02e                	sd	a1,32(sp)
    80011732:	e4aa                	sd	a0,72(sp)
    80011734:	a009                	j	80011736 <.LBB11_6+0x1a>
        drop(lock);
    80011736:	6522                	ld	a0,8(sp)
    80011738:	0000b097          	auipc	ra,0xb
    8001173c:	732080e7          	jalr	1842(ra) # 8001ce6a <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    80011740:	a009                	j	80011742 <.LBB11_6+0x26>

        self.channel = channel;
    80011742:	65e2                	ld	a1,24(sp)
    80011744:	6542                	ld	a0,16(sp)
    80011746:	3ea5b023          	sd	a0,992(a1)
    8001174a:	4509                	li	a0,2
        self.state = ProcState::SLEEPING;
    8001174c:	02a107a3          	sb	a0,47(sp)
    80011750:	40a58423          	sb	a0,1032(a1)

0000000080011754 <.LBB11_7>:

        unsafe {
            let mycpu = CPU_MANAGER.mycpu();
    80011754:	00053517          	auipc	a0,0x53
    80011758:	9ec50513          	addi	a0,a0,-1556 # 80064140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    8001175c:	00000097          	auipc	ra,0x0
    80011760:	282080e7          	jalr	642(ra) # 800119de <_ZN6kernel7process3cpu10CPUManager5mycpu17hac5ae6ce2070e7c3E>
    80011764:	85aa                	mv	a1,a0
    80011766:	e02e                	sd	a1,0(sp)
    80011768:	e8aa                	sd	a0,80(sp)
    8001176a:	a009                	j	8001176c <.LBB11_7+0x18>
            // let cur_ctx = (&mut self.context);

            mycpu.sched();
    8001176c:	6502                	ld	a0,0(sp)
    8001176e:	00000097          	auipc	ra,0x0
    80011772:	4e2080e7          	jalr	1250(ra) # 80011c50 <_ZN6kernel7process3cpu3CPU5sched17h6aec64bf33990cbcE>
    80011776:	a009                	j	80011778 <.LBB11_7+0x24>
    80011778:	7502                	ld	a0,32(sp)
    8001177a:	6662                	ld	a2,24(sp)
    8001177c:	4581                	li	a1,0
        }
        
        self.channel = 0;
    8001177e:	3eb63023          	sd	a1,992(a2)

        drop(tasks_guard);
    80011782:	0000b097          	auipc	ra,0xb
    80011786:	6e8080e7          	jalr	1768(ra) # 8001ce6a <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    8001178a:	a009                	j	8001178c <.LBB11_7+0x38>
        
    }
    8001178c:	60e6                	ld	ra,88(sp)
    8001178e:	6125                	addi	sp,sp,96
    80011790:	8082                	ret

Disassembly of section .text._ZN6kernel7process7process11task_struct5sleep17h3e20b1d3f8d47a0dE:

0000000080011792 <_ZN6kernel7process7process11task_struct5sleep17h3e20b1d3f8d47a0dE>:
    pub fn sleep<T>(&mut self, channel: usize, lock: SpinlockGuard<'_, T>) {
    80011792:	711d                	addi	sp,sp,-96
    80011794:	ec86                	sd	ra,88(sp)
    80011796:	e432                	sd	a2,8(sp)
    80011798:	e82e                	sd	a1,16(sp)
    8001179a:	ec2a                	sd	a0,24(sp)
    8001179c:	f82a                	sd	a0,48(sp)
    8001179e:	fc2e                	sd	a1,56(sp)
    800117a0:	e0b2                	sd	a2,64(sp)
    800117a2:	6509                	lui	a0,0x2
    800117a4:	0885059b          	addiw	a1,a0,136

00000000800117a8 <.LBB12_6>:
    800117a8:	00046517          	auipc	a0,0x46
    800117ac:	df850513          	addi	a0,a0,-520 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    800117b0:	952e                	add	a0,a0,a1
        let tasks_guard = unsafe { PROC_MANAGER.tasks_lock.acquire() };
    800117b2:	fffff097          	auipc	ra,0xfffff
    800117b6:	e82080e7          	jalr	-382(ra) # 80010634 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    800117ba:	85aa                	mv	a1,a0
    800117bc:	f02e                	sd	a1,32(sp)
    800117be:	e4aa                	sd	a0,72(sp)
    800117c0:	a009                	j	800117c2 <.LBB12_6+0x1a>
        drop(lock);
    800117c2:	6522                	ld	a0,8(sp)
    800117c4:	0000b097          	auipc	ra,0xb
    800117c8:	7e6080e7          	jalr	2022(ra) # 8001cfaa <_ZN4core3mem4drop17hf5d8d4b62719f1bfE>
    800117cc:	a009                	j	800117ce <.LBB12_6+0x26>
        self.channel = channel;
    800117ce:	65e2                	ld	a1,24(sp)
    800117d0:	6542                	ld	a0,16(sp)
    800117d2:	3ea5b023          	sd	a0,992(a1)
    800117d6:	4509                	li	a0,2
        self.state = ProcState::SLEEPING;
    800117d8:	02a107a3          	sb	a0,47(sp)
    800117dc:	40a58423          	sb	a0,1032(a1)

00000000800117e0 <.LBB12_7>:
            let mycpu = CPU_MANAGER.mycpu();
    800117e0:	00053517          	auipc	a0,0x53
    800117e4:	96050513          	addi	a0,a0,-1696 # 80064140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    800117e8:	00000097          	auipc	ra,0x0
    800117ec:	1f6080e7          	jalr	502(ra) # 800119de <_ZN6kernel7process3cpu10CPUManager5mycpu17hac5ae6ce2070e7c3E>
    800117f0:	85aa                	mv	a1,a0
    800117f2:	e02e                	sd	a1,0(sp)
    800117f4:	e8aa                	sd	a0,80(sp)
    800117f6:	a009                	j	800117f8 <.LBB12_7+0x18>
            mycpu.sched();
    800117f8:	6502                	ld	a0,0(sp)
    800117fa:	00000097          	auipc	ra,0x0
    800117fe:	456080e7          	jalr	1110(ra) # 80011c50 <_ZN6kernel7process3cpu3CPU5sched17h6aec64bf33990cbcE>
    80011802:	a009                	j	80011804 <.LBB12_7+0x24>
    80011804:	7502                	ld	a0,32(sp)
    80011806:	6662                	ld	a2,24(sp)
    80011808:	4581                	li	a1,0
        self.channel = 0;
    8001180a:	3eb63023          	sd	a1,992(a2)
        drop(tasks_guard);
    8001180e:	0000b097          	auipc	ra,0xb
    80011812:	65c080e7          	jalr	1628(ra) # 8001ce6a <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    80011816:	a009                	j	80011818 <.LBB12_7+0x38>
    }
    80011818:	60e6                	ld	ra,88(sp)
    8001181a:	6125                	addi	sp,sp,96
    8001181c:	8082                	ret

Disassembly of section .text._ZN6kernel7process7process11task_struct5sleep17ha12ac4247dad146bE:

000000008001181e <_ZN6kernel7process7process11task_struct5sleep17ha12ac4247dad146bE>:
    pub fn sleep<T>(&mut self, channel: usize, lock: SpinlockGuard<'_, T>) {
    8001181e:	711d                	addi	sp,sp,-96
    80011820:	ec86                	sd	ra,88(sp)
    80011822:	e432                	sd	a2,8(sp)
    80011824:	e82e                	sd	a1,16(sp)
    80011826:	ec2a                	sd	a0,24(sp)
    80011828:	f82a                	sd	a0,48(sp)
    8001182a:	fc2e                	sd	a1,56(sp)
    8001182c:	e0b2                	sd	a2,64(sp)
    8001182e:	6509                	lui	a0,0x2
    80011830:	0885059b          	addiw	a1,a0,136

0000000080011834 <.LBB13_6>:
    80011834:	00046517          	auipc	a0,0x46
    80011838:	d6c50513          	addi	a0,a0,-660 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    8001183c:	952e                	add	a0,a0,a1
        let tasks_guard = unsafe { PROC_MANAGER.tasks_lock.acquire() };
    8001183e:	fffff097          	auipc	ra,0xfffff
    80011842:	df6080e7          	jalr	-522(ra) # 80010634 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    80011846:	85aa                	mv	a1,a0
    80011848:	f02e                	sd	a1,32(sp)
    8001184a:	e4aa                	sd	a0,72(sp)
    8001184c:	a009                	j	8001184e <.LBB13_6+0x1a>
        drop(lock);
    8001184e:	6522                	ld	a0,8(sp)
    80011850:	0000b097          	auipc	ra,0xb
    80011854:	706080e7          	jalr	1798(ra) # 8001cf56 <_ZN4core3mem4drop17haa2d2dc72bd2e81bE>
    80011858:	a009                	j	8001185a <.LBB13_6+0x26>
        self.channel = channel;
    8001185a:	65e2                	ld	a1,24(sp)
    8001185c:	6542                	ld	a0,16(sp)
    8001185e:	3ea5b023          	sd	a0,992(a1)
    80011862:	4509                	li	a0,2
        self.state = ProcState::SLEEPING;
    80011864:	02a107a3          	sb	a0,47(sp)
    80011868:	40a58423          	sb	a0,1032(a1)

000000008001186c <.LBB13_7>:
            let mycpu = CPU_MANAGER.mycpu();
    8001186c:	00053517          	auipc	a0,0x53
    80011870:	8d450513          	addi	a0,a0,-1836 # 80064140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    80011874:	00000097          	auipc	ra,0x0
    80011878:	16a080e7          	jalr	362(ra) # 800119de <_ZN6kernel7process3cpu10CPUManager5mycpu17hac5ae6ce2070e7c3E>
    8001187c:	85aa                	mv	a1,a0
    8001187e:	e02e                	sd	a1,0(sp)
    80011880:	e8aa                	sd	a0,80(sp)
    80011882:	a009                	j	80011884 <.LBB13_7+0x18>
            mycpu.sched();
    80011884:	6502                	ld	a0,0(sp)
    80011886:	00000097          	auipc	ra,0x0
    8001188a:	3ca080e7          	jalr	970(ra) # 80011c50 <_ZN6kernel7process3cpu3CPU5sched17h6aec64bf33990cbcE>
    8001188e:	a009                	j	80011890 <.LBB13_7+0x24>
    80011890:	7502                	ld	a0,32(sp)
    80011892:	6662                	ld	a2,24(sp)
    80011894:	4581                	li	a1,0
        self.channel = 0;
    80011896:	3eb63023          	sd	a1,992(a2)
        drop(tasks_guard);
    8001189a:	0000b097          	auipc	ra,0xb
    8001189e:	5d0080e7          	jalr	1488(ra) # 8001ce6a <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    800118a2:	a009                	j	800118a4 <.LBB13_7+0x38>
    }
    800118a4:	60e6                	ld	ra,88(sp)
    800118a6:	6125                	addi	sp,sp,96
    800118a8:	8082                	ret

Disassembly of section .text._ZN6kernel7process7process11task_struct5sleep17ha46e5892ef284241E:

00000000800118aa <_ZN6kernel7process7process11task_struct5sleep17ha46e5892ef284241E>:
    pub fn sleep<T>(&mut self, channel: usize, lock: SpinlockGuard<'_, T>) {
    800118aa:	711d                	addi	sp,sp,-96
    800118ac:	ec86                	sd	ra,88(sp)
    800118ae:	e432                	sd	a2,8(sp)
    800118b0:	e82e                	sd	a1,16(sp)
    800118b2:	ec2a                	sd	a0,24(sp)
    800118b4:	f82a                	sd	a0,48(sp)
    800118b6:	fc2e                	sd	a1,56(sp)
    800118b8:	e0b2                	sd	a2,64(sp)
    800118ba:	6509                	lui	a0,0x2
    800118bc:	0885059b          	addiw	a1,a0,136

00000000800118c0 <.LBB14_6>:
    800118c0:	00046517          	auipc	a0,0x46
    800118c4:	ce050513          	addi	a0,a0,-800 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    800118c8:	952e                	add	a0,a0,a1
        let tasks_guard = unsafe { PROC_MANAGER.tasks_lock.acquire() };
    800118ca:	fffff097          	auipc	ra,0xfffff
    800118ce:	d6a080e7          	jalr	-662(ra) # 80010634 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    800118d2:	85aa                	mv	a1,a0
    800118d4:	f02e                	sd	a1,32(sp)
    800118d6:	e4aa                	sd	a0,72(sp)
    800118d8:	a009                	j	800118da <.LBB14_6+0x1a>
        drop(lock);
    800118da:	6522                	ld	a0,8(sp)
    800118dc:	0000b097          	auipc	ra,0xb
    800118e0:	64e080e7          	jalr	1614(ra) # 8001cf2a <_ZN4core3mem4drop17h96fc0e7c88170ba8E>
    800118e4:	a009                	j	800118e6 <.LBB14_6+0x26>
        self.channel = channel;
    800118e6:	65e2                	ld	a1,24(sp)
    800118e8:	6542                	ld	a0,16(sp)
    800118ea:	3ea5b023          	sd	a0,992(a1)
    800118ee:	4509                	li	a0,2
        self.state = ProcState::SLEEPING;
    800118f0:	02a107a3          	sb	a0,47(sp)
    800118f4:	40a58423          	sb	a0,1032(a1)

00000000800118f8 <.LBB14_7>:
            let mycpu = CPU_MANAGER.mycpu();
    800118f8:	00053517          	auipc	a0,0x53
    800118fc:	84850513          	addi	a0,a0,-1976 # 80064140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    80011900:	00000097          	auipc	ra,0x0
    80011904:	0de080e7          	jalr	222(ra) # 800119de <_ZN6kernel7process3cpu10CPUManager5mycpu17hac5ae6ce2070e7c3E>
    80011908:	85aa                	mv	a1,a0
    8001190a:	e02e                	sd	a1,0(sp)
    8001190c:	e8aa                	sd	a0,80(sp)
    8001190e:	a009                	j	80011910 <.LBB14_7+0x18>
            mycpu.sched();
    80011910:	6502                	ld	a0,0(sp)
    80011912:	00000097          	auipc	ra,0x0
    80011916:	33e080e7          	jalr	830(ra) # 80011c50 <_ZN6kernel7process3cpu3CPU5sched17h6aec64bf33990cbcE>
    8001191a:	a009                	j	8001191c <.LBB14_7+0x24>
    8001191c:	7502                	ld	a0,32(sp)
    8001191e:	6662                	ld	a2,24(sp)
    80011920:	4581                	li	a1,0
        self.channel = 0;
    80011922:	3eb63023          	sd	a1,992(a2)
        drop(tasks_guard);
    80011926:	0000b097          	auipc	ra,0xb
    8001192a:	544080e7          	jalr	1348(ra) # 8001ce6a <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    8001192e:	a009                	j	80011930 <.LBB14_7+0x38>
    }
    80011930:	60e6                	ld	ra,88(sp)
    80011932:	6125                	addi	sp,sp,96
    80011934:	8082                	ret

Disassembly of section .text._ZN6kernel7process7process11task_struct5sleep17hcd4817f58ebdb572E:

0000000080011936 <_ZN6kernel7process7process11task_struct5sleep17hcd4817f58ebdb572E>:
    pub fn sleep<T>(&mut self, channel: usize, lock: SpinlockGuard<'_, T>) {
    80011936:	711d                	addi	sp,sp,-96
    80011938:	ec86                	sd	ra,88(sp)
    8001193a:	e432                	sd	a2,8(sp)
    8001193c:	e82e                	sd	a1,16(sp)
    8001193e:	ec2a                	sd	a0,24(sp)
    80011940:	f82a                	sd	a0,48(sp)
    80011942:	fc2e                	sd	a1,56(sp)
    80011944:	e0b2                	sd	a2,64(sp)
    80011946:	6509                	lui	a0,0x2
    80011948:	0885059b          	addiw	a1,a0,136

000000008001194c <.LBB15_6>:
    8001194c:	00046517          	auipc	a0,0x46
    80011950:	c5450513          	addi	a0,a0,-940 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    80011954:	952e                	add	a0,a0,a1
        let tasks_guard = unsafe { PROC_MANAGER.tasks_lock.acquire() };
    80011956:	fffff097          	auipc	ra,0xfffff
    8001195a:	cde080e7          	jalr	-802(ra) # 80010634 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    8001195e:	85aa                	mv	a1,a0
    80011960:	f02e                	sd	a1,32(sp)
    80011962:	e4aa                	sd	a0,72(sp)
    80011964:	a009                	j	80011966 <.LBB15_6+0x1a>
        drop(lock);
    80011966:	6522                	ld	a0,8(sp)
    80011968:	0000b097          	auipc	ra,0xb
    8001196c:	532080e7          	jalr	1330(ra) # 8001ce9a <_ZN4core3mem4drop17h2ed300707c7d4096E>
    80011970:	a009                	j	80011972 <.LBB15_6+0x26>
        self.channel = channel;
    80011972:	65e2                	ld	a1,24(sp)
    80011974:	6542                	ld	a0,16(sp)
    80011976:	3ea5b023          	sd	a0,992(a1)
    8001197a:	4509                	li	a0,2
        self.state = ProcState::SLEEPING;
    8001197c:	02a107a3          	sb	a0,47(sp)
    80011980:	40a58423          	sb	a0,1032(a1)

0000000080011984 <.LBB15_7>:
            let mycpu = CPU_MANAGER.mycpu();
    80011984:	00052517          	auipc	a0,0x52
    80011988:	7bc50513          	addi	a0,a0,1980 # 80064140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    8001198c:	00000097          	auipc	ra,0x0
    80011990:	052080e7          	jalr	82(ra) # 800119de <_ZN6kernel7process3cpu10CPUManager5mycpu17hac5ae6ce2070e7c3E>
    80011994:	85aa                	mv	a1,a0
    80011996:	e02e                	sd	a1,0(sp)
    80011998:	e8aa                	sd	a0,80(sp)
    8001199a:	a009                	j	8001199c <.LBB15_7+0x18>
            mycpu.sched();
    8001199c:	6502                	ld	a0,0(sp)
    8001199e:	00000097          	auipc	ra,0x0
    800119a2:	2b2080e7          	jalr	690(ra) # 80011c50 <_ZN6kernel7process3cpu3CPU5sched17h6aec64bf33990cbcE>
    800119a6:	a009                	j	800119a8 <.LBB15_7+0x24>
    800119a8:	7502                	ld	a0,32(sp)
    800119aa:	6662                	ld	a2,24(sp)
    800119ac:	4581                	li	a1,0
        self.channel = 0;
    800119ae:	3eb63023          	sd	a1,992(a2)
        drop(tasks_guard);
    800119b2:	0000b097          	auipc	ra,0xb
    800119b6:	4b8080e7          	jalr	1208(ra) # 8001ce6a <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    800119ba:	a009                	j	800119bc <.LBB15_7+0x38>
    }
    800119bc:	60e6                	ld	ra,88(sp)
    800119be:	6125                	addi	sp,sp,96
    800119c0:	8082                	ret

Disassembly of section .text._ZN6kernel7process3cpu5cpuid17h605093a6a9a60164E:

00000000800119c2 <_ZN6kernel7process3cpu5cpuid17h605093a6a9a60164E>:
    cpus: [CPU; NCPU]
}

pub static mut CPU_MANAGER:CPUManager = CPUManager::new();

pub unsafe fn cpuid() -> usize {
    800119c2:	1101                	addi	sp,sp,-32
    let id = tp::read();
    800119c4:	ec06                	sd	ra,24(sp)
    800119c6:	0000d097          	auipc	ra,0xd
    800119ca:	c9c080e7          	jalr	-868(ra) # 8001e662 <_ZN6kernel4arch5riscv8register2tp4read17h418649f5c8f5b927E>
    800119ce:	85aa                	mv	a1,a0
    800119d0:	e42e                	sd	a1,8(sp)
    800119d2:	e82a                	sd	a0,16(sp)
    800119d4:	a009                	j	800119d6 <_ZN6kernel7process3cpu5cpuid17h605093a6a9a60164E+0x14>
    id
}
    800119d6:	6522                	ld	a0,8(sp)
    800119d8:	60e2                	ld	ra,24(sp)
    800119da:	6105                	addi	sp,sp,32
    800119dc:	8082                	ret

Disassembly of section .text._ZN6kernel7process3cpu10CPUManager5mycpu17hac5ae6ce2070e7c3E:

00000000800119de <_ZN6kernel7process3cpu10CPUManager5mycpu17hac5ae6ce2070e7c3E>:
        Self{
            cpus: array![_ => CPU::new(); NCPU],
        }
    }

    pub unsafe fn mycpu(&mut self) -> &mut CPU{
    800119de:	7179                	addi	sp,sp,-48
    800119e0:	f406                	sd	ra,40(sp)
    800119e2:	e42a                	sd	a0,8(sp)
    800119e4:	ec2a                	sd	a0,24(sp)
        let cpu_id = cpuid();
    800119e6:	00000097          	auipc	ra,0x0
    800119ea:	fdc080e7          	jalr	-36(ra) # 800119c2 <_ZN6kernel7process3cpu5cpuid17h605093a6a9a60164E>
    800119ee:	85aa                	mv	a1,a0
    800119f0:	e82e                	sd	a1,16(sp)
    800119f2:	f02a                	sd	a0,32(sp)
    800119f4:	a009                	j	800119f6 <_ZN6kernel7process3cpu10CPUManager5mycpu17hac5ae6ce2070e7c3E+0x18>
    800119f6:	65c2                	ld	a1,16(sp)
    800119f8:	451d                	li	a0,7
        &mut self.cpus[cpu_id]
    800119fa:	00b56d63          	bltu	a0,a1,80011a14 <_ZN6kernel7process3cpu10CPUManager5mycpu17hac5ae6ce2070e7c3E+0x36>
    800119fe:	a009                	j	80011a00 <_ZN6kernel7process3cpu10CPUManager5mycpu17hac5ae6ce2070e7c3E+0x22>
    80011a00:	6522                	ld	a0,8(sp)
    80011a02:	65c2                	ld	a1,16(sp)
    80011a04:	08800613          	li	a2,136
    80011a08:	02c585b3          	mul	a1,a1,a2
    80011a0c:	952e                	add	a0,a0,a1
    }
    80011a0e:	70a2                	ld	ra,40(sp)
    80011a10:	6145                	addi	sp,sp,48
    80011a12:	8082                	ret
        &mut self.cpus[cpu_id]
    80011a14:	6542                	ld	a0,16(sp)

0000000080011a16 <.LBB1_4>:
    80011a16:	00017617          	auipc	a2,0x17
    80011a1a:	fb260613          	addi	a2,a2,-78 # 800289c8 <.L__unnamed_1>
    80011a1e:	45a1                	li	a1,8
    80011a20:	00010097          	auipc	ra,0x10
    80011a24:	708080e7          	jalr	1800(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E:

0000000080011a2a <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>:

    pub unsafe fn myproc(&mut self) -> Option<&mut task_struct>{
    80011a2a:	7139                	addi	sp,sp,-64
    80011a2c:	fc06                	sd	ra,56(sp)
    80011a2e:	f02a                	sd	a0,32(sp)
        push_off();
    80011a30:	00000097          	auipc	ra,0x0
    80011a34:	3fe080e7          	jalr	1022(ra) # 80011e2e <_ZN6kernel7process3cpu8push_off17h0acd4baa93104745E>
    80011a38:	a009                	j	80011a3a <.LBB2_6>

0000000080011a3a <.LBB2_6>:
        let c = CPU_MANAGER.mycpu();
    80011a3a:	00052517          	auipc	a0,0x52
    80011a3e:	70650513          	addi	a0,a0,1798 # 80064140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    80011a42:	00000097          	auipc	ra,0x0
    80011a46:	f9c080e7          	jalr	-100(ra) # 800119de <_ZN6kernel7process3cpu10CPUManager5mycpu17hac5ae6ce2070e7c3E>
    80011a4a:	85aa                	mv	a1,a0
    80011a4c:	e82e                	sd	a1,16(sp)
    80011a4e:	f42a                	sd	a0,40(sp)
    80011a50:	a009                	j	80011a52 <.LBB2_6+0x18>
        let p = &mut *c.process.unwrap().as_ptr();
    80011a52:	6542                	ld	a0,16(sp)
    80011a54:	6108                	ld	a0,0(a0)

0000000080011a56 <.LBB2_7>:
    80011a56:	00017597          	auipc	a1,0x17
    80011a5a:	f8a58593          	addi	a1,a1,-118 # 800289e0 <.L__unnamed_2>
    80011a5e:	ffffd097          	auipc	ra,0xffffd
    80011a62:	228080e7          	jalr	552(ra) # 8000ec86 <_ZN4core6option15Option$LT$T$GT$6unwrap17h715ab0e996921161E>
    80011a66:	e42a                	sd	a0,8(sp)
    80011a68:	a009                	j	80011a6a <.LBB2_7+0x14>
    80011a6a:	6522                	ld	a0,8(sp)
    80011a6c:	ffffe097          	auipc	ra,0xffffe
    80011a70:	9d4080e7          	jalr	-1580(ra) # 8000f440 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h7c6e4b893f33870bE>
    80011a74:	e02a                	sd	a0,0(sp)
    80011a76:	a009                	j	80011a78 <.LBB2_7+0x22>
    80011a78:	6502                	ld	a0,0(sp)
    80011a7a:	f82a                	sd	a0,48(sp)
        pop_off();
    80011a7c:	00000097          	auipc	ra,0x0
    80011a80:	436080e7          	jalr	1078(ra) # 80011eb2 <_ZN6kernel7process3cpu7pop_off17hb8c7b834ab1c7c4cE>
    80011a84:	a009                	j	80011a86 <.LBB2_7+0x30>
        Some(p)
    80011a86:	6502                	ld	a0,0(sp)
    80011a88:	ec2a                	sd	a0,24(sp)
    }
    80011a8a:	70e2                	ld	ra,56(sp)
    80011a8c:	6121                	addi	sp,sp,64
    80011a8e:	8082                	ret

Disassembly of section .text._ZN6kernel7process3cpu10CPUManager9scheduler17hecedd2e89c301e93E:

0000000080011a90 <_ZN6kernel7process3cpu10CPUManager9scheduler17hecedd2e89c301e93E>:
    /// Scheduler never returns.  It loops, doing:
    ///  - choose a process to run.
    ///  - switch to start running that process.
    ///  - eventually that process transfers control
    ///    via switch back to the scheduler.
    pub unsafe fn scheduler(&mut self){
    80011a90:	7119                	addi	sp,sp,-128
    80011a92:	fc86                	sd	ra,120(sp)
    80011a94:	ecaa                	sd	a0,88(sp)
        extern "C" {
            fn switch(old: *mut Context, new: *mut Context);
        }

        let c = self.mycpu();
    80011a96:	00000097          	auipc	ra,0x0
    80011a9a:	f48080e7          	jalr	-184(ra) # 800119de <_ZN6kernel7process3cpu10CPUManager5mycpu17hac5ae6ce2070e7c3E>
    80011a9e:	85aa                	mv	a1,a0
    80011aa0:	fc2e                	sd	a1,56(sp)
    80011aa2:	f0aa                	sd	a0,96(sp)
    80011aa4:	a009                	j	80011aa6 <_ZN6kernel7process3cpu10CPUManager9scheduler17hecedd2e89c301e93E+0x16>
        loop {
            // Avoid deadlock by ensuring that devices can interrupt.
            sstatus::intr_on();
    80011aa6:	0000c097          	auipc	ra,0xc
    80011aaa:	702080e7          	jalr	1794(ra) # 8001e1a8 <_ZN6kernel4arch5riscv8register7sstatus7intr_on17h10d927cfe74faba7E>
    80011aae:	a009                	j	80011ab0 <_ZN6kernel7process3cpu10CPUManager9scheduler17hecedd2e89c301e93E+0x20>
    80011ab0:	6509                	lui	a0,0x2
    80011ab2:	0885059b          	addiw	a1,a0,136

0000000080011ab6 <.LBB3_20>:
    80011ab6:	00046517          	auipc	a0,0x46
    80011aba:	aea50513          	addi	a0,a0,-1302 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    80011abe:	952e                	add	a0,a0,a1

            let guard = PROC_MANAGER.tasks_lock.acquire();
    80011ac0:	fffff097          	auipc	ra,0xfffff
    80011ac4:	b74080e7          	jalr	-1164(ra) # 80010634 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    80011ac8:	85aa                	mv	a1,a0
    80011aca:	f82e                	sd	a1,48(sp)
    80011acc:	f4aa                	sd	a0,104(sp)
    80011ace:	a009                	j	80011ad0 <.LBB3_21>

0000000080011ad0 <.LBB3_21>:
            match PROC_MANAGER.seek_runnable() {
    80011ad0:	00046517          	auipc	a0,0x46
    80011ad4:	ad050513          	addi	a0,a0,-1328 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    80011ad8:	ffffc097          	auipc	ra,0xffffc
    80011adc:	db6080e7          	jalr	-586(ra) # 8000d88e <_ZN6kernel7process7manager11ProcManager13seek_runnable17h4972a46c3e17c2c4E>
    80011ae0:	e0aa                	sd	a0,64(sp)
    80011ae2:	a009                	j	80011ae4 <.LBB3_21+0x14>
                Some(task) => {
    80011ae4:	6506                	ld	a0,64(sp)
    80011ae6:	00a035b3          	snez	a1,a0
    80011aea:	4581                	li	a1,0
    80011aec:	00b50463          	beq	a0,a1,80011af4 <.LBB3_21+0x24>
    80011af0:	a009                	j	80011af2 <.LBB3_21+0x22>
    80011af2:	a019                	j	80011af8 <.LBB3_21+0x28>
            match PROC_MANAGER.seek_runnable() {
    80011af4:	a05d                	j	80011b9a <.LBB3_23+0x28>
    80011af6:	0000                	unimp
                Some(task) => {
    80011af8:	6506                	ld	a0,64(sp)
    80011afa:	f02a                	sd	a0,32(sp)
    80011afc:	f8aa                	sd	a0,112(sp)
                    // Switch to chosen process. It is the process's job
                    // to release it's lock and then reacquire it 
                    // before jumping back to us.
                    c.set_proc(NonNull::new(task as *mut task_struct));
    80011afe:	ffffd097          	auipc	ra,0xffffd
    80011b02:	772080e7          	jalr	1906(ra) # 8000f270 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$3new17h190cd254f5945591E>
    80011b06:	f42a                	sd	a0,40(sp)
    80011b08:	a009                	j	80011b0a <.LBB3_21+0x3a>
    80011b0a:	75a2                	ld	a1,40(sp)
    80011b0c:	7562                	ld	a0,56(sp)
    80011b0e:	00000097          	auipc	ra,0x0
    80011b12:	12c080e7          	jalr	300(ra) # 80011c3a <_ZN6kernel7process3cpu3CPU8set_proc17h4e940c763f0ffbe7E>
    80011b16:	a009                	j	80011b18 <.LBB3_21+0x48>
    80011b18:	7562                	ld	a0,56(sp)
    80011b1a:	7602                	ld	a2,32(sp)
    80011b1c:	4591                	li	a1,4
                    
                    task.state = ProcState::RUNNING;
    80011b1e:	04b107a3          	sb	a1,79(sp)
    80011b22:	40b60423          	sb	a1,1032(a2)

                    switch(
                        c.get_context_mut(),
    80011b26:	00000097          	auipc	ra,0x0
    80011b2a:	120080e7          	jalr	288(ra) # 80011c46 <_ZN6kernel7process3cpu3CPU15get_context_mut17hcdad5fc27fe1585bE>
    80011b2e:	ec2a                	sd	a0,24(sp)
    80011b30:	a009                	j	80011b32 <.LBB3_21+0x62>
                        &mut task.context as *mut Context
    80011b32:	6562                	ld	a0,24(sp)
    80011b34:	7582                	ld	a1,32(sp)
    80011b36:	02858593          	addi	a1,a1,40
                    switch(
    80011b3a:	fffef097          	auipc	ra,0xfffef
    80011b3e:	5e8080e7          	jalr	1512(ra) # 80001122 <switch>
    80011b42:	a009                	j	80011b44 <.LBB3_21+0x74>
                    );

                    if c.get_context_mut().is_null() {
    80011b44:	7562                	ld	a0,56(sp)
    80011b46:	00000097          	auipc	ra,0x0
    80011b4a:	100080e7          	jalr	256(ra) # 80011c46 <_ZN6kernel7process3cpu3CPU15get_context_mut17hcdad5fc27fe1585bE>
    80011b4e:	e82a                	sd	a0,16(sp)
    80011b50:	a009                	j	80011b52 <.LBB3_21+0x82>
    80011b52:	6542                	ld	a0,16(sp)
    80011b54:	00009097          	auipc	ra,0x9
    80011b58:	3e8080e7          	jalr	1000(ra) # 8001af3c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h3aa8018dbd05d49dE>
    80011b5c:	e42a                	sd	a0,8(sp)
    80011b5e:	a009                	j	80011b60 <.LBB3_21+0x90>
    80011b60:	6522                	ld	a0,8(sp)
    80011b62:	4581                	li	a1,0
    80011b64:	02b50263          	beq	a0,a1,80011b88 <.LBB3_23+0x16>
    80011b68:	a009                	j	80011b6a <.LBB3_22>

0000000080011b6a <.LBB3_22>:
                        panic!("context switch back with no process reference.");
    80011b6a:	00017517          	auipc	a0,0x17
    80011b6e:	e8e50513          	addi	a0,a0,-370 # 800289f8 <.L__unnamed_3>

0000000080011b72 <.LBB3_23>:
    80011b72:	00017617          	auipc	a2,0x17
    80011b76:	eb660613          	addi	a2,a2,-330 # 80028a28 <.L__unnamed_4>
    80011b7a:	02e00593          	li	a1,46
    80011b7e:	00010097          	auipc	ra,0x10
    80011b82:	57e080e7          	jalr	1406(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80011b86:	0000                	unimp
    80011b88:	7562                	ld	a0,56(sp)
    80011b8a:	4581                	li	a1,0
                    }
                    // Process is done running for now. 
                    // It should have changed it's process state before coming back. 
                    c.set_proc(None);
    80011b8c:	e8ae                	sd	a1,80(sp)
    80011b8e:	00000097          	auipc	ra,0x0
    80011b92:	0ac080e7          	jalr	172(ra) # 80011c3a <_ZN6kernel7process3cpu3CPU8set_proc17h4e940c763f0ffbe7E>
    80011b96:	a009                	j	80011b98 <.LBB3_23+0x26>
            match PROC_MANAGER.seek_runnable() {
    80011b98:	a009                	j	80011b9a <.LBB3_23+0x28>

                }

                None => {}
            }
            drop(guard);
    80011b9a:	7542                	ld	a0,48(sp)
    80011b9c:	0000b097          	auipc	ra,0xb
    80011ba0:	2ce080e7          	jalr	718(ra) # 8001ce6a <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    80011ba4:	a009                	j	80011ba6 <.LBB3_23+0x34>
        loop {
    80011ba6:	b701                	j	80011aa6 <_ZN6kernel7process3cpu10CPUManager9scheduler17hecedd2e89c301e93E+0x16>

Disassembly of section .text._ZN6kernel7process3cpu10CPUManager8alloc_fd17h6273585a0cf04a04E:

0000000080011ba8 <_ZN6kernel7process3cpu10CPUManager8alloc_fd17h6273585a0cf04a04E>:
        }
    }

    pub fn alloc_fd(&mut self, file:&VFile) -> Result<usize, &'static str> {
    80011ba8:	7135                	addi	sp,sp,-160
    80011baa:	ed06                	sd	ra,152(sp)
    80011bac:	ec32                	sd	a2,24(sp)
    80011bae:	f02e                	sd	a1,32(sp)
    80011bb0:	85aa                	mv	a1,a0
    80011bb2:	7502                	ld	a0,32(sp)
    80011bb4:	f42e                	sd	a1,40(sp)
    80011bb6:	f4aa                	sd	a0,104(sp)
    80011bb8:	f8b2                	sd	a2,112(sp)
        let proc = unsafe{ self.myproc().ok_or("Fail to find current process")? };
    80011bba:	00000097          	auipc	ra,0x0
    80011bbe:	e70080e7          	jalr	-400(ra) # 80011a2a <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    80011bc2:	f82a                	sd	a0,48(sp)
    80011bc4:	a009                	j	80011bc6 <_ZN6kernel7process3cpu10CPUManager8alloc_fd17h6273585a0cf04a04E+0x1e>
    80011bc6:	75c2                	ld	a1,48(sp)

0000000080011bc8 <.LBB4_10>:
    80011bc8:	00017617          	auipc	a2,0x17
    80011bcc:	e7860613          	addi	a2,a2,-392 # 80028a40 <.L__unnamed_5>
    80011bd0:	0888                	addi	a0,sp,80
    80011bd2:	46f1                	li	a3,28
    80011bd4:	ffffd097          	auipc	ra,0xffffd
    80011bd8:	c5a080e7          	jalr	-934(ra) # 8000e82e <_ZN4core6option15Option$LT$T$GT$5ok_or17hc525e8e997fb4842E>
    80011bdc:	a009                	j	80011bde <.LBB4_10+0x16>
    80011bde:	1828                	addi	a0,sp,56
    80011be0:	088c                	addi	a1,sp,80
    80011be2:	ffffb097          	auipc	ra,0xffffb
    80011be6:	5ba080e7          	jalr	1466(ra) # 8000d19c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hea2de720f3c4ff28E>
    80011bea:	a009                	j	80011bec <.LBB4_10+0x24>
    80011bec:	7562                	ld	a0,56(sp)
    80011bee:	4581                	li	a1,0
    80011bf0:	00b50463          	beq	a0,a1,80011bf8 <.LBB4_10+0x30>
    80011bf4:	a009                	j	80011bf6 <.LBB4_10+0x2e>
    80011bf6:	a821                	j	80011c0e <.LBB4_10+0x46>
    80011bf8:	6662                	ld	a2,24(sp)
    80011bfa:	7522                	ld	a0,40(sp)
    80011bfc:	6586                	ld	a1,64(sp)
    80011bfe:	e52e                	sd	a1,136(sp)
    80011c00:	e92e                	sd	a1,144(sp)
        proc.fd_alloc(file)
    80011c02:	00004097          	auipc	ra,0x4
    80011c06:	4fe080e7          	jalr	1278(ra) # 80016100 <_ZN6kernel7process7process11task_struct8fd_alloc17h2f054cafd5acb7f0E>
    80011c0a:	a02d                	j	80011c34 <.LBB4_10+0x6c>
        let proc = unsafe{ self.myproc().ok_or("Fail to find current process")? };
    80011c0c:	0000                	unimp
    80011c0e:	6506                	ld	a0,64(sp)
    80011c10:	65a6                	ld	a1,72(sp)
    80011c12:	fcaa                	sd	a0,120(sp)
    80011c14:	e12e                	sd	a1,128(sp)
    80011c16:	ffffa097          	auipc	ra,0xffffa
    80011c1a:	dae080e7          	jalr	-594(ra) # 8000b9c4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h6f3e3843c20d184aE>
    80011c1e:	e42a                	sd	a0,8(sp)
    80011c20:	e82e                	sd	a1,16(sp)
    80011c22:	a009                	j	80011c24 <.LBB4_10+0x5c>
    80011c24:	6642                	ld	a2,16(sp)
    80011c26:	65a2                	ld	a1,8(sp)
    80011c28:	7522                	ld	a0,40(sp)
    80011c2a:	ffffb097          	auipc	ra,0xffffb
    80011c2e:	3da080e7          	jalr	986(ra) # 8000d004 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h4dd43adfe00292f6E>
    80011c32:	a009                	j	80011c34 <.LBB4_10+0x6c>
    }
    80011c34:	60ea                	ld	ra,152(sp)
    80011c36:	610d                	addi	sp,sp,160
    80011c38:	8082                	ret

Disassembly of section .text._ZN6kernel7process3cpu3CPU8set_proc17h4e940c763f0ffbe7E:

0000000080011c3a <_ZN6kernel7process3cpu3CPU8set_proc17h4e940c763f0ffbe7E>:
            noff:0,
            intena:0
        }
    }

    pub fn set_proc(&mut self, proc:Option<NonNull<task_struct>>){
    80011c3a:	1141                	addi	sp,sp,-16
    80011c3c:	e02a                	sd	a0,0(sp)
    80011c3e:	e42e                	sd	a1,8(sp)
        self.process = proc;
    80011c40:	e10c                	sd	a1,0(a0)
    }
    80011c42:	0141                	addi	sp,sp,16
    80011c44:	8082                	ret

Disassembly of section .text._ZN6kernel7process3cpu3CPU15get_context_mut17hcdad5fc27fe1585bE:

0000000080011c46 <_ZN6kernel7process3cpu3CPU15get_context_mut17hcdad5fc27fe1585bE>:

    pub fn get_context_mut(&mut self) -> *mut Context{
    80011c46:	1141                	addi	sp,sp,-16
    80011c48:	e42a                	sd	a0,8(sp)
        &mut self.context as *mut Context
    80011c4a:	0521                	addi	a0,a0,8
    }
    80011c4c:	0141                	addi	sp,sp,16
    80011c4e:	8082                	ret

Disassembly of section .text._ZN6kernel7process3cpu3CPU5sched17h6aec64bf33990cbcE:

0000000080011c50 <_ZN6kernel7process3cpu3CPU5sched17h6aec64bf33990cbcE>:
    /// intena because intena is a property of this
    /// kernel thread, not this CPU. It should
    /// be proc->intena and proc->noff, but that would
    /// break in the few places where a lock is held but
    /// there's no process.
    pub unsafe fn sched<'a>(&mut self) 
    80011c50:	7155                	addi	sp,sp,-208
    80011c52:	e586                	sd	ra,200(sp)
    80011c54:	e4aa                	sd	a0,72(sp)
    80011c56:	f12a                	sd	a0,160(sp)

0000000080011c58 <.LBB7_18>:
    {
        extern "C" {
            fn switch(old: *mut Context, new: *mut Context);
        }

        let curtask = CPU_MANAGER.myproc().unwrap();
    80011c58:	00052517          	auipc	a0,0x52
    80011c5c:	4e850513          	addi	a0,a0,1256 # 80064140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    80011c60:	00000097          	auipc	ra,0x0
    80011c64:	dca080e7          	jalr	-566(ra) # 80011a2a <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    80011c68:	e8aa                	sd	a0,80(sp)
    80011c6a:	a009                	j	80011c6c <.LBB7_18+0x14>
    80011c6c:	6546                	ld	a0,80(sp)

0000000080011c6e <.LBB7_19>:
    80011c6e:	00017597          	auipc	a1,0x17
    80011c72:	df258593          	addi	a1,a1,-526 # 80028a60 <.L__unnamed_6>
    80011c76:	ffffd097          	auipc	ra,0xffffd
    80011c7a:	046080e7          	jalr	70(ra) # 8000ecbc <_ZN4core6option15Option$LT$T$GT$6unwrap17h81f0c84c54a80648E>
    80011c7e:	85aa                	mv	a1,a0
    80011c80:	e0ae                	sd	a1,64(sp)
    80011c82:	f52a                	sd	a0,168(sp)
    80011c84:	a009                	j	80011c86 <.LBB7_19+0x18>
        let cur_ctx =  &mut curtask.context as *mut Context ;
    80011c86:	6506                	ld	a0,64(sp)
    80011c88:	02850513          	addi	a0,a0,40
    80011c8c:	f82a                	sd	a0,48(sp)
    80011c8e:	f92a                	sd	a0,176(sp)
    80011c90:	6509                	lui	a0,0x2
    80011c92:	0885059b          	addiw	a1,a0,136

0000000080011c96 <.LBB7_20>:
    80011c96:	00046517          	auipc	a0,0x46
    80011c9a:	90a50513          	addi	a0,a0,-1782 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    80011c9e:	952e                	add	a0,a0,a1

        if !PROC_MANAGER.tasks_lock.holding() {
    80011ca0:	fffff097          	auipc	ra,0xfffff
    80011ca4:	212080e7          	jalr	530(ra) # 80010eb2 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7holding17h22290a831051ae28E>
    80011ca8:	fc2a                	sd	a0,56(sp)
    80011caa:	a009                	j	80011cac <.LBB7_20+0x16>
    80011cac:	7562                	ld	a0,56(sp)
    80011cae:	e105                	bnez	a0,80011cce <.LBB7_22+0x14>
    80011cb0:	a009                	j	80011cb2 <.LBB7_21>

0000000080011cb2 <.LBB7_21>:
            panic!("sched: not holding proc's lock");
    80011cb2:	00017517          	auipc	a0,0x17
    80011cb6:	dc650513          	addi	a0,a0,-570 # 80028a78 <.L__unnamed_7>

0000000080011cba <.LBB7_22>:
    80011cba:	00017617          	auipc	a2,0x17
    80011cbe:	dde60613          	addi	a2,a2,-546 # 80028a98 <.L__unnamed_8>
    80011cc2:	45f9                	li	a1,30
    80011cc4:	00010097          	auipc	ra,0x10
    80011cc8:	438080e7          	jalr	1080(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80011ccc:	0000                	unimp
        }
        // only holding self.proc.lock
        if self.noff != 1 {
    80011cce:	6526                	ld	a0,72(sp)
    80011cd0:	7d28                	ld	a0,120(a0)
    80011cd2:	4585                	li	a1,1
    80011cd4:	02b50363          	beq	a0,a1,80011cfa <.LBB7_23+0x16>
    80011cd8:	a009                	j	80011cda <.LBB7_22+0x20>
            println!("self noff is {}", self.noff);
    80011cda:	6526                	ld	a0,72(sp)
    80011cdc:	07850513          	addi	a0,a0,120
    80011ce0:	ed2a                	sd	a0,152(sp)
    80011ce2:	fd2a                	sd	a0,184(sp)

0000000080011ce4 <.LBB7_23>:
    80011ce4:	00013597          	auipc	a1,0x13
    80011ce8:	b7458593          	addi	a1,a1,-1164 # 80024858 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h9c6c4af1578f7c29E>
    80011cec:	0000e097          	auipc	ra,0xe
    80011cf0:	83a080e7          	jalr	-1990(ra) # 8001f526 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    80011cf4:	f02a                	sd	a0,32(sp)
    80011cf6:	f42e                	sd	a1,40(sp)
    80011cf8:	a831                	j	80011d14 <.LBB7_24+0x14>
            panic!("sched: cpu hold mutliple locks");
        }
            
        // proc is not running. 
        if curtask.state == ProcState::RUNNING {
    80011cfa:	6506                	ld	a0,64(sp)
    80011cfc:	40850513          	addi	a0,a0,1032

0000000080011d00 <.LBB7_24>:
    80011d00:	00017597          	auipc	a1,0x17
    80011d04:	e1858593          	addi	a1,a1,-488 # 80028b18 <.L__unnamed_9>
    80011d08:	00005097          	auipc	ra,0x5
    80011d0c:	bb6080e7          	jalr	-1098(ra) # 800168be <_ZN76_$LT$kernel..process..process..ProcState$u20$as$u20$core..cmp..PartialEq$GT$2eq17hc7c8c767a75b25feE>
    80011d10:	ec2a                	sd	a0,24(sp)
    80011d12:	a0b1                	j	80011d5e <.LBB7_27+0x14>
            println!("self noff is {}", self.noff);
    80011d14:	7522                	ld	a0,40(sp)
    80011d16:	7582                	ld	a1,32(sp)
    80011d18:	e52e                	sd	a1,136(sp)
    80011d1a:	e92a                	sd	a0,144(sp)

0000000080011d1c <.LBB7_25>:
    80011d1c:	00017597          	auipc	a1,0x17
    80011d20:	da458593          	addi	a1,a1,-604 # 80028ac0 <.L__unnamed_10>
    80011d24:	08a8                	addi	a0,sp,88
    80011d26:	4609                	li	a2,2
    80011d28:	0134                	addi	a3,sp,136
    80011d2a:	4705                	li	a4,1
    80011d2c:	ffff3097          	auipc	ra,0xffff3
    80011d30:	708080e7          	jalr	1800(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80011d34:	a009                	j	80011d36 <.LBB7_25+0x1a>
    80011d36:	08a8                	addi	a0,sp,88
    80011d38:	0000c097          	auipc	ra,0xc
    80011d3c:	e78080e7          	jalr	-392(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    80011d40:	a009                	j	80011d42 <.LBB7_26>

0000000080011d42 <.LBB7_26>:
            panic!("sched: cpu hold mutliple locks");
    80011d42:	00017517          	auipc	a0,0x17
    80011d46:	d9e50513          	addi	a0,a0,-610 # 80028ae0 <.L__unnamed_11>

0000000080011d4a <.LBB7_27>:
    80011d4a:	00017617          	auipc	a2,0x17
    80011d4e:	db660613          	addi	a2,a2,-586 # 80028b00 <.L__unnamed_12>
    80011d52:	45f9                	li	a1,30
    80011d54:	00010097          	auipc	ra,0x10
    80011d58:	3a8080e7          	jalr	936(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80011d5c:	0000                	unimp
    80011d5e:	6562                	ld	a0,24(sp)
    80011d60:	4581                	li	a1,0
        if curtask.state == ProcState::RUNNING {
    80011d62:	02b50163          	beq	a0,a1,80011d84 <.LBB7_29+0x14>
    80011d66:	a009                	j	80011d68 <.LBB7_28>

0000000080011d68 <.LBB7_28>:
            panic!("sched: proc is running");
    80011d68:	00017517          	auipc	a0,0x17
    80011d6c:	db150513          	addi	a0,a0,-591 # 80028b19 <.L__unnamed_13>

0000000080011d70 <.LBB7_29>:
    80011d70:	00017617          	auipc	a2,0x17
    80011d74:	dc060613          	addi	a2,a2,-576 # 80028b30 <.L__unnamed_14>
    80011d78:	45d9                	li	a1,22
    80011d7a:	00010097          	auipc	ra,0x10
    80011d7e:	382080e7          	jalr	898(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80011d82:	0000                	unimp
        }

        // should not be interruptible
        if sstatus::intr_get() {
    80011d84:	0000c097          	auipc	ra,0xc
    80011d88:	46e080e7          	jalr	1134(ra) # 8001e1f2 <_ZN6kernel4arch5riscv8register7sstatus8intr_get17h3e12e0f19cb31fd5E>
    80011d8c:	e82a                	sd	a0,16(sp)
    80011d8e:	a009                	j	80011d90 <.LBB7_29+0x20>
    80011d90:	6542                	ld	a0,16(sp)
    80011d92:	4581                	li	a1,0
    80011d94:	02b50163          	beq	a0,a1,80011db6 <.LBB7_31+0x14>
    80011d98:	a009                	j	80011d9a <.LBB7_30>

0000000080011d9a <.LBB7_30>:
            panic!("sched: interruptible");
    80011d9a:	00017517          	auipc	a0,0x17
    80011d9e:	dae50513          	addi	a0,a0,-594 # 80028b48 <.L__unnamed_15>

0000000080011da2 <.LBB7_31>:
    80011da2:	00017617          	auipc	a2,0x17
    80011da6:	dbe60613          	addi	a2,a2,-578 # 80028b60 <.L__unnamed_16>
    80011daa:	45d1                	li	a1,20
    80011dac:	00010097          	auipc	ra,0x10
    80011db0:	350080e7          	jalr	848(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80011db4:	0000                	unimp
        }

        let intena = self.intena;
    80011db6:	7542                	ld	a0,48(sp)
    80011db8:	65a6                	ld	a1,72(sp)
    80011dba:	61d0                	ld	a2,128(a1)
    80011dbc:	e432                	sd	a2,8(sp)
    80011dbe:	e1b2                	sd	a2,192(sp)
        // println!("[Kernel] switch");
        // println!("[Kernel] old_context: 0x{:x}, new_context: 0x{:x}", ctx as usize, &mut self.context as *mut Context as usize);
        switch(
            cur_ctx, 
            &mut self.context as *mut Context
    80011dc0:	05a1                	addi	a1,a1,8
        switch(
    80011dc2:	fffef097          	auipc	ra,0xfffef
    80011dc6:	360080e7          	jalr	864(ra) # 80001122 <switch>
    80011dca:	a009                	j	80011dcc <.LBB7_31+0x2a>
        );


        self.intena = intena; 
    80011dcc:	6522                	ld	a0,8(sp)
    80011dce:	65a6                	ld	a1,72(sp)
    80011dd0:	e1c8                	sd	a0,128(a1)
    }
    80011dd2:	60ae                	ld	ra,200(sp)
    80011dd4:	6169                	addi	sp,sp,208
    80011dd6:	8082                	ret

Disassembly of section .text._ZN6kernel7process3cpu3CPU14try_yield_proc17hdb175aaf084d8a03E:

0000000080011dd8 <_ZN6kernel7process3cpu3CPU14try_yield_proc17hdb175aaf084d8a03E>:

    /// Yield the holding process if any and it's RUNNING.
    /// Directly return if none.
    pub fn try_yield_proc(&mut self) {
    80011dd8:	7139                	addi	sp,sp,-64
    80011dda:	fc06                	sd	ra,56(sp)
    80011ddc:	e82a                	sd	a0,16(sp)
    80011dde:	f82a                	sd	a0,48(sp)

        if !self.process.is_none() {
    80011de0:	ffffd097          	auipc	ra,0xffffd
    80011de4:	08a080e7          	jalr	138(ra) # 8000ee6a <_ZN4core6option15Option$LT$T$GT$7is_none17h62fa14fb8476dac2E>
    80011de8:	ec2a                	sd	a0,24(sp)
    80011dea:	a009                	j	80011dec <_ZN6kernel7process3cpu3CPU14try_yield_proc17hdb175aaf084d8a03E+0x14>
    80011dec:	6562                	ld	a0,24(sp)
    80011dee:	ed11                	bnez	a0,80011e0a <.LBB8_8+0x14>
    80011df0:	a009                	j	80011df2 <_ZN6kernel7process3cpu3CPU14try_yield_proc17hdb175aaf084d8a03E+0x1a>
            //     drop(guard);
            //     unsafe { self.process.unwrap().as_mut().yielding() }
            // } else {
            //     drop(guard);
            // }
            unsafe { self.process.unwrap().as_mut().yielding(); }
    80011df2:	6542                	ld	a0,16(sp)
    80011df4:	6108                	ld	a0,0(a0)

0000000080011df6 <.LBB8_8>:
    80011df6:	00017597          	auipc	a1,0x17
    80011dfa:	d8258593          	addi	a1,a1,-638 # 80028b78 <.L__unnamed_17>
    80011dfe:	ffffd097          	auipc	ra,0xffffd
    80011e02:	e88080e7          	jalr	-376(ra) # 8000ec86 <_ZN4core6option15Option$LT$T$GT$6unwrap17h715ab0e996921161E>
    80011e06:	f42a                	sd	a0,40(sp)
    80011e08:	a011                	j	80011e0c <.LBB8_8+0x16>
        if !self.process.is_none() {
    80011e0a:	a839                	j	80011e28 <.LBB8_8+0x32>
    80011e0c:	1028                	addi	a0,sp,40
            unsafe { self.process.unwrap().as_mut().yielding(); }
    80011e0e:	ffffd097          	auipc	ra,0xffffd
    80011e12:	5fe080e7          	jalr	1534(ra) # 8000f40c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_mut17h0bb096450dabbbf6E>
    80011e16:	e42a                	sd	a0,8(sp)
    80011e18:	a009                	j	80011e1a <.LBB8_8+0x24>
    80011e1a:	6522                	ld	a0,8(sp)
    80011e1c:	00004097          	auipc	ra,0x4
    80011e20:	274080e7          	jalr	628(ra) # 80016090 <_ZN6kernel7process7process11task_struct8yielding17hffa4922f8aee5a94E>
    80011e24:	a009                	j	80011e26 <.LBB8_8+0x30>
        if !self.process.is_none() {
    80011e26:	a009                	j	80011e28 <.LBB8_8+0x32>
        }
    }
    80011e28:	70e2                	ld	ra,56(sp)
    80011e2a:	6121                	addi	sp,sp,64
    80011e2c:	8082                	ret

Disassembly of section .text._ZN6kernel7process3cpu8push_off17h0acd4baa93104745E:

0000000080011e2e <_ZN6kernel7process3cpu8push_off17h0acd4baa93104745E>:

/// push_off/pop_off are like intr_off()/intr_on() except that they are matched:
/// it takes two pop_off()s to undo two push_off()s.  Also, if interrupts
/// are initially off, then push_off, pop_off leaves them off.

pub fn push_off(){
    80011e2e:	7179                	addi	sp,sp,-48
    let old_enable;
    unsafe{
        old_enable = sstatus::intr_get();
    80011e30:	f406                	sd	ra,40(sp)
    80011e32:	0000c097          	auipc	ra,0xc
    80011e36:	3c0080e7          	jalr	960(ra) # 8001e1f2 <_ZN6kernel4arch5riscv8register7sstatus8intr_get17h3e12e0f19cb31fd5E>
    80011e3a:	e82a                	sd	a0,16(sp)
    80011e3c:	a009                	j	80011e3e <_ZN6kernel7process3cpu8push_off17h0acd4baa93104745E+0x10>
    80011e3e:	6542                	ld	a0,16(sp)
    80011e40:	00a10fa3          	sb	a0,31(sp)
        sstatus::intr_off();
    80011e44:	0000c097          	auipc	ra,0xc
    80011e48:	38a080e7          	jalr	906(ra) # 8001e1ce <_ZN6kernel4arch5riscv8register7sstatus8intr_off17hed3f5b43b53e6556E>
    80011e4c:	a009                	j	80011e4e <.LBB9_9>

0000000080011e4e <.LBB9_9>:
    }
    let my_cpu = unsafe{ CPU_MANAGER.mycpu() };
    80011e4e:	00052517          	auipc	a0,0x52
    80011e52:	2f250513          	addi	a0,a0,754 # 80064140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    80011e56:	00000097          	auipc	ra,0x0
    80011e5a:	b88080e7          	jalr	-1144(ra) # 800119de <_ZN6kernel7process3cpu10CPUManager5mycpu17hac5ae6ce2070e7c3E>
    80011e5e:	e42a                	sd	a0,8(sp)
    80011e60:	a009                	j	80011e62 <.LBB9_9+0x14>
    80011e62:	6522                	ld	a0,8(sp)
    80011e64:	f02a                	sd	a0,32(sp)
    if my_cpu.noff == 0 {
    80011e66:	7d28                	ld	a0,120(a0)
    80011e68:	4581                	li	a1,0
    80011e6a:	00b51763          	bne	a0,a1,80011e78 <.LBB9_9+0x2a>
    80011e6e:	a009                	j	80011e70 <.LBB9_9+0x22>
        my_cpu.intena = old_enable as usize;
    80011e70:	6542                	ld	a0,16(sp)
    80011e72:	65a2                	ld	a1,8(sp)
    80011e74:	e1c8                	sd	a0,128(a1)
    if my_cpu.noff == 0 {
    80011e76:	a011                	j	80011e7a <.LBB9_9+0x2c>
    80011e78:	a009                	j	80011e7a <.LBB9_9+0x2c>
    }

    my_cpu.noff += 1;
    80011e7a:	6522                	ld	a0,8(sp)
    80011e7c:	7d2c                	ld	a1,120(a0)
    80011e7e:	00158513          	addi	a0,a1,1
    80011e82:	e02a                	sd	a0,0(sp)
    80011e84:	00b56963          	bltu	a0,a1,80011e96 <.LBB9_10>
    80011e88:	a009                	j	80011e8a <.LBB9_9+0x3c>
    80011e8a:	6502                	ld	a0,0(sp)
    80011e8c:	65a2                	ld	a1,8(sp)
    80011e8e:	fda8                	sd	a0,120(a1)
}
    80011e90:	70a2                	ld	ra,40(sp)
    80011e92:	6145                	addi	sp,sp,48
    80011e94:	8082                	ret

0000000080011e96 <.LBB9_10>:
    my_cpu.noff += 1;
    80011e96:	00017517          	auipc	a0,0x17
    80011e9a:	d1a50513          	addi	a0,a0,-742 # 80028bb0 <str.0>

0000000080011e9e <.LBB9_11>:
    80011e9e:	00017617          	auipc	a2,0x17
    80011ea2:	cf260613          	addi	a2,a2,-782 # 80028b90 <.L__unnamed_18>
    80011ea6:	45f1                	li	a1,28
    80011ea8:	00010097          	auipc	ra,0x10
    80011eac:	254080e7          	jalr	596(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel7process3cpu7pop_off17hb8c7b834ab1c7c4cE:

0000000080011eb2 <_ZN6kernel7process3cpu7pop_off17hb8c7b834ab1c7c4cE>:


pub fn pop_off() {
    80011eb2:	715d                	addi	sp,sp,-80
    if unsafe{ sstatus::intr_get() } {
    80011eb4:	e486                	sd	ra,72(sp)
    80011eb6:	0000c097          	auipc	ra,0xc
    80011eba:	33c080e7          	jalr	828(ra) # 8001e1f2 <_ZN6kernel4arch5riscv8register7sstatus8intr_get17h3e12e0f19cb31fd5E>
    80011ebe:	ec2a                	sd	a0,24(sp)
    80011ec0:	a009                	j	80011ec2 <_ZN6kernel7process3cpu7pop_off17hb8c7b834ab1c7c4cE+0x10>
    80011ec2:	6562                	ld	a0,24(sp)
    80011ec4:	4581                	li	a1,0
    80011ec6:	02b50163          	beq	a0,a1,80011ee8 <.LBB10_21>
    80011eca:	a009                	j	80011ecc <.LBB10_19>

0000000080011ecc <.LBB10_19>:
        panic!("pop_off(): interruptable");
    80011ecc:	00017517          	auipc	a0,0x17
    80011ed0:	d0050513          	addi	a0,a0,-768 # 80028bcc <.L__unnamed_19>

0000000080011ed4 <.LBB10_20>:
    80011ed4:	00017617          	auipc	a2,0x17
    80011ed8:	d1460613          	addi	a2,a2,-748 # 80028be8 <.L__unnamed_20>
    80011edc:	45e1                	li	a1,24
    80011ede:	00010097          	auipc	ra,0x10
    80011ee2:	21e080e7          	jalr	542(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080011ee8 <.LBB10_21>:
    }
    let c = unsafe { CPU_MANAGER.mycpu() };
    80011ee8:	00052517          	auipc	a0,0x52
    80011eec:	25850513          	addi	a0,a0,600 # 80064140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    80011ef0:	00000097          	auipc	ra,0x0
    80011ef4:	aee080e7          	jalr	-1298(ra) # 800119de <_ZN6kernel7process3cpu10CPUManager5mycpu17hac5ae6ce2070e7c3E>
    80011ef8:	e82a                	sd	a0,16(sp)
    80011efa:	a009                	j	80011efc <.LBB10_21+0x14>
    80011efc:	6542                	ld	a0,16(sp)
    80011efe:	e0aa                	sd	a0,64(sp)
    if c.noff.checked_sub(1).is_none() {
    80011f00:	7d28                	ld	a0,120(a0)
    80011f02:	4585                	li	a1,1
    80011f04:	0000c097          	auipc	ra,0xc
    80011f08:	fc6080e7          	jalr	-58(ra) # 8001deca <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h4d6a04d1a942bf32E>
    80011f0c:	f42a                	sd	a0,40(sp)
    80011f0e:	f82e                	sd	a1,48(sp)
    80011f10:	a009                	j	80011f12 <.LBB10_21+0x2a>
    80011f12:	1028                	addi	a0,sp,40
    80011f14:	ffffd097          	auipc	ra,0xffffd
    80011f18:	f92080e7          	jalr	-110(ra) # 8000eea6 <_ZN4core6option15Option$LT$T$GT$7is_none17hbfc07de6cbdc4f1cE>
    80011f1c:	e42a                	sd	a0,8(sp)
    80011f1e:	a009                	j	80011f20 <.LBB10_21+0x38>
    80011f20:	6522                	ld	a0,8(sp)
    80011f22:	4581                	li	a1,0
    80011f24:	02b50163          	beq	a0,a1,80011f46 <.LBB10_23+0x14>
    80011f28:	a009                	j	80011f2a <.LBB10_22>

0000000080011f2a <.LBB10_22>:
        panic!("pop_off(): count not match");
    80011f2a:	00017517          	auipc	a0,0x17
    80011f2e:	cd650513          	addi	a0,a0,-810 # 80028c00 <.L__unnamed_21>

0000000080011f32 <.LBB10_23>:
    80011f32:	00017617          	auipc	a2,0x17
    80011f36:	cee60613          	addi	a2,a2,-786 # 80028c20 <.L__unnamed_22>
    80011f3a:	45e9                	li	a1,26
    80011f3c:	00010097          	auipc	ra,0x10
    80011f40:	1c0080e7          	jalr	448(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80011f44:	0000                	unimp
    }
    c.noff -= 1;
    80011f46:	6542                	ld	a0,16(sp)
    80011f48:	7d28                	ld	a0,120(a0)
    80011f4a:	fff50593          	addi	a1,a0,-1
    80011f4e:	e02e                	sd	a1,0(sp)
    80011f50:	04b56963          	bltu	a0,a1,80011fa2 <.LBB10_24>
    80011f54:	a009                	j	80011f56 <.LBB10_23+0x24>
    80011f56:	6502                	ld	a0,0(sp)
    80011f58:	65c2                	ld	a1,16(sp)
    80011f5a:	fda8                	sd	a0,120(a1)
    80011f5c:	4581                	li	a1,0
    if c.noff == 0 && c.intena != 0 {
    80011f5e:	00b50b63          	beq	a0,a1,80011f74 <.LBB10_23+0x42>
    80011f62:	a029                	j	80011f6c <.LBB10_23+0x3a>
    80011f64:	4505                	li	a0,1
    80011f66:	02a10fa3          	sb	a0,63(sp)
    80011f6a:	a819                	j	80011f80 <.LBB10_23+0x4e>
    80011f6c:	4501                	li	a0,0
    80011f6e:	02a10fa3          	sb	a0,63(sp)
    80011f72:	a039                	j	80011f80 <.LBB10_23+0x4e>
    80011f74:	6542                	ld	a0,16(sp)
    80011f76:	6148                	ld	a0,128(a0)
    80011f78:	4581                	li	a1,0
    80011f7a:	feb509e3          	beq	a0,a1,80011f6c <.LBB10_23+0x3a>
    80011f7e:	b7dd                	j	80011f64 <.LBB10_23+0x32>
    80011f80:	03f14503          	lbu	a0,63(sp)
    80011f84:	8905                	andi	a0,a0,1
    80011f86:	4581                	li	a1,0
    80011f88:	00b50863          	beq	a0,a1,80011f98 <.LBB10_23+0x66>
    80011f8c:	a009                	j	80011f8e <.LBB10_23+0x5c>
        unsafe{ sstatus::intr_on() };
    80011f8e:	0000c097          	auipc	ra,0xc
    80011f92:	21a080e7          	jalr	538(ra) # 8001e1a8 <_ZN6kernel4arch5riscv8register7sstatus7intr_on17h10d927cfe74faba7E>
    80011f96:	a011                	j	80011f9a <.LBB10_23+0x68>
    if c.noff == 0 && c.intena != 0 {
    80011f98:	a011                	j	80011f9c <.LBB10_23+0x6a>
    80011f9a:	a009                	j	80011f9c <.LBB10_23+0x6a>
    }
}
    80011f9c:	60a6                	ld	ra,72(sp)
    80011f9e:	6161                	addi	sp,sp,80
    80011fa0:	8082                	ret

0000000080011fa2 <.LBB10_24>:
    c.noff -= 1;
    80011fa2:	00017517          	auipc	a0,0x17
    80011fa6:	cae50513          	addi	a0,a0,-850 # 80028c50 <str.1>

0000000080011faa <.LBB10_25>:
    80011faa:	00017617          	auipc	a2,0x17
    80011fae:	c8e60613          	addi	a2,a2,-882 # 80028c38 <.L__unnamed_23>
    80011fb2:	02100593          	li	a1,33
    80011fb6:	00010097          	auipc	ra,0x10
    80011fba:	146080e7          	jalr	326(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold17hc2ce6cb165c0b4a8E:

0000000080011fc0 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold17hc2ce6cb165c0b4a8E>:

        self.iter.try_fold(init, enumerate(&mut self.count, fold))
    }

    #[inline]
    fn fold<Acc, Fold>(self, init: Acc, fold: Fold) -> Acc
    80011fc0:	7179                	addi	sp,sp,-48
                count += 1;
                acc
            }
        }

        self.iter.fold(init, enumerate(self.count, fold))
    80011fc2:	f406                	sd	ra,40(sp)
    80011fc4:	610c                	ld	a1,0(a0)
    80011fc6:	e02e                	sd	a1,0(sp)
    80011fc8:	650c                	ld	a1,8(a0)
    80011fca:	e42e                	sd	a1,8(sp)
    80011fcc:	6908                	ld	a0,16(a0)
    80011fce:	00000097          	auipc	ra,0x0
    80011fd2:	022080e7          	jalr	34(ra) # 80011ff0 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold9enumerate17h31eee2683e3bacc6E>
    80011fd6:	e82a                	sd	a0,16(sp)
    80011fd8:	a009                	j	80011fda <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold17hc2ce6cb165c0b4a8E+0x1a>
    80011fda:	6642                	ld	a2,16(sp)
    80011fdc:	65a2                	ld	a1,8(sp)
    80011fde:	6502                	ld	a0,0(sp)
    80011fe0:	ffff9097          	auipc	ra,0xffff9
    80011fe4:	b5a080e7          	jalr	-1190(ra) # 8000ab3a <_ZN4core4iter6traits8iterator8Iterator4fold17hc68e62fe16e6d649E>
    80011fe8:	a009                	j	80011fea <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold17hc2ce6cb165c0b4a8E+0x2a>
    }
    80011fea:	70a2                	ld	ra,40(sp)
    80011fec:	6145                	addi	sp,sp,48
    80011fee:	8082                	ret

Disassembly of section .text._ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold9enumerate17h31eee2683e3bacc6E:

0000000080011ff0 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold9enumerate17h31eee2683e3bacc6E>:
        fn enumerate<T, Acc>(
    80011ff0:	1101                	addi	sp,sp,-32
    80011ff2:	e82a                	sd	a0,16(sp)
            move |acc, item| {
    80011ff4:	e42a                	sd	a0,8(sp)
        }
    80011ff6:	6105                	addi	sp,sp,32
    80011ff8:	8082                	ret

Disassembly of section .text._ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold9enumerate28_$u7b$$u7b$closure$u7d$$u7d$17hd0c93bb900581135E:

0000000080011ffa <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold9enumerate28_$u7b$$u7b$closure$u7d$$u7d$17hd0c93bb900581135E>:
            move |acc, item| {
    80011ffa:	711d                	addi	sp,sp,-96
    80011ffc:	ec86                	sd	ra,88(sp)
    80011ffe:	862e                	mv	a2,a1
    80012000:	e82a                	sd	a0,16(sp)
    80012002:	e0aa                	sd	a0,64(sp)
    80012004:	e8b2                	sd	a2,80(sp)
                let acc = fold(acc, (count, item));
    80012006:	610c                	ld	a1,0(a0)
    80012008:	f42e                	sd	a1,40(sp)
    8001200a:	f832                	sd	a2,48(sp)
    8001200c:	ec2e                	sd	a1,24(sp)
    8001200e:	f032                	sd	a2,32(sp)
    80012010:	0000a097          	auipc	ra,0xa
    80012014:	3ce080e7          	jalr	974(ra) # 8001c3de <_ZN4core4iter6traits8iterator8Iterator8for_each4call28_$u7b$$u7b$closure$u7d$$u7d$17h486761cc57705d97E>
    80012018:	a009                	j	8001201a <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold9enumerate28_$u7b$$u7b$closure$u7d$$u7d$17hd0c93bb900581135E+0x20>
                count += 1;
    8001201a:	6542                	ld	a0,16(sp)
    8001201c:	610c                	ld	a1,0(a0)
    8001201e:	00158513          	addi	a0,a1,1
    80012022:	e42a                	sd	a0,8(sp)
    80012024:	00b56963          	bltu	a0,a1,80012036 <.LBB2_4>
    80012028:	a009                	j	8001202a <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold9enumerate28_$u7b$$u7b$closure$u7d$$u7d$17hd0c93bb900581135E+0x30>
    8001202a:	6522                	ld	a0,8(sp)
    8001202c:	65c2                	ld	a1,16(sp)
    8001202e:	e188                	sd	a0,0(a1)
            }
    80012030:	60e6                	ld	ra,88(sp)
    80012032:	6125                	addi	sp,sp,96
    80012034:	8082                	ret

0000000080012036 <.LBB2_4>:
                count += 1;
    80012036:	00017517          	auipc	a0,0x17
    8001203a:	cea50513          	addi	a0,a0,-790 # 80028d20 <str.0>

000000008001203e <.LBB2_5>:
    8001203e:	00017617          	auipc	a2,0x17
    80012042:	cc260613          	addi	a2,a2,-830 # 80028d00 <.L__unnamed_1>
    80012046:	45f1                	li	a1,28
    80012048:	00010097          	auipc	ra,0x10
    8001204c:	0b4080e7          	jalr	180(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2c3e0997dfaaf459E:

0000000080012052 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2c3e0997dfaaf459E>:
    fn next(&mut self) -> Option<(usize, <I as Iterator>::Item)> {
    80012052:	7119                	addi	sp,sp,-128
    80012054:	fc86                	sd	ra,120(sp)
    80012056:	ec2a                	sd	a0,24(sp)
    80012058:	e8aa                	sd	a0,80(sp)
        let a = self.iter.next()?;
    8001205a:	ffff9097          	auipc	ra,0xffff9
    8001205e:	1ae080e7          	jalr	430(ra) # 8000b208 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17habdea9e62d8c6ddfE>
    80012062:	f02a                	sd	a0,32(sp)
    80012064:	a009                	j	80012066 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2c3e0997dfaaf459E+0x14>
    80012066:	7502                	ld	a0,32(sp)
    80012068:	ffffd097          	auipc	ra,0xffffd
    8001206c:	10e080e7          	jalr	270(ra) # 8000f176 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h90575ee4c84cb448E>
    80012070:	fc2a                	sd	a0,56(sp)
    80012072:	a009                	j	80012074 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2c3e0997dfaaf459E+0x22>
    80012074:	7562                	ld	a0,56(sp)
    80012076:	00153593          	seqz	a1,a0
    8001207a:	4581                	li	a1,0
    8001207c:	00b51463          	bne	a0,a1,80012084 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2c3e0997dfaaf459E+0x32>
    80012080:	a009                	j	80012082 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2c3e0997dfaaf459E+0x30>
    80012082:	a00d                	j	800120a4 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2c3e0997dfaaf459E+0x52>
    80012084:	6562                	ld	a0,24(sp)
    80012086:	75e2                	ld	a1,56(sp)
    80012088:	e02e                	sd	a1,0(sp)
    8001208a:	f0ae                	sd	a1,96(sp)
    8001208c:	f4ae                	sd	a1,104(sp)
        let i = self.count;
    8001208e:	690c                	ld	a1,16(a0)
    80012090:	e42e                	sd	a1,8(sp)
    80012092:	f8ae                	sd	a1,112(sp)
        self.count += 1;
    80012094:	690c                	ld	a1,16(a0)
    80012096:	00158513          	addi	a0,a1,1
    8001209a:	e82a                	sd	a0,16(sp)
    8001209c:	04b56063          	bltu	a0,a1,800120dc <.LBB3_12>
    800120a0:	a839                	j	800120be <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2c3e0997dfaaf459E+0x6c>
        let a = self.iter.next()?;
    800120a2:	0000                	unimp
    800120a4:	ffffd097          	auipc	ra,0xffffd
    800120a8:	f32080e7          	jalr	-206(ra) # 8000efd6 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h8871efd663dd0baaE>
    800120ac:	a009                	j	800120ae <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2c3e0997dfaaf459E+0x5c>
    800120ae:	ffffd097          	auipc	ra,0xffffd
    800120b2:	0b0080e7          	jalr	176(ra) # 8000f15e <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h22f2f1fa04d4de26E>
    800120b6:	f42a                	sd	a0,40(sp)
    800120b8:	f82e                	sd	a1,48(sp)
    800120ba:	a009                	j	800120bc <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2c3e0997dfaaf459E+0x6a>
    }
    800120bc:	a819                	j	800120d2 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2c3e0997dfaaf459E+0x80>
        self.count += 1;
    800120be:	6502                	ld	a0,0(sp)
    800120c0:	65a2                	ld	a1,8(sp)
    800120c2:	6642                	ld	a2,16(sp)
    800120c4:	66e2                	ld	a3,24(sp)
    800120c6:	ea90                	sd	a2,16(a3)
        Some((i, a))
    800120c8:	e0ae                	sd	a1,64(sp)
    800120ca:	e4aa                	sd	a0,72(sp)
    800120cc:	f42e                	sd	a1,40(sp)
    800120ce:	f82a                	sd	a0,48(sp)
    }
    800120d0:	a009                	j	800120d2 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2c3e0997dfaaf459E+0x80>
    800120d2:	7522                	ld	a0,40(sp)
    800120d4:	75c2                	ld	a1,48(sp)
    800120d6:	70e6                	ld	ra,120(sp)
    800120d8:	6109                	addi	sp,sp,128
    800120da:	8082                	ret

00000000800120dc <.LBB3_12>:
        self.count += 1;
    800120dc:	00017517          	auipc	a0,0x17
    800120e0:	c4450513          	addi	a0,a0,-956 # 80028d20 <str.0>

00000000800120e4 <.LBB3_13>:
    800120e4:	00017617          	auipc	a2,0x17
    800120e8:	c5c60613          	addi	a2,a2,-932 # 80028d40 <.L__unnamed_2>
    800120ec:	45f1                	li	a1,28
    800120ee:	00010097          	auipc	ra,0x10
    800120f2:	00e080e7          	jalr	14(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN4core4iter6traits8iterator8Iterator8for_each17hc49183b8c223967eE:

00000000800120f8 <_ZN4core4iter6traits8iterator8Iterator8for_each17hc49183b8c223967eE>:
    fn for_each<F>(self, f: F)
    800120f8:	7179                	addi	sp,sp,-48
        self.fold((), call(f));
    800120fa:	f406                	sd	ra,40(sp)
    800120fc:	690c                	ld	a1,16(a0)
    800120fe:	ec2e                	sd	a1,24(sp)
    80012100:	650c                	ld	a1,8(a0)
    80012102:	e82e                	sd	a1,16(sp)
    80012104:	6108                	ld	a0,0(a0)
    80012106:	e42a                	sd	a0,8(sp)
    80012108:	0000a097          	auipc	ra,0xa
    8001210c:	2d0080e7          	jalr	720(ra) # 8001c3d8 <_ZN4core4iter6traits8iterator8Iterator8for_each4call17hfc6c60365ed1f66bE>
    80012110:	a009                	j	80012112 <_ZN4core4iter6traits8iterator8Iterator8for_each17hc49183b8c223967eE+0x1a>
    80012112:	0028                	addi	a0,sp,8
    80012114:	00000097          	auipc	ra,0x0
    80012118:	eac080e7          	jalr	-340(ra) # 80011fc0 <_ZN110_$LT$core..iter..adapters..enumerate..Enumerate$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4fold17hc2ce6cb165c0b4a8E>
    8001211c:	a009                	j	8001211e <_ZN4core4iter6traits8iterator8Iterator8for_each17hc49183b8c223967eE+0x26>
    }
    8001211e:	70a2                	ld	ra,40(sp)
    80012120:	6145                	addi	sp,sp,48
    80012122:	8082                	ret

Disassembly of section .text._ZN4core4iter8adapters9enumerate18Enumerate$LT$I$GT$3new17h36e1d93f918ce5d8E:

0000000080012124 <_ZN4core4iter8adapters9enumerate18Enumerate$LT$I$GT$3new17h36e1d93f918ce5d8E>:
    pub(in crate::iter) fn new(iter: I) -> Enumerate<I> {
    80012124:	1101                	addi	sp,sp,-32
    80012126:	e42e                	sd	a1,8(sp)
    80012128:	85aa                	mv	a1,a0
    8001212a:	6522                	ld	a0,8(sp)
    8001212c:	e82a                	sd	a0,16(sp)
    8001212e:	ec32                	sd	a2,24(sp)
        Enumerate { iter, count: 0 }
    80012130:	e188                	sd	a0,0(a1)
    80012132:	e590                	sd	a2,8(a1)
    80012134:	4501                	li	a0,0
    80012136:	e988                	sd	a0,16(a1)
    }
    80012138:	6105                	addi	sp,sp,32
    8001213a:	8082                	ret

Disassembly of section .text._ZN4core4iter8adapters9enumerate18Enumerate$LT$I$GT$3new17h6d37c7662d298f80E:

000000008001213c <_ZN4core4iter8adapters9enumerate18Enumerate$LT$I$GT$3new17h6d37c7662d298f80E>:
    pub(in crate::iter) fn new(iter: I) -> Enumerate<I> {
    8001213c:	1101                	addi	sp,sp,-32
    8001213e:	e42e                	sd	a1,8(sp)
    80012140:	85aa                	mv	a1,a0
    80012142:	6522                	ld	a0,8(sp)
    80012144:	e82a                	sd	a0,16(sp)
    80012146:	ec32                	sd	a2,24(sp)
        Enumerate { iter, count: 0 }
    80012148:	e188                	sd	a0,0(a1)
    8001214a:	e590                	sd	a2,8(a1)
    8001214c:	4501                	li	a0,0
    8001214e:	e988                	sd	a0,16(a1)
    }
    80012150:	6105                	addi	sp,sp,32
    80012152:	8082                	ret

Disassembly of section .text._ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h928d6ed65fce619dE:

0000000080012154 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h928d6ed65fce619dE>:
    fn into_iter(self) -> I {
    80012154:	1141                	addi	sp,sp,-16
    80012156:	e42e                	sd	a1,8(sp)
    80012158:	85aa                	mv	a1,a0
        self
    8001215a:	6522                	ld	a0,8(sp)
    8001215c:	6910                	ld	a2,16(a0)
    8001215e:	e990                	sd	a2,16(a1)
    80012160:	6510                	ld	a2,8(a0)
    80012162:	e590                	sd	a2,8(a1)
    80012164:	6108                	ld	a0,0(a0)
    80012166:	e188                	sd	a0,0(a1)
    }
    80012168:	0141                	addi	sp,sp,16
    8001216a:	8082                	ret

Disassembly of section .text._ZN6kernel7process7context7Context10write_zero17hffd0e59e9c54d2c3E:

000000008001216c <_ZN6kernel7process7context7Context10write_zero17hffd0e59e9c54d2c3E>:

    pub fn ra(&self) -> usize {
        self.ra
    }

    pub fn write_zero(&mut self) {
    8001216c:	1141                	addi	sp,sp,-16
    8001216e:	85aa                	mv	a1,a0
    80012170:	e42e                	sd	a1,8(sp)
    80012172:	4501                	li	a0,0
        self.ra = 0;
    80012174:	e188                	sd	a0,0(a1)
        self.sp = 0;
    80012176:	e588                	sd	a0,8(a1)
        self.s0 = 0;
    80012178:	e988                	sd	a0,16(a1)
        self.s1 = 0;
    8001217a:	ed88                	sd	a0,24(a1)
        self.s2 = 0;
    8001217c:	f188                	sd	a0,32(a1)
        self.s3 = 0;
    8001217e:	f588                	sd	a0,40(a1)
        self.s4 = 0;
    80012180:	f988                	sd	a0,48(a1)
        self.s5 = 0;
    80012182:	fd88                	sd	a0,56(a1)
        self.s6 = 0;
    80012184:	e1a8                	sd	a0,64(a1)
        self.s7 = 0;
    80012186:	e5a8                	sd	a0,72(a1)
        self.s8 = 0;
    80012188:	e9a8                	sd	a0,80(a1)
        self.s9 = 0;
    8001218a:	eda8                	sd	a0,88(a1)
        self.s10 = 0;
    8001218c:	f1a8                	sd	a0,96(a1)
        self.s11 = 0;
    8001218e:	f5a8                	sd	a0,104(a1)
    }
    80012190:	0141                	addi	sp,sp,16
    80012192:	8082                	ret

Disassembly of section .text._ZN6kernel7process7context7Context8write_ra17h453112740fa52877E:

0000000080012194 <_ZN6kernel7process7context7Context8write_ra17h453112740fa52877E>:

    pub fn write_ra(&mut self, ra: usize) {
    80012194:	1141                	addi	sp,sp,-16
    80012196:	e02a                	sd	a0,0(sp)
    80012198:	e42e                	sd	a1,8(sp)
        self.ra = ra;
    8001219a:	e10c                	sd	a1,0(a0)
    }
    8001219c:	0141                	addi	sp,sp,16
    8001219e:	8082                	ret

Disassembly of section .text._ZN6kernel7process7context7Context8write_sp17h0ed724aed1960a6aE:

00000000800121a0 <_ZN6kernel7process7context7Context8write_sp17h0ed724aed1960a6aE>:

    pub fn write_sp(&mut self, sp: usize) {
    800121a0:	1141                	addi	sp,sp,-16
    800121a2:	e02a                	sd	a0,0(sp)
    800121a4:	e42e                	sd	a1,8(sp)
        self.sp = sp;
    800121a6:	e50c                	sd	a1,8(a0)
    }
    800121a8:	0141                	addi	sp,sp,16
    800121aa:	8082                	ret

Disassembly of section .text._ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_fork17h5c4cdf045541cf30E:

00000000800121ac <_ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_fork17h5c4cdf045541cf30E>:
use crate::trap::TICKS_LOCK;
use super::*;

impl Syscall<'_> {
    pub fn sys_fork(&mut self) -> SysResult {
    800121ac:	711d                	addi	sp,sp,-96
    800121ae:	ec86                	sd	ra,88(sp)
    800121b0:	f82a                	sd	a0,48(sp)
       
        let child_proc = self.process.fork().ok_or(())?;
    800121b2:	6108                	ld	a0,0(a0)
    800121b4:	00004097          	auipc	ra,0x4
    800121b8:	02a080e7          	jalr	42(ra) # 800161de <_ZN6kernel7process7process11task_struct4fork17h46aa3163aa049020E>
    800121bc:	e82a                	sd	a0,16(sp)
    800121be:	a009                	j	800121c0 <_ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_fork17h5c4cdf045541cf30E+0x14>
    800121c0:	6542                	ld	a0,16(sp)
    800121c2:	ffffc097          	auipc	ra,0xffffc
    800121c6:	53e080e7          	jalr	1342(ra) # 8000e700 <_ZN4core6option15Option$LT$T$GT$5ok_or17h693a281cfb0e5e0dE>
    800121ca:	e42a                	sd	a0,8(sp)
    800121cc:	a009                	j	800121ce <_ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_fork17h5c4cdf045541cf30E+0x22>
    800121ce:	6522                	ld	a0,8(sp)
    800121d0:	ffffb097          	auipc	ra,0xffffb
    800121d4:	fa2080e7          	jalr	-94(ra) # 8000d172 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hcbbb135f4988ea23E>
    800121d8:	f42a                	sd	a0,40(sp)
    800121da:	a009                	j	800121dc <_ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_fork17h5c4cdf045541cf30E+0x30>
    800121dc:	7522                	ld	a0,40(sp)
    800121de:	00153593          	seqz	a1,a0
    800121e2:	4581                	li	a1,0
    800121e4:	00b51463          	bne	a0,a1,800121ec <_ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_fork17h5c4cdf045541cf30E+0x40>
    800121e8:	a009                	j	800121ea <_ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_fork17h5c4cdf045541cf30E+0x3e>
    800121ea:	a821                	j	80012202 <_ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_fork17h5c4cdf045541cf30E+0x56>
    800121ec:	7522                	ld	a0,40(sp)
    800121ee:	e0aa                	sd	a0,64(sp)
    800121f0:	e4aa                	sd	a0,72(sp)
       
        let pid = child_proc.pid;
    800121f2:	3f053503          	ld	a0,1008(a0)
    800121f6:	e8aa                	sd	a0,80(sp)
       
        Ok(pid)
    800121f8:	f02a                	sd	a0,32(sp)
    800121fa:	4501                	li	a0,0
    800121fc:	ec2a                	sd	a0,24(sp)
    }
    800121fe:	a831                	j	8001221a <_ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_fork17h5c4cdf045541cf30E+0x6e>
        let child_proc = self.process.fork().ok_or(())?;
    80012200:	0000                	unimp
    80012202:	ffff9097          	auipc	ra,0xffff9
    80012206:	7bc080e7          	jalr	1980(ra) # 8000b9be <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h2e645b443ebf2dc7E>
    8001220a:	a009                	j	8001220c <_ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_fork17h5c4cdf045541cf30E+0x60>
    8001220c:	ffffb097          	auipc	ra,0xffffb
    80012210:	e34080e7          	jalr	-460(ra) # 8000d040 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h74072cf57097ff24E>
    80012214:	ec2a                	sd	a0,24(sp)
    80012216:	f02e                	sd	a1,32(sp)
    80012218:	a009                	j	8001221a <_ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_fork17h5c4cdf045541cf30E+0x6e>
    }
    8001221a:	6562                	ld	a0,24(sp)
    8001221c:	7582                	ld	a1,32(sp)
    8001221e:	60e6                	ld	ra,88(sp)
    80012220:	6125                	addi	sp,sp,96
    80012222:	8082                	ret

Disassembly of section .text._ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$9sys_clone17h33021d255812765cE:

0000000080012224 <_ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$9sys_clone17h33021d255812765cE>:

    pub fn sys_clone(&mut self) -> SysResult {
    80012224:	711d                	addi	sp,sp,-96
    80012226:	ec86                	sd	ra,88(sp)
    80012228:	ec2a                	sd	a0,24(sp)
    8001222a:	fc2a                	sd	a0,56(sp)
    8001222c:	4581                	li	a1,0
        let func = self.arg(0);
    8001222e:	00003097          	auipc	ra,0x3
    80012232:	bb2080e7          	jalr	-1102(ra) # 80014de0 <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    80012236:	85aa                	mv	a1,a0
    80012238:	f02e                	sd	a1,32(sp)
    8001223a:	e0aa                	sd	a0,64(sp)
    8001223c:	a009                	j	8001223e <_ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$9sys_clone17h33021d255812765cE+0x1a>
       
        let ustack = self.arg(1);
    8001223e:	6562                	ld	a0,24(sp)
    80012240:	4585                	li	a1,1
    80012242:	00003097          	auipc	ra,0x3
    80012246:	b9e080e7          	jalr	-1122(ra) # 80014de0 <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    8001224a:	85aa                	mv	a1,a0
    8001224c:	e82e                	sd	a1,16(sp)
    8001224e:	e4aa                	sd	a0,72(sp)
    80012250:	a009                	j	80012252 <_ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$9sys_clone17h33021d255812765cE+0x2e>

        let ret = self.process.threadclone(func, ustack);
    80012252:	6642                	ld	a2,16(sp)
    80012254:	7582                	ld	a1,32(sp)
    80012256:	6562                	ld	a0,24(sp)
    80012258:	6108                	ld	a0,0(a0)
    8001225a:	00004097          	auipc	ra,0x4
    8001225e:	220080e7          	jalr	544(ra) # 8001647a <_ZN6kernel7process6thread55_$LT$impl$u20$kernel..process..process..task_struct$GT$11threadclone17h0da9ae13d0d85d5bE>
    80012262:	85aa                	mv	a1,a0
    80012264:	e42e                	sd	a1,8(sp)
    80012266:	e8aa                	sd	a0,80(sp)
    80012268:	a009                	j	8001226a <_ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$9sys_clone17h33021d255812765cE+0x46>

        // let task = unsafe { CPU_MANAGER.myproc().unwrap() };
        // let tf = unsafe { &mut *task.trapframe } ;
        // println!("In sys_clone, pid {} epc {}", task.pid, tf.epc);
        Ok(ret)
    8001226a:	65a2                	ld	a1,8(sp)
    8001226c:	f82e                	sd	a1,48(sp)
    8001226e:	4501                	li	a0,0
    80012270:	f42a                	sd	a0,40(sp)
    }
    80012272:	60e6                	ld	ra,88(sp)
    80012274:	6125                	addi	sp,sp,96
    80012276:	8082                	ret

Disassembly of section .text._ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_exit17hae1a7a01ef6f0180E:

0000000080012278 <_ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_exit17hae1a7a01ef6f0180E>:

    pub fn sys_exit(&self) -> SysResult {
    80012278:	1101                	addi	sp,sp,-32
    8001227a:	ec06                	sd	ra,24(sp)
    8001227c:	e42a                	sd	a0,8(sp)
    8001227e:	4581                	li	a1,0
        let status = self.arg(0);
    80012280:	00003097          	auipc	ra,0x3
    80012284:	b60080e7          	jalr	-1184(ra) # 80014de0 <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    80012288:	85aa                	mv	a1,a0
    8001228a:	e02e                	sd	a1,0(sp)
    8001228c:	e82a                	sd	a0,16(sp)
    8001228e:	a009                	j	80012290 <_ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_exit17hae1a7a01ef6f0180E+0x18>
        unsafe {
            PROC_MANAGER.exit(status)
    80012290:	6582                	ld	a1,0(sp)

0000000080012292 <.LBB2_2>:
    80012292:	00045517          	auipc	a0,0x45
    80012296:	30e50513          	addi	a0,a0,782 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    8001229a:	ffffb097          	auipc	ra,0xffffb
    8001229e:	73e080e7          	jalr	1854(ra) # 8000d9d8 <_ZN6kernel7process7manager11ProcManager4exit17hfa49a8445fc58f81E>
	...

Disassembly of section .text._ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_wait17h7b4815682cca4a8dE:

00000000800122a4 <_ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_wait17h7b4815682cca4a8dE>:
        }
    }

    pub fn sys_wait(&self) -> SysResult {
    800122a4:	715d                	addi	sp,sp,-80
    800122a6:	e486                	sd	ra,72(sp)
    800122a8:	f82a                	sd	a0,48(sp)
    800122aa:	4581                	li	a1,0
        let addr = self.arg(0);
    800122ac:	00003097          	auipc	ra,0x3
    800122b0:	b34080e7          	jalr	-1228(ra) # 80014de0 <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    800122b4:	85aa                	mv	a1,a0
    800122b6:	e42e                	sd	a1,8(sp)
    800122b8:	fc2a                	sd	a0,56(sp)
    800122ba:	a009                	j	800122bc <_ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_wait17h7b4815682cca4a8dE+0x18>
        match unsafe {
            PROC_MANAGER.wait(addr)
    800122bc:	65a2                	ld	a1,8(sp)

00000000800122be <.LBB3_8>:
    800122be:	00045517          	auipc	a0,0x45
    800122c2:	2e250513          	addi	a0,a0,738 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    800122c6:	ffffc097          	auipc	ra,0xffffc
    800122ca:	970080e7          	jalr	-1680(ra) # 8000dc36 <_ZN6kernel7process7manager11ProcManager4wait17h7c4c80095cf78f04E>
    800122ce:	f02a                	sd	a0,32(sp)
    800122d0:	f42e                	sd	a1,40(sp)
    800122d2:	a009                	j	800122d4 <.LBB3_8+0x16>
        } {
            Some(pid) => {
    800122d4:	7502                	ld	a0,32(sp)
    800122d6:	4581                	li	a1,0
    800122d8:	00b50463          	beq	a0,a1,800122e0 <.LBB3_8+0x22>
    800122dc:	a009                	j	800122de <.LBB3_8+0x20>
    800122de:	a029                	j	800122e8 <.LBB3_8+0x2a>
    800122e0:	4505                	li	a0,1
                Ok(pid)
            },
    
            None => {
                Err(())
    800122e2:	e82a                	sd	a0,16(sp)
        match unsafe {
    800122e4:	a801                	j	800122f4 <.LBB3_8+0x36>
    800122e6:	0000                	unimp
            Some(pid) => {
    800122e8:	7522                	ld	a0,40(sp)
    800122ea:	e0aa                	sd	a0,64(sp)
                Ok(pid)
    800122ec:	ec2a                	sd	a0,24(sp)
    800122ee:	4501                	li	a0,0
    800122f0:	e82a                	sd	a0,16(sp)
        match unsafe {
    800122f2:	a009                	j	800122f4 <.LBB3_8+0x36>
            }
        }
    }
    800122f4:	6542                	ld	a0,16(sp)
    800122f6:	65e2                	ld	a1,24(sp)
    800122f8:	60a6                	ld	ra,72(sp)
    800122fa:	6161                	addi	sp,sp,80
    800122fc:	8082                	ret

Disassembly of section .text._ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_join17hcdda9ca2f2e537bbE:

00000000800122fe <_ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_join17hcdda9ca2f2e537bbE>:

    pub fn sys_join(&self) -> SysResult {
    800122fe:	715d                	addi	sp,sp,-80
    80012300:	e486                	sd	ra,72(sp)
    80012302:	f82a                	sd	a0,48(sp)
    80012304:	4581                	li	a1,0
        let ustack_addr = self.arg(0);
    80012306:	00003097          	auipc	ra,0x3
    8001230a:	ada080e7          	jalr	-1318(ra) # 80014de0 <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    8001230e:	85aa                	mv	a1,a0
    80012310:	e42e                	sd	a1,8(sp)
    80012312:	fc2a                	sd	a0,56(sp)
    80012314:	a009                	j	80012316 <_ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_join17hcdda9ca2f2e537bbE+0x18>
        match unsafe {
            PROC_MANAGER.join(ustack_addr)
    80012316:	65a2                	ld	a1,8(sp)

0000000080012318 <.LBB4_8>:
    80012318:	00045517          	auipc	a0,0x45
    8001231c:	28850513          	addi	a0,a0,648 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    80012320:	ffffc097          	auipc	ra,0xffffc
    80012324:	baa080e7          	jalr	-1110(ra) # 8000deca <_ZN6kernel7process7manager11ProcManager4join17h0acabc4ce5dd65bdE>
    80012328:	f02a                	sd	a0,32(sp)
    8001232a:	f42e                	sd	a1,40(sp)
    8001232c:	a009                	j	8001232e <.LBB4_8+0x16>
        } {
            Some(ret) => {
    8001232e:	7502                	ld	a0,32(sp)
    80012330:	4581                	li	a1,0
    80012332:	00b50463          	beq	a0,a1,8001233a <.LBB4_8+0x22>
    80012336:	a009                	j	80012338 <.LBB4_8+0x20>
    80012338:	a029                	j	80012342 <.LBB4_8+0x2a>
    8001233a:	4505                	li	a0,1
                Ok(ret)
            },
    
            None => {
                Err(())
    8001233c:	e82a                	sd	a0,16(sp)
        match unsafe {
    8001233e:	a801                	j	8001234e <.LBB4_8+0x36>
    80012340:	0000                	unimp
            Some(ret) => {
    80012342:	7522                	ld	a0,40(sp)
    80012344:	e0aa                	sd	a0,64(sp)
                Ok(ret)
    80012346:	ec2a                	sd	a0,24(sp)
    80012348:	4501                	li	a0,0
    8001234a:	e82a                	sd	a0,16(sp)
        match unsafe {
    8001234c:	a009                	j	8001234e <.LBB4_8+0x36>
            }
        }
    }
    8001234e:	6542                	ld	a0,16(sp)
    80012350:	65e2                	ld	a1,24(sp)
    80012352:	60a6                	ld	ra,72(sp)
    80012354:	6161                	addi	sp,sp,80
    80012356:	8082                	ret

Disassembly of section .text._ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_sbrk17h620cfc1119b978cdE:

0000000080012358 <_ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_sbrk17h620cfc1119b978cdE>:

        Ok(pid)
    }
    
    
    pub fn sys_sbrk(&mut self) -> SysResult {
    80012358:	7155                	addi	sp,sp,-208
    8001235a:	e586                	sd	ra,200(sp)
    8001235c:	ec2a                	sd	a0,24(sp)
    8001235e:	f12a                	sd	a0,160(sp)
    80012360:	4581                	li	a1,0
        let size = self.arg(0);
    80012362:	00003097          	auipc	ra,0x3
    80012366:	a7e080e7          	jalr	-1410(ra) # 80014de0 <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    8001236a:	85aa                	mv	a1,a0
    8001236c:	f02e                	sd	a1,32(sp)
    8001236e:	f52a                	sd	a0,168(sp)
    80012370:	a009                	j	80012372 <_ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_sbrk17h620cfc1119b978cdE+0x1a>

        let task = unsafe{ &*self.process };
    80012372:	7582                	ld	a1,32(sp)
    80012374:	6562                	ld	a0,24(sp)
    80012376:	6110                	ld	a2,0(a0)
    80012378:	f932                	sd	a2,176(sp)
        let addr = task.size;
    8001237a:	6a10                	ld	a2,16(a2)
    8001237c:	e832                	sd	a2,16(sp)
    8001237e:	fd32                	sd	a2,184(sp)
     
        match self.process.grow_proc(size as isize) {
    80012380:	6108                	ld	a0,0(a0)
    80012382:	00004097          	auipc	ra,0x4
    80012386:	c18080e7          	jalr	-1000(ra) # 80015f9a <_ZN6kernel7process7process11task_struct9grow_proc17h401c24eda5b4fae0E>
    8001238a:	fc2a                	sd	a0,56(sp)
    8001238c:	e0ae                	sd	a1,64(sp)
    8001238e:	a009                	j	80012390 <_ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_sbrk17h620cfc1119b978cdE+0x38>
            Ok(()) => {
    80012390:	7562                	ld	a0,56(sp)
    80012392:	00a035b3          	snez	a1,a0
    80012396:	4581                	li	a1,0
    80012398:	02b50663          	beq	a0,a1,800123c4 <.LBB5_9+0x18>
    8001239c:	a009                	j	8001239e <_ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_sbrk17h620cfc1119b978cdE+0x46>
                return Ok(addr)
            }
    
            Err(err) => {
    8001239e:	75e2                	ld	a1,56(sp)
    800123a0:	6506                	ld	a0,64(sp)
    800123a2:	e4ae                	sd	a1,72(sp)
    800123a4:	e8aa                	sd	a0,80(sp)
    800123a6:	00a8                	addi	a0,sp,72
                panic!("err: {:?}", err);
    800123a8:	ed2a                	sd	a0,152(sp)
    800123aa:	e1aa                	sd	a0,192(sp)

00000000800123ac <.LBB5_9>:
    800123ac:	0000c597          	auipc	a1,0xc
    800123b0:	02a58593          	addi	a1,a1,42 # 8001e3d6 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8e05789f6aa15028E>
    800123b4:	0000c097          	auipc	ra,0xc
    800123b8:	088080e7          	jalr	136(ra) # 8001e43c <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>
    800123bc:	e02a                	sd	a0,0(sp)
    800123be:	e42e                	sd	a1,8(sp)
    800123c0:	a809                	j	800123d2 <.LBB5_9+0x26>
        match self.process.grow_proc(size as isize) {
    800123c2:	0000                	unimp
                return Ok(addr)
    800123c4:	65c2                	ld	a1,16(sp)
    800123c6:	f82e                	sd	a1,48(sp)
    800123c8:	4501                	li	a0,0
    800123ca:	f42a                	sd	a0,40(sp)
            }
        }
    }
    800123cc:	60ae                	ld	ra,200(sp)
    800123ce:	6169                	addi	sp,sp,208
    800123d0:	8082                	ret
                panic!("err: {:?}", err);
    800123d2:	6522                	ld	a0,8(sp)
    800123d4:	6582                	ld	a1,0(sp)
    800123d6:	e52e                	sd	a1,136(sp)
    800123d8:	e92a                	sd	a0,144(sp)

00000000800123da <.LBB5_10>:
    800123da:	00017597          	auipc	a1,0x17
    800123de:	d9658593          	addi	a1,a1,-618 # 80029170 <.L__unnamed_1>
    800123e2:	08a8                	addi	a0,sp,88
    800123e4:	0134                	addi	a3,sp,136
    800123e6:	4705                	li	a4,1
    800123e8:	863a                	mv	a2,a4
    800123ea:	ffff3097          	auipc	ra,0xffff3
    800123ee:	04a080e7          	jalr	74(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    800123f2:	a009                	j	800123f4 <.LBB5_11>

00000000800123f4 <.LBB5_11>:
    800123f4:	00017597          	auipc	a1,0x17
    800123f8:	da458593          	addi	a1,a1,-604 # 80029198 <.L__unnamed_2>
    800123fc:	08a8                	addi	a0,sp,88
    800123fe:	00010097          	auipc	ra,0x10
    80012402:	d6a080e7          	jalr	-662(ra) # 80022168 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
	...

Disassembly of section .text._ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$7sys_dup17h638e7e7819355743E:

0000000080012408 <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$7sys_dup17h638e7e7819355743E>:
    pub fn sys_dup(&self) -> SysResult {
    80012408:	7135                	addi	sp,sp,-160
    8001240a:	ed06                	sd	ra,152(sp)
    8001240c:	f8aa                	sd	a0,112(sp)
    8001240e:	4581                	li	a1,0
        let old_fd = self.arg(0);
    80012410:	00003097          	auipc	ra,0x3
    80012414:	9d0080e7          	jalr	-1584(ra) # 80014de0 <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    80012418:	85aa                	mv	a1,a0
    8001241a:	f82e                	sd	a1,48(sp)
    8001241c:	fcaa                	sd	a0,120(sp)
    8001241e:	a009                	j	80012420 <.LBB6_16>

0000000080012420 <.LBB6_16>:
        let curtask = unsafe { CPU_MANAGER.myproc().unwrap() };
    80012420:	00052517          	auipc	a0,0x52
    80012424:	d2050513          	addi	a0,a0,-736 # 80064140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    80012428:	fffff097          	auipc	ra,0xfffff
    8001242c:	602080e7          	jalr	1538(ra) # 80011a2a <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    80012430:	f42a                	sd	a0,40(sp)
    80012432:	a009                	j	80012434 <.LBB6_16+0x14>
    80012434:	7522                	ld	a0,40(sp)

0000000080012436 <.LBB6_17>:
    80012436:	00017597          	auipc	a1,0x17
    8001243a:	d9258593          	addi	a1,a1,-622 # 800291c8 <.L__unnamed_3>
    8001243e:	ffffd097          	auipc	ra,0xffffd
    80012442:	87e080e7          	jalr	-1922(ra) # 8000ecbc <_ZN4core6option15Option$LT$T$GT$6unwrap17h81f0c84c54a80648E>
    80012446:	f02a                	sd	a0,32(sp)
    80012448:	a009                	j	8001244a <.LBB6_17+0x14>
    8001244a:	75c2                	ld	a1,48(sp)
    8001244c:	7502                	ld	a0,32(sp)
    8001244e:	e12a                	sd	a0,128(sp)
    80012450:	06300513          	li	a0,99
        let file = curtask.open_files[old_fd].as_ref().unwrap();
    80012454:	0cb56263          	bltu	a0,a1,80012518 <.LBB6_20+0x6c>
    80012458:	a009                	j	8001245a <.LBB6_17+0x24>
    8001245a:	7502                	ld	a0,32(sp)
    8001245c:	75c2                	ld	a1,48(sp)
    8001245e:	058e                	slli	a1,a1,0x3
    80012460:	952e                	add	a0,a0,a1
    80012462:	0a850513          	addi	a0,a0,168
    80012466:	ffffc097          	auipc	ra,0xffffc
    8001246a:	516080e7          	jalr	1302(ra) # 8000e97c <_ZN4core6option15Option$LT$T$GT$6as_ref17h0cd8921964ab0966E>
    8001246e:	ec2a                	sd	a0,24(sp)
    80012470:	a009                	j	80012472 <.LBB6_17+0x3c>
    80012472:	6562                	ld	a0,24(sp)

0000000080012474 <.LBB6_18>:
    80012474:	00017597          	auipc	a1,0x17
    80012478:	d8458593          	addi	a1,a1,-636 # 800291f8 <.L__unnamed_4>
    8001247c:	ffffd097          	auipc	ra,0xffffd
    80012480:	876080e7          	jalr	-1930(ra) # 8000ecf2 <_ZN4core6option15Option$LT$T$GT$6unwrap17h84dba6f31c77e511E>
    80012484:	e4aa                	sd	a0,72(sp)
    80012486:	a009                	j	80012488 <.LBB6_18+0x14>
        let new_fd = unsafe{ CPU_MANAGER.alloc_fd(&file) }.unwrap();
    80012488:	6526                	ld	a0,72(sp)
    8001248a:	ffff0097          	auipc	ra,0xffff0
    8001248e:	140080e7          	jalr	320(ra) # 800025ca <_ZN69_$LT$alloc..sync..Arc$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h7c280ba665690166E>
    80012492:	e82a                	sd	a0,16(sp)
    80012494:	a009                	j	80012496 <.LBB6_18+0x22>
    80012496:	6642                	ld	a2,16(sp)

0000000080012498 <.LBB6_19>:
    80012498:	00052597          	auipc	a1,0x52
    8001249c:	ca858593          	addi	a1,a1,-856 # 80064140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    800124a0:	0888                	addi	a0,sp,80
    800124a2:	fffff097          	auipc	ra,0xfffff
    800124a6:	706080e7          	jalr	1798(ra) # 80011ba8 <_ZN6kernel7process3cpu10CPUManager8alloc_fd17h6273585a0cf04a04E>
    800124aa:	a009                	j	800124ac <.LBB6_20>

00000000800124ac <.LBB6_20>:
    800124ac:	00017597          	auipc	a1,0x17
    800124b0:	d6458593          	addi	a1,a1,-668 # 80029210 <.L__unnamed_5>
    800124b4:	0888                	addi	a0,sp,80
    800124b6:	ffffb097          	auipc	ra,0xffffb
    800124ba:	942080e7          	jalr	-1726(ra) # 8000cdf8 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h6115c21749654733E>
    800124be:	85aa                	mv	a1,a0
    800124c0:	e42e                	sd	a1,8(sp)
    800124c2:	e52a                	sd	a0,136(sp)
    800124c4:	a009                	j	800124c6 <.LBB6_20+0x1a>
        let new_file = Arc::clone(&file);
    800124c6:	6526                	ld	a0,72(sp)
    800124c8:	ffff0097          	auipc	ra,0xffff0
    800124cc:	0ae080e7          	jalr	174(ra) # 80002576 <_ZN64_$LT$alloc..sync..Arc$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hd600a08a186c4518E>
    800124d0:	85aa                	mv	a1,a0
    800124d2:	e02e                	sd	a1,0(sp)
    800124d4:	e92a                	sd	a0,144(sp)
    800124d6:	a009                	j	800124d8 <.LBB6_20+0x2c>
    800124d8:	65a2                	ld	a1,8(sp)
    800124da:	06300513          	li	a0,99
        curtask.open_files[new_fd].replace(new_file);
    800124de:	04b56963          	bltu	a0,a1,80012530 <.LBB6_21+0x16>
    800124e2:	a009                	j	800124e4 <.LBB6_20+0x38>
    800124e4:	6582                	ld	a1,0(sp)
    800124e6:	7502                	ld	a0,32(sp)
    800124e8:	6622                	ld	a2,8(sp)
    800124ea:	060e                	slli	a2,a2,0x3
    800124ec:	9532                	add	a0,a0,a2
    800124ee:	0a850513          	addi	a0,a0,168
    800124f2:	ffffd097          	auipc	ra,0xffffd
    800124f6:	a96080e7          	jalr	-1386(ra) # 8000ef88 <_ZN4core6option15Option$LT$T$GT$7replace17hf852e6bb4a32ec9aE>
    800124fa:	f4aa                	sd	a0,104(sp)
    800124fc:	a009                	j	800124fe <.LBB6_20+0x52>
    800124fe:	10a8                	addi	a0,sp,104
    80012500:	ffff5097          	auipc	ra,0xffff5
    80012504:	b8a080e7          	jalr	-1142(ra) # 8000708a <_ZN4core3ptr96drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$$GT$17hc79d9c89cd1d7f36E>
    80012508:	a009                	j	8001250a <.LBB6_20+0x5e>
        Ok(new_fd)
    8001250a:	65a2                	ld	a1,8(sp)
    8001250c:	e0ae                	sd	a1,64(sp)
    8001250e:	4501                	li	a0,0
    80012510:	fc2a                	sd	a0,56(sp)
    }
    80012512:	60ea                	ld	ra,152(sp)
    80012514:	610d                	addi	sp,sp,160
    80012516:	8082                	ret
        let file = curtask.open_files[old_fd].as_ref().unwrap();
    80012518:	7542                	ld	a0,48(sp)

000000008001251a <.LBB6_21>:
    8001251a:	00017617          	auipc	a2,0x17
    8001251e:	cc660613          	addi	a2,a2,-826 # 800291e0 <.L__unnamed_6>
    80012522:	06400593          	li	a1,100
    80012526:	00010097          	auipc	ra,0x10
    8001252a:	c02080e7          	jalr	-1022(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    8001252e:	0000                	unimp
        curtask.open_files[new_fd].replace(new_file);
    80012530:	6522                	ld	a0,8(sp)

0000000080012532 <.LBB6_22>:
    80012532:	00017617          	auipc	a2,0x17
    80012536:	cf660613          	addi	a2,a2,-778 # 80029228 <.L__unnamed_7>
    8001253a:	06400593          	li	a1,100
    8001253e:	00010097          	auipc	ra,0x10
    80012542:	bea080e7          	jalr	-1046(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_read17hd83bd4f92523a35cE:

0000000080012548 <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_read17hd83bd4f92523a35cE>:
    pub fn sys_read(&self) -> SysResult {
    80012548:	7169                	addi	sp,sp,-304
    8001254a:	f606                	sd	ra,296(sp)
    8001254c:	e8aa                	sd	a0,80(sp)
    8001254e:	f1aa                	sd	a0,224(sp)
    80012550:	4581                	li	a1,0
        let fd = self.arg(0);
    80012552:	00003097          	auipc	ra,0x3
    80012556:	88e080e7          	jalr	-1906(ra) # 80014de0 <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    8001255a:	85aa                	mv	a1,a0
    8001255c:	ecae                	sd	a1,88(sp)
    8001255e:	f5aa                	sd	a0,232(sp)
    80012560:	a009                	j	80012562 <.LBB7_20>

0000000080012562 <.LBB7_20>:
        let task = unsafe { CPU_MANAGER.myproc().unwrap() };
    80012562:	00052517          	auipc	a0,0x52
    80012566:	bde50513          	addi	a0,a0,-1058 # 80064140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    8001256a:	fffff097          	auipc	ra,0xfffff
    8001256e:	4c0080e7          	jalr	1216(ra) # 80011a2a <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    80012572:	e4aa                	sd	a0,72(sp)
    80012574:	a009                	j	80012576 <.LBB7_20+0x14>
    80012576:	6526                	ld	a0,72(sp)

0000000080012578 <.LBB7_21>:
    80012578:	00017597          	auipc	a1,0x17
    8001257c:	cc858593          	addi	a1,a1,-824 # 80029240 <.L__unnamed_8>
    80012580:	ffffc097          	auipc	ra,0xffffc
    80012584:	73c080e7          	jalr	1852(ra) # 8000ecbc <_ZN4core6option15Option$LT$T$GT$6unwrap17h81f0c84c54a80648E>
    80012588:	e0aa                	sd	a0,64(sp)
    8001258a:	a009                	j	8001258c <.LBB7_21+0x14>
    8001258c:	65e6                	ld	a1,88(sp)
    8001258e:	6506                	ld	a0,64(sp)
    80012590:	f9aa                	sd	a0,240(sp)
    80012592:	06300513          	li	a0,99
        let file = task.open_files[fd].as_ref().unwrap();
    80012596:	0eb56e63          	bltu	a0,a1,80012692 <.LBB7_24+0x36>
    8001259a:	a009                	j	8001259c <.LBB7_21+0x24>
    8001259c:	6506                	ld	a0,64(sp)
    8001259e:	65e6                	ld	a1,88(sp)
    800125a0:	058e                	slli	a1,a1,0x3
    800125a2:	952e                	add	a0,a0,a1
    800125a4:	0a850513          	addi	a0,a0,168
    800125a8:	ffffc097          	auipc	ra,0xffffc
    800125ac:	3d4080e7          	jalr	980(ra) # 8000e97c <_ZN4core6option15Option$LT$T$GT$6as_ref17h0cd8921964ab0966E>
    800125b0:	fc2a                	sd	a0,56(sp)
    800125b2:	a009                	j	800125b4 <.LBB7_21+0x3c>
    800125b4:	7562                	ld	a0,56(sp)

00000000800125b6 <.LBB7_22>:
    800125b6:	00017597          	auipc	a1,0x17
    800125ba:	cba58593          	addi	a1,a1,-838 # 80029270 <.L__unnamed_9>
    800125be:	ffffc097          	auipc	ra,0xffffc
    800125c2:	734080e7          	jalr	1844(ra) # 8000ecf2 <_ZN4core6option15Option$LT$T$GT$6unwrap17h84dba6f31c77e511E>
    800125c6:	85aa                	mv	a1,a0
    800125c8:	f82e                	sd	a1,48(sp)
    800125ca:	fdaa                	sd	a0,248(sp)
    800125cc:	a009                	j	800125ce <.LBB7_22+0x18>
        let ptr = self.arg(1);
    800125ce:	6546                	ld	a0,80(sp)
    800125d0:	4585                	li	a1,1
    800125d2:	00003097          	auipc	ra,0x3
    800125d6:	80e080e7          	jalr	-2034(ra) # 80014de0 <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    800125da:	85aa                	mv	a1,a0
    800125dc:	f42e                	sd	a1,40(sp)
    800125de:	e22a                	sd	a0,256(sp)
    800125e0:	a009                	j	800125e2 <.LBB7_22+0x2c>
        let len = self.arg(2);
    800125e2:	6546                	ld	a0,80(sp)
    800125e4:	4589                	li	a1,2
    800125e6:	00002097          	auipc	ra,0x2
    800125ea:	7fa080e7          	jalr	2042(ra) # 80014de0 <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    800125ee:	85aa                	mv	a1,a0
    800125f0:	f02e                	sd	a1,32(sp)
    800125f2:	e62a                	sd	a0,264(sp)
    800125f4:	a009                	j	800125f6 <.LBB7_22+0x40>
        match file.read(ptr, len) {
    800125f6:	7542                	ld	a0,48(sp)
    800125f8:	ffff0097          	auipc	ra,0xffff0
    800125fc:	fd2080e7          	jalr	-46(ra) # 800025ca <_ZN69_$LT$alloc..sync..Arc$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h7c280ba665690166E>
    80012600:	ec2a                	sd	a0,24(sp)
    80012602:	a009                	j	80012604 <.LBB7_22+0x4e>
    80012604:	7682                	ld	a3,32(sp)
    80012606:	7622                	ld	a2,40(sp)
    80012608:	65e2                	ld	a1,24(sp)
    8001260a:	1888                	addi	a0,sp,112
    8001260c:	ffff3097          	auipc	ra,0xffff3
    80012610:	0f8080e7          	jalr	248(ra) # 80005704 <_ZN6kernel2fs4file5VFile4read17h537db93950e2de6aE>
    80012614:	a009                	j	80012616 <.LBB7_22+0x60>
            Ok(cur_size) => {
    80012616:	7546                	ld	a0,112(sp)
    80012618:	4581                	li	a1,0
    8001261a:	02b50663          	beq	a0,a1,80012646 <.LBB7_23+0x18>
    8001261e:	a009                	j	80012620 <.LBB7_22+0x6a>
            Err(err) => {
    80012620:	75e6                	ld	a1,120(sp)
    80012622:	650a                	ld	a0,128(sp)
    80012624:	e52e                	sd	a1,136(sp)
    80012626:	e92a                	sd	a0,144(sp)
    80012628:	0128                	addi	a0,sp,136
                println!("[kernel] sys_read: err: {}", err);
    8001262a:	edaa                	sd	a0,216(sp)
    8001262c:	ea2a                	sd	a0,272(sp)

000000008001262e <.LBB7_23>:
    8001262e:	0000c597          	auipc	a1,0xc
    80012632:	dea58593          	addi	a1,a1,-534 # 8001e418 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E>
    80012636:	0000c097          	auipc	ra,0xc
    8001263a:	e06080e7          	jalr	-506(ra) # 8001e43c <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>
    8001263e:	e42a                	sd	a0,8(sp)
    80012640:	e82e                	sd	a1,16(sp)
    80012642:	a809                	j	80012654 <.LBB7_23+0x26>
        match file.read(ptr, len) {
    80012644:	0000                	unimp
            Ok(cur_size) => {
    80012646:	7566                	ld	a0,120(sp)
    80012648:	ee2a                	sd	a0,280(sp)
                size = cur_size;
    8001264a:	f22a                	sd	a0,288(sp)
        Ok(size)
    8001264c:	f4aa                	sd	a0,104(sp)
    8001264e:	4501                	li	a0,0
    80012650:	f0aa                	sd	a0,96(sp)
    }
    80012652:	a81d                	j	80012688 <.LBB7_24+0x2c>
                println!("[kernel] sys_read: err: {}", err);
    80012654:	6542                	ld	a0,16(sp)
    80012656:	65a2                	ld	a1,8(sp)
    80012658:	e5ae                	sd	a1,200(sp)
    8001265a:	e9aa                	sd	a0,208(sp)

000000008001265c <.LBB7_24>:
    8001265c:	00017597          	auipc	a1,0x17
    80012660:	c4c58593          	addi	a1,a1,-948 # 800292a8 <.L__unnamed_10>
    80012664:	0928                	addi	a0,sp,152
    80012666:	4609                	li	a2,2
    80012668:	01b4                	addi	a3,sp,200
    8001266a:	4705                	li	a4,1
    8001266c:	ffff3097          	auipc	ra,0xffff3
    80012670:	dc8080e7          	jalr	-568(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80012674:	a009                	j	80012676 <.LBB7_24+0x1a>
    80012676:	0928                	addi	a0,sp,152
    80012678:	0000b097          	auipc	ra,0xb
    8001267c:	538080e7          	jalr	1336(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    80012680:	a009                	j	80012682 <.LBB7_24+0x26>
    80012682:	4505                	li	a0,1
                return Err(())
    80012684:	f0aa                	sd	a0,96(sp)
    }
    80012686:	a009                	j	80012688 <.LBB7_24+0x2c>
    80012688:	7506                	ld	a0,96(sp)
    8001268a:	75a6                	ld	a1,104(sp)
    8001268c:	70b2                	ld	ra,296(sp)
    8001268e:	6155                	addi	sp,sp,304
    80012690:	8082                	ret
        let file = task.open_files[fd].as_ref().unwrap();
    80012692:	6566                	ld	a0,88(sp)

0000000080012694 <.LBB7_25>:
    80012694:	00017617          	auipc	a2,0x17
    80012698:	bc460613          	addi	a2,a2,-1084 # 80029258 <.L__unnamed_11>
    8001269c:	06400593          	li	a1,100
    800126a0:	00010097          	auipc	ra,0x10
    800126a4:	a88080e7          	jalr	-1400(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$9sys_write17hc5a72fe3cb6d9324E:

00000000800126aa <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$9sys_write17hc5a72fe3cb6d9324E>:
    pub fn sys_write(&self) -> SysResult {
    800126aa:	7169                	addi	sp,sp,-304
    800126ac:	f606                	sd	ra,296(sp)
    800126ae:	e8aa                	sd	a0,80(sp)
    800126b0:	f1aa                	sd	a0,224(sp)
    800126b2:	4581                	li	a1,0
        let fd = self.arg(0);
    800126b4:	00002097          	auipc	ra,0x2
    800126b8:	72c080e7          	jalr	1836(ra) # 80014de0 <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    800126bc:	85aa                	mv	a1,a0
    800126be:	ecae                	sd	a1,88(sp)
    800126c0:	f5aa                	sd	a0,232(sp)
    800126c2:	a009                	j	800126c4 <.LBB8_20>

00000000800126c4 <.LBB8_20>:
        let task = unsafe { CPU_MANAGER.myproc().unwrap() };
    800126c4:	00052517          	auipc	a0,0x52
    800126c8:	a7c50513          	addi	a0,a0,-1412 # 80064140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    800126cc:	fffff097          	auipc	ra,0xfffff
    800126d0:	35e080e7          	jalr	862(ra) # 80011a2a <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    800126d4:	e4aa                	sd	a0,72(sp)
    800126d6:	a009                	j	800126d8 <.LBB8_20+0x14>
    800126d8:	6526                	ld	a0,72(sp)

00000000800126da <.LBB8_21>:
    800126da:	00017597          	auipc	a1,0x17
    800126de:	bee58593          	addi	a1,a1,-1042 # 800292c8 <.L__unnamed_12>
    800126e2:	ffffc097          	auipc	ra,0xffffc
    800126e6:	5da080e7          	jalr	1498(ra) # 8000ecbc <_ZN4core6option15Option$LT$T$GT$6unwrap17h81f0c84c54a80648E>
    800126ea:	e0aa                	sd	a0,64(sp)
    800126ec:	a009                	j	800126ee <.LBB8_21+0x14>
    800126ee:	65e6                	ld	a1,88(sp)
    800126f0:	6506                	ld	a0,64(sp)
    800126f2:	f9aa                	sd	a0,240(sp)
    800126f4:	06300513          	li	a0,99
        let file = task.open_files[fd].as_ref().unwrap();
    800126f8:	0eb56e63          	bltu	a0,a1,800127f4 <.LBB8_24+0x36>
    800126fc:	a009                	j	800126fe <.LBB8_21+0x24>
    800126fe:	6506                	ld	a0,64(sp)
    80012700:	65e6                	ld	a1,88(sp)
    80012702:	058e                	slli	a1,a1,0x3
    80012704:	952e                	add	a0,a0,a1
    80012706:	0a850513          	addi	a0,a0,168
    8001270a:	ffffc097          	auipc	ra,0xffffc
    8001270e:	272080e7          	jalr	626(ra) # 8000e97c <_ZN4core6option15Option$LT$T$GT$6as_ref17h0cd8921964ab0966E>
    80012712:	fc2a                	sd	a0,56(sp)
    80012714:	a009                	j	80012716 <.LBB8_21+0x3c>
    80012716:	7562                	ld	a0,56(sp)

0000000080012718 <.LBB8_22>:
    80012718:	00017597          	auipc	a1,0x17
    8001271c:	be058593          	addi	a1,a1,-1056 # 800292f8 <.L__unnamed_13>
    80012720:	ffffc097          	auipc	ra,0xffffc
    80012724:	5d2080e7          	jalr	1490(ra) # 8000ecf2 <_ZN4core6option15Option$LT$T$GT$6unwrap17h84dba6f31c77e511E>
    80012728:	85aa                	mv	a1,a0
    8001272a:	f82e                	sd	a1,48(sp)
    8001272c:	fdaa                	sd	a0,248(sp)
    8001272e:	a009                	j	80012730 <.LBB8_22+0x18>
        let ptr = self.arg(1);
    80012730:	6546                	ld	a0,80(sp)
    80012732:	4585                	li	a1,1
    80012734:	00002097          	auipc	ra,0x2
    80012738:	6ac080e7          	jalr	1708(ra) # 80014de0 <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    8001273c:	85aa                	mv	a1,a0
    8001273e:	f42e                	sd	a1,40(sp)
    80012740:	e22a                	sd	a0,256(sp)
    80012742:	a009                	j	80012744 <.LBB8_22+0x2c>
        let len = self.arg(2);
    80012744:	6546                	ld	a0,80(sp)
    80012746:	4589                	li	a1,2
    80012748:	00002097          	auipc	ra,0x2
    8001274c:	698080e7          	jalr	1688(ra) # 80014de0 <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    80012750:	85aa                	mv	a1,a0
    80012752:	f02e                	sd	a1,32(sp)
    80012754:	e62a                	sd	a0,264(sp)
    80012756:	a009                	j	80012758 <.LBB8_22+0x40>
        match file.write(ptr, len) {
    80012758:	7542                	ld	a0,48(sp)
    8001275a:	ffff0097          	auipc	ra,0xffff0
    8001275e:	e70080e7          	jalr	-400(ra) # 800025ca <_ZN69_$LT$alloc..sync..Arc$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h7c280ba665690166E>
    80012762:	ec2a                	sd	a0,24(sp)
    80012764:	a009                	j	80012766 <.LBB8_22+0x4e>
    80012766:	7682                	ld	a3,32(sp)
    80012768:	7622                	ld	a2,40(sp)
    8001276a:	65e2                	ld	a1,24(sp)
    8001276c:	1888                	addi	a0,sp,112
    8001276e:	ffff3097          	auipc	ra,0xffff3
    80012772:	31a080e7          	jalr	794(ra) # 80005a88 <_ZN6kernel2fs4file5VFile5write17h6504f6f101707b61E>
    80012776:	a009                	j	80012778 <.LBB8_22+0x60>
            Ok(cur_size) => {
    80012778:	7546                	ld	a0,112(sp)
    8001277a:	4581                	li	a1,0
    8001277c:	02b50663          	beq	a0,a1,800127a8 <.LBB8_23+0x18>
    80012780:	a009                	j	80012782 <.LBB8_22+0x6a>
            Err(err) => {
    80012782:	75e6                	ld	a1,120(sp)
    80012784:	650a                	ld	a0,128(sp)
    80012786:	e52e                	sd	a1,136(sp)
    80012788:	e92a                	sd	a0,144(sp)
    8001278a:	0128                	addi	a0,sp,136
                println!("[Kernel] sys_write: err: {}", err);
    8001278c:	edaa                	sd	a0,216(sp)
    8001278e:	ea2a                	sd	a0,272(sp)

0000000080012790 <.LBB8_23>:
    80012790:	0000c597          	auipc	a1,0xc
    80012794:	c8858593          	addi	a1,a1,-888 # 8001e418 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E>
    80012798:	0000c097          	auipc	ra,0xc
    8001279c:	ca4080e7          	jalr	-860(ra) # 8001e43c <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>
    800127a0:	e42a                	sd	a0,8(sp)
    800127a2:	e82e                	sd	a1,16(sp)
    800127a4:	a809                	j	800127b6 <.LBB8_23+0x26>
        match file.write(ptr, len) {
    800127a6:	0000                	unimp
            Ok(cur_size) => {
    800127a8:	7566                	ld	a0,120(sp)
    800127aa:	ee2a                	sd	a0,280(sp)
                size = cur_size;
    800127ac:	f22a                	sd	a0,288(sp)
        Ok(size)
    800127ae:	f4aa                	sd	a0,104(sp)
    800127b0:	4501                	li	a0,0
    800127b2:	f0aa                	sd	a0,96(sp)
    }
    800127b4:	a81d                	j	800127ea <.LBB8_24+0x2c>
                println!("[Kernel] sys_write: err: {}", err);
    800127b6:	6542                	ld	a0,16(sp)
    800127b8:	65a2                	ld	a1,8(sp)
    800127ba:	e5ae                	sd	a1,200(sp)
    800127bc:	e9aa                	sd	a0,208(sp)

00000000800127be <.LBB8_24>:
    800127be:	00017597          	auipc	a1,0x17
    800127c2:	b7258593          	addi	a1,a1,-1166 # 80029330 <.L__unnamed_14>
    800127c6:	0928                	addi	a0,sp,152
    800127c8:	4609                	li	a2,2
    800127ca:	01b4                	addi	a3,sp,200
    800127cc:	4705                	li	a4,1
    800127ce:	ffff3097          	auipc	ra,0xffff3
    800127d2:	c66080e7          	jalr	-922(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    800127d6:	a009                	j	800127d8 <.LBB8_24+0x1a>
    800127d8:	0928                	addi	a0,sp,152
    800127da:	0000b097          	auipc	ra,0xb
    800127de:	3d6080e7          	jalr	982(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    800127e2:	a009                	j	800127e4 <.LBB8_24+0x26>
    800127e4:	4505                	li	a0,1
                return Err(())
    800127e6:	f0aa                	sd	a0,96(sp)
    }
    800127e8:	a009                	j	800127ea <.LBB8_24+0x2c>
    800127ea:	7506                	ld	a0,96(sp)
    800127ec:	75a6                	ld	a1,104(sp)
    800127ee:	70b2                	ld	ra,296(sp)
    800127f0:	6155                	addi	sp,sp,304
    800127f2:	8082                	ret
        let file = task.open_files[fd].as_ref().unwrap();
    800127f4:	6566                	ld	a0,88(sp)

00000000800127f6 <.LBB8_25>:
    800127f6:	00017617          	auipc	a2,0x17
    800127fa:	aea60613          	addi	a2,a2,-1302 # 800292e0 <.L__unnamed_15>
    800127fe:	06400593          	li	a1,100
    80012802:	00010097          	auipc	ra,0x10
    80012806:	926080e7          	jalr	-1754(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_open17h5b5b1f6af7439fbcE:

000000008001280c <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_open17h5b5b1f6af7439fbcE>:
    pub fn sys_open(&self) -> SysResult {
    8001280c:	c4010113          	addi	sp,sp,-960
    80012810:	3a113c23          	sd	ra,952(sp)
    80012814:	fd2a                	sd	a0,184(sp)
    80012816:	38a13423          	sd	a0,904(sp)
    8001281a:	4581                	li	a1,0
        let mut path = [0;MAXPATH];
    8001281c:	f92e                	sd	a1,176(sp)
    8001281e:	38b103a3          	sb	a1,903(sp)
    80012822:	38b10323          	sb	a1,902(sp)
    80012826:	09a8                	addi	a0,sp,216
    80012828:	08000613          	li	a2,128
    8001282c:	00013097          	auipc	ra,0x13
    80012830:	860080e7          	jalr	-1952(ra) # 8002508c <memset>
    80012834:	75ca                	ld	a1,176(sp)
        let addr = self.arg(0);
    80012836:	756a                	ld	a0,184(sp)
    80012838:	00002097          	auipc	ra,0x2
    8001283c:	5a8080e7          	jalr	1448(ra) # 80014de0 <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    80012840:	85aa                	mv	a1,a0
    80012842:	e1ae                	sd	a1,192(sp)
    80012844:	38a13823          	sd	a0,912(sp)
    80012848:	a009                	j	8001284a <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_open17h5b5b1f6af7439fbcE+0x3e>
        self.copy_from_str(addr, &mut path, MAXPATH).unwrap();
    8001284a:	658e                	ld	a1,192(sp)
    8001284c:	756a                	ld	a0,184(sp)
    8001284e:	09b0                	addi	a2,sp,216
    80012850:	08000713          	li	a4,128
    80012854:	86ba                	mv	a3,a4
    80012856:	00002097          	auipc	ra,0x2
    8001285a:	63a080e7          	jalr	1594(ra) # 80014e90 <_ZN6kernel7syscall7Syscall13copy_from_str17h5c83be6e0d4b822aE>
    8001285e:	f52a                	sd	a0,168(sp)
    80012860:	a009                	j	80012862 <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_open17h5b5b1f6af7439fbcE+0x56>
    80012862:	752a                	ld	a0,168(sp)

0000000080012864 <.LBB9_80>:
    80012864:	00017597          	auipc	a1,0x17
    80012868:	aec58593          	addi	a1,a1,-1300 # 80029350 <.L__unnamed_16>
    8001286c:	ffffa097          	auipc	ra,0xffffa
    80012870:	620080e7          	jalr	1568(ra) # 8000ce8c <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17hea14d8d7b2208f82E>
    80012874:	a009                	j	80012876 <.LBB9_80+0x12>
        let open_mode = self.arg(1);
    80012876:	756a                	ld	a0,184(sp)
    80012878:	4585                	li	a1,1
    8001287a:	00002097          	auipc	ra,0x2
    8001287e:	566080e7          	jalr	1382(ra) # 80014de0 <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    80012882:	fb2a                	sd	a0,432(sp)
    80012884:	a009                	j	80012886 <.LBB9_81>

0000000080012886 <.LBB9_81>:
        LOG.begin_op();
    80012886:	00047517          	auipc	a0,0x47
    8001288a:	de250513          	addi	a0,a0,-542 # 80059668 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    8001288e:	ffff6097          	auipc	ra,0xffff6
    80012892:	36e080e7          	jalr	878(ra) # 80008bfc <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$8begin_op17he5b49a48c716e372E>
    80012896:	a009                	j	80012898 <.LBB9_81+0x12>
        match OpenMode::mode(open_mode) {
    80012898:	755a                	ld	a0,432(sp)
    8001289a:	00006097          	auipc	ra,0x6
    8001289e:	a3e080e7          	jalr	-1474(ra) # 800182d8 <_ZN6kernel4arch5riscv4qemu2fs8OpenMode4mode17h15bbb1ea8002b902E>
    800128a2:	ff2a                	sd	a0,440(sp)
    800128a4:	a009                	j	800128a6 <.LBB9_81+0x20>
            OpenMode::CREATE => {
    800128a6:	757a                	ld	a0,440(sp)
    800128a8:	20000593          	li	a1,512
    800128ac:	02b50063          	beq	a0,a1,800128cc <.LBB9_82+0x1a>
    800128b0:	a009                	j	800128b2 <.LBB9_82>

00000000800128b2 <.LBB9_82>:
                match ICACHE.namei(&path) {
    800128b2:	00047597          	auipc	a1,0x47
    800128b6:	e5e58593          	addi	a1,a1,-418 # 80059710 <_ZN6kernel2fs5inode6ICACHE17had1be8942ca79bf1E>
    800128ba:	0ca8                	addi	a0,sp,600
    800128bc:	09b0                	addi	a2,sp,216
    800128be:	08000693          	li	a3,128
    800128c2:	00007097          	auipc	ra,0x7
    800128c6:	9fa080e7          	jalr	-1542(ra) # 800192bc <_ZN6kernel2fs5inode10InodeCache5namei17hc269c6a9eecf1991E>
    800128ca:	a8e1                	j	800129a2 <.LBB9_86+0x2c>
    800128cc:	4709                	li	a4,2
                match ICACHE.create(&path, crate::fs::InodeType::File, 0, 0) {
    800128ce:	1ce11f23          	sh	a4,478(sp)

00000000800128d2 <.LBB9_83>:
    800128d2:	00047597          	auipc	a1,0x47
    800128d6:	e3e58593          	addi	a1,a1,-450 # 80059710 <_ZN6kernel2fs5inode6ICACHE17had1be8942ca79bf1E>
    800128da:	0388                	addi	a0,sp,448
    800128dc:	09b0                	addi	a2,sp,216
    800128de:	08000693          	li	a3,128
    800128e2:	4801                	li	a6,0
    800128e4:	87c2                	mv	a5,a6
    800128e6:	00007097          	auipc	ra,0x7
    800128ea:	a1a080e7          	jalr	-1510(ra) # 80019300 <_ZN6kernel2fs5inode10InodeCache6create17hf2583436fcb9d2ecE>
    800128ee:	a009                	j	800128f0 <.LBB9_83+0x1e>
                    Ok(cur_inode) => {
    800128f0:	651e                	ld	a0,448(sp)
    800128f2:	4581                	li	a1,0
    800128f4:	02b50363          	beq	a0,a1,8001291a <.LBB9_84+0x14>
    800128f8:	a009                	j	800128fa <.LBB9_83+0x28>
                    Err(err) => {
    800128fa:	65be                	ld	a1,456(sp)
    800128fc:	655e                	ld	a0,464(sp)
    800128fe:	20b13023          	sd	a1,512(sp)
    80012902:	20a13423          	sd	a0,520(sp)

0000000080012906 <.LBB9_84>:
                        LOG.end_op();
    80012906:	00047517          	auipc	a0,0x47
    8001290a:	d6250513          	addi	a0,a0,-670 # 80059668 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    8001290e:	ffff7097          	auipc	ra,0xffff7
    80012912:	8d4080e7          	jalr	-1836(ra) # 800091e2 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>
    80012916:	a815                	j	8001294a <.LBB9_84+0x44>
                match ICACHE.create(&path, crate::fs::InodeType::File, 0, 0) {
    80012918:	0000                	unimp
                    Ok(cur_inode) => {
    8001291a:	655e                	ld	a0,464(sp)
    8001291c:	f7aa                	sd	a0,488(sp)
    8001291e:	65be                	ld	a1,456(sp)
    80012920:	f3ae                	sd	a1,480(sp)
                        inode = cur_inode;
    80012922:	fbae                	sd	a1,496(sp)
    80012924:	ffaa                	sd	a0,504(sp)
    80012926:	4605                	li	a2,1
    80012928:	38c103a3          	sb	a2,903(sp)
    8001292c:	eeae                	sd	a1,344(sp)
    8001292e:	f2aa                	sd	a0,352(sp)
    80012930:	0aa8                	addi	a0,sp,344
                        inode_guard = inode.lock();
    80012932:	00008097          	auipc	ra,0x8
    80012936:	3ce080e7          	jalr	974(ra) # 8001ad00 <_ZN6kernel2fs5inode5Inode4lock17he70970c593f751adE>
    8001293a:	ed2a                	sd	a0,152(sp)
    8001293c:	f12e                	sd	a1,160(sp)
    8001293e:	a009                	j	80012940 <.LBB9_84+0x3a>
    80012940:	750a                	ld	a0,160(sp)
    80012942:	65ea                	ld	a1,152(sp)
    80012944:	f32e                	sd	a1,416(sp)
    80012946:	f72a                	sd	a0,424(sp)
        match OpenMode::mode(open_mode) {
    80012948:	aa15                	j	80012a7c <.LBB9_89+0x1e>
    8001294a:	0408                	addi	a0,sp,512
                        println!("[Kernel] syscall: sys_open: {}", err);
    8001294c:	24a13823          	sd	a0,592(sp)
    80012950:	38a13c23          	sd	a0,920(sp)

0000000080012954 <.LBB9_85>:
    80012954:	0000c597          	auipc	a1,0xc
    80012958:	ac458593          	addi	a1,a1,-1340 # 8001e418 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E>
    8001295c:	0000c097          	auipc	ra,0xc
    80012960:	ae0080e7          	jalr	-1312(ra) # 8001e43c <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>
    80012964:	e52a                	sd	a0,136(sp)
    80012966:	e92e                	sd	a1,144(sp)
    80012968:	a009                	j	8001296a <.LBB9_85+0x16>
    8001296a:	654a                	ld	a0,144(sp)
    8001296c:	65aa                	ld	a1,136(sp)
    8001296e:	24b13023          	sd	a1,576(sp)
    80012972:	24a13423          	sd	a0,584(sp)

0000000080012976 <.LBB9_86>:
    80012976:	00017597          	auipc	a1,0x17
    8001297a:	a1258593          	addi	a1,a1,-1518 # 80029388 <.L__unnamed_17>
    8001297e:	0c08                	addi	a0,sp,528
    80012980:	4609                	li	a2,2
    80012982:	0494                	addi	a3,sp,576
    80012984:	4705                	li	a4,1
    80012986:	ffff3097          	auipc	ra,0xffff3
    8001298a:	aae080e7          	jalr	-1362(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8001298e:	a009                	j	80012990 <.LBB9_86+0x1a>
    80012990:	0c08                	addi	a0,sp,528
    80012992:	0000b097          	auipc	ra,0xb
    80012996:	21e080e7          	jalr	542(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8001299a:	a009                	j	8001299c <.LBB9_86+0x26>
    8001299c:	4505                	li	a0,1
                        return Err(())
    8001299e:	e5aa                	sd	a0,200(sp)
    800129a0:	ae0d                	j	80012cd2 <.LBB9_94+0x38>
                    Some(cur_inode) => {
    800129a2:	25813503          	ld	a0,600(sp)
    800129a6:	4581                	li	a1,0
    800129a8:	00b50463          	beq	a0,a1,800129b0 <.LBB9_87>
    800129ac:	a009                	j	800129ae <.LBB9_86+0x38>
    800129ae:	a819                	j	800129c4 <.LBB9_87+0x14>

00000000800129b0 <.LBB9_87>:
                        LOG.end_op();
    800129b0:	00047517          	auipc	a0,0x47
    800129b4:	cb850513          	addi	a0,a0,-840 # 80059668 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    800129b8:	ffff7097          	auipc	ra,0xffff7
    800129bc:	82a080e7          	jalr	-2006(ra) # 800091e2 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>
    800129c0:	a85d                	j	80012a76 <.LBB9_89+0x18>
                match ICACHE.namei(&path) {
    800129c2:	0000                	unimp
                    Some(cur_inode) => {
    800129c4:	26813503          	ld	a0,616(sp)
    800129c8:	26a13c23          	sd	a0,632(sp)
    800129cc:	26013583          	ld	a1,608(sp)
    800129d0:	26b13823          	sd	a1,624(sp)
                        inode = cur_inode;
    800129d4:	28b13023          	sd	a1,640(sp)
    800129d8:	28a13423          	sd	a0,648(sp)
    800129dc:	4605                	li	a2,1
    800129de:	38c103a3          	sb	a2,903(sp)
    800129e2:	eeae                	sd	a1,344(sp)
    800129e4:	f2aa                	sd	a0,352(sp)
    800129e6:	0aa8                	addi	a0,sp,344
                        inode_guard = inode.lock();
    800129e8:	00008097          	auipc	ra,0x8
    800129ec:	318080e7          	jalr	792(ra) # 8001ad00 <_ZN6kernel2fs5inode5Inode4lock17he70970c593f751adE>
    800129f0:	fcaa                	sd	a0,120(sp)
    800129f2:	e12e                	sd	a1,128(sp)
    800129f4:	a009                	j	800129f6 <.LBB9_87+0x46>
    800129f6:	650a                	ld	a0,128(sp)
    800129f8:	75e6                	ld	a1,120(sp)
    800129fa:	f32e                	sd	a1,416(sp)
    800129fc:	f72a                	sd	a0,424(sp)
    800129fe:	1308                	addi	a0,sp,416
                        if inode_guard.dinode.itype == InodeType::Directory && open_mode != OpenMode::RDONLY as usize {
    80012a00:	0000b097          	auipc	ra,0xb
    80012a04:	b00080e7          	jalr	-1280(ra) # 8001d500 <_ZN92_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfc7812d7ca7ab1e1E>
    80012a08:	f8aa                	sd	a0,112(sp)
    80012a0a:	a01d                	j	80012a30 <.LBB9_87+0x80>
    80012a0c:	4505                	li	a0,1
    80012a0e:	28a10ba3          	sb	a0,663(sp)
    80012a12:	a811                	j	80012a26 <.LBB9_87+0x76>
    80012a14:	4501                	li	a0,0
    80012a16:	28a10ba3          	sb	a0,663(sp)
    80012a1a:	a031                	j	80012a26 <.LBB9_87+0x76>
    80012a1c:	755a                	ld	a0,432(sp)
    80012a1e:	4581                	li	a1,0
    80012a20:	feb516e3          	bne	a0,a1,80012a0c <.LBB9_87+0x5c>
    80012a24:	bfc5                	j	80012a14 <.LBB9_87+0x64>
    80012a26:	29714503          	lbu	a0,663(sp)
    80012a2a:	8905                	andi	a0,a0,1
    80012a2c:	e10d                	bnez	a0,80012a4e <.LBB9_88+0x1a>
    80012a2e:	a03d                	j	80012a5c <.LBB9_88+0x28>
    80012a30:	7546                	ld	a0,112(sp)
    80012a32:	0521                	addi	a0,a0,8

0000000080012a34 <.LBB9_88>:
    80012a34:	00017597          	auipc	a1,0x17
    80012a38:	93458593          	addi	a1,a1,-1740 # 80029368 <.L__unnamed_18>
    80012a3c:	ffff6097          	auipc	ra,0xffff6
    80012a40:	9d0080e7          	jalr	-1584(ra) # 8000840c <_ZN70_$LT$kernel..fs..dinode..InodeType$u20$as$u20$core..cmp..PartialEq$GT$2eq17h96b8b60db340aeeeE>
    80012a44:	f4aa                	sd	a0,104(sp)
    80012a46:	a009                	j	80012a48 <.LBB9_88+0x14>
    80012a48:	7526                	ld	a0,104(sp)
    80012a4a:	f969                	bnez	a0,80012a1c <.LBB9_87+0x6c>
    80012a4c:	b7e1                	j	80012a14 <.LBB9_87+0x64>
                            drop(inode_guard);
    80012a4e:	751a                	ld	a0,416(sp)
    80012a50:	75ba                	ld	a1,424(sp)
    80012a52:	0000a097          	auipc	ra,0xa
    80012a56:	460080e7          	jalr	1120(ra) # 8001ceb2 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    80012a5a:	a011                	j	80012a5e <.LBB9_89>
        match OpenMode::mode(open_mode) {
    80012a5c:	a005                	j	80012a7c <.LBB9_89+0x1e>

0000000080012a5e <.LBB9_89>:
                            LOG.end_op();
    80012a5e:	00047517          	auipc	a0,0x47
    80012a62:	c0a50513          	addi	a0,a0,-1014 # 80059668 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    80012a66:	ffff6097          	auipc	ra,0xffff6
    80012a6a:	77c080e7          	jalr	1916(ra) # 800091e2 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>
    80012a6e:	a009                	j	80012a70 <.LBB9_89+0x12>
    80012a70:	4505                	li	a0,1
                            return Err(());
    80012a72:	e5aa                	sd	a0,200(sp)
    80012a74:	a4e5                	j	80012d5c <.LBB9_94+0xc2>
    80012a76:	4505                	li	a0,1
                        return Err(())
    80012a78:	e5aa                	sd	a0,200(sp)
    80012a7a:	a4cd                	j	80012d5c <.LBB9_94+0xc2>
    80012a7c:	0d28                	addi	a0,sp,664
        file = VFile::init();
    80012a7e:	ffff3097          	auipc	ra,0xffff3
    80012a82:	c56080e7          	jalr	-938(ra) # 800056d4 <_ZN6kernel2fs4file5VFile4init17h000c38ec0bf103cfE>
    80012a86:	a4b5                	j	80012cf2 <.LBB9_94+0x58>
            InodeType::Device => {
    80012a88:	2d013503          	ld	a0,720(sp)
    80012a8c:	00855503          	lhu	a0,8(a0)
    80012a90:	f0aa                	sd	a0,96(sp)
    80012a92:	458d                	li	a1,3
    80012a94:	02b50563          	beq	a0,a1,80012abe <.LBB9_89+0x60>
    80012a98:	a009                	j	80012a9a <.LBB9_89+0x3c>
    80012a9a:	7506                	ld	a0,96(sp)
    80012a9c:	4591                	li	a1,4
    80012a9e:	04b50663          	beq	a0,a1,80012aea <.LBB9_89+0x8c>
    80012aa2:	a009                	j	80012aa4 <.LBB9_89+0x46>
    80012aa4:	4509                	li	a0,2
                file.ftype = FileType::Inode;
    80012aa6:	2ca11e23          	sh	a0,732(sp)
    80012aaa:	18a11a23          	sh	a0,404(sp)
    80012aae:	4501                	li	a0,0
                file.offset = 0;
    80012ab0:	18a12823          	sw	a0,400(sp)
    80012ab4:	10100513          	li	a0,257
                file.readable = true;
    80012ab8:	18a11c23          	sh	a0,408(sp)
        match inode_guard.dinode.itype {
    80012abc:	a0a1                	j	80012b04 <.LBB9_89+0xa6>
    80012abe:	450d                	li	a0,3
                file.ftype = FileType::Device;
    80012ac0:	2ca11c23          	sh	a0,728(sp)
    80012ac4:	18a11a23          	sh	a0,404(sp)
    80012ac8:	1308                	addi	a0,sp,416
                file.major = inode_guard.dinode.major;
    80012aca:	0000b097          	auipc	ra,0xb
    80012ace:	a36080e7          	jalr	-1482(ra) # 8001d500 <_ZN92_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfc7812d7ca7ab1e1E>
    80012ad2:	ecaa                	sd	a0,88(sp)
    80012ad4:	a009                	j	80012ad6 <.LBB9_89+0x78>
    80012ad6:	6566                	ld	a0,88(sp)
    80012ad8:	00a51503          	lh	a0,10(a0)
    80012adc:	18a11b23          	sh	a0,406(sp)
    80012ae0:	10100513          	li	a0,257
                file.readable = true;
    80012ae4:	18a11c23          	sh	a0,408(sp)
        match inode_guard.dinode.itype {
    80012ae8:	a831                	j	80012b04 <.LBB9_89+0xa6>
    80012aea:	4515                	li	a0,5
                file.ftype = FileType::Fifo;
    80012aec:	2ca11d23          	sh	a0,730(sp)
    80012af0:	18a11a23          	sh	a0,404(sp)
    80012af4:	4501                	li	a0,0
                file.offset= 0;
    80012af6:	18a12823          	sw	a0,400(sp)
    80012afa:	10100513          	li	a0,257
                file.readable = true;
    80012afe:	18a11c23          	sh	a0,408(sp)
        match inode_guard.dinode.itype {
    80012b02:	a009                	j	80012b04 <.LBB9_89+0xa6>
    80012b04:	1b08                	addi	a0,sp,432
    80012b06:	45ad                	li	a1,11
        if open_mode.get_bit(11) && inode_guard.dinode.itype == InodeType::File {
    80012b08:	ffff1097          	auipc	ra,0xffff1
    80012b0c:	214080e7          	jalr	532(ra) # 80003d1c <_ZN45_$LT$usize$u20$as$u20$bit_field..BitField$GT$7get_bit17ha84b909d1dae7859E>
    80012b10:	e8aa                	sd	a0,80(sp)
    80012b12:	a02d                	j	80012b3c <.LBB9_89+0xde>
    80012b14:	4505                	li	a0,1
    80012b16:	2ca10fa3          	sb	a0,735(sp)
    80012b1a:	a821                	j	80012b32 <.LBB9_89+0xd4>
    80012b1c:	4501                	li	a0,0
    80012b1e:	2ca10fa3          	sb	a0,735(sp)
    80012b22:	a801                	j	80012b32 <.LBB9_89+0xd4>
    80012b24:	1308                	addi	a0,sp,416
    80012b26:	0000b097          	auipc	ra,0xb
    80012b2a:	9da080e7          	jalr	-1574(ra) # 8001d500 <_ZN92_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfc7812d7ca7ab1e1E>
    80012b2e:	e4aa                	sd	a0,72(sp)
    80012b30:	a809                	j	80012b42 <.LBB9_89+0xe4>
    80012b32:	2df14503          	lbu	a0,735(sp)
    80012b36:	8905                	andi	a0,a0,1
    80012b38:	e505                	bnez	a0,80012b60 <.LBB9_90+0x1a>
    80012b3a:	a815                	j	80012b6e <.LBB9_90+0x28>
    80012b3c:	6546                	ld	a0,80(sp)
    80012b3e:	f17d                	bnez	a0,80012b24 <.LBB9_89+0xc6>
    80012b40:	bff1                	j	80012b1c <.LBB9_89+0xbe>
    80012b42:	6526                	ld	a0,72(sp)
    80012b44:	0521                	addi	a0,a0,8

0000000080012b46 <.LBB9_90>:
    80012b46:	00017597          	auipc	a1,0x17
    80012b4a:	86258593          	addi	a1,a1,-1950 # 800293a8 <.L__unnamed_19>
    80012b4e:	ffff6097          	auipc	ra,0xffff6
    80012b52:	8be080e7          	jalr	-1858(ra) # 8000840c <_ZN70_$LT$kernel..fs..dinode..InodeType$u20$as$u20$core..cmp..PartialEq$GT$2eq17h96b8b60db340aeeeE>
    80012b56:	e0aa                	sd	a0,64(sp)
    80012b58:	a009                	j	80012b5a <.LBB9_90+0x14>
    80012b5a:	6506                	ld	a0,64(sp)
    80012b5c:	fd45                	bnez	a0,80012b14 <.LBB9_89+0xb6>
    80012b5e:	bf7d                	j	80012b1c <.LBB9_89+0xbe>
    80012b60:	1308                	addi	a0,sp,416
            inode_guard.truncate(&inode);
    80012b62:	0000b097          	auipc	ra,0xb
    80012b66:	9b2080e7          	jalr	-1614(ra) # 8001d514 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    80012b6a:	fc2a                	sd	a0,56(sp)
    80012b6c:	a011                	j	80012b70 <.LBB9_90+0x2a>
        if open_mode.get_bit(11) && inode_guard.dinode.itype == InodeType::File {
    80012b6e:	a809                	j	80012b80 <.LBB9_90+0x3a>
            inode_guard.truncate(&inode);
    80012b70:	7562                	ld	a0,56(sp)
    80012b72:	0aac                	addi	a1,sp,344
    80012b74:	00007097          	auipc	ra,0x7
    80012b78:	010080e7          	jalr	16(ra) # 80019b84 <_ZN6kernel2fs5inode9InodeData8truncate17h7f63e14f2a03d309E>
    80012b7c:	a009                	j	80012b7e <.LBB9_90+0x38>
        if open_mode.get_bit(11) && inode_guard.dinode.itype == InodeType::File {
    80012b7e:	a009                	j	80012b80 <.LBB9_90+0x3a>
        drop(inode_guard);
    80012b80:	751a                	ld	a0,416(sp)
    80012b82:	75ba                	ld	a1,424(sp)
    80012b84:	0000a097          	auipc	ra,0xa
    80012b88:	32e080e7          	jalr	814(ra) # 8001ceb2 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    80012b8c:	a009                	j	80012b8e <.LBB9_91>

0000000080012b8e <.LBB9_91>:
        LOG.end_op();
    80012b8e:	00047517          	auipc	a0,0x47
    80012b92:	ada50513          	addi	a0,a0,-1318 # 80059668 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    80012b96:	ffff6097          	auipc	ra,0xffff6
    80012b9a:	64c080e7          	jalr	1612(ra) # 800091e2 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>
    80012b9e:	a009                	j	80012ba0 <.LBB9_91+0x12>
    80012ba0:	4501                	li	a0,0
        file.inode = Some(inode);
    80012ba2:	38a103a3          	sb	a0,903(sp)
    80012ba6:	65f6                	ld	a1,344(sp)
    80012ba8:	2eb13c23          	sd	a1,760(sp)
    80012bac:	7516                	ld	a0,352(sp)
    80012bae:	30a13023          	sd	a0,768(sp)
    80012bb2:	2eb13423          	sd	a1,744(sp)
    80012bb6:	2ea13823          	sd	a0,752(sp)
    80012bba:	4505                	li	a0,1
    80012bbc:	2ea13023          	sd	a0,736(sp)
    80012bc0:	1aa8                	addi	a0,sp,376
    80012bc2:	ffff4097          	auipc	ra,0xffff4
    80012bc6:	3e2080e7          	jalr	994(ra) # 80006fa4 <_ZN4core3ptr73drop_in_place$LT$core..option..Option$LT$kernel..fs..inode..Inode$GT$$GT$17h6a7b3b84406d6cdfE>
    80012bca:	a2a5                	j	80012d32 <.LBB9_94+0x98>
    80012bcc:	1b08                	addi	a0,sp,432
    80012bce:	4585                	li	a1,1
        file.writeable = open_mode.get_bit(0) | open_mode.get_bit(1);
    80012bd0:	ffff1097          	auipc	ra,0xffff1
    80012bd4:	14c080e7          	jalr	332(ra) # 80003d1c <_ZN45_$LT$usize$u20$as$u20$bit_field..BitField$GT$7get_bit17ha84b909d1dae7859E>
    80012bd8:	f82a                	sd	a0,48(sp)
    80012bda:	a009                	j	80012bdc <.LBB9_91+0x4e>
    80012bdc:	75c2                	ld	a1,48(sp)
    80012bde:	30f10503          	lb	a0,783(sp)
    80012be2:	8d4d                	or	a0,a0,a1
    80012be4:	8905                	andi	a0,a0,1
    80012be6:	18a10ca3          	sb	a0,409(sp)
    80012bea:	1b08                	addi	a0,sp,432
    80012bec:	4581                	li	a1,0
        file.readable = !open_mode.get_bit(0) | open_mode.get_bit(1);
    80012bee:	ffff1097          	auipc	ra,0xffff1
    80012bf2:	12e080e7          	jalr	302(ra) # 80003d1c <_ZN45_$LT$usize$u20$as$u20$bit_field..BitField$GT$7get_bit17ha84b909d1dae7859E>
    80012bf6:	f42a                	sd	a0,40(sp)
    80012bf8:	a009                	j	80012bfa <.LBB9_91+0x6c>
    80012bfa:	7522                	ld	a0,40(sp)
    80012bfc:	00154513          	xori	a0,a0,1
    80012c00:	ec2a                	sd	a0,24(sp)
    80012c02:	1b08                	addi	a0,sp,432
    80012c04:	4585                	li	a1,1
    80012c06:	ffff1097          	auipc	ra,0xffff1
    80012c0a:	116080e7          	jalr	278(ra) # 80003d1c <_ZN45_$LT$usize$u20$as$u20$bit_field..BitField$GT$7get_bit17ha84b909d1dae7859E>
    80012c0e:	f02a                	sd	a0,32(sp)
    80012c10:	a009                	j	80012c12 <.LBB9_91+0x84>
    80012c12:	6562                	ld	a0,24(sp)
    80012c14:	7582                	ld	a1,32(sp)
    80012c16:	8d4d                	or	a0,a0,a1
    80012c18:	18a10c23          	sb	a0,408(sp)

0000000080012c1c <.LBB9_92>:
        match unsafe { CPU_MANAGER.alloc_fd(&file) } {
    80012c1c:	00051597          	auipc	a1,0x51
    80012c20:	52458593          	addi	a1,a1,1316 # 80064140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    80012c24:	0e08                	addi	a0,sp,784
    80012c26:	12b0                	addi	a2,sp,360
    80012c28:	fffff097          	auipc	ra,0xfffff
    80012c2c:	f80080e7          	jalr	-128(ra) # 80011ba8 <_ZN6kernel7process3cpu10CPUManager8alloc_fd17h6273585a0cf04a04E>
    80012c30:	a009                	j	80012c32 <.LBB9_92+0x16>
            Ok(new_fd) => {
    80012c32:	31013503          	ld	a0,784(sp)
    80012c36:	4581                	li	a1,0
    80012c38:	02b50c63          	beq	a0,a1,80012c70 <.LBB9_93+0x18>
    80012c3c:	a009                	j	80012c3e <.LBB9_92+0x22>
            Err(err) => {
    80012c3e:	31813583          	ld	a1,792(sp)
    80012c42:	32013503          	ld	a0,800(sp)
    80012c46:	32b13423          	sd	a1,808(sp)
    80012c4a:	32a13823          	sd	a0,816(sp)
    80012c4e:	1628                	addi	a0,sp,808
                println!("[Kernel] sys_open: err: {}", err);
    80012c50:	36a13c23          	sd	a0,888(sp)
    80012c54:	3aa13023          	sd	a0,928(sp)

0000000080012c58 <.LBB9_93>:
    80012c58:	0000b597          	auipc	a1,0xb
    80012c5c:	7c058593          	addi	a1,a1,1984 # 8001e418 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E>
    80012c60:	0000b097          	auipc	ra,0xb
    80012c64:	7dc080e7          	jalr	2012(ra) # 8001e43c <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>
    80012c68:	e42a                	sd	a0,8(sp)
    80012c6a:	e82e                	sd	a1,16(sp)
    80012c6c:	a00d                	j	80012c8e <.LBB9_93+0x36>
        match unsafe { CPU_MANAGER.alloc_fd(&file) } {
    80012c6e:	0000                	unimp
            Ok(new_fd) => {
    80012c70:	31813503          	ld	a0,792(sp)
    80012c74:	3aa13423          	sd	a0,936(sp)
                fd = new_fd;
    80012c78:	3aa13823          	sd	a0,944(sp)
        Ok(fd)
    80012c7c:	e9aa                	sd	a0,208(sp)
    80012c7e:	4501                	li	a0,0
    80012c80:	e5aa                	sd	a0,200(sp)
    80012c82:	12a8                	addi	a0,sp,360
    }
    80012c84:	ffff4097          	auipc	ra,0xffff4
    80012c88:	23e080e7          	jalr	574(ra) # 80006ec2 <_ZN4core3ptr44drop_in_place$LT$kernel..fs..file..VFile$GT$17h7a3c9775c1583e88E>
    80012c8c:	a82d                	j	80012cc6 <.LBB9_94+0x2c>
                println!("[Kernel] sys_open: err: {}", err);
    80012c8e:	6542                	ld	a0,16(sp)
    80012c90:	65a2                	ld	a1,8(sp)
    80012c92:	36b13423          	sd	a1,872(sp)
    80012c96:	36a13823          	sd	a0,880(sp)

0000000080012c9a <.LBB9_94>:
    80012c9a:	00016597          	auipc	a1,0x16
    80012c9e:	72e58593          	addi	a1,a1,1838 # 800293c8 <.L__unnamed_20>
    80012ca2:	1e28                	addi	a0,sp,824
    80012ca4:	4609                	li	a2,2
    80012ca6:	16b4                	addi	a3,sp,872
    80012ca8:	4705                	li	a4,1
    80012caa:	ffff2097          	auipc	ra,0xffff2
    80012cae:	78a080e7          	jalr	1930(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80012cb2:	a009                	j	80012cb4 <.LBB9_94+0x1a>
    80012cb4:	1e28                	addi	a0,sp,824
    80012cb6:	0000b097          	auipc	ra,0xb
    80012cba:	efa080e7          	jalr	-262(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    80012cbe:	a009                	j	80012cc0 <.LBB9_94+0x26>
    80012cc0:	4505                	li	a0,1
                return Err(())
    80012cc2:	e5aa                	sd	a0,200(sp)
    80012cc4:	a039                	j	80012cd2 <.LBB9_94+0x38>
    80012cc6:	4501                	li	a0,0
    }
    80012cc8:	38a10323          	sb	a0,902(sp)
    80012ccc:	38a103a3          	sb	a0,903(sp)
    80012cd0:	a811                	j	80012ce4 <.LBB9_94+0x4a>
    80012cd2:	38614503          	lbu	a0,902(sp)
    80012cd6:	8905                	andi	a0,a0,1
    80012cd8:	e959                	bnez	a0,80012d6e <.LBB9_94+0xd4>
    80012cda:	a051                	j	80012d5e <.LBB9_94+0xc4>
    80012cdc:	4501                	li	a0,0
    80012cde:	38a103a3          	sb	a0,903(sp)
    80012ce2:	a009                	j	80012ce4 <.LBB9_94+0x4a>
    80012ce4:	652e                	ld	a0,200(sp)
    80012ce6:	65ce                	ld	a1,208(sp)
    80012ce8:	3b813083          	ld	ra,952(sp)
    80012cec:	3c010113          	addi	sp,sp,960
    80012cf0:	8082                	ret
    80012cf2:	4505                	li	a0,1
        file = VFile::init();
    80012cf4:	38a10323          	sb	a0,902(sp)
    80012cf8:	29813503          	ld	a0,664(sp)
    80012cfc:	f6aa                	sd	a0,360(sp)
    80012cfe:	2a013503          	ld	a0,672(sp)
    80012d02:	faaa                	sd	a0,368(sp)
    80012d04:	2a813503          	ld	a0,680(sp)
    80012d08:	feaa                	sd	a0,376(sp)
    80012d0a:	2b013503          	ld	a0,688(sp)
    80012d0e:	e32a                	sd	a0,384(sp)
    80012d10:	2b813503          	ld	a0,696(sp)
    80012d14:	e72a                	sd	a0,392(sp)
    80012d16:	2c013503          	ld	a0,704(sp)
    80012d1a:	eb2a                	sd	a0,400(sp)
    80012d1c:	2c813503          	ld	a0,712(sp)
    80012d20:	ef2a                	sd	a0,408(sp)
    80012d22:	1308                	addi	a0,sp,416
        match inode_guard.dinode.itype {
    80012d24:	0000a097          	auipc	ra,0xa
    80012d28:	7dc080e7          	jalr	2012(ra) # 8001d500 <_ZN92_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfc7812d7ca7ab1e1E>
    80012d2c:	2ca13823          	sd	a0,720(sp)
    80012d30:	bba1                	j	80012a88 <.LBB9_89+0x2a>
    80012d32:	4505                	li	a0,1
        file.inode = Some(inode);
    80012d34:	38a10323          	sb	a0,902(sp)
    80012d38:	2e013503          	ld	a0,736(sp)
    80012d3c:	feaa                	sd	a0,376(sp)
    80012d3e:	2e813503          	ld	a0,744(sp)
    80012d42:	e32a                	sd	a0,384(sp)
    80012d44:	2f013503          	ld	a0,752(sp)
    80012d48:	e72a                	sd	a0,392(sp)
    80012d4a:	1b08                	addi	a0,sp,432
    80012d4c:	4581                	li	a1,0
        file.writeable = open_mode.get_bit(0) | open_mode.get_bit(1);
    80012d4e:	ffff1097          	auipc	ra,0xffff1
    80012d52:	fce080e7          	jalr	-50(ra) # 80003d1c <_ZN45_$LT$usize$u20$as$u20$bit_field..BitField$GT$7get_bit17ha84b909d1dae7859E>
    80012d56:	30a107a3          	sb	a0,783(sp)
    80012d5a:	bd8d                	j	80012bcc <.LBB9_91+0x3e>
    80012d5c:	bf9d                	j	80012cd2 <.LBB9_94+0x38>
    80012d5e:	4501                	li	a0,0
    }
    80012d60:	38a10323          	sb	a0,902(sp)
    80012d64:	38714503          	lbu	a0,903(sp)
    80012d68:	8905                	andi	a0,a0,1
    80012d6a:	e901                	bnez	a0,80012d7a <.LBB9_94+0xe0>
    80012d6c:	bf85                	j	80012cdc <.LBB9_94+0x42>
    80012d6e:	1aa8                	addi	a0,sp,376
    80012d70:	ffff4097          	auipc	ra,0xffff4
    80012d74:	234080e7          	jalr	564(ra) # 80006fa4 <_ZN4core3ptr73drop_in_place$LT$core..option..Option$LT$kernel..fs..inode..Inode$GT$$GT$17h6a7b3b84406d6cdfE>
    80012d78:	b7dd                	j	80012d5e <.LBB9_94+0xc4>
    80012d7a:	0aa8                	addi	a0,sp,344
    80012d7c:	ffff4097          	auipc	ra,0xffff4
    80012d80:	15e080e7          	jalr	350(ra) # 80006eda <_ZN4core3ptr45drop_in_place$LT$kernel..fs..inode..Inode$GT$17h8786fe1a2a287832E>
    80012d84:	bfa1                	j	80012cdc <.LBB9_94+0x42>

Disassembly of section .text._ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_exec17h5f20106c7a7bbe80E:

0000000080012d86 <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_exec17h5f20106c7a7bbe80E>:
    pub fn sys_exec(&self) -> SysResult {
    80012d86:	bb010113          	addi	sp,sp,-1104
    80012d8a:	44113423          	sd	ra,1096(sp)
    80012d8e:	ee2a                	sd	a0,280(sp)
    80012d90:	38a13c23          	sd	a0,920(sp)
    80012d94:	0288                	addi	a0,sp,320
    80012d96:	4581                	li	a1,0
    80012d98:	08000613          	li	a2,128
        let mut path = [0u8;MAXPATH];
    80012d9c:	00012097          	auipc	ra,0x12
    80012da0:	2f0080e7          	jalr	752(ra) # 8002508c <memset>
    80012da4:	0388                	addi	a0,sp,448
        let mut argv = [0 as *mut u8; MAXARG];
    80012da6:	058c                	addi	a1,sp,704
    80012da8:	f22e                	sd	a1,288(sp)
    80012daa:	f62a                	sd	a0,296(sp)
    80012dac:	aeed                	j	800131a6 <.LBB10_86+0x3a4>
        self.copy_from_str(addr, &mut path, MAXPATH).unwrap();
    80012dae:	65b2                	ld	a1,264(sp)
    80012db0:	6572                	ld	a0,280(sp)
    80012db2:	0290                	addi	a2,sp,320
    80012db4:	08000713          	li	a4,128
    80012db8:	86ba                	mv	a3,a4
    80012dba:	00002097          	auipc	ra,0x2
    80012dbe:	0d6080e7          	jalr	214(ra) # 80014e90 <_ZN6kernel7syscall7Syscall13copy_from_str17h5c83be6e0d4b822aE>
    80012dc2:	ea2a                	sd	a0,272(sp)
    80012dc4:	a009                	j	80012dc6 <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_exec17h5f20106c7a7bbe80E+0x40>
    80012dc6:	6552                	ld	a0,272(sp)

0000000080012dc8 <.LBB10_85>:
    80012dc8:	00016597          	auipc	a1,0x16
    80012dcc:	62058593          	addi	a1,a1,1568 # 800293e8 <.L__unnamed_21>
    80012dd0:	ffffa097          	auipc	ra,0xffffa
    80012dd4:	0bc080e7          	jalr	188(ra) # 8000ce8c <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17hea14d8d7b2208f82E>
    80012dd8:	a009                	j	80012dda <.LBB10_85+0x12>
        let user_argv = self.arg(1);
    80012dda:	6572                	ld	a0,280(sp)
    80012ddc:	4585                	li	a1,1
    80012dde:	00002097          	auipc	ra,0x2
    80012de2:	002080e7          	jalr	2(ra) # 80014de0 <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    80012de6:	85aa                	mv	a1,a0
    80012de8:	e22e                	sd	a1,256(sp)
    80012dea:	3ca13823          	sd	a0,976(sp)
    80012dee:	a009                	j	80012df0 <.LBB10_85+0x28>
    80012df0:	0588                	addi	a0,sp,704
    80012df2:	028c                	addi	a1,sp,320
    80012df4:	08000613          	li	a2,128
        let path = from_utf8(&path).unwrap();
    80012df8:	00011097          	auipc	ra,0x11
    80012dfc:	b52080e7          	jalr	-1198(ra) # 8002394a <_ZN4core3str8converts9from_utf817h3f0a2d8686bfd9bbE>
    80012e00:	a009                	j	80012e02 <.LBB10_86>

0000000080012e02 <.LBB10_86>:
    80012e02:	00016597          	auipc	a1,0x16
    80012e06:	5fe58593          	addi	a1,a1,1534 # 80029400 <.L__unnamed_22>
    80012e0a:	0588                	addi	a0,sp,704
    80012e0c:	ffffa097          	auipc	ra,0xffffa
    80012e10:	034080e7          	jalr	52(ra) # 8000ce40 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17he7e280ca90d46427E>
    80012e14:	862a                	mv	a2,a0
    80012e16:	f9b2                	sd	a2,240(sp)
    80012e18:	862e                	mv	a2,a1
    80012e1a:	fdb2                	sd	a2,248(sp)
    80012e1c:	3ca13c23          	sd	a0,984(sp)
    80012e20:	3eb13023          	sd	a1,992(sp)
    80012e24:	a009                	j	80012e26 <.LBB10_86+0x24>
    80012e26:	4501                	li	a0,0
        let mut count = 0;
    80012e28:	2ca13c23          	sd	a0,728(sp)
        loop {
    80012e2c:	a009                	j	80012e2e <.LBB10_86+0x2c>
            if count >= argv.len() {
    80012e2e:	2d813503          	ld	a0,728(sp)
    80012e32:	f1aa                	sd	a0,224(sp)
    80012e34:	0388                	addi	a0,sp,448
    80012e36:	02000593          	li	a1,32
    80012e3a:	0000c097          	auipc	ra,0xc
    80012e3e:	60c080e7          	jalr	1548(ra) # 8001f446 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17ha6c4bb93a093d49eE>
    80012e42:	f5aa                	sd	a0,232(sp)
    80012e44:	a009                	j	80012e46 <.LBB10_86+0x44>
    80012e46:	750e                	ld	a0,224(sp)
    80012e48:	75ae                	ld	a1,232(sp)
    80012e4a:	02b56163          	bltu	a0,a1,80012e6c <.LBB10_86+0x6a>
    80012e4e:	a009                	j	80012e50 <.LBB10_86+0x4e>
    80012e50:	4501                	li	a0,0
                for i in 0..MAXARG {
    80012e52:	2ea13023          	sd	a0,736(sp)
    80012e56:	02000593          	li	a1,32
    80012e5a:	2eb13423          	sd	a1,744(sp)
    80012e5e:	0000d097          	auipc	ra,0xd
    80012e62:	96a080e7          	jalr	-1686(ra) # 8001f7c8 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he0a8d93712e5493bE>
    80012e66:	e9aa                	sd	a0,208(sp)
    80012e68:	edae                	sd	a1,216(sp)
    80012e6a:	a801                	j	80012e7a <.LBB10_86+0x78>
    80012e6c:	4501                	li	a0,0
            let mut buf = [0u8;8];
    80012e6e:	30a13823          	sd	a0,784(sp)
                user_argv + count * size_of::<usize>(), 
    80012e72:	2d813503          	ld	a0,728(sp)
    80012e76:	e5aa                	sd	a0,200(sp)
    80012e78:	a8b5                	j	80012ef4 <.LBB10_86+0xf2>
                for i in 0..MAXARG {
    80012e7a:	656e                	ld	a0,216(sp)
    80012e7c:	65ce                	ld	a1,208(sp)
    80012e7e:	2eb13823          	sd	a1,752(sp)
    80012e82:	2ea13c23          	sd	a0,760(sp)
    80012e86:	a009                	j	80012e88 <.LBB10_86+0x86>
    80012e88:	1d88                	addi	a0,sp,752
    80012e8a:	0000d097          	auipc	ra,0xd
    80012e8e:	8d0080e7          	jalr	-1840(ra) # 8001f75a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE>
    80012e92:	30a13023          	sd	a0,768(sp)
    80012e96:	30b13423          	sd	a1,776(sp)
    80012e9a:	a009                	j	80012e9c <.LBB10_86+0x9a>
    80012e9c:	30013503          	ld	a0,768(sp)
    80012ea0:	4581                	li	a1,0
    80012ea2:	00b50463          	beq	a0,a1,80012eaa <.LBB10_86+0xa8>
    80012ea6:	a009                	j	80012ea8 <.LBB10_86+0xa6>
    80012ea8:	a029                	j	80012eb2 <.LBB10_86+0xb0>
    80012eaa:	4505                	li	a0,1
                return Err(());
    80012eac:	fa2a                	sd	a0,304(sp)
    80012eae:	a4ed                	j	80013198 <.LBB10_86+0x396>
                for i in 0..MAXARG {
    80012eb0:	0000                	unimp
    80012eb2:	30813583          	ld	a1,776(sp)
    80012eb6:	e1ae                	sd	a1,192(sp)
    80012eb8:	3eb13423          	sd	a1,1000(sp)
    80012ebc:	3eb13823          	sd	a1,1008(sp)
    80012ec0:	3eb13c23          	sd	a1,1016(sp)
    80012ec4:	457d                	li	a0,31
                    if argv[i] != 0 as *mut u8 {
    80012ec6:	30b56763          	bltu	a0,a1,800131d4 <.LBB10_86+0x3d2>
    80012eca:	a009                	j	80012ecc <.LBB10_86+0xca>
    80012ecc:	650e                	ld	a0,192(sp)
    80012ece:	00351593          	slli	a1,a0,0x3
    80012ed2:	0388                	addi	a0,sp,448
    80012ed4:	952e                	add	a0,a0,a1
    80012ed6:	6108                	ld	a0,0(a0)
    80012ed8:	4581                	li	a1,0
    80012eda:	00b50963          	beq	a0,a1,80012eec <.LBB10_86+0xea>
    80012ede:	a009                	j	80012ee0 <.LBB10_86+0xde>
    80012ee0:	650e                	ld	a0,192(sp)
    80012ee2:	02000593          	li	a1,32
                        unsafe{ drop_in_place(argv[i] as *mut RawPage) };
    80012ee6:	00b56463          	bltu	a0,a1,80012eee <.LBB10_86+0xec>
    80012eea:	a609                	j	800131ec <.LBB10_87+0x16>
                    if argv[i] != 0 as *mut u8 {
    80012eec:	a019                	j	80012ef2 <.LBB10_86+0xf0>
                        unsafe{ drop_in_place(argv[i] as *mut RawPage) };
    80012eee:	a009                	j	80012ef0 <.LBB10_86+0xee>
                    if argv[i] != 0 as *mut u8 {
    80012ef0:	a009                	j	80012ef2 <.LBB10_86+0xf0>
                for i in 0..MAXARG {
    80012ef2:	bf59                	j	80012e88 <.LBB10_86+0x86>
    80012ef4:	65ae                	ld	a1,200(sp)
    80012ef6:	4505                	li	a0,1
    80012ef8:	1576                	slli	a0,a0,0x3d
    80012efa:	157d                	addi	a0,a0,-1
                user_argv + count * size_of::<usize>(), 
    80012efc:	8d6d                	and	a0,a0,a1
    80012efe:	00359613          	slli	a2,a1,0x3
    80012f02:	fd32                	sd	a2,184(sp)
    80012f04:	30b51063          	bne	a0,a1,80013204 <.LBB10_89>
    80012f08:	a009                	j	80012f0a <.LBB10_86+0x108>
    80012f0a:	6592                	ld	a1,256(sp)
    80012f0c:	756a                	ld	a0,184(sp)
    80012f0e:	952e                	add	a0,a0,a1
    80012f10:	f92a                	sd	a0,176(sp)
    80012f12:	30b56863          	bltu	a0,a1,80013222 <.LBB10_91>
    80012f16:	a009                	j	80012f18 <.LBB10_86+0x116>
            self.copy_form_addr(
    80012f18:	75ca                	ld	a1,176(sp)
    80012f1a:	6572                	ld	a0,280(sp)
    80012f1c:	0e10                	addi	a2,sp,784
    80012f1e:	4721                	li	a4,8
    80012f20:	86ba                	mv	a3,a4
    80012f22:	00002097          	auipc	ra,0x2
    80012f26:	03c080e7          	jalr	60(ra) # 80014f5e <_ZN6kernel7syscall7Syscall14copy_form_addr17h37cb4654fc973487E>
    80012f2a:	f52a                	sd	a0,168(sp)
    80012f2c:	a009                	j	80012f2e <.LBB10_86+0x12c>
    80012f2e:	752a                	ld	a0,168(sp)
    80012f30:	ffffa097          	auipc	ra,0xffffa
    80012f34:	224080e7          	jalr	548(ra) # 8000d154 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h9e3ff03fe8989dd2E>
    80012f38:	30a10fa3          	sb	a0,799(sp)
    80012f3c:	a009                	j	80012f3e <.LBB10_86+0x13c>
            )?;
    80012f3e:	31f14503          	lbu	a0,799(sp)
    80012f42:	8905                	andi	a0,a0,1
    80012f44:	4581                	li	a1,0
    80012f46:	00b50463          	beq	a0,a1,80012f4e <.LBB10_86+0x14c>
    80012f4a:	a009                	j	80012f4c <.LBB10_86+0x14a>
    80012f4c:	a821                	j	80012f64 <.LBB10_86+0x162>
            user_arg = usize::from_le_bytes(buf);
    80012f4e:	31013503          	ld	a0,784(sp)
    80012f52:	32a13023          	sd	a0,800(sp)
    80012f56:	0000b097          	auipc	ra,0xb
    80012f5a:	fda080e7          	jalr	-38(ra) # 8001df30 <_ZN4core3num23_$LT$impl$u20$usize$GT$13from_le_bytes17h3bceb23301b73de9E>
    80012f5e:	f12a                	sd	a0,160(sp)
    80012f60:	a831                	j	80012f7c <.LBB10_86+0x17a>
            self.copy_form_addr(
    80012f62:	0000                	unimp
            )?;
    80012f64:	ffff9097          	auipc	ra,0xffff9
    80012f68:	a5a080e7          	jalr	-1446(ra) # 8000b9be <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h2e645b443ebf2dc7E>
    80012f6c:	a009                	j	80012f6e <.LBB10_86+0x16c>
            self.copy_form_addr(
    80012f6e:	ffffa097          	auipc	ra,0xffffa
    80012f72:	0d2080e7          	jalr	210(ra) # 8000d040 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h74072cf57097ff24E>
    80012f76:	fa2a                	sd	a0,304(sp)
    80012f78:	fe2e                	sd	a1,312(sp)
    80012f7a:	ac39                	j	80013198 <.LBB10_86+0x396>
            user_arg = usize::from_le_bytes(buf);
    80012f7c:	750a                	ld	a0,160(sp)
    80012f7e:	40a13023          	sd	a0,1024(sp)
    80012f82:	4581                	li	a1,0
            if user_arg == 0 {
    80012f84:	00b51b63          	bne	a0,a1,80012f9a <.LBB10_86+0x198>
    80012f88:	a009                	j	80012f8a <.LBB10_86+0x188>
                argv[count] = 0 as *mut u8;
    80012f8a:	2d813503          	ld	a0,728(sp)
    80012f8e:	ed2a                	sd	a0,152(sp)
    80012f90:	02000593          	li	a1,32
    80012f94:	00b56963          	bltu	a0,a1,80012fa6 <.LBB10_86+0x1a4>
    80012f98:	ace9                	j	80013272 <.LBB10_95+0x14>
            let mem = unsafe{ RawPage::new_zeroed() as *mut u8 };
    80012f9a:	ffff7097          	auipc	ra,0xffff7
    80012f9e:	014080e7          	jalr	20(ra) # 80009fae <_ZN6kernel6memory13PageAllocator10new_zeroed17hbc99bdbca8d1d931E>
    80012fa2:	e92a                	sd	a0,144(sp)
    80012fa4:	a00d                	j	80012fc6 <.LBB10_86+0x1c4>
                argv[count] = 0 as *mut u8;
    80012fa6:	656a                	ld	a0,152(sp)
    80012fa8:	00351593          	slli	a1,a0,0x3
    80012fac:	0388                	addi	a0,sp,448
    80012fae:	00b50633          	add	a2,a0,a1
    80012fb2:	4581                	li	a1,0
    80012fb4:	e20c                	sd	a1,0(a2)
    80012fb6:	02000593          	li	a1,32
                argv.as_ptr() as *const *const u8, 
    80012fba:	0000c097          	auipc	ra,0xc
    80012fbe:	4f2080e7          	jalr	1266(ra) # 8001f4ac <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hc3575ad36de0bb27E>
    80012fc2:	e52a                	sd	a0,136(sp)
    80012fc4:	a065                	j	8001306c <.LBB10_86+0x26a>
            let mem = unsafe{ RawPage::new_zeroed() as *mut u8 };
    80012fc6:	654a                	ld	a0,144(sp)
    80012fc8:	85aa                	mv	a1,a0
    80012fca:	fcae                	sd	a1,120(sp)
    80012fcc:	40a13423          	sd	a0,1032(sp)
            argv[count] = mem;
    80012fd0:	2d813583          	ld	a1,728(sp)
    80012fd4:	e12e                	sd	a1,128(sp)
    80012fd6:	457d                	li	a0,31
    80012fd8:	26b56363          	bltu	a0,a1,8001323e <.LBB10_92+0x14>
    80012fdc:	a009                	j	80012fde <.LBB10_86+0x1dc>
    80012fde:	7566                	ld	a0,120(sp)
    80012fe0:	658a                	ld	a1,128(sp)
    80012fe2:	00359613          	slli	a2,a1,0x3
    80012fe6:	038c                	addi	a1,sp,448
    80012fe8:	95b2                	add	a1,a1,a2
    80012fea:	e188                	sd	a0,0(a1)
    80012fec:	6585                	lui	a1,0x1
            let buf = unsafe { from_raw_parts_mut(mem, PGSIZE) };
    80012fee:	ffff2097          	auipc	ra,0xffff2
    80012ff2:	3ca080e7          	jalr	970(ra) # 800053b8 <_ZN4core5slice3raw18from_raw_parts_mut17h0bc9e5c0c3217bc8E>
    80012ff6:	f4aa                	sd	a0,104(sp)
    80012ff8:	f8ae                	sd	a1,112(sp)
    80012ffa:	a009                	j	80012ffc <.LBB10_86+0x1fa>
    80012ffc:	76c6                	ld	a3,112(sp)
    80012ffe:	7626                	ld	a2,104(sp)
    80013000:	758a                	ld	a1,160(sp)
    80013002:	6572                	ld	a0,280(sp)
    80013004:	40c13823          	sd	a2,1040(sp)
    80013008:	40d13c23          	sd	a3,1048(sp)
    8001300c:	6705                	lui	a4,0x1
            self.copy_from_str(
    8001300e:	00002097          	auipc	ra,0x2
    80013012:	e82080e7          	jalr	-382(ra) # 80014e90 <_ZN6kernel7syscall7Syscall13copy_from_str17h5c83be6e0d4b822aE>
    80013016:	f0aa                	sd	a0,96(sp)
    80013018:	a009                	j	8001301a <.LBB10_86+0x218>
    8001301a:	7506                	ld	a0,96(sp)
    8001301c:	ffffa097          	auipc	ra,0xffffa
    80013020:	138080e7          	jalr	312(ra) # 8000d154 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h9e3ff03fe8989dd2E>
    80013024:	32a107a3          	sb	a0,815(sp)
    80013028:	a009                	j	8001302a <.LBB10_86+0x228>
            )?;   
    8001302a:	32f14503          	lbu	a0,815(sp)
    8001302e:	8905                	andi	a0,a0,1
    80013030:	4581                	li	a1,0
    80013032:	00b50463          	beq	a0,a1,8001303a <.LBB10_86+0x238>
    80013036:	a009                	j	80013038 <.LBB10_86+0x236>
    80013038:	a811                	j	8001304c <.LBB10_86+0x24a>
            count += 1;
    8001303a:	2d813583          	ld	a1,728(sp)
    8001303e:	00158513          	addi	a0,a1,1 # 1001 <.Lline_table_start0+0x30c>
    80013042:	ecaa                	sd	a0,88(sp)
    80013044:	20b56963          	bltu	a0,a1,80013256 <.LBB10_94>
    80013048:	a831                	j	80013064 <.LBB10_86+0x262>
            self.copy_from_str(
    8001304a:	0000                	unimp
            )?;   
    8001304c:	ffff9097          	auipc	ra,0xffff9
    80013050:	972080e7          	jalr	-1678(ra) # 8000b9be <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h2e645b443ebf2dc7E>
    80013054:	a009                	j	80013056 <.LBB10_86+0x254>
            self.copy_from_str(
    80013056:	ffffa097          	auipc	ra,0xffffa
    8001305a:	fea080e7          	jalr	-22(ra) # 8000d040 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h74072cf57097ff24E>
    8001305e:	fa2a                	sd	a0,304(sp)
    80013060:	fe2e                	sd	a1,312(sp)
    80013062:	aa1d                	j	80013198 <.LBB10_86+0x396>
            count += 1;
    80013064:	6566                	ld	a0,88(sp)
    80013066:	2ca13c23          	sd	a0,728(sp)
        loop {
    8001306a:	b3d1                	j	80012e2e <.LBB10_86+0x2c>
            from_raw_parts(
    8001306c:	652a                	ld	a0,136(sp)
    8001306e:	02000593          	li	a1,32
    80013072:	ffff2097          	auipc	ra,0xffff2
    80013076:	306080e7          	jalr	774(ra) # 80005378 <_ZN4core5slice3raw14from_raw_parts17h24ea7267a8aa7c05E>
    8001307a:	32a13823          	sd	a0,816(sp)
    8001307e:	32b13c23          	sd	a1,824(sp)
    80013082:	a009                	j	80013084 <.LBB10_86+0x282>
            exec(path, &argv).map_err(
    80013084:	766e                	ld	a2,248(sp)
    80013086:	75ce                	ld	a1,240(sp)
    80013088:	33013683          	ld	a3,816(sp)
    8001308c:	33813703          	ld	a4,824(sp)
    80013090:	0e88                	addi	a0,sp,848
    80013092:	fffee097          	auipc	ra,0xfffee
    80013096:	2ee080e7          	jalr	750(ra) # 80001380 <_ZN6kernel7process3elf4exec17h6cecf459cb29fe26E>
    8001309a:	a009                	j	8001309c <.LBB10_86+0x29a>
    8001309c:	0e88                	addi	a0,sp,848
    8001309e:	ffffa097          	auipc	ra,0xffffa
    800130a2:	efc080e7          	jalr	-260(ra) # 8000cf9a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17hacf552840fbd34a9E>
    800130a6:	e4aa                	sd	a0,72(sp)
    800130a8:	e8ae                	sd	a1,80(sp)
    800130aa:	a009                	j	800130ac <.LBB10_86+0x2aa>
    800130ac:	65c6                	ld	a1,80(sp)
    800130ae:	6526                	ld	a0,72(sp)
    800130b0:	ffffa097          	auipc	ra,0xffffa
    800130b4:	0b8080e7          	jalr	184(ra) # 8000d168 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hb8d2d18a4141e592E>
    800130b8:	34a13023          	sd	a0,832(sp)
    800130bc:	34b13423          	sd	a1,840(sp)
    800130c0:	a009                	j	800130c2 <.LBB10_86+0x2c0>
            )?
    800130c2:	34013503          	ld	a0,832(sp)
    800130c6:	4581                	li	a1,0
    800130c8:	00b50463          	beq	a0,a1,800130d0 <.LBB10_86+0x2ce>
    800130cc:	a009                	j	800130ce <.LBB10_86+0x2cc>
    800130ce:	a03d                	j	800130fc <.LBB10_86+0x2fa>
            exec(path, &argv).map_err(
    800130d0:	34813503          	ld	a0,840(sp)
    800130d4:	f82a                	sd	a0,48(sp)
    800130d6:	42a13023          	sd	a0,1056(sp)
    800130da:	42a13423          	sd	a0,1064(sp)
    800130de:	4501                	li	a0,0
        };
    
        for i in 0..MAXARG {
    800130e0:	36a13423          	sd	a0,872(sp)
    800130e4:	02000593          	li	a1,32
    800130e8:	36b13823          	sd	a1,880(sp)
    800130ec:	0000c097          	auipc	ra,0xc
    800130f0:	6dc080e7          	jalr	1756(ra) # 8001f7c8 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he0a8d93712e5493bE>
    800130f4:	fc2a                	sd	a0,56(sp)
    800130f6:	e0ae                	sd	a1,64(sp)
    800130f8:	a831                	j	80013114 <.LBB10_86+0x312>
            exec(path, &argv).map_err(
    800130fa:	0000                	unimp
            )?
    800130fc:	ffff9097          	auipc	ra,0xffff9
    80013100:	8c2080e7          	jalr	-1854(ra) # 8000b9be <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h2e645b443ebf2dc7E>
    80013104:	a009                	j	80013106 <.LBB10_86+0x304>
            exec(path, &argv).map_err(
    80013106:	ffffa097          	auipc	ra,0xffffa
    8001310a:	f3a080e7          	jalr	-198(ra) # 8000d040 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h74072cf57097ff24E>
    8001310e:	fa2a                	sd	a0,304(sp)
    80013110:	fe2e                	sd	a1,312(sp)
    80013112:	a059                	j	80013198 <.LBB10_86+0x396>
        for i in 0..MAXARG {
    80013114:	6506                	ld	a0,64(sp)
    80013116:	75e2                	ld	a1,56(sp)
    80013118:	36b13c23          	sd	a1,888(sp)
    8001311c:	38a13023          	sd	a0,896(sp)
    80013120:	a009                	j	80013122 <.LBB10_86+0x320>
    80013122:	1ea8                	addi	a0,sp,888
    80013124:	0000c097          	auipc	ra,0xc
    80013128:	636080e7          	jalr	1590(ra) # 8001f75a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE>
    8001312c:	38a13423          	sd	a0,904(sp)
    80013130:	38b13823          	sd	a1,912(sp)
    80013134:	a009                	j	80013136 <.LBB10_86+0x334>
    80013136:	38813503          	ld	a0,904(sp)
    8001313a:	4581                	li	a1,0
    8001313c:	00b50463          	beq	a0,a1,80013144 <.LBB10_86+0x342>
    80013140:	a009                	j	80013142 <.LBB10_86+0x340>
    80013142:	a039                	j	80013150 <.LBB10_86+0x34e>
            if argv[i] != 0 as *mut u8 {
                unsafe{ drop_in_place(argv[i] as *mut RawPage) };
            }
        }
        // println!("[Debug] sys_exec return {}", ret);
        Ok(ret)
    80013144:	7542                	ld	a0,48(sp)
    80013146:	fe2a                	sd	a0,312(sp)
    80013148:	4501                	li	a0,0
    8001314a:	fa2a                	sd	a0,304(sp)
    }
    8001314c:	a0b1                	j	80013198 <.LBB10_86+0x396>
        for i in 0..MAXARG {
    8001314e:	0000                	unimp
    80013150:	39013503          	ld	a0,912(sp)
    80013154:	f02a                	sd	a0,32(sp)
    80013156:	42a13823          	sd	a0,1072(sp)
    8001315a:	42a13c23          	sd	a0,1080(sp)
    8001315e:	44a13023          	sd	a0,1088(sp)
            if argv[i] != 0 as *mut u8 {
    80013162:	33813583          	ld	a1,824(sp)
    80013166:	f42e                	sd	a1,40(sp)
    80013168:	12b57163          	bgeu	a0,a1,8001328a <.LBB10_96+0x16>
    8001316c:	a009                	j	8001316e <.LBB10_86+0x36c>
    8001316e:	7582                	ld	a1,32(sp)
    80013170:	33013503          	ld	a0,816(sp)
    80013174:	058e                	slli	a1,a1,0x3
    80013176:	952e                	add	a0,a0,a1
    80013178:	6108                	ld	a0,0(a0)
    8001317a:	4581                	li	a1,0
    8001317c:	00b50a63          	beq	a0,a1,80013190 <.LBB10_86+0x38e>
    80013180:	a009                	j	80013182 <.LBB10_86+0x380>
                unsafe{ drop_in_place(argv[i] as *mut RawPage) };
    80013182:	7502                	ld	a0,32(sp)
    80013184:	33813583          	ld	a1,824(sp)
    80013188:	ec2e                	sd	a1,24(sp)
    8001318a:	00b56463          	bltu	a0,a1,80013192 <.LBB10_86+0x390>
    8001318e:	aa09                	j	800132a0 <.LBB10_97+0x12>
            if argv[i] != 0 as *mut u8 {
    80013190:	a019                	j	80013196 <.LBB10_86+0x394>
                unsafe{ drop_in_place(argv[i] as *mut RawPage) };
    80013192:	a009                	j	80013194 <.LBB10_86+0x392>
            if argv[i] != 0 as *mut u8 {
    80013194:	a009                	j	80013196 <.LBB10_86+0x394>
        for i in 0..MAXARG {
    80013196:	b771                	j	80013122 <.LBB10_86+0x320>
    }
    80013198:	7552                	ld	a0,304(sp)
    8001319a:	75f2                	ld	a1,312(sp)
    8001319c:	44813083          	ld	ra,1096(sp)
    800131a0:	45010113          	addi	sp,sp,1104
    800131a4:	8082                	ret
    800131a6:	7592                	ld	a1,288(sp)
    800131a8:	7532                	ld	a0,296(sp)
    800131aa:	e82a                	sd	a0,16(sp)
    800131ac:	00b50963          	beq	a0,a1,800131be <.LBB10_86+0x3bc>
    800131b0:	a009                	j	800131b2 <.LBB10_86+0x3b0>
    800131b2:	6542                	ld	a0,16(sp)
    800131b4:	4581                	li	a1,0
    800131b6:	e10c                	sd	a1,0(a0)
    800131b8:	0521                	addi	a0,a0,8
    800131ba:	f62a                	sd	a0,296(sp)
    800131bc:	b7ed                	j	800131a6 <.LBB10_86+0x3a4>
        let addr = self.arg(0);
    800131be:	6572                	ld	a0,280(sp)
    800131c0:	4581                	li	a1,0
    800131c2:	00002097          	auipc	ra,0x2
    800131c6:	c1e080e7          	jalr	-994(ra) # 80014de0 <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    800131ca:	85aa                	mv	a1,a0
    800131cc:	e62e                	sd	a1,264(sp)
    800131ce:	3ca13423          	sd	a0,968(sp)
    800131d2:	bef1                	j	80012dae <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_exec17h5f20106c7a7bbe80E+0x28>
                    if argv[i] != 0 as *mut u8 {
    800131d4:	650e                	ld	a0,192(sp)

00000000800131d6 <.LBB10_87>:
    800131d6:	00016617          	auipc	a2,0x16
    800131da:	24260613          	addi	a2,a2,578 # 80029418 <.L__unnamed_23>
    800131de:	02000593          	li	a1,32
    800131e2:	0000f097          	auipc	ra,0xf
    800131e6:	f46080e7          	jalr	-186(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    800131ea:	0000                	unimp
                        unsafe{ drop_in_place(argv[i] as *mut RawPage) };
    800131ec:	650e                	ld	a0,192(sp)

00000000800131ee <.LBB10_88>:
    800131ee:	00016617          	auipc	a2,0x16
    800131f2:	24260613          	addi	a2,a2,578 # 80029430 <.L__unnamed_24>
    800131f6:	02000593          	li	a1,32
    800131fa:	0000f097          	auipc	ra,0xf
    800131fe:	f2e080e7          	jalr	-210(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

0000000080013204 <.LBB10_89>:
                user_argv + count * size_of::<usize>(), 
    80013204:	00016517          	auipc	a0,0x16
    80013208:	25c50513          	addi	a0,a0,604 # 80029460 <str.0>

000000008001320c <.LBB10_90>:
    8001320c:	00016617          	auipc	a2,0x16
    80013210:	23c60613          	addi	a2,a2,572 # 80029448 <.L__unnamed_25>
    80013214:	02100593          	li	a1,33
    80013218:	0000f097          	auipc	ra,0xf
    8001321c:	ee4080e7          	jalr	-284(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080013222 <.LBB10_91>:
    80013222:	00016517          	auipc	a0,0x16
    80013226:	27e50513          	addi	a0,a0,638 # 800294a0 <str.1>

000000008001322a <.LBB10_92>:
    8001322a:	00016617          	auipc	a2,0x16
    8001322e:	25e60613          	addi	a2,a2,606 # 80029488 <.L__unnamed_26>
    80013232:	45f1                	li	a1,28
    80013234:	0000f097          	auipc	ra,0xf
    80013238:	ec8080e7          	jalr	-312(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8001323c:	0000                	unimp
            argv[count] = mem;
    8001323e:	650a                	ld	a0,128(sp)

0000000080013240 <.LBB10_93>:
    80013240:	00016617          	auipc	a2,0x16
    80013244:	28060613          	addi	a2,a2,640 # 800294c0 <.L__unnamed_27>
    80013248:	02000593          	li	a1,32
    8001324c:	0000f097          	auipc	ra,0xf
    80013250:	edc080e7          	jalr	-292(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

0000000080013256 <.LBB10_94>:
            count += 1;
    80013256:	00016517          	auipc	a0,0x16
    8001325a:	24a50513          	addi	a0,a0,586 # 800294a0 <str.1>

000000008001325e <.LBB10_95>:
    8001325e:	00016617          	auipc	a2,0x16
    80013262:	27a60613          	addi	a2,a2,634 # 800294d8 <.L__unnamed_28>
    80013266:	45f1                	li	a1,28
    80013268:	0000f097          	auipc	ra,0xf
    8001326c:	e94080e7          	jalr	-364(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80013270:	0000                	unimp
                argv[count] = 0 as *mut u8;
    80013272:	656a                	ld	a0,152(sp)

0000000080013274 <.LBB10_96>:
    80013274:	00016617          	auipc	a2,0x16
    80013278:	27c60613          	addi	a2,a2,636 # 800294f0 <.L__unnamed_29>
    8001327c:	02000593          	li	a1,32
    80013280:	0000f097          	auipc	ra,0xf
    80013284:	ea8080e7          	jalr	-344(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80013288:	0000                	unimp
            if argv[i] != 0 as *mut u8 {
    8001328a:	75a2                	ld	a1,40(sp)
    8001328c:	7502                	ld	a0,32(sp)

000000008001328e <.LBB10_97>:
    8001328e:	00016617          	auipc	a2,0x16
    80013292:	27a60613          	addi	a2,a2,634 # 80029508 <.L__unnamed_30>
    80013296:	0000f097          	auipc	ra,0xf
    8001329a:	e92080e7          	jalr	-366(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    8001329e:	0000                	unimp
                unsafe{ drop_in_place(argv[i] as *mut RawPage) };
    800132a0:	65e2                	ld	a1,24(sp)
    800132a2:	7502                	ld	a0,32(sp)

00000000800132a4 <.LBB10_98>:
    800132a4:	00016617          	auipc	a2,0x16
    800132a8:	27c60613          	addi	a2,a2,636 # 80029520 <.L__unnamed_31>
    800132ac:	0000f097          	auipc	ra,0xf
    800132b0:	e7c080e7          	jalr	-388(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$9sys_mknod17h6bbc97745668998fE:

00000000800132b6 <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$9sys_mknod17h6bbc97745668998fE>:

    pub fn sys_mknod(&self) -> SysResult {
    800132b6:	7161                	addi	sp,sp,-432
    800132b8:	f706                	sd	ra,424(sp)
    800132ba:	f82a                	sd	a0,48(sp)
    800132bc:	faaa                	sd	a0,368(sp)
    800132be:	05710513          	addi	a0,sp,87
    800132c2:	4581                	li	a1,0
    800132c4:	08000613          	li	a2,128
        let mut path: [u8; MAXPATH] = [0;MAXPATH];
    800132c8:	00012097          	auipc	ra,0x12
    800132cc:	dc4080e7          	jalr	-572(ra) # 8002508c <memset>
        let major = self.arg(1);
    800132d0:	7542                	ld	a0,48(sp)
    800132d2:	4585                	li	a1,1
    800132d4:	00002097          	auipc	ra,0x2
    800132d8:	b0c080e7          	jalr	-1268(ra) # 80014de0 <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    800132dc:	85aa                	mv	a1,a0
    800132de:	fc2e                	sd	a1,56(sp)
    800132e0:	e72a                	sd	a0,392(sp)
    800132e2:	a009                	j	800132e4 <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$9sys_mknod17h6bbc97745668998fE+0x2e>
        let minor = self.arg(2);
    800132e4:	7542                	ld	a0,48(sp)
    800132e6:	4589                	li	a1,2
    800132e8:	00002097          	auipc	ra,0x2
    800132ec:	af8080e7          	jalr	-1288(ra) # 80014de0 <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    800132f0:	85aa                	mv	a1,a0
    800132f2:	f42e                	sd	a1,40(sp)
    800132f4:	eb2a                	sd	a0,400(sp)
    800132f6:	a009                	j	800132f8 <.LBB11_25>

00000000800132f8 <.LBB11_25>:
        LOG.begin_op();
    800132f8:	00046517          	auipc	a0,0x46
    800132fc:	37050513          	addi	a0,a0,880 # 80059668 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    80013300:	ffff6097          	auipc	ra,0xffff6
    80013304:	8fc080e7          	jalr	-1796(ra) # 80008bfc <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$8begin_op17he5b49a48c716e372E>
    80013308:	a009                	j	8001330a <.LBB11_25+0x12>
        // Get file path
        let addr = self.arg(0);
    8001330a:	7542                	ld	a0,48(sp)
    8001330c:	4581                	li	a1,0
    8001330e:	00002097          	auipc	ra,0x2
    80013312:	ad2080e7          	jalr	-1326(ra) # 80014de0 <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    80013316:	85aa                	mv	a1,a0
    80013318:	f02e                	sd	a1,32(sp)
    8001331a:	ef2a                	sd	a0,408(sp)
    8001331c:	a009                	j	8001331e <.LBB11_25+0x26>
        self.copy_from_str(addr, &mut path, MAXPATH)?;
    8001331e:	7582                	ld	a1,32(sp)
    80013320:	7542                	ld	a0,48(sp)
    80013322:	05710613          	addi	a2,sp,87
    80013326:	08000713          	li	a4,128
    8001332a:	86ba                	mv	a3,a4
    8001332c:	00002097          	auipc	ra,0x2
    80013330:	b64080e7          	jalr	-1180(ra) # 80014e90 <_ZN6kernel7syscall7Syscall13copy_from_str17h5c83be6e0d4b822aE>
    80013334:	ec2a                	sd	a0,24(sp)
    80013336:	a009                	j	80013338 <.LBB11_25+0x40>
    80013338:	6562                	ld	a0,24(sp)
    8001333a:	ffffa097          	auipc	ra,0xffffa
    8001333e:	e1a080e7          	jalr	-486(ra) # 8000d154 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h9e3ff03fe8989dd2E>
    80013342:	0ca10ba3          	sb	a0,215(sp)
    80013346:	a009                	j	80013348 <.LBB11_25+0x50>
    80013348:	0d714503          	lbu	a0,215(sp)
    8001334c:	8905                	andi	a0,a0,1
    8001334e:	4581                	li	a1,0
    80013350:	00b50463          	beq	a0,a1,80013358 <.LBB11_25+0x60>
    80013354:	a009                	j	80013356 <.LBB11_25+0x5e>
    80013356:	a02d                	j	80013380 <.LBB11_26+0x1e>
    80013358:	7822                	ld	a6,40(sp)
    8001335a:	77e2                	ld	a5,56(sp)
    8001335c:	470d                	li	a4,3
        match ICACHE.create(
            &path, 
            InodeType::Device, 
    8001335e:	0ee11b23          	sh	a4,246(sp)

0000000080013362 <.LBB11_26>:
        match ICACHE.create(
    80013362:	00046597          	auipc	a1,0x46
    80013366:	3ae58593          	addi	a1,a1,942 # 80059710 <_ZN6kernel2fs5inode6ICACHE17had1be8942ca79bf1E>
    8001336a:	09a8                	addi	a0,sp,216
    8001336c:	05710613          	addi	a2,sp,87
    80013370:	08000693          	li	a3,128
    80013374:	00006097          	auipc	ra,0x6
    80013378:	f8c080e7          	jalr	-116(ra) # 80019300 <_ZN6kernel2fs5inode10InodeCache6create17hf2583436fcb9d2ecE>
    8001337c:	a831                	j	80013398 <.LBB11_26+0x36>
        self.copy_from_str(addr, &mut path, MAXPATH)?;
    8001337e:	0000                	unimp
    80013380:	ffff8097          	auipc	ra,0xffff8
    80013384:	63e080e7          	jalr	1598(ra) # 8000b9be <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h2e645b443ebf2dc7E>
    80013388:	a009                	j	8001338a <.LBB11_26+0x28>
    8001338a:	ffffa097          	auipc	ra,0xffffa
    8001338e:	cb6080e7          	jalr	-842(ra) # 8000d040 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h74072cf57097ff24E>
    80013392:	e0aa                	sd	a0,64(sp)
    80013394:	e4ae                	sd	a1,72(sp)
    80013396:	a07d                	j	80013444 <.LBB11_30+0x1a>
            major as i16, 
            minor as i16
        ) {
            Ok(inode) => {
    80013398:	656e                	ld	a0,216(sp)
    8001339a:	4581                	li	a1,0
    8001339c:	02b50663          	beq	a0,a1,800133c8 <.LBB11_27+0x18>
    800133a0:	a009                	j	800133a2 <.LBB11_26+0x40>
                LOG.end_op();
                drop(inode);
                Ok(0)
            },
    
            Err(err) => {
    800133a2:	758e                	ld	a1,224(sp)
    800133a4:	752e                	ld	a0,232(sp)
    800133a6:	ee2e                	sd	a1,280(sp)
    800133a8:	f22a                	sd	a0,288(sp)
    800133aa:	0a28                	addi	a0,sp,280
                println!("[Kernel] sys_mknod: err: {}", err);
    800133ac:	f6aa                	sd	a0,360(sp)
    800133ae:	f32a                	sd	a0,416(sp)

00000000800133b0 <.LBB11_27>:
    800133b0:	0000b597          	auipc	a1,0xb
    800133b4:	06858593          	addi	a1,a1,104 # 8001e418 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E>
    800133b8:	0000b097          	auipc	ra,0xb
    800133bc:	084080e7          	jalr	132(ra) # 8001e43c <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>
    800133c0:	e42a                	sd	a0,8(sp)
    800133c2:	e82e                	sd	a1,16(sp)
    800133c4:	a825                	j	800133fc <.LBB11_28+0x2c>
        match ICACHE.create(
    800133c6:	0000                	unimp
            Ok(inode) => {
    800133c8:	752e                	ld	a0,232(sp)
    800133ca:	e22a                	sd	a0,256(sp)
    800133cc:	750e                	ld	a0,224(sp)
    800133ce:	fdaa                	sd	a0,248(sp)

00000000800133d0 <.LBB11_28>:
                LOG.end_op();
    800133d0:	00046517          	auipc	a0,0x46
    800133d4:	29850513          	addi	a0,a0,664 # 80059668 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    800133d8:	ffff6097          	auipc	ra,0xffff6
    800133dc:	e0a080e7          	jalr	-502(ra) # 800091e2 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>
    800133e0:	a009                	j	800133e2 <.LBB11_28+0x12>
                drop(inode);
    800133e2:	6592                	ld	a1,256(sp)
    800133e4:	ea2e                	sd	a1,272(sp)
    800133e6:	756e                	ld	a0,248(sp)
    800133e8:	e62a                	sd	a0,264(sp)
    800133ea:	0000a097          	auipc	ra,0xa
    800133ee:	b84080e7          	jalr	-1148(ra) # 8001cf6e <_ZN4core3mem4drop17hb93abdfe16b94be5E>
    800133f2:	a009                	j	800133f4 <.LBB11_28+0x24>
    800133f4:	4501                	li	a0,0
                Ok(0)
    800133f6:	e4aa                	sd	a0,72(sp)
    800133f8:	e0aa                	sd	a0,64(sp)
        match ICACHE.create(
    800133fa:	a0a1                	j	80013442 <.LBB11_30+0x18>
                println!("[Kernel] sys_mknod: err: {}", err);
    800133fc:	6542                	ld	a0,16(sp)
    800133fe:	65a2                	ld	a1,8(sp)
    80013400:	eeae                	sd	a1,344(sp)
    80013402:	f2aa                	sd	a0,352(sp)

0000000080013404 <.LBB11_29>:
    80013404:	00016597          	auipc	a1,0x16
    80013408:	15458593          	addi	a1,a1,340 # 80029558 <.L__unnamed_32>
    8001340c:	1228                	addi	a0,sp,296
    8001340e:	4609                	li	a2,2
    80013410:	0ab4                	addi	a3,sp,344
    80013412:	4705                	li	a4,1
    80013414:	ffff2097          	auipc	ra,0xffff2
    80013418:	020080e7          	jalr	32(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8001341c:	a009                	j	8001341e <.LBB11_29+0x1a>
    8001341e:	1228                	addi	a0,sp,296
    80013420:	0000a097          	auipc	ra,0xa
    80013424:	790080e7          	jalr	1936(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    80013428:	a009                	j	8001342a <.LBB11_30>

000000008001342a <.LBB11_30>:
                LOG.end_op();
    8001342a:	00046517          	auipc	a0,0x46
    8001342e:	23e50513          	addi	a0,a0,574 # 80059668 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    80013432:	ffff6097          	auipc	ra,0xffff6
    80013436:	db0080e7          	jalr	-592(ra) # 800091e2 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>
    8001343a:	a009                	j	8001343c <.LBB11_30+0x12>
    8001343c:	4505                	li	a0,1
                Err(())
    8001343e:	e0aa                	sd	a0,64(sp)
        match ICACHE.create(
    80013440:	a009                	j	80013442 <.LBB11_30+0x18>
            }
        }
    
    }
    80013442:	a009                	j	80013444 <.LBB11_30+0x1a>
    80013444:	6506                	ld	a0,64(sp)
    80013446:	65a6                	ld	a1,72(sp)
    80013448:	70ba                	ld	ra,424(sp)
    8001344a:	615d                	addi	sp,sp,432
    8001344c:	8082                	ret

Disassembly of section .text._ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$9sys_close17haaef41d651f2f6f7E:

000000008001344e <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$9sys_close17haaef41d651f2f6f7E>:

    pub fn sys_close(&self) -> SysResult {
    8001344e:	715d                	addi	sp,sp,-80
    80013450:	e486                	sd	ra,72(sp)
    80013452:	f82a                	sd	a0,48(sp)
    80013454:	4581                	li	a1,0
        let fd = self.arg(0);
    80013456:	00002097          	auipc	ra,0x2
    8001345a:	98a080e7          	jalr	-1654(ra) # 80014de0 <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    8001345e:	85aa                	mv	a1,a0
    80013460:	e82e                	sd	a1,16(sp)
    80013462:	fc2a                	sd	a0,56(sp)
    80013464:	a009                	j	80013466 <.LBB12_8>

0000000080013466 <.LBB12_8>:
        let task = unsafe { CPU_MANAGER.myproc().unwrap() };
    80013466:	00051517          	auipc	a0,0x51
    8001346a:	cda50513          	addi	a0,a0,-806 # 80064140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    8001346e:	ffffe097          	auipc	ra,0xffffe
    80013472:	5bc080e7          	jalr	1468(ra) # 80011a2a <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    80013476:	e42a                	sd	a0,8(sp)
    80013478:	a009                	j	8001347a <.LBB12_8+0x14>
    8001347a:	6522                	ld	a0,8(sp)

000000008001347c <.LBB12_9>:
    8001347c:	00016597          	auipc	a1,0x16
    80013480:	0fc58593          	addi	a1,a1,252 # 80029578 <.L__unnamed_33>
    80013484:	ffffc097          	auipc	ra,0xffffc
    80013488:	838080e7          	jalr	-1992(ra) # 8000ecbc <_ZN4core6option15Option$LT$T$GT$6unwrap17h81f0c84c54a80648E>
    8001348c:	e02a                	sd	a0,0(sp)
    8001348e:	a009                	j	80013490 <.LBB12_9+0x14>
    80013490:	65c2                	ld	a1,16(sp)
    80013492:	6502                	ld	a0,0(sp)
    80013494:	e0aa                	sd	a0,64(sp)
    80013496:	06300513          	li	a0,99
        // 使用 take() 夺取所有权来将引用数减 1
        task.open_files[fd].take();
    8001349a:	02b56c63          	bltu	a0,a1,800134d2 <.LBB12_9+0x56>
    8001349e:	a009                	j	800134a0 <.LBB12_9+0x24>
    800134a0:	6502                	ld	a0,0(sp)
    800134a2:	65c2                	ld	a1,16(sp)
    800134a4:	058e                	slli	a1,a1,0x3
    800134a6:	952e                	add	a0,a0,a1
    800134a8:	0a850513          	addi	a0,a0,168
    800134ac:	ffffb097          	auipc	ra,0xffffb
    800134b0:	162080e7          	jalr	354(ra) # 8000e60e <_ZN4core6option15Option$LT$T$GT$4take17h80e6997975665939E>
    800134b4:	f42a                	sd	a0,40(sp)
    800134b6:	a009                	j	800134b8 <.LBB12_9+0x3c>
    800134b8:	1028                	addi	a0,sp,40
    800134ba:	ffff4097          	auipc	ra,0xffff4
    800134be:	bd0080e7          	jalr	-1072(ra) # 8000708a <_ZN4core3ptr96drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$$GT$17hc79d9c89cd1d7f36E>
    800134c2:	a009                	j	800134c4 <.LBB12_9+0x48>
    800134c4:	4581                	li	a1,0
        Ok(0)
    800134c6:	f02e                	sd	a1,32(sp)
    800134c8:	ec2e                	sd	a1,24(sp)
    }
    800134ca:	852e                	mv	a0,a1
    800134cc:	60a6                	ld	ra,72(sp)
    800134ce:	6161                	addi	sp,sp,80
    800134d0:	8082                	ret
        task.open_files[fd].take();
    800134d2:	6542                	ld	a0,16(sp)

00000000800134d4 <.LBB12_10>:
    800134d4:	00016617          	auipc	a2,0x16
    800134d8:	0bc60613          	addi	a2,a2,188 # 80029590 <.L__unnamed_34>
    800134dc:	06400593          	li	a1,100
    800134e0:	0000f097          	auipc	ra,0xf
    800134e4:	c48080e7          	jalr	-952(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$9sys_fstat17h0c7ad2f655d0446dE:

00000000800134ea <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$9sys_fstat17h0c7ad2f655d0446dE>:

    pub fn sys_fstat(&self) -> SysResult {
    800134ea:	7111                	addi	sp,sp,-256
    800134ec:	fd86                	sd	ra,248(sp)
    800134ee:	e0aa                	sd	a0,64(sp)
    800134f0:	e5aa                	sd	a0,200(sp)
    800134f2:	4581                	li	a1,0
        let fd = self.arg(0);
    800134f4:	00002097          	auipc	ra,0x2
    800134f8:	8ec080e7          	jalr	-1812(ra) # 80014de0 <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    800134fc:	85aa                	mv	a1,a0
    800134fe:	e4ae                	sd	a1,72(sp)
    80013500:	e9aa                	sd	a0,208(sp)
    80013502:	a009                	j	80013504 <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$9sys_fstat17h0c7ad2f655d0446dE+0x1a>
        let stat = self.arg(1);
    80013504:	6506                	ld	a0,64(sp)
    80013506:	4585                	li	a1,1
    80013508:	00002097          	auipc	ra,0x2
    8001350c:	8d8080e7          	jalr	-1832(ra) # 80014de0 <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    80013510:	85aa                	mv	a1,a0
    80013512:	fc2e                	sd	a1,56(sp)
    80013514:	edaa                	sd	a0,216(sp)
    80013516:	a009                	j	80013518 <.LBB13_19>

0000000080013518 <.LBB13_19>:

        #[cfg(feature = "kernel_debug")]
        println!("[Kernel] sys_fstat: fd: {}, stat:0x{:x}", fd, stat);

        let task = unsafe { CPU_MANAGER.myproc().unwrap() };
    80013518:	00051517          	auipc	a0,0x51
    8001351c:	c2850513          	addi	a0,a0,-984 # 80064140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    80013520:	ffffe097          	auipc	ra,0xffffe
    80013524:	50a080e7          	jalr	1290(ra) # 80011a2a <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    80013528:	f82a                	sd	a0,48(sp)
    8001352a:	a009                	j	8001352c <.LBB13_19+0x14>
    8001352c:	7542                	ld	a0,48(sp)

000000008001352e <.LBB13_20>:
    8001352e:	00016597          	auipc	a1,0x16
    80013532:	07a58593          	addi	a1,a1,122 # 800295a8 <.L__unnamed_35>
    80013536:	ffffb097          	auipc	ra,0xffffb
    8001353a:	786080e7          	jalr	1926(ra) # 8000ecbc <_ZN4core6option15Option$LT$T$GT$6unwrap17h81f0c84c54a80648E>
    8001353e:	f42a                	sd	a0,40(sp)
    80013540:	a009                	j	80013542 <.LBB13_20+0x14>
    80013542:	65a6                	ld	a1,72(sp)
    80013544:	7522                	ld	a0,40(sp)
    80013546:	f1aa                	sd	a0,224(sp)
    80013548:	06300513          	li	a0,99
        let file = task.open_files[fd].as_ref().unwrap();
    8001354c:	0cb56963          	bltu	a0,a1,8001361e <.LBB13_23+0x36>
    80013550:	a009                	j	80013552 <.LBB13_20+0x24>
    80013552:	7522                	ld	a0,40(sp)
    80013554:	65a6                	ld	a1,72(sp)
    80013556:	058e                	slli	a1,a1,0x3
    80013558:	952e                	add	a0,a0,a1
    8001355a:	0a850513          	addi	a0,a0,168
    8001355e:	ffffb097          	auipc	ra,0xffffb
    80013562:	41e080e7          	jalr	1054(ra) # 8000e97c <_ZN4core6option15Option$LT$T$GT$6as_ref17h0cd8921964ab0966E>
    80013566:	f02a                	sd	a0,32(sp)
    80013568:	a009                	j	8001356a <.LBB13_20+0x3c>
    8001356a:	7502                	ld	a0,32(sp)

000000008001356c <.LBB13_21>:
    8001356c:	00016597          	auipc	a1,0x16
    80013570:	06c58593          	addi	a1,a1,108 # 800295d8 <.L__unnamed_36>
    80013574:	ffffb097          	auipc	ra,0xffffb
    80013578:	77e080e7          	jalr	1918(ra) # 8000ecf2 <_ZN4core6option15Option$LT$T$GT$6unwrap17h84dba6f31c77e511E>
    8001357c:	85aa                	mv	a1,a0
    8001357e:	ec2e                	sd	a1,24(sp)
    80013580:	f5aa                	sd	a0,232(sp)
    80013582:	a009                	j	80013584 <.LBB13_21+0x18>

        #[cfg(feature = "kernel_debug")]
        println!("[Kernel] sys_fstat: File Type: {:?}", file.ftype);

        match file.stat(stat) {
    80013584:	6562                	ld	a0,24(sp)
    80013586:	fffef097          	auipc	ra,0xfffef
    8001358a:	044080e7          	jalr	68(ra) # 800025ca <_ZN69_$LT$alloc..sync..Arc$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h7c280ba665690166E>
    8001358e:	e82a                	sd	a0,16(sp)
    80013590:	a009                	j	80013592 <.LBB13_21+0x26>
    80013592:	75e2                	ld	a1,56(sp)
    80013594:	6542                	ld	a0,16(sp)
    80013596:	ffff3097          	auipc	ra,0xffff3
    8001359a:	a08080e7          	jalr	-1528(ra) # 80005f9e <_ZN6kernel2fs4file5VFile4stat17heebdb0d64a039b86E>
    8001359e:	f0aa                	sd	a0,96(sp)
    800135a0:	f4ae                	sd	a1,104(sp)
    800135a2:	a009                	j	800135a4 <.LBB13_21+0x38>
            Ok(()) => {
    800135a4:	7506                	ld	a0,96(sp)
    800135a6:	00a035b3          	snez	a1,a0
    800135aa:	4581                	li	a1,0
    800135ac:	02b50663          	beq	a0,a1,800135d8 <.LBB13_22+0x18>
    800135b0:	a009                	j	800135b2 <.LBB13_21+0x46>
                return Ok(0)
            },

            Err(err) => {
    800135b2:	7586                	ld	a1,96(sp)
    800135b4:	7526                	ld	a0,104(sp)
    800135b6:	f8ae                	sd	a1,112(sp)
    800135b8:	fcaa                	sd	a0,120(sp)
    800135ba:	1888                	addi	a0,sp,112
                println!("[Kernel] sys_stat: err: {}", err);
    800135bc:	e1aa                	sd	a0,192(sp)
    800135be:	f9aa                	sd	a0,240(sp)

00000000800135c0 <.LBB13_22>:
    800135c0:	0000b597          	auipc	a1,0xb
    800135c4:	e5858593          	addi	a1,a1,-424 # 8001e418 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E>
    800135c8:	0000b097          	auipc	ra,0xb
    800135cc:	e74080e7          	jalr	-396(ra) # 8001e43c <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>
    800135d0:	e02a                	sd	a0,0(sp)
    800135d2:	e42e                	sd	a1,8(sp)
    800135d4:	a031                	j	800135e0 <.LBB13_22+0x20>
        match file.stat(stat) {
    800135d6:	0000                	unimp
    800135d8:	4501                	li	a0,0
                return Ok(0)
    800135da:	ecaa                	sd	a0,88(sp)
    800135dc:	e8aa                	sd	a0,80(sp)
    800135de:	a81d                	j	80013614 <.LBB13_23+0x2c>
                println!("[Kernel] sys_stat: err: {}", err);
    800135e0:	6522                	ld	a0,8(sp)
    800135e2:	6582                	ld	a1,0(sp)
    800135e4:	f92e                	sd	a1,176(sp)
    800135e6:	fd2a                	sd	a0,184(sp)

00000000800135e8 <.LBB13_23>:
    800135e8:	00016597          	auipc	a1,0x16
    800135ec:	02058593          	addi	a1,a1,32 # 80029608 <.L__unnamed_37>
    800135f0:	0108                	addi	a0,sp,128
    800135f2:	4609                	li	a2,2
    800135f4:	1914                	addi	a3,sp,176
    800135f6:	4705                	li	a4,1
    800135f8:	ffff2097          	auipc	ra,0xffff2
    800135fc:	e3c080e7          	jalr	-452(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80013600:	a009                	j	80013602 <.LBB13_23+0x1a>
    80013602:	0108                	addi	a0,sp,128
    80013604:	0000a097          	auipc	ra,0xa
    80013608:	5ac080e7          	jalr	1452(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8001360c:	a009                	j	8001360e <.LBB13_23+0x26>
    8001360e:	4505                	li	a0,1
                return Err(())
    80013610:	e8aa                	sd	a0,80(sp)
    80013612:	a009                	j	80013614 <.LBB13_23+0x2c>
            }
        }
    }
    80013614:	6546                	ld	a0,80(sp)
    80013616:	65e6                	ld	a1,88(sp)
    80013618:	70ee                	ld	ra,248(sp)
    8001361a:	6111                	addi	sp,sp,256
    8001361c:	8082                	ret
        let file = task.open_files[fd].as_ref().unwrap();
    8001361e:	6526                	ld	a0,72(sp)

0000000080013620 <.LBB13_24>:
    80013620:	00016617          	auipc	a2,0x16
    80013624:	fa060613          	addi	a2,a2,-96 # 800295c0 <.L__unnamed_38>
    80013628:	06400593          	li	a1,100
    8001362c:	0000f097          	auipc	ra,0xf
    80013630:	afc080e7          	jalr	-1284(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$9sys_chdir17he6ad16137b6ff3daE:

0000000080013636 <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$9sys_chdir17he6ad16137b6ff3daE>:

    pub fn sys_chdir(&self) -> SysResult {
    80013636:	7109                	addi	sp,sp,-384
    80013638:	fe86                	sd	ra,376(sp)
    8001363a:	f82a                	sd	a0,48(sp)
    8001363c:	eaaa                	sd	a0,336(sp)
    8001363e:	4581                	li	a1,0
        let mut path = [0u8; MAXPATH];
    80013640:	14b107a3          	sb	a1,335(sp)
    80013644:	04f10513          	addi	a0,sp,79
    80013648:	08000613          	li	a2,128
    8001364c:	00012097          	auipc	ra,0x12
    80013650:	a40080e7          	jalr	-1472(ra) # 8002508c <memset>

0000000080013654 <.LBB14_33>:
        LOG.begin_op();
    80013654:	00046517          	auipc	a0,0x46
    80013658:	01450513          	addi	a0,a0,20 # 80059668 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    8001365c:	ffff5097          	auipc	ra,0xffff5
    80013660:	5a0080e7          	jalr	1440(ra) # 80008bfc <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$8begin_op17he5b49a48c716e372E>
    80013664:	a009                	j	80013666 <.LBB14_33+0x12>
        let addr = self.arg(0);
    80013666:	7542                	ld	a0,48(sp)
    80013668:	4581                	li	a1,0
    8001366a:	00001097          	auipc	ra,0x1
    8001366e:	776080e7          	jalr	1910(ra) # 80014de0 <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    80013672:	85aa                	mv	a1,a0
    80013674:	f42e                	sd	a1,40(sp)
    80013676:	f6aa                	sd	a0,360(sp)
    80013678:	a009                	j	8001367a <.LBB14_33+0x26>
        self.copy_from_str(addr, &mut path, MAXPATH)?;
    8001367a:	75a2                	ld	a1,40(sp)
    8001367c:	7542                	ld	a0,48(sp)
    8001367e:	04f10613          	addi	a2,sp,79
    80013682:	08000713          	li	a4,128
    80013686:	86ba                	mv	a3,a4
    80013688:	00002097          	auipc	ra,0x2
    8001368c:	808080e7          	jalr	-2040(ra) # 80014e90 <_ZN6kernel7syscall7Syscall13copy_from_str17h5c83be6e0d4b822aE>
    80013690:	f02a                	sd	a0,32(sp)
    80013692:	a009                	j	80013694 <.LBB14_33+0x40>
    80013694:	7502                	ld	a0,32(sp)
    80013696:	ffffa097          	auipc	ra,0xffffa
    8001369a:	abe080e7          	jalr	-1346(ra) # 8000d154 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h9e3ff03fe8989dd2E>
    8001369e:	0ca107a3          	sb	a0,207(sp)
    800136a2:	a009                	j	800136a4 <.LBB14_33+0x50>
    800136a4:	0cf14503          	lbu	a0,207(sp)
    800136a8:	8905                	andi	a0,a0,1
    800136aa:	4581                	li	a1,0
    800136ac:	00b50463          	beq	a0,a1,800136b4 <.LBB14_34>
    800136b0:	a009                	j	800136b2 <.LBB14_33+0x5e>
    800136b2:	a005                	j	800136d2 <.LBB14_34+0x1e>

00000000800136b4 <.LBB14_34>:
        match ICACHE.namei(&path) {
    800136b4:	00046597          	auipc	a1,0x46
    800136b8:	05c58593          	addi	a1,a1,92 # 80059710 <_ZN6kernel2fs5inode6ICACHE17had1be8942ca79bf1E>
    800136bc:	0988                	addi	a0,sp,208
    800136be:	04f10613          	addi	a2,sp,79
    800136c2:	08000693          	li	a3,128
    800136c6:	00006097          	auipc	ra,0x6
    800136ca:	bf6080e7          	jalr	-1034(ra) # 800192bc <_ZN6kernel2fs5inode10InodeCache5namei17hc269c6a9eecf1991E>
    800136ce:	a831                	j	800136ea <.LBB14_34+0x36>
        self.copy_from_str(addr, &mut path, MAXPATH)?;
    800136d0:	0000                	unimp
    800136d2:	ffff8097          	auipc	ra,0xffff8
    800136d6:	2ec080e7          	jalr	748(ra) # 8000b9be <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h2e645b443ebf2dc7E>
    800136da:	a009                	j	800136dc <.LBB14_34+0x28>
    800136dc:	ffffa097          	auipc	ra,0xffffa
    800136e0:	964080e7          	jalr	-1692(ra) # 8000d040 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h74072cf57097ff24E>
    800136e4:	fc2a                	sd	a0,56(sp)
    800136e6:	e0ae                	sd	a1,64(sp)
    800136e8:	a225                	j	80013810 <.LBB14_39+0x48>
            Some(inode) => {
    800136ea:	654e                	ld	a0,208(sp)
    800136ec:	4581                	li	a1,0
    800136ee:	00b50463          	beq	a0,a1,800136f6 <.LBB14_35>
    800136f2:	a009                	j	800136f4 <.LBB14_34+0x40>
    800136f4:	a819                	j	8001370a <.LBB14_35+0x14>

00000000800136f6 <.LBB14_35>:
                    }
                }
            },

            None => {
                LOG.end_op();
    800136f6:	00046517          	auipc	a0,0x46
    800136fa:	f7250513          	addi	a0,a0,-142 # 80059668 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    800136fe:	ffff6097          	auipc	ra,0xffff6
    80013702:	ae4080e7          	jalr	-1308(ra) # 800091e2 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>
    80013706:	a8c5                	j	800137f6 <.LBB14_39+0x2e>
        match ICACHE.namei(&path) {
    80013708:	0000                	unimp
    8001370a:	4505                	li	a0,1
            Some(inode) => {
    8001370c:	14a107a3          	sb	a0,335(sp)
    80013710:	656e                	ld	a0,216(sp)
    80013712:	f5aa                	sd	a0,232(sp)
    80013714:	750e                	ld	a0,224(sp)
    80013716:	f9aa                	sd	a0,240(sp)
    80013718:	11a8                	addi	a0,sp,232
                let inode_guard = inode.lock();
    8001371a:	00007097          	auipc	ra,0x7
    8001371e:	5e6080e7          	jalr	1510(ra) # 8001ad00 <_ZN6kernel2fs5inode5Inode4lock17he70970c593f751adE>
    80013722:	fdaa                	sd	a0,248(sp)
    80013724:	e22e                	sd	a1,256(sp)
    80013726:	a009                	j	80013728 <.LBB14_35+0x32>
    80013728:	19a8                	addi	a0,sp,248
                match inode_guard.dinode.itype {
    8001372a:	0000a097          	auipc	ra,0xa
    8001372e:	dd6080e7          	jalr	-554(ra) # 8001d500 <_ZN92_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfc7812d7ca7ab1e1E>
    80013732:	ec2a                	sd	a0,24(sp)
    80013734:	a009                	j	80013736 <.LBB14_35+0x40>
                    InodeType::Directory => {
    80013736:	6562                	ld	a0,24(sp)
    80013738:	00855503          	lhu	a0,8(a0)
    8001373c:	4585                	li	a1,1
    8001373e:	00b50c63          	beq	a0,a1,80013756 <.LBB14_36+0x12>
    80013742:	a009                	j	80013744 <.LBB14_36>

0000000080013744 <.LBB14_36>:
                        LOG.end_op();
    80013744:	00046517          	auipc	a0,0x46
    80013748:	f2450513          	addi	a0,a0,-220 # 80059668 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    8001374c:	ffff6097          	auipc	ra,0xffff6
    80013750:	a96080e7          	jalr	-1386(ra) # 800091e2 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>
    80013754:	a079                	j	800137e2 <.LBB14_39+0x1a>
                        drop(inode_guard);
    80013756:	756e                	ld	a0,248(sp)
    80013758:	6592                	ld	a1,256(sp)
    8001375a:	00009097          	auipc	ra,0x9
    8001375e:	758080e7          	jalr	1880(ra) # 8001ceb2 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    80013762:	a009                	j	80013764 <.LBB14_37>

0000000080013764 <.LBB14_37>:
                        let task = unsafe { CPU_MANAGER.myproc().unwrap() };
    80013764:	00051517          	auipc	a0,0x51
    80013768:	9dc50513          	addi	a0,a0,-1572 # 80064140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    8001376c:	ffffe097          	auipc	ra,0xffffe
    80013770:	2be080e7          	jalr	702(ra) # 80011a2a <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    80013774:	e82a                	sd	a0,16(sp)
    80013776:	a009                	j	80013778 <.LBB14_37+0x14>
    80013778:	6542                	ld	a0,16(sp)

000000008001377a <.LBB14_38>:
    8001377a:	00016597          	auipc	a1,0x16
    8001377e:	eae58593          	addi	a1,a1,-338 # 80029628 <.L__unnamed_39>
    80013782:	ffffb097          	auipc	ra,0xffffb
    80013786:	53a080e7          	jalr	1338(ra) # 8000ecbc <_ZN4core6option15Option$LT$T$GT$6unwrap17h81f0c84c54a80648E>
    8001378a:	e42a                	sd	a0,8(sp)
    8001378c:	a009                	j	8001378e <.LBB14_38+0x14>
    8001378e:	6522                	ld	a0,8(sp)
    80013790:	faaa                	sd	a0,368(sp)
                        let old_cwd = task.cwd.replace(inode);
    80013792:	3c850593          	addi	a1,a0,968
    80013796:	4501                	li	a0,0
    80013798:	14a107a3          	sb	a0,335(sp)
    8001379c:	76ce                	ld	a3,240(sp)
    8001379e:	f636                	sd	a3,296(sp)
    800137a0:	762e                	ld	a2,232(sp)
    800137a2:	f232                	sd	a2,288(sp)
    800137a4:	0228                	addi	a0,sp,264
    800137a6:	ffffb097          	auipc	ra,0xffffb
    800137aa:	7b6080e7          	jalr	1974(ra) # 8000ef5c <_ZN4core6option15Option$LT$T$GT$7replace17h3b8bd4435d2ae84bE>
    800137ae:	a009                	j	800137b0 <.LBB14_38+0x36>
                        drop(old_cwd);
    800137b0:	6572                	ld	a0,280(sp)
    800137b2:	e2aa                	sd	a0,320(sp)
    800137b4:	6552                	ld	a0,272(sp)
    800137b6:	fe2a                	sd	a0,312(sp)
    800137b8:	6532                	ld	a0,264(sp)
    800137ba:	fa2a                	sd	a0,304(sp)
    800137bc:	1a08                	addi	a0,sp,304
    800137be:	00009097          	auipc	ra,0x9
    800137c2:	726080e7          	jalr	1830(ra) # 8001cee4 <_ZN4core3mem4drop17h66bc7e80d0a41b3aE>
    800137c6:	a009                	j	800137c8 <.LBB14_39>

00000000800137c8 <.LBB14_39>:
                        LOG.end_op();
    800137c8:	00046517          	auipc	a0,0x46
    800137cc:	ea050513          	addi	a0,a0,-352 # 80059668 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    800137d0:	ffff6097          	auipc	ra,0xffff6
    800137d4:	a12080e7          	jalr	-1518(ra) # 800091e2 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>
    800137d8:	a009                	j	800137da <.LBB14_39+0x12>
    800137da:	4501                	li	a0,0
                        return Ok(0)
    800137dc:	e0aa                	sd	a0,64(sp)
    800137de:	fc2a                	sd	a0,56(sp)
    800137e0:	a831                	j	800137fc <.LBB14_39+0x34>
                        drop(inode_guard);
    800137e2:	756e                	ld	a0,248(sp)
    800137e4:	6592                	ld	a1,256(sp)
    800137e6:	00009097          	auipc	ra,0x9
    800137ea:	6cc080e7          	jalr	1740(ra) # 8001ceb2 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    800137ee:	a009                	j	800137f0 <.LBB14_39+0x28>
    800137f0:	4505                	li	a0,1
                        return Err(())
    800137f2:	fc2a                	sd	a0,56(sp)
    800137f4:	a021                	j	800137fc <.LBB14_39+0x34>
    800137f6:	4505                	li	a0,1
                return Err(())
    800137f8:	fc2a                	sd	a0,56(sp)
    800137fa:	a811                	j	8001380e <.LBB14_39+0x46>
            },
    800137fc:	14f14503          	lbu	a0,335(sp)
    80013800:	8905                	andi	a0,a0,1
    80013802:	ed01                	bnez	a0,8001381a <.LBB14_39+0x52>
    80013804:	a009                	j	80013806 <.LBB14_39+0x3e>
    80013806:	4501                	li	a0,0
    80013808:	14a107a3          	sb	a0,335(sp)
    8001380c:	a009                	j	8001380e <.LBB14_39+0x46>
    8001380e:	a009                	j	80013810 <.LBB14_39+0x48>
            }
        }

    }
    80013810:	7562                	ld	a0,56(sp)
    80013812:	6586                	ld	a1,64(sp)
    80013814:	70f6                	ld	ra,376(sp)
    80013816:	6119                	addi	sp,sp,384
    80013818:	8082                	ret
    8001381a:	11a8                	addi	a0,sp,232
            },
    8001381c:	ffff3097          	auipc	ra,0xffff3
    80013820:	6be080e7          	jalr	1726(ra) # 80006eda <_ZN4core3ptr45drop_in_place$LT$kernel..fs..inode..Inode$GT$17h8786fe1a2a287832E>
    80013824:	b7cd                	j	80013806 <.LBB14_39+0x3e>

Disassembly of section .text._ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_pipe17h56ef7a0a7762279bE:

0000000080013826 <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_pipe17h56ef7a0a7762279bE>:

    pub unsafe fn sys_pipe(&self) -> SysResult {
    80013826:	d2010113          	addi	sp,sp,-736
    8001382a:	2c113c23          	sd	ra,728(sp)
    8001382e:	ed2a                	sd	a0,152(sp)
    80013830:	28a13423          	sd	a0,648(sp)
    80013834:	1928                	addi	a0,sp,184
        // User use an array to represent two file.
        // let mut fd_array: usize = 0;
        let mut rf = &mut VFile::init() as *mut VFile;
    80013836:	ffff2097          	auipc	ra,0xffff2
    8001383a:	e9e080e7          	jalr	-354(ra) # 800056d4 <_ZN6kernel2fs4file5VFile4init17h000c38ec0bf103cfE>
    8001383e:	a009                	j	80013840 <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_pipe17h56ef7a0a7762279bE+0x1a>
    80013840:	1928                	addi	a0,sp,184
    80013842:	f92a                	sd	a0,176(sp)
    80013844:	19a8                	addi	a0,sp,248
        let mut wf = &mut VFile::init() as *mut VFile;
    80013846:	ffff2097          	auipc	ra,0xffff2
    8001384a:	e8e080e7          	jalr	-370(ra) # 800056d4 <_ZN6kernel2fs4file5VFile4init17h000c38ec0bf103cfE>
    8001384e:	a009                	j	80013850 <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_pipe17h56ef7a0a7762279bE+0x2a>
    80013850:	656a                	ld	a0,152(sp)
    80013852:	19ac                	addi	a1,sp,248
    80013854:	f9ae                	sd	a1,240(sp)
    80013856:	4581                	li	a1,0
        // arg_addr(0, &mut &mut fd_array)?;
        let fd_array = self.arg(0);
    80013858:	00001097          	auipc	ra,0x1
    8001385c:	588080e7          	jalr	1416(ra) # 80014de0 <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    80013860:	85aa                	mv	a1,a0
    80013862:	e92e                	sd	a1,144(sp)
    80013864:	28a13823          	sd	a0,656(sp)
    80013868:	a009                	j	8001386a <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_pipe17h56ef7a0a7762279bE+0x44>
    8001386a:	1a08                	addi	a0,sp,304
    8001386c:	190c                	addi	a1,sp,176
    8001386e:	1990                	addi	a2,sp,240
        Pipe::alloc(&mut rf, &mut wf);
    80013870:	ffff6097          	auipc	ra,0xffff6
    80013874:	778080e7          	jalr	1912(ra) # 80009fe8 <_ZN6kernel2fs4pipe4Pipe5alloc17h6a6be38aac05d699E>
    80013878:	a009                	j	8001387a <.LBB15_55>

000000008001387a <.LBB15_55>:

        let p = unsafe {
            CPU_MANAGER.myproc().expect("Fail to get my process.")
    8001387a:	00051517          	auipc	a0,0x51
    8001387e:	8c650513          	addi	a0,a0,-1850 # 80064140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    80013882:	ffffe097          	auipc	ra,0xffffe
    80013886:	1a8080e7          	jalr	424(ra) # 80011a2a <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    8001388a:	e52a                	sd	a0,136(sp)
    8001388c:	a009                	j	8001388e <.LBB15_55+0x14>
    8001388e:	652a                	ld	a0,136(sp)

0000000080013890 <.LBB15_56>:
    80013890:	00016597          	auipc	a1,0x16
    80013894:	db058593          	addi	a1,a1,-592 # 80029640 <.L__unnamed_40>

0000000080013898 <.LBB15_57>:
    80013898:	00016697          	auipc	a3,0x16
    8001389c:	dc068693          	addi	a3,a3,-576 # 80029658 <.L__unnamed_41>
    800138a0:	465d                	li	a2,23
    800138a2:	ffffb097          	auipc	ra,0xffffb
    800138a6:	1fa080e7          	jalr	506(ra) # 8000ea9c <_ZN4core6option15Option$LT$T$GT$6expect17h5cc0070b74d715b8E>
    800138aa:	e12a                	sd	a0,128(sp)
    800138ac:	a009                	j	800138ae <.LBB15_57+0x16>
    800138ae:	658a                	ld	a1,128(sp)
    800138b0:	28b13c23          	sd	a1,664(sp)
        };

        // Allocate file descriptor for r/w file. 
        let rfd: usize;
        let wfd: usize;
        match p.fd_alloc(&mut *rf) {
    800138b4:	764a                	ld	a2,176(sp)
    800138b6:	12a8                	addi	a0,sp,360
    800138b8:	00003097          	auipc	ra,0x3
    800138bc:	848080e7          	jalr	-1976(ra) # 80016100 <_ZN6kernel7process7process11task_struct8fd_alloc17h2f054cafd5acb7f0E>
    800138c0:	a009                	j	800138c2 <.LBB15_57+0x2a>
            Ok(fd) => {
    800138c2:	7536                	ld	a0,360(sp)
    800138c4:	4581                	li	a1,0
    800138c6:	02b50763          	beq	a0,a1,800138f4 <.LBB15_58+0x18>
    800138ca:	a009                	j	800138cc <.LBB15_57+0x34>
                rfd = fd;
            },

            Err(err) => {
    800138cc:	75d6                	ld	a1,368(sp)
    800138ce:	7576                	ld	a0,376(sp)
    800138d0:	e32e                	sd	a1,384(sp)
    800138d2:	e72a                	sd	a0,392(sp)
    800138d4:	0308                	addi	a0,sp,384
                // rf.close();
                println!("[Kernel] sys_pipe: err: {}", err);
    800138d6:	ebaa                	sd	a0,464(sp)
    800138d8:	2aa13023          	sd	a0,672(sp)

00000000800138dc <.LBB15_58>:
    800138dc:	0000b597          	auipc	a1,0xb
    800138e0:	b3c58593          	addi	a1,a1,-1220 # 8001e418 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E>
    800138e4:	0000b097          	auipc	ra,0xb
    800138e8:	b58080e7          	jalr	-1192(ra) # 8001e43c <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>
    800138ec:	f8aa                	sd	a0,112(sp)
    800138ee:	fcae                	sd	a1,120(sp)
    800138f0:	a831                	j	8001390c <.LBB15_58+0x30>
        match p.fd_alloc(&mut *rf) {
    800138f2:	0000                	unimp
            Ok(fd) => {
    800138f4:	658a                	ld	a1,128(sp)
    800138f6:	7556                	ld	a0,368(sp)
    800138f8:	2aa13423          	sd	a0,680(sp)
                rfd = fd;
    800138fc:	eeaa                	sd	a0,344(sp)
                return Err(())
            }
        }
        
        match p.fd_alloc(&mut*wf) {
    800138fe:	764e                	ld	a2,240(sp)
    80013900:	0ba8                	addi	a0,sp,472
    80013902:	00002097          	auipc	ra,0x2
    80013906:	7fe080e7          	jalr	2046(ra) # 80016100 <_ZN6kernel7process7process11task_struct8fd_alloc17h2f054cafd5acb7f0E>
    8001390a:	a81d                	j	80013940 <.LBB15_59+0x2c>
                println!("[Kernel] sys_pipe: err: {}", err);
    8001390c:	7566                	ld	a0,120(sp)
    8001390e:	75c6                	ld	a1,112(sp)
    80013910:	e3ae                	sd	a1,448(sp)
    80013912:	e7aa                	sd	a0,456(sp)

0000000080013914 <.LBB15_59>:
    80013914:	00016597          	auipc	a1,0x16
    80013918:	d7458593          	addi	a1,a1,-652 # 80029688 <.L__unnamed_42>
    8001391c:	0b08                	addi	a0,sp,400
    8001391e:	4609                	li	a2,2
    80013920:	0394                	addi	a3,sp,448
    80013922:	4705                	li	a4,1
    80013924:	ffff2097          	auipc	ra,0xffff2
    80013928:	b10080e7          	jalr	-1264(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8001392c:	a009                	j	8001392e <.LBB15_59+0x1a>
    8001392e:	0b08                	addi	a0,sp,400
    80013930:	0000a097          	auipc	ra,0xa
    80013934:	280080e7          	jalr	640(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    80013938:	a009                	j	8001393a <.LBB15_59+0x26>
    8001393a:	4505                	li	a0,1
                return Err(())
    8001393c:	f12a                	sd	a0,160(sp)
    8001393e:	ac19                	j	80013b54 <.LBB15_63+0x180>
            Ok(fd) => {
    80013940:	657e                	ld	a0,472(sp)
    80013942:	4581                	li	a1,0
    80013944:	02b50863          	beq	a0,a1,80013974 <.LBB15_60+0x18>
    80013948:	a009                	j	8001394a <.LBB15_59+0x36>
                wfd = fd;
            },

            Err(err) => {
    8001394a:	759e                	ld	a1,480(sp)
    8001394c:	753e                	ld	a0,488(sp)
    8001394e:	fbae                	sd	a1,496(sp)
    80013950:	ffaa                	sd	a0,504(sp)
    80013952:	1b88                	addi	a0,sp,496
                // rf.close();
                // wf.close();
                println!("[Kernel] sys_pipe: err: {}", err);
    80013954:	24a13023          	sd	a0,576(sp)
    80013958:	2aa13823          	sd	a0,688(sp)

000000008001395c <.LBB15_60>:
    8001395c:	0000b597          	auipc	a1,0xb
    80013960:	abc58593          	addi	a1,a1,-1348 # 8001e418 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E>
    80013964:	0000b097          	auipc	ra,0xb
    80013968:	ad8080e7          	jalr	-1320(ra) # 8001e43c <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>
    8001396c:	f0aa                	sd	a0,96(sp)
    8001396e:	f4ae                	sd	a1,104(sp)
    80013970:	a02d                	j	8001399a <.LBB15_61+0x14>
        match p.fd_alloc(&mut*wf) {
    80013972:	0000                	unimp
            Ok(fd) => {
    80013974:	650a                	ld	a0,128(sp)
    80013976:	759e                	ld	a1,480(sp)
    80013978:	2ab13c23          	sd	a1,696(sp)
                wfd = fd;
    8001397c:	f2ae                	sd	a1,352(sp)
                return Err(())
            }
        }

        let pgt = unsafe { &mut *p.pagetable };
    8001397e:	6d08                	ld	a0,24(a0)
    80013980:	e8aa                	sd	a0,80(sp)
    80013982:	2ca13023          	sd	a0,704(sp)

0000000080013986 <.LBB15_61>:
        let task = unsafe { CPU_MANAGER.myproc().unwrap() };
    80013986:	00050517          	auipc	a0,0x50
    8001398a:	7ba50513          	addi	a0,a0,1978 # 80064140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    8001398e:	ffffe097          	auipc	ra,0xffffe
    80013992:	09c080e7          	jalr	156(ra) # 80011a2a <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    80013996:	ecaa                	sd	a0,88(sp)
    80013998:	a82d                	j	800139d2 <.LBB15_62+0x2c>
                println!("[Kernel] sys_pipe: err: {}", err);
    8001399a:	7526                	ld	a0,104(sp)
    8001399c:	7586                	ld	a1,96(sp)
    8001399e:	22b13823          	sd	a1,560(sp)
    800139a2:	22a13c23          	sd	a0,568(sp)

00000000800139a6 <.LBB15_62>:
    800139a6:	00016597          	auipc	a1,0x16
    800139aa:	ce258593          	addi	a1,a1,-798 # 80029688 <.L__unnamed_42>
    800139ae:	0408                	addi	a0,sp,512
    800139b0:	4609                	li	a2,2
    800139b2:	1c14                	addi	a3,sp,560
    800139b4:	4705                	li	a4,1
    800139b6:	ffff2097          	auipc	ra,0xffff2
    800139ba:	a7e080e7          	jalr	-1410(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    800139be:	a009                	j	800139c0 <.LBB15_62+0x1a>
    800139c0:	0408                	addi	a0,sp,512
    800139c2:	0000a097          	auipc	ra,0xa
    800139c6:	1ee080e7          	jalr	494(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    800139ca:	a009                	j	800139cc <.LBB15_62+0x26>
    800139cc:	4505                	li	a0,1
                return Err(())
    800139ce:	f12a                	sd	a0,160(sp)
    800139d0:	a251                	j	80013b54 <.LBB15_63+0x180>
        let task = unsafe { CPU_MANAGER.myproc().unwrap() };
    800139d2:	6566                	ld	a0,88(sp)

00000000800139d4 <.LBB15_63>:
    800139d4:	00016597          	auipc	a1,0x16
    800139d8:	cd458593          	addi	a1,a1,-812 # 800296a8 <.L__unnamed_43>
    800139dc:	ffffb097          	auipc	ra,0xffffb
    800139e0:	2e0080e7          	jalr	736(ra) # 8000ecbc <_ZN4core6option15Option$LT$T$GT$6unwrap17h81f0c84c54a80648E>
    800139e4:	e4aa                	sd	a0,72(sp)
    800139e6:	a009                	j	800139e8 <.LBB15_63+0x14>
    800139e8:	65ca                	ld	a1,144(sp)
    800139ea:	6546                	ld	a0,80(sp)
    800139ec:	6626                	ld	a2,72(sp)
    800139ee:	2cc13423          	sd	a2,712(sp)
        let open_files = &mut task.open_files;
    800139f2:	0a860613          	addi	a2,a2,168
    800139f6:	e0b2                	sd	a2,64(sp)
    800139f8:	2cc13823          	sd	a2,720(sp)
    800139fc:	0ab0                	addi	a2,sp,344
    800139fe:	4691                	li	a3,4
        if pgt.copy_out(fd_array, &rfd as *const _ as *const u8, 4).is_err() {
    80013a00:	00004097          	auipc	ra,0x4
    80013a04:	012080e7          	jalr	18(ra) # 80017a12 <_ZN6kernel6memory7mapping10page_table9PageTable8copy_out17h55d0f27ee3680817E>
    80013a08:	24a13423          	sd	a0,584(sp)
    80013a0c:	24b13823          	sd	a1,592(sp)
    80013a10:	a009                	j	80013a12 <.LBB15_63+0x3e>
    80013a12:	04a8                	addi	a0,sp,584
    80013a14:	ffff9097          	auipc	ra,0xffff9
    80013a18:	2a2080e7          	jalr	674(ra) # 8000ccb6 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h304118d236359d80E>
    80013a1c:	fc2a                	sd	a0,56(sp)
    80013a1e:	a009                	j	80013a20 <.LBB15_63+0x4c>
    80013a20:	7562                	ld	a0,56(sp)
    80013a22:	4581                	li	a1,0
    80013a24:	00b50a63          	beq	a0,a1,80013a38 <.LBB15_63+0x64>
    80013a28:	a009                	j	80013a2a <.LBB15_63+0x56>
            open_files[rfd].take();
    80013a2a:	6576                	ld	a0,344(sp)
    80013a2c:	f82a                	sd	a0,48(sp)
    80013a2e:	06400593          	li	a1,100
    80013a32:	00b56a63          	bltu	a0,a1,80013a46 <.LBB15_63+0x72>
    80013a36:	a291                	j	80013b7a <.LBB15_63+0x1a6>
            // wf.close();
            return Err(())
        }

        if pgt.copy_out(
            fd_array + 4, 
    80013a38:	65ca                	ld	a1,144(sp)
    80013a3a:	00458513          	addi	a0,a1,4
    80013a3e:	f42a                	sd	a0,40(sp)
    80013a40:	16b56563          	bltu	a0,a1,80013baa <.LBB15_66>
    80013a44:	a8a9                	j	80013a9e <.LBB15_63+0xca>
            open_files[rfd].take();
    80013a46:	6506                	ld	a0,64(sp)
    80013a48:	75c2                	ld	a1,48(sp)
    80013a4a:	058e                	slli	a1,a1,0x3
    80013a4c:	952e                	add	a0,a0,a1
    80013a4e:	ffffb097          	auipc	ra,0xffffb
    80013a52:	bc0080e7          	jalr	-1088(ra) # 8000e60e <_ZN4core6option15Option$LT$T$GT$4take17h80e6997975665939E>
    80013a56:	24a13c23          	sd	a0,600(sp)
    80013a5a:	a009                	j	80013a5c <.LBB15_63+0x88>
    80013a5c:	0ca8                	addi	a0,sp,600
    80013a5e:	ffff3097          	auipc	ra,0xffff3
    80013a62:	62c080e7          	jalr	1580(ra) # 8000708a <_ZN4core3ptr96drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$$GT$17hc79d9c89cd1d7f36E>
    80013a66:	a009                	j	80013a68 <.LBB15_63+0x94>
            open_files[wfd].take();
    80013a68:	7596                	ld	a1,352(sp)
    80013a6a:	f02e                	sd	a1,32(sp)
    80013a6c:	06300513          	li	a0,99
    80013a70:	12b56163          	bltu	a0,a1,80013b92 <.LBB15_64+0x16>
    80013a74:	a009                	j	80013a76 <.LBB15_63+0xa2>
    80013a76:	6506                	ld	a0,64(sp)
    80013a78:	7582                	ld	a1,32(sp)
    80013a7a:	058e                	slli	a1,a1,0x3
    80013a7c:	952e                	add	a0,a0,a1
    80013a7e:	ffffb097          	auipc	ra,0xffffb
    80013a82:	b90080e7          	jalr	-1136(ra) # 8000e60e <_ZN4core6option15Option$LT$T$GT$4take17h80e6997975665939E>
    80013a86:	26a13023          	sd	a0,608(sp)
    80013a8a:	a009                	j	80013a8c <.LBB15_63+0xb8>
    80013a8c:	1488                	addi	a0,sp,608
    80013a8e:	ffff3097          	auipc	ra,0xffff3
    80013a92:	5fc080e7          	jalr	1532(ra) # 8000708a <_ZN4core3ptr96drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$$GT$17hc79d9c89cd1d7f36E>
    80013a96:	a009                	j	80013a98 <.LBB15_63+0xc4>
    80013a98:	4505                	li	a0,1
            return Err(())
    80013a9a:	f12a                	sd	a0,160(sp)
    80013a9c:	a865                	j	80013b54 <.LBB15_63+0x180>
        if pgt.copy_out(
    80013a9e:	75a2                	ld	a1,40(sp)
    80013aa0:	6546                	ld	a0,80(sp)
    80013aa2:	1290                	addi	a2,sp,352
    80013aa4:	4691                	li	a3,4
    80013aa6:	00004097          	auipc	ra,0x4
    80013aaa:	f6c080e7          	jalr	-148(ra) # 80017a12 <_ZN6kernel6memory7mapping10page_table9PageTable8copy_out17h55d0f27ee3680817E>
    80013aae:	26a13423          	sd	a0,616(sp)
    80013ab2:	26b13823          	sd	a1,624(sp)
    80013ab6:	a009                	j	80013ab8 <.LBB15_63+0xe4>
    80013ab8:	14a8                	addi	a0,sp,616
    80013aba:	ffff9097          	auipc	ra,0xffff9
    80013abe:	1fc080e7          	jalr	508(ra) # 8000ccb6 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h304118d236359d80E>
    80013ac2:	ec2a                	sd	a0,24(sp)
    80013ac4:	a009                	j	80013ac6 <.LBB15_63+0xf2>
    80013ac6:	6562                	ld	a0,24(sp)
    80013ac8:	4581                	li	a1,0
    80013aca:	00b50a63          	beq	a0,a1,80013ade <.LBB15_63+0x10a>
    80013ace:	a009                	j	80013ad0 <.LBB15_63+0xfc>
            &wfd as *const usize as *const u8,
            4
        ).is_err() {
            open_files[rfd].take();
    80013ad0:	6576                	ld	a0,344(sp)
    80013ad2:	e82a                	sd	a0,16(sp)
    80013ad4:	06400593          	li	a1,100
    80013ad8:	00b56c63          	bltu	a0,a1,80013af0 <.LBB15_63+0x11c>
    80013adc:	a0ed                	j	80013bc6 <.LBB15_67+0x14>
    80013ade:	4501                	li	a0,0
            open_files[wfd].take();
            // rf.close();
            // wf.close();
            return Err(())
        }
        Ok(0)
    80013ae0:	f52a                	sd	a0,168(sp)
    80013ae2:	f12a                	sd	a0,160(sp)
    80013ae4:	19a8                	addi	a0,sp,248
    }
    80013ae6:	ffff3097          	auipc	ra,0xffff3
    80013aea:	3dc080e7          	jalr	988(ra) # 80006ec2 <_ZN4core3ptr44drop_in_place$LT$kernel..fs..file..VFile$GT$17h7a3c9775c1583e88E>
    80013aee:	a8a9                	j	80013b48 <.LBB15_63+0x174>
            open_files[rfd].take();
    80013af0:	6506                	ld	a0,64(sp)
    80013af2:	65c2                	ld	a1,16(sp)
    80013af4:	058e                	slli	a1,a1,0x3
    80013af6:	952e                	add	a0,a0,a1
    80013af8:	ffffb097          	auipc	ra,0xffffb
    80013afc:	b16080e7          	jalr	-1258(ra) # 8000e60e <_ZN4core6option15Option$LT$T$GT$4take17h80e6997975665939E>
    80013b00:	26a13c23          	sd	a0,632(sp)
    80013b04:	a009                	j	80013b06 <.LBB15_63+0x132>
    80013b06:	1ca8                	addi	a0,sp,632
    80013b08:	ffff3097          	auipc	ra,0xffff3
    80013b0c:	582080e7          	jalr	1410(ra) # 8000708a <_ZN4core3ptr96drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$$GT$17hc79d9c89cd1d7f36E>
    80013b10:	a009                	j	80013b12 <.LBB15_63+0x13e>
            open_files[wfd].take();
    80013b12:	7596                	ld	a1,352(sp)
    80013b14:	e42e                	sd	a1,8(sp)
    80013b16:	06300513          	li	a0,99
    80013b1a:	0cb56263          	bltu	a0,a1,80013bde <.LBB15_68+0x16>
    80013b1e:	a009                	j	80013b20 <.LBB15_63+0x14c>
    80013b20:	6506                	ld	a0,64(sp)
    80013b22:	65a2                	ld	a1,8(sp)
    80013b24:	058e                	slli	a1,a1,0x3
    80013b26:	952e                	add	a0,a0,a1
    80013b28:	ffffb097          	auipc	ra,0xffffb
    80013b2c:	ae6080e7          	jalr	-1306(ra) # 8000e60e <_ZN4core6option15Option$LT$T$GT$4take17h80e6997975665939E>
    80013b30:	28a13023          	sd	a0,640(sp)
    80013b34:	a009                	j	80013b36 <.LBB15_63+0x162>
    80013b36:	0508                	addi	a0,sp,640
    80013b38:	ffff3097          	auipc	ra,0xffff3
    80013b3c:	552080e7          	jalr	1362(ra) # 8000708a <_ZN4core3ptr96drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$$GT$17hc79d9c89cd1d7f36E>
    80013b40:	a009                	j	80013b42 <.LBB15_63+0x16e>
    80013b42:	4505                	li	a0,1
            return Err(())
    80013b44:	f12a                	sd	a0,160(sp)
    80013b46:	a039                	j	80013b54 <.LBB15_63+0x180>
    80013b48:	1928                	addi	a0,sp,184
    }
    80013b4a:	ffff3097          	auipc	ra,0xffff3
    80013b4e:	378080e7          	jalr	888(ra) # 80006ec2 <_ZN4core3ptr44drop_in_place$LT$kernel..fs..file..VFile$GT$17h7a3c9775c1583e88E>
    80013b52:	a829                	j	80013b6c <.LBB15_63+0x198>
    80013b54:	19a8                	addi	a0,sp,248
    80013b56:	ffff3097          	auipc	ra,0xffff3
    80013b5a:	36c080e7          	jalr	876(ra) # 80006ec2 <_ZN4core3ptr44drop_in_place$LT$kernel..fs..file..VFile$GT$17h7a3c9775c1583e88E>
    80013b5e:	a009                	j	80013b60 <.LBB15_63+0x18c>
    80013b60:	1928                	addi	a0,sp,184
    80013b62:	ffff3097          	auipc	ra,0xffff3
    80013b66:	360080e7          	jalr	864(ra) # 80006ec2 <_ZN4core3ptr44drop_in_place$LT$kernel..fs..file..VFile$GT$17h7a3c9775c1583e88E>
    80013b6a:	a009                	j	80013b6c <.LBB15_63+0x198>
    80013b6c:	750a                	ld	a0,160(sp)
    80013b6e:	75aa                	ld	a1,168(sp)
    80013b70:	2d813083          	ld	ra,728(sp)
    80013b74:	2e010113          	addi	sp,sp,736
    80013b78:	8082                	ret
            open_files[rfd].take();
    80013b7a:	7542                	ld	a0,48(sp)

0000000080013b7c <.LBB15_64>:
    80013b7c:	00016617          	auipc	a2,0x16
    80013b80:	b4460613          	addi	a2,a2,-1212 # 800296c0 <.L__unnamed_44>
    80013b84:	06400593          	li	a1,100
    80013b88:	0000e097          	auipc	ra,0xe
    80013b8c:	5a0080e7          	jalr	1440(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80013b90:	0000                	unimp
            open_files[wfd].take();
    80013b92:	7502                	ld	a0,32(sp)

0000000080013b94 <.LBB15_65>:
    80013b94:	00016617          	auipc	a2,0x16
    80013b98:	b4460613          	addi	a2,a2,-1212 # 800296d8 <.L__unnamed_45>
    80013b9c:	06400593          	li	a1,100
    80013ba0:	0000e097          	auipc	ra,0xe
    80013ba4:	588080e7          	jalr	1416(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

0000000080013baa <.LBB15_66>:
            fd_array + 4, 
    80013baa:	00016517          	auipc	a0,0x16
    80013bae:	8f650513          	addi	a0,a0,-1802 # 800294a0 <str.1>

0000000080013bb2 <.LBB15_67>:
    80013bb2:	00016617          	auipc	a2,0x16
    80013bb6:	b3e60613          	addi	a2,a2,-1218 # 800296f0 <.L__unnamed_46>
    80013bba:	45f1                	li	a1,28
    80013bbc:	0000e097          	auipc	ra,0xe
    80013bc0:	540080e7          	jalr	1344(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80013bc4:	0000                	unimp
            open_files[rfd].take();
    80013bc6:	6542                	ld	a0,16(sp)

0000000080013bc8 <.LBB15_68>:
    80013bc8:	00016617          	auipc	a2,0x16
    80013bcc:	b4060613          	addi	a2,a2,-1216 # 80029708 <.L__unnamed_47>
    80013bd0:	06400593          	li	a1,100
    80013bd4:	0000e097          	auipc	ra,0xe
    80013bd8:	554080e7          	jalr	1364(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80013bdc:	0000                	unimp
            open_files[wfd].take();
    80013bde:	6522                	ld	a0,8(sp)

0000000080013be0 <.LBB15_69>:
    80013be0:	00016617          	auipc	a2,0x16
    80013be4:	b4060613          	addi	a2,a2,-1216 # 80029720 <.L__unnamed_48>
    80013be8:	06400593          	li	a1,100
    80013bec:	0000e097          	auipc	ra,0xe
    80013bf0:	53c080e7          	jalr	1340(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$10sys_unlink17h041fe6edd5a3dcecE:

0000000080013bf6 <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$10sys_unlink17h041fe6edd5a3dcecE>:

    pub fn sys_unlink(&self) -> SysResult {
    80013bf6:	d6010113          	addi	sp,sp,-672
    80013bfa:	28113c23          	sd	ra,664(sp)
    80013bfe:	e1aa                	sd	a0,192(sp)
    80013c00:	22a13c23          	sd	a0,568(sp)
    80013c04:	4581                	li	a1,0
        let mut path = [0u8; MAXPATH];
    80013c06:	fd2e                	sd	a1,184(sp)
    80013c08:	22b10ba3          	sb	a1,567(sp)
    80013c0c:	22b10b23          	sb	a1,566(sp)
    80013c10:	1188                	addi	a0,sp,224
    80013c12:	08000613          	li	a2,128
    80013c16:	00011097          	auipc	ra,0x11
    80013c1a:	476080e7          	jalr	1142(ra) # 8002508c <memset>
    80013c1e:	75ea                	ld	a1,184(sp)
        let mut name = [0u8; DIRSIZ];
    80013c20:	650e                	ld	a0,192(sp)
    80013c22:	f2ae                	sd	a1,352(sp)
    80013c24:	16b12423          	sw	a1,360(sp)
    80013c28:	16b11623          	sh	a1,364(sp)
        let parent: Inode;
        let inode: Inode;

        let addr = self.arg(0);
    80013c2c:	00001097          	auipc	ra,0x1
    80013c30:	1b4080e7          	jalr	436(ra) # 80014de0 <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    80013c34:	85aa                	mv	a1,a0
    80013c36:	e5ae                	sd	a1,200(sp)
    80013c38:	24a13823          	sd	a0,592(sp)
    80013c3c:	a009                	j	80013c3e <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$10sys_unlink17h041fe6edd5a3dcecE+0x48>
        self.copy_from_str(addr, &mut path, MAXPATH)?;
    80013c3e:	65ae                	ld	a1,200(sp)
    80013c40:	650e                	ld	a0,192(sp)
    80013c42:	1190                	addi	a2,sp,224
    80013c44:	08000713          	li	a4,128
    80013c48:	86ba                	mv	a3,a4
    80013c4a:	00001097          	auipc	ra,0x1
    80013c4e:	246080e7          	jalr	582(ra) # 80014e90 <_ZN6kernel7syscall7Syscall13copy_from_str17h5c83be6e0d4b822aE>
    80013c52:	f92a                	sd	a0,176(sp)
    80013c54:	a009                	j	80013c56 <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$10sys_unlink17h041fe6edd5a3dcecE+0x60>
    80013c56:	754a                	ld	a0,176(sp)
    80013c58:	ffff9097          	auipc	ra,0xffff9
    80013c5c:	4fc080e7          	jalr	1276(ra) # 8000d154 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h9e3ff03fe8989dd2E>
    80013c60:	18a10ba3          	sb	a0,407(sp)
    80013c64:	a009                	j	80013c66 <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$10sys_unlink17h041fe6edd5a3dcecE+0x70>
    80013c66:	19714503          	lbu	a0,407(sp)
    80013c6a:	8905                	andi	a0,a0,1
    80013c6c:	4581                	li	a1,0
    80013c6e:	00b50463          	beq	a0,a1,80013c76 <.LBB16_78>
    80013c72:	a009                	j	80013c74 <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$10sys_unlink17h041fe6edd5a3dcecE+0x7e>
    80013c74:	a819                	j	80013c8a <.LBB16_78+0x14>

0000000080013c76 <.LBB16_78>:

        LOG.begin_op();
    80013c76:	00046517          	auipc	a0,0x46
    80013c7a:	9f250513          	addi	a0,a0,-1550 # 80059668 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    80013c7e:	ffff5097          	auipc	ra,0xffff5
    80013c82:	f7e080e7          	jalr	-130(ra) # 80008bfc <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$8begin_op17he5b49a48c716e372E>
    80013c86:	a831                	j	80013ca2 <.LBB16_79>
        self.copy_from_str(addr, &mut path, MAXPATH)?;
    80013c88:	0000                	unimp
    80013c8a:	ffff8097          	auipc	ra,0xffff8
    80013c8e:	d34080e7          	jalr	-716(ra) # 8000b9be <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h2e645b443ebf2dc7E>
    80013c92:	a009                	j	80013c94 <.LBB16_78+0x1e>
    80013c94:	ffff9097          	auipc	ra,0xffff9
    80013c98:	3ac080e7          	jalr	940(ra) # 8000d040 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h74072cf57097ff24E>
    80013c9c:	e9aa                	sd	a0,208(sp)
    80013c9e:	edae                	sd	a1,216(sp)
    80013ca0:	ae5d                	j	80014056 <.LBB16_90+0x3e>

0000000080013ca2 <.LBB16_79>:
        match ICACHE.namei_parent(&path, &mut name) {
    80013ca2:	00046597          	auipc	a1,0x46
    80013ca6:	a6e58593          	addi	a1,a1,-1426 # 80059710 <_ZN6kernel2fs5inode6ICACHE17had1be8942ca79bf1E>
    80013caa:	0b28                	addi	a0,sp,408
    80013cac:	1190                	addi	a2,sp,224
    80013cae:	08000693          	li	a3,128
    80013cb2:	1298                	addi	a4,sp,352
    80013cb4:	00005097          	auipc	ra,0x5
    80013cb8:	62e080e7          	jalr	1582(ra) # 800192e2 <_ZN6kernel2fs5inode10InodeCache12namei_parent17h24bebf98ccd9b34eE>
    80013cbc:	a009                	j	80013cbe <.LBB16_79+0x1c>
            Some(cur) => {
    80013cbe:	657a                	ld	a0,408(sp)
    80013cc0:	4581                	li	a1,0
    80013cc2:	00b50463          	beq	a0,a1,80013cca <.LBB16_80>
    80013cc6:	a009                	j	80013cc8 <.LBB16_79+0x26>
    80013cc8:	a819                	j	80013cde <.LBB16_80+0x14>

0000000080013cca <.LBB16_80>:
                parent = cur;
            },
            None => {
                LOG.end_op();
    80013cca:	00046517          	auipc	a0,0x46
    80013cce:	99e50513          	addi	a0,a0,-1634 # 80059668 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    80013cd2:	ffff5097          	auipc	ra,0xffff5
    80013cd6:	510080e7          	jalr	1296(ra) # 800091e2 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>
    80013cda:	a02d                	j	80013d04 <.LBB16_80+0x3a>
        match ICACHE.namei_parent(&path, &mut name) {
    80013cdc:	0000                	unimp
            Some(cur) => {
    80013cde:	753a                	ld	a0,424(sp)
    80013ce0:	ff2a                	sd	a0,440(sp)
    80013ce2:	759a                	ld	a1,416(sp)
    80013ce4:	fb2e                	sd	a1,432(sp)
                parent = cur;
    80013ce6:	e3ae                	sd	a1,448(sp)
    80013ce8:	e7aa                	sd	a0,456(sp)
    80013cea:	4605                	li	a2,1
    80013cec:	22c10ba3          	sb	a2,567(sp)
    80013cf0:	faae                	sd	a1,368(sp)
    80013cf2:	feaa                	sd	a0,376(sp)
    80013cf4:	1a88                	addi	a0,sp,368
                return Err(())
            }
        }
        let mut parent_guard = parent.lock();
    80013cf6:	00007097          	auipc	ra,0x7
    80013cfa:	00a080e7          	jalr	10(ra) # 8001ad00 <_ZN6kernel2fs5inode5Inode4lock17he70970c593f751adE>
    80013cfe:	ebaa                	sd	a0,464(sp)
    80013d00:	efae                	sd	a1,472(sp)
    80013d02:	a021                	j	80013d0a <.LBB16_80+0x40>
    80013d04:	4505                	li	a0,1
                return Err(())
    80013d06:	e9aa                	sd	a0,208(sp)
    80013d08:	a6b9                	j	80014056 <.LBB16_90+0x3e>
    80013d0a:	1288                	addi	a0,sp,352
    80013d0c:	ed2a                	sd	a0,152(sp)

0000000080013d0e <.LBB16_81>:
    80013d0e:	00016597          	auipc	a1,0x16
    80013d12:	a2a58593          	addi	a1,a1,-1494 # 80029738 <.L__unnamed_49>
    80013d16:	f12e                	sd	a1,160(sp)
    80013d18:	24b13c23          	sd	a1,600(sp)
    80013d1c:	4505                	li	a0,1
    80013d1e:	f52a                	sd	a0,168(sp)
    80013d20:	26a13023          	sd	a0,608(sp)
    80013d24:	26b13423          	sd	a1,616(sp)
    80013d28:	26a13823          	sd	a0,624(sp)
        if str_cmp(&name, ".".as_bytes(), DIRSIZ) &&
    80013d2c:	a081                	j	80013d6c <.LBB16_82+0x2a>
    80013d2e:	4505                	li	a0,1
    80013d30:	1ea103a3          	sb	a0,487(sp)
    80013d34:	a03d                	j	80013d62 <.LBB16_82+0x20>
    80013d36:	4501                	li	a0,0
    80013d38:	1ea103a3          	sb	a0,487(sp)
    80013d3c:	a01d                	j	80013d62 <.LBB16_82+0x20>
    80013d3e:	1288                	addi	a0,sp,352
    80013d40:	e12a                	sd	a0,128(sp)

0000000080013d42 <.LBB16_82>:
    80013d42:	00016597          	auipc	a1,0x16
    80013d46:	9f758593          	addi	a1,a1,-1545 # 80029739 <.L__unnamed_50>
    80013d4a:	e52e                	sd	a1,136(sp)
    80013d4c:	26b13c23          	sd	a1,632(sp)
    80013d50:	4509                	li	a0,2
    80013d52:	e92a                	sd	a0,144(sp)
    80013d54:	28a13023          	sd	a0,640(sp)
    80013d58:	28b13423          	sd	a1,648(sp)
    80013d5c:	28a13823          	sd	a0,656(sp)
            str_cmp(&name, "..".as_bytes(), DIRSIZ) {
    80013d60:	a025                	j	80013d88 <.LBB16_82+0x46>
        if str_cmp(&name, ".".as_bytes(), DIRSIZ) &&
    80013d62:	1e714503          	lbu	a0,487(sp)
    80013d66:	8905                	andi	a0,a0,1
    80013d68:	ed15                	bnez	a0,80013da4 <.LBB16_82+0x62>
    80013d6a:	a0a1                	j	80013db2 <.LBB16_82+0x70>
    80013d6c:	76aa                	ld	a3,168(sp)
    80013d6e:	760a                	ld	a2,160(sp)
    80013d70:	656a                	ld	a0,152(sp)
    80013d72:	4739                	li	a4,14
    80013d74:	85ba                	mv	a1,a4
    80013d76:	ffff4097          	auipc	ra,0xffff4
    80013d7a:	cbe080e7          	jalr	-834(ra) # 80007a34 <_ZN6kernel4misc7str_cmp17h91115d5ee259e480E>
    80013d7e:	fcaa                	sd	a0,120(sp)
    80013d80:	a009                	j	80013d82 <.LBB16_82+0x40>
    80013d82:	7566                	ld	a0,120(sp)
    80013d84:	fd4d                	bnez	a0,80013d3e <.LBB16_81+0x30>
    80013d86:	bf45                	j	80013d36 <.LBB16_81+0x28>
            str_cmp(&name, "..".as_bytes(), DIRSIZ) {
    80013d88:	66ca                	ld	a3,144(sp)
    80013d8a:	662a                	ld	a2,136(sp)
    80013d8c:	650a                	ld	a0,128(sp)
    80013d8e:	4739                	li	a4,14
    80013d90:	85ba                	mv	a1,a4
    80013d92:	ffff4097          	auipc	ra,0xffff4
    80013d96:	ca2080e7          	jalr	-862(ra) # 80007a34 <_ZN6kernel4misc7str_cmp17h91115d5ee259e480E>
    80013d9a:	f8aa                	sd	a0,112(sp)
    80013d9c:	a009                	j	80013d9e <.LBB16_82+0x5c>
        if str_cmp(&name, ".".as_bytes(), DIRSIZ) &&
    80013d9e:	7546                	ld	a0,112(sp)
    80013da0:	f559                	bnez	a0,80013d2e <.LBB16_81+0x20>
    80013da2:	bf51                	j	80013d36 <.LBB16_81+0x28>
                drop(parent_guard);
    80013da4:	655e                	ld	a0,464(sp)
    80013da6:	65fe                	ld	a1,472(sp)
    80013da8:	00009097          	auipc	ra,0x9
    80013dac:	10a080e7          	jalr	266(ra) # 8001ceb2 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    80013db0:	a801                	j	80013dc0 <.LBB16_83>
    80013db2:	0b88                	addi	a0,sp,464
                LOG.end_op();
                return Err(())
        }
        match parent_guard.dir_lookup(&name) {
    80013db4:	00009097          	auipc	ra,0x9
    80013db8:	760080e7          	jalr	1888(ra) # 8001d514 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    80013dbc:	f4aa                	sd	a0,104(sp)
    80013dbe:	a829                	j	80013dd8 <.LBB16_83+0x18>

0000000080013dc0 <.LBB16_83>:
                LOG.end_op();
    80013dc0:	00046517          	auipc	a0,0x46
    80013dc4:	8a850513          	addi	a0,a0,-1880 # 80059668 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    80013dc8:	ffff5097          	auipc	ra,0xffff5
    80013dcc:	41a080e7          	jalr	1050(ra) # 800091e2 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>
    80013dd0:	a009                	j	80013dd2 <.LBB16_83+0x12>
    80013dd2:	4505                	li	a0,1
                return Err(())
    80013dd4:	e9aa                	sd	a0,208(sp)
    80013dd6:	a441                	j	80014056 <.LBB16_90+0x3e>
        match parent_guard.dir_lookup(&name) {
    80013dd8:	75a6                	ld	a1,104(sp)
    80013dda:	13a8                	addi	a0,sp,488
    80013ddc:	1290                	addi	a2,sp,352
    80013dde:	46b9                	li	a3,14
    80013de0:	00007097          	auipc	ra,0x7
    80013de4:	936080e7          	jalr	-1738(ra) # 8001a716 <_ZN6kernel2fs5inode9InodeData10dir_lookup17h2ffc093ee3be0a35E>
    80013de8:	a009                	j	80013dea <.LBB16_83+0x2a>
            Some(cur) => {
    80013dea:	753e                	ld	a0,488(sp)
    80013dec:	4581                	li	a1,0
    80013dee:	00b51a63          	bne	a0,a1,80013e02 <.LBB16_83+0x42>
    80013df2:	a009                	j	80013df4 <.LBB16_83+0x34>
                inode = cur;
            },
            _ => {
                drop(parent_guard);
    80013df4:	655e                	ld	a0,464(sp)
    80013df6:	65fe                	ld	a1,472(sp)
    80013df8:	00009097          	auipc	ra,0x9
    80013dfc:	0ba080e7          	jalr	186(ra) # 8001ceb2 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    80013e00:	a815                	j	80013e34 <.LBB16_84>
            Some(cur) => {
    80013e02:	757e                	ld	a0,504(sp)
    80013e04:	20a13423          	sd	a0,520(sp)
    80013e08:	75de                	ld	a1,496(sp)
    80013e0a:	20b13023          	sd	a1,512(sp)
                inode = cur;
    80013e0e:	20b13823          	sd	a1,528(sp)
    80013e12:	20a13c23          	sd	a0,536(sp)
    80013e16:	4605                	li	a2,1
    80013e18:	22c10b23          	sb	a2,566(sp)
    80013e1c:	e32e                	sd	a1,384(sp)
    80013e1e:	e72a                	sd	a0,392(sp)
    80013e20:	0308                	addi	a0,sp,384
                LOG.end_op();
                return Err(())
            }
        }

        let mut inode_guard = inode.lock();
    80013e22:	00007097          	auipc	ra,0x7
    80013e26:	ede080e7          	jalr	-290(ra) # 8001ad00 <_ZN6kernel2fs5inode5Inode4lock17he70970c593f751adE>
    80013e2a:	22a13023          	sd	a0,544(sp)
    80013e2e:	22b13423          	sd	a1,552(sp)
    80013e32:	a015                	j	80013e56 <.LBB16_84+0x22>

0000000080013e34 <.LBB16_84>:
                LOG.end_op();
    80013e34:	00046517          	auipc	a0,0x46
    80013e38:	83450513          	addi	a0,a0,-1996 # 80059668 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    80013e3c:	ffff5097          	auipc	ra,0xffff5
    80013e40:	3a6080e7          	jalr	934(ra) # 800091e2 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>
    80013e44:	a009                	j	80013e46 <.LBB16_84+0x12>
    80013e46:	4505                	li	a0,1
                return Err(())
    80013e48:	e9aa                	sd	a0,208(sp)
    80013e4a:	13a8                	addi	a0,sp,488
        }
    80013e4c:	ffff3097          	auipc	ra,0xffff3
    80013e50:	158080e7          	jalr	344(ra) # 80006fa4 <_ZN4core3ptr73drop_in_place$LT$core..option..Option$LT$kernel..fs..inode..Inode$GT$$GT$17h6a7b3b84406d6cdfE>
    80013e54:	a409                	j	80014056 <.LBB16_90+0x3e>
    80013e56:	1408                	addi	a0,sp,544
        if inode_guard.dinode.nlink < 1 {
    80013e58:	00009097          	auipc	ra,0x9
    80013e5c:	6a8080e7          	jalr	1704(ra) # 8001d500 <_ZN92_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfc7812d7ca7ab1e1E>
    80013e60:	f0aa                	sd	a0,96(sp)
    80013e62:	a009                	j	80013e64 <.LBB16_84+0x30>
    80013e64:	7506                	ld	a0,96(sp)
    80013e66:	00e51583          	lh	a1,14(a0)
    80013e6a:	4501                	li	a0,0
    80013e6c:	02b54263          	blt	a0,a1,80013e90 <.LBB16_86+0x16>
    80013e70:	a009                	j	80013e72 <.LBB16_85>

0000000080013e72 <.LBB16_85>:
            panic!("sys_unlink: inods's nlink must be larger than 1.");
    80013e72:	00016517          	auipc	a0,0x16
    80013e76:	8c950513          	addi	a0,a0,-1847 # 8002973b <.L__unnamed_51>

0000000080013e7a <.LBB16_86>:
    80013e7a:	00016617          	auipc	a2,0x16
    80013e7e:	8f660613          	addi	a2,a2,-1802 # 80029770 <.L__unnamed_52>
    80013e82:	03000593          	li	a1,48
    80013e86:	0000e097          	auipc	ra,0xe
    80013e8a:	276080e7          	jalr	630(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80013e8e:	0000                	unimp
    80013e90:	1408                	addi	a0,sp,544
        }

        if inode_guard.dinode.itype == InodeType::Directory && 
    80013e92:	00009097          	auipc	ra,0x9
    80013e96:	66e080e7          	jalr	1646(ra) # 8001d500 <_ZN92_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfc7812d7ca7ab1e1E>
    80013e9a:	ecaa                	sd	a0,88(sp)
    80013e9c:	a02d                	j	80013ec6 <.LBB16_86+0x4c>
    80013e9e:	4505                	li	a0,1
    80013ea0:	22a10aa3          	sb	a0,565(sp)
    80013ea4:	a821                	j	80013ebc <.LBB16_86+0x42>
    80013ea6:	4501                	li	a0,0
    80013ea8:	22a10aa3          	sb	a0,565(sp)
    80013eac:	a801                	j	80013ebc <.LBB16_86+0x42>
    80013eae:	1408                	addi	a0,sp,544
            !inode_guard.is_dir_empty() {
    80013eb0:	00009097          	auipc	ra,0x9
    80013eb4:	664080e7          	jalr	1636(ra) # 8001d514 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    80013eb8:	e8aa                	sd	a0,80(sp)
    80013eba:	a02d                	j	80013ee4 <.LBB16_87+0x1a>
        if inode_guard.dinode.itype == InodeType::Directory && 
    80013ebc:	23514503          	lbu	a0,565(sp)
    80013ec0:	8905                	andi	a0,a0,1
    80013ec2:	ed0d                	bnez	a0,80013efc <.LBB16_87+0x32>
    80013ec4:	a0a9                	j	80013f0e <.LBB16_87+0x44>
    80013ec6:	6566                	ld	a0,88(sp)
    80013ec8:	0521                	addi	a0,a0,8

0000000080013eca <.LBB16_87>:
    80013eca:	00015597          	auipc	a1,0x15
    80013ece:	49e58593          	addi	a1,a1,1182 # 80029368 <.L__unnamed_18>
    80013ed2:	ffff4097          	auipc	ra,0xffff4
    80013ed6:	53a080e7          	jalr	1338(ra) # 8000840c <_ZN70_$LT$kernel..fs..dinode..InodeType$u20$as$u20$core..cmp..PartialEq$GT$2eq17h96b8b60db340aeeeE>
    80013eda:	e4aa                	sd	a0,72(sp)
    80013edc:	a009                	j	80013ede <.LBB16_87+0x14>
    80013ede:	6526                	ld	a0,72(sp)
    80013ee0:	f579                	bnez	a0,80013eae <.LBB16_86+0x34>
    80013ee2:	b7d1                	j	80013ea6 <.LBB16_86+0x2c>
            !inode_guard.is_dir_empty() {
    80013ee4:	6546                	ld	a0,80(sp)
    80013ee6:	00007097          	auipc	ra,0x7
    80013eea:	cc4080e7          	jalr	-828(ra) # 8001abaa <_ZN6kernel2fs5inode9InodeData12is_dir_empty17h5fc1239b2ba5dde8E>
    80013eee:	e0aa                	sd	a0,64(sp)
    80013ef0:	a009                	j	80013ef2 <.LBB16_87+0x28>
    80013ef2:	6506                	ld	a0,64(sp)
    80013ef4:	4581                	li	a1,0
        if inode_guard.dinode.itype == InodeType::Directory && 
    80013ef6:	fab504e3          	beq	a0,a1,80013e9e <.LBB16_86+0x24>
    80013efa:	b775                	j	80013ea6 <.LBB16_86+0x2c>
                drop(inode_guard);
    80013efc:	22013503          	ld	a0,544(sp)
    80013f00:	22813583          	ld	a1,552(sp)
    80013f04:	00009097          	auipc	ra,0x9
    80013f08:	fae080e7          	jalr	-82(ra) # 8001ceb2 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    80013f0c:	a801                	j	80013f1c <.LBB16_87+0x52>
    80013f0e:	1408                	addi	a0,sp,544
                drop(parent_guard);
                LOG.end_op();
                return Err(())
            }

        if inode_guard.dinode.itype == InodeType::Directory {
    80013f10:	00009097          	auipc	ra,0x9
    80013f14:	5f0080e7          	jalr	1520(ra) # 8001d500 <_ZN92_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfc7812d7ca7ab1e1E>
    80013f18:	fc2a                	sd	a0,56(sp)
    80013f1a:	a025                	j	80013f42 <.LBB16_88+0x18>
                drop(parent_guard);
    80013f1c:	655e                	ld	a0,464(sp)
    80013f1e:	65fe                	ld	a1,472(sp)
    80013f20:	00009097          	auipc	ra,0x9
    80013f24:	f92080e7          	jalr	-110(ra) # 8001ceb2 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    80013f28:	a009                	j	80013f2a <.LBB16_88>

0000000080013f2a <.LBB16_88>:
                LOG.end_op();
    80013f2a:	00045517          	auipc	a0,0x45
    80013f2e:	73e50513          	addi	a0,a0,1854 # 80059668 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    80013f32:	ffff5097          	auipc	ra,0xffff5
    80013f36:	2b0080e7          	jalr	688(ra) # 800091e2 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>
    80013f3a:	a009                	j	80013f3c <.LBB16_88+0x12>
    80013f3c:	4505                	li	a0,1
                return Err(())
    80013f3e:	e9aa                	sd	a0,208(sp)
    80013f40:	aa19                	j	80014056 <.LBB16_90+0x3e>
        if inode_guard.dinode.itype == InodeType::Directory {
    80013f42:	7562                	ld	a0,56(sp)
    80013f44:	0521                	addi	a0,a0,8

0000000080013f46 <.LBB16_89>:
    80013f46:	00015597          	auipc	a1,0x15
    80013f4a:	42258593          	addi	a1,a1,1058 # 80029368 <.L__unnamed_18>
    80013f4e:	ffff4097          	auipc	ra,0xffff4
    80013f52:	4be080e7          	jalr	1214(ra) # 8000840c <_ZN70_$LT$kernel..fs..dinode..InodeType$u20$as$u20$core..cmp..PartialEq$GT$2eq17h96b8b60db340aeeeE>
    80013f56:	f82a                	sd	a0,48(sp)
    80013f58:	a009                	j	80013f5a <.LBB16_89+0x14>
    80013f5a:	7542                	ld	a0,48(sp)
    80013f5c:	4581                	li	a1,0
    80013f5e:	00b50a63          	beq	a0,a1,80013f72 <.LBB16_89+0x2c>
    80013f62:	a009                	j	80013f64 <.LBB16_89+0x1e>
    80013f64:	0b88                	addi	a0,sp,464
            parent_guard.dinode.nlink -= 1;
    80013f66:	00009097          	auipc	ra,0x9
    80013f6a:	5ae080e7          	jalr	1454(ra) # 8001d514 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    80013f6e:	f42a                	sd	a0,40(sp)
    80013f70:	a011                	j	80013f74 <.LBB16_89+0x2e>
        if inode_guard.dinode.itype == InodeType::Directory {
    80013f72:	a83d                	j	80013fb0 <.LBB16_89+0x6a>
            parent_guard.dinode.nlink -= 1;
    80013f74:	7522                	ld	a0,40(sp)
    80013f76:	00e51503          	lh	a0,14(a0)
    80013f7a:	fff50593          	addi	a1,a0,-1
    80013f7e:	f02e                	sd	a1,32(sp)
    80013f80:	03059513          	slli	a0,a1,0x30
    80013f84:	9541                	srai	a0,a0,0x30
    80013f86:	10b51c63          	bne	a0,a1,8001409e <.LBB16_91>
    80013f8a:	a009                	j	80013f8c <.LBB16_89+0x46>
    80013f8c:	7502                	ld	a0,32(sp)
    80013f8e:	75a2                	ld	a1,40(sp)
    80013f90:	00a59723          	sh	a0,14(a1)
    80013f94:	0b88                	addi	a0,sp,464
            parent_guard.update();
    80013f96:	00009097          	auipc	ra,0x9
    80013f9a:	57e080e7          	jalr	1406(ra) # 8001d514 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    80013f9e:	ec2a                	sd	a0,24(sp)
    80013fa0:	a009                	j	80013fa2 <.LBB16_89+0x5c>
    80013fa2:	6562                	ld	a0,24(sp)
    80013fa4:	00006097          	auipc	ra,0x6
    80013fa8:	df0080e7          	jalr	-528(ra) # 80019d94 <_ZN6kernel2fs5inode9InodeData6update17h81f49ab31d0ddfdcE>
    80013fac:	a009                	j	80013fae <.LBB16_89+0x68>
        if inode_guard.dinode.itype == InodeType::Directory {
    80013fae:	a009                	j	80013fb0 <.LBB16_89+0x6a>
        }
        drop(parent_guard);
    80013fb0:	655e                	ld	a0,464(sp)
    80013fb2:	65fe                	ld	a1,472(sp)
    80013fb4:	00009097          	auipc	ra,0x9
    80013fb8:	efe080e7          	jalr	-258(ra) # 8001ceb2 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    80013fbc:	a009                	j	80013fbe <.LBB16_89+0x78>
    80013fbe:	1408                	addi	a0,sp,544

        inode_guard.dinode.nlink -= 1;
    80013fc0:	00009097          	auipc	ra,0x9
    80013fc4:	554080e7          	jalr	1364(ra) # 8001d514 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    80013fc8:	e82a                	sd	a0,16(sp)
    80013fca:	a009                	j	80013fcc <.LBB16_89+0x86>
    80013fcc:	6542                	ld	a0,16(sp)
    80013fce:	00e51503          	lh	a0,14(a0)
    80013fd2:	fff50593          	addi	a1,a0,-1
    80013fd6:	e42e                	sd	a1,8(sp)
    80013fd8:	03059513          	slli	a0,a1,0x30
    80013fdc:	9541                	srai	a0,a0,0x30
    80013fde:	0cb51f63          	bne	a0,a1,800140bc <.LBB16_93>
    80013fe2:	a009                	j	80013fe4 <.LBB16_89+0x9e>
    80013fe4:	6522                	ld	a0,8(sp)
    80013fe6:	65c2                	ld	a1,16(sp)
    80013fe8:	00a59723          	sh	a0,14(a1)
    80013fec:	1408                	addi	a0,sp,544
        inode_guard.update();
    80013fee:	00009097          	auipc	ra,0x9
    80013ff2:	526080e7          	jalr	1318(ra) # 8001d514 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    80013ff6:	e02a                	sd	a0,0(sp)
    80013ff8:	a009                	j	80013ffa <.LBB16_89+0xb4>
    80013ffa:	6502                	ld	a0,0(sp)
    80013ffc:	00006097          	auipc	ra,0x6
    80014000:	d98080e7          	jalr	-616(ra) # 80019d94 <_ZN6kernel2fs5inode9InodeData6update17h81f49ab31d0ddfdcE>
    80014004:	a009                	j	80014006 <.LBB16_89+0xc0>
        drop(inode_guard);
    80014006:	22013503          	ld	a0,544(sp)
    8001400a:	22813583          	ld	a1,552(sp)
    8001400e:	00009097          	auipc	ra,0x9
    80014012:	ea4080e7          	jalr	-348(ra) # 8001ceb2 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    80014016:	a009                	j	80014018 <.LBB16_90>

0000000080014018 <.LBB16_90>:

        LOG.end_op();
    80014018:	00045517          	auipc	a0,0x45
    8001401c:	65050513          	addi	a0,a0,1616 # 80059668 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    80014020:	ffff5097          	auipc	ra,0xffff5
    80014024:	1c2080e7          	jalr	450(ra) # 800091e2 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>
    80014028:	a009                	j	8001402a <.LBB16_90+0x12>
    8001402a:	4501                	li	a0,0
        Ok(0)
    8001402c:	edaa                	sd	a0,216(sp)
    8001402e:	e9aa                	sd	a0,208(sp)
    80014030:	0308                	addi	a0,sp,384
    }
    80014032:	ffff3097          	auipc	ra,0xffff3
    80014036:	ea8080e7          	jalr	-344(ra) # 80006eda <_ZN4core3ptr45drop_in_place$LT$kernel..fs..inode..Inode$GT$17h8786fe1a2a287832E>
    8001403a:	a009                	j	8001403c <.LBB16_90+0x24>
    8001403c:	4501                	li	a0,0
    8001403e:	22a10b23          	sb	a0,566(sp)
    80014042:	1a88                	addi	a0,sp,368
    80014044:	ffff3097          	auipc	ra,0xffff3
    80014048:	e96080e7          	jalr	-362(ra) # 80006eda <_ZN4core3ptr45drop_in_place$LT$kernel..fs..inode..Inode$GT$17h8786fe1a2a287832E>
    8001404c:	a009                	j	8001404e <.LBB16_90+0x36>
    8001404e:	4501                	li	a0,0
    80014050:	22a10ba3          	sb	a0,567(sp)
    80014054:	a015                	j	80014078 <.LBB16_90+0x60>
    80014056:	23614503          	lbu	a0,566(sp)
    8001405a:	8905                	andi	a0,a0,1
    8001405c:	e50d                	bnez	a0,80014086 <.LBB16_90+0x6e>
    8001405e:	a009                	j	80014060 <.LBB16_90+0x48>
    80014060:	4501                	li	a0,0
    80014062:	22a10b23          	sb	a0,566(sp)
    80014066:	23714503          	lbu	a0,567(sp)
    8001406a:	8905                	andi	a0,a0,1
    8001406c:	e11d                	bnez	a0,80014092 <.LBB16_90+0x7a>
    8001406e:	a009                	j	80014070 <.LBB16_90+0x58>
    80014070:	4501                	li	a0,0
    80014072:	22a10ba3          	sb	a0,567(sp)
    80014076:	a009                	j	80014078 <.LBB16_90+0x60>
    80014078:	654e                	ld	a0,208(sp)
    8001407a:	65ee                	ld	a1,216(sp)
    8001407c:	29813083          	ld	ra,664(sp)
    80014080:	2a010113          	addi	sp,sp,672
    80014084:	8082                	ret
    80014086:	0308                	addi	a0,sp,384
    80014088:	ffff3097          	auipc	ra,0xffff3
    8001408c:	e52080e7          	jalr	-430(ra) # 80006eda <_ZN4core3ptr45drop_in_place$LT$kernel..fs..inode..Inode$GT$17h8786fe1a2a287832E>
    80014090:	bfc1                	j	80014060 <.LBB16_90+0x48>
    80014092:	1a88                	addi	a0,sp,368
    80014094:	ffff3097          	auipc	ra,0xffff3
    80014098:	e46080e7          	jalr	-442(ra) # 80006eda <_ZN4core3ptr45drop_in_place$LT$kernel..fs..inode..Inode$GT$17h8786fe1a2a287832E>
    8001409c:	bfd1                	j	80014070 <.LBB16_90+0x58>

000000008001409e <.LBB16_91>:
            parent_guard.dinode.nlink -= 1;
    8001409e:	00015517          	auipc	a0,0x15
    800140a2:	70250513          	addi	a0,a0,1794 # 800297a0 <str.2>

00000000800140a6 <.LBB16_92>:
    800140a6:	00015617          	auipc	a2,0x15
    800140aa:	6e260613          	addi	a2,a2,1762 # 80029788 <.L__unnamed_53>
    800140ae:	02100593          	li	a1,33
    800140b2:	0000e097          	auipc	ra,0xe
    800140b6:	04a080e7          	jalr	74(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

00000000800140bc <.LBB16_93>:
        inode_guard.dinode.nlink -= 1;
    800140bc:	00015517          	auipc	a0,0x15
    800140c0:	6e450513          	addi	a0,a0,1764 # 800297a0 <str.2>

00000000800140c4 <.LBB16_94>:
    800140c4:	00015617          	auipc	a2,0x15
    800140c8:	70460613          	addi	a2,a2,1796 # 800297c8 <.L__unnamed_54>
    800140cc:	02100593          	li	a1,33
    800140d0:	0000e097          	auipc	ra,0xe
    800140d4:	02c080e7          	jalr	44(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_link17ha9dece5abe92404dE:

00000000800140da <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_link17ha9dece5abe92404dE>:

    /// Create the path new as a link to the same inode as old.
    pub fn sys_link(&self) -> SysResult {
    800140da:	d2010113          	addi	sp,sp,-736
    800140de:	2c113c23          	sd	ra,728(sp)
    800140e2:	ed2a                	sd	a0,152(sp)
    800140e4:	2aa13023          	sd	a0,672(sp)
    800140e8:	4581                	li	a1,0
        let mut new_path = [0u8; MAXPATH];
    800140ea:	e92e                	sd	a1,144(sp)
    800140ec:	28b10fa3          	sb	a1,671(sp)
    800140f0:	28b10ea3          	sb	a1,669(sp)
    800140f4:	28b10f23          	sb	a1,670(sp)
    800140f8:	1928                	addi	a0,sp,184
    800140fa:	08000613          	li	a2,128
    800140fe:	e532                	sd	a2,136(sp)
    80014100:	00011097          	auipc	ra,0x11
    80014104:	f8c080e7          	jalr	-116(ra) # 8002508c <memset>
    80014108:	662a                	ld	a2,136(sp)
    8001410a:	65ca                	ld	a1,144(sp)
    8001410c:	1a28                	addi	a0,sp,312
        let mut old_path = [0u8; MAXPATH];
    8001410e:	00011097          	auipc	ra,0x11
    80014112:	f7e080e7          	jalr	-130(ra) # 8002508c <memset>
    80014116:	65ca                	ld	a1,144(sp)
        let mut name = [0u8; DIRSIZ];
    80014118:	656a                	ld	a0,152(sp)
    8001411a:	ff2e                	sd	a1,440(sp)
    8001411c:	1cb12023          	sw	a1,448(sp)
    80014120:	1cb11223          	sh	a1,452(sp)
        let inode: Inode;
        let parent: Inode;

        let old_path_addr = self.arg(0);
    80014124:	00001097          	auipc	ra,0x1
    80014128:	cbc080e7          	jalr	-836(ra) # 80014de0 <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    8001412c:	85aa                	mv	a1,a0
    8001412e:	f12e                	sd	a1,160(sp)
    80014130:	2ca13423          	sd	a0,712(sp)
    80014134:	a009                	j	80014136 <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_link17ha9dece5abe92404dE+0x5c>
        let new_path_addr = self.arg(1);
    80014136:	656a                	ld	a0,152(sp)
    80014138:	4585                	li	a1,1
    8001413a:	00001097          	auipc	ra,0x1
    8001413e:	ca6080e7          	jalr	-858(ra) # 80014de0 <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    80014142:	85aa                	mv	a1,a0
    80014144:	e12e                	sd	a1,128(sp)
    80014146:	2ca13823          	sd	a0,720(sp)
    8001414a:	a009                	j	8001414c <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_link17ha9dece5abe92404dE+0x72>
        self.copy_from_str(old_path_addr, &mut old_path, MAXPATH)?;
    8001414c:	758a                	ld	a1,160(sp)
    8001414e:	656a                	ld	a0,152(sp)
    80014150:	1a30                	addi	a2,sp,312
    80014152:	08000713          	li	a4,128
    80014156:	86ba                	mv	a3,a4
    80014158:	00001097          	auipc	ra,0x1
    8001415c:	d38080e7          	jalr	-712(ra) # 80014e90 <_ZN6kernel7syscall7Syscall13copy_from_str17h5c83be6e0d4b822aE>
    80014160:	fcaa                	sd	a0,120(sp)
    80014162:	a009                	j	80014164 <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_link17ha9dece5abe92404dE+0x8a>
    80014164:	7566                	ld	a0,120(sp)
    80014166:	ffff9097          	auipc	ra,0xffff9
    8001416a:	fee080e7          	jalr	-18(ra) # 8000d154 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h9e3ff03fe8989dd2E>
    8001416e:	1ea10723          	sb	a0,494(sp)
    80014172:	a009                	j	80014174 <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_link17ha9dece5abe92404dE+0x9a>
    80014174:	1ee14503          	lbu	a0,494(sp)
    80014178:	8905                	andi	a0,a0,1
    8001417a:	4581                	li	a1,0
    8001417c:	00b50463          	beq	a0,a1,80014184 <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_link17ha9dece5abe92404dE+0xaa>
    80014180:	a009                	j	80014182 <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_link17ha9dece5abe92404dE+0xa8>
    80014182:	a831                	j	8001419e <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_link17ha9dece5abe92404dE+0xc4>
        self.copy_from_str(new_path_addr, &mut new_path, MAXPATH)?;
    80014184:	658a                	ld	a1,128(sp)
    80014186:	656a                	ld	a0,152(sp)
    80014188:	1930                	addi	a2,sp,184
    8001418a:	08000713          	li	a4,128
    8001418e:	86ba                	mv	a3,a4
    80014190:	00001097          	auipc	ra,0x1
    80014194:	d00080e7          	jalr	-768(ra) # 80014e90 <_ZN6kernel7syscall7Syscall13copy_from_str17h5c83be6e0d4b822aE>
    80014198:	f8aa                	sd	a0,112(sp)
    8001419a:	a831                	j	800141b6 <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_link17ha9dece5abe92404dE+0xdc>
        self.copy_from_str(old_path_addr, &mut old_path, MAXPATH)?;
    8001419c:	0000                	unimp
    8001419e:	ffff8097          	auipc	ra,0xffff8
    800141a2:	820080e7          	jalr	-2016(ra) # 8000b9be <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h2e645b443ebf2dc7E>
    800141a6:	a009                	j	800141a8 <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_link17ha9dece5abe92404dE+0xce>
    800141a8:	ffff9097          	auipc	ra,0xffff9
    800141ac:	e98080e7          	jalr	-360(ra) # 8000d040 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h74072cf57097ff24E>
    800141b0:	f52a                	sd	a0,168(sp)
    800141b2:	f92e                	sd	a1,176(sp)
    800141b4:	ae81                	j	80014504 <.LBB17_81+0x22>
        self.copy_from_str(new_path_addr, &mut new_path, MAXPATH)?;
    800141b6:	7546                	ld	a0,112(sp)
    800141b8:	ffff9097          	auipc	ra,0xffff9
    800141bc:	f9c080e7          	jalr	-100(ra) # 8000d154 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h9e3ff03fe8989dd2E>
    800141c0:	1ea107a3          	sb	a0,495(sp)
    800141c4:	a009                	j	800141c6 <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_link17ha9dece5abe92404dE+0xec>
    800141c6:	1ef14503          	lbu	a0,495(sp)
    800141ca:	8905                	andi	a0,a0,1
    800141cc:	4581                	li	a1,0
    800141ce:	00b50463          	beq	a0,a1,800141d6 <.LBB17_72>
    800141d2:	a009                	j	800141d4 <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_link17ha9dece5abe92404dE+0xfa>
    800141d4:	a819                	j	800141ea <.LBB17_72+0x14>

00000000800141d6 <.LBB17_72>:

        LOG.begin_op();
    800141d6:	00045517          	auipc	a0,0x45
    800141da:	49250513          	addi	a0,a0,1170 # 80059668 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    800141de:	ffff5097          	auipc	ra,0xffff5
    800141e2:	a1e080e7          	jalr	-1506(ra) # 80008bfc <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$8begin_op17he5b49a48c716e372E>
    800141e6:	a831                	j	80014202 <.LBB17_73>
        self.copy_from_str(new_path_addr, &mut new_path, MAXPATH)?;
    800141e8:	0000                	unimp
    800141ea:	ffff7097          	auipc	ra,0xffff7
    800141ee:	7d4080e7          	jalr	2004(ra) # 8000b9be <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h2e645b443ebf2dc7E>
    800141f2:	a009                	j	800141f4 <.LBB17_72+0x1e>
    800141f4:	ffff9097          	auipc	ra,0xffff9
    800141f8:	e4c080e7          	jalr	-436(ra) # 8000d040 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h74072cf57097ff24E>
    800141fc:	f52a                	sd	a0,168(sp)
    800141fe:	f92e                	sd	a1,176(sp)
    80014200:	a611                	j	80014504 <.LBB17_81+0x22>

0000000080014202 <.LBB17_73>:
        match ICACHE.namei(&old_path) {
    80014202:	00045597          	auipc	a1,0x45
    80014206:	50e58593          	addi	a1,a1,1294 # 80059710 <_ZN6kernel2fs5inode6ICACHE17had1be8942ca79bf1E>
    8001420a:	1b88                	addi	a0,sp,496
    8001420c:	1a30                	addi	a2,sp,312
    8001420e:	08000693          	li	a3,128
    80014212:	00005097          	auipc	ra,0x5
    80014216:	0aa080e7          	jalr	170(ra) # 800192bc <_ZN6kernel2fs5inode10InodeCache5namei17hc269c6a9eecf1991E>
    8001421a:	a009                	j	8001421c <.LBB17_73+0x1a>
            Some(cur) => {
    8001421c:	755e                	ld	a0,496(sp)
    8001421e:	4581                	li	a1,0
    80014220:	00b50463          	beq	a0,a1,80014228 <.LBB17_74>
    80014224:	a009                	j	80014226 <.LBB17_73+0x24>
    80014226:	a819                	j	8001423c <.LBB17_74+0x14>

0000000080014228 <.LBB17_74>:
                inode = cur;
            },

            None => {
                LOG.end_op();
    80014228:	00045517          	auipc	a0,0x45
    8001422c:	44050513          	addi	a0,a0,1088 # 80059668 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    80014230:	ffff5097          	auipc	ra,0xffff5
    80014234:	fb2080e7          	jalr	-78(ra) # 800091e2 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>
    80014238:	a825                	j	80014270 <.LBB17_74+0x48>
        match ICACHE.namei(&old_path) {
    8001423a:	0000                	unimp
            Some(cur) => {
    8001423c:	20013503          	ld	a0,512(sp)
    80014240:	20a13823          	sd	a0,528(sp)
    80014244:	75fe                	ld	a1,504(sp)
    80014246:	20b13423          	sd	a1,520(sp)
                inode = cur;
    8001424a:	20b13c23          	sd	a1,536(sp)
    8001424e:	22a13023          	sd	a0,544(sp)
    80014252:	4605                	li	a2,1
    80014254:	28c10fa3          	sb	a2,671(sp)
    80014258:	e7ae                	sd	a1,456(sp)
    8001425a:	ebaa                	sd	a0,464(sp)
    8001425c:	03a8                	addi	a0,sp,456
                return Err(())
            }
        }
        let mut inode_guard = inode.lock();
    8001425e:	00007097          	auipc	ra,0x7
    80014262:	aa2080e7          	jalr	-1374(ra) # 8001ad00 <_ZN6kernel2fs5inode5Inode4lock17he70970c593f751adE>
    80014266:	22a13423          	sd	a0,552(sp)
    8001426a:	22b13823          	sd	a1,560(sp)
    8001426e:	a021                	j	80014276 <.LBB17_74+0x4e>
    80014270:	4505                	li	a0,1
                return Err(())
    80014272:	f52a                	sd	a0,168(sp)
    80014274:	ac41                	j	80014504 <.LBB17_81+0x22>
    80014276:	1428                	addi	a0,sp,552
        if inode_guard.dinode.itype == InodeType::Directory {
    80014278:	00009097          	auipc	ra,0x9
    8001427c:	288080e7          	jalr	648(ra) # 8001d500 <_ZN92_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfc7812d7ca7ab1e1E>
    80014280:	f4aa                	sd	a0,104(sp)
    80014282:	a009                	j	80014284 <.LBB17_74+0x5c>
    80014284:	7526                	ld	a0,104(sp)
    80014286:	0521                	addi	a0,a0,8

0000000080014288 <.LBB17_75>:
    80014288:	00015597          	auipc	a1,0x15
    8001428c:	0e058593          	addi	a1,a1,224 # 80029368 <.L__unnamed_18>
    80014290:	ffff4097          	auipc	ra,0xffff4
    80014294:	17c080e7          	jalr	380(ra) # 8000840c <_ZN70_$LT$kernel..fs..dinode..InodeType$u20$as$u20$core..cmp..PartialEq$GT$2eq17h96b8b60db340aeeeE>
    80014298:	f0aa                	sd	a0,96(sp)
    8001429a:	a009                	j	8001429c <.LBB17_75+0x14>
    8001429c:	7506                	ld	a0,96(sp)
    8001429e:	4581                	li	a1,0
    800142a0:	00b50c63          	beq	a0,a1,800142b8 <.LBB17_75+0x30>
    800142a4:	a009                	j	800142a6 <.LBB17_75+0x1e>
            drop(inode_guard);
    800142a6:	22813503          	ld	a0,552(sp)
    800142aa:	23013583          	ld	a1,560(sp)
    800142ae:	00009097          	auipc	ra,0x9
    800142b2:	c04080e7          	jalr	-1020(ra) # 8001ceb2 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    800142b6:	a801                	j	800142c6 <.LBB17_76>
    800142b8:	1428                	addi	a0,sp,552
            LOG.end_op();
            return Err(())
        }

        inode_guard.dinode.nlink += 1;
    800142ba:	00009097          	auipc	ra,0x9
    800142be:	25a080e7          	jalr	602(ra) # 8001d514 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    800142c2:	ecaa                	sd	a0,88(sp)
    800142c4:	a829                	j	800142de <.LBB17_76+0x18>

00000000800142c6 <.LBB17_76>:
            LOG.end_op();
    800142c6:	00045517          	auipc	a0,0x45
    800142ca:	3a250513          	addi	a0,a0,930 # 80059668 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    800142ce:	ffff5097          	auipc	ra,0xffff5
    800142d2:	f14080e7          	jalr	-236(ra) # 800091e2 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>
    800142d6:	a009                	j	800142d8 <.LBB17_76+0x12>
    800142d8:	4505                	li	a0,1
            return Err(())
    800142da:	f52a                	sd	a0,168(sp)
    800142dc:	a425                	j	80014504 <.LBB17_81+0x22>
        inode_guard.dinode.nlink += 1;
    800142de:	6566                	ld	a0,88(sp)
    800142e0:	00e51503          	lh	a0,14(a0)
    800142e4:	00150593          	addi	a1,a0,1
    800142e8:	e8ae                	sd	a1,80(sp)
    800142ea:	03059513          	slli	a0,a1,0x30
    800142ee:	9541                	srai	a0,a0,0x30
    800142f0:	26b51863          	bne	a0,a1,80014560 <.LBB17_82>
    800142f4:	a009                	j	800142f6 <.LBB17_76+0x30>
    800142f6:	6546                	ld	a0,80(sp)
    800142f8:	65e6                	ld	a1,88(sp)
    800142fa:	00a59723          	sh	a0,14(a1)

00000000800142fe <.LBB17_77>:

        match ICACHE.namei_parent(&new_path, &mut name) {
    800142fe:	00045597          	auipc	a1,0x45
    80014302:	41258593          	addi	a1,a1,1042 # 80059710 <_ZN6kernel2fs5inode6ICACHE17had1be8942ca79bf1E>
    80014306:	1c28                	addi	a0,sp,568
    80014308:	1930                	addi	a2,sp,184
    8001430a:	08000693          	li	a3,128
    8001430e:	1b38                	addi	a4,sp,440
    80014310:	00005097          	auipc	ra,0x5
    80014314:	fd2080e7          	jalr	-46(ra) # 800192e2 <_ZN6kernel2fs5inode10InodeCache12namei_parent17h24bebf98ccd9b34eE>
    80014318:	a009                	j	8001431a <.LBB17_77+0x1c>
            Some(cur) => {
    8001431a:	23813503          	ld	a0,568(sp)
    8001431e:	4581                	li	a1,0
    80014320:	00b51a63          	bne	a0,a1,80014334 <.LBB17_77+0x36>
    80014324:	a009                	j	80014326 <.LBB17_77+0x28>
    80014326:	1428                	addi	a0,sp,552
                parent = cur;
            },

            _ => {
                inode_guard.dinode.nlink -= 1;
    80014328:	00009097          	auipc	ra,0x9
    8001432c:	1ec080e7          	jalr	492(ra) # 8001d514 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    80014330:	e4aa                	sd	a0,72(sp)
    80014332:	a835                	j	8001436e <.LBB17_77+0x70>
            Some(cur) => {
    80014334:	24813583          	ld	a1,584(sp)
    80014338:	24b13c23          	sd	a1,600(sp)
    8001433c:	24013603          	ld	a2,576(sp)
    80014340:	24c13823          	sd	a2,592(sp)
                parent = cur;
    80014344:	26c13023          	sd	a2,608(sp)
    80014348:	26b13423          	sd	a1,616(sp)
    8001434c:	4505                	li	a0,1
    8001434e:	28a10f23          	sb	a0,670(sp)
    80014352:	efb2                	sd	a2,472(sp)
    80014354:	f3ae                	sd	a1,480(sp)
                drop(inode_guard);
                LOG.end_op();
                return Err(())
            }
        }
        let mut parent_guard = parent.lock();
    80014356:	28a10ea3          	sb	a0,669(sp)
    8001435a:	0ba8                	addi	a0,sp,472
    8001435c:	00007097          	auipc	ra,0x7
    80014360:	9a4080e7          	jalr	-1628(ra) # 8001ad00 <_ZN6kernel2fs5inode5Inode4lock17he70970c593f751adE>
    80014364:	26a13823          	sd	a0,624(sp)
    80014368:	26b13c23          	sd	a1,632(sp)
    8001436c:	a899                	j	800143c2 <.LBB17_78+0x22>
                inode_guard.dinode.nlink -= 1;
    8001436e:	6526                	ld	a0,72(sp)
    80014370:	00e51503          	lh	a0,14(a0)
    80014374:	fff50593          	addi	a1,a0,-1
    80014378:	e0ae                	sd	a1,64(sp)
    8001437a:	03059513          	slli	a0,a1,0x30
    8001437e:	9541                	srai	a0,a0,0x30
    80014380:	1eb51e63          	bne	a0,a1,8001457c <.LBB17_84>
    80014384:	a009                	j	80014386 <.LBB17_77+0x88>
    80014386:	6506                	ld	a0,64(sp)
    80014388:	65a6                	ld	a1,72(sp)
    8001438a:	00a59723          	sh	a0,14(a1)
                drop(inode_guard);
    8001438e:	22813503          	ld	a0,552(sp)
    80014392:	23013583          	ld	a1,560(sp)
    80014396:	00009097          	auipc	ra,0x9
    8001439a:	b1c080e7          	jalr	-1252(ra) # 8001ceb2 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    8001439e:	a009                	j	800143a0 <.LBB17_78>

00000000800143a0 <.LBB17_78>:
                LOG.end_op();
    800143a0:	00045517          	auipc	a0,0x45
    800143a4:	2c850513          	addi	a0,a0,712 # 80059668 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    800143a8:	ffff5097          	auipc	ra,0xffff5
    800143ac:	e3a080e7          	jalr	-454(ra) # 800091e2 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>
    800143b0:	a009                	j	800143b2 <.LBB17_78+0x12>
    800143b2:	4505                	li	a0,1
                return Err(())
    800143b4:	f52a                	sd	a0,168(sp)
    800143b6:	1c28                	addi	a0,sp,568
        }
    800143b8:	ffff3097          	auipc	ra,0xffff3
    800143bc:	bec080e7          	jalr	-1044(ra) # 80006fa4 <_ZN4core3ptr73drop_in_place$LT$core..option..Option$LT$kernel..fs..inode..Inode$GT$$GT$17h6a7b3b84406d6cdfE>
    800143c0:	a291                	j	80014504 <.LBB17_81+0x22>
    800143c2:	1c88                	addi	a0,sp,624
        if parent_guard.dinode.itype != InodeType::Directory || 
    800143c4:	00009097          	auipc	ra,0x9
    800143c8:	13c080e7          	jalr	316(ra) # 8001d500 <_ZN92_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfc7812d7ca7ab1e1E>
    800143cc:	fc2a                	sd	a0,56(sp)
    800143ce:	a02d                	j	800143f8 <.LBB17_78+0x58>
    800143d0:	4505                	li	a0,1
    800143d2:	28a103a3          	sb	a0,647(sp)
    800143d6:	a821                	j	800143ee <.LBB17_78+0x4e>
    800143d8:	4501                	li	a0,0
    800143da:	28a103a3          	sb	a0,647(sp)
    800143de:	a801                	j	800143ee <.LBB17_78+0x4e>
    800143e0:	1c88                	addi	a0,sp,624
            parent_guard.dir_link(&name, inode.inum).is_ok() {
    800143e2:	00009097          	auipc	ra,0x9
    800143e6:	132080e7          	jalr	306(ra) # 8001d514 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    800143ea:	f82a                	sd	a0,48(sp)
    800143ec:	a02d                	j	80014416 <.LBB17_79+0x1a>
        if parent_guard.dinode.itype != InodeType::Directory || 
    800143ee:	28714503          	lbu	a0,647(sp)
    800143f2:	8905                	andi	a0,a0,1
    800143f4:	e929                	bnez	a0,80014446 <.LBB17_79+0x4a>
    800143f6:	a0a5                	j	8001445e <.LBB17_79+0x62>
    800143f8:	7562                	ld	a0,56(sp)
    800143fa:	0521                	addi	a0,a0,8

00000000800143fc <.LBB17_79>:
    800143fc:	00015597          	auipc	a1,0x15
    80014400:	f6c58593          	addi	a1,a1,-148 # 80029368 <.L__unnamed_18>
    80014404:	00004097          	auipc	ra,0x4
    80014408:	e76080e7          	jalr	-394(ra) # 8001827a <_ZN4core3cmp9PartialEq2ne17ha4fd141ed85850e3E>
    8001440c:	f42a                	sd	a0,40(sp)
    8001440e:	a009                	j	80014410 <.LBB17_79+0x14>
    80014410:	7522                	ld	a0,40(sp)
    80014412:	fd5d                	bnez	a0,800143d0 <.LBB17_78+0x30>
    80014414:	b7f1                	j	800143e0 <.LBB17_78+0x40>
            parent_guard.dir_link(&name, inode.inum).is_ok() {
    80014416:	7542                	ld	a0,48(sp)
    80014418:	1d412683          	lw	a3,468(sp)
    8001441c:	1b2c                	addi	a1,sp,440
    8001441e:	4639                	li	a2,14
    80014420:	00006097          	auipc	ra,0x6
    80014424:	520080e7          	jalr	1312(ra) # 8001a940 <_ZN6kernel2fs5inode9InodeData8dir_link17h13a19ea2d651643eE>
    80014428:	28a13423          	sd	a0,648(sp)
    8001442c:	28b13823          	sd	a1,656(sp)
    80014430:	a009                	j	80014432 <.LBB17_79+0x36>
    80014432:	0528                	addi	a0,sp,648
    80014434:	ffff8097          	auipc	ra,0xffff8
    80014438:	7d0080e7          	jalr	2000(ra) # 8000cc04 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h5bbc2715c9ad6c41E>
    8001443c:	f02a                	sd	a0,32(sp)
    8001443e:	a009                	j	80014440 <.LBB17_79+0x44>
        if parent_guard.dinode.itype != InodeType::Directory || 
    80014440:	7502                	ld	a0,32(sp)
    80014442:	f559                	bnez	a0,800143d0 <.LBB17_78+0x30>
    80014444:	bf51                	j	800143d8 <.LBB17_78+0x38>
    80014446:	4501                	li	a0,0
                drop(parent_guard);
    80014448:	28a10ea3          	sb	a0,669(sp)
    8001444c:	27013503          	ld	a0,624(sp)
    80014450:	27813583          	ld	a1,632(sp)
    80014454:	00009097          	auipc	ra,0x9
    80014458:	a5e080e7          	jalr	-1442(ra) # 8001ceb2 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    8001445c:	a801                	j	8001446c <.LBB17_79+0x70>
    8001445e:	1428                	addi	a0,sp,552
                drop(inode_guard);
                LOG.end_op();
                return Err(())
            }
        
        inode_guard.update();
    80014460:	00009097          	auipc	ra,0x9
    80014464:	0b4080e7          	jalr	180(ra) # 8001d514 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    80014468:	ec2a                	sd	a0,24(sp)
    8001446a:	a8a9                	j	800144c4 <.LBB17_80+0x18>
    8001446c:	1428                	addi	a0,sp,552
                inode_guard.dinode.nlink -= 1;
    8001446e:	00009097          	auipc	ra,0x9
    80014472:	0a6080e7          	jalr	166(ra) # 8001d514 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    80014476:	e82a                	sd	a0,16(sp)
    80014478:	a009                	j	8001447a <.LBB17_79+0x7e>
    8001447a:	6542                	ld	a0,16(sp)
    8001447c:	00e51503          	lh	a0,14(a0)
    80014480:	fff50593          	addi	a1,a0,-1
    80014484:	e42e                	sd	a1,8(sp)
    80014486:	03059513          	slli	a0,a1,0x30
    8001448a:	9541                	srai	a0,a0,0x30
    8001448c:	10b51763          	bne	a0,a1,8001459a <.LBB17_86>
    80014490:	a009                	j	80014492 <.LBB17_79+0x96>
    80014492:	6522                	ld	a0,8(sp)
    80014494:	65c2                	ld	a1,16(sp)
    80014496:	00a59723          	sh	a0,14(a1)
                drop(inode_guard);
    8001449a:	22813503          	ld	a0,552(sp)
    8001449e:	23013583          	ld	a1,560(sp)
    800144a2:	00009097          	auipc	ra,0x9
    800144a6:	a10080e7          	jalr	-1520(ra) # 8001ceb2 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    800144aa:	a009                	j	800144ac <.LBB17_80>

00000000800144ac <.LBB17_80>:
                LOG.end_op();
    800144ac:	00045517          	auipc	a0,0x45
    800144b0:	1bc50513          	addi	a0,a0,444 # 80059668 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    800144b4:	ffff5097          	auipc	ra,0xffff5
    800144b8:	d2e080e7          	jalr	-722(ra) # 800091e2 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>
    800144bc:	a009                	j	800144be <.LBB17_80+0x12>
    800144be:	4505                	li	a0,1
                return Err(())
    800144c0:	f52a                	sd	a0,168(sp)
    800144c2:	a8b5                	j	8001453e <.LBB17_81+0x5c>
        inode_guard.update();
    800144c4:	6562                	ld	a0,24(sp)
    800144c6:	00006097          	auipc	ra,0x6
    800144ca:	8ce080e7          	jalr	-1842(ra) # 80019d94 <_ZN6kernel2fs5inode9InodeData6update17h81f49ab31d0ddfdcE>
    800144ce:	a009                	j	800144d0 <.LBB17_80+0x24>
        drop(inode_guard);
    800144d0:	22813503          	ld	a0,552(sp)
    800144d4:	23013583          	ld	a1,560(sp)
    800144d8:	00009097          	auipc	ra,0x9
    800144dc:	9da080e7          	jalr	-1574(ra) # 8001ceb2 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    800144e0:	a009                	j	800144e2 <.LBB17_81>

00000000800144e2 <.LBB17_81>:
        LOG.end_op();
    800144e2:	00045517          	auipc	a0,0x45
    800144e6:	18650513          	addi	a0,a0,390 # 80059668 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    800144ea:	ffff5097          	auipc	ra,0xffff5
    800144ee:	cf8080e7          	jalr	-776(ra) # 800091e2 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>
    800144f2:	a009                	j	800144f4 <.LBB17_81+0x12>
    800144f4:	4501                	li	a0,0
        return Ok(0)
    800144f6:	f92a                	sd	a0,176(sp)
    800144f8:	f52a                	sd	a0,168(sp)
    800144fa:	a091                	j	8001453e <.LBB17_81+0x5c>
    800144fc:	4501                	li	a0,0
    }
    800144fe:	28a10ea3          	sb	a0,669(sp)
    80014502:	a009                	j	80014504 <.LBB17_81+0x22>
    80014504:	29e14503          	lbu	a0,670(sp)
    80014508:	8905                	andi	a0,a0,1
    8001450a:	ed1d                	bnez	a0,80014548 <.LBB17_81+0x66>
    8001450c:	a009                	j	8001450e <.LBB17_81+0x2c>
    8001450e:	4501                	li	a0,0
    80014510:	28a10f23          	sb	a0,670(sp)
    80014514:	29f14503          	lbu	a0,671(sp)
    80014518:	8905                	andi	a0,a0,1
    8001451a:	ed0d                	bnez	a0,80014554 <.LBB17_81+0x72>
    8001451c:	a009                	j	8001451e <.LBB17_81+0x3c>
    8001451e:	4501                	li	a0,0
    80014520:	28a10fa3          	sb	a0,671(sp)
    80014524:	752a                	ld	a0,168(sp)
    80014526:	75ca                	ld	a1,176(sp)
    80014528:	2d813083          	ld	ra,728(sp)
    8001452c:	2e010113          	addi	sp,sp,736
    80014530:	8082                	ret
    80014532:	1c88                	addi	a0,sp,624
    80014534:	ffff3097          	auipc	ra,0xffff3
    80014538:	b7a080e7          	jalr	-1158(ra) # 800070ae <_ZN4core3ptr96drop_in_place$LT$kernel..lock..sleeplock..SleepLockGuard$LT$kernel..fs..inode..InodeData$GT$$GT$17h00d5c02cf687ef41E>
    8001453c:	b7c1                	j	800144fc <.LBB17_81+0x1a>
    8001453e:	29d14503          	lbu	a0,669(sp)
    80014542:	8905                	andi	a0,a0,1
    80014544:	f57d                	bnez	a0,80014532 <.LBB17_81+0x50>
    80014546:	bf5d                	j	800144fc <.LBB17_81+0x1a>
    80014548:	0ba8                	addi	a0,sp,472
    8001454a:	ffff3097          	auipc	ra,0xffff3
    8001454e:	990080e7          	jalr	-1648(ra) # 80006eda <_ZN4core3ptr45drop_in_place$LT$kernel..fs..inode..Inode$GT$17h8786fe1a2a287832E>
    80014552:	bf75                	j	8001450e <.LBB17_81+0x2c>
    80014554:	03a8                	addi	a0,sp,456
    80014556:	ffff3097          	auipc	ra,0xffff3
    8001455a:	984080e7          	jalr	-1660(ra) # 80006eda <_ZN4core3ptr45drop_in_place$LT$kernel..fs..inode..Inode$GT$17h8786fe1a2a287832E>
    8001455e:	b7c1                	j	8001451e <.LBB17_81+0x3c>

0000000080014560 <.LBB17_82>:
        inode_guard.dinode.nlink += 1;
    80014560:	00015517          	auipc	a0,0x15
    80014564:	f4050513          	addi	a0,a0,-192 # 800294a0 <str.1>

0000000080014568 <.LBB17_83>:
    80014568:	00015617          	auipc	a2,0x15
    8001456c:	27860613          	addi	a2,a2,632 # 800297e0 <.L__unnamed_55>
    80014570:	45f1                	li	a1,28
    80014572:	0000e097          	auipc	ra,0xe
    80014576:	b8a080e7          	jalr	-1142(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008001457c <.LBB17_84>:
                inode_guard.dinode.nlink -= 1;
    8001457c:	00015517          	auipc	a0,0x15
    80014580:	22450513          	addi	a0,a0,548 # 800297a0 <str.2>

0000000080014584 <.LBB17_85>:
    80014584:	00015617          	auipc	a2,0x15
    80014588:	27460613          	addi	a2,a2,628 # 800297f8 <.L__unnamed_56>
    8001458c:	02100593          	li	a1,33
    80014590:	0000e097          	auipc	ra,0xe
    80014594:	b6c080e7          	jalr	-1172(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008001459a <.LBB17_86>:
                inode_guard.dinode.nlink -= 1;
    8001459a:	00015517          	auipc	a0,0x15
    8001459e:	20650513          	addi	a0,a0,518 # 800297a0 <str.2>

00000000800145a2 <.LBB17_87>:
    800145a2:	00015617          	auipc	a2,0x15
    800145a6:	26e60613          	addi	a2,a2,622 # 80029810 <.L__unnamed_57>
    800145aa:	02100593          	li	a1,33
    800145ae:	0000e097          	auipc	ra,0xe
    800145b2:	b4e080e7          	jalr	-1202(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$9sys_mkdir17h9fc2155a1c553da1E:

00000000800145b8 <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$9sys_mkdir17h9fc2155a1c553da1E>:

    pub fn sys_mkdir(&self) -> SysResult {
    800145b8:	7165                	addi	sp,sp,-400
    800145ba:	e706                	sd	ra,392(sp)
    800145bc:	f42a                	sd	a0,40(sp)
    800145be:	f2aa                	sd	a0,352(sp)
    800145c0:	04710513          	addi	a0,sp,71
    800145c4:	4581                	li	a1,0
    800145c6:	08000613          	li	a2,128
        let mut path = [0u8; MAXPATH];
    800145ca:	00011097          	auipc	ra,0x11
    800145ce:	ac2080e7          	jalr	-1342(ra) # 8002508c <memset>

00000000800145d2 <.LBB18_22>:
        LOG.begin_op();
    800145d2:	00045517          	auipc	a0,0x45
    800145d6:	09650513          	addi	a0,a0,150 # 80059668 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    800145da:	ffff4097          	auipc	ra,0xffff4
    800145de:	622080e7          	jalr	1570(ra) # 80008bfc <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$8begin_op17he5b49a48c716e372E>
    800145e2:	a009                	j	800145e4 <.LBB18_22+0x12>
        let addr = self.arg(0);
    800145e4:	7522                	ld	a0,40(sp)
    800145e6:	4581                	li	a1,0
    800145e8:	00000097          	auipc	ra,0x0
    800145ec:	7f8080e7          	jalr	2040(ra) # 80014de0 <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    800145f0:	85aa                	mv	a1,a0
    800145f2:	f02e                	sd	a1,32(sp)
    800145f4:	feaa                	sd	a0,376(sp)
    800145f6:	a009                	j	800145f8 <.LBB18_22+0x26>
        self.copy_from_str(addr, &mut path, MAXPATH)?;
    800145f8:	7582                	ld	a1,32(sp)
    800145fa:	7522                	ld	a0,40(sp)
    800145fc:	04710613          	addi	a2,sp,71
    80014600:	08000713          	li	a4,128
    80014604:	86ba                	mv	a3,a4
    80014606:	00001097          	auipc	ra,0x1
    8001460a:	88a080e7          	jalr	-1910(ra) # 80014e90 <_ZN6kernel7syscall7Syscall13copy_from_str17h5c83be6e0d4b822aE>
    8001460e:	ec2a                	sd	a0,24(sp)
    80014610:	a009                	j	80014612 <.LBB18_22+0x40>
    80014612:	6562                	ld	a0,24(sp)
    80014614:	ffff9097          	auipc	ra,0xffff9
    80014618:	b40080e7          	jalr	-1216(ra) # 8000d154 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h9e3ff03fe8989dd2E>
    8001461c:	0ca103a3          	sb	a0,199(sp)
    80014620:	a009                	j	80014622 <.LBB18_22+0x50>
    80014622:	0c714503          	lbu	a0,199(sp)
    80014626:	8905                	andi	a0,a0,1
    80014628:	4581                	li	a1,0
    8001462a:	00b50463          	beq	a0,a1,80014632 <.LBB18_22+0x60>
    8001462e:	a009                	j	80014630 <.LBB18_22+0x5e>
    80014630:	a02d                	j	8001465a <.LBB18_23+0x22>
    80014632:	4705                	li	a4,1
        match ICACHE.create(&path, InodeType::Directory, 0, 0) {
    80014634:	0ee11323          	sh	a4,230(sp)

0000000080014638 <.LBB18_23>:
    80014638:	00045597          	auipc	a1,0x45
    8001463c:	0d858593          	addi	a1,a1,216 # 80059710 <_ZN6kernel2fs5inode6ICACHE17had1be8942ca79bf1E>
    80014640:	01a8                	addi	a0,sp,200
    80014642:	04710613          	addi	a2,sp,71
    80014646:	08000693          	li	a3,128
    8001464a:	4801                	li	a6,0
    8001464c:	87c2                	mv	a5,a6
    8001464e:	00005097          	auipc	ra,0x5
    80014652:	cb2080e7          	jalr	-846(ra) # 80019300 <_ZN6kernel2fs5inode10InodeCache6create17hf2583436fcb9d2ecE>
    80014656:	a831                	j	80014672 <.LBB18_23+0x3a>
        self.copy_from_str(addr, &mut path, MAXPATH)?;
    80014658:	0000                	unimp
    8001465a:	ffff7097          	auipc	ra,0xffff7
    8001465e:	364080e7          	jalr	868(ra) # 8000b9be <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h2e645b443ebf2dc7E>
    80014662:	a009                	j	80014664 <.LBB18_23+0x2c>
    80014664:	ffff9097          	auipc	ra,0xffff9
    80014668:	9dc080e7          	jalr	-1572(ra) # 8000d040 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h74072cf57097ff24E>
    8001466c:	f82a                	sd	a0,48(sp)
    8001466e:	fc2e                	sd	a1,56(sp)
    80014670:	a861                	j	80014708 <.LBB18_26+0x2e>
            Ok(inode) => {
    80014672:	652e                	ld	a0,200(sp)
    80014674:	4581                	li	a1,0
    80014676:	02b50663          	beq	a0,a1,800146a2 <.LBB18_24+0x18>
    8001467a:	a009                	j	8001467c <.LBB18_23+0x44>
                drop(inode);
                LOG.end_op();
                Ok(0)
            },

            Err(err) => {
    8001467c:	65ce                	ld	a1,208(sp)
    8001467e:	656e                	ld	a0,216(sp)
    80014680:	e62e                	sd	a1,264(sp)
    80014682:	ea2a                	sd	a0,272(sp)
    80014684:	0228                	addi	a0,sp,264
                println!("[Kernel] sys_mkdir: err: {}", err);
    80014686:	eeaa                	sd	a0,344(sp)
    80014688:	e32a                	sd	a0,384(sp)

000000008001468a <.LBB18_24>:
    8001468a:	0000a597          	auipc	a1,0xa
    8001468e:	d8e58593          	addi	a1,a1,-626 # 8001e418 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E>
    80014692:	0000a097          	auipc	ra,0xa
    80014696:	daa080e7          	jalr	-598(ra) # 8001e43c <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>
    8001469a:	e42a                	sd	a0,8(sp)
    8001469c:	e82e                	sd	a1,16(sp)
    8001469e:	a815                	j	800146d2 <.LBB18_25+0x1a>
        match ICACHE.create(&path, InodeType::Directory, 0, 0) {
    800146a0:	0000                	unimp
            Ok(inode) => {
    800146a2:	65ee                	ld	a1,216(sp)
    800146a4:	f9ae                	sd	a1,240(sp)
    800146a6:	654e                	ld	a0,208(sp)
    800146a8:	f5aa                	sd	a0,232(sp)
                drop(inode);
    800146aa:	e22e                	sd	a1,256(sp)
    800146ac:	fdaa                	sd	a0,248(sp)
    800146ae:	00009097          	auipc	ra,0x9
    800146b2:	8c0080e7          	jalr	-1856(ra) # 8001cf6e <_ZN4core3mem4drop17hb93abdfe16b94be5E>
    800146b6:	a009                	j	800146b8 <.LBB18_25>

00000000800146b8 <.LBB18_25>:
                LOG.end_op();
    800146b8:	00045517          	auipc	a0,0x45
    800146bc:	fb050513          	addi	a0,a0,-80 # 80059668 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    800146c0:	ffff5097          	auipc	ra,0xffff5
    800146c4:	b22080e7          	jalr	-1246(ra) # 800091e2 <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$6end_op17h345c15f0248f080bE>
    800146c8:	a009                	j	800146ca <.LBB18_25+0x12>
    800146ca:	4501                	li	a0,0
                Ok(0)
    800146cc:	fc2a                	sd	a0,56(sp)
    800146ce:	f82a                	sd	a0,48(sp)
        match ICACHE.create(&path, InodeType::Directory, 0, 0) {
    800146d0:	a81d                	j	80014706 <.LBB18_26+0x2c>
                println!("[Kernel] sys_mkdir: err: {}", err);
    800146d2:	6542                	ld	a0,16(sp)
    800146d4:	65a2                	ld	a1,8(sp)
    800146d6:	e6ae                	sd	a1,328(sp)
    800146d8:	eaaa                	sd	a0,336(sp)

00000000800146da <.LBB18_26>:
    800146da:	00015597          	auipc	a1,0x15
    800146de:	16e58593          	addi	a1,a1,366 # 80029848 <.L__unnamed_58>
    800146e2:	0a28                	addi	a0,sp,280
    800146e4:	4609                	li	a2,2
    800146e6:	02b4                	addi	a3,sp,328
    800146e8:	4705                	li	a4,1
    800146ea:	ffff1097          	auipc	ra,0xffff1
    800146ee:	d4a080e7          	jalr	-694(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    800146f2:	a009                	j	800146f4 <.LBB18_26+0x1a>
    800146f4:	0a28                	addi	a0,sp,280
    800146f6:	00009097          	auipc	ra,0x9
    800146fa:	4ba080e7          	jalr	1210(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    800146fe:	a009                	j	80014700 <.LBB18_26+0x26>
    80014700:	4505                	li	a0,1
                Err(())
    80014702:	f82a                	sd	a0,48(sp)
        match ICACHE.create(&path, InodeType::Directory, 0, 0) {
    80014704:	a009                	j	80014706 <.LBB18_26+0x2c>
            }
        }
    }
    80014706:	a009                	j	80014708 <.LBB18_26+0x2e>
    80014708:	7542                	ld	a0,48(sp)
    8001470a:	75e2                	ld	a1,56(sp)
    8001470c:	60ba                	ld	ra,392(sp)
    8001470e:	6159                	addi	sp,sp,400
    80014710:	8082                	ret

Disassembly of section .text._ZN6kernel7syscall3ipc42_$LT$impl$u20$kernel..syscall..Syscall$GT$11sys_sem_get17hb3397bd9d36c7bd4E:

0000000080014712 <_ZN6kernel7syscall3ipc42_$LT$impl$u20$kernel..syscall..Syscall$GT$11sys_sem_get17hb3397bd9d36c7bd4E>:

impl Syscall<'_>{


    /**Semaphore */
    pub fn sys_sem_get(&mut self) -> SysResult{
    80014712:	7135                	addi	sp,sp,-160
    80014714:	ed06                	sd	ra,152(sp)
    80014716:	e82a                	sd	a0,16(sp)
    80014718:	e52a                	sd	a0,136(sp)

000000008001471a <.LBB19_10>:
        println!("sys_sem_get in ipc.rs");
    8001471a:	00015597          	auipc	a1,0x15
    8001471e:	16658593          	addi	a1,a1,358 # 80029880 <.L__unnamed_59>

0000000080014722 <.LBB19_11>:
    80014722:	00015697          	auipc	a3,0x15
    80014726:	16e68693          	addi	a3,a3,366 # 80029890 <.L__unnamed_129>
    8001472a:	1028                	addi	a0,sp,40
    8001472c:	4605                	li	a2,1
    8001472e:	4701                	li	a4,0
    80014730:	ffff1097          	auipc	ra,0xffff1
    80014734:	d04080e7          	jalr	-764(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80014738:	a009                	j	8001473a <.LBB19_11+0x18>
    8001473a:	1028                	addi	a0,sp,40
    8001473c:	00009097          	auipc	ra,0x9
    80014740:	474080e7          	jalr	1140(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    80014744:	a009                	j	80014746 <.LBB19_11+0x24>
        let id = self.arg(0) as i32;
    80014746:	6542                	ld	a0,16(sp)
    80014748:	4581                	li	a1,0
    8001474a:	00000097          	auipc	ra,0x0
    8001474e:	696080e7          	jalr	1686(ra) # 80014de0 <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    80014752:	e42a                	sd	a0,8(sp)
    80014754:	a009                	j	80014756 <.LBB19_11+0x34>
    80014756:	65a2                	ld	a1,8(sp)
    80014758:	c92e                	sw	a1,144(sp)

000000008001475a <.LBB19_12>:
        let res = unsafe{SEM_MANAGER.get(id)};
    8001475a:	00047517          	auipc	a0,0x47
    8001475e:	dd650513          	addi	a0,a0,-554 # 8005b530 <_ZN6kernel3ipc9semaphore11SEM_MANAGER17hc708ed55c8325c4cE>
    80014762:	00008097          	auipc	ra,0x8
    80014766:	252080e7          	jalr	594(ra) # 8001c9b4 <_ZN6kernel3ipc9semaphore8SemTable3get17h969ea55db514a2ceE>
    8001476a:	0005059b          	sext.w	a1,a0
    8001476e:	e02e                	sd	a1,0(sp)
    80014770:	cb2a                	sw	a0,148(sp)
    80014772:	a009                	j	80014774 <.LBB19_12+0x1a>
    80014774:	6502                	ld	a0,0(sp)
    80014776:	4581                	li	a1,0
        if res >= 0 {
    80014778:	02b54363          	blt	a0,a1,8001479e <.LBB19_14+0x18>
    8001477c:	a009                	j	8001477e <.LBB19_13>

000000008001477e <.LBB19_13>:
            println!("sys_sem_get res >= 0 in ipc.rs");
    8001477e:	00015597          	auipc	a1,0x15
    80014782:	13258593          	addi	a1,a1,306 # 800298b0 <.L__unnamed_61>

0000000080014786 <.LBB19_14>:
    80014786:	00015697          	auipc	a3,0x15
    8001478a:	10a68693          	addi	a3,a3,266 # 80029890 <.L__unnamed_129>
    8001478e:	08a8                	addi	a0,sp,88
    80014790:	4605                	li	a2,1
    80014792:	4701                	li	a4,0
    80014794:	ffff1097          	auipc	ra,0xffff1
    80014798:	ca0080e7          	jalr	-864(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8001479c:	a021                	j	800147a4 <.LBB19_14+0x1e>
    8001479e:	4505                	li	a0,1
            Ok(res as usize)
        }else{
            Err(())
    800147a0:	ec2a                	sd	a0,24(sp)
        if res >= 0 {
    800147a2:	a821                	j	800147ba <.LBB19_14+0x34>
    800147a4:	08a8                	addi	a0,sp,88
            println!("sys_sem_get res >= 0 in ipc.rs");
    800147a6:	00009097          	auipc	ra,0x9
    800147aa:	40a080e7          	jalr	1034(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    800147ae:	a009                	j	800147b0 <.LBB19_14+0x2a>
            Ok(res as usize)
    800147b0:	6502                	ld	a0,0(sp)
    800147b2:	f02a                	sd	a0,32(sp)
    800147b4:	4501                	li	a0,0
    800147b6:	ec2a                	sd	a0,24(sp)
        if res >= 0 {
    800147b8:	a009                	j	800147ba <.LBB19_14+0x34>
        }
        // let res = SEM_MANAGER.get(id);
        // Ok(res);
    }
    800147ba:	6562                	ld	a0,24(sp)
    800147bc:	7582                	ld	a1,32(sp)
    800147be:	60ea                	ld	ra,152(sp)
    800147c0:	610d                	addi	sp,sp,160
    800147c2:	8082                	ret

Disassembly of section .text._ZN6kernel7syscall3ipc42_$LT$impl$u20$kernel..syscall..Syscall$GT$11sys_sem_put17h3b21147033dd4825E:

00000000800147c4 <_ZN6kernel7syscall3ipc42_$LT$impl$u20$kernel..syscall..Syscall$GT$11sys_sem_put17h3b21147033dd4825E>:

    pub fn sys_sem_put(&mut self) -> SysResult{
    800147c4:	7119                	addi	sp,sp,-128
    800147c6:	fc86                	sd	ra,120(sp)
    800147c8:	ec2a                	sd	a0,24(sp)
    800147ca:	f0aa                	sd	a0,96(sp)

00000000800147cc <.LBB20_8>:
        println!("sys_sem_put in ipc.rs");
    800147cc:	00015597          	auipc	a1,0x15
    800147d0:	10c58593          	addi	a1,a1,268 # 800298d8 <.L__unnamed_62>

00000000800147d4 <.LBB20_9>:
    800147d4:	00015697          	auipc	a3,0x15
    800147d8:	0bc68693          	addi	a3,a3,188 # 80029890 <.L__unnamed_129>
    800147dc:	1808                	addi	a0,sp,48
    800147de:	4605                	li	a2,1
    800147e0:	4701                	li	a4,0
    800147e2:	ffff1097          	auipc	ra,0xffff1
    800147e6:	c52080e7          	jalr	-942(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    800147ea:	a009                	j	800147ec <.LBB20_9+0x18>
    800147ec:	1808                	addi	a0,sp,48
    800147ee:	00009097          	auipc	ra,0x9
    800147f2:	3c2080e7          	jalr	962(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    800147f6:	a009                	j	800147f8 <.LBB20_9+0x24>
        let id = self.arg(0) as i32;
    800147f8:	6562                	ld	a0,24(sp)
    800147fa:	4581                	li	a1,0
    800147fc:	00000097          	auipc	ra,0x0
    80014800:	5e4080e7          	jalr	1508(ra) # 80014de0 <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    80014804:	e82a                	sd	a0,16(sp)
    80014806:	a009                	j	80014808 <.LBB20_9+0x34>
    80014808:	65c2                	ld	a1,16(sp)
    8001480a:	d6ae                	sw	a1,108(sp)

000000008001480c <.LBB20_10>:
        let res = unsafe{SEM_MANAGER.put(id) as usize};
    8001480c:	00047517          	auipc	a0,0x47
    80014810:	d2450513          	addi	a0,a0,-732 # 8005b530 <_ZN6kernel3ipc9semaphore11SEM_MANAGER17hc708ed55c8325c4cE>
    80014814:	00008097          	auipc	ra,0x8
    80014818:	2c4080e7          	jalr	708(ra) # 8001cad8 <_ZN6kernel3ipc9semaphore8SemTable3put17hf81380ccacc98283E>
    8001481c:	e42a                	sd	a0,8(sp)
    8001481e:	a009                	j	80014820 <.LBB20_10+0x14>
    80014820:	6522                	ld	a0,8(sp)
    80014822:	2501                	sext.w	a0,a0
    80014824:	e02a                	sd	a0,0(sp)
    80014826:	f8aa                	sd	a0,112(sp)
    80014828:	4581                	li	a1,0
        if  res == 0 {
    8001482a:	00b51863          	bne	a0,a1,8001483a <.LBB20_10+0x2e>
    8001482e:	a009                	j	80014830 <.LBB20_10+0x24>
            Ok(res)
    80014830:	6502                	ld	a0,0(sp)
    80014832:	f42a                	sd	a0,40(sp)
    80014834:	4501                	li	a0,0
    80014836:	f02a                	sd	a0,32(sp)
        if  res == 0 {
    80014838:	a021                	j	80014840 <.LBB20_10+0x34>
    8001483a:	4505                	li	a0,1
        }else{
            Err(())
    8001483c:	f02a                	sd	a0,32(sp)
        if  res == 0 {
    8001483e:	a009                	j	80014840 <.LBB20_10+0x34>
        }
    }
    80014840:	7502                	ld	a0,32(sp)
    80014842:	75a2                	ld	a1,40(sp)
    80014844:	70e6                	ld	ra,120(sp)
    80014846:	6109                	addi	sp,sp,128
    80014848:	8082                	ret

Disassembly of section .text._ZN6kernel7syscall3ipc42_$LT$impl$u20$kernel..syscall..Syscall$GT$10sys_sem_up17h66299e2e1eef50b0E:

000000008001484a <_ZN6kernel7syscall3ipc42_$LT$impl$u20$kernel..syscall..Syscall$GT$10sys_sem_up17h66299e2e1eef50b0E>:

    pub fn sys_sem_up(&mut self) -> SysResult{
    8001484a:	7119                	addi	sp,sp,-128
    8001484c:	fc86                	sd	ra,120(sp)
    8001484e:	e82a                	sd	a0,16(sp)
    80014850:	f0aa                	sd	a0,96(sp)

0000000080014852 <.LBB21_11>:
        println!("sys_sem_up in ipc.rs");
    80014852:	00015597          	auipc	a1,0x15
    80014856:	0ae58593          	addi	a1,a1,174 # 80029900 <.L__unnamed_63>

000000008001485a <.LBB21_12>:
    8001485a:	00015697          	auipc	a3,0x15
    8001485e:	03668693          	addi	a3,a3,54 # 80029890 <.L__unnamed_129>
    80014862:	1028                	addi	a0,sp,40
    80014864:	4605                	li	a2,1
    80014866:	4701                	li	a4,0
    80014868:	ffff1097          	auipc	ra,0xffff1
    8001486c:	bcc080e7          	jalr	-1076(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80014870:	a009                	j	80014872 <.LBB21_12+0x18>
    80014872:	1028                	addi	a0,sp,40
    80014874:	00009097          	auipc	ra,0x9
    80014878:	33c080e7          	jalr	828(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8001487c:	a009                	j	8001487e <.LBB21_12+0x24>
        let id = self.arg(0) as i32;
    8001487e:	6542                	ld	a0,16(sp)
    80014880:	4581                	li	a1,0
    80014882:	00000097          	auipc	ra,0x0
    80014886:	55e080e7          	jalr	1374(ra) # 80014de0 <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    8001488a:	e42a                	sd	a0,8(sp)
    8001488c:	a009                	j	8001488e <.LBB21_12+0x34>
    8001488e:	65a2                	ld	a1,8(sp)
    80014890:	d6ae                	sw	a1,108(sp)

0000000080014892 <.LBB21_13>:
        let semOption = unsafe{SEM_MANAGER.getSemById(id)};
    80014892:	00047517          	auipc	a0,0x47
    80014896:	c9e50513          	addi	a0,a0,-866 # 8005b530 <_ZN6kernel3ipc9semaphore11SEM_MANAGER17hc708ed55c8325c4cE>
    8001489a:	00008097          	auipc	ra,0x8
    8001489e:	2fe080e7          	jalr	766(ra) # 8001cb98 <_ZN6kernel3ipc9semaphore8SemTable10getSemById17hc45b63cab7252ea2E>
    800148a2:	ecaa                	sd	a0,88(sp)
    800148a4:	a009                	j	800148a6 <.LBB21_13+0x14>
        match semOption{
            Some(sem) => {
    800148a6:	6566                	ld	a0,88(sp)
    800148a8:	00a035b3          	snez	a1,a0
    800148ac:	4581                	li	a1,0
    800148ae:	00b50463          	beq	a0,a1,800148b6 <.LBB21_13+0x24>
    800148b2:	a009                	j	800148b4 <.LBB21_13+0x22>
    800148b4:	a029                	j	800148be <.LBB21_13+0x2c>
    800148b6:	4505                	li	a0,1
                sem.sem_up();
                Ok(0)
            }
            None => Err(())
    800148b8:	ec2a                	sd	a0,24(sp)
        match semOption{
    800148ba:	a829                	j	800148d4 <.LBB21_13+0x42>
    800148bc:	0000                	unimp
            Some(sem) => {
    800148be:	6566                	ld	a0,88(sp)
    800148c0:	f8aa                	sd	a0,112(sp)
                sem.sem_up();
    800148c2:	00008097          	auipc	ra,0x8
    800148c6:	e1c080e7          	jalr	-484(ra) # 8001c6de <_ZN6kernel3ipc9semaphore5sem_t6sem_up17hff2b195f2e6585ecE>
    800148ca:	a009                	j	800148cc <.LBB21_13+0x3a>
    800148cc:	4501                	li	a0,0
                Ok(0)
    800148ce:	f02a                	sd	a0,32(sp)
    800148d0:	ec2a                	sd	a0,24(sp)
        match semOption{
    800148d2:	a009                	j	800148d4 <.LBB21_13+0x42>
        }
    }
    800148d4:	6562                	ld	a0,24(sp)
    800148d6:	7582                	ld	a1,32(sp)
    800148d8:	70e6                	ld	ra,120(sp)
    800148da:	6109                	addi	sp,sp,128
    800148dc:	8082                	ret

Disassembly of section .text._ZN6kernel7syscall3ipc42_$LT$impl$u20$kernel..syscall..Syscall$GT$12sys_sem_down17hf3708c0cac81b44dE:

00000000800148de <_ZN6kernel7syscall3ipc42_$LT$impl$u20$kernel..syscall..Syscall$GT$12sys_sem_down17hf3708c0cac81b44dE>:

    pub fn sys_sem_down(&mut self) -> SysResult{
    800148de:	7119                	addi	sp,sp,-128
    800148e0:	fc86                	sd	ra,120(sp)
    800148e2:	e82a                	sd	a0,16(sp)
    800148e4:	f0aa                	sd	a0,96(sp)

00000000800148e6 <.LBB22_11>:
        println!("sys_sem_down in ipc.rs");
    800148e6:	00015597          	auipc	a1,0x15
    800148ea:	04258593          	addi	a1,a1,66 # 80029928 <.L__unnamed_64>

00000000800148ee <.LBB22_12>:
    800148ee:	00015697          	auipc	a3,0x15
    800148f2:	fa268693          	addi	a3,a3,-94 # 80029890 <.L__unnamed_129>
    800148f6:	1028                	addi	a0,sp,40
    800148f8:	4605                	li	a2,1
    800148fa:	4701                	li	a4,0
    800148fc:	ffff1097          	auipc	ra,0xffff1
    80014900:	b38080e7          	jalr	-1224(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80014904:	a009                	j	80014906 <.LBB22_12+0x18>
    80014906:	1028                	addi	a0,sp,40
    80014908:	00009097          	auipc	ra,0x9
    8001490c:	2a8080e7          	jalr	680(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    80014910:	a009                	j	80014912 <.LBB22_12+0x24>
        let id = self.arg(0) as i32;
    80014912:	6542                	ld	a0,16(sp)
    80014914:	4581                	li	a1,0
    80014916:	00000097          	auipc	ra,0x0
    8001491a:	4ca080e7          	jalr	1226(ra) # 80014de0 <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    8001491e:	e42a                	sd	a0,8(sp)
    80014920:	a009                	j	80014922 <.LBB22_12+0x34>
    80014922:	65a2                	ld	a1,8(sp)
    80014924:	d6ae                	sw	a1,108(sp)

0000000080014926 <.LBB22_13>:
        let semOption = unsafe{SEM_MANAGER.getSemById(id)};
    80014926:	00047517          	auipc	a0,0x47
    8001492a:	c0a50513          	addi	a0,a0,-1014 # 8005b530 <_ZN6kernel3ipc9semaphore11SEM_MANAGER17hc708ed55c8325c4cE>
    8001492e:	00008097          	auipc	ra,0x8
    80014932:	26a080e7          	jalr	618(ra) # 8001cb98 <_ZN6kernel3ipc9semaphore8SemTable10getSemById17hc45b63cab7252ea2E>
    80014936:	ecaa                	sd	a0,88(sp)
    80014938:	a009                	j	8001493a <.LBB22_13+0x14>
        match semOption{
            Some(sem) => {
    8001493a:	6566                	ld	a0,88(sp)
    8001493c:	00a035b3          	snez	a1,a0
    80014940:	4581                	li	a1,0
    80014942:	00b50463          	beq	a0,a1,8001494a <.LBB22_13+0x24>
    80014946:	a009                	j	80014948 <.LBB22_13+0x22>
    80014948:	a029                	j	80014952 <.LBB22_13+0x2c>
    8001494a:	4505                	li	a0,1
                sem.sem_down();
                Ok(0)
            }
            None => Err(())
    8001494c:	ec2a                	sd	a0,24(sp)
        match semOption{
    8001494e:	a829                	j	80014968 <.LBB22_13+0x42>
    80014950:	0000                	unimp
            Some(sem) => {
    80014952:	6566                	ld	a0,88(sp)
    80014954:	f8aa                	sd	a0,112(sp)
                sem.sem_down();
    80014956:	00008097          	auipc	ra,0x8
    8001495a:	c02080e7          	jalr	-1022(ra) # 8001c558 <_ZN6kernel3ipc9semaphore5sem_t8sem_down17h0b823d8c0372af65E>
    8001495e:	a009                	j	80014960 <.LBB22_13+0x3a>
    80014960:	4501                	li	a0,0
                Ok(0)
    80014962:	f02a                	sd	a0,32(sp)
    80014964:	ec2a                	sd	a0,24(sp)
        match semOption{
    80014966:	a009                	j	80014968 <.LBB22_13+0x42>
        }
    }
    80014968:	6562                	ld	a0,24(sp)
    8001496a:	7582                	ld	a1,32(sp)
    8001496c:	70e6                	ld	ra,120(sp)
    8001496e:	6109                	addi	sp,sp,128
    80014970:	8082                	ret

Disassembly of section .text._ZN6kernel7syscall3ipc42_$LT$impl$u20$kernel..syscall..Syscall$GT$12sys_sem_init17h9d42fffbf875ebeaE:

0000000080014972 <_ZN6kernel7syscall3ipc42_$LT$impl$u20$kernel..syscall..Syscall$GT$12sys_sem_init17h9d42fffbf875ebeaE>:

    pub fn sys_sem_init(&mut self) -> SysResult{
    80014972:	7175                	addi	sp,sp,-144
    80014974:	e506                	sd	ra,136(sp)
    80014976:	f02a                	sd	a0,32(sp)
    80014978:	f8aa                	sd	a0,112(sp)

000000008001497a <.LBB23_12>:
        println!("sys_sem_init in ipc.rs");
    8001497a:	00015597          	auipc	a1,0x15
    8001497e:	fd658593          	addi	a1,a1,-42 # 80029950 <.L__unnamed_65>

0000000080014982 <.LBB23_13>:
    80014982:	00015697          	auipc	a3,0x15
    80014986:	f0e68693          	addi	a3,a3,-242 # 80029890 <.L__unnamed_129>
    8001498a:	1828                	addi	a0,sp,56
    8001498c:	4605                	li	a2,1
    8001498e:	4701                	li	a4,0
    80014990:	ffff1097          	auipc	ra,0xffff1
    80014994:	aa4080e7          	jalr	-1372(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80014998:	a009                	j	8001499a <.LBB23_13+0x18>
    8001499a:	1828                	addi	a0,sp,56
    8001499c:	00009097          	auipc	ra,0x9
    800149a0:	214080e7          	jalr	532(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    800149a4:	a009                	j	800149a6 <.LBB23_13+0x24>
        let id = self.arg(0) as i32;
    800149a6:	7502                	ld	a0,32(sp)
    800149a8:	4581                	li	a1,0
    800149aa:	00000097          	auipc	ra,0x0
    800149ae:	436080e7          	jalr	1078(ra) # 80014de0 <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    800149b2:	ec2a                	sd	a0,24(sp)
    800149b4:	a009                	j	800149b6 <.LBB23_13+0x34>
    800149b6:	7502                	ld	a0,32(sp)
    800149b8:	65e2                	ld	a1,24(sp)
    800149ba:	862e                	mv	a2,a1
    800149bc:	e432                	sd	a2,8(sp)
    800149be:	dcae                	sw	a1,120(sp)
    800149c0:	4585                	li	a1,1
        let cnt = self.arg(1) as i32;
    800149c2:	00000097          	auipc	ra,0x0
    800149c6:	41e080e7          	jalr	1054(ra) # 80014de0 <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>
    800149ca:	e82a                	sd	a0,16(sp)
    800149cc:	a009                	j	800149ce <.LBB23_13+0x4c>
    800149ce:	65a2                	ld	a1,8(sp)
    800149d0:	6542                	ld	a0,16(sp)
    800149d2:	862a                	mv	a2,a0
    800149d4:	e032                	sd	a2,0(sp)
    800149d6:	deaa                	sw	a0,124(sp)

00000000800149d8 <.LBB23_14>:
        let semOption = unsafe{SEM_MANAGER.getSemById(id)};
    800149d8:	00047517          	auipc	a0,0x47
    800149dc:	b5850513          	addi	a0,a0,-1192 # 8005b530 <_ZN6kernel3ipc9semaphore11SEM_MANAGER17hc708ed55c8325c4cE>
    800149e0:	00008097          	auipc	ra,0x8
    800149e4:	1b8080e7          	jalr	440(ra) # 8001cb98 <_ZN6kernel3ipc9semaphore8SemTable10getSemById17hc45b63cab7252ea2E>
    800149e8:	f4aa                	sd	a0,104(sp)
    800149ea:	a009                	j	800149ec <.LBB23_14+0x14>
        match semOption{
            Some(sem) => {
    800149ec:	7526                	ld	a0,104(sp)
    800149ee:	00a035b3          	snez	a1,a0
    800149f2:	4581                	li	a1,0
    800149f4:	00b50463          	beq	a0,a1,800149fc <.LBB23_14+0x24>
    800149f8:	a009                	j	800149fa <.LBB23_14+0x22>
    800149fa:	a029                	j	80014a04 <.LBB23_14+0x2c>
    800149fc:	4505                	li	a0,1
                sem.sem_init(cnt);
                // println!("sys_sem_get in ipc.rs");
                Ok(0)
            }
            None => Err(())
    800149fe:	f42a                	sd	a0,40(sp)
        match semOption{
    80014a00:	a831                	j	80014a1c <.LBB23_14+0x44>
    80014a02:	0000                	unimp
            Some(sem) => {
    80014a04:	6582                	ld	a1,0(sp)
    80014a06:	7526                	ld	a0,104(sp)
    80014a08:	e12a                	sd	a0,128(sp)
                sem.sem_init(cnt);
    80014a0a:	00008097          	auipc	ra,0x8
    80014a0e:	ae8080e7          	jalr	-1304(ra) # 8001c4f2 <_ZN6kernel3ipc9semaphore5sem_t8sem_init17h922a2e9695ae8884E>
    80014a12:	a009                	j	80014a14 <.LBB23_14+0x3c>
    80014a14:	4501                	li	a0,0
                Ok(0)
    80014a16:	f82a                	sd	a0,48(sp)
    80014a18:	f42a                	sd	a0,40(sp)
        match semOption{
    80014a1a:	a009                	j	80014a1c <.LBB23_14+0x44>
        }
    }
    80014a1c:	7522                	ld	a0,40(sp)
    80014a1e:	75c2                	ld	a1,48(sp)
    80014a20:	60aa                	ld	ra,136(sp)
    80014a22:	6149                	addi	sp,sp,144
    80014a24:	8082                	ret

Disassembly of section .text.handle_syscall:

0000000080014a26 <handle_syscall>:
pub const SYSCALL_NUM:usize = 21;
pub const SHUTDOWN: usize = 8;
pub const REBOOT: usize = 9;

#[no_mangle]
pub unsafe fn handle_syscall() {
    80014a26:	711d                	addi	sp,sp,-96
    let proc = CPU_MANAGER.myproc().unwrap();
    80014a28:	ec86                	sd	ra,88(sp)

0000000080014a2a <.LBB24_7>:
    80014a2a:	0004f517          	auipc	a0,0x4f
    80014a2e:	71650513          	addi	a0,a0,1814 # 80064140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    80014a32:	ffffd097          	auipc	ra,0xffffd
    80014a36:	ff8080e7          	jalr	-8(ra) # 80011a2a <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    80014a3a:	e82a                	sd	a0,16(sp)
    80014a3c:	a009                	j	80014a3e <.LBB24_7+0x14>
    80014a3e:	6542                	ld	a0,16(sp)

0000000080014a40 <.LBB24_8>:
    80014a40:	00015597          	auipc	a1,0x15
    80014a44:	f3858593          	addi	a1,a1,-200 # 80029978 <.L__unnamed_66>
    80014a48:	ffffa097          	auipc	ra,0xffffa
    80014a4c:	274080e7          	jalr	628(ra) # 8000ecbc <_ZN4core6option15Option$LT$T$GT$6unwrap17h81f0c84c54a80648E>
    80014a50:	85aa                	mv	a1,a0
    80014a52:	e42e                	sd	a1,8(sp)
    80014a54:	fc2a                	sd	a0,56(sp)
    80014a56:	a009                	j	80014a58 <.LBB24_8+0x18>
    let mut syscall = Syscall{ process: proc };
    80014a58:	6522                	ld	a0,8(sp)
    80014a5a:	f02a                	sd	a0,32(sp)
    80014a5c:	1008                	addi	a0,sp,32
    if let Ok(res) = syscall.syscall() {
    80014a5e:	00000097          	auipc	ra,0x0
    80014a62:	134080e7          	jalr	308(ra) # 80014b92 <_ZN6kernel7syscall7Syscall7syscall17h26fb265f8f05ef9eE>
    80014a66:	f42a                	sd	a0,40(sp)
    80014a68:	f82e                	sd	a1,48(sp)
    80014a6a:	a009                	j	80014a6c <.LBB24_8+0x2c>
    80014a6c:	7522                	ld	a0,40(sp)
    80014a6e:	4581                	li	a1,0
    80014a70:	00b50963          	beq	a0,a1,80014a82 <.LBB24_8+0x42>
    80014a74:	a009                	j	80014a76 <.LBB24_8+0x36>
        // if tf.a7 == 40 || tf.a7 == 1{
        //     println!("In handle_syscall pid {} epc {}, sp {}",proc.pid, tf.epc, tf.sp);
        // }
    }else{
        
        let tf = &mut *proc.trapframe;
    80014a76:	6522                	ld	a0,8(sp)
    80014a78:	710c                	ld	a1,32(a0)
    80014a7a:	e0ae                	sd	a1,64(sp)
    80014a7c:	557d                	li	a0,-1
        tf.a0 = -1 as isize as usize
    80014a7e:	f9a8                	sd	a0,112(a1)
    if let Ok(res) = syscall.syscall() {
    80014a80:	a801                	j	80014a90 <.LBB24_8+0x50>
    80014a82:	65a2                	ld	a1,8(sp)
    80014a84:	7542                	ld	a0,48(sp)
    80014a86:	e4aa                	sd	a0,72(sp)
        let tf = &mut *proc.trapframe;
    80014a88:	718c                	ld	a1,32(a1)
    80014a8a:	e8ae                	sd	a1,80(sp)
        tf.a0 = res;
    80014a8c:	f9a8                	sd	a0,112(a1)
    if let Ok(res) = syscall.syscall() {
    80014a8e:	a009                	j	80014a90 <.LBB24_8+0x50>
    }
    
}
    80014a90:	60e6                	ld	ra,88(sp)
    80014a92:	6125                	addi	sp,sp,96
    80014a94:	8082                	ret

Disassembly of section .text._ZN6kernel7syscall9SysCallID3new17h71369ad526ed3399E:

0000000080014a96 <_ZN6kernel7syscall9SysCallID3new17h71369ad526ed3399E>:

    Unknown
}

impl SysCallID {
    pub fn new(id: usize) -> Self {
    80014a96:	1101                	addi	sp,sp,-32
    80014a98:	ec2a                	sd	a0,24(sp)
        match id {
            1 => { Self::SysFork },
    80014a9a:	fff50593          	addi	a1,a0,-1
    80014a9e:	e42e                	sd	a1,8(sp)
    80014aa0:	02800513          	li	a0,40
    80014aa4:	00b56b63          	bltu	a0,a1,80014aba <.LBB25_2>
    80014aa8:	6522                	ld	a0,8(sp)
    80014aaa:	050e                	slli	a0,a0,0x3

0000000080014aac <.LBB25_37>:
    80014aac:	00014597          	auipc	a1,0x14
    80014ab0:	2ac58593          	addi	a1,a1,684 # 80028d58 <.LJTI25_0>
    80014ab4:	952e                	add	a0,a0,a1
    80014ab6:	6108                	ld	a0,0(a0)
    80014ab8:	8502                	jr	a0

0000000080014aba <.LBB25_2>:
    80014aba:	02a00513          	li	a0,42
            31 => { Self::SysFifoWrite},

            40 => { Self::SysClone},
            41 => { Self::SysJoin},

            _ => { Self::Unknown }
    80014abe:	e82a                	sd	a0,16(sp)
        match id {
    80014ac0:	a0f1                	j	80014b8c <.LBB25_35+0x8>

0000000080014ac2 <.LBB25_3>:
    80014ac2:	4505                	li	a0,1
            1 => { Self::SysFork },
    80014ac4:	e82a                	sd	a0,16(sp)
        match id {
    80014ac6:	a0d9                	j	80014b8c <.LBB25_35+0x8>

0000000080014ac8 <.LBB25_4>:
    80014ac8:	4509                	li	a0,2
            2 => { Self::SysExit },
    80014aca:	e82a                	sd	a0,16(sp)
        match id {
    80014acc:	a0c1                	j	80014b8c <.LBB25_35+0x8>

0000000080014ace <.LBB25_5>:
    80014ace:	450d                	li	a0,3
            3 => { Self::SysWait },
    80014ad0:	e82a                	sd	a0,16(sp)
        match id {
    80014ad2:	a86d                	j	80014b8c <.LBB25_35+0x8>

0000000080014ad4 <.LBB25_6>:
    80014ad4:	4511                	li	a0,4
            4 => { Self::SysPipe },
    80014ad6:	e82a                	sd	a0,16(sp)
        match id {
    80014ad8:	a855                	j	80014b8c <.LBB25_35+0x8>

0000000080014ada <.LBB25_7>:
    80014ada:	4515                	li	a0,5
            5 => { Self::SysRead },
    80014adc:	e82a                	sd	a0,16(sp)
        match id {
    80014ade:	a07d                	j	80014b8c <.LBB25_35+0x8>

0000000080014ae0 <.LBB25_8>:
    80014ae0:	4519                	li	a0,6
            6 => { Self::SysKill },
    80014ae2:	e82a                	sd	a0,16(sp)
        match id {
    80014ae4:	a065                	j	80014b8c <.LBB25_35+0x8>

0000000080014ae6 <.LBB25_9>:
    80014ae6:	451d                	li	a0,7
            7 => { Self::SysExec },
    80014ae8:	e82a                	sd	a0,16(sp)
        match id {
    80014aea:	a04d                	j	80014b8c <.LBB25_35+0x8>

0000000080014aec <.LBB25_10>:
    80014aec:	4521                	li	a0,8
            8 => { Self::SysFstat },
    80014aee:	e82a                	sd	a0,16(sp)
        match id {
    80014af0:	a871                	j	80014b8c <.LBB25_35+0x8>

0000000080014af2 <.LBB25_11>:
    80014af2:	4525                	li	a0,9
            9 => { Self::SysChdir },
    80014af4:	e82a                	sd	a0,16(sp)
        match id {
    80014af6:	a859                	j	80014b8c <.LBB25_35+0x8>

0000000080014af8 <.LBB25_12>:
    80014af8:	4529                	li	a0,10
            10 => { Self::SysDup },
    80014afa:	e82a                	sd	a0,16(sp)
        match id {
    80014afc:	a841                	j	80014b8c <.LBB25_35+0x8>

0000000080014afe <.LBB25_13>:
    80014afe:	452d                	li	a0,11
            11 => { Self::SysGetPid },
    80014b00:	e82a                	sd	a0,16(sp)
        match id {
    80014b02:	a069                	j	80014b8c <.LBB25_35+0x8>

0000000080014b04 <.LBB25_14>:
    80014b04:	4531                	li	a0,12
            12 => { Self::SysSbrk },
    80014b06:	e82a                	sd	a0,16(sp)
        match id {
    80014b08:	a051                	j	80014b8c <.LBB25_35+0x8>

0000000080014b0a <.LBB25_15>:
    80014b0a:	4535                	li	a0,13
            13 => { Self::SysSleep },
    80014b0c:	e82a                	sd	a0,16(sp)
        match id {
    80014b0e:	a8bd                	j	80014b8c <.LBB25_35+0x8>

0000000080014b10 <.LBB25_16>:
    80014b10:	4539                	li	a0,14
            14 => { Self::SysUptime },
    80014b12:	e82a                	sd	a0,16(sp)
        match id {
    80014b14:	a8a5                	j	80014b8c <.LBB25_35+0x8>

0000000080014b16 <.LBB25_17>:
    80014b16:	453d                	li	a0,15
            15 => { Self::SysOpen },
    80014b18:	e82a                	sd	a0,16(sp)
        match id {
    80014b1a:	a88d                	j	80014b8c <.LBB25_35+0x8>

0000000080014b1c <.LBB25_18>:
    80014b1c:	4541                	li	a0,16
            16 => { Self::SysWrite },
    80014b1e:	e82a                	sd	a0,16(sp)
        match id {
    80014b20:	a0b5                	j	80014b8c <.LBB25_35+0x8>

0000000080014b22 <.LBB25_19>:
    80014b22:	4545                	li	a0,17
            17 => { Self::SysMknod },
    80014b24:	e82a                	sd	a0,16(sp)
        match id {
    80014b26:	a09d                	j	80014b8c <.LBB25_35+0x8>

0000000080014b28 <.LBB25_20>:
    80014b28:	4549                	li	a0,18
            18 => { Self::SysUnlink },
    80014b2a:	e82a                	sd	a0,16(sp)
        match id {
    80014b2c:	a085                	j	80014b8c <.LBB25_35+0x8>

0000000080014b2e <.LBB25_21>:
    80014b2e:	454d                	li	a0,19
            19 => { Self::SysLink },
    80014b30:	e82a                	sd	a0,16(sp)
        match id {
    80014b32:	a8a9                	j	80014b8c <.LBB25_35+0x8>

0000000080014b34 <.LBB25_22>:
    80014b34:	4551                	li	a0,20
            20 => { Self::SysMkdir },
    80014b36:	e82a                	sd	a0,16(sp)
        match id {
    80014b38:	a891                	j	80014b8c <.LBB25_35+0x8>

0000000080014b3a <.LBB25_23>:
    80014b3a:	4555                	li	a0,21
            21 => { Self::SysClose },
    80014b3c:	e82a                	sd	a0,16(sp)
        match id {
    80014b3e:	a0b9                	j	80014b8c <.LBB25_35+0x8>

0000000080014b40 <.LBB25_24>:
    80014b40:	4559                	li	a0,22
            22 => { Self::SysSemGet},
    80014b42:	e82a                	sd	a0,16(sp)
        match id {
    80014b44:	a0a1                	j	80014b8c <.LBB25_35+0x8>

0000000080014b46 <.LBB25_25>:
    80014b46:	455d                	li	a0,23
            23 => { Self::SysSemPut},
    80014b48:	e82a                	sd	a0,16(sp)
        match id {
    80014b4a:	a089                	j	80014b8c <.LBB25_35+0x8>

0000000080014b4c <.LBB25_26>:
    80014b4c:	4561                	li	a0,24
            24 => { Self::SysSemUp},
    80014b4e:	e82a                	sd	a0,16(sp)
        match id {
    80014b50:	a835                	j	80014b8c <.LBB25_35+0x8>

0000000080014b52 <.LBB25_27>:
    80014b52:	4565                	li	a0,25
            25 => { Self::SysSemDown},
    80014b54:	e82a                	sd	a0,16(sp)
        match id {
    80014b56:	a81d                	j	80014b8c <.LBB25_35+0x8>

0000000080014b58 <.LBB25_28>:
    80014b58:	4569                	li	a0,26
            26 => { Self::SysSemInit},
    80014b5a:	e82a                	sd	a0,16(sp)
        match id {
    80014b5c:	a805                	j	80014b8c <.LBB25_35+0x8>

0000000080014b5e <.LBB25_29>:
    80014b5e:	456d                	li	a0,27
            27 => { Self::SysMkfifo},
    80014b60:	e82a                	sd	a0,16(sp)
        match id {
    80014b62:	a02d                	j	80014b8c <.LBB25_35+0x8>

0000000080014b64 <.LBB25_30>:
    80014b64:	4571                	li	a0,28
            28 => { Self::SysFifoGet},
    80014b66:	e82a                	sd	a0,16(sp)
        match id {
    80014b68:	a015                	j	80014b8c <.LBB25_35+0x8>

0000000080014b6a <.LBB25_31>:
    80014b6a:	4575                	li	a0,29
            29 => { Self::SysFifoPut},
    80014b6c:	e82a                	sd	a0,16(sp)
        match id {
    80014b6e:	a839                	j	80014b8c <.LBB25_35+0x8>

0000000080014b70 <.LBB25_32>:
    80014b70:	4579                	li	a0,30
            30 => { Self::SysFifoRead},
    80014b72:	e82a                	sd	a0,16(sp)
        match id {
    80014b74:	a821                	j	80014b8c <.LBB25_35+0x8>

0000000080014b76 <.LBB25_33>:
    80014b76:	457d                	li	a0,31
            31 => { Self::SysFifoWrite},
    80014b78:	e82a                	sd	a0,16(sp)
        match id {
    80014b7a:	a809                	j	80014b8c <.LBB25_35+0x8>

0000000080014b7c <.LBB25_34>:
    80014b7c:	02800513          	li	a0,40
            40 => { Self::SysClone},
    80014b80:	e82a                	sd	a0,16(sp)
        match id {
    80014b82:	a029                	j	80014b8c <.LBB25_35+0x8>

0000000080014b84 <.LBB25_35>:
    80014b84:	02900513          	li	a0,41
            41 => { Self::SysJoin},
    80014b88:	e82a                	sd	a0,16(sp)
        match id {
    80014b8a:	a009                	j	80014b8c <.LBB25_35+0x8>
        }
    }
    80014b8c:	6542                	ld	a0,16(sp)
    80014b8e:	6105                	addi	sp,sp,32
    80014b90:	8082                	ret

Disassembly of section .text._ZN6kernel7syscall7Syscall7syscall17h26fb265f8f05ef9eE:

0000000080014b92 <_ZN6kernel7syscall7Syscall7syscall17h26fb265f8f05ef9eE>:
pub struct Syscall<'a>{
    process: &'a mut task_struct
}

impl Syscall<'_> {
    pub fn syscall(&mut self) -> SysResult {
    80014b92:	7131                	addi	sp,sp,-192
    80014b94:	fd06                	sd	ra,184(sp)
    80014b96:	f42a                	sd	a0,40(sp)
    80014b98:	ed2a                	sd	a0,152(sp)

0000000080014b9a <.LBB26_34>:
        let task = unsafe { CPU_MANAGER.myproc().unwrap() };
    80014b9a:	0004f517          	auipc	a0,0x4f
    80014b9e:	5a650513          	addi	a0,a0,1446 # 80064140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    80014ba2:	ffffd097          	auipc	ra,0xffffd
    80014ba6:	e88080e7          	jalr	-376(ra) # 80011a2a <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    80014baa:	f82a                	sd	a0,48(sp)
    80014bac:	a009                	j	80014bae <.LBB26_34+0x14>
    80014bae:	7542                	ld	a0,48(sp)

0000000080014bb0 <.LBB26_35>:
    80014bb0:	00015597          	auipc	a1,0x15
    80014bb4:	de058593          	addi	a1,a1,-544 # 80029990 <.L__unnamed_67>
    80014bb8:	ffffa097          	auipc	ra,0xffffa
    80014bbc:	104080e7          	jalr	260(ra) # 8000ecbc <_ZN4core6option15Option$LT$T$GT$6unwrap17h81f0c84c54a80648E>
    80014bc0:	f02a                	sd	a0,32(sp)
    80014bc2:	a009                	j	80014bc4 <.LBB26_35+0x14>
    80014bc4:	7502                	ld	a0,32(sp)
    80014bc6:	f12a                	sd	a0,160(sp)
        // 获取进程的trapframe
        let tf = unsafe{ &mut *task.trapframe };
    80014bc8:	7108                	ld	a0,32(a0)
    80014bca:	f52a                	sd	a0,168(sp)
        // 获取系统调用 id 号
        let sys_id = SysCallID::new(tf.a7);
    80014bcc:	7548                	ld	a0,168(a0)
    80014bce:	00000097          	auipc	ra,0x0
    80014bd2:	ec8080e7          	jalr	-312(ra) # 80014a96 <_ZN6kernel7syscall9SysCallID3new17h71369ad526ed3399E>
    80014bd6:	e4aa                	sd	a0,72(sp)
    80014bd8:	a009                	j	80014bda <.LBB26_35+0x2a>
        
        match sys_id {
            SysCallID::SysFork => { self.sys_fork() },
    80014bda:	6526                	ld	a0,72(sp)
    80014bdc:	fff50593          	addi	a1,a0,-1
    80014be0:	ec2e                	sd	a1,24(sp)
    80014be2:	02800513          	li	a0,40
    80014be6:	00b56b63          	bltu	a0,a1,80014bfc <.LBB26_5>
    80014bea:	6562                	ld	a0,24(sp)
    80014bec:	050e                	slli	a0,a0,0x3

0000000080014bee <.LBB26_36>:
    80014bee:	00014597          	auipc	a1,0x14
    80014bf2:	2b258593          	addi	a1,a1,690 # 80028ea0 <.LJTI26_0>
    80014bf6:	952e                	add	a0,a0,a1
    80014bf8:	6108                	ld	a0,0(a0)
    80014bfa:	8502                	jr	a0

0000000080014bfc <.LBB26_5>:
    80014bfc:	00a8                	addi	a0,sp,72
            // SysCallID::SysFifoGet => { self.sys_fifo_get() },
            // SysCallID::SysFifoPut => { self.sys_fifo_put() },
            // SysCallID::SysFifoRead => { self.sys_fifo_read() },
            // SysCallID::SysFifoWrite => { self.sys_fifo_write() },
            
            _ => { panic!("Invalid syscall id: {:?}", sys_id) }
    80014bfe:	e92a                	sd	a0,144(sp)
    80014c00:	f92a                	sd	a0,176(sp)

0000000080014c02 <.LBB26_37>:
    80014c02:	00000597          	auipc	a1,0x0
    80014c06:	56458593          	addi	a1,a1,1380 # 80015166 <_ZN63_$LT$kernel..syscall..SysCallID$u20$as$u20$core..fmt..Debug$GT$3fmt17h1e62a6c91d257ea0E>
    80014c0a:	0000a097          	auipc	ra,0xa
    80014c0e:	8fe080e7          	jalr	-1794(ra) # 8001e508 <_ZN4core3fmt10ArgumentV13new17hd8cc9af5365c80feE>
    80014c12:	e42a                	sd	a0,8(sp)
    80014c14:	e82e                	sd	a1,16(sp)
    80014c16:	a269                	j	80014da0 <.LBB26_30+0x10>

0000000080014c18 <.LBB26_6>:
            SysCallID::SysFork => { self.sys_fork() },
    80014c18:	7522                	ld	a0,40(sp)
    80014c1a:	ffffd097          	auipc	ra,0xffffd
    80014c1e:	592080e7          	jalr	1426(ra) # 800121ac <_ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_fork17h5c4cdf045541cf30E>
    80014c22:	fc2a                	sd	a0,56(sp)
    80014c24:	e0ae                	sd	a1,64(sp)
    80014c26:	aa45                	j	80014dd6 <.LBB26_39+0x14>

0000000080014c28 <.LBB26_7>:
            SysCallID::SysExit => { self.sys_exit() },
    80014c28:	7522                	ld	a0,40(sp)
    80014c2a:	ffffd097          	auipc	ra,0xffffd
    80014c2e:	64e080e7          	jalr	1614(ra) # 80012278 <_ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_exit17hae1a7a01ef6f0180E>
    80014c32:	fc2a                	sd	a0,56(sp)
    80014c34:	e0ae                	sd	a1,64(sp)
    80014c36:	a245                	j	80014dd6 <.LBB26_39+0x14>

0000000080014c38 <.LBB26_8>:
            SysCallID::SysWait => { self.sys_wait() },
    80014c38:	7522                	ld	a0,40(sp)
    80014c3a:	ffffd097          	auipc	ra,0xffffd
    80014c3e:	66a080e7          	jalr	1642(ra) # 800122a4 <_ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_wait17h7b4815682cca4a8dE>
    80014c42:	fc2a                	sd	a0,56(sp)
    80014c44:	e0ae                	sd	a1,64(sp)
    80014c46:	aa41                	j	80014dd6 <.LBB26_39+0x14>

0000000080014c48 <.LBB26_9>:
            SysCallID::SysRead => { self.sys_read() },
    80014c48:	7522                	ld	a0,40(sp)
    80014c4a:	ffffe097          	auipc	ra,0xffffe
    80014c4e:	8fe080e7          	jalr	-1794(ra) # 80012548 <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_read17hd83bd4f92523a35cE>
    80014c52:	fc2a                	sd	a0,56(sp)
    80014c54:	e0ae                	sd	a1,64(sp)
    80014c56:	a241                	j	80014dd6 <.LBB26_39+0x14>

0000000080014c58 <.LBB26_10>:
            SysCallID::SysWrite => { self.sys_write() },
    80014c58:	7522                	ld	a0,40(sp)
    80014c5a:	ffffe097          	auipc	ra,0xffffe
    80014c5e:	a50080e7          	jalr	-1456(ra) # 800126aa <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$9sys_write17hc5a72fe3cb6d9324E>
    80014c62:	fc2a                	sd	a0,56(sp)
    80014c64:	e0ae                	sd	a1,64(sp)
    80014c66:	aa85                	j	80014dd6 <.LBB26_39+0x14>

0000000080014c68 <.LBB26_11>:
            SysCallID::SysOpen => { self.sys_open() },
    80014c68:	7522                	ld	a0,40(sp)
    80014c6a:	ffffe097          	auipc	ra,0xffffe
    80014c6e:	ba2080e7          	jalr	-1118(ra) # 8001280c <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_open17h5b5b1f6af7439fbcE>
    80014c72:	fc2a                	sd	a0,56(sp)
    80014c74:	e0ae                	sd	a1,64(sp)
    80014c76:	a285                	j	80014dd6 <.LBB26_39+0x14>

0000000080014c78 <.LBB26_12>:
            SysCallID::SysExec => { self.sys_exec() },
    80014c78:	7522                	ld	a0,40(sp)
    80014c7a:	ffffe097          	auipc	ra,0xffffe
    80014c7e:	10c080e7          	jalr	268(ra) # 80012d86 <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_exec17h5f20106c7a7bbe80E>
    80014c82:	fc2a                	sd	a0,56(sp)
    80014c84:	e0ae                	sd	a1,64(sp)
    80014c86:	aa81                	j	80014dd6 <.LBB26_39+0x14>

0000000080014c88 <.LBB26_13>:
            SysCallID::SysMknod => { self.sys_mknod() },
    80014c88:	7522                	ld	a0,40(sp)
    80014c8a:	ffffe097          	auipc	ra,0xffffe
    80014c8e:	62c080e7          	jalr	1580(ra) # 800132b6 <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$9sys_mknod17h6bbc97745668998fE>
    80014c92:	fc2a                	sd	a0,56(sp)
    80014c94:	e0ae                	sd	a1,64(sp)
    80014c96:	a281                	j	80014dd6 <.LBB26_39+0x14>

0000000080014c98 <.LBB26_14>:
            SysCallID::SysClose => { self.sys_close() },
    80014c98:	7522                	ld	a0,40(sp)
    80014c9a:	ffffe097          	auipc	ra,0xffffe
    80014c9e:	7b4080e7          	jalr	1972(ra) # 8001344e <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$9sys_close17haaef41d651f2f6f7E>
    80014ca2:	fc2a                	sd	a0,56(sp)
    80014ca4:	e0ae                	sd	a1,64(sp)
    80014ca6:	aa05                	j	80014dd6 <.LBB26_39+0x14>

0000000080014ca8 <.LBB26_15>:
            SysCallID::SysDup => { self.sys_dup() },
    80014ca8:	7522                	ld	a0,40(sp)
    80014caa:	ffffd097          	auipc	ra,0xffffd
    80014cae:	75e080e7          	jalr	1886(ra) # 80012408 <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$7sys_dup17h638e7e7819355743E>
    80014cb2:	fc2a                	sd	a0,56(sp)
    80014cb4:	e0ae                	sd	a1,64(sp)
    80014cb6:	a205                	j	80014dd6 <.LBB26_39+0x14>

0000000080014cb8 <.LBB26_16>:
    80014cb8:	4501                	li	a0,0
            SysCallID::SysUptime => { Ok(0) },
    80014cba:	e0aa                	sd	a0,64(sp)
    80014cbc:	fc2a                	sd	a0,56(sp)
        match sys_id {
    80014cbe:	aa21                	j	80014dd6 <.LBB26_39+0x14>

0000000080014cc0 <.LBB26_17>:
            SysCallID::SysSbrk => { self.sys_sbrk() },
    80014cc0:	7522                	ld	a0,40(sp)
    80014cc2:	ffffd097          	auipc	ra,0xffffd
    80014cc6:	696080e7          	jalr	1686(ra) # 80012358 <_ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_sbrk17h620cfc1119b978cdE>
    80014cca:	fc2a                	sd	a0,56(sp)
    80014ccc:	e0ae                	sd	a1,64(sp)
    80014cce:	a221                	j	80014dd6 <.LBB26_39+0x14>

0000000080014cd0 <.LBB26_18>:
            SysCallID::SysFstat => { self.sys_fstat() },
    80014cd0:	7522                	ld	a0,40(sp)
    80014cd2:	fffff097          	auipc	ra,0xfffff
    80014cd6:	818080e7          	jalr	-2024(ra) # 800134ea <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$9sys_fstat17h0c7ad2f655d0446dE>
    80014cda:	fc2a                	sd	a0,56(sp)
    80014cdc:	e0ae                	sd	a1,64(sp)
    80014cde:	a8e5                	j	80014dd6 <.LBB26_39+0x14>

0000000080014ce0 <.LBB26_19>:
            SysCallID::SysChdir => { self.sys_chdir()},
    80014ce0:	7522                	ld	a0,40(sp)
    80014ce2:	fffff097          	auipc	ra,0xfffff
    80014ce6:	954080e7          	jalr	-1708(ra) # 80013636 <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$9sys_chdir17he6ad16137b6ff3daE>
    80014cea:	fc2a                	sd	a0,56(sp)
    80014cec:	e0ae                	sd	a1,64(sp)
    80014cee:	a0e5                	j	80014dd6 <.LBB26_39+0x14>

0000000080014cf0 <.LBB26_20>:
            SysCallID::SysPipe => { unsafe { self.sys_pipe() } },
    80014cf0:	7522                	ld	a0,40(sp)
    80014cf2:	fffff097          	auipc	ra,0xfffff
    80014cf6:	b34080e7          	jalr	-1228(ra) # 80013826 <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_pipe17h56ef7a0a7762279bE>
    80014cfa:	fc2a                	sd	a0,56(sp)
    80014cfc:	e0ae                	sd	a1,64(sp)
    80014cfe:	a8e1                	j	80014dd6 <.LBB26_39+0x14>

0000000080014d00 <.LBB26_21>:
            SysCallID::SysUnlink => { self.sys_unlink() },
    80014d00:	7522                	ld	a0,40(sp)
    80014d02:	fffff097          	auipc	ra,0xfffff
    80014d06:	ef4080e7          	jalr	-268(ra) # 80013bf6 <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$10sys_unlink17h041fe6edd5a3dcecE>
    80014d0a:	fc2a                	sd	a0,56(sp)
    80014d0c:	e0ae                	sd	a1,64(sp)
    80014d0e:	a0e1                	j	80014dd6 <.LBB26_39+0x14>

0000000080014d10 <.LBB26_22>:
            SysCallID::SysLink => { self.sys_link() },
    80014d10:	7522                	ld	a0,40(sp)
    80014d12:	fffff097          	auipc	ra,0xfffff
    80014d16:	3c8080e7          	jalr	968(ra) # 800140da <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_link17ha9dece5abe92404dE>
    80014d1a:	fc2a                	sd	a0,56(sp)
    80014d1c:	e0ae                	sd	a1,64(sp)
    80014d1e:	a865                	j	80014dd6 <.LBB26_39+0x14>

0000000080014d20 <.LBB26_23>:
            SysCallID::SysMkdir => { self.sys_mkdir() },
    80014d20:	7522                	ld	a0,40(sp)
    80014d22:	00000097          	auipc	ra,0x0
    80014d26:	896080e7          	jalr	-1898(ra) # 800145b8 <_ZN6kernel7syscall4file42_$LT$impl$u20$kernel..syscall..Syscall$GT$9sys_mkdir17h9fc2155a1c553da1E>
    80014d2a:	fc2a                	sd	a0,56(sp)
    80014d2c:	e0ae                	sd	a1,64(sp)
    80014d2e:	a065                	j	80014dd6 <.LBB26_39+0x14>

0000000080014d30 <.LBB26_24>:
            SysCallID::SysSemGet => { self.sys_sem_get() },
    80014d30:	7522                	ld	a0,40(sp)
    80014d32:	00000097          	auipc	ra,0x0
    80014d36:	9e0080e7          	jalr	-1568(ra) # 80014712 <_ZN6kernel7syscall3ipc42_$LT$impl$u20$kernel..syscall..Syscall$GT$11sys_sem_get17hb3397bd9d36c7bd4E>
    80014d3a:	fc2a                	sd	a0,56(sp)
    80014d3c:	e0ae                	sd	a1,64(sp)
    80014d3e:	a861                	j	80014dd6 <.LBB26_39+0x14>

0000000080014d40 <.LBB26_25>:
            SysCallID::SysSemPut => { self.sys_sem_put() },
    80014d40:	7522                	ld	a0,40(sp)
    80014d42:	00000097          	auipc	ra,0x0
    80014d46:	a82080e7          	jalr	-1406(ra) # 800147c4 <_ZN6kernel7syscall3ipc42_$LT$impl$u20$kernel..syscall..Syscall$GT$11sys_sem_put17h3b21147033dd4825E>
    80014d4a:	fc2a                	sd	a0,56(sp)
    80014d4c:	e0ae                	sd	a1,64(sp)
    80014d4e:	a061                	j	80014dd6 <.LBB26_39+0x14>

0000000080014d50 <.LBB26_26>:
            SysCallID::SysSemUp => { self.sys_sem_up() },
    80014d50:	7522                	ld	a0,40(sp)
    80014d52:	00000097          	auipc	ra,0x0
    80014d56:	af8080e7          	jalr	-1288(ra) # 8001484a <_ZN6kernel7syscall3ipc42_$LT$impl$u20$kernel..syscall..Syscall$GT$10sys_sem_up17h66299e2e1eef50b0E>
    80014d5a:	fc2a                	sd	a0,56(sp)
    80014d5c:	e0ae                	sd	a1,64(sp)
    80014d5e:	a8a5                	j	80014dd6 <.LBB26_39+0x14>

0000000080014d60 <.LBB26_27>:
            SysCallID::SysSemDown => { self.sys_sem_down() },
    80014d60:	7522                	ld	a0,40(sp)
    80014d62:	00000097          	auipc	ra,0x0
    80014d66:	b7c080e7          	jalr	-1156(ra) # 800148de <_ZN6kernel7syscall3ipc42_$LT$impl$u20$kernel..syscall..Syscall$GT$12sys_sem_down17hf3708c0cac81b44dE>
    80014d6a:	fc2a                	sd	a0,56(sp)
    80014d6c:	e0ae                	sd	a1,64(sp)
    80014d6e:	a0a5                	j	80014dd6 <.LBB26_39+0x14>

0000000080014d70 <.LBB26_28>:
            SysCallID::SysSemInit => { self.sys_sem_init() },
    80014d70:	7522                	ld	a0,40(sp)
    80014d72:	00000097          	auipc	ra,0x0
    80014d76:	c00080e7          	jalr	-1024(ra) # 80014972 <_ZN6kernel7syscall3ipc42_$LT$impl$u20$kernel..syscall..Syscall$GT$12sys_sem_init17h9d42fffbf875ebeaE>
    80014d7a:	fc2a                	sd	a0,56(sp)
    80014d7c:	e0ae                	sd	a1,64(sp)
    80014d7e:	a8a1                	j	80014dd6 <.LBB26_39+0x14>

0000000080014d80 <.LBB26_29>:
                self.sys_clone() 
    80014d80:	7522                	ld	a0,40(sp)
    80014d82:	ffffd097          	auipc	ra,0xffffd
    80014d86:	4a2080e7          	jalr	1186(ra) # 80012224 <_ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$9sys_clone17h33021d255812765cE>
    80014d8a:	fc2a                	sd	a0,56(sp)
    80014d8c:	e0ae                	sd	a1,64(sp)
    80014d8e:	a0a1                	j	80014dd6 <.LBB26_39+0x14>

0000000080014d90 <.LBB26_30>:
            SysCallID::SysJoin    => { self.sys_join() },
    80014d90:	7522                	ld	a0,40(sp)
    80014d92:	ffffd097          	auipc	ra,0xffffd
    80014d96:	56c080e7          	jalr	1388(ra) # 800122fe <_ZN6kernel7syscall4proc42_$LT$impl$u20$kernel..syscall..Syscall$GT$8sys_join17hcdda9ca2f2e537bbE>
    80014d9a:	fc2a                	sd	a0,56(sp)
    80014d9c:	e0ae                	sd	a1,64(sp)
    80014d9e:	a825                	j	80014dd6 <.LBB26_39+0x14>
            _ => { panic!("Invalid syscall id: {:?}", sys_id) }
    80014da0:	6542                	ld	a0,16(sp)
    80014da2:	65a2                	ld	a1,8(sp)
    80014da4:	e12e                	sd	a1,128(sp)
    80014da6:	e52a                	sd	a0,136(sp)

0000000080014da8 <.LBB26_38>:
    80014da8:	00015597          	auipc	a1,0x15
    80014dac:	c1858593          	addi	a1,a1,-1000 # 800299c0 <.L__unnamed_68>
    80014db0:	0888                	addi	a0,sp,80
    80014db2:	0114                	addi	a3,sp,128
    80014db4:	4705                	li	a4,1
    80014db6:	863a                	mv	a2,a4
    80014db8:	ffff0097          	auipc	ra,0xffff0
    80014dbc:	67c080e7          	jalr	1660(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80014dc0:	a009                	j	80014dc2 <.LBB26_39>

0000000080014dc2 <.LBB26_39>:
    80014dc2:	00015597          	auipc	a1,0x15
    80014dc6:	c0e58593          	addi	a1,a1,-1010 # 800299d0 <.L__unnamed_69>
    80014dca:	0888                	addi	a0,sp,80
    80014dcc:	0000d097          	auipc	ra,0xd
    80014dd0:	39c080e7          	jalr	924(ra) # 80022168 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
    80014dd4:	0000                	unimp
        }
    }
    80014dd6:	7562                	ld	a0,56(sp)
    80014dd8:	6586                	ld	a1,64(sp)
    80014dda:	70ea                	ld	ra,184(sp)
    80014ddc:	6129                	addi	sp,sp,192
    80014dde:	8082                	ret

Disassembly of section .text._ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E:

0000000080014de0 <_ZN6kernel7syscall7Syscall3arg17h3bc8cfe836411871E>:

    /// 获取第n个位置的参数
    pub fn arg(&self, id: usize) -> usize {
    80014de0:	711d                	addi	sp,sp,-96
    80014de2:	ec86                	sd	ra,88(sp)
    80014de4:	f02e                	sd	a1,32(sp)
    80014de6:	fc2a                	sd	a0,56(sp)
    80014de8:	e0ae                	sd	a1,64(sp)

0000000080014dea <.LBB27_12>:
        let task = unsafe { CPU_MANAGER.myproc().unwrap() };
    80014dea:	0004f517          	auipc	a0,0x4f
    80014dee:	35650513          	addi	a0,a0,854 # 80064140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    80014df2:	ffffd097          	auipc	ra,0xffffd
    80014df6:	c38080e7          	jalr	-968(ra) # 80011a2a <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    80014dfa:	f42a                	sd	a0,40(sp)
    80014dfc:	a009                	j	80014dfe <.LBB27_12+0x14>
    80014dfe:	7522                	ld	a0,40(sp)

0000000080014e00 <.LBB27_13>:
    80014e00:	00015597          	auipc	a1,0x15
    80014e04:	be858593          	addi	a1,a1,-1048 # 800299e8 <.L__unnamed_70>
    80014e08:	ffffa097          	auipc	ra,0xffffa
    80014e0c:	eb4080e7          	jalr	-332(ra) # 8000ecbc <_ZN4core6option15Option$LT$T$GT$6unwrap17h81f0c84c54a80648E>
    80014e10:	ec2a                	sd	a0,24(sp)
    80014e12:	a009                	j	80014e14 <.LBB27_13+0x14>
    80014e14:	7582                	ld	a1,32(sp)
    80014e16:	6562                	ld	a0,24(sp)
    80014e18:	e4aa                	sd	a0,72(sp)
        let tf = unsafe{ &*task.trapframe };
    80014e1a:	7108                	ld	a0,32(a0)
    80014e1c:	e42a                	sd	a0,8(sp)
    80014e1e:	e8aa                	sd	a0,80(sp)
        match id {
            0 => tf.a0,
    80014e20:	852e                	mv	a0,a1
    80014e22:	e82a                	sd	a0,16(sp)
    80014e24:	4515                	li	a0,5
    80014e26:	00b56b63          	bltu	a0,a1,80014e3c <.LBB27_15>
    80014e2a:	6542                	ld	a0,16(sp)
    80014e2c:	050e                	slli	a0,a0,0x3

0000000080014e2e <.LBB27_14>:
    80014e2e:	00014597          	auipc	a1,0x14
    80014e32:	1ba58593          	addi	a1,a1,442 # 80028fe8 <.LJTI27_0>
    80014e36:	952e                	add	a0,a0,a1
    80014e38:	6108                	ld	a0,0(a0)
    80014e3a:	8502                	jr	a0

0000000080014e3c <.LBB27_15>:
            1 => tf.a1,
            2 => tf.a2,
            3 => tf.a3,
            4 => tf.a4,
            5 => tf.a5,
            _ => panic!("不能获取参数")
    80014e3c:	00015517          	auipc	a0,0x15
    80014e40:	bc450513          	addi	a0,a0,-1084 # 80029a00 <.L__unnamed_71>

0000000080014e44 <.LBB27_16>:
    80014e44:	00015617          	auipc	a2,0x15
    80014e48:	bd460613          	addi	a2,a2,-1068 # 80029a18 <.L__unnamed_72>
    80014e4c:	45c9                	li	a1,18
    80014e4e:	0000d097          	auipc	ra,0xd
    80014e52:	2ae080e7          	jalr	686(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080014e58 <.LBB27_5>:
            0 => tf.a0,
    80014e58:	6522                	ld	a0,8(sp)
    80014e5a:	7928                	ld	a0,112(a0)
    80014e5c:	f82a                	sd	a0,48(sp)
        match id {
    80014e5e:	a02d                	j	80014e88 <.LBB27_10+0x8>

0000000080014e60 <.LBB27_6>:
            1 => tf.a1,
    80014e60:	6522                	ld	a0,8(sp)
    80014e62:	7d28                	ld	a0,120(a0)
    80014e64:	f82a                	sd	a0,48(sp)
        match id {
    80014e66:	a00d                	j	80014e88 <.LBB27_10+0x8>

0000000080014e68 <.LBB27_7>:
            2 => tf.a2,
    80014e68:	6522                	ld	a0,8(sp)
    80014e6a:	6148                	ld	a0,128(a0)
    80014e6c:	f82a                	sd	a0,48(sp)
        match id {
    80014e6e:	a829                	j	80014e88 <.LBB27_10+0x8>

0000000080014e70 <.LBB27_8>:
            3 => tf.a3,
    80014e70:	6522                	ld	a0,8(sp)
    80014e72:	6548                	ld	a0,136(a0)
    80014e74:	f82a                	sd	a0,48(sp)
        match id {
    80014e76:	a809                	j	80014e88 <.LBB27_10+0x8>

0000000080014e78 <.LBB27_9>:
            4 => tf.a4,
    80014e78:	6522                	ld	a0,8(sp)
    80014e7a:	6948                	ld	a0,144(a0)
    80014e7c:	f82a                	sd	a0,48(sp)
        match id {
    80014e7e:	a029                	j	80014e88 <.LBB27_10+0x8>

0000000080014e80 <.LBB27_10>:
            5 => tf.a5,
    80014e80:	6522                	ld	a0,8(sp)
    80014e82:	6d48                	ld	a0,152(a0)
    80014e84:	f82a                	sd	a0,48(sp)
        match id {
    80014e86:	a009                	j	80014e88 <.LBB27_10+0x8>
        }
    }
    80014e88:	7542                	ld	a0,48(sp)
    80014e8a:	60e6                	ld	ra,88(sp)
    80014e8c:	6125                	addi	sp,sp,96
    80014e8e:	8082                	ret

Disassembly of section .text._ZN6kernel7syscall7Syscall13copy_from_str17h5c83be6e0d4b822aE:

0000000080014e90 <_ZN6kernel7syscall7Syscall13copy_from_str17h5c83be6e0d4b822aE>:

    /// 通过地址获取str并将其填入到缓冲区中
    pub fn copy_from_str(&self, addr: usize, buf: &mut [u8], max_len: usize) -> Result<(), ()> {
    80014e90:	7155                	addi	sp,sp,-208
    80014e92:	e586                	sd	ra,200(sp)
    80014e94:	f03a                	sd	a4,32(sp)
    80014e96:	f436                	sd	a3,40(sp)
    80014e98:	f832                	sd	a2,48(sp)
    80014e9a:	fc2e                	sd	a1,56(sp)
    80014e9c:	e92a                	sd	a0,144(sp)
    80014e9e:	ed2e                	sd	a1,152(sp)
    80014ea0:	f132                	sd	a2,160(sp)
    80014ea2:	f536                	sd	a3,168(sp)
    80014ea4:	f93a                	sd	a4,176(sp)

0000000080014ea6 <.LBB28_11>:
        let task = unsafe { CPU_MANAGER.myproc().unwrap() };
    80014ea6:	0004f517          	auipc	a0,0x4f
    80014eaa:	29a50513          	addi	a0,a0,666 # 80064140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    80014eae:	ffffd097          	auipc	ra,0xffffd
    80014eb2:	b7c080e7          	jalr	-1156(ra) # 80011a2a <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    80014eb6:	e0aa                	sd	a0,64(sp)
    80014eb8:	a009                	j	80014eba <.LBB28_11+0x14>
    80014eba:	6506                	ld	a0,64(sp)

0000000080014ebc <.LBB28_12>:
    80014ebc:	00015597          	auipc	a1,0x15
    80014ec0:	b7458593          	addi	a1,a1,-1164 # 80029a30 <.L__unnamed_73>
    80014ec4:	ffffa097          	auipc	ra,0xffffa
    80014ec8:	df8080e7          	jalr	-520(ra) # 8000ecbc <_ZN4core6option15Option$LT$T$GT$6unwrap17h81f0c84c54a80648E>
    80014ecc:	ec2a                	sd	a0,24(sp)
    80014ece:	a009                	j	80014ed0 <.LBB28_12+0x14>
    80014ed0:	75a2                	ld	a1,40(sp)
    80014ed2:	7542                	ld	a0,48(sp)
    80014ed4:	6662                	ld	a2,24(sp)
    80014ed6:	fd32                	sd	a2,184(sp)
        let pgt = unsafe { &mut *task.pagetable };
    80014ed8:	6e10                	ld	a2,24(a2)
    80014eda:	e432                	sd	a2,8(sp)
    80014edc:	e1b2                	sd	a2,192(sp)
        if pgt.copy_in_str(buf.as_mut_ptr(), addr, max_len).is_err() {
    80014ede:	0000a097          	auipc	ra,0xa
    80014ee2:	536080e7          	jalr	1334(ra) # 8001f414 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h69a6648c691317bcE>
    80014ee6:	e82a                	sd	a0,16(sp)
    80014ee8:	a009                	j	80014eea <.LBB28_12+0x2e>
    80014eea:	7682                	ld	a3,32(sp)
    80014eec:	7662                	ld	a2,56(sp)
    80014eee:	65c2                	ld	a1,16(sp)
    80014ef0:	6522                	ld	a0,8(sp)
    80014ef2:	00003097          	auipc	ra,0x3
    80014ef6:	f8e080e7          	jalr	-114(ra) # 80017e80 <_ZN6kernel6memory7mapping10page_table9PageTable11copy_in_str17hce5a6c8720f87e9cE>
    80014efa:	e8aa                	sd	a0,80(sp)
    80014efc:	ecae                	sd	a1,88(sp)
    80014efe:	a009                	j	80014f00 <.LBB28_12+0x44>
    80014f00:	0888                	addi	a0,sp,80
    80014f02:	ffff8097          	auipc	ra,0xffff8
    80014f06:	db4080e7          	jalr	-588(ra) # 8000ccb6 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h304118d236359d80E>
    80014f0a:	e02a                	sd	a0,0(sp)
    80014f0c:	a009                	j	80014f0e <.LBB28_12+0x52>
    80014f0e:	6502                	ld	a0,0(sp)
    80014f10:	4581                	li	a1,0
    80014f12:	02b50363          	beq	a0,a1,80014f38 <.LBB28_14+0x18>
    80014f16:	a009                	j	80014f18 <.LBB28_13>

0000000080014f18 <.LBB28_13>:
            println!("Fail to copy in str");
    80014f18:	00015597          	auipc	a1,0x15
    80014f1c:	b4858593          	addi	a1,a1,-1208 # 80029a60 <.L__unnamed_74>

0000000080014f20 <.LBB28_14>:
    80014f20:	00015697          	auipc	a3,0x15
    80014f24:	97068693          	addi	a3,a3,-1680 # 80029890 <.L__unnamed_129>
    80014f28:	1088                	addi	a0,sp,96
    80014f2a:	4605                	li	a2,1
    80014f2c:	4701                	li	a4,0
    80014f2e:	ffff0097          	auipc	ra,0xffff0
    80014f32:	506080e7          	jalr	1286(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80014f36:	a029                	j	80014f40 <.LBB28_14+0x20>
    80014f38:	4501                	li	a0,0
            return Err(())
        }
        Ok(())
    80014f3a:	04a107a3          	sb	a0,79(sp)
    }
    80014f3e:	a819                	j	80014f54 <.LBB28_14+0x34>
    80014f40:	1088                	addi	a0,sp,96
            println!("Fail to copy in str");
    80014f42:	00009097          	auipc	ra,0x9
    80014f46:	c6e080e7          	jalr	-914(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    80014f4a:	a009                	j	80014f4c <.LBB28_14+0x2c>
    80014f4c:	4505                	li	a0,1
            return Err(())
    80014f4e:	04a107a3          	sb	a0,79(sp)
    }
    80014f52:	a009                	j	80014f54 <.LBB28_14+0x34>
    80014f54:	04f14503          	lbu	a0,79(sp)
    80014f58:	60ae                	ld	ra,200(sp)
    80014f5a:	6169                	addi	sp,sp,208
    80014f5c:	8082                	ret

Disassembly of section .text._ZN6kernel7syscall7Syscall14copy_form_addr17h37cb4654fc973487E:

0000000080014f5e <_ZN6kernel7syscall7Syscall14copy_form_addr17h37cb4654fc973487E>:

    pub fn copy_form_addr(&self, addr: usize, buf: &mut [u8], len: usize) -> Result<(), ()> {
    80014f5e:	7125                	addi	sp,sp,-416
    80014f60:	ef06                	sd	ra,408(sp)
    80014f62:	ecba                	sd	a4,88(sp)
    80014f64:	f0b6                	sd	a3,96(sp)
    80014f66:	f4b2                	sd	a2,104(sp)
    80014f68:	fcae                	sd	a1,120(sp)
    80014f6a:	eeaa                	sd	a0,344(sp)
    80014f6c:	f2b2                	sd	a2,352(sp)
    80014f6e:	f6b6                	sd	a3,360(sp)
    80014f70:	faba                	sd	a4,368(sp)

0000000080014f72 <.LBB29_26>:
        let task = unsafe { CPU_MANAGER.myproc().unwrap() };
    80014f72:	0004f517          	auipc	a0,0x4f
    80014f76:	1ce50513          	addi	a0,a0,462 # 80064140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    80014f7a:	ffffd097          	auipc	ra,0xffffd
    80014f7e:	ab0080e7          	jalr	-1360(ra) # 80011a2a <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    80014f82:	f8aa                	sd	a0,112(sp)
    80014f84:	a009                	j	80014f86 <.LBB29_26+0x14>
    80014f86:	7546                	ld	a0,112(sp)

0000000080014f88 <.LBB29_27>:
    80014f88:	00015597          	auipc	a1,0x15
    80014f8c:	ae858593          	addi	a1,a1,-1304 # 80029a70 <.L__unnamed_75>
    80014f90:	ffffa097          	auipc	ra,0xffffa
    80014f94:	d2c080e7          	jalr	-724(ra) # 8000ecbc <_ZN4core6option15Option$LT$T$GT$6unwrap17h81f0c84c54a80648E>
    80014f98:	e8aa                	sd	a0,80(sp)
    80014f9a:	a009                	j	80014f9c <.LBB29_27+0x14>
    80014f9c:	6546                	ld	a0,80(sp)
    80014f9e:	feaa                	sd	a0,376(sp)
    
        if addr > task.size || addr + size_of::<usize>() > task.size {
    80014fa0:	75e6                	ld	a1,120(sp)
    80014fa2:	6908                	ld	a0,16(a0)
    80014fa4:	00b57b63          	bgeu	a0,a1,80014fba <.LBB29_27+0x32>
    80014fa8:	a009                	j	80014faa <.LBB29_27+0x22>
    80014faa:	4505                	li	a0,1
    80014fac:	08a103a3          	sb	a0,135(sp)
    80014fb0:	a801                	j	80014fc0 <.LBB29_27+0x38>
    80014fb2:	4501                	li	a0,0
    80014fb4:	08a103a3          	sb	a0,135(sp)
    80014fb8:	a021                	j	80014fc0 <.LBB29_27+0x38>
    80014fba:	7566                	ld	a0,120(sp)
    80014fbc:	e4aa                	sd	a0,72(sp)
    80014fbe:	a031                	j	80014fca <.LBB29_27+0x42>
    80014fc0:	08714503          	lbu	a0,135(sp)
    80014fc4:	8905                	andi	a0,a0,1
    80014fc6:	ed19                	bnez	a0,80014fe4 <.LBB29_27+0x5c>
    80014fc8:	a825                	j	80015000 <.LBB29_28+0x16>
    80014fca:	65a6                	ld	a1,72(sp)
    80014fcc:	00858513          	addi	a0,a1,8
    80014fd0:	e0aa                	sd	a0,64(sp)
    80014fd2:	14b56963          	bltu	a0,a1,80015124 <.LBB29_36>
    80014fd6:	a009                	j	80014fd8 <.LBB29_27+0x50>
    80014fd8:	6586                	ld	a1,64(sp)
    80014fda:	6546                	ld	a0,80(sp)
    80014fdc:	6908                	ld	a0,16(a0)
    80014fde:	fcb566e3          	bltu	a0,a1,80014faa <.LBB29_27+0x22>
    80014fe2:	bfc1                	j	80014fb2 <.LBB29_27+0x2a>
    80014fe4:	18a8                	addi	a0,sp,120
            println!("[Debug] addr: 0x{:x}", addr);
    80014fe6:	e5aa                	sd	a0,200(sp)
    80014fe8:	e32a                	sd	a0,384(sp)

0000000080014fea <.LBB29_28>:
    80014fea:	0000f597          	auipc	a1,0xf
    80014fee:	25058593          	addi	a1,a1,592 # 8002423a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h760b07191d46b3f2E>
    80014ff2:	0000a097          	auipc	ra,0xa
    80014ff6:	534080e7          	jalr	1332(ra) # 8001f526 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    80014ffa:	f82a                	sd	a0,48(sp)
    80014ffc:	fc2e                	sd	a1,56(sp)
    80014ffe:	a829                	j	80015018 <.LBB29_28+0x2e>
            println!("[Debug] task size: 0x{:x}", task.size);
            panic!("拷贝的地址值超出了进程")
        }
    
        let pgt = unsafe { &mut *task.pagetable };
    80015000:	7586                	ld	a1,96(sp)
    80015002:	7526                	ld	a0,104(sp)
    80015004:	6646                	ld	a2,80(sp)
    80015006:	6e10                	ld	a2,24(a2)
    80015008:	f032                	sd	a2,32(sp)
    8001500a:	eb32                	sd	a2,400(sp)
        if pgt.copy_in(buf.as_mut_ptr(), addr, len).is_err() {
    8001500c:	0000a097          	auipc	ra,0xa
    80015010:	408080e7          	jalr	1032(ra) # 8001f414 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h69a6648c691317bcE>
    80015014:	f42a                	sd	a0,40(sp)
    80015016:	a869                	j	800150b0 <.LBB29_33+0x16>
            println!("[Debug] addr: 0x{:x}", addr);
    80015018:	7562                	ld	a0,56(sp)
    8001501a:	75c2                	ld	a1,48(sp)
    8001501c:	fd2e                	sd	a1,184(sp)
    8001501e:	e1aa                	sd	a0,192(sp)

0000000080015020 <.LBB29_29>:
    80015020:	00015597          	auipc	a1,0x15
    80015024:	a8058593          	addi	a1,a1,-1408 # 80029aa0 <.L__unnamed_76>
    80015028:	0128                	addi	a0,sp,136
    8001502a:	4609                	li	a2,2
    8001502c:	1934                	addi	a3,sp,184
    8001502e:	4705                	li	a4,1
    80015030:	ffff0097          	auipc	ra,0xffff0
    80015034:	404080e7          	jalr	1028(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80015038:	a009                	j	8001503a <.LBB29_29+0x1a>
    8001503a:	0128                	addi	a0,sp,136
    8001503c:	00009097          	auipc	ra,0x9
    80015040:	b74080e7          	jalr	-1164(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    80015044:	a009                	j	80015046 <.LBB29_29+0x26>
            println!("[Debug] task size: 0x{:x}", task.size);
    80015046:	6546                	ld	a0,80(sp)
    80015048:	0541                	addi	a0,a0,16
    8001504a:	ea2a                	sd	a0,272(sp)
    8001504c:	e72a                	sd	a0,392(sp)

000000008001504e <.LBB29_30>:
    8001504e:	0000f597          	auipc	a1,0xf
    80015052:	1ec58593          	addi	a1,a1,492 # 8002423a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h760b07191d46b3f2E>
    80015056:	0000a097          	auipc	ra,0xa
    8001505a:	4d0080e7          	jalr	1232(ra) # 8001f526 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    8001505e:	e82a                	sd	a0,16(sp)
    80015060:	ec2e                	sd	a1,24(sp)
    80015062:	a009                	j	80015064 <.LBB29_30+0x16>
    80015064:	6562                	ld	a0,24(sp)
    80015066:	65c2                	ld	a1,16(sp)
    80015068:	e22e                	sd	a1,256(sp)
    8001506a:	e62a                	sd	a0,264(sp)

000000008001506c <.LBB29_31>:
    8001506c:	00015597          	auipc	a1,0x15
    80015070:	a6c58593          	addi	a1,a1,-1428 # 80029ad8 <.L__unnamed_77>
    80015074:	0988                	addi	a0,sp,208
    80015076:	4609                	li	a2,2
    80015078:	0214                	addi	a3,sp,256
    8001507a:	4705                	li	a4,1
    8001507c:	ffff0097          	auipc	ra,0xffff0
    80015080:	3b8080e7          	jalr	952(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80015084:	a009                	j	80015086 <.LBB29_31+0x1a>
    80015086:	0988                	addi	a0,sp,208
    80015088:	00009097          	auipc	ra,0x9
    8001508c:	b28080e7          	jalr	-1240(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    80015090:	a009                	j	80015092 <.LBB29_32>

0000000080015092 <.LBB29_32>:
            panic!("拷贝的地址值超出了进程")
    80015092:	00015517          	auipc	a0,0x15
    80015096:	a6650513          	addi	a0,a0,-1434 # 80029af8 <.L__unnamed_78>

000000008001509a <.LBB29_33>:
    8001509a:	00015617          	auipc	a2,0x15
    8001509e:	a8660613          	addi	a2,a2,-1402 # 80029b20 <.L__unnamed_79>
    800150a2:	02100593          	li	a1,33
    800150a6:	0000d097          	auipc	ra,0xd
    800150aa:	056080e7          	jalr	86(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    800150ae:	0000                	unimp
        if pgt.copy_in(buf.as_mut_ptr(), addr, len).is_err() {
    800150b0:	66e6                	ld	a3,88(sp)
    800150b2:	75a2                	ld	a1,40(sp)
    800150b4:	7502                	ld	a0,32(sp)
    800150b6:	7666                	ld	a2,120(sp)
    800150b8:	00003097          	auipc	ra,0x3
    800150bc:	b8a080e7          	jalr	-1142(ra) # 80017c42 <_ZN6kernel6memory7mapping10page_table9PageTable7copy_in17h459a5354b5a5ab11E>
    800150c0:	ee2a                	sd	a0,280(sp)
    800150c2:	f22e                	sd	a1,288(sp)
    800150c4:	a009                	j	800150c6 <.LBB29_33+0x2c>
    800150c6:	0a28                	addi	a0,sp,280
    800150c8:	ffff8097          	auipc	ra,0xffff8
    800150cc:	bee080e7          	jalr	-1042(ra) # 8000ccb6 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h304118d236359d80E>
    800150d0:	e42a                	sd	a0,8(sp)
    800150d2:	a009                	j	800150d4 <.LBB29_33+0x3a>
    800150d4:	6522                	ld	a0,8(sp)
    800150d6:	4581                	li	a1,0
    800150d8:	02b50363          	beq	a0,a1,800150fe <.LBB29_35+0x18>
    800150dc:	a009                	j	800150de <.LBB29_34>

00000000800150de <.LBB29_34>:
            println!("Fail copy data from pagetable!");
    800150de:	00015597          	auipc	a1,0x15
    800150e2:	a7a58593          	addi	a1,a1,-1414 # 80029b58 <.L__unnamed_80>

00000000800150e6 <.LBB29_35>:
    800150e6:	00014697          	auipc	a3,0x14
    800150ea:	7aa68693          	addi	a3,a3,1962 # 80029890 <.L__unnamed_129>
    800150ee:	1228                	addi	a0,sp,296
    800150f0:	4605                	li	a2,1
    800150f2:	4701                	li	a4,0
    800150f4:	ffff0097          	auipc	ra,0xffff0
    800150f8:	340080e7          	jalr	832(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    800150fc:	a029                	j	80015106 <.LBB29_35+0x20>
    800150fe:	4501                	li	a0,0
            return Err(())
        }
        
        
        Ok(())
    80015100:	08a10323          	sb	a0,134(sp)
    }
    80015104:	a819                	j	8001511a <.LBB29_35+0x34>
    80015106:	1228                	addi	a0,sp,296
            println!("Fail copy data from pagetable!");
    80015108:	00009097          	auipc	ra,0x9
    8001510c:	aa8080e7          	jalr	-1368(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    80015110:	a009                	j	80015112 <.LBB29_35+0x2c>
    80015112:	4505                	li	a0,1
            return Err(())
    80015114:	08a10323          	sb	a0,134(sp)
    }
    80015118:	a009                	j	8001511a <.LBB29_35+0x34>
    8001511a:	08614503          	lbu	a0,134(sp)
    8001511e:	60fa                	ld	ra,408(sp)
    80015120:	611d                	addi	sp,sp,416
    80015122:	8082                	ret

0000000080015124 <.LBB29_36>:
        if addr > task.size || addr + size_of::<usize>() > task.size {
    80015124:	00014517          	auipc	a0,0x14
    80015128:	37c50513          	addi	a0,a0,892 # 800294a0 <str.1>

000000008001512c <.LBB29_37>:
    8001512c:	00015617          	auipc	a2,0x15
    80015130:	95c60613          	addi	a2,a2,-1700 # 80029a88 <.L__unnamed_81>
    80015134:	45f1                	li	a1,28
    80015136:	0000d097          	auipc	ra,0xd
    8001513a:	fc6080e7          	jalr	-58(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel7syscall15kernel_env_call17h9e1a25b47e8ef67bE:

0000000080015140 <_ZN6kernel7syscall15kernel_env_call17h9e1a25b47e8ef67bE>:
}

#[inline]
pub fn kernel_env_call(
    80015140:	7139                	addi	sp,sp,-64
    80015142:	e036                	sd	a3,0(sp)
    80015144:	86b2                	mv	a3,a2
    80015146:	6602                	ld	a2,0(sp)
    80015148:	e436                	sd	a3,8(sp)
    8001514a:	86ae                	mv	a3,a1
    8001514c:	65a2                	ld	a1,8(sp)
    8001514e:	e836                	sd	a3,16(sp)
    80015150:	88aa                	mv	a7,a0
    80015152:	6542                	ld	a0,16(sp)
    80015154:	f046                	sd	a7,32(sp)
    80015156:	f42a                	sd	a0,40(sp)
    80015158:	f82e                	sd	a1,48(sp)
    8001515a:	fc32                	sd	a2,56(sp)
    arg1: usize,
    arg2: usize,   
) -> usize {
    let mut ret;
    unsafe {
        llvm_asm!("ecall"
    8001515c:	00000073          	ecall
    80015160:	ec2a                	sd	a0,24(sp)
            : "memory"
            : "volatile"
        );
    }
    ret
}
    80015162:	6121                	addi	sp,sp,64
    80015164:	8082                	ret

Disassembly of section .text._ZN63_$LT$kernel..syscall..SysCallID$u20$as$u20$core..fmt..Debug$GT$3fmt17h1e62a6c91d257ea0E:

0000000080015166 <_ZN63_$LT$kernel..syscall..SysCallID$u20$as$u20$core..fmt..Debug$GT$3fmt17h1e62a6c91d257ea0E>:
#[derive(Debug)]
    80015166:	b8010113          	addi	sp,sp,-1152
    8001516a:	46113c23          	sd	ra,1144(sp)
    8001516e:	e42e                	sd	a1,8(sp)
    80015170:	34a13c23          	sd	a0,856(sp)
    80015174:	36b13023          	sd	a1,864(sp)
    80015178:	f02a                	sd	a0,32(sp)
    8001517a:	6108                	ld	a0,0(a0)
    8001517c:	157d                	addi	a0,a0,-1
    8001517e:	e82a                	sd	a0,16(sp)
    80015180:	6542                	ld	a0,16(sp)
    80015182:	050e                	slli	a0,a0,0x3

0000000080015184 <.LBB31_72>:
    80015184:	00014597          	auipc	a1,0x14
    80015188:	e9458593          	addi	a1,a1,-364 # 80029018 <.LJTI31_0>
    8001518c:	952e                	add	a0,a0,a1
    8001518e:	6108                	ld	a0,0(a0)
    80015190:	8502                	jr	a0

0000000080015192 <.LBB31_2>:
    80015192:	65a2                	ld	a1,8(sp)

0000000080015194 <.LBB31_73>:
    80015194:	00015617          	auipc	a2,0x15
    80015198:	9d460613          	addi	a2,a2,-1580 # 80029b68 <.L__unnamed_82>
    8001519c:	0688                	addi	a0,sp,832
    8001519e:	469d                	li	a3,7
    800151a0:	0000e097          	auipc	ra,0xe
    800151a4:	eda080e7          	jalr	-294(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    800151a8:	ab45                	j	80015758 <.LBB31_106+0x2a>

00000000800151aa <.LBB31_3>:
	...

00000000800151ac <.LBB31_4>:
    800151ac:	65a2                	ld	a1,8(sp)

00000000800151ae <.LBB31_74>:
    800151ae:	00015617          	auipc	a2,0x15
    800151b2:	a8260613          	addi	a2,a2,-1406 # 80029c30 <.L__unnamed_83>
    800151b6:	1028                	addi	a0,sp,40
    800151b8:	469d                	li	a3,7
    800151ba:	0000e097          	auipc	ra,0xe
    800151be:	ec0080e7          	jalr	-320(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    800151c2:	a009                	j	800151c4 <.LBB31_74+0x16>
    800151c4:	1028                	addi	a0,sp,40
    800151c6:	46a13823          	sd	a0,1136(sp)
    800151ca:	0000d097          	auipc	ra,0xd
    800151ce:	508080e7          	jalr	1288(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    800151d2:	00a10fa3          	sb	a0,31(sp)
    800151d6:	ab59                	j	8001576c <.LBB31_106+0x3e>

00000000800151d8 <.LBB31_6>:
    800151d8:	65a2                	ld	a1,8(sp)

00000000800151da <.LBB31_75>:
    800151da:	00015617          	auipc	a2,0x15
    800151de:	a4f60613          	addi	a2,a2,-1457 # 80029c29 <.L__unnamed_84>
    800151e2:	0088                	addi	a0,sp,64
    800151e4:	469d                	li	a3,7
    800151e6:	0000e097          	auipc	ra,0xe
    800151ea:	e94080e7          	jalr	-364(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    800151ee:	a009                	j	800151f0 <.LBB31_75+0x16>
    800151f0:	0088                	addi	a0,sp,64
    800151f2:	46a13423          	sd	a0,1128(sp)
    800151f6:	0000d097          	auipc	ra,0xd
    800151fa:	4dc080e7          	jalr	1244(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    800151fe:	00a10fa3          	sb	a0,31(sp)
    80015202:	a3ad                	j	8001576c <.LBB31_106+0x3e>

0000000080015204 <.LBB31_8>:
    80015204:	65a2                	ld	a1,8(sp)

0000000080015206 <.LBB31_76>:
    80015206:	00015617          	auipc	a2,0x15
    8001520a:	a1c60613          	addi	a2,a2,-1508 # 80029c22 <.L__unnamed_85>
    8001520e:	08a8                	addi	a0,sp,88
    80015210:	469d                	li	a3,7
    80015212:	0000e097          	auipc	ra,0xe
    80015216:	e68080e7          	jalr	-408(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    8001521a:	a009                	j	8001521c <.LBB31_76+0x16>
    8001521c:	08a8                	addi	a0,sp,88
    8001521e:	46a13023          	sd	a0,1120(sp)
    80015222:	0000d097          	auipc	ra,0xd
    80015226:	4b0080e7          	jalr	1200(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    8001522a:	00a10fa3          	sb	a0,31(sp)
    8001522e:	ab3d                	j	8001576c <.LBB31_106+0x3e>

0000000080015230 <.LBB31_10>:
    80015230:	65a2                	ld	a1,8(sp)

0000000080015232 <.LBB31_77>:
    80015232:	00015617          	auipc	a2,0x15
    80015236:	9e960613          	addi	a2,a2,-1559 # 80029c1b <.L__unnamed_86>
    8001523a:	1888                	addi	a0,sp,112
    8001523c:	469d                	li	a3,7
    8001523e:	0000e097          	auipc	ra,0xe
    80015242:	e3c080e7          	jalr	-452(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    80015246:	a009                	j	80015248 <.LBB31_77+0x16>
    80015248:	1888                	addi	a0,sp,112
    8001524a:	44a13c23          	sd	a0,1112(sp)
    8001524e:	0000d097          	auipc	ra,0xd
    80015252:	484080e7          	jalr	1156(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    80015256:	00a10fa3          	sb	a0,31(sp)
    8001525a:	ab09                	j	8001576c <.LBB31_106+0x3e>

000000008001525c <.LBB31_12>:
    8001525c:	65a2                	ld	a1,8(sp)

000000008001525e <.LBB31_78>:
    8001525e:	00015617          	auipc	a2,0x15
    80015262:	9b660613          	addi	a2,a2,-1610 # 80029c14 <.L__unnamed_87>
    80015266:	0128                	addi	a0,sp,136
    80015268:	469d                	li	a3,7
    8001526a:	0000e097          	auipc	ra,0xe
    8001526e:	e10080e7          	jalr	-496(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    80015272:	a009                	j	80015274 <.LBB31_78+0x16>
    80015274:	0128                	addi	a0,sp,136
    80015276:	44a13823          	sd	a0,1104(sp)
    8001527a:	0000d097          	auipc	ra,0xd
    8001527e:	458080e7          	jalr	1112(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    80015282:	00a10fa3          	sb	a0,31(sp)
    80015286:	a1dd                	j	8001576c <.LBB31_106+0x3e>

0000000080015288 <.LBB31_14>:
    80015288:	65a2                	ld	a1,8(sp)

000000008001528a <.LBB31_79>:
    8001528a:	00015617          	auipc	a2,0x15
    8001528e:	98360613          	addi	a2,a2,-1661 # 80029c0d <.L__unnamed_88>
    80015292:	1108                	addi	a0,sp,160
    80015294:	469d                	li	a3,7
    80015296:	0000e097          	auipc	ra,0xe
    8001529a:	de4080e7          	jalr	-540(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    8001529e:	a009                	j	800152a0 <.LBB31_79+0x16>
    800152a0:	1108                	addi	a0,sp,160
    800152a2:	44a13423          	sd	a0,1096(sp)
    800152a6:	0000d097          	auipc	ra,0xd
    800152aa:	42c080e7          	jalr	1068(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    800152ae:	00a10fa3          	sb	a0,31(sp)
    800152b2:	a96d                	j	8001576c <.LBB31_106+0x3e>

00000000800152b4 <.LBB31_16>:
    800152b4:	65a2                	ld	a1,8(sp)

00000000800152b6 <.LBB31_80>:
    800152b6:	00015617          	auipc	a2,0x15
    800152ba:	95060613          	addi	a2,a2,-1712 # 80029c06 <.L__unnamed_89>
    800152be:	1928                	addi	a0,sp,184
    800152c0:	469d                	li	a3,7
    800152c2:	0000e097          	auipc	ra,0xe
    800152c6:	db8080e7          	jalr	-584(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    800152ca:	a009                	j	800152cc <.LBB31_80+0x16>
    800152cc:	1928                	addi	a0,sp,184
    800152ce:	44a13023          	sd	a0,1088(sp)
    800152d2:	0000d097          	auipc	ra,0xd
    800152d6:	400080e7          	jalr	1024(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    800152da:	00a10fa3          	sb	a0,31(sp)
    800152de:	a179                	j	8001576c <.LBB31_106+0x3e>

00000000800152e0 <.LBB31_18>:
    800152e0:	65a2                	ld	a1,8(sp)

00000000800152e2 <.LBB31_81>:
    800152e2:	00011617          	auipc	a2,0x11
    800152e6:	4be60613          	addi	a2,a2,1214 # 800267a0 <.L__unnamed_6+0x68>
    800152ea:	0988                	addi	a0,sp,208
    800152ec:	46a1                	li	a3,8
    800152ee:	0000e097          	auipc	ra,0xe
    800152f2:	d8c080e7          	jalr	-628(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    800152f6:	a009                	j	800152f8 <.LBB31_81+0x16>
    800152f8:	0988                	addi	a0,sp,208
    800152fa:	42a13c23          	sd	a0,1080(sp)
    800152fe:	0000d097          	auipc	ra,0xd
    80015302:	3d4080e7          	jalr	980(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    80015306:	00a10fa3          	sb	a0,31(sp)
    8001530a:	a18d                	j	8001576c <.LBB31_106+0x3e>

000000008001530c <.LBB31_20>:
    8001530c:	65a2                	ld	a1,8(sp)

000000008001530e <.LBB31_82>:
    8001530e:	00011617          	auipc	a2,0x11
    80015312:	47260613          	addi	a2,a2,1138 # 80026780 <.L__unnamed_6+0x48>
    80015316:	11a8                	addi	a0,sp,232
    80015318:	46a1                	li	a3,8
    8001531a:	0000e097          	auipc	ra,0xe
    8001531e:	d60080e7          	jalr	-672(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    80015322:	a009                	j	80015324 <.LBB31_82+0x16>
    80015324:	11a8                	addi	a0,sp,232
    80015326:	42a13823          	sd	a0,1072(sp)
    8001532a:	0000d097          	auipc	ra,0xd
    8001532e:	3a8080e7          	jalr	936(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    80015332:	00a10fa3          	sb	a0,31(sp)
    80015336:	a91d                	j	8001576c <.LBB31_106+0x3e>

0000000080015338 <.LBB31_22>:
    80015338:	65a2                	ld	a1,8(sp)

000000008001533a <.LBB31_83>:
    8001533a:	00015617          	auipc	a2,0x15
    8001533e:	8c660613          	addi	a2,a2,-1850 # 80029c00 <.L__unnamed_92>
    80015342:	0208                	addi	a0,sp,256
    80015344:	4699                	li	a3,6
    80015346:	0000e097          	auipc	ra,0xe
    8001534a:	d34080e7          	jalr	-716(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    8001534e:	a009                	j	80015350 <.LBB31_83+0x16>
    80015350:	0208                	addi	a0,sp,256
    80015352:	42a13423          	sd	a0,1064(sp)
    80015356:	0000d097          	auipc	ra,0xd
    8001535a:	37c080e7          	jalr	892(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    8001535e:	00a10fa3          	sb	a0,31(sp)
    80015362:	a129                	j	8001576c <.LBB31_106+0x3e>

0000000080015364 <.LBB31_24>:
    80015364:	65a2                	ld	a1,8(sp)

0000000080015366 <.LBB31_84>:
    80015366:	00015617          	auipc	a2,0x15
    8001536a:	89160613          	addi	a2,a2,-1903 # 80029bf7 <.L__unnamed_93>
    8001536e:	0a28                	addi	a0,sp,280
    80015370:	46a5                	li	a3,9
    80015372:	0000e097          	auipc	ra,0xe
    80015376:	d08080e7          	jalr	-760(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    8001537a:	a009                	j	8001537c <.LBB31_84+0x16>
    8001537c:	0a28                	addi	a0,sp,280
    8001537e:	42a13023          	sd	a0,1056(sp)
    80015382:	0000d097          	auipc	ra,0xd
    80015386:	350080e7          	jalr	848(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    8001538a:	00a10fa3          	sb	a0,31(sp)
    8001538e:	aef9                	j	8001576c <.LBB31_106+0x3e>

0000000080015390 <.LBB31_26>:
    80015390:	65a2                	ld	a1,8(sp)

0000000080015392 <.LBB31_85>:
    80015392:	00015617          	auipc	a2,0x15
    80015396:	85e60613          	addi	a2,a2,-1954 # 80029bf0 <.L__unnamed_94>
    8001539a:	1a08                	addi	a0,sp,304
    8001539c:	469d                	li	a3,7
    8001539e:	0000e097          	auipc	ra,0xe
    800153a2:	cdc080e7          	jalr	-804(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    800153a6:	a009                	j	800153a8 <.LBB31_85+0x16>
    800153a8:	1a08                	addi	a0,sp,304
    800153aa:	40a13c23          	sd	a0,1048(sp)
    800153ae:	0000d097          	auipc	ra,0xd
    800153b2:	324080e7          	jalr	804(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    800153b6:	00a10fa3          	sb	a0,31(sp)
    800153ba:	ae4d                	j	8001576c <.LBB31_106+0x3e>

00000000800153bc <.LBB31_28>:
    800153bc:	65a2                	ld	a1,8(sp)

00000000800153be <.LBB31_86>:
    800153be:	00011617          	auipc	a2,0x11
    800153c2:	42a60613          	addi	a2,a2,1066 # 800267e8 <.L__unnamed_6+0xb0>
    800153c6:	02a8                	addi	a0,sp,328
    800153c8:	46a1                	li	a3,8
    800153ca:	0000e097          	auipc	ra,0xe
    800153ce:	cb0080e7          	jalr	-848(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    800153d2:	a009                	j	800153d4 <.LBB31_86+0x16>
    800153d4:	02a8                	addi	a0,sp,328
    800153d6:	40a13823          	sd	a0,1040(sp)
    800153da:	0000d097          	auipc	ra,0xd
    800153de:	2f8080e7          	jalr	760(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    800153e2:	00a10fa3          	sb	a0,31(sp)
    800153e6:	a659                	j	8001576c <.LBB31_106+0x3e>

00000000800153e8 <.LBB31_30>:
    800153e8:	65a2                	ld	a1,8(sp)

00000000800153ea <.LBB31_87>:
    800153ea:	00014617          	auipc	a2,0x14
    800153ee:	7fd60613          	addi	a2,a2,2045 # 80029be7 <.L__unnamed_96>
    800153f2:	1288                	addi	a0,sp,352
    800153f4:	46a5                	li	a3,9
    800153f6:	0000e097          	auipc	ra,0xe
    800153fa:	c84080e7          	jalr	-892(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    800153fe:	a009                	j	80015400 <.LBB31_87+0x16>
    80015400:	1288                	addi	a0,sp,352
    80015402:	40a13423          	sd	a0,1032(sp)
    80015406:	0000d097          	auipc	ra,0xd
    8001540a:	2cc080e7          	jalr	716(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    8001540e:	00a10fa3          	sb	a0,31(sp)
    80015412:	aea9                	j	8001576c <.LBB31_106+0x3e>

0000000080015414 <.LBB31_32>:
    80015414:	65a2                	ld	a1,8(sp)

0000000080015416 <.LBB31_88>:
    80015416:	00014617          	auipc	a2,0x14
    8001541a:	7ca60613          	addi	a2,a2,1994 # 80029be0 <.L__unnamed_97>
    8001541e:	1aa8                	addi	a0,sp,376
    80015420:	469d                	li	a3,7
    80015422:	0000e097          	auipc	ra,0xe
    80015426:	c58080e7          	jalr	-936(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    8001542a:	a009                	j	8001542c <.LBB31_88+0x16>
    8001542c:	1aa8                	addi	a0,sp,376
    8001542e:	40a13023          	sd	a0,1024(sp)
    80015432:	0000d097          	auipc	ra,0xd
    80015436:	2a0080e7          	jalr	672(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    8001543a:	00a10fa3          	sb	a0,31(sp)
    8001543e:	a63d                	j	8001576c <.LBB31_106+0x3e>

0000000080015440 <.LBB31_34>:
    80015440:	65a2                	ld	a1,8(sp)

0000000080015442 <.LBB31_89>:
    80015442:	00011617          	auipc	a2,0x11
    80015446:	38e60613          	addi	a2,a2,910 # 800267d0 <.L__unnamed_6+0x98>
    8001544a:	0b08                	addi	a0,sp,400
    8001544c:	46a1                	li	a3,8
    8001544e:	0000e097          	auipc	ra,0xe
    80015452:	c2c080e7          	jalr	-980(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    80015456:	a009                	j	80015458 <.LBB31_89+0x16>
    80015458:	0b08                	addi	a0,sp,400
    8001545a:	3ea13c23          	sd	a0,1016(sp)
    8001545e:	0000d097          	auipc	ra,0xd
    80015462:	274080e7          	jalr	628(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    80015466:	00a10fa3          	sb	a0,31(sp)
    8001546a:	a609                	j	8001576c <.LBB31_106+0x3e>

000000008001546c <.LBB31_36>:
    8001546c:	65a2                	ld	a1,8(sp)

000000008001546e <.LBB31_90>:
    8001546e:	00011617          	auipc	a2,0x11
    80015472:	30260613          	addi	a2,a2,770 # 80026770 <.L__unnamed_6+0x38>
    80015476:	1328                	addi	a0,sp,424
    80015478:	46a1                	li	a3,8
    8001547a:	0000e097          	auipc	ra,0xe
    8001547e:	c00080e7          	jalr	-1024(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    80015482:	a009                	j	80015484 <.LBB31_90+0x16>
    80015484:	1328                	addi	a0,sp,424
    80015486:	3ea13823          	sd	a0,1008(sp)
    8001548a:	0000d097          	auipc	ra,0xd
    8001548e:	248080e7          	jalr	584(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    80015492:	00a10fa3          	sb	a0,31(sp)
    80015496:	acd9                	j	8001576c <.LBB31_106+0x3e>

0000000080015498 <.LBB31_38>:
    80015498:	65a2                	ld	a1,8(sp)

000000008001549a <.LBB31_91>:
    8001549a:	00014617          	auipc	a2,0x14
    8001549e:	73d60613          	addi	a2,a2,1853 # 80029bd7 <.L__unnamed_100>
    800154a2:	0388                	addi	a0,sp,448
    800154a4:	46a5                	li	a3,9
    800154a6:	0000e097          	auipc	ra,0xe
    800154aa:	bd4080e7          	jalr	-1068(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    800154ae:	a009                	j	800154b0 <.LBB31_91+0x16>
    800154b0:	0388                	addi	a0,sp,448
    800154b2:	3ea13423          	sd	a0,1000(sp)
    800154b6:	0000d097          	auipc	ra,0xd
    800154ba:	21c080e7          	jalr	540(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    800154be:	00a10fa3          	sb	a0,31(sp)
    800154c2:	a46d                	j	8001576c <.LBB31_106+0x3e>

00000000800154c4 <.LBB31_40>:
    800154c4:	65a2                	ld	a1,8(sp)

00000000800154c6 <.LBB31_92>:
    800154c6:	00014617          	auipc	a2,0x14
    800154ca:	70a60613          	addi	a2,a2,1802 # 80029bd0 <.L__unnamed_101>
    800154ce:	0ba8                	addi	a0,sp,472
    800154d0:	469d                	li	a3,7
    800154d2:	0000e097          	auipc	ra,0xe
    800154d6:	ba8080e7          	jalr	-1112(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    800154da:	a009                	j	800154dc <.LBB31_92+0x16>
    800154dc:	0ba8                	addi	a0,sp,472
    800154de:	3ea13023          	sd	a0,992(sp)
    800154e2:	0000d097          	auipc	ra,0xd
    800154e6:	1f0080e7          	jalr	496(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    800154ea:	00a10fa3          	sb	a0,31(sp)
    800154ee:	acbd                	j	8001576c <.LBB31_106+0x3e>

00000000800154f0 <.LBB31_42>:
    800154f0:	65a2                	ld	a1,8(sp)

00000000800154f2 <.LBB31_93>:
    800154f2:	00011617          	auipc	a2,0x11
    800154f6:	27660613          	addi	a2,a2,630 # 80026768 <.L__unnamed_6+0x30>
    800154fa:	1b88                	addi	a0,sp,496
    800154fc:	46a1                	li	a3,8
    800154fe:	0000e097          	auipc	ra,0xe
    80015502:	b7c080e7          	jalr	-1156(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    80015506:	a009                	j	80015508 <.LBB31_93+0x16>
    80015508:	1b88                	addi	a0,sp,496
    8001550a:	3ca13c23          	sd	a0,984(sp)
    8001550e:	0000d097          	auipc	ra,0xd
    80015512:	1c4080e7          	jalr	452(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    80015516:	00a10fa3          	sb	a0,31(sp)
    8001551a:	ac89                	j	8001576c <.LBB31_106+0x3e>

000000008001551c <.LBB31_44>:
    8001551c:	65a2                	ld	a1,8(sp)

000000008001551e <.LBB31_94>:
    8001551e:	00011617          	auipc	a2,0x11
    80015522:	27a60613          	addi	a2,a2,634 # 80026798 <.L__unnamed_6+0x60>
    80015526:	0428                	addi	a0,sp,520
    80015528:	46a1                	li	a3,8
    8001552a:	0000e097          	auipc	ra,0xe
    8001552e:	b50080e7          	jalr	-1200(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    80015532:	a009                	j	80015534 <.LBB31_94+0x16>
    80015534:	0428                	addi	a0,sp,520
    80015536:	3ca13823          	sd	a0,976(sp)
    8001553a:	0000d097          	auipc	ra,0xd
    8001553e:	198080e7          	jalr	408(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    80015542:	00a10fa3          	sb	a0,31(sp)
    80015546:	a41d                	j	8001576c <.LBB31_106+0x3e>

0000000080015548 <.LBB31_46>:
    80015548:	65a2                	ld	a1,8(sp)

000000008001554a <.LBB31_95>:
    8001554a:	00014617          	auipc	a2,0x14
    8001554e:	67d60613          	addi	a2,a2,1661 # 80029bc7 <.L__unnamed_104>
    80015552:	1408                	addi	a0,sp,544
    80015554:	46a5                	li	a3,9
    80015556:	0000e097          	auipc	ra,0xe
    8001555a:	b24080e7          	jalr	-1244(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    8001555e:	a009                	j	80015560 <.LBB31_95+0x16>
    80015560:	1408                	addi	a0,sp,544
    80015562:	3ca13423          	sd	a0,968(sp)
    80015566:	0000d097          	auipc	ra,0xd
    8001556a:	16c080e7          	jalr	364(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    8001556e:	00a10fa3          	sb	a0,31(sp)
    80015572:	aaed                	j	8001576c <.LBB31_106+0x3e>

0000000080015574 <.LBB31_48>:
    80015574:	65a2                	ld	a1,8(sp)

0000000080015576 <.LBB31_96>:
    80015576:	00014617          	auipc	a2,0x14
    8001557a:	64860613          	addi	a2,a2,1608 # 80029bbe <.L__unnamed_105>
    8001557e:	1c28                	addi	a0,sp,568
    80015580:	46a5                	li	a3,9
    80015582:	0000e097          	auipc	ra,0xe
    80015586:	af8080e7          	jalr	-1288(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    8001558a:	a009                	j	8001558c <.LBB31_96+0x16>
    8001558c:	1c28                	addi	a0,sp,568
    8001558e:	3ca13023          	sd	a0,960(sp)
    80015592:	0000d097          	auipc	ra,0xd
    80015596:	140080e7          	jalr	320(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    8001559a:	00a10fa3          	sb	a0,31(sp)
    8001559e:	a2f9                	j	8001576c <.LBB31_106+0x3e>

00000000800155a0 <.LBB31_50>:
    800155a0:	65a2                	ld	a1,8(sp)

00000000800155a2 <.LBB31_97>:
    800155a2:	00011617          	auipc	a2,0x11
    800155a6:	22660613          	addi	a2,a2,550 # 800267c8 <.L__unnamed_6+0x90>
    800155aa:	0c88                	addi	a0,sp,592
    800155ac:	46a1                	li	a3,8
    800155ae:	0000e097          	auipc	ra,0xe
    800155b2:	acc080e7          	jalr	-1332(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    800155b6:	a009                	j	800155b8 <.LBB31_97+0x16>
    800155b8:	0c88                	addi	a0,sp,592
    800155ba:	3aa13c23          	sd	a0,952(sp)
    800155be:	0000d097          	auipc	ra,0xd
    800155c2:	114080e7          	jalr	276(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    800155c6:	00a10fa3          	sb	a0,31(sp)
    800155ca:	a24d                	j	8001576c <.LBB31_106+0x3e>

00000000800155cc <.LBB31_52>:
    800155cc:	65a2                	ld	a1,8(sp)

00000000800155ce <.LBB31_98>:
    800155ce:	00014617          	auipc	a2,0x14
    800155d2:	5e660613          	addi	a2,a2,1510 # 80029bb4 <.L__unnamed_107>
    800155d6:	14a8                	addi	a0,sp,616
    800155d8:	46a9                	li	a3,10
    800155da:	0000e097          	auipc	ra,0xe
    800155de:	aa0080e7          	jalr	-1376(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    800155e2:	a009                	j	800155e4 <.LBB31_98+0x16>
    800155e4:	14a8                	addi	a0,sp,616
    800155e6:	3aa13823          	sd	a0,944(sp)
    800155ea:	0000d097          	auipc	ra,0xd
    800155ee:	0e8080e7          	jalr	232(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    800155f2:	00a10fa3          	sb	a0,31(sp)
    800155f6:	aa9d                	j	8001576c <.LBB31_106+0x3e>

00000000800155f8 <.LBB31_54>:
    800155f8:	65a2                	ld	a1,8(sp)

00000000800155fa <.LBB31_99>:
    800155fa:	00014617          	auipc	a2,0x14
    800155fe:	5b060613          	addi	a2,a2,1456 # 80029baa <.L__unnamed_108>
    80015602:	0508                	addi	a0,sp,640
    80015604:	46a9                	li	a3,10
    80015606:	0000e097          	auipc	ra,0xe
    8001560a:	a74080e7          	jalr	-1420(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    8001560e:	a009                	j	80015610 <.LBB31_99+0x16>
    80015610:	0508                	addi	a0,sp,640
    80015612:	3aa13423          	sd	a0,936(sp)
    80015616:	0000d097          	auipc	ra,0xd
    8001561a:	0bc080e7          	jalr	188(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    8001561e:	00a10fa3          	sb	a0,31(sp)
    80015622:	a2a9                	j	8001576c <.LBB31_106+0x3e>

0000000080015624 <.LBB31_56>:
    80015624:	65a2                	ld	a1,8(sp)

0000000080015626 <.LBB31_100>:
    80015626:	00014617          	auipc	a2,0x14
    8001562a:	57b60613          	addi	a2,a2,1403 # 80029ba1 <.L__unnamed_109>
    8001562e:	0d28                	addi	a0,sp,664
    80015630:	46a5                	li	a3,9
    80015632:	0000e097          	auipc	ra,0xe
    80015636:	a48080e7          	jalr	-1464(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    8001563a:	a009                	j	8001563c <.LBB31_100+0x16>
    8001563c:	0d28                	addi	a0,sp,664
    8001563e:	3aa13023          	sd	a0,928(sp)
    80015642:	0000d097          	auipc	ra,0xd
    80015646:	090080e7          	jalr	144(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    8001564a:	00a10fa3          	sb	a0,31(sp)
    8001564e:	aa39                	j	8001576c <.LBB31_106+0x3e>

0000000080015650 <.LBB31_58>:
    80015650:	65a2                	ld	a1,8(sp)

0000000080015652 <.LBB31_101>:
    80015652:	00014617          	auipc	a2,0x14
    80015656:	54560613          	addi	a2,a2,1349 # 80029b97 <.L__unnamed_110>
    8001565a:	1d08                	addi	a0,sp,688
    8001565c:	46a9                	li	a3,10
    8001565e:	0000e097          	auipc	ra,0xe
    80015662:	a1c080e7          	jalr	-1508(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    80015666:	a009                	j	80015668 <.LBB31_101+0x16>
    80015668:	1d08                	addi	a0,sp,688
    8001566a:	38a13c23          	sd	a0,920(sp)
    8001566e:	0000d097          	auipc	ra,0xd
    80015672:	064080e7          	jalr	100(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    80015676:	00a10fa3          	sb	a0,31(sp)
    8001567a:	a8cd                	j	8001576c <.LBB31_106+0x3e>

000000008001567c <.LBB31_60>:
    8001567c:	65a2                	ld	a1,8(sp)

000000008001567e <.LBB31_102>:
    8001567e:	00014617          	auipc	a2,0x14
    80015682:	50f60613          	addi	a2,a2,1295 # 80029b8d <.L__unnamed_111>
    80015686:	05a8                	addi	a0,sp,712
    80015688:	46a9                	li	a3,10
    8001568a:	0000e097          	auipc	ra,0xe
    8001568e:	9f0080e7          	jalr	-1552(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    80015692:	a009                	j	80015694 <.LBB31_102+0x16>
    80015694:	05a8                	addi	a0,sp,712
    80015696:	38a13823          	sd	a0,912(sp)
    8001569a:	0000d097          	auipc	ra,0xd
    8001569e:	038080e7          	jalr	56(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    800156a2:	00a10fa3          	sb	a0,31(sp)
    800156a6:	a0d9                	j	8001576c <.LBB31_106+0x3e>

00000000800156a8 <.LBB31_62>:
    800156a8:	65a2                	ld	a1,8(sp)

00000000800156aa <.LBB31_103>:
    800156aa:	00014617          	auipc	a2,0x14
    800156ae:	4d860613          	addi	a2,a2,1240 # 80029b82 <.L__unnamed_112>
    800156b2:	1588                	addi	a0,sp,736
    800156b4:	46ad                	li	a3,11
    800156b6:	0000e097          	auipc	ra,0xe
    800156ba:	9c4080e7          	jalr	-1596(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    800156be:	a009                	j	800156c0 <.LBB31_103+0x16>
    800156c0:	1588                	addi	a0,sp,736
    800156c2:	38a13423          	sd	a0,904(sp)
    800156c6:	0000d097          	auipc	ra,0xd
    800156ca:	00c080e7          	jalr	12(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    800156ce:	00a10fa3          	sb	a0,31(sp)
    800156d2:	a869                	j	8001576c <.LBB31_106+0x3e>

00000000800156d4 <.LBB31_64>:
    800156d4:	65a2                	ld	a1,8(sp)

00000000800156d6 <.LBB31_104>:
    800156d6:	00014617          	auipc	a2,0x14
    800156da:	4a060613          	addi	a2,a2,1184 # 80029b76 <.L__unnamed_113>
    800156de:	1da8                	addi	a0,sp,760
    800156e0:	46b1                	li	a3,12
    800156e2:	0000e097          	auipc	ra,0xe
    800156e6:	998080e7          	jalr	-1640(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    800156ea:	a009                	j	800156ec <.LBB31_104+0x16>
    800156ec:	1da8                	addi	a0,sp,760
    800156ee:	38a13023          	sd	a0,896(sp)
    800156f2:	0000d097          	auipc	ra,0xd
    800156f6:	fe0080e7          	jalr	-32(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    800156fa:	00a10fa3          	sb	a0,31(sp)
    800156fe:	a0bd                	j	8001576c <.LBB31_106+0x3e>

0000000080015700 <.LBB31_66>:
    80015700:	65a2                	ld	a1,8(sp)

0000000080015702 <.LBB31_105>:
    80015702:	00011617          	auipc	a2,0x11
    80015706:	10e60613          	addi	a2,a2,270 # 80026810 <.L__unnamed_6+0xd8>
    8001570a:	0e08                	addi	a0,sp,784
    8001570c:	46a1                	li	a3,8
    8001570e:	0000e097          	auipc	ra,0xe
    80015712:	96c080e7          	jalr	-1684(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    80015716:	a009                	j	80015718 <.LBB31_105+0x16>
    80015718:	0e08                	addi	a0,sp,784
    8001571a:	36a13c23          	sd	a0,888(sp)
    8001571e:	0000d097          	auipc	ra,0xd
    80015722:	fb4080e7          	jalr	-76(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    80015726:	00a10fa3          	sb	a0,31(sp)
    8001572a:	a089                	j	8001576c <.LBB31_106+0x3e>

000000008001572c <.LBB31_68>:
    8001572c:	65a2                	ld	a1,8(sp)

000000008001572e <.LBB31_106>:
    8001572e:	00014617          	auipc	a2,0x14
    80015732:	44160613          	addi	a2,a2,1089 # 80029b6f <.L__unnamed_115>
    80015736:	1628                	addi	a0,sp,808
    80015738:	469d                	li	a3,7
    8001573a:	0000e097          	auipc	ra,0xe
    8001573e:	940080e7          	jalr	-1728(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    80015742:	a009                	j	80015744 <.LBB31_106+0x16>
    80015744:	1628                	addi	a0,sp,808
    80015746:	36a13823          	sd	a0,880(sp)
    8001574a:	0000d097          	auipc	ra,0xd
    8001574e:	f88080e7          	jalr	-120(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    80015752:	00a10fa3          	sb	a0,31(sp)
    80015756:	a819                	j	8001576c <.LBB31_106+0x3e>
    80015758:	0688                	addi	a0,sp,832
    8001575a:	36a13423          	sd	a0,872(sp)
    8001575e:	0000d097          	auipc	ra,0xd
    80015762:	f74080e7          	jalr	-140(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    80015766:	00a10fa3          	sb	a0,31(sp)
    8001576a:	a009                	j	8001576c <.LBB31_106+0x3e>
    8001576c:	01f14503          	lbu	a0,31(sp)
    80015770:	47813083          	ld	ra,1144(sp)
    80015774:	48010113          	addi	sp,sp,1152
    80015778:	8082                	ret

Disassembly of section .text._ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h00cb4931a375be30E:

000000008001577a <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h00cb4931a375be30E>:
    fn from(t: T) -> T {
    8001577a:	1141                	addi	sp,sp,-16
    8001577c:	e02a                	sd	a0,0(sp)
    8001577e:	e42e                	sd	a1,8(sp)
    }
    80015780:	0141                	addi	sp,sp,16
    80015782:	8082                	ret

Disassembly of section .text._ZN6kernel7process7process11task_struct13get_trapframe17h4f5c89f7bc6c38b6E:

0000000080015784 <_ZN6kernel7process7process11task_struct13get_trapframe17h4f5c89f7bc6c38b6E>:
    pub fn get_trapframe(&self) -> *mut Trapframe {
    80015784:	1141                	addi	sp,sp,-16
    80015786:	e42a                	sd	a0,8(sp)
        self.trapframe
    80015788:	7108                	ld	a0,32(a0)
    }
    8001578a:	0141                	addi	sp,sp,16
    8001578c:	8082                	ret

Disassembly of section .text._ZN6kernel7process7process11task_struct8set_name17h97383af55b55362eE:

000000008001578e <_ZN6kernel7process7process11task_struct8set_name17h97383af55b55362eE>:
    pub fn set_name(&mut self, name: &[u8]) {
    8001578e:	715d                	addi	sp,sp,-80
    80015790:	e486                	sd	ra,72(sp)
    80015792:	e832                	sd	a2,16(sp)
    80015794:	862e                	mv	a2,a1
    80015796:	65c2                	ld	a1,16(sp)
    80015798:	ec32                	sd	a2,24(sp)
    8001579a:	862a                	mv	a2,a0
    8001579c:	6562                	ld	a0,24(sp)
    8001579e:	f032                	sd	a2,32(sp)
    800157a0:	f832                	sd	a2,48(sp)
    800157a2:	fc2a                	sd	a0,56(sp)
    800157a4:	e0ae                	sd	a1,64(sp)
                name.as_ptr(), 
    800157a6:	0000a097          	auipc	ra,0xa
    800157aa:	d10080e7          	jalr	-752(ra) # 8001f4b6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hf7620495824cfb20E>
    800157ae:	f42a                	sd	a0,40(sp)
    800157b0:	a009                	j	800157b2 <_ZN6kernel7process7process11task_struct8set_name17h97383af55b55362eE+0x24>
                self.name.as_mut_ptr(),
    800157b2:	7502                	ld	a0,32(sp)
    800157b4:	3f850513          	addi	a0,a0,1016
    800157b8:	45c1                	li	a1,16
    800157ba:	0000a097          	auipc	ra,0xa
    800157be:	c5a080e7          	jalr	-934(ra) # 8001f414 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h69a6648c691317bcE>
    800157c2:	e42a                	sd	a0,8(sp)
    800157c4:	a009                	j	800157c6 <_ZN6kernel7process7process11task_struct8set_name17h97383af55b55362eE+0x38>
                name.len()
    800157c6:	65c2                	ld	a1,16(sp)
    800157c8:	6562                	ld	a0,24(sp)
    800157ca:	0000a097          	auipc	ra,0xa
    800157ce:	c90080e7          	jalr	-880(ra) # 8001f45a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hb06ce83b043493f3E>
    800157d2:	e02a                	sd	a0,0(sp)
    800157d4:	a009                	j	800157d6 <_ZN6kernel7process7process11task_struct8set_name17h97383af55b55362eE+0x48>
            copy_nonoverlapping(
    800157d6:	6602                	ld	a2,0(sp)
    800157d8:	75a2                	ld	a1,40(sp)
    800157da:	6522                	ld	a0,8(sp)
    800157dc:	00010097          	auipc	ra,0x10
    800157e0:	85e080e7          	jalr	-1954(ra) # 8002503a <memcpy>
    }
    800157e4:	60a6                	ld	ra,72(sp)
    800157e6:	6161                	addi	sp,sp,80
    800157e8:	8082                	ret

Disassembly of section .text._ZN6kernel7process7process11task_struct10set_parent17h7c6b213c4b558281E:

00000000800157ea <_ZN6kernel7process7process11task_struct10set_parent17h7c6b213c4b558281E>:
    pub fn set_parent(&mut self, parent: Option<*mut task_struct>) {
    800157ea:	1101                	addi	sp,sp,-32
    800157ec:	e42a                	sd	a0,8(sp)
    800157ee:	e82e                	sd	a1,16(sp)
    800157f0:	ec32                	sd	a2,24(sp)
        self.parent = parent;
    800157f2:	ed4c                	sd	a1,152(a0)
    800157f4:	f150                	sd	a2,160(a0)
    }
    800157f6:	6105                	addi	sp,sp,32
    800157f8:	8082                	ret

Disassembly of section .text._ZN6kernel7process7process11task_struct10set_kstack17h1eb46020e3181b64E:

00000000800157fa <_ZN6kernel7process7process11task_struct10set_kstack17h1eb46020e3181b64E>:
    pub fn set_kstack(&mut self, ksatck: usize) {
    800157fa:	1141                	addi	sp,sp,-16
    800157fc:	e02a                	sd	a0,0(sp)
    800157fe:	e42e                	sd	a1,8(sp)
        self.kstack = ksatck;
    80015800:	e10c                	sd	a1,0(a0)
    }
    80015802:	0141                	addi	sp,sp,16
    80015804:	8082                	ret

Disassembly of section .text._ZN6kernel7process7process11task_struct13set_trapframe17he9793e67a5624ae0E:

0000000080015806 <_ZN6kernel7process7process11task_struct13set_trapframe17he9793e67a5624ae0E>:
    pub fn set_trapframe(&mut self, trapframe: *mut Trapframe) {
    80015806:	1141                	addi	sp,sp,-16
    80015808:	e02a                	sd	a0,0(sp)
    8001580a:	e42e                	sd	a1,8(sp)
        self.trapframe = trapframe;
    8001580c:	f10c                	sd	a1,32(a0)
    }
    8001580e:	0141                	addi	sp,sp,16
    80015810:	8082                	ret

Disassembly of section .text._ZN6kernel7process7process11task_struct13set_pagetable17h12660694e7e3e9cdE:

0000000080015812 <_ZN6kernel7process7process11task_struct13set_pagetable17h12660694e7e3e9cdE>:
    pub fn set_pagetable(&mut self, pagetable: *mut PageTable) {
    80015812:	1141                	addi	sp,sp,-16
    80015814:	e02a                	sd	a0,0(sp)
    80015816:	e42e                	sd	a1,8(sp)
        self.pagetable = pagetable
    80015818:	ed0c                	sd	a1,24(a0)
    }
    8001581a:	0141                	addi	sp,sp,16
    8001581c:	8082                	ret

Disassembly of section .text._ZN6kernel7process7process11task_struct12init_context17hb9b4e203886f153dE:

000000008001581e <_ZN6kernel7process7process11task_struct12init_context17hb9b4e203886f153dE>:
    pub fn init_context(&mut self) {
    8001581e:	7139                	addi	sp,sp,-64
    80015820:	fc06                	sd	ra,56(sp)
    80015822:	ec2a                	sd	a0,24(sp)
    80015824:	f42a                	sd	a0,40(sp)
        let kstack = self.kstack;
    80015826:	610c                	ld	a1,0(a0)
    80015828:	f02e                	sd	a1,32(sp)
    8001582a:	f82e                	sd	a1,48(sp)
        self.context.write_zero();
    8001582c:	02850513          	addi	a0,a0,40
    80015830:	ffffd097          	auipc	ra,0xffffd
    80015834:	93c080e7          	jalr	-1732(ra) # 8001216c <_ZN6kernel7process7context7Context10write_zero17hffd0e59e9c54d2c3E>
    80015838:	a009                	j	8001583a <_ZN6kernel7process7process11task_struct12init_context17hb9b4e203886f153dE+0x1c>
        self.context.write_ra(fork_ret as usize);
    8001583a:	6562                	ld	a0,24(sp)
    8001583c:	02850513          	addi	a0,a0,40

0000000080015840 <.LBB6_6>:
    80015840:	00008597          	auipc	a1,0x8
    80015844:	cde58593          	addi	a1,a1,-802 # 8001d51e <_ZN6kernel7process8fork_ret17hc655e7da156c9445E>
    80015848:	ffffd097          	auipc	ra,0xffffd
    8001584c:	94c080e7          	jalr	-1716(ra) # 80012194 <_ZN6kernel7process7context7Context8write_ra17h453112740fa52877E>
    80015850:	a009                	j	80015852 <.LBB6_6+0x12>
        self.context.write_sp(kstack + PGSIZE);
    80015852:	7582                	ld	a1,32(sp)
    80015854:	6562                	ld	a0,24(sp)
    80015856:	02850513          	addi	a0,a0,40
    8001585a:	e42a                	sd	a0,8(sp)
    8001585c:	6505                	lui	a0,0x1
    8001585e:	952e                	add	a0,a0,a1
    80015860:	e82a                	sd	a0,16(sp)
    80015862:	00b56d63          	bltu	a0,a1,8001587c <.LBB6_7>
    80015866:	a009                	j	80015868 <.LBB6_6+0x28>
    80015868:	65c2                	ld	a1,16(sp)
    8001586a:	6522                	ld	a0,8(sp)
    8001586c:	ffffd097          	auipc	ra,0xffffd
    80015870:	934080e7          	jalr	-1740(ra) # 800121a0 <_ZN6kernel7process7context7Context8write_sp17h0ed724aed1960a6aE>
    80015874:	a009                	j	80015876 <.LBB6_6+0x36>
    }
    80015876:	70e2                	ld	ra,56(sp)
    80015878:	6121                	addi	sp,sp,64
    8001587a:	8082                	ret

000000008001587c <.LBB6_7>:
        self.context.write_sp(kstack + PGSIZE);
    8001587c:	00014517          	auipc	a0,0x14
    80015880:	42450513          	addi	a0,a0,1060 # 80029ca0 <str.0>

0000000080015884 <.LBB6_8>:
    80015884:	00014617          	auipc	a2,0x14
    80015888:	40460613          	addi	a2,a2,1028 # 80029c88 <.L__unnamed_1>
    8001588c:	45f1                	li	a1,28
    8001588e:	0000d097          	auipc	ra,0xd
    80015892:	86e080e7          	jalr	-1938(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel7process7process11task_struct19find_unallocated_fd17h9a4fcee1b88c6c86E:

0000000080015898 <_ZN6kernel7process7process11task_struct19find_unallocated_fd17h9a4fcee1b88c6c86E>:
    pub fn find_unallocated_fd(&self) -> Result<usize, &'static str> {
    80015898:	7175                	addi	sp,sp,-144
    8001589a:	e506                	sd	ra,136(sp)
    8001589c:	f02e                	sd	a1,32(sp)
    8001589e:	f42a                	sd	a0,40(sp)
    800158a0:	f4ae                	sd	a1,104(sp)
        for fd in 0..self.open_files.len() {
    800158a2:	0a858513          	addi	a0,a1,168
    800158a6:	06400593          	li	a1,100
    800158aa:	ffff9097          	auipc	ra,0xffff9
    800158ae:	b20080e7          	jalr	-1248(ra) # 8000e3ca <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h659c29622d59b861E>
    800158b2:	f82a                	sd	a0,48(sp)
    800158b4:	a009                	j	800158b6 <_ZN6kernel7process7process11task_struct19find_unallocated_fd17h9a4fcee1b88c6c86E+0x1e>
    800158b6:	75c2                	ld	a1,48(sp)
    800158b8:	4501                	li	a0,0
    800158ba:	fc2a                	sd	a0,56(sp)
    800158bc:	e0ae                	sd	a1,64(sp)
    800158be:	0000a097          	auipc	ra,0xa
    800158c2:	f0a080e7          	jalr	-246(ra) # 8001f7c8 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he0a8d93712e5493bE>
    800158c6:	e82a                	sd	a0,16(sp)
    800158c8:	ec2e                	sd	a1,24(sp)
    800158ca:	a009                	j	800158cc <_ZN6kernel7process7process11task_struct19find_unallocated_fd17h9a4fcee1b88c6c86E+0x34>
    800158cc:	6562                	ld	a0,24(sp)
    800158ce:	65c2                	ld	a1,16(sp)
    800158d0:	e4ae                	sd	a1,72(sp)
    800158d2:	e8aa                	sd	a0,80(sp)
    800158d4:	a009                	j	800158d6 <_ZN6kernel7process7process11task_struct19find_unallocated_fd17h9a4fcee1b88c6c86E+0x3e>
    800158d6:	00a8                	addi	a0,sp,72
    800158d8:	0000a097          	auipc	ra,0xa
    800158dc:	e82080e7          	jalr	-382(ra) # 8001f75a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE>
    800158e0:	ecaa                	sd	a0,88(sp)
    800158e2:	f0ae                	sd	a1,96(sp)
    800158e4:	a009                	j	800158e6 <_ZN6kernel7process7process11task_struct19find_unallocated_fd17h9a4fcee1b88c6c86E+0x4e>
    800158e6:	6566                	ld	a0,88(sp)
    800158e8:	4581                	li	a1,0
    800158ea:	00b50463          	beq	a0,a1,800158f2 <_ZN6kernel7process7process11task_struct19find_unallocated_fd17h9a4fcee1b88c6c86E+0x5a>
    800158ee:	a009                	j	800158f0 <_ZN6kernel7process7process11task_struct19find_unallocated_fd17h9a4fcee1b88c6c86E+0x58>
    800158f0:	a829                	j	8001590a <.LBB7_15+0x16>
        Err("Fail to find unallocted fd")
    800158f2:	75a2                	ld	a1,40(sp)

00000000800158f4 <.LBB7_15>:
    800158f4:	00014517          	auipc	a0,0x14
    800158f8:	3e450513          	addi	a0,a0,996 # 80029cd8 <.L__unnamed_2>
    800158fc:	e588                	sd	a0,8(a1)
    800158fe:	4569                	li	a0,26
    80015900:	e988                	sd	a0,16(a1)
    80015902:	4505                	li	a0,1
    80015904:	e188                	sd	a0,0(a1)
    }
    80015906:	a0a1                	j	8001594e <.LBB7_15+0x5a>
        for fd in 0..self.open_files.len() {
    80015908:	0000                	unimp
    8001590a:	7586                	ld	a1,96(sp)
    8001590c:	e42e                	sd	a1,8(sp)
    8001590e:	f8ae                	sd	a1,112(sp)
    80015910:	fcae                	sd	a1,120(sp)
    80015912:	e12e                	sd	a1,128(sp)
    80015914:	06300513          	li	a0,99
            if self.open_files[fd].is_none() {
    80015918:	02b56e63          	bltu	a0,a1,80015954 <.LBB7_15+0x60>
    8001591c:	a009                	j	8001591e <.LBB7_15+0x2a>
    8001591e:	7502                	ld	a0,32(sp)
    80015920:	65a2                	ld	a1,8(sp)
    80015922:	058e                	slli	a1,a1,0x3
    80015924:	952e                	add	a0,a0,a1
    80015926:	0a850513          	addi	a0,a0,168
    8001592a:	ffff9097          	auipc	ra,0xffff9
    8001592e:	55e080e7          	jalr	1374(ra) # 8000ee88 <_ZN4core6option15Option$LT$T$GT$7is_none17h8590a3c5c2d3d42aE>
    80015932:	e02a                	sd	a0,0(sp)
    80015934:	a009                	j	80015936 <.LBB7_15+0x42>
    80015936:	6502                	ld	a0,0(sp)
    80015938:	4581                	li	a1,0
    8001593a:	00b50963          	beq	a0,a1,8001594c <.LBB7_15+0x58>
    8001593e:	a009                	j	80015940 <.LBB7_15+0x4c>
                return Ok(fd)
    80015940:	75a2                	ld	a1,40(sp)
    80015942:	6522                	ld	a0,8(sp)
    80015944:	e588                	sd	a0,8(a1)
    80015946:	4501                	li	a0,0
    80015948:	e188                	sd	a0,0(a1)
    }
    8001594a:	a011                	j	8001594e <.LBB7_15+0x5a>
        for fd in 0..self.open_files.len() {
    8001594c:	b769                	j	800158d6 <_ZN6kernel7process7process11task_struct19find_unallocated_fd17h9a4fcee1b88c6c86E+0x3e>
    }
    8001594e:	60aa                	ld	ra,136(sp)
    80015950:	6149                	addi	sp,sp,144
    80015952:	8082                	ret
            if self.open_files[fd].is_none() {
    80015954:	6522                	ld	a0,8(sp)

0000000080015956 <.LBB7_16>:
    80015956:	00014617          	auipc	a2,0x14
    8001595a:	36a60613          	addi	a2,a2,874 # 80029cc0 <.L__unnamed_3>
    8001595e:	06400593          	li	a1,100
    80015962:	0000c097          	auipc	ra,0xc
    80015966:	7c6080e7          	jalr	1990(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel7process7process11task_struct9user_init17hc3178b7a708271cbE:

000000008001596c <_ZN6kernel7process7process11task_struct9user_init17hc3178b7a708271cbE>:
    pub fn user_init(&mut self) {
    8001596c:	7139                	addi	sp,sp,-64
    8001596e:	fc06                	sd	ra,56(sp)
    80015970:	e82a                	sd	a0,16(sp)
    80015972:	f42a                	sd	a0,40(sp)
        let tf = unsafe{ &mut *self.trapframe };
    80015974:	7108                	ld	a0,32(a0)
    80015976:	ec2a                	sd	a0,24(sp)
    80015978:	f82a                	sd	a0,48(sp)
        tf.kernel_satp = unsafe{ satp::read() };
    8001597a:	00009097          	auipc	ra,0x9
    8001597e:	bd2080e7          	jalr	-1070(ra) # 8001e54c <_ZN6kernel4arch5riscv8register4satp4read17h0624a35f6368d5a6E>
    80015982:	f02a                	sd	a0,32(sp)
    80015984:	a009                	j	80015986 <_ZN6kernel7process7process11task_struct9user_init17hc3178b7a708271cbE+0x1a>
    80015986:	6542                	ld	a0,16(sp)
    80015988:	7582                	ld	a1,32(sp)
    8001598a:	6662                	ld	a2,24(sp)
    8001598c:	e20c                	sd	a1,0(a2)
        tf.kernel_sp = self.kstack + PGSIZE * 4;
    8001598e:	610c                	ld	a1,0(a0)
    80015990:	6511                	lui	a0,0x4
    80015992:	952e                	add	a0,a0,a1
    80015994:	e42a                	sd	a0,8(sp)
    80015996:	02b56763          	bltu	a0,a1,800159c4 <.LBB8_6>
    8001599a:	a009                	j	8001599c <_ZN6kernel7process7process11task_struct9user_init17hc3178b7a708271cbE+0x30>
    8001599c:	65e2                	ld	a1,24(sp)
    8001599e:	6522                	ld	a0,8(sp)
    800159a0:	e588                	sd	a0,8(a1)

00000000800159a2 <.LBB8_5>:
        tf.kernel_trap = user_trap as usize;
    800159a2:	ffff1517          	auipc	a0,0xffff1
    800159a6:	85250513          	addi	a0,a0,-1966 # 800061f4 <user_trap>
    800159aa:	e988                	sd	a0,16(a1)
            cpu::cpuid()
    800159ac:	ffffc097          	auipc	ra,0xffffc
    800159b0:	016080e7          	jalr	22(ra) # 800119c2 <_ZN6kernel7process3cpu5cpuid17h605093a6a9a60164E>
    800159b4:	e02a                	sd	a0,0(sp)
    800159b6:	a009                	j	800159b8 <.LBB8_5+0x16>
        tf.kernel_hartid = unsafe {
    800159b8:	6502                	ld	a0,0(sp)
    800159ba:	65e2                	ld	a1,24(sp)
    800159bc:	f188                	sd	a0,32(a1)
    }
    800159be:	70e2                	ld	ra,56(sp)
    800159c0:	6121                	addi	sp,sp,64
    800159c2:	8082                	ret

00000000800159c4 <.LBB8_6>:
        tf.kernel_sp = self.kstack + PGSIZE * 4;
    800159c4:	00014517          	auipc	a0,0x14
    800159c8:	2dc50513          	addi	a0,a0,732 # 80029ca0 <str.0>

00000000800159cc <.LBB8_7>:
    800159cc:	00014617          	auipc	a2,0x14
    800159d0:	32c60613          	addi	a2,a2,812 # 80029cf8 <.L__unnamed_4>
    800159d4:	45f1                	li	a1,28
    800159d6:	0000c097          	auipc	ra,0xc
    800159da:	726080e7          	jalr	1830(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel7process7process11task_struct4init17h302d3726f13c442bE:

00000000800159e0 <_ZN6kernel7process7process11task_struct4init17h302d3726f13c442bE>:
    pub fn init(&mut self, kstack: usize) {
    800159e0:	81010113          	addi	sp,sp,-2032
    800159e4:	7e113423          	sd	ra,2024(sp)
    800159e8:	660d                	lui	a2,0x3
    800159ea:	7e06061b          	addiw	a2,a2,2016
    800159ee:	40c10133          	sub	sp,sp,a2
    800159f2:	fd2e                	sd	a1,184(sp)
    800159f4:	e1aa                	sd	a0,192(sp)
    800159f6:	660d                	lui	a2,0x3
    800159f8:	6206061b          	addiw	a2,a2,1568
    800159fc:	960a                	add	a2,a2,sp
    800159fe:	e208                	sd	a0,0(a2)
    80015a00:	650d                	lui	a0,0x3
    80015a02:	6285051b          	addiw	a0,a0,1576
    80015a06:	950a                	add	a0,a0,sp
    80015a08:	e10c                	sd	a1,0(a0)
        self.open_files = array![_ => None; NFILE];
    80015a0a:	a009                	j	80015a0c <_ZN6kernel7process7process11task_struct4init17h302d3726f13c442bE+0x2c>
    80015a0c:	650d                	lui	a0,0x3
    80015a0e:	6405051b          	addiw	a0,a0,1600
    80015a12:	950a                	add	a0,a0,sp
    80015a14:	852a                	mv	a0,a0
    80015a16:	f52a                	sd	a0,168(sp)
    80015a18:	6585                	lui	a1,0x1
    80015a1a:	6b85859b          	addiw	a1,a1,1720
    80015a1e:	958a                	add	a1,a1,sp
    80015a20:	85ae                	mv	a1,a1
    80015a22:	32000613          	li	a2,800
    #[must_use = "if you don't need the wrapper, you can use `mem::forget` instead"]
    #[stable(feature = "manually_drop", since = "1.20.0")]
    #[rustc_const_stable(feature = "const_manually_drop", since = "1.36.0")]
    #[inline(always)]
    pub const fn new(value: T) -> ManuallyDrop<T> {
        ManuallyDrop { value }
    80015a26:	f932                	sd	a2,176(sp)
    80015a28:	0000f097          	auipc	ra,0xf
    80015a2c:	612080e7          	jalr	1554(ra) # 8002503a <memcpy>
    80015a30:	75aa                	ld	a1,168(sp)
    80015a32:	764a                	ld	a2,176(sp)
    80015a34:	6505                	lui	a0,0x1
    80015a36:	3985051b          	addiw	a0,a0,920
    80015a3a:	950a                	add	a0,a0,sp
    80015a3c:	852a                	mv	a0,a0
    80015a3e:	0000f097          	auipc	ra,0xf
    80015a42:	5fc080e7          	jalr	1532(ra) # 8002503a <memcpy>
    80015a46:	a009                	j	80015a48 <_ZN6kernel7process7process11task_struct4init17h302d3726f13c442bE+0x68>
    80015a48:	6505                	lui	a0,0x1
    80015a4a:	0785051b          	addiw	a0,a0,120
    80015a4e:	950a                	add	a0,a0,sp
    80015a50:	852a                	mv	a0,a0
    80015a52:	e92a                	sd	a0,144(sp)
    80015a54:	6585                	lui	a1,0x1
    80015a56:	3985859b          	addiw	a1,a1,920
    80015a5a:	958a                	add	a1,a1,sp
    80015a5c:	85ae                	mv	a1,a1
    80015a5e:	32000613          	li	a2,800
    80015a62:	f132                	sd	a2,160(sp)
    80015a64:	0000f097          	auipc	ra,0xf
    80015a68:	5d6080e7          	jalr	1494(ra) # 8002503a <memcpy>
    80015a6c:	65ca                	ld	a1,144(sp)
    80015a6e:	760a                	ld	a2,160(sp)
    80015a70:	6505                	lui	a0,0x1
    80015a72:	d585051b          	addiw	a0,a0,-680
    80015a76:	950a                	add	a0,a0,sp
    80015a78:	852a                	mv	a0,a0
    80015a7a:	ed2a                	sd	a0,152(sp)
    80015a7c:	0000f097          	auipc	ra,0xf
    80015a80:	5be080e7          	jalr	1470(ra) # 8002503a <memcpy>
    80015a84:	65ea                	ld	a1,152(sp)
    80015a86:	760a                	ld	a2,160(sp)
    80015a88:	6505                	lui	a0,0x1
    80015a8a:	a385051b          	addiw	a0,a0,-1480
    80015a8e:	950a                	add	a0,a0,sp
    80015a90:	852a                	mv	a0,a0
    /// ```
    #[stable(feature = "manually_drop", since = "1.20.0")]
    #[rustc_const_stable(feature = "const_manually_drop", since = "1.36.0")]
    #[inline(always)]
    pub const fn into_inner(slot: ManuallyDrop<T>) -> T {
        slot.value
    80015a92:	0000f097          	auipc	ra,0xf
    80015a96:	5a8080e7          	jalr	1448(ra) # 8002503a <memcpy>
    80015a9a:	a009                	j	80015a9c <_ZN6kernel7process7process11task_struct4init17h302d3726f13c442bE+0xbc>
    80015a9c:	71010513          	addi	a0,sp,1808
    80015aa0:	6585                	lui	a1,0x1
    80015aa2:	a385859b          	addiw	a1,a1,-1480
    80015aa6:	958a                	add	a1,a1,sp
    80015aa8:	85ae                	mv	a1,a1
    80015aaa:	ffff5097          	auipc	ra,0xffff5
    80015aae:	054080e7          	jalr	84(ra) # 8000aafe <_ZN11array_macro28__ArrayVecInner$LT$T$C$_$GT$3new17h8c73fc7516a84ce9E>
    80015ab2:	a009                	j	80015ab4 <_ZN6kernel7process7process11task_struct4init17h302d3726f13c442bE+0xd4>
    80015ab4:	17a8                	addi	a0,sp,1000
    80015ab6:	71010593          	addi	a1,sp,1808
    80015aba:	32800613          	li	a2,808
    80015abe:	0000f097          	auipc	ra,0xf
    80015ac2:	57c080e7          	jalr	1404(ra) # 8002503a <memcpy>
    80015ac6:	a009                	j	80015ac8 <_ZN6kernel7process7process11task_struct4init17h302d3726f13c442bE+0xe8>
    80015ac8:	70813503          	ld	a0,1800(sp)
    80015acc:	e12a                	sd	a0,128(sp)
    80015ace:	17a8                	addi	a0,sp,1000
    80015ad0:	ffff5097          	auipc	ra,0xffff5
    80015ad4:	022080e7          	jalr	34(ra) # 8000aaf2 <_ZN11array_macro19__Capacity$LT$_$GT$3get17hecfc1cf2bb733562E>
    80015ad8:	e52a                	sd	a0,136(sp)
    80015ada:	a009                	j	80015adc <_ZN6kernel7process7process11task_struct4init17h302d3726f13c442bE+0xfc>
    80015adc:	650a                	ld	a0,128(sp)
    80015ade:	65aa                	ld	a1,136(sp)
    80015ae0:	04b56963          	bltu	a0,a1,80015b32 <_ZN6kernel7process7process11task_struct4init17h302d3726f13c442bE+0x152>
    80015ae4:	a009                	j	80015ae6 <_ZN6kernel7process7process11task_struct4init17h302d3726f13c442bE+0x106>
    80015ae6:	6509                	lui	a0,0x2
    80015ae8:	6785051b          	addiw	a0,a0,1656
    80015aec:	950a                	add	a0,a0,sp
    80015aee:	852a                	mv	a0,a0
    80015af0:	f4aa                	sd	a0,104(sp)
    80015af2:	17ac                	addi	a1,sp,1000
    80015af4:	32800613          	li	a2,808
    80015af8:	fcb2                	sd	a2,120(sp)
    80015afa:	0000f097          	auipc	ra,0xf
    80015afe:	540080e7          	jalr	1344(ra) # 8002503a <memcpy>
    80015b02:	75a6                	ld	a1,104(sp)
    80015b04:	7666                	ld	a2,120(sp)
    80015b06:	6511                	lui	a0,0x4
    80015b08:	ca05051b          	addiw	a0,a0,-864
    80015b0c:	950a                	add	a0,a0,sp
    80015b0e:	852a                	mv	a0,a0
        ManuallyDrop { value }
    80015b10:	f8aa                	sd	a0,112(sp)
    80015b12:	0000f097          	auipc	ra,0xf
    80015b16:	528080e7          	jalr	1320(ra) # 8002503a <memcpy>
    80015b1a:	75c6                	ld	a1,112(sp)
    80015b1c:	7666                	ld	a2,120(sp)
    80015b1e:	6509                	lui	a0,0x2
    80015b20:	3505051b          	addiw	a0,a0,848
    80015b24:	950a                	add	a0,a0,sp
    80015b26:	852a                	mv	a0,a0
    80015b28:	0000f097          	auipc	ra,0xf
    80015b2c:	512080e7          	jalr	1298(ra) # 8002503a <memcpy>
    80015b30:	a0bd                	j	80015b9e <_ZN6kernel7process7process11task_struct4init17h302d3726f13c442bE+0x1be>
    80015b32:	4501                	li	a0,0
    80015b34:	658d                	lui	a1,0x3
    80015b36:	6385859b          	addiw	a1,a1,1592
    80015b3a:	958a                	add	a1,a1,sp
    80015b3c:	e188                	sd	a0,0(a1)
    80015b3e:	6591                	lui	a1,0x4
    80015b40:	c885859b          	addiw	a1,a1,-888
    80015b44:	958a                	add	a1,a1,sp
    80015b46:	e188                	sd	a0,0(a1)
    80015b48:	6591                	lui	a1,0x4
    80015b4a:	c985859b          	addiw	a1,a1,-872
    80015b4e:	958a                	add	a1,a1,sp
    80015b50:	e188                	sd	a0,0(a1)
    80015b52:	6591                	lui	a1,0x4
    80015b54:	c905859b          	addiw	a1,a1,-880
    80015b58:	958a                	add	a1,a1,sp
    80015b5a:	e188                	sd	a0,0(a1)
    /// [`assume_init`]: MaybeUninit::assume_init
    #[stable(feature = "maybe_uninit", since = "1.36.0")]
    #[rustc_const_stable(feature = "const_maybe_uninit", since = "1.36.0")]
    #[inline(always)]
    pub const fn new(val: T) -> MaybeUninit<T> {
        MaybeUninit { value: ManuallyDrop::new(val) }
    80015b5c:	6591                	lui	a1,0x4
    80015b5e:	c805859b          	addiw	a1,a1,-896
    80015b62:	958a                	add	a1,a1,sp
    80015b64:	e188                	sd	a0,0(a1)
    80015b66:	a009                	j	80015b68 <_ZN6kernel7process7process11task_struct4init17h302d3726f13c442bE+0x188>
    80015b68:	70813583          	ld	a1,1800(sp)
    80015b6c:	f0ae                	sd	a1,96(sp)
    80015b6e:	06300513          	li	a0,99
    80015b72:	16b56063          	bltu	a0,a1,80015cd2 <_ZN6kernel7process7process11task_struct4init17h302d3726f13c442bE+0x2f2>
    80015b76:	a009                	j	80015b78 <_ZN6kernel7process7process11task_struct4init17h302d3726f13c442bE+0x198>
    80015b78:	7506                	ld	a0,96(sp)
    80015b7a:	00351593          	slli	a1,a0,0x3
    80015b7e:	17a8                	addi	a0,sp,1000
    80015b80:	95aa                	add	a1,a1,a0
    80015b82:	4501                	li	a0,0
    80015b84:	e188                	sd	a0,0(a1)
    80015b86:	70813583          	ld	a1,1800(sp)
    80015b8a:	00158513          	addi	a0,a1,1 # 4001 <.Lline_table_start0+0x37b>
    80015b8e:	ecaa                	sd	a0,88(sp)
    80015b90:	14b56d63          	bltu	a0,a1,80015cea <.LBB9_21>
    80015b94:	a009                	j	80015b96 <_ZN6kernel7process7process11task_struct4init17h302d3726f13c442bE+0x1b6>
    80015b96:	6566                	ld	a0,88(sp)
    80015b98:	70a13423          	sd	a0,1800(sp)
    80015b9c:	b735                	j	80015ac8 <_ZN6kernel7process7process11task_struct4init17h302d3726f13c442bE+0xe8>
    80015b9e:	6509                	lui	a0,0x2
    80015ba0:	0285051b          	addiw	a0,a0,40
    80015ba4:	950a                	add	a0,a0,sp
    80015ba6:	852a                	mv	a0,a0
    80015ba8:	e0aa                	sd	a0,64(sp)
    80015baa:	6589                	lui	a1,0x2
    80015bac:	3505859b          	addiw	a1,a1,848
    80015bb0:	958a                	add	a1,a1,sp
    80015bb2:	85ae                	mv	a1,a1
    80015bb4:	32800613          	li	a2,808
    80015bb8:	e8b2                	sd	a2,80(sp)
    80015bba:	0000f097          	auipc	ra,0xf
    80015bbe:	480080e7          	jalr	1152(ra) # 8002503a <memcpy>
    80015bc2:	6586                	ld	a1,64(sp)
    80015bc4:	6646                	ld	a2,80(sp)
    80015bc6:	6509                	lui	a0,0x2
    80015bc8:	d005051b          	addiw	a0,a0,-768
    80015bcc:	950a                	add	a0,a0,sp
    80015bce:	852a                	mv	a0,a0
    80015bd0:	e4aa                	sd	a0,72(sp)
    80015bd2:	0000f097          	auipc	ra,0xf
    80015bd6:	468080e7          	jalr	1128(ra) # 8002503a <memcpy>
    80015bda:	65a6                	ld	a1,72(sp)
    80015bdc:	6646                	ld	a2,80(sp)
    80015bde:	6509                	lui	a0,0x2
    80015be0:	9d85051b          	addiw	a0,a0,-1576
    80015be4:	950a                	add	a0,a0,sp
    80015be6:	852a                	mv	a0,a0
        slot.value
    80015be8:	0000f097          	auipc	ra,0xf
    80015bec:	452080e7          	jalr	1106(ra) # 8002503a <memcpy>
    80015bf0:	a009                	j	80015bf2 <_ZN6kernel7process7process11task_struct4init17h302d3726f13c442bE+0x212>
    80015bf2:	650d                	lui	a0,0x3
    80015bf4:	3005051b          	addiw	a0,a0,768
    80015bf8:	950a                	add	a0,a0,sp
    80015bfa:	852a                	mv	a0,a0
    80015bfc:	f42a                	sd	a0,40(sp)
    80015bfe:	6589                	lui	a1,0x2
    80015c00:	9d85859b          	addiw	a1,a1,-1576
    80015c04:	958a                	add	a1,a1,sp
    80015c06:	85ae                	mv	a1,a1
    80015c08:	32000613          	li	a2,800
    80015c0c:	fc32                	sd	a2,56(sp)
    80015c0e:	0000f097          	auipc	ra,0xf
    80015c12:	42c080e7          	jalr	1068(ra) # 8002503a <memcpy>
    80015c16:	75a2                	ld	a1,40(sp)
    80015c18:	7662                	ld	a2,56(sp)
    80015c1a:	6511                	lui	a0,0x4
    80015c1c:	9605051b          	addiw	a0,a0,-1696
    80015c20:	950a                	add	a0,a0,sp
    80015c22:	852a                	mv	a0,a0
        ManuallyDrop { value }
    80015c24:	f82a                	sd	a0,48(sp)
    80015c26:	0000f097          	auipc	ra,0xf
    80015c2a:	414080e7          	jalr	1044(ra) # 8002503a <memcpy>
    80015c2e:	75c2                	ld	a1,48(sp)
    80015c30:	7662                	ld	a2,56(sp)
    80015c32:	650d                	lui	a0,0x3
    80015c34:	3501                	addiw	a0,a0,-32
    80015c36:	950a                	add	a0,a0,sp
    80015c38:	852a                	mv	a0,a0
    80015c3a:	0000f097          	auipc	ra,0xf
    80015c3e:	400080e7          	jalr	1024(ra) # 8002503a <memcpy>
    80015c42:	a009                	j	80015c44 <_ZN6kernel7process7process11task_struct4init17h302d3726f13c442bE+0x264>
    80015c44:	650d                	lui	a0,0x3
    80015c46:	cc05051b          	addiw	a0,a0,-832
    80015c4a:	950a                	add	a0,a0,sp
    80015c4c:	852a                	mv	a0,a0
    80015c4e:	e82a                	sd	a0,16(sp)
    80015c50:	658d                	lui	a1,0x3
    80015c52:	3581                	addiw	a1,a1,-32
    80015c54:	958a                	add	a1,a1,sp
    80015c56:	85ae                	mv	a1,a1
    80015c58:	32000613          	li	a2,800
    80015c5c:	f032                	sd	a2,32(sp)
    80015c5e:	0000f097          	auipc	ra,0xf
    80015c62:	3dc080e7          	jalr	988(ra) # 8002503a <memcpy>
    80015c66:	65c2                	ld	a1,16(sp)
    80015c68:	7602                	ld	a2,32(sp)
    80015c6a:	650d                	lui	a0,0x3
    80015c6c:	9a05051b          	addiw	a0,a0,-1632
    80015c70:	950a                	add	a0,a0,sp
    80015c72:	852a                	mv	a0,a0
    80015c74:	ec2a                	sd	a0,24(sp)
    80015c76:	0000f097          	auipc	ra,0xf
    80015c7a:	3c4080e7          	jalr	964(ra) # 8002503a <memcpy>
    80015c7e:	65e2                	ld	a1,24(sp)
    80015c80:	7602                	ld	a2,32(sp)
    80015c82:	01a8                	addi	a0,sp,200
        slot.value
    80015c84:	0000f097          	auipc	ra,0xf
    80015c88:	3b6080e7          	jalr	950(ra) # 8002503a <memcpy>
    80015c8c:	a009                	j	80015c8e <_ZN6kernel7process7process11task_struct4init17h302d3726f13c442bE+0x2ae>
    80015c8e:	650e                	ld	a0,192(sp)
    80015c90:	0a850513          	addi	a0,a0,168 # 30a8 <.Lline_table_start0+0x147>
    80015c94:	ffff1097          	auipc	ra,0xffff1
    80015c98:	150080e7          	jalr	336(ra) # 80006de4 <_ZN4core3ptr119drop_in_place$LT$$u5b$core..option..Option$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$$u3b$$u20$100$u5d$$GT$17ha293b69a65138838E>
    80015c9c:	a811                	j	80015cb0 <_ZN6kernel7process7process11task_struct4init17h302d3726f13c442bE+0x2d0>
    }
    80015c9e:	650d                	lui	a0,0x3
    80015ca0:	7e05051b          	addiw	a0,a0,2016
    80015ca4:	912a                	add	sp,sp,a0
    80015ca6:	7e813083          	ld	ra,2024(sp)
    80015caa:	7f010113          	addi	sp,sp,2032
    80015cae:	8082                	ret
        self.open_files = array![_ => None; NFILE];
    80015cb0:	650e                	ld	a0,192(sp)
    80015cb2:	0a850513          	addi	a0,a0,168 # 30a8 <.Lline_table_start0+0x147>
    80015cb6:	01ac                	addi	a1,sp,200
    80015cb8:	32000613          	li	a2,800
    80015cbc:	0000f097          	auipc	ra,0xf
    80015cc0:	37e080e7          	jalr	894(ra) # 8002503a <memcpy>
    80015cc4:	75ea                	ld	a1,184(sp)
        self.set_kstack(kstack);
    80015cc6:	650e                	ld	a0,192(sp)
    80015cc8:	00000097          	auipc	ra,0x0
    80015ccc:	b32080e7          	jalr	-1230(ra) # 800157fa <_ZN6kernel7process7process11task_struct10set_kstack17h1eb46020e3181b64E>
    80015cd0:	b7f9                	j	80015c9e <_ZN6kernel7process7process11task_struct4init17h302d3726f13c442bE+0x2be>
        self.open_files = array![_ => None; NFILE];
    80015cd2:	7506                	ld	a0,96(sp)

0000000080015cd4 <.LBB9_20>:
    80015cd4:	00014617          	auipc	a2,0x14
    80015cd8:	03c60613          	addi	a2,a2,60 # 80029d10 <.L__unnamed_5>
    80015cdc:	06400593          	li	a1,100
    80015ce0:	0000c097          	auipc	ra,0xc
    80015ce4:	448080e7          	jalr	1096(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

0000000080015cea <.LBB9_21>:
    80015cea:	00014517          	auipc	a0,0x14
    80015cee:	fb650513          	addi	a0,a0,-74 # 80029ca0 <str.0>

0000000080015cf2 <.LBB9_22>:
    80015cf2:	00014617          	auipc	a2,0x14
    80015cf6:	01e60613          	addi	a2,a2,30 # 80029d10 <.L__unnamed_5>
    80015cfa:	45f1                	li	a1,28
    80015cfc:	0000c097          	auipc	ra,0xc
    80015d00:	400080e7          	jalr	1024(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel7process7process11task_struct6killed17h4fc8d78e83fc4243E:

0000000080015d06 <_ZN6kernel7process7process11task_struct6killed17h4fc8d78e83fc4243E>:
    pub fn killed(&self) -> bool {
    80015d06:	1141                	addi	sp,sp,-16
    80015d08:	e42a                	sd	a0,8(sp)
        self.killed
    80015d0a:	40954503          	lbu	a0,1033(a0)
    }
    80015d0e:	0141                	addi	sp,sp,16
    80015d10:	8082                	ret

Disassembly of section .text._ZN6kernel7process7process11task_struct3pid17hf16723aa87a30b20E:

0000000080015d12 <_ZN6kernel7process7process11task_struct3pid17hf16723aa87a30b20E>:
    pub fn pid(&self) -> usize {
    80015d12:	1141                	addi	sp,sp,-16
    80015d14:	e42a                	sd	a0,8(sp)
        self.pid
    80015d16:	3f053503          	ld	a0,1008(a0)
    }
    80015d1a:	0141                	addi	sp,sp,16
    80015d1c:	8082                	ret

Disassembly of section .text._ZN6kernel7process7process11task_struct9set_state17h31b362f9ace47b8fE:

0000000080015d1e <_ZN6kernel7process7process11task_struct9set_state17h31b362f9ace47b8fE>:
    pub fn set_state(&mut self, state: ProcState) {
    80015d1e:	1141                	addi	sp,sp,-16
    80015d20:	e02a                	sd	a0,0(sp)
    80015d22:	00b107a3          	sb	a1,15(sp)
        self.state = state;
    80015d26:	40b50423          	sb	a1,1032(a0)
    }
    80015d2a:	0141                	addi	sp,sp,16
    80015d2c:	8082                	ret

Disassembly of section .text._ZN6kernel7process7process11task_struct5state17h188201629a7bcaa5E:

0000000080015d2e <_ZN6kernel7process7process11task_struct5state17h188201629a7bcaa5E>:
    pub fn state(&self) -> ProcState {
    80015d2e:	1141                	addi	sp,sp,-16
    80015d30:	e42a                	sd	a0,8(sp)
    }
    80015d32:	40850503          	lb	a0,1032(a0)
    80015d36:	0141                	addi	sp,sp,16
    80015d38:	8082                	ret

Disassembly of section .text._ZN6kernel7process7process11task_struct4name17he8a035723af8acadE:

0000000080015d3a <_ZN6kernel7process7process11task_struct4name17he8a035723af8acadE>:
    pub fn name(&self) -> &str {
    80015d3a:	7139                	addi	sp,sp,-64
    80015d3c:	fc06                	sd	ra,56(sp)
    80015d3e:	f82a                	sd	a0,48(sp)
        from_utf8(&self.name).unwrap()
    80015d40:	3f850593          	addi	a1,a0,1016
    80015d44:	0828                	addi	a0,sp,24
    80015d46:	4641                	li	a2,16
    80015d48:	0000e097          	auipc	ra,0xe
    80015d4c:	c02080e7          	jalr	-1022(ra) # 8002394a <_ZN4core3str8converts9from_utf817h3f0a2d8686bfd9bbE>
    80015d50:	a009                	j	80015d52 <.LBB14_3>

0000000080015d52 <.LBB14_3>:
    80015d52:	00014597          	auipc	a1,0x14
    80015d56:	fd658593          	addi	a1,a1,-42 # 80029d28 <.L__unnamed_6>
    80015d5a:	0828                	addi	a0,sp,24
    80015d5c:	ffff7097          	auipc	ra,0xffff7
    80015d60:	0e4080e7          	jalr	228(ra) # 8000ce40 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17he7e280ca90d46427E>
    80015d64:	e42a                	sd	a0,8(sp)
    80015d66:	e82e                	sd	a1,16(sp)
    80015d68:	a009                	j	80015d6a <.LBB14_3+0x18>
    }
    80015d6a:	65c2                	ld	a1,16(sp)
    80015d6c:	6522                	ld	a0,8(sp)
    80015d6e:	70e2                	ld	ra,56(sp)
    80015d70:	6121                	addi	sp,sp,64
    80015d72:	8082                	ret

Disassembly of section .text._ZN6kernel7process7process11task_struct11modify_kill17hb12febfdeb8e8d03E:

0000000080015d74 <_ZN6kernel7process7process11task_struct11modify_kill17hb12febfdeb8e8d03E>:
    pub fn modify_kill(&mut self, killed: bool) {
    80015d74:	1141                	addi	sp,sp,-16
    80015d76:	e02a                	sd	a0,0(sp)
    80015d78:	00b107a3          	sb	a1,15(sp)
        self.killed = killed;
    80015d7c:	40b504a3          	sb	a1,1033(a0)
    }
    80015d80:	0141                	addi	sp,sp,16
    80015d82:	8082                	ret

Disassembly of section .text._ZN6kernel7process7process11task_struct14proc_pagetable17h014e9ba7c74d9318E:

0000000080015d84 <_ZN6kernel7process7process11task_struct14proc_pagetable17h014e9ba7c74d9318E>:
    pub fn proc_pagetable(&self) -> *mut PageTable {
    80015d84:	7175                	addi	sp,sp,-144
    80015d86:	e506                	sd	ra,136(sp)
    80015d88:	ecaa                	sd	a0,88(sp)
    80015d8a:	f8aa                	sd	a0,112(sp)
        let mut page_table = unsafe{ PageTable::uvmcreate() };
    80015d8c:	00001097          	auipc	ra,0x1
    80015d90:	522080e7          	jalr	1314(ra) # 800172ae <_ZN6kernel6memory7mapping10page_table9PageTable9uvmcreate17hc2bd2b6aed1ce488E>
    80015d94:	85aa                	mv	a1,a0
    80015d96:	f0ae                	sd	a1,96(sp)
    80015d98:	fcaa                	sd	a0,120(sp)
    80015d9a:	a009                	j	80015d9c <_ZN6kernel7process7process11task_struct14proc_pagetable17h014e9ba7c74d9318E+0x18>
        let pagetable = unsafe { &mut *page_table };
    80015d9c:	7506                	ld	a0,96(sp)
    80015d9e:	e12a                	sd	a0,128(sp)
    80015da0:	04000537          	lui	a0,0x4000
    80015da4:	357d                	addiw	a0,a0,-1
    80015da6:	0532                	slli	a0,a0,0xc
            VirtualAddress::new(TRAMPOLINE), 
    80015da8:	ffffb097          	auipc	ra,0xffffb
    80015dac:	770080e7          	jalr	1904(ra) # 80011518 <_ZN6kernel6memory7address14VirtualAddress3new17h716be423461f1938E>
    80015db0:	e8aa                	sd	a0,80(sp)
    80015db2:	a009                	j	80015db4 <.LBB16_20>

0000000080015db4 <.LBB16_20>:
            PhysicalAddress::new(trampoline as usize),
    80015db4:	fffeb517          	auipc	a0,0xfffeb
    80015db8:	24c50513          	addi	a0,a0,588 # 80001000 <trampoline>
    80015dbc:	ffffc097          	auipc	ra,0xffffc
    80015dc0:	80c080e7          	jalr	-2036(ra) # 800115c8 <_ZN6kernel6memory7address15PhysicalAddress3new17hf2b76f8479ac6235E>
    80015dc4:	e4aa                	sd	a0,72(sp)
    80015dc6:	a009                	j	80015dc8 <.LBB16_20+0x14>
    80015dc8:	4509                	li	a0,2
    80015dca:	45a1                	li	a1,8
             PteFlags::R | PteFlags::X
    80015dcc:	ffff3097          	auipc	ra,0xffff3
    80015dd0:	ace080e7          	jalr	-1330(ra) # 8000889a <_ZN93_$LT$kernel..memory..mapping..page_table_entry..PteFlags$u20$as$u20$core..ops..bit..BitOr$GT$5bitor17h95bfa721b377cbd2E>
    80015dd4:	e0aa                	sd	a0,64(sp)
    80015dd6:	a009                	j	80015dd8 <.LBB16_20+0x24>
            if !pagetable.map(
    80015dd8:	6706                	ld	a4,64(sp)
    80015dda:	6626                	ld	a2,72(sp)
    80015ddc:	65c6                	ld	a1,80(sp)
    80015dde:	7506                	ld	a0,96(sp)
    80015de0:	6685                	lui	a3,0x1
    80015de2:	00001097          	auipc	ra,0x1
    80015de6:	2a2080e7          	jalr	674(ra) # 80017084 <_ZN6kernel6memory7mapping10page_table9PageTable3map17h08dc54e6ac3f590cE>
    80015dea:	fc2a                	sd	a0,56(sp)
    80015dec:	a009                	j	80015dee <.LBB16_20+0x3a>
    80015dee:	7562                	ld	a0,56(sp)
    80015df0:	e909                	bnez	a0,80015e02 <.LBB16_20+0x4e>
    80015df2:	a009                	j	80015df4 <.LBB16_20+0x40>
                pagetable.uvm_free(0);
    80015df4:	7506                	ld	a0,96(sp)
    80015df6:	4581                	li	a1,0
    80015df8:	00001097          	auipc	ra,0x1
    80015dfc:	736080e7          	jalr	1846(ra) # 8001752e <_ZN6kernel6memory7mapping10page_table9PageTable8uvm_free17h541177c5e75f280dE>
    80015e00:	a819                	j	80015e16 <.LBB16_20+0x62>
    80015e02:	02000537          	lui	a0,0x2000
    80015e06:	357d                	addiw	a0,a0,-1
    80015e08:	0536                	slli	a0,a0,0xd
                VirtualAddress::new(TRAPFRAME), 
    80015e0a:	ffffb097          	auipc	ra,0xffffb
    80015e0e:	70e080e7          	jalr	1806(ra) # 80011518 <_ZN6kernel6memory7address14VirtualAddress3new17h716be423461f1938E>
    80015e12:	f82a                	sd	a0,48(sp)
    80015e14:	a021                	j	80015e1c <.LBB16_20+0x68>
    80015e16:	4501                	li	a0,0
                return null_mut();
    80015e18:	f4aa                	sd	a0,104(sp)
    80015e1a:	a069                	j	80015ea4 <.LBB16_20+0xf0>
                PhysicalAddress::new(self.get_trapframe() as usize), 
    80015e1c:	6566                	ld	a0,88(sp)
    80015e1e:	00000097          	auipc	ra,0x0
    80015e22:	966080e7          	jalr	-1690(ra) # 80015784 <_ZN6kernel7process7process11task_struct13get_trapframe17h4f5c89f7bc6c38b6E>
    80015e26:	f42a                	sd	a0,40(sp)
    80015e28:	a009                	j	80015e2a <.LBB16_20+0x76>
    80015e2a:	7522                	ld	a0,40(sp)
    80015e2c:	ffffb097          	auipc	ra,0xffffb
    80015e30:	79c080e7          	jalr	1948(ra) # 800115c8 <_ZN6kernel6memory7address15PhysicalAddress3new17hf2b76f8479ac6235E>
    80015e34:	f02a                	sd	a0,32(sp)
    80015e36:	a009                	j	80015e38 <.LBB16_20+0x84>
    80015e38:	4509                	li	a0,2
    80015e3a:	4591                	li	a1,4
                PteFlags::R | PteFlags::W
    80015e3c:	ffff3097          	auipc	ra,0xffff3
    80015e40:	a5e080e7          	jalr	-1442(ra) # 8000889a <_ZN93_$LT$kernel..memory..mapping..page_table_entry..PteFlags$u20$as$u20$core..ops..bit..BitOr$GT$5bitor17h95bfa721b377cbd2E>
    80015e44:	ec2a                	sd	a0,24(sp)
    80015e46:	a009                	j	80015e48 <.LBB16_20+0x94>
            if !pagetable.map(
    80015e48:	6762                	ld	a4,24(sp)
    80015e4a:	7602                	ld	a2,32(sp)
    80015e4c:	75c2                	ld	a1,48(sp)
    80015e4e:	7506                	ld	a0,96(sp)
    80015e50:	6685                	lui	a3,0x1
    80015e52:	00001097          	auipc	ra,0x1
    80015e56:	232080e7          	jalr	562(ra) # 80017084 <_ZN6kernel6memory7mapping10page_table9PageTable3map17h08dc54e6ac3f590cE>
    80015e5a:	e82a                	sd	a0,16(sp)
    80015e5c:	a009                	j	80015e5e <.LBB16_20+0xaa>
    80015e5e:	6542                	ld	a0,16(sp)
    80015e60:	ed01                	bnez	a0,80015e78 <.LBB16_20+0xc4>
    80015e62:	a009                	j	80015e64 <.LBB16_20+0xb0>
    80015e64:	02000537          	lui	a0,0x2000
    80015e68:	357d                	addiw	a0,a0,-1
    80015e6a:	0536                	slli	a0,a0,0xd
                    VirtualAddress::new(TRAPFRAME), 
    80015e6c:	ffffb097          	auipc	ra,0xffffb
    80015e70:	6ac080e7          	jalr	1708(ra) # 80011518 <_ZN6kernel6memory7address14VirtualAddress3new17h716be423461f1938E>
    80015e74:	e42a                	sd	a0,8(sp)
    80015e76:	a021                	j	80015e7e <.LBB16_20+0xca>
        page_table
    80015e78:	7506                	ld	a0,96(sp)
    80015e7a:	f4aa                	sd	a0,104(sp)
    }
    80015e7c:	a025                	j	80015ea4 <.LBB16_20+0xf0>
                pagetable.uvm_unmap(
    80015e7e:	65a2                	ld	a1,8(sp)
    80015e80:	7506                	ld	a0,96(sp)
    80015e82:	4605                	li	a2,1
    80015e84:	4681                	li	a3,0
    80015e86:	00001097          	auipc	ra,0x1
    80015e8a:	7ea080e7          	jalr	2026(ra) # 80017670 <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_unmap17hab395d2793038c03E>
    80015e8e:	a009                	j	80015e90 <.LBB16_20+0xdc>
                pagetable.uvm_free(0);
    80015e90:	7506                	ld	a0,96(sp)
    80015e92:	4581                	li	a1,0
    80015e94:	00001097          	auipc	ra,0x1
    80015e98:	69a080e7          	jalr	1690(ra) # 8001752e <_ZN6kernel6memory7mapping10page_table9PageTable8uvm_free17h541177c5e75f280dE>
    80015e9c:	a009                	j	80015e9e <.LBB16_20+0xea>
    80015e9e:	4501                	li	a0,0
                return null_mut();
    80015ea0:	f4aa                	sd	a0,104(sp)
    80015ea2:	a009                	j	80015ea4 <.LBB16_20+0xf0>
    }
    80015ea4:	7526                	ld	a0,104(sp)
    80015ea6:	60aa                	ld	ra,136(sp)
    80015ea8:	6149                	addi	sp,sp,144
    80015eaa:	8082                	ret

Disassembly of section .text._ZN6kernel7process7process11task_struct9free_proc17h164acbc3102fa45eE:

0000000080015eac <_ZN6kernel7process7process11task_struct9free_proc17h164acbc3102fa45eE>:
    pub fn free_proc(&mut self) {
    80015eac:	715d                	addi	sp,sp,-80
    80015eae:	e486                	sd	ra,72(sp)
    80015eb0:	e42a                	sd	a0,8(sp)
    80015eb2:	fc2a                	sd	a0,56(sp)
        if !self.trapframe.is_null() {
    80015eb4:	7108                	ld	a0,32(a0)
    80015eb6:	00008097          	auipc	ra,0x8
    80015eba:	cd8080e7          	jalr	-808(ra) # 8001db8e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h188cc5d34f3b14d9E>
    80015ebe:	e82a                	sd	a0,16(sp)
    80015ec0:	a009                	j	80015ec2 <_ZN6kernel7process7process11task_struct9free_proc17h164acbc3102fa45eE+0x16>
    80015ec2:	6542                	ld	a0,16(sp)
    80015ec4:	e119                	bnez	a0,80015eca <_ZN6kernel7process7process11task_struct9free_proc17h164acbc3102fa45eE+0x1e>
    80015ec6:	a009                	j	80015ec8 <_ZN6kernel7process7process11task_struct9free_proc17h164acbc3102fa45eE+0x1c>
            unsafe { drop_in_place(self.trapframe as *mut RawPage) };
    80015ec8:	a011                	j	80015ecc <_ZN6kernel7process7process11task_struct9free_proc17h164acbc3102fa45eE+0x20>
        if !self.trapframe.is_null() {
    80015eca:	a0b1                	j	80015f16 <_ZN6kernel7process7process11task_struct9free_proc17h164acbc3102fa45eE+0x6a>
            self.set_trapframe(0 as *mut Trapframe);
    80015ecc:	6522                	ld	a0,8(sp)
    80015ece:	4581                	li	a1,0
    80015ed0:	00000097          	auipc	ra,0x0
    80015ed4:	936080e7          	jalr	-1738(ra) # 80015806 <_ZN6kernel7process7process11task_struct13set_trapframe17he9793e67a5624ae0E>
    80015ed8:	a009                	j	80015eda <_ZN6kernel7process7process11task_struct9free_proc17h164acbc3102fa45eE+0x2e>
            let pagetable = unsafe { &mut *self.pagetable };
    80015eda:	6522                	ld	a0,8(sp)
    80015edc:	6d0c                	ld	a1,24(a0)
    80015ede:	e0ae                	sd	a1,64(sp)
    80015ee0:	4581                	li	a1,0
            self.set_parent(None);
    80015ee2:	f02e                	sd	a1,32(sp)
    80015ee4:	7622                	ld	a2,40(sp)
    80015ee6:	00000097          	auipc	ra,0x0
    80015eea:	904080e7          	jalr	-1788(ra) # 800157ea <_ZN6kernel7process7process11task_struct10set_parent17h7c6b213c4b558281E>
    80015eee:	a009                	j	80015ef0 <_ZN6kernel7process7process11task_struct9free_proc17h164acbc3102fa45eE+0x44>
    80015ef0:	6522                	ld	a0,8(sp)
    80015ef2:	4581                	li	a1,0
            self.size = 0;
    80015ef4:	e90c                	sd	a1,16(a0)
            self.pid = 0;
    80015ef6:	3eb53823          	sd	a1,1008(a0) # 20003f0 <.Lline_table_start0+0x1fc9a89>
            self.channel = 0;
    80015efa:	3eb53023          	sd	a1,992(a0)
            self.killed = false;
    80015efe:	40b504a3          	sb	a1,1033(a0)
            self.xstate = 0;
    80015f02:	3eb53423          	sd	a1,1000(a0)
            self.set_state(ProcState::UNUSED);
    80015f06:	02b10ba3          	sb	a1,55(sp)
    80015f0a:	00000097          	auipc	ra,0x0
    80015f0e:	e14080e7          	jalr	-492(ra) # 80015d1e <_ZN6kernel7process7process11task_struct9set_state17h31b362f9ace47b8fE>
    80015f12:	a009                	j	80015f14 <_ZN6kernel7process7process11task_struct9free_proc17h164acbc3102fa45eE+0x68>
        if !self.trapframe.is_null() {
    80015f14:	a009                	j	80015f16 <_ZN6kernel7process7process11task_struct9free_proc17h164acbc3102fa45eE+0x6a>
    }
    80015f16:	60a6                	ld	ra,72(sp)
    80015f18:	6161                	addi	sp,sp,80
    80015f1a:	8082                	ret

Disassembly of section .text._ZN6kernel7process7process11task_struct11free_thread17ha65c5f78ade6bf2bE:

0000000080015f1c <_ZN6kernel7process7process11task_struct11free_thread17ha65c5f78ade6bf2bE>:
    pub fn free_thread(&mut self) {
    80015f1c:	715d                	addi	sp,sp,-80
    80015f1e:	e486                	sd	ra,72(sp)
    80015f20:	e82a                	sd	a0,16(sp)
    80015f22:	e0aa                	sd	a0,64(sp)
        if !self.trapframe.is_null() {
    80015f24:	7108                	ld	a0,32(a0)
    80015f26:	00008097          	auipc	ra,0x8
    80015f2a:	c68080e7          	jalr	-920(ra) # 8001db8e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h188cc5d34f3b14d9E>
    80015f2e:	ec2a                	sd	a0,24(sp)
    80015f30:	a009                	j	80015f32 <_ZN6kernel7process7process11task_struct11free_thread17ha65c5f78ade6bf2bE+0x16>
    80015f32:	6562                	ld	a0,24(sp)
    80015f34:	e119                	bnez	a0,80015f3a <_ZN6kernel7process7process11task_struct11free_thread17ha65c5f78ade6bf2bE+0x1e>
    80015f36:	a009                	j	80015f38 <_ZN6kernel7process7process11task_struct11free_thread17ha65c5f78ade6bf2bE+0x1c>
            unsafe { drop_in_place(self.trapframe as *mut RawPage); }
    80015f38:	a011                	j	80015f3c <_ZN6kernel7process7process11task_struct11free_thread17ha65c5f78ade6bf2bE+0x20>
        if !self.trapframe.is_null() {
    80015f3a:	a8a9                	j	80015f94 <_ZN6kernel7process7process11task_struct11free_thread17ha65c5f78ade6bf2bE+0x78>
            self.set_trapframe(0 as *mut Trapframe);
    80015f3c:	6542                	ld	a0,16(sp)
    80015f3e:	4581                	li	a1,0
    80015f40:	00000097          	auipc	ra,0x0
    80015f44:	8c6080e7          	jalr	-1850(ra) # 80015806 <_ZN6kernel7process7process11task_struct13set_trapframe17he9793e67a5624ae0E>
    80015f48:	a009                	j	80015f4a <_ZN6kernel7process7process11task_struct11free_thread17ha65c5f78ade6bf2bE+0x2e>
            self.set_pagetable(0 as *mut PageTable);
    80015f4a:	6542                	ld	a0,16(sp)
    80015f4c:	4581                	li	a1,0
    80015f4e:	00000097          	auipc	ra,0x0
    80015f52:	8c4080e7          	jalr	-1852(ra) # 80015812 <_ZN6kernel7process7process11task_struct13set_pagetable17h12660694e7e3e9cdE>
    80015f56:	a009                	j	80015f58 <_ZN6kernel7process7process11task_struct11free_thread17ha65c5f78ade6bf2bE+0x3c>
    80015f58:	6542                	ld	a0,16(sp)
    80015f5a:	4581                	li	a1,0
            self.set_parent(None);
    80015f5c:	f42e                	sd	a1,40(sp)
    80015f5e:	7642                	ld	a2,48(sp)
    80015f60:	00000097          	auipc	ra,0x0
    80015f64:	88a080e7          	jalr	-1910(ra) # 800157ea <_ZN6kernel7process7process11task_struct10set_parent17h7c6b213c4b558281E>
    80015f68:	a009                	j	80015f6a <_ZN6kernel7process7process11task_struct11free_thread17ha65c5f78ade6bf2bE+0x4e>
    80015f6a:	6542                	ld	a0,16(sp)
    80015f6c:	4581                	li	a1,0
            self.size = 0;
    80015f6e:	e42e                	sd	a1,8(sp)
    80015f70:	e90c                	sd	a1,16(a0)
            self.thread_ustack = 0;
    80015f72:	e50c                	sd	a1,8(a0)
            self.pid = 0;
    80015f74:	3eb53823          	sd	a1,1008(a0)
            self.channel = 0;
    80015f78:	3eb53023          	sd	a1,992(a0)
            self.killed = false;
    80015f7c:	40b504a3          	sb	a1,1033(a0)
            self.xstate = 0;
    80015f80:	3eb53423          	sd	a1,1000(a0)
            self.set_state(ProcState::UNUSED);
    80015f84:	02b10fa3          	sb	a1,63(sp)
    80015f88:	00000097          	auipc	ra,0x0
    80015f8c:	d96080e7          	jalr	-618(ra) # 80015d1e <_ZN6kernel7process7process11task_struct9set_state17h31b362f9ace47b8fE>
    80015f90:	a009                	j	80015f92 <_ZN6kernel7process7process11task_struct11free_thread17ha65c5f78ade6bf2bE+0x76>
        if !self.trapframe.is_null() {
    80015f92:	a009                	j	80015f94 <_ZN6kernel7process7process11task_struct11free_thread17ha65c5f78ade6bf2bE+0x78>
    }
    80015f94:	60a6                	ld	ra,72(sp)
    80015f96:	6161                	addi	sp,sp,80
    80015f98:	8082                	ret

Disassembly of section .text._ZN6kernel7process7process11task_struct9grow_proc17h401c24eda5b4fae0E:

0000000080015f9a <_ZN6kernel7process7process11task_struct9grow_proc17h401c24eda5b4fae0E>:
    pub fn grow_proc(&mut self, count: isize) -> Result<(), &'static str> {
    80015f9a:	7175                	addi	sp,sp,-144
    80015f9c:	e506                	sd	ra,136(sp)
    80015f9e:	f02e                	sd	a1,32(sp)
    80015fa0:	f42a                	sd	a0,40(sp)
    80015fa2:	f0aa                	sd	a0,96(sp)
    80015fa4:	f4ae                	sd	a1,104(sp)
        let mut size = self.size; 
    80015fa6:	6910                	ld	a2,16(a0)
    80015fa8:	e4b2                	sd	a2,72(sp)
        let page_table = unsafe { &mut *self.pagetable };
    80015faa:	6d08                	ld	a0,24(a0)
    80015fac:	f82a                	sd	a0,48(sp)
    80015fae:	f8aa                	sd	a0,112(sp)
    80015fb0:	4505                	li	a0,1
        if count > 0 {
    80015fb2:	00a5cb63          	blt	a1,a0,80015fc8 <_ZN6kernel7process7process11task_struct9grow_proc17h401c24eda5b4fae0E+0x2e>
    80015fb6:	a009                	j	80015fb8 <_ZN6kernel7process7process11task_struct9grow_proc17h401c24eda5b4fae0E+0x1e>
            match unsafe { page_table.uvm_alloc(size, size + count as usize) } {
    80015fb8:	7502                	ld	a0,32(sp)
    80015fba:	65a6                	ld	a1,72(sp)
    80015fbc:	e82e                	sd	a1,16(sp)
    80015fbe:	952e                	add	a0,a0,a1
    80015fc0:	ec2a                	sd	a0,24(sp)
    80015fc2:	08b56b63          	bltu	a0,a1,80016058 <.LBB19_18>
    80015fc6:	a031                	j	80015fd2 <_ZN6kernel7process7process11task_struct9grow_proc17h401c24eda5b4fae0E+0x38>
    80015fc8:	7502                	ld	a0,32(sp)
    80015fca:	4581                	li	a1,0
        } else if count < 0 {
    80015fcc:	04b54163          	blt	a0,a1,8001600e <.LBB19_17+0x1c>
    80015fd0:	a899                	j	80016026 <.LBB19_17+0x34>
            match unsafe { page_table.uvm_alloc(size, size + count as usize) } {
    80015fd2:	6662                	ld	a2,24(sp)
    80015fd4:	65c2                	ld	a1,16(sp)
    80015fd6:	7542                	ld	a0,48(sp)
    80015fd8:	00001097          	auipc	ra,0x1
    80015fdc:	414080e7          	jalr	1044(ra) # 800173ec <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_alloc17h600a2c8e8dc8349aE>
    80015fe0:	e8aa                	sd	a0,80(sp)
    80015fe2:	ecae                	sd	a1,88(sp)
    80015fe4:	a009                	j	80015fe6 <_ZN6kernel7process7process11task_struct9grow_proc17h401c24eda5b4fae0E+0x4c>
                Some(new_size) => {
    80015fe6:	6546                	ld	a0,80(sp)
    80015fe8:	4581                	li	a1,0
    80015fea:	00b50463          	beq	a0,a1,80015ff2 <.LBB19_17>
    80015fee:	a009                	j	80015ff0 <_ZN6kernel7process7process11task_struct9grow_proc17h401c24eda5b4fae0E+0x56>
    80015ff0:	a819                	j	80016006 <.LBB19_17+0x14>

0000000080015ff2 <.LBB19_17>:
                    return Err("Fail to allocate virtual memory for user")
    80015ff2:	00014517          	auipc	a0,0x14
    80015ff6:	d6650513          	addi	a0,a0,-666 # 80029d58 <.L__unnamed_7>
    80015ffa:	fc2a                	sd	a0,56(sp)
    80015ffc:	02800513          	li	a0,40
    80016000:	e0aa                	sd	a0,64(sp)
    }
    80016002:	a0b1                	j	8001604e <.LBB19_17+0x5c>
            match unsafe { page_table.uvm_alloc(size, size + count as usize) } {
    80016004:	0000                	unimp
                Some(new_size) => {
    80016006:	6566                	ld	a0,88(sp)
    80016008:	fcaa                	sd	a0,120(sp)
                    size = new_size;
    8001600a:	e4aa                	sd	a0,72(sp)
        if count > 0 {
    8001600c:	a81d                	j	80016042 <.LBB19_17+0x50>
            let new_size = (size as isize + count) as usize;
    8001600e:	7502                	ld	a0,32(sp)
    80016010:	6626                	ld	a2,72(sp)
    80016012:	00a605b3          	add	a1,a2,a0
    80016016:	e42e                	sd	a1,8(sp)
    80016018:	00c5a5b3          	slt	a1,a1,a2
    8001601c:	00052513          	slti	a0,a0,0
    80016020:	8d2d                	xor	a0,a0,a1
    80016022:	e929                	bnez	a0,80016074 <.LBB19_20>
    80016024:	a011                	j	80016028 <.LBB19_17+0x36>
        } else if count < 0 {
    80016026:	a831                	j	80016042 <.LBB19_17+0x50>
            let new_size = (size as isize + count) as usize;
    80016028:	6622                	ld	a2,8(sp)
    8001602a:	7542                	ld	a0,48(sp)
    8001602c:	e132                	sd	a2,128(sp)
            size = page_table.uvm_dealloc(size, new_size);
    8001602e:	65a6                	ld	a1,72(sp)
    80016030:	00001097          	auipc	ra,0x1
    80016034:	56c080e7          	jalr	1388(ra) # 8001759c <_ZN6kernel6memory7mapping10page_table9PageTable11uvm_dealloc17hf5596dd69dc9e626E>
    80016038:	e02a                	sd	a0,0(sp)
    8001603a:	a009                	j	8001603c <.LBB19_17+0x4a>
    8001603c:	6502                	ld	a0,0(sp)
    8001603e:	e4aa                	sd	a0,72(sp)
        } else if count < 0 {
    80016040:	a009                	j	80016042 <.LBB19_17+0x50>
        self.size = size;
    80016042:	75a2                	ld	a1,40(sp)
    80016044:	6526                	ld	a0,72(sp)
    80016046:	e988                	sd	a0,16(a1)
    80016048:	4501                	li	a0,0
        Ok(())
    8001604a:	fc2a                	sd	a0,56(sp)
    }
    8001604c:	a009                	j	8001604e <.LBB19_17+0x5c>
    8001604e:	7562                	ld	a0,56(sp)
    80016050:	6586                	ld	a1,64(sp)
    80016052:	60aa                	ld	ra,136(sp)
    80016054:	6149                	addi	sp,sp,144
    80016056:	8082                	ret

0000000080016058 <.LBB19_18>:
            match unsafe { page_table.uvm_alloc(size, size + count as usize) } {
    80016058:	00014517          	auipc	a0,0x14
    8001605c:	c4850513          	addi	a0,a0,-952 # 80029ca0 <str.0>

0000000080016060 <.LBB19_19>:
    80016060:	00014617          	auipc	a2,0x14
    80016064:	ce060613          	addi	a2,a2,-800 # 80029d40 <.L__unnamed_8>
    80016068:	45f1                	li	a1,28
    8001606a:	0000c097          	auipc	ra,0xc
    8001606e:	092080e7          	jalr	146(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080016074 <.LBB19_20>:
            let new_size = (size as isize + count) as usize;
    80016074:	00014517          	auipc	a0,0x14
    80016078:	c2c50513          	addi	a0,a0,-980 # 80029ca0 <str.0>

000000008001607c <.LBB19_21>:
    8001607c:	00014617          	auipc	a2,0x14
    80016080:	d0460613          	addi	a2,a2,-764 # 80029d80 <.L__unnamed_9>
    80016084:	45f1                	li	a1,28
    80016086:	0000c097          	auipc	ra,0xc
    8001608a:	076080e7          	jalr	118(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel7process7process11task_struct8yielding17hffa4922f8aee5a94E:

0000000080016090 <_ZN6kernel7process7process11task_struct8yielding17hffa4922f8aee5a94E>:
    pub fn yielding(&mut self) {
    80016090:	7139                	addi	sp,sp,-64
    80016092:	fc06                	sd	ra,56(sp)
    80016094:	e42a                	sd	a0,8(sp)
    80016096:	f02a                	sd	a0,32(sp)
    80016098:	6509                	lui	a0,0x2
    8001609a:	0885059b          	addiw	a1,a0,136

000000008001609e <.LBB20_6>:
    8001609e:	00041517          	auipc	a0,0x41
    800160a2:	50250513          	addi	a0,a0,1282 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    800160a6:	952e                	add	a0,a0,a1
        let guard = unsafe { PROC_MANAGER.tasks_lock.acquire() };
    800160a8:	ffffa097          	auipc	ra,0xffffa
    800160ac:	58c080e7          	jalr	1420(ra) # 80010634 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    800160b0:	85aa                	mv	a1,a0
    800160b2:	e82e                	sd	a1,16(sp)
    800160b4:	f42a                	sd	a0,40(sp)
    800160b6:	a009                	j	800160b8 <.LBB20_6+0x1a>
    800160b8:	6522                	ld	a0,8(sp)
    800160ba:	458d                	li	a1,3
        self.set_state(ProcState::RUNNABLE);
    800160bc:	00b10fa3          	sb	a1,31(sp)
    800160c0:	00000097          	auipc	ra,0x0
    800160c4:	c5e080e7          	jalr	-930(ra) # 80015d1e <_ZN6kernel7process7process11task_struct9set_state17h31b362f9ace47b8fE>
    800160c8:	a009                	j	800160ca <.LBB20_7>

00000000800160ca <.LBB20_7>:
            let my_cpu = CPU_MANAGER.mycpu();
    800160ca:	0004e517          	auipc	a0,0x4e
    800160ce:	07650513          	addi	a0,a0,118 # 80064140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    800160d2:	ffffc097          	auipc	ra,0xffffc
    800160d6:	90c080e7          	jalr	-1780(ra) # 800119de <_ZN6kernel7process3cpu10CPUManager5mycpu17hac5ae6ce2070e7c3E>
    800160da:	85aa                	mv	a1,a0
    800160dc:	e02e                	sd	a1,0(sp)
    800160de:	f82a                	sd	a0,48(sp)
    800160e0:	a009                	j	800160e2 <.LBB20_7+0x18>
            my_cpu.sched();
    800160e2:	6502                	ld	a0,0(sp)
    800160e4:	ffffc097          	auipc	ra,0xffffc
    800160e8:	b6c080e7          	jalr	-1172(ra) # 80011c50 <_ZN6kernel7process3cpu3CPU5sched17h6aec64bf33990cbcE>
    800160ec:	a009                	j	800160ee <.LBB20_7+0x24>
        drop(guard);
    800160ee:	6542                	ld	a0,16(sp)
    800160f0:	00007097          	auipc	ra,0x7
    800160f4:	d7a080e7          	jalr	-646(ra) # 8001ce6a <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    800160f8:	a009                	j	800160fa <.LBB20_7+0x30>
    }
    800160fa:	70e2                	ld	ra,56(sp)
    800160fc:	6121                	addi	sp,sp,64
    800160fe:	8082                	ret

Disassembly of section .text._ZN6kernel7process7process11task_struct8fd_alloc17h2f054cafd5acb7f0E:

0000000080016100 <_ZN6kernel7process7process11task_struct8fd_alloc17h2f054cafd5acb7f0E>:

    /// Find a unallocated fd
    pub fn fd_alloc(&mut self, file: &VFile) -> Result<usize, &'static str>{
    80016100:	7151                	addi	sp,sp,-240
    80016102:	f586                	sd	ra,232(sp)
    80016104:	f832                	sd	a2,48(sp)
    80016106:	fc2e                	sd	a1,56(sp)
    80016108:	e0aa                	sd	a0,64(sp)
    8001610a:	fd2e                	sd	a1,184(sp)
    8001610c:	e1b2                	sd	a2,192(sp)
    8001610e:	1088                	addi	a0,sp,96
        
        let fd = self.find_unallocated_fd()?;
    80016110:	fffff097          	auipc	ra,0xfffff
    80016114:	788080e7          	jalr	1928(ra) # 80015898 <_ZN6kernel7process7process11task_struct19find_unallocated_fd17h9a4fcee1b88c6c86E>
    80016118:	a009                	j	8001611a <_ZN6kernel7process7process11task_struct8fd_alloc17h2f054cafd5acb7f0E+0x1a>
    8001611a:	00a8                	addi	a0,sp,72
    8001611c:	108c                	addi	a1,sp,96
    8001611e:	ffff7097          	auipc	ra,0xffff7
    80016122:	fb4080e7          	jalr	-76(ra) # 8000d0d2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h0dd4a8728df8a7c8E>
    80016126:	a009                	j	80016128 <_ZN6kernel7process7process11task_struct8fd_alloc17h2f054cafd5acb7f0E+0x28>
    80016128:	6526                	ld	a0,72(sp)
    8001612a:	4581                	li	a1,0
    8001612c:	00b50463          	beq	a0,a1,80016134 <_ZN6kernel7process7process11task_struct8fd_alloc17h2f054cafd5acb7f0E+0x34>
    80016130:	a009                	j	80016132 <_ZN6kernel7process7process11task_struct8fd_alloc17h2f054cafd5acb7f0E+0x32>
    80016132:	a819                	j	80016148 <_ZN6kernel7process7process11task_struct8fd_alloc17h2f054cafd5acb7f0E+0x48>
    80016134:	6546                	ld	a0,80(sp)
    80016136:	f42a                	sd	a0,40(sp)
    80016138:	edaa                	sd	a0,216(sp)
    8001613a:	f1aa                	sd	a0,224(sp)
    8001613c:	06400593          	li	a1,100
        self.open_files[fd].replace(Arc::new(file.clone()));
    80016140:	02b56763          	bltu	a0,a1,8001616e <_ZN6kernel7process7process11task_struct8fd_alloc17h2f054cafd5acb7f0E+0x6e>
    80016144:	a049                	j	800161c6 <_ZN6kernel7process7process11task_struct8fd_alloc17h2f054cafd5acb7f0E+0xc6>
        let fd = self.find_unallocated_fd()?;
    80016146:	0000                	unimp
    80016148:	6546                	ld	a0,80(sp)
    8001614a:	65e6                	ld	a1,88(sp)
    8001614c:	e5aa                	sd	a0,200(sp)
    8001614e:	e9ae                	sd	a1,208(sp)
    80016150:	ffff6097          	auipc	ra,0xffff6
    80016154:	874080e7          	jalr	-1932(ra) # 8000b9c4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h6f3e3843c20d184aE>
    80016158:	ec2a                	sd	a0,24(sp)
    8001615a:	f02e                	sd	a1,32(sp)
    8001615c:	a009                	j	8001615e <_ZN6kernel7process7process11task_struct8fd_alloc17h2f054cafd5acb7f0E+0x5e>
    8001615e:	7602                	ld	a2,32(sp)
    80016160:	65e2                	ld	a1,24(sp)
    80016162:	6506                	ld	a0,64(sp)
    80016164:	ffff7097          	auipc	ra,0xffff7
    80016168:	ea0080e7          	jalr	-352(ra) # 8000d004 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h4dd43adfe00292f6E>
    8001616c:	a891                	j	800161c0 <_ZN6kernel7process7process11task_struct8fd_alloc17h2f054cafd5acb7f0E+0xc0>
        self.open_files[fd].replace(Arc::new(file.clone()));
    8001616e:	75c2                	ld	a1,48(sp)
    80016170:	7562                	ld	a0,56(sp)
    80016172:	7622                	ld	a2,40(sp)
    80016174:	060e                	slli	a2,a2,0x3
    80016176:	9532                	add	a0,a0,a2
    80016178:	0a850513          	addi	a0,a0,168
    8001617c:	e82a                	sd	a0,16(sp)
    8001617e:	0108                	addi	a0,sp,128
    80016180:	ffff0097          	auipc	ra,0xffff0
    80016184:	f7a080e7          	jalr	-134(ra) # 800060fa <_ZN62_$LT$kernel..fs..file..VFile$u20$as$u20$core..clone..Clone$GT$5clone17hec76716ecfa94dd4E>
    80016188:	a009                	j	8001618a <_ZN6kernel7process7process11task_struct8fd_alloc17h2f054cafd5acb7f0E+0x8a>
    8001618a:	0108                	addi	a0,sp,128
    8001618c:	fffec097          	auipc	ra,0xfffec
    80016190:	28c080e7          	jalr	652(ra) # 80002418 <_ZN5alloc4sync12Arc$LT$T$GT$3new17h678276cd59118dbbE>
    80016194:	e42a                	sd	a0,8(sp)
    80016196:	a009                	j	80016198 <_ZN6kernel7process7process11task_struct8fd_alloc17h2f054cafd5acb7f0E+0x98>
    80016198:	65a2                	ld	a1,8(sp)
    8001619a:	6542                	ld	a0,16(sp)
    8001619c:	ffff9097          	auipc	ra,0xffff9
    800161a0:	dec080e7          	jalr	-532(ra) # 8000ef88 <_ZN4core6option15Option$LT$T$GT$7replace17hf852e6bb4a32ec9aE>
    800161a4:	fcaa                	sd	a0,120(sp)
    800161a6:	a009                	j	800161a8 <_ZN6kernel7process7process11task_struct8fd_alloc17h2f054cafd5acb7f0E+0xa8>
    800161a8:	18a8                	addi	a0,sp,120
    800161aa:	ffff1097          	auipc	ra,0xffff1
    800161ae:	ee0080e7          	jalr	-288(ra) # 8000708a <_ZN4core3ptr96drop_in_place$LT$core..option..Option$LT$alloc..sync..Arc$LT$kernel..fs..file..VFile$GT$$GT$$GT$17hc79d9c89cd1d7f36E>
    800161b2:	a009                	j	800161b4 <_ZN6kernel7process7process11task_struct8fd_alloc17h2f054cafd5acb7f0E+0xb4>
        Ok(fd)       
    800161b4:	6586                	ld	a1,64(sp)
    800161b6:	7522                	ld	a0,40(sp)
    800161b8:	e588                	sd	a0,8(a1)
    800161ba:	4501                	li	a0,0
    800161bc:	e188                	sd	a0,0(a1)
    } 
    800161be:	a009                	j	800161c0 <_ZN6kernel7process7process11task_struct8fd_alloc17h2f054cafd5acb7f0E+0xc0>
    800161c0:	70ae                	ld	ra,232(sp)
    800161c2:	616d                	addi	sp,sp,240
    800161c4:	8082                	ret
        self.open_files[fd].replace(Arc::new(file.clone()));
    800161c6:	7522                	ld	a0,40(sp)

00000000800161c8 <.LBB21_15>:
    800161c8:	00014617          	auipc	a2,0x14
    800161cc:	bd060613          	addi	a2,a2,-1072 # 80029d98 <.L__unnamed_10>
    800161d0:	06400593          	li	a1,100
    800161d4:	0000c097          	auipc	ra,0xc
    800161d8:	f54080e7          	jalr	-172(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel7process7process11task_struct4fork17h46aa3163aa049020E:

00000000800161de <_ZN6kernel7process7process11task_struct4fork17h46aa3163aa049020E>:

    pub fn fork(&mut self) -> Option<&mut Self> {
    800161de:	7165                	addi	sp,sp,-400
    800161e0:	e706                	sd	ra,392(sp)
    800161e2:	f8aa                	sd	a0,112(sp)
    800161e4:	eaaa                	sd	a0,336(sp)
        // 从表中获取未被分配的子进程
        if let Some(child_proc) = ProcManager::alloc_proc()  {
    800161e6:	ffff7097          	auipc	ra,0xffff7
    800161ea:	382080e7          	jalr	898(ra) # 8000d568 <_ZN6kernel7process7manager11ProcManager10alloc_proc17h18aef4c1178ef690E>
    800161ee:	e12a                	sd	a0,128(sp)
    800161f0:	a009                	j	800161f2 <_ZN6kernel7process7process11task_struct4fork17h46aa3163aa049020E+0x14>
    800161f2:	650a                	ld	a0,128(sp)
    800161f4:	4581                	li	a1,0
    800161f6:	02b51363          	bne	a0,a1,8001621c <.LBB22_24+0x18>
    800161fa:	a009                	j	800161fc <.LBB22_23>

00000000800161fc <.LBB22_23>:
            drop(guard);

            println!("Self pid is {}, child pid is {}", self.pid, child_proc.pid);
            Some(child_proc)
        }else {
            println!("[Kernel] fork: None");
    800161fc:	00014597          	auipc	a1,0x14
    80016200:	bcc58593          	addi	a1,a1,-1076 # 80029dc8 <.L__unnamed_11>

0000000080016204 <.LBB22_24>:
    80016204:	00014697          	auipc	a3,0x14
    80016208:	bd468693          	addi	a3,a3,-1068 # 80029dd8 <.L__unnamed_13>
    8001620c:	1208                	addi	a0,sp,288
    8001620e:	4605                	li	a2,1
    80016210:	4701                	li	a4,0
    80016212:	fffef097          	auipc	ra,0xfffef
    80016216:	222080e7          	jalr	546(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8001621a:	a499                	j	80016460 <.LBB22_32+0x2c>
        if let Some(child_proc) = ProcManager::alloc_proc()  {
    8001621c:	7546                	ld	a0,112(sp)
    8001621e:	658a                	ld	a1,128(sp)
    80016220:	f0ae                	sd	a1,96(sp)
    80016222:	eeae                	sd	a1,344(sp)
            if unsafe{ self.pagetable.as_mut().unwrap().uvm_copy(
    80016224:	6d08                	ld	a0,24(a0)
    80016226:	ffff7097          	auipc	ra,0xffff7
    8001622a:	8c2080e7          	jalr	-1854(ra) # 8000cae8 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17hfc3d5eeea9dab8e4E>
    8001622e:	f4aa                	sd	a0,104(sp)
    80016230:	a009                	j	80016232 <.LBB22_24+0x2e>
    80016232:	7526                	ld	a0,104(sp)

0000000080016234 <.LBB22_25>:
    80016234:	00014597          	auipc	a1,0x14
    80016238:	ba458593          	addi	a1,a1,-1116 # 80029dd8 <.L__unnamed_13>
    8001623c:	ffff9097          	auipc	ra,0xffff9
    80016240:	904080e7          	jalr	-1788(ra) # 8000eb40 <_ZN4core6option15Option$LT$T$GT$6unwrap17h2b22556a60663957E>
    80016244:	ecaa                	sd	a0,88(sp)
    80016246:	a009                	j	80016248 <.LBB22_25+0x14>
                child_proc.pagetable.as_mut().unwrap(), 
    80016248:	7506                	ld	a0,96(sp)
    8001624a:	6d08                	ld	a0,24(a0)
    8001624c:	ffff7097          	auipc	ra,0xffff7
    80016250:	89c080e7          	jalr	-1892(ra) # 8000cae8 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17hfc3d5eeea9dab8e4E>
    80016254:	e8aa                	sd	a0,80(sp)
    80016256:	a009                	j	80016258 <.LBB22_25+0x24>
    80016258:	6546                	ld	a0,80(sp)

000000008001625a <.LBB22_26>:
    8001625a:	00014597          	auipc	a1,0x14
    8001625e:	b9658593          	addi	a1,a1,-1130 # 80029df0 <.L__unnamed_14>
    80016262:	ffff9097          	auipc	ra,0xffff9
    80016266:	8de080e7          	jalr	-1826(ra) # 8000eb40 <_ZN4core6option15Option$LT$T$GT$6unwrap17h2b22556a60663957E>
    8001626a:	e4aa                	sd	a0,72(sp)
    8001626c:	a009                	j	8001626e <.LBB22_26+0x14>
                self.size
    8001626e:	65a6                	ld	a1,72(sp)
    80016270:	6566                	ld	a0,88(sp)
    80016272:	7646                	ld	a2,112(sp)
    80016274:	6a10                	ld	a2,16(a2)
            if unsafe{ self.pagetable.as_mut().unwrap().uvm_copy(
    80016276:	00001097          	auipc	ra,0x1
    8001627a:	5a6080e7          	jalr	1446(ra) # 8001781c <_ZN6kernel6memory7mapping10page_table9PageTable8uvm_copy17h09757305193d69e4E>
    8001627e:	e52a                	sd	a0,136(sp)
    80016280:	e92e                	sd	a1,144(sp)
    80016282:	a009                	j	80016284 <.LBB22_26+0x2a>
    80016284:	0128                	addi	a0,sp,136
    80016286:	ffff7097          	auipc	ra,0xffff7
    8001628a:	a30080e7          	jalr	-1488(ra) # 8000ccb6 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h304118d236359d80E>
    8001628e:	e0aa                	sd	a0,64(sp)
    80016290:	a009                	j	80016292 <.LBB22_26+0x38>
    80016292:	6506                	ld	a0,64(sp)
    80016294:	4581                	li	a1,0
    80016296:	02b50263          	beq	a0,a1,800162ba <.LBB22_28+0x16>
    8001629a:	a009                	j	8001629c <.LBB22_27>

000000008001629c <.LBB22_27>:
                panic!("fork: Fail to copy data from parent process.")
    8001629c:	00014517          	auipc	a0,0x14
    800162a0:	b6c50513          	addi	a0,a0,-1172 # 80029e08 <.L__unnamed_15>

00000000800162a4 <.LBB22_28>:
    800162a4:	00014617          	auipc	a2,0x14
    800162a8:	b9460613          	addi	a2,a2,-1132 # 80029e38 <.L__unnamed_16>
    800162ac:	02c00593          	li	a1,44
    800162b0:	0000c097          	auipc	ra,0xc
    800162b4:	e4c080e7          	jalr	-436(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    800162b8:	0000                	unimp
            let ptf = self.trapframe as *const Trapframe;
    800162ba:	75c6                	ld	a1,112(sp)
    800162bc:	7506                	ld	a0,96(sp)
    800162be:	718c                	ld	a1,32(a1)
    800162c0:	f2ae                	sd	a1,352(sp)
            let child_tf = unsafe{ &mut *child_proc.trapframe };
    800162c2:	7108                	ld	a0,32(a0)
    800162c4:	fc2a                	sd	a0,56(sp)
    800162c6:	f6aa                	sd	a0,360(sp)
    800162c8:	12000613          	li	a2,288
            unsafe{ copy_nonoverlapping(ptf, child_tf, 1); }
    800162cc:	0000f097          	auipc	ra,0xf
    800162d0:	d6e080e7          	jalr	-658(ra) # 8002503a <memcpy>
    800162d4:	76e2                	ld	a3,56(sp)
    800162d6:	75c6                	ld	a1,112(sp)
    800162d8:	7506                	ld	a0,96(sp)
    800162da:	4601                	li	a2,0
            child_tf.a0 = 0;
    800162dc:	fab0                	sd	a2,112(a3)
            child_proc.open_files.clone_from(&self.open_files);
    800162de:	0a850513          	addi	a0,a0,168
    800162e2:	0a858593          	addi	a1,a1,168
    800162e6:	ffff8097          	auipc	ra,0xffff8
    800162ea:	0a0080e7          	jalr	160(ra) # 8000e386 <_ZN4core5clone5Clone10clone_from17h2b52fdc155b58fc3E>
    800162ee:	a009                	j	800162f0 <.LBB22_28+0x4c>
            child_proc.cwd.clone_from(&self.cwd);
    800162f0:	75c6                	ld	a1,112(sp)
    800162f2:	7506                	ld	a0,96(sp)
    800162f4:	3c850513          	addi	a0,a0,968
    800162f8:	3c858593          	addi	a1,a1,968
    800162fc:	ffff9097          	auipc	ra,0xffff9
    80016300:	ce0080e7          	jalr	-800(ra) # 8000efdc <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$10clone_from17hf5f00fe6cb298a0dE>
    80016304:	a009                	j	80016306 <.LBB22_28+0x62>
            child_proc.name = self.name;
    80016306:	75c6                	ld	a1,112(sp)
    80016308:	7506                	ld	a0,96(sp)
    8001630a:	4005c683          	lbu	a3,1024(a1)
    8001630e:	4015c603          	lbu	a2,1025(a1)
    80016312:	0622                	slli	a2,a2,0x8
    80016314:	8ed1                	or	a3,a3,a2
    80016316:	4025c703          	lbu	a4,1026(a1)
    8001631a:	4035c603          	lbu	a2,1027(a1)
    8001631e:	0622                	slli	a2,a2,0x8
    80016320:	8e59                	or	a2,a2,a4
    80016322:	0642                	slli	a2,a2,0x10
    80016324:	8ed1                	or	a3,a3,a2
    80016326:	4045c703          	lbu	a4,1028(a1)
    8001632a:	4055c603          	lbu	a2,1029(a1)
    8001632e:	0622                	slli	a2,a2,0x8
    80016330:	8f51                	or	a4,a4,a2
    80016332:	4065c783          	lbu	a5,1030(a1)
    80016336:	4075c603          	lbu	a2,1031(a1)
    8001633a:	0622                	slli	a2,a2,0x8
    8001633c:	8e5d                	or	a2,a2,a5
    8001633e:	0642                	slli	a2,a2,0x10
    80016340:	8e59                	or	a2,a2,a4
    80016342:	1602                	slli	a2,a2,0x20
    80016344:	8e55                	or	a2,a2,a3
    80016346:	f132                	sd	a2,160(sp)
    80016348:	3f85c683          	lbu	a3,1016(a1)
    8001634c:	3f95c603          	lbu	a2,1017(a1)
    80016350:	0622                	slli	a2,a2,0x8
    80016352:	8ed1                	or	a3,a3,a2
    80016354:	3fa5c703          	lbu	a4,1018(a1)
    80016358:	3fb5c603          	lbu	a2,1019(a1)
    8001635c:	0622                	slli	a2,a2,0x8
    8001635e:	8e59                	or	a2,a2,a4
    80016360:	0642                	slli	a2,a2,0x10
    80016362:	8e55                	or	a2,a2,a3
    80016364:	3fc5c703          	lbu	a4,1020(a1)
    80016368:	3fd5c683          	lbu	a3,1021(a1)
    8001636c:	06a2                	slli	a3,a3,0x8
    8001636e:	8ed9                	or	a3,a3,a4
    80016370:	3fe5c703          	lbu	a4,1022(a1)
    80016374:	3ff5c583          	lbu	a1,1023(a1)
    80016378:	05a2                	slli	a1,a1,0x8
    8001637a:	8dd9                	or	a1,a1,a4
    8001637c:	05c2                	slli	a1,a1,0x10
    8001637e:	8dd5                	or	a1,a1,a3
    80016380:	1582                	slli	a1,a1,0x20
    80016382:	8dd1                	or	a1,a1,a2
    80016384:	ed2e                	sd	a1,152(sp)
    80016386:	3f850513          	addi	a0,a0,1016
    8001638a:	092c                	addi	a1,sp,152
    8001638c:	4641                	li	a2,16
    8001638e:	0000f097          	auipc	ra,0xf
    80016392:	cac080e7          	jalr	-852(ra) # 8002503a <memcpy>
    80016396:	7586                	ld	a1,96(sp)
            child_proc.size = self.size;
    80016398:	7546                	ld	a0,112(sp)
    8001639a:	6910                	ld	a2,16(a0)
    8001639c:	e990                	sd	a2,16(a1)
            child_proc.parent = Some(self as *mut task_struct);
    8001639e:	f92a                	sd	a0,176(sp)
    800163a0:	4605                	li	a2,1
    800163a2:	f532                	sd	a2,168(sp)
    800163a4:	edd0                	sd	a2,152(a1)
    800163a6:	f1c8                	sd	a0,160(a1)
    800163a8:	6509                	lui	a0,0x2
    800163aa:	0885059b          	addiw	a1,a0,136

00000000800163ae <.LBB22_29>:
    800163ae:	00041517          	auipc	a0,0x41
    800163b2:	1f250513          	addi	a0,a0,498 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    800163b6:	952e                	add	a0,a0,a1
            let guard = unsafe { PROC_MANAGER.tasks_lock.acquire() };
    800163b8:	ffffa097          	auipc	ra,0xffffa
    800163bc:	27c080e7          	jalr	636(ra) # 80010634 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    800163c0:	85aa                	mv	a1,a0
    800163c2:	f82e                	sd	a1,48(sp)
    800163c4:	faaa                	sd	a0,368(sp)
    800163c6:	a009                	j	800163c8 <.LBB22_29+0x1a>
    800163c8:	7542                	ld	a0,48(sp)
    800163ca:	7606                	ld	a2,96(sp)
    800163cc:	458d                	li	a1,3
            child_proc.state = ProcState::RUNNABLE;
    800163ce:	0ab10fa3          	sb	a1,191(sp)
    800163d2:	40b60423          	sb	a1,1032(a2)
            drop(guard);
    800163d6:	00007097          	auipc	ra,0x7
    800163da:	a94080e7          	jalr	-1388(ra) # 8001ce6a <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    800163de:	a009                	j	800163e0 <.LBB22_29+0x32>
            println!("Self pid is {}, child pid is {}", self.pid, child_proc.pid);
    800163e0:	7586                	ld	a1,96(sp)
    800163e2:	7546                	ld	a0,112(sp)
    800163e4:	3f050513          	addi	a0,a0,1008
    800163e8:	3f058593          	addi	a1,a1,1008
    800163ec:	ec2e                	sd	a1,24(sp)
    800163ee:	ea2a                	sd	a0,272(sp)
    800163f0:	ee2e                	sd	a1,280(sp)
    800163f2:	feaa                	sd	a0,376(sp)
    800163f4:	e32e                	sd	a1,384(sp)

00000000800163f6 <.LBB22_30>:
    800163f6:	0000e597          	auipc	a1,0xe
    800163fa:	46258593          	addi	a1,a1,1122 # 80024858 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h9c6c4af1578f7c29E>
    800163fe:	00009097          	auipc	ra,0x9
    80016402:	128080e7          	jalr	296(ra) # 8001f526 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    80016406:	f02a                	sd	a0,32(sp)
    80016408:	f42e                	sd	a1,40(sp)
    8001640a:	a009                	j	8001640c <.LBB22_30+0x16>
    8001640c:	6562                	ld	a0,24(sp)

000000008001640e <.LBB22_31>:
    8001640e:	0000e597          	auipc	a1,0xe
    80016412:	44a58593          	addi	a1,a1,1098 # 80024858 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h9c6c4af1578f7c29E>
    80016416:	00009097          	auipc	ra,0x9
    8001641a:	110080e7          	jalr	272(ra) # 8001f526 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    8001641e:	e42a                	sd	a0,8(sp)
    80016420:	e82e                	sd	a1,16(sp)
    80016422:	a009                	j	80016424 <.LBB22_31+0x16>
    80016424:	6542                	ld	a0,16(sp)
    80016426:	65a2                	ld	a1,8(sp)
    80016428:	7622                	ld	a2,40(sp)
    8001642a:	7682                	ld	a3,32(sp)
    8001642c:	f9b6                	sd	a3,240(sp)
    8001642e:	fdb2                	sd	a2,248(sp)
    80016430:	e22e                	sd	a1,256(sp)
    80016432:	e62a                	sd	a0,264(sp)

0000000080016434 <.LBB22_32>:
    80016434:	00014597          	auipc	a1,0x14
    80016438:	a3c58593          	addi	a1,a1,-1476 # 80029e70 <.L__unnamed_17>
    8001643c:	0188                	addi	a0,sp,192
    8001643e:	460d                	li	a2,3
    80016440:	1994                	addi	a3,sp,240
    80016442:	4709                	li	a4,2
    80016444:	fffef097          	auipc	ra,0xfffef
    80016448:	ff0080e7          	jalr	-16(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8001644c:	a009                	j	8001644e <.LBB22_32+0x1a>
    8001644e:	0188                	addi	a0,sp,192
    80016450:	00007097          	auipc	ra,0x7
    80016454:	760080e7          	jalr	1888(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    80016458:	a009                	j	8001645a <.LBB22_32+0x26>
            Some(child_proc)
    8001645a:	7506                	ld	a0,96(sp)
    8001645c:	fcaa                	sd	a0,120(sp)
        if let Some(child_proc) = ProcManager::alloc_proc()  {
    8001645e:	a811                	j	80016472 <.LBB22_32+0x3e>
    80016460:	1208                	addi	a0,sp,288
            println!("[Kernel] fork: None");
    80016462:	00007097          	auipc	ra,0x7
    80016466:	74e080e7          	jalr	1870(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8001646a:	a009                	j	8001646c <.LBB22_32+0x38>
    8001646c:	4501                	li	a0,0
            None
    8001646e:	fcaa                	sd	a0,120(sp)
        if let Some(child_proc) = ProcManager::alloc_proc()  {
    80016470:	a009                	j	80016472 <.LBB22_32+0x3e>
        }
    }
    80016472:	7566                	ld	a0,120(sp)
    80016474:	60ba                	ld	ra,392(sp)
    80016476:	6159                	addi	sp,sp,400
    80016478:	8082                	ret

Disassembly of section .text._ZN6kernel7process6thread55_$LT$impl$u20$kernel..process..process..task_struct$GT$11threadclone17h0da9ae13d0d85d5bE:

000000008001647a <_ZN6kernel7process6thread55_$LT$impl$u20$kernel..process..process..task_struct$GT$11threadclone17h0da9ae13d0d85d5bE>:
use crate::{process::*, arch::riscv::layout::PGSIZE};

impl task_struct {
    pub fn threadclone(&mut self, func: usize, ustack: usize) -> usize {
    8001647a:	dc010113          	addi	sp,sp,-576
    8001647e:	22113c23          	sd	ra,568(sp)
    80016482:	f12a                	sd	a0,160(sp)
    80016484:	f92e                	sd	a1,176(sp)
    80016486:	fd32                	sd	a2,184(sp)
    80016488:	efaa                	sd	a0,472(sp)

        let thread = ProcManager::alloc_thread().unwrap();
    8001648a:	ffff7097          	auipc	ra,0xffff7
    8001648e:	1f8080e7          	jalr	504(ra) # 8000d682 <_ZN6kernel7process7manager11ProcManager12alloc_thread17hfa981750c8094e17E>
    80016492:	f52a                	sd	a0,168(sp)
    80016494:	a009                	j	80016496 <_ZN6kernel7process6thread55_$LT$impl$u20$kernel..process..process..task_struct$GT$11threadclone17h0da9ae13d0d85d5bE+0x1c>
    80016496:	752a                	ld	a0,168(sp)

0000000080016498 <.LBB23_19>:
    80016498:	00014597          	auipc	a1,0x14
    8001649c:	a2058593          	addi	a1,a1,-1504 # 80029eb8 <.L__unnamed_18>
    800164a0:	ffff9097          	auipc	ra,0xffff9
    800164a4:	81c080e7          	jalr	-2020(ra) # 8000ecbc <_ZN4core6option15Option$LT$T$GT$6unwrap17h81f0c84c54a80648E>
    800164a8:	85aa                	mv	a1,a0
    800164aa:	ed2e                	sd	a1,152(sp)
    800164ac:	f3aa                	sd	a0,480(sp)
    800164ae:	a009                	j	800164b0 <.LBB23_19+0x18>
        thread.parent = Some(self as *mut task_struct);
    800164b0:	758a                	ld	a1,160(sp)
    800164b2:	656a                	ld	a0,152(sp)
    800164b4:	e5ae                	sd	a1,200(sp)
    800164b6:	4605                	li	a2,1
    800164b8:	e1b2                	sd	a2,192(sp)
    800164ba:	ed50                	sd	a2,152(a0)
    800164bc:	f14c                	sd	a1,160(a0)
        
        // let pgt_p = self.pagetable.as_mut().unwrap();
        // let pgt_t = thread.pagetable.as_mut().unwrap();

        // pgt_p.copy_pagetable(pgt_t);
        thread.pagetable = self.pagetable;
    800164be:	6d90                	ld	a2,24(a1)
    800164c0:	ed10                	sd	a2,24(a0)

        thread.open_files.clone_from(&self.open_files);
    800164c2:	0a850513          	addi	a0,a0,168
    800164c6:	0a858593          	addi	a1,a1,168
    800164ca:	ffff8097          	auipc	ra,0xffff8
    800164ce:	ebc080e7          	jalr	-324(ra) # 8000e386 <_ZN4core5clone5Clone10clone_from17h2b52fdc155b58fc3E>
    800164d2:	a009                	j	800164d4 <.LBB23_19+0x3c>
        thread.cwd.clone_from(&self.cwd);
    800164d4:	758a                	ld	a1,160(sp)
    800164d6:	656a                	ld	a0,152(sp)
    800164d8:	3c850513          	addi	a0,a0,968
    800164dc:	3c858593          	addi	a1,a1,968
    800164e0:	ffff9097          	auipc	ra,0xffff9
    800164e4:	afc080e7          	jalr	-1284(ra) # 8000efdc <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$10clone_from17hf5f00fe6cb298a0dE>
    800164e8:	a009                	j	800164ea <.LBB23_19+0x52>
        // unsafe { (*thread.pagetable).print_pagetable() };
        // println!("++++++++++++++++++++++");
        // while (true){

        // }
        println!("In threadclone pid is {} the child is {} func is {} ustack is {}", self.pid, thread.pid, func, ustack);
    800164ea:	65ea                	ld	a1,152(sp)
    800164ec:	750a                	ld	a0,160(sp)
    800164ee:	3f050513          	addi	a0,a0,1008
    800164f2:	3f058693          	addi	a3,a1,1008
    800164f6:	f8b6                	sd	a3,112(sp)
    800164f8:	e2aa                	sd	a0,320(sp)
    800164fa:	e6b6                	sd	a3,328(sp)
    800164fc:	1910                	addi	a2,sp,176
    800164fe:	fcb2                	sd	a2,120(sp)
    80016500:	eab2                	sd	a2,336(sp)
    80016502:	192c                	addi	a1,sp,184
    80016504:	e12e                	sd	a1,128(sp)
    80016506:	eeae                	sd	a1,344(sp)
    80016508:	f7aa                	sd	a0,488(sp)
    8001650a:	fbb6                	sd	a3,496(sp)
    8001650c:	ffb2                	sd	a2,504(sp)
    8001650e:	20b13023          	sd	a1,512(sp)

0000000080016512 <.LBB23_20>:
    80016512:	0000e597          	auipc	a1,0xe
    80016516:	34658593          	addi	a1,a1,838 # 80024858 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h9c6c4af1578f7c29E>
    8001651a:	00009097          	auipc	ra,0x9
    8001651e:	00c080e7          	jalr	12(ra) # 8001f526 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    80016522:	e52a                	sd	a0,136(sp)
    80016524:	e92e                	sd	a1,144(sp)
    80016526:	a009                	j	80016528 <.LBB23_20+0x16>
    80016528:	7546                	ld	a0,112(sp)

000000008001652a <.LBB23_21>:
    8001652a:	0000e597          	auipc	a1,0xe
    8001652e:	32e58593          	addi	a1,a1,814 # 80024858 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h9c6c4af1578f7c29E>
    80016532:	00009097          	auipc	ra,0x9
    80016536:	ff4080e7          	jalr	-12(ra) # 8001f526 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    8001653a:	f0aa                	sd	a0,96(sp)
    8001653c:	f4ae                	sd	a1,104(sp)
    8001653e:	a009                	j	80016540 <.LBB23_21+0x16>
    80016540:	7566                	ld	a0,120(sp)

0000000080016542 <.LBB23_22>:
    80016542:	0000e597          	auipc	a1,0xe
    80016546:	31658593          	addi	a1,a1,790 # 80024858 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h9c6c4af1578f7c29E>
    8001654a:	00009097          	auipc	ra,0x9
    8001654e:	fdc080e7          	jalr	-36(ra) # 8001f526 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    80016552:	e8aa                	sd	a0,80(sp)
    80016554:	ecae                	sd	a1,88(sp)
    80016556:	a009                	j	80016558 <.LBB23_22+0x16>
    80016558:	650a                	ld	a0,128(sp)

000000008001655a <.LBB23_23>:
    8001655a:	0000e597          	auipc	a1,0xe
    8001655e:	2fe58593          	addi	a1,a1,766 # 80024858 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h9c6c4af1578f7c29E>
    80016562:	00009097          	auipc	ra,0x9
    80016566:	fc4080e7          	jalr	-60(ra) # 8001f526 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    8001656a:	e0aa                	sd	a0,64(sp)
    8001656c:	e4ae                	sd	a1,72(sp)
    8001656e:	a009                	j	80016570 <.LBB23_23+0x16>
    80016570:	6526                	ld	a0,72(sp)
    80016572:	6586                	ld	a1,64(sp)
    80016574:	6666                	ld	a2,88(sp)
    80016576:	66c6                	ld	a3,80(sp)
    80016578:	7726                	ld	a4,104(sp)
    8001657a:	7786                	ld	a5,96(sp)
    8001657c:	684a                	ld	a6,144(sp)
    8001657e:	68aa                	ld	a7,136(sp)
    80016580:	e246                	sd	a7,256(sp)
    80016582:	e642                	sd	a6,264(sp)
    80016584:	ea3e                	sd	a5,272(sp)
    80016586:	ee3a                	sd	a4,280(sp)
    80016588:	f236                	sd	a3,288(sp)
    8001658a:	f632                	sd	a2,296(sp)
    8001658c:	fa2e                	sd	a1,304(sp)
    8001658e:	fe2a                	sd	a0,312(sp)

0000000080016590 <.LBB23_24>:
    80016590:	00014597          	auipc	a1,0x14
    80016594:	97858593          	addi	a1,a1,-1672 # 80029f08 <.L__unnamed_19>
    80016598:	0988                	addi	a0,sp,208
    8001659a:	4615                	li	a2,5
    8001659c:	0214                	addi	a3,sp,256
    8001659e:	4711                	li	a4,4
    800165a0:	fffef097          	auipc	ra,0xfffef
    800165a4:	e94080e7          	jalr	-364(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    800165a8:	a009                	j	800165aa <.LBB23_24+0x1a>
    800165aa:	0988                	addi	a0,sp,208
    800165ac:	00007097          	auipc	ra,0x7
    800165b0:	604080e7          	jalr	1540(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    800165b4:	a009                	j	800165b6 <.LBB23_24+0x26>
        thread.size = self.size;
    800165b6:	656a                	ld	a0,152(sp)
    800165b8:	758a                	ld	a1,160(sp)
    800165ba:	6990                	ld	a2,16(a1)
    800165bc:	e910                	sd	a2,16(a0)
        thread.name = self.name;    //to do
    800165be:	4005c683          	lbu	a3,1024(a1)
    800165c2:	4015c603          	lbu	a2,1025(a1)
    800165c6:	0622                	slli	a2,a2,0x8
    800165c8:	8ed1                	or	a3,a3,a2
    800165ca:	4025c703          	lbu	a4,1026(a1)
    800165ce:	4035c603          	lbu	a2,1027(a1)
    800165d2:	0622                	slli	a2,a2,0x8
    800165d4:	8e59                	or	a2,a2,a4
    800165d6:	0642                	slli	a2,a2,0x10
    800165d8:	8ed1                	or	a3,a3,a2
    800165da:	4045c703          	lbu	a4,1028(a1)
    800165de:	4055c603          	lbu	a2,1029(a1)
    800165e2:	0622                	slli	a2,a2,0x8
    800165e4:	8f51                	or	a4,a4,a2
    800165e6:	4065c783          	lbu	a5,1030(a1)
    800165ea:	4075c603          	lbu	a2,1031(a1)
    800165ee:	0622                	slli	a2,a2,0x8
    800165f0:	8e5d                	or	a2,a2,a5
    800165f2:	0642                	slli	a2,a2,0x10
    800165f4:	8e59                	or	a2,a2,a4
    800165f6:	1602                	slli	a2,a2,0x20
    800165f8:	8e55                	or	a2,a2,a3
    800165fa:	f6b2                	sd	a2,360(sp)
    800165fc:	3f85c683          	lbu	a3,1016(a1)
    80016600:	3f95c603          	lbu	a2,1017(a1)
    80016604:	0622                	slli	a2,a2,0x8
    80016606:	8ed1                	or	a3,a3,a2
    80016608:	3fa5c703          	lbu	a4,1018(a1)
    8001660c:	3fb5c603          	lbu	a2,1019(a1)
    80016610:	0622                	slli	a2,a2,0x8
    80016612:	8e59                	or	a2,a2,a4
    80016614:	0642                	slli	a2,a2,0x10
    80016616:	8e55                	or	a2,a2,a3
    80016618:	3fc5c703          	lbu	a4,1020(a1)
    8001661c:	3fd5c683          	lbu	a3,1021(a1)
    80016620:	06a2                	slli	a3,a3,0x8
    80016622:	8ed9                	or	a3,a3,a4
    80016624:	3fe5c703          	lbu	a4,1022(a1)
    80016628:	3ff5c583          	lbu	a1,1023(a1)
    8001662c:	05a2                	slli	a1,a1,0x8
    8001662e:	8dd9                	or	a1,a1,a4
    80016630:	05c2                	slli	a1,a1,0x10
    80016632:	8dd5                	or	a1,a1,a3
    80016634:	1582                	slli	a1,a1,0x20
    80016636:	8dd1                	or	a1,a1,a2
    80016638:	f2ae                	sd	a1,352(sp)
    8001663a:	3f850513          	addi	a0,a0,1016
    8001663e:	128c                	addi	a1,sp,352
    80016640:	4641                	li	a2,16
    80016642:	0000f097          	auipc	ra,0xf
    80016646:	9f8080e7          	jalr	-1544(ra) # 8002503a <memcpy>
    8001664a:	758a                	ld	a1,160(sp)
        thread.thread_ustack = ustack;
    8001664c:	656a                	ld	a0,152(sp)
    8001664e:	766a                	ld	a2,184(sp)
    80016650:	e510                	sd	a2,8(a0)
        
        let ptf = self.trapframe as *const Trapframe;
    80016652:	718c                	ld	a1,32(a1)
    80016654:	20b13423          	sd	a1,520(sp)
        let ttf = unsafe{ &mut *thread.trapframe };
    80016658:	7108                	ld	a0,32(a0)
    8001665a:	f82a                	sd	a0,48(sp)
    8001665c:	20a13823          	sd	a0,528(sp)
    80016660:	12000613          	li	a2,288
        unsafe{ copy_nonoverlapping(ptf, ttf, 1); }
    80016664:	0000f097          	auipc	ra,0xf
    80016668:	9d6080e7          	jalr	-1578(ra) # 8002503a <memcpy>
    8001666c:	75c2                	ld	a1,48(sp)
        // ttf.a0 = 0;
       
        ttf.epc = func;
    8001666e:	754a                	ld	a0,176(sp)
    80016670:	ed88                	sd	a0,24(a1)
       
        ttf.sp = ustack + PGSIZE;
    80016672:	75ea                	ld	a1,184(sp)
    80016674:	6505                	lui	a0,0x1
    80016676:	952e                	add	a0,a0,a1
    80016678:	fc2a                	sd	a0,56(sp)
    8001667a:	0cb56963          	bltu	a0,a1,8001674c <.LBB23_29>
    8001667e:	a009                	j	80016680 <.LBB23_24+0xf0>
    80016680:	7562                	ld	a0,56(sp)
    80016682:	75c2                	ld	a1,48(sp)
    80016684:	f988                	sd	a0,48(a1)
    80016686:	6509                	lui	a0,0x2
    80016688:	0885059b          	addiw	a1,a0,136

000000008001668c <.LBB23_25>:
    8001668c:	00041517          	auipc	a0,0x41
    80016690:	f1450513          	addi	a0,a0,-236 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    80016694:	952e                	add	a0,a0,a1
        // ttf.s0 = ttf.sp;
        //file  

        let guard = unsafe { PROC_MANAGER.tasks_lock.acquire() };
    80016696:	ffffa097          	auipc	ra,0xffffa
    8001669a:	f9e080e7          	jalr	-98(ra) # 80010634 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    8001669e:	85aa                	mv	a1,a0
    800166a0:	f42e                	sd	a1,40(sp)
    800166a2:	20a13c23          	sd	a0,536(sp)
    800166a6:	a009                	j	800166a8 <.LBB23_25+0x1c>
    800166a8:	7522                	ld	a0,40(sp)
    800166aa:	666a                	ld	a2,152(sp)
    800166ac:	458d                	li	a1,3
        thread.state = ProcState::RUNNABLE;
    800166ae:	16b10ba3          	sb	a1,375(sp)
    800166b2:	40b60423          	sb	a1,1032(a2)
        drop(guard);
    800166b6:	00006097          	auipc	ra,0x6
    800166ba:	7b4080e7          	jalr	1972(ra) # 8001ce6a <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    800166be:	a009                	j	800166c0 <.LBB23_25+0x34>

       
        let tf = unsafe{ &mut *thread.trapframe };
    800166c0:	656a                	ld	a0,152(sp)
    800166c2:	710c                	ld	a1,32(a0)
    800166c4:	22b13023          	sd	a1,544(sp)
        println!("In threadclone pid {} epc {}", thread.pid, tf.epc);
    800166c8:	3f050513          	addi	a0,a0,1008
    800166cc:	05e1                	addi	a1,a1,24
    800166ce:	e82e                	sd	a1,16(sp)
    800166d0:	e7aa                	sd	a0,456(sp)
    800166d2:	ebae                	sd	a1,464(sp)
    800166d4:	22a13423          	sd	a0,552(sp)
    800166d8:	22b13823          	sd	a1,560(sp)

00000000800166dc <.LBB23_26>:
    800166dc:	0000e597          	auipc	a1,0xe
    800166e0:	17c58593          	addi	a1,a1,380 # 80024858 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h9c6c4af1578f7c29E>
    800166e4:	00009097          	auipc	ra,0x9
    800166e8:	e42080e7          	jalr	-446(ra) # 8001f526 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    800166ec:	ec2a                	sd	a0,24(sp)
    800166ee:	f02e                	sd	a1,32(sp)
    800166f0:	a009                	j	800166f2 <.LBB23_26+0x16>
    800166f2:	6542                	ld	a0,16(sp)

00000000800166f4 <.LBB23_27>:
    800166f4:	0000e597          	auipc	a1,0xe
    800166f8:	16458593          	addi	a1,a1,356 # 80024858 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h9c6c4af1578f7c29E>
    800166fc:	00009097          	auipc	ra,0x9
    80016700:	e2a080e7          	jalr	-470(ra) # 8001f526 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    80016704:	e02a                	sd	a0,0(sp)
    80016706:	e42e                	sd	a1,8(sp)
    80016708:	a009                	j	8001670a <.LBB23_27+0x16>
    8001670a:	6522                	ld	a0,8(sp)
    8001670c:	6582                	ld	a1,0(sp)
    8001670e:	7602                	ld	a2,32(sp)
    80016710:	66e2                	ld	a3,24(sp)
    80016712:	f736                	sd	a3,424(sp)
    80016714:	fb32                	sd	a2,432(sp)
    80016716:	ff2e                	sd	a1,440(sp)
    80016718:	e3aa                	sd	a0,448(sp)

000000008001671a <.LBB23_28>:
    8001671a:	00014597          	auipc	a1,0x14
    8001671e:	86e58593          	addi	a1,a1,-1938 # 80029f88 <.L__unnamed_20>
    80016722:	1aa8                	addi	a0,sp,376
    80016724:	460d                	li	a2,3
    80016726:	1334                	addi	a3,sp,424
    80016728:	4709                	li	a4,2
    8001672a:	fffef097          	auipc	ra,0xfffef
    8001672e:	d0a080e7          	jalr	-758(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80016732:	a009                	j	80016734 <.LBB23_28+0x1a>
    80016734:	1aa8                	addi	a0,sp,376
    80016736:	00007097          	auipc	ra,0x7
    8001673a:	47a080e7          	jalr	1146(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8001673e:	a009                	j	80016740 <.LBB23_28+0x26>
    80016740:	4501                	li	a0,0
        0
    }
    80016742:	23813083          	ld	ra,568(sp)
    80016746:	24010113          	addi	sp,sp,576
    8001674a:	8082                	ret

000000008001674c <.LBB23_29>:
        ttf.sp = ustack + PGSIZE;
    8001674c:	00013517          	auipc	a0,0x13
    80016750:	55450513          	addi	a0,a0,1364 # 80029ca0 <str.0>

0000000080016754 <.LBB23_30>:
    80016754:	00014617          	auipc	a2,0x14
    80016758:	80460613          	addi	a2,a2,-2044 # 80029f58 <.L__unnamed_21>
    8001675c:	45f1                	li	a1,28
    8001675e:	0000c097          	auipc	ra,0xc
    80016762:	99e080e7          	jalr	-1634(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN72_$LT$kernel..process..process..ProcState$u20$as$u20$core..fmt..Debug$GT$3fmt17hf525681892d4cccaE:

0000000080016768 <_ZN72_$LT$kernel..process..process..ProcState$u20$as$u20$core..fmt..Debug$GT$3fmt17hf525681892d4cccaE>:
#[derive(PartialEq, Copy, Clone, Debug)]
    80016768:	712d                	addi	sp,sp,-288
    8001676a:	ee06                	sd	ra,280(sp)
    8001676c:	e42e                	sd	a1,8(sp)
    8001676e:	e9aa                	sd	a0,208(sp)
    80016770:	edae                	sd	a1,216(sp)
    80016772:	f02a                	sd	a0,32(sp)
    80016774:	00054503          	lbu	a0,0(a0)
    80016778:	e82a                	sd	a0,16(sp)
    8001677a:	6542                	ld	a0,16(sp)
    8001677c:	050e                	slli	a0,a0,0x3

000000008001677e <.LBB24_18>:
    8001677e:	00013597          	auipc	a1,0x13
    80016782:	4ba58593          	addi	a1,a1,1210 # 80029c38 <.LJTI24_0>
    80016786:	952e                	add	a0,a0,a1
    80016788:	6108                	ld	a0,0(a0)
    8001678a:	8502                	jr	a0

000000008001678c <.LBB24_2>:
    8001678c:	65a2                	ld	a1,8(sp)

000000008001678e <.LBB24_19>:
    8001678e:	00014617          	auipc	a2,0x14
    80016792:	82a60613          	addi	a2,a2,-2006 # 80029fb8 <.L__unnamed_22>
    80016796:	1928                	addi	a0,sp,184
    80016798:	46a5                	li	a3,9
    8001679a:	0000d097          	auipc	ra,0xd
    8001679e:	8e0080e7          	jalr	-1824(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    800167a2:	a201                	j	800168a2 <.LBB24_25+0x28>
	...

00000000800167a6 <.LBB24_4>:
    800167a6:	65a2                	ld	a1,8(sp)

00000000800167a8 <.LBB24_20>:
    800167a8:	00014617          	auipc	a2,0x14
    800167ac:	82660613          	addi	a2,a2,-2010 # 80029fce <.L__unnamed_23>
    800167b0:	1028                	addi	a0,sp,40
    800167b2:	4699                	li	a3,6
    800167b4:	0000d097          	auipc	ra,0xd
    800167b8:	8c6080e7          	jalr	-1850(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    800167bc:	a009                	j	800167be <.LBB24_20+0x16>
    800167be:	1028                	addi	a0,sp,40
    800167c0:	ea2a                	sd	a0,272(sp)
    800167c2:	0000c097          	auipc	ra,0xc
    800167c6:	f10080e7          	jalr	-240(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    800167ca:	00a10fa3          	sb	a0,31(sp)
    800167ce:	a0dd                	j	800168b4 <.LBB24_25+0x3a>

00000000800167d0 <.LBB24_6>:
    800167d0:	65a2                	ld	a1,8(sp)

00000000800167d2 <.LBB24_21>:
    800167d2:	00010617          	auipc	a2,0x10
    800167d6:	e1260613          	addi	a2,a2,-494 # 800265e4 <.L__unnamed_16+0x3c>
    800167da:	0088                	addi	a0,sp,64
    800167dc:	4691                	li	a3,4
    800167de:	0000d097          	auipc	ra,0xd
    800167e2:	89c080e7          	jalr	-1892(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    800167e6:	a009                	j	800167e8 <.LBB24_21+0x16>
    800167e8:	0088                	addi	a0,sp,64
    800167ea:	e62a                	sd	a0,264(sp)
    800167ec:	0000c097          	auipc	ra,0xc
    800167f0:	ee6080e7          	jalr	-282(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    800167f4:	00a10fa3          	sb	a0,31(sp)
    800167f8:	a875                	j	800168b4 <.LBB24_25+0x3a>

00000000800167fa <.LBB24_8>:
    800167fa:	65a2                	ld	a1,8(sp)

00000000800167fc <.LBB24_22>:
    800167fc:	00010617          	auipc	a2,0x10
    80016800:	ff460613          	addi	a2,a2,-12 # 800267f0 <.L__unnamed_6+0xb8>
    80016804:	08a8                	addi	a0,sp,88
    80016806:	46a1                	li	a3,8
    80016808:	0000d097          	auipc	ra,0xd
    8001680c:	872080e7          	jalr	-1934(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    80016810:	a009                	j	80016812 <.LBB24_22+0x16>
    80016812:	08a8                	addi	a0,sp,88
    80016814:	e22a                	sd	a0,256(sp)
    80016816:	0000c097          	auipc	ra,0xc
    8001681a:	ebc080e7          	jalr	-324(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    8001681e:	00a10fa3          	sb	a0,31(sp)
    80016822:	a849                	j	800168b4 <.LBB24_25+0x3a>

0000000080016824 <.LBB24_10>:
    80016824:	65a2                	ld	a1,8(sp)

0000000080016826 <.LBB24_23>:
    80016826:	00010617          	auipc	a2,0x10
    8001682a:	ff260613          	addi	a2,a2,-14 # 80026818 <.L__unnamed_6+0xe0>
    8001682e:	1888                	addi	a0,sp,112
    80016830:	46a1                	li	a3,8
    80016832:	0000d097          	auipc	ra,0xd
    80016836:	848080e7          	jalr	-1976(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    8001683a:	a009                	j	8001683c <.LBB24_23+0x16>
    8001683c:	1888                	addi	a0,sp,112
    8001683e:	fdaa                	sd	a0,248(sp)
    80016840:	0000c097          	auipc	ra,0xc
    80016844:	e92080e7          	jalr	-366(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    80016848:	00a10fa3          	sb	a0,31(sp)
    8001684c:	a0a5                	j	800168b4 <.LBB24_25+0x3a>

000000008001684e <.LBB24_12>:
    8001684e:	65a2                	ld	a1,8(sp)

0000000080016850 <.LBB24_24>:
    80016850:	00013617          	auipc	a2,0x13
    80016854:	77760613          	addi	a2,a2,1911 # 80029fc7 <.L__unnamed_27>
    80016858:	0128                	addi	a0,sp,136
    8001685a:	469d                	li	a3,7
    8001685c:	0000d097          	auipc	ra,0xd
    80016860:	81e080e7          	jalr	-2018(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    80016864:	a009                	j	80016866 <.LBB24_24+0x16>
    80016866:	0128                	addi	a0,sp,136
    80016868:	f9aa                	sd	a0,240(sp)
    8001686a:	0000c097          	auipc	ra,0xc
    8001686e:	e68080e7          	jalr	-408(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    80016872:	00a10fa3          	sb	a0,31(sp)
    80016876:	a83d                	j	800168b4 <.LBB24_25+0x3a>

0000000080016878 <.LBB24_14>:
    80016878:	65a2                	ld	a1,8(sp)

000000008001687a <.LBB24_25>:
    8001687a:	00013617          	auipc	a2,0x13
    8001687e:	74760613          	addi	a2,a2,1863 # 80029fc1 <.L__unnamed_28>
    80016882:	1108                	addi	a0,sp,160
    80016884:	4699                	li	a3,6
    80016886:	0000c097          	auipc	ra,0xc
    8001688a:	7f4080e7          	jalr	2036(ra) # 8002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>
    8001688e:	a009                	j	80016890 <.LBB24_25+0x16>
    80016890:	1108                	addi	a0,sp,160
    80016892:	f5aa                	sd	a0,232(sp)
    80016894:	0000c097          	auipc	ra,0xc
    80016898:	e3e080e7          	jalr	-450(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    8001689c:	00a10fa3          	sb	a0,31(sp)
    800168a0:	a811                	j	800168b4 <.LBB24_25+0x3a>
    800168a2:	1928                	addi	a0,sp,184
    800168a4:	f1aa                	sd	a0,224(sp)
    800168a6:	0000c097          	auipc	ra,0xc
    800168aa:	e2c080e7          	jalr	-468(ra) # 800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>
    800168ae:	00a10fa3          	sb	a0,31(sp)
    800168b2:	a009                	j	800168b4 <.LBB24_25+0x3a>
    800168b4:	01f14503          	lbu	a0,31(sp)
    800168b8:	60f2                	ld	ra,280(sp)
    800168ba:	6115                	addi	sp,sp,288
    800168bc:	8082                	ret

Disassembly of section .text._ZN76_$LT$kernel..process..process..ProcState$u20$as$u20$core..cmp..PartialEq$GT$2eq17hc7c8c767a75b25feE:

00000000800168be <_ZN76_$LT$kernel..process..process..ProcState$u20$as$u20$core..cmp..PartialEq$GT$2eq17hc7c8c767a75b25feE>:
    800168be:	7179                	addi	sp,sp,-48
    800168c0:	e82a                	sd	a0,16(sp)
    800168c2:	ec2e                	sd	a1,24(sp)
    800168c4:	00054503          	lbu	a0,0(a0)
    800168c8:	f02a                	sd	a0,32(sp)
    800168ca:	0005c583          	lbu	a1,0(a1)
    800168ce:	f42e                	sd	a1,40(sp)
    800168d0:	00b51763          	bne	a0,a1,800168de <_ZN76_$LT$kernel..process..process..ProcState$u20$as$u20$core..cmp..PartialEq$GT$2eq17hc7c8c767a75b25feE+0x20>
    800168d4:	a009                	j	800168d6 <_ZN76_$LT$kernel..process..process..ProcState$u20$as$u20$core..cmp..PartialEq$GT$2eq17hc7c8c767a75b25feE+0x18>
    800168d6:	4505                	li	a0,1
    800168d8:	00a107a3          	sb	a0,15(sp)
    800168dc:	a029                	j	800168e6 <_ZN76_$LT$kernel..process..process..ProcState$u20$as$u20$core..cmp..PartialEq$GT$2eq17hc7c8c767a75b25feE+0x28>
    800168de:	4501                	li	a0,0
    800168e0:	00a107a3          	sb	a0,15(sp)
    800168e4:	a009                	j	800168e6 <_ZN76_$LT$kernel..process..process..ProcState$u20$as$u20$core..cmp..PartialEq$GT$2eq17hc7c8c767a75b25feE+0x28>
    800168e6:	00f14503          	lbu	a0,15(sp)
    800168ea:	8905                	andi	a0,a0,1
    800168ec:	4581                	li	a1,0
    800168ee:	00b50763          	beq	a0,a1,800168fc <_ZN76_$LT$kernel..process..process..ProcState$u20$as$u20$core..cmp..PartialEq$GT$2eq17hc7c8c767a75b25feE+0x3e>
    800168f2:	a009                	j	800168f4 <_ZN76_$LT$kernel..process..process..ProcState$u20$as$u20$core..cmp..PartialEq$GT$2eq17hc7c8c767a75b25feE+0x36>
    800168f4:	4505                	li	a0,1
    800168f6:	00a10723          	sb	a0,14(sp)
    800168fa:	a029                	j	80016904 <_ZN76_$LT$kernel..process..process..ProcState$u20$as$u20$core..cmp..PartialEq$GT$2eq17hc7c8c767a75b25feE+0x46>
    800168fc:	4501                	li	a0,0
    800168fe:	00a10723          	sb	a0,14(sp)
    80016902:	a009                	j	80016904 <_ZN76_$LT$kernel..process..process..ProcState$u20$as$u20$core..cmp..PartialEq$GT$2eq17hc7c8c767a75b25feE+0x46>
    80016904:	00e14503          	lbu	a0,14(sp)
    80016908:	6145                	addi	sp,sp,48
    8001690a:	8082                	ret

Disassembly of section .text._ZN132_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$alloc..vec..spec_extend..SpecExtend$LT$$RF$T$C$core..slice..iter..Iter$LT$T$GT$$GT$$GT$11spec_extend17hbbfc32722f2025bdE:

000000008001690c <_ZN132_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$alloc..vec..spec_extend..SpecExtend$LT$$RF$T$C$core..slice..iter..Iter$LT$T$GT$$GT$$GT$11spec_extend17hbbfc32722f2025bdE>:

impl<'a, T: 'a, A: Allocator + 'a> SpecExtend<&'a T, slice::Iter<'a, T>> for Vec<T, A>
where
    T: Copy,
{
    fn spec_extend(&mut self, iterator: slice::Iter<'a, T>) {
    8001690c:	715d                	addi	sp,sp,-80
    8001690e:	e486                	sd	ra,72(sp)
    80016910:	e42a                	sd	a0,8(sp)
    80016912:	f02e                	sd	a1,32(sp)
    80016914:	f432                	sd	a2,40(sp)
    80016916:	f82a                	sd	a0,48(sp)
    80016918:	1008                	addi	a0,sp,32
        let slice = iterator.as_slice();
    8001691a:	ffff4097          	auipc	ra,0xffff4
    8001691e:	3e4080e7          	jalr	996(ra) # 8000acfe <_ZN4core5slice4iter13Iter$LT$T$GT$8as_slice17hddf2d5a72581ec8fE>
    80016922:	862a                	mv	a2,a0
    80016924:	e832                	sd	a2,16(sp)
    80016926:	862e                	mv	a2,a1
    80016928:	ec32                	sd	a2,24(sp)
    8001692a:	fc2a                	sd	a0,56(sp)
    8001692c:	e0ae                	sd	a1,64(sp)
    8001692e:	a009                	j	80016930 <_ZN132_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$alloc..vec..spec_extend..SpecExtend$LT$$RF$T$C$core..slice..iter..Iter$LT$T$GT$$GT$$GT$11spec_extend17hbbfc32722f2025bdE+0x24>
        unsafe { self.append_elements(slice) };
    80016930:	6662                	ld	a2,24(sp)
    80016932:	65c2                	ld	a1,16(sp)
    80016934:	6522                	ld	a0,8(sp)
    80016936:	00000097          	auipc	ra,0x0
    8001693a:	054080e7          	jalr	84(ra) # 8001698a <_ZN5alloc3vec16Vec$LT$T$C$A$GT$15append_elements17h8b8f278f0e0e7850E>
    8001693e:	a009                	j	80016940 <_ZN132_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$alloc..vec..spec_extend..SpecExtend$LT$$RF$T$C$core..slice..iter..Iter$LT$T$GT$$GT$$GT$11spec_extend17hbbfc32722f2025bdE+0x34>
    }
    80016940:	60a6                	ld	ra,72(sp)
    80016942:	6161                	addi	sp,sp,80
    80016944:	8082                	ret

Disassembly of section .text._ZN5alloc3vec12Vec$LT$T$GT$3new17hfad72d6537ee9e7bE:

0000000080016946 <_ZN5alloc3vec12Vec$LT$T$GT$3new17hfad72d6537ee9e7bE>:
    pub const fn new() -> Self {
    80016946:	85aa                	mv	a1,a0

0000000080016948 <.LBB1_1>:
    80016948:	0000f517          	auipc	a0,0xf
    8001694c:	cc850513          	addi	a0,a0,-824 # 80025610 <.L__unnamed_35+0x48>
        Vec { buf: RawVec::NEW, len: 0 }
    80016950:	6110                	ld	a2,0(a0)
    80016952:	6508                	ld	a0,8(a0)
    80016954:	e190                	sd	a2,0(a1)
    80016956:	e588                	sd	a0,8(a1)
    80016958:	4501                	li	a0,0
    8001695a:	e988                	sd	a0,16(a1)
    }
    8001695c:	8082                	ret

Disassembly of section .text._ZN5alloc3vec16Vec$LT$T$C$A$GT$10as_mut_ptr17h2d512420264161fdE:

000000008001695e <_ZN5alloc3vec16Vec$LT$T$C$A$GT$10as_mut_ptr17h2d512420264161fdE>:
    pub fn as_mut_ptr(&mut self) -> *mut T {
    8001695e:	1101                	addi	sp,sp,-32
    80016960:	ec06                	sd	ra,24(sp)
    80016962:	e42a                	sd	a0,8(sp)
        let ptr = self.buf.ptr();
    80016964:	fffec097          	auipc	ra,0xfffec
    80016968:	314080e7          	jalr	788(ra) # 80002c78 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17h887fa3437b1e26b7E>
    8001696c:	85aa                	mv	a1,a0
    8001696e:	e02e                	sd	a1,0(sp)
    80016970:	e82a                	sd	a0,16(sp)
    80016972:	a009                	j	80016974 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$10as_mut_ptr17h2d512420264161fdE+0x16>
            assume(!ptr.is_null());
    80016974:	6502                	ld	a0,0(sp)
    80016976:	00009097          	auipc	ra,0x9
    8001697a:	c92080e7          	jalr	-878(ra) # 8001f608 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hba478e65ea6353f9E>
    8001697e:	a009                	j	80016980 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$10as_mut_ptr17h2d512420264161fdE+0x22>
    80016980:	a009                	j	80016982 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$10as_mut_ptr17h2d512420264161fdE+0x24>
    }
    80016982:	6502                	ld	a0,0(sp)
    80016984:	60e2                	ld	ra,24(sp)
    80016986:	6105                	addi	sp,sp,32
    80016988:	8082                	ret

Disassembly of section .text._ZN5alloc3vec16Vec$LT$T$C$A$GT$15append_elements17h8b8f278f0e0e7850E:

000000008001698a <_ZN5alloc3vec16Vec$LT$T$C$A$GT$15append_elements17h8b8f278f0e0e7850E>:
    unsafe fn append_elements(&mut self, other: *const [T]) {
    8001698a:	7159                	addi	sp,sp,-112
    8001698c:	f486                	sd	ra,104(sp)
    8001698e:	f032                	sd	a2,32(sp)
    80016990:	862e                	mv	a2,a1
    80016992:	7582                	ld	a1,32(sp)
    80016994:	f432                	sd	a2,40(sp)
    80016996:	862a                	mv	a2,a0
    80016998:	7522                	ld	a0,40(sp)
    8001699a:	f832                	sd	a2,48(sp)
    8001699c:	e0b2                	sd	a2,64(sp)
    8001699e:	e4aa                	sd	a0,72(sp)
    800169a0:	e8ae                	sd	a1,80(sp)
        let count = unsafe { (*other).len() };
    800169a2:	00009097          	auipc	ra,0x9
    800169a6:	ab8080e7          	jalr	-1352(ra) # 8001f45a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hb06ce83b043493f3E>
    800169aa:	85aa                	mv	a1,a0
    800169ac:	fc2e                	sd	a1,56(sp)
    800169ae:	ecaa                	sd	a0,88(sp)
    800169b0:	a009                	j	800169b2 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$15append_elements17h8b8f278f0e0e7850E+0x28>
        self.reserve(count);
    800169b2:	75e2                	ld	a1,56(sp)
    800169b4:	7542                	ld	a0,48(sp)
    800169b6:	00000097          	auipc	ra,0x0
    800169ba:	178080e7          	jalr	376(ra) # 80016b2e <_ZN5alloc3vec16Vec$LT$T$C$A$GT$7reserve17h4180bbdadc64f26bE>
    800169be:	a009                	j	800169c0 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$15append_elements17h8b8f278f0e0e7850E+0x36>
        let len = self.len();
    800169c0:	7542                	ld	a0,48(sp)
    800169c2:	00000097          	auipc	ra,0x0
    800169c6:	0bc080e7          	jalr	188(ra) # 80016a7e <_ZN5alloc3vec16Vec$LT$T$C$A$GT$3len17h0f145fd3397d7265E>
    800169ca:	85aa                	mv	a1,a0
    800169cc:	ec2e                	sd	a1,24(sp)
    800169ce:	f0aa                	sd	a0,96(sp)
    800169d0:	a009                	j	800169d2 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$15append_elements17h8b8f278f0e0e7850E+0x48>
        unsafe { ptr::copy_nonoverlapping(other as *const T, self.as_mut_ptr().add(len), count) };
    800169d2:	7542                	ld	a0,48(sp)
    800169d4:	75a2                	ld	a1,40(sp)
    800169d6:	e42e                	sd	a1,8(sp)
    800169d8:	00000097          	auipc	ra,0x0
    800169dc:	f86080e7          	jalr	-122(ra) # 8001695e <_ZN5alloc3vec16Vec$LT$T$C$A$GT$10as_mut_ptr17h2d512420264161fdE>
    800169e0:	e82a                	sd	a0,16(sp)
    800169e2:	a009                	j	800169e4 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$15append_elements17h8b8f278f0e0e7850E+0x5a>
    800169e4:	65e2                	ld	a1,24(sp)
    800169e6:	6542                	ld	a0,16(sp)
    800169e8:	00009097          	auipc	ra,0x9
    800169ec:	b9c080e7          	jalr	-1124(ra) # 8001f584 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1d203f00cca684c1E>
    800169f0:	e02a                	sd	a0,0(sp)
    800169f2:	a009                	j	800169f4 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$15append_elements17h8b8f278f0e0e7850E+0x6a>
    800169f4:	7662                	ld	a2,56(sp)
    800169f6:	65a2                	ld	a1,8(sp)
    800169f8:	6502                	ld	a0,0(sp)
    800169fa:	0000e097          	auipc	ra,0xe
    800169fe:	640080e7          	jalr	1600(ra) # 8002503a <memcpy>
    80016a02:	7662                	ld	a2,56(sp)
    80016a04:	75c2                	ld	a1,48(sp)
        self.len += count;
    80016a06:	6988                	ld	a0,16(a1)
    80016a08:	9532                	add	a0,a0,a2
    80016a0a:	e988                	sd	a0,16(a1)
    }
    80016a0c:	70a6                	ld	ra,104(sp)
    80016a0e:	6165                	addi	sp,sp,112
    80016a10:	8082                	ret

Disassembly of section .text._ZN5alloc3vec16Vec$LT$T$C$A$GT$16with_capacity_in17hb324b531b744c1e4E:

0000000080016a12 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$16with_capacity_in17hb324b531b744c1e4E>:
    pub fn with_capacity_in(capacity: usize, alloc: A) -> Self {
    80016a12:	7139                	addi	sp,sp,-64
    80016a14:	fc06                	sd	ra,56(sp)
    80016a16:	e42e                	sd	a1,8(sp)
    80016a18:	85aa                	mv	a1,a0
    80016a1a:	6522                	ld	a0,8(sp)
    80016a1c:	e82e                	sd	a1,16(sp)
    80016a1e:	f42a                	sd	a0,40(sp)
        Vec { buf: RawVec::with_capacity_in(capacity, alloc), len: 0 }
    80016a20:	fffec097          	auipc	ra,0xfffec
    80016a24:	1e0080e7          	jalr	480(ra) # 80002c00 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$16with_capacity_in17hb06502444696164dE>
    80016a28:	ec2a                	sd	a0,24(sp)
    80016a2a:	f02e                	sd	a1,32(sp)
    80016a2c:	a009                	j	80016a2e <_ZN5alloc3vec16Vec$LT$T$C$A$GT$16with_capacity_in17hb324b531b744c1e4E+0x1c>
    80016a2e:	65c2                	ld	a1,16(sp)
    80016a30:	7502                	ld	a0,32(sp)
    80016a32:	6662                	ld	a2,24(sp)
    80016a34:	e190                	sd	a2,0(a1)
    80016a36:	e588                	sd	a0,8(a1)
    80016a38:	4501                	li	a0,0
    80016a3a:	e988                	sd	a0,16(a1)
    }
    80016a3c:	70e2                	ld	ra,56(sp)
    80016a3e:	6121                	addi	sp,sp,64
    80016a40:	8082                	ret

Disassembly of section .text._ZN5alloc3vec16Vec$LT$T$C$A$GT$17extend_from_slice17hce4d1786c1c715b0E:

0000000080016a42 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$17extend_from_slice17hce4d1786c1c715b0E>:
    pub fn extend_from_slice(&mut self, other: &[T]) {
    80016a42:	715d                	addi	sp,sp,-80
    80016a44:	e486                	sd	ra,72(sp)
    80016a46:	e432                	sd	a2,8(sp)
    80016a48:	862e                	mv	a2,a1
    80016a4a:	65a2                	ld	a1,8(sp)
    80016a4c:	e832                	sd	a2,16(sp)
    80016a4e:	862a                	mv	a2,a0
    80016a50:	6542                	ld	a0,16(sp)
    80016a52:	ec32                	sd	a2,24(sp)
    80016a54:	f832                	sd	a2,48(sp)
    80016a56:	fc2a                	sd	a0,56(sp)
    80016a58:	e0ae                	sd	a1,64(sp)
        self.spec_extend(other.iter())
    80016a5a:	00009097          	auipc	ra,0x9
    80016a5e:	a28080e7          	jalr	-1496(ra) # 8001f482 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h8f308ca2182773f1E>
    80016a62:	f02a                	sd	a0,32(sp)
    80016a64:	f42e                	sd	a1,40(sp)
    80016a66:	a009                	j	80016a68 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$17extend_from_slice17hce4d1786c1c715b0E+0x26>
    80016a68:	7622                	ld	a2,40(sp)
    80016a6a:	7582                	ld	a1,32(sp)
    80016a6c:	6562                	ld	a0,24(sp)
    80016a6e:	00000097          	auipc	ra,0x0
    80016a72:	e9e080e7          	jalr	-354(ra) # 8001690c <_ZN132_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$alloc..vec..spec_extend..SpecExtend$LT$$RF$T$C$core..slice..iter..Iter$LT$T$GT$$GT$$GT$11spec_extend17hbbfc32722f2025bdE>
    80016a76:	a009                	j	80016a78 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$17extend_from_slice17hce4d1786c1c715b0E+0x36>
    }
    80016a78:	60a6                	ld	ra,72(sp)
    80016a7a:	6161                	addi	sp,sp,80
    80016a7c:	8082                	ret

Disassembly of section .text._ZN5alloc3vec16Vec$LT$T$C$A$GT$3len17h0f145fd3397d7265E:

0000000080016a7e <_ZN5alloc3vec16Vec$LT$T$C$A$GT$3len17h0f145fd3397d7265E>:
    pub fn len(&self) -> usize {
    80016a7e:	1141                	addi	sp,sp,-16
    80016a80:	e42a                	sd	a0,8(sp)
        self.len
    80016a82:	6908                	ld	a0,16(a0)
    }
    80016a84:	0141                	addi	sp,sp,16
    80016a86:	8082                	ret

Disassembly of section .text._ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h5c7a5a6a9c3b7171E:

0000000080016a88 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h5c7a5a6a9c3b7171E>:
    pub fn push(&mut self, value: T) {
    80016a88:	711d                	addi	sp,sp,-96
    80016a8a:	ec86                	sd	ra,88(sp)
    80016a8c:	e82a                	sd	a0,16(sp)
    80016a8e:	862e                	mv	a2,a1
    80016a90:	ec32                	sd	a2,24(sp)
    80016a92:	f82a                	sd	a0,48(sp)
    80016a94:	02b10fa3          	sb	a1,63(sp)
        if self.len == self.buf.capacity() {
    80016a98:	690c                	ld	a1,16(a0)
    80016a9a:	f02e                	sd	a1,32(sp)
    80016a9c:	e8aa                	sd	a0,80(sp)
        if mem::size_of::<T>() == 0 { usize::MAX } else { self.cap }
    80016a9e:	6508                	ld	a0,8(a0)
    80016aa0:	f42a                	sd	a0,40(sp)
    80016aa2:	e4aa                	sd	a0,72(sp)
    80016aa4:	a009                	j	80016aa6 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h5c7a5a6a9c3b7171E+0x1e>
    80016aa6:	7502                	ld	a0,32(sp)
    80016aa8:	75a2                	ld	a1,40(sp)
    80016aaa:	00b51a63          	bne	a0,a1,80016abe <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h5c7a5a6a9c3b7171E+0x36>
    80016aae:	a009                	j	80016ab0 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h5c7a5a6a9c3b7171E+0x28>
            self.reserve(1);
    80016ab0:	6542                	ld	a0,16(sp)
    80016ab2:	4585                	li	a1,1
    80016ab4:	00000097          	auipc	ra,0x0
    80016ab8:	07a080e7          	jalr	122(ra) # 80016b2e <_ZN5alloc3vec16Vec$LT$T$C$A$GT$7reserve17h4180bbdadc64f26bE>
    80016abc:	a011                	j	80016ac0 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h5c7a5a6a9c3b7171E+0x38>
        if self.len == self.buf.capacity() {
    80016abe:	a011                	j	80016ac2 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h5c7a5a6a9c3b7171E+0x3a>
    80016ac0:	a009                	j	80016ac2 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h5c7a5a6a9c3b7171E+0x3a>
            let end = self.as_mut_ptr().add(self.len);
    80016ac2:	6542                	ld	a0,16(sp)
    80016ac4:	00000097          	auipc	ra,0x0
    80016ac8:	e9a080e7          	jalr	-358(ra) # 8001695e <_ZN5alloc3vec16Vec$LT$T$C$A$GT$10as_mut_ptr17h2d512420264161fdE>
    80016acc:	e42a                	sd	a0,8(sp)
    80016ace:	a009                	j	80016ad0 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h5c7a5a6a9c3b7171E+0x48>
    80016ad0:	6522                	ld	a0,8(sp)
    80016ad2:	65c2                	ld	a1,16(sp)
    80016ad4:	698c                	ld	a1,16(a1)
    80016ad6:	00009097          	auipc	ra,0x9
    80016ada:	aae080e7          	jalr	-1362(ra) # 8001f584 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1d203f00cca684c1E>
    80016ade:	85aa                	mv	a1,a0
    80016ae0:	e02e                	sd	a1,0(sp)
    80016ae2:	e0aa                	sd	a0,64(sp)
    80016ae4:	a009                	j	80016ae6 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h5c7a5a6a9c3b7171E+0x5e>
            ptr::write(end, value);
    80016ae6:	65e2                	ld	a1,24(sp)
    80016ae8:	6502                	ld	a0,0(sp)
    80016aea:	00002097          	auipc	ra,0x2
    80016aee:	c26080e7          	jalr	-986(ra) # 80018710 <_ZN4core3ptr5write17h0fb1ba83ac2984c7E>
    80016af2:	a009                	j	80016af4 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h5c7a5a6a9c3b7171E+0x6c>
            self.len += 1;
    80016af4:	65c2                	ld	a1,16(sp)
    80016af6:	6988                	ld	a0,16(a1)
    80016af8:	0505                	addi	a0,a0,1
    80016afa:	e988                	sd	a0,16(a1)
    }
    80016afc:	60e6                	ld	ra,88(sp)
    80016afe:	6125                	addi	sp,sp,96
    80016b00:	8082                	ret

Disassembly of section .text._ZN5alloc3vec16Vec$LT$T$C$A$GT$6as_ptr17h07b3ea85571460a0E:

0000000080016b02 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$6as_ptr17h07b3ea85571460a0E>:
    pub fn as_ptr(&self) -> *const T {
    80016b02:	1101                	addi	sp,sp,-32
    80016b04:	ec06                	sd	ra,24(sp)
    80016b06:	e42a                	sd	a0,8(sp)
        let ptr = self.buf.ptr();
    80016b08:	fffec097          	auipc	ra,0xfffec
    80016b0c:	170080e7          	jalr	368(ra) # 80002c78 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$3ptr17h887fa3437b1e26b7E>
    80016b10:	85aa                	mv	a1,a0
    80016b12:	e02e                	sd	a1,0(sp)
    80016b14:	e82a                	sd	a0,16(sp)
    80016b16:	a009                	j	80016b18 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$6as_ptr17h07b3ea85571460a0E+0x16>
            assume(!ptr.is_null());
    80016b18:	6502                	ld	a0,0(sp)
    80016b1a:	00009097          	auipc	ra,0x9
    80016b1e:	aee080e7          	jalr	-1298(ra) # 8001f608 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hba478e65ea6353f9E>
    80016b22:	a009                	j	80016b24 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$6as_ptr17h07b3ea85571460a0E+0x22>
    80016b24:	a009                	j	80016b26 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$6as_ptr17h07b3ea85571460a0E+0x24>
    }
    80016b26:	6502                	ld	a0,0(sp)
    80016b28:	60e2                	ld	ra,24(sp)
    80016b2a:	6105                	addi	sp,sp,32
    80016b2c:	8082                	ret

Disassembly of section .text._ZN5alloc3vec16Vec$LT$T$C$A$GT$7reserve17h4180bbdadc64f26bE:

0000000080016b2e <_ZN5alloc3vec16Vec$LT$T$C$A$GT$7reserve17h4180bbdadc64f26bE>:
    pub fn reserve(&mut self, additional: usize) {
    80016b2e:	1101                	addi	sp,sp,-32
    80016b30:	ec06                	sd	ra,24(sp)
    80016b32:	862e                	mv	a2,a1
    80016b34:	e42a                	sd	a0,8(sp)
    80016b36:	e832                	sd	a2,16(sp)
        self.buf.reserve(self.len, additional);
    80016b38:	690c                	ld	a1,16(a0)
    80016b3a:	fffec097          	auipc	ra,0xfffec
    80016b3e:	178080e7          	jalr	376(ra) # 80002cb2 <_ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$7reserve17hb5cb67f1b8f5bd01E>
    80016b42:	a009                	j	80016b44 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$7reserve17h4180bbdadc64f26bE+0x16>
    }
    80016b44:	60e2                	ld	ra,24(sp)
    80016b46:	6105                	addi	sp,sp,32
    80016b48:	8082                	ret

Disassembly of section .text._ZN5alloc3vec16Vec$LT$T$C$A$GT$7set_len17h69219cf242af5cbaE:

0000000080016b4a <_ZN5alloc3vec16Vec$LT$T$C$A$GT$7set_len17h69219cf242af5cbaE>:
    pub unsafe fn set_len(&mut self, new_len: usize) {
    80016b4a:	1141                	addi	sp,sp,-16
    80016b4c:	e02a                	sd	a0,0(sp)
    80016b4e:	e42e                	sd	a1,8(sp)
        self.len = new_len;
    80016b50:	e90c                	sd	a1,16(a0)
    }
    80016b52:	0141                	addi	sp,sp,16
    80016b54:	8082                	ret

Disassembly of section .text._ZN5alloc3vec9from_elem17h254506728307fd13E:

0000000080016b56 <_ZN5alloc3vec9from_elem17h254506728307fd13E>:
pub fn from_elem<T: Clone>(elem: T, n: usize) -> Vec<T> {
    80016b56:	1101                	addi	sp,sp,-32
    80016b58:	ec06                	sd	ra,24(sp)
    80016b5a:	00b107a3          	sb	a1,15(sp)
    80016b5e:	e832                	sd	a2,16(sp)
    <T as SpecFromElem>::from_elem(elem, n, Global)
    80016b60:	fffec097          	auipc	ra,0xfffec
    80016b64:	a86080e7          	jalr	-1402(ra) # 800025e6 <_ZN63_$LT$u8$u20$as$u20$alloc..vec..spec_from_elem..SpecFromElem$GT$9from_elem17h7bf881e84d821ad0E>
    80016b68:	a009                	j	80016b6a <_ZN5alloc3vec9from_elem17h254506728307fd13E+0x14>
}
    80016b6a:	60e2                	ld	ra,24(sp)
    80016b6c:	6105                	addi	sp,sp,32
    80016b6e:	8082                	ret

Disassembly of section .text._ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h57bbbed72157e211E:

0000000080016b70 <_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h57bbbed72157e211E>:
    fn deref(&self) -> &[T] {
    80016b70:	7179                	addi	sp,sp,-48
    80016b72:	f406                	sd	ra,40(sp)
    80016b74:	e82a                	sd	a0,16(sp)
    80016b76:	f02a                	sd	a0,32(sp)
        unsafe { slice::from_raw_parts(self.as_ptr(), self.len) }
    80016b78:	00000097          	auipc	ra,0x0
    80016b7c:	f8a080e7          	jalr	-118(ra) # 80016b02 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$6as_ptr17h07b3ea85571460a0E>
    80016b80:	ec2a                	sd	a0,24(sp)
    80016b82:	a009                	j	80016b84 <_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h57bbbed72157e211E+0x14>
    80016b84:	6562                	ld	a0,24(sp)
    80016b86:	65c2                	ld	a1,16(sp)
    80016b88:	698c                	ld	a1,16(a1)
    80016b8a:	fffef097          	auipc	ra,0xfffef
    80016b8e:	80e080e7          	jalr	-2034(ra) # 80005398 <_ZN4core5slice3raw14from_raw_parts17hf1accf0e45b69f71E>
    80016b92:	e02a                	sd	a0,0(sp)
    80016b94:	e42e                	sd	a1,8(sp)
    80016b96:	a009                	j	80016b98 <_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h57bbbed72157e211E+0x28>
    }
    80016b98:	65a2                	ld	a1,8(sp)
    80016b9a:	6502                	ld	a0,0(sp)
    80016b9c:	70a2                	ld	ra,40(sp)
    80016b9e:	6145                	addi	sp,sp,48
    80016ba0:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register5mtvec5write17h0d760c5cb091ccffE:

0000000080016ba2 <_ZN6kernel4arch5riscv8register5mtvec5write17h0d760c5cb091ccffE>:
    llvm_asm!("csrr $0, mtvec":"=r"(ret):::"volatile");
    ret
}

#[inline]
pub unsafe fn write(x:usize){
    80016ba2:	1141                	addi	sp,sp,-16
    80016ba4:	e42a                	sd	a0,8(sp)
    llvm_asm!("csrw mtvec, $0"::"r"(x)::"volatile");
    80016ba6:	30551073          	csrw	mtvec,a0
    80016baa:	0141                	addi	sp,sp,16
    80016bac:	8082                	ret

Disassembly of section .text._ZN6kernel6memory7mapping10page_table9PageTable7as_addr17hcce185773f2c85f7E:

0000000080016bae <_ZN6kernel6memory7mapping10page_table9PageTable7as_addr17hcce185773f2c85f7E>:

static mut KERNEL_PAGETABLE:PageTable = PageTable::empty();


impl PageTable{
    pub fn as_addr(&self) -> usize{
    80016bae:	1101                	addi	sp,sp,-32
    80016bb0:	ec06                	sd	ra,24(sp)
    80016bb2:	e82a                	sd	a0,16(sp)
    80016bb4:	20000593          	li	a1,512
        self.entries.as_ptr() as usize
    80016bb8:	00006097          	auipc	ra,0x6
    80016bbc:	0da080e7          	jalr	218(ra) # 8001cc92 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hc0b1197304dd53e6E>
    80016bc0:	e42a                	sd	a0,8(sp)
    80016bc2:	a009                	j	80016bc4 <_ZN6kernel6memory7mapping10page_table9PageTable7as_addr17hcce185773f2c85f7E+0x16>
    }
    80016bc4:	6522                	ld	a0,8(sp)
    80016bc6:	60e2                	ld	ra,24(sp)
    80016bc8:	6105                	addi	sp,sp,32
    80016bca:	8082                	ret

Disassembly of section .text._ZN6kernel6memory7mapping10page_table9PageTable7as_satp17h97121d8f678f163eE:

0000000080016bcc <_ZN6kernel6memory7mapping10page_table9PageTable7as_satp17h97121d8f678f163eE>:
        }
    }

    /// Convert the page table to be the usize
    /// that can be written in satp register
    pub fn as_satp(&self) -> usize {
    80016bcc:	1101                	addi	sp,sp,-32
    80016bce:	ec06                	sd	ra,24(sp)
    80016bd0:	e82a                	sd	a0,16(sp)
    80016bd2:	20000593          	li	a1,512
        satp::SATP_SV39 | ((self.entries.as_ptr() as usize) >> PGSHIFT)
    80016bd6:	00006097          	auipc	ra,0x6
    80016bda:	0bc080e7          	jalr	188(ra) # 8001cc92 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hc0b1197304dd53e6E>
    80016bde:	e42a                	sd	a0,8(sp)
    80016be0:	a009                	j	80016be2 <_ZN6kernel6memory7mapping10page_table9PageTable7as_satp17h97121d8f678f163eE+0x16>
    80016be2:	6522                	ld	a0,8(sp)
    80016be4:	8131                	srli	a0,a0,0xc
    80016be6:	e02a                	sd	a0,0(sp)
    80016be8:	a009                	j	80016bea <_ZN6kernel6memory7mapping10page_table9PageTable7as_satp17h97121d8f678f163eE+0x1e>
    80016bea:	6502                	ld	a0,0(sp)
    80016bec:	55fd                	li	a1,-1
    80016bee:	15fe                	slli	a1,a1,0x3f
    80016bf0:	8d4d                	or	a0,a0,a1
    }
    80016bf2:	60e2                	ld	ra,24(sp)
    80016bf4:	6105                	addi	sp,sp,32
    80016bf6:	8082                	ret

Disassembly of section .text._ZN6kernel6memory7mapping10page_table9PageTable5write17h1197b2bc60e8313aE:

0000000080016bf8 <_ZN6kernel6memory7mapping10page_table9PageTable5write17h1197b2bc60e8313aE>:
        for pte in self.entries.iter_mut(){
            pte.write_zero();
        }
    }

    pub fn write(&mut self, page_table: &PageTable) {
    80016bf8:	7135                	addi	sp,sp,-160
    80016bfa:	ed06                	sd	ra,152(sp)
    80016bfc:	f02e                	sd	a1,32(sp)
    80016bfe:	f42a                	sd	a0,40(sp)
    80016c00:	f8aa                	sd	a0,112(sp)
    80016c02:	fcae                	sd	a1,120(sp)
    80016c04:	4501                	li	a0,0
        for i in 0..512 {
    80016c06:	e0aa                	sd	a0,64(sp)
    80016c08:	20000593          	li	a1,512
    80016c0c:	e4ae                	sd	a1,72(sp)
    80016c0e:	00009097          	auipc	ra,0x9
    80016c12:	bba080e7          	jalr	-1094(ra) # 8001f7c8 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he0a8d93712e5493bE>
    80016c16:	f82a                	sd	a0,48(sp)
    80016c18:	fc2e                	sd	a1,56(sp)
    80016c1a:	a009                	j	80016c1c <_ZN6kernel6memory7mapping10page_table9PageTable5write17h1197b2bc60e8313aE+0x24>
    80016c1c:	7562                	ld	a0,56(sp)
    80016c1e:	75c2                	ld	a1,48(sp)
    80016c20:	e8ae                	sd	a1,80(sp)
    80016c22:	ecaa                	sd	a0,88(sp)
    80016c24:	a009                	j	80016c26 <_ZN6kernel6memory7mapping10page_table9PageTable5write17h1197b2bc60e8313aE+0x2e>
    80016c26:	0888                	addi	a0,sp,80
    80016c28:	00009097          	auipc	ra,0x9
    80016c2c:	b32080e7          	jalr	-1230(ra) # 8001f75a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE>
    80016c30:	f0aa                	sd	a0,96(sp)
    80016c32:	f4ae                	sd	a1,104(sp)
    80016c34:	a009                	j	80016c36 <_ZN6kernel6memory7mapping10page_table9PageTable5write17h1197b2bc60e8313aE+0x3e>
    80016c36:	7506                	ld	a0,96(sp)
    80016c38:	4581                	li	a1,0
    80016c3a:	00b50463          	beq	a0,a1,80016c42 <_ZN6kernel6memory7mapping10page_table9PageTable5write17h1197b2bc60e8313aE+0x4a>
    80016c3e:	a009                	j	80016c40 <_ZN6kernel6memory7mapping10page_table9PageTable5write17h1197b2bc60e8313aE+0x48>
    80016c40:	a029                	j	80016c4a <_ZN6kernel6memory7mapping10page_table9PageTable5write17h1197b2bc60e8313aE+0x52>
            self.entries[i].write(page_table.entries[i].as_usize());
        }
    }
    80016c42:	60ea                	ld	ra,152(sp)
    80016c44:	610d                	addi	sp,sp,160
    80016c46:	8082                	ret
        for i in 0..512 {
    80016c48:	0000                	unimp
    80016c4a:	75a6                	ld	a1,104(sp)
    80016c4c:	ec2e                	sd	a1,24(sp)
    80016c4e:	e12e                	sd	a1,128(sp)
    80016c50:	e52e                	sd	a1,136(sp)
    80016c52:	e92e                	sd	a1,144(sp)
    80016c54:	1ff00513          	li	a0,511
            self.entries[i].write(page_table.entries[i].as_usize());
    80016c58:	04b56063          	bltu	a0,a1,80016c98 <_ZN6kernel6memory7mapping10page_table9PageTable5write17h1197b2bc60e8313aE+0xa0>
    80016c5c:	a009                	j	80016c5e <_ZN6kernel6memory7mapping10page_table9PageTable5write17h1197b2bc60e8313aE+0x66>
    80016c5e:	65e2                	ld	a1,24(sp)
    80016c60:	7522                	ld	a0,40(sp)
    80016c62:	00359613          	slli	a2,a1,0x3
    80016c66:	9532                	add	a0,a0,a2
    80016c68:	e82a                	sd	a0,16(sp)
    80016c6a:	1ff00513          	li	a0,511
    80016c6e:	04b56163          	bltu	a0,a1,80016cb0 <.LBB2_14+0x16>
    80016c72:	a009                	j	80016c74 <_ZN6kernel6memory7mapping10page_table9PageTable5write17h1197b2bc60e8313aE+0x7c>
    80016c74:	7502                	ld	a0,32(sp)
    80016c76:	65e2                	ld	a1,24(sp)
    80016c78:	058e                	slli	a1,a1,0x3
    80016c7a:	952e                	add	a0,a0,a1
    80016c7c:	ffff2097          	auipc	ra,0xffff2
    80016c80:	a94080e7          	jalr	-1388(ra) # 80008710 <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry8as_usize17h85d0d27e00f735b4E>
    80016c84:	e42a                	sd	a0,8(sp)
    80016c86:	a009                	j	80016c88 <_ZN6kernel6memory7mapping10page_table9PageTable5write17h1197b2bc60e8313aE+0x90>
    80016c88:	65a2                	ld	a1,8(sp)
    80016c8a:	6542                	ld	a0,16(sp)
    80016c8c:	ffff2097          	auipc	ra,0xffff2
    80016c90:	bf8080e7          	jalr	-1032(ra) # 80008884 <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry5write17h80740d4aa6720343E>
    80016c94:	a009                	j	80016c96 <_ZN6kernel6memory7mapping10page_table9PageTable5write17h1197b2bc60e8313aE+0x9e>
        for i in 0..512 {
    80016c96:	bf41                	j	80016c26 <_ZN6kernel6memory7mapping10page_table9PageTable5write17h1197b2bc60e8313aE+0x2e>
            self.entries[i].write(page_table.entries[i].as_usize());
    80016c98:	6562                	ld	a0,24(sp)

0000000080016c9a <.LBB2_14>:
    80016c9a:	00013617          	auipc	a2,0x13
    80016c9e:	33e60613          	addi	a2,a2,830 # 80029fd8 <.L__unnamed_1>
    80016ca2:	20000593          	li	a1,512
    80016ca6:	0000b097          	auipc	ra,0xb
    80016caa:	482080e7          	jalr	1154(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80016cae:	0000                	unimp
    80016cb0:	6562                	ld	a0,24(sp)

0000000080016cb2 <.LBB2_15>:
    80016cb2:	00013617          	auipc	a2,0x13
    80016cb6:	33e60613          	addi	a2,a2,830 # 80029ff0 <.L__unnamed_2>
    80016cba:	20000593          	li	a1,512
    80016cbe:	0000b097          	auipc	ra,0xb
    80016cc2:	46a080e7          	jalr	1130(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel6memory7mapping10page_table9PageTable9translate17h0a84bb7f836f6989E:

0000000080016cc8 <_ZN6kernel6memory7mapping10page_table9PageTable9translate17h0a84bb7f836f6989E>:
    /// 
    /// Look up a virtual address, return the physical address,
    /// or 0 if not mapped.
    /// Can only be used to look up user pages.
    /// 将虚拟地址翻译成物理地址，返回页表项
    fn translate(
    80016cc8:	7111                	addi	sp,sp,-256
    80016cca:	fd86                	sd	ra,248(sp)
    80016ccc:	f82a                	sd	a0,48(sp)
    80016cce:	e0ae                	sd	a1,64(sp)
    80016cd0:	e5aa                	sd	a0,200(sp)
    80016cd2:	0088                	addi	a0,sp,64
        &mut self,
        va: VirtualAddress
    ) -> Option<&mut PageTableEntry> {
        if va.as_usize() > MAXVA {
    80016cd4:	ffffb097          	auipc	ra,0xffffb
    80016cd8:	820080e7          	jalr	-2016(ra) # 800114f4 <_ZN89_$LT$kernel..memory..address..VirtualAddress$u20$as$u20$kernel..memory..address..Addr$GT$8as_usize17h7916c21610008a66E>
    80016cdc:	fc2a                	sd	a0,56(sp)
    80016cde:	a009                	j	80016ce0 <_ZN6kernel6memory7mapping10page_table9PageTable9translate17h0a84bb7f836f6989E+0x18>
    80016ce0:	7562                	ld	a0,56(sp)
    80016ce2:	4585                	li	a1,1
    80016ce4:	159a                	slli	a1,a1,0x26
    80016ce6:	0585                	addi	a1,a1,1
    80016ce8:	00b56663          	bltu	a0,a1,80016cf4 <_ZN6kernel6memory7mapping10page_table9PageTable9translate17h0a84bb7f836f6989E+0x2c>
    80016cec:	a009                	j	80016cee <_ZN6kernel6memory7mapping10page_table9PageTable9translate17h0a84bb7f836f6989E+0x26>
    80016cee:	4501                	li	a0,0
            return None
    80016cf0:	e4aa                	sd	a0,72(sp)
    80016cf2:	a0dd                	j	80016dd8 <_ZN6kernel6memory7mapping10page_table9PageTable9translate17h0a84bb7f836f6989E+0x110>
        }
        let mut page_table = self as *mut PageTable;
    80016cf4:	7542                	ld	a0,48(sp)
    80016cf6:	e8aa                	sd	a0,80(sp)
    80016cf8:	0128                	addi	a0,sp,136
    80016cfa:	4585                	li	a1,1
    80016cfc:	4609                	li	a2,2
        for level in (1..=2).rev() {
    80016cfe:	ffff5097          	auipc	ra,0xffff5
    80016d02:	878080e7          	jalr	-1928(ra) # 8000b576 <_ZN4core3ops5range25RangeInclusive$LT$Idx$GT$3new17h55e0942ec6ff79cbE>
    80016d06:	a009                	j	80016d08 <_ZN6kernel6memory7mapping10page_table9PageTable9translate17h0a84bb7f836f6989E+0x40>
    80016d08:	1888                	addi	a0,sp,112
    80016d0a:	012c                	addi	a1,sp,136
    80016d0c:	ffff5097          	auipc	ra,0xffff5
    80016d10:	c3a080e7          	jalr	-966(ra) # 8000b946 <_ZN4core4iter6traits8iterator8Iterator3rev17h6d9067942ad94ebeE>
    80016d14:	a009                	j	80016d16 <_ZN6kernel6memory7mapping10page_table9PageTable9translate17h0a84bb7f836f6989E+0x4e>
    80016d16:	08a8                	addi	a0,sp,88
    80016d18:	188c                	addi	a1,sp,112
    80016d1a:	00005097          	auipc	ra,0x5
    80016d1e:	96a080e7          	jalr	-1686(ra) # 8001b684 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h07513ad1b93938d8E>
    80016d22:	a009                	j	80016d24 <_ZN6kernel6memory7mapping10page_table9PageTable9translate17h0a84bb7f836f6989E+0x5c>
    80016d24:	7526                	ld	a0,104(sp)
    80016d26:	f92a                	sd	a0,176(sp)
    80016d28:	7506                	ld	a0,96(sp)
    80016d2a:	f52a                	sd	a0,168(sp)
    80016d2c:	6566                	ld	a0,88(sp)
    80016d2e:	f12a                	sd	a0,160(sp)
    80016d30:	a009                	j	80016d32 <_ZN6kernel6memory7mapping10page_table9PageTable9translate17h0a84bb7f836f6989E+0x6a>
    80016d32:	1108                	addi	a0,sp,160
    80016d34:	00005097          	auipc	ra,0x5
    80016d38:	968080e7          	jalr	-1688(ra) # 8001b69c <_ZN98_$LT$core..iter..adapters..rev..Rev$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfb8b31ee37e3cf8fE>
    80016d3c:	fd2a                	sd	a0,184(sp)
    80016d3e:	e1ae                	sd	a1,192(sp)
    80016d40:	a009                	j	80016d42 <_ZN6kernel6memory7mapping10page_table9PageTable9translate17h0a84bb7f836f6989E+0x7a>
    80016d42:	756a                	ld	a0,184(sp)
    80016d44:	4581                	li	a1,0
    80016d46:	00b50463          	beq	a0,a1,80016d4e <_ZN6kernel6memory7mapping10page_table9PageTable9translate17h0a84bb7f836f6989E+0x86>
    80016d4a:	a009                	j	80016d4c <_ZN6kernel6memory7mapping10page_table9PageTable9translate17h0a84bb7f836f6989E+0x84>
    80016d4c:	a811                	j	80016d60 <_ZN6kernel6memory7mapping10page_table9PageTable9translate17h0a84bb7f836f6989E+0x98>
    80016d4e:	0088                	addi	a0,sp,64
    80016d50:	4581                	li	a1,0
    
            }else{
               return None
            }            
        }
        let pte = unsafe{&mut (*page_table).entries[va.page_num(0)]};
    80016d52:	ffffa097          	auipc	ra,0xffffa
    80016d56:	7d0080e7          	jalr	2000(ra) # 80011522 <_ZN6kernel6memory7address14VirtualAddress8page_num17h81ae42a65c302f7eE>
    80016d5a:	f42a                	sd	a0,40(sp)
    80016d5c:	a08d                	j	80016dbe <_ZN6kernel6memory7mapping10page_table9PageTable9translate17h0a84bb7f836f6989E+0xf6>
        for level in (1..=2).rev() {
    80016d5e:	0000                	unimp
    80016d60:	658e                	ld	a1,192(sp)
    80016d62:	e9ae                	sd	a1,208(sp)
    80016d64:	edae                	sd	a1,216(sp)
    80016d66:	f1ae                	sd	a1,224(sp)
    80016d68:	0088                	addi	a0,sp,64
            let pte = unsafe{ &mut (*page_table).entries[va.page_num(level)] };
    80016d6a:	ffffa097          	auipc	ra,0xffffa
    80016d6e:	7b8080e7          	jalr	1976(ra) # 80011522 <_ZN6kernel6memory7address14VirtualAddress8page_num17h81ae42a65c302f7eE>
    80016d72:	f02a                	sd	a0,32(sp)
    80016d74:	a009                	j	80016d76 <_ZN6kernel6memory7mapping10page_table9PageTable9translate17h0a84bb7f836f6989E+0xae>
    80016d76:	7582                	ld	a1,32(sp)
    80016d78:	1ff00513          	li	a0,511
    80016d7c:	06b56263          	bltu	a0,a1,80016de0 <_ZN6kernel6memory7mapping10page_table9PageTable9translate17h0a84bb7f836f6989E+0x118>
    80016d80:	a009                	j	80016d82 <_ZN6kernel6memory7mapping10page_table9PageTable9translate17h0a84bb7f836f6989E+0xba>
    80016d82:	7582                	ld	a1,32(sp)
    80016d84:	6546                	ld	a0,80(sp)
    80016d86:	058e                	slli	a1,a1,0x3
    80016d88:	952e                	add	a0,a0,a1
    80016d8a:	e82a                	sd	a0,16(sp)
    80016d8c:	f5aa                	sd	a0,232(sp)
            if pte.is_valid() {
    80016d8e:	ffff2097          	auipc	ra,0xffff2
    80016d92:	98c080e7          	jalr	-1652(ra) # 8000871a <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry8is_valid17h2b3a673d14ed09c6E>
    80016d96:	ec2a                	sd	a0,24(sp)
    80016d98:	a009                	j	80016d9a <_ZN6kernel6memory7mapping10page_table9PageTable9translate17h0a84bb7f836f6989E+0xd2>
    80016d9a:	6562                	ld	a0,24(sp)
    80016d9c:	4581                	li	a1,0
    80016d9e:	00b50a63          	beq	a0,a1,80016db2 <_ZN6kernel6memory7mapping10page_table9PageTable9translate17h0a84bb7f836f6989E+0xea>
    80016da2:	a009                	j	80016da4 <_ZN6kernel6memory7mapping10page_table9PageTable9translate17h0a84bb7f836f6989E+0xdc>
                page_table = pte.as_pagetable();
    80016da4:	6542                	ld	a0,16(sp)
    80016da6:	ffff2097          	auipc	ra,0xffff2
    80016daa:	a4a080e7          	jalr	-1462(ra) # 800087f0 <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry12as_pagetable17h89cf44fefbbd4b4eE>
    80016dae:	e42a                	sd	a0,8(sp)
    80016db0:	a021                	j	80016db8 <_ZN6kernel6memory7mapping10page_table9PageTable9translate17h0a84bb7f836f6989E+0xf0>
    80016db2:	4501                	li	a0,0
               return None
    80016db4:	e4aa                	sd	a0,72(sp)
    80016db6:	a00d                	j	80016dd8 <_ZN6kernel6memory7mapping10page_table9PageTable9translate17h0a84bb7f836f6989E+0x110>
                page_table = pte.as_pagetable();
    80016db8:	6522                	ld	a0,8(sp)
    80016dba:	e8aa                	sd	a0,80(sp)
        for level in (1..=2).rev() {
    80016dbc:	bf9d                	j	80016d32 <_ZN6kernel6memory7mapping10page_table9PageTable9translate17h0a84bb7f836f6989E+0x6a>
    80016dbe:	75a2                	ld	a1,40(sp)
    80016dc0:	1ff00513          	li	a0,511
        let pte = unsafe{&mut (*page_table).entries[va.page_num(0)]};
    80016dc4:	02b56a63          	bltu	a0,a1,80016df8 <.LBB3_24+0x16>
    80016dc8:	a009                	j	80016dca <_ZN6kernel6memory7mapping10page_table9PageTable9translate17h0a84bb7f836f6989E+0x102>
    80016dca:	75a2                	ld	a1,40(sp)
    80016dcc:	6546                	ld	a0,80(sp)
    80016dce:	058e                	slli	a1,a1,0x3
    80016dd0:	952e                	add	a0,a0,a1
    80016dd2:	f9aa                	sd	a0,240(sp)
        Some(pte)
    80016dd4:	e4aa                	sd	a0,72(sp)
    }
    80016dd6:	a009                	j	80016dd8 <_ZN6kernel6memory7mapping10page_table9PageTable9translate17h0a84bb7f836f6989E+0x110>
    80016dd8:	6526                	ld	a0,72(sp)
    80016dda:	70ee                	ld	ra,248(sp)
    80016ddc:	6111                	addi	sp,sp,256
    80016dde:	8082                	ret
            let pte = unsafe{ &mut (*page_table).entries[va.page_num(level)] };
    80016de0:	7502                	ld	a0,32(sp)

0000000080016de2 <.LBB3_24>:
    80016de2:	00013617          	auipc	a2,0x13
    80016de6:	22660613          	addi	a2,a2,550 # 8002a008 <.L__unnamed_3>
    80016dea:	20000593          	li	a1,512
    80016dee:	0000b097          	auipc	ra,0xb
    80016df2:	33a080e7          	jalr	826(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80016df6:	0000                	unimp
        let pte = unsafe{&mut (*page_table).entries[va.page_num(0)]};
    80016df8:	7522                	ld	a0,40(sp)

0000000080016dfa <.LBB3_25>:
    80016dfa:	00013617          	auipc	a2,0x13
    80016dfe:	22660613          	addi	a2,a2,550 # 8002a020 <.L__unnamed_4>
    80016e02:	20000593          	li	a1,512
    80016e06:	0000b097          	auipc	ra,0xb
    80016e0a:	322080e7          	jalr	802(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel6memory7mapping10page_table9PageTable18translate_or_alloc17ha9e02f6e0feabdb7E:

0000000080016e10 <_ZN6kernel6memory7mapping10page_table9PageTable18translate_or_alloc17ha9e02f6e0feabdb7E>:

    /// 将虚拟地址翻译成物理地址或者直接映射
    fn translate_or_alloc(
    80016e10:	7169                	addi	sp,sp,-304
    80016e12:	f606                	sd	ra,296(sp)
    80016e14:	f4ae                	sd	a1,104(sp)
    80016e16:	f9aa                	sd	a0,240(sp)
        &mut self,
        va: VirtualAddress
    ) -> Option<&mut PageTableEntry> {
        let mut pagetable = self as *mut PageTable;
    80016e18:	fcaa                	sd	a0,120(sp)
    80016e1a:	10a8                	addi	a0,sp,104
        let real_addr:usize = va.as_usize();
    80016e1c:	ffffa097          	auipc	ra,0xffffa
    80016e20:	6d8080e7          	jalr	1752(ra) # 800114f4 <_ZN89_$LT$kernel..memory..address..VirtualAddress$u20$as$u20$kernel..memory..address..Addr$GT$8as_usize17h7916c21610008a66E>
    80016e24:	85aa                	mv	a1,a0
    80016e26:	f0ae                	sd	a1,96(sp)
    80016e28:	fdaa                	sd	a0,248(sp)
    80016e2a:	a009                	j	80016e2c <_ZN6kernel6memory7mapping10page_table9PageTable18translate_or_alloc17ha9e02f6e0feabdb7E+0x1c>
    80016e2c:	7506                	ld	a0,96(sp)
    80016e2e:	4585                	li	a1,1
    80016e30:	159a                	slli	a1,a1,0x26
    80016e32:	0585                	addi	a1,a1,1
        if real_addr > MAXVA {
    80016e34:	02b56163          	bltu	a0,a1,80016e56 <.LBB4_31+0x14>
    80016e38:	a009                	j	80016e3a <.LBB4_30>

0000000080016e3a <.LBB4_30>:
            panic!("walk");
    80016e3a:	0000f517          	auipc	a0,0xf
    80016e3e:	79a50513          	addi	a0,a0,1946 # 800265d4 <.L__unnamed_16+0x2c>

0000000080016e42 <.LBB4_31>:
    80016e42:	00013617          	auipc	a2,0x13
    80016e46:	1f660613          	addi	a2,a2,502 # 8002a038 <.L__unnamed_6>
    80016e4a:	4591                	li	a1,4
    80016e4c:	0000b097          	auipc	ra,0xb
    80016e50:	2b0080e7          	jalr	688(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80016e54:	0000                	unimp
    80016e56:	1908                	addi	a0,sp,176
    80016e58:	4585                	li	a1,1
    80016e5a:	4609                	li	a2,2
        }
        for level in (1..=2).rev() {
    80016e5c:	ffff4097          	auipc	ra,0xffff4
    80016e60:	71a080e7          	jalr	1818(ra) # 8000b576 <_ZN4core3ops5range25RangeInclusive$LT$Idx$GT$3new17h55e0942ec6ff79cbE>
    80016e64:	a009                	j	80016e66 <.LBB4_31+0x24>
    80016e66:	0928                	addi	a0,sp,152
    80016e68:	190c                	addi	a1,sp,176
    80016e6a:	ffff5097          	auipc	ra,0xffff5
    80016e6e:	adc080e7          	jalr	-1316(ra) # 8000b946 <_ZN4core4iter6traits8iterator8Iterator3rev17h6d9067942ad94ebeE>
    80016e72:	a009                	j	80016e74 <.LBB4_31+0x32>
    80016e74:	0108                	addi	a0,sp,128
    80016e76:	092c                	addi	a1,sp,152
    80016e78:	00005097          	auipc	ra,0x5
    80016e7c:	80c080e7          	jalr	-2036(ra) # 8001b684 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h07513ad1b93938d8E>
    80016e80:	a009                	j	80016e82 <.LBB4_31+0x40>
    80016e82:	654a                	ld	a0,144(sp)
    80016e84:	edaa                	sd	a0,216(sp)
    80016e86:	652a                	ld	a0,136(sp)
    80016e88:	e9aa                	sd	a0,208(sp)
    80016e8a:	650a                	ld	a0,128(sp)
    80016e8c:	e5aa                	sd	a0,200(sp)
    80016e8e:	a009                	j	80016e90 <.LBB4_31+0x4e>
    80016e90:	01a8                	addi	a0,sp,200
    80016e92:	00005097          	auipc	ra,0x5
    80016e96:	80a080e7          	jalr	-2038(ra) # 8001b69c <_ZN98_$LT$core..iter..adapters..rev..Rev$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfb8b31ee37e3cf8fE>
    80016e9a:	f1aa                	sd	a0,224(sp)
    80016e9c:	f5ae                	sd	a1,232(sp)
    80016e9e:	a009                	j	80016ea0 <.LBB4_31+0x5e>
    80016ea0:	750e                	ld	a0,224(sp)
    80016ea2:	4581                	li	a1,0
    80016ea4:	00b50463          	beq	a0,a1,80016eac <.LBB4_31+0x6a>
    80016ea8:	a009                	j	80016eaa <.LBB4_31+0x68>
    80016eaa:	a811                	j	80016ebe <.LBB4_31+0x7c>
    80016eac:	10a8                	addi	a0,sp,104
    80016eae:	4581                	li	a1,0
                };
                pagetable = Box::into_raw(zeroed_pgt);
                pte.0 = (((pagetable as usize) >> 12) << 10) | (PteFlags::V.bits());
            }
        }
        Some(unsafe{&mut (*pagetable).entries[va.page_num(0)]})
    80016eb0:	ffffa097          	auipc	ra,0xffffa
    80016eb4:	672080e7          	jalr	1650(ra) # 80011522 <_ZN6kernel6memory7address14VirtualAddress8page_num17h81ae42a65c302f7eE>
    80016eb8:	ecaa                	sd	a0,88(sp)
    80016eba:	a875                	j	80016f76 <.LBB4_32+0x22>
        for level in (1..=2).rev() {
    80016ebc:	0000                	unimp
    80016ebe:	75ae                	ld	a1,232(sp)
    80016ec0:	e22e                	sd	a1,256(sp)
    80016ec2:	e62e                	sd	a1,264(sp)
    80016ec4:	ea2e                	sd	a1,272(sp)
    80016ec6:	10a8                	addi	a0,sp,104
            let pte = unsafe{ &mut (*pagetable).entries[va.page_num(level)] };
    80016ec8:	ffffa097          	auipc	ra,0xffffa
    80016ecc:	65a080e7          	jalr	1626(ra) # 80011522 <_ZN6kernel6memory7address14VirtualAddress8page_num17h81ae42a65c302f7eE>
    80016ed0:	e8aa                	sd	a0,80(sp)
    80016ed2:	a009                	j	80016ed4 <.LBB4_31+0x92>
    80016ed4:	65c6                	ld	a1,80(sp)
    80016ed6:	1ff00513          	li	a0,511
    80016eda:	0ab56c63          	bltu	a0,a1,80016f92 <.LBB4_32+0x3e>
    80016ede:	a009                	j	80016ee0 <.LBB4_31+0x9e>
    80016ee0:	65c6                	ld	a1,80(sp)
    80016ee2:	7566                	ld	a0,120(sp)
    80016ee4:	058e                	slli	a1,a1,0x3
    80016ee6:	952e                	add	a0,a0,a1
    80016ee8:	e0aa                	sd	a0,64(sp)
    80016eea:	ee2a                	sd	a0,280(sp)
            if pte.is_valid() {
    80016eec:	ffff2097          	auipc	ra,0xffff2
    80016ef0:	82e080e7          	jalr	-2002(ra) # 8000871a <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry8is_valid17h2b3a673d14ed09c6E>
    80016ef4:	e4aa                	sd	a0,72(sp)
    80016ef6:	a009                	j	80016ef8 <.LBB4_31+0xb6>
    80016ef8:	6526                	ld	a0,72(sp)
    80016efa:	4581                	li	a1,0
    80016efc:	00b50a63          	beq	a0,a1,80016f10 <.LBB4_31+0xce>
    80016f00:	a009                	j	80016f02 <.LBB4_31+0xc0>
                pagetable = pte.as_pagetable();
    80016f02:	6506                	ld	a0,64(sp)
    80016f04:	ffff2097          	auipc	ra,0xffff2
    80016f08:	8ec080e7          	jalr	-1812(ra) # 800087f0 <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry12as_pagetable17h89cf44fefbbd4b4eE>
    80016f0c:	fc2a                	sd	a0,56(sp)
    80016f0e:	a039                	j	80016f1c <.LBB4_31+0xda>
                    Box::new_zeroed().assume_init()
    80016f10:	00004097          	auipc	ra,0x4
    80016f14:	7f2080e7          	jalr	2034(ra) # 8001b702 <_ZN5alloc5boxed12Box$LT$T$GT$10new_zeroed17he11e171c2ca6c076E>
    80016f18:	f82a                	sd	a0,48(sp)
    80016f1a:	a021                	j	80016f22 <.LBB4_31+0xe0>
                pagetable = pte.as_pagetable();
    80016f1c:	7562                	ld	a0,56(sp)
    80016f1e:	fcaa                	sd	a0,120(sp)
            if pte.is_valid() {
    80016f20:	a891                	j	80016f74 <.LBB4_32+0x20>
                    Box::new_zeroed().assume_init()
    80016f22:	7542                	ld	a0,48(sp)
    80016f24:	00005097          	auipc	ra,0x5
    80016f28:	350080e7          	jalr	848(ra) # 8001c274 <_ZN5alloc5boxed60Box$LT$core..mem..maybe_uninit..MaybeUninit$LT$T$GT$$C$A$GT$11assume_init17h2fe4f6739411edd0E>
    80016f2c:	85aa                	mv	a1,a0
    80016f2e:	f42e                	sd	a1,40(sp)
    80016f30:	f22a                	sd	a0,288(sp)
    80016f32:	a009                	j	80016f34 <.LBB4_31+0xf2>
                pagetable = Box::into_raw(zeroed_pgt);
    80016f34:	7522                	ld	a0,40(sp)
    80016f36:	00005097          	auipc	ra,0x5
    80016f3a:	2b4080e7          	jalr	692(ra) # 8001c1ea <_ZN5alloc5boxed16Box$LT$T$C$A$GT$8into_raw17h11a22cb7d9ea1552E>
    80016f3e:	f02a                	sd	a0,32(sp)
    80016f40:	a009                	j	80016f42 <.LBB4_31+0x100>
    80016f42:	7502                	ld	a0,32(sp)
    80016f44:	fcaa                	sd	a0,120(sp)
                pte.0 = (((pagetable as usize) >> 12) << 10) | (PteFlags::V.bits());
    80016f46:	8131                	srli	a0,a0,0xc
    80016f48:	ec2a                	sd	a0,24(sp)
    80016f4a:	a009                	j	80016f4c <.LBB4_31+0x10a>
    80016f4c:	6562                	ld	a0,24(sp)
    80016f4e:	052a                	slli	a0,a0,0xa
    80016f50:	e82a                	sd	a0,16(sp)
    80016f52:	a009                	j	80016f54 <.LBB4_32>

0000000080016f54 <.LBB4_32>:
    80016f54:	00010517          	auipc	a0,0x10
    80016f58:	88450513          	addi	a0,a0,-1916 # 800267d8 <.L__unnamed_6+0xa0>
    80016f5c:	ffff2097          	auipc	ra,0xffff2
    80016f60:	934080e7          	jalr	-1740(ra) # 80008890 <_ZN6kernel6memory7mapping16page_table_entry8PteFlags4bits17hec41972a30d9c1c3E>
    80016f64:	e42a                	sd	a0,8(sp)
    80016f66:	a009                	j	80016f68 <.LBB4_32+0x14>
    80016f68:	6586                	ld	a1,64(sp)
    80016f6a:	6542                	ld	a0,16(sp)
    80016f6c:	6622                	ld	a2,8(sp)
    80016f6e:	8d51                	or	a0,a0,a2
    80016f70:	e188                	sd	a0,0(a1)
            if pte.is_valid() {
    80016f72:	a009                	j	80016f74 <.LBB4_32+0x20>
        for level in (1..=2).rev() {
    80016f74:	bf31                	j	80016e90 <.LBB4_31+0x4e>
    80016f76:	65e6                	ld	a1,88(sp)
    80016f78:	1ff00513          	li	a0,511
        Some(unsafe{&mut (*pagetable).entries[va.page_num(0)]})
    80016f7c:	02b56763          	bltu	a0,a1,80016faa <.LBB4_33+0x16>
    80016f80:	a009                	j	80016f82 <.LBB4_32+0x2e>
    80016f82:	65e6                	ld	a1,88(sp)
    80016f84:	7566                	ld	a0,120(sp)
    80016f86:	058e                	slli	a1,a1,0x3
    80016f88:	952e                	add	a0,a0,a1
    80016f8a:	f8aa                	sd	a0,112(sp)
    }
    80016f8c:	70b2                	ld	ra,296(sp)
    80016f8e:	6155                	addi	sp,sp,304
    80016f90:	8082                	ret
            let pte = unsafe{ &mut (*pagetable).entries[va.page_num(level)] };
    80016f92:	6546                	ld	a0,80(sp)

0000000080016f94 <.LBB4_33>:
    80016f94:	00013617          	auipc	a2,0x13
    80016f98:	0bc60613          	addi	a2,a2,188 # 8002a050 <.L__unnamed_8>
    80016f9c:	20000593          	li	a1,512
    80016fa0:	0000b097          	auipc	ra,0xb
    80016fa4:	188080e7          	jalr	392(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80016fa8:	0000                	unimp
        Some(unsafe{&mut (*pagetable).entries[va.page_num(0)]})
    80016faa:	6566                	ld	a0,88(sp)

0000000080016fac <.LBB4_34>:
    80016fac:	00013617          	auipc	a2,0x13
    80016fb0:	0bc60613          	addi	a2,a2,188 # 8002a068 <.L__unnamed_9>
    80016fb4:	20000593          	li	a1,512
    80016fb8:	0000b097          	auipc	ra,0xb
    80016fbc:	170080e7          	jalr	368(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel6memory7mapping10page_table9PageTable13pgt_translate17h8fe9f71b8d139103E:

0000000080016fc2 <_ZN6kernel6memory7mapping10page_table9PageTable13pgt_translate17h8fe9f71b8d139103E>:

    /// Look up a virtual address, return the physical address,
    /// or 0 if not mapped.
    /// Can only be used to look up user pages.
    /// 通过给定的页表，将对应的虚拟地址转换成物理地址
    pub fn pgt_translate(
    80016fc2:	7119                	addi	sp,sp,-128
    80016fc4:	fc86                	sd	ra,120(sp)
    80016fc6:	f42a                	sd	a0,40(sp)
    80016fc8:	fc2e                	sd	a1,56(sp)
    80016fca:	ecaa                	sd	a0,88(sp)
    80016fcc:	1828                	addi	a0,sp,56
        &mut self, 
        va: VirtualAddress
    ) -> Option<PhysicalAddress> {
        let addr = va.as_usize();
    80016fce:	ffffa097          	auipc	ra,0xffffa
    80016fd2:	526080e7          	jalr	1318(ra) # 800114f4 <_ZN89_$LT$kernel..memory..address..VirtualAddress$u20$as$u20$kernel..memory..address..Addr$GT$8as_usize17h7916c21610008a66E>
    80016fd6:	85aa                	mv	a1,a0
    80016fd8:	f82e                	sd	a1,48(sp)
    80016fda:	f0aa                	sd	a0,96(sp)
    80016fdc:	a009                	j	80016fde <_ZN6kernel6memory7mapping10page_table9PageTable13pgt_translate17h8fe9f71b8d139103E+0x1c>
    80016fde:	7542                	ld	a0,48(sp)
    80016fe0:	4585                	li	a1,1
    80016fe2:	159a                	slli	a1,a1,0x26
    80016fe4:	0585                	addi	a1,a1,1
        if addr > MAXVA {
    80016fe6:	00b56663          	bltu	a0,a1,80016ff2 <_ZN6kernel6memory7mapping10page_table9PageTable13pgt_translate17h8fe9f71b8d139103E+0x30>
    80016fea:	a009                	j	80016fec <_ZN6kernel6memory7mapping10page_table9PageTable13pgt_translate17h8fe9f71b8d139103E+0x2a>
    80016fec:	4501                	li	a0,0
            return None
    80016fee:	e0aa                	sd	a0,64(sp)
    80016ff0:	a069                	j	8001707a <_ZN6kernel6memory7mapping10page_table9PageTable13pgt_translate17h8fe9f71b8d139103E+0xb8>
        }
        match self.translate(va){
    80016ff2:	7522                	ld	a0,40(sp)
    80016ff4:	75e2                	ld	a1,56(sp)
    80016ff6:	00000097          	auipc	ra,0x0
    80016ffa:	cd2080e7          	jalr	-814(ra) # 80016cc8 <_ZN6kernel6memory7mapping10page_table9PageTable9translate17h0a84bb7f836f6989E>
    80016ffe:	e8aa                	sd	a0,80(sp)
    80017000:	a009                	j	80017002 <_ZN6kernel6memory7mapping10page_table9PageTable13pgt_translate17h8fe9f71b8d139103E+0x40>
            Some(pte) => {
    80017002:	6546                	ld	a0,80(sp)
    80017004:	00a035b3          	snez	a1,a0
    80017008:	4581                	li	a1,0
    8001700a:	00b50463          	beq	a0,a1,80017012 <_ZN6kernel6memory7mapping10page_table9PageTable13pgt_translate17h8fe9f71b8d139103E+0x50>
    8001700e:	a009                	j	80017010 <_ZN6kernel6memory7mapping10page_table9PageTable13pgt_translate17h8fe9f71b8d139103E+0x4e>
    80017010:	a029                	j	8001701a <_ZN6kernel6memory7mapping10page_table9PageTable13pgt_translate17h8fe9f71b8d139103E+0x58>
    80017012:	4501                	li	a0,0

                let pagetable_addr = pte.as_pagetable() as usize;
                Some(PhysicalAddress::new(pagetable_addr))
            }

            None => { None }
    80017014:	e0aa                	sd	a0,64(sp)
        match self.translate(va){
    80017016:	a095                	j	8001707a <_ZN6kernel6memory7mapping10page_table9PageTable13pgt_translate17h8fe9f71b8d139103E+0xb8>
    80017018:	0000                	unimp
            Some(pte) => {
    8001701a:	6546                	ld	a0,80(sp)
    8001701c:	ec2a                	sd	a0,24(sp)
    8001701e:	f4aa                	sd	a0,104(sp)
                if !pte.is_valid(){
    80017020:	ffff1097          	auipc	ra,0xffff1
    80017024:	6fa080e7          	jalr	1786(ra) # 8000871a <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry8is_valid17h2b3a673d14ed09c6E>
    80017028:	f02a                	sd	a0,32(sp)
    8001702a:	a009                	j	8001702c <_ZN6kernel6memory7mapping10page_table9PageTable13pgt_translate17h8fe9f71b8d139103E+0x6a>
    8001702c:	7502                	ld	a0,32(sp)
    8001702e:	e509                	bnez	a0,80017038 <_ZN6kernel6memory7mapping10page_table9PageTable13pgt_translate17h8fe9f71b8d139103E+0x76>
    80017030:	a009                	j	80017032 <_ZN6kernel6memory7mapping10page_table9PageTable13pgt_translate17h8fe9f71b8d139103E+0x70>
    80017032:	4501                	li	a0,0
                    return None
    80017034:	e0aa                	sd	a0,64(sp)
    80017036:	a091                	j	8001707a <_ZN6kernel6memory7mapping10page_table9PageTable13pgt_translate17h8fe9f71b8d139103E+0xb8>
                if !pte.is_user(){
    80017038:	6562                	ld	a0,24(sp)
    8001703a:	ffff1097          	auipc	ra,0xffff1
    8001703e:	70e080e7          	jalr	1806(ra) # 80008748 <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry7is_user17ha81b2d62b11ea775E>
    80017042:	e82a                	sd	a0,16(sp)
    80017044:	a009                	j	80017046 <_ZN6kernel6memory7mapping10page_table9PageTable13pgt_translate17h8fe9f71b8d139103E+0x84>
    80017046:	6542                	ld	a0,16(sp)
    80017048:	e509                	bnez	a0,80017052 <_ZN6kernel6memory7mapping10page_table9PageTable13pgt_translate17h8fe9f71b8d139103E+0x90>
    8001704a:	a009                	j	8001704c <_ZN6kernel6memory7mapping10page_table9PageTable13pgt_translate17h8fe9f71b8d139103E+0x8a>
    8001704c:	4501                	li	a0,0
                    return None
    8001704e:	e0aa                	sd	a0,64(sp)
    80017050:	a02d                	j	8001707a <_ZN6kernel6memory7mapping10page_table9PageTable13pgt_translate17h8fe9f71b8d139103E+0xb8>
                let pagetable_addr = pte.as_pagetable() as usize;
    80017052:	6562                	ld	a0,24(sp)
    80017054:	ffff1097          	auipc	ra,0xffff1
    80017058:	79c080e7          	jalr	1948(ra) # 800087f0 <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry12as_pagetable17h89cf44fefbbd4b4eE>
    8001705c:	e42a                	sd	a0,8(sp)
    8001705e:	a009                	j	80017060 <_ZN6kernel6memory7mapping10page_table9PageTable13pgt_translate17h8fe9f71b8d139103E+0x9e>
    80017060:	6522                	ld	a0,8(sp)
    80017062:	f8aa                	sd	a0,112(sp)
                Some(PhysicalAddress::new(pagetable_addr))
    80017064:	ffffa097          	auipc	ra,0xffffa
    80017068:	564080e7          	jalr	1380(ra) # 800115c8 <_ZN6kernel6memory7address15PhysicalAddress3new17hf2b76f8479ac6235E>
    8001706c:	e02a                	sd	a0,0(sp)
    8001706e:	a009                	j	80017070 <_ZN6kernel6memory7mapping10page_table9PageTable13pgt_translate17h8fe9f71b8d139103E+0xae>
    80017070:	6502                	ld	a0,0(sp)
    80017072:	e4aa                	sd	a0,72(sp)
    80017074:	4505                	li	a0,1
    80017076:	e0aa                	sd	a0,64(sp)
        match self.translate(va){
    80017078:	a009                	j	8001707a <_ZN6kernel6memory7mapping10page_table9PageTable13pgt_translate17h8fe9f71b8d139103E+0xb8>
        }
    }
    8001707a:	6506                	ld	a0,64(sp)
    8001707c:	65a6                	ld	a1,72(sp)
    8001707e:	70e6                	ld	ra,120(sp)
    80017080:	6109                	addi	sp,sp,128
    80017082:	8082                	ret

Disassembly of section .text._ZN6kernel6memory7mapping10page_table9PageTable3map17h08dc54e6ac3f590cE:

0000000080017084 <_ZN6kernel6memory7mapping10page_table9PageTable3map17h08dc54e6ac3f590cE>:
    /// Create PTEs for virtual addresses starting at va that refer to
    /// physical addresses starting at pa. va and size might not
    /// be page-aligned. Returns 0 on success, -1 if walk() couldn't
    /// allocate a needed page-table page.
    /// 将虚拟地址与物理地址建立映射，并写入MMU中
    pub unsafe fn map(
    80017084:	7149                	addi	sp,sp,-368
    80017086:	f686                	sd	ra,360(sp)
    80017088:	f0ba                	sd	a4,96(sp)
    8001708a:	f4b6                	sd	a3,104(sp)
    8001708c:	f8aa                	sd	a0,112(sp)
    8001708e:	e12e                	sd	a1,128(sp)
    80017090:	e532                	sd	a2,136(sp)
    80017092:	fa2a                	sd	a0,304(sp)
    80017094:	fe36                	sd	a3,312(sp)
    80017096:	e2ba                	sd	a4,320(sp)
    80017098:	0108                	addi	a0,sp,128
        mut va: VirtualAddress, 
        mut pa: PhysicalAddress, 
        size:usize, 
        perm:PteFlags
    ) -> bool {
        let mut last = VirtualAddress::new(va.as_usize() + size);
    8001709a:	ffffa097          	auipc	ra,0xffffa
    8001709e:	45a080e7          	jalr	1114(ra) # 800114f4 <_ZN89_$LT$kernel..memory..address..VirtualAddress$u20$as$u20$kernel..memory..address..Addr$GT$8as_usize17h7916c21610008a66E>
    800170a2:	fcaa                	sd	a0,120(sp)
    800170a4:	a009                	j	800170a6 <_ZN6kernel6memory7mapping10page_table9PageTable3map17h08dc54e6ac3f590cE+0x22>
    800170a6:	75e6                	ld	a1,120(sp)
    800170a8:	7526                	ld	a0,104(sp)
    800170aa:	952e                	add	a0,a0,a1
    800170ac:	ecaa                	sd	a0,88(sp)
    800170ae:	1ab56163          	bltu	a0,a1,80017250 <.LBB6_36>
    800170b2:	a009                	j	800170b4 <_ZN6kernel6memory7mapping10page_table9PageTable3map17h08dc54e6ac3f590cE+0x30>
    800170b4:	6566                	ld	a0,88(sp)
    800170b6:	ffffa097          	auipc	ra,0xffffa
    800170ba:	462080e7          	jalr	1122(ra) # 80011518 <_ZN6kernel6memory7address14VirtualAddress3new17h716be423461f1938E>
    800170be:	ed2a                	sd	a0,152(sp)
    800170c0:	a009                	j	800170c2 <_ZN6kernel6memory7mapping10page_table9PageTable3map17h08dc54e6ac3f590cE+0x3e>
    800170c2:	0108                	addi	a0,sp,128
        va.pg_round_down();
    800170c4:	fffee097          	auipc	ra,0xfffee
    800170c8:	8ee080e7          	jalr	-1810(ra) # 800049b2 <_ZN6kernel6memory7address4Addr13pg_round_down17h7ab358be9f94b06bE>
    800170cc:	a009                	j	800170ce <_ZN6kernel6memory7mapping10page_table9PageTable3map17h08dc54e6ac3f590cE+0x4a>
    800170ce:	0928                	addi	a0,sp,152
        last.pg_round_up();
    800170d0:	fffed097          	auipc	ra,0xfffed
    800170d4:	7ce080e7          	jalr	1998(ra) # 8000489e <_ZN6kernel6memory7address4Addr11pg_round_up17h43579bab3405c977E>
    800170d8:	a009                	j	800170da <_ZN6kernel6memory7mapping10page_table9PageTable3map17h08dc54e6ac3f590cE+0x56>
    800170da:	0108                	addi	a0,sp,128
    800170dc:	092c                	addi	a1,sp,152
        while va != last{
    800170de:	ffffa097          	auipc	ra,0xffffa
    800170e2:	4f4080e7          	jalr	1268(ra) # 800115d2 <_ZN80_$LT$kernel..memory..address..VirtualAddress$u20$as$u20$core..cmp..PartialEq$GT$2ne17h594c009ca6e35357E>
    800170e6:	e8aa                	sd	a0,80(sp)
    800170e8:	a009                	j	800170ea <_ZN6kernel6memory7mapping10page_table9PageTable3map17h08dc54e6ac3f590cE+0x66>
    800170ea:	6546                	ld	a0,80(sp)
    800170ec:	e511                	bnez	a0,800170f8 <_ZN6kernel6memory7mapping10page_table9PageTable3map17h08dc54e6ac3f590cE+0x74>
    800170ee:	a009                	j	800170f0 <_ZN6kernel6memory7mapping10page_table9PageTable3map17h08dc54e6ac3f590cE+0x6c>
    800170f0:	4505                	li	a0,1

                }
                None => return false
             }
        }
        true
    800170f2:	08a10ba3          	sb	a0,151(sp)
    }
    800170f6:	aa81                	j	80017246 <.LBB6_35+0x2e>
            match self.translate_or_alloc(va){
    800170f8:	7546                	ld	a0,112(sp)
    800170fa:	658a                	ld	a1,128(sp)
    800170fc:	00000097          	auipc	ra,0x0
    80017100:	d14080e7          	jalr	-748(ra) # 80016e10 <_ZN6kernel6memory7mapping10page_table9PageTable18translate_or_alloc17ha9e02f6e0feabdb7E>
    80017104:	f12a                	sd	a0,160(sp)
    80017106:	a009                	j	80017108 <_ZN6kernel6memory7mapping10page_table9PageTable3map17h08dc54e6ac3f590cE+0x84>
                Some(pte) => {
    80017108:	750a                	ld	a0,160(sp)
    8001710a:	00a035b3          	snez	a1,a0
    8001710e:	4581                	li	a1,0
    80017110:	00b50463          	beq	a0,a1,80017118 <_ZN6kernel6memory7mapping10page_table9PageTable3map17h08dc54e6ac3f590cE+0x94>
    80017114:	a009                	j	80017116 <_ZN6kernel6memory7mapping10page_table9PageTable3map17h08dc54e6ac3f590cE+0x92>
    80017116:	a031                	j	80017122 <_ZN6kernel6memory7mapping10page_table9PageTable3map17h08dc54e6ac3f590cE+0x9e>
    80017118:	4501                	li	a0,0
                None => return false
    8001711a:	08a10ba3          	sb	a0,151(sp)
    }
    8001711e:	a225                	j	80017246 <.LBB6_35+0x2e>
            match self.translate_or_alloc(va){
    80017120:	0000                	unimp
                Some(pte) => {
    80017122:	750a                	ld	a0,160(sp)
    80017124:	e0aa                	sd	a0,64(sp)
    80017126:	e6aa                	sd	a0,328(sp)
                if pte.is_valid() {
    80017128:	ffff1097          	auipc	ra,0xffff1
    8001712c:	5f2080e7          	jalr	1522(ra) # 8000871a <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry8is_valid17h2b3a673d14ed09c6E>
    80017130:	e4aa                	sd	a0,72(sp)
    80017132:	a009                	j	80017134 <_ZN6kernel6memory7mapping10page_table9PageTable3map17h08dc54e6ac3f590cE+0xb0>
    80017134:	6526                	ld	a0,72(sp)
    80017136:	4581                	li	a1,0
    80017138:	00b50a63          	beq	a0,a1,8001714c <_ZN6kernel6memory7mapping10page_table9PageTable3map17h08dc54e6ac3f590cE+0xc8>
    8001713c:	a009                	j	8001713e <_ZN6kernel6memory7mapping10page_table9PageTable3map17h08dc54e6ac3f590cE+0xba>
    8001713e:	0108                	addi	a0,sp,128
                        va.as_usize(),
    80017140:	ffffa097          	auipc	ra,0xffffa
    80017144:	3b4080e7          	jalr	948(ra) # 800114f4 <_ZN89_$LT$kernel..memory..address..VirtualAddress$u20$as$u20$kernel..memory..address..Addr$GT$8as_usize17h7916c21610008a66E>
    80017148:	f22a                	sd	a0,288(sp)
    8001714a:	a809                	j	8001715c <_ZN6kernel6memory7mapping10page_table9PageTable3map17h08dc54e6ac3f590cE+0xd8>
                pte.write_perm(pa, perm);
    8001714c:	7606                	ld	a2,96(sp)
    8001714e:	6506                	ld	a0,64(sp)
    80017150:	65aa                	ld	a1,136(sp)
    80017152:	ffff1097          	auipc	ra,0xffff1
    80017156:	6d8080e7          	jalr	1752(ra) # 8000882a <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry10write_perm17h2feb85df16db2682E>
    8001715a:	a8c9                	j	8001722c <.LBB6_35+0x14>
    8001715c:	0128                	addi	a0,sp,136
                        pa.as_usize(),
    8001715e:	ffffa097          	auipc	ra,0xffffa
    80017162:	3a8080e7          	jalr	936(ra) # 80011506 <_ZN90_$LT$kernel..memory..address..PhysicalAddress$u20$as$u20$kernel..memory..address..Addr$GT$8as_usize17hea2eecdb80a1a2b2E>
    80017166:	f62a                	sd	a0,296(sp)
    80017168:	a009                	j	8001716a <_ZN6kernel6memory7mapping10page_table9PageTable3map17h08dc54e6ac3f590cE+0xe6>
    8001716a:	6586                	ld	a1,64(sp)
    8001716c:	1208                	addi	a0,sp,288
                    println!(
    8001716e:	e62a                	sd	a0,264(sp)
    80017170:	1230                	addi	a2,sp,296
    80017172:	f032                	sd	a2,32(sp)
    80017174:	ea32                	sd	a2,272(sp)
    80017176:	ee2e                	sd	a1,280(sp)
    80017178:	eaaa                	sd	a0,336(sp)
    8001717a:	eeb2                	sd	a2,344(sp)
    8001717c:	862e                	mv	a2,a1
    8001717e:	f432                	sd	a2,40(sp)
    80017180:	f2ae                	sd	a1,352(sp)

0000000080017182 <.LBB6_29>:
    80017182:	0000d597          	auipc	a1,0xd
    80017186:	0b858593          	addi	a1,a1,184 # 8002423a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h760b07191d46b3f2E>
    8001718a:	00008097          	auipc	ra,0x8
    8001718e:	39c080e7          	jalr	924(ra) # 8001f526 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    80017192:	f82a                	sd	a0,48(sp)
    80017194:	fc2e                	sd	a1,56(sp)
    80017196:	a009                	j	80017198 <.LBB6_29+0x16>
    80017198:	7502                	ld	a0,32(sp)

000000008001719a <.LBB6_30>:
    8001719a:	0000d597          	auipc	a1,0xd
    8001719e:	0a058593          	addi	a1,a1,160 # 8002423a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h760b07191d46b3f2E>
    800171a2:	00008097          	auipc	ra,0x8
    800171a6:	384080e7          	jalr	900(ra) # 8001f526 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    800171aa:	e82a                	sd	a0,16(sp)
    800171ac:	ec2e                	sd	a1,24(sp)
    800171ae:	a009                	j	800171b0 <.LBB6_30+0x16>
    800171b0:	7522                	ld	a0,40(sp)

00000000800171b2 <.LBB6_31>:
    800171b2:	0000d597          	auipc	a1,0xd
    800171b6:	08858593          	addi	a1,a1,136 # 8002423a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h760b07191d46b3f2E>
    800171ba:	00008097          	auipc	ra,0x8
    800171be:	36c080e7          	jalr	876(ra) # 8001f526 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    800171c2:	e02a                	sd	a0,0(sp)
    800171c4:	e42e                	sd	a1,8(sp)
    800171c6:	a009                	j	800171c8 <.LBB6_31+0x16>
    800171c8:	6522                	ld	a0,8(sp)
    800171ca:	6582                	ld	a1,0(sp)
    800171cc:	6662                	ld	a2,24(sp)
    800171ce:	66c2                	ld	a3,16(sp)
    800171d0:	7762                	ld	a4,56(sp)
    800171d2:	77c2                	ld	a5,48(sp)
    800171d4:	edbe                	sd	a5,216(sp)
    800171d6:	f1ba                	sd	a4,224(sp)
    800171d8:	f5b6                	sd	a3,232(sp)
    800171da:	f9b2                	sd	a2,240(sp)
    800171dc:	fdae                	sd	a1,248(sp)
    800171de:	e22a                	sd	a0,256(sp)

00000000800171e0 <.LBB6_32>:
    800171e0:	00013597          	auipc	a1,0x13
    800171e4:	ef058593          	addi	a1,a1,-272 # 8002a0d0 <.L__unnamed_10>

00000000800171e8 <.LBB6_33>:
    800171e8:	00013797          	auipc	a5,0x13
    800171ec:	f2878793          	addi	a5,a5,-216 # 8002a110 <.L__unnamed_11>
    800171f0:	1128                	addi	a0,sp,168
    800171f2:	4611                	li	a2,4
    800171f4:	09b4                	addi	a3,sp,216
    800171f6:	480d                	li	a6,3
    800171f8:	8742                	mv	a4,a6
    800171fa:	fffee097          	auipc	ra,0xfffee
    800171fe:	214080e7          	jalr	532(ra) # 8000540e <_ZN4core3fmt9Arguments16new_v1_formatted17hf6d3ed0f8e821319E>
    80017202:	a009                	j	80017204 <.LBB6_33+0x1c>
    80017204:	1128                	addi	a0,sp,168
    80017206:	00007097          	auipc	ra,0x7
    8001720a:	9aa080e7          	jalr	-1622(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8001720e:	a009                	j	80017210 <.LBB6_34>

0000000080017210 <.LBB6_34>:
                    panic!("remap");
    80017210:	00013517          	auipc	a0,0x13
    80017214:	fa850513          	addi	a0,a0,-88 # 8002a1b8 <.L__unnamed_12>

0000000080017218 <.LBB6_35>:
    80017218:	00013617          	auipc	a2,0x13
    8001721c:	fa860613          	addi	a2,a2,-88 # 8002a1c0 <.L__unnamed_13>
    80017220:	4595                	li	a1,5
    80017222:	0000b097          	auipc	ra,0xb
    80017226:	eda080e7          	jalr	-294(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8001722a:	0000                	unimp
    8001722c:	0108                	addi	a0,sp,128
                va.add_page();
    8001722e:	fffee097          	auipc	ra,0xfffee
    80017232:	806080e7          	jalr	-2042(ra) # 80004a34 <_ZN6kernel6memory7address4Addr8add_page17hda9f7615eed2e36aE>
    80017236:	a009                	j	80017238 <.LBB6_35+0x20>
    80017238:	0128                	addi	a0,sp,136
                pa.add_page();
    8001723a:	fffed097          	auipc	ra,0xfffed
    8001723e:	7b0080e7          	jalr	1968(ra) # 800049ea <_ZN6kernel6memory7address4Addr8add_page17h93c7d6ddd860f6baE>
    80017242:	a009                	j	80017244 <.LBB6_35+0x2c>
        while va != last{
    80017244:	bd59                	j	800170da <_ZN6kernel6memory7mapping10page_table9PageTable3map17h08dc54e6ac3f590cE+0x56>
    }
    80017246:	09714503          	lbu	a0,151(sp)
    8001724a:	70b6                	ld	ra,360(sp)
    8001724c:	6175                	addi	sp,sp,368
    8001724e:	8082                	ret

0000000080017250 <.LBB6_36>:
        let mut last = VirtualAddress::new(va.as_usize() + size);
    80017250:	00013517          	auipc	a0,0x13
    80017254:	e5050513          	addi	a0,a0,-432 # 8002a0a0 <str.0>

0000000080017258 <.LBB6_37>:
    80017258:	00013617          	auipc	a2,0x13
    8001725c:	e2860613          	addi	a2,a2,-472 # 8002a080 <.L__unnamed_14>
    80017260:	45f1                	li	a1,28
    80017262:	0000b097          	auipc	ra,0xb
    80017266:	e9a080e7          	jalr	-358(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel6memory7mapping10page_table9PageTable10kernel_map17h284e6512c0cc8b52E:

000000008001726c <_ZN6kernel6memory7mapping10page_table9PageTable10kernel_map17h284e6512c0cc8b52E>:

    /// add a mapping to the kernel page table.
    /// only used when booting
    /// does not flush TLB or enable paging   
    pub unsafe fn kernel_map(
    8001726c:	7139                	addi	sp,sp,-64
    8001726e:	fc06                	sd	ra,56(sp)
    80017270:	e82a                	sd	a0,16(sp)
    80017272:	ec2e                	sd	a1,24(sp)
    80017274:	f032                	sd	a2,32(sp)
    80017276:	f436                	sd	a3,40(sp)
    80017278:	f83a                	sd	a4,48(sp)
        //     "kvm_map: va={:#x}, pa={:#x}, size={:#x}",
        //     va.as_usize(),
        //     pa.as_usize(),
        //     size
        // );
        if !self.map(va, pa, size, perm){
    8001727a:	00000097          	auipc	ra,0x0
    8001727e:	e0a080e7          	jalr	-502(ra) # 80017084 <_ZN6kernel6memory7mapping10page_table9PageTable3map17h08dc54e6ac3f590cE>
    80017282:	e42a                	sd	a0,8(sp)
    80017284:	a009                	j	80017286 <_ZN6kernel6memory7mapping10page_table9PageTable10kernel_map17h284e6512c0cc8b52E+0x1a>
    80017286:	6522                	ld	a0,8(sp)
    80017288:	e105                	bnez	a0,800172a8 <.LBB7_5+0x14>
    8001728a:	a009                	j	8001728c <.LBB7_4>

000000008001728c <.LBB7_4>:
            panic!("内核虚拟地址映射失败");
    8001728c:	00013517          	auipc	a0,0x13
    80017290:	f4c50513          	addi	a0,a0,-180 # 8002a1d8 <.L__unnamed_15>

0000000080017294 <.LBB7_5>:
    80017294:	00013617          	auipc	a2,0x13
    80017298:	f6460613          	addi	a2,a2,-156 # 8002a1f8 <.L__unnamed_16>
    8001729c:	45f9                	li	a1,30
    8001729e:	0000b097          	auipc	ra,0xb
    800172a2:	e5e080e7          	jalr	-418(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    800172a6:	0000                	unimp
        }
    }
    800172a8:	70e2                	ld	ra,56(sp)
    800172aa:	6121                	addi	sp,sp,64
    800172ac:	8082                	ret

Disassembly of section .text._ZN6kernel6memory7mapping10page_table9PageTable9uvmcreate17hc2bd2b6aed1ce488E:

00000000800172ae <_ZN6kernel6memory7mapping10page_table9PageTable9uvmcreate17hc2bd2b6aed1ce488E>:


    /// Create an empty user page table.
    /// return None if out of memory
    pub unsafe fn uvmcreate() -> *mut PageTable{
    800172ae:	7179                	addi	sp,sp,-48
        let pagetable: Box<PageTable> = Box::new_zeroed().assume_init();
    800172b0:	f406                	sd	ra,40(sp)
    800172b2:	00004097          	auipc	ra,0x4
    800172b6:	450080e7          	jalr	1104(ra) # 8001b702 <_ZN5alloc5boxed12Box$LT$T$GT$10new_zeroed17he11e171c2ca6c076E>
    800172ba:	e82a                	sd	a0,16(sp)
    800172bc:	a009                	j	800172be <_ZN6kernel6memory7mapping10page_table9PageTable9uvmcreate17hc2bd2b6aed1ce488E+0x10>
    800172be:	6542                	ld	a0,16(sp)
    800172c0:	00005097          	auipc	ra,0x5
    800172c4:	fb4080e7          	jalr	-76(ra) # 8001c274 <_ZN5alloc5boxed60Box$LT$core..mem..maybe_uninit..MaybeUninit$LT$T$GT$$C$A$GT$11assume_init17h2fe4f6739411edd0E>
    800172c8:	85aa                	mv	a1,a0
    800172ca:	e42e                	sd	a1,8(sp)
    800172cc:	ec2a                	sd	a0,24(sp)
    800172ce:	a009                	j	800172d0 <_ZN6kernel6memory7mapping10page_table9PageTable9uvmcreate17hc2bd2b6aed1ce488E+0x22>
        let ptr = Box::into_raw(pagetable);
    800172d0:	6522                	ld	a0,8(sp)
    800172d2:	00005097          	auipc	ra,0x5
    800172d6:	f18080e7          	jalr	-232(ra) # 8001c1ea <_ZN5alloc5boxed16Box$LT$T$C$A$GT$8into_raw17h11a22cb7d9ea1552E>
    800172da:	85aa                	mv	a1,a0
    800172dc:	e02e                	sd	a1,0(sp)
    800172de:	f02a                	sd	a0,32(sp)
    800172e0:	a009                	j	800172e2 <_ZN6kernel6memory7mapping10page_table9PageTable9uvmcreate17hc2bd2b6aed1ce488E+0x34>
        ptr
    }
    800172e2:	6502                	ld	a0,0(sp)
    800172e4:	70a2                	ld	ra,40(sp)
    800172e6:	6145                	addi	sp,sp,48
    800172e8:	8082                	ret

Disassembly of section .text._ZN6kernel6memory7mapping10page_table9PageTable8uvm_init17h1e8988bec17c91edE:

00000000800172ea <_ZN6kernel6memory7mapping10page_table9PageTable8uvm_init17h1e8988bec17c91edE>:

    /// Load the user initcode into address 0 of pagetable
    /// for the very first process
    /// size must be less than a page
    pub unsafe fn uvm_init(&mut self, src: &[u8]){
    800172ea:	7175                	addi	sp,sp,-144
    800172ec:	e506                	sd	ra,136(sp)
    800172ee:	e4b2                	sd	a2,72(sp)
    800172f0:	862e                	mv	a2,a1
    800172f2:	65a6                	ld	a1,72(sp)
    800172f4:	e8b2                	sd	a2,80(sp)
    800172f6:	862a                	mv	a2,a0
    800172f8:	6546                	ld	a0,80(sp)
    800172fa:	ecb2                	sd	a2,88(sp)
    800172fc:	f4b2                	sd	a2,104(sp)
    800172fe:	f8aa                	sd	a0,112(sp)
    80017300:	fcae                	sd	a1,120(sp)
        if src.len() >= PGSIZE{
    80017302:	00008097          	auipc	ra,0x8
    80017306:	158080e7          	jalr	344(ra) # 8001f45a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hb06ce83b043493f3E>
    8001730a:	f0aa                	sd	a0,96(sp)
    8001730c:	a009                	j	8001730e <_ZN6kernel6memory7mapping10page_table9PageTable8uvm_init17h1e8988bec17c91edE+0x24>
    8001730e:	7506                	ld	a0,96(sp)
    80017310:	8131                	srli	a0,a0,0xc
    80017312:	4581                	li	a1,0
    80017314:	02b50163          	beq	a0,a1,80017336 <.LBB9_15+0x14>
    80017318:	a009                	j	8001731a <.LBB9_14>

000000008001731a <.LBB9_14>:
            panic!("inituvm: more than a page");
    8001731a:	00013517          	auipc	a0,0x13
    8001731e:	ef650513          	addi	a0,a0,-266 # 8002a210 <.L__unnamed_17>

0000000080017322 <.LBB9_15>:
    80017322:	00013617          	auipc	a2,0x13
    80017326:	f0e60613          	addi	a2,a2,-242 # 8002a230 <.L__unnamed_18>
    8001732a:	45e5                	li	a1,25
    8001732c:	0000b097          	auipc	ra,0xb
    80017330:	dd0080e7          	jalr	-560(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80017334:	0000                	unimp
        }

        let mem = RawPage::new_zeroed() as *mut u8;
    80017336:	ffff3097          	auipc	ra,0xffff3
    8001733a:	c78080e7          	jalr	-904(ra) # 80009fae <_ZN6kernel6memory13PageAllocator10new_zeroed17hbc99bdbca8d1d931E>
    8001733e:	e0aa                	sd	a0,64(sp)
    80017340:	a009                	j	80017342 <.LBB9_15+0x20>
    80017342:	6506                	ld	a0,64(sp)
    80017344:	85aa                	mv	a1,a0
    80017346:	fc2e                	sd	a1,56(sp)
    80017348:	e12a                	sd	a0,128(sp)
    8001734a:	4581                	li	a1,0
    8001734c:	6605                	lui	a2,0x1
        write_bytes(mem, 0, PGSIZE);
    8001734e:	0000a097          	auipc	ra,0xa
    80017352:	668080e7          	jalr	1640(ra) # 800219b6 <_ZN4core10intrinsics11write_bytes17hfabd30e5bfcb1b55E>
    80017356:	a009                	j	80017358 <.LBB9_15+0x36>
    80017358:	4501                	li	a0,0

        self.map(
            VirtualAddress::new(0), 
    8001735a:	ffffa097          	auipc	ra,0xffffa
    8001735e:	1be080e7          	jalr	446(ra) # 80011518 <_ZN6kernel6memory7address14VirtualAddress3new17h716be423461f1938E>
    80017362:	f82a                	sd	a0,48(sp)
    80017364:	a009                	j	80017366 <.LBB9_15+0x44>
            PhysicalAddress::new(mem as usize), 
    80017366:	7562                	ld	a0,56(sp)
    80017368:	ffffa097          	auipc	ra,0xffffa
    8001736c:	260080e7          	jalr	608(ra) # 800115c8 <_ZN6kernel6memory7address15PhysicalAddress3new17hf2b76f8479ac6235E>
    80017370:	f42a                	sd	a0,40(sp)
    80017372:	a009                	j	80017374 <.LBB9_15+0x52>
    80017374:	4511                	li	a0,4
    80017376:	4589                	li	a1,2
            PGSIZE, 
            PteFlags::W | PteFlags::R | PteFlags::X | PteFlags::U
    80017378:	ffff1097          	auipc	ra,0xffff1
    8001737c:	522080e7          	jalr	1314(ra) # 8000889a <_ZN93_$LT$kernel..memory..mapping..page_table_entry..PteFlags$u20$as$u20$core..ops..bit..BitOr$GT$5bitor17h95bfa721b377cbd2E>
    80017380:	f02a                	sd	a0,32(sp)
    80017382:	a009                	j	80017384 <.LBB9_15+0x62>
    80017384:	7502                	ld	a0,32(sp)
    80017386:	45a1                	li	a1,8
    80017388:	ffff1097          	auipc	ra,0xffff1
    8001738c:	512080e7          	jalr	1298(ra) # 8000889a <_ZN93_$LT$kernel..memory..mapping..page_table_entry..PteFlags$u20$as$u20$core..ops..bit..BitOr$GT$5bitor17h95bfa721b377cbd2E>
    80017390:	ec2a                	sd	a0,24(sp)
    80017392:	a009                	j	80017394 <.LBB9_15+0x72>
    80017394:	6562                	ld	a0,24(sp)
    80017396:	45c1                	li	a1,16
    80017398:	ffff1097          	auipc	ra,0xffff1
    8001739c:	502080e7          	jalr	1282(ra) # 8000889a <_ZN93_$LT$kernel..memory..mapping..page_table_entry..PteFlags$u20$as$u20$core..ops..bit..BitOr$GT$5bitor17h95bfa721b377cbd2E>
    800173a0:	e82a                	sd	a0,16(sp)
    800173a2:	a009                	j	800173a4 <.LBB9_15+0x82>
        self.map(
    800173a4:	6742                	ld	a4,16(sp)
    800173a6:	7622                	ld	a2,40(sp)
    800173a8:	75c2                	ld	a1,48(sp)
    800173aa:	6566                	ld	a0,88(sp)
    800173ac:	6685                	lui	a3,0x1
    800173ae:	00000097          	auipc	ra,0x0
    800173b2:	cd6080e7          	jalr	-810(ra) # 80017084 <_ZN6kernel6memory7mapping10page_table9PageTable3map17h08dc54e6ac3f590cE>
    800173b6:	a009                	j	800173b8 <.LBB9_15+0x96>
        );

        copy_nonoverlapping(src.as_ptr(), mem, src.len());
    800173b8:	65a6                	ld	a1,72(sp)
    800173ba:	6546                	ld	a0,80(sp)
    800173bc:	00008097          	auipc	ra,0x8
    800173c0:	0fa080e7          	jalr	250(ra) # 8001f4b6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hf7620495824cfb20E>
    800173c4:	e42a                	sd	a0,8(sp)
    800173c6:	a009                	j	800173c8 <.LBB9_15+0xa6>
    800173c8:	65a6                	ld	a1,72(sp)
    800173ca:	6546                	ld	a0,80(sp)
    800173cc:	00008097          	auipc	ra,0x8
    800173d0:	08e080e7          	jalr	142(ra) # 8001f45a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hb06ce83b043493f3E>
    800173d4:	e02a                	sd	a0,0(sp)
    800173d6:	a009                	j	800173d8 <.LBB9_15+0xb6>
    800173d8:	6602                	ld	a2,0(sp)
    800173da:	65a2                	ld	a1,8(sp)
    800173dc:	7562                	ld	a0,56(sp)
    800173de:	0000e097          	auipc	ra,0xe
    800173e2:	c5c080e7          	jalr	-932(ra) # 8002503a <memcpy>
    }
    800173e6:	60aa                	ld	ra,136(sp)
    800173e8:	6149                	addi	sp,sp,144
    800173ea:	8082                	ret

Disassembly of section .text._ZN6kernel6memory7mapping10page_table9PageTable9uvm_alloc17h600a2c8e8dc8349aE:

00000000800173ec <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_alloc17h600a2c8e8dc8349aE>:


    /// Allocate PTEs and physical memory to grow process from old_size to
    /// new_size, which need not be page aligned.  Returns new size or 0 on error.
    pub unsafe fn uvm_alloc(
    800173ec:	7169                	addi	sp,sp,-304
    800173ee:	f606                	sd	ra,296(sp)
    800173f0:	e8b2                	sd	a2,80(sp)
    800173f2:	ecaa                	sd	a0,88(sp)
    800173f4:	f0ae                	sd	a1,96(sp)
    800173f6:	fdaa                	sd	a0,248(sp)
    800173f8:	e232                	sd	a2,256(sp)
        &mut self, 
        mut old_size: usize, 
        new_size: usize
    ) -> Option<usize> {
        if new_size < old_size {
    800173fa:	00b67863          	bgeu	a2,a1,8001740a <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_alloc17h600a2c8e8dc8349aE+0x1e>
    800173fe:	a009                	j	80017400 <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_alloc17h600a2c8e8dc8349aE+0x14>
            return Some(old_size)
    80017400:	7506                	ld	a0,96(sp)
    80017402:	f8aa                	sd	a0,112(sp)
    80017404:	4505                	li	a0,1
    80017406:	f4aa                	sd	a0,104(sp)
    80017408:	aa31                	j	80017524 <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_alloc17h600a2c8e8dc8349aE+0x138>
        }

        old_size = page_round_up(old_size);
    8001740a:	7506                	ld	a0,96(sp)
    8001740c:	00006097          	auipc	ra,0x6
    80017410:	27a080e7          	jalr	634(ra) # 8001d686 <_ZN6kernel6memory7mapping13page_round_up17h53b8f5a3d9b0c04fE>
    80017414:	e4aa                	sd	a0,72(sp)
    80017416:	a009                	j	80017418 <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_alloc17h600a2c8e8dc8349aE+0x2c>
    80017418:	6646                	ld	a2,80(sp)
    8001741a:	65a6                	ld	a1,72(sp)
    8001741c:	f0ae                	sd	a1,96(sp)

        for cur_size in (old_size..new_size).step_by(PGSIZE) {
    8001741e:	fd2e                	sd	a1,184(sp)
    80017420:	e1b2                	sd	a2,192(sp)
    80017422:	0928                	addi	a0,sp,152
    80017424:	6685                	lui	a3,0x1
    80017426:	ffff4097          	auipc	ra,0xffff4
    8001742a:	55c080e7          	jalr	1372(ra) # 8000b982 <_ZN4core4iter6traits8iterator8Iterator7step_by17hcae6c74a630fccd6E>
    8001742e:	a009                	j	80017430 <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_alloc17h600a2c8e8dc8349aE+0x44>
    80017430:	18a8                	addi	a0,sp,120
    80017432:	092c                	addi	a1,sp,152
    80017434:	00006097          	auipc	ra,0x6
    80017438:	9be080e7          	jalr	-1602(ra) # 8001cdf2 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h119fa1ab69bc712dE>
    8001743c:	a009                	j	8001743e <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_alloc17h600a2c8e8dc8349aE+0x52>
    8001743e:	654a                	ld	a0,144(sp)
    80017440:	f1aa                	sd	a0,224(sp)
    80017442:	652a                	ld	a0,136(sp)
    80017444:	edaa                	sd	a0,216(sp)
    80017446:	650a                	ld	a0,128(sp)
    80017448:	e9aa                	sd	a0,208(sp)
    8001744a:	7566                	ld	a0,120(sp)
    8001744c:	e5aa                	sd	a0,200(sp)
    8001744e:	a009                	j	80017450 <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_alloc17h600a2c8e8dc8349aE+0x64>
    80017450:	01a8                	addi	a0,sp,200
    80017452:	00006097          	auipc	ra,0x6
    80017456:	89c080e7          	jalr	-1892(ra) # 8001ccee <_ZN105_$LT$core..iter..adapters..step_by..StepBy$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h75ab964dca744767E>
    8001745a:	f5aa                	sd	a0,232(sp)
    8001745c:	f9ae                	sd	a1,240(sp)
    8001745e:	a009                	j	80017460 <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_alloc17h600a2c8e8dc8349aE+0x74>
    80017460:	752e                	ld	a0,232(sp)
    80017462:	4581                	li	a1,0
    80017464:	00b50463          	beq	a0,a1,8001746c <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_alloc17h600a2c8e8dc8349aE+0x80>
    80017468:	a009                	j	8001746a <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_alloc17h600a2c8e8dc8349aE+0x7e>
    8001746a:	a039                	j	80017478 <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_alloc17h600a2c8e8dc8349aE+0x8c>
                self.uvm_dealloc(cur_size, old_size);
                return None
            }
        }

        Some(new_size)
    8001746c:	6546                	ld	a0,80(sp)
    8001746e:	f8aa                	sd	a0,112(sp)
    80017470:	4505                	li	a0,1
    80017472:	f4aa                	sd	a0,104(sp)
    }
    80017474:	a845                	j	80017524 <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_alloc17h600a2c8e8dc8349aE+0x138>
        for cur_size in (old_size..new_size).step_by(PGSIZE) {
    80017476:	0000                	unimp
    80017478:	754e                	ld	a0,240(sp)
    8001747a:	fc2a                	sd	a0,56(sp)
    8001747c:	e62a                	sd	a0,264(sp)
    8001747e:	ea2a                	sd	a0,272(sp)
    80017480:	ee2a                	sd	a0,280(sp)
            let memory = RawPage::new_zeroed();
    80017482:	ffff3097          	auipc	ra,0xffff3
    80017486:	b2c080e7          	jalr	-1236(ra) # 80009fae <_ZN6kernel6memory13PageAllocator10new_zeroed17hbc99bdbca8d1d931E>
    8001748a:	85aa                	mv	a1,a0
    8001748c:	e0ae                	sd	a1,64(sp)
    8001748e:	f22a                	sd	a0,288(sp)
    80017490:	a009                	j	80017492 <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_alloc17h600a2c8e8dc8349aE+0xa6>
            write_bytes(memory as *mut u8, 0, PGSIZE);
    80017492:	6506                	ld	a0,64(sp)
    80017494:	4581                	li	a1,0
    80017496:	6605                	lui	a2,0x1
    80017498:	0000a097          	auipc	ra,0xa
    8001749c:	51e080e7          	jalr	1310(ra) # 800219b6 <_ZN4core10intrinsics11write_bytes17hfabd30e5bfcb1b55E>
    800174a0:	a009                	j	800174a2 <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_alloc17h600a2c8e8dc8349aE+0xb6>
                VirtualAddress::new(cur_size), 
    800174a2:	7562                	ld	a0,56(sp)
    800174a4:	ffffa097          	auipc	ra,0xffffa
    800174a8:	074080e7          	jalr	116(ra) # 80011518 <_ZN6kernel6memory7address14VirtualAddress3new17h716be423461f1938E>
    800174ac:	f82a                	sd	a0,48(sp)
    800174ae:	a009                	j	800174b0 <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_alloc17h600a2c8e8dc8349aE+0xc4>
                PhysicalAddress::new(memory), 
    800174b0:	6506                	ld	a0,64(sp)
    800174b2:	ffffa097          	auipc	ra,0xffffa
    800174b6:	116080e7          	jalr	278(ra) # 800115c8 <_ZN6kernel6memory7address15PhysicalAddress3new17hf2b76f8479ac6235E>
    800174ba:	f42a                	sd	a0,40(sp)
    800174bc:	a009                	j	800174be <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_alloc17h600a2c8e8dc8349aE+0xd2>
    800174be:	4511                	li	a0,4
    800174c0:	4589                	li	a1,2
                PteFlags::W | PteFlags::R | PteFlags::X | PteFlags::U
    800174c2:	ffff1097          	auipc	ra,0xffff1
    800174c6:	3d8080e7          	jalr	984(ra) # 8000889a <_ZN93_$LT$kernel..memory..mapping..page_table_entry..PteFlags$u20$as$u20$core..ops..bit..BitOr$GT$5bitor17h95bfa721b377cbd2E>
    800174ca:	f02a                	sd	a0,32(sp)
    800174cc:	a009                	j	800174ce <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_alloc17h600a2c8e8dc8349aE+0xe2>
    800174ce:	7502                	ld	a0,32(sp)
    800174d0:	45a1                	li	a1,8
    800174d2:	ffff1097          	auipc	ra,0xffff1
    800174d6:	3c8080e7          	jalr	968(ra) # 8000889a <_ZN93_$LT$kernel..memory..mapping..page_table_entry..PteFlags$u20$as$u20$core..ops..bit..BitOr$GT$5bitor17h95bfa721b377cbd2E>
    800174da:	ec2a                	sd	a0,24(sp)
    800174dc:	a009                	j	800174de <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_alloc17h600a2c8e8dc8349aE+0xf2>
    800174de:	6562                	ld	a0,24(sp)
    800174e0:	45c1                	li	a1,16
    800174e2:	ffff1097          	auipc	ra,0xffff1
    800174e6:	3b8080e7          	jalr	952(ra) # 8000889a <_ZN93_$LT$kernel..memory..mapping..page_table_entry..PteFlags$u20$as$u20$core..ops..bit..BitOr$GT$5bitor17h95bfa721b377cbd2E>
    800174ea:	e82a                	sd	a0,16(sp)
    800174ec:	a009                	j	800174ee <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_alloc17h600a2c8e8dc8349aE+0x102>
            if !self.map(
    800174ee:	6742                	ld	a4,16(sp)
    800174f0:	7622                	ld	a2,40(sp)
    800174f2:	75c2                	ld	a1,48(sp)
    800174f4:	6566                	ld	a0,88(sp)
    800174f6:	6685                	lui	a3,0x1
    800174f8:	00000097          	auipc	ra,0x0
    800174fc:	b8c080e7          	jalr	-1140(ra) # 80017084 <_ZN6kernel6memory7mapping10page_table9PageTable3map17h08dc54e6ac3f590cE>
    80017500:	e42a                	sd	a0,8(sp)
    80017502:	a009                	j	80017504 <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_alloc17h600a2c8e8dc8349aE+0x118>
    80017504:	6522                	ld	a0,8(sp)
    80017506:	e119                	bnez	a0,8001750c <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_alloc17h600a2c8e8dc8349aE+0x120>
    80017508:	a009                	j	8001750a <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_alloc17h600a2c8e8dc8349aE+0x11e>
                drop_in_place(memory as *mut RawPage);
    8001750a:	a011                	j	8001750e <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_alloc17h600a2c8e8dc8349aE+0x122>
        for cur_size in (old_size..new_size).step_by(PGSIZE) {
    8001750c:	b791                	j	80017450 <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_alloc17h600a2c8e8dc8349aE+0x64>
                self.uvm_dealloc(cur_size, old_size);
    8001750e:	75e2                	ld	a1,56(sp)
    80017510:	6566                	ld	a0,88(sp)
    80017512:	7606                	ld	a2,96(sp)
    80017514:	00000097          	auipc	ra,0x0
    80017518:	088080e7          	jalr	136(ra) # 8001759c <_ZN6kernel6memory7mapping10page_table9PageTable11uvm_dealloc17hf5596dd69dc9e626E>
    8001751c:	a009                	j	8001751e <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_alloc17h600a2c8e8dc8349aE+0x132>
    8001751e:	4501                	li	a0,0
                return None
    80017520:	f4aa                	sd	a0,104(sp)
    80017522:	a009                	j	80017524 <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_alloc17h600a2c8e8dc8349aE+0x138>
    }
    80017524:	7526                	ld	a0,104(sp)
    80017526:	75c6                	ld	a1,112(sp)
    80017528:	70b2                	ld	ra,296(sp)
    8001752a:	6155                	addi	sp,sp,304
    8001752c:	8082                	ret

Disassembly of section .text._ZN6kernel6memory7mapping10page_table9PageTable8uvm_free17h541177c5e75f280dE:

000000008001752e <_ZN6kernel6memory7mapping10page_table9PageTable8uvm_free17h541177c5e75f280dE>:

    /// Free user memory pages,
    /// then free page-table pages
    pub fn uvm_free(&mut self, size: usize) {
    8001752e:	711d                	addi	sp,sp,-96
    80017530:	ec86                	sd	ra,88(sp)
    80017532:	f02e                	sd	a1,32(sp)
    80017534:	f42a                	sd	a0,40(sp)
    80017536:	e0aa                	sd	a0,64(sp)
    80017538:	e4ae                	sd	a1,72(sp)
    8001753a:	4501                	li	a0,0
        if size > 0 {
    8001753c:	00a58a63          	beq	a1,a0,80017550 <_ZN6kernel6memory7mapping10page_table9PageTable8uvm_free17h541177c5e75f280dE+0x22>
    80017540:	a009                	j	80017542 <_ZN6kernel6memory7mapping10page_table9PageTable8uvm_free17h541177c5e75f280dE+0x14>
            let mut pa = PhysicalAddress::new(size);
    80017542:	7502                	ld	a0,32(sp)
    80017544:	ffffa097          	auipc	ra,0xffffa
    80017548:	084080e7          	jalr	132(ra) # 800115c8 <_ZN6kernel6memory7address15PhysicalAddress3new17hf2b76f8479ac6235E>
    8001754c:	fc2a                	sd	a0,56(sp)
    8001754e:	a011                	j	80017552 <_ZN6kernel6memory7mapping10page_table9PageTable8uvm_free17h541177c5e75f280dE+0x24>
        if size > 0 {
    80017550:	a099                	j	80017596 <_ZN6kernel6memory7mapping10page_table9PageTable8uvm_free17h541177c5e75f280dE+0x68>
    80017552:	1828                	addi	a0,sp,56
            pa.pg_round_up();
    80017554:	fffed097          	auipc	ra,0xfffed
    80017558:	3d4080e7          	jalr	980(ra) # 80004928 <_ZN6kernel6memory7address4Addr11pg_round_up17h93ce0bf629830ebdE>
    8001755c:	a009                	j	8001755e <_ZN6kernel6memory7mapping10page_table9PageTable8uvm_free17h541177c5e75f280dE+0x30>
    8001755e:	1828                	addi	a0,sp,56
            let ppn = pa.as_usize() / PGSIZE;
    80017560:	ffffa097          	auipc	ra,0xffffa
    80017564:	fa6080e7          	jalr	-90(ra) # 80011506 <_ZN90_$LT$kernel..memory..address..PhysicalAddress$u20$as$u20$kernel..memory..address..Addr$GT$8as_usize17hea2eecdb80a1a2b2E>
    80017568:	ec2a                	sd	a0,24(sp)
    8001756a:	a009                	j	8001756c <_ZN6kernel6memory7mapping10page_table9PageTable8uvm_free17h541177c5e75f280dE+0x3e>
    8001756c:	6562                	ld	a0,24(sp)
    8001756e:	8131                	srli	a0,a0,0xc
    80017570:	e42a                	sd	a0,8(sp)
    80017572:	e8aa                	sd	a0,80(sp)
    80017574:	4501                	li	a0,0
            self.uvm_unmap(
                VirtualAddress::new(0),
    80017576:	ffffa097          	auipc	ra,0xffffa
    8001757a:	fa2080e7          	jalr	-94(ra) # 80011518 <_ZN6kernel6memory7address14VirtualAddress3new17h716be423461f1938E>
    8001757e:	e82a                	sd	a0,16(sp)
    80017580:	a009                	j	80017582 <_ZN6kernel6memory7mapping10page_table9PageTable8uvm_free17h541177c5e75f280dE+0x54>
            self.uvm_unmap(
    80017582:	6622                	ld	a2,8(sp)
    80017584:	65c2                	ld	a1,16(sp)
    80017586:	7522                	ld	a0,40(sp)
    80017588:	4685                	li	a3,1
    8001758a:	00000097          	auipc	ra,0x0
    8001758e:	0e6080e7          	jalr	230(ra) # 80017670 <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_unmap17hab395d2793038c03E>
    80017592:	a009                	j	80017594 <_ZN6kernel6memory7mapping10page_table9PageTable8uvm_free17h541177c5e75f280dE+0x66>
        if size > 0 {
    80017594:	a009                	j	80017596 <_ZN6kernel6memory7mapping10page_table9PageTable8uvm_free17h541177c5e75f280dE+0x68>
                ppn,
                true
            );
        }
        // drop(self);
    }
    80017596:	60e6                	ld	ra,88(sp)
    80017598:	6125                	addi	sp,sp,96
    8001759a:	8082                	ret

Disassembly of section .text._ZN6kernel6memory7mapping10page_table9PageTable11uvm_dealloc17hf5596dd69dc9e626E:

000000008001759c <_ZN6kernel6memory7mapping10page_table9PageTable11uvm_dealloc17hf5596dd69dc9e626E>:

    /// Deallocate user pages to bring the process size from old_size to
    /// new_size.  old_size and new_size need not be page-aligned, nor does new_size
    /// need to be less than old_size.  old_size can be larger than the actual
    /// process size.  Returns the new process size.
    pub fn uvm_dealloc(
    8001759c:	7175                	addi	sp,sp,-144
    8001759e:	e506                	sd	ra,136(sp)
    800175a0:	e4b2                	sd	a2,72(sp)
    800175a2:	e8ae                	sd	a1,80(sp)
    800175a4:	ecaa                	sd	a0,88(sp)
    800175a6:	f4aa                	sd	a0,104(sp)
    800175a8:	f8ae                	sd	a1,112(sp)
    800175aa:	fcb2                	sd	a2,120(sp)
        &mut self, 
        old_size:usize, 
        new_size:usize
    ) -> usize {
        if new_size >= old_size { 
    800175ac:	00b66663          	bltu	a2,a1,800175b8 <_ZN6kernel6memory7mapping10page_table9PageTable11uvm_dealloc17hf5596dd69dc9e626E+0x1c>
    800175b0:	a009                	j	800175b2 <_ZN6kernel6memory7mapping10page_table9PageTable11uvm_dealloc17hf5596dd69dc9e626E+0x16>
            return old_size
    800175b2:	6546                	ld	a0,80(sp)
    800175b4:	f0aa                	sd	a0,96(sp)
            );
        }

        new_size

    }
    800175b6:	a851                	j	8001764a <_ZN6kernel6memory7mapping10page_table9PageTable11uvm_dealloc17hf5596dd69dc9e626E+0xae>
        if page_round_up(new_size) < page_round_up(old_size) {
    800175b8:	6526                	ld	a0,72(sp)
    800175ba:	00006097          	auipc	ra,0x6
    800175be:	0cc080e7          	jalr	204(ra) # 8001d686 <_ZN6kernel6memory7mapping13page_round_up17h53b8f5a3d9b0c04fE>
    800175c2:	e0aa                	sd	a0,64(sp)
    800175c4:	a009                	j	800175c6 <_ZN6kernel6memory7mapping10page_table9PageTable11uvm_dealloc17hf5596dd69dc9e626E+0x2a>
    800175c6:	6546                	ld	a0,80(sp)
    800175c8:	00006097          	auipc	ra,0x6
    800175cc:	0be080e7          	jalr	190(ra) # 8001d686 <_ZN6kernel6memory7mapping13page_round_up17h53b8f5a3d9b0c04fE>
    800175d0:	fc2a                	sd	a0,56(sp)
    800175d2:	a009                	j	800175d4 <_ZN6kernel6memory7mapping10page_table9PageTable11uvm_dealloc17hf5596dd69dc9e626E+0x38>
    800175d4:	6506                	ld	a0,64(sp)
    800175d6:	75e2                	ld	a1,56(sp)
    800175d8:	00b57a63          	bgeu	a0,a1,800175ec <_ZN6kernel6memory7mapping10page_table9PageTable11uvm_dealloc17hf5596dd69dc9e626E+0x50>
    800175dc:	a009                	j	800175de <_ZN6kernel6memory7mapping10page_table9PageTable11uvm_dealloc17hf5596dd69dc9e626E+0x42>
            let pages_num = (page_round_up(old_size) - page_round_up(new_size)) / PGSIZE;
    800175de:	6546                	ld	a0,80(sp)
    800175e0:	00006097          	auipc	ra,0x6
    800175e4:	0a6080e7          	jalr	166(ra) # 8001d686 <_ZN6kernel6memory7mapping13page_round_up17h53b8f5a3d9b0c04fE>
    800175e8:	f82a                	sd	a0,48(sp)
    800175ea:	a011                	j	800175ee <_ZN6kernel6memory7mapping10page_table9PageTable11uvm_dealloc17hf5596dd69dc9e626E+0x52>
        if page_round_up(new_size) < page_round_up(old_size) {
    800175ec:	a8a1                	j	80017644 <_ZN6kernel6memory7mapping10page_table9PageTable11uvm_dealloc17hf5596dd69dc9e626E+0xa8>
            let pages_num = (page_round_up(old_size) - page_round_up(new_size)) / PGSIZE;
    800175ee:	6526                	ld	a0,72(sp)
    800175f0:	00006097          	auipc	ra,0x6
    800175f4:	096080e7          	jalr	150(ra) # 8001d686 <_ZN6kernel6memory7mapping13page_round_up17h53b8f5a3d9b0c04fE>
    800175f8:	f42a                	sd	a0,40(sp)
    800175fa:	a009                	j	800175fc <_ZN6kernel6memory7mapping10page_table9PageTable11uvm_dealloc17hf5596dd69dc9e626E+0x60>
    800175fc:	7542                	ld	a0,48(sp)
    800175fe:	75a2                	ld	a1,40(sp)
    80017600:	40b505b3          	sub	a1,a0,a1
    80017604:	f02e                	sd	a1,32(sp)
    80017606:	04b56663          	bltu	a0,a1,80017652 <.LBB12_16>
    8001760a:	a009                	j	8001760c <_ZN6kernel6memory7mapping10page_table9PageTable11uvm_dealloc17hf5596dd69dc9e626E+0x70>
    8001760c:	6526                	ld	a0,72(sp)
    8001760e:	7582                	ld	a1,32(sp)
    80017610:	81b1                	srli	a1,a1,0xc
    80017612:	e82e                	sd	a1,16(sp)
    80017614:	e12e                	sd	a1,128(sp)
                VirtualAddress::new(page_round_up(new_size)), 
    80017616:	00006097          	auipc	ra,0x6
    8001761a:	070080e7          	jalr	112(ra) # 8001d686 <_ZN6kernel6memory7mapping13page_round_up17h53b8f5a3d9b0c04fE>
    8001761e:	ec2a                	sd	a0,24(sp)
    80017620:	a009                	j	80017622 <_ZN6kernel6memory7mapping10page_table9PageTable11uvm_dealloc17hf5596dd69dc9e626E+0x86>
    80017622:	6562                	ld	a0,24(sp)
    80017624:	ffffa097          	auipc	ra,0xffffa
    80017628:	ef4080e7          	jalr	-268(ra) # 80011518 <_ZN6kernel6memory7address14VirtualAddress3new17h716be423461f1938E>
    8001762c:	e42a                	sd	a0,8(sp)
    8001762e:	a009                	j	80017630 <_ZN6kernel6memory7mapping10page_table9PageTable11uvm_dealloc17hf5596dd69dc9e626E+0x94>
            self.uvm_unmap(
    80017630:	6642                	ld	a2,16(sp)
    80017632:	65a2                	ld	a1,8(sp)
    80017634:	6566                	ld	a0,88(sp)
    80017636:	4685                	li	a3,1
    80017638:	00000097          	auipc	ra,0x0
    8001763c:	038080e7          	jalr	56(ra) # 80017670 <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_unmap17hab395d2793038c03E>
    80017640:	a009                	j	80017642 <_ZN6kernel6memory7mapping10page_table9PageTable11uvm_dealloc17hf5596dd69dc9e626E+0xa6>
        if page_round_up(new_size) < page_round_up(old_size) {
    80017642:	a009                	j	80017644 <_ZN6kernel6memory7mapping10page_table9PageTable11uvm_dealloc17hf5596dd69dc9e626E+0xa8>
        new_size
    80017644:	6526                	ld	a0,72(sp)
    80017646:	f0aa                	sd	a0,96(sp)
    }
    80017648:	a009                	j	8001764a <_ZN6kernel6memory7mapping10page_table9PageTable11uvm_dealloc17hf5596dd69dc9e626E+0xae>
    8001764a:	7506                	ld	a0,96(sp)
    8001764c:	60aa                	ld	ra,136(sp)
    8001764e:	6149                	addi	sp,sp,144
    80017650:	8082                	ret

0000000080017652 <.LBB12_16>:
            let pages_num = (page_round_up(old_size) - page_round_up(new_size)) / PGSIZE;
    80017652:	00013517          	auipc	a0,0x13
    80017656:	c0e50513          	addi	a0,a0,-1010 # 8002a260 <str.1>

000000008001765a <.LBB12_17>:
    8001765a:	00013617          	auipc	a2,0x13
    8001765e:	bee60613          	addi	a2,a2,-1042 # 8002a248 <.L__unnamed_19>
    80017662:	02100593          	li	a1,33
    80017666:	0000b097          	auipc	ra,0xb
    8001766a:	a96080e7          	jalr	-1386(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel6memory7mapping10page_table9PageTable9uvm_unmap17hab395d2793038c03E:

0000000080017670 <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_unmap17hab395d2793038c03E>:


    /// Remove npages of mappings starting from va. va must be
    /// page-aligned. The mappings must exist.
    /// Optionally free the physical memory.
    pub fn uvm_unmap(
    80017670:	7115                	addi	sp,sp,-224
    80017672:	ed86                	sd	ra,216(sp)
    80017674:	e0b2                	sd	a2,64(sp)
    80017676:	e4aa                	sd	a0,72(sp)
    80017678:	8736                	mv	a4,a3
    8001767a:	e8ba                	sd	a4,80(sp)
    8001767c:	f0ae                	sd	a1,96(sp)
    8001767e:	f12a                	sd	a0,160(sp)
    80017680:	f532                	sd	a2,168(sp)
    80017682:	0ad10ba3          	sb	a3,183(sp)
    80017686:	1088                	addi	a0,sp,96
        &mut self, 
        mut va: VirtualAddress, 
        npages: usize, 
        free: bool
    ){
        if !va.is_page_aligned() {
    80017688:	fffed097          	auipc	ra,0xfffed
    8001768c:	1d8080e7          	jalr	472(ra) # 80004860 <_ZN6kernel6memory7address4Addr15is_page_aligned17h21d9aa1b7bd151ebE>
    80017690:	ecaa                	sd	a0,88(sp)
    80017692:	a009                	j	80017694 <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_unmap17hab395d2793038c03E+0x24>
    80017694:	6566                	ld	a0,88(sp)
    80017696:	e105                	bnez	a0,800176b6 <.LBB13_33+0x14>
    80017698:	a009                	j	8001769a <.LBB13_32>

000000008001769a <.LBB13_32>:
            panic!("uvm_unmap: not aligned");
    8001769a:	00013517          	auipc	a0,0x13
    8001769e:	be750513          	addi	a0,a0,-1049 # 8002a281 <.L__unnamed_20>

00000000800176a2 <.LBB13_33>:
    800176a2:	00013617          	auipc	a2,0x13
    800176a6:	bf660613          	addi	a2,a2,-1034 # 8002a298 <.L__unnamed_21>
    800176aa:	45d9                	li	a1,22
    800176ac:	0000b097          	auipc	ra,0xb
    800176b0:	a50080e7          	jalr	-1456(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    800176b4:	0000                	unimp
    800176b6:	6586                	ld	a1,64(sp)
    800176b8:	4501                	li	a0,0
        }
        
        for _ in 0..npages {
    800176ba:	f4aa                	sd	a0,104(sp)
    800176bc:	f8ae                	sd	a1,112(sp)
    800176be:	00008097          	auipc	ra,0x8
    800176c2:	10a080e7          	jalr	266(ra) # 8001f7c8 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he0a8d93712e5493bE>
    800176c6:	f82a                	sd	a0,48(sp)
    800176c8:	fc2e                	sd	a1,56(sp)
    800176ca:	a009                	j	800176cc <.LBB13_33+0x2a>
    800176cc:	7562                	ld	a0,56(sp)
    800176ce:	75c2                	ld	a1,48(sp)
    800176d0:	fcae                	sd	a1,120(sp)
    800176d2:	e12a                	sd	a0,128(sp)
    800176d4:	a009                	j	800176d6 <.LBB13_33+0x34>
    800176d6:	18a8                	addi	a0,sp,120
    800176d8:	00008097          	auipc	ra,0x8
    800176dc:	082080e7          	jalr	130(ra) # 8001f75a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE>
    800176e0:	e52a                	sd	a0,136(sp)
    800176e2:	e92e                	sd	a1,144(sp)
    800176e4:	a009                	j	800176e6 <.LBB13_33+0x44>
    800176e6:	652a                	ld	a0,136(sp)
    800176e8:	4581                	li	a1,0
    800176ea:	00b50463          	beq	a0,a1,800176f2 <.LBB13_33+0x50>
    800176ee:	a009                	j	800176f0 <.LBB13_33+0x4e>
    800176f0:	a029                	j	800176fa <.LBB13_33+0x58>
                    panic!("uvm_unmap");
                }
            }
            va.add_page();
        }
    }
    800176f2:	60ee                	ld	ra,216(sp)
    800176f4:	612d                	addi	sp,sp,224
    800176f6:	8082                	ret
        for _ in 0..npages {
    800176f8:	0000                	unimp
    800176fa:	6526                	ld	a0,72(sp)
    800176fc:	65ca                	ld	a1,144(sp)
    800176fe:	fd2e                	sd	a1,184(sp)
    80017700:	e1ae                	sd	a1,192(sp)
            match self.translate(va) {
    80017702:	7586                	ld	a1,96(sp)
    80017704:	fffff097          	auipc	ra,0xfffff
    80017708:	5c4080e7          	jalr	1476(ra) # 80016cc8 <_ZN6kernel6memory7mapping10page_table9PageTable9translate17h0a84bb7f836f6989E>
    8001770c:	ed2a                	sd	a0,152(sp)
    8001770e:	a009                	j	80017710 <.LBB13_33+0x6e>
                Some(pte) => {
    80017710:	656a                	ld	a0,152(sp)
    80017712:	00a035b3          	snez	a1,a0
    80017716:	4581                	li	a1,0
    80017718:	00b50463          	beq	a0,a1,80017720 <.LBB13_34>
    8001771c:	a009                	j	8001771e <.LBB13_33+0x7c>
    8001771e:	a005                	j	8001773e <.LBB13_35+0x16>

0000000080017720 <.LBB13_34>:
                    panic!("uvm_unmap");
    80017720:	00013517          	auipc	a0,0x13
    80017724:	c1850513          	addi	a0,a0,-1000 # 8002a338 <.L__unnamed_22>

0000000080017728 <.LBB13_35>:
    80017728:	00013617          	auipc	a2,0x13
    8001772c:	c2060613          	addi	a2,a2,-992 # 8002a348 <.L__unnamed_23>
    80017730:	45a5                	li	a1,9
    80017732:	0000b097          	auipc	ra,0xb
    80017736:	9ca080e7          	jalr	-1590(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8001773a:	0000                	unimp
            match self.translate(va) {
    8001773c:	0000                	unimp
                Some(pte) => {
    8001773e:	656a                	ld	a0,152(sp)
    80017740:	f02a                	sd	a0,32(sp)
    80017742:	e5aa                	sd	a0,200(sp)
                    if !pte.is_valid() {
    80017744:	ffff1097          	auipc	ra,0xffff1
    80017748:	fd6080e7          	jalr	-42(ra) # 8000871a <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry8is_valid17h2b3a673d14ed09c6E>
    8001774c:	f42a                	sd	a0,40(sp)
    8001774e:	a009                	j	80017750 <.LBB13_35+0x28>
    80017750:	7522                	ld	a0,40(sp)
    80017752:	e105                	bnez	a0,80017772 <.LBB13_37+0x14>
    80017754:	a009                	j	80017756 <.LBB13_36>

0000000080017756 <.LBB13_36>:
                        panic!("uvm_unmap: not mapped");
    80017756:	00013517          	auipc	a0,0x13
    8001775a:	b5a50513          	addi	a0,a0,-1190 # 8002a2b0 <.L__unnamed_24>

000000008001775e <.LBB13_37>:
    8001775e:	00013617          	auipc	a2,0x13
    80017762:	b6a60613          	addi	a2,a2,-1174 # 8002a2c8 <.L__unnamed_25>
    80017766:	45d5                	li	a1,21
    80017768:	0000b097          	auipc	ra,0xb
    8001776c:	994080e7          	jalr	-1644(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80017770:	0000                	unimp
                    if !pte.is_leaf() {
    80017772:	7502                	ld	a0,32(sp)
    80017774:	ffff1097          	auipc	ra,0xffff1
    80017778:	002080e7          	jalr	2(ra) # 80008776 <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry7is_leaf17h30d4b7c99c6d4286E>
    8001777c:	ec2a                	sd	a0,24(sp)
    8001777e:	a009                	j	80017780 <.LBB13_37+0x22>
    80017780:	6562                	ld	a0,24(sp)
    80017782:	e105                	bnez	a0,800177a2 <.LBB13_39+0x14>
    80017784:	a009                	j	80017786 <.LBB13_38>

0000000080017786 <.LBB13_38>:
                        panic!("IS NOT LEAF");
    80017786:	00013517          	auipc	a0,0x13
    8001778a:	b5a50513          	addi	a0,a0,-1190 # 8002a2e0 <.L__unnamed_26>

000000008001778e <.LBB13_39>:
    8001778e:	00013617          	auipc	a2,0x13
    80017792:	b6260613          	addi	a2,a2,-1182 # 8002a2f0 <.L__unnamed_27>
    80017796:	45ad                	li	a1,11
    80017798:	0000b097          	auipc	ra,0xb
    8001779c:	964080e7          	jalr	-1692(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    800177a0:	0000                	unimp
                    if pte.as_flags() == PteFlags::V.bits() {
    800177a2:	7502                	ld	a0,32(sp)
    800177a4:	ffff1097          	auipc	ra,0xffff1
    800177a8:	068080e7          	jalr	104(ra) # 8000880c <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry8as_flags17hf18e3bbee6201d61E>
    800177ac:	e82a                	sd	a0,16(sp)
    800177ae:	a009                	j	800177b0 <.LBB13_40>

00000000800177b0 <.LBB13_40>:
    800177b0:	0000f517          	auipc	a0,0xf
    800177b4:	02850513          	addi	a0,a0,40 # 800267d8 <.L__unnamed_6+0xa0>
    800177b8:	ffff1097          	auipc	ra,0xffff1
    800177bc:	0d8080e7          	jalr	216(ra) # 80008890 <_ZN6kernel6memory7mapping16page_table_entry8PteFlags4bits17hec41972a30d9c1c3E>
    800177c0:	e42a                	sd	a0,8(sp)
    800177c2:	a009                	j	800177c4 <.LBB13_40+0x14>
    800177c4:	6542                	ld	a0,16(sp)
    800177c6:	65a2                	ld	a1,8(sp)
    800177c8:	02b51163          	bne	a0,a1,800177ea <.LBB13_42+0x14>
    800177cc:	a009                	j	800177ce <.LBB13_41>

00000000800177ce <.LBB13_41>:
                        panic!("uvm_unmap: not a leaf");
    800177ce:	00013517          	auipc	a0,0x13
    800177d2:	b3a50513          	addi	a0,a0,-1222 # 8002a308 <.L__unnamed_28>

00000000800177d6 <.LBB13_42>:
    800177d6:	00013617          	auipc	a2,0x13
    800177da:	b4a60613          	addi	a2,a2,-1206 # 8002a320 <.L__unnamed_29>
    800177de:	45d5                	li	a1,21
    800177e0:	0000b097          	auipc	ra,0xb
    800177e4:	91c080e7          	jalr	-1764(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    800177e8:	0000                	unimp
    800177ea:	6546                	ld	a0,80(sp)
    800177ec:	4581                	li	a1,0
                    if free {
    800177ee:	00b50a63          	beq	a0,a1,80017802 <.LBB13_42+0x2c>
    800177f2:	a009                	j	800177f4 <.LBB13_42+0x1e>
                        let pa = pte.as_pagetable();
    800177f4:	7502                	ld	a0,32(sp)
    800177f6:	ffff1097          	auipc	ra,0xffff1
    800177fa:	ffa080e7          	jalr	-6(ra) # 800087f0 <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry12as_pagetable17h89cf44fefbbd4b4eE>
    800177fe:	e9aa                	sd	a0,208(sp)
    80017800:	a011                	j	80017804 <.LBB13_42+0x2e>
                    if free {
    80017802:	a031                	j	8001780e <.LBB13_42+0x38>
                        unsafe{ drop_in_place(pa) };
    80017804:	a009                	j	80017806 <.LBB13_42+0x30>
    80017806:	7582                	ld	a1,32(sp)
    80017808:	4501                	li	a0,0
                        pte.0 = 0;
    8001780a:	e188                	sd	a0,0(a1)
                    if free {
    8001780c:	a009                	j	8001780e <.LBB13_42+0x38>
    8001780e:	1088                	addi	a0,sp,96
            va.add_page();
    80017810:	fffed097          	auipc	ra,0xfffed
    80017814:	224080e7          	jalr	548(ra) # 80004a34 <_ZN6kernel6memory7address4Addr8add_page17hda9f7615eed2e36aE>
    80017818:	a009                	j	8001781a <.LBB13_42+0x44>
        for _ in 0..npages {
    8001781a:	bd75                	j	800176d6 <.LBB13_33+0x34>

Disassembly of section .text._ZN6kernel6memory7mapping10page_table9PageTable8uvm_copy17h09757305193d69e4E:

000000008001781c <_ZN6kernel6memory7mapping10page_table9PageTable8uvm_copy17h09757305193d69e4E>:
    /// its memory into a child's page table.
    /// Copies both the page table and the
    /// physical memory.
    /// returns 0 on success, -1 on failure.
    /// frees any allocated pages on failure.
    pub unsafe fn uvm_copy(
    8001781c:	7151                	addi	sp,sp,-240
    8001781e:	f586                	sd	ra,232(sp)
    80017820:	f8b2                	sd	a2,112(sp)
    80017822:	fcae                	sd	a1,120(sp)
    80017824:	e12a                	sd	a0,128(sp)
    80017826:	f52a                	sd	a0,168(sp)
    80017828:	f92e                	sd	a1,176(sp)
    8001782a:	fd32                	sd	a2,184(sp)
    8001782c:	4501                	li	a0,0
        &mut self, 
        child_pgt: &mut Self, 
        size: usize
    ) -> Result<(), &'static str> {
        let mut va = VirtualAddress::new(0);
    8001782e:	ffffa097          	auipc	ra,0xffffa
    80017832:	cea080e7          	jalr	-790(ra) # 80011518 <_ZN6kernel6memory7address14VirtualAddress3new17h716be423461f1938E>
    80017836:	ed2a                	sd	a0,152(sp)
    80017838:	a009                	j	8001783a <_ZN6kernel6memory7mapping10page_table9PageTable8uvm_copy17h09757305193d69e4E+0x1e>
    8001783a:	0928                	addi	a0,sp,152
        while va.as_usize() != size {
    8001783c:	ffffa097          	auipc	ra,0xffffa
    80017840:	cb8080e7          	jalr	-840(ra) # 800114f4 <_ZN89_$LT$kernel..memory..address..VirtualAddress$u20$as$u20$kernel..memory..address..Addr$GT$8as_usize17h7916c21610008a66E>
    80017844:	f4aa                	sd	a0,104(sp)
    80017846:	a009                	j	80017848 <_ZN6kernel6memory7mapping10page_table9PageTable8uvm_copy17h09757305193d69e4E+0x2c>
    80017848:	7526                	ld	a0,104(sp)
    8001784a:	75c6                	ld	a1,112(sp)
    8001784c:	00b51663          	bne	a0,a1,80017858 <_ZN6kernel6memory7mapping10page_table9PageTable8uvm_copy17h09757305193d69e4E+0x3c>
    80017850:	a009                	j	80017852 <_ZN6kernel6memory7mapping10page_table9PageTable8uvm_copy17h09757305193d69e4E+0x36>
    80017852:	4501                	li	a0,0
                }
            }
            va.add_page();
        }

        Ok(())
    80017854:	e52a                	sd	a0,136(sp)
    }
    80017856:	a28d                	j	800179b8 <.LBB14_33+0x12>
            match self.translate(va) {
    80017858:	650a                	ld	a0,128(sp)
    8001785a:	65ea                	ld	a1,152(sp)
    8001785c:	fffff097          	auipc	ra,0xfffff
    80017860:	46c080e7          	jalr	1132(ra) # 80016cc8 <_ZN6kernel6memory7mapping10page_table9PageTable9translate17h0a84bb7f836f6989E>
    80017864:	f12a                	sd	a0,160(sp)
    80017866:	a009                	j	80017868 <_ZN6kernel6memory7mapping10page_table9PageTable8uvm_copy17h09757305193d69e4E+0x4c>
                Some(pte) => {
    80017868:	750a                	ld	a0,160(sp)
    8001786a:	00a035b3          	snez	a1,a0
    8001786e:	4581                	li	a1,0
    80017870:	00b50463          	beq	a0,a1,80017878 <.LBB14_29>
    80017874:	a009                	j	80017876 <_ZN6kernel6memory7mapping10page_table9PageTable8uvm_copy17h09757305193d69e4E+0x5a>
    80017876:	a00d                	j	80017898 <.LBB14_30+0x18>

0000000080017878 <.LBB14_29>:
                    panic!("uvmcopy: No exist pte(pte should exist)");
    80017878:	00013517          	auipc	a0,0x13
    8001787c:	b2e50513          	addi	a0,a0,-1234 # 8002a3a6 <.L__unnamed_30>

0000000080017880 <.LBB14_30>:
    80017880:	00013617          	auipc	a2,0x13
    80017884:	b5060613          	addi	a2,a2,-1200 # 8002a3d0 <.L__unnamed_31>
    80017888:	02700593          	li	a1,39
    8001788c:	0000b097          	auipc	ra,0xb
    80017890:	870080e7          	jalr	-1936(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80017894:	0000                	unimp
            match self.translate(va) {
    80017896:	0000                	unimp
                Some(pte) => {
    80017898:	750a                	ld	a0,160(sp)
    8001789a:	ecaa                	sd	a0,88(sp)
    8001789c:	e1aa                	sd	a0,192(sp)
                    if !pte.is_valid() {
    8001789e:	ffff1097          	auipc	ra,0xffff1
    800178a2:	e7c080e7          	jalr	-388(ra) # 8000871a <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry8is_valid17h2b3a673d14ed09c6E>
    800178a6:	f0aa                	sd	a0,96(sp)
    800178a8:	a009                	j	800178aa <.LBB14_30+0x2a>
    800178aa:	7506                	ld	a0,96(sp)
    800178ac:	e105                	bnez	a0,800178cc <.LBB14_32+0x14>
    800178ae:	a009                	j	800178b0 <.LBB14_31>

00000000800178b0 <.LBB14_31>:
                        panic!("uvmcopy(): page not present");
    800178b0:	00013517          	auipc	a0,0x13
    800178b4:	ab050513          	addi	a0,a0,-1360 # 8002a360 <.L__unnamed_32>

00000000800178b8 <.LBB14_32>:
    800178b8:	00013617          	auipc	a2,0x13
    800178bc:	ac860613          	addi	a2,a2,-1336 # 8002a380 <.L__unnamed_33>
    800178c0:	45ed                	li	a1,27
    800178c2:	0000b097          	auipc	ra,0xb
    800178c6:	83a080e7          	jalr	-1990(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    800178ca:	0000                	unimp
                    let page_table = pte.as_pagetable();
    800178cc:	6566                	ld	a0,88(sp)
    800178ce:	ffff1097          	auipc	ra,0xffff1
    800178d2:	f22080e7          	jalr	-222(ra) # 800087f0 <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry12as_pagetable17h89cf44fefbbd4b4eE>
    800178d6:	85aa                	mv	a1,a0
    800178d8:	e8ae                	sd	a1,80(sp)
    800178da:	e5aa                	sd	a0,200(sp)
    800178dc:	a009                	j	800178de <.LBB14_32+0x26>
                    let flags = pte.as_flags();
    800178de:	6566                	ld	a0,88(sp)
    800178e0:	ffff1097          	auipc	ra,0xffff1
    800178e4:	f2c080e7          	jalr	-212(ra) # 8000880c <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry8as_flags17hf18e3bbee6201d61E>
    800178e8:	85aa                	mv	a1,a0
    800178ea:	e4ae                	sd	a1,72(sp)
    800178ec:	e9aa                	sd	a0,208(sp)
    800178ee:	a009                	j	800178f0 <.LBB14_32+0x38>
                    let flags = PteFlags::new(flags);
    800178f0:	6526                	ld	a0,72(sp)
    800178f2:	ffff1097          	auipc	ra,0xffff1
    800178f6:	e14080e7          	jalr	-492(ra) # 80008706 <_ZN6kernel6memory7mapping16page_table_entry8PteFlags3new17h46b0ea84c5bd5a31E>
    800178fa:	85aa                	mv	a1,a0
    800178fc:	e0ae                	sd	a1,64(sp)
    800178fe:	edaa                	sd	a0,216(sp)
    80017900:	a009                	j	80017902 <.LBB14_32+0x4a>
                    let allocated_pgt = &mut *(RawPage::new_zeroed() as *mut PageTable);
    80017902:	ffff2097          	auipc	ra,0xffff2
    80017906:	6ac080e7          	jalr	1708(ra) # 80009fae <_ZN6kernel6memory13PageAllocator10new_zeroed17hbc99bdbca8d1d931E>
    8001790a:	fc2a                	sd	a0,56(sp)
    8001790c:	a009                	j	8001790e <.LBB14_32+0x56>
    8001790e:	65c6                	ld	a1,80(sp)
    80017910:	7562                	ld	a0,56(sp)
    80017912:	862a                	mv	a2,a0
    80017914:	f832                	sd	a2,48(sp)
    80017916:	f1aa                	sd	a0,224(sp)
                    allocated_pgt.write(& *page_table);
    80017918:	fffff097          	auipc	ra,0xfffff
    8001791c:	2e0080e7          	jalr	736(ra) # 80016bf8 <_ZN6kernel6memory7mapping10page_table9PageTable5write17h1197b2bc60e8313aE>
    80017920:	a009                	j	80017922 <.LBB14_32+0x6a>
                        va,
    80017922:	7542                	ld	a0,48(sp)
    80017924:	65ea                	ld	a1,152(sp)
                        PhysicalAddress::new(allocated_pgt.as_addr()),
    80017926:	f02e                	sd	a1,32(sp)
    80017928:	fffff097          	auipc	ra,0xfffff
    8001792c:	286080e7          	jalr	646(ra) # 80016bae <_ZN6kernel6memory7mapping10page_table9PageTable7as_addr17hcce185773f2c85f7E>
    80017930:	f42a                	sd	a0,40(sp)
    80017932:	a009                	j	80017934 <.LBB14_32+0x7c>
    80017934:	7522                	ld	a0,40(sp)
    80017936:	ffffa097          	auipc	ra,0xffffa
    8001793a:	c92080e7          	jalr	-878(ra) # 800115c8 <_ZN6kernel6memory7address15PhysicalAddress3new17hf2b76f8479ac6235E>
    8001793e:	ec2a                	sd	a0,24(sp)
    80017940:	a009                	j	80017942 <.LBB14_32+0x8a>
                    if !child_pgt.map(
    80017942:	6706                	ld	a4,64(sp)
    80017944:	6662                	ld	a2,24(sp)
    80017946:	7582                	ld	a1,32(sp)
    80017948:	7566                	ld	a0,120(sp)
    8001794a:	6685                	lui	a3,0x1
    8001794c:	fffff097          	auipc	ra,0xfffff
    80017950:	738080e7          	jalr	1848(ra) # 80017084 <_ZN6kernel6memory7mapping10page_table9PageTable3map17h08dc54e6ac3f590cE>
    80017954:	e82a                	sd	a0,16(sp)
    80017956:	a009                	j	80017958 <.LBB14_32+0xa0>
    80017958:	6542                	ld	a0,16(sp)
    8001795a:	e901                	bnez	a0,8001796a <.LBB14_32+0xb2>
    8001795c:	a009                	j	8001795e <.LBB14_32+0xa6>
                        drop(allocated_pgt);
    8001795e:	7542                	ld	a0,48(sp)
    80017960:	00005097          	auipc	ra,0x5
    80017964:	5e2080e7          	jalr	1506(ra) # 8001cf42 <_ZN4core3mem4drop17ha184dbcd1a83d607E>
    80017968:	a039                	j	80017976 <.LBB14_32+0xbe>
    8001796a:	0928                	addi	a0,sp,152
            va.add_page();
    8001796c:	fffed097          	auipc	ra,0xfffed
    80017970:	0c8080e7          	jalr	200(ra) # 80004a34 <_ZN6kernel6memory7address4Addr8add_page17hda9f7615eed2e36aE>
    80017974:	a089                	j	800179b6 <.LBB14_33+0x10>
    80017976:	4501                	li	a0,0
                            VirtualAddress::new(0), 
    80017978:	ffffa097          	auipc	ra,0xffffa
    8001797c:	ba0080e7          	jalr	-1120(ra) # 80011518 <_ZN6kernel6memory7address14VirtualAddress3new17h716be423461f1938E>
    80017980:	e42a                	sd	a0,8(sp)
    80017982:	a009                	j	80017984 <.LBB14_32+0xcc>
    80017984:	0928                	addi	a0,sp,152
                            va.as_usize() / PGSIZE, 
    80017986:	ffffa097          	auipc	ra,0xffffa
    8001798a:	b6e080e7          	jalr	-1170(ra) # 800114f4 <_ZN89_$LT$kernel..memory..address..VirtualAddress$u20$as$u20$kernel..memory..address..Addr$GT$8as_usize17h7916c21610008a66E>
    8001798e:	e02a                	sd	a0,0(sp)
    80017990:	a009                	j	80017992 <.LBB14_32+0xda>
    80017992:	65a2                	ld	a1,8(sp)
    80017994:	7566                	ld	a0,120(sp)
    80017996:	6602                	ld	a2,0(sp)
    80017998:	8231                	srli	a2,a2,0xc
    8001799a:	4685                	li	a3,1
                        child_pgt.uvm_unmap(
    8001799c:	00000097          	auipc	ra,0x0
    800179a0:	cd4080e7          	jalr	-812(ra) # 80017670 <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_unmap17hab395d2793038c03E>
    800179a4:	a009                	j	800179a6 <.LBB14_33>

00000000800179a6 <.LBB14_33>:
                        return Err("uvmcopy: Fail.")
    800179a6:	00013517          	auipc	a0,0x13
    800179aa:	9f250513          	addi	a0,a0,-1550 # 8002a398 <.L__unnamed_34>
    800179ae:	e52a                	sd	a0,136(sp)
    800179b0:	4539                	li	a0,14
    800179b2:	e92a                	sd	a0,144(sp)
    }
    800179b4:	a011                	j	800179b8 <.LBB14_33+0x12>
        while va.as_usize() != size {
    800179b6:	b551                	j	8001783a <_ZN6kernel6memory7mapping10page_table9PageTable8uvm_copy17h09757305193d69e4E+0x1e>
    }
    800179b8:	652a                	ld	a0,136(sp)
    800179ba:	65ca                	ld	a1,144(sp)
    800179bc:	70ae                	ld	ra,232(sp)
    800179be:	616d                	addi	sp,sp,240
    800179c0:	8082                	ret

Disassembly of section .text._ZN6kernel6memory7mapping10page_table9PageTable9uvm_clear17hb623751aee30bcf2E:

00000000800179c2 <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_clear17hb623751aee30bcf2E>:

    

    /// mark a PTE invalid for user access.
    /// used by exec for the user stack guard page.
    pub fn uvm_clear(&mut self, va: VirtualAddress) {
    800179c2:	7179                	addi	sp,sp,-48
    800179c4:	f406                	sd	ra,40(sp)
    800179c6:	e82a                	sd	a0,16(sp)
    800179c8:	ec2e                	sd	a1,24(sp)
        if let Some(pte) = self.translate(va) {
    800179ca:	fffff097          	auipc	ra,0xfffff
    800179ce:	2fe080e7          	jalr	766(ra) # 80016cc8 <_ZN6kernel6memory7mapping10page_table9PageTable9translate17h0a84bb7f836f6989E>
    800179d2:	e42a                	sd	a0,8(sp)
    800179d4:	a009                	j	800179d6 <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_clear17hb623751aee30bcf2E+0x14>
    800179d6:	6522                	ld	a0,8(sp)
    800179d8:	4581                	li	a1,0
    800179da:	02b51263          	bne	a0,a1,800179fe <.LBB15_6+0x16>
    800179de:	a009                	j	800179e0 <.LBB15_5>

00000000800179e0 <.LBB15_5>:
            pte.rm_user_bit();
        }else {
            panic!("uvmclear(): Not found valid pte for virtualaddress");
    800179e0:	00013517          	auipc	a0,0x13
    800179e4:	a0850513          	addi	a0,a0,-1528 # 8002a3e8 <.L__unnamed_35>

00000000800179e8 <.LBB15_6>:
    800179e8:	00013617          	auipc	a2,0x13
    800179ec:	a3860613          	addi	a2,a2,-1480 # 8002a420 <.L__unnamed_36>
    800179f0:	03200593          	li	a1,50
    800179f4:	0000a097          	auipc	ra,0xa
    800179f8:	708080e7          	jalr	1800(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    800179fc:	0000                	unimp
        if let Some(pte) = self.translate(va) {
    800179fe:	6522                	ld	a0,8(sp)
    80017a00:	f02a                	sd	a0,32(sp)
            pte.rm_user_bit();
    80017a02:	ffff1097          	auipc	ra,0xffff1
    80017a06:	dbe080e7          	jalr	-578(ra) # 800087c0 <_ZN6kernel6memory7mapping16page_table_entry14PageTableEntry11rm_user_bit17hf6078e39c3f185baE>
    80017a0a:	a009                	j	80017a0c <.LBB15_6+0x24>
        }
    }
    80017a0c:	70a2                	ld	ra,40(sp)
    80017a0e:	6145                	addi	sp,sp,48
    80017a10:	8082                	ret

Disassembly of section .text._ZN6kernel6memory7mapping10page_table9PageTable8copy_out17h55d0f27ee3680817E:

0000000080017a12 <_ZN6kernel6memory7mapping10page_table9PageTable8copy_out17h55d0f27ee3680817E>:

    /// Copy from kernel to user.
    /// Copy len bytes from src to virtual address dstva in a given page table.
    /// Return Result<(), Err>. 
    pub fn copy_out(
    80017a12:	7111                	addi	sp,sp,-256
    80017a14:	fd86                	sd	ra,248(sp)
    80017a16:	e532                	sd	a2,136(sp)
    80017a18:	e92e                	sd	a1,144(sp)
    80017a1a:	85aa                	mv	a1,a0
    80017a1c:	654a                	ld	a0,144(sp)
    80017a1e:	ed2e                	sd	a1,152(sp)
    80017a20:	f136                	sd	a3,160(sp)
    80017a22:	f1ae                	sd	a1,224(sp)
    80017a24:	f5aa                	sd	a0,232(sp)
    80017a26:	f9b2                	sd	a2,240(sp)
        mut len: usize 
    ) -> Result<(), &'static str> {
        // 从内核空间向用户空间拷贝数据
        // 拷贝的起始地址为 dst, 拷贝的结束地址为 dst + len
        // 首先将目标地址转成虚拟地址并进行页对齐
        let mut va = VirtualAddress::new(dst);
    80017a28:	ffffa097          	auipc	ra,0xffffa
    80017a2c:	af0080e7          	jalr	-1296(ra) # 80011518 <_ZN6kernel6memory7address14VirtualAddress3new17h716be423461f1938E>
    80017a30:	fd2a                	sd	a0,184(sp)
    80017a32:	a009                	j	80017a34 <_ZN6kernel6memory7mapping10page_table9PageTable8copy_out17h55d0f27ee3680817E+0x22>
    80017a34:	1928                	addi	a0,sp,184
        va.pg_round_down();
    80017a36:	fffed097          	auipc	ra,0xfffed
    80017a3a:	f7c080e7          	jalr	-132(ra) # 800049b2 <_ZN6kernel6memory7address4Addr13pg_round_down17h7ab358be9f94b06bE>
    80017a3e:	a009                	j	80017a40 <_ZN6kernel6memory7mapping10page_table9PageTable8copy_out17h55d0f27ee3680817E+0x2e>
    80017a40:	1928                	addi	a0,sp,184

        // println!("[Debug] va: 0x{:x}, dst: 0x{:x}", va.as_usize(), dst);
        // 计算第一次需要拷贝的字节数，需要进行页对齐
        let mut count = PGSIZE - (dst - va.as_usize());
    80017a42:	ffffa097          	auipc	ra,0xffffa
    80017a46:	ab2080e7          	jalr	-1358(ra) # 800114f4 <_ZN89_$LT$kernel..memory..address..VirtualAddress$u20$as$u20$kernel..memory..address..Addr$GT$8as_usize17h7916c21610008a66E>
    80017a4a:	e12a                	sd	a0,128(sp)
    80017a4c:	a009                	j	80017a4e <_ZN6kernel6memory7mapping10page_table9PageTable8copy_out17h55d0f27ee3680817E+0x3c>
    80017a4e:	654a                	ld	a0,144(sp)
    80017a50:	658a                	ld	a1,128(sp)
    80017a52:	40b505b3          	sub	a1,a0,a1
    80017a56:	fcae                	sd	a1,120(sp)
    80017a58:	14b56b63          	bltu	a0,a1,80017bae <.LBB16_31>
    80017a5c:	a009                	j	80017a5e <_ZN6kernel6memory7mapping10page_table9PageTable8copy_out17h55d0f27ee3680817E+0x4c>
    80017a5e:	75e6                	ld	a1,120(sp)
    80017a60:	6505                	lui	a0,0x1
    80017a62:	40b505b3          	sub	a1,a0,a1
    80017a66:	f8ae                	sd	a1,112(sp)
    80017a68:	16b56263          	bltu	a0,a1,80017bcc <.LBB16_33>
    80017a6c:	a009                	j	80017a6e <_ZN6kernel6memory7mapping10page_table9PageTable8copy_out17h55d0f27ee3680817E+0x5c>
    80017a6e:	656a                	ld	a0,152(sp)
    80017a70:	75c6                	ld	a1,112(sp)
    80017a72:	e1ae                	sd	a1,192(sp)
    80017a74:	4581                	li	a1,0
        // 拷贝地址的偏移量，即已经拷贝了多少字节
        let mut offset = 0;
    80017a76:	e5ae                	sd	a1,200(sp)
        // 将目标地址的虚拟地址翻译成物理地址
        let mut pa = self.pgt_translate(va).unwrap();
    80017a78:	75ea                	ld	a1,184(sp)
    80017a7a:	fffff097          	auipc	ra,0xfffff
    80017a7e:	548080e7          	jalr	1352(ra) # 80016fc2 <_ZN6kernel6memory7mapping10page_table9PageTable13pgt_translate17h8fe9f71b8d139103E>
    80017a82:	f0aa                	sd	a0,96(sp)
    80017a84:	f4ae                	sd	a1,104(sp)
    80017a86:	a009                	j	80017a88 <_ZN6kernel6memory7mapping10page_table9PageTable8copy_out17h55d0f27ee3680817E+0x76>
    80017a88:	75a6                	ld	a1,104(sp)
    80017a8a:	7506                	ld	a0,96(sp)

0000000080017a8c <.LBB16_29>:
    80017a8c:	00013617          	auipc	a2,0x13
    80017a90:	9dc60613          	addi	a2,a2,-1572 # 8002a468 <.L__unnamed_37>
    80017a94:	ffff7097          	auipc	ra,0xffff7
    80017a98:	1be080e7          	jalr	446(ra) # 8000ec52 <_ZN4core6option15Option$LT$T$GT$6unwrap17h70b9b96f373d4183E>
    80017a9c:	e9aa                	sd	a0,208(sp)
    80017a9e:	a009                	j	80017aa0 <.LBB16_29+0x14>
    80017aa0:	0988                	addi	a0,sp,208
        // 计算需要拷贝的虚拟地址的位置
        let mut dst_ptr = unsafe{
            pa.as_mut_ptr().offset((dst - va.as_usize()) as isize)
    80017aa2:	fffed097          	auipc	ra,0xfffed
    80017aa6:	de2080e7          	jalr	-542(ra) # 80004884 <_ZN6kernel6memory7address4Addr10as_mut_ptr17hfa59607f4391fdb5E>
    80017aaa:	ecaa                	sd	a0,88(sp)
    80017aac:	a009                	j	80017aae <.LBB16_29+0x22>
    80017aae:	1928                	addi	a0,sp,184
    80017ab0:	ffffa097          	auipc	ra,0xffffa
    80017ab4:	a44080e7          	jalr	-1468(ra) # 800114f4 <_ZN89_$LT$kernel..memory..address..VirtualAddress$u20$as$u20$kernel..memory..address..Addr$GT$8as_usize17h7916c21610008a66E>
    80017ab8:	e8aa                	sd	a0,80(sp)
    80017aba:	a009                	j	80017abc <.LBB16_29+0x30>
    80017abc:	654a                	ld	a0,144(sp)
    80017abe:	65c6                	ld	a1,80(sp)
    80017ac0:	40b505b3          	sub	a1,a0,a1
    80017ac4:	e4ae                	sd	a1,72(sp)
    80017ac6:	12b56263          	bltu	a0,a1,80017bea <.LBB16_35>
    80017aca:	a009                	j	80017acc <.LBB16_29+0x40>
    80017acc:	65a6                	ld	a1,72(sp)
    80017ace:	6566                	ld	a0,88(sp)
    80017ad0:	00008097          	auipc	ra,0x8
    80017ad4:	b24080e7          	jalr	-1244(ra) # 8001f5f4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb5f7a0f346747657E>
    80017ad8:	edaa                	sd	a0,216(sp)
    80017ada:	a009                	j	80017adc <.LBB16_29+0x50>
            // 由于在 syscall 的时候将用户页表切换成了内核页表，
            // 因此在拷贝的时候需要将用户态的虚拟地址转换成物理地址，
            // 由于在内核中数据区是直接映射，因此在访问物理地址的时候
            // 经过 MMU 不会报错
            // println!("[Debug] count: {}, len: {}", count, len);
            if count > len {
    80017adc:	658e                	ld	a1,192(sp)
    80017ade:	750a                	ld	a0,160(sp)
    80017ae0:	00b57d63          	bgeu	a0,a1,80017afa <.LBB16_29+0x6e>
    80017ae4:	a009                	j	80017ae6 <.LBB16_29+0x5a>
                // 如果页内剩余的容量大于生于要拷贝的容量，则将count替换成len
                count = len;
    80017ae6:	652a                	ld	a0,136(sp)
    80017ae8:	758a                	ld	a1,160(sp)
    80017aea:	e1ae                	sd	a1,192(sp)
                unsafe{
                    copy(
                        src.offset(offset as isize), 
    80017aec:	65ae                	ld	a1,200(sp)
    80017aee:	00008097          	auipc	ra,0x8
    80017af2:	bd4080e7          	jalr	-1068(ra) # 8001f6c2 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d562998c5c34b1bE>
    80017af6:	e0aa                	sd	a0,64(sp)
    80017af8:	a809                	j	80017b0a <.LBB16_29+0x7e>
                }
                return Ok(())
            }else {
                unsafe{
                    copy(
                        src.offset(offset as isize), 
    80017afa:	652a                	ld	a0,136(sp)
    80017afc:	65ae                	ld	a1,200(sp)
    80017afe:	00008097          	auipc	ra,0x8
    80017b02:	bc4080e7          	jalr	-1084(ra) # 8001f6c2 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d562998c5c34b1bE>
    80017b06:	fc2a                	sd	a0,56(sp)
    80017b08:	a839                	j	80017b26 <.LBB16_29+0x9a>
                        dst_ptr, 
    80017b0a:	6586                	ld	a1,64(sp)
    80017b0c:	656e                	ld	a0,216(sp)
                        count
    80017b0e:	660e                	ld	a2,192(sp)
                    copy(
    80017b10:	0000d097          	auipc	ra,0xd
    80017b14:	540080e7          	jalr	1344(ra) # 80025050 <memmove>
    80017b18:	a009                	j	80017b1a <.LBB16_29+0x8e>
    80017b1a:	4501                	li	a0,0
                return Ok(())
    80017b1c:	f52a                	sd	a0,168(sp)
                pa = self.pgt_translate(va).unwrap();
                count = PGSIZE;
                dst_ptr = pa.as_mut_ptr();
            }
        }
    }   
    80017b1e:	75ca                	ld	a1,176(sp)
    80017b20:	70ee                	ld	ra,248(sp)
    80017b22:	6111                	addi	sp,sp,256
    80017b24:	8082                	ret
                        dst_ptr, 
    80017b26:	75e2                	ld	a1,56(sp)
    80017b28:	656e                	ld	a0,216(sp)
                        count
    80017b2a:	660e                	ld	a2,192(sp)
                    copy(
    80017b2c:	0000d097          	auipc	ra,0xd
    80017b30:	524080e7          	jalr	1316(ra) # 80025050 <memmove>
    80017b34:	a009                	j	80017b36 <.LBB16_29+0xaa>
                len -= count;
    80017b36:	658e                	ld	a1,192(sp)
    80017b38:	750a                	ld	a0,160(sp)
    80017b3a:	40b505b3          	sub	a1,a0,a1
    80017b3e:	f82e                	sd	a1,48(sp)
    80017b40:	0cb56463          	bltu	a0,a1,80017c08 <.LBB16_37>
    80017b44:	a009                	j	80017b46 <.LBB16_29+0xba>
    80017b46:	7542                	ld	a0,48(sp)
    80017b48:	f12a                	sd	a0,160(sp)
                offset += count;
    80017b4a:	650e                	ld	a0,192(sp)
    80017b4c:	65ae                	ld	a1,200(sp)
    80017b4e:	952e                	add	a0,a0,a1
    80017b50:	f42a                	sd	a0,40(sp)
    80017b52:	0cb56a63          	bltu	a0,a1,80017c26 <.LBB16_39>
    80017b56:	a009                	j	80017b58 <.LBB16_29+0xcc>
    80017b58:	7522                	ld	a0,40(sp)
    80017b5a:	e5aa                	sd	a0,200(sp)
    80017b5c:	1928                	addi	a0,sp,184
                va.add_page();
    80017b5e:	fffed097          	auipc	ra,0xfffed
    80017b62:	ed6080e7          	jalr	-298(ra) # 80004a34 <_ZN6kernel6memory7address4Addr8add_page17hda9f7615eed2e36aE>
    80017b66:	a009                	j	80017b68 <.LBB16_29+0xdc>
                pa = self.pgt_translate(va).unwrap();
    80017b68:	656a                	ld	a0,152(sp)
    80017b6a:	75ea                	ld	a1,184(sp)
    80017b6c:	fffff097          	auipc	ra,0xfffff
    80017b70:	456080e7          	jalr	1110(ra) # 80016fc2 <_ZN6kernel6memory7mapping10page_table9PageTable13pgt_translate17h8fe9f71b8d139103E>
    80017b74:	ec2a                	sd	a0,24(sp)
    80017b76:	f02e                	sd	a1,32(sp)
    80017b78:	a009                	j	80017b7a <.LBB16_29+0xee>
    80017b7a:	7582                	ld	a1,32(sp)
    80017b7c:	6562                	ld	a0,24(sp)

0000000080017b7e <.LBB16_30>:
    80017b7e:	00013617          	auipc	a2,0x13
    80017b82:	94a60613          	addi	a2,a2,-1718 # 8002a4c8 <.L__unnamed_38>
    80017b86:	ffff7097          	auipc	ra,0xffff7
    80017b8a:	0cc080e7          	jalr	204(ra) # 8000ec52 <_ZN4core6option15Option$LT$T$GT$6unwrap17h70b9b96f373d4183E>
    80017b8e:	e82a                	sd	a0,16(sp)
    80017b90:	a009                	j	80017b92 <.LBB16_30+0x14>
    80017b92:	6542                	ld	a0,16(sp)
    80017b94:	e9aa                	sd	a0,208(sp)
    80017b96:	6505                	lui	a0,0x1
                count = PGSIZE;
    80017b98:	e1aa                	sd	a0,192(sp)
    80017b9a:	0988                	addi	a0,sp,208
                dst_ptr = pa.as_mut_ptr();
    80017b9c:	fffed097          	auipc	ra,0xfffed
    80017ba0:	ce8080e7          	jalr	-792(ra) # 80004884 <_ZN6kernel6memory7address4Addr10as_mut_ptr17hfa59607f4391fdb5E>
    80017ba4:	e42a                	sd	a0,8(sp)
    80017ba6:	a009                	j	80017ba8 <.LBB16_30+0x2a>
    80017ba8:	6522                	ld	a0,8(sp)
    80017baa:	edaa                	sd	a0,216(sp)
        loop {
    80017bac:	bf05                	j	80017adc <.LBB16_29+0x50>

0000000080017bae <.LBB16_31>:
        let mut count = PGSIZE - (dst - va.as_usize());
    80017bae:	00012517          	auipc	a0,0x12
    80017bb2:	6b250513          	addi	a0,a0,1714 # 8002a260 <str.1>

0000000080017bb6 <.LBB16_32>:
    80017bb6:	00013617          	auipc	a2,0x13
    80017bba:	88260613          	addi	a2,a2,-1918 # 8002a438 <.L__unnamed_39>
    80017bbe:	02100593          	li	a1,33
    80017bc2:	0000a097          	auipc	ra,0xa
    80017bc6:	53a080e7          	jalr	1338(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080017bcc <.LBB16_33>:
    80017bcc:	00012517          	auipc	a0,0x12
    80017bd0:	69450513          	addi	a0,a0,1684 # 8002a260 <str.1>

0000000080017bd4 <.LBB16_34>:
    80017bd4:	00013617          	auipc	a2,0x13
    80017bd8:	87c60613          	addi	a2,a2,-1924 # 8002a450 <.L__unnamed_40>
    80017bdc:	02100593          	li	a1,33
    80017be0:	0000a097          	auipc	ra,0xa
    80017be4:	51c080e7          	jalr	1308(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080017bea <.LBB16_35>:
            pa.as_mut_ptr().offset((dst - va.as_usize()) as isize)
    80017bea:	00012517          	auipc	a0,0x12
    80017bee:	67650513          	addi	a0,a0,1654 # 8002a260 <str.1>

0000000080017bf2 <.LBB16_36>:
    80017bf2:	00013617          	auipc	a2,0x13
    80017bf6:	88e60613          	addi	a2,a2,-1906 # 8002a480 <.L__unnamed_41>
    80017bfa:	02100593          	li	a1,33
    80017bfe:	0000a097          	auipc	ra,0xa
    80017c02:	4fe080e7          	jalr	1278(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080017c08 <.LBB16_37>:
                len -= count;
    80017c08:	00012517          	auipc	a0,0x12
    80017c0c:	65850513          	addi	a0,a0,1624 # 8002a260 <str.1>

0000000080017c10 <.LBB16_38>:
    80017c10:	00013617          	auipc	a2,0x13
    80017c14:	88860613          	addi	a2,a2,-1912 # 8002a498 <.L__unnamed_42>
    80017c18:	02100593          	li	a1,33
    80017c1c:	0000a097          	auipc	ra,0xa
    80017c20:	4e0080e7          	jalr	1248(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080017c26 <.LBB16_39>:
                offset += count;
    80017c26:	00012517          	auipc	a0,0x12
    80017c2a:	47a50513          	addi	a0,a0,1146 # 8002a0a0 <str.0>

0000000080017c2e <.LBB16_40>:
    80017c2e:	00013617          	auipc	a2,0x13
    80017c32:	88260613          	addi	a2,a2,-1918 # 8002a4b0 <.L__unnamed_43>
    80017c36:	45f1                	li	a1,28
    80017c38:	0000a097          	auipc	ra,0xa
    80017c3c:	4c4080e7          	jalr	1220(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel6memory7mapping10page_table9PageTable7copy_in17h459a5354b5a5ab11E:

0000000080017c42 <_ZN6kernel6memory7mapping10page_table9PageTable7copy_in17h459a5354b5a5ab11E>:


    /// Copy from user to kernel.
    /// Copy len bytes to dst from virtual address srcva in a given page table.
    /// Return Result<(), Err>
    pub fn copy_in(
    80017c42:	7151                	addi	sp,sp,-240
    80017c44:	f586                	sd	ra,232(sp)
    80017c46:	e932                	sd	a2,144(sp)
    80017c48:	862e                	mv	a2,a1
    80017c4a:	85aa                	mv	a1,a0
    80017c4c:	654a                	ld	a0,144(sp)
    80017c4e:	ed2e                	sd	a1,152(sp)
    80017c50:	f132                	sd	a2,160(sp)
    80017c52:	f536                	sd	a3,168(sp)
    80017c54:	e9ae                	sd	a1,208(sp)
    80017c56:	edaa                	sd	a0,216(sp)
        &mut self, 
        mut dst: *mut u8, 
        src: usize, 
        mut len: usize
    ) -> Result<(), &'static str> {
        let mut va = VirtualAddress::new(src);
    80017c58:	ffffa097          	auipc	ra,0xffffa
    80017c5c:	8c0080e7          	jalr	-1856(ra) # 80011518 <_ZN6kernel6memory7address14VirtualAddress3new17h716be423461f1938E>
    80017c60:	e1aa                	sd	a0,192(sp)
    80017c62:	a009                	j	80017c64 <_ZN6kernel6memory7mapping10page_table9PageTable7copy_in17h459a5354b5a5ab11E+0x22>
    80017c64:	0188                	addi	a0,sp,192
        va.pg_round_down();
    80017c66:	fffed097          	auipc	ra,0xfffed
    80017c6a:	d4c080e7          	jalr	-692(ra) # 800049b2 <_ZN6kernel6memory7address4Addr13pg_round_down17h7ab358be9f94b06bE>
    80017c6e:	a009                	j	80017c70 <_ZN6kernel6memory7mapping10page_table9PageTable7copy_in17h459a5354b5a5ab11E+0x2e>
        loop {
            // Get physical address by virtual address
            let pa = self.pgt_translate(va).unwrap();
    80017c70:	656a                	ld	a0,152(sp)
    80017c72:	658e                	ld	a1,192(sp)
    80017c74:	fffff097          	auipc	ra,0xfffff
    80017c78:	34e080e7          	jalr	846(ra) # 80016fc2 <_ZN6kernel6memory7mapping10page_table9PageTable13pgt_translate17h8fe9f71b8d139103E>
    80017c7c:	e12a                	sd	a0,128(sp)
    80017c7e:	e52e                	sd	a1,136(sp)
    80017c80:	a009                	j	80017c82 <_ZN6kernel6memory7mapping10page_table9PageTable7copy_in17h459a5354b5a5ab11E+0x40>
    80017c82:	65aa                	ld	a1,136(sp)
    80017c84:	650a                	ld	a0,128(sp)

0000000080017c86 <.LBB17_30>:
    80017c86:	00013617          	auipc	a2,0x13
    80017c8a:	85a60613          	addi	a2,a2,-1958 # 8002a4e0 <.L__unnamed_44>
    80017c8e:	ffff7097          	auipc	ra,0xffff7
    80017c92:	fc4080e7          	jalr	-60(ra) # 8000ec52 <_ZN4core6option15Option$LT$T$GT$6unwrap17h70b9b96f373d4183E>
    80017c96:	e5aa                	sd	a0,200(sp)
    80017c98:	a009                	j	80017c9a <.LBB17_30+0x14>
    80017c9a:	0188                	addi	a0,sp,192
            // Get copy bytes of current page.
            let count = PGSIZE - (src - va.as_usize());
    80017c9c:	ffffa097          	auipc	ra,0xffffa
    80017ca0:	858080e7          	jalr	-1960(ra) # 800114f4 <_ZN89_$LT$kernel..memory..address..VirtualAddress$u20$as$u20$kernel..memory..address..Addr$GT$8as_usize17h7916c21610008a66E>
    80017ca4:	fcaa                	sd	a0,120(sp)
    80017ca6:	a009                	j	80017ca8 <.LBB17_30+0x22>
    80017ca8:	654a                	ld	a0,144(sp)
    80017caa:	75e6                	ld	a1,120(sp)
    80017cac:	40b505b3          	sub	a1,a0,a1
    80017cb0:	f8ae                	sd	a1,112(sp)
    80017cb2:	10b56063          	bltu	a0,a1,80017db2 <.LBB17_31>
    80017cb6:	a009                	j	80017cb8 <.LBB17_30+0x32>
    80017cb8:	75c6                	ld	a1,112(sp)
    80017cba:	6505                	lui	a0,0x1
    80017cbc:	40b505b3          	sub	a1,a0,a1
    80017cc0:	f4ae                	sd	a1,104(sp)
    80017cc2:	10b56763          	bltu	a0,a1,80017dd0 <.LBB17_33>
    80017cc6:	a009                	j	80017cc8 <.LBB17_30+0x42>
    80017cc8:	75a6                	ld	a1,104(sp)
    80017cca:	f1ae                	sd	a1,224(sp)
            if len < count {
    80017ccc:	752a                	ld	a0,168(sp)
    80017cce:	00b57c63          	bgeu	a0,a1,80017ce6 <.LBB17_30+0x60>
    80017cd2:	a009                	j	80017cd4 <.LBB17_30+0x4e>
                mem_copy(
                    dst as usize, 
    80017cd4:	750a                	ld	a0,160(sp)
                    pa.as_usize() + ( src - va.as_usize() ), 
    80017cd6:	ecaa                	sd	a0,88(sp)
    80017cd8:	01a8                	addi	a0,sp,200
    80017cda:	ffffa097          	auipc	ra,0xffffa
    80017cde:	82c080e7          	jalr	-2004(ra) # 80011506 <_ZN90_$LT$kernel..memory..address..PhysicalAddress$u20$as$u20$kernel..memory..address..Addr$GT$8as_usize17hea2eecdb80a1a2b2E>
    80017ce2:	f0aa                	sd	a0,96(sp)
    80017ce4:	a811                	j	80017cf8 <.LBB17_30+0x72>
                    len
                );
                return Ok(())
            }
            mem_copy(
                dst as usize,
    80017ce6:	750a                	ld	a0,160(sp)
                pa.as_usize() + ( src - va.as_usize() ),
    80017ce8:	e4aa                	sd	a0,72(sp)
    80017cea:	01a8                	addi	a0,sp,200
    80017cec:	ffffa097          	auipc	ra,0xffffa
    80017cf0:	81a080e7          	jalr	-2022(ra) # 80011506 <_ZN90_$LT$kernel..memory..address..PhysicalAddress$u20$as$u20$kernel..memory..address..Addr$GT$8as_usize17hea2eecdb80a1a2b2E>
    80017cf4:	e8aa                	sd	a0,80(sp)
    80017cf6:	a0a9                	j	80017d40 <.LBB17_30+0xba>
    80017cf8:	0188                	addi	a0,sp,192
                    pa.as_usize() + ( src - va.as_usize() ), 
    80017cfa:	ffff9097          	auipc	ra,0xffff9
    80017cfe:	7fa080e7          	jalr	2042(ra) # 800114f4 <_ZN89_$LT$kernel..memory..address..VirtualAddress$u20$as$u20$kernel..memory..address..Addr$GT$8as_usize17h7916c21610008a66E>
    80017d02:	e0aa                	sd	a0,64(sp)
    80017d04:	a009                	j	80017d06 <.LBB17_30+0x80>
    80017d06:	654a                	ld	a0,144(sp)
    80017d08:	6586                	ld	a1,64(sp)
    80017d0a:	40b505b3          	sub	a1,a0,a1
    80017d0e:	fc2e                	sd	a1,56(sp)
    80017d10:	0cb56f63          	bltu	a0,a1,80017dee <.LBB17_35>
    80017d14:	a009                	j	80017d16 <.LBB17_30+0x90>
    80017d16:	7586                	ld	a1,96(sp)
    80017d18:	7562                	ld	a0,56(sp)
    80017d1a:	952e                	add	a0,a0,a1
    80017d1c:	f82a                	sd	a0,48(sp)
    80017d1e:	0eb56763          	bltu	a0,a1,80017e0c <.LBB17_37>
    80017d22:	a009                	j	80017d24 <.LBB17_30+0x9e>
                    len
    80017d24:	75c2                	ld	a1,48(sp)
    80017d26:	6566                	ld	a0,88(sp)
    80017d28:	762a                	ld	a2,168(sp)
                mem_copy(
    80017d2a:	ffff0097          	auipc	ra,0xffff0
    80017d2e:	c30080e7          	jalr	-976(ra) # 8000795a <_ZN6kernel4misc8mem_copy17h5e55f1040770ffdeE>
    80017d32:	a009                	j	80017d34 <.LBB17_30+0xae>
    80017d34:	4501                	li	a0,0
                return Ok(())
    80017d36:	f92a                	sd	a0,176(sp)

            len -= count;
            dst = unsafe{ dst.offset(count as isize) };
            va.add_page();
        }
    }
    80017d38:	75ea                	ld	a1,184(sp)
    80017d3a:	70ae                	ld	ra,232(sp)
    80017d3c:	616d                	addi	sp,sp,240
    80017d3e:	8082                	ret
    80017d40:	0188                	addi	a0,sp,192
                pa.as_usize() + ( src - va.as_usize() ),
    80017d42:	ffff9097          	auipc	ra,0xffff9
    80017d46:	7b2080e7          	jalr	1970(ra) # 800114f4 <_ZN89_$LT$kernel..memory..address..VirtualAddress$u20$as$u20$kernel..memory..address..Addr$GT$8as_usize17h7916c21610008a66E>
    80017d4a:	f42a                	sd	a0,40(sp)
    80017d4c:	a009                	j	80017d4e <.LBB17_30+0xc8>
    80017d4e:	654a                	ld	a0,144(sp)
    80017d50:	75a2                	ld	a1,40(sp)
    80017d52:	40b505b3          	sub	a1,a0,a1
    80017d56:	f02e                	sd	a1,32(sp)
    80017d58:	0cb56863          	bltu	a0,a1,80017e28 <.LBB17_39>
    80017d5c:	a009                	j	80017d5e <.LBB17_30+0xd8>
    80017d5e:	65c6                	ld	a1,80(sp)
    80017d60:	7502                	ld	a0,32(sp)
    80017d62:	952e                	add	a0,a0,a1
    80017d64:	ec2a                	sd	a0,24(sp)
    80017d66:	0eb56063          	bltu	a0,a1,80017e46 <.LBB17_41>
    80017d6a:	a009                	j	80017d6c <.LBB17_30+0xe6>
            mem_copy(
    80017d6c:	7626                	ld	a2,104(sp)
    80017d6e:	65e2                	ld	a1,24(sp)
    80017d70:	6526                	ld	a0,72(sp)
    80017d72:	ffff0097          	auipc	ra,0xffff0
    80017d76:	be8080e7          	jalr	-1048(ra) # 8000795a <_ZN6kernel4misc8mem_copy17h5e55f1040770ffdeE>
    80017d7a:	a009                	j	80017d7c <.LBB17_30+0xf6>
            len -= count;
    80017d7c:	75a6                	ld	a1,104(sp)
    80017d7e:	752a                	ld	a0,168(sp)
    80017d80:	40b505b3          	sub	a1,a0,a1
    80017d84:	e82e                	sd	a1,16(sp)
    80017d86:	0cb56e63          	bltu	a0,a1,80017e62 <.LBB17_43>
    80017d8a:	a009                	j	80017d8c <.LBB17_30+0x106>
    80017d8c:	75a6                	ld	a1,104(sp)
    80017d8e:	6542                	ld	a0,16(sp)
    80017d90:	f52a                	sd	a0,168(sp)
            dst = unsafe{ dst.offset(count as isize) };
    80017d92:	750a                	ld	a0,160(sp)
    80017d94:	00008097          	auipc	ra,0x8
    80017d98:	860080e7          	jalr	-1952(ra) # 8001f5f4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb5f7a0f346747657E>
    80017d9c:	e42a                	sd	a0,8(sp)
    80017d9e:	a009                	j	80017da0 <.LBB17_30+0x11a>
    80017da0:	6522                	ld	a0,8(sp)
    80017da2:	f12a                	sd	a0,160(sp)
    80017da4:	0188                	addi	a0,sp,192
            va.add_page();
    80017da6:	fffed097          	auipc	ra,0xfffed
    80017daa:	c8e080e7          	jalr	-882(ra) # 80004a34 <_ZN6kernel6memory7address4Addr8add_page17hda9f7615eed2e36aE>
    80017dae:	a009                	j	80017db0 <.LBB17_30+0x12a>
        loop {
    80017db0:	b5c1                	j	80017c70 <_ZN6kernel6memory7mapping10page_table9PageTable7copy_in17h459a5354b5a5ab11E+0x2e>

0000000080017db2 <.LBB17_31>:
            let count = PGSIZE - (src - va.as_usize());
    80017db2:	00012517          	auipc	a0,0x12
    80017db6:	4ae50513          	addi	a0,a0,1198 # 8002a260 <str.1>

0000000080017dba <.LBB17_32>:
    80017dba:	00012617          	auipc	a2,0x12
    80017dbe:	73e60613          	addi	a2,a2,1854 # 8002a4f8 <.L__unnamed_45>
    80017dc2:	02100593          	li	a1,33
    80017dc6:	0000a097          	auipc	ra,0xa
    80017dca:	336080e7          	jalr	822(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080017dd0 <.LBB17_33>:
    80017dd0:	00012517          	auipc	a0,0x12
    80017dd4:	49050513          	addi	a0,a0,1168 # 8002a260 <str.1>

0000000080017dd8 <.LBB17_34>:
    80017dd8:	00012617          	auipc	a2,0x12
    80017ddc:	73860613          	addi	a2,a2,1848 # 8002a510 <.L__unnamed_46>
    80017de0:	02100593          	li	a1,33
    80017de4:	0000a097          	auipc	ra,0xa
    80017de8:	318080e7          	jalr	792(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080017dee <.LBB17_35>:
                    pa.as_usize() + ( src - va.as_usize() ), 
    80017dee:	00012517          	auipc	a0,0x12
    80017df2:	47250513          	addi	a0,a0,1138 # 8002a260 <str.1>

0000000080017df6 <.LBB17_36>:
    80017df6:	00012617          	auipc	a2,0x12
    80017dfa:	73260613          	addi	a2,a2,1842 # 8002a528 <.L__unnamed_47>
    80017dfe:	02100593          	li	a1,33
    80017e02:	0000a097          	auipc	ra,0xa
    80017e06:	2fa080e7          	jalr	762(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080017e0c <.LBB17_37>:
    80017e0c:	00012517          	auipc	a0,0x12
    80017e10:	29450513          	addi	a0,a0,660 # 8002a0a0 <str.0>

0000000080017e14 <.LBB17_38>:
    80017e14:	00012617          	auipc	a2,0x12
    80017e18:	72c60613          	addi	a2,a2,1836 # 8002a540 <.L__unnamed_48>
    80017e1c:	45f1                	li	a1,28
    80017e1e:	0000a097          	auipc	ra,0xa
    80017e22:	2de080e7          	jalr	734(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080017e28 <.LBB17_39>:
                pa.as_usize() + ( src - va.as_usize() ),
    80017e28:	00012517          	auipc	a0,0x12
    80017e2c:	43850513          	addi	a0,a0,1080 # 8002a260 <str.1>

0000000080017e30 <.LBB17_40>:
    80017e30:	00012617          	auipc	a2,0x12
    80017e34:	72860613          	addi	a2,a2,1832 # 8002a558 <.L__unnamed_49>
    80017e38:	02100593          	li	a1,33
    80017e3c:	0000a097          	auipc	ra,0xa
    80017e40:	2c0080e7          	jalr	704(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080017e46 <.LBB17_41>:
    80017e46:	00012517          	auipc	a0,0x12
    80017e4a:	25a50513          	addi	a0,a0,602 # 8002a0a0 <str.0>

0000000080017e4e <.LBB17_42>:
    80017e4e:	00012617          	auipc	a2,0x12
    80017e52:	72260613          	addi	a2,a2,1826 # 8002a570 <.L__unnamed_50>
    80017e56:	45f1                	li	a1,28
    80017e58:	0000a097          	auipc	ra,0xa
    80017e5c:	2a4080e7          	jalr	676(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080017e62 <.LBB17_43>:
            len -= count;
    80017e62:	00012517          	auipc	a0,0x12
    80017e66:	3fe50513          	addi	a0,a0,1022 # 8002a260 <str.1>

0000000080017e6a <.LBB17_44>:
    80017e6a:	00012617          	auipc	a2,0x12
    80017e6e:	71e60613          	addi	a2,a2,1822 # 8002a588 <.L__unnamed_51>
    80017e72:	02100593          	li	a1,33
    80017e76:	0000a097          	auipc	ra,0xa
    80017e7a:	286080e7          	jalr	646(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel6memory7mapping10page_table9PageTable11copy_in_str17hce5a6c8720f87e9cE:

0000000080017e80 <_ZN6kernel6memory7mapping10page_table9PageTable11copy_in_str17hce5a6c8720f87e9cE>:

    /// Copy a null-trrminated string from user to kernel. 
    /// Copy bytes to dst from virtual address src in a given table. 
    /// until a '\0', or max. 
    /// Return Result. 
    pub fn copy_in_str(
    80017e80:	7141                	addi	sp,sp,-496
    80017e82:	f786                	sd	ra,488(sp)
    80017e84:	e5b2                	sd	a2,200(sp)
    80017e86:	e1ae                	sd	a1,192(sp)
    80017e88:	862a                	mv	a2,a0
    80017e8a:	652e                	ld	a0,200(sp)
    80017e8c:	e9b2                	sd	a2,208(sp)
    80017e8e:	edb6                	sd	a3,216(sp)
    80017e90:	f2b2                	sd	a2,352(sp)
    80017e92:	f6ae                	sd	a1,360(sp)
    80017e94:	faaa                	sd	a0,368(sp)
        dst: *mut u8,
        src: usize,
        mut max: usize
    ) -> Result<(),&'static str> {
        // 将 src 作为虚拟地址
        let mut va = VirtualAddress::new(src as usize);
    80017e96:	ffff9097          	auipc	ra,0xffff9
    80017e9a:	682080e7          	jalr	1666(ra) # 80011518 <_ZN6kernel6memory7address14VirtualAddress3new17h716be423461f1938E>
    80017e9e:	f9aa                	sd	a0,240(sp)
    80017ea0:	a009                	j	80017ea2 <_ZN6kernel6memory7mapping10page_table9PageTable11copy_in_str17hce5a6c8720f87e9cE+0x22>
    80017ea2:	1988                	addi	a0,sp,240
        // 将虚拟地址进行页对齐
        va.pg_round_down();
    80017ea4:	fffed097          	auipc	ra,0xfffed
    80017ea8:	b0e080e7          	jalr	-1266(ra) # 800049b2 <_ZN6kernel6memory7address4Addr13pg_round_down17h7ab358be9f94b06bE>
    80017eac:	a009                	j	80017eae <_ZN6kernel6memory7mapping10page_table9PageTable11copy_in_str17hce5a6c8720f87e9cE+0x2e>
        loop {
            // 将用户态的虚拟地址转成物理地址
            let pa = self.pgt_translate(va).unwrap();
    80017eae:	654e                	ld	a0,208(sp)
    80017eb0:	75ce                	ld	a1,240(sp)
    80017eb2:	fffff097          	auipc	ra,0xfffff
    80017eb6:	110080e7          	jalr	272(ra) # 80016fc2 <_ZN6kernel6memory7mapping10page_table9PageTable13pgt_translate17h8fe9f71b8d139103E>
    80017eba:	f92a                	sd	a0,176(sp)
    80017ebc:	fd2e                	sd	a1,184(sp)
    80017ebe:	a009                	j	80017ec0 <_ZN6kernel6memory7mapping10page_table9PageTable11copy_in_str17hce5a6c8720f87e9cE+0x40>
    80017ec0:	75ea                	ld	a1,184(sp)
    80017ec2:	754a                	ld	a0,176(sp)

0000000080017ec4 <.LBB18_48>:
    80017ec4:	00012617          	auipc	a2,0x12
    80017ec8:	6dc60613          	addi	a2,a2,1756 # 8002a5a0 <.L__unnamed_52>
    80017ecc:	ffff7097          	auipc	ra,0xffff7
    80017ed0:	d86080e7          	jalr	-634(ra) # 8000ec52 <_ZN4core6option15Option$LT$T$GT$6unwrap17h70b9b96f373d4183E>
    80017ed4:	fdaa                	sd	a0,248(sp)
    80017ed6:	a009                	j	80017ed8 <.LBB18_48+0x14>
    80017ed8:	1988                	addi	a0,sp,240
            // 计算该页所要读取的字节数
            let count = PGSIZE - (src - va.as_usize());
    80017eda:	ffff9097          	auipc	ra,0xffff9
    80017ede:	61a080e7          	jalr	1562(ra) # 800114f4 <_ZN89_$LT$kernel..memory..address..VirtualAddress$u20$as$u20$kernel..memory..address..Addr$GT$8as_usize17h7916c21610008a66E>
    80017ee2:	f52a                	sd	a0,168(sp)
    80017ee4:	a009                	j	80017ee6 <.LBB18_48+0x22>
    80017ee6:	652e                	ld	a0,200(sp)
    80017ee8:	75aa                	ld	a1,168(sp)
    80017eea:	40b505b3          	sub	a1,a0,a1
    80017eee:	f12e                	sd	a1,160(sp)
    80017ef0:	1eb56263          	bltu	a0,a1,800180d4 <.LBB18_49>
    80017ef4:	a009                	j	80017ef6 <.LBB18_48+0x32>
    80017ef6:	758a                	ld	a1,160(sp)
    80017ef8:	6505                	lui	a0,0x1
    80017efa:	40b505b3          	sub	a1,a0,a1
    80017efe:	ed2e                	sd	a1,152(sp)
    80017f00:	1eb56963          	bltu	a0,a1,800180f2 <.LBB18_51>
    80017f04:	a009                	j	80017f06 <.LBB18_48+0x42>
    80017f06:	656a                	ld	a0,152(sp)
    80017f08:	feaa                	sd	a0,376(sp)
    80017f0a:	19a8                	addi	a0,sp,248
            let s = (pa.as_usize() + (src - va.as_usize())) as *const u8;
    80017f0c:	ffff9097          	auipc	ra,0xffff9
    80017f10:	5fa080e7          	jalr	1530(ra) # 80011506 <_ZN90_$LT$kernel..memory..address..PhysicalAddress$u20$as$u20$kernel..memory..address..Addr$GT$8as_usize17hea2eecdb80a1a2b2E>
    80017f14:	e92a                	sd	a0,144(sp)
    80017f16:	a009                	j	80017f18 <.LBB18_48+0x54>
    80017f18:	1988                	addi	a0,sp,240
    80017f1a:	ffff9097          	auipc	ra,0xffff9
    80017f1e:	5da080e7          	jalr	1498(ra) # 800114f4 <_ZN89_$LT$kernel..memory..address..VirtualAddress$u20$as$u20$kernel..memory..address..Addr$GT$8as_usize17h7916c21610008a66E>
    80017f22:	e52a                	sd	a0,136(sp)
    80017f24:	a009                	j	80017f26 <.LBB18_48+0x62>
    80017f26:	652e                	ld	a0,200(sp)
    80017f28:	65aa                	ld	a1,136(sp)
    80017f2a:	40b505b3          	sub	a1,a0,a1
    80017f2e:	e12e                	sd	a1,128(sp)
    80017f30:	1eb56063          	bltu	a0,a1,80018110 <.LBB18_53>
    80017f34:	a009                	j	80017f36 <.LBB18_48+0x72>
    80017f36:	65ca                	ld	a1,144(sp)
    80017f38:	650a                	ld	a0,128(sp)
    80017f3a:	952e                	add	a0,a0,a1
    80017f3c:	fcaa                	sd	a0,120(sp)
    80017f3e:	1eb56863          	bltu	a0,a1,8001812e <.LBB18_55>
    80017f42:	a009                	j	80017f44 <.LBB18_48+0x80>
    80017f44:	65ea                	ld	a1,152(sp)
    80017f46:	7566                	ld	a0,120(sp)
    80017f48:	862a                	mv	a2,a0
    80017f4a:	f8b2                	sd	a2,112(sp)
    80017f4c:	e32a                	sd	a0,384(sp)
            if max < count {
    80017f4e:	656e                	ld	a0,216(sp)
    80017f50:	00b57e63          	bgeu	a0,a1,80017f6c <.LBB18_48+0xa8>
    80017f54:	a009                	j	80017f56 <.LBB18_48+0x92>
                // 所能读取的最大的字符数小于该页剩余字节
                for i in 0..max {
    80017f56:	65ee                	ld	a1,216(sp)
    80017f58:	4501                	li	a0,0
    80017f5a:	e22a                	sd	a0,256(sp)
    80017f5c:	e62e                	sd	a1,264(sp)
    80017f5e:	00008097          	auipc	ra,0x8
    80017f62:	86a080e7          	jalr	-1942(ra) # 8001f7c8 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he0a8d93712e5493bE>
    80017f66:	f0aa                	sd	a0,96(sp)
    80017f68:	f4ae                	sd	a1,104(sp)
    80017f6a:	a821                	j	80017f82 <.LBB18_48+0xbe>
    80017f6c:	65ea                	ld	a1,152(sp)
    80017f6e:	4501                	li	a0,0
                    }
                }
                return Ok(())
            }

            for i in 0..count {
    80017f70:	fa2a                	sd	a0,304(sp)
    80017f72:	fe2e                	sd	a1,312(sp)
    80017f74:	00008097          	auipc	ra,0x8
    80017f78:	854080e7          	jalr	-1964(ra) # 8001f7c8 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he0a8d93712e5493bE>
    80017f7c:	e8aa                	sd	a0,80(sp)
    80017f7e:	ecae                	sd	a1,88(sp)
    80017f80:	a861                	j	80018018 <.LBB18_48+0x154>
                for i in 0..max {
    80017f82:	7526                	ld	a0,104(sp)
    80017f84:	7586                	ld	a1,96(sp)
    80017f86:	ea2e                	sd	a1,272(sp)
    80017f88:	ee2a                	sd	a0,280(sp)
    80017f8a:	a009                	j	80017f8c <.LBB18_48+0xc8>
    80017f8c:	0a08                	addi	a0,sp,272
    80017f8e:	00007097          	auipc	ra,0x7
    80017f92:	7cc080e7          	jalr	1996(ra) # 8001f75a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE>
    80017f96:	f22a                	sd	a0,288(sp)
    80017f98:	f62e                	sd	a1,296(sp)
    80017f9a:	a009                	j	80017f9c <.LBB18_48+0xd8>
    80017f9c:	7512                	ld	a0,288(sp)
    80017f9e:	4581                	li	a1,0
    80017fa0:	00b50463          	beq	a0,a1,80017fa8 <.LBB18_48+0xe4>
    80017fa4:	a009                	j	80017fa6 <.LBB18_48+0xe2>
    80017fa6:	a029                	j	80017fb0 <.LBB18_48+0xec>
    80017fa8:	4501                	li	a0,0
                return Ok(())
    80017faa:	f1aa                	sd	a0,224(sp)
    80017fac:	aa39                	j	800180ca <.LBB18_48+0x206>
                for i in 0..max {
    80017fae:	0000                	unimp
    80017fb0:	7546                	ld	a0,112(sp)
    80017fb2:	75b2                	ld	a1,296(sp)
    80017fb4:	e0ae                	sd	a1,64(sp)
    80017fb6:	e72e                	sd	a1,392(sp)
    80017fb8:	eb2e                	sd	a1,400(sp)
    80017fba:	ef2e                	sd	a1,408(sp)
                        let src_ptr = s.offset(i as isize);
    80017fbc:	00007097          	auipc	ra,0x7
    80017fc0:	706080e7          	jalr	1798(ra) # 8001f6c2 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d562998c5c34b1bE>
    80017fc4:	85aa                	mv	a1,a0
    80017fc6:	e4ae                	sd	a1,72(sp)
    80017fc8:	f32a                	sd	a0,416(sp)
    80017fca:	a009                	j	80017fcc <.LBB18_48+0x108>
                        let val = read(src_ptr); 
    80017fcc:	6526                	ld	a0,72(sp)
    80017fce:	00000097          	auipc	ra,0x0
    80017fd2:	4b8080e7          	jalr	1208(ra) # 80018486 <_ZN4core3ptr4read17h018161c0cd37b3fbE>
    80017fd6:	85aa                	mv	a1,a0
    80017fd8:	fc2e                	sd	a1,56(sp)
    80017fda:	1aa107a3          	sb	a0,431(sp)
    80017fde:	a009                	j	80017fe0 <.LBB18_48+0x11c>
                        if val == 0 { return Ok(()) }
    80017fe0:	7562                	ld	a0,56(sp)
    80017fe2:	0ff57513          	andi	a0,a0,255
    80017fe6:	4581                	li	a1,0
    80017fe8:	00b51663          	bne	a0,a1,80017ff4 <.LBB18_48+0x130>
    80017fec:	a009                	j	80017fee <.LBB18_48+0x12a>
    80017fee:	4501                	li	a0,0
    80017ff0:	f1aa                	sd	a0,224(sp)
    80017ff2:	a8e1                	j	800180ca <.LBB18_48+0x206>
                        let dst_ptr = dst.offset(i as isize);
    80017ff4:	6586                	ld	a1,64(sp)
    80017ff6:	650e                	ld	a0,192(sp)
    80017ff8:	00007097          	auipc	ra,0x7
    80017ffc:	5fc080e7          	jalr	1532(ra) # 8001f5f4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb5f7a0f346747657E>
    80018000:	85aa                	mv	a1,a0
    80018002:	f82e                	sd	a1,48(sp)
    80018004:	fb2a                	sd	a0,432(sp)
    80018006:	a009                	j	80018008 <.LBB18_48+0x144>
                        write(dst_ptr, val);
    80018008:	75e2                	ld	a1,56(sp)
    8001800a:	7542                	ld	a0,48(sp)
    8001800c:	00000097          	auipc	ra,0x0
    80018010:	704080e7          	jalr	1796(ra) # 80018710 <_ZN4core3ptr5write17h0fb1ba83ac2984c7E>
    80018014:	a009                	j	80018016 <.LBB18_48+0x152>
                for i in 0..max {
    80018016:	bf9d                	j	80017f8c <.LBB18_48+0xc8>
            for i in 0..count {
    80018018:	6566                	ld	a0,88(sp)
    8001801a:	65c6                	ld	a1,80(sp)
    8001801c:	e2ae                	sd	a1,320(sp)
    8001801e:	e6aa                	sd	a0,328(sp)
    80018020:	a009                	j	80018022 <.LBB18_48+0x15e>
    80018022:	0288                	addi	a0,sp,320
    80018024:	00007097          	auipc	ra,0x7
    80018028:	736080e7          	jalr	1846(ra) # 8001f75a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE>
    8001802c:	eaaa                	sd	a0,336(sp)
    8001802e:	eeae                	sd	a1,344(sp)
    80018030:	a009                	j	80018032 <.LBB18_48+0x16e>
    80018032:	6556                	ld	a0,336(sp)
    80018034:	4581                	li	a1,0
    80018036:	00b50463          	beq	a0,a1,8001803e <.LBB18_48+0x17a>
    8001803a:	a009                	j	8001803c <.LBB18_48+0x178>
    8001803c:	a811                	j	80018050 <.LBB18_48+0x18c>
                    if src_val == 0 { return Ok(()) }
                    let dst_ptr = dst.offset(i as isize);
                    write(dst_ptr, src_val);
                }
            }
            max -= count;
    8001803e:	65ea                	ld	a1,152(sp)
    80018040:	656e                	ld	a0,216(sp)
    80018042:	40b505b3          	sub	a1,a0,a1
    80018046:	f42e                	sd	a1,40(sp)
    80018048:	10b56163          	bltu	a0,a1,8001814a <.LBB18_57>
    8001804c:	a0b5                	j	800180b8 <.LBB18_48+0x1f4>
            for i in 0..count {
    8001804e:	0000                	unimp
    80018050:	7546                	ld	a0,112(sp)
    80018052:	65f6                	ld	a1,344(sp)
    80018054:	ec2e                	sd	a1,24(sp)
    80018056:	ff2e                	sd	a1,440(sp)
    80018058:	e3ae                	sd	a1,448(sp)
    8001805a:	e7ae                	sd	a1,456(sp)
                    let src_ptr = s.offset(i as isize);
    8001805c:	00007097          	auipc	ra,0x7
    80018060:	666080e7          	jalr	1638(ra) # 8001f6c2 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d562998c5c34b1bE>
    80018064:	85aa                	mv	a1,a0
    80018066:	f02e                	sd	a1,32(sp)
    80018068:	ebaa                	sd	a0,464(sp)
    8001806a:	a009                	j	8001806c <.LBB18_48+0x1a8>
                    let src_val = read(src_ptr); 
    8001806c:	7502                	ld	a0,32(sp)
    8001806e:	00000097          	auipc	ra,0x0
    80018072:	418080e7          	jalr	1048(ra) # 80018486 <_ZN4core3ptr4read17h018161c0cd37b3fbE>
    80018076:	85aa                	mv	a1,a0
    80018078:	e82e                	sd	a1,16(sp)
    8001807a:	1ca10fa3          	sb	a0,479(sp)
    8001807e:	a009                	j	80018080 <.LBB18_48+0x1bc>
                    if src_val == 0 { return Ok(()) }
    80018080:	6542                	ld	a0,16(sp)
    80018082:	0ff57513          	andi	a0,a0,255
    80018086:	4581                	li	a1,0
    80018088:	00b51663          	bne	a0,a1,80018094 <.LBB18_48+0x1d0>
    8001808c:	a009                	j	8001808e <.LBB18_48+0x1ca>
    8001808e:	4501                	li	a0,0
    80018090:	f1aa                	sd	a0,224(sp)
    80018092:	a825                	j	800180ca <.LBB18_48+0x206>
                    let dst_ptr = dst.offset(i as isize);
    80018094:	65e2                	ld	a1,24(sp)
    80018096:	650e                	ld	a0,192(sp)
    80018098:	00007097          	auipc	ra,0x7
    8001809c:	55c080e7          	jalr	1372(ra) # 8001f5f4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb5f7a0f346747657E>
    800180a0:	85aa                	mv	a1,a0
    800180a2:	e42e                	sd	a1,8(sp)
    800180a4:	f3aa                	sd	a0,480(sp)
    800180a6:	a009                	j	800180a8 <.LBB18_48+0x1e4>
                    write(dst_ptr, src_val);
    800180a8:	65c2                	ld	a1,16(sp)
    800180aa:	6522                	ld	a0,8(sp)
    800180ac:	00000097          	auipc	ra,0x0
    800180b0:	664080e7          	jalr	1636(ra) # 80018710 <_ZN4core3ptr5write17h0fb1ba83ac2984c7E>
    800180b4:	a009                	j	800180b6 <.LBB18_48+0x1f2>
            for i in 0..count {
    800180b6:	b7b5                	j	80018022 <.LBB18_48+0x15e>
            max -= count;
    800180b8:	7522                	ld	a0,40(sp)
    800180ba:	edaa                	sd	a0,216(sp)
    800180bc:	1988                	addi	a0,sp,240
            va.add_page();
    800180be:	fffed097          	auipc	ra,0xfffed
    800180c2:	976080e7          	jalr	-1674(ra) # 80004a34 <_ZN6kernel6memory7address4Addr8add_page17hda9f7615eed2e36aE>
    800180c6:	a009                	j	800180c8 <.LBB18_48+0x204>
        loop {
    800180c8:	b3dd                	j	80017eae <_ZN6kernel6memory7mapping10page_table9PageTable11copy_in_str17hce5a6c8720f87e9cE+0x2e>
        }
    }
    800180ca:	750e                	ld	a0,224(sp)
    800180cc:	75ae                	ld	a1,232(sp)
    800180ce:	70be                	ld	ra,488(sp)
    800180d0:	617d                	addi	sp,sp,496
    800180d2:	8082                	ret

00000000800180d4 <.LBB18_49>:
            let count = PGSIZE - (src - va.as_usize());
    800180d4:	00012517          	auipc	a0,0x12
    800180d8:	18c50513          	addi	a0,a0,396 # 8002a260 <str.1>

00000000800180dc <.LBB18_50>:
    800180dc:	00012617          	auipc	a2,0x12
    800180e0:	4dc60613          	addi	a2,a2,1244 # 8002a5b8 <.L__unnamed_53>
    800180e4:	02100593          	li	a1,33
    800180e8:	0000a097          	auipc	ra,0xa
    800180ec:	014080e7          	jalr	20(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

00000000800180f2 <.LBB18_51>:
    800180f2:	00012517          	auipc	a0,0x12
    800180f6:	16e50513          	addi	a0,a0,366 # 8002a260 <str.1>

00000000800180fa <.LBB18_52>:
    800180fa:	00012617          	auipc	a2,0x12
    800180fe:	4d660613          	addi	a2,a2,1238 # 8002a5d0 <.L__unnamed_54>
    80018102:	02100593          	li	a1,33
    80018106:	0000a097          	auipc	ra,0xa
    8001810a:	ff6080e7          	jalr	-10(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080018110 <.LBB18_53>:
            let s = (pa.as_usize() + (src - va.as_usize())) as *const u8;
    80018110:	00012517          	auipc	a0,0x12
    80018114:	15050513          	addi	a0,a0,336 # 8002a260 <str.1>

0000000080018118 <.LBB18_54>:
    80018118:	00012617          	auipc	a2,0x12
    8001811c:	4d060613          	addi	a2,a2,1232 # 8002a5e8 <.L__unnamed_55>
    80018120:	02100593          	li	a1,33
    80018124:	0000a097          	auipc	ra,0xa
    80018128:	fd8080e7          	jalr	-40(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008001812e <.LBB18_55>:
    8001812e:	00012517          	auipc	a0,0x12
    80018132:	f7250513          	addi	a0,a0,-142 # 8002a0a0 <str.0>

0000000080018136 <.LBB18_56>:
    80018136:	00012617          	auipc	a2,0x12
    8001813a:	4ca60613          	addi	a2,a2,1226 # 8002a600 <.L__unnamed_56>
    8001813e:	45f1                	li	a1,28
    80018140:	0000a097          	auipc	ra,0xa
    80018144:	fbc080e7          	jalr	-68(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008001814a <.LBB18_57>:
            max -= count;
    8001814a:	00012517          	auipc	a0,0x12
    8001814e:	11650513          	addi	a0,a0,278 # 8002a260 <str.1>

0000000080018152 <.LBB18_58>:
    80018152:	00012617          	auipc	a2,0x12
    80018156:	4c660613          	addi	a2,a2,1222 # 8002a618 <.L__unnamed_57>
    8001815a:	02100593          	li	a1,33
    8001815e:	0000a097          	auipc	ra,0xa
    80018162:	f9e080e7          	jalr	-98(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel6memory7mapping10page_table9PageTable19proc_free_pagetable17h67102aea540089c1E:

0000000080018168 <_ZN6kernel6memory7mapping10page_table9PageTable19proc_free_pagetable17h67102aea540089c1E>:


    /// Free a process's page table, and free the
    /// physical memory it refers to.
    pub fn proc_free_pagetable(&mut self, size: usize) {
    80018168:	7139                	addi	sp,sp,-64
    8001816a:	fc06                	sd	ra,56(sp)
    8001816c:	e82e                	sd	a1,16(sp)
    8001816e:	ec2a                	sd	a0,24(sp)
    80018170:	f42a                	sd	a0,40(sp)
    80018172:	f82e                	sd	a1,48(sp)
    80018174:	04000537          	lui	a0,0x4000
    80018178:	357d                	addiw	a0,a0,-1
    8001817a:	0532                	slli	a0,a0,0xc
        self.uvm_unmap(
            VirtualAddress::new(TRAMPOLINE ), 
    8001817c:	ffff9097          	auipc	ra,0xffff9
    80018180:	39c080e7          	jalr	924(ra) # 80011518 <_ZN6kernel6memory7address14VirtualAddress3new17h716be423461f1938E>
    80018184:	f02a                	sd	a0,32(sp)
    80018186:	a009                	j	80018188 <_ZN6kernel6memory7mapping10page_table9PageTable19proc_free_pagetable17h67102aea540089c1E+0x20>
        self.uvm_unmap(
    80018188:	7582                	ld	a1,32(sp)
    8001818a:	6562                	ld	a0,24(sp)
    8001818c:	4605                	li	a2,1
    8001818e:	4681                	li	a3,0
    80018190:	fffff097          	auipc	ra,0xfffff
    80018194:	4e0080e7          	jalr	1248(ra) # 80017670 <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_unmap17hab395d2793038c03E>
    80018198:	a009                	j	8001819a <_ZN6kernel6memory7mapping10page_table9PageTable19proc_free_pagetable17h67102aea540089c1E+0x32>
    8001819a:	02000537          	lui	a0,0x2000
    8001819e:	357d                	addiw	a0,a0,-1
    800181a0:	0536                	slli	a0,a0,0xd
            1, 
            false
        );

        self.uvm_unmap(
            VirtualAddress::new(TRAPFRAME),
    800181a2:	ffff9097          	auipc	ra,0xffff9
    800181a6:	376080e7          	jalr	886(ra) # 80011518 <_ZN6kernel6memory7address14VirtualAddress3new17h716be423461f1938E>
    800181aa:	e42a                	sd	a0,8(sp)
    800181ac:	a009                	j	800181ae <_ZN6kernel6memory7mapping10page_table9PageTable19proc_free_pagetable17h67102aea540089c1E+0x46>
        self.uvm_unmap(
    800181ae:	65a2                	ld	a1,8(sp)
    800181b0:	6562                	ld	a0,24(sp)
    800181b2:	4605                	li	a2,1
    800181b4:	4681                	li	a3,0
    800181b6:	fffff097          	auipc	ra,0xfffff
    800181ba:	4ba080e7          	jalr	1210(ra) # 80017670 <_ZN6kernel6memory7mapping10page_table9PageTable9uvm_unmap17hab395d2793038c03E>
    800181be:	a009                	j	800181c0 <_ZN6kernel6memory7mapping10page_table9PageTable19proc_free_pagetable17h67102aea540089c1E+0x58>
            1,
            false
        );

        self.uvm_free(size);
    800181c0:	65c2                	ld	a1,16(sp)
    800181c2:	6562                	ld	a0,24(sp)
    800181c4:	fffff097          	auipc	ra,0xfffff
    800181c8:	36a080e7          	jalr	874(ra) # 8001752e <_ZN6kernel6memory7mapping10page_table9PageTable8uvm_free17h541177c5e75f280dE>
    800181cc:	a009                	j	800181ce <_ZN6kernel6memory7mapping10page_table9PageTable19proc_free_pagetable17h67102aea540089c1E+0x66>
        // self.free();
    }
    800181ce:	70e2                	ld	ra,56(sp)
    800181d0:	6121                	addi	sp,sp,64
    800181d2:	8082                	ret

Disassembly of section .text._ZN4core3str21_$LT$impl$u20$str$GT$5bytes17h8801f19f835ac923E:

00000000800181d4 <_ZN4core3str21_$LT$impl$u20$str$GT$5bytes17h8801f19f835ac923E>:
    ///
    /// assert_eq!(None, bytes.next());
    /// ```
    #[stable(feature = "rust1", since = "1.0.0")]
    #[inline]
    pub fn bytes(&self) -> Bytes<'_> {
    800181d4:	7119                	addi	sp,sp,-128
    800181d6:	fc86                	sd	ra,120(sp)
    800181d8:	e4aa                	sd	a0,72(sp)
    800181da:	e8ae                	sd	a1,80(sp)
    800181dc:	ecaa                	sd	a0,88(sp)
    800181de:	f0ae                	sd	a1,96(sp)
        unsafe { mem::transmute(self) }
    800181e0:	f4aa                	sd	a0,104(sp)
    800181e2:	f8ae                	sd	a1,112(sp)
        Bytes(self.as_bytes().iter().copied())
    800181e4:	f42a                	sd	a0,40(sp)
    800181e6:	f82e                	sd	a1,48(sp)
    800181e8:	a009                	j	800181ea <_ZN4core3str21_$LT$impl$u20$str$GT$5bytes17h8801f19f835ac923E+0x16>
    800181ea:	75c2                	ld	a1,48(sp)
    800181ec:	7522                	ld	a0,40(sp)
    800181ee:	00007097          	auipc	ra,0x7
    800181f2:	294080e7          	jalr	660(ra) # 8001f482 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h8f308ca2182773f1E>
    800181f6:	ec2a                	sd	a0,24(sp)
    800181f8:	f02e                	sd	a1,32(sp)
    800181fa:	a009                	j	800181fc <_ZN4core3str21_$LT$impl$u20$str$GT$5bytes17h8801f19f835ac923E+0x28>
    800181fc:	7582                	ld	a1,32(sp)
    800181fe:	6562                	ld	a0,24(sp)
    80018200:	ffff3097          	auipc	ra,0xffff3
    80018204:	97e080e7          	jalr	-1666(ra) # 8000ab7e <_ZN4core4iter6traits8iterator8Iterator6copied17hc4f54d9039c4545bE>
    80018208:	e42a                	sd	a0,8(sp)
    8001820a:	e82e                	sd	a1,16(sp)
    8001820c:	a009                	j	8001820e <_ZN4core3str21_$LT$impl$u20$str$GT$5bytes17h8801f19f835ac923E+0x3a>
    8001820e:	65c2                	ld	a1,16(sp)
    80018210:	6522                	ld	a0,8(sp)
    80018212:	fc2a                	sd	a0,56(sp)
    80018214:	e0ae                	sd	a1,64(sp)
    }
    80018216:	70e6                	ld	ra,120(sp)
    80018218:	6109                	addi	sp,sp,128
    8001821a:	8082                	ret

Disassembly of section .text._ZN4core3str21_$LT$impl$u20$str$GT$5chars17h18a0dd289a8edb0cE:

000000008001821c <_ZN4core3str21_$LT$impl$u20$str$GT$5chars17h18a0dd289a8edb0cE>:
    pub fn chars(&self) -> Chars<'_> {
    8001821c:	7159                	addi	sp,sp,-112
    8001821e:	f486                	sd	ra,104(sp)
    80018220:	fc2a                	sd	a0,56(sp)
    80018222:	e0ae                	sd	a1,64(sp)
    80018224:	e4aa                	sd	a0,72(sp)
    80018226:	e8ae                	sd	a1,80(sp)
        unsafe { mem::transmute(self) }
    80018228:	ecaa                	sd	a0,88(sp)
    8001822a:	f0ae                	sd	a1,96(sp)
        Chars { iter: self.as_bytes().iter() }
    8001822c:	ec2a                	sd	a0,24(sp)
    8001822e:	f02e                	sd	a1,32(sp)
    80018230:	a009                	j	80018232 <_ZN4core3str21_$LT$impl$u20$str$GT$5chars17h18a0dd289a8edb0cE+0x16>
    80018232:	7582                	ld	a1,32(sp)
    80018234:	6562                	ld	a0,24(sp)
    80018236:	00007097          	auipc	ra,0x7
    8001823a:	24c080e7          	jalr	588(ra) # 8001f482 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h8f308ca2182773f1E>
    8001823e:	e42a                	sd	a0,8(sp)
    80018240:	e82e                	sd	a1,16(sp)
    80018242:	a009                	j	80018244 <_ZN4core3str21_$LT$impl$u20$str$GT$5chars17h18a0dd289a8edb0cE+0x28>
    80018244:	65c2                	ld	a1,16(sp)
    80018246:	6522                	ld	a0,8(sp)
    80018248:	f42a                	sd	a0,40(sp)
    8001824a:	f82e                	sd	a1,48(sp)
    }
    8001824c:	70a6                	ld	ra,104(sp)
    8001824e:	6165                	addi	sp,sp,112
    80018250:	8082                	ret

Disassembly of section .text._ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h399b117e49285f4dE:

0000000080018252 <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h399b117e49285f4dE>:
    pub const fn as_ptr(&self) -> *const u8 {
    80018252:	1141                	addi	sp,sp,-16
    80018254:	e02a                	sd	a0,0(sp)
    80018256:	e42e                	sd	a1,8(sp)
    }
    80018258:	0141                	addi	sp,sp,16
    8001825a:	8082                	ret

Disassembly of section .text._ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hede063de0d7bedabE:

000000008001825c <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hede063de0d7bedabE>:
    8001825c:	1101                	addi	sp,sp,-32
    8001825e:	ec06                	sd	ra,24(sp)
    80018260:	e42a                	sd	a0,8(sp)
    80018262:	e82e                	sd	a1,16(sp)
    80018264:	6108                	ld	a0,0(a0)
    80018266:	ffff0097          	auipc	ra,0xffff0
    8001826a:	0a4080e7          	jalr	164(ra) # 8000830a <_ZN66_$LT$kernel..fs..dinode..InodeType$u20$as$u20$core..fmt..Debug$GT$3fmt17hb18bbbb2274bc1adE>
    8001826e:	e02a                	sd	a0,0(sp)
    80018270:	a009                	j	80018272 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hede063de0d7bedabE+0x16>
    80018272:	6502                	ld	a0,0(sp)
    80018274:	60e2                	ld	ra,24(sp)
    80018276:	6105                	addi	sp,sp,32
    80018278:	8082                	ret

Disassembly of section .text._ZN4core3cmp9PartialEq2ne17ha4fd141ed85850e3E:

000000008001827a <_ZN4core3cmp9PartialEq2ne17ha4fd141ed85850e3E>:

    /// This method tests for `!=`.
    #[inline]
    #[must_use]
    #[stable(feature = "rust1", since = "1.0.0")]
    fn ne(&self, other: &Rhs) -> bool {
    8001827a:	1101                	addi	sp,sp,-32
    8001827c:	ec06                	sd	ra,24(sp)
    8001827e:	e42a                	sd	a0,8(sp)
    80018280:	e82e                	sd	a1,16(sp)
        !self.eq(other)
    80018282:	ffff0097          	auipc	ra,0xffff0
    80018286:	18a080e7          	jalr	394(ra) # 8000840c <_ZN70_$LT$kernel..fs..dinode..InodeType$u20$as$u20$core..cmp..PartialEq$GT$2eq17h96b8b60db340aeeeE>
    8001828a:	e02a                	sd	a0,0(sp)
    8001828c:	a009                	j	8001828e <_ZN4core3cmp9PartialEq2ne17ha4fd141ed85850e3E+0x14>
    8001828e:	6502                	ld	a0,0(sp)
    80018290:	00154513          	xori	a0,a0,1
    }
    80018294:	60e2                	ld	ra,24(sp)
    80018296:	6105                	addi	sp,sp,32
    80018298:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hf7573a6302c08e61E:

000000008001829a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hf7573a6302c08e61E>:
    pub const unsafe fn offset(self, count: isize) -> *mut T
    8001829a:	1101                	addi	sp,sp,-32
    8001829c:	e42a                	sd	a0,8(sp)
    8001829e:	e82e                	sd	a1,16(sp)
        unsafe { intrinsics::offset(self, count) as *mut T }
    800182a0:	059a                	slli	a1,a1,0x6
    800182a2:	952e                	add	a0,a0,a1
    800182a4:	e02a                	sd	a0,0(sp)
    800182a6:	ec2a                	sd	a0,24(sp)
    800182a8:	a009                	j	800182aa <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hf7573a6302c08e61E+0x10>
    }
    800182aa:	6502                	ld	a0,0(sp)
    800182ac:	6105                	addi	sp,sp,32
    800182ae:	8082                	ret

Disassembly of section .text._ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hb9f56331d13383c1E:

00000000800182b0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hb9f56331d13383c1E>:
    pub const unsafe fn offset(self, count: isize) -> *const T
    800182b0:	1101                	addi	sp,sp,-32
    800182b2:	e42a                	sd	a0,8(sp)
    800182b4:	e82e                	sd	a1,16(sp)
        unsafe { intrinsics::offset(self, count) }
    800182b6:	059a                	slli	a1,a1,0x6
    800182b8:	952e                	add	a0,a0,a1
    800182ba:	e02a                	sd	a0,0(sp)
    800182bc:	ec2a                	sd	a0,24(sp)
    800182be:	a009                	j	800182c0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hb9f56331d13383c1E+0x10>
    }
    800182c0:	6502                	ld	a0,0(sp)
    800182c2:	6105                	addi	sp,sp,32
    800182c4:	8082                	ret

Disassembly of section .text._ZN4core3num7nonzero12NonZeroUsize13new_unchecked17h04f2481c8bf8ee85E:

00000000800182c6 <_ZN4core3num7nonzero12NonZeroUsize13new_unchecked17h04f2481c8bf8ee85E>:
                ///
                /// The value must not be zero.
                #[$stability]
                #[rustc_const_stable(feature = "nonzero", since = "1.34.0")]
                #[inline]
                pub const unsafe fn new_unchecked(n: $Int) -> Self {
    800182c6:	1141                	addi	sp,sp,-16
    800182c8:	e42a                	sd	a0,8(sp)
                    // SAFETY: this is guaranteed to be safe by the caller.
                    unsafe { Self(n) }
    800182ca:	e02a                	sd	a0,0(sp)
                }
    800182cc:	0141                	addi	sp,sp,16
    800182ce:	8082                	ret

Disassembly of section .text._ZN4core3num7nonzero12NonZeroUsize3get17h9c9882678da2bc98E:

00000000800182d0 <_ZN4core3num7nonzero12NonZeroUsize3get17h9c9882678da2bc98E>:

                /// Returns the value as a primitive type.
                #[$stability]
                #[inline]
                #[rustc_const_stable(feature = "nonzero", since = "1.34.0")]
                pub const fn get(self) -> $Int {
    800182d0:	1141                	addi	sp,sp,-16
    800182d2:	e42a                	sd	a0,8(sp)
                    self.0
                }
    800182d4:	0141                	addi	sp,sp,16
    800182d6:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv4qemu2fs8OpenMode4mode17h15bbb1ea8002b902E:

00000000800182d8 <_ZN6kernel4arch5riscv4qemu2fs8OpenMode4mode17h15bbb1ea8002b902E>:
   TRUNC = 0x400,
   INVALID
}

impl OpenMode {
    pub fn mode(item: usize) -> Self {
    800182d8:	1101                	addi	sp,sp,-32
    800182da:	e42a                	sd	a0,8(sp)
    800182dc:	ec2a                	sd	a0,24(sp)
    800182de:	4581                	li	a1,0
        match item {
            0x000 => { Self::RDONLY },
    800182e0:	02b50d63          	beq	a0,a1,8001831a <_ZN6kernel4arch5riscv4qemu2fs8OpenMode4mode17h15bbb1ea8002b902E+0x42>
    800182e4:	a009                	j	800182e6 <_ZN6kernel4arch5riscv4qemu2fs8OpenMode4mode17h15bbb1ea8002b902E+0xe>
    800182e6:	6522                	ld	a0,8(sp)
    800182e8:	4585                	li	a1,1
    800182ea:	02b50b63          	beq	a0,a1,80018320 <_ZN6kernel4arch5riscv4qemu2fs8OpenMode4mode17h15bbb1ea8002b902E+0x48>
    800182ee:	a009                	j	800182f0 <_ZN6kernel4arch5riscv4qemu2fs8OpenMode4mode17h15bbb1ea8002b902E+0x18>
    800182f0:	6522                	ld	a0,8(sp)
    800182f2:	4589                	li	a1,2
    800182f4:	02b50963          	beq	a0,a1,80018326 <_ZN6kernel4arch5riscv4qemu2fs8OpenMode4mode17h15bbb1ea8002b902E+0x4e>
    800182f8:	a009                	j	800182fa <_ZN6kernel4arch5riscv4qemu2fs8OpenMode4mode17h15bbb1ea8002b902E+0x22>
    800182fa:	6522                	ld	a0,8(sp)
    800182fc:	20000593          	li	a1,512
    80018300:	02b50663          	beq	a0,a1,8001832c <_ZN6kernel4arch5riscv4qemu2fs8OpenMode4mode17h15bbb1ea8002b902E+0x54>
    80018304:	a009                	j	80018306 <_ZN6kernel4arch5riscv4qemu2fs8OpenMode4mode17h15bbb1ea8002b902E+0x2e>
    80018306:	6522                	ld	a0,8(sp)
    80018308:	40000593          	li	a1,1024
    8001830c:	02b50463          	beq	a0,a1,80018334 <_ZN6kernel4arch5riscv4qemu2fs8OpenMode4mode17h15bbb1ea8002b902E+0x5c>
    80018310:	a009                	j	80018312 <_ZN6kernel4arch5riscv4qemu2fs8OpenMode4mode17h15bbb1ea8002b902E+0x3a>
    80018312:	40100513          	li	a0,1025
            0x001 => { Self::WRONLY },
            0x002 => { Self::RDWR },
            0x200 => { Self::CREATE },
            0x400 => { Self::TRUNC },
            _ => {Self::INVALID}
    80018316:	e82a                	sd	a0,16(sp)
        match item {
    80018318:	a015                	j	8001833c <_ZN6kernel4arch5riscv4qemu2fs8OpenMode4mode17h15bbb1ea8002b902E+0x64>
    8001831a:	4501                	li	a0,0
            0x000 => { Self::RDONLY },
    8001831c:	e82a                	sd	a0,16(sp)
        match item {
    8001831e:	a839                	j	8001833c <_ZN6kernel4arch5riscv4qemu2fs8OpenMode4mode17h15bbb1ea8002b902E+0x64>
    80018320:	4505                	li	a0,1
            0x001 => { Self::WRONLY },
    80018322:	e82a                	sd	a0,16(sp)
        match item {
    80018324:	a821                	j	8001833c <_ZN6kernel4arch5riscv4qemu2fs8OpenMode4mode17h15bbb1ea8002b902E+0x64>
    80018326:	4509                	li	a0,2
            0x002 => { Self::RDWR },
    80018328:	e82a                	sd	a0,16(sp)
        match item {
    8001832a:	a809                	j	8001833c <_ZN6kernel4arch5riscv4qemu2fs8OpenMode4mode17h15bbb1ea8002b902E+0x64>
    8001832c:	20000513          	li	a0,512
            0x200 => { Self::CREATE },
    80018330:	e82a                	sd	a0,16(sp)
        match item {
    80018332:	a029                	j	8001833c <_ZN6kernel4arch5riscv4qemu2fs8OpenMode4mode17h15bbb1ea8002b902E+0x64>
    80018334:	40000513          	li	a0,1024
            0x400 => { Self::TRUNC },
    80018338:	e82a                	sd	a0,16(sp)
        match item {
    8001833a:	a009                	j	8001833c <_ZN6kernel4arch5riscv4qemu2fs8OpenMode4mode17h15bbb1ea8002b902E+0x64>
        }
    }
    8001833c:	6542                	ld	a0,16(sp)
    8001833e:	6105                	addi	sp,sp,32
    80018340:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register10sfence_vma17h7533c6c75a9febaaE:

0000000080018342 <_ZN6kernel4arch5riscv8register10sfence_vma17h7533c6c75a9febaaE>:
pub mod clint;


#[inline]
// flush the TLB.
pub unsafe fn sfence_vma(){
    80018342:	7159                	addi	sp,sp,-112
    println!("flush the TLB");
    80018344:	f486                	sd	ra,104(sp)

0000000080018346 <.LBB0_5>:
    80018346:	00012597          	auipc	a1,0x12
    8001834a:	2fa58593          	addi	a1,a1,762 # 8002a640 <.L__unnamed_1>

000000008001834e <.LBB0_6>:
    8001834e:	00012697          	auipc	a3,0x12
    80018352:	30268693          	addi	a3,a3,770 # 8002a650 <.L__unnamed_5>
    80018356:	0028                	addi	a0,sp,8
    80018358:	4605                	li	a2,1
    8001835a:	4701                	li	a4,0
    8001835c:	fffed097          	auipc	ra,0xfffed
    80018360:	0d8080e7          	jalr	216(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80018364:	a009                	j	80018366 <.LBB0_6+0x18>
    80018366:	0028                	addi	a0,sp,8
    80018368:	00006097          	auipc	ra,0x6
    8001836c:	848080e7          	jalr	-1976(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    80018370:	a009                	j	80018372 <.LBB0_6+0x24>
    llvm_asm!("sfence.vma zero, zero"::::"volatile");
    80018372:	12000073          	sfence.vma

0000000080018376 <.LBB0_7>:
    println!("finish sfence vma");
    80018376:	00012597          	auipc	a1,0x12
    8001837a:	2f258593          	addi	a1,a1,754 # 8002a668 <.L__unnamed_3>

000000008001837e <.LBB0_8>:
    8001837e:	00012697          	auipc	a3,0x12
    80018382:	2d268693          	addi	a3,a3,722 # 8002a650 <.L__unnamed_5>
    80018386:	1828                	addi	a0,sp,56
    80018388:	4605                	li	a2,1
    8001838a:	4701                	li	a4,0
    8001838c:	fffed097          	auipc	ra,0xfffed
    80018390:	0a8080e7          	jalr	168(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    80018394:	a009                	j	80018396 <.LBB0_8+0x18>
    80018396:	1828                	addi	a0,sp,56
    80018398:	00006097          	auipc	ra,0x6
    8001839c:	818080e7          	jalr	-2024(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    800183a0:	a009                	j	800183a2 <.LBB0_8+0x24>
    800183a2:	70a6                	ld	ra,104(sp)
    800183a4:	6165                	addi	sp,sp,112
    800183a6:	8082                	ret

Disassembly of section .text._ZN4core3ptr13read_volatile17h0ae297fe3f24e4caE:

00000000800183a8 <_ZN4core3ptr13read_volatile17h0ae297fe3f24e4caE>:
///     assert_eq!(std::ptr::read_volatile(y), 12);
/// }
/// ```
#[inline]
#[stable(feature = "volatile", since = "1.9.0")]
pub unsafe fn read_volatile<T>(src: *const T) -> T {
    800183a8:	1101                	addi	sp,sp,-32
    800183aa:	e82a                	sd	a0,16(sp)
    if cfg!(debug_assertions) && !is_aligned_and_not_null(src) {
        // Not panicking to keep codegen impact smaller.
        abort();
    }
    // SAFETY: the caller must uphold the safety contract for `volatile_load`.
    unsafe { intrinsics::volatile_load(src) }
    800183ac:	00056503          	lwu	a0,0(a0) # 2000000 <.Lline_table_start0+0x1fc9699>
    800183b0:	e42a                	sd	a0,8(sp)
    800183b2:	ce2a                	sw	a0,28(sp)
    800183b4:	a009                	j	800183b6 <_ZN4core3ptr13read_volatile17h0ae297fe3f24e4caE+0xe>
}
    800183b6:	6522                	ld	a0,8(sp)
    800183b8:	6105                	addi	sp,sp,32
    800183ba:	8082                	ret

Disassembly of section .text._ZN4core3ptr13read_volatile17h48a61fef837248f4E:

00000000800183bc <_ZN4core3ptr13read_volatile17h48a61fef837248f4E>:
pub unsafe fn read_volatile<T>(src: *const T) -> T {
    800183bc:	1101                	addi	sp,sp,-32
    800183be:	e82a                	sd	a0,16(sp)
    unsafe { intrinsics::volatile_load(src) }
    800183c0:	00054503          	lbu	a0,0(a0)
    800183c4:	e42a                	sd	a0,8(sp)
    800183c6:	00a10fa3          	sb	a0,31(sp)
    800183ca:	a009                	j	800183cc <_ZN4core3ptr13read_volatile17h48a61fef837248f4E+0x10>
}
    800183cc:	6522                	ld	a0,8(sp)
    800183ce:	6105                	addi	sp,sp,32
    800183d0:	8082                	ret

Disassembly of section .text._ZN4core3ptr13read_volatile17h53ed030574802bd4E:

00000000800183d2 <_ZN4core3ptr13read_volatile17h53ed030574802bd4E>:
pub unsafe fn read_volatile<T>(src: *const T) -> T {
    800183d2:	1101                	addi	sp,sp,-32
    800183d4:	e82a                	sd	a0,16(sp)
    unsafe { intrinsics::volatile_load(src) }
    800183d6:	6108                	ld	a0,0(a0)
    800183d8:	e42a                	sd	a0,8(sp)
    800183da:	ec2a                	sd	a0,24(sp)
    800183dc:	a009                	j	800183de <_ZN4core3ptr13read_volatile17h53ed030574802bd4E+0xc>
}
    800183de:	6522                	ld	a0,8(sp)
    800183e0:	6105                	addi	sp,sp,32
    800183e2:	8082                	ret

Disassembly of section .text._ZN4core3ptr14write_volatile17h1c498a4c32cde7d4E:

00000000800183e4 <_ZN4core3ptr14write_volatile17h1c498a4c32cde7d4E>:
///     assert_eq!(std::ptr::read_volatile(y), 12);
/// }
/// ```
#[inline]
#[stable(feature = "volatile", since = "1.9.0")]
pub unsafe fn write_volatile<T>(dst: *mut T, src: T) {
    800183e4:	1141                	addi	sp,sp,-16
    800183e6:	e02a                	sd	a0,0(sp)
    800183e8:	c62e                	sw	a1,12(sp)
        // Not panicking to keep codegen impact smaller.
        abort();
    }
    // SAFETY: the caller must uphold the safety contract for `volatile_store`.
    unsafe {
        intrinsics::volatile_store(dst, src);
    800183ea:	c10c                	sw	a1,0(a0)
    800183ec:	a009                	j	800183ee <_ZN4core3ptr14write_volatile17h1c498a4c32cde7d4E+0xa>
    }
}
    800183ee:	0141                	addi	sp,sp,16
    800183f0:	8082                	ret

Disassembly of section .text._ZN4core3ptr14write_volatile17h935b49f1a63f6714E:

00000000800183f2 <_ZN4core3ptr14write_volatile17h935b49f1a63f6714E>:
pub unsafe fn write_volatile<T>(dst: *mut T, src: T) {
    800183f2:	1141                	addi	sp,sp,-16
    800183f4:	e02a                	sd	a0,0(sp)
    800183f6:	e42e                	sd	a1,8(sp)
        intrinsics::volatile_store(dst, src);
    800183f8:	e10c                	sd	a1,0(a0)
    800183fa:	a009                	j	800183fc <_ZN4core3ptr14write_volatile17h935b49f1a63f6714E+0xa>
}
    800183fc:	0141                	addi	sp,sp,16
    800183fe:	8082                	ret

Disassembly of section .text._ZN4core3ptr14write_volatile17ha922d8ced3e01de5E:

0000000080018400 <_ZN4core3ptr14write_volatile17ha922d8ced3e01de5E>:
pub unsafe fn write_volatile<T>(dst: *mut T, src: T) {
    80018400:	1141                	addi	sp,sp,-16
    80018402:	e02a                	sd	a0,0(sp)
    80018404:	00b107a3          	sb	a1,15(sp)
        intrinsics::volatile_store(dst, src);
    80018408:	00b50023          	sb	a1,0(a0)
    8001840c:	a009                	j	8001840e <_ZN4core3ptr14write_volatile17ha922d8ced3e01de5E+0xe>
}
    8001840e:	0141                	addi	sp,sp,16
    80018410:	8082                	ret

Disassembly of section .text._ZN4core3ptr20slice_from_raw_parts17h19b34a977b1709d3E:

0000000080018412 <_ZN4core3ptr20slice_from_raw_parts17h19b34a977b1709d3E>:
pub const fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {
    80018412:	7139                	addi	sp,sp,-64
    80018414:	fc06                	sd	ra,56(sp)
    80018416:	ec2e                	sd	a1,24(sp)
    80018418:	f42a                	sd	a0,40(sp)
    8001841a:	f82e                	sd	a1,48(sp)
    from_raw_parts(data.cast(), len)
    8001841c:	fffec097          	auipc	ra,0xfffec
    80018420:	426080e7          	jalr	1062(ra) # 80004842 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4cast17he44352a5ab45ee06E>
    80018424:	f02a                	sd	a0,32(sp)
    80018426:	a009                	j	80018428 <_ZN4core3ptr20slice_from_raw_parts17h19b34a977b1709d3E+0x16>
    80018428:	65e2                	ld	a1,24(sp)
    8001842a:	7502                	ld	a0,32(sp)
    8001842c:	00003097          	auipc	ra,0x3
    80018430:	ad8080e7          	jalr	-1320(ra) # 8001af04 <_ZN4core3ptr8metadata14from_raw_parts17hb35c9d87c96e1656E>
    80018434:	e42a                	sd	a0,8(sp)
    80018436:	e82e                	sd	a1,16(sp)
    80018438:	a009                	j	8001843a <_ZN4core3ptr20slice_from_raw_parts17h19b34a977b1709d3E+0x28>
}
    8001843a:	65c2                	ld	a1,16(sp)
    8001843c:	6522                	ld	a0,8(sp)
    8001843e:	70e2                	ld	ra,56(sp)
    80018440:	6121                	addi	sp,sp,64
    80018442:	8082                	ret

Disassembly of section .text._ZN4core3ptr20slice_from_raw_parts17h4c1ee3b844c20623E:

0000000080018444 <_ZN4core3ptr20slice_from_raw_parts17h4c1ee3b844c20623E>:
pub const fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {
    80018444:	7139                	addi	sp,sp,-64
    80018446:	fc06                	sd	ra,56(sp)
    80018448:	ec2e                	sd	a1,24(sp)
    8001844a:	f42a                	sd	a0,40(sp)
    8001844c:	f82e                	sd	a1,48(sp)
    from_raw_parts(data.cast(), len)
    8001844e:	fffec097          	auipc	ra,0xfffec
    80018452:	3ec080e7          	jalr	1004(ra) # 8000483a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4cast17h03bc1f4ed09a4b3cE>
    80018456:	f02a                	sd	a0,32(sp)
    80018458:	a009                	j	8001845a <_ZN4core3ptr20slice_from_raw_parts17h4c1ee3b844c20623E+0x16>
    8001845a:	65e2                	ld	a1,24(sp)
    8001845c:	7502                	ld	a0,32(sp)
    8001845e:	00003097          	auipc	ra,0x3
    80018462:	ab8080e7          	jalr	-1352(ra) # 8001af16 <_ZN4core3ptr8metadata14from_raw_parts17hd9330322b61d2f92E>
    80018466:	e42a                	sd	a0,8(sp)
    80018468:	e82e                	sd	a1,16(sp)
    8001846a:	a009                	j	8001846c <_ZN4core3ptr20slice_from_raw_parts17h4c1ee3b844c20623E+0x28>
}
    8001846c:	65c2                	ld	a1,16(sp)
    8001846e:	6522                	ld	a0,8(sp)
    80018470:	70e2                	ld	ra,56(sp)
    80018472:	6121                	addi	sp,sp,64
    80018474:	8082                	ret

Disassembly of section .text._ZN4core3ptr2eq17h2ab91a60e465e9ebE:

0000000080018476 <_ZN4core3ptr2eq17h2ab91a60e465e9ebE>:
///     &wrapper.member as &dyn Trait as *const dyn Trait as *const u8,
/// ));
/// ```
#[stable(feature = "ptr_eq", since = "1.17.0")]
#[inline]
pub fn eq<T: ?Sized>(a: *const T, b: *const T) -> bool {
    80018476:	1141                	addi	sp,sp,-16
    80018478:	e02a                	sd	a0,0(sp)
    8001847a:	e42e                	sd	a1,8(sp)
    a == b
    8001847c:	8d2d                	xor	a0,a0,a1
    8001847e:	00153513          	seqz	a0,a0
}
    80018482:	0141                	addi	sp,sp,16
    80018484:	8082                	ret

Disassembly of section .text._ZN4core3ptr4read17h018161c0cd37b3fbE:

0000000080018486 <_ZN4core3ptr4read17h018161c0cd37b3fbE>:
pub const unsafe fn read<T>(src: *const T) -> T {
    80018486:	7179                	addi	sp,sp,-48
    80018488:	e42a                	sd	a0,8(sp)
    8001848a:	ec2a                	sd	a0,24(sp)
    #[rustc_const_stable(feature = "const_maybe_uninit", since = "1.36.0")]
    #[inline(always)]
    #[rustc_diagnostic_item = "maybe_uninit_uninit"]
    pub const fn uninit() -> MaybeUninit<T> {
        MaybeUninit { uninit: () }
    }
    8001848c:	02510503          	lb	a0,37(sp)
    let mut tmp = MaybeUninit::<T>::uninit();
    80018490:	00a10ba3          	sb	a0,23(sp)
    80018494:	a009                	j	80018496 <_ZN4core3ptr4read17h018161c0cd37b3fbE+0x10>
    80018496:	01710513          	addi	a0,sp,23
    8001849a:	f42a                	sd	a0,40(sp)
        copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
    8001849c:	a009                	j	8001849e <_ZN4core3ptr4read17h018161c0cd37b3fbE+0x18>
    8001849e:	6522                	ld	a0,8(sp)
    800184a0:	00054503          	lbu	a0,0(a0)
    800184a4:	e02a                	sd	a0,0(sp)
    800184a6:	00a10ba3          	sb	a0,23(sp)
    800184aa:	02a10323          	sb	a0,38(sp)
    800184ae:	02a103a3          	sb	a0,39(sp)
        tmp.assume_init()
    800184b2:	a009                	j	800184b4 <_ZN4core3ptr4read17h018161c0cd37b3fbE+0x2e>
}
    800184b4:	6502                	ld	a0,0(sp)
    800184b6:	6145                	addi	sp,sp,48
    800184b8:	8082                	ret

Disassembly of section .text._ZN4core3ptr4read17h260501ac2ae68563E:

00000000800184ba <_ZN4core3ptr4read17h260501ac2ae68563E>:
pub const unsafe fn read<T>(src: *const T) -> T {
    800184ba:	7159                	addi	sp,sp,-112
    800184bc:	e42e                	sd	a1,8(sp)
    800184be:	e82a                	sd	a0,16(sp)
    800184c0:	e4ae                	sd	a1,72(sp)
    let mut tmp = MaybeUninit::<T>::uninit();
    800184c2:	a009                	j	800184c4 <_ZN4core3ptr4read17h260501ac2ae68563E+0xa>
    800184c4:	0828                	addi	a0,sp,24
    800184c6:	e02a                	sd	a0,0(sp)
    800184c8:	f4aa                	sd	a0,104(sp)
        copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
    800184ca:	a009                	j	800184cc <_ZN4core3ptr4read17h260501ac2ae68563E+0x12>
    800184cc:	65c2                	ld	a1,16(sp)
    800184ce:	6602                	ld	a2,0(sp)
    800184d0:	6522                	ld	a0,8(sp)
    800184d2:	6914                	ld	a3,16(a0)
    800184d4:	ea14                	sd	a3,16(a2)
    800184d6:	6514                	ld	a3,8(a0)
    800184d8:	e614                	sd	a3,8(a2)
    800184da:	6108                	ld	a0,0(a0)
    800184dc:	e208                	sd	a0,0(a2)
        tmp.assume_init()
    800184de:	76a2                	ld	a3,40(sp)
    800184e0:	e0b6                	sd	a3,64(sp)
    800184e2:	7602                	ld	a2,32(sp)
    800184e4:	fc32                	sd	a2,56(sp)
    800184e6:	6562                	ld	a0,24(sp)
    800184e8:	f82a                	sd	a0,48(sp)
    pub const unsafe fn assume_init(self) -> T {
        // SAFETY: the caller must guarantee that `self` is initialized.
        // This also means that `self` must be a `value` variant.
        unsafe {
            intrinsics::assert_inhabited::<T>();
            ManuallyDrop::into_inner(self.value)
    800184ea:	e8aa                	sd	a0,80(sp)
    800184ec:	ecb2                	sd	a2,88(sp)
    800184ee:	f0b6                	sd	a3,96(sp)
    800184f0:	e994                	sd	a3,16(a1)
    800184f2:	e590                	sd	a2,8(a1)
    800184f4:	e188                	sd	a0,0(a1)
    800184f6:	a009                	j	800184f8 <_ZN4core3ptr4read17h260501ac2ae68563E+0x3e>
}
    800184f8:	6165                	addi	sp,sp,112
    800184fa:	8082                	ret

Disassembly of section .text._ZN4core3ptr4read17h49d73875721fb0a9E:

00000000800184fc <_ZN4core3ptr4read17h49d73875721fb0a9E>:
pub const unsafe fn read<T>(src: *const T) -> T {
    800184fc:	7179                	addi	sp,sp,-48
    800184fe:	e42a                	sd	a0,8(sp)
    80018500:	ec2a                	sd	a0,24(sp)
    }
    80018502:	02211503          	lh	a0,34(sp)
    let mut tmp = MaybeUninit::<T>::uninit();
    80018506:	00a11b23          	sh	a0,22(sp)
    8001850a:	a009                	j	8001850c <_ZN4core3ptr4read17h49d73875721fb0a9E+0x10>
    8001850c:	01610513          	addi	a0,sp,22
    80018510:	f42a                	sd	a0,40(sp)
        copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
    80018512:	a009                	j	80018514 <_ZN4core3ptr4read17h49d73875721fb0a9E+0x18>
    80018514:	6522                	ld	a0,8(sp)
    80018516:	00055503          	lhu	a0,0(a0)
    8001851a:	e02a                	sd	a0,0(sp)
    8001851c:	00a11b23          	sh	a0,22(sp)
    80018520:	02a11223          	sh	a0,36(sp)
    80018524:	02a11323          	sh	a0,38(sp)
        tmp.assume_init()
    80018528:	a009                	j	8001852a <_ZN4core3ptr4read17h49d73875721fb0a9E+0x2e>
}
    8001852a:	6502                	ld	a0,0(sp)
    8001852c:	6145                	addi	sp,sp,48
    8001852e:	8082                	ret

Disassembly of section .text._ZN4core3ptr4read17h97f5e0e151e0fdc4E:

0000000080018530 <_ZN4core3ptr4read17h97f5e0e151e0fdc4E>:
pub const unsafe fn read<T>(src: *const T) -> T {
    80018530:	7139                	addi	sp,sp,-64
    80018532:	e82a                	sd	a0,16(sp)
    80018534:	f02a                	sd	a0,32(sp)
    80018536:	5532                	lw	a0,44(sp)
    let mut tmp = MaybeUninit::<T>::uninit();
    80018538:	ce2a                	sw	a0,28(sp)
    8001853a:	a009                	j	8001853c <_ZN4core3ptr4read17h97f5e0e151e0fdc4E+0xc>
    8001853c:	0868                	addi	a0,sp,28
    8001853e:	fc2a                	sd	a0,56(sp)
        copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
    80018540:	a009                	j	80018542 <_ZN4core3ptr4read17h97f5e0e151e0fdc4E+0x12>
    80018542:	6542                	ld	a0,16(sp)
    80018544:	00056503          	lwu	a0,0(a0)
    80018548:	e42a                	sd	a0,8(sp)
    8001854a:	ce2a                	sw	a0,28(sp)
    8001854c:	d82a                	sw	a0,48(sp)
    8001854e:	da2a                	sw	a0,52(sp)
        tmp.assume_init()
    80018550:	a009                	j	80018552 <_ZN4core3ptr4read17h97f5e0e151e0fdc4E+0x22>
}
    80018552:	6522                	ld	a0,8(sp)
    80018554:	6121                	addi	sp,sp,64
    80018556:	8082                	ret

Disassembly of section .text._ZN4core3ptr4read17hb68b0b8aaefcfe70E:

0000000080018558 <_ZN4core3ptr4read17hb68b0b8aaefcfe70E>:
pub const unsafe fn read<T>(src: *const T) -> T {
    80018558:	1101                	addi	sp,sp,-32
    8001855a:	e42a                	sd	a0,8(sp)
    let mut tmp = MaybeUninit::<T>::uninit();
    8001855c:	a009                	j	8001855e <_ZN4core3ptr4read17hb68b0b8aaefcfe70E+0x6>
    8001855e:	850a                	mv	a0,sp
    80018560:	ec2a                	sd	a0,24(sp)
        copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
    80018562:	a009                	j	80018564 <_ZN4core3ptr4read17hb68b0b8aaefcfe70E+0xc>
        tmp.assume_init()
    80018564:	a009                	j	80018566 <_ZN4core3ptr4read17hb68b0b8aaefcfe70E+0xe>
}
    80018566:	6105                	addi	sp,sp,32
    80018568:	8082                	ret

Disassembly of section .text._ZN4core3ptr4read17hbe38e0f78fffdc49E:

000000008001856a <_ZN4core3ptr4read17hbe38e0f78fffdc49E>:
pub const unsafe fn read<T>(src: *const T) -> T {
    8001856a:	715d                	addi	sp,sp,-80
    8001856c:	ec2a                	sd	a0,24(sp)
    8001856e:	f42a                	sd	a0,40(sp)
    80018570:	7542                	ld	a0,48(sp)
    let mut tmp = MaybeUninit::<T>::uninit();
    80018572:	f02a                	sd	a0,32(sp)
    80018574:	a009                	j	80018576 <_ZN4core3ptr4read17hbe38e0f78fffdc49E+0xc>
    80018576:	1008                	addi	a0,sp,32
    80018578:	e82a                	sd	a0,16(sp)
    8001857a:	e4aa                	sd	a0,72(sp)
        copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
    8001857c:	a009                	j	8001857e <_ZN4core3ptr4read17hbe38e0f78fffdc49E+0x14>
    8001857e:	65c2                	ld	a1,16(sp)
    80018580:	6562                	ld	a0,24(sp)
    80018582:	6108                	ld	a0,0(a0)
    80018584:	e188                	sd	a0,0(a1)
        tmp.assume_init()
    80018586:	7502                	ld	a0,32(sp)
    80018588:	e42a                	sd	a0,8(sp)
    8001858a:	fc2a                	sd	a0,56(sp)
    8001858c:	e0aa                	sd	a0,64(sp)
    8001858e:	a009                	j	80018590 <_ZN4core3ptr4read17hbe38e0f78fffdc49E+0x26>
}
    80018590:	6522                	ld	a0,8(sp)
    80018592:	6161                	addi	sp,sp,80
    80018594:	8082                	ret

Disassembly of section .text._ZN4core3ptr4read17hca9a7d22776635f1E:

0000000080018596 <_ZN4core3ptr4read17hca9a7d22776635f1E>:
pub const unsafe fn read<T>(src: *const T) -> T {
    80018596:	7139                	addi	sp,sp,-64
    80018598:	e42a                	sd	a0,8(sp)
    8001859a:	ec2a                	sd	a0,24(sp)
    8001859c:	7502                	ld	a0,32(sp)
    let mut tmp = MaybeUninit::<T>::uninit();
    8001859e:	e82a                	sd	a0,16(sp)
    800185a0:	a009                	j	800185a2 <_ZN4core3ptr4read17hca9a7d22776635f1E+0xc>
    800185a2:	0808                	addi	a0,sp,16
    800185a4:	fc2a                	sd	a0,56(sp)
        copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
    800185a6:	a009                	j	800185a8 <_ZN4core3ptr4read17hca9a7d22776635f1E+0x12>
    800185a8:	6522                	ld	a0,8(sp)
    800185aa:	6108                	ld	a0,0(a0)
    800185ac:	e02a                	sd	a0,0(sp)
    800185ae:	e82a                	sd	a0,16(sp)
    800185b0:	f42a                	sd	a0,40(sp)
    800185b2:	f82a                	sd	a0,48(sp)
        tmp.assume_init()
    800185b4:	a009                	j	800185b6 <_ZN4core3ptr4read17hca9a7d22776635f1E+0x20>
}
    800185b6:	6502                	ld	a0,0(sp)
    800185b8:	6121                	addi	sp,sp,64
    800185ba:	8082                	ret

Disassembly of section .text._ZN4core3ptr4read17hcc58f40f4c4c7a01E:

00000000800185bc <_ZN4core3ptr4read17hcc58f40f4c4c7a01E>:
pub const unsafe fn read<T>(src: *const T) -> T {
    800185bc:	7159                	addi	sp,sp,-112
    800185be:	ec2a                	sd	a0,24(sp)
    800185c0:	f82a                	sd	a0,48(sp)
    800185c2:	75e2                	ld	a1,56(sp)
    800185c4:	6506                	ld	a0,64(sp)
    let mut tmp = MaybeUninit::<T>::uninit();
    800185c6:	f02e                	sd	a1,32(sp)
    800185c8:	f42a                	sd	a0,40(sp)
    800185ca:	a009                	j	800185cc <_ZN4core3ptr4read17hcc58f40f4c4c7a01E+0x10>
    800185cc:	1008                	addi	a0,sp,32
    800185ce:	e82a                	sd	a0,16(sp)
    800185d0:	f4aa                	sd	a0,104(sp)
        copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
    800185d2:	a009                	j	800185d4 <_ZN4core3ptr4read17hcc58f40f4c4c7a01E+0x18>
    800185d4:	65c2                	ld	a1,16(sp)
    800185d6:	6562                	ld	a0,24(sp)
    800185d8:	6510                	ld	a2,8(a0)
    800185da:	e590                	sd	a2,8(a1)
    800185dc:	6108                	ld	a0,0(a0)
    800185de:	e188                	sd	a0,0(a1)
        tmp.assume_init()
    800185e0:	7582                	ld	a1,32(sp)
    800185e2:	e02e                	sd	a1,0(sp)
    800185e4:	7522                	ld	a0,40(sp)
    800185e6:	e42a                	sd	a0,8(sp)
    800185e8:	e4ae                	sd	a1,72(sp)
    800185ea:	e8aa                	sd	a0,80(sp)
    800185ec:	ecae                	sd	a1,88(sp)
    800185ee:	f0aa                	sd	a0,96(sp)
    800185f0:	a009                	j	800185f2 <_ZN4core3ptr4read17hcc58f40f4c4c7a01E+0x36>
}
    800185f2:	65a2                	ld	a1,8(sp)
    800185f4:	6502                	ld	a0,0(sp)
    800185f6:	6165                	addi	sp,sp,112
    800185f8:	8082                	ret

Disassembly of section .text._ZN4core3ptr4read17hd0dbd64c70caff03E:

00000000800185fa <_ZN4core3ptr4read17hd0dbd64c70caff03E>:
pub const unsafe fn read<T>(src: *const T) -> T {
    800185fa:	715d                	addi	sp,sp,-80
    800185fc:	ec2a                	sd	a0,24(sp)
    800185fe:	f42a                	sd	a0,40(sp)
    80018600:	7542                	ld	a0,48(sp)
    let mut tmp = MaybeUninit::<T>::uninit();
    80018602:	f02a                	sd	a0,32(sp)
    80018604:	a009                	j	80018606 <_ZN4core3ptr4read17hd0dbd64c70caff03E+0xc>
    80018606:	1008                	addi	a0,sp,32
    80018608:	e82a                	sd	a0,16(sp)
    8001860a:	e4aa                	sd	a0,72(sp)
        copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
    8001860c:	a009                	j	8001860e <_ZN4core3ptr4read17hd0dbd64c70caff03E+0x14>
    8001860e:	65c2                	ld	a1,16(sp)
    80018610:	6562                	ld	a0,24(sp)
    80018612:	6108                	ld	a0,0(a0)
    80018614:	e188                	sd	a0,0(a1)
        tmp.assume_init()
    80018616:	7502                	ld	a0,32(sp)
    80018618:	e42a                	sd	a0,8(sp)
    8001861a:	fc2a                	sd	a0,56(sp)
    8001861c:	e0aa                	sd	a0,64(sp)
    8001861e:	a009                	j	80018620 <_ZN4core3ptr4read17hd0dbd64c70caff03E+0x26>
}
    80018620:	6522                	ld	a0,8(sp)
    80018622:	6161                	addi	sp,sp,80
    80018624:	8082                	ret

Disassembly of section .text._ZN4core3ptr4read17hd38a26e0d5db892cE:

0000000080018626 <_ZN4core3ptr4read17hd38a26e0d5db892cE>:
pub const unsafe fn read<T>(src: *const T) -> T {
    80018626:	7111                	addi	sp,sp,-256
    80018628:	fd86                	sd	ra,248(sp)
    8001862a:	ec2e                	sd	a1,24(sp)
    8001862c:	f02a                	sd	a0,32(sp)
    8001862e:	f52e                	sd	a1,168(sp)
    let mut tmp = MaybeUninit::<T>::uninit();
    80018630:	a009                	j	80018632 <_ZN4core3ptr4read17hd38a26e0d5db892cE+0xc>
    80018632:	1028                	addi	a0,sp,40
    80018634:	e82a                	sd	a0,16(sp)
    80018636:	f9aa                	sd	a0,240(sp)
        copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
    80018638:	a009                	j	8001863a <_ZN4core3ptr4read17hd38a26e0d5db892cE+0x14>
    8001863a:	65e2                	ld	a1,24(sp)
    8001863c:	6542                	ld	a0,16(sp)
    8001863e:	04000613          	li	a2,64
    80018642:	e432                	sd	a2,8(sp)
    80018644:	0000d097          	auipc	ra,0xd
    80018648:	9f6080e7          	jalr	-1546(ra) # 8002503a <memcpy>
    8001864c:	6622                	ld	a2,8(sp)
        tmp.assume_init()
    8001864e:	7502                	ld	a0,32(sp)
    80018650:	7322                	ld	t1,40(sp)
    80018652:	f49a                	sd	t1,104(sp)
    80018654:	72c2                	ld	t0,48(sp)
    80018656:	f896                	sd	t0,112(sp)
    80018658:	78e2                	ld	a7,56(sp)
    8001865a:	fcc6                	sd	a7,120(sp)
    8001865c:	6806                	ld	a6,64(sp)
    8001865e:	e142                	sd	a6,128(sp)
    80018660:	67a6                	ld	a5,72(sp)
    80018662:	e53e                	sd	a5,136(sp)
    80018664:	6746                	ld	a4,80(sp)
    80018666:	e93a                	sd	a4,144(sp)
    80018668:	66e6                	ld	a3,88(sp)
    8001866a:	ed36                	sd	a3,152(sp)
    8001866c:	7586                	ld	a1,96(sp)
    8001866e:	f12e                	sd	a1,160(sp)
            ManuallyDrop::into_inner(self.value)
    80018670:	f91a                	sd	t1,176(sp)
    80018672:	fd16                	sd	t0,184(sp)
    80018674:	e1c6                	sd	a7,192(sp)
    80018676:	e5c2                	sd	a6,200(sp)
    80018678:	e9be                	sd	a5,208(sp)
    8001867a:	edba                	sd	a4,216(sp)
    8001867c:	f1b6                	sd	a3,224(sp)
    8001867e:	f5ae                	sd	a1,232(sp)
    80018680:	190c                	addi	a1,sp,176
    80018682:	0000d097          	auipc	ra,0xd
    80018686:	9b8080e7          	jalr	-1608(ra) # 8002503a <memcpy>
    8001868a:	a009                	j	8001868c <_ZN4core3ptr4read17hd38a26e0d5db892cE+0x66>
}
    8001868c:	70ee                	ld	ra,248(sp)
    8001868e:	6111                	addi	sp,sp,256
    80018690:	8082                	ret

Disassembly of section .text._ZN4core3ptr4read17he855cc26728788dfE:

0000000080018692 <_ZN4core3ptr4read17he855cc26728788dfE>:
pub const unsafe fn read<T>(src: *const T) -> T {
    80018692:	7179                	addi	sp,sp,-48
    80018694:	e42a                	sd	a0,8(sp)
    80018696:	ec2a                	sd	a0,24(sp)
    }
    80018698:	02510503          	lb	a0,37(sp)
    let mut tmp = MaybeUninit::<T>::uninit();
    8001869c:	00a10ba3          	sb	a0,23(sp)
    800186a0:	a009                	j	800186a2 <_ZN4core3ptr4read17he855cc26728788dfE+0x10>
    800186a2:	01710513          	addi	a0,sp,23
    800186a6:	f42a                	sd	a0,40(sp)
        copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
    800186a8:	a009                	j	800186aa <_ZN4core3ptr4read17he855cc26728788dfE+0x18>
    800186aa:	6522                	ld	a0,8(sp)
    800186ac:	00054503          	lbu	a0,0(a0)
    800186b0:	e02a                	sd	a0,0(sp)
    800186b2:	00a10ba3          	sb	a0,23(sp)
    800186b6:	02a10323          	sb	a0,38(sp)
    800186ba:	8905                	andi	a0,a0,1
    800186bc:	02a103a3          	sb	a0,39(sp)
        tmp.assume_init()
    800186c0:	a009                	j	800186c2 <_ZN4core3ptr4read17he855cc26728788dfE+0x30>
}
    800186c2:	6502                	ld	a0,0(sp)
    800186c4:	8905                	andi	a0,a0,1
    800186c6:	6145                	addi	sp,sp,48
    800186c8:	8082                	ret

Disassembly of section .text._ZN4core3ptr4read17hf667e6f53e42adf1E:

00000000800186ca <_ZN4core3ptr4read17hf667e6f53e42adf1E>:
pub const unsafe fn read<T>(src: *const T) -> T {
    800186ca:	7159                	addi	sp,sp,-112
    800186cc:	ec2a                	sd	a0,24(sp)
    800186ce:	f82a                	sd	a0,48(sp)
    800186d0:	75e2                	ld	a1,56(sp)
    800186d2:	6506                	ld	a0,64(sp)
    let mut tmp = MaybeUninit::<T>::uninit();
    800186d4:	f02e                	sd	a1,32(sp)
    800186d6:	f42a                	sd	a0,40(sp)
    800186d8:	a009                	j	800186da <_ZN4core3ptr4read17hf667e6f53e42adf1E+0x10>
    800186da:	1008                	addi	a0,sp,32
    800186dc:	f4aa                	sd	a0,104(sp)
        copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
    800186de:	a009                	j	800186e0 <_ZN4core3ptr4read17hf667e6f53e42adf1E+0x16>
    800186e0:	65e2                	ld	a1,24(sp)
    800186e2:	6588                	ld	a0,8(a1)
    800186e4:	e42a                	sd	a0,8(sp)
    800186e6:	f42a                	sd	a0,40(sp)
    800186e8:	618c                	ld	a1,0(a1)
    800186ea:	e82e                	sd	a1,16(sp)
    800186ec:	f02e                	sd	a1,32(sp)
    800186ee:	e4ae                	sd	a1,72(sp)
    800186f0:	e8aa                	sd	a0,80(sp)
    800186f2:	ecae                	sd	a1,88(sp)
    800186f4:	f0aa                	sd	a0,96(sp)
        tmp.assume_init()
    800186f6:	a009                	j	800186f8 <_ZN4core3ptr4read17hf667e6f53e42adf1E+0x2e>
}
    800186f8:	65a2                	ld	a1,8(sp)
    800186fa:	6542                	ld	a0,16(sp)
    800186fc:	6165                	addi	sp,sp,112
    800186fe:	8082                	ret

Disassembly of section .text._ZN4core3ptr5write17h0b5f65d949594758E:

0000000080018700 <_ZN4core3ptr5write17h0b5f65d949594758E>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
    80018700:	1101                	addi	sp,sp,-32
    80018702:	e42e                	sd	a1,8(sp)
    80018704:	e832                	sd	a2,16(sp)
    80018706:	ec2a                	sd	a0,24(sp)
        copy_nonoverlapping(&src as *const T, dst, 1);
    80018708:	e510                	sd	a2,8(a0)
    8001870a:	e10c                	sd	a1,0(a0)
}
    8001870c:	6105                	addi	sp,sp,32
    8001870e:	8082                	ret

Disassembly of section .text._ZN4core3ptr5write17h0fb1ba83ac2984c7E:

0000000080018710 <_ZN4core3ptr5write17h0fb1ba83ac2984c7E>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
    80018710:	1141                	addi	sp,sp,-16
    80018712:	00b103a3          	sb	a1,7(sp)
    80018716:	e42a                	sd	a0,8(sp)
        copy_nonoverlapping(&src as *const T, dst, 1);
    80018718:	00b50023          	sb	a1,0(a0)
}
    8001871c:	0141                	addi	sp,sp,16
    8001871e:	8082                	ret

Disassembly of section .text._ZN4core3ptr5write17h10d6d8799e54bf75E:

0000000080018720 <_ZN4core3ptr5write17h10d6d8799e54bf75E>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
    80018720:	1141                	addi	sp,sp,-16
    80018722:	c22e                	sw	a1,4(sp)
    80018724:	e42a                	sd	a0,8(sp)
        copy_nonoverlapping(&src as *const T, dst, 1);
    80018726:	c10c                	sw	a1,0(a0)
}
    80018728:	0141                	addi	sp,sp,16
    8001872a:	8082                	ret

Disassembly of section .text._ZN4core3ptr5write17h24d2ac6ea724fbc0E:

000000008001872c <_ZN4core3ptr5write17h24d2ac6ea724fbc0E>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
    8001872c:	1141                	addi	sp,sp,-16
    8001872e:	e406                	sd	ra,8(sp)
    80018730:	e02a                	sd	a0,0(sp)
    80018732:	04000613          	li	a2,64
        copy_nonoverlapping(&src as *const T, dst, 1);
    80018736:	0000d097          	auipc	ra,0xd
    8001873a:	904080e7          	jalr	-1788(ra) # 8002503a <memcpy>
}
    8001873e:	60a2                	ld	ra,8(sp)
    80018740:	0141                	addi	sp,sp,16
    80018742:	8082                	ret

Disassembly of section .text._ZN4core3ptr5write17h25ba6e811e5fd451E:

0000000080018744 <_ZN4core3ptr5write17h25ba6e811e5fd451E>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
    80018744:	1141                	addi	sp,sp,-16
    80018746:	00b103a3          	sb	a1,7(sp)
    8001874a:	e42a                	sd	a0,8(sp)
        copy_nonoverlapping(&src as *const T, dst, 1);
    8001874c:	00b50023          	sb	a1,0(a0)
}
    80018750:	0141                	addi	sp,sp,16
    80018752:	8082                	ret

Disassembly of section .text._ZN4core3ptr5write17h4a1d74f50ec6a35fE:

0000000080018754 <_ZN4core3ptr5write17h4a1d74f50ec6a35fE>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
    80018754:	1141                	addi	sp,sp,-16
    80018756:	e02e                	sd	a1,0(sp)
    80018758:	e42a                	sd	a0,8(sp)
        copy_nonoverlapping(&src as *const T, dst, 1);
    8001875a:	e10c                	sd	a1,0(a0)
}
    8001875c:	0141                	addi	sp,sp,16
    8001875e:	8082                	ret

Disassembly of section .text._ZN4core3ptr5write17h60f767b6e6d7c45aE:

0000000080018760 <_ZN4core3ptr5write17h60f767b6e6d7c45aE>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
    80018760:	1101                	addi	sp,sp,-32
    80018762:	e42e                	sd	a1,8(sp)
    80018764:	e832                	sd	a2,16(sp)
    80018766:	ec2a                	sd	a0,24(sp)
        copy_nonoverlapping(&src as *const T, dst, 1);
    80018768:	e510                	sd	a2,8(a0)
    8001876a:	e10c                	sd	a1,0(a0)
}
    8001876c:	6105                	addi	sp,sp,32
    8001876e:	8082                	ret

Disassembly of section .text._ZN4core3ptr5write17h6d43807bf71c562eE:

0000000080018770 <_ZN4core3ptr5write17h6d43807bf71c562eE>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
    80018770:	1141                	addi	sp,sp,-16
    80018772:	00b11323          	sh	a1,6(sp)
    80018776:	e42a                	sd	a0,8(sp)
        copy_nonoverlapping(&src as *const T, dst, 1);
    80018778:	00b51023          	sh	a1,0(a0)
}
    8001877c:	0141                	addi	sp,sp,16
    8001877e:	8082                	ret

Disassembly of section .text._ZN4core3ptr5write17h9fb8ab42ff75ed2cE:

0000000080018780 <_ZN4core3ptr5write17h9fb8ab42ff75ed2cE>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
    80018780:	1141                	addi	sp,sp,-16
    80018782:	e02e                	sd	a1,0(sp)
    80018784:	e42a                	sd	a0,8(sp)
        copy_nonoverlapping(&src as *const T, dst, 1);
    80018786:	e10c                	sd	a1,0(a0)
}
    80018788:	0141                	addi	sp,sp,16
    8001878a:	8082                	ret

Disassembly of section .text._ZN4core3ptr5write17hbb8dbff750359a8eE:

000000008001878c <_ZN4core3ptr5write17hbb8dbff750359a8eE>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
    8001878c:	1141                	addi	sp,sp,-16
    8001878e:	e02e                	sd	a1,0(sp)
    80018790:	e42a                	sd	a0,8(sp)
        copy_nonoverlapping(&src as *const T, dst, 1);
    80018792:	e10c                	sd	a1,0(a0)
}
    80018794:	0141                	addi	sp,sp,16
    80018796:	8082                	ret

Disassembly of section .text._ZN4core3ptr5write17hf7c587ba45e12a81E:

0000000080018798 <_ZN4core3ptr5write17hf7c587ba45e12a81E>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
    80018798:	1141                	addi	sp,sp,-16
    8001879a:	e02e                	sd	a1,0(sp)
    8001879c:	85aa                	mv	a1,a0
    8001879e:	6502                	ld	a0,0(sp)
    800187a0:	e42e                	sd	a1,8(sp)
        copy_nonoverlapping(&src as *const T, dst, 1);
    800187a2:	6910                	ld	a2,16(a0)
    800187a4:	e990                	sd	a2,16(a1)
    800187a6:	6510                	ld	a2,8(a0)
    800187a8:	e590                	sd	a2,8(a1)
    800187aa:	6108                	ld	a0,0(a0)
    800187ac:	e188                	sd	a0,0(a1)
}
    800187ae:	0141                	addi	sp,sp,16
    800187b0:	8082                	ret

Disassembly of section .text._ZN6kernel2fs5inode10InodeCache3dup17h6659572d8df32b14E:

00000000800187b2 <_ZN6kernel2fs5inode10InodeCache3dup17h6659572d8df32b14E>:
    fn dup(&self, inode: &Inode) -> Inode {
    800187b2:	715d                	addi	sp,sp,-80
    800187b4:	e486                	sd	ra,72(sp)
    800187b6:	ec2e                	sd	a1,24(sp)
    800187b8:	fc2a                	sd	a0,56(sp)
    800187ba:	e0ae                	sd	a1,64(sp)
        let mut guard = self.meta.acquire();
    800187bc:	ffff8097          	auipc	ra,0xffff8
    800187c0:	cb8080e7          	jalr	-840(ra) # 80010474 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h702266ebf2d4d383E>
    800187c4:	f82a                	sd	a0,48(sp)
    800187c6:	a009                	j	800187c8 <_ZN6kernel2fs5inode10InodeCache3dup17h6659572d8df32b14E+0x16>
    800187c8:	1808                	addi	a0,sp,48
        guard[inode.index].refs += 1;
    800187ca:	ffff9097          	auipc	ra,0xffff9
    800187ce:	c24080e7          	jalr	-988(ra) # 800113ee <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7113684d7590c345E>
    800187d2:	e82a                	sd	a0,16(sp)
    800187d4:	a009                	j	800187d6 <_ZN6kernel2fs5inode10InodeCache3dup17h6659572d8df32b14E+0x24>
    800187d6:	6562                	ld	a0,24(sp)
    800187d8:	610c                	ld	a1,0(a0)
    800187da:	e42e                	sd	a1,8(sp)
    800187dc:	03100513          	li	a0,49
    800187e0:	04b56863          	bltu	a0,a1,80018830 <_ZN6kernel2fs5inode10InodeCache3dup17h6659572d8df32b14E+0x7e>
    800187e4:	a009                	j	800187e6 <_ZN6kernel2fs5inode10InodeCache3dup17h6659572d8df32b14E+0x34>
    800187e6:	6542                	ld	a0,16(sp)
    800187e8:	65a2                	ld	a1,8(sp)
    800187ea:	4661                	li	a2,24
    800187ec:	02c585b3          	mul	a1,a1,a2
    800187f0:	952e                	add	a0,a0,a1
    800187f2:	610c                	ld	a1,0(a0)
    800187f4:	00158513          	addi	a0,a1,1
    800187f8:	e02a                	sd	a0,0(sp)
    800187fa:	04b56763          	bltu	a0,a1,80018848 <.LBB0_9>
    800187fe:	a009                	j	80018800 <_ZN6kernel2fs5inode10InodeCache3dup17h6659572d8df32b14E+0x4e>
    80018800:	6562                	ld	a0,24(sp)
    80018802:	6582                	ld	a1,0(sp)
    80018804:	6642                	ld	a2,16(sp)
    80018806:	66a2                	ld	a3,8(sp)
    80018808:	4761                	li	a4,24
    8001880a:	02e686b3          	mul	a3,a3,a4
    8001880e:	9636                	add	a2,a2,a3
    80018810:	e20c                	sd	a1,0(a2)
            dev: inode.dev,
    80018812:	650c                	ld	a1,8(a0)
            index: inode.index
    80018814:	6108                	ld	a0,0(a0)
        Inode {
    80018816:	f42e                	sd	a1,40(sp)
    80018818:	f02a                	sd	a0,32(sp)
    8001881a:	1808                	addi	a0,sp,48
    }
    8001881c:	fffee097          	auipc	ra,0xfffee
    80018820:	5b2080e7          	jalr	1458(ra) # 80006dce <_ZN4core3ptr116drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$$u5b$kernel..fs..inode..InodeMeta$u3b$$u20$50$u5d$$GT$$GT$17h4e8573cf3b362114E>
    80018824:	a009                	j	80018826 <_ZN6kernel2fs5inode10InodeCache3dup17h6659572d8df32b14E+0x74>
    80018826:	7502                	ld	a0,32(sp)
    80018828:	75a2                	ld	a1,40(sp)
    8001882a:	60a6                	ld	ra,72(sp)
    8001882c:	6161                	addi	sp,sp,80
    8001882e:	8082                	ret
        guard[inode.index].refs += 1;
    80018830:	6522                	ld	a0,8(sp)

0000000080018832 <.LBB0_8>:
    80018832:	00012617          	auipc	a2,0x12
    80018836:	e7660613          	addi	a2,a2,-394 # 8002a6a8 <.L__unnamed_1>
    8001883a:	03200593          	li	a1,50
    8001883e:	0000a097          	auipc	ra,0xa
    80018842:	8ea080e7          	jalr	-1814(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

0000000080018848 <.LBB0_9>:
    80018848:	00012517          	auipc	a0,0x12
    8001884c:	e7850513          	addi	a0,a0,-392 # 8002a6c0 <str.0>

0000000080018850 <.LBB0_10>:
    80018850:	00012617          	auipc	a2,0x12
    80018854:	e5860613          	addi	a2,a2,-424 # 8002a6a8 <.L__unnamed_1>
    80018858:	45f1                	li	a1,28
    8001885a:	0000a097          	auipc	ra,0xa
    8001885e:	8a2080e7          	jalr	-1886(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE:

0000000080018864 <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE>:
    fn put(&self, inode: &mut Inode) {
    80018864:	7129                	addi	sp,sp,-320
    80018866:	fe06                	sd	ra,312(sp)
    80018868:	e12e                	sd	a1,128(sp)
    8001886a:	e52a                	sd	a0,136(sp)
    8001886c:	e62a                	sd	a0,264(sp)
    8001886e:	ea2e                	sd	a1,272(sp)
        let mut guard = self.meta.acquire();
    80018870:	ffff8097          	auipc	ra,0xffff8
    80018874:	c04080e7          	jalr	-1020(ra) # 80010474 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h702266ebf2d4d383E>
    80018878:	ed2a                	sd	a0,152(sp)
    8001887a:	a009                	j	8001887c <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0x18>
        let i = inode.index;
    8001887c:	650a                	ld	a0,128(sp)
    8001887e:	6108                	ld	a0,0(a0)
    80018880:	f8aa                	sd	a0,112(sp)
    80018882:	ee2a                	sd	a0,280(sp)
    80018884:	0928                	addi	a0,sp,152
        let imeta = &mut guard[i];
    80018886:	ffff9097          	auipc	ra,0xffff9
    8001888a:	b68080e7          	jalr	-1176(ra) # 800113ee <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7113684d7590c345E>
    8001888e:	fcaa                	sd	a0,120(sp)
    80018890:	a009                	j	80018892 <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0x2e>
    80018892:	75c6                	ld	a1,112(sp)
    80018894:	03100513          	li	a0,49
    80018898:	22b56d63          	bltu	a0,a1,80018ad2 <.LBB1_46+0x3c>
    8001889c:	a009                	j	8001889e <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0x3a>
    8001889e:	7566                	ld	a0,120(sp)
    800188a0:	75c6                	ld	a1,112(sp)
    800188a2:	4661                	li	a2,24
    800188a4:	02c585b3          	mul	a1,a1,a2
    800188a8:	952e                	add	a0,a0,a1
    800188aa:	f4aa                	sd	a0,104(sp)
    800188ac:	f22a                	sd	a0,288(sp)
        if imeta.refs == 1 {
    800188ae:	6108                	ld	a0,0(a0)
    800188b0:	4585                	li	a1,1
    800188b2:	00b51963          	bne	a0,a1,800188c4 <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0x60>
    800188b6:	a009                	j	800188b8 <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0x54>
    800188b8:	7546                	ld	a0,112(sp)
    800188ba:	03200593          	li	a1,50
            let mut idata = self.data[i].lock();
    800188be:	00b56b63          	bltu	a0,a1,800188d4 <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0x70>
    800188c2:	a499                	j	80018b08 <.LBB1_49+0x16>
            imeta.refs -= 1;
    800188c4:	7526                	ld	a0,104(sp)
    800188c6:	6108                	ld	a0,0(a0)
    800188c8:	fff50593          	addi	a1,a0,-1
    800188cc:	f0ae                	sd	a1,96(sp)
    800188ce:	20b56e63          	bltu	a0,a1,80018aea <.LBB1_48>
    800188d2:	a2dd                	j	80018ab8 <.LBB1_46+0x22>
            let mut idata = self.data[i].lock();
    800188d4:	652a                	ld	a0,136(sp)
    800188d6:	75c6                	ld	a1,112(sp)
    800188d8:	059e                	slli	a1,a1,0x7
    800188da:	952e                	add	a0,a0,a1
    800188dc:	4d050513          	addi	a0,a0,1232
    800188e0:	00005097          	auipc	ra,0x5
    800188e4:	992080e7          	jalr	-1646(ra) # 8001d272 <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$4lock17h5e4056570307628eE>
    800188e8:	f12a                	sd	a0,160(sp)
    800188ea:	f52e                	sd	a1,168(sp)
    800188ec:	a009                	j	800188ee <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0x8a>
    800188ee:	1108                	addi	a0,sp,160
            if !idata.valid || idata.dinode.nlink > 0 {
    800188f0:	00005097          	auipc	ra,0x5
    800188f4:	c10080e7          	jalr	-1008(ra) # 8001d500 <_ZN92_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfc7812d7ca7ab1e1E>
    800188f8:	ecaa                	sd	a0,88(sp)
    800188fa:	a02d                	j	80018924 <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0xc0>
    800188fc:	4505                	li	a0,1
    800188fe:	0aa10aa3          	sb	a0,181(sp)
    80018902:	a821                	j	8001891a <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0xb6>
    80018904:	4501                	li	a0,0
    80018906:	0aa10aa3          	sb	a0,181(sp)
    8001890a:	a801                	j	8001891a <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0xb6>
    8001890c:	1108                	addi	a0,sp,160
    8001890e:	00005097          	auipc	ra,0x5
    80018912:	bf2080e7          	jalr	-1038(ra) # 8001d500 <_ZN92_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfc7812d7ca7ab1e1E>
    80018916:	e8aa                	sd	a0,80(sp)
    80018918:	a831                	j	80018934 <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0xd0>
    8001891a:	0b514503          	lbu	a0,181(sp)
    8001891e:	8905                	andi	a0,a0,1
    80018920:	e10d                	bnez	a0,80018942 <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0xde>
    80018922:	a03d                	j	80018950 <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0xec>
    80018924:	6566                	ld	a0,88(sp)
    80018926:	04854503          	lbu	a0,72(a0)
    8001892a:	8905                	andi	a0,a0,1
    8001892c:	4581                	li	a1,0
    8001892e:	fcb507e3          	beq	a0,a1,800188fc <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0x98>
    80018932:	bfe9                	j	8001890c <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0xa8>
    80018934:	6546                	ld	a0,80(sp)
    80018936:	00e51583          	lh	a1,14(a0)
    8001893a:	4501                	li	a0,0
    8001893c:	fcb540e3          	blt	a0,a1,800188fc <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0x98>
    80018940:	b7d1                	j	80018904 <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0xa0>
    80018942:	1108                	addi	a0,sp,160
                idata.valid = false;
    80018944:	00005097          	auipc	ra,0x5
    80018948:	bd0080e7          	jalr	-1072(ra) # 8001d514 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    8001894c:	e4aa                	sd	a0,72(sp)
    8001894e:	a039                	j	8001895c <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0xf8>
                drop(guard);
    80018950:	656a                	ld	a0,152(sp)
    80018952:	00004097          	auipc	ra,0x4
    80018956:	530080e7          	jalr	1328(ra) # 8001ce82 <_ZN4core3mem4drop17h2d4fb87a733eb04aE>
    8001895a:	a835                	j	80018996 <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0x132>
    8001895c:	65a6                	ld	a1,72(sp)
    8001895e:	4501                	li	a0,0
                idata.valid = false;
    80018960:	04a58423          	sb	a0,72(a1)
                drop(idata);
    80018964:	750a                	ld	a0,160(sp)
    80018966:	75aa                	ld	a1,168(sp)
    80018968:	00004097          	auipc	ra,0x4
    8001896c:	54a080e7          	jalr	1354(ra) # 8001ceb2 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    80018970:	a009                	j	80018972 <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0x10e>
                imeta.refs -= 1;
    80018972:	7526                	ld	a0,104(sp)
    80018974:	6108                	ld	a0,0(a0)
    80018976:	fff50593          	addi	a1,a0,-1
    8001897a:	e0ae                	sd	a1,64(sp)
    8001897c:	1ab56263          	bltu	a0,a1,80018b20 <.LBB1_51>
    80018980:	a009                	j	80018982 <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0x11e>
    80018982:	6506                	ld	a0,64(sp)
    80018984:	75a6                	ld	a1,104(sp)
    80018986:	e188                	sd	a0,0(a1)
                drop(guard);
    80018988:	656a                	ld	a0,152(sp)
    8001898a:	00004097          	auipc	ra,0x4
    8001898e:	4f8080e7          	jalr	1272(ra) # 8001ce82 <_ZN4core3mem4drop17h2d4fb87a733eb04aE>
    80018992:	a009                	j	80018994 <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0x130>
            if !idata.valid || idata.dinode.nlink > 0 {
    80018994:	aa25                	j	80018acc <.LBB1_46+0x36>
    80018996:	4501                	li	a0,0
                idata.dinode.itype = InodeType::Empty;
    80018998:	0aa11b23          	sh	a0,182(sp)
    8001899c:	1108                	addi	a0,sp,160
    8001899e:	00005097          	auipc	ra,0x5
    800189a2:	b76080e7          	jalr	-1162(ra) # 8001d514 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    800189a6:	fc2a                	sd	a0,56(sp)
    800189a8:	a009                	j	800189aa <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0x146>
    800189aa:	75e2                	ld	a1,56(sp)
    800189ac:	0b611503          	lh	a0,182(sp)
    800189b0:	00a59423          	sh	a0,8(a1)
    800189b4:	1108                	addi	a0,sp,160
                idata.truncate(inode);
    800189b6:	00005097          	auipc	ra,0x5
    800189ba:	b5e080e7          	jalr	-1186(ra) # 8001d514 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    800189be:	f82a                	sd	a0,48(sp)
    800189c0:	a009                	j	800189c2 <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0x15e>
    800189c2:	658a                	ld	a1,128(sp)
    800189c4:	7542                	ld	a0,48(sp)
    800189c6:	00001097          	auipc	ra,0x1
    800189ca:	1be080e7          	jalr	446(ra) # 80019b84 <_ZN6kernel2fs5inode9InodeData8truncate17h7f63e14f2a03d309E>
    800189ce:	a009                	j	800189d0 <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0x16c>
    800189d0:	1108                	addi	a0,sp,160
                idata.valid = false;
    800189d2:	00005097          	auipc	ra,0x5
    800189d6:	b42080e7          	jalr	-1214(ra) # 8001d514 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    800189da:	f42a                	sd	a0,40(sp)
    800189dc:	a009                	j	800189de <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0x17a>
    800189de:	75a2                	ld	a1,40(sp)
    800189e0:	4501                	li	a0,0
    800189e2:	04a58423          	sb	a0,72(a1)
                drop(idata);
    800189e6:	750a                	ld	a0,160(sp)
    800189e8:	75aa                	ld	a1,168(sp)
    800189ea:	00004097          	auipc	ra,0x4
    800189ee:	4c8080e7          	jalr	1224(ra) # 8001ceb2 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    800189f2:	a009                	j	800189f4 <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0x190>
                let mut guard = self.meta.acquire();
    800189f4:	652a                	ld	a0,136(sp)
    800189f6:	ffff8097          	auipc	ra,0xffff8
    800189fa:	a7e080e7          	jalr	-1410(ra) # 80010474 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h702266ebf2d4d383E>
    800189fe:	fd2a                	sd	a0,184(sp)
    80018a00:	a009                	j	80018a02 <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0x19e>
    80018a02:	1928                	addi	a0,sp,184
                guard[i].refs -= 1;
    80018a04:	ffff9097          	auipc	ra,0xffff9
    80018a08:	9ea080e7          	jalr	-1558(ra) # 800113ee <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7113684d7590c345E>
    80018a0c:	f02a                	sd	a0,32(sp)
    80018a0e:	a009                	j	80018a10 <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0x1ac>
    80018a10:	75c6                	ld	a1,112(sp)
    80018a12:	03100513          	li	a0,49
    80018a16:	12b56463          	bltu	a0,a1,80018b3e <.LBB1_52+0x16>
    80018a1a:	a009                	j	80018a1c <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0x1b8>
    80018a1c:	7502                	ld	a0,32(sp)
    80018a1e:	75c6                	ld	a1,112(sp)
    80018a20:	4661                	li	a2,24
    80018a22:	02c585b3          	mul	a1,a1,a2
    80018a26:	952e                	add	a0,a0,a1
    80018a28:	6108                	ld	a0,0(a0)
    80018a2a:	fff50593          	addi	a1,a0,-1
    80018a2e:	ec2e                	sd	a1,24(sp)
    80018a30:	12b56363          	bltu	a0,a1,80018b56 <.LBB1_54>
    80018a34:	a009                	j	80018a36 <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0x1d2>
    80018a36:	6562                	ld	a0,24(sp)
    80018a38:	7582                	ld	a1,32(sp)
    80018a3a:	7646                	ld	a2,112(sp)
    80018a3c:	46e1                	li	a3,24
    80018a3e:	02d60633          	mul	a2,a2,a3
    80018a42:	95b2                	add	a1,a1,a2
    80018a44:	e188                	sd	a0,0(a1)
    80018a46:	1928                	addi	a0,sp,184
                debug_assert_eq!(guard[i].refs, 0);
    80018a48:	ffff9097          	auipc	ra,0xffff9
    80018a4c:	84a080e7          	jalr	-1974(ra) # 80011292 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h2948b75da44fd3f4E>
    80018a50:	e82a                	sd	a0,16(sp)
    80018a52:	a009                	j	80018a54 <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0x1f0>
    80018a54:	75c6                	ld	a1,112(sp)
    80018a56:	03100513          	li	a0,49
    80018a5a:	10b56d63          	bltu	a0,a1,80018b74 <.LBB1_55+0x16>
    80018a5e:	a009                	j	80018a60 <_ZN6kernel2fs5inode10InodeCache3put17h6f6d30d75181876bE+0x1fc>
    80018a60:	6542                	ld	a0,16(sp)
    80018a62:	75c6                	ld	a1,112(sp)
    80018a64:	4661                	li	a2,24
    80018a66:	02c585b3          	mul	a1,a1,a2
    80018a6a:	952e                	add	a0,a0,a1
    80018a6c:	e02a                	sd	a0,0(sp)
    80018a6e:	e1aa                	sd	a0,192(sp)

0000000080018a70 <.LBB1_45>:
    80018a70:	0000e597          	auipc	a1,0xe
    80018a74:	d9058593          	addi	a1,a1,-624 # 80026800 <.L__unnamed_6+0xc8>
    80018a78:	e42e                	sd	a1,8(sp)
    80018a7a:	e5ae                	sd	a1,200(sp)
    80018a7c:	f62a                	sd	a0,296(sp)
    80018a7e:	fa2e                	sd	a1,304(sp)
    80018a80:	6108                	ld	a0,0(a0)
    80018a82:	4581                	li	a1,0
    80018a84:	02b50363          	beq	a0,a1,80018aaa <.LBB1_46+0x14>
    80018a88:	a009                	j	80018a8a <.LBB1_45+0x1a>
    80018a8a:	6622                	ld	a2,8(sp)
    80018a8c:	6582                	ld	a1,0(sp)
    80018a8e:	4501                	li	a0,0
    80018a90:	0ca10ba3          	sb	a0,215(sp)
    80018a94:	edaa                	sd	a0,216(sp)

0000000080018a96 <.LBB1_46>:
    80018a96:	00012717          	auipc	a4,0x12
    80018a9a:	d0270713          	addi	a4,a4,-766 # 8002a798 <.L__unnamed_3>
    80018a9e:	09b4                	addi	a3,sp,216
    80018aa0:	00007097          	auipc	ra,0x7
    80018aa4:	d8a080e7          	jalr	-630(ra) # 8001f82a <_ZN4core9panicking13assert_failed17h4e6d74c9d534b647E>
    80018aa8:	0000                	unimp
                drop(guard);
    80018aaa:	756a                	ld	a0,184(sp)
    80018aac:	00004097          	auipc	ra,0x4
    80018ab0:	3d6080e7          	jalr	982(ra) # 8001ce82 <_ZN4core3mem4drop17h2d4fb87a733eb04aE>
    80018ab4:	a009                	j	80018ab6 <.LBB1_46+0x20>
            if !idata.valid || idata.dinode.nlink > 0 {
    80018ab6:	a819                	j	80018acc <.LBB1_46+0x36>
            imeta.refs -= 1;
    80018ab8:	7506                	ld	a0,96(sp)
    80018aba:	75a6                	ld	a1,104(sp)
    80018abc:	e188                	sd	a0,0(a1)
            drop(guard);
    80018abe:	656a                	ld	a0,152(sp)
    80018ac0:	00004097          	auipc	ra,0x4
    80018ac4:	3c2080e7          	jalr	962(ra) # 8001ce82 <_ZN4core3mem4drop17h2d4fb87a733eb04aE>
    80018ac8:	a009                	j	80018aca <.LBB1_46+0x34>
        if imeta.refs == 1 {
    80018aca:	a009                	j	80018acc <.LBB1_46+0x36>
    }
    80018acc:	70f2                	ld	ra,312(sp)
    80018ace:	6131                	addi	sp,sp,320
    80018ad0:	8082                	ret
        let imeta = &mut guard[i];
    80018ad2:	7546                	ld	a0,112(sp)

0000000080018ad4 <.LBB1_47>:
    80018ad4:	00012617          	auipc	a2,0x12
    80018ad8:	c0c60613          	addi	a2,a2,-1012 # 8002a6e0 <.L__unnamed_4>
    80018adc:	03200593          	li	a1,50
    80018ae0:	00009097          	auipc	ra,0x9
    80018ae4:	648080e7          	jalr	1608(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

0000000080018aea <.LBB1_48>:
            imeta.refs -= 1;
    80018aea:	00012517          	auipc	a0,0x12
    80018aee:	c2650513          	addi	a0,a0,-986 # 8002a710 <str.1>

0000000080018af2 <.LBB1_49>:
    80018af2:	00012617          	auipc	a2,0x12
    80018af6:	c0660613          	addi	a2,a2,-1018 # 8002a6f8 <.L__unnamed_5>
    80018afa:	02100593          	li	a1,33
    80018afe:	00009097          	auipc	ra,0x9
    80018b02:	5fe080e7          	jalr	1534(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80018b06:	0000                	unimp
            let mut idata = self.data[i].lock();
    80018b08:	7546                	ld	a0,112(sp)

0000000080018b0a <.LBB1_50>:
    80018b0a:	00012617          	auipc	a2,0x12
    80018b0e:	c2e60613          	addi	a2,a2,-978 # 8002a738 <.L__unnamed_6>
    80018b12:	03200593          	li	a1,50
    80018b16:	00009097          	auipc	ra,0x9
    80018b1a:	612080e7          	jalr	1554(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

0000000080018b20 <.LBB1_51>:
                imeta.refs -= 1;
    80018b20:	00012517          	auipc	a0,0x12
    80018b24:	bf050513          	addi	a0,a0,-1040 # 8002a710 <str.1>

0000000080018b28 <.LBB1_52>:
    80018b28:	00012617          	auipc	a2,0x12
    80018b2c:	c2860613          	addi	a2,a2,-984 # 8002a750 <.L__unnamed_7>
    80018b30:	02100593          	li	a1,33
    80018b34:	00009097          	auipc	ra,0x9
    80018b38:	5c8080e7          	jalr	1480(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80018b3c:	0000                	unimp
                guard[i].refs -= 1;
    80018b3e:	7546                	ld	a0,112(sp)

0000000080018b40 <.LBB1_53>:
    80018b40:	00012617          	auipc	a2,0x12
    80018b44:	c2860613          	addi	a2,a2,-984 # 8002a768 <.L__unnamed_8>
    80018b48:	03200593          	li	a1,50
    80018b4c:	00009097          	auipc	ra,0x9
    80018b50:	5dc080e7          	jalr	1500(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

0000000080018b56 <.LBB1_54>:
    80018b56:	00012517          	auipc	a0,0x12
    80018b5a:	bba50513          	addi	a0,a0,-1094 # 8002a710 <str.1>

0000000080018b5e <.LBB1_55>:
    80018b5e:	00012617          	auipc	a2,0x12
    80018b62:	c0a60613          	addi	a2,a2,-1014 # 8002a768 <.L__unnamed_8>
    80018b66:	02100593          	li	a1,33
    80018b6a:	00009097          	auipc	ra,0x9
    80018b6e:	592080e7          	jalr	1426(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80018b72:	0000                	unimp
                debug_assert_eq!(guard[i].refs, 0);
    80018b74:	7546                	ld	a0,112(sp)

0000000080018b76 <.LBB1_56>:
    80018b76:	00012617          	auipc	a2,0x12
    80018b7a:	c0a60613          	addi	a2,a2,-1014 # 8002a780 <.L__unnamed_9>
    80018b7e:	03200593          	li	a1,50
    80018b82:	00009097          	auipc	ra,0x9
    80018b86:	5a6080e7          	jalr	1446(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E:

0000000080018b8c <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E>:
    fn get(&self, dev: u32, inum: u32) -> Inode {
    80018b8c:	714d                	addi	sp,sp,-336
    80018b8e:	e686                	sd	ra,328(sp)
    80018b90:	fcaa                	sd	a0,120(sp)
    80018b92:	86b2                	mv	a3,a2
    80018b94:	e136                	sd	a3,128(sp)
    80018b96:	86ae                	mv	a3,a1
    80018b98:	e536                	sd	a3,136(sp)
    80018b9a:	ea2a                	sd	a0,272(sp)
    80018b9c:	10b12c23          	sw	a1,280(sp)
    80018ba0:	10c12e23          	sw	a2,284(sp)
        let mut guard = self.meta.acquire();
    80018ba4:	ffff8097          	auipc	ra,0xffff8
    80018ba8:	8d0080e7          	jalr	-1840(ra) # 80010474 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h702266ebf2d4d383E>
    80018bac:	f12a                	sd	a0,160(sp)
    80018bae:	a009                	j	80018bb0 <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x24>
    80018bb0:	4501                	li	a0,0
        let mut empty_i: Option<usize> = None;
    80018bb2:	f52a                	sd	a0,168(sp)
        for i in 0..NINODE {
    80018bb4:	fd2a                	sd	a0,184(sp)
    80018bb6:	03200593          	li	a1,50
    80018bba:	e1ae                	sd	a1,192(sp)
    80018bbc:	00007097          	auipc	ra,0x7
    80018bc0:	c0c080e7          	jalr	-1012(ra) # 8001f7c8 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he0a8d93712e5493bE>
    80018bc4:	f4aa                	sd	a0,104(sp)
    80018bc6:	f8ae                	sd	a1,112(sp)
    80018bc8:	a009                	j	80018bca <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x3e>
    80018bca:	7546                	ld	a0,112(sp)
    80018bcc:	75a6                	ld	a1,104(sp)
    80018bce:	e5ae                	sd	a1,200(sp)
    80018bd0:	e9aa                	sd	a0,208(sp)
    80018bd2:	a009                	j	80018bd4 <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x48>
    80018bd4:	01a8                	addi	a0,sp,200
    80018bd6:	00007097          	auipc	ra,0x7
    80018bda:	b84080e7          	jalr	-1148(ra) # 8001f75a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE>
    80018bde:	edaa                	sd	a0,216(sp)
    80018be0:	f1ae                	sd	a1,224(sp)
    80018be2:	a009                	j	80018be4 <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x58>
    80018be4:	656e                	ld	a0,216(sp)
    80018be6:	4581                	li	a1,0
    80018be8:	00b50463          	beq	a0,a1,80018bf0 <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x64>
    80018bec:	a009                	j	80018bee <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x62>
    80018bee:	a801                	j	80018bfe <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x72>
            Some(i) => i,
    80018bf0:	752a                	ld	a0,168(sp)
    80018bf2:	4581                	li	a1,0
    80018bf4:	1ab50363          	beq	a0,a1,80018d9a <.LBB2_65>
    80018bf8:	a009                	j	80018bfa <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x6e>
    80018bfa:	aa7d                	j	80018db8 <.LBB2_66+0x16>
        for i in 0..NINODE {
    80018bfc:	0000                	unimp
    80018bfe:	750e                	ld	a0,224(sp)
    80018c00:	ecaa                	sd	a0,88(sp)
    80018c02:	f22a                	sd	a0,288(sp)
    80018c04:	f62a                	sd	a0,296(sp)
    80018c06:	fa2a                	sd	a0,304(sp)
    80018c08:	1108                	addi	a0,sp,160
            if guard[i].inum == inum && guard[i].refs > 0 && guard[i].dev == dev {
    80018c0a:	ffff8097          	auipc	ra,0xffff8
    80018c0e:	688080e7          	jalr	1672(ra) # 80011292 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h2948b75da44fd3f4E>
    80018c12:	f0aa                	sd	a0,96(sp)
    80018c14:	a889                	j	80018c66 <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0xda>
    80018c16:	4505                	li	a0,1
    80018c18:	0ea106a3          	sb	a0,237(sp)
    80018c1c:	a821                	j	80018c34 <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0xa8>
    80018c1e:	4501                	li	a0,0
    80018c20:	0ea106a3          	sb	a0,237(sp)
    80018c24:	a801                	j	80018c34 <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0xa8>
    80018c26:	1108                	addi	a0,sp,160
    80018c28:	ffff8097          	auipc	ra,0xffff8
    80018c2c:	66a080e7          	jalr	1642(ra) # 80011292 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h2948b75da44fd3f4E>
    80018c30:	e8aa                	sd	a0,80(sp)
    80018c32:	a8ad                	j	80018cac <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x120>
    80018c34:	0ed14503          	lbu	a0,237(sp)
    80018c38:	8905                	andi	a0,a0,1
    80018c3a:	e959                	bnez	a0,80018cd0 <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x144>
    80018c3c:	a04d                	j	80018cde <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x152>
    80018c3e:	4505                	li	a0,1
    80018c40:	0ea10723          	sb	a0,238(sp)
    80018c44:	a821                	j	80018c5c <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0xd0>
    80018c46:	4501                	li	a0,0
    80018c48:	0ea10723          	sb	a0,238(sp)
    80018c4c:	a801                	j	80018c5c <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0xd0>
    80018c4e:	1108                	addi	a0,sp,160
    80018c50:	ffff8097          	auipc	ra,0xffff8
    80018c54:	642080e7          	jalr	1602(ra) # 80011292 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h2948b75da44fd3f4E>
    80018c58:	e4aa                	sd	a0,72(sp)
    80018c5a:	a805                	j	80018c8a <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0xfe>
    80018c5c:	0ee14503          	lbu	a0,238(sp)
    80018c60:	8905                	andi	a0,a0,1
    80018c62:	f171                	bnez	a0,80018c26 <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x9a>
    80018c64:	bf6d                	j	80018c1e <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x92>
    80018c66:	65e6                	ld	a1,88(sp)
    80018c68:	03100513          	li	a0,49
    80018c6c:	24b56f63          	bltu	a0,a1,80018eca <.LBB2_68+0x42>
    80018c70:	a009                	j	80018c72 <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0xe6>
    80018c72:	658a                	ld	a1,128(sp)
    80018c74:	7506                	ld	a0,96(sp)
    80018c76:	6666                	ld	a2,88(sp)
    80018c78:	46e1                	li	a3,24
    80018c7a:	02d60633          	mul	a2,a2,a3
    80018c7e:	9532                	add	a0,a0,a2
    80018c80:	4908                	lw	a0,16(a0)
    80018c82:	2581                	sext.w	a1,a1
    80018c84:	fcb505e3          	beq	a0,a1,80018c4e <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0xc2>
    80018c88:	bf7d                	j	80018c46 <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0xba>
    80018c8a:	65e6                	ld	a1,88(sp)
    80018c8c:	03100513          	li	a0,49
    80018c90:	24b56963          	bltu	a0,a1,80018ee2 <.LBB2_69+0x16>
    80018c94:	a009                	j	80018c96 <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x10a>
    80018c96:	6526                	ld	a0,72(sp)
    80018c98:	65e6                	ld	a1,88(sp)
    80018c9a:	4661                	li	a2,24
    80018c9c:	02c585b3          	mul	a1,a1,a2
    80018ca0:	952e                	add	a0,a0,a1
    80018ca2:	6108                	ld	a0,0(a0)
    80018ca4:	4581                	li	a1,0
    80018ca6:	f8b51ce3          	bne	a0,a1,80018c3e <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0xb2>
    80018caa:	bf71                	j	80018c46 <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0xba>
    80018cac:	65e6                	ld	a1,88(sp)
    80018cae:	03100513          	li	a0,49
    80018cb2:	24b56463          	bltu	a0,a1,80018efa <.LBB2_70+0x16>
    80018cb6:	a009                	j	80018cb8 <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x12c>
    80018cb8:	65aa                	ld	a1,136(sp)
    80018cba:	6546                	ld	a0,80(sp)
    80018cbc:	6666                	ld	a2,88(sp)
    80018cbe:	46e1                	li	a3,24
    80018cc0:	02d60633          	mul	a2,a2,a3
    80018cc4:	9532                	add	a0,a0,a2
    80018cc6:	4508                	lw	a0,8(a0)
    80018cc8:	2581                	sext.w	a1,a1
    80018cca:	f4b506e3          	beq	a0,a1,80018c16 <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x8a>
    80018cce:	bf81                	j	80018c1e <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x92>
    80018cd0:	1108                	addi	a0,sp,160
                guard[i].refs += 1;
    80018cd2:	ffff8097          	auipc	ra,0xffff8
    80018cd6:	71c080e7          	jalr	1820(ra) # 800113ee <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7113684d7590c345E>
    80018cda:	e0aa                	sd	a0,64(sp)
    80018cdc:	a801                	j	80018cec <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x160>
    80018cde:	1128                	addi	a0,sp,168
            if empty_i.is_none() && guard[i].refs == 0 {
    80018ce0:	ffff6097          	auipc	ra,0xffff6
    80018ce4:	1c6080e7          	jalr	454(ra) # 8000eea6 <_ZN4core6option15Option$LT$T$GT$7is_none17hbfc07de6cbdc4f1cE>
    80018ce8:	fc2a                	sd	a0,56(sp)
    80018cea:	a89d                	j	80018d60 <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x1d4>
    80018cec:	65e6                	ld	a1,88(sp)
    80018cee:	03100513          	li	a0,49
                guard[i].refs += 1;
    80018cf2:	22b56063          	bltu	a0,a1,80018f12 <.LBB2_71+0x16>
    80018cf6:	a009                	j	80018cf8 <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x16c>
    80018cf8:	6506                	ld	a0,64(sp)
    80018cfa:	65e6                	ld	a1,88(sp)
    80018cfc:	4661                	li	a2,24
    80018cfe:	02c585b3          	mul	a1,a1,a2
    80018d02:	952e                	add	a0,a0,a1
    80018d04:	610c                	ld	a1,0(a0)
    80018d06:	00158513          	addi	a0,a1,1
    80018d0a:	f82a                	sd	a0,48(sp)
    80018d0c:	20b56f63          	bltu	a0,a1,80018f2a <.LBB2_73>
    80018d10:	a009                	j	80018d12 <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x186>
    80018d12:	6566                	ld	a0,88(sp)
    80018d14:	658a                	ld	a1,128(sp)
    80018d16:	662a                	ld	a2,136(sp)
    80018d18:	76c2                	ld	a3,48(sp)
    80018d1a:	6706                	ld	a4,64(sp)
    80018d1c:	47e1                	li	a5,24
    80018d1e:	02f507b3          	mul	a5,a0,a5
    80018d22:	973e                	add	a4,a4,a5
    80018d24:	e314                	sd	a3,0(a4)
                return Inode {
    80018d26:	cd32                	sw	a2,152(sp)
    80018d28:	cf2e                	sw	a1,156(sp)
    80018d2a:	e92a                	sd	a0,144(sp)
    80018d2c:	1108                	addi	a0,sp,160
    }
    80018d2e:	fffee097          	auipc	ra,0xfffee
    80018d32:	0a0080e7          	jalr	160(ra) # 80006dce <_ZN4core3ptr116drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$$u5b$kernel..fs..inode..InodeMeta$u3b$$u20$50$u5d$$GT$$GT$17h4e8573cf3b362114E>
    80018d36:	a269                	j	80018ec0 <.LBB2_68+0x38>
    80018d38:	4505                	li	a0,1
            if empty_i.is_none() && guard[i].refs == 0 {
    80018d3a:	0ea107a3          	sb	a0,239(sp)
    80018d3e:	a821                	j	80018d56 <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x1ca>
    80018d40:	4501                	li	a0,0
    80018d42:	0ea107a3          	sb	a0,239(sp)
    80018d46:	a801                	j	80018d56 <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x1ca>
    80018d48:	1108                	addi	a0,sp,160
    80018d4a:	ffff8097          	auipc	ra,0xffff8
    80018d4e:	548080e7          	jalr	1352(ra) # 80011292 <_ZN90_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h2948b75da44fd3f4E>
    80018d52:	f42a                	sd	a0,40(sp)
    80018d54:	a809                	j	80018d66 <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x1da>
    80018d56:	0ef14503          	lbu	a0,239(sp)
    80018d5a:	8905                	andi	a0,a0,1
    80018d5c:	e515                	bnez	a0,80018d88 <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x1fc>
    80018d5e:	a825                	j	80018d96 <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x20a>
    80018d60:	7562                	ld	a0,56(sp)
    80018d62:	f17d                	bnez	a0,80018d48 <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x1bc>
    80018d64:	bff1                	j	80018d40 <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x1b4>
    80018d66:	65e6                	ld	a1,88(sp)
    80018d68:	03100513          	li	a0,49
    80018d6c:	1cb56d63          	bltu	a0,a1,80018f46 <.LBB2_74+0x14>
    80018d70:	a009                	j	80018d72 <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x1e6>
    80018d72:	7522                	ld	a0,40(sp)
    80018d74:	65e6                	ld	a1,88(sp)
    80018d76:	4661                	li	a2,24
    80018d78:	02c585b3          	mul	a1,a1,a2
    80018d7c:	952e                	add	a0,a0,a1
    80018d7e:	6108                	ld	a0,0(a0)
    80018d80:	4581                	li	a1,0
    80018d82:	fab50be3          	beq	a0,a1,80018d38 <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x1ac>
    80018d86:	bf6d                	j	80018d40 <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x1b4>
                empty_i = Some(i);
    80018d88:	6566                	ld	a0,88(sp)
    80018d8a:	fdaa                	sd	a0,248(sp)
    80018d8c:	4585                	li	a1,1
    80018d8e:	f9ae                	sd	a1,240(sp)
    80018d90:	f52e                	sd	a1,168(sp)
    80018d92:	f92a                	sd	a0,176(sp)
            if empty_i.is_none() && guard[i].refs == 0 {
    80018d94:	a011                	j	80018d98 <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x20c>
    80018d96:	a009                	j	80018d98 <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x20c>
        for i in 0..NINODE {
    80018d98:	bd35                	j	80018bd4 <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E+0x48>

0000000080018d9a <.LBB2_65>:
            None => panic!("inode: not enough"),
    80018d9a:	00012517          	auipc	a0,0x12
    80018d9e:	b2650513          	addi	a0,a0,-1242 # 8002a8c0 <.L__unnamed_10>

0000000080018da2 <.LBB2_66>:
    80018da2:	00012617          	auipc	a2,0x12
    80018da6:	b3660613          	addi	a2,a2,-1226 # 8002a8d8 <.L__unnamed_11>
    80018daa:	45c5                	li	a1,17
    80018dac:	00009097          	auipc	ra,0x9
    80018db0:	350080e7          	jalr	848(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80018db4:	0000                	unimp
        let empty_i = match empty_i {
    80018db6:	0000                	unimp
            Some(i) => i,
    80018db8:	754a                	ld	a0,176(sp)
    80018dba:	ec2a                	sd	a0,24(sp)
    80018dbc:	fe2a                	sd	a0,312(sp)
    80018dbe:	e2aa                	sd	a0,320(sp)
    80018dc0:	1108                	addi	a0,sp,160
        guard[empty_i].dev = dev;
    80018dc2:	ffff8097          	auipc	ra,0xffff8
    80018dc6:	62c080e7          	jalr	1580(ra) # 800113ee <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7113684d7590c345E>
    80018dca:	f02a                	sd	a0,32(sp)
    80018dcc:	a009                	j	80018dce <.LBB2_66+0x2c>
    80018dce:	65e2                	ld	a1,24(sp)
    80018dd0:	03100513          	li	a0,49
    80018dd4:	18b56563          	bltu	a0,a1,80018f5e <.LBB2_75+0x16>
    80018dd8:	a009                	j	80018dda <.LBB2_66+0x38>
    80018dda:	652a                	ld	a0,136(sp)
    80018ddc:	7582                	ld	a1,32(sp)
    80018dde:	6662                	ld	a2,24(sp)
    80018de0:	46e1                	li	a3,24
    80018de2:	02d60633          	mul	a2,a2,a3
    80018de6:	95b2                	add	a1,a1,a2
    80018de8:	c588                	sw	a0,8(a1)
    80018dea:	1108                	addi	a0,sp,160
        guard[empty_i].inum = inum;
    80018dec:	ffff8097          	auipc	ra,0xffff8
    80018df0:	602080e7          	jalr	1538(ra) # 800113ee <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7113684d7590c345E>
    80018df4:	e82a                	sd	a0,16(sp)
    80018df6:	a009                	j	80018df8 <.LBB2_66+0x56>
    80018df8:	65e2                	ld	a1,24(sp)
    80018dfa:	03100513          	li	a0,49
    80018dfe:	16b56c63          	bltu	a0,a1,80018f76 <.LBB2_76+0x16>
    80018e02:	a009                	j	80018e04 <.LBB2_66+0x62>
    80018e04:	650a                	ld	a0,128(sp)
    80018e06:	65c2                	ld	a1,16(sp)
    80018e08:	6662                	ld	a2,24(sp)
    80018e0a:	46e1                	li	a3,24
    80018e0c:	02d60633          	mul	a2,a2,a3
    80018e10:	95b2                	add	a1,a1,a2
    80018e12:	c988                	sw	a0,16(a1)
    80018e14:	1108                	addi	a0,sp,160
        guard[empty_i].refs = 1;
    80018e16:	ffff8097          	auipc	ra,0xffff8
    80018e1a:	5d8080e7          	jalr	1496(ra) # 800113ee <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7113684d7590c345E>
    80018e1e:	e42a                	sd	a0,8(sp)
    80018e20:	a009                	j	80018e22 <.LBB2_66+0x80>
    80018e22:	65e2                	ld	a1,24(sp)
    80018e24:	03100513          	li	a0,49
    80018e28:	16b56363          	bltu	a0,a1,80018f8e <.LBB2_77+0x16>
    80018e2c:	a009                	j	80018e2e <.LBB2_66+0x8c>
    80018e2e:	65e2                	ld	a1,24(sp)
    80018e30:	6522                	ld	a0,8(sp)
    80018e32:	4661                	li	a2,24
    80018e34:	02c58633          	mul	a2,a1,a2
    80018e38:	962a                	add	a2,a2,a0
    80018e3a:	4505                	li	a0,1
    80018e3c:	e208                	sd	a0,0(a2)
    80018e3e:	03100513          	li	a0,49
        let idata = self.data[empty_i].lock();
    80018e42:	16b56263          	bltu	a0,a1,80018fa6 <.LBB2_78+0x16>
    80018e46:	a009                	j	80018e48 <.LBB2_66+0xa6>
    80018e48:	7566                	ld	a0,120(sp)
    80018e4a:	65e2                	ld	a1,24(sp)
    80018e4c:	059e                	slli	a1,a1,0x7
    80018e4e:	952e                	add	a0,a0,a1
    80018e50:	4d050513          	addi	a0,a0,1232
    80018e54:	00004097          	auipc	ra,0x4
    80018e58:	41e080e7          	jalr	1054(ra) # 8001d272 <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$4lock17h5e4056570307628eE>
    80018e5c:	e22a                	sd	a0,256(sp)
    80018e5e:	e62e                	sd	a1,264(sp)
    80018e60:	a009                	j	80018e62 <.LBB2_66+0xc0>
    80018e62:	0208                	addi	a0,sp,256
        assert!(idata.valid == false, "此时 idata 应当无效");
    80018e64:	00004097          	auipc	ra,0x4
    80018e68:	69c080e7          	jalr	1692(ra) # 8001d500 <_ZN92_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfc7812d7ca7ab1e1E>
    80018e6c:	e02a                	sd	a0,0(sp)
    80018e6e:	a009                	j	80018e70 <.LBB2_66+0xce>
    80018e70:	6502                	ld	a0,0(sp)
    80018e72:	04854503          	lbu	a0,72(a0)
    80018e76:	8905                	andi	a0,a0,1
    80018e78:	4581                	li	a1,0
    80018e7a:	02b50163          	beq	a0,a1,80018e9c <.LBB2_68+0x14>
    80018e7e:	a009                	j	80018e80 <.LBB2_67>

0000000080018e80 <.LBB2_67>:
    80018e80:	00012517          	auipc	a0,0x12
    80018e84:	a0850513          	addi	a0,a0,-1528 # 8002a888 <.L__unnamed_12>

0000000080018e88 <.LBB2_68>:
    80018e88:	00012617          	auipc	a2,0x12
    80018e8c:	a2060613          	addi	a2,a2,-1504 # 8002a8a8 <.L__unnamed_13>
    80018e90:	45e5                	li	a1,25
    80018e92:	00009097          	auipc	ra,0x9
    80018e96:	26a080e7          	jalr	618(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80018e9a:	0000                	unimp
        Inode {
    80018e9c:	6562                	ld	a0,24(sp)
    80018e9e:	658a                	ld	a1,128(sp)
    80018ea0:	662a                	ld	a2,136(sp)
    80018ea2:	cd32                	sw	a2,152(sp)
    80018ea4:	cf2e                	sw	a1,156(sp)
    80018ea6:	e92a                	sd	a0,144(sp)
    80018ea8:	0208                	addi	a0,sp,256
    }
    80018eaa:	fffee097          	auipc	ra,0xfffee
    80018eae:	204080e7          	jalr	516(ra) # 800070ae <_ZN4core3ptr96drop_in_place$LT$kernel..lock..sleeplock..SleepLockGuard$LT$kernel..fs..inode..InodeData$GT$$GT$17h00d5c02cf687ef41E>
    80018eb2:	a009                	j	80018eb4 <.LBB2_68+0x2c>
    80018eb4:	1108                	addi	a0,sp,160
    80018eb6:	fffee097          	auipc	ra,0xfffee
    80018eba:	f18080e7          	jalr	-232(ra) # 80006dce <_ZN4core3ptr116drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$$u5b$kernel..fs..inode..InodeMeta$u3b$$u20$50$u5d$$GT$$GT$17h4e8573cf3b362114E>
    80018ebe:	a009                	j	80018ec0 <.LBB2_68+0x38>
    80018ec0:	654a                	ld	a0,144(sp)
    80018ec2:	65ea                	ld	a1,152(sp)
    80018ec4:	60b6                	ld	ra,328(sp)
    80018ec6:	6171                	addi	sp,sp,336
    80018ec8:	8082                	ret
            if guard[i].inum == inum && guard[i].refs > 0 && guard[i].dev == dev {
    80018eca:	6566                	ld	a0,88(sp)

0000000080018ecc <.LBB2_69>:
    80018ecc:	00012617          	auipc	a2,0x12
    80018ed0:	8e460613          	addi	a2,a2,-1820 # 8002a7b0 <.L__unnamed_14>
    80018ed4:	03200593          	li	a1,50
    80018ed8:	00009097          	auipc	ra,0x9
    80018edc:	250080e7          	jalr	592(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80018ee0:	0000                	unimp
    80018ee2:	6566                	ld	a0,88(sp)

0000000080018ee4 <.LBB2_70>:
    80018ee4:	00012617          	auipc	a2,0x12
    80018ee8:	8e460613          	addi	a2,a2,-1820 # 8002a7c8 <.L__unnamed_15>
    80018eec:	03200593          	li	a1,50
    80018ef0:	00009097          	auipc	ra,0x9
    80018ef4:	238080e7          	jalr	568(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80018ef8:	0000                	unimp
    80018efa:	6566                	ld	a0,88(sp)

0000000080018efc <.LBB2_71>:
    80018efc:	00012617          	auipc	a2,0x12
    80018f00:	8e460613          	addi	a2,a2,-1820 # 8002a7e0 <.L__unnamed_16>
    80018f04:	03200593          	li	a1,50
    80018f08:	00009097          	auipc	ra,0x9
    80018f0c:	220080e7          	jalr	544(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80018f10:	0000                	unimp
                guard[i].refs += 1;
    80018f12:	6566                	ld	a0,88(sp)

0000000080018f14 <.LBB2_72>:
    80018f14:	00012617          	auipc	a2,0x12
    80018f18:	8e460613          	addi	a2,a2,-1820 # 8002a7f8 <.L__unnamed_17>
    80018f1c:	03200593          	li	a1,50
    80018f20:	00009097          	auipc	ra,0x9
    80018f24:	208080e7          	jalr	520(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

0000000080018f2a <.LBB2_73>:
    80018f2a:	00011517          	auipc	a0,0x11
    80018f2e:	79650513          	addi	a0,a0,1942 # 8002a6c0 <str.0>

0000000080018f32 <.LBB2_74>:
    80018f32:	00012617          	auipc	a2,0x12
    80018f36:	8c660613          	addi	a2,a2,-1850 # 8002a7f8 <.L__unnamed_17>
    80018f3a:	45f1                	li	a1,28
    80018f3c:	00009097          	auipc	ra,0x9
    80018f40:	1c0080e7          	jalr	448(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80018f44:	0000                	unimp
            if empty_i.is_none() && guard[i].refs == 0 {
    80018f46:	6566                	ld	a0,88(sp)

0000000080018f48 <.LBB2_75>:
    80018f48:	00012617          	auipc	a2,0x12
    80018f4c:	8c860613          	addi	a2,a2,-1848 # 8002a810 <.L__unnamed_18>
    80018f50:	03200593          	li	a1,50
    80018f54:	00009097          	auipc	ra,0x9
    80018f58:	1d4080e7          	jalr	468(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80018f5c:	0000                	unimp
        guard[empty_i].dev = dev;
    80018f5e:	6562                	ld	a0,24(sp)

0000000080018f60 <.LBB2_76>:
    80018f60:	00012617          	auipc	a2,0x12
    80018f64:	8c860613          	addi	a2,a2,-1848 # 8002a828 <.L__unnamed_19>
    80018f68:	03200593          	li	a1,50
    80018f6c:	00009097          	auipc	ra,0x9
    80018f70:	1bc080e7          	jalr	444(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80018f74:	0000                	unimp
        guard[empty_i].inum = inum;
    80018f76:	6562                	ld	a0,24(sp)

0000000080018f78 <.LBB2_77>:
    80018f78:	00012617          	auipc	a2,0x12
    80018f7c:	8c860613          	addi	a2,a2,-1848 # 8002a840 <.L__unnamed_20>
    80018f80:	03200593          	li	a1,50
    80018f84:	00009097          	auipc	ra,0x9
    80018f88:	1a4080e7          	jalr	420(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80018f8c:	0000                	unimp
        guard[empty_i].refs = 1;
    80018f8e:	6562                	ld	a0,24(sp)

0000000080018f90 <.LBB2_78>:
    80018f90:	00012617          	auipc	a2,0x12
    80018f94:	8c860613          	addi	a2,a2,-1848 # 8002a858 <.L__unnamed_21>
    80018f98:	03200593          	li	a1,50
    80018f9c:	00009097          	auipc	ra,0x9
    80018fa0:	18c080e7          	jalr	396(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80018fa4:	0000                	unimp
        let idata = self.data[empty_i].lock();
    80018fa6:	6562                	ld	a0,24(sp)

0000000080018fa8 <.LBB2_79>:
    80018fa8:	00012617          	auipc	a2,0x12
    80018fac:	8c860613          	addi	a2,a2,-1848 # 8002a870 <.L__unnamed_22>
    80018fb0:	03200593          	li	a1,50
    80018fb4:	00009097          	auipc	ra,0x9
    80018fb8:	174080e7          	jalr	372(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel2fs5inode10InodeCache5namex17h346d00a9a4ac3352E:

0000000080018fbe <_ZN6kernel2fs5inode10InodeCache5namex17h346d00a9a4ac3352E>:
    fn namex(
    80018fbe:	7121                	addi	sp,sp,-448
    80018fc0:	ff06                	sd	ra,440(sp)
    80018fc2:	e8ba                	sd	a4,80(sp)
    80018fc4:	ecb6                	sd	a3,88(sp)
    80018fc6:	f0b2                	sd	a2,96(sp)
    80018fc8:	f4ae                	sd	a1,104(sp)
    80018fca:	f8aa                	sd	a0,112(sp)
    80018fcc:	853e                	mv	a0,a5
    80018fce:	fcaa                	sd	a0,120(sp)
    80018fd0:	f2ae                	sd	a1,352(sp)
    80018fd2:	f6b2                	sd	a2,360(sp)
    80018fd4:	fab6                	sd	a3,368(sp)
    80018fd6:	feba                	sd	a4,376(sp)
    80018fd8:	18f103a3          	sb	a5,391(sp)
    80018fdc:	4501                	li	a0,0
        let mut inode: Inode;
    80018fde:	14a10fa3          	sb	a0,351(sp)
        if path[0] == b'/' {
    80018fe2:	2aa68763          	beq	a3,a0,80019290 <.LBB3_56+0x98>
    80018fe6:	a009                	j	80018fe8 <_ZN6kernel2fs5inode10InodeCache5namex17h346d00a9a4ac3352E+0x2a>
    80018fe8:	7506                	ld	a0,96(sp)
    80018fea:	00054503          	lbu	a0,0(a0)
    80018fee:	02f00593          	li	a1,47
    80018ff2:	00b51f63          	bne	a0,a1,80019010 <.LBB3_51>
    80018ff6:	a009                	j	80018ff8 <_ZN6kernel2fs5inode10InodeCache5namex17h346d00a9a4ac3352E+0x3a>
            inode = self.get(ROOTDEV, ROOTINUM);
    80018ff8:	7526                	ld	a0,104(sp)
    80018ffa:	4605                	li	a2,1
    80018ffc:	85b2                	mv	a1,a2
    80018ffe:	00000097          	auipc	ra,0x0
    80019002:	b8e080e7          	jalr	-1138(ra) # 80018b8c <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E>
    80019006:	f32a                	sd	a0,416(sp)
    80019008:	f72e                	sd	a1,424(sp)
    8001900a:	e92a                	sd	a0,144(sp)
    8001900c:	ed2e                	sd	a1,152(sp)
    8001900e:	a819                	j	80019024 <.LBB3_51+0x14>

0000000080019010 <.LBB3_51>:
            let p = unsafe { CPU_MANAGER.myproc().unwrap() };
    80019010:	0004b517          	auipc	a0,0x4b
    80019014:	13050513          	addi	a0,a0,304 # 80064140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    80019018:	ffff9097          	auipc	ra,0xffff9
    8001901c:	a12080e7          	jalr	-1518(ra) # 80011a2a <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    80019020:	e4aa                	sd	a0,72(sp)
    80019022:	a809                	j	80019034 <.LBB3_51+0x24>
    80019024:	4505                	li	a0,1
            inode = self.get(ROOTDEV, ROOTINUM);
    80019026:	14a10fa3          	sb	a0,351(sp)
    8001902a:	654a                	ld	a0,144(sp)
    8001902c:	e12a                	sd	a0,128(sp)
    8001902e:	656a                	ld	a0,152(sp)
    80019030:	e52a                	sd	a0,136(sp)
        if path[0] == b'/' {
    80019032:	a0a5                	j	8001909a <.LBB3_53+0x3a>
            let p = unsafe { CPU_MANAGER.myproc().unwrap() };
    80019034:	6526                	ld	a0,72(sp)

0000000080019036 <.LBB3_52>:
    80019036:	00012597          	auipc	a1,0x12
    8001903a:	8d258593          	addi	a1,a1,-1838 # 8002a908 <.L__unnamed_23>
    8001903e:	ffff6097          	auipc	ra,0xffff6
    80019042:	c7e080e7          	jalr	-898(ra) # 8000ecbc <_ZN4core6option15Option$LT$T$GT$6unwrap17h81f0c84c54a80648E>
    80019046:	e0aa                	sd	a0,64(sp)
    80019048:	a009                	j	8001904a <.LBB3_52+0x14>
    8001904a:	6506                	ld	a0,64(sp)
    8001904c:	e72a                	sd	a0,392(sp)
            inode = self.dup(p.cwd.as_ref().unwrap());
    8001904e:	3c850513          	addi	a0,a0,968
    80019052:	ffff6097          	auipc	ra,0xffff6
    80019056:	956080e7          	jalr	-1706(ra) # 8000e9a8 <_ZN4core6option15Option$LT$T$GT$6as_ref17h883d1380e87d3449E>
    8001905a:	fc2a                	sd	a0,56(sp)
    8001905c:	a009                	j	8001905e <.LBB3_52+0x28>
    8001905e:	7562                	ld	a0,56(sp)

0000000080019060 <.LBB3_53>:
    80019060:	00012597          	auipc	a1,0x12
    80019064:	8c058593          	addi	a1,a1,-1856 # 8002a920 <.L__unnamed_24>
    80019068:	ffff6097          	auipc	ra,0xffff6
    8001906c:	cc0080e7          	jalr	-832(ra) # 8000ed28 <_ZN4core6option15Option$LT$T$GT$6unwrap17h8e9f6f5582436d22E>
    80019070:	f82a                	sd	a0,48(sp)
    80019072:	a009                	j	80019074 <.LBB3_53+0x14>
    80019074:	75c2                	ld	a1,48(sp)
    80019076:	7526                	ld	a0,104(sp)
    80019078:	fffff097          	auipc	ra,0xfffff
    8001907c:	73a080e7          	jalr	1850(ra) # 800187b2 <_ZN6kernel2fs5inode10InodeCache3dup17h6659572d8df32b14E>
    80019080:	eb2a                	sd	a0,400(sp)
    80019082:	ef2e                	sd	a1,408(sp)
    80019084:	f12a                	sd	a0,160(sp)
    80019086:	f52e                	sd	a1,168(sp)
    80019088:	a009                	j	8001908a <.LBB3_53+0x2a>
    8001908a:	4505                	li	a0,1
    8001908c:	14a10fa3          	sb	a0,351(sp)
    80019090:	750a                	ld	a0,160(sp)
    80019092:	e12a                	sd	a0,128(sp)
    80019094:	752a                	ld	a0,168(sp)
    80019096:	e52a                	sd	a0,136(sp)
        if path[0] == b'/' {
    80019098:	a009                	j	8001909a <.LBB3_53+0x3a>
    8001909a:	4501                	li	a0,0
        let mut cur: usize = 0;
    8001909c:	f92a                	sd	a0,176(sp)
        loop {
    8001909e:	a009                	j	800190a0 <.LBB3_53+0x40>
            cur = skip_path(path, cur, name);
    800190a0:	66c6                	ld	a3,80(sp)
    800190a2:	65e6                	ld	a1,88(sp)
    800190a4:	7506                	ld	a0,96(sp)
    800190a6:	764a                	ld	a2,176(sp)
    800190a8:	00000097          	auipc	ra,0x0
    800190ac:	7fa080e7          	jalr	2042(ra) # 800198a2 <_ZN6kernel2fs5inode9skip_path17h45b5cf4cf2eb7faeE>
    800190b0:	f42a                	sd	a0,40(sp)
    800190b2:	a009                	j	800190b4 <.LBB3_53+0x54>
    800190b4:	7522                	ld	a0,40(sp)
    800190b6:	f92a                	sd	a0,176(sp)
    800190b8:	4581                	li	a1,0
            if cur == 0 { break; }
    800190ba:	00b51763          	bne	a0,a1,800190c8 <.LBB3_53+0x68>
    800190be:	a009                	j	800190c0 <.LBB3_53+0x60>
        if is_parent {
    800190c0:	7566                	ld	a0,120(sp)
    800190c2:	12051763          	bnez	a0,800191f0 <.LBB3_55>
    800190c6:	a2a9                	j	80019210 <.LBB3_56+0x18>
    800190c8:	0108                	addi	a0,sp,128
            let mut data_guard = inode.lock();
    800190ca:	00002097          	auipc	ra,0x2
    800190ce:	c36080e7          	jalr	-970(ra) # 8001ad00 <_ZN6kernel2fs5inode5Inode4lock17he70970c593f751adE>
    800190d2:	fd2a                	sd	a0,184(sp)
    800190d4:	e1ae                	sd	a1,192(sp)
    800190d6:	a009                	j	800190d8 <.LBB3_53+0x78>
    800190d8:	1928                	addi	a0,sp,184
            if data_guard.dinode.itype != InodeType::Directory {
    800190da:	00004097          	auipc	ra,0x4
    800190de:	426080e7          	jalr	1062(ra) # 8001d500 <_ZN92_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfc7812d7ca7ab1e1E>
    800190e2:	f02a                	sd	a0,32(sp)
    800190e4:	a009                	j	800190e6 <.LBB3_53+0x86>
    800190e6:	7502                	ld	a0,32(sp)
    800190e8:	0521                	addi	a0,a0,8

00000000800190ea <.LBB3_54>:
    800190ea:	00012597          	auipc	a1,0x12
    800190ee:	84e58593          	addi	a1,a1,-1970 # 8002a938 <.L__unnamed_25>
    800190f2:	fffff097          	auipc	ra,0xfffff
    800190f6:	188080e7          	jalr	392(ra) # 8001827a <_ZN4core3cmp9PartialEq2ne17ha4fd141ed85850e3E>
    800190fa:	ec2a                	sd	a0,24(sp)
    800190fc:	a009                	j	800190fe <.LBB3_54+0x14>
    800190fe:	6562                	ld	a0,24(sp)
    80019100:	4581                	li	a1,0
    80019102:	00b50a63          	beq	a0,a1,80019116 <.LBB3_54+0x2c>
    80019106:	a009                	j	80019108 <.LBB3_54+0x1e>
                drop(data_guard);
    80019108:	756a                	ld	a0,184(sp)
    8001910a:	658e                	ld	a1,192(sp)
    8001910c:	00004097          	auipc	ra,0x4
    80019110:	da6080e7          	jalr	-602(ra) # 8001ceb2 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    80019114:	a021                	j	8001911c <.LBB3_54+0x32>
            if is_parent && path[cur] == 0 {
    80019116:	7566                	ld	a0,120(sp)
    80019118:	ed11                	bnez	a0,80019134 <.LBB3_54+0x4a>
    8001911a:	a809                	j	8001912c <.LBB3_54+0x42>
    8001911c:	75c6                	ld	a1,112(sp)
    8001911e:	4501                	li	a0,0
                return None
    80019120:	e188                	sd	a0,0(a1)
    80019122:	a23d                	j	80019250 <.LBB3_56+0x58>
    80019124:	4505                	li	a0,1
            if is_parent && path[cur] == 0 {
    80019126:	0ca107a3          	sb	a0,207(sp)
    8001912a:	a819                	j	80019140 <.LBB3_54+0x56>
    8001912c:	4501                	li	a0,0
    8001912e:	0ca107a3          	sb	a0,207(sp)
    80019132:	a039                	j	80019140 <.LBB3_54+0x56>
    80019134:	65e6                	ld	a1,88(sp)
    80019136:	754a                	ld	a0,176(sp)
    80019138:	e82a                	sd	a0,16(sp)
    8001913a:	00b56863          	bltu	a0,a1,8001914a <.LBB3_54+0x60>
    8001913e:	a2a5                	j	800192a6 <.LBB3_57+0x14>
    80019140:	0cf14503          	lbu	a0,207(sp)
    80019144:	8905                	andi	a0,a0,1
    80019146:	e919                	bnez	a0,8001915c <.LBB3_54+0x72>
    80019148:	a00d                	j	8001916a <.LBB3_54+0x80>
    8001914a:	7506                	ld	a0,96(sp)
    8001914c:	65c2                	ld	a1,16(sp)
    8001914e:	952e                	add	a0,a0,a1
    80019150:	00054503          	lbu	a0,0(a0)
    80019154:	4581                	li	a1,0
    80019156:	fcb507e3          	beq	a0,a1,80019124 <.LBB3_54+0x3a>
    8001915a:	bfc9                	j	8001912c <.LBB3_54+0x42>
                drop(data_guard);
    8001915c:	756a                	ld	a0,184(sp)
    8001915e:	658e                	ld	a1,192(sp)
    80019160:	00004097          	auipc	ra,0x4
    80019164:	d52080e7          	jalr	-686(ra) # 8001ceb2 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    80019168:	a801                	j	80019178 <.LBB3_54+0x8e>
    8001916a:	1928                	addi	a0,sp,184
            match data_guard.dir_lookup(name) {
    8001916c:	00004097          	auipc	ra,0x4
    80019170:	3a8080e7          	jalr	936(ra) # 8001d514 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    80019174:	e42a                	sd	a0,8(sp)
    80019176:	a831                	j	80019192 <.LBB3_54+0xa8>
    80019178:	75c6                	ld	a1,112(sp)
    8001917a:	4501                	li	a0,0
                return Some(inode)
    8001917c:	14a10fa3          	sb	a0,351(sp)
    80019180:	662a                	ld	a2,136(sp)
    80019182:	edb2                	sd	a2,216(sp)
    80019184:	650a                	ld	a0,128(sp)
    80019186:	e9aa                	sd	a0,208(sp)
    80019188:	e990                	sd	a2,16(a1)
    8001918a:	e588                	sd	a0,8(a1)
    8001918c:	4505                	li	a0,1
    8001918e:	e188                	sd	a0,0(a1)
        }
    80019190:	a0c1                	j	80019250 <.LBB3_56+0x58>
            match data_guard.dir_lookup(name) {
    80019192:	6646                	ld	a2,80(sp)
    80019194:	65a2                	ld	a1,8(sp)
    80019196:	1188                	addi	a0,sp,224
    80019198:	46b9                	li	a3,14
    8001919a:	00001097          	auipc	ra,0x1
    8001919e:	57c080e7          	jalr	1404(ra) # 8001a716 <_ZN6kernel2fs5inode9InodeData10dir_lookup17h2ffc093ee3be0a35E>
    800191a2:	a009                	j	800191a4 <.LBB3_54+0xba>
                None => {
    800191a4:	750e                	ld	a0,224(sp)
    800191a6:	4581                	li	a1,0
    800191a8:	00b50f63          	beq	a0,a1,800191c6 <.LBB3_54+0xdc>
    800191ac:	a009                	j	800191ae <.LBB3_54+0xc4>
                Some(last_inode) => {
    800191ae:	754e                	ld	a0,240(sp)
    800191b0:	e22a                	sd	a0,256(sp)
    800191b2:	752e                	ld	a0,232(sp)
    800191b4:	fdaa                	sd	a0,248(sp)
                    drop(data_guard);
    800191b6:	756a                	ld	a0,184(sp)
    800191b8:	658e                	ld	a1,192(sp)
    800191ba:	00004097          	auipc	ra,0x4
    800191be:	cf8080e7          	jalr	-776(ra) # 8001ceb2 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    800191c2:	a829                	j	800191dc <.LBB3_54+0xf2>
            match data_guard.dir_lookup(name) {
    800191c4:	0000                	unimp
                    drop(data_guard);
    800191c6:	756a                	ld	a0,184(sp)
    800191c8:	658e                	ld	a1,192(sp)
    800191ca:	00004097          	auipc	ra,0x4
    800191ce:	ce8080e7          	jalr	-792(ra) # 8001ceb2 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    800191d2:	a009                	j	800191d4 <.LBB3_54+0xea>
    800191d4:	75c6                	ld	a1,112(sp)
    800191d6:	4501                	li	a0,0
                    return None
    800191d8:	e188                	sd	a0,0(a1)
    800191da:	a89d                	j	80019250 <.LBB3_56+0x58>
                    inode = last_inode;
    800191dc:	6512                	ld	a0,256(sp)
    800191de:	ea2a                	sd	a0,272(sp)
    800191e0:	756e                	ld	a0,248(sp)
    800191e2:	e62a                	sd	a0,264(sp)
    800191e4:	0108                	addi	a0,sp,128
    800191e6:	fffee097          	auipc	ra,0xfffee
    800191ea:	cf4080e7          	jalr	-780(ra) # 80006eda <_ZN4core3ptr45drop_in_place$LT$kernel..fs..inode..Inode$GT$17h8786fe1a2a287832E>
    800191ee:	a8ad                	j	80019268 <.LBB3_56+0x70>

00000000800191f0 <.LBB3_55>:
            println!("[Kernel] Warning: namex querying root inode's parent");
    800191f0:	00011597          	auipc	a1,0x11
    800191f4:	7a058593          	addi	a1,a1,1952 # 8002a990 <.L__unnamed_26>

00000000800191f8 <.LBB3_56>:
    800191f8:	00011697          	auipc	a3,0x11
    800191fc:	7a868693          	addi	a3,a3,1960 # 8002a9a0 <.L__unnamed_30>
    80019200:	0a28                	addi	a0,sp,280
    80019202:	4605                	li	a2,1
    80019204:	4701                	li	a4,0
    80019206:	fffec097          	auipc	ra,0xfffec
    8001920a:	22e080e7          	jalr	558(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8001920e:	a831                	j	8001922a <.LBB3_56+0x32>
    80019210:	75c6                	ld	a1,112(sp)
    80019212:	4501                	li	a0,0
            Some(inode)
    80019214:	14a10fa3          	sb	a0,351(sp)
    80019218:	662a                	ld	a2,136(sp)
    8001921a:	eab2                	sd	a2,336(sp)
    8001921c:	650a                	ld	a0,128(sp)
    8001921e:	e6aa                	sd	a0,328(sp)
    80019220:	e990                	sd	a2,16(a1)
    80019222:	e588                	sd	a0,8(a1)
    80019224:	4505                	li	a0,1
    80019226:	e188                	sd	a0,0(a1)
        if is_parent {
    80019228:	a819                	j	8001923e <.LBB3_56+0x46>
    8001922a:	0a28                	addi	a0,sp,280
            println!("[Kernel] Warning: namex querying root inode's parent");
    8001922c:	00005097          	auipc	ra,0x5
    80019230:	984080e7          	jalr	-1660(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    80019234:	a009                	j	80019236 <.LBB3_56+0x3e>
    80019236:	75c6                	ld	a1,112(sp)
    80019238:	4501                	li	a0,0
            None 
    8001923a:	e188                	sd	a0,0(a1)
        if is_parent {
    8001923c:	a009                	j	8001923e <.LBB3_56+0x46>
    }
    8001923e:	15f14503          	lbu	a0,351(sp)
    80019242:	8905                	andi	a0,a0,1
    80019244:	e915                	bnez	a0,80019278 <.LBB3_56+0x80>
    80019246:	a009                	j	80019248 <.LBB3_56+0x50>
    80019248:	4501                	li	a0,0
    8001924a:	14a10fa3          	sb	a0,351(sp)
    8001924e:	a811                	j	80019262 <.LBB3_56+0x6a>
    80019250:	15f14503          	lbu	a0,351(sp)
    80019254:	8905                	andi	a0,a0,1
    80019256:	e51d                	bnez	a0,80019284 <.LBB3_56+0x8c>
    80019258:	a009                	j	8001925a <.LBB3_56+0x62>
    8001925a:	4501                	li	a0,0
    8001925c:	14a10fa3          	sb	a0,351(sp)
    80019260:	a009                	j	80019262 <.LBB3_56+0x6a>
    80019262:	70fa                	ld	ra,440(sp)
    80019264:	6139                	addi	sp,sp,448
    80019266:	8082                	ret
    80019268:	4505                	li	a0,1
                    inode = last_inode;
    8001926a:	14a10fa3          	sb	a0,351(sp)
    8001926e:	6532                	ld	a0,264(sp)
    80019270:	e12a                	sd	a0,128(sp)
    80019272:	6552                	ld	a0,272(sp)
    80019274:	e52a                	sd	a0,136(sp)
        loop {
    80019276:	b52d                	j	800190a0 <.LBB3_53+0x40>
    80019278:	0108                	addi	a0,sp,128
    }
    8001927a:	fffee097          	auipc	ra,0xfffee
    8001927e:	c60080e7          	jalr	-928(ra) # 80006eda <_ZN4core3ptr45drop_in_place$LT$kernel..fs..inode..Inode$GT$17h8786fe1a2a287832E>
    80019282:	b7d9                	j	80019248 <.LBB3_56+0x50>
    80019284:	0108                	addi	a0,sp,128
    80019286:	fffee097          	auipc	ra,0xfffee
    8001928a:	c54080e7          	jalr	-940(ra) # 80006eda <_ZN4core3ptr45drop_in_place$LT$kernel..fs..inode..Inode$GT$17h8786fe1a2a287832E>
    8001928e:	b7f1                	j	8001925a <.LBB3_56+0x62>
        if path[0] == b'/' {
    80019290:	65e6                	ld	a1,88(sp)

0000000080019292 <.LBB3_57>:
    80019292:	00011617          	auipc	a2,0x11
    80019296:	65e60613          	addi	a2,a2,1630 # 8002a8f0 <.L__unnamed_28>
    8001929a:	4501                	li	a0,0
    8001929c:	00009097          	auipc	ra,0x9
    800192a0:	e8c080e7          	jalr	-372(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    800192a4:	0000                	unimp
            if is_parent && path[cur] == 0 {
    800192a6:	65e6                	ld	a1,88(sp)
    800192a8:	6542                	ld	a0,16(sp)

00000000800192aa <.LBB3_58>:
    800192aa:	00011617          	auipc	a2,0x11
    800192ae:	69660613          	addi	a2,a2,1686 # 8002a940 <.L__unnamed_29>
    800192b2:	00009097          	auipc	ra,0x9
    800192b6:	e76080e7          	jalr	-394(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel2fs5inode10InodeCache5namei17hc269c6a9eecf1991E:

00000000800192bc <_ZN6kernel2fs5inode10InodeCache5namei17hc269c6a9eecf1991E>:
    pub fn namei(&self, path: &[u8]) -> Option<Inode> {
    800192bc:	7179                	addi	sp,sp,-48
    800192be:	f406                	sd	ra,40(sp)
    800192c0:	e82e                	sd	a1,16(sp)
    800192c2:	ec32                	sd	a2,24(sp)
    800192c4:	f036                	sd	a3,32(sp)
    800192c6:	4781                	li	a5,0
        let mut name: [u8;DIRSIZ] = [0;DIRSIZ];
    800192c8:	e03e                	sd	a5,0(sp)
    800192ca:	c43e                	sw	a5,8(sp)
    800192cc:	00f11623          	sh	a5,12(sp)
    800192d0:	870a                	mv	a4,sp
        self.namex(path, &mut name, false)
    800192d2:	00000097          	auipc	ra,0x0
    800192d6:	cec080e7          	jalr	-788(ra) # 80018fbe <_ZN6kernel2fs5inode10InodeCache5namex17h346d00a9a4ac3352E>
    800192da:	a009                	j	800192dc <_ZN6kernel2fs5inode10InodeCache5namei17hc269c6a9eecf1991E+0x20>
    }
    800192dc:	70a2                	ld	ra,40(sp)
    800192de:	6145                	addi	sp,sp,48
    800192e0:	8082                	ret

Disassembly of section .text._ZN6kernel2fs5inode10InodeCache12namei_parent17h24bebf98ccd9b34eE:

00000000800192e2 <_ZN6kernel2fs5inode10InodeCache12namei_parent17h24bebf98ccd9b34eE>:
    pub fn namei_parent(&self, path: &[u8], name: &mut [u8;DIRSIZ]) -> Option<Inode> {
    800192e2:	7179                	addi	sp,sp,-48
    800192e4:	f406                	sd	ra,40(sp)
    800192e6:	e42e                	sd	a1,8(sp)
    800192e8:	e832                	sd	a2,16(sp)
    800192ea:	ec36                	sd	a3,24(sp)
    800192ec:	f03a                	sd	a4,32(sp)
    800192ee:	4785                	li	a5,1
        self.namex(path, name, true)
    800192f0:	00000097          	auipc	ra,0x0
    800192f4:	cce080e7          	jalr	-818(ra) # 80018fbe <_ZN6kernel2fs5inode10InodeCache5namex17h346d00a9a4ac3352E>
    800192f8:	a009                	j	800192fa <_ZN6kernel2fs5inode10InodeCache12namei_parent17h24bebf98ccd9b34eE+0x18>
    }
    800192fa:	70a2                	ld	ra,40(sp)
    800192fc:	6145                	addi	sp,sp,48
    800192fe:	8082                	ret

Disassembly of section .text._ZN6kernel2fs5inode10InodeCache6create17hf2583436fcb9d2ecE:

0000000080019300 <_ZN6kernel2fs5inode10InodeCache6create17hf2583436fcb9d2ecE>:
    pub fn create(
    80019300:	c9010113          	addi	sp,sp,-880
    80019304:	36113423          	sd	ra,872(sp)
    80019308:	fe2e                	sd	a1,312(sp)
    8001930a:	e2aa                	sd	a0,320(sp)
    8001930c:	8542                	mv	a0,a6
    8001930e:	e6aa                	sd	a0,328(sp)
    80019310:	853e                	mv	a0,a5
    80019312:	eaaa                	sd	a0,336(sp)
    80019314:	14e11f23          	sh	a4,350(sp)
    80019318:	28b13823          	sd	a1,656(sp)
    8001931c:	28c13c23          	sd	a2,664(sp)
    80019320:	2ad13023          	sd	a3,672(sp)
    80019324:	2af11623          	sh	a5,684(sp)
    80019328:	2b011723          	sh	a6,686(sp)
    8001932c:	4501                	li	a0,0
        let mut name: [u8; DIRSIZ] = [0; DIRSIZ];
    8001932e:	28a10723          	sb	a0,654(sp)
    80019332:	28a107a3          	sb	a0,655(sp)
    80019336:	28a106a3          	sb	a0,653(sp)
    8001933a:	f2aa                	sd	a0,352(sp)
    8001933c:	16a12423          	sw	a0,360(sp)
    80019340:	16a11623          	sh	a0,364(sp)
    80019344:	0308                	addi	a0,sp,384
    80019346:	1298                	addi	a4,sp,352
        let dirinode = self.namei_parent(path, &mut name).unwrap();
    80019348:	00000097          	auipc	ra,0x0
    8001934c:	f9a080e7          	jalr	-102(ra) # 800192e2 <_ZN6kernel2fs5inode10InodeCache12namei_parent17h24bebf98ccd9b34eE>
    80019350:	a009                	j	80019352 <.LBB6_77>

0000000080019352 <.LBB6_77>:
    80019352:	00011597          	auipc	a1,0x11
    80019356:	64e58593          	addi	a1,a1,1614 # 8002a9a0 <.L__unnamed_30>
    8001935a:	0308                	addi	a0,sp,384
    8001935c:	ffff6097          	auipc	ra,0xffff6
    80019360:	8bc080e7          	jalr	-1860(ra) # 8000ec18 <_ZN4core6option15Option$LT$T$GT$6unwrap17h5fcd4b8dbd5a2f47E>
    80019364:	2ca13023          	sd	a0,704(sp)
    80019368:	2cb13423          	sd	a1,712(sp)
    8001936c:	faaa                	sd	a0,368(sp)
    8001936e:	feae                	sd	a1,376(sp)
    80019370:	a009                	j	80019372 <.LBB6_77+0x20>
    80019372:	4505                	li	a0,1
        let mut dirinode_guard = dirinode.lock();
    80019374:	28a107a3          	sb	a0,655(sp)
    80019378:	1a88                	addi	a0,sp,368
    8001937a:	00002097          	auipc	ra,0x2
    8001937e:	986080e7          	jalr	-1658(ra) # 8001ad00 <_ZN6kernel2fs5inode5Inode4lock17he70970c593f751adE>
    80019382:	ef2a                	sd	a0,408(sp)
    80019384:	f32e                	sd	a1,416(sp)
    80019386:	a009                	j	80019388 <.LBB6_77+0x36>
    80019388:	0b28                	addi	a0,sp,408
        match dirinode_guard.dir_lookup(&name) {
    8001938a:	00004097          	auipc	ra,0x4
    8001938e:	18a080e7          	jalr	394(ra) # 8001d514 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    80019392:	fa2a                	sd	a0,304(sp)
    80019394:	a009                	j	80019396 <.LBB6_77+0x44>
    80019396:	75d2                	ld	a1,304(sp)
    80019398:	1328                	addi	a0,sp,424
    8001939a:	1290                	addi	a2,sp,352
    8001939c:	46b9                	li	a3,14
    8001939e:	00001097          	auipc	ra,0x1
    800193a2:	378080e7          	jalr	888(ra) # 8001a716 <_ZN6kernel2fs5inode9InodeData10dir_lookup17h2ffc093ee3be0a35E>
    800193a6:	a009                	j	800193a8 <.LBB6_77+0x56>
            Some(inode) => {
    800193a8:	753a                	ld	a0,424(sp)
    800193aa:	4581                	li	a1,0
    800193ac:	00b50463          	beq	a0,a1,800193b4 <.LBB6_77+0x62>
    800193b0:	a009                	j	800193b2 <.LBB6_77+0x60>
    800193b2:	a809                	j	800193c4 <.LBB6_77+0x72>
    800193b4:	0b28                	addi	a0,sp,408
        let dev = dirinode_guard.dev;
    800193b6:	00004097          	auipc	ra,0x4
    800193ba:	14a080e7          	jalr	330(ra) # 8001d500 <_ZN92_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfc7812d7ca7ab1e1E>
    800193be:	f62a                	sd	a0,296(sp)
    800193c0:	a8e9                	j	8001949a <.LBB6_80+0x2c>
        match dirinode_guard.dir_lookup(&name) {
    800193c2:	0000                	unimp
    800193c4:	4505                	li	a0,1
            Some(inode) => {
    800193c6:	28a10723          	sb	a0,654(sp)
    800193ca:	755a                	ld	a0,432(sp)
    800193cc:	e3aa                	sd	a0,448(sp)
    800193ce:	757a                	ld	a0,440(sp)
    800193d0:	e7aa                	sd	a0,456(sp)
    800193d2:	4501                	li	a0,0
                drop(dirinode_guard);
    800193d4:	28a107a3          	sb	a0,655(sp)
    800193d8:	657a                	ld	a0,408(sp)
    800193da:	759a                	ld	a1,416(sp)
    800193dc:	00004097          	auipc	ra,0x4
    800193e0:	ad6080e7          	jalr	-1322(ra) # 8001ceb2 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    800193e4:	a009                	j	800193e6 <.LBB6_77+0x94>
    800193e6:	4505                	li	a0,1
                let inode_guard = inode.lock();
    800193e8:	28a106a3          	sb	a0,653(sp)
    800193ec:	0388                	addi	a0,sp,448
    800193ee:	00002097          	auipc	ra,0x2
    800193f2:	912080e7          	jalr	-1774(ra) # 8001ad00 <_ZN6kernel2fs5inode5Inode4lock17he70970c593f751adE>
    800193f6:	ebaa                	sd	a0,464(sp)
    800193f8:	efae                	sd	a1,472(sp)
    800193fa:	a009                	j	800193fc <.LBB6_77+0xaa>
    800193fc:	0b88                	addi	a0,sp,464
                match inode_guard.dinode.itype {
    800193fe:	00004097          	auipc	ra,0x4
    80019402:	102080e7          	jalr	258(ra) # 8001d500 <_ZN92_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfc7812d7ca7ab1e1E>
    80019406:	f22a                	sd	a0,288(sp)
    80019408:	a009                	j	8001940a <.LBB6_77+0xb8>
                    InodeType::Device | InodeType::File | InodeType::FIFO => {
    8001940a:	7512                	ld	a0,288(sp)
    8001940c:	00851503          	lh	a0,8(a0)
    80019410:	1579                	addi	a0,a0,-2
    80019412:	65c1                	lui	a1,0x10
    80019414:	35fd                	addiw	a1,a1,-1
    80019416:	8d6d                	and	a0,a0,a1
    80019418:	458d                	li	a1,3
    8001941a:	00b56e63          	bltu	a0,a1,80019436 <.LBB6_79>
    8001941e:	a009                	j	80019420 <.LBB6_77+0xce>
                        return Err("create: unmatched type.")
    80019420:	6596                	ld	a1,320(sp)

0000000080019422 <.LBB6_78>:
    80019422:	00011517          	auipc	a0,0x11
    80019426:	59650513          	addi	a0,a0,1430 # 8002a9b8 <.L__unnamed_31>
    8001942a:	e588                	sd	a0,8(a1)
    8001942c:	455d                	li	a0,23
    8001942e:	e988                	sd	a0,16(a1)
    80019430:	4505                	li	a0,1
    80019432:	e188                	sd	a0,0(a1)
    80019434:	a11d                	j	8001985a <.LBB6_86+0xb8>

0000000080019436 <.LBB6_79>:
                        if itype == InodeType::File {
    80019436:	00011597          	auipc	a1,0x11
    8001943a:	59a58593          	addi	a1,a1,1434 # 8002a9d0 <.L__unnamed_32>
    8001943e:	15e10513          	addi	a0,sp,350
    80019442:	fffef097          	auipc	ra,0xfffef
    80019446:	fca080e7          	jalr	-54(ra) # 8000840c <_ZN70_$LT$kernel..fs..dinode..InodeType$u20$as$u20$core..cmp..PartialEq$GT$2eq17h96b8b60db340aeeeE>
    8001944a:	ee2a                	sd	a0,280(sp)
    8001944c:	a009                	j	8001944e <.LBB6_79+0x18>
    8001944e:	6572                	ld	a0,280(sp)
    80019450:	4581                	li	a1,0
    80019452:	00b50d63          	beq	a0,a1,8001946c <.LBB6_79+0x36>
    80019456:	a009                	j	80019458 <.LBB6_79+0x22>
    80019458:	4501                	li	a0,0
                            drop(inode_guard);
    8001945a:	28a106a3          	sb	a0,653(sp)
    8001945e:	655e                	ld	a0,464(sp)
    80019460:	65fe                	ld	a1,472(sp)
    80019462:	00004097          	auipc	ra,0x4
    80019466:	a50080e7          	jalr	-1456(ra) # 8001ceb2 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    8001946a:	a821                	j	80019482 <.LBB6_80+0x14>
                        return Err("create: unmatched type.");
    8001946c:	6596                	ld	a1,320(sp)

000000008001946e <.LBB6_80>:
    8001946e:	00011517          	auipc	a0,0x11
    80019472:	54a50513          	addi	a0,a0,1354 # 8002a9b8 <.L__unnamed_31>
    80019476:	e588                	sd	a0,8(a1)
    80019478:	455d                	li	a0,23
    8001947a:	e988                	sd	a0,16(a1)
    8001947c:	4505                	li	a0,1
    8001947e:	e188                	sd	a0,0(a1)
    80019480:	aee9                	j	8001985a <.LBB6_86+0xb8>
    80019482:	6596                	ld	a1,320(sp)
    80019484:	4501                	li	a0,0
                            return Ok(inode)
    80019486:	28a10723          	sb	a0,654(sp)
    8001948a:	66be                	ld	a3,456(sp)
    8001948c:	f7b6                	sd	a3,488(sp)
    8001948e:	661e                	ld	a2,448(sp)
    80019490:	f3b2                	sd	a2,480(sp)
    80019492:	e994                	sd	a3,16(a1)
    80019494:	e590                	sd	a2,8(a1)
    80019496:	e188                	sd	a0,0(a1)
            },
    80019498:	a6c9                	j	8001985a <.LBB6_86+0xb8>
        let dev = dirinode_guard.dev;
    8001949a:	7532                	ld	a0,296(sp)
    8001949c:	00056503          	lwu	a0,0(a0)
    800194a0:	e62a                	sd	a0,264(sp)
    800194a2:	2ca12c23          	sw	a0,728(sp)
        let inum = inode_alloc(dev, itype);
    800194a6:	15e11583          	lh	a1,350(sp)
    800194aa:	fffec097          	auipc	ra,0xfffec
    800194ae:	aee080e7          	jalr	-1298(ra) # 80004f98 <_ZN6kernel2fs6bitmap11inode_alloc17h289cf49ddd9fbbd3E>
    800194b2:	85aa                	mv	a1,a0
    800194b4:	ea2e                	sd	a1,272(sp)
    800194b6:	2ca12e23          	sw	a0,732(sp)
    800194ba:	a009                	j	800194bc <.LBB6_80+0x4e>
        let inode = self.get(dev, inum);
    800194bc:	6652                	ld	a2,272(sp)
    800194be:	65b2                	ld	a1,264(sp)
    800194c0:	7572                	ld	a0,312(sp)
    800194c2:	fffff097          	auipc	ra,0xfffff
    800194c6:	6ca080e7          	jalr	1738(ra) # 80018b8c <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E>
    800194ca:	2ea13023          	sd	a0,736(sp)
    800194ce:	2eb13423          	sd	a1,744(sp)
    800194d2:	fbaa                	sd	a0,496(sp)
    800194d4:	ffae                	sd	a1,504(sp)
    800194d6:	a009                	j	800194d8 <.LBB6_80+0x6a>
    800194d8:	1b88                	addi	a0,sp,496
        let mut inode_guard = inode.lock();
    800194da:	00002097          	auipc	ra,0x2
    800194de:	826080e7          	jalr	-2010(ra) # 8001ad00 <_ZN6kernel2fs5inode5Inode4lock17he70970c593f751adE>
    800194e2:	20a13023          	sd	a0,512(sp)
    800194e6:	20b13423          	sd	a1,520(sp)
    800194ea:	a009                	j	800194ec <.LBB6_80+0x7e>
    800194ec:	0408                	addi	a0,sp,512
        inode_guard.dinode.major = major;
    800194ee:	00004097          	auipc	ra,0x4
    800194f2:	026080e7          	jalr	38(ra) # 8001d514 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    800194f6:	e22a                	sd	a0,256(sp)
    800194f8:	a009                	j	800194fa <.LBB6_80+0x8c>
    800194fa:	6556                	ld	a0,336(sp)
    800194fc:	6592                	ld	a1,256(sp)
    800194fe:	00a59523          	sh	a0,10(a1)
    80019502:	0408                	addi	a0,sp,512
        inode_guard.dinode.minor = minor;
    80019504:	00004097          	auipc	ra,0x4
    80019508:	010080e7          	jalr	16(ra) # 8001d514 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    8001950c:	fdaa                	sd	a0,248(sp)
    8001950e:	a009                	j	80019510 <.LBB6_80+0xa2>
    80019510:	6536                	ld	a0,328(sp)
    80019512:	75ee                	ld	a1,248(sp)
    80019514:	00a59623          	sh	a0,12(a1)
    80019518:	0408                	addi	a0,sp,512
        inode_guard.dinode.nlink = 1;
    8001951a:	00004097          	auipc	ra,0x4
    8001951e:	ffa080e7          	jalr	-6(ra) # 8001d514 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    80019522:	f9aa                	sd	a0,240(sp)
    80019524:	a009                	j	80019526 <.LBB6_80+0xb8>
    80019526:	75ce                	ld	a1,240(sp)
    80019528:	4505                	li	a0,1
    8001952a:	00a59723          	sh	a0,14(a1)
    8001952e:	0408                	addi	a0,sp,512
        inode_guard.update();
    80019530:	00004097          	auipc	ra,0x4
    80019534:	fe4080e7          	jalr	-28(ra) # 8001d514 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    80019538:	f5aa                	sd	a0,232(sp)
    8001953a:	a009                	j	8001953c <.LBB6_80+0xce>
    8001953c:	752e                	ld	a0,232(sp)
    8001953e:	00001097          	auipc	ra,0x1
    80019542:	856080e7          	jalr	-1962(ra) # 80019d94 <_ZN6kernel2fs5inode9InodeData6update17h81f49ab31d0ddfdcE>
    80019546:	a009                	j	80019548 <.LBB6_80+0xda>
    80019548:	0408                	addi	a0,sp,512
        debug_assert_eq!(inode_guard.dinode.itype, itype);
    8001954a:	00004097          	auipc	ra,0x4
    8001954e:	fb6080e7          	jalr	-74(ra) # 8001d500 <_ZN92_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfc7812d7ca7ab1e1E>
    80019552:	f1aa                	sd	a0,224(sp)
    80019554:	a009                	j	80019556 <.LBB6_80+0xe8>
    80019556:	750e                	ld	a0,224(sp)
    80019558:	0521                	addi	a0,a0,8
    8001955a:	e5aa                	sd	a0,200(sp)
    8001955c:	20a13823          	sd	a0,528(sp)
    80019560:	15e10593          	addi	a1,sp,350
    80019564:	e9ae                	sd	a1,208(sp)
    80019566:	20b13c23          	sd	a1,536(sp)
    8001956a:	2ea13c23          	sd	a0,760(sp)
    8001956e:	30b13023          	sd	a1,768(sp)
    80019572:	fffef097          	auipc	ra,0xfffef
    80019576:	e9a080e7          	jalr	-358(ra) # 8000840c <_ZN70_$LT$kernel..fs..dinode..InodeType$u20$as$u20$core..cmp..PartialEq$GT$2eq17h96b8b60db340aeeeE>
    8001957a:	edaa                	sd	a0,216(sp)
    8001957c:	a009                	j	8001957e <.LBB6_80+0x110>
    8001957e:	656e                	ld	a0,216(sp)
    80019580:	e11d                	bnez	a0,800195a6 <.LBB6_82>
    80019582:	a009                	j	80019584 <.LBB6_80+0x116>
    80019584:	664e                	ld	a2,208(sp)
    80019586:	65ae                	ld	a1,200(sp)
    80019588:	4501                	li	a0,0
    8001958a:	22a103a3          	sb	a0,551(sp)
    8001958e:	22a13423          	sd	a0,552(sp)

0000000080019592 <.LBB6_81>:
    80019592:	00011717          	auipc	a4,0x11
    80019596:	44670713          	addi	a4,a4,1094 # 8002a9d8 <.L__unnamed_33>
    8001959a:	1434                	addi	a3,sp,552
    8001959c:	fffe9097          	auipc	ra,0xfffe9
    800195a0:	0d8080e7          	jalr	216(ra) # 80002674 <_ZN4core9panicking13assert_failed17hb31c8c2a34dfd8a3E>
	...

00000000800195a6 <.LBB6_82>:
        if itype == InodeType::Directory {
    800195a6:	00011597          	auipc	a1,0x11
    800195aa:	39258593          	addi	a1,a1,914 # 8002a938 <.L__unnamed_25>
    800195ae:	15e10513          	addi	a0,sp,350
    800195b2:	fffef097          	auipc	ra,0xfffef
    800195b6:	e5a080e7          	jalr	-422(ra) # 8000840c <_ZN70_$LT$kernel..fs..dinode..InodeType$u20$as$u20$core..cmp..PartialEq$GT$2eq17h96b8b60db340aeeeE>
    800195ba:	e1aa                	sd	a0,192(sp)
    800195bc:	a009                	j	800195be <.LBB6_82+0x18>
    800195be:	650e                	ld	a0,192(sp)
    800195c0:	4581                	li	a1,0
    800195c2:	00b50a63          	beq	a0,a1,800195d6 <.LBB6_82+0x30>
    800195c6:	a009                	j	800195c8 <.LBB6_82+0x22>
    800195c8:	0408                	addi	a0,sp,512
            inode_guard.dinode.nlink += 1;
    800195ca:	00004097          	auipc	ra,0x4
    800195ce:	f4a080e7          	jalr	-182(ra) # 8001d514 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    800195d2:	fd2a                	sd	a0,184(sp)
    800195d4:	a011                	j	800195d8 <.LBB6_82+0x32>
        if itype == InodeType::Directory {
    800195d6:	a261                	j	8001975e <.LBB6_84+0xa0>
            inode_guard.dinode.nlink += 1;
    800195d8:	756a                	ld	a0,184(sp)
    800195da:	00e51503          	lh	a0,14(a0)
    800195de:	00150593          	addi	a1,a0,1
    800195e2:	f92e                	sd	a1,176(sp)
    800195e4:	03059513          	slli	a0,a1,0x30
    800195e8:	9541                	srai	a0,a0,0x30
    800195ea:	28b51e63          	bne	a0,a1,80019886 <.LBB6_87>
    800195ee:	a009                	j	800195f0 <.LBB6_82+0x4a>
    800195f0:	754a                	ld	a0,176(sp)
    800195f2:	75ea                	ld	a1,184(sp)
    800195f4:	00a59723          	sh	a0,14(a1)
    800195f8:	0408                	addi	a0,sp,512
            inode_guard.update();
    800195fa:	00004097          	auipc	ra,0x4
    800195fe:	f1a080e7          	jalr	-230(ra) # 8001d514 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    80019602:	f52a                	sd	a0,168(sp)
    80019604:	a009                	j	80019606 <.LBB6_82+0x60>
    80019606:	752a                	ld	a0,168(sp)
    80019608:	00000097          	auipc	ra,0x0
    8001960c:	78c080e7          	jalr	1932(ra) # 80019d94 <_ZN6kernel2fs5inode9InodeData6update17h81f49ab31d0ddfdcE>
    80019610:	a009                	j	80019612 <.LBB6_82+0x6c>
    80019612:	0408                	addi	a0,sp,512
            inode_guard.dir_link(".".as_bytes(), inode.inum)?;
    80019614:	00004097          	auipc	ra,0x4
    80019618:	f00080e7          	jalr	-256(ra) # 8001d514 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    8001961c:	f12a                	sd	a0,160(sp)
    8001961e:	a009                	j	80019620 <.LBB6_83>

0000000080019620 <.LBB6_83>:
    80019620:	00011597          	auipc	a1,0x11
    80019624:	3e858593          	addi	a1,a1,1000 # 8002aa08 <.L__unnamed_34>
    80019628:	e92e                	sd	a1,144(sp)
    8001962a:	32b13423          	sd	a1,808(sp)
    8001962e:	4505                	li	a0,1
    80019630:	ed2a                	sd	a0,152(sp)
    80019632:	32a13823          	sd	a0,816(sp)
        unsafe { mem::transmute(self) }
    80019636:	32b13c23          	sd	a1,824(sp)
    8001963a:	34a13023          	sd	a0,832(sp)
    8001963e:	a009                	j	80019640 <.LBB6_83+0x20>
    80019640:	666a                	ld	a2,152(sp)
    80019642:	65ca                	ld	a1,144(sp)
    80019644:	750a                	ld	a0,160(sp)
    80019646:	1fc12683          	lw	a3,508(sp)
    8001964a:	00001097          	auipc	ra,0x1
    8001964e:	2f6080e7          	jalr	758(ra) # 8001a940 <_ZN6kernel2fs5inode9InodeData8dir_link17h13a19ea2d651643eE>
    80019652:	e12a                	sd	a0,128(sp)
    80019654:	e52e                	sd	a1,136(sp)
    80019656:	a009                	j	80019658 <.LBB6_83+0x38>
    80019658:	65aa                	ld	a1,136(sp)
    8001965a:	650a                	ld	a0,128(sp)
    8001965c:	ffff4097          	auipc	ra,0xffff4
    80019660:	b02080e7          	jalr	-1278(ra) # 8000d15e <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hb12176fc822fec8fE>
    80019664:	24a13c23          	sd	a0,600(sp)
    80019668:	26b13023          	sd	a1,608(sp)
    8001966c:	a009                	j	8001966e <.LBB6_83+0x4e>
    8001966e:	25813503          	ld	a0,600(sp)
    80019672:	00a035b3          	snez	a1,a0
    80019676:	4581                	li	a1,0
    80019678:	00b50463          	beq	a0,a1,80019680 <.LBB6_83+0x60>
    8001967c:	a009                	j	8001967e <.LBB6_83+0x5e>
    8001967e:	a809                	j	80019690 <.LBB6_83+0x70>
    80019680:	0408                	addi	a0,sp,512
            inode_guard.dir_link("..".as_bytes(), dirinode_guard.inum)?;
    80019682:	00004097          	auipc	ra,0x4
    80019686:	e92080e7          	jalr	-366(ra) # 8001d514 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    8001968a:	fcaa                	sd	a0,120(sp)
    8001968c:	a80d                	j	800196be <.LBB6_84>
            inode_guard.dir_link(".".as_bytes(), inode.inum)?;
    8001968e:	0000                	unimp
    80019690:	25813503          	ld	a0,600(sp)
    80019694:	26013583          	ld	a1,608(sp)
    80019698:	30a13423          	sd	a0,776(sp)
    8001969c:	30b13823          	sd	a1,784(sp)
    800196a0:	ffff2097          	auipc	ra,0xffff2
    800196a4:	324080e7          	jalr	804(ra) # 8000b9c4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h6f3e3843c20d184aE>
    800196a8:	f4aa                	sd	a0,104(sp)
    800196aa:	f8ae                	sd	a1,112(sp)
    800196ac:	a009                	j	800196ae <.LBB6_83+0x8e>
    800196ae:	7646                	ld	a2,112(sp)
    800196b0:	75a6                	ld	a1,104(sp)
    800196b2:	6516                	ld	a0,320(sp)
    800196b4:	ffff4097          	auipc	ra,0xffff4
    800196b8:	9e0080e7          	jalr	-1568(ra) # 8000d094 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17haeaec5be2c31cee9E>
    800196bc:	a299                	j	80019802 <.LBB6_86+0x60>

00000000800196be <.LBB6_84>:
    800196be:	00011597          	auipc	a1,0x11
    800196c2:	34b58593          	addi	a1,a1,843 # 8002aa09 <.L__unnamed_35>
    800196c6:	ecae                	sd	a1,88(sp)
    800196c8:	34b13423          	sd	a1,840(sp)
    800196cc:	4509                	li	a0,2
    800196ce:	f0aa                	sd	a0,96(sp)
    800196d0:	34a13823          	sd	a0,848(sp)
    800196d4:	34b13c23          	sd	a1,856(sp)
    800196d8:	36a13023          	sd	a0,864(sp)
            inode_guard.dir_link("..".as_bytes(), dirinode_guard.inum)?;
    800196dc:	a009                	j	800196de <.LBB6_84+0x20>
    800196de:	0b28                	addi	a0,sp,408
    800196e0:	00004097          	auipc	ra,0x4
    800196e4:	e20080e7          	jalr	-480(ra) # 8001d500 <_ZN92_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfc7812d7ca7ab1e1E>
    800196e8:	e8aa                	sd	a0,80(sp)
    800196ea:	a009                	j	800196ec <.LBB6_84+0x2e>
    800196ec:	7606                	ld	a2,96(sp)
    800196ee:	65e6                	ld	a1,88(sp)
    800196f0:	7566                	ld	a0,120(sp)
    800196f2:	66c6                	ld	a3,80(sp)
    800196f4:	42d4                	lw	a3,4(a3)
    800196f6:	00001097          	auipc	ra,0x1
    800196fa:	24a080e7          	jalr	586(ra) # 8001a940 <_ZN6kernel2fs5inode9InodeData8dir_link17h13a19ea2d651643eE>
    800196fe:	e0aa                	sd	a0,64(sp)
    80019700:	e4ae                	sd	a1,72(sp)
    80019702:	a009                	j	80019704 <.LBB6_84+0x46>
    80019704:	65a6                	ld	a1,72(sp)
    80019706:	6506                	ld	a0,64(sp)
    80019708:	ffff4097          	auipc	ra,0xffff4
    8001970c:	a56080e7          	jalr	-1450(ra) # 8000d15e <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hb12176fc822fec8fE>
    80019710:	26a13423          	sd	a0,616(sp)
    80019714:	26b13823          	sd	a1,624(sp)
    80019718:	a009                	j	8001971a <.LBB6_84+0x5c>
    8001971a:	26813503          	ld	a0,616(sp)
    8001971e:	00a035b3          	snez	a1,a0
    80019722:	4581                	li	a1,0
    80019724:	00b50463          	beq	a0,a1,8001972c <.LBB6_84+0x6e>
    80019728:	a009                	j	8001972a <.LBB6_84+0x6c>
    8001972a:	a019                	j	80019730 <.LBB6_84+0x72>
        if itype == InodeType::Directory {
    8001972c:	a80d                	j	8001975e <.LBB6_84+0xa0>
            inode_guard.dir_link("..".as_bytes(), dirinode_guard.inum)?;
    8001972e:	0000                	unimp
    80019730:	26813503          	ld	a0,616(sp)
    80019734:	27013583          	ld	a1,624(sp)
    80019738:	30a13c23          	sd	a0,792(sp)
    8001973c:	32b13023          	sd	a1,800(sp)
    80019740:	ffff2097          	auipc	ra,0xffff2
    80019744:	284080e7          	jalr	644(ra) # 8000b9c4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h6f3e3843c20d184aE>
    80019748:	f82a                	sd	a0,48(sp)
    8001974a:	fc2e                	sd	a1,56(sp)
    8001974c:	a009                	j	8001974e <.LBB6_84+0x90>
    8001974e:	7662                	ld	a2,56(sp)
    80019750:	75c2                	ld	a1,48(sp)
    80019752:	6516                	ld	a0,320(sp)
    80019754:	ffff4097          	auipc	ra,0xffff4
    80019758:	940080e7          	jalr	-1728(ra) # 8000d094 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17haeaec5be2c31cee9E>
    8001975c:	a05d                	j	80019802 <.LBB6_86+0x60>
    8001975e:	0b28                	addi	a0,sp,408
        dirinode_guard
    80019760:	00004097          	auipc	ra,0x4
    80019764:	db4080e7          	jalr	-588(ra) # 8001d514 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    80019768:	f42a                	sd	a0,40(sp)
    8001976a:	a009                	j	8001976c <.LBB6_84+0xae>
    8001976c:	1288                	addi	a0,sp,352
            .dir_link(&name, inode_guard.inum)
    8001976e:	ec2a                	sd	a0,24(sp)
    80019770:	0408                	addi	a0,sp,512
    80019772:	00004097          	auipc	ra,0x4
    80019776:	d8e080e7          	jalr	-626(ra) # 8001d500 <_ZN92_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfc7812d7ca7ab1e1E>
    8001977a:	f02a                	sd	a0,32(sp)
    8001977c:	a009                	j	8001977e <.LBB6_84+0xc0>
        dirinode_guard
    8001977e:	65e2                	ld	a1,24(sp)
    80019780:	7522                	ld	a0,40(sp)
    80019782:	7602                	ld	a2,32(sp)
    80019784:	4254                	lw	a3,4(a2)
    80019786:	4639                	li	a2,14
    80019788:	00001097          	auipc	ra,0x1
    8001978c:	1b8080e7          	jalr	440(ra) # 8001a940 <_ZN6kernel2fs5inode9InodeData8dir_link17h13a19ea2d651643eE>
    80019790:	e42a                	sd	a0,8(sp)
    80019792:	e82e                	sd	a1,16(sp)
    80019794:	a009                	j	80019796 <.LBB6_84+0xd8>
    80019796:	65c2                	ld	a1,16(sp)
    80019798:	6522                	ld	a0,8(sp)

000000008001979a <.LBB6_85>:
    8001979a:	00011617          	auipc	a2,0x11
    8001979e:	27160613          	addi	a2,a2,625 # 8002aa0b <.L__unnamed_36>

00000000800197a2 <.LBB6_86>:
    800197a2:	00011717          	auipc	a4,0x11
    800197a6:	28670713          	addi	a4,a4,646 # 8002aa28 <.L__unnamed_37>
    800197aa:	46e5                	li	a3,25
    800197ac:	ffff3097          	auipc	ra,0xffff3
    800197b0:	47e080e7          	jalr	1150(ra) # 8000cc2a <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h7db20d4970bed50aE>
    800197b4:	a009                	j	800197b6 <.LBB6_86+0x14>
        drop(inode_guard);
    800197b6:	20013503          	ld	a0,512(sp)
    800197ba:	20813583          	ld	a1,520(sp)
    800197be:	00003097          	auipc	ra,0x3
    800197c2:	6f4080e7          	jalr	1780(ra) # 8001ceb2 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    800197c6:	a009                	j	800197c8 <.LBB6_86+0x26>
    800197c8:	4501                	li	a0,0
        drop(dirinode_guard);
    800197ca:	28a107a3          	sb	a0,655(sp)
    800197ce:	657a                	ld	a0,408(sp)
    800197d0:	759a                	ld	a1,416(sp)
    800197d2:	00003097          	auipc	ra,0x3
    800197d6:	6e0080e7          	jalr	1760(ra) # 8001ceb2 <_ZN4core3mem4drop17h3f96085e4daee3c2E>
    800197da:	a009                	j	800197dc <.LBB6_86+0x3a>
        Ok(inode)
    800197dc:	6596                	ld	a1,320(sp)
    800197de:	767e                	ld	a2,504(sp)
    800197e0:	28c13023          	sd	a2,640(sp)
    800197e4:	755e                	ld	a0,496(sp)
    800197e6:	26a13c23          	sd	a0,632(sp)
    800197ea:	e990                	sd	a2,16(a1)
    800197ec:	e588                	sd	a0,8(a1)
    800197ee:	4501                	li	a0,0
    800197f0:	e188                	sd	a0,0(a1)
    }
    800197f2:	28a107a3          	sb	a0,655(sp)
    800197f6:	1a88                	addi	a0,sp,368
    800197f8:	fffed097          	auipc	ra,0xfffed
    800197fc:	6e2080e7          	jalr	1762(ra) # 80006eda <_ZN4core3ptr45drop_in_place$LT$kernel..fs..inode..Inode$GT$17h8786fe1a2a287832E>
    80019800:	a091                	j	80019844 <.LBB6_86+0xa2>
    80019802:	0408                	addi	a0,sp,512
    80019804:	fffee097          	auipc	ra,0xfffee
    80019808:	8aa080e7          	jalr	-1878(ra) # 800070ae <_ZN4core3ptr96drop_in_place$LT$kernel..lock..sleeplock..SleepLockGuard$LT$kernel..fs..inode..InodeData$GT$$GT$17h00d5c02cf687ef41E>
    8001980c:	a009                	j	8001980e <.LBB6_86+0x6c>
    8001980e:	1b88                	addi	a0,sp,496
    80019810:	fffed097          	auipc	ra,0xfffed
    80019814:	6ca080e7          	jalr	1738(ra) # 80006eda <_ZN4core3ptr45drop_in_place$LT$kernel..fs..inode..Inode$GT$17h8786fe1a2a287832E>
    80019818:	a095                	j	8001987c <.LBB6_86+0xda>
    8001981a:	4501                	li	a0,0
            },
    8001981c:	28a106a3          	sb	a0,653(sp)
    80019820:	28e14503          	lbu	a0,654(sp)
    80019824:	8905                	andi	a0,a0,1
    80019826:	ed1d                	bnez	a0,80019864 <.LBB6_86+0xc2>
    80019828:	a009                	j	8001982a <.LBB6_86+0x88>
    8001982a:	4501                	li	a0,0
    8001982c:	28a10723          	sb	a0,654(sp)
    80019830:	a0b1                	j	8001987c <.LBB6_86+0xda>
    80019832:	4501                	li	a0,0
    }
    80019834:	28a107a3          	sb	a0,655(sp)
    80019838:	1a88                	addi	a0,sp,368
    8001983a:	fffed097          	auipc	ra,0xfffed
    8001983e:	6a0080e7          	jalr	1696(ra) # 80006eda <_ZN4core3ptr45drop_in_place$LT$kernel..fs..inode..Inode$GT$17h8786fe1a2a287832E>
    80019842:	a009                	j	80019844 <.LBB6_86+0xa2>
    80019844:	36813083          	ld	ra,872(sp)
    80019848:	37010113          	addi	sp,sp,880
    8001984c:	8082                	ret
    8001984e:	0b88                	addi	a0,sp,464
            },
    80019850:	fffee097          	auipc	ra,0xfffee
    80019854:	85e080e7          	jalr	-1954(ra) # 800070ae <_ZN4core3ptr96drop_in_place$LT$kernel..lock..sleeplock..SleepLockGuard$LT$kernel..fs..inode..InodeData$GT$$GT$17h00d5c02cf687ef41E>
    80019858:	b7c9                	j	8001981a <.LBB6_86+0x78>
    8001985a:	28d14503          	lbu	a0,653(sp)
    8001985e:	8905                	andi	a0,a0,1
    80019860:	f57d                	bnez	a0,8001984e <.LBB6_86+0xac>
    80019862:	bf65                	j	8001981a <.LBB6_86+0x78>
    80019864:	0388                	addi	a0,sp,448
    80019866:	fffed097          	auipc	ra,0xfffed
    8001986a:	674080e7          	jalr	1652(ra) # 80006eda <_ZN4core3ptr45drop_in_place$LT$kernel..fs..inode..Inode$GT$17h8786fe1a2a287832E>
    8001986e:	bf75                	j	8001982a <.LBB6_86+0x88>
    80019870:	0b28                	addi	a0,sp,408
    }
    80019872:	fffee097          	auipc	ra,0xfffee
    80019876:	83c080e7          	jalr	-1988(ra) # 800070ae <_ZN4core3ptr96drop_in_place$LT$kernel..lock..sleeplock..SleepLockGuard$LT$kernel..fs..inode..InodeData$GT$$GT$17h00d5c02cf687ef41E>
    8001987a:	bf65                	j	80019832 <.LBB6_86+0x90>
    8001987c:	28f14503          	lbu	a0,655(sp)
    80019880:	8905                	andi	a0,a0,1
    80019882:	f57d                	bnez	a0,80019870 <.LBB6_86+0xce>
    80019884:	b77d                	j	80019832 <.LBB6_86+0x90>

0000000080019886 <.LBB6_87>:
            inode_guard.dinode.nlink += 1;
    80019886:	00011517          	auipc	a0,0x11
    8001988a:	e3a50513          	addi	a0,a0,-454 # 8002a6c0 <str.0>

000000008001988e <.LBB6_88>:
    8001988e:	00011617          	auipc	a2,0x11
    80019892:	16260613          	addi	a2,a2,354 # 8002a9f0 <.L__unnamed_38>
    80019896:	45f1                	li	a1,28
    80019898:	00009097          	auipc	ra,0x9
    8001989c:	864080e7          	jalr	-1948(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel2fs5inode9skip_path17h45b5cf4cf2eb7faeE:

00000000800198a2 <_ZN6kernel2fs5inode9skip_path17h45b5cf4cf2eb7faeE>:
fn skip_path(
    800198a2:	7155                	addi	sp,sp,-208
    800198a4:	e586                	sd	ra,200(sp)
    800198a6:	f8b6                	sd	a3,112(sp)
    800198a8:	fcae                	sd	a1,120(sp)
    800198aa:	e12a                	sd	a0,128(sp)
    800198ac:	e532                	sd	a2,136(sp)
    800198ae:	f12a                	sd	a0,160(sp)
    800198b0:	f52e                	sd	a1,168(sp)
    800198b2:	f936                	sd	a3,176(sp)
    800198b4:	a009                	j	800198b6 <_ZN6kernel2fs5inode9skip_path17h45b5cf4cf2eb7faeE+0x14>
    while path[cur] == b'/' {
    800198b6:	75e6                	ld	a1,120(sp)
    800198b8:	652a                	ld	a0,136(sp)
    800198ba:	f4aa                	sd	a0,104(sp)
    800198bc:	1ab57563          	bgeu	a0,a1,80019a66 <.LBB7_45+0xae>
    800198c0:	a009                	j	800198c2 <_ZN6kernel2fs5inode9skip_path17h45b5cf4cf2eb7faeE+0x20>
    800198c2:	650a                	ld	a0,128(sp)
    800198c4:	75a6                	ld	a1,104(sp)
    800198c6:	952e                	add	a0,a0,a1
    800198c8:	00054503          	lbu	a0,0(a0)
    800198cc:	02f00593          	li	a1,47
    800198d0:	00b50963          	beq	a0,a1,800198e2 <_ZN6kernel2fs5inode9skip_path17h45b5cf4cf2eb7faeE+0x40>
    800198d4:	a009                	j	800198d6 <_ZN6kernel2fs5inode9skip_path17h45b5cf4cf2eb7faeE+0x34>
    if path[cur] == 0 {
    800198d6:	75e6                	ld	a1,120(sp)
    800198d8:	652a                	ld	a0,136(sp)
    800198da:	f0aa                	sd	a0,96(sp)
    800198dc:	00b56d63          	bltu	a0,a1,800198f6 <_ZN6kernel2fs5inode9skip_path17h45b5cf4cf2eb7faeE+0x54>
    800198e0:	aa71                	j	80019a7c <.LBB7_46+0x12>
        cur += 1;
    800198e2:	65aa                	ld	a1,136(sp)
    800198e4:	00158513          	addi	a0,a1,1
    800198e8:	ecaa                	sd	a0,88(sp)
    800198ea:	24b56b63          	bltu	a0,a1,80019b40 <.LBB7_58>
    800198ee:	a009                	j	800198f0 <_ZN6kernel2fs5inode9skip_path17h45b5cf4cf2eb7faeE+0x4e>
    800198f0:	6566                	ld	a0,88(sp)
    800198f2:	e52a                	sd	a0,136(sp)
    while path[cur] == b'/' {
    800198f4:	b7c9                	j	800198b6 <_ZN6kernel2fs5inode9skip_path17h45b5cf4cf2eb7faeE+0x14>
    if path[cur] == 0 {
    800198f6:	650a                	ld	a0,128(sp)
    800198f8:	7586                	ld	a1,96(sp)
    800198fa:	952e                	add	a0,a0,a1
    800198fc:	00054503          	lbu	a0,0(a0)
    80019900:	4581                	li	a1,0
    80019902:	00b51663          	bne	a0,a1,8001990e <_ZN6kernel2fs5inode9skip_path17h45b5cf4cf2eb7faeE+0x6c>
    80019906:	a009                	j	80019908 <_ZN6kernel2fs5inode9skip_path17h45b5cf4cf2eb7faeE+0x66>
    80019908:	4501                	li	a0,0
        return 0
    8001990a:	e92a                	sd	a0,144(sp)
}
    8001990c:	aa89                	j	80019a5e <.LBB7_45+0xa6>
    let start = cur;
    8001990e:	652a                	ld	a0,136(sp)
    80019910:	e8aa                	sd	a0,80(sp)
    80019912:	fd2a                	sd	a0,184(sp)
    while path[cur] != b'/' && path[cur] != 0 {
    80019914:	a009                	j	80019916 <_ZN6kernel2fs5inode9skip_path17h45b5cf4cf2eb7faeE+0x74>
    80019916:	75e6                	ld	a1,120(sp)
    80019918:	652a                	ld	a0,136(sp)
    8001991a:	e4aa                	sd	a0,72(sp)
    8001991c:	02b56663          	bltu	a0,a1,80019948 <_ZN6kernel2fs5inode9skip_path17h45b5cf4cf2eb7faeE+0xa6>
    80019920:	aa8d                	j	80019a92 <.LBB7_47+0x12>
    80019922:	4505                	li	a0,1
    80019924:	08a10fa3          	sb	a0,159(sp)
    80019928:	a819                	j	8001993e <_ZN6kernel2fs5inode9skip_path17h45b5cf4cf2eb7faeE+0x9c>
    8001992a:	4501                	li	a0,0
    8001992c:	08a10fa3          	sb	a0,159(sp)
    80019930:	a039                	j	8001993e <_ZN6kernel2fs5inode9skip_path17h45b5cf4cf2eb7faeE+0x9c>
    80019932:	75e6                	ld	a1,120(sp)
    80019934:	652a                	ld	a0,136(sp)
    80019936:	e0aa                	sd	a0,64(sp)
    80019938:	02b56263          	bltu	a0,a1,8001995c <_ZN6kernel2fs5inode9skip_path17h45b5cf4cf2eb7faeE+0xba>
    8001993c:	a2b5                	j	80019aa8 <.LBB7_48+0x12>
    8001993e:	09f14503          	lbu	a0,159(sp)
    80019942:	8905                	andi	a0,a0,1
    80019944:	ed0d                	bnez	a0,8001997e <_ZN6kernel2fs5inode9skip_path17h45b5cf4cf2eb7faeE+0xdc>
    80019946:	a025                	j	8001996e <_ZN6kernel2fs5inode9skip_path17h45b5cf4cf2eb7faeE+0xcc>
    80019948:	650a                	ld	a0,128(sp)
    8001994a:	65a6                	ld	a1,72(sp)
    8001994c:	952e                	add	a0,a0,a1
    8001994e:	00054503          	lbu	a0,0(a0)
    80019952:	02f00593          	li	a1,47
    80019956:	fcb50ae3          	beq	a0,a1,8001992a <_ZN6kernel2fs5inode9skip_path17h45b5cf4cf2eb7faeE+0x88>
    8001995a:	bfe1                	j	80019932 <_ZN6kernel2fs5inode9skip_path17h45b5cf4cf2eb7faeE+0x90>
    8001995c:	650a                	ld	a0,128(sp)
    8001995e:	6586                	ld	a1,64(sp)
    80019960:	952e                	add	a0,a0,a1
    80019962:	00054503          	lbu	a0,0(a0)
    80019966:	4581                	li	a1,0
    80019968:	fcb501e3          	beq	a0,a1,8001992a <_ZN6kernel2fs5inode9skip_path17h45b5cf4cf2eb7faeE+0x88>
    8001996c:	bf5d                	j	80019922 <_ZN6kernel2fs5inode9skip_path17h45b5cf4cf2eb7faeE+0x80>
    let mut count = cur - start; 
    8001996e:	65c6                	ld	a1,80(sp)
    80019970:	652a                	ld	a0,136(sp)
    80019972:	40b505b3          	sub	a1,a0,a1
    80019976:	fc2e                	sd	a1,56(sp)
    80019978:	16b56163          	bltu	a0,a1,80019ada <.LBB7_52>
    8001997c:	a819                	j	80019992 <_ZN6kernel2fs5inode9skip_path17h45b5cf4cf2eb7faeE+0xf0>
        cur += 1;
    8001997e:	65aa                	ld	a1,136(sp)
    80019980:	00158513          	addi	a0,a1,1
    80019984:	f82a                	sd	a0,48(sp)
    80019986:	12b56c63          	bltu	a0,a1,80019abe <.LBB7_50>
    8001998a:	a009                	j	8001998c <_ZN6kernel2fs5inode9skip_path17h45b5cf4cf2eb7faeE+0xea>
    8001998c:	7542                	ld	a0,48(sp)
    8001998e:	e52a                	sd	a0,136(sp)
    while path[cur] != b'/' && path[cur] != 0 {
    80019990:	b759                	j	80019916 <_ZN6kernel2fs5inode9skip_path17h45b5cf4cf2eb7faeE+0x74>
    let mut count = cur - start; 
    80019992:	7546                	ld	a0,112(sp)
    80019994:	75e2                	ld	a1,56(sp)
    80019996:	e1ae                	sd	a1,192(sp)
    80019998:	45b9                	li	a1,14
    if count >= name.len() {
    8001999a:	00006097          	auipc	ra,0x6
    8001999e:	ac0080e7          	jalr	-1344(ra) # 8001f45a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hb06ce83b043493f3E>
    800199a2:	f42a                	sd	a0,40(sp)
    800199a4:	a009                	j	800199a6 <_ZN6kernel2fs5inode9skip_path17h45b5cf4cf2eb7faeE+0x104>
    800199a6:	7562                	ld	a0,56(sp)
    800199a8:	75a2                	ld	a1,40(sp)
    800199aa:	02b56163          	bltu	a0,a1,800199cc <.LBB7_45+0x14>
    800199ae:	a009                	j	800199b0 <.LBB7_44>

00000000800199b0 <.LBB7_44>:
        debug_assert!(false);
    800199b0:	00011517          	auipc	a0,0x11
    800199b4:	12050513          	addi	a0,a0,288 # 8002aad0 <.L__unnamed_39>

00000000800199b8 <.LBB7_45>:
    800199b8:	00011617          	auipc	a2,0x11
    800199bc:	13060613          	addi	a2,a2,304 # 8002aae8 <.L__unnamed_40>
    800199c0:	45dd                	li	a1,23
    800199c2:	00008097          	auipc	ra,0x8
    800199c6:	73a080e7          	jalr	1850(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    800199ca:	0000                	unimp
        ptr::copy(path.as_ptr().offset(start as isize), name.as_mut_ptr(), count);
    800199cc:	75e6                	ld	a1,120(sp)
    800199ce:	650a                	ld	a0,128(sp)
    800199d0:	00006097          	auipc	ra,0x6
    800199d4:	ae6080e7          	jalr	-1306(ra) # 8001f4b6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hf7620495824cfb20E>
    800199d8:	f02a                	sd	a0,32(sp)
    800199da:	a009                	j	800199dc <.LBB7_45+0x24>
    800199dc:	65c6                	ld	a1,80(sp)
    800199de:	7502                	ld	a0,32(sp)
    800199e0:	00006097          	auipc	ra,0x6
    800199e4:	ce2080e7          	jalr	-798(ra) # 8001f6c2 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d562998c5c34b1bE>
    800199e8:	ec2a                	sd	a0,24(sp)
    800199ea:	a009                	j	800199ec <.LBB7_45+0x34>
    800199ec:	7546                	ld	a0,112(sp)
    800199ee:	45b9                	li	a1,14
    800199f0:	00006097          	auipc	ra,0x6
    800199f4:	a24080e7          	jalr	-1500(ra) # 8001f414 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h69a6648c691317bcE>
    800199f8:	e82a                	sd	a0,16(sp)
    800199fa:	a009                	j	800199fc <.LBB7_45+0x44>
    800199fc:	7662                	ld	a2,56(sp)
    800199fe:	65e2                	ld	a1,24(sp)
    80019a00:	6542                	ld	a0,16(sp)
    80019a02:	0000b097          	auipc	ra,0xb
    80019a06:	64e080e7          	jalr	1614(ra) # 80025050 <memmove>
    80019a0a:	a009                	j	80019a0c <.LBB7_45+0x54>
    80019a0c:	75e2                	ld	a1,56(sp)
    80019a0e:	4535                	li	a0,13
    name[count] = 0;
    80019a10:	0eb56463          	bltu	a0,a1,80019af8 <.LBB7_53+0x16>
    80019a14:	a009                	j	80019a16 <.LBB7_45+0x5e>
    80019a16:	7546                	ld	a0,112(sp)
    80019a18:	75e2                	ld	a1,56(sp)
    80019a1a:	95aa                	add	a1,a1,a0
    80019a1c:	4501                	li	a0,0
    80019a1e:	00a58023          	sb	a0,0(a1)
    while path[cur] == b'/' {
    80019a22:	a009                	j	80019a24 <.LBB7_45+0x6c>
    80019a24:	75e6                	ld	a1,120(sp)
    80019a26:	652a                	ld	a0,136(sp)
    80019a28:	e42a                	sd	a0,8(sp)
    80019a2a:	0eb57263          	bgeu	a0,a1,80019b0e <.LBB7_54+0x14>
    80019a2e:	a009                	j	80019a30 <.LBB7_45+0x78>
    80019a30:	650a                	ld	a0,128(sp)
    80019a32:	65a2                	ld	a1,8(sp)
    80019a34:	952e                	add	a0,a0,a1
    80019a36:	00054503          	lbu	a0,0(a0)
    80019a3a:	02f00593          	li	a1,47
    80019a3e:	00b50663          	beq	a0,a1,80019a4a <.LBB7_45+0x92>
    80019a42:	a009                	j	80019a44 <.LBB7_45+0x8c>
    cur
    80019a44:	652a                	ld	a0,136(sp)
    80019a46:	e92a                	sd	a0,144(sp)
}
    80019a48:	a819                	j	80019a5e <.LBB7_45+0xa6>
        cur += 1;
    80019a4a:	65aa                	ld	a1,136(sp)
    80019a4c:	00158513          	addi	a0,a1,1
    80019a50:	e02a                	sd	a0,0(sp)
    80019a52:	0cb56963          	bltu	a0,a1,80019b24 <.LBB7_56>
    80019a56:	a009                	j	80019a58 <.LBB7_45+0xa0>
    80019a58:	6502                	ld	a0,0(sp)
    80019a5a:	e52a                	sd	a0,136(sp)
    while path[cur] == b'/' {
    80019a5c:	b7e1                	j	80019a24 <.LBB7_45+0x6c>
}
    80019a5e:	654a                	ld	a0,144(sp)
    80019a60:	60ae                	ld	ra,200(sp)
    80019a62:	6169                	addi	sp,sp,208
    80019a64:	8082                	ret
    while path[cur] == b'/' {
    80019a66:	75e6                	ld	a1,120(sp)
    80019a68:	7526                	ld	a0,104(sp)

0000000080019a6a <.LBB7_46>:
    80019a6a:	00011617          	auipc	a2,0x11
    80019a6e:	fd660613          	addi	a2,a2,-42 # 8002aa40 <.L__unnamed_41>
    80019a72:	00008097          	auipc	ra,0x8
    80019a76:	6b6080e7          	jalr	1718(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80019a7a:	0000                	unimp
    if path[cur] == 0 {
    80019a7c:	75e6                	ld	a1,120(sp)
    80019a7e:	7506                	ld	a0,96(sp)

0000000080019a80 <.LBB7_47>:
    80019a80:	00011617          	auipc	a2,0x11
    80019a84:	fd860613          	addi	a2,a2,-40 # 8002aa58 <.L__unnamed_42>
    80019a88:	00008097          	auipc	ra,0x8
    80019a8c:	6a0080e7          	jalr	1696(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80019a90:	0000                	unimp
    while path[cur] != b'/' && path[cur] != 0 {
    80019a92:	75e6                	ld	a1,120(sp)
    80019a94:	6526                	ld	a0,72(sp)

0000000080019a96 <.LBB7_48>:
    80019a96:	00011617          	auipc	a2,0x11
    80019a9a:	fda60613          	addi	a2,a2,-38 # 8002aa70 <.L__unnamed_43>
    80019a9e:	00008097          	auipc	ra,0x8
    80019aa2:	68a080e7          	jalr	1674(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80019aa6:	0000                	unimp
    80019aa8:	75e6                	ld	a1,120(sp)
    80019aaa:	6506                	ld	a0,64(sp)

0000000080019aac <.LBB7_49>:
    80019aac:	00011617          	auipc	a2,0x11
    80019ab0:	fdc60613          	addi	a2,a2,-36 # 8002aa88 <.L__unnamed_44>
    80019ab4:	00008097          	auipc	ra,0x8
    80019ab8:	674080e7          	jalr	1652(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

0000000080019abe <.LBB7_50>:
        cur += 1;
    80019abe:	00011517          	auipc	a0,0x11
    80019ac2:	c0250513          	addi	a0,a0,-1022 # 8002a6c0 <str.0>

0000000080019ac6 <.LBB7_51>:
    80019ac6:	00011617          	auipc	a2,0x11
    80019aca:	fda60613          	addi	a2,a2,-38 # 8002aaa0 <.L__unnamed_45>
    80019ace:	45f1                	li	a1,28
    80019ad0:	00008097          	auipc	ra,0x8
    80019ad4:	62c080e7          	jalr	1580(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080019ada <.LBB7_52>:
    let mut count = cur - start; 
    80019ada:	00011517          	auipc	a0,0x11
    80019ade:	c3650513          	addi	a0,a0,-970 # 8002a710 <str.1>

0000000080019ae2 <.LBB7_53>:
    80019ae2:	00011617          	auipc	a2,0x11
    80019ae6:	fd660613          	addi	a2,a2,-42 # 8002aab8 <.L__unnamed_46>
    80019aea:	02100593          	li	a1,33
    80019aee:	00008097          	auipc	ra,0x8
    80019af2:	60e080e7          	jalr	1550(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80019af6:	0000                	unimp
    name[count] = 0;
    80019af8:	7562                	ld	a0,56(sp)

0000000080019afa <.LBB7_54>:
    80019afa:	00011617          	auipc	a2,0x11
    80019afe:	00660613          	addi	a2,a2,6 # 8002ab00 <.L__unnamed_47>
    80019b02:	45b9                	li	a1,14
    80019b04:	00008097          	auipc	ra,0x8
    80019b08:	624080e7          	jalr	1572(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80019b0c:	0000                	unimp
    while path[cur] == b'/' {
    80019b0e:	75e6                	ld	a1,120(sp)
    80019b10:	6522                	ld	a0,8(sp)

0000000080019b12 <.LBB7_55>:
    80019b12:	00011617          	auipc	a2,0x11
    80019b16:	00660613          	addi	a2,a2,6 # 8002ab18 <.L__unnamed_48>
    80019b1a:	00008097          	auipc	ra,0x8
    80019b1e:	60e080e7          	jalr	1550(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

0000000080019b24 <.LBB7_56>:
        cur += 1;
    80019b24:	00011517          	auipc	a0,0x11
    80019b28:	b9c50513          	addi	a0,a0,-1124 # 8002a6c0 <str.0>

0000000080019b2c <.LBB7_57>:
    80019b2c:	00011617          	auipc	a2,0x11
    80019b30:	00460613          	addi	a2,a2,4 # 8002ab30 <.L__unnamed_49>
    80019b34:	45f1                	li	a1,28
    80019b36:	00008097          	auipc	ra,0x8
    80019b3a:	5c6080e7          	jalr	1478(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080019b40 <.LBB7_58>:
        cur += 1;
    80019b40:	00011517          	auipc	a0,0x11
    80019b44:	b8050513          	addi	a0,a0,-1152 # 8002a6c0 <str.0>

0000000080019b48 <.LBB7_59>:
    80019b48:	00011617          	auipc	a2,0x11
    80019b4c:	00060613          	mv	a2,a2
    80019b50:	45f1                	li	a1,28
    80019b52:	00008097          	auipc	ra,0x8
    80019b56:	5aa080e7          	jalr	1450(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel2fs5inode9InodeData4stat17h1253d1c76b7156e3E:

0000000080019b5c <_ZN6kernel2fs5inode9InodeData4stat17h1253d1c76b7156e3E>:
    pub fn stat(&self, stat: &mut Stat) {
    80019b5c:	1141                	addi	sp,sp,-16
    80019b5e:	e02a                	sd	a0,0(sp)
    80019b60:	e42e                	sd	a1,8(sp)
        stat.dev = self.dev;
    80019b62:	4110                	lw	a2,0(a0)
    80019b64:	c190                	sw	a2,0(a1)
        stat.inum = self.inum;
    80019b66:	4150                	lw	a2,4(a0)
    80019b68:	c1d0                	sw	a2,4(a1)
        stat.itype = self.dinode.itype;
    80019b6a:	00851603          	lh	a2,8(a0)
    80019b6e:	00c59423          	sh	a2,8(a1)
        stat.nlink = self.dinode.nlink;
    80019b72:	00e51603          	lh	a2,14(a0)
    80019b76:	00c59523          	sh	a2,10(a1)
        stat.size = self.dinode.size as usize;
    80019b7a:	01056503          	lwu	a0,16(a0)
    80019b7e:	e988                	sd	a0,16(a1)
    }
    80019b80:	0141                	addi	sp,sp,16
    80019b82:	8082                	ret

Disassembly of section .text._ZN6kernel2fs5inode9InodeData8truncate17h7f63e14f2a03d309E:

0000000080019b84 <_ZN6kernel2fs5inode9InodeData8truncate17h7f63e14f2a03d309E>:
    pub fn truncate(&mut self, inode: &Inode) {
    80019b84:	7149                	addi	sp,sp,-368
    80019b86:	f686                	sd	ra,360(sp)
    80019b88:	e4ae                	sd	a1,72(sp)
    80019b8a:	e8aa                	sd	a0,80(sp)
    80019b8c:	ee2a                	sd	a0,280(sp)
    80019b8e:	f22e                	sd	a1,288(sp)
    80019b90:	4501                	li	a0,0
        for i in 0..NDIRECT {
    80019b92:	f4aa                	sd	a0,104(sp)
    80019b94:	45b1                	li	a1,12
    80019b96:	f8ae                	sd	a1,112(sp)
    80019b98:	00006097          	auipc	ra,0x6
    80019b9c:	c30080e7          	jalr	-976(ra) # 8001f7c8 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he0a8d93712e5493bE>
    80019ba0:	ecaa                	sd	a0,88(sp)
    80019ba2:	f0ae                	sd	a1,96(sp)
    80019ba4:	a009                	j	80019ba6 <_ZN6kernel2fs5inode9InodeData8truncate17h7f63e14f2a03d309E+0x22>
    80019ba6:	7506                	ld	a0,96(sp)
    80019ba8:	65e6                	ld	a1,88(sp)
    80019baa:	fcae                	sd	a1,120(sp)
    80019bac:	e12a                	sd	a0,128(sp)
    80019bae:	a009                	j	80019bb0 <_ZN6kernel2fs5inode9InodeData8truncate17h7f63e14f2a03d309E+0x2c>
    80019bb0:	18a8                	addi	a0,sp,120
    80019bb2:	00006097          	auipc	ra,0x6
    80019bb6:	ba8080e7          	jalr	-1112(ra) # 8001f75a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE>
    80019bba:	e52a                	sd	a0,136(sp)
    80019bbc:	e92e                	sd	a1,144(sp)
    80019bbe:	a009                	j	80019bc0 <_ZN6kernel2fs5inode9InodeData8truncate17h7f63e14f2a03d309E+0x3c>
    80019bc0:	652a                	ld	a0,136(sp)
    80019bc2:	4581                	li	a1,0
    80019bc4:	00b50463          	beq	a0,a1,80019bcc <_ZN6kernel2fs5inode9InodeData8truncate17h7f63e14f2a03d309E+0x48>
    80019bc8:	a009                	j	80019bca <_ZN6kernel2fs5inode9InodeData8truncate17h7f63e14f2a03d309E+0x46>
    80019bca:	a801                	j	80019bda <_ZN6kernel2fs5inode9InodeData8truncate17h7f63e14f2a03d309E+0x56>
        if self.dinode.addrs[NDIRECT] > 0 {
    80019bcc:	6546                	ld	a0,80(sp)
    80019bce:	4168                	lw	a0,68(a0)
    80019bd0:	4581                	li	a1,0
    80019bd2:	06b51863          	bne	a0,a1,80019c42 <_ZN6kernel2fs5inode9InodeData8truncate17h7f63e14f2a03d309E+0xbe>
    80019bd6:	a061                	j	80019c5e <.LBB9_39+0x14>
        for i in 0..NDIRECT {
    80019bd8:	0000                	unimp
    80019bda:	65ca                	ld	a1,144(sp)
    80019bdc:	e0ae                	sd	a1,64(sp)
    80019bde:	f62e                	sd	a1,296(sp)
    80019be0:	fa2e                	sd	a1,304(sp)
    80019be2:	fe2e                	sd	a1,312(sp)
    80019be4:	4531                	li	a0,12
            if self.dinode.addrs[i] > 0 {
    80019be6:	16b56663          	bltu	a0,a1,80019d52 <.LBB9_39+0x108>
    80019bea:	a009                	j	80019bec <_ZN6kernel2fs5inode9InodeData8truncate17h7f63e14f2a03d309E+0x68>
    80019bec:	6546                	ld	a0,80(sp)
    80019bee:	6586                	ld	a1,64(sp)
    80019bf0:	058a                	slli	a1,a1,0x2
    80019bf2:	952e                	add	a0,a0,a1
    80019bf4:	4948                	lw	a0,20(a0)
    80019bf6:	4581                	li	a1,0
    80019bf8:	00b50c63          	beq	a0,a1,80019c10 <_ZN6kernel2fs5inode9InodeData8truncate17h7f63e14f2a03d309E+0x8c>
    80019bfc:	a009                	j	80019bfe <_ZN6kernel2fs5inode9InodeData8truncate17h7f63e14f2a03d309E+0x7a>
                bfree(inode.dev, self.dinode.addrs[i]);
    80019bfe:	6506                	ld	a0,64(sp)
    80019c00:	65a6                	ld	a1,72(sp)
    80019c02:	0085e583          	lwu	a1,8(a1)
    80019c06:	fc2e                	sd	a1,56(sp)
    80019c08:	45b5                	li	a1,13
    80019c0a:	00b56463          	bltu	a0,a1,80019c12 <_ZN6kernel2fs5inode9InodeData8truncate17h7f63e14f2a03d309E+0x8e>
    80019c0e:	aaa9                	j	80019d68 <.LBB9_40+0x14>
            if self.dinode.addrs[i] > 0 {
    80019c10:	a805                	j	80019c40 <_ZN6kernel2fs5inode9InodeData8truncate17h7f63e14f2a03d309E+0xbc>
                bfree(inode.dev, self.dinode.addrs[i]);
    80019c12:	7562                	ld	a0,56(sp)
    80019c14:	65c6                	ld	a1,80(sp)
    80019c16:	6606                	ld	a2,64(sp)
    80019c18:	060a                	slli	a2,a2,0x2
    80019c1a:	95b2                	add	a1,a1,a2
    80019c1c:	49cc                	lw	a1,20(a1)
    80019c1e:	fffeb097          	auipc	ra,0xfffeb
    80019c22:	fd2080e7          	jalr	-46(ra) # 80004bf0 <_ZN6kernel2fs6bitmap5bfree17h2d4cb92b39e2512aE>
    80019c26:	a009                	j	80019c28 <_ZN6kernel2fs5inode9InodeData8truncate17h7f63e14f2a03d309E+0xa4>
    80019c28:	6586                	ld	a1,64(sp)
    80019c2a:	4531                	li	a0,12
                self.dinode.addrs[i] = 0;
    80019c2c:	14b56963          	bltu	a0,a1,80019d7e <.LBB9_41+0x14>
    80019c30:	a009                	j	80019c32 <_ZN6kernel2fs5inode9InodeData8truncate17h7f63e14f2a03d309E+0xae>
    80019c32:	6546                	ld	a0,80(sp)
    80019c34:	6586                	ld	a1,64(sp)
    80019c36:	058a                	slli	a1,a1,0x2
    80019c38:	95aa                	add	a1,a1,a0
    80019c3a:	4501                	li	a0,0
    80019c3c:	c9c8                	sw	a0,20(a1)
            if self.dinode.addrs[i] > 0 {
    80019c3e:	a009                	j	80019c40 <_ZN6kernel2fs5inode9InodeData8truncate17h7f63e14f2a03d309E+0xbc>
        for i in 0..NDIRECT {
    80019c40:	bf85                	j	80019bb0 <_ZN6kernel2fs5inode9InodeData8truncate17h7f63e14f2a03d309E+0x2c>
            let buf = BCACHE.bread(inode.dev, self.dinode.addrs[NDIRECT]);
    80019c42:	6526                	ld	a0,72(sp)
    80019c44:	65c6                	ld	a1,80(sp)
    80019c46:	41f4                	lw	a3,68(a1)
    80019c48:	4510                	lw	a2,8(a0)

0000000080019c4a <.LBB9_39>:
    80019c4a:	00015597          	auipc	a1,0x15
    80019c4e:	3b658593          	addi	a1,a1,950 # 8002f000 <_ZN6kernel2fs3bio6BCACHE17h4811aac4f8d79dc4E>
    80019c52:	0928                	addi	a0,sp,152
    80019c54:	fffea097          	auipc	ra,0xfffea
    80019c58:	9a8080e7          	jalr	-1624(ra) # 800035fc <_ZN6kernel2fs3bio6Bcache5bread17h6ef915e4e896646bE>
    80019c5c:	a011                	j	80019c60 <.LBB9_39+0x16>
        if self.dinode.addrs[NDIRECT] > 0 {
    80019c5e:	a8f9                	j	80019d3c <.LBB9_39+0xf2>
    80019c60:	0928                	addi	a0,sp,152
            let buf_ptr = buf.raw_data() as *const BlockNo;
    80019c62:	fffea097          	auipc	ra,0xfffea
    80019c66:	ae0080e7          	jalr	-1312(ra) # 80003742 <_ZN6kernel2fs3bio3Buf8raw_data17h6a896fea03f7ee91E>
    80019c6a:	f82a                	sd	a0,48(sp)
    80019c6c:	a009                	j	80019c6e <.LBB9_39+0x24>
    80019c6e:	7542                	ld	a0,48(sp)
    80019c70:	85aa                	mv	a1,a0
    80019c72:	ec2e                	sd	a1,24(sp)
    80019c74:	e2aa                	sd	a0,320(sp)
    80019c76:	4501                	li	a0,0
            for i in 0..NINDIRECT {
    80019c78:	e1aa                	sd	a0,192(sp)
    80019c7a:	08000593          	li	a1,128
    80019c7e:	e5ae                	sd	a1,200(sp)
    80019c80:	00006097          	auipc	ra,0x6
    80019c84:	b48080e7          	jalr	-1208(ra) # 8001f7c8 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he0a8d93712e5493bE>
    80019c88:	f02a                	sd	a0,32(sp)
    80019c8a:	f42e                	sd	a1,40(sp)
    80019c8c:	a009                	j	80019c8e <.LBB9_39+0x44>
    80019c8e:	7522                	ld	a0,40(sp)
    80019c90:	7582                	ld	a1,32(sp)
    80019c92:	e9ae                	sd	a1,208(sp)
    80019c94:	edaa                	sd	a0,216(sp)
    80019c96:	a009                	j	80019c98 <.LBB9_39+0x4e>
    80019c98:	0988                	addi	a0,sp,208
    80019c9a:	00006097          	auipc	ra,0x6
    80019c9e:	ac0080e7          	jalr	-1344(ra) # 8001f75a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE>
    80019ca2:	f1aa                	sd	a0,224(sp)
    80019ca4:	f5ae                	sd	a1,232(sp)
    80019ca6:	a009                	j	80019ca8 <.LBB9_39+0x5e>
    80019ca8:	750e                	ld	a0,224(sp)
    80019caa:	4581                	li	a1,0
    80019cac:	00b50463          	beq	a0,a1,80019cb4 <.LBB9_39+0x6a>
    80019cb0:	a009                	j	80019cb2 <.LBB9_39+0x68>
    80019cb2:	a015                	j	80019cd6 <.LBB9_39+0x8c>
            drop(buf);
    80019cb4:	756a                	ld	a0,184(sp)
    80019cb6:	ea2a                	sd	a0,272(sp)
    80019cb8:	754a                	ld	a0,176(sp)
    80019cba:	e62a                	sd	a0,264(sp)
    80019cbc:	752a                	ld	a0,168(sp)
    80019cbe:	e22a                	sd	a0,256(sp)
    80019cc0:	750a                	ld	a0,160(sp)
    80019cc2:	fdaa                	sd	a0,248(sp)
    80019cc4:	656a                	ld	a0,152(sp)
    80019cc6:	f9aa                	sd	a0,240(sp)
    80019cc8:	1988                	addi	a0,sp,240
    80019cca:	00003097          	auipc	ra,0x3
    80019cce:	2c2080e7          	jalr	706(ra) # 8001cf8c <_ZN4core3mem4drop17hda1e19029436deb9E>
    80019cd2:	a881                	j	80019d22 <.LBB9_39+0xd8>
            for i in 0..NINDIRECT {
    80019cd4:	0000                	unimp
    80019cd6:	6562                	ld	a0,24(sp)
    80019cd8:	75ae                	ld	a1,232(sp)
    80019cda:	e6ae                	sd	a1,328(sp)
    80019cdc:	eaae                	sd	a1,336(sp)
    80019cde:	eeae                	sd	a1,344(sp)
                let bn = unsafe{ read(buf_ptr.offset(i as isize)) };
    80019ce0:	fffeb097          	auipc	ra,0xfffeb
    80019ce4:	b6a080e7          	jalr	-1174(ra) # 8000484a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h936ab5e813f51efdE>
    80019ce8:	e82a                	sd	a0,16(sp)
    80019cea:	a009                	j	80019cec <.LBB9_39+0xa2>
    80019cec:	6542                	ld	a0,16(sp)
    80019cee:	fffff097          	auipc	ra,0xfffff
    80019cf2:	842080e7          	jalr	-1982(ra) # 80018530 <_ZN4core3ptr4read17h97f5e0e151e0fdc4E>
    80019cf6:	85aa                	mv	a1,a0
    80019cf8:	e42e                	sd	a1,8(sp)
    80019cfa:	16a12223          	sw	a0,356(sp)
    80019cfe:	a009                	j	80019d00 <.LBB9_39+0xb6>
                if bn > 0 {
    80019d00:	6522                	ld	a0,8(sp)
    80019d02:	2501                	sext.w	a0,a0
    80019d04:	4581                	li	a1,0
    80019d06:	00b50b63          	beq	a0,a1,80019d1c <.LBB9_39+0xd2>
    80019d0a:	a009                	j	80019d0c <.LBB9_39+0xc2>
                    bfree(inode.dev, bn);
    80019d0c:	65a2                	ld	a1,8(sp)
    80019d0e:	6526                	ld	a0,72(sp)
    80019d10:	4508                	lw	a0,8(a0)
    80019d12:	fffeb097          	auipc	ra,0xfffeb
    80019d16:	ede080e7          	jalr	-290(ra) # 80004bf0 <_ZN6kernel2fs6bitmap5bfree17h2d4cb92b39e2512aE>
    80019d1a:	a011                	j	80019d1e <.LBB9_39+0xd4>
                if bn > 0 {
    80019d1c:	a011                	j	80019d20 <.LBB9_39+0xd6>
    80019d1e:	a009                	j	80019d20 <.LBB9_39+0xd6>
            for i in 0..NINDIRECT {
    80019d20:	bfa5                	j	80019c98 <.LBB9_39+0x4e>
            bfree(inode.dev, self.dinode.addrs[NDIRECT]);
    80019d22:	6526                	ld	a0,72(sp)
    80019d24:	65c6                	ld	a1,80(sp)
    80019d26:	41ec                	lw	a1,68(a1)
    80019d28:	4508                	lw	a0,8(a0)
    80019d2a:	fffeb097          	auipc	ra,0xfffeb
    80019d2e:	ec6080e7          	jalr	-314(ra) # 80004bf0 <_ZN6kernel2fs6bitmap5bfree17h2d4cb92b39e2512aE>
    80019d32:	a009                	j	80019d34 <.LBB9_39+0xea>
    80019d34:	65c6                	ld	a1,80(sp)
    80019d36:	4501                	li	a0,0
            self.dinode.addrs[NDIRECT] = 0;
    80019d38:	c1e8                	sw	a0,68(a1)
        if self.dinode.addrs[NDIRECT] > 0 {
    80019d3a:	a009                	j	80019d3c <.LBB9_39+0xf2>
    80019d3c:	6546                	ld	a0,80(sp)
    80019d3e:	4581                	li	a1,0
        self.dinode.size = 0;
    80019d40:	c90c                	sw	a1,16(a0)
        self.update();
    80019d42:	00000097          	auipc	ra,0x0
    80019d46:	052080e7          	jalr	82(ra) # 80019d94 <_ZN6kernel2fs5inode9InodeData6update17h81f49ab31d0ddfdcE>
    80019d4a:	a009                	j	80019d4c <.LBB9_39+0x102>
    }
    80019d4c:	70b6                	ld	ra,360(sp)
    80019d4e:	6175                	addi	sp,sp,368
    80019d50:	8082                	ret
            if self.dinode.addrs[i] > 0 {
    80019d52:	6506                	ld	a0,64(sp)

0000000080019d54 <.LBB9_40>:
    80019d54:	00011617          	auipc	a2,0x11
    80019d58:	e0c60613          	addi	a2,a2,-500 # 8002ab60 <.L__unnamed_51>
    80019d5c:	45b5                	li	a1,13
    80019d5e:	00008097          	auipc	ra,0x8
    80019d62:	3ca080e7          	jalr	970(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80019d66:	0000                	unimp
                bfree(inode.dev, self.dinode.addrs[i]);
    80019d68:	6506                	ld	a0,64(sp)

0000000080019d6a <.LBB9_41>:
    80019d6a:	00011617          	auipc	a2,0x11
    80019d6e:	e0e60613          	addi	a2,a2,-498 # 8002ab78 <.L__unnamed_52>
    80019d72:	45b5                	li	a1,13
    80019d74:	00008097          	auipc	ra,0x8
    80019d78:	3b4080e7          	jalr	948(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    80019d7c:	0000                	unimp
                self.dinode.addrs[i] = 0;
    80019d7e:	6506                	ld	a0,64(sp)

0000000080019d80 <.LBB9_42>:
    80019d80:	00011617          	auipc	a2,0x11
    80019d84:	e1060613          	addi	a2,a2,-496 # 8002ab90 <.L__unnamed_53>
    80019d88:	45b5                	li	a1,13
    80019d8a:	00008097          	auipc	ra,0x8
    80019d8e:	39e080e7          	jalr	926(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel2fs5inode9InodeData6update17h81f49ab31d0ddfdcE:

0000000080019d94 <_ZN6kernel2fs5inode9InodeData6update17h81f49ab31d0ddfdcE>:
    pub fn update(&mut self) {
    80019d94:	7115                	addi	sp,sp,-224
    80019d96:	ed86                	sd	ra,216(sp)
    80019d98:	ec2a                	sd	a0,24(sp)
    80019d9a:	e1aa                	sd	a0,192(sp)
            self.dev, 
    80019d9c:	00056583          	lwu	a1,0(a0)
            unsafe { SUPER_BLOCK.locate_inode(self.inum)}
    80019da0:	f02e                	sd	a1,32(sp)
    80019da2:	414c                	lw	a1,4(a0)

0000000080019da4 <.LBB10_8>:
    80019da4:	00048517          	auipc	a0,0x48
    80019da8:	2fc50513          	addi	a0,a0,764 # 800620a0 <_ZN6kernel2fs10superblock11SUPER_BLOCK17hc3889871ecbe2b54E>
    80019dac:	fffee097          	auipc	ra,0xfffee
    80019db0:	9ce080e7          	jalr	-1586(ra) # 8000777a <_ZN6kernel2fs10superblock10SuperBlock12locate_inode17hc2dbfb20b9411e7cE>
    80019db4:	f42a                	sd	a0,40(sp)
    80019db6:	a009                	j	80019db8 <.LBB10_8+0x14>
        let mut buf = BCACHE.bread(
    80019db8:	76a2                	ld	a3,40(sp)
    80019dba:	7602                	ld	a2,32(sp)

0000000080019dbc <.LBB10_9>:
    80019dbc:	00015597          	auipc	a1,0x15
    80019dc0:	24458593          	addi	a1,a1,580 # 8002f000 <_ZN6kernel2fs3bio6BCACHE17h4811aac4f8d79dc4E>
    80019dc4:	1808                	addi	a0,sp,48
    80019dc6:	fffea097          	auipc	ra,0xfffea
    80019dca:	836080e7          	jalr	-1994(ra) # 800035fc <_ZN6kernel2fs3bio6Bcache5bread17h6ef915e4e896646bE>
    80019dce:	a009                	j	80019dd0 <.LBB10_9+0x14>
        let offset = locate_inode_offset(self.inum) as isize;
    80019dd0:	6562                	ld	a0,24(sp)
    80019dd2:	4148                	lw	a0,4(a0)
    80019dd4:	00001097          	auipc	ra,0x1
    80019dd8:	126080e7          	jalr	294(ra) # 8001aefa <_ZN6kernel2fs5inode19locate_inode_offset17h88c1ade407c59915E>
    80019ddc:	e82a                	sd	a0,16(sp)
    80019dde:	a009                	j	80019de0 <.LBB10_9+0x24>
    80019de0:	6542                	ld	a0,16(sp)
    80019de2:	e5aa                	sd	a0,200(sp)
    80019de4:	1808                	addi	a0,sp,48
        let dinode = unsafe{ (buf.raw_data_mut() as *mut DiskInode).offset(offset) };
    80019de6:	fffea097          	auipc	ra,0xfffea
    80019dea:	9a0080e7          	jalr	-1632(ra) # 80003786 <_ZN6kernel2fs3bio3Buf12raw_data_mut17hbae73c10d57c515dE>
    80019dee:	e42a                	sd	a0,8(sp)
    80019df0:	a009                	j	80019df2 <.LBB10_9+0x36>
    80019df2:	65c2                	ld	a1,16(sp)
    80019df4:	6522                	ld	a0,8(sp)
    80019df6:	ffffe097          	auipc	ra,0xffffe
    80019dfa:	4a4080e7          	jalr	1188(ra) # 8001829a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hf7573a6302c08e61E>
    80019dfe:	85aa                	mv	a1,a0
    80019e00:	e02e                	sd	a1,0(sp)
    80019e02:	e9aa                	sd	a0,208(sp)
    80019e04:	a009                	j	80019e06 <.LBB10_9+0x4a>
        unsafe{ write(dinode, self.dinode) };
    80019e06:	6502                	ld	a0,0(sp)
    80019e08:	65e2                	ld	a1,24(sp)
    80019e0a:	0405e683          	lwu	a3,64(a1)
    80019e0e:	0445e603          	lwu	a2,68(a1)
    80019e12:	1602                	slli	a2,a2,0x20
    80019e14:	8e55                	or	a2,a2,a3
    80019e16:	e932                	sd	a2,144(sp)
    80019e18:	0385e683          	lwu	a3,56(a1)
    80019e1c:	03c5e603          	lwu	a2,60(a1)
    80019e20:	1602                	slli	a2,a2,0x20
    80019e22:	8e55                	or	a2,a2,a3
    80019e24:	e532                	sd	a2,136(sp)
    80019e26:	0305e683          	lwu	a3,48(a1)
    80019e2a:	0345e603          	lwu	a2,52(a1)
    80019e2e:	1602                	slli	a2,a2,0x20
    80019e30:	8e55                	or	a2,a2,a3
    80019e32:	e132                	sd	a2,128(sp)
    80019e34:	0285e683          	lwu	a3,40(a1)
    80019e38:	02c5e603          	lwu	a2,44(a1)
    80019e3c:	1602                	slli	a2,a2,0x20
    80019e3e:	8e55                	or	a2,a2,a3
    80019e40:	fcb2                	sd	a2,120(sp)
    80019e42:	0205e683          	lwu	a3,32(a1)
    80019e46:	0245e603          	lwu	a2,36(a1)
    80019e4a:	1602                	slli	a2,a2,0x20
    80019e4c:	8e55                	or	a2,a2,a3
    80019e4e:	f8b2                	sd	a2,112(sp)
    80019e50:	0185e683          	lwu	a3,24(a1)
    80019e54:	01c5e603          	lwu	a2,28(a1)
    80019e58:	1602                	slli	a2,a2,0x20
    80019e5a:	8e55                	or	a2,a2,a3
    80019e5c:	f4b2                	sd	a2,104(sp)
    80019e5e:	0105e683          	lwu	a3,16(a1)
    80019e62:	0145e603          	lwu	a2,20(a1)
    80019e66:	1602                	slli	a2,a2,0x20
    80019e68:	8e55                	or	a2,a2,a3
    80019e6a:	f0b2                	sd	a2,96(sp)
    80019e6c:	0085e603          	lwu	a2,8(a1)
    80019e70:	00c5e583          	lwu	a1,12(a1)
    80019e74:	1582                	slli	a1,a1,0x20
    80019e76:	8dd1                	or	a1,a1,a2
    80019e78:	ecae                	sd	a1,88(sp)
    80019e7a:	08ac                	addi	a1,sp,88
    80019e7c:	fffff097          	auipc	ra,0xfffff
    80019e80:	8b0080e7          	jalr	-1872(ra) # 8001872c <_ZN4core3ptr5write17h24d2ac6ea724fbc0E>
    80019e84:	a009                	j	80019e86 <.LBB10_9+0xca>
        LOG.write(buf);
    80019e86:	6546                	ld	a0,80(sp)
    80019e88:	fd2a                	sd	a0,184(sp)
    80019e8a:	6526                	ld	a0,72(sp)
    80019e8c:	f92a                	sd	a0,176(sp)
    80019e8e:	6506                	ld	a0,64(sp)
    80019e90:	f52a                	sd	a0,168(sp)
    80019e92:	7562                	ld	a0,56(sp)
    80019e94:	f12a                	sd	a0,160(sp)
    80019e96:	7542                	ld	a0,48(sp)
    80019e98:	ed2a                	sd	a0,152(sp)

0000000080019e9a <.LBB10_10>:
    80019e9a:	0003f517          	auipc	a0,0x3f
    80019e9e:	7ce50513          	addi	a0,a0,1998 # 80059668 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    80019ea2:	092c                	addi	a1,sp,152
    80019ea4:	fffef097          	auipc	ra,0xfffef
    80019ea8:	f4a080e7          	jalr	-182(ra) # 80008dee <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$5write17ha48e3edeecccac4fE>
    80019eac:	a009                	j	80019eae <.LBB10_10+0x14>
    }
    80019eae:	60ee                	ld	ra,216(sp)
    80019eb0:	612d                	addi	sp,sp,224
    80019eb2:	8082                	ret

Disassembly of section .text._ZN6kernel2fs5inode9InodeData4bmap17hd73981f79cf26766E:

0000000080019eb4 <_ZN6kernel2fs5inode9InodeData4bmap17hd73981f79cf26766E>:
    pub fn bmap(&mut self, offset_bn: u32) -> Result<u32, &'static str> {
    80019eb4:	7111                	addi	sp,sp,-256
    80019eb6:	fd86                	sd	ra,248(sp)
    80019eb8:	ecae                	sd	a1,88(sp)
    80019eba:	85aa                	mv	a1,a0
    80019ebc:	6566                	ld	a0,88(sp)
    80019ebe:	f0ae                	sd	a1,96(sp)
    80019ec0:	0006059b          	sext.w	a1,a2
    80019ec4:	e9aa                	sd	a0,208(sp)
    80019ec6:	cfb2                	sw	a2,220(sp)
    80019ec8:	4501                	li	a0,0
        let mut addr;
    80019eca:	0ca107a3          	sb	a0,207(sp)
        let offset_bn = offset_bn as usize;
    80019ece:	02061513          	slli	a0,a2,0x20
    80019ed2:	9101                	srli	a0,a0,0x20
    80019ed4:	f4aa                	sd	a0,104(sp)
    80019ed6:	f1aa                	sd	a0,224(sp)
    80019ed8:	452d                	li	a0,11
        if offset_bn < NDIRECT {
    80019eda:	00b56863          	bltu	a0,a1,80019eea <_ZN6kernel2fs5inode9InodeData4bmap17hd73981f79cf26766E+0x36>
    80019ede:	a009                	j	80019ee0 <_ZN6kernel2fs5inode9InodeData4bmap17hd73981f79cf26766E+0x2c>
    80019ee0:	7526                	ld	a0,104(sp)
    80019ee2:	45b5                	li	a1,13
            if self.dinode.addrs[offset_bn] == 0 {
    80019ee4:	00b56963          	bltu	a0,a1,80019ef6 <_ZN6kernel2fs5inode9InodeData4bmap17hd73981f79cf26766E+0x42>
    80019ee8:	a2e1                	j	8001a0b0 <.LBB11_37+0x44>
    80019eea:	7526                	ld	a0,104(sp)
    80019eec:	08c00593          	li	a1,140
        if offset_bn < NINDIRECT + NDIRECT {
    80019ef0:	06b56963          	bltu	a0,a1,80019f62 <_ZN6kernel2fs5inode9InodeData4bmap17hd73981f79cf26766E+0xae>
    80019ef4:	a8b5                	j	80019f70 <.LBB11_34>
            if self.dinode.addrs[offset_bn] == 0 {
    80019ef6:	6566                	ld	a0,88(sp)
    80019ef8:	75a6                	ld	a1,104(sp)
    80019efa:	058a                	slli	a1,a1,0x2
    80019efc:	952e                	add	a0,a0,a1
    80019efe:	4948                	lw	a0,20(a0)
    80019f00:	4581                	li	a1,0
    80019f02:	00b51b63          	bne	a0,a1,80019f18 <_ZN6kernel2fs5inode9InodeData4bmap17hd73981f79cf26766E+0x64>
    80019f06:	a009                	j	80019f08 <_ZN6kernel2fs5inode9InodeData4bmap17hd73981f79cf26766E+0x54>
                addr = balloc(self.dev);
    80019f08:	6566                	ld	a0,88(sp)
    80019f0a:	4108                	lw	a0,0(a0)
    80019f0c:	fffeb097          	auipc	ra,0xfffeb
    80019f10:	df4080e7          	jalr	-524(ra) # 80004d00 <_ZN6kernel2fs6bitmap6balloc17hb1927bc98cc6e122E>
    80019f14:	e8aa                	sd	a0,80(sp)
    80019f16:	a031                	j	80019f22 <_ZN6kernel2fs5inode9InodeData4bmap17hd73981f79cf26766E+0x6e>
    80019f18:	7526                	ld	a0,104(sp)
    80019f1a:	45b5                	li	a1,13
                return Ok(self.dinode.addrs[offset_bn])
    80019f1c:	02b56963          	bltu	a0,a1,80019f4e <_ZN6kernel2fs5inode9InodeData4bmap17hd73981f79cf26766E+0x9a>
    80019f20:	a25d                	j	8001a0c6 <.LBB11_38+0x14>
                addr = balloc(self.dev);
    80019f22:	75a6                	ld	a1,104(sp)
    80019f24:	6546                	ld	a0,80(sp)
    80019f26:	daaa                	sw	a0,116(sp)
                self.dinode.addrs[offset_bn] = addr;
    80019f28:	1502                	slli	a0,a0,0x20
    80019f2a:	9101                	srli	a0,a0,0x20
    80019f2c:	e4aa                	sd	a0,72(sp)
    80019f2e:	4531                	li	a0,12
    80019f30:	1ab56663          	bltu	a0,a1,8001a0dc <.LBB11_39+0x14>
    80019f34:	a009                	j	80019f36 <_ZN6kernel2fs5inode9InodeData4bmap17hd73981f79cf26766E+0x82>
    80019f36:	7586                	ld	a1,96(sp)
    80019f38:	6526                	ld	a0,72(sp)
    80019f3a:	6666                	ld	a2,88(sp)
    80019f3c:	76a6                	ld	a3,104(sp)
    80019f3e:	068a                	slli	a3,a3,0x2
    80019f40:	9636                	add	a2,a2,a3
    80019f42:	ca48                	sw	a0,20(a2)
                return Ok(addr)
    80019f44:	5556                	lw	a0,116(sp)
    80019f46:	c1c8                	sw	a0,4(a1)
    80019f48:	4501                	li	a0,0
    80019f4a:	c188                	sw	a0,0(a1)
    80019f4c:	aa89                	j	8001a09e <.LBB11_37+0x32>
                return Ok(self.dinode.addrs[offset_bn])
    80019f4e:	7586                	ld	a1,96(sp)
    80019f50:	6566                	ld	a0,88(sp)
    80019f52:	7626                	ld	a2,104(sp)
    80019f54:	060a                	slli	a2,a2,0x2
    80019f56:	9532                	add	a0,a0,a2
    80019f58:	4948                	lw	a0,20(a0)
    80019f5a:	c1c8                	sw	a0,4(a1)
    80019f5c:	4501                	li	a0,0
    80019f5e:	c188                	sw	a0,0(a1)
    80019f60:	aa3d                	j	8001a09e <.LBB11_37+0x32>
            let count = offset_bn - NDIRECT;
    80019f62:	7526                	ld	a0,104(sp)
    80019f64:	ff450593          	addi	a1,a0,-12
    80019f68:	e0ae                	sd	a1,64(sp)
    80019f6a:	18b56463          	bltu	a0,a1,8001a0f2 <.LBB11_41>
    80019f6e:	a839                	j	80019f8c <.LBB11_35+0x14>

0000000080019f70 <.LBB11_34>:
        panic!("inode bmap: out of range.");
    80019f70:	00011517          	auipc	a0,0x11
    80019f74:	c9850513          	addi	a0,a0,-872 # 8002ac08 <.L__unnamed_54>

0000000080019f78 <.LBB11_35>:
    80019f78:	00011617          	auipc	a2,0x11
    80019f7c:	cb060613          	addi	a2,a2,-848 # 8002ac28 <.L__unnamed_55>
    80019f80:	45e5                	li	a1,25
    80019f82:	00008097          	auipc	ra,0x8
    80019f86:	17a080e7          	jalr	378(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80019f8a:	0000                	unimp
            let count = offset_bn - NDIRECT;
    80019f8c:	6566                	ld	a0,88(sp)
    80019f8e:	6586                	ld	a1,64(sp)
    80019f90:	f5ae                	sd	a1,232(sp)
            if self.dinode.addrs[NDIRECT] == 0 {
    80019f92:	4168                	lw	a0,68(a0)
    80019f94:	4581                	li	a1,0
    80019f96:	00b51b63          	bne	a0,a1,80019fac <.LBB11_35+0x34>
    80019f9a:	a009                	j	80019f9c <.LBB11_35+0x24>
                addr = balloc(self.dev);
    80019f9c:	6566                	ld	a0,88(sp)
    80019f9e:	4108                	lw	a0,0(a0)
    80019fa0:	fffeb097          	auipc	ra,0xfffeb
    80019fa4:	d60080e7          	jalr	-672(ra) # 80004d00 <_ZN6kernel2fs6bitmap6balloc17hb1927bc98cc6e122E>
    80019fa8:	fc2a                	sd	a0,56(sp)
    80019faa:	a029                	j	80019fb4 <.LBB11_35+0x3c>
                addr = self.dinode.addrs[NDIRECT]
    80019fac:	6566                	ld	a0,88(sp)
    80019fae:	4168                	lw	a0,68(a0)
    80019fb0:	daaa                	sw	a0,116(sp)
            if self.dinode.addrs[NDIRECT] == 0 {
    80019fb2:	a031                	j	80019fbe <.LBB11_35+0x46>
                addr = balloc(self.dev);
    80019fb4:	7562                	ld	a0,56(sp)
    80019fb6:	65e6                	ld	a1,88(sp)
    80019fb8:	daaa                	sw	a0,116(sp)
                self.dinode.addrs[NDIRECT] = addr;
    80019fba:	c1e8                	sw	a0,68(a1)
            if self.dinode.addrs[NDIRECT] == 0 {
    80019fbc:	a009                	j	80019fbe <.LBB11_35+0x46>
            let buf = BCACHE.bread(self.dev, addr);
    80019fbe:	6566                	ld	a0,88(sp)
    80019fc0:	4110                	lw	a2,0(a0)
    80019fc2:	4505                	li	a0,1
    80019fc4:	0ca107a3          	sb	a0,207(sp)
    80019fc8:	56d6                	lw	a3,116(sp)

0000000080019fca <.LBB11_36>:
    80019fca:	00015597          	auipc	a1,0x15
    80019fce:	03658593          	addi	a1,a1,54 # 8002f000 <_ZN6kernel2fs3bio6BCACHE17h4811aac4f8d79dc4E>
    80019fd2:	18a8                	addi	a0,sp,120
    80019fd4:	fffe9097          	auipc	ra,0xfffe9
    80019fd8:	628080e7          	jalr	1576(ra) # 800035fc <_ZN6kernel2fs3bio6Bcache5bread17h6ef915e4e896646bE>
    80019fdc:	a009                	j	80019fde <.LBB11_36+0x14>
    80019fde:	18a8                	addi	a0,sp,120
            let buf_data = buf.raw_data() as *mut u32;
    80019fe0:	fffe9097          	auipc	ra,0xfffe9
    80019fe4:	762080e7          	jalr	1890(ra) # 80003742 <_ZN6kernel2fs3bio3Buf8raw_data17h6a896fea03f7ee91E>
    80019fe8:	f82a                	sd	a0,48(sp)
    80019fea:	a009                	j	80019fec <.LBB11_36+0x22>
    80019fec:	6586                	ld	a1,64(sp)
    80019fee:	7542                	ld	a0,48(sp)
    80019ff0:	862a                	mv	a2,a0
    80019ff2:	f032                	sd	a2,32(sp)
    80019ff4:	f9aa                	sd	a0,240(sp)
            addr = unsafe{ read(buf_data.offset(count as isize)) };
    80019ff6:	fffef097          	auipc	ra,0xfffef
    80019ffa:	962080e7          	jalr	-1694(ra) # 80008958 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h9889ec684d0da599E>
    80019ffe:	f42a                	sd	a0,40(sp)
    8001a000:	a009                	j	8001a002 <.LBB11_36+0x38>
    8001a002:	7522                	ld	a0,40(sp)
    8001a004:	ffffe097          	auipc	ra,0xffffe
    8001a008:	52c080e7          	jalr	1324(ra) # 80018530 <_ZN4core3ptr4read17h97f5e0e151e0fdc4E>
    8001a00c:	ec2a                	sd	a0,24(sp)
    8001a00e:	a009                	j	8001a010 <.LBB11_36+0x46>
    8001a010:	6562                	ld	a0,24(sp)
    8001a012:	daaa                	sw	a0,116(sp)
    8001a014:	2501                	sext.w	a0,a0
    8001a016:	4581                	li	a1,0
            if addr == 0 {
    8001a018:	00b51b63          	bne	a0,a1,8001a02e <.LBB11_36+0x64>
    8001a01c:	a009                	j	8001a01e <.LBB11_36+0x54>
                    addr = balloc(self.dev);
    8001a01e:	6566                	ld	a0,88(sp)
    8001a020:	4108                	lw	a0,0(a0)
    8001a022:	fffeb097          	auipc	ra,0xfffeb
    8001a026:	cde080e7          	jalr	-802(ra) # 80004d00 <_ZN6kernel2fs6bitmap6balloc17hb1927bc98cc6e122E>
    8001a02a:	e82a                	sd	a0,16(sp)
    8001a02c:	a011                	j	8001a030 <.LBB11_36+0x66>
            if addr == 0 {
    8001a02e:	a891                	j	8001a082 <.LBB11_37+0x16>
                    addr = balloc(self.dev);
    8001a030:	6586                	ld	a1,64(sp)
    8001a032:	7502                	ld	a0,32(sp)
    8001a034:	6642                	ld	a2,16(sp)
    8001a036:	dab2                	sw	a2,116(sp)
                    write(buf_data.offset(count as isize), addr);
    8001a038:	fffef097          	auipc	ra,0xfffef
    8001a03c:	920080e7          	jalr	-1760(ra) # 80008958 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h9889ec684d0da599E>
    8001a040:	e42a                	sd	a0,8(sp)
    8001a042:	a009                	j	8001a044 <.LBB11_36+0x7a>
    8001a044:	6522                	ld	a0,8(sp)
    8001a046:	55d6                	lw	a1,116(sp)
    8001a048:	ffffe097          	auipc	ra,0xffffe
    8001a04c:	6d8080e7          	jalr	1752(ra) # 80018720 <_ZN4core3ptr5write17h10d6d8799e54bf75E>
    8001a050:	a009                	j	8001a052 <.LBB11_36+0x88>
    8001a052:	4501                	li	a0,0
                LOG.write(buf);
    8001a054:	0ca107a3          	sb	a0,207(sp)
    8001a058:	7566                	ld	a0,120(sp)
    8001a05a:	f12a                	sd	a0,160(sp)
    8001a05c:	650a                	ld	a0,128(sp)
    8001a05e:	f52a                	sd	a0,168(sp)
    8001a060:	652a                	ld	a0,136(sp)
    8001a062:	f92a                	sd	a0,176(sp)
    8001a064:	654a                	ld	a0,144(sp)
    8001a066:	fd2a                	sd	a0,184(sp)
    8001a068:	656a                	ld	a0,152(sp)
    8001a06a:	e1aa                	sd	a0,192(sp)

000000008001a06c <.LBB11_37>:
    8001a06c:	0003f517          	auipc	a0,0x3f
    8001a070:	5fc50513          	addi	a0,a0,1532 # 80059668 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    8001a074:	110c                	addi	a1,sp,160
    8001a076:	fffef097          	auipc	ra,0xfffef
    8001a07a:	d78080e7          	jalr	-648(ra) # 80008dee <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$5write17ha48e3edeecccac4fE>
    8001a07e:	a009                	j	8001a080 <.LBB11_37+0x14>
            if addr == 0 {
    8001a080:	a009                	j	8001a082 <.LBB11_37+0x16>
            return Ok(addr)
    8001a082:	7586                	ld	a1,96(sp)
    8001a084:	5556                	lw	a0,116(sp)
    8001a086:	c1c8                	sw	a0,4(a1)
    8001a088:	4501                	li	a0,0
    8001a08a:	c188                	sw	a0,0(a1)
        }
    8001a08c:	0cf14503          	lbu	a0,207(sp)
    8001a090:	8905                	andi	a0,a0,1
    8001a092:	e909                	bnez	a0,8001a0a4 <.LBB11_37+0x38>
    8001a094:	a009                	j	8001a096 <.LBB11_37+0x2a>
    8001a096:	4501                	li	a0,0
    8001a098:	0ca107a3          	sb	a0,207(sp)
    8001a09c:	a009                	j	8001a09e <.LBB11_37+0x32>
    }
    8001a09e:	70ee                	ld	ra,248(sp)
    8001a0a0:	6111                	addi	sp,sp,256
    8001a0a2:	8082                	ret
    8001a0a4:	18a8                	addi	a0,sp,120
        }
    8001a0a6:	fffed097          	auipc	ra,0xfffed
    8001a0aa:	de0080e7          	jalr	-544(ra) # 80006e86 <_ZN4core3ptr41drop_in_place$LT$kernel..fs..bio..Buf$GT$17hc35967244f3e9eb6E>
    8001a0ae:	b7e5                	j	8001a096 <.LBB11_37+0x2a>
            if self.dinode.addrs[offset_bn] == 0 {
    8001a0b0:	7526                	ld	a0,104(sp)

000000008001a0b2 <.LBB11_38>:
    8001a0b2:	00011617          	auipc	a2,0x11
    8001a0b6:	af660613          	addi	a2,a2,-1290 # 8002aba8 <.L__unnamed_56>
    8001a0ba:	45b5                	li	a1,13
    8001a0bc:	00008097          	auipc	ra,0x8
    8001a0c0:	06c080e7          	jalr	108(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    8001a0c4:	0000                	unimp
                return Ok(self.dinode.addrs[offset_bn])
    8001a0c6:	7526                	ld	a0,104(sp)

000000008001a0c8 <.LBB11_39>:
    8001a0c8:	00011617          	auipc	a2,0x11
    8001a0cc:	af860613          	addi	a2,a2,-1288 # 8002abc0 <.L__unnamed_57>
    8001a0d0:	45b5                	li	a1,13
    8001a0d2:	00008097          	auipc	ra,0x8
    8001a0d6:	056080e7          	jalr	86(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    8001a0da:	0000                	unimp
                self.dinode.addrs[offset_bn] = addr;
    8001a0dc:	7526                	ld	a0,104(sp)

000000008001a0de <.LBB11_40>:
    8001a0de:	00011617          	auipc	a2,0x11
    8001a0e2:	afa60613          	addi	a2,a2,-1286 # 8002abd8 <.L__unnamed_58>
    8001a0e6:	45b5                	li	a1,13
    8001a0e8:	00008097          	auipc	ra,0x8
    8001a0ec:	040080e7          	jalr	64(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

000000008001a0f2 <.LBB11_41>:
            let count = offset_bn - NDIRECT;
    8001a0f2:	00010517          	auipc	a0,0x10
    8001a0f6:	61e50513          	addi	a0,a0,1566 # 8002a710 <str.1>

000000008001a0fa <.LBB11_42>:
    8001a0fa:	00011617          	auipc	a2,0x11
    8001a0fe:	af660613          	addi	a2,a2,-1290 # 8002abf0 <.L__unnamed_59>
    8001a102:	02100593          	li	a1,33
    8001a106:	00008097          	auipc	ra,0x8
    8001a10a:	ff6080e7          	jalr	-10(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel2fs5inode9InodeData4read17h2d02dc0e430e4837E:

000000008001a110 <_ZN6kernel2fs5inode9InodeData4read17h2d02dc0e430e4837E>:
    pub fn read(
    8001a110:	dc010113          	addi	sp,sp,-576
    8001a114:	22113c23          	sd	ra,568(sp)
    8001a118:	e13e                	sd	a5,128(sp)
    8001a11a:	e93a                	sd	a4,144(sp)
    8001a11c:	8736                	mv	a4,a3
    8001a11e:	86ae                	mv	a3,a1
    8001a120:	658a                	ld	a1,128(sp)
    8001a122:	e536                	sd	a3,136(sp)
    8001a124:	87aa                	mv	a5,a0
    8001a126:	654a                	ld	a0,144(sp)
    8001a128:	ed3e                	sd	a5,152(sp)
    8001a12a:	87ae                	mv	a5,a1
    8001a12c:	f13e                	sd	a5,160(sp)
    8001a12e:	87aa                	mv	a5,a0
    8001a130:	f53e                	sd	a5,168(sp)
    8001a132:	87b2                	mv	a5,a2
    8001a134:	f93e                	sd	a5,176(sp)
    8001a136:	e5ba                	sd	a4,200(sp)
    8001a138:	efb6                	sd	a3,472(sp)
    8001a13a:	1ec103a3          	sb	a2,487(sp)
    8001a13e:	1ea12423          	sw	a0,488(sp)
    8001a142:	1eb12623          	sw	a1,492(sp)
        let end = offset.checked_add(count).ok_or("Fail to add count.")?;
    8001a146:	00004097          	auipc	ra,0x4
    8001a14a:	ba8080e7          	jalr	-1112(ra) # 8001dcee <_ZN4core3num21_$LT$impl$u20$u32$GT$11checked_add17h28c8b802ca50f266E>
    8001a14e:	fd2a                	sd	a0,184(sp)
    8001a150:	e1ae                	sd	a1,192(sp)
    8001a152:	a009                	j	8001a154 <_ZN6kernel2fs5inode9InodeData4read17h2d02dc0e430e4837E+0x44>
    8001a154:	660e                	ld	a2,192(sp)
    8001a156:	75ea                	ld	a1,184(sp)

000000008001a158 <.LBB12_42>:
    8001a158:	00011697          	auipc	a3,0x11
    8001a15c:	ae868693          	addi	a3,a3,-1304 # 8002ac40 <.L__unnamed_60>
    8001a160:	11a8                	addi	a0,sp,232
    8001a162:	4749                	li	a4,18
    8001a164:	ffff4097          	auipc	ra,0xffff4
    8001a168:	66e080e7          	jalr	1646(ra) # 8000e7d2 <_ZN4core6option15Option$LT$T$GT$5ok_or17hac03a53b0754fc14E>
    8001a16c:	a009                	j	8001a16e <.LBB12_42+0x16>
    8001a16e:	0988                	addi	a0,sp,208
    8001a170:	11ac                	addi	a1,sp,232
    8001a172:	ffff3097          	auipc	ra,0xffff3
    8001a176:	f9a080e7          	jalr	-102(ra) # 8000d10c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h3002ccf5391f70d3E>
    8001a17a:	a009                	j	8001a17c <.LBB12_42+0x24>
    8001a17c:	0d016503          	lwu	a0,208(sp)
    8001a180:	4581                	li	a1,0
    8001a182:	00b50463          	beq	a0,a1,8001a18a <.LBB12_42+0x32>
    8001a186:	a009                	j	8001a188 <.LBB12_42+0x30>
    8001a188:	a821                	j	8001a1a0 <.LBB12_42+0x48>
    8001a18a:	652a                	ld	a0,136(sp)
    8001a18c:	45de                	lw	a1,212(sp)
    8001a18e:	20b12023          	sw	a1,512(sp)
    8001a192:	20b12223          	sw	a1,516(sp)
        if end > self.dinode.size {
    8001a196:	4908                	lw	a0,16(a0)
    8001a198:	02b56763          	bltu	a0,a1,8001a1c6 <.LBB12_42+0x6e>
    8001a19c:	a089                	j	8001a1de <.LBB12_43+0x16>
        let end = offset.checked_add(count).ok_or("Fail to add count.")?;
    8001a19e:	0000                	unimp
    8001a1a0:	656e                	ld	a0,216(sp)
    8001a1a2:	758e                	ld	a1,224(sp)
    8001a1a4:	fbaa                	sd	a0,496(sp)
    8001a1a6:	ffae                	sd	a1,504(sp)
    8001a1a8:	ffff2097          	auipc	ra,0xffff2
    8001a1ac:	81c080e7          	jalr	-2020(ra) # 8000b9c4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h6f3e3843c20d184aE>
    8001a1b0:	f8aa                	sd	a0,112(sp)
    8001a1b2:	fcae                	sd	a1,120(sp)
    8001a1b4:	a009                	j	8001a1b6 <.LBB12_42+0x5e>
    8001a1b6:	7666                	ld	a2,120(sp)
    8001a1b8:	75c6                	ld	a1,112(sp)
    8001a1ba:	656a                	ld	a0,152(sp)
    8001a1bc:	ffff3097          	auipc	ra,0xffff3
    8001a1c0:	e48080e7          	jalr	-440(ra) # 8000d004 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h4dd43adfe00292f6E>
    8001a1c4:	a411                	j	8001a3c8 <.LBB12_45+0x5c>
            return Err("inode read: end is more than diskinode's size.")
    8001a1c6:	65ea                	ld	a1,152(sp)

000000008001a1c8 <.LBB12_43>:
    8001a1c8:	00011517          	auipc	a0,0x11
    8001a1cc:	a8a50513          	addi	a0,a0,-1398 # 8002ac52 <.L__unnamed_61>
    8001a1d0:	e588                	sd	a0,8(a1)
    8001a1d2:	02e00513          	li	a0,46
    8001a1d6:	e988                	sd	a0,16(a1)
    8001a1d8:	4505                	li	a0,1
    8001a1da:	e188                	sd	a0,0(a1)
    8001a1dc:	a2f5                	j	8001a3c8 <.LBB12_45+0x5c>
    8001a1de:	752a                	ld	a0,168(sp)
    8001a1e0:	758a                	ld	a1,160(sp)
    8001a1e2:	4601                	li	a2,0
        let mut total: usize = 0;
    8001a1e4:	e232                	sd	a2,256(sp)
        let mut offset = offset as usize;
    8001a1e6:	02051613          	slli	a2,a0,0x20
    8001a1ea:	9201                	srli	a2,a2,0x20
    8001a1ec:	e632                	sd	a2,264(sp)
        let count = count as usize;
    8001a1ee:	1582                	slli	a1,a1,0x20
    8001a1f0:	9181                	srli	a1,a1,0x20
    8001a1f2:	f4ae                	sd	a1,104(sp)
    8001a1f4:	20b13423          	sd	a1,520(sp)
        let mut block_basic = offset / BSIZE;
    8001a1f8:	00a5559b          	srliw	a1,a0,0xa
    8001a1fc:	ea2e                	sd	a1,272(sp)
        let mut block_offset = offset % BSIZE;
    8001a1fe:	3ff57513          	andi	a0,a0,1023
    8001a202:	ee2a                	sd	a0,280(sp)
        while total < count as usize {
    8001a204:	a009                	j	8001a206 <.LBB12_43+0x3e>
    8001a206:	75a6                	ld	a1,104(sp)
    8001a208:	6512                	ld	a0,256(sp)
    8001a20a:	00b56963          	bltu	a0,a1,8001a21c <.LBB12_43+0x54>
    8001a20e:	a009                	j	8001a210 <.LBB12_43+0x48>
        Ok(total)
    8001a210:	65ea                	ld	a1,152(sp)
    8001a212:	6512                	ld	a0,256(sp)
    8001a214:	e588                	sd	a0,8(a1)
    8001a216:	4501                	li	a0,0
    8001a218:	e188                	sd	a0,0(a1)
    }
    8001a21a:	a27d                	j	8001a3c8 <.LBB12_45+0x5c>
            let surplus_len = count - total;
    8001a21c:	7526                	ld	a0,104(sp)
    8001a21e:	6592                	ld	a1,256(sp)
    8001a220:	40b505b3          	sub	a1,a0,a1
    8001a224:	f0ae                	sd	a1,96(sp)
    8001a226:	1ab56663          	bltu	a0,a1,8001a3d2 <.LBB12_46>
    8001a22a:	a009                	j	8001a22c <.LBB12_43+0x64>
    8001a22c:	65aa                	ld	a1,136(sp)
    8001a22e:	7506                	ld	a0,96(sp)
    8001a230:	20a13823          	sd	a0,528(sp)
            let block_no = self.bmap(block_basic as u32)?;
    8001a234:	6652                	ld	a2,272(sp)
    8001a236:	1a28                	addi	a0,sp,312
    8001a238:	00000097          	auipc	ra,0x0
    8001a23c:	c7c080e7          	jalr	-900(ra) # 80019eb4 <_ZN6kernel2fs5inode9InodeData4bmap17hd73981f79cf26766E>
    8001a240:	a009                	j	8001a242 <.LBB12_43+0x7a>
    8001a242:	1208                	addi	a0,sp,288
    8001a244:	1a2c                	addi	a1,sp,312
    8001a246:	ffff3097          	auipc	ra,0xffff3
    8001a24a:	ec6080e7          	jalr	-314(ra) # 8000d10c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h3002ccf5391f70d3E>
    8001a24e:	a009                	j	8001a250 <.LBB12_43+0x88>
    8001a250:	12016503          	lwu	a0,288(sp)
    8001a254:	4581                	li	a1,0
    8001a256:	00b50463          	beq	a0,a1,8001a25e <.LBB12_43+0x96>
    8001a25a:	a009                	j	8001a25c <.LBB12_43+0x94>
    8001a25c:	a025                	j	8001a284 <.LBB12_44+0x16>
    8001a25e:	652a                	ld	a0,136(sp)
    8001a260:	12412683          	lw	a3,292(sp)
    8001a264:	22d12423          	sw	a3,552(sp)
    8001a268:	22d12623          	sw	a3,556(sp)
            let buf = BCACHE.bread(self.dev, block_no);
    8001a26c:	4110                	lw	a2,0(a0)

000000008001a26e <.LBB12_44>:
    8001a26e:	00015597          	auipc	a1,0x15
    8001a272:	d9258593          	addi	a1,a1,-622 # 8002f000 <_ZN6kernel2fs3bio6BCACHE17h4811aac4f8d79dc4E>
    8001a276:	0a88                	addi	a0,sp,336
    8001a278:	fffe9097          	auipc	ra,0xfffe9
    8001a27c:	384080e7          	jalr	900(ra) # 800035fc <_ZN6kernel2fs3bio6Bcache5bread17h6ef915e4e896646bE>
    8001a280:	a03d                	j	8001a2ae <.LBB12_44+0x40>
            let block_no = self.bmap(block_basic as u32)?;
    8001a282:	0000                	unimp
    8001a284:	7532                	ld	a0,296(sp)
    8001a286:	75d2                	ld	a1,304(sp)
    8001a288:	20a13c23          	sd	a0,536(sp)
    8001a28c:	22b13023          	sd	a1,544(sp)
    8001a290:	ffff1097          	auipc	ra,0xffff1
    8001a294:	734080e7          	jalr	1844(ra) # 8000b9c4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h6f3e3843c20d184aE>
    8001a298:	e8aa                	sd	a0,80(sp)
    8001a29a:	ecae                	sd	a1,88(sp)
    8001a29c:	a009                	j	8001a29e <.LBB12_44+0x30>
    8001a29e:	6666                	ld	a2,88(sp)
    8001a2a0:	65c6                	ld	a1,80(sp)
    8001a2a2:	656a                	ld	a0,152(sp)
    8001a2a4:	ffff3097          	auipc	ra,0xffff3
    8001a2a8:	d60080e7          	jalr	-672(ra) # 8000d004 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h4dd43adfe00292f6E>
    8001a2ac:	aa31                	j	8001a3c8 <.LBB12_45+0x5c>
            let write_len = min(surplus_len, BSIZE - block_offset);
    8001a2ae:	65f2                	ld	a1,280(sp)
    8001a2b0:	40000513          	li	a0,1024
    8001a2b4:	40b505b3          	sub	a1,a0,a1
    8001a2b8:	e4ae                	sd	a1,72(sp)
    8001a2ba:	12b56b63          	bltu	a0,a1,8001a3f0 <.LBB12_48>
    8001a2be:	a009                	j	8001a2c0 <.LBB12_44+0x52>
    8001a2c0:	65a6                	ld	a1,72(sp)
    8001a2c2:	7506                	ld	a0,96(sp)
    8001a2c4:	fffed097          	auipc	ra,0xfffed
    8001a2c8:	1d8080e7          	jalr	472(ra) # 8000749c <_ZN6kernel4misc3min17he96917d05b11cd47E>
    8001a2cc:	85aa                	mv	a1,a0
    8001a2ce:	e0ae                	sd	a1,64(sp)
    8001a2d0:	22a13823          	sd	a0,560(sp)
    8001a2d4:	a009                	j	8001a2d6 <.LBB12_44+0x68>
                dst, 
    8001a2d6:	652e                	ld	a0,200(sp)
                unsafe{ (buf.raw_data() as *mut u8).offset((offset % BSIZE) as isize) },
    8001a2d8:	f82a                	sd	a0,48(sp)
    8001a2da:	0a88                	addi	a0,sp,336
    8001a2dc:	fffe9097          	auipc	ra,0xfffe9
    8001a2e0:	466080e7          	jalr	1126(ra) # 80003742 <_ZN6kernel2fs3bio3Buf8raw_data17h6a896fea03f7ee91E>
    8001a2e4:	fc2a                	sd	a0,56(sp)
    8001a2e6:	a009                	j	8001a2e8 <.LBB12_44+0x7a>
    8001a2e8:	7562                	ld	a0,56(sp)
    8001a2ea:	65b2                	ld	a1,264(sp)
    8001a2ec:	3ff5f593          	andi	a1,a1,1023
    8001a2f0:	00005097          	auipc	ra,0x5
    8001a2f4:	304080e7          	jalr	772(ra) # 8001f5f4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb5f7a0f346747657E>
    8001a2f8:	f42a                	sd	a0,40(sp)
    8001a2fa:	a009                	j	8001a2fc <.LBB12_44+0x8e>
            if copy_from_kernel(
    8001a2fc:	6686                	ld	a3,64(sp)
    8001a2fe:	7622                	ld	a2,40(sp)
    8001a300:	75c2                	ld	a1,48(sp)
    8001a302:	754a                	ld	a0,176(sp)
    8001a304:	00003097          	auipc	ra,0x3
    8001a308:	7a2080e7          	jalr	1954(ra) # 8001daa6 <_ZN6kernel6memory16copy_from_kernel17hf0969988b3a5fbc0E>
    8001a30c:	feaa                	sd	a0,376(sp)
    8001a30e:	e32e                	sd	a1,384(sp)
    8001a310:	a009                	j	8001a312 <.LBB12_44+0xa4>
    8001a312:	1aa8                	addi	a0,sp,376
    8001a314:	ffff3097          	auipc	ra,0xffff3
    8001a318:	9a2080e7          	jalr	-1630(ra) # 8000ccb6 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h304118d236359d80E>
    8001a31c:	f02a                	sd	a0,32(sp)
    8001a31e:	a009                	j	8001a320 <.LBB12_44+0xb2>
    8001a320:	7502                	ld	a0,32(sp)
    8001a322:	4581                	li	a1,0
    8001a324:	02b50363          	beq	a0,a1,8001a34a <.LBB12_44+0xdc>
    8001a328:	a009                	j	8001a32a <.LBB12_44+0xbc>
                drop(buf);
    8001a32a:	7556                	ld	a0,368(sp)
    8001a32c:	f72a                	sd	a0,424(sp)
    8001a32e:	7536                	ld	a0,360(sp)
    8001a330:	f32a                	sd	a0,416(sp)
    8001a332:	7516                	ld	a0,352(sp)
    8001a334:	ef2a                	sd	a0,408(sp)
    8001a336:	6576                	ld	a0,344(sp)
    8001a338:	eb2a                	sd	a0,400(sp)
    8001a33a:	6556                	ld	a0,336(sp)
    8001a33c:	e72a                	sd	a0,392(sp)
    8001a33e:	0328                	addi	a0,sp,392
    8001a340:	00003097          	auipc	ra,0x3
    8001a344:	c4c080e7          	jalr	-948(ra) # 8001cf8c <_ZN4core3mem4drop17hda1e19029436deb9E>
    8001a348:	a00d                	j	8001a36a <.LBB12_44+0xfc>
            drop(buf);
    8001a34a:	7556                	ld	a0,368(sp)
    8001a34c:	ebaa                	sd	a0,464(sp)
    8001a34e:	7536                	ld	a0,360(sp)
    8001a350:	e7aa                	sd	a0,456(sp)
    8001a352:	7516                	ld	a0,352(sp)
    8001a354:	e3aa                	sd	a0,448(sp)
    8001a356:	6576                	ld	a0,344(sp)
    8001a358:	ff2a                	sd	a0,440(sp)
    8001a35a:	6556                	ld	a0,336(sp)
    8001a35c:	fb2a                	sd	a0,432(sp)
    8001a35e:	1b08                	addi	a0,sp,432
    8001a360:	00003097          	auipc	ra,0x3
    8001a364:	c2c080e7          	jalr	-980(ra) # 8001cf8c <_ZN4core3mem4drop17hda1e19029436deb9E>
    8001a368:	a829                	j	8001a382 <.LBB12_45+0x16>
                return Err("inode read: Fail to either copy out.")
    8001a36a:	65ea                	ld	a1,152(sp)

000000008001a36c <.LBB12_45>:
    8001a36c:	00011517          	auipc	a0,0x11
    8001a370:	94450513          	addi	a0,a0,-1724 # 8002acb0 <.L__unnamed_62>
    8001a374:	e588                	sd	a0,8(a1)
    8001a376:	02400513          	li	a0,36
    8001a37a:	e988                	sd	a0,16(a1)
    8001a37c:	4505                	li	a0,1
    8001a37e:	e188                	sd	a0,0(a1)
    8001a380:	a0a1                	j	8001a3c8 <.LBB12_45+0x5c>
            total += write_len as usize;
    8001a382:	6506                	ld	a0,64(sp)
    8001a384:	6592                	ld	a1,256(sp)
    8001a386:	952e                	add	a0,a0,a1
    8001a388:	ec2a                	sd	a0,24(sp)
    8001a38a:	08b56263          	bltu	a0,a1,8001a40e <.LBB12_50>
    8001a38e:	a009                	j	8001a390 <.LBB12_45+0x24>
    8001a390:	6506                	ld	a0,64(sp)
    8001a392:	65e2                	ld	a1,24(sp)
    8001a394:	e22e                	sd	a1,256(sp)
            offset += write_len as usize;
    8001a396:	65b2                	ld	a1,264(sp)
    8001a398:	952e                	add	a0,a0,a1
    8001a39a:	e82a                	sd	a0,16(sp)
    8001a39c:	08b56763          	bltu	a0,a1,8001a42a <.LBB12_52>
    8001a3a0:	a009                	j	8001a3a2 <.LBB12_45+0x36>
    8001a3a2:	6506                	ld	a0,64(sp)
    8001a3a4:	65c2                	ld	a1,16(sp)
    8001a3a6:	e62e                	sd	a1,264(sp)
            dst += write_len as usize;
    8001a3a8:	65ae                	ld	a1,200(sp)
    8001a3aa:	952e                	add	a0,a0,a1
    8001a3ac:	e42a                	sd	a0,8(sp)
    8001a3ae:	08b56c63          	bltu	a0,a1,8001a446 <.LBB12_54>
    8001a3b2:	a009                	j	8001a3b4 <.LBB12_45+0x48>
    8001a3b4:	6522                	ld	a0,8(sp)
    8001a3b6:	e5aa                	sd	a0,200(sp)
            block_basic = offset / BSIZE;
    8001a3b8:	6532                	ld	a0,264(sp)
    8001a3ba:	00a55593          	srli	a1,a0,0xa
    8001a3be:	ea2e                	sd	a1,272(sp)
            block_offset = offset % BSIZE;
    8001a3c0:	3ff57513          	andi	a0,a0,1023
    8001a3c4:	ee2a                	sd	a0,280(sp)
        while total < count as usize {
    8001a3c6:	b581                	j	8001a206 <.LBB12_43+0x3e>
    }
    8001a3c8:	23813083          	ld	ra,568(sp)
    8001a3cc:	24010113          	addi	sp,sp,576
    8001a3d0:	8082                	ret

000000008001a3d2 <.LBB12_46>:
            let surplus_len = count - total;
    8001a3d2:	00010517          	auipc	a0,0x10
    8001a3d6:	33e50513          	addi	a0,a0,830 # 8002a710 <str.1>

000000008001a3da <.LBB12_47>:
    8001a3da:	00011617          	auipc	a2,0x11
    8001a3de:	8a660613          	addi	a2,a2,-1882 # 8002ac80 <.L__unnamed_63>
    8001a3e2:	02100593          	li	a1,33
    8001a3e6:	00008097          	auipc	ra,0x8
    8001a3ea:	d16080e7          	jalr	-746(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008001a3f0 <.LBB12_48>:
            let write_len = min(surplus_len, BSIZE - block_offset);
    8001a3f0:	00010517          	auipc	a0,0x10
    8001a3f4:	32050513          	addi	a0,a0,800 # 8002a710 <str.1>

000000008001a3f8 <.LBB12_49>:
    8001a3f8:	00011617          	auipc	a2,0x11
    8001a3fc:	8a060613          	addi	a2,a2,-1888 # 8002ac98 <.L__unnamed_64>
    8001a400:	02100593          	li	a1,33
    8001a404:	00008097          	auipc	ra,0x8
    8001a408:	cf8080e7          	jalr	-776(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008001a40e <.LBB12_50>:
            total += write_len as usize;
    8001a40e:	00010517          	auipc	a0,0x10
    8001a412:	2b250513          	addi	a0,a0,690 # 8002a6c0 <str.0>

000000008001a416 <.LBB12_51>:
    8001a416:	00011617          	auipc	a2,0x11
    8001a41a:	8c260613          	addi	a2,a2,-1854 # 8002acd8 <.L__unnamed_65>
    8001a41e:	45f1                	li	a1,28
    8001a420:	00008097          	auipc	ra,0x8
    8001a424:	cdc080e7          	jalr	-804(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008001a42a <.LBB12_52>:
            offset += write_len as usize;
    8001a42a:	00010517          	auipc	a0,0x10
    8001a42e:	29650513          	addi	a0,a0,662 # 8002a6c0 <str.0>

000000008001a432 <.LBB12_53>:
    8001a432:	00011617          	auipc	a2,0x11
    8001a436:	8be60613          	addi	a2,a2,-1858 # 8002acf0 <.L__unnamed_66>
    8001a43a:	45f1                	li	a1,28
    8001a43c:	00008097          	auipc	ra,0x8
    8001a440:	cc0080e7          	jalr	-832(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008001a446 <.LBB12_54>:
            dst += write_len as usize;
    8001a446:	00010517          	auipc	a0,0x10
    8001a44a:	27a50513          	addi	a0,a0,634 # 8002a6c0 <str.0>

000000008001a44e <.LBB12_55>:
    8001a44e:	00011617          	auipc	a2,0x11
    8001a452:	8ba60613          	addi	a2,a2,-1862 # 8002ad08 <.L__unnamed_67>
    8001a456:	45f1                	li	a1,28
    8001a458:	00008097          	auipc	ra,0x8
    8001a45c:	ca4080e7          	jalr	-860(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel2fs5inode9InodeData5write17h219447b865f1c381E:

000000008001a462 <_ZN6kernel2fs5inode9InodeData5write17h219447b865f1c381E>:
    pub fn write(
    8001a462:	7161                	addi	sp,sp,-432
    8001a464:	f706                	sd	ra,424(sp)
    8001a466:	f0ae                	sd	a1,96(sp)
    8001a468:	f4aa                	sd	a0,104(sp)
    8001a46a:	8532                	mv	a0,a2
    8001a46c:	f8aa                	sd	a0,112(sp)
    8001a46e:	e136                	sd	a3,128(sp)
    8001a470:	f2ae                	sd	a1,352(sp)
    8001a472:	16c107a3          	sb	a2,367(sp)
    8001a476:	16e12823          	sw	a4,368(sp)
    8001a47a:	16f12a23          	sw	a5,372(sp)
        let mut offset = offset as usize;
    8001a47e:	02071513          	slli	a0,a4,0x20
    8001a482:	9101                	srli	a0,a0,0x20
    8001a484:	e52a                	sd	a0,136(sp)
        let count = count as usize;
    8001a486:	02079513          	slli	a0,a5,0x20
    8001a48a:	9101                	srli	a0,a0,0x20
    8001a48c:	fcaa                	sd	a0,120(sp)
    8001a48e:	feaa                	sd	a0,376(sp)
    8001a490:	4501                	li	a0,0
        let mut total = 0;
    8001a492:	e92a                	sd	a0,144(sp)
        let mut block_basic = offset / BSIZE;
    8001a494:	00a7551b          	srliw	a0,a4,0xa
    8001a498:	ed2a                	sd	a0,152(sp)
        let mut block_offset = offset % BSIZE;
    8001a49a:	3ff77513          	andi	a0,a4,1023
    8001a49e:	f12a                	sd	a0,160(sp)
        while total < count {
    8001a4a0:	a009                	j	8001a4a2 <_ZN6kernel2fs5inode9InodeData5write17h219447b865f1c381E+0x40>
    8001a4a2:	75e6                	ld	a1,120(sp)
    8001a4a4:	654a                	ld	a0,144(sp)
    8001a4a6:	00b56963          	bltu	a0,a1,8001a4b8 <_ZN6kernel2fs5inode9InodeData5write17h219447b865f1c381E+0x56>
    8001a4aa:	a009                	j	8001a4ac <_ZN6kernel2fs5inode9InodeData5write17h219447b865f1c381E+0x4a>
        if self.dinode.size < offset as u32 {
    8001a4ac:	7506                	ld	a0,96(sp)
    8001a4ae:	4908                	lw	a0,16(a0)
    8001a4b0:	45aa                	lw	a1,136(sp)
    8001a4b2:	1ab56663          	bltu	a0,a1,8001a65e <.LBB13_38+0x16>
    8001a4b6:	aa45                	j	8001a666 <.LBB13_38+0x1e>
            let surplus_len = count - total;
    8001a4b8:	7566                	ld	a0,120(sp)
    8001a4ba:	65ca                	ld	a1,144(sp)
    8001a4bc:	40b505b3          	sub	a1,a0,a1
    8001a4c0:	ecae                	sd	a1,88(sp)
    8001a4c2:	1cb56263          	bltu	a0,a1,8001a686 <.LBB13_39>
    8001a4c6:	a009                	j	8001a4c8 <_ZN6kernel2fs5inode9InodeData5write17h219447b865f1c381E+0x66>
    8001a4c8:	7586                	ld	a1,96(sp)
    8001a4ca:	6566                	ld	a0,88(sp)
    8001a4cc:	e32a                	sd	a0,384(sp)
            let block_no = self.bmap(block_basic as u32)?;
    8001a4ce:	666a                	ld	a2,152(sp)
    8001a4d0:	0188                	addi	a0,sp,192
    8001a4d2:	00000097          	auipc	ra,0x0
    8001a4d6:	9e2080e7          	jalr	-1566(ra) # 80019eb4 <_ZN6kernel2fs5inode9InodeData4bmap17hd73981f79cf26766E>
    8001a4da:	a009                	j	8001a4dc <_ZN6kernel2fs5inode9InodeData5write17h219447b865f1c381E+0x7a>
    8001a4dc:	1128                	addi	a0,sp,168
    8001a4de:	018c                	addi	a1,sp,192
    8001a4e0:	ffff3097          	auipc	ra,0xffff3
    8001a4e4:	c2c080e7          	jalr	-980(ra) # 8000d10c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h3002ccf5391f70d3E>
    8001a4e8:	a009                	j	8001a4ea <_ZN6kernel2fs5inode9InodeData5write17h219447b865f1c381E+0x88>
    8001a4ea:	0a816503          	lwu	a0,168(sp)
    8001a4ee:	4581                	li	a1,0
    8001a4f0:	00b50463          	beq	a0,a1,8001a4f8 <_ZN6kernel2fs5inode9InodeData5write17h219447b865f1c381E+0x96>
    8001a4f4:	a009                	j	8001a4f6 <_ZN6kernel2fs5inode9InodeData5write17h219447b865f1c381E+0x94>
    8001a4f6:	a01d                	j	8001a51c <.LBB13_36+0x16>
    8001a4f8:	7506                	ld	a0,96(sp)
    8001a4fa:	56ba                	lw	a3,172(sp)
    8001a4fc:	18d12c23          	sw	a3,408(sp)
    8001a500:	18d12e23          	sw	a3,412(sp)
            let mut buf = BCACHE.bread(self.dev, block_no);
    8001a504:	4110                	lw	a2,0(a0)

000000008001a506 <.LBB13_36>:
    8001a506:	00015597          	auipc	a1,0x15
    8001a50a:	afa58593          	addi	a1,a1,-1286 # 8002f000 <_ZN6kernel2fs3bio6BCACHE17h4811aac4f8d79dc4E>
    8001a50e:	09a8                	addi	a0,sp,216
    8001a510:	fffe9097          	auipc	ra,0xfffe9
    8001a514:	0ec080e7          	jalr	236(ra) # 800035fc <_ZN6kernel2fs3bio6Bcache5bread17h6ef915e4e896646bE>
    8001a518:	a02d                	j	8001a542 <.LBB13_36+0x3c>
            let block_no = self.bmap(block_basic as u32)?;
    8001a51a:	0000                	unimp
    8001a51c:	754a                	ld	a0,176(sp)
    8001a51e:	75ea                	ld	a1,184(sp)
    8001a520:	e72a                	sd	a0,392(sp)
    8001a522:	eb2e                	sd	a1,400(sp)
    8001a524:	ffff1097          	auipc	ra,0xffff1
    8001a528:	4a0080e7          	jalr	1184(ra) # 8000b9c4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h6f3e3843c20d184aE>
    8001a52c:	e4aa                	sd	a0,72(sp)
    8001a52e:	e8ae                	sd	a1,80(sp)
    8001a530:	a009                	j	8001a532 <.LBB13_36+0x2c>
    8001a532:	6646                	ld	a2,80(sp)
    8001a534:	65a6                	ld	a1,72(sp)
    8001a536:	7526                	ld	a0,104(sp)
    8001a538:	ffff3097          	auipc	ra,0xffff3
    8001a53c:	acc080e7          	jalr	-1332(ra) # 8000d004 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h4dd43adfe00292f6E>
    8001a540:	a281                	j	8001a680 <.LBB13_38+0x38>
            let write_len = min(surplus_len, BSIZE - block_offset);
    8001a542:	758a                	ld	a1,160(sp)
    8001a544:	40000513          	li	a0,1024
    8001a548:	40b505b3          	sub	a1,a0,a1
    8001a54c:	e0ae                	sd	a1,64(sp)
    8001a54e:	14b56b63          	bltu	a0,a1,8001a6a4 <.LBB13_41>
    8001a552:	a009                	j	8001a554 <.LBB13_36+0x4e>
    8001a554:	6586                	ld	a1,64(sp)
    8001a556:	6566                	ld	a0,88(sp)
    8001a558:	fffed097          	auipc	ra,0xfffed
    8001a55c:	f44080e7          	jalr	-188(ra) # 8000749c <_ZN6kernel4misc3min17he96917d05b11cd47E>
    8001a560:	85aa                	mv	a1,a0
    8001a562:	fc2e                	sd	a1,56(sp)
    8001a564:	f32a                	sd	a0,416(sp)
    8001a566:	a009                	j	8001a568 <.LBB13_36+0x62>
    8001a568:	09a8                	addi	a0,sp,216
                unsafe{ (buf.raw_data_mut() as *mut u8).offset((offset % BSIZE) as isize ) }, 
    8001a56a:	fffe9097          	auipc	ra,0xfffe9
    8001a56e:	21c080e7          	jalr	540(ra) # 80003786 <_ZN6kernel2fs3bio3Buf12raw_data_mut17hbae73c10d57c515dE>
    8001a572:	f82a                	sd	a0,48(sp)
    8001a574:	a009                	j	8001a576 <.LBB13_36+0x70>
    8001a576:	7542                	ld	a0,48(sp)
    8001a578:	65aa                	ld	a1,136(sp)
    8001a57a:	3ff5f593          	andi	a1,a1,1023
    8001a57e:	00005097          	auipc	ra,0x5
    8001a582:	076080e7          	jalr	118(ra) # 8001f5f4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb5f7a0f346747657E>
    8001a586:	f42a                	sd	a0,40(sp)
    8001a588:	a009                	j	8001a58a <.LBB13_36+0x84>
                src, 
    8001a58a:	76e2                	ld	a3,56(sp)
    8001a58c:	75c6                	ld	a1,112(sp)
    8001a58e:	7522                	ld	a0,40(sp)
    8001a590:	660a                	ld	a2,128(sp)
            if copy_to_kernel(
    8001a592:	00003097          	auipc	ra,0x3
    8001a596:	464080e7          	jalr	1124(ra) # 8001d9f6 <_ZN6kernel6memory14copy_to_kernel17hd4730b664342d99cE>
    8001a59a:	e22a                	sd	a0,256(sp)
    8001a59c:	e62e                	sd	a1,264(sp)
    8001a59e:	a009                	j	8001a5a0 <.LBB13_36+0x9a>
    8001a5a0:	0208                	addi	a0,sp,256
    8001a5a2:	ffff2097          	auipc	ra,0xffff2
    8001a5a6:	714080e7          	jalr	1812(ra) # 8000ccb6 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h304118d236359d80E>
    8001a5aa:	f02a                	sd	a0,32(sp)
    8001a5ac:	a009                	j	8001a5ae <.LBB13_36+0xa8>
    8001a5ae:	7502                	ld	a0,32(sp)
    8001a5b0:	4581                	li	a1,0
    8001a5b2:	02b50363          	beq	a0,a1,8001a5d8 <.LBB13_36+0xd2>
    8001a5b6:	a009                	j	8001a5b8 <.LBB13_36+0xb2>
                drop(buf);
    8001a5b8:	756e                	ld	a0,248(sp)
    8001a5ba:	fa2a                	sd	a0,304(sp)
    8001a5bc:	754e                	ld	a0,240(sp)
    8001a5be:	f62a                	sd	a0,296(sp)
    8001a5c0:	752e                	ld	a0,232(sp)
    8001a5c2:	f22a                	sd	a0,288(sp)
    8001a5c4:	750e                	ld	a0,224(sp)
    8001a5c6:	ee2a                	sd	a0,280(sp)
    8001a5c8:	656e                	ld	a0,216(sp)
    8001a5ca:	ea2a                	sd	a0,272(sp)
    8001a5cc:	0a08                	addi	a0,sp,272
    8001a5ce:	00003097          	auipc	ra,0x3
    8001a5d2:	9be080e7          	jalr	-1602(ra) # 8001cf8c <_ZN4core3mem4drop17hda1e19029436deb9E>
    8001a5d6:	a801                	j	8001a5e6 <.LBB13_36+0xe0>
            offset += write_len;
    8001a5d8:	7562                	ld	a0,56(sp)
    8001a5da:	65aa                	ld	a1,136(sp)
    8001a5dc:	952e                	add	a0,a0,a1
    8001a5de:	ec2a                	sd	a0,24(sp)
    8001a5e0:	0eb56163          	bltu	a0,a1,8001a6c2 <.LBB13_43>
    8001a5e4:	a829                	j	8001a5fe <.LBB13_37+0x16>
                return Err("inode write: Fail to either copy in")
    8001a5e6:	75a6                	ld	a1,104(sp)

000000008001a5e8 <.LBB13_37>:
    8001a5e8:	00010517          	auipc	a0,0x10
    8001a5ec:	76850513          	addi	a0,a0,1896 # 8002ad50 <.L__unnamed_68>
    8001a5f0:	e588                	sd	a0,8(a1)
    8001a5f2:	02300513          	li	a0,35
    8001a5f6:	e988                	sd	a0,16(a1)
    8001a5f8:	4505                	li	a0,1
    8001a5fa:	e188                	sd	a0,0(a1)
    8001a5fc:	a051                	j	8001a680 <.LBB13_38+0x38>
            offset += write_len;
    8001a5fe:	7562                	ld	a0,56(sp)
    8001a600:	65e2                	ld	a1,24(sp)
    8001a602:	e52e                	sd	a1,136(sp)
            src += write_len;
    8001a604:	658a                	ld	a1,128(sp)
    8001a606:	952e                	add	a0,a0,a1
    8001a608:	e82a                	sd	a0,16(sp)
    8001a60a:	0cb56a63          	bltu	a0,a1,8001a6de <.LBB13_45>
    8001a60e:	a009                	j	8001a610 <.LBB13_37+0x28>
    8001a610:	7562                	ld	a0,56(sp)
    8001a612:	65c2                	ld	a1,16(sp)
    8001a614:	e12e                	sd	a1,128(sp)
            total += write_len;
    8001a616:	65ca                	ld	a1,144(sp)
    8001a618:	952e                	add	a0,a0,a1
    8001a61a:	e42a                	sd	a0,8(sp)
    8001a61c:	0cb56f63          	bltu	a0,a1,8001a6fa <.LBB13_47>
    8001a620:	a009                	j	8001a622 <.LBB13_37+0x3a>
    8001a622:	6522                	ld	a0,8(sp)
    8001a624:	e92a                	sd	a0,144(sp)
            block_basic = offset / BSIZE;
    8001a626:	652a                	ld	a0,136(sp)
    8001a628:	00a55593          	srli	a1,a0,0xa
    8001a62c:	ed2e                	sd	a1,152(sp)
            block_offset = offset % BSIZE;
    8001a62e:	3ff57513          	andi	a0,a0,1023
    8001a632:	f12a                	sd	a0,160(sp)
            LOG.write(buf);
    8001a634:	656e                	ld	a0,216(sp)
    8001a636:	fe2a                	sd	a0,312(sp)
    8001a638:	750e                	ld	a0,224(sp)
    8001a63a:	e2aa                	sd	a0,320(sp)
    8001a63c:	752e                	ld	a0,232(sp)
    8001a63e:	e6aa                	sd	a0,328(sp)
    8001a640:	754e                	ld	a0,240(sp)
    8001a642:	eaaa                	sd	a0,336(sp)
    8001a644:	756e                	ld	a0,248(sp)
    8001a646:	eeaa                	sd	a0,344(sp)

000000008001a648 <.LBB13_38>:
    8001a648:	0003f517          	auipc	a0,0x3f
    8001a64c:	02050513          	addi	a0,a0,32 # 80059668 <_ZN6kernel2fs3log3LOG17h2c1d1dbdf3a7e402E>
    8001a650:	1a2c                	addi	a1,sp,312
    8001a652:	fffee097          	auipc	ra,0xfffee
    8001a656:	79c080e7          	jalr	1948(ra) # 80008dee <_ZN6kernel2fs3log78_$LT$impl$u20$kernel..lock..spinlock..Spinlock$LT$kernel..fs..log..Log$GT$$GT$5write17ha48e3edeecccac4fE>
    8001a65a:	a009                	j	8001a65c <.LBB13_38+0x14>
        while total < count {
    8001a65c:	b599                	j	8001a4a2 <_ZN6kernel2fs5inode9InodeData5write17h219447b865f1c381E+0x40>
            self.dinode.size = offset as u32;
    8001a65e:	7586                	ld	a1,96(sp)
    8001a660:	652a                	ld	a0,136(sp)
    8001a662:	c988                	sw	a0,16(a1)
        if self.dinode.size < offset as u32 {
    8001a664:	a011                	j	8001a668 <.LBB13_38+0x20>
    8001a666:	a009                	j	8001a668 <.LBB13_38+0x20>
        self.update();
    8001a668:	7506                	ld	a0,96(sp)
    8001a66a:	fffff097          	auipc	ra,0xfffff
    8001a66e:	72a080e7          	jalr	1834(ra) # 80019d94 <_ZN6kernel2fs5inode9InodeData6update17h81f49ab31d0ddfdcE>
    8001a672:	a009                	j	8001a674 <.LBB13_38+0x2c>
        Ok(total)
    8001a674:	75a6                	ld	a1,104(sp)
    8001a676:	654a                	ld	a0,144(sp)
    8001a678:	e588                	sd	a0,8(a1)
    8001a67a:	4501                	li	a0,0
    8001a67c:	e188                	sd	a0,0(a1)
    }
    8001a67e:	a009                	j	8001a680 <.LBB13_38+0x38>
    8001a680:	70ba                	ld	ra,424(sp)
    8001a682:	615d                	addi	sp,sp,432
    8001a684:	8082                	ret

000000008001a686 <.LBB13_39>:
            let surplus_len = count - total;
    8001a686:	00010517          	auipc	a0,0x10
    8001a68a:	08a50513          	addi	a0,a0,138 # 8002a710 <str.1>

000000008001a68e <.LBB13_40>:
    8001a68e:	00010617          	auipc	a2,0x10
    8001a692:	69260613          	addi	a2,a2,1682 # 8002ad20 <.L__unnamed_69>
    8001a696:	02100593          	li	a1,33
    8001a69a:	00008097          	auipc	ra,0x8
    8001a69e:	a62080e7          	jalr	-1438(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008001a6a4 <.LBB13_41>:
            let write_len = min(surplus_len, BSIZE - block_offset);
    8001a6a4:	00010517          	auipc	a0,0x10
    8001a6a8:	06c50513          	addi	a0,a0,108 # 8002a710 <str.1>

000000008001a6ac <.LBB13_42>:
    8001a6ac:	00010617          	auipc	a2,0x10
    8001a6b0:	68c60613          	addi	a2,a2,1676 # 8002ad38 <.L__unnamed_70>
    8001a6b4:	02100593          	li	a1,33
    8001a6b8:	00008097          	auipc	ra,0x8
    8001a6bc:	a44080e7          	jalr	-1468(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008001a6c2 <.LBB13_43>:
            offset += write_len;
    8001a6c2:	00010517          	auipc	a0,0x10
    8001a6c6:	ffe50513          	addi	a0,a0,-2 # 8002a6c0 <str.0>

000000008001a6ca <.LBB13_44>:
    8001a6ca:	00010617          	auipc	a2,0x10
    8001a6ce:	6ae60613          	addi	a2,a2,1710 # 8002ad78 <.L__unnamed_71>
    8001a6d2:	45f1                	li	a1,28
    8001a6d4:	00008097          	auipc	ra,0x8
    8001a6d8:	a28080e7          	jalr	-1496(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008001a6de <.LBB13_45>:
            src += write_len;
    8001a6de:	00010517          	auipc	a0,0x10
    8001a6e2:	fe250513          	addi	a0,a0,-30 # 8002a6c0 <str.0>

000000008001a6e6 <.LBB13_46>:
    8001a6e6:	00010617          	auipc	a2,0x10
    8001a6ea:	6aa60613          	addi	a2,a2,1706 # 8002ad90 <.L__unnamed_72>
    8001a6ee:	45f1                	li	a1,28
    8001a6f0:	00008097          	auipc	ra,0x8
    8001a6f4:	a0c080e7          	jalr	-1524(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008001a6fa <.LBB13_47>:
            total += write_len;
    8001a6fa:	00010517          	auipc	a0,0x10
    8001a6fe:	fc650513          	addi	a0,a0,-58 # 8002a6c0 <str.0>

000000008001a702 <.LBB13_48>:
    8001a702:	00010617          	auipc	a2,0x10
    8001a706:	6a660613          	addi	a2,a2,1702 # 8002ada8 <.L__unnamed_73>
    8001a70a:	45f1                	li	a1,28
    8001a70c:	00008097          	auipc	ra,0x8
    8001a710:	9f0080e7          	jalr	-1552(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel2fs5inode9InodeData10dir_lookup17h2ffc093ee3be0a35E:

000000008001a716 <_ZN6kernel2fs5inode9InodeData10dir_lookup17h2ffc093ee3be0a35E>:
    pub fn dir_lookup(&mut self, name: &[u8]) -> Option<Inode> {
    8001a716:	7165                	addi	sp,sp,-400
    8001a718:	e706                	sd	ra,392(sp)
    8001a71a:	f436                	sd	a3,40(sp)
    8001a71c:	f832                	sd	a2,48(sp)
    8001a71e:	fc2e                	sd	a1,56(sp)
    8001a720:	e0aa                	sd	a0,64(sp)
    8001a722:	ea2e                	sd	a1,272(sp)
    8001a724:	ee32                	sd	a2,280(sp)
    8001a726:	f236                	sd	a3,288(sp)
        if self.dinode.itype != InodeType::Directory {
    8001a728:	00858513          	addi	a0,a1,8

000000008001a72c <.LBB14_37>:
    8001a72c:	00010597          	auipc	a1,0x10
    8001a730:	20c58593          	addi	a1,a1,524 # 8002a938 <.L__unnamed_25>
    8001a734:	ffffe097          	auipc	ra,0xffffe
    8001a738:	b46080e7          	jalr	-1210(ra) # 8001827a <_ZN4core3cmp9PartialEq2ne17ha4fd141ed85850e3E>
    8001a73c:	e4aa                	sd	a0,72(sp)
    8001a73e:	a009                	j	8001a740 <.LBB14_37+0x14>
    8001a740:	6526                	ld	a0,72(sp)
    8001a742:	4581                	li	a1,0
    8001a744:	02b50163          	beq	a0,a1,8001a766 <.LBB14_39+0x14>
    8001a748:	a009                	j	8001a74a <.LBB14_38>

000000008001a74a <.LBB14_38>:
            panic!("inode type is not directory");
    8001a74a:	00010517          	auipc	a0,0x10
    8001a74e:	67650513          	addi	a0,a0,1654 # 8002adc0 <.L__unnamed_74>

000000008001a752 <.LBB14_39>:
    8001a752:	00010617          	auipc	a2,0x10
    8001a756:	68e60613          	addi	a2,a2,1678 # 8002ade0 <.L__unnamed_75>
    8001a75a:	45ed                	li	a1,27
    8001a75c:	00008097          	auipc	ra,0x8
    8001a760:	9a0080e7          	jalr	-1632(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8001a764:	0000                	unimp
    8001a766:	4541                	li	a0,16
        let de_size = size_of::<DirEntry>();
    8001a768:	f62a                	sd	a0,296(sp)
    8001a76a:	a009                	j	8001a76c <.LBB14_39+0x1a>
        let mut dir_entry = DirEntry::new();
    8001a76c:	fffee097          	auipc	ra,0xfffee
    8001a770:	b72080e7          	jalr	-1166(ra) # 800082de <_ZN6kernel2fs6dinode8DirEntry3new17h74e849d4398bb7e4E>
    8001a774:	fa2a                	sd	a0,304(sp)
    8001a776:	fe2e                	sd	a1,312(sp)
    8001a778:	e8aa                	sd	a0,80(sp)
    8001a77a:	ecae                	sd	a1,88(sp)
    8001a77c:	a009                	j	8001a77e <.LBB14_39+0x2c>
    8001a77e:	7562                	ld	a0,56(sp)
    8001a780:	088c                	addi	a1,sp,80
        let dir_entry_ptr = &mut dir_entry as *mut _ as *mut u8;
    8001a782:	f02e                	sd	a1,32(sp)
    8001a784:	e2ae                	sd	a1,320(sp)
        for offset in (0..self.dinode.size).step_by(de_size) {
    8001a786:	4910                	lw	a2,16(a0)
    8001a788:	4581                	li	a1,0
    8001a78a:	c92e                	sw	a1,144(sp)
    8001a78c:	cb32                	sw	a2,148(sp)
    8001a78e:	18a8                	addi	a0,sp,120
    8001a790:	46c1                	li	a3,16
    8001a792:	ffff1097          	auipc	ra,0xffff1
    8001a796:	1d6080e7          	jalr	470(ra) # 8000b968 <_ZN4core4iter6traits8iterator8Iterator7step_by17ha7dfda23787d2a26E>
    8001a79a:	a009                	j	8001a79c <.LBB14_39+0x4a>
    8001a79c:	1088                	addi	a0,sp,96
    8001a79e:	18ac                	addi	a1,sp,120
    8001a7a0:	00002097          	auipc	ra,0x2
    8001a7a4:	63a080e7          	jalr	1594(ra) # 8001cdda <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h09fa161dbb9bcdd3E>
    8001a7a8:	a009                	j	8001a7aa <.LBB14_39+0x58>
    8001a7aa:	7546                	ld	a0,112(sp)
    8001a7ac:	f52a                	sd	a0,168(sp)
    8001a7ae:	7526                	ld	a0,104(sp)
    8001a7b0:	f12a                	sd	a0,160(sp)
    8001a7b2:	7506                	ld	a0,96(sp)
    8001a7b4:	ed2a                	sd	a0,152(sp)
    8001a7b6:	a009                	j	8001a7b8 <.LBB14_39+0x66>
    8001a7b8:	0928                	addi	a0,sp,152
    8001a7ba:	00002097          	auipc	ra,0x2
    8001a7be:	4e2080e7          	jalr	1250(ra) # 8001cc9c <_ZN105_$LT$core..iter..adapters..step_by..StepBy$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h04f2168711040ee1E>
    8001a7c2:	d92a                	sw	a0,176(sp)
    8001a7c4:	db2e                	sw	a1,180(sp)
    8001a7c6:	a009                	j	8001a7c8 <.LBB14_39+0x76>
    8001a7c8:	0b016503          	lwu	a0,176(sp)
    8001a7cc:	4581                	li	a1,0
    8001a7ce:	00b50463          	beq	a0,a1,8001a7d6 <.LBB14_39+0x84>
    8001a7d2:	a009                	j	8001a7d4 <.LBB14_39+0x82>
    8001a7d4:	a031                	j	8001a7e0 <.LBB14_39+0x8e>
    8001a7d6:	6586                	ld	a1,64(sp)
    8001a7d8:	4501                	li	a0,0
        None
    8001a7da:	e188                	sd	a0,0(a1)
    }
    8001a7dc:	aa31                	j	8001a8f8 <.LBB14_42+0x2e>
        for offset in (0..self.dinode.size).step_by(de_size) {
    8001a7de:	0000                	unimp
    8001a7e0:	7682                	ld	a3,32(sp)
    8001a7e2:	75e2                	ld	a1,56(sp)
    8001a7e4:	575a                	lw	a4,180(sp)
    8001a7e6:	14e12623          	sw	a4,332(sp)
    8001a7ea:	14e12823          	sw	a4,336(sp)
    8001a7ee:	14e12a23          	sw	a4,340(sp)
    8001a7f2:	1928                	addi	a0,sp,184
    8001a7f4:	4601                	li	a2,0
    8001a7f6:	47c1                	li	a5,16
            self.read(
    8001a7f8:	00000097          	auipc	ra,0x0
    8001a7fc:	918080e7          	jalr	-1768(ra) # 8001a110 <_ZN6kernel2fs5inode9InodeData4read17h2d02dc0e430e4837E>
    8001a800:	a009                	j	8001a802 <.LBB14_40>

000000008001a802 <.LBB14_40>:
    8001a802:	00010597          	auipc	a1,0x10
    8001a806:	5f658593          	addi	a1,a1,1526 # 8002adf8 <.L__unnamed_76>

000000008001a80a <.LBB14_41>:
    8001a80a:	00010697          	auipc	a3,0x10
    8001a80e:	60e68693          	addi	a3,a3,1550 # 8002ae18 <.L__unnamed_77>
    8001a812:	1928                	addi	a0,sp,184
    8001a814:	4675                	li	a2,29
    8001a816:	ffff2097          	auipc	ra,0xffff2
    8001a81a:	458080e7          	jalr	1112(ra) # 8000cc6e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17he26db02725b9ae65E>
    8001a81e:	a009                	j	8001a820 <.LBB14_41+0x16>
            if dir_entry.inum == 0 {
    8001a820:	05015503          	lhu	a0,80(sp)
    8001a824:	4581                	li	a1,0
    8001a826:	f8b509e3          	beq	a0,a1,8001a7b8 <.LBB14_39+0x66>
    8001a82a:	a009                	j	8001a82c <.LBB14_41+0x22>
    8001a82c:	4501                	li	a0,0
            for i in 0..DIRSIZ {
    8001a82e:	e9aa                	sd	a0,208(sp)
    8001a830:	45b9                	li	a1,14
    8001a832:	edae                	sd	a1,216(sp)
    8001a834:	00005097          	auipc	ra,0x5
    8001a838:	f94080e7          	jalr	-108(ra) # 8001f7c8 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he0a8d93712e5493bE>
    8001a83c:	e82a                	sd	a0,16(sp)
    8001a83e:	ec2e                	sd	a1,24(sp)
    8001a840:	a009                	j	8001a842 <.LBB14_41+0x38>
    8001a842:	6562                	ld	a0,24(sp)
    8001a844:	65c2                	ld	a1,16(sp)
    8001a846:	f1ae                	sd	a1,224(sp)
    8001a848:	f5aa                	sd	a0,232(sp)
    8001a84a:	a009                	j	8001a84c <.LBB14_41+0x42>
    8001a84c:	1188                	addi	a0,sp,224
    8001a84e:	00005097          	auipc	ra,0x5
    8001a852:	f0c080e7          	jalr	-244(ra) # 8001f75a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE>
    8001a856:	f9aa                	sd	a0,240(sp)
    8001a858:	fdae                	sd	a1,248(sp)
    8001a85a:	a009                	j	8001a85c <.LBB14_41+0x52>
    8001a85c:	754e                	ld	a0,240(sp)
    8001a85e:	4581                	li	a1,0
    8001a860:	00b50463          	beq	a0,a1,8001a868 <.LBB14_41+0x5e>
    8001a864:	a009                	j	8001a866 <.LBB14_41+0x5c>
    8001a866:	a019                	j	8001a86c <.LBB14_41+0x62>
    8001a868:	a079                	j	8001a8f6 <.LBB14_42+0x2c>
    8001a86a:	0000                	unimp
    8001a86c:	75ee                	ld	a1,248(sp)
    8001a86e:	e42e                	sd	a1,8(sp)
    8001a870:	eeae                	sd	a1,344(sp)
    8001a872:	f2ae                	sd	a1,352(sp)
    8001a874:	f6ae                	sd	a1,360(sp)
    8001a876:	4535                	li	a0,13
                if dir_entry.name[i] != name[i] {
    8001a878:	08b56363          	bltu	a0,a1,8001a8fe <.LBB14_42+0x34>
    8001a87c:	a009                	j	8001a87e <.LBB14_41+0x74>
    8001a87e:	6522                	ld	a0,8(sp)
    8001a880:	75a2                	ld	a1,40(sp)
    8001a882:	0890                	addi	a2,sp,80
    8001a884:	962a                	add	a2,a2,a0
    8001a886:	00264603          	lbu	a2,2(a2)
    8001a88a:	e032                	sd	a2,0(sp)
    8001a88c:	08b57463          	bgeu	a0,a1,8001a914 <.LBB14_43+0x14>
    8001a890:	a009                	j	8001a892 <.LBB14_41+0x88>
    8001a892:	6502                	ld	a0,0(sp)
    8001a894:	75c2                	ld	a1,48(sp)
    8001a896:	6622                	ld	a2,8(sp)
    8001a898:	95b2                	add	a1,a1,a2
    8001a89a:	0005c583          	lbu	a1,0(a1)
    8001a89e:	00b50463          	beq	a0,a1,8001a8a6 <.LBB14_41+0x9c>
    8001a8a2:	a009                	j	8001a8a4 <.LBB14_41+0x9a>
    8001a8a4:	a889                	j	8001a8f6 <.LBB14_42+0x2c>
    8001a8a6:	65a2                	ld	a1,8(sp)
    8001a8a8:	4535                	li	a0,13
                if dir_entry.name[i] == 0 {
    8001a8aa:	08b56063          	bltu	a0,a1,8001a92a <.LBB14_44+0x12>
    8001a8ae:	a009                	j	8001a8b0 <.LBB14_41+0xa6>
    8001a8b0:	65a2                	ld	a1,8(sp)
    8001a8b2:	0888                	addi	a0,sp,80
    8001a8b4:	952e                	add	a0,a0,a1
    8001a8b6:	00254503          	lbu	a0,2(a0)
    8001a8ba:	4581                	li	a1,0
    8001a8bc:	02b51463          	bne	a0,a1,8001a8e4 <.LBB14_42+0x1a>
    8001a8c0:	a009                	j	8001a8c2 <.LBB14_41+0xb8>
                    return Some(ICACHE.get(self.dev, dir_entry.inum as u32))
    8001a8c2:	7562                	ld	a0,56(sp)
    8001a8c4:	05015603          	lhu	a2,80(sp)
    8001a8c8:	410c                	lw	a1,0(a0)

000000008001a8ca <.LBB14_42>:
    8001a8ca:	0003f517          	auipc	a0,0x3f
    8001a8ce:	e4650513          	addi	a0,a0,-442 # 80059710 <_ZN6kernel2fs5inode6ICACHE17had1be8942ca79bf1E>
    8001a8d2:	ffffe097          	auipc	ra,0xffffe
    8001a8d6:	2ba080e7          	jalr	698(ra) # 80018b8c <_ZN6kernel2fs5inode10InodeCache3get17h50a5b70dd332d913E>
    8001a8da:	faaa                	sd	a0,368(sp)
    8001a8dc:	feae                	sd	a1,376(sp)
    8001a8de:	e22a                	sd	a0,256(sp)
    8001a8e0:	e62e                	sd	a1,264(sp)
    8001a8e2:	a011                	j	8001a8e6 <.LBB14_42+0x1c>
            for i in 0..DIRSIZ {
    8001a8e4:	b7a5                	j	8001a84c <.LBB14_41+0x42>
                    return Some(ICACHE.get(self.dev, dir_entry.inum as u32))
    8001a8e6:	6586                	ld	a1,64(sp)
    8001a8e8:	6532                	ld	a0,264(sp)
    8001a8ea:	e988                	sd	a0,16(a1)
    8001a8ec:	6512                	ld	a0,256(sp)
    8001a8ee:	e588                	sd	a0,8(a1)
    8001a8f0:	4505                	li	a0,1
    8001a8f2:	e188                	sd	a0,0(a1)
    }
    8001a8f4:	a011                	j	8001a8f8 <.LBB14_42+0x2e>
        for offset in (0..self.dinode.size).step_by(de_size) {
    8001a8f6:	b5c9                	j	8001a7b8 <.LBB14_39+0x66>
    }
    8001a8f8:	60ba                	ld	ra,392(sp)
    8001a8fa:	6159                	addi	sp,sp,400
    8001a8fc:	8082                	ret
                if dir_entry.name[i] != name[i] {
    8001a8fe:	6522                	ld	a0,8(sp)

000000008001a900 <.LBB14_43>:
    8001a900:	00010617          	auipc	a2,0x10
    8001a904:	53060613          	addi	a2,a2,1328 # 8002ae30 <.L__unnamed_78>
    8001a908:	45b9                	li	a1,14
    8001a90a:	00008097          	auipc	ra,0x8
    8001a90e:	81e080e7          	jalr	-2018(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    8001a912:	0000                	unimp
    8001a914:	75a2                	ld	a1,40(sp)
    8001a916:	6522                	ld	a0,8(sp)

000000008001a918 <.LBB14_44>:
    8001a918:	00010617          	auipc	a2,0x10
    8001a91c:	53060613          	addi	a2,a2,1328 # 8002ae48 <.L__unnamed_79>
    8001a920:	00008097          	auipc	ra,0x8
    8001a924:	808080e7          	jalr	-2040(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    8001a928:	0000                	unimp
                if dir_entry.name[i] == 0 {
    8001a92a:	6522                	ld	a0,8(sp)

000000008001a92c <.LBB14_45>:
    8001a92c:	00010617          	auipc	a2,0x10
    8001a930:	53460613          	addi	a2,a2,1332 # 8002ae60 <.L__unnamed_80>
    8001a934:	45b9                	li	a1,14
    8001a936:	00007097          	auipc	ra,0x7
    8001a93a:	7f2080e7          	jalr	2034(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel2fs5inode9InodeData8dir_link17h13a19ea2d651643eE:

000000008001a940 <_ZN6kernel2fs5inode9InodeData8dir_link17h13a19ea2d651643eE>:
    pub fn dir_link(&mut self, name: &[u8], inum: u32) -> Result<(), &'static str>{
    8001a940:	df010113          	addi	sp,sp,-528
    8001a944:	20113423          	sd	ra,520(sp)
    8001a948:	e136                	sd	a3,128(sp)
    8001a94a:	86b2                	mv	a3,a2
    8001a94c:	f8b6                	sd	a3,112(sp)
    8001a94e:	862e                	mv	a2,a1
    8001a950:	fcb2                	sd	a2,120(sp)
    8001a952:	85aa                	mv	a1,a0
    8001a954:	650a                	ld	a0,128(sp)
    8001a956:	e52e                	sd	a1,136(sp)
    8001a958:	872a                	mv	a4,a0
    8001a95a:	e93a                	sd	a4,144(sp)
    8001a95c:	eb2e                	sd	a1,400(sp)
    8001a95e:	ef32                	sd	a2,408(sp)
    8001a960:	f336                	sd	a3,416(sp)
    8001a962:	1aa12623          	sw	a0,428(sp)
    8001a966:	1128                	addi	a0,sp,168
        if self.dir_lookup(name).is_some() {
    8001a968:	00000097          	auipc	ra,0x0
    8001a96c:	dae080e7          	jalr	-594(ra) # 8001a716 <_ZN6kernel2fs5inode9InodeData10dir_lookup17h2ffc093ee3be0a35E>
    8001a970:	a009                	j	8001a972 <_ZN6kernel2fs5inode9InodeData8dir_link17h13a19ea2d651643eE+0x32>
    8001a972:	1128                	addi	a0,sp,168
    8001a974:	ffff4097          	auipc	ra,0xffff4
    8001a978:	576080e7          	jalr	1398(ra) # 8000eeea <_ZN4core6option15Option$LT$T$GT$7is_some17h901b9974d3eea8b8E>
    8001a97c:	f4aa                	sd	a0,104(sp)
    8001a97e:	a009                	j	8001a980 <_ZN6kernel2fs5inode9InodeData8dir_link17h13a19ea2d651643eE+0x40>
    8001a980:	1128                	addi	a0,sp,168
    8001a982:	fffec097          	auipc	ra,0xfffec
    8001a986:	622080e7          	jalr	1570(ra) # 80006fa4 <_ZN4core3ptr73drop_in_place$LT$core..option..Option$LT$kernel..fs..inode..Inode$GT$$GT$17h6a7b3b84406d6cdfE>
    8001a98a:	a009                	j	8001a98c <_ZN6kernel2fs5inode9InodeData8dir_link17h13a19ea2d651643eE+0x4c>
    8001a98c:	7526                	ld	a0,104(sp)
    8001a98e:	4581                	li	a1,0
    8001a990:	00b50c63          	beq	a0,a1,8001a9a8 <.LBB15_43+0x12>
    8001a994:	a009                	j	8001a996 <.LBB15_43>

000000008001a996 <.LBB15_43>:
            return Err("It's incorrect to find entry in disk")
    8001a996:	00010517          	auipc	a0,0x10
    8001a99a:	4e250513          	addi	a0,a0,1250 # 8002ae78 <.L__unnamed_81>
    8001a99e:	ed2a                	sd	a0,152(sp)
    8001a9a0:	02400513          	li	a0,36
    8001a9a4:	f12a                	sd	a0,160(sp)
    8001a9a6:	aae9                	j	8001ab80 <.LBB15_43+0x1ea>
        let mut dir_entry = DirEntry::new();
    8001a9a8:	fffee097          	auipc	ra,0xfffee
    8001a9ac:	936080e7          	jalr	-1738(ra) # 800082de <_ZN6kernel2fs6dinode8DirEntry3new17h74e849d4398bb7e4E>
    8001a9b0:	fb2a                	sd	a0,432(sp)
    8001a9b2:	ff2e                	sd	a1,440(sp)
    8001a9b4:	e1aa                	sd	a0,192(sp)
    8001a9b6:	e5ae                	sd	a1,200(sp)
    8001a9b8:	a009                	j	8001a9ba <.LBB15_43+0x24>
    8001a9ba:	652a                	ld	a0,136(sp)
    8001a9bc:	4581                	li	a1,0
        let mut entry_offset = 0;
    8001a9be:	cbae                	sw	a1,212(sp)
        for offset in (0..self.dinode.size).step_by(size_of::<DirEntry>()) {
    8001a9c0:	4908                	lw	a0,16(a0)
    8001a9c2:	10b12423          	sw	a1,264(sp)
    8001a9c6:	10a12623          	sw	a0,268(sp)
    8001a9ca:	a009                	j	8001a9cc <.LBB15_43+0x36>
    8001a9cc:	10c12603          	lw	a2,268(sp)
    8001a9d0:	10812583          	lw	a1,264(sp)
    8001a9d4:	1988                	addi	a0,sp,240
    8001a9d6:	46c1                	li	a3,16
    8001a9d8:	ffff1097          	auipc	ra,0xffff1
    8001a9dc:	f90080e7          	jalr	-112(ra) # 8000b968 <_ZN4core4iter6traits8iterator8Iterator7step_by17ha7dfda23787d2a26E>
    8001a9e0:	a009                	j	8001a9e2 <.LBB15_43+0x4c>
    8001a9e2:	09a8                	addi	a0,sp,216
    8001a9e4:	198c                	addi	a1,sp,240
    8001a9e6:	00002097          	auipc	ra,0x2
    8001a9ea:	3f4080e7          	jalr	1012(ra) # 8001cdda <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h09fa161dbb9bcdd3E>
    8001a9ee:	a009                	j	8001a9f0 <.LBB15_43+0x5a>
    8001a9f0:	752e                	ld	a0,232(sp)
    8001a9f2:	f22a                	sd	a0,288(sp)
    8001a9f4:	750e                	ld	a0,224(sp)
    8001a9f6:	ee2a                	sd	a0,280(sp)
    8001a9f8:	656e                	ld	a0,216(sp)
    8001a9fa:	ea2a                	sd	a0,272(sp)
    8001a9fc:	a009                	j	8001a9fe <.LBB15_43+0x68>
    8001a9fe:	0a08                	addi	a0,sp,272
    8001aa00:	00002097          	auipc	ra,0x2
    8001aa04:	29c080e7          	jalr	668(ra) # 8001cc9c <_ZN105_$LT$core..iter..adapters..step_by..StepBy$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h04f2168711040ee1E>
    8001aa08:	12a12423          	sw	a0,296(sp)
    8001aa0c:	12b12623          	sw	a1,300(sp)
    8001aa10:	a009                	j	8001aa12 <.LBB15_43+0x7c>
    8001aa12:	12816503          	lwu	a0,296(sp)
    8001aa16:	4581                	li	a1,0
    8001aa18:	00b50463          	beq	a0,a1,8001aa20 <.LBB15_43+0x8a>
    8001aa1c:	a009                	j	8001aa1e <.LBB15_43+0x88>
    8001aa1e:	a019                	j	8001aa24 <.LBB15_43+0x8e>
    8001aa20:	a05d                	j	8001aac6 <.LBB15_43+0x130>
    8001aa22:	0000                	unimp
    8001aa24:	12c16503          	lwu	a0,300(sp)
    8001aa28:	ecaa                	sd	a0,88(sp)
    8001aa2a:	1ca12623          	sw	a0,460(sp)
    8001aa2e:	1ca12823          	sw	a0,464(sp)
    8001aa32:	1ca12a23          	sw	a0,468(sp)
    8001aa36:	0188                	addi	a0,sp,192
                size_of::<DirEntry>() as u32
    8001aa38:	f0aa                	sd	a0,96(sp)
    8001aa3a:	a009                	j	8001aa3c <.LBB15_43+0xa6>
            self.read(
    8001aa3c:	6766                	ld	a4,88(sp)
    8001aa3e:	7686                	ld	a3,96(sp)
    8001aa40:	65aa                	ld	a1,136(sp)
    8001aa42:	02a8                	addi	a0,sp,328
    8001aa44:	4601                	li	a2,0
    8001aa46:	47c1                	li	a5,16
    8001aa48:	fffff097          	auipc	ra,0xfffff
    8001aa4c:	6c8080e7          	jalr	1736(ra) # 8001a110 <_ZN6kernel2fs5inode9InodeData4read17h2d02dc0e430e4837E>
    8001aa50:	a009                	j	8001aa52 <.LBB15_43+0xbc>
    8001aa52:	1a08                	addi	a0,sp,304
    8001aa54:	02ac                	addi	a1,sp,328
    8001aa56:	ffff2097          	auipc	ra,0xffff2
    8001aa5a:	67c080e7          	jalr	1660(ra) # 8000d0d2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h0dd4a8728df8a7c8E>
    8001aa5e:	a009                	j	8001aa60 <.LBB15_43+0xca>
            )?;
    8001aa60:	7552                	ld	a0,304(sp)
    8001aa62:	4581                	li	a1,0
    8001aa64:	00b50463          	beq	a0,a1,8001aa6c <.LBB15_43+0xd6>
    8001aa68:	a009                	j	8001aa6a <.LBB15_43+0xd4>
    8001aa6a:	a029                	j	8001aa74 <.LBB15_43+0xde>
            self.read(
    8001aa6c:	7572                	ld	a0,312(sp)
    8001aa6e:	f7aa                	sd	a0,488(sp)
            entry_offset += size_of::<DirEntry>() as u32;
    8001aa70:	a035                	j	8001aa9c <.LBB15_43+0x106>
            self.read(
    8001aa72:	0000                	unimp
            )?;
    8001aa74:	7572                	ld	a0,312(sp)
    8001aa76:	6596                	ld	a1,320(sp)
    8001aa78:	efaa                	sd	a0,472(sp)
    8001aa7a:	f3ae                	sd	a1,480(sp)
    8001aa7c:	ffff1097          	auipc	ra,0xffff1
    8001aa80:	f48080e7          	jalr	-184(ra) # 8000b9c4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h6f3e3843c20d184aE>
    8001aa84:	e4aa                	sd	a0,72(sp)
    8001aa86:	e8ae                	sd	a1,80(sp)
    8001aa88:	a009                	j	8001aa8a <.LBB15_43+0xf4>
            self.read(
    8001aa8a:	65c6                	ld	a1,80(sp)
    8001aa8c:	6526                	ld	a0,72(sp)
    8001aa8e:	ffff2097          	auipc	ra,0xffff2
    8001aa92:	5ec080e7          	jalr	1516(ra) # 8000d07a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h9d11a50f8e490b2eE>
    8001aa96:	ed2a                	sd	a0,152(sp)
    8001aa98:	f12e                	sd	a1,160(sp)
    8001aa9a:	a0dd                	j	8001ab80 <.LBB15_43+0x1ea>
            entry_offset += size_of::<DirEntry>() as u32;
    8001aa9c:	0d416503          	lwu	a0,212(sp)
    8001aaa0:	01050593          	addi	a1,a0,16
    8001aaa4:	e0ae                	sd	a1,64(sp)
    8001aaa6:	02059513          	slli	a0,a1,0x20
    8001aaaa:	9101                	srli	a0,a0,0x20
    8001aaac:	0eb51163          	bne	a0,a1,8001ab8e <.LBB15_44>
    8001aab0:	a009                	j	8001aab2 <.LBB15_43+0x11c>
    8001aab2:	6506                	ld	a0,64(sp)
    8001aab4:	cbaa                	sw	a0,212(sp)
            if dir_entry.inum == 0 {
    8001aab6:	0c015503          	lhu	a0,192(sp)
    8001aaba:	4581                	li	a1,0
    8001aabc:	00b51463          	bne	a0,a1,8001aac4 <.LBB15_43+0x12e>
    8001aac0:	a009                	j	8001aac2 <.LBB15_43+0x12c>
    8001aac2:	a011                	j	8001aac6 <.LBB15_43+0x130>
        for offset in (0..self.dinode.size).step_by(size_of::<DirEntry>()) {
    8001aac4:	bf2d                	j	8001a9fe <.LBB15_43+0x68>
            ptr::copy(name.as_ptr(), dir_entry.name.as_mut_ptr(), name.len());
    8001aac6:	75c6                	ld	a1,112(sp)
    8001aac8:	7566                	ld	a0,120(sp)
    8001aaca:	00005097          	auipc	ra,0x5
    8001aace:	9ec080e7          	jalr	-1556(ra) # 8001f4b6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hf7620495824cfb20E>
    8001aad2:	fc2a                	sd	a0,56(sp)
    8001aad4:	a009                	j	8001aad6 <.LBB15_43+0x140>
    8001aad6:	0c210513          	addi	a0,sp,194
    8001aada:	45b9                	li	a1,14
    8001aadc:	00005097          	auipc	ra,0x5
    8001aae0:	938080e7          	jalr	-1736(ra) # 8001f414 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h69a6648c691317bcE>
    8001aae4:	f82a                	sd	a0,48(sp)
    8001aae6:	a009                	j	8001aae8 <.LBB15_43+0x152>
    8001aae8:	75c6                	ld	a1,112(sp)
    8001aaea:	7566                	ld	a0,120(sp)
    8001aaec:	00005097          	auipc	ra,0x5
    8001aaf0:	96e080e7          	jalr	-1682(ra) # 8001f45a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hb06ce83b043493f3E>
    8001aaf4:	f42a                	sd	a0,40(sp)
    8001aaf6:	a009                	j	8001aaf8 <.LBB15_43+0x162>
    8001aaf8:	7622                	ld	a2,40(sp)
    8001aafa:	75e2                	ld	a1,56(sp)
    8001aafc:	7542                	ld	a0,48(sp)
    8001aafe:	0000a097          	auipc	ra,0xa
    8001ab02:	552080e7          	jalr	1362(ra) # 80025050 <memmove>
    8001ab06:	a009                	j	8001ab08 <.LBB15_43+0x172>
        dir_entry.inum = inum as u16;
    8001ab08:	654a                	ld	a0,144(sp)
    8001ab0a:	0ca11023          	sh	a0,192(sp)
    8001ab0e:	0188                	addi	a0,sp,192
            entry_offset, 
    8001ab10:	ec2a                	sd	a0,24(sp)
    8001ab12:	0d416503          	lwu	a0,212(sp)
            size_of::<DirEntry>() as u32
    8001ab16:	f02a                	sd	a0,32(sp)
    8001ab18:	a009                	j	8001ab1a <.LBB15_43+0x184>
        self.write(
    8001ab1a:	7702                	ld	a4,32(sp)
    8001ab1c:	66e2                	ld	a3,24(sp)
    8001ab1e:	65aa                	ld	a1,136(sp)
    8001ab20:	1aa8                	addi	a0,sp,376
    8001ab22:	4601                	li	a2,0
    8001ab24:	47c1                	li	a5,16
    8001ab26:	00000097          	auipc	ra,0x0
    8001ab2a:	93c080e7          	jalr	-1732(ra) # 8001a462 <_ZN6kernel2fs5inode9InodeData5write17h219447b865f1c381E>
    8001ab2e:	a009                	j	8001ab30 <.LBB15_43+0x19a>
    8001ab30:	1288                	addi	a0,sp,352
    8001ab32:	1aac                	addi	a1,sp,376
    8001ab34:	ffff2097          	auipc	ra,0xffff2
    8001ab38:	59e080e7          	jalr	1438(ra) # 8000d0d2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h0dd4a8728df8a7c8E>
    8001ab3c:	a009                	j	8001ab3e <.LBB15_43+0x1a8>
        )?;
    8001ab3e:	7516                	ld	a0,352(sp)
    8001ab40:	4581                	li	a1,0
    8001ab42:	00b50463          	beq	a0,a1,8001ab4a <.LBB15_43+0x1b4>
    8001ab46:	a009                	j	8001ab48 <.LBB15_43+0x1b2>
    8001ab48:	a801                	j	8001ab58 <.LBB15_43+0x1c2>
        self.write(
    8001ab4a:	7536                	ld	a0,360(sp)
    8001ab4c:	20a13023          	sd	a0,512(sp)
    8001ab50:	4501                	li	a0,0
        Ok(())
    8001ab52:	ed2a                	sd	a0,152(sp)
    }
    8001ab54:	a035                	j	8001ab80 <.LBB15_43+0x1ea>
        self.write(
    8001ab56:	0000                	unimp
        )?;
    8001ab58:	7536                	ld	a0,360(sp)
    8001ab5a:	75d6                	ld	a1,368(sp)
    8001ab5c:	fbaa                	sd	a0,496(sp)
    8001ab5e:	ffae                	sd	a1,504(sp)
    8001ab60:	ffff1097          	auipc	ra,0xffff1
    8001ab64:	e64080e7          	jalr	-412(ra) # 8000b9c4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h6f3e3843c20d184aE>
    8001ab68:	e42a                	sd	a0,8(sp)
    8001ab6a:	e82e                	sd	a1,16(sp)
    8001ab6c:	a009                	j	8001ab6e <.LBB15_43+0x1d8>
        self.write(
    8001ab6e:	65c2                	ld	a1,16(sp)
    8001ab70:	6522                	ld	a0,8(sp)
    8001ab72:	ffff2097          	auipc	ra,0xffff2
    8001ab76:	508080e7          	jalr	1288(ra) # 8000d07a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h9d11a50f8e490b2eE>
    8001ab7a:	ed2a                	sd	a0,152(sp)
    8001ab7c:	f12e                	sd	a1,160(sp)
    8001ab7e:	a009                	j	8001ab80 <.LBB15_43+0x1ea>
    }
    8001ab80:	656a                	ld	a0,152(sp)
    8001ab82:	758a                	ld	a1,160(sp)
    8001ab84:	20813083          	ld	ra,520(sp)
    8001ab88:	21010113          	addi	sp,sp,528
    8001ab8c:	8082                	ret

000000008001ab8e <.LBB15_44>:
            entry_offset += size_of::<DirEntry>() as u32;
    8001ab8e:	00010517          	auipc	a0,0x10
    8001ab92:	b3250513          	addi	a0,a0,-1230 # 8002a6c0 <str.0>

000000008001ab96 <.LBB15_45>:
    8001ab96:	00010617          	auipc	a2,0x10
    8001ab9a:	30a60613          	addi	a2,a2,778 # 8002aea0 <.L__unnamed_82>
    8001ab9e:	45f1                	li	a1,28
    8001aba0:	00007097          	auipc	ra,0x7
    8001aba4:	55c080e7          	jalr	1372(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel2fs5inode9InodeData12is_dir_empty17h5fc1239b2ba5dde8E:

000000008001abaa <_ZN6kernel2fs5inode9InodeData12is_dir_empty17h5fc1239b2ba5dde8E>:
    pub fn is_dir_empty(&mut self) -> bool {
    8001abaa:	7151                	addi	sp,sp,-240
    8001abac:	f586                	sd	ra,232(sp)
    8001abae:	f42a                	sd	a0,40(sp)
    8001abb0:	fd2a                	sd	a0,184(sp)
        let mut dir_entry = DirEntry::new();
    8001abb2:	fffed097          	auipc	ra,0xfffed
    8001abb6:	72c080e7          	jalr	1836(ra) # 800082de <_ZN6kernel2fs6dinode8DirEntry3new17h74e849d4398bb7e4E>
    8001abba:	e1aa                	sd	a0,192(sp)
    8001abbc:	e5ae                	sd	a1,200(sp)
    8001abbe:	fc2a                	sd	a0,56(sp)
    8001abc0:	e0ae                	sd	a1,64(sp)
    8001abc2:	a009                	j	8001abc4 <_ZN6kernel2fs5inode9InodeData12is_dir_empty17h5fc1239b2ba5dde8E+0x1a>
        let init_size = 2 * size_of::<DirEntry>() as u32;
    8001abc4:	a009                	j	8001abc6 <_ZN6kernel2fs5inode9InodeData12is_dir_empty17h5fc1239b2ba5dde8E+0x1c>
    8001abc6:	02000513          	li	a0,32
    8001abca:	f02a                	sd	a0,32(sp)
    8001abcc:	4501                	li	a0,0
    8001abce:	e565                	bnez	a0,8001acb6 <.LBB16_24>
    8001abd0:	a009                	j	8001abd2 <_ZN6kernel2fs5inode9InodeData12is_dir_empty17h5fc1239b2ba5dde8E+0x28>
    8001abd2:	7582                	ld	a1,32(sp)
    8001abd4:	7522                	ld	a0,40(sp)
    8001abd6:	cbae                	sw	a1,212(sp)
        let final_size = self.dinode.size;
    8001abd8:	4908                	lw	a0,16(a0)
    8001abda:	cdaa                	sw	a0,216(sp)
        for offset in (init_size..final_size).step_by(size_of::<DirEntry>()) {
    8001abdc:	dcae                	sw	a1,120(sp)
    8001abde:	deaa                	sw	a0,124(sp)
    8001abe0:	a009                	j	8001abe2 <_ZN6kernel2fs5inode9InodeData12is_dir_empty17h5fc1239b2ba5dde8E+0x38>
    8001abe2:	5676                	lw	a2,124(sp)
    8001abe4:	55e6                	lw	a1,120(sp)
    8001abe6:	1088                	addi	a0,sp,96
    8001abe8:	46c1                	li	a3,16
    8001abea:	ffff1097          	auipc	ra,0xffff1
    8001abee:	d7e080e7          	jalr	-642(ra) # 8000b968 <_ZN4core4iter6traits8iterator8Iterator7step_by17ha7dfda23787d2a26E>
    8001abf2:	a009                	j	8001abf4 <_ZN6kernel2fs5inode9InodeData12is_dir_empty17h5fc1239b2ba5dde8E+0x4a>
    8001abf4:	00a8                	addi	a0,sp,72
    8001abf6:	108c                	addi	a1,sp,96
    8001abf8:	00002097          	auipc	ra,0x2
    8001abfc:	1e2080e7          	jalr	482(ra) # 8001cdda <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h09fa161dbb9bcdd3E>
    8001ac00:	a009                	j	8001ac02 <_ZN6kernel2fs5inode9InodeData12is_dir_empty17h5fc1239b2ba5dde8E+0x58>
    8001ac02:	6566                	ld	a0,88(sp)
    8001ac04:	e92a                	sd	a0,144(sp)
    8001ac06:	6546                	ld	a0,80(sp)
    8001ac08:	e52a                	sd	a0,136(sp)
    8001ac0a:	6526                	ld	a0,72(sp)
    8001ac0c:	e12a                	sd	a0,128(sp)
    8001ac0e:	a009                	j	8001ac10 <_ZN6kernel2fs5inode9InodeData12is_dir_empty17h5fc1239b2ba5dde8E+0x66>
    8001ac10:	0108                	addi	a0,sp,128
    8001ac12:	00002097          	auipc	ra,0x2
    8001ac16:	08a080e7          	jalr	138(ra) # 8001cc9c <_ZN105_$LT$core..iter..adapters..step_by..StepBy$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h04f2168711040ee1E>
    8001ac1a:	cd2a                	sw	a0,152(sp)
    8001ac1c:	cf2e                	sw	a1,156(sp)
    8001ac1e:	a009                	j	8001ac20 <_ZN6kernel2fs5inode9InodeData12is_dir_empty17h5fc1239b2ba5dde8E+0x76>
    8001ac20:	09816503          	lwu	a0,152(sp)
    8001ac24:	4581                	li	a1,0
    8001ac26:	00b50463          	beq	a0,a1,8001ac2e <_ZN6kernel2fs5inode9InodeData12is_dir_empty17h5fc1239b2ba5dde8E+0x84>
    8001ac2a:	a009                	j	8001ac2c <_ZN6kernel2fs5inode9InodeData12is_dir_empty17h5fc1239b2ba5dde8E+0x82>
    8001ac2c:	a031                	j	8001ac38 <_ZN6kernel2fs5inode9InodeData12is_dir_empty17h5fc1239b2ba5dde8E+0x8e>
    8001ac2e:	4501                	li	a0,0
        false
    8001ac30:	02a10ba3          	sb	a0,55(sp)
    }
    8001ac34:	a8a5                	j	8001acac <.LBB16_23+0x2c>
        for offset in (init_size..final_size).step_by(size_of::<DirEntry>()) {
    8001ac36:	0000                	unimp
    8001ac38:	09c16503          	lwu	a0,156(sp)
    8001ac3c:	e82a                	sd	a0,16(sp)
    8001ac3e:	cfaa                	sw	a0,220(sp)
    8001ac40:	d1aa                	sw	a0,224(sp)
    8001ac42:	d3aa                	sw	a0,228(sp)
    8001ac44:	1828                	addi	a0,sp,56
                size_of::<DirEntry>() as u32
    8001ac46:	ec2a                	sd	a0,24(sp)
    8001ac48:	a009                	j	8001ac4a <_ZN6kernel2fs5inode9InodeData12is_dir_empty17h5fc1239b2ba5dde8E+0xa0>
            if self.read(
    8001ac4a:	6742                	ld	a4,16(sp)
    8001ac4c:	66e2                	ld	a3,24(sp)
    8001ac4e:	75a2                	ld	a1,40(sp)
    8001ac50:	1108                	addi	a0,sp,160
    8001ac52:	4601                	li	a2,0
    8001ac54:	47c1                	li	a5,16
    8001ac56:	fffff097          	auipc	ra,0xfffff
    8001ac5a:	4ba080e7          	jalr	1210(ra) # 8001a110 <_ZN6kernel2fs5inode9InodeData4read17h2d02dc0e430e4837E>
    8001ac5e:	a009                	j	8001ac60 <_ZN6kernel2fs5inode9InodeData12is_dir_empty17h5fc1239b2ba5dde8E+0xb6>
    8001ac60:	1108                	addi	a0,sp,160
    8001ac62:	ffff2097          	auipc	ra,0xffff2
    8001ac66:	072080e7          	jalr	114(ra) # 8000ccd4 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17he593c7735b347060E>
    8001ac6a:	e42a                	sd	a0,8(sp)
    8001ac6c:	a009                	j	8001ac6e <_ZN6kernel2fs5inode9InodeData12is_dir_empty17h5fc1239b2ba5dde8E+0xc4>
    8001ac6e:	6522                	ld	a0,8(sp)
    8001ac70:	4581                	li	a1,0
    8001ac72:	02b50263          	beq	a0,a1,8001ac96 <.LBB16_23+0x16>
    8001ac76:	a009                	j	8001ac78 <.LBB16_22>

000000008001ac78 <.LBB16_22>:
                panic!("is_dir_empty(): Fail to read dir content");
    8001ac78:	00010517          	auipc	a0,0x10
    8001ac7c:	27950513          	addi	a0,a0,633 # 8002aef1 <.L__unnamed_83>

000000008001ac80 <.LBB16_23>:
    8001ac80:	00010617          	auipc	a2,0x10
    8001ac84:	2a060613          	addi	a2,a2,672 # 8002af20 <.L__unnamed_84>
    8001ac88:	02800593          	li	a1,40
    8001ac8c:	00007097          	auipc	ra,0x7
    8001ac90:	470080e7          	jalr	1136(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8001ac94:	0000                	unimp
            if dir_entry.inum != 0 {
    8001ac96:	03815503          	lhu	a0,56(sp)
    8001ac9a:	4581                	li	a1,0
    8001ac9c:	00b50763          	beq	a0,a1,8001acaa <.LBB16_23+0x2a>
    8001aca0:	a009                	j	8001aca2 <.LBB16_23+0x22>
    8001aca2:	4505                	li	a0,1
                return true
    8001aca4:	02a10ba3          	sb	a0,55(sp)
    }
    8001aca8:	a011                	j	8001acac <.LBB16_23+0x2c>
        for offset in (init_size..final_size).step_by(size_of::<DirEntry>()) {
    8001acaa:	b79d                	j	8001ac10 <_ZN6kernel2fs5inode9InodeData12is_dir_empty17h5fc1239b2ba5dde8E+0x66>
    }
    8001acac:	03714503          	lbu	a0,55(sp)
    8001acb0:	70ae                	ld	ra,232(sp)
    8001acb2:	616d                	addi	sp,sp,240
    8001acb4:	8082                	ret

000000008001acb6 <.LBB16_24>:
        let init_size = 2 * size_of::<DirEntry>() as u32;
    8001acb6:	00010517          	auipc	a0,0x10
    8001acba:	21a50513          	addi	a0,a0,538 # 8002aed0 <str.2>

000000008001acbe <.LBB16_25>:
    8001acbe:	00010617          	auipc	a2,0x10
    8001acc2:	1fa60613          	addi	a2,a2,506 # 8002aeb8 <.L__unnamed_85>
    8001acc6:	02100593          	li	a1,33
    8001acca:	00007097          	auipc	ra,0x7
    8001acce:	432080e7          	jalr	1074(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN63_$LT$kernel..fs..inode..Inode$u20$as$u20$core..clone..Clone$GT$5clone17hdd0850fb54e2bc6cE:

000000008001acd4 <_ZN63_$LT$kernel..fs..inode..Inode$u20$as$u20$core..clone..Clone$GT$5clone17hdd0850fb54e2bc6cE>:
    fn clone(&self) -> Self {
    8001acd4:	7139                	addi	sp,sp,-64
    8001acd6:	fc06                	sd	ra,56(sp)
    8001acd8:	85aa                	mv	a1,a0
    8001acda:	ec2e                	sd	a1,24(sp)

000000008001acdc <.LBB17_2>:
        ICACHE.dup(self)
    8001acdc:	0003f517          	auipc	a0,0x3f
    8001ace0:	a3450513          	addi	a0,a0,-1484 # 80059710 <_ZN6kernel2fs5inode6ICACHE17had1be8942ca79bf1E>
    8001ace4:	ffffe097          	auipc	ra,0xffffe
    8001ace8:	ace080e7          	jalr	-1330(ra) # 800187b2 <_ZN6kernel2fs5inode10InodeCache3dup17h6659572d8df32b14E>
    8001acec:	f02a                	sd	a0,32(sp)
    8001acee:	f42e                	sd	a1,40(sp)
    8001acf0:	e42a                	sd	a0,8(sp)
    8001acf2:	e82e                	sd	a1,16(sp)
    8001acf4:	a009                	j	8001acf6 <.LBB17_2+0x1a>
    }
    8001acf6:	6522                	ld	a0,8(sp)
    8001acf8:	65c2                	ld	a1,16(sp)
    8001acfa:	70e2                	ld	ra,56(sp)
    8001acfc:	6121                	addi	sp,sp,64
    8001acfe:	8082                	ret

Disassembly of section .text._ZN6kernel2fs5inode5Inode4lock17he70970c593f751adE:

000000008001ad00 <_ZN6kernel2fs5inode5Inode4lock17he70970c593f751adE>:
    pub fn lock<'a>(&'a self) -> SleepLockGuard<'a, InodeData> {
    8001ad00:	7129                	addi	sp,sp,-320
    8001ad02:	fe06                	sd	ra,312(sp)
    8001ad04:	f8aa                	sd	a0,112(sp)
    8001ad06:	ee2a                	sd	a0,280(sp)
        assert!(self.index < NINODE, "index must less than NINODE");
    8001ad08:	6108                	ld	a0,0(a0)
    8001ad0a:	03200593          	li	a1,50
    8001ad0e:	02b56163          	bltu	a0,a1,8001ad30 <.LBB18_26+0x14>
    8001ad12:	a009                	j	8001ad14 <.LBB18_25>

000000008001ad14 <.LBB18_25>:
    8001ad14:	00010517          	auipc	a0,0x10
    8001ad18:	22450513          	addi	a0,a0,548 # 8002af38 <.L__unnamed_86>

000000008001ad1c <.LBB18_26>:
    8001ad1c:	00010617          	auipc	a2,0x10
    8001ad20:	23c60613          	addi	a2,a2,572 # 8002af58 <.L__unnamed_87>
    8001ad24:	45ed                	li	a1,27
    8001ad26:	00007097          	auipc	ra,0x7
    8001ad2a:	3d6080e7          	jalr	982(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8001ad2e:	0000                	unimp
        let mut guard = ICACHE.data[self.index].lock();
    8001ad30:	7546                	ld	a0,112(sp)
    8001ad32:	610c                	ld	a1,0(a0)
    8001ad34:	f4ae                	sd	a1,104(sp)
    8001ad36:	03100513          	li	a0,49
    8001ad3a:	1ab56463          	bltu	a0,a1,8001aee2 <.LBB18_32+0x22>
    8001ad3e:	a009                	j	8001ad40 <.LBB18_26+0x24>
    8001ad40:	7526                	ld	a0,104(sp)
    8001ad42:	00751593          	slli	a1,a0,0x7

000000008001ad46 <.LBB18_27>:
    8001ad46:	0003f517          	auipc	a0,0x3f
    8001ad4a:	9ca50513          	addi	a0,a0,-1590 # 80059710 <_ZN6kernel2fs5inode6ICACHE17had1be8942ca79bf1E>
    8001ad4e:	952e                	add	a0,a0,a1
    8001ad50:	4d050513          	addi	a0,a0,1232
    8001ad54:	00002097          	auipc	ra,0x2
    8001ad58:	51e080e7          	jalr	1310(ra) # 8001d272 <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$4lock17h5e4056570307628eE>
    8001ad5c:	fcaa                	sd	a0,120(sp)
    8001ad5e:	e12e                	sd	a1,128(sp)
    8001ad60:	a009                	j	8001ad62 <.LBB18_27+0x1c>
    8001ad62:	18a8                	addi	a0,sp,120
        if !guard.valid {
    8001ad64:	00002097          	auipc	ra,0x2
    8001ad68:	79c080e7          	jalr	1948(ra) # 8001d500 <_ZN92_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfc7812d7ca7ab1e1E>
    8001ad6c:	f0aa                	sd	a0,96(sp)
    8001ad6e:	a009                	j	8001ad70 <.LBB18_27+0x2a>
    8001ad70:	7506                	ld	a0,96(sp)
    8001ad72:	04854503          	lbu	a0,72(a0)
    8001ad76:	8905                	andi	a0,a0,1
    8001ad78:	e10d                	bnez	a0,8001ad9a <.LBB18_28+0x1a>
    8001ad7a:	a009                	j	8001ad7c <.LBB18_27+0x36>
            let blockno = unsafe{ SUPER_BLOCK.locate_inode(self.inum) };
    8001ad7c:	7546                	ld	a0,112(sp)
    8001ad7e:	454c                	lw	a1,12(a0)

000000008001ad80 <.LBB18_28>:
    8001ad80:	00047517          	auipc	a0,0x47
    8001ad84:	32050513          	addi	a0,a0,800 # 800620a0 <_ZN6kernel2fs10superblock11SUPER_BLOCK17hc3889871ecbe2b54E>
    8001ad88:	fffed097          	auipc	ra,0xfffed
    8001ad8c:	9f2080e7          	jalr	-1550(ra) # 8000777a <_ZN6kernel2fs10superblock10SuperBlock12locate_inode17hc2dbfb20b9411e7cE>
    8001ad90:	85aa                	mv	a1,a0
    8001ad92:	ecae                	sd	a1,88(sp)
    8001ad94:	12a12223          	sw	a0,292(sp)
    8001ad98:	a011                	j	8001ad9c <.LBB18_28+0x1c>
        if !guard.valid {
    8001ad9a:	aa3d                	j	8001aed8 <.LBB18_32+0x18>
            let buf = BCACHE.bread(self.dev, blockno);
    8001ad9c:	66e6                	ld	a3,88(sp)
    8001ad9e:	7546                	ld	a0,112(sp)
    8001ada0:	4510                	lw	a2,8(a0)

000000008001ada2 <.LBB18_29>:
    8001ada2:	00014597          	auipc	a1,0x14
    8001ada6:	25e58593          	addi	a1,a1,606 # 8002f000 <_ZN6kernel2fs3bio6BCACHE17h4811aac4f8d79dc4E>
    8001adaa:	0128                	addi	a0,sp,136
    8001adac:	fffe9097          	auipc	ra,0xfffe9
    8001adb0:	850080e7          	jalr	-1968(ra) # 800035fc <_ZN6kernel2fs3bio6Bcache5bread17h6ef915e4e896646bE>
    8001adb4:	a009                	j	8001adb6 <.LBB18_29+0x14>
            let offset = locate_inode_offset(self.inum) as isize;
    8001adb6:	7546                	ld	a0,112(sp)
    8001adb8:	4548                	lw	a0,12(a0)
    8001adba:	00000097          	auipc	ra,0x0
    8001adbe:	140080e7          	jalr	320(ra) # 8001aefa <_ZN6kernel2fs5inode19locate_inode_offset17h88c1ade407c59915E>
    8001adc2:	e8aa                	sd	a0,80(sp)
    8001adc4:	a009                	j	8001adc6 <.LBB18_29+0x24>
    8001adc6:	6546                	ld	a0,80(sp)
    8001adc8:	f62a                	sd	a0,296(sp)
    8001adca:	0128                	addi	a0,sp,136
            let dinode = unsafe{ (buf.raw_data() as *const DiskInode).offset(offset) };
    8001adcc:	fffe9097          	auipc	ra,0xfffe9
    8001add0:	976080e7          	jalr	-1674(ra) # 80003742 <_ZN6kernel2fs3bio3Buf8raw_data17h6a896fea03f7ee91E>
    8001add4:	e4aa                	sd	a0,72(sp)
    8001add6:	a009                	j	8001add8 <.LBB18_29+0x36>
    8001add8:	65c6                	ld	a1,80(sp)
    8001adda:	6526                	ld	a0,72(sp)
    8001addc:	ffffd097          	auipc	ra,0xffffd
    8001ade0:	4d4080e7          	jalr	1236(ra) # 800182b0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hb9f56331d13383c1E>
    8001ade4:	85aa                	mv	a1,a0
    8001ade6:	e0ae                	sd	a1,64(sp)
    8001ade8:	fa2a                	sd	a0,304(sp)
    8001adea:	a009                	j	8001adec <.LBB18_29+0x4a>
            guard.dinode = unsafe{ core::ptr::read(dinode) };
    8001adec:	6586                	ld	a1,64(sp)
    8001adee:	1908                	addi	a0,sp,176
    8001adf0:	ffffe097          	auipc	ra,0xffffe
    8001adf4:	836080e7          	jalr	-1994(ra) # 80018626 <_ZN4core3ptr4read17hd38a26e0d5db892cE>
    8001adf8:	a009                	j	8001adfa <.LBB18_29+0x58>
    8001adfa:	18a8                	addi	a0,sp,120
    8001adfc:	00002097          	auipc	ra,0x2
    8001ae00:	718080e7          	jalr	1816(ra) # 8001d514 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    8001ae04:	fc2a                	sd	a0,56(sp)
    8001ae06:	a009                	j	8001ae08 <.LBB18_29+0x66>
    8001ae08:	7562                	ld	a0,56(sp)
    8001ae0a:	0521                	addi	a0,a0,8
    8001ae0c:	190c                	addi	a1,sp,176
    8001ae0e:	04000613          	li	a2,64
    8001ae12:	0000a097          	auipc	ra,0xa
    8001ae16:	228080e7          	jalr	552(ra) # 8002503a <memcpy>
            drop(buf);
    8001ae1a:	652a                	ld	a0,136(sp)
    8001ae1c:	f9aa                	sd	a0,240(sp)
    8001ae1e:	654a                	ld	a0,144(sp)
    8001ae20:	fdaa                	sd	a0,248(sp)
    8001ae22:	656a                	ld	a0,152(sp)
    8001ae24:	e22a                	sd	a0,256(sp)
    8001ae26:	750a                	ld	a0,160(sp)
    8001ae28:	e62a                	sd	a0,264(sp)
    8001ae2a:	752a                	ld	a0,168(sp)
    8001ae2c:	ea2a                	sd	a0,272(sp)
    8001ae2e:	1988                	addi	a0,sp,240
    8001ae30:	00002097          	auipc	ra,0x2
    8001ae34:	15c080e7          	jalr	348(ra) # 8001cf8c <_ZN4core3mem4drop17hda1e19029436deb9E>
    8001ae38:	a009                	j	8001ae3a <.LBB18_29+0x98>
    8001ae3a:	18a8                	addi	a0,sp,120
            guard.valid = true;
    8001ae3c:	00002097          	auipc	ra,0x2
    8001ae40:	6d8080e7          	jalr	1752(ra) # 8001d514 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    8001ae44:	f82a                	sd	a0,48(sp)
    8001ae46:	a009                	j	8001ae48 <.LBB18_29+0xa6>
    8001ae48:	7546                	ld	a0,112(sp)
    8001ae4a:	7642                	ld	a2,48(sp)
    8001ae4c:	4585                	li	a1,1
    8001ae4e:	04b60423          	sb	a1,72(a2)
            guard.dev = self.dev;
    8001ae52:	00856503          	lwu	a0,8(a0)
    8001ae56:	f02a                	sd	a0,32(sp)
    8001ae58:	18a8                	addi	a0,sp,120
    8001ae5a:	00002097          	auipc	ra,0x2
    8001ae5e:	6ba080e7          	jalr	1722(ra) # 8001d514 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    8001ae62:	f42a                	sd	a0,40(sp)
    8001ae64:	a009                	j	8001ae66 <.LBB18_29+0xc4>
    8001ae66:	7546                	ld	a0,112(sp)
    8001ae68:	7582                	ld	a1,32(sp)
    8001ae6a:	7622                	ld	a2,40(sp)
    8001ae6c:	c20c                	sw	a1,0(a2)
            guard.inum = self.inum;
    8001ae6e:	00c56503          	lwu	a0,12(a0)
    8001ae72:	e82a                	sd	a0,16(sp)
    8001ae74:	18a8                	addi	a0,sp,120
    8001ae76:	00002097          	auipc	ra,0x2
    8001ae7a:	69e080e7          	jalr	1694(ra) # 8001d514 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>
    8001ae7e:	ec2a                	sd	a0,24(sp)
    8001ae80:	a009                	j	8001ae82 <.LBB18_29+0xe0>
    8001ae82:	6542                	ld	a0,16(sp)
    8001ae84:	65e2                	ld	a1,24(sp)
    8001ae86:	c1c8                	sw	a0,4(a1)
    8001ae88:	18a8                	addi	a0,sp,120
            if guard.dinode.itype == InodeType::Empty {
    8001ae8a:	00002097          	auipc	ra,0x2
    8001ae8e:	676080e7          	jalr	1654(ra) # 8001d500 <_ZN92_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfc7812d7ca7ab1e1E>
    8001ae92:	e42a                	sd	a0,8(sp)
    8001ae94:	a009                	j	8001ae96 <.LBB18_29+0xf4>
    8001ae96:	6522                	ld	a0,8(sp)
    8001ae98:	0521                	addi	a0,a0,8

000000008001ae9a <.LBB18_30>:
    8001ae9a:	00010597          	auipc	a1,0x10
    8001ae9e:	0ee58593          	addi	a1,a1,238 # 8002af88 <.L__unnamed_88>
    8001aea2:	fffed097          	auipc	ra,0xfffed
    8001aea6:	56a080e7          	jalr	1386(ra) # 8000840c <_ZN70_$LT$kernel..fs..dinode..InodeType$u20$as$u20$core..cmp..PartialEq$GT$2eq17h96b8b60db340aeeeE>
    8001aeaa:	e02a                	sd	a0,0(sp)
    8001aeac:	a009                	j	8001aeae <.LBB18_30+0x14>
    8001aeae:	6502                	ld	a0,0(sp)
    8001aeb0:	4581                	li	a1,0
    8001aeb2:	02b50263          	beq	a0,a1,8001aed6 <.LBB18_32+0x16>
    8001aeb6:	a009                	j	8001aeb8 <.LBB18_31>

000000008001aeb8 <.LBB18_31>:
                panic!("inode lock: trying to lock an inode whose type is empty.")
    8001aeb8:	00010517          	auipc	a0,0x10
    8001aebc:	0d250513          	addi	a0,a0,210 # 8002af8a <.L__unnamed_89>

000000008001aec0 <.LBB18_32>:
    8001aec0:	00010617          	auipc	a2,0x10
    8001aec4:	10860613          	addi	a2,a2,264 # 8002afc8 <.L__unnamed_90>
    8001aec8:	03800593          	li	a1,56
    8001aecc:	00007097          	auipc	ra,0x7
    8001aed0:	230080e7          	jalr	560(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8001aed4:	0000                	unimp
        if !guard.valid {
    8001aed6:	a009                	j	8001aed8 <.LBB18_32+0x18>
    }
    8001aed8:	7566                	ld	a0,120(sp)
    8001aeda:	658a                	ld	a1,128(sp)
    8001aedc:	70f2                	ld	ra,312(sp)
    8001aede:	6131                	addi	sp,sp,320
    8001aee0:	8082                	ret
        let mut guard = ICACHE.data[self.index].lock();
    8001aee2:	7526                	ld	a0,104(sp)

000000008001aee4 <.LBB18_33>:
    8001aee4:	00010617          	auipc	a2,0x10
    8001aee8:	08c60613          	addi	a2,a2,140 # 8002af70 <.L__unnamed_91>
    8001aeec:	03200593          	li	a1,50
    8001aef0:	00007097          	auipc	ra,0x7
    8001aef4:	238080e7          	jalr	568(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel2fs5inode19locate_inode_offset17h88c1ade407c59915E:

000000008001aefa <_ZN6kernel2fs5inode19locate_inode_offset17h88c1ade407c59915E>:


/// Given an inode number. 
/// Calculate the offset index of this inode inside the block. 
#[inline]
fn locate_inode_offset(inum: u32) -> usize {
    8001aefa:	1141                	addi	sp,sp,-16
    8001aefc:	c62a                	sw	a0,12(sp)
    inum as usize % IPB
    8001aefe:	893d                	andi	a0,a0,15
}
    8001af00:	0141                	addi	sp,sp,16
    8001af02:	8082                	ret

Disassembly of section .text._ZN4core3ptr8metadata14from_raw_parts17hb35c9d87c96e1656E:

000000008001af04 <_ZN4core3ptr8metadata14from_raw_parts17hb35c9d87c96e1656E>:
///
/// [`slice::from_raw_parts`]: crate::slice::from_raw_parts
#[unstable(feature = "ptr_metadata", issue = "81513")]
#[rustc_const_unstable(feature = "ptr_metadata", issue = "81513")]
#[inline]
pub const fn from_raw_parts<T: ?Sized>(
    8001af04:	7179                	addi	sp,sp,-48
    8001af06:	f02a                	sd	a0,32(sp)
    8001af08:	f42e                	sd	a1,40(sp)
    metadata: <T as Pointee>::Metadata,
) -> *const T {
    // SAFETY: Accessing the value from the `PtrRepr` union is safe since *const T
    // and PtrComponents<T> have the same memory layouts. Only std can make this
    // guarantee.
    unsafe { PtrRepr { components: PtrComponents { data_address, metadata } }.const_ptr }
    8001af0a:	e82a                	sd	a0,16(sp)
    8001af0c:	ec2e                	sd	a1,24(sp)
    8001af0e:	e02a                	sd	a0,0(sp)
    8001af10:	e42e                	sd	a1,8(sp)
}
    8001af12:	6145                	addi	sp,sp,48
    8001af14:	8082                	ret

Disassembly of section .text._ZN4core3ptr8metadata14from_raw_parts17hd9330322b61d2f92E:

000000008001af16 <_ZN4core3ptr8metadata14from_raw_parts17hd9330322b61d2f92E>:
pub const fn from_raw_parts<T: ?Sized>(
    8001af16:	7179                	addi	sp,sp,-48
    8001af18:	f02a                	sd	a0,32(sp)
    8001af1a:	f42e                	sd	a1,40(sp)
    unsafe { PtrRepr { components: PtrComponents { data_address, metadata } }.const_ptr }
    8001af1c:	e82a                	sd	a0,16(sp)
    8001af1e:	ec2e                	sd	a1,24(sp)
    8001af20:	e02a                	sd	a0,0(sp)
    8001af22:	e42e                	sd	a1,8(sp)
}
    8001af24:	6145                	addi	sp,sp,48
    8001af26:	8082                	ret

Disassembly of section .text._ZN4core3ptr8metadata8metadata17h8c3e19bdf44a2913E:

000000008001af28 <_ZN4core3ptr8metadata8metadata17h8c3e19bdf44a2913E>:
pub const fn metadata<T: ?Sized>(ptr: *const T) -> <T as Pointee>::Metadata {
    8001af28:	7179                	addi	sp,sp,-48
    8001af2a:	e42e                	sd	a1,8(sp)
    8001af2c:	85aa                	mv	a1,a0
    8001af2e:	6522                	ld	a0,8(sp)
    8001af30:	f02e                	sd	a1,32(sp)
    8001af32:	f42a                	sd	a0,40(sp)
    unsafe { PtrRepr { const_ptr: ptr }.components.metadata }
    8001af34:	e82e                	sd	a1,16(sp)
    8001af36:	ec2a                	sd	a0,24(sp)
}
    8001af38:	6145                	addi	sp,sp,48
    8001af3a:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h3aa8018dbd05d49dE:

000000008001af3c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h3aa8018dbd05d49dE>:
    pub const fn is_null(self) -> bool {
    8001af3c:	1101                	addi	sp,sp,-32
    8001af3e:	ec06                	sd	ra,24(sp)
    8001af40:	e82a                	sd	a0,16(sp)
        (self as *mut u8).guaranteed_eq(null_mut())
    8001af42:	e42a                	sd	a0,8(sp)
    8001af44:	a009                	j	8001af46 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h3aa8018dbd05d49dE+0xa>
    8001af46:	6522                	ld	a0,8(sp)
    8001af48:	4581                	li	a1,0
    8001af4a:	00007097          	auipc	ra,0x7
    8001af4e:	f78080e7          	jalr	-136(ra) # 80021ec2 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$13guaranteed_eq17h32ea8c99c0b8220dE>
    8001af52:	e02a                	sd	a0,0(sp)
    8001af54:	a009                	j	8001af56 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h3aa8018dbd05d49dE+0x1a>
    }
    8001af56:	6502                	ld	a0,0(sp)
    8001af58:	60e2                	ld	ra,24(sp)
    8001af5a:	6105                	addi	sp,sp,32
    8001af5c:	8082                	ret

Disassembly of section .text._ZN4core4char7methods15encode_utf8_raw17h793a073b272121f7E:

000000008001af5e <_ZN4core4char7methods15encode_utf8_raw17h793a073b272121f7E>:
/// Panics if the buffer is not large enough.
/// A buffer of length four is large enough to encode any `char`.
#[unstable(feature = "char_internals", reason = "exposed only for libstd", issue = "none")]
#[doc(hidden)]
#[inline]
pub fn encode_utf8_raw(code: u32, dst: &mut [u8]) -> &mut [u8] {
    8001af5e:	7121                	addi	sp,sp,-448
    8001af60:	ff06                	sd	ra,440(sp)
    8001af62:	e132                	sd	a2,128(sp)
    8001af64:	e52e                	sd	a1,136(sp)
    8001af66:	cb2a                	sw	a0,148(sp)
    8001af68:	e2ae                	sd	a1,320(sp)
    8001af6a:	e6b2                	sd	a2,328(sp)
    let len = len_utf8(code);
    8001af6c:	00000097          	auipc	ra,0x0
    8001af70:	280080e7          	jalr	640(ra) # 8001b1ec <_ZN4core4char7methods8len_utf817hc045ab91f009a8ffE>
    8001af74:	ed2a                	sd	a0,152(sp)
    8001af76:	a009                	j	8001af78 <_ZN4core4char7methods15encode_utf8_raw17h793a073b272121f7E+0x1a>
    match (len, &mut dst[..]) {
    8001af78:	658a                	ld	a1,128(sp)
    8001af7a:	652a                	ld	a0,136(sp)
    8001af7c:	666a                	ld	a2,152(sp)
    8001af7e:	f4b2                	sd	a2,104(sp)

000000008001af80 <.LBB0_22>:
    8001af80:	00010617          	auipc	a2,0x10
    8001af84:	0e060613          	addi	a2,a2,224 # 8002b060 <.L__unnamed_1>
    8001af88:	ffff6097          	auipc	ra,0xffff6
    8001af8c:	4e6080e7          	jalr	1254(ra) # 8001146e <_ZN4core5slice5index77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h6397a28cd31ac6bcE>
    8001af90:	f8aa                	sd	a0,112(sp)
    8001af92:	fcae                	sd	a1,120(sp)
    8001af94:	a009                	j	8001af96 <.LBB0_22+0x16>
    8001af96:	7526                	ld	a0,104(sp)
    8001af98:	75e6                	ld	a1,120(sp)
    8001af9a:	7646                	ld	a2,112(sp)
    8001af9c:	f12a                	sd	a0,160(sp)
    8001af9e:	f532                	sd	a2,168(sp)
    8001afa0:	f92e                	sd	a1,176(sp)
        (1, [a, ..]) => {
    8001afa2:	85aa                	mv	a1,a0
    8001afa4:	f0ae                	sd	a1,96(sp)
    8001afa6:	4585                	li	a1,1
    8001afa8:	02b50263          	beq	a0,a1,8001afcc <.LBB0_22+0x4c>
    8001afac:	a009                	j	8001afae <.LBB0_22+0x2e>
    8001afae:	7506                	ld	a0,96(sp)
    8001afb0:	4589                	li	a1,2
    8001afb2:	02b50a63          	beq	a0,a1,8001afe6 <.LBB0_22+0x66>
    8001afb6:	a009                	j	8001afb8 <.LBB0_22+0x38>
    8001afb8:	7506                	ld	a0,96(sp)
    8001afba:	458d                	li	a1,3
    8001afbc:	02b50a63          	beq	a0,a1,8001aff0 <.LBB0_22+0x70>
    8001afc0:	a009                	j	8001afc2 <.LBB0_22+0x42>
    8001afc2:	7506                	ld	a0,96(sp)
    8001afc4:	4591                	li	a1,4
    8001afc6:	02b50a63          	beq	a0,a1,8001affa <.LBB0_22+0x7a>
    8001afca:	a031                	j	8001afd6 <.LBB0_22+0x56>
    8001afcc:	754a                	ld	a0,176(sp)
    8001afce:	4581                	li	a1,0
    8001afd0:	02b51a63          	bne	a0,a1,8001b004 <.LBB0_22+0x84>
    8001afd4:	a009                	j	8001afd6 <.LBB0_22+0x56>
        }
        _ => panic!(
            "encode_utf8: need {} bytes to encode U+{:X}, but the buffer has {}",
            len,
            code,
            dst.len(),
    8001afd6:	658a                	ld	a1,128(sp)
    8001afd8:	652a                	ld	a0,136(sp)
    8001afda:	00004097          	auipc	ra,0x4
    8001afde:	480080e7          	jalr	1152(ra) # 8001f45a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hb06ce83b043493f3E>
    8001afe2:	fa2a                	sd	a0,304(sp)
    8001afe4:	a8c5                	j	8001b0d4 <.LBB0_22+0x154>
        (2, [a, b, ..]) => {
    8001afe6:	75ca                	ld	a1,176(sp)
    8001afe8:	4505                	li	a0,1
    8001afea:	02b56463          	bltu	a0,a1,8001b012 <.LBB0_22+0x92>
    8001afee:	b7e5                	j	8001afd6 <.LBB0_22+0x56>
        (3, [a, b, c, ..]) => {
    8001aff0:	75ca                	ld	a1,176(sp)
    8001aff2:	4509                	li	a0,2
    8001aff4:	04b56463          	bltu	a0,a1,8001b03c <.LBB0_22+0xbc>
    8001aff8:	bff9                	j	8001afd6 <.LBB0_22+0x56>
        (4, [a, b, c, d, ..]) => {
    8001affa:	75ca                	ld	a1,176(sp)
    8001affc:	450d                	li	a0,3
    8001affe:	06b56f63          	bltu	a0,a1,8001b07c <.LBB0_22+0xfc>
    8001b002:	bfd1                	j	8001afd6 <.LBB0_22+0x56>
        (1, [a, ..]) => {
    8001b004:	75aa                	ld	a1,168(sp)
    8001b006:	ef2e                	sd	a1,408(sp)
            *a = code as u8;
    8001b008:	09410503          	lb	a0,148(sp)
    8001b00c:	00a58023          	sb	a0,0(a1)
    match (len, &mut dst[..]) {
    8001b010:	a29d                	j	8001b176 <.LBB0_27+0x14>
        (2, [a, b, ..]) => {
    8001b012:	75aa                	ld	a1,168(sp)
    8001b014:	e72e                	sd	a1,392(sp)
    8001b016:	00158513          	addi	a0,a1,1
    8001b01a:	eb2a                	sd	a0,400(sp)
            *a = (code >> 6 & 0x1F) as u8 | TAG_TWO_B;
    8001b01c:	455a                	lw	a0,148(sp)
    8001b01e:	8119                	srli	a0,a0,0x6
    8001b020:	897d                	andi	a0,a0,31
    8001b022:	0c056513          	ori	a0,a0,192
    8001b026:	00a58023          	sb	a0,0(a1)
            *b = (code & 0x3F) as u8 | TAG_CONT;
    8001b02a:	09414503          	lbu	a0,148(sp)
    8001b02e:	03f57513          	andi	a0,a0,63
    8001b032:	08056513          	ori	a0,a0,128
    8001b036:	00a580a3          	sb	a0,1(a1)
    match (len, &mut dst[..]) {
    8001b03a:	aa35                	j	8001b176 <.LBB0_27+0x14>
        (3, [a, b, c, ..]) => {
    8001b03c:	75aa                	ld	a1,168(sp)
    8001b03e:	faae                	sd	a1,368(sp)
    8001b040:	00158513          	addi	a0,a1,1
    8001b044:	feaa                	sd	a0,376(sp)
    8001b046:	00258513          	addi	a0,a1,2
    8001b04a:	e32a                	sd	a0,384(sp)
            *a = (code >> 12 & 0x0F) as u8 | TAG_THREE_B;
    8001b04c:	455a                	lw	a0,148(sp)
    8001b04e:	8131                	srli	a0,a0,0xc
    8001b050:	893d                	andi	a0,a0,15
    8001b052:	0e056513          	ori	a0,a0,224
    8001b056:	00a58023          	sb	a0,0(a1)
            *b = (code >> 6 & 0x3F) as u8 | TAG_CONT;
    8001b05a:	455a                	lw	a0,148(sp)
    8001b05c:	8119                	srli	a0,a0,0x6
    8001b05e:	03f57513          	andi	a0,a0,63
    8001b062:	08056513          	ori	a0,a0,128
    8001b066:	00a580a3          	sb	a0,1(a1)
            *c = (code & 0x3F) as u8 | TAG_CONT;
    8001b06a:	09414503          	lbu	a0,148(sp)
    8001b06e:	03f57513          	andi	a0,a0,63
    8001b072:	08056513          	ori	a0,a0,128
    8001b076:	00a58123          	sb	a0,2(a1)
    match (len, &mut dst[..]) {
    8001b07a:	a8f5                	j	8001b176 <.LBB0_27+0x14>
        (4, [a, b, c, d, ..]) => {
    8001b07c:	75aa                	ld	a1,168(sp)
    8001b07e:	ecae                	sd	a1,88(sp)
    8001b080:	eaae                	sd	a1,336(sp)
    8001b082:	00158513          	addi	a0,a1,1
    8001b086:	eeaa                	sd	a0,344(sp)
    8001b088:	00258513          	addi	a0,a1,2
    8001b08c:	f2aa                	sd	a0,352(sp)
    8001b08e:	00358513          	addi	a0,a1,3
    8001b092:	f6aa                	sd	a0,360(sp)
            *a = (code >> 18 & 0x07) as u8 | TAG_FOUR_B;
    8001b094:	455a                	lw	a0,148(sp)
    8001b096:	8149                	srli	a0,a0,0x12
    8001b098:	891d                	andi	a0,a0,7
    8001b09a:	0f056513          	ori	a0,a0,240
    8001b09e:	00a58023          	sb	a0,0(a1)
            *b = (code >> 12 & 0x3F) as u8 | TAG_CONT;
    8001b0a2:	455a                	lw	a0,148(sp)
    8001b0a4:	8131                	srli	a0,a0,0xc
    8001b0a6:	03f57513          	andi	a0,a0,63
    8001b0aa:	08056513          	ori	a0,a0,128
    8001b0ae:	00a580a3          	sb	a0,1(a1)
            *c = (code >> 6 & 0x3F) as u8 | TAG_CONT;
    8001b0b2:	455a                	lw	a0,148(sp)
    8001b0b4:	8119                	srli	a0,a0,0x6
    8001b0b6:	03f57513          	andi	a0,a0,63
    8001b0ba:	08056513          	ori	a0,a0,128
    8001b0be:	00a58123          	sb	a0,2(a1)
            *d = (code & 0x3F) as u8 | TAG_CONT;
    8001b0c2:	09414503          	lbu	a0,148(sp)
    8001b0c6:	03f57513          	andi	a0,a0,63
    8001b0ca:	08056513          	ori	a0,a0,128
    8001b0ce:	00a581a3          	sb	a0,3(a1)
    match (len, &mut dst[..]) {
    8001b0d2:	a055                	j	8001b176 <.LBB0_27+0x14>
    8001b0d4:	0928                	addi	a0,sp,152
        _ => panic!(
    8001b0d6:	ee2a                	sd	a0,280(sp)
    8001b0d8:	0950                	addi	a2,sp,148
    8001b0da:	fc32                	sd	a2,56(sp)
    8001b0dc:	f232                	sd	a2,288(sp)
    8001b0de:	1a0c                	addi	a1,sp,304
    8001b0e0:	e0ae                	sd	a1,64(sp)
    8001b0e2:	f62e                	sd	a1,296(sp)
    8001b0e4:	f32a                	sd	a0,416(sp)
    8001b0e6:	f732                	sd	a2,424(sp)
    8001b0e8:	fb2e                	sd	a1,432(sp)

000000008001b0ea <.LBB0_23>:
    8001b0ea:	00009597          	auipc	a1,0x9
    8001b0ee:	76e58593          	addi	a1,a1,1902 # 80024858 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h9c6c4af1578f7c29E>
    8001b0f2:	00004097          	auipc	ra,0x4
    8001b0f6:	434080e7          	jalr	1076(ra) # 8001f526 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    8001b0fa:	e4aa                	sd	a0,72(sp)
    8001b0fc:	e8ae                	sd	a1,80(sp)
    8001b0fe:	a009                	j	8001b100 <.LBB0_23+0x16>
    8001b100:	7562                	ld	a0,56(sp)

000000008001b102 <.LBB0_24>:
    8001b102:	00009597          	auipc	a1,0x9
    8001b106:	0b258593          	addi	a1,a1,178 # 800241b4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hf71897f85e3edf35E>
    8001b10a:	00007097          	auipc	ra,0x7
    8001b10e:	d80080e7          	jalr	-640(ra) # 80021e8a <_ZN4core3fmt10ArgumentV13new17ha67f1954b9155e6dE>
    8001b112:	f42a                	sd	a0,40(sp)
    8001b114:	f82e                	sd	a1,48(sp)
    8001b116:	a009                	j	8001b118 <.LBB0_24+0x16>
    8001b118:	6506                	ld	a0,64(sp)

000000008001b11a <.LBB0_25>:
    8001b11a:	00009597          	auipc	a1,0x9
    8001b11e:	73e58593          	addi	a1,a1,1854 # 80024858 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h9c6c4af1578f7c29E>
    8001b122:	00004097          	auipc	ra,0x4
    8001b126:	404080e7          	jalr	1028(ra) # 8001f526 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    8001b12a:	ec2a                	sd	a0,24(sp)
    8001b12c:	f02e                	sd	a1,32(sp)
    8001b12e:	a009                	j	8001b130 <.LBB0_25+0x16>
    8001b130:	7502                	ld	a0,32(sp)
    8001b132:	65e2                	ld	a1,24(sp)
    8001b134:	7642                	ld	a2,48(sp)
    8001b136:	76a2                	ld	a3,40(sp)
    8001b138:	6746                	ld	a4,80(sp)
    8001b13a:	67a6                	ld	a5,72(sp)
    8001b13c:	f5be                	sd	a5,232(sp)
    8001b13e:	f9ba                	sd	a4,240(sp)
    8001b140:	fdb6                	sd	a3,248(sp)
    8001b142:	e232                	sd	a2,256(sp)
    8001b144:	e62e                	sd	a1,264(sp)
    8001b146:	ea2a                	sd	a0,272(sp)

000000008001b148 <.LBB0_26>:
    8001b148:	00010597          	auipc	a1,0x10
    8001b14c:	f8858593          	addi	a1,a1,-120 # 8002b0d0 <.L__unnamed_2>
    8001b150:	1928                	addi	a0,sp,184
    8001b152:	11b4                	addi	a3,sp,232
    8001b154:	470d                	li	a4,3
    8001b156:	863a                	mv	a2,a4
    8001b158:	fffea097          	auipc	ra,0xfffea
    8001b15c:	2dc080e7          	jalr	732(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8001b160:	a009                	j	8001b162 <.LBB0_27>

000000008001b162 <.LBB0_27>:
    8001b162:	00010597          	auipc	a1,0x10
    8001b166:	f9e58593          	addi	a1,a1,-98 # 8002b100 <.L__unnamed_3>
    8001b16a:	1928                	addi	a0,sp,184
    8001b16c:	00007097          	auipc	ra,0x7
    8001b170:	ffc080e7          	jalr	-4(ra) # 80022168 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
    8001b174:	0000                	unimp
        ),
    };
    &mut dst[..len]
    8001b176:	658a                	ld	a1,128(sp)
    8001b178:	652a                	ld	a0,136(sp)
    8001b17a:	666a                	ld	a2,152(sp)
    8001b17c:	fe32                	sd	a2,312(sp)

000000008001b17e <.LBB0_28>:
    8001b17e:	00010697          	auipc	a3,0x10
    8001b182:	efa68693          	addi	a3,a3,-262 # 8002b078 <.L__unnamed_4>
    8001b186:	ffff6097          	auipc	ra,0xffff6
    8001b18a:	308080e7          	jalr	776(ra) # 8001148e <_ZN4core5slice5index77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hb4c5f14cfefb7eb2E>
    8001b18e:	e42a                	sd	a0,8(sp)
    8001b190:	e82e                	sd	a1,16(sp)
    8001b192:	a009                	j	8001b194 <.LBB0_28+0x16>
}
    8001b194:	65c2                	ld	a1,16(sp)
    8001b196:	6522                	ld	a0,8(sp)
    8001b198:	70fa                	ld	ra,440(sp)
    8001b19a:	6139                	addi	sp,sp,448
    8001b19c:	8082                	ret

Disassembly of section .text._ZN4core4char7methods22_$LT$impl$u20$char$GT$11encode_utf817h7239bcb774eea5aaE:

000000008001b19e <_ZN4core4char7methods22_$LT$impl$u20$char$GT$11encode_utf817h7239bcb774eea5aaE>:
    pub fn encode_utf8(self, dst: &mut [u8]) -> &mut str {
    8001b19e:	7139                	addi	sp,sp,-64
    8001b1a0:	fc06                	sd	ra,56(sp)
    8001b1a2:	d22a                	sw	a0,36(sp)
    8001b1a4:	f42e                	sd	a1,40(sp)
    8001b1a6:	f832                	sd	a2,48(sp)
        unsafe { from_utf8_unchecked_mut(encode_utf8_raw(self as u32, dst)) }
    8001b1a8:	00000097          	auipc	ra,0x0
    8001b1ac:	db6080e7          	jalr	-586(ra) # 8001af5e <_ZN4core4char7methods15encode_utf8_raw17h793a073b272121f7E>
    8001b1b0:	e82a                	sd	a0,16(sp)
    8001b1b2:	ec2e                	sd	a1,24(sp)
    8001b1b4:	a009                	j	8001b1b6 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$11encode_utf817h7239bcb774eea5aaE+0x18>
    8001b1b6:	65e2                	ld	a1,24(sp)
    8001b1b8:	6542                	ld	a0,16(sp)
    8001b1ba:	00003097          	auipc	ra,0x3
    8001b1be:	4d4080e7          	jalr	1236(ra) # 8001e68e <_ZN4core3str8converts23from_utf8_unchecked_mut17h690302c73d561c56E>
    8001b1c2:	e02a                	sd	a0,0(sp)
    8001b1c4:	e42e                	sd	a1,8(sp)
    8001b1c6:	a009                	j	8001b1c8 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$11encode_utf817h7239bcb774eea5aaE+0x2a>
    }
    8001b1c8:	65a2                	ld	a1,8(sp)
    8001b1ca:	6502                	ld	a0,0(sp)
    8001b1cc:	70e2                	ld	ra,56(sp)
    8001b1ce:	6121                	addi	sp,sp,64
    8001b1d0:	8082                	ret

Disassembly of section .text._ZN4core4char7methods22_$LT$impl$u20$char$GT$8len_utf817h6b8693741ddbecceE:

000000008001b1d2 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$8len_utf817h6b8693741ddbecceE>:
    pub const fn len_utf8(self) -> usize {
    8001b1d2:	1101                	addi	sp,sp,-32
    8001b1d4:	ec06                	sd	ra,24(sp)
    8001b1d6:	ca2a                	sw	a0,20(sp)
        len_utf8(self as u32)
    8001b1d8:	00000097          	auipc	ra,0x0
    8001b1dc:	014080e7          	jalr	20(ra) # 8001b1ec <_ZN4core4char7methods8len_utf817hc045ab91f009a8ffE>
    8001b1e0:	e42a                	sd	a0,8(sp)
    8001b1e2:	a009                	j	8001b1e4 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$8len_utf817h6b8693741ddbecceE+0x12>
    }
    8001b1e4:	6522                	ld	a0,8(sp)
    8001b1e6:	60e2                	ld	ra,24(sp)
    8001b1e8:	6105                	addi	sp,sp,32
    8001b1ea:	8082                	ret

Disassembly of section .text._ZN4core4char7methods8len_utf817hc045ab91f009a8ffE:

000000008001b1ec <_ZN4core4char7methods8len_utf817hc045ab91f009a8ffE>:
const fn len_utf8(code: u32) -> usize {
    8001b1ec:	1101                	addi	sp,sp,-32
    8001b1ee:	0005059b          	sext.w	a1,a0
    8001b1f2:	862a                	mv	a2,a0
    8001b1f4:	e432                	sd	a2,8(sp)
    8001b1f6:	ce2a                	sw	a0,28(sp)
    8001b1f8:	07f00513          	li	a0,127
    if code < MAX_ONE_B {
    8001b1fc:	00b56663          	bltu	a0,a1,8001b208 <_ZN4core4char7methods8len_utf817hc045ab91f009a8ffE+0x1c>
    8001b200:	a009                	j	8001b202 <_ZN4core4char7methods8len_utf817hc045ab91f009a8ffE+0x16>
    8001b202:	4505                	li	a0,1
        1
    8001b204:	e82a                	sd	a0,16(sp)
    if code < MAX_ONE_B {
    8001b206:	a81d                	j	8001b23c <_ZN4core4char7methods8len_utf817hc045ab91f009a8ffE+0x50>
    } else if code < MAX_TWO_B {
    8001b208:	6522                	ld	a0,8(sp)
    8001b20a:	0005059b          	sext.w	a1,a0
    8001b20e:	7ff00513          	li	a0,2047
    8001b212:	00b56663          	bltu	a0,a1,8001b21e <_ZN4core4char7methods8len_utf817hc045ab91f009a8ffE+0x32>
    8001b216:	a009                	j	8001b218 <_ZN4core4char7methods8len_utf817hc045ab91f009a8ffE+0x2c>
    8001b218:	4509                	li	a0,2
        2
    8001b21a:	e82a                	sd	a0,16(sp)
    } else if code < MAX_TWO_B {
    8001b21c:	a839                	j	8001b23a <_ZN4core4char7methods8len_utf817hc045ab91f009a8ffE+0x4e>
    } else if code < MAX_THREE_B {
    8001b21e:	6522                	ld	a0,8(sp)
    8001b220:	0105551b          	srliw	a0,a0,0x10
    8001b224:	4581                	li	a1,0
    8001b226:	00b51663          	bne	a0,a1,8001b232 <_ZN4core4char7methods8len_utf817hc045ab91f009a8ffE+0x46>
    8001b22a:	a009                	j	8001b22c <_ZN4core4char7methods8len_utf817hc045ab91f009a8ffE+0x40>
    8001b22c:	450d                	li	a0,3
        3
    8001b22e:	e82a                	sd	a0,16(sp)
    } else if code < MAX_THREE_B {
    8001b230:	a021                	j	8001b238 <_ZN4core4char7methods8len_utf817hc045ab91f009a8ffE+0x4c>
    8001b232:	4511                	li	a0,4
        4
    8001b234:	e82a                	sd	a0,16(sp)
    } else if code < MAX_THREE_B {
    8001b236:	a009                	j	8001b238 <_ZN4core4char7methods8len_utf817hc045ab91f009a8ffE+0x4c>
    } else if code < MAX_TWO_B {
    8001b238:	a009                	j	8001b23a <_ZN4core4char7methods8len_utf817hc045ab91f009a8ffE+0x4e>
    if code < MAX_ONE_B {
    8001b23a:	a009                	j	8001b23c <_ZN4core4char7methods8len_utf817hc045ab91f009a8ffE+0x50>
}
    8001b23c:	6542                	ld	a0,16(sp)
    8001b23e:	6105                	addi	sp,sp,32
    8001b240:	8082                	ret

Disassembly of section .text._ZN6kernel6driver4uart9uart_init17h01daa242cfe569c9E:

000000008001b242 <_ZN6kernel6driver4uart9uart_init17h01daa242cfe569c9E>:
pub unsafe fn uart_init() {
    8001b242:	1101                	addi	sp,sp,-32
    let mut uart = UART.acquire();
    8001b244:	ec06                	sd	ra,24(sp)

000000008001b246 <.LBB0_5>:
    8001b246:	00040517          	auipc	a0,0x40
    8001b24a:	29a50513          	addi	a0,a0,666 # 8005b4e0 <_ZN6kernel6driver4uart4UART17h0708b3e179d548ddE>
    8001b24e:	ffff5097          	auipc	ra,0xffff5
    8001b252:	dc6080e7          	jalr	-570(ra) # 80010014 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h007ac3682185ef97E>
    8001b256:	e82a                	sd	a0,16(sp)
    8001b258:	a009                	j	8001b25a <.LBB0_5+0x14>
    8001b25a:	0808                	addi	a0,sp,16
    uart.init();
    8001b25c:	ffff6097          	auipc	ra,0xffff6
    8001b260:	1f2080e7          	jalr	498(ra) # 8001144e <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hce69ac52326dbcadE>
    8001b264:	e42a                	sd	a0,8(sp)
    8001b266:	a009                	j	8001b268 <.LBB0_5+0x22>
    8001b268:	6522                	ld	a0,8(sp)
    8001b26a:	00000097          	auipc	ra,0x0
    8001b26e:	01c080e7          	jalr	28(ra) # 8001b286 <_ZN6kernel6driver4uart4Uart4init17h72a59b83aa9e24abE>
    8001b272:	a009                	j	8001b274 <.LBB0_5+0x2e>
    drop(uart);
    8001b274:	6542                	ld	a0,16(sp)
    8001b276:	00002097          	auipc	ra,0x2
    8001b27a:	cb4080e7          	jalr	-844(ra) # 8001cf2a <_ZN4core3mem4drop17h96fc0e7c88170ba8E>
    8001b27e:	a009                	j	8001b280 <.LBB0_5+0x3a>
}
    8001b280:	60e2                	ld	ra,24(sp)
    8001b282:	6105                	addi	sp,sp,32
    8001b284:	8082                	ret

Disassembly of section .text._ZN6kernel6driver4uart4Uart4init17h72a59b83aa9e24abE:

000000008001b286 <_ZN6kernel6driver4uart4Uart4init17h72a59b83aa9e24abE>:
    pub fn init(&mut self) {
    8001b286:	1141                	addi	sp,sp,-16
    8001b288:	e406                	sd	ra,8(sp)
    8001b28a:	e02a                	sd	a0,0(sp)
    8001b28c:	10000537          	lui	a0,0x10000
    8001b290:	2505                	addiw	a0,a0,1
    8001b292:	4581                	li	a1,0
        write_reg(UART_BASE_ADDR + IER, 0x00);
    8001b294:	00000097          	auipc	ra,0x0
    8001b298:	244080e7          	jalr	580(ra) # 8001b4d8 <_ZN6kernel6driver4uart9write_reg17h2ea1b62b21a10486E>
    8001b29c:	a009                	j	8001b29e <_ZN6kernel6driver4uart4Uart4init17h72a59b83aa9e24abE+0x18>
    8001b29e:	10000537          	lui	a0,0x10000
    8001b2a2:	250d                	addiw	a0,a0,3
    8001b2a4:	08000593          	li	a1,128
        write_reg(UART_BASE_ADDR + LCR, LCR_BAUD_LATCH as u8);
    8001b2a8:	00000097          	auipc	ra,0x0
    8001b2ac:	230080e7          	jalr	560(ra) # 8001b4d8 <_ZN6kernel6driver4uart9write_reg17h2ea1b62b21a10486E>
    8001b2b0:	a009                	j	8001b2b2 <_ZN6kernel6driver4uart4Uart4init17h72a59b83aa9e24abE+0x2c>
    8001b2b2:	10000537          	lui	a0,0x10000
    8001b2b6:	458d                	li	a1,3
        write_reg(UART_BASE_ADDR, 0x03);
    8001b2b8:	00000097          	auipc	ra,0x0
    8001b2bc:	220080e7          	jalr	544(ra) # 8001b4d8 <_ZN6kernel6driver4uart9write_reg17h2ea1b62b21a10486E>
    8001b2c0:	a009                	j	8001b2c2 <_ZN6kernel6driver4uart4Uart4init17h72a59b83aa9e24abE+0x3c>
    8001b2c2:	10000537          	lui	a0,0x10000
    8001b2c6:	2505                	addiw	a0,a0,1
    8001b2c8:	4581                	li	a1,0
        write_reg(UART_BASE_ADDR + 1, 0x00);
    8001b2ca:	00000097          	auipc	ra,0x0
    8001b2ce:	20e080e7          	jalr	526(ra) # 8001b4d8 <_ZN6kernel6driver4uart9write_reg17h2ea1b62b21a10486E>
    8001b2d2:	a009                	j	8001b2d4 <_ZN6kernel6driver4uart4Uart4init17h72a59b83aa9e24abE+0x4e>
    8001b2d4:	10000537          	lui	a0,0x10000
    8001b2d8:	250d                	addiw	a0,a0,3
    8001b2da:	458d                	li	a1,3
        write_reg(UART_BASE_ADDR + LCR, LCR_EIGHT_BITS as u8);
    8001b2dc:	00000097          	auipc	ra,0x0
    8001b2e0:	1fc080e7          	jalr	508(ra) # 8001b4d8 <_ZN6kernel6driver4uart9write_reg17h2ea1b62b21a10486E>
    8001b2e4:	a009                	j	8001b2e6 <_ZN6kernel6driver4uart4Uart4init17h72a59b83aa9e24abE+0x60>
    8001b2e6:	10000537          	lui	a0,0x10000
    8001b2ea:	2509                	addiw	a0,a0,2
    8001b2ec:	459d                	li	a1,7
        write_reg(UART_BASE_ADDR + FCR, FCR_FIFO_ENABLE as u8 | FCR_FIFO_CLEAR as u8);
    8001b2ee:	00000097          	auipc	ra,0x0
    8001b2f2:	1ea080e7          	jalr	490(ra) # 8001b4d8 <_ZN6kernel6driver4uart9write_reg17h2ea1b62b21a10486E>
    8001b2f6:	a009                	j	8001b2f8 <_ZN6kernel6driver4uart4Uart4init17h72a59b83aa9e24abE+0x72>
    8001b2f8:	10000537          	lui	a0,0x10000
    8001b2fc:	2505                	addiw	a0,a0,1
    8001b2fe:	458d                	li	a1,3
        write_reg(UART_BASE_ADDR + IER, IER_TX_ENABLE as u8 | IER_RX_ENABLE as u8);
    8001b300:	00000097          	auipc	ra,0x0
    8001b304:	1d8080e7          	jalr	472(ra) # 8001b4d8 <_ZN6kernel6driver4uart9write_reg17h2ea1b62b21a10486E>
    8001b308:	a009                	j	8001b30a <_ZN6kernel6driver4uart4Uart4init17h72a59b83aa9e24abE+0x84>
    }
    8001b30a:	60a2                	ld	ra,8(sp)
    8001b30c:	0141                	addi	sp,sp,16
    8001b30e:	8082                	ret

Disassembly of section .text._ZN6kernel6driver4uart4Uart3put17h70c8696f08854618E:

000000008001b310 <_ZN6kernel6driver4uart4Uart3put17h70c8696f08854618E>:
    pub fn put(&mut self, c: u8) {
    8001b310:	7139                	addi	sp,sp,-64
    8001b312:	fc06                	sd	ra,56(sp)
    8001b314:	862e                	mv	a2,a1
    8001b316:	ec32                	sd	a2,24(sp)
    8001b318:	f02a                	sd	a0,32(sp)
    8001b31a:	02b107a3          	sb	a1,47(sp)
    8001b31e:	10000537          	lui	a0,0x10000
        let ptr = UART_BASE_ADDR as *mut u8;
    8001b322:	f82a                	sd	a0,48(sp)
        loop {
    8001b324:	a009                	j	8001b326 <_ZN6kernel6driver4uart4Uart3put17h70c8696f08854618E+0x16>
    8001b326:	10000537          	lui	a0,0x10000
    8001b32a:	4595                	li	a1,5
            if unsafe{ ptr.add(5).read_volatile() } & (1 << 5) != 0 {
    8001b32c:	00004097          	auipc	ra,0x4
    8001b330:	258080e7          	jalr	600(ra) # 8001f584 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1d203f00cca684c1E>
    8001b334:	e82a                	sd	a0,16(sp)
    8001b336:	a009                	j	8001b338 <_ZN6kernel6driver4uart4Uart3put17h70c8696f08854618E+0x28>
    8001b338:	6542                	ld	a0,16(sp)
    8001b33a:	fffed097          	auipc	ra,0xfffed
    8001b33e:	5a6080e7          	jalr	1446(ra) # 800088e0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$13read_volatile17h74b3a7ca48b9b2b5E>
    8001b342:	e42a                	sd	a0,8(sp)
    8001b344:	a009                	j	8001b346 <_ZN6kernel6driver4uart4Uart3put17h70c8696f08854618E+0x36>
    8001b346:	6522                	ld	a0,8(sp)
    8001b348:	02057513          	andi	a0,a0,32
    8001b34c:	4581                	li	a1,0
    8001b34e:	00b50c63          	beq	a0,a1,8001b366 <_ZN6kernel6driver4uart4Uart3put17h70c8696f08854618E+0x56>
    8001b352:	a009                	j	8001b354 <_ZN6kernel6driver4uart4Uart3put17h70c8696f08854618E+0x44>
    8001b354:	10000537          	lui	a0,0x10000
    8001b358:	4581                	li	a1,0
            ptr.add(0).write_volatile(c);
    8001b35a:	00004097          	auipc	ra,0x4
    8001b35e:	22a080e7          	jalr	554(ra) # 8001f584 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1d203f00cca684c1E>
    8001b362:	e02a                	sd	a0,0(sp)
    8001b364:	a011                	j	8001b368 <_ZN6kernel6driver4uart4Uart3put17h70c8696f08854618E+0x58>
        loop {
    8001b366:	b7c1                	j	8001b326 <_ZN6kernel6driver4uart4Uart3put17h70c8696f08854618E+0x16>
            ptr.add(0).write_volatile(c);
    8001b368:	65e2                	ld	a1,24(sp)
    8001b36a:	6502                	ld	a0,0(sp)
    8001b36c:	fffed097          	auipc	ra,0xfffed
    8001b370:	58e080e7          	jalr	1422(ra) # 800088fa <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$14write_volatile17h3132c1bed6ef07b7E>
    8001b374:	a009                	j	8001b376 <_ZN6kernel6driver4uart4Uart3put17h70c8696f08854618E+0x66>
    }
    8001b376:	70e2                	ld	ra,56(sp)
    8001b378:	6121                	addi	sp,sp,64
    8001b37a:	8082                	ret

Disassembly of section .text._ZN6kernel6driver4uart4Uart8transmit17h1cf1c52f0e7bc086E:

000000008001b37c <_ZN6kernel6driver4uart4Uart8transmit17h1cf1c52f0e7bc086E>:
    fn transmit(&mut self) {
    8001b37c:	711d                	addi	sp,sp,-96
    8001b37e:	ec86                	sd	ra,88(sp)
    8001b380:	f42a                	sd	a0,40(sp)
    8001b382:	e0aa                	sd	a0,64(sp)
    8001b384:	a009                	j	8001b386 <_ZN6kernel6driver4uart4Uart8transmit17h1cf1c52f0e7bc086E+0xa>
        while self.write_index != self.read_index && idle() {
    8001b386:	7522                	ld	a0,40(sp)
    8001b388:	00850593          	addi	a1,a0,8 # 10000008 <.Lline_table_start0+0xffc96a1>
    8001b38c:	ffff4097          	auipc	ra,0xffff4
    8001b390:	21c080e7          	jalr	540(ra) # 8000f5a8 <_ZN79_$LT$core..num..wrapping..Wrapping$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2ne17h2d3bd6a577efe0b1E>
    8001b394:	f02a                	sd	a0,32(sp)
    8001b396:	a025                	j	8001b3be <_ZN6kernel6driver4uart4Uart8transmit17h1cf1c52f0e7bc086E+0x42>
    8001b398:	4505                	li	a0,1
    8001b39a:	02a10ba3          	sb	a0,55(sp)
    8001b39e:	a819                	j	8001b3b4 <_ZN6kernel6driver4uart4Uart8transmit17h1cf1c52f0e7bc086E+0x38>
    8001b3a0:	4501                	li	a0,0
    8001b3a2:	02a10ba3          	sb	a0,55(sp)
    8001b3a6:	a039                	j	8001b3b4 <_ZN6kernel6driver4uart4Uart8transmit17h1cf1c52f0e7bc086E+0x38>
    8001b3a8:	00000097          	auipc	ra,0x0
    8001b3ac:	164080e7          	jalr	356(ra) # 8001b50c <_ZN6kernel6driver4uart4idle17h08982e96c6f33f38E>
    8001b3b0:	ec2a                	sd	a0,24(sp)
    8001b3b2:	a809                	j	8001b3c4 <_ZN6kernel6driver4uart4Uart8transmit17h1cf1c52f0e7bc086E+0x48>
    8001b3b4:	03714503          	lbu	a0,55(sp)
    8001b3b8:	8905                	andi	a0,a0,1
    8001b3ba:	e919                	bnez	a0,8001b3d0 <_ZN6kernel6driver4uart4Uart8transmit17h1cf1c52f0e7bc086E+0x54>
    8001b3bc:	a039                	j	8001b3ca <_ZN6kernel6driver4uart4Uart8transmit17h1cf1c52f0e7bc086E+0x4e>
    8001b3be:	7502                	ld	a0,32(sp)
    8001b3c0:	f565                	bnez	a0,8001b3a8 <_ZN6kernel6driver4uart4Uart8transmit17h1cf1c52f0e7bc086E+0x2c>
    8001b3c2:	bff9                	j	8001b3a0 <_ZN6kernel6driver4uart4Uart8transmit17h1cf1c52f0e7bc086E+0x24>
    8001b3c4:	6562                	ld	a0,24(sp)
    8001b3c6:	f969                	bnez	a0,8001b398 <_ZN6kernel6driver4uart4Uart8transmit17h1cf1c52f0e7bc086E+0x1c>
    8001b3c8:	bfe1                	j	8001b3a0 <_ZN6kernel6driver4uart4Uart8transmit17h1cf1c52f0e7bc086E+0x24>
    }
    8001b3ca:	60e6                	ld	ra,88(sp)
    8001b3cc:	6125                	addi	sp,sp,96
    8001b3ce:	8082                	ret
            let read_index = self.read_index.0 % UART_BUF_SIZE;
    8001b3d0:	7522                	ld	a0,40(sp)
    8001b3d2:	6508                	ld	a0,8(a0)
    8001b3d4:	01f57593          	andi	a1,a0,31
    8001b3d8:	e82e                	sd	a1,16(sp)
    8001b3da:	e4ae                	sd	a1,72(sp)
    8001b3dc:	457d                	li	a0,31
            let c = self.buf[read_index];
    8001b3de:	04b56863          	bltu	a0,a1,8001b42e <.LBB3_15+0x24>
    8001b3e2:	a009                	j	8001b3e4 <_ZN6kernel6driver4uart4Uart8transmit17h1cf1c52f0e7bc086E+0x68>
    8001b3e4:	7522                	ld	a0,40(sp)
    8001b3e6:	65c2                	ld	a1,16(sp)
    8001b3e8:	95aa                	add	a1,a1,a0
    8001b3ea:	0105c583          	lbu	a1,16(a1)
    8001b3ee:	e42e                	sd	a1,8(sp)
    8001b3f0:	04b10ba3          	sb	a1,87(sp)
            self.read_index += Wrapping(1);
    8001b3f4:	0521                	addi	a0,a0,8
    8001b3f6:	4585                	li	a1,1
    8001b3f8:	fc2e                	sd	a1,56(sp)
    8001b3fa:	fffec097          	auipc	ra,0xfffec
    8001b3fe:	05a080e7          	jalr	90(ra) # 80007454 <_ZN90_$LT$core..num..wrapping..Wrapping$LT$usize$GT$$u20$as$u20$core..ops..arith..AddAssign$GT$10add_assign17hc731864567f3481aE>
    8001b402:	a009                	j	8001b404 <_ZN6kernel6driver4uart4Uart8transmit17h1cf1c52f0e7bc086E+0x88>
                PROC_MANAGER.wake_up(&self.read_index as *const Wrapping<_> as usize);
    8001b404:	7522                	ld	a0,40(sp)
    8001b406:	00850593          	addi	a1,a0,8

000000008001b40a <.LBB3_15>:
    8001b40a:	0003c517          	auipc	a0,0x3c
    8001b40e:	19650513          	addi	a0,a0,406 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    8001b412:	ffff2097          	auipc	ra,0xffff2
    8001b416:	43c080e7          	jalr	1084(ra) # 8000d84e <_ZN6kernel7process7manager11ProcManager7wake_up17ha46b4d15ac07187bE>
    8001b41a:	a009                	j	8001b41c <.LBB3_15+0x12>
            write_reg(UART_BASE_ADDR + THR, c);
    8001b41c:	65a2                	ld	a1,8(sp)
    8001b41e:	10000537          	lui	a0,0x10000
    8001b422:	00000097          	auipc	ra,0x0
    8001b426:	0b6080e7          	jalr	182(ra) # 8001b4d8 <_ZN6kernel6driver4uart9write_reg17h2ea1b62b21a10486E>
    8001b42a:	a009                	j	8001b42c <.LBB3_15+0x22>
        while self.write_index != self.read_index && idle() {
    8001b42c:	bfa9                	j	8001b386 <_ZN6kernel6driver4uart4Uart8transmit17h1cf1c52f0e7bc086E+0xa>
            let c = self.buf[read_index];
    8001b42e:	6542                	ld	a0,16(sp)

000000008001b430 <.LBB3_16>:
    8001b430:	00010617          	auipc	a2,0x10
    8001b434:	d0060613          	addi	a2,a2,-768 # 8002b130 <.L__unnamed_1>
    8001b438:	02000593          	li	a1,32
    8001b43c:	00007097          	auipc	ra,0x7
    8001b440:	cec080e7          	jalr	-788(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN63_$LT$kernel..driver..uart..Uart$u20$as$u20$core..fmt..Write$GT$9write_str17ha964a515ad10903aE:

000000008001b446 <_ZN63_$LT$kernel..driver..uart..Uart$u20$as$u20$core..fmt..Write$GT$9write_str17ha964a515ad10903aE>:
    fn write_str(&mut self, out: &str) -> Result<(), Error> {
    8001b446:	7119                	addi	sp,sp,-128
    8001b448:	fc86                	sd	ra,120(sp)
    8001b44a:	e832                	sd	a2,16(sp)
    8001b44c:	862e                	mv	a2,a1
    8001b44e:	65c2                	ld	a1,16(sp)
    8001b450:	ec32                	sd	a2,24(sp)
    8001b452:	862a                	mv	a2,a0
    8001b454:	6562                	ld	a0,24(sp)
    8001b456:	f032                	sd	a2,32(sp)
    8001b458:	ecb2                	sd	a2,88(sp)
    8001b45a:	f0aa                	sd	a0,96(sp)
    8001b45c:	f4ae                	sd	a1,104(sp)
        for c in out.bytes() {
    8001b45e:	ffffd097          	auipc	ra,0xffffd
    8001b462:	d76080e7          	jalr	-650(ra) # 800181d4 <_ZN4core3str21_$LT$impl$u20$str$GT$5bytes17h8801f19f835ac923E>
    8001b466:	f42a                	sd	a0,40(sp)
    8001b468:	f82e                	sd	a1,48(sp)
    8001b46a:	a009                	j	8001b46c <_ZN63_$LT$kernel..driver..uart..Uart$u20$as$u20$core..fmt..Write$GT$9write_str17ha964a515ad10903aE+0x26>
    8001b46c:	75c2                	ld	a1,48(sp)
    8001b46e:	7522                	ld	a0,40(sp)
    8001b470:	00003097          	auipc	ra,0x3
    8001b474:	82a080e7          	jalr	-2006(ra) # 8001dc9a <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he31f6e5d3eec2be9E>
    8001b478:	e02a                	sd	a0,0(sp)
    8001b47a:	e42e                	sd	a1,8(sp)
    8001b47c:	a009                	j	8001b47e <_ZN63_$LT$kernel..driver..uart..Uart$u20$as$u20$core..fmt..Write$GT$9write_str17ha964a515ad10903aE+0x38>
    8001b47e:	6522                	ld	a0,8(sp)
    8001b480:	6582                	ld	a1,0(sp)
    8001b482:	e0ae                	sd	a1,64(sp)
    8001b484:	e4aa                	sd	a0,72(sp)
    8001b486:	a009                	j	8001b488 <_ZN63_$LT$kernel..driver..uart..Uart$u20$as$u20$core..fmt..Write$GT$9write_str17ha964a515ad10903aE+0x42>
    8001b488:	0088                	addi	a0,sp,64
    8001b48a:	ffff1097          	auipc	ra,0xffff1
    8001b48e:	60e080e7          	jalr	1550(ra) # 8000ca98 <_ZN81_$LT$core..str..iter..Bytes$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h47cb47c87defe3efE>
    8001b492:	04a10823          	sb	a0,80(sp)
    8001b496:	04b108a3          	sb	a1,81(sp)
    8001b49a:	a009                	j	8001b49c <_ZN63_$LT$kernel..driver..uart..Uart$u20$as$u20$core..fmt..Write$GT$9write_str17ha964a515ad10903aE+0x56>
    8001b49c:	05014503          	lbu	a0,80(sp)
    8001b4a0:	8905                	andi	a0,a0,1
    8001b4a2:	4581                	li	a1,0
    8001b4a4:	00b50463          	beq	a0,a1,8001b4ac <_ZN63_$LT$kernel..driver..uart..Uart$u20$as$u20$core..fmt..Write$GT$9write_str17ha964a515ad10903aE+0x66>
    8001b4a8:	a009                	j	8001b4aa <_ZN63_$LT$kernel..driver..uart..Uart$u20$as$u20$core..fmt..Write$GT$9write_str17ha964a515ad10903aE+0x64>
    8001b4aa:	a801                	j	8001b4ba <_ZN63_$LT$kernel..driver..uart..Uart$u20$as$u20$core..fmt..Write$GT$9write_str17ha964a515ad10903aE+0x74>
    8001b4ac:	4501                	li	a0,0
        Ok(())
    8001b4ae:	02a10fa3          	sb	a0,63(sp)
    }
    8001b4b2:	70e6                	ld	ra,120(sp)
    8001b4b4:	6109                	addi	sp,sp,128
    8001b4b6:	8082                	ret
        for c in out.bytes() {
    8001b4b8:	0000                	unimp
    8001b4ba:	7502                	ld	a0,32(sp)
    8001b4bc:	05110583          	lb	a1,81(sp)
    8001b4c0:	06b10aa3          	sb	a1,117(sp)
    8001b4c4:	06b10b23          	sb	a1,118(sp)
    8001b4c8:	06b10ba3          	sb	a1,119(sp)
            self.put(c);
    8001b4cc:	00000097          	auipc	ra,0x0
    8001b4d0:	e44080e7          	jalr	-444(ra) # 8001b310 <_ZN6kernel6driver4uart4Uart3put17h70c8696f08854618E>
    8001b4d4:	a009                	j	8001b4d6 <_ZN63_$LT$kernel..driver..uart..Uart$u20$as$u20$core..fmt..Write$GT$9write_str17ha964a515ad10903aE+0x90>
        for c in out.bytes() {
    8001b4d6:	bf4d                	j	8001b488 <_ZN63_$LT$kernel..driver..uart..Uart$u20$as$u20$core..fmt..Write$GT$9write_str17ha964a515ad10903aE+0x42>

Disassembly of section .text._ZN6kernel6driver4uart9write_reg17h2ea1b62b21a10486E:

000000008001b4d8 <_ZN6kernel6driver4uart9write_reg17h2ea1b62b21a10486E>:
            }
        }
    }
}

fn write_reg(addr: usize, val: u8) {
    8001b4d8:	1101                	addi	sp,sp,-32
    8001b4da:	ec06                	sd	ra,24(sp)
    8001b4dc:	e42a                	sd	a0,8(sp)
    8001b4de:	00b10ba3          	sb	a1,23(sp)
    unsafe{
        ptr::write(addr as *mut u8, val);
    8001b4e2:	ffffd097          	auipc	ra,0xffffd
    8001b4e6:	22e080e7          	jalr	558(ra) # 80018710 <_ZN4core3ptr5write17h0fb1ba83ac2984c7E>
    8001b4ea:	a009                	j	8001b4ec <_ZN6kernel6driver4uart9write_reg17h2ea1b62b21a10486E+0x14>
    }
}
    8001b4ec:	60e2                	ld	ra,24(sp)
    8001b4ee:	6105                	addi	sp,sp,32
    8001b4f0:	8082                	ret

Disassembly of section .text._ZN6kernel6driver4uart8read_reg17h6cf7d47ea5c47590E:

000000008001b4f2 <_ZN6kernel6driver4uart8read_reg17h6cf7d47ea5c47590E>:

fn read_reg(addr: usize) -> u8 {
    8001b4f2:	1101                	addi	sp,sp,-32
    8001b4f4:	ec06                	sd	ra,24(sp)
    8001b4f6:	e82a                	sd	a0,16(sp)
    unsafe {
        ptr::read(addr as *const u8)
    8001b4f8:	ffffd097          	auipc	ra,0xffffd
    8001b4fc:	f8e080e7          	jalr	-114(ra) # 80018486 <_ZN4core3ptr4read17h018161c0cd37b3fbE>
    8001b500:	e42a                	sd	a0,8(sp)
    8001b502:	a009                	j	8001b504 <_ZN6kernel6driver4uart8read_reg17h6cf7d47ea5c47590E+0x12>
    }
}
    8001b504:	6522                	ld	a0,8(sp)
    8001b506:	60e2                	ld	ra,24(sp)
    8001b508:	6105                	addi	sp,sp,32
    8001b50a:	8082                	ret

Disassembly of section .text._ZN6kernel6driver4uart4idle17h08982e96c6f33f38E:

000000008001b50c <_ZN6kernel6driver4uart4idle17h08982e96c6f33f38E>:

/// Read the LSR to see if it is able to transmit data. 
fn idle() -> bool {
    8001b50c:	1141                	addi	sp,sp,-16
    8001b50e:	e406                	sd	ra,8(sp)
    8001b510:	10000537          	lui	a0,0x10000
    8001b514:	2515                	addiw	a0,a0,5
    read_reg(UART_BASE_ADDR + LSR) & (1 << 5) > 0
    8001b516:	00000097          	auipc	ra,0x0
    8001b51a:	fdc080e7          	jalr	-36(ra) # 8001b4f2 <_ZN6kernel6driver4uart8read_reg17h6cf7d47ea5c47590E>
    8001b51e:	e02a                	sd	a0,0(sp)
    8001b520:	a009                	j	8001b522 <_ZN6kernel6driver4uart4idle17h08982e96c6f33f38E+0x16>
    8001b522:	6502                	ld	a0,0(sp)
    8001b524:	02057513          	andi	a0,a0,32
    8001b528:	8115                	srli	a0,a0,0x5
}
    8001b52a:	60a2                	ld	ra,8(sp)
    8001b52c:	0141                	addi	sp,sp,16
    8001b52e:	8082                	ret

Disassembly of section .text._ZN6kernel6driver4uart9putc_sync17h8ef1d9e0f2a8eae2E:

000000008001b530 <_ZN6kernel6driver4uart9putc_sync17h8ef1d9e0f2a8eae2E>:

/// Non-blocking write to uart device. 
pub(super) fn putc_sync(c: u8) {
    8001b530:	7179                	addi	sp,sp,-48
    8001b532:	f406                	sd	ra,40(sp)
    8001b534:	85aa                	mv	a1,a0
    8001b536:	ec2e                	sd	a1,24(sp)
    8001b538:	02a103a3          	sb	a0,39(sp)
    push_off();
    8001b53c:	ffff7097          	auipc	ra,0xffff7
    8001b540:	8f2080e7          	jalr	-1806(ra) # 80011e2e <_ZN6kernel7process3cpu8push_off17h0acd4baa93104745E>
    8001b544:	a009                	j	8001b546 <_ZN6kernel6driver4uart9putc_sync17h8ef1d9e0f2a8eae2E+0x16>
    8001b546:	4581                	li	a1,0
    if PANICKED.load(Ordering::Relaxed) {
    8001b548:	02b10323          	sb	a1,38(sp)

000000008001b54c <.LBB8_11>:
    8001b54c:	00049517          	auipc	a0,0x49
    8001b550:	03450513          	addi	a0,a0,52 # 80064580 <_ZN6kernel6driver7console8PANICKED17hbdbbad2548440929E>
    8001b554:	fffe9097          	auipc	ra,0xfffe9
    8001b558:	11a080e7          	jalr	282(ra) # 8000466e <_ZN4core4sync6atomic10AtomicBool4load17h49a663f50dd66935E>
    8001b55c:	e82a                	sd	a0,16(sp)
    8001b55e:	a009                	j	8001b560 <.LBB8_11+0x14>
    8001b560:	6542                	ld	a0,16(sp)
    8001b562:	e119                	bnez	a0,8001b568 <.LBB8_11+0x1c>
    8001b564:	a009                	j	8001b566 <.LBB8_11+0x1a>
        loop{}
    }
    while !idle() {}
    8001b566:	a011                	j	8001b56a <.LBB8_11+0x1e>
        loop{}
    8001b568:	a001                	j	8001b568 <.LBB8_11+0x1c>
    while !idle() {}
    8001b56a:	00000097          	auipc	ra,0x0
    8001b56e:	fa2080e7          	jalr	-94(ra) # 8001b50c <_ZN6kernel6driver4uart4idle17h08982e96c6f33f38E>
    8001b572:	e42a                	sd	a0,8(sp)
    8001b574:	a009                	j	8001b576 <.LBB8_11+0x2a>
    8001b576:	6522                	ld	a0,8(sp)
    8001b578:	4581                	li	a1,0
    8001b57a:	00b50b63          	beq	a0,a1,8001b590 <.LBB8_11+0x44>
    8001b57e:	a009                	j	8001b580 <.LBB8_11+0x34>
    write_reg(UART_BASE_ADDR + THR, c);
    8001b580:	65e2                	ld	a1,24(sp)
    8001b582:	10000537          	lui	a0,0x10000
    8001b586:	00000097          	auipc	ra,0x0
    8001b58a:	f52080e7          	jalr	-174(ra) # 8001b4d8 <_ZN6kernel6driver4uart9write_reg17h2ea1b62b21a10486E>
    8001b58e:	a011                	j	8001b592 <.LBB8_11+0x46>
    while !idle() {}
    8001b590:	bfe9                	j	8001b56a <.LBB8_11+0x1e>
    pop_off();
    8001b592:	ffff7097          	auipc	ra,0xffff7
    8001b596:	920080e7          	jalr	-1760(ra) # 80011eb2 <_ZN6kernel7process3cpu7pop_off17hb8c7b834ab1c7c4cE>
    8001b59a:	a009                	j	8001b59c <.LBB8_11+0x50>
}
    8001b59c:	70a2                	ld	ra,40(sp)
    8001b59e:	6145                	addi	sp,sp,48
    8001b5a0:	8082                	ret

Disassembly of section .text._ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h6e23c4cf8dccfdcdE:

000000008001b5a2 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h6e23c4cf8dccfdcdE>:
            }

            #[stable(feature = "rust1", since = "1.0.0")]
            impl Ord for $t {
                #[inline]
                fn cmp(&self, other: &$t) -> Ordering {
    8001b5a2:	7179                	addi	sp,sp,-48
    8001b5a4:	e42e                	sd	a1,8(sp)
    8001b5a6:	e82a                	sd	a0,16(sp)
    8001b5a8:	f02a                	sd	a0,32(sp)
    8001b5aa:	f42e                	sd	a1,40(sp)
                    // The order here is important to generate more optimal assembly.
                    // See <https://github.com/rust-lang/rust/issues/63758> for more info.
                    if *self < *other { Less }
    8001b5ac:	6108                	ld	a0,0(a0)
    8001b5ae:	618c                	ld	a1,0(a1)
    8001b5b0:	00b57863          	bgeu	a0,a1,8001b5c0 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h6e23c4cf8dccfdcdE+0x1e>
    8001b5b4:	a009                	j	8001b5b6 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h6e23c4cf8dccfdcdE+0x14>
    8001b5b6:	0ff00513          	li	a0,255
    8001b5ba:	00a10fa3          	sb	a0,31(sp)
    8001b5be:	a00d                	j	8001b5e0 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h6e23c4cf8dccfdcdE+0x3e>
                    else if *self == *other { Equal }
    8001b5c0:	65a2                	ld	a1,8(sp)
    8001b5c2:	6542                	ld	a0,16(sp)
    8001b5c4:	6108                	ld	a0,0(a0)
    8001b5c6:	618c                	ld	a1,0(a1)
    8001b5c8:	00b51763          	bne	a0,a1,8001b5d6 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h6e23c4cf8dccfdcdE+0x34>
    8001b5cc:	a009                	j	8001b5ce <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h6e23c4cf8dccfdcdE+0x2c>
    8001b5ce:	4501                	li	a0,0
    8001b5d0:	00a10fa3          	sb	a0,31(sp)
    8001b5d4:	a029                	j	8001b5de <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h6e23c4cf8dccfdcdE+0x3c>
    8001b5d6:	4505                	li	a0,1
                    else { Greater }
    8001b5d8:	00a10fa3          	sb	a0,31(sp)
                    else if *self == *other { Equal }
    8001b5dc:	a009                	j	8001b5de <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h6e23c4cf8dccfdcdE+0x3c>
                    if *self < *other { Less }
    8001b5de:	a009                	j	8001b5e0 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17h6e23c4cf8dccfdcdE+0x3e>
                }
    8001b5e0:	01f10503          	lb	a0,31(sp)
    8001b5e4:	6145                	addi	sp,sp,48
    8001b5e6:	8082                	ret

Disassembly of section .text._ZN4core3cmp5impls55_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u16$GT$2lt17h2ba0f37fe46e7bafE:

000000008001b5e8 <_ZN4core3cmp5impls55_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u16$GT$2lt17h2ba0f37fe46e7bafE>:
                fn lt(&self, other: &$t) -> bool { (*self) < (*other) }
    8001b5e8:	1141                	addi	sp,sp,-16
    8001b5ea:	e02a                	sd	a0,0(sp)
    8001b5ec:	e42e                	sd	a1,8(sp)
    8001b5ee:	00055503          	lhu	a0,0(a0) # 10000000 <.Lline_table_start0+0xffc9699>
    8001b5f2:	0005d583          	lhu	a1,0(a1)
    8001b5f6:	00b53533          	sltu	a0,a0,a1
    8001b5fa:	0141                	addi	sp,sp,16
    8001b5fc:	8082                	ret

Disassembly of section .text._ZN4core3cmp5impls55_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u32$GT$2lt17h9cf9ff1045241cdfE:

000000008001b5fe <_ZN4core3cmp5impls55_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u32$GT$2lt17h9cf9ff1045241cdfE>:
    8001b5fe:	1141                	addi	sp,sp,-16
    8001b600:	e02a                	sd	a0,0(sp)
    8001b602:	e42e                	sd	a1,8(sp)
    8001b604:	4108                	lw	a0,0(a0)
    8001b606:	418c                	lw	a1,0(a1)
    8001b608:	00b53533          	sltu	a0,a0,a1
    8001b60c:	0141                	addi	sp,sp,16
    8001b60e:	8082                	ret

Disassembly of section .text._ZN4core3cmp5impls56_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$usize$GT$2eq17hb88014a76b34c88fE:

000000008001b610 <_ZN4core3cmp5impls56_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$usize$GT$2eq17hb88014a76b34c88fE>:
                fn eq(&self, other: &$t) -> bool { (*self) == (*other) }
    8001b610:	1141                	addi	sp,sp,-16
    8001b612:	e02a                	sd	a0,0(sp)
    8001b614:	e42e                	sd	a1,8(sp)
    8001b616:	6108                	ld	a0,0(a0)
    8001b618:	618c                	ld	a1,0(a1)
    8001b61a:	8d2d                	xor	a0,a0,a1
    8001b61c:	00153513          	seqz	a0,a0
    8001b620:	0141                	addi	sp,sp,16
    8001b622:	8082                	ret

Disassembly of section .text._ZN4core3cmp5impls56_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$usize$GT$2ne17h958431dd9ff1337dE:

000000008001b624 <_ZN4core3cmp5impls56_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$usize$GT$2ne17h958431dd9ff1337dE>:
                fn ne(&self, other: &$t) -> bool { (*self) != (*other) }
    8001b624:	1141                	addi	sp,sp,-16
    8001b626:	e02a                	sd	a0,0(sp)
    8001b628:	e42e                	sd	a1,8(sp)
    8001b62a:	6108                	ld	a0,0(a0)
    8001b62c:	618c                	ld	a1,0(a1)
    8001b62e:	8d2d                	xor	a0,a0,a1
    8001b630:	00a03533          	snez	a0,a0
    8001b634:	0141                	addi	sp,sp,16
    8001b636:	8082                	ret

Disassembly of section .text._ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2le17hf6519ff85d133637E:

000000008001b638 <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2le17hf6519ff85d133637E>:
                fn le(&self, other: &$t) -> bool { (*self) <= (*other) }
    8001b638:	1101                	addi	sp,sp,-32
    8001b63a:	e42e                	sd	a1,8(sp)
    8001b63c:	85aa                	mv	a1,a0
    8001b63e:	6522                	ld	a0,8(sp)
    8001b640:	e82e                	sd	a1,16(sp)
    8001b642:	ec2a                	sd	a0,24(sp)
    8001b644:	618c                	ld	a1,0(a1)
    8001b646:	6108                	ld	a0,0(a0)
    8001b648:	00b53533          	sltu	a0,a0,a1
    8001b64c:	00154513          	xori	a0,a0,1
    8001b650:	6105                	addi	sp,sp,32
    8001b652:	8082                	ret

Disassembly of section .text._ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17ha09858e1dc8f460eE:

000000008001b654 <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17ha09858e1dc8f460eE>:
                fn lt(&self, other: &$t) -> bool { (*self) < (*other) }
    8001b654:	1141                	addi	sp,sp,-16
    8001b656:	e02a                	sd	a0,0(sp)
    8001b658:	e42e                	sd	a1,8(sp)
    8001b65a:	6108                	ld	a0,0(a0)
    8001b65c:	618c                	ld	a1,0(a1)
    8001b65e:	00b53533          	sltu	a0,a0,a1
    8001b662:	0141                	addi	sp,sp,16
    8001b664:	8082                	ret

Disassembly of section .text._ZN4core4iter8adapters3rev12Rev$LT$T$GT$3new17h2d10195152fc735dE:

000000008001b666 <_ZN4core4iter8adapters3rev12Rev$LT$T$GT$3new17h2d10195152fc735dE>:
pub struct Rev<T> {
    iter: T,
}

impl<T> Rev<T> {
    pub(in crate::iter) fn new(iter: T) -> Rev<T> {
    8001b666:	1101                	addi	sp,sp,-32
    8001b668:	e02e                	sd	a1,0(sp)
    8001b66a:	85aa                	mv	a1,a0
        Rev { iter }
    8001b66c:	6502                	ld	a0,0(sp)
    8001b66e:	6914                	ld	a3,16(a0)
    8001b670:	ec36                	sd	a3,24(sp)
    8001b672:	6510                	ld	a2,8(a0)
    8001b674:	e832                	sd	a2,16(sp)
    8001b676:	6108                	ld	a0,0(a0)
    8001b678:	e42a                	sd	a0,8(sp)
    8001b67a:	e994                	sd	a3,16(a1)
    8001b67c:	e590                	sd	a2,8(a1)
    8001b67e:	e188                	sd	a0,0(a1)
    }
    8001b680:	6105                	addi	sp,sp,32
    8001b682:	8082                	ret

Disassembly of section .text._ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h07513ad1b93938d8E:

000000008001b684 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h07513ad1b93938d8E>:
    fn into_iter(self) -> I {
    8001b684:	1141                	addi	sp,sp,-16
    8001b686:	e42e                	sd	a1,8(sp)
    8001b688:	85aa                	mv	a1,a0
        self
    8001b68a:	6522                	ld	a0,8(sp)
    8001b68c:	6910                	ld	a2,16(a0)
    8001b68e:	e990                	sd	a2,16(a1)
    8001b690:	6510                	ld	a2,8(a0)
    8001b692:	e590                	sd	a2,8(a1)
    8001b694:	6108                	ld	a0,0(a0)
    8001b696:	e188                	sd	a0,0(a1)
    }
    8001b698:	0141                	addi	sp,sp,16
    8001b69a:	8082                	ret

Disassembly of section .text._ZN98_$LT$core..iter..adapters..rev..Rev$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfb8b31ee37e3cf8fE:

000000008001b69c <_ZN98_$LT$core..iter..adapters..rev..Rev$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfb8b31ee37e3cf8fE>:
    I: DoubleEndedIterator,
{
    type Item = <I as Iterator>::Item;

    #[inline]
    fn next(&mut self) -> Option<<I as Iterator>::Item> {
    8001b69c:	1101                	addi	sp,sp,-32
    8001b69e:	ec06                	sd	ra,24(sp)
    8001b6a0:	e82a                	sd	a0,16(sp)
        self.iter.next_back()
    8001b6a2:	ffff0097          	auipc	ra,0xffff0
    8001b6a6:	1fa080e7          	jalr	506(ra) # 8000b89c <_ZN4core4iter5range125_$LT$impl$u20$core..iter..traits..double_ended..DoubleEndedIterator$u20$for$u20$core..ops..range..RangeInclusive$LT$A$GT$$GT$9next_back17h6e80df4b43a95866E>
    8001b6aa:	e02a                	sd	a0,0(sp)
    8001b6ac:	e42e                	sd	a1,8(sp)
    8001b6ae:	a009                	j	8001b6b0 <_ZN98_$LT$core..iter..adapters..rev..Rev$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfb8b31ee37e3cf8fE+0x14>
    }
    8001b6b0:	65a2                	ld	a1,8(sp)
    8001b6b2:	6502                	ld	a0,0(sp)
    8001b6b4:	60e2                	ld	ra,24(sp)
    8001b6b6:	6105                	addi	sp,sp,32
    8001b6b8:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed12Box$LT$T$GT$10new_zeroed17h2dc288bcc805675fE:

000000008001b6ba <_ZN5alloc5boxed12Box$LT$T$GT$10new_zeroed17h2dc288bcc805675fE>:
    ///
    /// [zeroed]: mem::MaybeUninit::zeroed
    #[inline]
    #[doc(alias = "calloc")]
    #[unstable(feature = "new_uninit", issue = "63291")]
    pub fn new_zeroed() -> Box<mem::MaybeUninit<T>> {
    8001b6ba:	1141                	addi	sp,sp,-16
        Self::new_zeroed_in(Global)
    8001b6bc:	e406                	sd	ra,8(sp)
    8001b6be:	00000097          	auipc	ra,0x0
    8001b6c2:	484080e7          	jalr	1156(ra) # 8001bb42 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17heb1bde8fe889e8ecE>
    8001b6c6:	e02a                	sd	a0,0(sp)
    8001b6c8:	a009                	j	8001b6ca <_ZN5alloc5boxed12Box$LT$T$GT$10new_zeroed17h2dc288bcc805675fE+0x10>
    }
    8001b6ca:	6502                	ld	a0,0(sp)
    8001b6cc:	60a2                	ld	ra,8(sp)
    8001b6ce:	0141                	addi	sp,sp,16
    8001b6d0:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed12Box$LT$T$GT$10new_zeroed17ha7605ec5087df013E:

000000008001b6d2 <_ZN5alloc5boxed12Box$LT$T$GT$10new_zeroed17ha7605ec5087df013E>:
    pub fn new_zeroed() -> Box<mem::MaybeUninit<T>> {
    8001b6d2:	1141                	addi	sp,sp,-16
        Self::new_zeroed_in(Global)
    8001b6d4:	e406                	sd	ra,8(sp)
    8001b6d6:	00000097          	auipc	ra,0x0
    8001b6da:	3d0080e7          	jalr	976(ra) # 8001baa6 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17h916b48f2a809df2aE>
    8001b6de:	e02a                	sd	a0,0(sp)
    8001b6e0:	a009                	j	8001b6e2 <_ZN5alloc5boxed12Box$LT$T$GT$10new_zeroed17ha7605ec5087df013E+0x10>
    }
    8001b6e2:	6502                	ld	a0,0(sp)
    8001b6e4:	60a2                	ld	ra,8(sp)
    8001b6e6:	0141                	addi	sp,sp,16
    8001b6e8:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed12Box$LT$T$GT$10new_zeroed17hb9a4ac65c8961d16E:

000000008001b6ea <_ZN5alloc5boxed12Box$LT$T$GT$10new_zeroed17hb9a4ac65c8961d16E>:
    pub fn new_zeroed() -> Box<mem::MaybeUninit<T>> {
    8001b6ea:	1141                	addi	sp,sp,-16
        Self::new_zeroed_in(Global)
    8001b6ec:	e406                	sd	ra,8(sp)
    8001b6ee:	00000097          	auipc	ra,0x0
    8001b6f2:	31c080e7          	jalr	796(ra) # 8001ba0a <_ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17h2f03b5aa500af675E>
    8001b6f6:	e02a                	sd	a0,0(sp)
    8001b6f8:	a009                	j	8001b6fa <_ZN5alloc5boxed12Box$LT$T$GT$10new_zeroed17hb9a4ac65c8961d16E+0x10>
    }
    8001b6fa:	6502                	ld	a0,0(sp)
    8001b6fc:	60a2                	ld	ra,8(sp)
    8001b6fe:	0141                	addi	sp,sp,16
    8001b700:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed12Box$LT$T$GT$10new_zeroed17he11e171c2ca6c076E:

000000008001b702 <_ZN5alloc5boxed12Box$LT$T$GT$10new_zeroed17he11e171c2ca6c076E>:
    pub fn new_zeroed() -> Box<mem::MaybeUninit<T>> {
    8001b702:	1141                	addi	sp,sp,-16
        Self::new_zeroed_in(Global)
    8001b704:	e406                	sd	ra,8(sp)
    8001b706:	00000097          	auipc	ra,0x0
    8001b70a:	352080e7          	jalr	850(ra) # 8001ba58 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17h875f12dc3dac5fbaE>
    8001b70e:	e02a                	sd	a0,0(sp)
    8001b710:	a009                	j	8001b712 <_ZN5alloc5boxed12Box$LT$T$GT$10new_zeroed17he11e171c2ca6c076E+0x10>
    }
    8001b712:	6502                	ld	a0,0(sp)
    8001b714:	60a2                	ld	ra,8(sp)
    8001b716:	0141                	addi	sp,sp,16
    8001b718:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed12Box$LT$T$GT$10new_zeroed17he41f9c30769fb517E:

000000008001b71a <_ZN5alloc5boxed12Box$LT$T$GT$10new_zeroed17he41f9c30769fb517E>:
    pub fn new_zeroed() -> Box<mem::MaybeUninit<T>> {
    8001b71a:	1141                	addi	sp,sp,-16
        Self::new_zeroed_in(Global)
    8001b71c:	e406                	sd	ra,8(sp)
    8001b71e:	00000097          	auipc	ra,0x0
    8001b722:	3d6080e7          	jalr	982(ra) # 8001baf4 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17hb74d8ce04ba2f3c1E>
    8001b726:	e02a                	sd	a0,0(sp)
    8001b728:	a009                	j	8001b72a <_ZN5alloc5boxed12Box$LT$T$GT$10new_zeroed17he41f9c30769fb517E+0x10>
    }
    8001b72a:	6502                	ld	a0,0(sp)
    8001b72c:	60a2                	ld	ra,8(sp)
    8001b72e:	0141                	addi	sp,sp,16
    8001b730:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17h15afec5304658230E:

000000008001b732 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17h15afec5304658230E>:
    ///
    /// [memory layout]: self#memory-layout
    /// [`Layout`]: crate::Layout
    #[unstable(feature = "allocator_api", issue = "32838")]
    #[inline]
    pub unsafe fn from_raw_in(raw: *mut T, alloc: A) -> Self {
    8001b732:	7179                	addi	sp,sp,-48
    8001b734:	f406                	sd	ra,40(sp)
    8001b736:	ec2a                	sd	a0,24(sp)
        Box(unsafe { Unique::new_unchecked(raw) }, alloc)
    8001b738:	ffff0097          	auipc	ra,0xffff0
    8001b73c:	34c080e7          	jalr	844(ra) # 8000ba84 <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17hb5a9e5725254bb89E>
    8001b740:	e42a                	sd	a0,8(sp)
    8001b742:	a009                	j	8001b744 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17h15afec5304658230E+0x12>
    8001b744:	6522                	ld	a0,8(sp)
    8001b746:	e82a                	sd	a0,16(sp)
    }
    8001b748:	70a2                	ld	ra,40(sp)
    8001b74a:	6145                	addi	sp,sp,48
    8001b74c:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17h187980a64cbbe532E:

000000008001b74e <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17h187980a64cbbe532E>:
    pub unsafe fn from_raw_in(raw: *mut T, alloc: A) -> Self {
    8001b74e:	7179                	addi	sp,sp,-48
    8001b750:	f406                	sd	ra,40(sp)
    8001b752:	ec2a                	sd	a0,24(sp)
        Box(unsafe { Unique::new_unchecked(raw) }, alloc)
    8001b754:	ffff0097          	auipc	ra,0xffff0
    8001b758:	358080e7          	jalr	856(ra) # 8000baac <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17hffcbfd9b9a15cee1E>
    8001b75c:	e42a                	sd	a0,8(sp)
    8001b75e:	a009                	j	8001b760 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17h187980a64cbbe532E+0x12>
    8001b760:	6522                	ld	a0,8(sp)
    8001b762:	e82a                	sd	a0,16(sp)
    }
    8001b764:	70a2                	ld	ra,40(sp)
    8001b766:	6145                	addi	sp,sp,48
    8001b768:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17h468e1ef7cafa8023E:

000000008001b76a <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17h468e1ef7cafa8023E>:
    pub unsafe fn from_raw_in(raw: *mut T, alloc: A) -> Self {
    8001b76a:	7179                	addi	sp,sp,-48
    8001b76c:	f406                	sd	ra,40(sp)
    8001b76e:	ec2a                	sd	a0,24(sp)
        Box(unsafe { Unique::new_unchecked(raw) }, alloc)
    8001b770:	ffff0097          	auipc	ra,0xffff0
    8001b774:	328080e7          	jalr	808(ra) # 8000ba98 <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17he1ff65b054541f9aE>
    8001b778:	e42a                	sd	a0,8(sp)
    8001b77a:	a009                	j	8001b77c <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17h468e1ef7cafa8023E+0x12>
    8001b77c:	6522                	ld	a0,8(sp)
    8001b77e:	e82a                	sd	a0,16(sp)
    }
    8001b780:	70a2                	ld	ra,40(sp)
    8001b782:	6145                	addi	sp,sp,48
    8001b784:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17h49971518b172ecd3E:

000000008001b786 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17h49971518b172ecd3E>:
    pub unsafe fn from_raw_in(raw: *mut T, alloc: A) -> Self {
    8001b786:	7179                	addi	sp,sp,-48
    8001b788:	f406                	sd	ra,40(sp)
    8001b78a:	ec2a                	sd	a0,24(sp)
        Box(unsafe { Unique::new_unchecked(raw) }, alloc)
    8001b78c:	ffff0097          	auipc	ra,0xffff0
    8001b790:	316080e7          	jalr	790(ra) # 8000baa2 <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17he38725f417943878E>
    8001b794:	e42a                	sd	a0,8(sp)
    8001b796:	a009                	j	8001b798 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17h49971518b172ecd3E+0x12>
    8001b798:	6522                	ld	a0,8(sp)
    8001b79a:	e82a                	sd	a0,16(sp)
    }
    8001b79c:	70a2                	ld	ra,40(sp)
    8001b79e:	6145                	addi	sp,sp,48
    8001b7a0:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17h68eabecb8cd08a3aE:

000000008001b7a2 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17h68eabecb8cd08a3aE>:
    pub unsafe fn from_raw_in(raw: *mut T, alloc: A) -> Self {
    8001b7a2:	7179                	addi	sp,sp,-48
    8001b7a4:	f406                	sd	ra,40(sp)
    8001b7a6:	ec2a                	sd	a0,24(sp)
        Box(unsafe { Unique::new_unchecked(raw) }, alloc)
    8001b7a8:	ffff0097          	auipc	ra,0xffff0
    8001b7ac:	2b4080e7          	jalr	692(ra) # 8000ba5c <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17h21d50a45a5a242bbE>
    8001b7b0:	e42a                	sd	a0,8(sp)
    8001b7b2:	a009                	j	8001b7b4 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17h68eabecb8cd08a3aE+0x12>
    8001b7b4:	6522                	ld	a0,8(sp)
    8001b7b6:	e82a                	sd	a0,16(sp)
    }
    8001b7b8:	70a2                	ld	ra,40(sp)
    8001b7ba:	6145                	addi	sp,sp,48
    8001b7bc:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17h91226147761dfc23E:

000000008001b7be <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17h91226147761dfc23E>:
    pub unsafe fn from_raw_in(raw: *mut T, alloc: A) -> Self {
    8001b7be:	7179                	addi	sp,sp,-48
    8001b7c0:	f406                	sd	ra,40(sp)
    8001b7c2:	ec2a                	sd	a0,24(sp)
        Box(unsafe { Unique::new_unchecked(raw) }, alloc)
    8001b7c4:	ffff0097          	auipc	ra,0xffff0
    8001b7c8:	2ac080e7          	jalr	684(ra) # 8000ba70 <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17h802ec2c42c5b54adE>
    8001b7cc:	e42a                	sd	a0,8(sp)
    8001b7ce:	a009                	j	8001b7d0 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17h91226147761dfc23E+0x12>
    8001b7d0:	6522                	ld	a0,8(sp)
    8001b7d2:	e82a                	sd	a0,16(sp)
    }
    8001b7d4:	70a2                	ld	ra,40(sp)
    8001b7d6:	6145                	addi	sp,sp,48
    8001b7d8:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17h9f1ea1f840330d88E:

000000008001b7da <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17h9f1ea1f840330d88E>:
    pub unsafe fn from_raw_in(raw: *mut T, alloc: A) -> Self {
    8001b7da:	7179                	addi	sp,sp,-48
    8001b7dc:	f406                	sd	ra,40(sp)
    8001b7de:	ec2a                	sd	a0,24(sp)
        Box(unsafe { Unique::new_unchecked(raw) }, alloc)
    8001b7e0:	ffff0097          	auipc	ra,0xffff0
    8001b7e4:	268080e7          	jalr	616(ra) # 8000ba48 <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17h0d12a57a76d0850fE>
    8001b7e8:	e42a                	sd	a0,8(sp)
    8001b7ea:	a009                	j	8001b7ec <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17h9f1ea1f840330d88E+0x12>
    8001b7ec:	6522                	ld	a0,8(sp)
    8001b7ee:	e82a                	sd	a0,16(sp)
    }
    8001b7f0:	70a2                	ld	ra,40(sp)
    8001b7f2:	6145                	addi	sp,sp,48
    8001b7f4:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17haf8eaf51394a2521E:

000000008001b7f6 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17haf8eaf51394a2521E>:
    pub unsafe fn from_raw_in(raw: *mut T, alloc: A) -> Self {
    8001b7f6:	7179                	addi	sp,sp,-48
    8001b7f8:	f406                	sd	ra,40(sp)
    8001b7fa:	ec2a                	sd	a0,24(sp)
        Box(unsafe { Unique::new_unchecked(raw) }, alloc)
    8001b7fc:	ffff0097          	auipc	ra,0xffff0
    8001b800:	292080e7          	jalr	658(ra) # 8000ba8e <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17hcb5e8bc8059451d1E>
    8001b804:	e42a                	sd	a0,8(sp)
    8001b806:	a009                	j	8001b808 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17haf8eaf51394a2521E+0x12>
    8001b808:	6522                	ld	a0,8(sp)
    8001b80a:	e82a                	sd	a0,16(sp)
    }
    8001b80c:	70a2                	ld	ra,40(sp)
    8001b80e:	6145                	addi	sp,sp,48
    8001b810:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17hbb480293fc4c0d0bE:

000000008001b812 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17hbb480293fc4c0d0bE>:
    pub unsafe fn from_raw_in(raw: *mut T, alloc: A) -> Self {
    8001b812:	7179                	addi	sp,sp,-48
    8001b814:	f406                	sd	ra,40(sp)
    8001b816:	ec2a                	sd	a0,24(sp)
        Box(unsafe { Unique::new_unchecked(raw) }, alloc)
    8001b818:	ffff0097          	auipc	ra,0xffff0
    8001b81c:	23a080e7          	jalr	570(ra) # 8000ba52 <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17h20d3eb97294874feE>
    8001b820:	e42a                	sd	a0,8(sp)
    8001b822:	a009                	j	8001b824 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17hbb480293fc4c0d0bE+0x12>
    8001b824:	6522                	ld	a0,8(sp)
    8001b826:	e82a                	sd	a0,16(sp)
    }
    8001b828:	70a2                	ld	ra,40(sp)
    8001b82a:	6145                	addi	sp,sp,48
    8001b82c:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17he38318e450c3c542E:

000000008001b82e <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17he38318e450c3c542E>:
    pub unsafe fn from_raw_in(raw: *mut T, alloc: A) -> Self {
    8001b82e:	7179                	addi	sp,sp,-48
    8001b830:	f406                	sd	ra,40(sp)
    8001b832:	ec2a                	sd	a0,24(sp)
        Box(unsafe { Unique::new_unchecked(raw) }, alloc)
    8001b834:	ffff0097          	auipc	ra,0xffff0
    8001b838:	246080e7          	jalr	582(ra) # 8000ba7a <_ZN4core3ptr6unique15Unique$LT$T$GT$13new_unchecked17ha8b21015e9411210E>
    8001b83c:	e42a                	sd	a0,8(sp)
    8001b83e:	a009                	j	8001b840 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17he38318e450c3c542E+0x12>
    8001b840:	6522                	ld	a0,8(sp)
    8001b842:	e82a                	sd	a0,16(sp)
    }
    8001b844:	70a2                	ld	ra,40(sp)
    8001b846:	6145                	addi	sp,sp,48
    8001b848:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17h48e22d69c2444c2aE:

000000008001b84a <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17h48e22d69c2444c2aE>:
        issue = "none",
        reason = "use `Box::leak(b).into()` or `Unique::from(Box::leak(b))` instead"
    )]
    #[inline]
    #[doc(hidden)]
    pub fn into_unique(b: Self) -> (Unique<T>, A) {
    8001b84a:	7179                	addi	sp,sp,-48
    8001b84c:	f406                	sd	ra,40(sp)
    8001b84e:	e82a                	sd	a0,16(sp)
    8001b850:	0808                	addi	a0,sp,16
        // Box is recognized as a "unique pointer" by Stacked Borrows, but internally it is a
        // raw pointer for the type system. Turning it directly into a raw pointer would not be
        // recognized as "releasing" the unique pointer to permit aliased raw accesses,
        // so all raw pointer methods have to go through `Box::leak`. Turning *that* to a raw pointer
        // behaves correctly.
        let alloc = unsafe { ptr::read(&b.1) };
    8001b852:	ffffd097          	auipc	ra,0xffffd
    8001b856:	d06080e7          	jalr	-762(ra) # 80018558 <_ZN4core3ptr4read17hb68b0b8aaefcfe70E>
    8001b85a:	a009                	j	8001b85c <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17h48e22d69c2444c2aE+0x12>
        (Unique::from(Box::leak(b)), alloc)
    8001b85c:	6542                	ld	a0,16(sp)
    8001b85e:	00001097          	auipc	ra,0x1
    8001b862:	84a080e7          	jalr	-1974(ra) # 8001c0a8 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h77f658a9b95a64a2E>
    8001b866:	e42a                	sd	a0,8(sp)
    8001b868:	a009                	j	8001b86a <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17h48e22d69c2444c2aE+0x20>
    8001b86a:	6522                	ld	a0,8(sp)
    8001b86c:	ffff0097          	auipc	ra,0xffff0
    8001b870:	396080e7          	jalr	918(ra) # 8000bc02 <_ZN95_$LT$core..ptr..unique..Unique$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$mut$u20$T$GT$$GT$4from17h45361f1294fceae9E>
    8001b874:	e02a                	sd	a0,0(sp)
    8001b876:	a009                	j	8001b878 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17h48e22d69c2444c2aE+0x2e>
    8001b878:	6502                	ld	a0,0(sp)
    8001b87a:	ec2a                	sd	a0,24(sp)
    }
    8001b87c:	70a2                	ld	ra,40(sp)
    8001b87e:	6145                	addi	sp,sp,48
    8001b880:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17h77bf5089d70199a1E:

000000008001b882 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17h77bf5089d70199a1E>:
    pub fn into_unique(b: Self) -> (Unique<T>, A) {
    8001b882:	7179                	addi	sp,sp,-48
    8001b884:	f406                	sd	ra,40(sp)
    8001b886:	e82a                	sd	a0,16(sp)
    8001b888:	0808                	addi	a0,sp,16
        let alloc = unsafe { ptr::read(&b.1) };
    8001b88a:	ffffd097          	auipc	ra,0xffffd
    8001b88e:	cce080e7          	jalr	-818(ra) # 80018558 <_ZN4core3ptr4read17hb68b0b8aaefcfe70E>
    8001b892:	a009                	j	8001b894 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17h77bf5089d70199a1E+0x12>
        (Unique::from(Box::leak(b)), alloc)
    8001b894:	6542                	ld	a0,16(sp)
    8001b896:	00001097          	auipc	ra,0x1
    8001b89a:	926080e7          	jalr	-1754(ra) # 8001c1bc <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17he4f1cfe07554e5a5E>
    8001b89e:	e42a                	sd	a0,8(sp)
    8001b8a0:	a009                	j	8001b8a2 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17h77bf5089d70199a1E+0x20>
    8001b8a2:	6522                	ld	a0,8(sp)
    8001b8a4:	ffff0097          	auipc	ra,0xffff0
    8001b8a8:	390080e7          	jalr	912(ra) # 8000bc34 <_ZN95_$LT$core..ptr..unique..Unique$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$mut$u20$T$GT$$GT$4from17hbd7fdd10f6dec294E>
    8001b8ac:	e02a                	sd	a0,0(sp)
    8001b8ae:	a009                	j	8001b8b0 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17h77bf5089d70199a1E+0x2e>
    8001b8b0:	6502                	ld	a0,0(sp)
    8001b8b2:	ec2a                	sd	a0,24(sp)
    }
    8001b8b4:	70a2                	ld	ra,40(sp)
    8001b8b6:	6145                	addi	sp,sp,48
    8001b8b8:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17h80646c1775168f03E:

000000008001b8ba <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17h80646c1775168f03E>:
    pub fn into_unique(b: Self) -> (Unique<T>, A) {
    8001b8ba:	7179                	addi	sp,sp,-48
    8001b8bc:	f406                	sd	ra,40(sp)
    8001b8be:	e82a                	sd	a0,16(sp)
    8001b8c0:	0808                	addi	a0,sp,16
        let alloc = unsafe { ptr::read(&b.1) };
    8001b8c2:	ffffd097          	auipc	ra,0xffffd
    8001b8c6:	c96080e7          	jalr	-874(ra) # 80018558 <_ZN4core3ptr4read17hb68b0b8aaefcfe70E>
    8001b8ca:	a009                	j	8001b8cc <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17h80646c1775168f03E+0x12>
        (Unique::from(Box::leak(b)), alloc)
    8001b8cc:	6542                	ld	a0,16(sp)
    8001b8ce:	00001097          	auipc	ra,0x1
    8001b8d2:	836080e7          	jalr	-1994(ra) # 8001c104 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h94cb03dd08e899b7E>
    8001b8d6:	e42a                	sd	a0,8(sp)
    8001b8d8:	a009                	j	8001b8da <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17h80646c1775168f03E+0x20>
    8001b8da:	6522                	ld	a0,8(sp)
    8001b8dc:	ffff0097          	auipc	ra,0xffff0
    8001b8e0:	33a080e7          	jalr	826(ra) # 8000bc16 <_ZN95_$LT$core..ptr..unique..Unique$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$mut$u20$T$GT$$GT$4from17h938709fab973920cE>
    8001b8e4:	e02a                	sd	a0,0(sp)
    8001b8e6:	a009                	j	8001b8e8 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17h80646c1775168f03E+0x2e>
    8001b8e8:	6502                	ld	a0,0(sp)
    8001b8ea:	ec2a                	sd	a0,24(sp)
    }
    8001b8ec:	70a2                	ld	ra,40(sp)
    8001b8ee:	6145                	addi	sp,sp,48
    8001b8f0:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17h93f491d0366dd1a9E:

000000008001b8f2 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17h93f491d0366dd1a9E>:
    pub fn into_unique(b: Self) -> (Unique<T>, A) {
    8001b8f2:	7179                	addi	sp,sp,-48
    8001b8f4:	f406                	sd	ra,40(sp)
    8001b8f6:	e82a                	sd	a0,16(sp)
    8001b8f8:	0808                	addi	a0,sp,16
        let alloc = unsafe { ptr::read(&b.1) };
    8001b8fa:	ffffd097          	auipc	ra,0xffffd
    8001b8fe:	c5e080e7          	jalr	-930(ra) # 80018558 <_ZN4core3ptr4read17hb68b0b8aaefcfe70E>
    8001b902:	a009                	j	8001b904 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17h93f491d0366dd1a9E+0x12>
        (Unique::from(Box::leak(b)), alloc)
    8001b904:	6542                	ld	a0,16(sp)
    8001b906:	00000097          	auipc	ra,0x0
    8001b90a:	746080e7          	jalr	1862(ra) # 8001c04c <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h3b2c40161bf6c180E>
    8001b90e:	e42a                	sd	a0,8(sp)
    8001b910:	a009                	j	8001b912 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17h93f491d0366dd1a9E+0x20>
    8001b912:	6522                	ld	a0,8(sp)
    8001b914:	ffff0097          	auipc	ra,0xffff0
    8001b918:	32a080e7          	jalr	810(ra) # 8000bc3e <_ZN95_$LT$core..ptr..unique..Unique$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$mut$u20$T$GT$$GT$4from17hd2fb1fd1ad0aa985E>
    8001b91c:	e02a                	sd	a0,0(sp)
    8001b91e:	a009                	j	8001b920 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17h93f491d0366dd1a9E+0x2e>
    8001b920:	6502                	ld	a0,0(sp)
    8001b922:	ec2a                	sd	a0,24(sp)
    }
    8001b924:	70a2                	ld	ra,40(sp)
    8001b926:	6145                	addi	sp,sp,48
    8001b928:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17h9813befe69e55ae1E:

000000008001b92a <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17h9813befe69e55ae1E>:
    pub fn into_unique(b: Self) -> (Unique<T>, A) {
    8001b92a:	7179                	addi	sp,sp,-48
    8001b92c:	f406                	sd	ra,40(sp)
    8001b92e:	e82a                	sd	a0,16(sp)
    8001b930:	0808                	addi	a0,sp,16
        let alloc = unsafe { ptr::read(&b.1) };
    8001b932:	ffffd097          	auipc	ra,0xffffd
    8001b936:	c26080e7          	jalr	-986(ra) # 80018558 <_ZN4core3ptr4read17hb68b0b8aaefcfe70E>
    8001b93a:	a009                	j	8001b93c <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17h9813befe69e55ae1E+0x12>
        (Unique::from(Box::leak(b)), alloc)
    8001b93c:	6542                	ld	a0,16(sp)
    8001b93e:	00000097          	auipc	ra,0x0
    8001b942:	73c080e7          	jalr	1852(ra) # 8001c07a <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h4b4e76265837c5ceE>
    8001b946:	e42a                	sd	a0,8(sp)
    8001b948:	a009                	j	8001b94a <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17h9813befe69e55ae1E+0x20>
    8001b94a:	6522                	ld	a0,8(sp)
    8001b94c:	ffff0097          	auipc	ra,0xffff0
    8001b950:	2de080e7          	jalr	734(ra) # 8000bc2a <_ZN95_$LT$core..ptr..unique..Unique$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$mut$u20$T$GT$$GT$4from17haf9e918ffbbde4a1E>
    8001b954:	e02a                	sd	a0,0(sp)
    8001b956:	a009                	j	8001b958 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17h9813befe69e55ae1E+0x2e>
    8001b958:	6502                	ld	a0,0(sp)
    8001b95a:	ec2a                	sd	a0,24(sp)
    }
    8001b95c:	70a2                	ld	ra,40(sp)
    8001b95e:	6145                	addi	sp,sp,48
    8001b960:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17hb4dd27b4659222a3E:

000000008001b962 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17hb4dd27b4659222a3E>:
    pub fn into_unique(b: Self) -> (Unique<T>, A) {
    8001b962:	7179                	addi	sp,sp,-48
    8001b964:	f406                	sd	ra,40(sp)
    8001b966:	e82a                	sd	a0,16(sp)
    8001b968:	0808                	addi	a0,sp,16
        let alloc = unsafe { ptr::read(&b.1) };
    8001b96a:	ffffd097          	auipc	ra,0xffffd
    8001b96e:	bee080e7          	jalr	-1042(ra) # 80018558 <_ZN4core3ptr4read17hb68b0b8aaefcfe70E>
    8001b972:	a009                	j	8001b974 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17hb4dd27b4659222a3E+0x12>
        (Unique::from(Box::leak(b)), alloc)
    8001b974:	6542                	ld	a0,16(sp)
    8001b976:	00001097          	auipc	ra,0x1
    8001b97a:	818080e7          	jalr	-2024(ra) # 8001c18e <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17hcf7bcb368f276750E>
    8001b97e:	e42a                	sd	a0,8(sp)
    8001b980:	a009                	j	8001b982 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17hb4dd27b4659222a3E+0x20>
    8001b982:	6522                	ld	a0,8(sp)
    8001b984:	ffff0097          	auipc	ra,0xffff0
    8001b988:	288080e7          	jalr	648(ra) # 8000bc0c <_ZN95_$LT$core..ptr..unique..Unique$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$mut$u20$T$GT$$GT$4from17h7ca19f4bf209b680E>
    8001b98c:	e02a                	sd	a0,0(sp)
    8001b98e:	a009                	j	8001b990 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17hb4dd27b4659222a3E+0x2e>
    8001b990:	6502                	ld	a0,0(sp)
    8001b992:	ec2a                	sd	a0,24(sp)
    }
    8001b994:	70a2                	ld	ra,40(sp)
    8001b996:	6145                	addi	sp,sp,48
    8001b998:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17hd08884b913096851E:

000000008001b99a <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17hd08884b913096851E>:
    pub fn into_unique(b: Self) -> (Unique<T>, A) {
    8001b99a:	7179                	addi	sp,sp,-48
    8001b99c:	f406                	sd	ra,40(sp)
    8001b99e:	e82a                	sd	a0,16(sp)
    8001b9a0:	0808                	addi	a0,sp,16
        let alloc = unsafe { ptr::read(&b.1) };
    8001b9a2:	ffffd097          	auipc	ra,0xffffd
    8001b9a6:	bb6080e7          	jalr	-1098(ra) # 80018558 <_ZN4core3ptr4read17hb68b0b8aaefcfe70E>
    8001b9aa:	a009                	j	8001b9ac <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17hd08884b913096851E+0x12>
        (Unique::from(Box::leak(b)), alloc)
    8001b9ac:	6542                	ld	a0,16(sp)
    8001b9ae:	00000097          	auipc	ra,0x0
    8001b9b2:	728080e7          	jalr	1832(ra) # 8001c0d6 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h925dcada2cd56bb2E>
    8001b9b6:	e42a                	sd	a0,8(sp)
    8001b9b8:	a009                	j	8001b9ba <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17hd08884b913096851E+0x20>
    8001b9ba:	6522                	ld	a0,8(sp)
    8001b9bc:	ffff0097          	auipc	ra,0xffff0
    8001b9c0:	264080e7          	jalr	612(ra) # 8000bc20 <_ZN95_$LT$core..ptr..unique..Unique$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$mut$u20$T$GT$$GT$4from17h961fb5f3bbf04d92E>
    8001b9c4:	e02a                	sd	a0,0(sp)
    8001b9c6:	a009                	j	8001b9c8 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17hd08884b913096851E+0x2e>
    8001b9c8:	6502                	ld	a0,0(sp)
    8001b9ca:	ec2a                	sd	a0,24(sp)
    }
    8001b9cc:	70a2                	ld	ra,40(sp)
    8001b9ce:	6145                	addi	sp,sp,48
    8001b9d0:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17hd4115af6111f1ecaE:

000000008001b9d2 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17hd4115af6111f1ecaE>:
    pub fn into_unique(b: Self) -> (Unique<T>, A) {
    8001b9d2:	7179                	addi	sp,sp,-48
    8001b9d4:	f406                	sd	ra,40(sp)
    8001b9d6:	e82a                	sd	a0,16(sp)
    8001b9d8:	0808                	addi	a0,sp,16
        let alloc = unsafe { ptr::read(&b.1) };
    8001b9da:	ffffd097          	auipc	ra,0xffffd
    8001b9de:	b7e080e7          	jalr	-1154(ra) # 80018558 <_ZN4core3ptr4read17hb68b0b8aaefcfe70E>
    8001b9e2:	a009                	j	8001b9e4 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17hd4115af6111f1ecaE+0x12>
        (Unique::from(Box::leak(b)), alloc)
    8001b9e4:	6542                	ld	a0,16(sp)
    8001b9e6:	00000097          	auipc	ra,0x0
    8001b9ea:	77a080e7          	jalr	1914(ra) # 8001c160 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17hb50450963f97575cE>
    8001b9ee:	e42a                	sd	a0,8(sp)
    8001b9f0:	a009                	j	8001b9f2 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17hd4115af6111f1ecaE+0x20>
    8001b9f2:	6522                	ld	a0,8(sp)
    8001b9f4:	ffff0097          	auipc	ra,0xffff0
    8001b9f8:	254080e7          	jalr	596(ra) # 8000bc48 <_ZN95_$LT$core..ptr..unique..Unique$LT$T$GT$$u20$as$u20$core..convert..From$LT$$RF$mut$u20$T$GT$$GT$4from17hdb52ac7756946cf1E>
    8001b9fc:	e02a                	sd	a0,0(sp)
    8001b9fe:	a009                	j	8001ba00 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17hd4115af6111f1ecaE+0x2e>
    8001ba00:	6502                	ld	a0,0(sp)
    8001ba02:	ec2a                	sd	a0,24(sp)
    }
    8001ba04:	70a2                	ld	ra,40(sp)
    8001ba06:	6145                	addi	sp,sp,48
    8001ba08:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17h2f03b5aa500af675E:

000000008001ba0a <_ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17h2f03b5aa500af675E>:
    pub fn new_zeroed_in(alloc: A) -> Box<mem::MaybeUninit<T>, A> {
    8001ba0a:	7139                	addi	sp,sp,-64
        let layout = Layout::new::<mem::MaybeUninit<T>>();
    8001ba0c:	fc06                	sd	ra,56(sp)
    8001ba0e:	fffed097          	auipc	ra,0xfffed
    8001ba12:	bf2080e7          	jalr	-1038(ra) # 80008600 <_ZN4core5alloc6layout6Layout3new17h9329aa50601ba1ffE>
    8001ba16:	862a                	mv	a2,a0
    8001ba18:	e032                	sd	a2,0(sp)
    8001ba1a:	862e                	mv	a2,a1
    8001ba1c:	e432                	sd	a2,8(sp)
    8001ba1e:	f02a                	sd	a0,32(sp)
    8001ba20:	f42e                	sd	a1,40(sp)
    8001ba22:	a009                	j	8001ba24 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17h2f03b5aa500af675E+0x1a>
        match Box::try_new_zeroed_in(alloc) {
    8001ba24:	00000097          	auipc	ra,0x0
    8001ba28:	2c4080e7          	jalr	708(ra) # 8001bce8 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h90782e32d4ec13edE>
    8001ba2c:	e82a                	sd	a0,16(sp)
    8001ba2e:	a009                	j	8001ba30 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17h2f03b5aa500af675E+0x26>
            Ok(m) => m,
    8001ba30:	6542                	ld	a0,16(sp)
    8001ba32:	00153593          	seqz	a1,a0
    8001ba36:	4581                	li	a1,0
    8001ba38:	00b51b63          	bne	a0,a1,8001ba4e <_ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17h2f03b5aa500af675E+0x44>
    8001ba3c:	a009                	j	8001ba3e <_ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17h2f03b5aa500af675E+0x34>
            Err(_) => handle_alloc_error(layout),
    8001ba3e:	65a2                	ld	a1,8(sp)
    8001ba40:	6502                	ld	a0,0(sp)
    8001ba42:	00006097          	auipc	ra,0x6
    8001ba46:	4b4080e7          	jalr	1204(ra) # 80021ef6 <_ZN5alloc5alloc18handle_alloc_error17haa1b1c0a80642c5aE>
    8001ba4a:	0000                	unimp
        match Box::try_new_zeroed_in(alloc) {
    8001ba4c:	0000                	unimp
            Ok(m) => m,
    8001ba4e:	6542                	ld	a0,16(sp)
    8001ba50:	f82a                	sd	a0,48(sp)
    }
    8001ba52:	70e2                	ld	ra,56(sp)
    8001ba54:	6121                	addi	sp,sp,64
    8001ba56:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17h875f12dc3dac5fbaE:

000000008001ba58 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17h875f12dc3dac5fbaE>:
    pub fn new_zeroed_in(alloc: A) -> Box<mem::MaybeUninit<T>, A> {
    8001ba58:	7139                	addi	sp,sp,-64
        let layout = Layout::new::<mem::MaybeUninit<T>>();
    8001ba5a:	fc06                	sd	ra,56(sp)
    8001ba5c:	fffed097          	auipc	ra,0xfffed
    8001ba60:	adc080e7          	jalr	-1316(ra) # 80008538 <_ZN4core5alloc6layout6Layout3new17h00440f750a953d15E>
    8001ba64:	862a                	mv	a2,a0
    8001ba66:	e032                	sd	a2,0(sp)
    8001ba68:	862e                	mv	a2,a1
    8001ba6a:	e432                	sd	a2,8(sp)
    8001ba6c:	f02a                	sd	a0,32(sp)
    8001ba6e:	f42e                	sd	a1,40(sp)
    8001ba70:	a009                	j	8001ba72 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17h875f12dc3dac5fbaE+0x1a>
        match Box::try_new_zeroed_in(alloc) {
    8001ba72:	00000097          	auipc	ra,0x0
    8001ba76:	3ce080e7          	jalr	974(ra) # 8001be40 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17hea8ededefef3bf78E>
    8001ba7a:	e82a                	sd	a0,16(sp)
    8001ba7c:	a009                	j	8001ba7e <_ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17h875f12dc3dac5fbaE+0x26>
            Ok(m) => m,
    8001ba7e:	6542                	ld	a0,16(sp)
    8001ba80:	00153593          	seqz	a1,a0
    8001ba84:	4581                	li	a1,0
    8001ba86:	00b51b63          	bne	a0,a1,8001ba9c <_ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17h875f12dc3dac5fbaE+0x44>
    8001ba8a:	a009                	j	8001ba8c <_ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17h875f12dc3dac5fbaE+0x34>
            Err(_) => handle_alloc_error(layout),
    8001ba8c:	65a2                	ld	a1,8(sp)
    8001ba8e:	6502                	ld	a0,0(sp)
    8001ba90:	00006097          	auipc	ra,0x6
    8001ba94:	466080e7          	jalr	1126(ra) # 80021ef6 <_ZN5alloc5alloc18handle_alloc_error17haa1b1c0a80642c5aE>
    8001ba98:	0000                	unimp
        match Box::try_new_zeroed_in(alloc) {
    8001ba9a:	0000                	unimp
            Ok(m) => m,
    8001ba9c:	6542                	ld	a0,16(sp)
    8001ba9e:	f82a                	sd	a0,48(sp)
    }
    8001baa0:	70e2                	ld	ra,56(sp)
    8001baa2:	6121                	addi	sp,sp,64
    8001baa4:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17h916b48f2a809df2aE:

000000008001baa6 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17h916b48f2a809df2aE>:
    pub fn new_zeroed_in(alloc: A) -> Box<mem::MaybeUninit<T>, A> {
    8001baa6:	7139                	addi	sp,sp,-64
        let layout = Layout::new::<mem::MaybeUninit<T>>();
    8001baa8:	fc06                	sd	ra,56(sp)
    8001baaa:	fffed097          	auipc	ra,0xfffed
    8001baae:	b24080e7          	jalr	-1244(ra) # 800085ce <_ZN4core5alloc6layout6Layout3new17h728acb0ef5b915afE>
    8001bab2:	862a                	mv	a2,a0
    8001bab4:	e032                	sd	a2,0(sp)
    8001bab6:	862e                	mv	a2,a1
    8001bab8:	e432                	sd	a2,8(sp)
    8001baba:	f02a                	sd	a0,32(sp)
    8001babc:	f42e                	sd	a1,40(sp)
    8001babe:	a009                	j	8001bac0 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17h916b48f2a809df2aE+0x1a>
        match Box::try_new_zeroed_in(alloc) {
    8001bac0:	00000097          	auipc	ra,0x0
    8001bac4:	17c080e7          	jalr	380(ra) # 8001bc3c <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h32b802f331a4867eE>
    8001bac8:	e82a                	sd	a0,16(sp)
    8001baca:	a009                	j	8001bacc <_ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17h916b48f2a809df2aE+0x26>
            Ok(m) => m,
    8001bacc:	6542                	ld	a0,16(sp)
    8001bace:	00153593          	seqz	a1,a0
    8001bad2:	4581                	li	a1,0
    8001bad4:	00b51b63          	bne	a0,a1,8001baea <_ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17h916b48f2a809df2aE+0x44>
    8001bad8:	a009                	j	8001bada <_ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17h916b48f2a809df2aE+0x34>
            Err(_) => handle_alloc_error(layout),
    8001bada:	65a2                	ld	a1,8(sp)
    8001badc:	6502                	ld	a0,0(sp)
    8001bade:	00006097          	auipc	ra,0x6
    8001bae2:	418080e7          	jalr	1048(ra) # 80021ef6 <_ZN5alloc5alloc18handle_alloc_error17haa1b1c0a80642c5aE>
    8001bae6:	0000                	unimp
        match Box::try_new_zeroed_in(alloc) {
    8001bae8:	0000                	unimp
            Ok(m) => m,
    8001baea:	6542                	ld	a0,16(sp)
    8001baec:	f82a                	sd	a0,48(sp)
    }
    8001baee:	70e2                	ld	ra,56(sp)
    8001baf0:	6121                	addi	sp,sp,64
    8001baf2:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17hb74d8ce04ba2f3c1E:

000000008001baf4 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17hb74d8ce04ba2f3c1E>:
    pub fn new_zeroed_in(alloc: A) -> Box<mem::MaybeUninit<T>, A> {
    8001baf4:	7139                	addi	sp,sp,-64
        let layout = Layout::new::<mem::MaybeUninit<T>>();
    8001baf6:	fc06                	sd	ra,56(sp)
    8001baf8:	fffed097          	auipc	ra,0xfffed
    8001bafc:	b3a080e7          	jalr	-1222(ra) # 80008632 <_ZN4core5alloc6layout6Layout3new17hfb4102c77959cfa1E>
    8001bb00:	862a                	mv	a2,a0
    8001bb02:	e032                	sd	a2,0(sp)
    8001bb04:	862e                	mv	a2,a1
    8001bb06:	e432                	sd	a2,8(sp)
    8001bb08:	f02a                	sd	a0,32(sp)
    8001bb0a:	f42e                	sd	a1,40(sp)
    8001bb0c:	a009                	j	8001bb0e <_ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17hb74d8ce04ba2f3c1E+0x1a>
        match Box::try_new_zeroed_in(alloc) {
    8001bb0e:	00000097          	auipc	ra,0x0
    8001bb12:	286080e7          	jalr	646(ra) # 8001bd94 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h9571c749e8c8e6e8E>
    8001bb16:	e82a                	sd	a0,16(sp)
    8001bb18:	a009                	j	8001bb1a <_ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17hb74d8ce04ba2f3c1E+0x26>
            Ok(m) => m,
    8001bb1a:	6542                	ld	a0,16(sp)
    8001bb1c:	00153593          	seqz	a1,a0
    8001bb20:	4581                	li	a1,0
    8001bb22:	00b51b63          	bne	a0,a1,8001bb38 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17hb74d8ce04ba2f3c1E+0x44>
    8001bb26:	a009                	j	8001bb28 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17hb74d8ce04ba2f3c1E+0x34>
            Err(_) => handle_alloc_error(layout),
    8001bb28:	65a2                	ld	a1,8(sp)
    8001bb2a:	6502                	ld	a0,0(sp)
    8001bb2c:	00006097          	auipc	ra,0x6
    8001bb30:	3ca080e7          	jalr	970(ra) # 80021ef6 <_ZN5alloc5alloc18handle_alloc_error17haa1b1c0a80642c5aE>
    8001bb34:	0000                	unimp
        match Box::try_new_zeroed_in(alloc) {
    8001bb36:	0000                	unimp
            Ok(m) => m,
    8001bb38:	6542                	ld	a0,16(sp)
    8001bb3a:	f82a                	sd	a0,48(sp)
    }
    8001bb3c:	70e2                	ld	ra,56(sp)
    8001bb3e:	6121                	addi	sp,sp,64
    8001bb40:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17heb1bde8fe889e8ecE:

000000008001bb42 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17heb1bde8fe889e8ecE>:
    pub fn new_zeroed_in(alloc: A) -> Box<mem::MaybeUninit<T>, A> {
    8001bb42:	7139                	addi	sp,sp,-64
        let layout = Layout::new::<mem::MaybeUninit<T>>();
    8001bb44:	fc06                	sd	ra,56(sp)
    8001bb46:	fffed097          	auipc	ra,0xfffed
    8001bb4a:	a24080e7          	jalr	-1500(ra) # 8000856a <_ZN4core5alloc6layout6Layout3new17h0cabd46b2af96281E>
    8001bb4e:	862a                	mv	a2,a0
    8001bb50:	e032                	sd	a2,0(sp)
    8001bb52:	862e                	mv	a2,a1
    8001bb54:	e432                	sd	a2,8(sp)
    8001bb56:	f02a                	sd	a0,32(sp)
    8001bb58:	f42e                	sd	a1,40(sp)
    8001bb5a:	a009                	j	8001bb5c <_ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17heb1bde8fe889e8ecE+0x1a>
        match Box::try_new_zeroed_in(alloc) {
    8001bb5c:	00000097          	auipc	ra,0x0
    8001bb60:	034080e7          	jalr	52(ra) # 8001bb90 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h29f0c45ca59c2dc8E>
    8001bb64:	e82a                	sd	a0,16(sp)
    8001bb66:	a009                	j	8001bb68 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17heb1bde8fe889e8ecE+0x26>
            Ok(m) => m,
    8001bb68:	6542                	ld	a0,16(sp)
    8001bb6a:	00153593          	seqz	a1,a0
    8001bb6e:	4581                	li	a1,0
    8001bb70:	00b51b63          	bne	a0,a1,8001bb86 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17heb1bde8fe889e8ecE+0x44>
    8001bb74:	a009                	j	8001bb76 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$13new_zeroed_in17heb1bde8fe889e8ecE+0x34>
            Err(_) => handle_alloc_error(layout),
    8001bb76:	65a2                	ld	a1,8(sp)
    8001bb78:	6502                	ld	a0,0(sp)
    8001bb7a:	00006097          	auipc	ra,0x6
    8001bb7e:	37c080e7          	jalr	892(ra) # 80021ef6 <_ZN5alloc5alloc18handle_alloc_error17haa1b1c0a80642c5aE>
    8001bb82:	0000                	unimp
        match Box::try_new_zeroed_in(alloc) {
    8001bb84:	0000                	unimp
            Ok(m) => m,
    8001bb86:	6542                	ld	a0,16(sp)
    8001bb88:	f82a                	sd	a0,48(sp)
    }
    8001bb8a:	70e2                	ld	ra,56(sp)
    8001bb8c:	6121                	addi	sp,sp,64
    8001bb8e:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h29f0c45ca59c2dc8E:

000000008001bb90 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h29f0c45ca59c2dc8E>:
    pub fn try_new_zeroed_in(alloc: A) -> Result<Box<mem::MaybeUninit<T>, A>, AllocError> {
    8001bb90:	7175                	addi	sp,sp,-144
        let layout = Layout::new::<mem::MaybeUninit<T>>();
    8001bb92:	e506                	sd	ra,136(sp)
    8001bb94:	fffed097          	auipc	ra,0xfffed
    8001bb98:	9d6080e7          	jalr	-1578(ra) # 8000856a <_ZN4core5alloc6layout6Layout3new17h0cabd46b2af96281E>
    8001bb9c:	862a                	mv	a2,a0
    8001bb9e:	f432                	sd	a2,40(sp)
    8001bba0:	862e                	mv	a2,a1
    8001bba2:	f832                	sd	a2,48(sp)
    8001bba4:	f0aa                	sd	a0,96(sp)
    8001bba6:	f4ae                	sd	a1,104(sp)
    8001bba8:	a009                	j	8001bbaa <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h29f0c45ca59c2dc8E+0x1a>
        let ptr = alloc.allocate_zeroed(layout)?.cast();
    8001bbaa:	7642                	ld	a2,48(sp)
    8001bbac:	75a2                	ld	a1,40(sp)
    8001bbae:	1828                	addi	a0,sp,56
    8001bbb0:	ffff0097          	auipc	ra,0xffff0
    8001bbb4:	66e080e7          	jalr	1646(ra) # 8000c21e <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$15allocate_zeroed17h62d497141254e70dE>
    8001bbb8:	ec2a                	sd	a0,24(sp)
    8001bbba:	f02e                	sd	a1,32(sp)
    8001bbbc:	a009                	j	8001bbbe <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h29f0c45ca59c2dc8E+0x2e>
    8001bbbe:	7582                	ld	a1,32(sp)
    8001bbc0:	6562                	ld	a0,24(sp)
    8001bbc2:	ffff1097          	auipc	ra,0xffff1
    8001bbc6:	528080e7          	jalr	1320(ra) # 8000d0ea <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h1c9f3c35158f4b17E>
    8001bbca:	e4aa                	sd	a0,72(sp)
    8001bbcc:	e8ae                	sd	a1,80(sp)
    8001bbce:	a009                	j	8001bbd0 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h29f0c45ca59c2dc8E+0x40>
    8001bbd0:	6526                	ld	a0,72(sp)
    8001bbd2:	00153593          	seqz	a1,a0
    8001bbd6:	4581                	li	a1,0
    8001bbd8:	00b51463          	bne	a0,a1,8001bbe0 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h29f0c45ca59c2dc8E+0x50>
    8001bbdc:	a009                	j	8001bbde <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h29f0c45ca59c2dc8E+0x4e>
    8001bbde:	a831                	j	8001bbfa <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h29f0c45ca59c2dc8E+0x6a>
    8001bbe0:	6526                	ld	a0,72(sp)
    8001bbe2:	65c6                	ld	a1,80(sp)
    8001bbe4:	f8aa                	sd	a0,112(sp)
    8001bbe6:	fcae                	sd	a1,120(sp)
    8001bbe8:	ffff3097          	auipc	ra,0xffff3
    8001bbec:	7a6080e7          	jalr	1958(ra) # 8000f38e <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h85615dabbcfe0ebdE>
    8001bbf0:	85aa                	mv	a1,a0
    8001bbf2:	e82e                	sd	a1,16(sp)
    8001bbf4:	e12a                	sd	a0,128(sp)
    8001bbf6:	a831                	j	8001bc12 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h29f0c45ca59c2dc8E+0x82>
    8001bbf8:	0000                	unimp
    8001bbfa:	ffff1097          	auipc	ra,0xffff1
    8001bbfe:	e98080e7          	jalr	-360(ra) # 8000ca92 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h37d2ccc52635f8a7E>
    8001bc02:	a009                	j	8001bc04 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h29f0c45ca59c2dc8E+0x74>
    8001bc04:	ffff1097          	auipc	ra,0xffff1
    8001bc08:	4b2080e7          	jalr	1202(ra) # 8000d0b6 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17hc5c17464a72e6965E>
    8001bc0c:	e0aa                	sd	a0,64(sp)
    8001bc0e:	a009                	j	8001bc10 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h29f0c45ca59c2dc8E+0x80>
    }
    8001bc10:	a015                	j	8001bc34 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h29f0c45ca59c2dc8E+0xa4>
        unsafe { Ok(Box::from_raw_in(ptr.as_ptr(), alloc)) }
    8001bc12:	6542                	ld	a0,16(sp)
    8001bc14:	ffff4097          	auipc	ra,0xffff4
    8001bc18:	814080e7          	jalr	-2028(ra) # 8000f428 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h4054fe6794409e65E>
    8001bc1c:	e42a                	sd	a0,8(sp)
    8001bc1e:	a009                	j	8001bc20 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h29f0c45ca59c2dc8E+0x90>
    8001bc20:	6522                	ld	a0,8(sp)
    8001bc22:	00000097          	auipc	ra,0x0
    8001bc26:	b10080e7          	jalr	-1264(ra) # 8001b732 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17h15afec5304658230E>
    8001bc2a:	e02a                	sd	a0,0(sp)
    8001bc2c:	a009                	j	8001bc2e <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h29f0c45ca59c2dc8E+0x9e>
    8001bc2e:	6502                	ld	a0,0(sp)
    8001bc30:	e0aa                	sd	a0,64(sp)
    }
    8001bc32:	a009                	j	8001bc34 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h29f0c45ca59c2dc8E+0xa4>
    8001bc34:	6506                	ld	a0,64(sp)
    8001bc36:	60aa                	ld	ra,136(sp)
    8001bc38:	6149                	addi	sp,sp,144
    8001bc3a:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h32b802f331a4867eE:

000000008001bc3c <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h32b802f331a4867eE>:
    pub fn try_new_zeroed_in(alloc: A) -> Result<Box<mem::MaybeUninit<T>, A>, AllocError> {
    8001bc3c:	7175                	addi	sp,sp,-144
        let layout = Layout::new::<mem::MaybeUninit<T>>();
    8001bc3e:	e506                	sd	ra,136(sp)
    8001bc40:	fffed097          	auipc	ra,0xfffed
    8001bc44:	98e080e7          	jalr	-1650(ra) # 800085ce <_ZN4core5alloc6layout6Layout3new17h728acb0ef5b915afE>
    8001bc48:	862a                	mv	a2,a0
    8001bc4a:	f432                	sd	a2,40(sp)
    8001bc4c:	862e                	mv	a2,a1
    8001bc4e:	f832                	sd	a2,48(sp)
    8001bc50:	f0aa                	sd	a0,96(sp)
    8001bc52:	f4ae                	sd	a1,104(sp)
    8001bc54:	a009                	j	8001bc56 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h32b802f331a4867eE+0x1a>
        let ptr = alloc.allocate_zeroed(layout)?.cast();
    8001bc56:	7642                	ld	a2,48(sp)
    8001bc58:	75a2                	ld	a1,40(sp)
    8001bc5a:	1828                	addi	a0,sp,56
    8001bc5c:	ffff0097          	auipc	ra,0xffff0
    8001bc60:	5c2080e7          	jalr	1474(ra) # 8000c21e <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$15allocate_zeroed17h62d497141254e70dE>
    8001bc64:	ec2a                	sd	a0,24(sp)
    8001bc66:	f02e                	sd	a1,32(sp)
    8001bc68:	a009                	j	8001bc6a <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h32b802f331a4867eE+0x2e>
    8001bc6a:	7582                	ld	a1,32(sp)
    8001bc6c:	6562                	ld	a0,24(sp)
    8001bc6e:	ffff1097          	auipc	ra,0xffff1
    8001bc72:	47c080e7          	jalr	1148(ra) # 8000d0ea <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h1c9f3c35158f4b17E>
    8001bc76:	e4aa                	sd	a0,72(sp)
    8001bc78:	e8ae                	sd	a1,80(sp)
    8001bc7a:	a009                	j	8001bc7c <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h32b802f331a4867eE+0x40>
    8001bc7c:	6526                	ld	a0,72(sp)
    8001bc7e:	00153593          	seqz	a1,a0
    8001bc82:	4581                	li	a1,0
    8001bc84:	00b51463          	bne	a0,a1,8001bc8c <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h32b802f331a4867eE+0x50>
    8001bc88:	a009                	j	8001bc8a <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h32b802f331a4867eE+0x4e>
    8001bc8a:	a831                	j	8001bca6 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h32b802f331a4867eE+0x6a>
    8001bc8c:	6526                	ld	a0,72(sp)
    8001bc8e:	65c6                	ld	a1,80(sp)
    8001bc90:	f8aa                	sd	a0,112(sp)
    8001bc92:	fcae                	sd	a1,120(sp)
    8001bc94:	ffff3097          	auipc	ra,0xffff3
    8001bc98:	74e080e7          	jalr	1870(ra) # 8000f3e2 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17hf78234e23d9835f1E>
    8001bc9c:	85aa                	mv	a1,a0
    8001bc9e:	e82e                	sd	a1,16(sp)
    8001bca0:	e12a                	sd	a0,128(sp)
    8001bca2:	a831                	j	8001bcbe <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h32b802f331a4867eE+0x82>
    8001bca4:	0000                	unimp
    8001bca6:	ffff1097          	auipc	ra,0xffff1
    8001bcaa:	dec080e7          	jalr	-532(ra) # 8000ca92 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h37d2ccc52635f8a7E>
    8001bcae:	a009                	j	8001bcb0 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h32b802f331a4867eE+0x74>
    8001bcb0:	ffff1097          	auipc	ra,0xffff1
    8001bcb4:	3c0080e7          	jalr	960(ra) # 8000d070 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h849eab7baac337bbE>
    8001bcb8:	e0aa                	sd	a0,64(sp)
    8001bcba:	a009                	j	8001bcbc <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h32b802f331a4867eE+0x80>
    }
    8001bcbc:	a015                	j	8001bce0 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h32b802f331a4867eE+0xa4>
        unsafe { Ok(Box::from_raw_in(ptr.as_ptr(), alloc)) }
    8001bcbe:	6542                	ld	a0,16(sp)
    8001bcc0:	ffff3097          	auipc	ra,0xffff3
    8001bcc4:	7a2080e7          	jalr	1954(ra) # 8000f462 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17habcb33ad0b4dc302E>
    8001bcc8:	e42a                	sd	a0,8(sp)
    8001bcca:	a009                	j	8001bccc <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h32b802f331a4867eE+0x90>
    8001bccc:	6522                	ld	a0,8(sp)
    8001bcce:	00000097          	auipc	ra,0x0
    8001bcd2:	a80080e7          	jalr	-1408(ra) # 8001b74e <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17h187980a64cbbe532E>
    8001bcd6:	e02a                	sd	a0,0(sp)
    8001bcd8:	a009                	j	8001bcda <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h32b802f331a4867eE+0x9e>
    8001bcda:	6502                	ld	a0,0(sp)
    8001bcdc:	e0aa                	sd	a0,64(sp)
    }
    8001bcde:	a009                	j	8001bce0 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h32b802f331a4867eE+0xa4>
    8001bce0:	6506                	ld	a0,64(sp)
    8001bce2:	60aa                	ld	ra,136(sp)
    8001bce4:	6149                	addi	sp,sp,144
    8001bce6:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h90782e32d4ec13edE:

000000008001bce8 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h90782e32d4ec13edE>:
    pub fn try_new_zeroed_in(alloc: A) -> Result<Box<mem::MaybeUninit<T>, A>, AllocError> {
    8001bce8:	7175                	addi	sp,sp,-144
        let layout = Layout::new::<mem::MaybeUninit<T>>();
    8001bcea:	e506                	sd	ra,136(sp)
    8001bcec:	fffed097          	auipc	ra,0xfffed
    8001bcf0:	914080e7          	jalr	-1772(ra) # 80008600 <_ZN4core5alloc6layout6Layout3new17h9329aa50601ba1ffE>
    8001bcf4:	862a                	mv	a2,a0
    8001bcf6:	f432                	sd	a2,40(sp)
    8001bcf8:	862e                	mv	a2,a1
    8001bcfa:	f832                	sd	a2,48(sp)
    8001bcfc:	f0aa                	sd	a0,96(sp)
    8001bcfe:	f4ae                	sd	a1,104(sp)
    8001bd00:	a009                	j	8001bd02 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h90782e32d4ec13edE+0x1a>
        let ptr = alloc.allocate_zeroed(layout)?.cast();
    8001bd02:	7642                	ld	a2,48(sp)
    8001bd04:	75a2                	ld	a1,40(sp)
    8001bd06:	1828                	addi	a0,sp,56
    8001bd08:	ffff0097          	auipc	ra,0xffff0
    8001bd0c:	516080e7          	jalr	1302(ra) # 8000c21e <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$15allocate_zeroed17h62d497141254e70dE>
    8001bd10:	ec2a                	sd	a0,24(sp)
    8001bd12:	f02e                	sd	a1,32(sp)
    8001bd14:	a009                	j	8001bd16 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h90782e32d4ec13edE+0x2e>
    8001bd16:	7582                	ld	a1,32(sp)
    8001bd18:	6562                	ld	a0,24(sp)
    8001bd1a:	ffff1097          	auipc	ra,0xffff1
    8001bd1e:	3d0080e7          	jalr	976(ra) # 8000d0ea <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h1c9f3c35158f4b17E>
    8001bd22:	e4aa                	sd	a0,72(sp)
    8001bd24:	e8ae                	sd	a1,80(sp)
    8001bd26:	a009                	j	8001bd28 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h90782e32d4ec13edE+0x40>
    8001bd28:	6526                	ld	a0,72(sp)
    8001bd2a:	00153593          	seqz	a1,a0
    8001bd2e:	4581                	li	a1,0
    8001bd30:	00b51463          	bne	a0,a1,8001bd38 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h90782e32d4ec13edE+0x50>
    8001bd34:	a009                	j	8001bd36 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h90782e32d4ec13edE+0x4e>
    8001bd36:	a831                	j	8001bd52 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h90782e32d4ec13edE+0x6a>
    8001bd38:	6526                	ld	a0,72(sp)
    8001bd3a:	65c6                	ld	a1,80(sp)
    8001bd3c:	f8aa                	sd	a0,112(sp)
    8001bd3e:	fcae                	sd	a1,120(sp)
    8001bd40:	ffff3097          	auipc	ra,0xffff3
    8001bd44:	5a8080e7          	jalr	1448(ra) # 8000f2e8 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h280b1a52f32358efE>
    8001bd48:	85aa                	mv	a1,a0
    8001bd4a:	e82e                	sd	a1,16(sp)
    8001bd4c:	e12a                	sd	a0,128(sp)
    8001bd4e:	a831                	j	8001bd6a <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h90782e32d4ec13edE+0x82>
    8001bd50:	0000                	unimp
    8001bd52:	ffff1097          	auipc	ra,0xffff1
    8001bd56:	d40080e7          	jalr	-704(ra) # 8000ca92 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h37d2ccc52635f8a7E>
    8001bd5a:	a009                	j	8001bd5c <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h90782e32d4ec13edE+0x74>
    8001bd5c:	ffff1097          	auipc	ra,0xffff1
    8001bd60:	29e080e7          	jalr	670(ra) # 8000cffa <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h2a54492b2826375dE>
    8001bd64:	e0aa                	sd	a0,64(sp)
    8001bd66:	a009                	j	8001bd68 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h90782e32d4ec13edE+0x80>
    }
    8001bd68:	a015                	j	8001bd8c <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h90782e32d4ec13edE+0xa4>
        unsafe { Ok(Box::from_raw_in(ptr.as_ptr(), alloc)) }
    8001bd6a:	6542                	ld	a0,16(sp)
    8001bd6c:	ffff3097          	auipc	ra,0xffff3
    8001bd70:	6c4080e7          	jalr	1732(ra) # 8000f430 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h593c20a0c1123d02E>
    8001bd74:	e42a                	sd	a0,8(sp)
    8001bd76:	a009                	j	8001bd78 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h90782e32d4ec13edE+0x90>
    8001bd78:	6522                	ld	a0,8(sp)
    8001bd7a:	00000097          	auipc	ra,0x0
    8001bd7e:	9f0080e7          	jalr	-1552(ra) # 8001b76a <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17h468e1ef7cafa8023E>
    8001bd82:	e02a                	sd	a0,0(sp)
    8001bd84:	a009                	j	8001bd86 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h90782e32d4ec13edE+0x9e>
    8001bd86:	6502                	ld	a0,0(sp)
    8001bd88:	e0aa                	sd	a0,64(sp)
    }
    8001bd8a:	a009                	j	8001bd8c <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h90782e32d4ec13edE+0xa4>
    8001bd8c:	6506                	ld	a0,64(sp)
    8001bd8e:	60aa                	ld	ra,136(sp)
    8001bd90:	6149                	addi	sp,sp,144
    8001bd92:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h9571c749e8c8e6e8E:

000000008001bd94 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h9571c749e8c8e6e8E>:
    pub fn try_new_zeroed_in(alloc: A) -> Result<Box<mem::MaybeUninit<T>, A>, AllocError> {
    8001bd94:	7175                	addi	sp,sp,-144
        let layout = Layout::new::<mem::MaybeUninit<T>>();
    8001bd96:	e506                	sd	ra,136(sp)
    8001bd98:	fffed097          	auipc	ra,0xfffed
    8001bd9c:	89a080e7          	jalr	-1894(ra) # 80008632 <_ZN4core5alloc6layout6Layout3new17hfb4102c77959cfa1E>
    8001bda0:	862a                	mv	a2,a0
    8001bda2:	f432                	sd	a2,40(sp)
    8001bda4:	862e                	mv	a2,a1
    8001bda6:	f832                	sd	a2,48(sp)
    8001bda8:	f0aa                	sd	a0,96(sp)
    8001bdaa:	f4ae                	sd	a1,104(sp)
    8001bdac:	a009                	j	8001bdae <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h9571c749e8c8e6e8E+0x1a>
        let ptr = alloc.allocate_zeroed(layout)?.cast();
    8001bdae:	7642                	ld	a2,48(sp)
    8001bdb0:	75a2                	ld	a1,40(sp)
    8001bdb2:	1828                	addi	a0,sp,56
    8001bdb4:	ffff0097          	auipc	ra,0xffff0
    8001bdb8:	46a080e7          	jalr	1130(ra) # 8000c21e <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$15allocate_zeroed17h62d497141254e70dE>
    8001bdbc:	ec2a                	sd	a0,24(sp)
    8001bdbe:	f02e                	sd	a1,32(sp)
    8001bdc0:	a009                	j	8001bdc2 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h9571c749e8c8e6e8E+0x2e>
    8001bdc2:	7582                	ld	a1,32(sp)
    8001bdc4:	6562                	ld	a0,24(sp)
    8001bdc6:	ffff1097          	auipc	ra,0xffff1
    8001bdca:	324080e7          	jalr	804(ra) # 8000d0ea <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h1c9f3c35158f4b17E>
    8001bdce:	e4aa                	sd	a0,72(sp)
    8001bdd0:	e8ae                	sd	a1,80(sp)
    8001bdd2:	a009                	j	8001bdd4 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h9571c749e8c8e6e8E+0x40>
    8001bdd4:	6526                	ld	a0,72(sp)
    8001bdd6:	00153593          	seqz	a1,a0
    8001bdda:	4581                	li	a1,0
    8001bddc:	00b51463          	bne	a0,a1,8001bde4 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h9571c749e8c8e6e8E+0x50>
    8001bde0:	a009                	j	8001bde2 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h9571c749e8c8e6e8E+0x4e>
    8001bde2:	a831                	j	8001bdfe <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h9571c749e8c8e6e8E+0x6a>
    8001bde4:	6526                	ld	a0,72(sp)
    8001bde6:	65c6                	ld	a1,80(sp)
    8001bde8:	f8aa                	sd	a0,112(sp)
    8001bdea:	fcae                	sd	a1,120(sp)
    8001bdec:	ffff3097          	auipc	ra,0xffff3
    8001bdf0:	550080e7          	jalr	1360(ra) # 8000f33c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h535f2787d46a2a35E>
    8001bdf4:	85aa                	mv	a1,a0
    8001bdf6:	e82e                	sd	a1,16(sp)
    8001bdf8:	e12a                	sd	a0,128(sp)
    8001bdfa:	a831                	j	8001be16 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h9571c749e8c8e6e8E+0x82>
    8001bdfc:	0000                	unimp
    8001bdfe:	ffff1097          	auipc	ra,0xffff1
    8001be02:	c94080e7          	jalr	-876(ra) # 8000ca92 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h37d2ccc52635f8a7E>
    8001be06:	a009                	j	8001be08 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h9571c749e8c8e6e8E+0x74>
    8001be08:	ffff1097          	auipc	ra,0xffff1
    8001be0c:	2b8080e7          	jalr	696(ra) # 8000d0c0 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17hfad957fd5ededc3fE>
    8001be10:	e0aa                	sd	a0,64(sp)
    8001be12:	a009                	j	8001be14 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h9571c749e8c8e6e8E+0x80>
    }
    8001be14:	a015                	j	8001be38 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h9571c749e8c8e6e8E+0xa4>
        unsafe { Ok(Box::from_raw_in(ptr.as_ptr(), alloc)) }
    8001be16:	6542                	ld	a0,16(sp)
    8001be18:	ffff3097          	auipc	ra,0xffff3
    8001be1c:	662080e7          	jalr	1634(ra) # 8000f47a <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17hd337d3c0c1677ef4E>
    8001be20:	e42a                	sd	a0,8(sp)
    8001be22:	a009                	j	8001be24 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h9571c749e8c8e6e8E+0x90>
    8001be24:	6522                	ld	a0,8(sp)
    8001be26:	00000097          	auipc	ra,0x0
    8001be2a:	960080e7          	jalr	-1696(ra) # 8001b786 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17h49971518b172ecd3E>
    8001be2e:	e02a                	sd	a0,0(sp)
    8001be30:	a009                	j	8001be32 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h9571c749e8c8e6e8E+0x9e>
    8001be32:	6502                	ld	a0,0(sp)
    8001be34:	e0aa                	sd	a0,64(sp)
    }
    8001be36:	a009                	j	8001be38 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17h9571c749e8c8e6e8E+0xa4>
    8001be38:	6506                	ld	a0,64(sp)
    8001be3a:	60aa                	ld	ra,136(sp)
    8001be3c:	6149                	addi	sp,sp,144
    8001be3e:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17hea8ededefef3bf78E:

000000008001be40 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17hea8ededefef3bf78E>:
    pub fn try_new_zeroed_in(alloc: A) -> Result<Box<mem::MaybeUninit<T>, A>, AllocError> {
    8001be40:	7175                	addi	sp,sp,-144
        let layout = Layout::new::<mem::MaybeUninit<T>>();
    8001be42:	e506                	sd	ra,136(sp)
    8001be44:	fffec097          	auipc	ra,0xfffec
    8001be48:	6f4080e7          	jalr	1780(ra) # 80008538 <_ZN4core5alloc6layout6Layout3new17h00440f750a953d15E>
    8001be4c:	862a                	mv	a2,a0
    8001be4e:	f432                	sd	a2,40(sp)
    8001be50:	862e                	mv	a2,a1
    8001be52:	f832                	sd	a2,48(sp)
    8001be54:	f0aa                	sd	a0,96(sp)
    8001be56:	f4ae                	sd	a1,104(sp)
    8001be58:	a009                	j	8001be5a <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17hea8ededefef3bf78E+0x1a>
        let ptr = alloc.allocate_zeroed(layout)?.cast();
    8001be5a:	7642                	ld	a2,48(sp)
    8001be5c:	75a2                	ld	a1,40(sp)
    8001be5e:	1828                	addi	a0,sp,56
    8001be60:	ffff0097          	auipc	ra,0xffff0
    8001be64:	3be080e7          	jalr	958(ra) # 8000c21e <_ZN63_$LT$alloc..alloc..Global$u20$as$u20$core..alloc..Allocator$GT$15allocate_zeroed17h62d497141254e70dE>
    8001be68:	ec2a                	sd	a0,24(sp)
    8001be6a:	f02e                	sd	a1,32(sp)
    8001be6c:	a009                	j	8001be6e <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17hea8ededefef3bf78E+0x2e>
    8001be6e:	7582                	ld	a1,32(sp)
    8001be70:	6562                	ld	a0,24(sp)
    8001be72:	ffff1097          	auipc	ra,0xffff1
    8001be76:	278080e7          	jalr	632(ra) # 8000d0ea <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h1c9f3c35158f4b17E>
    8001be7a:	e4aa                	sd	a0,72(sp)
    8001be7c:	e8ae                	sd	a1,80(sp)
    8001be7e:	a009                	j	8001be80 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17hea8ededefef3bf78E+0x40>
    8001be80:	6526                	ld	a0,72(sp)
    8001be82:	00153593          	seqz	a1,a0
    8001be86:	4581                	li	a1,0
    8001be88:	00b51463          	bne	a0,a1,8001be90 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17hea8ededefef3bf78E+0x50>
    8001be8c:	a009                	j	8001be8e <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17hea8ededefef3bf78E+0x4e>
    8001be8e:	a831                	j	8001beaa <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17hea8ededefef3bf78E+0x6a>
    8001be90:	6526                	ld	a0,72(sp)
    8001be92:	65c6                	ld	a1,80(sp)
    8001be94:	f8aa                	sd	a0,112(sp)
    8001be96:	fcae                	sd	a1,120(sp)
    8001be98:	ffff3097          	auipc	ra,0xffff3
    8001be9c:	47a080e7          	jalr	1146(ra) # 8000f312 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$4cast17h4354690cb24a4e56E>
    8001bea0:	85aa                	mv	a1,a0
    8001bea2:	e82e                	sd	a1,16(sp)
    8001bea4:	e12a                	sd	a0,128(sp)
    8001bea6:	a831                	j	8001bec2 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17hea8ededefef3bf78E+0x82>
    8001bea8:	0000                	unimp
    8001beaa:	ffff1097          	auipc	ra,0xffff1
    8001beae:	be8080e7          	jalr	-1048(ra) # 8000ca92 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h37d2ccc52635f8a7E>
    8001beb2:	a009                	j	8001beb4 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17hea8ededefef3bf78E+0x74>
    8001beb4:	ffff1097          	auipc	ra,0xffff1
    8001beb8:	1f8080e7          	jalr	504(ra) # 8000d0ac <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17hc42702708db6cea4E>
    8001bebc:	e0aa                	sd	a0,64(sp)
    8001bebe:	a009                	j	8001bec0 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17hea8ededefef3bf78E+0x80>
    }
    8001bec0:	a015                	j	8001bee4 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17hea8ededefef3bf78E+0xa4>
        unsafe { Ok(Box::from_raw_in(ptr.as_ptr(), alloc)) }
    8001bec2:	6542                	ld	a0,16(sp)
    8001bec4:	ffff3097          	auipc	ra,0xffff3
    8001bec8:	5a6080e7          	jalr	1446(ra) # 8000f46a <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haf282fdd0407a8a4E>
    8001becc:	e42a                	sd	a0,8(sp)
    8001bece:	a009                	j	8001bed0 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17hea8ededefef3bf78E+0x90>
    8001bed0:	6522                	ld	a0,8(sp)
    8001bed2:	00000097          	auipc	ra,0x0
    8001bed6:	8ec080e7          	jalr	-1812(ra) # 8001b7be <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17h91226147761dfc23E>
    8001beda:	e02a                	sd	a0,0(sp)
    8001bedc:	a009                	j	8001bede <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17hea8ededefef3bf78E+0x9e>
    8001bede:	6502                	ld	a0,0(sp)
    8001bee0:	e0aa                	sd	a0,64(sp)
    }
    8001bee2:	a009                	j	8001bee4 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$17try_new_zeroed_in17hea8ededefef3bf78E+0xa4>
    8001bee4:	6506                	ld	a0,64(sp)
    8001bee6:	60aa                	ld	ra,136(sp)
    8001bee8:	6149                	addi	sp,sp,144
    8001beea:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h01d9da470f10fcdcE:

000000008001beec <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h01d9da470f10fcdcE>:
    pub fn into_raw_with_allocator(b: Self) -> (*mut T, A) {
    8001beec:	7139                	addi	sp,sp,-64
    8001beee:	fc06                	sd	ra,56(sp)
    8001bef0:	f02a                	sd	a0,32(sp)
        let (leaked, alloc) = Box::into_unique(b);
    8001bef2:	00000097          	auipc	ra,0x0
    8001bef6:	9c8080e7          	jalr	-1592(ra) # 8001b8ba <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17h80646c1775168f03E>
    8001befa:	e82a                	sd	a0,16(sp)
    8001befc:	a009                	j	8001befe <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h01d9da470f10fcdcE+0x12>
    8001befe:	6542                	ld	a0,16(sp)
    8001bf00:	f82a                	sd	a0,48(sp)
        (leaked.as_ptr(), alloc)
    8001bf02:	ffff0097          	auipc	ra,0xffff0
    8001bf06:	c4c080e7          	jalr	-948(ra) # 8000bb4e <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h9702a6a3d13a07b5E>
    8001bf0a:	e42a                	sd	a0,8(sp)
    8001bf0c:	a009                	j	8001bf0e <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h01d9da470f10fcdcE+0x22>
    8001bf0e:	6522                	ld	a0,8(sp)
    8001bf10:	ec2a                	sd	a0,24(sp)
    }
    8001bf12:	70e2                	ld	ra,56(sp)
    8001bf14:	6121                	addi	sp,sp,64
    8001bf16:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h255317eb94c396a6E:

000000008001bf18 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h255317eb94c396a6E>:
    pub fn into_raw_with_allocator(b: Self) -> (*mut T, A) {
    8001bf18:	7139                	addi	sp,sp,-64
    8001bf1a:	fc06                	sd	ra,56(sp)
    8001bf1c:	f02a                	sd	a0,32(sp)
        let (leaked, alloc) = Box::into_unique(b);
    8001bf1e:	00000097          	auipc	ra,0x0
    8001bf22:	a7c080e7          	jalr	-1412(ra) # 8001b99a <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17hd08884b913096851E>
    8001bf26:	e82a                	sd	a0,16(sp)
    8001bf28:	a009                	j	8001bf2a <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h255317eb94c396a6E+0x12>
    8001bf2a:	6542                	ld	a0,16(sp)
    8001bf2c:	f82a                	sd	a0,48(sp)
        (leaked.as_ptr(), alloc)
    8001bf2e:	ffff0097          	auipc	ra,0xffff0
    8001bf32:	c40080e7          	jalr	-960(ra) # 8000bb6e <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17hb57b3bcaa3bdd3f9E>
    8001bf36:	e42a                	sd	a0,8(sp)
    8001bf38:	a009                	j	8001bf3a <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h255317eb94c396a6E+0x22>
    8001bf3a:	6522                	ld	a0,8(sp)
    8001bf3c:	ec2a                	sd	a0,24(sp)
    }
    8001bf3e:	70e2                	ld	ra,56(sp)
    8001bf40:	6121                	addi	sp,sp,64
    8001bf42:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h3a774aee57a2b865E:

000000008001bf44 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h3a774aee57a2b865E>:
    pub fn into_raw_with_allocator(b: Self) -> (*mut T, A) {
    8001bf44:	7139                	addi	sp,sp,-64
    8001bf46:	fc06                	sd	ra,56(sp)
    8001bf48:	f02a                	sd	a0,32(sp)
        let (leaked, alloc) = Box::into_unique(b);
    8001bf4a:	00000097          	auipc	ra,0x0
    8001bf4e:	900080e7          	jalr	-1792(ra) # 8001b84a <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17h48e22d69c2444c2aE>
    8001bf52:	e82a                	sd	a0,16(sp)
    8001bf54:	a009                	j	8001bf56 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h3a774aee57a2b865E+0x12>
    8001bf56:	6542                	ld	a0,16(sp)
    8001bf58:	f82a                	sd	a0,48(sp)
        (leaked.as_ptr(), alloc)
    8001bf5a:	ffff0097          	auipc	ra,0xffff0
    8001bf5e:	bd4080e7          	jalr	-1068(ra) # 8000bb2e <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h3d727d33388c5225E>
    8001bf62:	e42a                	sd	a0,8(sp)
    8001bf64:	a009                	j	8001bf66 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h3a774aee57a2b865E+0x22>
    8001bf66:	6522                	ld	a0,8(sp)
    8001bf68:	ec2a                	sd	a0,24(sp)
    }
    8001bf6a:	70e2                	ld	ra,56(sp)
    8001bf6c:	6121                	addi	sp,sp,64
    8001bf6e:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h3e9247aef62521b2E:

000000008001bf70 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h3e9247aef62521b2E>:
    pub fn into_raw_with_allocator(b: Self) -> (*mut T, A) {
    8001bf70:	7139                	addi	sp,sp,-64
    8001bf72:	fc06                	sd	ra,56(sp)
    8001bf74:	f02a                	sd	a0,32(sp)
        let (leaked, alloc) = Box::into_unique(b);
    8001bf76:	00000097          	auipc	ra,0x0
    8001bf7a:	9b4080e7          	jalr	-1612(ra) # 8001b92a <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17h9813befe69e55ae1E>
    8001bf7e:	e82a                	sd	a0,16(sp)
    8001bf80:	a009                	j	8001bf82 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h3e9247aef62521b2E+0x12>
    8001bf82:	6542                	ld	a0,16(sp)
    8001bf84:	f82a                	sd	a0,48(sp)
        (leaked.as_ptr(), alloc)
    8001bf86:	ffff0097          	auipc	ra,0xffff0
    8001bf8a:	bf8080e7          	jalr	-1032(ra) # 8000bb7e <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17hd1144efb36e37b5fE>
    8001bf8e:	e42a                	sd	a0,8(sp)
    8001bf90:	a009                	j	8001bf92 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h3e9247aef62521b2E+0x22>
    8001bf92:	6522                	ld	a0,8(sp)
    8001bf94:	ec2a                	sd	a0,24(sp)
    }
    8001bf96:	70e2                	ld	ra,56(sp)
    8001bf98:	6121                	addi	sp,sp,64
    8001bf9a:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h3eebe938f1ba1056E:

000000008001bf9c <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h3eebe938f1ba1056E>:
    pub fn into_raw_with_allocator(b: Self) -> (*mut T, A) {
    8001bf9c:	7139                	addi	sp,sp,-64
    8001bf9e:	fc06                	sd	ra,56(sp)
    8001bfa0:	f02a                	sd	a0,32(sp)
        let (leaked, alloc) = Box::into_unique(b);
    8001bfa2:	00000097          	auipc	ra,0x0
    8001bfa6:	9c0080e7          	jalr	-1600(ra) # 8001b962 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17hb4dd27b4659222a3E>
    8001bfaa:	e82a                	sd	a0,16(sp)
    8001bfac:	a009                	j	8001bfae <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h3eebe938f1ba1056E+0x12>
    8001bfae:	6542                	ld	a0,16(sp)
    8001bfb0:	f82a                	sd	a0,48(sp)
        (leaked.as_ptr(), alloc)
    8001bfb2:	ffff0097          	auipc	ra,0xffff0
    8001bfb6:	bb4080e7          	jalr	-1100(ra) # 8000bb66 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17hb43ff2a43bd415faE>
    8001bfba:	e42a                	sd	a0,8(sp)
    8001bfbc:	a009                	j	8001bfbe <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h3eebe938f1ba1056E+0x22>
    8001bfbe:	6522                	ld	a0,8(sp)
    8001bfc0:	ec2a                	sd	a0,24(sp)
    }
    8001bfc2:	70e2                	ld	ra,56(sp)
    8001bfc4:	6121                	addi	sp,sp,64
    8001bfc6:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h56417e202ce6f498E:

000000008001bfc8 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h56417e202ce6f498E>:
    pub fn into_raw_with_allocator(b: Self) -> (*mut T, A) {
    8001bfc8:	7139                	addi	sp,sp,-64
    8001bfca:	fc06                	sd	ra,56(sp)
    8001bfcc:	f02a                	sd	a0,32(sp)
        let (leaked, alloc) = Box::into_unique(b);
    8001bfce:	00000097          	auipc	ra,0x0
    8001bfd2:	a04080e7          	jalr	-1532(ra) # 8001b9d2 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17hd4115af6111f1ecaE>
    8001bfd6:	e82a                	sd	a0,16(sp)
    8001bfd8:	a009                	j	8001bfda <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h56417e202ce6f498E+0x12>
    8001bfda:	6542                	ld	a0,16(sp)
    8001bfdc:	f82a                	sd	a0,48(sp)
        (leaked.as_ptr(), alloc)
    8001bfde:	ffff0097          	auipc	ra,0xffff0
    8001bfe2:	ba8080e7          	jalr	-1112(ra) # 8000bb86 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17hf99ed61581dd6ee2E>
    8001bfe6:	e42a                	sd	a0,8(sp)
    8001bfe8:	a009                	j	8001bfea <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h56417e202ce6f498E+0x22>
    8001bfea:	6522                	ld	a0,8(sp)
    8001bfec:	ec2a                	sd	a0,24(sp)
    }
    8001bfee:	70e2                	ld	ra,56(sp)
    8001bff0:	6121                	addi	sp,sp,64
    8001bff2:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h8cff8d68311da958E:

000000008001bff4 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h8cff8d68311da958E>:
    pub fn into_raw_with_allocator(b: Self) -> (*mut T, A) {
    8001bff4:	7139                	addi	sp,sp,-64
    8001bff6:	fc06                	sd	ra,56(sp)
    8001bff8:	f02a                	sd	a0,32(sp)
        let (leaked, alloc) = Box::into_unique(b);
    8001bffa:	00000097          	auipc	ra,0x0
    8001bffe:	888080e7          	jalr	-1912(ra) # 8001b882 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17h77bf5089d70199a1E>
    8001c002:	e82a                	sd	a0,16(sp)
    8001c004:	a009                	j	8001c006 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h8cff8d68311da958E+0x12>
    8001c006:	6542                	ld	a0,16(sp)
    8001c008:	f82a                	sd	a0,48(sp)
        (leaked.as_ptr(), alloc)
    8001c00a:	ffff0097          	auipc	ra,0xffff0
    8001c00e:	b2c080e7          	jalr	-1236(ra) # 8000bb36 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h43259d2d16140eb2E>
    8001c012:	e42a                	sd	a0,8(sp)
    8001c014:	a009                	j	8001c016 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h8cff8d68311da958E+0x22>
    8001c016:	6522                	ld	a0,8(sp)
    8001c018:	ec2a                	sd	a0,24(sp)
    }
    8001c01a:	70e2                	ld	ra,56(sp)
    8001c01c:	6121                	addi	sp,sp,64
    8001c01e:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17he0e1487eb5c18a3bE:

000000008001c020 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17he0e1487eb5c18a3bE>:
    pub fn into_raw_with_allocator(b: Self) -> (*mut T, A) {
    8001c020:	7139                	addi	sp,sp,-64
    8001c022:	fc06                	sd	ra,56(sp)
    8001c024:	f02a                	sd	a0,32(sp)
        let (leaked, alloc) = Box::into_unique(b);
    8001c026:	00000097          	auipc	ra,0x0
    8001c02a:	8cc080e7          	jalr	-1844(ra) # 8001b8f2 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11into_unique17h93f491d0366dd1a9E>
    8001c02e:	e82a                	sd	a0,16(sp)
    8001c030:	a009                	j	8001c032 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17he0e1487eb5c18a3bE+0x12>
    8001c032:	6542                	ld	a0,16(sp)
    8001c034:	f82a                	sd	a0,48(sp)
        (leaked.as_ptr(), alloc)
    8001c036:	ffff0097          	auipc	ra,0xffff0
    8001c03a:	b10080e7          	jalr	-1264(ra) # 8000bb46 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h7e93959e8a601ed4E>
    8001c03e:	e42a                	sd	a0,8(sp)
    8001c040:	a009                	j	8001c042 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17he0e1487eb5c18a3bE+0x22>
    8001c042:	6522                	ld	a0,8(sp)
    8001c044:	ec2a                	sd	a0,24(sp)
    }
    8001c046:	70e2                	ld	ra,56(sp)
    8001c048:	6121                	addi	sp,sp,64
    8001c04a:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h3b2c40161bf6c180E:

000000008001c04c <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h3b2c40161bf6c180E>:
    /// static_ref[0] = 4;
    /// assert_eq!(*static_ref, [4, 2, 3]);
    /// ```
    #[stable(feature = "box_leak", since = "1.26.0")]
    #[inline]
    pub fn leak<'a>(b: Self) -> &'a mut T
    8001c04c:	7139                	addi	sp,sp,-64
    8001c04e:	fc06                	sd	ra,56(sp)
    8001c050:	ec2a                	sd	a0,24(sp)
    8001c052:	f42a                	sd	a0,40(sp)
        ManuallyDrop { value }
    8001c054:	f02a                	sd	a0,32(sp)
    where
        A: 'a,
    {
        unsafe { &mut *mem::ManuallyDrop::new(b).0.as_ptr() }
    8001c056:	e82a                	sd	a0,16(sp)
    8001c058:	a009                	j	8001c05a <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h3b2c40161bf6c180E+0xe>
    8001c05a:	0808                	addi	a0,sp,16
    8001c05c:	e42a                	sd	a0,8(sp)
    8001c05e:	f82a                	sd	a0,48(sp)
    8001c060:	a009                	j	8001c062 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h3b2c40161bf6c180E+0x16>
    8001c062:	6522                	ld	a0,8(sp)
    8001c064:	6108                	ld	a0,0(a0)
    8001c066:	ffff0097          	auipc	ra,0xffff0
    8001c06a:	ae0080e7          	jalr	-1312(ra) # 8000bb46 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h7e93959e8a601ed4E>
    8001c06e:	e02a                	sd	a0,0(sp)
    8001c070:	a009                	j	8001c072 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h3b2c40161bf6c180E+0x26>
    }
    8001c072:	6502                	ld	a0,0(sp)
    8001c074:	70e2                	ld	ra,56(sp)
    8001c076:	6121                	addi	sp,sp,64
    8001c078:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h4b4e76265837c5ceE:

000000008001c07a <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h4b4e76265837c5ceE>:
    pub fn leak<'a>(b: Self) -> &'a mut T
    8001c07a:	7139                	addi	sp,sp,-64
    8001c07c:	fc06                	sd	ra,56(sp)
    8001c07e:	ec2a                	sd	a0,24(sp)
    8001c080:	f42a                	sd	a0,40(sp)
    8001c082:	f02a                	sd	a0,32(sp)
        unsafe { &mut *mem::ManuallyDrop::new(b).0.as_ptr() }
    8001c084:	e82a                	sd	a0,16(sp)
    8001c086:	a009                	j	8001c088 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h4b4e76265837c5ceE+0xe>
    8001c088:	0808                	addi	a0,sp,16
    8001c08a:	e42a                	sd	a0,8(sp)
    8001c08c:	f82a                	sd	a0,48(sp)
    8001c08e:	a009                	j	8001c090 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h4b4e76265837c5ceE+0x16>
    8001c090:	6522                	ld	a0,8(sp)
    8001c092:	6108                	ld	a0,0(a0)
    8001c094:	ffff0097          	auipc	ra,0xffff0
    8001c098:	aea080e7          	jalr	-1302(ra) # 8000bb7e <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17hd1144efb36e37b5fE>
    8001c09c:	e02a                	sd	a0,0(sp)
    8001c09e:	a009                	j	8001c0a0 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h4b4e76265837c5ceE+0x26>
    }
    8001c0a0:	6502                	ld	a0,0(sp)
    8001c0a2:	70e2                	ld	ra,56(sp)
    8001c0a4:	6121                	addi	sp,sp,64
    8001c0a6:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h77f658a9b95a64a2E:

000000008001c0a8 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h77f658a9b95a64a2E>:
    pub fn leak<'a>(b: Self) -> &'a mut T
    8001c0a8:	7139                	addi	sp,sp,-64
    8001c0aa:	fc06                	sd	ra,56(sp)
    8001c0ac:	ec2a                	sd	a0,24(sp)
    8001c0ae:	f42a                	sd	a0,40(sp)
    8001c0b0:	f02a                	sd	a0,32(sp)
        unsafe { &mut *mem::ManuallyDrop::new(b).0.as_ptr() }
    8001c0b2:	e82a                	sd	a0,16(sp)
    8001c0b4:	a009                	j	8001c0b6 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h77f658a9b95a64a2E+0xe>
    8001c0b6:	0808                	addi	a0,sp,16
    8001c0b8:	e42a                	sd	a0,8(sp)
    8001c0ba:	f82a                	sd	a0,48(sp)
    8001c0bc:	a009                	j	8001c0be <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h77f658a9b95a64a2E+0x16>
    8001c0be:	6522                	ld	a0,8(sp)
    8001c0c0:	6108                	ld	a0,0(a0)
    8001c0c2:	ffff0097          	auipc	ra,0xffff0
    8001c0c6:	a6c080e7          	jalr	-1428(ra) # 8000bb2e <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h3d727d33388c5225E>
    8001c0ca:	e02a                	sd	a0,0(sp)
    8001c0cc:	a009                	j	8001c0ce <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h77f658a9b95a64a2E+0x26>
    }
    8001c0ce:	6502                	ld	a0,0(sp)
    8001c0d0:	70e2                	ld	ra,56(sp)
    8001c0d2:	6121                	addi	sp,sp,64
    8001c0d4:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h925dcada2cd56bb2E:

000000008001c0d6 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h925dcada2cd56bb2E>:
    pub fn leak<'a>(b: Self) -> &'a mut T
    8001c0d6:	7139                	addi	sp,sp,-64
    8001c0d8:	fc06                	sd	ra,56(sp)
    8001c0da:	ec2a                	sd	a0,24(sp)
    8001c0dc:	f42a                	sd	a0,40(sp)
    8001c0de:	f02a                	sd	a0,32(sp)
        unsafe { &mut *mem::ManuallyDrop::new(b).0.as_ptr() }
    8001c0e0:	e82a                	sd	a0,16(sp)
    8001c0e2:	a009                	j	8001c0e4 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h925dcada2cd56bb2E+0xe>
    8001c0e4:	0808                	addi	a0,sp,16
    8001c0e6:	e42a                	sd	a0,8(sp)
    8001c0e8:	f82a                	sd	a0,48(sp)
    8001c0ea:	a009                	j	8001c0ec <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h925dcada2cd56bb2E+0x16>
    8001c0ec:	6522                	ld	a0,8(sp)
    8001c0ee:	6108                	ld	a0,0(a0)
    8001c0f0:	ffff0097          	auipc	ra,0xffff0
    8001c0f4:	a7e080e7          	jalr	-1410(ra) # 8000bb6e <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17hb57b3bcaa3bdd3f9E>
    8001c0f8:	e02a                	sd	a0,0(sp)
    8001c0fa:	a009                	j	8001c0fc <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h925dcada2cd56bb2E+0x26>
    }
    8001c0fc:	6502                	ld	a0,0(sp)
    8001c0fe:	70e2                	ld	ra,56(sp)
    8001c100:	6121                	addi	sp,sp,64
    8001c102:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h94cb03dd08e899b7E:

000000008001c104 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h94cb03dd08e899b7E>:
    pub fn leak<'a>(b: Self) -> &'a mut T
    8001c104:	7139                	addi	sp,sp,-64
    8001c106:	fc06                	sd	ra,56(sp)
    8001c108:	ec2a                	sd	a0,24(sp)
    8001c10a:	f42a                	sd	a0,40(sp)
    8001c10c:	f02a                	sd	a0,32(sp)
        unsafe { &mut *mem::ManuallyDrop::new(b).0.as_ptr() }
    8001c10e:	e82a                	sd	a0,16(sp)
    8001c110:	a009                	j	8001c112 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h94cb03dd08e899b7E+0xe>
    8001c112:	0808                	addi	a0,sp,16
    8001c114:	e42a                	sd	a0,8(sp)
    8001c116:	f82a                	sd	a0,48(sp)
    8001c118:	a009                	j	8001c11a <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h94cb03dd08e899b7E+0x16>
    8001c11a:	6522                	ld	a0,8(sp)
    8001c11c:	6108                	ld	a0,0(a0)
    8001c11e:	ffff0097          	auipc	ra,0xffff0
    8001c122:	a30080e7          	jalr	-1488(ra) # 8000bb4e <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h9702a6a3d13a07b5E>
    8001c126:	e02a                	sd	a0,0(sp)
    8001c128:	a009                	j	8001c12a <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17h94cb03dd08e899b7E+0x26>
    }
    8001c12a:	6502                	ld	a0,0(sp)
    8001c12c:	70e2                	ld	ra,56(sp)
    8001c12e:	6121                	addi	sp,sp,64
    8001c130:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17ha0a7030531762e6fE:

000000008001c132 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17ha0a7030531762e6fE>:
    pub fn leak<'a>(b: Self) -> &'a mut T
    8001c132:	7139                	addi	sp,sp,-64
    8001c134:	fc06                	sd	ra,56(sp)
    8001c136:	ec2a                	sd	a0,24(sp)
    8001c138:	f42a                	sd	a0,40(sp)
    8001c13a:	f02a                	sd	a0,32(sp)
        unsafe { &mut *mem::ManuallyDrop::new(b).0.as_ptr() }
    8001c13c:	e82a                	sd	a0,16(sp)
    8001c13e:	a009                	j	8001c140 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17ha0a7030531762e6fE+0xe>
    8001c140:	0808                	addi	a0,sp,16
    8001c142:	e42a                	sd	a0,8(sp)
    8001c144:	f82a                	sd	a0,48(sp)
    8001c146:	a009                	j	8001c148 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17ha0a7030531762e6fE+0x16>
    8001c148:	6522                	ld	a0,8(sp)
    8001c14a:	6108                	ld	a0,0(a0)
    8001c14c:	ffff0097          	auipc	ra,0xffff0
    8001c150:	9f2080e7          	jalr	-1550(ra) # 8000bb3e <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h54727a4650ef71dfE>
    8001c154:	e02a                	sd	a0,0(sp)
    8001c156:	a009                	j	8001c158 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17ha0a7030531762e6fE+0x26>
    }
    8001c158:	6502                	ld	a0,0(sp)
    8001c15a:	70e2                	ld	ra,56(sp)
    8001c15c:	6121                	addi	sp,sp,64
    8001c15e:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17hb50450963f97575cE:

000000008001c160 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17hb50450963f97575cE>:
    pub fn leak<'a>(b: Self) -> &'a mut T
    8001c160:	7139                	addi	sp,sp,-64
    8001c162:	fc06                	sd	ra,56(sp)
    8001c164:	ec2a                	sd	a0,24(sp)
    8001c166:	f42a                	sd	a0,40(sp)
    8001c168:	f02a                	sd	a0,32(sp)
        unsafe { &mut *mem::ManuallyDrop::new(b).0.as_ptr() }
    8001c16a:	e82a                	sd	a0,16(sp)
    8001c16c:	a009                	j	8001c16e <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17hb50450963f97575cE+0xe>
    8001c16e:	0808                	addi	a0,sp,16
    8001c170:	e42a                	sd	a0,8(sp)
    8001c172:	f82a                	sd	a0,48(sp)
    8001c174:	a009                	j	8001c176 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17hb50450963f97575cE+0x16>
    8001c176:	6522                	ld	a0,8(sp)
    8001c178:	6108                	ld	a0,0(a0)
    8001c17a:	ffff0097          	auipc	ra,0xffff0
    8001c17e:	a0c080e7          	jalr	-1524(ra) # 8000bb86 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17hf99ed61581dd6ee2E>
    8001c182:	e02a                	sd	a0,0(sp)
    8001c184:	a009                	j	8001c186 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17hb50450963f97575cE+0x26>
    }
    8001c186:	6502                	ld	a0,0(sp)
    8001c188:	70e2                	ld	ra,56(sp)
    8001c18a:	6121                	addi	sp,sp,64
    8001c18c:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17hcf7bcb368f276750E:

000000008001c18e <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17hcf7bcb368f276750E>:
    pub fn leak<'a>(b: Self) -> &'a mut T
    8001c18e:	7139                	addi	sp,sp,-64
    8001c190:	fc06                	sd	ra,56(sp)
    8001c192:	ec2a                	sd	a0,24(sp)
    8001c194:	f42a                	sd	a0,40(sp)
    8001c196:	f02a                	sd	a0,32(sp)
        unsafe { &mut *mem::ManuallyDrop::new(b).0.as_ptr() }
    8001c198:	e82a                	sd	a0,16(sp)
    8001c19a:	a009                	j	8001c19c <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17hcf7bcb368f276750E+0xe>
    8001c19c:	0808                	addi	a0,sp,16
    8001c19e:	e42a                	sd	a0,8(sp)
    8001c1a0:	f82a                	sd	a0,48(sp)
    8001c1a2:	a009                	j	8001c1a4 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17hcf7bcb368f276750E+0x16>
    8001c1a4:	6522                	ld	a0,8(sp)
    8001c1a6:	6108                	ld	a0,0(a0)
    8001c1a8:	ffff0097          	auipc	ra,0xffff0
    8001c1ac:	9be080e7          	jalr	-1602(ra) # 8000bb66 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17hb43ff2a43bd415faE>
    8001c1b0:	e02a                	sd	a0,0(sp)
    8001c1b2:	a009                	j	8001c1b4 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17hcf7bcb368f276750E+0x26>
    }
    8001c1b4:	6502                	ld	a0,0(sp)
    8001c1b6:	70e2                	ld	ra,56(sp)
    8001c1b8:	6121                	addi	sp,sp,64
    8001c1ba:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17he4f1cfe07554e5a5E:

000000008001c1bc <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17he4f1cfe07554e5a5E>:
    pub fn leak<'a>(b: Self) -> &'a mut T
    8001c1bc:	7139                	addi	sp,sp,-64
    8001c1be:	fc06                	sd	ra,56(sp)
    8001c1c0:	ec2a                	sd	a0,24(sp)
    8001c1c2:	f42a                	sd	a0,40(sp)
    8001c1c4:	f02a                	sd	a0,32(sp)
        unsafe { &mut *mem::ManuallyDrop::new(b).0.as_ptr() }
    8001c1c6:	e82a                	sd	a0,16(sp)
    8001c1c8:	a009                	j	8001c1ca <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17he4f1cfe07554e5a5E+0xe>
    8001c1ca:	0808                	addi	a0,sp,16
    8001c1cc:	e42a                	sd	a0,8(sp)
    8001c1ce:	f82a                	sd	a0,48(sp)
    8001c1d0:	a009                	j	8001c1d2 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17he4f1cfe07554e5a5E+0x16>
    8001c1d2:	6522                	ld	a0,8(sp)
    8001c1d4:	6108                	ld	a0,0(a0)
    8001c1d6:	ffff0097          	auipc	ra,0xffff0
    8001c1da:	960080e7          	jalr	-1696(ra) # 8000bb36 <_ZN4core3ptr6unique15Unique$LT$T$GT$6as_ptr17h43259d2d16140eb2E>
    8001c1de:	e02a                	sd	a0,0(sp)
    8001c1e0:	a009                	j	8001c1e2 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$4leak17he4f1cfe07554e5a5E+0x26>
    }
    8001c1e2:	6502                	ld	a0,0(sp)
    8001c1e4:	70e2                	ld	ra,56(sp)
    8001c1e6:	6121                	addi	sp,sp,64
    8001c1e8:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$8into_raw17h11a22cb7d9ea1552E:

000000008001c1ea <_ZN5alloc5boxed16Box$LT$T$C$A$GT$8into_raw17h11a22cb7d9ea1552E>:
    pub fn into_raw(b: Self) -> *mut T {
    8001c1ea:	1101                	addi	sp,sp,-32
    8001c1ec:	ec06                	sd	ra,24(sp)
    8001c1ee:	e82a                	sd	a0,16(sp)
        Self::into_raw_with_allocator(b).0
    8001c1f0:	00000097          	auipc	ra,0x0
    8001c1f4:	dac080e7          	jalr	-596(ra) # 8001bf9c <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h3eebe938f1ba1056E>
    8001c1f8:	e42a                	sd	a0,8(sp)
    8001c1fa:	a009                	j	8001c1fc <_ZN5alloc5boxed16Box$LT$T$C$A$GT$8into_raw17h11a22cb7d9ea1552E+0x12>
    8001c1fc:	6522                	ld	a0,8(sp)
    }
    8001c1fe:	e02a                	sd	a0,0(sp)
    8001c200:	a009                	j	8001c202 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$8into_raw17h11a22cb7d9ea1552E+0x18>
    8001c202:	6502                	ld	a0,0(sp)
    8001c204:	60e2                	ld	ra,24(sp)
    8001c206:	6105                	addi	sp,sp,32
    8001c208:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$8into_raw17h4b72114c3b8b546bE:

000000008001c20a <_ZN5alloc5boxed16Box$LT$T$C$A$GT$8into_raw17h4b72114c3b8b546bE>:
    pub fn into_raw(b: Self) -> *mut T {
    8001c20a:	1101                	addi	sp,sp,-32
    8001c20c:	ec06                	sd	ra,24(sp)
    8001c20e:	e82a                	sd	a0,16(sp)
        Self::into_raw_with_allocator(b).0
    8001c210:	00000097          	auipc	ra,0x0
    8001c214:	d60080e7          	jalr	-672(ra) # 8001bf70 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h3e9247aef62521b2E>
    8001c218:	e42a                	sd	a0,8(sp)
    8001c21a:	a009                	j	8001c21c <_ZN5alloc5boxed16Box$LT$T$C$A$GT$8into_raw17h4b72114c3b8b546bE+0x12>
    8001c21c:	6522                	ld	a0,8(sp)
    }
    8001c21e:	e02a                	sd	a0,0(sp)
    8001c220:	a009                	j	8001c222 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$8into_raw17h4b72114c3b8b546bE+0x18>
    8001c222:	6502                	ld	a0,0(sp)
    8001c224:	60e2                	ld	ra,24(sp)
    8001c226:	6105                	addi	sp,sp,32
    8001c228:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed16Box$LT$T$C$A$GT$8into_raw17hcc7ebe92239a3cf2E:

000000008001c22a <_ZN5alloc5boxed16Box$LT$T$C$A$GT$8into_raw17hcc7ebe92239a3cf2E>:
    pub fn into_raw(b: Self) -> *mut T {
    8001c22a:	1101                	addi	sp,sp,-32
    8001c22c:	ec06                	sd	ra,24(sp)
    8001c22e:	e82a                	sd	a0,16(sp)
        Self::into_raw_with_allocator(b).0
    8001c230:	00000097          	auipc	ra,0x0
    8001c234:	df0080e7          	jalr	-528(ra) # 8001c020 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17he0e1487eb5c18a3bE>
    8001c238:	e42a                	sd	a0,8(sp)
    8001c23a:	a009                	j	8001c23c <_ZN5alloc5boxed16Box$LT$T$C$A$GT$8into_raw17hcc7ebe92239a3cf2E+0x12>
    8001c23c:	6522                	ld	a0,8(sp)
    }
    8001c23e:	e02a                	sd	a0,0(sp)
    8001c240:	a009                	j	8001c242 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$8into_raw17hcc7ebe92239a3cf2E+0x18>
    8001c242:	6502                	ld	a0,0(sp)
    8001c244:	60e2                	ld	ra,24(sp)
    8001c246:	6105                	addi	sp,sp,32
    8001c248:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed60Box$LT$core..mem..maybe_uninit..MaybeUninit$LT$T$GT$$C$A$GT$11assume_init17h22cceebd78df14b7E:

000000008001c24a <_ZN5alloc5boxed60Box$LT$core..mem..maybe_uninit..MaybeUninit$LT$T$GT$$C$A$GT$11assume_init17h22cceebd78df14b7E>:
    pub unsafe fn assume_init(self) -> Box<T, A> {
    8001c24a:	7179                	addi	sp,sp,-48
    8001c24c:	f406                	sd	ra,40(sp)
    8001c24e:	e82a                	sd	a0,16(sp)
        let (raw, alloc) = Box::into_raw_with_allocator(self);
    8001c250:	00000097          	auipc	ra,0x0
    8001c254:	cf4080e7          	jalr	-780(ra) # 8001bf44 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h3a774aee57a2b865E>
    8001c258:	e42a                	sd	a0,8(sp)
    8001c25a:	a009                	j	8001c25c <_ZN5alloc5boxed60Box$LT$core..mem..maybe_uninit..MaybeUninit$LT$T$GT$$C$A$GT$11assume_init17h22cceebd78df14b7E+0x12>
    8001c25c:	6522                	ld	a0,8(sp)
    8001c25e:	f02a                	sd	a0,32(sp)
        unsafe { Box::from_raw_in(raw as *mut T, alloc) }
    8001c260:	fffff097          	auipc	ra,0xfffff
    8001c264:	542080e7          	jalr	1346(ra) # 8001b7a2 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17h68eabecb8cd08a3aE>
    8001c268:	e02a                	sd	a0,0(sp)
    8001c26a:	a009                	j	8001c26c <_ZN5alloc5boxed60Box$LT$core..mem..maybe_uninit..MaybeUninit$LT$T$GT$$C$A$GT$11assume_init17h22cceebd78df14b7E+0x22>
    }
    8001c26c:	6502                	ld	a0,0(sp)
    8001c26e:	70a2                	ld	ra,40(sp)
    8001c270:	6145                	addi	sp,sp,48
    8001c272:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed60Box$LT$core..mem..maybe_uninit..MaybeUninit$LT$T$GT$$C$A$GT$11assume_init17h2fe4f6739411edd0E:

000000008001c274 <_ZN5alloc5boxed60Box$LT$core..mem..maybe_uninit..MaybeUninit$LT$T$GT$$C$A$GT$11assume_init17h2fe4f6739411edd0E>:
    pub unsafe fn assume_init(self) -> Box<T, A> {
    8001c274:	7179                	addi	sp,sp,-48
    8001c276:	f406                	sd	ra,40(sp)
    8001c278:	e82a                	sd	a0,16(sp)
        let (raw, alloc) = Box::into_raw_with_allocator(self);
    8001c27a:	00000097          	auipc	ra,0x0
    8001c27e:	c72080e7          	jalr	-910(ra) # 8001beec <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h01d9da470f10fcdcE>
    8001c282:	e42a                	sd	a0,8(sp)
    8001c284:	a009                	j	8001c286 <_ZN5alloc5boxed60Box$LT$core..mem..maybe_uninit..MaybeUninit$LT$T$GT$$C$A$GT$11assume_init17h2fe4f6739411edd0E+0x12>
    8001c286:	6522                	ld	a0,8(sp)
    8001c288:	f02a                	sd	a0,32(sp)
        unsafe { Box::from_raw_in(raw as *mut T, alloc) }
    8001c28a:	fffff097          	auipc	ra,0xfffff
    8001c28e:	5a4080e7          	jalr	1444(ra) # 8001b82e <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17he38318e450c3c542E>
    8001c292:	e02a                	sd	a0,0(sp)
    8001c294:	a009                	j	8001c296 <_ZN5alloc5boxed60Box$LT$core..mem..maybe_uninit..MaybeUninit$LT$T$GT$$C$A$GT$11assume_init17h2fe4f6739411edd0E+0x22>
    }
    8001c296:	6502                	ld	a0,0(sp)
    8001c298:	70a2                	ld	ra,40(sp)
    8001c29a:	6145                	addi	sp,sp,48
    8001c29c:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed60Box$LT$core..mem..maybe_uninit..MaybeUninit$LT$T$GT$$C$A$GT$11assume_init17h35c82a9a8f43ab52E:

000000008001c29e <_ZN5alloc5boxed60Box$LT$core..mem..maybe_uninit..MaybeUninit$LT$T$GT$$C$A$GT$11assume_init17h35c82a9a8f43ab52E>:
    pub unsafe fn assume_init(self) -> Box<T, A> {
    8001c29e:	7179                	addi	sp,sp,-48
    8001c2a0:	f406                	sd	ra,40(sp)
    8001c2a2:	e82a                	sd	a0,16(sp)
        let (raw, alloc) = Box::into_raw_with_allocator(self);
    8001c2a4:	00000097          	auipc	ra,0x0
    8001c2a8:	d50080e7          	jalr	-688(ra) # 8001bff4 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h8cff8d68311da958E>
    8001c2ac:	e42a                	sd	a0,8(sp)
    8001c2ae:	a009                	j	8001c2b0 <_ZN5alloc5boxed60Box$LT$core..mem..maybe_uninit..MaybeUninit$LT$T$GT$$C$A$GT$11assume_init17h35c82a9a8f43ab52E+0x12>
    8001c2b0:	6522                	ld	a0,8(sp)
    8001c2b2:	f02a                	sd	a0,32(sp)
        unsafe { Box::from_raw_in(raw as *mut T, alloc) }
    8001c2b4:	fffff097          	auipc	ra,0xfffff
    8001c2b8:	55e080e7          	jalr	1374(ra) # 8001b812 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17hbb480293fc4c0d0bE>
    8001c2bc:	e02a                	sd	a0,0(sp)
    8001c2be:	a009                	j	8001c2c0 <_ZN5alloc5boxed60Box$LT$core..mem..maybe_uninit..MaybeUninit$LT$T$GT$$C$A$GT$11assume_init17h35c82a9a8f43ab52E+0x22>
    }
    8001c2c0:	6502                	ld	a0,0(sp)
    8001c2c2:	70a2                	ld	ra,40(sp)
    8001c2c4:	6145                	addi	sp,sp,48
    8001c2c6:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed60Box$LT$core..mem..maybe_uninit..MaybeUninit$LT$T$GT$$C$A$GT$11assume_init17h4ed953d8735ade7eE:

000000008001c2c8 <_ZN5alloc5boxed60Box$LT$core..mem..maybe_uninit..MaybeUninit$LT$T$GT$$C$A$GT$11assume_init17h4ed953d8735ade7eE>:
    pub unsafe fn assume_init(self) -> Box<T, A> {
    8001c2c8:	7179                	addi	sp,sp,-48
    8001c2ca:	f406                	sd	ra,40(sp)
    8001c2cc:	e82a                	sd	a0,16(sp)
        let (raw, alloc) = Box::into_raw_with_allocator(self);
    8001c2ce:	00000097          	auipc	ra,0x0
    8001c2d2:	c4a080e7          	jalr	-950(ra) # 8001bf18 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h255317eb94c396a6E>
    8001c2d6:	e42a                	sd	a0,8(sp)
    8001c2d8:	a009                	j	8001c2da <_ZN5alloc5boxed60Box$LT$core..mem..maybe_uninit..MaybeUninit$LT$T$GT$$C$A$GT$11assume_init17h4ed953d8735ade7eE+0x12>
    8001c2da:	6522                	ld	a0,8(sp)
    8001c2dc:	f02a                	sd	a0,32(sp)
        unsafe { Box::from_raw_in(raw as *mut T, alloc) }
    8001c2de:	fffff097          	auipc	ra,0xfffff
    8001c2e2:	4fc080e7          	jalr	1276(ra) # 8001b7da <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17h9f1ea1f840330d88E>
    8001c2e6:	e02a                	sd	a0,0(sp)
    8001c2e8:	a009                	j	8001c2ea <_ZN5alloc5boxed60Box$LT$core..mem..maybe_uninit..MaybeUninit$LT$T$GT$$C$A$GT$11assume_init17h4ed953d8735ade7eE+0x22>
    }
    8001c2ea:	6502                	ld	a0,0(sp)
    8001c2ec:	70a2                	ld	ra,40(sp)
    8001c2ee:	6145                	addi	sp,sp,48
    8001c2f0:	8082                	ret

Disassembly of section .text._ZN5alloc5boxed60Box$LT$core..mem..maybe_uninit..MaybeUninit$LT$T$GT$$C$A$GT$11assume_init17hef567e32e2b3ffa4E:

000000008001c2f2 <_ZN5alloc5boxed60Box$LT$core..mem..maybe_uninit..MaybeUninit$LT$T$GT$$C$A$GT$11assume_init17hef567e32e2b3ffa4E>:
    pub unsafe fn assume_init(self) -> Box<T, A> {
    8001c2f2:	7179                	addi	sp,sp,-48
    8001c2f4:	f406                	sd	ra,40(sp)
    8001c2f6:	e82a                	sd	a0,16(sp)
        let (raw, alloc) = Box::into_raw_with_allocator(self);
    8001c2f8:	00000097          	auipc	ra,0x0
    8001c2fc:	cd0080e7          	jalr	-816(ra) # 8001bfc8 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$23into_raw_with_allocator17h56417e202ce6f498E>
    8001c300:	e42a                	sd	a0,8(sp)
    8001c302:	a009                	j	8001c304 <_ZN5alloc5boxed60Box$LT$core..mem..maybe_uninit..MaybeUninit$LT$T$GT$$C$A$GT$11assume_init17hef567e32e2b3ffa4E+0x12>
    8001c304:	6522                	ld	a0,8(sp)
    8001c306:	f02a                	sd	a0,32(sp)
        unsafe { Box::from_raw_in(raw as *mut T, alloc) }
    8001c308:	fffff097          	auipc	ra,0xfffff
    8001c30c:	4ee080e7          	jalr	1262(ra) # 8001b7f6 <_ZN5alloc5boxed16Box$LT$T$C$A$GT$11from_raw_in17haf8eaf51394a2521E>
    8001c310:	e02a                	sd	a0,0(sp)
    8001c312:	a009                	j	8001c314 <_ZN5alloc5boxed60Box$LT$core..mem..maybe_uninit..MaybeUninit$LT$T$GT$$C$A$GT$11assume_init17hef567e32e2b3ffa4E+0x22>
    }
    8001c314:	6502                	ld	a0,0(sp)
    8001c316:	70a2                	ld	ra,40(sp)
    8001c318:	6145                	addi	sp,sp,48
    8001c31a:	8082                	ret

Disassembly of section .text._ZN4core3cmp3Ord3min17h470a5bbd78ca29f2E:

000000008001c31c <_ZN4core3cmp3Ord3min17h470a5bbd78ca29f2E>:
    fn min(self, other: Self) -> Self
    8001c31c:	1101                	addi	sp,sp,-32
    8001c31e:	ec06                	sd	ra,24(sp)
    8001c320:	e42a                	sd	a0,8(sp)
    8001c322:	e82e                	sd	a1,16(sp)
        min_by(self, other, Ord::cmp)
    8001c324:	00000097          	auipc	ra,0x0
    8001c328:	030080e7          	jalr	48(ra) # 8001c354 <_ZN4core3cmp6min_by17he5979745ae7a7f64E>
    8001c32c:	e02a                	sd	a0,0(sp)
    8001c32e:	a009                	j	8001c330 <_ZN4core3cmp3Ord3min17h470a5bbd78ca29f2E+0x14>
    }
    8001c330:	6502                	ld	a0,0(sp)
    8001c332:	60e2                	ld	ra,24(sp)
    8001c334:	6105                	addi	sp,sp,32
    8001c336:	8082                	ret

Disassembly of section .text._ZN4core3cmp3min17hbc9e632873ab1838E:

000000008001c338 <_ZN4core3cmp3min17hbc9e632873ab1838E>:
pub fn min<T: Ord>(v1: T, v2: T) -> T {
    8001c338:	1101                	addi	sp,sp,-32
    8001c33a:	ec06                	sd	ra,24(sp)
    8001c33c:	e42a                	sd	a0,8(sp)
    8001c33e:	e82e                	sd	a1,16(sp)
    v1.min(v2)
    8001c340:	00000097          	auipc	ra,0x0
    8001c344:	fdc080e7          	jalr	-36(ra) # 8001c31c <_ZN4core3cmp3Ord3min17h470a5bbd78ca29f2E>
    8001c348:	e02a                	sd	a0,0(sp)
    8001c34a:	a009                	j	8001c34c <_ZN4core3cmp3min17hbc9e632873ab1838E+0x14>
}
    8001c34c:	6502                	ld	a0,0(sp)
    8001c34e:	60e2                	ld	ra,24(sp)
    8001c350:	6105                	addi	sp,sp,32
    8001c352:	8082                	ret

Disassembly of section .text._ZN4core3cmp6min_by17he5979745ae7a7f64E:

000000008001c354 <_ZN4core3cmp6min_by17he5979745ae7a7f64E>:
pub fn min_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
    8001c354:	715d                	addi	sp,sp,-80
    8001c356:	e486                	sd	ra,72(sp)
    8001c358:	e42a                	sd	a0,8(sp)
    8001c35a:	e82e                	sd	a1,16(sp)
    8001c35c:	4505                	li	a0,1
    match compare(&v1, &v2) {
    8001c35e:	02a10fa3          	sb	a0,63(sp)
    8001c362:	02a10f23          	sb	a0,62(sp)
    8001c366:	0028                	addi	a0,sp,8
    8001c368:	f42a                	sd	a0,40(sp)
    8001c36a:	080c                	addi	a1,sp,16
    8001c36c:	f82e                	sd	a1,48(sp)
    8001c36e:	fffeb097          	auipc	ra,0xfffeb
    8001c372:	a44080e7          	jalr	-1468(ra) # 80006db2 <_ZN4core3ops8function6FnOnce9call_once17h5aa9a10c33b479e6E>
    8001c376:	02a103a3          	sb	a0,39(sp)
    8001c37a:	a009                	j	8001c37c <_ZN4core3cmp6min_by17he5979745ae7a7f64E+0x28>
        Ordering::Less | Ordering::Equal => v1,
    8001c37c:	02710503          	lb	a0,39(sp)
    8001c380:	0505                	addi	a0,a0,1
    8001c382:	4589                	li	a1,2
    8001c384:	00b56a63          	bltu	a0,a1,8001c398 <_ZN4core3cmp6min_by17he5979745ae7a7f64E+0x44>
    8001c388:	a009                	j	8001c38a <_ZN4core3cmp6min_by17he5979745ae7a7f64E+0x36>
    8001c38a:	4501                	li	a0,0
        Ordering::Greater => v2,
    8001c38c:	02a10f23          	sb	a0,62(sp)
    8001c390:	6542                	ld	a0,16(sp)
    8001c392:	ec2a                	sd	a0,24(sp)
    match compare(&v1, &v2) {
    8001c394:	a801                	j	8001c3a4 <_ZN4core3cmp6min_by17he5979745ae7a7f64E+0x50>
    8001c396:	0000                	unimp
    8001c398:	4501                	li	a0,0
        Ordering::Less | Ordering::Equal => v1,
    8001c39a:	02a10fa3          	sb	a0,63(sp)
    8001c39e:	6522                	ld	a0,8(sp)
    8001c3a0:	ec2a                	sd	a0,24(sp)
    match compare(&v1, &v2) {
    8001c3a2:	a009                	j	8001c3a4 <_ZN4core3cmp6min_by17he5979745ae7a7f64E+0x50>
}
    8001c3a4:	03e14503          	lbu	a0,62(sp)
    8001c3a8:	8905                	andi	a0,a0,1
    8001c3aa:	e919                	bnez	a0,8001c3c0 <_ZN4core3cmp6min_by17he5979745ae7a7f64E+0x6c>
    8001c3ac:	a009                	j	8001c3ae <_ZN4core3cmp6min_by17he5979745ae7a7f64E+0x5a>
    8001c3ae:	03f14503          	lbu	a0,63(sp)
    8001c3b2:	8905                	andi	a0,a0,1
    8001c3b4:	e519                	bnez	a0,8001c3c2 <_ZN4core3cmp6min_by17he5979745ae7a7f64E+0x6e>
    8001c3b6:	a009                	j	8001c3b8 <_ZN4core3cmp6min_by17he5979745ae7a7f64E+0x64>
    8001c3b8:	6562                	ld	a0,24(sp)
    8001c3ba:	60a6                	ld	ra,72(sp)
    8001c3bc:	6161                	addi	sp,sp,80
    8001c3be:	8082                	ret
    8001c3c0:	b7fd                	j	8001c3ae <_ZN4core3cmp6min_by17he5979745ae7a7f64E+0x5a>
    8001c3c2:	bfdd                	j	8001c3b8 <_ZN4core3cmp6min_by17he5979745ae7a7f64E+0x64>

Disassembly of section .text._ZN4core4char7convert18from_u32_unchecked17hac286a657ee2c904E:

000000008001c3c4 <_ZN4core4char7convert18from_u32_unchecked17hac286a657ee2c904E>:
///
/// assert_eq!('❤', c);
/// ```
#[inline]
#[stable(feature = "char_from_unchecked", since = "1.5.0")]
pub unsafe fn from_u32_unchecked(i: u32) -> char {
    8001c3c4:	1141                	addi	sp,sp,-16
    8001c3c6:	c42a                	sw	a0,8(sp)
    // SAFETY: the caller must guarantee that `i` is a valid char value.
    if cfg!(debug_assertions) { char::from_u32(i).unwrap() } else { unsafe { transmute(i) } }
    8001c3c8:	c62a                	sw	a0,12(sp)
    8001c3ca:	1502                	slli	a0,a0,0x20
    8001c3cc:	9101                	srli	a0,a0,0x20
    8001c3ce:	e02a                	sd	a0,0(sp)
    8001c3d0:	a009                	j	8001c3d2 <_ZN4core4char7convert18from_u32_unchecked17hac286a657ee2c904E+0xe>
}
    8001c3d2:	6502                	ld	a0,0(sp)
    8001c3d4:	0141                	addi	sp,sp,16
    8001c3d6:	8082                	ret

Disassembly of section .text._ZN4core4iter6traits8iterator8Iterator8for_each4call17hfc6c60365ed1f66bE:

000000008001c3d8 <_ZN4core4iter6traits8iterator8Iterator8for_each4call17hfc6c60365ed1f66bE>:
        fn call<T>(mut f: impl FnMut(T)) -> impl FnMut((), T) {
    8001c3d8:	1141                	addi	sp,sp,-16
        }
    8001c3da:	0141                	addi	sp,sp,16
    8001c3dc:	8082                	ret

Disassembly of section .text._ZN4core4iter6traits8iterator8Iterator8for_each4call28_$u7b$$u7b$closure$u7d$$u7d$17h486761cc57705d97E:

000000008001c3de <_ZN4core4iter6traits8iterator8Iterator8for_each4call28_$u7b$$u7b$closure$u7d$$u7d$17h486761cc57705d97E>:
            move |(), item| f(item)
    8001c3de:	7139                	addi	sp,sp,-64
    8001c3e0:	fc06                	sd	ra,56(sp)
    8001c3e2:	ec2a                	sd	a0,24(sp)
    8001c3e4:	f42e                	sd	a1,40(sp)
    8001c3e6:	f832                	sd	a2,48(sp)
    8001c3e8:	e42e                	sd	a1,8(sp)
    8001c3ea:	e832                	sd	a2,16(sp)
    8001c3ec:	fffe9097          	auipc	ra,0xfffe9
    8001c3f0:	2a8080e7          	jalr	680(ra) # 80005694 <_ZN6kernel2fs3bio6Bcache5binit28_$u7b$$u7b$closure$u7d$$u7d$17h25f2c34d7a851755E>
    8001c3f4:	a009                	j	8001c3f6 <_ZN4core4iter6traits8iterator8Iterator8for_each4call28_$u7b$$u7b$closure$u7d$$u7d$17h486761cc57705d97E+0x18>
    8001c3f6:	70e2                	ld	ra,56(sp)
    8001c3f8:	6121                	addi	sp,sp,64
    8001c3fa:	8082                	ret

Disassembly of section .text._ZN6kernel3ipc9semaphore9semaphore14semaphore_down17hfc37af6ce552d8edE:

000000008001c3fc <_ZN6kernel3ipc9semaphore9semaphore14semaphore_down17hfc37af6ce552d8edE>:
        Self{
            cnt: value,
            sem_lock: Spinlock::new((), "sem_lock"),
        }
    }
    pub fn semaphore_down(&mut self){
    8001c3fc:	711d                	addi	sp,sp,-96
    8001c3fe:	ec86                	sd	ra,88(sp)
    8001c400:	e82a                	sd	a0,16(sp)
    8001c402:	e4aa                	sd	a0,72(sp)

000000008001c404 <.LBB0_7>:
        println!("semaphore down");
    8001c404:	0000f597          	auipc	a1,0xf
    8001c408:	d5458593          	addi	a1,a1,-684 # 8002b158 <.L__unnamed_1>

000000008001c40c <.LBB0_8>:
    8001c40c:	0000f697          	auipc	a3,0xf
    8001c410:	d5c68693          	addi	a3,a3,-676 # 8002b168 <.L__unnamed_20>
    8001c414:	0828                	addi	a0,sp,24
    8001c416:	4605                	li	a2,1
    8001c418:	4701                	li	a4,0
    8001c41a:	fffe9097          	auipc	ra,0xfffe9
    8001c41e:	01a080e7          	jalr	26(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8001c422:	a009                	j	8001c424 <.LBB0_8+0x18>
    8001c424:	0828                	addi	a0,sp,24
    8001c426:	00001097          	auipc	ra,0x1
    8001c42a:	78a080e7          	jalr	1930(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8001c42e:	a009                	j	8001c430 <.LBB0_8+0x24>
        let guard = self.sem_lock.acquire();
    8001c430:	6542                	ld	a0,16(sp)
    8001c432:	ffff4097          	auipc	ra,0xffff4
    8001c436:	202080e7          	jalr	514(ra) # 80010634 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    8001c43a:	85aa                	mv	a1,a0
    8001c43c:	e42e                	sd	a1,8(sp)
    8001c43e:	e8aa                	sd	a0,80(sp)
    8001c440:	a009                	j	8001c442 <.LBB0_8+0x36>
        self.cnt -= 1;
    8001c442:	6542                	ld	a0,16(sp)
    8001c444:	5108                	lw	a0,32(a0)
    8001c446:	fff50593          	addi	a1,a0,-1
    8001c44a:	e02e                	sd	a1,0(sp)
    8001c44c:	357d                	addiw	a0,a0,-1
    8001c44e:	00b51f63          	bne	a0,a1,8001c46c <.LBB0_9>
    8001c452:	a009                	j	8001c454 <.LBB0_8+0x48>
    8001c454:	6522                	ld	a0,8(sp)
    8001c456:	6582                	ld	a1,0(sp)
    8001c458:	6642                	ld	a2,16(sp)
    8001c45a:	d20c                	sw	a1,32(a2)
        drop(guard);
    8001c45c:	00001097          	auipc	ra,0x1
    8001c460:	a0e080e7          	jalr	-1522(ra) # 8001ce6a <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    8001c464:	a009                	j	8001c466 <.LBB0_8+0x5a>
    }
    8001c466:	60e6                	ld	ra,88(sp)
    8001c468:	6125                	addi	sp,sp,96
    8001c46a:	8082                	ret

000000008001c46c <.LBB0_9>:
        self.cnt -= 1;
    8001c46c:	0000f517          	auipc	a0,0xf
    8001c470:	d3450513          	addi	a0,a0,-716 # 8002b1a0 <str.0>

000000008001c474 <.LBB0_10>:
    8001c474:	0000f617          	auipc	a2,0xf
    8001c478:	d0c60613          	addi	a2,a2,-756 # 8002b180 <.L__unnamed_3>
    8001c47c:	02100593          	li	a1,33
    8001c480:	00006097          	auipc	ra,0x6
    8001c484:	c7c080e7          	jalr	-900(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel3ipc9semaphore9semaphore12semaphore_up17h776c4e5603b34918E:

000000008001c48a <_ZN6kernel3ipc9semaphore9semaphore12semaphore_up17h776c4e5603b34918E>:
    pub fn semaphore_up(&mut self){
    8001c48a:	7179                	addi	sp,sp,-48
    8001c48c:	f406                	sd	ra,40(sp)
    8001c48e:	e42a                	sd	a0,8(sp)
    8001c490:	ec2a                	sd	a0,24(sp)
        let guard = self.sem_lock.acquire();
    8001c492:	ffff4097          	auipc	ra,0xffff4
    8001c496:	1a2080e7          	jalr	418(ra) # 80010634 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    8001c49a:	85aa                	mv	a1,a0
    8001c49c:	e82e                	sd	a1,16(sp)
    8001c49e:	f02a                	sd	a0,32(sp)
    8001c4a0:	a009                	j	8001c4a2 <_ZN6kernel3ipc9semaphore9semaphore12semaphore_up17h776c4e5603b34918E+0x18>
        self.cnt += 1;
    8001c4a2:	6522                	ld	a0,8(sp)
    8001c4a4:	5108                	lw	a0,32(a0)
    8001c4a6:	00150593          	addi	a1,a0,1
    8001c4aa:	e02e                	sd	a1,0(sp)
    8001c4ac:	2505                	addiw	a0,a0,1
    8001c4ae:	00b51f63          	bne	a0,a1,8001c4cc <.LBB1_5>
    8001c4b2:	a009                	j	8001c4b4 <_ZN6kernel3ipc9semaphore9semaphore12semaphore_up17h776c4e5603b34918E+0x2a>
    8001c4b4:	6542                	ld	a0,16(sp)
    8001c4b6:	6582                	ld	a1,0(sp)
    8001c4b8:	6622                	ld	a2,8(sp)
    8001c4ba:	d20c                	sw	a1,32(a2)
        drop(guard);
    8001c4bc:	00001097          	auipc	ra,0x1
    8001c4c0:	9ae080e7          	jalr	-1618(ra) # 8001ce6a <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    8001c4c4:	a009                	j	8001c4c6 <_ZN6kernel3ipc9semaphore9semaphore12semaphore_up17h776c4e5603b34918E+0x3c>
    }
    8001c4c6:	70a2                	ld	ra,40(sp)
    8001c4c8:	6145                	addi	sp,sp,48
    8001c4ca:	8082                	ret

000000008001c4cc <.LBB1_5>:
        self.cnt += 1;
    8001c4cc:	0000f517          	auipc	a0,0xf
    8001c4d0:	d1450513          	addi	a0,a0,-748 # 8002b1e0 <str.1>

000000008001c4d4 <.LBB1_6>:
    8001c4d4:	0000f617          	auipc	a2,0xf
    8001c4d8:	cf460613          	addi	a2,a2,-780 # 8002b1c8 <.L__unnamed_4>
    8001c4dc:	45f1                	li	a1,28
    8001c4de:	00006097          	auipc	ra,0x6
    8001c4e2:	c1e080e7          	jalr	-994(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel3ipc9semaphore9semaphore9get_value17ha36354007f7a90a5E:

000000008001c4e8 <_ZN6kernel3ipc9semaphore9semaphore9get_value17ha36354007f7a90a5E>:

    pub fn get_value(&self) -> i32{
    8001c4e8:	1141                	addi	sp,sp,-16
    8001c4ea:	e42a                	sd	a0,8(sp)
        self.cnt
    }
    8001c4ec:	5108                	lw	a0,32(a0)
    8001c4ee:	0141                	addi	sp,sp,16
    8001c4f0:	8082                	ret

Disassembly of section .text._ZN6kernel3ipc9semaphore5sem_t8sem_init17h922a2e9695ae8884E:

000000008001c4f2 <_ZN6kernel3ipc9semaphore5sem_t8sem_init17h922a2e9695ae8884E>:
            id: -1,
            // sem_lock: Spinlock::new(0, "Nope"),
        }
    }

    pub fn sem_init(&mut self, cnt: i32) -> i32{
    8001c4f2:	7159                	addi	sp,sp,-112
    8001c4f4:	f486                	sd	ra,104(sp)
    8001c4f6:	e82a                	sd	a0,16(sp)
    8001c4f8:	862e                	mv	a2,a1
    8001c4fa:	ec32                	sd	a2,24(sp)
    8001c4fc:	e8aa                	sd	a0,80(sp)
    8001c4fe:	ceae                	sw	a1,92(sp)

000000008001c500 <.LBB3_5>:
        println!("sem_init in semaphore.rs");
    8001c500:	0000f597          	auipc	a1,0xf
    8001c504:	d1858593          	addi	a1,a1,-744 # 8002b218 <.L__unnamed_5>

000000008001c508 <.LBB3_6>:
    8001c508:	0000f697          	auipc	a3,0xf
    8001c50c:	c6068693          	addi	a3,a3,-928 # 8002b168 <.L__unnamed_20>
    8001c510:	1008                	addi	a0,sp,32
    8001c512:	4605                	li	a2,1
    8001c514:	4701                	li	a4,0
    8001c516:	fffe9097          	auipc	ra,0xfffe9
    8001c51a:	f1e080e7          	jalr	-226(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8001c51e:	a009                	j	8001c520 <.LBB3_6+0x18>
    8001c520:	1008                	addi	a0,sp,32
    8001c522:	00001097          	auipc	ra,0x1
    8001c526:	68e080e7          	jalr	1678(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8001c52a:	a009                	j	8001c52c <.LBB3_6+0x24>
        let sem_guard = self.sem.sem_lock.acquire();
    8001c52c:	6542                	ld	a0,16(sp)
    8001c52e:	ffff4097          	auipc	ra,0xffff4
    8001c532:	106080e7          	jalr	262(ra) # 80010634 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    8001c536:	85aa                	mv	a1,a0
    8001c538:	e42e                	sd	a1,8(sp)
    8001c53a:	f0aa                	sd	a0,96(sp)
    8001c53c:	a009                	j	8001c53e <.LBB3_6+0x36>
        self.sem.cnt = cnt;
    8001c53e:	6522                	ld	a0,8(sp)
    8001c540:	65e2                	ld	a1,24(sp)
    8001c542:	6642                	ld	a2,16(sp)
    8001c544:	d20c                	sw	a1,32(a2)
        drop(sem_guard);
    8001c546:	00001097          	auipc	ra,0x1
    8001c54a:	924080e7          	jalr	-1756(ra) # 8001ce6a <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    8001c54e:	a009                	j	8001c550 <.LBB3_6+0x48>
    8001c550:	4501                	li	a0,0
        0
    }
    8001c552:	70a6                	ld	ra,104(sp)
    8001c554:	6165                	addi	sp,sp,112
    8001c556:	8082                	ret

Disassembly of section .text._ZN6kernel3ipc9semaphore5sem_t8sem_down17h0b823d8c0372af65E:

000000008001c558 <_ZN6kernel3ipc9semaphore5sem_t8sem_down17h0b823d8c0372af65E>:

    pub fn sem_down(&mut self){
    8001c558:	7125                	addi	sp,sp,-416
    8001c55a:	ef06                	sd	ra,408(sp)
    8001c55c:	fcaa                	sd	a0,120(sp)
    8001c55e:	f6aa                	sd	a0,360(sp)
    8001c560:	a009                	j	8001c562 <_ZN6kernel3ipc9semaphore5sem_t8sem_down17h0b823d8c0372af65E+0xa>
        while self.sem.get_value() <= 0{
    8001c562:	7566                	ld	a0,120(sp)
    8001c564:	00000097          	auipc	ra,0x0
    8001c568:	f84080e7          	jalr	-124(ra) # 8001c4e8 <_ZN6kernel3ipc9semaphore9semaphore9get_value17ha36354007f7a90a5E>
    8001c56c:	2501                	sext.w	a0,a0
    8001c56e:	f8aa                	sd	a0,112(sp)
    8001c570:	a009                	j	8001c572 <_ZN6kernel3ipc9semaphore5sem_t8sem_down17h0b823d8c0372af65E+0x1a>
    8001c572:	7546                	ld	a0,112(sp)
    8001c574:	4585                	li	a1,1
    8001c576:	02b54363          	blt	a0,a1,8001c59c <.LBB4_20>
    8001c57a:	a009                	j	8001c57c <.LBB4_18>

000000008001c57c <.LBB4_18>:
            my_proc.sleep(
                &self.sem as *const _ as usize, 
                sem_guard
            );
        }
        println!("sem down");
    8001c57c:	0000f597          	auipc	a1,0xf
    8001c580:	d3c58593          	addi	a1,a1,-708 # 8002b2b8 <.L__unnamed_6>

000000008001c584 <.LBB4_19>:
    8001c584:	0000f697          	auipc	a3,0xf
    8001c588:	be468693          	addi	a3,a3,-1052 # 8002b168 <.L__unnamed_20>
    8001c58c:	1a28                	addi	a0,sp,312
    8001c58e:	4605                	li	a2,1
    8001c590:	4701                	li	a4,0
    8001c592:	fffe9097          	auipc	ra,0xfffe9
    8001c596:	ea2080e7          	jalr	-350(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8001c59a:	a21d                	j	8001c6c0 <.LBB4_26+0x38>

000000008001c59c <.LBB4_20>:
            let my_proc = unsafe { CPU_MANAGER.myproc().unwrap() };
    8001c59c:	00048517          	auipc	a0,0x48
    8001c5a0:	ba450513          	addi	a0,a0,-1116 # 80064140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    8001c5a4:	ffff5097          	auipc	ra,0xffff5
    8001c5a8:	486080e7          	jalr	1158(ra) # 80011a2a <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    8001c5ac:	f4aa                	sd	a0,104(sp)
    8001c5ae:	a009                	j	8001c5b0 <.LBB4_20+0x14>
    8001c5b0:	7526                	ld	a0,104(sp)

000000008001c5b2 <.LBB4_21>:
    8001c5b2:	0000f597          	auipc	a1,0xf
    8001c5b6:	c7658593          	addi	a1,a1,-906 # 8002b228 <.L__unnamed_7>
    8001c5ba:	ffff2097          	auipc	ra,0xffff2
    8001c5be:	702080e7          	jalr	1794(ra) # 8000ecbc <_ZN4core6option15Option$LT$T$GT$6unwrap17h81f0c84c54a80648E>
    8001c5c2:	f0aa                	sd	a0,96(sp)
    8001c5c4:	a009                	j	8001c5c6 <.LBB4_21+0x14>
    8001c5c6:	7566                	ld	a0,120(sp)
    8001c5c8:	7586                	ld	a1,96(sp)
    8001c5ca:	faae                	sd	a1,368(sp)
            let sem_guard = self.sem.sem_lock.acquire();
    8001c5cc:	ffff4097          	auipc	ra,0xffff4
    8001c5d0:	068080e7          	jalr	104(ra) # 80010634 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    8001c5d4:	e12a                	sd	a0,128(sp)
    8001c5d6:	a009                	j	8001c5d8 <.LBB4_21+0x26>
            println!("ready to sleep {} {} {} {}", &self.id, &self.sem.cnt, &self.sem as *const _ as usize, &sem_guard as *const _ as usize);
    8001c5d8:	7566                	ld	a0,120(sp)
    8001c5da:	02850593          	addi	a1,a0,40
    8001c5de:	ee2e                	sd	a1,280(sp)
    8001c5e0:	02050593          	addi	a1,a0,32
    8001c5e4:	f22e                	sd	a1,288(sp)
    8001c5e6:	f62a                	sd	a0,296(sp)
    8001c5e8:	0108                	addi	a0,sp,128
    8001c5ea:	fa2a                	sd	a0,304(sp)
    8001c5ec:	0a28                	addi	a0,sp,280
    8001c5ee:	fdaa                	sd	a0,248(sp)
    8001c5f0:	1214                	addi	a3,sp,288
    8001c5f2:	fc36                	sd	a3,56(sp)
    8001c5f4:	e236                	sd	a3,256(sp)
    8001c5f6:	1230                	addi	a2,sp,296
    8001c5f8:	e0b2                	sd	a2,64(sp)
    8001c5fa:	e632                	sd	a2,264(sp)
    8001c5fc:	1a0c                	addi	a1,sp,304
    8001c5fe:	e4ae                	sd	a1,72(sp)
    8001c600:	ea2e                	sd	a1,272(sp)
    8001c602:	feaa                	sd	a0,376(sp)
    8001c604:	e336                	sd	a3,384(sp)
    8001c606:	e732                	sd	a2,392(sp)
    8001c608:	eb2e                	sd	a1,400(sp)

000000008001c60a <.LBB4_22>:
    8001c60a:	00002597          	auipc	a1,0x2
    8001c60e:	df058593          	addi	a1,a1,-528 # 8001e3fa <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h3baa88b0b8ed59b0E>
    8001c612:	00002097          	auipc	ra,0x2
    8001c616:	e4c080e7          	jalr	-436(ra) # 8001e45e <_ZN4core3fmt10ArgumentV13new17h4cc7035953f043f8E>
    8001c61a:	e8aa                	sd	a0,80(sp)
    8001c61c:	ecae                	sd	a1,88(sp)
    8001c61e:	a009                	j	8001c620 <.LBB4_22+0x16>
    8001c620:	7562                	ld	a0,56(sp)

000000008001c622 <.LBB4_23>:
    8001c622:	00002597          	auipc	a1,0x2
    8001c626:	dd858593          	addi	a1,a1,-552 # 8001e3fa <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h3baa88b0b8ed59b0E>
    8001c62a:	00002097          	auipc	ra,0x2
    8001c62e:	e34080e7          	jalr	-460(ra) # 8001e45e <_ZN4core3fmt10ArgumentV13new17h4cc7035953f043f8E>
    8001c632:	f42a                	sd	a0,40(sp)
    8001c634:	f82e                	sd	a1,48(sp)
    8001c636:	a009                	j	8001c638 <.LBB4_23+0x16>
    8001c638:	6506                	ld	a0,64(sp)

000000008001c63a <.LBB4_24>:
    8001c63a:	00008597          	auipc	a1,0x8
    8001c63e:	21e58593          	addi	a1,a1,542 # 80024858 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h9c6c4af1578f7c29E>
    8001c642:	00003097          	auipc	ra,0x3
    8001c646:	ee4080e7          	jalr	-284(ra) # 8001f526 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    8001c64a:	ec2a                	sd	a0,24(sp)
    8001c64c:	f02e                	sd	a1,32(sp)
    8001c64e:	a009                	j	8001c650 <.LBB4_24+0x16>
    8001c650:	6526                	ld	a0,72(sp)

000000008001c652 <.LBB4_25>:
    8001c652:	00008597          	auipc	a1,0x8
    8001c656:	20658593          	addi	a1,a1,518 # 80024858 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h9c6c4af1578f7c29E>
    8001c65a:	00003097          	auipc	ra,0x3
    8001c65e:	ecc080e7          	jalr	-308(ra) # 8001f526 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    8001c662:	e42a                	sd	a0,8(sp)
    8001c664:	e82e                	sd	a1,16(sp)
    8001c666:	a009                	j	8001c668 <.LBB4_25+0x16>
    8001c668:	6542                	ld	a0,16(sp)
    8001c66a:	65a2                	ld	a1,8(sp)
    8001c66c:	7602                	ld	a2,32(sp)
    8001c66e:	66e2                	ld	a3,24(sp)
    8001c670:	7742                	ld	a4,48(sp)
    8001c672:	77a2                	ld	a5,40(sp)
    8001c674:	6866                	ld	a6,88(sp)
    8001c676:	68c6                	ld	a7,80(sp)
    8001c678:	fd46                	sd	a7,184(sp)
    8001c67a:	e1c2                	sd	a6,192(sp)
    8001c67c:	e5be                	sd	a5,200(sp)
    8001c67e:	e9ba                	sd	a4,208(sp)
    8001c680:	edb6                	sd	a3,216(sp)
    8001c682:	f1b2                	sd	a2,224(sp)
    8001c684:	f5ae                	sd	a1,232(sp)
    8001c686:	f9aa                	sd	a0,240(sp)

000000008001c688 <.LBB4_26>:
    8001c688:	0000f597          	auipc	a1,0xf
    8001c68c:	bd058593          	addi	a1,a1,-1072 # 8002b258 <.L__unnamed_8>
    8001c690:	0128                	addi	a0,sp,136
    8001c692:	4615                	li	a2,5
    8001c694:	1934                	addi	a3,sp,184
    8001c696:	4711                	li	a4,4
    8001c698:	fffe9097          	auipc	ra,0xfffe9
    8001c69c:	d9c080e7          	jalr	-612(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8001c6a0:	a009                	j	8001c6a2 <.LBB4_26+0x1a>
    8001c6a2:	0128                	addi	a0,sp,136
    8001c6a4:	00001097          	auipc	ra,0x1
    8001c6a8:	50c080e7          	jalr	1292(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8001c6ac:	a009                	j	8001c6ae <.LBB4_26+0x26>
                sem_guard
    8001c6ae:	75e6                	ld	a1,120(sp)
    8001c6b0:	7506                	ld	a0,96(sp)
    8001c6b2:	660a                	ld	a2,128(sp)
            my_proc.sleep(
    8001c6b4:	ffff5097          	auipc	ra,0xffff5
    8001c6b8:	052080e7          	jalr	82(ra) # 80011706 <_ZN6kernel7process7process11task_struct5sleep17h3865ab03b1bff75fE>
    8001c6bc:	a009                	j	8001c6be <.LBB4_26+0x36>
        while self.sem.get_value() <= 0{
    8001c6be:	b555                	j	8001c562 <_ZN6kernel3ipc9semaphore5sem_t8sem_down17h0b823d8c0372af65E+0xa>
    8001c6c0:	1a28                	addi	a0,sp,312
        println!("sem down");
    8001c6c2:	00001097          	auipc	ra,0x1
    8001c6c6:	4ee080e7          	jalr	1262(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8001c6ca:	a009                	j	8001c6cc <.LBB4_26+0x44>
        self.sem.semaphore_down();
    8001c6cc:	7566                	ld	a0,120(sp)
    8001c6ce:	00000097          	auipc	ra,0x0
    8001c6d2:	d2e080e7          	jalr	-722(ra) # 8001c3fc <_ZN6kernel3ipc9semaphore9semaphore14semaphore_down17hfc37af6ce552d8edE>
    8001c6d6:	a009                	j	8001c6d8 <.LBB4_26+0x50>
    }
    8001c6d8:	60fa                	ld	ra,408(sp)
    8001c6da:	611d                	addi	sp,sp,416
    8001c6dc:	8082                	ret

Disassembly of section .text._ZN6kernel3ipc9semaphore5sem_t6sem_up17hff2b195f2e6585ecE:

000000008001c6de <_ZN6kernel3ipc9semaphore5sem_t6sem_up17hff2b195f2e6585ecE>:

    pub fn sem_up(&mut self){
    8001c6de:	7165                	addi	sp,sp,-400
    8001c6e0:	e706                	sd	ra,392(sp)
    8001c6e2:	f4aa                	sd	a0,104(sp)
    8001c6e4:	f2aa                	sd	a0,352(sp)

000000008001c6e6 <.LBB5_16>:
        println!("sem up");
    8001c6e6:	0000f597          	auipc	a1,0xf
    8001c6ea:	bea58593          	addi	a1,a1,-1046 # 8002b2d0 <.L__unnamed_9>

000000008001c6ee <.LBB5_17>:
    8001c6ee:	0000f697          	auipc	a3,0xf
    8001c6f2:	a7a68693          	addi	a3,a3,-1414 # 8002b168 <.L__unnamed_20>
    8001c6f6:	18a8                	addi	a0,sp,120
    8001c6f8:	4605                	li	a2,1
    8001c6fa:	4701                	li	a4,0
    8001c6fc:	fffe9097          	auipc	ra,0xfffe9
    8001c700:	d38080e7          	jalr	-712(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8001c704:	a009                	j	8001c706 <.LBB5_17+0x18>
    8001c706:	18a8                	addi	a0,sp,120
    8001c708:	00001097          	auipc	ra,0x1
    8001c70c:	4a8080e7          	jalr	1192(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8001c710:	a009                	j	8001c712 <.LBB5_17+0x24>
        self.sem.semaphore_up();
    8001c712:	7526                	ld	a0,104(sp)
    8001c714:	00000097          	auipc	ra,0x0
    8001c718:	d76080e7          	jalr	-650(ra) # 8001c48a <_ZN6kernel3ipc9semaphore9semaphore12semaphore_up17h776c4e5603b34918E>
    8001c71c:	a009                	j	8001c71e <.LBB5_17+0x30>
        if self.sem.get_value() > 0{
    8001c71e:	7526                	ld	a0,104(sp)
    8001c720:	00000097          	auipc	ra,0x0
    8001c724:	dc8080e7          	jalr	-568(ra) # 8001c4e8 <_ZN6kernel3ipc9semaphore9semaphore9get_value17ha36354007f7a90a5E>
    8001c728:	2501                	sext.w	a0,a0
    8001c72a:	f0aa                	sd	a0,96(sp)
    8001c72c:	a009                	j	8001c72e <.LBB5_17+0x40>
    8001c72e:	7506                	ld	a0,96(sp)
    8001c730:	4585                	li	a1,1
    8001c732:	00b54a63          	blt	a0,a1,8001c746 <.LBB5_17+0x58>
    8001c736:	a009                	j	8001c738 <.LBB5_17+0x4a>
            let sem_guard = self.sem.sem_lock.acquire();
    8001c738:	7526                	ld	a0,104(sp)
    8001c73a:	ffff4097          	auipc	ra,0xffff4
    8001c73e:	efa080e7          	jalr	-262(ra) # 80010634 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    8001c742:	f52a                	sd	a0,168(sp)
    8001c744:	a011                	j	8001c748 <.LBB5_17+0x5a>
        if self.sem.get_value() > 0{
    8001c746:	a8e5                	j	8001c83e <.LBB5_23+0x32>
            unsafe {
                PROC_MANAGER.wake_up(&self.sem as *const _ as usize);
    8001c748:	75a6                	ld	a1,104(sp)

000000008001c74a <.LBB5_18>:
    8001c74a:	0003b517          	auipc	a0,0x3b
    8001c74e:	e5650513          	addi	a0,a0,-426 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    8001c752:	ffff1097          	auipc	ra,0xffff1
    8001c756:	0fc080e7          	jalr	252(ra) # 8000d84e <_ZN6kernel7process7manager11ProcManager7wake_up17ha46b4d15ac07187bE>
    8001c75a:	a009                	j	8001c75c <.LBB5_18+0x12>
            }
            println!("wake up in semaphore.rs {} {} {} {}", &self.id, &self.sem.cnt, &self.sem as *const _ as usize, &sem_guard as *const _ as usize);
    8001c75c:	7526                	ld	a0,104(sp)
    8001c75e:	02850593          	addi	a1,a0,40
    8001c762:	e2ae                	sd	a1,320(sp)
    8001c764:	02050593          	addi	a1,a0,32
    8001c768:	e6ae                	sd	a1,328(sp)
    8001c76a:	eaaa                	sd	a0,336(sp)
    8001c76c:	1128                	addi	a0,sp,168
    8001c76e:	eeaa                	sd	a0,344(sp)
    8001c770:	0288                	addi	a0,sp,320
    8001c772:	f22a                	sd	a0,288(sp)
    8001c774:	02b4                	addi	a3,sp,328
    8001c776:	fc36                	sd	a3,56(sp)
    8001c778:	f636                	sd	a3,296(sp)
    8001c77a:	0a90                	addi	a2,sp,336
    8001c77c:	e0b2                	sd	a2,64(sp)
    8001c77e:	fa32                	sd	a2,304(sp)
    8001c780:	0aac                	addi	a1,sp,344
    8001c782:	e4ae                	sd	a1,72(sp)
    8001c784:	fe2e                	sd	a1,312(sp)
    8001c786:	f6aa                	sd	a0,360(sp)
    8001c788:	fab6                	sd	a3,368(sp)
    8001c78a:	feb2                	sd	a2,376(sp)
    8001c78c:	e32e                	sd	a1,384(sp)

000000008001c78e <.LBB5_19>:
    8001c78e:	00002597          	auipc	a1,0x2
    8001c792:	c6c58593          	addi	a1,a1,-916 # 8001e3fa <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h3baa88b0b8ed59b0E>
    8001c796:	00002097          	auipc	ra,0x2
    8001c79a:	cc8080e7          	jalr	-824(ra) # 8001e45e <_ZN4core3fmt10ArgumentV13new17h4cc7035953f043f8E>
    8001c79e:	e8aa                	sd	a0,80(sp)
    8001c7a0:	ecae                	sd	a1,88(sp)
    8001c7a2:	a009                	j	8001c7a4 <.LBB5_19+0x16>
    8001c7a4:	7562                	ld	a0,56(sp)

000000008001c7a6 <.LBB5_20>:
    8001c7a6:	00002597          	auipc	a1,0x2
    8001c7aa:	c5458593          	addi	a1,a1,-940 # 8001e3fa <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h3baa88b0b8ed59b0E>
    8001c7ae:	00002097          	auipc	ra,0x2
    8001c7b2:	cb0080e7          	jalr	-848(ra) # 8001e45e <_ZN4core3fmt10ArgumentV13new17h4cc7035953f043f8E>
    8001c7b6:	f42a                	sd	a0,40(sp)
    8001c7b8:	f82e                	sd	a1,48(sp)
    8001c7ba:	a009                	j	8001c7bc <.LBB5_20+0x16>
    8001c7bc:	6506                	ld	a0,64(sp)

000000008001c7be <.LBB5_21>:
    8001c7be:	00008597          	auipc	a1,0x8
    8001c7c2:	09a58593          	addi	a1,a1,154 # 80024858 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h9c6c4af1578f7c29E>
    8001c7c6:	00003097          	auipc	ra,0x3
    8001c7ca:	d60080e7          	jalr	-672(ra) # 8001f526 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    8001c7ce:	ec2a                	sd	a0,24(sp)
    8001c7d0:	f02e                	sd	a1,32(sp)
    8001c7d2:	a009                	j	8001c7d4 <.LBB5_21+0x16>
    8001c7d4:	6526                	ld	a0,72(sp)

000000008001c7d6 <.LBB5_22>:
    8001c7d6:	00008597          	auipc	a1,0x8
    8001c7da:	08258593          	addi	a1,a1,130 # 80024858 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h9c6c4af1578f7c29E>
    8001c7de:	00003097          	auipc	ra,0x3
    8001c7e2:	d48080e7          	jalr	-696(ra) # 8001f526 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    8001c7e6:	e42a                	sd	a0,8(sp)
    8001c7e8:	e82e                	sd	a1,16(sp)
    8001c7ea:	a009                	j	8001c7ec <.LBB5_22+0x16>
    8001c7ec:	6542                	ld	a0,16(sp)
    8001c7ee:	65a2                	ld	a1,8(sp)
    8001c7f0:	7602                	ld	a2,32(sp)
    8001c7f2:	66e2                	ld	a3,24(sp)
    8001c7f4:	7742                	ld	a4,48(sp)
    8001c7f6:	77a2                	ld	a5,40(sp)
    8001c7f8:	6866                	ld	a6,88(sp)
    8001c7fa:	68c6                	ld	a7,80(sp)
    8001c7fc:	f1c6                	sd	a7,224(sp)
    8001c7fe:	f5c2                	sd	a6,232(sp)
    8001c800:	f9be                	sd	a5,240(sp)
    8001c802:	fdba                	sd	a4,248(sp)
    8001c804:	e236                	sd	a3,256(sp)
    8001c806:	e632                	sd	a2,264(sp)
    8001c808:	ea2e                	sd	a1,272(sp)
    8001c80a:	ee2a                	sd	a0,280(sp)

000000008001c80c <.LBB5_23>:
    8001c80c:	0000f597          	auipc	a1,0xf
    8001c810:	aec58593          	addi	a1,a1,-1300 # 8002b2f8 <.L__unnamed_10>
    8001c814:	1908                	addi	a0,sp,176
    8001c816:	4615                	li	a2,5
    8001c818:	1194                	addi	a3,sp,224
    8001c81a:	4711                	li	a4,4
    8001c81c:	fffe9097          	auipc	ra,0xfffe9
    8001c820:	c18080e7          	jalr	-1000(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8001c824:	a009                	j	8001c826 <.LBB5_23+0x1a>
    8001c826:	1908                	addi	a0,sp,176
    8001c828:	00001097          	auipc	ra,0x1
    8001c82c:	388080e7          	jalr	904(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8001c830:	a009                	j	8001c832 <.LBB5_23+0x26>
    8001c832:	1128                	addi	a0,sp,168
            // println!("SEM_MANAGER in sem_down {}",unsafe{&SEM_MANAGER.sems as *const _ as usize});
        }
    8001c834:	fffea097          	auipc	ra,0xfffea
    8001c838:	796080e7          	jalr	1942(ra) # 80006fca <_ZN4core3ptr74drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$$LP$$RP$$GT$$GT$17he568be727488c8bbE>
    8001c83c:	a009                	j	8001c83e <.LBB5_23+0x32>
    }
    8001c83e:	60ba                	ld	ra,392(sp)
    8001c840:	6159                	addi	sp,sp,400
    8001c842:	8082                	ret

Disassembly of section .text._ZN6kernel3ipc9semaphore8SemTable5alloc17he7093796e56d9652E:

000000008001c844 <_ZN6kernel3ipc9semaphore8SemTable5alloc17he7093796e56d9652E>:
        // Self{
        //     sems: semsTmp,
        //     st_lock: Spinlock::new((), "st_lock")
        // }
    }
    pub fn alloc(&mut self) -> i32{
    8001c844:	712d                	addi	sp,sp,-288
    8001c846:	ee06                	sd	ra,280(sp)
    8001c848:	e4aa                	sd	a0,72(sp)
    8001c84a:	f5aa                	sd	a0,232(sp)

000000008001c84c <.LBB6_21>:
        println!("sem alloc");
    8001c84c:	0000f597          	auipc	a1,0xf
    8001c850:	b1458593          	addi	a1,a1,-1260 # 8002b360 <.L__unnamed_11>

000000008001c854 <.LBB6_22>:
    8001c854:	0000f697          	auipc	a3,0xf
    8001c858:	91468693          	addi	a3,a3,-1772 # 8002b168 <.L__unnamed_20>
    8001c85c:	08a8                	addi	a0,sp,88
    8001c85e:	4605                	li	a2,1
    8001c860:	4701                	li	a4,0
    8001c862:	fffe9097          	auipc	ra,0xfffe9
    8001c866:	bd2080e7          	jalr	-1070(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8001c86a:	a009                	j	8001c86c <.LBB6_22+0x18>
    8001c86c:	08a8                	addi	a0,sp,88
    8001c86e:	00001097          	auipc	ra,0x1
    8001c872:	342080e7          	jalr	834(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8001c876:	a009                	j	8001c878 <.LBB6_22+0x24>
    8001c878:	6526                	ld	a0,72(sp)
    8001c87a:	6589                	lui	a1,0x2
    8001c87c:	8005859b          	addiw	a1,a1,-2048
        let st_guard = self.st_lock.acquire();
    8001c880:	952e                	add	a0,a0,a1
    8001c882:	ffff4097          	auipc	ra,0xffff4
    8001c886:	db2080e7          	jalr	-590(ra) # 80010634 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    8001c88a:	85aa                	mv	a1,a0
    8001c88c:	e0ae                	sd	a1,64(sp)
    8001c88e:	f9aa                	sd	a0,240(sp)
    8001c890:	a009                	j	8001c892 <.LBB6_22+0x3e>
    8001c892:	6526                	ld	a0,72(sp)
    8001c894:	4581                	li	a1,0
        let mut resId = 0;
    8001c896:	caae                	sw	a1,84(sp)
    8001c898:	08000593          	li	a1,128
        for sem in self.sems.iter_mut(){
    8001c89c:	00001097          	auipc	ra,0x1
    8001c8a0:	d88080e7          	jalr	-632(ra) # 8001d624 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17hdf73a8173be099ebE>
    8001c8a4:	f82a                	sd	a0,48(sp)
    8001c8a6:	fc2e                	sd	a1,56(sp)
    8001c8a8:	a009                	j	8001c8aa <.LBB6_22+0x56>
    8001c8aa:	75e2                	ld	a1,56(sp)
    8001c8ac:	7542                	ld	a0,48(sp)
    8001c8ae:	fffee097          	auipc	ra,0xfffee
    8001c8b2:	72e080e7          	jalr	1838(ra) # 8000afdc <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17had1f1a546667c559E>
    8001c8b6:	f02a                	sd	a0,32(sp)
    8001c8b8:	f42e                	sd	a1,40(sp)
    8001c8ba:	a009                	j	8001c8bc <.LBB6_22+0x68>
    8001c8bc:	7522                	ld	a0,40(sp)
    8001c8be:	7582                	ld	a1,32(sp)
    8001c8c0:	e52e                	sd	a1,136(sp)
    8001c8c2:	e92a                	sd	a0,144(sp)
    8001c8c4:	a009                	j	8001c8c6 <.LBB6_22+0x72>
    8001c8c6:	0128                	addi	a0,sp,136
    8001c8c8:	fffef097          	auipc	ra,0xfffef
    8001c8cc:	aac080e7          	jalr	-1364(ra) # 8000b374 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he7c6aa33b7e64d1cE>
    8001c8d0:	ed2a                	sd	a0,152(sp)
    8001c8d2:	a009                	j	8001c8d4 <.LBB6_22+0x80>
    8001c8d4:	656a                	ld	a0,152(sp)
    8001c8d6:	00a035b3          	snez	a1,a0
    8001c8da:	4581                	li	a1,0
    8001c8dc:	00b50463          	beq	a0,a1,8001c8e4 <.LBB6_22+0x90>
    8001c8e0:	a009                	j	8001c8e2 <.LBB6_22+0x8e>
    8001c8e2:	a019                	j	8001c8e8 <.LBB6_22+0x94>
    8001c8e4:	a045                	j	8001c984 <.LBB6_24+0x28>
    8001c8e6:	0000                	unimp
    8001c8e8:	656a                	ld	a0,152(sp)
    8001c8ea:	ec2a                	sd	a0,24(sp)
    8001c8ec:	fdaa                	sd	a0,248(sp)
    8001c8ee:	e22a                	sd	a0,256(sp)
    8001c8f0:	e62a                	sd	a0,264(sp)
            if sem.used == false{
    8001c8f2:	02c54503          	lbu	a0,44(a0)
    8001c8f6:	8905                	andi	a0,a0,1
    8001c8f8:	e115                	bnez	a0,8001c91c <.LBB6_22+0xc8>
    8001c8fa:	a009                	j	8001c8fc <.LBB6_22+0xa8>
    8001c8fc:	6662                	ld	a2,24(sp)
    8001c8fe:	6526                	ld	a0,72(sp)
    8001c900:	6589                	lui	a1,0x2
    8001c902:	8205859b          	addiw	a1,a1,-2016
                sem.id = self.semID;
    8001c906:	952e                	add	a0,a0,a1
    8001c908:	410c                	lw	a1,0(a0)
    8001c90a:	d60c                	sw	a1,40(a2)
                self.semID += 1;
    8001c90c:	4108                	lw	a0,0(a0)
    8001c90e:	00150593          	addi	a1,a0,1
    8001c912:	e82e                	sd	a1,16(sp)
    8001c914:	2505                	addiw	a0,a0,1
    8001c916:	08b51163          	bne	a0,a1,8001c998 <.LBB6_25>
    8001c91a:	a011                	j	8001c91e <.LBB6_22+0xca>
        for sem in self.sems.iter_mut(){
    8001c91c:	b76d                	j	8001c8c6 <.LBB6_22+0x72>
    8001c91e:	65e2                	ld	a1,24(sp)
    8001c920:	6542                	ld	a0,16(sp)
    8001c922:	6626                	ld	a2,72(sp)
    8001c924:	6689                	lui	a3,0x2
    8001c926:	8206869b          	addiw	a3,a3,-2016
                self.semID += 1;
    8001c92a:	9636                	add	a2,a2,a3
    8001c92c:	c208                	sw	a0,0(a2)
                resId = sem.id;
    8001c92e:	5588                	lw	a0,40(a1)
    8001c930:	caaa                	sw	a0,84(sp)
    8001c932:	4505                	li	a0,1
                sem.used = true;
    8001c934:	02a58623          	sb	a0,44(a1) # 202c <.Lline_table_start0+0x18>
    8001c938:	08c8                	addi	a0,sp,84

                println!("alloc in semaphore.rs, find one unused {}", resId);
    8001c93a:	f1aa                	sd	a0,224(sp)
    8001c93c:	ea2a                	sd	a0,272(sp)

000000008001c93e <.LBB6_23>:
    8001c93e:	00008597          	auipc	a1,0x8
    8001c942:	b8258593          	addi	a1,a1,-1150 # 800244c0 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17h1b385cecfac82c6bE>
    8001c946:	00002097          	auipc	ra,0x2
    8001c94a:	b5c080e7          	jalr	-1188(ra) # 8001e4a2 <_ZN4core3fmt10ArgumentV13new17h64cb168c9af0caf2E>
    8001c94e:	e02a                	sd	a0,0(sp)
    8001c950:	e42e                	sd	a1,8(sp)
    8001c952:	a009                	j	8001c954 <.LBB6_23+0x16>
    8001c954:	6522                	ld	a0,8(sp)
    8001c956:	6582                	ld	a1,0(sp)
    8001c958:	e9ae                	sd	a1,208(sp)
    8001c95a:	edaa                	sd	a0,216(sp)

000000008001c95c <.LBB6_24>:
    8001c95c:	0000f597          	auipc	a1,0xf
    8001c960:	a5458593          	addi	a1,a1,-1452 # 8002b3b0 <.L__unnamed_12>
    8001c964:	1108                	addi	a0,sp,160
    8001c966:	4609                	li	a2,2
    8001c968:	0994                	addi	a3,sp,208
    8001c96a:	4705                	li	a4,1
    8001c96c:	fffe9097          	auipc	ra,0xfffe9
    8001c970:	ac8080e7          	jalr	-1336(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8001c974:	a009                	j	8001c976 <.LBB6_24+0x1a>
    8001c976:	1108                	addi	a0,sp,160
    8001c978:	00001097          	auipc	ra,0x1
    8001c97c:	238080e7          	jalr	568(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8001c980:	a009                	j	8001c982 <.LBB6_24+0x26>
    8001c982:	a009                	j	8001c984 <.LBB6_24+0x28>
                break;
            }
        }
        drop(st_guard);
    8001c984:	6506                	ld	a0,64(sp)
    8001c986:	00000097          	auipc	ra,0x0
    8001c98a:	4e4080e7          	jalr	1252(ra) # 8001ce6a <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    8001c98e:	a009                	j	8001c990 <.LBB6_24+0x34>
        resId
    }
    8001c990:	4556                	lw	a0,84(sp)
    8001c992:	60f2                	ld	ra,280(sp)
    8001c994:	6115                	addi	sp,sp,288
    8001c996:	8082                	ret

000000008001c998 <.LBB6_25>:
                self.semID += 1;
    8001c998:	0000f517          	auipc	a0,0xf
    8001c99c:	84850513          	addi	a0,a0,-1976 # 8002b1e0 <str.1>

000000008001c9a0 <.LBB6_26>:
    8001c9a0:	0000f617          	auipc	a2,0xf
    8001c9a4:	9d060613          	addi	a2,a2,-1584 # 8002b370 <.L__unnamed_13>
    8001c9a8:	45f1                	li	a1,28
    8001c9aa:	00005097          	auipc	ra,0x5
    8001c9ae:	752080e7          	jalr	1874(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel3ipc9semaphore8SemTable3get17h969ea55db514a2ceE:

000000008001c9b4 <_ZN6kernel3ipc9semaphore8SemTable3get17h969ea55db514a2ceE>:

    pub fn get(&mut self, id: i32) -> i32{
    8001c9b4:	712d                	addi	sp,sp,-288
    8001c9b6:	ee06                	sd	ra,280(sp)
    8001c9b8:	862a                	mv	a2,a0
    8001c9ba:	fc32                	sd	a2,56(sp)
    8001c9bc:	0005851b          	sext.w	a0,a1
    8001c9c0:	86ae                	mv	a3,a1
    8001c9c2:	e0b6                	sd	a3,64(sp)
    8001c9c4:	f5b2                	sd	a2,232(sp)
    8001c9c6:	dbae                	sw	a1,244(sp)
    8001c9c8:	55fd                	li	a1,-1
        
        if id == -1{
    8001c9ca:	02b51363          	bne	a0,a1,8001c9f0 <.LBB7_21+0x18>
    8001c9ce:	a009                	j	8001c9d0 <.LBB7_20>

000000008001c9d0 <.LBB7_20>:
            println!("sem alloc in semaphore.rs");
    8001c9d0:	0000f597          	auipc	a1,0xf
    8001c9d4:	a5858593          	addi	a1,a1,-1448 # 8002b428 <.L__unnamed_14>

000000008001c9d8 <.LBB7_21>:
    8001c9d8:	0000e697          	auipc	a3,0xe
    8001c9dc:	79068693          	addi	a3,a3,1936 # 8002b168 <.L__unnamed_20>
    8001c9e0:	0888                	addi	a0,sp,80
    8001c9e2:	4605                	li	a2,1
    8001c9e4:	4701                	li	a4,0
    8001c9e6:	fffe9097          	auipc	ra,0xfffe9
    8001c9ea:	a4e080e7          	jalr	-1458(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8001c9ee:	a839                	j	8001ca0c <.LBB7_21+0x34>
    8001c9f0:	7562                	ld	a0,56(sp)
    8001c9f2:	4585                	li	a1,1
    8001c9f4:	1582                	slli	a1,a1,0x20
    8001c9f6:	15fd                	addi	a1,a1,-1
            self.alloc()
        }else{
            let mut res = -1;
    8001c9f8:	c32e                	sw	a1,132(sp)
    8001c9fa:	08000593          	li	a1,128
            for sem in self.sems.iter_mut(){
    8001c9fe:	00001097          	auipc	ra,0x1
    8001ca02:	c26080e7          	jalr	-986(ra) # 8001d624 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17hdf73a8173be099ebE>
    8001ca06:	f42a                	sd	a0,40(sp)
    8001ca08:	f82e                	sd	a1,48(sp)
    8001ca0a:	a831                	j	8001ca26 <.LBB7_21+0x4e>
    8001ca0c:	0888                	addi	a0,sp,80
            println!("sem alloc in semaphore.rs");
    8001ca0e:	00001097          	auipc	ra,0x1
    8001ca12:	1a2080e7          	jalr	418(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8001ca16:	a009                	j	8001ca18 <.LBB7_21+0x40>
            self.alloc()
    8001ca18:	7562                	ld	a0,56(sp)
    8001ca1a:	00000097          	auipc	ra,0x0
    8001ca1e:	e2a080e7          	jalr	-470(ra) # 8001c844 <_ZN6kernel3ipc9semaphore8SemTable5alloc17he7093796e56d9652E>
    8001ca22:	c6aa                	sw	a0,76(sp)
    8001ca24:	a075                	j	8001cad0 <.LBB7_23+0x2c>
            for sem in self.sems.iter_mut(){
    8001ca26:	75c2                	ld	a1,48(sp)
    8001ca28:	7522                	ld	a0,40(sp)
    8001ca2a:	fffee097          	auipc	ra,0xfffee
    8001ca2e:	5b2080e7          	jalr	1458(ra) # 8000afdc <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17had1f1a546667c559E>
    8001ca32:	ec2a                	sd	a0,24(sp)
    8001ca34:	f02e                	sd	a1,32(sp)
    8001ca36:	a009                	j	8001ca38 <.LBB7_21+0x60>
    8001ca38:	7502                	ld	a0,32(sp)
    8001ca3a:	65e2                	ld	a1,24(sp)
    8001ca3c:	e52e                	sd	a1,136(sp)
    8001ca3e:	e92a                	sd	a0,144(sp)
    8001ca40:	a009                	j	8001ca42 <.LBB7_21+0x6a>
    8001ca42:	0128                	addi	a0,sp,136
    8001ca44:	fffef097          	auipc	ra,0xfffef
    8001ca48:	930080e7          	jalr	-1744(ra) # 8000b374 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he7c6aa33b7e64d1cE>
    8001ca4c:	ed2a                	sd	a0,152(sp)
    8001ca4e:	a009                	j	8001ca50 <.LBB7_21+0x78>
    8001ca50:	656a                	ld	a0,152(sp)
    8001ca52:	00a035b3          	snez	a1,a0
    8001ca56:	4581                	li	a1,0
    8001ca58:	00b50463          	beq	a0,a1,8001ca60 <.LBB7_21+0x88>
    8001ca5c:	a009                	j	8001ca5e <.LBB7_21+0x86>
    8001ca5e:	a005                	j	8001ca7e <.LBB7_22+0x18>
    8001ca60:	0148                	addi	a0,sp,132
                if sem.id == id{
                    res = id;
                }
            }
            println!("sem get in semaphore.rs {}", res);
    8001ca62:	f1aa                	sd	a0,224(sp)
    8001ca64:	ea2a                	sd	a0,272(sp)

000000008001ca66 <.LBB7_22>:
    8001ca66:	00008597          	auipc	a1,0x8
    8001ca6a:	a5a58593          	addi	a1,a1,-1446 # 800244c0 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17h1b385cecfac82c6bE>
    8001ca6e:	00002097          	auipc	ra,0x2
    8001ca72:	a34080e7          	jalr	-1484(ra) # 8001e4a2 <_ZN4core3fmt10ArgumentV13new17h64cb168c9af0caf2E>
    8001ca76:	e42a                	sd	a0,8(sp)
    8001ca78:	e82e                	sd	a1,16(sp)
    8001ca7a:	a00d                	j	8001ca9c <.LBB7_22+0x36>
            for sem in self.sems.iter_mut(){
    8001ca7c:	0000                	unimp
    8001ca7e:	6586                	ld	a1,64(sp)
    8001ca80:	656a                	ld	a0,152(sp)
    8001ca82:	fdaa                	sd	a0,248(sp)
    8001ca84:	e22a                	sd	a0,256(sp)
    8001ca86:	e62a                	sd	a0,264(sp)
                if sem.id == id{
    8001ca88:	5508                	lw	a0,40(a0)
    8001ca8a:	2581                	sext.w	a1,a1
    8001ca8c:	00b51663          	bne	a0,a1,8001ca98 <.LBB7_22+0x32>
    8001ca90:	a009                	j	8001ca92 <.LBB7_22+0x2c>
                    res = id;
    8001ca92:	6506                	ld	a0,64(sp)
    8001ca94:	c32a                	sw	a0,132(sp)
                if sem.id == id{
    8001ca96:	a011                	j	8001ca9a <.LBB7_22+0x34>
    8001ca98:	a009                	j	8001ca9a <.LBB7_22+0x34>
            for sem in self.sems.iter_mut(){
    8001ca9a:	b765                	j	8001ca42 <.LBB7_21+0x6a>
            println!("sem get in semaphore.rs {}", res);
    8001ca9c:	6542                	ld	a0,16(sp)
    8001ca9e:	65a2                	ld	a1,8(sp)
    8001caa0:	e9ae                	sd	a1,208(sp)
    8001caa2:	edaa                	sd	a0,216(sp)

000000008001caa4 <.LBB7_23>:
    8001caa4:	0000f597          	auipc	a1,0xf
    8001caa8:	94458593          	addi	a1,a1,-1724 # 8002b3e8 <.L__unnamed_15>
    8001caac:	1108                	addi	a0,sp,160
    8001caae:	4609                	li	a2,2
    8001cab0:	0994                	addi	a3,sp,208
    8001cab2:	4705                	li	a4,1
    8001cab4:	fffe9097          	auipc	ra,0xfffe9
    8001cab8:	980080e7          	jalr	-1664(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8001cabc:	a009                	j	8001cabe <.LBB7_23+0x1a>
    8001cabe:	1108                	addi	a0,sp,160
    8001cac0:	00001097          	auipc	ra,0x1
    8001cac4:	0f0080e7          	jalr	240(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8001cac8:	a009                	j	8001caca <.LBB7_23+0x26>
            res
    8001caca:	451a                	lw	a0,132(sp)
    8001cacc:	c6aa                	sw	a0,76(sp)
        if id == -1{
    8001cace:	a009                	j	8001cad0 <.LBB7_23+0x2c>
        }
    }
    8001cad0:	4536                	lw	a0,76(sp)
    8001cad2:	60f2                	ld	ra,280(sp)
    8001cad4:	6115                	addi	sp,sp,288
    8001cad6:	8082                	ret

Disassembly of section .text._ZN6kernel3ipc9semaphore8SemTable3put17hf81380ccacc98283E:

000000008001cad8 <_ZN6kernel3ipc9semaphore8SemTable3put17hf81380ccacc98283E>:

    pub fn put(&mut self, id: i32) -> i32{
    8001cad8:	7131                	addi	sp,sp,-192
    8001cada:	fd06                	sd	ra,184(sp)
    8001cadc:	f82a                	sd	a0,48(sp)
    8001cade:	862e                	mv	a2,a1
    8001cae0:	fc32                	sd	a2,56(sp)
    8001cae2:	e92a                	sd	a0,144(sp)
    8001cae4:	cf2e                	sw	a1,156(sp)

000000008001cae6 <.LBB8_14>:
        println!("sem put");
    8001cae6:	0000f597          	auipc	a1,0xf
    8001caea:	95258593          	addi	a1,a1,-1710 # 8002b438 <.L__unnamed_16>

000000008001caee <.LBB8_15>:
    8001caee:	0000e697          	auipc	a3,0xe
    8001caf2:	67a68693          	addi	a3,a3,1658 # 8002b168 <.L__unnamed_20>
    8001caf6:	00a8                	addi	a0,sp,72
    8001caf8:	4605                	li	a2,1
    8001cafa:	4701                	li	a4,0
    8001cafc:	fffe9097          	auipc	ra,0xfffe9
    8001cb00:	938080e7          	jalr	-1736(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8001cb04:	a009                	j	8001cb06 <.LBB8_15+0x18>
    8001cb06:	00a8                	addi	a0,sp,72
    8001cb08:	00001097          	auipc	ra,0x1
    8001cb0c:	0a8080e7          	jalr	168(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8001cb10:	a009                	j	8001cb12 <.LBB8_15+0x24>
    8001cb12:	7542                	ld	a0,48(sp)
    8001cb14:	4585                	li	a1,1
    8001cb16:	1582                	slli	a1,a1,0x20
    8001cb18:	15fd                	addi	a1,a1,-1
        let mut res = -1;
    8001cb1a:	c2ae                	sw	a1,68(sp)
    8001cb1c:	08000593          	li	a1,128
        for sem in self.sems.iter_mut(){
    8001cb20:	00001097          	auipc	ra,0x1
    8001cb24:	b04080e7          	jalr	-1276(ra) # 8001d624 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17hdf73a8173be099ebE>
    8001cb28:	f02a                	sd	a0,32(sp)
    8001cb2a:	f42e                	sd	a1,40(sp)
    8001cb2c:	a009                	j	8001cb2e <.LBB8_15+0x40>
    8001cb2e:	75a2                	ld	a1,40(sp)
    8001cb30:	7502                	ld	a0,32(sp)
    8001cb32:	fffee097          	auipc	ra,0xfffee
    8001cb36:	4aa080e7          	jalr	1194(ra) # 8000afdc <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17had1f1a546667c559E>
    8001cb3a:	e82a                	sd	a0,16(sp)
    8001cb3c:	ec2e                	sd	a1,24(sp)
    8001cb3e:	a009                	j	8001cb40 <.LBB8_15+0x52>
    8001cb40:	6562                	ld	a0,24(sp)
    8001cb42:	65c2                	ld	a1,16(sp)
    8001cb44:	fcae                	sd	a1,120(sp)
    8001cb46:	e12a                	sd	a0,128(sp)
    8001cb48:	a009                	j	8001cb4a <.LBB8_15+0x5c>
    8001cb4a:	18a8                	addi	a0,sp,120
    8001cb4c:	fffef097          	auipc	ra,0xfffef
    8001cb50:	828080e7          	jalr	-2008(ra) # 8000b374 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he7c6aa33b7e64d1cE>
    8001cb54:	e52a                	sd	a0,136(sp)
    8001cb56:	a009                	j	8001cb58 <.LBB8_15+0x6a>
    8001cb58:	652a                	ld	a0,136(sp)
    8001cb5a:	00a035b3          	snez	a1,a0
    8001cb5e:	4581                	li	a1,0
    8001cb60:	00b50463          	beq	a0,a1,8001cb68 <.LBB8_15+0x7a>
    8001cb64:	a009                	j	8001cb66 <.LBB8_15+0x78>
    8001cb66:	a031                	j	8001cb72 <.LBB8_15+0x84>
                sem.used = false;
                res = 0;
            }
        }
        res
    }
    8001cb68:	4516                	lw	a0,68(sp)
    8001cb6a:	70ea                	ld	ra,184(sp)
    8001cb6c:	6129                	addi	sp,sp,192
    8001cb6e:	8082                	ret
        for sem in self.sems.iter_mut(){
    8001cb70:	0000                	unimp
    8001cb72:	75e2                	ld	a1,56(sp)
    8001cb74:	652a                	ld	a0,136(sp)
    8001cb76:	e42a                	sd	a0,8(sp)
    8001cb78:	f12a                	sd	a0,160(sp)
    8001cb7a:	f52a                	sd	a0,168(sp)
    8001cb7c:	f92a                	sd	a0,176(sp)
            if sem.id == id{
    8001cb7e:	5508                	lw	a0,40(a0)
    8001cb80:	2581                	sext.w	a1,a1
    8001cb82:	00b51963          	bne	a0,a1,8001cb94 <.LBB8_15+0xa6>
    8001cb86:	a009                	j	8001cb88 <.LBB8_15+0x9a>
    8001cb88:	65a2                	ld	a1,8(sp)
    8001cb8a:	4501                	li	a0,0
                sem.used = false;
    8001cb8c:	02a58623          	sb	a0,44(a1)
                res = 0;
    8001cb90:	c2aa                	sw	a0,68(sp)
            if sem.id == id{
    8001cb92:	a011                	j	8001cb96 <.LBB8_15+0xa8>
    8001cb94:	a009                	j	8001cb96 <.LBB8_15+0xa8>
        for sem in self.sems.iter_mut(){
    8001cb96:	bf55                	j	8001cb4a <.LBB8_15+0x5c>

Disassembly of section .text._ZN6kernel3ipc9semaphore8SemTable10getSemById17hc45b63cab7252ea2E:

000000008001cb98 <_ZN6kernel3ipc9semaphore8SemTable10getSemById17hc45b63cab7252ea2E>:

    pub fn getSemById(&mut self, id: i32) -> Option<&mut sem_t>{
    8001cb98:	716d                	addi	sp,sp,-272
    8001cb9a:	e606                	sd	ra,264(sp)
    8001cb9c:	fc2a                	sd	a0,56(sp)
    8001cb9e:	c2ae                	sw	a1,68(sp)
    8001cba0:	f1aa                	sd	a0,224(sp)

000000008001cba2 <.LBB9_17>:
        println!("sem find");
    8001cba2:	0000f597          	auipc	a1,0xf
    8001cba6:	8b658593          	addi	a1,a1,-1866 # 8002b458 <.L__unnamed_17>

000000008001cbaa <.LBB9_18>:
    8001cbaa:	0000e697          	auipc	a3,0xe
    8001cbae:	5be68693          	addi	a3,a3,1470 # 8002b168 <.L__unnamed_20>
    8001cbb2:	0888                	addi	a0,sp,80
    8001cbb4:	4605                	li	a2,1
    8001cbb6:	4701                	li	a4,0
    8001cbb8:	fffe9097          	auipc	ra,0xfffe9
    8001cbbc:	87c080e7          	jalr	-1924(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8001cbc0:	a009                	j	8001cbc2 <.LBB9_18+0x18>
    8001cbc2:	0888                	addi	a0,sp,80
    8001cbc4:	00001097          	auipc	ra,0x1
    8001cbc8:	fec080e7          	jalr	-20(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8001cbcc:	a009                	j	8001cbce <.LBB9_18+0x24>
        // let mut semRes: &mut sem_t;
        for sem in self.sems.iter_mut(){
    8001cbce:	7562                	ld	a0,56(sp)
    8001cbd0:	08000593          	li	a1,128
    8001cbd4:	00001097          	auipc	ra,0x1
    8001cbd8:	a50080e7          	jalr	-1456(ra) # 8001d624 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17hdf73a8173be099ebE>
    8001cbdc:	f42a                	sd	a0,40(sp)
    8001cbde:	f82e                	sd	a1,48(sp)
    8001cbe0:	a009                	j	8001cbe2 <.LBB9_18+0x38>
    8001cbe2:	75c2                	ld	a1,48(sp)
    8001cbe4:	7522                	ld	a0,40(sp)
    8001cbe6:	fffee097          	auipc	ra,0xfffee
    8001cbea:	3f6080e7          	jalr	1014(ra) # 8000afdc <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17had1f1a546667c559E>
    8001cbee:	ec2a                	sd	a0,24(sp)
    8001cbf0:	f02e                	sd	a1,32(sp)
    8001cbf2:	a009                	j	8001cbf4 <.LBB9_18+0x4a>
    8001cbf4:	7502                	ld	a0,32(sp)
    8001cbf6:	65e2                	ld	a1,24(sp)
    8001cbf8:	e12e                	sd	a1,128(sp)
    8001cbfa:	e52a                	sd	a0,136(sp)
    8001cbfc:	a009                	j	8001cbfe <.LBB9_18+0x54>
    8001cbfe:	0108                	addi	a0,sp,128
    8001cc00:	fffee097          	auipc	ra,0xfffee
    8001cc04:	774080e7          	jalr	1908(ra) # 8000b374 <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he7c6aa33b7e64d1cE>
    8001cc08:	e92a                	sd	a0,144(sp)
    8001cc0a:	a009                	j	8001cc0c <.LBB9_18+0x62>
    8001cc0c:	654a                	ld	a0,144(sp)
    8001cc0e:	00a035b3          	snez	a1,a0
    8001cc12:	4581                	li	a1,0
    8001cc14:	00b50463          	beq	a0,a1,8001cc1c <.LBB9_18+0x72>
    8001cc18:	a009                	j	8001cc1a <.LBB9_18+0x70>
    8001cc1a:	a029                	j	8001cc24 <.LBB9_18+0x7a>
    8001cc1c:	4501                	li	a0,0
            if sem.id == id{
                println!("sem find !!!!{}", id);
                return Some(sem)
            }
        }
        None
    8001cc1e:	e4aa                	sd	a0,72(sp)
    }
    8001cc20:	a0ad                	j	8001cc8a <.LBB9_20+0x2c>
        for sem in self.sems.iter_mut(){
    8001cc22:	0000                	unimp
    8001cc24:	654a                	ld	a0,144(sp)
    8001cc26:	e82a                	sd	a0,16(sp)
    8001cc28:	f5aa                	sd	a0,232(sp)
    8001cc2a:	f9aa                	sd	a0,240(sp)
    8001cc2c:	fdaa                	sd	a0,248(sp)
            if sem.id == id{
    8001cc2e:	5508                	lw	a0,40(a0)
    8001cc30:	4596                	lw	a1,68(sp)
    8001cc32:	02b51163          	bne	a0,a1,8001cc54 <.LBB9_19+0x16>
    8001cc36:	a009                	j	8001cc38 <.LBB9_18+0x8e>
    8001cc38:	00c8                	addi	a0,sp,68
                println!("sem find !!!!{}", id);
    8001cc3a:	edaa                	sd	a0,216(sp)
    8001cc3c:	e22a                	sd	a0,256(sp)

000000008001cc3e <.LBB9_19>:
    8001cc3e:	00008597          	auipc	a1,0x8
    8001cc42:	88258593          	addi	a1,a1,-1918 # 800244c0 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17h1b385cecfac82c6bE>
    8001cc46:	00002097          	auipc	ra,0x2
    8001cc4a:	85c080e7          	jalr	-1956(ra) # 8001e4a2 <_ZN4core3fmt10ArgumentV13new17h64cb168c9af0caf2E>
    8001cc4e:	e02a                	sd	a0,0(sp)
    8001cc50:	e42e                	sd	a1,8(sp)
    8001cc52:	a011                	j	8001cc56 <.LBB9_19+0x18>
        for sem in self.sems.iter_mut(){
    8001cc54:	b76d                	j	8001cbfe <.LBB9_18+0x54>
                println!("sem find !!!!{}", id);
    8001cc56:	6522                	ld	a0,8(sp)
    8001cc58:	6582                	ld	a1,0(sp)
    8001cc5a:	e5ae                	sd	a1,200(sp)
    8001cc5c:	e9aa                	sd	a0,208(sp)

000000008001cc5e <.LBB9_20>:
    8001cc5e:	0000f597          	auipc	a1,0xf
    8001cc62:	81a58593          	addi	a1,a1,-2022 # 8002b478 <.L__unnamed_18>
    8001cc66:	0928                	addi	a0,sp,152
    8001cc68:	4609                	li	a2,2
    8001cc6a:	01b4                	addi	a3,sp,200
    8001cc6c:	4705                	li	a4,1
    8001cc6e:	fffe8097          	auipc	ra,0xfffe8
    8001cc72:	7c6080e7          	jalr	1990(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8001cc76:	a009                	j	8001cc78 <.LBB9_20+0x1a>
    8001cc78:	0928                	addi	a0,sp,152
    8001cc7a:	00001097          	auipc	ra,0x1
    8001cc7e:	f36080e7          	jalr	-202(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8001cc82:	a009                	j	8001cc84 <.LBB9_20+0x26>
                return Some(sem)
    8001cc84:	6542                	ld	a0,16(sp)
    8001cc86:	e4aa                	sd	a0,72(sp)
    }
    8001cc88:	a009                	j	8001cc8a <.LBB9_20+0x2c>
    8001cc8a:	6526                	ld	a0,72(sp)
    8001cc8c:	60b2                	ld	ra,264(sp)
    8001cc8e:	6151                	addi	sp,sp,272
    8001cc90:	8082                	ret

Disassembly of section .text._ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hc0b1197304dd53e6E:

000000008001cc92 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hc0b1197304dd53e6E>:
    pub const fn as_ptr(&self) -> *const T {
    8001cc92:	1141                	addi	sp,sp,-16
    8001cc94:	e02a                	sd	a0,0(sp)
    8001cc96:	e42e                	sd	a1,8(sp)
    }
    8001cc98:	0141                	addi	sp,sp,16
    8001cc9a:	8082                	ret

Disassembly of section .text._ZN105_$LT$core..iter..adapters..step_by..StepBy$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h04f2168711040ee1E:

000000008001cc9c <_ZN105_$LT$core..iter..adapters..step_by..StepBy$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h04f2168711040ee1E>:
    I: Iterator,
{
    type Item = I::Item;

    #[inline]
    fn next(&mut self) -> Option<Self::Item> {
    8001cc9c:	1101                	addi	sp,sp,-32
    8001cc9e:	ec06                	sd	ra,24(sp)
    8001cca0:	e02a                	sd	a0,0(sp)
    8001cca2:	e82a                	sd	a0,16(sp)
        if self.first_take {
    8001cca4:	01054503          	lbu	a0,16(a0)
    8001cca8:	8905                	andi	a0,a0,1
    8001ccaa:	4581                	li	a1,0
    8001ccac:	00b50f63          	beq	a0,a1,8001ccca <_ZN105_$LT$core..iter..adapters..step_by..StepBy$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h04f2168711040ee1E+0x2e>
    8001ccb0:	a009                	j	8001ccb2 <_ZN105_$LT$core..iter..adapters..step_by..StepBy$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h04f2168711040ee1E+0x16>
    8001ccb2:	6502                	ld	a0,0(sp)
    8001ccb4:	4581                	li	a1,0
            self.first_take = false;
    8001ccb6:	00b50823          	sb	a1,16(a0)
            self.iter.next()
    8001ccba:	0521                	addi	a0,a0,8
    8001ccbc:	fffef097          	auipc	ra,0xfffef
    8001ccc0:	b72080e7          	jalr	-1166(ra) # 8000b82e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17he2f0092c6efc86cdE>
    8001ccc4:	c42a                	sw	a0,8(sp)
    8001ccc6:	c62e                	sw	a1,12(sp)
    8001ccc8:	a821                	j	8001cce0 <_ZN105_$LT$core..iter..adapters..step_by..StepBy$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h04f2168711040ee1E+0x44>
        } else {
            self.iter.nth(self.step)
    8001ccca:	6582                	ld	a1,0(sp)
    8001cccc:	00858513          	addi	a0,a1,8
    8001ccd0:	618c                	ld	a1,0(a1)
    8001ccd2:	fffef097          	auipc	ra,0xfffef
    8001ccd6:	9f6080e7          	jalr	-1546(ra) # 8000b6c8 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h3de1e189a1a61c83E>
    8001ccda:	c42a                	sw	a0,8(sp)
    8001ccdc:	c62e                	sw	a1,12(sp)
    8001ccde:	a011                	j	8001cce2 <_ZN105_$LT$core..iter..adapters..step_by..StepBy$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h04f2168711040ee1E+0x46>
        if self.first_take {
    8001cce0:	a011                	j	8001cce4 <_ZN105_$LT$core..iter..adapters..step_by..StepBy$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h04f2168711040ee1E+0x48>
    8001cce2:	a009                	j	8001cce4 <_ZN105_$LT$core..iter..adapters..step_by..StepBy$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h04f2168711040ee1E+0x48>
        }
    }
    8001cce4:	4522                	lw	a0,8(sp)
    8001cce6:	45b2                	lw	a1,12(sp)
    8001cce8:	60e2                	ld	ra,24(sp)
    8001ccea:	6105                	addi	sp,sp,32
    8001ccec:	8082                	ret

Disassembly of section .text._ZN105_$LT$core..iter..adapters..step_by..StepBy$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h75ab964dca744767E:

000000008001ccee <_ZN105_$LT$core..iter..adapters..step_by..StepBy$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h75ab964dca744767E>:
    fn next(&mut self) -> Option<Self::Item> {
    8001ccee:	7179                	addi	sp,sp,-48
    8001ccf0:	f406                	sd	ra,40(sp)
    8001ccf2:	e42a                	sd	a0,8(sp)
    8001ccf4:	f02a                	sd	a0,32(sp)
        if self.first_take {
    8001ccf6:	01854503          	lbu	a0,24(a0)
    8001ccfa:	8905                	andi	a0,a0,1
    8001ccfc:	4581                	li	a1,0
    8001ccfe:	00b50e63          	beq	a0,a1,8001cd1a <_ZN105_$LT$core..iter..adapters..step_by..StepBy$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h75ab964dca744767E+0x2c>
    8001cd02:	a009                	j	8001cd04 <_ZN105_$LT$core..iter..adapters..step_by..StepBy$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h75ab964dca744767E+0x16>
    8001cd04:	6522                	ld	a0,8(sp)
    8001cd06:	4581                	li	a1,0
            self.first_take = false;
    8001cd08:	00b50c23          	sb	a1,24(a0)
            self.iter.next()
    8001cd0c:	00003097          	auipc	ra,0x3
    8001cd10:	a4e080e7          	jalr	-1458(ra) # 8001f75a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE>
    8001cd14:	e82a                	sd	a0,16(sp)
    8001cd16:	ec2e                	sd	a1,24(sp)
    8001cd18:	a811                	j	8001cd2c <_ZN105_$LT$core..iter..adapters..step_by..StepBy$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h75ab964dca744767E+0x3e>
            self.iter.nth(self.step)
    8001cd1a:	6522                	ld	a0,8(sp)
    8001cd1c:	690c                	ld	a1,16(a0)
    8001cd1e:	fffef097          	auipc	ra,0xfffef
    8001cd22:	8be080e7          	jalr	-1858(ra) # 8000b5dc <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$3nth17h1068366d302d8741E>
    8001cd26:	e82a                	sd	a0,16(sp)
    8001cd28:	ec2e                	sd	a1,24(sp)
    8001cd2a:	a011                	j	8001cd2e <_ZN105_$LT$core..iter..adapters..step_by..StepBy$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h75ab964dca744767E+0x40>
        if self.first_take {
    8001cd2c:	a011                	j	8001cd30 <_ZN105_$LT$core..iter..adapters..step_by..StepBy$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h75ab964dca744767E+0x42>
    8001cd2e:	a009                	j	8001cd30 <_ZN105_$LT$core..iter..adapters..step_by..StepBy$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h75ab964dca744767E+0x42>
    }
    8001cd30:	6542                	ld	a0,16(sp)
    8001cd32:	65e2                	ld	a1,24(sp)
    8001cd34:	70a2                	ld	ra,40(sp)
    8001cd36:	6145                	addi	sp,sp,48
    8001cd38:	8082                	ret

Disassembly of section .text._ZN4core4iter8adapters7step_by15StepBy$LT$I$GT$3new17h4faa8304472101dfE:

000000008001cd3a <_ZN4core4iter8adapters7step_by15StepBy$LT$I$GT$3new17h4faa8304472101dfE>:
    pub(in crate::iter) fn new(iter: I, step: usize) -> StepBy<I> {
    8001cd3a:	7139                	addi	sp,sp,-64
    8001cd3c:	e436                	sd	a3,8(sp)
    8001cd3e:	e832                	sd	a2,16(sp)
    8001cd40:	ec2e                	sd	a1,24(sp)
    8001cd42:	f02a                	sd	a0,32(sp)
    8001cd44:	f42e                	sd	a1,40(sp)
    8001cd46:	f832                	sd	a2,48(sp)
    8001cd48:	fc36                	sd	a3,56(sp)
    8001cd4a:	4501                	li	a0,0
        assert!(step != 0);
    8001cd4c:	02a69163          	bne	a3,a0,8001cd6e <.LBB2_4+0x14>
    8001cd50:	a009                	j	8001cd52 <.LBB2_3>

000000008001cd52 <.LBB2_3>:
    8001cd52:	0000e517          	auipc	a0,0xe
    8001cd56:	74650513          	addi	a0,a0,1862 # 8002b498 <.L__unnamed_1>

000000008001cd5a <.LBB2_4>:
    8001cd5a:	0000e617          	auipc	a2,0xe
    8001cd5e:	7e660613          	addi	a2,a2,2022 # 8002b540 <.L__unnamed_2>
    8001cd62:	45ed                	li	a1,27
    8001cd64:	00005097          	auipc	ra,0x5
    8001cd68:	398080e7          	jalr	920(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8001cd6c:	0000                	unimp
        StepBy { iter, step: step - 1, first_take: true }
    8001cd6e:	7582                	ld	a1,32(sp)
    8001cd70:	6642                	ld	a2,16(sp)
    8001cd72:	66e2                	ld	a3,24(sp)
    8001cd74:	6522                	ld	a0,8(sp)
    8001cd76:	157d                	addi	a0,a0,-1
    8001cd78:	e194                	sd	a3,0(a1)
    8001cd7a:	e590                	sd	a2,8(a1)
    8001cd7c:	e988                	sd	a0,16(a1)
    8001cd7e:	4505                	li	a0,1
    8001cd80:	00a58c23          	sb	a0,24(a1)
    }
    8001cd84:	6121                	addi	sp,sp,64
    8001cd86:	8082                	ret

Disassembly of section .text._ZN4core4iter8adapters7step_by15StepBy$LT$I$GT$3new17h6692f5ddcbcdc828E:

000000008001cd88 <_ZN4core4iter8adapters7step_by15StepBy$LT$I$GT$3new17h6692f5ddcbcdc828E>:
    pub(in crate::iter) fn new(iter: I, step: usize) -> StepBy<I> {
    8001cd88:	7179                	addi	sp,sp,-48
    8001cd8a:	e036                	sd	a3,0(sp)
    8001cd8c:	e42a                	sd	a0,8(sp)
    8001cd8e:	8532                	mv	a0,a2
    8001cd90:	e82a                	sd	a0,16(sp)
    8001cd92:	852e                	mv	a0,a1
    8001cd94:	ec2a                	sd	a0,24(sp)
    8001cd96:	d02e                	sw	a1,32(sp)
    8001cd98:	d232                	sw	a2,36(sp)
    8001cd9a:	f436                	sd	a3,40(sp)
    8001cd9c:	4501                	li	a0,0
        assert!(step != 0);
    8001cd9e:	02a69163          	bne	a3,a0,8001cdc0 <.LBB3_4+0x14>
    8001cda2:	a009                	j	8001cda4 <.LBB3_3>

000000008001cda4 <.LBB3_3>:
    8001cda4:	0000e517          	auipc	a0,0xe
    8001cda8:	6f450513          	addi	a0,a0,1780 # 8002b498 <.L__unnamed_1>

000000008001cdac <.LBB3_4>:
    8001cdac:	0000e617          	auipc	a2,0xe
    8001cdb0:	79460613          	addi	a2,a2,1940 # 8002b540 <.L__unnamed_2>
    8001cdb4:	45ed                	li	a1,27
    8001cdb6:	00005097          	auipc	ra,0x5
    8001cdba:	346080e7          	jalr	838(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8001cdbe:	0000                	unimp
        StepBy { iter, step: step - 1, first_take: true }
    8001cdc0:	65a2                	ld	a1,8(sp)
    8001cdc2:	6642                	ld	a2,16(sp)
    8001cdc4:	66e2                	ld	a3,24(sp)
    8001cdc6:	6502                	ld	a0,0(sp)
    8001cdc8:	157d                	addi	a0,a0,-1
    8001cdca:	c594                	sw	a3,8(a1)
    8001cdcc:	c5d0                	sw	a2,12(a1)
    8001cdce:	e188                	sd	a0,0(a1)
    8001cdd0:	4505                	li	a0,1
    8001cdd2:	00a58823          	sb	a0,16(a1)
    }
    8001cdd6:	6145                	addi	sp,sp,48
    8001cdd8:	8082                	ret

Disassembly of section .text._ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h09fa161dbb9bcdd3E:

000000008001cdda <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h09fa161dbb9bcdd3E>:
    fn into_iter(self) -> I {
    8001cdda:	1141                	addi	sp,sp,-16
    8001cddc:	e42e                	sd	a1,8(sp)
    8001cdde:	85aa                	mv	a1,a0
        self
    8001cde0:	6522                	ld	a0,8(sp)
    8001cde2:	6910                	ld	a2,16(a0)
    8001cde4:	e990                	sd	a2,16(a1)
    8001cde6:	6510                	ld	a2,8(a0)
    8001cde8:	e590                	sd	a2,8(a1)
    8001cdea:	6108                	ld	a0,0(a0)
    8001cdec:	e188                	sd	a0,0(a1)
    }
    8001cdee:	0141                	addi	sp,sp,16
    8001cdf0:	8082                	ret

Disassembly of section .text._ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h119fa1ab69bc712dE:

000000008001cdf2 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h119fa1ab69bc712dE>:
    fn into_iter(self) -> I {
    8001cdf2:	1141                	addi	sp,sp,-16
    8001cdf4:	e42e                	sd	a1,8(sp)
    8001cdf6:	85aa                	mv	a1,a0
        self
    8001cdf8:	6522                	ld	a0,8(sp)
    8001cdfa:	6d10                	ld	a2,24(a0)
    8001cdfc:	ed90                	sd	a2,24(a1)
    8001cdfe:	6910                	ld	a2,16(a0)
    8001ce00:	e990                	sd	a2,16(a1)
    8001ce02:	6510                	ld	a2,8(a0)
    8001ce04:	e590                	sd	a2,8(a1)
    8001ce06:	6108                	ld	a0,0(a0)
    8001ce08:	e188                	sd	a0,0(a1)
    }
    8001ce0a:	0141                	addi	sp,sp,16
    8001ce0c:	8082                	ret

Disassembly of section .text._ZN4core3mem11size_of_val17hb8db3e1f6e8e8424E:

000000008001ce0e <_ZN4core3mem11size_of_val17hb8db3e1f6e8e8424E>:
pub const fn size_of_val<T: ?Sized>(val: &T) -> usize {
    8001ce0e:	1101                	addi	sp,sp,-32
    8001ce10:	e82a                	sd	a0,16(sp)
    8001ce12:	4521                	li	a0,8
    unsafe { intrinsics::size_of_val(val) }
    8001ce14:	e42a                	sd	a0,8(sp)
    8001ce16:	ec2a                	sd	a0,24(sp)
    8001ce18:	a009                	j	8001ce1a <_ZN4core3mem11size_of_val17hb8db3e1f6e8e8424E+0xc>
}
    8001ce1a:	6522                	ld	a0,8(sp)
    8001ce1c:	6105                	addi	sp,sp,32
    8001ce1e:	8082                	ret

Disassembly of section .text._ZN4core3mem15size_of_val_raw17h1bfec9c80578f181E:

000000008001ce20 <_ZN4core3mem15size_of_val_raw17h1bfec9c80578f181E>:
pub const unsafe fn size_of_val_raw<T: ?Sized>(val: *const T) -> usize {
    8001ce20:	1101                	addi	sp,sp,-32
    8001ce22:	e82a                	sd	a0,16(sp)
    8001ce24:	04800513          	li	a0,72
    unsafe { intrinsics::size_of_val(val) }
    8001ce28:	e42a                	sd	a0,8(sp)
    8001ce2a:	ec2a                	sd	a0,24(sp)
    8001ce2c:	a009                	j	8001ce2e <_ZN4core3mem15size_of_val_raw17h1bfec9c80578f181E+0xe>
}
    8001ce2e:	6522                	ld	a0,8(sp)
    8001ce30:	6105                	addi	sp,sp,32
    8001ce32:	8082                	ret

Disassembly of section .text._ZN4core3mem16align_of_val_raw17hadcb67548ac99edfE:

000000008001ce34 <_ZN4core3mem16align_of_val_raw17hadcb67548ac99edfE>:
/// assert_eq!(4, unsafe { mem::align_of_val_raw(&5i32) });
/// ```
#[inline]
#[unstable(feature = "layout_for_ptr", issue = "69835")]
#[rustc_const_unstable(feature = "const_align_of_val_raw", issue = "46571")]
pub const unsafe fn align_of_val_raw<T: ?Sized>(val: *const T) -> usize {
    8001ce34:	1101                	addi	sp,sp,-32
    8001ce36:	e82a                	sd	a0,16(sp)
    8001ce38:	4521                	li	a0,8
    // SAFETY: the caller must provide a valid raw pointer
    unsafe { intrinsics::min_align_of_val(val) }
    8001ce3a:	e42a                	sd	a0,8(sp)
    8001ce3c:	ec2a                	sd	a0,24(sp)
    8001ce3e:	a009                	j	8001ce40 <_ZN4core3mem16align_of_val_raw17hadcb67548ac99edfE+0xc>
}
    8001ce40:	6522                	ld	a0,8(sp)
    8001ce42:	6105                	addi	sp,sp,32
    8001ce44:	8082                	ret

Disassembly of section .text._ZN4core3mem4drop17h0a31045cd6ca0c7bE:

000000008001ce46 <_ZN4core3mem4drop17h0a31045cd6ca0c7bE>:
///
/// [`RefCell`]: crate::cell::RefCell
#[doc(alias = "delete")]
#[inline]
#[stable(feature = "rust1", since = "1.0.0")]
pub fn drop<T>(_x: T) {}
    8001ce46:	1141                	addi	sp,sp,-16
    8001ce48:	00a107a3          	sb	a0,15(sp)
    8001ce4c:	a009                	j	8001ce4e <_ZN4core3mem4drop17h0a31045cd6ca0c7bE+0x8>
    8001ce4e:	0141                	addi	sp,sp,16
    8001ce50:	8082                	ret

Disassembly of section .text._ZN4core3mem4drop17h0acc999538dd9281E:

000000008001ce52 <_ZN4core3mem4drop17h0acc999538dd9281E>:
    8001ce52:	1141                	addi	sp,sp,-16
    8001ce54:	e406                	sd	ra,8(sp)
    8001ce56:	e02a                	sd	a0,0(sp)
    8001ce58:	850a                	mv	a0,sp
    8001ce5a:	fffea097          	auipc	ra,0xfffea
    8001ce5e:	124080e7          	jalr	292(ra) # 80006f7e <_ZN4core3ptr71drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$usize$GT$$GT$17h978f142a914ddf2eE>
    8001ce62:	a009                	j	8001ce64 <_ZN4core3mem4drop17h0acc999538dd9281E+0x12>
    8001ce64:	60a2                	ld	ra,8(sp)
    8001ce66:	0141                	addi	sp,sp,16
    8001ce68:	8082                	ret

Disassembly of section .text._ZN4core3mem4drop17h10f52240d03cf3b6E:

000000008001ce6a <_ZN4core3mem4drop17h10f52240d03cf3b6E>:
    8001ce6a:	1141                	addi	sp,sp,-16
    8001ce6c:	e406                	sd	ra,8(sp)
    8001ce6e:	e02a                	sd	a0,0(sp)
    8001ce70:	850a                	mv	a0,sp
    8001ce72:	fffea097          	auipc	ra,0xfffea
    8001ce76:	158080e7          	jalr	344(ra) # 80006fca <_ZN4core3ptr74drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$$LP$$RP$$GT$$GT$17he568be727488c8bbE>
    8001ce7a:	a009                	j	8001ce7c <_ZN4core3mem4drop17h10f52240d03cf3b6E+0x12>
    8001ce7c:	60a2                	ld	ra,8(sp)
    8001ce7e:	0141                	addi	sp,sp,16
    8001ce80:	8082                	ret

Disassembly of section .text._ZN4core3mem4drop17h2d4fb87a733eb04aE:

000000008001ce82 <_ZN4core3mem4drop17h2d4fb87a733eb04aE>:
    8001ce82:	1141                	addi	sp,sp,-16
    8001ce84:	e406                	sd	ra,8(sp)
    8001ce86:	e02a                	sd	a0,0(sp)
    8001ce88:	850a                	mv	a0,sp
    8001ce8a:	fffea097          	auipc	ra,0xfffea
    8001ce8e:	f44080e7          	jalr	-188(ra) # 80006dce <_ZN4core3ptr116drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$$u5b$kernel..fs..inode..InodeMeta$u3b$$u20$50$u5d$$GT$$GT$17h4e8573cf3b362114E>
    8001ce92:	a009                	j	8001ce94 <_ZN4core3mem4drop17h2d4fb87a733eb04aE+0x12>
    8001ce94:	60a2                	ld	ra,8(sp)
    8001ce96:	0141                	addi	sp,sp,16
    8001ce98:	8082                	ret

Disassembly of section .text._ZN4core3mem4drop17h2ed300707c7d4096E:

000000008001ce9a <_ZN4core3mem4drop17h2ed300707c7d4096E>:
    8001ce9a:	1141                	addi	sp,sp,-16
    8001ce9c:	e406                	sd	ra,8(sp)
    8001ce9e:	e02a                	sd	a0,0(sp)
    8001cea0:	850a                	mv	a0,sp
    8001cea2:	fffea097          	auipc	ra,0xfffea
    8001cea6:	222080e7          	jalr	546(ra) # 800070c4 <_ZN4core3ptr98drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..driver..console..Console$GT$$GT$17hbea8b3b0221deadaE>
    8001ceaa:	a009                	j	8001ceac <_ZN4core3mem4drop17h2ed300707c7d4096E+0x12>
    8001ceac:	60a2                	ld	ra,8(sp)
    8001ceae:	0141                	addi	sp,sp,16
    8001ceb0:	8082                	ret

Disassembly of section .text._ZN4core3mem4drop17h3f96085e4daee3c2E:

000000008001ceb2 <_ZN4core3mem4drop17h3f96085e4daee3c2E>:
    8001ceb2:	1101                	addi	sp,sp,-32
    8001ceb4:	ec06                	sd	ra,24(sp)
    8001ceb6:	e42a                	sd	a0,8(sp)
    8001ceb8:	e82e                	sd	a1,16(sp)
    8001ceba:	0028                	addi	a0,sp,8
    8001cebc:	fffea097          	auipc	ra,0xfffea
    8001cec0:	1f2080e7          	jalr	498(ra) # 800070ae <_ZN4core3ptr96drop_in_place$LT$kernel..lock..sleeplock..SleepLockGuard$LT$kernel..fs..inode..InodeData$GT$$GT$17h00d5c02cf687ef41E>
    8001cec4:	a009                	j	8001cec6 <_ZN4core3mem4drop17h3f96085e4daee3c2E+0x14>
    8001cec6:	60e2                	ld	ra,24(sp)
    8001cec8:	6105                	addi	sp,sp,32
    8001ceca:	8082                	ret

Disassembly of section .text._ZN4core3mem4drop17h4200387821e72e60E:

000000008001cecc <_ZN4core3mem4drop17h4200387821e72e60E>:
    8001cecc:	1141                	addi	sp,sp,-16
    8001cece:	e406                	sd	ra,8(sp)
    8001ced0:	e02a                	sd	a0,0(sp)
    8001ced2:	850a                	mv	a0,sp
    8001ced4:	fffea097          	auipc	ra,0xfffea
    8001ced8:	094080e7          	jalr	148(ra) # 80006f68 <_ZN4core3ptr69drop_in_place$LT$alloc..sync..Weak$LT$kernel..fs..file..VFile$GT$$GT$17hfcb3bca0be736df8E>
    8001cedc:	a009                	j	8001cede <_ZN4core3mem4drop17h4200387821e72e60E+0x12>
    8001cede:	60a2                	ld	ra,8(sp)
    8001cee0:	0141                	addi	sp,sp,16
    8001cee2:	8082                	ret

Disassembly of section .text._ZN4core3mem4drop17h66bc7e80d0a41b3aE:

000000008001cee4 <_ZN4core3mem4drop17h66bc7e80d0a41b3aE>:
    8001cee4:	1141                	addi	sp,sp,-16
    8001cee6:	e406                	sd	ra,8(sp)
    8001cee8:	fffea097          	auipc	ra,0xfffea
    8001ceec:	0bc080e7          	jalr	188(ra) # 80006fa4 <_ZN4core3ptr73drop_in_place$LT$core..option..Option$LT$kernel..fs..inode..Inode$GT$$GT$17h6a7b3b84406d6cdfE>
    8001cef0:	a009                	j	8001cef2 <_ZN4core3mem4drop17h66bc7e80d0a41b3aE+0xe>
    8001cef2:	60a2                	ld	ra,8(sp)
    8001cef4:	0141                	addi	sp,sp,16
    8001cef6:	8082                	ret

Disassembly of section .text._ZN4core3mem4drop17h82526bd482ef36a5E:

000000008001cef8 <_ZN4core3mem4drop17h82526bd482ef36a5E>:
    8001cef8:	1141                	addi	sp,sp,-16
    8001cefa:	e406                	sd	ra,8(sp)
    8001cefc:	e02a                	sd	a0,0(sp)
    8001cefe:	850a                	mv	a0,sp
    8001cf00:	fffea097          	auipc	ra,0xfffea
    8001cf04:	148080e7          	jalr	328(ra) # 80007048 <_ZN4core3ptr89drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..fs..bio..BufLru$GT$$GT$17h9c86fb58887d325bE>
    8001cf08:	a009                	j	8001cf0a <_ZN4core3mem4drop17h82526bd482ef36a5E+0x12>
    8001cf0a:	60a2                	ld	ra,8(sp)
    8001cf0c:	0141                	addi	sp,sp,16
    8001cf0e:	8082                	ret

Disassembly of section .text._ZN4core3mem4drop17h8377f059e38e21aaE:

000000008001cf10 <_ZN4core3mem4drop17h8377f059e38e21aaE>:
    8001cf10:	1101                	addi	sp,sp,-32
    8001cf12:	ec06                	sd	ra,24(sp)
    8001cf14:	e42a                	sd	a0,8(sp)
    8001cf16:	e82e                	sd	a1,16(sp)
    8001cf18:	0028                	addi	a0,sp,8
    8001cf1a:	fffea097          	auipc	ra,0xfffea
    8001cf1e:	f30080e7          	jalr	-208(ra) # 80006e4a <_ZN4core3ptr120drop_in_place$LT$core..option..Option$LT$kernel..lock..sleeplock..SleepLockGuard$LT$kernel..fs..bio..BufData$GT$$GT$$GT$17hc3cb66b90ce8c8e9E>
    8001cf22:	a009                	j	8001cf24 <_ZN4core3mem4drop17h8377f059e38e21aaE+0x14>
    8001cf24:	60e2                	ld	ra,24(sp)
    8001cf26:	6105                	addi	sp,sp,32
    8001cf28:	8082                	ret

Disassembly of section .text._ZN4core3mem4drop17h96fc0e7c88170ba8E:

000000008001cf2a <_ZN4core3mem4drop17h96fc0e7c88170ba8E>:
    8001cf2a:	1141                	addi	sp,sp,-16
    8001cf2c:	e406                	sd	ra,8(sp)
    8001cf2e:	e02a                	sd	a0,0(sp)
    8001cf30:	850a                	mv	a0,sp
    8001cf32:	fffea097          	auipc	ra,0xfffea
    8001cf36:	142080e7          	jalr	322(ra) # 80007074 <_ZN4core3ptr92drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..driver..uart..Uart$GT$$GT$17h4785ee23048b5bddE>
    8001cf3a:	a009                	j	8001cf3c <_ZN4core3mem4drop17h96fc0e7c88170ba8E+0x12>
    8001cf3c:	60a2                	ld	ra,8(sp)
    8001cf3e:	0141                	addi	sp,sp,16
    8001cf40:	8082                	ret

Disassembly of section .text._ZN4core3mem4drop17ha184dbcd1a83d607E:

000000008001cf42 <_ZN4core3mem4drop17ha184dbcd1a83d607E>:
    8001cf42:	1141                	addi	sp,sp,-16
    8001cf44:	e42a                	sd	a0,8(sp)
    8001cf46:	a009                	j	8001cf48 <_ZN4core3mem4drop17ha184dbcd1a83d607E+0x6>
    8001cf48:	0141                	addi	sp,sp,16
    8001cf4a:	8082                	ret

Disassembly of section .text._ZN4core3mem4drop17ha75bac042eb9b458E:

000000008001cf4c <_ZN4core3mem4drop17ha75bac042eb9b458E>:
    8001cf4c:	1141                	addi	sp,sp,-16
    8001cf4e:	e42a                	sd	a0,8(sp)
    8001cf50:	a009                	j	8001cf52 <_ZN4core3mem4drop17ha75bac042eb9b458E+0x6>
    8001cf52:	0141                	addi	sp,sp,16
    8001cf54:	8082                	ret

Disassembly of section .text._ZN4core3mem4drop17haa2d2dc72bd2e81bE:

000000008001cf56 <_ZN4core3mem4drop17haa2d2dc72bd2e81bE>:
    8001cf56:	1141                	addi	sp,sp,-16
    8001cf58:	e406                	sd	ra,8(sp)
    8001cf5a:	e02a                	sd	a0,0(sp)
    8001cf5c:	850a                	mv	a0,sp
    8001cf5e:	fffea097          	auipc	ra,0xfffea
    8001cf62:	0be080e7          	jalr	190(ra) # 8000701c <_ZN4core3ptr86drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..fs..log..Log$GT$$GT$17h3ff4d5b7fa89905aE>
    8001cf66:	a009                	j	8001cf68 <_ZN4core3mem4drop17haa2d2dc72bd2e81bE+0x12>
    8001cf68:	60a2                	ld	ra,8(sp)
    8001cf6a:	0141                	addi	sp,sp,16
    8001cf6c:	8082                	ret

Disassembly of section .text._ZN4core3mem4drop17hb93abdfe16b94be5E:

000000008001cf6e <_ZN4core3mem4drop17hb93abdfe16b94be5E>:
    8001cf6e:	7179                	addi	sp,sp,-48
    8001cf70:	f406                	sd	ra,40(sp)
    8001cf72:	e82a                	sd	a0,16(sp)
    8001cf74:	ec2e                	sd	a1,24(sp)
    8001cf76:	e02a                	sd	a0,0(sp)
    8001cf78:	e42e                	sd	a1,8(sp)
    8001cf7a:	850a                	mv	a0,sp
    8001cf7c:	fffea097          	auipc	ra,0xfffea
    8001cf80:	f5e080e7          	jalr	-162(ra) # 80006eda <_ZN4core3ptr45drop_in_place$LT$kernel..fs..inode..Inode$GT$17h8786fe1a2a287832E>
    8001cf84:	a009                	j	8001cf86 <_ZN4core3mem4drop17hb93abdfe16b94be5E+0x18>
    8001cf86:	70a2                	ld	ra,40(sp)
    8001cf88:	6145                	addi	sp,sp,48
    8001cf8a:	8082                	ret

Disassembly of section .text._ZN4core3mem4drop17hda1e19029436deb9E:

000000008001cf8c <_ZN4core3mem4drop17hda1e19029436deb9E>:
    8001cf8c:	1141                	addi	sp,sp,-16
    8001cf8e:	e406                	sd	ra,8(sp)
    8001cf90:	fffea097          	auipc	ra,0xfffea
    8001cf94:	ef6080e7          	jalr	-266(ra) # 80006e86 <_ZN4core3ptr41drop_in_place$LT$kernel..fs..bio..Buf$GT$17hc35967244f3e9eb6E>
    8001cf98:	a009                	j	8001cf9a <_ZN4core3mem4drop17hda1e19029436deb9E+0xe>
    8001cf9a:	60a2                	ld	ra,8(sp)
    8001cf9c:	0141                	addi	sp,sp,16
    8001cf9e:	8082                	ret

Disassembly of section .text._ZN4core3mem4drop17he1c2696149894a05E:

000000008001cfa0 <_ZN4core3mem4drop17he1c2696149894a05E>:
    8001cfa0:	1141                	addi	sp,sp,-16
    8001cfa2:	e42a                	sd	a0,8(sp)
    8001cfa4:	a009                	j	8001cfa6 <_ZN4core3mem4drop17he1c2696149894a05E+0x6>
    8001cfa6:	0141                	addi	sp,sp,16
    8001cfa8:	8082                	ret

Disassembly of section .text._ZN4core3mem4drop17hf5d8d4b62719f1bfE:

000000008001cfaa <_ZN4core3mem4drop17hf5d8d4b62719f1bfE>:
    8001cfaa:	1141                	addi	sp,sp,-16
    8001cfac:	e406                	sd	ra,8(sp)
    8001cfae:	e02a                	sd	a0,0(sp)
    8001cfb0:	850a                	mv	a0,sp
    8001cfb2:	fffea097          	auipc	ra,0xfffea
    8001cfb6:	128080e7          	jalr	296(ra) # 800070da <_ZN4core3ptr99drop_in_place$LT$kernel..lock..spinlock..SpinlockGuard$LT$kernel..driver..virtio_disk..Disk$GT$$GT$17h4fc01c278f0bfe6cE>
    8001cfba:	a009                	j	8001cfbc <_ZN4core3mem4drop17hf5d8d4b62719f1bfE+0x12>
    8001cfbc:	60a2                	ld	ra,8(sp)
    8001cfbe:	0141                	addi	sp,sp,16
    8001cfc0:	8082                	ret

Disassembly of section .text._ZN4core3mem4take17h5215bf07db4a9cdbE:

000000008001cfc2 <_ZN4core3mem4take17h5215bf07db4a9cdbE>:
pub fn take<T: Default>(dest: &mut T) -> T {
    8001cfc2:	7179                	addi	sp,sp,-48
    8001cfc4:	f406                	sd	ra,40(sp)
    8001cfc6:	e82a                	sd	a0,16(sp)
    8001cfc8:	f02a                	sd	a0,32(sp)
    replace(dest, T::default())
    8001cfca:	ffff2097          	auipc	ra,0xffff2
    8001cfce:	1ec080e7          	jalr	492(ra) # 8000f1b6 <_ZN72_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..default..Default$GT$7default17h459b0dfcf4f19fffE>
    8001cfd2:	ec2a                	sd	a0,24(sp)
    8001cfd4:	a009                	j	8001cfd6 <_ZN4core3mem4take17h5215bf07db4a9cdbE+0x14>
    8001cfd6:	65e2                	ld	a1,24(sp)
    8001cfd8:	6542                	ld	a0,16(sp)
    8001cfda:	00000097          	auipc	ra,0x0
    8001cfde:	200080e7          	jalr	512(ra) # 8001d1da <_ZN4core3mem7replace17hca19b537819175cbE>
    8001cfe2:	e42a                	sd	a0,8(sp)
    8001cfe4:	a009                	j	8001cfe6 <_ZN4core3mem4take17h5215bf07db4a9cdbE+0x24>
}
    8001cfe6:	6522                	ld	a0,8(sp)
    8001cfe8:	70a2                	ld	ra,40(sp)
    8001cfea:	6145                	addi	sp,sp,48
    8001cfec:	8082                	ret

Disassembly of section .text._ZN4core3mem4take17h9920b9ae1a5c3368E:

000000008001cfee <_ZN4core3mem4take17h9920b9ae1a5c3368E>:
pub fn take<T: Default>(dest: &mut T) -> T {
    8001cfee:	7179                	addi	sp,sp,-48
    8001cff0:	f406                	sd	ra,40(sp)
    8001cff2:	e82a                	sd	a0,16(sp)
    8001cff4:	f02a                	sd	a0,32(sp)
    replace(dest, T::default())
    8001cff6:	ffff2097          	auipc	ra,0xffff2
    8001cffa:	1d6080e7          	jalr	470(ra) # 8000f1cc <_ZN72_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..default..Default$GT$7default17hbc90300349db98aaE>
    8001cffe:	ec2a                	sd	a0,24(sp)
    8001d000:	a009                	j	8001d002 <_ZN4core3mem4take17h9920b9ae1a5c3368E+0x14>
    8001d002:	65e2                	ld	a1,24(sp)
    8001d004:	6542                	ld	a0,16(sp)
    8001d006:	00000097          	auipc	ra,0x0
    8001d00a:	23a080e7          	jalr	570(ra) # 8001d240 <_ZN4core3mem7replace17hfd1d9a060b66fcb5E>
    8001d00e:	e42a                	sd	a0,8(sp)
    8001d010:	a009                	j	8001d012 <_ZN4core3mem4take17h9920b9ae1a5c3368E+0x24>
}
    8001d012:	6522                	ld	a0,8(sp)
    8001d014:	70a2                	ld	ra,40(sp)
    8001d016:	6145                	addi	sp,sp,48
    8001d018:	8082                	ret

Disassembly of section .text._ZN4core3mem4take17ha20fa5de2e41ca09E:

000000008001d01a <_ZN4core3mem4take17ha20fa5de2e41ca09E>:
pub fn take<T: Default>(dest: &mut T) -> T {
    8001d01a:	7139                	addi	sp,sp,-64
    8001d01c:	fc06                	sd	ra,56(sp)
    8001d01e:	ec2a                	sd	a0,24(sp)
    8001d020:	f82a                	sd	a0,48(sp)
    replace(dest, T::default())
    8001d022:	ffff2097          	auipc	ra,0xffff2
    8001d026:	188080e7          	jalr	392(ra) # 8000f1aa <_ZN72_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..default..Default$GT$7default17h216c24bc3f109328E>
    8001d02a:	f02a                	sd	a0,32(sp)
    8001d02c:	f42e                	sd	a1,40(sp)
    8001d02e:	a009                	j	8001d030 <_ZN4core3mem4take17ha20fa5de2e41ca09E+0x16>
    8001d030:	7622                	ld	a2,40(sp)
    8001d032:	7582                	ld	a1,32(sp)
    8001d034:	6562                	ld	a0,24(sp)
    8001d036:	00000097          	auipc	ra,0x0
    8001d03a:	0ee080e7          	jalr	238(ra) # 8001d124 <_ZN4core3mem7replace17hb9aa9fb859d8f738E>
    8001d03e:	e42a                	sd	a0,8(sp)
    8001d040:	e82e                	sd	a1,16(sp)
    8001d042:	a009                	j	8001d044 <_ZN4core3mem4take17ha20fa5de2e41ca09E+0x2a>
}
    8001d044:	65c2                	ld	a1,16(sp)
    8001d046:	6522                	ld	a0,8(sp)
    8001d048:	70e2                	ld	ra,56(sp)
    8001d04a:	6121                	addi	sp,sp,64
    8001d04c:	8082                	ret

Disassembly of section .text._ZN4core3mem4take17ha8b178c6c6bab41fE:

000000008001d04e <_ZN4core3mem4take17ha8b178c6c6bab41fE>:
pub fn take<T: Default>(dest: &mut T) -> T {
    8001d04e:	7139                	addi	sp,sp,-64
    8001d050:	fc06                	sd	ra,56(sp)
    8001d052:	ec2a                	sd	a0,24(sp)
    8001d054:	f82a                	sd	a0,48(sp)
    replace(dest, T::default())
    8001d056:	ffff2097          	auipc	ra,0xffff2
    8001d05a:	16a080e7          	jalr	362(ra) # 8000f1c0 <_ZN72_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..default..Default$GT$7default17h9e7fcea49a91f0edE>
    8001d05e:	f02a                	sd	a0,32(sp)
    8001d060:	f42e                	sd	a1,40(sp)
    8001d062:	a009                	j	8001d064 <_ZN4core3mem4take17ha8b178c6c6bab41fE+0x16>
    8001d064:	7622                	ld	a2,40(sp)
    8001d066:	7582                	ld	a1,32(sp)
    8001d068:	6562                	ld	a0,24(sp)
    8001d06a:	00000097          	auipc	ra,0x0
    8001d06e:	130080e7          	jalr	304(ra) # 8001d19a <_ZN4core3mem7replace17hbfb2af9a98f5ad51E>
    8001d072:	e42a                	sd	a0,8(sp)
    8001d074:	e82e                	sd	a1,16(sp)
    8001d076:	a009                	j	8001d078 <_ZN4core3mem4take17ha8b178c6c6bab41fE+0x2a>
}
    8001d078:	65c2                	ld	a1,16(sp)
    8001d07a:	6522                	ld	a0,8(sp)
    8001d07c:	70e2                	ld	ra,56(sp)
    8001d07e:	6121                	addi	sp,sp,64
    8001d080:	8082                	ret

Disassembly of section .text._ZN4core3mem7replace17h1967adb5d4092576E:

000000008001d082 <_ZN4core3mem7replace17h1967adb5d4092576E>:
pub const fn replace<T>(dest: &mut T, src: T) -> T {
    8001d082:	7179                	addi	sp,sp,-48
    8001d084:	f406                	sd	ra,40(sp)
    8001d086:	e02a                	sd	a0,0(sp)
    8001d088:	862e                	mv	a2,a1
    8001d08a:	e432                	sd	a2,8(sp)
    8001d08c:	ec2a                	sd	a0,24(sp)
    8001d08e:	02b10323          	sb	a1,38(sp)
        let result = ptr::read(dest);
    8001d092:	ffffb097          	auipc	ra,0xffffb
    8001d096:	600080e7          	jalr	1536(ra) # 80018692 <_ZN4core3ptr4read17he855cc26728788dfE>
    8001d09a:	85aa                	mv	a1,a0
    8001d09c:	e82e                	sd	a1,16(sp)
    8001d09e:	02a103a3          	sb	a0,39(sp)
    8001d0a2:	a009                	j	8001d0a4 <_ZN4core3mem7replace17h1967adb5d4092576E+0x22>
        ptr::write(dest, src);
    8001d0a4:	65a2                	ld	a1,8(sp)
    8001d0a6:	6502                	ld	a0,0(sp)
    8001d0a8:	ffffb097          	auipc	ra,0xffffb
    8001d0ac:	69c080e7          	jalr	1692(ra) # 80018744 <_ZN4core3ptr5write17h25ba6e811e5fd451E>
    8001d0b0:	a009                	j	8001d0b2 <_ZN4core3mem7replace17h1967adb5d4092576E+0x30>
}
    8001d0b2:	6542                	ld	a0,16(sp)
    8001d0b4:	70a2                	ld	ra,40(sp)
    8001d0b6:	6145                	addi	sp,sp,48
    8001d0b8:	8082                	ret

Disassembly of section .text._ZN4core3mem7replace17h57a15db6942c9267E:

000000008001d0ba <_ZN4core3mem7replace17h57a15db6942c9267E>:
pub const fn replace<T>(dest: &mut T, src: T) -> T {
    8001d0ba:	7179                	addi	sp,sp,-48
    8001d0bc:	f406                	sd	ra,40(sp)
    8001d0be:	e02a                	sd	a0,0(sp)
    8001d0c0:	862e                	mv	a2,a1
    8001d0c2:	e432                	sd	a2,8(sp)
    8001d0c4:	ec2a                	sd	a0,24(sp)
    8001d0c6:	02b11223          	sh	a1,36(sp)
        let result = ptr::read(dest);
    8001d0ca:	ffffb097          	auipc	ra,0xffffb
    8001d0ce:	432080e7          	jalr	1074(ra) # 800184fc <_ZN4core3ptr4read17h49d73875721fb0a9E>
    8001d0d2:	85aa                	mv	a1,a0
    8001d0d4:	e82e                	sd	a1,16(sp)
    8001d0d6:	02a11323          	sh	a0,38(sp)
    8001d0da:	a009                	j	8001d0dc <_ZN4core3mem7replace17h57a15db6942c9267E+0x22>
        ptr::write(dest, src);
    8001d0dc:	65a2                	ld	a1,8(sp)
    8001d0de:	6502                	ld	a0,0(sp)
    8001d0e0:	ffffb097          	auipc	ra,0xffffb
    8001d0e4:	690080e7          	jalr	1680(ra) # 80018770 <_ZN4core3ptr5write17h6d43807bf71c562eE>
    8001d0e8:	a009                	j	8001d0ea <_ZN4core3mem7replace17h57a15db6942c9267E+0x30>
}
    8001d0ea:	6542                	ld	a0,16(sp)
    8001d0ec:	70a2                	ld	ra,40(sp)
    8001d0ee:	6145                	addi	sp,sp,48
    8001d0f0:	8082                	ret

Disassembly of section .text._ZN4core3mem7replace17ha3220c9fe59ec441E:

000000008001d0f2 <_ZN4core3mem7replace17ha3220c9fe59ec441E>:
pub const fn replace<T>(dest: &mut T, src: T) -> T {
    8001d0f2:	7139                	addi	sp,sp,-64
    8001d0f4:	fc06                	sd	ra,56(sp)
    8001d0f6:	e42e                	sd	a1,8(sp)
    8001d0f8:	e82a                	sd	a0,16(sp)
    8001d0fa:	f02a                	sd	a0,32(sp)
    8001d0fc:	f42e                	sd	a1,40(sp)
        let result = ptr::read(dest);
    8001d0fe:	ffffb097          	auipc	ra,0xffffb
    8001d102:	498080e7          	jalr	1176(ra) # 80018596 <_ZN4core3ptr4read17hca9a7d22776635f1E>
    8001d106:	85aa                	mv	a1,a0
    8001d108:	ec2e                	sd	a1,24(sp)
    8001d10a:	f82a                	sd	a0,48(sp)
    8001d10c:	a009                	j	8001d10e <_ZN4core3mem7replace17ha3220c9fe59ec441E+0x1c>
        ptr::write(dest, src);
    8001d10e:	65a2                	ld	a1,8(sp)
    8001d110:	6542                	ld	a0,16(sp)
    8001d112:	ffffb097          	auipc	ra,0xffffb
    8001d116:	642080e7          	jalr	1602(ra) # 80018754 <_ZN4core3ptr5write17h4a1d74f50ec6a35fE>
    8001d11a:	a009                	j	8001d11c <_ZN4core3mem7replace17ha3220c9fe59ec441E+0x2a>
}
    8001d11c:	6562                	ld	a0,24(sp)
    8001d11e:	70e2                	ld	ra,56(sp)
    8001d120:	6121                	addi	sp,sp,64
    8001d122:	8082                	ret

Disassembly of section .text._ZN4core3mem7replace17hb9aa9fb859d8f738E:

000000008001d124 <_ZN4core3mem7replace17hb9aa9fb859d8f738E>:
pub const fn replace<T>(dest: &mut T, src: T) -> T {
    8001d124:	711d                	addi	sp,sp,-96
    8001d126:	ec86                	sd	ra,88(sp)
    8001d128:	e432                	sd	a2,8(sp)
    8001d12a:	e82e                	sd	a1,16(sp)
    8001d12c:	ec2a                	sd	a0,24(sp)
    8001d12e:	f82a                	sd	a0,48(sp)
    8001d130:	fc2e                	sd	a1,56(sp)
    8001d132:	e0b2                	sd	a2,64(sp)
        let result = ptr::read(dest);
    8001d134:	ffffb097          	auipc	ra,0xffffb
    8001d138:	488080e7          	jalr	1160(ra) # 800185bc <_ZN4core3ptr4read17hcc58f40f4c4c7a01E>
    8001d13c:	862a                	mv	a2,a0
    8001d13e:	f032                	sd	a2,32(sp)
    8001d140:	862e                	mv	a2,a1
    8001d142:	f432                	sd	a2,40(sp)
    8001d144:	e4aa                	sd	a0,72(sp)
    8001d146:	e8ae                	sd	a1,80(sp)
    8001d148:	a009                	j	8001d14a <_ZN4core3mem7replace17hb9aa9fb859d8f738E+0x26>
        ptr::write(dest, src);
    8001d14a:	6622                	ld	a2,8(sp)
    8001d14c:	65c2                	ld	a1,16(sp)
    8001d14e:	6562                	ld	a0,24(sp)
    8001d150:	ffffb097          	auipc	ra,0xffffb
    8001d154:	610080e7          	jalr	1552(ra) # 80018760 <_ZN4core3ptr5write17h60f767b6e6d7c45aE>
    8001d158:	a009                	j	8001d15a <_ZN4core3mem7replace17hb9aa9fb859d8f738E+0x36>
}
    8001d15a:	75a2                	ld	a1,40(sp)
    8001d15c:	7502                	ld	a0,32(sp)
    8001d15e:	60e6                	ld	ra,88(sp)
    8001d160:	6125                	addi	sp,sp,96
    8001d162:	8082                	ret

Disassembly of section .text._ZN4core3mem7replace17hbc5a7f4d236ddb3dE:

000000008001d164 <_ZN4core3mem7replace17hbc5a7f4d236ddb3dE>:
pub const fn replace<T>(dest: &mut T, src: T) -> T {
    8001d164:	7139                	addi	sp,sp,-64
        let result = ptr::read(dest);
    8001d166:	fc06                	sd	ra,56(sp)
pub const fn replace<T>(dest: &mut T, src: T) -> T {
    8001d168:	e432                	sd	a2,8(sp)
    8001d16a:	e82e                	sd	a1,16(sp)
    8001d16c:	f82e                	sd	a1,48(sp)
        let result = ptr::read(dest);
    8001d16e:	ffffb097          	auipc	ra,0xffffb
    8001d172:	34c080e7          	jalr	844(ra) # 800184ba <_ZN4core3ptr4read17h260501ac2ae68563E>
    8001d176:	a009                	j	8001d178 <_ZN4core3mem7replace17hbc5a7f4d236ddb3dE+0x14>
        ptr::write(dest, src);
    8001d178:	6542                	ld	a0,16(sp)
    8001d17a:	65a2                	ld	a1,8(sp)
    8001d17c:	6990                	ld	a2,16(a1)
    8001d17e:	f432                	sd	a2,40(sp)
    8001d180:	6590                	ld	a2,8(a1)
    8001d182:	f032                	sd	a2,32(sp)
    8001d184:	618c                	ld	a1,0(a1)
    8001d186:	ec2e                	sd	a1,24(sp)
    8001d188:	082c                	addi	a1,sp,24
    8001d18a:	ffffb097          	auipc	ra,0xffffb
    8001d18e:	60e080e7          	jalr	1550(ra) # 80018798 <_ZN4core3ptr5write17hf7c587ba45e12a81E>
    8001d192:	a009                	j	8001d194 <_ZN4core3mem7replace17hbc5a7f4d236ddb3dE+0x30>
}
    8001d194:	70e2                	ld	ra,56(sp)
    8001d196:	6121                	addi	sp,sp,64
    8001d198:	8082                	ret

Disassembly of section .text._ZN4core3mem7replace17hbfb2af9a98f5ad51E:

000000008001d19a <_ZN4core3mem7replace17hbfb2af9a98f5ad51E>:
pub const fn replace<T>(dest: &mut T, src: T) -> T {
    8001d19a:	711d                	addi	sp,sp,-96
    8001d19c:	ec86                	sd	ra,88(sp)
    8001d19e:	e432                	sd	a2,8(sp)
    8001d1a0:	e82e                	sd	a1,16(sp)
    8001d1a2:	ec2a                	sd	a0,24(sp)
    8001d1a4:	f82a                	sd	a0,48(sp)
    8001d1a6:	fc2e                	sd	a1,56(sp)
    8001d1a8:	e0b2                	sd	a2,64(sp)
        let result = ptr::read(dest);
    8001d1aa:	ffffb097          	auipc	ra,0xffffb
    8001d1ae:	520080e7          	jalr	1312(ra) # 800186ca <_ZN4core3ptr4read17hf667e6f53e42adf1E>
    8001d1b2:	862a                	mv	a2,a0
    8001d1b4:	f032                	sd	a2,32(sp)
    8001d1b6:	862e                	mv	a2,a1
    8001d1b8:	f432                	sd	a2,40(sp)
    8001d1ba:	e4aa                	sd	a0,72(sp)
    8001d1bc:	e8ae                	sd	a1,80(sp)
    8001d1be:	a009                	j	8001d1c0 <_ZN4core3mem7replace17hbfb2af9a98f5ad51E+0x26>
        ptr::write(dest, src);
    8001d1c0:	6622                	ld	a2,8(sp)
    8001d1c2:	65c2                	ld	a1,16(sp)
    8001d1c4:	6562                	ld	a0,24(sp)
    8001d1c6:	ffffb097          	auipc	ra,0xffffb
    8001d1ca:	53a080e7          	jalr	1338(ra) # 80018700 <_ZN4core3ptr5write17h0b5f65d949594758E>
    8001d1ce:	a009                	j	8001d1d0 <_ZN4core3mem7replace17hbfb2af9a98f5ad51E+0x36>
}
    8001d1d0:	75a2                	ld	a1,40(sp)
    8001d1d2:	7502                	ld	a0,32(sp)
    8001d1d4:	60e6                	ld	ra,88(sp)
    8001d1d6:	6125                	addi	sp,sp,96
    8001d1d8:	8082                	ret

Disassembly of section .text._ZN4core3mem7replace17hca19b537819175cbE:

000000008001d1da <_ZN4core3mem7replace17hca19b537819175cbE>:
pub const fn replace<T>(dest: &mut T, src: T) -> T {
    8001d1da:	7139                	addi	sp,sp,-64
    8001d1dc:	fc06                	sd	ra,56(sp)
    8001d1de:	e42e                	sd	a1,8(sp)
    8001d1e0:	e82a                	sd	a0,16(sp)
    8001d1e2:	f02a                	sd	a0,32(sp)
    8001d1e4:	f42e                	sd	a1,40(sp)
        let result = ptr::read(dest);
    8001d1e6:	ffffb097          	auipc	ra,0xffffb
    8001d1ea:	384080e7          	jalr	900(ra) # 8001856a <_ZN4core3ptr4read17hbe38e0f78fffdc49E>
    8001d1ee:	85aa                	mv	a1,a0
    8001d1f0:	ec2e                	sd	a1,24(sp)
    8001d1f2:	f82a                	sd	a0,48(sp)
    8001d1f4:	a009                	j	8001d1f6 <_ZN4core3mem7replace17hca19b537819175cbE+0x1c>
        ptr::write(dest, src);
    8001d1f6:	65a2                	ld	a1,8(sp)
    8001d1f8:	6542                	ld	a0,16(sp)
    8001d1fa:	ffffb097          	auipc	ra,0xffffb
    8001d1fe:	586080e7          	jalr	1414(ra) # 80018780 <_ZN4core3ptr5write17h9fb8ab42ff75ed2cE>
    8001d202:	a009                	j	8001d204 <_ZN4core3mem7replace17hca19b537819175cbE+0x2a>
}
    8001d204:	6562                	ld	a0,24(sp)
    8001d206:	70e2                	ld	ra,56(sp)
    8001d208:	6121                	addi	sp,sp,64
    8001d20a:	8082                	ret

Disassembly of section .text._ZN4core3mem7replace17hcd75ca48f5a8a8f5E:

000000008001d20c <_ZN4core3mem7replace17hcd75ca48f5a8a8f5E>:
pub const fn replace<T>(dest: &mut T, src: T) -> T {
    8001d20c:	7179                	addi	sp,sp,-48
    8001d20e:	f406                	sd	ra,40(sp)
    8001d210:	e02a                	sd	a0,0(sp)
    8001d212:	862e                	mv	a2,a1
    8001d214:	e432                	sd	a2,8(sp)
    8001d216:	ec2a                	sd	a0,24(sp)
    8001d218:	d02e                	sw	a1,32(sp)
        let result = ptr::read(dest);
    8001d21a:	ffffb097          	auipc	ra,0xffffb
    8001d21e:	316080e7          	jalr	790(ra) # 80018530 <_ZN4core3ptr4read17h97f5e0e151e0fdc4E>
    8001d222:	85aa                	mv	a1,a0
    8001d224:	e82e                	sd	a1,16(sp)
    8001d226:	d22a                	sw	a0,36(sp)
    8001d228:	a009                	j	8001d22a <_ZN4core3mem7replace17hcd75ca48f5a8a8f5E+0x1e>
        ptr::write(dest, src);
    8001d22a:	65a2                	ld	a1,8(sp)
    8001d22c:	6502                	ld	a0,0(sp)
    8001d22e:	ffffb097          	auipc	ra,0xffffb
    8001d232:	4f2080e7          	jalr	1266(ra) # 80018720 <_ZN4core3ptr5write17h10d6d8799e54bf75E>
    8001d236:	a009                	j	8001d238 <_ZN4core3mem7replace17hcd75ca48f5a8a8f5E+0x2c>
}
    8001d238:	6542                	ld	a0,16(sp)
    8001d23a:	70a2                	ld	ra,40(sp)
    8001d23c:	6145                	addi	sp,sp,48
    8001d23e:	8082                	ret

Disassembly of section .text._ZN4core3mem7replace17hfd1d9a060b66fcb5E:

000000008001d240 <_ZN4core3mem7replace17hfd1d9a060b66fcb5E>:
pub const fn replace<T>(dest: &mut T, src: T) -> T {
    8001d240:	7139                	addi	sp,sp,-64
    8001d242:	fc06                	sd	ra,56(sp)
    8001d244:	e42e                	sd	a1,8(sp)
    8001d246:	e82a                	sd	a0,16(sp)
    8001d248:	f02a                	sd	a0,32(sp)
    8001d24a:	f42e                	sd	a1,40(sp)
        let result = ptr::read(dest);
    8001d24c:	ffffb097          	auipc	ra,0xffffb
    8001d250:	3ae080e7          	jalr	942(ra) # 800185fa <_ZN4core3ptr4read17hd0dbd64c70caff03E>
    8001d254:	85aa                	mv	a1,a0
    8001d256:	ec2e                	sd	a1,24(sp)
    8001d258:	f82a                	sd	a0,48(sp)
    8001d25a:	a009                	j	8001d25c <_ZN4core3mem7replace17hfd1d9a060b66fcb5E+0x1c>
        ptr::write(dest, src);
    8001d25c:	65a2                	ld	a1,8(sp)
    8001d25e:	6542                	ld	a0,16(sp)
    8001d260:	ffffb097          	auipc	ra,0xffffb
    8001d264:	52c080e7          	jalr	1324(ra) # 8001878c <_ZN4core3ptr5write17hbb8dbff750359a8eE>
    8001d268:	a009                	j	8001d26a <_ZN4core3mem7replace17hfd1d9a060b66fcb5E+0x2a>
}
    8001d26a:	6562                	ld	a0,24(sp)
    8001d26c:	70e2                	ld	ra,56(sp)
    8001d26e:	6121                	addi	sp,sp,64
    8001d270:	8082                	ret

Disassembly of section .text._ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$4lock17h5e4056570307628eE:

000000008001d272 <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$4lock17h5e4056570307628eE>:
    pub fn lock(&self) -> SleepLockGuard<T> {
    8001d272:	711d                	addi	sp,sp,-96
    8001d274:	ec86                	sd	ra,88(sp)
    8001d276:	fc2a                	sd	a0,56(sp)
        let mut guard = self.lock.acquire();
    8001d278:	ffff3097          	auipc	ra,0xffff3
    8001d27c:	3bc080e7          	jalr	956(ra) # 80010634 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    8001d280:	e8aa                	sd	a0,80(sp)
    8001d282:	a009                	j	8001d284 <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$4lock17h5e4056570307628eE+0x12>
        while self.locked.get() {
    8001d284:	7562                	ld	a0,56(sp)
    8001d286:	03050513          	addi	a0,a0,48
    8001d28a:	fffe8097          	auipc	ra,0xfffe8
    8001d28e:	e70080e7          	jalr	-400(ra) # 800050fa <_ZN4core4cell13Cell$LT$T$GT$3get17ha10dd437ebde1b39E>
    8001d292:	f82a                	sd	a0,48(sp)
    8001d294:	a009                	j	8001d296 <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$4lock17h5e4056570307628eE+0x24>
    8001d296:	7542                	ld	a0,48(sp)
    8001d298:	e919                	bnez	a0,8001d2ae <.LBB0_13>
    8001d29a:	a009                	j	8001d29c <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$4lock17h5e4056570307628eE+0x2a>
        self.locked.set(true);
    8001d29c:	7562                	ld	a0,56(sp)
    8001d29e:	03050513          	addi	a0,a0,48
    8001d2a2:	4585                	li	a1,1
    8001d2a4:	fffe8097          	auipc	ra,0xfffe8
    8001d2a8:	eac080e7          	jalr	-340(ra) # 80005150 <_ZN4core4cell13Cell$LT$T$GT$3set17h60fabb73b23781c0E>
    8001d2ac:	a08d                	j	8001d30e <.LBB0_14+0x4a>

000000008001d2ae <.LBB0_13>:
                CPU_MANAGER.myproc().unwrap().sleep(self.locked.as_ptr() as usize, guard);
    8001d2ae:	00047517          	auipc	a0,0x47
    8001d2b2:	e9250513          	addi	a0,a0,-366 # 80064140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    8001d2b6:	ffff4097          	auipc	ra,0xffff4
    8001d2ba:	774080e7          	jalr	1908(ra) # 80011a2a <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    8001d2be:	f42a                	sd	a0,40(sp)
    8001d2c0:	a009                	j	8001d2c2 <.LBB0_13+0x14>
    8001d2c2:	7522                	ld	a0,40(sp)

000000008001d2c4 <.LBB0_14>:
    8001d2c4:	0000e597          	auipc	a1,0xe
    8001d2c8:	2ac58593          	addi	a1,a1,684 # 8002b570 <.L__unnamed_1>
    8001d2cc:	ffff2097          	auipc	ra,0xffff2
    8001d2d0:	9f0080e7          	jalr	-1552(ra) # 8000ecbc <_ZN4core6option15Option$LT$T$GT$6unwrap17h81f0c84c54a80648E>
    8001d2d4:	f02a                	sd	a0,32(sp)
    8001d2d6:	a009                	j	8001d2d8 <.LBB0_14+0x14>
    8001d2d8:	7562                	ld	a0,56(sp)
    8001d2da:	03050513          	addi	a0,a0,48
    8001d2de:	fffe8097          	auipc	ra,0xfffe8
    8001d2e2:	eca080e7          	jalr	-310(ra) # 800051a8 <_ZN4core4cell13Cell$LT$T$GT$6as_ptr17h2323c3e07ac4531cE>
    8001d2e6:	ec2a                	sd	a0,24(sp)
    8001d2e8:	a009                	j	8001d2ea <.LBB0_14+0x26>
    8001d2ea:	65e2                	ld	a1,24(sp)
    8001d2ec:	7502                	ld	a0,32(sp)
    8001d2ee:	6646                	ld	a2,80(sp)
    8001d2f0:	ffff4097          	auipc	ra,0xffff4
    8001d2f4:	416080e7          	jalr	1046(ra) # 80011706 <_ZN6kernel7process7process11task_struct5sleep17h3865ab03b1bff75fE>
    8001d2f8:	a009                	j	8001d2fa <.LBB0_14+0x36>
            guard = self.lock.acquire();
    8001d2fa:	7562                	ld	a0,56(sp)
    8001d2fc:	ffff3097          	auipc	ra,0xffff3
    8001d300:	338080e7          	jalr	824(ra) # 80010634 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    8001d304:	e82a                	sd	a0,16(sp)
    8001d306:	a009                	j	8001d308 <.LBB0_14+0x44>
    8001d308:	6542                	ld	a0,16(sp)
    8001d30a:	e8aa                	sd	a0,80(sp)
        while self.locked.get() {
    8001d30c:	bfa5                	j	8001d284 <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$4lock17h5e4056570307628eE+0x12>
        drop(guard);
    8001d30e:	6546                	ld	a0,80(sp)
    8001d310:	00000097          	auipc	ra,0x0
    8001d314:	b5a080e7          	jalr	-1190(ra) # 8001ce6a <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    8001d318:	a009                	j	8001d31a <.LBB0_14+0x56>
            lock: &self,
    8001d31a:	7562                	ld	a0,56(sp)
            data: unsafe { &mut *self.data.get() }
    8001d31c:	e02a                	sd	a0,0(sp)
    8001d31e:	03450513          	addi	a0,a0,52
    8001d322:	fffe8097          	auipc	ra,0xfffe8
    8001d326:	f08080e7          	jalr	-248(ra) # 8000522a <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h0c090ec98b6b5023E>
    8001d32a:	e42a                	sd	a0,8(sp)
    8001d32c:	a009                	j	8001d32e <.LBB0_14+0x6a>
        SleepLockGuard {
    8001d32e:	65a2                	ld	a1,8(sp)
    8001d330:	6502                	ld	a0,0(sp)
    8001d332:	e0aa                	sd	a0,64(sp)
    8001d334:	e4ae                	sd	a1,72(sp)
    }
    8001d336:	60e6                	ld	ra,88(sp)
    8001d338:	6125                	addi	sp,sp,96
    8001d33a:	8082                	ret

Disassembly of section .text._ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$4lock17h852a891f9af492ecE:

000000008001d33c <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$4lock17h852a891f9af492ecE>:
    pub fn lock(&self) -> SleepLockGuard<T> {
    8001d33c:	711d                	addi	sp,sp,-96
    8001d33e:	ec86                	sd	ra,88(sp)
    8001d340:	fc2a                	sd	a0,56(sp)
        let mut guard = self.lock.acquire();
    8001d342:	ffff3097          	auipc	ra,0xffff3
    8001d346:	2f2080e7          	jalr	754(ra) # 80010634 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    8001d34a:	e8aa                	sd	a0,80(sp)
    8001d34c:	a009                	j	8001d34e <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$4lock17h852a891f9af492ecE+0x12>
        while self.locked.get() {
    8001d34e:	7562                	ld	a0,56(sp)
    8001d350:	03050513          	addi	a0,a0,48
    8001d354:	fffe8097          	auipc	ra,0xfffe8
    8001d358:	da6080e7          	jalr	-602(ra) # 800050fa <_ZN4core4cell13Cell$LT$T$GT$3get17ha10dd437ebde1b39E>
    8001d35c:	f82a                	sd	a0,48(sp)
    8001d35e:	a009                	j	8001d360 <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$4lock17h852a891f9af492ecE+0x24>
    8001d360:	7542                	ld	a0,48(sp)
    8001d362:	e919                	bnez	a0,8001d378 <.LBB1_13>
    8001d364:	a009                	j	8001d366 <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$4lock17h852a891f9af492ecE+0x2a>
        self.locked.set(true);
    8001d366:	7562                	ld	a0,56(sp)
    8001d368:	03050513          	addi	a0,a0,48
    8001d36c:	4585                	li	a1,1
    8001d36e:	fffe8097          	auipc	ra,0xfffe8
    8001d372:	de2080e7          	jalr	-542(ra) # 80005150 <_ZN4core4cell13Cell$LT$T$GT$3set17h60fabb73b23781c0E>
    8001d376:	a08d                	j	8001d3d8 <.LBB1_14+0x4a>

000000008001d378 <.LBB1_13>:
                CPU_MANAGER.myproc().unwrap().sleep(self.locked.as_ptr() as usize, guard);
    8001d378:	00047517          	auipc	a0,0x47
    8001d37c:	dc850513          	addi	a0,a0,-568 # 80064140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    8001d380:	ffff4097          	auipc	ra,0xffff4
    8001d384:	6aa080e7          	jalr	1706(ra) # 80011a2a <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    8001d388:	f42a                	sd	a0,40(sp)
    8001d38a:	a009                	j	8001d38c <.LBB1_13+0x14>
    8001d38c:	7522                	ld	a0,40(sp)

000000008001d38e <.LBB1_14>:
    8001d38e:	0000e597          	auipc	a1,0xe
    8001d392:	1e258593          	addi	a1,a1,482 # 8002b570 <.L__unnamed_1>
    8001d396:	ffff2097          	auipc	ra,0xffff2
    8001d39a:	926080e7          	jalr	-1754(ra) # 8000ecbc <_ZN4core6option15Option$LT$T$GT$6unwrap17h81f0c84c54a80648E>
    8001d39e:	f02a                	sd	a0,32(sp)
    8001d3a0:	a009                	j	8001d3a2 <.LBB1_14+0x14>
    8001d3a2:	7562                	ld	a0,56(sp)
    8001d3a4:	03050513          	addi	a0,a0,48
    8001d3a8:	fffe8097          	auipc	ra,0xfffe8
    8001d3ac:	e00080e7          	jalr	-512(ra) # 800051a8 <_ZN4core4cell13Cell$LT$T$GT$6as_ptr17h2323c3e07ac4531cE>
    8001d3b0:	ec2a                	sd	a0,24(sp)
    8001d3b2:	a009                	j	8001d3b4 <.LBB1_14+0x26>
    8001d3b4:	65e2                	ld	a1,24(sp)
    8001d3b6:	7502                	ld	a0,32(sp)
    8001d3b8:	6646                	ld	a2,80(sp)
    8001d3ba:	ffff4097          	auipc	ra,0xffff4
    8001d3be:	34c080e7          	jalr	844(ra) # 80011706 <_ZN6kernel7process7process11task_struct5sleep17h3865ab03b1bff75fE>
    8001d3c2:	a009                	j	8001d3c4 <.LBB1_14+0x36>
            guard = self.lock.acquire();
    8001d3c4:	7562                	ld	a0,56(sp)
    8001d3c6:	ffff3097          	auipc	ra,0xffff3
    8001d3ca:	26e080e7          	jalr	622(ra) # 80010634 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    8001d3ce:	e82a                	sd	a0,16(sp)
    8001d3d0:	a009                	j	8001d3d2 <.LBB1_14+0x44>
    8001d3d2:	6542                	ld	a0,16(sp)
    8001d3d4:	e8aa                	sd	a0,80(sp)
        while self.locked.get() {
    8001d3d6:	bfa5                	j	8001d34e <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$4lock17h852a891f9af492ecE+0x12>
        drop(guard);
    8001d3d8:	6546                	ld	a0,80(sp)
    8001d3da:	00000097          	auipc	ra,0x0
    8001d3de:	a90080e7          	jalr	-1392(ra) # 8001ce6a <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    8001d3e2:	a009                	j	8001d3e4 <.LBB1_14+0x56>
            lock: &self,
    8001d3e4:	7562                	ld	a0,56(sp)
            data: unsafe { &mut *self.data.get() }
    8001d3e6:	e02a                	sd	a0,0(sp)
    8001d3e8:	03850513          	addi	a0,a0,56
    8001d3ec:	fffe8097          	auipc	ra,0xfffe8
    8001d3f0:	e76080e7          	jalr	-394(ra) # 80005262 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17hb24b2b56dfaab8d4E>
    8001d3f4:	e42a                	sd	a0,8(sp)
    8001d3f6:	a009                	j	8001d3f8 <.LBB1_14+0x6a>
        SleepLockGuard {
    8001d3f8:	65a2                	ld	a1,8(sp)
    8001d3fa:	6502                	ld	a0,0(sp)
    8001d3fc:	e0aa                	sd	a0,64(sp)
    8001d3fe:	e4ae                	sd	a1,72(sp)
    }
    8001d400:	60e6                	ld	ra,88(sp)
    8001d402:	6125                	addi	sp,sp,96
    8001d404:	8082                	ret

Disassembly of section .text._ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$6unlock17h4136b26b6a44129dE:

000000008001d406 <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$6unlock17h4136b26b6a44129dE>:
    pub fn unlock(&self) {
    8001d406:	7179                	addi	sp,sp,-48
    8001d408:	f406                	sd	ra,40(sp)
    8001d40a:	e42a                	sd	a0,8(sp)
    8001d40c:	ec2a                	sd	a0,24(sp)
        let guard = self.lock.acquire();
    8001d40e:	ffff3097          	auipc	ra,0xffff3
    8001d412:	226080e7          	jalr	550(ra) # 80010634 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    8001d416:	85aa                	mv	a1,a0
    8001d418:	e82e                	sd	a1,16(sp)
    8001d41a:	f02a                	sd	a0,32(sp)
    8001d41c:	a009                	j	8001d41e <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$6unlock17h4136b26b6a44129dE+0x18>
        self.locked.set(false);
    8001d41e:	6522                	ld	a0,8(sp)
    8001d420:	03050513          	addi	a0,a0,48
    8001d424:	4581                	li	a1,0
    8001d426:	fffe8097          	auipc	ra,0xfffe8
    8001d42a:	d2a080e7          	jalr	-726(ra) # 80005150 <_ZN4core4cell13Cell$LT$T$GT$3set17h60fabb73b23781c0E>
    8001d42e:	a009                	j	8001d430 <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$6unlock17h4136b26b6a44129dE+0x2a>
        self.wake_up();
    8001d430:	6522                	ld	a0,8(sp)
    8001d432:	00000097          	auipc	ra,0x0
    8001d436:	064080e7          	jalr	100(ra) # 8001d496 <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$7wake_up17h37728224df905678E>
    8001d43a:	a009                	j	8001d43c <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$6unlock17h4136b26b6a44129dE+0x36>
        drop(guard);
    8001d43c:	6542                	ld	a0,16(sp)
    8001d43e:	00000097          	auipc	ra,0x0
    8001d442:	a2c080e7          	jalr	-1492(ra) # 8001ce6a <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    8001d446:	a009                	j	8001d448 <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$6unlock17h4136b26b6a44129dE+0x42>
    }
    8001d448:	70a2                	ld	ra,40(sp)
    8001d44a:	6145                	addi	sp,sp,48
    8001d44c:	8082                	ret

Disassembly of section .text._ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$6unlock17h5d72a4d2b4e61b31E:

000000008001d44e <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$6unlock17h5d72a4d2b4e61b31E>:
    pub fn unlock(&self) {
    8001d44e:	7179                	addi	sp,sp,-48
    8001d450:	f406                	sd	ra,40(sp)
    8001d452:	e42a                	sd	a0,8(sp)
    8001d454:	ec2a                	sd	a0,24(sp)
        let guard = self.lock.acquire();
    8001d456:	ffff3097          	auipc	ra,0xffff3
    8001d45a:	1de080e7          	jalr	478(ra) # 80010634 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h9e4ec996505257d2E>
    8001d45e:	85aa                	mv	a1,a0
    8001d460:	e82e                	sd	a1,16(sp)
    8001d462:	f02a                	sd	a0,32(sp)
    8001d464:	a009                	j	8001d466 <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$6unlock17h5d72a4d2b4e61b31E+0x18>
        self.locked.set(false);
    8001d466:	6522                	ld	a0,8(sp)
    8001d468:	03050513          	addi	a0,a0,48
    8001d46c:	4581                	li	a1,0
    8001d46e:	fffe8097          	auipc	ra,0xfffe8
    8001d472:	ce2080e7          	jalr	-798(ra) # 80005150 <_ZN4core4cell13Cell$LT$T$GT$3set17h60fabb73b23781c0E>
    8001d476:	a009                	j	8001d478 <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$6unlock17h5d72a4d2b4e61b31E+0x2a>
        self.wake_up();
    8001d478:	6522                	ld	a0,8(sp)
    8001d47a:	00000097          	auipc	ra,0x0
    8001d47e:	04c080e7          	jalr	76(ra) # 8001d4c6 <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$7wake_up17hd47f70df8bbd0f23E>
    8001d482:	a009                	j	8001d484 <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$6unlock17h5d72a4d2b4e61b31E+0x36>
        drop(guard);
    8001d484:	6542                	ld	a0,16(sp)
    8001d486:	00000097          	auipc	ra,0x0
    8001d48a:	9e4080e7          	jalr	-1564(ra) # 8001ce6a <_ZN4core3mem4drop17h10f52240d03cf3b6E>
    8001d48e:	a009                	j	8001d490 <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$6unlock17h5d72a4d2b4e61b31E+0x42>
    }
    8001d490:	70a2                	ld	ra,40(sp)
    8001d492:	6145                	addi	sp,sp,48
    8001d494:	8082                	ret

Disassembly of section .text._ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$7wake_up17h37728224df905678E:

000000008001d496 <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$7wake_up17h37728224df905678E>:
    fn wake_up(&self) {
    8001d496:	1101                	addi	sp,sp,-32
    8001d498:	ec06                	sd	ra,24(sp)
    8001d49a:	e82a                	sd	a0,16(sp)
            PROC_MANAGER.wake_up(self.locked.as_ptr() as usize);
    8001d49c:	03050513          	addi	a0,a0,48
    8001d4a0:	fffe8097          	auipc	ra,0xfffe8
    8001d4a4:	d08080e7          	jalr	-760(ra) # 800051a8 <_ZN4core4cell13Cell$LT$T$GT$6as_ptr17h2323c3e07ac4531cE>
    8001d4a8:	e42a                	sd	a0,8(sp)
    8001d4aa:	a009                	j	8001d4ac <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$7wake_up17h37728224df905678E+0x16>
    8001d4ac:	65a2                	ld	a1,8(sp)

000000008001d4ae <.LBB4_3>:
    8001d4ae:	0003a517          	auipc	a0,0x3a
    8001d4b2:	0f250513          	addi	a0,a0,242 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    8001d4b6:	ffff0097          	auipc	ra,0xffff0
    8001d4ba:	398080e7          	jalr	920(ra) # 8000d84e <_ZN6kernel7process7manager11ProcManager7wake_up17ha46b4d15ac07187bE>
    8001d4be:	a009                	j	8001d4c0 <.LBB4_3+0x12>
    }
    8001d4c0:	60e2                	ld	ra,24(sp)
    8001d4c2:	6105                	addi	sp,sp,32
    8001d4c4:	8082                	ret

Disassembly of section .text._ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$7wake_up17hd47f70df8bbd0f23E:

000000008001d4c6 <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$7wake_up17hd47f70df8bbd0f23E>:
    fn wake_up(&self) {
    8001d4c6:	1101                	addi	sp,sp,-32
    8001d4c8:	ec06                	sd	ra,24(sp)
    8001d4ca:	e82a                	sd	a0,16(sp)
            PROC_MANAGER.wake_up(self.locked.as_ptr() as usize);
    8001d4cc:	03050513          	addi	a0,a0,48
    8001d4d0:	fffe8097          	auipc	ra,0xfffe8
    8001d4d4:	cd8080e7          	jalr	-808(ra) # 800051a8 <_ZN4core4cell13Cell$LT$T$GT$6as_ptr17h2323c3e07ac4531cE>
    8001d4d8:	e42a                	sd	a0,8(sp)
    8001d4da:	a009                	j	8001d4dc <_ZN6kernel4lock9sleeplock18SleepLock$LT$T$GT$7wake_up17hd47f70df8bbd0f23E+0x16>
    8001d4dc:	65a2                	ld	a1,8(sp)

000000008001d4de <.LBB5_3>:
    8001d4de:	0003a517          	auipc	a0,0x3a
    8001d4e2:	0c250513          	addi	a0,a0,194 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    8001d4e6:	ffff0097          	auipc	ra,0xffff0
    8001d4ea:	368080e7          	jalr	872(ra) # 8000d84e <_ZN6kernel7process7manager11ProcManager7wake_up17ha46b4d15ac07187bE>
    8001d4ee:	a009                	j	8001d4f0 <.LBB5_3+0x12>
    }
    8001d4f0:	60e2                	ld	ra,24(sp)
    8001d4f2:	6105                	addi	sp,sp,32
    8001d4f4:	8082                	ret

Disassembly of section .text._ZN92_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17he0c0fee5a6939b40E:

000000008001d4f6 <_ZN92_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17he0c0fee5a6939b40E>:
    fn deref(&self) -> &T {
    8001d4f6:	1141                	addi	sp,sp,-16
    8001d4f8:	e42a                	sd	a0,8(sp)
        &*self.data
    8001d4fa:	6508                	ld	a0,8(a0)
    }
    8001d4fc:	0141                	addi	sp,sp,16
    8001d4fe:	8082                	ret

Disassembly of section .text._ZN92_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfc7812d7ca7ab1e1E:

000000008001d500 <_ZN92_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hfc7812d7ca7ab1e1E>:
    fn deref(&self) -> &T {
    8001d500:	1141                	addi	sp,sp,-16
    8001d502:	e42a                	sd	a0,8(sp)
        &*self.data
    8001d504:	6508                	ld	a0,8(a0)
    }
    8001d506:	0141                	addi	sp,sp,16
    8001d508:	8082                	ret

Disassembly of section .text._ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h29ddb6c86f63b2e9E:

000000008001d50a <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h29ddb6c86f63b2e9E>:
    fn deref_mut(&mut self) -> &mut T {
    8001d50a:	1141                	addi	sp,sp,-16
    8001d50c:	e42a                	sd	a0,8(sp)
        &mut *self.data
    8001d50e:	6508                	ld	a0,8(a0)
    }
    8001d510:	0141                	addi	sp,sp,16
    8001d512:	8082                	ret

Disassembly of section .text._ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E:

000000008001d514 <_ZN95_$LT$kernel..lock..sleeplock..SleepLockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hc2f7575c00bf7e95E>:
    fn deref_mut(&mut self) -> &mut T {
    8001d514:	1141                	addi	sp,sp,-16
    8001d516:	e42a                	sd	a0,8(sp)
        &mut *self.data
    8001d518:	6508                	ld	a0,8(a0)
    }
    8001d51a:	0141                	addi	sp,sp,16
    8001d51c:	8082                	ret

Disassembly of section .text._ZN6kernel7process8fork_ret17hc655e7da156c9445E:

000000008001d51e <_ZN6kernel7process8fork_ret17hc655e7da156c9445E>:

/// A fork child's very first scheduling by scheduler()
/// will switch to forkret.
/// 
/// Need to be handled carefully, because CPU use ra to jump here
unsafe fn fork_ret() -> ! {
    8001d51e:	7179                	addi	sp,sp,-48
    8001d520:	f406                	sd	ra,40(sp)
    8001d522:	6509                	lui	a0,0x2
    8001d524:	0885059b          	addiw	a1,a0,136

000000008001d528 <.LBB0_8>:
    8001d528:	0003a517          	auipc	a0,0x3a
    8001d52c:	07850513          	addi	a0,a0,120 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    8001d530:	952e                	add	a0,a0,a1
    static mut FIRST: bool = true;
    
    // Still holding p->lock from scheduler
    PROC_MANAGER.tasks_lock.release();
    8001d532:	ffff3097          	auipc	ra,0xffff3
    8001d536:	7a0080e7          	jalr	1952(ra) # 80010cd2 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7release17hfda5e7f2f4cdedb7E>
    8001d53a:	a009                	j	8001d53c <.LBB0_9>

000000008001d53c <.LBB0_9>:
    
    if FIRST {
    8001d53c:	00044517          	auipc	a0,0x44
    8001d540:	ac450513          	addi	a0,a0,-1340 # 80061000 <_ZN6kernel7process8fork_ret5FIRST17h9d39a034a1560a70E>
    8001d544:	00054503          	lbu	a0,0(a0)
    8001d548:	8905                	andi	a0,a0,1
    8001d54a:	4581                	li	a1,0
    8001d54c:	02b50063          	beq	a0,a1,8001d56c <.LBB0_10+0x1a>
    8001d550:	a009                	j	8001d552 <.LBB0_10>

000000008001d552 <.LBB0_10>:
        // File system initialization
        FIRST = false;
    8001d552:	00044597          	auipc	a1,0x44
    8001d556:	aae58593          	addi	a1,a1,-1362 # 80061000 <_ZN6kernel7process8fork_ret5FIRST17h9d39a034a1560a70E>
    8001d55a:	4501                	li	a0,0
    8001d55c:	00a58023          	sb	a0,0(a1)
    8001d560:	4505                	li	a0,1
        init(ROOTDEV);
    8001d562:	fffee097          	auipc	ra,0xfffee
    8001d566:	71a080e7          	jalr	1818(ra) # 8000bc7c <_ZN6kernel2fs4init17h0544bbe6b6556f7eE>
    8001d56a:	a011                	j	8001d56e <.LBB0_10+0x1c>
    if FIRST {
    8001d56c:	a011                	j	8001d570 <.LBB0_11>
    8001d56e:	a009                	j	8001d570 <.LBB0_11>

000000008001d570 <.LBB0_11>:
    }
    // println!("user trap return");
    let task = unsafe { CPU_MANAGER.myproc().unwrap() };
    8001d570:	00047517          	auipc	a0,0x47
    8001d574:	bd050513          	addi	a0,a0,-1072 # 80064140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    8001d578:	ffff4097          	auipc	ra,0xffff4
    8001d57c:	4b2080e7          	jalr	1202(ra) # 80011a2a <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    8001d580:	e82a                	sd	a0,16(sp)
    8001d582:	a009                	j	8001d584 <.LBB0_11+0x14>
    8001d584:	6542                	ld	a0,16(sp)

000000008001d586 <.LBB0_12>:
    8001d586:	0000e597          	auipc	a1,0xe
    8001d58a:	04a58593          	addi	a1,a1,74 # 8002b5d0 <.L__unnamed_1>
    8001d58e:	ffff1097          	auipc	ra,0xffff1
    8001d592:	72e080e7          	jalr	1838(ra) # 8000ecbc <_ZN4core6option15Option$LT$T$GT$6unwrap17h81f0c84c54a80648E>
    8001d596:	e42a                	sd	a0,8(sp)
    8001d598:	a009                	j	8001d59a <.LBB0_12+0x14>
    8001d59a:	6522                	ld	a0,8(sp)
    8001d59c:	ec2a                	sd	a0,24(sp)
    let tf = unsafe { &mut *task.trapframe } ;
    8001d59e:	7108                	ld	a0,32(a0)
    8001d5a0:	f02a                	sd	a0,32(sp)
    // println!("In fork_ret, pid {} epc {}", task.pid, tf.epc);
    user_trap_ret();
    8001d5a2:	fffe9097          	auipc	ra,0xfffe9
    8001d5a6:	00c080e7          	jalr	12(ra) # 800065ae <user_trap_ret>
	...

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h3a39754d1b9c54a7E:

000000008001d5ac <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h3a39754d1b9c54a7E>:
    pub const unsafe fn add(self, count: usize) -> Self
    8001d5ac:	1101                	addi	sp,sp,-32
    8001d5ae:	ec06                	sd	ra,24(sp)
    8001d5b0:	e42a                	sd	a0,8(sp)
    8001d5b2:	e82e                	sd	a1,16(sp)
        unsafe { self.offset(count as isize) }
    8001d5b4:	00000097          	auipc	ra,0x0
    8001d5b8:	014080e7          	jalr	20(ra) # 8001d5c8 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17he4f714b54e872ab3E>
    8001d5bc:	e02a                	sd	a0,0(sp)
    8001d5be:	a009                	j	8001d5c0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h3a39754d1b9c54a7E+0x14>
    }
    8001d5c0:	6502                	ld	a0,0(sp)
    8001d5c2:	60e2                	ld	ra,24(sp)
    8001d5c4:	6105                	addi	sp,sp,32
    8001d5c6:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17he4f714b54e872ab3E:

000000008001d5c8 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17he4f714b54e872ab3E>:
    pub const unsafe fn offset(self, count: isize) -> *mut T
    8001d5c8:	1101                	addi	sp,sp,-32
    8001d5ca:	e42a                	sd	a0,8(sp)
    8001d5cc:	e82e                	sd	a1,16(sp)
    8001d5ce:	03000613          	li	a2,48
        unsafe { intrinsics::offset(self, count) as *mut T }
    8001d5d2:	02c585b3          	mul	a1,a1,a2
    8001d5d6:	952e                	add	a0,a0,a1
    8001d5d8:	e02a                	sd	a0,0(sp)
    8001d5da:	ec2a                	sd	a0,24(sp)
    8001d5dc:	a009                	j	8001d5de <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17he4f714b54e872ab3E+0x16>
    }
    8001d5de:	6502                	ld	a0,0(sp)
    8001d5e0:	6105                	addi	sp,sp,32
    8001d5e2:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h1d4bdf7317c60b96E:

000000008001d5e4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h1d4bdf7317c60b96E>:
    pub const fn is_null(self) -> bool {
    8001d5e4:	1101                	addi	sp,sp,-32
    8001d5e6:	ec06                	sd	ra,24(sp)
    8001d5e8:	e82a                	sd	a0,16(sp)
        (self as *mut u8).guaranteed_eq(null_mut())
    8001d5ea:	e42a                	sd	a0,8(sp)
    8001d5ec:	a009                	j	8001d5ee <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h1d4bdf7317c60b96E+0xa>
    8001d5ee:	6522                	ld	a0,8(sp)
    8001d5f0:	4581                	li	a1,0
    8001d5f2:	00005097          	auipc	ra,0x5
    8001d5f6:	8d0080e7          	jalr	-1840(ra) # 80021ec2 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$13guaranteed_eq17h32ea8c99c0b8220dE>
    8001d5fa:	e02a                	sd	a0,0(sp)
    8001d5fc:	a009                	j	8001d5fe <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h1d4bdf7317c60b96E+0x1a>
    }
    8001d5fe:	6502                	ld	a0,0(sp)
    8001d600:	60e2                	ld	ra,24(sp)
    8001d602:	6105                	addi	sp,sp,32
    8001d604:	8082                	ret

Disassembly of section .text._ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb34fa5c829e1d9f2E:

000000008001d606 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb34fa5c829e1d9f2E>:
    pub const fn as_mut_ptr(&mut self) -> *mut T {
    8001d606:	1141                	addi	sp,sp,-16
    8001d608:	e02a                	sd	a0,0(sp)
    8001d60a:	e42e                	sd	a1,8(sp)
    }
    8001d60c:	0141                	addi	sp,sp,16
    8001d60e:	8082                	ret

Disassembly of section .text._ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h5af32af5d380fccdE:

000000008001d610 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h5af32af5d380fccdE>:
    pub const fn len(&self) -> usize {
    8001d610:	7179                	addi	sp,sp,-48
    8001d612:	e42e                	sd	a1,8(sp)
    8001d614:	85aa                	mv	a1,a0
    8001d616:	6522                	ld	a0,8(sp)
    8001d618:	f02e                	sd	a1,32(sp)
    8001d61a:	f42a                	sd	a0,40(sp)
            unsafe { crate::ptr::PtrRepr { const_ptr: self }.components.metadata }
    8001d61c:	e82e                	sd	a1,16(sp)
    8001d61e:	ec2a                	sd	a0,24(sp)
    }
    8001d620:	6145                	addi	sp,sp,48
    8001d622:	8082                	ret

Disassembly of section .text._ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17hdf73a8173be099ebE:

000000008001d624 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17hdf73a8173be099ebE>:
    pub fn iter_mut(&mut self) -> IterMut<'_, T> {
    8001d624:	7179                	addi	sp,sp,-48
    8001d626:	f406                	sd	ra,40(sp)
    8001d628:	ec2a                	sd	a0,24(sp)
    8001d62a:	f02e                	sd	a1,32(sp)
        IterMut::new(self)
    8001d62c:	fffed097          	auipc	ra,0xfffed
    8001d630:	7d2080e7          	jalr	2002(ra) # 8000adfe <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h41c69a0e1f2809d6E>
    8001d634:	e42a                	sd	a0,8(sp)
    8001d636:	e82e                	sd	a1,16(sp)
    8001d638:	a009                	j	8001d63a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17hdf73a8173be099ebE+0x16>
    }
    8001d63a:	65c2                	ld	a1,16(sp)
    8001d63c:	6522                	ld	a0,8(sp)
    8001d63e:	70a2                	ld	ra,40(sp)
    8001d640:	6145                	addi	sp,sp,48
    8001d642:	8082                	ret

Disassembly of section .text._ZN4core5clone5impls62_$LT$impl$u20$core..clone..Clone$u20$for$u20$$BP$mut$u20$T$GT$5clone17hc067a5a882105a3dE:

000000008001d644 <_ZN4core5clone5impls62_$LT$impl$u20$core..clone..Clone$u20$for$u20$$BP$mut$u20$T$GT$5clone17hc067a5a882105a3dE>:
    }

    #[stable(feature = "rust1", since = "1.0.0")]
    impl<T: ?Sized> Clone for *mut T {
        #[inline]
        fn clone(&self) -> Self {
    8001d644:	1141                	addi	sp,sp,-16
    8001d646:	e42a                	sd	a0,8(sp)
            *self
    8001d648:	6108                	ld	a0,0(a0)
        }
    8001d64a:	0141                	addi	sp,sp,16
    8001d64c:	8082                	ret

Disassembly of section .text._ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$i16$GT$5clone17h91da98197f473cc1E:

000000008001d64e <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$i16$GT$5clone17h91da98197f473cc1E>:
                    fn clone(&self) -> Self {
    8001d64e:	1141                	addi	sp,sp,-16
    8001d650:	e42a                	sd	a0,8(sp)
                    }
    8001d652:	00051503          	lh	a0,0(a0)
    8001d656:	0141                	addi	sp,sp,16
    8001d658:	8082                	ret

Disassembly of section .text._ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u16$GT$5clone17h7947cab6b7dc7abbE:

000000008001d65a <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u16$GT$5clone17h7947cab6b7dc7abbE>:
                    fn clone(&self) -> Self {
    8001d65a:	1141                	addi	sp,sp,-16
    8001d65c:	e42a                	sd	a0,8(sp)
                    }
    8001d65e:	00051503          	lh	a0,0(a0)
    8001d662:	0141                	addi	sp,sp,16
    8001d664:	8082                	ret

Disassembly of section .text._ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17ha1019ce9fdc4d620E:

000000008001d666 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17ha1019ce9fdc4d620E>:
                    fn clone(&self) -> Self {
    8001d666:	1141                	addi	sp,sp,-16
    8001d668:	e42a                	sd	a0,8(sp)
                    }
    8001d66a:	4108                	lw	a0,0(a0)
    8001d66c:	0141                	addi	sp,sp,16
    8001d66e:	8082                	ret

Disassembly of section .text._ZN4core5clone5impls53_$LT$impl$u20$core..clone..Clone$u20$for$u20$bool$GT$5clone17hd6e1e19c635da345E:

000000008001d670 <_ZN4core5clone5impls53_$LT$impl$u20$core..clone..Clone$u20$for$u20$bool$GT$5clone17hd6e1e19c635da345E>:
                    fn clone(&self) -> Self {
    8001d670:	1141                	addi	sp,sp,-16
    8001d672:	e42a                	sd	a0,8(sp)
                        *self
    8001d674:	00054503          	lbu	a0,0(a0)
                    }
    8001d678:	0141                	addi	sp,sp,16
    8001d67a:	8082                	ret

Disassembly of section .text._ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$usize$GT$5clone17h35e6cace0a4ed712E:

000000008001d67c <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$usize$GT$5clone17h35e6cace0a4ed712E>:
                    fn clone(&self) -> Self {
    8001d67c:	1141                	addi	sp,sp,-16
    8001d67e:	e42a                	sd	a0,8(sp)
                        *self
    8001d680:	6108                	ld	a0,0(a0)
                    }
    8001d682:	0141                	addi	sp,sp,16
    8001d684:	8082                	ret

Disassembly of section .text._ZN6kernel6memory7mapping13page_round_up17h53b8f5a3d9b0c04fE:

000000008001d686 <_ZN6kernel6memory7mapping13page_round_up17h53b8f5a3d9b0c04fE>:
pub use page_table_entry::*;
pub use kernel_map::*;

use crate::arch::riscv::qemu::layout::PGSIZE;

pub fn page_round_up(addr: usize) -> usize{
    8001d686:	1101                	addi	sp,sp,-32
    8001d688:	85aa                	mv	a1,a0
    8001d68a:	ec2e                	sd	a1,24(sp)
    8001d68c:	6505                	lui	a0,0x1
    (addr + PGSIZE - 1) & !(PGSIZE - 1)
    8001d68e:	952e                	add	a0,a0,a1
    8001d690:	e82a                	sd	a0,16(sp)
    8001d692:	00b56f63          	bltu	a0,a1,8001d6b0 <.LBB0_5>
    8001d696:	a009                	j	8001d698 <_ZN6kernel6memory7mapping13page_round_up17h53b8f5a3d9b0c04fE+0x12>
    8001d698:	6542                	ld	a0,16(sp)
    8001d69a:	fff50593          	addi	a1,a0,-1 # fff <.Lline_table_start0+0x30a>
    8001d69e:	e42e                	sd	a1,8(sp)
    8001d6a0:	02b56663          	bltu	a0,a1,8001d6cc <.LBB0_7>
    8001d6a4:	a009                	j	8001d6a6 <_ZN6kernel6memory7mapping13page_round_up17h53b8f5a3d9b0c04fE+0x20>
    8001d6a6:	6522                	ld	a0,8(sp)
    8001d6a8:	75fd                	lui	a1,0xfffff
    8001d6aa:	8d6d                	and	a0,a0,a1
}
    8001d6ac:	6105                	addi	sp,sp,32
    8001d6ae:	8082                	ret

000000008001d6b0 <.LBB0_5>:
    (addr + PGSIZE - 1) & !(PGSIZE - 1)
    8001d6b0:	0000e517          	auipc	a0,0xe
    8001d6b4:	f7050513          	addi	a0,a0,-144 # 8002b620 <str.0>

000000008001d6b8 <.LBB0_6>:
    8001d6b8:	0000e617          	auipc	a2,0xe
    8001d6bc:	f5060613          	addi	a2,a2,-176 # 8002b608 <.L__unnamed_1>
    8001d6c0:	45f1                	li	a1,28
    8001d6c2:	00005097          	auipc	ra,0x5
    8001d6c6:	a3a080e7          	jalr	-1478(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008001d6cc <.LBB0_7>:
    8001d6cc:	0000e517          	auipc	a0,0xe
    8001d6d0:	f9450513          	addi	a0,a0,-108 # 8002b660 <str.1>

000000008001d6d4 <.LBB0_8>:
    8001d6d4:	0000e617          	auipc	a2,0xe
    8001d6d8:	f6c60613          	addi	a2,a2,-148 # 8002b640 <.L__unnamed_2>
    8001d6dc:	02100593          	li	a1,33
    8001d6e0:	00005097          	auipc	ra,0x5
    8001d6e4:	a1c080e7          	jalr	-1508(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel4arch5riscv8register3sie4read17h0ba5d34b74a7fc92E:

000000008001d6ea <_ZN6kernel4arch5riscv8register3sie4read17h0ba5d34b74a7fc92E>:
    STIE = 1 << 5, // timer
    SSIE = 1 << 1, // software
}

#[inline]
pub unsafe fn read() -> usize {
    8001d6ea:	1141                	addi	sp,sp,-16
    let ret:usize;
    llvm_asm!("csrr $0, sie":"=r"(ret):::"volatile");
    8001d6ec:	10402573          	csrr	a0,sie
    8001d6f0:	e42a                	sd	a0,8(sp)
    ret
}
    8001d6f2:	0141                	addi	sp,sp,16
    8001d6f4:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register3sie5write17h4451b4d1e5667981E:

000000008001d6f6 <_ZN6kernel4arch5riscv8register3sie5write17h4451b4d1e5667981E>:

#[inline]
pub unsafe fn write(x:usize) {
    8001d6f6:	1141                	addi	sp,sp,-16
    8001d6f8:	e42a                	sd	a0,8(sp)
    llvm_asm!("csrw sie, $0"::"r"(x)::"volatile");
    8001d6fa:	10451073          	csrw	sie,a0
}
    8001d6fe:	0141                	addi	sp,sp,16
    8001d700:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register3sie7intr_on17ha44057f13b8cbd2fE:

000000008001d702 <_ZN6kernel4arch5riscv8register3sie7intr_on17ha44057f13b8cbd2fE>:

/// enable all software interrupts
/// still need to set SIE bit in sstatus
pub unsafe fn intr_on() {
    8001d702:	1141                	addi	sp,sp,-16
    let mut sie = read();
    8001d704:	e406                	sd	ra,8(sp)
    8001d706:	00000097          	auipc	ra,0x0
    8001d70a:	fe4080e7          	jalr	-28(ra) # 8001d6ea <_ZN6kernel4arch5riscv8register3sie4read17h0ba5d34b74a7fc92E>
    8001d70e:	e02a                	sd	a0,0(sp)
    8001d710:	a009                	j	8001d712 <_ZN6kernel4arch5riscv8register3sie7intr_on17ha44057f13b8cbd2fE+0x10>
    sie |= SIE::SSIE as usize | SIE::STIE as usize | SIE::SEIE as usize;
    8001d712:	6502                	ld	a0,0(sp)
    8001d714:	22256513          	ori	a0,a0,546
    8001d718:	e02a                	sd	a0,0(sp)
    write(sie);
    8001d71a:	00000097          	auipc	ra,0x0
    8001d71e:	fdc080e7          	jalr	-36(ra) # 8001d6f6 <_ZN6kernel4arch5riscv8register3sie5write17h4451b4d1e5667981E>
    8001d722:	a009                	j	8001d724 <_ZN6kernel4arch5riscv8register3sie7intr_on17ha44057f13b8cbd2fE+0x22>
    8001d724:	60a2                	ld	ra,8(sp)
    8001d726:	0141                	addi	sp,sp,16
    8001d728:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register3sip4read17h3bdc92cfb299a0b6E:

000000008001d72a <_ZN6kernel4arch5riscv8register3sip4read17h3bdc92cfb299a0b6E>:
// Supervisor Interrupt Pending

const SSIP: usize = 1 << 1;

#[inline]
pub unsafe fn read() -> usize {
    8001d72a:	1141                	addi	sp,sp,-16
    let sip: usize;
    llvm_asm!("csrr $0, sip":"=r"(sip):::"volatile");
    8001d72c:	14402573          	csrr	a0,sip
    8001d730:	e42a                	sd	a0,8(sp)
    sip
}
    8001d732:	0141                	addi	sp,sp,16
    8001d734:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register3sip5write17hc1eecfa799475477E:

000000008001d736 <_ZN6kernel4arch5riscv8register3sip5write17hc1eecfa799475477E>:

#[inline]
pub unsafe fn write(sip: usize){
    8001d736:	1141                	addi	sp,sp,-16
    8001d738:	e42a                	sd	a0,8(sp)
    llvm_asm!("csrw sip, $0"::"r"(sip)::"volatile");
    8001d73a:	14451073          	csrw	sip,a0
}
    8001d73e:	0141                	addi	sp,sp,16
    8001d740:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register3sip10clear_ssip17h3546c4610df6574fE:

000000008001d742 <_ZN6kernel4arch5riscv8register3sip10clear_ssip17h3546c4610df6574fE>:

pub fn clear_ssip() {
    8001d742:	1141                	addi	sp,sp,-16
    unsafe {
        write(read() & !SSIP);
    8001d744:	e406                	sd	ra,8(sp)
    8001d746:	00000097          	auipc	ra,0x0
    8001d74a:	fe4080e7          	jalr	-28(ra) # 8001d72a <_ZN6kernel4arch5riscv8register3sip4read17h3bdc92cfb299a0b6E>
    8001d74e:	e02a                	sd	a0,0(sp)
    8001d750:	a009                	j	8001d752 <_ZN6kernel4arch5riscv8register3sip10clear_ssip17h3546c4610df6574fE+0x10>
    8001d752:	6502                	ld	a0,0(sp)
    8001d754:	9975                	andi	a0,a0,-3
    8001d756:	00000097          	auipc	ra,0x0
    8001d75a:	fe0080e7          	jalr	-32(ra) # 8001d736 <_ZN6kernel4arch5riscv8register3sip5write17hc1eecfa799475477E>
    8001d75e:	a009                	j	8001d760 <_ZN6kernel4arch5riscv8register3sip10clear_ssip17h3546c4610df6574fE+0x1e>
    }
    8001d760:	60a2                	ld	ra,8(sp)
    8001d762:	0141                	addi	sp,sp,16
    8001d764:	8082                	ret

Disassembly of section .text._ZN6kernel6driver4plic12PLIC_SENABLE17h7b6da31aa84dc734E:

000000008001d766 <_ZN6kernel6driver4plic12PLIC_SENABLE17h7b6da31aa84dc734E>:

fn PLIC_MENABLE(hart_id: usize) -> usize {
    PLIC_BASE + 0x2000 + hart_id * 0x100
}

fn PLIC_SENABLE(hart_id: usize) -> usize {
    8001d766:	1101                	addi	sp,sp,-32
    8001d768:	85aa                	mv	a1,a0
    8001d76a:	ec2e                	sd	a1,24(sp)
    8001d76c:	4505                	li	a0,1
    8001d76e:	1562                	slli	a0,a0,0x38
    8001d770:	157d                	addi	a0,a0,-1
    PLIC_BASE + 0x2080 + hart_id * 0x100
    8001d772:	8d6d                	and	a0,a0,a1
    8001d774:	00859613          	slli	a2,a1,0x8
    8001d778:	e832                	sd	a2,16(sp)
    8001d77a:	02b51063          	bne	a0,a1,8001d79a <.LBB0_5>
    8001d77e:	a009                	j	8001d780 <_ZN6kernel6driver4plic12PLIC_SENABLE17h7b6da31aa84dc734E+0x1a>
    8001d780:	65c2                	ld	a1,16(sp)
    8001d782:	0c002537          	lui	a0,0xc002
    8001d786:	0805051b          	addiw	a0,a0,128
    8001d78a:	952e                	add	a0,a0,a1
    8001d78c:	e42a                	sd	a0,8(sp)
    8001d78e:	02b56563          	bltu	a0,a1,8001d7b8 <.LBB0_7>
    8001d792:	a009                	j	8001d794 <_ZN6kernel6driver4plic12PLIC_SENABLE17h7b6da31aa84dc734E+0x2e>
}
    8001d794:	6522                	ld	a0,8(sp)
    8001d796:	6105                	addi	sp,sp,32
    8001d798:	8082                	ret

000000008001d79a <.LBB0_5>:
    PLIC_BASE + 0x2080 + hart_id * 0x100
    8001d79a:	0000e517          	auipc	a0,0xe
    8001d79e:	f1650513          	addi	a0,a0,-234 # 8002b6b0 <str.0>

000000008001d7a2 <.LBB0_6>:
    8001d7a2:	0000e617          	auipc	a2,0xe
    8001d7a6:	ef660613          	addi	a2,a2,-266 # 8002b698 <.L__unnamed_1>
    8001d7aa:	02100593          	li	a1,33
    8001d7ae:	00005097          	auipc	ra,0x5
    8001d7b2:	94e080e7          	jalr	-1714(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008001d7b8 <.LBB0_7>:
    8001d7b8:	0000e517          	auipc	a0,0xe
    8001d7bc:	f3850513          	addi	a0,a0,-200 # 8002b6f0 <str.1>

000000008001d7c0 <.LBB0_8>:
    8001d7c0:	0000e617          	auipc	a2,0xe
    8001d7c4:	f1860613          	addi	a2,a2,-232 # 8002b6d8 <.L__unnamed_2>
    8001d7c8:	45f1                	li	a1,28
    8001d7ca:	00005097          	auipc	ra,0x5
    8001d7ce:	932080e7          	jalr	-1742(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel6driver4plic14PLIC_SPRIORITY17h6633467d20099d1cE:

000000008001d7d4 <_ZN6kernel6driver4plic14PLIC_SPRIORITY17h6633467d20099d1cE>:

fn PLIC_MPRIORITY(hart_id: usize) -> usize {
    PLIC_BASE + 0x200000 + hart_id * 0x2000
}

fn PLIC_SPRIORITY(hart_id: usize) -> usize {
    8001d7d4:	1101                	addi	sp,sp,-32
    8001d7d6:	85aa                	mv	a1,a0
    8001d7d8:	ec2e                	sd	a1,24(sp)
    8001d7da:	4505                	li	a0,1
    8001d7dc:	154e                	slli	a0,a0,0x33
    8001d7de:	157d                	addi	a0,a0,-1
    PLIC_BASE + 0x201000 + hart_id * 0x2000
    8001d7e0:	8d6d                	and	a0,a0,a1
    8001d7e2:	00d59613          	slli	a2,a1,0xd
    8001d7e6:	e832                	sd	a2,16(sp)
    8001d7e8:	00b51e63          	bne	a0,a1,8001d804 <.LBB1_5>
    8001d7ec:	a009                	j	8001d7ee <_ZN6kernel6driver4plic14PLIC_SPRIORITY17h6633467d20099d1cE+0x1a>
    8001d7ee:	65c2                	ld	a1,16(sp)
    8001d7f0:	0c201537          	lui	a0,0xc201
    8001d7f4:	952e                	add	a0,a0,a1
    8001d7f6:	e42a                	sd	a0,8(sp)
    8001d7f8:	02b56563          	bltu	a0,a1,8001d822 <.LBB1_7>
    8001d7fc:	a009                	j	8001d7fe <_ZN6kernel6driver4plic14PLIC_SPRIORITY17h6633467d20099d1cE+0x2a>
}
    8001d7fe:	6522                	ld	a0,8(sp)
    8001d800:	6105                	addi	sp,sp,32
    8001d802:	8082                	ret

000000008001d804 <.LBB1_5>:
    PLIC_BASE + 0x201000 + hart_id * 0x2000
    8001d804:	0000e517          	auipc	a0,0xe
    8001d808:	eac50513          	addi	a0,a0,-340 # 8002b6b0 <str.0>

000000008001d80c <.LBB1_6>:
    8001d80c:	0000e617          	auipc	a2,0xe
    8001d810:	f0460613          	addi	a2,a2,-252 # 8002b710 <.L__unnamed_3>
    8001d814:	02100593          	li	a1,33
    8001d818:	00005097          	auipc	ra,0x5
    8001d81c:	8e4080e7          	jalr	-1820(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008001d822 <.LBB1_7>:
    8001d822:	0000e517          	auipc	a0,0xe
    8001d826:	ece50513          	addi	a0,a0,-306 # 8002b6f0 <str.1>

000000008001d82a <.LBB1_8>:
    8001d82a:	0000e617          	auipc	a2,0xe
    8001d82e:	efe60613          	addi	a2,a2,-258 # 8002b728 <.L__unnamed_4>
    8001d832:	45f1                	li	a1,28
    8001d834:	00005097          	auipc	ra,0x5
    8001d838:	8c8080e7          	jalr	-1848(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel6driver4plic11PLIC_SCLAIM17h917e90647b3a6232E:

000000008001d83e <_ZN6kernel6driver4plic11PLIC_SCLAIM17h917e90647b3a6232E>:

fn PLIC_MCLAIM(hart_id: usize) -> usize {
    PLIC_BASE + 0x200004 + hart_id * 0x2000
}

fn PLIC_SCLAIM(hart_id: usize) -> usize {
    8001d83e:	1101                	addi	sp,sp,-32
    8001d840:	85aa                	mv	a1,a0
    8001d842:	ec2e                	sd	a1,24(sp)
    8001d844:	4505                	li	a0,1
    8001d846:	154e                	slli	a0,a0,0x33
    8001d848:	157d                	addi	a0,a0,-1
    PLIC_BASE + 0x201004 + hart_id * 0x2000
    8001d84a:	8d6d                	and	a0,a0,a1
    8001d84c:	00d59613          	slli	a2,a1,0xd
    8001d850:	e832                	sd	a2,16(sp)
    8001d852:	00b51f63          	bne	a0,a1,8001d870 <.LBB2_5>
    8001d856:	a009                	j	8001d858 <_ZN6kernel6driver4plic11PLIC_SCLAIM17h917e90647b3a6232E+0x1a>
    8001d858:	65c2                	ld	a1,16(sp)
    8001d85a:	0c201537          	lui	a0,0xc201
    8001d85e:	2511                	addiw	a0,a0,4
    8001d860:	952e                	add	a0,a0,a1
    8001d862:	e42a                	sd	a0,8(sp)
    8001d864:	02b56563          	bltu	a0,a1,8001d88e <.LBB2_7>
    8001d868:	a009                	j	8001d86a <_ZN6kernel6driver4plic11PLIC_SCLAIM17h917e90647b3a6232E+0x2c>
}
    8001d86a:	6522                	ld	a0,8(sp)
    8001d86c:	6105                	addi	sp,sp,32
    8001d86e:	8082                	ret

000000008001d870 <.LBB2_5>:
    PLIC_BASE + 0x201004 + hart_id * 0x2000
    8001d870:	0000e517          	auipc	a0,0xe
    8001d874:	e4050513          	addi	a0,a0,-448 # 8002b6b0 <str.0>

000000008001d878 <.LBB2_6>:
    8001d878:	0000e617          	auipc	a2,0xe
    8001d87c:	ec860613          	addi	a2,a2,-312 # 8002b740 <.L__unnamed_5>
    8001d880:	02100593          	li	a1,33
    8001d884:	00005097          	auipc	ra,0x5
    8001d888:	878080e7          	jalr	-1928(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008001d88e <.LBB2_7>:
    8001d88e:	0000e517          	auipc	a0,0xe
    8001d892:	e6250513          	addi	a0,a0,-414 # 8002b6f0 <str.1>

000000008001d896 <.LBB2_8>:
    8001d896:	0000e617          	auipc	a2,0xe
    8001d89a:	ec260613          	addi	a2,a2,-318 # 8002b758 <.L__unnamed_6>
    8001d89e:	45f1                	li	a1,28
    8001d8a0:	00005097          	auipc	ra,0x5
    8001d8a4:	85c080e7          	jalr	-1956(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel6driver4plic9plic_init17he281b1081f5a24ddE:

000000008001d8aa <_ZN6kernel6driver4plic9plic_init17he281b1081f5a24ddE>:

pub fn plic_init() {
    8001d8aa:	1141                	addi	sp,sp,-16
    8001d8ac:	e406                	sd	ra,8(sp)
    8001d8ae:	0c000537          	lui	a0,0xc000
    8001d8b2:	0285051b          	addiw	a0,a0,40
    8001d8b6:	4585                	li	a1,1
    // set desired IRQ priorities non-zero (otherwise disable)
    write(PLIC_BASE + (UART0_IRQ * 4) as usize, 1);
    8001d8b8:	00000097          	auipc	ra,0x0
    8001d8bc:	10c080e7          	jalr	268(ra) # 8001d9c4 <_ZN6kernel6driver4plic5write17h05d815ac827a7212E>
    8001d8c0:	a009                	j	8001d8c2 <_ZN6kernel6driver4plic9plic_init17he281b1081f5a24ddE+0x18>
    8001d8c2:	0c000537          	lui	a0,0xc000
    8001d8c6:	2511                	addiw	a0,a0,4
    8001d8c8:	4585                	li	a1,1
    write(PLIC_BASE + (VIRTIO0_IRQ * 4) as usize, 1);
    8001d8ca:	00000097          	auipc	ra,0x0
    8001d8ce:	0fa080e7          	jalr	250(ra) # 8001d9c4 <_ZN6kernel6driver4plic5write17h05d815ac827a7212E>
    8001d8d2:	a009                	j	8001d8d4 <_ZN6kernel6driver4plic9plic_init17he281b1081f5a24ddE+0x2a>
}
    8001d8d4:	60a2                	ld	ra,8(sp)
    8001d8d6:	0141                	addi	sp,sp,16
    8001d8d8:	8082                	ret

Disassembly of section .text._ZN6kernel6driver4plic14plic_init_hart17he37af6da421066b1E:

000000008001d8da <_ZN6kernel6driver4plic14plic_init_hart17he37af6da421066b1E>:

pub fn plic_init_hart() {
    8001d8da:	7179                	addi	sp,sp,-48
    let hart_id = unsafe{ cpuid() };
    8001d8dc:	f406                	sd	ra,40(sp)
    8001d8de:	ffff4097          	auipc	ra,0xffff4
    8001d8e2:	0e4080e7          	jalr	228(ra) # 800119c2 <_ZN6kernel7process3cpu5cpuid17h605093a6a9a60164E>
    8001d8e6:	85aa                	mv	a1,a0
    8001d8e8:	ec2e                	sd	a1,24(sp)
    8001d8ea:	f02a                	sd	a0,32(sp)
    8001d8ec:	a009                	j	8001d8ee <_ZN6kernel6driver4plic14plic_init_hart17he37af6da421066b1E+0x14>

    // Set UART's enable bit for this hart's S-mode. 
    write(PLIC_SENABLE(hart_id), (1 << UART0_IRQ) | (1 << VIRTIO0_IRQ));
    8001d8ee:	6562                	ld	a0,24(sp)
    8001d8f0:	00000097          	auipc	ra,0x0
    8001d8f4:	e76080e7          	jalr	-394(ra) # 8001d766 <_ZN6kernel6driver4plic12PLIC_SENABLE17h7b6da31aa84dc734E>
    8001d8f8:	e82a                	sd	a0,16(sp)
    8001d8fa:	a009                	j	8001d8fc <_ZN6kernel6driver4plic14plic_init_hart17he37af6da421066b1E+0x22>
    8001d8fc:	6542                	ld	a0,16(sp)
    8001d8fe:	40200593          	li	a1,1026
    8001d902:	00000097          	auipc	ra,0x0
    8001d906:	0c2080e7          	jalr	194(ra) # 8001d9c4 <_ZN6kernel6driver4plic5write17h05d815ac827a7212E>
    8001d90a:	a009                	j	8001d90c <_ZN6kernel6driver4plic14plic_init_hart17he37af6da421066b1E+0x32>

    // Set this hart's S-mode pirority threshold to 0. 
    write(PLIC_SPRIORITY(hart_id), 0);
    8001d90c:	6562                	ld	a0,24(sp)
    8001d90e:	00000097          	auipc	ra,0x0
    8001d912:	ec6080e7          	jalr	-314(ra) # 8001d7d4 <_ZN6kernel6driver4plic14PLIC_SPRIORITY17h6633467d20099d1cE>
    8001d916:	e42a                	sd	a0,8(sp)
    8001d918:	a009                	j	8001d91a <_ZN6kernel6driver4plic14plic_init_hart17he37af6da421066b1E+0x40>
    8001d91a:	6522                	ld	a0,8(sp)
    8001d91c:	4581                	li	a1,0
    8001d91e:	00000097          	auipc	ra,0x0
    8001d922:	0a6080e7          	jalr	166(ra) # 8001d9c4 <_ZN6kernel6driver4plic5write17h05d815ac827a7212E>
    8001d926:	a009                	j	8001d928 <_ZN6kernel6driver4plic14plic_init_hart17he37af6da421066b1E+0x4e>
}
    8001d928:	70a2                	ld	ra,40(sp)
    8001d92a:	6145                	addi	sp,sp,48
    8001d92c:	8082                	ret

Disassembly of section .text._ZN6kernel6driver4plic10plic_claim17h6764dad227b44c96E:

000000008001d92e <_ZN6kernel6driver4plic10plic_claim17h6764dad227b44c96E>:

/// Ask the PLIC what interrupt we should serve. 
pub fn plic_claim() -> Option<u32> {
    8001d92e:	7139                	addi	sp,sp,-64
    let hart_id = unsafe {
        cpuid()
    8001d930:	fc06                	sd	ra,56(sp)
    8001d932:	ffff4097          	auipc	ra,0xffff4
    8001d936:	090080e7          	jalr	144(ra) # 800119c2 <_ZN6kernel7process3cpu5cpuid17h605093a6a9a60164E>
    8001d93a:	85aa                	mv	a1,a0
    8001d93c:	ec2e                	sd	a1,24(sp)
    8001d93e:	f42a                	sd	a0,40(sp)
    8001d940:	a009                	j	8001d942 <_ZN6kernel6driver4plic10plic_claim17h6764dad227b44c96E+0x14>
    };
    let interrupt = read(PLIC_SCLAIM(hart_id));
    8001d942:	6562                	ld	a0,24(sp)
    8001d944:	00000097          	auipc	ra,0x0
    8001d948:	efa080e7          	jalr	-262(ra) # 8001d83e <_ZN6kernel6driver4plic11PLIC_SCLAIM17h917e90647b3a6232E>
    8001d94c:	e82a                	sd	a0,16(sp)
    8001d94e:	a009                	j	8001d950 <_ZN6kernel6driver4plic10plic_claim17h6764dad227b44c96E+0x22>
    8001d950:	6542                	ld	a0,16(sp)
    8001d952:	00000097          	auipc	ra,0x0
    8001d956:	08a080e7          	jalr	138(ra) # 8001d9dc <_ZN6kernel6driver4plic4read17h33375bd18868bbd4E>
    8001d95a:	85aa                	mv	a1,a0
    8001d95c:	e42e                	sd	a1,8(sp)
    8001d95e:	da2a                	sw	a0,52(sp)
    8001d960:	a009                	j	8001d962 <_ZN6kernel6driver4plic10plic_claim17h6764dad227b44c96E+0x34>
    if interrupt == 0 {
    8001d962:	6522                	ld	a0,8(sp)
    8001d964:	2501                	sext.w	a0,a0
    8001d966:	4581                	li	a1,0
    8001d968:	00b51663          	bne	a0,a1,8001d974 <_ZN6kernel6driver4plic10plic_claim17h6764dad227b44c96E+0x46>
    8001d96c:	a009                	j	8001d96e <_ZN6kernel6driver4plic10plic_claim17h6764dad227b44c96E+0x40>
    8001d96e:	4501                	li	a0,0
        None
    8001d970:	d02a                	sw	a0,32(sp)
    if interrupt == 0 {
    8001d972:	a031                	j	8001d97e <_ZN6kernel6driver4plic10plic_claim17h6764dad227b44c96E+0x50>
    } else {
        Some(interrupt)
    8001d974:	6522                	ld	a0,8(sp)
    8001d976:	d22a                	sw	a0,36(sp)
    8001d978:	4505                	li	a0,1
    8001d97a:	d02a                	sw	a0,32(sp)
    if interrupt == 0 {
    8001d97c:	a009                	j	8001d97e <_ZN6kernel6driver4plic10plic_claim17h6764dad227b44c96E+0x50>
    }
}
    8001d97e:	5502                	lw	a0,32(sp)
    8001d980:	5592                	lw	a1,36(sp)
    8001d982:	70e2                	ld	ra,56(sp)
    8001d984:	6121                	addi	sp,sp,64
    8001d986:	8082                	ret

Disassembly of section .text._ZN6kernel6driver4plic13plic_complete17hc3a23eee8594fbc3E:

000000008001d988 <_ZN6kernel6driver4plic13plic_complete17hc3a23eee8594fbc3E>:

/// Tell the PLIC we've served the IRQ
pub fn plic_complete(interrupt: u32) {
    8001d988:	7179                	addi	sp,sp,-48
    8001d98a:	f406                	sd	ra,40(sp)
    8001d98c:	85aa                	mv	a1,a0
    8001d98e:	e42e                	sd	a1,8(sp)
    8001d990:	ce2a                	sw	a0,28(sp)
    let hart_id = unsafe {
        cpuid()
    8001d992:	ffff4097          	auipc	ra,0xffff4
    8001d996:	030080e7          	jalr	48(ra) # 800119c2 <_ZN6kernel7process3cpu5cpuid17h605093a6a9a60164E>
    8001d99a:	85aa                	mv	a1,a0
    8001d99c:	e82e                	sd	a1,16(sp)
    8001d99e:	f02a                	sd	a0,32(sp)
    8001d9a0:	a009                	j	8001d9a2 <_ZN6kernel6driver4plic13plic_complete17hc3a23eee8594fbc3E+0x1a>
    };
    write(PLIC_SCLAIM(hart_id), interrupt);
    8001d9a2:	6542                	ld	a0,16(sp)
    8001d9a4:	00000097          	auipc	ra,0x0
    8001d9a8:	e9a080e7          	jalr	-358(ra) # 8001d83e <_ZN6kernel6driver4plic11PLIC_SCLAIM17h917e90647b3a6232E>
    8001d9ac:	e02a                	sd	a0,0(sp)
    8001d9ae:	a009                	j	8001d9b0 <_ZN6kernel6driver4plic13plic_complete17hc3a23eee8594fbc3E+0x28>
    8001d9b0:	65a2                	ld	a1,8(sp)
    8001d9b2:	6502                	ld	a0,0(sp)
    8001d9b4:	00000097          	auipc	ra,0x0
    8001d9b8:	010080e7          	jalr	16(ra) # 8001d9c4 <_ZN6kernel6driver4plic5write17h05d815ac827a7212E>
    8001d9bc:	a009                	j	8001d9be <_ZN6kernel6driver4plic13plic_complete17hc3a23eee8594fbc3E+0x36>
}
    8001d9be:	70a2                	ld	ra,40(sp)
    8001d9c0:	6145                	addi	sp,sp,48
    8001d9c2:	8082                	ret

Disassembly of section .text._ZN6kernel6driver4plic5write17h05d815ac827a7212E:

000000008001d9c4 <_ZN6kernel6driver4plic5write17h05d815ac827a7212E>:


fn write(addr: usize, val: u32) {
    8001d9c4:	1101                	addi	sp,sp,-32
    8001d9c6:	ec06                	sd	ra,24(sp)
    8001d9c8:	e42a                	sd	a0,8(sp)
    8001d9ca:	ca2e                	sw	a1,20(sp)
    unsafe {
        ptr::write(addr as *mut u32, val);
    8001d9cc:	ffffb097          	auipc	ra,0xffffb
    8001d9d0:	d54080e7          	jalr	-684(ra) # 80018720 <_ZN4core3ptr5write17h10d6d8799e54bf75E>
    8001d9d4:	a009                	j	8001d9d6 <_ZN6kernel6driver4plic5write17h05d815ac827a7212E+0x12>
    }
}
    8001d9d6:	60e2                	ld	ra,24(sp)
    8001d9d8:	6105                	addi	sp,sp,32
    8001d9da:	8082                	ret

Disassembly of section .text._ZN6kernel6driver4plic4read17h33375bd18868bbd4E:

000000008001d9dc <_ZN6kernel6driver4plic4read17h33375bd18868bbd4E>:

fn read(addr: usize) -> u32 {
    8001d9dc:	1101                	addi	sp,sp,-32
    8001d9de:	ec06                	sd	ra,24(sp)
    8001d9e0:	e82a                	sd	a0,16(sp)
    unsafe {
        ptr::read(addr as *const u32)
    8001d9e2:	ffffb097          	auipc	ra,0xffffb
    8001d9e6:	b4e080e7          	jalr	-1202(ra) # 80018530 <_ZN4core3ptr4read17h97f5e0e151e0fdc4E>
    8001d9ea:	e42a                	sd	a0,8(sp)
    8001d9ec:	a009                	j	8001d9ee <_ZN6kernel6driver4plic4read17h33375bd18868bbd4E+0x12>
    }
    8001d9ee:	6522                	ld	a0,8(sp)
    8001d9f0:	60e2                	ld	ra,24(sp)
    8001d9f2:	6105                	addi	sp,sp,32
    8001d9f4:	8082                	ret

Disassembly of section .text._ZN6kernel6memory14copy_to_kernel17hd4730b664342d99cE:

000000008001d9f6 <_ZN6kernel6memory14copy_to_kernel17hd4730b664342d99cE>:

/// Copy from either a user address, or kernel address,
/// depending on is_user. 
/// Returns Result<(), &'static str>
/// 从用户或者内核地址拷贝到内核中
pub fn copy_to_kernel(
    8001d9f6:	7175                	addi	sp,sp,-144
    8001d9f8:	e506                	sd	ra,136(sp)
    8001d9fa:	f036                	sd	a3,32(sp)
    8001d9fc:	f432                	sd	a2,40(sp)
    8001d9fe:	f82a                	sd	a0,48(sp)
    8001da00:	872e                	mv	a4,a1
    8001da02:	fc3a                	sd	a4,56(sp)
    8001da04:	ecaa                	sd	a0,88(sp)
    8001da06:	06b103a3          	sb	a1,103(sp)
    8001da0a:	f4b2                	sd	a2,104(sp)
    8001da0c:	f8b6                	sd	a3,112(sp)

000000008001da0e <.LBB0_9>:
    is_user: bool, 
    src: usize, 
    len: usize
) -> Result<(), &'static str>{
    unsafe {
        let my_proc =  CPU_MANAGER.myproc().unwrap();
    8001da0e:	00046517          	auipc	a0,0x46
    8001da12:	73250513          	addi	a0,a0,1842 # 80064140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    8001da16:	ffff4097          	auipc	ra,0xffff4
    8001da1a:	014080e7          	jalr	20(ra) # 80011a2a <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    8001da1e:	e0aa                	sd	a0,64(sp)
    8001da20:	a009                	j	8001da22 <.LBB0_9+0x14>
    8001da22:	6506                	ld	a0,64(sp)

000000008001da24 <.LBB0_10>:
    8001da24:	0000e597          	auipc	a1,0xe
    8001da28:	d6458593          	addi	a1,a1,-668 # 8002b788 <.L__unnamed_1>
    8001da2c:	ffff1097          	auipc	ra,0xffff1
    8001da30:	290080e7          	jalr	656(ra) # 8000ecbc <_ZN4core6option15Option$LT$T$GT$6unwrap17h81f0c84c54a80648E>
    8001da34:	85aa                	mv	a1,a0
    8001da36:	ec2e                	sd	a1,24(sp)
    8001da38:	fcaa                	sd	a0,120(sp)
    8001da3a:	a009                	j	8001da3c <.LBB0_10+0x18>
    8001da3c:	7562                	ld	a0,56(sp)
    8001da3e:	4581                	li	a1,0
        
        if is_user {
    8001da40:	00b50b63          	beq	a0,a1,8001da56 <.LBB0_10+0x32>
    8001da44:	a009                	j	8001da46 <.LBB0_10+0x22>
            let page_table = my_proc.pagetable.as_mut().unwrap();
    8001da46:	6562                	ld	a0,24(sp)
    8001da48:	6d08                	ld	a0,24(a0)
    8001da4a:	fffef097          	auipc	ra,0xfffef
    8001da4e:	09e080e7          	jalr	158(ra) # 8000cae8 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17hfc3d5eeea9dab8e4E>
    8001da52:	e82a                	sd	a0,16(sp)
    8001da54:	a809                	j	8001da66 <.LBB0_10+0x42>
                dst,
                src,
                len
            )
        } else {
            ptr::copy(
    8001da56:	7602                	ld	a2,32(sp)
    8001da58:	75a2                	ld	a1,40(sp)
    8001da5a:	7542                	ld	a0,48(sp)
    8001da5c:	00007097          	auipc	ra,0x7
    8001da60:	5f4080e7          	jalr	1524(ra) # 80025050 <memmove>
    8001da64:	a80d                	j	8001da96 <.LBB0_11+0x2e>
            let page_table = my_proc.pagetable.as_mut().unwrap();
    8001da66:	6542                	ld	a0,16(sp)

000000008001da68 <.LBB0_11>:
    8001da68:	0000e597          	auipc	a1,0xe
    8001da6c:	d3858593          	addi	a1,a1,-712 # 8002b7a0 <.L__unnamed_2>
    8001da70:	ffff1097          	auipc	ra,0xffff1
    8001da74:	0d0080e7          	jalr	208(ra) # 8000eb40 <_ZN4core6option15Option$LT$T$GT$6unwrap17h2b22556a60663957E>
    8001da78:	85aa                	mv	a1,a0
    8001da7a:	e42e                	sd	a1,8(sp)
    8001da7c:	e12a                	sd	a0,128(sp)
    8001da7e:	a009                	j	8001da80 <.LBB0_11+0x18>
            page_table.copy_in(
    8001da80:	7682                	ld	a3,32(sp)
    8001da82:	7622                	ld	a2,40(sp)
    8001da84:	75c2                	ld	a1,48(sp)
    8001da86:	6522                	ld	a0,8(sp)
    8001da88:	ffffa097          	auipc	ra,0xffffa
    8001da8c:	1ba080e7          	jalr	442(ra) # 80017c42 <_ZN6kernel6memory7mapping10page_table9PageTable7copy_in17h459a5354b5a5ab11E>
    8001da90:	e4aa                	sd	a0,72(sp)
    8001da92:	e8ae                	sd	a1,80(sp)
    8001da94:	a021                	j	8001da9c <.LBB0_11+0x34>
    8001da96:	4501                	li	a0,0
                src as *const u8, 
                dst as *mut u8, 
                len
            );
            Ok(())
    8001da98:	e4aa                	sd	a0,72(sp)
        if is_user {
    8001da9a:	a009                	j	8001da9c <.LBB0_11+0x34>
        }
    }
}
    8001da9c:	6526                	ld	a0,72(sp)
    8001da9e:	65c6                	ld	a1,80(sp)
    8001daa0:	60aa                	ld	ra,136(sp)
    8001daa2:	6149                	addi	sp,sp,144
    8001daa4:	8082                	ret

Disassembly of section .text._ZN6kernel6memory16copy_from_kernel17hf0969988b3a5fbc0E:

000000008001daa6 <_ZN6kernel6memory16copy_from_kernel17hf0969988b3a5fbc0E>:

/// Copy to either a user address, or kernel address,
/// depending on usr_dst. 
/// Returns 0 on success, -1 on error. 
/// 如果is_user是true的话，表明dst是用户的虚拟地址，否则是内核的虚拟地址
pub fn copy_from_kernel(
    8001daa6:	7171                	addi	sp,sp,-176
    8001daa8:	f506                	sd	ra,168(sp)
    8001daaa:	f436                	sd	a3,40(sp)
    8001daac:	f832                	sd	a2,48(sp)
    8001daae:	fc2e                	sd	a1,56(sp)
    8001dab0:	872a                	mv	a4,a0
    8001dab2:	e0ba                	sd	a4,64(sp)
    8001dab4:	06a10fa3          	sb	a0,127(sp)
    8001dab8:	e12e                	sd	a1,128(sp)
    8001daba:	e532                	sd	a2,136(sp)
    8001dabc:	e936                	sd	a3,144(sp)

000000008001dabe <.LBB1_12>:
    dst: usize,
    src: *const u8,
    len: usize
) -> Result<(), &'static str> {
    unsafe{
        let p = CPU_MANAGER.myproc().unwrap();
    8001dabe:	00046517          	auipc	a0,0x46
    8001dac2:	68250513          	addi	a0,a0,1666 # 80064140 <_ZN6kernel7process3cpu11CPU_MANAGER17h1e19e3b88580bd28E>
    8001dac6:	ffff4097          	auipc	ra,0xffff4
    8001daca:	f64080e7          	jalr	-156(ra) # 80011a2a <_ZN6kernel7process3cpu10CPUManager6myproc17ha7f4be725669dfb9E>
    8001dace:	e4aa                	sd	a0,72(sp)
    8001dad0:	a009                	j	8001dad2 <.LBB1_12+0x14>
    8001dad2:	6526                	ld	a0,72(sp)

000000008001dad4 <.LBB1_13>:
    8001dad4:	0000e597          	auipc	a1,0xe
    8001dad8:	ce458593          	addi	a1,a1,-796 # 8002b7b8 <.L__unnamed_3>
    8001dadc:	ffff1097          	auipc	ra,0xffff1
    8001dae0:	1e0080e7          	jalr	480(ra) # 8000ecbc <_ZN4core6option15Option$LT$T$GT$6unwrap17h81f0c84c54a80648E>
    8001dae4:	85aa                	mv	a1,a0
    8001dae6:	f02e                	sd	a1,32(sp)
    8001dae8:	ed2a                	sd	a0,152(sp)
    8001daea:	a009                	j	8001daec <.LBB1_13+0x18>
    8001daec:	6506                	ld	a0,64(sp)
    8001daee:	4581                	li	a1,0
        if is_user {
    8001daf0:	00b50b63          	beq	a0,a1,8001db06 <.LBB1_13+0x32>
    8001daf4:	a009                	j	8001daf6 <.LBB1_13+0x22>
            let page_table = p.pagetable.as_mut().unwrap();
    8001daf6:	7502                	ld	a0,32(sp)
    8001daf8:	6d08                	ld	a0,24(a0)
    8001dafa:	fffef097          	auipc	ra,0xfffef
    8001dafe:	fee080e7          	jalr	-18(ra) # 8000cae8 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17hfc3d5eeea9dab8e4E>
    8001db02:	ec2a                	sd	a0,24(sp)
    8001db04:	a809                	j	8001db16 <.LBB1_13+0x42>
                    dst,
                    src,
                    len
                )
        } else {
            let mut buf = vec![0u8;len];
    8001db06:	7622                	ld	a2,40(sp)
    8001db08:	1088                	addi	a0,sp,96
    8001db0a:	4581                	li	a1,0
    8001db0c:	ffff9097          	auipc	ra,0xffff9
    8001db10:	04a080e7          	jalr	74(ra) # 80016b56 <_ZN5alloc3vec9from_elem17h254506728307fd13E>
    8001db14:	a80d                	j	8001db46 <.LBB1_14+0x2e>
            let page_table = p.pagetable.as_mut().unwrap();
    8001db16:	6562                	ld	a0,24(sp)

000000008001db18 <.LBB1_14>:
    8001db18:	0000e597          	auipc	a1,0xe
    8001db1c:	cb858593          	addi	a1,a1,-840 # 8002b7d0 <.L__unnamed_4>
    8001db20:	ffff1097          	auipc	ra,0xffff1
    8001db24:	020080e7          	jalr	32(ra) # 8000eb40 <_ZN4core6option15Option$LT$T$GT$6unwrap17h2b22556a60663957E>
    8001db28:	85aa                	mv	a1,a0
    8001db2a:	e82e                	sd	a1,16(sp)
    8001db2c:	f12a                	sd	a0,160(sp)
    8001db2e:	a009                	j	8001db30 <.LBB1_14+0x18>
            page_table
    8001db30:	76a2                	ld	a3,40(sp)
    8001db32:	7642                	ld	a2,48(sp)
    8001db34:	75e2                	ld	a1,56(sp)
    8001db36:	6542                	ld	a0,16(sp)
    8001db38:	ffffa097          	auipc	ra,0xffffa
    8001db3c:	eda080e7          	jalr	-294(ra) # 80017a12 <_ZN6kernel6memory7mapping10page_table9PageTable8copy_out17h55d0f27ee3680817E>
    8001db40:	e8aa                	sd	a0,80(sp)
    8001db42:	ecae                	sd	a1,88(sp)
    8001db44:	a081                	j	8001db84 <.LBB1_14+0x6c>
    8001db46:	1088                	addi	a0,sp,96
            ptr::copy(src as *const u8, buf.as_mut_ptr(), len);
    8001db48:	ffff9097          	auipc	ra,0xffff9
    8001db4c:	e16080e7          	jalr	-490(ra) # 8001695e <_ZN5alloc3vec16Vec$LT$T$C$A$GT$10as_mut_ptr17h2d512420264161fdE>
    8001db50:	e42a                	sd	a0,8(sp)
    8001db52:	a009                	j	8001db54 <.LBB1_14+0x3c>
    8001db54:	7622                	ld	a2,40(sp)
    8001db56:	75c2                	ld	a1,48(sp)
    8001db58:	6522                	ld	a0,8(sp)
    8001db5a:	00007097          	auipc	ra,0x7
    8001db5e:	4f6080e7          	jalr	1270(ra) # 80025050 <memmove>
    8001db62:	a009                	j	8001db64 <.LBB1_14+0x4c>
            ptr::copy(
    8001db64:	7622                	ld	a2,40(sp)
    8001db66:	75c2                	ld	a1,48(sp)
    8001db68:	7562                	ld	a0,56(sp)
    8001db6a:	00007097          	auipc	ra,0x7
    8001db6e:	4e6080e7          	jalr	1254(ra) # 80025050 <memmove>
    8001db72:	a009                	j	8001db74 <.LBB1_14+0x5c>
    8001db74:	4501                	li	a0,0
                src as *const u8, 
                dst as *mut u8, 
                len
            );
            Ok(())
    8001db76:	e8aa                	sd	a0,80(sp)
    8001db78:	1088                	addi	a0,sp,96
        }
    8001db7a:	fffe9097          	auipc	ra,0xfffe9
    8001db7e:	376080e7          	jalr	886(ra) # 80006ef0 <_ZN4core3ptr46drop_in_place$LT$alloc..vec..Vec$LT$u8$GT$$GT$17hc049a0af331ff31cE>
    8001db82:	a009                	j	8001db84 <.LBB1_14+0x6c>
    }

    8001db84:	6546                	ld	a0,80(sp)
    8001db86:	65e6                	ld	a1,88(sp)
    8001db88:	70aa                	ld	ra,168(sp)
    8001db8a:	614d                	addi	sp,sp,176
    8001db8c:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h188cc5d34f3b14d9E:

000000008001db8e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h188cc5d34f3b14d9E>:
    pub const fn is_null(self) -> bool {
    8001db8e:	1101                	addi	sp,sp,-32
    8001db90:	ec06                	sd	ra,24(sp)
    8001db92:	e82a                	sd	a0,16(sp)
        (self as *mut u8).guaranteed_eq(null_mut())
    8001db94:	e42a                	sd	a0,8(sp)
    8001db96:	a009                	j	8001db98 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h188cc5d34f3b14d9E+0xa>
    8001db98:	6522                	ld	a0,8(sp)
    8001db9a:	4581                	li	a1,0
    8001db9c:	00004097          	auipc	ra,0x4
    8001dba0:	326080e7          	jalr	806(ra) # 80021ec2 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$13guaranteed_eq17h32ea8c99c0b8220dE>
    8001dba4:	e02a                	sd	a0,0(sp)
    8001dba6:	a009                	j	8001dba8 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h188cc5d34f3b14d9E+0x1a>
    }
    8001dba8:	6502                	ld	a0,0(sp)
    8001dbaa:	60e2                	ld	ra,24(sp)
    8001dbac:	6105                	addi	sp,sp,32
    8001dbae:	8082                	ret

Disassembly of section .text._ZN6kernel6printf6_print17hbf6f661b066aad08E:

000000008001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>:

use crate::driver::uart::UART;
use crate::lock::spinlock::Spinlock;
use crate::shutdown::*;

pub fn _print(args: fmt::Arguments) {
    8001dbb0:	711d                	addi	sp,sp,-96
    8001dbb2:	ec86                	sd	ra,88(sp)
    8001dbb4:	ec2a                	sd	a0,24(sp)

000000008001dbb6 <.LBB0_6>:
    use fmt::Write;
    let mut uart = UART.acquire();
    8001dbb6:	0003e517          	auipc	a0,0x3e
    8001dbba:	92a50513          	addi	a0,a0,-1750 # 8005b4e0 <_ZN6kernel6driver4uart4UART17h0708b3e179d548ddE>
    8001dbbe:	ffff2097          	auipc	ra,0xffff2
    8001dbc2:	456080e7          	jalr	1110(ra) # 80010014 <_ZN6kernel4lock8spinlock17Spinlock$LT$T$GT$7acquire17h007ac3682185ef97E>
    8001dbc6:	f02a                	sd	a0,32(sp)
    8001dbc8:	a009                	j	8001dbca <.LBB0_6+0x14>
    8001dbca:	1008                	addi	a0,sp,32
    uart.write_fmt(args).unwrap();
    8001dbcc:	ffff4097          	auipc	ra,0xffff4
    8001dbd0:	882080e7          	jalr	-1918(ra) # 8001144e <_ZN93_$LT$kernel..lock..spinlock..SpinlockGuard$LT$T$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17hce69ac52326dbcadE>
    8001dbd4:	e82a                	sd	a0,16(sp)
    8001dbd6:	a009                	j	8001dbd8 <.LBB0_6+0x22>
    8001dbd8:	6542                	ld	a0,16(sp)
    8001dbda:	65e2                	ld	a1,24(sp)
    8001dbdc:	7590                	ld	a2,40(a1)
    8001dbde:	e8b2                	sd	a2,80(sp)
    8001dbe0:	7190                	ld	a2,32(a1)
    8001dbe2:	e4b2                	sd	a2,72(sp)
    8001dbe4:	6d90                	ld	a2,24(a1)
    8001dbe6:	e0b2                	sd	a2,64(sp)
    8001dbe8:	6990                	ld	a2,16(a1)
    8001dbea:	fc32                	sd	a2,56(sp)
    8001dbec:	6590                	ld	a2,8(a1)
    8001dbee:	f832                	sd	a2,48(sp)
    8001dbf0:	618c                	ld	a1,0(a1)
    8001dbf2:	f42e                	sd	a1,40(sp)
    8001dbf4:	102c                	addi	a1,sp,40
    8001dbf6:	00001097          	auipc	ra,0x1
    8001dbfa:	9ba080e7          	jalr	-1606(ra) # 8001e5b0 <_ZN4core3fmt5Write9write_fmt17h7425e676f17f7351E>
    8001dbfe:	e42a                	sd	a0,8(sp)
    8001dc00:	a009                	j	8001dc02 <.LBB0_6+0x4c>
    8001dc02:	6522                	ld	a0,8(sp)

000000008001dc04 <.LBB0_7>:
    8001dc04:	0000e597          	auipc	a1,0xe
    8001dc08:	bf458593          	addi	a1,a1,-1036 # 8002b7f8 <.L__unnamed_1>
    8001dc0c:	fffef097          	auipc	ra,0xfffef
    8001dc10:	16a080e7          	jalr	362(ra) # 8000cd76 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h0d39573adfd86ec0E>
    8001dc14:	a009                	j	8001dc16 <.LBB0_7+0x12>
    drop(uart);
    8001dc16:	7502                	ld	a0,32(sp)
    8001dc18:	fffff097          	auipc	ra,0xfffff
    8001dc1c:	312080e7          	jalr	786(ra) # 8001cf2a <_ZN4core3mem4drop17h96fc0e7c88170ba8E>
    8001dc20:	a009                	j	8001dc22 <.LBB0_7+0x1e>
}
    8001dc22:	60e6                	ld	ra,88(sp)
    8001dc24:	6125                	addi	sp,sp,96
    8001dc26:	8082                	ret

Disassembly of section .text.rust_begin_unwind:

000000008001dc28 <rust_begin_unwind>:
        $crate::printf::_print(format_args!(concat!($fmt, "\n") $(,$($arg)+)?));
    }
}

#[panic_handler]
fn panic(info: &PanicInfo<'_>) -> ! {
    8001dc28:	7159                	addi	sp,sp,-112
    8001dc2a:	f486                	sd	ra,104(sp)
    8001dc2c:	e82a                	sd	a0,16(sp)
    8001dc2e:	0808                	addi	a0,sp,16
    println!("\x1b[1;31mpanic: '{}'\x1b[0m", info);
    8001dc30:	ecaa                	sd	a0,88(sp)
    8001dc32:	f0aa                	sd	a0,96(sp)

000000008001dc34 <.LBB1_5>:
    8001dc34:	fffef597          	auipc	a1,0xfffef
    8001dc38:	f3a58593          	addi	a1,a1,-198 # 8000cb6e <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h0a4be43e8f3bcf0dE>
    8001dc3c:	00001097          	auipc	ra,0x1
    8001dc40:	8ee080e7          	jalr	-1810(ra) # 8001e52a <_ZN4core3fmt10ArgumentV13new17hff1fcd65a46300b2E>
    8001dc44:	e02a                	sd	a0,0(sp)
    8001dc46:	e42e                	sd	a1,8(sp)
    8001dc48:	a009                	j	8001dc4a <.LBB1_5+0x16>
    8001dc4a:	6522                	ld	a0,8(sp)
    8001dc4c:	6582                	ld	a1,0(sp)
    8001dc4e:	e4ae                	sd	a1,72(sp)
    8001dc50:	e8aa                	sd	a0,80(sp)

000000008001dc52 <.LBB1_6>:
    8001dc52:	0000e597          	auipc	a1,0xe
    8001dc56:	bd658593          	addi	a1,a1,-1066 # 8002b828 <.L__unnamed_2>
    8001dc5a:	0828                	addi	a0,sp,24
    8001dc5c:	4609                	li	a2,2
    8001dc5e:	00b4                	addi	a3,sp,72
    8001dc60:	4705                	li	a4,1
    8001dc62:	fffe7097          	auipc	ra,0xfffe7
    8001dc66:	7d2080e7          	jalr	2002(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8001dc6a:	a009                	j	8001dc6c <.LBB1_6+0x1a>
    8001dc6c:	0828                	addi	a0,sp,24
    8001dc6e:	00000097          	auipc	ra,0x0
    8001dc72:	f42080e7          	jalr	-190(ra) # 8001dbb0 <_ZN6kernel6printf6_print17hbf6f661b066aad08E>
    8001dc76:	a009                	j	8001dc78 <.LBB1_6+0x26>
    shutdown();
    8001dc78:	fffe7097          	auipc	ra,0xfffe7
    8001dc7c:	6e4080e7          	jalr	1764(ra) # 8000535c <_ZN6kernel8shutdown8shutdown17hf11bb5dd05ff266dE>
    8001dc80:	a009                	j	8001dc82 <.LBB1_6+0x30>
    loop {}
    8001dc82:	a001                	j	8001dc82 <.LBB1_6+0x30>

Disassembly of section .text._ZN6kernel4arch5riscv8register7mideleg5write17hf36c8c211297ea03E:

000000008001dc84 <_ZN6kernel4arch5riscv8register7mideleg5write17hf36c8c211297ea03E>:
    llvm_asm!("csrr $0, mideleg":"=r"(ret):::"volatile");
    ret
}

#[inline]
pub unsafe fn write(mideleg: usize) {
    8001dc84:	1141                	addi	sp,sp,-16
    8001dc86:	e42a                	sd	a0,8(sp)
    llvm_asm!("csrw mideleg, $0"::"r"(mideleg)::"volatile");
    8001dc88:	30351073          	csrw	mideleg,a0
    8001dc8c:	0141                	addi	sp,sp,16
    8001dc8e:	8082                	ret

Disassembly of section .text._ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hdbffcc8df8ebe27dE:

000000008001dc90 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hdbffcc8df8ebe27dE>:
    fn into_iter(self) -> I {
    8001dc90:	1141                	addi	sp,sp,-16
    8001dc92:	e02a                	sd	a0,0(sp)
    8001dc94:	e42e                	sd	a1,8(sp)
    }
    8001dc96:	0141                	addi	sp,sp,16
    8001dc98:	8082                	ret

Disassembly of section .text._ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he31f6e5d3eec2be9E:

000000008001dc9a <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he31f6e5d3eec2be9E>:
    fn into_iter(self) -> I {
    8001dc9a:	1141                	addi	sp,sp,-16
    8001dc9c:	e02a                	sd	a0,0(sp)
    8001dc9e:	e42e                	sd	a1,8(sp)
    }
    8001dca0:	0141                	addi	sp,sp,16
    8001dca2:	8082                	ret

Disassembly of section .text._ZN81_$LT$core..str..iter..Chars$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17ha7c7da80d3c0bdbeE:

000000008001dca4 <_ZN81_$LT$core..str..iter..Chars$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17ha7c7da80d3c0bdbeE>:
        next_code_point(&mut self.iter).map(|ch| {
    8001dca4:	1101                	addi	sp,sp,-32
    8001dca6:	ec06                	sd	ra,24(sp)
    8001dca8:	ca2a                	sw	a0,20(sp)
            unsafe { char::from_u32_unchecked(ch) }
    8001dcaa:	ffffe097          	auipc	ra,0xffffe
    8001dcae:	71a080e7          	jalr	1818(ra) # 8001c3c4 <_ZN4core4char7convert18from_u32_unchecked17hac286a657ee2c904E>
    8001dcb2:	1502                	slli	a0,a0,0x20
    8001dcb4:	9101                	srli	a0,a0,0x20
    8001dcb6:	e42a                	sd	a0,8(sp)
    8001dcb8:	a009                	j	8001dcba <_ZN81_$LT$core..str..iter..Chars$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17ha7c7da80d3c0bdbeE+0x16>
        })
    8001dcba:	6522                	ld	a0,8(sp)
    8001dcbc:	60e2                	ld	ra,24(sp)
    8001dcbe:	6105                	addi	sp,sp,32
    8001dcc0:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register7medeleg5write17h087038b3215eaf8cE:

000000008001dcc2 <_ZN6kernel4arch5riscv8register7medeleg5write17h087038b3215eaf8cE>:
    llvm_asm!("csrr $0, medeleg":"=r"(ret):::"volatile");
    ret
}

#[inline]
pub unsafe fn write(medeleg: usize){
    8001dcc2:	1141                	addi	sp,sp,-16
    8001dcc4:	e42a                	sd	a0,8(sp)
    llvm_asm!("csrw medeleg, $0"::"r"(medeleg)::"volatile");
    8001dcc6:	30251073          	csrw	medeleg,a0
    8001dcca:	0141                	addi	sp,sp,16
    8001dccc:	8082                	ret

Disassembly of section .text._ZN4core3num21_$LT$impl$u20$u16$GT$13unchecked_add17hfa49a7085d490705E:

000000008001dcce <_ZN4core3num21_$LT$impl$u20$u16$GT$13unchecked_add17hfa49a7085d490705E>:
            issue = "none",
        )]
        #[must_use = "this returns the result of the operation, \
                      without modifying the original"]
        #[inline]
        pub unsafe fn unchecked_add(self, rhs: Self) -> Self {
    8001dcce:	1141                	addi	sp,sp,-16
    8001dcd0:	00a11523          	sh	a0,10(sp)
    8001dcd4:	00b11623          	sh	a1,12(sp)
            // SAFETY: the caller must uphold the safety contract for
            // `unchecked_add`.
            unsafe { intrinsics::unchecked_add(self, rhs) }
    8001dcd8:	952e                	add	a0,a0,a1
    8001dcda:	00a11723          	sh	a0,14(sp)
    8001dcde:	65c1                	lui	a1,0x10
    8001dce0:	35fd                	addiw	a1,a1,-1
    8001dce2:	8d6d                	and	a0,a0,a1
    8001dce4:	e02a                	sd	a0,0(sp)
    8001dce6:	a009                	j	8001dce8 <_ZN4core3num21_$LT$impl$u20$u16$GT$13unchecked_add17hfa49a7085d490705E+0x1a>
        }
    8001dce8:	6502                	ld	a0,0(sp)
    8001dcea:	0141                	addi	sp,sp,16
    8001dcec:	8082                	ret

Disassembly of section .text._ZN4core3num21_$LT$impl$u20$u32$GT$11checked_add17h28c8b802ca50f266E:

000000008001dcee <_ZN4core3num21_$LT$impl$u20$u32$GT$11checked_add17h28c8b802ca50f266E>:
        pub const fn checked_add(self, rhs: Self) -> Option<Self> {
    8001dcee:	7139                	addi	sp,sp,-64
    8001dcf0:	fc06                	sd	ra,56(sp)
    8001dcf2:	d42a                	sw	a0,40(sp)
    8001dcf4:	d62e                	sw	a1,44(sp)
            let (a, b) = self.overflowing_add(rhs);
    8001dcf6:	00000097          	auipc	ra,0x0
    8001dcfa:	05e080e7          	jalr	94(ra) # 8001dd54 <_ZN4core3num21_$LT$impl$u20$u32$GT$15overflowing_add17h6c31d0dcc95be001E>
    8001dcfe:	e82a                	sd	a0,16(sp)
    8001dd00:	ec2e                	sd	a1,24(sp)
    8001dd02:	a009                	j	8001dd04 <_ZN4core3num21_$LT$impl$u20$u32$GT$11checked_add17h28c8b802ca50f266E+0x16>
    8001dd04:	6562                	ld	a0,24(sp)
    8001dd06:	65c2                	ld	a1,16(sp)
    8001dd08:	d82e                	sw	a1,48(sp)
    8001dd0a:	8905                	andi	a0,a0,1
    8001dd0c:	e42a                	sd	a0,8(sp)
    8001dd0e:	02a10b23          	sb	a0,54(sp)
            if unlikely!(b) {None} else {Some(a)}
    8001dd12:	02a10ba3          	sb	a0,55(sp)
    8001dd16:	a009                	j	8001dd18 <_ZN4core3num21_$LT$impl$u20$u32$GT$11checked_add17h28c8b802ca50f266E+0x2a>
    8001dd18:	6522                	ld	a0,8(sp)
    8001dd1a:	4581                	li	a1,0
    8001dd1c:	00b50663          	beq	a0,a1,8001dd28 <_ZN4core3num21_$LT$impl$u20$u32$GT$11checked_add17h28c8b802ca50f266E+0x3a>
    8001dd20:	a009                	j	8001dd22 <_ZN4core3num21_$LT$impl$u20$u32$GT$11checked_add17h28c8b802ca50f266E+0x34>
    8001dd22:	4501                	li	a0,0
    8001dd24:	d02a                	sw	a0,32(sp)
    8001dd26:	a031                	j	8001dd32 <_ZN4core3num21_$LT$impl$u20$u32$GT$11checked_add17h28c8b802ca50f266E+0x44>
    8001dd28:	6542                	ld	a0,16(sp)
    8001dd2a:	d22a                	sw	a0,36(sp)
    8001dd2c:	4505                	li	a0,1
    8001dd2e:	d02a                	sw	a0,32(sp)
    8001dd30:	a009                	j	8001dd32 <_ZN4core3num21_$LT$impl$u20$u32$GT$11checked_add17h28c8b802ca50f266E+0x44>
        }
    8001dd32:	5502                	lw	a0,32(sp)
    8001dd34:	5592                	lw	a1,36(sp)
    8001dd36:	70e2                	ld	ra,56(sp)
    8001dd38:	6121                	addi	sp,sp,64
    8001dd3a:	8082                	ret

Disassembly of section .text._ZN4core3num21_$LT$impl$u20$u32$GT$13unchecked_add17hceb6a8c852a4dc08E:

000000008001dd3c <_ZN4core3num21_$LT$impl$u20$u32$GT$13unchecked_add17hceb6a8c852a4dc08E>:
        pub unsafe fn unchecked_add(self, rhs: Self) -> Self {
    8001dd3c:	1101                	addi	sp,sp,-32
    8001dd3e:	ca2a                	sw	a0,20(sp)
    8001dd40:	cc2e                	sw	a1,24(sp)
            unsafe { intrinsics::unchecked_add(self, rhs) }
    8001dd42:	952e                	add	a0,a0,a1
    8001dd44:	ce2a                	sw	a0,28(sp)
    8001dd46:	1502                	slli	a0,a0,0x20
    8001dd48:	9101                	srli	a0,a0,0x20
    8001dd4a:	e42a                	sd	a0,8(sp)
    8001dd4c:	a009                	j	8001dd4e <_ZN4core3num21_$LT$impl$u20$u32$GT$13unchecked_add17hceb6a8c852a4dc08E+0x12>
        }
    8001dd4e:	6522                	ld	a0,8(sp)
    8001dd50:	6105                	addi	sp,sp,32
    8001dd52:	8082                	ret

Disassembly of section .text._ZN4core3num21_$LT$impl$u20$u32$GT$15overflowing_add17h6c31d0dcc95be001E:

000000008001dd54 <_ZN4core3num21_$LT$impl$u20$u32$GT$15overflowing_add17h6c31d0dcc95be001E>:
        #[stable(feature = "wrapping", since = "1.7.0")]
        #[rustc_const_stable(feature = "const_wrapping_math", since = "1.32.0")]
        #[must_use = "this returns the result of the operation, \
                      without modifying the original"]
        #[inline]
        pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {
    8001dd54:	7179                	addi	sp,sp,-48
    8001dd56:	862e                	mv	a2,a1
    8001dd58:	86aa                	mv	a3,a0
    8001dd5a:	02061513          	slli	a0,a2,0x20
    8001dd5e:	02055593          	srli	a1,a0,0x20
    8001dd62:	02069513          	slli	a0,a3,0x20
    8001dd66:	9101                	srli	a0,a0,0x20
    8001dd68:	cc36                	sw	a3,24(sp)
    8001dd6a:	ce32                	sw	a2,28(sp)
            let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
    8001dd6c:	95aa                	add	a1,a1,a0
    8001dd6e:	02059513          	slli	a0,a1,0x20
    8001dd72:	9101                	srli	a0,a0,0x20
    8001dd74:	e02a                	sd	a0,0(sp)
    8001dd76:	8d2d                	xor	a0,a0,a1
    8001dd78:	00a03533          	snez	a0,a0
    8001dd7c:	e42a                	sd	a0,8(sp)
    8001dd7e:	d02e                	sw	a1,32(sp)
    8001dd80:	02a10223          	sb	a0,36(sp)
    8001dd84:	a009                	j	8001dd86 <_ZN4core3num21_$LT$impl$u20$u32$GT$15overflowing_add17h6c31d0dcc95be001E+0x32>
    8001dd86:	65a2                	ld	a1,8(sp)
    8001dd88:	6502                	ld	a0,0(sp)
    8001dd8a:	d42a                	sw	a0,40(sp)
    8001dd8c:	02b107a3          	sb	a1,47(sp)
            (a as Self, b)
    8001dd90:	c82a                	sw	a0,16(sp)
    8001dd92:	00b10a23          	sb	a1,20(sp)
        }
    8001dd96:	6145                	addi	sp,sp,48
    8001dd98:	8082                	ret

Disassembly of section .text._ZN4core3num23_$LT$impl$u20$usize$GT$10count_ones17hc42f1db1f03657afE:

000000008001dd9a <_ZN4core3num23_$LT$impl$u20$usize$GT$10count_ones17hc42f1db1f03657afE>:
        pub const fn count_ones(self) -> u32 {
    8001dd9a:	1101                	addi	sp,sp,-32
    8001dd9c:	e82a                	sd	a0,16(sp)
            intrinsics::ctpop(self as $ActualT) as u32
    8001dd9e:	00155593          	srli	a1,a0,0x1
    8001dda2:	05555637          	lui	a2,0x5555
    8001dda6:	5556061b          	addiw	a2,a2,1365
    8001ddaa:	0632                	slli	a2,a2,0xc
    8001ddac:	55560613          	addi	a2,a2,1365 # 5555555 <.Lline_table_start0+0x551ebee>
    8001ddb0:	0632                	slli	a2,a2,0xc
    8001ddb2:	55560613          	addi	a2,a2,1365
    8001ddb6:	0632                	slli	a2,a2,0xc
    8001ddb8:	55560613          	addi	a2,a2,1365
    8001ddbc:	8df1                	and	a1,a1,a2
    8001ddbe:	40b505b3          	sub	a1,a0,a1
    8001ddc2:	03333537          	lui	a0,0x3333
    8001ddc6:	3335051b          	addiw	a0,a0,819
    8001ddca:	0532                	slli	a0,a0,0xc
    8001ddcc:	33350513          	addi	a0,a0,819 # 3333333 <.Lline_table_start0+0x32fc9cc>
    8001ddd0:	0532                	slli	a0,a0,0xc
    8001ddd2:	33350513          	addi	a0,a0,819
    8001ddd6:	0532                	slli	a0,a0,0xc
    8001ddd8:	33350613          	addi	a2,a0,819
    8001dddc:	00c5f533          	and	a0,a1,a2
    8001dde0:	8189                	srli	a1,a1,0x2
    8001dde2:	8df1                	and	a1,a1,a2
    8001dde4:	952e                	add	a0,a0,a1
    8001dde6:	00455593          	srli	a1,a0,0x4
    8001ddea:	952e                	add	a0,a0,a1
    8001ddec:	00f0f5b7          	lui	a1,0xf0f
    8001ddf0:	0f15859b          	addiw	a1,a1,241
    8001ddf4:	05b2                	slli	a1,a1,0xc
    8001ddf6:	f0f58593          	addi	a1,a1,-241 # f0ef0f <.Lline_table_start0+0xed85a8>
    8001ddfa:	05b2                	slli	a1,a1,0xc
    8001ddfc:	0f158593          	addi	a1,a1,241
    8001de00:	05b2                	slli	a1,a1,0xc
    8001de02:	f0f58593          	addi	a1,a1,-241
    8001de06:	8d6d                	and	a0,a0,a1
    8001de08:	010105b7          	lui	a1,0x1010
    8001de0c:	1015859b          	addiw	a1,a1,257
    8001de10:	05c2                	slli	a1,a1,0x10
    8001de12:	10158593          	addi	a1,a1,257 # 1010101 <.Lline_table_start0+0xfd979a>
    8001de16:	05c2                	slli	a1,a1,0x10
    8001de18:	10158593          	addi	a1,a1,257
    8001de1c:	02b50533          	mul	a0,a0,a1
    8001de20:	9161                	srli	a0,a0,0x38
    8001de22:	e42a                	sd	a0,8(sp)
    8001de24:	ec2a                	sd	a0,24(sp)
    8001de26:	a009                	j	8001de28 <_ZN4core3num23_$LT$impl$u20$usize$GT$10count_ones17hc42f1db1f03657afE+0x8e>
        }
    8001de28:	6522                	ld	a0,8(sp)
    8001de2a:	6105                	addi	sp,sp,32
    8001de2c:	8082                	ret

Disassembly of section .text._ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17he2495d381876d258E:

000000008001de2e <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17he2495d381876d258E>:
        pub const fn checked_add(self, rhs: Self) -> Option<Self> {
    8001de2e:	715d                	addi	sp,sp,-80
    8001de30:	e486                	sd	ra,72(sp)
    8001de32:	f42a                	sd	a0,40(sp)
    8001de34:	f82e                	sd	a1,48(sp)
            let (a, b) = self.overflowing_add(rhs);
    8001de36:	00000097          	auipc	ra,0x0
    8001de3a:	184080e7          	jalr	388(ra) # 8001dfba <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h5e362dda9fd64aadE>
    8001de3e:	e42a                	sd	a0,8(sp)
    8001de40:	e82e                	sd	a1,16(sp)
    8001de42:	a009                	j	8001de44 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17he2495d381876d258E+0x16>
    8001de44:	6542                	ld	a0,16(sp)
    8001de46:	65a2                	ld	a1,8(sp)
    8001de48:	fc2e                	sd	a1,56(sp)
    8001de4a:	8905                	andi	a0,a0,1
    8001de4c:	e02a                	sd	a0,0(sp)
    8001de4e:	04a10323          	sb	a0,70(sp)
            if unlikely!(b) {None} else {Some(a)}
    8001de52:	04a103a3          	sb	a0,71(sp)
    8001de56:	a009                	j	8001de58 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17he2495d381876d258E+0x2a>
    8001de58:	6502                	ld	a0,0(sp)
    8001de5a:	4581                	li	a1,0
    8001de5c:	00b50663          	beq	a0,a1,8001de68 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17he2495d381876d258E+0x3a>
    8001de60:	a009                	j	8001de62 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17he2495d381876d258E+0x34>
    8001de62:	4501                	li	a0,0
    8001de64:	ec2a                	sd	a0,24(sp)
    8001de66:	a031                	j	8001de72 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17he2495d381876d258E+0x44>
    8001de68:	6522                	ld	a0,8(sp)
    8001de6a:	f02a                	sd	a0,32(sp)
    8001de6c:	4505                	li	a0,1
    8001de6e:	ec2a                	sd	a0,24(sp)
    8001de70:	a009                	j	8001de72 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17he2495d381876d258E+0x44>
        }
    8001de72:	6562                	ld	a0,24(sp)
    8001de74:	7582                	ld	a1,32(sp)
    8001de76:	60a6                	ld	ra,72(sp)
    8001de78:	6161                	addi	sp,sp,80
    8001de7a:	8082                	ret

Disassembly of section .text._ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17h38933f87a0e6dbeaE:

000000008001de7c <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17h38933f87a0e6dbeaE>:
        pub const fn checked_mul(self, rhs: Self) -> Option<Self> {
    8001de7c:	715d                	addi	sp,sp,-80
    8001de7e:	e486                	sd	ra,72(sp)
    8001de80:	f42a                	sd	a0,40(sp)
    8001de82:	f82e                	sd	a1,48(sp)
            let (a, b) = self.overflowing_mul(rhs);
    8001de84:	00000097          	auipc	ra,0x0
    8001de88:	162080e7          	jalr	354(ra) # 8001dfe6 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_mul17h8807e257a981f0caE>
    8001de8c:	e42a                	sd	a0,8(sp)
    8001de8e:	e82e                	sd	a1,16(sp)
    8001de90:	a009                	j	8001de92 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17h38933f87a0e6dbeaE+0x16>
    8001de92:	6542                	ld	a0,16(sp)
    8001de94:	65a2                	ld	a1,8(sp)
    8001de96:	fc2e                	sd	a1,56(sp)
    8001de98:	8905                	andi	a0,a0,1
    8001de9a:	e02a                	sd	a0,0(sp)
    8001de9c:	04a10323          	sb	a0,70(sp)
            if unlikely!(b) {None} else {Some(a)}
    8001dea0:	04a103a3          	sb	a0,71(sp)
    8001dea4:	a009                	j	8001dea6 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17h38933f87a0e6dbeaE+0x2a>
    8001dea6:	6502                	ld	a0,0(sp)
    8001dea8:	4581                	li	a1,0
    8001deaa:	00b50663          	beq	a0,a1,8001deb6 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17h38933f87a0e6dbeaE+0x3a>
    8001deae:	a009                	j	8001deb0 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17h38933f87a0e6dbeaE+0x34>
    8001deb0:	4501                	li	a0,0
    8001deb2:	ec2a                	sd	a0,24(sp)
    8001deb4:	a031                	j	8001dec0 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17h38933f87a0e6dbeaE+0x44>
    8001deb6:	6522                	ld	a0,8(sp)
    8001deb8:	f02a                	sd	a0,32(sp)
    8001deba:	4505                	li	a0,1
    8001debc:	ec2a                	sd	a0,24(sp)
    8001debe:	a009                	j	8001dec0 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17h38933f87a0e6dbeaE+0x44>
        }
    8001dec0:	6562                	ld	a0,24(sp)
    8001dec2:	7582                	ld	a1,32(sp)
    8001dec4:	60a6                	ld	ra,72(sp)
    8001dec6:	6161                	addi	sp,sp,80
    8001dec8:	8082                	ret

Disassembly of section .text._ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h4d6a04d1a942bf32E:

000000008001deca <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h4d6a04d1a942bf32E>:
        pub const fn checked_sub(self, rhs: Self) -> Option<Self> {
    8001deca:	715d                	addi	sp,sp,-80
    8001decc:	e486                	sd	ra,72(sp)
    8001dece:	f42a                	sd	a0,40(sp)
    8001ded0:	f82e                	sd	a1,48(sp)
            let (a, b) = self.overflowing_sub(rhs);
    8001ded2:	00000097          	auipc	ra,0x0
    8001ded6:	14a080e7          	jalr	330(ra) # 8001e01c <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h1247a6e463c80816E>
    8001deda:	e42a                	sd	a0,8(sp)
    8001dedc:	e82e                	sd	a1,16(sp)
    8001dede:	a009                	j	8001dee0 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h4d6a04d1a942bf32E+0x16>
    8001dee0:	6542                	ld	a0,16(sp)
    8001dee2:	65a2                	ld	a1,8(sp)
    8001dee4:	fc2e                	sd	a1,56(sp)
    8001dee6:	8905                	andi	a0,a0,1
    8001dee8:	e02a                	sd	a0,0(sp)
    8001deea:	04a10323          	sb	a0,70(sp)
            if unlikely!(b) {None} else {Some(a)}
    8001deee:	04a103a3          	sb	a0,71(sp)
    8001def2:	a009                	j	8001def4 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h4d6a04d1a942bf32E+0x2a>
    8001def4:	6502                	ld	a0,0(sp)
    8001def6:	4581                	li	a1,0
    8001def8:	00b50663          	beq	a0,a1,8001df04 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h4d6a04d1a942bf32E+0x3a>
    8001defc:	a009                	j	8001defe <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h4d6a04d1a942bf32E+0x34>
    8001defe:	4501                	li	a0,0
    8001df00:	ec2a                	sd	a0,24(sp)
    8001df02:	a031                	j	8001df0e <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h4d6a04d1a942bf32E+0x44>
    8001df04:	6522                	ld	a0,8(sp)
    8001df06:	f02a                	sd	a0,32(sp)
    8001df08:	4505                	li	a0,1
    8001df0a:	ec2a                	sd	a0,24(sp)
    8001df0c:	a009                	j	8001df0e <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h4d6a04d1a942bf32E+0x44>
        }
    8001df0e:	6562                	ld	a0,24(sp)
    8001df10:	7582                	ld	a1,32(sp)
    8001df12:	60a6                	ld	ra,72(sp)
    8001df14:	6161                	addi	sp,sp,80
    8001df16:	8082                	ret

Disassembly of section .text._ZN4core3num23_$LT$impl$u20$usize$GT$12wrapping_add17he0ea74277f4c06b1E:

000000008001df18 <_ZN4core3num23_$LT$impl$u20$usize$GT$12wrapping_add17he0ea74277f4c06b1E>:
        pub const fn wrapping_add(self, rhs: Self) -> Self {
    8001df18:	1141                	addi	sp,sp,-16
    8001df1a:	e02a                	sd	a0,0(sp)
    8001df1c:	e42e                	sd	a1,8(sp)
            intrinsics::wrapping_add(self, rhs)
    8001df1e:	952e                	add	a0,a0,a1
        }
    8001df20:	0141                	addi	sp,sp,16
    8001df22:	8082                	ret

Disassembly of section .text._ZN4core3num23_$LT$impl$u20$usize$GT$12wrapping_sub17h8f077bf007d122c9E:

000000008001df24 <_ZN4core3num23_$LT$impl$u20$usize$GT$12wrapping_sub17h8f077bf007d122c9E>:
        pub const fn wrapping_sub(self, rhs: Self) -> Self {
    8001df24:	1141                	addi	sp,sp,-16
    8001df26:	e02a                	sd	a0,0(sp)
    8001df28:	e42e                	sd	a1,8(sp)
            intrinsics::wrapping_sub(self, rhs)
    8001df2a:	8d0d                	sub	a0,a0,a1
        }
    8001df2c:	0141                	addi	sp,sp,16
    8001df2e:	8082                	ret

Disassembly of section .text._ZN4core3num23_$LT$impl$u20$usize$GT$13from_le_bytes17h3bceb23301b73de9E:

000000008001df30 <_ZN4core3num23_$LT$impl$u20$usize$GT$13from_le_bytes17h3bceb23301b73de9E>:
        /// }
        /// ```
        #[stable(feature = "int_to_from_bytes", since = "1.32.0")]
        #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
        #[inline]
        pub const fn from_le_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {
    8001df30:	7179                	addi	sp,sp,-48
    8001df32:	f406                	sd	ra,40(sp)
    8001df34:	ec2a                	sd	a0,24(sp)
    8001df36:	e82a                	sd	a0,16(sp)
            Self::from_le(Self::from_ne_bytes(bytes))
    8001df38:	f02a                	sd	a0,32(sp)
    8001df3a:	00000097          	auipc	ra,0x0
    8001df3e:	022080e7          	jalr	34(ra) # 8001df5c <_ZN4core3num23_$LT$impl$u20$usize$GT$13from_ne_bytes17h8c178ff675f3bacaE>
    8001df42:	e42a                	sd	a0,8(sp)
    8001df44:	a009                	j	8001df46 <_ZN4core3num23_$LT$impl$u20$usize$GT$13from_le_bytes17h3bceb23301b73de9E+0x16>
    8001df46:	6522                	ld	a0,8(sp)
    8001df48:	00000097          	auipc	ra,0x0
    8001df4c:	102080e7          	jalr	258(ra) # 8001e04a <_ZN4core3num23_$LT$impl$u20$usize$GT$7from_le17h7016b8b5387c67e4E>
    8001df50:	e02a                	sd	a0,0(sp)
    8001df52:	a009                	j	8001df54 <_ZN4core3num23_$LT$impl$u20$usize$GT$13from_le_bytes17h3bceb23301b73de9E+0x24>
        }
    8001df54:	6502                	ld	a0,0(sp)
    8001df56:	70a2                	ld	ra,40(sp)
    8001df58:	6145                	addi	sp,sp,48
    8001df5a:	8082                	ret

Disassembly of section .text._ZN4core3num23_$LT$impl$u20$usize$GT$13from_ne_bytes17h8c178ff675f3bacaE:

000000008001df5c <_ZN4core3num23_$LT$impl$u20$usize$GT$13from_ne_bytes17h8c178ff675f3bacaE>:
        #[rustc_const_stable(feature = "const_int_conversion", since = "1.44.0")]
        // SAFETY: const sound because integers are plain old datatypes so we can always
        // transmute to them
        #[rustc_allow_const_fn_unstable(const_fn_transmute)]
        #[inline]
        pub const fn from_ne_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {
    8001df5c:	7179                	addi	sp,sp,-48
    8001df5e:	ec2a                	sd	a0,24(sp)
    8001df60:	e82a                	sd	a0,16(sp)
            // SAFETY: integers are plain old datatypes so we can always transmute to them
            unsafe { mem::transmute(bytes) }
    8001df62:	f02a                	sd	a0,32(sp)
    8001df64:	f42a                	sd	a0,40(sp)
    8001df66:	e42a                	sd	a0,8(sp)
    8001df68:	a009                	j	8001df6a <_ZN4core3num23_$LT$impl$u20$usize$GT$13from_ne_bytes17h8c178ff675f3bacaE+0xe>
        }
    8001df6a:	6522                	ld	a0,8(sp)
    8001df6c:	6145                	addi	sp,sp,48
    8001df6e:	8082                	ret

Disassembly of section .text._ZN4core3num23_$LT$impl$u20$usize$GT$13unchecked_add17hd96bc3f11f940f51E:

000000008001df70 <_ZN4core3num23_$LT$impl$u20$usize$GT$13unchecked_add17hd96bc3f11f940f51E>:
        pub unsafe fn unchecked_add(self, rhs: Self) -> Self {
    8001df70:	1101                	addi	sp,sp,-32
    8001df72:	e42a                	sd	a0,8(sp)
    8001df74:	e82e                	sd	a1,16(sp)
            unsafe { intrinsics::unchecked_add(self, rhs) }
    8001df76:	952e                	add	a0,a0,a1
    8001df78:	e02a                	sd	a0,0(sp)
    8001df7a:	ec2a                	sd	a0,24(sp)
    8001df7c:	a009                	j	8001df7e <_ZN4core3num23_$LT$impl$u20$usize$GT$13unchecked_add17hd96bc3f11f940f51E+0xe>
        }
    8001df7e:	6502                	ld	a0,0(sp)
    8001df80:	6105                	addi	sp,sp,32
    8001df82:	8082                	ret

Disassembly of section .text._ZN4core3num23_$LT$impl$u20$usize$GT$13unchecked_sub17hed0c10f690d6ddf4E:

000000008001df84 <_ZN4core3num23_$LT$impl$u20$usize$GT$13unchecked_sub17hed0c10f690d6ddf4E>:
        pub unsafe fn unchecked_sub(self, rhs: Self) -> Self {
    8001df84:	1101                	addi	sp,sp,-32
    8001df86:	e42a                	sd	a0,8(sp)
    8001df88:	e82e                	sd	a1,16(sp)
            unsafe { intrinsics::unchecked_sub(self, rhs) }
    8001df8a:	8d0d                	sub	a0,a0,a1
    8001df8c:	e02a                	sd	a0,0(sp)
    8001df8e:	ec2a                	sd	a0,24(sp)
    8001df90:	a009                	j	8001df92 <_ZN4core3num23_$LT$impl$u20$usize$GT$13unchecked_sub17hed0c10f690d6ddf4E+0xe>
        }
    8001df92:	6502                	ld	a0,0(sp)
    8001df94:	6105                	addi	sp,sp,32
    8001df96:	8082                	ret

Disassembly of section .text._ZN4core3num23_$LT$impl$u20$usize$GT$15is_power_of_two17h1415e23f4938ba42E:

000000008001df98 <_ZN4core3num23_$LT$impl$u20$usize$GT$15is_power_of_two17h1415e23f4938ba42E>:
        pub const fn is_power_of_two(self) -> bool {
    8001df98:	1101                	addi	sp,sp,-32
    8001df9a:	ec06                	sd	ra,24(sp)
    8001df9c:	e82a                	sd	a0,16(sp)
            self.count_ones() == 1
    8001df9e:	00000097          	auipc	ra,0x0
    8001dfa2:	dfc080e7          	jalr	-516(ra) # 8001dd9a <_ZN4core3num23_$LT$impl$u20$usize$GT$10count_ones17hc42f1db1f03657afE>
    8001dfa6:	e42a                	sd	a0,8(sp)
    8001dfa8:	a009                	j	8001dfaa <_ZN4core3num23_$LT$impl$u20$usize$GT$15is_power_of_two17h1415e23f4938ba42E+0x12>
    8001dfaa:	6522                	ld	a0,8(sp)
    8001dfac:	2501                	sext.w	a0,a0
    8001dfae:	157d                	addi	a0,a0,-1
    8001dfb0:	00153513          	seqz	a0,a0
        }
    8001dfb4:	60e2                	ld	ra,24(sp)
    8001dfb6:	6105                	addi	sp,sp,32
    8001dfb8:	8082                	ret

Disassembly of section .text._ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h5e362dda9fd64aadE:

000000008001dfba <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h5e362dda9fd64aadE>:
        pub const fn overflowing_add(self, rhs: Self) -> (Self, bool) {
    8001dfba:	715d                	addi	sp,sp,-80
    8001dfbc:	f02a                	sd	a0,32(sp)
    8001dfbe:	f42e                	sd	a1,40(sp)
            let (a, b) = intrinsics::add_with_overflow(self as $ActualT, rhs as $ActualT);
    8001dfc0:	95aa                	add	a1,a1,a0
    8001dfc2:	e02e                	sd	a1,0(sp)
    8001dfc4:	00a5b533          	sltu	a0,a1,a0
    8001dfc8:	e42a                	sd	a0,8(sp)
    8001dfca:	f82e                	sd	a1,48(sp)
    8001dfcc:	02a10c23          	sb	a0,56(sp)
    8001dfd0:	a009                	j	8001dfd2 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h5e362dda9fd64aadE+0x18>
    8001dfd2:	65a2                	ld	a1,8(sp)
    8001dfd4:	6502                	ld	a0,0(sp)
    8001dfd6:	e0aa                	sd	a0,64(sp)
    8001dfd8:	04b107a3          	sb	a1,79(sp)
            (a as Self, b)
    8001dfdc:	e82a                	sd	a0,16(sp)
    8001dfde:	00b10c23          	sb	a1,24(sp)
        }
    8001dfe2:	6161                	addi	sp,sp,80
    8001dfe4:	8082                	ret

Disassembly of section .text._ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_mul17h8807e257a981f0caE:

000000008001dfe6 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_mul17h8807e257a981f0caE>:
        pub const fn overflowing_mul(self, rhs: Self) -> (Self, bool) {
    8001dfe6:	715d                	addi	sp,sp,-80
    8001dfe8:	862e                	mv	a2,a1
    8001dfea:	85aa                	mv	a1,a0
    8001dfec:	f02e                	sd	a1,32(sp)
    8001dfee:	f432                	sd	a2,40(sp)
            let (a, b) = intrinsics::mul_with_overflow(self as $ActualT, rhs as $ActualT);
    8001dff0:	02c5b533          	mulhu	a0,a1,a2
    8001dff4:	00a03533          	snez	a0,a0
    8001dff8:	e02a                	sd	a0,0(sp)
    8001dffa:	02c585b3          	mul	a1,a1,a2
    8001dffe:	e42e                	sd	a1,8(sp)
    8001e000:	f82e                	sd	a1,48(sp)
    8001e002:	02a10c23          	sb	a0,56(sp)
    8001e006:	a009                	j	8001e008 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_mul17h8807e257a981f0caE+0x22>
    8001e008:	6582                	ld	a1,0(sp)
    8001e00a:	6522                	ld	a0,8(sp)
    8001e00c:	e0aa                	sd	a0,64(sp)
    8001e00e:	04b107a3          	sb	a1,79(sp)
            (a as Self, b)
    8001e012:	e82a                	sd	a0,16(sp)
    8001e014:	00b10c23          	sb	a1,24(sp)
        }
    8001e018:	6161                	addi	sp,sp,80
    8001e01a:	8082                	ret

Disassembly of section .text._ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h1247a6e463c80816E:

000000008001e01c <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h1247a6e463c80816E>:
        pub const fn overflowing_sub(self, rhs: Self) -> (Self, bool) {
    8001e01c:	715d                	addi	sp,sp,-80
    8001e01e:	f02a                	sd	a0,32(sp)
    8001e020:	f42e                	sd	a1,40(sp)
            let (a, b) = intrinsics::sub_with_overflow(self as $ActualT, rhs as $ActualT);
    8001e022:	40b505b3          	sub	a1,a0,a1
    8001e026:	e02e                	sd	a1,0(sp)
    8001e028:	00b53533          	sltu	a0,a0,a1
    8001e02c:	e42a                	sd	a0,8(sp)
    8001e02e:	f82e                	sd	a1,48(sp)
    8001e030:	02a10c23          	sb	a0,56(sp)
    8001e034:	a009                	j	8001e036 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h1247a6e463c80816E+0x1a>
    8001e036:	65a2                	ld	a1,8(sp)
    8001e038:	6502                	ld	a0,0(sp)
    8001e03a:	e0aa                	sd	a0,64(sp)
    8001e03c:	04b107a3          	sb	a1,79(sp)
            (a as Self, b)
    8001e040:	e82a                	sd	a0,16(sp)
    8001e042:	00b10c23          	sb	a1,24(sp)
        }
    8001e046:	6161                	addi	sp,sp,80
    8001e048:	8082                	ret

Disassembly of section .text._ZN4core3num23_$LT$impl$u20$usize$GT$7from_le17h7016b8b5387c67e4E:

000000008001e04a <_ZN4core3num23_$LT$impl$u20$usize$GT$7from_le17h7016b8b5387c67e4E>:
        pub const fn from_le(x: Self) -> Self {
    8001e04a:	1141                	addi	sp,sp,-16
    8001e04c:	e42a                	sd	a0,8(sp)
        }
    8001e04e:	0141                	addi	sp,sp,16
    8001e050:	8082                	ret

Disassembly of section .text._ZN47_$LT$u16$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17h3535906832610659E:

000000008001e052 <_ZN47_$LT$u16$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17h3535906832610659E>:
        unsafe fn forward_unchecked(start: Self, n: usize) -> Self {
    8001e052:	1101                	addi	sp,sp,-32
    8001e054:	ec06                	sd	ra,24(sp)
    8001e056:	00a11723          	sh	a0,14(sp)
    8001e05a:	e82e                	sd	a1,16(sp)
            unsafe { start.unchecked_add(n as Self) }
    8001e05c:	00000097          	auipc	ra,0x0
    8001e060:	c72080e7          	jalr	-910(ra) # 8001dcce <_ZN4core3num21_$LT$impl$u20$u16$GT$13unchecked_add17hfa49a7085d490705E>
    8001e064:	e02a                	sd	a0,0(sp)
    8001e066:	a009                	j	8001e068 <_ZN47_$LT$u16$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17h3535906832610659E+0x16>
        }
    8001e068:	6502                	ld	a0,0(sp)
    8001e06a:	60e2                	ld	ra,24(sp)
    8001e06c:	6105                	addi	sp,sp,32
    8001e06e:	8082                	ret

Disassembly of section .text._ZN47_$LT$u32$u20$as$u20$core..iter..range..Step$GT$15forward_checked17h56207e7d47bfb4e6E:

000000008001e070 <_ZN47_$LT$u32$u20$as$u20$core..iter..range..Step$GT$15forward_checked17h56207e7d47bfb4e6E>:
                fn forward_checked(start: Self, n: usize) -> Option<Self> {
    8001e070:	7139                	addi	sp,sp,-64
    8001e072:	fc06                	sd	ra,56(sp)
    8001e074:	e02e                	sd	a1,0(sp)
    8001e076:	85aa                	mv	a1,a0
    8001e078:	6502                	ld	a0,0(sp)
    8001e07a:	862e                	mv	a2,a1
    8001e07c:	e432                	sd	a2,8(sp)
    8001e07e:	d22e                	sw	a1,36(sp)
    8001e080:	f42a                	sd	a0,40(sp)
                    match Self::try_from(n) {
    8001e082:	00000097          	auipc	ra,0x0
    8001e086:	1e6080e7          	jalr	486(ra) # 8001e268 <_ZN4core7convert3num18ptr_try_from_impls69_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u32$GT$8try_from17hf11680289e05cb5fE>
    8001e08a:	cc2a                	sw	a0,24(sp)
    8001e08c:	ce2e                	sw	a1,28(sp)
    8001e08e:	a009                	j	8001e090 <_ZN47_$LT$u32$u20$as$u20$core..iter..range..Step$GT$15forward_checked17h56207e7d47bfb4e6E+0x20>
                        Ok(n) => start.checked_add(n),
    8001e090:	01816503          	lwu	a0,24(sp)
    8001e094:	4581                	li	a1,0
    8001e096:	00b50763          	beq	a0,a1,8001e0a4 <_ZN47_$LT$u32$u20$as$u20$core..iter..range..Step$GT$15forward_checked17h56207e7d47bfb4e6E+0x34>
    8001e09a:	a009                	j	8001e09c <_ZN47_$LT$u32$u20$as$u20$core..iter..range..Step$GT$15forward_checked17h56207e7d47bfb4e6E+0x2c>
    8001e09c:	4501                	li	a0,0
                        Err(_) => None, // if n is out of range, `unsigned_start + n` is too
    8001e09e:	c82a                	sw	a0,16(sp)
                    match Self::try_from(n) {
    8001e0a0:	a829                	j	8001e0ba <_ZN47_$LT$u32$u20$as$u20$core..iter..range..Step$GT$15forward_checked17h56207e7d47bfb4e6E+0x4a>
    8001e0a2:	0000                	unimp
                        Ok(n) => start.checked_add(n),
    8001e0a4:	6522                	ld	a0,8(sp)
    8001e0a6:	45f2                	lw	a1,28(sp)
    8001e0a8:	da2e                	sw	a1,52(sp)
    8001e0aa:	00000097          	auipc	ra,0x0
    8001e0ae:	c44080e7          	jalr	-956(ra) # 8001dcee <_ZN4core3num21_$LT$impl$u20$u32$GT$11checked_add17h28c8b802ca50f266E>
    8001e0b2:	c82a                	sw	a0,16(sp)
    8001e0b4:	ca2e                	sw	a1,20(sp)
    8001e0b6:	a009                	j	8001e0b8 <_ZN47_$LT$u32$u20$as$u20$core..iter..range..Step$GT$15forward_checked17h56207e7d47bfb4e6E+0x48>
                    match Self::try_from(n) {
    8001e0b8:	a009                	j	8001e0ba <_ZN47_$LT$u32$u20$as$u20$core..iter..range..Step$GT$15forward_checked17h56207e7d47bfb4e6E+0x4a>
                }
    8001e0ba:	4542                	lw	a0,16(sp)
    8001e0bc:	45d2                	lw	a1,20(sp)
    8001e0be:	70e2                	ld	ra,56(sp)
    8001e0c0:	6121                	addi	sp,sp,64
    8001e0c2:	8082                	ret

Disassembly of section .text._ZN47_$LT$u32$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17hd82fe8ce42e2d29dE:

000000008001e0c4 <_ZN47_$LT$u32$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17hd82fe8ce42e2d29dE>:
        unsafe fn forward_unchecked(start: Self, n: usize) -> Self {
    8001e0c4:	1101                	addi	sp,sp,-32
    8001e0c6:	ec06                	sd	ra,24(sp)
    8001e0c8:	c62a                	sw	a0,12(sp)
    8001e0ca:	e82e                	sd	a1,16(sp)
            unsafe { start.unchecked_add(n as Self) }
    8001e0cc:	00000097          	auipc	ra,0x0
    8001e0d0:	c70080e7          	jalr	-912(ra) # 8001dd3c <_ZN4core3num21_$LT$impl$u20$u32$GT$13unchecked_add17hceb6a8c852a4dc08E>
    8001e0d4:	e02a                	sd	a0,0(sp)
    8001e0d6:	a009                	j	8001e0d8 <_ZN47_$LT$u32$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17hd82fe8ce42e2d29dE+0x14>
        }
    8001e0d8:	6502                	ld	a0,0(sp)
    8001e0da:	60e2                	ld	ra,24(sp)
    8001e0dc:	6105                	addi	sp,sp,32
    8001e0de:	8082                	ret

Disassembly of section .text._ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$15forward_checked17h89a22c0b5326f750E:

000000008001e0e0 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$15forward_checked17h89a22c0b5326f750E>:
                fn forward_checked(start: Self, n: usize) -> Option<Self> {
    8001e0e0:	715d                	addi	sp,sp,-80
    8001e0e2:	e486                	sd	ra,72(sp)
    8001e0e4:	ec2e                	sd	a1,24(sp)
    8001e0e6:	85aa                	mv	a1,a0
    8001e0e8:	6562                	ld	a0,24(sp)
    8001e0ea:	f02e                	sd	a1,32(sp)
    8001e0ec:	f82e                	sd	a1,48(sp)
    8001e0ee:	fc2a                	sd	a0,56(sp)
                    match Self::try_from(n) {
    8001e0f0:	fffee097          	auipc	ra,0xfffee
    8001e0f4:	900080e7          	jalr	-1792(ra) # 8000b9f0 <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17heab1f3c6250d8edbE>
    8001e0f8:	f42a                	sd	a0,40(sp)
    8001e0fa:	a009                	j	8001e0fc <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$15forward_checked17h89a22c0b5326f750E+0x1c>
                        Ok(n) => start.checked_add(n),
    8001e0fc:	7502                	ld	a0,32(sp)
    8001e0fe:	75a2                	ld	a1,40(sp)
    8001e100:	e0ae                	sd	a1,64(sp)
    8001e102:	00000097          	auipc	ra,0x0
    8001e106:	d2c080e7          	jalr	-724(ra) # 8001de2e <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17he2495d381876d258E>
    8001e10a:	e42a                	sd	a0,8(sp)
    8001e10c:	e82e                	sd	a1,16(sp)
    8001e10e:	a009                	j	8001e110 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$15forward_checked17h89a22c0b5326f750E+0x30>
                }
    8001e110:	65c2                	ld	a1,16(sp)
    8001e112:	6522                	ld	a0,8(sp)
    8001e114:	60a6                	ld	ra,72(sp)
    8001e116:	6161                	addi	sp,sp,80
    8001e118:	8082                	ret

Disassembly of section .text._ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17h4b00136ef7a8c813E:

000000008001e11a <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17h4b00136ef7a8c813E>:
        unsafe fn forward_unchecked(start: Self, n: usize) -> Self {
    8001e11a:	1101                	addi	sp,sp,-32
    8001e11c:	ec06                	sd	ra,24(sp)
    8001e11e:	e42a                	sd	a0,8(sp)
    8001e120:	e82e                	sd	a1,16(sp)
            unsafe { start.unchecked_add(n as Self) }
    8001e122:	00000097          	auipc	ra,0x0
    8001e126:	e4e080e7          	jalr	-434(ra) # 8001df70 <_ZN4core3num23_$LT$impl$u20$usize$GT$13unchecked_add17hd96bc3f11f940f51E>
    8001e12a:	e02a                	sd	a0,0(sp)
    8001e12c:	a009                	j	8001e12e <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17h4b00136ef7a8c813E+0x14>
        }
    8001e12e:	6502                	ld	a0,0(sp)
    8001e130:	60e2                	ld	ra,24(sp)
    8001e132:	6105                	addi	sp,sp,32
    8001e134:	8082                	ret

Disassembly of section .text._ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$18backward_unchecked17h149195b805b2849bE:

000000008001e136 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$18backward_unchecked17h149195b805b2849bE>:
        unsafe fn backward_unchecked(start: Self, n: usize) -> Self {
    8001e136:	1101                	addi	sp,sp,-32
    8001e138:	ec06                	sd	ra,24(sp)
    8001e13a:	e42a                	sd	a0,8(sp)
    8001e13c:	e82e                	sd	a1,16(sp)
            unsafe { start.unchecked_sub(n as Self) }
    8001e13e:	00000097          	auipc	ra,0x0
    8001e142:	e46080e7          	jalr	-442(ra) # 8001df84 <_ZN4core3num23_$LT$impl$u20$usize$GT$13unchecked_sub17hed0c10f690d6ddf4E>
    8001e146:	e02a                	sd	a0,0(sp)
    8001e148:	a009                	j	8001e14a <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$18backward_unchecked17h149195b805b2849bE+0x14>
        }
    8001e14a:	6502                	ld	a0,0(sp)
    8001e14c:	60e2                	ld	ra,24(sp)
    8001e14e:	6105                	addi	sp,sp,32
    8001e150:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register7sstatus4read17h1df585a8263fd2acE:

000000008001e152 <_ZN6kernel4arch5riscv8register7sstatus4read17h1df585a8263fd2acE>:
    /// User Interrupt Enable
    UIE = 1 << 0
}

#[inline]
pub unsafe fn read() -> usize {
    8001e152:	1141                	addi	sp,sp,-16
    let sstatus: usize;
    llvm_asm!("csrr $0, sstatus":"=r"(sstatus):::"volatile");
    8001e154:	10002573          	csrr	a0,sstatus
    8001e158:	e42a                	sd	a0,8(sp)
    sstatus
}
    8001e15a:	0141                	addi	sp,sp,16
    8001e15c:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register7sstatus5write17h2e3a8152fe4defdaE:

000000008001e15e <_ZN6kernel4arch5riscv8register7sstatus5write17h2e3a8152fe4defdaE>:

#[inline]
pub unsafe fn write(sstatus: usize) {
    8001e15e:	1141                	addi	sp,sp,-16
    8001e160:	e42a                	sd	a0,8(sp)
    llvm_asm!("csrw sstatus, $0"::"r"(sstatus)::"volatile");
    8001e162:	10051073          	csrw	sstatus,a0
}
    8001e166:	0141                	addi	sp,sp,16
    8001e168:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register7sstatus18is_from_supervisor17h09ba8119c534748eE:

000000008001e16a <_ZN6kernel4arch5riscv8register7sstatus18is_from_supervisor17h09ba8119c534748eE>:

#[inline]
pub unsafe fn is_from_supervisor() -> bool {
    8001e16a:	1141                	addi	sp,sp,-16
    (read() & SSTATUS::SPP as usize) != 0
    8001e16c:	e406                	sd	ra,8(sp)
    8001e16e:	00000097          	auipc	ra,0x0
    8001e172:	fe4080e7          	jalr	-28(ra) # 8001e152 <_ZN6kernel4arch5riscv8register7sstatus4read17h1df585a8263fd2acE>
    8001e176:	e02a                	sd	a0,0(sp)
    8001e178:	a009                	j	8001e17a <_ZN6kernel4arch5riscv8register7sstatus18is_from_supervisor17h09ba8119c534748eE+0x10>
    8001e17a:	6502                	ld	a0,0(sp)
    8001e17c:	10057513          	andi	a0,a0,256
    8001e180:	8121                	srli	a0,a0,0x8
}
    8001e182:	60a2                	ld	ra,8(sp)
    8001e184:	0141                	addi	sp,sp,16
    8001e186:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register7sstatus12is_from_user17hfa7a30a57661c561E:

000000008001e188 <_ZN6kernel4arch5riscv8register7sstatus12is_from_user17hfa7a30a57661c561E>:

#[inline]
pub unsafe fn is_from_user() -> bool {
    8001e188:	1141                	addi	sp,sp,-16
    (read() & SSTATUS::SPP as usize) == 0
    8001e18a:	e406                	sd	ra,8(sp)
    8001e18c:	00000097          	auipc	ra,0x0
    8001e190:	fc6080e7          	jalr	-58(ra) # 8001e152 <_ZN6kernel4arch5riscv8register7sstatus4read17h1df585a8263fd2acE>
    8001e194:	e02a                	sd	a0,0(sp)
    8001e196:	a009                	j	8001e198 <_ZN6kernel4arch5riscv8register7sstatus12is_from_user17hfa7a30a57661c561E+0x10>
    8001e198:	6502                	ld	a0,0(sp)
    8001e19a:	10057513          	andi	a0,a0,256
    8001e19e:	00153513          	seqz	a0,a0
}
    8001e1a2:	60a2                	ld	ra,8(sp)
    8001e1a4:	0141                	addi	sp,sp,16
    8001e1a6:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register7sstatus7intr_on17h10d927cfe74faba7E:

000000008001e1a8 <_ZN6kernel4arch5riscv8register7sstatus7intr_on17h10d927cfe74faba7E>:

/// enable device interrupts
#[inline]
pub unsafe fn intr_on() {
    8001e1a8:	1141                	addi	sp,sp,-16
    write(read() | SSTATUS::SIE as usize);
    8001e1aa:	e406                	sd	ra,8(sp)
    8001e1ac:	00000097          	auipc	ra,0x0
    8001e1b0:	fa6080e7          	jalr	-90(ra) # 8001e152 <_ZN6kernel4arch5riscv8register7sstatus4read17h1df585a8263fd2acE>
    8001e1b4:	e02a                	sd	a0,0(sp)
    8001e1b6:	a009                	j	8001e1b8 <_ZN6kernel4arch5riscv8register7sstatus7intr_on17h10d927cfe74faba7E+0x10>
    8001e1b8:	6502                	ld	a0,0(sp)
    8001e1ba:	00256513          	ori	a0,a0,2
    8001e1be:	00000097          	auipc	ra,0x0
    8001e1c2:	fa0080e7          	jalr	-96(ra) # 8001e15e <_ZN6kernel4arch5riscv8register7sstatus5write17h2e3a8152fe4defdaE>
    8001e1c6:	a009                	j	8001e1c8 <_ZN6kernel4arch5riscv8register7sstatus7intr_on17h10d927cfe74faba7E+0x20>
}
    8001e1c8:	60a2                	ld	ra,8(sp)
    8001e1ca:	0141                	addi	sp,sp,16
    8001e1cc:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register7sstatus8intr_off17hed3f5b43b53e6556E:

000000008001e1ce <_ZN6kernel4arch5riscv8register7sstatus8intr_off17hed3f5b43b53e6556E>:

/// disable device interrupts
#[inline]
pub unsafe fn intr_off() {
    8001e1ce:	1141                	addi	sp,sp,-16
    write(read() & !(SSTATUS::SIE as usize));
    8001e1d0:	e406                	sd	ra,8(sp)
    8001e1d2:	00000097          	auipc	ra,0x0
    8001e1d6:	f80080e7          	jalr	-128(ra) # 8001e152 <_ZN6kernel4arch5riscv8register7sstatus4read17h1df585a8263fd2acE>
    8001e1da:	e02a                	sd	a0,0(sp)
    8001e1dc:	a009                	j	8001e1de <_ZN6kernel4arch5riscv8register7sstatus8intr_off17hed3f5b43b53e6556E+0x10>
    8001e1de:	6502                	ld	a0,0(sp)
    8001e1e0:	9975                	andi	a0,a0,-3
    8001e1e2:	00000097          	auipc	ra,0x0
    8001e1e6:	f7c080e7          	jalr	-132(ra) # 8001e15e <_ZN6kernel4arch5riscv8register7sstatus5write17h2e3a8152fe4defdaE>
    8001e1ea:	a009                	j	8001e1ec <_ZN6kernel4arch5riscv8register7sstatus8intr_off17hed3f5b43b53e6556E+0x1e>
}
    8001e1ec:	60a2                	ld	ra,8(sp)
    8001e1ee:	0141                	addi	sp,sp,16
    8001e1f0:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register7sstatus8intr_get17h3e12e0f19cb31fd5E:

000000008001e1f2 <_ZN6kernel4arch5riscv8register7sstatus8intr_get17h3e12e0f19cb31fd5E>:


/// are device interrupts enabled?
#[inline]
pub unsafe fn intr_get() -> bool {
    8001e1f2:	1101                	addi	sp,sp,-32
    let x = read();
    8001e1f4:	ec06                	sd	ra,24(sp)
    8001e1f6:	00000097          	auipc	ra,0x0
    8001e1fa:	f5c080e7          	jalr	-164(ra) # 8001e152 <_ZN6kernel4arch5riscv8register7sstatus4read17h1df585a8263fd2acE>
    8001e1fe:	85aa                	mv	a1,a0
    8001e200:	e42e                	sd	a1,8(sp)
    8001e202:	e82a                	sd	a0,16(sp)
    8001e204:	a009                	j	8001e206 <_ZN6kernel4arch5riscv8register7sstatus8intr_get17h3e12e0f19cb31fd5E+0x14>
    return (x & SSTATUS::SIE as usize) != 0;
    8001e206:	6522                	ld	a0,8(sp)
    8001e208:	8909                	andi	a0,a0,2
    8001e20a:	8105                	srli	a0,a0,0x1
}
    8001e20c:	60e2                	ld	ra,24(sp)
    8001e20e:	6105                	addi	sp,sp,32
    8001e210:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register7sstatus9clear_spp17h6421d1a1ec9c8eccE:

000000008001e212 <_ZN6kernel4arch5riscv8register7sstatus9clear_spp17h6421d1a1ec9c8eccE>:

/// clear SPP to 0
#[inline]
pub fn clear_spp(sstatus: usize) -> usize {
    8001e212:	1141                	addi	sp,sp,-16
    8001e214:	e42a                	sd	a0,8(sp)
    sstatus & !(SSTATUS::SPP as usize)
    8001e216:	eff57513          	andi	a0,a0,-257
}
    8001e21a:	0141                	addi	sp,sp,16
    8001e21c:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register7sstatus12user_intr_on17h1304f970b07c3896E:

000000008001e21e <_ZN6kernel4arch5riscv8register7sstatus12user_intr_on17h1304f970b07c3896E>:

/// enable interrupts in user mode
#[inline]
pub fn user_intr_on(sstatus: usize) -> usize {
    8001e21e:	1141                	addi	sp,sp,-16
    8001e220:	e42a                	sd	a0,8(sp)
    sstatus | (SSTATUS::SPIE as usize)
    8001e222:	02056513          	ori	a0,a0,32
}
    8001e226:	0141                	addi	sp,sp,16
    8001e228:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register8mscratch5write17h9d6c8373498c8305E:

000000008001e22a <_ZN6kernel4arch5riscv8register8mscratch5write17h9d6c8373498c8305E>:
#[inline]
pub unsafe fn write(x:usize){
    8001e22a:	1141                	addi	sp,sp,-16
    8001e22c:	e42a                	sd	a0,8(sp)
    llvm_asm!("csrw mscratch, $0"::"r"(x)::"volatile");
    8001e22e:	34051073          	csrw	mscratch,a0
    8001e232:	0141                	addi	sp,sp,16
    8001e234:	8082                	ret

Disassembly of section .text._ZN4core7convert3num18ptr_try_from_impls69_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u16$GT$8try_from17h9165284bf6d163adE:

000000008001e236 <_ZN4core7convert3num18ptr_try_from_impls69_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u16$GT$8try_from17h9165284bf6d163adE>:

            /// Try to create the target number type from a source
            /// number type. This returns an error if the source value
            /// is outside of the range of the target type.
            #[inline]
            fn try_from(u: $source) -> Result<Self, Self::Error> {
    8001e236:	1101                	addi	sp,sp,-32
    8001e238:	e42a                	sd	a0,8(sp)
    8001e23a:	ec2a                	sd	a0,24(sp)
                if u > (Self::MAX as $source) {
    8001e23c:	8141                	srli	a0,a0,0x10
    8001e23e:	4581                	li	a1,0
    8001e240:	00b50763          	beq	a0,a1,8001e24e <_ZN4core7convert3num18ptr_try_from_impls69_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u16$GT$8try_from17h9165284bf6d163adE+0x18>
    8001e244:	a009                	j	8001e246 <_ZN4core7convert3num18ptr_try_from_impls69_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u16$GT$8try_from17h9165284bf6d163adE+0x10>
    8001e246:	4505                	li	a0,1
                    Err(TryFromIntError(()))
    8001e248:	00a11823          	sh	a0,16(sp)
                if u > (Self::MAX as $source) {
    8001e24c:	a801                	j	8001e25c <_ZN4core7convert3num18ptr_try_from_impls69_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u16$GT$8try_from17h9165284bf6d163adE+0x26>
                } else {
                    Ok(u as Self)
    8001e24e:	6522                	ld	a0,8(sp)
    8001e250:	00a11923          	sh	a0,18(sp)
    8001e254:	4501                	li	a0,0
    8001e256:	00a11823          	sh	a0,16(sp)
                if u > (Self::MAX as $source) {
    8001e25a:	a009                	j	8001e25c <_ZN4core7convert3num18ptr_try_from_impls69_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u16$GT$8try_from17h9165284bf6d163adE+0x26>
                }
            }
    8001e25c:	01011503          	lh	a0,16(sp)
    8001e260:	01211583          	lh	a1,18(sp)
    8001e264:	6105                	addi	sp,sp,32
    8001e266:	8082                	ret

Disassembly of section .text._ZN4core7convert3num18ptr_try_from_impls69_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u32$GT$8try_from17hf11680289e05cb5fE:

000000008001e268 <_ZN4core7convert3num18ptr_try_from_impls69_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u32$GT$8try_from17hf11680289e05cb5fE>:
            fn try_from(u: $source) -> Result<Self, Self::Error> {
    8001e268:	1101                	addi	sp,sp,-32
    8001e26a:	e42a                	sd	a0,8(sp)
    8001e26c:	ec2a                	sd	a0,24(sp)
                if u > (Self::MAX as $source) {
    8001e26e:	9101                	srli	a0,a0,0x20
    8001e270:	4581                	li	a1,0
    8001e272:	00b50663          	beq	a0,a1,8001e27e <_ZN4core7convert3num18ptr_try_from_impls69_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u32$GT$8try_from17hf11680289e05cb5fE+0x16>
    8001e276:	a009                	j	8001e278 <_ZN4core7convert3num18ptr_try_from_impls69_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u32$GT$8try_from17hf11680289e05cb5fE+0x10>
    8001e278:	4505                	li	a0,1
                    Err(TryFromIntError(()))
    8001e27a:	c82a                	sw	a0,16(sp)
                if u > (Self::MAX as $source) {
    8001e27c:	a031                	j	8001e288 <_ZN4core7convert3num18ptr_try_from_impls69_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u32$GT$8try_from17hf11680289e05cb5fE+0x20>
                    Ok(u as Self)
    8001e27e:	6522                	ld	a0,8(sp)
    8001e280:	ca2a                	sw	a0,20(sp)
    8001e282:	4501                	li	a0,0
    8001e284:	c82a                	sw	a0,16(sp)
                if u > (Self::MAX as $source) {
    8001e286:	a009                	j	8001e288 <_ZN4core7convert3num18ptr_try_from_impls69_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u32$GT$8try_from17hf11680289e05cb5fE+0x20>
            }
    8001e288:	4542                	lw	a0,16(sp)
    8001e28a:	45d2                	lw	a1,20(sp)
    8001e28c:	6105                	addi	sp,sp,32
    8001e28e:	8082                	ret

Disassembly of section .text._ZN5alloc6string6String3new17h806e7bcacb841554E:

000000008001e290 <_ZN5alloc6string6String3new17h806e7bcacb841554E>:
    /// let s = String::new();
    /// ```
    #[inline]
    #[rustc_const_stable(feature = "const_string_new", since = "1.39.0")]
    #[stable(feature = "rust1", since = "1.0.0")]
    pub const fn new() -> String {
    8001e290:	7179                	addi	sp,sp,-48
        String { vec: Vec::new() }
    8001e292:	f406                	sd	ra,40(sp)
    8001e294:	e42a                	sd	a0,8(sp)
    8001e296:	0808                	addi	a0,sp,16
    8001e298:	ffff8097          	auipc	ra,0xffff8
    8001e29c:	6ae080e7          	jalr	1710(ra) # 80016946 <_ZN5alloc3vec12Vec$LT$T$GT$3new17hfad72d6537ee9e7bE>
    8001e2a0:	a009                	j	8001e2a2 <_ZN5alloc6string6String3new17h806e7bcacb841554E+0x12>
    8001e2a2:	65a2                	ld	a1,8(sp)
    8001e2a4:	7502                	ld	a0,32(sp)
    8001e2a6:	e988                	sd	a0,16(a1)
    8001e2a8:	6562                	ld	a0,24(sp)
    8001e2aa:	e588                	sd	a0,8(a1)
    8001e2ac:	6542                	ld	a0,16(sp)
    8001e2ae:	e188                	sd	a0,0(a1)
    }
    8001e2b0:	70a2                	ld	ra,40(sp)
    8001e2b2:	6145                	addi	sp,sp,48
    8001e2b4:	8082                	ret

Disassembly of section .text._ZN5alloc6string6String4push17h2b5e883a1c1e3781E:

000000008001e2b6 <_ZN5alloc6string6String4push17h2b5e883a1c1e3781E>:
    ///
    /// assert_eq!("abc123", s);
    /// ```
    #[inline]
    #[stable(feature = "rust1", since = "1.0.0")]
    pub fn push(&mut self, ch: char) {
    8001e2b6:	7175                	addi	sp,sp,-144
    8001e2b8:	e506                	sd	ra,136(sp)
    8001e2ba:	f82e                	sd	a1,48(sp)
    8001e2bc:	85aa                	mv	a1,a0
    8001e2be:	7542                	ld	a0,48(sp)
    8001e2c0:	fc2e                	sd	a1,56(sp)
    8001e2c2:	862a                	mv	a2,a0
    8001e2c4:	e0b2                	sd	a2,64(sp)
    8001e2c6:	ecae                	sd	a1,88(sp)
    8001e2c8:	d2aa                	sw	a0,100(sp)
        match ch.len_utf8() {
    8001e2ca:	ffffd097          	auipc	ra,0xffffd
    8001e2ce:	f08080e7          	jalr	-248(ra) # 8001b1d2 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$8len_utf817h6b8693741ddbecceE>
    8001e2d2:	e4aa                	sd	a0,72(sp)
    8001e2d4:	a009                	j	8001e2d6 <_ZN5alloc6string6String4push17h2b5e883a1c1e3781E+0x20>
    8001e2d6:	6526                	ld	a0,72(sp)
    8001e2d8:	4585                	li	a1,1
            1 => self.vec.push(ch as u8),
    8001e2da:	02b50163          	beq	a0,a1,8001e2fc <_ZN5alloc6string6String4push17h2b5e883a1c1e3781E+0x46>
    8001e2de:	a009                	j	8001e2e0 <_ZN5alloc6string6String4push17h2b5e883a1c1e3781E+0x2a>
            _ => self.vec.extend_from_slice(ch.encode_utf8(&mut [0; 4]).as_bytes()),
    8001e2e0:	6506                	ld	a0,64(sp)
    8001e2e2:	75e2                	ld	a1,56(sp)
    8001e2e4:	ec2e                	sd	a1,24(sp)
    8001e2e6:	4581                	li	a1,0
    8001e2e8:	caae                	sw	a1,84(sp)
    8001e2ea:	08cc                	addi	a1,sp,84
    8001e2ec:	4611                	li	a2,4
    8001e2ee:	ffffd097          	auipc	ra,0xffffd
    8001e2f2:	eb0080e7          	jalr	-336(ra) # 8001b19e <_ZN4core4char7methods22_$LT$impl$u20$char$GT$11encode_utf817h7239bcb774eea5aaE>
    8001e2f6:	f02a                	sd	a0,32(sp)
    8001e2f8:	f42e                	sd	a1,40(sp)
    8001e2fa:	a809                	j	8001e30c <_ZN5alloc6string6String4push17h2b5e883a1c1e3781E+0x56>
            1 => self.vec.push(ch as u8),
    8001e2fc:	6586                	ld	a1,64(sp)
    8001e2fe:	7562                	ld	a0,56(sp)
    8001e300:	ffff8097          	auipc	ra,0xffff8
    8001e304:	788080e7          	jalr	1928(ra) # 80016a88 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$4push17h5c7a5a6a9c3b7171E>
    8001e308:	a009                	j	8001e30a <_ZN5alloc6string6String4push17h2b5e883a1c1e3781E+0x54>
        match ch.len_utf8() {
    8001e30a:	a01d                	j	8001e330 <_ZN5alloc6string6String4push17h2b5e883a1c1e3781E+0x7a>
    8001e30c:	7522                	ld	a0,40(sp)
    8001e30e:	7582                	ld	a1,32(sp)
    8001e310:	f4ae                	sd	a1,104(sp)
    8001e312:	f8aa                	sd	a0,112(sp)
    8001e314:	fcae                	sd	a1,120(sp)
    8001e316:	e12a                	sd	a0,128(sp)
            _ => self.vec.extend_from_slice(ch.encode_utf8(&mut [0; 4]).as_bytes()),
    8001e318:	e42e                	sd	a1,8(sp)
    8001e31a:	e82a                	sd	a0,16(sp)
    8001e31c:	a009                	j	8001e31e <_ZN5alloc6string6String4push17h2b5e883a1c1e3781E+0x68>
    8001e31e:	6642                	ld	a2,16(sp)
    8001e320:	65a2                	ld	a1,8(sp)
    8001e322:	6562                	ld	a0,24(sp)
    8001e324:	ffff8097          	auipc	ra,0xffff8
    8001e328:	71e080e7          	jalr	1822(ra) # 80016a42 <_ZN5alloc3vec16Vec$LT$T$C$A$GT$17extend_from_slice17hce4d1786c1c715b0E>
    8001e32c:	a009                	j	8001e32e <_ZN5alloc6string6String4push17h2b5e883a1c1e3781E+0x78>
        match ch.len_utf8() {
    8001e32e:	a009                	j	8001e330 <_ZN5alloc6string6String4push17h2b5e883a1c1e3781E+0x7a>
        }
    }
    8001e330:	60aa                	ld	ra,136(sp)
    8001e332:	6149                	addi	sp,sp,144
    8001e334:	8082                	ret

Disassembly of section .text._ZN65_$LT$alloc..string..String$u20$as$u20$core..ops..deref..Deref$GT$5deref17hb3510aeed9e3d071E:

000000008001e336 <_ZN65_$LT$alloc..string..String$u20$as$u20$core..ops..deref..Deref$GT$5deref17hb3510aeed9e3d071E>:
#[stable(feature = "rust1", since = "1.0.0")]
impl ops::Deref for String {
    type Target = str;

    #[inline]
    fn deref(&self) -> &str {
    8001e336:	7179                	addi	sp,sp,-48
    8001e338:	f406                	sd	ra,40(sp)
    8001e33a:	f02a                	sd	a0,32(sp)
        unsafe { str::from_utf8_unchecked(&self.vec) }
    8001e33c:	ffff9097          	auipc	ra,0xffff9
    8001e340:	834080e7          	jalr	-1996(ra) # 80016b70 <_ZN72_$LT$alloc..vec..Vec$LT$T$C$A$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h57bbbed72157e211E>
    8001e344:	e82a                	sd	a0,16(sp)
    8001e346:	ec2e                	sd	a1,24(sp)
    8001e348:	a009                	j	8001e34a <_ZN65_$LT$alloc..string..String$u20$as$u20$core..ops..deref..Deref$GT$5deref17hb3510aeed9e3d071E+0x14>
    8001e34a:	65e2                	ld	a1,24(sp)
    8001e34c:	6542                	ld	a0,16(sp)
    8001e34e:	00000097          	auipc	ra,0x0
    8001e352:	328080e7          	jalr	808(ra) # 8001e676 <_ZN4core3str8converts19from_utf8_unchecked17hb3b621a5f279bc07E>
    8001e356:	e02a                	sd	a0,0(sp)
    8001e358:	e42e                	sd	a1,8(sp)
    8001e35a:	a009                	j	8001e35c <_ZN65_$LT$alloc..string..String$u20$as$u20$core..ops..deref..Deref$GT$5deref17hb3510aeed9e3d071E+0x26>
    }
    8001e35c:	65a2                	ld	a1,8(sp)
    8001e35e:	6502                	ld	a0,0(sp)
    8001e360:	70a2                	ld	ra,40(sp)
    8001e362:	6145                	addi	sp,sp,48
    8001e364:	8082                	ret

Disassembly of section .text._ZN5alloc7raw_vec11alloc_guard17hfed185ef1a23ae81E:

000000008001e366 <_ZN5alloc7raw_vec11alloc_guard17hfed185ef1a23ae81E>:
// `> isize::MAX` bytes will surely fail. On 32-bit and 16-bit we need to add
// an extra guard for this in case we're running on a platform which can use
// all 4GB in user-space, e.g., PAE or x32.

#[inline]
fn alloc_guard(alloc_size: usize) -> Result<(), TryReserveError> {
    8001e366:	1101                	addi	sp,sp,-32
    8001e368:	e02a                	sd	a0,0(sp)
    8001e36a:	ec2e                	sd	a1,24(sp)
    8001e36c:	4505                	li	a0,1
    if usize::BITS < 64 && alloc_size > isize::MAX as usize {
    8001e36e:	e919                	bnez	a0,8001e384 <_ZN5alloc7raw_vec11alloc_guard17hfed185ef1a23ae81E+0x1e>
    8001e370:	a009                	j	8001e372 <_ZN5alloc7raw_vec11alloc_guard17hfed185ef1a23ae81E+0xc>
    8001e372:	6582                	ld	a1,0(sp)
    8001e374:	4501                	li	a0,0
        Err(CapacityOverflow)
    8001e376:	e82a                	sd	a0,16(sp)
    8001e378:	6622                	ld	a2,8(sp)
    8001e37a:	e590                	sd	a2,8(a1)
    8001e37c:	e988                	sd	a0,16(a1)
    8001e37e:	4505                	li	a0,1
    8001e380:	e188                	sd	a0,0(a1)
    if usize::BITS < 64 && alloc_size > isize::MAX as usize {
    8001e382:	a029                	j	8001e38c <_ZN5alloc7raw_vec11alloc_guard17hfed185ef1a23ae81E+0x26>
    8001e384:	6582                	ld	a1,0(sp)
    8001e386:	4501                	li	a0,0
    } else {
        Ok(())
    8001e388:	e188                	sd	a0,0(a1)
    if usize::BITS < 64 && alloc_size > isize::MAX as usize {
    8001e38a:	a009                	j	8001e38c <_ZN5alloc7raw_vec11alloc_guard17hfed185ef1a23ae81E+0x26>
    }
}
    8001e38c:	6105                	addi	sp,sp,32
    8001e38e:	8082                	ret

Disassembly of section .text._ZN5alloc7raw_vec14handle_reserve17h9818f7956a53f3d6E:

000000008001e390 <_ZN5alloc7raw_vec14handle_reserve17h9818f7956a53f3d6E>:
fn handle_reserve(result: Result<(), TryReserveError>) {
    8001e390:	1101                	addi	sp,sp,-32
    8001e392:	e42a                	sd	a0,8(sp)
        Err(CapacityOverflow) => capacity_overflow(),
    8001e394:	6108                	ld	a0,0(a0)
    8001e396:	4581                	li	a1,0
    8001e398:	00b50463          	beq	a0,a1,8001e3a0 <_ZN5alloc7raw_vec14handle_reserve17h9818f7956a53f3d6E+0x10>
    8001e39c:	a009                	j	8001e39e <_ZN5alloc7raw_vec14handle_reserve17h9818f7956a53f3d6E+0xe>
    8001e39e:	a019                	j	8001e3a4 <_ZN5alloc7raw_vec14handle_reserve17h9818f7956a53f3d6E+0x14>
}
    8001e3a0:	6105                	addi	sp,sp,32
    8001e3a2:	8082                	ret
        Err(CapacityOverflow) => capacity_overflow(),
    8001e3a4:	6522                	ld	a0,8(sp)
    8001e3a6:	6908                	ld	a0,16(a0)
    8001e3a8:	00a035b3          	snez	a1,a0
    8001e3ac:	4581                	li	a1,0
    8001e3ae:	00b50563          	beq	a0,a1,8001e3b8 <_ZN5alloc7raw_vec14handle_reserve17h9818f7956a53f3d6E+0x28>
    8001e3b2:	a009                	j	8001e3b4 <_ZN5alloc7raw_vec14handle_reserve17h9818f7956a53f3d6E+0x24>
    8001e3b4:	a039                	j	8001e3c2 <_ZN5alloc7raw_vec14handle_reserve17h9818f7956a53f3d6E+0x32>
    match result {
    8001e3b6:	0000                	unimp
        Err(CapacityOverflow) => capacity_overflow(),
    8001e3b8:	00004097          	auipc	ra,0x4
    8001e3bc:	b5a080e7          	jalr	-1190(ra) # 80021f12 <_ZN5alloc7raw_vec17capacity_overflow17hae1c560931d103e4E>
    8001e3c0:	0000                	unimp
        Err(AllocError { layout, .. }) => handle_alloc_error(layout),
    8001e3c2:	65a2                	ld	a1,8(sp)
    8001e3c4:	6588                	ld	a0,8(a1)
    8001e3c6:	698c                	ld	a1,16(a1)
    8001e3c8:	e82a                	sd	a0,16(sp)
    8001e3ca:	ec2e                	sd	a1,24(sp)
    8001e3cc:	00004097          	auipc	ra,0x4
    8001e3d0:	b2a080e7          	jalr	-1238(ra) # 80021ef6 <_ZN5alloc5alloc18handle_alloc_error17haa1b1c0a80642c5aE>
	...

Disassembly of section .text._ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8e05789f6aa15028E:

000000008001e3d6 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8e05789f6aa15028E>:
    8001e3d6:	1101                	addi	sp,sp,-32
    8001e3d8:	ec06                	sd	ra,24(sp)
    8001e3da:	862e                	mv	a2,a1
    8001e3dc:	85aa                	mv	a1,a0
    8001e3de:	e42e                	sd	a1,8(sp)
    8001e3e0:	e832                	sd	a2,16(sp)
    8001e3e2:	6188                	ld	a0,0(a1)
    8001e3e4:	658c                	ld	a1,8(a1)
    8001e3e6:	00005097          	auipc	ra,0x5
    8001e3ea:	cd0080e7          	jalr	-816(ra) # 800230b6 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h399f9f006bebcceeE>
    8001e3ee:	e02a                	sd	a0,0(sp)
    8001e3f0:	a009                	j	8001e3f2 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8e05789f6aa15028E+0x1c>
    8001e3f2:	6502                	ld	a0,0(sp)
    8001e3f4:	60e2                	ld	ra,24(sp)
    8001e3f6:	6105                	addi	sp,sp,32
    8001e3f8:	8082                	ret

Disassembly of section .text._ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h3baa88b0b8ed59b0E:

000000008001e3fa <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h3baa88b0b8ed59b0E>:
    8001e3fa:	1101                	addi	sp,sp,-32
    8001e3fc:	ec06                	sd	ra,24(sp)
    8001e3fe:	e42a                	sd	a0,8(sp)
    8001e400:	e82e                	sd	a1,16(sp)
    8001e402:	6108                	ld	a0,0(a0)
    8001e404:	00006097          	auipc	ra,0x6
    8001e408:	0bc080e7          	jalr	188(ra) # 800244c0 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17h1b385cecfac82c6bE>
    8001e40c:	e02a                	sd	a0,0(sp)
    8001e40e:	a009                	j	8001e410 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h3baa88b0b8ed59b0E+0x16>
    8001e410:	6502                	ld	a0,0(sp)
    8001e412:	60e2                	ld	ra,24(sp)
    8001e414:	6105                	addi	sp,sp,32
    8001e416:	8082                	ret

Disassembly of section .text._ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E:

000000008001e418 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E>:
    8001e418:	1101                	addi	sp,sp,-32
    8001e41a:	ec06                	sd	ra,24(sp)
    8001e41c:	862e                	mv	a2,a1
    8001e41e:	85aa                	mv	a1,a0
    8001e420:	e42e                	sd	a1,8(sp)
    8001e422:	e832                	sd	a2,16(sp)
    8001e424:	6188                	ld	a0,0(a1)
    8001e426:	658c                	ld	a1,8(a1)
    8001e428:	00005097          	auipc	ra,0x5
    8001e42c:	0de080e7          	jalr	222(ra) # 80023506 <_ZN42_$LT$str$u20$as$u20$core..fmt..Display$GT$3fmt17h0539661bd0865efeE>
    8001e430:	e02a                	sd	a0,0(sp)
    8001e432:	a009                	j	8001e434 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17hcf8aee9e483a0eb6E+0x1c>
    8001e434:	6502                	ld	a0,0(sp)
    8001e436:	60e2                	ld	ra,24(sp)
    8001e438:	6105                	addi	sp,sp,32
    8001e43a:	8082                	ret

Disassembly of section .text._ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE:

000000008001e43c <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
    8001e43c:	715d                	addi	sp,sp,-80
    8001e43e:	e82a                	sd	a0,16(sp)
    8001e440:	f82a                	sd	a0,48(sp)
    8001e442:	fc2e                	sd	a1,56(sp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
    8001e444:	e0ae                	sd	a1,64(sp)
    8001e446:	ec2e                	sd	a1,24(sp)
    8001e448:	a009                	j	8001e44a <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE+0xe>
    8001e44a:	6542                	ld	a0,16(sp)
    8001e44c:	e4aa                	sd	a0,72(sp)
    8001e44e:	e42a                	sd	a0,8(sp)
    8001e450:	a009                	j	8001e452 <_ZN4core3fmt10ArgumentV13new17h4a2663b66f30befbE+0x16>
    8001e452:	65e2                	ld	a1,24(sp)
    8001e454:	6522                	ld	a0,8(sp)
    8001e456:	f02a                	sd	a0,32(sp)
    8001e458:	f42e                	sd	a1,40(sp)
    }
    8001e45a:	6161                	addi	sp,sp,80
    8001e45c:	8082                	ret

Disassembly of section .text._ZN4core3fmt10ArgumentV13new17h4cc7035953f043f8E:

000000008001e45e <_ZN4core3fmt10ArgumentV13new17h4cc7035953f043f8E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
    8001e45e:	715d                	addi	sp,sp,-80
    8001e460:	e82a                	sd	a0,16(sp)
    8001e462:	f82a                	sd	a0,48(sp)
    8001e464:	fc2e                	sd	a1,56(sp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
    8001e466:	e0ae                	sd	a1,64(sp)
    8001e468:	ec2e                	sd	a1,24(sp)
    8001e46a:	a009                	j	8001e46c <_ZN4core3fmt10ArgumentV13new17h4cc7035953f043f8E+0xe>
    8001e46c:	6542                	ld	a0,16(sp)
    8001e46e:	e4aa                	sd	a0,72(sp)
    8001e470:	e42a                	sd	a0,8(sp)
    8001e472:	a009                	j	8001e474 <_ZN4core3fmt10ArgumentV13new17h4cc7035953f043f8E+0x16>
    8001e474:	65e2                	ld	a1,24(sp)
    8001e476:	6522                	ld	a0,8(sp)
    8001e478:	f02a                	sd	a0,32(sp)
    8001e47a:	f42e                	sd	a1,40(sp)
    }
    8001e47c:	6161                	addi	sp,sp,80
    8001e47e:	8082                	ret

Disassembly of section .text._ZN4core3fmt10ArgumentV13new17h56f4edf050dced00E:

000000008001e480 <_ZN4core3fmt10ArgumentV13new17h56f4edf050dced00E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
    8001e480:	715d                	addi	sp,sp,-80
    8001e482:	e82a                	sd	a0,16(sp)
    8001e484:	f82a                	sd	a0,48(sp)
    8001e486:	fc2e                	sd	a1,56(sp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
    8001e488:	e0ae                	sd	a1,64(sp)
    8001e48a:	ec2e                	sd	a1,24(sp)
    8001e48c:	a009                	j	8001e48e <_ZN4core3fmt10ArgumentV13new17h56f4edf050dced00E+0xe>
    8001e48e:	6542                	ld	a0,16(sp)
    8001e490:	e4aa                	sd	a0,72(sp)
    8001e492:	e42a                	sd	a0,8(sp)
    8001e494:	a009                	j	8001e496 <_ZN4core3fmt10ArgumentV13new17h56f4edf050dced00E+0x16>
    8001e496:	65e2                	ld	a1,24(sp)
    8001e498:	6522                	ld	a0,8(sp)
    8001e49a:	f02a                	sd	a0,32(sp)
    8001e49c:	f42e                	sd	a1,40(sp)
    }
    8001e49e:	6161                	addi	sp,sp,80
    8001e4a0:	8082                	ret

Disassembly of section .text._ZN4core3fmt10ArgumentV13new17h64cb168c9af0caf2E:

000000008001e4a2 <_ZN4core3fmt10ArgumentV13new17h64cb168c9af0caf2E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
    8001e4a2:	715d                	addi	sp,sp,-80
    8001e4a4:	e82a                	sd	a0,16(sp)
    8001e4a6:	f82a                	sd	a0,48(sp)
    8001e4a8:	fc2e                	sd	a1,56(sp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
    8001e4aa:	e0ae                	sd	a1,64(sp)
    8001e4ac:	ec2e                	sd	a1,24(sp)
    8001e4ae:	a009                	j	8001e4b0 <_ZN4core3fmt10ArgumentV13new17h64cb168c9af0caf2E+0xe>
    8001e4b0:	6542                	ld	a0,16(sp)
    8001e4b2:	e4aa                	sd	a0,72(sp)
    8001e4b4:	e42a                	sd	a0,8(sp)
    8001e4b6:	a009                	j	8001e4b8 <_ZN4core3fmt10ArgumentV13new17h64cb168c9af0caf2E+0x16>
    8001e4b8:	65e2                	ld	a1,24(sp)
    8001e4ba:	6522                	ld	a0,8(sp)
    8001e4bc:	f02a                	sd	a0,32(sp)
    8001e4be:	f42e                	sd	a1,40(sp)
    }
    8001e4c0:	6161                	addi	sp,sp,80
    8001e4c2:	8082                	ret

Disassembly of section .text._ZN4core3fmt10ArgumentV13new17h8dd13dffa5e435d0E:

000000008001e4c4 <_ZN4core3fmt10ArgumentV13new17h8dd13dffa5e435d0E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
    8001e4c4:	715d                	addi	sp,sp,-80
    8001e4c6:	e82a                	sd	a0,16(sp)
    8001e4c8:	f82a                	sd	a0,48(sp)
    8001e4ca:	fc2e                	sd	a1,56(sp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
    8001e4cc:	e0ae                	sd	a1,64(sp)
    8001e4ce:	ec2e                	sd	a1,24(sp)
    8001e4d0:	a009                	j	8001e4d2 <_ZN4core3fmt10ArgumentV13new17h8dd13dffa5e435d0E+0xe>
    8001e4d2:	6542                	ld	a0,16(sp)
    8001e4d4:	e4aa                	sd	a0,72(sp)
    8001e4d6:	e42a                	sd	a0,8(sp)
    8001e4d8:	a009                	j	8001e4da <_ZN4core3fmt10ArgumentV13new17h8dd13dffa5e435d0E+0x16>
    8001e4da:	65e2                	ld	a1,24(sp)
    8001e4dc:	6522                	ld	a0,8(sp)
    8001e4de:	f02a                	sd	a0,32(sp)
    8001e4e0:	f42e                	sd	a1,40(sp)
    }
    8001e4e2:	6161                	addi	sp,sp,80
    8001e4e4:	8082                	ret

Disassembly of section .text._ZN4core3fmt10ArgumentV13new17hc1ed914d10380b65E:

000000008001e4e6 <_ZN4core3fmt10ArgumentV13new17hc1ed914d10380b65E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
    8001e4e6:	715d                	addi	sp,sp,-80
    8001e4e8:	e82a                	sd	a0,16(sp)
    8001e4ea:	f82a                	sd	a0,48(sp)
    8001e4ec:	fc2e                	sd	a1,56(sp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
    8001e4ee:	e0ae                	sd	a1,64(sp)
    8001e4f0:	ec2e                	sd	a1,24(sp)
    8001e4f2:	a009                	j	8001e4f4 <_ZN4core3fmt10ArgumentV13new17hc1ed914d10380b65E+0xe>
    8001e4f4:	6542                	ld	a0,16(sp)
    8001e4f6:	e4aa                	sd	a0,72(sp)
    8001e4f8:	e42a                	sd	a0,8(sp)
    8001e4fa:	a009                	j	8001e4fc <_ZN4core3fmt10ArgumentV13new17hc1ed914d10380b65E+0x16>
    8001e4fc:	65e2                	ld	a1,24(sp)
    8001e4fe:	6522                	ld	a0,8(sp)
    8001e500:	f02a                	sd	a0,32(sp)
    8001e502:	f42e                	sd	a1,40(sp)
    }
    8001e504:	6161                	addi	sp,sp,80
    8001e506:	8082                	ret

Disassembly of section .text._ZN4core3fmt10ArgumentV13new17hd8cc9af5365c80feE:

000000008001e508 <_ZN4core3fmt10ArgumentV13new17hd8cc9af5365c80feE>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
    8001e508:	715d                	addi	sp,sp,-80
    8001e50a:	e82a                	sd	a0,16(sp)
    8001e50c:	f82a                	sd	a0,48(sp)
    8001e50e:	fc2e                	sd	a1,56(sp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
    8001e510:	e0ae                	sd	a1,64(sp)
    8001e512:	ec2e                	sd	a1,24(sp)
    8001e514:	a009                	j	8001e516 <_ZN4core3fmt10ArgumentV13new17hd8cc9af5365c80feE+0xe>
    8001e516:	6542                	ld	a0,16(sp)
    8001e518:	e4aa                	sd	a0,72(sp)
    8001e51a:	e42a                	sd	a0,8(sp)
    8001e51c:	a009                	j	8001e51e <_ZN4core3fmt10ArgumentV13new17hd8cc9af5365c80feE+0x16>
    8001e51e:	65e2                	ld	a1,24(sp)
    8001e520:	6522                	ld	a0,8(sp)
    8001e522:	f02a                	sd	a0,32(sp)
    8001e524:	f42e                	sd	a1,40(sp)
    }
    8001e526:	6161                	addi	sp,sp,80
    8001e528:	8082                	ret

Disassembly of section .text._ZN4core3fmt10ArgumentV13new17hff1fcd65a46300b2E:

000000008001e52a <_ZN4core3fmt10ArgumentV13new17hff1fcd65a46300b2E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
    8001e52a:	715d                	addi	sp,sp,-80
    8001e52c:	e82a                	sd	a0,16(sp)
    8001e52e:	f82a                	sd	a0,48(sp)
    8001e530:	fc2e                	sd	a1,56(sp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
    8001e532:	e0ae                	sd	a1,64(sp)
    8001e534:	ec2e                	sd	a1,24(sp)
    8001e536:	a009                	j	8001e538 <_ZN4core3fmt10ArgumentV13new17hff1fcd65a46300b2E+0xe>
    8001e538:	6542                	ld	a0,16(sp)
    8001e53a:	e4aa                	sd	a0,72(sp)
    8001e53c:	e42a                	sd	a0,8(sp)
    8001e53e:	a009                	j	8001e540 <_ZN4core3fmt10ArgumentV13new17hff1fcd65a46300b2E+0x16>
    8001e540:	65e2                	ld	a1,24(sp)
    8001e542:	6522                	ld	a0,8(sp)
    8001e544:	f02a                	sd	a0,32(sp)
    8001e546:	f42e                	sd	a1,40(sp)
    }
    8001e548:	6161                	addi	sp,sp,80
    8001e54a:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register4satp4read17h0624a35f6368d5a6E:

000000008001e54c <_ZN6kernel4arch5riscv8register4satp4read17h0624a35f6368d5a6E>:
pub const SATP_SV39:usize =  8 << 60;

// supervisor address translation and protection;
// holds the address of the page table.
#[inline]
pub unsafe fn read() -> usize {
    8001e54c:	1141                	addi	sp,sp,-16
    let ret:usize;
    llvm_asm!("csrr $0, satp":"=r"(ret):::"volatile");
    8001e54e:	18002573          	csrr	a0,satp
    8001e552:	e42a                	sd	a0,8(sp)
    ret
}
    8001e554:	0141                	addi	sp,sp,16
    8001e556:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register4satp5write17h136481b47a553b1cE:

000000008001e558 <_ZN6kernel4arch5riscv8register4satp5write17h136481b47a553b1cE>:

pub unsafe fn write(x: usize){
    8001e558:	1141                	addi	sp,sp,-16
    8001e55a:	e42a                	sd	a0,8(sp)
    // println!("write satp");
    llvm_asm!("csrw satp, $0"::"r"(x)::"volatile");
    8001e55c:	18051073          	csrw	satp,a0
    8001e560:	0141                	addi	sp,sp,16
    8001e562:	8082                	ret

Disassembly of section .text._ZN6kernel2fs4stat4Stat3new17h349e191f39203f6dE:

000000008001e564 <_ZN6kernel2fs4stat4Stat3new17h349e191f39203f6dE>:
    pub nlink: i16, // Number of links to link
    pub size: usize, // Size of file bytes 
}

impl Stat {
    pub const fn new() -> Self {
    8001e564:	85aa                	mv	a1,a0
    8001e566:	4501                	li	a0,0
        Self {
    8001e568:	e188                	sd	a0,0(a1)
    8001e56a:	c588                	sw	a0,8(a1)
    8001e56c:	e988                	sd	a0,16(a1)
            inum: 0,
            itype: InodeType::Empty,
            nlink: 0,
            size: 0
        }
    }
    8001e56e:	8082                	ret

Disassembly of section .text._ZN4core3fmt5Write10write_char17hd77becfa0a78745aE:

000000008001e570 <_ZN4core3fmt5Write10write_char17hd77becfa0a78745aE>:
    fn write_char(&mut self, c: char) -> Result {
    8001e570:	715d                	addi	sp,sp,-80
    8001e572:	e486                	sd	ra,72(sp)
    8001e574:	e82e                	sd	a1,16(sp)
    8001e576:	85aa                	mv	a1,a0
    8001e578:	6542                	ld	a0,16(sp)
    8001e57a:	ec2e                	sd	a1,24(sp)
    8001e57c:	fc2e                	sd	a1,56(sp)
    8001e57e:	c2aa                	sw	a0,68(sp)
    8001e580:	4581                	li	a1,0
        self.write_str(c.encode_utf8(&mut [0; 4]))
    8001e582:	da2e                	sw	a1,52(sp)
    8001e584:	184c                	addi	a1,sp,52
    8001e586:	4611                	li	a2,4
    8001e588:	ffffd097          	auipc	ra,0xffffd
    8001e58c:	c16080e7          	jalr	-1002(ra) # 8001b19e <_ZN4core4char7methods22_$LT$impl$u20$char$GT$11encode_utf817h7239bcb774eea5aaE>
    8001e590:	f02a                	sd	a0,32(sp)
    8001e592:	f42e                	sd	a1,40(sp)
    8001e594:	a009                	j	8001e596 <_ZN4core3fmt5Write10write_char17hd77becfa0a78745aE+0x26>
    8001e596:	7622                	ld	a2,40(sp)
    8001e598:	7582                	ld	a1,32(sp)
    8001e59a:	6562                	ld	a0,24(sp)
    8001e59c:	ffffd097          	auipc	ra,0xffffd
    8001e5a0:	eaa080e7          	jalr	-342(ra) # 8001b446 <_ZN63_$LT$kernel..driver..uart..Uart$u20$as$u20$core..fmt..Write$GT$9write_str17ha964a515ad10903aE>
    8001e5a4:	e42a                	sd	a0,8(sp)
    8001e5a6:	a009                	j	8001e5a8 <_ZN4core3fmt5Write10write_char17hd77becfa0a78745aE+0x38>
    }
    8001e5a8:	6522                	ld	a0,8(sp)
    8001e5aa:	60a6                	ld	ra,72(sp)
    8001e5ac:	6161                	addi	sp,sp,80
    8001e5ae:	8082                	ret

Disassembly of section .text._ZN4core3fmt5Write9write_fmt17h7425e676f17f7351E:

000000008001e5b0 <_ZN4core3fmt5Write9write_fmt17h7425e676f17f7351E>:
    fn write_fmt(mut self: &mut Self, args: Arguments<'_>) -> Result {
    8001e5b0:	715d                	addi	sp,sp,-80
    8001e5b2:	e486                	sd	ra,72(sp)
    8001e5b4:	e82a                	sd	a0,16(sp)
        write(&mut self, args)
    8001e5b6:	6188                	ld	a0,0(a1)
    8001e5b8:	ec2a                	sd	a0,24(sp)
    8001e5ba:	6588                	ld	a0,8(a1)
    8001e5bc:	f02a                	sd	a0,32(sp)
    8001e5be:	6988                	ld	a0,16(a1)
    8001e5c0:	f42a                	sd	a0,40(sp)
    8001e5c2:	6d88                	ld	a0,24(a1)
    8001e5c4:	f82a                	sd	a0,48(sp)
    8001e5c6:	7188                	ld	a0,32(a1)
    8001e5c8:	fc2a                	sd	a0,56(sp)
    8001e5ca:	7588                	ld	a0,40(a1)
    8001e5cc:	e0aa                	sd	a0,64(sp)

000000008001e5ce <.LBB1_2>:
    8001e5ce:	0000d597          	auipc	a1,0xd
    8001e5d2:	27a58593          	addi	a1,a1,634 # 8002b848 <.L__unnamed_1>
    8001e5d6:	0808                	addi	a0,sp,16
    8001e5d8:	0830                	addi	a2,sp,24
    8001e5da:	00004097          	auipc	ra,0x4
    8001e5de:	384080e7          	jalr	900(ra) # 8002295e <_ZN4core3fmt5write17hf87af17b3ec995a2E>
    8001e5e2:	e42a                	sd	a0,8(sp)
    8001e5e4:	a009                	j	8001e5e6 <.LBB1_2+0x18>
    }
    8001e5e6:	6522                	ld	a0,8(sp)
    8001e5e8:	60a6                	ld	ra,72(sp)
    8001e5ea:	6161                	addi	sp,sp,80
    8001e5ec:	8082                	ret

Disassembly of section .text._ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h1e2dcf27a34235edE:

000000008001e5ee <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h1e2dcf27a34235edE>:
    fn write_char(&mut self, c: char) -> Result {
    8001e5ee:	1101                	addi	sp,sp,-32
    8001e5f0:	ec06                	sd	ra,24(sp)
    8001e5f2:	e42a                	sd	a0,8(sp)
    8001e5f4:	ca2e                	sw	a1,20(sp)
        (**self).write_char(c)
    8001e5f6:	6108                	ld	a0,0(a0)
    8001e5f8:	00000097          	auipc	ra,0x0
    8001e5fc:	f78080e7          	jalr	-136(ra) # 8001e570 <_ZN4core3fmt5Write10write_char17hd77becfa0a78745aE>
    8001e600:	e02a                	sd	a0,0(sp)
    8001e602:	a009                	j	8001e604 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h1e2dcf27a34235edE+0x16>
    }
    8001e604:	6502                	ld	a0,0(sp)
    8001e606:	60e2                	ld	ra,24(sp)
    8001e608:	6105                	addi	sp,sp,32
    8001e60a:	8082                	ret

Disassembly of section .text._ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17hc6623925455b9c1eE:

000000008001e60c <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17hc6623925455b9c1eE>:
    fn write_fmt(&mut self, args: Arguments<'_>) -> Result {
    8001e60c:	715d                	addi	sp,sp,-80
    8001e60e:	e486                	sd	ra,72(sp)
    8001e610:	e0aa                	sd	a0,64(sp)
        (**self).write_fmt(args)
    8001e612:	6108                	ld	a0,0(a0)
    8001e614:	7590                	ld	a2,40(a1)
    8001e616:	fc32                	sd	a2,56(sp)
    8001e618:	7190                	ld	a2,32(a1)
    8001e61a:	f832                	sd	a2,48(sp)
    8001e61c:	6d90                	ld	a2,24(a1)
    8001e61e:	f432                	sd	a2,40(sp)
    8001e620:	6990                	ld	a2,16(a1)
    8001e622:	f032                	sd	a2,32(sp)
    8001e624:	6590                	ld	a2,8(a1)
    8001e626:	ec32                	sd	a2,24(sp)
    8001e628:	618c                	ld	a1,0(a1)
    8001e62a:	e82e                	sd	a1,16(sp)
    8001e62c:	080c                	addi	a1,sp,16
    8001e62e:	00000097          	auipc	ra,0x0
    8001e632:	f82080e7          	jalr	-126(ra) # 8001e5b0 <_ZN4core3fmt5Write9write_fmt17h7425e676f17f7351E>
    8001e636:	e42a                	sd	a0,8(sp)
    8001e638:	a009                	j	8001e63a <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17hc6623925455b9c1eE+0x2e>
    }
    8001e63a:	6522                	ld	a0,8(sp)
    8001e63c:	60a6                	ld	ra,72(sp)
    8001e63e:	6161                	addi	sp,sp,80
    8001e640:	8082                	ret

Disassembly of section .text._ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h41f150747a15ec7fE:

000000008001e642 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h41f150747a15ec7fE>:
    fn write_str(&mut self, s: &str) -> Result {
    8001e642:	7179                	addi	sp,sp,-48
    8001e644:	f406                	sd	ra,40(sp)
    8001e646:	e82a                	sd	a0,16(sp)
    8001e648:	ec2e                	sd	a1,24(sp)
    8001e64a:	f032                	sd	a2,32(sp)
        (**self).write_str(s)
    8001e64c:	6108                	ld	a0,0(a0)
    8001e64e:	ffffd097          	auipc	ra,0xffffd
    8001e652:	df8080e7          	jalr	-520(ra) # 8001b446 <_ZN63_$LT$kernel..driver..uart..Uart$u20$as$u20$core..fmt..Write$GT$9write_str17ha964a515ad10903aE>
    8001e656:	e42a                	sd	a0,8(sp)
    8001e658:	a009                	j	8001e65a <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h41f150747a15ec7fE+0x18>
    }
    8001e65a:	6522                	ld	a0,8(sp)
    8001e65c:	70a2                	ld	ra,40(sp)
    8001e65e:	6145                	addi	sp,sp,48
    8001e660:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register2tp4read17h418649f5c8f5b927E:

000000008001e662 <_ZN6kernel4arch5riscv8register2tp4read17h418649f5c8f5b927E>:
// read and write tp, the thread pointer, which holds
// this core's hartid (core number), the index into cpus[].
#[inline]
pub unsafe fn read() -> usize {
    8001e662:	1141                	addi	sp,sp,-16
    let ret:usize;
    llvm_asm!("mv $0, tp":"=r"(ret):::"volatile");
    8001e664:	8512                	mv	a0,tp
    8001e666:	e42a                	sd	a0,8(sp)
    ret
}
    8001e668:	0141                	addi	sp,sp,16
    8001e66a:	8082                	ret

Disassembly of section .text._ZN6kernel4arch5riscv8register2tp5write17hac520d82928ad2ddE:

000000008001e66c <_ZN6kernel4arch5riscv8register2tp5write17hac520d82928ad2ddE>:

#[inline]
pub unsafe fn write(x:usize){
    8001e66c:	1141                	addi	sp,sp,-16
    8001e66e:	e42a                	sd	a0,8(sp)
    llvm_asm!("mv tp, $0"::"r"(x)::"volatile");
    8001e670:	822a                	mv	tp,a0
    8001e672:	0141                	addi	sp,sp,16
    8001e674:	8082                	ret

Disassembly of section .text._ZN4core3str8converts19from_utf8_unchecked17hb3b621a5f279bc07E:

000000008001e676 <_ZN4core3str8converts19from_utf8_unchecked17hb3b621a5f279bc07E>:
/// ```
#[inline]
#[stable(feature = "rust1", since = "1.0.0")]
#[rustc_const_unstable(feature = "const_str_from_utf8_unchecked", issue = "75196")]
#[rustc_allow_const_fn_unstable(const_fn_transmute)]
pub const unsafe fn from_utf8_unchecked(v: &[u8]) -> &str {
    8001e676:	7179                	addi	sp,sp,-48
    8001e678:	e82a                	sd	a0,16(sp)
    8001e67a:	ec2e                	sd	a1,24(sp)
    // SAFETY: the caller must guarantee that the bytes `v` are valid UTF-8.
    // Also relies on `&str` and `&[u8]` having the same layout.
    unsafe { mem::transmute(v) }
    8001e67c:	f02a                	sd	a0,32(sp)
    8001e67e:	f42e                	sd	a1,40(sp)
    8001e680:	e02a                	sd	a0,0(sp)
    8001e682:	e42e                	sd	a1,8(sp)
    8001e684:	a009                	j	8001e686 <_ZN4core3str8converts19from_utf8_unchecked17hb3b621a5f279bc07E+0x10>
}
    8001e686:	65a2                	ld	a1,8(sp)
    8001e688:	6502                	ld	a0,0(sp)
    8001e68a:	6145                	addi	sp,sp,48
    8001e68c:	8082                	ret

Disassembly of section .text._ZN4core3str8converts23from_utf8_unchecked_mut17h690302c73d561c56E:

000000008001e68e <_ZN4core3str8converts23from_utf8_unchecked_mut17h690302c73d561c56E>:
///
/// assert_eq!("💖", heart);
/// ```
#[inline]
#[stable(feature = "str_mut_extras", since = "1.20.0")]
pub unsafe fn from_utf8_unchecked_mut(v: &mut [u8]) -> &mut str {
    8001e68e:	1141                	addi	sp,sp,-16
    8001e690:	e02a                	sd	a0,0(sp)
    8001e692:	e42e                	sd	a1,8(sp)
    // SAFETY: the caller must guarantee that the bytes `v`
    // are valid UTF-8, thus the cast to `*mut str` is safe.
    // Also, the pointer dereference is safe because that pointer
    // comes from a reference which is guaranteed to be valid for writes.
    unsafe { &mut *(v as *mut [u8] as *mut str) }
}
    8001e694:	0141                	addi	sp,sp,16
    8001e696:	8082                	ret

Disassembly of section .text._ZN4core5alloc6layout6Layout12pad_to_align17hf134c92d73cc7687E:

000000008001e698 <_ZN4core5alloc6layout6Layout12pad_to_align17hf134c92d73cc7687E>:
    pub fn pad_to_align(&self) -> Layout {
    8001e698:	7159                	addi	sp,sp,-112
    8001e69a:	f486                	sd	ra,104(sp)
    8001e69c:	e0aa                	sd	a0,64(sp)
    8001e69e:	e8aa                	sd	a0,80(sp)
        let pad = self.padding_needed_for(self.align());
    8001e6a0:	00000097          	auipc	ra,0x0
    8001e6a4:	17e080e7          	jalr	382(ra) # 8001e81e <_ZN4core5alloc6layout6Layout5align17h05712eb17caed6beE>
    8001e6a8:	e4aa                	sd	a0,72(sp)
    8001e6aa:	a009                	j	8001e6ac <_ZN4core5alloc6layout6Layout12pad_to_align17hf134c92d73cc7687E+0x14>
    8001e6ac:	65a6                	ld	a1,72(sp)
    8001e6ae:	6506                	ld	a0,64(sp)
    8001e6b0:	00000097          	auipc	ra,0x0
    8001e6b4:	0ce080e7          	jalr	206(ra) # 8001e77e <_ZN4core5alloc6layout6Layout18padding_needed_for17h6f762d98d6b3cc59E>
    8001e6b8:	85aa                	mv	a1,a0
    8001e6ba:	fc2e                	sd	a1,56(sp)
    8001e6bc:	ecaa                	sd	a0,88(sp)
    8001e6be:	a009                	j	8001e6c0 <_ZN4core5alloc6layout6Layout12pad_to_align17hf134c92d73cc7687E+0x28>
        let new_size = self.size() + pad;
    8001e6c0:	6506                	ld	a0,64(sp)
    8001e6c2:	00000097          	auipc	ra,0x0
    8001e6c6:	152080e7          	jalr	338(ra) # 8001e814 <_ZN4core5alloc6layout6Layout4size17h7f60c0168860a2ffE>
    8001e6ca:	f82a                	sd	a0,48(sp)
    8001e6cc:	a009                	j	8001e6ce <_ZN4core5alloc6layout6Layout12pad_to_align17hf134c92d73cc7687E+0x36>
    8001e6ce:	6506                	ld	a0,64(sp)
    8001e6d0:	75c2                	ld	a1,48(sp)
    8001e6d2:	7662                	ld	a2,56(sp)
    8001e6d4:	95b2                	add	a1,a1,a2
    8001e6d6:	f02e                	sd	a1,32(sp)
    8001e6d8:	f0ae                	sd	a1,96(sp)
        Layout::from_size_align(new_size, self.align()).unwrap()
    8001e6da:	00000097          	auipc	ra,0x0
    8001e6de:	144080e7          	jalr	324(ra) # 8001e81e <_ZN4core5alloc6layout6Layout5align17h05712eb17caed6beE>
    8001e6e2:	f42a                	sd	a0,40(sp)
    8001e6e4:	a009                	j	8001e6e6 <_ZN4core5alloc6layout6Layout12pad_to_align17hf134c92d73cc7687E+0x4e>
    8001e6e6:	75a2                	ld	a1,40(sp)
    8001e6e8:	7502                	ld	a0,32(sp)
    8001e6ea:	00000097          	auipc	ra,0x0
    8001e6ee:	032080e7          	jalr	50(ra) # 8001e71c <_ZN4core5alloc6layout6Layout15from_size_align17h679d1a608f332f1fE>
    8001e6f2:	e82a                	sd	a0,16(sp)
    8001e6f4:	ec2e                	sd	a1,24(sp)
    8001e6f6:	a009                	j	8001e6f8 <_ZN4core5alloc6layout6Layout12pad_to_align17hf134c92d73cc7687E+0x60>
    8001e6f8:	65e2                	ld	a1,24(sp)
    8001e6fa:	6542                	ld	a0,16(sp)

000000008001e6fc <.LBB0_7>:
    8001e6fc:	0000d617          	auipc	a2,0xd
    8001e700:	1fc60613          	addi	a2,a2,508 # 8002b8f8 <.L__unnamed_1>
    8001e704:	fffee097          	auipc	ra,0xfffee
    8001e708:	5ee080e7          	jalr	1518(ra) # 8000ccf2 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h01f79eb8d5b769f4E>
    8001e70c:	e02a                	sd	a0,0(sp)
    8001e70e:	e42e                	sd	a1,8(sp)
    8001e710:	a009                	j	8001e712 <.LBB0_7+0x16>
    }
    8001e712:	65a2                	ld	a1,8(sp)
    8001e714:	6502                	ld	a0,0(sp)
    8001e716:	70a6                	ld	ra,104(sp)
    8001e718:	6165                	addi	sp,sp,112
    8001e71a:	8082                	ret

Disassembly of section .text._ZN4core5alloc6layout6Layout15from_size_align17h679d1a608f332f1fE:

000000008001e71c <_ZN4core5alloc6layout6Layout15from_size_align17h679d1a608f332f1fE>:
    pub const fn from_size_align(size: usize, align: usize) -> Result<Self, LayoutError> {
    8001e71c:	715d                	addi	sp,sp,-80
    8001e71e:	e486                	sd	ra,72(sp)
    8001e720:	e82e                	sd	a1,16(sp)
    8001e722:	85aa                	mv	a1,a0
    8001e724:	6542                	ld	a0,16(sp)
    8001e726:	ec2e                	sd	a1,24(sp)
    8001e728:	fc2e                	sd	a1,56(sp)
    8001e72a:	e0aa                	sd	a0,64(sp)
        if !align.is_power_of_two() {
    8001e72c:	00000097          	auipc	ra,0x0
    8001e730:	86c080e7          	jalr	-1940(ra) # 8001df98 <_ZN4core3num23_$LT$impl$u20$usize$GT$15is_power_of_two17h1415e23f4938ba42E>
    8001e734:	f02a                	sd	a0,32(sp)
    8001e736:	a009                	j	8001e738 <_ZN4core5alloc6layout6Layout15from_size_align17h679d1a608f332f1fE+0x1c>
    8001e738:	7502                	ld	a0,32(sp)
    8001e73a:	e509                	bnez	a0,8001e744 <_ZN4core5alloc6layout6Layout15from_size_align17h679d1a608f332f1fE+0x28>
    8001e73c:	a009                	j	8001e73e <_ZN4core5alloc6layout6Layout15from_size_align17h679d1a608f332f1fE+0x22>
    8001e73e:	4501                	li	a0,0
            return Err(LayoutError { private: () });
    8001e740:	f82a                	sd	a0,48(sp)
    8001e742:	a80d                	j	8001e774 <_ZN4core5alloc6layout6Layout15from_size_align17h679d1a608f332f1fE+0x58>
    8001e744:	65e2                	ld	a1,24(sp)
    8001e746:	6642                	ld	a2,16(sp)
    8001e748:	4501                	li	a0,0
        if size > usize::MAX - (align - 1) {
    8001e74a:	8d11                	sub	a0,a0,a2
    8001e74c:	00b57663          	bgeu	a0,a1,8001e758 <_ZN4core5alloc6layout6Layout15from_size_align17h679d1a608f332f1fE+0x3c>
    8001e750:	a009                	j	8001e752 <_ZN4core5alloc6layout6Layout15from_size_align17h679d1a608f332f1fE+0x36>
    8001e752:	4501                	li	a0,0
            return Err(LayoutError { private: () });
    8001e754:	f82a                	sd	a0,48(sp)
    8001e756:	a839                	j	8001e774 <_ZN4core5alloc6layout6Layout15from_size_align17h679d1a608f332f1fE+0x58>
        unsafe { Ok(Layout::from_size_align_unchecked(size, align)) }
    8001e758:	65c2                	ld	a1,16(sp)
    8001e75a:	6562                	ld	a0,24(sp)
    8001e75c:	00000097          	auipc	ra,0x0
    8001e760:	08e080e7          	jalr	142(ra) # 8001e7ea <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h7d187b5349095d20E>
    8001e764:	e02a                	sd	a0,0(sp)
    8001e766:	e42e                	sd	a1,8(sp)
    8001e768:	a009                	j	8001e76a <_ZN4core5alloc6layout6Layout15from_size_align17h679d1a608f332f1fE+0x4e>
    8001e76a:	6522                	ld	a0,8(sp)
    8001e76c:	6582                	ld	a1,0(sp)
    8001e76e:	f42e                	sd	a1,40(sp)
    8001e770:	f82a                	sd	a0,48(sp)
    }
    8001e772:	a009                	j	8001e774 <_ZN4core5alloc6layout6Layout15from_size_align17h679d1a608f332f1fE+0x58>
    8001e774:	7522                	ld	a0,40(sp)
    8001e776:	75c2                	ld	a1,48(sp)
    8001e778:	60a6                	ld	ra,72(sp)
    8001e77a:	6161                	addi	sp,sp,80
    8001e77c:	8082                	ret

Disassembly of section .text._ZN4core5alloc6layout6Layout18padding_needed_for17h6f762d98d6b3cc59E:

000000008001e77e <_ZN4core5alloc6layout6Layout18padding_needed_for17h6f762d98d6b3cc59E>:
    pub const fn padding_needed_for(&self, align: usize) -> usize {
    8001e77e:	711d                	addi	sp,sp,-96
    8001e780:	ec86                	sd	ra,88(sp)
    8001e782:	f42e                	sd	a1,40(sp)
    8001e784:	fc2a                	sd	a0,56(sp)
    8001e786:	e0ae                	sd	a1,64(sp)
        let len = self.size();
    8001e788:	00000097          	auipc	ra,0x0
    8001e78c:	08c080e7          	jalr	140(ra) # 8001e814 <_ZN4core5alloc6layout6Layout4size17h7f60c0168860a2ffE>
    8001e790:	85aa                	mv	a1,a0
    8001e792:	f82e                	sd	a1,48(sp)
    8001e794:	e4aa                	sd	a0,72(sp)
    8001e796:	a009                	j	8001e798 <_ZN4core5alloc6layout6Layout18padding_needed_for17h6f762d98d6b3cc59E+0x1a>
        let len_rounded_up = len.wrapping_add(align).wrapping_sub(1) & !align.wrapping_sub(1);
    8001e798:	75a2                	ld	a1,40(sp)
    8001e79a:	7542                	ld	a0,48(sp)
    8001e79c:	fffff097          	auipc	ra,0xfffff
    8001e7a0:	77c080e7          	jalr	1916(ra) # 8001df18 <_ZN4core3num23_$LT$impl$u20$usize$GT$12wrapping_add17he0ea74277f4c06b1E>
    8001e7a4:	f02a                	sd	a0,32(sp)
    8001e7a6:	a009                	j	8001e7a8 <_ZN4core5alloc6layout6Layout18padding_needed_for17h6f762d98d6b3cc59E+0x2a>
    8001e7a8:	7502                	ld	a0,32(sp)
    8001e7aa:	4585                	li	a1,1
    8001e7ac:	fffff097          	auipc	ra,0xfffff
    8001e7b0:	778080e7          	jalr	1912(ra) # 8001df24 <_ZN4core3num23_$LT$impl$u20$usize$GT$12wrapping_sub17h8f077bf007d122c9E>
    8001e7b4:	ec2a                	sd	a0,24(sp)
    8001e7b6:	a009                	j	8001e7b8 <_ZN4core5alloc6layout6Layout18padding_needed_for17h6f762d98d6b3cc59E+0x3a>
    8001e7b8:	7522                	ld	a0,40(sp)
    8001e7ba:	4585                	li	a1,1
    8001e7bc:	fffff097          	auipc	ra,0xfffff
    8001e7c0:	768080e7          	jalr	1896(ra) # 8001df24 <_ZN4core3num23_$LT$impl$u20$usize$GT$12wrapping_sub17h8f077bf007d122c9E>
    8001e7c4:	e82a                	sd	a0,16(sp)
    8001e7c6:	a009                	j	8001e7c8 <_ZN4core5alloc6layout6Layout18padding_needed_for17h6f762d98d6b3cc59E+0x4a>
    8001e7c8:	75c2                	ld	a1,48(sp)
    8001e7ca:	6562                	ld	a0,24(sp)
    8001e7cc:	6642                	ld	a2,16(sp)
    8001e7ce:	fff64613          	not	a2,a2
    8001e7d2:	8d71                	and	a0,a0,a2
    8001e7d4:	e8aa                	sd	a0,80(sp)
        len_rounded_up.wrapping_sub(len)
    8001e7d6:	fffff097          	auipc	ra,0xfffff
    8001e7da:	74e080e7          	jalr	1870(ra) # 8001df24 <_ZN4core3num23_$LT$impl$u20$usize$GT$12wrapping_sub17h8f077bf007d122c9E>
    8001e7de:	e42a                	sd	a0,8(sp)
    8001e7e0:	a009                	j	8001e7e2 <_ZN4core5alloc6layout6Layout18padding_needed_for17h6f762d98d6b3cc59E+0x64>
    }
    8001e7e2:	6522                	ld	a0,8(sp)
    8001e7e4:	60e6                	ld	ra,88(sp)
    8001e7e6:	6125                	addi	sp,sp,96
    8001e7e8:	8082                	ret

Disassembly of section .text._ZN4core5alloc6layout6Layout25from_size_align_unchecked17h7d187b5349095d20E:

000000008001e7ea <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h7d187b5349095d20E>:
    pub const unsafe fn from_size_align_unchecked(size: usize, align: usize) -> Self {
    8001e7ea:	7139                	addi	sp,sp,-64
    8001e7ec:	fc06                	sd	ra,56(sp)
    8001e7ee:	e02e                	sd	a1,0(sp)
    8001e7f0:	85aa                	mv	a1,a0
    8001e7f2:	6502                	ld	a0,0(sp)
    8001e7f4:	e42e                	sd	a1,8(sp)
    8001e7f6:	f42e                	sd	a1,40(sp)
    8001e7f8:	f82a                	sd	a0,48(sp)
        Layout { size_: size, align_: unsafe { NonZeroUsize::new_unchecked(align) } }
    8001e7fa:	ffffa097          	auipc	ra,0xffffa
    8001e7fe:	acc080e7          	jalr	-1332(ra) # 800182c6 <_ZN4core3num7nonzero12NonZeroUsize13new_unchecked17h04f2481c8bf8ee85E>
    8001e802:	e82a                	sd	a0,16(sp)
    8001e804:	a009                	j	8001e806 <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h7d187b5349095d20E+0x1c>
    8001e806:	65c2                	ld	a1,16(sp)
    8001e808:	6522                	ld	a0,8(sp)
    8001e80a:	ec2a                	sd	a0,24(sp)
    8001e80c:	f02e                	sd	a1,32(sp)
    }
    8001e80e:	70e2                	ld	ra,56(sp)
    8001e810:	6121                	addi	sp,sp,64
    8001e812:	8082                	ret

Disassembly of section .text._ZN4core5alloc6layout6Layout4size17h7f60c0168860a2ffE:

000000008001e814 <_ZN4core5alloc6layout6Layout4size17h7f60c0168860a2ffE>:
    pub const fn size(&self) -> usize {
    8001e814:	1141                	addi	sp,sp,-16
    8001e816:	e42a                	sd	a0,8(sp)
        self.size_
    8001e818:	6108                	ld	a0,0(a0)
    }
    8001e81a:	0141                	addi	sp,sp,16
    8001e81c:	8082                	ret

Disassembly of section .text._ZN4core5alloc6layout6Layout5align17h05712eb17caed6beE:

000000008001e81e <_ZN4core5alloc6layout6Layout5align17h05712eb17caed6beE>:
    pub const fn align(&self) -> usize {
    8001e81e:	1101                	addi	sp,sp,-32
    8001e820:	ec06                	sd	ra,24(sp)
    8001e822:	e82a                	sd	a0,16(sp)
        self.align_.get()
    8001e824:	6508                	ld	a0,8(a0)
    8001e826:	ffffa097          	auipc	ra,0xffffa
    8001e82a:	aaa080e7          	jalr	-1366(ra) # 800182d0 <_ZN4core3num7nonzero12NonZeroUsize3get17h9c9882678da2bc98E>
    8001e82e:	e42a                	sd	a0,8(sp)
    8001e830:	a009                	j	8001e832 <_ZN4core5alloc6layout6Layout5align17h05712eb17caed6beE+0x14>
    }
    8001e832:	6522                	ld	a0,8(sp)
    8001e834:	60e2                	ld	ra,24(sp)
    8001e836:	6105                	addi	sp,sp,32
    8001e838:	8082                	ret

Disassembly of section .text._ZN4core5alloc6layout6Layout6repeat17he5367bbab955aefbE:

000000008001e83a <_ZN4core5alloc6layout6Layout6repeat17he5367bbab955aefbE>:
    pub fn repeat(&self, n: usize) -> Result<(Self, usize), LayoutError> {
    8001e83a:	7115                	addi	sp,sp,-224
    8001e83c:	ed86                	sd	ra,216(sp)
    8001e83e:	ecb2                	sd	a2,88(sp)
    8001e840:	f0ae                	sd	a1,96(sp)
    8001e842:	85aa                	mv	a1,a0
    8001e844:	7506                	ld	a0,96(sp)
    8001e846:	f4ae                	sd	a1,104(sp)
    8001e848:	f52a                	sd	a0,168(sp)
    8001e84a:	f932                	sd	a2,176(sp)
        let padded_size = self.size() + self.padding_needed_for(self.align());
    8001e84c:	00000097          	auipc	ra,0x0
    8001e850:	fc8080e7          	jalr	-56(ra) # 8001e814 <_ZN4core5alloc6layout6Layout4size17h7f60c0168860a2ffE>
    8001e854:	f8aa                	sd	a0,112(sp)
    8001e856:	a009                	j	8001e858 <_ZN4core5alloc6layout6Layout6repeat17he5367bbab955aefbE+0x1e>
    8001e858:	7506                	ld	a0,96(sp)
    8001e85a:	00000097          	auipc	ra,0x0
    8001e85e:	fc4080e7          	jalr	-60(ra) # 8001e81e <_ZN4core5alloc6layout6Layout5align17h05712eb17caed6beE>
    8001e862:	e8aa                	sd	a0,80(sp)
    8001e864:	a009                	j	8001e866 <_ZN4core5alloc6layout6Layout6repeat17he5367bbab955aefbE+0x2c>
    8001e866:	65c6                	ld	a1,80(sp)
    8001e868:	7506                	ld	a0,96(sp)
    8001e86a:	00000097          	auipc	ra,0x0
    8001e86e:	f14080e7          	jalr	-236(ra) # 8001e77e <_ZN4core5alloc6layout6Layout18padding_needed_for17h6f762d98d6b3cc59E>
    8001e872:	e4aa                	sd	a0,72(sp)
    8001e874:	a009                	j	8001e876 <_ZN4core5alloc6layout6Layout6repeat17he5367bbab955aefbE+0x3c>
    8001e876:	65e6                	ld	a1,88(sp)
    8001e878:	7546                	ld	a0,112(sp)
    8001e87a:	6626                	ld	a2,72(sp)
    8001e87c:	9532                	add	a0,a0,a2
    8001e87e:	f82a                	sd	a0,48(sp)
    8001e880:	e1aa                	sd	a0,192(sp)
        let alloc_size = padded_size.checked_mul(n).ok_or(LayoutError { private: () })?;
    8001e882:	fffff097          	auipc	ra,0xfffff
    8001e886:	5fa080e7          	jalr	1530(ra) # 8001de7c <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_mul17h38933f87a0e6dbeaE>
    8001e88a:	fc2a                	sd	a0,56(sp)
    8001e88c:	e0ae                	sd	a1,64(sp)
    8001e88e:	a009                	j	8001e890 <_ZN4core5alloc6layout6Layout6repeat17he5367bbab955aefbE+0x56>
    8001e890:	6586                	ld	a1,64(sp)
    8001e892:	7562                	ld	a0,56(sp)
    8001e894:	ffff0097          	auipc	ra,0xffff0
    8001e898:	e28080e7          	jalr	-472(ra) # 8000e6bc <_ZN4core6option15Option$LT$T$GT$5ok_or17h630e1a004ee31f6cE>
    8001e89c:	f02a                	sd	a0,32(sp)
    8001e89e:	f42e                	sd	a1,40(sp)
    8001e8a0:	a009                	j	8001e8a2 <_ZN4core5alloc6layout6Layout6repeat17he5367bbab955aefbE+0x68>
    8001e8a2:	75a2                	ld	a1,40(sp)
    8001e8a4:	7502                	ld	a0,32(sp)
    8001e8a6:	fffef097          	auipc	ra,0xfffef
    8001e8aa:	8d4080e7          	jalr	-1836(ra) # 8000d17a <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hd9845beb6e8da5c7E>
    8001e8ae:	fcaa                	sd	a0,120(sp)
    8001e8b0:	e12e                	sd	a1,128(sp)
    8001e8b2:	a009                	j	8001e8b4 <_ZN4core5alloc6layout6Layout6repeat17he5367bbab955aefbE+0x7a>
    8001e8b4:	7566                	ld	a0,120(sp)
    8001e8b6:	4581                	li	a1,0
    8001e8b8:	00b50463          	beq	a0,a1,8001e8c0 <_ZN4core5alloc6layout6Layout6repeat17he5367bbab955aefbE+0x86>
    8001e8bc:	a009                	j	8001e8be <_ZN4core5alloc6layout6Layout6repeat17he5367bbab955aefbE+0x84>
    8001e8be:	a829                	j	8001e8d8 <_ZN4core5alloc6layout6Layout6repeat17he5367bbab955aefbE+0x9e>
    8001e8c0:	7506                	ld	a0,96(sp)
    8001e8c2:	658a                	ld	a1,128(sp)
    8001e8c4:	e82e                	sd	a1,16(sp)
    8001e8c6:	e5ae                	sd	a1,200(sp)
    8001e8c8:	e9ae                	sd	a1,208(sp)
        unsafe { Ok((Layout::from_size_align_unchecked(alloc_size, self.align()), padded_size)) }
    8001e8ca:	00000097          	auipc	ra,0x0
    8001e8ce:	f54080e7          	jalr	-172(ra) # 8001e81e <_ZN4core5alloc6layout6Layout5align17h05712eb17caed6beE>
    8001e8d2:	ec2a                	sd	a0,24(sp)
    8001e8d4:	a831                	j	8001e8f0 <_ZN4core5alloc6layout6Layout6repeat17he5367bbab955aefbE+0xb6>
        let alloc_size = padded_size.checked_mul(n).ok_or(LayoutError { private: () })?;
    8001e8d6:	0000                	unimp
    8001e8d8:	fffea097          	auipc	ra,0xfffea
    8001e8dc:	e28080e7          	jalr	-472(ra) # 80008700 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h2a9aee2c044310b7E>
    8001e8e0:	a009                	j	8001e8e2 <_ZN4core5alloc6layout6Layout6repeat17he5367bbab955aefbE+0xa8>
    8001e8e2:	7526                	ld	a0,104(sp)
    8001e8e4:	fffee097          	auipc	ra,0xfffee
    8001e8e8:	780080e7          	jalr	1920(ra) # 8000d064 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h826a3a4a12863e91E>
    8001e8ec:	a009                	j	8001e8ee <_ZN4core5alloc6layout6Layout6repeat17he5367bbab955aefbE+0xb4>
    }
    8001e8ee:	a02d                	j	8001e918 <_ZN4core5alloc6layout6Layout6repeat17he5367bbab955aefbE+0xde>
        unsafe { Ok((Layout::from_size_align_unchecked(alloc_size, self.align()), padded_size)) }
    8001e8f0:	65e2                	ld	a1,24(sp)
    8001e8f2:	6542                	ld	a0,16(sp)
    8001e8f4:	00000097          	auipc	ra,0x0
    8001e8f8:	ef6080e7          	jalr	-266(ra) # 8001e7ea <_ZN4core5alloc6layout6Layout25from_size_align_unchecked17h7d187b5349095d20E>
    8001e8fc:	e02a                	sd	a0,0(sp)
    8001e8fe:	e42e                	sd	a1,8(sp)
    8001e900:	a009                	j	8001e902 <_ZN4core5alloc6layout6Layout6repeat17he5367bbab955aefbE+0xc8>
    8001e902:	6502                	ld	a0,0(sp)
    8001e904:	75a6                	ld	a1,104(sp)
    8001e906:	6622                	ld	a2,8(sp)
    8001e908:	76c2                	ld	a3,48(sp)
    8001e90a:	e92a                	sd	a0,144(sp)
    8001e90c:	ed32                	sd	a2,152(sp)
    8001e90e:	f136                	sd	a3,160(sp)
    8001e910:	e994                	sd	a3,16(a1)
    8001e912:	e590                	sd	a2,8(a1)
    8001e914:	e188                	sd	a0,0(a1)
    }
    8001e916:	a009                	j	8001e918 <_ZN4core5alloc6layout6Layout6repeat17he5367bbab955aefbE+0xde>
    8001e918:	60ee                	ld	ra,216(sp)
    8001e91a:	612d                	addi	sp,sp,224
    8001e91c:	8082                	ret

Disassembly of section .text._ZN4core5alloc6layout6Layout8dangling17h635528e7b5a013bbE:

000000008001e91e <_ZN4core5alloc6layout6Layout8dangling17h635528e7b5a013bbE>:
    pub const fn dangling(&self) -> NonNull<u8> {
    8001e91e:	1101                	addi	sp,sp,-32
    8001e920:	ec06                	sd	ra,24(sp)
    8001e922:	e82a                	sd	a0,16(sp)
        unsafe { NonNull::new_unchecked(self.align() as *mut u8) }
    8001e924:	00000097          	auipc	ra,0x0
    8001e928:	efa080e7          	jalr	-262(ra) # 8001e81e <_ZN4core5alloc6layout6Layout5align17h05712eb17caed6beE>
    8001e92c:	e42a                	sd	a0,8(sp)
    8001e92e:	a009                	j	8001e930 <_ZN4core5alloc6layout6Layout8dangling17h635528e7b5a013bbE+0x12>
    8001e930:	6522                	ld	a0,8(sp)
    8001e932:	ffff1097          	auipc	ra,0xffff1
    8001e936:	8ee080e7          	jalr	-1810(ra) # 8000f220 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h5ed8fa4a56812246E>
    8001e93a:	e02a                	sd	a0,0(sp)
    8001e93c:	a009                	j	8001e93e <_ZN4core5alloc6layout6Layout8dangling17h635528e7b5a013bbE+0x20>
    }
    8001e93e:	6502                	ld	a0,0(sp)
    8001e940:	60e2                	ld	ra,24(sp)
    8001e942:	6105                	addi	sp,sp,32
    8001e944:	8082                	ret

Disassembly of section .text._ZN6kernel6driver11virtio_disk4Disk4init17h491380cac5f59b4bE:

000000008001e946 <_ZN6kernel6driver11virtio_disk4Disk4init17h491380cac5f59b4bE>:
    pub unsafe fn init(&mut self) {
    8001e946:	dc010113          	addi	sp,sp,-576
    8001e94a:	22113c23          	sd	ra,568(sp)
    8001e94e:	e52a                	sd	a0,136(sp)
    8001e950:	f7aa                	sd	a0,488(sp)
    8001e952:	6585                	lui	a1,0x1
    8001e954:	35fd                	addiw	a1,a1,-1
        debug_assert_eq!((&self.desc as *const _ as usize) % PGSIZE, 0);
    8001e956:	8d6d                	and	a0,a0,a1
    8001e958:	f92a                	sd	a0,176(sp)
    8001e95a:	1910                	addi	a2,sp,176
    8001e95c:	e932                	sd	a2,144(sp)
    8001e95e:	f132                	sd	a2,160(sp)

000000008001e960 <.LBB0_47>:
    8001e960:	00008597          	auipc	a1,0x8
    8001e964:	ea058593          	addi	a1,a1,-352 # 80026800 <.L__unnamed_6+0xc8>
    8001e968:	ed2e                	sd	a1,152(sp)
    8001e96a:	f52e                	sd	a1,168(sp)
    8001e96c:	fbb2                	sd	a2,496(sp)
    8001e96e:	ffae                	sd	a1,504(sp)
    8001e970:	4581                	li	a1,0
    8001e972:	02b50363          	beq	a0,a1,8001e998 <.LBB0_48+0x14>
    8001e976:	a009                	j	8001e978 <.LBB0_47+0x18>
    8001e978:	666a                	ld	a2,152(sp)
    8001e97a:	65ca                	ld	a1,144(sp)
    8001e97c:	4501                	li	a0,0
    8001e97e:	0aa10fa3          	sb	a0,191(sp)
    8001e982:	e1aa                	sd	a0,192(sp)

000000008001e984 <.LBB0_48>:
    8001e984:	0000d717          	auipc	a4,0xd
    8001e988:	fb470713          	addi	a4,a4,-76 # 8002b938 <.L__unnamed_2>
    8001e98c:	0194                	addi	a3,sp,192
    8001e98e:	00001097          	auipc	ra,0x1
    8001e992:	e9c080e7          	jalr	-356(ra) # 8001f82a <_ZN4core9panicking13assert_failed17h4e6d74c9d534b647E>
    8001e996:	0000                	unimp
    8001e998:	652a                	ld	a0,136(sp)
    8001e99a:	6585                	lui	a1,0x1
        debug_assert_eq!((&self.used as *const _ as usize) % PGSIZE, 0);
    8001e99c:	952e                	add	a0,a0,a1
    8001e99e:	35fd                	addiw	a1,a1,-1
    8001e9a0:	8d6d                	and	a0,a0,a1
    8001e9a2:	e22a                	sd	a0,256(sp)
    8001e9a4:	0210                	addi	a2,sp,256
    8001e9a6:	fcb2                	sd	a2,120(sp)
    8001e9a8:	f9b2                	sd	a2,240(sp)

000000008001e9aa <.LBB0_49>:
    8001e9aa:	00008597          	auipc	a1,0x8
    8001e9ae:	e5658593          	addi	a1,a1,-426 # 80026800 <.L__unnamed_6+0xc8>
    8001e9b2:	e12e                	sd	a1,128(sp)
    8001e9b4:	fdae                	sd	a1,248(sp)
    8001e9b6:	20c13023          	sd	a2,512(sp)
    8001e9ba:	20b13423          	sd	a1,520(sp)
    8001e9be:	4581                	li	a1,0
    8001e9c0:	02b50363          	beq	a0,a1,8001e9e6 <.LBB0_50+0x14>
    8001e9c4:	a009                	j	8001e9c6 <.LBB0_49+0x1c>
    8001e9c6:	660a                	ld	a2,128(sp)
    8001e9c8:	75e6                	ld	a1,120(sp)
    8001e9ca:	4501                	li	a0,0
    8001e9cc:	10a107a3          	sb	a0,271(sp)
    8001e9d0:	ea2a                	sd	a0,272(sp)

000000008001e9d2 <.LBB0_50>:
    8001e9d2:	0000d717          	auipc	a4,0xd
    8001e9d6:	f7e70713          	addi	a4,a4,-130 # 8002b950 <.L__unnamed_3>
    8001e9da:	0a14                	addi	a3,sp,272
    8001e9dc:	00001097          	auipc	ra,0x1
    8001e9e0:	e4e080e7          	jalr	-434(ra) # 8001f82a <_ZN4core9panicking13assert_failed17h4e6d74c9d534b647E>
    8001e9e4:	0000                	unimp
    8001e9e6:	652a                	ld	a0,136(sp)
    8001e9e8:	6589                	lui	a1,0x2
        debug_assert_eq!((&self.free as *const _ as usize) % PGSIZE, 0);
    8001e9ea:	952e                	add	a0,a0,a1
    8001e9ec:	6585                	lui	a1,0x1
    8001e9ee:	35fd                	addiw	a1,a1,-1
    8001e9f0:	8d6d                	and	a0,a0,a1
    8001e9f2:	eaaa                	sd	a0,336(sp)
    8001e9f4:	0a90                	addi	a2,sp,336
    8001e9f6:	f4b2                	sd	a2,104(sp)
    8001e9f8:	e2b2                	sd	a2,320(sp)

000000008001e9fa <.LBB0_51>:
    8001e9fa:	00008597          	auipc	a1,0x8
    8001e9fe:	e0658593          	addi	a1,a1,-506 # 80026800 <.L__unnamed_6+0xc8>
    8001ea02:	f8ae                	sd	a1,112(sp)
    8001ea04:	e6ae                	sd	a1,328(sp)
    8001ea06:	20c13823          	sd	a2,528(sp)
    8001ea0a:	20b13c23          	sd	a1,536(sp)
    8001ea0e:	4581                	li	a1,0
    8001ea10:	02b50363          	beq	a0,a1,8001ea36 <.LBB0_52+0x14>
    8001ea14:	a009                	j	8001ea16 <.LBB0_51+0x1c>
    8001ea16:	7646                	ld	a2,112(sp)
    8001ea18:	75a6                	ld	a1,104(sp)
    8001ea1a:	4501                	li	a0,0
    8001ea1c:	14a10fa3          	sb	a0,351(sp)
    8001ea20:	f2aa                	sd	a0,352(sp)

000000008001ea22 <.LBB0_52>:
    8001ea22:	0000d717          	auipc	a4,0xd
    8001ea26:	f4670713          	addi	a4,a4,-186 # 8002b968 <.L__unnamed_4>
    8001ea2a:	1294                	addi	a3,sp,352
    8001ea2c:	00001097          	auipc	ra,0x1
    8001ea30:	dfe080e7          	jalr	-514(ra) # 8001f82a <_ZN4core9panicking13assert_failed17h4e6d74c9d534b647E>
    8001ea34:	0000                	unimp
    8001ea36:	4501                	li	a0,0
        if read(VIRTIO_MMIO_MAGIC_VALUE) != 0x74726976
    8001ea38:	00001097          	auipc	ra,0x1
    8001ea3c:	924080e7          	jalr	-1756(ra) # 8001f35c <_ZN6kernel6driver11virtio_disk4read17h68d9cc1e57aa6089E>
    8001ea40:	f0aa                	sd	a0,96(sp)
    8001ea42:	a8ad                	j	8001eabc <.LBB0_52+0x9a>
    8001ea44:	4505                	li	a0,1
    8001ea46:	18a10aa3          	sb	a0,405(sp)
    8001ea4a:	a821                	j	8001ea62 <.LBB0_52+0x40>
    8001ea4c:	4501                	li	a0,0
    8001ea4e:	18a10aa3          	sb	a0,405(sp)
    8001ea52:	a801                	j	8001ea62 <.LBB0_52+0x40>
    8001ea54:	4531                	li	a0,12
            || read(VIRTIO_MMIO_VENDOR_ID) != 0x554d4551
    8001ea56:	00001097          	auipc	ra,0x1
    8001ea5a:	906080e7          	jalr	-1786(ra) # 8001f35c <_ZN6kernel6driver11virtio_disk4read17h68d9cc1e57aa6089E>
    8001ea5e:	ecaa                	sd	a0,88(sp)
    8001ea60:	a059                	j	8001eae6 <.LBB0_52+0xc4>
        if read(VIRTIO_MMIO_MAGIC_VALUE) != 0x74726976
    8001ea62:	19514503          	lbu	a0,405(sp)
    8001ea66:	8905                	andi	a0,a0,1
    8001ea68:	e941                	bnez	a0,8001eaf8 <.LBB0_53>
    8001ea6a:	a06d                	j	8001eb14 <.LBB0_54+0x14>
    8001ea6c:	4505                	li	a0,1
    8001ea6e:	18a10b23          	sb	a0,406(sp)
    8001ea72:	a821                	j	8001ea8a <.LBB0_52+0x68>
    8001ea74:	4501                	li	a0,0
    8001ea76:	18a10b23          	sb	a0,406(sp)
    8001ea7a:	a801                	j	8001ea8a <.LBB0_52+0x68>
    8001ea7c:	4521                	li	a0,8
            || read(VIRTIO_MMIO_DEVICE_ID) != 2
    8001ea7e:	00001097          	auipc	ra,0x1
    8001ea82:	8de080e7          	jalr	-1826(ra) # 8001f35c <_ZN6kernel6driver11virtio_disk4read17h68d9cc1e57aa6089E>
    8001ea86:	e8aa                	sd	a0,80(sp)
    8001ea88:	a889                	j	8001eada <.LBB0_52+0xb8>
        if read(VIRTIO_MMIO_MAGIC_VALUE) != 0x74726976
    8001ea8a:	19614503          	lbu	a0,406(sp)
    8001ea8e:	8905                	andi	a0,a0,1
    8001ea90:	f955                	bnez	a0,8001ea44 <.LBB0_52+0x22>
    8001ea92:	b7c9                	j	8001ea54 <.LBB0_52+0x32>
    8001ea94:	4505                	li	a0,1
    8001ea96:	18a10ba3          	sb	a0,407(sp)
    8001ea9a:	a821                	j	8001eab2 <.LBB0_52+0x90>
    8001ea9c:	4501                	li	a0,0
    8001ea9e:	18a10ba3          	sb	a0,407(sp)
    8001eaa2:	a801                	j	8001eab2 <.LBB0_52+0x90>
    8001eaa4:	4511                	li	a0,4
            || read(VIRTIO_MMIO_VERSION) != 1
    8001eaa6:	00001097          	auipc	ra,0x1
    8001eaaa:	8b6080e7          	jalr	-1866(ra) # 8001f35c <_ZN6kernel6driver11virtio_disk4read17h68d9cc1e57aa6089E>
    8001eaae:	e4aa                	sd	a0,72(sp)
    8001eab0:	a839                	j	8001eace <.LBB0_52+0xac>
        if read(VIRTIO_MMIO_MAGIC_VALUE) != 0x74726976
    8001eab2:	19714503          	lbu	a0,407(sp)
    8001eab6:	8905                	andi	a0,a0,1
    8001eab8:	f955                	bnez	a0,8001ea6c <.LBB0_52+0x4a>
    8001eaba:	b7c9                	j	8001ea7c <.LBB0_52+0x5a>
    8001eabc:	7506                	ld	a0,96(sp)
    8001eabe:	2501                	sext.w	a0,a0
    8001eac0:	747275b7          	lui	a1,0x74727
    8001eac4:	9765859b          	addiw	a1,a1,-1674
    8001eac8:	fcb50ee3          	beq	a0,a1,8001eaa4 <.LBB0_52+0x82>
    8001eacc:	b7e1                	j	8001ea94 <.LBB0_52+0x72>
    8001eace:	6526                	ld	a0,72(sp)
    8001ead0:	2501                	sext.w	a0,a0
    8001ead2:	4585                	li	a1,1
    8001ead4:	fcb504e3          	beq	a0,a1,8001ea9c <.LBB0_52+0x7a>
    8001ead8:	bf75                	j	8001ea94 <.LBB0_52+0x72>
    8001eada:	6546                	ld	a0,80(sp)
    8001eadc:	2501                	sext.w	a0,a0
    8001eade:	4589                	li	a1,2
    8001eae0:	f8b50ae3          	beq	a0,a1,8001ea74 <.LBB0_52+0x52>
    8001eae4:	b761                	j	8001ea6c <.LBB0_52+0x4a>
    8001eae6:	6566                	ld	a0,88(sp)
    8001eae8:	2501                	sext.w	a0,a0
    8001eaea:	554d45b7          	lui	a1,0x554d4
    8001eaee:	5515859b          	addiw	a1,a1,1361
    8001eaf2:	f4b50de3          	beq	a0,a1,8001ea4c <.LBB0_52+0x2a>
    8001eaf6:	b7b9                	j	8001ea44 <.LBB0_52+0x22>

000000008001eaf8 <.LBB0_53>:
            panic!("could not find virtio disk");
    8001eaf8:	0000d517          	auipc	a0,0xd
    8001eafc:	e8850513          	addi	a0,a0,-376 # 8002b980 <.L__unnamed_5>

000000008001eb00 <.LBB0_54>:
    8001eb00:	0000d617          	auipc	a2,0xd
    8001eb04:	ea060613          	addi	a2,a2,-352 # 8002b9a0 <.L__unnamed_6>
    8001eb08:	45e9                	li	a1,26
    8001eb0a:	00003097          	auipc	ra,0x3
    8001eb0e:	5f2080e7          	jalr	1522(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8001eb12:	0000                	unimp
    8001eb14:	4585                	li	a1,1
        status |= VIRTIO_CONFIG_S_ACKNOWLEDGE;
    8001eb16:	18b12c23          	sw	a1,408(sp)
    8001eb1a:	07000513          	li	a0,112
        write(VIRTIO_MMIO_STATUS, status);
    8001eb1e:	00001097          	auipc	ra,0x1
    8001eb22:	898080e7          	jalr	-1896(ra) # 8001f3b6 <_ZN6kernel6driver11virtio_disk5write17hf82e2458568dd21bE>
    8001eb26:	a009                	j	8001eb28 <.LBB0_54+0x28>
        status |= VIRTIO_CONFIG_S_DRIVER;
    8001eb28:	19812503          	lw	a0,408(sp)
    8001eb2c:	00256593          	ori	a1,a0,2
    8001eb30:	18b12c23          	sw	a1,408(sp)
    8001eb34:	07000513          	li	a0,112
        write(VIRTIO_MMIO_STATUS, status);
    8001eb38:	00001097          	auipc	ra,0x1
    8001eb3c:	87e080e7          	jalr	-1922(ra) # 8001f3b6 <_ZN6kernel6driver11virtio_disk5write17hf82e2458568dd21bE>
    8001eb40:	a009                	j	8001eb42 <.LBB0_54+0x42>
    8001eb42:	4541                	li	a0,16
        let mut features: u32 = read(VIRTIO_MMIO_DEVICE_FEATURES);
    8001eb44:	00001097          	auipc	ra,0x1
    8001eb48:	818080e7          	jalr	-2024(ra) # 8001f35c <_ZN6kernel6driver11virtio_disk4read17h68d9cc1e57aa6089E>
    8001eb4c:	18a12e23          	sw	a0,412(sp)
    8001eb50:	a009                	j	8001eb52 <.LBB0_54+0x52>
        features &= !(1u32 << VIRTIO_BLK_F_RO);
    8001eb52:	19c12503          	lw	a0,412(sp)
    8001eb56:	c7ffe5b7          	lui	a1,0xc7ffe
    8001eb5a:	75f5859b          	addiw	a1,a1,1887
        features &= !(1u32 << VIRTIO_RING_F_INDIRECT_DESC);
    8001eb5e:	8de9                	and	a1,a1,a0
    8001eb60:	18b12e23          	sw	a1,412(sp)
    8001eb64:	02000513          	li	a0,32
        write(VIRTIO_MMIO_DRIVER_FEATURES, features);
    8001eb68:	00001097          	auipc	ra,0x1
    8001eb6c:	84e080e7          	jalr	-1970(ra) # 8001f3b6 <_ZN6kernel6driver11virtio_disk5write17hf82e2458568dd21bE>
    8001eb70:	a009                	j	8001eb72 <.LBB0_54+0x72>
        status |= VIRTIO_CONFIG_S_FEATURES_OK;
    8001eb72:	19812503          	lw	a0,408(sp)
    8001eb76:	00856593          	ori	a1,a0,8
    8001eb7a:	18b12c23          	sw	a1,408(sp)
    8001eb7e:	07000513          	li	a0,112
        write(VIRTIO_MMIO_STATUS, status);
    8001eb82:	00001097          	auipc	ra,0x1
    8001eb86:	834080e7          	jalr	-1996(ra) # 8001f3b6 <_ZN6kernel6driver11virtio_disk5write17hf82e2458568dd21bE>
    8001eb8a:	a009                	j	8001eb8c <.LBB0_54+0x8c>
        status |= VIRTIO_CONFIG_S_DRIVER_OK;
    8001eb8c:	19812503          	lw	a0,408(sp)
    8001eb90:	00456593          	ori	a1,a0,4
    8001eb94:	18b12c23          	sw	a1,408(sp)
    8001eb98:	07000513          	li	a0,112
        write(VIRTIO_MMIO_STATUS, status);
    8001eb9c:	00001097          	auipc	ra,0x1
    8001eba0:	81a080e7          	jalr	-2022(ra) # 8001f3b6 <_ZN6kernel6driver11virtio_disk5write17hf82e2458568dd21bE>
    8001eba4:	a009                	j	8001eba6 <.LBB0_54+0xa6>
    8001eba6:	02800513          	li	a0,40
    8001ebaa:	6585                	lui	a1,0x1
        write(VIRTIO_MMIO_GUEST_PAGE_SIZE, PGSIZE as u32);
    8001ebac:	00001097          	auipc	ra,0x1
    8001ebb0:	80a080e7          	jalr	-2038(ra) # 8001f3b6 <_ZN6kernel6driver11virtio_disk5write17hf82e2458568dd21bE>
    8001ebb4:	a009                	j	8001ebb6 <.LBB0_54+0xb6>
    8001ebb6:	03000513          	li	a0,48
    8001ebba:	4581                	li	a1,0
        write(VIRTIO_MMIO_QUEUE_SEL, 0);
    8001ebbc:	00000097          	auipc	ra,0x0
    8001ebc0:	7fa080e7          	jalr	2042(ra) # 8001f3b6 <_ZN6kernel6driver11virtio_disk5write17hf82e2458568dd21bE>
    8001ebc4:	a009                	j	8001ebc6 <.LBB0_54+0xc6>
    8001ebc6:	03400513          	li	a0,52
        let max = read(VIRTIO_MMIO_QUEUE_NUM_MAX);
    8001ebca:	00000097          	auipc	ra,0x0
    8001ebce:	792080e7          	jalr	1938(ra) # 8001f35c <_ZN6kernel6driver11virtio_disk4read17h68d9cc1e57aa6089E>
    8001ebd2:	85aa                	mv	a1,a0
    8001ebd4:	e0ae                	sd	a1,64(sp)
    8001ebd6:	22a12223          	sw	a0,548(sp)
    8001ebda:	a009                	j	8001ebdc <.LBB0_54+0xdc>
        if max == 0 {
    8001ebdc:	6506                	ld	a0,64(sp)
    8001ebde:	2501                	sext.w	a0,a0
    8001ebe0:	4581                	li	a1,0
    8001ebe2:	02b51163          	bne	a0,a1,8001ec04 <.LBB0_56+0x14>
    8001ebe6:	a009                	j	8001ebe8 <.LBB0_55>

000000008001ebe8 <.LBB0_55>:
            panic!("virtio disk has no queue 0");
    8001ebe8:	0000d517          	auipc	a0,0xd
    8001ebec:	e3850513          	addi	a0,a0,-456 # 8002ba20 <.L__unnamed_7>

000000008001ebf0 <.LBB0_56>:
    8001ebf0:	0000d617          	auipc	a2,0xd
    8001ebf4:	e5060613          	addi	a2,a2,-432 # 8002ba40 <.L__unnamed_8>
    8001ebf8:	45e9                	li	a1,26
    8001ebfa:	00003097          	auipc	ra,0x3
    8001ebfe:	502080e7          	jalr	1282(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8001ec02:	0000                	unimp
        if max < NUM as u32 {
    8001ec04:	6506                	ld	a0,64(sp)
    8001ec06:	0005059b          	sext.w	a1,a0
    8001ec0a:	451d                	li	a0,7
    8001ec0c:	02b56563          	bltu	a0,a1,8001ec36 <.LBB0_58+0x16>
    8001ec10:	a009                	j	8001ec12 <.LBB0_57>

000000008001ec12 <.LBB0_57>:
            panic!("virtio disk max queue short than NUM={}", NUM);
    8001ec12:	00008517          	auipc	a0,0x8
    8001ec16:	ba650513          	addi	a0,a0,-1114 # 800267b8 <.L__unnamed_6+0x80>
    8001ec1a:	f3aa                	sd	a0,480(sp)
    8001ec1c:	22a13423          	sd	a0,552(sp)

000000008001ec20 <.LBB0_58>:
    8001ec20:	00006597          	auipc	a1,0x6
    8001ec24:	c3858593          	addi	a1,a1,-968 # 80024858 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h9c6c4af1578f7c29E>
    8001ec28:	00001097          	auipc	ra,0x1
    8001ec2c:	8fe080e7          	jalr	-1794(ra) # 8001f526 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    8001ec30:	f82a                	sd	a0,48(sp)
    8001ec32:	fc2e                	sd	a1,56(sp)
    8001ec34:	a809                	j	8001ec46 <.LBB0_58+0x26>
    8001ec36:	03800513          	li	a0,56
    8001ec3a:	45a1                	li	a1,8
        write(VIRTIO_MMIO_QUEUE_NUM, NUM as u32);
    8001ec3c:	00000097          	auipc	ra,0x0
    8001ec40:	77a080e7          	jalr	1914(ra) # 8001f3b6 <_ZN6kernel6driver11virtio_disk5write17hf82e2458568dd21bE>
    8001ec44:	a825                	j	8001ec7c <.LBB0_60+0x14>
            panic!("virtio disk max queue short than NUM={}", NUM);
    8001ec46:	7562                	ld	a0,56(sp)
    8001ec48:	75c2                	ld	a1,48(sp)
    8001ec4a:	ebae                	sd	a1,464(sp)
    8001ec4c:	efaa                	sd	a0,472(sp)

000000008001ec4e <.LBB0_59>:
    8001ec4e:	0000d597          	auipc	a1,0xd
    8001ec52:	d9258593          	addi	a1,a1,-622 # 8002b9e0 <.L__unnamed_10>
    8001ec56:	1308                	addi	a0,sp,416
    8001ec58:	0b94                	addi	a3,sp,464
    8001ec5a:	4705                	li	a4,1
    8001ec5c:	863a                	mv	a2,a4
    8001ec5e:	fffe6097          	auipc	ra,0xfffe6
    8001ec62:	7d6080e7          	jalr	2006(ra) # 80005434 <_ZN4core3fmt9Arguments6new_v117h5e97dda43951bb1cE>
    8001ec66:	a009                	j	8001ec68 <.LBB0_60>

000000008001ec68 <.LBB0_60>:
    8001ec68:	0000d597          	auipc	a1,0xd
    8001ec6c:	d8858593          	addi	a1,a1,-632 # 8002b9f0 <.L__unnamed_11>
    8001ec70:	1308                	addi	a0,sp,416
    8001ec72:	00003097          	auipc	ra,0x3
    8001ec76:	4f6080e7          	jalr	1270(ra) # 80022168 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
    8001ec7a:	0000                	unimp
        let pfn: usize = (self as *const Disk as usize) >> PGSHIFT;
    8001ec7c:	652a                	ld	a0,136(sp)
    8001ec7e:	8131                	srli	a0,a0,0xc
    8001ec80:	f42a                	sd	a0,40(sp)
    8001ec82:	a009                	j	8001ec84 <.LBB0_60+0x1c>
    8001ec84:	7522                	ld	a0,40(sp)
    8001ec86:	22a13823          	sd	a0,560(sp)
        write(VIRTIO_MMIO_QUEUE_PFN, u32::try_from(pfn).unwrap());
    8001ec8a:	fffff097          	auipc	ra,0xfffff
    8001ec8e:	5de080e7          	jalr	1502(ra) # 8001e268 <_ZN4core7convert3num18ptr_try_from_impls69_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u32$GT$8try_from17hf11680289e05cb5fE>
    8001ec92:	ec2a                	sd	a0,24(sp)
    8001ec94:	f02e                	sd	a1,32(sp)
    8001ec96:	a009                	j	8001ec98 <.LBB0_60+0x30>
    8001ec98:	7582                	ld	a1,32(sp)
    8001ec9a:	6562                	ld	a0,24(sp)

000000008001ec9c <.LBB0_61>:
    8001ec9c:	0000d617          	auipc	a2,0xd
    8001eca0:	d6c60613          	addi	a2,a2,-660 # 8002ba08 <.L__unnamed_12>
    8001eca4:	fffee097          	auipc	ra,0xfffee
    8001eca8:	092080e7          	jalr	146(ra) # 8000cd36 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h07a2a3bbe53a0b92E>
    8001ecac:	e82a                	sd	a0,16(sp)
    8001ecae:	a009                	j	8001ecb0 <.LBB0_61+0x14>
    8001ecb0:	65c2                	ld	a1,16(sp)
    8001ecb2:	04000513          	li	a0,64
    8001ecb6:	00000097          	auipc	ra,0x0
    8001ecba:	700080e7          	jalr	1792(ra) # 8001f3b6 <_ZN6kernel6driver11virtio_disk5write17hf82e2458568dd21bE>
    8001ecbe:	a009                	j	8001ecc0 <.LBB0_61+0x24>
    8001ecc0:	652a                	ld	a0,136(sp)
    8001ecc2:	6589                	lui	a1,0x2
        self.free.iter_mut().for_each(|f| *f = true);
    8001ecc4:	952e                	add	a0,a0,a1
    8001ecc6:	45a1                	li	a1,8
    8001ecc8:	00000097          	auipc	ra,0x0
    8001eccc:	7f8080e7          	jalr	2040(ra) # 8001f4c0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h847ff5bce17a319bE>
    8001ecd0:	e02a                	sd	a0,0(sp)
    8001ecd2:	e42e                	sd	a1,8(sp)
    8001ecd4:	a009                	j	8001ecd6 <.LBB0_61+0x3a>
    8001ecd6:	65a2                	ld	a1,8(sp)
    8001ecd8:	6502                	ld	a0,0(sp)
    8001ecda:	fffec097          	auipc	ra,0xfffec
    8001ecde:	750080e7          	jalr	1872(ra) # 8000b42a <_ZN94_$LT$core..slice..iter..IterMut$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$8for_each17hd302585b5e4cac20E>
    8001ece2:	a009                	j	8001ece4 <.LBB0_61+0x48>
    }
    8001ece4:	23813083          	ld	ra,568(sp)
    8001ece8:	24010113          	addi	sp,sp,576
    8001ecec:	8082                	ret

Disassembly of section .text._ZN6kernel6driver11virtio_disk4Disk11alloc3_desc17h72dc3c5e71ae6e49E:

000000008001ecee <_ZN6kernel6driver11virtio_disk4Disk11alloc3_desc17h72dc3c5e71ae6e49E>:
    fn alloc3_desc(&mut self, idx: &mut [usize; 3]) -> bool {
    8001ecee:	716d                	addi	sp,sp,-272
    8001ecf0:	e606                	sd	ra,264(sp)
    8001ecf2:	f82e                	sd	a1,48(sp)
    8001ecf4:	85aa                	mv	a1,a0
    8001ecf6:	7542                	ld	a0,48(sp)
    8001ecf8:	fc2e                	sd	a1,56(sp)
    8001ecfa:	e1ae                	sd	a1,192(sp)
    8001ecfc:	e5aa                	sd	a0,200(sp)
    8001ecfe:	458d                	li	a1,3
        for i in 0..idx.len() {
    8001ed00:	00000097          	auipc	ra,0x0
    8001ed04:	76e080e7          	jalr	1902(ra) # 8001f46e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hc17413639ca00bf8E>
    8001ed08:	e0aa                	sd	a0,64(sp)
    8001ed0a:	a009                	j	8001ed0c <_ZN6kernel6driver11virtio_disk4Disk11alloc3_desc17h72dc3c5e71ae6e49E+0x1e>
    8001ed0c:	6586                	ld	a1,64(sp)
    8001ed0e:	4501                	li	a0,0
    8001ed10:	e8aa                	sd	a0,80(sp)
    8001ed12:	ecae                	sd	a1,88(sp)
    8001ed14:	00001097          	auipc	ra,0x1
    8001ed18:	ab4080e7          	jalr	-1356(ra) # 8001f7c8 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he0a8d93712e5493bE>
    8001ed1c:	f02a                	sd	a0,32(sp)
    8001ed1e:	f42e                	sd	a1,40(sp)
    8001ed20:	a009                	j	8001ed22 <_ZN6kernel6driver11virtio_disk4Disk11alloc3_desc17h72dc3c5e71ae6e49E+0x34>
    8001ed22:	7522                	ld	a0,40(sp)
    8001ed24:	7582                	ld	a1,32(sp)
    8001ed26:	f0ae                	sd	a1,96(sp)
    8001ed28:	f4aa                	sd	a0,104(sp)
    8001ed2a:	a009                	j	8001ed2c <_ZN6kernel6driver11virtio_disk4Disk11alloc3_desc17h72dc3c5e71ae6e49E+0x3e>
    8001ed2c:	1088                	addi	a0,sp,96
    8001ed2e:	00001097          	auipc	ra,0x1
    8001ed32:	a2c080e7          	jalr	-1492(ra) # 8001f75a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE>
    8001ed36:	f8aa                	sd	a0,112(sp)
    8001ed38:	fcae                	sd	a1,120(sp)
    8001ed3a:	a009                	j	8001ed3c <_ZN6kernel6driver11virtio_disk4Disk11alloc3_desc17h72dc3c5e71ae6e49E+0x4e>
    8001ed3c:	7546                	ld	a0,112(sp)
    8001ed3e:	4581                	li	a1,0
    8001ed40:	00b50463          	beq	a0,a1,8001ed48 <_ZN6kernel6driver11virtio_disk4Disk11alloc3_desc17h72dc3c5e71ae6e49E+0x5a>
    8001ed44:	a009                	j	8001ed46 <_ZN6kernel6driver11virtio_disk4Disk11alloc3_desc17h72dc3c5e71ae6e49E+0x58>
    8001ed46:	a031                	j	8001ed52 <_ZN6kernel6driver11virtio_disk4Disk11alloc3_desc17h72dc3c5e71ae6e49E+0x64>
    8001ed48:	4505                	li	a0,1
        true
    8001ed4a:	04a107a3          	sb	a0,79(sp)
    }
    8001ed4e:	a05d                	j	8001edf4 <_ZN6kernel6driver11virtio_disk4Disk11alloc3_desc17h72dc3c5e71ae6e49E+0x106>
        for i in 0..idx.len() {
    8001ed50:	0000                	unimp
    8001ed52:	7562                	ld	a0,56(sp)
    8001ed54:	75e6                	ld	a1,120(sp)
    8001ed56:	ec2e                	sd	a1,24(sp)
    8001ed58:	e9ae                	sd	a1,208(sp)
    8001ed5a:	edae                	sd	a1,216(sp)
    8001ed5c:	f1ae                	sd	a1,224(sp)
            match self.alloc_desc() {
    8001ed5e:	00000097          	auipc	ra,0x0
    8001ed62:	0b6080e7          	jalr	182(ra) # 8001ee14 <_ZN6kernel6driver11virtio_disk4Disk10alloc_desc17h3772a128eda7246cE>
    8001ed66:	e12a                	sd	a0,128(sp)
    8001ed68:	e52e                	sd	a1,136(sp)
    8001ed6a:	a009                	j	8001ed6c <_ZN6kernel6driver11virtio_disk4Disk11alloc3_desc17h72dc3c5e71ae6e49E+0x7e>
                Some(ix) => idx[i] = ix,
    8001ed6c:	650a                	ld	a0,128(sp)
    8001ed6e:	4581                	li	a1,0
    8001ed70:	00b50463          	beq	a0,a1,8001ed78 <_ZN6kernel6driver11virtio_disk4Disk11alloc3_desc17h72dc3c5e71ae6e49E+0x8a>
    8001ed74:	a009                	j	8001ed76 <_ZN6kernel6driver11virtio_disk4Disk11alloc3_desc17h72dc3c5e71ae6e49E+0x88>
    8001ed76:	a829                	j	8001ed90 <_ZN6kernel6driver11virtio_disk4Disk11alloc3_desc17h72dc3c5e71ae6e49E+0xa2>
    8001ed78:	65e2                	ld	a1,24(sp)
    8001ed7a:	4501                	li	a0,0
                    for j in 0..i {
    8001ed7c:	e92a                	sd	a0,144(sp)
    8001ed7e:	ed2e                	sd	a1,152(sp)
    8001ed80:	00001097          	auipc	ra,0x1
    8001ed84:	a48080e7          	jalr	-1464(ra) # 8001f7c8 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he0a8d93712e5493bE>
    8001ed88:	e42a                	sd	a0,8(sp)
    8001ed8a:	e82e                	sd	a1,16(sp)
    8001ed8c:	a00d                	j	8001edae <_ZN6kernel6driver11virtio_disk4Disk11alloc3_desc17h72dc3c5e71ae6e49E+0xc0>
            match self.alloc_desc() {
    8001ed8e:	0000                	unimp
                Some(ix) => idx[i] = ix,
    8001ed90:	65e2                	ld	a1,24(sp)
    8001ed92:	652a                	ld	a0,136(sp)
    8001ed94:	e02a                	sd	a0,0(sp)
    8001ed96:	f5aa                	sd	a0,232(sp)
    8001ed98:	4509                	li	a0,2
    8001ed9a:	06b56263          	bltu	a0,a1,8001edfe <_ZN6kernel6driver11virtio_disk4Disk11alloc3_desc17h72dc3c5e71ae6e49E+0x110>
    8001ed9e:	a009                	j	8001eda0 <_ZN6kernel6driver11virtio_disk4Disk11alloc3_desc17h72dc3c5e71ae6e49E+0xb2>
    8001eda0:	6502                	ld	a0,0(sp)
    8001eda2:	75c2                	ld	a1,48(sp)
    8001eda4:	6662                	ld	a2,24(sp)
    8001eda6:	060e                	slli	a2,a2,0x3
    8001eda8:	95b2                	add	a1,a1,a2
    8001edaa:	e188                	sd	a0,0(a1)
        for i in 0..idx.len() {
    8001edac:	b741                	j	8001ed2c <_ZN6kernel6driver11virtio_disk4Disk11alloc3_desc17h72dc3c5e71ae6e49E+0x3e>
                    for j in 0..i {
    8001edae:	6542                	ld	a0,16(sp)
    8001edb0:	65a2                	ld	a1,8(sp)
    8001edb2:	f12e                	sd	a1,160(sp)
    8001edb4:	f52a                	sd	a0,168(sp)
    8001edb6:	a009                	j	8001edb8 <_ZN6kernel6driver11virtio_disk4Disk11alloc3_desc17h72dc3c5e71ae6e49E+0xca>
    8001edb8:	1108                	addi	a0,sp,160
    8001edba:	00001097          	auipc	ra,0x1
    8001edbe:	9a0080e7          	jalr	-1632(ra) # 8001f75a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE>
    8001edc2:	f92a                	sd	a0,176(sp)
    8001edc4:	fd2e                	sd	a1,184(sp)
    8001edc6:	a009                	j	8001edc8 <_ZN6kernel6driver11virtio_disk4Disk11alloc3_desc17h72dc3c5e71ae6e49E+0xda>
    8001edc8:	754a                	ld	a0,176(sp)
    8001edca:	4581                	li	a1,0
    8001edcc:	00b50463          	beq	a0,a1,8001edd4 <_ZN6kernel6driver11virtio_disk4Disk11alloc3_desc17h72dc3c5e71ae6e49E+0xe6>
    8001edd0:	a009                	j	8001edd2 <_ZN6kernel6driver11virtio_disk4Disk11alloc3_desc17h72dc3c5e71ae6e49E+0xe4>
    8001edd2:	a031                	j	8001edde <_ZN6kernel6driver11virtio_disk4Disk11alloc3_desc17h72dc3c5e71ae6e49E+0xf0>
    8001edd4:	4501                	li	a0,0
                    return false;
    8001edd6:	04a107a3          	sb	a0,79(sp)
    }
    8001edda:	a829                	j	8001edf4 <_ZN6kernel6driver11virtio_disk4Disk11alloc3_desc17h72dc3c5e71ae6e49E+0x106>
                    for j in 0..i {
    8001eddc:	0000                	unimp
    8001edde:	7562                	ld	a0,56(sp)
    8001ede0:	75ea                	ld	a1,184(sp)
    8001ede2:	f9ae                	sd	a1,240(sp)
    8001ede4:	fdae                	sd	a1,248(sp)
    8001ede6:	e22e                	sd	a1,256(sp)
                        self.free_desc(j);
    8001ede8:	00000097          	auipc	ra,0x0
    8001edec:	14e080e7          	jalr	334(ra) # 8001ef36 <_ZN6kernel6driver11virtio_disk4Disk9free_desc17h82d1b4d3b146e1f5E>
    8001edf0:	a009                	j	8001edf2 <_ZN6kernel6driver11virtio_disk4Disk11alloc3_desc17h72dc3c5e71ae6e49E+0x104>
                    for j in 0..i {
    8001edf2:	b7d9                	j	8001edb8 <_ZN6kernel6driver11virtio_disk4Disk11alloc3_desc17h72dc3c5e71ae6e49E+0xca>
    }
    8001edf4:	04f14503          	lbu	a0,79(sp)
    8001edf8:	60b2                	ld	ra,264(sp)
    8001edfa:	6151                	addi	sp,sp,272
    8001edfc:	8082                	ret
                Some(ix) => idx[i] = ix,
    8001edfe:	6562                	ld	a0,24(sp)

000000008001ee00 <.LBB1_25>:
    8001ee00:	0000d617          	auipc	a2,0xd
    8001ee04:	c5860613          	addi	a2,a2,-936 # 8002ba58 <.L__unnamed_13>
    8001ee08:	458d                	li	a1,3
    8001ee0a:	00003097          	auipc	ra,0x3
    8001ee0e:	31e080e7          	jalr	798(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel6driver11virtio_disk4Disk10alloc_desc17h3772a128eda7246cE:

000000008001ee14 <_ZN6kernel6driver11virtio_disk4Disk10alloc_desc17h3772a128eda7246cE>:
    fn alloc_desc(&mut self) -> Option<usize> {
    8001ee14:	7111                	addi	sp,sp,-256
    8001ee16:	fd86                	sd	ra,248(sp)
    8001ee18:	f82a                	sd	a0,48(sp)
    8001ee1a:	e5aa                	sd	a0,200(sp)
    8001ee1c:	6589                	lui	a1,0x2
        debug_assert_eq!(self.free.len(), NUM);
    8001ee1e:	952e                	add	a0,a0,a1
    8001ee20:	45a1                	li	a1,8
    8001ee22:	00000097          	auipc	ra,0x0
    8001ee26:	610080e7          	jalr	1552(ra) # 8001f432 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h040db97216f8ec10E>
    8001ee2a:	ecaa                	sd	a0,88(sp)
    8001ee2c:	a009                	j	8001ee2e <_ZN6kernel6driver11virtio_disk4Disk10alloc_desc17h3772a128eda7246cE+0x1a>
    8001ee2e:	08ac                	addi	a1,sp,88
    8001ee30:	f02e                	sd	a1,32(sp)
    8001ee32:	e4ae                	sd	a1,72(sp)

000000008001ee34 <.LBB2_18>:
    8001ee34:	00008517          	auipc	a0,0x8
    8001ee38:	98450513          	addi	a0,a0,-1660 # 800267b8 <.L__unnamed_6+0x80>
    8001ee3c:	f42a                	sd	a0,40(sp)
    8001ee3e:	e8aa                	sd	a0,80(sp)
    8001ee40:	e9ae                	sd	a1,208(sp)
    8001ee42:	edaa                	sd	a0,216(sp)
    8001ee44:	6566                	ld	a0,88(sp)
    8001ee46:	45a1                	li	a1,8
    8001ee48:	02b50363          	beq	a0,a1,8001ee6e <.LBB2_19+0x14>
    8001ee4c:	a009                	j	8001ee4e <.LBB2_18+0x1a>
    8001ee4e:	7622                	ld	a2,40(sp)
    8001ee50:	7582                	ld	a1,32(sp)
    8001ee52:	4501                	li	a0,0
    8001ee54:	06a103a3          	sb	a0,103(sp)
    8001ee58:	f4aa                	sd	a0,104(sp)

000000008001ee5a <.LBB2_19>:
    8001ee5a:	0000d717          	auipc	a4,0xd
    8001ee5e:	c1670713          	addi	a4,a4,-1002 # 8002ba70 <.L__unnamed_14>
    8001ee62:	10b4                	addi	a3,sp,104
    8001ee64:	00001097          	auipc	ra,0x1
    8001ee68:	9c6080e7          	jalr	-1594(ra) # 8001f82a <_ZN4core9panicking13assert_failed17h4e6d74c9d534b647E>
    8001ee6c:	0000                	unimp
    8001ee6e:	4501                	li	a0,0
        for i in 0..NUM {
    8001ee70:	ed2a                	sd	a0,152(sp)
    8001ee72:	45a1                	li	a1,8
    8001ee74:	f12e                	sd	a1,160(sp)
    8001ee76:	00001097          	auipc	ra,0x1
    8001ee7a:	952080e7          	jalr	-1710(ra) # 8001f7c8 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he0a8d93712e5493bE>
    8001ee7e:	e82a                	sd	a0,16(sp)
    8001ee80:	ec2e                	sd	a1,24(sp)
    8001ee82:	a009                	j	8001ee84 <.LBB2_19+0x2a>
    8001ee84:	6562                	ld	a0,24(sp)
    8001ee86:	65c2                	ld	a1,16(sp)
    8001ee88:	f52e                	sd	a1,168(sp)
    8001ee8a:	f92a                	sd	a0,176(sp)
    8001ee8c:	a009                	j	8001ee8e <.LBB2_19+0x34>
    8001ee8e:	1128                	addi	a0,sp,168
    8001ee90:	00001097          	auipc	ra,0x1
    8001ee94:	8ca080e7          	jalr	-1846(ra) # 8001f75a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE>
    8001ee98:	fd2a                	sd	a0,184(sp)
    8001ee9a:	e1ae                	sd	a1,192(sp)
    8001ee9c:	a009                	j	8001ee9e <.LBB2_19+0x44>
    8001ee9e:	756a                	ld	a0,184(sp)
    8001eea0:	4581                	li	a1,0
    8001eea2:	00b50463          	beq	a0,a1,8001eeaa <.LBB2_19+0x50>
    8001eea6:	a009                	j	8001eea8 <.LBB2_19+0x4e>
    8001eea8:	a029                	j	8001eeb2 <.LBB2_19+0x58>
    8001eeaa:	4501                	li	a0,0
        None
    8001eeac:	fc2a                	sd	a0,56(sp)
    }
    8001eeae:	a889                	j	8001ef00 <.LBB2_19+0xa6>
        for i in 0..NUM {
    8001eeb0:	0000                	unimp
    8001eeb2:	658e                	ld	a1,192(sp)
    8001eeb4:	e42e                	sd	a1,8(sp)
    8001eeb6:	f1ae                	sd	a1,224(sp)
    8001eeb8:	f5ae                	sd	a1,232(sp)
    8001eeba:	f9ae                	sd	a1,240(sp)
    8001eebc:	451d                	li	a0,7
            if self.free[i] {
    8001eebe:	04b56663          	bltu	a0,a1,8001ef0a <.LBB2_19+0xb0>
    8001eec2:	a009                	j	8001eec4 <.LBB2_19+0x6a>
    8001eec4:	7542                	ld	a0,48(sp)
    8001eec6:	65a2                	ld	a1,8(sp)
    8001eec8:	952e                	add	a0,a0,a1
    8001eeca:	6589                	lui	a1,0x2
    8001eecc:	952e                	add	a0,a0,a1
    8001eece:	00054503          	lbu	a0,0(a0)
    8001eed2:	8905                	andi	a0,a0,1
    8001eed4:	4581                	li	a1,0
    8001eed6:	00b50863          	beq	a0,a1,8001eee6 <.LBB2_19+0x8c>
    8001eeda:	a009                	j	8001eedc <.LBB2_19+0x82>
    8001eedc:	6522                	ld	a0,8(sp)
    8001eede:	45a1                	li	a1,8
                self.free[i] = false;
    8001eee0:	00b56463          	bltu	a0,a1,8001eee8 <.LBB2_19+0x8e>
    8001eee4:	a835                	j	8001ef20 <.LBB2_20+0x14>
        for i in 0..NUM {
    8001eee6:	b765                	j	8001ee8e <.LBB2_19+0x34>
                self.free[i] = false;
    8001eee8:	6522                	ld	a0,8(sp)
    8001eeea:	75c2                	ld	a1,48(sp)
    8001eeec:	95aa                	add	a1,a1,a0
    8001eeee:	6609                	lui	a2,0x2
    8001eef0:	962e                	add	a2,a2,a1
    8001eef2:	4581                	li	a1,0
    8001eef4:	00b60023          	sb	a1,0(a2) # 2000 <.Lline_table_start0+0x46f>
                return Some(i)
    8001eef8:	e0aa                	sd	a0,64(sp)
    8001eefa:	4505                	li	a0,1
    8001eefc:	fc2a                	sd	a0,56(sp)
    }
    8001eefe:	a009                	j	8001ef00 <.LBB2_19+0xa6>
    8001ef00:	7562                	ld	a0,56(sp)
    8001ef02:	6586                	ld	a1,64(sp)
    8001ef04:	70ee                	ld	ra,248(sp)
    8001ef06:	6111                	addi	sp,sp,256
    8001ef08:	8082                	ret
            if self.free[i] {
    8001ef0a:	6522                	ld	a0,8(sp)

000000008001ef0c <.LBB2_20>:
    8001ef0c:	0000d617          	auipc	a2,0xd
    8001ef10:	b7c60613          	addi	a2,a2,-1156 # 8002ba88 <.L__unnamed_15>
    8001ef14:	45a1                	li	a1,8
    8001ef16:	00003097          	auipc	ra,0x3
    8001ef1a:	212080e7          	jalr	530(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    8001ef1e:	0000                	unimp
                self.free[i] = false;
    8001ef20:	6522                	ld	a0,8(sp)

000000008001ef22 <.LBB2_21>:
    8001ef22:	0000d617          	auipc	a2,0xd
    8001ef26:	b7e60613          	addi	a2,a2,-1154 # 8002baa0 <.L__unnamed_16>
    8001ef2a:	45a1                	li	a1,8
    8001ef2c:	00003097          	auipc	ra,0x3
    8001ef30:	1fc080e7          	jalr	508(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel6driver11virtio_disk4Disk9free_desc17h82d1b4d3b146e1f5E:

000000008001ef36 <_ZN6kernel6driver11virtio_disk4Disk9free_desc17h82d1b4d3b146e1f5E>:
    fn free_desc(&mut self, i: usize) {
    8001ef36:	7179                	addi	sp,sp,-48
    8001ef38:	f406                	sd	ra,40(sp)
    8001ef3a:	e02e                	sd	a1,0(sp)
    8001ef3c:	e42a                	sd	a0,8(sp)
    8001ef3e:	ec2a                	sd	a0,24(sp)
    8001ef40:	f02e                	sd	a1,32(sp)
    8001ef42:	4521                	li	a0,8
        if i >= NUM || self.free[i] {
    8001ef44:	00a5eb63          	bltu	a1,a0,8001ef5a <_ZN6kernel6driver11virtio_disk4Disk9free_desc17h82d1b4d3b146e1f5E+0x24>
    8001ef48:	a009                	j	8001ef4a <_ZN6kernel6driver11virtio_disk4Disk9free_desc17h82d1b4d3b146e1f5E+0x14>
    8001ef4a:	4505                	li	a0,1
    8001ef4c:	00a10ba3          	sb	a0,23(sp)
    8001ef50:	a811                	j	8001ef64 <_ZN6kernel6driver11virtio_disk4Disk9free_desc17h82d1b4d3b146e1f5E+0x2e>
    8001ef52:	4501                	li	a0,0
    8001ef54:	00a10ba3          	sb	a0,23(sp)
    8001ef58:	a031                	j	8001ef64 <_ZN6kernel6driver11virtio_disk4Disk9free_desc17h82d1b4d3b146e1f5E+0x2e>
    8001ef5a:	6502                	ld	a0,0(sp)
    8001ef5c:	45a1                	li	a1,8
    8001ef5e:	00b56863          	bltu	a0,a1,8001ef6e <_ZN6kernel6driver11virtio_disk4Disk9free_desc17h82d1b4d3b146e1f5E+0x38>
    8001ef62:	a0f1                	j	8001f02e <.LBB3_22+0x18>
    8001ef64:	01714503          	lbu	a0,23(sp)
    8001ef68:	8905                	andi	a0,a0,1
    8001ef6a:	ed01                	bnez	a0,8001ef82 <.LBB3_20>
    8001ef6c:	a80d                	j	8001ef9e <.LBB3_21+0x14>
    8001ef6e:	6522                	ld	a0,8(sp)
    8001ef70:	6582                	ld	a1,0(sp)
    8001ef72:	952e                	add	a0,a0,a1
    8001ef74:	6589                	lui	a1,0x2
    8001ef76:	952e                	add	a0,a0,a1
    8001ef78:	00054503          	lbu	a0,0(a0)
    8001ef7c:	8905                	andi	a0,a0,1
    8001ef7e:	f571                	bnez	a0,8001ef4a <_ZN6kernel6driver11virtio_disk4Disk9free_desc17h82d1b4d3b146e1f5E+0x14>
    8001ef80:	bfc9                	j	8001ef52 <_ZN6kernel6driver11virtio_disk4Disk9free_desc17h82d1b4d3b146e1f5E+0x1c>

000000008001ef82 <.LBB3_20>:
            panic!("desc index not correct");
    8001ef82:	0000d517          	auipc	a0,0xd
    8001ef86:	b4e50513          	addi	a0,a0,-1202 # 8002bad0 <.L__unnamed_17>

000000008001ef8a <.LBB3_21>:
    8001ef8a:	0000d617          	auipc	a2,0xd
    8001ef8e:	b5e60613          	addi	a2,a2,-1186 # 8002bae8 <.L__unnamed_18>
    8001ef92:	45d9                	li	a1,22
    8001ef94:	00003097          	auipc	ra,0x3
    8001ef98:	168080e7          	jalr	360(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8001ef9c:	0000                	unimp
    8001ef9e:	6582                	ld	a1,0(sp)
    8001efa0:	451d                	li	a0,7
        self.desc[i].addr = 0;
    8001efa2:	0ab56163          	bltu	a0,a1,8001f044 <.LBB3_23+0x14>
    8001efa6:	a009                	j	8001efa8 <.LBB3_21+0x1e>
    8001efa8:	6582                	ld	a1,0(sp)
    8001efaa:	6522                	ld	a0,8(sp)
    8001efac:	00459613          	slli	a2,a1,0x4
    8001efb0:	962a                	add	a2,a2,a0
    8001efb2:	4501                	li	a0,0
    8001efb4:	e208                	sd	a0,0(a2)
    8001efb6:	451d                	li	a0,7
        self.desc[i].len = 0;
    8001efb8:	0ab56163          	bltu	a0,a1,8001f05a <.LBB3_24+0x14>
    8001efbc:	a009                	j	8001efbe <.LBB3_21+0x34>
    8001efbe:	6582                	ld	a1,0(sp)
    8001efc0:	6522                	ld	a0,8(sp)
    8001efc2:	00459613          	slli	a2,a1,0x4
    8001efc6:	962a                	add	a2,a2,a0
    8001efc8:	4501                	li	a0,0
    8001efca:	c608                	sw	a0,8(a2)
    8001efcc:	451d                	li	a0,7
        self.desc[i].flags = 0;
    8001efce:	0ab56163          	bltu	a0,a1,8001f070 <.LBB3_25+0x14>
    8001efd2:	a009                	j	8001efd4 <.LBB3_21+0x4a>
    8001efd4:	6582                	ld	a1,0(sp)
    8001efd6:	6522                	ld	a0,8(sp)
    8001efd8:	00459613          	slli	a2,a1,0x4
    8001efdc:	962a                	add	a2,a2,a0
    8001efde:	4501                	li	a0,0
    8001efe0:	00a61623          	sh	a0,12(a2)
    8001efe4:	451d                	li	a0,7
        self.desc[i].next = 0;
    8001efe6:	0ab56063          	bltu	a0,a1,8001f086 <.LBB3_26+0x14>
    8001efea:	a009                	j	8001efec <.LBB3_21+0x62>
    8001efec:	6582                	ld	a1,0(sp)
    8001efee:	6522                	ld	a0,8(sp)
    8001eff0:	00459613          	slli	a2,a1,0x4
    8001eff4:	962a                	add	a2,a2,a0
    8001eff6:	4501                	li	a0,0
    8001eff8:	00a61723          	sh	a0,14(a2)
    8001effc:	451d                	li	a0,7
        self.free[i] = true;
    8001effe:	08b56f63          	bltu	a0,a1,8001f09c <.LBB3_27+0x14>
    8001f002:	a009                	j	8001f004 <.LBB3_21+0x7a>
    8001f004:	6502                	ld	a0,0(sp)
    8001f006:	65a2                	ld	a1,8(sp)
    8001f008:	6609                	lui	a2,0x2
    8001f00a:	95b2                	add	a1,a1,a2
    8001f00c:	00a58633          	add	a2,a1,a0
    8001f010:	4505                	li	a0,1
    8001f012:	00a60023          	sb	a0,0(a2) # 2000 <.Lline_table_start0+0x46f>

000000008001f016 <.LBB3_22>:
            PROC_MANAGER.wake_up(&self.free[0] as *const bool as usize);
    8001f016:	00038517          	auipc	a0,0x38
    8001f01a:	58a50513          	addi	a0,a0,1418 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    8001f01e:	fffef097          	auipc	ra,0xfffef
    8001f022:	830080e7          	jalr	-2000(ra) # 8000d84e <_ZN6kernel7process7manager11ProcManager7wake_up17ha46b4d15ac07187bE>
    8001f026:	a009                	j	8001f028 <.LBB3_22+0x12>
    }
    8001f028:	70a2                	ld	ra,40(sp)
    8001f02a:	6145                	addi	sp,sp,48
    8001f02c:	8082                	ret
        if i >= NUM || self.free[i] {
    8001f02e:	6502                	ld	a0,0(sp)

000000008001f030 <.LBB3_23>:
    8001f030:	0000d617          	auipc	a2,0xd
    8001f034:	a8860613          	addi	a2,a2,-1400 # 8002bab8 <.L__unnamed_19>
    8001f038:	45a1                	li	a1,8
    8001f03a:	00003097          	auipc	ra,0x3
    8001f03e:	0ee080e7          	jalr	238(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    8001f042:	0000                	unimp
        self.desc[i].addr = 0;
    8001f044:	6502                	ld	a0,0(sp)

000000008001f046 <.LBB3_24>:
    8001f046:	0000d617          	auipc	a2,0xd
    8001f04a:	aba60613          	addi	a2,a2,-1350 # 8002bb00 <.L__unnamed_20>
    8001f04e:	45a1                	li	a1,8
    8001f050:	00003097          	auipc	ra,0x3
    8001f054:	0d8080e7          	jalr	216(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    8001f058:	0000                	unimp
        self.desc[i].len = 0;
    8001f05a:	6502                	ld	a0,0(sp)

000000008001f05c <.LBB3_25>:
    8001f05c:	0000d617          	auipc	a2,0xd
    8001f060:	abc60613          	addi	a2,a2,-1348 # 8002bb18 <.L__unnamed_21>
    8001f064:	45a1                	li	a1,8
    8001f066:	00003097          	auipc	ra,0x3
    8001f06a:	0c2080e7          	jalr	194(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    8001f06e:	0000                	unimp
        self.desc[i].flags = 0;
    8001f070:	6502                	ld	a0,0(sp)

000000008001f072 <.LBB3_26>:
    8001f072:	0000d617          	auipc	a2,0xd
    8001f076:	abe60613          	addi	a2,a2,-1346 # 8002bb30 <.L__unnamed_22>
    8001f07a:	45a1                	li	a1,8
    8001f07c:	00003097          	auipc	ra,0x3
    8001f080:	0ac080e7          	jalr	172(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    8001f084:	0000                	unimp
        self.desc[i].next = 0;
    8001f086:	6502                	ld	a0,0(sp)

000000008001f088 <.LBB3_27>:
    8001f088:	0000d617          	auipc	a2,0xd
    8001f08c:	ac060613          	addi	a2,a2,-1344 # 8002bb48 <.L__unnamed_23>
    8001f090:	45a1                	li	a1,8
    8001f092:	00003097          	auipc	ra,0x3
    8001f096:	096080e7          	jalr	150(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    8001f09a:	0000                	unimp
        self.free[i] = true;
    8001f09c:	6502                	ld	a0,0(sp)

000000008001f09e <.LBB3_28>:
    8001f09e:	0000d617          	auipc	a2,0xd
    8001f0a2:	ac260613          	addi	a2,a2,-1342 # 8002bb60 <.L__unnamed_24>
    8001f0a6:	45a1                	li	a1,8
    8001f0a8:	00003097          	auipc	ra,0x3
    8001f0ac:	080080e7          	jalr	128(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel6driver11virtio_disk4Disk10free_chain17h88621e1c7ba36f26E:

000000008001f0b2 <_ZN6kernel6driver11virtio_disk4Disk10free_chain17h88621e1c7ba36f26E>:
    fn free_chain(&mut self, mut i: usize) {
    8001f0b2:	715d                	addi	sp,sp,-80
    8001f0b4:	e486                	sd	ra,72(sp)
    8001f0b6:	f42a                	sd	a0,40(sp)
    8001f0b8:	f82e                	sd	a1,48(sp)
    8001f0ba:	fc2a                	sd	a0,56(sp)
    8001f0bc:	a009                	j	8001f0be <_ZN6kernel6driver11virtio_disk4Disk10free_chain17h88621e1c7ba36f26E+0xc>
            let flag = self.desc[i].flags;
    8001f0be:	75c2                	ld	a1,48(sp)
    8001f0c0:	f02e                	sd	a1,32(sp)
    8001f0c2:	451d                	li	a0,7
    8001f0c4:	04b56d63          	bltu	a0,a1,8001f11e <_ZN6kernel6driver11virtio_disk4Disk10free_chain17h88621e1c7ba36f26E+0x6c>
    8001f0c8:	a009                	j	8001f0ca <_ZN6kernel6driver11virtio_disk4Disk10free_chain17h88621e1c7ba36f26E+0x18>
    8001f0ca:	7522                	ld	a0,40(sp)
    8001f0cc:	7582                	ld	a1,32(sp)
    8001f0ce:	0592                	slli	a1,a1,0x4
    8001f0d0:	952e                	add	a0,a0,a1
    8001f0d2:	00c55503          	lhu	a0,12(a0)
    8001f0d6:	e82a                	sd	a0,16(sp)
    8001f0d8:	04a11223          	sh	a0,68(sp)
            let next = self.desc[i].next;
    8001f0dc:	75c2                	ld	a1,48(sp)
    8001f0de:	ec2e                	sd	a1,24(sp)
    8001f0e0:	451d                	li	a0,7
    8001f0e2:	04b56963          	bltu	a0,a1,8001f134 <.LBB4_9+0x14>
    8001f0e6:	a009                	j	8001f0e8 <_ZN6kernel6driver11virtio_disk4Disk10free_chain17h88621e1c7ba36f26E+0x36>
    8001f0e8:	7522                	ld	a0,40(sp)
    8001f0ea:	65e2                	ld	a1,24(sp)
    8001f0ec:	0592                	slli	a1,a1,0x4
    8001f0ee:	95aa                	add	a1,a1,a0
    8001f0f0:	00e5d583          	lhu	a1,14(a1) # 200e <.Lline_table_start0+0x47d>
    8001f0f4:	e42e                	sd	a1,8(sp)
    8001f0f6:	04b11323          	sh	a1,70(sp)
            self.free_desc(i);
    8001f0fa:	75c2                	ld	a1,48(sp)
    8001f0fc:	00000097          	auipc	ra,0x0
    8001f100:	e3a080e7          	jalr	-454(ra) # 8001ef36 <_ZN6kernel6driver11virtio_disk4Disk9free_desc17h82d1b4d3b146e1f5E>
    8001f104:	a009                	j	8001f106 <_ZN6kernel6driver11virtio_disk4Disk10free_chain17h88621e1c7ba36f26E+0x54>
            if (flag & VRING_DESC_F_NEXT) != 0 {
    8001f106:	6542                	ld	a0,16(sp)
    8001f108:	8905                	andi	a0,a0,1
    8001f10a:	4581                	li	a1,0
    8001f10c:	00b50663          	beq	a0,a1,8001f118 <_ZN6kernel6driver11virtio_disk4Disk10free_chain17h88621e1c7ba36f26E+0x66>
    8001f110:	a009                	j	8001f112 <_ZN6kernel6driver11virtio_disk4Disk10free_chain17h88621e1c7ba36f26E+0x60>
                i = next as usize;
    8001f112:	6522                	ld	a0,8(sp)
    8001f114:	f82a                	sd	a0,48(sp)
        loop {
    8001f116:	b765                	j	8001f0be <_ZN6kernel6driver11virtio_disk4Disk10free_chain17h88621e1c7ba36f26E+0xc>
    }
    8001f118:	60a6                	ld	ra,72(sp)
    8001f11a:	6161                	addi	sp,sp,80
    8001f11c:	8082                	ret
            let flag = self.desc[i].flags;
    8001f11e:	7502                	ld	a0,32(sp)

000000008001f120 <.LBB4_9>:
    8001f120:	0000d617          	auipc	a2,0xd
    8001f124:	a5860613          	addi	a2,a2,-1448 # 8002bb78 <.L__unnamed_25>
    8001f128:	45a1                	li	a1,8
    8001f12a:	00003097          	auipc	ra,0x3
    8001f12e:	ffe080e7          	jalr	-2(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    8001f132:	0000                	unimp
            let next = self.desc[i].next;
    8001f134:	6562                	ld	a0,24(sp)

000000008001f136 <.LBB4_10>:
    8001f136:	0000d617          	auipc	a2,0xd
    8001f13a:	a5a60613          	addi	a2,a2,-1446 # 8002bb90 <.L__unnamed_26>
    8001f13e:	45a1                	li	a1,8
    8001f140:	00003097          	auipc	ra,0x3
    8001f144:	fe8080e7          	jalr	-24(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN6kernel6driver11virtio_disk4Disk4intr17h780fdb71fd330281E:

000000008001f14a <_ZN6kernel6driver11virtio_disk4Disk4intr17h780fdb71fd330281E>:
    pub fn intr(&mut self) {
    8001f14a:	7159                	addi	sp,sp,-112
    8001f14c:	f486                	sd	ra,104(sp)
    8001f14e:	f82a                	sd	a0,48(sp)
    8001f150:	e4aa                	sd	a0,72(sp)
    8001f152:	06000513          	li	a0,96
            let intr_stat = read(VIRTIO_MMIO_INTERRUPT_STATUS);
    8001f156:	00000097          	auipc	ra,0x0
    8001f15a:	206080e7          	jalr	518(ra) # 8001f35c <_ZN6kernel6driver11virtio_disk4read17h68d9cc1e57aa6089E>
    8001f15e:	85aa                	mv	a1,a0
    8001f160:	fc2e                	sd	a1,56(sp)
    8001f162:	caaa                	sw	a0,84(sp)
    8001f164:	a009                	j	8001f166 <_ZN6kernel6driver11virtio_disk4Disk4intr17h780fdb71fd330281E+0x1c>
            write(VIRTIO_MMIO_INTERRUPT_ACK, intr_stat & 0x3);
    8001f166:	7562                	ld	a0,56(sp)
    8001f168:	00357593          	andi	a1,a0,3
    8001f16c:	06400513          	li	a0,100
    8001f170:	00000097          	auipc	ra,0x0
    8001f174:	246080e7          	jalr	582(ra) # 8001f3b6 <_ZN6kernel6driver11virtio_disk5write17hf82e2458568dd21bE>
    8001f178:	a009                	j	8001f17a <_ZN6kernel6driver11virtio_disk4Disk4intr17h780fdb71fd330281E+0x30>
    8001f17a:	4511                	li	a0,4
        fence(Ordering::SeqCst);
    8001f17c:	04a10323          	sb	a0,70(sp)
    8001f180:	fffe5097          	auipc	ra,0xfffe5
    8001f184:	630080e7          	jalr	1584(ra) # 800047b0 <_ZN4core4sync6atomic5fence17hd2f91624c9f09ce8E>
    8001f188:	a009                	j	8001f18a <_ZN6kernel6driver11virtio_disk4Disk4intr17h780fdb71fd330281E+0x40>
    8001f18a:	75c2                	ld	a1,48(sp)
    8001f18c:	6509                	lui	a0,0x2
    8001f18e:	2521                	addiw	a0,a0,8
        while self.used_idx != self.used.idx {
    8001f190:	952e                	add	a0,a0,a1
    8001f192:	00055503          	lhu	a0,0(a0) # 2000 <.Lline_table_start0+0x46f>
    8001f196:	6605                	lui	a2,0x1
    8001f198:	2609                	addiw	a2,a2,2
    8001f19a:	95b2                	add	a1,a1,a2
    8001f19c:	0005d583          	lhu	a1,0(a1)
    8001f1a0:	00b51663          	bne	a0,a1,8001f1ac <_ZN6kernel6driver11virtio_disk4Disk4intr17h780fdb71fd330281E+0x62>
    8001f1a4:	a009                	j	8001f1a6 <_ZN6kernel6driver11virtio_disk4Disk4intr17h780fdb71fd330281E+0x5c>
    }
    8001f1a6:	70a6                	ld	ra,104(sp)
    8001f1a8:	6165                	addi	sp,sp,112
    8001f1aa:	8082                	ret
    8001f1ac:	4511                	li	a0,4
            fence(Ordering::SeqCst);
    8001f1ae:	04a103a3          	sb	a0,71(sp)
    8001f1b2:	fffe5097          	auipc	ra,0xfffe5
    8001f1b6:	5fe080e7          	jalr	1534(ra) # 800047b0 <_ZN4core4sync6atomic5fence17hd2f91624c9f09ce8E>
    8001f1ba:	a009                	j	8001f1bc <_ZN6kernel6driver11virtio_disk4Disk4intr17h780fdb71fd330281E+0x72>
    8001f1bc:	7542                	ld	a0,48(sp)
    8001f1be:	6589                	lui	a1,0x2
    8001f1c0:	25a1                	addiw	a1,a1,8
            let id = self.used.ring[self.used_idx as usize % NUM].id as usize;
    8001f1c2:	952e                	add	a0,a0,a1
    8001f1c4:	00055503          	lhu	a0,0(a0)
    8001f1c8:	00757593          	andi	a1,a0,7
    8001f1cc:	f42e                	sd	a1,40(sp)
    8001f1ce:	451d                	li	a0,7
    8001f1d0:	10b56c63          	bltu	a0,a1,8001f2e8 <.LBB5_26+0x40>
    8001f1d4:	a009                	j	8001f1d6 <_ZN6kernel6driver11virtio_disk4Disk4intr17h780fdb71fd330281E+0x8c>
    8001f1d6:	7542                	ld	a0,48(sp)
    8001f1d8:	75a2                	ld	a1,40(sp)
    8001f1da:	058e                	slli	a1,a1,0x3
    8001f1dc:	952e                	add	a0,a0,a1
    8001f1de:	6585                	lui	a1,0x1
    8001f1e0:	2591                	addiw	a1,a1,4
    8001f1e2:	952e                	add	a0,a0,a1
    8001f1e4:	00056583          	lwu	a1,0(a0)
    8001f1e8:	f02e                	sd	a1,32(sp)
    8001f1ea:	ecae                	sd	a1,88(sp)
    8001f1ec:	451d                	li	a0,7
            if self.info[id].status != 0 {
    8001f1ee:	10b56863          	bltu	a0,a1,8001f2fe <.LBB5_27+0x14>
    8001f1f2:	a009                	j	8001f1f4 <_ZN6kernel6driver11virtio_disk4Disk4intr17h780fdb71fd330281E+0xaa>
    8001f1f4:	7542                	ld	a0,48(sp)
    8001f1f6:	7582                	ld	a1,32(sp)
    8001f1f8:	4661                	li	a2,24
    8001f1fa:	02c585b3          	mul	a1,a1,a2
    8001f1fe:	952e                	add	a0,a0,a1
    8001f200:	6589                	lui	a1,0x2
    8001f202:	0205859b          	addiw	a1,a1,32
    8001f206:	952e                	add	a0,a0,a1
    8001f208:	00054503          	lbu	a0,0(a0)
    8001f20c:	4581                	li	a1,0
    8001f20e:	02b50163          	beq	a0,a1,8001f230 <.LBB5_23+0x14>
    8001f212:	a009                	j	8001f214 <.LBB5_22>

000000008001f214 <.LBB5_22>:
                panic!("interrupt status");
    8001f214:	00006517          	auipc	a0,0x6
    8001f218:	41c50513          	addi	a0,a0,1052 # 80025630 <.L__unnamed_35+0x68>

000000008001f21c <.LBB5_23>:
    8001f21c:	0000d617          	auipc	a2,0xd
    8001f220:	9bc60613          	addi	a2,a2,-1604 # 8002bbd8 <.L__unnamed_28>
    8001f224:	45c1                	li	a1,16
    8001f226:	00003097          	auipc	ra,0x3
    8001f22a:	ed6080e7          	jalr	-298(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    8001f22e:	0000                	unimp
    8001f230:	7582                	ld	a1,32(sp)
    8001f232:	451d                	li	a0,7
            let buf_raw_data = self.info[id].buf_channel.clone()
    8001f234:	0eb56063          	bltu	a0,a1,8001f314 <.LBB5_28+0x14>
    8001f238:	a009                	j	8001f23a <.LBB5_23+0x1e>
    8001f23a:	7542                	ld	a0,48(sp)
    8001f23c:	7582                	ld	a1,32(sp)
    8001f23e:	4661                	li	a2,24
    8001f240:	02c585b3          	mul	a1,a1,a2
    8001f244:	952e                	add	a0,a0,a1
    8001f246:	6589                	lui	a1,0x2
    8001f248:	25c1                	addiw	a1,a1,16
    8001f24a:	952e                	add	a0,a0,a1
    8001f24c:	ffff0097          	auipc	ra,0xffff0
    8001f250:	ed0080e7          	jalr	-304(ra) # 8000f11c <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17he939c90bc3d2b0caE>
    8001f254:	e82a                	sd	a0,16(sp)
    8001f256:	ec2e                	sd	a1,24(sp)
    8001f258:	a009                	j	8001f25a <.LBB5_23+0x3e>
    8001f25a:	65e2                	ld	a1,24(sp)
    8001f25c:	6542                	ld	a0,16(sp)

000000008001f25e <.LBB5_24>:
    8001f25e:	0000d617          	auipc	a2,0xd
    8001f262:	9aa60613          	addi	a2,a2,-1622 # 8002bc08 <.L__unnamed_29>

000000008001f266 <.LBB5_25>:
    8001f266:	0000d717          	auipc	a4,0xd
    8001f26a:	9ea70713          	addi	a4,a4,-1558 # 8002bc50 <.L__unnamed_30>
    8001f26e:	04300693          	li	a3,67
    8001f272:	fffef097          	auipc	ra,0xfffef
    8001f276:	7c0080e7          	jalr	1984(ra) # 8000ea32 <_ZN4core6option15Option$LT$T$GT$6expect17h263816fde9da1c25E>
    8001f27a:	85aa                	mv	a1,a0
    8001f27c:	e42e                	sd	a1,8(sp)
    8001f27e:	f0aa                	sd	a0,96(sp)
    8001f280:	a009                	j	8001f282 <.LBB5_25+0x1c>
    8001f282:	7582                	ld	a1,32(sp)
    8001f284:	451d                	li	a0,7
            self.info[id].disk = false;
    8001f286:	0ab56263          	bltu	a0,a1,8001f32a <.LBB5_29+0x14>
    8001f28a:	a009                	j	8001f28c <.LBB5_25+0x26>
    8001f28c:	65a2                	ld	a1,8(sp)
    8001f28e:	7542                	ld	a0,48(sp)
    8001f290:	7602                	ld	a2,32(sp)
    8001f292:	46e1                	li	a3,24
    8001f294:	02d60633          	mul	a2,a2,a3
    8001f298:	9532                	add	a0,a0,a2
    8001f29a:	6609                	lui	a2,0x2
    8001f29c:	0216061b          	addiw	a2,a2,33
    8001f2a0:	962a                	add	a2,a2,a0
    8001f2a2:	4501                	li	a0,0
    8001f2a4:	00a60023          	sb	a0,0(a2) # 2000 <.Lline_table_start0+0x46f>

000000008001f2a8 <.LBB5_26>:
            unsafe { PROC_MANAGER.wake_up(buf_raw_data); }
    8001f2a8:	00038517          	auipc	a0,0x38
    8001f2ac:	2f850513          	addi	a0,a0,760 # 800575a0 <_ZN6kernel7process7manager12PROC_MANAGER17hc2dc11bacd50c0bcE>
    8001f2b0:	fffee097          	auipc	ra,0xfffee
    8001f2b4:	59e080e7          	jalr	1438(ra) # 8000d84e <_ZN6kernel7process7manager11ProcManager7wake_up17ha46b4d15ac07187bE>
    8001f2b8:	a009                	j	8001f2ba <.LBB5_26+0x12>
    8001f2ba:	7542                	ld	a0,48(sp)
    8001f2bc:	6589                	lui	a1,0x2
    8001f2be:	25a1                	addiw	a1,a1,8
            self.used_idx += 1;
    8001f2c0:	952e                	add	a0,a0,a1
    8001f2c2:	00055503          	lhu	a0,0(a0)
    8001f2c6:	00150593          	addi	a1,a0,1
    8001f2ca:	e02e                	sd	a1,0(sp)
    8001f2cc:	6541                	lui	a0,0x10
    8001f2ce:	357d                	addiw	a0,a0,-1
    8001f2d0:	8d6d                	and	a0,a0,a1
    8001f2d2:	06b51763          	bne	a0,a1,8001f340 <.LBB5_31>
    8001f2d6:	a009                	j	8001f2d8 <.LBB5_26+0x30>
    8001f2d8:	6502                	ld	a0,0(sp)
    8001f2da:	75c2                	ld	a1,48(sp)
    8001f2dc:	6609                	lui	a2,0x2
    8001f2de:	2621                	addiw	a2,a2,8
    8001f2e0:	95b2                	add	a1,a1,a2
    8001f2e2:	00a59023          	sh	a0,0(a1) # 2000 <.Lline_table_start0+0x46f>
        while self.used_idx != self.used.idx {
    8001f2e6:	b555                	j	8001f18a <_ZN6kernel6driver11virtio_disk4Disk4intr17h780fdb71fd330281E+0x40>
            let id = self.used.ring[self.used_idx as usize % NUM].id as usize;
    8001f2e8:	7522                	ld	a0,40(sp)

000000008001f2ea <.LBB5_27>:
    8001f2ea:	0000d617          	auipc	a2,0xd
    8001f2ee:	8be60613          	addi	a2,a2,-1858 # 8002bba8 <.L__unnamed_31>
    8001f2f2:	45a1                	li	a1,8
    8001f2f4:	00003097          	auipc	ra,0x3
    8001f2f8:	e34080e7          	jalr	-460(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    8001f2fc:	0000                	unimp
            if self.info[id].status != 0 {
    8001f2fe:	7502                	ld	a0,32(sp)

000000008001f300 <.LBB5_28>:
    8001f300:	0000d617          	auipc	a2,0xd
    8001f304:	8c060613          	addi	a2,a2,-1856 # 8002bbc0 <.L__unnamed_32>
    8001f308:	45a1                	li	a1,8
    8001f30a:	00003097          	auipc	ra,0x3
    8001f30e:	e1e080e7          	jalr	-482(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    8001f312:	0000                	unimp
            let buf_raw_data = self.info[id].buf_channel.clone()
    8001f314:	7502                	ld	a0,32(sp)

000000008001f316 <.LBB5_29>:
    8001f316:	0000d617          	auipc	a2,0xd
    8001f31a:	8da60613          	addi	a2,a2,-1830 # 8002bbf0 <.L__unnamed_33>
    8001f31e:	45a1                	li	a1,8
    8001f320:	00003097          	auipc	ra,0x3
    8001f324:	e08080e7          	jalr	-504(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
    8001f328:	0000                	unimp
            self.info[id].disk = false;
    8001f32a:	7502                	ld	a0,32(sp)

000000008001f32c <.LBB5_30>:
    8001f32c:	0000d617          	auipc	a2,0xd
    8001f330:	93c60613          	addi	a2,a2,-1732 # 8002bc68 <.L__unnamed_34>
    8001f334:	45a1                	li	a1,8
    8001f336:	00003097          	auipc	ra,0x3
    8001f33a:	df2080e7          	jalr	-526(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

000000008001f340 <.LBB5_31>:
            self.used_idx += 1;
    8001f340:	0000d517          	auipc	a0,0xd
    8001f344:	96050513          	addi	a0,a0,-1696 # 8002bca0 <str.0>

000000008001f348 <.LBB5_32>:
    8001f348:	0000d617          	auipc	a2,0xd
    8001f34c:	93860613          	addi	a2,a2,-1736 # 8002bc80 <.L__unnamed_35>
    8001f350:	45f1                	li	a1,28
    8001f352:	00003097          	auipc	ra,0x3
    8001f356:	daa080e7          	jalr	-598(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel6driver11virtio_disk4read17h68d9cc1e57aa6089E:

000000008001f35c <_ZN6kernel6driver11virtio_disk4read17h68d9cc1e57aa6089E>:
// this many virtio descriptors
// must be a power of 2
const NUM: usize = 8;

#[inline]
unsafe fn read(offset: usize) -> u32 {
    8001f35c:	7139                	addi	sp,sp,-64
    8001f35e:	fc06                	sd	ra,56(sp)
    8001f360:	ec2a                	sd	a0,24(sp)
    8001f362:	f42a                	sd	a0,40(sp)
    8001f364:	10001537          	lui	a0,0x10001
    let src = (Into::<usize>::into(VIRTIO0) + offset) as *const u32;
    8001f368:	fffec097          	auipc	ra,0xfffec
    8001f36c:	66e080e7          	jalr	1646(ra) # 8000b9d6 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hbecc82c6a2b59487E>
    8001f370:	f02a                	sd	a0,32(sp)
    8001f372:	a009                	j	8001f374 <_ZN6kernel6driver11virtio_disk4read17h68d9cc1e57aa6089E+0x18>
    8001f374:	7582                	ld	a1,32(sp)
    8001f376:	6562                	ld	a0,24(sp)
    8001f378:	952e                	add	a0,a0,a1
    8001f37a:	e82a                	sd	a0,16(sp)
    8001f37c:	00b56f63          	bltu	a0,a1,8001f39a <.LBB6_5>
    8001f380:	a009                	j	8001f382 <_ZN6kernel6driver11virtio_disk4read17h68d9cc1e57aa6089E+0x26>
    8001f382:	6542                	ld	a0,16(sp)
    8001f384:	f82a                	sd	a0,48(sp)
    ptr::read_volatile(src)
    8001f386:	ffff9097          	auipc	ra,0xffff9
    8001f38a:	022080e7          	jalr	34(ra) # 800183a8 <_ZN4core3ptr13read_volatile17h0ae297fe3f24e4caE>
    8001f38e:	e42a                	sd	a0,8(sp)
    8001f390:	a009                	j	8001f392 <_ZN6kernel6driver11virtio_disk4read17h68d9cc1e57aa6089E+0x36>
}
    8001f392:	6522                	ld	a0,8(sp)
    8001f394:	70e2                	ld	ra,56(sp)
    8001f396:	6121                	addi	sp,sp,64
    8001f398:	8082                	ret

000000008001f39a <.LBB6_5>:
    let src = (Into::<usize>::into(VIRTIO0) + offset) as *const u32;
    8001f39a:	0000d517          	auipc	a0,0xd
    8001f39e:	90650513          	addi	a0,a0,-1786 # 8002bca0 <str.0>

000000008001f3a2 <.LBB6_6>:
    8001f3a2:	0000d617          	auipc	a2,0xd
    8001f3a6:	91e60613          	addi	a2,a2,-1762 # 8002bcc0 <.L__unnamed_36>
    8001f3aa:	45f1                	li	a1,28
    8001f3ac:	00003097          	auipc	ra,0x3
    8001f3b0:	d50080e7          	jalr	-688(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN6kernel6driver11virtio_disk5write17hf82e2458568dd21bE:

000000008001f3b6 <_ZN6kernel6driver11virtio_disk5write17hf82e2458568dd21bE>:

#[inline]
unsafe fn write(offset: usize, data: u32) {
    8001f3b6:	7139                	addi	sp,sp,-64
    8001f3b8:	fc06                	sd	ra,56(sp)
    8001f3ba:	e42a                	sd	a0,8(sp)
    8001f3bc:	862e                	mv	a2,a1
    8001f3be:	e832                	sd	a2,16(sp)
    8001f3c0:	f02a                	sd	a0,32(sp)
    8001f3c2:	d62e                	sw	a1,44(sp)
    8001f3c4:	10001537          	lui	a0,0x10001
    let dst = (Into::<usize>::into(VIRTIO0) + offset) as *mut u32;
    8001f3c8:	fffec097          	auipc	ra,0xfffec
    8001f3cc:	60e080e7          	jalr	1550(ra) # 8000b9d6 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hbecc82c6a2b59487E>
    8001f3d0:	ec2a                	sd	a0,24(sp)
    8001f3d2:	a009                	j	8001f3d4 <_ZN6kernel6driver11virtio_disk5write17hf82e2458568dd21bE+0x1e>
    8001f3d4:	65e2                	ld	a1,24(sp)
    8001f3d6:	6522                	ld	a0,8(sp)
    8001f3d8:	952e                	add	a0,a0,a1
    8001f3da:	e02a                	sd	a0,0(sp)
    8001f3dc:	00b56e63          	bltu	a0,a1,8001f3f8 <.LBB7_5>
    8001f3e0:	a009                	j	8001f3e2 <_ZN6kernel6driver11virtio_disk5write17hf82e2458568dd21bE+0x2c>
    8001f3e2:	65c2                	ld	a1,16(sp)
    8001f3e4:	6502                	ld	a0,0(sp)
    8001f3e6:	f82a                	sd	a0,48(sp)
    ptr::write_volatile(dst, data);
    8001f3e8:	ffff9097          	auipc	ra,0xffff9
    8001f3ec:	ffc080e7          	jalr	-4(ra) # 800183e4 <_ZN4core3ptr14write_volatile17h1c498a4c32cde7d4E>
    8001f3f0:	a009                	j	8001f3f2 <_ZN6kernel6driver11virtio_disk5write17hf82e2458568dd21bE+0x3c>
}
    8001f3f2:	70e2                	ld	ra,56(sp)
    8001f3f4:	6121                	addi	sp,sp,64
    8001f3f6:	8082                	ret

000000008001f3f8 <.LBB7_5>:
    let dst = (Into::<usize>::into(VIRTIO0) + offset) as *mut u32;
    8001f3f8:	0000d517          	auipc	a0,0xd
    8001f3fc:	8a850513          	addi	a0,a0,-1880 # 8002bca0 <str.0>

000000008001f400 <.LBB7_6>:
    8001f400:	0000d617          	auipc	a2,0xd
    8001f404:	8d860613          	addi	a2,a2,-1832 # 8002bcd8 <.L__unnamed_37>
    8001f408:	45f1                	li	a1,28
    8001f40a:	00003097          	auipc	ra,0x3
    8001f40e:	cf2080e7          	jalr	-782(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h69a6648c691317bcE:

000000008001f414 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h69a6648c691317bcE>:
    pub const fn as_mut_ptr(&mut self) -> *mut T {
    8001f414:	1141                	addi	sp,sp,-16
    8001f416:	e02a                	sd	a0,0(sp)
    8001f418:	e42e                	sd	a1,8(sp)
    }
    8001f41a:	0141                	addi	sp,sp,16
    8001f41c:	8082                	ret

Disassembly of section .text._ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h752c0d8417c49952E:

000000008001f41e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h752c0d8417c49952E>:
    pub const fn as_mut_ptr(&mut self) -> *mut T {
    8001f41e:	1141                	addi	sp,sp,-16
    8001f420:	e02a                	sd	a0,0(sp)
    8001f422:	e42e                	sd	a1,8(sp)
    }
    8001f424:	0141                	addi	sp,sp,16
    8001f426:	8082                	ret

Disassembly of section .text._ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17he2d11453020d912aE:

000000008001f428 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17he2d11453020d912aE>:
    pub const fn as_mut_ptr(&mut self) -> *mut T {
    8001f428:	1141                	addi	sp,sp,-16
    8001f42a:	e02a                	sd	a0,0(sp)
    8001f42c:	e42e                	sd	a1,8(sp)
    }
    8001f42e:	0141                	addi	sp,sp,16
    8001f430:	8082                	ret

Disassembly of section .text._ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h040db97216f8ec10E:

000000008001f432 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h040db97216f8ec10E>:
    pub const fn len(&self) -> usize {
    8001f432:	7179                	addi	sp,sp,-48
    8001f434:	e42e                	sd	a1,8(sp)
    8001f436:	85aa                	mv	a1,a0
    8001f438:	6522                	ld	a0,8(sp)
    8001f43a:	f02e                	sd	a1,32(sp)
    8001f43c:	f42a                	sd	a0,40(sp)
            unsafe { crate::ptr::PtrRepr { const_ptr: self }.components.metadata }
    8001f43e:	e82e                	sd	a1,16(sp)
    8001f440:	ec2a                	sd	a0,24(sp)
    }
    8001f442:	6145                	addi	sp,sp,48
    8001f444:	8082                	ret

Disassembly of section .text._ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17ha6c4bb93a093d49eE:

000000008001f446 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17ha6c4bb93a093d49eE>:
    pub const fn len(&self) -> usize {
    8001f446:	7179                	addi	sp,sp,-48
    8001f448:	e42e                	sd	a1,8(sp)
    8001f44a:	85aa                	mv	a1,a0
    8001f44c:	6522                	ld	a0,8(sp)
    8001f44e:	f02e                	sd	a1,32(sp)
    8001f450:	f42a                	sd	a0,40(sp)
            unsafe { crate::ptr::PtrRepr { const_ptr: self }.components.metadata }
    8001f452:	e82e                	sd	a1,16(sp)
    8001f454:	ec2a                	sd	a0,24(sp)
    }
    8001f456:	6145                	addi	sp,sp,48
    8001f458:	8082                	ret

Disassembly of section .text._ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hb06ce83b043493f3E:

000000008001f45a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hb06ce83b043493f3E>:
    pub const fn len(&self) -> usize {
    8001f45a:	7179                	addi	sp,sp,-48
    8001f45c:	e42e                	sd	a1,8(sp)
    8001f45e:	85aa                	mv	a1,a0
    8001f460:	6522                	ld	a0,8(sp)
    8001f462:	f02e                	sd	a1,32(sp)
    8001f464:	f42a                	sd	a0,40(sp)
            unsafe { crate::ptr::PtrRepr { const_ptr: self }.components.metadata }
    8001f466:	e82e                	sd	a1,16(sp)
    8001f468:	ec2a                	sd	a0,24(sp)
    }
    8001f46a:	6145                	addi	sp,sp,48
    8001f46c:	8082                	ret

Disassembly of section .text._ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hc17413639ca00bf8E:

000000008001f46e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hc17413639ca00bf8E>:
    pub const fn len(&self) -> usize {
    8001f46e:	7179                	addi	sp,sp,-48
    8001f470:	e42e                	sd	a1,8(sp)
    8001f472:	85aa                	mv	a1,a0
    8001f474:	6522                	ld	a0,8(sp)
    8001f476:	f02e                	sd	a1,32(sp)
    8001f478:	f42a                	sd	a0,40(sp)
            unsafe { crate::ptr::PtrRepr { const_ptr: self }.components.metadata }
    8001f47a:	e82e                	sd	a1,16(sp)
    8001f47c:	ec2a                	sd	a0,24(sp)
    }
    8001f47e:	6145                	addi	sp,sp,48
    8001f480:	8082                	ret

Disassembly of section .text._ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h8f308ca2182773f1E:

000000008001f482 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h8f308ca2182773f1E>:
    pub fn iter(&self) -> Iter<'_, T> {
    8001f482:	7179                	addi	sp,sp,-48
    8001f484:	f406                	sd	ra,40(sp)
    8001f486:	ec2a                	sd	a0,24(sp)
    8001f488:	f02e                	sd	a1,32(sp)
        Iter::new(self)
    8001f48a:	fffeb097          	auipc	ra,0xfffeb
    8001f48e:	7de080e7          	jalr	2014(ra) # 8000ac68 <_ZN4core5slice4iter13Iter$LT$T$GT$3new17h7dcd9c98bf37806bE>
    8001f492:	e42a                	sd	a0,8(sp)
    8001f494:	e82e                	sd	a1,16(sp)
    8001f496:	a009                	j	8001f498 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h8f308ca2182773f1E+0x16>
    }
    8001f498:	65c2                	ld	a1,16(sp)
    8001f49a:	6522                	ld	a0,8(sp)
    8001f49c:	70a2                	ld	ra,40(sp)
    8001f49e:	6145                	addi	sp,sp,48
    8001f4a0:	8082                	ret

Disassembly of section .text._ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h1ea05a5f45312d57E:

000000008001f4a2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h1ea05a5f45312d57E>:
    pub const fn as_ptr(&self) -> *const T {
    8001f4a2:	1141                	addi	sp,sp,-16
    8001f4a4:	e02a                	sd	a0,0(sp)
    8001f4a6:	e42e                	sd	a1,8(sp)
    }
    8001f4a8:	0141                	addi	sp,sp,16
    8001f4aa:	8082                	ret

Disassembly of section .text._ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hc3575ad36de0bb27E:

000000008001f4ac <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hc3575ad36de0bb27E>:
    pub const fn as_ptr(&self) -> *const T {
    8001f4ac:	1141                	addi	sp,sp,-16
    8001f4ae:	e02a                	sd	a0,0(sp)
    8001f4b0:	e42e                	sd	a1,8(sp)
    }
    8001f4b2:	0141                	addi	sp,sp,16
    8001f4b4:	8082                	ret

Disassembly of section .text._ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hf7620495824cfb20E:

000000008001f4b6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hf7620495824cfb20E>:
    pub const fn as_ptr(&self) -> *const T {
    8001f4b6:	1141                	addi	sp,sp,-16
    8001f4b8:	e02a                	sd	a0,0(sp)
    8001f4ba:	e42e                	sd	a1,8(sp)
    }
    8001f4bc:	0141                	addi	sp,sp,16
    8001f4be:	8082                	ret

Disassembly of section .text._ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h847ff5bce17a319bE:

000000008001f4c0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h847ff5bce17a319bE>:
    pub fn iter_mut(&mut self) -> IterMut<'_, T> {
    8001f4c0:	7179                	addi	sp,sp,-48
    8001f4c2:	f406                	sd	ra,40(sp)
    8001f4c4:	ec2a                	sd	a0,24(sp)
    8001f4c6:	f02e                	sd	a1,32(sp)
        IterMut::new(self)
    8001f4c8:	fffec097          	auipc	ra,0xfffec
    8001f4cc:	9d0080e7          	jalr	-1584(ra) # 8000ae98 <_ZN4core5slice4iter16IterMut$LT$T$GT$3new17h8130085cf5731c78E>
    8001f4d0:	e42a                	sd	a0,8(sp)
    8001f4d2:	e82e                	sd	a1,16(sp)
    8001f4d4:	a009                	j	8001f4d6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$8iter_mut17h847ff5bce17a319bE+0x16>
    }
    8001f4d6:	65c2                	ld	a1,16(sp)
    8001f4d8:	6522                	ld	a0,8(sp)
    8001f4da:	70a2                	ld	ra,40(sp)
    8001f4dc:	6145                	addi	sp,sp,48
    8001f4de:	8082                	ret

Disassembly of section .text.__rust_alloc:

000000008001f4e0 <__rust_alloc>:
    8001f4e0:	fffed317          	auipc	t1,0xfffed
    8001f4e4:	4a430067          	jr	1188(t1) # 8000c984 <__rg_alloc>

Disassembly of section .text.__rust_dealloc:

000000008001f4e8 <__rust_dealloc>:
    8001f4e8:	fffed317          	auipc	t1,0xfffed
    8001f4ec:	4d230067          	jr	1234(t1) # 8000c9ba <__rg_dealloc>

Disassembly of section .text.__rust_realloc:

000000008001f4f0 <__rust_realloc>:
    8001f4f0:	fffed317          	auipc	t1,0xfffed
    8001f4f4:	50e30067          	jr	1294(t1) # 8000c9fe <__rg_realloc>

Disassembly of section .text.__rust_alloc_zeroed:

000000008001f4f8 <__rust_alloc_zeroed>:
    8001f4f8:	fffed317          	auipc	t1,0xfffed
    8001f4fc:	55430067          	jr	1364(t1) # 8000ca4c <__rg_alloc_zeroed>

Disassembly of section .text.__rust_alloc_error_handler:

000000008001f500 <__rust_alloc_error_handler>:
    8001f500:	00003317          	auipc	t1,0x3
    8001f504:	a0430067          	jr	-1532(t1) # 80021f04 <__rg_oom>

Disassembly of section .text._ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hd6815da901cfddf7E:

000000008001f508 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hd6815da901cfddf7E>:
            fn fmt(&self, f: &mut Formatter<'_>) -> Result { $tr::fmt(&**self, f) }
    8001f508:	1101                	addi	sp,sp,-32
    8001f50a:	ec06                	sd	ra,24(sp)
    8001f50c:	e42a                	sd	a0,8(sp)
    8001f50e:	e82e                	sd	a1,16(sp)
    8001f510:	6108                	ld	a0,0(a0)
    8001f512:	00000097          	auipc	ra,0x0
    8001f516:	37a080e7          	jalr	890(ra) # 8001f88c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h145a0e5da1339a00E>
    8001f51a:	e02a                	sd	a0,0(sp)
    8001f51c:	a009                	j	8001f51e <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hd6815da901cfddf7E+0x16>
    8001f51e:	6502                	ld	a0,0(sp)
    8001f520:	60e2                	ld	ra,24(sp)
    8001f522:	6105                	addi	sp,sp,32
    8001f524:	8082                	ret

Disassembly of section .text._ZN4core3fmt10ArgumentV13new17hafe633af74a29011E:

000000008001f526 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
    8001f526:	715d                	addi	sp,sp,-80
    8001f528:	e82a                	sd	a0,16(sp)
    8001f52a:	f82a                	sd	a0,48(sp)
    8001f52c:	fc2e                	sd	a1,56(sp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
    8001f52e:	e0ae                	sd	a1,64(sp)
    8001f530:	ec2e                	sd	a1,24(sp)
    8001f532:	a009                	j	8001f534 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E+0xe>
    8001f534:	6542                	ld	a0,16(sp)
    8001f536:	e4aa                	sd	a0,72(sp)
    8001f538:	e42a                	sd	a0,8(sp)
    8001f53a:	a009                	j	8001f53c <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E+0x16>
    8001f53c:	65e2                	ld	a1,24(sp)
    8001f53e:	6522                	ld	a0,8(sp)
    8001f540:	f02a                	sd	a0,32(sp)
    8001f542:	f42e                	sd	a1,40(sp)
    }
    8001f544:	6161                	addi	sp,sp,80
    8001f546:	8082                	ret

Disassembly of section .text._ZN4core3fmt10ArgumentV13new17hc2eeb6f5565b6dd2E:

000000008001f548 <_ZN4core3fmt10ArgumentV13new17hc2eeb6f5565b6dd2E>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
    8001f548:	715d                	addi	sp,sp,-80
    8001f54a:	e82a                	sd	a0,16(sp)
    8001f54c:	f82a                	sd	a0,48(sp)
    8001f54e:	fc2e                	sd	a1,56(sp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
    8001f550:	e0ae                	sd	a1,64(sp)
    8001f552:	ec2e                	sd	a1,24(sp)
    8001f554:	a009                	j	8001f556 <_ZN4core3fmt10ArgumentV13new17hc2eeb6f5565b6dd2E+0xe>
    8001f556:	6542                	ld	a0,16(sp)
    8001f558:	e4aa                	sd	a0,72(sp)
    8001f55a:	e42a                	sd	a0,8(sp)
    8001f55c:	a009                	j	8001f55e <_ZN4core3fmt10ArgumentV13new17hc2eeb6f5565b6dd2E+0x16>
    8001f55e:	65e2                	ld	a1,24(sp)
    8001f560:	6522                	ld	a0,8(sp)
    8001f562:	f02a                	sd	a0,32(sp)
    8001f564:	f42e                	sd	a1,40(sp)
    }
    8001f566:	6161                	addi	sp,sp,80
    8001f568:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$13guaranteed_eq17h568dab4191b83956E:

000000008001f56a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$13guaranteed_eq17h568dab4191b83956E>:
    pub const fn guaranteed_eq(self, other: *mut T) -> bool
    8001f56a:	1101                	addi	sp,sp,-32
    8001f56c:	e42a                	sd	a0,8(sp)
    8001f56e:	e82e                	sd	a1,16(sp)
        intrinsics::ptr_guaranteed_eq(self as *const _, other as *const _)
    8001f570:	8d2d                	xor	a0,a0,a1
    8001f572:	00153513          	seqz	a0,a0
    8001f576:	e02a                	sd	a0,0(sp)
    8001f578:	00a10fa3          	sb	a0,31(sp)
    8001f57c:	a009                	j	8001f57e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$13guaranteed_eq17h568dab4191b83956E+0x14>
    }
    8001f57e:	6502                	ld	a0,0(sp)
    8001f580:	6105                	addi	sp,sp,32
    8001f582:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1d203f00cca684c1E:

000000008001f584 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1d203f00cca684c1E>:
    pub const unsafe fn add(self, count: usize) -> Self
    8001f584:	1101                	addi	sp,sp,-32
    8001f586:	ec06                	sd	ra,24(sp)
    8001f588:	e42a                	sd	a0,8(sp)
    8001f58a:	e82e                	sd	a1,16(sp)
        unsafe { self.offset(count as isize) }
    8001f58c:	00000097          	auipc	ra,0x0
    8001f590:	068080e7          	jalr	104(ra) # 8001f5f4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb5f7a0f346747657E>
    8001f594:	e02a                	sd	a0,0(sp)
    8001f596:	a009                	j	8001f598 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1d203f00cca684c1E+0x14>
    }
    8001f598:	6502                	ld	a0,0(sp)
    8001f59a:	60e2                	ld	ra,24(sp)
    8001f59c:	6105                	addi	sp,sp,32
    8001f59e:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$4cast17h7b791e143f90db99E:

000000008001f5a0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$4cast17h7b791e143f90db99E>:
    pub const fn cast<U>(self) -> *mut U {
    8001f5a0:	1141                	addi	sp,sp,-16
    8001f5a2:	e42a                	sd	a0,8(sp)
    }
    8001f5a4:	0141                	addi	sp,sp,16
    8001f5a6:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17h8b37e8181b720bd0E:

000000008001f5a8 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17h8b37e8181b720bd0E>:
    pub const unsafe fn write(self, val: T)
    8001f5a8:	1101                	addi	sp,sp,-32
    8001f5aa:	ec06                	sd	ra,24(sp)
    8001f5ac:	e02a                	sd	a0,0(sp)
    8001f5ae:	e42e                	sd	a1,8(sp)
    8001f5b0:	e832                	sd	a2,16(sp)
        unsafe { write(self, val) }
    8001f5b2:	00002097          	auipc	ra,0x2
    8001f5b6:	116080e7          	jalr	278(ra) # 800216c8 <_ZN4core3ptr5write17h05084118c665240bE>
    8001f5ba:	a009                	j	8001f5bc <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17h8b37e8181b720bd0E+0x14>
    }
    8001f5bc:	60e2                	ld	ra,24(sp)
    8001f5be:	6105                	addi	sp,sp,32
    8001f5c0:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17he7a20e0a0a2f5b66E:

000000008001f5c2 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17he7a20e0a0a2f5b66E>:
    pub unsafe fn as_mut<'a>(self) -> Option<&'a mut T> {
    8001f5c2:	7179                	addi	sp,sp,-48
    8001f5c4:	f406                	sd	ra,40(sp)
    8001f5c6:	e42a                	sd	a0,8(sp)
    8001f5c8:	f02a                	sd	a0,32(sp)
        if self.is_null() { None } else { unsafe { Some(&mut *self) } }
    8001f5ca:	00000097          	auipc	ra,0x0
    8001f5ce:	03e080e7          	jalr	62(ra) # 8001f608 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hba478e65ea6353f9E>
    8001f5d2:	e82a                	sd	a0,16(sp)
    8001f5d4:	a009                	j	8001f5d6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17he7a20e0a0a2f5b66E+0x14>
    8001f5d6:	6542                	ld	a0,16(sp)
    8001f5d8:	4581                	li	a1,0
    8001f5da:	00b50663          	beq	a0,a1,8001f5e6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17he7a20e0a0a2f5b66E+0x24>
    8001f5de:	a009                	j	8001f5e0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17he7a20e0a0a2f5b66E+0x1e>
    8001f5e0:	4501                	li	a0,0
    8001f5e2:	ec2a                	sd	a0,24(sp)
    8001f5e4:	a021                	j	8001f5ec <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17he7a20e0a0a2f5b66E+0x2a>
    8001f5e6:	6522                	ld	a0,8(sp)
    8001f5e8:	ec2a                	sd	a0,24(sp)
    8001f5ea:	a009                	j	8001f5ec <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17he7a20e0a0a2f5b66E+0x2a>
    }
    8001f5ec:	6562                	ld	a0,24(sp)
    8001f5ee:	70a2                	ld	ra,40(sp)
    8001f5f0:	6145                	addi	sp,sp,48
    8001f5f2:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb5f7a0f346747657E:

000000008001f5f4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb5f7a0f346747657E>:
    pub const unsafe fn offset(self, count: isize) -> *mut T
    8001f5f4:	1101                	addi	sp,sp,-32
    8001f5f6:	e42a                	sd	a0,8(sp)
    8001f5f8:	e82e                	sd	a1,16(sp)
        unsafe { intrinsics::offset(self, count) as *mut T }
    8001f5fa:	952e                	add	a0,a0,a1
    8001f5fc:	e02a                	sd	a0,0(sp)
    8001f5fe:	ec2a                	sd	a0,24(sp)
    8001f600:	a009                	j	8001f602 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb5f7a0f346747657E+0xe>
    }
    8001f602:	6502                	ld	a0,0(sp)
    8001f604:	6105                	addi	sp,sp,32
    8001f606:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hba478e65ea6353f9E:

000000008001f608 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hba478e65ea6353f9E>:
    pub const fn is_null(self) -> bool {
    8001f608:	1101                	addi	sp,sp,-32
    8001f60a:	ec06                	sd	ra,24(sp)
    8001f60c:	e42a                	sd	a0,8(sp)
    8001f60e:	e82a                	sd	a0,16(sp)
        (self as *mut u8).guaranteed_eq(null_mut())
    8001f610:	a009                	j	8001f612 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hba478e65ea6353f9E+0xa>
    8001f612:	6522                	ld	a0,8(sp)
    8001f614:	4581                	li	a1,0
    8001f616:	00000097          	auipc	ra,0x0
    8001f61a:	f54080e7          	jalr	-172(ra) # 8001f56a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$13guaranteed_eq17h568dab4191b83956E>
    8001f61e:	e02a                	sd	a0,0(sp)
    8001f620:	a009                	j	8001f622 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hba478e65ea6353f9E+0x1a>
    }
    8001f622:	6502                	ld	a0,0(sp)
    8001f624:	60e2                	ld	ra,24(sp)
    8001f626:	6105                	addi	sp,sp,32
    8001f628:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr41_$LT$impl$u20$$BP$mut$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h80398cc0098c8b0fE:

000000008001f62a <_ZN4core3ptr7mut_ptr41_$LT$impl$u20$$BP$mut$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h80398cc0098c8b0fE>:
    /// assert_eq!(slice.as_mut_ptr(), 0 as *mut i8);
    /// ```
    #[inline]
    #[unstable(feature = "slice_ptr_get", issue = "74265")]
    #[rustc_const_unstable(feature = "slice_ptr_get", issue = "74265")]
    pub const fn as_mut_ptr(self) -> *mut T {
    8001f62a:	1141                	addi	sp,sp,-16
    8001f62c:	e02a                	sd	a0,0(sp)
    8001f62e:	e42e                	sd	a1,8(sp)
        self as *mut T
    }
    8001f630:	0141                	addi	sp,sp,16
    8001f632:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr41_$LT$impl$u20$$BP$mut$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h1fb5de3e2413636cE:

000000008001f634 <_ZN4core3ptr7mut_ptr41_$LT$impl$u20$$BP$mut$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h1fb5de3e2413636cE>:
    ///     assert_eq!(x.get_unchecked_mut(1), x.as_mut_ptr().add(1));
    /// }
    /// ```
    #[unstable(feature = "slice_ptr_get", issue = "74265")]
    #[inline]
    pub unsafe fn get_unchecked_mut<I>(self, index: I) -> *mut I::Output
    8001f634:	7179                	addi	sp,sp,-48
    8001f636:	f406                	sd	ra,40(sp)
    8001f638:	e032                	sd	a2,0(sp)
    8001f63a:	862e                	mv	a2,a1
    8001f63c:	85aa                	mv	a1,a0
    8001f63e:	6502                	ld	a0,0(sp)
    8001f640:	e82e                	sd	a1,16(sp)
    8001f642:	ec32                	sd	a2,24(sp)
    8001f644:	f02a                	sd	a0,32(sp)
    where
        I: SliceIndex<[T]>,
    {
        // SAFETY: the caller ensures that `self` is dereferencable and `index` in-bounds.
        unsafe { index.get_unchecked_mut(self) }
    8001f646:	00002097          	auipc	ra,0x2
    8001f64a:	66e080e7          	jalr	1646(ra) # 80021cb4 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hc32ec1251c36865fE>
    8001f64e:	e42a                	sd	a0,8(sp)
    8001f650:	a009                	j	8001f652 <_ZN4core3ptr7mut_ptr41_$LT$impl$u20$$BP$mut$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h1fb5de3e2413636cE+0x1e>
    }
    8001f652:	6522                	ld	a0,8(sp)
    8001f654:	70a2                	ld	ra,40(sp)
    8001f656:	6145                	addi	sp,sp,48
    8001f658:	8082                	ret

Disassembly of section .text._ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$13guaranteed_eq17hae95a39236f9ef3eE:

000000008001f65a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$13guaranteed_eq17hae95a39236f9ef3eE>:
    pub const fn guaranteed_eq(self, other: *const T) -> bool
    8001f65a:	1101                	addi	sp,sp,-32
    8001f65c:	e42a                	sd	a0,8(sp)
    8001f65e:	e82e                	sd	a1,16(sp)
        intrinsics::ptr_guaranteed_eq(self, other)
    8001f660:	8d2d                	xor	a0,a0,a1
    8001f662:	00153513          	seqz	a0,a0
    8001f666:	e02a                	sd	a0,0(sp)
    8001f668:	00a10fa3          	sb	a0,31(sp)
    8001f66c:	a009                	j	8001f66e <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$13guaranteed_eq17hae95a39236f9ef3eE+0x14>
    }
    8001f66e:	6502                	ld	a0,0(sp)
    8001f670:	6105                	addi	sp,sp,32
    8001f672:	8082                	ret

Disassembly of section .text._ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h3ef2f165a29b2365E:

000000008001f674 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h3ef2f165a29b2365E>:
    pub const unsafe fn add(self, count: usize) -> Self
    8001f674:	1101                	addi	sp,sp,-32
    8001f676:	ec06                	sd	ra,24(sp)
    8001f678:	e42a                	sd	a0,8(sp)
    8001f67a:	e82e                	sd	a1,16(sp)
        unsafe { self.offset(count as isize) }
    8001f67c:	00000097          	auipc	ra,0x0
    8001f680:	046080e7          	jalr	70(ra) # 8001f6c2 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d562998c5c34b1bE>
    8001f684:	e02a                	sd	a0,0(sp)
    8001f686:	a009                	j	8001f688 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h3ef2f165a29b2365E+0x14>
    }
    8001f688:	6502                	ld	a0,0(sp)
    8001f68a:	60e2                	ld	ra,24(sp)
    8001f68c:	6105                	addi	sp,sp,32
    8001f68e:	8082                	ret

Disassembly of section .text._ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6as_ref17h1afc8f6daddbc052E:

000000008001f690 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6as_ref17h1afc8f6daddbc052E>:
    pub unsafe fn as_ref<'a>(self) -> Option<&'a T> {
    8001f690:	7179                	addi	sp,sp,-48
    8001f692:	f406                	sd	ra,40(sp)
    8001f694:	e42a                	sd	a0,8(sp)
    8001f696:	f02a                	sd	a0,32(sp)
        if self.is_null() { None } else { unsafe { Some(&*self) } }
    8001f698:	00000097          	auipc	ra,0x0
    8001f69c:	03e080e7          	jalr	62(ra) # 8001f6d6 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h309eb733b6984dd5E>
    8001f6a0:	e82a                	sd	a0,16(sp)
    8001f6a2:	a009                	j	8001f6a4 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6as_ref17h1afc8f6daddbc052E+0x14>
    8001f6a4:	6542                	ld	a0,16(sp)
    8001f6a6:	4581                	li	a1,0
    8001f6a8:	00b50663          	beq	a0,a1,8001f6b4 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6as_ref17h1afc8f6daddbc052E+0x24>
    8001f6ac:	a009                	j	8001f6ae <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6as_ref17h1afc8f6daddbc052E+0x1e>
    8001f6ae:	4501                	li	a0,0
    8001f6b0:	ec2a                	sd	a0,24(sp)
    8001f6b2:	a021                	j	8001f6ba <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6as_ref17h1afc8f6daddbc052E+0x2a>
    8001f6b4:	6522                	ld	a0,8(sp)
    8001f6b6:	ec2a                	sd	a0,24(sp)
    8001f6b8:	a009                	j	8001f6ba <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6as_ref17h1afc8f6daddbc052E+0x2a>
    }
    8001f6ba:	6562                	ld	a0,24(sp)
    8001f6bc:	70a2                	ld	ra,40(sp)
    8001f6be:	6145                	addi	sp,sp,48
    8001f6c0:	8082                	ret

Disassembly of section .text._ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d562998c5c34b1bE:

000000008001f6c2 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d562998c5c34b1bE>:
    pub const unsafe fn offset(self, count: isize) -> *const T
    8001f6c2:	1101                	addi	sp,sp,-32
    8001f6c4:	e42a                	sd	a0,8(sp)
    8001f6c6:	e82e                	sd	a1,16(sp)
        unsafe { intrinsics::offset(self, count) }
    8001f6c8:	952e                	add	a0,a0,a1
    8001f6ca:	e02a                	sd	a0,0(sp)
    8001f6cc:	ec2a                	sd	a0,24(sp)
    8001f6ce:	a009                	j	8001f6d0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d562998c5c34b1bE+0xe>
    }
    8001f6d0:	6502                	ld	a0,0(sp)
    8001f6d2:	6105                	addi	sp,sp,32
    8001f6d4:	8082                	ret

Disassembly of section .text._ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h309eb733b6984dd5E:

000000008001f6d6 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h309eb733b6984dd5E>:
    pub const fn is_null(self) -> bool {
    8001f6d6:	1101                	addi	sp,sp,-32
    8001f6d8:	ec06                	sd	ra,24(sp)
    8001f6da:	e42a                	sd	a0,8(sp)
    8001f6dc:	e82a                	sd	a0,16(sp)
        (self as *const u8).guaranteed_eq(null())
    8001f6de:	a009                	j	8001f6e0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h309eb733b6984dd5E+0xa>
    8001f6e0:	6522                	ld	a0,8(sp)
    8001f6e2:	4581                	li	a1,0
    8001f6e4:	00000097          	auipc	ra,0x0
    8001f6e8:	f76080e7          	jalr	-138(ra) # 8001f65a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$13guaranteed_eq17hae95a39236f9ef3eE>
    8001f6ec:	e02a                	sd	a0,0(sp)
    8001f6ee:	a009                	j	8001f6f0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h309eb733b6984dd5E+0x1a>
    }
    8001f6f0:	6502                	ld	a0,0(sp)
    8001f6f2:	60e2                	ld	ra,24(sp)
    8001f6f4:	6105                	addi	sp,sp,32
    8001f6f6:	8082                	ret

Disassembly of section .text._ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$13get_unchecked17h149838d98ef59845E:

000000008001f6f8 <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$13get_unchecked17h149838d98ef59845E>:
    ///     assert_eq!(x.get_unchecked(1), x.as_ptr().add(1));
    /// }
    /// ```
    #[unstable(feature = "slice_ptr_get", issue = "74265")]
    #[inline]
    pub unsafe fn get_unchecked<I>(self, index: I) -> *const I::Output
    8001f6f8:	7179                	addi	sp,sp,-48
    8001f6fa:	f406                	sd	ra,40(sp)
    8001f6fc:	e032                	sd	a2,0(sp)
    8001f6fe:	862e                	mv	a2,a1
    8001f700:	85aa                	mv	a1,a0
    8001f702:	6502                	ld	a0,0(sp)
    8001f704:	e82e                	sd	a1,16(sp)
    8001f706:	ec32                	sd	a2,24(sp)
    8001f708:	f02a                	sd	a0,32(sp)
    where
        I: SliceIndex<[T]>,
    {
        // SAFETY: the caller ensures that `self` is dereferencable and `index` in-bounds.
        unsafe { index.get_unchecked(self) }
    8001f70a:	00002097          	auipc	ra,0x2
    8001f70e:	532080e7          	jalr	1330(ra) # 80021c3c <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hb36b3c40d6b3daa6E>
    8001f712:	e42a                	sd	a0,8(sp)
    8001f714:	a009                	j	8001f716 <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$13get_unchecked17h149838d98ef59845E+0x1e>
    }
    8001f716:	6522                	ld	a0,8(sp)
    8001f718:	70a2                	ld	ra,40(sp)
    8001f71a:	6145                	addi	sp,sp,48
    8001f71c:	8082                	ret

Disassembly of section .text._ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$6as_ptr17hcf3eefd405b9d730E:

000000008001f71e <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$6as_ptr17hcf3eefd405b9d730E>:
    pub const fn as_ptr(self) -> *const T {
    8001f71e:	1141                	addi	sp,sp,-16
    8001f720:	e02a                	sd	a0,0(sp)
    8001f722:	e42e                	sd	a1,8(sp)
    }
    8001f724:	0141                	addi	sp,sp,16
    8001f726:	8082                	ret

Disassembly of section .text._ZN4core3mem7replace17h718d2b5d4e2666b3E:

000000008001f728 <_ZN4core3mem7replace17h718d2b5d4e2666b3E>:
pub const fn replace<T>(dest: &mut T, src: T) -> T {
    8001f728:	7139                	addi	sp,sp,-64
    8001f72a:	fc06                	sd	ra,56(sp)
    8001f72c:	e42e                	sd	a1,8(sp)
    8001f72e:	e82a                	sd	a0,16(sp)
    8001f730:	f02a                	sd	a0,32(sp)
    8001f732:	f42e                	sd	a1,40(sp)
        let result = ptr::read(dest);
    8001f734:	00002097          	auipc	ra,0x2
    8001f738:	f6e080e7          	jalr	-146(ra) # 800216a2 <_ZN4core3ptr4read17hc3975c6c06864098E>
    8001f73c:	85aa                	mv	a1,a0
    8001f73e:	ec2e                	sd	a1,24(sp)
    8001f740:	f82a                	sd	a0,48(sp)
    8001f742:	a009                	j	8001f744 <_ZN4core3mem7replace17h718d2b5d4e2666b3E+0x1c>
        ptr::write(dest, src);
    8001f744:	65a2                	ld	a1,8(sp)
    8001f746:	6542                	ld	a0,16(sp)
    8001f748:	00002097          	auipc	ra,0x2
    8001f74c:	f90080e7          	jalr	-112(ra) # 800216d8 <_ZN4core3ptr5write17h087ddd4d9bf79c51E>
    8001f750:	a009                	j	8001f752 <_ZN4core3mem7replace17h718d2b5d4e2666b3E+0x2a>
}
    8001f752:	6562                	ld	a0,24(sp)
    8001f754:	70e2                	ld	ra,56(sp)
    8001f756:	6121                	addi	sp,sp,64
    8001f758:	8082                	ret

Disassembly of section .text._ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE:

000000008001f75a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE>:
    fn next(&mut self) -> Option<A> {
    8001f75a:	715d                	addi	sp,sp,-80
    8001f75c:	e486                	sd	ra,72(sp)
    8001f75e:	ec2a                	sd	a0,24(sp)
    8001f760:	fc2a                	sd	a0,56(sp)
        if self.start < self.end {
    8001f762:	00850593          	addi	a1,a0,8
    8001f766:	00000097          	auipc	ra,0x0
    8001f76a:	0b2080e7          	jalr	178(ra) # 8001f818 <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17ha284226f6d671daaE>
    8001f76e:	f02a                	sd	a0,32(sp)
    8001f770:	a009                	j	8001f772 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE+0x18>
    8001f772:	7502                	ld	a0,32(sp)
    8001f774:	4581                	li	a1,0
    8001f776:	00b50a63          	beq	a0,a1,8001f78a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE+0x30>
    8001f77a:	a009                	j	8001f77c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE+0x22>
            let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };
    8001f77c:	6562                	ld	a0,24(sp)
    8001f77e:	00002097          	auipc	ra,0x2
    8001f782:	490080e7          	jalr	1168(ra) # 80021c0e <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$usize$GT$5clone17h2bd08456cf1cb28dE>
    8001f786:	e82a                	sd	a0,16(sp)
    8001f788:	a021                	j	8001f790 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE+0x36>
    8001f78a:	4501                	li	a0,0
            None
    8001f78c:	f42a                	sd	a0,40(sp)
        if self.start < self.end {
    8001f78e:	a805                	j	8001f7be <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE+0x64>
            let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };
    8001f790:	6542                	ld	a0,16(sp)
    8001f792:	4585                	li	a1,1
    8001f794:	00002097          	auipc	ra,0x2
    8001f798:	23e080e7          	jalr	574(ra) # 800219d2 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17h8a22fb325f3ddf5bE>
    8001f79c:	85aa                	mv	a1,a0
    8001f79e:	e42e                	sd	a1,8(sp)
    8001f7a0:	e0aa                	sd	a0,64(sp)
    8001f7a2:	a009                	j	8001f7a4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE+0x4a>
            Some(mem::replace(&mut self.start, n))
    8001f7a4:	65a2                	ld	a1,8(sp)
    8001f7a6:	6562                	ld	a0,24(sp)
    8001f7a8:	00000097          	auipc	ra,0x0
    8001f7ac:	f80080e7          	jalr	-128(ra) # 8001f728 <_ZN4core3mem7replace17h718d2b5d4e2666b3E>
    8001f7b0:	e02a                	sd	a0,0(sp)
    8001f7b2:	a009                	j	8001f7b4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE+0x5a>
    8001f7b4:	6502                	ld	a0,0(sp)
    8001f7b6:	f82a                	sd	a0,48(sp)
    8001f7b8:	4505                	li	a0,1
    8001f7ba:	f42a                	sd	a0,40(sp)
        if self.start < self.end {
    8001f7bc:	a009                	j	8001f7be <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE+0x64>
    }
    8001f7be:	7522                	ld	a0,40(sp)
    8001f7c0:	75c2                	ld	a1,48(sp)
    8001f7c2:	60a6                	ld	ra,72(sp)
    8001f7c4:	6161                	addi	sp,sp,80
    8001f7c6:	8082                	ret

Disassembly of section .text._ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he0a8d93712e5493bE:

000000008001f7c8 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he0a8d93712e5493bE>:
    fn into_iter(self) -> I {
    8001f7c8:	1141                	addi	sp,sp,-16
    8001f7ca:	e02a                	sd	a0,0(sp)
    8001f7cc:	e42e                	sd	a1,8(sp)
    }
    8001f7ce:	0141                	addi	sp,sp,16
    8001f7d0:	8082                	ret

Disassembly of section .text._ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17hbe490bb523b08a07E:

000000008001f7d2 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17hbe490bb523b08a07E>:
                fn cmp(&self, other: &$t) -> Ordering {
    8001f7d2:	7179                	addi	sp,sp,-48
    8001f7d4:	e42e                	sd	a1,8(sp)
    8001f7d6:	e82a                	sd	a0,16(sp)
    8001f7d8:	f02a                	sd	a0,32(sp)
    8001f7da:	f42e                	sd	a1,40(sp)
                    if *self < *other { Less }
    8001f7dc:	6108                	ld	a0,0(a0)
    8001f7de:	618c                	ld	a1,0(a1)
    8001f7e0:	00b57863          	bgeu	a0,a1,8001f7f0 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17hbe490bb523b08a07E+0x1e>
    8001f7e4:	a009                	j	8001f7e6 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17hbe490bb523b08a07E+0x14>
    8001f7e6:	0ff00513          	li	a0,255
    8001f7ea:	00a10fa3          	sb	a0,31(sp)
    8001f7ee:	a00d                	j	8001f810 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17hbe490bb523b08a07E+0x3e>
                    else if *self == *other { Equal }
    8001f7f0:	65a2                	ld	a1,8(sp)
    8001f7f2:	6542                	ld	a0,16(sp)
    8001f7f4:	6108                	ld	a0,0(a0)
    8001f7f6:	618c                	ld	a1,0(a1)
    8001f7f8:	00b51763          	bne	a0,a1,8001f806 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17hbe490bb523b08a07E+0x34>
    8001f7fc:	a009                	j	8001f7fe <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17hbe490bb523b08a07E+0x2c>
    8001f7fe:	4501                	li	a0,0
    8001f800:	00a10fa3          	sb	a0,31(sp)
    8001f804:	a029                	j	8001f80e <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17hbe490bb523b08a07E+0x3c>
    8001f806:	4505                	li	a0,1
                    else { Greater }
    8001f808:	00a10fa3          	sb	a0,31(sp)
                    else if *self == *other { Equal }
    8001f80c:	a009                	j	8001f80e <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17hbe490bb523b08a07E+0x3c>
                    if *self < *other { Less }
    8001f80e:	a009                	j	8001f810 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17hbe490bb523b08a07E+0x3e>
                }
    8001f810:	01f10503          	lb	a0,31(sp)
    8001f814:	6145                	addi	sp,sp,48
    8001f816:	8082                	ret

Disassembly of section .text._ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17ha284226f6d671daaE:

000000008001f818 <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17ha284226f6d671daaE>:
                fn lt(&self, other: &$t) -> bool { (*self) < (*other) }
    8001f818:	1141                	addi	sp,sp,-16
    8001f81a:	e02a                	sd	a0,0(sp)
    8001f81c:	e42e                	sd	a1,8(sp)
    8001f81e:	6108                	ld	a0,0(a0)
    8001f820:	618c                	ld	a1,0(a1)
    8001f822:	00b53533          	sltu	a0,a0,a1
    8001f826:	0141                	addi	sp,sp,16
    8001f828:	8082                	ret

Disassembly of section .text._ZN4core9panicking13assert_failed17h4e6d74c9d534b647E:

000000008001f82a <_ZN4core9panicking13assert_failed17h4e6d74c9d534b647E>:
pub fn assert_failed<T, U>(
    8001f82a:	715d                	addi	sp,sp,-80
    8001f82c:	883a                	mv	a6,a4
    8001f82e:	e42e                	sd	a1,8(sp)
    8001f830:	e832                	sd	a2,16(sp)
    8001f832:	04a107a3          	sb	a0,79(sp)
    assert_failed_inner(kind, &left, &right, args)
    8001f836:	628c                	ld	a1,0(a3)
    8001f838:	ec2e                	sd	a1,24(sp)
    8001f83a:	668c                	ld	a1,8(a3)
    8001f83c:	f02e                	sd	a1,32(sp)
    8001f83e:	6a8c                	ld	a1,16(a3)
    8001f840:	f42e                	sd	a1,40(sp)
    8001f842:	6e8c                	ld	a1,24(a3)
    8001f844:	f82e                	sd	a1,48(sp)
    8001f846:	728c                	ld	a1,32(a3)
    8001f848:	fc2e                	sd	a1,56(sp)
    8001f84a:	768c                	ld	a1,40(a3)
    8001f84c:	e0ae                	sd	a1,64(sp)

000000008001f84e <.LBB0_1>:
    8001f84e:	0000c717          	auipc	a4,0xc
    8001f852:	4a270713          	addi	a4,a4,1186 # 8002bcf0 <.L__unnamed_1>
    8001f856:	002c                	addi	a1,sp,8
    8001f858:	0814                	addi	a3,sp,16
    8001f85a:	083c                	addi	a5,sp,24
    8001f85c:	863a                	mv	a2,a4
    8001f85e:	00003097          	auipc	ra,0x3
    8001f862:	932080e7          	jalr	-1742(ra) # 80022190 <_ZN4core9panicking19assert_failed_inner17h4615d2e87cda8e50E>
	...

Disassembly of section .text._ZN4core3ops8function6FnOnce9call_once17h199d3571a582934bE:

000000008001f868 <_ZN4core3ops8function6FnOnce9call_once17h199d3571a582934bE>:
    8001f868:	7179                	addi	sp,sp,-48
    8001f86a:	f406                	sd	ra,40(sp)
    8001f86c:	e82a                	sd	a0,16(sp)
    8001f86e:	ec2e                	sd	a1,24(sp)
    8001f870:	00000097          	auipc	ra,0x0
    8001f874:	f62080e7          	jalr	-158(ra) # 8001f7d2 <_ZN4core3cmp5impls50_$LT$impl$u20$core..cmp..Ord$u20$for$u20$usize$GT$3cmp17hbe490bb523b08a07E>
    8001f878:	e42a                	sd	a0,8(sp)
    8001f87a:	a009                	j	8001f87c <_ZN4core3ops8function6FnOnce9call_once17h199d3571a582934bE+0x14>
    8001f87c:	6522                	ld	a0,8(sp)
    8001f87e:	70a2                	ld	ra,40(sp)
    8001f880:	6145                	addi	sp,sp,48
    8001f882:	8082                	ret

Disassembly of section .text._ZN4core3ptr30drop_in_place$LT$$RF$usize$GT$17h4738edf12535783bE:

000000008001f884 <_ZN4core3ptr30drop_in_place$LT$$RF$usize$GT$17h4738edf12535783bE>:
pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
    8001f884:	1141                	addi	sp,sp,-16
    8001f886:	e42a                	sd	a0,8(sp)
    8001f888:	0141                	addi	sp,sp,16
    8001f88a:	8082                	ret

Disassembly of section .text._ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h145a0e5da1339a00E:

000000008001f88c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h145a0e5da1339a00E>:
macro_rules! debug {
    ($($T:ident)*) => {$(
        #[stable(feature = "rust1", since = "1.0.0")]
        impl fmt::Debug for $T {
            #[inline]
            fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
    8001f88c:	7139                	addi	sp,sp,-64
    8001f88e:	fc06                	sd	ra,56(sp)
    8001f890:	e42e                	sd	a1,8(sp)
    8001f892:	85aa                	mv	a1,a0
    8001f894:	6522                	ld	a0,8(sp)
    8001f896:	e82e                	sd	a1,16(sp)
    8001f898:	f42e                	sd	a1,40(sp)
    8001f89a:	f82a                	sd	a0,48(sp)
                if f.debug_lower_hex() {
    8001f89c:	00003097          	auipc	ra,0x3
    8001f8a0:	7c8080e7          	jalr	1992(ra) # 80023064 <_ZN4core3fmt9Formatter15debug_lower_hex17h7c86defbf028d215E>
    8001f8a4:	ec2a                	sd	a0,24(sp)
    8001f8a6:	a009                	j	8001f8a8 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h145a0e5da1339a00E+0x1c>
    8001f8a8:	6562                	ld	a0,24(sp)
    8001f8aa:	4581                	li	a1,0
    8001f8ac:	00b50c63          	beq	a0,a1,8001f8c4 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h145a0e5da1339a00E+0x38>
    8001f8b0:	a009                	j	8001f8b2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h145a0e5da1339a00E+0x26>
                    fmt::LowerHex::fmt(self, f)
    8001f8b2:	65a2                	ld	a1,8(sp)
    8001f8b4:	6542                	ld	a0,16(sp)
    8001f8b6:	00005097          	auipc	ra,0x5
    8001f8ba:	984080e7          	jalr	-1660(ra) # 8002423a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h760b07191d46b3f2E>
    8001f8be:	02a103a3          	sb	a0,39(sp)
    8001f8c2:	a801                	j	8001f8d2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h145a0e5da1339a00E+0x46>
                } else if f.debug_upper_hex() {
    8001f8c4:	6522                	ld	a0,8(sp)
    8001f8c6:	00003097          	auipc	ra,0x3
    8001f8ca:	7a8080e7          	jalr	1960(ra) # 8002306e <_ZN4core3fmt9Formatter15debug_upper_hex17hdf276d50be1e3931E>
    8001f8ce:	e02a                	sd	a0,0(sp)
    8001f8d0:	a011                	j	8001f8d4 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h145a0e5da1339a00E+0x48>
                if f.debug_lower_hex() {
    8001f8d2:	a81d                	j	8001f908 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h145a0e5da1339a00E+0x7c>
    8001f8d4:	6502                	ld	a0,0(sp)
    8001f8d6:	4581                	li	a1,0
                } else if f.debug_upper_hex() {
    8001f8d8:	00b50c63          	beq	a0,a1,8001f8f0 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h145a0e5da1339a00E+0x64>
    8001f8dc:	a009                	j	8001f8de <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h145a0e5da1339a00E+0x52>
                    fmt::UpperHex::fmt(self, f)
    8001f8de:	65a2                	ld	a1,8(sp)
    8001f8e0:	6542                	ld	a0,16(sp)
    8001f8e2:	00005097          	auipc	ra,0x5
    8001f8e6:	9d2080e7          	jalr	-1582(ra) # 800242b4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17h66734376af0f4671E>
    8001f8ea:	02a103a3          	sb	a0,39(sp)
    8001f8ee:	a811                	j	8001f902 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h145a0e5da1339a00E+0x76>
                } else {
                    fmt::Display::fmt(self, f)
    8001f8f0:	65a2                	ld	a1,8(sp)
    8001f8f2:	6542                	ld	a0,16(sp)
    8001f8f4:	00005097          	auipc	ra,0x5
    8001f8f8:	f64080e7          	jalr	-156(ra) # 80024858 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h9c6c4af1578f7c29E>
    8001f8fc:	02a103a3          	sb	a0,39(sp)
    8001f900:	a011                	j	8001f904 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h145a0e5da1339a00E+0x78>
                } else if f.debug_upper_hex() {
    8001f902:	a011                	j	8001f906 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h145a0e5da1339a00E+0x7a>
    8001f904:	a009                	j	8001f906 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h145a0e5da1339a00E+0x7a>
                if f.debug_lower_hex() {
    8001f906:	a009                	j	8001f908 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h145a0e5da1339a00E+0x7c>
                }
            }
    8001f908:	02714503          	lbu	a0,39(sp)
    8001f90c:	70e2                	ld	ra,56(sp)
    8001f90e:	6121                	addi	sp,sp,64
    8001f910:	8082                	ret

Disassembly of section .text._ZN9allocator11BuddySystem4init17h0838f8d4c4026c43E:

000000008001f912 <_ZN9allocator11BuddySystem4init17h0838f8d4c4026c43E>:

    /// Init the buddy system allocator at [start, end).
    /// `leaf_size` and `max_alignment` must be a power of 2.
    /// `max_alignment` is the biggest alignment of a [`alloc::alloc::Layout`] the user can request.
    /// SAFETY: It should only be called once and before any subsequent call to this buddy system.
    pub unsafe fn init(&mut self, start: usize, end: usize, leaf_size: usize, max_alignment: usize)
    8001f912:	d1010113          	addi	sp,sp,-752
    8001f916:	2e113423          	sd	ra,744(sp)
    8001f91a:	eeba                	sd	a4,344(sp)
    8001f91c:	f2b6                	sd	a3,352(sp)
    8001f91e:	f6b2                	sd	a2,360(sp)
    8001f920:	faae                	sd	a1,368(sp)
    8001f922:	feaa                	sd	a0,376(sp)
    8001f924:	20a13023          	sd	a0,512(sp)
    8001f928:	20b13423          	sd	a1,520(sp)
    8001f92c:	20c13823          	sd	a2,528(sp)
    8001f930:	20d13c23          	sd	a3,536(sp)
    8001f934:	22e13023          	sd	a4,544(sp)
        -> Result<(), &'static str>
    {
        if self.initialized {
    8001f938:	03854503          	lbu	a0,56(a0)
    8001f93c:	8905                	andi	a0,a0,1
    8001f93e:	4581                	li	a1,0
    8001f940:	00b50b63          	beq	a0,a1,8001f956 <.LBB1_78+0x10>
    8001f944:	a009                	j	8001f946 <.LBB1_78>

000000008001f946 <.LBB1_78>:
            return Err("init twice");
    8001f946:	0000c517          	auipc	a0,0xc
    8001f94a:	3ca50513          	addi	a0,a0,970 # 8002bd10 <.L__unnamed_1>
    8001f94e:	e32a                	sd	a0,384(sp)
    8001f950:	4529                	li	a0,10
    8001f952:	e72a                	sd	a0,392(sp)
//! Thread-unsafe, panic-free buddy system allocator.
    8001f954:	a139                	j	8001fd62 <.LBB1_81+0x20>
        }

        if end - start < leaf_size {
    8001f956:	7536                	ld	a0,360(sp)
    8001f958:	75d6                	ld	a1,368(sp)
    8001f95a:	40b505b3          	sub	a1,a0,a1
    8001f95e:	eaae                	sd	a1,336(sp)
    8001f960:	40b56863          	bltu	a0,a1,8001fd70 <.LBB1_82>
    8001f964:	a009                	j	8001f966 <.LBB1_78+0x20>
    8001f966:	6556                	ld	a0,336(sp)
    8001f968:	7596                	ld	a1,352(sp)
    8001f96a:	00b57b63          	bgeu	a0,a1,8001f980 <.LBB1_79+0x10>
    8001f96e:	a009                	j	8001f970 <.LBB1_79>

000000008001f970 <.LBB1_79>:
            return Err("range too small");
    8001f970:	0000c517          	auipc	a0,0xc
    8001f974:	41150513          	addi	a0,a0,1041 # 8002bd81 <.L__unnamed_2>
    8001f978:	e32a                	sd	a0,384(sp)
    8001f97a:	453d                	li	a0,15
    8001f97c:	e72a                	sd	a0,392(sp)
//! Thread-unsafe, panic-free buddy system allocator.
    8001f97e:	a6d5                	j	8001fd62 <.LBB1_81+0x20>
        }

        if !leaf_size.is_power_of_two() || !max_alignment.is_power_of_two() {
    8001f980:	7516                	ld	a0,352(sp)
    8001f982:	00002097          	auipc	ra,0x2
    8001f986:	ec8080e7          	jalr	-312(ra) # 8002184a <_ZN4core3num23_$LT$impl$u20$usize$GT$15is_power_of_two17h4d07b92e227ceed8E>
    8001f98a:	e6aa                	sd	a0,328(sp)
    8001f98c:	a02d                	j	8001f9b6 <.LBB1_79+0x46>
    8001f98e:	4505                	li	a0,1
    8001f990:	18a10ba3          	sb	a0,407(sp)
    8001f994:	a821                	j	8001f9ac <.LBB1_79+0x3c>
    8001f996:	4501                	li	a0,0
    8001f998:	18a10ba3          	sb	a0,407(sp)
    8001f99c:	a801                	j	8001f9ac <.LBB1_79+0x3c>
    8001f99e:	6576                	ld	a0,344(sp)
    8001f9a0:	00002097          	auipc	ra,0x2
    8001f9a4:	eaa080e7          	jalr	-342(ra) # 8002184a <_ZN4core3num23_$LT$impl$u20$usize$GT$15is_power_of_two17h4d07b92e227ceed8E>
    8001f9a8:	e2aa                	sd	a0,320(sp)
    8001f9aa:	a819                	j	8001f9c0 <.LBB1_79+0x50>
    8001f9ac:	19714503          	lbu	a0,407(sp)
    8001f9b0:	8905                	andi	a0,a0,1
    8001f9b2:	ed01                	bnez	a0,8001f9ca <.LBB1_80>
    8001f9b4:	a025                	j	8001f9dc <.LBB1_80+0x12>
    8001f9b6:	6536                	ld	a0,328(sp)
    8001f9b8:	4581                	li	a1,0
    8001f9ba:	fcb50ae3          	beq	a0,a1,8001f98e <.LBB1_79+0x1e>
    8001f9be:	b7c5                	j	8001f99e <.LBB1_79+0x2e>
    8001f9c0:	6516                	ld	a0,320(sp)
    8001f9c2:	4581                	li	a1,0
    8001f9c4:	fcb505e3          	beq	a0,a1,8001f98e <.LBB1_79+0x1e>
    8001f9c8:	b7f9                	j	8001f996 <.LBB1_79+0x26>

000000008001f9ca <.LBB1_80>:
            return Err("leaf size or max_alignment not 2^n");
    8001f9ca:	0000c517          	auipc	a0,0xc
    8001f9ce:	3c650513          	addi	a0,a0,966 # 8002bd90 <.L__unnamed_3>
    8001f9d2:	e32a                	sd	a0,384(sp)
    8001f9d4:	02200513          	li	a0,34
    8001f9d8:	e72a                	sd	a0,392(sp)
//! Thread-unsafe, panic-free buddy system allocator.
    8001f9da:	a661                	j	8001fd62 <.LBB1_81+0x20>
        }
        self.leaf_size = leaf_size;
    8001f9dc:	65f6                	ld	a1,344(sp)
    8001f9de:	7516                	ld	a0,352(sp)
    8001f9e0:	7676                	ld	a2,376(sp)
    8001f9e2:	ee08                	sd	a0,24(a2)
        self.max_alignment = max_alignment;
    8001f9e4:	f20c                	sd	a1,32(a2)

        // make sure start and end are both leaf aligned
        // and record the heap memory range: [self.base, self.end)
        let mut cur: usize = round_up(start, cmp::max(leaf_size, max_alignment));
    8001f9e6:	00002097          	auipc	ra,0x2
    8001f9ea:	37a080e7          	jalr	890(ra) # 80021d60 <_ZN4core3cmp3max17h3dc8da765fcdebd4E>
    8001f9ee:	fe2a                	sd	a0,312(sp)
    8001f9f0:	a009                	j	8001f9f2 <.LBB1_80+0x28>
    8001f9f2:	75f2                	ld	a1,312(sp)
    8001f9f4:	7556                	ld	a0,368(sp)
    8001f9f6:	00001097          	auipc	ra,0x1
    8001f9fa:	726080e7          	jalr	1830(ra) # 8002111c <_ZN9allocator8round_up17h09c23390ccb46398E>
    8001f9fe:	ef2a                	sd	a0,408(sp)
    8001fa00:	a009                	j	8001fa02 <.LBB1_80+0x38>
        self.base = cur;
    8001fa02:	65f6                	ld	a1,344(sp)
    8001fa04:	7516                	ld	a0,352(sp)
    8001fa06:	76f6                	ld	a3,376(sp)
    8001fa08:	667a                	ld	a2,408(sp)
    8001fa0a:	e290                	sd	a2,0(a3)
        self.actual_end = round_down(end, cmp::max(leaf_size, max_alignment));
    8001fa0c:	00002097          	auipc	ra,0x2
    8001fa10:	354080e7          	jalr	852(ra) # 80021d60 <_ZN4core3cmp3max17h3dc8da765fcdebd4E>
    8001fa14:	fa2a                	sd	a0,304(sp)
    8001fa16:	a009                	j	8001fa18 <.LBB1_80+0x4e>
    8001fa18:	75d2                	ld	a1,304(sp)
    8001fa1a:	7536                	ld	a0,360(sp)
    8001fa1c:	00001097          	auipc	ra,0x1
    8001fa20:	7c2080e7          	jalr	1986(ra) # 800211de <_ZN9allocator10round_down17h97bc9e681a0cc273E>
    8001fa24:	f62a                	sd	a0,296(sp)
    8001fa26:	a009                	j	8001fa28 <.LBB1_80+0x5e>
    8001fa28:	7532                	ld	a0,296(sp)
    8001fa2a:	75f6                	ld	a1,376(sp)
    8001fa2c:	e588                	sd	a0,8(a1)

        // compute the max pow of 2 smaller than size of [self.base, self.actual_end)
        self.nsizes = log2((self.actual_end-cur)/leaf_size) + 1;
    8001fa2e:	65fa                	ld	a1,408(sp)
    8001fa30:	40b505b3          	sub	a1,a0,a1
    8001fa34:	f22e                	sd	a1,288(sp)
    8001fa36:	34b56c63          	bltu	a0,a1,8001fd8e <.LBB1_84>
    8001fa3a:	a009                	j	8001fa3c <.LBB1_80+0x72>
    8001fa3c:	7516                	ld	a0,352(sp)
    8001fa3e:	4581                	li	a1,0
    8001fa40:	36b50663          	beq	a0,a1,8001fdac <.LBB1_86>
    8001fa44:	a009                	j	8001fa46 <.LBB1_80+0x7c>
    8001fa46:	7512                	ld	a0,288(sp)
    8001fa48:	7596                	ld	a1,352(sp)
    8001fa4a:	02b55533          	divu	a0,a0,a1
    8001fa4e:	00001097          	auipc	ra,0x1
    8001fa52:	7fc080e7          	jalr	2044(ra) # 8002124a <_ZN9allocator4log217h8cd213ee718a0479E>
    8001fa56:	ee2a                	sd	a0,280(sp)
    8001fa58:	a009                	j	8001fa5a <.LBB1_80+0x90>
    8001fa5a:	65f2                	ld	a1,280(sp)
    8001fa5c:	00158513          	addi	a0,a1,1
    8001fa60:	ea2a                	sd	a0,272(sp)
    8001fa62:	36b56363          	bltu	a0,a1,8001fdc8 <.LBB1_88>
    8001fa66:	a009                	j	8001fa68 <.LBB1_80+0x9e>
    8001fa68:	7576                	ld	a0,376(sp)
    8001fa6a:	65d2                	ld	a1,272(sp)
    8001fa6c:	e90c                	sd	a1,16(a0)
        if self.actual_end - cur > self.blk_size(self.max_size()) {
    8001fa6e:	6508                	ld	a0,8(a0)
    8001fa70:	65fa                	ld	a1,408(sp)
    8001fa72:	40b505b3          	sub	a1,a0,a1
    8001fa76:	e62e                	sd	a1,264(sp)
    8001fa78:	36b56663          	bltu	a0,a1,8001fde4 <.LBB1_90>
    8001fa7c:	a009                	j	8001fa7e <.LBB1_80+0xb4>
    8001fa7e:	7576                	ld	a0,376(sp)
    8001fa80:	00001097          	auipc	ra,0x1
    8001fa84:	0f6080e7          	jalr	246(ra) # 80020b76 <_ZN9allocator11BuddySystem8max_size17hef7a09e8b41b3266E>
    8001fa88:	e22a                	sd	a0,256(sp)
    8001fa8a:	a009                	j	8001fa8c <.LBB1_80+0xc2>
    8001fa8c:	6592                	ld	a1,256(sp)
    8001fa8e:	7576                	ld	a0,376(sp)
    8001fa90:	00001097          	auipc	ra,0x1
    8001fa94:	3bc080e7          	jalr	956(ra) # 80020e4c <_ZN9allocator11BuddySystem8blk_size17h8693939904cd2981E>
    8001fa98:	fdaa                	sd	a0,248(sp)
    8001fa9a:	a009                	j	8001fa9c <.LBB1_80+0xd2>
    8001fa9c:	756e                	ld	a0,248(sp)
    8001fa9e:	65b2                	ld	a1,264(sp)
    8001faa0:	00b57b63          	bgeu	a0,a1,8001fab6 <.LBB1_80+0xec>
    8001faa4:	a009                	j	8001faa6 <.LBB1_80+0xdc>
            self.nsizes += 1;
    8001faa6:	7576                	ld	a0,376(sp)
    8001faa8:	690c                	ld	a1,16(a0)
    8001faaa:	00158513          	addi	a0,a1,1
    8001faae:	f9aa                	sd	a0,240(sp)
    8001fab0:	34b56963          	bltu	a0,a1,8001fe02 <.LBB1_92>
    8001fab4:	a011                	j	8001fab8 <.LBB1_80+0xee>
        if self.actual_end - cur > self.blk_size(self.max_size()) {
    8001fab6:	a029                	j	8001fac0 <.LBB1_80+0xf6>
            self.nsizes += 1;
    8001fab8:	754e                	ld	a0,240(sp)
    8001faba:	75f6                	ld	a1,376(sp)
    8001fabc:	e988                	sd	a0,16(a1)
        if self.actual_end - cur > self.blk_size(self.max_size()) {
    8001fabe:	a009                	j	8001fac0 <.LBB1_80+0xf6>
        }

        // alloc buddy infos
        // SAFETY: init all of the BuddyInfo
        let info_slice_ptr = init_slice_empty(&mut cur, self.nsizes);
    8001fac0:	7576                	ld	a0,376(sp)
    8001fac2:	690c                	ld	a1,16(a0)
    8001fac4:	0b28                	addi	a0,sp,408
    8001fac6:	00002097          	auipc	ra,0x2
    8001faca:	0a0080e7          	jalr	160(ra) # 80021b66 <_ZN9allocator16init_slice_empty17h570498bae7ef4c88E>
    8001face:	862a                	mv	a2,a0
    8001fad0:	f1b2                	sd	a2,224(sp)
    8001fad2:	862e                	mv	a2,a1
    8001fad4:	f5b2                	sd	a2,232(sp)
    8001fad6:	22a13423          	sd	a0,552(sp)
    8001fada:	22b13823          	sd	a1,560(sp)
    8001fade:	a009                	j	8001fae0 <.LBB1_80+0x116>
        self.infos.as_mut_ptr().write(info_slice_ptr);
    8001fae0:	7576                	ld	a0,376(sp)
    8001fae2:	02850513          	addi	a0,a0,40
    8001fae6:	edaa                	sd	a0,216(sp)
    8001fae8:	2ca13823          	sd	a0,720(sp)
    8001faec:	a009                	j	8001faee <.LBB1_80+0x124>
    8001faee:	762e                	ld	a2,232(sp)
    8001faf0:	758e                	ld	a1,224(sp)
    8001faf2:	656e                	ld	a0,216(sp)
    8001faf4:	00002097          	auipc	ra,0x2
    8001faf8:	f1e080e7          	jalr	-226(ra) # 80021a12 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17h69211318640bf224E>
    8001fafc:	a009                	j	8001fafe <.LBB1_80+0x134>

        // init free list and alloc space for alloc field
        for i in 0..self.nsizes {
    8001fafe:	7576                	ld	a0,376(sp)
    8001fb00:	690c                	ld	a1,16(a0)
    8001fb02:	4501                	li	a0,0
    8001fb04:	f32a                	sd	a0,416(sp)
    8001fb06:	f72e                	sd	a1,424(sp)
    8001fb08:	00000097          	auipc	ra,0x0
    8001fb0c:	cc0080e7          	jalr	-832(ra) # 8001f7c8 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he0a8d93712e5493bE>
    8001fb10:	e5aa                	sd	a0,200(sp)
    8001fb12:	e9ae                	sd	a1,208(sp)
    8001fb14:	a009                	j	8001fb16 <.LBB1_80+0x14c>
    8001fb16:	654e                	ld	a0,208(sp)
    8001fb18:	65ae                	ld	a1,200(sp)
    8001fb1a:	fb2e                	sd	a1,432(sp)
    8001fb1c:	ff2a                	sd	a0,440(sp)
    8001fb1e:	a009                	j	8001fb20 <.LBB1_80+0x156>
    8001fb20:	1b08                	addi	a0,sp,432
    8001fb22:	00000097          	auipc	ra,0x0
    8001fb26:	c38080e7          	jalr	-968(ra) # 8001f75a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE>
    8001fb2a:	e3aa                	sd	a0,448(sp)
    8001fb2c:	e7ae                	sd	a1,456(sp)
    8001fb2e:	a009                	j	8001fb30 <.LBB1_80+0x166>
    8001fb30:	651e                	ld	a0,448(sp)
    8001fb32:	4581                	li	a1,0
    8001fb34:	00b50463          	beq	a0,a1,8001fb3c <.LBB1_80+0x172>
    8001fb38:	a009                	j	8001fb3a <.LBB1_80+0x170>
    8001fb3a:	a831                	j	8001fb56 <.LBB1_80+0x18c>
            info.alloc.as_mut_ptr().write(alloc_slice_ptr);
        }

        // alloc space for split field
        // blocks of size 0 no need to split
        for i in 1..self.nsizes {
    8001fb3c:	7576                	ld	a0,376(sp)
    8001fb3e:	690c                	ld	a1,16(a0)
    8001fb40:	4505                	li	a0,1
    8001fb42:	ebaa                	sd	a0,464(sp)
    8001fb44:	efae                	sd	a1,472(sp)
    8001fb46:	00000097          	auipc	ra,0x0
    8001fb4a:	c82080e7          	jalr	-894(ra) # 8001f7c8 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he0a8d93712e5493bE>
    8001fb4e:	fd2a                	sd	a0,184(sp)
    8001fb50:	e1ae                	sd	a1,192(sp)
    8001fb52:	a879                	j	8001fbf0 <.LBB1_80+0x226>
        for i in 0..self.nsizes {
    8001fb54:	0000                	unimp
    8001fb56:	7576                	ld	a0,376(sp)
    8001fb58:	65be                	ld	a1,456(sp)
    8001fb5a:	f52e                	sd	a1,168(sp)
    8001fb5c:	22b13c23          	sd	a1,568(sp)
    8001fb60:	24b13023          	sd	a1,576(sp)
    8001fb64:	24b13423          	sd	a1,584(sp)
            let nblk = self.n_blk(i);
    8001fb68:	00001097          	auipc	ra,0x1
    8001fb6c:	044080e7          	jalr	68(ra) # 80020bac <_ZN9allocator11BuddySystem5n_blk17hdff1460b10f7c769E>
    8001fb70:	85aa                	mv	a1,a0
    8001fb72:	f92e                	sd	a1,176(sp)
    8001fb74:	24a13823          	sd	a0,592(sp)
    8001fb78:	a009                	j	8001fb7a <.LBB1_80+0x1b0>
            let info = self.get_info_mut(i);
    8001fb7a:	75aa                	ld	a1,168(sp)
    8001fb7c:	7576                	ld	a0,376(sp)
    8001fb7e:	00001097          	auipc	ra,0x1
    8001fb82:	fa0080e7          	jalr	-96(ra) # 80020b1e <_ZN9allocator11BuddySystem12get_info_mut17h828847c6ad79cffaE>
    8001fb86:	85aa                	mv	a1,a0
    8001fb88:	f12e                	sd	a1,160(sp)
    8001fb8a:	24a13c23          	sd	a0,600(sp)
    8001fb8e:	a009                	j	8001fb90 <.LBB1_80+0x1c6>
            info.free.init();
    8001fb90:	750a                	ld	a0,160(sp)
    8001fb92:	00002097          	auipc	ra,0x2
    8001fb96:	8b8080e7          	jalr	-1864(ra) # 8002144a <_ZN9allocator4list4List4init17ha2ca564ea80bf5d5E>
    8001fb9a:	a009                	j	8001fb9c <.LBB1_80+0x1d2>
            let alloc_size = round_up(nblk, 8)/8;
    8001fb9c:	754a                	ld	a0,176(sp)
    8001fb9e:	45a1                	li	a1,8
    8001fba0:	00001097          	auipc	ra,0x1
    8001fba4:	57c080e7          	jalr	1404(ra) # 8002111c <_ZN9allocator8round_up17h09c23390ccb46398E>
    8001fba8:	ed2a                	sd	a0,152(sp)
    8001fbaa:	a009                	j	8001fbac <.LBB1_80+0x1e2>
    8001fbac:	656a                	ld	a0,152(sp)
    8001fbae:	00355593          	srli	a1,a0,0x3
    8001fbb2:	26b13023          	sd	a1,608(sp)
    8001fbb6:	0b28                	addi	a0,sp,408
            let alloc_slice_ptr = init_slice_empty(&mut cur, alloc_size);
    8001fbb8:	00002097          	auipc	ra,0x2
    8001fbbc:	f14080e7          	jalr	-236(ra) # 80021acc <_ZN9allocator16init_slice_empty17h3fa3ac5493bc8701E>
    8001fbc0:	862a                	mv	a2,a0
    8001fbc2:	e532                	sd	a2,136(sp)
    8001fbc4:	862e                	mv	a2,a1
    8001fbc6:	e932                	sd	a2,144(sp)
    8001fbc8:	26a13423          	sd	a0,616(sp)
    8001fbcc:	26b13823          	sd	a1,624(sp)
    8001fbd0:	a009                	j	8001fbd2 <.LBB1_80+0x208>
            info.alloc.as_mut_ptr().write(alloc_slice_ptr);
    8001fbd2:	750a                	ld	a0,160(sp)
    8001fbd4:	0541                	addi	a0,a0,16
    8001fbd6:	e12a                	sd	a0,128(sp)
    8001fbd8:	2ca13c23          	sd	a0,728(sp)
    8001fbdc:	a009                	j	8001fbde <.LBB1_80+0x214>
    8001fbde:	664a                	ld	a2,144(sp)
    8001fbe0:	65aa                	ld	a1,136(sp)
    8001fbe2:	650a                	ld	a0,128(sp)
    8001fbe4:	00000097          	auipc	ra,0x0
    8001fbe8:	9c4080e7          	jalr	-1596(ra) # 8001f5a8 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17h8b37e8181b720bd0E>
    8001fbec:	a009                	j	8001fbee <.LBB1_80+0x224>
        for i in 0..self.nsizes {
    8001fbee:	bf0d                	j	8001fb20 <.LBB1_80+0x156>
        for i in 1..self.nsizes {
    8001fbf0:	650e                	ld	a0,192(sp)
    8001fbf2:	75ea                	ld	a1,184(sp)
    8001fbf4:	f3ae                	sd	a1,480(sp)
    8001fbf6:	f7aa                	sd	a0,488(sp)
    8001fbf8:	a009                	j	8001fbfa <.LBB1_80+0x230>
    8001fbfa:	1388                	addi	a0,sp,480
    8001fbfc:	00000097          	auipc	ra,0x0
    8001fc00:	b5e080e7          	jalr	-1186(ra) # 8001f75a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE>
    8001fc04:	fbaa                	sd	a0,496(sp)
    8001fc06:	ffae                	sd	a1,504(sp)
    8001fc08:	a009                	j	8001fc0a <.LBB1_80+0x240>
    8001fc0a:	755e                	ld	a0,496(sp)
    8001fc0c:	4581                	li	a1,0
    8001fc0e:	00b50463          	beq	a0,a1,8001fc16 <.LBB1_80+0x24c>
    8001fc12:	a009                	j	8001fc14 <.LBB1_80+0x24a>
    8001fc14:	a811                	j	8001fc28 <.LBB1_80+0x25e>
            let split_slice_ptr = init_slice_empty(&mut cur, split_size);
            info.split.as_mut_ptr().write(split_slice_ptr);
        }

        // cur address may not be aligned now
        cur = round_up(cur, leaf_size);
    8001fc16:	7596                	ld	a1,352(sp)
    8001fc18:	657a                	ld	a0,408(sp)
    8001fc1a:	00001097          	auipc	ra,0x1
    8001fc1e:	502080e7          	jalr	1282(ra) # 8002111c <_ZN9allocator8round_up17h09c23390ccb46398E>
    8001fc22:	fcaa                	sd	a0,120(sp)
    8001fc24:	a851                	j	8001fcb8 <.LBB1_80+0x2ee>
        for i in 1..self.nsizes {
    8001fc26:	0000                	unimp
    8001fc28:	7576                	ld	a0,376(sp)
    8001fc2a:	75fe                	ld	a1,504(sp)
    8001fc2c:	f4ae                	sd	a1,104(sp)
    8001fc2e:	26b13c23          	sd	a1,632(sp)
    8001fc32:	28b13023          	sd	a1,640(sp)
    8001fc36:	28b13423          	sd	a1,648(sp)
            let nblk = self.n_blk(i);
    8001fc3a:	00001097          	auipc	ra,0x1
    8001fc3e:	f72080e7          	jalr	-142(ra) # 80020bac <_ZN9allocator11BuddySystem5n_blk17hdff1460b10f7c769E>
    8001fc42:	85aa                	mv	a1,a0
    8001fc44:	f8ae                	sd	a1,112(sp)
    8001fc46:	28a13823          	sd	a0,656(sp)
    8001fc4a:	a009                	j	8001fc4c <.LBB1_80+0x282>
            let info = self.get_info_mut(i);
    8001fc4c:	75a6                	ld	a1,104(sp)
    8001fc4e:	7576                	ld	a0,376(sp)
    8001fc50:	00001097          	auipc	ra,0x1
    8001fc54:	ece080e7          	jalr	-306(ra) # 80020b1e <_ZN9allocator11BuddySystem12get_info_mut17h828847c6ad79cffaE>
    8001fc58:	85aa                	mv	a1,a0
    8001fc5a:	f0ae                	sd	a1,96(sp)
    8001fc5c:	28a13c23          	sd	a0,664(sp)
    8001fc60:	a009                	j	8001fc62 <.LBB1_80+0x298>
            let split_size = round_up(nblk, 8)/8;
    8001fc62:	7546                	ld	a0,112(sp)
    8001fc64:	45a1                	li	a1,8
    8001fc66:	00001097          	auipc	ra,0x1
    8001fc6a:	4b6080e7          	jalr	1206(ra) # 8002111c <_ZN9allocator8round_up17h09c23390ccb46398E>
    8001fc6e:	ecaa                	sd	a0,88(sp)
    8001fc70:	a009                	j	8001fc72 <.LBB1_80+0x2a8>
    8001fc72:	6566                	ld	a0,88(sp)
    8001fc74:	00355593          	srli	a1,a0,0x3
    8001fc78:	2ab13023          	sd	a1,672(sp)
    8001fc7c:	0b28                	addi	a0,sp,408
            let split_slice_ptr = init_slice_empty(&mut cur, split_size);
    8001fc7e:	00002097          	auipc	ra,0x2
    8001fc82:	e4e080e7          	jalr	-434(ra) # 80021acc <_ZN9allocator16init_slice_empty17h3fa3ac5493bc8701E>
    8001fc86:	862a                	mv	a2,a0
    8001fc88:	e4b2                	sd	a2,72(sp)
    8001fc8a:	862e                	mv	a2,a1
    8001fc8c:	e8b2                	sd	a2,80(sp)
    8001fc8e:	2aa13423          	sd	a0,680(sp)
    8001fc92:	2ab13823          	sd	a1,688(sp)
    8001fc96:	a009                	j	8001fc98 <.LBB1_80+0x2ce>
            info.split.as_mut_ptr().write(split_slice_ptr);
    8001fc98:	7506                	ld	a0,96(sp)
    8001fc9a:	02050513          	addi	a0,a0,32
    8001fc9e:	e0aa                	sd	a0,64(sp)
    8001fca0:	2ea13023          	sd	a0,736(sp)
    8001fca4:	a009                	j	8001fca6 <.LBB1_80+0x2dc>
    8001fca6:	6646                	ld	a2,80(sp)
    8001fca8:	65a6                	ld	a1,72(sp)
    8001fcaa:	6506                	ld	a0,64(sp)
    8001fcac:	00000097          	auipc	ra,0x0
    8001fcb0:	8fc080e7          	jalr	-1796(ra) # 8001f5a8 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17h8b37e8181b720bd0E>
    8001fcb4:	a009                	j	8001fcb6 <.LBB1_80+0x2ec>
        for i in 1..self.nsizes {
    8001fcb6:	b791                	j	8001fbfa <.LBB1_80+0x230>
        cur = round_up(cur, leaf_size);
    8001fcb8:	75e6                	ld	a1,120(sp)
    8001fcba:	7576                	ld	a0,376(sp)
    8001fcbc:	ef2e                	sd	a1,408(sp)

        // meta data lies between [base, cur)
        let meta = self.mark_meta(cur);
    8001fcbe:	00001097          	auipc	ra,0x1
    8001fcc2:	8f4080e7          	jalr	-1804(ra) # 800205b2 <_ZN9allocator11BuddySystem9mark_meta17h01c7ae17553a6764E>
    8001fcc6:	85aa                	mv	a1,a0
    8001fcc8:	fc2e                	sd	a1,56(sp)
    8001fcca:	2aa13c23          	sd	a0,696(sp)
    8001fcce:	a009                	j	8001fcd0 <.LBB1_80+0x306>

        // unavailable data lies between [self.actual_end, 2^(self.nsizes-1))
        // due to the memory size of buddy system is a power of 2
        let unavail = self.mark_unavail();
    8001fcd0:	7576                	ld	a0,376(sp)
    8001fcd2:	00001097          	auipc	ra,0x1
    8001fcd6:	934080e7          	jalr	-1740(ra) # 80020606 <_ZN9allocator11BuddySystem12mark_unavail17h19653a018281c6a8E>
    8001fcda:	85aa                	mv	a1,a0
    8001fcdc:	f82e                	sd	a1,48(sp)
    8001fcde:	2ca13023          	sd	a0,704(sp)
    8001fce2:	a009                	j	8001fce4 <.LBB1_80+0x31a>
        
        // init free regions
        let free = self.init_free(cur);
    8001fce4:	7576                	ld	a0,376(sp)
    8001fce6:	65fa                	ld	a1,408(sp)
    8001fce8:	00001097          	auipc	ra,0x1
    8001fcec:	bd0080e7          	jalr	-1072(ra) # 800208b8 <_ZN9allocator11BuddySystem9init_free17h25e98e7c902c4f06E>
    8001fcf0:	85aa                	mv	a1,a0
    8001fcf2:	f42e                	sd	a1,40(sp)
    8001fcf4:	2ca13423          	sd	a0,712(sp)
    8001fcf8:	a009                	j	8001fcfa <.LBB1_80+0x330>

        // check total memory
        if free != self.blk_size(self.max_size()) - meta - unavail {
    8001fcfa:	7576                	ld	a0,376(sp)
    8001fcfc:	00001097          	auipc	ra,0x1
    8001fd00:	e7a080e7          	jalr	-390(ra) # 80020b76 <_ZN9allocator11BuddySystem8max_size17hef7a09e8b41b3266E>
    8001fd04:	f02a                	sd	a0,32(sp)
    8001fd06:	a009                	j	8001fd08 <.LBB1_80+0x33e>
    8001fd08:	7582                	ld	a1,32(sp)
    8001fd0a:	7576                	ld	a0,376(sp)
    8001fd0c:	00001097          	auipc	ra,0x1
    8001fd10:	140080e7          	jalr	320(ra) # 80020e4c <_ZN9allocator11BuddySystem8blk_size17h8693939904cd2981E>
    8001fd14:	ec2a                	sd	a0,24(sp)
    8001fd16:	a009                	j	8001fd18 <.LBB1_80+0x34e>
    8001fd18:	6562                	ld	a0,24(sp)
    8001fd1a:	75e2                	ld	a1,56(sp)
    8001fd1c:	40b505b3          	sub	a1,a0,a1
    8001fd20:	e82e                	sd	a1,16(sp)
    8001fd22:	0eb56e63          	bltu	a0,a1,8001fe1e <.LBB1_94>
    8001fd26:	a009                	j	8001fd28 <.LBB1_80+0x35e>
    8001fd28:	6542                	ld	a0,16(sp)
    8001fd2a:	75c2                	ld	a1,48(sp)
    8001fd2c:	40b505b3          	sub	a1,a0,a1
    8001fd30:	e42e                	sd	a1,8(sp)
    8001fd32:	10b56563          	bltu	a0,a1,8001fe3c <.LBB1_96>
    8001fd36:	a009                	j	8001fd38 <.LBB1_80+0x36e>
    8001fd38:	7522                	ld	a0,40(sp)
    8001fd3a:	65a2                	ld	a1,8(sp)
    8001fd3c:	00b50c63          	beq	a0,a1,8001fd54 <.LBB1_81+0x12>
    8001fd40:	a009                	j	8001fd42 <.LBB1_81>

000000008001fd42 <.LBB1_81>:
            return Err("allocator bug: tot != meta + free + unavail");
    8001fd42:	0000c517          	auipc	a0,0xc
    8001fd46:	13650513          	addi	a0,a0,310 # 8002be78 <.L__unnamed_4>
    8001fd4a:	e32a                	sd	a0,384(sp)
    8001fd4c:	02b00513          	li	a0,43
    8001fd50:	e72a                	sd	a0,392(sp)
//! Thread-unsafe, panic-free buddy system allocator.
    8001fd52:	a801                	j	8001fd62 <.LBB1_81+0x20>
    8001fd54:	75f6                	ld	a1,376(sp)
    8001fd56:	4505                	li	a0,1
        }

        self.initialized = true;
    8001fd58:	02a58c23          	sb	a0,56(a1)
    8001fd5c:	4501                	li	a0,0
        Ok(())
    8001fd5e:	e32a                	sd	a0,384(sp)
    }
    8001fd60:	a009                	j	8001fd62 <.LBB1_81+0x20>
    8001fd62:	651a                	ld	a0,384(sp)
    8001fd64:	65ba                	ld	a1,392(sp)
    8001fd66:	2e813083          	ld	ra,744(sp)
    8001fd6a:	2f010113          	addi	sp,sp,752
    8001fd6e:	8082                	ret

000000008001fd70 <.LBB1_82>:
        if end - start < leaf_size {
    8001fd70:	0000c517          	auipc	a0,0xc
    8001fd74:	ff050513          	addi	a0,a0,-16 # 8002bd60 <str.0>

000000008001fd78 <.LBB1_83>:
    8001fd78:	0000c617          	auipc	a2,0xc
    8001fd7c:	fd060613          	addi	a2,a2,-48 # 8002bd48 <.L__unnamed_5>
    8001fd80:	02100593          	li	a1,33
    8001fd84:	00002097          	auipc	ra,0x2
    8001fd88:	378080e7          	jalr	888(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008001fd8e <.LBB1_84>:
        self.nsizes = log2((self.actual_end-cur)/leaf_size) + 1;
    8001fd8e:	0000c517          	auipc	a0,0xc
    8001fd92:	fd250513          	addi	a0,a0,-46 # 8002bd60 <str.0>

000000008001fd96 <.LBB1_85>:
    8001fd96:	0000c617          	auipc	a2,0xc
    8001fd9a:	02260613          	addi	a2,a2,34 # 8002bdb8 <.L__unnamed_6>
    8001fd9e:	02100593          	li	a1,33
    8001fda2:	00002097          	auipc	ra,0x2
    8001fda6:	35a080e7          	jalr	858(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008001fdac <.LBB1_86>:
    8001fdac:	0000c517          	auipc	a0,0xc
    8001fdb0:	02450513          	addi	a0,a0,36 # 8002bdd0 <str.1>

000000008001fdb4 <.LBB1_87>:
    8001fdb4:	0000c617          	auipc	a2,0xc
    8001fdb8:	00460613          	addi	a2,a2,4 # 8002bdb8 <.L__unnamed_6>
    8001fdbc:	45e5                	li	a1,25
    8001fdbe:	00002097          	auipc	ra,0x2
    8001fdc2:	33e080e7          	jalr	830(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008001fdc8 <.LBB1_88>:
    8001fdc8:	0000c517          	auipc	a0,0xc
    8001fdcc:	04850513          	addi	a0,a0,72 # 8002be10 <str.2>

000000008001fdd0 <.LBB1_89>:
    8001fdd0:	0000c617          	auipc	a2,0xc
    8001fdd4:	02060613          	addi	a2,a2,32 # 8002bdf0 <.L__unnamed_7>
    8001fdd8:	45f1                	li	a1,28
    8001fdda:	00002097          	auipc	ra,0x2
    8001fdde:	322080e7          	jalr	802(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008001fde4 <.LBB1_90>:
        if self.actual_end - cur > self.blk_size(self.max_size()) {
    8001fde4:	0000c517          	auipc	a0,0xc
    8001fde8:	f7c50513          	addi	a0,a0,-132 # 8002bd60 <str.0>

000000008001fdec <.LBB1_91>:
    8001fdec:	0000c617          	auipc	a2,0xc
    8001fdf0:	04460613          	addi	a2,a2,68 # 8002be30 <.L__unnamed_8>
    8001fdf4:	02100593          	li	a1,33
    8001fdf8:	00002097          	auipc	ra,0x2
    8001fdfc:	304080e7          	jalr	772(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008001fe02 <.LBB1_92>:
            self.nsizes += 1;
    8001fe02:	0000c517          	auipc	a0,0xc
    8001fe06:	00e50513          	addi	a0,a0,14 # 8002be10 <str.2>

000000008001fe0a <.LBB1_93>:
    8001fe0a:	0000c617          	auipc	a2,0xc
    8001fe0e:	03e60613          	addi	a2,a2,62 # 8002be48 <.L__unnamed_9>
    8001fe12:	45f1                	li	a1,28
    8001fe14:	00002097          	auipc	ra,0x2
    8001fe18:	2e8080e7          	jalr	744(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008001fe1e <.LBB1_94>:
        if free != self.blk_size(self.max_size()) - meta - unavail {
    8001fe1e:	0000c517          	auipc	a0,0xc
    8001fe22:	f4250513          	addi	a0,a0,-190 # 8002bd60 <str.0>

000000008001fe26 <.LBB1_95>:
    8001fe26:	0000c617          	auipc	a2,0xc
    8001fe2a:	03a60613          	addi	a2,a2,58 # 8002be60 <.L__unnamed_10>
    8001fe2e:	02100593          	li	a1,33
    8001fe32:	00002097          	auipc	ra,0x2
    8001fe36:	2ca080e7          	jalr	714(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008001fe3c <.LBB1_96>:
    8001fe3c:	0000c517          	auipc	a0,0xc
    8001fe40:	f2450513          	addi	a0,a0,-220 # 8002bd60 <str.0>

000000008001fe44 <.LBB1_97>:
    8001fe44:	0000c617          	auipc	a2,0xc
    8001fe48:	01c60613          	addi	a2,a2,28 # 8002be60 <.L__unnamed_10>
    8001fe4c:	02100593          	li	a1,33
    8001fe50:	00002097          	auipc	ra,0x2
    8001fe54:	2ac080e7          	jalr	684(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E:

000000008001fe5a <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E>:
    pub fn meta_info(&self) -> (bool, usize, usize, usize) {
        (self.initialized, self.base, self.actual_end, self.nsizes)
    }

    /// Allocate a block of memory satisifying the layout.
    pub fn alloc(&mut self, layout: Layout) -> *mut u8 {
    8001fe5a:	7149                	addi	sp,sp,-368
    8001fe5c:	f686                	sd	ra,360(sp)
    8001fe5e:	e1aa                	sd	a0,192(sp)
    8001fe60:	e9ae                	sd	a1,208(sp)
    8001fe62:	edb2                	sd	a2,216(sp)
    8001fe64:	e62a                	sd	a0,264(sp)
    8001fe66:	0988                	addi	a0,sp,208
        if layout.size() == 0 {
    8001fe68:	00001097          	auipc	ra,0x1
    8001fe6c:	5b4080e7          	jalr	1460(ra) # 8002141c <_ZN4core5alloc6layout6Layout4size17h7a38fec576bdd6a2E>
    8001fe70:	e5aa                	sd	a0,200(sp)
    8001fe72:	a009                	j	8001fe74 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x1a>
    8001fe74:	652e                	ld	a0,200(sp)
    8001fe76:	4581                	li	a1,0
    8001fe78:	00b51663          	bne	a0,a1,8001fe84 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x2a>
    8001fe7c:	a009                	j	8001fe7e <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x24>
    8001fe7e:	4501                	li	a0,0
            return ptr::null_mut();
    8001fe80:	f1aa                	sd	a0,224(sp)
    8001fe82:	ac81                	j	800200d2 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x278>
    8001fe84:	0988                	addi	a0,sp,208
        }

        // only guarantee the alignment not bigger than max_alignment
        if layout.align() > self.max_alignment {
    8001fe86:	00001097          	auipc	ra,0x1
    8001fe8a:	5a0080e7          	jalr	1440(ra) # 80021426 <_ZN4core5alloc6layout6Layout5align17habc8d2502287bfe5E>
    8001fe8e:	fd2a                	sd	a0,184(sp)
    8001fe90:	a009                	j	8001fe92 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x38>
    8001fe92:	75ea                	ld	a1,184(sp)
    8001fe94:	650e                	ld	a0,192(sp)
    8001fe96:	7108                	ld	a0,32(a0)
    8001fe98:	00b57663          	bgeu	a0,a1,8001fea4 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x4a>
    8001fe9c:	a009                	j	8001fe9e <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x44>
    8001fe9e:	4501                	li	a0,0
            return ptr::null_mut();
    8001fea0:	f1aa                	sd	a0,224(sp)
    8001fea2:	ac05                	j	800200d2 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x278>
    8001fea4:	0988                	addi	a0,sp,208
        // note: the size of a value is always a multiple of its alignment
        // now we only have to consider the size
        // because base and actual_end are already align to max_alignment

        // find the smallest block can contain the size
        let smalli = if layout.size() <= self.leaf_size {
    8001fea6:	00001097          	auipc	ra,0x1
    8001feaa:	576080e7          	jalr	1398(ra) # 8002141c <_ZN4core5alloc6layout6Layout4size17h7a38fec576bdd6a2E>
    8001feae:	f92a                	sd	a0,176(sp)
    8001feb0:	a009                	j	8001feb2 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x58>
    8001feb2:	75ca                	ld	a1,176(sp)
    8001feb4:	650e                	ld	a0,192(sp)
    8001feb6:	6d08                	ld	a0,24(a0)
    8001feb8:	00b56663          	bltu	a0,a1,8001fec4 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x6a>
    8001febc:	a009                	j	8001febe <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x64>
    8001febe:	4501                	li	a0,0
            0 
    8001fec0:	f5aa                	sd	a0,232(sp)
        let smalli = if layout.size() <= self.leaf_size {
    8001fec2:	a0a9                	j	8001ff0c <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0xb2>
    8001fec4:	0988                	addi	a0,sp,208
        } else {
            (layout.size().next_power_of_two() / self.leaf_size).trailing_zeros() as usize
    8001fec6:	00001097          	auipc	ra,0x1
    8001feca:	556080e7          	jalr	1366(ra) # 8002141c <_ZN4core5alloc6layout6Layout4size17h7a38fec576bdd6a2E>
    8001fece:	f52a                	sd	a0,168(sp)
    8001fed0:	a009                	j	8001fed2 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x78>
    8001fed2:	752a                	ld	a0,168(sp)
    8001fed4:	00002097          	auipc	ra,0x2
    8001fed8:	998080e7          	jalr	-1640(ra) # 8002186c <_ZN4core3num23_$LT$impl$u20$usize$GT$17next_power_of_two17h8eeaf87577f4331fE>
    8001fedc:	f12a                	sd	a0,160(sp)
    8001fede:	a009                	j	8001fee0 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x86>
    8001fee0:	650e                	ld	a0,192(sp)
    8001fee2:	6d08                	ld	a0,24(a0)
    8001fee4:	ed2a                	sd	a0,152(sp)
    8001fee6:	4581                	li	a1,0
    8001fee8:	1eb50963          	beq	a0,a1,800200da <.LBB3_59>
    8001feec:	a009                	j	8001feee <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x94>
    8001feee:	750a                	ld	a0,160(sp)
    8001fef0:	65ea                	ld	a1,152(sp)
    8001fef2:	02b55533          	divu	a0,a0,a1
    8001fef6:	00002097          	auipc	ra,0x2
    8001fefa:	8b6080e7          	jalr	-1866(ra) # 800217ac <_ZN4core3num23_$LT$impl$u20$usize$GT$14trailing_zeros17h26e4a056cb05b6fbE>
    8001fefe:	e92a                	sd	a0,144(sp)
    8001ff00:	a009                	j	8001ff02 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0xa8>
    8001ff02:	654a                	ld	a0,144(sp)
    8001ff04:	1502                	slli	a0,a0,0x20
    8001ff06:	9101                	srli	a0,a0,0x20
    8001ff08:	f5aa                	sd	a0,232(sp)
        let smalli = if layout.size() <= self.leaf_size {
    8001ff0a:	a009                	j	8001ff0c <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0xb2>
        };
        let mut sizei = smalli;
    8001ff0c:	752e                	ld	a0,232(sp)
    8001ff0e:	f9aa                	sd	a0,240(sp)
        while sizei < self.nsizes {
    8001ff10:	a009                	j	8001ff12 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0xb8>
    8001ff12:	658e                	ld	a1,192(sp)
    8001ff14:	754e                	ld	a0,240(sp)
    8001ff16:	698c                	ld	a1,16(a1)
    8001ff18:	00b56463          	bltu	a0,a1,8001ff20 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0xc6>
    8001ff1c:	a009                	j	8001ff1e <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0xc4>
    8001ff1e:	a83d                	j	8001ff5c <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x102>
            let info = unsafe { self.get_info_mut(sizei) };
    8001ff20:	650e                	ld	a0,192(sp)
    8001ff22:	75ce                	ld	a1,240(sp)
    8001ff24:	00001097          	auipc	ra,0x1
    8001ff28:	bfa080e7          	jalr	-1030(ra) # 80020b1e <_ZN9allocator11BuddySystem12get_info_mut17h828847c6ad79cffaE>
    8001ff2c:	e52a                	sd	a0,136(sp)
    8001ff2e:	a009                	j	8001ff30 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0xd6>
    8001ff30:	652a                	ld	a0,136(sp)
    8001ff32:	ea2a                	sd	a0,272(sp)
            if !info.free.is_empty() {
    8001ff34:	00001097          	auipc	ra,0x1
    8001ff38:	604080e7          	jalr	1540(ra) # 80021538 <_ZN9allocator4list4List8is_empty17h2b5a11437d86acd9E>
    8001ff3c:	e12a                	sd	a0,128(sp)
    8001ff3e:	a009                	j	8001ff40 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0xe6>
    8001ff40:	650a                	ld	a0,128(sp)
    8001ff42:	e119                	bnez	a0,8001ff48 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0xee>
    8001ff44:	a009                	j	8001ff46 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0xec>
//! Thread-unsafe, panic-free buddy system allocator.
    8001ff46:	a819                	j	8001ff5c <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x102>
                break;
            }
            sizei += 1;
    8001ff48:	75ce                	ld	a1,240(sp)
    8001ff4a:	00158513          	addi	a0,a1,1
    8001ff4e:	fcaa                	sd	a0,120(sp)
    8001ff50:	1ab56363          	bltu	a0,a1,800200f6 <.LBB3_61>
    8001ff54:	a009                	j	8001ff56 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0xfc>
    8001ff56:	7566                	ld	a0,120(sp)
    8001ff58:	f9aa                	sd	a0,240(sp)
        while sizei < self.nsizes {
    8001ff5a:	bf65                	j	8001ff12 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0xb8>
        }
        if sizei >= self.nsizes {
    8001ff5c:	658e                	ld	a1,192(sp)
    8001ff5e:	754e                	ld	a0,240(sp)
    8001ff60:	698c                	ld	a1,16(a1)
    8001ff62:	00b56663          	bltu	a0,a1,8001ff6e <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x114>
    8001ff66:	a009                	j	8001ff68 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x10e>
    8001ff68:	4501                	li	a0,0
            // no free memory
            return ptr::null_mut()
    8001ff6a:	f1aa                	sd	a0,224(sp)
    8001ff6c:	a29d                	j	800200d2 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x278>
        }

        // pop a block at self.infos[sizei]
        let info = unsafe { self.get_info_mut(sizei) };
    8001ff6e:	650e                	ld	a0,192(sp)
    8001ff70:	75ce                	ld	a1,240(sp)
    8001ff72:	00001097          	auipc	ra,0x1
    8001ff76:	bac080e7          	jalr	-1108(ra) # 80020b1e <_ZN9allocator11BuddySystem12get_info_mut17h828847c6ad79cffaE>
    8001ff7a:	f8aa                	sd	a0,112(sp)
    8001ff7c:	a009                	j	8001ff7e <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x124>
    8001ff7e:	7546                	ld	a0,112(sp)
    8001ff80:	ee2a                	sd	a0,280(sp)
        let raw_addr = match unsafe { info.free.pop() } {
    8001ff82:	00001097          	auipc	ra,0x1
    8001ff86:	530080e7          	jalr	1328(ra) # 800214b2 <_ZN9allocator4list4List3pop17h8165b98152b25881E>
    8001ff8a:	fdaa                	sd	a0,248(sp)
    8001ff8c:	e22e                	sd	a1,256(sp)
    8001ff8e:	a009                	j	8001ff90 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x136>
            Some(raw_addr) => raw_addr,
    8001ff90:	756e                	ld	a0,248(sp)
    8001ff92:	4581                	li	a1,0
    8001ff94:	00b50463          	beq	a0,a1,8001ff9c <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x142>
    8001ff98:	a009                	j	8001ff9a <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x140>
    8001ff9a:	a029                	j	8001ffa4 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x14a>
    8001ff9c:	4501                	li	a0,0
            None => return ptr::null_mut(),
    8001ff9e:	f1aa                	sd	a0,224(sp)
    8001ffa0:	aa0d                	j	800200d2 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x278>
        let raw_addr = match unsafe { info.free.pop() } {
    8001ffa2:	0000                	unimp
            Some(raw_addr) => raw_addr,
    8001ffa4:	650e                	ld	a0,192(sp)
    8001ffa6:	6612                	ld	a2,256(sp)
    8001ffa8:	f0b2                	sd	a2,96(sp)
    8001ffaa:	f232                	sd	a2,288(sp)
    8001ffac:	f632                	sd	a2,296(sp)
        };
        let bi = self.blk_index(sizei, raw_addr);
    8001ffae:	75ce                	ld	a1,240(sp)
    8001ffb0:	00001097          	auipc	ra,0x1
    8001ffb4:	c7c080e7          	jalr	-900(ra) # 80020c2c <_ZN9allocator11BuddySystem9blk_index17hcd9ce7a5032bb5d0E>
    8001ffb8:	85aa                	mv	a1,a0
    8001ffba:	f4ae                	sd	a1,104(sp)
    8001ffbc:	fa2a                	sd	a0,304(sp)
    8001ffbe:	a009                	j	8001ffc0 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x166>
        unsafe { self.get_info_mut(sizei).alloc_set(bi, true); }
    8001ffc0:	650e                	ld	a0,192(sp)
    8001ffc2:	75ce                	ld	a1,240(sp)
    8001ffc4:	00001097          	auipc	ra,0x1
    8001ffc8:	b5a080e7          	jalr	-1190(ra) # 80020b1e <_ZN9allocator11BuddySystem12get_info_mut17h828847c6ad79cffaE>
    8001ffcc:	ecaa                	sd	a0,88(sp)
    8001ffce:	a009                	j	8001ffd0 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x176>
    8001ffd0:	75a6                	ld	a1,104(sp)
    8001ffd2:	6566                	ld	a0,88(sp)
    8001ffd4:	4605                	li	a2,1
    8001ffd6:	00001097          	auipc	ra,0x1
    8001ffda:	04a080e7          	jalr	74(ra) # 80021020 <_ZN9allocator9BuddyInfo9alloc_set17h48fdb360b5f9c917E>
    8001ffde:	a009                	j	8001ffe0 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x186>

        // split the block until it reach smallest block size
        while sizei > smalli {            
    8001ffe0:	a009                	j	8001ffe2 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x188>
    8001ffe2:	75ce                	ld	a1,240(sp)
    8001ffe4:	752e                	ld	a0,232(sp)
    8001ffe6:	00b56663          	bltu	a0,a1,8001fff2 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x198>
    8001ffea:	a009                	j	8001ffec <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x192>
            unsafe { info1.free.push(buddy_addr); }

            sizei -= 1;
        }

        raw_addr as *mut u8
    8001ffec:	7506                	ld	a0,96(sp)
    8001ffee:	f1aa                	sd	a0,224(sp)
    }
    8001fff0:	a0cd                	j	800200d2 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x278>
            let bi = self.blk_index(sizei, raw_addr);
    8001fff2:	7606                	ld	a2,96(sp)
    8001fff4:	650e                	ld	a0,192(sp)
    8001fff6:	75ce                	ld	a1,240(sp)
    8001fff8:	00001097          	auipc	ra,0x1
    8001fffc:	c34080e7          	jalr	-972(ra) # 80020c2c <_ZN9allocator11BuddySystem9blk_index17hcd9ce7a5032bb5d0E>
    80020000:	85aa                	mv	a1,a0
    80020002:	e8ae                	sd	a1,80(sp)
    80020004:	fe2a                	sd	a0,312(sp)
    80020006:	a009                	j	80020008 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x1ae>
            let info = unsafe { self.get_info_mut(sizei) };
    80020008:	650e                	ld	a0,192(sp)
    8002000a:	75ce                	ld	a1,240(sp)
    8002000c:	00001097          	auipc	ra,0x1
    80020010:	b12080e7          	jalr	-1262(ra) # 80020b1e <_ZN9allocator11BuddySystem12get_info_mut17h828847c6ad79cffaE>
    80020014:	e4aa                	sd	a0,72(sp)
    80020016:	a009                	j	80020018 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x1be>
    80020018:	65c6                	ld	a1,80(sp)
    8002001a:	6526                	ld	a0,72(sp)
    8002001c:	e2aa                	sd	a0,320(sp)
    8002001e:	4605                	li	a2,1
            info.split_set(bi, true);
    80020020:	00001097          	auipc	ra,0x1
    80020024:	044080e7          	jalr	68(ra) # 80021064 <_ZN9allocator9BuddyInfo9split_set17hd9896ad2ca355490E>
    80020028:	a009                	j	8002002a <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x1d0>
            let bs1 = self.blk_size(sizei-1);
    8002002a:	754e                	ld	a0,240(sp)
    8002002c:	fff50593          	addi	a1,a0,-1
    80020030:	e0ae                	sd	a1,64(sp)
    80020032:	0eb56063          	bltu	a0,a1,80020112 <.LBB3_63>
    80020036:	a009                	j	80020038 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x1de>
    80020038:	6586                	ld	a1,64(sp)
    8002003a:	650e                	ld	a0,192(sp)
    8002003c:	00001097          	auipc	ra,0x1
    80020040:	e10080e7          	jalr	-496(ra) # 80020e4c <_ZN9allocator11BuddySystem8blk_size17h8693939904cd2981E>
    80020044:	85aa                	mv	a1,a0
    80020046:	fc2e                	sd	a1,56(sp)
    80020048:	e6aa                	sd	a0,328(sp)
    8002004a:	a009                	j	8002004c <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x1f2>
            let bi1 = self.blk_index(sizei-1, raw_addr);
    8002004c:	754e                	ld	a0,240(sp)
    8002004e:	fff50593          	addi	a1,a0,-1
    80020052:	f82e                	sd	a1,48(sp)
    80020054:	0cb56e63          	bltu	a0,a1,80020130 <.LBB3_65>
    80020058:	a009                	j	8002005a <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x200>
    8002005a:	7606                	ld	a2,96(sp)
    8002005c:	75c2                	ld	a1,48(sp)
    8002005e:	650e                	ld	a0,192(sp)
    80020060:	00001097          	auipc	ra,0x1
    80020064:	bcc080e7          	jalr	-1076(ra) # 80020c2c <_ZN9allocator11BuddySystem9blk_index17hcd9ce7a5032bb5d0E>
    80020068:	85aa                	mv	a1,a0
    8002006a:	f42e                	sd	a1,40(sp)
    8002006c:	eaaa                	sd	a0,336(sp)
    8002006e:	a009                	j	80020070 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x216>
            let info1 = unsafe { self.get_info_mut(sizei-1) };
    80020070:	754e                	ld	a0,240(sp)
    80020072:	fff50593          	addi	a1,a0,-1
    80020076:	f02e                	sd	a1,32(sp)
    80020078:	0cb56b63          	bltu	a0,a1,8002014e <.LBB3_67>
    8002007c:	a009                	j	8002007e <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x224>
    8002007e:	7582                	ld	a1,32(sp)
    80020080:	650e                	ld	a0,192(sp)
    80020082:	00001097          	auipc	ra,0x1
    80020086:	a9c080e7          	jalr	-1380(ra) # 80020b1e <_ZN9allocator11BuddySystem12get_info_mut17h828847c6ad79cffaE>
    8002008a:	ec2a                	sd	a0,24(sp)
    8002008c:	a009                	j	8002008e <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x234>
    8002008e:	75a2                	ld	a1,40(sp)
    80020090:	6562                	ld	a0,24(sp)
    80020092:	eeaa                	sd	a0,344(sp)
    80020094:	4605                	li	a2,1
            info1.alloc_set(bi1, true);
    80020096:	00001097          	auipc	ra,0x1
    8002009a:	f8a080e7          	jalr	-118(ra) # 80021020 <_ZN9allocator9BuddyInfo9alloc_set17h48fdb360b5f9c917E>
    8002009e:	a009                	j	800200a0 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x246>
            let buddy_addr = raw_addr + bs1;
    800200a0:	7586                	ld	a1,96(sp)
    800200a2:	7562                	ld	a0,56(sp)
    800200a4:	952e                	add	a0,a0,a1
    800200a6:	e82a                	sd	a0,16(sp)
    800200a8:	0cb56263          	bltu	a0,a1,8002016c <.LBB3_69>
    800200ac:	a009                	j	800200ae <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x254>
    800200ae:	65c2                	ld	a1,16(sp)
    800200b0:	6562                	ld	a0,24(sp)
    800200b2:	f2ae                	sd	a1,352(sp)
            unsafe { info1.free.push(buddy_addr); }
    800200b4:	00001097          	auipc	ra,0x1
    800200b8:	3a2080e7          	jalr	930(ra) # 80021456 <_ZN9allocator4list4List4push17h00016bee64ea1dbdE>
    800200bc:	a009                	j	800200be <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x264>
            sizei -= 1;
    800200be:	754e                	ld	a0,240(sp)
    800200c0:	fff50593          	addi	a1,a0,-1
    800200c4:	e42e                	sd	a1,8(sp)
    800200c6:	0cb56163          	bltu	a0,a1,80020188 <.LBB3_71>
    800200ca:	a009                	j	800200cc <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x272>
    800200cc:	6522                	ld	a0,8(sp)
    800200ce:	f9aa                	sd	a0,240(sp)
        while sizei > smalli {            
    800200d0:	bf09                	j	8001ffe2 <_ZN9allocator11BuddySystem5alloc17hf1948e3b488fba43E+0x188>
    }
    800200d2:	750e                	ld	a0,224(sp)
    800200d4:	70b6                	ld	ra,360(sp)
    800200d6:	6175                	addi	sp,sp,368
    800200d8:	8082                	ret

00000000800200da <.LBB3_59>:
            (layout.size().next_power_of_two() / self.leaf_size).trailing_zeros() as usize
    800200da:	0000c517          	auipc	a0,0xc
    800200de:	cf650513          	addi	a0,a0,-778 # 8002bdd0 <str.1>

00000000800200e2 <.LBB3_60>:
    800200e2:	0000c617          	auipc	a2,0xc
    800200e6:	dc660613          	addi	a2,a2,-570 # 8002bea8 <.L__unnamed_11>
    800200ea:	45e5                	li	a1,25
    800200ec:	00002097          	auipc	ra,0x2
    800200f0:	010080e7          	jalr	16(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

00000000800200f6 <.LBB3_61>:
            sizei += 1;
    800200f6:	0000c517          	auipc	a0,0xc
    800200fa:	d1a50513          	addi	a0,a0,-742 # 8002be10 <str.2>

00000000800200fe <.LBB3_62>:
    800200fe:	0000c617          	auipc	a2,0xc
    80020102:	dc260613          	addi	a2,a2,-574 # 8002bec0 <.L__unnamed_12>
    80020106:	45f1                	li	a1,28
    80020108:	00002097          	auipc	ra,0x2
    8002010c:	ff4080e7          	jalr	-12(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080020112 <.LBB3_63>:
            let bs1 = self.blk_size(sizei-1);
    80020112:	0000c517          	auipc	a0,0xc
    80020116:	c4e50513          	addi	a0,a0,-946 # 8002bd60 <str.0>

000000008002011a <.LBB3_64>:
    8002011a:	0000c617          	auipc	a2,0xc
    8002011e:	dbe60613          	addi	a2,a2,-578 # 8002bed8 <.L__unnamed_13>
    80020122:	02100593          	li	a1,33
    80020126:	00002097          	auipc	ra,0x2
    8002012a:	fd6080e7          	jalr	-42(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080020130 <.LBB3_65>:
            let bi1 = self.blk_index(sizei-1, raw_addr);
    80020130:	0000c517          	auipc	a0,0xc
    80020134:	c3050513          	addi	a0,a0,-976 # 8002bd60 <str.0>

0000000080020138 <.LBB3_66>:
    80020138:	0000c617          	auipc	a2,0xc
    8002013c:	db860613          	addi	a2,a2,-584 # 8002bef0 <.L__unnamed_14>
    80020140:	02100593          	li	a1,33
    80020144:	00002097          	auipc	ra,0x2
    80020148:	fb8080e7          	jalr	-72(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008002014e <.LBB3_67>:
            let info1 = unsafe { self.get_info_mut(sizei-1) };
    8002014e:	0000c517          	auipc	a0,0xc
    80020152:	c1250513          	addi	a0,a0,-1006 # 8002bd60 <str.0>

0000000080020156 <.LBB3_68>:
    80020156:	0000c617          	auipc	a2,0xc
    8002015a:	db260613          	addi	a2,a2,-590 # 8002bf08 <.L__unnamed_15>
    8002015e:	02100593          	li	a1,33
    80020162:	00002097          	auipc	ra,0x2
    80020166:	f9a080e7          	jalr	-102(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008002016c <.LBB3_69>:
            let buddy_addr = raw_addr + bs1;
    8002016c:	0000c517          	auipc	a0,0xc
    80020170:	ca450513          	addi	a0,a0,-860 # 8002be10 <str.2>

0000000080020174 <.LBB3_70>:
    80020174:	0000c617          	auipc	a2,0xc
    80020178:	dac60613          	addi	a2,a2,-596 # 8002bf20 <.L__unnamed_16>
    8002017c:	45f1                	li	a1,28
    8002017e:	00002097          	auipc	ra,0x2
    80020182:	f7e080e7          	jalr	-130(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080020188 <.LBB3_71>:
            sizei -= 1;
    80020188:	0000c517          	auipc	a0,0xc
    8002018c:	bd850513          	addi	a0,a0,-1064 # 8002bd60 <str.0>

0000000080020190 <.LBB3_72>:
    80020190:	0000c617          	auipc	a2,0xc
    80020194:	da860613          	addi	a2,a2,-600 # 8002bf38 <.L__unnamed_17>
    80020198:	02100593          	li	a1,33
    8002019c:	00002097          	auipc	ra,0x2
    800201a0:	f60080e7          	jalr	-160(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN9allocator11BuddySystem7dealloc17hfe9c60ecf0af29ebE:

00000000800201a6 <_ZN9allocator11BuddySystem7dealloc17hfe9c60ecf0af29ebE>:

    /// Deallocate the memory.
    /// SAFETY: The raw ptr passed-in should be the one handed out previously.
    pub fn dealloc(&mut self, ptr: *mut u8, layout: Layout) {
    800201a6:	dc010113          	addi	sp,sp,-576
    800201aa:	22113c23          	sd	ra,568(sp)
    800201ae:	f9aa                	sd	a0,240(sp)
    800201b0:	fdb2                	sd	a2,248(sp)
    800201b2:	e236                	sd	a3,256(sp)
    800201b4:	e3aa                	sd	a0,448(sp)
    800201b6:	e7ae                	sd	a1,456(sp)
        // check ptr in range [self.base, self.actual_end)
        let mut raw_addr = ptr as usize;
    800201b8:	e62e                	sd	a1,264(sp)
        #[cfg(debug_assertions)]
        if raw_addr < self.base || raw_addr >= self.actual_end {
    800201ba:	6108                	ld	a0,0(a0)
    800201bc:	00a5fb63          	bgeu	a1,a0,800201d2 <_ZN9allocator11BuddySystem7dealloc17hfe9c60ecf0af29ebE+0x2c>
    800201c0:	a009                	j	800201c2 <_ZN9allocator11BuddySystem7dealloc17hfe9c60ecf0af29ebE+0x1c>
    800201c2:	4505                	li	a0,1
    800201c4:	10a10ba3          	sb	a0,279(sp)
    800201c8:	a819                	j	800201de <_ZN9allocator11BuddySystem7dealloc17hfe9c60ecf0af29ebE+0x38>
    800201ca:	4501                	li	a0,0
    800201cc:	10a10ba3          	sb	a0,279(sp)
    800201d0:	a039                	j	800201de <_ZN9allocator11BuddySystem7dealloc17hfe9c60ecf0af29ebE+0x38>
    800201d2:	75ce                	ld	a1,240(sp)
    800201d4:	6532                	ld	a0,264(sp)
    800201d6:	658c                	ld	a1,8(a1)
    800201d8:	feb575e3          	bgeu	a0,a1,800201c2 <_ZN9allocator11BuddySystem7dealloc17hfe9c60ecf0af29ebE+0x1c>
    800201dc:	b7fd                	j	800201ca <_ZN9allocator11BuddySystem7dealloc17hfe9c60ecf0af29ebE+0x24>
    800201de:	11714503          	lbu	a0,279(sp)
    800201e2:	8905                	andi	a0,a0,1
    800201e4:	4581                	li	a1,0
    800201e6:	02b50263          	beq	a0,a1,8002020a <.LBB4_68+0x16>
    800201ea:	a009                	j	800201ec <.LBB4_67>

00000000800201ec <.LBB4_67>:
            panic!("allocator: dealloc ptr out of range");
    800201ec:	0000c517          	auipc	a0,0xc
    800201f0:	d6450513          	addi	a0,a0,-668 # 8002bf50 <.L__unnamed_18>

00000000800201f4 <.LBB4_68>:
    800201f4:	0000c617          	auipc	a2,0xc
    800201f8:	d8460613          	addi	a2,a2,-636 # 8002bf78 <.L__unnamed_19>
    800201fc:	02300593          	li	a1,35
    80020200:	00002097          	auipc	ra,0x2
    80020204:	efc080e7          	jalr	-260(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80020208:	0000                	unimp
        }

        // find the size of block pointed by ptr
        // and check with the layout
        let mut sizei = self.nsizes;
    8002020a:	754e                	ld	a0,240(sp)
    8002020c:	690c                	ld	a1,16(a0)
    8002020e:	ee2e                	sd	a1,280(sp)
        for i in 0..self.max_size() {
    80020210:	00001097          	auipc	ra,0x1
    80020214:	966080e7          	jalr	-1690(ra) # 80020b76 <_ZN9allocator11BuddySystem8max_size17hef7a09e8b41b3266E>
    80020218:	f5aa                	sd	a0,232(sp)
    8002021a:	a009                	j	8002021c <.LBB4_68+0x28>
    8002021c:	75ae                	ld	a1,232(sp)
    8002021e:	4501                	li	a0,0
    80020220:	f22a                	sd	a0,288(sp)
    80020222:	f62e                	sd	a1,296(sp)
    80020224:	fffff097          	auipc	ra,0xfffff
    80020228:	5a4080e7          	jalr	1444(ra) # 8001f7c8 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he0a8d93712e5493bE>
    8002022c:	edaa                	sd	a0,216(sp)
    8002022e:	f1ae                	sd	a1,224(sp)
    80020230:	a009                	j	80020232 <.LBB4_68+0x3e>
    80020232:	750e                	ld	a0,224(sp)
    80020234:	65ee                	ld	a1,216(sp)
    80020236:	fa2e                	sd	a1,304(sp)
    80020238:	fe2a                	sd	a0,312(sp)
    8002023a:	a009                	j	8002023c <.LBB4_68+0x48>
    8002023c:	1a08                	addi	a0,sp,304
    8002023e:	fffff097          	auipc	ra,0xfffff
    80020242:	51c080e7          	jalr	1308(ra) # 8001f75a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE>
    80020246:	e2aa                	sd	a0,320(sp)
    80020248:	e6ae                	sd	a1,328(sp)
    8002024a:	a009                	j	8002024c <.LBB4_68+0x58>
    8002024c:	6516                	ld	a0,320(sp)
    8002024e:	4581                	li	a1,0
    80020250:	00b50463          	beq	a0,a1,80020258 <.LBB4_68+0x64>
    80020254:	a009                	j	80020256 <.LBB4_68+0x62>
    80020256:	a019                	j	8002025c <.LBB4_68+0x68>
//! Thread-unsafe, panic-free buddy system allocator.
    80020258:	a88d                	j	800202ca <.LBB4_68+0xd6>
        for i in 0..self.max_size() {
    8002025a:	0000                	unimp
    8002025c:	65b6                	ld	a1,328(sp)
    8002025e:	e5ae                	sd	a1,200(sp)
    80020260:	ebae                	sd	a1,464(sp)
    80020262:	efae                	sd	a1,472(sp)
    80020264:	f3ae                	sd	a1,480(sp)
            let bi = self.blk_index(i+1, raw_addr);
    80020266:	00158513          	addi	a0,a1,1
    8002026a:	e9aa                	sd	a0,208(sp)
    8002026c:	2ab56c63          	bltu	a0,a1,80020524 <.LBB4_76>
    80020270:	a009                	j	80020272 <.LBB4_68+0x7e>
    80020272:	65ce                	ld	a1,208(sp)
    80020274:	754e                	ld	a0,240(sp)
    80020276:	6632                	ld	a2,264(sp)
    80020278:	00001097          	auipc	ra,0x1
    8002027c:	9b4080e7          	jalr	-1612(ra) # 80020c2c <_ZN9allocator11BuddySystem9blk_index17hcd9ce7a5032bb5d0E>
    80020280:	85aa                	mv	a1,a0
    80020282:	e1ae                	sd	a1,192(sp)
    80020284:	f7aa                	sd	a0,488(sp)
    80020286:	a009                	j	80020288 <.LBB4_68+0x94>
            let info = unsafe { self.get_info_mut(i+1) };
    80020288:	65ae                	ld	a1,200(sp)
    8002028a:	00158513          	addi	a0,a1,1
    8002028e:	fd2a                	sd	a0,184(sp)
    80020290:	2ab56863          	bltu	a0,a1,80020540 <.LBB4_78>
    80020294:	a009                	j	80020296 <.LBB4_68+0xa2>
    80020296:	75ea                	ld	a1,184(sp)
    80020298:	754e                	ld	a0,240(sp)
    8002029a:	00001097          	auipc	ra,0x1
    8002029e:	884080e7          	jalr	-1916(ra) # 80020b1e <_ZN9allocator11BuddySystem12get_info_mut17h828847c6ad79cffaE>
    800202a2:	f92a                	sd	a0,176(sp)
    800202a4:	a009                	j	800202a6 <.LBB4_68+0xb2>
    800202a6:	658e                	ld	a1,192(sp)
    800202a8:	754a                	ld	a0,176(sp)
    800202aa:	fbaa                	sd	a0,496(sp)
            if info.is_split_set(bi) {
    800202ac:	00001097          	auipc	ra,0x1
    800202b0:	e36080e7          	jalr	-458(ra) # 800210e2 <_ZN9allocator9BuddyInfo12is_split_set17hd9054b929d273b40E>
    800202b4:	f52a                	sd	a0,168(sp)
    800202b6:	a009                	j	800202b8 <.LBB4_68+0xc4>
    800202b8:	752a                	ld	a0,168(sp)
    800202ba:	4581                	li	a1,0
    800202bc:	00b50663          	beq	a0,a1,800202c8 <.LBB4_68+0xd4>
    800202c0:	a009                	j	800202c2 <.LBB4_68+0xce>
                sizei = i;
    800202c2:	652e                	ld	a0,200(sp)
    800202c4:	ee2a                	sd	a0,280(sp)
//! Thread-unsafe, panic-free buddy system allocator.
    800202c6:	a011                	j	800202ca <.LBB4_68+0xd6>
        for i in 0..self.max_size() {
    800202c8:	bf95                	j	8002023c <.LBB4_68+0x48>
                break;
            }
        }
        #[cfg(debug_assertions)]
        if sizei == self.nsizes {
    800202ca:	75ce                	ld	a1,240(sp)
    800202cc:	6572                	ld	a0,280(sp)
    800202ce:	698c                	ld	a1,16(a1)
    800202d0:	02b51263          	bne	a0,a1,800202f4 <.LBB4_70+0x16>
    800202d4:	a009                	j	800202d6 <.LBB4_69>

00000000800202d6 <.LBB4_69>:
            panic!("allocator: dealloc cannot recycle ptr");
    800202d6:	0000c517          	auipc	a0,0xc
    800202da:	cea50513          	addi	a0,a0,-790 # 8002bfc0 <.L__unnamed_20>

00000000800202de <.LBB4_70>:
    800202de:	0000c617          	auipc	a2,0xc
    800202e2:	d0a60613          	addi	a2,a2,-758 # 8002bfe8 <.L__unnamed_21>
    800202e6:	02500593          	li	a1,37
    800202ea:	00002097          	auipc	ra,0x2
    800202ee:	e12080e7          	jalr	-494(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    800202f2:	0000                	unimp
    800202f4:	19a8                	addi	a0,sp,248
        }

        // check layout
        #[cfg(debug_assertions)]
        if layout.size() > self.blk_size(sizei) {
    800202f6:	00001097          	auipc	ra,0x1
    800202fa:	126080e7          	jalr	294(ra) # 8002141c <_ZN4core5alloc6layout6Layout4size17h7a38fec576bdd6a2E>
    800202fe:	f12a                	sd	a0,160(sp)
    80020300:	a009                	j	80020302 <.LBB4_70+0x24>
    80020302:	754e                	ld	a0,240(sp)
    80020304:	65f2                	ld	a1,280(sp)
    80020306:	00001097          	auipc	ra,0x1
    8002030a:	b46080e7          	jalr	-1210(ra) # 80020e4c <_ZN9allocator11BuddySystem8blk_size17h8693939904cd2981E>
    8002030e:	ed2a                	sd	a0,152(sp)
    80020310:	a009                	j	80020312 <.LBB4_70+0x34>
    80020312:	656a                	ld	a0,152(sp)
    80020314:	758a                	ld	a1,160(sp)
    80020316:	00b57b63          	bgeu	a0,a1,8002032c <.LBB4_70+0x4e>
    8002031a:	a009                	j	8002031c <.LBB4_70+0x3e>
            panic!("allocator: layout {:?} > blk size {}", layout, self.blk_size(sizei));
    8002031c:	754e                	ld	a0,240(sp)
    8002031e:	65f2                	ld	a1,280(sp)
    80020320:	00001097          	auipc	ra,0x1
    80020324:	b2c080e7          	jalr	-1236(ra) # 80020e4c <_ZN9allocator11BuddySystem8blk_size17h8693939904cd2981E>
    80020328:	fb2a                	sd	a0,432(sp)
    8002032a:	a011                	j	8002032e <.LBB4_70+0x50>
        }

        // free and coalesce
        while sizei < self.max_size() {
    8002032c:	a8bd                	j	800203aa <.LBB4_74+0x14>
    8002032e:	19a8                	addi	a0,sp,248
            panic!("allocator: layout {:?} > blk size {}", layout, self.blk_size(sizei));
    80020330:	f32a                	sd	a0,416(sp)
    80020332:	1b0c                	addi	a1,sp,432
    80020334:	e12e                	sd	a1,128(sp)
    80020336:	f72e                	sd	a1,424(sp)
    80020338:	ffaa                	sd	a0,504(sp)
    8002033a:	20b13023          	sd	a1,512(sp)

000000008002033e <.LBB4_71>:
    8002033e:	00005597          	auipc	a1,0x5
    80020342:	bb458593          	addi	a1,a1,-1100 # 80024ef2 <_ZN64_$LT$core..alloc..layout..Layout$u20$as$u20$core..fmt..Debug$GT$3fmt17h791c624323e1e5daE>
    80020346:	fffff097          	auipc	ra,0xfffff
    8002034a:	202080e7          	jalr	514(ra) # 8001f548 <_ZN4core3fmt10ArgumentV13new17hc2eeb6f5565b6dd2E>
    8002034e:	e52a                	sd	a0,136(sp)
    80020350:	e92e                	sd	a1,144(sp)
    80020352:	a009                	j	80020354 <.LBB4_71+0x16>
    80020354:	650a                	ld	a0,128(sp)

0000000080020356 <.LBB4_72>:
    80020356:	00004597          	auipc	a1,0x4
    8002035a:	50258593          	addi	a1,a1,1282 # 80024858 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h9c6c4af1578f7c29E>
    8002035e:	fffff097          	auipc	ra,0xfffff
    80020362:	1c8080e7          	jalr	456(ra) # 8001f526 <_ZN4core3fmt10ArgumentV13new17hafe633af74a29011E>
    80020366:	f8aa                	sd	a0,112(sp)
    80020368:	fcae                	sd	a1,120(sp)
    8002036a:	a009                	j	8002036c <.LBB4_72+0x16>
    8002036c:	7566                	ld	a0,120(sp)
    8002036e:	75c6                	ld	a1,112(sp)
    80020370:	664a                	ld	a2,144(sp)
    80020372:	66aa                	ld	a3,136(sp)
    80020374:	e336                	sd	a3,384(sp)
    80020376:	e732                	sd	a2,392(sp)
    80020378:	eb2e                	sd	a1,400(sp)
    8002037a:	ef2a                	sd	a0,408(sp)

000000008002037c <.LBB4_73>:
    8002037c:	0000c597          	auipc	a1,0xc
    80020380:	ca458593          	addi	a1,a1,-860 # 8002c020 <.L__unnamed_22>
    80020384:	0a88                	addi	a0,sp,336
    80020386:	0314                	addi	a3,sp,384
    80020388:	4709                	li	a4,2
    8002038a:	863a                	mv	a2,a4
    8002038c:	00001097          	auipc	ra,0x1
    80020390:	06e080e7          	jalr	110(ra) # 800213fa <_ZN4core3fmt9Arguments6new_v117hf60bb287480e0058E>
    80020394:	a009                	j	80020396 <.LBB4_74>

0000000080020396 <.LBB4_74>:
    80020396:	0000c597          	auipc	a1,0xc
    8002039a:	caa58593          	addi	a1,a1,-854 # 8002c040 <.L__unnamed_23>
    8002039e:	0a88                	addi	a0,sp,336
    800203a0:	00002097          	auipc	ra,0x2
    800203a4:	dc8080e7          	jalr	-568(ra) # 80022168 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
    800203a8:	0000                	unimp
        while sizei < self.max_size() {
    800203aa:	754e                	ld	a0,240(sp)
    800203ac:	65f2                	ld	a1,280(sp)
    800203ae:	f0ae                	sd	a1,96(sp)
    800203b0:	00000097          	auipc	ra,0x0
    800203b4:	7c6080e7          	jalr	1990(ra) # 80020b76 <_ZN9allocator11BuddySystem8max_size17hef7a09e8b41b3266E>
    800203b8:	f4aa                	sd	a0,104(sp)
    800203ba:	a009                	j	800203bc <.LBB4_74+0x26>
    800203bc:	7506                	ld	a0,96(sp)
    800203be:	75a6                	ld	a1,104(sp)
    800203c0:	00b56463          	bltu	a0,a1,800203c8 <.LBB4_74+0x32>
    800203c4:	a009                	j	800203c6 <.LBB4_74+0x30>
    800203c6:	aa0d                	j	800204f8 <.LBB4_75+0x80>
            let bi = self.blk_index(sizei, raw_addr);
    800203c8:	754e                	ld	a0,240(sp)
    800203ca:	65f2                	ld	a1,280(sp)
    800203cc:	6632                	ld	a2,264(sp)
    800203ce:	00001097          	auipc	ra,0x1
    800203d2:	85e080e7          	jalr	-1954(ra) # 80020c2c <_ZN9allocator11BuddySystem9blk_index17hcd9ce7a5032bb5d0E>
    800203d6:	85aa                	mv	a1,a0
    800203d8:	ecae                	sd	a1,88(sp)
    800203da:	20a13423          	sd	a0,520(sp)
    800203de:	a009                	j	800203e0 <.LBB4_74+0x4a>
            let buddyi = if bi % 2 == 0 { bi+1 } else { bi-1 };
    800203e0:	6566                	ld	a0,88(sp)
    800203e2:	8905                	andi	a0,a0,1
    800203e4:	e909                	bnez	a0,800203f6 <.LBB4_74+0x60>
    800203e6:	a009                	j	800203e8 <.LBB4_74+0x52>
    800203e8:	65e6                	ld	a1,88(sp)
    800203ea:	00158513          	addi	a0,a1,1
    800203ee:	e8aa                	sd	a0,80(sp)
    800203f0:	18b56563          	bltu	a0,a1,8002057a <.LBB4_82>
    800203f4:	a801                	j	80020404 <.LBB4_74+0x6e>
    800203f6:	6566                	ld	a0,88(sp)
    800203f8:	fff50593          	addi	a1,a0,-1
    800203fc:	e4ae                	sd	a1,72(sp)
    800203fe:	14b56f63          	bltu	a0,a1,8002055c <.LBB4_80>
    80020402:	a021                	j	8002040a <.LBB4_74+0x74>
    80020404:	6546                	ld	a0,80(sp)
    80020406:	ff2a                	sd	a0,440(sp)
    80020408:	a021                	j	80020410 <.LBB4_74+0x7a>
    8002040a:	6526                	ld	a0,72(sp)
    8002040c:	ff2a                	sd	a0,440(sp)
    8002040e:	a009                	j	80020410 <.LBB4_74+0x7a>
            let info = unsafe { self.get_info_mut(sizei) };
    80020410:	754e                	ld	a0,240(sp)
    80020412:	65f2                	ld	a1,280(sp)
    80020414:	00000097          	auipc	ra,0x0
    80020418:	70a080e7          	jalr	1802(ra) # 80020b1e <_ZN9allocator11BuddySystem12get_info_mut17h828847c6ad79cffaE>
    8002041c:	e0aa                	sd	a0,64(sp)
    8002041e:	a009                	j	80020420 <.LBB4_74+0x8a>
    80020420:	65e6                	ld	a1,88(sp)
    80020422:	6506                	ld	a0,64(sp)
    80020424:	20a13823          	sd	a0,528(sp)
    80020428:	4601                	li	a2,0
            info.alloc_set(bi, false);
    8002042a:	00001097          	auipc	ra,0x1
    8002042e:	bf6080e7          	jalr	-1034(ra) # 80021020 <_ZN9allocator9BuddyInfo9alloc_set17h48fdb360b5f9c917E>
    80020432:	a009                	j	80020434 <.LBB4_74+0x9e>
            
            // test if buddy is free
            if info.is_alloc_set(buddyi) {
    80020434:	6506                	ld	a0,64(sp)
    80020436:	75fa                	ld	a1,440(sp)
    80020438:	00001097          	auipc	ra,0x1
    8002043c:	c70080e7          	jalr	-912(ra) # 800210a8 <_ZN9allocator9BuddyInfo12is_alloc_set17h74e6eb5491672d31E>
    80020440:	fc2a                	sd	a0,56(sp)
    80020442:	a009                	j	80020444 <.LBB4_74+0xae>
    80020444:	7562                	ld	a0,56(sp)
    80020446:	4581                	li	a1,0
    80020448:	00b50463          	beq	a0,a1,80020450 <.LBB4_74+0xba>
    8002044c:	a009                	j	8002044e <.LBB4_74+0xb8>
//! Thread-unsafe, panic-free buddy system allocator.
    8002044e:	a06d                	j	800204f8 <.LBB4_75+0x80>
                break;
            }
            let buddy_addr = self.blk_addr(sizei, buddyi);
    80020450:	754e                	ld	a0,240(sp)
    80020452:	65f2                	ld	a1,280(sp)
    80020454:	767a                	ld	a2,440(sp)
    80020456:	00001097          	auipc	ra,0x1
    8002045a:	974080e7          	jalr	-1676(ra) # 80020dca <_ZN9allocator11BuddySystem8blk_addr17h1858bf3dd7c08f3fE>
    8002045e:	85aa                	mv	a1,a0
    80020460:	f82e                	sd	a1,48(sp)
    80020462:	20a13c23          	sd	a0,536(sp)
    80020466:	a009                	j	80020468 <.LBB4_74+0xd2>
            unsafe { (buddy_addr as *mut List).as_mut().unwrap().remove(); }
    80020468:	7542                	ld	a0,48(sp)
    8002046a:	00002097          	auipc	ra,0x2
    8002046e:	886080e7          	jalr	-1914(ra) # 80021cf0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h1d891c09167259ccE>
    80020472:	f42a                	sd	a0,40(sp)
    80020474:	a009                	j	80020476 <.LBB4_74+0xe0>
    80020476:	7522                	ld	a0,40(sp)

0000000080020478 <.LBB4_75>:
    80020478:	0000c597          	auipc	a1,0xc
    8002047c:	c1058593          	addi	a1,a1,-1008 # 8002c088 <.L__unnamed_24>
    80020480:	00001097          	auipc	ra,0x1
    80020484:	0d6080e7          	jalr	214(ra) # 80021556 <_ZN4core6option15Option$LT$T$GT$6unwrap17h92f45fda96995230E>
    80020488:	f02a                	sd	a0,32(sp)
    8002048a:	a009                	j	8002048c <.LBB4_75+0x14>
    8002048c:	7502                	ld	a0,32(sp)
    8002048e:	00001097          	auipc	ra,0x1
    80020492:	094080e7          	jalr	148(ra) # 80021522 <_ZN9allocator4list4List6remove17hdaf9d5be7333b4ddE>
    80020496:	a009                	j	80020498 <.LBB4_75+0x20>
            if buddyi % 2 == 0 {
    80020498:	1b814503          	lbu	a0,440(sp)
    8002049c:	8905                	andi	a0,a0,1
    8002049e:	e509                	bnez	a0,800204a8 <.LBB4_75+0x30>
    800204a0:	a009                	j	800204a2 <.LBB4_75+0x2a>
                raw_addr = buddy_addr;
    800204a2:	7542                	ld	a0,48(sp)
    800204a4:	e62a                	sd	a0,264(sp)
            if buddyi % 2 == 0 {
    800204a6:	a011                	j	800204aa <.LBB4_75+0x32>
    800204a8:	a009                	j	800204aa <.LBB4_75+0x32>
            }

            // coalesce and continue
            sizei += 1;
    800204aa:	65f2                	ld	a1,280(sp)
    800204ac:	00158513          	addi	a0,a1,1
    800204b0:	ec2a                	sd	a0,24(sp)
    800204b2:	0eb56263          	bltu	a0,a1,80020596 <.LBB4_84>
    800204b6:	a009                	j	800204b8 <.LBB4_75+0x40>
    800204b8:	65e2                	ld	a1,24(sp)
    800204ba:	754e                	ld	a0,240(sp)
    800204bc:	ee2e                	sd	a1,280(sp)
            let spliti = self.blk_index(sizei, raw_addr);
    800204be:	6632                	ld	a2,264(sp)
    800204c0:	00000097          	auipc	ra,0x0
    800204c4:	76c080e7          	jalr	1900(ra) # 80020c2c <_ZN9allocator11BuddySystem9blk_index17hcd9ce7a5032bb5d0E>
    800204c8:	85aa                	mv	a1,a0
    800204ca:	e82e                	sd	a1,16(sp)
    800204cc:	22a13023          	sd	a0,544(sp)
    800204d0:	a009                	j	800204d2 <.LBB4_75+0x5a>
            let info = unsafe { self.get_info_mut(sizei) };
    800204d2:	754e                	ld	a0,240(sp)
    800204d4:	65f2                	ld	a1,280(sp)
    800204d6:	00000097          	auipc	ra,0x0
    800204da:	648080e7          	jalr	1608(ra) # 80020b1e <_ZN9allocator11BuddySystem12get_info_mut17h828847c6ad79cffaE>
    800204de:	e42a                	sd	a0,8(sp)
    800204e0:	a009                	j	800204e2 <.LBB4_75+0x6a>
    800204e2:	65c2                	ld	a1,16(sp)
    800204e4:	6522                	ld	a0,8(sp)
    800204e6:	22a13423          	sd	a0,552(sp)
    800204ea:	4601                	li	a2,0
            info.split_set(spliti, false);
    800204ec:	00001097          	auipc	ra,0x1
    800204f0:	b78080e7          	jalr	-1160(ra) # 80021064 <_ZN9allocator9BuddyInfo9split_set17hd9896ad2ca355490E>
    800204f4:	a009                	j	800204f6 <.LBB4_75+0x7e>
        while sizei < self.max_size() {
    800204f6:	bd55                	j	800203aa <.LBB4_74+0x14>
        }

        let info = unsafe { self.get_info_mut(sizei) };
    800204f8:	754e                	ld	a0,240(sp)
    800204fa:	65f2                	ld	a1,280(sp)
    800204fc:	00000097          	auipc	ra,0x0
    80020500:	622080e7          	jalr	1570(ra) # 80020b1e <_ZN9allocator11BuddySystem12get_info_mut17h828847c6ad79cffaE>
    80020504:	e02a                	sd	a0,0(sp)
    80020506:	a009                	j	80020508 <.LBB4_75+0x90>
    80020508:	6502                	ld	a0,0(sp)
    8002050a:	22a13823          	sd	a0,560(sp)
        unsafe { info.free.push(raw_addr); }
    8002050e:	65b2                	ld	a1,264(sp)
    80020510:	00001097          	auipc	ra,0x1
    80020514:	f46080e7          	jalr	-186(ra) # 80021456 <_ZN9allocator4list4List4push17h00016bee64ea1dbdE>
    80020518:	a009                	j	8002051a <.LBB4_75+0xa2>
    }
    8002051a:	23813083          	ld	ra,568(sp)
    8002051e:	24010113          	addi	sp,sp,576
    80020522:	8082                	ret

0000000080020524 <.LBB4_76>:
            let bi = self.blk_index(i+1, raw_addr);
    80020524:	0000c517          	auipc	a0,0xc
    80020528:	8ec50513          	addi	a0,a0,-1812 # 8002be10 <str.2>

000000008002052c <.LBB4_77>:
    8002052c:	0000c617          	auipc	a2,0xc
    80020530:	a6460613          	addi	a2,a2,-1436 # 8002bf90 <.L__unnamed_25>
    80020534:	45f1                	li	a1,28
    80020536:	00002097          	auipc	ra,0x2
    8002053a:	bc6080e7          	jalr	-1082(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080020540 <.LBB4_78>:
            let info = unsafe { self.get_info_mut(i+1) };
    80020540:	0000c517          	auipc	a0,0xc
    80020544:	8d050513          	addi	a0,a0,-1840 # 8002be10 <str.2>

0000000080020548 <.LBB4_79>:
    80020548:	0000c617          	auipc	a2,0xc
    8002054c:	a6060613          	addi	a2,a2,-1440 # 8002bfa8 <.L__unnamed_26>
    80020550:	45f1                	li	a1,28
    80020552:	00002097          	auipc	ra,0x2
    80020556:	baa080e7          	jalr	-1110(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008002055c <.LBB4_80>:
            let buddyi = if bi % 2 == 0 { bi+1 } else { bi-1 };
    8002055c:	0000c517          	auipc	a0,0xc
    80020560:	80450513          	addi	a0,a0,-2044 # 8002bd60 <str.0>

0000000080020564 <.LBB4_81>:
    80020564:	0000c617          	auipc	a2,0xc
    80020568:	af460613          	addi	a2,a2,-1292 # 8002c058 <.L__unnamed_27>
    8002056c:	02100593          	li	a1,33
    80020570:	00002097          	auipc	ra,0x2
    80020574:	b8c080e7          	jalr	-1140(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008002057a <.LBB4_82>:
    8002057a:	0000c517          	auipc	a0,0xc
    8002057e:	89650513          	addi	a0,a0,-1898 # 8002be10 <str.2>

0000000080020582 <.LBB4_83>:
    80020582:	0000c617          	auipc	a2,0xc
    80020586:	aee60613          	addi	a2,a2,-1298 # 8002c070 <.L__unnamed_28>
    8002058a:	45f1                	li	a1,28
    8002058c:	00002097          	auipc	ra,0x2
    80020590:	b70080e7          	jalr	-1168(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080020596 <.LBB4_84>:
            sizei += 1;
    80020596:	0000c517          	auipc	a0,0xc
    8002059a:	87a50513          	addi	a0,a0,-1926 # 8002be10 <str.2>

000000008002059e <.LBB4_85>:
    8002059e:	0000c617          	auipc	a2,0xc
    800205a2:	b0260613          	addi	a2,a2,-1278 # 8002c0a0 <.L__unnamed_29>
    800205a6:	45f1                	li	a1,28
    800205a8:	00002097          	auipc	ra,0x2
    800205ac:	b54080e7          	jalr	-1196(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN9allocator11BuddySystem9mark_meta17h01c7ae17553a6764E:

00000000800205b2 <_ZN9allocator11BuddySystem9mark_meta17h01c7ae17553a6764E>:

    /// Mark meta data of buddy system as used.
    /// [self.base, cur)
    fn mark_meta(&mut self, cur: usize) -> usize {
    800205b2:	7139                	addi	sp,sp,-64
    800205b4:	fc06                	sd	ra,56(sp)
    800205b6:	e42e                	sd	a1,8(sp)
    800205b8:	e82a                	sd	a0,16(sp)
    800205ba:	f02a                	sd	a0,32(sp)
    800205bc:	f42e                	sd	a1,40(sp)
        let meta = cur - self.base;
    800205be:	6108                	ld	a0,0(a0)
    800205c0:	40a58533          	sub	a0,a1,a0
    800205c4:	ec2a                	sd	a0,24(sp)
    800205c6:	02a5e163          	bltu	a1,a0,800205e8 <.LBB5_4>
    800205ca:	a009                	j	800205cc <_ZN9allocator11BuddySystem9mark_meta17h01c7ae17553a6764E+0x1a>
    800205cc:	6622                	ld	a2,8(sp)
    800205ce:	6542                	ld	a0,16(sp)
    800205d0:	65e2                	ld	a1,24(sp)
    800205d2:	f82e                	sd	a1,48(sp)
        self.mark(self.base, cur);
    800205d4:	610c                	ld	a1,0(a0)
    800205d6:	00000097          	auipc	ra,0x0
    800205da:	0fa080e7          	jalr	250(ra) # 800206d0 <_ZN9allocator11BuddySystem4mark17h082e3ed5a4c299caE>
    800205de:	a009                	j	800205e0 <_ZN9allocator11BuddySystem9mark_meta17h01c7ae17553a6764E+0x2e>
        meta
    }
    800205e0:	6562                	ld	a0,24(sp)
    800205e2:	70e2                	ld	ra,56(sp)
    800205e4:	6121                	addi	sp,sp,64
    800205e6:	8082                	ret

00000000800205e8 <.LBB5_4>:
        let meta = cur - self.base;
    800205e8:	0000b517          	auipc	a0,0xb
    800205ec:	77850513          	addi	a0,a0,1912 # 8002bd60 <str.0>

00000000800205f0 <.LBB5_5>:
    800205f0:	0000c617          	auipc	a2,0xc
    800205f4:	ac860613          	addi	a2,a2,-1336 # 8002c0b8 <.L__unnamed_30>
    800205f8:	02100593          	li	a1,33
    800205fc:	00002097          	auipc	ra,0x2
    80020600:	b00080e7          	jalr	-1280(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN9allocator11BuddySystem12mark_unavail17h19653a018281c6a8E:

0000000080020606 <_ZN9allocator11BuddySystem12mark_unavail17h19653a018281c6a8E>:

    /// Mark unavailable data due to the requirement,
    /// that the size of buddy system should be a power of 2.
    fn mark_unavail(&mut self) -> usize {
    80020606:	715d                	addi	sp,sp,-80
    80020608:	e486                	sd	ra,72(sp)
    8002060a:	f42a                	sd	a0,40(sp)
    8002060c:	fc2a                	sd	a0,56(sp)
        let unavail = self.blk_size(self.max_size()) - (self.actual_end - self.base);
    8002060e:	00000097          	auipc	ra,0x0
    80020612:	568080e7          	jalr	1384(ra) # 80020b76 <_ZN9allocator11BuddySystem8max_size17hef7a09e8b41b3266E>
    80020616:	f82a                	sd	a0,48(sp)
    80020618:	a009                	j	8002061a <_ZN9allocator11BuddySystem12mark_unavail17h19653a018281c6a8E+0x14>
    8002061a:	75c2                	ld	a1,48(sp)
    8002061c:	7522                	ld	a0,40(sp)
    8002061e:	00001097          	auipc	ra,0x1
    80020622:	82e080e7          	jalr	-2002(ra) # 80020e4c <_ZN9allocator11BuddySystem8blk_size17h8693939904cd2981E>
    80020626:	f02a                	sd	a0,32(sp)
    80020628:	a009                	j	8002062a <_ZN9allocator11BuddySystem12mark_unavail17h19653a018281c6a8E+0x24>
    8002062a:	75a2                	ld	a1,40(sp)
    8002062c:	6588                	ld	a0,8(a1)
    8002062e:	618c                	ld	a1,0(a1)
    80020630:	40b505b3          	sub	a1,a0,a1
    80020634:	ec2e                	sd	a1,24(sp)
    80020636:	04b56163          	bltu	a0,a1,80020678 <.LBB6_10>
    8002063a:	a009                	j	8002063c <_ZN9allocator11BuddySystem12mark_unavail17h19653a018281c6a8E+0x36>
    8002063c:	7502                	ld	a0,32(sp)
    8002063e:	65e2                	ld	a1,24(sp)
    80020640:	40b505b3          	sub	a1,a0,a1
    80020644:	e82e                	sd	a1,16(sp)
    80020646:	04b56863          	bltu	a0,a1,80020696 <.LBB6_12>
    8002064a:	a009                	j	8002064c <_ZN9allocator11BuddySystem12mark_unavail17h19653a018281c6a8E+0x46>
    8002064c:	6542                	ld	a0,16(sp)
    8002064e:	75a2                	ld	a1,40(sp)
    80020650:	e0aa                	sd	a0,64(sp)
        self.mark(self.actual_end, self.actual_end + unavail);
    80020652:	658c                	ld	a1,8(a1)
    80020654:	e02e                	sd	a1,0(sp)
    80020656:	952e                	add	a0,a0,a1
    80020658:	e42a                	sd	a0,8(sp)
    8002065a:	04b56d63          	bltu	a0,a1,800206b4 <.LBB6_14>
    8002065e:	a009                	j	80020660 <_ZN9allocator11BuddySystem12mark_unavail17h19653a018281c6a8E+0x5a>
    80020660:	6622                	ld	a2,8(sp)
    80020662:	6582                	ld	a1,0(sp)
    80020664:	7522                	ld	a0,40(sp)
    80020666:	00000097          	auipc	ra,0x0
    8002066a:	06a080e7          	jalr	106(ra) # 800206d0 <_ZN9allocator11BuddySystem4mark17h082e3ed5a4c299caE>
    8002066e:	a009                	j	80020670 <_ZN9allocator11BuddySystem12mark_unavail17h19653a018281c6a8E+0x6a>
        unavail
    }
    80020670:	6542                	ld	a0,16(sp)
    80020672:	60a6                	ld	ra,72(sp)
    80020674:	6161                	addi	sp,sp,80
    80020676:	8082                	ret

0000000080020678 <.LBB6_10>:
        let unavail = self.blk_size(self.max_size()) - (self.actual_end - self.base);
    80020678:	0000b517          	auipc	a0,0xb
    8002067c:	6e850513          	addi	a0,a0,1768 # 8002bd60 <str.0>

0000000080020680 <.LBB6_11>:
    80020680:	0000c617          	auipc	a2,0xc
    80020684:	a5060613          	addi	a2,a2,-1456 # 8002c0d0 <.L__unnamed_31>
    80020688:	02100593          	li	a1,33
    8002068c:	00002097          	auipc	ra,0x2
    80020690:	a70080e7          	jalr	-1424(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080020696 <.LBB6_12>:
    80020696:	0000b517          	auipc	a0,0xb
    8002069a:	6ca50513          	addi	a0,a0,1738 # 8002bd60 <str.0>

000000008002069e <.LBB6_13>:
    8002069e:	0000c617          	auipc	a2,0xc
    800206a2:	a4a60613          	addi	a2,a2,-1462 # 8002c0e8 <.L__unnamed_32>
    800206a6:	02100593          	li	a1,33
    800206aa:	00002097          	auipc	ra,0x2
    800206ae:	a52080e7          	jalr	-1454(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

00000000800206b4 <.LBB6_14>:
        self.mark(self.actual_end, self.actual_end + unavail);
    800206b4:	0000b517          	auipc	a0,0xb
    800206b8:	75c50513          	addi	a0,a0,1884 # 8002be10 <str.2>

00000000800206bc <.LBB6_15>:
    800206bc:	0000c617          	auipc	a2,0xc
    800206c0:	a4460613          	addi	a2,a2,-1468 # 8002c100 <.L__unnamed_33>
    800206c4:	45f1                	li	a1,28
    800206c6:	00002097          	auipc	ra,0x2
    800206ca:	a36080e7          	jalr	-1482(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN9allocator11BuddySystem4mark17h082e3ed5a4c299caE:

00000000800206d0 <_ZN9allocator11BuddySystem4mark17h082e3ed5a4c299caE>:

    /// Mark memory from [left, right) as allocated.
    /// Useful for meta and unavailable data.
    fn mark(&mut self, left: usize, right: usize) {
    800206d0:	7121                	addi	sp,sp,-448
    800206d2:	ff06                	sd	ra,440(sp)
    800206d4:	f0b2                	sd	a2,96(sp)
    800206d6:	f4ae                	sd	a1,104(sp)
    800206d8:	f8aa                	sd	a0,112(sp)
    800206da:	eeaa                	sd	a0,344(sp)
    800206dc:	f2ae                	sd	a1,352(sp)
    800206de:	f6b2                	sd	a2,360(sp)
        debug_assert_eq!(left % self.leaf_size, 0);
    800206e0:	6d08                	ld	a0,24(a0)
    800206e2:	fcaa                	sd	a0,120(sp)
    800206e4:	4581                	li	a1,0
    800206e6:	16b50d63          	beq	a0,a1,80020860 <.LBB7_32>
    800206ea:	a009                	j	800206ec <_ZN9allocator11BuddySystem4mark17h082e3ed5a4c299caE+0x1c>
    800206ec:	7526                	ld	a0,104(sp)
    800206ee:	75e6                	ld	a1,120(sp)
    800206f0:	02b57533          	remu	a0,a0,a1
    800206f4:	e92a                	sd	a0,144(sp)
    800206f6:	0910                	addi	a2,sp,144
    800206f8:	e8b2                	sd	a2,80(sp)
    800206fa:	e132                	sd	a2,128(sp)

00000000800206fc <.LBB7_28>:
    800206fc:	00006597          	auipc	a1,0x6
    80020700:	10458593          	addi	a1,a1,260 # 80026800 <.L__unnamed_6+0xc8>
    80020704:	ecae                	sd	a1,88(sp)
    80020706:	e52e                	sd	a1,136(sp)
    80020708:	fab2                	sd	a2,368(sp)
    8002070a:	feae                	sd	a1,376(sp)
    8002070c:	4581                	li	a1,0
    8002070e:	02b50363          	beq	a0,a1,80020734 <.LBB7_29+0x14>
    80020712:	a009                	j	80020714 <.LBB7_28+0x18>
    80020714:	6666                	ld	a2,88(sp)
    80020716:	65c6                	ld	a1,80(sp)
    80020718:	4501                	li	a0,0
    8002071a:	08a10fa3          	sb	a0,159(sp)
    8002071e:	f12a                	sd	a0,160(sp)

0000000080020720 <.LBB7_29>:
    80020720:	0000c717          	auipc	a4,0xc
    80020724:	a5070713          	addi	a4,a4,-1456 # 8002c170 <.L__unnamed_35>
    80020728:	1114                	addi	a3,sp,160
    8002072a:	fffff097          	auipc	ra,0xfffff
    8002072e:	100080e7          	jalr	256(ra) # 8001f82a <_ZN4core9panicking13assert_failed17h4e6d74c9d534b647E>
    80020732:	0000                	unimp
        debug_assert_eq!(right % self.leaf_size, 0);
    80020734:	7546                	ld	a0,112(sp)
    80020736:	6d08                	ld	a0,24(a0)
    80020738:	e4aa                	sd	a0,72(sp)
    8002073a:	4581                	li	a1,0
    8002073c:	14b50163          	beq	a0,a1,8002087e <.LBB7_34>
    80020740:	a009                	j	80020742 <.LBB7_29+0x22>
    80020742:	7506                	ld	a0,96(sp)
    80020744:	65a6                	ld	a1,72(sp)
    80020746:	02b57533          	remu	a0,a0,a1
    8002074a:	f1aa                	sd	a0,224(sp)
    8002074c:	1190                	addi	a2,sp,224
    8002074e:	fc32                	sd	a2,56(sp)
    80020750:	e9b2                	sd	a2,208(sp)

0000000080020752 <.LBB7_30>:
    80020752:	00006597          	auipc	a1,0x6
    80020756:	0ae58593          	addi	a1,a1,174 # 80026800 <.L__unnamed_6+0xc8>
    8002075a:	e0ae                	sd	a1,64(sp)
    8002075c:	edae                	sd	a1,216(sp)
    8002075e:	e332                	sd	a2,384(sp)
    80020760:	e72e                	sd	a1,392(sp)
    80020762:	4581                	li	a1,0
    80020764:	02b50363          	beq	a0,a1,8002078a <.LBB7_31+0x14>
    80020768:	a009                	j	8002076a <.LBB7_30+0x18>
    8002076a:	6606                	ld	a2,64(sp)
    8002076c:	75e2                	ld	a1,56(sp)
    8002076e:	4501                	li	a0,0
    80020770:	0ea107a3          	sb	a0,239(sp)
    80020774:	f9aa                	sd	a0,240(sp)

0000000080020776 <.LBB7_31>:
    80020776:	0000c717          	auipc	a4,0xc
    8002077a:	a2a70713          	addi	a4,a4,-1494 # 8002c1a0 <.L__unnamed_36>
    8002077e:	1994                	addi	a3,sp,240
    80020780:	fffff097          	auipc	ra,0xfffff
    80020784:	0aa080e7          	jalr	170(ra) # 8001f82a <_ZN4core9panicking13assert_failed17h4e6d74c9d534b647E>
    80020788:	0000                	unimp

        for i in 0..self.nsizes {
    8002078a:	7546                	ld	a0,112(sp)
    8002078c:	690c                	ld	a1,16(a0)
    8002078e:	4501                	li	a0,0
    80020790:	f22a                	sd	a0,288(sp)
    80020792:	f62e                	sd	a1,296(sp)
    80020794:	fffff097          	auipc	ra,0xfffff
    80020798:	034080e7          	jalr	52(ra) # 8001f7c8 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he0a8d93712e5493bE>
    8002079c:	f42a                	sd	a0,40(sp)
    8002079e:	f82e                	sd	a1,48(sp)
    800207a0:	a009                	j	800207a2 <.LBB7_31+0x2c>
    800207a2:	7542                	ld	a0,48(sp)
    800207a4:	75a2                	ld	a1,40(sp)
    800207a6:	fa2e                	sd	a1,304(sp)
    800207a8:	fe2a                	sd	a0,312(sp)
    800207aa:	a009                	j	800207ac <.LBB7_31+0x36>
    800207ac:	1a08                	addi	a0,sp,304
    800207ae:	fffff097          	auipc	ra,0xfffff
    800207b2:	fac080e7          	jalr	-84(ra) # 8001f75a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE>
    800207b6:	e2aa                	sd	a0,320(sp)
    800207b8:	e6ae                	sd	a1,328(sp)
    800207ba:	a009                	j	800207bc <.LBB7_31+0x46>
    800207bc:	6516                	ld	a0,320(sp)
    800207be:	4581                	li	a1,0
    800207c0:	00b50463          	beq	a0,a1,800207c8 <.LBB7_31+0x52>
    800207c4:	a009                	j	800207c6 <.LBB7_31+0x50>
    800207c6:	a029                	j	800207d0 <.LBB7_31+0x5a>
                    info.split_set(bi, true);
                }
                bi += 1;
            }
        }
    }
    800207c8:	70fa                	ld	ra,440(sp)
    800207ca:	6139                	addi	sp,sp,448
    800207cc:	8082                	ret
        for i in 0..self.nsizes {
    800207ce:	0000                	unimp
    800207d0:	7626                	ld	a2,104(sp)
    800207d2:	7546                	ld	a0,112(sp)
    800207d4:	65b6                	ld	a1,328(sp)
    800207d6:	f02e                	sd	a1,32(sp)
    800207d8:	eb2e                	sd	a1,400(sp)
    800207da:	ef2e                	sd	a1,408(sp)
    800207dc:	f32e                	sd	a1,416(sp)
            let mut bi = self.blk_index(i, left);
    800207de:	00000097          	auipc	ra,0x0
    800207e2:	44e080e7          	jalr	1102(ra) # 80020c2c <_ZN9allocator11BuddySystem9blk_index17hcd9ce7a5032bb5d0E>
    800207e6:	eaaa                	sd	a0,336(sp)
    800207e8:	a009                	j	800207ea <.LBB7_31+0x74>
            let bj = self.blk_index_next(i, right);
    800207ea:	7606                	ld	a2,96(sp)
    800207ec:	7582                	ld	a1,32(sp)
    800207ee:	7546                	ld	a0,112(sp)
    800207f0:	00000097          	auipc	ra,0x0
    800207f4:	4ba080e7          	jalr	1210(ra) # 80020caa <_ZN9allocator11BuddySystem14blk_index_next17hac914ee1adc8ccddE>
    800207f8:	85aa                	mv	a1,a0
    800207fa:	ec2e                	sd	a1,24(sp)
    800207fc:	f72a                	sd	a0,424(sp)
    800207fe:	a009                	j	80020800 <.LBB7_31+0x8a>
            while bi < bj {
    80020800:	65e2                	ld	a1,24(sp)
    80020802:	6556                	ld	a0,336(sp)
    80020804:	00b56463          	bltu	a0,a1,8002080c <.LBB7_31+0x96>
    80020808:	a009                	j	8002080a <.LBB7_31+0x94>
        for i in 0..self.nsizes {
    8002080a:	b74d                	j	800207ac <.LBB7_31+0x36>
                let info = unsafe { self.get_info_mut(i) };
    8002080c:	7582                	ld	a1,32(sp)
    8002080e:	7546                	ld	a0,112(sp)
    80020810:	00000097          	auipc	ra,0x0
    80020814:	30e080e7          	jalr	782(ra) # 80020b1e <_ZN9allocator11BuddySystem12get_info_mut17h828847c6ad79cffaE>
    80020818:	e82a                	sd	a0,16(sp)
    8002081a:	a009                	j	8002081c <.LBB7_31+0xa6>
    8002081c:	6542                	ld	a0,16(sp)
    8002081e:	fb2a                	sd	a0,432(sp)
                info.alloc_set(bi, true);
    80020820:	65d6                	ld	a1,336(sp)
    80020822:	4605                	li	a2,1
    80020824:	00000097          	auipc	ra,0x0
    80020828:	7fc080e7          	jalr	2044(ra) # 80021020 <_ZN9allocator9BuddyInfo9alloc_set17h48fdb360b5f9c917E>
    8002082c:	a009                	j	8002082e <.LBB7_31+0xb8>
    8002082e:	7502                	ld	a0,32(sp)
    80020830:	4581                	li	a1,0
                if i > 0 {
    80020832:	00b50b63          	beq	a0,a1,80020848 <.LBB7_31+0xd2>
    80020836:	a009                	j	80020838 <.LBB7_31+0xc2>
                    info.split_set(bi, true);
    80020838:	6542                	ld	a0,16(sp)
    8002083a:	65d6                	ld	a1,336(sp)
    8002083c:	4605                	li	a2,1
    8002083e:	00001097          	auipc	ra,0x1
    80020842:	826080e7          	jalr	-2010(ra) # 80021064 <_ZN9allocator9BuddyInfo9split_set17hd9896ad2ca355490E>
    80020846:	a011                	j	8002084a <.LBB7_31+0xd4>
                if i > 0 {
    80020848:	a011                	j	8002084c <.LBB7_31+0xd6>
    8002084a:	a009                	j	8002084c <.LBB7_31+0xd6>
                bi += 1;
    8002084c:	65d6                	ld	a1,336(sp)
    8002084e:	00158513          	addi	a0,a1,1
    80020852:	e42a                	sd	a0,8(sp)
    80020854:	04b56463          	bltu	a0,a1,8002089c <.LBB7_36>
    80020858:	a009                	j	8002085a <.LBB7_31+0xe4>
    8002085a:	6522                	ld	a0,8(sp)
    8002085c:	eaaa                	sd	a0,336(sp)
            while bi < bj {
    8002085e:	b74d                	j	80020800 <.LBB7_31+0x8a>

0000000080020860 <.LBB7_32>:
        debug_assert_eq!(left % self.leaf_size, 0);
    80020860:	0000c517          	auipc	a0,0xc
    80020864:	8d050513          	addi	a0,a0,-1840 # 8002c130 <str.3>

0000000080020868 <.LBB7_33>:
    80020868:	0000c617          	auipc	a2,0xc
    8002086c:	8b060613          	addi	a2,a2,-1872 # 8002c118 <.L__unnamed_37>
    80020870:	03900593          	li	a1,57
    80020874:	00002097          	auipc	ra,0x2
    80020878:	888080e7          	jalr	-1912(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008002087e <.LBB7_34>:
        debug_assert_eq!(right % self.leaf_size, 0);
    8002087e:	0000c517          	auipc	a0,0xc
    80020882:	8b250513          	addi	a0,a0,-1870 # 8002c130 <str.3>

0000000080020886 <.LBB7_35>:
    80020886:	0000c617          	auipc	a2,0xc
    8002088a:	90260613          	addi	a2,a2,-1790 # 8002c188 <.L__unnamed_38>
    8002088e:	03900593          	li	a1,57
    80020892:	00002097          	auipc	ra,0x2
    80020896:	86a080e7          	jalr	-1942(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008002089c <.LBB7_36>:
                bi += 1;
    8002089c:	0000b517          	auipc	a0,0xb
    800208a0:	57450513          	addi	a0,a0,1396 # 8002be10 <str.2>

00000000800208a4 <.LBB7_37>:
    800208a4:	0000c617          	auipc	a2,0xc
    800208a8:	91460613          	addi	a2,a2,-1772 # 8002c1b8 <.L__unnamed_39>
    800208ac:	45f1                	li	a1,28
    800208ae:	00002097          	auipc	ra,0x2
    800208b2:	84e080e7          	jalr	-1970(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN9allocator11BuddySystem9init_free17h25e98e7c902c4f06E:

00000000800208b8 <_ZN9allocator11BuddySystem9init_free17h25e98e7c902c4f06E>:

    /// Init free regions between [left, self.actual_end).
    /// Must be called after marking meta and unavail data.
    fn init_free(&mut self, left: usize) -> usize {
    800208b8:	7151                	addi	sp,sp,-240
    800208ba:	f586                	sd	ra,232(sp)
    800208bc:	e8ae                	sd	a1,80(sp)
    800208be:	ecaa                	sd	a0,88(sp)
    800208c0:	f52a                	sd	a0,168(sp)
    800208c2:	f92e                	sd	a1,176(sp)
        let right = self.actual_end;
    800208c4:	650c                	ld	a1,8(a0)
    800208c6:	f0ae                	sd	a1,96(sp)
    800208c8:	fd2e                	sd	a1,184(sp)
    800208ca:	4581                	li	a1,0
        let mut free = 0;
    800208cc:	f8ae                	sd	a1,112(sp)
        for i in 0..self.max_size() {
    800208ce:	00000097          	auipc	ra,0x0
    800208d2:	2a8080e7          	jalr	680(ra) # 80020b76 <_ZN9allocator11BuddySystem8max_size17hef7a09e8b41b3266E>
    800208d6:	f4aa                	sd	a0,104(sp)
    800208d8:	a009                	j	800208da <_ZN9allocator11BuddySystem9init_free17h25e98e7c902c4f06E+0x22>
    800208da:	75a6                	ld	a1,104(sp)
    800208dc:	4501                	li	a0,0
    800208de:	fcaa                	sd	a0,120(sp)
    800208e0:	e12e                	sd	a1,128(sp)
    800208e2:	fffff097          	auipc	ra,0xfffff
    800208e6:	ee6080e7          	jalr	-282(ra) # 8001f7c8 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he0a8d93712e5493bE>
    800208ea:	e0aa                	sd	a0,64(sp)
    800208ec:	e4ae                	sd	a1,72(sp)
    800208ee:	a009                	j	800208f0 <_ZN9allocator11BuddySystem9init_free17h25e98e7c902c4f06E+0x38>
    800208f0:	6526                	ld	a0,72(sp)
    800208f2:	6586                	ld	a1,64(sp)
    800208f4:	e52e                	sd	a1,136(sp)
    800208f6:	e92a                	sd	a0,144(sp)
    800208f8:	a009                	j	800208fa <_ZN9allocator11BuddySystem9init_free17h25e98e7c902c4f06E+0x42>
    800208fa:	0128                	addi	a0,sp,136
    800208fc:	fffff097          	auipc	ra,0xfffff
    80020900:	e5e080e7          	jalr	-418(ra) # 8001f75a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h401d971ddbd8474fE>
    80020904:	ed2a                	sd	a0,152(sp)
    80020906:	f12e                	sd	a1,160(sp)
    80020908:	a009                	j	8002090a <_ZN9allocator11BuddySystem9init_free17h25e98e7c902c4f06E+0x52>
    8002090a:	656a                	ld	a0,152(sp)
    8002090c:	4581                	li	a1,0
    8002090e:	00b50463          	beq	a0,a1,80020916 <_ZN9allocator11BuddySystem9init_free17h25e98e7c902c4f06E+0x5e>
    80020912:	a009                	j	80020914 <_ZN9allocator11BuddySystem9init_free17h25e98e7c902c4f06E+0x5c>
    80020914:	a031                	j	80020920 <_ZN9allocator11BuddySystem9init_free17h25e98e7c902c4f06E+0x68>
            if left < right {
                free += self.init_free_pair(i, rbi);
            }
        }
        free
    }
    80020916:	7546                	ld	a0,112(sp)
    80020918:	70ae                	ld	ra,232(sp)
    8002091a:	616d                	addi	sp,sp,240
    8002091c:	8082                	ret
        for i in 0..self.max_size() {
    8002091e:	0000                	unimp
    80020920:	6646                	ld	a2,80(sp)
    80020922:	6566                	ld	a0,88(sp)
    80020924:	758a                	ld	a1,160(sp)
    80020926:	f82e                	sd	a1,48(sp)
    80020928:	e1ae                	sd	a1,192(sp)
    8002092a:	e5ae                	sd	a1,200(sp)
    8002092c:	e9ae                	sd	a1,208(sp)
            let lbi = self.blk_index_next(i, left);
    8002092e:	00000097          	auipc	ra,0x0
    80020932:	37c080e7          	jalr	892(ra) # 80020caa <_ZN9allocator11BuddySystem14blk_index_next17hac914ee1adc8ccddE>
    80020936:	85aa                	mv	a1,a0
    80020938:	fc2e                	sd	a1,56(sp)
    8002093a:	edaa                	sd	a0,216(sp)
    8002093c:	a009                	j	8002093e <_ZN9allocator11BuddySystem9init_free17h25e98e7c902c4f06E+0x86>
            let rbi = self.blk_index(i, right);
    8002093e:	7606                	ld	a2,96(sp)
    80020940:	75c2                	ld	a1,48(sp)
    80020942:	6566                	ld	a0,88(sp)
    80020944:	00000097          	auipc	ra,0x0
    80020948:	2e8080e7          	jalr	744(ra) # 80020c2c <_ZN9allocator11BuddySystem9blk_index17hcd9ce7a5032bb5d0E>
    8002094c:	85aa                	mv	a1,a0
    8002094e:	f42e                	sd	a1,40(sp)
    80020950:	f1aa                	sd	a0,224(sp)
    80020952:	a009                	j	80020954 <_ZN9allocator11BuddySystem9init_free17h25e98e7c902c4f06E+0x9c>
            free += self.init_free_pair(i, lbi);
    80020954:	7662                	ld	a2,56(sp)
    80020956:	75c2                	ld	a1,48(sp)
    80020958:	6566                	ld	a0,88(sp)
    8002095a:	00000097          	auipc	ra,0x0
    8002095e:	08a080e7          	jalr	138(ra) # 800209e4 <_ZN9allocator11BuddySystem14init_free_pair17h8a26a6b8be683eeaE>
    80020962:	f02a                	sd	a0,32(sp)
    80020964:	a009                	j	80020966 <_ZN9allocator11BuddySystem9init_free17h25e98e7c902c4f06E+0xae>
    80020966:	7502                	ld	a0,32(sp)
    80020968:	75c6                	ld	a1,112(sp)
    8002096a:	952e                	add	a0,a0,a1
    8002096c:	ec2a                	sd	a0,24(sp)
    8002096e:	02b56f63          	bltu	a0,a1,800209ac <.LBB8_20>
    80020972:	a009                	j	80020974 <_ZN9allocator11BuddySystem9init_free17h25e98e7c902c4f06E+0xbc>
    80020974:	6546                	ld	a0,80(sp)
    80020976:	7586                	ld	a1,96(sp)
    80020978:	6662                	ld	a2,24(sp)
    8002097a:	f8b2                	sd	a2,112(sp)
            if left < right {
    8002097c:	00b57c63          	bgeu	a0,a1,80020994 <_ZN9allocator11BuddySystem9init_free17h25e98e7c902c4f06E+0xdc>
    80020980:	a009                	j	80020982 <_ZN9allocator11BuddySystem9init_free17h25e98e7c902c4f06E+0xca>
                free += self.init_free_pair(i, rbi);
    80020982:	7622                	ld	a2,40(sp)
    80020984:	75c2                	ld	a1,48(sp)
    80020986:	6566                	ld	a0,88(sp)
    80020988:	00000097          	auipc	ra,0x0
    8002098c:	05c080e7          	jalr	92(ra) # 800209e4 <_ZN9allocator11BuddySystem14init_free_pair17h8a26a6b8be683eeaE>
    80020990:	e82a                	sd	a0,16(sp)
    80020992:	a011                	j	80020996 <_ZN9allocator11BuddySystem9init_free17h25e98e7c902c4f06E+0xde>
            if left < right {
    80020994:	a819                	j	800209aa <_ZN9allocator11BuddySystem9init_free17h25e98e7c902c4f06E+0xf2>
                free += self.init_free_pair(i, rbi);
    80020996:	6542                	ld	a0,16(sp)
    80020998:	75c6                	ld	a1,112(sp)
    8002099a:	952e                	add	a0,a0,a1
    8002099c:	e42a                	sd	a0,8(sp)
    8002099e:	02b56563          	bltu	a0,a1,800209c8 <.LBB8_22>
    800209a2:	a009                	j	800209a4 <_ZN9allocator11BuddySystem9init_free17h25e98e7c902c4f06E+0xec>
    800209a4:	6522                	ld	a0,8(sp)
    800209a6:	f8aa                	sd	a0,112(sp)
            if left < right {
    800209a8:	a009                	j	800209aa <_ZN9allocator11BuddySystem9init_free17h25e98e7c902c4f06E+0xf2>
        for i in 0..self.max_size() {
    800209aa:	bf81                	j	800208fa <_ZN9allocator11BuddySystem9init_free17h25e98e7c902c4f06E+0x42>

00000000800209ac <.LBB8_20>:
            free += self.init_free_pair(i, lbi);
    800209ac:	0000b517          	auipc	a0,0xb
    800209b0:	46450513          	addi	a0,a0,1124 # 8002be10 <str.2>

00000000800209b4 <.LBB8_21>:
    800209b4:	0000c617          	auipc	a2,0xc
    800209b8:	81c60613          	addi	a2,a2,-2020 # 8002c1d0 <.L__unnamed_40>
    800209bc:	45f1                	li	a1,28
    800209be:	00001097          	auipc	ra,0x1
    800209c2:	73e080e7          	jalr	1854(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

00000000800209c8 <.LBB8_22>:
                free += self.init_free_pair(i, rbi);
    800209c8:	0000b517          	auipc	a0,0xb
    800209cc:	44850513          	addi	a0,a0,1096 # 8002be10 <str.2>

00000000800209d0 <.LBB8_23>:
    800209d0:	0000c617          	auipc	a2,0xc
    800209d4:	81860613          	addi	a2,a2,-2024 # 8002c1e8 <.L__unnamed_41>
    800209d8:	45f1                	li	a1,28
    800209da:	00001097          	auipc	ra,0x1
    800209de:	722080e7          	jalr	1826(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN9allocator11BuddySystem14init_free_pair17h8a26a6b8be683eeaE:

00000000800209e4 <_ZN9allocator11BuddySystem14init_free_pair17h8a26a6b8be683eeaE>:

    /// Push a buddy into the list if it cannot be coalesce and upgrade.
    fn init_free_pair(&mut self, sizei: usize, bi: usize) -> usize {
    800209e4:	7135                	addi	sp,sp,-160
    800209e6:	ed06                	sd	ra,152(sp)
    800209e8:	e0b2                	sd	a2,64(sp)
    800209ea:	e4ae                	sd	a1,72(sp)
    800209ec:	e8aa                	sd	a0,80(sp)
    800209ee:	f4aa                	sd	a0,104(sp)
    800209f0:	f8ae                	sd	a1,112(sp)
    800209f2:	fcb2                	sd	a2,120(sp)
        let buddyi = if bi % 2 == 0 { bi+1 } else { bi-1 };
    800209f4:	00167513          	andi	a0,a2,1
    800209f8:	e909                	bnez	a0,80020a0a <_ZN9allocator11BuddySystem14init_free_pair17h8a26a6b8be683eeaE+0x26>
    800209fa:	a009                	j	800209fc <_ZN9allocator11BuddySystem14init_free_pair17h8a26a6b8be683eeaE+0x18>
    800209fc:	6586                	ld	a1,64(sp)
    800209fe:	00158513          	addi	a0,a1,1
    80020a02:	fc2a                	sd	a0,56(sp)
    80020a04:	0eb56f63          	bltu	a0,a1,80020b02 <.LBB9_24>
    80020a08:	a801                	j	80020a18 <_ZN9allocator11BuddySystem14init_free_pair17h8a26a6b8be683eeaE+0x34>
    80020a0a:	6506                	ld	a0,64(sp)
    80020a0c:	fff50593          	addi	a1,a0,-1
    80020a10:	f82e                	sd	a1,48(sp)
    80020a12:	0cb56963          	bltu	a0,a1,80020ae4 <.LBB9_22>
    80020a16:	a021                	j	80020a1e <_ZN9allocator11BuddySystem14init_free_pair17h8a26a6b8be683eeaE+0x3a>
    80020a18:	7562                	ld	a0,56(sp)
    80020a1a:	f0aa                	sd	a0,96(sp)
    80020a1c:	a021                	j	80020a24 <_ZN9allocator11BuddySystem14init_free_pair17h8a26a6b8be683eeaE+0x40>
    80020a1e:	7542                	ld	a0,48(sp)
    80020a20:	f0aa                	sd	a0,96(sp)
    80020a22:	a009                	j	80020a24 <_ZN9allocator11BuddySystem14init_free_pair17h8a26a6b8be683eeaE+0x40>
        let blk_addr_bi = self.blk_addr(sizei, bi);
    80020a24:	6606                	ld	a2,64(sp)
    80020a26:	65a6                	ld	a1,72(sp)
    80020a28:	6546                	ld	a0,80(sp)
    80020a2a:	00000097          	auipc	ra,0x0
    80020a2e:	3a0080e7          	jalr	928(ra) # 80020dca <_ZN9allocator11BuddySystem8blk_addr17h1858bf3dd7c08f3fE>
    80020a32:	85aa                	mv	a1,a0
    80020a34:	f42e                	sd	a1,40(sp)
    80020a36:	e12a                	sd	a0,128(sp)
    80020a38:	a009                	j	80020a3a <_ZN9allocator11BuddySystem14init_free_pair17h8a26a6b8be683eeaE+0x56>
        let blk_addr_buddyi = self.blk_addr(sizei, buddyi);
    80020a3a:	65a6                	ld	a1,72(sp)
    80020a3c:	6546                	ld	a0,80(sp)
    80020a3e:	7606                	ld	a2,96(sp)
    80020a40:	00000097          	auipc	ra,0x0
    80020a44:	38a080e7          	jalr	906(ra) # 80020dca <_ZN9allocator11BuddySystem8blk_addr17h1858bf3dd7c08f3fE>
    80020a48:	85aa                	mv	a1,a0
    80020a4a:	f02e                	sd	a1,32(sp)
    80020a4c:	e52a                	sd	a0,136(sp)
    80020a4e:	a009                	j	80020a50 <_ZN9allocator11BuddySystem14init_free_pair17h8a26a6b8be683eeaE+0x6c>
        
        let info = unsafe { self.get_info_mut(sizei) };
    80020a50:	65a6                	ld	a1,72(sp)
    80020a52:	6546                	ld	a0,80(sp)
    80020a54:	00000097          	auipc	ra,0x0
    80020a58:	0ca080e7          	jalr	202(ra) # 80020b1e <_ZN9allocator11BuddySystem12get_info_mut17h828847c6ad79cffaE>
    80020a5c:	ec2a                	sd	a0,24(sp)
    80020a5e:	a009                	j	80020a60 <_ZN9allocator11BuddySystem14init_free_pair17h8a26a6b8be683eeaE+0x7c>
    80020a60:	6586                	ld	a1,64(sp)
    80020a62:	6562                	ld	a0,24(sp)
    80020a64:	e92a                	sd	a0,144(sp)
        if info.is_alloc_set(bi) != info.is_alloc_set(buddyi) {
    80020a66:	00000097          	auipc	ra,0x0
    80020a6a:	642080e7          	jalr	1602(ra) # 800210a8 <_ZN9allocator9BuddyInfo12is_alloc_set17h74e6eb5491672d31E>
    80020a6e:	e82a                	sd	a0,16(sp)
    80020a70:	a009                	j	80020a72 <_ZN9allocator11BuddySystem14init_free_pair17h8a26a6b8be683eeaE+0x8e>
    80020a72:	6562                	ld	a0,24(sp)
    80020a74:	7586                	ld	a1,96(sp)
    80020a76:	00000097          	auipc	ra,0x0
    80020a7a:	632080e7          	jalr	1586(ra) # 800210a8 <_ZN9allocator9BuddyInfo12is_alloc_set17h74e6eb5491672d31E>
    80020a7e:	e42a                	sd	a0,8(sp)
    80020a80:	a009                	j	80020a82 <_ZN9allocator11BuddySystem14init_free_pair17h8a26a6b8be683eeaE+0x9e>
    80020a82:	6542                	ld	a0,16(sp)
    80020a84:	65a2                	ld	a1,8(sp)
    80020a86:	00b50b63          	beq	a0,a1,80020a9c <_ZN9allocator11BuddySystem14init_free_pair17h8a26a6b8be683eeaE+0xb8>
    80020a8a:	a009                	j	80020a8c <_ZN9allocator11BuddySystem14init_free_pair17h8a26a6b8be683eeaE+0xa8>
            // one buddy is free, the other is allocated
            unsafe {
                if info.is_alloc_set(bi) {
    80020a8c:	6586                	ld	a1,64(sp)
    80020a8e:	6562                	ld	a0,24(sp)
    80020a90:	00000097          	auipc	ra,0x0
    80020a94:	618080e7          	jalr	1560(ra) # 800210a8 <_ZN9allocator9BuddyInfo12is_alloc_set17h74e6eb5491672d31E>
    80020a98:	e02a                	sd	a0,0(sp)
    80020a9a:	a021                	j	80020aa2 <_ZN9allocator11BuddySystem14init_free_pair17h8a26a6b8be683eeaE+0xbe>
    80020a9c:	4501                	li	a0,0
                    info.free.push(blk_addr_bi);    
                }
            }
            self.blk_size(sizei)
        } else {
            0
    80020a9e:	ecaa                	sd	a0,88(sp)
        if info.is_alloc_set(bi) != info.is_alloc_set(buddyi) {
    80020aa0:	a835                	j	80020adc <_ZN9allocator11BuddySystem14init_free_pair17h8a26a6b8be683eeaE+0xf8>
    80020aa2:	6502                	ld	a0,0(sp)
    80020aa4:	4581                	li	a1,0
                if info.is_alloc_set(bi) {
    80020aa6:	00b50a63          	beq	a0,a1,80020aba <_ZN9allocator11BuddySystem14init_free_pair17h8a26a6b8be683eeaE+0xd6>
    80020aaa:	a009                	j	80020aac <_ZN9allocator11BuddySystem14init_free_pair17h8a26a6b8be683eeaE+0xc8>
                    info.free.push(blk_addr_buddyi);
    80020aac:	7582                	ld	a1,32(sp)
    80020aae:	6562                	ld	a0,24(sp)
    80020ab0:	00001097          	auipc	ra,0x1
    80020ab4:	9a6080e7          	jalr	-1626(ra) # 80021456 <_ZN9allocator4list4List4push17h00016bee64ea1dbdE>
    80020ab8:	a801                	j	80020ac8 <_ZN9allocator11BuddySystem14init_free_pair17h8a26a6b8be683eeaE+0xe4>
                    info.free.push(blk_addr_bi);    
    80020aba:	75a2                	ld	a1,40(sp)
    80020abc:	6562                	ld	a0,24(sp)
    80020abe:	00001097          	auipc	ra,0x1
    80020ac2:	998080e7          	jalr	-1640(ra) # 80021456 <_ZN9allocator4list4List4push17h00016bee64ea1dbdE>
    80020ac6:	a011                	j	80020aca <_ZN9allocator11BuddySystem14init_free_pair17h8a26a6b8be683eeaE+0xe6>
                if info.is_alloc_set(bi) {
    80020ac8:	a011                	j	80020acc <_ZN9allocator11BuddySystem14init_free_pair17h8a26a6b8be683eeaE+0xe8>
    80020aca:	a009                	j	80020acc <_ZN9allocator11BuddySystem14init_free_pair17h8a26a6b8be683eeaE+0xe8>
            self.blk_size(sizei)
    80020acc:	65a6                	ld	a1,72(sp)
    80020ace:	6546                	ld	a0,80(sp)
    80020ad0:	00000097          	auipc	ra,0x0
    80020ad4:	37c080e7          	jalr	892(ra) # 80020e4c <_ZN9allocator11BuddySystem8blk_size17h8693939904cd2981E>
    80020ad8:	ecaa                	sd	a0,88(sp)
    80020ada:	a009                	j	80020adc <_ZN9allocator11BuddySystem14init_free_pair17h8a26a6b8be683eeaE+0xf8>
        }
    }
    80020adc:	6566                	ld	a0,88(sp)
    80020ade:	60ea                	ld	ra,152(sp)
    80020ae0:	610d                	addi	sp,sp,160
    80020ae2:	8082                	ret

0000000080020ae4 <.LBB9_22>:
        let buddyi = if bi % 2 == 0 { bi+1 } else { bi-1 };
    80020ae4:	0000b517          	auipc	a0,0xb
    80020ae8:	27c50513          	addi	a0,a0,636 # 8002bd60 <str.0>

0000000080020aec <.LBB9_23>:
    80020aec:	0000b617          	auipc	a2,0xb
    80020af0:	71460613          	addi	a2,a2,1812 # 8002c200 <.L__unnamed_42>
    80020af4:	02100593          	li	a1,33
    80020af8:	00001097          	auipc	ra,0x1
    80020afc:	604080e7          	jalr	1540(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080020b02 <.LBB9_24>:
    80020b02:	0000b517          	auipc	a0,0xb
    80020b06:	30e50513          	addi	a0,a0,782 # 8002be10 <str.2>

0000000080020b0a <.LBB9_25>:
    80020b0a:	0000b617          	auipc	a2,0xb
    80020b0e:	70e60613          	addi	a2,a2,1806 # 8002c218 <.L__unnamed_43>
    80020b12:	45f1                	li	a1,28
    80020b14:	00001097          	auipc	ra,0x1
    80020b18:	5e8080e7          	jalr	1512(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN9allocator11BuddySystem12get_info_mut17h828847c6ad79cffaE:

0000000080020b1e <_ZN9allocator11BuddySystem12get_info_mut17h828847c6ad79cffaE>:

    /// Get buddy info at certain index.
    ///
    /// SAFETY: must be called after the initialization of infos field.
    unsafe fn get_info_mut(&mut self, index: usize) -> &mut BuddyInfo {
    80020b1e:	711d                	addi	sp,sp,-96
    80020b20:	ec86                	sd	ra,88(sp)
    80020b22:	f02e                	sd	a1,32(sp)
    80020b24:	f82a                	sd	a0,48(sp)
    80020b26:	fc2e                	sd	a1,56(sp)
        let info_slice_ptr = *self.infos.as_ptr();
    80020b28:	02850513          	addi	a0,a0,40
    80020b2c:	f42a                	sd	a0,40(sp)
    80020b2e:	e8aa                	sd	a0,80(sp)
    80020b30:	a009                	j	80020b32 <_ZN9allocator11BuddySystem12get_info_mut17h828847c6ad79cffaE+0x14>
    80020b32:	7602                	ld	a2,32(sp)
    80020b34:	75a2                	ld	a1,40(sp)
    80020b36:	6188                	ld	a0,0(a1)
    80020b38:	658c                	ld	a1,8(a1)
    80020b3a:	e0aa                	sd	a0,64(sp)
    80020b3c:	e4ae                	sd	a1,72(sp)
        info_slice_ptr.get_unchecked_mut(index).as_mut().unwrap()
    80020b3e:	00001097          	auipc	ra,0x1
    80020b42:	f68080e7          	jalr	-152(ra) # 80021aa6 <_ZN4core3ptr7mut_ptr41_$LT$impl$u20$$BP$mut$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h83deb5daf75ed8d6E>
    80020b46:	ec2a                	sd	a0,24(sp)
    80020b48:	a009                	j	80020b4a <_ZN9allocator11BuddySystem12get_info_mut17h828847c6ad79cffaE+0x2c>
    80020b4a:	6562                	ld	a0,24(sp)
    80020b4c:	00001097          	auipc	ra,0x1
    80020b50:	ee0080e7          	jalr	-288(ra) # 80021a2c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h46e365b62bffa500E>
    80020b54:	e82a                	sd	a0,16(sp)
    80020b56:	a009                	j	80020b58 <_ZN9allocator11BuddySystem12get_info_mut17h828847c6ad79cffaE+0x3a>
    80020b58:	6542                	ld	a0,16(sp)

0000000080020b5a <.LBB10_5>:
    80020b5a:	0000b597          	auipc	a1,0xb
    80020b5e:	6d658593          	addi	a1,a1,1750 # 8002c230 <.L__unnamed_44>
    80020b62:	00001097          	auipc	ra,0x1
    80020b66:	a60080e7          	jalr	-1440(ra) # 800215c2 <_ZN4core6option15Option$LT$T$GT$6unwrap17hda397585f3de5667E>
    80020b6a:	e42a                	sd	a0,8(sp)
    80020b6c:	a009                	j	80020b6e <.LBB10_5+0x14>
    }
    80020b6e:	6522                	ld	a0,8(sp)
    80020b70:	60e6                	ld	ra,88(sp)
    80020b72:	6125                	addi	sp,sp,96
    80020b74:	8082                	ret

Disassembly of section .text._ZN9allocator11BuddySystem8max_size17hef7a09e8b41b3266E:

0000000080020b76 <_ZN9allocator11BuddySystem8max_size17hef7a09e8b41b3266E>:

    /// The largest block size.
    /// Also the last index into the buddy info array.
    #[inline]
    fn max_size(&self) -> usize {
    80020b76:	1141                	addi	sp,sp,-16
    80020b78:	e42a                	sd	a0,8(sp)
        self.nsizes - 1
    80020b7a:	6908                	ld	a0,16(a0)
    80020b7c:	fff50593          	addi	a1,a0,-1
    80020b80:	e02e                	sd	a1,0(sp)
    80020b82:	00b56663          	bltu	a0,a1,80020b8e <.LBB11_3>
    80020b86:	a009                	j	80020b88 <_ZN9allocator11BuddySystem8max_size17hef7a09e8b41b3266E+0x12>
    }
    80020b88:	6502                	ld	a0,0(sp)
    80020b8a:	0141                	addi	sp,sp,16
    80020b8c:	8082                	ret

0000000080020b8e <.LBB11_3>:
        self.nsizes - 1
    80020b8e:	0000b517          	auipc	a0,0xb
    80020b92:	1d250513          	addi	a0,a0,466 # 8002bd60 <str.0>

0000000080020b96 <.LBB11_4>:
    80020b96:	0000b617          	auipc	a2,0xb
    80020b9a:	6b260613          	addi	a2,a2,1714 # 8002c248 <.L__unnamed_45>
    80020b9e:	02100593          	li	a1,33
    80020ba2:	00001097          	auipc	ra,0x1
    80020ba6:	55a080e7          	jalr	1370(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN9allocator11BuddySystem5n_blk17hdff1460b10f7c769E:

0000000080020bac <_ZN9allocator11BuddySystem5n_blk17hdff1460b10f7c769E>:

    /// Number of block at size k, based on the total managed memory.
    #[inline]
    fn n_blk(&self, k: usize) -> usize {
    80020bac:	7139                	addi	sp,sp,-64
    80020bae:	fc06                	sd	ra,56(sp)
    80020bb0:	ec2e                	sd	a1,24(sp)
    80020bb2:	f42a                	sd	a0,40(sp)
    80020bb4:	f82e                	sd	a1,48(sp)
        1 << (self.max_size() - k)
    80020bb6:	00000097          	auipc	ra,0x0
    80020bba:	fc0080e7          	jalr	-64(ra) # 80020b76 <_ZN9allocator11BuddySystem8max_size17hef7a09e8b41b3266E>
    80020bbe:	f02a                	sd	a0,32(sp)
    80020bc0:	a009                	j	80020bc2 <_ZN9allocator11BuddySystem5n_blk17hdff1460b10f7c769E+0x16>
    80020bc2:	7502                	ld	a0,32(sp)
    80020bc4:	65e2                	ld	a1,24(sp)
    80020bc6:	40b505b3          	sub	a1,a0,a1
    80020bca:	e82e                	sd	a1,16(sp)
    80020bcc:	02b56263          	bltu	a0,a1,80020bf0 <.LBB12_6>
    80020bd0:	a009                	j	80020bd2 <_ZN9allocator11BuddySystem5n_blk17hdff1460b10f7c769E+0x26>
    80020bd2:	6642                	ld	a2,16(sp)
    80020bd4:	fc067513          	andi	a0,a2,-64
    80020bd8:	4585                	li	a1,1
    80020bda:	00c595b3          	sll	a1,a1,a2
    80020bde:	e42e                	sd	a1,8(sp)
    80020be0:	4581                	li	a1,0
    80020be2:	02b51663          	bne	a0,a1,80020c0e <.LBB12_8>
    80020be6:	a009                	j	80020be8 <_ZN9allocator11BuddySystem5n_blk17hdff1460b10f7c769E+0x3c>
    }
    80020be8:	6522                	ld	a0,8(sp)
    80020bea:	70e2                	ld	ra,56(sp)
    80020bec:	6121                	addi	sp,sp,64
    80020bee:	8082                	ret

0000000080020bf0 <.LBB12_6>:
        1 << (self.max_size() - k)
    80020bf0:	0000b517          	auipc	a0,0xb
    80020bf4:	17050513          	addi	a0,a0,368 # 8002bd60 <str.0>

0000000080020bf8 <.LBB12_7>:
    80020bf8:	0000b617          	auipc	a2,0xb
    80020bfc:	66860613          	addi	a2,a2,1640 # 8002c260 <.L__unnamed_46>
    80020c00:	02100593          	li	a1,33
    80020c04:	00001097          	auipc	ra,0x1
    80020c08:	4f8080e7          	jalr	1272(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080020c0e <.LBB12_8>:
    80020c0e:	0000b517          	auipc	a0,0xb
    80020c12:	68250513          	addi	a0,a0,1666 # 8002c290 <str.4>

0000000080020c16 <.LBB12_9>:
    80020c16:	0000b617          	auipc	a2,0xb
    80020c1a:	66260613          	addi	a2,a2,1634 # 8002c278 <.L__unnamed_47>
    80020c1e:	02300593          	li	a1,35
    80020c22:	00001097          	auipc	ra,0x1
    80020c26:	4da080e7          	jalr	1242(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN9allocator11BuddySystem9blk_index17hcd9ce7a5032bb5d0E:

0000000080020c2c <_ZN9allocator11BuddySystem9blk_index17hcd9ce7a5032bb5d0E>:

    fn blk_index(&self, k: usize, addr: usize) -> usize {
    80020c2c:	7139                	addi	sp,sp,-64
    80020c2e:	fc06                	sd	ra,56(sp)
    80020c30:	e42e                	sd	a1,8(sp)
    80020c32:	e82a                	sd	a0,16(sp)
    80020c34:	f02a                	sd	a0,32(sp)
    80020c36:	f42e                	sd	a1,40(sp)
    80020c38:	f832                	sd	a2,48(sp)
        (addr - self.base) / self.blk_size(k)
    80020c3a:	6108                	ld	a0,0(a0)
    80020c3c:	40a60533          	sub	a0,a2,a0
    80020c40:	ec2a                	sd	a0,24(sp)
    80020c42:	02a66763          	bltu	a2,a0,80020c70 <.LBB13_6>
    80020c46:	a009                	j	80020c48 <_ZN9allocator11BuddySystem9blk_index17hcd9ce7a5032bb5d0E+0x1c>
    80020c48:	65a2                	ld	a1,8(sp)
    80020c4a:	6542                	ld	a0,16(sp)
    80020c4c:	00000097          	auipc	ra,0x0
    80020c50:	200080e7          	jalr	512(ra) # 80020e4c <_ZN9allocator11BuddySystem8blk_size17h8693939904cd2981E>
    80020c54:	e02a                	sd	a0,0(sp)
    80020c56:	a009                	j	80020c58 <_ZN9allocator11BuddySystem9blk_index17hcd9ce7a5032bb5d0E+0x2c>
    80020c58:	6502                	ld	a0,0(sp)
    80020c5a:	4581                	li	a1,0
    80020c5c:	02b50963          	beq	a0,a1,80020c8e <.LBB13_8>
    80020c60:	a009                	j	80020c62 <_ZN9allocator11BuddySystem9blk_index17hcd9ce7a5032bb5d0E+0x36>
    80020c62:	6562                	ld	a0,24(sp)
    80020c64:	6582                	ld	a1,0(sp)
    80020c66:	02b55533          	divu	a0,a0,a1
    }
    80020c6a:	70e2                	ld	ra,56(sp)
    80020c6c:	6121                	addi	sp,sp,64
    80020c6e:	8082                	ret

0000000080020c70 <.LBB13_6>:
        (addr - self.base) / self.blk_size(k)
    80020c70:	0000b517          	auipc	a0,0xb
    80020c74:	0f050513          	addi	a0,a0,240 # 8002bd60 <str.0>

0000000080020c78 <.LBB13_7>:
    80020c78:	0000b617          	auipc	a2,0xb
    80020c7c:	64060613          	addi	a2,a2,1600 # 8002c2b8 <.L__unnamed_48>
    80020c80:	02100593          	li	a1,33
    80020c84:	00001097          	auipc	ra,0x1
    80020c88:	478080e7          	jalr	1144(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080020c8e <.LBB13_8>:
    80020c8e:	0000b517          	auipc	a0,0xb
    80020c92:	14250513          	addi	a0,a0,322 # 8002bdd0 <str.1>

0000000080020c96 <.LBB13_9>:
    80020c96:	0000b617          	auipc	a2,0xb
    80020c9a:	62260613          	addi	a2,a2,1570 # 8002c2b8 <.L__unnamed_48>
    80020c9e:	45e5                	li	a1,25
    80020ca0:	00001097          	auipc	ra,0x1
    80020ca4:	45c080e7          	jalr	1116(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN9allocator11BuddySystem14blk_index_next17hac914ee1adc8ccddE:

0000000080020caa <_ZN9allocator11BuddySystem14blk_index_next17hac914ee1adc8ccddE>:

    fn blk_index_next(&self, k: usize, addr: usize) -> usize {
    80020caa:	711d                	addi	sp,sp,-96
    80020cac:	ec86                	sd	ra,88(sp)
    80020cae:	ec32                	sd	a2,24(sp)
    80020cb0:	f02a                	sd	a0,32(sp)
    80020cb2:	fc2a                	sd	a0,56(sp)
    80020cb4:	e0ae                	sd	a1,64(sp)
    80020cb6:	e4b2                	sd	a2,72(sp)
        let bs = self.blk_size(k);
    80020cb8:	00000097          	auipc	ra,0x0
    80020cbc:	194080e7          	jalr	404(ra) # 80020e4c <_ZN9allocator11BuddySystem8blk_size17h8693939904cd2981E>
    80020cc0:	85aa                	mv	a1,a0
    80020cc2:	f42e                	sd	a1,40(sp)
    80020cc4:	e8aa                	sd	a0,80(sp)
    80020cc6:	a009                	j	80020cc8 <_ZN9allocator11BuddySystem14blk_index_next17hac914ee1adc8ccddE+0x1e>
        let mut i = (addr - self.base) / bs;
    80020cc8:	6562                	ld	a0,24(sp)
    80020cca:	7582                	ld	a1,32(sp)
    80020ccc:	618c                	ld	a1,0(a1)
    80020cce:	40b505b3          	sub	a1,a0,a1
    80020cd2:	e82e                	sd	a1,16(sp)
    80020cd4:	06b56263          	bltu	a0,a1,80020d38 <.LBB14_15>
    80020cd8:	a009                	j	80020cda <_ZN9allocator11BuddySystem14blk_index_next17hac914ee1adc8ccddE+0x30>
    80020cda:	7522                	ld	a0,40(sp)
    80020cdc:	4581                	li	a1,0
    80020cde:	06b50c63          	beq	a0,a1,80020d56 <.LBB14_17>
    80020ce2:	a009                	j	80020ce4 <_ZN9allocator11BuddySystem14blk_index_next17hac914ee1adc8ccddE+0x3a>
    80020ce4:	6562                	ld	a0,24(sp)
    80020ce6:	7582                	ld	a1,32(sp)
    80020ce8:	6642                	ld	a2,16(sp)
    80020cea:	76a2                	ld	a3,40(sp)
    80020cec:	02d65633          	divu	a2,a2,a3
    80020cf0:	f832                	sd	a2,48(sp)
        if (addr - self.base) % bs > 0 {
    80020cf2:	618c                	ld	a1,0(a1)
    80020cf4:	40b505b3          	sub	a1,a0,a1
    80020cf8:	e42e                	sd	a1,8(sp)
    80020cfa:	06b56c63          	bltu	a0,a1,80020d72 <.LBB14_19>
    80020cfe:	a009                	j	80020d00 <_ZN9allocator11BuddySystem14blk_index_next17hac914ee1adc8ccddE+0x56>
    80020d00:	7522                	ld	a0,40(sp)
    80020d02:	4581                	li	a1,0
    80020d04:	08b50663          	beq	a0,a1,80020d90 <.LBB14_21>
    80020d08:	a009                	j	80020d0a <_ZN9allocator11BuddySystem14blk_index_next17hac914ee1adc8ccddE+0x60>
    80020d0a:	6522                	ld	a0,8(sp)
    80020d0c:	75a2                	ld	a1,40(sp)
    80020d0e:	02b57533          	remu	a0,a0,a1
    80020d12:	4581                	li	a1,0
    80020d14:	00b50a63          	beq	a0,a1,80020d28 <_ZN9allocator11BuddySystem14blk_index_next17hac914ee1adc8ccddE+0x7e>
    80020d18:	a009                	j	80020d1a <_ZN9allocator11BuddySystem14blk_index_next17hac914ee1adc8ccddE+0x70>
            i += 1;
    80020d1a:	75c2                	ld	a1,48(sp)
    80020d1c:	00158513          	addi	a0,a1,1
    80020d20:	e02a                	sd	a0,0(sp)
    80020d22:	08b56663          	bltu	a0,a1,80020dae <.LBB14_23>
    80020d26:	a011                	j	80020d2a <_ZN9allocator11BuddySystem14blk_index_next17hac914ee1adc8ccddE+0x80>
        if (addr - self.base) % bs > 0 {
    80020d28:	a021                	j	80020d30 <_ZN9allocator11BuddySystem14blk_index_next17hac914ee1adc8ccddE+0x86>
            i += 1;
    80020d2a:	6502                	ld	a0,0(sp)
    80020d2c:	f82a                	sd	a0,48(sp)
        if (addr - self.base) % bs > 0 {
    80020d2e:	a009                	j	80020d30 <_ZN9allocator11BuddySystem14blk_index_next17hac914ee1adc8ccddE+0x86>
        }
        i
    }
    80020d30:	7542                	ld	a0,48(sp)
    80020d32:	60e6                	ld	ra,88(sp)
    80020d34:	6125                	addi	sp,sp,96
    80020d36:	8082                	ret

0000000080020d38 <.LBB14_15>:
        let mut i = (addr - self.base) / bs;
    80020d38:	0000b517          	auipc	a0,0xb
    80020d3c:	02850513          	addi	a0,a0,40 # 8002bd60 <str.0>

0000000080020d40 <.LBB14_16>:
    80020d40:	0000b617          	auipc	a2,0xb
    80020d44:	59060613          	addi	a2,a2,1424 # 8002c2d0 <.L__unnamed_49>
    80020d48:	02100593          	li	a1,33
    80020d4c:	00001097          	auipc	ra,0x1
    80020d50:	3b0080e7          	jalr	944(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080020d56 <.LBB14_17>:
    80020d56:	0000b517          	auipc	a0,0xb
    80020d5a:	07a50513          	addi	a0,a0,122 # 8002bdd0 <str.1>

0000000080020d5e <.LBB14_18>:
    80020d5e:	0000b617          	auipc	a2,0xb
    80020d62:	57260613          	addi	a2,a2,1394 # 8002c2d0 <.L__unnamed_49>
    80020d66:	45e5                	li	a1,25
    80020d68:	00001097          	auipc	ra,0x1
    80020d6c:	394080e7          	jalr	916(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080020d72 <.LBB14_19>:
        if (addr - self.base) % bs > 0 {
    80020d72:	0000b517          	auipc	a0,0xb
    80020d76:	fee50513          	addi	a0,a0,-18 # 8002bd60 <str.0>

0000000080020d7a <.LBB14_20>:
    80020d7a:	0000b617          	auipc	a2,0xb
    80020d7e:	56e60613          	addi	a2,a2,1390 # 8002c2e8 <.L__unnamed_50>
    80020d82:	02100593          	li	a1,33
    80020d86:	00001097          	auipc	ra,0x1
    80020d8a:	376080e7          	jalr	886(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080020d90 <.LBB14_21>:
    80020d90:	0000b517          	auipc	a0,0xb
    80020d94:	3a050513          	addi	a0,a0,928 # 8002c130 <str.3>

0000000080020d98 <.LBB14_22>:
    80020d98:	0000b617          	auipc	a2,0xb
    80020d9c:	55060613          	addi	a2,a2,1360 # 8002c2e8 <.L__unnamed_50>
    80020da0:	03900593          	li	a1,57
    80020da4:	00001097          	auipc	ra,0x1
    80020da8:	358080e7          	jalr	856(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080020dae <.LBB14_23>:
            i += 1;
    80020dae:	0000b517          	auipc	a0,0xb
    80020db2:	06250513          	addi	a0,a0,98 # 8002be10 <str.2>

0000000080020db6 <.LBB14_24>:
    80020db6:	0000b617          	auipc	a2,0xb
    80020dba:	54a60613          	addi	a2,a2,1354 # 8002c300 <.L__unnamed_51>
    80020dbe:	45f1                	li	a1,28
    80020dc0:	00001097          	auipc	ra,0x1
    80020dc4:	33c080e7          	jalr	828(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN9allocator11BuddySystem8blk_addr17h1858bf3dd7c08f3fE:

0000000080020dca <_ZN9allocator11BuddySystem8blk_addr17h1858bf3dd7c08f3fE>:

    /// Receive size k and block index bi.
    /// Return the block's raw addr at this buddy system.
    fn blk_addr(&self, k: usize, bi: usize) -> usize {
    80020dca:	715d                	addi	sp,sp,-80
    80020dcc:	e486                	sd	ra,72(sp)
    80020dce:	ec32                	sd	a2,24(sp)
    80020dd0:	f82a                	sd	a0,48(sp)
    80020dd2:	fc2e                	sd	a1,56(sp)
    80020dd4:	e0b2                	sd	a2,64(sp)
        self.base + (bi * self.blk_size(k))
    80020dd6:	6110                	ld	a2,0(a0)
    80020dd8:	f032                	sd	a2,32(sp)
    80020dda:	00000097          	auipc	ra,0x0
    80020dde:	072080e7          	jalr	114(ra) # 80020e4c <_ZN9allocator11BuddySystem8blk_size17h8693939904cd2981E>
    80020de2:	f42a                	sd	a0,40(sp)
    80020de4:	a009                	j	80020de6 <_ZN9allocator11BuddySystem8blk_addr17h1858bf3dd7c08f3fE+0x1c>
    80020de6:	6562                	ld	a0,24(sp)
    80020de8:	75a2                	ld	a1,40(sp)
    80020dea:	02b50633          	mul	a2,a0,a1
    80020dee:	e832                	sd	a2,16(sp)
    80020df0:	02b53533          	mulhu	a0,a0,a1
    80020df4:	4581                	li	a1,0
    80020df6:	00b51e63          	bne	a0,a1,80020e12 <.LBB15_6>
    80020dfa:	a009                	j	80020dfc <_ZN9allocator11BuddySystem8blk_addr17h1858bf3dd7c08f3fE+0x32>
    80020dfc:	7582                	ld	a1,32(sp)
    80020dfe:	6542                	ld	a0,16(sp)
    80020e00:	952e                	add	a0,a0,a1
    80020e02:	e42a                	sd	a0,8(sp)
    80020e04:	02b56663          	bltu	a0,a1,80020e30 <.LBB15_8>
    80020e08:	a009                	j	80020e0a <_ZN9allocator11BuddySystem8blk_addr17h1858bf3dd7c08f3fE+0x40>
    }
    80020e0a:	6522                	ld	a0,8(sp)
    80020e0c:	60a6                	ld	ra,72(sp)
    80020e0e:	6161                	addi	sp,sp,80
    80020e10:	8082                	ret

0000000080020e12 <.LBB15_6>:
        self.base + (bi * self.blk_size(k))
    80020e12:	0000b517          	auipc	a0,0xb
    80020e16:	51e50513          	addi	a0,a0,1310 # 8002c330 <str.5>

0000000080020e1a <.LBB15_7>:
    80020e1a:	0000b617          	auipc	a2,0xb
    80020e1e:	4fe60613          	addi	a2,a2,1278 # 8002c318 <.L__unnamed_52>
    80020e22:	02100593          	li	a1,33
    80020e26:	00001097          	auipc	ra,0x1
    80020e2a:	2d6080e7          	jalr	726(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080020e30 <.LBB15_8>:
    80020e30:	0000b517          	auipc	a0,0xb
    80020e34:	fe050513          	addi	a0,a0,-32 # 8002be10 <str.2>

0000000080020e38 <.LBB15_9>:
    80020e38:	0000b617          	auipc	a2,0xb
    80020e3c:	52060613          	addi	a2,a2,1312 # 8002c358 <.L__unnamed_53>
    80020e40:	45f1                	li	a1,28
    80020e42:	00001097          	auipc	ra,0x1
    80020e46:	2ba080e7          	jalr	698(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN9allocator11BuddySystem8blk_size17h8693939904cd2981E:

0000000080020e4c <_ZN9allocator11BuddySystem8blk_size17h8693939904cd2981E>:

    #[inline]
    fn blk_size(&self, k: usize) -> usize {
    80020e4c:	7179                	addi	sp,sp,-48
    80020e4e:	862e                	mv	a2,a1
    80020e50:	e82a                	sd	a0,16(sp)
    80020e52:	f02a                	sd	a0,32(sp)
    80020e54:	f432                	sd	a2,40(sp)
        (1 << k) * self.leaf_size
    80020e56:	fc067513          	andi	a0,a2,-64
    80020e5a:	4585                	li	a1,1
    80020e5c:	00c595b3          	sll	a1,a1,a2
    80020e60:	ec2e                	sd	a1,24(sp)
    80020e62:	4581                	li	a1,0
    80020e64:	02b51263          	bne	a0,a1,80020e88 <.LBB16_5>
    80020e68:	a009                	j	80020e6a <_ZN9allocator11BuddySystem8blk_size17h8693939904cd2981E+0x1e>
    80020e6a:	6562                	ld	a0,24(sp)
    80020e6c:	65c2                	ld	a1,16(sp)
    80020e6e:	6d8c                	ld	a1,24(a1)
    80020e70:	02b50633          	mul	a2,a0,a1
    80020e74:	e432                	sd	a2,8(sp)
    80020e76:	02b53533          	mulhu	a0,a0,a1
    80020e7a:	4581                	li	a1,0
    80020e7c:	02b51563          	bne	a0,a1,80020ea6 <.LBB16_7>
    80020e80:	a009                	j	80020e82 <_ZN9allocator11BuddySystem8blk_size17h8693939904cd2981E+0x36>
    }
    80020e82:	6522                	ld	a0,8(sp)
    80020e84:	6145                	addi	sp,sp,48
    80020e86:	8082                	ret

0000000080020e88 <.LBB16_5>:
        (1 << k) * self.leaf_size
    80020e88:	0000b517          	auipc	a0,0xb
    80020e8c:	40850513          	addi	a0,a0,1032 # 8002c290 <str.4>

0000000080020e90 <.LBB16_6>:
    80020e90:	0000b617          	auipc	a2,0xb
    80020e94:	4e060613          	addi	a2,a2,1248 # 8002c370 <.L__unnamed_54>
    80020e98:	02300593          	li	a1,35
    80020e9c:	00001097          	auipc	ra,0x1
    80020ea0:	260080e7          	jalr	608(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080020ea6 <.LBB16_7>:
    80020ea6:	0000b517          	auipc	a0,0xb
    80020eaa:	48a50513          	addi	a0,a0,1162 # 8002c330 <str.5>

0000000080020eae <.LBB16_8>:
    80020eae:	0000b617          	auipc	a2,0xb
    80020eb2:	4c260613          	addi	a2,a2,1218 # 8002c370 <.L__unnamed_54>
    80020eb6:	02100593          	li	a1,33
    80020eba:	00001097          	auipc	ra,0x1
    80020ebe:	242080e7          	jalr	578(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN9allocator9BuddyInfo9get_alloc17hc8e52f4241734faeE:

0000000080020ec4 <_ZN9allocator9BuddyInfo9get_alloc17hc8e52f4241734faeE>:
    split: MaybeUninit<*mut [u8]>,      // tell if a block is split into smaller size
}

impl BuddyInfo {
    /// SAFETY: must be called after the initialization of alloc field.
    unsafe fn get_alloc(&self, index: usize) -> &u8 {
    80020ec4:	711d                	addi	sp,sp,-96
    80020ec6:	ec86                	sd	ra,88(sp)
    80020ec8:	f02e                	sd	a1,32(sp)
    80020eca:	f82a                	sd	a0,48(sp)
    80020ecc:	fc2e                	sd	a1,56(sp)
        let alloc_slice_ptr = *self.alloc.as_ptr() as *const [u8];
    80020ece:	0541                	addi	a0,a0,16
    80020ed0:	f42a                	sd	a0,40(sp)
    80020ed2:	e8aa                	sd	a0,80(sp)
    80020ed4:	a009                	j	80020ed6 <_ZN9allocator9BuddyInfo9get_alloc17hc8e52f4241734faeE+0x12>
    80020ed6:	7602                	ld	a2,32(sp)
    80020ed8:	75a2                	ld	a1,40(sp)
    80020eda:	6188                	ld	a0,0(a1)
    80020edc:	658c                	ld	a1,8(a1)
    80020ede:	e0aa                	sd	a0,64(sp)
    80020ee0:	e4ae                	sd	a1,72(sp)
        alloc_slice_ptr.get_unchecked(index).as_ref().unwrap()
    80020ee2:	fffff097          	auipc	ra,0xfffff
    80020ee6:	816080e7          	jalr	-2026(ra) # 8001f6f8 <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$13get_unchecked17h149838d98ef59845E>
    80020eea:	ec2a                	sd	a0,24(sp)
    80020eec:	a009                	j	80020eee <_ZN9allocator9BuddyInfo9get_alloc17hc8e52f4241734faeE+0x2a>
    80020eee:	6562                	ld	a0,24(sp)
    80020ef0:	ffffe097          	auipc	ra,0xffffe
    80020ef4:	7a0080e7          	jalr	1952(ra) # 8001f690 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6as_ref17h1afc8f6daddbc052E>
    80020ef8:	e82a                	sd	a0,16(sp)
    80020efa:	a009                	j	80020efc <_ZN9allocator9BuddyInfo9get_alloc17hc8e52f4241734faeE+0x38>
    80020efc:	6542                	ld	a0,16(sp)

0000000080020efe <.LBB17_5>:
    80020efe:	0000b597          	auipc	a1,0xb
    80020f02:	48a58593          	addi	a1,a1,1162 # 8002c388 <.L__unnamed_55>
    80020f06:	00000097          	auipc	ra,0x0
    80020f0a:	6f2080e7          	jalr	1778(ra) # 800215f8 <_ZN4core6option15Option$LT$T$GT$6unwrap17hf33e22fb94afcd9bE>
    80020f0e:	e42a                	sd	a0,8(sp)
    80020f10:	a009                	j	80020f12 <.LBB17_5+0x14>
    }
    80020f12:	6522                	ld	a0,8(sp)
    80020f14:	60e6                	ld	ra,88(sp)
    80020f16:	6125                	addi	sp,sp,96
    80020f18:	8082                	ret

Disassembly of section .text._ZN9allocator9BuddyInfo13get_alloc_mut17he7a2a5362df5d388E:

0000000080020f1a <_ZN9allocator9BuddyInfo13get_alloc_mut17he7a2a5362df5d388E>:

    /// SAFETY: must be called after the initialization of alloc field.
    unsafe fn get_alloc_mut(&mut self, index: usize) -> &mut u8 {
    80020f1a:	711d                	addi	sp,sp,-96
    80020f1c:	ec86                	sd	ra,88(sp)
    80020f1e:	f02e                	sd	a1,32(sp)
    80020f20:	f82a                	sd	a0,48(sp)
    80020f22:	fc2e                	sd	a1,56(sp)
        let alloc_slice_ptr = *self.alloc.as_ptr();
    80020f24:	0541                	addi	a0,a0,16
    80020f26:	f42a                	sd	a0,40(sp)
    80020f28:	e8aa                	sd	a0,80(sp)
    80020f2a:	a009                	j	80020f2c <_ZN9allocator9BuddyInfo13get_alloc_mut17he7a2a5362df5d388E+0x12>
    80020f2c:	7602                	ld	a2,32(sp)
    80020f2e:	75a2                	ld	a1,40(sp)
    80020f30:	6188                	ld	a0,0(a1)
    80020f32:	658c                	ld	a1,8(a1)
    80020f34:	e0aa                	sd	a0,64(sp)
    80020f36:	e4ae                	sd	a1,72(sp)
        alloc_slice_ptr.get_unchecked_mut(index).as_mut().unwrap()
    80020f38:	ffffe097          	auipc	ra,0xffffe
    80020f3c:	6fc080e7          	jalr	1788(ra) # 8001f634 <_ZN4core3ptr7mut_ptr41_$LT$impl$u20$$BP$mut$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h1fb5de3e2413636cE>
    80020f40:	ec2a                	sd	a0,24(sp)
    80020f42:	a009                	j	80020f44 <_ZN9allocator9BuddyInfo13get_alloc_mut17he7a2a5362df5d388E+0x2a>
    80020f44:	6562                	ld	a0,24(sp)
    80020f46:	ffffe097          	auipc	ra,0xffffe
    80020f4a:	67c080e7          	jalr	1660(ra) # 8001f5c2 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17he7a20e0a0a2f5b66E>
    80020f4e:	e82a                	sd	a0,16(sp)
    80020f50:	a009                	j	80020f52 <_ZN9allocator9BuddyInfo13get_alloc_mut17he7a2a5362df5d388E+0x38>
    80020f52:	6542                	ld	a0,16(sp)

0000000080020f54 <.LBB18_5>:
    80020f54:	0000b597          	auipc	a1,0xb
    80020f58:	44c58593          	addi	a1,a1,1100 # 8002c3a0 <.L__unnamed_56>
    80020f5c:	00000097          	auipc	ra,0x0
    80020f60:	630080e7          	jalr	1584(ra) # 8002158c <_ZN4core6option15Option$LT$T$GT$6unwrap17h9c7c2e8ce1270a73E>
    80020f64:	e42a                	sd	a0,8(sp)
    80020f66:	a009                	j	80020f68 <.LBB18_5+0x14>
    }
    80020f68:	6522                	ld	a0,8(sp)
    80020f6a:	60e6                	ld	ra,88(sp)
    80020f6c:	6125                	addi	sp,sp,96
    80020f6e:	8082                	ret

Disassembly of section .text._ZN9allocator9BuddyInfo9get_split17hd25381f0deeea7b0E:

0000000080020f70 <_ZN9allocator9BuddyInfo9get_split17hd25381f0deeea7b0E>:

    /// SAFETY: must be called after the initialization of split field.
    unsafe fn get_split(&self, index: usize) -> &u8 {
    80020f70:	711d                	addi	sp,sp,-96
    80020f72:	ec86                	sd	ra,88(sp)
    80020f74:	f02e                	sd	a1,32(sp)
    80020f76:	f82a                	sd	a0,48(sp)
    80020f78:	fc2e                	sd	a1,56(sp)
        let split_slice_ptr = *self.split.as_ptr() as *const [u8];
    80020f7a:	02050513          	addi	a0,a0,32
    80020f7e:	f42a                	sd	a0,40(sp)
    80020f80:	e8aa                	sd	a0,80(sp)
    80020f82:	a009                	j	80020f84 <_ZN9allocator9BuddyInfo9get_split17hd25381f0deeea7b0E+0x14>
    80020f84:	7602                	ld	a2,32(sp)
    80020f86:	75a2                	ld	a1,40(sp)
    80020f88:	6188                	ld	a0,0(a1)
    80020f8a:	658c                	ld	a1,8(a1)
    80020f8c:	e0aa                	sd	a0,64(sp)
    80020f8e:	e4ae                	sd	a1,72(sp)
        split_slice_ptr.get_unchecked(index).as_ref().unwrap()
    80020f90:	ffffe097          	auipc	ra,0xffffe
    80020f94:	768080e7          	jalr	1896(ra) # 8001f6f8 <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$13get_unchecked17h149838d98ef59845E>
    80020f98:	ec2a                	sd	a0,24(sp)
    80020f9a:	a009                	j	80020f9c <_ZN9allocator9BuddyInfo9get_split17hd25381f0deeea7b0E+0x2c>
    80020f9c:	6562                	ld	a0,24(sp)
    80020f9e:	ffffe097          	auipc	ra,0xffffe
    80020fa2:	6f2080e7          	jalr	1778(ra) # 8001f690 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6as_ref17h1afc8f6daddbc052E>
    80020fa6:	e82a                	sd	a0,16(sp)
    80020fa8:	a009                	j	80020faa <_ZN9allocator9BuddyInfo9get_split17hd25381f0deeea7b0E+0x3a>
    80020faa:	6542                	ld	a0,16(sp)

0000000080020fac <.LBB19_5>:
    80020fac:	0000b597          	auipc	a1,0xb
    80020fb0:	40c58593          	addi	a1,a1,1036 # 8002c3b8 <.L__unnamed_57>
    80020fb4:	00000097          	auipc	ra,0x0
    80020fb8:	644080e7          	jalr	1604(ra) # 800215f8 <_ZN4core6option15Option$LT$T$GT$6unwrap17hf33e22fb94afcd9bE>
    80020fbc:	e42a                	sd	a0,8(sp)
    80020fbe:	a009                	j	80020fc0 <.LBB19_5+0x14>
    }
    80020fc0:	6522                	ld	a0,8(sp)
    80020fc2:	60e6                	ld	ra,88(sp)
    80020fc4:	6125                	addi	sp,sp,96
    80020fc6:	8082                	ret

Disassembly of section .text._ZN9allocator9BuddyInfo13get_split_mut17h16866174694e07d9E:

0000000080020fc8 <_ZN9allocator9BuddyInfo13get_split_mut17h16866174694e07d9E>:

    /// SAFETY: must be called after the initialization of split field.
    unsafe fn get_split_mut(&mut self, index: usize) -> &mut u8 {
    80020fc8:	711d                	addi	sp,sp,-96
    80020fca:	ec86                	sd	ra,88(sp)
    80020fcc:	f02e                	sd	a1,32(sp)
    80020fce:	f82a                	sd	a0,48(sp)
    80020fd0:	fc2e                	sd	a1,56(sp)
        let split_slice_ptr = *self.split.as_ptr();
    80020fd2:	02050513          	addi	a0,a0,32
    80020fd6:	f42a                	sd	a0,40(sp)
    80020fd8:	e8aa                	sd	a0,80(sp)
    80020fda:	a009                	j	80020fdc <_ZN9allocator9BuddyInfo13get_split_mut17h16866174694e07d9E+0x14>
    80020fdc:	7602                	ld	a2,32(sp)
    80020fde:	75a2                	ld	a1,40(sp)
    80020fe0:	6188                	ld	a0,0(a1)
    80020fe2:	658c                	ld	a1,8(a1)
    80020fe4:	e0aa                	sd	a0,64(sp)
    80020fe6:	e4ae                	sd	a1,72(sp)
        split_slice_ptr.get_unchecked_mut(index).as_mut().unwrap()
    80020fe8:	ffffe097          	auipc	ra,0xffffe
    80020fec:	64c080e7          	jalr	1612(ra) # 8001f634 <_ZN4core3ptr7mut_ptr41_$LT$impl$u20$$BP$mut$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h1fb5de3e2413636cE>
    80020ff0:	ec2a                	sd	a0,24(sp)
    80020ff2:	a009                	j	80020ff4 <_ZN9allocator9BuddyInfo13get_split_mut17h16866174694e07d9E+0x2c>
    80020ff4:	6562                	ld	a0,24(sp)
    80020ff6:	ffffe097          	auipc	ra,0xffffe
    80020ffa:	5cc080e7          	jalr	1484(ra) # 8001f5c2 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17he7a20e0a0a2f5b66E>
    80020ffe:	e82a                	sd	a0,16(sp)
    80021000:	a009                	j	80021002 <_ZN9allocator9BuddyInfo13get_split_mut17h16866174694e07d9E+0x3a>
    80021002:	6542                	ld	a0,16(sp)

0000000080021004 <.LBB20_5>:
    80021004:	0000b597          	auipc	a1,0xb
    80021008:	3cc58593          	addi	a1,a1,972 # 8002c3d0 <.L__unnamed_58>
    8002100c:	00000097          	auipc	ra,0x0
    80021010:	580080e7          	jalr	1408(ra) # 8002158c <_ZN4core6option15Option$LT$T$GT$6unwrap17h9c7c2e8ce1270a73E>
    80021014:	e42a                	sd	a0,8(sp)
    80021016:	a009                	j	80021018 <.LBB20_5+0x14>
    }
    80021018:	6522                	ld	a0,8(sp)
    8002101a:	60e6                	ld	ra,88(sp)
    8002101c:	6125                	addi	sp,sp,96
    8002101e:	8082                	ret

Disassembly of section .text._ZN9allocator9BuddyInfo9alloc_set17h48fdb360b5f9c917E:

0000000080021020 <_ZN9allocator9BuddyInfo9alloc_set17h48fdb360b5f9c917E>:

    fn alloc_set(&mut self, index: usize, set_or_clear: bool) {
    80021020:	715d                	addi	sp,sp,-80
    80021022:	e486                	sd	ra,72(sp)
    80021024:	e032                	sd	a2,0(sp)
    80021026:	862e                	mv	a2,a1
    80021028:	6582                	ld	a1,0(sp)
    8002102a:	86ae                	mv	a3,a1
    8002102c:	e436                	sd	a3,8(sp)
    8002102e:	f02a                	sd	a0,32(sp)
    80021030:	f432                	sd	a2,40(sp)
    80021032:	02b10ba3          	sb	a1,55(sp)
        let i1 = index / 8;
    80021036:	00365593          	srli	a1,a2,0x3
    8002103a:	fc2e                	sd	a1,56(sp)
        let i2 = index % 8;
    8002103c:	8a1d                	andi	a2,a2,7
    8002103e:	e832                	sd	a2,16(sp)
    80021040:	e0b2                	sd	a2,64(sp)
        unsafe { self.get_alloc_mut(i1).set_bit(i2, set_or_clear); }
    80021042:	00000097          	auipc	ra,0x0
    80021046:	ed8080e7          	jalr	-296(ra) # 80020f1a <_ZN9allocator9BuddyInfo13get_alloc_mut17he7a2a5362df5d388E>
    8002104a:	ec2a                	sd	a0,24(sp)
    8002104c:	a009                	j	8002104e <_ZN9allocator9BuddyInfo9alloc_set17h48fdb360b5f9c917E+0x2e>
    8002104e:	6622                	ld	a2,8(sp)
    80021050:	65c2                	ld	a1,16(sp)
    80021052:	6562                	ld	a0,24(sp)
    80021054:	00000097          	auipc	ra,0x0
    80021058:	2ca080e7          	jalr	714(ra) # 8002131e <_ZN42_$LT$u8$u20$as$u20$bit_field..BitField$GT$7set_bit17h65cd2a40e8cb79a2E>
    8002105c:	a009                	j	8002105e <_ZN9allocator9BuddyInfo9alloc_set17h48fdb360b5f9c917E+0x3e>
    }
    8002105e:	60a6                	ld	ra,72(sp)
    80021060:	6161                	addi	sp,sp,80
    80021062:	8082                	ret

Disassembly of section .text._ZN9allocator9BuddyInfo9split_set17hd9896ad2ca355490E:

0000000080021064 <_ZN9allocator9BuddyInfo9split_set17hd9896ad2ca355490E>:

    fn split_set(&mut self, index: usize, set_or_clear: bool) {
    80021064:	715d                	addi	sp,sp,-80
    80021066:	e486                	sd	ra,72(sp)
    80021068:	e032                	sd	a2,0(sp)
    8002106a:	862e                	mv	a2,a1
    8002106c:	6582                	ld	a1,0(sp)
    8002106e:	86ae                	mv	a3,a1
    80021070:	e436                	sd	a3,8(sp)
    80021072:	f02a                	sd	a0,32(sp)
    80021074:	f432                	sd	a2,40(sp)
    80021076:	02b10ba3          	sb	a1,55(sp)
        let i1 = index / 8;
    8002107a:	00365593          	srli	a1,a2,0x3
    8002107e:	fc2e                	sd	a1,56(sp)
        let i2 = index % 8;
    80021080:	8a1d                	andi	a2,a2,7
    80021082:	e832                	sd	a2,16(sp)
    80021084:	e0b2                	sd	a2,64(sp)
        unsafe { self.get_split_mut(i1).set_bit(i2, set_or_clear); }
    80021086:	00000097          	auipc	ra,0x0
    8002108a:	f42080e7          	jalr	-190(ra) # 80020fc8 <_ZN9allocator9BuddyInfo13get_split_mut17h16866174694e07d9E>
    8002108e:	ec2a                	sd	a0,24(sp)
    80021090:	a009                	j	80021092 <_ZN9allocator9BuddyInfo9split_set17hd9896ad2ca355490E+0x2e>
    80021092:	6622                	ld	a2,8(sp)
    80021094:	65c2                	ld	a1,16(sp)
    80021096:	6562                	ld	a0,24(sp)
    80021098:	00000097          	auipc	ra,0x0
    8002109c:	286080e7          	jalr	646(ra) # 8002131e <_ZN42_$LT$u8$u20$as$u20$bit_field..BitField$GT$7set_bit17h65cd2a40e8cb79a2E>
    800210a0:	a009                	j	800210a2 <_ZN9allocator9BuddyInfo9split_set17hd9896ad2ca355490E+0x3e>
    }
    800210a2:	60a6                	ld	ra,72(sp)
    800210a4:	6161                	addi	sp,sp,80
    800210a6:	8082                	ret

Disassembly of section .text._ZN9allocator9BuddyInfo12is_alloc_set17h74e6eb5491672d31E:

00000000800210a8 <_ZN9allocator9BuddyInfo12is_alloc_set17h74e6eb5491672d31E>:

    fn is_alloc_set(&self, index: usize) -> bool {
    800210a8:	7139                	addi	sp,sp,-64
    800210aa:	fc06                	sd	ra,56(sp)
    800210ac:	862e                	mv	a2,a1
    800210ae:	ec2a                	sd	a0,24(sp)
    800210b0:	f032                	sd	a2,32(sp)
        let i1 = index / 8;
    800210b2:	00365593          	srli	a1,a2,0x3
    800210b6:	f42e                	sd	a1,40(sp)
        let i2 = index % 8;
    800210b8:	8a1d                	andi	a2,a2,7
    800210ba:	e432                	sd	a2,8(sp)
    800210bc:	f832                	sd	a2,48(sp)
        unsafe { self.get_alloc(i1).get_bit(i2) }
    800210be:	00000097          	auipc	ra,0x0
    800210c2:	e06080e7          	jalr	-506(ra) # 80020ec4 <_ZN9allocator9BuddyInfo9get_alloc17hc8e52f4241734faeE>
    800210c6:	e82a                	sd	a0,16(sp)
    800210c8:	a009                	j	800210ca <_ZN9allocator9BuddyInfo12is_alloc_set17h74e6eb5491672d31E+0x22>
    800210ca:	65a2                	ld	a1,8(sp)
    800210cc:	6542                	ld	a0,16(sp)
    800210ce:	00000097          	auipc	ra,0x0
    800210d2:	1d2080e7          	jalr	466(ra) # 800212a0 <_ZN42_$LT$u8$u20$as$u20$bit_field..BitField$GT$7get_bit17h748f572d0cd86d7cE>
    800210d6:	e02a                	sd	a0,0(sp)
    800210d8:	a009                	j	800210da <_ZN9allocator9BuddyInfo12is_alloc_set17h74e6eb5491672d31E+0x32>
    }
    800210da:	6502                	ld	a0,0(sp)
    800210dc:	70e2                	ld	ra,56(sp)
    800210de:	6121                	addi	sp,sp,64
    800210e0:	8082                	ret

Disassembly of section .text._ZN9allocator9BuddyInfo12is_split_set17hd9054b929d273b40E:

00000000800210e2 <_ZN9allocator9BuddyInfo12is_split_set17hd9054b929d273b40E>:

    fn is_split_set(&self, index: usize) -> bool {
    800210e2:	7139                	addi	sp,sp,-64
    800210e4:	fc06                	sd	ra,56(sp)
    800210e6:	862e                	mv	a2,a1
    800210e8:	ec2a                	sd	a0,24(sp)
    800210ea:	f032                	sd	a2,32(sp)
        let i1 = index / 8;
    800210ec:	00365593          	srli	a1,a2,0x3
    800210f0:	f42e                	sd	a1,40(sp)
        let i2 = index % 8;
    800210f2:	8a1d                	andi	a2,a2,7
    800210f4:	e432                	sd	a2,8(sp)
    800210f6:	f832                	sd	a2,48(sp)
        unsafe { self.get_split(i1).get_bit(i2) }
    800210f8:	00000097          	auipc	ra,0x0
    800210fc:	e78080e7          	jalr	-392(ra) # 80020f70 <_ZN9allocator9BuddyInfo9get_split17hd25381f0deeea7b0E>
    80021100:	e82a                	sd	a0,16(sp)
    80021102:	a009                	j	80021104 <_ZN9allocator9BuddyInfo12is_split_set17hd9054b929d273b40E+0x22>
    80021104:	65a2                	ld	a1,8(sp)
    80021106:	6542                	ld	a0,16(sp)
    80021108:	00000097          	auipc	ra,0x0
    8002110c:	198080e7          	jalr	408(ra) # 800212a0 <_ZN42_$LT$u8$u20$as$u20$bit_field..BitField$GT$7get_bit17h748f572d0cd86d7cE>
    80021110:	e02a                	sd	a0,0(sp)
    80021112:	a009                	j	80021114 <_ZN9allocator9BuddyInfo12is_split_set17hd9054b929d273b40E+0x32>
    }
    80021114:	6502                	ld	a0,0(sp)
    80021116:	70e2                	ld	ra,56(sp)
    80021118:	6121                	addi	sp,sp,64
    8002111a:	8082                	ret

Disassembly of section .text._ZN9allocator8round_up17h09c23390ccb46398E:

000000008002111c <_ZN9allocator8round_up17h09c23390ccb46398E>:
    ptr::write_bytes(raw_ptr, 0, len);
    ptr::slice_from_raw_parts_mut(raw_ptr, len)
}

#[inline]
fn round_up(n: usize, size: usize) -> usize {
    8002111c:	7179                	addi	sp,sp,-48
    8002111e:	e82e                	sd	a1,16(sp)
    80021120:	f02a                	sd	a0,32(sp)
    80021122:	f42e                	sd	a1,40(sp)
    (((n-1)/size)+1)*size
    80021124:	fff50593          	addi	a1,a0,-1
    80021128:	ec2e                	sd	a1,24(sp)
    8002112a:	04b56063          	bltu	a0,a1,8002116a <.LBB25_9>
    8002112e:	a009                	j	80021130 <_ZN9allocator8round_up17h09c23390ccb46398E+0x14>
    80021130:	6542                	ld	a0,16(sp)
    80021132:	4581                	li	a1,0
    80021134:	04b50a63          	beq	a0,a1,80021188 <.LBB25_11>
    80021138:	a009                	j	8002113a <_ZN9allocator8round_up17h09c23390ccb46398E+0x1e>
    8002113a:	6562                	ld	a0,24(sp)
    8002113c:	65c2                	ld	a1,16(sp)
    8002113e:	02b555b3          	divu	a1,a0,a1
    80021142:	00158513          	addi	a0,a1,1
    80021146:	e42a                	sd	a0,8(sp)
    80021148:	04b56e63          	bltu	a0,a1,800211a4 <.LBB25_13>
    8002114c:	a009                	j	8002114e <_ZN9allocator8round_up17h09c23390ccb46398E+0x32>
    8002114e:	6522                	ld	a0,8(sp)
    80021150:	65c2                	ld	a1,16(sp)
    80021152:	02b50633          	mul	a2,a0,a1
    80021156:	e032                	sd	a2,0(sp)
    80021158:	02b53533          	mulhu	a0,a0,a1
    8002115c:	4581                	li	a1,0
    8002115e:	06b51163          	bne	a0,a1,800211c0 <.LBB25_15>
    80021162:	a009                	j	80021164 <_ZN9allocator8round_up17h09c23390ccb46398E+0x48>
}
    80021164:	6502                	ld	a0,0(sp)
    80021166:	6145                	addi	sp,sp,48
    80021168:	8082                	ret

000000008002116a <.LBB25_9>:
    (((n-1)/size)+1)*size
    8002116a:	0000b517          	auipc	a0,0xb
    8002116e:	bf650513          	addi	a0,a0,-1034 # 8002bd60 <str.0>

0000000080021172 <.LBB25_10>:
    80021172:	0000b617          	auipc	a2,0xb
    80021176:	27660613          	addi	a2,a2,630 # 8002c3e8 <.L__unnamed_59>
    8002117a:	02100593          	li	a1,33
    8002117e:	00001097          	auipc	ra,0x1
    80021182:	f7e080e7          	jalr	-130(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080021188 <.LBB25_11>:
    80021188:	0000b517          	auipc	a0,0xb
    8002118c:	c4850513          	addi	a0,a0,-952 # 8002bdd0 <str.1>

0000000080021190 <.LBB25_12>:
    80021190:	0000b617          	auipc	a2,0xb
    80021194:	27060613          	addi	a2,a2,624 # 8002c400 <.L__unnamed_60>
    80021198:	45e5                	li	a1,25
    8002119a:	00001097          	auipc	ra,0x1
    8002119e:	f62080e7          	jalr	-158(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

00000000800211a4 <.LBB25_13>:
    800211a4:	0000b517          	auipc	a0,0xb
    800211a8:	c6c50513          	addi	a0,a0,-916 # 8002be10 <str.2>

00000000800211ac <.LBB25_14>:
    800211ac:	0000b617          	auipc	a2,0xb
    800211b0:	26c60613          	addi	a2,a2,620 # 8002c418 <.L__unnamed_61>
    800211b4:	45f1                	li	a1,28
    800211b6:	00001097          	auipc	ra,0x1
    800211ba:	f46080e7          	jalr	-186(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

00000000800211c0 <.LBB25_15>:
    800211c0:	0000b517          	auipc	a0,0xb
    800211c4:	17050513          	addi	a0,a0,368 # 8002c330 <str.5>

00000000800211c8 <.LBB25_16>:
    800211c8:	0000b617          	auipc	a2,0xb
    800211cc:	25060613          	addi	a2,a2,592 # 8002c418 <.L__unnamed_61>
    800211d0:	02100593          	li	a1,33
    800211d4:	00001097          	auipc	ra,0x1
    800211d8:	f28080e7          	jalr	-216(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN9allocator10round_down17h97bc9e681a0cc273E:

00000000800211de <_ZN9allocator10round_down17h97bc9e681a0cc273E>:

#[inline]
fn round_down(n: usize, size: usize) -> usize {
    800211de:	7179                	addi	sp,sp,-48
    800211e0:	e82e                	sd	a1,16(sp)
    800211e2:	ec2a                	sd	a0,24(sp)
    800211e4:	f02a                	sd	a0,32(sp)
    800211e6:	f42e                	sd	a1,40(sp)
    800211e8:	4501                	li	a0,0
    (n/size)*size
    800211ea:	02a58363          	beq	a1,a0,80021210 <.LBB26_5>
    800211ee:	a009                	j	800211f0 <_ZN9allocator10round_down17h97bc9e681a0cc273E+0x12>
    800211f0:	65c2                	ld	a1,16(sp)
    800211f2:	6562                	ld	a0,24(sp)
    800211f4:	02b55533          	divu	a0,a0,a1
    800211f8:	02b50633          	mul	a2,a0,a1
    800211fc:	e432                	sd	a2,8(sp)
    800211fe:	02b53533          	mulhu	a0,a0,a1
    80021202:	4581                	li	a1,0
    80021204:	02b51463          	bne	a0,a1,8002122c <.LBB26_7>
    80021208:	a009                	j	8002120a <_ZN9allocator10round_down17h97bc9e681a0cc273E+0x2c>
}
    8002120a:	6522                	ld	a0,8(sp)
    8002120c:	6145                	addi	sp,sp,48
    8002120e:	8082                	ret

0000000080021210 <.LBB26_5>:
    (n/size)*size
    80021210:	0000b517          	auipc	a0,0xb
    80021214:	bc050513          	addi	a0,a0,-1088 # 8002bdd0 <str.1>

0000000080021218 <.LBB26_6>:
    80021218:	0000b617          	auipc	a2,0xb
    8002121c:	21860613          	addi	a2,a2,536 # 8002c430 <.L__unnamed_62>
    80021220:	45e5                	li	a1,25
    80021222:	00001097          	auipc	ra,0x1
    80021226:	eda080e7          	jalr	-294(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

000000008002122c <.LBB26_7>:
    8002122c:	0000b517          	auipc	a0,0xb
    80021230:	10450513          	addi	a0,a0,260 # 8002c330 <str.5>

0000000080021234 <.LBB26_8>:
    80021234:	0000b617          	auipc	a2,0xb
    80021238:	1fc60613          	addi	a2,a2,508 # 8002c430 <.L__unnamed_62>
    8002123c:	02100593          	li	a1,33
    80021240:	00001097          	auipc	ra,0x1
    80021244:	ebc080e7          	jalr	-324(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN9allocator4log217h8cd213ee718a0479E:

000000008002124a <_ZN9allocator4log217h8cd213ee718a0479E>:

fn log2(mut n: usize) -> usize {
    8002124a:	1101                	addi	sp,sp,-32
    8002124c:	e82a                	sd	a0,16(sp)
    8002124e:	4501                	li	a0,0
    let mut k = 0;
    80021250:	ec2a                	sd	a0,24(sp)
    while n > 1 {
    80021252:	a009                	j	80021254 <_ZN9allocator4log217h8cd213ee718a0479E+0xa>
    80021254:	65c2                	ld	a1,16(sp)
    80021256:	4505                	li	a0,1
    80021258:	00b56663          	bltu	a0,a1,80021264 <_ZN9allocator4log217h8cd213ee718a0479E+0x1a>
    8002125c:	a009                	j	8002125e <_ZN9allocator4log217h8cd213ee718a0479E+0x14>
        k += 1;
        n >>= 1;
    }
    k
}
    8002125e:	6562                	ld	a0,24(sp)
    80021260:	6105                	addi	sp,sp,32
    80021262:	8082                	ret
        k += 1;
    80021264:	65e2                	ld	a1,24(sp)
    80021266:	00158513          	addi	a0,a1,1
    8002126a:	e42a                	sd	a0,8(sp)
    8002126c:	00b56c63          	bltu	a0,a1,80021284 <.LBB27_7>
    80021270:	a009                	j	80021272 <_ZN9allocator4log217h8cd213ee718a0479E+0x28>
    80021272:	6522                	ld	a0,8(sp)
    80021274:	ec2a                	sd	a0,24(sp)
        n >>= 1;
    80021276:	6542                	ld	a0,16(sp)
    80021278:	8105                	srli	a0,a0,0x1
    8002127a:	e02a                	sd	a0,0(sp)
    8002127c:	a009                	j	8002127e <_ZN9allocator4log217h8cd213ee718a0479E+0x34>
    8002127e:	6502                	ld	a0,0(sp)
    80021280:	e82a                	sd	a0,16(sp)
    while n > 1 {
    80021282:	bfc9                	j	80021254 <_ZN9allocator4log217h8cd213ee718a0479E+0xa>

0000000080021284 <.LBB27_7>:
        k += 1;
    80021284:	0000b517          	auipc	a0,0xb
    80021288:	b8c50513          	addi	a0,a0,-1140 # 8002be10 <str.2>

000000008002128c <.LBB27_8>:
    8002128c:	0000b617          	auipc	a2,0xb
    80021290:	1bc60613          	addi	a2,a2,444 # 8002c448 <.L__unnamed_63>
    80021294:	45f1                	li	a1,28
    80021296:	00001097          	auipc	ra,0x1
    8002129a:	e66080e7          	jalr	-410(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN42_$LT$u8$u20$as$u20$bit_field..BitField$GT$7get_bit17h748f572d0cd86d7cE:

00000000800212a0 <_ZN42_$LT$u8$u20$as$u20$bit_field..BitField$GT$7get_bit17h748f572d0cd86d7cE>:
            fn get_bit(&self, bit: usize) -> bool {
    800212a0:	7179                	addi	sp,sp,-48
    800212a2:	e82e                	sd	a1,16(sp)
    800212a4:	ec2a                	sd	a0,24(sp)
    800212a6:	f02a                	sd	a0,32(sp)
    800212a8:	f42e                	sd	a1,40(sp)
    800212aa:	4521                	li	a0,8
                assert!(bit < Self::BIT_LENGTH);
    800212ac:	02a5e263          	bltu	a1,a0,800212d0 <.LBB0_6+0x16>
    800212b0:	a009                	j	800212b2 <.LBB0_5>

00000000800212b2 <.LBB0_5>:
    800212b2:	0000b517          	auipc	a0,0xb
    800212b6:	1ae50513          	addi	a0,a0,430 # 8002c460 <.L__unnamed_1>

00000000800212ba <.LBB0_6>:
    800212ba:	0000b617          	auipc	a2,0xb
    800212be:	22e60613          	addi	a2,a2,558 # 8002c4e8 <.L__unnamed_2>
    800212c2:	02800593          	li	a1,40
    800212c6:	00001097          	auipc	ra,0x1
    800212ca:	e36080e7          	jalr	-458(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    800212ce:	0000                	unimp
                (*self & (1 << bit)) != 0
    800212d0:	65c2                	ld	a1,16(sp)
    800212d2:	6562                	ld	a0,24(sp)
    800212d4:	00054503          	lbu	a0,0(a0)
    800212d8:	e02a                	sd	a0,0(sp)
    800212da:	ff85f513          	andi	a0,a1,-8
    800212de:	0075f613          	andi	a2,a1,7
    800212e2:	4585                	li	a1,1
    800212e4:	00c595b3          	sll	a1,a1,a2
    800212e8:	e42e                	sd	a1,8(sp)
    800212ea:	4581                	li	a1,0
    800212ec:	00b51a63          	bne	a0,a1,80021300 <.LBB0_7>
    800212f0:	a009                	j	800212f2 <.LBB0_6+0x38>
    800212f2:	6502                	ld	a0,0(sp)
    800212f4:	65a2                	ld	a1,8(sp)
    800212f6:	8d6d                	and	a0,a0,a1
    800212f8:	00a03533          	snez	a0,a0
            }
    800212fc:	6145                	addi	sp,sp,48
    800212fe:	8082                	ret

0000000080021300 <.LBB0_7>:
                (*self & (1 << bit)) != 0
    80021300:	0000b517          	auipc	a0,0xb
    80021304:	20050513          	addi	a0,a0,512 # 8002c500 <str.0>

0000000080021308 <.LBB0_8>:
    80021308:	0000b617          	auipc	a2,0xb
    8002130c:	1e060613          	addi	a2,a2,480 # 8002c4e8 <.L__unnamed_2>
    80021310:	02300593          	li	a1,35
    80021314:	00001097          	auipc	ra,0x1
    80021318:	de8080e7          	jalr	-536(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN42_$LT$u8$u20$as$u20$bit_field..BitField$GT$7set_bit17h65cd2a40e8cb79a2E:

000000008002131e <_ZN42_$LT$u8$u20$as$u20$bit_field..BitField$GT$7set_bit17h65cd2a40e8cb79a2E>:
            fn set_bit(&mut self, bit: usize, value: bool) -> &mut Self {
    8002131e:	7139                	addi	sp,sp,-64
    80021320:	e82e                	sd	a1,16(sp)
    80021322:	ec2a                	sd	a0,24(sp)
    80021324:	86b2                	mv	a3,a2
    80021326:	f036                	sd	a3,32(sp)
    80021328:	f42a                	sd	a0,40(sp)
    8002132a:	f82e                	sd	a1,48(sp)
    8002132c:	02c10fa3          	sb	a2,63(sp)
    80021330:	4521                	li	a0,8
                assert!(bit < Self::BIT_LENGTH);
    80021332:	02a5e263          	bltu	a1,a0,80021356 <.LBB1_11+0x16>
    80021336:	a009                	j	80021338 <.LBB1_10>

0000000080021338 <.LBB1_10>:
    80021338:	0000b517          	auipc	a0,0xb
    8002133c:	12850513          	addi	a0,a0,296 # 8002c460 <.L__unnamed_1>

0000000080021340 <.LBB1_11>:
    80021340:	0000b617          	auipc	a2,0xb
    80021344:	1a860613          	addi	a2,a2,424 # 8002c4e8 <.L__unnamed_2>
    80021348:	02800593          	li	a1,40
    8002134c:	00001097          	auipc	ra,0x1
    80021350:	db0080e7          	jalr	-592(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80021354:	0000                	unimp
    80021356:	7502                	ld	a0,32(sp)
    80021358:	4581                	li	a1,0
                if value {
    8002135a:	02b50063          	beq	a0,a1,8002137a <.LBB1_11+0x3a>
    8002135e:	a009                	j	80021360 <.LBB1_11+0x20>
                    *self |= 1 << bit;
    80021360:	65c2                	ld	a1,16(sp)
    80021362:	ff85f513          	andi	a0,a1,-8
    80021366:	0075f613          	andi	a2,a1,7
    8002136a:	4585                	li	a1,1
    8002136c:	00c595b3          	sll	a1,a1,a2
    80021370:	e42e                	sd	a1,8(sp)
    80021372:	4581                	li	a1,0
    80021374:	04b51563          	bne	a0,a1,800213be <.LBB1_12>
    80021378:	a831                	j	80021394 <.LBB1_11+0x54>
                    *self &= !(1 << bit);
    8002137a:	65c2                	ld	a1,16(sp)
    8002137c:	ff85f513          	andi	a0,a1,-8
    80021380:	0075f613          	andi	a2,a1,7
    80021384:	4585                	li	a1,1
    80021386:	00c595b3          	sll	a1,a1,a2
    8002138a:	e02e                	sd	a1,0(sp)
    8002138c:	4581                	li	a1,0
    8002138e:	04b51763          	bne	a0,a1,800213dc <.LBB1_14>
    80021392:	a809                	j	800213a4 <.LBB1_11+0x64>
                    *self |= 1 << bit;
    80021394:	65e2                	ld	a1,24(sp)
    80021396:	6622                	ld	a2,8(sp)
    80021398:	00058503          	lb	a0,0(a1)
    8002139c:	8d51                	or	a0,a0,a2
    8002139e:	00a58023          	sb	a0,0(a1)
                if value {
    800213a2:	a819                	j	800213b8 <.LBB1_11+0x78>
                    *self &= !(1 << bit);
    800213a4:	65e2                	ld	a1,24(sp)
    800213a6:	6502                	ld	a0,0(sp)
    800213a8:	fff54613          	not	a2,a0
    800213ac:	00058503          	lb	a0,0(a1)
    800213b0:	8d71                	and	a0,a0,a2
    800213b2:	00a58023          	sb	a0,0(a1)
                if value {
    800213b6:	a009                	j	800213b8 <.LBB1_11+0x78>
            }
    800213b8:	6562                	ld	a0,24(sp)
    800213ba:	6121                	addi	sp,sp,64
    800213bc:	8082                	ret

00000000800213be <.LBB1_12>:
                    *self |= 1 << bit;
    800213be:	0000b517          	auipc	a0,0xb
    800213c2:	14250513          	addi	a0,a0,322 # 8002c500 <str.0>

00000000800213c6 <.LBB1_13>:
    800213c6:	0000b617          	auipc	a2,0xb
    800213ca:	12260613          	addi	a2,a2,290 # 8002c4e8 <.L__unnamed_2>
    800213ce:	02300593          	li	a1,35
    800213d2:	00001097          	auipc	ra,0x1
    800213d6:	d2a080e7          	jalr	-726(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

00000000800213dc <.LBB1_14>:
                    *self &= !(1 << bit);
    800213dc:	0000b517          	auipc	a0,0xb
    800213e0:	12450513          	addi	a0,a0,292 # 8002c500 <str.0>

00000000800213e4 <.LBB1_15>:
    800213e4:	0000b617          	auipc	a2,0xb
    800213e8:	10460613          	addi	a2,a2,260 # 8002c4e8 <.L__unnamed_2>
    800213ec:	02300593          	li	a1,35
    800213f0:	00001097          	auipc	ra,0x1
    800213f4:	d0c080e7          	jalr	-756(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN4core3fmt9Arguments6new_v117hf60bb287480e0058E:

00000000800213fa <_ZN4core3fmt9Arguments6new_v117hf60bb287480e0058E>:
    pub fn new_v1(pieces: &'a [&'static str], args: &'a [ArgumentV1<'a>]) -> Arguments<'a> {
    800213fa:	7179                	addi	sp,sp,-48
    800213fc:	e82e                	sd	a1,16(sp)
    800213fe:	ec32                	sd	a2,24(sp)
    80021400:	f036                	sd	a3,32(sp)
    80021402:	f43a                	sd	a4,40(sp)
    80021404:	4781                	li	a5,0
        Arguments { pieces, fmt: None, args }
    80021406:	e03e                	sd	a5,0(sp)
    80021408:	e10c                	sd	a1,0(a0)
    8002140a:	e510                	sd	a2,8(a0)
    8002140c:	6602                	ld	a2,0(sp)
    8002140e:	65a2                	ld	a1,8(sp)
    80021410:	e910                	sd	a2,16(a0)
    80021412:	ed0c                	sd	a1,24(a0)
    80021414:	f114                	sd	a3,32(a0)
    80021416:	f518                	sd	a4,40(a0)
    }
    80021418:	6145                	addi	sp,sp,48
    8002141a:	8082                	ret

Disassembly of section .text._ZN4core5alloc6layout6Layout4size17h7a38fec576bdd6a2E:

000000008002141c <_ZN4core5alloc6layout6Layout4size17h7a38fec576bdd6a2E>:
    pub const fn size(&self) -> usize {
    8002141c:	1141                	addi	sp,sp,-16
    8002141e:	e42a                	sd	a0,8(sp)
        self.size_
    80021420:	6108                	ld	a0,0(a0)
    }
    80021422:	0141                	addi	sp,sp,16
    80021424:	8082                	ret

Disassembly of section .text._ZN4core5alloc6layout6Layout5align17habc8d2502287bfe5E:

0000000080021426 <_ZN4core5alloc6layout6Layout5align17habc8d2502287bfe5E>:
    pub const fn align(&self) -> usize {
    80021426:	1101                	addi	sp,sp,-32
    80021428:	ec06                	sd	ra,24(sp)
    8002142a:	e82a                	sd	a0,16(sp)
        self.align_.get()
    8002142c:	6508                	ld	a0,8(a0)
    8002142e:	00000097          	auipc	ra,0x0
    80021432:	014080e7          	jalr	20(ra) # 80021442 <_ZN4core3num7nonzero12NonZeroUsize3get17h6255ed88f1e61af7E>
    80021436:	e42a                	sd	a0,8(sp)
    80021438:	a009                	j	8002143a <_ZN4core5alloc6layout6Layout5align17habc8d2502287bfe5E+0x14>
    }
    8002143a:	6522                	ld	a0,8(sp)
    8002143c:	60e2                	ld	ra,24(sp)
    8002143e:	6105                	addi	sp,sp,32
    80021440:	8082                	ret

Disassembly of section .text._ZN4core3num7nonzero12NonZeroUsize3get17h6255ed88f1e61af7E:

0000000080021442 <_ZN4core3num7nonzero12NonZeroUsize3get17h6255ed88f1e61af7E>:
                pub const fn get(self) -> $Int {
    80021442:	1141                	addi	sp,sp,-16
    80021444:	e42a                	sd	a0,8(sp)
                }
    80021446:	0141                	addi	sp,sp,16
    80021448:	8082                	ret

Disassembly of section .text._ZN9allocator4list4List4init17ha2ca564ea80bf5d5E:

000000008002144a <_ZN9allocator4list4List4init17ha2ca564ea80bf5d5E>:
    prev: *mut List,
    next: *mut List,
}

impl List {
    pub fn init(&mut self) {
    8002144a:	1141                	addi	sp,sp,-16
    8002144c:	e42a                	sd	a0,8(sp)
        self.prev = self;
    8002144e:	e108                	sd	a0,0(a0)
        self.next = self;
    80021450:	e508                	sd	a0,8(a0)
    }
    80021452:	0141                	addi	sp,sp,16
    80021454:	8082                	ret

Disassembly of section .text._ZN9allocator4list4List4push17h00016bee64ea1dbdE:

0000000080021456 <_ZN9allocator4list4List4push17h00016bee64ea1dbdE>:

    pub unsafe fn push(&mut self, raw_addr: usize) {
    80021456:	711d                	addi	sp,sp,-96
    80021458:	ec86                	sd	ra,88(sp)
    8002145a:	ec2e                	sd	a1,24(sp)
    8002145c:	85aa                	mv	a1,a0
    8002145e:	6562                	ld	a0,24(sp)
    80021460:	f02e                	sd	a1,32(sp)
    80021462:	e0ae                	sd	a1,64(sp)
    80021464:	e4aa                	sd	a0,72(sp)
        let raw_list = raw_addr as *mut List;
    80021466:	862a                	mv	a2,a0
    80021468:	f432                	sd	a2,40(sp)
    8002146a:	e8aa                	sd	a0,80(sp)
        ptr::write(raw_list, List {
            prev: self,
            next: self.next,
    8002146c:	6590                	ld	a2,8(a1)
        ptr::write(raw_list, List {
    8002146e:	f82e                	sd	a1,48(sp)
    80021470:	fc32                	sd	a2,56(sp)
    80021472:	00000097          	auipc	ra,0x0
    80021476:	272080e7          	jalr	626(ra) # 800216e4 <_ZN4core3ptr5write17h20482a37cc2ee430E>
    8002147a:	a009                	j	8002147c <_ZN9allocator4list4List4push17h00016bee64ea1dbdE+0x26>
        });
        self.next.as_mut().unwrap().prev = raw_list;
    8002147c:	7502                	ld	a0,32(sp)
    8002147e:	6508                	ld	a0,8(a0)
    80021480:	00001097          	auipc	ra,0x1
    80021484:	870080e7          	jalr	-1936(ra) # 80021cf0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h1d891c09167259ccE>
    80021488:	e82a                	sd	a0,16(sp)
    8002148a:	a009                	j	8002148c <_ZN9allocator4list4List4push17h00016bee64ea1dbdE+0x36>
    8002148c:	6542                	ld	a0,16(sp)

000000008002148e <.LBB1_4>:
    8002148e:	0000b597          	auipc	a1,0xb
    80021492:	0c258593          	addi	a1,a1,194 # 8002c550 <.L__unnamed_1>
    80021496:	00000097          	auipc	ra,0x0
    8002149a:	0c0080e7          	jalr	192(ra) # 80021556 <_ZN4core6option15Option$LT$T$GT$6unwrap17h92f45fda96995230E>
    8002149e:	e42a                	sd	a0,8(sp)
    800214a0:	a009                	j	800214a2 <.LBB1_4+0x14>
    800214a2:	7522                	ld	a0,40(sp)
    800214a4:	7582                	ld	a1,32(sp)
    800214a6:	6622                	ld	a2,8(sp)
    800214a8:	e208                	sd	a0,0(a2)
        self.next = raw_list;
    800214aa:	e588                	sd	a0,8(a1)
    }
    800214ac:	60e6                	ld	ra,88(sp)
    800214ae:	6125                	addi	sp,sp,96
    800214b0:	8082                	ret

Disassembly of section .text._ZN9allocator4list4List3pop17h8165b98152b25881E:

00000000800214b2 <_ZN9allocator4list4List3pop17h8165b98152b25881E>:

    pub unsafe fn pop(&mut self) -> Option<usize> {
    800214b2:	715d                	addi	sp,sp,-80
    800214b4:	e486                	sd	ra,72(sp)
    800214b6:	ec2a                	sd	a0,24(sp)
    800214b8:	fc2a                	sd	a0,56(sp)
        if self.is_empty() {
    800214ba:	00000097          	auipc	ra,0x0
    800214be:	07e080e7          	jalr	126(ra) # 80021538 <_ZN9allocator4list4List8is_empty17h2b5a11437d86acd9E>
    800214c2:	f02a                	sd	a0,32(sp)
    800214c4:	a009                	j	800214c6 <_ZN9allocator4list4List3pop17h8165b98152b25881E+0x14>
    800214c6:	7502                	ld	a0,32(sp)
    800214c8:	4581                	li	a1,0
    800214ca:	00b50663          	beq	a0,a1,800214d6 <_ZN9allocator4list4List3pop17h8165b98152b25881E+0x24>
    800214ce:	a009                	j	800214d0 <_ZN9allocator4list4List3pop17h8165b98152b25881E+0x1e>
    800214d0:	4501                	li	a0,0
            return None
    800214d2:	f42a                	sd	a0,40(sp)
        }
        let raw_addr = self.next as usize;
        self.next.as_mut().unwrap().remove();
        Some(raw_addr)
    }
    800214d4:	a091                	j	80021518 <.LBB2_8+0x2a>
        let raw_addr = self.next as usize;
    800214d6:	6562                	ld	a0,24(sp)
    800214d8:	650c                	ld	a1,8(a0)
    800214da:	e42e                	sd	a1,8(sp)
    800214dc:	e0ae                	sd	a1,64(sp)
        self.next.as_mut().unwrap().remove();
    800214de:	6508                	ld	a0,8(a0)
    800214e0:	00001097          	auipc	ra,0x1
    800214e4:	810080e7          	jalr	-2032(ra) # 80021cf0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h1d891c09167259ccE>
    800214e8:	e82a                	sd	a0,16(sp)
    800214ea:	a009                	j	800214ec <_ZN9allocator4list4List3pop17h8165b98152b25881E+0x3a>
    800214ec:	6542                	ld	a0,16(sp)

00000000800214ee <.LBB2_8>:
    800214ee:	0000b597          	auipc	a1,0xb
    800214f2:	07a58593          	addi	a1,a1,122 # 8002c568 <.L__unnamed_2>
    800214f6:	00000097          	auipc	ra,0x0
    800214fa:	060080e7          	jalr	96(ra) # 80021556 <_ZN4core6option15Option$LT$T$GT$6unwrap17h92f45fda96995230E>
    800214fe:	e02a                	sd	a0,0(sp)
    80021500:	a009                	j	80021502 <.LBB2_8+0x14>
    80021502:	6502                	ld	a0,0(sp)
    80021504:	00000097          	auipc	ra,0x0
    80021508:	01e080e7          	jalr	30(ra) # 80021522 <_ZN9allocator4list4List6remove17hdaf9d5be7333b4ddE>
    8002150c:	a009                	j	8002150e <.LBB2_8+0x20>
        Some(raw_addr)
    8002150e:	6522                	ld	a0,8(sp)
    80021510:	f82a                	sd	a0,48(sp)
    80021512:	4505                	li	a0,1
    80021514:	f42a                	sd	a0,40(sp)
    }
    80021516:	a009                	j	80021518 <.LBB2_8+0x2a>
    80021518:	7522                	ld	a0,40(sp)
    8002151a:	75c2                	ld	a1,48(sp)
    8002151c:	60a6                	ld	ra,72(sp)
    8002151e:	6161                	addi	sp,sp,80
    80021520:	8082                	ret

Disassembly of section .text._ZN9allocator4list4List6remove17hdaf9d5be7333b4ddE:

0000000080021522 <_ZN9allocator4list4List6remove17hdaf9d5be7333b4ddE>:

    pub unsafe fn remove(&mut self) {
    80021522:	1141                	addi	sp,sp,-16
    80021524:	85aa                	mv	a1,a0
    80021526:	e42e                	sd	a1,8(sp)
        (*self.prev).next = self.next;
    80021528:	6588                	ld	a0,8(a1)
    8002152a:	6190                	ld	a2,0(a1)
    8002152c:	e608                	sd	a0,8(a2)
        (*self.next).prev = self.prev;
    8002152e:	6188                	ld	a0,0(a1)
    80021530:	658c                	ld	a1,8(a1)
    80021532:	e188                	sd	a0,0(a1)
    }
    80021534:	0141                	addi	sp,sp,16
    80021536:	8082                	ret

Disassembly of section .text._ZN9allocator4list4List8is_empty17h2b5a11437d86acd9E:

0000000080021538 <_ZN9allocator4list4List8is_empty17h2b5a11437d86acd9E>:

    pub fn is_empty(&self) -> bool {
    80021538:	1101                	addi	sp,sp,-32
    8002153a:	ec06                	sd	ra,24(sp)
    8002153c:	85aa                	mv	a1,a0
    8002153e:	e82e                	sd	a1,16(sp)
        ptr::eq(self.next, self)
    80021540:	6588                	ld	a0,8(a1)
    80021542:	00000097          	auipc	ra,0x0
    80021546:	150080e7          	jalr	336(ra) # 80021692 <_ZN4core3ptr2eq17ha5b82c23507454aeE>
    8002154a:	e42a                	sd	a0,8(sp)
    8002154c:	a009                	j	8002154e <_ZN9allocator4list4List8is_empty17h2b5a11437d86acd9E+0x16>
    }
    8002154e:	6522                	ld	a0,8(sp)
    80021550:	60e2                	ld	ra,24(sp)
    80021552:	6105                	addi	sp,sp,32
    80021554:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$6unwrap17h92f45fda96995230E:

0000000080021556 <_ZN4core6option15Option$LT$T$GT$6unwrap17h92f45fda96995230E>:
    pub const fn unwrap(self) -> T {
    80021556:	1101                	addi	sp,sp,-32
    80021558:	e42e                	sd	a1,8(sp)
    8002155a:	e82a                	sd	a0,16(sp)
            Some(val) => val,
    8002155c:	00a035b3          	snez	a1,a0
    80021560:	4581                	li	a1,0
    80021562:	00b50463          	beq	a0,a1,8002156a <_ZN4core6option15Option$LT$T$GT$6unwrap17h92f45fda96995230E+0x14>
    80021566:	a009                	j	80021568 <_ZN4core6option15Option$LT$T$GT$6unwrap17h92f45fda96995230E+0x12>
    80021568:	a831                	j	80021584 <.LBB0_5+0x18>
            None => panic!("called `Option::unwrap()` on a `None` value"),
    8002156a:	6622                	ld	a2,8(sp)

000000008002156c <.LBB0_5>:
    8002156c:	0000b517          	auipc	a0,0xb
    80021570:	01450513          	addi	a0,a0,20 # 8002c580 <.L__unnamed_1>
    80021574:	02b00593          	li	a1,43
    80021578:	00001097          	auipc	ra,0x1
    8002157c:	b84080e7          	jalr	-1148(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80021580:	0000                	unimp
        match self {
    80021582:	0000                	unimp
            Some(val) => val,
    80021584:	6542                	ld	a0,16(sp)
    80021586:	ec2a                	sd	a0,24(sp)
    }
    80021588:	6105                	addi	sp,sp,32
    8002158a:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$6unwrap17h9c7c2e8ce1270a73E:

000000008002158c <_ZN4core6option15Option$LT$T$GT$6unwrap17h9c7c2e8ce1270a73E>:
    pub const fn unwrap(self) -> T {
    8002158c:	1101                	addi	sp,sp,-32
    8002158e:	e42e                	sd	a1,8(sp)
    80021590:	e82a                	sd	a0,16(sp)
            Some(val) => val,
    80021592:	00a035b3          	snez	a1,a0
    80021596:	4581                	li	a1,0
    80021598:	00b50463          	beq	a0,a1,800215a0 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9c7c2e8ce1270a73E+0x14>
    8002159c:	a009                	j	8002159e <_ZN4core6option15Option$LT$T$GT$6unwrap17h9c7c2e8ce1270a73E+0x12>
    8002159e:	a831                	j	800215ba <.LBB1_5+0x18>
            None => panic!("called `Option::unwrap()` on a `None` value"),
    800215a0:	6622                	ld	a2,8(sp)

00000000800215a2 <.LBB1_5>:
    800215a2:	0000b517          	auipc	a0,0xb
    800215a6:	fde50513          	addi	a0,a0,-34 # 8002c580 <.L__unnamed_1>
    800215aa:	02b00593          	li	a1,43
    800215ae:	00001097          	auipc	ra,0x1
    800215b2:	b4e080e7          	jalr	-1202(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    800215b6:	0000                	unimp
        match self {
    800215b8:	0000                	unimp
            Some(val) => val,
    800215ba:	6542                	ld	a0,16(sp)
    800215bc:	ec2a                	sd	a0,24(sp)
    }
    800215be:	6105                	addi	sp,sp,32
    800215c0:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$6unwrap17hda397585f3de5667E:

00000000800215c2 <_ZN4core6option15Option$LT$T$GT$6unwrap17hda397585f3de5667E>:
    pub const fn unwrap(self) -> T {
    800215c2:	1101                	addi	sp,sp,-32
    800215c4:	e42e                	sd	a1,8(sp)
    800215c6:	e82a                	sd	a0,16(sp)
            Some(val) => val,
    800215c8:	00a035b3          	snez	a1,a0
    800215cc:	4581                	li	a1,0
    800215ce:	00b50463          	beq	a0,a1,800215d6 <_ZN4core6option15Option$LT$T$GT$6unwrap17hda397585f3de5667E+0x14>
    800215d2:	a009                	j	800215d4 <_ZN4core6option15Option$LT$T$GT$6unwrap17hda397585f3de5667E+0x12>
    800215d4:	a831                	j	800215f0 <.LBB2_5+0x18>
            None => panic!("called `Option::unwrap()` on a `None` value"),
    800215d6:	6622                	ld	a2,8(sp)

00000000800215d8 <.LBB2_5>:
    800215d8:	0000b517          	auipc	a0,0xb
    800215dc:	fa850513          	addi	a0,a0,-88 # 8002c580 <.L__unnamed_1>
    800215e0:	02b00593          	li	a1,43
    800215e4:	00001097          	auipc	ra,0x1
    800215e8:	b18080e7          	jalr	-1256(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    800215ec:	0000                	unimp
        match self {
    800215ee:	0000                	unimp
            Some(val) => val,
    800215f0:	6542                	ld	a0,16(sp)
    800215f2:	ec2a                	sd	a0,24(sp)
    }
    800215f4:	6105                	addi	sp,sp,32
    800215f6:	8082                	ret

Disassembly of section .text._ZN4core6option15Option$LT$T$GT$6unwrap17hf33e22fb94afcd9bE:

00000000800215f8 <_ZN4core6option15Option$LT$T$GT$6unwrap17hf33e22fb94afcd9bE>:
    pub const fn unwrap(self) -> T {
    800215f8:	1101                	addi	sp,sp,-32
    800215fa:	e42e                	sd	a1,8(sp)
    800215fc:	e82a                	sd	a0,16(sp)
            Some(val) => val,
    800215fe:	00a035b3          	snez	a1,a0
    80021602:	4581                	li	a1,0
    80021604:	00b50463          	beq	a0,a1,8002160c <_ZN4core6option15Option$LT$T$GT$6unwrap17hf33e22fb94afcd9bE+0x14>
    80021608:	a009                	j	8002160a <_ZN4core6option15Option$LT$T$GT$6unwrap17hf33e22fb94afcd9bE+0x12>
    8002160a:	a831                	j	80021626 <.LBB3_5+0x18>
            None => panic!("called `Option::unwrap()` on a `None` value"),
    8002160c:	6622                	ld	a2,8(sp)

000000008002160e <.LBB3_5>:
    8002160e:	0000b517          	auipc	a0,0xb
    80021612:	f7250513          	addi	a0,a0,-142 # 8002c580 <.L__unnamed_1>
    80021616:	02b00593          	li	a1,43
    8002161a:	00001097          	auipc	ra,0x1
    8002161e:	ae2080e7          	jalr	-1310(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80021622:	0000                	unimp
        match self {
    80021624:	0000                	unimp
            Some(val) => val,
    80021626:	6542                	ld	a0,16(sp)
    80021628:	ec2a                	sd	a0,24(sp)
    }
    8002162a:	6105                	addi	sp,sp,32
    8002162c:	8082                	ret

Disassembly of section .text._ZN4core3ptr24slice_from_raw_parts_mut17h39496eba86137ee5E:

000000008002162e <_ZN4core3ptr24slice_from_raw_parts_mut17h39496eba86137ee5E>:
pub const fn slice_from_raw_parts_mut<T>(data: *mut T, len: usize) -> *mut [T] {
    8002162e:	7139                	addi	sp,sp,-64
    80021630:	fc06                	sd	ra,56(sp)
    80021632:	ec2e                	sd	a1,24(sp)
    80021634:	f42a                	sd	a0,40(sp)
    80021636:	f82e                	sd	a1,48(sp)
    from_raw_parts_mut(data.cast(), len)
    80021638:	ffffe097          	auipc	ra,0xffffe
    8002163c:	f68080e7          	jalr	-152(ra) # 8001f5a0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$4cast17h7b791e143f90db99E>
    80021640:	f02a                	sd	a0,32(sp)
    80021642:	a009                	j	80021644 <_ZN4core3ptr24slice_from_raw_parts_mut17h39496eba86137ee5E+0x16>
    80021644:	65e2                	ld	a1,24(sp)
    80021646:	7502                	ld	a0,32(sp)
    80021648:	00000097          	auipc	ra,0x0
    8002164c:	5e2080e7          	jalr	1506(ra) # 80021c2a <_ZN4core3ptr8metadata18from_raw_parts_mut17hf93e4b94956554aaE>
    80021650:	e42a                	sd	a0,8(sp)
    80021652:	e82e                	sd	a1,16(sp)
    80021654:	a009                	j	80021656 <_ZN4core3ptr24slice_from_raw_parts_mut17h39496eba86137ee5E+0x28>
}
    80021656:	65c2                	ld	a1,16(sp)
    80021658:	6522                	ld	a0,8(sp)
    8002165a:	70e2                	ld	ra,56(sp)
    8002165c:	6121                	addi	sp,sp,64
    8002165e:	8082                	ret

Disassembly of section .text._ZN4core3ptr24slice_from_raw_parts_mut17h9355ff019662f88fE:

0000000080021660 <_ZN4core3ptr24slice_from_raw_parts_mut17h9355ff019662f88fE>:
pub const fn slice_from_raw_parts_mut<T>(data: *mut T, len: usize) -> *mut [T] {
    80021660:	7139                	addi	sp,sp,-64
    80021662:	fc06                	sd	ra,56(sp)
    80021664:	ec2e                	sd	a1,24(sp)
    80021666:	f42a                	sd	a0,40(sp)
    80021668:	f82e                	sd	a1,48(sp)
    from_raw_parts_mut(data.cast(), len)
    8002166a:	00000097          	auipc	ra,0x0
    8002166e:	3a0080e7          	jalr	928(ra) # 80021a0a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$4cast17h8ad85686487e19c0E>
    80021672:	f02a                	sd	a0,32(sp)
    80021674:	a009                	j	80021676 <_ZN4core3ptr24slice_from_raw_parts_mut17h9355ff019662f88fE+0x16>
    80021676:	65e2                	ld	a1,24(sp)
    80021678:	7502                	ld	a0,32(sp)
    8002167a:	00000097          	auipc	ra,0x0
    8002167e:	59e080e7          	jalr	1438(ra) # 80021c18 <_ZN4core3ptr8metadata18from_raw_parts_mut17hd3633c4516987911E>
    80021682:	e42a                	sd	a0,8(sp)
    80021684:	e82e                	sd	a1,16(sp)
    80021686:	a009                	j	80021688 <_ZN4core3ptr24slice_from_raw_parts_mut17h9355ff019662f88fE+0x28>
}
    80021688:	65c2                	ld	a1,16(sp)
    8002168a:	6522                	ld	a0,8(sp)
    8002168c:	70e2                	ld	ra,56(sp)
    8002168e:	6121                	addi	sp,sp,64
    80021690:	8082                	ret

Disassembly of section .text._ZN4core3ptr2eq17ha5b82c23507454aeE:

0000000080021692 <_ZN4core3ptr2eq17ha5b82c23507454aeE>:
pub fn eq<T: ?Sized>(a: *const T, b: *const T) -> bool {
    80021692:	1141                	addi	sp,sp,-16
    80021694:	e02a                	sd	a0,0(sp)
    80021696:	e42e                	sd	a1,8(sp)
    a == b
    80021698:	8d2d                	xor	a0,a0,a1
    8002169a:	00153513          	seqz	a0,a0
}
    8002169e:	0141                	addi	sp,sp,16
    800216a0:	8082                	ret

Disassembly of section .text._ZN4core3ptr4read17hc3975c6c06864098E:

00000000800216a2 <_ZN4core3ptr4read17hc3975c6c06864098E>:
pub const unsafe fn read<T>(src: *const T) -> T {
    800216a2:	7139                	addi	sp,sp,-64
    800216a4:	e42a                	sd	a0,8(sp)
    800216a6:	ec2a                	sd	a0,24(sp)
    800216a8:	7502                	ld	a0,32(sp)
    let mut tmp = MaybeUninit::<T>::uninit();
    800216aa:	e82a                	sd	a0,16(sp)
    800216ac:	a009                	j	800216ae <_ZN4core3ptr4read17hc3975c6c06864098E+0xc>
    800216ae:	0808                	addi	a0,sp,16
    800216b0:	fc2a                	sd	a0,56(sp)
        copy_nonoverlapping(src, tmp.as_mut_ptr(), 1);
    800216b2:	a009                	j	800216b4 <_ZN4core3ptr4read17hc3975c6c06864098E+0x12>
    800216b4:	6522                	ld	a0,8(sp)
    800216b6:	6108                	ld	a0,0(a0)
    800216b8:	e02a                	sd	a0,0(sp)
    800216ba:	e82a                	sd	a0,16(sp)
    800216bc:	f42a                	sd	a0,40(sp)
    800216be:	f82a                	sd	a0,48(sp)
        tmp.assume_init()
    800216c0:	a009                	j	800216c2 <_ZN4core3ptr4read17hc3975c6c06864098E+0x20>
}
    800216c2:	6502                	ld	a0,0(sp)
    800216c4:	6121                	addi	sp,sp,64
    800216c6:	8082                	ret

Disassembly of section .text._ZN4core3ptr5write17h05084118c665240bE:

00000000800216c8 <_ZN4core3ptr5write17h05084118c665240bE>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
    800216c8:	1101                	addi	sp,sp,-32
    800216ca:	e42e                	sd	a1,8(sp)
    800216cc:	e832                	sd	a2,16(sp)
    800216ce:	ec2a                	sd	a0,24(sp)
        copy_nonoverlapping(&src as *const T, dst, 1);
    800216d0:	e510                	sd	a2,8(a0)
    800216d2:	e10c                	sd	a1,0(a0)
}
    800216d4:	6105                	addi	sp,sp,32
    800216d6:	8082                	ret

Disassembly of section .text._ZN4core3ptr5write17h087ddd4d9bf79c51E:

00000000800216d8 <_ZN4core3ptr5write17h087ddd4d9bf79c51E>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
    800216d8:	1141                	addi	sp,sp,-16
    800216da:	e02e                	sd	a1,0(sp)
    800216dc:	e42a                	sd	a0,8(sp)
        copy_nonoverlapping(&src as *const T, dst, 1);
    800216de:	e10c                	sd	a1,0(a0)
}
    800216e0:	0141                	addi	sp,sp,16
    800216e2:	8082                	ret

Disassembly of section .text._ZN4core3ptr5write17h20482a37cc2ee430E:

00000000800216e4 <_ZN4core3ptr5write17h20482a37cc2ee430E>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
    800216e4:	1101                	addi	sp,sp,-32
    800216e6:	e42e                	sd	a1,8(sp)
    800216e8:	e832                	sd	a2,16(sp)
    800216ea:	ec2a                	sd	a0,24(sp)
        copy_nonoverlapping(&src as *const T, dst, 1);
    800216ec:	e510                	sd	a2,8(a0)
    800216ee:	e10c                	sd	a1,0(a0)
}
    800216f0:	6105                	addi	sp,sp,32
    800216f2:	8082                	ret

Disassembly of section .text._ZN4core3ptr5write17he24a5dabd5fc0ae9E:

00000000800216f4 <_ZN4core3ptr5write17he24a5dabd5fc0ae9E>:
pub const unsafe fn write<T>(dst: *mut T, src: T) {
    800216f4:	1101                	addi	sp,sp,-32
    800216f6:	e42e                	sd	a1,8(sp)
    800216f8:	e832                	sd	a2,16(sp)
    800216fa:	ec2a                	sd	a0,24(sp)
        copy_nonoverlapping(&src as *const T, dst, 1);
    800216fc:	e510                	sd	a2,8(a0)
    800216fe:	e10c                	sd	a1,0(a0)
}
    80021700:	6105                	addi	sp,sp,32
    80021702:	8082                	ret

Disassembly of section .text._ZN4core3num23_$LT$impl$u20$usize$GT$10count_ones17h72d1856430c619feE:

0000000080021704 <_ZN4core3num23_$LT$impl$u20$usize$GT$10count_ones17h72d1856430c619feE>:
        pub const fn count_ones(self) -> u32 {
    80021704:	1101                	addi	sp,sp,-32
    80021706:	e82a                	sd	a0,16(sp)
            intrinsics::ctpop(self as $ActualT) as u32
    80021708:	00155593          	srli	a1,a0,0x1
    8002170c:	05555637          	lui	a2,0x5555
    80021710:	5556061b          	addiw	a2,a2,1365
    80021714:	0632                	slli	a2,a2,0xc
    80021716:	55560613          	addi	a2,a2,1365 # 5555555 <.Lline_table_start0+0x551ebee>
    8002171a:	0632                	slli	a2,a2,0xc
    8002171c:	55560613          	addi	a2,a2,1365
    80021720:	0632                	slli	a2,a2,0xc
    80021722:	55560613          	addi	a2,a2,1365
    80021726:	8df1                	and	a1,a1,a2
    80021728:	40b505b3          	sub	a1,a0,a1
    8002172c:	03333537          	lui	a0,0x3333
    80021730:	3335051b          	addiw	a0,a0,819
    80021734:	0532                	slli	a0,a0,0xc
    80021736:	33350513          	addi	a0,a0,819 # 3333333 <.Lline_table_start0+0x32fc9cc>
    8002173a:	0532                	slli	a0,a0,0xc
    8002173c:	33350513          	addi	a0,a0,819
    80021740:	0532                	slli	a0,a0,0xc
    80021742:	33350613          	addi	a2,a0,819
    80021746:	00c5f533          	and	a0,a1,a2
    8002174a:	8189                	srli	a1,a1,0x2
    8002174c:	8df1                	and	a1,a1,a2
    8002174e:	952e                	add	a0,a0,a1
    80021750:	00455593          	srli	a1,a0,0x4
    80021754:	952e                	add	a0,a0,a1
    80021756:	00f0f5b7          	lui	a1,0xf0f
    8002175a:	0f15859b          	addiw	a1,a1,241
    8002175e:	05b2                	slli	a1,a1,0xc
    80021760:	f0f58593          	addi	a1,a1,-241 # f0ef0f <.Lline_table_start0+0xed85a8>
    80021764:	05b2                	slli	a1,a1,0xc
    80021766:	0f158593          	addi	a1,a1,241
    8002176a:	05b2                	slli	a1,a1,0xc
    8002176c:	f0f58593          	addi	a1,a1,-241
    80021770:	8d6d                	and	a0,a0,a1
    80021772:	010105b7          	lui	a1,0x1010
    80021776:	1015859b          	addiw	a1,a1,257
    8002177a:	05c2                	slli	a1,a1,0x10
    8002177c:	10158593          	addi	a1,a1,257 # 1010101 <.Lline_table_start0+0xfd979a>
    80021780:	05c2                	slli	a1,a1,0x10
    80021782:	10158593          	addi	a1,a1,257
    80021786:	02b50533          	mul	a0,a0,a1
    8002178a:	9161                	srli	a0,a0,0x38
    8002178c:	e42a                	sd	a0,8(sp)
    8002178e:	ec2a                	sd	a0,24(sp)
    80021790:	a009                	j	80021792 <_ZN4core3num23_$LT$impl$u20$usize$GT$10count_ones17h72d1856430c619feE+0x8e>
        }
    80021792:	6522                	ld	a0,8(sp)
    80021794:	6105                	addi	sp,sp,32
    80021796:	8082                	ret

Disassembly of section .text._ZN4core3num23_$LT$impl$u20$usize$GT$13unchecked_add17hcd1907f29e8c72abE:

0000000080021798 <_ZN4core3num23_$LT$impl$u20$usize$GT$13unchecked_add17hcd1907f29e8c72abE>:
        pub unsafe fn unchecked_add(self, rhs: Self) -> Self {
    80021798:	1101                	addi	sp,sp,-32
    8002179a:	e42a                	sd	a0,8(sp)
    8002179c:	e82e                	sd	a1,16(sp)
            unsafe { intrinsics::unchecked_add(self, rhs) }
    8002179e:	952e                	add	a0,a0,a1
    800217a0:	e02a                	sd	a0,0(sp)
    800217a2:	ec2a                	sd	a0,24(sp)
    800217a4:	a009                	j	800217a6 <_ZN4core3num23_$LT$impl$u20$usize$GT$13unchecked_add17hcd1907f29e8c72abE+0xe>
        }
    800217a6:	6502                	ld	a0,0(sp)
    800217a8:	6105                	addi	sp,sp,32
    800217aa:	8082                	ret

Disassembly of section .text._ZN4core3num23_$LT$impl$u20$usize$GT$14trailing_zeros17h26e4a056cb05b6fbE:

00000000800217ac <_ZN4core3num23_$LT$impl$u20$usize$GT$14trailing_zeros17h26e4a056cb05b6fbE>:
        pub const fn trailing_zeros(self) -> u32 {
    800217ac:	1101                	addi	sp,sp,-32
    800217ae:	e82a                	sd	a0,16(sp)
            intrinsics::cttz(self) as u32
    800217b0:	fff50593          	addi	a1,a0,-1
    800217b4:	fff54513          	not	a0,a0
    800217b8:	8d6d                	and	a0,a0,a1
    800217ba:	00155593          	srli	a1,a0,0x1
    800217be:	05555637          	lui	a2,0x5555
    800217c2:	5556061b          	addiw	a2,a2,1365
    800217c6:	0632                	slli	a2,a2,0xc
    800217c8:	55560613          	addi	a2,a2,1365 # 5555555 <.Lline_table_start0+0x551ebee>
    800217cc:	0632                	slli	a2,a2,0xc
    800217ce:	55560613          	addi	a2,a2,1365
    800217d2:	0632                	slli	a2,a2,0xc
    800217d4:	55560613          	addi	a2,a2,1365
    800217d8:	8df1                	and	a1,a1,a2
    800217da:	40b505b3          	sub	a1,a0,a1
    800217de:	03333537          	lui	a0,0x3333
    800217e2:	3335051b          	addiw	a0,a0,819
    800217e6:	0532                	slli	a0,a0,0xc
    800217e8:	33350513          	addi	a0,a0,819 # 3333333 <.Lline_table_start0+0x32fc9cc>
    800217ec:	0532                	slli	a0,a0,0xc
    800217ee:	33350513          	addi	a0,a0,819
    800217f2:	0532                	slli	a0,a0,0xc
    800217f4:	33350613          	addi	a2,a0,819
    800217f8:	00c5f533          	and	a0,a1,a2
    800217fc:	8189                	srli	a1,a1,0x2
    800217fe:	8df1                	and	a1,a1,a2
    80021800:	952e                	add	a0,a0,a1
    80021802:	00455593          	srli	a1,a0,0x4
    80021806:	952e                	add	a0,a0,a1
    80021808:	00f0f5b7          	lui	a1,0xf0f
    8002180c:	0f15859b          	addiw	a1,a1,241
    80021810:	05b2                	slli	a1,a1,0xc
    80021812:	f0f58593          	addi	a1,a1,-241 # f0ef0f <.Lline_table_start0+0xed85a8>
    80021816:	05b2                	slli	a1,a1,0xc
    80021818:	0f158593          	addi	a1,a1,241
    8002181c:	05b2                	slli	a1,a1,0xc
    8002181e:	f0f58593          	addi	a1,a1,-241
    80021822:	8d6d                	and	a0,a0,a1
    80021824:	010105b7          	lui	a1,0x1010
    80021828:	1015859b          	addiw	a1,a1,257
    8002182c:	05c2                	slli	a1,a1,0x10
    8002182e:	10158593          	addi	a1,a1,257 # 1010101 <.Lline_table_start0+0xfd979a>
    80021832:	05c2                	slli	a1,a1,0x10
    80021834:	10158593          	addi	a1,a1,257
    80021838:	02b50533          	mul	a0,a0,a1
    8002183c:	9161                	srli	a0,a0,0x38
    8002183e:	e42a                	sd	a0,8(sp)
    80021840:	ec2a                	sd	a0,24(sp)
    80021842:	a009                	j	80021844 <_ZN4core3num23_$LT$impl$u20$usize$GT$14trailing_zeros17h26e4a056cb05b6fbE+0x98>
        }
    80021844:	6522                	ld	a0,8(sp)
    80021846:	6105                	addi	sp,sp,32
    80021848:	8082                	ret

Disassembly of section .text._ZN4core3num23_$LT$impl$u20$usize$GT$15is_power_of_two17h4d07b92e227ceed8E:

000000008002184a <_ZN4core3num23_$LT$impl$u20$usize$GT$15is_power_of_two17h4d07b92e227ceed8E>:
        pub const fn is_power_of_two(self) -> bool {
    8002184a:	1101                	addi	sp,sp,-32
    8002184c:	ec06                	sd	ra,24(sp)
    8002184e:	e82a                	sd	a0,16(sp)
            self.count_ones() == 1
    80021850:	00000097          	auipc	ra,0x0
    80021854:	eb4080e7          	jalr	-332(ra) # 80021704 <_ZN4core3num23_$LT$impl$u20$usize$GT$10count_ones17h72d1856430c619feE>
    80021858:	e42a                	sd	a0,8(sp)
    8002185a:	a009                	j	8002185c <_ZN4core3num23_$LT$impl$u20$usize$GT$15is_power_of_two17h4d07b92e227ceed8E+0x12>
    8002185c:	6522                	ld	a0,8(sp)
    8002185e:	2501                	sext.w	a0,a0
    80021860:	157d                	addi	a0,a0,-1
    80021862:	00153513          	seqz	a0,a0
        }
    80021866:	60e2                	ld	ra,24(sp)
    80021868:	6105                	addi	sp,sp,32
    8002186a:	8082                	ret

Disassembly of section .text._ZN4core3num23_$LT$impl$u20$usize$GT$17next_power_of_two17h8eeaf87577f4331fE:

000000008002186c <_ZN4core3num23_$LT$impl$u20$usize$GT$17next_power_of_two17h8eeaf87577f4331fE>:
        pub const fn next_power_of_two(self) -> Self {
    8002186c:	1101                	addi	sp,sp,-32
    8002186e:	ec06                	sd	ra,24(sp)
    80021870:	e82a                	sd	a0,16(sp)
            self.one_less_than_next_power_of_two() + 1
    80021872:	00000097          	auipc	ra,0x0
    80021876:	03e080e7          	jalr	62(ra) # 800218b0 <_ZN4core3num23_$LT$impl$u20$usize$GT$31one_less_than_next_power_of_two17hfbc6a00474408ebbE>
    8002187a:	e42a                	sd	a0,8(sp)
    8002187c:	a009                	j	8002187e <_ZN4core3num23_$LT$impl$u20$usize$GT$17next_power_of_two17h8eeaf87577f4331fE+0x12>
    8002187e:	65a2                	ld	a1,8(sp)
    80021880:	00158513          	addi	a0,a1,1
    80021884:	e02a                	sd	a0,0(sp)
    80021886:	00b56763          	bltu	a0,a1,80021894 <.LBB4_4>
    8002188a:	a009                	j	8002188c <_ZN4core3num23_$LT$impl$u20$usize$GT$17next_power_of_two17h8eeaf87577f4331fE+0x20>
        }
    8002188c:	6502                	ld	a0,0(sp)
    8002188e:	60e2                	ld	ra,24(sp)
    80021890:	6105                	addi	sp,sp,32
    80021892:	8082                	ret

0000000080021894 <.LBB4_4>:
            self.one_less_than_next_power_of_two() + 1
    80021894:	0000b517          	auipc	a0,0xb
    80021898:	dac50513          	addi	a0,a0,-596 # 8002c640 <str.0>

000000008002189c <.LBB4_5>:
    8002189c:	0000b617          	auipc	a2,0xb
    800218a0:	d8c60613          	addi	a2,a2,-628 # 8002c628 <.L__unnamed_1>
    800218a4:	45f1                	li	a1,28
    800218a6:	00001097          	auipc	ra,0x1
    800218aa:	856080e7          	jalr	-1962(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN4core3num23_$LT$impl$u20$usize$GT$31one_less_than_next_power_of_two17hfbc6a00474408ebbE:

00000000800218b0 <_ZN4core3num23_$LT$impl$u20$usize$GT$31one_less_than_next_power_of_two17hfbc6a00474408ebbE>:
        const fn one_less_than_next_power_of_two(self) -> Self {
    800218b0:	7139                	addi	sp,sp,-64
    800218b2:	85aa                	mv	a1,a0
    800218b4:	e82e                	sd	a1,16(sp)
    800218b6:	f02e                	sd	a1,32(sp)
    800218b8:	4505                	li	a0,1
            if self <= 1 { return 0; }
    800218ba:	00b56663          	bltu	a0,a1,800218c6 <_ZN4core3num23_$LT$impl$u20$usize$GT$31one_less_than_next_power_of_two17hfbc6a00474408ebbE+0x16>
    800218be:	a009                	j	800218c0 <_ZN4core3num23_$LT$impl$u20$usize$GT$31one_less_than_next_power_of_two17hfbc6a00474408ebbE+0x10>
    800218c0:	4501                	li	a0,0
    800218c2:	ec2a                	sd	a0,24(sp)
        }
    800218c4:	a0e1                	j	8002198c <_ZN4core3num23_$LT$impl$u20$usize$GT$31one_less_than_next_power_of_two17hfbc6a00474408ebbE+0xdc>
            let p = self - 1;
    800218c6:	6542                	ld	a0,16(sp)
    800218c8:	157d                	addi	a0,a0,-1
    800218ca:	f42a                	sd	a0,40(sp)
            let z = unsafe { intrinsics::ctlz_nonzero(p) };
    800218cc:	00155593          	srli	a1,a0,0x1
    800218d0:	8d4d                	or	a0,a0,a1
    800218d2:	00255593          	srli	a1,a0,0x2
    800218d6:	8d4d                	or	a0,a0,a1
    800218d8:	00455593          	srli	a1,a0,0x4
    800218dc:	8d4d                	or	a0,a0,a1
    800218de:	00855593          	srli	a1,a0,0x8
    800218e2:	8d4d                	or	a0,a0,a1
    800218e4:	01055593          	srli	a1,a0,0x10
    800218e8:	8d4d                	or	a0,a0,a1
    800218ea:	02055593          	srli	a1,a0,0x20
    800218ee:	8d4d                	or	a0,a0,a1
    800218f0:	fff54513          	not	a0,a0
    800218f4:	00155593          	srli	a1,a0,0x1
    800218f8:	05555637          	lui	a2,0x5555
    800218fc:	5556061b          	addiw	a2,a2,1365
    80021900:	0632                	slli	a2,a2,0xc
    80021902:	55560613          	addi	a2,a2,1365 # 5555555 <.Lline_table_start0+0x551ebee>
    80021906:	0632                	slli	a2,a2,0xc
    80021908:	55560613          	addi	a2,a2,1365
    8002190c:	0632                	slli	a2,a2,0xc
    8002190e:	55560613          	addi	a2,a2,1365
    80021912:	8df1                	and	a1,a1,a2
    80021914:	40b505b3          	sub	a1,a0,a1
    80021918:	03333537          	lui	a0,0x3333
    8002191c:	3335051b          	addiw	a0,a0,819
    80021920:	0532                	slli	a0,a0,0xc
    80021922:	33350513          	addi	a0,a0,819 # 3333333 <.Lline_table_start0+0x32fc9cc>
    80021926:	0532                	slli	a0,a0,0xc
    80021928:	33350513          	addi	a0,a0,819
    8002192c:	0532                	slli	a0,a0,0xc
    8002192e:	33350613          	addi	a2,a0,819
    80021932:	00c5f533          	and	a0,a1,a2
    80021936:	8189                	srli	a1,a1,0x2
    80021938:	8df1                	and	a1,a1,a2
    8002193a:	952e                	add	a0,a0,a1
    8002193c:	00455593          	srli	a1,a0,0x4
    80021940:	952e                	add	a0,a0,a1
    80021942:	00f0f5b7          	lui	a1,0xf0f
    80021946:	0f15859b          	addiw	a1,a1,241
    8002194a:	05b2                	slli	a1,a1,0xc
    8002194c:	f0f58593          	addi	a1,a1,-241 # f0ef0f <.Lline_table_start0+0xed85a8>
    80021950:	05b2                	slli	a1,a1,0xc
    80021952:	0f158593          	addi	a1,a1,241
    80021956:	05b2                	slli	a1,a1,0xc
    80021958:	f0f58593          	addi	a1,a1,-241
    8002195c:	8d6d                	and	a0,a0,a1
    8002195e:	010105b7          	lui	a1,0x1010
    80021962:	1015859b          	addiw	a1,a1,257
    80021966:	05c2                	slli	a1,a1,0x10
    80021968:	10158593          	addi	a1,a1,257 # 1010101 <.Lline_table_start0+0xfd979a>
    8002196c:	05c2                	slli	a1,a1,0x10
    8002196e:	10158593          	addi	a1,a1,257
    80021972:	02b50533          	mul	a0,a0,a1
    80021976:	9161                	srli	a0,a0,0x38
    80021978:	e42a                	sd	a0,8(sp)
    8002197a:	f82a                	sd	a0,48(sp)
    8002197c:	fc2a                	sd	a0,56(sp)
    8002197e:	a009                	j	80021980 <_ZN4core3num23_$LT$impl$u20$usize$GT$31one_less_than_next_power_of_two17hfbc6a00474408ebbE+0xd0>
    80021980:	65a2                	ld	a1,8(sp)
    80021982:	557d                	li	a0,-1
            <$SelfT>::MAX >> z
    80021984:	00b55533          	srl	a0,a0,a1
    80021988:	ec2a                	sd	a0,24(sp)
        }
    8002198a:	a009                	j	8002198c <_ZN4core3num23_$LT$impl$u20$usize$GT$31one_less_than_next_power_of_two17hfbc6a00474408ebbE+0xdc>
    8002198c:	6562                	ld	a0,24(sp)
    8002198e:	6121                	addi	sp,sp,64
    80021990:	8082                	ret

Disassembly of section .text._ZN4core10intrinsics11write_bytes17hd3155cf1c4a39b27E:

0000000080021992 <_ZN4core10intrinsics11write_bytes17hd3155cf1c4a39b27E>:
pub unsafe fn write_bytes<T>(dst: *mut T, val: u8, count: usize) {
    80021992:	1101                	addi	sp,sp,-32
    80021994:	ec06                	sd	ra,24(sp)
    80021996:	e02a                	sd	a0,0(sp)
    80021998:	00b107a3          	sb	a1,15(sp)
    8002199c:	e832                	sd	a2,16(sp)
    8002199e:	03000693          	li	a3,48
    unsafe { write_bytes(dst, val, count) }
    800219a2:	02d60633          	mul	a2,a2,a3
    800219a6:	00003097          	auipc	ra,0x3
    800219aa:	6e6080e7          	jalr	1766(ra) # 8002508c <memset>
    800219ae:	a009                	j	800219b0 <_ZN4core10intrinsics11write_bytes17hd3155cf1c4a39b27E+0x1e>
}
    800219b0:	60e2                	ld	ra,24(sp)
    800219b2:	6105                	addi	sp,sp,32
    800219b4:	8082                	ret

Disassembly of section .text._ZN4core10intrinsics11write_bytes17hfabd30e5bfcb1b55E:

00000000800219b6 <_ZN4core10intrinsics11write_bytes17hfabd30e5bfcb1b55E>:
pub unsafe fn write_bytes<T>(dst: *mut T, val: u8, count: usize) {
    800219b6:	1101                	addi	sp,sp,-32
    800219b8:	ec06                	sd	ra,24(sp)
    800219ba:	e02a                	sd	a0,0(sp)
    800219bc:	00b107a3          	sb	a1,15(sp)
    800219c0:	e832                	sd	a2,16(sp)
    unsafe { write_bytes(dst, val, count) }
    800219c2:	00003097          	auipc	ra,0x3
    800219c6:	6ca080e7          	jalr	1738(ra) # 8002508c <memset>
    800219ca:	a009                	j	800219cc <_ZN4core10intrinsics11write_bytes17hfabd30e5bfcb1b55E+0x16>
}
    800219cc:	60e2                	ld	ra,24(sp)
    800219ce:	6105                	addi	sp,sp,32
    800219d0:	8082                	ret

Disassembly of section .text._ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17h8a22fb325f3ddf5bE:

00000000800219d2 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17h8a22fb325f3ddf5bE>:
        unsafe fn forward_unchecked(start: Self, n: usize) -> Self {
    800219d2:	1101                	addi	sp,sp,-32
    800219d4:	ec06                	sd	ra,24(sp)
    800219d6:	e42a                	sd	a0,8(sp)
    800219d8:	e82e                	sd	a1,16(sp)
            unsafe { start.unchecked_add(n as Self) }
    800219da:	00000097          	auipc	ra,0x0
    800219de:	dbe080e7          	jalr	-578(ra) # 80021798 <_ZN4core3num23_$LT$impl$u20$usize$GT$13unchecked_add17hcd1907f29e8c72abE>
    800219e2:	e02a                	sd	a0,0(sp)
    800219e4:	a009                	j	800219e6 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$17forward_unchecked17h8a22fb325f3ddf5bE+0x14>
        }
    800219e6:	6502                	ld	a0,0(sp)
    800219e8:	60e2                	ld	ra,24(sp)
    800219ea:	6105                	addi	sp,sp,32
    800219ec:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h94cbb879d32de261E:

00000000800219ee <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h94cbb879d32de261E>:
    pub const unsafe fn add(self, count: usize) -> Self
    800219ee:	1101                	addi	sp,sp,-32
    800219f0:	ec06                	sd	ra,24(sp)
    800219f2:	e42a                	sd	a0,8(sp)
    800219f4:	e82e                	sd	a1,16(sp)
        unsafe { self.offset(count as isize) }
    800219f6:	00000097          	auipc	ra,0x0
    800219fa:	068080e7          	jalr	104(ra) # 80021a5e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h19b052a8866d770eE>
    800219fe:	e02a                	sd	a0,0(sp)
    80021a00:	a009                	j	80021a02 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h94cbb879d32de261E+0x14>
    }
    80021a02:	6502                	ld	a0,0(sp)
    80021a04:	60e2                	ld	ra,24(sp)
    80021a06:	6105                	addi	sp,sp,32
    80021a08:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$4cast17h8ad85686487e19c0E:

0000000080021a0a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$4cast17h8ad85686487e19c0E>:
    pub const fn cast<U>(self) -> *mut U {
    80021a0a:	1141                	addi	sp,sp,-16
    80021a0c:	e42a                	sd	a0,8(sp)
    }
    80021a0e:	0141                	addi	sp,sp,16
    80021a10:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17h69211318640bf224E:

0000000080021a12 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17h69211318640bf224E>:
    pub const unsafe fn write(self, val: T)
    80021a12:	1101                	addi	sp,sp,-32
    80021a14:	ec06                	sd	ra,24(sp)
    80021a16:	e02a                	sd	a0,0(sp)
    80021a18:	e42e                	sd	a1,8(sp)
    80021a1a:	e832                	sd	a2,16(sp)
        unsafe { write(self, val) }
    80021a1c:	00000097          	auipc	ra,0x0
    80021a20:	cd8080e7          	jalr	-808(ra) # 800216f4 <_ZN4core3ptr5write17he24a5dabd5fc0ae9E>
    80021a24:	a009                	j	80021a26 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17h69211318640bf224E+0x14>
    }
    80021a26:	60e2                	ld	ra,24(sp)
    80021a28:	6105                	addi	sp,sp,32
    80021a2a:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h46e365b62bffa500E:

0000000080021a2c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h46e365b62bffa500E>:
    pub unsafe fn as_mut<'a>(self) -> Option<&'a mut T> {
    80021a2c:	7179                	addi	sp,sp,-48
    80021a2e:	f406                	sd	ra,40(sp)
    80021a30:	e42a                	sd	a0,8(sp)
    80021a32:	f02a                	sd	a0,32(sp)
        if self.is_null() { None } else { unsafe { Some(&mut *self) } }
    80021a34:	00000097          	auipc	ra,0x0
    80021a38:	046080e7          	jalr	70(ra) # 80021a7a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h7ee5bf75e9cc9a60E>
    80021a3c:	e82a                	sd	a0,16(sp)
    80021a3e:	a009                	j	80021a40 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h46e365b62bffa500E+0x14>
    80021a40:	6542                	ld	a0,16(sp)
    80021a42:	4581                	li	a1,0
    80021a44:	00b50663          	beq	a0,a1,80021a50 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h46e365b62bffa500E+0x24>
    80021a48:	a009                	j	80021a4a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h46e365b62bffa500E+0x1e>
    80021a4a:	4501                	li	a0,0
    80021a4c:	ec2a                	sd	a0,24(sp)
    80021a4e:	a021                	j	80021a56 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h46e365b62bffa500E+0x2a>
    80021a50:	6522                	ld	a0,8(sp)
    80021a52:	ec2a                	sd	a0,24(sp)
    80021a54:	a009                	j	80021a56 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h46e365b62bffa500E+0x2a>
    }
    80021a56:	6562                	ld	a0,24(sp)
    80021a58:	70a2                	ld	ra,40(sp)
    80021a5a:	6145                	addi	sp,sp,48
    80021a5c:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h19b052a8866d770eE:

0000000080021a5e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h19b052a8866d770eE>:
    pub const unsafe fn offset(self, count: isize) -> *mut T
    80021a5e:	1101                	addi	sp,sp,-32
    80021a60:	e42a                	sd	a0,8(sp)
    80021a62:	e82e                	sd	a1,16(sp)
    80021a64:	03000613          	li	a2,48
        unsafe { intrinsics::offset(self, count) as *mut T }
    80021a68:	02c585b3          	mul	a1,a1,a2
    80021a6c:	952e                	add	a0,a0,a1
    80021a6e:	e02a                	sd	a0,0(sp)
    80021a70:	ec2a                	sd	a0,24(sp)
    80021a72:	a009                	j	80021a74 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h19b052a8866d770eE+0x16>
    }
    80021a74:	6502                	ld	a0,0(sp)
    80021a76:	6105                	addi	sp,sp,32
    80021a78:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h7ee5bf75e9cc9a60E:

0000000080021a7a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h7ee5bf75e9cc9a60E>:
    pub const fn is_null(self) -> bool {
    80021a7a:	1101                	addi	sp,sp,-32
    80021a7c:	ec06                	sd	ra,24(sp)
    80021a7e:	e82a                	sd	a0,16(sp)
        (self as *mut u8).guaranteed_eq(null_mut())
    80021a80:	e42a                	sd	a0,8(sp)
    80021a82:	a009                	j	80021a84 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h7ee5bf75e9cc9a60E+0xa>
    80021a84:	6522                	ld	a0,8(sp)
    80021a86:	4581                	li	a1,0
    80021a88:	ffffe097          	auipc	ra,0xffffe
    80021a8c:	ae2080e7          	jalr	-1310(ra) # 8001f56a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$13guaranteed_eq17h568dab4191b83956E>
    80021a90:	e02a                	sd	a0,0(sp)
    80021a92:	a009                	j	80021a94 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h7ee5bf75e9cc9a60E+0x1a>
    }
    80021a94:	6502                	ld	a0,0(sp)
    80021a96:	60e2                	ld	ra,24(sp)
    80021a98:	6105                	addi	sp,sp,32
    80021a9a:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr41_$LT$impl$u20$$BP$mut$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h6f6f43a247b8051cE:

0000000080021a9c <_ZN4core3ptr7mut_ptr41_$LT$impl$u20$$BP$mut$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h6f6f43a247b8051cE>:
    pub const fn as_mut_ptr(self) -> *mut T {
    80021a9c:	1141                	addi	sp,sp,-16
    80021a9e:	e02a                	sd	a0,0(sp)
    80021aa0:	e42e                	sd	a1,8(sp)
    }
    80021aa2:	0141                	addi	sp,sp,16
    80021aa4:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr41_$LT$impl$u20$$BP$mut$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h83deb5daf75ed8d6E:

0000000080021aa6 <_ZN4core3ptr7mut_ptr41_$LT$impl$u20$$BP$mut$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h83deb5daf75ed8d6E>:
    pub unsafe fn get_unchecked_mut<I>(self, index: I) -> *mut I::Output
    80021aa6:	7179                	addi	sp,sp,-48
    80021aa8:	f406                	sd	ra,40(sp)
    80021aaa:	e032                	sd	a2,0(sp)
    80021aac:	862e                	mv	a2,a1
    80021aae:	85aa                	mv	a1,a0
    80021ab0:	6502                	ld	a0,0(sp)
    80021ab2:	e82e                	sd	a1,16(sp)
    80021ab4:	ec32                	sd	a2,24(sp)
    80021ab6:	f02a                	sd	a0,32(sp)
        unsafe { index.get_unchecked_mut(self) }
    80021ab8:	00000097          	auipc	ra,0x0
    80021abc:	1c0080e7          	jalr	448(ra) # 80021c78 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17ha2bcc8944b7af021E>
    80021ac0:	e42a                	sd	a0,8(sp)
    80021ac2:	a009                	j	80021ac4 <_ZN4core3ptr7mut_ptr41_$LT$impl$u20$$BP$mut$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h83deb5daf75ed8d6E+0x1e>
    }
    80021ac4:	6522                	ld	a0,8(sp)
    80021ac6:	70a2                	ld	ra,40(sp)
    80021ac8:	6145                	addi	sp,sp,48
    80021aca:	8082                	ret

Disassembly of section .text._ZN9allocator16init_slice_empty17h3fa3ac5493bc8701E:

0000000080021acc <_ZN9allocator16init_slice_empty17h3fa3ac5493bc8701E>:
unsafe fn init_slice_empty<T>(cur: &mut usize, len: usize) -> *mut [T] {
    80021acc:	711d                	addi	sp,sp,-96
    80021ace:	ec86                	sd	ra,88(sp)
    80021ad0:	f42e                	sd	a1,40(sp)
    80021ad2:	f82a                	sd	a0,48(sp)
    80021ad4:	e0aa                	sd	a0,64(sp)
    80021ad6:	e4ae                	sd	a1,72(sp)
    let raw_ptr = *cur as *mut T;
    80021ad8:	6108                	ld	a0,0(a0)
    80021ada:	fc2a                	sd	a0,56(sp)
    80021adc:	e8aa                	sd	a0,80(sp)
    *cur += mem::size_of::<T>() * len;
    80021ade:	a009                	j	80021ae0 <_ZN9allocator16init_slice_empty17h3fa3ac5493bc8701E+0x14>
    80021ae0:	7522                	ld	a0,40(sp)
    80021ae2:	f02a                	sd	a0,32(sp)
    80021ae4:	4501                	li	a0,0
    80021ae6:	e139                	bnez	a0,80021b2c <.LBB8_8>
    80021ae8:	a009                	j	80021aea <_ZN9allocator16init_slice_empty17h3fa3ac5493bc8701E+0x1e>
    80021aea:	7502                	ld	a0,32(sp)
    80021aec:	75c2                	ld	a1,48(sp)
    80021aee:	618c                	ld	a1,0(a1)
    80021af0:	952e                	add	a0,a0,a1
    80021af2:	ec2a                	sd	a0,24(sp)
    80021af4:	04b56b63          	bltu	a0,a1,80021b4a <.LBB8_10>
    80021af8:	a009                	j	80021afa <_ZN9allocator16init_slice_empty17h3fa3ac5493bc8701E+0x2e>
    80021afa:	7622                	ld	a2,40(sp)
    80021afc:	7562                	ld	a0,56(sp)
    80021afe:	65e2                	ld	a1,24(sp)
    80021b00:	76c2                	ld	a3,48(sp)
    80021b02:	e28c                	sd	a1,0(a3)
    80021b04:	4581                	li	a1,0
    ptr::write_bytes(raw_ptr, 0, len);
    80021b06:	00000097          	auipc	ra,0x0
    80021b0a:	eb0080e7          	jalr	-336(ra) # 800219b6 <_ZN4core10intrinsics11write_bytes17hfabd30e5bfcb1b55E>
    80021b0e:	a009                	j	80021b10 <_ZN9allocator16init_slice_empty17h3fa3ac5493bc8701E+0x44>
    ptr::slice_from_raw_parts_mut(raw_ptr, len)
    80021b10:	75a2                	ld	a1,40(sp)
    80021b12:	7562                	ld	a0,56(sp)
    80021b14:	00000097          	auipc	ra,0x0
    80021b18:	b1a080e7          	jalr	-1254(ra) # 8002162e <_ZN4core3ptr24slice_from_raw_parts_mut17h39496eba86137ee5E>
    80021b1c:	e42a                	sd	a0,8(sp)
    80021b1e:	e82e                	sd	a1,16(sp)
    80021b20:	a009                	j	80021b22 <_ZN9allocator16init_slice_empty17h3fa3ac5493bc8701E+0x56>
}
    80021b22:	65c2                	ld	a1,16(sp)
    80021b24:	6522                	ld	a0,8(sp)
    80021b26:	60e6                	ld	ra,88(sp)
    80021b28:	6125                	addi	sp,sp,96
    80021b2a:	8082                	ret

0000000080021b2c <.LBB8_8>:
    *cur += mem::size_of::<T>() * len;
    80021b2c:	0000b517          	auipc	a0,0xb
    80021b30:	b7450513          	addi	a0,a0,-1164 # 8002c6a0 <str.0>

0000000080021b34 <.LBB8_9>:
    80021b34:	0000b617          	auipc	a2,0xb
    80021b38:	b5460613          	addi	a2,a2,-1196 # 8002c688 <.L__unnamed_1>
    80021b3c:	02100593          	li	a1,33
    80021b40:	00000097          	auipc	ra,0x0
    80021b44:	5bc080e7          	jalr	1468(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080021b4a <.LBB8_10>:
    80021b4a:	0000b517          	auipc	a0,0xb
    80021b4e:	b9650513          	addi	a0,a0,-1130 # 8002c6e0 <str.1>

0000000080021b52 <.LBB8_11>:
    80021b52:	0000b617          	auipc	a2,0xb
    80021b56:	b7660613          	addi	a2,a2,-1162 # 8002c6c8 <.L__unnamed_2>
    80021b5a:	45f1                	li	a1,28
    80021b5c:	00000097          	auipc	ra,0x0
    80021b60:	5a0080e7          	jalr	1440(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN9allocator16init_slice_empty17h570498bae7ef4c88E:

0000000080021b66 <_ZN9allocator16init_slice_empty17h570498bae7ef4c88E>:
unsafe fn init_slice_empty<T>(cur: &mut usize, len: usize) -> *mut [T] {
    80021b66:	711d                	addi	sp,sp,-96
    80021b68:	ec86                	sd	ra,88(sp)
    80021b6a:	f42e                	sd	a1,40(sp)
    80021b6c:	f82a                	sd	a0,48(sp)
    80021b6e:	e0aa                	sd	a0,64(sp)
    80021b70:	e4ae                	sd	a1,72(sp)
    let raw_ptr = *cur as *mut T;
    80021b72:	6108                	ld	a0,0(a0)
    80021b74:	fc2a                	sd	a0,56(sp)
    80021b76:	e8aa                	sd	a0,80(sp)
    *cur += mem::size_of::<T>() * len;
    80021b78:	a009                	j	80021b7a <_ZN9allocator16init_slice_empty17h570498bae7ef4c88E+0x14>
    80021b7a:	7522                	ld	a0,40(sp)
    80021b7c:	03000593          	li	a1,48
    80021b80:	02b50633          	mul	a2,a0,a1
    80021b84:	f032                	sd	a2,32(sp)
    80021b86:	02b53533          	mulhu	a0,a0,a1
    80021b8a:	4581                	li	a1,0
    80021b8c:	04b51463          	bne	a0,a1,80021bd4 <.LBB9_8>
    80021b90:	a009                	j	80021b92 <_ZN9allocator16init_slice_empty17h570498bae7ef4c88E+0x2c>
    80021b92:	7502                	ld	a0,32(sp)
    80021b94:	75c2                	ld	a1,48(sp)
    80021b96:	618c                	ld	a1,0(a1)
    80021b98:	952e                	add	a0,a0,a1
    80021b9a:	ec2a                	sd	a0,24(sp)
    80021b9c:	04b56b63          	bltu	a0,a1,80021bf2 <.LBB9_10>
    80021ba0:	a009                	j	80021ba2 <_ZN9allocator16init_slice_empty17h570498bae7ef4c88E+0x3c>
    80021ba2:	7622                	ld	a2,40(sp)
    80021ba4:	7562                	ld	a0,56(sp)
    80021ba6:	65e2                	ld	a1,24(sp)
    80021ba8:	76c2                	ld	a3,48(sp)
    80021baa:	e28c                	sd	a1,0(a3)
    80021bac:	4581                	li	a1,0
    ptr::write_bytes(raw_ptr, 0, len);
    80021bae:	00000097          	auipc	ra,0x0
    80021bb2:	de4080e7          	jalr	-540(ra) # 80021992 <_ZN4core10intrinsics11write_bytes17hd3155cf1c4a39b27E>
    80021bb6:	a009                	j	80021bb8 <_ZN9allocator16init_slice_empty17h570498bae7ef4c88E+0x52>
    ptr::slice_from_raw_parts_mut(raw_ptr, len)
    80021bb8:	75a2                	ld	a1,40(sp)
    80021bba:	7562                	ld	a0,56(sp)
    80021bbc:	00000097          	auipc	ra,0x0
    80021bc0:	aa4080e7          	jalr	-1372(ra) # 80021660 <_ZN4core3ptr24slice_from_raw_parts_mut17h9355ff019662f88fE>
    80021bc4:	e42a                	sd	a0,8(sp)
    80021bc6:	e82e                	sd	a1,16(sp)
    80021bc8:	a009                	j	80021bca <_ZN9allocator16init_slice_empty17h570498bae7ef4c88E+0x64>
}
    80021bca:	65c2                	ld	a1,16(sp)
    80021bcc:	6522                	ld	a0,8(sp)
    80021bce:	60e6                	ld	ra,88(sp)
    80021bd0:	6125                	addi	sp,sp,96
    80021bd2:	8082                	ret

0000000080021bd4 <.LBB9_8>:
    *cur += mem::size_of::<T>() * len;
    80021bd4:	0000b517          	auipc	a0,0xb
    80021bd8:	acc50513          	addi	a0,a0,-1332 # 8002c6a0 <str.0>

0000000080021bdc <.LBB9_9>:
    80021bdc:	0000b617          	auipc	a2,0xb
    80021be0:	aac60613          	addi	a2,a2,-1364 # 8002c688 <.L__unnamed_1>
    80021be4:	02100593          	li	a1,33
    80021be8:	00000097          	auipc	ra,0x0
    80021bec:	514080e7          	jalr	1300(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

0000000080021bf2 <.LBB9_10>:
    80021bf2:	0000b517          	auipc	a0,0xb
    80021bf6:	aee50513          	addi	a0,a0,-1298 # 8002c6e0 <str.1>

0000000080021bfa <.LBB9_11>:
    80021bfa:	0000b617          	auipc	a2,0xb
    80021bfe:	ace60613          	addi	a2,a2,-1330 # 8002c6c8 <.L__unnamed_2>
    80021c02:	45f1                	li	a1,28
    80021c04:	00000097          	auipc	ra,0x0
    80021c08:	4f8080e7          	jalr	1272(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$usize$GT$5clone17h2bd08456cf1cb28dE:

0000000080021c0e <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$usize$GT$5clone17h2bd08456cf1cb28dE>:
                    fn clone(&self) -> Self {
    80021c0e:	1141                	addi	sp,sp,-16
    80021c10:	e42a                	sd	a0,8(sp)
                        *self
    80021c12:	6108                	ld	a0,0(a0)
                    }
    80021c14:	0141                	addi	sp,sp,16
    80021c16:	8082                	ret

Disassembly of section .text._ZN4core3ptr8metadata18from_raw_parts_mut17hd3633c4516987911E:

0000000080021c18 <_ZN4core3ptr8metadata18from_raw_parts_mut17hd3633c4516987911E>:
///
/// See the documentation of [`from_raw_parts`] for more details.
#[unstable(feature = "ptr_metadata", issue = "81513")]
#[rustc_const_unstable(feature = "ptr_metadata", issue = "81513")]
#[inline]
pub const fn from_raw_parts_mut<T: ?Sized>(
    80021c18:	7179                	addi	sp,sp,-48
    80021c1a:	f02a                	sd	a0,32(sp)
    80021c1c:	f42e                	sd	a1,40(sp)
    metadata: <T as Pointee>::Metadata,
) -> *mut T {
    // SAFETY: Accessing the value from the `PtrRepr` union is safe since *const T
    // and PtrComponents<T> have the same memory layouts. Only std can make this
    // guarantee.
    unsafe { PtrRepr { components: PtrComponents { data_address, metadata } }.mut_ptr }
    80021c1e:	e82a                	sd	a0,16(sp)
    80021c20:	ec2e                	sd	a1,24(sp)
    80021c22:	e02a                	sd	a0,0(sp)
    80021c24:	e42e                	sd	a1,8(sp)
}
    80021c26:	6145                	addi	sp,sp,48
    80021c28:	8082                	ret

Disassembly of section .text._ZN4core3ptr8metadata18from_raw_parts_mut17hf93e4b94956554aaE:

0000000080021c2a <_ZN4core3ptr8metadata18from_raw_parts_mut17hf93e4b94956554aaE>:
pub const fn from_raw_parts_mut<T: ?Sized>(
    80021c2a:	7179                	addi	sp,sp,-48
    80021c2c:	f02a                	sd	a0,32(sp)
    80021c2e:	f42e                	sd	a1,40(sp)
    unsafe { PtrRepr { components: PtrComponents { data_address, metadata } }.mut_ptr }
    80021c30:	e82a                	sd	a0,16(sp)
    80021c32:	ec2e                	sd	a1,24(sp)
    80021c34:	e02a                	sd	a0,0(sp)
    80021c36:	e42e                	sd	a1,8(sp)
}
    80021c38:	6145                	addi	sp,sp,48
    80021c3a:	8082                	ret

Disassembly of section .text._ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hb36b3c40d6b3daa6E:

0000000080021c3c <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hb36b3c40d6b3daa6E>:
    unsafe fn get_unchecked(self, slice: *const [T]) -> *const T {
    80021c3c:	715d                	addi	sp,sp,-80
    80021c3e:	e486                	sd	ra,72(sp)
    80021c40:	e832                	sd	a2,16(sp)
    80021c42:	862e                	mv	a2,a1
    80021c44:	65c2                	ld	a1,16(sp)
    80021c46:	ec32                	sd	a2,24(sp)
    80021c48:	862a                	mv	a2,a0
    80021c4a:	6562                	ld	a0,24(sp)
    80021c4c:	f032                	sd	a2,32(sp)
    80021c4e:	f832                	sd	a2,48(sp)
    80021c50:	fc2a                	sd	a0,56(sp)
    80021c52:	e0ae                	sd	a1,64(sp)
        unsafe { slice.as_ptr().add(self) }
    80021c54:	ffffe097          	auipc	ra,0xffffe
    80021c58:	aca080e7          	jalr	-1334(ra) # 8001f71e <_ZN4core3ptr9const_ptr43_$LT$impl$u20$$BP$const$u20$$u5b$T$u5d$$GT$6as_ptr17hcf3eefd405b9d730E>
    80021c5c:	f42a                	sd	a0,40(sp)
    80021c5e:	a009                	j	80021c60 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hb36b3c40d6b3daa6E+0x24>
    80021c60:	7582                	ld	a1,32(sp)
    80021c62:	7522                	ld	a0,40(sp)
    80021c64:	ffffe097          	auipc	ra,0xffffe
    80021c68:	a10080e7          	jalr	-1520(ra) # 8001f674 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h3ef2f165a29b2365E>
    80021c6c:	e42a                	sd	a0,8(sp)
    80021c6e:	a009                	j	80021c70 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hb36b3c40d6b3daa6E+0x34>
    }
    80021c70:	6522                	ld	a0,8(sp)
    80021c72:	60a6                	ld	ra,72(sp)
    80021c74:	6161                	addi	sp,sp,80
    80021c76:	8082                	ret

Disassembly of section .text._ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17ha2bcc8944b7af021E:

0000000080021c78 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17ha2bcc8944b7af021E>:
    unsafe fn get_unchecked_mut(self, slice: *mut [T]) -> *mut T {
    80021c78:	715d                	addi	sp,sp,-80
    80021c7a:	e486                	sd	ra,72(sp)
    80021c7c:	e832                	sd	a2,16(sp)
    80021c7e:	862e                	mv	a2,a1
    80021c80:	65c2                	ld	a1,16(sp)
    80021c82:	ec32                	sd	a2,24(sp)
    80021c84:	862a                	mv	a2,a0
    80021c86:	6562                	ld	a0,24(sp)
    80021c88:	f032                	sd	a2,32(sp)
    80021c8a:	f832                	sd	a2,48(sp)
    80021c8c:	fc2a                	sd	a0,56(sp)
    80021c8e:	e0ae                	sd	a1,64(sp)
        unsafe { slice.as_mut_ptr().add(self) }
    80021c90:	00000097          	auipc	ra,0x0
    80021c94:	e0c080e7          	jalr	-500(ra) # 80021a9c <_ZN4core3ptr7mut_ptr41_$LT$impl$u20$$BP$mut$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h6f6f43a247b8051cE>
    80021c98:	f42a                	sd	a0,40(sp)
    80021c9a:	a009                	j	80021c9c <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17ha2bcc8944b7af021E+0x24>
    80021c9c:	7582                	ld	a1,32(sp)
    80021c9e:	7522                	ld	a0,40(sp)
    80021ca0:	00000097          	auipc	ra,0x0
    80021ca4:	d4e080e7          	jalr	-690(ra) # 800219ee <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h94cbb879d32de261E>
    80021ca8:	e42a                	sd	a0,8(sp)
    80021caa:	a009                	j	80021cac <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17ha2bcc8944b7af021E+0x34>
    }
    80021cac:	6522                	ld	a0,8(sp)
    80021cae:	60a6                	ld	ra,72(sp)
    80021cb0:	6161                	addi	sp,sp,80
    80021cb2:	8082                	ret

Disassembly of section .text._ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hc32ec1251c36865fE:

0000000080021cb4 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hc32ec1251c36865fE>:
    unsafe fn get_unchecked_mut(self, slice: *mut [T]) -> *mut T {
    80021cb4:	715d                	addi	sp,sp,-80
    80021cb6:	e486                	sd	ra,72(sp)
    80021cb8:	e832                	sd	a2,16(sp)
    80021cba:	862e                	mv	a2,a1
    80021cbc:	65c2                	ld	a1,16(sp)
    80021cbe:	ec32                	sd	a2,24(sp)
    80021cc0:	862a                	mv	a2,a0
    80021cc2:	6562                	ld	a0,24(sp)
    80021cc4:	f032                	sd	a2,32(sp)
    80021cc6:	f832                	sd	a2,48(sp)
    80021cc8:	fc2a                	sd	a0,56(sp)
    80021cca:	e0ae                	sd	a1,64(sp)
        unsafe { slice.as_mut_ptr().add(self) }
    80021ccc:	ffffe097          	auipc	ra,0xffffe
    80021cd0:	95e080e7          	jalr	-1698(ra) # 8001f62a <_ZN4core3ptr7mut_ptr41_$LT$impl$u20$$BP$mut$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h80398cc0098c8b0fE>
    80021cd4:	f42a                	sd	a0,40(sp)
    80021cd6:	a009                	j	80021cd8 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hc32ec1251c36865fE+0x24>
    80021cd8:	7582                	ld	a1,32(sp)
    80021cda:	7522                	ld	a0,40(sp)
    80021cdc:	ffffe097          	auipc	ra,0xffffe
    80021ce0:	8a8080e7          	jalr	-1880(ra) # 8001f584 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1d203f00cca684c1E>
    80021ce4:	e42a                	sd	a0,8(sp)
    80021ce6:	a009                	j	80021ce8 <_ZN75_$LT$usize$u20$as$u20$core..slice..index..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hc32ec1251c36865fE+0x34>
    }
    80021ce8:	6522                	ld	a0,8(sp)
    80021cea:	60a6                	ld	ra,72(sp)
    80021cec:	6161                	addi	sp,sp,80
    80021cee:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h1d891c09167259ccE:

0000000080021cf0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h1d891c09167259ccE>:
    pub unsafe fn as_mut<'a>(self) -> Option<&'a mut T> {
    80021cf0:	7179                	addi	sp,sp,-48
    80021cf2:	f406                	sd	ra,40(sp)
    80021cf4:	e42a                	sd	a0,8(sp)
    80021cf6:	f02a                	sd	a0,32(sp)
        if self.is_null() { None } else { unsafe { Some(&mut *self) } }
    80021cf8:	00000097          	auipc	ra,0x0
    80021cfc:	02a080e7          	jalr	42(ra) # 80021d22 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hb17ce9bdda6c1a43E>
    80021d00:	e82a                	sd	a0,16(sp)
    80021d02:	a009                	j	80021d04 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h1d891c09167259ccE+0x14>
    80021d04:	6542                	ld	a0,16(sp)
    80021d06:	4581                	li	a1,0
    80021d08:	00b50663          	beq	a0,a1,80021d14 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h1d891c09167259ccE+0x24>
    80021d0c:	a009                	j	80021d0e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h1d891c09167259ccE+0x1e>
    80021d0e:	4501                	li	a0,0
    80021d10:	ec2a                	sd	a0,24(sp)
    80021d12:	a021                	j	80021d1a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h1d891c09167259ccE+0x2a>
    80021d14:	6522                	ld	a0,8(sp)
    80021d16:	ec2a                	sd	a0,24(sp)
    80021d18:	a009                	j	80021d1a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6as_mut17h1d891c09167259ccE+0x2a>
    }
    80021d1a:	6562                	ld	a0,24(sp)
    80021d1c:	70a2                	ld	ra,40(sp)
    80021d1e:	6145                	addi	sp,sp,48
    80021d20:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hb17ce9bdda6c1a43E:

0000000080021d22 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hb17ce9bdda6c1a43E>:
    pub const fn is_null(self) -> bool {
    80021d22:	1101                	addi	sp,sp,-32
    80021d24:	ec06                	sd	ra,24(sp)
    80021d26:	e82a                	sd	a0,16(sp)
        (self as *mut u8).guaranteed_eq(null_mut())
    80021d28:	e42a                	sd	a0,8(sp)
    80021d2a:	a009                	j	80021d2c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hb17ce9bdda6c1a43E+0xa>
    80021d2c:	6522                	ld	a0,8(sp)
    80021d2e:	4581                	li	a1,0
    80021d30:	ffffe097          	auipc	ra,0xffffe
    80021d34:	83a080e7          	jalr	-1990(ra) # 8001f56a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$13guaranteed_eq17h568dab4191b83956E>
    80021d38:	e02a                	sd	a0,0(sp)
    80021d3a:	a009                	j	80021d3c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hb17ce9bdda6c1a43E+0x1a>
    }
    80021d3c:	6502                	ld	a0,0(sp)
    80021d3e:	60e2                	ld	ra,24(sp)
    80021d40:	6105                	addi	sp,sp,32
    80021d42:	8082                	ret

Disassembly of section .text._ZN4core3cmp3Ord3max17ha4f6a78e5e1bca09E:

0000000080021d44 <_ZN4core3cmp3Ord3max17ha4f6a78e5e1bca09E>:
    fn max(self, other: Self) -> Self
    80021d44:	1101                	addi	sp,sp,-32
    80021d46:	ec06                	sd	ra,24(sp)
    80021d48:	e42a                	sd	a0,8(sp)
    80021d4a:	e82e                	sd	a1,16(sp)
        max_by(self, other, Ord::cmp)
    80021d4c:	00000097          	auipc	ra,0x0
    80021d50:	030080e7          	jalr	48(ra) # 80021d7c <_ZN4core3cmp6max_by17h5ce2d208ffcd1be0E>
    80021d54:	e02a                	sd	a0,0(sp)
    80021d56:	a009                	j	80021d58 <_ZN4core3cmp3Ord3max17ha4f6a78e5e1bca09E+0x14>
    }
    80021d58:	6502                	ld	a0,0(sp)
    80021d5a:	60e2                	ld	ra,24(sp)
    80021d5c:	6105                	addi	sp,sp,32
    80021d5e:	8082                	ret

Disassembly of section .text._ZN4core3cmp3max17h3dc8da765fcdebd4E:

0000000080021d60 <_ZN4core3cmp3max17h3dc8da765fcdebd4E>:
pub fn max<T: Ord>(v1: T, v2: T) -> T {
    80021d60:	1101                	addi	sp,sp,-32
    80021d62:	ec06                	sd	ra,24(sp)
    80021d64:	e42a                	sd	a0,8(sp)
    80021d66:	e82e                	sd	a1,16(sp)
    v1.max(v2)
    80021d68:	00000097          	auipc	ra,0x0
    80021d6c:	fdc080e7          	jalr	-36(ra) # 80021d44 <_ZN4core3cmp3Ord3max17ha4f6a78e5e1bca09E>
    80021d70:	e02a                	sd	a0,0(sp)
    80021d72:	a009                	j	80021d74 <_ZN4core3cmp3max17h3dc8da765fcdebd4E+0x14>
}
    80021d74:	6502                	ld	a0,0(sp)
    80021d76:	60e2                	ld	ra,24(sp)
    80021d78:	6105                	addi	sp,sp,32
    80021d7a:	8082                	ret

Disassembly of section .text._ZN4core3cmp6max_by17h5ce2d208ffcd1be0E:

0000000080021d7c <_ZN4core3cmp6max_by17h5ce2d208ffcd1be0E>:
pub fn max_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {
    80021d7c:	715d                	addi	sp,sp,-80
    80021d7e:	e486                	sd	ra,72(sp)
    80021d80:	e42a                	sd	a0,8(sp)
    80021d82:	e82e                	sd	a1,16(sp)
    80021d84:	4505                	li	a0,1
    match compare(&v1, &v2) {
    80021d86:	02a10fa3          	sb	a0,63(sp)
    80021d8a:	02a10f23          	sb	a0,62(sp)
    80021d8e:	0028                	addi	a0,sp,8
    80021d90:	f42a                	sd	a0,40(sp)
    80021d92:	080c                	addi	a1,sp,16
    80021d94:	f82e                	sd	a1,48(sp)
    80021d96:	ffffe097          	auipc	ra,0xffffe
    80021d9a:	ad2080e7          	jalr	-1326(ra) # 8001f868 <_ZN4core3ops8function6FnOnce9call_once17h199d3571a582934bE>
    80021d9e:	02a103a3          	sb	a0,39(sp)
    80021da2:	a009                	j	80021da4 <_ZN4core3cmp6max_by17h5ce2d208ffcd1be0E+0x28>
        Ordering::Less | Ordering::Equal => v2,
    80021da4:	02710503          	lb	a0,39(sp)
    80021da8:	0505                	addi	a0,a0,1
    80021daa:	4589                	li	a1,2
    80021dac:	00b56a63          	bltu	a0,a1,80021dc0 <_ZN4core3cmp6max_by17h5ce2d208ffcd1be0E+0x44>
    80021db0:	a009                	j	80021db2 <_ZN4core3cmp6max_by17h5ce2d208ffcd1be0E+0x36>
    80021db2:	4501                	li	a0,0
        Ordering::Greater => v1,
    80021db4:	02a10fa3          	sb	a0,63(sp)
    80021db8:	6522                	ld	a0,8(sp)
    80021dba:	ec2a                	sd	a0,24(sp)
    match compare(&v1, &v2) {
    80021dbc:	a801                	j	80021dcc <_ZN4core3cmp6max_by17h5ce2d208ffcd1be0E+0x50>
    80021dbe:	0000                	unimp
    80021dc0:	4501                	li	a0,0
        Ordering::Less | Ordering::Equal => v2,
    80021dc2:	02a10f23          	sb	a0,62(sp)
    80021dc6:	6542                	ld	a0,16(sp)
    80021dc8:	ec2a                	sd	a0,24(sp)
    match compare(&v1, &v2) {
    80021dca:	a009                	j	80021dcc <_ZN4core3cmp6max_by17h5ce2d208ffcd1be0E+0x50>
}
    80021dcc:	03e14503          	lbu	a0,62(sp)
    80021dd0:	8905                	andi	a0,a0,1
    80021dd2:	e919                	bnez	a0,80021de8 <_ZN4core3cmp6max_by17h5ce2d208ffcd1be0E+0x6c>
    80021dd4:	a009                	j	80021dd6 <_ZN4core3cmp6max_by17h5ce2d208ffcd1be0E+0x5a>
    80021dd6:	03f14503          	lbu	a0,63(sp)
    80021dda:	8905                	andi	a0,a0,1
    80021ddc:	e519                	bnez	a0,80021dea <_ZN4core3cmp6max_by17h5ce2d208ffcd1be0E+0x6e>
    80021dde:	a009                	j	80021de0 <_ZN4core3cmp6max_by17h5ce2d208ffcd1be0E+0x64>
    80021de0:	6562                	ld	a0,24(sp)
    80021de2:	60a6                	ld	ra,72(sp)
    80021de4:	6161                	addi	sp,sp,80
    80021de6:	8082                	ret
    80021de8:	b7fd                	j	80021dd6 <_ZN4core3cmp6max_by17h5ce2d208ffcd1be0E+0x5a>
    80021dea:	bfdd                	j	80021de0 <_ZN4core3cmp6max_by17h5ce2d208ffcd1be0E+0x64>

Disassembly of section .text._ZN4core4sync6atomic11atomic_load17h7c28be5fa6ab6ea0E:

0000000080021dec <_ZN4core4sync6atomic11atomic_load17h7c28be5fa6ab6ea0E>:
unsafe fn atomic_load<T: Copy>(dst: *const T, order: Ordering) -> T {
    80021dec:	1101                	addi	sp,sp,-32
    80021dee:	e02a                	sd	a0,0(sp)
    80021df0:	00b10b23          	sb	a1,22(sp)
    80021df4:	ec2a                	sd	a0,24(sp)
            Acquire => intrinsics::atomic_load_acq(dst),
    80021df6:	0ff5f513          	andi	a0,a1,255
    80021dfa:	e42a                	sd	a0,8(sp)
    80021dfc:	6522                	ld	a0,8(sp)
    80021dfe:	050e                	slli	a0,a0,0x3

0000000080021e00 <.LBB1_12>:
    80021e00:	0000b597          	auipc	a1,0xb
    80021e04:	90058593          	addi	a1,a1,-1792 # 8002c700 <.LJTI1_0>
    80021e08:	952e                	add	a0,a0,a1
    80021e0a:	6108                	ld	a0,0(a0)
    80021e0c:	8502                	jr	a0

0000000080021e0e <.LBB1_13>:
            AcqRel => panic!("there is no such thing as an acquire/release load"),
    80021e0e:	0000b517          	auipc	a0,0xb
    80021e12:	91a50513          	addi	a0,a0,-1766 # 8002c728 <.L__unnamed_1>

0000000080021e16 <.LBB1_14>:
    80021e16:	0000b617          	auipc	a2,0xb
    80021e1a:	9c260613          	addi	a2,a2,-1598 # 8002c7d8 <.L__unnamed_2>
    80021e1e:	03100593          	li	a1,49
    80021e22:	00000097          	auipc	ra,0x0
    80021e26:	2da080e7          	jalr	730(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80021e2a:	0000                	unimp
	...

0000000080021e2e <.LBB1_4>:
            Acquire => intrinsics::atomic_load_acq(dst),
    80021e2e:	6502                	ld	a0,0(sp)
    80021e30:	00050503          	lb	a0,0(a0)
    80021e34:	0230000f          	fence	r,rw
    80021e38:	00a10ba3          	sb	a0,23(sp)
    80021e3c:	a009                	j	80021e3e <.LBB1_4+0x10>
        match order {
    80021e3e:	a091                	j	80021e82 <.LBB1_16+0x16>

0000000080021e40 <.LBB1_6>:
            Relaxed => intrinsics::atomic_load_relaxed(dst),
    80021e40:	6502                	ld	a0,0(sp)
    80021e42:	00050503          	lb	a0,0(a0)
    80021e46:	00a10ba3          	sb	a0,23(sp)
    80021e4a:	a009                	j	80021e4c <.LBB1_6+0xc>
        match order {
    80021e4c:	a81d                	j	80021e82 <.LBB1_16+0x16>

0000000080021e4e <.LBB1_8>:
            SeqCst => intrinsics::atomic_load(dst),
    80021e4e:	6502                	ld	a0,0(sp)
    80021e50:	0330000f          	fence	rw,rw
    80021e54:	00050503          	lb	a0,0(a0)
    80021e58:	0230000f          	fence	r,rw
    80021e5c:	00a10ba3          	sb	a0,23(sp)
    80021e60:	a009                	j	80021e62 <.LBB1_8+0x14>
        match order {
    80021e62:	a005                	j	80021e82 <.LBB1_16+0x16>

0000000080021e64 <.LBB1_10>:
            Release => panic!("there is no such thing as a release load"),
    80021e64:	0000b517          	auipc	a0,0xb
    80021e68:	98c50513          	addi	a0,a0,-1652 # 8002c7f0 <.L__unnamed_3>

0000000080021e6c <.LBB1_16>:
    80021e6c:	0000b617          	auipc	a2,0xb
    80021e70:	9ac60613          	addi	a2,a2,-1620 # 8002c818 <.L__unnamed_4>
    80021e74:	02800593          	li	a1,40
    80021e78:	00000097          	auipc	ra,0x0
    80021e7c:	284080e7          	jalr	644(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80021e80:	0000                	unimp
}
    80021e82:	01710503          	lb	a0,23(sp)
    80021e86:	6105                	addi	sp,sp,32
    80021e88:	8082                	ret

Disassembly of section .text._ZN4core3fmt10ArgumentV13new17ha67f1954b9155e6dE:

0000000080021e8a <_ZN4core3fmt10ArgumentV13new17ha67f1954b9155e6dE>:
    pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {
    80021e8a:	715d                	addi	sp,sp,-80
    80021e8c:	e82a                	sd	a0,16(sp)
    80021e8e:	f82a                	sd	a0,48(sp)
    80021e90:	fc2e                	sd	a1,56(sp)
        unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }
    80021e92:	e0ae                	sd	a1,64(sp)
    80021e94:	ec2e                	sd	a1,24(sp)
    80021e96:	a009                	j	80021e98 <_ZN4core3fmt10ArgumentV13new17ha67f1954b9155e6dE+0xe>
    80021e98:	6542                	ld	a0,16(sp)
    80021e9a:	e4aa                	sd	a0,72(sp)
    80021e9c:	e42a                	sd	a0,8(sp)
    80021e9e:	a009                	j	80021ea0 <_ZN4core3fmt10ArgumentV13new17ha67f1954b9155e6dE+0x16>
    80021ea0:	65e2                	ld	a1,24(sp)
    80021ea2:	6522                	ld	a0,8(sp)
    80021ea4:	f02a                	sd	a0,32(sp)
    80021ea6:	f42e                	sd	a1,40(sp)
    }
    80021ea8:	6161                	addi	sp,sp,80
    80021eaa:	8082                	ret

Disassembly of section .text._ZN4core4cell19UnsafeCell$LT$T$GT$3get17h34ebeaa57b5c7248E:

0000000080021eac <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h34ebeaa57b5c7248E>:
    pub const fn get(&self) -> *mut T {
    80021eac:	1141                	addi	sp,sp,-16
    80021eae:	e42a                	sd	a0,8(sp)
    }
    80021eb0:	0141                	addi	sp,sp,16
    80021eb2:	8082                	ret

Disassembly of section .text._ZN4core4cell19UnsafeCell$LT$T$GT$3new17h3aa2f2534c029263E:

0000000080021eb4 <_ZN4core4cell19UnsafeCell$LT$T$GT$3new17h3aa2f2534c029263E>:
    pub const fn new(value: T) -> UnsafeCell<T> {
    80021eb4:	1141                	addi	sp,sp,-16
    80021eb6:	00a107a3          	sb	a0,15(sp)
        UnsafeCell { value }
    80021eba:	00a10723          	sb	a0,14(sp)
    }
    80021ebe:	0141                	addi	sp,sp,16
    80021ec0:	8082                	ret

Disassembly of section .text._ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$13guaranteed_eq17h32ea8c99c0b8220dE:

0000000080021ec2 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$13guaranteed_eq17h32ea8c99c0b8220dE>:
    pub const fn guaranteed_eq(self, other: *mut T) -> bool
    80021ec2:	1101                	addi	sp,sp,-32
    80021ec4:	e42a                	sd	a0,8(sp)
    80021ec6:	e82e                	sd	a1,16(sp)
        intrinsics::ptr_guaranteed_eq(self as *const _, other as *const _)
    80021ec8:	8d2d                	xor	a0,a0,a1
    80021eca:	00153513          	seqz	a0,a0
    80021ece:	e02a                	sd	a0,0(sp)
    80021ed0:	00a10fa3          	sb	a0,31(sp)
    80021ed4:	a009                	j	80021ed6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$13guaranteed_eq17h32ea8c99c0b8220dE+0x14>
    }
    80021ed6:	6502                	ld	a0,0(sp)
    80021ed8:	6105                	addi	sp,sp,32
    80021eda:	8082                	ret

Disassembly of section .text._ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$13guaranteed_eq17h0ce622e77376dc6cE:

0000000080021edc <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$13guaranteed_eq17h0ce622e77376dc6cE>:
    pub const fn guaranteed_eq(self, other: *const T) -> bool
    80021edc:	1101                	addi	sp,sp,-32
    80021ede:	e42a                	sd	a0,8(sp)
    80021ee0:	e82e                	sd	a1,16(sp)
        intrinsics::ptr_guaranteed_eq(self, other)
    80021ee2:	8d2d                	xor	a0,a0,a1
    80021ee4:	00153513          	seqz	a0,a0
    80021ee8:	e02a                	sd	a0,0(sp)
    80021eea:	00a10fa3          	sb	a0,31(sp)
    80021eee:	a009                	j	80021ef0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$13guaranteed_eq17h0ce622e77376dc6cE+0x14>
    }
    80021ef0:	6502                	ld	a0,0(sp)
    80021ef2:	6105                	addi	sp,sp,32
    80021ef4:	8082                	ret

Disassembly of section .text.unlikely._ZN5alloc5alloc18handle_alloc_error17haa1b1c0a80642c5aE:

0000000080021ef6 <_ZN5alloc5alloc18handle_alloc_error17haa1b1c0a80642c5aE>:
    80021ef6:	1141                	addi	sp,sp,-16
    80021ef8:	e406                	sd	ra,8(sp)
    80021efa:	ffffd097          	auipc	ra,0xffffd
    80021efe:	606080e7          	jalr	1542(ra) # 8001f500 <__rust_alloc_error_handler>
	...

Disassembly of section .text.__rg_oom:

0000000080021f04 <__rg_oom>:
    80021f04:	1141                	addi	sp,sp,-16
    80021f06:	e406                	sd	ra,8(sp)
    80021f08:	fffea097          	auipc	ra,0xfffea
    80021f0c:	7f4080e7          	jalr	2036(ra) # 8000c6fc <rust_oom>
	...

Disassembly of section .text._ZN5alloc7raw_vec17capacity_overflow17hae1c560931d103e4E:

0000000080021f12 <_ZN5alloc7raw_vec17capacity_overflow17hae1c560931d103e4E>:
    80021f12:	1141                	addi	sp,sp,-16
    80021f14:	e406                	sd	ra,8(sp)

0000000080021f16 <.LBB24_1>:
    80021f16:	0000b517          	auipc	a0,0xb
    80021f1a:	93650513          	addi	a0,a0,-1738 # 8002c84c <.Lanon.44beac3b33b5e076e135e766d0ea4256.19>

0000000080021f1e <.LBB24_2>:
    80021f1e:	0000b617          	auipc	a2,0xb
    80021f22:	94260613          	addi	a2,a2,-1726 # 8002c860 <.Lanon.44beac3b33b5e076e135e766d0ea4256.20>
    80021f26:	45c5                	li	a1,17
    80021f28:	00000097          	auipc	ra,0x0
    80021f2c:	1d4080e7          	jalr	468(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN4core4cell19UnsafeCell$LT$T$GT$3get17hcdc438fb74b7ecc8E:

0000000080021f32 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17hcdc438fb74b7ecc8E>:
    pub const fn get(&self) -> *mut T {
    80021f32:	1141                	addi	sp,sp,-16
    80021f34:	e42a                	sd	a0,8(sp)
    }
    80021f36:	0141                	addi	sp,sp,16
    80021f38:	8082                	ret

Disassembly of section .text._ZN4core3ops8function6FnOnce9call_once17h6147212214d3120cE:

0000000080021f3a <_ZN4core3ops8function6FnOnce9call_once17h6147212214d3120cE>:
    80021f3a:	6108                	ld	a0,0(a0)
    80021f3c:	a001                	j	80021f3c <_ZN4core3ops8function6FnOnce9call_once17h6147212214d3120cE+0x2>

Disassembly of section .text._ZN4core3ptr102drop_in_place$LT$$RF$core..iter..adapters..copied..Copied$LT$core..slice..iter..Iter$LT$u8$GT$$GT$$GT$17hedf53d70a7e54828E:

0000000080021f3e <_ZN4core3ptr102drop_in_place$LT$$RF$core..iter..adapters..copied..Copied$LT$core..slice..iter..Iter$LT$u8$GT$$GT$$GT$17hedf53d70a7e54828E>:
    80021f3e:	8082                	ret

Disassembly of section .text._ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17hafa23fe214721e38E:

0000000080021f40 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17hafa23fe214721e38E>:
    80021f40:	715d                	addi	sp,sp,-80
    80021f42:	e486                	sd	ra,72(sp)
    80021f44:	e0a2                	sd	s0,64(sp)
    80021f46:	fc26                	sd	s1,56(sp)
    80021f48:	842e                	mv	s0,a1
    80021f4a:	84aa                	mv	s1,a0
    80021f4c:	00002097          	auipc	ra,0x2
    80021f50:	3e2080e7          	jalr	994(ra) # 8002432e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h46dfaf96577b17ecE>
    80021f54:	e51d                	bnez	a0,80021f82 <.LBB78_5+0x18>
    80021f56:	7008                	ld	a0,32(s0)
    80021f58:	740c                	ld	a1,40(s0)

0000000080021f5a <.LBB78_4>:
    80021f5a:	0000b617          	auipc	a2,0xb
    80021f5e:	98660613          	addi	a2,a2,-1658 # 8002c8e0 <.Lanon.f077182aff5f58a5660f14b1290425e3.134>
    80021f62:	e432                	sd	a2,8(sp)
    80021f64:	4605                	li	a2,1
    80021f66:	e832                	sd	a2,16(sp)
    80021f68:	ec02                	sd	zero,24(sp)

0000000080021f6a <.LBB78_5>:
    80021f6a:	0000b617          	auipc	a2,0xb
    80021f6e:	96e60613          	addi	a2,a2,-1682 # 8002c8d8 <.Lanon.f077182aff5f58a5660f14b1290425e3.133>
    80021f72:	f432                	sd	a2,40(sp)
    80021f74:	f802                	sd	zero,48(sp)
    80021f76:	0030                	addi	a2,sp,8
    80021f78:	00001097          	auipc	ra,0x1
    80021f7c:	9e6080e7          	jalr	-1562(ra) # 8002295e <_ZN4core3fmt5write17hf87af17b3ec995a2E>
    80021f80:	c519                	beqz	a0,80021f8e <.LBB78_5+0x24>
    80021f82:	4505                	li	a0,1
    80021f84:	74e2                	ld	s1,56(sp)
    80021f86:	6406                	ld	s0,64(sp)
    80021f88:	60a6                	ld	ra,72(sp)
    80021f8a:	6161                	addi	sp,sp,80
    80021f8c:	8082                	ret
    80021f8e:	00848513          	addi	a0,s1,8
    80021f92:	85a2                	mv	a1,s0
    80021f94:	74e2                	ld	s1,56(sp)
    80021f96:	6406                	ld	s0,64(sp)
    80021f98:	60a6                	ld	ra,72(sp)
    80021f9a:	6161                	addi	sp,sp,80
    80021f9c:	00002317          	auipc	t1,0x2
    80021fa0:	39230067          	jr	914(t1) # 8002432e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h46dfaf96577b17ecE>

Disassembly of section .text._ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h43d5b99303c08f4dE:

0000000080021fa4 <_ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h43d5b99303c08f4dE>:
    80021fa4:	032d3537          	lui	a0,0x32d3
    80021fa8:	2895051b          	addiw	a0,a0,649
    80021fac:	0532                	slli	a0,a0,0xc
    80021fae:	48950513          	addi	a0,a0,1161 # 32d3489 <.Lline_table_start0+0x329cb22>
    80021fb2:	0532                	slli	a0,a0,0xc
    80021fb4:	69f50513          	addi	a0,a0,1695
    80021fb8:	0532                	slli	a0,a0,0xc
    80021fba:	85850513          	addi	a0,a0,-1960
    80021fbe:	8082                	ret

Disassembly of section .text.unlikely._ZN4core6option13expect_failed17h0edd1e4bb5304a50E:

0000000080021fc0 <_ZN4core6option13expect_failed17h0edd1e4bb5304a50E>:
    80021fc0:	711d                	addi	sp,sp,-96
    80021fc2:	ec86                	sd	ra,88(sp)
    80021fc4:	e42a                	sd	a0,8(sp)
    80021fc6:	e82e                	sd	a1,16(sp)
    80021fc8:	0028                	addi	a0,sp,8
    80021fca:	e4aa                	sd	a0,72(sp)

0000000080021fcc <.LBB119_1>:
    80021fcc:	00003517          	auipc	a0,0x3
    80021fd0:	ce450513          	addi	a0,a0,-796 # 80024cb0 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h65c6410ca8a4d3e4E>
    80021fd4:	e8aa                	sd	a0,80(sp)

0000000080021fd6 <.LBB119_2>:
    80021fd6:	0000b517          	auipc	a0,0xb
    80021fda:	94a50513          	addi	a0,a0,-1718 # 8002c920 <.Lanon.f077182aff5f58a5660f14b1290425e3.169>
    80021fde:	ec2a                	sd	a0,24(sp)
    80021fe0:	4505                	li	a0,1
    80021fe2:	f02a                	sd	a0,32(sp)
    80021fe4:	f402                	sd	zero,40(sp)
    80021fe6:	00ac                	addi	a1,sp,72
    80021fe8:	fc2e                	sd	a1,56(sp)
    80021fea:	e0aa                	sd	a0,64(sp)
    80021fec:	0828                	addi	a0,sp,24
    80021fee:	85b2                	mv	a1,a2
    80021ff0:	00000097          	auipc	ra,0x0
    80021ff4:	178080e7          	jalr	376(ra) # 80022168 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
	...

Disassembly of section .text._ZN61_$LT$core..panic..PanicInfo$u20$as$u20$core..fmt..Display$GT$3fmt17h17913560c4fcc8feE:

0000000080021ffa <_ZN61_$LT$core..panic..PanicInfo$u20$as$u20$core..fmt..Display$GT$3fmt17h17913560c4fcc8feE>:
    80021ffa:	7175                	addi	sp,sp,-144
    80021ffc:	e506                	sd	ra,136(sp)
    80021ffe:	e122                	sd	s0,128(sp)
    80022000:	fca6                	sd	s1,120(sp)
    80022002:	f8ca                	sd	s2,112(sp)
    80022004:	f4ce                	sd	s3,104(sp)
    80022006:	0285b983          	ld	s3,40(a1)
    8002200a:	7184                	ld	s1,32(a1)
    8002200c:	0189b683          	ld	a3,24(s3)
    80022010:	892a                	mv	s2,a0

0000000080022012 <.LBB123_8>:
    80022012:	0000b597          	auipc	a1,0xb
    80022016:	93e58593          	addi	a1,a1,-1730 # 8002c950 <.Lanon.f077182aff5f58a5660f14b1290425e3.171>
    8002201a:	4631                	li	a2,12
    8002201c:	8526                	mv	a0,s1
    8002201e:	9682                	jalr	a3
    80022020:	4405                	li	s0,1
    80022022:	e569                	bnez	a0,800220ec <.LBB123_14+0x26>
    80022024:	01093503          	ld	a0,16(s2)
    80022028:	c909                	beqz	a0,8002203a <.LBB123_9+0xa>
    8002202a:	e02a                	sd	a0,0(sp)
    8002202c:	850a                	mv	a0,sp
    8002202e:	e42a                	sd	a0,8(sp)

0000000080022030 <.LBB123_9>:
    80022030:	00003517          	auipc	a0,0x3
    80022034:	c9050513          	addi	a0,a0,-880 # 80024cc0 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h78c3d125c3c6a2c3E>
    80022038:	a835                	j	80022074 <.LBB123_10+0x8>
    8002203a:	00893503          	ld	a0,8(s2)
    8002203e:	00093403          	ld	s0,0(s2)
    80022042:	6d0c                	ld	a1,24(a0)
    80022044:	8522                	mv	a0,s0
    80022046:	9582                	jalr	a1
    80022048:	007ef5b7          	lui	a1,0x7ef
    8002204c:	2a95859b          	addiw	a1,a1,681
    80022050:	05ba                	slli	a1,a1,0xe
    80022052:	7bb58593          	addi	a1,a1,1979 # 7ef7bb <.Lline_table_start0+0x7b8e54>
    80022056:	05b2                	slli	a1,a1,0xc
    80022058:	31f58593          	addi	a1,a1,799
    8002205c:	05ba                	slli	a1,a1,0xe
    8002205e:	cf458593          	addi	a1,a1,-780
    80022062:	02b51e63          	bne	a0,a1,8002209e <.LBB123_11+0x28>
    80022066:	e022                	sd	s0,0(sp)
    80022068:	850a                	mv	a0,sp
    8002206a:	e42a                	sd	a0,8(sp)

000000008002206c <.LBB123_10>:
    8002206c:	00003517          	auipc	a0,0x3
    80022070:	c8650513          	addi	a0,a0,-890 # 80024cf2 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h874d6ce7f8524becE>
    80022074:	e82a                	sd	a0,16(sp)

0000000080022076 <.LBB123_11>:
    80022076:	0000b517          	auipc	a0,0xb
    8002207a:	8ea50513          	addi	a0,a0,-1814 # 8002c960 <.Lanon.f077182aff5f58a5660f14b1290425e3.174>
    8002207e:	fc2a                	sd	a0,56(sp)
    80022080:	4509                	li	a0,2
    80022082:	e0aa                	sd	a0,64(sp)
    80022084:	e482                	sd	zero,72(sp)
    80022086:	0028                	addi	a0,sp,8
    80022088:	ecaa                	sd	a0,88(sp)
    8002208a:	4405                	li	s0,1
    8002208c:	f0a2                	sd	s0,96(sp)
    8002208e:	1830                	addi	a2,sp,56
    80022090:	8526                	mv	a0,s1
    80022092:	85ce                	mv	a1,s3
    80022094:	00001097          	auipc	ra,0x1
    80022098:	8ca080e7          	jalr	-1846(ra) # 8002295e <_ZN4core3fmt5write17hf87af17b3ec995a2E>
    8002209c:	e921                	bnez	a0,800220ec <.LBB123_14+0x26>
    8002209e:	01893503          	ld	a0,24(s2)
    800220a2:	01050593          	addi	a1,a0,16
    800220a6:	01450613          	addi	a2,a0,20
    800220aa:	e42a                	sd	a0,8(sp)

00000000800220ac <.LBB123_12>:
    800220ac:	00003517          	auipc	a0,0x3
    800220b0:	c0450513          	addi	a0,a0,-1020 # 80024cb0 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h65c6410ca8a4d3e4E>
    800220b4:	e82a                	sd	a0,16(sp)
    800220b6:	ec2e                	sd	a1,24(sp)

00000000800220b8 <.LBB123_13>:
    800220b8:	00002517          	auipc	a0,0x2
    800220bc:	5e450513          	addi	a0,a0,1508 # 8002469c <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17h19c6429b08a072b1E>
    800220c0:	f02a                	sd	a0,32(sp)
    800220c2:	f432                	sd	a2,40(sp)
    800220c4:	f82a                	sd	a0,48(sp)

00000000800220c6 <.LBB123_14>:
    800220c6:	0000b517          	auipc	a0,0xb
    800220ca:	8c250513          	addi	a0,a0,-1854 # 8002c988 <.Lanon.f077182aff5f58a5660f14b1290425e3.176>
    800220ce:	fc2a                	sd	a0,56(sp)
    800220d0:	450d                	li	a0,3
    800220d2:	e0aa                	sd	a0,64(sp)
    800220d4:	e482                	sd	zero,72(sp)
    800220d6:	002c                	addi	a1,sp,8
    800220d8:	ecae                	sd	a1,88(sp)
    800220da:	f0aa                	sd	a0,96(sp)
    800220dc:	1830                	addi	a2,sp,56
    800220de:	8526                	mv	a0,s1
    800220e0:	85ce                	mv	a1,s3
    800220e2:	00001097          	auipc	ra,0x1
    800220e6:	87c080e7          	jalr	-1924(ra) # 8002295e <_ZN4core3fmt5write17hf87af17b3ec995a2E>
    800220ea:	842a                	mv	s0,a0
    800220ec:	8522                	mv	a0,s0
    800220ee:	79a6                	ld	s3,104(sp)
    800220f0:	7946                	ld	s2,112(sp)
    800220f2:	74e6                	ld	s1,120(sp)
    800220f4:	640a                	ld	s0,128(sp)
    800220f6:	60aa                	ld	ra,136(sp)
    800220f8:	6149                	addi	sp,sp,144
    800220fa:	8082                	ret

Disassembly of section .text.unlikely._ZN4core9panicking5panic17h153a4ce3c60ede6bE:

00000000800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>:
    800220fc:	715d                	addi	sp,sp,-80
    800220fe:	e486                	sd	ra,72(sp)
    80022100:	fc2a                	sd	a0,56(sp)
    80022102:	e0ae                	sd	a1,64(sp)
    80022104:	1828                	addi	a0,sp,56
    80022106:	e42a                	sd	a0,8(sp)
    80022108:	4505                	li	a0,1
    8002210a:	e82a                	sd	a0,16(sp)
    8002210c:	ec02                	sd	zero,24(sp)

000000008002210e <.LBB130_1>:
    8002210e:	0000a517          	auipc	a0,0xa
    80022112:	7ca50513          	addi	a0,a0,1994 # 8002c8d8 <.Lanon.f077182aff5f58a5660f14b1290425e3.133>
    80022116:	f42a                	sd	a0,40(sp)
    80022118:	f802                	sd	zero,48(sp)
    8002211a:	0028                	addi	a0,sp,8
    8002211c:	85b2                	mv	a1,a2
    8002211e:	00000097          	auipc	ra,0x0
    80022122:	04a080e7          	jalr	74(ra) # 80022168 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
	...

Disassembly of section .text.unlikely._ZN4core9panicking18panic_bounds_check17h8e071db613335003E:

0000000080022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>:
    80022128:	7159                	addi	sp,sp,-112
    8002212a:	f486                	sd	ra,104(sp)
    8002212c:	e42a                	sd	a0,8(sp)
    8002212e:	e82e                	sd	a1,16(sp)
    80022130:	0808                	addi	a0,sp,16
    80022132:	e4aa                	sd	a0,72(sp)

0000000080022134 <.LBB131_1>:
    80022134:	00002517          	auipc	a0,0x2
    80022138:	72450513          	addi	a0,a0,1828 # 80024858 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h9c6c4af1578f7c29E>
    8002213c:	e8aa                	sd	a0,80(sp)
    8002213e:	002c                	addi	a1,sp,8
    80022140:	ecae                	sd	a1,88(sp)
    80022142:	f0aa                	sd	a0,96(sp)

0000000080022144 <.LBB131_2>:
    80022144:	0000b517          	auipc	a0,0xb
    80022148:	88c50513          	addi	a0,a0,-1908 # 8002c9d0 <.Lanon.f077182aff5f58a5660f14b1290425e3.179>
    8002214c:	ec2a                	sd	a0,24(sp)
    8002214e:	4509                	li	a0,2
    80022150:	f02a                	sd	a0,32(sp)
    80022152:	f402                	sd	zero,40(sp)
    80022154:	00ac                	addi	a1,sp,72
    80022156:	fc2e                	sd	a1,56(sp)
    80022158:	e0aa                	sd	a0,64(sp)
    8002215a:	0828                	addi	a0,sp,24
    8002215c:	85b2                	mv	a1,a2
    8002215e:	00000097          	auipc	ra,0x0
    80022162:	00a080e7          	jalr	10(ra) # 80022168 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
	...

Disassembly of section .text.unlikely._ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E:

0000000080022168 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>:
    80022168:	7179                	addi	sp,sp,-48
    8002216a:	f406                	sd	ra,40(sp)

000000008002216c <.LBB132_1>:
    8002216c:	0000a617          	auipc	a2,0xa
    80022170:	76c60613          	addi	a2,a2,1900 # 8002c8d8 <.Lanon.f077182aff5f58a5660f14b1290425e3.133>
    80022174:	e432                	sd	a2,8(sp)

0000000080022176 <.LBB132_2>:
    80022176:	0000a617          	auipc	a2,0xa
    8002217a:	7ba60613          	addi	a2,a2,1978 # 8002c930 <.Lanon.f077182aff5f58a5660f14b1290425e3.170>
    8002217e:	e832                	sd	a2,16(sp)
    80022180:	ec2a                	sd	a0,24(sp)
    80022182:	f02e                	sd	a1,32(sp)
    80022184:	0028                	addi	a0,sp,8
    80022186:	ffffc097          	auipc	ra,0xffffc
    8002218a:	aa2080e7          	jalr	-1374(ra) # 8001dc28 <rust_begin_unwind>
	...

Disassembly of section .text._ZN4core9panicking19assert_failed_inner17h4615d2e87cda8e50E:

0000000080022190 <_ZN4core9panicking19assert_failed_inner17h4615d2e87cda8e50E>:
    80022190:	7115                	addi	sp,sp,-224
    80022192:	ed86                	sd	ra,216(sp)
    80022194:	e42e                	sd	a1,8(sp)
    80022196:	e832                	sd	a2,16(sp)
    80022198:	ec36                	sd	a3,24(sp)
    8002219a:	0ff57513          	andi	a0,a0,255
    8002219e:	f03a                	sd	a4,32(sp)
    800221a0:	c909                	beqz	a0,800221b2 <.LBB135_10>
    800221a2:	4585                	li	a1,1
    800221a4:	04b51d63          	bne	a0,a1,800221fe <.LBB135_14>

00000000800221a8 <.LBB135_9>:
    800221a8:	0000b517          	auipc	a0,0xb
    800221ac:	84f50513          	addi	a0,a0,-1969 # 8002c9f7 <.Lanon.f077182aff5f58a5660f14b1290425e3.182>
    800221b0:	a029                	j	800221ba <.LBB135_10+0x8>

00000000800221b2 <.LBB135_10>:
    800221b2:	0000b517          	auipc	a0,0xb
    800221b6:	84750513          	addi	a0,a0,-1977 # 8002c9f9 <.Lanon.f077182aff5f58a5660f14b1290425e3.183>
    800221ba:	f42a                	sd	a0,40(sp)
    800221bc:	4509                	li	a0,2
    800221be:	638c                	ld	a1,0(a5)
    800221c0:	f82a                	sd	a0,48(sp)
    800221c2:	e5b9                	bnez	a1,80022210 <.LBB135_14+0x12>
    800221c4:	1028                	addi	a0,sp,40
    800221c6:	f4aa                	sd	a0,104(sp)

00000000800221c8 <.LBB135_11>:
    800221c8:	00003517          	auipc	a0,0x3
    800221cc:	ae850513          	addi	a0,a0,-1304 # 80024cb0 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h65c6410ca8a4d3e4E>
    800221d0:	f8aa                	sd	a0,112(sp)
    800221d2:	0028                	addi	a0,sp,8
    800221d4:	fcaa                	sd	a0,120(sp)

00000000800221d6 <.LBB135_12>:
    800221d6:	00003517          	auipc	a0,0x3
    800221da:	9d050513          	addi	a0,a0,-1584 # 80024ba6 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h729ad47dd83507edE>
    800221de:	e12a                	sd	a0,128(sp)
    800221e0:	082c                	addi	a1,sp,24
    800221e2:	e52e                	sd	a1,136(sp)
    800221e4:	e92a                	sd	a0,144(sp)

00000000800221e6 <.LBB135_13>:
    800221e6:	0000b517          	auipc	a0,0xb
    800221ea:	89a50513          	addi	a0,a0,-1894 # 8002ca80 <.Lanon.f077182aff5f58a5660f14b1290425e3.190>
    800221ee:	f52a                	sd	a0,168(sp)
    800221f0:	4511                	li	a0,4
    800221f2:	f92a                	sd	a0,176(sp)
    800221f4:	fd02                	sd	zero,184(sp)
    800221f6:	10a8                	addi	a0,sp,104
    800221f8:	e5aa                	sd	a0,200(sp)
    800221fa:	450d                	li	a0,3
    800221fc:	a885                	j	8002226c <.LBB135_18+0x14>

00000000800221fe <.LBB135_14>:
    800221fe:	0000a517          	auipc	a0,0xa
    80022202:	7f250513          	addi	a0,a0,2034 # 8002c9f0 <.Lanon.f077182aff5f58a5660f14b1290425e3.181>
    80022206:	f42a                	sd	a0,40(sp)
    80022208:	451d                	li	a0,7
    8002220a:	638c                	ld	a1,0(a5)
    8002220c:	f82a                	sd	a0,48(sp)
    8002220e:	d9dd                	beqz	a1,800221c4 <.LBB135_10+0x12>
    80022210:	7788                	ld	a0,40(a5)
    80022212:	738c                	ld	a1,32(a5)
    80022214:	f0aa                	sd	a0,96(sp)
    80022216:	ecae                	sd	a1,88(sp)
    80022218:	6f88                	ld	a0,24(a5)
    8002221a:	6b8c                	ld	a1,16(a5)
    8002221c:	6790                	ld	a2,8(a5)
    8002221e:	6394                	ld	a3,0(a5)
    80022220:	e8aa                	sd	a0,80(sp)
    80022222:	e4ae                	sd	a1,72(sp)
    80022224:	e0b2                	sd	a2,64(sp)
    80022226:	fc36                	sd	a3,56(sp)
    80022228:	1028                	addi	a0,sp,40
    8002222a:	f4aa                	sd	a0,104(sp)

000000008002222c <.LBB135_15>:
    8002222c:	00003517          	auipc	a0,0x3
    80022230:	a8450513          	addi	a0,a0,-1404 # 80024cb0 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h65c6410ca8a4d3e4E>
    80022234:	f8aa                	sd	a0,112(sp)
    80022236:	0028                	addi	a0,sp,8
    80022238:	fcaa                	sd	a0,120(sp)

000000008002223a <.LBB135_16>:
    8002223a:	00003517          	auipc	a0,0x3
    8002223e:	96c50513          	addi	a0,a0,-1684 # 80024ba6 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h729ad47dd83507edE>
    80022242:	e12a                	sd	a0,128(sp)
    80022244:	082c                	addi	a1,sp,24
    80022246:	e52e                	sd	a1,136(sp)
    80022248:	e92a                	sd	a0,144(sp)
    8002224a:	1828                	addi	a0,sp,56
    8002224c:	ed2a                	sd	a0,152(sp)

000000008002224e <.LBB135_17>:
    8002224e:	00000517          	auipc	a0,0x0
    80022252:	6de50513          	addi	a0,a0,1758 # 8002292c <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17hff7b3fee0b75a94eE>
    80022256:	f12a                	sd	a0,160(sp)

0000000080022258 <.LBB135_18>:
    80022258:	0000a517          	auipc	a0,0xa
    8002225c:	7e050513          	addi	a0,a0,2016 # 8002ca38 <.Lanon.f077182aff5f58a5660f14b1290425e3.188>
    80022260:	f52a                	sd	a0,168(sp)
    80022262:	4511                	li	a0,4
    80022264:	f92a                	sd	a0,176(sp)
    80022266:	fd02                	sd	zero,184(sp)
    80022268:	10ac                	addi	a1,sp,104
    8002226a:	e5ae                	sd	a1,200(sp)
    8002226c:	e9aa                	sd	a0,208(sp)
    8002226e:	1128                	addi	a0,sp,168
    80022270:	85c2                	mv	a1,a6
    80022272:	00000097          	auipc	ra,0x0
    80022276:	ef6080e7          	jalr	-266(ra) # 80022168 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
	...

Disassembly of section .text.unlikely._ZN4core6result13unwrap_failed17h07d3c4e2b4f310f6E:

000000008002227c <_ZN4core6result13unwrap_failed17h07d3c4e2b4f310f6E>:
    8002227c:	7119                	addi	sp,sp,-128
    8002227e:	fc86                	sd	ra,120(sp)
    80022280:	e42a                	sd	a0,8(sp)
    80022282:	e82e                	sd	a1,16(sp)
    80022284:	ec32                	sd	a2,24(sp)
    80022286:	f036                	sd	a3,32(sp)
    80022288:	0028                	addi	a0,sp,8
    8002228a:	ecaa                	sd	a0,88(sp)

000000008002228c <.LBB136_1>:
    8002228c:	00003517          	auipc	a0,0x3
    80022290:	a2450513          	addi	a0,a0,-1500 # 80024cb0 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h65c6410ca8a4d3e4E>
    80022294:	f0aa                	sd	a0,96(sp)
    80022296:	0828                	addi	a0,sp,24
    80022298:	f4aa                	sd	a0,104(sp)

000000008002229a <.LBB136_2>:
    8002229a:	00003517          	auipc	a0,0x3
    8002229e:	90c50513          	addi	a0,a0,-1780 # 80024ba6 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h729ad47dd83507edE>
    800222a2:	f8aa                	sd	a0,112(sp)

00000000800222a4 <.LBB136_3>:
    800222a4:	0000b517          	auipc	a0,0xb
    800222a8:	82450513          	addi	a0,a0,-2012 # 8002cac8 <.Lanon.f077182aff5f58a5660f14b1290425e3.192>
    800222ac:	f42a                	sd	a0,40(sp)
    800222ae:	4509                	li	a0,2
    800222b0:	f82a                	sd	a0,48(sp)
    800222b2:	fc02                	sd	zero,56(sp)
    800222b4:	08ac                	addi	a1,sp,88
    800222b6:	e4ae                	sd	a1,72(sp)
    800222b8:	e8aa                	sd	a0,80(sp)
    800222ba:	1028                	addi	a0,sp,40
    800222bc:	85ba                	mv	a1,a4
    800222be:	00000097          	auipc	ra,0x0
    800222c2:	eaa080e7          	jalr	-342(ra) # 80022168 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
	...

Disassembly of section .text._ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17haa7f46eb365e41edE:

00000000800222c8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17haa7f46eb365e41edE>:
    800222c8:	711d                	addi	sp,sp,-96
    800222ca:	ec86                	sd	ra,88(sp)
    800222cc:	e8a2                	sd	s0,80(sp)
    800222ce:	e4a6                	sd	s1,72(sp)
    800222d0:	e0ca                	sd	s2,64(sp)
    800222d2:	fc4e                	sd	s3,56(sp)
    800222d4:	f852                	sd	s4,48(sp)
    800222d6:	f456                	sd	s5,40(sp)
    800222d8:	f05a                	sd	s6,32(sp)
    800222da:	ec5e                	sd	s7,24(sp)
    800222dc:	e862                	sd	s8,16(sp)
    800222de:	e466                	sd	s9,8(sp)
    800222e0:	e06a                	sd	s10,0(sp)
    800222e2:	10060c63          	beqz	a2,800223fa <.LBB138_30+0x1a>
    800222e6:	84b2                	mv	s1,a2
    800222e8:	89ae                	mv	s3,a1
    800222ea:	01053a03          	ld	s4,16(a0)
    800222ee:	00053903          	ld	s2,0(a0)
    800222f2:	00853a83          	ld	s5,8(a0)
    800222f6:	4b3d                	li	s6,15
    800222f8:	4ba9                	li	s7,10
    800222fa:	4c05                	li	s8,1
    800222fc:	fbf00c93          	li	s9,-65
    80022300:	a819                	j	80022316 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17haa7f46eb365e41edE+0x4e>
    80022302:	018ab683          	ld	a3,24(s5)
    80022306:	854a                	mv	a0,s2
    80022308:	85ce                	mv	a1,s3
    8002230a:	8622                	mv	a2,s0
    8002230c:	9682                	jalr	a3
    8002230e:	e965                	bnez	a0,800223fe <.LBB138_30+0x1e>
    80022310:	8c81                	sub	s1,s1,s0
    80022312:	89ea                	mv	s3,s10
    80022314:	c0fd                	beqz	s1,800223fa <.LBB138_30+0x1a>
    80022316:	000a4503          	lbu	a0,0(s4)
    8002231a:	c919                	beqz	a0,80022330 <.LBB138_29+0x10>
    8002231c:	018ab683          	ld	a3,24(s5)

0000000080022320 <.LBB138_29>:
    80022320:	00004597          	auipc	a1,0x4
    80022324:	2a058593          	addi	a1,a1,672 # 800265c0 <.L__unnamed_16+0x18>
    80022328:	4611                	li	a2,4
    8002232a:	854a                	mv	a0,s2
    8002232c:	9682                	jalr	a3
    8002232e:	e961                	bnez	a0,800223fe <.LBB138_30+0x1e>
    80022330:	4401                	li	s0,0
    80022332:	8626                	mv	a2,s1
    80022334:	a031                	j	80022340 <.LBB138_29+0x20>
    80022336:	0084b533          	sltu	a0,s1,s0
    8002233a:	40848633          	sub	a2,s1,s0
    8002233e:	e925                	bnez	a0,800223ae <.LBB138_29+0x8e>
    80022340:	008986b3          	add	a3,s3,s0
    80022344:	02cb6263          	bltu	s6,a2,80022368 <.LBB138_29+0x48>
    80022348:	4581                	li	a1,0
    8002234a:	ca05                	beqz	a2,8002237a <.LBB138_29+0x5a>
    8002234c:	00b68533          	add	a0,a3,a1
    80022350:	00054503          	lbu	a0,0(a0)
    80022354:	03750763          	beq	a0,s7,80022382 <.LBB138_29+0x62>
    80022358:	0585                	addi	a1,a1,1
    8002235a:	feb619e3          	bne	a2,a1,8002234c <.LBB138_29+0x2c>
    8002235e:	4501                	li	a0,0
    80022360:	85b2                	mv	a1,a2
    80022362:	03850363          	beq	a0,s8,80022388 <.LBB138_29+0x68>
    80022366:	a0a1                	j	800223ae <.LBB138_29+0x8e>
    80022368:	4529                	li	a0,10
    8002236a:	85b6                	mv	a1,a3
    8002236c:	00001097          	auipc	ra,0x1
    80022370:	41c080e7          	jalr	1052(ra) # 80023788 <_ZN4core5slice6memchr19memchr_general_case17hea58e64f15abdd7dE>
    80022374:	01850a63          	beq	a0,s8,80022388 <.LBB138_29+0x68>
    80022378:	a81d                	j	800223ae <.LBB138_29+0x8e>
    8002237a:	4501                	li	a0,0
    8002237c:	01850663          	beq	a0,s8,80022388 <.LBB138_29+0x68>
    80022380:	a03d                	j	800223ae <.LBB138_29+0x8e>
    80022382:	4505                	li	a0,1
    80022384:	03851563          	bne	a0,s8,800223ae <.LBB138_29+0x8e>
    80022388:	00858533          	add	a0,a1,s0
    8002238c:	00150413          	addi	s0,a0,1
    80022390:	fa9573e3          	bgeu	a0,s1,80022336 <.LBB138_29+0x16>
    80022394:	954e                	add	a0,a0,s3
    80022396:	00054503          	lbu	a0,0(a0)
    8002239a:	f9751ee3          	bne	a0,s7,80022336 <.LBB138_29+0x16>
    8002239e:	4505                	li	a0,1
    800223a0:	00aa0023          	sb	a0,0(s4)
    800223a4:	00898d33          	add	s10,s3,s0
    800223a8:	f4848de3          	beq	s1,s0,80022302 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17haa7f46eb365e41edE+0x3a>
    800223ac:	a809                	j	800223be <.LBB138_29+0x9e>
    800223ae:	4501                	li	a0,0
    800223b0:	8426                	mv	s0,s1
    800223b2:	00aa0023          	sb	a0,0(s4)
    800223b6:	00898d33          	add	s10,s3,s0
    800223ba:	f48484e3          	beq	s1,s0,80022302 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17haa7f46eb365e41edE+0x3a>
    800223be:	04947f63          	bgeu	s0,s1,8002241c <.LBB138_31>
    800223c2:	000d0503          	lb	a0,0(s10)
    800223c6:	04acdb63          	bge	s9,a0,8002241c <.LBB138_31>
    800223ca:	018ab683          	ld	a3,24(s5)
    800223ce:	854a                	mv	a0,s2
    800223d0:	85ce                	mv	a1,s3
    800223d2:	8622                	mv	a2,s0
    800223d4:	9682                	jalr	a3
    800223d6:	e505                	bnez	a0,800223fe <.LBB138_30+0x1e>
    800223d8:	000d0503          	lb	a0,0(s10)
    800223dc:	f2accae3          	blt	s9,a0,80022310 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17haa7f46eb365e41edE+0x48>

00000000800223e0 <.LBB138_30>:
    800223e0:	0000a717          	auipc	a4,0xa
    800223e4:	75070713          	addi	a4,a4,1872 # 8002cb30 <.Lanon.f077182aff5f58a5660f14b1290425e3.197>
    800223e8:	854e                	mv	a0,s3
    800223ea:	85a6                	mv	a1,s1
    800223ec:	8622                	mv	a2,s0
    800223ee:	86a6                	mv	a3,s1
    800223f0:	00001097          	auipc	ra,0x1
    800223f4:	7cc080e7          	jalr	1996(ra) # 80023bbc <_ZN4core3str16slice_error_fail17h98613a818fa8baa4E>
    800223f8:	0000                	unimp
    800223fa:	4501                	li	a0,0
    800223fc:	a011                	j	80022400 <.LBB138_30+0x20>
    800223fe:	4505                	li	a0,1
    80022400:	6d02                	ld	s10,0(sp)
    80022402:	6ca2                	ld	s9,8(sp)
    80022404:	6c42                	ld	s8,16(sp)
    80022406:	6be2                	ld	s7,24(sp)
    80022408:	7b02                	ld	s6,32(sp)
    8002240a:	7aa2                	ld	s5,40(sp)
    8002240c:	7a42                	ld	s4,48(sp)
    8002240e:	79e2                	ld	s3,56(sp)
    80022410:	6906                	ld	s2,64(sp)
    80022412:	64a6                	ld	s1,72(sp)
    80022414:	6446                	ld	s0,80(sp)
    80022416:	60e6                	ld	ra,88(sp)
    80022418:	6125                	addi	sp,sp,96
    8002241a:	8082                	ret

000000008002241c <.LBB138_31>:
    8002241c:	0000a717          	auipc	a4,0xa
    80022420:	6fc70713          	addi	a4,a4,1788 # 8002cb18 <.Lanon.f077182aff5f58a5660f14b1290425e3.196>
    80022424:	854e                	mv	a0,s3
    80022426:	85a6                	mv	a1,s1
    80022428:	4601                	li	a2,0
    8002242a:	86a2                	mv	a3,s0
    8002242c:	00001097          	auipc	ra,0x1
    80022430:	790080e7          	jalr	1936(ra) # 80023bbc <_ZN4core3str16slice_error_fail17h98613a818fa8baa4E>
	...

Disassembly of section .text._ZN4core3fmt8builders11DebugStruct5field17hd4a9c9da942f00c3E:

0000000080022436 <_ZN4core3fmt8builders11DebugStruct5field17hd4a9c9da942f00c3E>:
    80022436:	7171                	addi	sp,sp,-176
    80022438:	f506                	sd	ra,168(sp)
    8002243a:	f122                	sd	s0,160(sp)
    8002243c:	ed26                	sd	s1,152(sp)
    8002243e:	e94a                	sd	s2,144(sp)
    80022440:	e54e                	sd	s3,136(sp)
    80022442:	e152                	sd	s4,128(sp)
    80022444:	fcd6                	sd	s5,120(sp)
    80022446:	f8da                	sd	s6,112(sp)
    80022448:	f4de                	sd	s7,104(sp)
    8002244a:	842a                	mv	s0,a0
    8002244c:	00854503          	lbu	a0,8(a0)
    80022450:	4b85                	li	s7,1
    80022452:	4485                	li	s1,1
    80022454:	c10d                	beqz	a0,80022476 <_ZN4core3fmt8builders11DebugStruct5field17hd4a9c9da942f00c3E+0x40>
    80022456:	00940423          	sb	s1,8(s0)
    8002245a:	017404a3          	sb	s7,9(s0)
    8002245e:	8522                	mv	a0,s0
    80022460:	7ba6                	ld	s7,104(sp)
    80022462:	7b46                	ld	s6,112(sp)
    80022464:	7ae6                	ld	s5,120(sp)
    80022466:	6a0a                	ld	s4,128(sp)
    80022468:	69aa                	ld	s3,136(sp)
    8002246a:	694a                	ld	s2,144(sp)
    8002246c:	64ea                	ld	s1,152(sp)
    8002246e:	740a                	ld	s0,160(sp)
    80022470:	70aa                	ld	ra,168(sp)
    80022472:	614d                	addi	sp,sp,176
    80022474:	8082                	ret
    80022476:	89ba                	mv	s3,a4
    80022478:	8936                	mv	s2,a3
    8002247a:	8a32                	mv	s4,a2
    8002247c:	8aae                	mv	s5,a1
    8002247e:	00043b03          	ld	s6,0(s0)
    80022482:	030b6503          	lwu	a0,48(s6)
    80022486:	00944583          	lbu	a1,9(s0)
    8002248a:	00457693          	andi	a3,a0,4
    8002248e:	0015b613          	seqz	a2,a1
    80022492:	e699                	bnez	a3,800224a0 <.LBB139_18+0xa>
    80022494:	e261                	bnez	a2,80022554 <.LBB139_23>

0000000080022496 <.LBB139_18>:
    80022496:	0000a597          	auipc	a1,0xa
    8002249a:	6b758593          	addi	a1,a1,1719 # 8002cb4d <.Lanon.f077182aff5f58a5660f14b1290425e3.200>
    8002249e:	a87d                	j	8002255c <.LBB139_23+0x8>
    800224a0:	c205                	beqz	a2,800224c0 <.LBB139_19+0x14>
    800224a2:	028b3583          	ld	a1,40(s6)
    800224a6:	020b3503          	ld	a0,32(s6)
    800224aa:	6d94                	ld	a3,24(a1)

00000000800224ac <.LBB139_19>:
    800224ac:	0000a597          	auipc	a1,0xa
    800224b0:	69c58593          	addi	a1,a1,1692 # 8002cb48 <.Lanon.f077182aff5f58a5660f14b1290425e3.198>
    800224b4:	460d                	li	a2,3
    800224b6:	9682                	jalr	a3
    800224b8:	4485                	li	s1,1
    800224ba:	fd51                	bnez	a0,80022456 <_ZN4core3fmt8builders11DebugStruct5field17hd4a9c9da942f00c3E+0x20>
    800224bc:	030b6503          	lwu	a0,48(s6)
    800224c0:	4485                	li	s1,1
    800224c2:	029103a3          	sb	s1,39(sp)
    800224c6:	020b3583          	ld	a1,32(s6)
    800224ca:	028b3603          	ld	a2,40(s6)
    800224ce:	e42e                	sd	a1,8(sp)
    800224d0:	e832                	sd	a2,16(sp)
    800224d2:	02710593          	addi	a1,sp,39
    800224d6:	ec2e                	sd	a1,24(sp)
    800224d8:	034b2583          	lw	a1,52(s6)
    800224dc:	038b0603          	lb	a2,56(s6)
    800224e0:	000b3683          	ld	a3,0(s6)
    800224e4:	008b3703          	ld	a4,8(s6)
    800224e8:	010b3783          	ld	a5,16(s6)
    800224ec:	018b3803          	ld	a6,24(s6)
    800224f0:	ccaa                	sw	a0,88(sp)
    800224f2:	ceae                	sw	a1,92(sp)
    800224f4:	06c10023          	sb	a2,96(sp)
    800224f8:	f436                	sd	a3,40(sp)
    800224fa:	f83a                	sd	a4,48(sp)
    800224fc:	fc3e                	sd	a5,56(sp)
    800224fe:	e0c2                	sd	a6,64(sp)
    80022500:	0028                	addi	a0,sp,8
    80022502:	e4aa                	sd	a0,72(sp)

0000000080022504 <.LBB139_20>:
    80022504:	0000a517          	auipc	a0,0xa
    80022508:	5e450513          	addi	a0,a0,1508 # 8002cae8 <.Lanon.f077182aff5f58a5660f14b1290425e3.194>
    8002250c:	e8aa                	sd	a0,80(sp)
    8002250e:	0028                	addi	a0,sp,8
    80022510:	85d6                	mv	a1,s5
    80022512:	8652                	mv	a2,s4
    80022514:	00000097          	auipc	ra,0x0
    80022518:	db4080e7          	jalr	-588(ra) # 800222c8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17haa7f46eb365e41edE>
    8002251c:	fd0d                	bnez	a0,80022456 <_ZN4core3fmt8builders11DebugStruct5field17hd4a9c9da942f00c3E+0x20>

000000008002251e <.LBB139_21>:
    8002251e:	0000a597          	auipc	a1,0xa
    80022522:	5a258593          	addi	a1,a1,1442 # 8002cac0 <.Lanon.f077182aff5f58a5660f14b1290425e3.191>
    80022526:	0028                	addi	a0,sp,8
    80022528:	4609                	li	a2,2
    8002252a:	00000097          	auipc	ra,0x0
    8002252e:	d9e080e7          	jalr	-610(ra) # 800222c8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17haa7f46eb365e41edE>
    80022532:	f115                	bnez	a0,80022456 <_ZN4core3fmt8builders11DebugStruct5field17hd4a9c9da942f00c3E+0x20>
    80022534:	0189b603          	ld	a2,24(s3)
    80022538:	102c                	addi	a1,sp,40
    8002253a:	854a                	mv	a0,s2
    8002253c:	9602                	jalr	a2
    8002253e:	fd01                	bnez	a0,80022456 <_ZN4core3fmt8builders11DebugStruct5field17hd4a9c9da942f00c3E+0x20>
    80022540:	65c6                	ld	a1,80(sp)
    80022542:	6526                	ld	a0,72(sp)
    80022544:	6d94                	ld	a3,24(a1)

0000000080022546 <.LBB139_22>:
    80022546:	0000a597          	auipc	a1,0xa
    8002254a:	60558593          	addi	a1,a1,1541 # 8002cb4b <.Lanon.f077182aff5f58a5660f14b1290425e3.199>
    8002254e:	4609                	li	a2,2
    80022550:	9682                	jalr	a3
    80022552:	a8b1                	j	800225ae <.LBB139_24+0x1c>

0000000080022554 <.LBB139_23>:
    80022554:	0000a597          	auipc	a1,0xa
    80022558:	5fb58593          	addi	a1,a1,1531 # 8002cb4f <.Lanon.f077182aff5f58a5660f14b1290425e3.201>
    8002255c:	028b3683          	ld	a3,40(s6)
    80022560:	020b3503          	ld	a0,32(s6)
    80022564:	6e94                	ld	a3,24(a3)
    80022566:	00266613          	ori	a2,a2,2
    8002256a:	9682                	jalr	a3
    8002256c:	4485                	li	s1,1
    8002256e:	ee0514e3          	bnez	a0,80022456 <_ZN4core3fmt8builders11DebugStruct5field17hd4a9c9da942f00c3E+0x20>
    80022572:	028b3583          	ld	a1,40(s6)
    80022576:	020b3503          	ld	a0,32(s6)
    8002257a:	6d94                	ld	a3,24(a1)
    8002257c:	85d6                	mv	a1,s5
    8002257e:	8652                	mv	a2,s4
    80022580:	9682                	jalr	a3
    80022582:	4485                	li	s1,1
    80022584:	ec0519e3          	bnez	a0,80022456 <_ZN4core3fmt8builders11DebugStruct5field17hd4a9c9da942f00c3E+0x20>
    80022588:	028b3583          	ld	a1,40(s6)
    8002258c:	020b3503          	ld	a0,32(s6)
    80022590:	6d94                	ld	a3,24(a1)

0000000080022592 <.LBB139_24>:
    80022592:	0000a597          	auipc	a1,0xa
    80022596:	52e58593          	addi	a1,a1,1326 # 8002cac0 <.Lanon.f077182aff5f58a5660f14b1290425e3.191>
    8002259a:	4609                	li	a2,2
    8002259c:	9682                	jalr	a3
    8002259e:	4485                	li	s1,1
    800225a0:	ea051be3          	bnez	a0,80022456 <_ZN4core3fmt8builders11DebugStruct5field17hd4a9c9da942f00c3E+0x20>
    800225a4:	0189b603          	ld	a2,24(s3)
    800225a8:	854a                	mv	a0,s2
    800225aa:	85da                	mv	a1,s6
    800225ac:	9602                	jalr	a2
    800225ae:	84aa                	mv	s1,a0
    800225b0:	b55d                	j	80022456 <_ZN4core3fmt8builders11DebugStruct5field17hd4a9c9da942f00c3E+0x20>

Disassembly of section .text._ZN4core3fmt8builders10DebugTuple5field17h5bd338b8cb98b948E:

00000000800225b2 <_ZN4core3fmt8builders10DebugTuple5field17h5bd338b8cb98b948E>:
    800225b2:	7135                	addi	sp,sp,-160
    800225b4:	ed06                	sd	ra,152(sp)
    800225b6:	e922                	sd	s0,144(sp)
    800225b8:	e526                	sd	s1,136(sp)
    800225ba:	e14a                	sd	s2,128(sp)
    800225bc:	fcce                	sd	s3,120(sp)
    800225be:	f8d2                	sd	s4,112(sp)
    800225c0:	f4d6                	sd	s5,104(sp)
    800225c2:	842a                	mv	s0,a0
    800225c4:	01054503          	lbu	a0,16(a0)
    800225c8:	c509                	beqz	a0,800225d2 <_ZN4core3fmt8builders10DebugTuple5field17h5bd338b8cb98b948E+0x20>
    800225ca:	00843a83          	ld	s5,8(s0)
    800225ce:	4485                	li	s1,1
    800225d0:	a0d5                	j	800226b4 <.LBB142_20+0xe>
    800225d2:	89b2                	mv	s3,a2
    800225d4:	892e                	mv	s2,a1
    800225d6:	00043a03          	ld	s4,0(s0)
    800225da:	030a6503          	lwu	a0,48(s4)
    800225de:	00843a83          	ld	s5,8(s0)
    800225e2:	00457593          	andi	a1,a0,4
    800225e6:	001ab613          	seqz	a2,s5
    800225ea:	e599                	bnez	a1,800225f8 <.LBB142_16+0xa>
    800225ec:	e615                	bnez	a2,80022618 <.LBB142_18>

00000000800225ee <.LBB142_16>:
    800225ee:	0000a597          	auipc	a1,0xa
    800225f2:	55f58593          	addi	a1,a1,1375 # 8002cb4d <.Lanon.f077182aff5f58a5660f14b1290425e3.200>
    800225f6:	a02d                	j	80022620 <.LBB142_18+0x8>
    800225f8:	c639                	beqz	a2,80022646 <.LBB142_18+0x2e>
    800225fa:	028a3583          	ld	a1,40(s4)
    800225fe:	020a3503          	ld	a0,32(s4)
    80022602:	6d94                	ld	a3,24(a1)

0000000080022604 <.LBB142_17>:
    80022604:	0000a597          	auipc	a1,0xa
    80022608:	55158593          	addi	a1,a1,1361 # 8002cb55 <.Lanon.f077182aff5f58a5660f14b1290425e3.207>
    8002260c:	4609                	li	a2,2
    8002260e:	9682                	jalr	a3
    80022610:	c90d                	beqz	a0,80022642 <.LBB142_18+0x2a>
    80022612:	4a81                	li	s5,0
    80022614:	4485                	li	s1,1
    80022616:	a879                	j	800226b4 <.LBB142_20+0xe>

0000000080022618 <.LBB142_18>:
    80022618:	0000a597          	auipc	a1,0xa
    8002261c:	53f58593          	addi	a1,a1,1343 # 8002cb57 <.Lanon.f077182aff5f58a5660f14b1290425e3.208>
    80022620:	028a3683          	ld	a3,40(s4)
    80022624:	020a3503          	ld	a0,32(s4)
    80022628:	6e94                	ld	a3,24(a3)
    8002262a:	4709                	li	a4,2
    8002262c:	40c70633          	sub	a2,a4,a2
    80022630:	9682                	jalr	a3
    80022632:	4485                	li	s1,1
    80022634:	e141                	bnez	a0,800226b4 <.LBB142_20+0xe>
    80022636:	0189b603          	ld	a2,24(s3)
    8002263a:	854a                	mv	a0,s2
    8002263c:	85d2                	mv	a1,s4
    8002263e:	9602                	jalr	a2
    80022640:	a88d                	j	800226b2 <.LBB142_20+0xc>
    80022642:	030a6503          	lwu	a0,48(s4)
    80022646:	4485                	li	s1,1
    80022648:	029103a3          	sb	s1,39(sp)
    8002264c:	020a3583          	ld	a1,32(s4)
    80022650:	028a3603          	ld	a2,40(s4)
    80022654:	e42e                	sd	a1,8(sp)
    80022656:	e832                	sd	a2,16(sp)
    80022658:	02710593          	addi	a1,sp,39
    8002265c:	ec2e                	sd	a1,24(sp)
    8002265e:	034a2583          	lw	a1,52(s4)
    80022662:	038a0603          	lb	a2,56(s4)
    80022666:	000a3683          	ld	a3,0(s4)
    8002266a:	008a3703          	ld	a4,8(s4)
    8002266e:	010a3783          	ld	a5,16(s4)
    80022672:	018a3803          	ld	a6,24(s4)
    80022676:	ccaa                	sw	a0,88(sp)
    80022678:	ceae                	sw	a1,92(sp)
    8002267a:	06c10023          	sb	a2,96(sp)
    8002267e:	f436                	sd	a3,40(sp)
    80022680:	f83a                	sd	a4,48(sp)
    80022682:	fc3e                	sd	a5,56(sp)
    80022684:	e0c2                	sd	a6,64(sp)
    80022686:	0028                	addi	a0,sp,8
    80022688:	0189b603          	ld	a2,24(s3)
    8002268c:	e4aa                	sd	a0,72(sp)

000000008002268e <.LBB142_19>:
    8002268e:	0000a517          	auipc	a0,0xa
    80022692:	45a50513          	addi	a0,a0,1114 # 8002cae8 <.Lanon.f077182aff5f58a5660f14b1290425e3.194>
    80022696:	e8aa                	sd	a0,80(sp)
    80022698:	102c                	addi	a1,sp,40
    8002269a:	854a                	mv	a0,s2
    8002269c:	9602                	jalr	a2
    8002269e:	e919                	bnez	a0,800226b4 <.LBB142_20+0xe>
    800226a0:	65c6                	ld	a1,80(sp)
    800226a2:	6526                	ld	a0,72(sp)
    800226a4:	6d94                	ld	a3,24(a1)

00000000800226a6 <.LBB142_20>:
    800226a6:	0000a597          	auipc	a1,0xa
    800226aa:	4a558593          	addi	a1,a1,1189 # 8002cb4b <.Lanon.f077182aff5f58a5660f14b1290425e3.199>
    800226ae:	4609                	li	a2,2
    800226b0:	9682                	jalr	a3
    800226b2:	84aa                	mv	s1,a0
    800226b4:	00940823          	sb	s1,16(s0)
    800226b8:	001a8513          	addi	a0,s5,1
    800226bc:	e408                	sd	a0,8(s0)
    800226be:	8522                	mv	a0,s0
    800226c0:	7aa6                	ld	s5,104(sp)
    800226c2:	7a46                	ld	s4,112(sp)
    800226c4:	79e6                	ld	s3,120(sp)
    800226c6:	690a                	ld	s2,128(sp)
    800226c8:	64aa                	ld	s1,136(sp)
    800226ca:	644a                	ld	s0,144(sp)
    800226cc:	60ea                	ld	ra,152(sp)
    800226ce:	610d                	addi	sp,sp,160
    800226d0:	8082                	ret

Disassembly of section .text._ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE:

00000000800226d2 <_ZN4core3fmt8builders10DebugTuple6finish17h6827aca48e8d75ceE>:
    800226d2:	1101                	addi	sp,sp,-32
    800226d4:	ec06                	sd	ra,24(sp)
    800226d6:	e822                	sd	s0,16(sp)
    800226d8:	e426                	sd	s1,8(sp)
    800226da:	842a                	mv	s0,a0
    800226dc:	650c                	ld	a1,8(a0)
    800226de:	01054503          	lbu	a0,16(a0)
    800226e2:	c5b9                	beqz	a1,80022730 <.LBB143_10+0x14>
    800226e4:	4485                	li	s1,1
    800226e6:	e131                	bnez	a0,8002272a <.LBB143_10+0xe>
    800226e8:	4505                	li	a0,1
    800226ea:	02a59563          	bne	a1,a0,80022714 <.LBB143_9+0x10>
    800226ee:	01144503          	lbu	a0,17(s0)
    800226f2:	c10d                	beqz	a0,80022714 <.LBB143_9+0x10>
    800226f4:	6008                	ld	a0,0(s0)
    800226f6:	03054583          	lbu	a1,48(a0)
    800226fa:	8991                	andi	a1,a1,4
    800226fc:	ed81                	bnez	a1,80022714 <.LBB143_9+0x10>
    800226fe:	750c                	ld	a1,40(a0)
    80022700:	7108                	ld	a0,32(a0)
    80022702:	6d94                	ld	a3,24(a1)

0000000080022704 <.LBB143_9>:
    80022704:	0000a597          	auipc	a1,0xa
    80022708:	45458593          	addi	a1,a1,1108 # 8002cb58 <.Lanon.f077182aff5f58a5660f14b1290425e3.209>
    8002270c:	4605                	li	a2,1
    8002270e:	4485                	li	s1,1
    80022710:	9682                	jalr	a3
    80022712:	ed01                	bnez	a0,8002272a <.LBB143_10+0xe>
    80022714:	6008                	ld	a0,0(s0)
    80022716:	750c                	ld	a1,40(a0)
    80022718:	7108                	ld	a0,32(a0)
    8002271a:	6d94                	ld	a3,24(a1)

000000008002271c <.LBB143_10>:
    8002271c:	0000a597          	auipc	a1,0xa
    80022720:	43d58593          	addi	a1,a1,1085 # 8002cb59 <.Lanon.f077182aff5f58a5660f14b1290425e3.210>
    80022724:	4605                	li	a2,1
    80022726:	9682                	jalr	a3
    80022728:	84aa                	mv	s1,a0
    8002272a:	00940823          	sb	s1,16(s0)
    8002272e:	8526                	mv	a0,s1
    80022730:	00a03533          	snez	a0,a0
    80022734:	64a2                	ld	s1,8(sp)
    80022736:	6442                	ld	s0,16(sp)
    80022738:	60e2                	ld	ra,24(sp)
    8002273a:	6105                	addi	sp,sp,32
    8002273c:	8082                	ret

Disassembly of section .text._ZN4core3fmt5Write10write_char17h618b2d222791a8a5E:

000000008002273e <_ZN4core3fmt5Write10write_char17h618b2d222791a8a5E>:
    8002273e:	1141                	addi	sp,sp,-16
    80022740:	e406                	sd	ra,8(sp)
    80022742:	0005861b          	sext.w	a2,a1
    80022746:	08000693          	li	a3,128
    8002274a:	c202                	sw	zero,4(sp)
    8002274c:	00d67663          	bgeu	a2,a3,80022758 <_ZN4core3fmt5Write10write_char17h618b2d222791a8a5E+0x1a>
    80022750:	00b10223          	sb	a1,4(sp)
    80022754:	4605                	li	a2,1
    80022756:	a841                	j	800227e6 <_ZN4core3fmt5Write10write_char17h618b2d222791a8a5E+0xa8>
    80022758:	00b5d61b          	srliw	a2,a1,0xb
    8002275c:	ee19                	bnez	a2,8002277a <_ZN4core3fmt5Write10write_char17h618b2d222791a8a5E+0x3c>
    8002275e:	0065d613          	srli	a2,a1,0x6
    80022762:	0c066613          	ori	a2,a2,192
    80022766:	00c10223          	sb	a2,4(sp)
    8002276a:	03f5f593          	andi	a1,a1,63
    8002276e:	0805e593          	ori	a1,a1,128
    80022772:	00b102a3          	sb	a1,5(sp)
    80022776:	4609                	li	a2,2
    80022778:	a0bd                	j	800227e6 <_ZN4core3fmt5Write10write_char17h618b2d222791a8a5E+0xa8>
    8002277a:	0105d61b          	srliw	a2,a1,0x10
    8002277e:	e61d                	bnez	a2,800227ac <_ZN4core3fmt5Write10write_char17h618b2d222791a8a5E+0x6e>
    80022780:	00c5d61b          	srliw	a2,a1,0xc
    80022784:	0e066613          	ori	a2,a2,224
    80022788:	00c10223          	sb	a2,4(sp)
    8002278c:	0065d61b          	srliw	a2,a1,0x6
    80022790:	03f67613          	andi	a2,a2,63
    80022794:	08066613          	ori	a2,a2,128
    80022798:	00c102a3          	sb	a2,5(sp)
    8002279c:	03f5f593          	andi	a1,a1,63
    800227a0:	0805e593          	ori	a1,a1,128
    800227a4:	00b10323          	sb	a1,6(sp)
    800227a8:	460d                	li	a2,3
    800227aa:	a835                	j	800227e6 <_ZN4core3fmt5Write10write_char17h618b2d222791a8a5E+0xa8>
    800227ac:	0125d61b          	srliw	a2,a1,0x12
    800227b0:	0f066613          	ori	a2,a2,240
    800227b4:	00c10223          	sb	a2,4(sp)
    800227b8:	00c5d61b          	srliw	a2,a1,0xc
    800227bc:	03f67613          	andi	a2,a2,63
    800227c0:	08066613          	ori	a2,a2,128
    800227c4:	00c102a3          	sb	a2,5(sp)
    800227c8:	0065d61b          	srliw	a2,a1,0x6
    800227cc:	03f67613          	andi	a2,a2,63
    800227d0:	08066613          	ori	a2,a2,128
    800227d4:	00c10323          	sb	a2,6(sp)
    800227d8:	03f5f593          	andi	a1,a1,63
    800227dc:	0805e593          	ori	a1,a1,128
    800227e0:	00b103a3          	sb	a1,7(sp)
    800227e4:	4611                	li	a2,4
    800227e6:	004c                	addi	a1,sp,4
    800227e8:	00000097          	auipc	ra,0x0
    800227ec:	ae0080e7          	jalr	-1312(ra) # 800222c8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17haa7f46eb365e41edE>
    800227f0:	60a2                	ld	ra,8(sp)
    800227f2:	0141                	addi	sp,sp,16
    800227f4:	8082                	ret

Disassembly of section .text._ZN4core3fmt5Write9write_fmt17h35126b63af1cfc53E:

00000000800227f6 <_ZN4core3fmt5Write9write_fmt17h35126b63af1cfc53E>:
    800227f6:	7139                	addi	sp,sp,-64
    800227f8:	fc06                	sd	ra,56(sp)
    800227fa:	7590                	ld	a2,40(a1)
    800227fc:	7194                	ld	a3,32(a1)
    800227fe:	e02a                	sd	a0,0(sp)
    80022800:	f832                	sd	a2,48(sp)
    80022802:	f436                	sd	a3,40(sp)
    80022804:	6d88                	ld	a0,24(a1)
    80022806:	6990                	ld	a2,16(a1)
    80022808:	6594                	ld	a3,8(a1)
    8002280a:	618c                	ld	a1,0(a1)
    8002280c:	f02a                	sd	a0,32(sp)
    8002280e:	ec32                	sd	a2,24(sp)
    80022810:	e836                	sd	a3,16(sp)
    80022812:	e42e                	sd	a1,8(sp)

0000000080022814 <.LBB165_1>:
    80022814:	0000a597          	auipc	a1,0xa
    80022818:	47458593          	addi	a1,a1,1140 # 8002cc88 <.Lanon.f077182aff5f58a5660f14b1290425e3.232>
    8002281c:	850a                	mv	a0,sp
    8002281e:	0030                	addi	a2,sp,8
    80022820:	00000097          	auipc	ra,0x0
    80022824:	13e080e7          	jalr	318(ra) # 8002295e <_ZN4core3fmt5write17hf87af17b3ec995a2E>
    80022828:	70e2                	ld	ra,56(sp)
    8002282a:	6121                	addi	sp,sp,64
    8002282c:	8082                	ret

Disassembly of section .text._ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h3e38ec0fac65c122E:

000000008002282e <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h3e38ec0fac65c122E>:
    8002282e:	6108                	ld	a0,0(a0)
    80022830:	00000317          	auipc	t1,0x0
    80022834:	a9830067          	jr	-1384(t1) # 800222c8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17haa7f46eb365e41edE>

Disassembly of section .text._ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h00198f5ff26d8c43E:

0000000080022838 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h00198f5ff26d8c43E>:
    80022838:	1141                	addi	sp,sp,-16
    8002283a:	e406                	sd	ra,8(sp)
    8002283c:	6108                	ld	a0,0(a0)
    8002283e:	0005861b          	sext.w	a2,a1
    80022842:	08000693          	li	a3,128
    80022846:	c202                	sw	zero,4(sp)
    80022848:	00d67663          	bgeu	a2,a3,80022854 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h00198f5ff26d8c43E+0x1c>
    8002284c:	00b10223          	sb	a1,4(sp)
    80022850:	4605                	li	a2,1
    80022852:	a841                	j	800228e2 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h00198f5ff26d8c43E+0xaa>
    80022854:	00b5d61b          	srliw	a2,a1,0xb
    80022858:	ee19                	bnez	a2,80022876 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h00198f5ff26d8c43E+0x3e>
    8002285a:	0065d613          	srli	a2,a1,0x6
    8002285e:	0c066613          	ori	a2,a2,192
    80022862:	00c10223          	sb	a2,4(sp)
    80022866:	03f5f593          	andi	a1,a1,63
    8002286a:	0805e593          	ori	a1,a1,128
    8002286e:	00b102a3          	sb	a1,5(sp)
    80022872:	4609                	li	a2,2
    80022874:	a0bd                	j	800228e2 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h00198f5ff26d8c43E+0xaa>
    80022876:	0105d61b          	srliw	a2,a1,0x10
    8002287a:	e61d                	bnez	a2,800228a8 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h00198f5ff26d8c43E+0x70>
    8002287c:	00c5d61b          	srliw	a2,a1,0xc
    80022880:	0e066613          	ori	a2,a2,224
    80022884:	00c10223          	sb	a2,4(sp)
    80022888:	0065d61b          	srliw	a2,a1,0x6
    8002288c:	03f67613          	andi	a2,a2,63
    80022890:	08066613          	ori	a2,a2,128
    80022894:	00c102a3          	sb	a2,5(sp)
    80022898:	03f5f593          	andi	a1,a1,63
    8002289c:	0805e593          	ori	a1,a1,128
    800228a0:	00b10323          	sb	a1,6(sp)
    800228a4:	460d                	li	a2,3
    800228a6:	a835                	j	800228e2 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h00198f5ff26d8c43E+0xaa>
    800228a8:	0125d61b          	srliw	a2,a1,0x12
    800228ac:	0f066613          	ori	a2,a2,240
    800228b0:	00c10223          	sb	a2,4(sp)
    800228b4:	00c5d61b          	srliw	a2,a1,0xc
    800228b8:	03f67613          	andi	a2,a2,63
    800228bc:	08066613          	ori	a2,a2,128
    800228c0:	00c102a3          	sb	a2,5(sp)
    800228c4:	0065d61b          	srliw	a2,a1,0x6
    800228c8:	03f67613          	andi	a2,a2,63
    800228cc:	08066613          	ori	a2,a2,128
    800228d0:	00c10323          	sb	a2,6(sp)
    800228d4:	03f5f593          	andi	a1,a1,63
    800228d8:	0805e593          	ori	a1,a1,128
    800228dc:	00b103a3          	sb	a1,7(sp)
    800228e0:	4611                	li	a2,4
    800228e2:	004c                	addi	a1,sp,4
    800228e4:	00000097          	auipc	ra,0x0
    800228e8:	9e4080e7          	jalr	-1564(ra) # 800222c8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17haa7f46eb365e41edE>
    800228ec:	60a2                	ld	ra,8(sp)
    800228ee:	0141                	addi	sp,sp,16
    800228f0:	8082                	ret

Disassembly of section .text._ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17ha842f9ebf6244b3dE:

00000000800228f2 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17ha842f9ebf6244b3dE>:
    800228f2:	7139                	addi	sp,sp,-64
    800228f4:	fc06                	sd	ra,56(sp)
    800228f6:	6108                	ld	a0,0(a0)
    800228f8:	7590                	ld	a2,40(a1)
    800228fa:	7194                	ld	a3,32(a1)
    800228fc:	e02a                	sd	a0,0(sp)
    800228fe:	f832                	sd	a2,48(sp)
    80022900:	f436                	sd	a3,40(sp)
    80022902:	6d88                	ld	a0,24(a1)
    80022904:	6990                	ld	a2,16(a1)
    80022906:	6594                	ld	a3,8(a1)
    80022908:	618c                	ld	a1,0(a1)
    8002290a:	f02a                	sd	a0,32(sp)
    8002290c:	ec32                	sd	a2,24(sp)
    8002290e:	e836                	sd	a3,16(sp)
    80022910:	e42e                	sd	a1,8(sp)

0000000080022912 <.LBB168_1>:
    80022912:	0000a597          	auipc	a1,0xa
    80022916:	37658593          	addi	a1,a1,886 # 8002cc88 <.Lanon.f077182aff5f58a5660f14b1290425e3.232>
    8002291a:	850a                	mv	a0,sp
    8002291c:	0030                	addi	a2,sp,8
    8002291e:	00000097          	auipc	ra,0x0
    80022922:	040080e7          	jalr	64(ra) # 8002295e <_ZN4core3fmt5write17hf87af17b3ec995a2E>
    80022926:	70e2                	ld	ra,56(sp)
    80022928:	6121                	addi	sp,sp,64
    8002292a:	8082                	ret

Disassembly of section .text._ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17hff7b3fee0b75a94eE:

000000008002292c <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17hff7b3fee0b75a94eE>:
    8002292c:	7139                	addi	sp,sp,-64
    8002292e:	fc06                	sd	ra,56(sp)
    80022930:	7510                	ld	a2,40(a0)
    80022932:	7118                	ld	a4,32(a0)
    80022934:	6d1c                	ld	a5,24(a0)
    80022936:	f832                	sd	a2,48(sp)
    80022938:	7194                	ld	a3,32(a1)
    8002293a:	f43a                	sd	a4,40(sp)
    8002293c:	f03e                	sd	a5,32(sp)
    8002293e:	6910                	ld	a2,16(a0)
    80022940:	6518                	ld	a4,8(a0)
    80022942:	6108                	ld	a0,0(a0)
    80022944:	758c                	ld	a1,40(a1)
    80022946:	ec32                	sd	a2,24(sp)
    80022948:	e83a                	sd	a4,16(sp)
    8002294a:	e42a                	sd	a0,8(sp)
    8002294c:	0030                	addi	a2,sp,8
    8002294e:	8536                	mv	a0,a3
    80022950:	00000097          	auipc	ra,0x0
    80022954:	00e080e7          	jalr	14(ra) # 8002295e <_ZN4core3fmt5write17hf87af17b3ec995a2E>
    80022958:	70e2                	ld	ra,56(sp)
    8002295a:	6121                	addi	sp,sp,64
    8002295c:	8082                	ret

Disassembly of section .text._ZN4core3fmt5write17hf87af17b3ec995a2E:

000000008002295e <_ZN4core3fmt5write17hf87af17b3ec995a2E>:
    8002295e:	7175                	addi	sp,sp,-144
    80022960:	e506                	sd	ra,136(sp)
    80022962:	e122                	sd	s0,128(sp)
    80022964:	fca6                	sd	s1,120(sp)
    80022966:	f8ca                	sd	s2,112(sp)
    80022968:	f4ce                	sd	s3,104(sp)
    8002296a:	f0d2                	sd	s4,96(sp)
    8002296c:	ecd6                	sd	s5,88(sp)
    8002296e:	e8da                	sd	s6,80(sp)
    80022970:	e4de                	sd	s7,72(sp)
    80022972:	e0e2                	sd	s8,64(sp)
    80022974:	8432                	mv	s0,a2
    80022976:	4605                	li	a2,1
    80022978:	1616                	slli	a2,a2,0x25
    8002297a:	f832                	sd	a2,48(sp)
    8002297c:	460d                	li	a2,3
    8002297e:	02c10c23          	sb	a2,56(sp)
    80022982:	6804                	ld	s1,16(s0)
    80022984:	e002                	sd	zero,0(sp)
    80022986:	e802                	sd	zero,16(sp)
    80022988:	f02a                	sd	a0,32(sp)
    8002298a:	f42e                	sd	a1,40(sp)
    8002298c:	c0f1                	beqz	s1,80022a50 <.LBB172_35+0x90>
    8002298e:	6c10                	ld	a2,24(s0)
    80022990:	00843903          	ld	s2,8(s0)
    80022994:	8a4a                	mv	s4,s2
    80022996:	00c96363          	bltu	s2,a2,8002299c <_ZN4core3fmt5write17hf87af17b3ec995a2E+0x3e>
    8002299a:	8a32                	mv	s4,a2
    8002299c:	00043983          	ld	s3,0(s0)
    800229a0:	100a0363          	beqz	s4,80022aa6 <.LBB172_35+0xe6>
    800229a4:	0009b683          	ld	a3,0(s3)
    800229a8:	0089b603          	ld	a2,8(s3)
    800229ac:	6d98                	ld	a4,24(a1)
    800229ae:	85b6                	mv	a1,a3
    800229b0:	9702                	jalr	a4
    800229b2:	10051863          	bnez	a0,80022ac2 <.LBB172_35+0x102>
    800229b6:	02043b83          	ld	s7,32(s0)
    800229ba:	01898c13          	addi	s8,s3,24
    800229be:	4a89                	li	s5,2

00000000800229c0 <.LBB172_35>:
    800229c0:	fffffb17          	auipc	s6,0xfffff
    800229c4:	57ab0b13          	addi	s6,s6,1402 # 80021f3a <_ZN4core3ops8function6FnOnce9call_once17h6147212214d3120cE>
    800229c8:	8452                	mv	s0,s4
    800229ca:	5488                	lw	a0,40(s1)
    800229cc:	da2a                	sw	a0,52(sp)
    800229ce:	03048503          	lb	a0,48(s1)
    800229d2:	02a10c23          	sb	a0,56(sp)
    800229d6:	54c8                	lw	a0,44(s1)
    800229d8:	d82a                	sw	a0,48(sp)
    800229da:	6c90                	ld	a2,24(s1)
    800229dc:	7088                	ld	a0,32(s1)
    800229de:	ce09                	beqz	a2,800229f8 <.LBB172_35+0x38>
    800229e0:	4581                	li	a1,0
    800229e2:	01560c63          	beq	a2,s5,800229fa <.LBB172_35+0x3a>
    800229e6:	0512                	slli	a0,a0,0x4
    800229e8:	955e                	add	a0,a0,s7
    800229ea:	650c                	ld	a1,8(a0)
    800229ec:	01658463          	beq	a1,s6,800229f4 <.LBB172_35+0x34>
    800229f0:	4581                	li	a1,0
    800229f2:	a021                	j	800229fa <.LBB172_35+0x3a>
    800229f4:	6108                	ld	a0,0(a0)
    800229f6:	6108                	ld	a0,0(a0)
    800229f8:	4585                	li	a1,1
    800229fa:	e02e                	sd	a1,0(sp)
    800229fc:	e42a                	sd	a0,8(sp)
    800229fe:	6490                	ld	a2,8(s1)
    80022a00:	6888                	ld	a0,16(s1)
    80022a02:	ce09                	beqz	a2,80022a1c <.LBB172_35+0x5c>
    80022a04:	4581                	li	a1,0
    80022a06:	01560c63          	beq	a2,s5,80022a1e <.LBB172_35+0x5e>
    80022a0a:	0512                	slli	a0,a0,0x4
    80022a0c:	955e                	add	a0,a0,s7
    80022a0e:	650c                	ld	a1,8(a0)
    80022a10:	01658463          	beq	a1,s6,80022a18 <.LBB172_35+0x58>
    80022a14:	4581                	li	a1,0
    80022a16:	a021                	j	80022a1e <.LBB172_35+0x5e>
    80022a18:	6108                	ld	a0,0(a0)
    80022a1a:	6108                	ld	a0,0(a0)
    80022a1c:	4585                	li	a1,1
    80022a1e:	e82e                	sd	a1,16(sp)
    80022a20:	ec2a                	sd	a0,24(sp)
    80022a22:	6088                	ld	a0,0(s1)
    80022a24:	0512                	slli	a0,a0,0x4
    80022a26:	955e                	add	a0,a0,s7
    80022a28:	6510                	ld	a2,8(a0)
    80022a2a:	6108                	ld	a0,0(a0)
    80022a2c:	858a                	mv	a1,sp
    80022a2e:	9602                	jalr	a2
    80022a30:	e949                	bnez	a0,80022ac2 <.LBB172_35+0x102>
    80022a32:	147d                	addi	s0,s0,-1
    80022a34:	c835                	beqz	s0,80022aa8 <.LBB172_35+0xe8>
    80022a36:	76a2                	ld	a3,40(sp)
    80022a38:	7502                	ld	a0,32(sp)
    80022a3a:	ff8c3583          	ld	a1,-8(s8)
    80022a3e:	000c3603          	ld	a2,0(s8)
    80022a42:	6e94                	ld	a3,24(a3)
    80022a44:	03848493          	addi	s1,s1,56
    80022a48:	0c41                	addi	s8,s8,16
    80022a4a:	9682                	jalr	a3
    80022a4c:	dd3d                	beqz	a0,800229ca <.LBB172_35+0xa>
    80022a4e:	a895                	j	80022ac2 <.LBB172_35+0x102>
    80022a50:	7410                	ld	a2,40(s0)
    80022a52:	00843903          	ld	s2,8(s0)
    80022a56:	8a4a                	mv	s4,s2
    80022a58:	00c96363          	bltu	s2,a2,80022a5e <.LBB172_35+0x9e>
    80022a5c:	8a32                	mv	s4,a2
    80022a5e:	00043983          	ld	s3,0(s0)
    80022a62:	040a0263          	beqz	s4,80022aa6 <.LBB172_35+0xe6>
    80022a66:	02043a83          	ld	s5,32(s0)
    80022a6a:	0009b683          	ld	a3,0(s3)
    80022a6e:	0089b603          	ld	a2,8(s3)
    80022a72:	6d98                	ld	a4,24(a1)
    80022a74:	85b6                	mv	a1,a3
    80022a76:	9702                	jalr	a4
    80022a78:	e529                	bnez	a0,80022ac2 <.LBB172_35+0x102>
    80022a7a:	4401                	li	s0,0
    80022a7c:	84d2                	mv	s1,s4
    80022a7e:	008a8533          	add	a0,s5,s0
    80022a82:	6510                	ld	a2,8(a0)
    80022a84:	6108                	ld	a0,0(a0)
    80022a86:	858a                	mv	a1,sp
    80022a88:	9602                	jalr	a2
    80022a8a:	ed05                	bnez	a0,80022ac2 <.LBB172_35+0x102>
    80022a8c:	14fd                	addi	s1,s1,-1
    80022a8e:	cc89                	beqz	s1,80022aa8 <.LBB172_35+0xe8>
    80022a90:	7502                	ld	a0,32(sp)
    80022a92:	76a2                	ld	a3,40(sp)
    80022a94:	00898633          	add	a2,s3,s0
    80022a98:	6a0c                	ld	a1,16(a2)
    80022a9a:	6e10                	ld	a2,24(a2)
    80022a9c:	6e94                	ld	a3,24(a3)
    80022a9e:	0441                	addi	s0,s0,16
    80022aa0:	9682                	jalr	a3
    80022aa2:	dd71                	beqz	a0,80022a7e <.LBB172_35+0xbe>
    80022aa4:	a839                	j	80022ac2 <.LBB172_35+0x102>
    80022aa6:	4a01                	li	s4,0
    80022aa8:	012a7f63          	bgeu	s4,s2,80022ac6 <.LBB172_35+0x106>
    80022aac:	7502                	ld	a0,32(sp)
    80022aae:	76a2                	ld	a3,40(sp)
    80022ab0:	004a1593          	slli	a1,s4,0x4
    80022ab4:	00b98633          	add	a2,s3,a1
    80022ab8:	620c                	ld	a1,0(a2)
    80022aba:	6610                	ld	a2,8(a2)
    80022abc:	6e94                	ld	a3,24(a3)
    80022abe:	9682                	jalr	a3
    80022ac0:	c119                	beqz	a0,80022ac6 <.LBB172_35+0x106>
    80022ac2:	4505                	li	a0,1
    80022ac4:	a011                	j	80022ac8 <.LBB172_35+0x108>
    80022ac6:	4501                	li	a0,0
    80022ac8:	6c06                	ld	s8,64(sp)
    80022aca:	6ba6                	ld	s7,72(sp)
    80022acc:	6b46                	ld	s6,80(sp)
    80022ace:	6ae6                	ld	s5,88(sp)
    80022ad0:	7a06                	ld	s4,96(sp)
    80022ad2:	79a6                	ld	s3,104(sp)
    80022ad4:	7946                	ld	s2,112(sp)
    80022ad6:	74e6                	ld	s1,120(sp)
    80022ad8:	640a                	ld	s0,128(sp)
    80022ada:	60aa                	ld	ra,136(sp)
    80022adc:	6149                	addi	sp,sp,144
    80022ade:	8082                	ret

Disassembly of section .text._ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E:

0000000080022ae0 <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E>:
    80022ae0:	711d                	addi	sp,sp,-96
    80022ae2:	ec86                	sd	ra,88(sp)
    80022ae4:	e8a2                	sd	s0,80(sp)
    80022ae6:	e4a6                	sd	s1,72(sp)
    80022ae8:	e0ca                	sd	s2,64(sp)
    80022aea:	fc4e                	sd	s3,56(sp)
    80022aec:	f852                	sd	s4,48(sp)
    80022aee:	f456                	sd	s5,40(sp)
    80022af0:	f05a                	sd	s6,32(sp)
    80022af2:	ec5e                	sd	s7,24(sp)
    80022af4:	e862                	sd	s8,16(sp)
    80022af6:	e466                	sd	s9,8(sp)
    80022af8:	e06a                	sd	s10,0(sp)
    80022afa:	89be                	mv	s3,a5
    80022afc:	893a                	mv	s2,a4
    80022afe:	8ab6                	mv	s5,a3
    80022b00:	8baa                	mv	s7,a0
    80022b02:	c5b1                	beqz	a1,80022b4e <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0x6e>
    80022b04:	030be503          	lwu	a0,48(s7)
    80022b08:	00157593          	andi	a1,a0,1
    80022b0c:	00110a37          	lui	s4,0x110
    80022b10:	c199                	beqz	a1,80022b16 <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0x36>
    80022b12:	02b00a13          	li	s4,43
    80022b16:	01358433          	add	s0,a1,s3
    80022b1a:	00457593          	andi	a1,a0,4
    80022b1e:	c1a9                	beqz	a1,80022b60 <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0x80>
    80022b20:	4581                	li	a1,0
    80022b22:	020a8063          	beqz	s5,80022b42 <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0x62>
    80022b26:	86d6                	mv	a3,s5
    80022b28:	8732                	mv	a4,a2
    80022b2a:	00074783          	lbu	a5,0(a4)
    80022b2e:	0705                	addi	a4,a4,1
    80022b30:	0c07f793          	andi	a5,a5,192
    80022b34:	f8078793          	addi	a5,a5,-128
    80022b38:	00f037b3          	snez	a5,a5
    80022b3c:	16fd                	addi	a3,a3,-1
    80022b3e:	95be                	add	a1,a1,a5
    80022b40:	f6ed                	bnez	a3,80022b2a <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0x4a>
    80022b42:	942e                	add	s0,s0,a1
    80022b44:	8c32                	mv	s8,a2
    80022b46:	000bb583          	ld	a1,0(s7)
    80022b4a:	ed99                	bnez	a1,80022b68 <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0x88>
    80022b4c:	a0a9                	j	80022b96 <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0xb6>
    80022b4e:	030be503          	lwu	a0,48(s7)
    80022b52:	00198413          	addi	s0,s3,1
    80022b56:	02d00a13          	li	s4,45
    80022b5a:	00457593          	andi	a1,a0,4
    80022b5e:	f1e9                	bnez	a1,80022b20 <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0x40>
    80022b60:	4c01                	li	s8,0
    80022b62:	000bb583          	ld	a1,0(s7)
    80022b66:	c985                	beqz	a1,80022b96 <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0xb6>
    80022b68:	008bb483          	ld	s1,8(s7)
    80022b6c:	02947563          	bgeu	s0,s1,80022b96 <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0xb6>
    80022b70:	8921                	andi	a0,a0,8
    80022b72:	e141                	bnez	a0,80022bf2 <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0x112>
    80022b74:	038bc583          	lbu	a1,56(s7)
    80022b78:	460d                	li	a2,3
    80022b7a:	4505                	li	a0,1
    80022b7c:	00c58363          	beq	a1,a2,80022b82 <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0xa2>
    80022b80:	852e                	mv	a0,a1
    80022b82:	00357593          	andi	a1,a0,3
    80022b86:	40848533          	sub	a0,s1,s0
    80022b8a:	c9cd                	beqz	a1,80022c3c <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0x15c>
    80022b8c:	4605                	li	a2,1
    80022b8e:	0ac59a63          	bne	a1,a2,80022c42 <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0x162>
    80022b92:	4c81                	li	s9,0
    80022b94:	a865                	j	80022c4c <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0x16c>
    80022b96:	855e                	mv	a0,s7
    80022b98:	85d2                	mv	a1,s4
    80022b9a:	8662                	mv	a2,s8
    80022b9c:	86d6                	mv	a3,s5
    80022b9e:	00000097          	auipc	ra,0x0
    80022ba2:	1aa080e7          	jalr	426(ra) # 80022d48 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h8dc03175dafd03baE>
    80022ba6:	4b05                	li	s6,1
    80022ba8:	c105                	beqz	a0,80022bc8 <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0xe8>
    80022baa:	855a                	mv	a0,s6
    80022bac:	6d02                	ld	s10,0(sp)
    80022bae:	6ca2                	ld	s9,8(sp)
    80022bb0:	6c42                	ld	s8,16(sp)
    80022bb2:	6be2                	ld	s7,24(sp)
    80022bb4:	7b02                	ld	s6,32(sp)
    80022bb6:	7aa2                	ld	s5,40(sp)
    80022bb8:	7a42                	ld	s4,48(sp)
    80022bba:	79e2                	ld	s3,56(sp)
    80022bbc:	6906                	ld	s2,64(sp)
    80022bbe:	64a6                	ld	s1,72(sp)
    80022bc0:	6446                	ld	s0,80(sp)
    80022bc2:	60e6                	ld	ra,88(sp)
    80022bc4:	6125                	addi	sp,sp,96
    80022bc6:	8082                	ret
    80022bc8:	028bb583          	ld	a1,40(s7)
    80022bcc:	020bb503          	ld	a0,32(s7)
    80022bd0:	6d9c                	ld	a5,24(a1)
    80022bd2:	85ca                	mv	a1,s2
    80022bd4:	864e                	mv	a2,s3
    80022bd6:	6d02                	ld	s10,0(sp)
    80022bd8:	6ca2                	ld	s9,8(sp)
    80022bda:	6c42                	ld	s8,16(sp)
    80022bdc:	6be2                	ld	s7,24(sp)
    80022bde:	7b02                	ld	s6,32(sp)
    80022be0:	7aa2                	ld	s5,40(sp)
    80022be2:	7a42                	ld	s4,48(sp)
    80022be4:	79e2                	ld	s3,56(sp)
    80022be6:	6906                	ld	s2,64(sp)
    80022be8:	64a6                	ld	s1,72(sp)
    80022bea:	6446                	ld	s0,80(sp)
    80022bec:	60e6                	ld	ra,88(sp)
    80022bee:	6125                	addi	sp,sp,96
    80022bf0:	8782                	jr	a5
    80022bf2:	034bec83          	lwu	s9,52(s7)
    80022bf6:	03000513          	li	a0,48
    80022bfa:	038bcd03          	lbu	s10,56(s7)
    80022bfe:	02abaa23          	sw	a0,52(s7)
    80022c02:	4b05                	li	s6,1
    80022c04:	036b8c23          	sb	s6,56(s7)
    80022c08:	855e                	mv	a0,s7
    80022c0a:	85d2                	mv	a1,s4
    80022c0c:	8662                	mv	a2,s8
    80022c0e:	86d6                	mv	a3,s5
    80022c10:	00000097          	auipc	ra,0x0
    80022c14:	138080e7          	jalr	312(ra) # 80022d48 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h8dc03175dafd03baE>
    80022c18:	f949                	bnez	a0,80022baa <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0xca>
    80022c1a:	038bc583          	lbu	a1,56(s7)
    80022c1e:	460d                	li	a2,3
    80022c20:	4505                	li	a0,1
    80022c22:	00c58363          	beq	a1,a2,80022c28 <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0x148>
    80022c26:	852e                	mv	a0,a1
    80022c28:	00357593          	andi	a1,a0,3
    80022c2c:	40848533          	sub	a0,s1,s0
    80022c30:	c5d9                	beqz	a1,80022cbe <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0x1de>
    80022c32:	4605                	li	a2,1
    80022c34:	08c59863          	bne	a1,a2,80022cc4 <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0x1e4>
    80022c38:	4a01                	li	s4,0
    80022c3a:	a851                	j	80022cce <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0x1ee>
    80022c3c:	8caa                	mv	s9,a0
    80022c3e:	4501                	li	a0,0
    80022c40:	a031                	j	80022c4c <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0x16c>
    80022c42:	00150593          	addi	a1,a0,1
    80022c46:	8105                	srli	a0,a0,0x1
    80022c48:	0015dc93          	srli	s9,a1,0x1
    80022c4c:	020bbb03          	ld	s6,32(s7)
    80022c50:	028bb403          	ld	s0,40(s7)
    80022c54:	034bed03          	lwu	s10,52(s7)
    80022c58:	00150493          	addi	s1,a0,1
    80022c5c:	14fd                	addi	s1,s1,-1
    80022c5e:	c499                	beqz	s1,80022c6c <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0x18c>
    80022c60:	7010                	ld	a2,32(s0)
    80022c62:	855a                	mv	a0,s6
    80022c64:	85ea                	mv	a1,s10
    80022c66:	9602                	jalr	a2
    80022c68:	d975                	beqz	a0,80022c5c <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0x17c>
    80022c6a:	a049                	j	80022cec <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0x20c>
    80022c6c:	000d051b          	sext.w	a0,s10
    80022c70:	001105b7          	lui	a1,0x110
    80022c74:	4b05                	li	s6,1
    80022c76:	f2b50ae3          	beq	a0,a1,80022baa <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0xca>
    80022c7a:	855e                	mv	a0,s7
    80022c7c:	85d2                	mv	a1,s4
    80022c7e:	8662                	mv	a2,s8
    80022c80:	86d6                	mv	a3,s5
    80022c82:	00000097          	auipc	ra,0x0
    80022c86:	0c6080e7          	jalr	198(ra) # 80022d48 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h8dc03175dafd03baE>
    80022c8a:	f105                	bnez	a0,80022baa <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0xca>
    80022c8c:	028bb583          	ld	a1,40(s7)
    80022c90:	020bb503          	ld	a0,32(s7)
    80022c94:	6d94                	ld	a3,24(a1)
    80022c96:	85ca                	mv	a1,s2
    80022c98:	864e                	mv	a2,s3
    80022c9a:	9682                	jalr	a3
    80022c9c:	f519                	bnez	a0,80022baa <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0xca>
    80022c9e:	020bb903          	ld	s2,32(s7)
    80022ca2:	028bb403          	ld	s0,40(s7)
    80022ca6:	4481                	li	s1,0
    80022ca8:	089c8c63          	beq	s9,s1,80022d40 <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0x260>
    80022cac:	7010                	ld	a2,32(s0)
    80022cae:	0485                	addi	s1,s1,1
    80022cb0:	854a                	mv	a0,s2
    80022cb2:	85ea                	mv	a1,s10
    80022cb4:	9602                	jalr	a2
    80022cb6:	d96d                	beqz	a0,80022ca8 <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0x1c8>
    80022cb8:	fff48513          	addi	a0,s1,-1
    80022cbc:	a059                	j	80022d42 <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0x262>
    80022cbe:	8a2a                	mv	s4,a0
    80022cc0:	4501                	li	a0,0
    80022cc2:	a031                	j	80022cce <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0x1ee>
    80022cc4:	00150593          	addi	a1,a0,1
    80022cc8:	8105                	srli	a0,a0,0x1
    80022cca:	0015da13          	srli	s4,a1,0x1
    80022cce:	020bbb03          	ld	s6,32(s7)
    80022cd2:	028bb403          	ld	s0,40(s7)
    80022cd6:	034bea83          	lwu	s5,52(s7)
    80022cda:	00150493          	addi	s1,a0,1
    80022cde:	14fd                	addi	s1,s1,-1
    80022ce0:	c881                	beqz	s1,80022cf0 <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0x210>
    80022ce2:	7010                	ld	a2,32(s0)
    80022ce4:	855a                	mv	a0,s6
    80022ce6:	85d6                	mv	a1,s5
    80022ce8:	9602                	jalr	a2
    80022cea:	d975                	beqz	a0,80022cde <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0x1fe>
    80022cec:	4b05                	li	s6,1
    80022cee:	bd75                	j	80022baa <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0xca>
    80022cf0:	000a851b          	sext.w	a0,s5
    80022cf4:	001105b7          	lui	a1,0x110
    80022cf8:	4b05                	li	s6,1
    80022cfa:	eab508e3          	beq	a0,a1,80022baa <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0xca>
    80022cfe:	028bb583          	ld	a1,40(s7)
    80022d02:	020bb503          	ld	a0,32(s7)
    80022d06:	6d94                	ld	a3,24(a1)
    80022d08:	85ca                	mv	a1,s2
    80022d0a:	864e                	mv	a2,s3
    80022d0c:	9682                	jalr	a3
    80022d0e:	e8051ee3          	bnez	a0,80022baa <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0xca>
    80022d12:	020bb903          	ld	s2,32(s7)
    80022d16:	028bb483          	ld	s1,40(s7)
    80022d1a:	4401                	li	s0,0
    80022d1c:	008a0c63          	beq	s4,s0,80022d34 <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0x254>
    80022d20:	7090                	ld	a2,32(s1)
    80022d22:	0405                	addi	s0,s0,1
    80022d24:	854a                	mv	a0,s2
    80022d26:	85d6                	mv	a1,s5
    80022d28:	9602                	jalr	a2
    80022d2a:	d96d                	beqz	a0,80022d1c <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0x23c>
    80022d2c:	fff40513          	addi	a0,s0,-1
    80022d30:	e7456de3          	bltu	a0,s4,80022baa <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0xca>
    80022d34:	4b01                	li	s6,0
    80022d36:	039baa23          	sw	s9,52(s7)
    80022d3a:	03ab8c23          	sb	s10,56(s7)
    80022d3e:	b5b5                	j	80022baa <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0xca>
    80022d40:	8566                	mv	a0,s9
    80022d42:	01953b33          	sltu	s6,a0,s9
    80022d46:	b595                	j	80022baa <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E+0xca>

Disassembly of section .text._ZN4core3fmt9Formatter12pad_integral12write_prefix17h8dc03175dafd03baE:

0000000080022d48 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h8dc03175dafd03baE>:
    80022d48:	1101                	addi	sp,sp,-32
    80022d4a:	ec06                	sd	ra,24(sp)
    80022d4c:	e822                	sd	s0,16(sp)
    80022d4e:	e426                	sd	s1,8(sp)
    80022d50:	e04a                	sd	s2,0(sp)
    80022d52:	0005871b          	sext.w	a4,a1
    80022d56:	001107b7          	lui	a5,0x110
    80022d5a:	8936                	mv	s2,a3
    80022d5c:	84b2                	mv	s1,a2
    80022d5e:	842a                	mv	s0,a0
    80022d60:	00f70963          	beq	a4,a5,80022d72 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h8dc03175dafd03baE+0x2a>
    80022d64:	7410                	ld	a2,40(s0)
    80022d66:	7008                	ld	a0,32(s0)
    80022d68:	7210                	ld	a2,32(a2)
    80022d6a:	9602                	jalr	a2
    80022d6c:	85aa                	mv	a1,a0
    80022d6e:	4505                	li	a0,1
    80022d70:	ed91                	bnez	a1,80022d8c <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h8dc03175dafd03baE+0x44>
    80022d72:	cc81                	beqz	s1,80022d8a <_ZN4core3fmt9Formatter12pad_integral12write_prefix17h8dc03175dafd03baE+0x42>
    80022d74:	740c                	ld	a1,40(s0)
    80022d76:	7008                	ld	a0,32(s0)
    80022d78:	6d9c                	ld	a5,24(a1)
    80022d7a:	85a6                	mv	a1,s1
    80022d7c:	864a                	mv	a2,s2
    80022d7e:	6902                	ld	s2,0(sp)
    80022d80:	64a2                	ld	s1,8(sp)
    80022d82:	6442                	ld	s0,16(sp)
    80022d84:	60e2                	ld	ra,24(sp)
    80022d86:	6105                	addi	sp,sp,32
    80022d88:	8782                	jr	a5
    80022d8a:	4501                	li	a0,0
    80022d8c:	6902                	ld	s2,0(sp)
    80022d8e:	64a2                	ld	s1,8(sp)
    80022d90:	6442                	ld	s0,16(sp)
    80022d92:	60e2                	ld	ra,24(sp)
    80022d94:	6105                	addi	sp,sp,32
    80022d96:	8082                	ret

Disassembly of section .text._ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE:

0000000080022d98 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE>:
    80022d98:	715d                	addi	sp,sp,-80
    80022d9a:	e486                	sd	ra,72(sp)
    80022d9c:	e0a2                	sd	s0,64(sp)
    80022d9e:	fc26                	sd	s1,56(sp)
    80022da0:	f84a                	sd	s2,48(sp)
    80022da2:	f44e                	sd	s3,40(sp)
    80022da4:	f052                	sd	s4,32(sp)
    80022da6:	ec56                	sd	s5,24(sp)
    80022da8:	e85a                	sd	s6,16(sp)
    80022daa:	e45e                	sd	s7,8(sp)
    80022dac:	6918                	ld	a4,16(a0)
    80022dae:	6114                	ld	a3,0(a0)
    80022db0:	89b2                	mv	s3,a2
    80022db2:	892e                	mv	s2,a1
    80022db4:	fff70593          	addi	a1,a4,-1
    80022db8:	4605                	li	a2,1
    80022dba:	0015b593          	seqz	a1,a1
    80022dbe:	00c69463          	bne	a3,a2,80022dc6 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x2e>
    80022dc2:	e581                	bnez	a1,80022dca <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x32>
    80022dc4:	a235                	j	80022ef0 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x158>
    80022dc6:	18058c63          	beqz	a1,80022f5e <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x1c6>
    80022dca:	6d18                	ld	a4,24(a0)
    80022dcc:	fff68593          	addi	a1,a3,-1
    80022dd0:	0015b293          	seqz	t0,a1
    80022dd4:	013904b3          	add	s1,s2,s3
    80022dd8:	4601                	li	a2,0
    80022dda:	cb45                	beqz	a4,80022e8a <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0xf2>
    80022ddc:	5e7d                	li	t3,-1
    80022dde:	0e000393          	li	t2,224
    80022de2:	0f000313          	li	t1,240
    80022de6:	001c0837          	lui	a6,0x1c0
    80022dea:	001108b7          	lui	a7,0x110
    80022dee:	844a                	mv	s0,s2
    80022df0:	0e940e63          	beq	s0,s1,80022eec <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x154>
    80022df4:	00040683          	lb	a3,0(s0)
    80022df8:	00140593          	addi	a1,s0,1
    80022dfc:	00de5a63          	bge	t3,a3,80022e10 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x78>
    80022e00:	86ae                	mv	a3,a1
    80022e02:	408687b3          	sub	a5,a3,s0
    80022e06:	177d                	addi	a4,a4,-1
    80022e08:	963e                	add	a2,a2,a5
    80022e0a:	8436                	mv	s0,a3
    80022e0c:	f375                	bnez	a4,80022df0 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x58>
    80022e0e:	a8bd                	j	80022e8c <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0xf4>
    80022e10:	00958d63          	beq	a1,s1,80022e2a <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x92>
    80022e14:	00144783          	lbu	a5,1(s0)
    80022e18:	00240593          	addi	a1,s0,2
    80022e1c:	03f7fe93          	andi	t4,a5,63
    80022e20:	0ff6f793          	andi	a5,a3,255
    80022e24:	fc77eee3          	bltu	a5,t2,80022e00 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x68>
    80022e28:	a039                	j	80022e36 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x9e>
    80022e2a:	4e81                	li	t4,0
    80022e2c:	85a6                	mv	a1,s1
    80022e2e:	0ff6f793          	andi	a5,a3,255
    80022e32:	fc77e7e3          	bltu	a5,t2,80022e00 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x68>
    80022e36:	00958a63          	beq	a1,s1,80022e4a <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0xb2>
    80022e3a:	0005c683          	lbu	a3,0(a1) # 110000 <.Lline_table_start0+0xd9699>
    80022e3e:	0585                	addi	a1,a1,1
    80022e40:	03f6ff13          	andi	t5,a3,63
    80022e44:	fa67eee3          	bltu	a5,t1,80022e00 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x68>
    80022e48:	a029                	j	80022e52 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0xba>
    80022e4a:	4f01                	li	t5,0
    80022e4c:	85a6                	mv	a1,s1
    80022e4e:	fa67e9e3          	bltu	a5,t1,80022e00 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x68>
    80022e52:	00958a63          	beq	a1,s1,80022e66 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0xce>
    80022e56:	0005cf83          	lbu	t6,0(a1)
    80022e5a:	00158693          	addi	a3,a1,1
    80022e5e:	03ffff93          	andi	t6,t6,63
    80022e62:	85b6                	mv	a1,a3
    80022e64:	a019                	j	80022e6a <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0xd2>
    80022e66:	4f81                	li	t6,0
    80022e68:	86a6                	mv	a3,s1
    80022e6a:	07ca                	slli	a5,a5,0x12
    80022e6c:	0107fa33          	and	s4,a5,a6
    80022e70:	00ce9793          	slli	a5,t4,0xc
    80022e74:	006f1e93          	slli	t4,t5,0x6
    80022e78:	0147e7b3          	or	a5,a5,s4
    80022e7c:	01d7e7b3          	or	a5,a5,t4
    80022e80:	01f7e7b3          	or	a5,a5,t6
    80022e84:	f7179fe3          	bne	a5,a7,80022e02 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x6a>
    80022e88:	a095                	j	80022eec <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x154>
    80022e8a:	85ca                	mv	a1,s2
    80022e8c:	06958063          	beq	a1,s1,80022eec <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x154>
    80022e90:	00058683          	lb	a3,0(a1)
    80022e94:	577d                	li	a4,-1
    80022e96:	02d75763          	bge	a4,a3,80022ec4 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x12c>
    80022e9a:	00163593          	seqz	a1,a2
    80022e9e:	013646b3          	xor	a3,a2,s3
    80022ea2:	0016b693          	seqz	a3,a3
    80022ea6:	8dd5                	or	a1,a1,a3
    80022ea8:	e999                	bnez	a1,80022ebe <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x126>
    80022eaa:	03367d63          	bgeu	a2,s3,80022ee4 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x14c>
    80022eae:	00c905b3          	add	a1,s2,a2
    80022eb2:	00058583          	lb	a1,0(a1)
    80022eb6:	fc000693          	li	a3,-64
    80022eba:	02d5c563          	blt	a1,a3,80022ee4 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x14c>
    80022ebe:	85ca                	mv	a1,s2
    80022ec0:	e585                	bnez	a1,80022ee8 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x150>
    80022ec2:	a02d                	j	80022eec <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x154>
    80022ec4:	00158793          	addi	a5,a1,1
    80022ec8:	0ff6f713          	andi	a4,a3,255
    80022ecc:	10978e63          	beq	a5,s1,80022fe8 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x250>
    80022ed0:	0015c683          	lbu	a3,1(a1)
    80022ed4:	0589                	addi	a1,a1,2
    80022ed6:	03f6f693          	andi	a3,a3,63
    80022eda:	0e000793          	li	a5,224
    80022ede:	10f77b63          	bgeu	a4,a5,80022ff4 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x25c>
    80022ee2:	bf65                	j	80022e9a <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x102>
    80022ee4:	4581                	li	a1,0
    80022ee6:	c199                	beqz	a1,80022eec <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x154>
    80022ee8:	892e                	mv	s2,a1
    80022eea:	89b2                	mv	s3,a2
    80022eec:	06028963          	beqz	t0,80022f5e <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x1c6>
    80022ef0:	04098463          	beqz	s3,80022f38 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x1a0>
    80022ef4:	4601                	li	a2,0
    80022ef6:	85ce                	mv	a1,s3
    80022ef8:	86ca                	mv	a3,s2
    80022efa:	0006c703          	lbu	a4,0(a3)
    80022efe:	0685                	addi	a3,a3,1
    80022f00:	0c077713          	andi	a4,a4,192
    80022f04:	f8070713          	addi	a4,a4,-128
    80022f08:	00e03733          	snez	a4,a4
    80022f0c:	15fd                	addi	a1,a1,-1
    80022f0e:	963a                	add	a2,a2,a4
    80022f10:	f5ed                	bnez	a1,80022efa <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x162>
    80022f12:	650c                	ld	a1,8(a0)
    80022f14:	04b67563          	bgeu	a2,a1,80022f5e <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x1c6>
    80022f18:	4601                	li	a2,0
    80022f1a:	86ce                	mv	a3,s3
    80022f1c:	874a                	mv	a4,s2
    80022f1e:	00074783          	lbu	a5,0(a4)
    80022f22:	0705                	addi	a4,a4,1
    80022f24:	0c07f793          	andi	a5,a5,192
    80022f28:	f8078793          	addi	a5,a5,-128 # 10ff80 <.Lline_table_start0+0xd9619>
    80022f2c:	00f037b3          	snez	a5,a5
    80022f30:	16fd                	addi	a3,a3,-1
    80022f32:	963e                	add	a2,a2,a5
    80022f34:	f6ed                	bnez	a3,80022f1e <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x186>
    80022f36:	a021                	j	80022f3e <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x1a6>
    80022f38:	650c                	ld	a1,8(a0)
    80022f3a:	4601                	li	a2,0
    80022f3c:	c18d                	beqz	a1,80022f5e <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x1c6>
    80022f3e:	03854683          	lbu	a3,56(a0)
    80022f42:	478d                	li	a5,3
    80022f44:	4701                	li	a4,0
    80022f46:	00f68363          	beq	a3,a5,80022f4c <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x1b4>
    80022f4a:	8736                	mv	a4,a3
    80022f4c:	00377693          	andi	a3,a4,3
    80022f50:	8d91                	sub	a1,a1,a2
    80022f52:	c695                	beqz	a3,80022f7e <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x1e6>
    80022f54:	4605                	li	a2,1
    80022f56:	02c69763          	bne	a3,a2,80022f84 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x1ec>
    80022f5a:	4a81                	li	s5,0
    80022f5c:	a80d                	j	80022f8e <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x1f6>
    80022f5e:	750c                	ld	a1,40(a0)
    80022f60:	7108                	ld	a0,32(a0)
    80022f62:	6d9c                	ld	a5,24(a1)
    80022f64:	85ca                	mv	a1,s2
    80022f66:	864e                	mv	a2,s3
    80022f68:	6ba2                	ld	s7,8(sp)
    80022f6a:	6b42                	ld	s6,16(sp)
    80022f6c:	6ae2                	ld	s5,24(sp)
    80022f6e:	7a02                	ld	s4,32(sp)
    80022f70:	79a2                	ld	s3,40(sp)
    80022f72:	7942                	ld	s2,48(sp)
    80022f74:	74e2                	ld	s1,56(sp)
    80022f76:	6406                	ld	s0,64(sp)
    80022f78:	60a6                	ld	ra,72(sp)
    80022f7a:	6161                	addi	sp,sp,80
    80022f7c:	8782                	jr	a5
    80022f7e:	8aae                	mv	s5,a1
    80022f80:	4581                	li	a1,0
    80022f82:	a031                	j	80022f8e <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x1f6>
    80022f84:	00158613          	addi	a2,a1,1
    80022f88:	8185                	srli	a1,a1,0x1
    80022f8a:	00165a93          	srli	s5,a2,0x1
    80022f8e:	02053b03          	ld	s6,32(a0)
    80022f92:	02853b83          	ld	s7,40(a0)
    80022f96:	03456403          	lwu	s0,52(a0)
    80022f9a:	00158493          	addi	s1,a1,1
    80022f9e:	14fd                	addi	s1,s1,-1
    80022fa0:	c889                	beqz	s1,80022fb2 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x21a>
    80022fa2:	020bb603          	ld	a2,32(s7)
    80022fa6:	855a                	mv	a0,s6
    80022fa8:	85a2                	mv	a1,s0
    80022faa:	9602                	jalr	a2
    80022fac:	d96d                	beqz	a0,80022f9e <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x206>
    80022fae:	4a05                	li	s4,1
    80022fb0:	a095                	j	80023014 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x27c>
    80022fb2:	0004051b          	sext.w	a0,s0
    80022fb6:	001105b7          	lui	a1,0x110
    80022fba:	4a05                	li	s4,1
    80022fbc:	04b50c63          	beq	a0,a1,80023014 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x27c>
    80022fc0:	018bb683          	ld	a3,24(s7)
    80022fc4:	855a                	mv	a0,s6
    80022fc6:	85ca                	mv	a1,s2
    80022fc8:	864e                	mv	a2,s3
    80022fca:	9682                	jalr	a3
    80022fcc:	e521                	bnez	a0,80023014 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x27c>
    80022fce:	4481                	li	s1,0
    80022fd0:	029a8f63          	beq	s5,s1,8002300e <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x276>
    80022fd4:	020bb603          	ld	a2,32(s7)
    80022fd8:	0485                	addi	s1,s1,1
    80022fda:	855a                	mv	a0,s6
    80022fdc:	85a2                	mv	a1,s0
    80022fde:	9602                	jalr	a2
    80022fe0:	d965                	beqz	a0,80022fd0 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x238>
    80022fe2:	fff48513          	addi	a0,s1,-1
    80022fe6:	a02d                	j	80023010 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x278>
    80022fe8:	4681                	li	a3,0
    80022fea:	85a6                	mv	a1,s1
    80022fec:	0e000793          	li	a5,224
    80022ff0:	eaf765e3          	bltu	a4,a5,80022e9a <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x102>
    80022ff4:	02958c63          	beq	a1,s1,8002302c <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x294>
    80022ff8:	0005c403          	lbu	s0,0(a1) # 110000 <.Lline_table_start0+0xd9699>
    80022ffc:	00158793          	addi	a5,a1,1
    80023000:	03f47593          	andi	a1,s0,63
    80023004:	0f000413          	li	s0,240
    80023008:	02877863          	bgeu	a4,s0,80023038 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x2a0>
    8002300c:	b579                	j	80022e9a <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x102>
    8002300e:	8556                	mv	a0,s5
    80023010:	01553a33          	sltu	s4,a0,s5
    80023014:	8552                	mv	a0,s4
    80023016:	6ba2                	ld	s7,8(sp)
    80023018:	6b42                	ld	s6,16(sp)
    8002301a:	6ae2                	ld	s5,24(sp)
    8002301c:	7a02                	ld	s4,32(sp)
    8002301e:	79a2                	ld	s3,40(sp)
    80023020:	7942                	ld	s2,48(sp)
    80023022:	74e2                	ld	s1,56(sp)
    80023024:	6406                	ld	s0,64(sp)
    80023026:	60a6                	ld	ra,72(sp)
    80023028:	6161                	addi	sp,sp,80
    8002302a:	8082                	ret
    8002302c:	4581                	li	a1,0
    8002302e:	87a6                	mv	a5,s1
    80023030:	0f000413          	li	s0,240
    80023034:	e68763e3          	bltu	a4,s0,80022e9a <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x102>
    80023038:	00978763          	beq	a5,s1,80023046 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x2ae>
    8002303c:	0007c783          	lbu	a5,0(a5)
    80023040:	03f7f793          	andi	a5,a5,63
    80023044:	a011                	j	80023048 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x2b0>
    80023046:	4781                	li	a5,0
    80023048:	074a                	slli	a4,a4,0x12
    8002304a:	001c04b7          	lui	s1,0x1c0
    8002304e:	8f65                	and	a4,a4,s1
    80023050:	06b2                	slli	a3,a3,0xc
    80023052:	059a                	slli	a1,a1,0x6
    80023054:	8ed9                	or	a3,a3,a4
    80023056:	8dd5                	or	a1,a1,a3
    80023058:	8ddd                	or	a1,a1,a5
    8002305a:	001106b7          	lui	a3,0x110
    8002305e:	e8d587e3          	beq	a1,a3,80022eec <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x154>
    80023062:	bd25                	j	80022e9a <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE+0x102>

Disassembly of section .text._ZN4core3fmt9Formatter15debug_lower_hex17h7c86defbf028d215E:

0000000080023064 <_ZN4core3fmt9Formatter15debug_lower_hex17h7c86defbf028d215E>:
    80023064:	03054503          	lbu	a0,48(a0)
    80023068:	8941                	andi	a0,a0,16
    8002306a:	8111                	srli	a0,a0,0x4
    8002306c:	8082                	ret

Disassembly of section .text._ZN4core3fmt9Formatter15debug_upper_hex17hdf276d50be1e3931E:

000000008002306e <_ZN4core3fmt9Formatter15debug_upper_hex17hdf276d50be1e3931E>:
    8002306e:	03054503          	lbu	a0,48(a0)
    80023072:	02057513          	andi	a0,a0,32
    80023076:	8115                	srli	a0,a0,0x5
    80023078:	8082                	ret

Disassembly of section .text._ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E:

000000008002307a <_ZN4core3fmt9Formatter11debug_tuple17hbc5c17cdaba95414E>:
    8002307a:	1101                	addi	sp,sp,-32
    8002307c:	ec06                	sd	ra,24(sp)
    8002307e:	e822                	sd	s0,16(sp)
    80023080:	e426                	sd	s1,8(sp)
    80023082:	e04a                	sd	s2,0(sp)
    80023084:	842e                	mv	s0,a1
    80023086:	7598                	ld	a4,40(a1)
    80023088:	718c                	ld	a1,32(a1)
    8002308a:	6f18                	ld	a4,24(a4)
    8002308c:	8936                	mv	s2,a3
    8002308e:	84aa                	mv	s1,a0
    80023090:	852e                	mv	a0,a1
    80023092:	85b2                	mv	a1,a2
    80023094:	8636                	mv	a2,a3
    80023096:	9702                	jalr	a4
    80023098:	00193593          	seqz	a1,s2
    8002309c:	e080                	sd	s0,0(s1)
    8002309e:	00a48823          	sb	a0,16(s1) # 1c0010 <.Lline_table_start0+0x1896a9>
    800230a2:	0004b423          	sd	zero,8(s1)
    800230a6:	00b488a3          	sb	a1,17(s1)
    800230aa:	6902                	ld	s2,0(sp)
    800230ac:	64a2                	ld	s1,8(sp)
    800230ae:	6442                	ld	s0,16(sp)
    800230b0:	60e2                	ld	ra,24(sp)
    800230b2:	6105                	addi	sp,sp,32
    800230b4:	8082                	ret

Disassembly of section .text._ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h399f9f006bebcceeE:

00000000800230b6 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h399f9f006bebcceeE>:
    800230b6:	7131                	addi	sp,sp,-192
    800230b8:	fd06                	sd	ra,184(sp)
    800230ba:	f922                	sd	s0,176(sp)
    800230bc:	f526                	sd	s1,168(sp)
    800230be:	f14a                	sd	s2,160(sp)
    800230c0:	ed4e                	sd	s3,152(sp)
    800230c2:	e952                	sd	s4,144(sp)
    800230c4:	e556                	sd	s5,136(sp)
    800230c6:	e15a                	sd	s6,128(sp)
    800230c8:	fcde                	sd	s7,120(sp)
    800230ca:	f8e2                	sd	s8,112(sp)
    800230cc:	f4e6                	sd	s9,104(sp)
    800230ce:	f0ea                	sd	s10,96(sp)
    800230d0:	ecee                	sd	s11,88(sp)
    800230d2:	7614                	ld	a3,40(a2)
    800230d4:	7200                	ld	s0,32(a2)
    800230d6:	e0b6                	sd	a3,64(sp)
    800230d8:	729c                	ld	a5,32(a3)
    800230da:	89ae                	mv	s3,a1
    800230dc:	e4aa                	sd	a0,72(sp)
    800230de:	02200593          	li	a1,34
    800230e2:	8522                	mv	a0,s0
    800230e4:	e8be                	sd	a5,80(sp)
    800230e6:	9782                	jalr	a5
    800230e8:	c10d                	beqz	a0,8002310a <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h399f9f006bebcceeE+0x54>
    800230ea:	4505                	li	a0,1
    800230ec:	6de6                	ld	s11,88(sp)
    800230ee:	7d06                	ld	s10,96(sp)
    800230f0:	7ca6                	ld	s9,104(sp)
    800230f2:	7c46                	ld	s8,112(sp)
    800230f4:	7be6                	ld	s7,120(sp)
    800230f6:	6b0a                	ld	s6,128(sp)
    800230f8:	6aaa                	ld	s5,136(sp)
    800230fa:	6a4a                	ld	s4,144(sp)
    800230fc:	69ea                	ld	s3,152(sp)
    800230fe:	790a                	ld	s2,160(sp)
    80023100:	74aa                	ld	s1,168(sp)
    80023102:	744a                	ld	s0,176(sp)
    80023104:	70ea                	ld	ra,184(sp)
    80023106:	6129                	addi	sp,sp,192
    80023108:	8082                	ret
    8002310a:	4481                	li	s1,0
    8002310c:	3a098263          	beqz	s3,800234b0 <.LBB201_67+0x3e>
    80023110:	4a01                	li	s4,0
    80023112:	6926                	ld	s2,72(sp)
    80023114:	01390b33          	add	s6,s2,s3
    80023118:	f0100513          	li	a0,-255
    8002311c:	1502                	slli	a0,a0,0x20
    8002311e:	fff50c93          	addi	s9,a0,-1
    80023122:	4bb1                	li	s7,12
    80023124:	4d89                	li	s11,2
    80023126:	fbf00813          	li	a6,-65
    8002312a:	05555537          	lui	a0,0x5555
    8002312e:	5555051b          	addiw	a0,a0,1365
    80023132:	0532                	slli	a0,a0,0xc
    80023134:	55550513          	addi	a0,a0,1365 # 5555555 <.Lline_table_start0+0x551ebee>
    80023138:	0532                	slli	a0,a0,0xc
    8002313a:	55550513          	addi	a0,a0,1365
    8002313e:	0532                	slli	a0,a0,0xc
    80023140:	55550513          	addi	a0,a0,1365
    80023144:	f02a                	sd	a0,32(sp)
    80023146:	03333537          	lui	a0,0x3333
    8002314a:	3335051b          	addiw	a0,a0,819
    8002314e:	0532                	slli	a0,a0,0xc
    80023150:	33350513          	addi	a0,a0,819 # 3333333 <.Lline_table_start0+0x32fc9cc>
    80023154:	0532                	slli	a0,a0,0xc
    80023156:	33350513          	addi	a0,a0,819
    8002315a:	0532                	slli	a0,a0,0xc
    8002315c:	33350513          	addi	a0,a0,819
    80023160:	ec2a                	sd	a0,24(sp)
    80023162:	00f0f537          	lui	a0,0xf0f
    80023166:	0f15051b          	addiw	a0,a0,241
    8002316a:	0532                	slli	a0,a0,0xc
    8002316c:	f0f50513          	addi	a0,a0,-241 # f0ef0f <.Lline_table_start0+0xed85a8>
    80023170:	0532                	slli	a0,a0,0xc
    80023172:	0f150513          	addi	a0,a0,241
    80023176:	0532                	slli	a0,a0,0xc
    80023178:	f0f50513          	addi	a0,a0,-241
    8002317c:	e82a                	sd	a0,16(sp)
    8002317e:	01010537          	lui	a0,0x1010
    80023182:	1015051b          	addiw	a0,a0,257
    80023186:	0542                	slli	a0,a0,0x10
    80023188:	10150513          	addi	a0,a0,257 # 1010101 <.Lline_table_start0+0xfd979a>
    8002318c:	0542                	slli	a0,a0,0x10
    8002318e:	10150513          	addi	a0,a0,257
    80023192:	e42a                	sd	a0,8(sp)
    80023194:	4515                	li	a0,5
    80023196:	1502                	slli	a0,a0,0x20
    80023198:	e02a                	sd	a0,0(sp)
    8002319a:	87ca                	mv	a5,s2
    8002319c:	f45a                	sd	s6,40(sp)
    8002319e:	00090503          	lb	a0,0(s2)
    800231a2:	00190693          	addi	a3,s2,1
    800231a6:	0ff57c13          	andi	s8,a0,255
    800231aa:	00054463          	bltz	a0,800231b2 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h399f9f006bebcceeE+0xfc>
    800231ae:	8936                	mv	s2,a3
    800231b0:	a869                	j	8002324a <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h399f9f006bebcceeE+0x194>
    800231b2:	05668663          	beq	a3,s6,800231fe <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h399f9f006bebcceeE+0x148>
    800231b6:	00194503          	lbu	a0,1(s2)
    800231ba:	0909                	addi	s2,s2,2
    800231bc:	03f57593          	andi	a1,a0,63
    800231c0:	01fc7513          	andi	a0,s8,31
    800231c4:	0e000613          	li	a2,224
    800231c8:	04cc6363          	bltu	s8,a2,8002320e <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h399f9f006bebcceeE+0x158>
    800231cc:	05690663          	beq	s2,s6,80023218 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h399f9f006bebcceeE+0x162>
    800231d0:	00094603          	lbu	a2,0(s2)
    800231d4:	00190693          	addi	a3,s2,1
    800231d8:	03f67613          	andi	a2,a2,63
    800231dc:	8936                	mv	s2,a3
    800231de:	059a                	slli	a1,a1,0x6
    800231e0:	8dd1                	or	a1,a1,a2
    800231e2:	0f000613          	li	a2,240
    800231e6:	04cc6163          	bltu	s8,a2,80023228 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h399f9f006bebcceeE+0x172>
    800231ea:	05668363          	beq	a3,s6,80023230 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h399f9f006bebcceeE+0x17a>
    800231ee:	0006c603          	lbu	a2,0(a3) # 110000 <.Lline_table_start0+0xd9699>
    800231f2:	00168913          	addi	s2,a3,1
    800231f6:	03f67613          	andi	a2,a2,63
    800231fa:	86ca                	mv	a3,s2
    800231fc:	a81d                	j	80023232 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h399f9f006bebcceeE+0x17c>
    800231fe:	4581                	li	a1,0
    80023200:	895a                	mv	s2,s6
    80023202:	01fc7513          	andi	a0,s8,31
    80023206:	0e000613          	li	a2,224
    8002320a:	fccc71e3          	bgeu	s8,a2,800231cc <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h399f9f006bebcceeE+0x116>
    8002320e:	051a                	slli	a0,a0,0x6
    80023210:	00b56c33          	or	s8,a0,a1
    80023214:	86ca                	mv	a3,s2
    80023216:	a815                	j	8002324a <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h399f9f006bebcceeE+0x194>
    80023218:	4601                	li	a2,0
    8002321a:	86da                	mv	a3,s6
    8002321c:	059a                	slli	a1,a1,0x6
    8002321e:	8dd1                	or	a1,a1,a2
    80023220:	0f000613          	li	a2,240
    80023224:	fccc73e3          	bgeu	s8,a2,800231ea <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h399f9f006bebcceeE+0x134>
    80023228:	0532                	slli	a0,a0,0xc
    8002322a:	00a5ec33          	or	s8,a1,a0
    8002322e:	a831                	j	8002324a <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h399f9f006bebcceeE+0x194>
    80023230:	4601                	li	a2,0
    80023232:	054a                	slli	a0,a0,0x12
    80023234:	001c0737          	lui	a4,0x1c0
    80023238:	8d79                	and	a0,a0,a4
    8002323a:	059a                	slli	a1,a1,0x6
    8002323c:	8d4d                	or	a0,a0,a1
    8002323e:	00c56c33          	or	s8,a0,a2
    80023242:	00110537          	lui	a0,0x110
    80023246:	24ac0363          	beq	s8,a0,8002348c <.LBB201_67+0x1a>
    8002324a:	4d09                	li	s10,2
    8002324c:	fc3e                	sd	a5,56(sp)
    8002324e:	f836                	sd	a3,48(sp)
    80023250:	038bd263          	bge	s7,s8,80023274 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h399f9f006bebcceeE+0x1be>
    80023254:	05c00513          	li	a0,92
    80023258:	02ac0b63          	beq	s8,a0,8002328e <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h399f9f006bebcceeE+0x1d8>
    8002325c:	02200513          	li	a0,34
    80023260:	02ac0763          	beq	s8,a0,8002328e <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h399f9f006bebcceeE+0x1d8>
    80023264:	4535                	li	a0,13
    80023266:	18ac1363          	bne	s8,a0,800233ec <.LBB201_51+0x40>
    8002326a:	07200a93          	li	s5,114
    8002326e:	029a7363          	bgeu	s4,s1,80023294 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h399f9f006bebcceeE+0x1de>
    80023272:	a401                	j	80023472 <.LBB201_67>
    80023274:	07400a93          	li	s5,116
    80023278:	4525                	li	a0,9
    8002327a:	00ac0b63          	beq	s8,a0,80023290 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h399f9f006bebcceeE+0x1da>
    8002327e:	4529                	li	a0,10
    80023280:	16ac1663          	bne	s8,a0,800233ec <.LBB201_51+0x40>
    80023284:	06e00a93          	li	s5,110
    80023288:	009a7663          	bgeu	s4,s1,80023294 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h399f9f006bebcceeE+0x1de>
    8002328c:	a2dd                	j	80023472 <.LBB201_67>
    8002328e:	8ae2                	mv	s5,s8
    80023290:	1e9a6163          	bltu	s4,s1,80023472 <.LBB201_67>
    80023294:	0014b513          	seqz	a0,s1
    80023298:	0134c5b3          	xor	a1,s1,s3
    8002329c:	0015b593          	seqz	a1,a1
    800232a0:	8d4d                	or	a0,a0,a1
    800232a2:	65a6                	ld	a1,72(sp)
    800232a4:	95a6                	add	a1,a1,s1
    800232a6:	e519                	bnez	a0,800232b4 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h399f9f006bebcceeE+0x1fe>
    800232a8:	1d34f563          	bgeu	s1,s3,80023472 <.LBB201_67>
    800232ac:	00058503          	lb	a0,0(a1)
    800232b0:	1ca85163          	bge	a6,a0,80023472 <.LBB201_67>
    800232b4:	001a3513          	seqz	a0,s4
    800232b8:	013a4633          	xor	a2,s4,s3
    800232bc:	00163613          	seqz	a2,a2
    800232c0:	8d51                	or	a0,a0,a2
    800232c2:	e909                	bnez	a0,800232d4 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h399f9f006bebcceeE+0x21e>
    800232c4:	1b3a7763          	bgeu	s4,s3,80023472 <.LBB201_67>
    800232c8:	6526                	ld	a0,72(sp)
    800232ca:	9552                	add	a0,a0,s4
    800232cc:	00050503          	lb	a0,0(a0) # 110000 <.Lline_table_start0+0xd9699>
    800232d0:	1aa85163          	bge	a6,a0,80023472 <.LBB201_67>
    800232d4:	6506                	ld	a0,64(sp)
    800232d6:	6d14                	ld	a3,24(a0)
    800232d8:	409a0633          	sub	a2,s4,s1
    800232dc:	8522                	mv	a0,s0
    800232de:	9682                	jalr	a3
    800232e0:	54fd                	li	s1,-1
    800232e2:	c115                	beqz	a0,80023306 <.LBB201_35+0x20>
    800232e4:	b519                	j	800230ea <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h399f9f006bebcceeE+0x34>

00000000800232e6 <.LBB201_35>:
    800232e6:	009b7b33          	and	s6,s6,s1
    800232ea:	019bf533          	and	a0,s7,s9
    800232ee:	4d0d                	li	s10,3
    800232f0:	020d1593          	slli	a1,s10,0x20
    800232f4:	00b56bb3          	or	s7,a0,a1
    800232f8:	07500593          	li	a1,117
    800232fc:	8522                	mv	a0,s0
    800232fe:	67c6                	ld	a5,80(sp)
    80023300:	9782                	jalr	a5
    80023302:	de0514e3          	bnez	a0,800230ea <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h399f9f006bebcceeE+0x34>
    80023306:	020d1513          	slli	a0,s10,0x20
    8002330a:	9101                	srli	a0,a0,0x20
    8002330c:	4d05                	li	s10,1
    8002330e:	02ad5a63          	bge	s10,a0,80023342 <.LBB201_40+0x10>
    80023312:	05c00593          	li	a1,92
    80023316:	ffb503e3          	beq	a0,s11,800232fc <.LBB201_35+0x16>
    8002331a:	020bd513          	srli	a0,s7,0x20
    8002331e:	0ff57513          	andi	a0,a0,255
    80023322:	050e                	slli	a0,a0,0x3

0000000080023324 <.LBB201_66>:
    80023324:	00009617          	auipc	a2,0x9
    80023328:	55460613          	addi	a2,a2,1364 # 8002c878 <.LJTI201_0>
    8002332c:	9532                	add	a0,a0,a2
    8002332e:	6108                	ld	a0,0(a0)
    80023330:	8502                	jr	a0

0000000080023332 <.LBB201_40>:
    80023332:	009b7b33          	and	s6,s6,s1
    80023336:	019bfbb3          	and	s7,s7,s9
    8002333a:	4d0d                	li	s10,3
    8002333c:	07d00593          	li	a1,125
    80023340:	bf75                	j	800232fc <.LBB201_35+0x16>
    80023342:	4585                	li	a1,1
    80023344:	06b51463          	bne	a0,a1,800233ac <.LBB201_51>
    80023348:	4d01                	li	s10,0
    8002334a:	85d6                	mv	a1,s5
    8002334c:	bf45                	j	800232fc <.LBB201_35+0x16>

000000008002334e <.LBB201_43>:
    8002334e:	002b1513          	slli	a0,s6,0x2
    80023352:	00abd53b          	srlw	a0,s7,a0
    80023356:	893d                	andi	a0,a0,15
    80023358:	03000593          	li	a1,48
    8002335c:	4629                	li	a2,10
    8002335e:	00c56463          	bltu	a0,a2,80023366 <.LBB201_43+0x18>
    80023362:	05700593          	li	a1,87
    80023366:	95aa                	add	a1,a1,a0
    80023368:	020b0863          	beqz	s6,80023398 <.LBB201_48+0xe>
    8002336c:	1b7d                	addi	s6,s6,-1
    8002336e:	4d0d                	li	s10,3
    80023370:	b771                	j	800232fc <.LBB201_35+0x16>

0000000080023372 <.LBB201_47>:
    80023372:	009b7b33          	and	s6,s6,s1
    80023376:	019bf533          	and	a0,s7,s9
    8002337a:	4585                	li	a1,1
    8002337c:	1586                	slli	a1,a1,0x21
    8002337e:	00b56bb3          	or	s7,a0,a1
    80023382:	4d0d                	li	s10,3
    80023384:	07b00593          	li	a1,123
    80023388:	bf95                	j	800232fc <.LBB201_35+0x16>

000000008002338a <.LBB201_48>:
    8002338a:	009b7b33          	and	s6,s6,s1
    8002338e:	019bf533          	and	a0,s7,s9
    80023392:	4605                	li	a2,1
    80023394:	160a                	slli	a2,a2,0x22
    80023396:	a039                	j	800233a4 <.LBB201_48+0x1a>
    80023398:	009b7b33          	and	s6,s6,s1
    8002339c:	019bf533          	and	a0,s7,s9
    800233a0:	4605                	li	a2,1
    800233a2:	1602                	slli	a2,a2,0x20
    800233a4:	00c56bb3          	or	s7,a0,a2
    800233a8:	4d0d                	li	s10,3
    800233aa:	bf89                	j	800232fc <.LBB201_35+0x16>

00000000800233ac <.LBB201_51>:
    800233ac:	4505                	li	a0,1
    800233ae:	08000593          	li	a1,128
    800233b2:	00bc6d63          	bltu	s8,a1,800233cc <.LBB201_51+0x20>
    800233b6:	00bc5593          	srli	a1,s8,0xb
    800233ba:	4509                	li	a0,2
    800233bc:	c981                	beqz	a1,800233cc <.LBB201_51+0x20>
    800233be:	010c5513          	srli	a0,s8,0x10
    800233c2:	00153513          	seqz	a0,a0
    800233c6:	4591                	li	a1,4
    800233c8:	40a58533          	sub	a0,a1,a0
    800233cc:	014504b3          	add	s1,a0,s4
    800233d0:	7b22                	ld	s6,40(sp)
    800233d2:	4bb1                	li	s7,12
    800233d4:	fbf00813          	li	a6,-65
    800233d8:	7562                	ld	a0,56(sp)
    800233da:	75c2                	ld	a1,48(sp)
    800233dc:	40aa0533          	sub	a0,s4,a0
    800233e0:	00b50a33          	add	s4,a0,a1
    800233e4:	87ca                	mv	a5,s2
    800233e6:	db691ce3          	bne	s2,s6,8002319e <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h399f9f006bebcceeE+0xe8>
    800233ea:	a04d                	j	8002348c <.LBB201_67+0x1a>
    800233ec:	8562                	mv	a0,s8
    800233ee:	00002097          	auipc	ra,0x2
    800233f2:	9ce080e7          	jalr	-1586(ra) # 80024dbc <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17hb6efbf5d86b330e2E>
    800233f6:	e519                	bnez	a0,80023404 <.LBB201_51+0x58>
    800233f8:	8562                	mv	a0,s8
    800233fa:	00001097          	auipc	ra,0x1
    800233fe:	a7c080e7          	jalr	-1412(ra) # 80023e76 <_ZN4core7unicode9printable12is_printable17hd386595a5390c2aaE>
    80023402:	f969                	bnez	a0,800233d4 <.LBB201_51+0x28>
    80023404:	001c6513          	ori	a0,s8,1
    80023408:	00155593          	srli	a1,a0,0x1
    8002340c:	8d4d                	or	a0,a0,a1
    8002340e:	00255593          	srli	a1,a0,0x2
    80023412:	8d4d                	or	a0,a0,a1
    80023414:	00455593          	srli	a1,a0,0x4
    80023418:	8d4d                	or	a0,a0,a1
    8002341a:	00855593          	srli	a1,a0,0x8
    8002341e:	8d4d                	or	a0,a0,a1
    80023420:	01055593          	srli	a1,a0,0x10
    80023424:	8d4d                	or	a0,a0,a1
    80023426:	02055593          	srli	a1,a0,0x20
    8002342a:	8d4d                	or	a0,a0,a1
    8002342c:	fff54513          	not	a0,a0
    80023430:	00155593          	srli	a1,a0,0x1
    80023434:	7602                	ld	a2,32(sp)
    80023436:	8df1                	and	a1,a1,a2
    80023438:	8d0d                	sub	a0,a0,a1
    8002343a:	6662                	ld	a2,24(sp)
    8002343c:	00c575b3          	and	a1,a0,a2
    80023440:	8109                	srli	a0,a0,0x2
    80023442:	8d71                	and	a0,a0,a2
    80023444:	952e                	add	a0,a0,a1
    80023446:	00455593          	srli	a1,a0,0x4
    8002344a:	952e                	add	a0,a0,a1
    8002344c:	65c2                	ld	a1,16(sp)
    8002344e:	8d6d                	and	a0,a0,a1
    80023450:	65a2                	ld	a1,8(sp)
    80023452:	02b50533          	mul	a0,a0,a1
    80023456:	9161                	srli	a0,a0,0x38
    80023458:	1501                	addi	a0,a0,-32
    8002345a:	0025551b          	srliw	a0,a0,0x2
    8002345e:	00754b13          	xori	s6,a0,7
    80023462:	6502                	ld	a0,0(sp)
    80023464:	00ac6bb3          	or	s7,s8,a0
    80023468:	4d0d                	li	s10,3
    8002346a:	fbf00813          	li	a6,-65
    8002346e:	e29a73e3          	bgeu	s4,s1,80023294 <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h399f9f006bebcceeE+0x1de>

0000000080023472 <.LBB201_67>:
    80023472:	0000a717          	auipc	a4,0xa
    80023476:	86670713          	addi	a4,a4,-1946 # 8002ccd8 <.Lanon.f077182aff5f58a5660f14b1290425e3.240>
    8002347a:	6526                	ld	a0,72(sp)
    8002347c:	85ce                	mv	a1,s3
    8002347e:	8626                	mv	a2,s1
    80023480:	86d2                	mv	a3,s4
    80023482:	00000097          	auipc	ra,0x0
    80023486:	73a080e7          	jalr	1850(ra) # 80023bbc <_ZN4core3str16slice_error_fail17h98613a818fa8baa4E>
    8002348a:	0000                	unimp
    8002348c:	0014b513          	seqz	a0,s1
    80023490:	0134c5b3          	xor	a1,s1,s3
    80023494:	0015b593          	seqz	a1,a1
    80023498:	8d4d                	or	a0,a0,a1
    8002349a:	e919                	bnez	a0,800234b0 <.LBB201_67+0x3e>
    8002349c:	0534f863          	bgeu	s1,s3,800234ec <.LBB201_68>
    800234a0:	6526                	ld	a0,72(sp)
    800234a2:	9526                	add	a0,a0,s1
    800234a4:	00050503          	lb	a0,0(a0)
    800234a8:	fbf00593          	li	a1,-65
    800234ac:	04a5d063          	bge	a1,a0,800234ec <.LBB201_68>
    800234b0:	6506                	ld	a0,64(sp)
    800234b2:	6d14                	ld	a3,24(a0)
    800234b4:	6526                	ld	a0,72(sp)
    800234b6:	009505b3          	add	a1,a0,s1
    800234ba:	40998633          	sub	a2,s3,s1
    800234be:	8522                	mv	a0,s0
    800234c0:	9682                	jalr	a3
    800234c2:	c20514e3          	bnez	a0,800230ea <_ZN40_$LT$str$u20$as$u20$core..fmt..Debug$GT$3fmt17h399f9f006bebcceeE+0x34>
    800234c6:	02200593          	li	a1,34
    800234ca:	8522                	mv	a0,s0
    800234cc:	67c6                	ld	a5,80(sp)
    800234ce:	6de6                	ld	s11,88(sp)
    800234d0:	7d06                	ld	s10,96(sp)
    800234d2:	7ca6                	ld	s9,104(sp)
    800234d4:	7c46                	ld	s8,112(sp)
    800234d6:	7be6                	ld	s7,120(sp)
    800234d8:	6b0a                	ld	s6,128(sp)
    800234da:	6aaa                	ld	s5,136(sp)
    800234dc:	6a4a                	ld	s4,144(sp)
    800234de:	69ea                	ld	s3,152(sp)
    800234e0:	790a                	ld	s2,160(sp)
    800234e2:	74aa                	ld	s1,168(sp)
    800234e4:	744a                	ld	s0,176(sp)
    800234e6:	70ea                	ld	ra,184(sp)
    800234e8:	6129                	addi	sp,sp,192
    800234ea:	8782                	jr	a5

00000000800234ec <.LBB201_68>:
    800234ec:	0000a717          	auipc	a4,0xa
    800234f0:	80470713          	addi	a4,a4,-2044 # 8002ccf0 <.Lanon.f077182aff5f58a5660f14b1290425e3.241>
    800234f4:	6526                	ld	a0,72(sp)
    800234f6:	85ce                	mv	a1,s3
    800234f8:	8626                	mv	a2,s1
    800234fa:	86ce                	mv	a3,s3
    800234fc:	00000097          	auipc	ra,0x0
    80023500:	6c0080e7          	jalr	1728(ra) # 80023bbc <_ZN4core3str16slice_error_fail17h98613a818fa8baa4E>
	...

Disassembly of section .text._ZN42_$LT$str$u20$as$u20$core..fmt..Display$GT$3fmt17h0539661bd0865efeE:

0000000080023506 <_ZN42_$LT$str$u20$as$u20$core..fmt..Display$GT$3fmt17h0539661bd0865efeE>:
    80023506:	86ae                	mv	a3,a1
    80023508:	85aa                	mv	a1,a0
    8002350a:	8532                	mv	a0,a2
    8002350c:	8636                	mv	a2,a3
    8002350e:	00000317          	auipc	t1,0x0
    80023512:	88a30067          	jr	-1910(t1) # 80022d98 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE>

Disassembly of section .text._ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hdf5d4d6f5f47000aE:

0000000080023516 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hdf5d4d6f5f47000aE>:
    80023516:	7159                	addi	sp,sp,-112
    80023518:	f486                	sd	ra,104(sp)
    8002351a:	f0a2                	sd	s0,96(sp)
    8002351c:	eca6                	sd	s1,88(sp)
    8002351e:	e8ca                	sd	s2,80(sp)
    80023520:	e4ce                	sd	s3,72(sp)
    80023522:	e0d2                	sd	s4,64(sp)
    80023524:	fc56                	sd	s5,56(sp)
    80023526:	f85a                	sd	s6,48(sp)
    80023528:	f45e                	sd	s7,40(sp)
    8002352a:	f062                	sd	s8,32(sp)
    8002352c:	ec66                	sd	s9,24(sp)
    8002352e:	e86a                	sd	s10,16(sp)
    80023530:	e46e                	sd	s11,8(sp)
    80023532:	7590                	ld	a2,40(a1)
    80023534:	0205ba03          	ld	s4,32(a1)
    80023538:	721c                	ld	a5,32(a2)
    8002353a:	84aa                	mv	s1,a0
    8002353c:	02700593          	li	a1,39
    80023540:	8552                	mv	a0,s4
    80023542:	e03e                	sd	a5,0(sp)
    80023544:	9782                	jalr	a5
    80023546:	c10d                	beqz	a0,80023568 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hdf5d4d6f5f47000aE+0x52>
    80023548:	4505                	li	a0,1
    8002354a:	6da2                	ld	s11,8(sp)
    8002354c:	6d42                	ld	s10,16(sp)
    8002354e:	6ce2                	ld	s9,24(sp)
    80023550:	7c02                	ld	s8,32(sp)
    80023552:	7ba2                	ld	s7,40(sp)
    80023554:	7b42                	ld	s6,48(sp)
    80023556:	7ae2                	ld	s5,56(sp)
    80023558:	6a06                	ld	s4,64(sp)
    8002355a:	69a6                	ld	s3,72(sp)
    8002355c:	6946                	ld	s2,80(sp)
    8002355e:	64e6                	ld	s1,88(sp)
    80023560:	7406                	ld	s0,96(sp)
    80023562:	70a6                	ld	ra,104(sp)
    80023564:	6165                	addi	sp,sp,112
    80023566:	8082                	ret
    80023568:	0004e903          	lwu	s2,0(s1)
    8002356c:	4531                	li	a0,12
    8002356e:	4489                	li	s1,2
    80023570:	03255063          	bge	a0,s2,80023590 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hdf5d4d6f5f47000aE+0x7a>
    80023574:	05c00993          	li	s3,92
    80023578:	03390463          	beq	s2,s3,800235a0 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hdf5d4d6f5f47000aE+0x8a>
    8002357c:	02700993          	li	s3,39
    80023580:	03390063          	beq	s2,s3,800235a0 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hdf5d4d6f5f47000aE+0x8a>
    80023584:	4535                	li	a0,13
    80023586:	02a91163          	bne	s2,a0,800235a8 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hdf5d4d6f5f47000aE+0x92>
    8002358a:	07200993          	li	s3,114
    8002358e:	a8ed                	j	80023688 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hdf5d4d6f5f47000aE+0x172>
    80023590:	4525                	li	a0,9
    80023592:	00a90863          	beq	s2,a0,800235a2 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hdf5d4d6f5f47000aE+0x8c>
    80023596:	4529                	li	a0,10
    80023598:	00a91863          	bne	s2,a0,800235a8 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hdf5d4d6f5f47000aE+0x92>
    8002359c:	06e00993          	li	s3,110
    800235a0:	a0e5                	j	80023688 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hdf5d4d6f5f47000aE+0x172>
    800235a2:	07400993          	li	s3,116
    800235a6:	a0cd                	j	80023688 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hdf5d4d6f5f47000aE+0x172>
    800235a8:	854a                	mv	a0,s2
    800235aa:	00002097          	auipc	ra,0x2
    800235ae:	812080e7          	jalr	-2030(ra) # 80024dbc <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17hb6efbf5d86b330e2E>
    800235b2:	e911                	bnez	a0,800235c6 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hdf5d4d6f5f47000aE+0xb0>
    800235b4:	854a                	mv	a0,s2
    800235b6:	00001097          	auipc	ra,0x1
    800235ba:	8c0080e7          	jalr	-1856(ra) # 80023e76 <_ZN4core7unicode9printable12is_printable17hd386595a5390c2aaE>
    800235be:	c501                	beqz	a0,800235c6 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hdf5d4d6f5f47000aE+0xb0>
    800235c0:	4485                	li	s1,1
    800235c2:	89ca                	mv	s3,s2
    800235c4:	a0d1                	j	80023688 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hdf5d4d6f5f47000aE+0x172>
    800235c6:	00196513          	ori	a0,s2,1
    800235ca:	00155593          	srli	a1,a0,0x1
    800235ce:	8d4d                	or	a0,a0,a1
    800235d0:	00255593          	srli	a1,a0,0x2
    800235d4:	8d4d                	or	a0,a0,a1
    800235d6:	00455593          	srli	a1,a0,0x4
    800235da:	8d4d                	or	a0,a0,a1
    800235dc:	00855593          	srli	a1,a0,0x8
    800235e0:	8d4d                	or	a0,a0,a1
    800235e2:	01055593          	srli	a1,a0,0x10
    800235e6:	8d4d                	or	a0,a0,a1
    800235e8:	02055593          	srli	a1,a0,0x20
    800235ec:	8d4d                	or	a0,a0,a1
    800235ee:	fff54513          	not	a0,a0
    800235f2:	00155593          	srli	a1,a0,0x1
    800235f6:	05555637          	lui	a2,0x5555
    800235fa:	5556061b          	addiw	a2,a2,1365
    800235fe:	0632                	slli	a2,a2,0xc
    80023600:	55560613          	addi	a2,a2,1365 # 5555555 <.Lline_table_start0+0x551ebee>
    80023604:	0632                	slli	a2,a2,0xc
    80023606:	55560613          	addi	a2,a2,1365
    8002360a:	0632                	slli	a2,a2,0xc
    8002360c:	55560613          	addi	a2,a2,1365
    80023610:	8df1                	and	a1,a1,a2
    80023612:	8d0d                	sub	a0,a0,a1
    80023614:	033335b7          	lui	a1,0x3333
    80023618:	3335859b          	addiw	a1,a1,819
    8002361c:	05b2                	slli	a1,a1,0xc
    8002361e:	33358593          	addi	a1,a1,819 # 3333333 <.Lline_table_start0+0x32fc9cc>
    80023622:	05b2                	slli	a1,a1,0xc
    80023624:	33358593          	addi	a1,a1,819
    80023628:	05b2                	slli	a1,a1,0xc
    8002362a:	33358593          	addi	a1,a1,819
    8002362e:	00b57633          	and	a2,a0,a1
    80023632:	8109                	srli	a0,a0,0x2
    80023634:	8d6d                	and	a0,a0,a1
    80023636:	9532                	add	a0,a0,a2
    80023638:	00455593          	srli	a1,a0,0x4
    8002363c:	952e                	add	a0,a0,a1
    8002363e:	00f0f5b7          	lui	a1,0xf0f
    80023642:	0f15859b          	addiw	a1,a1,241
    80023646:	05b2                	slli	a1,a1,0xc
    80023648:	f0f58593          	addi	a1,a1,-241 # f0ef0f <.Lline_table_start0+0xed85a8>
    8002364c:	05b2                	slli	a1,a1,0xc
    8002364e:	0f158593          	addi	a1,a1,241
    80023652:	05b2                	slli	a1,a1,0xc
    80023654:	f0f58593          	addi	a1,a1,-241
    80023658:	8d6d                	and	a0,a0,a1
    8002365a:	010105b7          	lui	a1,0x1010
    8002365e:	1015859b          	addiw	a1,a1,257
    80023662:	05c2                	slli	a1,a1,0x10
    80023664:	10158593          	addi	a1,a1,257 # 1010101 <.Lline_table_start0+0xfd979a>
    80023668:	05c2                	slli	a1,a1,0x10
    8002366a:	10158593          	addi	a1,a1,257
    8002366e:	02b50533          	mul	a0,a0,a1
    80023672:	9161                	srli	a0,a0,0x38
    80023674:	1501                	addi	a0,a0,-32
    80023676:	0025551b          	srliw	a0,a0,0x2
    8002367a:	00754a93          	xori	s5,a0,7
    8002367e:	4515                	li	a0,5
    80023680:	1502                	slli	a0,a0,0x20
    80023682:	00a96433          	or	s0,s2,a0
    80023686:	448d                	li	s1,3
    80023688:	597d                	li	s2,-1
    8002368a:	f0100513          	li	a0,-255
    8002368e:	1502                	slli	a0,a0,0x20
    80023690:	fff50b13          	addi	s6,a0,-1
    80023694:	4b85                	li	s7,1
    80023696:	4c09                	li	s8,2

0000000080023698 <.LBB203_35>:
    80023698:	00009c97          	auipc	s9,0x9
    8002369c:	210c8c93          	addi	s9,s9,528 # 8002c8a8 <.LJTI203_0>
    800236a0:	020b9d93          	slli	s11,s7,0x20
    800236a4:	021b9d13          	slli	s10,s7,0x21
    800236a8:	a039                	j	800236b6 <.LBB203_35+0x1e>
    800236aa:	4485                	li	s1,1
    800236ac:	8552                	mv	a0,s4
    800236ae:	6782                	ld	a5,0(sp)
    800236b0:	9782                	jalr	a5
    800236b2:	e8051be3          	bnez	a0,80023548 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hdf5d4d6f5f47000aE+0x32>
    800236b6:	02049513          	slli	a0,s1,0x20
    800236ba:	9101                	srli	a0,a0,0x20
    800236bc:	02abd663          	bge	s7,a0,800236e8 <.LBB203_22+0x10>
    800236c0:	05c00593          	li	a1,92
    800236c4:	ff8503e3          	beq	a0,s8,800236aa <.LBB203_35+0x12>
    800236c8:	02045513          	srli	a0,s0,0x20
    800236cc:	0ff57513          	andi	a0,a0,255
    800236d0:	050e                	slli	a0,a0,0x3
    800236d2:	9566                	add	a0,a0,s9
    800236d4:	6108                	ld	a0,0(a0)
    800236d6:	8502                	jr	a0

00000000800236d8 <.LBB203_22>:
    800236d8:	012afab3          	and	s5,s5,s2
    800236dc:	01647433          	and	s0,s0,s6
    800236e0:	448d                	li	s1,3
    800236e2:	07d00593          	li	a1,125
    800236e6:	b7d9                	j	800236ac <.LBB203_35+0x14>
    800236e8:	07751d63          	bne	a0,s7,80023762 <.LBB203_34>
    800236ec:	4481                	li	s1,0
    800236ee:	85ce                	mv	a1,s3
    800236f0:	bf75                	j	800236ac <.LBB203_35+0x14>

00000000800236f2 <.LBB203_25>:
    800236f2:	002a9513          	slli	a0,s5,0x2
    800236f6:	00a4553b          	srlw	a0,s0,a0
    800236fa:	893d                	andi	a0,a0,15
    800236fc:	03000593          	li	a1,48
    80023700:	4629                	li	a2,10
    80023702:	00c56463          	bltu	a0,a2,8002370a <.LBB203_25+0x18>
    80023706:	05700593          	li	a1,87
    8002370a:	95aa                	add	a1,a1,a0
    8002370c:	040a8363          	beqz	s5,80023752 <.LBB203_31+0x12>
    80023710:	1afd                	addi	s5,s5,-1
    80023712:	a0b1                	j	8002375e <.LBB203_31+0x1e>

0000000080023714 <.LBB203_29>:
    80023714:	012afab3          	and	s5,s5,s2
    80023718:	01647533          	and	a0,s0,s6
    8002371c:	01a56433          	or	s0,a0,s10
    80023720:	448d                	li	s1,3
    80023722:	07b00593          	li	a1,123
    80023726:	b759                	j	800236ac <.LBB203_35+0x14>

0000000080023728 <.LBB203_30>:
    80023728:	012afab3          	and	s5,s5,s2
    8002372c:	01647533          	and	a0,s0,s6
    80023730:	448d                	li	s1,3
    80023732:	02049593          	slli	a1,s1,0x20
    80023736:	00b56433          	or	s0,a0,a1
    8002373a:	07500593          	li	a1,117
    8002373e:	b7bd                	j	800236ac <.LBB203_35+0x14>

0000000080023740 <.LBB203_31>:
    80023740:	012afab3          	and	s5,s5,s2
    80023744:	01647533          	and	a0,s0,s6
    80023748:	022b9613          	slli	a2,s7,0x22
    8002374c:	00c56433          	or	s0,a0,a2
    80023750:	a039                	j	8002375e <.LBB203_31+0x1e>
    80023752:	012afab3          	and	s5,s5,s2
    80023756:	01647533          	and	a0,s0,s6
    8002375a:	01b56433          	or	s0,a0,s11
    8002375e:	448d                	li	s1,3
    80023760:	b7b1                	j	800236ac <.LBB203_35+0x14>

0000000080023762 <.LBB203_34>:
    80023762:	02700593          	li	a1,39
    80023766:	8552                	mv	a0,s4
    80023768:	6782                	ld	a5,0(sp)
    8002376a:	6da2                	ld	s11,8(sp)
    8002376c:	6d42                	ld	s10,16(sp)
    8002376e:	6ce2                	ld	s9,24(sp)
    80023770:	7c02                	ld	s8,32(sp)
    80023772:	7ba2                	ld	s7,40(sp)
    80023774:	7b42                	ld	s6,48(sp)
    80023776:	7ae2                	ld	s5,56(sp)
    80023778:	6a06                	ld	s4,64(sp)
    8002377a:	69a6                	ld	s3,72(sp)
    8002377c:	6946                	ld	s2,80(sp)
    8002377e:	64e6                	ld	s1,88(sp)
    80023780:	7406                	ld	s0,96(sp)
    80023782:	70a6                	ld	ra,104(sp)
    80023784:	6165                	addi	sp,sp,112
    80023786:	8782                	jr	a5

Disassembly of section .text._ZN4core5slice6memchr19memchr_general_case17hea58e64f15abdd7dE:

0000000080023788 <_ZN4core5slice6memchr19memchr_general_case17hea58e64f15abdd7dE>:
    80023788:	1141                	addi	sp,sp,-16
    8002378a:	e406                	sd	ra,8(sp)
    8002378c:	00758693          	addi	a3,a1,7
    80023790:	9ae1                	andi	a3,a3,-8
    80023792:	8e8d                	sub	a3,a3,a1
    80023794:	0ff57813          	andi	a6,a0,255
    80023798:	c68d                	beqz	a3,800237c2 <_ZN4core5slice6memchr19memchr_general_case17hea58e64f15abdd7dE+0x3a>
    8002379a:	8532                	mv	a0,a2
    8002379c:	00d66363          	bltu	a2,a3,800237a2 <_ZN4core5slice6memchr19memchr_general_case17hea58e64f15abdd7dE+0x1a>
    800237a0:	8536                	mv	a0,a3
    800237a2:	c105                	beqz	a0,800237c2 <_ZN4core5slice6memchr19memchr_general_case17hea58e64f15abdd7dE+0x3a>
    800237a4:	4681                	li	a3,0
    800237a6:	00d58733          	add	a4,a1,a3
    800237aa:	00074703          	lbu	a4,0(a4)
    800237ae:	0b070e63          	beq	a4,a6,8002386a <_ZN4core5slice6memchr19memchr_general_case17hea58e64f15abdd7dE+0xe2>
    800237b2:	0685                	addi	a3,a3,1
    800237b4:	fed519e3          	bne	a0,a3,800237a6 <_ZN4core5slice6memchr19memchr_general_case17hea58e64f15abdd7dE+0x1e>
    800237b8:	ff060893          	addi	a7,a2,-16
    800237bc:	00a8f663          	bgeu	a7,a0,800237c8 <_ZN4core5slice6memchr19memchr_general_case17hea58e64f15abdd7dE+0x40>
    800237c0:	a049                	j	80023842 <_ZN4core5slice6memchr19memchr_general_case17hea58e64f15abdd7dE+0xba>
    800237c2:	4501                	li	a0,0
    800237c4:	ff060893          	addi	a7,a2,-16
    800237c8:	feff06b7          	lui	a3,0xfeff0
    800237cc:	eff6869b          	addiw	a3,a3,-257
    800237d0:	06c2                	slli	a3,a3,0x10
    800237d2:	eff68693          	addi	a3,a3,-257 # fffffffffefefeff <end+0xffffffff7ef8b96f>
    800237d6:	06c2                	slli	a3,a3,0x10
    800237d8:	eff68293          	addi	t0,a3,-257
    800237dc:	76c1                	lui	a3,0xffff0
    800237de:	1016869b          	addiw	a3,a3,257
    800237e2:	06c2                	slli	a3,a3,0x10
    800237e4:	10168693          	addi	a3,a3,257 # ffffffffffff0101 <end+0xffffffff7ff8bb71>
    800237e8:	06c2                	slli	a3,a3,0x10
    800237ea:	10168693          	addi	a3,a3,257
    800237ee:	06be                	slli	a3,a3,0xf
    800237f0:	08068313          	addi	t1,a3,128
    800237f4:	010106b7          	lui	a3,0x1010
    800237f8:	1016869b          	addiw	a3,a3,257
    800237fc:	06c2                	slli	a3,a3,0x10
    800237fe:	10168693          	addi	a3,a3,257 # 1010101 <.Lline_table_start0+0xfd979a>
    80023802:	06c2                	slli	a3,a3,0x10
    80023804:	10168693          	addi	a3,a3,257
    80023808:	02d803b3          	mul	t2,a6,a3
    8002380c:	00a587b3          	add	a5,a1,a0
    80023810:	6398                	ld	a4,0(a5)
    80023812:	679c                	ld	a5,8(a5)
    80023814:	00774733          	xor	a4,a4,t2
    80023818:	fff74693          	not	a3,a4
    8002381c:	9716                	add	a4,a4,t0
    8002381e:	0066f6b3          	and	a3,a3,t1
    80023822:	8ef9                	and	a3,a3,a4
    80023824:	0077c733          	xor	a4,a5,t2
    80023828:	fff74793          	not	a5,a4
    8002382c:	9716                	add	a4,a4,t0
    8002382e:	0067f7b3          	and	a5,a5,t1
    80023832:	8f7d                	and	a4,a4,a5
    80023834:	8ed9                	or	a3,a3,a4
    80023836:	e681                	bnez	a3,8002383e <_ZN4core5slice6memchr19memchr_general_case17hea58e64f15abdd7dE+0xb6>
    80023838:	0541                	addi	a0,a0,16
    8002383a:	fca8f9e3          	bgeu	a7,a0,8002380c <_ZN4core5slice6memchr19memchr_general_case17hea58e64f15abdd7dE+0x84>
    8002383e:	02a66b63          	bltu	a2,a0,80023874 <.LBB209_21>
    80023842:	00c50e63          	beq	a0,a2,8002385e <_ZN4core5slice6memchr19memchr_general_case17hea58e64f15abdd7dE+0xd6>
    80023846:	4681                	li	a3,0
    80023848:	95aa                	add	a1,a1,a0
    8002384a:	8e09                	sub	a2,a2,a0
    8002384c:	00d58733          	add	a4,a1,a3
    80023850:	00074703          	lbu	a4,0(a4)
    80023854:	01070a63          	beq	a4,a6,80023868 <_ZN4core5slice6memchr19memchr_general_case17hea58e64f15abdd7dE+0xe0>
    80023858:	0685                	addi	a3,a3,1
    8002385a:	fed619e3          	bne	a2,a3,8002384c <_ZN4core5slice6memchr19memchr_general_case17hea58e64f15abdd7dE+0xc4>
    8002385e:	4501                	li	a0,0
    80023860:	85b6                	mv	a1,a3
    80023862:	60a2                	ld	ra,8(sp)
    80023864:	0141                	addi	sp,sp,16
    80023866:	8082                	ret
    80023868:	96aa                	add	a3,a3,a0
    8002386a:	4505                	li	a0,1
    8002386c:	85b6                	mv	a1,a3
    8002386e:	60a2                	ld	ra,8(sp)
    80023870:	0141                	addi	sp,sp,16
    80023872:	8082                	ret

0000000080023874 <.LBB209_21>:
    80023874:	00009697          	auipc	a3,0x9
    80023878:	49c68693          	addi	a3,a3,1180 # 8002cd10 <.Lanon.f077182aff5f58a5660f14b1290425e3.246>
    8002387c:	85b2                	mv	a1,a2
    8002387e:	8636                	mv	a2,a3
    80023880:	00000097          	auipc	ra,0x0
    80023884:	00a080e7          	jalr	10(ra) # 8002388a <_ZN4core5slice5index26slice_start_index_len_fail17h9b5b4d8717655b24E>
	...

Disassembly of section .text.unlikely._ZN4core5slice5index26slice_start_index_len_fail17h9b5b4d8717655b24E:

000000008002388a <_ZN4core5slice5index26slice_start_index_len_fail17h9b5b4d8717655b24E>:
    8002388a:	7159                	addi	sp,sp,-112
    8002388c:	f486                	sd	ra,104(sp)
    8002388e:	e42a                	sd	a0,8(sp)
    80023890:	e82e                	sd	a1,16(sp)
    80023892:	0028                	addi	a0,sp,8
    80023894:	e4aa                	sd	a0,72(sp)

0000000080023896 <.LBB215_1>:
    80023896:	00001517          	auipc	a0,0x1
    8002389a:	fc250513          	addi	a0,a0,-62 # 80024858 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h9c6c4af1578f7c29E>
    8002389e:	e8aa                	sd	a0,80(sp)
    800238a0:	080c                	addi	a1,sp,16
    800238a2:	ecae                	sd	a1,88(sp)
    800238a4:	f0aa                	sd	a0,96(sp)

00000000800238a6 <.LBB215_2>:
    800238a6:	00009517          	auipc	a0,0x9
    800238aa:	4ba50513          	addi	a0,a0,1210 # 8002cd60 <.Lanon.f077182aff5f58a5660f14b1290425e3.252>
    800238ae:	ec2a                	sd	a0,24(sp)
    800238b0:	4509                	li	a0,2
    800238b2:	f02a                	sd	a0,32(sp)
    800238b4:	f402                	sd	zero,40(sp)
    800238b6:	00ac                	addi	a1,sp,72
    800238b8:	fc2e                	sd	a1,56(sp)
    800238ba:	e0aa                	sd	a0,64(sp)
    800238bc:	0828                	addi	a0,sp,24
    800238be:	85b2                	mv	a1,a2
    800238c0:	fffff097          	auipc	ra,0xfffff
    800238c4:	8a8080e7          	jalr	-1880(ra) # 80022168 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
	...

Disassembly of section .text.unlikely._ZN4core5slice5index24slice_end_index_len_fail17hbdcbb59c061b5014E:

00000000800238ca <_ZN4core5slice5index24slice_end_index_len_fail17hbdcbb59c061b5014E>:
    800238ca:	7159                	addi	sp,sp,-112
    800238cc:	f486                	sd	ra,104(sp)
    800238ce:	e42a                	sd	a0,8(sp)
    800238d0:	e82e                	sd	a1,16(sp)
    800238d2:	0028                	addi	a0,sp,8
    800238d4:	e4aa                	sd	a0,72(sp)

00000000800238d6 <.LBB216_1>:
    800238d6:	00001517          	auipc	a0,0x1
    800238da:	f8250513          	addi	a0,a0,-126 # 80024858 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h9c6c4af1578f7c29E>
    800238de:	e8aa                	sd	a0,80(sp)
    800238e0:	080c                	addi	a1,sp,16
    800238e2:	ecae                	sd	a1,88(sp)
    800238e4:	f0aa                	sd	a0,96(sp)

00000000800238e6 <.LBB216_2>:
    800238e6:	00009517          	auipc	a0,0x9
    800238ea:	49a50513          	addi	a0,a0,1178 # 8002cd80 <.Lanon.f077182aff5f58a5660f14b1290425e3.254>
    800238ee:	ec2a                	sd	a0,24(sp)
    800238f0:	4509                	li	a0,2
    800238f2:	f02a                	sd	a0,32(sp)
    800238f4:	f402                	sd	zero,40(sp)
    800238f6:	00ac                	addi	a1,sp,72
    800238f8:	fc2e                	sd	a1,56(sp)
    800238fa:	e0aa                	sd	a0,64(sp)
    800238fc:	0828                	addi	a0,sp,24
    800238fe:	85b2                	mv	a1,a2
    80023900:	fffff097          	auipc	ra,0xfffff
    80023904:	868080e7          	jalr	-1944(ra) # 80022168 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
	...

Disassembly of section .text.unlikely._ZN4core5slice5index22slice_index_order_fail17h8c18576576dbf4e3E:

000000008002390a <_ZN4core5slice5index22slice_index_order_fail17h8c18576576dbf4e3E>:
    8002390a:	7159                	addi	sp,sp,-112
    8002390c:	f486                	sd	ra,104(sp)
    8002390e:	e42a                	sd	a0,8(sp)
    80023910:	e82e                	sd	a1,16(sp)
    80023912:	0028                	addi	a0,sp,8
    80023914:	e4aa                	sd	a0,72(sp)

0000000080023916 <.LBB217_1>:
    80023916:	00001517          	auipc	a0,0x1
    8002391a:	f4250513          	addi	a0,a0,-190 # 80024858 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h9c6c4af1578f7c29E>
    8002391e:	e8aa                	sd	a0,80(sp)
    80023920:	080c                	addi	a1,sp,16
    80023922:	ecae                	sd	a1,88(sp)
    80023924:	f0aa                	sd	a0,96(sp)

0000000080023926 <.LBB217_2>:
    80023926:	00009517          	auipc	a0,0x9
    8002392a:	4a250513          	addi	a0,a0,1186 # 8002cdc8 <.Lanon.f077182aff5f58a5660f14b1290425e3.257>
    8002392e:	ec2a                	sd	a0,24(sp)
    80023930:	4509                	li	a0,2
    80023932:	f02a                	sd	a0,32(sp)
    80023934:	f402                	sd	zero,40(sp)
    80023936:	00ac                	addi	a1,sp,72
    80023938:	fc2e                	sd	a1,56(sp)
    8002393a:	e0aa                	sd	a0,64(sp)
    8002393c:	0828                	addi	a0,sp,24
    8002393e:	85b2                	mv	a1,a2
    80023940:	fffff097          	auipc	ra,0xfffff
    80023944:	828080e7          	jalr	-2008(ra) # 80022168 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
	...

Disassembly of section .text._ZN4core3str8converts9from_utf817h3f0a2d8686bfd9bbE:

000000008002394a <_ZN4core3str8converts9from_utf817h3f0a2d8686bfd9bbE>:
    8002394a:	711d                	addi	sp,sp,-96
    8002394c:	eca2                	sd	s0,88(sp)
    8002394e:	e8a6                	sd	s1,80(sp)
    80023950:	e4ca                	sd	s2,72(sp)
    80023952:	e0ce                	sd	s3,64(sp)
    80023954:	fc52                	sd	s4,56(sp)
    80023956:	f856                	sd	s5,48(sp)
    80023958:	f45a                	sd	s6,40(sp)
    8002395a:	f05e                	sd	s7,32(sp)
    8002395c:	ec62                	sd	s8,24(sp)
    8002395e:	e866                	sd	s9,16(sp)
    80023960:	e46a                	sd	s10,8(sp)
    80023962:	ff160693          	addi	a3,a2,-15
    80023966:	00d63733          	sltu	a4,a2,a3
    8002396a:	4c81                	li	s9,0
    8002396c:	e311                	bnez	a4,80023970 <_ZN4core3str8converts9from_utf817h3f0a2d8686bfd9bbE+0x26>
    8002396e:	8cb6                	mv	s9,a3
    80023970:	20060663          	beqz	a2,80023b7c <.LBB222_49+0x1f4>
    80023974:	4681                	li	a3,0
    80023976:	00758713          	addi	a4,a1,7
    8002397a:	9b61                	andi	a4,a4,-8
    8002397c:	40b70833          	sub	a6,a4,a1
    80023980:	00180713          	addi	a4,a6,1 # 1c0001 <.Lline_table_start0+0x18969a>
    80023984:	00173c13          	seqz	s8,a4

0000000080023988 <.LBB222_49>:
    80023988:	00009897          	auipc	a7,0x9
    8002398c:	46088893          	addi	a7,a7,1120 # 8002cde8 <_ZN4core3str11validations15UTF8_CHAR_WIDTH17h26c7bb6d1905d302E>
    80023990:	4291                	li	t0,4
    80023992:	0f400313          	li	t1,244
    80023996:	08000393          	li	t2,128
    8002399a:	0f000e13          	li	t3,240
    8002399e:	03000e93          	li	t4,48
    800239a2:	4f09                	li	t5,2
    800239a4:	5ffd                	li	t6,-1
    800239a6:	0bf00913          	li	s2,191
    800239aa:	4b8d                	li	s7,3
    800239ac:	0ed00b13          	li	s6,237
    800239b0:	0e000993          	li	s3,224
    800239b4:	0a000a13          	li	s4,160
    800239b8:	4aad                	li	s5,11
    800239ba:	7741                	lui	a4,0xffff0
    800239bc:	1017071b          	addiw	a4,a4,257
    800239c0:	0742                	slli	a4,a4,0x10
    800239c2:	10170713          	addi	a4,a4,257 # ffffffffffff0101 <end+0xffffffff7ff8bb71>
    800239c6:	0742                	slli	a4,a4,0x10
    800239c8:	10170713          	addi	a4,a4,257
    800239cc:	073e                	slli	a4,a4,0xf
    800239ce:	08070413          	addi	s0,a4,128
    800239d2:	a029                	j	800239dc <.LBB222_49+0x54>
    800239d4:	00170693          	addi	a3,a4,1
    800239d8:	1ac6f263          	bgeu	a3,a2,80023b7c <.LBB222_49+0x1f4>
    800239dc:	00d58733          	add	a4,a1,a3
    800239e0:	00074703          	lbu	a4,0(a4)
    800239e4:	03871793          	slli	a5,a4,0x38
    800239e8:	4387d493          	srai	s1,a5,0x38
    800239ec:	0004cc63          	bltz	s1,80023a04 <.LBB222_49+0x7c>
    800239f0:	000c1663          	bnez	s8,800239fc <.LBB222_49+0x74>
    800239f4:	40d80733          	sub	a4,a6,a3
    800239f8:	8b1d                	andi	a4,a4,7
    800239fa:	cf05                	beqz	a4,80023a32 <.LBB222_49+0xaa>
    800239fc:	0685                	addi	a3,a3,1
    800239fe:	fcc6efe3          	bltu	a3,a2,800239dc <.LBB222_49+0x54>
    80023a02:	aaad                	j	80023b7c <.LBB222_49+0x1f4>
    80023a04:	011707b3          	add	a5,a4,a7
    80023a08:	0007c783          	lbu	a5,0(a5)
    80023a0c:	04578b63          	beq	a5,t0,80023a62 <.LBB222_49+0xda>
    80023a10:	07778b63          	beq	a5,s7,80023a86 <.LBB222_49+0xfe>
    80023a14:	17e79b63          	bne	a5,t5,80023b8a <.LBB222_49+0x202>
    80023a18:	00168713          	addi	a4,a3,1
    80023a1c:	16c77463          	bgeu	a4,a2,80023b84 <.LBB222_49+0x1fc>
    80023a20:	00e587b3          	add	a5,a1,a4
    80023a24:	0007c783          	lbu	a5,0(a5)
    80023a28:	0c07f793          	andi	a5,a5,192
    80023a2c:	fa7784e3          	beq	a5,t2,800239d4 <.LBB222_49+0x4c>
    80023a30:	aaa9                	j	80023b8a <.LBB222_49+0x202>
    80023a32:	0196fc63          	bgeu	a3,s9,80023a4a <.LBB222_49+0xc2>
    80023a36:	00d58733          	add	a4,a1,a3
    80023a3a:	631c                	ld	a5,0(a4)
    80023a3c:	6718                	ld	a4,8(a4)
    80023a3e:	8f5d                	or	a4,a4,a5
    80023a40:	8f61                	and	a4,a4,s0
    80023a42:	e701                	bnez	a4,80023a4a <.LBB222_49+0xc2>
    80023a44:	06c1                	addi	a3,a3,16
    80023a46:	ff96e8e3          	bltu	a3,s9,80023a36 <.LBB222_49+0xae>
    80023a4a:	fac6fae3          	bgeu	a3,a2,800239fe <.LBB222_49+0x76>
    80023a4e:	00d58733          	add	a4,a1,a3
    80023a52:	00070703          	lb	a4,0(a4)
    80023a56:	fa0744e3          	bltz	a4,800239fe <.LBB222_49+0x76>
    80023a5a:	0685                	addi	a3,a3,1
    80023a5c:	fed619e3          	bne	a2,a3,80023a4e <.LBB222_49+0xc6>
    80023a60:	aa31                	j	80023b7c <.LBB222_49+0x1f4>
    80023a62:	00168793          	addi	a5,a3,1
    80023a66:	10c7ff63          	bgeu	a5,a2,80023b84 <.LBB222_49+0x1fc>
    80023a6a:	97ae                	add	a5,a5,a1
    80023a6c:	0007c783          	lbu	a5,0(a5)
    80023a70:	02670b63          	beq	a4,t1,80023aa6 <.LBB222_49+0x11e>
    80023a74:	05c71363          	bne	a4,t3,80023aba <.LBB222_49+0x132>
    80023a78:	07078713          	addi	a4,a5,112
    80023a7c:	0ff77713          	andi	a4,a4,255
    80023a80:	05d76d63          	bltu	a4,t4,80023ada <.LBB222_49+0x152>
    80023a84:	a219                	j	80023b8a <.LBB222_49+0x202>
    80023a86:	00168793          	addi	a5,a3,1
    80023a8a:	0ec7fd63          	bgeu	a5,a2,80023b84 <.LBB222_49+0x1fc>
    80023a8e:	97ae                	add	a5,a5,a1
    80023a90:	0007c783          	lbu	a5,0(a5)
    80023a94:	07670c63          	beq	a4,s6,80023b0c <.LBB222_49+0x184>
    80023a98:	09371463          	bne	a4,s3,80023b20 <.LBB222_49+0x198>
    80023a9c:	0e07f713          	andi	a4,a5,224
    80023aa0:	0b470f63          	beq	a4,s4,80023b5e <.LBB222_49+0x1d6>
    80023aa4:	a0dd                	j	80023b8a <.LBB222_49+0x202>
    80023aa6:	03879713          	slli	a4,a5,0x38
    80023aaa:	9761                	srai	a4,a4,0x38
    80023aac:	00072713          	slti	a4,a4,0
    80023ab0:	0907b793          	sltiu	a5,a5,144
    80023ab4:	8f7d                	and	a4,a4,a5
    80023ab6:	e315                	bnez	a4,80023ada <.LBB222_49+0x152>
    80023ab8:	a8c9                	j	80023b8a <.LBB222_49+0x202>
    80023aba:	00f48713          	addi	a4,s1,15
    80023abe:	0ff77713          	andi	a4,a4,255
    80023ac2:	00ef3733          	sltu	a4,t5,a4
    80023ac6:	03879493          	slli	s1,a5,0x38
    80023aca:	94e1                	srai	s1,s1,0x38
    80023acc:	009fa4b3          	slt	s1,t6,s1
    80023ad0:	8f45                	or	a4,a4,s1
    80023ad2:	00f937b3          	sltu	a5,s2,a5
    80023ad6:	8f5d                	or	a4,a4,a5
    80023ad8:	eb4d                	bnez	a4,80023b8a <.LBB222_49+0x202>
    80023ada:	00268713          	addi	a4,a3,2
    80023ade:	0ac77363          	bgeu	a4,a2,80023b84 <.LBB222_49+0x1fc>
    80023ae2:	972e                	add	a4,a4,a1
    80023ae4:	00074703          	lbu	a4,0(a4)
    80023ae8:	0c077713          	andi	a4,a4,192
    80023aec:	4485                	li	s1,1
    80023aee:	0c771363          	bne	a4,t2,80023bb4 <.LBB222_49+0x22c>
    80023af2:	00368713          	addi	a4,a3,3
    80023af6:	08c77763          	bgeu	a4,a2,80023b84 <.LBB222_49+0x1fc>
    80023afa:	00e587b3          	add	a5,a1,a4
    80023afe:	0007c783          	lbu	a5,0(a5)
    80023b02:	0c07f793          	andi	a5,a5,192
    80023b06:	ec7787e3          	beq	a5,t2,800239d4 <.LBB222_49+0x4c>
    80023b0a:	a07d                	j	80023bb8 <.LBB222_49+0x230>
    80023b0c:	03879713          	slli	a4,a5,0x38
    80023b10:	9761                	srai	a4,a4,0x38
    80023b12:	00072713          	slti	a4,a4,0
    80023b16:	0a07b793          	sltiu	a5,a5,160
    80023b1a:	8f7d                	and	a4,a4,a5
    80023b1c:	e329                	bnez	a4,80023b5e <.LBB222_49+0x1d6>
    80023b1e:	a0b5                	j	80023b8a <.LBB222_49+0x202>
    80023b20:	01f48713          	addi	a4,s1,31
    80023b24:	0ff77713          	andi	a4,a4,255
    80023b28:	03879d13          	slli	s10,a5,0x38
    80023b2c:	00eaeb63          	bltu	s5,a4,80023b42 <.LBB222_49+0x1ba>
    80023b30:	438d5713          	srai	a4,s10,0x38
    80023b34:	00072713          	slti	a4,a4,0
    80023b38:	0c07b793          	sltiu	a5,a5,192
    80023b3c:	8f7d                	and	a4,a4,a5
    80023b3e:	e305                	bnez	a4,80023b5e <.LBB222_49+0x1d6>
    80023b40:	a0a9                	j	80023b8a <.LBB222_49+0x202>
    80023b42:	ffe4f713          	andi	a4,s1,-2
    80023b46:	0749                	addi	a4,a4,18
    80023b48:	00e03733          	snez	a4,a4
    80023b4c:	438d5493          	srai	s1,s10,0x38
    80023b50:	009fa4b3          	slt	s1,t6,s1
    80023b54:	8f45                	or	a4,a4,s1
    80023b56:	00f937b3          	sltu	a5,s2,a5
    80023b5a:	8f5d                	or	a4,a4,a5
    80023b5c:	e71d                	bnez	a4,80023b8a <.LBB222_49+0x202>
    80023b5e:	00268713          	addi	a4,a3,2
    80023b62:	02c77163          	bgeu	a4,a2,80023b84 <.LBB222_49+0x1fc>
    80023b66:	00e587b3          	add	a5,a1,a4
    80023b6a:	0007c783          	lbu	a5,0(a5)
    80023b6e:	0c07f793          	andi	a5,a5,192
    80023b72:	e67781e3          	beq	a5,t2,800239d4 <.LBB222_49+0x4c>
    80023b76:	4485                	li	s1,1
    80023b78:	4589                	li	a1,2
    80023b7a:	a811                	j	80023b8e <.LBB222_49+0x206>
    80023b7c:	4681                	li	a3,0
    80023b7e:	e50c                	sd	a1,8(a0)
    80023b80:	e910                	sd	a2,16(a0)
    80023b82:	a819                	j	80023b98 <.LBB222_49+0x210>
    80023b84:	4581                	li	a1,0
    80023b86:	4481                	li	s1,0
    80023b88:	a019                	j	80023b8e <.LBB222_49+0x206>
    80023b8a:	4585                	li	a1,1
    80023b8c:	4485                	li	s1,1
    80023b8e:	05a2                	slli	a1,a1,0x8
    80023b90:	8dc5                	or	a1,a1,s1
    80023b92:	e514                	sd	a3,8(a0)
    80023b94:	e90c                	sd	a1,16(a0)
    80023b96:	4685                	li	a3,1
    80023b98:	e114                	sd	a3,0(a0)
    80023b9a:	6d22                	ld	s10,8(sp)
    80023b9c:	6cc2                	ld	s9,16(sp)
    80023b9e:	6c62                	ld	s8,24(sp)
    80023ba0:	7b82                	ld	s7,32(sp)
    80023ba2:	7b22                	ld	s6,40(sp)
    80023ba4:	7ac2                	ld	s5,48(sp)
    80023ba6:	7a62                	ld	s4,56(sp)
    80023ba8:	6986                	ld	s3,64(sp)
    80023baa:	6926                	ld	s2,72(sp)
    80023bac:	64c6                	ld	s1,80(sp)
    80023bae:	6466                	ld	s0,88(sp)
    80023bb0:	6125                	addi	sp,sp,96
    80023bb2:	8082                	ret
    80023bb4:	4589                	li	a1,2
    80023bb6:	bfe1                	j	80023b8e <.LBB222_49+0x206>
    80023bb8:	458d                	li	a1,3
    80023bba:	bfd1                	j	80023b8e <.LBB222_49+0x206>

Disassembly of section .text.unlikely._ZN4core3str16slice_error_fail17h98613a818fa8baa4E:

0000000080023bbc <_ZN4core3str16slice_error_fail17h98613a818fa8baa4E>:
    80023bbc:	7115                	addi	sp,sp,-224
    80023bbe:	ed86                	sd	ra,216(sp)
    80023bc0:	e432                	sd	a2,8(sp)
    80023bc2:	10100793          	li	a5,257
    80023bc6:	e836                	sd	a3,16(sp)
    80023bc8:	00f5fb63          	bgeu	a1,a5,80023bde <.LBB239_47+0x10>
    80023bcc:	4801                	li	a6,0

0000000080023bce <.LBB239_47>:
    80023bce:	00009797          	auipc	a5,0x9
    80023bd2:	d0a78793          	addi	a5,a5,-758 # 8002c8d8 <.Lanon.f077182aff5f58a5660f14b1290425e3.133>
    80023bd6:	f43e                	sd	a5,40(sp)
    80023bd8:	ec2a                	sd	a0,24(sp)
    80023bda:	f02e                	sd	a1,32(sp)
    80023bdc:	a889                	j	80023c2e <.LBB239_48+0xc>
    80023bde:	0ff00793          	li	a5,255
    80023be2:	40b788b3          	sub	a7,a5,a1
    80023be6:	10000313          	li	t1,256
    80023bea:	fbf00813          	li	a6,-65
    80023bee:	a839                	j	80023c0c <.LBB239_47+0x3e>
    80023bf0:	fff30293          	addi	t0,t1,-1
    80023bf4:	006887b3          	add	a5,a7,t1
    80023bf8:	00503333          	snez	t1,t0
    80023bfc:	f0078793          	addi	a5,a5,-256
    80023c00:	00f037b3          	snez	a5,a5
    80023c04:	00f377b3          	and	a5,t1,a5
    80023c08:	8316                	mv	t1,t0
    80023c0a:	cb91                	beqz	a5,80023c1e <.LBB239_47+0x50>
    80023c0c:	feb372e3          	bgeu	t1,a1,80023bf0 <.LBB239_47+0x22>
    80023c10:	006507b3          	add	a5,a0,t1
    80023c14:	00078783          	lb	a5,0(a5)
    80023c18:	fcf85ce3          	bge	a6,a5,80023bf0 <.LBB239_47+0x22>
    80023c1c:	829a                	mv	t0,t1
    80023c1e:	ec2a                	sd	a0,24(sp)
    80023c20:	f016                	sd	t0,32(sp)

0000000080023c22 <.LBB239_48>:
    80023c22:	00009797          	auipc	a5,0x9
    80023c26:	2c678793          	addi	a5,a5,710 # 8002cee8 <.Lanon.f077182aff5f58a5660f14b1290425e3.315>
    80023c2a:	f43e                	sd	a5,40(sp)
    80023c2c:	4815                	li	a6,5
    80023c2e:	00c5b8b3          	sltu	a7,a1,a2
    80023c32:	0018c293          	xori	t0,a7,1
    80023c36:	00d5b7b3          	sltu	a5,a1,a3
    80023c3a:	0017c793          	xori	a5,a5,1
    80023c3e:	00f2f7b3          	and	a5,t0,a5
    80023c42:	f842                	sd	a6,48(sp)
    80023c44:	ef8d                	bnez	a5,80023c7e <.LBB239_51+0xe>
    80023c46:	00089363          	bnez	a7,80023c4c <.LBB239_48+0x2a>
    80023c4a:	8636                	mv	a2,a3
    80023c4c:	e4b2                	sd	a2,72(sp)
    80023c4e:	00a8                	addi	a0,sp,72
    80023c50:	e52a                	sd	a0,136(sp)

0000000080023c52 <.LBB239_49>:
    80023c52:	00001517          	auipc	a0,0x1
    80023c56:	c0650513          	addi	a0,a0,-1018 # 80024858 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h9c6c4af1578f7c29E>
    80023c5a:	e92a                	sd	a0,144(sp)
    80023c5c:	0828                	addi	a0,sp,24
    80023c5e:	ed2a                	sd	a0,152(sp)

0000000080023c60 <.LBB239_50>:
    80023c60:	00001517          	auipc	a0,0x1
    80023c64:	05050513          	addi	a0,a0,80 # 80024cb0 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h65c6410ca8a4d3e4E>
    80023c68:	f12a                	sd	a0,160(sp)
    80023c6a:	102c                	addi	a1,sp,40
    80023c6c:	f52e                	sd	a1,168(sp)
    80023c6e:	f92a                	sd	a0,176(sp)

0000000080023c70 <.LBB239_51>:
    80023c70:	00009517          	auipc	a0,0x9
    80023c74:	2a050513          	addi	a0,a0,672 # 8002cf10 <.Lanon.f077182aff5f58a5660f14b1290425e3.318>
    80023c78:	ecaa                	sd	a0,88(sp)
    80023c7a:	450d                	li	a0,3
    80023c7c:	a2cd                	j	80023e5e <.LBB239_60+0xc>
    80023c7e:	02c6fd63          	bgeu	a3,a2,80023cb8 <.LBB239_54+0xe>
    80023c82:	0028                	addi	a0,sp,8
    80023c84:	e52a                	sd	a0,136(sp)

0000000080023c86 <.LBB239_52>:
    80023c86:	00001517          	auipc	a0,0x1
    80023c8a:	bd250513          	addi	a0,a0,-1070 # 80024858 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h9c6c4af1578f7c29E>
    80023c8e:	e92a                	sd	a0,144(sp)
    80023c90:	080c                	addi	a1,sp,16
    80023c92:	ed2e                	sd	a1,152(sp)
    80023c94:	f12a                	sd	a0,160(sp)
    80023c96:	0828                	addi	a0,sp,24
    80023c98:	f52a                	sd	a0,168(sp)

0000000080023c9a <.LBB239_53>:
    80023c9a:	00001517          	auipc	a0,0x1
    80023c9e:	01650513          	addi	a0,a0,22 # 80024cb0 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h65c6410ca8a4d3e4E>
    80023ca2:	f92a                	sd	a0,176(sp)
    80023ca4:	102c                	addi	a1,sp,40
    80023ca6:	fd2e                	sd	a1,184(sp)
    80023ca8:	e1aa                	sd	a0,192(sp)

0000000080023caa <.LBB239_54>:
    80023caa:	00009517          	auipc	a0,0x9
    80023cae:	2a650513          	addi	a0,a0,678 # 8002cf50 <.Lanon.f077182aff5f58a5660f14b1290425e3.322>
    80023cb2:	ecaa                	sd	a0,88(sp)
    80023cb4:	4511                	li	a0,4
    80023cb6:	a265                	j	80023e5e <.LBB239_60+0xc>
    80023cb8:	00163813          	seqz	a6,a2
    80023cbc:	00c5c7b3          	xor	a5,a1,a2
    80023cc0:	0017b793          	seqz	a5,a5
    80023cc4:	00f867b3          	or	a5,a6,a5
    80023cc8:	c399                	beqz	a5,80023cce <.LBB239_54+0x24>
    80023cca:	8636                	mv	a2,a3
    80023ccc:	a819                	j	80023ce2 <.LBB239_54+0x38>
    80023cce:	00b67a63          	bgeu	a2,a1,80023ce2 <.LBB239_54+0x38>
    80023cd2:	00c507b3          	add	a5,a0,a2
    80023cd6:	00078803          	lb	a6,0(a5)
    80023cda:	fc000793          	li	a5,-64
    80023cde:	fef856e3          	bge	a6,a5,80023cca <.LBB239_54+0x20>
    80023ce2:	00163693          	seqz	a3,a2
    80023ce6:	00b647b3          	xor	a5,a2,a1
    80023cea:	0017b793          	seqz	a5,a5
    80023cee:	8edd                	or	a3,a3,a5
    80023cf0:	fc32                	sd	a2,56(sp)
    80023cf2:	c28d                	beqz	a3,80023d14 <.LBB239_55+0x18>
    80023cf4:	87b2                	mv	a5,a2
    80023cf6:	863e                	mv	a2,a5
    80023cf8:	04b61763          	bne	a2,a1,80023d46 <.LBB239_55+0x4a>

0000000080023cfc <.LBB239_55>:
    80023cfc:	00009517          	auipc	a0,0x9
    80023d00:	bf450513          	addi	a0,a0,-1036 # 8002c8f0 <.Lanon.f077182aff5f58a5660f14b1290425e3.168>
    80023d04:	02b00593          	li	a1,43
    80023d08:	863a                	mv	a2,a4
    80023d0a:	ffffe097          	auipc	ra,0xffffe
    80023d0e:	3f2080e7          	jalr	1010(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
    80023d12:	0000                	unimp
    80023d14:	00158893          	addi	a7,a1,1
    80023d18:	fc000813          	li	a6,-64
    80023d1c:	a821                	j	80023d34 <.LBB239_55+0x38>
    80023d1e:	fff60793          	addi	a5,a2,-1
    80023d22:	0017b693          	seqz	a3,a5
    80023d26:	00c8c633          	xor	a2,a7,a2
    80023d2a:	00163613          	seqz	a2,a2
    80023d2e:	8ed1                	or	a3,a3,a2
    80023d30:	863e                	mv	a2,a5
    80023d32:	f2f1                	bnez	a3,80023cf6 <.LBB239_54+0x4c>
    80023d34:	feb675e3          	bgeu	a2,a1,80023d1e <.LBB239_55+0x22>
    80023d38:	00c507b3          	add	a5,a0,a2
    80023d3c:	00078783          	lb	a5,0(a5)
    80023d40:	fd07cfe3          	blt	a5,a6,80023d1e <.LBB239_55+0x22>
    80023d44:	bf55                	j	80023cf8 <.LBB239_54+0x4e>
    80023d46:	00c507b3          	add	a5,a0,a2
    80023d4a:	00078683          	lb	a3,0(a5)
    80023d4e:	0ff6f293          	andi	t0,a3,255
    80023d52:	0006c563          	bltz	a3,80023d5c <.LBB239_55+0x60>
    80023d56:	c296                	sw	t0,68(sp)
    80023d58:	4585                	li	a1,1
    80023d5a:	a84d                	j	80023e0c <.LBB239_55+0x110>
    80023d5c:	952e                	add	a0,a0,a1
    80023d5e:	00178593          	addi	a1,a5,1
    80023d62:	00a59e63          	bne	a1,a0,80023d7e <.LBB239_55+0x82>
    80023d66:	4781                	li	a5,0
    80023d68:	85aa                	mv	a1,a0
    80023d6a:	0e000693          	li	a3,224
    80023d6e:	01f2f813          	andi	a6,t0,31
    80023d72:	02d2f263          	bgeu	t0,a3,80023d96 <.LBB239_55+0x9a>
    80023d76:	00681513          	slli	a0,a6,0x6
    80023d7a:	8d5d                	or	a0,a0,a5
    80023d7c:	a88d                	j	80023dee <.LBB239_55+0xf2>
    80023d7e:	0017c683          	lbu	a3,1(a5)
    80023d82:	00278593          	addi	a1,a5,2
    80023d86:	03f6f793          	andi	a5,a3,63
    80023d8a:	0e000693          	li	a3,224
    80023d8e:	01f2f813          	andi	a6,t0,31
    80023d92:	fed2e2e3          	bltu	t0,a3,80023d76 <.LBB239_55+0x7a>
    80023d96:	00a59563          	bne	a1,a0,80023da0 <.LBB239_55+0xa4>
    80023d9a:	4581                	li	a1,0
    80023d9c:	88aa                	mv	a7,a0
    80023d9e:	a039                	j	80023dac <.LBB239_55+0xb0>
    80023da0:	0005c683          	lbu	a3,0(a1)
    80023da4:	00158893          	addi	a7,a1,1
    80023da8:	03f6f593          	andi	a1,a3,63
    80023dac:	00679693          	slli	a3,a5,0x6
    80023db0:	0f000313          	li	t1,240
    80023db4:	00b6e7b3          	or	a5,a3,a1
    80023db8:	0062e663          	bltu	t0,t1,80023dc4 <.LBB239_55+0xc8>
    80023dbc:	00a89863          	bne	a7,a0,80023dcc <.LBB239_55+0xd0>
    80023dc0:	4501                	li	a0,0
    80023dc2:	a809                	j	80023dd4 <.LBB239_55+0xd8>
    80023dc4:	00c81513          	slli	a0,a6,0xc
    80023dc8:	8d5d                	or	a0,a0,a5
    80023dca:	a015                	j	80023dee <.LBB239_55+0xf2>
    80023dcc:	0008c503          	lbu	a0,0(a7)
    80023dd0:	03f57513          	andi	a0,a0,63
    80023dd4:	01281593          	slli	a1,a6,0x12
    80023dd8:	001c06b7          	lui	a3,0x1c0
    80023ddc:	8df5                	and	a1,a1,a3
    80023dde:	00679693          	slli	a3,a5,0x6
    80023de2:	8dd5                	or	a1,a1,a3
    80023de4:	8d4d                	or	a0,a0,a1
    80023de6:	001105b7          	lui	a1,0x110
    80023dea:	f0b509e3          	beq	a0,a1,80023cfc <.LBB239_55>
    80023dee:	c2aa                	sw	a0,68(sp)
    80023df0:	08000693          	li	a3,128
    80023df4:	4585                	li	a1,1
    80023df6:	00d56b63          	bltu	a0,a3,80023e0c <.LBB239_55+0x110>
    80023dfa:	00b55693          	srli	a3,a0,0xb
    80023dfe:	4589                	li	a1,2
    80023e00:	c691                	beqz	a3,80023e0c <.LBB239_55+0x110>
    80023e02:	8141                	srli	a0,a0,0x10
    80023e04:	00153513          	seqz	a0,a0
    80023e08:	4591                	li	a1,4
    80023e0a:	8d89                	sub	a1,a1,a0
    80023e0c:	00c58533          	add	a0,a1,a2
    80023e10:	e4b2                	sd	a2,72(sp)
    80023e12:	e8aa                	sd	a0,80(sp)
    80023e14:	1828                	addi	a0,sp,56
    80023e16:	e52a                	sd	a0,136(sp)

0000000080023e18 <.LBB239_56>:
    80023e18:	00001517          	auipc	a0,0x1
    80023e1c:	a4050513          	addi	a0,a0,-1472 # 80024858 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h9c6c4af1578f7c29E>
    80023e20:	e92a                	sd	a0,144(sp)
    80023e22:	00c8                	addi	a0,sp,68
    80023e24:	ed2a                	sd	a0,152(sp)

0000000080023e26 <.LBB239_57>:
    80023e26:	fffff517          	auipc	a0,0xfffff
    80023e2a:	6f050513          	addi	a0,a0,1776 # 80023516 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17hdf5d4d6f5f47000aE>
    80023e2e:	f12a                	sd	a0,160(sp)
    80023e30:	00a8                	addi	a0,sp,72
    80023e32:	f52a                	sd	a0,168(sp)

0000000080023e34 <.LBB239_58>:
    80023e34:	ffffe517          	auipc	a0,0xffffe
    80023e38:	10c50513          	addi	a0,a0,268 # 80021f40 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17hafa23fe214721e38E>
    80023e3c:	f92a                	sd	a0,176(sp)
    80023e3e:	0828                	addi	a0,sp,24
    80023e40:	fd2a                	sd	a0,184(sp)

0000000080023e42 <.LBB239_59>:
    80023e42:	00001517          	auipc	a0,0x1
    80023e46:	e6e50513          	addi	a0,a0,-402 # 80024cb0 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h65c6410ca8a4d3e4E>
    80023e4a:	e1aa                	sd	a0,192(sp)
    80023e4c:	102c                	addi	a1,sp,40
    80023e4e:	e5ae                	sd	a1,200(sp)
    80023e50:	e9aa                	sd	a0,208(sp)

0000000080023e52 <.LBB239_60>:
    80023e52:	00009517          	auipc	a0,0x9
    80023e56:	16e50513          	addi	a0,a0,366 # 8002cfc0 <.Lanon.f077182aff5f58a5660f14b1290425e3.326>
    80023e5a:	ecaa                	sd	a0,88(sp)
    80023e5c:	4515                	li	a0,5
    80023e5e:	f0aa                	sd	a0,96(sp)
    80023e60:	f482                	sd	zero,104(sp)
    80023e62:	012c                	addi	a1,sp,136
    80023e64:	fcae                	sd	a1,120(sp)
    80023e66:	e12a                	sd	a0,128(sp)
    80023e68:	08a8                	addi	a0,sp,88
    80023e6a:	85ba                	mv	a1,a4
    80023e6c:	ffffe097          	auipc	ra,0xffffe
    80023e70:	2fc080e7          	jalr	764(ra) # 80022168 <_ZN4core9panicking9panic_fmt17h28c6d8bc15c6b6b3E>
	...

Disassembly of section .text._ZN4core7unicode9printable12is_printable17hd386595a5390c2aaE:

0000000080023e76 <_ZN4core7unicode9printable12is_printable17hd386595a5390c2aaE>:
    80023e76:	1141                	addi	sp,sp,-16
    80023e78:	e406                	sd	ra,8(sp)
    80023e7a:	0105559b          	srliw	a1,a0,0x10
    80023e7e:	e1d9                	bnez	a1,80023f04 <.LBB255_42+0x12>
    80023e80:	4581                	li	a1,0
    80023e82:	0085561b          	srliw	a2,a0,0x8

0000000080023e86 <.LBB255_40>:
    80023e86:	00009797          	auipc	a5,0x9
    80023e8a:	1e278793          	addi	a5,a5,482 # 8002d068 <.Lanon.f077182aff5f58a5660f14b1290425e3.349>
    80023e8e:	0ff67313          	andi	t1,a2,255
    80023e92:	12300813          	li	a6,291

0000000080023e96 <.LBB255_41>:
    80023e96:	00009897          	auipc	a7,0x9
    80023e9a:	22488893          	addi	a7,a7,548 # 8002d0ba <.Lanon.f077182aff5f58a5660f14b1290425e3.350>
    80023e9e:	05278293          	addi	t0,a5,82
    80023ea2:	0ff57713          	andi	a4,a0,255
    80023ea6:	a811                	j	80023eba <.LBB255_41+0x24>
    80023ea8:	00d335b3          	sltu	a1,t1,a3
    80023eac:	0057c633          	xor	a2,a5,t0
    80023eb0:	00163613          	seqz	a2,a2
    80023eb4:	8e4d                	or	a2,a2,a1
    80023eb6:	859e                	mv	a1,t2
    80023eb8:	ea15                	bnez	a2,80023eec <.LBB255_41+0x56>
    80023eba:	0007c683          	lbu	a3,0(a5)
    80023ebe:	0017c603          	lbu	a2,1(a5)
    80023ec2:	0789                	addi	a5,a5,2
    80023ec4:	00c583b3          	add	t2,a1,a2
    80023ec8:	fe6690e3          	bne	a3,t1,80023ea8 <.LBB255_41+0x12>
    80023ecc:	1eb3e463          	bltu	t2,a1,800240b4 <.LBB255_46>
    80023ed0:	1f03fd63          	bgeu	t2,a6,800240ca <.LBB255_47>
    80023ed4:	95c6                	add	a1,a1,a7
    80023ed6:	ca01                	beqz	a2,80023ee6 <.LBB255_41+0x50>
    80023ed8:	0005c683          	lbu	a3,0(a1) # 110000 <.Lline_table_start0+0xd9699>
    80023edc:	0585                	addi	a1,a1,1
    80023ede:	167d                	addi	a2,a2,-1
    80023ee0:	fee69be3          	bne	a3,a4,80023ed6 <.LBB255_41+0x40>
    80023ee4:	a06d                	j	80023f8e <.LBB255_45+0x12>
    80023ee6:	859e                	mv	a1,t2
    80023ee8:	fc5799e3          	bne	a5,t0,80023eba <.LBB255_41+0x24>
    80023eec:	65c1                	lui	a1,0x10
    80023eee:	35fd                	addiw	a1,a1,-1
    80023ef0:	8de9                	and	a1,a1,a0

0000000080023ef2 <.LBB255_42>:
    80023ef2:	00009717          	auipc	a4,0x9
    80023ef6:	2ea70713          	addi	a4,a4,746 # 8002d1dc <.Lanon.f077182aff5f58a5660f14b1290425e3.351>
    80023efa:	4505                	li	a0,1
    80023efc:	587d                	li	a6,-1
    80023efe:	13570693          	addi	a3,a4,309
    80023f02:	a06d                	j	80023fac <.LBB255_45+0x30>
    80023f04:	0115559b          	srliw	a1,a0,0x11
    80023f08:	e5e9                	bnez	a1,80023fd2 <.LBB255_45+0x56>
    80023f0a:	4581                	li	a1,0
    80023f0c:	0085561b          	srliw	a2,a0,0x8

0000000080023f10 <.LBB255_43>:
    80023f10:	00009797          	auipc	a5,0x9
    80023f14:	40178793          	addi	a5,a5,1025 # 8002d311 <.Lanon.f077182aff5f58a5660f14b1290425e3.352>
    80023f18:	0ff67313          	andi	t1,a2,255
    80023f1c:	0b000813          	li	a6,176

0000000080023f20 <.LBB255_44>:
    80023f20:	00009897          	auipc	a7,0x9
    80023f24:	43d88893          	addi	a7,a7,1085 # 8002d35d <.Lanon.f077182aff5f58a5660f14b1290425e3.353>
    80023f28:	04c78293          	addi	t0,a5,76
    80023f2c:	0ff57713          	andi	a4,a0,255
    80023f30:	a811                	j	80023f44 <.LBB255_44+0x24>
    80023f32:	00d335b3          	sltu	a1,t1,a3
    80023f36:	0057c633          	xor	a2,a5,t0
    80023f3a:	00163613          	seqz	a2,a2
    80023f3e:	8e4d                	or	a2,a2,a1
    80023f40:	859e                	mv	a1,t2
    80023f42:	ea15                	bnez	a2,80023f76 <.LBB255_44+0x56>
    80023f44:	0007c683          	lbu	a3,0(a5)
    80023f48:	0017c603          	lbu	a2,1(a5)
    80023f4c:	0789                	addi	a5,a5,2
    80023f4e:	00c583b3          	add	t2,a1,a2
    80023f52:	fe6690e3          	bne	a3,t1,80023f32 <.LBB255_44+0x12>
    80023f56:	14b3ef63          	bltu	t2,a1,800240b4 <.LBB255_46>
    80023f5a:	1703ff63          	bgeu	t2,a6,800240d8 <.LBB255_48>
    80023f5e:	95c6                	add	a1,a1,a7
    80023f60:	ca01                	beqz	a2,80023f70 <.LBB255_44+0x50>
    80023f62:	0005c683          	lbu	a3,0(a1) # 10000 <.Lline_table_start0+0x8ac>
    80023f66:	0585                	addi	a1,a1,1
    80023f68:	167d                	addi	a2,a2,-1
    80023f6a:	fee69be3          	bne	a3,a4,80023f60 <.LBB255_44+0x40>
    80023f6e:	a005                	j	80023f8e <.LBB255_45+0x12>
    80023f70:	859e                	mv	a1,t2
    80023f72:	fc5799e3          	bne	a5,t0,80023f44 <.LBB255_44+0x24>
    80023f76:	65c1                	lui	a1,0x10
    80023f78:	35fd                	addiw	a1,a1,-1
    80023f7a:	8de9                	and	a1,a1,a0

0000000080023f7c <.LBB255_45>:
    80023f7c:	00009717          	auipc	a4,0x9
    80023f80:	49070713          	addi	a4,a4,1168 # 8002d40c <.Lanon.f077182aff5f58a5660f14b1290425e3.354>
    80023f84:	4505                	li	a0,1
    80023f86:	587d                	li	a6,-1
    80023f88:	1a370693          	addi	a3,a4,419
    80023f8c:	a209                	j	8002408e <.LBB255_45+0x112>
    80023f8e:	4501                	li	a0,0
    80023f90:	8905                	andi	a0,a0,1
    80023f92:	60a2                	ld	ra,8(sp)
    80023f94:	0141                	addi	sp,sp,16
    80023f96:	8082                	ret
    80023f98:	0ff7f793          	andi	a5,a5,255
    80023f9c:	8732                	mv	a4,a2
    80023f9e:	9d9d                	subw	a1,a1,a5
    80023fa0:	fe05c8e3          	bltz	a1,80023f90 <.LBB255_45+0x14>
    80023fa4:	00154513          	xori	a0,a0,1
    80023fa8:	fed704e3          	beq	a4,a3,80023f90 <.LBB255_45+0x14>
    80023fac:	00070783          	lb	a5,0(a4)
    80023fb0:	00170613          	addi	a2,a4,1
    80023fb4:	fef842e3          	blt	a6,a5,80023f98 <.LBB255_45+0x1c>
    80023fb8:	12d60c63          	beq	a2,a3,800240f0 <.LBB255_49>
    80023fbc:	00174603          	lbu	a2,1(a4)
    80023fc0:	07f7f793          	andi	a5,a5,127
    80023fc4:	07a2                	slli	a5,a5,0x8
    80023fc6:	0709                	addi	a4,a4,2
    80023fc8:	8fd1                	or	a5,a5,a2
    80023fca:	9d9d                	subw	a1,a1,a5
    80023fcc:	fc05dce3          	bgez	a1,80023fa4 <.LBB255_45+0x28>
    80023fd0:	b7c1                	j	80023f90 <.LBB255_45+0x14>
    80023fd2:	fffd65b7          	lui	a1,0xfffd6
    80023fd6:	9225859b          	addiw	a1,a1,-1758
    80023fda:	9da9                	addw	a1,a1,a0
    80023fdc:	0005061b          	sext.w	a2,a0
    80023fe0:	02100693          	li	a3,33
    80023fe4:	00b6b5b3          	sltu	a1,a3,a1
    80023fe8:	fffd56b7          	lui	a3,0xfffd5
    80023fec:	8cb6869b          	addiw	a3,a3,-1845
    80023ff0:	9ea9                	addw	a3,a3,a0
    80023ff2:	4729                	li	a4,10
    80023ff4:	00d736b3          	sltu	a3,a4,a3
    80023ff8:	8df5                	and	a1,a1,a3
    80023ffa:	002006b7          	lui	a3,0x200
    80023ffe:	36f9                	addiw	a3,a3,-2
    80024000:	8ee9                	and	a3,a3,a0
    80024002:	0002c737          	lui	a4,0x2c
    80024006:	81e7071b          	addiw	a4,a4,-2018
    8002400a:	8eb9                	xor	a3,a3,a4
    8002400c:	00d036b3          	snez	a3,a3
    80024010:	8df5                	and	a1,a1,a3
    80024012:	fffd36b7          	lui	a3,0xfffd3
    80024016:	15e6869b          	addiw	a3,a3,350
    8002401a:	9ea9                	addw	a3,a3,a0
    8002401c:	4735                	li	a4,13
    8002401e:	00d736b3          	sltu	a3,a4,a3
    80024022:	8df5                	and	a1,a1,a3
    80024024:	fffd16b7          	lui	a3,0xfffd1
    80024028:	41f6869b          	addiw	a3,a3,1055
    8002402c:	9ea9                	addw	a3,a3,a0
    8002402e:	6705                	lui	a4,0x1
    80024030:	c1e7071b          	addiw	a4,a4,-994
    80024034:	00d736b3          	sltu	a3,a4,a3
    80024038:	8df5                	and	a1,a1,a3
    8002403a:	fffd06b7          	lui	a3,0xfffd0
    8002403e:	5e26869b          	addiw	a3,a3,1506
    80024042:	9ea9                	addw	a3,a3,a0
    80024044:	5e100713          	li	a4,1505
    80024048:	00d736b3          	sltu	a3,a4,a3
    8002404c:	8df5                	and	a1,a1,a3
    8002404e:	fffcf6b7          	lui	a3,0xfffcf
    80024052:	cb56869b          	addiw	a3,a3,-843
    80024056:	9d35                	addw	a0,a0,a3
    80024058:	000af6b7          	lui	a3,0xaf
    8002405c:	db46869b          	addiw	a3,a3,-588
    80024060:	00a6b533          	sltu	a0,a3,a0
    80024064:	8d6d                	and	a0,a0,a1
    80024066:	000e05b7          	lui	a1,0xe0
    8002406a:	1f05859b          	addiw	a1,a1,496
    8002406e:	00b635b3          	sltu	a1,a2,a1
    80024072:	8d6d                	and	a0,a0,a1
    80024074:	60a2                	ld	ra,8(sp)
    80024076:	0141                	addi	sp,sp,16
    80024078:	8082                	ret
    8002407a:	0ff7f793          	andi	a5,a5,255
    8002407e:	8732                	mv	a4,a2
    80024080:	9d9d                	subw	a1,a1,a5
    80024082:	f005c7e3          	bltz	a1,80023f90 <.LBB255_45+0x14>
    80024086:	00154513          	xori	a0,a0,1
    8002408a:	f0d703e3          	beq	a4,a3,80023f90 <.LBB255_45+0x14>
    8002408e:	00070783          	lb	a5,0(a4) # 1000 <.Lline_table_start0+0x30b>
    80024092:	00170613          	addi	a2,a4,1
    80024096:	fef842e3          	blt	a6,a5,8002407a <.LBB255_45+0xfe>
    8002409a:	04d60b63          	beq	a2,a3,800240f0 <.LBB255_49>
    8002409e:	00174603          	lbu	a2,1(a4)
    800240a2:	07f7f793          	andi	a5,a5,127
    800240a6:	07a2                	slli	a5,a5,0x8
    800240a8:	0709                	addi	a4,a4,2
    800240aa:	8fd1                	or	a5,a5,a2
    800240ac:	9d9d                	subw	a1,a1,a5
    800240ae:	fc05dce3          	bgez	a1,80024086 <.LBB255_45+0x10a>
    800240b2:	bdf9                	j	80023f90 <.LBB255_45+0x14>

00000000800240b4 <.LBB255_46>:
    800240b4:	00009617          	auipc	a2,0x9
    800240b8:	f8460613          	addi	a2,a2,-124 # 8002d038 <.Lanon.f077182aff5f58a5660f14b1290425e3.347>
    800240bc:	852e                	mv	a0,a1
    800240be:	859e                	mv	a1,t2
    800240c0:	00000097          	auipc	ra,0x0
    800240c4:	84a080e7          	jalr	-1974(ra) # 8002390a <_ZN4core5slice5index22slice_index_order_fail17h8c18576576dbf4e3E>
	...

00000000800240ca <.LBB255_47>:
    800240ca:	00009617          	auipc	a2,0x9
    800240ce:	f6e60613          	addi	a2,a2,-146 # 8002d038 <.Lanon.f077182aff5f58a5660f14b1290425e3.347>
    800240d2:	12200593          	li	a1,290
    800240d6:	a039                	j	800240e4 <.LBB255_48+0xc>

00000000800240d8 <.LBB255_48>:
    800240d8:	00009617          	auipc	a2,0x9
    800240dc:	f6060613          	addi	a2,a2,-160 # 8002d038 <.Lanon.f077182aff5f58a5660f14b1290425e3.347>
    800240e0:	0af00593          	li	a1,175
    800240e4:	851e                	mv	a0,t2
    800240e6:	fffff097          	auipc	ra,0xfffff
    800240ea:	7e4080e7          	jalr	2020(ra) # 800238ca <_ZN4core5slice5index24slice_end_index_len_fail17hbdcbb59c061b5014E>
	...

00000000800240f0 <.LBB255_49>:
    800240f0:	00009517          	auipc	a0,0x9
    800240f4:	80050513          	addi	a0,a0,-2048 # 8002c8f0 <.Lanon.f077182aff5f58a5660f14b1290425e3.168>

00000000800240f8 <.LBB255_50>:
    800240f8:	00009617          	auipc	a2,0x9
    800240fc:	f5860613          	addi	a2,a2,-168 # 8002d050 <.Lanon.f077182aff5f58a5660f14b1290425e3.348>
    80024100:	02b00593          	li	a1,43
    80024104:	ffffe097          	auipc	ra,0xffffe
    80024108:	ff8080e7          	jalr	-8(ra) # 800220fc <_ZN4core9panicking5panic17h153a4ce3c60ede6bE>
	...

Disassembly of section .text._ZN70_$LT$core..num..error..TryFromIntError$u20$as$u20$core..fmt..Debug$GT$3fmt17hc144b27efd65b050E:

000000008002410e <_ZN70_$LT$core..num..error..TryFromIntError$u20$as$u20$core..fmt..Debug$GT$3fmt17hc144b27efd65b050E>:
    8002410e:	7139                	addi	sp,sp,-64
    80024110:	fc06                	sd	ra,56(sp)
    80024112:	f822                	sd	s0,48(sp)
    80024114:	f426                	sd	s1,40(sp)
    80024116:	842e                	mv	s0,a1
    80024118:	758c                	ld	a1,40(a1)
    8002411a:	7014                	ld	a3,32(s0)
    8002411c:	6d98                	ld	a4,24(a1)
    8002411e:	84aa                	mv	s1,a0

0000000080024120 <.LBB324_8>:
    80024120:	00009597          	auipc	a1,0x9
    80024124:	52058593          	addi	a1,a1,1312 # 8002d640 <.Lanon.f077182aff5f58a5660f14b1290425e3.425>
    80024128:	463d                	li	a2,15
    8002412a:	8536                	mv	a0,a3
    8002412c:	9702                	jalr	a4
    8002412e:	e422                	sd	s0,8(sp)
    80024130:	00a10c23          	sb	a0,24(sp)
    80024134:	e802                	sd	zero,16(sp)
    80024136:	00010ca3          	sb	zero,25(sp)
    8002413a:	f026                	sd	s1,32(sp)

000000008002413c <.LBB324_9>:
    8002413c:	00009617          	auipc	a2,0x9
    80024140:	51460613          	addi	a2,a2,1300 # 8002d650 <.Lanon.f077182aff5f58a5660f14b1290425e3.426>
    80024144:	0028                	addi	a0,sp,8
    80024146:	100c                	addi	a1,sp,32
    80024148:	ffffe097          	auipc	ra,0xffffe
    8002414c:	46a080e7          	jalr	1130(ra) # 800225b2 <_ZN4core3fmt8builders10DebugTuple5field17h5bd338b8cb98b948E>
    80024150:	6542                	ld	a0,16(sp)
    80024152:	01814583          	lbu	a1,24(sp)
    80024156:	c921                	beqz	a0,800241a6 <.LBB324_11+0x10>
    80024158:	4405                	li	s0,1
    8002415a:	e5a9                	bnez	a1,800241a4 <.LBB324_11+0xe>
    8002415c:	01914583          	lbu	a1,25(sp)
    80024160:	157d                	addi	a0,a0,-1
    80024162:	00a03533          	snez	a0,a0
    80024166:	0015b593          	seqz	a1,a1
    8002416a:	8d4d                	or	a0,a0,a1
    8002416c:	e10d                	bnez	a0,8002418e <.LBB324_10+0x10>
    8002416e:	6522                	ld	a0,8(sp)
    80024170:	03054583          	lbu	a1,48(a0)
    80024174:	8991                	andi	a1,a1,4
    80024176:	ed81                	bnez	a1,8002418e <.LBB324_10+0x10>
    80024178:	750c                	ld	a1,40(a0)
    8002417a:	7108                	ld	a0,32(a0)
    8002417c:	6d94                	ld	a3,24(a1)

000000008002417e <.LBB324_10>:
    8002417e:	00009597          	auipc	a1,0x9
    80024182:	9da58593          	addi	a1,a1,-1574 # 8002cb58 <.Lanon.f077182aff5f58a5660f14b1290425e3.209>
    80024186:	4605                	li	a2,1
    80024188:	4405                	li	s0,1
    8002418a:	9682                	jalr	a3
    8002418c:	ed01                	bnez	a0,800241a4 <.LBB324_11+0xe>
    8002418e:	6522                	ld	a0,8(sp)
    80024190:	750c                	ld	a1,40(a0)
    80024192:	7108                	ld	a0,32(a0)
    80024194:	6d94                	ld	a3,24(a1)

0000000080024196 <.LBB324_11>:
    80024196:	00009597          	auipc	a1,0x9
    8002419a:	9c358593          	addi	a1,a1,-1597 # 8002cb59 <.Lanon.f077182aff5f58a5660f14b1290425e3.210>
    8002419e:	4605                	li	a2,1
    800241a0:	9682                	jalr	a3
    800241a2:	842a                	mv	s0,a0
    800241a4:	85a2                	mv	a1,s0
    800241a6:	00b03533          	snez	a0,a1
    800241aa:	74a2                	ld	s1,40(sp)
    800241ac:	7442                	ld	s0,48(sp)
    800241ae:	70e2                	ld	ra,56(sp)
    800241b0:	6121                	addi	sp,sp,64
    800241b2:	8082                	ret

Disassembly of section .text._ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hf71897f85e3edf35E:

00000000800241b4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hf71897f85e3edf35E>:
    800241b4:	7175                	addi	sp,sp,-144
    800241b6:	e506                	sd	ra,136(sp)
    800241b8:	882e                	mv	a6,a1
    800241ba:	4581                	li	a1,0
    800241bc:	00056603          	lwu	a2,0(a0)
    800241c0:	00810893          	addi	a7,sp,8
    800241c4:	100006b7          	lui	a3,0x10000
    800241c8:	36fd                	addiw	a3,a3,-1
    800241ca:	4729                	li	a4,10
    800241cc:	a819                	j	800241e2 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hf71897f85e3edf35E+0x2e>
    800241ce:	03778793          	addi	a5,a5,55
    800241d2:	00b88533          	add	a0,a7,a1
    800241d6:	8211                	srli	a2,a2,0x4
    800241d8:	8e75                	and	a2,a2,a3
    800241da:	06f50fa3          	sb	a5,127(a0)
    800241de:	15fd                	addi	a1,a1,-1
    800241e0:	ca01                	beqz	a2,800241f0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hf71897f85e3edf35E+0x3c>
    800241e2:	00f67793          	andi	a5,a2,15
    800241e6:	fee7f4e3          	bgeu	a5,a4,800241ce <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hf71897f85e3edf35E+0x1a>
    800241ea:	0307e793          	ori	a5,a5,48
    800241ee:	b7d5                	j	800241d2 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17hf71897f85e3edf35E+0x1e>
    800241f0:	08058513          	addi	a0,a1,128
    800241f4:	08100613          	li	a2,129
    800241f8:	02c57663          	bgeu	a0,a2,80024224 <.LBB466_9>
    800241fc:	40b007b3          	neg	a5,a1
    80024200:	0028                	addi	a0,sp,8
    80024202:	952e                	add	a0,a0,a1
    80024204:	08050713          	addi	a4,a0,128

0000000080024208 <.LBB466_8>:
    80024208:	00009617          	auipc	a2,0x9
    8002420c:	9b060613          	addi	a2,a2,-1616 # 8002cbb8 <.Lanon.f077182aff5f58a5660f14b1290425e3.226>
    80024210:	4585                	li	a1,1
    80024212:	4689                	li	a3,2
    80024214:	8542                	mv	a0,a6
    80024216:	fffff097          	auipc	ra,0xfffff
    8002421a:	8ca080e7          	jalr	-1846(ra) # 80022ae0 <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E>
    8002421e:	60aa                	ld	ra,136(sp)
    80024220:	6149                	addi	sp,sp,144
    80024222:	8082                	ret

0000000080024224 <.LBB466_9>:
    80024224:	00009617          	auipc	a2,0x9
    80024228:	97c60613          	addi	a2,a2,-1668 # 8002cba0 <.Lanon.f077182aff5f58a5660f14b1290425e3.225>
    8002422c:	08000593          	li	a1,128
    80024230:	fffff097          	auipc	ra,0xfffff
    80024234:	65a080e7          	jalr	1626(ra) # 8002388a <_ZN4core5slice5index26slice_start_index_len_fail17h9b5b4d8717655b24E>
	...

Disassembly of section .text._ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h760b07191d46b3f2E:

000000008002423a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h760b07191d46b3f2E>:
    8002423a:	7175                	addi	sp,sp,-144
    8002423c:	e506                	sd	ra,136(sp)
    8002423e:	6108                	ld	a0,0(a0)
    80024240:	882e                	mv	a6,a1
    80024242:	4581                	li	a1,0
    80024244:	0030                	addi	a2,sp,8
    80024246:	46a9                	li	a3,10
    80024248:	a811                	j	8002425c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h760b07191d46b3f2E+0x22>
    8002424a:	05770713          	addi	a4,a4,87
    8002424e:	00b607b3          	add	a5,a2,a1
    80024252:	8111                	srli	a0,a0,0x4
    80024254:	06e78fa3          	sb	a4,127(a5)
    80024258:	15fd                	addi	a1,a1,-1
    8002425a:	c901                	beqz	a0,8002426a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h760b07191d46b3f2E+0x30>
    8002425c:	00f57713          	andi	a4,a0,15
    80024260:	fed775e3          	bgeu	a4,a3,8002424a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h760b07191d46b3f2E+0x10>
    80024264:	03076713          	ori	a4,a4,48
    80024268:	b7dd                	j	8002424e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i64$GT$3fmt17h760b07191d46b3f2E+0x14>
    8002426a:	08058513          	addi	a0,a1,128
    8002426e:	08100613          	li	a2,129
    80024272:	02c57663          	bgeu	a0,a2,8002429e <.LBB469_9>
    80024276:	40b007b3          	neg	a5,a1
    8002427a:	0028                	addi	a0,sp,8
    8002427c:	952e                	add	a0,a0,a1
    8002427e:	08050713          	addi	a4,a0,128

0000000080024282 <.LBB469_8>:
    80024282:	00009617          	auipc	a2,0x9
    80024286:	93660613          	addi	a2,a2,-1738 # 8002cbb8 <.Lanon.f077182aff5f58a5660f14b1290425e3.226>
    8002428a:	4585                	li	a1,1
    8002428c:	4689                	li	a3,2
    8002428e:	8542                	mv	a0,a6
    80024290:	fffff097          	auipc	ra,0xfffff
    80024294:	850080e7          	jalr	-1968(ra) # 80022ae0 <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E>
    80024298:	60aa                	ld	ra,136(sp)
    8002429a:	6149                	addi	sp,sp,144
    8002429c:	8082                	ret

000000008002429e <.LBB469_9>:
    8002429e:	00009617          	auipc	a2,0x9
    800242a2:	90260613          	addi	a2,a2,-1790 # 8002cba0 <.Lanon.f077182aff5f58a5660f14b1290425e3.225>
    800242a6:	08000593          	li	a1,128
    800242aa:	fffff097          	auipc	ra,0xfffff
    800242ae:	5e0080e7          	jalr	1504(ra) # 8002388a <_ZN4core5slice5index26slice_start_index_len_fail17h9b5b4d8717655b24E>
	...

Disassembly of section .text._ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17h66734376af0f4671E:

00000000800242b4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17h66734376af0f4671E>:
    800242b4:	7175                	addi	sp,sp,-144
    800242b6:	e506                	sd	ra,136(sp)
    800242b8:	6108                	ld	a0,0(a0)
    800242ba:	882e                	mv	a6,a1
    800242bc:	4581                	li	a1,0
    800242be:	0030                	addi	a2,sp,8
    800242c0:	46a9                	li	a3,10
    800242c2:	a811                	j	800242d6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17h66734376af0f4671E+0x22>
    800242c4:	03770713          	addi	a4,a4,55
    800242c8:	00b607b3          	add	a5,a2,a1
    800242cc:	8111                	srli	a0,a0,0x4
    800242ce:	06e78fa3          	sb	a4,127(a5)
    800242d2:	15fd                	addi	a1,a1,-1
    800242d4:	c901                	beqz	a0,800242e4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17h66734376af0f4671E+0x30>
    800242d6:	00f57713          	andi	a4,a0,15
    800242da:	fed775e3          	bgeu	a4,a3,800242c4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17h66734376af0f4671E+0x10>
    800242de:	03076713          	ori	a4,a4,48
    800242e2:	b7dd                	j	800242c8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i64$GT$3fmt17h66734376af0f4671E+0x14>
    800242e4:	08058513          	addi	a0,a1,128
    800242e8:	08100613          	li	a2,129
    800242ec:	02c57663          	bgeu	a0,a2,80024318 <.LBB470_9>
    800242f0:	40b007b3          	neg	a5,a1
    800242f4:	0028                	addi	a0,sp,8
    800242f6:	952e                	add	a0,a0,a1
    800242f8:	08050713          	addi	a4,a0,128

00000000800242fc <.LBB470_8>:
    800242fc:	00009617          	auipc	a2,0x9
    80024300:	8bc60613          	addi	a2,a2,-1860 # 8002cbb8 <.Lanon.f077182aff5f58a5660f14b1290425e3.226>
    80024304:	4585                	li	a1,1
    80024306:	4689                	li	a3,2
    80024308:	8542                	mv	a0,a6
    8002430a:	ffffe097          	auipc	ra,0xffffe
    8002430e:	7d6080e7          	jalr	2006(ra) # 80022ae0 <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E>
    80024312:	60aa                	ld	ra,136(sp)
    80024314:	6149                	addi	sp,sp,144
    80024316:	8082                	ret

0000000080024318 <.LBB470_9>:
    80024318:	00009617          	auipc	a2,0x9
    8002431c:	88860613          	addi	a2,a2,-1912 # 8002cba0 <.Lanon.f077182aff5f58a5660f14b1290425e3.225>
    80024320:	08000593          	li	a1,128
    80024324:	fffff097          	auipc	ra,0xfffff
    80024328:	566080e7          	jalr	1382(ra) # 8002388a <_ZN4core5slice5index26slice_start_index_len_fail17h9b5b4d8717655b24E>
	...

Disassembly of section .text._ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h46dfaf96577b17ecE:

000000008002432e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h46dfaf96577b17ecE>:
    8002432e:	7175                	addi	sp,sp,-144
    80024330:	e506                	sd	ra,136(sp)
    80024332:	882e                	mv	a6,a1
    80024334:	0305e583          	lwu	a1,48(a1)
    80024338:	0105f613          	andi	a2,a1,16
    8002433c:	ea19                	bnez	a2,80024352 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h46dfaf96577b17ecE+0x24>
    8002433e:	0205f593          	andi	a1,a1,32
    80024342:	ed8d                	bnez	a1,8002437c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h46dfaf96577b17ecE+0x4e>
    80024344:	85c2                	mv	a1,a6
    80024346:	60aa                	ld	ra,136(sp)
    80024348:	6149                	addi	sp,sp,144
    8002434a:	00000317          	auipc	t1,0x0
    8002434e:	50e30067          	jr	1294(t1) # 80024858 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h9c6c4af1578f7c29E>
    80024352:	6108                	ld	a0,0(a0)
    80024354:	4581                	li	a1,0
    80024356:	0030                	addi	a2,sp,8
    80024358:	46a9                	li	a3,10
    8002435a:	a811                	j	8002436e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h46dfaf96577b17ecE+0x40>
    8002435c:	05770713          	addi	a4,a4,87
    80024360:	00b607b3          	add	a5,a2,a1
    80024364:	8111                	srli	a0,a0,0x4
    80024366:	06e78fa3          	sb	a4,127(a5)
    8002436a:	15fd                	addi	a1,a1,-1
    8002436c:	cd0d                	beqz	a0,800243a6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h46dfaf96577b17ecE+0x78>
    8002436e:	00f57713          	andi	a4,a0,15
    80024372:	fed775e3          	bgeu	a4,a3,8002435c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h46dfaf96577b17ecE+0x2e>
    80024376:	03076713          	ori	a4,a4,48
    8002437a:	b7dd                	j	80024360 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h46dfaf96577b17ecE+0x32>
    8002437c:	6108                	ld	a0,0(a0)
    8002437e:	4581                	li	a1,0
    80024380:	0030                	addi	a2,sp,8
    80024382:	46a9                	li	a3,10
    80024384:	a811                	j	80024398 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h46dfaf96577b17ecE+0x6a>
    80024386:	03770713          	addi	a4,a4,55
    8002438a:	00b607b3          	add	a5,a2,a1
    8002438e:	8111                	srli	a0,a0,0x4
    80024390:	06e78fa3          	sb	a4,127(a5)
    80024394:	15fd                	addi	a1,a1,-1
    80024396:	c901                	beqz	a0,800243a6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h46dfaf96577b17ecE+0x78>
    80024398:	00f57713          	andi	a4,a0,15
    8002439c:	fed775e3          	bgeu	a4,a3,80024386 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h46dfaf96577b17ecE+0x58>
    800243a0:	03076713          	ori	a4,a4,48
    800243a4:	b7dd                	j	8002438a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h46dfaf96577b17ecE+0x5c>
    800243a6:	08058513          	addi	a0,a1,128
    800243aa:	08100613          	li	a2,129
    800243ae:	02c57663          	bgeu	a0,a2,800243da <.LBB475_17>
    800243b2:	40b007b3          	neg	a5,a1
    800243b6:	0028                	addi	a0,sp,8
    800243b8:	952e                	add	a0,a0,a1
    800243ba:	08050713          	addi	a4,a0,128

00000000800243be <.LBB475_16>:
    800243be:	00008617          	auipc	a2,0x8
    800243c2:	7fa60613          	addi	a2,a2,2042 # 8002cbb8 <.Lanon.f077182aff5f58a5660f14b1290425e3.226>
    800243c6:	4585                	li	a1,1
    800243c8:	4689                	li	a3,2
    800243ca:	8542                	mv	a0,a6
    800243cc:	ffffe097          	auipc	ra,0xffffe
    800243d0:	714080e7          	jalr	1812(ra) # 80022ae0 <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E>
    800243d4:	60aa                	ld	ra,136(sp)
    800243d6:	6149                	addi	sp,sp,144
    800243d8:	8082                	ret

00000000800243da <.LBB475_17>:
    800243da:	00008617          	auipc	a2,0x8
    800243de:	7c660613          	addi	a2,a2,1990 # 8002cba0 <.Lanon.f077182aff5f58a5660f14b1290425e3.225>
    800243e2:	08000593          	li	a1,128
    800243e6:	fffff097          	auipc	ra,0xfffff
    800243ea:	4a4080e7          	jalr	1188(ra) # 8002388a <_ZN4core5slice5index26slice_start_index_len_fail17h9b5b4d8717655b24E>
	...

Disassembly of section .text._ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h88f04bfded474003E:

00000000800243f0 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h88f04bfded474003E>:
    800243f0:	7179                	addi	sp,sp,-48
    800243f2:	f406                	sd	ra,40(sp)
    800243f4:	00054603          	lbu	a2,0(a0)
    800243f8:	06400693          	li	a3,100
    800243fc:	852e                	mv	a0,a1
    800243fe:	04d66e63          	bltu	a2,a3,8002445a <.LBB477_6+0x22>
    80024402:	0fc67593          	andi	a1,a2,252
    80024406:	8189                	srli	a1,a1,0x2
    80024408:	0051f737          	lui	a4,0x51f
    8002440c:	b857071b          	addiw	a4,a4,-1147
    80024410:	0736                	slli	a4,a4,0xd
    80024412:	3d770713          	addi	a4,a4,983 # 51f3d7 <.Lline_table_start0+0x4e8a70>
    80024416:	073a                	slli	a4,a4,0xe
    80024418:	28f70713          	addi	a4,a4,655
    8002441c:	0732                	slli	a4,a4,0xc
    8002441e:	5c370713          	addi	a4,a4,1475
    80024422:	02e5b5b3          	mulhu	a1,a1,a4
    80024426:	0025d713          	srli	a4,a1,0x2
    8002442a:	02d705b3          	mul	a1,a4,a3
    8002442e:	40b605b3          	sub	a1,a2,a1
    80024432:	0586                	slli	a1,a1,0x1
    80024434:	0fe5f593          	andi	a1,a1,254

0000000080024438 <.LBB477_6>:
    80024438:	00008617          	auipc	a2,0x8
    8002443c:	78260613          	addi	a2,a2,1922 # 8002cbba <.Lanon.f077182aff5f58a5660f14b1290425e3.229>
    80024440:	95b2                	add	a1,a1,a2
    80024442:	00158603          	lb	a2,1(a1)
    80024446:	0005c583          	lbu	a1,0(a1)
    8002444a:	02c103a3          	sb	a2,39(sp)
    8002444e:	02b10323          	sb	a1,38(sp)
    80024452:	02400593          	li	a1,36
    80024456:	863a                	mv	a2,a4
    80024458:	a031                	j	80024464 <.LBB477_6+0x2c>
    8002445a:	46a5                	li	a3,9
    8002445c:	02600593          	li	a1,38
    80024460:	00c6ea63          	bltu	a3,a2,80024474 <.LBB477_6+0x3c>
    80024464:	00110693          	addi	a3,sp,1
    80024468:	96ae                	add	a3,a3,a1
    8002446a:	03060613          	addi	a2,a2,48
    8002446e:	00c68023          	sb	a2,0(a3) # 10000000 <.Lline_table_start0+0xffc9699>
    80024472:	a015                	j	80024496 <.LBB477_7+0x1e>
    80024474:	00161593          	slli	a1,a2,0x1

0000000080024478 <.LBB477_7>:
    80024478:	00008617          	auipc	a2,0x8
    8002447c:	74260613          	addi	a2,a2,1858 # 8002cbba <.Lanon.f077182aff5f58a5660f14b1290425e3.229>
    80024480:	95b2                	add	a1,a1,a2
    80024482:	00158603          	lb	a2,1(a1)
    80024486:	0005c583          	lbu	a1,0(a1)
    8002448a:	02c103a3          	sb	a2,39(sp)
    8002448e:	02b10323          	sb	a1,38(sp)
    80024492:	02500593          	li	a1,37
    80024496:	00110613          	addi	a2,sp,1
    8002449a:	00b60733          	add	a4,a2,a1
    8002449e:	02700613          	li	a2,39
    800244a2:	40b607b3          	sub	a5,a2,a1

00000000800244a6 <.LBB477_8>:
    800244a6:	00008617          	auipc	a2,0x8
    800244aa:	43260613          	addi	a2,a2,1074 # 8002c8d8 <.Lanon.f077182aff5f58a5660f14b1290425e3.133>
    800244ae:	4585                	li	a1,1
    800244b0:	4681                	li	a3,0
    800244b2:	ffffe097          	auipc	ra,0xffffe
    800244b6:	62e080e7          	jalr	1582(ra) # 80022ae0 <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E>
    800244ba:	70a2                	ld	ra,40(sp)
    800244bc:	6145                	addi	sp,sp,48
    800244be:	8082                	ret

Disassembly of section .text._ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17h1b385cecfac82c6bE:

00000000800244c0 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17h1b385cecfac82c6bE>:
    800244c0:	711d                	addi	sp,sp,-96
    800244c2:	ec86                	sd	ra,88(sp)
    800244c4:	e8a2                	sd	s0,80(sp)
    800244c6:	e4a6                	sd	s1,72(sp)
    800244c8:	e0ca                	sd	s2,64(sp)
    800244ca:	fc4e                	sd	s3,56(sp)
    800244cc:	f852                	sd	s4,48(sp)
    800244ce:	00056f83          	lwu	t6,0(a0)
    800244d2:	000f889b          	sext.w	a7,t6
    800244d6:	587d                	li	a6,-1
    800244d8:	852e                	mv	a0,a1
    800244da:	01184763          	blt	a6,a7,800244e8 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17h1b385cecfac82c6bE+0x28>
    800244de:	ffffc593          	not	a1,t6
    800244e2:	2581                	sext.w	a1,a1
    800244e4:	00158f93          	addi	t6,a1,1
    800244e8:	004fd593          	srli	a1,t6,0x4
    800244ec:	02700693          	li	a3,39
    800244f0:	27100613          	li	a2,625

00000000800244f4 <.LBB480_12>:
    800244f4:	00008297          	auipc	t0,0x8
    800244f8:	6c628293          	addi	t0,t0,1734 # 8002cbba <.Lanon.f077182aff5f58a5660f14b1290425e3.229>
    800244fc:	02c5f563          	bgeu	a1,a2,80024526 <.LBB480_12+0x32>
    80024500:	06300593          	li	a1,99
    80024504:	0ff5c063          	blt	a1,t6,800245e4 <.LBB480_12+0xf0>
    80024508:	4625                	li	a2,9
    8002450a:	011825b3          	slt	a1,a6,a7
    8002450e:	13f64d63          	blt	a2,t6,80024648 <.LBB480_12+0x154>
    80024512:	fff68613          	addi	a2,a3,-1
    80024516:	00910693          	addi	a3,sp,9
    8002451a:	96b2                	add	a3,a3,a2
    8002451c:	030f8713          	addi	a4,t6,48
    80024520:	00e68023          	sb	a4,0(a3)
    80024524:	a299                	j	8002466a <.LBB480_12+0x176>
    80024526:	4581                	li	a1,0
    80024528:	001a3637          	lui	a2,0x1a3
    8002452c:	6e36061b          	addiw	a2,a2,1763
    80024530:	063a                	slli	a2,a2,0xe
    80024532:	ac760613          	addi	a2,a2,-1337 # 1a2ac7 <.Lline_table_start0+0x16c160>
    80024536:	063a                	slli	a2,a2,0xe
    80024538:	43360613          	addi	a2,a2,1075
    8002453c:	0636                	slli	a2,a2,0xd
    8002453e:	94b60313          	addi	t1,a2,-1717
    80024542:	6609                	lui	a2,0x2
    80024544:	71060e1b          	addiw	t3,a2,1808
    80024548:	6641                	lui	a2,0x10
    8002454a:	ffc60f1b          	addiw	t5,a2,-4
    8002454e:	0051f6b7          	lui	a3,0x51f
    80024552:	b856869b          	addiw	a3,a3,-1147
    80024556:	06b6                	slli	a3,a3,0xd
    80024558:	3d768693          	addi	a3,a3,983 # 51f3d7 <.Lline_table_start0+0x4e8a70>
    8002455c:	06ba                	slli	a3,a3,0xe
    8002455e:	28f68693          	addi	a3,a3,655
    80024562:	06b2                	slli	a3,a3,0xc
    80024564:	5c368913          	addi	s2,a3,1475
    80024568:	06400393          	li	t2,100
    8002456c:	ffe6099b          	addiw	s3,a2,-2
    80024570:	00910e93          	addi	t4,sp,9
    80024574:	05f5e7b7          	lui	a5,0x5f5e
    80024578:	0ff78a1b          	addiw	s4,a5,255
    8002457c:	877e                	mv	a4,t6
    8002457e:	026fb6b3          	mulhu	a3,t6,t1
    80024582:	00b6df93          	srli	t6,a3,0xb
    80024586:	03cf86b3          	mul	a3,t6,t3
    8002458a:	40d706b3          	sub	a3,a4,a3
    8002458e:	01e6f4b3          	and	s1,a3,t5
    80024592:	8089                	srli	s1,s1,0x2
    80024594:	0324b4b3          	mulhu	s1,s1,s2
    80024598:	8089                	srli	s1,s1,0x2
    8002459a:	00149413          	slli	s0,s1,0x1
    8002459e:	027484b3          	mul	s1,s1,t2
    800245a2:	8e85                	sub	a3,a3,s1
    800245a4:	0686                	slli	a3,a3,0x1
    800245a6:	0136f6b3          	and	a3,a3,s3
    800245aa:	9416                	add	s0,s0,t0
    800245ac:	00be84b3          	add	s1,t4,a1
    800245b0:	00044603          	lbu	a2,0(s0)
    800245b4:	00140403          	lb	s0,1(s0)
    800245b8:	9696                	add	a3,a3,t0
    800245ba:	00168783          	lb	a5,1(a3)
    800245be:	0006c683          	lbu	a3,0(a3)
    800245c2:	02848223          	sb	s0,36(s1)
    800245c6:	02c481a3          	sb	a2,35(s1)
    800245ca:	02f48323          	sb	a5,38(s1)
    800245ce:	02d482a3          	sb	a3,37(s1)
    800245d2:	15f1                	addi	a1,a1,-4
    800245d4:	faea64e3          	bltu	s4,a4,8002457c <.LBB480_12+0x88>
    800245d8:	02758693          	addi	a3,a1,39
    800245dc:	06300593          	li	a1,99
    800245e0:	f3f5d4e3          	bge	a1,t6,80024508 <.LBB480_12+0x14>
    800245e4:	65c1                	lui	a1,0x10
    800245e6:	ffc5861b          	addiw	a2,a1,-4
    800245ea:	00cff633          	and	a2,t6,a2
    800245ee:	8209                	srli	a2,a2,0x2
    800245f0:	0051f737          	lui	a4,0x51f
    800245f4:	b857071b          	addiw	a4,a4,-1147
    800245f8:	0736                	slli	a4,a4,0xd
    800245fa:	3d770713          	addi	a4,a4,983 # 51f3d7 <.Lline_table_start0+0x4e8a70>
    800245fe:	073a                	slli	a4,a4,0xe
    80024600:	28f70713          	addi	a4,a4,655
    80024604:	0732                	slli	a4,a4,0xc
    80024606:	5c370713          	addi	a4,a4,1475
    8002460a:	02e63633          	mulhu	a2,a2,a4
    8002460e:	8209                	srli	a2,a2,0x2
    80024610:	06400713          	li	a4,100
    80024614:	02e60733          	mul	a4,a2,a4
    80024618:	40ef8733          	sub	a4,t6,a4
    8002461c:	0706                	slli	a4,a4,0x1
    8002461e:	35f9                	addiw	a1,a1,-2
    80024620:	8df9                	and	a1,a1,a4
    80024622:	16f9                	addi	a3,a3,-2
    80024624:	9596                	add	a1,a1,t0
    80024626:	00158703          	lb	a4,1(a1) # 10001 <.Lline_table_start0+0x8ad>
    8002462a:	0005c583          	lbu	a1,0(a1)
    8002462e:	00910793          	addi	a5,sp,9
    80024632:	97b6                	add	a5,a5,a3
    80024634:	00e780a3          	sb	a4,1(a5) # 5f5e001 <.Lline_table_start0+0x5f2769a>
    80024638:	00b78023          	sb	a1,0(a5)
    8002463c:	8fb2                	mv	t6,a2
    8002463e:	4625                	li	a2,9
    80024640:	011825b3          	slt	a1,a6,a7
    80024644:	edf657e3          	bge	a2,t6,80024512 <.LBB480_12+0x1e>
    80024648:	001f9713          	slli	a4,t6,0x1
    8002464c:	ffe68613          	addi	a2,a3,-2
    80024650:	005706b3          	add	a3,a4,t0
    80024654:	00168703          	lb	a4,1(a3)
    80024658:	0006c683          	lbu	a3,0(a3)
    8002465c:	00910793          	addi	a5,sp,9
    80024660:	97b2                	add	a5,a5,a2
    80024662:	00e780a3          	sb	a4,1(a5)
    80024666:	00d78023          	sb	a3,0(a5)
    8002466a:	00910693          	addi	a3,sp,9
    8002466e:	00c68733          	add	a4,a3,a2
    80024672:	02700693          	li	a3,39
    80024676:	40c687b3          	sub	a5,a3,a2

000000008002467a <.LBB480_13>:
    8002467a:	00008617          	auipc	a2,0x8
    8002467e:	25e60613          	addi	a2,a2,606 # 8002c8d8 <.Lanon.f077182aff5f58a5660f14b1290425e3.133>
    80024682:	4681                	li	a3,0
    80024684:	ffffe097          	auipc	ra,0xffffe
    80024688:	45c080e7          	jalr	1116(ra) # 80022ae0 <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E>
    8002468c:	7a42                	ld	s4,48(sp)
    8002468e:	79e2                	ld	s3,56(sp)
    80024690:	6906                	ld	s2,64(sp)
    80024692:	64a6                	ld	s1,72(sp)
    80024694:	6446                	ld	s0,80(sp)
    80024696:	60e6                	ld	ra,88(sp)
    80024698:	6125                	addi	sp,sp,96
    8002469a:	8082                	ret

Disassembly of section .text._ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17h19c6429b08a072b1E:

000000008002469c <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17h19c6429b08a072b1E>:
    8002469c:	715d                	addi	sp,sp,-80
    8002469e:	e486                	sd	ra,72(sp)
    800246a0:	e0a2                	sd	s0,64(sp)
    800246a2:	fc26                	sd	s1,56(sp)
    800246a4:	f84a                	sd	s2,48(sp)
    800246a6:	00056903          	lwu	s2,0(a0)
    800246aa:	852e                	mv	a0,a1
    800246ac:	00495593          	srli	a1,s2,0x4
    800246b0:	02700693          	li	a3,39
    800246b4:	27100713          	li	a4,625

00000000800246b8 <.LBB481_10>:
    800246b8:	00008817          	auipc	a6,0x8
    800246bc:	50280813          	addi	a6,a6,1282 # 8002cbba <.Lanon.f077182aff5f58a5660f14b1290425e3.229>
    800246c0:	02e5f363          	bgeu	a1,a4,800246e6 <.LBB481_10+0x2e>
    800246c4:	06300593          	li	a1,99
    800246c8:	0f25e063          	bltu	a1,s2,800247a8 <.LBB481_10+0xf0>
    800246cc:	45a5                	li	a1,9
    800246ce:	1325cd63          	blt	a1,s2,80024808 <.LBB481_10+0x150>
    800246d2:	fff68593          	addi	a1,a3,-1
    800246d6:	00910613          	addi	a2,sp,9
    800246da:	962e                	add	a2,a2,a1
    800246dc:	03090693          	addi	a3,s2,48
    800246e0:	00d60023          	sb	a3,0(a2)
    800246e4:	a291                	j	80024828 <.LBB481_10+0x170>
    800246e6:	4681                	li	a3,0
    800246e8:	001a35b7          	lui	a1,0x1a3
    800246ec:	6e35859b          	addiw	a1,a1,1763
    800246f0:	05ba                	slli	a1,a1,0xe
    800246f2:	ac758593          	addi	a1,a1,-1337 # 1a2ac7 <.Lline_table_start0+0x16c160>
    800246f6:	05ba                	slli	a1,a1,0xe
    800246f8:	43358593          	addi	a1,a1,1075
    800246fc:	05b6                	slli	a1,a1,0xd
    800246fe:	94b58893          	addi	a7,a1,-1717
    80024702:	6589                	lui	a1,0x2
    80024704:	7105831b          	addiw	t1,a1,1808
    80024708:	65c1                	lui	a1,0x10
    8002470a:	ffc58e1b          	addiw	t3,a1,-4
    8002470e:	0051f737          	lui	a4,0x51f
    80024712:	b857071b          	addiw	a4,a4,-1147
    80024716:	0736                	slli	a4,a4,0xd
    80024718:	3d770713          	addi	a4,a4,983 # 51f3d7 <.Lline_table_start0+0x4e8a70>
    8002471c:	073a                	slli	a4,a4,0xe
    8002471e:	28f70713          	addi	a4,a4,655
    80024722:	0732                	slli	a4,a4,0xc
    80024724:	5c370e93          	addi	t4,a4,1475
    80024728:	06400293          	li	t0,100
    8002472c:	ffe58f1b          	addiw	t5,a1,-2
    80024730:	00910393          	addi	t2,sp,9
    80024734:	05f5e5b7          	lui	a1,0x5f5e
    80024738:	0ff58f9b          	addiw	t6,a1,255
    8002473c:	864a                	mv	a2,s2
    8002473e:	031937b3          	mulhu	a5,s2,a7
    80024742:	00b7d913          	srli	s2,a5,0xb
    80024746:	02690733          	mul	a4,s2,t1
    8002474a:	40e60733          	sub	a4,a2,a4
    8002474e:	01c775b3          	and	a1,a4,t3
    80024752:	8189                	srli	a1,a1,0x2
    80024754:	03d5b5b3          	mulhu	a1,a1,t4
    80024758:	8189                	srli	a1,a1,0x2
    8002475a:	00159413          	slli	s0,a1,0x1
    8002475e:	025585b3          	mul	a1,a1,t0
    80024762:	40b705b3          	sub	a1,a4,a1
    80024766:	0586                	slli	a1,a1,0x1
    80024768:	01e5f5b3          	and	a1,a1,t5
    8002476c:	01040733          	add	a4,s0,a6
    80024770:	00d38433          	add	s0,t2,a3
    80024774:	00074483          	lbu	s1,0(a4)
    80024778:	00170703          	lb	a4,1(a4)
    8002477c:	95c2                	add	a1,a1,a6
    8002477e:	00158783          	lb	a5,1(a1) # 5f5e001 <.Lline_table_start0+0x5f2769a>
    80024782:	0005c583          	lbu	a1,0(a1)
    80024786:	02e40223          	sb	a4,36(s0)
    8002478a:	029401a3          	sb	s1,35(s0)
    8002478e:	02f40323          	sb	a5,38(s0)
    80024792:	02b402a3          	sb	a1,37(s0)
    80024796:	16f1                	addi	a3,a3,-4
    80024798:	facfe2e3          	bltu	t6,a2,8002473c <.LBB481_10+0x84>
    8002479c:	02768693          	addi	a3,a3,39
    800247a0:	06300593          	li	a1,99
    800247a4:	f325f4e3          	bgeu	a1,s2,800246cc <.LBB481_10+0x14>
    800247a8:	65c1                	lui	a1,0x10
    800247aa:	ffc5861b          	addiw	a2,a1,-4
    800247ae:	00c97633          	and	a2,s2,a2
    800247b2:	8209                	srli	a2,a2,0x2
    800247b4:	0051f737          	lui	a4,0x51f
    800247b8:	b857071b          	addiw	a4,a4,-1147
    800247bc:	0736                	slli	a4,a4,0xd
    800247be:	3d770713          	addi	a4,a4,983 # 51f3d7 <.Lline_table_start0+0x4e8a70>
    800247c2:	073a                	slli	a4,a4,0xe
    800247c4:	28f70713          	addi	a4,a4,655
    800247c8:	0732                	slli	a4,a4,0xc
    800247ca:	5c370713          	addi	a4,a4,1475
    800247ce:	02e63633          	mulhu	a2,a2,a4
    800247d2:	8209                	srli	a2,a2,0x2
    800247d4:	06400713          	li	a4,100
    800247d8:	02e60733          	mul	a4,a2,a4
    800247dc:	40e90733          	sub	a4,s2,a4
    800247e0:	0706                	slli	a4,a4,0x1
    800247e2:	35f9                	addiw	a1,a1,-2
    800247e4:	8df9                	and	a1,a1,a4
    800247e6:	16f9                	addi	a3,a3,-2
    800247e8:	95c2                	add	a1,a1,a6
    800247ea:	00158703          	lb	a4,1(a1) # 10001 <.Lline_table_start0+0x8ad>
    800247ee:	0005c583          	lbu	a1,0(a1)
    800247f2:	00910793          	addi	a5,sp,9
    800247f6:	97b6                	add	a5,a5,a3
    800247f8:	00e780a3          	sb	a4,1(a5)
    800247fc:	00b78023          	sb	a1,0(a5)
    80024800:	8932                	mv	s2,a2
    80024802:	45a5                	li	a1,9
    80024804:	ed25d7e3          	bge	a1,s2,800246d2 <.LBB481_10+0x1a>
    80024808:	00191613          	slli	a2,s2,0x1
    8002480c:	ffe68593          	addi	a1,a3,-2
    80024810:	9642                	add	a2,a2,a6
    80024812:	00160683          	lb	a3,1(a2)
    80024816:	00064603          	lbu	a2,0(a2)
    8002481a:	00910713          	addi	a4,sp,9
    8002481e:	972e                	add	a4,a4,a1
    80024820:	00d700a3          	sb	a3,1(a4)
    80024824:	00c70023          	sb	a2,0(a4)
    80024828:	00910613          	addi	a2,sp,9
    8002482c:	00b60733          	add	a4,a2,a1
    80024830:	02700613          	li	a2,39
    80024834:	40b607b3          	sub	a5,a2,a1

0000000080024838 <.LBB481_11>:
    80024838:	00008617          	auipc	a2,0x8
    8002483c:	0a060613          	addi	a2,a2,160 # 8002c8d8 <.Lanon.f077182aff5f58a5660f14b1290425e3.133>
    80024840:	4585                	li	a1,1
    80024842:	4681                	li	a3,0
    80024844:	ffffe097          	auipc	ra,0xffffe
    80024848:	29c080e7          	jalr	668(ra) # 80022ae0 <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E>
    8002484c:	7942                	ld	s2,48(sp)
    8002484e:	74e2                	ld	s1,56(sp)
    80024850:	6406                	ld	s0,64(sp)
    80024852:	60a6                	ld	ra,72(sp)
    80024854:	6161                	addi	sp,sp,80
    80024856:	8082                	ret

Disassembly of section .text._ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h9c6c4af1578f7c29E:

0000000080024858 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u64$GT$3fmt17h9c6c4af1578f7c29E>:
    80024858:	715d                	addi	sp,sp,-80
    8002485a:	e486                	sd	ra,72(sp)
    8002485c:	e0a2                	sd	s0,64(sp)
    8002485e:	fc26                	sd	s1,56(sp)
    80024860:	f84a                	sd	s2,48(sp)
    80024862:	00053903          	ld	s2,0(a0)
    80024866:	852e                	mv	a0,a1
    80024868:	00495593          	srli	a1,s2,0x4
    8002486c:	02700693          	li	a3,39
    80024870:	27100713          	li	a4,625

0000000080024874 <.LBB483_10>:
    80024874:	00008817          	auipc	a6,0x8
    80024878:	34680813          	addi	a6,a6,838 # 8002cbba <.Lanon.f077182aff5f58a5660f14b1290425e3.229>
    8002487c:	02e5f363          	bgeu	a1,a4,800248a2 <.LBB483_10+0x2e>
    80024880:	06300593          	li	a1,99
    80024884:	0f25c063          	blt	a1,s2,80024964 <.LBB483_10+0xf0>
    80024888:	45a5                	li	a1,9
    8002488a:	1325cd63          	blt	a1,s2,800249c4 <.LBB483_10+0x150>
    8002488e:	fff68593          	addi	a1,a3,-1
    80024892:	00910613          	addi	a2,sp,9
    80024896:	962e                	add	a2,a2,a1
    80024898:	03090693          	addi	a3,s2,48
    8002489c:	00d60023          	sb	a3,0(a2)
    800248a0:	a291                	j	800249e4 <.LBB483_10+0x170>
    800248a2:	4681                	li	a3,0
    800248a4:	001a35b7          	lui	a1,0x1a3
    800248a8:	6e35859b          	addiw	a1,a1,1763
    800248ac:	05ba                	slli	a1,a1,0xe
    800248ae:	ac758593          	addi	a1,a1,-1337 # 1a2ac7 <.Lline_table_start0+0x16c160>
    800248b2:	05ba                	slli	a1,a1,0xe
    800248b4:	43358593          	addi	a1,a1,1075
    800248b8:	05b6                	slli	a1,a1,0xd
    800248ba:	94b58893          	addi	a7,a1,-1717
    800248be:	6589                	lui	a1,0x2
    800248c0:	7105831b          	addiw	t1,a1,1808
    800248c4:	65c1                	lui	a1,0x10
    800248c6:	ffc58e1b          	addiw	t3,a1,-4
    800248ca:	0051f737          	lui	a4,0x51f
    800248ce:	b857071b          	addiw	a4,a4,-1147
    800248d2:	0736                	slli	a4,a4,0xd
    800248d4:	3d770713          	addi	a4,a4,983 # 51f3d7 <.Lline_table_start0+0x4e8a70>
    800248d8:	073a                	slli	a4,a4,0xe
    800248da:	28f70713          	addi	a4,a4,655
    800248de:	0732                	slli	a4,a4,0xc
    800248e0:	5c370e93          	addi	t4,a4,1475
    800248e4:	06400293          	li	t0,100
    800248e8:	ffe58f1b          	addiw	t5,a1,-2
    800248ec:	00910393          	addi	t2,sp,9
    800248f0:	05f5e5b7          	lui	a1,0x5f5e
    800248f4:	0ff58f9b          	addiw	t6,a1,255
    800248f8:	864a                	mv	a2,s2
    800248fa:	031937b3          	mulhu	a5,s2,a7
    800248fe:	00b7d913          	srli	s2,a5,0xb
    80024902:	02690733          	mul	a4,s2,t1
    80024906:	40e60733          	sub	a4,a2,a4
    8002490a:	01c775b3          	and	a1,a4,t3
    8002490e:	8189                	srli	a1,a1,0x2
    80024910:	03d5b5b3          	mulhu	a1,a1,t4
    80024914:	8189                	srli	a1,a1,0x2
    80024916:	00159413          	slli	s0,a1,0x1
    8002491a:	025585b3          	mul	a1,a1,t0
    8002491e:	40b705b3          	sub	a1,a4,a1
    80024922:	0586                	slli	a1,a1,0x1
    80024924:	01e5f5b3          	and	a1,a1,t5
    80024928:	01040733          	add	a4,s0,a6
    8002492c:	00d38433          	add	s0,t2,a3
    80024930:	00074483          	lbu	s1,0(a4)
    80024934:	00170703          	lb	a4,1(a4)
    80024938:	95c2                	add	a1,a1,a6
    8002493a:	00158783          	lb	a5,1(a1) # 5f5e001 <.Lline_table_start0+0x5f2769a>
    8002493e:	0005c583          	lbu	a1,0(a1)
    80024942:	02e40223          	sb	a4,36(s0)
    80024946:	029401a3          	sb	s1,35(s0)
    8002494a:	02f40323          	sb	a5,38(s0)
    8002494e:	02b402a3          	sb	a1,37(s0)
    80024952:	16f1                	addi	a3,a3,-4
    80024954:	facfe2e3          	bltu	t6,a2,800248f8 <.LBB483_10+0x84>
    80024958:	02768693          	addi	a3,a3,39
    8002495c:	06300593          	li	a1,99
    80024960:	f325d4e3          	bge	a1,s2,80024888 <.LBB483_10+0x14>
    80024964:	65c1                	lui	a1,0x10
    80024966:	ffc5861b          	addiw	a2,a1,-4
    8002496a:	00c97633          	and	a2,s2,a2
    8002496e:	8209                	srli	a2,a2,0x2
    80024970:	0051f737          	lui	a4,0x51f
    80024974:	b857071b          	addiw	a4,a4,-1147
    80024978:	0736                	slli	a4,a4,0xd
    8002497a:	3d770713          	addi	a4,a4,983 # 51f3d7 <.Lline_table_start0+0x4e8a70>
    8002497e:	073a                	slli	a4,a4,0xe
    80024980:	28f70713          	addi	a4,a4,655
    80024984:	0732                	slli	a4,a4,0xc
    80024986:	5c370713          	addi	a4,a4,1475
    8002498a:	02e63633          	mulhu	a2,a2,a4
    8002498e:	8209                	srli	a2,a2,0x2
    80024990:	06400713          	li	a4,100
    80024994:	02e60733          	mul	a4,a2,a4
    80024998:	40e90733          	sub	a4,s2,a4
    8002499c:	0706                	slli	a4,a4,0x1
    8002499e:	35f9                	addiw	a1,a1,-2
    800249a0:	8df9                	and	a1,a1,a4
    800249a2:	16f9                	addi	a3,a3,-2
    800249a4:	95c2                	add	a1,a1,a6
    800249a6:	00158703          	lb	a4,1(a1) # 10001 <.Lline_table_start0+0x8ad>
    800249aa:	0005c583          	lbu	a1,0(a1)
    800249ae:	00910793          	addi	a5,sp,9
    800249b2:	97b6                	add	a5,a5,a3
    800249b4:	00e780a3          	sb	a4,1(a5)
    800249b8:	00b78023          	sb	a1,0(a5)
    800249bc:	8932                	mv	s2,a2
    800249be:	45a5                	li	a1,9
    800249c0:	ed25d7e3          	bge	a1,s2,8002488e <.LBB483_10+0x1a>
    800249c4:	00191613          	slli	a2,s2,0x1
    800249c8:	ffe68593          	addi	a1,a3,-2
    800249cc:	9642                	add	a2,a2,a6
    800249ce:	00160683          	lb	a3,1(a2)
    800249d2:	00064603          	lbu	a2,0(a2)
    800249d6:	00910713          	addi	a4,sp,9
    800249da:	972e                	add	a4,a4,a1
    800249dc:	00d700a3          	sb	a3,1(a4)
    800249e0:	00c70023          	sb	a2,0(a4)
    800249e4:	00910613          	addi	a2,sp,9
    800249e8:	00b60733          	add	a4,a2,a1
    800249ec:	02700613          	li	a2,39
    800249f0:	40b607b3          	sub	a5,a2,a1

00000000800249f4 <.LBB483_11>:
    800249f4:	00008617          	auipc	a2,0x8
    800249f8:	ee460613          	addi	a2,a2,-284 # 8002c8d8 <.Lanon.f077182aff5f58a5660f14b1290425e3.133>
    800249fc:	4585                	li	a1,1
    800249fe:	4681                	li	a3,0
    80024a00:	ffffe097          	auipc	ra,0xffffe
    80024a04:	0e0080e7          	jalr	224(ra) # 80022ae0 <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E>
    80024a08:	7942                	ld	s2,48(sp)
    80024a0a:	74e2                	ld	s1,56(sp)
    80024a0c:	6406                	ld	s0,64(sp)
    80024a0e:	60a6                	ld	ra,72(sp)
    80024a10:	6161                	addi	sp,sp,80
    80024a12:	8082                	ret

Disassembly of section .text._ZN53_$LT$core..fmt..Error$u20$as$u20$core..fmt..Debug$GT$3fmt17h2b8d1e77328b4836E:

0000000080024a14 <_ZN53_$LT$core..fmt..Error$u20$as$u20$core..fmt..Debug$GT$3fmt17h2b8d1e77328b4836E>:
    80024a14:	7590                	ld	a2,40(a1)
    80024a16:	7188                	ld	a0,32(a1)
    80024a18:	6e1c                	ld	a5,24(a2)

0000000080024a1a <.LBB507_1>:
    80024a1a:	00009597          	auipc	a1,0x9
    80024a1e:	c5658593          	addi	a1,a1,-938 # 8002d670 <.Lanon.f077182aff5f58a5660f14b1290425e3.546>
    80024a22:	4615                	li	a2,5
    80024a24:	8782                	jr	a5

Disassembly of section .text._ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h017525c41f63708eE:

0000000080024a26 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h017525c41f63708eE>:
    80024a26:	7175                	addi	sp,sp,-144
    80024a28:	e506                	sd	ra,136(sp)
    80024a2a:	882e                	mv	a6,a1
    80024a2c:	0305e583          	lwu	a1,48(a1)
    80024a30:	6108                	ld	a0,0(a0)
    80024a32:	0105f613          	andi	a2,a1,16
    80024a36:	e625                	bnez	a2,80024a9e <.LBB508_21+0x22>
    80024a38:	0205f593          	andi	a1,a1,32
    80024a3c:	e9c1                	bnez	a1,80024acc <.LBB508_21+0x50>
    80024a3e:	00054503          	lbu	a0,0(a0)
    80024a42:	06400593          	li	a1,100
    80024a46:	0eb56463          	bltu	a0,a1,80024b2e <.LBB508_22+0x1c>
    80024a4a:	0fc57613          	andi	a2,a0,252
    80024a4e:	8209                	srli	a2,a2,0x2
    80024a50:	0051f6b7          	lui	a3,0x51f
    80024a54:	b856869b          	addiw	a3,a3,-1147
    80024a58:	06b6                	slli	a3,a3,0xd
    80024a5a:	3d768693          	addi	a3,a3,983 # 51f3d7 <.Lline_table_start0+0x4e8a70>
    80024a5e:	06ba                	slli	a3,a3,0xe
    80024a60:	28f68693          	addi	a3,a3,655
    80024a64:	06b2                	slli	a3,a3,0xc
    80024a66:	5c368693          	addi	a3,a3,1475
    80024a6a:	02d63633          	mulhu	a2,a2,a3
    80024a6e:	8209                	srli	a2,a2,0x2
    80024a70:	02b605b3          	mul	a1,a2,a1
    80024a74:	8d0d                	sub	a0,a0,a1
    80024a76:	0506                	slli	a0,a0,0x1
    80024a78:	0fe57513          	andi	a0,a0,254

0000000080024a7c <.LBB508_21>:
    80024a7c:	00008597          	auipc	a1,0x8
    80024a80:	13e58593          	addi	a1,a1,318 # 8002cbba <.Lanon.f077182aff5f58a5660f14b1290425e3.229>
    80024a84:	952e                	add	a0,a0,a1
    80024a86:	00150583          	lb	a1,1(a0)
    80024a8a:	00054503          	lbu	a0,0(a0)
    80024a8e:	02b10723          	sb	a1,46(sp)
    80024a92:	02a106a3          	sb	a0,45(sp)
    80024a96:	02400593          	li	a1,36
    80024a9a:	8532                	mv	a0,a2
    80024a9c:	a871                	j	80024b38 <.LBB508_22+0x26>
    80024a9e:	00054503          	lbu	a0,0(a0)
    80024aa2:	4581                	li	a1,0
    80024aa4:	0030                	addi	a2,sp,8
    80024aa6:	46a9                	li	a3,10
    80024aa8:	a819                	j	80024abe <.LBB508_21+0x42>
    80024aaa:	05770713          	addi	a4,a4,87
    80024aae:	00b607b3          	add	a5,a2,a1
    80024ab2:	8111                	srli	a0,a0,0x4
    80024ab4:	893d                	andi	a0,a0,15
    80024ab6:	06e78fa3          	sb	a4,127(a5)
    80024aba:	15fd                	addi	a1,a1,-1
    80024abc:	cd1d                	beqz	a0,80024afa <.LBB508_21+0x7e>
    80024abe:	00f57713          	andi	a4,a0,15
    80024ac2:	fed774e3          	bgeu	a4,a3,80024aaa <.LBB508_21+0x2e>
    80024ac6:	03076713          	ori	a4,a4,48
    80024aca:	b7d5                	j	80024aae <.LBB508_21+0x32>
    80024acc:	00054503          	lbu	a0,0(a0)
    80024ad0:	4581                	li	a1,0
    80024ad2:	0030                	addi	a2,sp,8
    80024ad4:	46a9                	li	a3,10
    80024ad6:	a819                	j	80024aec <.LBB508_21+0x70>
    80024ad8:	03770713          	addi	a4,a4,55
    80024adc:	00b607b3          	add	a5,a2,a1
    80024ae0:	8111                	srli	a0,a0,0x4
    80024ae2:	893d                	andi	a0,a0,15
    80024ae4:	06e78fa3          	sb	a4,127(a5)
    80024ae8:	15fd                	addi	a1,a1,-1
    80024aea:	c901                	beqz	a0,80024afa <.LBB508_21+0x7e>
    80024aec:	00f57713          	andi	a4,a0,15
    80024af0:	fed774e3          	bgeu	a4,a3,80024ad8 <.LBB508_21+0x5c>
    80024af4:	03076713          	ori	a4,a4,48
    80024af8:	b7d5                	j	80024adc <.LBB508_21+0x60>
    80024afa:	08058513          	addi	a0,a1,128
    80024afe:	08100613          	li	a2,129
    80024b02:	08c57763          	bgeu	a0,a2,80024b90 <.LBB508_25>
    80024b06:	40b007b3          	neg	a5,a1
    80024b0a:	0028                	addi	a0,sp,8
    80024b0c:	952e                	add	a0,a0,a1
    80024b0e:	08050713          	addi	a4,a0,128

0000000080024b12 <.LBB508_22>:
    80024b12:	00008617          	auipc	a2,0x8
    80024b16:	0a660613          	addi	a2,a2,166 # 8002cbb8 <.Lanon.f077182aff5f58a5660f14b1290425e3.226>
    80024b1a:	4585                	li	a1,1
    80024b1c:	4689                	li	a3,2
    80024b1e:	8542                	mv	a0,a6
    80024b20:	ffffe097          	auipc	ra,0xffffe
    80024b24:	fc0080e7          	jalr	-64(ra) # 80022ae0 <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E>
    80024b28:	60aa                	ld	ra,136(sp)
    80024b2a:	6149                	addi	sp,sp,144
    80024b2c:	8082                	ret
    80024b2e:	4625                	li	a2,9
    80024b30:	02600593          	li	a1,38
    80024b34:	00a66963          	bltu	a2,a0,80024b46 <.LBB508_22+0x34>
    80024b38:	0030                	addi	a2,sp,8
    80024b3a:	962e                	add	a2,a2,a1
    80024b3c:	03050513          	addi	a0,a0,48
    80024b40:	00a60023          	sb	a0,0(a2)
    80024b44:	a00d                	j	80024b66 <.LBB508_23+0x1e>
    80024b46:	0506                	slli	a0,a0,0x1

0000000080024b48 <.LBB508_23>:
    80024b48:	00008597          	auipc	a1,0x8
    80024b4c:	07258593          	addi	a1,a1,114 # 8002cbba <.Lanon.f077182aff5f58a5660f14b1290425e3.229>
    80024b50:	952e                	add	a0,a0,a1
    80024b52:	00150583          	lb	a1,1(a0)
    80024b56:	00054503          	lbu	a0,0(a0)
    80024b5a:	02b10723          	sb	a1,46(sp)
    80024b5e:	02a106a3          	sb	a0,45(sp)
    80024b62:	02500593          	li	a1,37
    80024b66:	0028                	addi	a0,sp,8
    80024b68:	00b50733          	add	a4,a0,a1
    80024b6c:	02700513          	li	a0,39
    80024b70:	40b507b3          	sub	a5,a0,a1

0000000080024b74 <.LBB508_24>:
    80024b74:	00008617          	auipc	a2,0x8
    80024b78:	d6460613          	addi	a2,a2,-668 # 8002c8d8 <.Lanon.f077182aff5f58a5660f14b1290425e3.133>
    80024b7c:	4585                	li	a1,1
    80024b7e:	8542                	mv	a0,a6
    80024b80:	4681                	li	a3,0
    80024b82:	ffffe097          	auipc	ra,0xffffe
    80024b86:	f5e080e7          	jalr	-162(ra) # 80022ae0 <_ZN4core3fmt9Formatter12pad_integral17h663298466d3a1ae5E>
    80024b8a:	60aa                	ld	ra,136(sp)
    80024b8c:	6149                	addi	sp,sp,144
    80024b8e:	8082                	ret

0000000080024b90 <.LBB508_25>:
    80024b90:	00008617          	auipc	a2,0x8
    80024b94:	01060613          	addi	a2,a2,16 # 8002cba0 <.Lanon.f077182aff5f58a5660f14b1290425e3.225>
    80024b98:	08000593          	li	a1,128
    80024b9c:	fffff097          	auipc	ra,0xfffff
    80024ba0:	cee080e7          	jalr	-786(ra) # 8002388a <_ZN4core5slice5index26slice_start_index_len_fail17h9b5b4d8717655b24E>
	...

Disassembly of section .text._ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h729ad47dd83507edE:

0000000080024ba6 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h729ad47dd83507edE>:
    80024ba6:	6510                	ld	a2,8(a0)
    80024ba8:	6108                	ld	a0,0(a0)
    80024baa:	6e1c                	ld	a5,24(a2)
    80024bac:	8782                	jr	a5

Disassembly of section .text._ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17haf4f75541e037c12E:

0000000080024bae <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17haf4f75541e037c12E>:
    80024bae:	6108                	ld	a0,0(a0)
    80024bb0:	fffff317          	auipc	t1,0xfffff
    80024bb4:	77e30067          	jr	1918(t1) # 8002432e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h46dfaf96577b17ecE>

Disassembly of section .text._ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hb809428d9f1f0981E:

0000000080024bb8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hb809428d9f1f0981E>:
    80024bb8:	00008697          	auipc	a3,0x8
    80024bbc:	15068693          	addi	a3,a3,336 # 8002cd08 <.Lanon.f077182aff5f58a5660f14b1290425e3.242>
    80024bc0:	4609                	li	a2,2
    80024bc2:	852e                	mv	a0,a1
    80024bc4:	85b6                	mv	a1,a3
    80024bc6:	ffffe317          	auipc	t1,0xffffe
    80024bca:	1d230067          	jr	466(t1) # 80022d98 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE>

Disassembly of section .text._ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hb8cc379c2a0c894eE:

0000000080024bce <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hb8cc379c2a0c894eE>:
    80024bce:	7139                	addi	sp,sp,-64
    80024bd0:	fc06                	sd	ra,56(sp)
    80024bd2:	f822                	sd	s0,48(sp)
    80024bd4:	f426                	sd	s1,40(sp)
    80024bd6:	6110                	ld	a2,0(a0)
    80024bd8:	00064503          	lbu	a0,0(a2)
    80024bdc:	842e                	mv	s0,a1
    80024bde:	cd59                	beqz	a0,80024c7c <.LBB572_13+0x1e>
    80024be0:	740c                	ld	a1,40(s0)
    80024be2:	7008                	ld	a0,32(s0)
    80024be4:	6d94                	ld	a3,24(a1)
    80024be6:	00160493          	addi	s1,a2,1

0000000080024bea <.LBB572_10>:
    80024bea:	00002597          	auipc	a1,0x2
    80024bee:	9da58593          	addi	a1,a1,-1574 # 800265c4 <.L__unnamed_16+0x1c>
    80024bf2:	4611                	li	a2,4
    80024bf4:	9682                	jalr	a3
    80024bf6:	e422                	sd	s0,8(sp)
    80024bf8:	00a10c23          	sb	a0,24(sp)
    80024bfc:	e802                	sd	zero,16(sp)
    80024bfe:	00010ca3          	sb	zero,25(sp)
    80024c02:	f026                	sd	s1,32(sp)

0000000080024c04 <.LBB572_11>:
    80024c04:	00008617          	auipc	a2,0x8
    80024c08:	f5c60613          	addi	a2,a2,-164 # 8002cb60 <.Lanon.f077182aff5f58a5660f14b1290425e3.214>
    80024c0c:	0028                	addi	a0,sp,8
    80024c0e:	100c                	addi	a1,sp,32
    80024c10:	ffffe097          	auipc	ra,0xffffe
    80024c14:	9a2080e7          	jalr	-1630(ra) # 800225b2 <_ZN4core3fmt8builders10DebugTuple5field17h5bd338b8cb98b948E>
    80024c18:	6542                	ld	a0,16(sp)
    80024c1a:	01814583          	lbu	a1,24(sp)
    80024c1e:	c921                	beqz	a0,80024c6e <.LBB572_13+0x10>
    80024c20:	4405                	li	s0,1
    80024c22:	e5a9                	bnez	a1,80024c6c <.LBB572_13+0xe>
    80024c24:	01914583          	lbu	a1,25(sp)
    80024c28:	157d                	addi	a0,a0,-1
    80024c2a:	00a03533          	snez	a0,a0
    80024c2e:	0015b593          	seqz	a1,a1
    80024c32:	8d4d                	or	a0,a0,a1
    80024c34:	e10d                	bnez	a0,80024c56 <.LBB572_12+0x10>
    80024c36:	6522                	ld	a0,8(sp)
    80024c38:	03054583          	lbu	a1,48(a0)
    80024c3c:	8991                	andi	a1,a1,4
    80024c3e:	ed81                	bnez	a1,80024c56 <.LBB572_12+0x10>
    80024c40:	750c                	ld	a1,40(a0)
    80024c42:	7108                	ld	a0,32(a0)
    80024c44:	6d94                	ld	a3,24(a1)

0000000080024c46 <.LBB572_12>:
    80024c46:	00008597          	auipc	a1,0x8
    80024c4a:	f1258593          	addi	a1,a1,-238 # 8002cb58 <.Lanon.f077182aff5f58a5660f14b1290425e3.209>
    80024c4e:	4605                	li	a2,1
    80024c50:	4405                	li	s0,1
    80024c52:	9682                	jalr	a3
    80024c54:	ed01                	bnez	a0,80024c6c <.LBB572_13+0xe>
    80024c56:	6522                	ld	a0,8(sp)
    80024c58:	750c                	ld	a1,40(a0)
    80024c5a:	7108                	ld	a0,32(a0)
    80024c5c:	6d94                	ld	a3,24(a1)

0000000080024c5e <.LBB572_13>:
    80024c5e:	00008597          	auipc	a1,0x8
    80024c62:	efb58593          	addi	a1,a1,-261 # 8002cb59 <.Lanon.f077182aff5f58a5660f14b1290425e3.210>
    80024c66:	4605                	li	a2,1
    80024c68:	9682                	jalr	a3
    80024c6a:	842a                	mv	s0,a0
    80024c6c:	85a2                	mv	a1,s0
    80024c6e:	00b03533          	snez	a0,a1
    80024c72:	74a2                	ld	s1,40(sp)
    80024c74:	7442                	ld	s0,48(sp)
    80024c76:	70e2                	ld	ra,56(sp)
    80024c78:	6121                	addi	sp,sp,64
    80024c7a:	8082                	ret
    80024c7c:	740c                	ld	a1,40(s0)
    80024c7e:	7008                	ld	a0,32(s0)
    80024c80:	6d9c                	ld	a5,24(a1)

0000000080024c82 <.LBB572_14>:
    80024c82:	00002597          	auipc	a1,0x2
    80024c86:	96e58593          	addi	a1,a1,-1682 # 800265f0 <.L__unnamed_16+0x48>
    80024c8a:	4611                	li	a2,4
    80024c8c:	74a2                	ld	s1,40(sp)
    80024c8e:	7442                	ld	s0,48(sp)
    80024c90:	70e2                	ld	ra,56(sp)
    80024c92:	6121                	addi	sp,sp,64
    80024c94:	8782                	jr	a5

Disassembly of section .text._ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hd91955f1ed16292bE:

0000000080024c96 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hd91955f1ed16292bE>:
    80024c96:	1141                	addi	sp,sp,-16
    80024c98:	e406                	sd	ra,8(sp)
    80024c9a:	6108                	ld	a0,0(a0)
    80024c9c:	6108                	ld	a0,0(a0)
    80024c9e:	e02a                	sd	a0,0(sp)
    80024ca0:	850a                	mv	a0,sp
    80024ca2:	fffff097          	auipc	ra,0xfffff
    80024ca6:	68c080e7          	jalr	1676(ra) # 8002432e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h46dfaf96577b17ecE>
    80024caa:	60a2                	ld	ra,8(sp)
    80024cac:	0141                	addi	sp,sp,16
    80024cae:	8082                	ret

Disassembly of section .text._ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h65c6410ca8a4d3e4E:

0000000080024cb0 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h65c6410ca8a4d3e4E>:
    80024cb0:	6114                	ld	a3,0(a0)
    80024cb2:	6510                	ld	a2,8(a0)
    80024cb4:	852e                	mv	a0,a1
    80024cb6:	85b6                	mv	a1,a3
    80024cb8:	ffffe317          	auipc	t1,0xffffe
    80024cbc:	0e030067          	jr	224(t1) # 80022d98 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE>

Disassembly of section .text._ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h78c3d125c3c6a2c3E:

0000000080024cc0 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h78c3d125c3c6a2c3E>:
    80024cc0:	7139                	addi	sp,sp,-64
    80024cc2:	fc06                	sd	ra,56(sp)
    80024cc4:	6110                	ld	a2,0(a0)
    80024cc6:	7608                	ld	a0,40(a2)
    80024cc8:	f82a                	sd	a0,48(sp)
    80024cca:	7208                	ld	a0,32(a2)
    80024ccc:	f42a                	sd	a0,40(sp)
    80024cce:	6e08                	ld	a0,24(a2)
    80024cd0:	f02a                	sd	a0,32(sp)
    80024cd2:	6a08                	ld	a0,16(a2)
    80024cd4:	ec2a                	sd	a0,24(sp)
    80024cd6:	6614                	ld	a3,8(a2)
    80024cd8:	7188                	ld	a0,32(a1)
    80024cda:	e836                	sd	a3,16(sp)
    80024cdc:	6210                	ld	a2,0(a2)
    80024cde:	758c                	ld	a1,40(a1)
    80024ce0:	e432                	sd	a2,8(sp)
    80024ce2:	0030                	addi	a2,sp,8
    80024ce4:	ffffe097          	auipc	ra,0xffffe
    80024ce8:	c7a080e7          	jalr	-902(ra) # 8002295e <_ZN4core3fmt5write17hf87af17b3ec995a2E>
    80024cec:	70e2                	ld	ra,56(sp)
    80024cee:	6121                	addi	sp,sp,64
    80024cf0:	8082                	ret

Disassembly of section .text._ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h874d6ce7f8524becE:

0000000080024cf2 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h874d6ce7f8524becE>:
    80024cf2:	6108                	ld	a0,0(a0)
    80024cf4:	6114                	ld	a3,0(a0)
    80024cf6:	6510                	ld	a2,8(a0)
    80024cf8:	852e                	mv	a0,a1
    80024cfa:	85b6                	mv	a1,a3
    80024cfc:	ffffe317          	auipc	t1,0xffffe
    80024d00:	09c30067          	jr	156(t1) # 80022d98 <_ZN4core3fmt9Formatter3pad17hc4783833ae1fffcaE>

Disassembly of section .text._ZN64_$LT$core..str..error..Utf8Error$u20$as$u20$core..fmt..Debug$GT$3fmt17ha0e809482d073ba7E:

0000000080024d04 <_ZN64_$LT$core..str..error..Utf8Error$u20$as$u20$core..fmt..Debug$GT$3fmt17ha0e809482d073ba7E>:
    80024d04:	7139                	addi	sp,sp,-64
    80024d06:	fc06                	sd	ra,56(sp)
    80024d08:	f822                	sd	s0,48(sp)
    80024d0a:	f426                	sd	s1,40(sp)
    80024d0c:	f04a                	sd	s2,32(sp)
    80024d0e:	842e                	mv	s0,a1
    80024d10:	758c                	ld	a1,40(a1)
    80024d12:	7014                	ld	a3,32(s0)
    80024d14:	6d98                	ld	a4,24(a1)
    80024d16:	84aa                	mv	s1,a0
    80024d18:	00850913          	addi	s2,a0,8

0000000080024d1c <.LBB599_8>:
    80024d1c:	00009597          	auipc	a1,0x9
    80024d20:	95958593          	addi	a1,a1,-1703 # 8002d675 <.Lanon.f077182aff5f58a5660f14b1290425e3.570>
    80024d24:	4625                	li	a2,9
    80024d26:	8536                	mv	a0,a3
    80024d28:	9702                	jalr	a4
    80024d2a:	e42a                	sd	a0,8(sp)
    80024d2c:	e022                	sd	s0,0(sp)
    80024d2e:	ec26                	sd	s1,24(sp)

0000000080024d30 <.LBB599_9>:
    80024d30:	00009597          	auipc	a1,0x9
    80024d34:	94e58593          	addi	a1,a1,-1714 # 8002d67e <.Lanon.f077182aff5f58a5660f14b1290425e3.571>

0000000080024d38 <.LBB599_10>:
    80024d38:	00009717          	auipc	a4,0x9
    80024d3c:	8e870713          	addi	a4,a4,-1816 # 8002d620 <.Lanon.f077182aff5f58a5660f14b1290425e3.422>
    80024d40:	850a                	mv	a0,sp
    80024d42:	462d                	li	a2,11
    80024d44:	0834                	addi	a3,sp,24
    80024d46:	ffffd097          	auipc	ra,0xffffd
    80024d4a:	6f0080e7          	jalr	1776(ra) # 80022436 <_ZN4core3fmt8builders11DebugStruct5field17hd4a9c9da942f00c3E>
    80024d4e:	ec4a                	sd	s2,24(sp)

0000000080024d50 <.LBB599_11>:
    80024d50:	00009597          	auipc	a1,0x9
    80024d54:	93958593          	addi	a1,a1,-1735 # 8002d689 <.Lanon.f077182aff5f58a5660f14b1290425e3.572>

0000000080024d58 <.LBB599_12>:
    80024d58:	00009717          	auipc	a4,0x9
    80024d5c:	94070713          	addi	a4,a4,-1728 # 8002d698 <.Lanon.f077182aff5f58a5660f14b1290425e3.573>
    80024d60:	850a                	mv	a0,sp
    80024d62:	4625                	li	a2,9
    80024d64:	0834                	addi	a3,sp,24
    80024d66:	ffffd097          	auipc	ra,0xffffd
    80024d6a:	6d0080e7          	jalr	1744(ra) # 80022436 <_ZN4core3fmt8builders11DebugStruct5field17hd4a9c9da942f00c3E>
    80024d6e:	00914503          	lbu	a0,9(sp)
    80024d72:	00814583          	lbu	a1,8(sp)
    80024d76:	c91d                	beqz	a0,80024dac <.LBB599_14+0xe>
    80024d78:	4505                	li	a0,1
    80024d7a:	e985                	bnez	a1,80024daa <.LBB599_14+0xc>
    80024d7c:	6502                	ld	a0,0(sp)
    80024d7e:	03054583          	lbu	a1,48(a0)
    80024d82:	8991                	andi	a1,a1,4
    80024d84:	e991                	bnez	a1,80024d98 <.LBB599_13+0xc>
    80024d86:	750c                	ld	a1,40(a0)
    80024d88:	7108                	ld	a0,32(a0)
    80024d8a:	6d94                	ld	a3,24(a1)

0000000080024d8c <.LBB599_13>:
    80024d8c:	00008597          	auipc	a1,0x8
    80024d90:	dc758593          	addi	a1,a1,-569 # 8002cb53 <.Lanon.f077182aff5f58a5660f14b1290425e3.206>
    80024d94:	4609                	li	a2,2
    80024d96:	a809                	j	80024da8 <.LBB599_14+0xa>
    80024d98:	750c                	ld	a1,40(a0)
    80024d9a:	7108                	ld	a0,32(a0)
    80024d9c:	6d94                	ld	a3,24(a1)

0000000080024d9e <.LBB599_14>:
    80024d9e:	00008597          	auipc	a1,0x8
    80024da2:	db458593          	addi	a1,a1,-588 # 8002cb52 <.Lanon.f077182aff5f58a5660f14b1290425e3.205>
    80024da6:	4605                	li	a2,1
    80024da8:	9682                	jalr	a3
    80024daa:	85aa                	mv	a1,a0
    80024dac:	00b03533          	snez	a0,a1
    80024db0:	7902                	ld	s2,32(sp)
    80024db2:	74a2                	ld	s1,40(sp)
    80024db4:	7442                	ld	s0,48(sp)
    80024db6:	70e2                	ld	ra,56(sp)
    80024db8:	6121                	addi	sp,sp,64
    80024dba:	8082                	ret

Disassembly of section .text._ZN4core7unicode12unicode_data15grapheme_extend6lookup17hb6efbf5d86b330e2E:

0000000080024dbc <_ZN4core7unicode12unicode_data15grapheme_extend6lookup17hb6efbf5d86b330e2E>:
    80024dbc:	1141                	addi	sp,sp,-16
    80024dbe:	e406                	sd	ra,8(sp)
    80024dc0:	4701                	li	a4,0
    80024dc2:	00b51593          	slli	a1,a0,0xb
    80024dc6:	47fd                	li	a5,31

0000000080024dc8 <.LBB627_25>:
    80024dc8:	00009817          	auipc	a6,0x9
    80024dcc:	8f080813          	addi	a6,a6,-1808 # 8002d6b8 <_ZN4core7unicode12unicode_data15grapheme_extend17SHORT_OFFSET_RUNS17h48ab6df2484a36f4E>
    80024dd0:	0005889b          	sext.w	a7,a1
    80024dd4:	46fd                	li	a3,31
    80024dd6:	a039                	j	80024de4 <.LBB627_25+0x1c>
    80024dd8:	00178713          	addi	a4,a5,1
    80024ddc:	40e687b3          	sub	a5,a3,a4
    80024de0:	02d77a63          	bgeu	a4,a3,80024e14 <.LBB627_25+0x4c>
    80024de4:	0017d593          	srli	a1,a5,0x1
    80024de8:	00e587b3          	add	a5,a1,a4
    80024dec:	00279593          	slli	a1,a5,0x2
    80024df0:	95c2                	add	a1,a1,a6
    80024df2:	418c                	lw	a1,0(a1)
    80024df4:	00b5961b          	slliw	a2,a1,0xb
    80024df8:	ff1660e3          	bltu	a2,a7,80024dd8 <.LBB627_25+0x10>
    80024dfc:	05ae                	slli	a1,a1,0xb
    80024dfe:	2581                	sext.w	a1,a1
    80024e00:	01158863          	beq	a1,a7,80024e10 <.LBB627_25+0x48>
    80024e04:	86be                	mv	a3,a5
    80024e06:	40e687b3          	sub	a5,a3,a4
    80024e0a:	fcd76de3          	bltu	a4,a3,80024de4 <.LBB627_25+0x1c>
    80024e0e:	a019                	j	80024e14 <.LBB627_25+0x4c>
    80024e10:	00178713          	addi	a4,a5,1
    80024e14:	46f9                	li	a3,30
    80024e16:	0ae6e863          	bltu	a3,a4,80024ec6 <.LBB627_28>
    80024e1a:	00271793          	slli	a5,a4,0x2
    80024e1e:	2b100613          	li	a2,689
    80024e22:	00d70863          	beq	a4,a3,80024e32 <.LBB627_25+0x6a>
    80024e26:	00f805b3          	add	a1,a6,a5
    80024e2a:	0045e583          	lwu	a1,4(a1)
    80024e2e:	0155d613          	srli	a2,a1,0x15
    80024e32:	fff70693          	addi	a3,a4,-1
    80024e36:	00d77463          	bgeu	a4,a3,80024e3e <.LBB627_25+0x76>
    80024e3a:	4701                	li	a4,0
    80024e3c:	a831                	j	80024e58 <.LBB627_25+0x90>
    80024e3e:	45fd                	li	a1,31
    80024e40:	08b6fe63          	bgeu	a3,a1,80024edc <.LBB627_29>
    80024e44:	00269593          	slli	a1,a3,0x2
    80024e48:	95c2                	add	a1,a1,a6
    80024e4a:	0005e583          	lwu	a1,0(a1)
    80024e4e:	002006b7          	lui	a3,0x200
    80024e52:	36fd                	addiw	a3,a3,-1
    80024e54:	00d5f733          	and	a4,a1,a3
    80024e58:	010785b3          	add	a1,a5,a6
    80024e5c:	0005e583          	lwu	a1,0(a1)
    80024e60:	81d5                	srli	a1,a1,0x15
    80024e62:	00158693          	addi	a3,a1,1
    80024e66:	02d60f63          	beq	a2,a3,80024ea4 <.LBB627_26+0x22>
    80024e6a:	2b100793          	li	a5,689
    80024e6e:	882e                	mv	a6,a1
    80024e70:	00b7e463          	bltu	a5,a1,80024e78 <.LBB627_25+0xb0>
    80024e74:	2b100813          	li	a6,689
    80024e78:	4781                	li	a5,0
    80024e7a:	40e5073b          	subw	a4,a0,a4
    80024e7e:	fff60513          	addi	a0,a2,-1

0000000080024e82 <.LBB627_26>:
    80024e82:	00009617          	auipc	a2,0x9
    80024e86:	8b260613          	addi	a2,a2,-1870 # 8002d734 <_ZN4core7unicode12unicode_data15grapheme_extend7OFFSETS17h8de8e75bf9625e57E>
    80024e8a:	02b80263          	beq	a6,a1,80024eae <.LBB627_27>
    80024e8e:	00c586b3          	add	a3,a1,a2
    80024e92:	0006c683          	lbu	a3,0(a3) # 200000 <.Lline_table_start0+0x1c9699>
    80024e96:	9fb5                	addw	a5,a5,a3
    80024e98:	00f76663          	bltu	a4,a5,80024ea4 <.LBB627_26+0x22>
    80024e9c:	0585                	addi	a1,a1,1
    80024e9e:	feb516e3          	bne	a0,a1,80024e8a <.LBB627_26+0x8>
    80024ea2:	85aa                	mv	a1,a0
    80024ea4:	0015f513          	andi	a0,a1,1
    80024ea8:	60a2                	ld	ra,8(sp)
    80024eaa:	0141                	addi	sp,sp,16
    80024eac:	8082                	ret

0000000080024eae <.LBB627_27>:
    80024eae:	00008617          	auipc	a2,0x8
    80024eb2:	74260613          	addi	a2,a2,1858 # 8002d5f0 <.Lanon.f077182aff5f58a5660f14b1290425e3.360>
    80024eb6:	2b100593          	li	a1,689
    80024eba:	8542                	mv	a0,a6
    80024ebc:	ffffd097          	auipc	ra,0xffffd
    80024ec0:	26c080e7          	jalr	620(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

0000000080024ec6 <.LBB627_28>:
    80024ec6:	00008617          	auipc	a2,0x8
    80024eca:	71260613          	addi	a2,a2,1810 # 8002d5d8 <.Lanon.f077182aff5f58a5660f14b1290425e3.359>
    80024ece:	45fd                	li	a1,31
    80024ed0:	853a                	mv	a0,a4
    80024ed2:	ffffd097          	auipc	ra,0xffffd
    80024ed6:	256080e7          	jalr	598(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

0000000080024edc <.LBB627_29>:
    80024edc:	00008617          	auipc	a2,0x8
    80024ee0:	72c60613          	addi	a2,a2,1836 # 8002d608 <.Lanon.f077182aff5f58a5660f14b1290425e3.361>
    80024ee4:	45fd                	li	a1,31
    80024ee6:	8536                	mv	a0,a3
    80024ee8:	ffffd097          	auipc	ra,0xffffd
    80024eec:	240080e7          	jalr	576(ra) # 80022128 <_ZN4core9panicking18panic_bounds_check17h8e071db613335003E>
	...

Disassembly of section .text._ZN64_$LT$core..alloc..layout..Layout$u20$as$u20$core..fmt..Debug$GT$3fmt17h791c624323e1e5daE:

0000000080024ef2 <_ZN64_$LT$core..alloc..layout..Layout$u20$as$u20$core..fmt..Debug$GT$3fmt17h791c624323e1e5daE>:
    80024ef2:	7139                	addi	sp,sp,-64
    80024ef4:	fc06                	sd	ra,56(sp)
    80024ef6:	f822                	sd	s0,48(sp)
    80024ef8:	f426                	sd	s1,40(sp)
    80024efa:	f04a                	sd	s2,32(sp)
    80024efc:	842e                	mv	s0,a1
    80024efe:	758c                	ld	a1,40(a1)
    80024f00:	7014                	ld	a3,32(s0)
    80024f02:	6d98                	ld	a4,24(a1)
    80024f04:	84aa                	mv	s1,a0
    80024f06:	00850913          	addi	s2,a0,8

0000000080024f0a <.LBB637_8>:
    80024f0a:	00009597          	auipc	a1,0x9
    80024f0e:	adb58593          	addi	a1,a1,-1317 # 8002d9e5 <.Lanon.f077182aff5f58a5660f14b1290425e3.643>
    80024f12:	4619                	li	a2,6
    80024f14:	8536                	mv	a0,a3
    80024f16:	9702                	jalr	a4
    80024f18:	e42a                	sd	a0,8(sp)
    80024f1a:	e022                	sd	s0,0(sp)
    80024f1c:	ec26                	sd	s1,24(sp)

0000000080024f1e <.LBB637_9>:
    80024f1e:	00009597          	auipc	a1,0x9
    80024f22:	acd58593          	addi	a1,a1,-1331 # 8002d9eb <.Lanon.f077182aff5f58a5660f14b1290425e3.644>

0000000080024f26 <.LBB637_10>:
    80024f26:	00008717          	auipc	a4,0x8
    80024f2a:	6fa70713          	addi	a4,a4,1786 # 8002d620 <.Lanon.f077182aff5f58a5660f14b1290425e3.422>
    80024f2e:	850a                	mv	a0,sp
    80024f30:	4615                	li	a2,5
    80024f32:	0834                	addi	a3,sp,24
    80024f34:	ffffd097          	auipc	ra,0xffffd
    80024f38:	502080e7          	jalr	1282(ra) # 80022436 <_ZN4core3fmt8builders11DebugStruct5field17hd4a9c9da942f00c3E>
    80024f3c:	ec4a                	sd	s2,24(sp)

0000000080024f3e <.LBB637_11>:
    80024f3e:	00009597          	auipc	a1,0x9
    80024f42:	ab258593          	addi	a1,a1,-1358 # 8002d9f0 <.Lanon.f077182aff5f58a5660f14b1290425e3.645>

0000000080024f46 <.LBB637_12>:
    80024f46:	00009717          	auipc	a4,0x9
    80024f4a:	ab270713          	addi	a4,a4,-1358 # 8002d9f8 <.Lanon.f077182aff5f58a5660f14b1290425e3.646>
    80024f4e:	850a                	mv	a0,sp
    80024f50:	4619                	li	a2,6
    80024f52:	0834                	addi	a3,sp,24
    80024f54:	ffffd097          	auipc	ra,0xffffd
    80024f58:	4e2080e7          	jalr	1250(ra) # 80022436 <_ZN4core3fmt8builders11DebugStruct5field17hd4a9c9da942f00c3E>
    80024f5c:	00914503          	lbu	a0,9(sp)
    80024f60:	00814583          	lbu	a1,8(sp)
    80024f64:	c91d                	beqz	a0,80024f9a <.LBB637_14+0xe>
    80024f66:	4505                	li	a0,1
    80024f68:	e985                	bnez	a1,80024f98 <.LBB637_14+0xc>
    80024f6a:	6502                	ld	a0,0(sp)
    80024f6c:	03054583          	lbu	a1,48(a0)
    80024f70:	8991                	andi	a1,a1,4
    80024f72:	e991                	bnez	a1,80024f86 <.LBB637_13+0xc>
    80024f74:	750c                	ld	a1,40(a0)
    80024f76:	7108                	ld	a0,32(a0)
    80024f78:	6d94                	ld	a3,24(a1)

0000000080024f7a <.LBB637_13>:
    80024f7a:	00008597          	auipc	a1,0x8
    80024f7e:	bd958593          	addi	a1,a1,-1063 # 8002cb53 <.Lanon.f077182aff5f58a5660f14b1290425e3.206>
    80024f82:	4609                	li	a2,2
    80024f84:	a809                	j	80024f96 <.LBB637_14+0xa>
    80024f86:	750c                	ld	a1,40(a0)
    80024f88:	7108                	ld	a0,32(a0)
    80024f8a:	6d94                	ld	a3,24(a1)

0000000080024f8c <.LBB637_14>:
    80024f8c:	00008597          	auipc	a1,0x8
    80024f90:	bc658593          	addi	a1,a1,-1082 # 8002cb52 <.Lanon.f077182aff5f58a5660f14b1290425e3.205>
    80024f94:	4605                	li	a2,1
    80024f96:	9682                	jalr	a3
    80024f98:	85aa                	mv	a1,a0
    80024f9a:	00b03533          	snez	a0,a1
    80024f9e:	7902                	ld	s2,32(sp)
    80024fa0:	74a2                	ld	s1,40(sp)
    80024fa2:	7442                	ld	s0,48(sp)
    80024fa4:	70e2                	ld	ra,56(sp)
    80024fa6:	6121                	addi	sp,sp,64
    80024fa8:	8082                	ret

Disassembly of section .text._ZN69_$LT$core..alloc..layout..LayoutError$u20$as$u20$core..fmt..Debug$GT$3fmt17hfec9be36260ff346E:

0000000080024faa <_ZN69_$LT$core..alloc..layout..LayoutError$u20$as$u20$core..fmt..Debug$GT$3fmt17hfec9be36260ff346E>:
    80024faa:	7179                	addi	sp,sp,-48
    80024fac:	f406                	sd	ra,40(sp)
    80024fae:	f022                	sd	s0,32(sp)
    80024fb0:	ec26                	sd	s1,24(sp)
    80024fb2:	842e                	mv	s0,a1
    80024fb4:	758c                	ld	a1,40(a1)
    80024fb6:	7014                	ld	a3,32(s0)
    80024fb8:	6d98                	ld	a4,24(a1)
    80024fba:	84aa                	mv	s1,a0

0000000080024fbc <.LBB638_8>:
    80024fbc:	00009597          	auipc	a1,0x9
    80024fc0:	a5c58593          	addi	a1,a1,-1444 # 8002da18 <.Lanon.f077182aff5f58a5660f14b1290425e3.647>
    80024fc4:	462d                	li	a2,11
    80024fc6:	8536                	mv	a0,a3
    80024fc8:	9702                	jalr	a4
    80024fca:	e42a                	sd	a0,8(sp)
    80024fcc:	e022                	sd	s0,0(sp)
    80024fce:	e826                	sd	s1,16(sp)

0000000080024fd0 <.LBB638_9>:
    80024fd0:	00009597          	auipc	a1,0x9
    80024fd4:	a5358593          	addi	a1,a1,-1453 # 8002da23 <.Lanon.f077182aff5f58a5660f14b1290425e3.648>

0000000080024fd8 <.LBB638_10>:
    80024fd8:	00008717          	auipc	a4,0x8
    80024fdc:	67870713          	addi	a4,a4,1656 # 8002d650 <.Lanon.f077182aff5f58a5660f14b1290425e3.426>
    80024fe0:	850a                	mv	a0,sp
    80024fe2:	461d                	li	a2,7
    80024fe4:	0814                	addi	a3,sp,16
    80024fe6:	ffffd097          	auipc	ra,0xffffd
    80024fea:	450080e7          	jalr	1104(ra) # 80022436 <_ZN4core3fmt8builders11DebugStruct5field17hd4a9c9da942f00c3E>
    80024fee:	00914503          	lbu	a0,9(sp)
    80024ff2:	00814583          	lbu	a1,8(sp)
    80024ff6:	c91d                	beqz	a0,8002502c <.LBB638_12+0xe>
    80024ff8:	4505                	li	a0,1
    80024ffa:	e985                	bnez	a1,8002502a <.LBB638_12+0xc>
    80024ffc:	6502                	ld	a0,0(sp)
    80024ffe:	03054583          	lbu	a1,48(a0)
    80025002:	8991                	andi	a1,a1,4
    80025004:	e991                	bnez	a1,80025018 <.LBB638_11+0xc>
    80025006:	750c                	ld	a1,40(a0)
    80025008:	7108                	ld	a0,32(a0)
    8002500a:	6d94                	ld	a3,24(a1)

000000008002500c <.LBB638_11>:
    8002500c:	00008597          	auipc	a1,0x8
    80025010:	b4758593          	addi	a1,a1,-1209 # 8002cb53 <.Lanon.f077182aff5f58a5660f14b1290425e3.206>
    80025014:	4609                	li	a2,2
    80025016:	a809                	j	80025028 <.LBB638_12+0xa>
    80025018:	750c                	ld	a1,40(a0)
    8002501a:	7108                	ld	a0,32(a0)
    8002501c:	6d94                	ld	a3,24(a1)

000000008002501e <.LBB638_12>:
    8002501e:	00008597          	auipc	a1,0x8
    80025022:	b3458593          	addi	a1,a1,-1228 # 8002cb52 <.Lanon.f077182aff5f58a5660f14b1290425e3.205>
    80025026:	4605                	li	a2,1
    80025028:	9682                	jalr	a3
    8002502a:	85aa                	mv	a1,a0
    8002502c:	00b03533          	snez	a0,a1
    80025030:	64e2                	ld	s1,24(sp)
    80025032:	7402                	ld	s0,32(sp)
    80025034:	70a2                	ld	ra,40(sp)
    80025036:	6145                	addi	sp,sp,48
    80025038:	8082                	ret

Disassembly of section .text.memcpy:

000000008002503a <memcpy>:
    8002503a:	ca11                	beqz	a2,8002504e <memcpy+0x14>
    8002503c:	86aa                	mv	a3,a0
    8002503e:	00058703          	lb	a4,0(a1)
    80025042:	00e68023          	sb	a4,0(a3)
    80025046:	167d                	addi	a2,a2,-1
    80025048:	0685                	addi	a3,a3,1
    8002504a:	0585                	addi	a1,a1,1
    8002504c:	fa6d                	bnez	a2,8002503e <memcpy+0x4>
    8002504e:	8082                	ret

Disassembly of section .text.memmove:

0000000080025050 <memmove>:
    80025050:	40b506b3          	sub	a3,a0,a1
    80025054:	02c6f163          	bgeu	a3,a2,80025076 <memmove+0x26>
    80025058:	fff50693          	addi	a3,a0,-1
    8002505c:	15fd                	addi	a1,a1,-1
    8002505e:	00c58733          	add	a4,a1,a2
    80025062:	00070703          	lb	a4,0(a4)
    80025066:	fff60793          	addi	a5,a2,-1
    8002506a:	9636                	add	a2,a2,a3
    8002506c:	00e60023          	sb	a4,0(a2)
    80025070:	863e                	mv	a2,a5
    80025072:	f7f5                	bnez	a5,8002505e <memmove+0xe>
    80025074:	a819                	j	8002508a <memmove+0x3a>
    80025076:	ca11                	beqz	a2,8002508a <memmove+0x3a>
    80025078:	86aa                	mv	a3,a0
    8002507a:	00058703          	lb	a4,0(a1)
    8002507e:	00e68023          	sb	a4,0(a3)
    80025082:	167d                	addi	a2,a2,-1
    80025084:	0685                	addi	a3,a3,1
    80025086:	0585                	addi	a1,a1,1
    80025088:	fa6d                	bnez	a2,8002507a <memmove+0x2a>
    8002508a:	8082                	ret

Disassembly of section .text.memset:

000000008002508c <memset>:
    8002508c:	c619                	beqz	a2,8002509a <memset+0xe>
    8002508e:	86aa                	mv	a3,a0
    80025090:	00b68023          	sb	a1,0(a3)
    80025094:	167d                	addi	a2,a2,-1
    80025096:	0685                	addi	a3,a3,1
    80025098:	fe65                	bnez	a2,80025090 <memset+0x4>
    8002509a:	8082                	ret
